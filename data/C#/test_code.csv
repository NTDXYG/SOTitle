"var options = new OptionSet { { `` r|reset '' , `` do a reset '' , r = > _reset = r ! = null } , { `` f|filter= '' , `` add a filter '' , f = > _filter = f } , { `` h| ? |help '' , `` show this message and exit '' , v = > _showHelp = v ! = null } , } ; try { options.Parse ( args ) ; } catch ( OptionException ) { _showHelp = true ; return false ; } return true ;"
"Assert.IsGreater ( a , b ) //or , a little more discoverableAssert.That ( a , Is.GreaterThan ( b ) ) Assert.That ( a.SequenceEquals ( b ) ) void That ( Expression < Func < bool > > expr ) ; Assert.That ( ( ) = > a == b ) ; //could inspect expression and print a and bAssert.That ( ( ) = > a < b & & b < c ) ; //could mention the values of `` a < b '' and `` b < c '' and/or list the values of a , b , and c ."
"// Suspend all other threads to prevent loss// of state while we investigate the issue.SuspendAllButCurrentThread ( ) ; var remoteDebuggerProcess = new Process { StartInfo = { UseShellExecute = true , FileName = MsVsMonPath ; } } ; // Exception handling and early return removed here for brevity.remoteDebuggerProcess.Start ( ) ; // Wait for a debugger attach.while ( ! Debugger.IsAttached ) { Thread.Sleep ( 500 ) ; } Debugger.Break ( ) ; // Once we get here , we 've hit continue in the debugger . Restore all of our threads , // then get rid of the remote debugging tools.ResumeAllButCurrentThread ( ) ; remoteDebuggerProcess.CloseMainWindow ( ) ; remoteDebuggerProcess.WaitForExit ( ) ;"
"/// < summary > /// StartSubscriptionsAsync must be called if you want subscription change notifications./// This starts the subscription engine . We always create one subscription for/// Home DisplayName to start ( but ignore any updates ) ./// < /summary > public async Task StartSubscriptionsAsync ( ) { await _subscriptionClient.ConnectAsync ( Host , Port ) ; // Generates a compiler warning , but it is what we want Task.Run ( ( ) = > ReadSubscriptionResponses ( ) ) ; // We do a GetValue so we know we have a good connection SendRequest ( `` sys : //Home ? f ? ? '' + `` Name '' ) ; if ( FastMode ) EnableFastMode ( ) ; foreach ( var subscription in _subscriptions ) { SendSubscriptionRequest ( subscription.Value ) ; } }"
class C { void M ( ) { MyLibrary.SomeMethod ( ) ; } } private void AnalyzeNode ( SyntaxNodeAnalysisContext context ) { var invocationExpression = context.Node as InvocationExpressionSyntax ; var methodSymbol = context.SemanticModel.GetSymbolInfo ( invocationExpression ) .Symbol as IMethodSymbol ; if ( methodSymbol == null ) { return ; } // check if it is the library method I am interested in . No problems here if ( ! methodSymbol.Name.Equals ( `` SomeMethod '' ) || ! methodSymbol.ContainingSymbol.ToString ( ) .Equals ( `` MyNamespace.MyLibrary '' ) ) { return ; } // this retrieves outer method `` M '' . var outerMethodSyntax = invocationExpression.FirstAncestorOrSelf < MethodDeclarationSyntax > ( ) ; if ( outerMethodSyntax == null ) { return ; } // symbol.Symbol is always null here var symbol = context.SemanticModel.GetSymbolInfo ( outerMethodSyntax ) ; ...
"using ( var managerSession = new Session ( managerRole ) ) { // A manager puts some items in warehouse } using ( var employeeSession = new Session ( employeeRole ) ) { // An employee moves items from warehouse to store } using ( var customerSession = new Session ( customerRole ) ) { // A customer can buy items from the store } using ( var managerSession = new Session ( managerRole ) ) { Assert.IsTrue ( managerSession.DoJob ( ) , `` Manager did not do his job '' ) ; } public void Dispose ( ) { if ( NoExceptionThrown ( ) ) { Assert.IsFalse ( this.serviceConnection.HasErrors ( ) , `` Service connection has errors '' ) ; } this.serviceConnection.Dispose ( ) ; } Session.ForRole ( managerRole , ( session ) = > { /* Test code here */ } ) ; public static void ForRole ( Role r , Action < Session > code ) { var session = new Session ( r ) ; try { code ( session ) ; Assert.IsFalse ( session.serviceConnection.HasErrors ( ) ) ; } finally { session.Dispose ( ) ; } }"
public class MyEntity { public Int32 ID { get ; set ; } public String Name { get ; set ; } public String Description { get ; set ; } }
query = query.Where ( r = > r.baan_cat_family_code.Any ( s = > catFamCode.Contains ( s ) ) ) ; `` Argument type 'char ' is not assignable to parameter type 'string ' '' `` The argument 'value ' was the wrong type . Expected 'System.Char ' . Actual 'System.String ' . ''
internal delegate void Action < in T > ( T t ) ;
"public struct DataPoint { public readonly long X ; public readonly double Y ; public DataPoint ( long x , double y ) : this ( ) { this.X = x ; this.Y = y ; } }"
"string p12Path = HttpContext.Current.Server.MapPath ( `` ~/App_Data/certificate.p12 '' ) ; var auth = GoogleJsonWebToken.GetAccessToken ( `` uniquestring @ developer.gserviceaccount.com '' , p12Path , `` https : //www.googleapis.com/auth/calendar '' ) ; string Token = auth [ `` access_token '' ] ;"
"var userTests = _uow.UserTests .GetAll ( ) .Include ( t = > t.Test ) .Include ( t = > t.Test.Exam ) .Where ( t = > t.UserId == `` 0 '' || t.UserId == userId ) .ToList ( ) ; public class Exam { public int ExamId { get ; set ; } public int SubjectId { get ; set ; } public string Name { get ; set ; } public virtual ICollection < Test > Tests { get ; set ; } } public class Test { public int TestId { get ; set ; } public int ExamId { get ; set ; } public string Title { get ; set ; } public virtual ICollection < UserTest > UserTests { get ; set ; } } public class UserTest { public int UserTestId { get ; set ; } public string UserId { get ; set ; } public int TestId { get ; set ; } public int QuestionsCount { get ; set ; } } [ { `` userTestId '' :2 , `` userId '' : '' 0 '' , `` testId '' :12 , `` test '' : { `` testId '' :12 , '' examId '' :1 , `` exam '' : { `` examId '' :1 , '' subjectId '' :1 , `` tests '' : [ { `` testId '' :13 , '' examId '' :1 , '' title '' : '' Sample Test1 '' , `` userTests '' : [ { `` userTestId '' :3 , `` userId '' : '' 0 '' ,"
"public void DeployCourse ( Course course , Client client ) { if ( course == null ) throw new ArgumentNullException ( `` Course can not be null '' ) ; if ( client == null ) throw new ArgumentNullException ( `` Client can not be null '' ) ; try { _ftp.Transfer ( client.Server.IPAddress , course.PackageUrl , course.CourseName ) ; } catch ( Exception e ) { var newException = new Exception ( String.Format ( `` Error deploying Course : { 0 } to Client : { 1 } . See inner exception for more details '' , course.CourseName , client.Name ) , e ) ; throw newException ; } }"
"static void Main ( string [ ] args ) { RunTest ( ) ; } private static void RunTest ( ) { Task.Delay ( 1000 ) .ContinueWith ( t = > Console.WriteLine ( `` { 0 } '' , t.Exception ) , TaskContinuationOptions.OnlyOnFaulted ) .Wait ( ) ; }"
class HasDisposableClassField { private DisposableClass disposableClass ; } class HasDisposableClassProperty { private DisposableClass disposableClass { get ; set ; } public HasDisposableClassProperty ( ) { disposableClass = new DisposableClass ( ) ; } }
"static void Main ( string [ ] args ) { MyEnum x = 0 ; Console.WriteLine ( x.ToString ( ) ) ; Console.ReadLine ( ) ; } public enum MyEnum { First = 1 , Second = 2 }"
"button.Click += ( sender , args ) = > { } ; var dogs= animals.Where ( animal = > animal.Type == `` dog '' ) ; animals.ForEach ( animal= > Console.WriteLine ( animal.Name ) ) ;"
"< ResourceDictionary.MergedDictionaries > < ResourceDictionary Source= '' pack : //application : , , ,/WpfHelper ; Component/Resources/GlobalResources.xaml '' / > < /ResourceDictionary.MergedDictionaries > ╔══════════╦═════════════════╦═════════════════╦══════════════════╦════════════════════════════════════════════════╗║ ║ Resource Works ? ║ Platform Target ║ Target Framework ║ Reference File Path ║╠══════════╬═════════════════╬═════════════════╬══════════════════╬════════════════════════════════════════════════╣║ Project1 ║ Succeeded ║ Any CPU ║ .NET 4.6 ║ ... \Project1\Project1\Resources\Resources.xaml ║║ Project2 ║ Succeeded ║ x86 ║ .NET 4.6 ║ ... \Project2\Project2\Resources\Resources.xaml ║║ Project3 ║ Succeeded ║ Any CPU ║ .NET 4.6 ║ ... \Project3\Project3\Resources\Resources.xaml ║║ Project4 ║ Failed ║ x86 ║ .NET 4.6 ║ ... \Project4\Project4\Resources\Resources.xaml ║║ Project5 ║ Failed ║ x86 ║ .NET 4.6 ║ ... \Project5\Project5\Resources\Resources.xaml ║║ Project6 ║ Failed ║ Any CPU ║ .NET 4.6 ║ ... \Project6\Project6\Resources\Resources.xaml ║╚══════════╩═════════════════╩═════════════════╩══════════════════╩════════════════════════════════════════════════╝ [ assembly : ThemeInfo ( ResourceDictionaryLocation.None , ResourceDictionaryLocation.SourceAssembly ) ]"
try { Client.connect ( ) ; } catch ( System.Exception ex ) { // Do some exception handling ... } finally { // Do some cleanup ... } try { Client.connect ( ) ; } catch ( System.Exception ex ) { // Do some exception handling ... } finally { // Do some cleanup ... } // Talk to the server ...
< VSTemplate Version= '' 3.0.0 '' xmlns= '' http : //schemas.microsoft.com/developer/vstemplate/2005 '' Type= '' Item '' > < TemplateData > < Icon > VerilogSource.ico < /Icon > < DefaultName > module.v < /DefaultName > < Name > Basic Verilog Module < /Name > < Description > A basic Verilog module for quickly adding new files to the project . < /Description > < ProjectType > VerilogProject < /ProjectType > < /TemplateData > < TemplateContent > < ProjectItem TargetFileName= '' $ fileinputname $ .v '' ReplaceParameters= '' true '' > module.v < /ProjectItem > < /TemplateContent > < /VSTemplate >
String a = `` ABC '' ; System.out.println ( a.length ( ) ) ; for ( int n = 0 ; n < a.length ( ) ; n++ ) System.out.println ( a.codePointAt ( n ) ) ; String str = this.getString ( ) ; int cp ; boolean escaping = false ; for ( int n = 0 ; n < len ; n++ ) { //=================================================== cp = str.codePointAt ( n ) ; //LOOKING FOR SOME EQUIVALENT IN C # //=================================================== if ( ! escaping ) { ... . //Closing all braces below .
"DateTime.TryParseExact ( dateString , `` M/d/yyyy hh : mm : ss tt '' , CultureInfo.InvariantCulture , 0 , out dateValue )"
"var task1 = Task.Factory.StartNew ( ( ) = > { Console.WriteLine ( `` 11 '' ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` 12 '' ) ; } ) .ContinueWith ( async t = > { Console.WriteLine ( `` 13 '' ) ; var innerTasks = new List < Task > ( ) ; for ( var i = 0 ; i < 10 ; i++ ) { var j = i ; innerTasks.Add ( Task.Factory.StartNew ( ( ) = > { Console.WriteLine ( `` 1_ '' + j + `` _1 '' ) ; Thread.Sleep ( 500 ) ; Console.WriteLine ( `` 1_ '' + j + `` _2 '' ) ; } ) ) ; } await Task.WhenAll ( innerTasks.ToArray ( ) ) ; //Task.WaitAll ( innerTasks.ToArray ( ) ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` 14 '' ) ; } ) ; var task2 = Task.Factory.StartNew ( ( ) = > { Console.WriteLine ( `` 21 '' ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` 22 '' ) ; } ) .ContinueWith ( t = > { Console.WriteLine ( `` 23 '' ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` 24 '' ) ; } ) ; Console.WriteLine ( `` 1 '' ) ; await Task.WhenAll ( task1 , task2 ) ; Console.WriteLine ( `` 2 '' ) ; 1 < - Start11 / 21 < - The initial task start12 / 22 < - The initial task end13 / 23 < - The continuation task startSome combinations of `` 1_ [ 0..9 ] _ [ 1..2 ] '' and 24 < - the `` inner '' tasks of task 1 + the continuation of task 2 end14 < - The end of the task 1 continuation2 < - The end 1 < - Start11 / 21 < - The initial task start12 / 22 < - The initial task end13 / 23 < - The continuation task startSome combinations of `` 1_ [ 0..9 ] _ [ 1..2 ] '' and 24 < - the `` inner '' tasks of task 1 + the continuation of task 2 end2 < - The endSome more combinations of `` 1_ [ 0..9 ] _ [ 1..2 ] '' < - the `` inner '' tasks of task 114 < - The end of the task 1 continuation"
public class QuestionCommentController : ApiController { QuestionCommentCRUD crud = new QuestionCommentCRUD ( ) ; // GET api/questioncomment/5 [ HttpGet ] public string Read ( int id ) public class QuestionCommentController : Controller { QuestionCommentCRUD crud = new QuestionCommentCRUD ( ) ; // GET questioncomment/5 public string Read ( int id ) public void Post ( [ FromBody ] string value ) { }
< Jobs > < job > ... . < /job > < job > ... . < /job > ... . < /Jobs >
Link : < http : //example.com/TheBook/chapter2 > ; rel= '' previous '' ; title= '' previous chapter ''
bool hasOneElement = seq.Count ( ) == 1
< Border FocusManager.IsFocusScope= '' True '' KeyboardNavigation.TabNavigation= '' Cycle '' > < ItemsControl ItemsSource= '' { Binding } '' > < ItemsControl.ItemTemplate > < DataTemplate > < TextBox x : Name= '' Editor '' Text= '' { Binding } '' / > < /DataTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl > < /Border >
"PrintQueue printQueue = null ; LocalPrintServer localPrintServer = new LocalPrintServer ( ) ; // Retrieving collection of local printer on user machinePrintQueueCollection localPrinterCollection = localPrintServer.GetPrintQueues ( new [ ] { EnumeratedPrintQueueTypes.Local , EnumeratedPrintQueueTypes.Connections } ) ; System.Collections.IEnumerator localPrinterEnumerator = localPrinterCollection.GetEnumerator ( ) ; while ( localPrinterEnumerator.MoveNext ( ) ) { // Get PrintQueue from first available printer printQueue = ( PrintQueue ) localPrinterEnumerator.Current ; if ( ! printQueue.IsOffline ) { MessageBox.Show ( printQueue.FullName.ToString ( ) ) ; string s = `` Printer found `` + printQueue.FullName.ToString ( ) ; listBox1.Items.Add ( s ) ; } else { // No printer exist , return null PrintTicket // return null ; } }"
for ( float i = 0 ; i < float.MaxValue ; i++ ) ;
"'Website ' does not contain a static 'Main ' method suitable for an entry point using Microsoft.AspNet.Builder ; using Microsoft.AspNet.Hosting ; using Microsoft.Framework.ConfigurationModel ; using Microsoft.Framework.DependencyInjection ; namespace Test.Site.Web { public class Startup { public void ConfigureServices ( IServiceCollection services ) { services.AddMvc ( ) ; } public void Configure ( IApplicationBuilder app ) { app.UseErrorPage ( ) ; app.UseStaticFiles ( ) ; app.UseMvc ( routes = > { routes.MapRoute ( `` default '' , `` { controller } / { action } / { id } '' , defaults : new { controller = `` Home '' , action = `` Index '' } ) ; } ) ; app.UseMvc ( ) ; app.UseWelcomePage ( ) ; } } }"
SomeClass const & x ( ) const { return m_x ; }
public class MyAsyncCode { async Task MethodA ( ) { // Do some stuff ... await MethodB ( ) ; // Some other stuff } async Task MethodB ( ) { // Do some stuff ... await MethodC ( ) ; // Some other stuff } async Task MethodC ( ) { // Do some stuff ... } } public void MyCallingMethod ( ) { List < Task > tasks = new List < Task > ( ) ; for ( int c = 0 ; c < 4 ; c++ ) { MyAsyncCode asyncCode = new MyAsyncCode ( ) ; tasks.Add ( Task.Run ( ( ) = > asyncCode.MethodA ( ) ) ) ; } Task.WaitAll ( tasks.ToArray ( ) ) ; }
string path = @ '' C : \myfile.txt '' ;
//default constructors with no parameters : List < int > listOfInts = new ( ) ; //c # ArrayList < String > data = new ( ) ; //Java
"public enum Logic { PAY_DAY { @ Override public void acceptPlayer ( Player player ) { // Perform logic } } , COLLECT_CASH { @ Override public void acceptPlayer ( Player player ) { // Perform logic } } , ETC_ETC { @ Override public void acceptPlayer ( Player player ) { // Perform logic } } ; public abstract void acceptPlayer ( Player player ) ; }"
"byte [ ] buffer = new byte [ 16 * 1024 ] ; int read ; while ( true ) { read = input.Read ( buffer , 0 , buffer.Length ) ; Console.WriteLine ( `` Length : `` + read + `` Buffer : `` + GetNumberOfSlotsUsed ( buffer ) ) ; if ( read < = 0 ) { ... } else if ( read < 3 ) { ... } else { ... } } Length : 1 Buffer : 1Length : 57 Buffer : 57 var socket = new WebSocket ( serviceUrl , protocol ) ; socket.onopen = function ( ) { socket.send ( omeString ) ; }"
ReferenceLoopHandling = ReferenceLoopHandling.Serialize ( ot Ignore ) PreserveReferencesHandling = PreserveReferencesHandling.All Mock < IAction > _actionMock = new Mock < IAction > ( ) .SetupAllProperties ( ) ; Newtonsoft.Json.JsonConvert.SerializeObject ( _actionMock.Object ) ; // JsonSerializationException ( this line is in a method which i 'm not responsible of ) // IAction is any interface with some properties
"using System ; using System.Net ; using System.Diagnostics ; using System.Threading ; namespace Test { static class Program { [ STAThread ] static void Main ( ) { bool exit = false ; WebClient wc = new WebClient ( ) ; DateTime before = DateTime.Now ; wc.DownloadStringAsync ( new Uri ( `` http : //74.125.95.147 '' ) , `` First '' ) ; // IP Address of google , so DNS requests do n't add to time . wc.DownloadStringCompleted += delegate ( object sender , DownloadStringCompletedEventArgs e ) { Debug.WriteLine ( e.UserState + `` Call : `` + ( DateTime.Now - before ) ) ; if ( ( string ) e.UserState == `` First '' ) { before = DateTime.Now ; wc.DownloadStringAsync ( new Uri ( `` http : //74.125.95.147 '' ) , `` Second '' ) ; } else exit = true ; } ; /* * * Output : * * First Call : 00:00:13.7647873 * Second Call : 00:00:00.0740042 * */ while ( ! exit ) Thread.Sleep ( 1000 ) ; } } }"
"typedef bool ( *proc ) ( int* , ... ) ;"
"Task < T > ExecAsync < T > ( string connectionString , SqlCommand cmd , Func < SqlCommand , T > resultBuilder , CancellationToken cancellationToken = default ( CancellationToken ) ) { var tcs = new TaskCompletionSource < T > ( ) ; SqlConnectionProvider p ; try { p = GetProvider ( connectionString ) ; Task < IDisposable > openTask = p.AcquireConnectionAsync ( cmd , cancellationToken ) ; openTask .ContinueWith ( open = > { if ( open.IsFaulted ) tcs.SetException ( open.Exception.InnerExceptions ) ; else if ( open.IsCanceled ) tcs.SetCanceled ( ) ; else { var execTask = cmd.ExecuteNonQueryAsync ( cancellationToken ) ; execTask.ContinueWith ( exec = > { if ( exec.IsFaulted ) tcs.SetException ( exec.Exception.InnerExceptions ) ; else if ( exec.IsCanceled ) tcs.SetCanceled ( ) ; else { try { tcs.SetResult ( resultBuilder ( cmd ) ) ; } catch ( Exception exc ) { tcs.TrySetException ( exc ) ; } } } , TaskContinuationOptions.ExecuteSynchronously ) ; } } ) .ContinueWith ( _ = > { if ( ! openTask.IsFaulted ) openTask.Result.Dispose ( ) ; } , TaskContinuationOptions.ExecuteSynchronously ) ; } catch ( Exception ex ) { tcs.SetException ( ex ) ; } return tcs.Task ; } async Task < T > ExecAsync < T > ( string connectionString , SqlCommand cmd , Func < SqlCommand , T > resultBuilder , CancellationToken cancellationToken = default ( CancellationToken ) ) { SqlConnectionProvider p = GetProvider ( connectionString ) ; using ( IDisposable openTask = await p.AcquireConnectionAsync ( cmd , cancellationToken ) ) { await cmd.ExecuteNonQueryAsync ( cancellationToken ) ; return resultBuilder ( cmd ) ; } }"
"IEnumerable < T > Unfold < T > ( T seed , Func < T , T > accumulator ) { var nextValue = seed ; while ( true ) { yield return nextValue ; nextValue = accumulator ( nextValue ) ; } }"
var restClient = new RestClient ( baseURL ) ; var request = new RestRequest ( uri ) ; request.Method = Method.POST ; var response = restClient.Execute < User > ( request ) ;
"using System ; using System.Data ; using PedChallenge.DAL.PedDataSetTableAdapters ; [ System.ComponentModel.DataObject ] public class UsersBLL { private UsersTableAdapter _UsersAdapter = null ; protected UsersTableAdapter Adapter { get { if ( _UsersAdapter == null ) _UsersAdapter = new UsersTableAdapter ( ) ; return _UsersAdapter ; } } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Select , true ) ] public PedChallenge.DAL.PedDataSet.UsersDataTable GetUsers ( ) { return Adapter.GetUsers ( ) ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Select , false ) ] public PedChallenge.DAL.PedDataSet.UsersDataTable GetUserByUserID ( int userID ) { return Adapter.GetUserByUserID ( userID ) ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Select , false ) ] public PedChallenge.DAL.PedDataSet.UsersDataTable GetUsersByTeamID ( int teamID ) { return Adapter.GetUsersByTeamID ( teamID ) ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Select , false ) ] public PedChallenge.DAL.PedDataSet.UsersDataTable GetUsersByEmail ( string Email ) { return Adapter.GetUserByEmail ( Email ) ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Insert , true ) ] public bool AddUser ( int ? teamID , string FirstName , string LastName , string Email , string Role , int LocationID ) { // Create a new UsersRow instance PedChallenge.DAL.PedDataSet.UsersDataTable Users = new PedChallenge.DAL.PedDataSet.UsersDataTable ( ) ; PedChallenge.DAL.PedDataSet.UsersRow user = Users.NewUsersRow ( ) ; if ( UserExists ( Users , Email ) == true ) return false ; if ( teamID == null ) user.SetTeamIDNull ( ) ; else user.TeamID = teamID.Value ; user.FirstName = FirstName ; user.LastName = LastName ; user.Email = Email ; user.Role = Role ; user.LocationID = LocationID ; // Add the new user Users.AddUsersRow ( user ) ; int rowsAffected = Adapter.Update ( Users ) ; // Return true if precisely one row was inserted , // otherwise false return rowsAffected == 1 ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Update , true ) ] public bool UpdateUser ( int userID , int ? teamID , string FirstName , string LastName , string Email , string Role , int LocationID ) { PedChallenge.DAL.PedDataSet.UsersDataTable Users = Adapter.GetUserByUserID ( userID ) ; if ( Users.Count == 0 ) // no matching record found , return false return false ; PedChallenge.DAL.PedDataSet.UsersRow user = Users [ 0 ] ; if ( teamID == null ) user.SetTeamIDNull ( ) ; else user.TeamID = teamID.Value ; user.FirstName = FirstName ; user.LastName = LastName ; user.Email = Email ; user.Role = Role ; user.LocationID = LocationID ; // Update the product record int rowsAffected = Adapter.Update ( user ) ; // Return true if precisely one row was updated , // otherwise false return rowsAffected == 1 ; } [ System.ComponentModel.DataObjectMethodAttribute ( System.ComponentModel.DataObjectMethodType.Delete , true ) ] public bool DeleteUser ( int userID ) { int rowsAffected = Adapter.Delete ( userID ) ; // Return true if precisely one row was deleted , // otherwise false return rowsAffected == 1 ; } private bool UserExists ( PedChallenge.DAL.PedDataSet.UsersDataTable users , string email ) { // Check if user email already exists foreach ( PedChallenge.DAL.PedDataSet.UsersRow userRow in users ) { if ( userRow.Email == email ) return true ; } return false ; } }"
"public class Foo { public dynamic Bar ( ) { return Math.Min ( x + width , maxWidth ) ; } } public class Foo { public dynamic Bar ( ) { return Math.Min ( Resolve ( `` x '' ) + Resolve ( `` width '' ) , Resolve ( `` maxWidth '' ) ) ; } } CompilationUnit [ 0..99 ) { code : public class Foo\n { \n public dynamic Bar ( ) \n { \n return Math.Min ( x + width , maxWidth ) ; \n } \n } tokens : EndOfFileToken [ ] nodes { ClassDeclaration [ 0..99 ) { code : public class Foo\n { \n public dynamic Bar ( ) \n { \n return Math.Min ( x + width , maxWidth ) ; \n } \n } tokens : PublicKeyword [ public ] ClassKeyword [ class ] IdentifierToken [ Foo\n ] OpenBraceToken [ { \n ] CloseBraceToken [ } ] nodes { MethodDeclaration [ 21..98 ) { code : public dynamic Bar ( ) \n { \n return Math.Min ( x + width , maxWidth ) ; \n } \n tokens : PublicKeyword [ public ] IdentifierToken [ Bar ] nodes { IdentifierName [ 30..38 ) { code : dynamic tokens : IdentifierToken [ dynamic ] } ParameterList [ 41..45 ) { code : ( ) \n tokens : OpenParenToken [ ( ] CloseParenToken [ ) \n ] } Block [ 45..98 ) { code : { \n return Math.Min ( x + width , maxWidth ) ; \n } \n tokens : OpenBraceToken [ { \n ] CloseBraceToken [ } \n ] nodes { ReturnStatement [ 50..93 ) { code : return Math.Min ( x + width , maxWidth ) ; \n tokens : ReturnKeyword [ return ] SemicolonToken [ ; \n ] nodes { InvocationExpression [ 61..90 ) { code : Math.Min ( x + width , maxWidth ) nodes { SimpleMemberAccessExpression [ 61..69 ) { code : Math.Min tokens : DotToken [ . ] nodes { IdentifierName [ 61..65 ) { code : Math tokens : IdentifierToken [ Math ] } IdentifierName [ 66..69 ) { code : Min tokens : IdentifierToken [ Min ] } } } ArgumentList [ 69..90 ) { code : ( x + width , maxWidth ) tokens : OpenParenToken [ ( ] CommaToken [ , ] CloseParenToken [ ) ] nodes { Argument [ 70..79 ) { code : x + width nodes { AddExpression [ 70..79 ) { code : x + width tokens : PlusToken [ + ] nodes { IdentifierName [ 70..72 ) { code : x tokens : IdentifierToken [ x ] } IdentifierName [ 74..79 ) { code : width tokens : IdentifierToken [ width ] } } } } } Argument [ 81..89 ) { code : maxWidth nodes { IdentifierName [ 81..89 ) { code : maxWidth tokens : IdentifierToken [ maxWidth ] } } } } } } } } } } } } } } } } }"
// Generic List Testvar genericList = new List < int > ( ) ; var sw = Stopwatch.StartNew ( ) ; for ( int i = 0 ; i < 20000 ; i++ ) { genericList.Add ( i ) ; genericList = new List < int > ( genericList ) ; } sw.Stop ( ) ; Console.WriteLine ( `` Add duration for List < T > : `` + sw.ElapsedMilliseconds ) ; IList < int > completeList = new List < int > ( genericList ) ; sw.Restart ( ) ; // Remove from 20000 - > 0.for ( int i = completeList.Count - 1 ; i > = 0 ; i -- ) { genericList.Remove ( completeList [ i ] ) ; genericList = new List < int > ( genericList ) ; } sw.Stop ( ) ; Console.WriteLine ( `` Remove duration for List < T > : `` + sw.ElapsedMilliseconds ) ; Console.WriteLine ( `` Items after remove for List < T > : `` + genericList.Count ) ; // ImmutableList Testvar immutableList = ImmutableList < int > .Empty ; sw.Restart ( ) ; for ( int i = 0 ; i < 20000 ; i++ ) { immutableList = immutableList.Add ( i ) ; } sw.Stop ( ) ; Console.WriteLine ( `` Add duration for ImmutableList < T > : `` + sw.ElapsedMilliseconds ) ; sw.Restart ( ) ; // Remove from 20000 - > 0.for ( int i = completeList.Count - 1 ; i > = 0 ; i -- ) { immutableList = immutableList.Remove ( completeList [ i ] ) ; } sw.Stop ( ) ; Console.WriteLine ( `` Remove duration for ImmutableList < T > : `` + sw.ElapsedMilliseconds ) ; Console.WriteLine ( `` Items after remove for ImmutableList < T > : `` + immutableList.Count ) ;
"Observable.FromEvent < TEventHandler , TEventHandlerArgs > ( add , remove ) public delegate void EventHandler ( object sender , EventArgs e ) ; TEventHandler d = ( TEventHandler ) Delegate.CreateDelegate ( typeof ( TEventHandler ) , ( object ) new Action < EventArgs > ( observer.OnNext ) , typeof ( Action < EventArgs > ) .GetMethod ( `` Invoke '' ) ) ;"
TxtEditCodeViewer.TextArea.TextView.LineTransformers.Add ( new ColorizeAvalonEdit ( ) ) ; TxtEditCodeViewer.TextArea.TextView.InvalidateVisual ( ) ; TxtEditCodeViewer.TextArea.TextView.InvalidateArrange ( ) ; TxtEditCodeViewer.TextArea.TextView.InvalidateMeasure ( ) ; //TxtEditCodeViewer.TextArea.TextView.InvalidateVisual ( ) ; //TxtEditCodeViewer.TextArea.TextView.InvalidateArrange ( ) ; //TxtEditCodeViewer.TextArea.TextView.InvalidateMeasure ( ) ; //TxtEditCodeViewer.InvalidateVisual ( ) ; //TxtEditCodeViewer.InvalidateArrange ( ) ; //TxtEditCodeViewer.InvalidateMeasure ( ) ; //TxtEditCodeViewer.TextArea.InvalidateArrange ( ) ; //TxtEditCodeViewer.TextArea.InvalidateMeasure ( ) ; //TxtEditCodeViewer.TextArea.InvalidateVisual ( ) ;
"response = Messages.KEY_GOOD_MORNING Messages.ResourceManager.GetString ( `` KEY_GOOD_MORNING '' , CultureInfo.CreateSpecificCulture ( lang.value ) )"
"[ Theory ] [ InlineData ( `` 12h '' , 12 , PeriodUnit.Hour ) ] [ InlineData ( `` 3d '' , 3 , PeriodUnit.Day ) ] [ InlineData ( `` 1m '' , 1 , PeriodUnit.Month ) ] public void ShouldParsePeriod ( string periodString , int value , PeriodUnit periodUnit ) { var period = Period.Parse ( periodString ) ; period.Value.Should ( ) .Be ( value ) ; period.PeriodUnit.Should ( ) .Be ( periodUnit ) ; }"
"public IController CreateController ( RequestContext requestContext , string controllerName ) { string host = requestContext.HttpContext.Request.Headers [ `` Host '' ] ; if ( ! host.EndsWith ( SomeHardcodedString ) ) { // FAILS HERE //some special action } //proceed with controller creation }"
\\10.11.11.130\FileServer\Folder2\Folder3\\\10.11.11.130\d $ \Main\FileServer\Folder2\Folder3\
"double ymin = FindMinimumYValue ( ) ; double mag = Math.Floor ( Math.Log10 ( ymin ) ) ; ymin = Math.Pow ( 10 , mag ) ; yAxis.Minimum = ymin ; double ymax = FindMaximumYValue ( ) ; mag = Math.Ceiling ( Math.Log10 ( ymax ) ) ; ymax = Math.Pow ( 10 , mag ) ; yAxis.Maximum = ymax ; yAxis.Interval = 1 ; yAxis.MajorGrid.Interval = 1 ; yAxis.MajorTickMark.Interval = 1 ; yAxis.MinorGrid.Interval = 1 ; yAxis.MinorTickMark.Interval = 1 ;"
var dbData = readData ( someType ) ; //it is IList collection var serializer = new XmlSerializer ( dbData.GetType ( ) ) ;
// Dumbed down version of classpublic sealed class PrefixLengthIPAddress { public static explicit operator IPAddress ( PrefixLengthIPAddress address ) { return ( address ! = null ) ? address._address : null ; } public PrefixLengthIPAddress ( IPAddress address ) { _address = address ; _length = address.GetLength ( ) ; } private readonly ushort _length ; private readonly IPAddress _address ; } var family = ( ( IPAddress ) prefixLengthAddress ) .AddressFamily ; var family = prefixLengthAddress.CastAs < IPAddress > ( ) .AddressFamily ; public static T CastAs < T > ( this object value ) where T : class { return ( T ) value ; } var family = ( ( IPAddress ) prefixLengthAddress ) .AddressFamily ; // Worksvar family = prefixLengthAddress.CastAs < IPAddress > ( ) .AddressFamily ; // InvalidCastException public static T CastAs < T > ( this object value ) { return ( T ) ( ( dynamic ) value ) ; }
String gpuName = String.Empty ; ManagementObjectCollection objectCollection = new ManagementObjectSearcher ( `` SELECT Name FROM Win32_VideoController '' ) .Get ( ) ; foreach ( ManagementObject managementObject in objectCollection ) { foreach ( PropertyData propertyData in managementObject.Properties ) { if ( ( gpuName == String.Empty ) || ( propertyData.Value.ToString ( ) .ToLower ( ) .IndexOf ( `` intel '' ) == -1 ) ) { gpuName = propertyData.Value.ToString ( ) ; break ; } } }
"< Window x : Class= '' WpfApplication2.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Title= '' MainWindow '' Height= '' 202 '' Width= '' 194 '' > < Grid HorizontalAlignment= '' Left '' Height= '' 171 '' VerticalAlignment= '' Top '' Width= '' 186 '' > < Rectangle Fill= '' # FFF4F4F5 '' HorizontalAlignment= '' Left '' Height= '' 151 '' Margin= '' 10,10,0,0 '' Stroke= '' Black '' VerticalAlignment= '' Top '' Width= '' 166 '' / > < /Grid > < Window x : Class= '' WpfApplication2.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Title= '' MainWindow '' Height= '' 202 '' Width= '' 194 '' > < Grid HorizontalAlignment= '' Left '' Height= '' 171 '' VerticalAlignment= '' Top '' Width= '' 186 '' > < Rectangle Fill= '' # FFF4F4F5 '' HorizontalAlignment= '' Center '' Height= '' 151 '' Margin= '' 10 '' Stroke= '' Black '' VerticalAlignment= '' Center '' Width= '' 166 '' / > < /Grid >"
"class Giraffid { public virtual void Eat ( int [ ] leaves ) { Console.WriteLine ( `` G '' ) ; } } class Okapi : Giraffid { public override void Eat ( params int [ ] leaves ) { Console.WriteLine ( `` O '' ) ; } } var okapi = new Okapi ( ) ; okapi.Eat ( 2 , 4 , 6 ) ; // will not compile !"
"session ( `` accessckf '' ) =isEditor function CheckAuthentication ( ) CheckAuthentication=session ( `` accessckf '' ) end function < % @ page codepage= '' 65001 '' debug= '' true '' language= '' c # '' lcid= '' 6153 '' % > < % @ import namespace= '' CKSource.CKFinder.Connector.Core '' % > < % @ import namespace= '' CKSource.CKFinder.Connector.Core.Authentication '' % > < % @ import namespace= '' CKSource.CKFinder.Connector.Core.Builders '' % > < % @ import namespace= '' CKSource.CKFinder.Connector.Host.Owin '' % > < % @ import namespace= '' Owin '' % > < % @ import namespace= '' System.Data.Odbc '' % > < % @ import namespace= '' System.Threading '' % > < % @ import namespace= '' System.Threading.Tasks '' % > < script runat= '' server '' > public void Configuration ( IAppBuilder appBuilder ) { var connectorBuilder=ConfigureConnector ( ) ; var connector=connectorBuilder.Build ( new OwinConnectorFactory ( ) ) ; appBuilder.Map ( `` /path/to/connector '' , builder= > builder.UseConnector ( connector ) ) ; } public ConnectorBuilder ConfigureConnector ( ) { var connectorBuilder=new ConnectorBuilder ( ) ; connectorBuilder.SetAuthenticator ( new MyAuthenticator ( ) ) ; return connectorBuilder ; } public class MyAuthenticator : IAuthenticator { public Task < IUser > AuthenticateAsync ( ICommandRequest commandRequest , CancellationToken cancellationToken ) { var domain=HttpContext.Current.Request.Url.Host ; var cookie=HttpContext.Current.Request.Cookies [ urlDomain ] ; var password= '' '' ; var username= '' '' ; var user=new User ( false , null ) ; if ( cookie ! =null ) { if ( cookie [ `` username '' ] ! =null ) username=cookie [ `` username '' ] ; if ( cookie [ `` password '' ] ! =null ) password=cookie [ `` password '' ] ; if ( username ! = '' '' & & password ! = '' '' ) { var connection=new OdbcConnection ( `` database= [ database ] ; driver=MySQL ; pwd= [ pwd ] ; server= [ server ] ; uid= [ uid ] ; '' ) ; connection.Open ( ) ; OdbcDataReader records=new OdbcCommand ( `` SELECT ISEDITOR FROM MEMBERS WHERE USERNAME= ' '' +username+ '' ' AND PASSWORD= ' '' +password+ '' ' '' , connection ) .ExecuteReader ( ) ; if ( records.HasRows ) { records.Read ( ) ; bool isEditor=records.GetString ( 0 ) == '' 1 '' ; var roles= '' member '' ; if ( isEditor ) roles= '' editor , member '' ; user=new User ( isEditor , roles.Split ( ' , ' ) ) ; } records.Close ( ) ; connection.Close ( ) ; } } return Task.FromResult ( ( IUser ) user ) ; } } < /script >"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.IO ; namespace ConsoleApplication2 { class Program { static void Main ( string [ ] args ) { String line ; try { //Pass the file path and file name to the StreamReader constructor StreamReader sr = new StreamReader ( `` C : \\Temp1\\test1.txt '' ) ; StreamWriter sw = new StreamWriter ( `` C : \\Temp2\\test2.txt '' ) ; //Read the first line of text line = sr.ReadLine ( ) ; //Continue to read until you reach end of file while ( line ! = null ) { //write the line to console window Console.WriteLine ( line ) ; int myVal = 3 ; for ( int i = 0 ; i < myVal ; i++ ) { Console.WriteLine ( line ) ; sw.WriteLine ( line ) ; } //Write to the other file sw.WriteLine ( line ) ; //Read the next line line = sr.ReadLine ( ) ; } //close the file sr.Close ( ) ; Console.ReadLine ( ) ; } catch ( Exception e ) { Console.WriteLine ( `` Exception : `` + e.Message ) ; } finally { Console.WriteLine ( `` Executing finally block . `` ) ; } } } }
"DateTime DateOfSmth ; string PlaceOfSmth ; $ '' { DateOfSmth } , { PlaceOfSmth } '' .Trim ( ' ' , ' , ' ) ; string Format = `` { 0 : dd.MM.yyyy } '' ; $ '' { DateOfSmth : Format } , { PlaceOfSmth } '' .Trim ( ' ' , ' , ' ) ;"
IntPtr.Zero == new IntPtr ( 0 ) - > `` could not evaluate expression '' IntPtr.Zero == default ( IntPtr ) -- > `` could not evaluate expression '' IntPtr.Zero == ( IntPtr ) 0 - > `` could not evaluate expression '' IntPtr.Zero.Equals ( IntPtr.Zero ) -- > `` Enum value was out of legal range '' exceptionIntPtr.Zero.Equals ( default ( IntPtr ) ) -- > `` Enum value was out of legal range '' exceptionIntPtr.Zero == IntPtr.Zero -- > truenew IntPtr ( 0 ) == new IntPtr ( 0 ) -- > true
"private string FormatCustPhoneBox ( string a ) { string phone = a ; for ( int j = 0 ; j < phone.Length ; j++ ) { if ( ! Char.IsDigit ( phone , j ) ) { phone = phone.Remove ( j , 1 ) ; //Remove any non numeric chars . j -- ; } } return phone ; } private void FormatPhoneNum ( ) { decimal iPhone = decimal.Parse ( CustomerPhone1Box.Text ) ; CustomerPhone1Box.Text = string.Format ( `` { 0 : ( # # # ) # # # - # # # # } '' , iPhone ) ; }"
public class SearchModel { public string Locations { get ; set ; } public string City { get ; set ; } public string Address { get ; set ; } public string MaxRecord { get ; set ; } public string PageSize { get ; set ; } ... . ... . Approx 80 properties } SearchModel model = new SearchModel ( ) ; string [ ] Parameters = `` my location_Locations/new york_City/city street_Address/200_MaxRecord/20_PageSize '' .Split ( '/ ' ) ; foreach ( string item in Parameters ) { string [ ] value=item.Split ( ' _ ' ) ; model.value [ 1 ] = value [ 0 ] ; }
~A ( ) { this.Dispose ( ) ; } ~B ( ) { this.Dispose ( ) ; }
[ CustomAuthorize ( `` Security.Admin.ManageWidgets.Update '' ) ] [ CustomAuthorize ( i = > i.Admin.ManageWidgets.Update ) ] [ CustomAuthorize ( LambdaToString ( i = > i.Admin.ManageWidgets.Update ) ) ]
"//Sorry for the inconvenience of shorterned code , for context see the link `` here ( 1 ) '' ... override this.ActivateAsync ( ) = this.RegisterTimer ( new Func < obj , Task > ( this.FlushQueue ) , null , TimeSpan.FromMilliseconds ( 100.0 ) , TimeSpan.FromMilliseconds ( 100.0 ) ) | > ignore if RoleEnvironment.IsAvailable then this.RefreshHubs ( null ) | > Async.awaitPlainTask | > Async.RunSynchronously else this.AddHub ( `` http : //localhost:48777/ '' ) | > Async.awaitPlainTask | > Async.RunSynchronously //Return value comes from here . base.ActivateAsync ( ) member private this.RefreshHubs ( _ ) = //Code omitted , in case mor context is needed , take a look at the link `` here ( 2 ) '' , sorry for the inconvinience ... //The return value is Task . //In the C # version the AddHub provided tasks are collected and then the //on the last line there is return await Task.WhenAll ( newHubAdditionTasks ) newHubs | > Array.map ( fun i - > this.AddHub ( i ) ) | > Task.WhenAllmember private this.AddHub ( address ) = //Code omitted , in case mor context is needed , take a look at the link `` here ( 2 ) '' , sorry for the inconvinience ... //In the C # version : // ... //hubs.Add ( address , new Tuple < HubConnection , IHubProxy > ( hubConnection , hub ) ) // } //so this is `` void '' and could perhaps be Async < void > in F # ... //The return value is Task . hubConnection.Start ( ) | > Async.awaitTaskVoid | > Async.RunSynchronously TaskDone.Done module Async = let AwaitTaskVoid : ( Task - > Async < unit > ) = Async.AwaitIAsyncResult > > Async.Ignore type TaskBuilder ( ? continuationOptions , ? scheduler , ? cancellationToken ) = let contOptions = defaultArg continuationOptions TaskContinuationOptions.None let scheduler = defaultArg scheduler TaskScheduler.Default let cancellationToken = defaultArg cancellationToken CancellationToken.None"
public async Task < string > LogIntoFacebook ( ) { //getting application Id string SID = WebAuthenticationBroker.GetCurrentApplicationCallbackUri ( ) .ToString ( ) ; //// Get active session FBSession sess = FBSession.ActiveSession ; sess.FBAppId = FacebookAppId ; sess.WinAppId = SID ; //setting Permissions FBPermissions permissions = new FBPermissions ( PermissionList ) ; try { // Login to Facebook FBResult result = await sess.LoginAsync ( permissions ) ; if ( result.Succeeded ) { // Login successful return sess.AccessTokenData.AccessToken ; } else { // Login failed return null ; } } catch ( InvalidOperationException ex ) { SimpleIoc.Default.GetInstance < IErrorService > ( ) .ReportErrorInternalOnly ( ex ) ; return null ; } catch ( Exception ex ) { SimpleIoc.Default.GetInstance < IErrorService > ( ) .ReportErrorInternalOnly ( ex ) ; return null ; } return null ; } //getting application Idstring SID = WebAuthenticationBroker.GetCurrentApplicationCallbackUri ( ) .ToString ( ) ;
public class GenericClass < T > where T : class { public const T val = null ; }
"public interface IGeneral { } public interface ISpecific : IGeneral { } public Func < IGeneral , String > Cast ( Object specificFuncAsObject ) { var generalFunc = specificFuncAsObject as Func < IGeneral , String > ; Assert.IsNotNull ( generalFunc ) ; // < -- - casting did n't work return generalFunc ; } Func < ISpecific , String > specificFunc = specific = > `` Hey ! `` ; var generalFunc = Cast ( specificFunc ) ; Func < IGeneral , String > generalFunc = new Func < IGeneral , String > ( general = > specificFunc ( general as ISpecific ) ) ;"
"private void RunScript ( double z , int x , List < double > y , ref object A ) { List < double > temp = new List < double > ( ) ; double r ; System.Threading.Tasks.Parallel.ForEach ( y , numb = > { r = Math.Pow ( ( numb * x ) , z ) ; temp.Add ( r ) ; } ) ; A = temp ;"
< property name= '' FeeGenerator '' column= '' FeeGenerator '' type= '' Serializable '' / > CustomType < NHibernate.Type.SerializableType > ( ) ; Could not instantiate IType SerializableType : System.MissingMethodException : No parameterless constructor defined for this object .
var methods = nodes.OfType < MethodDeclarationSyntax > ( ) ; var extensionMethods = methods.Where ( m = > m.Modifiers.Any ( t = > t.Kind == SyntaxKind.StaticKeyword ) & & m.ParameterList.Parameters.Any ( p = > p.Modifiers.Any ( pm = > pm.Kind == SyntaxKind.ThisKeyword ) ) ) ;
"Network.OutBound.SendData ( messageOne ) ; Network.OutBound.SendData ( messageTwo ) ; public void SendData ( byte [ ] buffer ) { connectedSocket.BeginSend ( buffer,0 , buffer.Length , SocketFlags.None , SendCompleteMethod ) ; } private void SendComplete ( arResult ) { int bytesSent ; bytesSent = arResult.EndSend ( ) ; if ( bytesSent < arResult.state.buffer.Length ) { //Not all data sent yet , recall BeginSend connectedSocket.BeginSend ( buffer , bytesSent , buffer.Length - bytesSent , SocketFlags.None , SendCompleteMethod ) ; } else { //All data sent successfully } }"
"public static void Method < T > ( this List < T > list ) { list.Add ( default ( T ) ) ; } List < int > ints = new List < int > ( new int [ ] { 1 , 2 , 3 , 4 , 5 } ) ; ints.Method ( ) ; public static void Method < T > ( this List < T > list , Func < T , bool > predicate ) { list = list.Where ( predicate ) .ToList ( ) ; } List < int > ints = new List < int > ( new int [ ] { 1 , 2 , 3 , 4 , 5 } ) ; ints.Method ( i = > i > 2 ) ;"
"private void ControlSelect ( ) { if ( PostingType == PostingTypes.Loads & & ! IsMultiPost ) { singleLoadControl.Visible = true ; singleTruckControl.Visible = false ; multiTruckControl.Visible = false ; multiLoadControl.Visible = false ; } else if ( PostingType == PostingTypes.Trucks & & ! IsMultiPost ) { singleLoadControl.Visible = false ; singleTruckControl.Visible = true ; multiTruckControl.Visible = false ; multiLoadControl.Visible = false ; } else if ( PostingType == PostingTypes.Loads & & IsMultiPost ) { singleLoadControl.Visible = false ; singleTruckControl.Visible = false ; multiTruckControl.Visible = false ; multiLoadControl.Visible = true ; } else if ( PostingType == PostingTypes.Trucks & & IsMultiPost ) { singleLoadControl.Visible = false ; singleTruckControl.Visible = false ; multiTruckControl.Visible = true ; multiLoadControl.Visible = false ; } } private void ControlSelect ( ) { List < UserControl > controlList = GetControlList ( ) ; string visableControl = singleLoadControl.ID ; if ( PostingType == PostingTypes.Loads & & ! IsMultiPost ) { visableControl = singleLoadControl.ID ; } else if ( PostingType == PostingTypes.Trucks & & ! IsMultiPost ) { visableControl = singleTruckControl.ID ; } else if ( PostingType == PostingTypes.Loads & & IsMultiPost ) { visableControl = multiLoadControl.ID ; } else if ( PostingType == PostingTypes.Trucks & & IsMultiPost ) { visableControl = multiTruckControl.ID ; } foreach ( UserControl userControl in controlList ) { userControl.Visible = ( userControl.ID == visableControl ) ; } } private List < UserControl > GetControlList ( ) { List < UserControl > controlList = new List < UserControl > { singleLoadControl , multiTruckControl , singleTruckControl , multiLoadControl } ; return controlList ; } private void SetSingleLoadControlAsSelected ( ) { singleLoadControl.Visible = true ; singleTruckControl.Visible = false ; multiTruckControl.Visible = false ; multiLoadControl.Visible = false ; }"
public bool IsHashSet ( object obj ) { return obj is HashSet < > ; } public bool IsHashSet ( object obj ) { return obj.GetType ( ) == typeof ( HashSet < > ) ; }
"public static IEnumerable < Func < int > > GetFunctions ( ) { for ( int i = 1 ; i < = 10 ; i++ ) yield return new Func < int > ( ( ) = > i ) ; } public static IEnumerable < Func < int > > GetFunctionsLinq ( ) { return Enumerable.Range ( 1 , 10 ) .Select ( i = > new Func < int > ( ( ) = > i ) ) ; } List < Func < int > > yieldList = GetFunctions ( ) .ToList ( ) ; List < Func < int > > linqList = GetFunctionsLinq ( ) .ToList ( ) ; foreach ( var func in yieldList ) Console.WriteLine ( `` [ YIELD ] { 0 } '' , func ( ) ) ; Console.WriteLine ( `` ================== '' ) ; foreach ( var func in linqList ) Console.WriteLine ( `` [ LINQ ] { 0 } '' , func ( ) ) ; [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11 [ YIELD ] 11================== [ LINQ ] 1 [ LINQ ] 2 [ LINQ ] 3 [ LINQ ] 4 [ LINQ ] 5 [ LINQ ] 6 [ LINQ ] 7 [ LINQ ] 8 [ LINQ ] 9 [ LINQ ] 10"
void Main ( ) { HashSet < Tester > testset = new HashSet < Tester > ( ) ; testset.Add ( new Tester ( 1 ) ) ; testset.Add ( new Tester ( 2 ) ) ; foreach ( Tester tester in testset ) { tester.Dump ( ) ; } foreach ( Tester tester in testset ) { tester.myint = 3 ; } foreach ( Tester tester in testset ) { tester.Dump ( ) ; } HashSet < Tester > secondhashset = new HashSet < Tester > ( testset ) ; foreach ( Tester tester in secondhashset ) { tester.Dump ( ) ; } } class Tester { public int myint ; public Tester ( int i ) { this.myint = i ; } public override bool Equals ( object o ) { if ( o== null ) return false ; Tester that = o as Tester ; if ( that == null ) return false ; return ( this.myint == that.myint ) ; } public override int GetHashCode ( ) { return this.myint ; } public override string ToString ( ) { return this.myint.ToString ( ) ; } }
"public sealed class MyGlobalActionFilter : IActionFilter { public MyGlobalActionFilter ( IService1 svc1 , IService2 svc2 , RequestType reqType ) { // code here } // IActionFilter implementation here ... } Bind < IService1 > ( ) .To < ConcreteService1 > ( ) .InRequestScope ( ) Bind < IService2 > ( ) .To < ConcreteService2 > ( ) .InRequestScope ( ) BindFilter < MyGlobalActionFilter > ( FilterScope.Global , null ) .WhenControllerHas < RequestTypeAttribute > ( ) .WithConstructorArgumentFromControllerAttribute < RequestTypeAttribute > ( `` reqType '' , x = > x.RequestType ) ; BindFilter < MyGlobalActionFilter > ( FilterScope.Global , null ) .WhenActionMethodHas < RequestTypeAttribute > ( ) .WithConstructorArgumentFromActionAttribute < RequestTypeAttribute > ( `` reqType '' , x = > x.RequestType ) ; BindFilter < MyGlobalActionFilter > ( FilterScope.Global ) .When ( x = > true ) .WithConstructorArgument ( `` reqType '' , RequestType.Undefined ) [ RequestType ( RequestType.Type1 ) ] public sealed class SomeController : Controller { /* code here*/ }"
"namespace Class.iOS { public partial class CustomCell : UITableViewCell { public static readonly NSString Key = new NSString ( `` CustomCell '' ) ; public static readonly UINib Nib ; public int Row { get ; set ; } public event EventHandler LikeButtonPressed ; private void OnLikeButtonPressed ( ) { if ( LikeButtonPressed ! = null ) { LikeButtonPressed ( this , EventArgs.Empty ) ; } } public override void MovedToWindow ( ) { if ( Window ! = null ) { btnAdd.TouchUpInside += HandleLikeButtonPressed ; } else { btnAdd.TouchUpInside -= HandleLikeButtonPressed ; } } private void HandleLikeButtonPressed ( object sender , EventArgs e ) { OnLikeButtonPressed ( ) ; } static CustomCell ( ) { Nib = UINib.FromName ( `` CustomCell '' , NSBundle.MainBundle ) ; } public CustomCell ( ) { } public CustomCell ( IntPtr handle ) : base ( handle ) { } public void UpdateCell ( string Name , int number ) { // some code } public class TableSource : UITableViewSource { public override nint RowsInSection ( UITableView tableview , nint section ) { return 8 ; } private void HandleLikeButtonPressed ( object sender , EventArgs e ) { var cell = ( CustomCell ) sender ; var row = cell.Row ; switch ( row ) { case 0 : cell.label.Text = `` '' break ; case 1 : cell.label.Text = `` '' break ; } } public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { var cell = tableView.DequeueReusableCell ( CustomCell.Key ) as CustomCell ; cell.Row = indexPath.Row ; if ( cell == null ) { cell = new CustomCell ( ) ; var views = NSBundle.MainBundle.LoadNib ( `` CustomCell '' , cell , null ) ; cell.LikeButtonPressed += HandleLikeButtonPressed ; cell = Runtime.GetNSObject ( views.ValueAt ( 0 ) ) as CustomCell ; } cell.UpdateCell ( // some code ) ; return cell ; } } } }"
"public event EventHandler CookinDone = delegate { } ; public void CoockinRequest ( ) { var indicator = new ActivityIndicator ( ) ; ActivityIndicator.Show ( `` Oooo coockin ' something cool '' ) ; var bw = new BackgroundWorker ( ) ; bw.DoWork += ( sender , e ) = > CockinService.Cook ( ) ; bw.RunWorkerCompleted += ( sender , e ) = > { indicator.Hide ( ) ; CookinDone.Invoke ( this , null ) ; } ; bw.RunWorkerAsync ( ) ; } var cook = new Cook ( ) ; cook.CookinDone += ( sender , e ) = > MessageBox.Show ( `` Yay , smells good '' ) ; cook.CoockinRequest ( ) ; if ( CoockinRequest ( ) ) MessageBox.Show ( 'Yay , smells even better ' ) ;"
"class A < T > where T : class { public bool F ( T r1 , T r2 ) { return r1 == r2 ; } } ldarg.1box ! Tldarg.2box ! Tceq"
"public SomePage ( ) { GlobalWorker.Instance.UserLoggedIn += new EventHandler ( OnUserLoggedIn ) ; } private void OnLoggedIn ( object sender , EventArgs e ) { }"
[ Conditional ( DEBUG ) ] private void DoSomeLocalDebugging ( ) { //debugging }
using System ; namespace ConsoleApplication1 { class TestMath { static void Main ( ) { double res = 0.0 ; for ( int i =0 ; i < 1000000 ; ++i ) res += System.Math.Sqrt ( 2.0 ) ; Console.WriteLine ( res ) ; Console.ReadKey ( ) ; } } }
public static class SomeFactory { public static Func < IUnitOfWork > GetUoW = ( ) = > new EF4UoW ( new SomeModelContainer ( ) ) ; } // usagevar uow = SomeFactory.GetUoW ( ) ; // testabillityvar testUoW = new InMemUoW ( ) ; testUoW.Add ( new Customer ( ) ... ) ; SomeFactory.GetUoW = ( ) = > testUoW ; // the service can get an UoW using the factoryvar result = SomeDomainService.DoStuff ( ... ) ;
public interface IService < T >
"public async Task < IEnumerable < Item > > LoadItemsAsync ( ) { using ( var con = new OracleConnection ( connectionString ) ) { var items = await con.QueryAsync < dynamic > ( `` someQuery '' ) ; return items.Select ( e = > new Item { ... } ) ; } } //in UI thread , load items like this : var items = await LoadItemsAsync ( ) ; public async Task < IEnumerable < Item > > LoadItemsAsync ( ) { using ( var con = new OracleConnection ( connectionString ) ) { var items = await Task.Run ( ( ) = > con.Query < dynamic > ( `` someQuery '' ) ) ; return items.Select ( e = > new Item { ... } ) ; } } //in UI thread , load items like this : var items = await LoadItemsAsync ( ) ;"
"public GetCustomers ( Action < IEnumerable < Customer > , Exception > callBack ) { }"
public int FirstInvalidDigitPosition { get { for ( int index = 0 ; index < this.positions.Count ; ++index ) { if ( ! this.positions [ index ] .Valid ) return index ; } throw new InvalidOperationException ( `` Attempt to get invalid digit position whene there are no invalid digits . `` ) ; } }
"namespace demo { class Program { static void Main ( string [ ] args ) { Info myInfo = new Info ( ) ; myInfo.DisplayInfo ( `` Daniel Wilson '' , `` 4 - Hi-Lo Game '' ) ; // I moved String playAgain = `` N '' ; to here do { DWHiLowUI theUI = new DWHiLowUI ( ) ; theUI.Play ( ) ; String playAgain = `` N '' ; Console.WriteLine ( `` Enter ' Y ' to play again , any other key to exit . `` ) ; playAgain = Console.ReadLine ( ) ; } while ( ( playAgain == `` Y '' ) || ( playAgain == '' y '' ) ) ; Console.ReadLine ( ) ; } } } Error 7 The name 'playAgain ' does not exist in the current context"
"public delegate string MessageFormatterDelegate ( string message , params object [ ] arguments ) ; public delegate string MessageFormatterCallback ( MessageFormatterDelegate formatterDelegate ) ; public static class TestClass { public static string Evaluate ( MessageFormatterCallback formatterCallback ) { return ( formatterCallback ( String.Format ) ) ; } } Console.WriteLine ( TestClass.Evaluate ( message = > message ( `` { 0 } , { 1 } , { 2 } '' , 1 , 2 , 3 ) ) ) ; Error 1 Delegate 'MessageFormatterDelegate ' does not take 4 arguments Console.WriteLine ( TestClass.Evaluate ( ( MessageFormatterDelegate message ) = > message ( `` { 0 } , { 1 } , { 2 } '' , 1 , 2 , 3 ) ) ) ;"
"< table style= '' width : 100 % ; '' > @ { int i = 0 ; int numOfColumns = 3 ; foreach ( var prop in ViewData.ModelMetadata.Properties .Where ( pm = > pm.ShowForDisplay & & ! ViewData.TemplateInfo.Visited ( pm ) ) ) { if ( prop.HideSurroundingHtml ) { @ Html.Display ( prop.PropertyName ) } else { if ( i % numOfColumns == 0 ) { @ Html.Raw ( `` < tr > '' ) ; } < td class= '' editor-label '' > @ Html.Label ( prop.PropertyName ) < /td > < td class= '' editor-field '' > @ Html.Editor ( prop.PropertyName ) < span class= '' error '' > @ Html.ValidationMessage ( prop.PropertyName , '' * '' ) < /span > < /td > if ( i % numOfColumns == numOfColumns - 1 ) { @ Html.Raw ( `` < /tr > '' ) ; } i++ ; } } } < /table > public class SecurityEditModel { [ ScaffoldColumn ( false ) ] public SelectList roleList { get ; set ; } public User currentUser { get ; set ; } } public ViewResult Edit ( int id ) { User user = repository.Users.FirstOrDefault ( c = > c.ID == id ) ; var viewModel = new SecurityEditModel { currentUser = user , roleList = new SelectList ( repository.Roles.Where ( r = > r.Enabled == true ) .ToList ( ) , `` ID '' , `` RoleName '' ) } ; return View ( viewModel ) ; } @ model Nina.WebUI.Models.SecurityEditModel @ { ViewBag.Title = `` Edit '' ; Layout = `` ~/Views/Shared/_Layout.cshtml '' ; } < h2 > Edit < /h2 > @ using ( Html.BeginForm ( `` Edit '' , `` Security '' ) ) { @ Html.EditorFor ( m = > m.currentUser ) < table style= '' width : 100 % ; '' > < tr > < td class= '' editor-label '' > User Role : < /td > < td class= '' editor-field '' > < ! -- I want to move this to the EditorTemplate -- > @ Html.DropDownListFor ( model = > model.currentUser.RoleID , Model.roleList ) < /td > < /tr > < /table > < div class= '' editor-row '' > < div class= '' editor-label '' > < /div > < div class= '' editor-field '' > < /div > < /div > < div class= '' editor-row '' > & nbsp ; < /div > < div style= '' text-align : center ; '' > < input type= '' submit '' value= '' Save '' / > & nbsp ; & nbsp ; < input type= '' button '' value= '' Cancel '' onclick= '' location.href= ' @ Url.Action ( `` List '' , `` Clients '' ) ' '' / > < /div > }"
"ecdsa = ECDsa.Create ( ) ; var pem = `` MHYCAQEEH5t2Xlmsw5uqw3W9+/3nosFi6i3V901uW6ZzUpvVM0qgCgYIKoZIzj0DAQehRANCAASck2UuMxfyDYBdJC0mHNeToqMBhJuMZYSgkUNbK/xzD7e3cwr5okPx0pZdSMfDmyi1dBujtIIxFK9va1bdVAR9 '' ; var derArray = Convert.FromBase64String ( pem ) ; ecdsa.ImportECPrivateKey ( derArray , out _ ) ; $ cat private_key_cert_265.pem -- -- -BEGIN EC PRIVATE KEY -- -- -MHYCAQEEH5t2Xlmsw5uqw3W9+/3nosFi6i3V901uW6ZzUpvVM0qgCgYIKoZIzj0DAQehRANCAASck2UuMxfyDYBdJC0mHNeToqMBhJuMZYSgkUNbK/xzD7e3cwr5okPx0pZdSMfDmyi1dBujtIIxFK9va1bdVAR9 -- -- -END EC PRIVATE KEY -- -- - $ openssl ec -in private_key_cert_265.pemread EC keywriting EC key -- -- -BEGIN EC PRIVATE KEY -- -- -MHcCAQEEIACbdl5ZrMObqsN1vfv956LBYuot1fdNblumc1Kb1TNKoAoGCCqGSM49AwEHoUQDQgAEnJNlLjMX8g2AXSQtJhzXk6KjAYSbjGWEoJFDWyv8cw+3t3MK+aJD8dKWXUjHw5sotXQbo7SCMRSvb2tW3VQEfQ== -- -- -END EC PRIVATE KEY -- -- -"
foreach ( MyClass i in x ) { if ( i is IMy ) { IMy a = ( IMy ) i ; a.M1 ( ) ; } } foreach ( MyClass i in x ) { IMy a = i as IMy ; if ( a ! = null ) { a.M1 ( ) ; } }
"var myList = new List < List < string > > ( ) { new List < string > ( ) { `` a '' , `` b '' , `` c '' , `` d '' } , new List < string > ( ) { `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' } , new List < string > ( ) { `` w '' , `` x '' , `` y '' , `` z '' } , // ... etc ... } ; { { `` a '' , `` 1 '' , `` w '' , ... } , { `` b '' , `` 2 '' , `` x '' , ... } , { `` c '' , `` 3 '' , `` y '' , ... } , { `` d '' , `` 4 '' , `` z '' , ... } } public static IEnumerable < IEnumerable < T > > Rotate < T > ( this IEnumerable < IEnumerable < T > > list ) { for ( int i = 0 ; i < list.Min ( x = > x.Count ( ) ) ; i++ ) { yield return list.Select ( x = > x.ElementAt ( i ) ) ; } } // snipvar newList = myList.Rotate ( ) ;"
public class vehicle { public void Go ( ) { Log ( `` vehicle X fired '' ) ; } } public class car : vehicle { public void Go ( ) : base ( ) { // do something } }
using System.Text ; using System.Threading ; using System.Threading.Tasks ; namespace dgTEST { class Program { [ STAThread ] static void Main ( string [ ] args ) { ExtComponentCaller extCompCaller = new ExtComponentCaller ( ) ; result = extCompCaller.Call ( input ) ; Thread t = new Thread ( new ThreadStart ( ( ) = > { try { result = extCompCaller.Call ( input ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.ToString ( ) ) ; } } ) ) ; t.SetApartmentState ( ApartmentState.STA ) ; t.Start ( ) ; t.Join ( ) ; } } }
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Diagnostics ; using System.Threading.Tasks ; using System.IO ; namespace OptimizationQuestion { class Program { struct ValidWord { public string word ; public int score ; } ValidWord [ ] valid ; StringBuilder output ; int total ; public void Score1 ( string [ ] words ) { valid = new ValidWord [ words.Length ] ; for ( int i = 0 ; i < words.Length ; i++ ) { StringBuilder builder = new StringBuilder ( ) ; foreach ( char c in words [ i ] ) { if ( c ! = ' U ' ) builder.Append ( c ) ; } if ( words [ i ] .Length == 3 ) { valid [ i ] = new ValidWord { word = builder.ToString ( ) , score = words [ i ] .Length } ; } } } public void Report1 ( StringBuilder outputBuffer ) { int total = 0 ; foreach ( ValidWord wordInfo in valid ) { if ( wordInfo.score > 0 ) { outputBuffer.AppendLine ( String.Format ( `` { 0 } { 1 } '' , wordInfo.word.ToString ( ) , wordInfo.score ) ) ; total += wordInfo.score ; } } outputBuffer.AppendLine ( string.Format ( `` Total = { 0 } '' , total ) ) ; } public void Score2 ( string [ ] words ) { output = new StringBuilder ( ) ; total = 0 ; for ( int i = 0 ; i < words.Length ; i++ ) { StringBuilder builder = new StringBuilder ( ) ; foreach ( char c in words [ i ] ) { if ( c ! = ' U ' ) builder.Append ( c ) ; } if ( words [ i ] .Length == 3 ) { output.AppendLine ( String.Format ( `` { 0 } { 1 } '' , builder.ToString ( ) , words [ i ] .Length ) ) ; total += words [ i ] .Length ; } } } public void Report2 ( StringBuilder outputBuffer ) { outputBuffer.Append ( output.ToString ( ) ) ; outputBuffer.AppendLine ( string.Format ( `` Total = { 0 } '' , total ) ) ; } static void Main ( string [ ] args ) { Program [ ] program = new Program [ 100 ] ; for ( int i = 0 ; i < program.Length ; i++ ) program [ i ] = new Program ( ) ; string [ ] words = File.ReadAllLines ( `` words.txt '' ) ; Stopwatch stopwatch = new Stopwatch ( ) ; const int TIMING_REPETITIONS = 20 ; double averageTime1 = 0.0 ; StringBuilder output = new StringBuilder ( ) ; for ( int i = 0 ; i < TIMING_REPETITIONS ; ++i ) { stopwatch.Reset ( ) ; stopwatch.Start ( ) ; output.Clear ( ) ; Parallel.ForEach < Program > ( program , p = > { p.Score1 ( words ) ; } ) ; for ( int k = 0 ; k < program.Length ; k++ ) program [ k ] .Report1 ( output ) ; stopwatch.Stop ( ) ; averageTime1 += stopwatch.Elapsed.TotalSeconds ; GC.Collect ( ) ; } averageTime1 /= ( double ) TIMING_REPETITIONS ; Console.WriteLine ( string.Format ( `` Run 1 Total Average Time = { 0:0.000000 } sec '' , averageTime1 ) ) ; double averageTime2 = 0.0 ; for ( int i = 0 ; i < TIMING_REPETITIONS ; ++i ) { stopwatch.Reset ( ) ; stopwatch.Start ( ) ; output.Clear ( ) ; Parallel.ForEach < Program > ( program , p = > { p.Score2 ( words ) ; } ) ; for ( int k = 0 ; k < program.Length ; k++ ) program [ k ] .Report2 ( output ) ; stopwatch.Stop ( ) ; averageTime2 += stopwatch.Elapsed.TotalSeconds ; GC.Collect ( ) ; } averageTime2 /= ( double ) TIMING_REPETITIONS ; Console.WriteLine ( string.Format ( `` Run 2 Total Average Time = { 0:0.000000 } sec '' , averageTime2 ) ) ; Console.ReadLine ( ) ; } } }"
"< svg width= '' 400 '' height= '' 400 '' > < g transform= '' translate ( 0,0 ) '' > < rect width= '' 5 '' height= '' 5 '' > < /rect > < circle cx= '' 40 '' cy= '' 19 '' r= '' 25 '' > < /circle > < text x= '' 37 '' y= '' 9.5 '' dy= '' .35em '' > my text < /text > < /g > < /svg >"
"public static IEnumerable < T > Quicksort < T > ( this IEnumerable < T > source ) where T : IComparable < T > { if ( ! source.Any ( ) ) yield break ; var pivot = source.First ( ) ; var sortedQuery = source.Skip ( 1 ) .Where ( a = > a.CompareTo ( source.First ( ) ) < = 0 ) .Quicksort ( ) .Concat ( new [ ] { pivot } ) .Concat ( source.Skip ( 1 ) .Where ( a = > a.CompareTo ( source.First ( ) ) > 0 ) .Quicksort ( ) ) ; foreach ( T key in sortedQuery ) yield return key ; } var rand = new Random ( ) ; var ienum = Enumerable.Range ( 1 , 100 ) .Select ( a = > rand.Next ( ) ) ; var array = ienum.ToArray ( ) ; try { array.Quicksort ( ) .Count ( ) ; Console.WriteLine ( `` Array went fine . `` ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Array did not go fine ( { 0 } ) . `` , ex.Message ) ; } try { ienum.Quicksort ( ) .Count ( ) ; Console.WriteLine ( `` IEnumerable went fine . `` ) ; } catch ( Exception ex ) { Console.WriteLine ( `` IEnumerable did not go fine ( { 0 } ) . `` , ex.Message ) ; }"
"public class Person { public string Name { get ; set ; } public int Age { get ; set ; } } private void Form1_Load ( object sender , EventArgs e ) { var data = new ArrayList ( ) ; data.Add ( new Person ( `` Bob '' , 25 ) ) ; data.Add ( new Person ( `` Alice '' , 23 ) ) ; this.dataGridView1.DataSource = data ; } DataTable dt = new DataTable ( ) ; dt.Columns.Add ( `` Name '' ) ; dt.Columns.Add ( `` Row '' ) ; dt.Rows.Add ( `` Bob '' , 25 ) ; dt.Rows.Add ( `` Alice '' , 23 ) ; this.dataGridView1.DataSource = dt ;"
public interface ICar { void Created ( ) ; } public class BigCar : ICar { public void Created ( ) { } } public class SmallCar : ICar { public void Created ( ) { } } public class LuxaryCar : ICar { public void Created ( ) { } } public class CarFactory { public ICar CreateCar ( int carType ) { switch ( carType ) { case 0 : return new BigCar ( ) ; case 1 : return new SmallCar ( ) ; case 2 : return new LuxaryCar ( ) ; default : break ; } return null ; } }
"string [ ] lines = File.ReadAllLines ( path ) ; var dictionary = lines.Select ( line = > line.Split ( ' ; ' ) ) .ToDictionary ( keyValue = > keyValue [ 0 ] , bits = > bits [ 1 ] ) ;"
"if ( x < Math.Max ( y , z ( ) ) ) if ( x > Math.Min ( y , z ( ) ) ) if ( x < y || x < z ( ) )"
"var fromAddress = new MailAddress ( username , DefaultSender ) ; var toAddress = new MailAddress ( builder.ToString ( ) ) ; //builder reference having multiple email addressstring subject = txtSubject.Text ; string body = txtBody.Text ; ; var smtp = new SmtpClient { Host = HostName , Port = 587 , EnableSsl = true , DeliveryMethod = SmtpDeliveryMethod.Network , UseDefaultCredentials = false , Credentials = new NetworkCredential ( username , password ) , //Timeout = 1000000 } ; var message = new MailMessage ( fromAddress , toAddress ) { Subject = subject , Body = body , IsBodyHtml = chkHtmlBody.Checked } ; if ( System.IO.File.Exists ( txtAttechments.Text ) ) { System.Net.Mail.Attachment attechment = new Attachment ( txtAttechments.Text ) ; message.Attachments.Add ( attechment ) ; } if ( this.Enabled ) this.Enabled = false ; smtp.Send ( message ) ;"
"System.Diagnostics.Process.Start ( `` inetcpl.cpl '' , `` ,4 '' ) ;"
"cmd2.CommandText = ( `` insert into `` + TableName + `` values ( `` + string.Join ( `` , '' , insertvalues ) + `` ) ; '' ) ; StringBuilder sb2 = new StringBuilder ( ) ; sb2.Append ( `` insert into `` ) ; sb2.Append ( TableName ) ; sb2.Append ( `` values ( `` ) ; sb2.Append ( string.Join ( `` , '' , insertvalues ) ) ; sb2.Append ( `` ) ; '' ) ; cmd2.CommandText = sb2.ToString ( ) ;"
"public static object TupleDic_RemoveValue ( object [ ] param ) { var dic = param [ 0 ] as Dictionary < ( int did , int eid , string name ) , string > ; var keysToRetrieve = param [ 2 ] as List < ( int did , int eid , string name ) > ; foreach ( var key in keysToRetrieve ) { dic.Remove ( key ) ; } return dic ; } public static object NestedDic_RemoveValue ( object [ ] param ) { var dic = param [ 1 ] as Dictionary < int , Dictionary < int , Dictionary < string , string > > > ; var keysToRetrieve = param [ 2 ] as List < ( int did , int eid , string name ) > ; foreach ( var key in keysToRetrieve ) { if ( dic.TryGetValue ( key.did , out var elementMap ) & & elementMap.TryGetValue ( key.eid , out var propertyMap ) ) propertyMap.Remove ( key.name ) ; } return dic ; }"
"[ DllImport ( `` user32.dll '' ) ] protected static extern int DdeInitializeW ( ref int id , DDECallback cb , int afcmd , int ulres ) ; [ DllImport ( `` user32.dll '' ) ] static extern IntPtr DdeConnect ( int idInst , // instance identifier IntPtr hszService , // handle to service name string IntPtr hszTopic , // handle to topic name string IntPtr pCC // context data ) ;"
"internal class MyClass { public void Do ( ) { Exception exception = null ; try { //example of an error occured in main logic throw new InvalidOperationException ( ) ; } catch ( Exception e ) { exception = e ; throw ; } finally { try { //example of an error occured in finally throw new AccessViolationException ( ) ; } catch ( Exception e ) { if ( exception ! = null ) throw new AggregateException ( exception , e ) ; throw ; } } } } private static void Main ( string [ ] args ) { try { new MyClass ( ) .Do ( ) ; } catch ( AggregateException e ) { foreach ( var innerException in e.InnerExceptions ) Console.Out.WriteLine ( `` -- -- Error : { 0 } '' , innerException ) ; } catch ( Exception e ) { Console.Out.WriteLine ( `` -- -- Error : { 0 } '' , e ) ; } Console.ReadKey ( ) ; }"
"Texts.Events ( ) .MouseUp .InvokeCommand ( ViewModel , x = > x.DoSomething ) ; Texts.Events ( ) .MouseUp .Select ( x = > Unit.Default ) .InvokeCommand ( ViewModel , x = > x.DoSomething ) ;"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Xml ; using System.Xml.Linq ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc.LoadXml ( @ '' < Parts > < Part name= '' '' DisappearsOk '' '' disabled= '' '' true '' '' > < /Part > < Part name= '' '' KeepMe '' '' disabled= '' '' false '' '' > < /Part > < Part name= '' '' KeepMe2 '' '' > < /Part > < Part name= '' '' ShouldBeGone '' '' disabled= '' '' true '' '' > < /Part > < /Parts > '' ) ; XmlNode root = xmlDoc.DocumentElement ; List < XmlNode > disabledNodes = new List < XmlNode > ( ) ; try { foreach ( XmlNode node in root.ChildNodes.Cast < XmlNode > ( ) .Where ( child = > child.Attributes [ `` disabled '' ] ! = null & & Convert.ToBoolean ( child.Attributes [ `` disabled '' ] .Value ) ) ) { Console.WriteLine ( `` Removing : '' ) ; Console.WriteLine ( XDocument.Parse ( node.OuterXml ) .ToString ( ) ) ; root.RemoveChild ( node ) ; } } catch ( Exception Ex ) { Console.WriteLine ( `` Exception , as expected '' ) ; } Console.WriteLine ( ) ; Console.WriteLine ( XDocument.Parse ( root.OuterXml ) .ToString ( ) ) ; Console.ReadKey ( ) ; } } }"
public static void GenerateSpecialNumbers ( int noDigits ) { int prod = 1 ; for ( int i=0 ; i < noDigits ; i++ ) { prod = prod * 10 ; } int minValue = prod/10 ; int maxValue = prod - 1 ; for ( int i = minValue ; i < maxValue ; i++ ) { bool isValid = true ; int num = i ; int max = int.MaxValue ; while ( num > 0 ) { int digit = num % 10 ; if ( digit > = max ) { isValid = false ; break ; } max = digit ; num = num/10 ; } if ( isValid ) Console.WriteLine ( i ) ; } }
"string user = @ '' DOMAIN\USER '' ; string [ ] parts = user.Split ( new string [ ] { `` \\ '' } , StringSplitOptions.None ) ; string user = parts [ 1 ] + `` @ '' + parts [ 0 ] ; DOMAIN\USERDOMAIN\\USER ( with a double slash ) USER @ DOMAIN"
"class C { private String msg ; public void F ( C obj , String arg ) { obj.msg = arg ; // this is strange , the msg should n't be accessible here . } public void Output ( ) { Console.WriteLine ( msg ) ; } } C obj1 = new C ( ) ; C obj2 = new C ( ) ; obj1.F ( obj2 , `` from obj1 '' ) ; obj2.Output ( ) ; from obj1"
var searchResults = files.Where ( file = > File.ReadLines ( file.FullName ) .Any ( line = > line.Contains ( keyWord ) ) ) .Select ( file = > file.FullName ) ;
private MyType myProperty ; public MyType MyProperty { get { return myPropertyField ; } } public MyType MyProperty { get ; private set ; } private readonly MyType myProperty ; public MyType MyProperty { get { return myPropertyField ; } }
"CREATE TABLE ` mytable ` ( ` name ` varchar ( 100 ) CHARACTER SET utf8 NOT NULL , ` appid ` int ( 11 ) NOT NULL , -- A few other irrelevant fields PRIMARY KEY ( ` name ` , ` appid ` ) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ; [ DbConfigurationType ( typeof ( MySql.Data.Entity.MySqlEFConfiguration ) ) ] public class Database : DbContext { public DbSet < MyTable > MyTable { get ; set ; } public static Database Get ( ) { /* Not important */ } //etc . } [ Table ( `` mytable '' ) ] public class MyTable : IEquatable < MyTable > , IComparable , IComparable < MyTable > { [ Column ( `` name '' , Order = 0 ) , Key , Required , DatabaseGenerated ( DatabaseGeneratedOption.None ) ] public string Name { get { return _name ; } set { _name = value.Trim ( ) .ToLower ( ) ; } } private string _name ; [ Column ( `` appid '' , Order = 1 ) , Key , Required , DatabaseGenerated ( DatabaseGeneratedOption.None ) ] public int ApplicationId { get ; set ; } //Equals ( ) , GetHashCode ( ) , CompareTo ( ) , == ( ) etc . all auto-generated by Resharper to use both Name and ApplicationId . //Have unit-tests to verify they work correctly . } using ( Database db = Database.Get ( ) ) using ( DbContextTransaction transaction = db.Database.BeginTransaction ( IsolationLevel.ReadUncommitted ) ) { IEnumerable < MyTable > newEntries = GetNewEntries ( ) ; //Verify no existing entries already in the table ; not necessary to show since table is empty anyways db.MyTable.AddRange ( newEntries.Distinct ( ) ) ; }"
MyClass myClass = null ; var singleElement = myClass ? .ArrayOfStrings [ 0 ] ; var myClass2 = new MyClass { ArrayOfStrings = null } ; var singleElement2 = myClass2 ? .ArrayOfStrings [ 0 ] ; var myClass3 = new MyClass { ArrayOfStrings = null } ; var singleElement3 = myClass3 ? .ArrayOfStrings ? .GetValue ( 0 ) ;
"private Color _color = Color.White ; [ System.ComponentModel.Category ( `` VisibleInEditor '' ) ] [ System.ComponentModel.TypeConverter ( typeof ( System.ComponentModel.ExpandableObjectConverter ) ) ] public Color Color { get { return _color ; } set { _color = value ; } } public class ColorTypeConverter : ExpandableObjectConverter { public override bool CanConvertTo ( ITypeDescriptorContext context , System.Type destinationType ) { return destinationType == typeof ( Color ) ; } public override object ConvertTo ( ITypeDescriptorContext context , System.Globalization.CultureInfo culture , object value , System.Type destinationType ) { if ( destinationType == typeof ( string ) & & value is Color ) { Color color = ( Color ) value ; return string.Format ( `` { 0 } , { 1 } , { 2 } , { 3 } '' , color.R , color.G , color.B , color.A ) ; } else return base.ConvertTo ( context , culture , value , destinationType ) ; } public override bool CanConvertFrom ( ITypeDescriptorContext context , System.Type sourceType ) { return sourceType == typeof ( string ) ; } public override object ConvertFrom ( ITypeDescriptorContext context , System.Globalization.CultureInfo culture , object value ) { if ( value is string ) { try { string strVal = value as string ; var parts = strVal.Split ( ' , ' ) ; byte r = byte.Parse ( parts [ 0 ] ) ; byte g = byte.Parse ( parts [ 1 ] ) ; byte b = byte.Parse ( parts [ 2 ] ) ; byte a = byte.Parse ( parts [ 3 ] ) ; return new Color ( r , g , b , a ) ; } catch { throw new ArgumentException ( `` Can not convert ' '' + ( string ) value + `` 'to type Color '' ) ; } } else return base.ConvertFrom ( context , culture , value ) ; } public override object CreateInstance ( ITypeDescriptorContext context , System.Collections.IDictionary propertyValues ) { return new Color ( ( byte ) propertyValues [ `` R '' ] , ( byte ) propertyValues [ `` G '' ] , ( byte ) propertyValues [ `` B '' ] , ( byte ) propertyValues [ `` A '' ] ) ; } public override bool GetCreateInstanceSupported ( ITypeDescriptorContext context ) { return true ; } public override PropertyDescriptorCollection GetProperties ( ITypeDescriptorContext context , object value , Attribute [ ] attributes ) { PropertyDescriptorCollection properties = TypeDescriptor.GetProperties ( value , attributes ) ; string [ ] sortOrder = new string [ 4 ] ; sortOrder [ 0 ] = `` R '' ; sortOrder [ 1 ] = `` G '' ; sortOrder [ 2 ] = `` B '' ; sortOrder [ 3 ] = `` A '' ; // Return a sorted list of properties return properties.Sort ( sortOrder ) ; } public override bool GetPropertiesSupported ( ITypeDescriptorContext context ) { return true ; } }"
"public Foo ( Foo other ) { this.Bar = other.Bar ; this.Baz = other.Baz ; this.Lur = other.Lur ; this.Qux = other.Qux ; this.Xyzzy= other.Xyzzy ; } public Foo ( IFoo other ) { foreach ( var property in typeof ( IFoo ) .GetProperties ( ) ) { property.SetValue ( this , property.GetValue ( other , null ) , null ) ; } } public override string ToString ( ) { var toJoin = new List < string > ( ) ; foreach ( var property in tostringFields ) { object value = property.GetValue ( this , null ) ; if ( value ! = null ) toJoin.Add ( value.ToString ( ) ) ; } return string.Join ( `` `` , toJoin.ToArray ( ) ) ; } private static readonly PropertyInfo [ ] tostringFields = { typeof ( IFoo ) .GetProperty ( `` Bar '' ) , typeof ( IFoo ) .GetProperty ( `` Baz '' ) , typeof ( IFoo ) .GetProperty ( `` Lur '' ) , typeof ( IFoo ) .GetProperty ( `` Qux '' ) , typeof ( IFoo ) .GetProperty ( `` Xyzzy '' ) , } ;"
"//Danger , the following calls are not atomicITokenManager tokenActor = ActorProxy.Create < IMyActor > ( actorId , `` AppName '' ) ; //Something could happen here and leave my actor in an unknown stateawait tokenActor.InitializeAsync ( desiredInitialState ) ;"
"public class MultilingualPhrase : Entity { private IDictionary < CultureInfo , string > languageValues ; public virtual IDictionary < CultureInfo , string > LanguageValues { get { return languageValues ; } } } public void Override ( AutoMapping < MultilingualPhrase > mapping ) { mapping .HasMany ( n = > n.LanguageValues ) .Access.ReadOnlyPropertyThroughCamelCaseField ( ) .AsMap < string > ( `` CultureName '' ) .Element ( `` Phrase '' ) .Table ( `` MultilingualPhraseValues '' ) ; }"
"protected async Task RunIsolated < TServ1 , TServ2 > ( Action < TServ1 , TServ2 > action ) { await RunInScope ( action , typeof ( TServ1 ) , typeof ( TServ2 ) ) ; } protected async Task < TResult > RunIsolatedForResult < TService , TResult > ( Func < TService , TResult > func ) { return ( TResult ) await RunInScope ( func , typeof ( TService ) ) ; } private Task < object > RunInScope ( Delegate d , params object [ ] args ) { using ( var scope = _serviceProvider.CreateScope ( ) ) { object [ ] parameters = args.Cast < Type > ( ) .Select ( t = > scope.ServiceProvider.GetService ( t ) ) .ToArray ( ) ; return Task.FromResult ( d.DynamicInvoke ( parameters ) ) ; } } await RunIsolated < Service > ( serv = > serv.SaveAsync ( item ) .Wait ( ) ) ; await RunIsolated < Service > ( async serv = > await serv.SaveAsync ( item ) ) ;"
if ( x.ID > 0 & & ! x.IsCool ) if ( ! ( ( x.Id < = 0 ) || x. IsCool ) )
public class Cars : List < aCar > public class Cars { List < aCar > CarList = new List < aCar > ( ) ; }
"Mock < XmlWriter > mockXmlWriter = new Mock < System.Xml.XmlWriter > ( ) ; Language language = Language.GetLangauge ( langId ) ; language.WriteXml ( mockXmlWriter.Object ) ; mockXmlWriter.Verify ( writer = > writer.WriteAttributeString ( `` ID '' , language.LanguageID.ToString ( ) ) ) ;"
public string EventName ;
public class MyEntity { public int ThingId { get ; set ; } ; public string ThingName { get ; set ; } // Set from the service public int WooFactor { get ; set ; } } public class WooFactorGenerator { public int CalculateWooFactor ( MyEntity thing ) ; // Hits other services and repo 's to eventually determine the woo factor . } // Code to get a `` MyEntity '' : var myEntity = repo.GetById ( 1 ) ; var gen = new WooFactorGenerator ( ) ; myEntity.WooFactor = gen.CalculateWooFactor ( myEntity ) ;
"var p = new Person ( `` Tim '' ) ; p.LastName = `` Meier '' ; // reader.Get < bool > ( `` IsDerivat '' ) ; var IsOlivia = p.Get < bool > ( `` Olivia '' ) ; public static class PersonExtensions { public static T Get < T > ( this Person person , string name ) { return ( T ) person.NewFirstName ( name ) ; } } public class Person { public Person ( string firstName ) { this.FirstName = firstName ; } public string FirstName { get ; private set ; } public string LastName { get ; set ; } public object NewFirstName ( string name ) { this.FirstName = name ; return ( object ) this.FirstName ; } }"
public MasterActor : ReceiveActor { public MasterActor ( ) { Initialize ( ) ; } public void Initiaize ( ) { Receive < DoSomeWork > ( _ = > { var actor1 = Context.ActorOf ( Props.Create ( ( ) = > new Actor1 ( ) ) ; var actor2 = Context.ActorOf ( Props.Create ( ( ) = > new Actor2 ( ) ) ; // pretend these actors send responses to their senders // for sake of example each of these methods take between 1 and 3 seconds actor1.Tell ( new GetActor1Data ( ) ) ; actor2.Tell ( new GetActor2Data ( ) ) ; } ) ; Receive < Actor1Response > ( m = > { //actor 1 has finished it 's work } ) ; Receive < Actor2Response > ( m = > { //actor 2 has finished it 's work } ) ; } }
"< xPlugins > < xPlugin > < Multiple > < Add > < Operator > < value > 1 < /value > < /Operator > < Operator > < value > 2 < /value > < /Operator > < /Add > < Add > < Operator > < value > 3 < /value > < /Operator > < Operator > < value > 4 < /value > < /Operator > < /Add > < /Multiple > < /xPlugin > < /xPlugins > //root elementpublic class xPlugins { [ XmlElement ( `` xPlugin '' , typeof ( xPlugin ) ) ] public xPlugin [ ] Plugin { get ; set ; } } public class xPlugin { [ XmlElement ( `` Multiple '' , typeof ( Multiple ) ) ] [ XmlElement ( `` Add '' , typeof ( Add ) ) ] [ XmlElement ( `` Subtract '' , typeof ( Divide ) ) ] [ XmlElement ( `` Divide '' , typeof ( Divide ) ) ] [ XmlElement ( `` Operator '' , typeof ( Operand ) ) ] public Calculator calculator { get ; set ; } } //Deseirialize ultilitystatic class readXML { public static void getObject ( ref xPlugins plugins ) { try { List < Type > type = new List < Type > ( ) ; type.Add ( typeof ( Add ) ) ; type.Add ( typeof ( Minus ) ) ; type.Add ( typeof ( Multiple ) ) ; type.Add ( typeof ( Subtract ) ) ; type.Add ( typeof ( Operator ) ) ; XmlSerializer xml = new XmlSerializer ( typeof ( xPlugin ) , type.ToArray ( ) ) ; FileStream fs = new FileStream ( `` test.xml '' , FileMode.Open ) ; plugins = ( xPlugins ) xml.Deserialize ( fs ) ; } catch ( Exception ex ) { throw ; } } } public abstract class Calculator { [ XmlElement ( `` Multiple '' , typeof ( Multiple ) ) ] [ XmlElement ( `` Add '' , typeof ( Add ) ) ] [ XmlElement ( `` Subtract '' , typeof ( Subtract ) ) ] [ XmlElement ( `` Divide '' , typeof ( Divide ) ) ] [ XmlElement ( `` Operator '' , typeof ( Operand ) ) ] public List < Calculator > calculators { get ; set ; } public virtual int Calculate ( ) { return 0 ; } } public class Operator : Calculator { public int value { get ; set ; } public Operator ( ) { } public override int Calculate ( ) { return value ; } } public class Add : Calculator { public Add ( ) { } public override int Calculate ( ) { List < int > value = new List < int > ( ) ; foreach ( Calculator calculator in calculators ) { value.Add ( calculator.Calculate ( ) ) ; } return value.Sum ( ) ; } } public class Minus : Calculator { public Minus ( ) { } public override int Calculate ( ) { int value = calculators [ 0 ] .Calculate ( ) ; for ( int i = 1 ; i < calculators.Count ; i++ ) { value -= calculators [ i ] .Calculate ( ) ; } return value ; } } public class Divide : Calculator { public Divide ( ) { } public override int Calculate ( ) { int value = calculators [ 0 ] .Calculate ( ) ; for ( int i = 1 ; i < calculators.Count ; i++ ) { value /= calculators [ i ] .Calculate ( ) ; } return value ; } } public class Multiple : Calculator { public Multiple ( ) { } public override int Calculate ( ) { int value = calculators [ 0 ] .Calculate ( ) ; for ( int i = 1 ; i < calculators.Count ; i++ ) { value *= calculators [ i ] .Calculate ( ) ; } return value ; } } //running testprivate void button1_Click ( object sender , EventArgs e ) { readXML.getObject ( ref this.plugins ) ; foreach ( Calculator plugin in plugins.calculators ) { plugin.Calculate ( ) ; } } [ XmlElement ( `` Multiple '' , typeof ( Multiple ) ) ] [ XmlElement ( `` Add '' , typeof ( Add ) ) ] [ XmlElement ( `` Subtract '' , typeof ( Divide ) ) ] [ XmlElement ( `` Divide '' , typeof ( Divide ) ) ] [ XmlElement ( `` Operator '' , typeof ( Operand ) ) ]"
"[ OutputCache ( VaryByCustom = `` User '' , Duration = 3600 ) ] [ ChildActionOnly ] public ActionResult Notifications ( ) { return PartialView ( `` Partials/Notifications '' ) ; } Response.RemoveOutputCacheItem ( `` /Controller/Notifications '' ) ;"
class Acquisition { public Int32 IntegrationTime { get ; set ; } public Double Battery { get ; set ; } public Double Signal { get ; set ; } } interface IAnalogOutputter { double getVoltage ( Acquisition acq ) ; } class BatteryAnalogOutputter : IAnalogOutputter { double getVoltage ( Acquisition acq ) { return acq.Battery ; } }
"private static void RegisterSolrOperations ( SolrCore core , IUnityContainer container , bool isNamed = true ) { var ISolrReadOnlyOperations = typeof ( ISolrReadOnlyOperations < > ) .MakeGenericType ( core.DocumentType ) ; var ISolrBasicOperations = typeof ( ISolrBasicOperations < > ) .MakeGenericType ( core.DocumentType ) ; var ISolrOperations = typeof ( ISolrOperations < > ) .MakeGenericType ( core.DocumentType ) ; var SolrServer = typeof ( SolrServer < > ) .MakeGenericType ( core.DocumentType ) ; var registrationId = isNamed ? core.Id : null ; var injectionConstructor = new InjectionConstructor ( new ResolvedParameter ( ISolrBasicOperations , registrationId ) , new ResolvedParameter ( typeof ( IReadOnlyMappingManager ) ) , new ResolvedParameter ( typeof ( IMappingValidator ) ) ) ; container.RegisterType ( ISolrOperations , SolrServer , registrationId , injectionConstructor ) ; container.RegisterType ( ISolrReadOnlyOperations , SolrServer , registrationId , injectionConstructor ) ; } private static void RegisterSolrOperations ( SolrCore core , Container container , bool isNamed = true ) { var ISolrReadOnlyOperations = typeof ( ISolrReadOnlyOperations < > ) .MakeGenericType ( core.DocumentType ) ; var ISolrBasicOperations = typeof ( ISolrBasicOperations < > ) .MakeGenericType ( core.DocumentType ) ; var ISolrOperations = typeof ( ISolrOperations < > ) .MakeGenericType ( core.DocumentType ) ; var SolrServer = typeof ( SolrServer < > ) .MakeGenericType ( core.DocumentType ) ; var registrationId = isNamed ? core.Id : null ; var injectionConstructor = new InjectionConstructor ( new ResolvedParameter ( ISolrBasicOperations , registrationId ) , new ResolvedParameter ( typeof ( IReadOnlyMappingManager ) ) , new ResolvedParameter ( typeof ( IMappingValidator ) ) ) ; container.Register ( ISolrOperations , SolrServer , registrationId , injectionConstructor ) ; container.Register ( ISolrReadOnlyOperations , SolrServer , registrationId , injectionConstructor ) ; } container.RegisterSingle < IReadOnlyMappingManager > ( new MemoizingMappingManager ( new AttributesMappingManager ( ) ) ) ; container.Register < ISolrDocumentPropertyVisitor , DefaultDocumentVisitor > ( ) ; container.Register < ISolrFieldParser , DefaultFieldParser > ( ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrDocumentActivator < > ) , typeof ( SolrDocumentActivator < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrDocumentResponseParser < > ) , typeof ( SolrDocumentResponseParser < > ) ) ; container.Register < ISolrFieldSerializer , DefaultFieldSerializer > ( ) ; container.Register < ISolrQuerySerializer , DefaultQuerySerializer > ( ) ; container.Register < ISolrFacetQuerySerializer , DefaultFacetQuerySerializer > ( ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrAbstractResponseParser < > ) , typeof ( DefaultResponseParser < > ) ) ; container.Register < ISolrHeaderResponseParser , HeaderResponseParser < string > > ( ) ; container.Register < ISolrExtractResponseParser , ExtractResponseParser > ( ) ; container.RegisterAll < IValidationRule > ( new [ ] { typeof ( MappedPropertiesIsInSolrSchemaRule ) , typeof ( RequiredFieldsAreMappedRule ) , typeof ( UniqueKeyMatchesMappingRule ) } ) ; container.Register < ISolrConnection > ( ( ) = > new SolrConnection ( url ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrMoreLikeThisHandlerQueryResultsParser < > ) , typeof ( SolrMoreLikeThisHandlerQueryResultsParser < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrQueryExecuter < > ) , typeof ( SolrQueryExecuter < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrDocumentSerializer < > ) , typeof ( SolrDocumentSerializer < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrBasicOperations < > ) , typeof ( SolrBasicServer < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrBasicReadOnlyOperations < > ) , typeof ( SolrBasicServer < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrOperations < > ) , typeof ( SolrServer < > ) ) ; container.RegisterAllOpenGeneric ( typeof ( ISolrReadOnlyOperations < > ) , typeof ( SolrServer < > ) ) ; container.Register < ISolrSchemaParser , SolrSchemaParser > ( ) ; container.Register < ISolrDIHStatusParser , SolrDIHStatusParser > ( ) ; container.Register < IMappingValidator , MappingValidator > ( ) ;"
"public class Processor { private IWorker worker ; public Processor ( IWorker worker ) { this.worker = worker ; } public List < string > DoStuff ( ) { var list = new List < string > ( ) ; for ( int i = 0 ; i < 10 ; i++ ) { list.Add ( worker.GetString ( ) ) ; } return list ; } public List < string > DoStuffInParallel ( ) { var list = new System.Collections.Concurrent.ConcurrentBag < string > ( ) ; Parallel.For ( 0 , 10 , i = > { //is there any trivial way to avoid this ? ? list.Add ( new Worker ( ) .GetString ( ) ) ; } ) ; return list.ToList ( ) ; } } public class Worker : IWorker { public string GetString ( ) { //pretend this relies on some instance variable , so it not threadsafe return `` a string '' ; } }"
"mock.ExpectAndReturn ( `` Equals '' , true , ANY_ARGUMENT ) ;"
var x = ( 2.85 * .1 ) ; alert ( x ) ; var x = 0.2850000000003 ; x = parseFloat ( x.toFixed ( 3 ) ) x = x.toFixed ( 2 ) alert ( x ) ;
class Generic < T > where T : Enum { } class Generic < T > { static Generic ( ) { if ( typeof ( T ) .BaseType ! = typeof ( Enum ) ) throw new Exception ( `` Invalid Generic Argument '' ) ; } }
"public bool OnCollision ( Body body1 , Body body2 ) { if ( body2.Tag is Dog ) ( ( Dog ) body2.Tag ) .Bark ( ) ; }"
"< Setter Property= '' Template '' > < Setter.Value > -- Added my button here . < /Setter.Value > < /Setter > Button b = ( Button ) mycontrol.Template.FindName ( `` PARTName '' , mycontrol ) //Add Events on my button public override void OnApplyTemplate ( ) { base.OnApplyTemplate ( ) ; UIElement editingelement = GetTemplateChild ( `` PART_EditingElement '' ) ; if ( editingelement ! = null ) { // do something } }"
IEnumerable < Car > redCars = GetRedCars ( ) ; IEnumerable < Car > greenCars = GetGreenCars ( ) ; IEnumerable < Car > blueCars = GetBlueCars ( ) ; foreach ( Car c in ( redCars + greenCars + blueCars ) ) { c.DoSomething ( ) ; } ... ... List < Car > allCars = new List ( ) ; allCars.AddRange ( redCars ) ; allCars.AddRange ( greenCars ) ; allCars.AddRange ( blueCars ) ; foreach ( car in allCars ) { ... } ...
"at System.Collections.Generic.List ` 1.Contains ( T item ) List < int > urlPortals ; var cc = new CacheController ( ) ; cc.GetFriendlyUrlIndexFromCache ( out urlPortals ) ; var boolean = urlPortals.Contains ( portalId ) ; // This is where the exception happens . void GetFriendlyUrlIndexFromCache ( out List < int > urlPortals ) { urlPortals = null ; object rawPortals = DataCache.GetCache ( UrlPortalsKey ) ; if ( rawPortals ! = null ) { urlPortals = ( List < int > ) rawPortals ; } } object GetCache ( string CacheKey ) { return Cache [ cacheKey ] ; } InnerMessage : Index was outside the bounds of the array.InnerStackTrace : at System.Collections.Generic.List ` 1.Contains ( T item ) at DotNetNuke.Entities.Urls.CustomUrlDictController.FetchCustomUrlDictionary ( Int32 portalId , Boolean forceRebuild , Boolean bypassCache , FriendlyUrlSettings settings , SharedDictionary ` 2 & customAliasForTabs , Guid parentTraceId ) at DotNetNuke.Entities.Urls.TabPathHelper.GetTabPath ( TabInfo tab , FriendlyUrlSettings settings , FriendlyUrlOptions options , Boolean ignoreCustomRedirects , Boolean homePageSiteRoot , Boolean isHomeTab , String cultureCode , Boolean isDefaultCultureCode , Boolean hasPath , Boolean & dropLangParms , String & customHttpAlias , Boolean & isCustomPath , Guid parentTraceId ) at DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.ImproveFriendlyUrlWithMessages ( TabInfo tab , String friendlyPath , String pageName , PortalSettings portalSettings , Boolean ignoreCustomRedirects , FriendlyUrlSettings settings , List ` 1 & messages , Boolean cultureSpecificAlias , Guid parentTraceId ) at DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.ImproveFriendlyUrl ( TabInfo tab , String friendlyPath , String pageName , PortalSettings portalSettings , Boolean ignoreCustomRedirects , Boolean cultureSpecificAlias , FriendlyUrlSettings settings , Guid parentTraceId ) at DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.FriendlyUrlInternal ( TabInfo tab , String path , String pageName , String portalAlias , PortalSettings portalSettings ) at DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.FriendlyUrl ( TabInfo tab , String path , String pageName , PortalSettings portalSettings ) at DotNetNuke.Services.Url.FriendlyUrl.DNNFriendlyUrlProvider.FriendlyUrl ( TabInfo tab , String path , String pageName , PortalSettings settings ) at DotNetNuke.Common.Globals.NavigateURL ( Int32 tabID , Boolean isSuperTab , PortalSettings settings , String controlKey , String language , String pageName , String [ ] additionalParameters ) at DotNetNuke.Common.Globals.NavigateURL ( Int32 tabID , String controlKey , String [ ] additionalParameters ) at Ventrian.SimpleGallery.RandomPhoto.GetAlbumUrl ( String albumID ) at Ventrian.SimpleGallery.RandomPhoto.BindPhoto ( PlaceHolder phPhoto , PhotoInfo objPhoto ) at Ventrian.SimpleGallery.RandomPhoto.dlGallery_OnItemDataBound ( Object sender , DataListItemEventArgs e ) at System.Web.UI.WebControls.DataList.OnItemDataBound ( DataListItemEventArgs e ) at System.Web.UI.WebControls.DataList.CreateItem ( Int32 itemIndex , ListItemType itemType , Boolean dataBind , Object dataItem ) at System.Web.UI.WebControls.DataList.CreateControlHierarchy ( Boolean useDataSource ) at System.Web.UI.WebControls.BaseDataList.OnDataBinding ( EventArgs e ) at System.Web.UI.WebControls.BaseDataList.DataBind ( ) at Ventrian.SimpleGallery.RandomPhoto.Page_Load ( Object sender , EventArgs e )"
"public class Coin { } public class Coin50 : Coin { } public class Coin25 : Coin { } CoinMachine.Push ( new Coin25 ( ) ) ; // puts 25cent in 25c stackCoinMachine.Push ( new Coin50 ( ) ) ; // puts 50cent in 50c stackCoinMachine.Pop ( ) ; // gets 50cent from 50c stackCoinMachine.Pop ( ) ; // gets 25cent from 25c stack namespace ConsoleApplication1 { /* Given condition */ class Program { static void Main ( string [ ] args ) { CoinMachine.Push ( new Coin25 ( ) ) ; CoinMachine.Push ( new Coin50 ( ) ) ; CoinMachine.Pop < Coin50 > ( ) ; CoinMachine.Pop < Coin25 > ( ) ; } } public class Coin { } public class Coin50 : Coin { } public class Coin25 : Coin { } /* End given condition */ public interface ICoinStack { T Pop < T > ( ) ; void Push < T > ( T item ) ; } /* The problem within this abstract class */ public abstract class CoinStack < T > : ICoinStack { private Queue < T > _stack = new Queue < T > ( ) ; public T Pop < T > ( ) { return _stack.Dequeue ( ) ; } public void Push < T > ( T item ) { _stack.Enqueue ( item ) ; } } public class CoinStack50 : CoinStack < Coin50 > { } public class CoinStack25 : CoinStack < Coin25 > { } public class CoinMachine { private static Dictionary < Type , ICoinStack > map ; static CoinMachine ( ) { map = new Dictionary < Type , ICoinStack > ( ) { { typeof ( Coin50 ) , new CoinStack50 ( ) } , { typeof ( Coin25 ) , new CoinStack25 ( ) } } ; } public static T Pop < T > ( ) { var type = typeof ( T ) ; return map [ type ] .Pop < T > ( ) ; } public static void Push < T > ( T item ) { var type = typeof ( T ) ; map [ type ] .Push ( item ) ; } } }"
"< add assembly= '' System.Net.Http , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=b03f5f7f11d50a3a '' / > < runtime > < assemblyBinding > < dependentAssembly > < assemblyIdentity name= '' System.Net.Http '' publicKeyToken= '' b03f5f7f11d50a3a '' culture= '' neutral '' / > < codeBase version= '' 1.0.0.0 '' href= '' /bin/System.Net.Http.dll '' / > < /dependentAssembly > < /assemblyBinding >"
System.Memory ( 4.5.3 ) System.Buffers ( 4.4.0 ) System.Numerics.Vectors ( 4.4.0 ) System.Runtime.CompilerServices.Unsafe ( 4.5.2 ) System.Memory ( 4.5.3 ) System.Buffers ( 4.5.0 ) System.Numerics.Vectors ( 4.5.0 ) System.Runtime.CompilerServices.Unsafe ( 4.7.0 ) < config > < add key= '' DependencyVersion '' value= '' Highest '' / > < /config >
"string [ ] names = { `` Joe '' , `` Roger '' , `` John '' } ; Console.WriteLine ( `` the names are { 0 } '' , String.Join ( `` , `` , names ) ) ; //okdecimal [ ] prices = { 39.99M , 29.99m , 29.99m , 19.99m , 49.99m } ; Console.WriteLine ( `` the prices are { 0 } '' , String.Join ( `` , `` , prices ) ) ; //bad overload"
dynamic myDynamicObject = new MyDynamicObject ( `` 1 '' ) ; int sum = 1 + myDynamicObject ; // instead of int i = 1 + ( int ) myDynamicObject ;
public class PushObservable < T > : IObservable < T > { private IList < IObserver < T > > _listeners = new List < IObserver < T > > ( ) ; public void Send ( T value ) { foreach ( var listener in _listeners ) listener.OnNext ( value ) ; } public IDisposable Subscribe ( IObserver < T > observer ) { _listeners.Add ( observer ) ; } }
"[ AllowAnonymous ] [ Route ( `` Register '' ) ] public async Task < IHttpActionResult > Register ( RegisterBindingModel model ) { if ( ! ModelState.IsValid ) { return BadRequest ( ModelState ) ; } try { var email = model.Email ; var password = model.Password ; var user = new users ( ) { Email = email , PasswordHash = password , Password = password } ; IdentityResult result = await UserManager.CreateAsync ( user , model.Password ) ; if ( ! result.Succeeded ) { return GetErrorResult ( result ) ; } return Ok ( ) ; } catch ( Exception ex ) { throw ; } } public ApplicationUserManager UserManager { get { return _userManager ? ? Request.GetOwinContext ( ) .GetUserManager < ApplicationUserManager > ( ) ; } private set { _userManager = value ; } } public class ApplicationUserManager : UserManager < users > { public ApplicationUserManager ( IUserStore < users > store ) : base ( store ) { } public static ApplicationUserManager Create ( IdentityFactoryOptions < ApplicationUserManager > options , IOwinContext context ) { var manager = new ApplicationUserManager ( new UserStore < users > ( context.Get < DaumAuctionEntities > ( ) ) ) ; var dataProtectionProvider = options.DataProtectionProvider ; // Configure validation logic for passwords manager.PasswordValidator = new PasswordValidator { RequiredLength = 6 , RequireNonLetterOrDigit = false , RequireDigit = false , RequireLowercase = true , RequireUppercase = true , } ; if ( dataProtectionProvider ! = null ) { manager.UserTokenProvider = new DataProtectorTokenProvider < users > ( dataProtectionProvider.Create ( `` ASP.NET Identity '' ) ) ; } return manager ; } } modelState : { undefined : [ `` Name can not be null or empty . '' ] } public partial class DaumAuctionEntities : IdentityDbContext < users > { public DaumAuctionEntities ( ) : base ( `` name=DaumAuctionEntities '' ) { } public DbSet < addresses > addresses { get ; set ; } public DbSet < auctions > auctions { get ; set ; } public DbSet < images > images { get ; set ; } public DbSet < users > users { get ; set ; } } public partial class users : IdentityUser { public override string UserName { get { return Email ; } set { Email = value ; } } override public string PasswordHash { get { return Password ; } set { Password = value ; } } public async Task < ClaimsIdentity > GenerateUserIdentityAsync ( UserManager < users > manager , string authenticationType ) { // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType var userIdentity = await manager.CreateIdentityAsync ( this , authenticationType ) ; // Add custom user claims here return userIdentity ; } } public partial class users { public int Id { get ; set ; } public string FirstName { get ; set ; } public string LastName { get ; set ; } public System.DateTime CreatedDate { get ; set ; } public Nullable < System.DateTime > ModifiedDate { get ; set ; } } `` The specified type member 'UserName ' is not supported in LINQ to Entities . Only initializers , entity members , and entity navigation properties are supported . ''"
"s = [ 1 , 2 , 3 ] # = > [ 1 , 2 , 3 ] t = [ 4 , 5 , 6 , [ 7 , 8 ] ] # = > [ 4 , 5 , 6 , [ 7 , 8 ] ] a = [ s , t , 9 , 10 ] # = > [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 , [ 7 , 8 ] ] , 9 , 10 ] a.flatten # = > [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10"
"Thread t = new Thread ( .. ) ; t.sleep ( .. ) ; //Probably does n't do what the programmer intended . // Nasty surprises ahead - wo n't throw ; does something unintended : // Creates a HttpWebRequest instead.var ftpRequest = FtpWebRequest.Create ( @ '' http : //www.stackoverflow.com '' ) ; // Something seriously wrong here.var areRefEqual = Dictionary < string , int > .ReferenceEquals ( dict1 , dict2 ) ;"
"[ ProtoContract ] public class MyObject { public MyObject ( ) { } [ ProtoMember ( 1 ) ] public int Id { get ; set ; } [ ProtoMember ( 2 ) ] public IEnumerable < MyObject > myObjects { get ; set ; } } [ ServiceContract ] public interface ITouchService { [ OperationContract , ProtoBehavior ] MyObject Execute ( ) ; [ OperationContract , ProtoBehavior ] IEnumerable < MyObject > ExecuteENUM ( ) ; } [ ServiceContract ] public interface ITouchService { [ OperationContract ] MyObject Execute ( ) ; [ OperationContract ] IEnumerable < MyObject > ExecuteENUM ( ) ; } public class TouchService : ITouchService { public MyObject Execute ( ) { var myObject = new MyObject ( ) { Id = 9001 } ; var myList = new List < MyObject > ( ) ; for ( int i = 0 ; i < 10 ; i++ ) { myList.Add ( new MyObject ( ) { Id = i } ) ; } // Will serialize myObject.myObjects = myList ; return myObject ; } public IEnumerable < MyObject > ExecuteENUM ( ) { var myEnum = new List < MyObject > ( ) ; for ( int i = 0 ; i < 10 ; i++ ) { myEnum.Add ( new MyObject ( ) { Id = i } ) ; } return myEnum ; } }"
"var SortedList = from lists in List orderby lists.List.Min ( Min= > Min.value ) ascending select list ; var x = new List < int > { 5 , 10 , 4 , 3 , 0 } ; var y = new List < int > { 4 , -1 , -5 , 3 , 2 } ; var z = new List < int > { 3 , 1 , 0 , -2 , 2 } ; var ListofLists = new List < List < int > > { x , y , z } ;"
Int32 - > intString - > string Nullable < Int32 > - > int ? List < au.net.ExampleObject > - > List < ExampleObject >
void Main ( ) { One ( i = > PrintInteger ( i ) ) ; One ( PrintInteger ) ; Two ( i = > PrintInteger ( i ) ) ; // Two ( PrintInteger ) ; - wo n't compile } static void One ( Action < int > a ) { a ( 1 ) ; } static void Two ( Expression < Action < int > > e ) { e.Compile ( ) ( 2 ) ; } static void PrintInteger ( int i ) { Console.WriteLine ( i ) ; }
"@ Scripts.RenderFormat ( `` < script async type=\ '' text/javascript\ '' src=\ '' { 0 } \ '' > < /script > '' , `` ~/bundles/raphael '' ) ... $ ( `` .datapicker '' ) .datapicker ( ) ; ... ... @ Scripts.RenderFormat ( `` < script async type=\ '' text/javascript\ '' src=\ '' { 0 } \ '' > < /script > '' , `` ~/bundles/frontall '' ) ... @ RenderSection ( `` scripts '' , required : false ) function async ( u , c ) { var d = document , t = 'script ' , o = d.createElement ( t ) , s = d.getElementsByTagName ( t ) [ 0 ] ; o.src = u ; if ( c ) { o.addEventListener ( 'load ' , function ( e ) { c ( null , e ) ; } , false ) ; } s.parentNode.appendChild ( o , s ) ; } async ( `` /bundles/jquery '' , function ( ) { //here , load scripts from inner pages . Index , Detail ... } ) ;"
"public static bool CancelableWaitAll ( WaitHandle [ ] waitHandles , WaitHandle cancelWaitHandle ) { var waitHandleList = new List < WaitHandle > ( ) ; waitHandleList.Add ( cancelWaitHandle ) ; waitHandleList.AddRange ( waitHandles ) ; int handleIdx ; do { handleIdx = WaitHandle.WaitAny ( waitHandleList.ToArray ( ) ) ; waitHandleList.RemoveAt ( handleIdx ) ; } while ( waitHandleList.Count > 1 & & handleIdx ! = 0 ) ; return handleIdx ! = 0 ; }"
"public class Customer { public int CustomerId { get ; set ; } //other properties without any logic code . } public class Customer { private int customerId ; public int CustomerId { get { return customerId ; } set { customerId=value ; // some logic codes go here . } } //other properties go here . } namespace MvcApplication1.Models { public class Choice { public int ChoiceId { get ; set ; } public string Description { get ; set ; } public bool IsCorrect { get ; set ; } public QuizItem QuizItem { get ; set ; } } } namespace MvcApplication1.Models { public class QuizItem { public int QuizItemId { get ; set ; } public string Question { get ; set ; } private IEnumerable < Choice > choices ; public IEnumerable < Choice > Choices { get { return choices ; } set { choices = value ; foreach ( var x in choices ) x.QuizItem = this ; } } } } namespace MvcApplication1.Controllers { public class HomeController : Controller { public ActionResult Index ( ) { var data = new List < QuizItem > { new QuizItem { QuizItemId = 1 , Question = `` What color is your hair ? `` , Choices = new Choice [ ] { new Choice { ChoiceId=1 , Description= '' Black . `` , IsCorrect=true } , new Choice { ChoiceId=2 , Description= '' Red . `` , IsCorrect=false } , new Choice { ChoiceId=3 , Description= '' Yellow . `` , IsCorrect=false } } } , new QuizItem { QuizItemId = 2 , Question = `` What color is your noze ? `` , Choices = new Choice [ ] { new Choice { ChoiceId=1 , Description= '' Pink . `` , IsCorrect=false } , new Choice { ChoiceId=2 , Description= '' Maroon . `` , IsCorrect=true } , new Choice { ChoiceId=3 , Description= '' Navy Blue . `` , IsCorrect=false } } } } ; return View ( data ) ; } } }"
"catch ( Exception ex ) { SporeLog.Log ( `` Failed to create new SavedDocumentList with Name : `` + name , ex ) ; throw ; }"
public ActionResult Edit ( int id = 0 ) { Entity entity = db.Entities.Find ( id ) ; if ( entity == null ) { return HttpNotFound ( ) ; } return View ( entity ) ; } var entity = GetEntityById ( id ) ; if ( entity == null ) return HttpNotFound ( ) ; [ EntityLookup ( id = > db.Entities.Find ( id ) ) ] public ActionResult Edit ( Entity entity ) { return View ( entity ) ; }
"var certificate = new X509Certificate2 ( KeyFilePath , `` notasecret '' , X509KeyStorageFlags.Exportable ) ; ServiceAccountCredential credential = new ServiceAccountCredential ( new ServiceAccountCredential.Initializer ( serviceAccountEmail ) { Scopes = new string [ ] { AnalyticsService.Scope.Analytics } ; } .FromCertificate ( certificate ) ) ; // Create the service.AnalyticsService service = new AnalyticsService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` Analytics API Sample '' , } ) ;"
"SoundEffectInstance alarmSound = PlaySound ( @ '' Alarms/ '' +alarmSoundString ) ; VibrateController vibrate = VibrateController.Default ; vibrate.Start ( new TimeSpan ( 0,0,0,0,1000 ) ) ; MessageBoxResult alarmBox = MessageBox.Show ( `` Press OK to stop alarm '' , `` Timer Finished '' , MessageBoxButton.OK ) ; if ( alarmBox == MessageBoxResult.OK ) { alarmSound.Stop ( ) ; vibrate.Stop ( ) ; }"
"public static byte [ ] SerializeObject ( object toBeSerialized ) { var stream = new MemoryStream ( ) ; var serializer = new BinaryFormatter ( ) ; serializer.Serialize ( stream , toBeSerialized ) ; stream.Position = 0 ; return stream.ToArray ( ) ; } public static T DeserializeObject < T > ( byte [ ] toBeDeserialized ) { using ( var input = new MemoryStream ( toBeDeserialized ) ) { var formatter = new BinaryFormatter ( ) ; input.Seek ( 0 , SeekOrigin.Begin ) ; return ( T ) formatter.Deserialize ( input ) ; } }"
CheckFunc ( 16000 ) ; CheckFunc ( 1000 ) ; private void CheckFunc ( Int32 i ) { if ( i == 0 ) MessageBox.Show ( `` good '' ) ; else CheckFunc ( i - 1 ) ; }
var monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames ;
public class BuildingsBase { private int _hp ; public int hp { get { return _hp ; } set { _hp= value ; } } private int _woodRequired ; public int woodRequired { get { return _woodRequired ; } set { _woodRequired = value ; } } } public class TownHall : BuildingsBase { public int foodHeld ; public TownHall ( ) { foodHeld = 100 ; woodRequired = 500 ; } } if ( Globals.buildingDefaults [ BuildingType.Townhall ] .woodRequired < Globals.currentWood ) { Townhall newTH = new Townhall ( ) ; }
"< div style= '' padding-bottom : 5px ; margin-top:1 % ; width:18 % ; float : left ; text-align : right ; '' > < asp : Button ID= '' ZoomIn '' Text= '' + '' runat= '' server '' / > < asp : Button ID= '' ZoomOut '' Text= '' - '' runat= '' server '' / > < /div > < div id= '' Container '' style= '' float : left ; width:100 % ; text-align : center ; padding-bottom : 5px ; '' > < iframe class= '' Zoomer '' id= '' iFmManl '' runat= '' server '' src= '' ~\sample.pdf '' width= '' 100 % '' height= '' 900px '' style= '' border : 0px inset black ; margin-left : 0px ; '' title= '' Domain Dictionary '' > < /iframe > < /div > < /div > protected void Page_Load ( object sender , EventArgs e ) { iFmManl.Attributes [ `` src '' ] = FileName + `` # toolbar=0 & navpanes=0 & view=Fit '' ; }"
"public class AlienMonster : IWalk , IRun , ISwim , IGrowl { IWalkStrategy _walkStrategy ; IRunStrategy _runStrategy ; ISwimStrategy _swimStrategy ; IGrowlStrategy _growlStrategy ; public Monster ( ) { _walkStrategy = new FourFootWalkStrategy ( ) ; ... etc } public void Walk ( ) { _walkStrategy.Walk ( ) ; } ... etc } interface IWalk { void Walk ( ) ; } interface IWalk { IWalkStrategy WalkStrategy { get ; set ; } //or something that ressembles this }"
"var ldUserEndTime = new DateTime ( dateNow.Year , dateNow.Month , dateNow.Day + 1 , 00 , 45 , 00 ) ;"
[ StructLayout ( LayoutKind.Explicit ) ] public struct Chapter4Time { [ FieldOffset ( 0 ) ] public UInt16 Unused ; [ FieldOffset ( 2 ) ] public UInt16 TimeHigh ; [ FieldOffset ( 4 ) ] public UInt16 TimeLow ; [ FieldOffset ( 6 ) ] public UInt16 MicroSeconds ; } [ StructLayout ( LayoutKind.Explicit ) ] public struct IEEE_1588Time { [ FieldOffset ( 0 ) ] public UInt32 NanoSeconds ; [ FieldOffset ( 4 ) ] public UInt32 Seconds ; }
"UpdateSession uSession = new UpdateSession ( ) ; IUpdateSearcher uSearcher = uSession.CreateUpdateSearcher ( ) ; uSearcher.Online = false ; try { ISearchResult sResult = uSearcher.Search ( `` IsInstalled=1 And IsHidden=0 '' ) ; Console.WriteLine ( `` Found `` + sResult.Updates.Count + `` updates '' ) ; foreach ( IUpdate update in sResult.Updates ) { Console.WriteLine ( update.Title ) ; if ( update.Title.ToLower ( ) .Contains ( `` kb123456 '' ) ) { //Update is not required ReportInstalled ( ) ; return ; } } //If we get here , the update is not installed InstallUpdate ( ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Something went wrong : `` + ex.Message ) ; }"
"public class Basket : BaseEntity , IAggregateRoot { public int Id { get ; set ; } public string BuyerId { get ; private set ; } private readonly List < BasketItem > items = new List < BasketItem > ( ) ; public IReadOnlyCollection < BasketItem > Items { get { return items.AsReadOnly ( ) ; } } } public class BasketItem : BaseEntity { public int Id { get ; set ; } public decimal UnitPrice { get ; private set ; } public int Quantity { get ; private set ; } public string CatalogItemId { get ; private set ; } } public class Order : BaseEntity , IAggregateRoot { public int Id { get ; set ; } public string BuyerId { get ; private set ; } public readonly List < OrderItem > orderItems = new List < OrderItem > ( ) ; public IReadOnlyCollection < OrderItem > OrderItems { get { return orderItems.AsReadOnly ( ) ; } } public DateTimeOffset OrderDate { get ; private set ; } = DateTimeOffset.Now ; public Address DeliverToAddress { get ; private set ; } public string Notes { get ; private set ; } } public class OrderItem : BaseEntity { public int Id { get ; set ; } public CatalogItemOrdered ItemOrdered { get ; private set ; } public decimal Price { get ; private set ; } public int Quantity { get ; private set ; } } public class CatalogItemOrdered { public int CatalogItemId { get ; private set ; } public string CatalogItemName { get ; private set ; } public string PictureUri { get ; private set ; } } public class Address { public string Street { get ; private set ; } public string City { get ; private set ; } public string State { get ; private set ; } public string Country { get ; private set ; } public string ZipCode { get ; private set ; } }"
"void Method ( int i , int j = 1 , Rectangle rect = new Rectangle ( 1,1,1,1 ) ) { } //error"
"var subset = from item in document.Descendants ( `` Id '' ) where item.Value == itemId.ToString ( ) select new PurchaseItem ( ) { Id = int.Parse ( item.Parent.Element ( `` Id '' ) .Value ) , Name = item.Parent.Element ( `` Name '' ) .Value , Description = item.Parent.Element ( `` Description '' ) .Value , Price = int.Parse ( item.Parent.Element ( `` Price '' ) .Value ) } ; < Items > < Item > < Id > < /Id > < Name > < /Name > < Description > < /Description > < Price > < /Price > < /Item > < /Items >"
"public class doc { public string file ; public int sizemb ; } var list = new List < doc > ( ) { new doc { file = `` dok1 '' , sizemb = 5 } , new doc { file = `` dok2 '' , sizemb = 5 } , new doc { file = `` dok3 '' , sizemb = 5 } , new doc { file = `` dok4 '' , sizemb = 4 } , } ; int maxTotalFileSize = 9 ; var lists = new List < List < doc > > ( ) ; foreach ( var item in list ) { //Try and place the document into a sub-list var availableSlot = lists.FirstOrDefault ( p = > ( p.Sum ( x = > x.sizemb ) + item.sizemb ) < maxGroupSize ) ; if ( availableSlot == null ) lists.Add ( new List < doc > ( ) { item } ) ; else availableSlot.Add ( item ) ; }"
"[ TypeConverter ( typeof ( ThicknessConverter ) ) ] public struct Thickness { Double top ; Double bottom ; Double right ; Double left ; public Thickness ( Double uniformLength ) { top = uniformLength ; bottom = uniformLength ; right = uniformLength ; left = uniformLength ; } public Thickness ( Double left , Double top , Double right , Double bottom ) { this.left = left ; this.top = top ; this.right = right ; this.bottom = bottom ; } public Double Top { get { return top ; } set { top = value ; } } public Double Bottom { get { return bottom ; } set { bottom = value ; } } public Double Right { get { return right ; } set { right = value ; } } public Double Left { get { return left ; } set { left = value ; } } public Double UniformLength { get { if ( ! IsUniform ) throw new InvalidOperationException ( ) ; else return top ; } set { top = value ; bottom = value ; right = value ; bottom = value ; } } public Boolean IsUniform { get { return top == bottom & & bottom == right & & bottom == left ; } } } public class ThicknessConverter : TypeConverter { public ThicknessConverter ( ) { } public override Boolean CanConvertTo ( ITypeDescriptorContext context , Type destinationType ) { return destinationType == typeof ( String ) || destinationType == typeof ( InstanceDescriptor ) ; } public override Object ConvertTo ( ITypeDescriptorContext context , System.Globalization.CultureInfo culture , Object value , Type destinationType ) { Thickness thickness = ( Thickness ) value ; if ( destinationType == typeof ( String ) ) { if ( thickness.IsUniform ) return thickness.Right.ToString ( ) ; else return thickness.Left + `` , '' + thickness.Top + `` , '' + thickness.Right + `` , '' + thickness.Bottom ; } else if ( destinationType == typeof ( InstanceDescriptor ) ) { if ( thickness.IsUniform ) return new InstanceDescriptor ( typeof ( Thickness ) .GetConstructor ( new Type [ ] { typeof ( Double ) } ) , new Object [ ] { thickness.UniformLength } ) ; else { ConstructorInfo constructor = typeof ( Thickness ) .GetConstructor ( new Type [ ] { typeof ( Double ) , typeof ( Double ) , typeof ( Double ) , typeof ( Double ) } ) ; return new InstanceDescriptor ( constructor , new Object [ ] { thickness.Left , thickness.Top , thickness.Right , thickness.Bottom } ) ; } } else return null ; } public override Boolean CanConvertFrom ( ITypeDescriptorContext context , Type sourceType ) { return sourceType == typeof ( String ) ; } public override Object ConvertFrom ( ITypeDescriptorContext context , System.Globalization.CultureInfo culture , Object value ) { if ( value is String ) { String stringValue = ( String ) value ; if ( stringValue.Contains ( `` , '' ) ) { String [ ] stringValues = stringValue.Split ( ' , ' ) ; Double [ ] values = new Double [ stringValues.Length ] ; if ( values.Length == 4 ) { try { for ( Int32 i = 0 ; i < 4 ; i++ ) values [ i ] = Double.Parse ( stringValues [ i ] ) ; } catch ( Exception ) { return new Thickness ( ) ; } return new Thickness ( values [ 0 ] , values [ 1 ] , values [ 2 ] , values [ 3 ] ) ; } else return new Thickness ( ) ; } else { try { return new Thickness ( Double.Parse ( stringValue ) ) ; } catch ( Exception ) { return new Thickness ( ) ; } } } else return base.ConvertFrom ( context , culture , value ) ; } public override Boolean GetCreateInstanceSupported ( ITypeDescriptorContext context ) { return true ; } public override Object CreateInstance ( ITypeDescriptorContext context , System.Collections.IDictionary propertyValues ) { return new Thickness ( ( Double ) propertyValues [ `` Left '' ] , ( Double ) propertyValues [ `` Top '' ] , ( Double ) propertyValues [ `` Right '' ] , ( Double ) propertyValues [ `` Bottom '' ] ) ; } public override Boolean GetPropertiesSupported ( ITypeDescriptorContext context ) { return true ; } public override PropertyDescriptorCollection GetProperties ( ITypeDescriptorContext context , Object value , Attribute [ ] attributes ) { PropertyDescriptorCollection collection = TypeDescriptor.GetProperties ( typeof ( Thickness ) ) ; collection = collection.Sort ( new String [ ] { `` Left '' , `` Top '' , `` Right '' , `` Bottom '' } ) ; collection.RemoveAt ( 4 ) ; collection.RemoveAt ( 4 ) ; return collection ; } }"
"map < pair < unsigned int , unsigned int > , unsigned int > kmapValues ; private Dictionary < KeyValuePair < uint , uint > , uint > kmapValues ; kmapValues [ make_pair ( j , i ) ] = 1 kmapValues [ Tuple ( j , i ) ] = 1 // got error"
"PdfDocument doc = new PdfDocument ( ) ; string mail = textBox1.Text ; string [ ] split = mail.Split ( new string [ ] { Environment.NewLine } , StringSplitOptions.None ) ; int counter = split.Count ( ) ; // Source must be array or IList.var source = Enumerable.Range ( 0 , 100000 ) .ToArray ( ) ; // Partition the entire source array.var rangePartitioner = Partitioner.Create ( 0 , counter ) ; double [ ] results = new double [ counter ] ; // Loop over the partitions in parallel.Parallel.ForEach ( rangePartitioner , ( range , loopState ) = > { // Loop over each range element without a delegate invocation . for ( int i = range.Item1 ; i < range.Item2 ; i++ ) { f_prime = split [ i ] .Replace ( `` `` , `` '' ) ; PdfPage page = doc.AddPage ( ) ; XGraphics gfx = XGraphics.FromPdfPage ( page ) ; XImage image = XImage.FromFile ( f_prime ) ; double x = 0 ; gfx.DrawImage ( image , x , 0 ) ; } } ) ;"
"protected void Application_BeginRequest ( object sender , EventArgs e ) { if ( Request.PhysicalPath.EndsWith ( `` .jpg '' ) & & File.Exists ( Request.PhysicalPath ) == false ) { Context.RewritePath ( `` ~/images/nophoto.jpg '' ) ; } } < system.webServer > < modules runAllManagedModulesForAllRequests= '' true '' > < /modules > < /system.webServer >"
"public class SortConfig < TSource , TRelatedObject > where TSource : class where TRelatedObject : class { public IList < SortOption > Options { get ; protected set ; } public SortOption DefaultOption { get ; set ; } public SortConfig ( ) { Options = new List < SortOption > ( ) ; } public void Add ( string name , Expression < Func < TSource , object > > sortExpression , TRelatedObject relatedObject , bool isDefault = false ) { var option = new SortOption { FriendlyName = name , SortExpression = sortExpression , RelatedObject = relatedObject } ; Options.Add ( option ) ; if ( isDefault ) DefaultOption = option ; } public SortOption GetSortOption ( string sortName ) { if ( sortName.EndsWith ( `` asc '' , StringComparison.OrdinalIgnoreCase ) ) sortName = sortName.Substring ( 0 , sortName.LastIndexOf ( `` asc '' , StringComparison.OrdinalIgnoreCase ) ) ; else if ( sortName.EndsWith ( `` desc '' , StringComparison.OrdinalIgnoreCase ) ) sortName = sortName.Substring ( 0 , sortName.LastIndexOf ( `` desc '' , StringComparison.OrdinalIgnoreCase ) ) ; sortName = sortName.Trim ( ) ; var option = Options.Where ( x = > x.FriendlyName.Trim ( ) .Equals ( sortName , StringComparison.OrdinalIgnoreCase ) ) .FirstOrDefault ( ) ; if ( option == null ) { if ( DefaultOption == null ) throw new InvalidOperationException ( string.Format ( `` No configuration found for sort type of ' { 0 } ' , and no default sort configuration exists '' , sortName ) ) ; option = DefaultOption ; } return option ; } public class SortOption { public string FriendlyName { get ; set ; } public Expression < Func < TSource , object > > SortExpression { get ; set ; } public TRelatedObject RelatedObject { get ; set ; } } } protected void InitSortConfig ( ) { _sortConfig = new SortConfig < xosPodOptimizedSearch , HtmlAnchor > ( ) ; _sortConfig.Add ( `` name '' , ( x = > x.LastName ) , lnkSortName , true ) ; _sortConfig.Add ( `` team '' , ( x = > x.SchoolName ) , lnkSortTeam ) ; _sortConfig.Add ( `` rate '' , ( x = > x.XosRating ) , lnkSortRate ) ; _sortConfig.Add ( `` pos '' , ( x = > x.ProjectedPositions ) , null ) ; _sortConfig.Add ( `` height '' , ( x = > x.Height ) , lnkSortHeight ) ; _sortConfig.Add ( `` weight '' , ( x = > x.Weight ) , lnkSortWeight ) ; _sortConfig.Add ( `` city '' , ( x = > x.SchoolCity ) , lnkSortCity ) ; _sortConfig.Add ( `` state '' , ( x = > x.SchoolState ) , lnkSortState ) ; } // Get desired sorting configuration InitSortConfig ( ) ; var sortOption = _sortConfig.GetSortOption ( sort ) ; bool isDescendingSort = sort.EndsWith ( `` desc '' , StringComparison.OrdinalIgnoreCase ) ; // Setup columns InitSortLinks ( ) ; if ( sortOption.RelatedObject ! = null ) { // Make modifications to html anchor } // Form query var query = PodDataContext.xosPodOptimizedSearches.AsQueryable ( ) ; if ( isDescendingSort ) query = query.OrderByDescending ( sortOption.SortExpression ) ; else query = query.OrderBy ( sortOption.SortExpression ) ;"
public class MyClass < T > { public T MaxValue { // Implimentation for MaxValue } public T MyMethod ( T argument ) { if ( argument > this.MaxValue ) { // Then do something } } }
"using System.Runtime.InteropServices ; namespace System { /// < summary > /// Specifies a return value type for a method that does not return a value . /// < /summary > /// < filterpriority > 2 < /filterpriority > [ ComVisible ( true ) ] [ Serializable ] [ StructLayout ( LayoutKind.Sequential , Size = 1 ) ] public struct Void { } }"
public interface IFoo { void Bar ( ) ; } public static class Class1 { public static void Test1 < T > ( T arg1 ) where T : IFoo { arg1.Bar ( ) ; } public static void Test2 ( IFoo arg1 ) { arg1.Bar ( ) ; } }
namespace Shopping { public struct ShoppingCart { public string Color ; public int ProductId ; } public partial class MyShoppingCart { public decimal GetTotal ( string cartID ) { } // Some other methods ... } } namespace Shopping { public partial class MyShoppingCart { public string Color { get ; set ; } public int ProductId { get ; set ; } public decimal GetTotal ( string cartID ) { } // Some other methods ... } }
"< li class= '' ui-pagination-next '' > @ Html.ActionLink ( `` Next '' , `` Paginate '' , `` Home '' , new { nbSkip = ViewBag.nextSkip } , null ) < /li > http : //localhost:41626/ # /Home/Paginate ? nbSkip=60 http : //localhost:41626/Home/Paginate ? nbSkip=60 , public class RouteConfig { public static void RegisterRoutes ( RouteCollection routes ) { routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; routes.MapRoute ( name : `` Default '' , url : `` { controller } / { action } / { id } '' , defaults : new { controller = `` Home '' , action = `` Index '' , id = UrlParameter.Optional } ) ; } }"
"var enumerableOfAwesome = Enumerable .Range ( 1 , 5 ) .Select ( n = > new Awesome ( ) ) ; foreach ( var a in enumerableOfAwesome ) a.Bazinga = `` New value '' ;"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Reflection ; namespace MagicTest { /// < summary > /// An attribute that allows us to decorate a class with information that identifies which member is magic . /// < /summary > [ AttributeUsage ( AttributeTargets.Property|AttributeTargets.Field , AllowMultiple = false ) ] class IsMagic : Attribute { } public class Magic { // Internal data storage readonly public dynamic value ; # region My ever-growing list of constructors public Magic ( int input ) { value = input ; } public Magic ( string input ) { value = input ; } public Magic ( IEnumerable < bool > input ) { value = input ; } // ... # endregion public bool CanMakeMagicFromType ( Type targetType ) { if ( targetType == null ) return false ; ConstructorInfo publicConstructor = typeof ( Magic ) .GetConstructor ( new [ ] { targetType } ) ; if ( publicConstructor ! = null ) return true ; // We can make Magic from this input type ! ! ! return false ; } public override string ToString ( ) { return value.ToString ( ) ; } } public static class Magician { /// < summary > /// A method that returns the members of anObject that have been marked with an IsMagic attribute . /// Each member will be wrapped in Magic . /// < /summary > /// < param name= '' anObject '' > < /param > /// < returns > < /returns > public static List < Magic > MakeMagic ( object anObject ) { Type type = anObject ? .GetType ( ) ? ? null ; if ( type == null ) return null ; // Sanity check List < Magic > returnList = new List < Magic > ( ) ; // Any field or property of the class that IsMagic gets added to the returnList in a Magic wrapper MemberInfo [ ] objectMembers = type.GetMembers ( ) ; foreach ( MemberInfo mi in objectMembers ) { bool isMagic = ( mi.GetCustomAttributes < IsMagic > ( ) .Count ( ) > 0 ) ; if ( isMagic ) { dynamic memberValue = null ; if ( mi.MemberType == MemberTypes.Property ) memberValue = ( ( PropertyInfo ) mi ) .GetValue ( anObject ) ; else if ( mi.MemberType == MemberTypes.Field ) memberValue = ( ( FieldInfo ) mi ) .GetValue ( anObject ) ; if ( memberValue == null ) continue ; returnList.Add ( new Magic ( memberValue ) ) ; // This could fail at run-time ! ! ! } } return returnList ; } } } using System ; using System.Collections.Generic ; namespace MagicTest { class Program { class Mundane { [ IsMagic ] public string foo ; [ IsMagic ] public int feep ; public float zorp ; // If this [ IsMagic ] , we 'll have a run-time error } static void Main ( string [ ] args ) { Mundane anObject = new Mundane { foo = `` this is foo '' , feep = -10 , zorp = 1.3f } ; Console.WriteLine ( `` Magic : '' ) ; List < Magic > myMagics = Magician.MakeMagic ( anObject ) ; foreach ( Magic aMagic in myMagics ) Console.WriteLine ( `` { 0 } '' , aMagic.ToString ( ) ) ; Console.WriteLine ( `` More Magic : { 0 } '' , new Magic ( `` this works ! `` ) ) ; //Console.WriteLine ( `` More Magic : { 0 } '' , new Magic ( Mundane ) ) ; // build-time error ! Console.WriteLine ( `` \nPress Enter to continue '' ) ; Console.ReadLine ( ) ; } } }"
"MessageBase msgBase = ..deserialize ; if ( msgBase.MessageType = 1 ) //1 is the Tick msg type { Tick tick = ..deserialize actual msg ; //do something with tick } //throw away msgBase [ ProtoContract , ProtoInclude ( 1 , typeof ( Tick ) ) ] public class MessageBase { protected uint _messageType ; [ ProtoMember ( 1 ) ] public uint MessageType { get { return _messageType ; } set { _messageType = value ; } } } [ ProtoContract ] public public class Tick : MessageBase { private int _tickId ; private double _value ; public Tick ( ) { _messageType = 1 ; } [ ProtoMember ( 1 ) ] public int TickID { get { return _tickId ; } set { _tickId = value ; } } [ ProtoMember ( 2 ) ] public double Value { get { return _value ; } set { _value = value ; } } }"
"public bool GetSalesReceipt ( string sRefNum , string sAccount , out ISalesReceiptRet ret ) { ret = null ; IMsgSetRequest msr = sm.CreateMsgSetRequest ( `` US '' , 4 , 0 ) ; msr.Attributes.OnError = ENRqOnError.roeStop ; ISalesReceiptQuery q = msr.AppendSalesReceiptQueryRq ( ) ; q.metaData.SetValue ( ENmetaData.mdMetaDataAndResponseData ) ; q.ORTxnQuery.TxnFilter.ORRefNumberFilter.RefNumberFilter.RefNumber.SetValue ( sRefNum ) ; q.ORTxnQuery.TxnFilter.ORRefNumberFilter.RefNumberFilter.MatchCriterion.SetValue ( ENMatchCriterion.mcContains ) ; q.ORTxnQuery.TxnFilter.AccountFilter.ORAccountFilter.FullNameList.Add ( sAccount ) ; q.IncludeLineItems.SetValue ( true ) ; IMsgSetResponse resp = sm.DoRequests ( msr ) ; if ( resp.ResponseList.Count == 0 ) return false ; IResponseList rl = resp.ResponseList ; if ( rl.Count == 1 ) { IResponse r = rl.GetAt ( 0 ) ; if ( r.Detail == null ) return false ; if ( r.StatusCode ! = 0 ) return false ; if ( r.Type.GetValue ( ) == ( short ) ENResponseType.rtSalesReceiptQueryRs ) { ISalesReceiptRetList crl = ( ISalesReceiptRetList ) r.Detail ; if ( crl.Count == 1 ) ret = crl.GetAt ( 0 ) ; } } if ( ret == null ) return false ; return true ; }"
"string foo = new string ( new char [ ] { ' b ' , ' a ' , ' r ' } ) ; new string ( new char [ ] { ' b ' , ' a ' , ' r ' } ) ; 'new string ( new char [ ] { ' b ' , ' a ' , ' r ' } ) ' threw an exception of type 'System.ArgumentException ' base { System.SystemException } : { `` Only NewString function evaluation can create a new string . '' } Message : `` Only NewString function evaluation can create a new string . '' ParamName : null"
"qstart = new WqlEventQuery ( `` __InstanceCreationEvent '' , new TimeSpan ( 0 , 0 , 0 , 0 , 5 ) , `` TargetInstance isa \ '' Win32_Process\ '' '' ) ; qstop = new WqlEventQuery ( `` __InstanceDeletionEvent '' , new TimeSpan ( 0 , 0 , 0 , 0 , 5 ) , `` TargetInstance isa \ '' Win32_Process\ '' '' ) ; try { using ( wstart = new ManagementEventWatcher ( qstart ) ) { wstart.EventArrived += new EventArrivedEventHandler ( ProcessStarted ) ; Log.DebugEntry ( `` BeginProcess ( ) - Starting wstart Event '' ) ; wstart.Start ( ) ; } } catch ( Exception ex ) { Log.DebugEntry ( `` error on wstart : `` + ex.Message ) ; } using ( wstop = new ManagementEventWatcher ( qstop ) ) { wstop.EventArrived += new EventArrivedEventHandler ( ProcessStopped ) ; Log.DebugEntry ( `` BeginProcess ( ) - Starting wstop Event '' ) ; wstop.Start ( ) ; }"
"public ViewViewComponentResult Invoke ( ) { var vm = new SummaryViewModel ( ) ; if ( User.Identity is ClaimsIdentity identity & & identity.IsAuthenticated ) { vm.IsAuthenticated = true ; vm.UserName = identity.Claims.FirstOrDefault ( c = > c.Type == `` UserName '' ) .Value ; vm.PhotoUrl = identity.Claims.FirstOrDefault ( c = > c.Type == `` FacePicture '' ) .Value ; } return View ( vm ) ; } [ TestMethod ] public void UserSummaryVcTest ( ) { var component = new UserSummaryViewComponent ( ) ; var model = component.Invoke ( ) .ViewData.Model as SummaryViewModel ; Assert.AreEqual ( `` UserName '' , model.UserName ) ; }"
"harrcascade_frontalface_default.xml harrcascade_frontalface_alt.xml harrcascade_frontalface_alt2.xml harrcascade_frontalface_alt_tree.xml static public Rectangle GetMugshotRectangle ( Rectangle rFace ) { int y2 , x2 , w2 , h2 ; //adjust as neccessary double heightRatio = 2 ; y2 = Convert.ToInt32 ( rFace.Y - rFace.Height * ( heightRatio - 1.0 ) / 2.0 ) ; h2 = Convert.ToInt32 ( rFace.Height * heightRatio ) ; //height to width ratio is 1.25 : 1 in mugshots w2 = Convert.ToInt32 ( h2 * 4 / 5 ) ; x2 = Convert.ToInt32 ( ( rFace.X + rFace.Width / 2 ) - w2 / 2 ) ; return new Rectangle ( x2 , y2 , w2 , h2 ) ; }"
"private void button1_Click ( object sender , EventArgs e ) { ToolTip myToolTip = new ToolTip ( ) ; string test = `` This is a test string . `` ; int textWidth = TextRenderer.MeasureText ( test , SystemFonts.DefaultFont , textBox1.Size , TextFormatFlags.LeftAndRightPadding ) .Width ; int toolTipTextPosition_X = textBox1.Size.Width - textWidth ; myToolTip.Show ( test , textBox1 , toolTipTextPosition_X , textBox1.Size.Height ) ; }"
"using System ; using System.Collections.Generic ; using System.Diagnostics ; using System.Linq ; using System.Text ; using System.Threading ; using System.Threading.Tasks ; namespace AsyncStackSample { class Program { static void Main ( string [ ] args ) { try { var x = Test ( index : 0 , max : int.Parse ( args [ 0 ] ) , throwException : bool.Parse ( args [ 1 ] ) ) .GetAwaiter ( ) .GetResult ( ) ; Console.WriteLine ( x ) ; } catch ( Exception ex ) { Console.WriteLine ( ex ) ; } Console.ReadKey ( ) ; } static async Task < string > Test ( int index , int max , bool throwException ) { await Task.Yield ( ) ; if ( index < max ) { var nextIndex = index + 1 ; try { Console.WriteLine ( $ '' b { nextIndex } of { max } ( on threadId : { Thread.CurrentThread.ManagedThreadId } ) '' ) ; return await Test ( nextIndex , max , throwException ) .ConfigureAwait ( false ) ; } finally { Console.WriteLine ( $ '' e { nextIndex } of { max } ( on threadId : { Thread.CurrentThread.ManagedThreadId } ) '' ) ; } } if ( throwException ) { throw new Exception ( `` '' ) ; } return `` hello '' ; } } } AsyncStackSample.exe 2000 false e 331 of 2000 ( on threadId : 4 ) AsyncStackSample.exe 2000 true e 831 of 2000 ( on threadId : 4 )"
"var list = new List < Object > ( ) { `` hi there '' , 1 , 2.33 } ; { `` $ type '' : `` System.Collections.Generic.List ` 1 [ [ System.Object , mscorlib ] ] , mscorlib '' , `` $ values '' : [ `` hi there '' , 1 , 2.33 ] }"
public class Program { public async Task Main ( string [ ] args ) { Console.WriteLine ( `` Hello World '' ) ; await Task.Delay ( TimeSpan.FromSeconds ( 1 ) ) ; Console.WriteLine ( `` Still here ! `` ) ; Console.ReadLine ( ) ; } }
if ( session [ `` id '' ] == null ) : line1 { : line2 session [ `` id '' ] = // Generate some unique id : line3 } : line4viewstate [ `` id '' ] = session [ `` id '' ] ; : line5
"public static class KeyUtility { static KeyUtility ( ) { Alphabet = new [ ] { ' A ' , ' B ' , ' C ' , 'D ' , ' E ' , ' F ' , ' G ' , ' H ' , ' J ' , ' K ' , ' L ' , 'M ' , ' N ' , ' P ' , ' R ' , 'S ' , 'T ' , ' U ' , ' V ' , ' X ' , ' Y ' , ' Z ' , ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' } ; ReverseAlphabet = Alphabet .Select ( ( c , i ) = > new { Char = c , Value = i } ) .ToDictionary ( k = > k.Char , v = > ( byte ) v.Value ) ; } internal static char [ ] Alphabet ; private static IDictionary < char , byte > ReverseAlphabet ; public static string ToKey ( byte [ ] key , int groupSize ) { //Accessing Alphabet to generate string key from bytes } public static byte [ ] FromKey ( string key ) { //Accessing ReverseAlphabet to get bytes from string key } } System.IndexOutOfRangeException : Array index is out of range.at System.Collections.Generic.Dictionary ` 2 < char , byte > .TryGetValue ( char , byte & ) < 0x000a1 > at MyAPI.KeyUtility.FromKey ( string ) < 0x0009a > at MyApp.Controllers.AboutController.Index ( ) < 0x002df > at ( wrapper dynamic-method ) object.lambda_method ( System.Runtime.CompilerServices.Closure , System.Web.Mvc.ControllerBase , object [ ] ) < 0x0002f > at System.Web.Mvc.ActionMethodDispatcher.Execute ( System.Web.Mvc.ControllerBase , object [ ] ) < 0x0001b > at System.Web.Mvc.ReflectedActionDescriptor.Execute ( System.Web.Mvc.ControllerContext , System.Collections.Generic.IDictionary ` 2 < string , object > ) < 0x000ff > at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod ( System.Web.Mvc.ControllerContext , System.Web.Mvc.ActionDescriptor , System.Collections.Generic.IDictionary ` 2 < string , object > ) < 0x00019 > at System.Web.Mvc.ControllerActionInvoker/ < > c__DisplayClass15. < InvokeActionMethodWithFilters > b__12 ( ) < 0x00066 > at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodFilter ( System.Web.Mvc.IActionFilter , System.Web.Mvc.ActionExecutingContext , System.Func ` 1 < System.Web.Mvc.ActionExecutedContext > ) < 0x000b8 >"
"private void Download ( Dictionary < int , FileAndLinkClass > MyLinks ) { ApplicationDownloadThread = new Thread ( ( ) = > { foreach ( KeyValuePair < int , FileAndLinkClass > item in MyLinks ) { fileNo++ ; WebClient myWebClient = new WebClient ( ) ; myWebClient.DownloadProgressChanged += MyWebClient_DownloadProgressChanged ; myWebClient.DownloadFileCompleted += MyWebClient_DownloadFileCompleted ; // Download the Web resource and save it into the current filesystem folder . string downloadedFileAdress = System.IO.Path.Combine ( fileLocation , $ '' { item.Value.FileName } '' ) ; myWebClient.DownloadFileAsync ( new Uri ( item.Value.Link ) , downloadedFileAdress ) ; while ( myWebClient.IsBusy ) { } } } ) ; ApplicationDownloadThread.IsBackground = false ; ApplicationDownloadThread.Start ( ) ; //UnZipAndCreateUpdatePackage ( MyLinks ) ; } private AutoResetEvent waitHandle = new AutoResetEvent ( true ) ; private void StartDownloadBtn_Click ( object sender , RoutedEventArgs e ) { waitHandle.Set ( ) ; } private void StopDownloadBtn_Click ( object sender , RoutedEventArgs e ) { waitHandle.Reset ( ) ; }"
"Class Hoohoo { public enum aaa : short { a = 0 , b = 3 } public enum bbb : short { a = 0 , b = 3 } public enum ccc : short { a = 0 , b = 3 } } Dictionary < string , short > { `` aaa '' :0 , '' bbb '' :3 , '' ccc '' :0 }"
"< Trace Tag= '' AutodiscoverConfiguration '' Tid= '' 1 '' Time= '' 2013-03-07 19:09:05Z '' > Starting SCP lookup for domainName='example.com ' , root path= '' < /Trace > Connect ErrorUnhandled Exception : LdapException : ( 91 ) Connect ErrorSystem.Net.Sockets.SocketException : No such host is known at System.Net.Dns.hostent_to_IPHostEntry ( System.String h_name , System.String [ ] h_aliases , System.String [ ] h_addrlist ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostByName ( System.String hostName ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostEntry ( System.String hostNameOrAddress ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostAddresses ( System.String hostNameOrAddress ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Sockets.TcpClient.Connect ( System.String hostname , Int32 port ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Sockets.TcpClient..ctor ( System.String hostname , Int32 port ) [ 0x00000 ] in < filename unknown > :0 at Novell.Directory.Ldap.Connection.connect ( System.String host , Int32 port , Int32 semaphoreId ) [ 0x00000 ] in < filename unknown > :0 [ ERROR ] FATAL UNHANDLED EXCEPTION : LdapException : ( 91 ) Connect ErrorSystem.Net.Sockets.SocketException : No such host is known at System.Net.Dns.hostent_to_IPHostEntry ( System.String h_name , System.String [ ] h_aliases , System.String [ ] h_addrlist ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostByName ( System.String hostName ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostEntry ( System.String hostNameOrAddress ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Dns.GetHostAddresses ( System.String hostNameOrAddress ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Sockets.TcpClient.Connect ( System.String hostname , Int32 port ) [ 0x00000 ] in < filename unknown > :0 at System.Net.Sockets.TcpClient..ctor ( System.String hostname , Int32 port ) [ 0x00000 ] in < filename unknown > :0 at Novell.Directory.Ldap.Connection.connect ( System.String host , Int32 port , Int32 semaphoreId ) [ 0x00000 ] in < filename unknown > :0 class Program { private static int verbose = 10 ; private static string loginEmail = `` email @ example.com '' ; private static string password = `` # # # # # # # # # # # # # '' ; static void Main ( string [ ] args ) { try { ServicePointManager.ServerCertificateValidationCallback = CertificateValidationCallBack ; ExchangeService service = new ExchangeService ( ExchangeVersion.Exchange2010_SP2 ) ; service.Credentials = new WebCredentials ( loginEmail , password ) ; if ( verbose > = 10 ) { service.TraceEnabled = true ; service.TraceFlags = TraceFlags.All ; } service.AutodiscoverUrl ( loginEmail , RedirectionUrlValidationCallback ) ; Console.WriteLine ( `` AutoDiscover Completed '' ) ; getContacts ( service ) ; Console.ReadLine ( ) ; } catch ( Exception e ) { Console.WriteLine ( e.Message ) ; foreach ( string key in e.Data.Keys ) { Console.WriteLine ( String.Format ( `` { 0 } : { 1 } '' , key , e.Data [ key ] ) ) ; } throw e ; } } private static void getContacts ( ExchangeService service ) { // Get the number of items in the Contacts folder . ContactsFolder contactsfolder = ContactsFolder.Bind ( service , WellKnownFolderName.Contacts ) ; // Set the number of items to the number of items in the Contacts folder or 1000 , whichever is smaller . int numItems = contactsfolder.TotalCount < 1000 ? contactsfolder.TotalCount : 1000 ; // Instantiate the item view with the number of items to retrieve from the Contacts folder . ItemView view = new ItemView ( numItems ) ; // To keep the request smaller , request only the display name property . //view.PropertySet = new PropertySet ( BasePropertySet.IdOnly , ContactSchema.DisplayName ) ; // Retrieve the items in the Contacts folder that have the properties that you selected . FindItemsResults < Item > contactItems = service.FindItems ( WellKnownFolderName.Contacts , view ) ; // Display the list of contacts . foreach ( Item item in contactItems ) { if ( item is Contact ) { Contact contact = item as Contact ; Console.WriteLine ( ) ; Console.WriteLine ( contact.DisplayName ) ; if ( verbose > = 2 ) { Console.WriteLine ( `` `` + contact.Id ) ; } try { Console.WriteLine ( `` `` + contact.EmailAddresses [ EmailAddressKey.EmailAddress1 ] .ToString ( ) ) ; } catch ( Exception e ) { if ( verbose > = 5 ) { Console.WriteLine ( `` `` + `` Email Address 1 Not Available : `` + e.Message ) ; } } } } } # region taken from tutorial private static bool CertificateValidationCallBack ( object sender , System.Security.Cryptography.X509Certificates.X509Certificate certificate , System.Security.Cryptography.X509Certificates.X509Chain chain , System.Net.Security.SslPolicyErrors sslPolicyErrors ) { // If the certificate is a valid , signed certificate , return true . if ( sslPolicyErrors == System.Net.Security.SslPolicyErrors.None ) { return true ; } // If there are errors in the certificate chain , look at each error to determine the cause . if ( ( sslPolicyErrors & System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors ) ! = 0 ) { if ( chain ! = null & & chain.ChainStatus ! = null ) { foreach ( System.Security.Cryptography.X509Certificates.X509ChainStatus status in chain.ChainStatus ) { if ( ( certificate.Subject == certificate.Issuer ) & & ( status.Status == System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot ) ) { // Self-signed certificates with an untrusted root are valid . continue ; } else { if ( status.Status ! = System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError ) { // If there are any other errors in the certificate chain , the certificate is invalid , // so the method returns false . return false ; } } } } // When processing reaches this line , the only errors in the certificate chain are // untrusted root errors for self-signed certificates . These certificates are valid // for default Exchange server installations , so return true . return true ; } else { // In all other cases , return false . return false ; } } private static bool RedirectionUrlValidationCallback ( string redirectionUrl ) { // The default for the validation callback is to reject the URL . bool result = false ; Uri redirectionUri = new Uri ( redirectionUrl ) ; // Validate the contents of the redirection URL . In this simple validation // callback , the redirection URL is considered valid if it is using HTTPS // to encrypt the authentication credentials . if ( redirectionUri.Scheme == `` https '' ) { result = true ; } return result ; } # endregion } service.AutodiscoverUrl ( loginEmail , RedirectionUrlValidationCallback ) ; service.Url = new Uri ( `` https : //blah.com/ews/exchange.asmx '' ) ;"
"public class Fund { [ Key ] public int FundId { get ; set ; } [ Required ] [ Index ( `` IX_FundNameAndOwner '' , IsUnique = true , Order = 1 ) ] [ Index ( `` IX_FundIdentifierAndOwner '' , IsUnique = true , Order=1 ) ] public ApplicationUser Owner { get ; set ; } [ Required ] [ Index ( `` IX_FundNameAndOwner '' , IsUnique = true , Order=2 ) ] [ MaxLength ( 25 ) ] public string Name { get ; set ; } [ Required ] [ Index ( `` IX_FundIdentifierAndOwner '' , IsUnique = true , Order=2 ) ] [ MaxLength ( 25 ) ] public string Identifier { get ; set ; } public double Balance { get ; set ; } }"
"private void runThreads ( int amount , ThreadStart address ) { for ( int i = 0 ; i < amount ; i++ ) { threadAmount += 1 ; Thread currentThread = new Thread ( address ) ; currentThread.Start ( ) ; } } private void checkProxies ( ) { while ( started ) { try { WebRequest request = WebRequest.Create ( `` http : //google.co.nz/ '' ) ; request.Timeout = ( int ) timeoutCounter.Value * 1000 ; request.Proxy = new WebProxy ( proxies [ proxyIndex ] ) ; Thread.SetData ( Thread.GetNamedDataSlot ( `` currentProxy '' ) , proxies [ proxyIndex ] ) ; if ( proxyIndex ! = proxies.Length ) { proxyIndex += 1 ; } else { started = false ; } request.GetResponse ( ) ; workingProxies += 1 ; } catch ( WebException ) { deadProxies += 1 ; } lock ( `` threadAmount '' ) { if ( threadAmount > proxies.Length - proxyIndex ) { threadAmount -= 1 ; break ; } } } }"
"PS C : \Users\Neko > [ BigInt ] 99999999999999999999999999999999999999999999999999999999PS C : \Users\Neko > [ BigInt ] 9999999999999999999999999999999999999999999991433150857216 PS C : \Users\Neko > [ BigIntsers\Neko\ > [ BigInt ] 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 At line:1 char:318+ ... 999999999999999999999999999999999999999999999999999999999999999999999+ ~The numeric constant 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 is not valid . + CategoryInfo : ParserError : ( : ) [ ] , ParentContainsErrorRecordException + FullyQualifiedErrorId : BadNumericConstant PS C : \Users\Neko > [ UInt64 ] 1844674407370955161518446744073709551615PS C : \Users\Neko > [ UInt64 ] 18446744073709551616Cannot convert value `` 18446744073709551616 '' to type `` System.UInt64 '' . Error : `` Value was either too large or too smallfor a UInt64 . `` At line:1 char:1+ [ UInt64 ] 18446744073709551616+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidArgument : ( : ) [ ] , RuntimeException + FullyQualifiedErrorId : InvalidCastIConvertible namespace Test { class Test { static void Main ( ) { System.Numerics.BigInteger TestInput ; System.Numerics.BigInteger Test = 99999999999999999999 ; System.Console.WriteLine ( Test ) ; } } } Integral constant is too large namespace Test { class Test { static void Main ( ) { System.Numerics.BigInteger TestInput ; TestInput = System.Numerics.BigInteger.Parse ( System.Console.ReadLine ( ) ) ; System.Console.WriteLine ( TestInput ) ; } } } 99999999999 ..."
"public WizardStep Step { get ; set ; } protected override DbEntityValidationResult ValidateEntity ( DbEntityEntry entityEntry , IDictionary < object , object > items ) { items.Add ( `` ValidationStep '' , Step ) ; return base.ValidateEntity ( entityEntry , items ) ; } public void SaveChanges ( WizardStep step ) { _context.Step = step ; _context.SaveChanges ( ) ; } public IEnumerable < ValidationResult > Validate ( ValidationContext validationContext ) { // Step will only be present when called from save changes . Calls from model state validation wo n't have it if ( validationContext.Items.ContainsKey ( `` ValidationStep '' ) ) { var validationStep = ( WizardStep ) validationContext.Items [ `` ValidationStep '' ] ; if ( validationStep == WizardStep.Introduction ) { if ( criteria ) { yield return new ValidationResult ( $ '' Error message `` , new [ ] { `` field '' } ) ; } } } } public ActionResult MyAction ( HomeViewModel vm ) { try { _incidentService.AddOrUpdate ( vm.Enttiy ) ; _incidentService.SaveChanges ( WizardStep.Introduction ) ; } catch ( Exception ex ) { return View ( vm ) ; } return RedirectToAction ( `` Index '' ) ; }"
"public class TestController : Controller { public FilePathResult Index ( ) { return File ( `` path/to/file '' , `` mime '' ) ; } } protected override void EndExecute ( IAsyncResult asyncResult ) { base.EndExecute ( asyncResult ) ; } protected override void EndExecuteCore ( IAsyncResult asyncResult ) { base.EndExecuteCore ( asyncResult ) ; } protected override void OnActionExecuted ( ActionExecutedContext filterContext ) { base.OnActionExecuted ( filterContext ) ; } protected override void OnResultExecuted ( ResultExecutedContext filterContext ) { base.OnResultExecuted ( filterContext ) ; } protected override void Dispose ( bool disposing ) { base.Dispose ( disposing ) ; } ~TestController ( ) { // }"
< ! -- Code package is your service executable . -- > < CodePackage Name= '' Code '' Version= '' 1.9.6 '' > < EntryPoint > < ExeHost > < Program > entryPoint.sh < /Program > < /ExeHost > < /EntryPoint > < /CodePackage > dotnet $ DIR/MyService.dll
"/*1*/ internal static class TimerDemo/*2*/ { /*3*/ private static Timer s_timer ; /*4*/ public static void Main ( ) /*5*/ { /*6*/ Console.WriteLine ( `` Checking status every 2 seconds '' ) ; /*7*/ // Create the Timer ensuring that it never fires . This ensures that/*8*/ // s_timer refers to it BEFORE Status is invoked by a thread pool thread/*9*/ s_timer = new Timer ( Status , null , Timeout.Infinite , Timeout.Infinite ) ; /*10*/ // Now that s_timer is assigned to , we can let the timer fire knowing/*11*/ // that calling Change in Status will not throw a NullReferenceException/*12*/ s_timer.Change ( 0 , Timeout.Infinite ) ; /*13*/ Console.ReadLine ( ) ; // Prevent the process from terminating/*14*/ } /*15*/ // This method 's signature must match the TimerCallback delegate/*16*/ private static void Status ( Object state ) /*17*/ { /*18*/ // This method is executed by a thread pool thread/*20*/ Console.WriteLine ( `` In Status at { 0 } '' , DateTime.Now ) ; /*21*/ Thread.Sleep ( 1000 ) ; // Simulates other work ( 1 second ) /*22*/ // Just before returning , have the Timer fire again in 2 seconds/*23*/ s_timer.Change ( 2000 , Timeout.Infinite ) ; /*24*/ // When this method returns , the thread goes back/*25*/ // to the pool and waits for another work item/*26*/ } /*27*/ }"
"private byte [ ] GetFileChunk ( string base64 ) { using ( MemoryStream compressedData = new MemoryStream ( Convert.FromBase64String ( base64 ) , false ) , uncompressedData = new MemoryStream ( ) ) { using ( GZipStream compressionStream = new GZipStream ( compressedData , CompressionMode.Decompress ) ) { // first copy does nothing ? ? second works compressionStream.CopyTo ( uncompressedData ) ; compressionStream.CopyTo ( uncompressedData ) ; } return uncompressedData.ToArray ( ) ; } }"
"public class LoremIpsum { private Dictionary < Type , List < WeakReference > > references = new Dictionary < Type , List < WeakReference > > ( ) ; public void KeepReference < T > ( Action < T > action ) { if ( this.references.ContainsKey ( typeof ( T ) ) ) { this.references [ typeof ( T ) ] .Add ( new WeakReference ( action ) ) ; } else { this.references.Add ( typeof ( T ) , new List < WeakReference > { new WeakReference ( action ) } ) ; } } } public class Foobar { public Bar Bar { get ; set ; } public void Foo ( LoremIpsum ipsum ) { ipsum.KeepReference < Bar > ( ( b ) = > { this.Bar = b ; } ) ; ipsum.KeepReference < Bar > ( this.Whatever ) ; } public void Whatever ( Bar bar ) { // Do anything , for example ... : this.Bar = bar } }"
"using System ; using System.Reactive.Linq ; namespace RxTester { public class Program { private static event EventHandler TheEvent ; static void Main ( string [ ] args ) { var observable = Observable.FromEvent < EventHandler , EventArgs > ( h = > ( s , e ) = > h ( e ) , h = > TheEvent += h , h = > TheEvent -= h ) ; var subscriber = observable.Buffer ( TimeSpan.FromMilliseconds ( 1000 ) ) .Subscribe ( e = > Console.WriteLine ( $ '' { DateTime.Now.ToLongTimeString ( ) } : { e.Count } elements received ... '' ) ) ; var random = new Random ( ) ; var timer = new System.Timers.Timer ( 2000 ) { AutoReset = true , Enabled = true } ; timer.Elapsed += ( s , e ) = > { var amount = random.Next ( 1 , 10 ) ; for ( int i = 0 ; i < amount ; ++i ) TheEvent ? .Invoke ( null , null ) ; } ; Console.ReadLine ( ) ; timer.Enabled = false ; subscriber.Dispose ( ) ; } } }"
( this.Result == Result.OK )
"private void CallLoopAsync ( ) { var loopReturnedTask = LoopAsync ( ) ; } private async Task LoopAsync ( ) { int count = 0 ; while ( count < 5 ) { await SomeNetworkCallAsync ( ) ; count++ ; } } private async Task SomeWorkAsync ( ) { await SomeIndependentNetworkCall ( ) ; // 2 sec to complete var result1 = await GetDataFromNetworkCallAsync ( ) ; // 2 sec to complete await PostDataToNetworkAsync ( result1 ) ; // 2 sec to complete } private Task [ ] RefactoredSomeWorkAsync ( ) { var task1 = SomeIndependentNetworkCall ( ) ; // 2 sec to complete var task2 = GetDataFromNetworkCallAsync ( ) .ContinueWith ( result1 = > PostDataToNetworkAsync ( result1 ) ) .Unwrap ( ) ; // 4 sec to complete return new [ ] { task1 , task2 } ; } private async Task CallRefactoredSomeWorkAsync ( ) { await Task.WhenAll ( RefactoredSomeWorkAsync ( ) ) ; //Faster , 4 sec await SomeWorkAsync ( ) ; // Slower , 6 sec }"
"bool < T > MyMethod ( ) where T : Isomething { } bool < T , K > MyMethod ( ) where T : Isomething { } bool < T [ ] > MyMethod ( ) where T : Isomething { } public static ISessionFactory GetMySqlSessionFactory < T > ( string connectionString , bool BuildSchema ) { //configuring is meant to be costly so just do it once for each db and store statically if ( ! AllFactories.ContainsKey ( connectionString ) ) { var configuration = Fluently.Configure ( ) .Database ( MySQLConfiguration.Standard .ConnectionString ( connectionString ) .ShowSql ( ) //for development/debug only.. .UseOuterJoin ( ) .QuerySubstitutions ( `` true 1 , false 0 , yes ' Y ' , no ' N ' '' ) ) .Mappings ( m = > { m.FluentMappings.AddFromAssemblyOf < T > ( ) ; m.AutoMappings.Add ( AutoMap.AssemblyOf < T > ( ) .Conventions.Add < CascadeAll > ) ; } ) .ExposeConfiguration ( cfg = > { new SchemaExport ( cfg ) .Create ( BuildSchema , BuildSchema ) ; } ) ; AllFactories [ connectionString ] = configuration.BuildSessionFactory ( ) ; } return AllFactories [ connectionString ] ; } foreach ( T in T [ ] ) { m.FluentMappings.AddFromAssemblyOf < T > ( )"
public class S : IDisposable { public void Dispose ( ) { // some code } public void f ( ) { throw new Exception ( `` exception '' ) ; } } using ( S s = new S ( ) ) { s.f ( ) ; }
public void ConfigureServices ( IServiceCollection services ) { services.AddRazorPages ( ) ; services.AddSignalR ( ) .AddHubOptions < ActivityHub > ( SetConfig ) ; // Local function to set hub configuration void SetConfig ( HubOptions < ActivityHub > options ) { options.ClientTimeoutInterval = TimeSpan.FromMinutes ( 30 ) ; options.KeepAliveInterval = TimeSpan.FromMinutes ( 15 ) ; } }
"< component id= '' defaultBasicRepository '' service= '' MyApp.Models.Repositories.IBasicRepository ` 1 , MyApp.Models '' type= '' MyApp.Models.Repositories.Linq.BasicRepository ` 1 , MyApp.Models '' lifestyle= '' perWebRequest '' / >"
"public void openFile ( string options ) { System.Diagnostics.Debug.WriteLine ( `` options : `` + options ) ; string optVal = JsonHelper.Deserialize < string [ ] > ( options ) [ 0 ] ; asyncOpen ( optVal ) ; } public async Task asyncOpen ( string filename ) { filename = filename.Substring ( 2 , filename.Length - 2 ) ; filename = filename.Replace ( `` // '' , `` / '' ) .Replace ( `` / '' , `` \\ '' ) ; Windows.Storage.StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder ; Debug.WriteLine ( `` local : `` + local.Path ) ; Windows.Storage.StorageFile pdffile = await local.GetFileAsync ( filename ) ; Debug.WriteLine ( `` pdffile : `` + pdffile.Name ) ; //// Launch the pdf file . Windows.System.Launcher.LaunchFileAsync ( pdffile ) ; }"
"public class NetworkDevice { public IPAddress IpAddress { get ; set ; } } public class PingMonitor : IDisposable , IHandle < DeviceRegisteredEvent > , IHandle < DeviceRemovedEvent > { public List < NetworkDevice > _devices = new List < NetworkDevice > ( ) ; public void Handle ( DeviceRegisteredEvent @ event ) { _devices.Add ( @ event.Device ) ; } public void Handle ( DeviceRemovedEvent @ event ) { _devices.Remove ( @ event.Device ) ; } public void PingWorker ( ) { foreach ( var device in _devices ) { var status = Ping ( device.IpAddress ) ; if ( status ! = statusBefore ) DomainEvents.Raise < DeviceStateEvent > ( new DeviceStateEvent ( device , status ) ) ; } } }"
namespace Company.Product.V1 { [ DataContract ( Namespace = `` company-product-v1 '' ) ] public class Widget { [ DataMember ] string widgetName ; } public interface IFunction { Widget GetWidgetData ( int code ) ; } } namespace Company.Product.V2 { [ DataContract ( Namespace = `` company-product-v2 '' ) ] public class Widget { [ DataMember ] int widgetCode ; [ DataMember ] int widgetExpiry ; } public interface IFunction { Widget GetWidgetData ( int code ) ; } }
"BitArray bitty = new BitArray ( new [ ] { false , false , true , false } ) ;"
"public event EventHandler < MyEventArgs > SampleEvent ; public void DemoEvent ( string val ) { // Copy to a temporary variable to be thread-safe . EventHandler < MyEventArgs > temp = SampleEvent ; if ( temp ! = null ) temp ( this , new MyEventArgs ( val ) ) ; }"
"Expression < Func < T , TProperty > > oldExp ; Expression.Lambda < Func < T , object > > ( Expression.Convert ( oldExp.Body , typeof ( object ) ) , oldExp.Parameters ) ;"
"// This is the service - the function called `` directly '' through my WCF service . public IList < Foo > SearchForFoo ( string searchString ) { using ( var serviceBehavior = new FooServiceBehavior ( new NhibernateSessionFactory ( ) ) ) { return serviceBehavior.SearchForFoo ( searchString ) ; } } public class FooServiceBehavior : IDisposable { private readonly ISession _session ; public FooServiceBehavior ( INhibernateSessionFactory sessionFactory ) { _session = sessionFactory.OpenSession ( ) ; } public void Dispose ( ) { _session.Dispose ( ) ; } public IList < Foo > SearchForFoo ( string searchString ) { using ( var tx = _session.BeginTransaction ( ) ) { var result = _session.CreateQuery ( `` from Foo where Name= : name '' ) .SetString ( `` name '' , searchString ) .List < Name > ( ) ; tx.Commit ( ) ; return result ; } }"
"{ type : `` encrypted '' , name : `` some-name '' , data : `` < base64-string > '' } { type : `` encrypted '' , name : `` some-name '' } public class RemoveEncryptedDataSerializer : JsonConverter { public override bool CanConvert ( Type objectType ) { return objectType == typeof ( JObject ) ; } public override object ReadJson ( JsonReader reader , Type objectType , object existingValue , JsonSerializer serializer ) { throw new NotImplementedException ( ) ; } public override void WriteJson ( JsonWriter writer , object value , JsonSerializer serializer ) { var o = ( JObject ) value ; if ( o.Value < string > ( `` type '' ) ! = `` encrypted '' ) { o.WriteTo ( writer ) ; return ; } var copy = o.DeepClone ( ) ; copy [ `` data '' ] ? .Parent.Remove ( ) ; copy.WriteTo ( writer ) ; } } [ TestMethod ] public void ItShouldExcludeEncryptedData ( ) { var input = JObject.Parse ( @ '' { a : { type : 'encrypted ' , name : 'some-name ' , data : 'some-data ' } } '' ) ; var expected = JObject.Parse ( @ '' { a : { type : 'encrypted ' , name : 'some-name ' , } } '' ) ; var output = input.ToString ( Formatting.Indented , new RemoveEncryptedDataSerializer ( ) ) ; Assert.AreEqual ( expected.ToString ( Formatting.Indented ) , output ) ; }"
DateTime exDt = tempPermissionWarning [ i ] .planned_start_date ; for ( DateTime dt = exDt ; dt < = newTo ; dt.AddDays ( 1 ) ) { context = context + dt.ToShortDateString ( ) + `` æ '' + tempPermissionWarning [ i ] .resource_name ) + ¨ '' ; }
"< TreeView Name= '' FamilyTree '' > < TreeView.Resources > < Style TargetType= '' { x : Type TreeViewItem } '' > < Setter Property= '' IsSelected '' Value= '' { Binding IsSelected , Mode=TwoWay } '' / > < Setter Property= '' IsExpanded '' Value= '' { Binding IsExpanded , Mode=TwoWay } '' / > < /Style > < HierarchicalDataTemplate DataType= '' { x : Type local : TreeItem } '' ItemsSource= '' { Binding Children } '' > < reactiveUi : ViewModelViewHost ViewModel= '' { Binding ViewModel } '' / > < /HierarchicalDataTemplate > < /TreeView.Resources > < /TreeView > public partial class MainWindow : Window , IViewFor < MainVM > { public MainWindow ( ) { InitializeComponent ( ) ; //build viewmodel ViewModel = new MainVM ( ) ; //Register views Locator.CurrentMutable.Register ( ( ) = > new PersonView ( ) , typeof ( IViewFor < Person > ) ) ; Locator.CurrentMutable.Register ( ( ) = > new PetView ( ) , typeof ( IViewFor < Pet > ) ) ; //NB . ! Do not use 'this.OneWayBind ... ' for the top level binding to the tree view //this.OneWayBind ( ViewModel , vm = > vm.Family , v = > v.FamilyTree.ItemsSource ) ; FamilyTree.ItemsSource = ViewModel.Family ; } ... } public class MainVM : ReactiveObject { public MainVM ( ) { var bobbyJoe = new Person ( `` Bobby Joe '' , new [ ] { new Pet ( `` Fluffy '' ) } ) ; var bob = new Person ( `` Bob '' , new [ ] { bobbyJoe } ) ; var littleJoe = new Person ( `` Little Joe '' ) ; var joe = new Person ( `` Joe '' , new [ ] { littleJoe } ) ; Family = new ReactiveList < TreeItem > { bob , joe } ; _addPerson = ReactiveCommand.Create ( ) ; _addPerson.Subscribe ( _ = > { if ( SelectedItem == null ) return ; var p = new Person ( NewName ) ; SelectedItem.AddChild ( p ) ; p.IsSelected = true ; p.ExpandPath ( ) ; } ) ; } public ReactiveList < TreeItem > Family { get ; } ... } public abstract class TreeItem : ReactiveObject { private readonly Type _viewModelType ; bool _isExpanded ; public bool IsExpanded { get { return _isExpanded ; } set { this.RaiseAndSetIfChanged ( ref _isExpanded , value ) ; } } bool _isSelected ; public bool IsSelected { get { return _isSelected ; } set { this.RaiseAndSetIfChanged ( ref _isSelected , value ) ; } } private TreeItem _parent ; protected TreeItem ( IEnumerable < TreeItem > children = null ) { Children = new ReactiveList < TreeItem > ( ) ; if ( children == null ) return ; foreach ( var child in children ) { AddChild ( child ) ; } } public abstract object ViewModel { get ; } public ReactiveList < TreeItem > Children { get ; } public void AddChild ( TreeItem child ) { child._parent = this ; Children.Add ( child ) ; } public void ExpandPath ( ) { IsExpanded = true ; _parent ? .ExpandPath ( ) ; } public void CollapsePath ( ) { IsExpanded = false ; _parent ? .CollapsePath ( ) ; } } public class Person : TreeItem { public string Name { get ; set ; } public Person ( string name , IEnumerable < TreeItem > children = null ) : base ( children ) { Name = name ; } public override object ViewModel = > this ; } < UserControl x : Class= '' TreeViewInheritedItem.PersonView '' ... > < StackPanel > < TextBlock Name= '' PersonName '' / > < /StackPanel > < /UserControl > public partial class PersonView : UserControl , IViewFor < Person > { public PersonView ( ) { InitializeComponent ( ) ; this.OneWayBind ( ViewModel , vm = > vm.Name , v = > v.PersonName.Text ) ; } ... }"
< Order > ... < CardNumber / > ... < /Order > < CardNumber > 00000000-0000-0000-0000-000000000000 < /CardNumber > [ XmlElement ( ElementName = `` CardNumber '' ) ] [ JsonProperty ( `` CardNumber '' ) ] public Guid ? CardNumber { get ; set ; } { `` CardNumber '' : `` '' }
"`` Call me John '' void zeusSpeechRecognised ( object sender , SpeechRecognizedEventArgs e ) { writeConsolas ( e.Result.Text , username ) ; switch ( e.Result.Grammar.RuleName ) { case `` settingsRules '' : switch ( e.Result.Text ) { case `` test '' : writeConsolas ( `` What do you want me to test ? `` , me ) ; break ; case `` change username '' : writeConsolas ( `` What do you want to be called ? `` , me ) ; break ; case `` exit '' : writeConsolas ( `` Do you wish me to exit ? `` , me ) ; break ; } break ; } } case `` call me '' username = e.Result.GetWordFollowingCallMe ( ) //Obv not a method , but thats the general idea . break ;"
"if ( Enter ( ) ) { Task.Run < T > ( _func , cancellationToken ) .ContinueWith ( ( antecedent ) = > { try { antecedent.Wait ( cancellationToken ) ; Interlocked.Exchange < T > ( ref _result , antecedent.Result ) ; } catch ( AggregateException e ) { Interlocked.Exchange ( ref _exceptions , e ) ; } catch ( OperationCanceledException ) { ResetState ( ) ; } catch ( Exception e ) { Interlocked.Exchange ( ref _exceptions , new AggregateException ( e ) ) ; } finally { Exit ( ) ; } } ) }"
"_documentClient.CreateDocumentQuery < MyType > ( UriFactory.CreateDocumentCollectionUri ( DatabaseName , CollectionName ) ) .Where ( ... . ) .SelectMany ( ... )"
"ManagementObjectSearcher objSearcher = new ManagementObjectSearcher ( `` SELECT * FROM Win32_SoundDevice '' ) ; ManagementObjectCollection objCollection = objSearcher.Get ( ) ; foreach ( ManagementObject obj in objCollection ) { foreach ( PropertyData property in obj.Properties ) { Debug.WriteLine ( String.Format ( `` { 0 } : { 1 } '' , property.Name , property.Value ) ) ; } } # pragma once # include `` Mmdeviceapi.h '' # include `` PolicyConfig.h '' # include `` Propidl.h '' # include `` NotificationClient.h '' # include `` AudioDevice.h '' namespace AudioDeviceUtil { ref class MmDeviceApiWrapper { public : MmDeviceApiWrapper ( void ) { //.Net threads are coinitialized ... //CoInitializeEx ( NULL , COINIT_MULTITHREADED ) ; notificationRegistered = false ; audioDeviceNotificationHelper = gcnew AudioDeviceNotificationHelper ( ) ; pNotifyClient = NULL ; } virtual ~MmDeviceApiWrapper ( void ) { //CoUninitialize ( ) ; if ( notificationRegistered ) RegisterForNotification ( false ) ; } static property AudioDeviceNotificationHelper^ AudioDeviceNotification { AudioDeviceNotificationHelper^ get ( ) { return audioDeviceNotificationHelper ; } } ; static property bool IsRegisteredForNotification { bool get ( ) { return notificationRegistered ; } } // Enumerates playback device list and marks the default device by the appropriate flag static System : :Collections : :Generic : :List < AudioDevice^ > ^ GetPlaybackDeviceList ( ) { System : :Collections : :Generic : :List < AudioDevice^ > ^ playbackDevices = gcnew System : :Collections : :Generic : :List < AudioDevice^ > ( ) ; HRESULT hr = S_OK ; //CoInitialize ( NULL ) ; HRESULT hr2 = S_OK ; //HRESULT hr3 = S_OK ; if ( SUCCEEDED ( hr ) ) { IMMDeviceEnumerator *pEnum = NULL ; // Create a multimedia device enumerator . hr = CoCreateInstance ( __uuidof ( MMDeviceEnumerator ) , NULL , CLSCTX_ALL , __uuidof ( IMMDeviceEnumerator ) , ( void** ) & pEnum ) ; if ( SUCCEEDED ( hr ) ) { IMMDevice *pDevice ; IMMDeviceCollection *pDevices ; LPWSTR wstrDefaultID = L '' '' ; // Enumerate the output devices . hr = pEnum- > EnumAudioEndpoints ( eRender , DEVICE_STATE_ACTIVE | DEVICE_STATE_UNPLUGGED | DEVICE_STATE_DISABLED , & pDevices ) ; if ( SUCCEEDED ( hr ) ) { HRESULT hrDef = pEnum- > GetDefaultAudioEndpoint ( eRender , eConsole , & pDevice ) ; if ( SUCCEEDED ( hrDef ) ) { hrDef = pDevice- > GetId ( & wstrDefaultID ) ; } System : :Diagnostics : :Trace : :WriteLineIf ( ! SUCCEEDED ( hrDef ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] GetDefaultAudioEndPoint failed : { 0 : X } '' , hr ) , `` Error '' ) ; } if ( SUCCEEDED ( hr ) ) { UINT count ; pDevices- > GetCount ( & count ) ; if ( SUCCEEDED ( hr ) ) { for ( unsigned int i = 0 ; i < count ; i++ ) { hr = pDevices- > Item ( i , & pDevice ) ; if ( SUCCEEDED ( hr ) ) { LPWSTR wstrID = NULL ; DWORD dwState = 0 ; hr = pDevice- > GetId ( & wstrID ) ; hr2 = pDevice- > GetState ( & dwState ) ; if ( SUCCEEDED ( hr ) & & SUCCEEDED ( hr2 ) ) { IPropertyStore *pStore ; hr = pDevice- > OpenPropertyStore ( STGM_READ , & pStore ) ; if ( SUCCEEDED ( hr ) ) { //PROPVARIANT jackSubType ; //PropVariantInit ( & jackSubType ) ; //hr3 = pStore- > GetValue ( PKEY_Device_JackSubType , & jackSubType ) ; // PROPVARIANT friendlyName ; PropVariantInit ( & friendlyName ) ; hr = pStore- > GetValue ( PKEY_Device_FriendlyName , & friendlyName ) ; if ( SUCCEEDED ( hr ) ) { System : :String^ name = gcnew System : :String ( friendlyName.pwszVal ) ; playbackDevices- > Add ( gcnew AudioDevice ( gcnew System : :String ( wstrID ) , name , ( AudioDeviceStateType ) dwState , 0 == wcscmp ( wstrID , wstrDefaultID ) ) ) ; PropVariantClear ( & friendlyName ) ; } /*if ( SUCCEEDED ( hr3 ) ) { PropVariantClear ( & jackSubType ) ; } */ pStore- > Release ( ) ; } } System : :Diagnostics : :Trace : :WriteLineIf ( ! ( SUCCEEDED ( hr ) & & SUCCEEDED ( hr2 ) ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] GetID or GetState failed : { 0 : X } '' , hr ) , `` Error '' ) ; pDevice- > Release ( ) ; } } } pDevices- > Release ( ) ; } pEnum- > Release ( ) ; } } System : :Diagnostics : :Trace : :WriteLineIf ( ! ( SUCCEEDED ( hr ) & & SUCCEEDED ( hr2 ) ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] Error : GetPlaybackDeviceList failed : { 0 : X } , { 1 : X } '' , hr , hr2 ) , `` Error '' ) ; //CoUninitialize ( ) ; return playbackDevices ; } // Get default playback device on the system static AudioDevice^ GetDefaultPlaybackDevice ( ) { AudioDevice^ defaultPlaybackDevice = nullptr ; HRESULT hr = S_OK ; //CoInitialize ( NULL ) ; //HRESULT hr = CoInitializeEx ( NULL , COINIT_MULTITHREADED ) ; HRESULT hr2 = S_OK ; if ( SUCCEEDED ( hr ) ) { IMMDeviceEnumerator *pEnum = NULL ; // Create a multimedia device enumerator . hr = CoCreateInstance ( __uuidof ( MMDeviceEnumerator ) , NULL , CLSCTX_ALL , __uuidof ( IMMDeviceEnumerator ) , ( void** ) & pEnum ) ; if ( SUCCEEDED ( hr ) ) { IMMDevice *pDevice ; // Enumerate the output devices . hr = pEnum- > GetDefaultAudioEndpoint ( eRender , eConsole , & pDevice ) ; LPWSTR wstrID = NULL ; hr = pDevice- > GetId ( & wstrID ) ; DWORD dwState = 0 ; hr2 = pDevice- > GetState ( & dwState ) ; if ( SUCCEEDED ( hr ) & & SUCCEEDED ( hr2 ) ) { IPropertyStore *pStore ; hr = pDevice- > OpenPropertyStore ( STGM_READ , & pStore ) ; if ( SUCCEEDED ( hr ) ) { PROPVARIANT friendlyName ; PropVariantInit ( & friendlyName ) ; hr = pStore- > GetValue ( PKEY_Device_FriendlyName , & friendlyName ) ; if ( SUCCEEDED ( hr ) ) { defaultPlaybackDevice = gcnew AudioDevice ( gcnew System : :String ( friendlyName.pwszVal ) , gcnew System : :String ( wstrID ) , ( AudioDeviceStateType ) dwState , true ) ; } PropVariantClear ( & friendlyName ) ; } pStore- > Release ( ) ; } pDevice- > Release ( ) ; } } System : :Diagnostics : :Trace : :WriteLineIf ( ! ( SUCCEEDED ( hr ) & & SUCCEEDED ( hr2 ) ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] Error : GetDefaultPlaybackDevice failed : { 0 : X } , { 1 : X } '' , hr , hr2 ) , `` Error '' ) ; //CoUninitialize ( ) ; return defaultPlaybackDevice ; } // Set default playback device on the system // returns true if succeeded . static bool SetDefaultPlaybackDevice ( LPCWSTR devIDString ) { IPolicyConfigVista *pPolicyConfig ; ERole reserved = eConsole ; HRESULT hr = CoCreateInstance ( __uuidof ( CPolicyConfigVistaClient ) , NULL , CLSCTX_ALL , __uuidof ( IPolicyConfigVista ) , ( LPVOID * ) & pPolicyConfig ) ; System : :Diagnostics : :Trace : :WriteLineIf ( ! SUCCEEDED ( hr ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] SetDefaultPlaybackDevice CoCreate failed : { 0 : X } '' , hr ) , `` Error '' ) ; if ( SUCCEEDED ( hr ) ) { System : :Diagnostics : :Trace : :WriteLine ( System : :String : :Format ( `` [ MmDeviceApiWrapper ] SetDefaultPlaybackDevice to devId { 0 } '' , gcnew System : :String ( devIDString ) ) , `` Information '' ) ; hr = pPolicyConfig- > SetDefaultEndpoint ( devIDString , reserved ) ; System : :Diagnostics : :Trace : :WriteLineIf ( SUCCEEDED ( hr ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] SetDefaultPlaybackDevice SetDefEndPoint succeeded . `` ) , `` Information '' ) ; System : :Diagnostics : :Trace : :WriteLineIf ( ! SUCCEEDED ( hr ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] SetDefaultPlaybackDevice SetDefEndPoint failed : { 0 : X } '' , hr ) , `` Error '' ) ; pPolicyConfig- > Release ( ) ; } return SUCCEEDED ( hr ) ; } static bool RegisterForNotification ( ) { if ( ! notificationRegistered ) { pNotifyClient = new CMMNotificationClient ( audioDeviceNotificationHelper ) ; notificationRegistered = RegisterForNotification ( true ) ; } return notificationRegistered ; } static bool UnRegisterForNotification ( ) { if ( notificationRegistered & & pNotifyClient ) { notificationRegistered = ! RegisterForNotification ( false ) ; SAFE_DELETE ( pNotifyClient ) ; return notificationRegistered ; } else { return false ; } } private : static AudioDeviceNotificationHelper^ audioDeviceNotificationHelper ; static bool notificationRegistered ; static CMMNotificationClient* pNotifyClient ; // Registered or unregister for notification . // The clients can use the event of the A // returns true if succeeded . static bool RegisterForNotification ( bool registerForNotification ) { HRESULT hr = S_OK ; //CoInitialize ( NULL ) ; if ( SUCCEEDED ( hr ) ) { IMMDeviceEnumerator *pEnum = NULL ; // Create a multimedia device enumerator . hr = CoCreateInstance ( __uuidof ( MMDeviceEnumerator ) , NULL , CLSCTX_ALL , __uuidof ( IMMDeviceEnumerator ) , ( void** ) & pEnum ) ; if ( SUCCEEDED ( hr ) ) { IMMNotificationClient* pNotify = ( IMMNotificationClient* ) ( pNotifyClient ) ; if ( ! registerForNotification ) { hr = pEnum- > UnregisterEndpointNotificationCallback ( pNotify ) ; } else { hr = pEnum- > RegisterEndpointNotificationCallback ( pNotify ) ; } System : :Diagnostics : :Trace : :WriteLineIf ( SUCCEEDED ( hr ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] { 0 } Register for notification succeeded . `` , registerForNotification ? `` '' : `` Un '' ) , `` Information '' ) ; System : :Diagnostics : :Trace : :WriteLineIf ( ! SUCCEEDED ( hr ) , System : :String : :Format ( `` [ MmDeviceApiWrapper ] Error : { 0 } Register for notification not succeded ! Code : { 1 } '' , registerForNotification ? `` '' : `` Un '' , ( hr == E_POINTER ? `` E_POINTER '' : ( hr == E_OUTOFMEMORY ? `` E_OUTOFMEMORY '' : ( hr == E_NOTFOUND ? `` E_NOTFOUND '' : `` NOT_DEFINED '' ) ) ) ) , `` Error '' ) ; } pEnum- > Release ( ) ; } //CoUninitialize ( ) ; return SUCCEEDED ( hr ) ; } } ; }"
var item = aVal ? ? aDefaultVal ; var item = aclass.amethod ( ) > 5 ? aclass.amethod ( ) : 5 ;
"ObjectQuery < Role > roles = context.Roles ; Role role = context.Roles.Where ( c = > c.RoleName == `` Subscriber '' ) .First ( ) ; User user = new User { DisplayName = `` TestCreate2 '' , Email = `` test @ test.com '' , Password = `` test '' } ; context.AttachTo ( `` Roles '' , role ) ; user.Roles.Add ( role ) ; context.AddToUsers ( user ) ; context.SaveChanges ( ) ; < EntitySet Name= '' UserRoles '' EntityType= '' RememberTheJourneyModel.Store.UserRoles '' store : Type= '' Tables '' store : Schema= '' dbo '' store : Name= '' UserRoles '' > < DefiningQuery > SELECT [ UserRoles ] . [ Role_id ] AS [ Role_id ] , [ UserRoles ] . [ User_id ] AS [ User_id ] FROM [ dbo ] . [ UserRoles ] AS [ UserRoles ] < /DefiningQuery > < /EntitySet >"
public delegate void MyDelegate ( object obj ) public class MyClass { public MyClass ( ) { //Error : Expected method with 'void MyDelegate ( object ) ' signature _delegate = MyMethod ; } private MyDelegate _delegate ; public void MyMethod ( SomeObject obj ) { } }
"mbar.HealthLabel.text = String.Format ( `` { 0:0.0 } '' , _hp ) ; Math.Floor ( _hp * 100 ) .ToString ( ) ;"
"Dim ctx As New TravelEntitiesSub Main ( ) CallContext ( ) CallContext ( ) CallContext ( ) End SubPrivate Sub CallContext ( ) Dim someCustomer = From x In ctx.Customer Where x.CustomerId.Equals ( 5 ) Select x Console.WriteLine ( someCustomer.Count ( ) ) End Sub private static TravelEntities ctx = new TravelEntities ( ) ; static void Main ( string [ ] args ) { CallContext ( ) ; CallContext ( ) ; CallContext ( ) ; } private static void CallContext ( ) { var someCustomer = from x in ctx.Customer where x.CustomerId.Equals ( 5 ) select x ; Console.WriteLine ( someCustomer.Count ( ) ) ; } .method private static void CallContext ( ) cil managed { // Code size 195 ( 0xc3 ) .maxstack 7 .locals init ( [ 0 ] class [ System.Core ] System.Linq.IQueryable ` 1 < class VB_IL_Difference.Customer > someCustomer , [ 1 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression VB $ t_ref $ S0 , [ 2 ] class [ System.Core ] System.Linq.Expressions.Expression [ ] VB $ t_array $ S0 , [ 3 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] VB $ t_array $ S1 , [ 4 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression VB $ t_ref $ S1 , [ 5 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] VB $ t_array $ S2 ) IL_0000 : nop IL_0001 : ldsfld class VB_IL_Difference.TravelEntities VB_IL_Difference.Module1 : :ctx IL_0006 : callvirt instance class [ System.Data.Entity ] System.Data.Objects.ObjectSet ` 1 < class VB_IL_Difference.Customer > VB_IL_Difference.TravelEntities : :get_Customer ( ) IL_000b : ldtoken VB_IL_Difference.Customer IL_0010 : call class [ mscorlib ] System.Type [ mscorlib ] System.Type : :GetTypeFromHandle ( valuetype [ mscorlib ] System.RuntimeTypeHandle ) IL_0015 : ldstr `` x '' IL_001a : call class [ System.Core ] System.Linq.Expressions.ParameterExpression [ System.Core ] System.Linq.Expressions.Expression : :Parameter ( class [ mscorlib ] System.Type , string ) IL_001f : stloc.1 IL_0020 : ldloc.1 IL_0021 : ldtoken method instance int32 VB_IL_Difference.Customer : :get_CustomerId ( ) IL_0026 : call class [ mscorlib ] System.Reflection.MethodBase [ mscorlib ] System.Reflection.MethodBase : :GetMethodFromHandle ( valuetype [ mscorlib ] System.RuntimeMethodHandle ) IL_002b : castclass [ mscorlib ] System.Reflection.MethodInfo IL_0030 : call class [ System.Core ] System.Linq.Expressions.MemberExpression [ System.Core ] System.Linq.Expressions.Expression : :Property ( class [ System.Core ] System.Linq.Expressions.Expression , class [ mscorlib ] System.Reflection.MethodInfo ) IL_0035 : ldtoken method instance bool [ mscorlib ] System.Int32 : :Equals ( int32 ) IL_003a : call class [ mscorlib ] System.Reflection.MethodBase [ mscorlib ] System.Reflection.MethodBase : :GetMethodFromHandle ( valuetype [ mscorlib ] System.RuntimeMethodHandle ) IL_003f : castclass [ mscorlib ] System.Reflection.MethodInfo IL_0044 : ldc.i4.1 IL_0045 : newarr [ System.Core ] System.Linq.Expressions.Expression IL_004a : stloc.2 IL_004b : ldloc.2 IL_004c : ldc.i4.0 IL_004d : ldc.i4.5 IL_004e : box [ mscorlib ] System.Int32 IL_0053 : ldtoken [ mscorlib ] System.Int32 IL_0058 : call class [ mscorlib ] System.Type [ mscorlib ] System.Type : :GetTypeFromHandle ( valuetype [ mscorlib ] System.RuntimeTypeHandle ) IL_005d : call class [ System.Core ] System.Linq.Expressions.ConstantExpression [ System.Core ] System.Linq.Expressions.Expression : :Constant ( object , class [ mscorlib ] System.Type ) IL_0062 : stelem.ref IL_0063 : nop IL_0064 : ldloc.2 IL_0065 : call class [ System.Core ] System.Linq.Expressions.MethodCallExpression [ System.Core ] System.Linq.Expressions.Expression : :Call ( class [ System.Core ] System.Linq.Expressions.Expression , class [ mscorlib ] System.Reflection.MethodInfo , class [ System.Core ] System.Linq.Expressions.Expression [ ] ) IL_006a : ldc.i4.1 IL_006b : newarr [ System.Core ] System.Linq.Expressions.ParameterExpression IL_0070 : stloc.3 IL_0071 : ldloc.3 IL_0072 : ldc.i4.0 IL_0073 : ldloc.1 IL_0074 : stelem.ref IL_0075 : nop IL_0076 : ldloc.3 IL_0077 : call class [ System.Core ] System.Linq.Expressions.Expression ` 1 < ! ! 0 > [ System.Core ] System.Linq.Expressions.Expression : :Lambda < class [ mscorlib ] System.Func ` 2 < class VB_IL_Difference.Customer , bool > > ( class [ System.Core ] System.Linq.Expressions.Expression , class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] ) IL_007c : call class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > [ System.Core ] System.Linq.Queryable : :Where < class VB_IL_Difference.Customer > ( class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > , class [ System.Core ] System.Linq.Expressions.Expression ` 1 < class [ mscorlib ] System.Func ` 2 < ! ! 0 , bool > > ) IL_0081 : ldtoken VB_IL_Difference.Customer IL_0086 : call class [ mscorlib ] System.Type [ mscorlib ] System.Type : :GetTypeFromHandle ( valuetype [ mscorlib ] System.RuntimeTypeHandle ) IL_008b : ldstr `` x '' IL_0090 : call class [ System.Core ] System.Linq.Expressions.ParameterExpression [ System.Core ] System.Linq.Expressions.Expression : :Parameter ( class [ mscorlib ] System.Type , string ) IL_0095 : stloc.s VB $ t_ref $ S1 IL_0097 : ldloc.s VB $ t_ref $ S1 IL_0099 : ldc.i4.1 IL_009a : newarr [ System.Core ] System.Linq.Expressions.ParameterExpression IL_009f : stloc.s VB $ t_array $ S2 IL_00a1 : ldloc.s VB $ t_array $ S2 IL_00a3 : ldc.i4.0 IL_00a4 : ldloc.s VB $ t_ref $ S1 IL_00a6 : stelem.ref IL_00a7 : nop IL_00a8 : ldloc.s VB $ t_array $ S2 IL_00aa : call class [ System.Core ] System.Linq.Expressions.Expression ` 1 < ! ! 0 > [ System.Core ] System.Linq.Expressions.Expression : :Lambda < class [ mscorlib ] System.Func ` 2 < class VB_IL_Difference.Customer , class VB_IL_Difference.Customer > > ( class [ System.Core ] System.Linq.Expressions.Expression , class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] ) IL_00af : call class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 1 > [ System.Core ] System.Linq.Queryable : :Select < class VB_IL_Difference.Customer , class VB_IL_Difference.Customer > ( class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > , class [ System.Core ] System.Linq.Expressions.Expression ` 1 < class [ mscorlib ] System.Func ` 2 < ! ! 0 , ! ! 1 > > ) IL_00b4 : stloc.0 IL_00b5 : ldloc.0 IL_00b6 : call int32 [ System.Core ] System.Linq.Queryable : :Count < class VB_IL_Difference.Customer > ( class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > ) IL_00bb : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_00c0 : nop IL_00c1 : nop IL_00c2 : ret } // end of method Module1 : :CallContext .method private hidebysig static void CallContext ( ) cil managed { // Code size 141 ( 0x8d ) .maxstack 7 .locals init ( [ 0 ] class [ System.Core ] System.Linq.IQueryable ` 1 < class C_IL_Difference.Customer > someCustomer , [ 1 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression CS $ 0 $ 0000 , [ 2 ] class [ System.Core ] System.Linq.Expressions.Expression [ ] CS $ 0 $ 0001 , [ 3 ] class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] CS $ 0 $ 0002 ) IL_0000 : nop IL_0001 : ldsfld class C_IL_Difference.TravelEntities C_IL_Difference.Program : :ctx IL_0006 : callvirt instance class [ System.Data.Entity ] System.Data.Objects.ObjectSet ` 1 < class C_IL_Difference.Customer > C_IL_Difference.TravelEntities : :get_Customer ( ) IL_000b : ldtoken C_IL_Difference.Customer IL_0010 : call class [ mscorlib ] System.Type [ mscorlib ] System.Type : :GetTypeFromHandle ( valuetype [ mscorlib ] System.RuntimeTypeHandle ) IL_0015 : ldstr `` x '' IL_001a : call class [ System.Core ] System.Linq.Expressions.ParameterExpression [ System.Core ] System.Linq.Expressions.Expression : :Parameter ( class [ mscorlib ] System.Type , string ) IL_001f : stloc.1 IL_0020 : ldloc.1 IL_0021 : ldtoken method instance int32 C_IL_Difference.Customer : :get_CustomerId ( ) IL_0026 : call class [ mscorlib ] System.Reflection.MethodBase [ mscorlib ] System.Reflection.MethodBase : :GetMethodFromHandle ( valuetype [ mscorlib ] System.RuntimeMethodHandle ) IL_002b : castclass [ mscorlib ] System.Reflection.MethodInfo IL_0030 : call class [ System.Core ] System.Linq.Expressions.MemberExpression [ System.Core ] System.Linq.Expressions.Expression : :Property ( class [ System.Core ] System.Linq.Expressions.Expression , class [ mscorlib ] System.Reflection.MethodInfo ) IL_0035 : ldtoken method instance bool [ mscorlib ] System.Int32 : :Equals ( int32 ) IL_003a : call class [ mscorlib ] System.Reflection.MethodBase [ mscorlib ] System.Reflection.MethodBase : :GetMethodFromHandle ( valuetype [ mscorlib ] System.RuntimeMethodHandle ) IL_003f : castclass [ mscorlib ] System.Reflection.MethodInfo IL_0044 : ldc.i4.1 IL_0045 : newarr [ System.Core ] System.Linq.Expressions.Expression IL_004a : stloc.2 IL_004b : ldloc.2 IL_004c : ldc.i4.0 IL_004d : ldc.i4.5 IL_004e : box [ mscorlib ] System.Int32 IL_0053 : ldtoken [ mscorlib ] System.Int32 IL_0058 : call class [ mscorlib ] System.Type [ mscorlib ] System.Type : :GetTypeFromHandle ( valuetype [ mscorlib ] System.RuntimeTypeHandle ) IL_005d : call class [ System.Core ] System.Linq.Expressions.ConstantExpression [ System.Core ] System.Linq.Expressions.Expression : :Constant ( object , class [ mscorlib ] System.Type ) IL_0062 : stelem.ref IL_0063 : ldloc.2 IL_0064 : call class [ System.Core ] System.Linq.Expressions.MethodCallExpression [ System.Core ] System.Linq.Expressions.Expression : :Call ( class [ System.Core ] System.Linq.Expressions.Expression , class [ mscorlib ] System.Reflection.MethodInfo , class [ System.Core ] System.Linq.Expressions.Expression [ ] ) IL_0069 : ldc.i4.1 IL_006a : newarr [ System.Core ] System.Linq.Expressions.ParameterExpression IL_006f : stloc.3 IL_0070 : ldloc.3 IL_0071 : ldc.i4.0 IL_0072 : ldloc.1 IL_0073 : stelem.ref IL_0074 : ldloc.3 IL_0075 : call class [ System.Core ] System.Linq.Expressions.Expression ` 1 < ! ! 0 > [ System.Core ] System.Linq.Expressions.Expression : :Lambda < class [ mscorlib ] System.Func ` 2 < class C_IL_Difference.Customer , bool > > ( class [ System.Core ] System.Linq.Expressions.Expression , class [ System.Core ] System.Linq.Expressions.ParameterExpression [ ] ) IL_007a : call class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > [ System.Core ] System.Linq.Queryable : :Where < class C_IL_Difference.Customer > ( class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > , class [ System.Core ] System.Linq.Expressions.Expression ` 1 < class [ mscorlib ] System.Func ` 2 < ! ! 0 , bool > > ) IL_007f : stloc.0 IL_0080 : ldloc.0 IL_0081 : call int32 [ System.Core ] System.Linq.Queryable : :Count < class C_IL_Difference.Customer > ( class [ System.Core ] System.Linq.IQueryable ` 1 < ! ! 0 > ) IL_0086 : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_008b : nop IL_008c : ret } // end of method Program : :CallContext"
public MethodResult IsValid ( object userLogin ) { return new MethodResult ( ) ; } var isValidResult = IsValid ( someObject ( ) ) ; dynamic - > MethodResult dynamic - > dynamic
"SELECT CASE WHEN caller < callee THEN callee ELSE caller END AS caller1 , CASE WHEN caller < callee THEN caller ELSE callee END AS caller2 , Count ( * ) AS [ Count ] FROM YourTable GROUP BY CASE WHEN caller < callee THEN callee ELSE caller END , CASE WHEN caller < callee THEN caller ELSE callee END"
var thread = new Thread ( async ( ) = > { while ( true ) { await SomeLengthyTask ( ) ; ... } } ) ; thread.Start ( ) ; thread.Join ( ) ;
public class Person { Address _address = new Address ( ) ; public string AddressName { get { return _address.Name ; } set { _address.Name = value ; } } public string GetAddressName ( ) { return _address.Name ; } public void SetAddressName ( string name ) { _address.Name = name ; } } public Address { public string Name { get ; set ; } }
"public class MyController : ApiController { public Task Get ( ) { var context = TaskScheduler.FromCurrentSynchronizationContext ( ) ; return Task.FromResult ( 1 ) .ContinueWith ( _ = > { } , context ) .ContinueWith ( _ = > Ok ( DateTime.Now.ToLongTimeString ( ) ) , context ) ; } } < system.web > < compilation debug= '' true '' targetFramework= '' 4.5 '' / > < httpRuntime targetFramework= '' 4.5 '' / > < /system.web >"
"public void Save ( ) { using ( XmlWriter xmlWriter = XmlWriter.Create ( m_StreamProvider.SaveFileStream ( m_FilenameProvider.Filename ) ) ) { XDocument xDoc = new XDocument ( new XElement ( `` BookmarkCollection '' , Items.Select ( bookmark = > new XElement ( `` Bookmark '' , new XElement ( `` Name '' , bookmark.Name ) , new XElement ( `` Link '' , bookmark.Link ) , new XElement ( `` Remarks '' , bookmark.Remarks ) , new XElement ( `` DateAdded '' , bookmark.DateAdded ) , new XElement ( `` DateLastAccessed '' , bookmark.DateLastAccessed ) ) ) ) ) ; xDoc.Save ( xmlWriter ) ; } } [ Test ] public void Save_OneItemCollection_XmlCreatedCorrectly ( ) { //Arrange MemoryStreamProvider streamProvider = new MemoryStreamProvider ( ) ; IBookmarkCollection collection = XBookmarkTestHelpers.GetXBookmarkCollection ( streamProvider ) ; IBookmark bookmarkToAdd = XBookmarkTestHelpers.GetIBookmark ( `` myLink '' ) ; collection.Add ( bookmarkToAdd ) ; //Act collection.Save ( ) ; //Assert streamProvider.WriteStrean.Position = 0 ; String generatedXml = Encoding.Default.GetString ( streamProvider.WriteStrean.GetBuffer ( ) ) ; Assert.IsTrue ( String.Equals ( generatedXml , m_ExpectedOneItemString ) , `` XML does not match '' ) ; }"
"[ System.Windows.Markup.ContentProperty ( `` Child '' ) ] public class WinFormsHost : HwndHost { public WinFormsHost ( ) { var form = new ChildForm ( ) ; Child = form ; } private System.Windows.Forms.Form child ; public event EventHandler < ChildChangedEventArgs > ChildChanged ; public System.Windows.Forms.Form Child { get { return child ; } set { HwndSource ps = PresentationSource.FromVisual ( this ) as HwndSource ; if ( ps ! = null & & ps.Handle ! = IntPtr.Zero ) { throw new InvalidOperationException ( `` Can not set the Child property after the layout is done . `` ) ; } Form oldChild = child ; child = value ; OnChildChanged ( oldChild ) ; } } private void CheckChildValidity ( ) { if ( child == null || child.Handle == IntPtr.Zero ) { throw new ArgumentNullException ( `` child form can not be null '' ) ; } } public Boolean ShowCaption { get { CheckChildValidity ( ) ; return ( GetWindowStyle ( Child.Handle ) & WindowStyles.WS_BORDER ) == WindowStyles.WS_CAPTION ; } set { if ( child == null ) { this.ChildChanged += delegate { if ( value ) { SetWindowStyle ( Child.Handle , GetWindowStyle ( Child.Handle ) | WindowStyles.WS_CAPTION ) ; } else { SetWindowStyle ( Child.Handle , GetWindowStyle ( Child.Handle ) & ~WindowStyles.WS_CAPTION ) ; } } ; } else { if ( value ) { SetWindowStyle ( Child.Handle , GetWindowStyle ( Child.Handle ) | WindowStyles.WS_CAPTION ) ; } else { SetWindowStyle ( Child.Handle , GetWindowStyle ( Child.Handle ) & ~WindowStyles.WS_CAPTION ) ; } } } } protected override HandleRef BuildWindowCore ( HandleRef hwndParent ) { CheckChildValidity ( ) ; HandleRef childHwnd = new HandleRef ( Child , child.Handle ) ; SetWindowStyle ( childHwnd.Handle , WindowStyles.WS_CHILD | GetWindowStyle ( childHwnd.Handle ) ) ; WindowsFormsHost.EnableWindowsFormsInterop ( ) ; System.Windows.Forms.Application.EnableVisualStyles ( ) ; SetParent ( childHwnd.Handle , hwndParent.Handle ) ; return childHwnd ; } } < Window x : Class= '' WinFormsHost '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : wf= '' clr-namespace : System.Windows.Forms ; assembly=System.Windows.Forms '' xmlns : cc= '' clr-namespace : XTime.Shell.WinformsHost '' Title= '' Hosting Form In WPF '' > < cc : WinFormsHost ShowCaption= '' False '' > < wf : Form/ > < /cc : WinFormsHost > < /Window >"
"colorList = new List < System.Drawing.Pen > ( ) ; foreach ( var field in typeof ( System.Drawing.Color ) .GetFields ( ) ) { if ( field.FieldType.Name == `` Color '' & & field.Name ! = null ) { colorList.Add ( new System.Drawing.Pen ( field , ( float ) 1 ) ) ; } }"
"type UserId = InthasAccess : : UserId - > BoolhasAccess id = { -- stuff -- } -- Elsewhere in the programlogin : : Int - > Boollogin n = hasAccess n -- Typechecker wo n't complain newtype UserId = UserId InthasAccess : : UserId - > BoolhasAccess ( UserId id ) = { -- stuff -- } -- Elsewhere in the programlogin : : Int - > Boollogin n = hasAccess n -- Typechecker will complain , n is n't a UserId ! using UserId = Int ; // Something like this ? using Int.UserId ; /* Elsewhere */var id = new UserId ( 5 ) ; public bool HasAccess ( UserId id ) { /* Stuff */ }"
public class Attributes { public async Task Run ( ) { await TestAsync ( ) ; await Test ( ) ; } [ DebuggerHidden ] [ DebuggerStepThrough ] public async Task TestAsync ( ) { try { throw new Exception ( `` Async '' ) ; } catch { } await Task.Delay ( 100 ) ; } [ DebuggerHidden ] [ DebuggerStepThrough ] public Task Test ( ) { try { throw new Exception ( `` sync '' ) ; } catch { } return Task.Delay ( 100 ) ; } }
class Student : IPersonalDetails : IOtherDetails { //Code }
"private InstrumentInfo [ ] instrumentInfos = new InstrumentInfo [ Constants.MAX_INSTRUMENTS_NUMBER_IN_SYSTEM ] ; public void SetInstrumentInfo ( Instrument instrument , InstrumentInfo info ) { if ( instrument == null || info == null ) { return ; } instrumentInfos [ instrument.Id ] = info ; // need to make it visible to other threads ! } public InstrumentInfo GetInstrumentInfo ( Instrument instrument ) { return instrumentInfos [ instrument.Id ] ; // need to obtain fresh value ! } public void SetInstrumentInfo ( Instrument instrument , InstrumentInfo info ) { if ( instrument == null || info == null ) { return ; } Volatile.Write ( ref instrumentInfos [ instrument.Id ] , info ) ; } public InstrumentInfo GetInstrumentInfo ( Instrument instrument ) { InstrumentInfo result = Volatile.Read ( ref instrumentInfos [ instrument.Id ] ) ; return result ; }"
"/// < summary > /// Gets a unique identifier string of for the worksheet in the format [ WorkbookName ] WorksheetName /// < /summary > /// < param name= '' workbook '' > The workbook. < /param > /// < param name= '' worksheet '' > The worksheet. < /param > /// < returns > /// A unique worksheet identifier string , or an empty string . /// < /returns > public static string GetWorksheetUniqueIdentifier ( Workbook workbook , dynamic worksheet ) { if ( workbook == null ) return string.Empty ; if ( worksheet == null ) return string.Empty ; //Note : Worksheet can also be a diagram ! return string.Format ( `` [ { 0 } ] { 1 } '' , workbook.Name , worksheet.Name ) ; } System.OutOfMemoryException at System.Collections.Generic.Dictionary ` 2.Resize ( ) at System.Collections.Generic.Dictionary ` 2.Insert ( TKey key , TValue value , Boolean add ) at Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL.InsertChildNoGrow ( Symbol child ) at Microsoft.CSharp.RuntimeBinder.Semantics.SymFactoryBase.newBasicSym ( SYMKIND kind , Name name , ParentSymbol parent ) at Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory.CreateLocalVar ( Name name , ParentSymbol parent , CType type ) at Microsoft.CSharp.RuntimeBinder.RuntimeBinder.PopulateLocalScope ( DynamicMetaObjectBinder payload , Scope pScope , ArgumentObject [ ] arguments , IEnumerable ` 1 parameterExpressions , Dictionary ` 2 dictionary ) at Microsoft.CSharp.RuntimeBinder.RuntimeBinder.BindCore ( DynamicMetaObjectBinder payload , IEnumerable ` 1 parameters , DynamicMetaObject [ ] args , DynamicMetaObject & deferredBinding ) at Microsoft.CSharp.RuntimeBinder.RuntimeBinder.Bind ( DynamicMetaObjectBinder payload , IEnumerable ` 1 parameters , DynamicMetaObject [ ] args , DynamicMetaObject & deferredBinding ) at Microsoft.CSharp.RuntimeBinder.BinderHelper.Bind ( DynamicMetaObjectBinder action , RuntimeBinder binder , IEnumerable ` 1 args , IEnumerable ` 1 arginfos , DynamicMetaObject onBindingError ) at Microsoft.CSharp.RuntimeBinder.CSharpInvokeMemberBinder.FallbackInvokeMember ( DynamicMetaObject target , DynamicMetaObject [ ] args , DynamicMetaObject errorSuggestion ) at System.Dynamic.DynamicMetaObject.BindInvokeMember ( InvokeMemberBinder binder , DynamicMetaObject [ ] args ) at System.Dynamic.InvokeMemberBinder.Bind ( DynamicMetaObject target , DynamicMetaObject [ ] args ) at System.Dynamic.DynamicMetaObjectBinder.Bind ( Object [ ] args , ReadOnlyCollection ` 1 parameters , LabelTarget returnLabel ) at System.Runtime.CompilerServices.CallSiteBinder.BindCore [ T ] ( CallSite ` 1 site , Object [ ] args ) at System.Dynamic.UpdateDelegates.UpdateAndExecute3 [ T0 , T1 , T2 , TRet ] ( CallSite site , T0 arg0 , T1 arg1 , T2 arg2 ) at CallSite.Target ( Closure , CallSite , Object , Object ) at TestAddIn.ExcelAccessor.GetWorksheetUniqueIdentifier ( Workbook workbook , Object worksheet ) at TestAddIn.ExcelAccessor.GetCurrentWorksheetUniqueIdentifier ( ) at TestAddIn.ExcelAccessor.timerExcelObserver_Tick ( Object sender , EventArgs e ) -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- private static Timer timerExcelObserver = new Timer ( ) ; ... timerExcelObserver.Tick += new EventHandler ( this.timerExcelObserver_Tick ) ; timerExcelObserver.Interval = 1000 ; timerExcelObserver.Start ( ) ; ... private void timerExcelObserver_Tick ( object sender , EventArgs e ) { ... var updatedWorksheetIdentifierString = GetCurrentWorksheetUniqueIdentifier ( ) ; ... } public static string GetCurrentWorksheetUniqueIdentifier ( ) { return GetWorksheetUniqueIdentifier ( ExcelApplication.ActiveWorkbook , ExcelApplication.ActiveSheet ) ; } using ( worksheet ) { return string.Format ( `` [ { 0 } ] { 1 } '' , workbook.Name , worksheet.Name ) ; }"
class Test { public struct Data { public int _loop ; } public static Data data ; public static void Main ( ) { data._loop = 1 ; Test test1 = new Test ( ) ; new Thread ( ( ) = > { data._loop = 0 ; } ) .Start ( ) ; do { if ( data._loop ! = 1 ) { break ; } //Thread.Yield ( ) ; } while ( true ) ; // will never terminate } } L_0038 : ldsflda valuetype ConsoleApplication1.Test/Data ConsoleApplication1.Test : :dataL_003d : ldfld int32 ConsoleApplication1.Test/Data : :_loopL_0042 : ldc.i4.1 L_0043 : beq.s L_0038L_0045 : ret L_0038 : ldsflda valuetype ConsoleApplication1.Test/Data ConsoleApplication1.Test : :dataL_003d : ldfld int32 ConsoleApplication1.Test/Data : :_loopL_0042 : ldc.i4.1 L_0043 : beq.s L_0046L_0045 : ret L_0046 : call bool [ mscorlib ] System.Threading.Thread : :Yield ( ) L_004b : pop L_004c : br.s L_0038
public struct Apple { readonly int value ; // Add constructor + operator overloads } public struct Orange { readonly int value ; // Add constructor + operator overloads }
"//Code to create the script for emailstring emailJS = `` '' ; emailJS += `` window.open ( 'mailto : testmail @ gmail.com ? body=Test Mail '' + `` & attachment= '' + emailAttachment + `` ' ) ; '' ; //Register the script for post backClientScript.RegisterStartupScript ( this.GetType ( ) , `` mailTo '' , emailJS , true ) ; ClientScript.RegisterStartupScript ( this.GetType ( ) , `` newWindow '' , `` window.open ( '/Web/Temp/123.pdf ' ) ; '' , true ) ; string emailJS = `` '' ; emailJS += @ '' window.open ( 'mailto : jitendragarg @ gmail.com ? body=Test Mail '' + emailAttachment + @ '' & attachment= '' ; emailJS += @ '' '' '' D : \Dev\CSMS\CSMSWeb\Temp\635966781817446275.Pdf '' '' ' ) ; '' ; //emailJS += Server.MapPath ( emailAttachment ) + @ '' ' ) ; '' ; //Register the script for post backClientScript.RegisterStartupScript ( this.GetType ( ) , `` mailTo '' , emailJS , true ) ; emailJS += @ '' mailto : testmail @ gmail.com ? body=Test Mail '' + @ '' & attachment= '' ; emailJS += @ '' \\localhost\CSMSWeb\Temp\635966781817446275.Pdf '' ; //emailJS += Server.MapPath ( emailAttachment ) + @ '' ' ) ; '' ; Process.Start ( emailJS ) ;"
"public static List < string > GetCharacters ( string text ) { char [ ] ca = text.ToCharArray ( ) ; List < string > characters = new List < string > ( ) ; for ( int i = 0 ; i < ca.Length ; i++ ) { char c = ca [ i ] ; if ( c > ‭65535‬ ) continue ; if ( char.IsHighSurrogate ( c ) ) { i++ ; characters.Add ( new string ( new [ ] { c , ca [ i ] } ) ) ; } else characters.Add ( new string ( new [ ] { c } ) ) ; } return characters ; }"
"ReferenceEquals ( x , null ) x is null"
< PropertyGroup Condition= '' ' $ ( Configuration ) ' == 'Debug ' `` > < AssemblyName > someApplicationTest < /AssemblyName > < ProductName > Some Application Test < /ProductName > < PublishUrl > c : \publish\someApplicationTest\ < /PublishUrl > < InstallUrl > http : //sub.example.com/someApplicationTest/ < /InstallUrl > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) ' == 'Release ' `` > < AssemblyName > someApplication < /AssemblyName > < ProductName > Some Application < /ProductName > < PublishUrl > c : \publish\someApplication\ < /PublishUrl > < InstallUrl > http : //sub.example.com/someApplication/ < /InstallUrl > < /PropertyGroup >
"GetNormalizedRoleNameAsync ( TRole , CancellationToken ) SetNormalizedRoleNameAsync ( TRole , String , CancellationToken ) GetNormalizedUserNameAsync ( TUser , CancellationToken ) SetNormalizedUserNameAsync ( TUser , String , CancellationToken ) GetUserNameAsync ( TUser , CancellationToken ) SetUserNameAsync ( TUser , String , CancellationToken ) public Task SetNormalizedUserNameAsync ( ApplicationUser user , string normalizedName , CancellationToken cancellationToken ) { cancellationToken.ThrowIfCancellationRequested ( ) ; if ( user == null ) throw new ArgumentNullException ( nameof ( user ) ) ; if ( normalizedName == null ) throw new ArgumentNullException ( nameof ( normalizedName ) ) ; user.NormalizedUserName = normalizedName ; return Task.FromResult < object > ( null ) ; } public Task < string > GetUserNameAsync ( ApplicationUser user , CancellationToken cancellationToken ) { cancellationToken.ThrowIfCancellationRequested ( ) ; if ( user == null ) throw new ArgumentNullException ( nameof ( user ) ) ; return Task.FromResult ( user.UserName ) ; }"
"private readonly ReactiveList < Item > _list = new ReactiveList < Item > ( ) ; private decimal _sum ; public decimal Sum { get { return _sum ; } set { this.RaiseAndSetIfChanged ( ref _sum , value ) ; } } _list .Changed .Select ( _ = > _list.Select ( i = > i.Value ) .Sum ( ) ) .ToProperty ( this , x = > x.Sum )"
using System ; class Base { public virtual void Foo ( int x ) { Console.WriteLine ( `` Base.Foo ( int ) '' ) ; } } class Derived : Base { public override void Foo ( int x ) { Console.WriteLine ( `` Derived.Foo ( int ) '' ) ; } public void Foo ( object o ) { Console.WriteLine ( `` Derived.Foo ( object ) '' ) ; } } public class Program { public static void Main ( ) { Derived d = new Derived ( ) ; int i = 10 ; d.Foo ( i ) ; } } Derived.Foo ( object )
"{ success : true , Data : [ { id:1 , name : '' Paul '' } , { id:2 , name : '' neville '' } , { id:3 , name : '' jason '' } ] } public class User { public int id { get ; set ; } public string name { get ; set ; } } public class ApiResponse { public bool success { get ; set ; } public List < User > Data { get ; set ; } } { success : true , Data : { id:1 , classSize:30 , minAge:25 , maxAge:65 } } public class AgeClass { public int id { get ; set ; } public int classSize { get ; set ; } public int minAge { get ; set ; } public int maxAge { get ; set ; } } public class ApiResponse { public bool success { get ; set ; } public AgeClass Data { get ; set ; } }"
public class Foo { public Foo ( ) { } public int MyInt { get ; set ; } = 10 ; public List < int > MyList { get ; set ; } = new List < int > ( ) ; } public class Program { static public void Main ( ) { Console.WriteLine ( new Foo ( ) .MyInt ) ; Console.ReadLine ( ) ; } } .method public hidebysig specialname rtspecialname instance void .ctor ( ) cil managed { // Code size 26 ( 0x1a ) .maxstack 8 IL_0000 : ldarg.0 IL_0001 : ldc.i4.s 10 IL_0003 : stfld int32 Foo : : ' < MyInt > k__BackingField ' IL_0008 : ldarg.0 IL_0009 : newobj instance void class [ mscorlib ] System.Collections.Generic.List ` 1 < int32 > : :.ctor ( ) IL_000e : stfld class [ mscorlib ] System.Collections.Generic.List ` 1 < int32 > Foo : : ' < MyList > k__BackingField ' IL_0013 : ldarg.0 IL_0014 : call instance void [ mscorlib ] System.Object : :.ctor ( ) IL_0019 : ret } // end of method Foo : :.ctor
myTextBlock.Foreground = new SolidColorBrush ( ( Color ) Application.Current.Resources [ `` PhoneForegroundColor '' ] ) ;
namespace dispose_test { class Program { static void Main ( string [ ] args ) { using ( var disp = new MyDisposable ( ) ) { throw new Exception ( `` Boom '' ) ; } } } public class MyDisposable : IDisposable { public void Dispose ( ) { Console.WriteLine ( `` Disposed '' ) ; } } }
< appender name= '' RollingLogFileAppender '' type= '' log4net.Appender.RollingFileAppender '' > < file value= '' appname '' / > < appendToFile value= '' true '' / > < rollingStyle value= '' Composite '' / > < datePattern value= '' ' . 'yyyyMMdd'.log ' '' / > < maxSizeRollBackups value= '' 30 '' / > < maximumFileSize value= '' 10MB '' / > < staticLogFileName value= '' false '' / > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % date [ % thread ] % -5level % logger - % message % newline '' / > < /layout > < /appender >
"object.ProgressChanged += new EventHandler < ProgressChangedEventArgs > ( object_ProgressChanged ) object.ProgressChanged += object_ProgressChanged ; void installableObject_InstallProgressChanged ( object sender , ProgressChangedEventArgs e ) { EventHandler < ProgressChangedEventArgs > progress = ProgressChanged ; if ( installing ! = null ) installing ( this , e ) ; }"
"` List < int > list1 = new List < int > { 0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,10 } ; ` ` List < int > list2 = new List < int > { 0,1,1,2,2,2,3,3,4,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,8,8,9,9,9,9,10 } ; ` public bool TestShuffle < T > ( IEnumerable < T > input ) { bool satisfied = true ; int prev1 = 0 ; int prev2 = 0 ; int next1 = 0 ; int next2 = 0 ; int i = 0 ; while ( i < input.Count ( ) & & satisfied ) { prev1 = i - 1 ; prev2 = i - 2 ; next1 = i + 1 ; next2 = i + 2 ; if ( i == 0 ) { prev1 = input.Count ( ) - 1 ; prev2 = prev1 - 1 ; } else if ( i == 1 ) prev2 = input.Count ( ) - 1 ; if ( i == ( input.Count ( ) - 1 ) ) { next1 = 0 ; next2 = 1 ; } if ( i == ( input.Count ( ) - 2 ) ) next2 = 0 ; satisfied = ( ! input.ElementAt ( i ) .Equals ( input.ElementAt ( prev1 ) ) ) & & ( ! input.ElementAt ( i ) .Equals ( input.ElementAt ( prev2 ) ) ) & & ( ! input.ElementAt ( i ) .Equals ( input.ElementAt ( next1 ) ) ) & & ( ! input.ElementAt ( i ) .Equals ( input.ElementAt ( next2 ) ) ) ; if ( satisfied == false ) Console.WriteLine ( `` TestShuffle fails at `` + i ) ; i++ ; } return satisfied ; } List < int > list3 = new List < int > ( ) { 0,1,1,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,8,8,9,9,9,9,10,10 } ;"
"public class Person { public string Name { get ; private set ; } public int Age { get ; private set ; } public Person ( string name , int age ) { Name = name ; Age = age ; } } // We could make this volatile to freshen the read , but I do n't want// to complicate the core of the question.private Person person ; private void Thread1 ( ) { while ( true ) { var personCopy = person ; if ( personCopy ! = null ) Console.WriteLine ( personCopy.Name + `` `` + personCopy.Age ) ; } } private void Thread2 ( ) { var random = new Random ( ) ; while ( true ) { person = random.Next ( 2 ) == 0 ? new Person ( `` John '' , 20 ) : new Person ( `` Jack '' , 21 ) ; } }"
public class Foo { int bar ; // comment } public class Foo { int bar ; // comment }
"SerialPort sp ; public byte [ ] SendCommand ( byte [ ] command ) { //System.Threading.Thread.Sleep ( 100 ) ; lock ( sp ) { Console.Out.WriteLine ( `` ENTER '' ) ; try { string base64 = Convert.ToBase64String ( command ) ; string request = String.Format ( `` { 0 } { 1 } \r '' , target_UID , base64 ) ; Console.Out.Write ( `` Sending request ... { 0 } '' , request ) ; sp.Write ( request ) ; string response ; do { response = sp.ReadLine ( ) ; } while ( response.Contains ( `` QQ== '' ) ) ; Console.Out.Write ( `` Response is : { 0 } '' , response ) ; return Convert.FromBase64String ( response.Substring ( target_UID.Length ) ) ; } catch ( Exception e ) { Console.WriteLine ( `` ERROR ! `` ) ; throw e ; } finally { Console.Out.WriteLine ( `` EXIT '' ) ; } } } ENTERSending request ... C02UgAABAA=Response is : cgAABAAARwAAAA==EXITENTERSending request ... C02UgQARwA=ENTERSending request ... C02UgAABAA=Response is : gQARwAAPHhtbD48bWVzc2FnZT5IZWxsbyBYWDIhPC9tZXNzYWdlPjxkZXN0aW5haXRvbj5NaXNpPC9kZXN0aW5hdGlvbj48L3htbD4="
"class Program { [ return : MarshalAs ( UnmanagedType.Bool ) ] [ DllImport ( `` WindowsAccessBridge-32.dll '' , CallingConvention = CallingConvention.Cdecl ) ] public extern static bool getAccessibleContextFromHWND ( IntPtr hwnd , out Int32 vmID , out Int64 acParent ) ; [ DllImport ( `` WindowsAccessBridge-32.dll '' , CallingConvention = CallingConvention.Cdecl , ThrowOnUnmappableChar = true , CharSet = CharSet.Unicode ) ] private extern static void Windows_run ( ) ; [ DllImport ( `` user32.dll '' , SetLastError = true ) ] static extern IntPtr FindWindow ( string lpClassName , string lpWindowName ) ; static void Main ( string [ ] args ) { Int32 vmID = 0 ; Int64 _acParent =0 ; Windows_run ( ) ; IntPtr hWnd = ( IntPtr ) FindWindow ( `` SunAwtFrame '' , '' Standalone SwingApp '' ) ; bool retVal = getAccessibleContextFromHWND ( hWnd , out vmID , out _acParent ) ; } }"
"public abstract class AbstractConverter < T , U > where U : AbstractConvertible where T : AbstractConverter < T , U > { public abstract T Convert ( U convertible ) ; } public class DerivedConvertibleConverter : AbstractConverter < DerivedConvertibleConverter , DerivedConvertible > { public DerivedConvertibleConverter ( DerivedConvertible convertible ) { Convert ( convertible ) ; } public override DerivedConvertibleConverter Convert ( DerivedConvertible convertible ) { //This will not be called System.Console.WriteLine ( `` Called the most derived method '' ) ; return this ; } public DerivedConvertibleConverter Convert ( Convertible convertible ) { System.Console.WriteLine ( `` Called the least derived method '' ) ; return this ; } } public abstract class AbstractConvertible { } public class Convertible : AbstractConvertible { } public class DerivedConvertible : Convertible { } public abstract class AbstractConverter < U > where U : AbstractConvertible { public abstract AbstractConverter < U > Convert ( U convertible ) ; } public class DerivedConvertibleConverter : AbstractConverter < DerivedConvertible > { public DerivedConvertibleConverter ( DerivedConvertible convertible ) { Convert ( convertible ) ; } public override DerivedConvertibleConverter Convert ( DerivedConvertible convertible ) { System.Console.WriteLine ( `` Called the most derived method '' ) ; return this ; } public DerivedConvertibleConverter Convert ( Convertible convertible ) { System.Console.WriteLine ( `` Called the least derived method '' ) ; return this ; } } public abstract class AbstractConvertible { } public class Convertible : AbstractConvertible { } public class DerivedConvertible : Convertible { }"
"public class A : CriticalFinalizerObject { ~A ( ) { File.WriteAllText ( `` c : \\1.txt '' , `` 1z1z1 '' ) ; } } class Program { static void Main ( string [ ] args ) { A a = new A ( ) ; throw new Exception ( ) ; } }"
"class Test { private static object ms_Lock=new object ( ) ; private static int ms_Sum = 0 ; public static void Main ( ) { Parallel.Invoke ( HalfJob , HalfJob ) ; Console.WriteLine ( ms_Sum ) ; Console.ReadLine ( ) ; } private static void HalfJob ( ) { for ( int i = 0 ; i < 50000000 ; i++ ) { lock ( ms_Lock ) { } // empty lock ms_Sum += 1 ; } } }"
"const int Length = 5 ; const int LowerBound = 1 ; // Instanstiate a non-zero indexed array . The array is one-dimensional and// has size specified by Length and lower bound specified by LowerBound.Array numbers = Array.CreateInstance ( typeof ( double ) , new int [ ] { Length } , new int [ ] { LowerBound } ) ; // Initialize the array.for ( int i = numbers.GetLowerBound ( 0 ) ; i < = numbers.GetUpperBound ( 0 ) ; i++ ) { numbers.SetValue ( i , i ) ; } var variable = LabVIEWExports.Multiply ( numbers , 2 ) ; // This is invalid as numbers is not typed double [ * ] .Console.ReadKey ( ) ; const int Length = 5 ; const int LowerBound = 1 ; const string methodName = `` MultiplyArray '' ; const string path = @ '' C : \ '' ; Array numbers = Array.CreateInstance ( typeof ( double ) , new int [ ] { Length } , new int [ ] { LowerBound } ) ; for ( int i = numbers.GetLowerBound ( 0 ) ; i < = numbers.GetUpperBound ( 0 ) ; i++ ) { numbers.SetValue ( i , i ) ; } Assembly asm = Assembly.LoadFile ( path + `` LabVIEW.Interop.dll '' ) ; Type type = asm.GetType ( `` LabVIEW.Interop.LabVIEWInteropExports '' ) ; if ( type ! = null ) { MethodInfo methodInfo = type.GetMethod ( methodName ) ; if ( methodInfo ! = null ) { object result = methodInfo.Invoke ( methodInfo , new object [ ] { array , multiplicand } ) ; // Throw exception . } } Console.ReadKey ( ) ;"
"public class JobService { IRepository < Job > _repository ; public JobService ( IRepository < Job > repository ) { _repository = repository ; } public Job GetJob ( int jobID ) { return _repository.Get ( x = > x.JobID == jobID ) .FirstOrDefault ( ) ; } public IEnumerable < Job > Get ( Expression < Func < Job , bool > > predicate ) { return _repository.Get ( predicate ) ; } } JobService jobService = new JobService ( new Repository < Job > ( ) ) ; Job job = jobService.Get ( x = > x.JobID == 1 ) .FirstOrDefault ( ) ;"
"DbSyncScopeDescription scopeDesc = new DbSyncScopeDescription ( `` MyScope '' ) ; SqlCeConnection clientConn = new SqlCeConnection ( OfflineConnectionString ) ; var clientProvision = new SqlCeSyncScopeProvisioning ( clientConn , scopeDesc ) ; clientProvision.Apply ( ) ;"
"XSSFWorkbook wb ; var fileName = `` C : /tmp/myfile.xlsx '' ; var outputFileName = `` C : /tmp/myoutputfile.xlsx '' ; using ( var file = new FileStream ( fileName , FileMode.Open , FileAccess.ReadWrite ) ) { wb = new XSSFWorkbook ( file ) ; } XSSFSheet sheet = ( XSSFSheet ) wb.GetSheetAt ( 0 ) ; for ( int i = 0 ; i < accountRecs.Count ( ) ; ++i ) { var rec = accountRecs [ i ] ; var row = sheet.CreateRow ( i ) ; var dateCell = row.CreateCell ( 3 ) ; dateCell.SetCellValue ( rec.Date ) ; dateCell.CellStyle.DataFormat = wb.CreateDataFormat ( ) .GetFormat ( `` dd/MM/yyyy '' ) ; var accountCell = row.CreateCell ( 4 ) ; accountCell.SetCellValue ( rec.Account ) ; var totalValueCell = row.CreateCell ( 16 ) ; totalValueCell.SetCellValue ( rec.Amount ) ; totalValueCell.CellStyle.DataFormat = wb.CreateDataFormat ( ) .GetFormat ( `` # .00 '' ) ; } using ( var file = new FileStream ( outputFileName , FileMode.Create , FileAccess.Write ) ) { wb.Write ( file ) ; file.Close ( ) ; }"
Something += new MyHandler ( HandleSomething ) ; // addSomething -= new MyHandler ( HandleSomething ) ; // remove
"public class Startup { private readonly IWebHostEnvironment _webHostEnvironment ; public Startup ( IWebHostEnvironment webHostEnvironment ) { _webHostEnvironment = webHostEnvironment ; } public void ConfigureServices ( IServiceCollection services ) { services.AddSpaStaticFiles ( options = > { options.RootPath = `` wwwroot '' ; } ) ; services.AddControllers ( ) ; } public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { app.UseDefaultFiles ( ) ; app.UseSpaStaticFiles ( ) ; app.UseCors ( ) ; app.UseSwagger ( ) ; app.UseSwaggerUI ( c = > { /* ... */ } ) ; app.UseRouting ( ) ; app.UseEndpoints ( endpoints = > { endpoints.MapControllers ( ) ; } ) ; } }"
"< asp : ScriptManager EnablePartialRendering= '' true '' ID= '' ScriptManager1 '' runat= '' server '' > < /asp : ScriptManager > < asp : UpdatePanel ID= '' UpdatePanel1 '' runat= '' server '' UpdateMode= '' Conditional '' ChildrenAsTriggers = '' True '' > < ContentTemplate > < asp : DataGrid ID= '' grdJobs '' runat= '' server '' AllowPaging= '' true '' AlternatingItemStyle-CssClass= '' gridAltItemStyle '' AutoGenerateColumns= '' False '' CellPadding= '' 0 '' DataKeyField= '' code '' CssClass= '' datagridBox '' GridLines= '' horizontal '' PagerStyle-Mode= '' NumericPages '' HeaderStyle-CssClass= '' gridHeaderStyle '' ItemStyle-CssClass= '' gridItemStyle '' PagerStyle-CssClass= '' gridPagerStyle '' Width= '' 445px '' OnPageIndexChanged= '' grdJobs_PageIndexChanged '' OnItemCreated= '' grdJobs_ItemCreated '' OnItemCommand= '' grdJobs_ItemCommand '' OnItemDataBound= '' grdJobs_ItemDataBound '' > < Columns > < asp : BoundColumn DataField= '' J_ID '' HeaderText= '' Job '' > < /asp : BoundColumn > < asp : BoundColumn DataField= '' Contract '' HeaderText= '' Contract '' ReadOnly= '' True '' > < /asp : BoundColumn > < asp : BoundColumn DataField= '' J_Fault_Line1 '' HeaderText= '' Fault '' ReadOnly= '' True '' > < /asp : BoundColumn > < asp : BoundColumn DataField= '' j_p_id '' HeaderText= '' Fault '' Visible= '' false '' > < /asp : BoundColumn > < asp : ButtonColumn Text= '' < img src=images/addFeedback.gif style=border : 0px ; alt=Add Feedback > '' ButtonType= '' LinkButton '' HeaderText= '' Add '' CommandName= '' Load '' ItemStyle-cssClass= '' Col_9_Item_2 '' > < /asp : ButtonColumn > < /Columns > < /asp : DataGrid > < asp : ImageButton ID= '' cmdLkp '' ImageUrl= '' Images/search.gif '' runat= '' server '' OnClick= '' cmdLkp_Click '' / > < /ContentTemplate > < /asp : UpdatePanel > protected void grdJobs_ItemCommand ( object source , DataGridCommandEventArgs e ) { if ( e.CommandName == `` Load '' ) { functionToBindDataToGrid2 ( ) ; functionToBindDataToOtherControls ( ) ; } } protected void grdJobs_ItemDataBound ( object sender , DataGridItemEventArgs e ) { e.Item.Attributes.Add ( `` onclick '' , `` javascript : __doPostBack ( 'grdJobs $ ctl '' + ( ( Convert.ToInt32 ( e.Item.ItemIndex + 3 ) .ToString ( `` 00 '' ) ) ) + `` $ ctl00 ' , '' ) '' ) ; }"
var variableDeclaration ; try { ... assignment ... } catch ...
"public class GetPostsRequest : IRequest < Envelope < GetPostsResponse > > { public Int32 Age { get ; set ; } } public class GetPostResponse { public String Title { get ; set ; } public String Content { get ; set ; } } public class Envelope < T > { public List < T > Result { get ; private set ; } = new List < T > ( ) ; public List < Error > Errors { get ; private set ; } = new List < Error > ( ) ; } public class GetPostsRequestHandler : IRequestHandler < GetPostsRequest , Envelope < GetPostsResponse > > { public async Task < Envelope < GetPostsResponse > > Handle ( GetPostsRequest request , CancellationToken cancellationToken ) { } } public class ValidationBehavior < TRequest , TResponse > : IPipelineBehavior < TRequest , Envelope < TResponse > > where TRequest : IRequest < Envelope < TResponse > > { private readonly IEnumerable < IValidator < TRequest > > _validators ; public ValidationBehavior ( IEnumerable < IValidator < TRequest > > validators ) { _validators = validators ; } public Task < Envelope < TResponse > > Handle ( TRequest request , CancellationToken cancellationToken , RequestHandlerDelegate < Envelope < TResponse > > next ) { ValidationContext context = new ValidationContext ( request ) ; List < Error > errors = _validators .Select ( x = > x.Validate ( context ) ) .SelectMany ( x = > x.Errors ) .Select ( x = > new Error ( ErrorCode.DataNotValid , x.ErrorMessage , x.PropertyName ) ) .ToList ( ) ; if ( errors.Any ( ) ) return Task.FromResult < Envelope < TResponse > > ( new Envelope < TResponse > ( errors ) ) ; return next ( ) ; } } services.AddScoped ( typeof ( IPipelineBehavior < , > ) , typeof ( ValidationBehavior < , > ) ) ; An unhandled exception has occurred while executing the request.System.ArgumentException : GenericArguments [ 0 ] , 'TRequest ' , on 'ValidationBehavior ` 2 [ TRequest , TResponse ] ' violates the constraint of type 'TRequest ' . -- - > System.TypeLoadException : GenericArguments [ 0 ] , 'TRequest ' , on 'ValidationBehavior ` 2 [ TRequest , TResponse ] ' violates the constraint of type parameter 'TRequest ' ."
br IL_0003call *****IL_0003 : ret
"_client = WebHost < Startup > .GetFactory ( ) .CreateClient ( ) ; var baseUri = PathString.FromUriComponent ( _client.BaseAddress ) ; _url = baseUri.Value ; _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ( `` Bearer '' , `` Y2E890F4-E9AE-468D-8294-6164C59B099Y '' ) ;"
public delegate void ProducerMessageHandler ( Message objMessage ) ; public class Producer : IDisposable { public void Start ( ) ; public void Attach ( ProducerMessageHandler fnHandler ) ; public void Dispose ( ) ; }
"public class MyCustomObject { public string Name { get ; set ; } public DateTime Date { get ; set ; } public List < HttpPostedFileBase > Files { get ; set ; } public MyCustomObject ( ) { Files = new List < HttpPostedFileBase > ( ) ; } } public class HttpPostedFileConverter : JsonConverter { public override void WriteJson ( JsonWriter writer , object value , JsonSerializer serializer ) { var stream = ( Stream ) value ; using ( var sr = new BinaryReader ( stream ) ) { var buffer = sr.ReadBytes ( ( int ) stream.Length ) ; writer.WriteValue ( Convert.ToBase64String ( buffer ) ) ; } } var settings = new JsonSerializerSettings ( ) ; settings.Converters.Add ( new HttpPostedFileConverter ( ) ) ; settings.TypeNameHandling = TypeNameHandling.Objects ; JsonSerializationException Error converting value `` /9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDA { `` $ type '' : `` ConsoleApplication1.MyCustomObject , ConsoleApplication1 '' , `` Name '' : `` Test2 '' , `` Date '' : `` 2016-11-03T12:35:14.6020154+01:00 '' , `` Files '' : [ { `` $ type '' : `` System.Web.HttpPostedFileWrapper , System.Web '' , `` ContentLength '' : 1024 , `` FileName '' : `` Pannigale.jpg '' , `` ContentType '' : `` image/jpg '' , `` InputStream '' : `` /9j/4AAQ ... KKAP//Z '' } ] } public class TestHttpFile : HttpPostedFileBase { string fullFileName = @ '' C : \Pictures\SBK-1299-Panigale-S_2015_Studio_R_B01_1920x1080.mediagallery_output_image_ [ 1920x1080 ] .jpg '' ; public override int ContentLength { get { return 1024 ; } } public override string FileName { get { return `` Pannigale.jpg '' ; } } public override string ContentType { get { return `` image/jpg '' ; } } public override Stream InputStream { get { return File.OpenRead ( fullFileName ) ; } } } `` $ type '' : `` ConsoleApplication1.TestHttpFile , ConsoleApplication1 '' , `` $ type '' : `` System.Web.HttpPostedFileWrapper , System.Web '' ,"
"bool MyFunc ( string input ) { return false ; } var strings = new [ ] { `` aaa '' , `` 123 '' } ; var b = strings.Select ( MyFunc ) ; var c = strings.Select ( elem = > MyFunc ( elem ) ) ; Select ( this IEnumerable < string > , Func < string , TResult > ) Select ( this IEnumerable < string > , Func < string , int , TResult > )"
< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < nlog xmlns= '' http : //www.nlog-project.org/schemas/NLog.xsd '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' > < targets async= '' true '' > < target xsi : type= '' File '' name= '' ExceptionTarget '' fileName= '' LOG.txt '' layout= '' $ { date : format=dd MMM yyyy HH-mm-ss } $ { uppercase : $ { level } } $ { newline } $ { message } $ { exception : :maxInnerExceptionLevel=5 : format=ToString } $ { newline } $ { stacktrace } $ { newline } '' / > < /targets > < targets async= '' true '' > < target xsi : type= '' File '' name= '' InfoTarget '' fileName= '' LOG.txt '' layout= '' $ { date : format=mm-ss } $ { uppercase : $ { level } } $ { newline } $ { message } $ { newline } '' / > < /targets > < rules > < logger name= '' * '' level= '' Error '' writeTo= '' ExceptionTarget '' / > < logger name= '' * '' level= '' Info '' writeTo= '' InfoTarget '' / > < /rules > < /nlog >
public class Dog { public Dog ( int age ) { this.Age = age ; } public int Age { get ; } } public class Dog { public int Age { get ; set ; } }
int Platypus ; string duckBill1 ; string duckBill2 ; string duckBill3 ; . . .using ( OracleDataReader odr = ocmd.ExecuteReader ( ) ) { while ( odr.Read ( ) ) { Platypus = odr.GetInt32 ( `` Platypus '' ) ; duckBill1 = odr.GetString ( `` duckBill1 '' ) ; duckBill2 = odr.GetString ( `` duckBill2 '' ) ; duckBill3 = odr.GetString ( `` duckBill3 '' ) ; switch ( Platypus ) { . . . using ( OracleDataReader odr = ocmd.ExecuteReader ( ) ) { while ( odr.Read ( ) ) { int Platypus = odr.GetInt32 ( `` Platypus '' ) ; string duckBill1 = odr.GetString ( `` duckBill1 '' ) ; string duckBill2 = odr.GetString ( `` duckBill2 '' ) ; string duckBill3 = odr.GetString ( `` duckBill3 '' ) ; switch ( Platypus ) { . . .
"public static MvcHtmlString EditorForMany < TModel , TValue > ( this HtmlHelper < TModel > html , Expression < Func < TModel , IEnumerable < TValue > > > expression , string htmlFieldName = null ) where TModel : class { var items = expression.Compile ( ) ( html.ViewData.Model ) ; var sb = new StringBuilder ( ) ; if ( String.IsNullOrEmpty ( htmlFieldName ) ) { var prefix = html.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix ; htmlFieldName = ( prefix.Length > 0 ? ( prefix + `` . '' ) : String.Empty ) + ExpressionHelper.GetExpressionText ( expression ) ; } foreach ( var item in items ) { var dummy = new { Item = item } ; var guid = Guid.NewGuid ( ) .ToString ( ) ; var memberExp = Expression.MakeMemberAccess ( Expression.Constant ( dummy ) , dummy.GetType ( ) .GetProperty ( `` Item '' ) ) ; var singleItemExp = Expression.Lambda < Func < TModel , TValue > > ( memberExp , expression.Parameters ) ; sb.Append ( String.Format ( @ '' < input type= '' '' hidden '' '' name= '' '' { 0 } .Index '' '' value= '' '' { 1 } '' '' / > '' , htmlFieldName , guid ) ) ; sb.Append ( html.EditorFor ( singleItemExp , null , String.Format ( `` { 0 } [ { 1 } ] '' , htmlFieldName , guid ) ) ) ; } return new MvcHtmlString ( sb.ToString ( ) ) ; } public class HomeController : Controller { [ HttpGet ] public ActionResult Index ( ) { var model = new Race ( ) ; //start with one already filled in model.HorsesInRace.Add ( new Horse ( ) { Name = `` Scooby '' , Age = 10 } ) ; return View ( model ) ; } [ HttpPost ] public ActionResult Index ( Race postedModel ) { if ( ModelState.IsValid ) //model is valid , redirect to another page return RedirectToAction ( `` ViewHorseListing '' ) ; else //model is not valid , show the page again with validation errors return View ( postedModel ) ; } [ HttpGet ] public ActionResult AjaxMakeHorseEntry ( ) { //new blank horse for ajax call var model = new List < Horse > ( ) { new Horse ( ) } ; return PartialView ( model ) ; } } public class Race { public Race ( ) { HorsesInRace = new List < Horse > ( ) ; } [ Display ( Name = `` Race Name '' ) , Required ] public string RaceName { get ; set ; } [ Display ( Name = `` Horses In Race '' ) ] public List < Horse > HorsesInRace { get ; set ; } } public class Horse { [ Display ( Name = `` Horse 's Name '' ) , Required ] public string Name { get ; set ; } [ Display ( Name = `` Horse 's Age '' ) , Required ] public int Age { get ; set ; } } @ model CollectionAjaxPosting.Models.Race < h1 > Race Details < /h1 > @ using ( Html.BeginForm ( ) ) { @ Html.ValidationSummary ( ) < hr / > < div > @ Html.DisplayNameFor ( x = > x.RaceName ) @ Html.EditorFor ( x = > x.RaceName ) @ Html.ValidationMessageFor ( x = > x.RaceName ) < /div > < hr / > < div id= '' horse-listing '' > @ Html.EditorForMany ( x = > x.HorsesInRace ) < /div > < button id= '' btn-add-horse '' type= '' button '' > Add New Horse < /button > < input type= '' submit '' value= '' Enter Horses '' / > } < script type= '' text/javascript '' > $ ( document ) .ready ( function ( ) { //add button logic $ ( ' # btn-add-horse ' ) .click ( function ( ) { $ .ajax ( { url : ' @ Url.Action ( `` AjaxMakeHorseEntry '' ) ' , cache : false , method : 'GET ' , success : function ( html ) { $ ( ' # horse-listing ' ) .append ( html ) ; } } ) } ) ; //delete-horse buttons $ ( ' # horse-listing ' ) .on ( 'click ' , 'button.delete-horse ' , function ( ) { var horseEntryToRemove = $ ( this ) .closest ( 'div.horse ' ) ; horseEntryToRemove.prev ( 'input [ type=hidden ] ' ) .remove ( ) ; horseEntryToRemove.remove ( ) ; } ) ; } ) ; < /script > @ model CollectionAjaxPosting.Models.Horse < div class= '' horse '' > < div > @ Html.DisplayNameFor ( x = > x.Name ) @ Html.EditorFor ( x = > x.Name ) @ Html.ValidationMessageFor ( x = > x.Name ) < /div > < div > @ Html.DisplayNameFor ( x = > x.Age ) @ Html.EditorFor ( x = > x.Age ) @ Html.ValidationMessageFor ( x = > x.Age ) < /div > < button type= '' button '' class= '' delete-horse '' > Remove Horse < /button > < hr / > < /div > @ model IEnumerable < CollectionAjaxPosting.Models.Horse > @ Html.EditorForMany ( x = > x , `` HorsesInRace '' )"
interface IBar { } class Bar : IBar { } interface IFoo < T > where T : IBar { } class Foo < T > : IFoo < T > where T : IBar { } class Class1 { public void DoTheFoo < T > ( T bar ) where T : IBar { } public void DoTheFoo < T > ( IFoo < T > foo ) where T : IBar { } public void Test ( ) { var bar = new Bar ( ) ; var foo = new Foo < Bar > ( ) ; DoTheFoo ( bar ) ; // works DoTheFoo < Bar > ( foo ) ; // works DoTheFoo ( ( IFoo < Bar > ) foo ) ; // works DoTheFoo ( foo ) ; // complains } }
"public void Foo ( IEnumerable < FogbugzCase > cases ) { // using a singleton for the SqlConnection using ( SqlConnection conn = CreateConnection ( ) ) { foreach ( FogbugzCase fogbugzCase in cases ) { conn.Execute ( `` INSERT INTO fogbugz.Cases ( CaseId , Title , ProjectId , CategoryId , Root , MilestoneId , Priority , Status , EstimatedHours , ElapsedHours , AssignedTo , ResolvedBy , IsResolved , IsOpen , Opened , Resolved , Uri , ResolveUri , OutlineUri , SpecUri , ParentId , Backlog ) VALUES ( @ BugId , @ Title , @ ProjectId , @ CategoryId , @ RootId , @ MilestoneId , @ Priority , @ StatusId , @ EstimatedHours , @ ElapsedHours , @ PersonAssignedToId , @ PersonResolvedById , @ IsResolved , @ IsOpen , @ Opened , @ Resolved , @ Uri , @ ResolveUri , @ OutlineUri , @ Spec , @ ParentId , @ Backlog ) ; '' , new { BugId = fogbugzCase.BugId , Title = fogbugzCase.Title , ProjectId = fogbugzCase.Project.Id , CategoryId = fogbugzCase.Category.Id , RootId = fogbugzCase.Root , MilestoneId = fogbugzCase.Milestone.Id , Priority = fogbugzCase.Priority , StatusId = fogbugzCase.Status.Id , EstimatedHours = fogbugzCase.EstimatedHours , ElapsedHours = fogbugzCase.ElapsedHours , PersonAssignedToId = fogbugzCase.PersonAssignedTo.Id , PersonResolvedById = fogbugzCase.PersonResolvedBy.Id , IsResolved = fogbugzCase.IsResolved , IsOpen = fogbugzCase.IsOpen , Opened = fogbugzCase.Opened , Resolved = fogbugzCase.Resolved , Uri = fogbugzCase.Uri , OutlineUri = fogbugzCase.OutlineUri , Spec = fogbugzCase.Spec , ParentId = fogbugzCase.ParentId , Backlog = fogbugzCase.Backlog } ) ; } } }"
"private static void RunClientWorse ( ConcurrentBag < double > cb ) { var client = new CalculatorClient ( ) ; client.Endpoint.Address = new EndpointAddress ( `` net.tcp : //localhost:8000/ServiceModelSamples/service '' ) ; RunClientCommon ( cb , client ) ; } private static void RunClientBetter ( ConcurrentBag < double > cb ) { using ( var client = new CalculatorClient ( ) ) { client.Endpoint.Address = new EndpointAddress ( `` net.tcp : //localhost:8000/ServiceModelSamples/service '' ) ; RunClientCommon ( cb , client ) ; } } private static void RunClientBest ( ConcurrentBag < double > cb ) { const string Uri = `` net.tcp : //localhost:8000/ServiceModelSamples/service '' ; var address = new EndpointAddress ( Uri ) ; //var binding = new NetTcpBinding ( `` netTcpBinding_ICalculator '' ) ; using ( var factory = new ChannelFactory < ICalculator > ( `` netTcpBinding_ICalculator '' , address ) ) { ICalculator client = factory.CreateChannel ( ) ; ( ( IContextChannel ) client ) .OperationTimeout = TimeSpan.FromSeconds ( 60 ) ; RunClientCommon ( cb , client ) ; } } private static void RunClientBestExt ( ConcurrentBag < double > cb ) { const string Uri = `` net.tcp : //localhost:8000/ServiceModelSamples/service '' ; var address = new EndpointAddress ( Uri ) ; //var binding = new NetTcpBinding ( `` netTcpBinding_ICalculator '' ) ; new ChannelFactory < ICalculator > ( `` netTcpBinding_ICalculator '' , address ) .Using ( factory = > { ICalculator client = factory.CreateChannel ( ) ; ( ( IContextChannel ) client ) .OperationTimeout = TimeSpan.FromSeconds ( 60 ) ; RunClientCommon ( cb , client ) ; } ) ; }"
[ TestMethod ] [ TestMethod ( ) ]
"using System ; public class Program { public static void Main ( ) { Console.WriteLine ( `` Why Soo serious ! ! ! ! `` ) ; } } { `` dependencies '' : { `` System.Console '' : `` 4.0.0.0 '' } , `` configurations '' : { `` net45 '' : { } , `` k10 '' : { } } }"
"public MainWindow ( ) { InitializeComponent ( ) ; var leftButtonDown = Observable.FromEvent < MouseButtonEventArgs > ( this , `` MouseLeftButtonDown '' ) ; var leftButtonUp = Observable.FromEvent < MouseButtonEventArgs > ( this , `` MouseLeftButtonUp '' ) ; var moveEvents = Observable.FromEvent < MouseEventArgs > ( this , `` MouseMove '' ) .SkipUntil ( leftButtonDown ) .SkipUntil ( leftButtonUp ) .Repeat ( ) .Select ( t = > t.EventArgs.GetPosition ( this ) ) ; moveEvents.Subscribe ( point = > { textBox1.Text = string.Format ( string.Format ( `` X : { 0 } , Y : { 1 } '' , point.X , point.Y ) ) ; } ) ; }"
"public void ConfigureServices ( IServiceCollection services ) { services.AddLocalization ( options = > { options.ResourcesPath = `` Resources '' ; } ) ; services.AddMvc ( options = > { var F = services.BuildServiceProvider ( ) .GetService < IStringLocalizerFactory > ( ) ; var L = F.Create ( `` ModelBindingMessages '' , `` AspNetCoreLocalizationSample '' ) ; options.ModelBindingMessageProvider.ValueIsInvalidAccessor = ( x ) = > L [ `` The value ' { 0 } ' is invalid . `` ] ; // omitted the rest of the snippet } ) }"
foreach ( FixtureImageServicesData image in _fixture.Images ) { if ( image.Filename ! = _selectedFixtureImage.Filename & & image.IsPrimary ) { image.IsPrimary = false ; image.IsChanged = true ; } } _fixture.Images.Where ( x = > x.Filename ! = _selectedFixtureImage.Filename & & x.IsPrimary ) .ForEach ( x = > { x.IsPrimary = false ; x.IsChanged = true ; } ) ;
"var obs = Observable.Range ( 1 , 10 ) .SelectMany ( x = > { return Observable.Interval ( TimeSpan.FromSeconds ( 10 - x ) ) .Take ( 3 ) ; } ) .Concat ( ) ;"
"private DS.Device soundDevice ; private SecondaryBuffer buffer ; private ArrayList soundlist = new ArrayList ( ) ; private void InitializeSound ( ) { soundDevice = new DS.Device ( ) ; soundDevice.SetCooperativeLevel ( this , CooperativeLevel.Priority ) ; BufferDescription description = new BufferDescription ( ) ; description.ControlEffects = false ; buffer = new SecondaryBuffer ( CaptureDeviceName , description , soundDevice ) ; buffer.Play ( 0 , BufferPlayFlags.Default ) ; SecondaryBuffer newshotsound = buffer.Clone ( soundDevice ) ; newshotsound.Play ( 0 , BufferPlayFlags.Default ) ; }"
"xslt.Load ( XmlReader.Create ( new FileStream ( @ '' C : \website\TransList.xslt '' , System.IO.FileMode.Open ) ) ) ; xslt.Transform ( mydoc.CreateReader ( ) , null , sw ) ;"
static void < T > method ( T enum ) where T ? ? ? ? ? { // do something with enum ... }
"int local = shared ; Thread.MemoryBarrier ( ) ; [ MethodImplAttribute ( MethodImplOptions.NoInlining ) ] // disable optimizationspublic static void VolatileWrite ( ref int address , int value ) { MemoryBarrier ( ) ; // Call MemoryBarrier to ensure the proper semantic in a portable way . address = value ; } class Foo { int _answer ; bool complete ; void A ( ) { _answer = 123 ; Thread.MemoryBarrier ( ) ; // Barrier 1 _complete = true ; Thread.MemoryBarrier ( ) ; // Barrier 2 } void B ( ) { Thread.MemoryBarrier ( ) ; // Barrier 3 ; if ( _complete ) { Thread.MemoryBarrier ( ) ; // Barrier 4 ; Console.WriteLine ( _answer ) ; } } }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using Autodesk.AutoCAD.ApplicationServices ; using Autodesk.AutoCAD.DatabaseServices ; using Autodesk.AutoCAD.EditorInput ; using Autodesk.AutoCAD.Geometry ; using Autodesk.AutoCAD.Runtime ; namespace WindowsDoors.NET { class OpeningDataTable : Table { private int rowCount = 0 ; private static Document doc = Application.DocumentManager.MdiActiveDocument ; //Current drawing private static Database db = doc.Database ; //subclass of Document , private static Editor ed = doc.Editor ; //Editor object to ask user where table goes , subclass of Document public OpeningDataTable ( bool isWindow ) { PromptPointResult pr = ed.GetPoint ( `` \nEnter table insertion point : `` ) ; if ( pr.Status == PromptStatus.OK ) { //Setting information about the table TableStyle = db.Tablestyle ; SetSize ( 2 , 5 ) ; SetRowHeight ( 3 ) ; SetColumnWidth ( 15 ) ; Position = pr.Value ; //Creating titles to add String [ ] columnTitles = new String [ 5 ] ; columnTitles [ 0 ] = `` Mark '' ; columnTitles [ 1 ] = `` Width '' ; columnTitles [ 2 ] = `` Height '' ; columnTitles [ 3 ] = `` Header\nMaterial '' ; columnTitles [ 4 ] = `` Packers\n ( Each Side ) '' ; //Adding titles to table addRow ( columnTitles ) ; } } public void addRow ( String [ ] data ) { // Use a nested loop to format each cell for ( int i = 0 ; i < data.Length ; i++ ) { ParseOption s = new ParseOption ( ) ; Cells [ rowCount , i ] .TextHeight = 1 ; Cells [ rowCount , i ] .SetValue ( data [ i ] , s ) ; } GenerateLayout ( ) ; Transaction tr = doc.TransactionManager.StartTransaction ( ) ; using ( tr ) { BlockTable bt = ( BlockTable ) tr.GetObject ( doc.Database.BlockTableId , OpenMode.ForRead ) ; BlockTableRecord btr = ( BlockTableRecord ) tr.GetObject ( bt [ BlockTableRecord.ModelSpace ] , OpenMode.ForWrite ) ; btr.AppendEntity ( this ) ; tr.AddNewlyCreatedDBObject ( this , true ) ; tr.Commit ( ) ; } } } } ( BlockTableRecord ) tr.GetObject ( bt [ BlockTableRecord.ModelSpace ] , OpenMode.ForWrite ) ;"
"m_XlApp = New Excel.Application m_XlApp.visible = False m_XlApp.DisplayAlerts = False Dim m_xlWrkbs As Excel.Workbooks = m_XlApp.Workbooks Dim m_xlWrkb As Excel.Workbook m_xlWrkb = m_xlWrkbs.Open ( strFile ) m_xlWrkb.DoNotPromptForConvert = true m_xlWrkb = m_xlWrkbs.Open ( strFile , Password : = '' '' ) m_xlWrkb.Unprotect ( `` '' )"
"public class ApplicationDbContext : IdentityDbContext { # pragma warning disable nullable public ApplicationDbContext ( DbContextOptions < ApplicationDbContext > options ) : base ( options ) { } # pragma warning restore nullable public DbSet < Probe > Probes { get ; set ; } public DbSet < ProbeUnitTest > ProbeUnitTests { get ; set ; } } Data\ApplicationDbContext.cs ( 10,12,10,32 ) : warning CS8618 : Non-nullable property 'Probes ' is uninitialized . Data\ApplicationDbContext.cs ( 10,12,10,32 ) : warning CS8618 : Non-nullable property 'ProbeUnitTests ' is uninitialized . public ApplicationDbContext ( DbContextOptions < ApplicationDbContext > options ) : base ( options ) { Probes = Probes ; ProbeUnitTests = ProbeUnitTests ; }"
"class Authentication { public static ScriptService ScriptsAuthenticateOauth ( UserCredential credential ) { try { ScriptService service = new ScriptService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` MyApp '' , } ) ; return service ; } catch ( Exception ex ) { Console.WriteLine ( DateTime.Now.ToString ( `` HH : mm '' ) + `` : An authentication error occurred : `` + ex.InnerException ) ; return null ; } } public static UserCredential getCredential ( string clientId , string clientSecret , string userName ) { string [ ] scopes = new string [ ] { DriveService.Scope.Drive , // view and manage your files and documents DriveService.Scope.DriveAppdata , // view and manage its own configuration data DriveService.Scope.DriveAppsReadonly , // view your drive apps DriveService.Scope.DriveFile , // view and manage files created by this app DriveService.Scope.DriveMetadataReadonly , // view metadata for files DriveService.Scope.DriveReadonly , // view files and documents on your drive DriveService.Scope.DriveScripts , // modify your app scripts ScriptService.Scope.Drive , `` https : //www.googleapis.com/auth/spreadsheets '' , `` https : //spreadsheets.google.com/feeds '' , `` https : //docs.google.com/feeds '' } ; return GoogleWebAuthorizationBroker.AuthorizeAsync ( new ClientSecrets { ClientId = clientId , ClientSecret = clientSecret } , scopes , userName , CancellationToken.None , new FileDataStore ( `` Google.Sheet.Sync.Auth.Store '' ) ) .Result ; } public static DriveService DriveAuthenticateOauth ( UserCredential credential ) { try { DriveService service = new DriveService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` MyApp '' , } ) ; // Console.WriteLine ( `` Auth success '' ) ; return service ; } catch ( Exception ex ) { // Console.WriteLine ( ex.InnerException ) ; Console.WriteLine ( DateTime.Now.ToString ( `` HH : mm '' ) + `` : An authentication error occurred : `` + ex.InnerException ) ; return null ; } } } var credential = Authentication.getCredential ( CLIENT_ID , CLIENT_SECRET , Environment.UserName ) ; DriveService driveService = Authentication.DriveAuthenticateOauth ( credential ) ; ScriptService scriptService = Authentication.ScriptsAuthenticateOauth ( credential ) ; Script error message : Authorization is required to perform that action ."
"public static int maxSequence ( string str ) { MatchCollection matches = Regex.Matches ( str , `` H+|T+ '' ) ; Match [ ] matchArr = new Match [ matches.Count ] ; matches.CopyTo ( matchArr , 0 ) ; return matchArr .Select ( match = > match.Value.Length ) .OrderByDescending ( len = > len ) .First ( ) ; }"
"< DllImport ( `` winspool.Drv '' , EntryPoint : = '' OpenPrinterW '' , _ SetLastError : =True , CharSet : =CharSet.Unicode , _ ExactSpelling : =True , CallingConvention : =CallingConvention.StdCall ) > _Public Shared Function OpenPrinter ( ByVal src As String , ByRef hPrinter As IntPtr , ByVal pd As Int16 ) As BooleanEnd Function"
"fileName = @ '' D : \temp\FaxTest.txt '' ; //THIS WORKS//fileName = @ '' D : \temp\FaxTest.pdf '' ; //Operation failed//fileName = @ '' D : \temp\FaxTest.tif '' ; //Operation failedfaxDoc.Sender.Name = faxRec.From ; faxDoc.Sender.Company = faxRec.From ; faxDoc.Body = fileName ; faxDoc.Subject = faxRec.ReferenceId ; faxDoc.DocumentName = faxRec.ReferenceId ; var to = `` xxxxxxxxxx '' ; faxDoc.Recipients.Add ( to , `` Some Name '' ) ; var serverName = Environment.MachineName ; string [ ] returnVal = faxDoc.Submit ( serverName ) ;"
dotnet publish -- configuration Release -r linux-x64 dotnet publish -- configuration Debug -r linux-x64 Starting unix command : 'gdb -- interpreter=mi'bash : gdb : command not foundgdb -- interpreter=mi exited with code 127 . Process : MyProjectNameTitle : /home/deploy/app/MyProjectName StartUpArgument
"public MetadataRetrievalNode [ ] Browse ( string nodeId , int childStartIndex , int maxChildNodes , TimeSpan timeout ) { Func < MetadataRetrievalNode [ ] > work = ( ) = > { // Return computed metadata ... } ; IAsyncResult result = work.BeginInvoke ( null , null ) ; if ( result.AsyncWaitHandle.WaitOne ( timeout ) ) { return work.EndInvoke ( result ) ; } else { throw new TimeoutException ( ) ; } } public MetadataRetrievalNode [ ] Browse ( string nodeId , int childStartIndex , int maxChildNodes , TimeSpan timeout ) { Thread workerThread = null ; Func < MetadataRetrievalNode [ ] > work = ( ) = > { workerThread = Thread.CurrentThread ; // Return computed metadata ... } ; IAsyncResult result = work.BeginInvoke ( null , null ) ; if ( result.AsyncWaitHandle.WaitOne ( timeout ) ) { return work.EndInvoke ( result ) ; } else { workerThread.Abort ( ) ; throw new TimeoutException ( ) ; } }"
"@ { ViewBag.Title = `` About '' ; var foo = 1 ; var bar = foo switch { 1 = > `` one '' , 2 = > `` two '' , _ = > string.Empty } ; } < h2 > @ ViewBag.Title. < /h2 > < h3 > @ ViewBag.Message < /h3 > < p > Use this area to provide additional information. < /p >"
public async Task HandleAsync ( ItemPlacedIntoStock @ event ) { var bookingList = new BookingList ( ) ; bookingList.Date = @ event.Date ; bookingList.DeltaItemQuantity = @ event.Quantity ; bookingList.IncomingItemQuantity = @ event.Quantity ; bookingList.OutgoingItemQuantity = 0 ; bookingList.Item = @ event.Item ; bookingList.Location = @ event.Location ; bookingList.Warehouse = @ event.Warehouse ; using ( var repository = new BookingListRepository ( ) ) { repository.Add ( bookingList ) ; await repository.Save ( ) ; } }
var thingy = new Foo ( ) ; var getFoo ( ) { return new Foo ( ) ; }
"var txt = new TextBox ( ) ; txt.ID = `` MyID '' +Number ; chkBox.Attributes.Add ( `` onClick '' , `` EnableTxtBox ( ' '' +txt.ClientID + `` ' ) ; '' ) ; chkBox.Attributes.Add ( `` onClick '' , `` EnableTxtBox ( ' '' + this.ClientID+ '' _ '' +txt.ClientID + `` ' ) ; '' ) ;"
"select AdsProperties.AdsProID , AdsProperties.IsActive , AdsProperties.Name , case when AdsProperties.ControlType =1 then -- TextBox 'Textbox ' when AdsProperties.ControlType =2 then -- DropDown 'Dropdown ' when AdsProperties.ControlType =3 then -- ConboBox 'ComboBox ' else -- RadioButton 'RadioButtont ' end as ControlType from CLF.utblCLFAdsPropertiesMaster as AdsProperties var query = from AdsProperties in db.utblCLFAdsPropertiesMasters select new { AdsProperties.AdsProID , AdsProperties.Name , AdsProperties.IsActive , ControlType = AdsProperties.ControlType == 1 ? ( int ? ) '' TextBox '' : null , ControlType = AdsProperties.ControlType == 2 ? ( int ? ) '' Dropdown '' : null , ControlType = AdsProperties.ControlType == 3 ? ( int ? ) '' ComboBox '' : null , ControlType = AdsProperties.ControlType == 4 ? ( int ? ) '' RadioButton '' : null ) } ; dt = query.CopyToDataTableExt ( ) ; ` an anynomous type can not have multiple properties with the same name `"
"public Search ( XmlAccess xmlFile , SearchDatabaseConnect searchDatabaseConnection ) { this.xmlFile = xmlFile ; FsdcConnection = searchDatabaseConnection ; Clear ( ) ; } public class SearchDatabaseConnect : DatabaseConnect , ISearchDatabaseConnect { // }"
var client = new JsvServiceClient ( `` http : //localhost/ '' ) ;
"[ DllImport ( `` odbc32.dll '' , CharSet = CharSet.Unicode ) ] internal static extern OdbcResult SQLAllocHandle ( OdbcHandleType HandleType , IntPtr InputHandle , ref IntPtr OutputHandlePtr ) ; [ DllImport ( `` odbc32.dll '' , CharSet = CharSet.Unicode ) ] internal static extern OdbcResult SQLAllocHandle ( OdbcHandleType HandleType , MySafeHandle InputHandle , ref MySafeHandle OutputHandlePtr ) ;"
static IEnumerable < object > Iterator ( ExAPI api ) { try { for ( int i = 0 ; true ; ++i ) { yield return api [ i ] ; // will throw eventually } } catch ( IndexOutOfBoundsException ) { // expected : end of iteration . } }
RenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap ( ) ; await renderTargetBitmap.RenderAsync ( uielement ) ; IBuffer pixels = await renderTargetBitmap.GetPixelsAsync ( ) ; . . .var pixelArray = pixels.ToArray ( ) ; using System.Runtime.InteropServices.WindowsRuntime ; // For ToArray
"List < Column > columns = new List < Column > ( ) ; myItemValues = ( IDictionary < string , object > ) myItems [ 0 ] ; // Key is the column , value is the value foreach ( var pair in myItemValues ) { Column column = new Column ( ) ; column.Title = pair.Key ; column.SourceField = pair.Key ; columns.Add ( column ) ; } view.Columns.Clear ( ) ; foreach ( var column in columns ) { Binding binding = new Binding ( column.SourceField ) ; if ( column.SourceField == `` Icon '' ) { view.Columns.Add ( new GridViewColumn { Header = column.Title , DisplayMemberBinding = binding , CellTemplate = new DataTemplate ( typeof ( Image ) ) } ) ; } else { view.Columns.Add ( new GridViewColumn { Header = column.Title , DisplayMemberBinding = binding } ) ; } } foreach ( dynamic item in myItems ) { this.listView.Items.Add ( item ) ; }"
"public ActionResult Index ( ) { //Get data from xml url ( This is the code that shuld not run everytime a user visits the view ) var url = `` http : //www.interneturl.com/file.xml '' ; XNamespace dcM = `` http : //search.yahoo.com/mrss/ '' ; var xdoc = XDocument.Load ( url ) ; var items = xdoc.Descendants ( `` item '' ) .Select ( item = > new { Title = item.Element ( `` title '' ) .Value , Description = item.Element ( `` description '' ) .Value , Link = item.Element ( `` link '' ) .Value , PubDate = item.Element ( `` pubDate '' ) .Value , MyImage = ( string ) item.Elements ( dcM + `` thumbnail '' ) .Where ( i = > i.Attribute ( `` width '' ) .Value == `` 144 '' & & i.Attribute ( `` height '' ) .Value == `` 81 '' ) .Select ( i = > i.Attribute ( `` url '' ) .Value ) .SingleOrDefault ( ) } ) .ToList ( ) ; //Fill my db entities with the xml data ( This is the code that shuld not run everytime a user visits the view ) foreach ( var item in items ) { var date = DateTime.Parse ( item.PubDate ) ; if ( ! item.Title.Contains ( `` : '' ) & & ! ( date < = DateTime.Now.AddDays ( -1 ) ) ) { News NewsItem = new News ( ) ; Category Category = new Category ( ) ; var CategoryID = 2 ; var WorldCategoryID = re.GetByCategoryID ( CategoryID ) ; NewsItem.Category = WorldCategoryID ; NewsItem.Description = item.Description ; NewsItem.Title = item.Title.Replace ( `` ' '' , `` '' ) ; NewsItem.Image = item.MyImage ; NewsItem.Link = item.Link ; NewsItem.Date = DateTime.Parse ( item.PubDate ) ; re.AddNews ( NewsItem ) ; re.save ( ) ; } } //All code below this commenting needs to run everytime a user visits the view var GetAllItems = re.GetAllWorldNewsByID ( ) ; foreach ( var newsitemz in GetAllItems ) { if ( newsitemz.Date < = DateTime.Now.AddDays ( -1 ) ) { re.DeleteNews ( newsitemz ) ; re.save ( ) ; } } var model = new ItemViewModel ( ) { NewsList = new List < NewsViewModel > ( ) } ; foreach ( var NewsItems in GetAllItems ) { FillProductToModel ( model , NewsItems ) ; } return View ( model ) ; } public void AddNews ( News news ) { var exists = db.News.Any ( x = > x.Title == news.Title ) ; if ( exists == false ) { db.News.AddObject ( news ) ; } else { db.News.DeleteObject ( news ) ; } }"
"Class.StaticMethod < T > ( T arg1 , IInterface1 arg2 , IEnumerable < IInterface2 > arg3 )"
public override int SaveChanges ( ) { ChangeTracker.DetectChanges ( ) ; foreach ( DbEntityEntry < ISoftDeletable > entity in ChangeTracker.Entries < ISoftDeletable > ( ) ) { if ( entity.State == EntityState.Deleted ) { entity.State = EntityState.Modified ; entity.Entity.IsDeleted = true ; } } return base.SaveChanges ( ) ; }
"1 ) int i = 7 ; 2 ) Object o = i ; // Implicit boxing int -- > Object3 ) Object [ ] a3 = new int [ ] { 1 , 2 } ; // Illegal : no array conversion"
public async Task Test1 ( ) { var task = new Task ( ( ) = > Thread.Sleep ( 1000 ) ) ; //task.Start ( ) ; await task ; } void Main ( ) { Test1 ( ) .Wait ( ) ; Console.WriteLine ( `` Finished '' ) ; } public async Task Test1 ( ) { var task = new Task ( ( ) = > Thread.Sleep ( 1000 ) ) ; //task.Start ( ) ; await task ; Console.WriteLine ( `` Test1 Finished '' ) ; } void Main ( ) { var task1 = Test1 ( ) ; Task.Run ( ( ) = > { Task.Delay ( 5000 ) ; task1.Start ( ) ; } ) ; task1.Wait ( ) ; Console.WriteLine ( `` Finished '' ) ; }
string heading = $ '' Weight in { imperial ? `` lbs '' : '' kg '' } ''
Process.GetProcesses ( ) .Select ( p = > p.MainModule.FileName ) DriveInfo.GetDrives ( ) .Select ( d = > d.VolumeLabel )
class Filter < T > { public interface IChecker { ... } public class Checker < U > : IChecker { ... } List < IChecker > checkers ; ... } Type type = typeof ( MyObject < > ) .MakeGenericType ( objectType ) ; object myObject = Activator.CreateInstance ( type ) ; Type type = typeof ( Filter < Transaction > .Checker < > ) .MakeGenericType ( objectType ) ; object myObject = Activator.CreateInstance ( type ) ;
"[ TestMethod ] public void ExampleUnitTes ( ) { string resultJson = TestedUnit.TestedMethod ( ) ; string referenceJson = @ '' { ... bla bla bla ... ... some JSON Content ... ... bla bla bla ... } '' ; JObject expected = ( JObject ) JsonConvert.DeserializeObject ( referenceJson ) ; JObject result = ( JObject ) JsonConvert.DeserializeObject ( resultJson ) ; Assert.IsTrue ( JToken.DeepEquals ( result , expected ) ) ; } System.Text.Json.JsonDocument expectedDoc = System.Text.Json.JsonDocument.Parse ( referenceJson ) ; System.Text.Json.JsonDocument resultDoc = System.Text.Json.JsonDocument.Parse ( json ) ; Compare ? ? ? ( expectedDoc , resulDoc ) ;"
"[ 78293270 , 847744 , 32816430 ] [ `` aa '' , `` bb '' , `` cc '' ] JArray array = JsonConvert.DeserializeObject < JArray > ( json ) ; foreach ( JObject item in array ) { // now what ? }"
< ... ValidationRegEx= '' \d { 13 } '' / > < ... ValidationRegEx= '' \d { 13 } | \d { 10 } '' / >
"< system.serviceModel > < services > < service behaviorConfiguration= '' serviceBehavior '' name= '' IBVWebService.InstantBankVerificationPostBack '' > < endpoint address= '' http : //localhost:64337/InstantBankVerificationPostBack.svc '' behaviorConfiguration= '' web '' binding= '' webHttpBinding '' contract= '' IBVWebService.IInstantBankVerificationPostBack '' > < /endpoint > < endpoint contract= '' IMetadataExchange '' binding= '' mexHttpBinding '' address= '' mex '' / > < /service > < /services > < behaviors > < endpointBehaviors > < behavior name= '' web '' > < webHttp/ > < /behavior > < /endpointBehaviors > < serviceBehaviors > < behavior name= '' serviceBehavior '' > < serviceMetadata httpGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' false '' / > < /behavior > < /serviceBehaviors > < /behaviors > [ OperationContract ] [ WebInvoke ( Method = `` POST '' , BodyStyle = WebMessageBodyStyle.WrappedRequest , RequestFormat = WebMessageFormat.Json ) ] void PostBack ( String json ) ; WebClient client = new WebClient ( ) ; client.Headers [ `` Content-type '' ] = `` application/json '' ; client.Encoding = System.Text.Encoding.UTF8 ; string jsonInput = `` { 'data ' : 'testvalue ' } '' ; client.UploadString ( `` http : //localhost:64337/InstantBankVerificationPostBack.svc/PostBack '' , jsonInput ) ;"
"public static object operator + ( object o1 , object o2 ) static Vector operator - ( Point p1 , Point p2 ) { ... } internal static Vector operator - ( Point p1 , Point p2 ) { ... }"
"private void btnLoadData_Click ( object sender , EventArgs e ) { var sw = new System.Diagnostics.Stopwatch ( ) ; sw.Start ( ) ; LoadData ( ) ; sw.Stop ( ) ; ShowTakenTime ( sw.ElapsedMilliseconds ) ; } private void MeasureTime ( Method m ) { var sw = new System.Diagnostics.Stopwatch ( ) ; sw.Start ( ) ; m.Invoke ( ) ; sw.Stop ( ) ; ShowTakenTime ( sw.ElapsedMilliseconds ) ; } MeasureTime ( LoadData ( ) ) ;"
"public static void RegisterBundles ( BundleCollection bundles ) { bundles.Add ( new ScriptBundle ( `` ~/bundles/jquery '' ) .Include ( `` ~/Scripts/jquery-1.8.2.min.js '' , `` ~/Scripts/jquery.easing.1.3.js '' , `` ~/Scripts/knockout-2.2.0.js '' , `` ~/Scripts/common/common.min.js '' , `` ~/Scripts/popup.min.js '' ) ) ; bundles.Add ( new StyleBundle ( `` ~/Content/css '' ) .Include ( `` ~/Content/site.css '' ) ) ; BundleTable.EnableOptimizations = true ; } @ using System.Configuration < ! DOCTYPE html > < html > < head > < meta charset= '' utf-8 '' / > < meta name= '' viewport '' content= '' width=device-width '' / > < meta name= '' apple-mobile-web-app-capable '' content= '' yes '' > < title > Prestige SSC < /title > @ Scripts.Render ( `` ~/bundles/jquery '' ) @ RenderSection ( `` scripts '' , required : false ) @ Styles.Render ( `` ~/Content/css '' ) < script type= '' text/javascript '' > var screenRefreshTime = ' @ ConfigurationManager.AppSettings [ `` ScreenRefreshTime '' ] .ToString ( ) ' ; screenRefreshTime = parseInt ( screenRefreshTime ) ; < /script > < /head > < body > @ RenderBody ( ) < /body > < /html >"
"AWS .NET Core 3.1 Mock Lambda Test Tool ( 0.10.0 ) Unknown error occurred causing process exit : Dependency resolution failed for component C : \Users\siri\repos\bolao-futebol\website-core\AWSLambda1\bin\Debug\netcoreapp3.1\AWSLambda1.dll with error code -2147450740 . Detailed error : Error : An assembly specified in the application dependencies manifest ( AWSLambda1.deps.json ) was not found : package : 'runtime.win-x64.runtime.native.System.Data.SqlClient.sni ' , version : ' 4.4.0'path : 'runtimes/win-x64/native/sni.dll'at System.Runtime.Loader.AssemblyDependencyResolver..ctor ( String componentAssemblyPath ) at Amazon.Lambda.TestTool.Runtime.LambdaAssemblyLoadContext..ctor ( String lambdaPath ) in C : \codebuild\tmp\output\src142363207\src\Tools\LambdaTestTool\src\Amazon.Lambda.TestTool\Runtime\LambdaAssemblyLoadContext.cs : line 28at Amazon.Lambda.TestTool.Runtime.LocalLambdaRuntime.Initialize ( String directory , IAWSService awsService ) in C : \codebuild\tmp\output\src142363207\src\Tools\LambdaTestTool\src\Amazon.Lambda.TestTool\Runtime\LocalLambdaRuntime.cs : line 71at Amazon.Lambda.TestTool.Runtime.LocalLambdaRuntime.Initialize ( String directory ) in C : \codebuild\tmp\output\src142363207\src\Tools\LambdaTestTool\src\Amazon.Lambda.TestTool\Runtime\LocalLambdaRuntime.cs : line 46at Amazon.Lambda.TestTool.TestToolStartup.Startup ( String productName , Action ` 2 uiStartup , String [ ] args , RunConfiguration runConfiguration ) in C : \codebuild\tmp\output\src142363207\src\Tools\LambdaTestTool\src\Amazon.Lambda.TestTool\TestToolStartup.cs : line 77 < Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < TargetFramework > netcoreapp3.1 < /TargetFramework > < GenerateRuntimeConfigurationFiles > true < /GenerateRuntimeConfigurationFiles > < AWSProjectType > Lambda < /AWSProjectType > < /PropertyGroup > < ItemGroup > < PackageReference Include= '' Amazon.Lambda.Core '' Version= '' 1.1.0 '' / > < PackageReference Include= '' Amazon.Lambda.Serialization.SystemTextJson '' Version= '' 1.0.0 '' / > < PackageReference Include= '' Amazon.Lambda.SQSEvents '' Version= '' 1.1.0 '' / > < PackageReference Include= '' Amazon.Lambda.AspNetCoreServer '' Version= '' 5.0.0 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.SqlServer '' Version= '' 3.1.0 '' / > < /ItemGroup > < /Project >"
"[ Test ] public static void CompileCodeIntoAssembly ( ) { var code = `` public class X { } '' ; var file = Path.Combine ( Environment.GetFolderPath ( Environment.SpecialFolder.Desktop ) , `` output.cs '' ) ; File.WriteAllText ( file , code ) ; using ( var provider = new CSharpCodeProvider ( ) ) { var parameters = new CompilerParameters { GenerateInMemory = false , // we want the dll saved to disk GenerateExecutable = false , CompilerOptions = `` /target : library /lib : \ '' '' + typeof ( Class2 ) .Assembly.Location + `` \ '' '' , OutputAssembly = Path.Combine ( Environment.GetFolderPath ( Environment.SpecialFolder.Desktop ) , `` output.dll '' ) , } ; parameters.ReferencedAssemblies.AddRange ( new [ ] { `` System.dll '' , typeof ( Class1 ) .Assembly.Location , } ) ; var compilerResult = provider.CompileAssemblyFromFile ( parameters , file ) ; if ( compilerResult.Errors.Count > 0 ) { compilerResult.Errors.Cast < object > ( ) .ToDelimitedString ( Environment.NewLine ) .Dump ( ) ; throw new Exception ( ) ; } var assembly = Assembly.Load ( parameters.OutputAssembly ) ; //var assembly = compilerResult.CompiledAssembly ; // this method works var type = assembly.GetTypes ( ) .Single ( t = > t.Name == `` X '' ) ; }"
"UInt32 current ; int left , right ; ... //sometimes left == right and no shift occurscurrent < < = ( 32 + left - right ) ; //this workscurrent < < = ( 32 - right ) ; current < < = left ;"
"static void SomeMethod ( ) { Action < int , int > myDelegate ; // ... myDelegate = delegate { Console.WriteLine ( 0 ) ; } ; myDelegate = delegate ( ) { Console.WriteLine ( 0 ) ; } ; // compile error } myDelegate = delegate { Console.WriteLine ( 0 ) ; } ; myDelegate = delegate ( ) { Console.WriteLine ( 0 ) ; } ;"
"class Program { abstract class aBaz { public abstract int A { get ; } } interface IBar { int B { get ; } } class Foo { public int C { get ; } } static void Main ( ) { Foo foo = new Foo ( ) ; // compiler error , as expected , since Foo does n't inherit aBaz aBaz baz = ( aBaz ) foo ; // no compiler error , even though Foo does n't implement IBar IBar bar = ( IBar ) foo ; } }"
"< package id= '' AjaxControlToolkit '' version= '' 15.1.4.0 '' targetFramework= '' net4 '' / > < package id= '' EntityFramework '' version= '' 6.0.0 '' targetFramework= '' net4 '' / > < package id= '' Microsoft.AspNet.Providers '' version= '' 2.0.0 '' targetFramework= '' net4 '' / > < package id= '' Microsoft.AspNet.Providers.Core '' version= '' 2.0.0 '' targetFramework= '' net4 '' / > Microsoft Visual Studio Solution File , Format Version 12.00 # Visual Studio 14VisualStudioVersion = 14.0.25420.1MinimumVisualStudioVersion = 10.0.40219.1Project ( `` { E24C65DC-7377-472B-9ABA-BC803B73C61A } '' )"
"string match = `` A '' ; enum Sample { A , B , C , D } foreach ( ... ) { //should return Sample.A }"
"exec sp_executesql N'EXEC GetCaseList @ CaseStage ' , N ' @ CaseStage int ' , @ CaseStage=9 EXEC GetCaseList @ CaseStage = 9"
Integration1 : oracle/common/commonDataTypes.xsd oracle/integration1/someXSD.xsd oracle/ebo/baseTypes.xsdIntegration2 : oracle/common/commonDataTypes.xsd oracle/integration2/someXSD.xsd oracle/ebo/baseTypes.xsdIntegration3 : oracle/commonDataTypes.xsd oracle/integration2/someXSD.xsd oracle/ebo/baseTypes.xsd
"Surface videoContext = Video.SetVideoMode ( 1024 , 768 , 32 , false , false , false , true , true ) ; var a = System.Windows.Forms.Control.FromHandle ( Video.WindowHandle ) ; var b = System.Windows.Forms.NativeWindow.FromHandle ( Video.WindowHandle ) ; # ifdef WIN32 # include < SDL_syswm.h > SDL_SysWMinfo i ; SDL_VERSION ( & i.version ) ; if ( SDL_GetWMInfo ( & i ) ) { HWND hwnd = i.window ; SetWindowPos ( hwnd , HWND_TOP , x , y , width , height , flags ) ; }"
"namespace ex3 { class Program { static void Main ( string [ ] args ) { double x = 1e-20 , foo = 4.0 ; Console.WriteLine ( ( x + foo ) ) ; // prints 4 Console.WriteLine ( ( x - foo ) ) ; // prints -4 Console.WriteLine ( ( x + foo ) ==foo ) ; // prints True BUT THIS IS FALSE ! ! ! } } }"
"public class Foo { public int Id { get ; set ; } public ICollection < Bar > Bars { get ; set ; } } public class Bar { public int Id { get ; set ; } } foo1.Bars = new List < Bar > ( ) { bar1 , bar2 } ; foo2.Bars = new List < Bar > ( ) { bar2 , bar1 } ; foo3.Bars = new List < Bar > ( ) { bar3 , bar1 , bar2 } ; private bool areBarsSimilar ( ICollection < Bar > bars1 , ICollection < Bar > bars2 ) { return bars1.Count == bars2.Count & & //have the same amount of bars ! bars1.Select ( x = > x.Id ) .Except ( bars2.Select ( y = > y.Id ) ) .Any ( ) ; //and when excepted does not return any element mean similar bar } public void somewhereWithQueryResult ( ) { . . List < Foo > topNFoos = new List < Foo > ( ) ; //this serves as a memory for the previous query int N = 50 ; //can be any number foreach ( var q in query ) { //query is IOrderedEnumerable or IEnumerable if ( topNFoos.Count == 0 || ! topNFoos.Any ( foo = > areBarsSimilar ( foo.Bars , q.Bars ) ) ) topNFoos.Add ( q ) ; if ( topNFoos.Count > = N ) //We have had enough Foo break ; } } var topNFoos = from q in query //put something select q ; int index = 0 ; var topNFoos = from q in query let qc = index++ + q.Id //depends on q or variable outside like index , then it is OK select q ;"
"public interface IRepository < T > { void Add ( T source ) ; T Find ( int id ) ; } public class TestClientRepository : IRepository < ClientEmailAddress > , IRepository < ClientAccount > { }"
"protected void Page_Load ( object sender , EventArgs e ) { Repeater1.DataSource = listOfData ; Repeater1.DataBind ( ) ; } < uc : Product runat= '' server '' ImportantData= ' < % # Eval ( `` ImportantData '' ) % > ' id= '' DetailPanel1 '' / > public int ImportantData { get ; set ; } protected void Page_Load ( object sender , EventArgs e ) { } < asp : ImageButton ID= '' btn_Ok '' runat= '' server '' onclick= '' btn_Ok_Click '' ImageUrl= '' ~/image.png '' / > A critical error has occurred . Invalid postback or callback argument . Event validation is enabled using < pages enableEventValidation= '' true '' / > in configuration or < % @ Page EnableEventValidation= '' true '' % > in a page ... protected void Page_Load ( object sender , EventArgs e ) { if ( ! Page.IsPostBack ) { Repeater1.DataSource = listOfData ; Repeater1.DataBind ( ) ; } // Repeater1.DataBind ( ) ; // and tried to put DataBind ( ) here }"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Linq ; using System.Text ; using System.Windows.Forms ; using System.Threading ; namespace ThreadingTest { public partial class Form1 : Form { private delegate void TickerDelegate ( string s ) ; bool stopThread = false ; TickerDelegate tickerDelegate1 ; Thread thread1 ; public Form1 ( ) { InitializeComponent ( ) ; tickerDelegate1 = new TickerDelegate ( SetLeftTicker ) ; } private void Form1_Load ( object sender , EventArgs e ) { thread1 = new Thread ( new ThreadStart ( disp ) ) ; thread1.Start ( ) ; } void disp ( ) { while ( stopThread == false ) { listBox1.Invoke ( tickerDelegate1 , new object [ ] { DateTime.Now.ToString ( ) } ) ; Thread.Sleep ( 1000 ) ; } } private void SetLeftTicker ( string s ) { listBox1.Items.Add ( s ) ; } private void btnStop_Click ( object sender , EventArgs e ) { stopThread = true ; if ( thread1.IsAlive ) { thread1.Abort ( ) ; } } private void btnStart_Click ( object sender , EventArgs e ) { stopThread = false ; thread1 = new Thread ( new ThreadStart ( disp ) ) ; thread1.Start ( ) ; } private void btnCheck_Click ( object sender , EventArgs e ) { if ( thread1.IsAlive ) { MessageBox.Show ( `` Is Alive ! `` ) ; } } private void btnClear_Click ( object sender , EventArgs e ) { listBox1.Items.Clear ( ) ; } } }"
"public int maxConcurrentProcesses = 10 ; protected override void OnStart ( string [ ] args ) { // Set up a timer to trigger every minute . System.Timers.Timer timer = new System.Timers.Timer ( 60000 ) ; timer.Elapsed += new System.Timers.ElapsedEventHandler ( this.OnTimer ) ; timer.Start ( ) ; } private void OnTimer ( object sender , System.Timers.ElapsedEventArgs args ) { // How many instances of import.exe are running ? Process [ ] importProcesses = Process.GetProcessesByName ( `` import '' ) ; int countRunning = importProcesses.Count ( ) ; // If there are less than maxConcurrentProcesses , create as many as needed to reach maxConcurrentProcesses if ( countRunning < maxConcurrentProcesses ) { int processesToStart = maxConcurrentProcesses - countRunning ; for ( int i = 0 ; i < processesToStart ; i++ ) { FireOffImport ( ) ; } } } private void FireOffImport ( ) { // Get the first file returned from the Queue folder string filePathSource = GetNextCSVInQueue ( ) ; if ( filePathSource ! = `` '' ) { // … // commandArguments = create our arguments here // … // Move the file to processing folder here // … // Give a new process the import tool location and arguments ProcessStartInfo startInfo = new ProcessStartInfo ( importLocation + `` \\import.exe '' , commandArguments ) ; try { Process process = Process.Start ( startInfo ) ; // process.WaitForExit ( 20000 ) ; // If the process has exited , there will be 4 csv files created in the same directory as the file . } catch ( Exception ex ) { // Deal with exception here } } }"
"var urls = new string [ ] { `` https : //stackoverflow.com '' , `` https : //superuser.com '' , `` https : //www.reddit.com/r/chess '' , } ; var tasks = urls.Select ( async url = > { using ( var webClient = new WebClient ( ) ) { return ( Url : url , Data : await webClient.DownloadStringTaskAsync ( url ) ) ; } } ) .ToArray ( ) ; var firstTask = await Task.WhenAny ( tasks ) ; Console.WriteLine ( $ '' First Completed Url : { firstTask.Result.Url } '' ) ; Console.WriteLine ( $ '' Data : { firstTask.Result.Data.Length : # ,0 } chars '' ) ; public static async Task < ( string Url , string Data ) > DownloadUrl ( string url , CancellationToken cancellationToken ) { try { using ( var webClient = new WebClient ( ) ) { cancellationToken.Register ( webClient.CancelAsync ) ; return ( url , await webClient.DownloadStringTaskAsync ( url ) ) ; } } catch ( WebException ex ) when ( ex.Status == WebExceptionStatus.RequestCanceled ) { cancellationToken.ThrowIfCancellationRequested ( ) ; throw ; } } public static Task < Task < TResult > > WhenAnyEx < TSource , TResult > ( this IEnumerable < TSource > source , Func < TSource , CancellationToken , Task < TResult > > taskFactory , int timeout ) { // What to do here ? }"
... < compatibility xmlns= '' urn : schemas-microsoft-com : compatibility.v1 '' > < application > < supportedOS Id= '' { ... } '' / >
< Window x : Class= '' UI.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : xcdg= '' http : //schemas.xceed.com/wpf/xaml/datagrid '' xmlns : xctk= '' http : //schemas.xceed.com/wpf/xaml/toolkit '' mc : Ignorable= '' d '' Title= '' MainWindow '' Height= '' 800 '' Width= '' 700 '' > < Grid > < xctk : Zoombox MinScale= '' 0.5 '' MaxScale= '' 100 '' > < Grid Width= '' 600 '' Height= '' 400 '' Background= '' Yellow '' > < Ellipse Fill= '' Blue '' / > < /Grid > < /xctk : Zoombox > < /Grid > < /Window >
public class User { public string Name { get ; set ; } public int Id { get ; set ; } } IEnumerable < User > users = from u in myDbContext.Users select u ; @ foreach ( var item in Model ) { < tr > @ item.Id < /tr > < tr > @ item.Name < /tr > }
"string colourHex = ( database.HexCode ) .Replace ( `` # '' , `` 0x '' ) ; var colourObject = MigraDoc.DocumentObjectModel.Color.Parse ( colourHex ) ; Cell.Shading.Color = colourObject ;"
"static class Extensions { public static bool In < T > ( this T t , params T [ ] values ) { return false ; } } var x = new Object ( ) ; IEnumerable < int > p = new List < int > { 1 , 2 , 3 } ; var t2 = x.In ( p ) ; var x = 5 ; IEnumerable < int > p = new List < int > { 1 , 2 , 3 } ; var t2 = x.In ( p ) ;"
Publisher # 1 ═══╗ ╔═══ Round Robin ═══╦═══ Subscriber # 1 ( Service 1 ) ║ ║ ╚═══ Subscriber # 2 ( Service 1 ) ╠═══ Topic ═══╣ ║ ║ ╔═══ Subscriber # 3 ( Service 2 ) Publisher # 2 ═══╝ ╚═══ Round Robin ═══╩═══ Subscriber # 4 ( Service 2 )
syntax-highlighter test.cs
"String S = Editor1.Content.ToString ( ) ; Response.Write ( S ) ; string sql = `` insert into testcase.ishan ( nmae , orders ) VALUES ( ' 9 ' , @ S ) '' ; OdbcCommand cmd = new OdbcCommand ( sql , myConn ) ; cmd.Parameters.AddWithValue ( `` @ S '' , S ) ; cmd.ExecuteNonQuery ( ) ;"
public async Task RemoveCurrentTeacherOfGroup ( int groupId ) { var group = await _dataContext.Groups.SingleAsync ( g = > g.Id == groupId ) ; group.Teacher = null ; await _dataContext.SaveChangesAsync ( ) ; } public class Teacher { public int Id { get ; set ; } .. public virtual List < Group > Groups { get ; set ; } } public class Group { public int Id { get ; set ; } .. public virtual Teacher Teacher { get ; set ; } } public void RemoveCurrentTeacherOfGroup ( int groupId ) { var group = _dataContext.Groups.Single ( g = > g.Id == groupId ) ; group.Teacher = null ; _dataContext.SaveChanges ( ) ; }
"public class Tags { int mask ; public static bool operator ! = ( Tags x , Tags y ) { return ! ( x == y ) ; } public static bool operator == ( Tags x , Tags y ) { return x.mask == y.mask ; } } if ( tags1 == null ) return x.mask == y.mask ; public static bool operator == ( Tags x , Tags y ) { if ( x == null & & y == null ) return true ; if ( x == null || y == null ) return false ; return x.mask == y.mask ; }"
`` testing '' == `` t '' + String.Empty + `` e '' + String.Empty + '' sting '' + String.Empty ; string testString = `` testing '' ; int index = testString.LastIndexOf ( string.Empty ) ; // index is 6index = testString.IndexOf ( string.Empty ) ; // index is 0 string emptyString = string.Empty ; char [ ] emptyStringCharArr = emptyString.ToCharArray ( ) ; string myDummyString = `` abcdefg '' ; string [ ] result = myDummyString.Split ( emptyStringCharArr ) ;
"public NodeKind Kind { get { return ( NodeKind ) this.GetValue ( KindProperty ) ; } set { this.SetValue ( KindProperty , value ) ; } } public static readonly DependencyProperty KindProperty = DependencyProperty.Register ( `` Kind '' , typeof ( NodeKind ) , typeof ( DashboardNode ) ) ;"
"< Style x : Key= '' CardStyle '' TargetType= '' { x : Type DataGridRow } '' > < Setter Property= '' BorderBrush '' Value= '' Gray '' / > < Setter Property= '' BorderThickness '' Value= '' 1 '' / > < Setter Property= '' Margin '' Value= '' 2.5 '' / > < Setter Property= '' Background '' Value= '' White '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' { x : Type DataGridRow } '' > < Border x : Name= '' DGR_Border '' BorderBrush= '' { TemplateBinding BorderBrush } '' BorderThickness= '' { TemplateBinding BorderThickness } '' Background= '' { TemplateBinding Background } '' SnapsToDevicePixels= '' True '' > < SelectiveScrollingGrid > < SelectiveScrollingGrid.ColumnDefinitions > < ColumnDefinition Width= '' Auto '' / > < ColumnDefinition Width= '' * '' / > < /SelectiveScrollingGrid.ColumnDefinitions > < SelectiveScrollingGrid.RowDefinitions > < RowDefinition Height= '' * '' / > < RowDefinition Height= '' Auto '' / > < /SelectiveScrollingGrid.RowDefinitions > < ! -- Replacment of DataGridCellsPresenter -- > < ContentControl Grid.Column= '' 1 '' Content= '' { Binding } '' ContentTemplate= '' { Binding ItemTemplate , RelativeSource= { RelativeSource AncestorType=DataGrid } } '' SnapsToDevicePixels= '' { TemplateBinding SnapsToDevicePixels } '' > < /ContentControl > < DataGridDetailsPresenter Grid.Column= '' 1 '' Grid.Row= '' 1 '' SelectiveScrollingGrid.SelectiveScrollingOrientation= '' { Binding AreRowDetailsFrozen , ConverterParameter= { x : Static SelectiveScrollingOrientation.Vertical } , Converter= { x : Static DataGrid.RowDetailsScrollingConverter } , RelativeSource= { RelativeSource AncestorType= { x : Type DataGrid } } } '' Visibility= '' { TemplateBinding DetailsVisibility } '' / > < DataGridRowHeader Grid.RowSpan= '' 2 '' SelectiveScrollingGrid.SelectiveScrollingOrientation= '' Vertical '' Visibility= '' { Binding HeadersVisibility , ConverterParameter= { x : Static DataGridHeadersVisibility.Row } , Converter= { x : Static DataGrid.HeadersVisibilityConverter } , RelativeSource= { RelativeSource AncestorType= { x : Type DataGrid } } } '' / > < /SelectiveScrollingGrid > < /Border > < ControlTemplate.Triggers > < Trigger Property= '' IsMouseOver '' Value= '' True '' > < Setter TargetName= '' DGR_Border '' Property= '' Background '' Value= '' LightGray '' / > < /Trigger > < Trigger Property= '' IsSelected '' Value= '' True '' > < Setter TargetName= '' DGR_Border '' Property= '' Background '' Value= '' Gray '' / > < /Trigger > < /ControlTemplate.Triggers > < /ControlTemplate > < /Setter.Value > < /Setter > < Style.Triggers > < MultiTrigger > < MultiTrigger.Conditions > < Condition Property= '' IsSelected '' Value= '' True '' / > < /MultiTrigger.Conditions > < Setter Property= '' Background '' Value= '' Red '' / > < /MultiTrigger > < MultiTrigger > < MultiTrigger.Conditions > < Condition Property= '' ItemsControl.AlternationIndex '' Value= '' 1 '' / > < Condition Property= '' IsSelected '' Value= '' False '' / > < /MultiTrigger.Conditions > < Setter Property= '' Background '' Value= '' LightGray '' / > < /MultiTrigger > < /Style.Triggers > < /Style > < DataGrid HeadersVisibility= '' None '' SelectionUnit= '' FullRow '' RowStyle= '' { StaticResource CardStyle } '' ScrollViewer.HorizontalScrollBarVisibility= '' Disabled '' > < DataGrid.ItemTemplate > < DataTemplate > < Label Content= '' { Binding } '' HorizontalContentAlignment= '' Center '' VerticalContentAlignment= '' Center '' / > < /DataTemplate > < /DataGrid.ItemTemplate > < DataGrid.ItemsPanel > < ItemsPanelTemplate > < WrapPanel IsItemsHost= '' True '' Orientation= '' Horizontal '' / > < /ItemsPanelTemplate > < /DataGrid.ItemsPanel > < /DataGrid >"
"Server.ClearError ( ) ; Response.Redirect ( url , false ) ; Context.ApplicationInstance.CompleteRequest ( ) ; Response.Redirect ( url , false ) ; var context = HttpContext.Current ; if ( context ! = null ) { context.ApplicationInstance.CompleteRequest ( ) ; }"
ClassDeclarationSyntax node = ... ; // The class declarationBaseListSyntax baseList = node.BaseList ; SyntaxTree programRoot = ... ; // Getting the AST rootCSharpCompilation compilation = CSharpCompilation.Create ( `` Program '' ) .AddReferences ( MetadataReference.CreateFromFile ( typeof ( object ) .Assembly.Location ) ) .AddSyntaxTrees ( programRoot ) ;
await Navigation.PopAsync ( ) await Navigation.PushAsync ( new CustomPage ( ) )
namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { System.Console.Write ( `` invisible prompt : `` ) ; var s = System.Console.ReadLine ( ) ; System.Console.WriteLine ( `` echo `` + s ) ; } } }
< system.webServer > < modules > < add name= '' tpl01 '' type= '' TemplateModule '' arg1= '' ~/ '' arg2= '' 500 '' / > < add name= '' tpl02 '' type= '' TemplateModule '' arg1= '' ~/ '' arg2= '' 100 '' / > < /modules > < /system.webServer >
public struct Foo { public int Bar ; public string Baz ; } IFixture fixture = new Fixture ( ) ; var f = fixture.CreateAnonymous < Foo > ( ) ; IFixture fixture = new Fixture ( ) .Customize ( new AutoMoqCustomization ( ) ) ; IFixture fixture = new Fixture ( ) ;
"// Build the RTSP Response stringvar body = `` v=0\n '' + `` o=- 575000 575000 IN IP4 `` + m_serverIP + `` \n '' + `` s= '' + stream + `` \n '' + `` i= < No author > < No copyright > \n '' + `` c= IN IP4 0.0.0.0\n '' + `` t=0 0\n '' + `` a=SdpplinVersion:1610641560\n '' + `` a=StreamCount : integer ; 1\n '' + `` a=control : *\n '' + `` a=Flags : integer ; 1\n '' + `` a=HasParam : integer ; 0\n '' + `` a=LatencyMode : integer ; 0\n '' + `` a=LiveStream : integer ; 1\n '' + `` a=mr : intgner ; 0\n '' + `` a=nr : integer ; 0\n '' + `` a=sr : integer ; 0\n '' + `` a=URL : string ; \ '' Streams/ '' + stream + `` \ '' \n '' + `` a=range : npt=0-\n '' + `` m=audio 0 RTP/AVP 8 '' + // 49170 is the RTP transport port and 8 is A-Law audio `` b=AS:90\n '' + `` b=TIAS:64000\n '' + `` b=RR:1280\n '' + `` b=RS:640\n '' + `` a=maxprate:50.000000\n '' + `` a=control : streamid=1\n '' + `` a=range : npt=0-\n '' + `` a=length : npt=0\n '' + `` a=rtpmap:8 pcma/8000/1\n '' + `` a=fmtp:8 '' + `` a=mimetype : string ; \ '' audio/pcma\ '' \n '' + `` a=ASMRuleBook : string ; \ '' marker=0 , Avera**MSG 00053 TRUNCATED**\n '' + `` **MSG 0053 CONTINUATION # 01**geBandwidth=64000 , Priority=9 , timestampdelivery=true ; \ '' \n '' + `` a=3GPP-Adaptation-Support:1\n '' + `` a=Helix-Adaptation-Support:1\n '' + `` a=AvgBitRate : integer ; 64000\n '' + `` a=AvgPacketSize : integer ; 160\n '' + `` a=BitsPerSample : integer ; 16\n '' + `` a=LiveStream : integer ; 1\n '' + `` a=MaxBitRate : integer ; 64000\n '' + `` a=MaxPacketSize : integer ; 160\n '' + `` a=Preroll : integer ; 2000\n '' + `` a=StartTime : integer ; 0\n '' + `` a=OpaqueData : buffer ; \ '' AAB2dwAGAAEAAB9AAAAfQAABABAAAA==\ '' '' ; var header = `` RTSP/1.0 200 OK\n '' + `` Content-Length : `` + body.Length + `` \n '' + `` x-real-usestrackid:1\n '' + `` Content-Type : application/sdp\n '' + `` Vary : User-Agent , ClientID\n '' + `` Content-Base : `` + requestURI + `` \n '' + `` vsrc : '' + m_serverIP + `` /viewsource/template.html\n '' + `` Set-Cookie : `` + Auth.getCookie ( ) + `` \n '' + `` Date : `` + System.DateTime.Now + `` \n '' + `` CSeq : 0\n '' ; var response = header + body ; var byteArray = System.Text.Encoding.UTF8.GetBytes ( response ) ; respondToClient ( byteArray , socket ) ; private static void respondToClient ( byte [ ] byteChunk , Socket socket ) { socket.BeginSend ( byteChunk , 0 , byteChunk.Length , SocketFlags.None , new AsyncCallback ( SendCallback ) , socket ) ; socket.BeginReceive ( m_dataBuffer , 0 , m_dataBuffer.Length , SocketFlags.None , new AsyncCallback ( ReceiveCallback ) , socket ) ; } private static void SendCallback ( IAsyncResult res ) { try { var socket = ( Socket ) res.AsyncState ; socket.EndSend ( res ) ; } catch ( Exception e ) { Console.Write ( e.Message ) ; } } Jul 1 13:28:29 : //-1//RTSP : /rtsp_read_svr_resp : Socket = 0Jul 1 13:28:29 : //-1//RTSP : /rtsp_read_svr_resp : NBYTES = 1384Jul 1 13:28:29 : //-1//RTSP : /rtsp_process_single_svr_resp : Jul 1 13:28:29 : rtsp_process_single_svr_resp : 400 bytes of data : RTSP/1.0 200 OKContent-Length : 1012x-real-usestrackid:1Content-Type : application/sdpVary : User-Agent , ClientIDContent-Base : rtsp : //10.96.134.50/streams/stream01.dcwvsrc:10.96.134.50/viewsource/template.htmlSet-Cookie : cbid=aabtvqjcldwjwjbatynprfpfltxaspyopoccbtewiddxuzhsesflnkzvkwibtikwfhuhhzzz ; path=/ ; expires=09/10/2015 14:28:38Date : 01/07/2015 14:28:38CSeq : 0 v=0o=- 575000 575000 IN IP4 private static void respondToClient ( byte [ ] byteChunk , Socket socket ) { // Divide the byte chunk into 300 byte chunks if ( byteChunk.Length > = 400 ) { Console.WriteLine ( `` Total bytes : `` + byteChunk.Length ) ; var totalBytes = byteChunk.Length ; var chunkSize = 400 ; var tmp = new byte [ chunkSize ] ; var packets = totalBytes / chunkSize ; var overflow = totalBytes % chunkSize ; Console.WriteLine ( `` Sending `` + totalBytes + `` in `` + packets + `` packets , with an overflow packets of `` + overflow + `` bytes . `` ) ; for ( var i = 0 ; i < packets * chunkSize ; i+=chunkSize ) { Console.WriteLine ( `` Sending chunk `` + i + `` to `` + ( i + chunkSize ) ) ; tmp = byteChunk.Skip ( i ) .Take ( chunkSize ) .ToArray ( ) ; socket.BeginSend ( tmp , 0 , tmp.Length , SocketFlags.None , new AsyncCallback ( SendCallback ) , socket ) ; } if ( overflow > 0 ) { Console.WriteLine ( `` Sending overflow chunk : `` + overflow + `` at index `` + ( totalBytes - overflow ) + `` to `` + ( totalBytes ) ) ; tmp = byteChunk.Skip ( byteChunk.Length - overflow ) .Take ( overflow ) .ToArray ( ) ; socket.BeginSend ( tmp , 0 , tmp.Length , SocketFlags.None , new AsyncCallback ( SendCallback ) , socket ) ; } } else { socket.BeginSend ( byteChunk , 0 , byteChunk.Length , SocketFlags.None , new AsyncCallback ( SendCallback ) , socket ) ; socket.BeginReceive ( m_dataBuffer , 0 , m_dataBuffer.Length , SocketFlags.None , new AsyncCallback ( ReceiveCallback ) , socket ) ; } }"
public static bool IsUnsafe ( this MethodInfo methodInfo ) { if ( HasUnsafeParameters ( methodInfo ) ) { return true ; } return methodInfo.ReturnType.IsPointer ; } private static bool HasUnsafeParameters ( MethodBase methodBase ) { var parameters = methodBase.GetParameters ( ) ; bool hasUnsafe = parameters.Any ( p = > p.ParameterType.IsPointer ) ; return hasUnsafe ; }
"Log.Logger = new LoggerConfiguration ( ) .WriteTo.Elasticsearch ( new ElasticsearchSinkOptions ( new Uri ( `` myurl:9200 '' ) ) { IndexFormat = `` ChargeMasterlog- { yyyy.MM.dd } '' , ModifyConnectionSettings = x = > x.BasicAuthentication ( `` username '' , `` password '' ) , } ) .CreateLogger ( ) ; Log.Information ( `` Hello , Serilog ! `` ) ;"
[ Serializable ] public abstract class ResponseBase { public bool Successful { get ; set ; } public List < ResponseMessage > Messages { get ; set ; } // ... Other code ... } [ Serializable ] [ XmlInclude ( typeof ( DebugMessage ) ) ] [ XmlInclude ( typeof ( InfoMessage ) ) ] [ XmlInclude ( typeof ( ValidationMessage ) ) ] [ XmlInclude ( typeof ( WarnMessage ) ) ] [ XmlInclude ( typeof ( RecoverableFaultMessage ) ) ] [ XmlInclude ( typeof ( FatalFaultMessage ) ) ] public abstract class ResponseMessage { //..Other code ... } [ Serializable ] public class DebugMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.Debug ; } } } [ Serializable ] public class InfoMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.Info ; } } } [ Serializable ] public class ValidationMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.Validation ; } } } [ Serializable ] public class WarnMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.Warn ; } } } [ Serializable ] public class RecoverableFaultMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.RecoverableFault ; } } } [ Serializable ] public class FatalFaultMessage : ResponseMessage { public override MessageType MessageType { get { return MessageType.FatalFault ; } } } [ ServiceKnownType ( typeof ( ResponseBase ) ) ] [ ServiceKnownType ( typeof ( ResponseMessage ) ) ] [ ServiceKnownType ( typeof ( List < ResponseMessage > ) ) ] [ ServiceKnownType ( typeof ( DebugMessage ) ) ] [ ServiceKnownType ( typeof ( InfoMessage ) ) ] [ ServiceKnownType ( typeof ( ValidationMessage ) ) ] [ ServiceKnownType ( typeof ( WarnMessage ) ) ] [ ServiceKnownType ( typeof ( RecoverableFaultMessage ) ) ] [ ServiceKnownType ( typeof ( FatalFaultMessage ) ) ] [ ServiceKnownType ( typeof ( List < DebugMessage > ) ) ] [ ServiceKnownType ( typeof ( List < InfoMessage > ) ) ] [ ServiceKnownType ( typeof ( List < ValidationMessage > ) ) ] [ ServiceKnownType ( typeof ( List < WarnMessage > ) ) ] [ ServiceKnownType ( typeof ( List < RecoverableFaultMessage > ) ) ] [ ServiceKnownType ( typeof ( List < FatalFaultMessage > ) ) ]
"iswaiting = true ; _bg.ReportProgress ( 1 , filePath ) ; while ( iswaiting ) { ; } //My other part of code ( EDIT : something do to with the ` result ` I get from the user . ) void _bg_ProgressChanged ( object sender , ProgressChangedEventArgs e ) { //my other part of code ... ... .. result = Microsoft.Windows.Controls.MessageBox.Show ( `` Question '' , '' Title '' , MessageBoxButton.YesNoCancel , MessageBoxImage.Warning ) ; iswaiting=false ; log ( iswaiting.toString ( ) ) ; }"
"< RadioButton x : Name= '' UpRadioButton '' Margin= '' 5 '' Content= '' Up '' > < i : Interaction.Triggers > < ei : DataTrigger Binding= '' { Binding IsChecked , ElementName=UpRadioButton } '' Value= '' True '' > < ei : ChangePropertyAction TargetObject= '' { Binding Mode=OneWay } '' PropertyName= '' SelectedDirection '' Value= '' { x : Static Enums : DirectionEnum.Up } '' / > < /ei : DataTrigger > < /i : Interaction.Triggers > < /RadioButton > < RadioButton x : Name= '' DownRadioButton '' Margin= '' 5 '' Content= '' Down '' > < i : Interaction.Triggers > < ei : DataTrigger Binding= '' { Binding IsChecked , ElementName=DownRadioButton } '' Value= '' True '' > < ei : ChangePropertyAction TargetObject= '' { Binding Mode=OneWay } '' PropertyName= '' SelectedDirection '' Value= '' { x : Static Enums : DirectionEnum.Down } '' / > < /ei : DataTrigger > < /i : Interaction.Triggers > < /RadioButton > < RadioButton x : Name= '' LeftRadioButton '' Margin= '' 5 '' Content= '' Left '' > < i : Interaction.Triggers > < ei : DataTrigger Binding= '' { Binding IsChecked , ElementName=LeftRadioButton } '' Value= '' True '' > < ei : ChangePropertyAction TargetObject= '' { Binding Mode=OneWay } '' PropertyName= '' SelectedDirection '' Value= '' { x : Static Enums : DirectionEnum.Left } '' / > < /ei : DataTrigger > < /i : Interaction.Triggers > < /RadioButton > < RadioButton x : Name= '' RightRadioButton '' Margin= '' 5 '' Content= '' Right '' > < i : Interaction.Triggers > < ei : DataTrigger Binding= '' { Binding IsChecked , ElementName=RightRadioButton } '' Value= '' True '' > < ei : ChangePropertyAction TargetObject= '' { Binding Mode=OneWay } '' PropertyName= '' SelectedDirection '' Value= '' { x : Static Enums : DirectionEnum.Right } '' / > < /ei : DataTrigger > < /i : Interaction.Triggers > < /RadioButton > public class MainViewModel : ViewModelBase { private DirectionEnum _selectedDirection ; public DirectionEnum SelectedDirection { get { return _selectedDirection ; } set { if ( _selectedDirection ! = value ) { _selectedDirection = value ; RaisePropertyChanged ( ) ; } } } public MainViewModel ( ) { SelectedDirection = DirectionEnum.Up ; } }"
"[ SuppressUnmanagedCodeSecurity ] internal static class SafeNativeMethods { [ DllImport ( `` shlwapi.dll '' , CharSet = CharSet.Unicode ) ] public static extern int StrCmpLogicalW ( string psz1 , string psz2 ) ; } private static _StrCmpLogicalW : function ( String psz1 , String psz2 ) : Integer ; private Boolean _StrCmpLogicalWInitialized ; public int StrCmpLogicalW ( String psz1 , psz2 ) { if ( ! _StrCmpLogialInitialized ) { _StrCmpLogicalW = GetProcedure ( `` shlwapi.dll '' , `` StrCmpLogicalW '' ) ; _StrCmpLogicalWInitialized = true ; } if ( _StrCmpLogicalW ) return _StrCmpLogicalW ( psz1 , psz2 ) else return String.Compare ( psz1 , psz2 , StringComparison.CurrentCultureIgnoreCase ) ; } _StrCmpLogicalW = GetProcedure ( `` shlwapi.dll '' , `` StrCmpLogicalW '' ) ; [ SuppressUnmanagedCodeSecurity ] internal static class SafeNativeMethods { private Boolean IsSupported = false ; private Boolean IsInitialized = false ; [ DllImport ( `` shlwapi.dll '' , CharSet = CharSet.Unicode , Export= '' StrCmpLogicalW '' , CaseSensitivie=false , SetsLastError=true , IsNative=false , SupportsPeanutMandMs=true ) ] private static extern int UnsafeStrCmpLogicalW ( string psz1 , string psz2 ) ; public int StrCmpLogicalW ( string s1 , string s2 ) { if ( ! IsInitialized ) { //todo : figure out how to loadLibrary in .net //todo : figure out how to getProcedureAddress in .net IsSupported = ( result from getProcedureAddress is not null ) ; IsInitialized = true ; } if ( IsSupported ) return UnsafeStrCmpLogicalW ( s1 , s2 ) ; else return String.Compare ( s1 , s2 , StringComparison.CurrentCultureIgnoreCase ) ; } }"
"var dynamicAssemblyName = new AssemblyName ( assemblyName ) ; AssemblyBuilder dynamicAssembly = AssemblyBuilder.DefineDynamicAssembly ( dynamicAssemblyName , AssemblyBuilderAccess.RunAndCollect ) ; ModuleBuilder moduleBuilder = dynamicAssembly.DefineDynamicModule ( assemblyName ) ;"
"client.Index ( new PercolatedQuery { Id = `` std_query '' , Query = new QueryContainer ( new MatchQuery { Field = Infer.Field < LogEntryModel > ( entry = > entry.Message ) , Query = `` just a text '' } ) } , d = > d.Index ( EsIndex ) ) ; client.Refresh ( EsIndex ) ;"
"public SomeClass ( IEnumerable < T > someValues ) { if ( null == someValues ) { throw new ArgumentNullException ( `` someValues '' ) ; } int counter = 0 ; foreach ( T value in someValues ) { if ( null == value ) { string msg = counter + `` th value was null '' ; // What exception class to use ? throw new ArgumentException ( msg , `` someValues '' ) ; } counter++ ; } }"
"string prefix = `` OLD : '' ; Func < string , string > prependAction = ( x = > prefix + x ) ; prefix = `` NEW : '' ; Console.WriteLine ( prependAction ( `` brownie '' ) ) ; Func < string , string > prependAction = ( x = > `` OLD : '' + x ) ; string prefix = `` NEW : '' ; var prepender = new Prepender { Prefix = prefix } ; Func < string , string > prependAction = prepender.Prepend ; prefix = `` OLD : '' ; Console.WriteLine ( prependAction ( `` brownie '' ) ) ; [ Serializable ] public class Prepender { public string Prefix { get ; set ; } public string Prepend ( string str ) { return Prefix + str ; } }"
void condition ( Fireball f ) { //test } ; void condition ( Heal f ) { //test } ; void condition ( Poison f ) { //test } ; void condition ( Ability f ) { //test } Fireball _fire = new FireBall ( ) ; condition ( _fire ) ; void condition ( Ability f ) { //test }
"public class CustomerFeedbackViewModel { public List < QuestionViewModel > Questions { get ; set ; } public string PageName { get ; set ; } public string SessionId { get ; set ; } } public bool Equals ( CustomerFeedbackViewModel other ) { if ( ReferenceEquals ( null , other ) ) return false ; if ( ReferenceEquals ( this , other ) ) return true ; return Questions.TrueForAll ( ( o , i ) = > o.Equals ( other.Questions.ElementAt ( i ) ) ) & & string.Equals ( PageName , other.PageName ) & & string.Equals ( SessionId , other.SessionId ) ; }"
string value = `` One - Two '' string firstValue = value.Split ( '- ' ) [ 0 ] ? ? string.Empty ; string secondValue = value.Split ( '- ' ) [ 1 ] ? ? string.Empty ;
char a = ' a ' ; int z = a ; Console.WriteLine ( z ) ; // Result : 97 char a = ' a ' ; string z = a ; // CS0029 Can not implicitly convert type 'char ' to 'string '
"public SortedList < string , long > GetList ( string parameter ) { return _service.GetList ( parameter ) ; } public SortedList GetList ( string parameter ) ;"
"using System ; using System.Linq ; namespace MyTest { class Program { static void Main ( ) { var aArray = new string [ ] { `` a '' , `` a '' , `` a '' , `` a '' } ; var i = 3 ; var linqObj = aArray.Where ( x = > x == `` a '' ) ; foreach ( var item in linqObj ) { aArray [ i ] = `` b '' ; i -- ; } foreach ( var arrItem in aArray ) { Console.WriteLine ( arrItem ) ; //Why does this only print out 2 a 's and 2 b 's , rather than 4 b 's ? } Console.ReadKey ( ) ; } } }"
"var asmName = new AssemblyName ( `` Test '' ) ; var access = AssemblyBuilderAccess.Run ; var asm = AppDomain.CurrentDomain.DefineDynamicAssembly ( asmName , access ) ; var module = asm.DefineDynamicModule ( `` Test '' ) ; var aType = module.DefineType ( `` A '' ) ; var tupleType = typeof ( Tuple < , > ) ; var tuple = tupleType.MakeGenericType ( new [ ] { typeof ( int ) , aType } ) ; tuple.GetProperty ( `` Item1 '' ) ; // < -- here 's the error"
"public static BitmapImage GetResourceImage ( string resourcePath , int decodePixelWidth = 0 , int decodePixelHeight = 0 ) { var image = new BitmapImage ( ) ; var moduleName = Assembly.GetExecutingAssembly ( ) .GetName ( ) .Name ; var resourceLocation = string.Format ( `` pack : //application : , , ,/ { 0 } ; component/Resources/ { 1 } '' , moduleName , resourcePath ) ; image.BeginInit ( ) ; image.UriSource = new Uri ( resourceLocation ) ; image.DecodePixelWidth = decodePixelWidth ; image.DecodePixelHeight = decodePixelHeight ; image.EndInit ( ) ; image.Freeze ( ) ; return image ; }"
"public class MyClass { public List < int > myList = new List < int > { 1337 } ; public MyClass ( ) { } } var myClass = JsonConvert.DeserializeObject < MyClass > ( `` { myList : [ 1,2,3 ] } '' ) ; Console.WriteLine ( string.Join ( `` , '' , myClass.myList.ToArray ( ) ) ) ; //1337,1,2,3"
var methodSyntax = VersionControls.Where ( x = > ! x.Removed ) .Max ( x = > x.VersionID ) ; var querySyntax = from x in VersionControls where ! x.Removed // how to do Max Aggregation in LINQ query syntax ? ? ? select x ;
"< RichTextBox.LayoutTransform > < ScaleTransform ScaleX= '' { Binding ElementName=mySlider , Path=Value } '' ScaleY= '' { Binding ElementName=mySlider , Path=Value } '' / > < /RichTextBox.LayoutTransform > RichTextBox newtext = new RichTextBox ( ) ; ScaleTransform mytran = new ScaleTransform ( ) ; mytran.ScaleX = mySlider.Value ; mytran.ScaleY = mySlider.Value ; newtext.LayoutTransform = mytran ;"
"Expression < Func < int , int , int , bool > > test = ( num1 , num2 , num3 ) = > num1 + num2 == num3 ; Expression < Func < int , int , bool > > test = ( num2 , num3 ) = > 5 + num2 == num3 ; Expression < Func < Thing , int , int > > test = ( thing , num2 ) = > thing.AnIntProp + num2 ;"
var result = new List < ObjectA > ( ) ; foreach ( string _s in ListOfFiles ) { try { ObjectA _A = new ObjectA ( _s ) ; result.Add ( _A ) ; } catch { } } var result = ListOfFiles.Select ( n = > try { new ObjectA ( n ) } ) .ToList ( ) ;
"var request = new RestRequest ( this.TokenEndPoint , Method.POST ) ; request.AddParameter ( `` code '' , code ) ; request.AddParameter ( `` client_id '' , this.ClientId ) ; request.AddParameter ( `` client_secret '' , this.Secret ) ; request.AddParameter ( `` redirect_uri '' , `` http : //localhost '' ) ; request.AddParameter ( `` grant_type '' , `` authorization_code '' ) ; client.ExecuteAsync < ? ? ? > ( request , ( response ) = > { var passIn = response ; } ) ; // how to use this method ?"
public Point CalculatePoint ( ... out Boolean boSuccess ) ; public List < Point > CalculateListOfPoints ( ... out Boolean boSuccess ) ;
"public class Lookup { public string Code { get ; set ; } public string Name { get ; set ; } } public class DocA { public string Id { get ; set ; } public string Name { get ; set ; } public Lookup Currency { get ; set ; } } public class ViewA // Simply a flattened version of the doc { public string Id { get ; set ; } public string Name { get ; set ; } public string CurrencyName { get ; set ; } // View just gets the name of the currency } public class A_View : AbstractIndexCreationTask < DocA , ViewA > { public A_View ( ) { Map = docs = > from doc in docs select new ViewA { Id = doc.Id , Name = doc.Name , CurrencyName = doc.Currency.Name } ; Reduce = results = > from result in results group on new ViewA { Id = result.Id , Name = result.Name , CurrencyName = result.CurrencyName } into g select new ViewA { Id = g.Key.Id , Name = g.Key.Name , CurrencyName = g.Key.CurrencyName } ; } } Reduce = results = > from result in results group on new ViewA { Id = result.Id , Name = result.Name , CurrencyName = result.CurrencyName } into g select g.Key ; Reduce = results = > from result in results select new ViewA { Id = result.Id , Name = result.Name , CurrencyName = result.CurrencyName } ; public class A_View : AbstractIndexCreationTask < DocA , ViewA > { public A_View ( ) { Map = docs = > from doc in docs select new ViewA { Id = doc.Id , Name = doc.Name , CurrencyName = doc.Currency.Name } ; // Top-level properties on ViewA that match those on DocA // do not need to be stored in the index . Store ( x = > x.CurrencyName , FieldStorage.Yes ) ; } }"
"using ( var repo = new Repository ( DirectoryPath , null ) ) { var currentCommit = repo.Head.Tip.Sha ; var commit = repo.Commits.Where ( c = > c.Sha == commitHash ) .FirstOrDefault ( ) ; if ( commit == null ) return null ; var sn = `` Stash Name '' ; var now = new DateTimeOffset ( DateTime.Now ) ; var diffCount = repo.Diff.Compare ( ) .Count ( ) ; if ( diffCount > 0 ) repo.Stashes.Add ( new Signature ( sn , `` x @ y.com '' , now ) , options : StashModifiers.Default ) ; repo.CheckoutPaths ( commit.Sha , new List < string > { path } , CheckoutModifiers.None , null , null ) ; var fileText = File.ReadAllText ( path ) ; repo.CheckoutPaths ( currentCommit , new List < string > { path } , CheckoutModifiers.None , null , null ) ; if ( diffCount > 0 ) ; // stash Pop ? }"
public static class RandomProvider { private static int seed = Environment.TickCount ; private static ThreadLocal < Random > randomWrapper = new ThreadLocal < Random > ( ( ) = > new Random ( Interlocked.Increment ( ref seed ) ) ) ; public static Random GetThreadRandom ( ) { return randomWrapper.Value ; } } public static class RandomProvider { private static int _seed = Environment.TickCount ; [ ThreadStatic ] private static Random _random ; /// < summary > /// Gets the thread safe random . /// < /summary > /// < returns > < /returns > public static Random GetThreadRandom ( ) { return _random ? ? ( _random = new Random ( Interlocked.Increment ( ref _seed ) ) ) ; } }
"List < T > Load < T > ( Repository < T > repository ) List < T > Load < T > ( Repository < T > repository ) { Debug.WriteLine ( GetMethodName ( MethodBase.GetCurrentMethod ( ) ) ) ; } string GetMethodName ( MethodBase method ) { Type [ ] arguments = method.GetGenericArguments ( ) ; if ( arguments.Length > 0 ) return string.Format ( `` { 0 } < { 1 } > '' , method.Name , string.Join ( `` , `` , arguments.Select ( x = > x.Name ) ) ) ; else return method.Name ; }"
"static long FactorialRec ( int n , long acc ) { if ( n == 0 ) return acc ; return FactorialRec ( n - 1 , acc * n ) ; } IL_0000 : ldarg.0 IL_0001 : brtrue.s IL_0005IL_0003 : ldarg.1 IL_0004 : ret IL_0005 : ldarg.0 IL_0006 : ldc.i4.1 IL_0007 : sub IL_0008 : ldarg.1 IL_0009 : ldarg.0 IL_000A : conv.i8 IL_000B : mul IL_000C : call UserQuery.FactorialRecIL_0011 : ret IL_0000 : nop IL_0001 : ldarg.0 IL_0002 : ldc.i4.0 IL_0003 : ceq IL_0005 : ldc.i4.0 IL_0006 : ceq IL_0008 : stloc.1 IL_0009 : ldloc.1 IL_000A : brtrue.s IL_0010IL_000C : ldarg.1 IL_000D : stloc.0 IL_000E : br.s IL_001FIL_0010 : ldarg.0 IL_0011 : ldc.i4.1 IL_0012 : sub IL_0013 : ldarg.1 IL_0014 : ldarg.0 IL_0015 : conv.i8 IL_0016 : mul IL_0017 : call UserQuery.FactorialRecIL_001C : stloc.0 IL_001D : br.s IL_001FIL_001F : ldloc.0 IL_0020 : ret"
Process.GetProcessesByName ( `` spotify '' ) ; proc.MainWindowTitle.Substring ( 10 ) ;
static void Main ( ) { if ( Debugger.IsAttached ) RunApp ( ) ; else { try { RunApp ( ) ; } catch ( Exception e ) { LogException ( e ) ; throw ; } } }
"public class TextBoxHeightAdjustable : System.Windows.Forms.TextBox { public TextBoxHeightAdjustable ( ) { this.AutoSize = false ; this.TextAlign = System.Windows.Forms.HorizontalAlignment.Center ; this.SetStyle ( ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw , true ) ; } protected override void OnPaint ( PaintEventArgs e ) { // This never runs no matter what I try ! base.OnPaint ( e ) ; // Create a StringFormat object with the each line of text , and the block // of text centered on the page . StringFormat stringFormat = new StringFormat ( ) ; stringFormat.Alignment = StringAlignment.Center ; stringFormat.LineAlignment = StringAlignment.Center ; e.Graphics.DrawString ( Text , Font , new SolidBrush ( ForeColor ) , ClientRectangle , stringFormat ) ; } }"
"public void RunTheSearch ( ) { //Run the Stored Procedure first SqlConnection connection2 = new SqlConnection ( strCon1 ) ; SqlCommand cmd2 = new SqlCommand ( ) ; cmd2.CommandType = CommandType.StoredProcedure ; cmd2.CommandText = `` sp_Search '' ; cmd2.Connection = connection2 ; // -- - A bunch of code that returns a dataset . Lengthy and unnecessary to my issue connection2.Open ( ) ; SqlDataAdapter adp = new SqlDataAdapter ( cmd2 ) ; DataSet ds = new DataSet ( ) ; adp.Fill ( ds , `` OLDPages '' ) ; //Pagination code so only a set number of records loads at a time . // Done to speed up the loading , since this list gets really long . PagedDataSource pds = new PagedDataSource ( ) ; pds.DataSource = ds.Tables [ `` OLDPages '' ] .DefaultView ; pds.AllowPaging = true ; pds.PageSize = 10 ; //NavMenu.Items.Clear ( ) ; int currentPage ; if ( Request.QueryString [ `` page '' ] ! = null ) { currentPage = Int32.Parse ( Request.QueryString [ `` page '' ] ) ; } else { currentPage = 1 ; } pds.CurrentPageIndex = currentPage - 1 ; //Label1.Text = `` Page `` + currentPage + `` of `` + pds.PageCount ; if ( ! pds.IsFirstPage ) { MenuItem itemMessage = NavMenu.FindItem ( `` First '' ) ; itemMessage.NavigateUrl = Request.CurrentExecutionFilePath + `` ? page=1 '' ; } AcctRepeater.DataSource = pds ; AcctRepeater.DataBind ( ) ; CreatePagingControl ( pds.PageCount , pds.CurrentPageIndex ) ; // End of Pagination code connection2.Close ( ) ; } private void CreatePagingControl ( int PCount , int PIndex ) { int PIndex2 = 0 ; int SCounter = PIndex + 1 ; int RowCount = PCount ; //Allow the pagination menu to always start 5 less than the current page you 're on if ( PIndex < 5 ) { PIndex2 = 0 ; } else { PIndex2 = PIndex - 5 ; } // Show 10 total page numbers . You can increase or shrink that range by changing the 10 to whatever number you want for ( int i = PIndex2 ; i < PIndex2 + 10 & & i < PCount ; i++ ) { NavMenu.Items.Add ( new MenuItem { Text = ( i + 1 ) .ToString ( ) , NavigateUrl = Request.CurrentExecutionFilePath + `` ? page= '' + ( i + 1 ) .ToString ( ) } ) ; // Now determine the selected item so the proper CSS can be applied foreach ( MenuItem item in NavMenu.Items ) { item.Selected = item.Text.Equals ( SCounter.ToString ( ) ) ; } } NavMenu.Items.Add ( new MenuItem { Text = `` Last '' , NavigateUrl = Request.CurrentExecutionFilePath + `` ? page= '' + ( PCount ) } ) ; } < asp : Menu ID= '' NavMenu '' runat= '' server '' CssClass= '' menu '' IncludeStyleBlock= '' false '' Orientation= '' Horizontal '' width= '' 703px '' BackColor= '' # CC3300 '' EnableViewState= '' true '' > < Items > < asp : MenuItem NavigateUrl= '' ~/Default.aspx '' Text= '' First '' Selectable= '' true '' / > < /Items > < /asp : Menu >"
"TimeSpan.ParseExact ( `` -0700 '' , @ '' \-hhmm '' , null , TimeSpanStyles.None ) TimeSpan.ParseExact ( `` -0700 '' , `` hhmm '' , null , TimeSpanStyles.None ) TimeSpan.ParseExact ( `` 0700 '' , new string [ ] { `` hhmm '' , @ '' \-hhmm '' } , null , TimeSpanStyles.None )"
< DataGrid > < DataGrid.Columns > < DataGridTextColumn Header= '' Name '' Binding= '' { Binding Name } '' / > < DataGridTemplateColumn Header= '' Weight '' > < DataGridTemplateColumn.CellTemplate > < DataTemplate > < TextBlock Text= '' { Binding Path=Weight } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < DataGridTemplateColumn.CellEditingTemplate > < DataTemplate > < TextBox Text= '' { Binding Path=Weight } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellEditingTemplate > < /DataGridTemplateColumn > < DataGridTextColumn Header= '' Created At '' Binding= '' { Binding CreatedAt } '' / > < /DataGrid.Columns > < /DataGrid >
"public IList < T > List < T > ( ) where T : class , IMyInterface1 { return mylist } public IList < T > List < T > ( ) where T : class , IMyInterface2 { return mylist }"
"public static async Task TestExAsync ( string filename ) { // the file is missing , but it may be there again // when the exception gets observed 5 seconds later , // hard to debug if ( ! System.IO.File.Exists ( filename ) ) throw new System.IO.FileNotFoundException ( filename ) ; await Task.Delay ( 1000 ) ; } public static void Main ( ) { var task = TestExAsync ( `` filename '' ) ; try { Thread.Sleep ( 5000 ) ; // do other work task.Wait ( ) ; // wait and observe } catch ( AggregateException ex ) { Console.WriteLine ( new { ex.InnerException.Message , task.IsCanceled } ) ; } Console.ReadLine ( ) ; } // disable the `` use await '' warning # pragma warning disable 1998public static async void ThrowNow ( Exception ex ) { throw ex ; } # pragma warning restore 1998public static async Task TestExAsync ( string filename ) { if ( ! System.IO.File.Exists ( filename ) ) ThrowNow ( new System.IO.FileNotFoundException ( filename ) ) ; await Task.Delay ( 1000 ) ; }"
"var current_f = Initial ( ) ; // current accepted function f var current_Pl_f = InitialPl ( ) ; // current plausibility of accepted function f for ( int i = 0 ; i < 10000 ; i++ ) { var candidate_f = Transpose ( current_f ) ; // create a candidate function var candidate_Pl_f = ComputePl ( candidate_f ) ; // compute its plausibility if ( candidate_Pl_f > current_Pl_f ) // candidate Pl has improved { current_f = candidate_f ; // accept the candidate current_Pl_f = candidate_Pl_f ; } else // otherwise flip a coin { int flip = Flip ( ) ; if ( flip == 1 ) // heads { current_f = candidate_f ; // accept it anyway current_Pl_f = candidate_Pl_f ; } else if ( flip == 0 ) // tails { // what to do here ? } } } private Dictionary < char , char > Transpose ( Dictionary < char , char > map , params int [ ] indices ) { foreach ( var index in indices ) { char target_val = map.ElementAt ( index ) .Value ; // get the value at the index char target_key = map.ElementAt ( index ) .Key ; // get the key at the index int _rand = _random.Next ( map.Count ) ; // get a random key ( char ) to swap with char rand_key = map.ElementAt ( _rand ) .Key ; char source_val = map [ rand_key ] ; // the value that currently is used by the source of the swap map [ target_key ] = source_val ; // make the swap map [ rand_key ] = target_val ; } return map ; } public char GetChar ( char in , Dictionary < char , char > theMap ) { return theMap [ char ] ; } public decimal ComputePl ( Func < char , char > candidate , string encrypted , decimal [ ] [ ] _matrix ) { decimal product = default ( decimal ) ; for ( int i = 0 ; i < encrypted.Length ; i++ ) { int j = i + 1 ; if ( j > = encrypted.Length ) { break ; } char a = candidate ( encrypted [ i ] ) ; char b = candidate ( encrypted [ j ] ) ; int _a = GetIndex ( _alphabet , a ) ; // _alphabet is just a string/char [ ] of all avl chars int _b = GetIndex ( _alphabet , b ) ; decimal _freq = _matrix [ _a ] [ _b ] ; if ( product == default ( decimal ) ) { product = _freq ; } else { product = product * _freq ; } } return product ; }"
public interface IRepository < T > { IList < T > GetAll ( ) ; } internal class TrendDataRepository : IRepository < TrendData > { public IList < TrendData > GetAll ( ) { //.. returns some specific data via Entity framework } } public static IEnumerable < string > GetAvailableRepositoryClasses ( ) { var repositories = from t in Assembly.GetExecutingAssembly ( ) .GetTypes ( ) where t.GetInterfaces ( ) .Any ( x = > x.IsGenericType & & x.GetGenericTypeDefinition ( ) == typeof ( IRepository < > ) ) select t.Name ; return repositories ; } someObject = Factory.CreateInstance ( `` TrendData '' ) ; someObject.GetAll ( ) ;
public class Example < T > where T : BaseClass { public int a { get ; set ; } public List < T > mylist { get ; set ; } } public BaseClass { public int num ; } public int MyArbitarySumMethod ( Example example ) //This wo n't compile Example not closed { int sum = 0 ; foreach ( BaseClass i in example.myList ) //myList being infered as an IEnumerable sum += i.num ; sum = sum * example.a ; return sum ; } public interface IExample { public int a { get ; set ; } public IEnumerable < BaseClass > myIEnum { get ; } } public class Example < T > : IExample where T : BaseClass { public int a { get ; set ; } public List < T > mylist { get ; set ; } public IEnumerable < BaseClass > myIEnum { get { return myList ; } } }
"< typeAliases > < typeAlias alias= '' MyType '' type= '' foo.bar.MyType , foo.bar '' / > < /typeAliases > var myType = container.ResolveByTypeAlias ( `` MyType '' )"
"# if DEBUG & & ! DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION UnhandledException += ( sender , e ) = > { if ( global : :System.Diagnostics.Debugger.IsAttached ) global : :System.Diagnostics.Debugger.Break ( ) ; } ; # endif"
"DLL Project - Properties Folder - AssemblyInfo.cs Common Folder - AssemblyInfo_Shared.cs ( Actual ) DLL Project A - Properties Folder - AssemblyInfo.cs // Only values specific to A - AssemblyInfo_Shared.cs ( Link ) DLL Project B - Properties Folder - AssemblyInfo.cs // Only values specific to B - AssemblyInfo_Shared.cs ( Link ) using System.Reflection ; [ assembly : AssemblyTitle ( `` SomeApp.LibA '' ) ] [ assembly : AssemblyDescription ( `` This is the code for A '' ) ] using System.Reflection ; [ assembly : AssemblyTitle ( `` SomeApp.LibB '' ) ] [ assembly : AssemblyDescription ( `` This is the code for Project B '' ) ] using System ; using System.Reflection ; using System.Resources ; using System.Runtime.InteropServices ; [ assembly : AssemblyProduct ( `` SomeApp '' ) ] [ assembly : AssemblyVersion ( `` 1.4.3.0 '' ) ] [ assembly : AssemblyFileVersion ( `` 1.4.3.0 '' ) ] [ assembly : AssemblyCompany ( `` MyCo '' ) ] [ assembly : AssemblyCopyright ( `` Copyright ( c ) 2010-2018 , MyCo '' ) ] [ assembly : ComVisible ( false ) ] [ assembly : NeutralResourcesLanguage ( `` en-US '' ) ] [ assembly : CLSCompliant ( true ) ]"
// Java examplepublic class FooApplicationService { @ Transactional public void DoSomething ( ) { // do something ... } } // .NET examplepublic class FooApplicationService { public void DoSomething ( ) { using ( var transaction = new TransactionScope ( ) ) { // do something ... transaction.Complete ( ) ; } } }
"MethodDefinition method = new MethodDefinition ( `` .cctor '' , Mono.Cecil.MethodAttributes.Private | Mono.Cecil.MethodAttributes.Static | Mono.Cecil.MethodAttributes.HideBySig | Mono.Cecil.MethodAttributes.SpecialName | Mono.Cecil.MethodAttributes.RTSpecialName , mod.Import ( typeof ( void ) ) ) ;"
"private Task _keepAliveTask ; // get 's assigned by object initializerpublic async Task EndSession ( ) { _cancellationTokenSource.Cancel ( ) ; // cancels the _keepAliveTask await _logOutCommand.LogOutIfPossible ( ) ; await _keepAliveTask ; } public async Task EndSession_MustWaitForKeepAliveTaskToEnd ( ) { var keepAliveTask = new Mock < Task > ( ) ; // for simplicity sake i slightly differ from the other examples // by passing the task as method parameter await EndSession ( keepAliveTask ) ; keepAliveTask.VerifyAwaited ( ) ; // this is what i want to achieve } public Task EndSession ( ) { _cancellationTokenSource.Cancel ( ) ; return _keepAliveTask ; } public void EndSession_MustWaitForKeepAliveTaskToEnd ( ) { var keepAliveTask = new Mock < Task > ( ) ; // for simplicity sake i slightly differ from the other examples // by passing the task as method parameter Task returnedTask = EndSession ( keepAliveTask ) ; returnedTask.Should ( ) .be ( keepAliveTask ) ; } public Task EndSession ( ) { _cancellationTokenSource.Cancel ( ) ; // cancels the _keepAliveTask _logOutCommand.LogOutIfPossible ( ) .Wait ( ) ; return _keepAliveTask ; } [ Test ] public void EndSession_MustWaitForKeepAliveTaskToEnd ( ) { var keepAlive = new TaskCompletionSource < bool > ( ) ; _cancelableLoopingTaskFactory .Setup ( x = > x.Start ( It.IsAny < ICancelableLoopStep > ( ) , It.IsAny < CancellationToken > ( ) ) ) .Returns ( keepAlive.Task ) ; _testee.StartSendingKeepAlive ( ) ; _testee.EndSession ( ) .Wait ( TimeSpan.FromMilliseconds ( 20 ) ) .Should ( ) .BeFalse ( ) ; }"
public class Person { public bool IsApproved { get ; set ; } } @ Html.CheckBoxFor ( x = > x.IsApproved ) @ Html.CheckBox ( `` IsApproved '' ) // CheckBoxFor result < input data-val= '' true '' data-val-required= '' The IsApproved field is required . '' id= '' IsApproved '' name= '' IsApproved '' type= '' checkbox '' value= '' true '' > < input name= '' IsApproved '' type= '' hidden '' value= '' false '' > // CheckBox result < input id= '' IsApproved '' name= '' IsApproved '' type= '' checkbox '' value= '' true '' > < input name= '' IsApproved '' type= '' hidden '' value= '' false '' >
"public IDictionary Items { get ; } void Main ( ) { var x = new object ( ) ; x.Props ( ) .y = `` hello '' ; } static class ExpandoExtension { static IDictionary < object , dynamic > props = new Dictionary < object , dynamic > ( ) ; public static dynamic Props ( this object key ) { dynamic o ; if ( ! props.TryGetValue ( key , out o ) ) { o = new ExpandoObject ( ) ; props [ key ] = o ; } return o ; } }"
First instruction Second instruction Can they be swapped ? Read Read NoRead Write NoWrite Write No Write Read Yes ! < -- --
"var users = ( from usr in dbContext.User.AsNoTracking ( ) select new { usr.UserId , usr.UserName } ) .ToList ( ) ; var logInfo= ( from log in dbContext1.LogInfo.AsNoTracking ( ) select new { log.UserId , log.LogInformation } ) .AsQueryable ( ) ; var finalQuery= ( from usr in users join log in logInfo on usr.UserId equals log.UserId select new { usr.UserName , log.LogInformation } .ToList ( ) ;"
"public static foo ( ( ) = > Object.property , value ) ; public static object GetOwningObject < T > ( this Expression < Func < T > > @ this ) { var memberExpression = @ this.Body as MemberExpression ; if ( memberExpression ! = null ) { var fieldExpression = memberExpression.Expression as MemberExpression ; if ( fieldExpression ! = null ) { var constExpression = fieldExpression.Expression as ConstantExpression ; var field = fieldExpression.Member as FieldInfo ; if ( constExpression ! = null ) if ( field ! = null ) return field.GetValue ( constExpression.Value ) ; } } return null ; }"
"public IList < User > GetUser ( ) { try { return _repository.GetUsers ( ) ; } catch ( WebException ex ) { ErrorMessages.Add ( `` ... '' ) ; _logger.ErrorException ( `` ... '' , ex ) ; } catch ( SoapException ex ) { ErrorMessages.Add ( `` ... '' ) ; _logger.ErrorException ( `` ... '' , ex ) ; } ... etc }"
"bool CheckForNull ( object a , object b ) { if ( a == null & & b == null ) { return false ; } if ( a == null || b == null ) { return true ; } return false ; } bool CheckForNull ( object a , object b ) { return a == null & & b ! = null || a ! = null & & b == null ; }"
"private void checkedListBox1_ItemCheck ( object sender , ItemCheckEventArgs e ) { label1.Text= checkedListBox1.CheckedIndices.Count ; }"
class test { public string mystring ( ) { return `` BLAH '' ; } } test mystring = new test ( ) ; mystring.mystring ( ) ;
"EnvelopesApi envelopesApi = new EnvelopesApi ( ) ; Envelope envelope = envelopesApi.GetEnvelope ( accountId , envelopeId ) ; envelope.Status = `` voided '' ; envelope.VoidedReason = `` This envelope was voided by `` + currentUserName ; // create the recipient view ( aka signing URL ) var updateSummary = envelopesApi.Update ( accountId , envelopeId , envelope ) ; return updateSummary ; { `` errorCode '' : `` INVALID_REQUEST_PARAMETER '' , `` message '' : `` The request contained at least one invalid parameter . Value for 'purgeState ' must be 'documents_queued ' or 'documents_and_metadata_queued ' . '' }"
"routes.MapRoute ( `` route1 '' , `` { controller } / { month } - { year } / { action } / { user } '' ) ; routes.MapRoute ( `` route2 '' , `` { controller } / { month } - { year } / { action } '' ) ; [ TestMethod ] public void Test1 ( ) { RouteCollection routes = new RouteCollection ( ) ; MvcApplication.RegisterRoutes ( routes ) ; RequestContext context = new RequestContext ( CreateHttpContext ( ) , new RouteData ( ) ) ; DateTime now = DateTime.Now ; string result ; context.RouteData.Values.Add ( `` controller '' , `` Home '' ) ; context.RouteData.Values.Add ( `` action '' , `` Index '' ) ; context.RouteData.Values.Add ( `` user '' , `` user1 '' ) ; result = UrlHelper.GenerateUrl ( null , `` Index '' , null , new RouteValueDictionary ( new { month = now.Month , year = now.Year } ) , routes , context , true ) ; //OK , result == /Home/10-2012/Index/user1 Assert.AreEqual ( string.Format ( `` /Home/ { 0 } - { 1 } /Index/user1 '' , now.Month , now.Year ) , result ) ; } [ TestMethod ] public void Test2 ( ) { RouteCollection routes = new RouteCollection ( ) ; MvcApplication.RegisterRoutes ( routes ) ; RequestContext context = new RequestContext ( CreateHttpContext ( ) , new RouteData ( ) ) ; DateTime now = DateTime.Now ; string result ; context.RouteData.Values.Add ( `` controller '' , `` Home '' ) ; context.RouteData.Values.Add ( `` action '' , `` Index '' ) ; context.RouteData.Values.Add ( `` user '' , `` user1 '' ) ; context.RouteData.Values.Add ( `` month '' , now.Month + 1 ) ; context.RouteData.Values.Add ( `` year '' , now.Year ) ; result = UrlHelper.GenerateUrl ( null , `` Index '' , null , new RouteValueDictionary ( new { month = now.Month , year = now.Year } ) , routes , context , true ) ; //Error because result == /Home/10-2012/Index Assert.AreEqual ( string.Format ( `` /Home/ { 0 } - { 1 } /Index/user1 '' , now.Month , now.Year ) , result ) ; } [ TestMethod ] public void Test3 ( ) { RouteCollection routes = new RouteCollection ( ) ; MvcApplication.RegisterRoutes ( routes ) ; RequestContext context = new RequestContext ( CreateHttpContext ( ) , new RouteData ( ) ) ; DateTime now = DateTime.Now ; string result ; context.RouteData.Values.Add ( `` controller '' , `` Home '' ) ; context.RouteData.Values.Add ( `` action '' , `` Index '' ) ; context.RouteData.Values.Add ( `` month '' , now.Month.ToString ( ) ) ; context.RouteData.Values.Add ( `` year '' , now.Year.ToString ( ) ) ; result = UrlHelper.GenerateUrl ( null , `` Index '' , null , new RouteValueDictionary ( new { month = now.Month + 1 , year = now.Year + 1 } ) , routes , context , true ) ; Assert.AreEqual ( string.Format ( `` /Home/ { 0 } - { 1 } /Index '' , now.Month + 1 , now.Year + 1 ) , result ) ; } public static MvcHtmlString GetPeriodLink ( this HtmlHelper html , RequestContext context , DateTime date ) { UrlHelper urlHelper = new UrlHelper ( context ) ; return MvcHtmlString.Create ( urlHelper.Action ( ( string ) context.RouteData.Values [ `` action '' ] , new { year = date.Year , month = date.Month } ) ) ; }"
var docs = db [ collectionName ] .Find ( query ) ; docs.SetBatchSize ( numOfResultsToFetchAtATime ) ; foreach ( var d in docs ) { // do processing }
"delegate void TestDelegate ( ) ; TestDelegate testDelegate = new TestDelegate ( myObject.SomeMethod ) ; multicastdelegate+=newmethodtobereferencemulticastdelegate ( ) ; using System ; namespace LambdasETs { public delegate void IsEvenNumberEventHandler ( int numberThatIsEven ) ; public class IsEvenNumberFound { public IsEvenNumberEventHandler IsEvenNumberEvent ; private int number ; public void InputNumber ( int n ) { if ( number % 2 ==0 ) { if ( IsEvenNumberEvent ! = null ) { IsEvenNumberEvent ( n ) ; } } } public static void Main ( ) { IsEvenNumberFound isEvenNumberFound = new IsEvenNumberFound ( ) ; isEvenNumberFound.IsEvenNumberEvent += IsEvenNumberAction ; isEvenNumberFound.InputNumber ( 10 ) ; Console.ReadLine ( ) ; } public static void IsEvenNumberAction ( int number ) { Console.WriteLine ( `` { 0 } is an even number ! `` , number ) ; } } }"
"public GetMemberByName ( MyObject myobj , string name ) { switch ( name ) { case `` PropOne '' : return myobj.prop1 ; case `` PropTwo '' : return myobj.prop2 ; } }"
"private IEnumerable < byte [ ] > ExtractFromByteStream ( Byte [ ] byteStream ) { yield return byteStream ; // Plus operations on the array } foreach ( byte [ ] myByteArray in ExtractFromByteStream ( byteStream ) ) { // Do stuff with myByteArray } var streamTransformManyBlock = new TransformManyBlock < byte [ ] , byte [ ] > ( ExtractFromByteStream ) ;"
if ( f.FieldType.IsAssignableFrom ( `` '' .GetType ( ) ) )
string retValue = `` '' ; retValue = LongRunningHeavyFunction ( ) ; txtResult.Text = retValue ; string retValue = `` '' ; Thread thread = new Thread ( ( ) = > { retValue = LongRunningHeavyFunction ( ) ; } ) ; thread.Start ( ) ; thread.Join ( ) ; txtResult.Text = retValue ;
SyntaxNode node = ... ; //Some syntax nodevar methodInvocations = node.DescendantNodesAndSelf ( ) .OfType < InvocationExpressionSyntax > ( ) ; //Process these method invocations
Application -- > Name -- > Application Amount -- > Application Contacts -- > -- > Contact 1 -- > -- > -- > Address -- > -- > Contact 2 -- > -- > -- > Address So the order of submission1 ) Create Application Resource -- > POST /Application -- > Get ID2 ) Create Contact 1 Resource -- > POST /Application/id/Contacts -- > Get ID3 ) Create Contact 1 Address Resource -- > POST /Application/id/Contacts/id/Addresses4 ) Create Contact 2 Resource -- > POST /Application/id/Contacts -- > Get ID 5 ) Create Contact 2 Address Resource -- > POST /Application/id/Contacts/id/Addresses6 ) DECIDE TO SUBMIT HERE < -- - ? ? HOW ?
"class Led { private uint _r = 0 , _g = 0 , _b = 0 ; public uint R { get { return _r ; } set { _r = value.Clamp ( 0 , 255 ) ; // nope _r = value.Clamp < uint > ( 0 , 255 ) ; // works } } } // https : //stackoverflow.com/a/2683487static class Clamp { public static T Clamp < T > ( this T val , T min , T max ) where T : IComparable < T > { if ( val.CompareTo ( min ) < 0 ) return min ; else if ( val.CompareTo ( max ) > 0 ) return max ; else return val ; } }"
"// how to test a syllable , just for the purpose of this example bool IsSyllable ( string possibleSyllable ) { return Regex.IsMatch ( possibleSyllable , `` ^ ( mis|und|un|der|er|stand ) $ '' ) ; } List < string > BreakIntoSyllables ( string word ) { // the code here is what I 'm trying to write // if 'word ' is `` misunderstand '' , I 'd like this to return // = > { `` mis '' , '' und '' , '' er '' , '' stand '' } , { `` mis '' , '' un '' , '' der '' , '' stand '' } // and for any other combinations to be not included }"
"public class CastleWindsorActionInvoker : ControllerActionInvoker { private readonly IKernel kernel ; public CastleWindsorActionInvoker ( IKernel kernel ) { this.kernel = kernel ; } protected override ActionExecutedContext InvokeActionMethodWithFilters ( ControllerContext controllerContext , IList < IActionFilter > filters , ActionDescriptor actionDescriptor , IDictionary < string , object > parameters ) { foreach ( IActionFilter filter in filters ) { kernel.InjectProperties ( null , filter ) ; } return base.InvokeActionMethodWithFilters ( controllerContext , filters , actionDescriptor , parameters ) ; } protected override AuthorizationContext InvokeAuthorizationFilters ( ControllerContext controllerContext , IList < IAuthorizationFilter > filters , ActionDescriptor actionDescriptor ) { foreach ( IAuthorizationFilter filter in filters ) { Type type = filter.GetType ( ) ; IEnumerable < INamedInstanceAttribute > namedInstanceAttributes = type.GetCustomAttributes ( typeof ( INamedInstanceAttribute ) , false ) as IEnumerable < INamedInstanceAttribute > ; if ( namedInstanceAttributes ! = null ) { this.kernel.InjectProperties ( namedInstanceAttributes , filter ) ; } else { this.kernel.InjectProperties ( null , filter ) ; } } return base.InvokeAuthorizationFilters ( controllerContext , filters , actionDescriptor ) ; } } public class WindsorDependencyMvcResolver : System.Web.Mvc.IDependencyResolver { public IWindsorContainer container { get ; protected set ; } public WindsorDependencyMvcResolver ( IWindsorContainer container ) { if ( container == null ) { throw new ArgumentNullException ( `` container '' ) ; } this.container = container ; } public object GetService ( Type serviceType ) { try { return container.Resolve ( serviceType ) ; } catch ( ComponentNotFoundException ) { return null ; } } public IEnumerable < object > GetServices ( Type serviceType ) { return container.ResolveAll ( serviceType ) .Cast < object > ( ) ; } } public class CastleWindsorMvcFactory : DefaultControllerFactory { private readonly IKernel kernel ; public CastleWindsorMvcFactory ( IKernel kernel ) { this.kernel = kernel ; } protected override IController GetControllerInstance ( RequestContext requestContext , Type controllerType ) { if ( controllerType == null ) { throw new HttpException ( 404 , string.Format ( `` The controller for path ' { 0 } ' could not be found . `` , requestContext.HttpContext.Request.Path ) ) ; } Controller controller = ( Controller ) kernel.Resolve ( controllerType ) ; if ( controller ! = null ) { controller.ActionInvoker = kernel.Resolve < IActionInvoker > ( ) ; } return controller ; } public override void ReleaseController ( IController controller ) { kernel.ReleaseComponent ( controller ) ; } } ControllerBuilder.Current.SetControllerFactory ( new CastleWindsorMvcFactory ( container.Kernel ) ) ; DependencyResolver.SetResolver ( new WindsorDependencyMvcResolver ( container ) ) ; public async Task < ActionResult > Index ( ) { return View ( ) ; }"
"string [ ] filter = { `` bad '' , `` words '' , `` frakk '' } ; string [ ] foo = { `` this is a lol string that is allowed '' , `` this is another lol frakk string that is not allowed ! `` } ; var items = from item in foo where ( item.IndexOf ( ( from f in filter select f ) .ToString ( ) ) == 0 ) select item ;"
"public bool Equals ( MyClass obj ) { // If both refer to the same reference they are equal . if ( ReferenceEquals ( obj , this ) ) return true ; // If the other object is null they are not equal because in C # this can not be null . if ( ReferenceEquals ( obj , null ) ) return false ; // Compare data to evaluate equality return _data.Equals ( obj._data ) ; } public override bool Equals ( object obj ) { // If both refer to the same reference they are equal . if ( ReferenceEquals ( obj , this ) ) return true ; // If the other object is null or is of a different types the objects are not equal . if ( ReferenceEquals ( obj , null ) || obj.GetType ( ) ! = GetType ( ) ) return false ; // Use type-safe equality comparison return Equals ( ( MyClass ) obj ) ; } public override int GetHashCode ( ) { // Use data 's hash code as our hashcode return _data.GetHashCode ( ) ; }"
"using System ; using System.Security.Permissions ; using System.Threading.Tasks ; using System.Windows.Threading ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace MyApp { [ TestClass ] public class MyTests { private int _value ; [ TestMethod ] public async Task TimerTest ( ) { _value = 0 ; var timer = new DispatcherTimer { Interval = TimeSpan.FromMilliseconds ( 10 ) } ; timer.Tick += IncrementValue ; timer.Start ( ) ; await Task.Delay ( 15 ) ; DispatcherUtils.DoEvents ( ) ; Assert.AreNotEqual ( 0 , _value ) ; } private void IncrementValue ( object sender , EventArgs e ) { _value++ ; } } internal class DispatcherUtils { [ SecurityPermission ( SecurityAction.Demand , Flags = SecurityPermissionFlag.UnmanagedCode ) ] public static void DoEvents ( ) { var frame = new DispatcherFrame ( ) ; Dispatcher.CurrentDispatcher.BeginInvoke ( DispatcherPriority.Background , new DispatcherOperationCallback ( ExitFrame ) , frame ) ; Dispatcher.PushFrame ( frame ) ; } private static object ExitFrame ( object frame ) { ( ( DispatcherFrame ) frame ) .Continue = false ; return null ; } } }"
"public Form1 ( ) { InitializeComponent ( ) ; pictureBox1.Paint += new PaintEventHandler ( pic_Paint ) ; } public Point positionCursor { get ; set ; } private List < Point > points = new List < Point > ( ) ; public int circleNumber { get ; set ; } private void pictureBox1_DoubleClick ( object sender , EventArgs e ) { positionCursor = this.PointToClient ( new Point ( Cursor.Position.X - 25 , Cursor.Position.Y - 25 ) ) ; points.Add ( positionCursor ) ; Label lbl = new Label ( ) ; lbl.BackColor = Color.Transparent ; lbl.Font = new Font ( `` Arial '' , 7 ) ; lbl.Size = new Size ( 20 , 15 ) ; if ( circleNumber > = 10 ) { lbl.Location = new Point ( points [ circleNumber ] .X + 3 , points [ circleNumber ] .Y + 6 ) ; } else { lbl.Location = new Point ( points [ circleNumber ] .X + 7 , points [ circleNumber ] .Y + 7 ) ; } lbl.Text = circleNumber.ToString ( ) ; pictureBox1.Controls.Add ( lbl ) ; circleNumber++ ; pictureBox1.Invalidate ( ) ; } private void pic_Paint ( object sender , PaintEventArgs e ) { Graphics g = e.Graphics ; g.SmoothingMode = SmoothingMode.AntiAlias ; using ( var pen = new Pen ( Color.DimGray , 2 ) ) { foreach ( Point pt in points ) { g.FillEllipse ( Brushes.White , pt.X , pt.Y , 25 , 25 ) ; g.DrawEllipse ( pen , pt.X , pt.Y , 26 , 26 ) ; } } }"
string magicString = nameof ( magicString ) ; var magicString = nameof ( magicString ) ;
message.UseEncryption = true ; message.EncryptionAlgorithm = EncryptionAlgorithm.Rc2 ;
"public abstract class BaseClass { public virtual void SomeMethod ( string someString , Func < bool > function ) { //do something } } public class DerivedClass : BaseClass { public void DoSomething ( ) { SomeMethod ( `` foo '' , ( ) = > true ) ; } } [ TestClass ] public class Tests { [ TestMethod ] public void TestMethod1 ( ) { var test = new Mock < DerivedClass > ( ) ; test.Object.DoSomething ( ) ; test.Verify ( x = > x.SomeMethod ( `` foo '' , ( ) = > true ) , Times.AtLeastOnce ) ; } } public abstract class BaseClass { public virtual void SomeMethod ( string someString ) { //do something } } public class DerivedClass : BaseClass { public void DoSomething ( ) { SomeMethod ( `` foo '' ) ; } } [ TestClass ] public class Tests { [ TestMethod ] public void TestMethod1 ( ) { var test = new Mock < DerivedClass > ( ) ; test.Object.DoSomething ( ) ; test.Verify ( x = > x.SomeMethod ( `` foo '' ) , Times.AtLeastOnce ) ; } } Expected invocation on the mock at least once , but was never performed : x = > x.SomeMethod ( `` foo '' , ( ) = > True ) No setups configured.Performed invocations : BaseClass.SomeMethod ( `` foo '' , System.Func1 [ System.Boolean ] ) ` Test method UnitTestProject1.Tests.TestMethod1 threw exception : Moq.MockException : Expected invocation on the mock at least once , but was never performed : x = > x.SomeMethod ( `` foo '' , ( ) = > True ) No setups configured.Performed invocations : BaseClass.SomeMethod ( `` foo '' , System.Func ` 1 [ System.Boolean ] ) at Moq.Mock.ThrowVerifyException ( MethodCall expected , IEnumerable ` 1 setups , IEnumerable ` 1 actualCalls , Expression expression , Times times , Int32 callCount ) at Moq.Mock.VerifyCalls ( Interceptor targetInterceptor , MethodCall expected , Expression expression , Times times ) at Moq.Mock.Verify ( Mock ` 1 mock , Expression ` 1 expression , Times times , String failMessage ) at Moq.Mock ` 1.Verify ( Expression ` 1 expression , Times times ) at Moq.Mock ` 1.Verify ( Expression ` 1 expression , Func ` 1 times ) at UnitTestProject1.Tests.TestMethod1 ( ) in UnitTest1.cs : line 16"
"Kernel.Bind < Foo > ( ) .ToSelf ( ) ; Kernel.InterceptReplace < Foo > ( foo = > foo.ThrowsAnError ( ) , invocation = > { } ) ; Kernel.Bind < Foo > ( ) .ToSelf ( ) ; Kernel.InterceptReplace < Foo > ( foo = > foo.ThrowsAnError ( **param goes here** ) , invocation = > { } ) ;"
"public class A { public int Id { get ; set ; } public string Name { get ; set ; } } class AMap : EntityTypeConfiguration < A > { public AMap ( ) { HasKey ( a = > a.Id ) ; Property ( a = > a.Name ) .IsRequired ( ) .IsMaxLength ( ) .HasColumnName ( `` Name '' ) ; Property ( a = > a.Id ) .HasColumnName ( `` ID '' ) ; } } public class SomeContext : DbContext { public SomeContext ( DbConnection connection , bool ownsConnection ) : base ( connection , ownsConnection ) { } public DbSet < A > As { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { base.OnModelCreating ( modelBuilder ) ; modelBuilder.Configurations.Add ( new AMap ( ) ) ; } } [ TestFixture ] public class BasicTest { private readonly HashSet < string > m_databases = new HashSet < string > ( ) ; # region SetUp/TearDown [ TestFixtureSetUp ] public void SetUp ( ) { System.Data.Entity.Database.SetInitializer ( new CreateDatabaseIfNotExists < SomeContext > ( ) ) ; } [ TestFixtureTearDown ] public void TearDown ( ) { foreach ( var database in m_databases ) { if ( ! string.IsNullOrWhiteSpace ( database ) ) DeleteDatabase ( database ) ; } } # endregion [ Test ] public void RepeatedCreateDeleteSameName ( ) { var dbName = Guid.NewGuid ( ) .ToString ( ) ; m_databases.Add ( dbName ) ; for ( int i = 0 ; i < 2 ; i++ ) { Assert.IsTrue ( CreateDatabase ( dbName ) , `` failed to create database '' ) ; Assert.IsTrue ( DeleteDatabase ( dbName ) , `` failed to delete database '' ) ; } Console.WriteLine ( ) ; } [ Test ] public void RepeatedCreateDeleteDifferentName ( ) { for ( int i = 0 ; i < 2 ; i++ ) { var dbName = Guid.NewGuid ( ) .ToString ( ) ; if ( m_databases.Add ( dbName ) ) { Assert.IsTrue ( CreateDatabase ( dbName ) , `` failed to create database '' ) ; Assert.IsTrue ( DeleteDatabase ( dbName ) , `` failed to delete database '' ) ; } } Console.WriteLine ( ) ; } [ Test ] public void RepeatedCreateDeleteReuseName ( ) { var testDatabases = new HashSet < string > ( ) ; for ( int i = 0 ; i < 3 ; i++ ) { var dbName = Guid.NewGuid ( ) .ToString ( ) ; if ( m_databases.Add ( dbName ) ) { testDatabases.Add ( dbName ) ; Assert.IsTrue ( CreateDatabase ( dbName ) , `` failed to create database '' ) ; Assert.IsTrue ( DeleteDatabase ( dbName ) , `` failed to delete database '' ) ; } } var repeatName = testDatabases.OrderBy ( n = > n ) .FirstOrDefault ( ) ; Assert.IsTrue ( CreateDatabase ( repeatName ) , `` failed to create database '' ) ; Assert.IsTrue ( DeleteDatabase ( repeatName ) , `` failed to delete database '' ) ; Console.WriteLine ( ) ; } # region Helpers private static bool CreateDatabase ( string databaseName ) { Console.Write ( `` creating database ' '' + databaseName + `` ' ... '' ) ; using ( var connection = CreateConnection ( CreateConnectionString ( databaseName ) ) ) { using ( var context = new SomeContext ( connection , false ) ) { var a = context.As.ToList ( ) ; // CompatibleWithModel must not be the first call var result = context.Database.CompatibleWithModel ( false ) ; Console.WriteLine ( result ? `` DONE '' : `` FAIL '' ) ; return result ; } } } private static bool DeleteDatabase ( string databaseName ) { using ( var connection = CreateConnection ( CreateConnectionString ( databaseName ) ) ) { if ( System.Data.Entity.Database.Exists ( connection ) ) { Console.Write ( `` deleting database ' '' + databaseName + `` ' ... '' ) ; var result = System.Data.Entity.Database.Delete ( connection ) ; Console.WriteLine ( result ? `` DONE '' : `` FAIL '' ) ; return result ; } return true ; } } private static DbConnection CreateConnection ( string connectionString ) { return new SqlConnection ( connectionString ) ; } private static string CreateConnectionString ( string databaseName ) { var builder = new SqlConnectionStringBuilder { DataSource = `` server '' , InitialCatalog = databaseName , IntegratedSecurity = false , MultipleActiveResultSets = false , PersistSecurityInfo = true , UserID = `` username '' , Password = `` password '' } ; return builder.ConnectionString ; } # endregion }"
"using System ; using System.Diagnostics.Contracts ; using System.Linq.Expressions ; namespace Contracts { class Data { public object TestData1 { get ; set ; } public object TestData2 { get ; set ; } } class Program { static void Main ( ) { Data d = new Data ( ) ; Method ( d ) ; } static void Method ( Data d ) { Contract.Requires ( Methods.TestMethod1 ( `` test '' ) ) ; Contract.Requires ( Methods.TestMethod2 ( `` test1 '' , `` test2 '' ) ) ; Contract.Requires ( Methods.TestMethod3 ( d , x = > x.TestData1 ) ) ; Contract.Requires ( Methods.TestMethod4 ( d , x = > x.TestData1 , x = > x.TestData2 ) ) ; } } static class Methods { [ Pure ] public static bool TestMethod1 ( string str ) { return true ; } [ Pure ] public static bool TestMethod2 ( params string [ ] strs ) { return true ; } [ Pure ] public static bool TestMethod3 < T > ( T obj , Expression < Func < T , object > > exp ) { return true ; } [ Pure ] public static bool TestMethod4 < T > ( T obj , params Expression < Func < T , object > > [ ] exps ) { return true ; } } }"
"public IEnumerable < string > Combinations ( string input ) { char [ ] buffer = new char [ input.Length ] ; for ( int i = 0 ; i ! = buffer.Length ; ++i ) { buffer [ i ] = input [ i ] ; } //return the original input yield return new string ( buffer ) ; //look for 0 's and replace them for ( int i = 0 ; i ! = buffer.Length ; ++i ) { if ( input [ i ] == ' 0 ' ) { buffer [ i ] = ' o ' ; yield return new string ( buffer ) ; buffer [ i ] = ' 0 ' ; } } //handle the replace-all scenario yield return input.Replace ( `` 0 '' , `` o '' ) ; }"
"public partial class Project : System.Web.UI.MasterPage { protected void Page_Load ( object sender , EventArgs e ) { } } < % @ Master Language= '' C # '' AutoEventWireup= '' true '' CodeFile= '' Project.master.cs '' Inherits= '' Project '' % >"
string GetUserSessionID ( int UserID ) string sessionID = GetUserSessionID ( 1 ) if ( null == sessionID & & userIsAllowedToGetSession ) { session = GetNewUserSession ( 1 ) ; } if ( string.Empty == sessionID ) bool SessionExists ( int userID ) ; string GetUserSessionID ( int UserID ) ; if ( ! SessionExists ( 1 ) & & userIsAllowedToGetSession ) ) { session = GetNewUserSession ( 1 ) ; } else { session = GetUserSessionID ( 1 ) ; }
"Edit : Steps : Start at target day . Then move backwards until no events are carried over from another day.From there , start counting hours , and keep track of carried over hours . Day can not last more than ActualDayLength ( ) Then , once you know that , work your way back to target and then calculate actual occupied hours . public decimal GetActualDayLength ( DateTime day , Schedule s ) { var e = Schedules.GetAllWithElement ( ) ; var t = Timeless ( day ) ; var locked = from p in e where p.EmployeID == s.EmployeID & & ( ( p.DateTo.Value.Date ) > = t & & Timeless ( p.DateFrom.Value ) < = t ) & & p.IsLocked select p ; decimal hrs = 0.0M ; foreach ( var c in locked ) { if ( c.Hours.Value < = DaysManager.GetDayHours ( ) ) hrs += c.Hours.Value ; else if ( Timeless ( c.DateTo.Value ) ! = t ) hrs += DaysManager.GetDayHours ( ) ; else { if ( c.Hours.Value % DaysManager.GetDayHours ( ) > 0 ) hrs += c.Hours.Value % DaysManager.GetDayHours ( ) ; else hrs += DaysManager.GetDayHours ( ) ; } } return DaysManager.GetDayHours ( ) - hrs ; } public decimal GetHours ( IEnumerable < Schedule > s , DateTime today ) { DateTime t = Timeless ( today ) ; decimal hrs = 0 ; foreach ( Schedule c in s ) { if ( c.Hours.Value < = DaysManager.GetDayHours ( ) ) hrs += c.Hours.Value ; else if ( Timeless ( c.DateTo.Value ) ! = t ) hrs += DaysManager.GetDayHours ( ) ; else { if ( c.Hours.Value % DaysManager.GetDayHours ( ) > 0 ) hrs += c.Hours.Value % DaysManager.GetDayHours ( ) ; else hrs += DaysManager.GetDayHours ( ) ; } } return hrs ; } public IEnumerable < Schedule > GetAllToday ( DateTime date , int employeeID , Schedule current ) { DateTime t = Timeless ( date ) ; int sid = current == null ? -1 : current.ScheduleID ; var e = Schedules.GetAllWithElement ( ) ; return from p in e where ( ( ( Timeless ( p.DateTo.Value ) > = t & & Timeless ( p.DateFrom.Value ) < = t & & p.EmployeID == employeeID ) & & ( p.IsLocked || ( Timeless ( p.DateFrom.Value ) < t & & ( sid == -1 ? true : Timeless ( p.DateFrom.Value ) < current.DateFrom.Value ) ) || bumpedList.Any ( d = > d.ScheduleID == p.ScheduleID ) ) & & p.ScheduleID ! = sid ) || ( ( Timeless ( p.DateTo.Value ) > = t & & ( Timeless ( p.DateFrom.Value ) == t || ( Timeless ( p.DateFrom.Value ) < t & & ( sid == -1 ? true : Timeless ( p.DateFrom.Value ) > current.DateFrom.Value ) ) ) & & p.EmployeID == employeeID ) & & ! p.IsLocked & & ! bumpedList.Any ( d = > d.ScheduleID == p.ScheduleID ) & & p.ScheduleID ! = sid ) ) & & p.ScheduleID ! = sid select p ; } DateFromDateToHoursEmployeeID [ global : :System.Data.Linq.Mapping.TableAttribute ( Name= '' dbo.Schedule '' ) ] public partial class Schedule : INotifyPropertyChanging , INotifyPropertyChanged { private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs ( String.Empty ) ; private int _ScheduleID ; private System.Nullable < System.DateTime > _DateFrom ; private System.Nullable < decimal > _Hours ; private System.Nullable < int > _EmployeID ; private System.Nullable < int > _RecurringID ; private System.Nullable < int > _Priority ; private System.Nullable < System.DateTime > _DateTo ; private bool _IsLocked ; private System.Nullable < int > _BumpPriority ; private EntitySet < Case > _Cases ; private EntitySet < Project > _Projects ; private EntitySet < Task > _Tasks ; private EntitySet < Task > _Tasks1 ; private EntityRef < Employee > _Employee ; private EntityRef < Recurring > _Recurring ; # region Extensibility Method Definitions partial void OnLoaded ( ) ; partial void OnValidate ( System.Data.Linq.ChangeAction action ) ; partial void OnCreated ( ) ; partial void OnScheduleIDChanging ( int value ) ; partial void OnScheduleIDChanged ( ) ; partial void OnDateFromChanging ( System.Nullable < System.DateTime > value ) ; partial void OnDateFromChanged ( ) ; partial void OnHoursChanging ( System.Nullable < decimal > value ) ; partial void OnHoursChanged ( ) ; partial void OnEmployeIDChanging ( System.Nullable < int > value ) ; partial void OnEmployeIDChanged ( ) ; partial void OnRecurringIDChanging ( System.Nullable < int > value ) ; partial void OnRecurringIDChanged ( ) ; partial void OnPriorityChanging ( System.Nullable < int > value ) ; partial void OnPriorityChanged ( ) ; partial void OnDateToChanging ( System.Nullable < System.DateTime > value ) ; partial void OnDateToChanged ( ) ; partial void OnIsLockedChanging ( bool value ) ; partial void OnIsLockedChanged ( ) ; partial void OnBumpPriorityChanging ( System.Nullable < int > value ) ; partial void OnBumpPriorityChanged ( ) ; # endregion public Schedule ( ) { this._Cases = new EntitySet < Case > ( new Action < Case > ( this.attach_Cases ) , new Action < Case > ( this.detach_Cases ) ) ; this._Projects = new EntitySet < Project > ( new Action < Project > ( this.attach_Projects ) , new Action < Project > ( this.detach_Projects ) ) ; this._Tasks = new EntitySet < Task > ( new Action < Task > ( this.attach_Tasks ) , new Action < Task > ( this.detach_Tasks ) ) ; this._Tasks1 = new EntitySet < Task > ( new Action < Task > ( this.attach_Tasks1 ) , new Action < Task > ( this.detach_Tasks1 ) ) ; this._Employee = default ( EntityRef < Employee > ) ; this._Recurring = default ( EntityRef < Recurring > ) ; OnCreated ( ) ; } }"
"var rowGrouped = data.GroupBy ( rGroup , string.Format ( `` new ( { 0 } ) '' , c ) ) ; foreach ( var row in rowGrouped ) foreach ( IGrouping < object , dynamic > row in rowGrouped ) Unable to cast object of type 'Grouping ` 2 [ System.Int16 , DynamicClass2 ] ' to type 'System.Linq.IGrouping ` 2 [ System.Object , System.Object ] ' ."
"public Logger ( string logtype=null ) { _logtype = logtype ; LogEventLevel level = LogEventLevel.Warning ; if ( File.Exists ( configPath ) ) { XDocument xdoc = XDocument.Load ( configPath ) ; string val = xdoc.Descendants ( `` logEnabled '' ) .First ( ) .Value ; // if ( clientConfig.LogEnabled == true ) if ( val == `` true '' ) { level = LogEventLevel.Debug ; } else if ( val == `` false '' ) { level = LogEventLevel.Warning ; } } else { level = LogEventLevel.Warning ; } _logger = new LoggerConfiguration ( ) .MinimumLevel.Debug ( ) .WriteTo.File ( _filepath , level ) .CreateLogger ( ) ; } Class A { Logger _logger = new Logger ( `` A '' ) ; } Class A1 { Logger _logger = new Logger ( `` A '' ) ; } Class B { Logger _logger = new Logger ( `` B '' ) ; } Class B1 { Logger _logger = new Logger ( `` A '' ) ; }"
"var output = db.FooBar.Where ( a = > a.lookupFoo == bar ) .Select ( a = > new List < double > { //value 's are the same per row //for demonstration sake . a.fooBarA , //Always 12.34 a.fooBarB , //Always 12.34 a.fooBarC , //Always 0 a.fooBarD //Always 0 //lazy casting to double from int } ) ; return Json ( new { output } ) ; { `` output '' : [ [ 12.34 , 12.34 , 0 , 0 ] , [ 0 , 0 , 12.34 , 12.34 ] , [ 12.34 , 12.34 , 0 , 0 ] , [ 0 , 0 , 12.34 , 12.34 ] ] } ;"
"public IEnumerable < CategoryDTO > GetCategoriesPaged ( int skip , int take , string name ) { var categories = unitOfWork.CategoryRepository.GetCategoriesPaged ( skip , take , name ) ; var categoriesDTO = Mapper.Map < IEnumerable < Category > , List < CategoryDTO > > ( categories ) ; return categoriesDTO ; } [ STAThread ] static void Main ( ) { AutoMapperBusinessConfiguration.Configure ( ) ; AutoMapperWindowsConfiguration.Configure ( ) ; ... Application.Run ( new frmMain ( ) ) ; } public class AutoMapperBusinessConfiguration { public static void Configure ( ) { Mapper.Initialize ( cfg = > { cfg.AddProfile < EntityToDTOProfile > ( ) ; cfg.AddProfile < DTOToEntityProfile > ( ) ; } ) ; } } public class EntityToDTOProfile : Profile { public override string ProfileName { get { return `` EntityToDTOMappings '' ; } } protected override void Configure ( ) { Mapper.CreateMap < Category , CategoryDTO > ( ) ; } } public class DTOToEntityProfile : Profile { public override string ProfileName { get { return `` DTOToEntityMappings '' ; } } protected override void Configure ( ) { Mapper.CreateMap < CategoryDTO , Category > ( ) ; } } category = Mapper.Map < Category > ( categoryDTO ) ;"
"// load 'ScriptLib ' assemblyAssembly libraryAssembly = Assembly.LoadFile ( libraryPath ) ; _runtime.LoadAssembly ( libraryAssembly ) ; // import 'Lib ' class from 'ScriptLib'ScriptSource imports = _engine.CreateScriptSourceFromString ( `` from ScriptLib import Lib '' , SourceCodeKind.Statements ) ; imports.Execute ( _scope ) ; // run .py script : ScriptSource script = _engine.CreateScriptSourceFromFile ( scriptPath ) ; script.Execute ( _scope ) ; Lib.PrintHello ( ) library = new Lib ( ) library.PrintHello ( ) PrintHelloTurnOnPowerVerifyFrequencyTurnOffPoweretc ..."
"public bool TryGetProperty < T > ( string name , out T value ) methodInfo.GetParameters ( ) [ 1 ] .ParameterType.IsGenericParameter"
"if ( t1.Text == `` '' ) { tr1 = 0 ; } else { tr1 = Double.Parse ( t1.Text ) ; } private void goyouidiot_Click ( object sender , EventArgs e ) { double tr1 ; double tr2 ; double tr3 ; double tr4 ; double tr5 ; double tr6 ; double tr7 ; double tr8 ; double tr9 ; double tr10 ; double tr11 ; double tr12 ; double tr13 ; double tr14 ; double tr15 ; if ( t1.Text == `` '' ) { tr1 = 0 ; } else { tr1 = Double.Parse ( t1.Text ) ; } if ( t2.Text == `` '' ) { tr2 = 0 ; } else { tr2 = Double.Parse ( t2.Text ) ; } if ( t3.Text == `` '' ) { tr3 = 0 ; } else { tr3 = Double.Parse ( t3.Text ) ; } if ( t4.Text == `` '' ) { tr4 = 0 ; } else { tr4 = Double.Parse ( t4.Text ) ; } if ( t5.Text == `` '' ) { tr5 = 0 ; } else { tr5 = Double.Parse ( t5.Text ) ; } if ( t6.Text == `` '' ) { tr6 = 0 ; } else { tr6 = Double.Parse ( t6.Text ) ; } if ( t7.Text == `` '' ) { tr7 = 0 ; } else { tr7 = Double.Parse ( t7.Text ) ; } if ( t8.Text == `` '' ) { tr8 = 0 ; } else { tr8 = Double.Parse ( t8.Text ) ; } if ( t9.Text == `` '' ) { tr9 = 0 ; } else { tr9 = Double.Parse ( t9.Text ) ; } if ( t10.Text == `` '' ) { tr10 = 0 ; } else { tr10 = Double.Parse ( t10.Text ) ; } if ( t11.Text == `` '' ) { tr11 = 0 ; } else { tr11 = Double.Parse ( t11.Text ) ; } if ( t12.Text == `` '' ) { tr12 = 0 ; } else { tr12 = Double.Parse ( t12.Text ) ; } if ( t13.Text == `` '' ) { tr13 = 0 ; } else { tr13 = Double.Parse ( t13.Text ) ; } if ( t14.Text == `` '' ) { tr14 = 0 ; } else { tr14 = Double.Parse ( t14.Text ) ; } if ( t15.Text == `` '' ) { tr15 = 0 ; } else { tr15 = Double.Parse ( t15.Text ) ; } double [ ] sch = { tr1 , tr2 , tr3 , tr4 , tr5 , tr6 , tr7 , tr8 , tr9 , tr10 , tr11 , tr12 , tr13 , tr14 , tr15 } ; double total = 0 ; double sorf = 0 ; for ( int i = 0 ; i ! = 14 ; i++ ) { sorf = sorf + sch [ i ] ; if ( sch [ i ] > 0 ) { total++ ; } } double totalic = sorf / total ; string glass = totalic.ToString ( ) ; result.Text = ( `` your score : `` + glass ) ; }"
public async Task < ActionResult > DownloadFile ( string key ) { return File ( ... ) ; } app.UseEndpoints ( endpoints = > { endpoints.MapControllerRoute ( name : `` default '' . pattern : `` { controller } / { action } '' ) ; endpoints.MapControllers ( ) ; endpoints.MapBlazorHub ( ) ; endpoints.MapFallbackToPage ( `` /_Host '' ) ; } ) ; @ Html.ActionLink ( ... ) ;
class BankRecord { public int id ; public int balance ; public void GetOverdraft ( ) { ... } public void MakeBankrupt ( ) { ... } }
public class Cache { public void Remove ( string fileToRemove ) { ... } } public class ObjectLoader { private Cache _Cache ; public ObjectLoader ( Cache cache ) { } public RemoveFromCacheFIleThatHasBeenDeletedOrSimilarOperation ( string filename ) { _Cache.Remove ( fileName ) ; } }
"using System ; using System.Text ; using System.Threading ; using System.IO ; using System.Net.Sockets ; using System.Reflection ; using System.Globalization ; namespace TestApp { class Program { static void Main ( string [ ] args ) { try { //I 'm not listening on the following port : TcpClient s = new TcpClient ( `` localhost '' , 2121 ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Socket exception : `` + ex.Message ) ; } try { //the following file does n't exists : File.ReadAllText ( `` filenotexist.txt '' ) ; } catch ( Exception ex ) { Console.WriteLine ( `` File exception : `` + ex.Message ) ; } } } } H : \Shared > Test-def.exeSocket exception : No connection could be made because the target machine actively refused it 127.0.0.1:2121File exception : Could not find file ' H : \Shared\filenotexist.txt ' . Z : \ > Test-def.exeSocket exception : 対象のコンピューターによって拒否されたため、接続できませんでした。 127.0.0.1:2121File exception : ファイル ' Z : \filenotexist.txt ' が見つかりませんでした。 namespace TestApp { class Program { //will change CultureInfo to English , this should change all threads CultureInfo to English . public static void SetEnglishCulture ( ) { CultureInfo ci = new CultureInfo ( `` en-US '' ) ; //change CultureInfo for current thread : Thread.CurrentThread.CurrentUICulture = ci ; Thread.CurrentThread.CurrentCulture = ci ; //change CultureInfo for new threads : Type t = typeof ( CultureInfo ) ; try { t.InvokeMember ( `` s_userDefaultCulture '' , BindingFlags.SetField | BindingFlags.NonPublic | BindingFlags.Static , null , ci , new object [ ] { ci } ) ; t.InvokeMember ( `` s_userDefaultUICulture '' , BindingFlags.SetField | BindingFlags.NonPublic | BindingFlags.Static , null , ci , new object [ ] { ci } ) ; } catch { } try { t.InvokeMember ( `` m_userDefaultCulture '' , BindingFlags.SetField | BindingFlags.NonPublic | BindingFlags.Static , null , ci , new object [ ] { ci } ) ; t.InvokeMember ( `` m_userDefaultUICulture '' , BindingFlags.SetField | BindingFlags.NonPublic | BindingFlags.Static , null , ci , new object [ ] { ci } ) ; } catch { } } static void Main ( string [ ] args ) { //first thing : set CultureInfo to English : SetEnglishCulture ( ) ; try { //I 'm not listening on the following port : TcpClient s = new TcpClient ( `` localhost '' , 2121 ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Socket exception : `` + ex.Message ) ; } try { //the following file does n't exists : File.ReadAllText ( `` filenotexist.txt '' ) ; } catch ( Exception ex ) { Console.WriteLine ( `` File exception : `` + ex.Message ) ; } } } } Z : \ > Test-en.exeSocket exception : 対象のコンピューターによって拒否されたため、接続できませんでした。 127.0.0.1:2121File exception : Could not find file ' Z : \filenotexist.txt ' ."
"readCounter 360687000readCounter2 0total readCounter 360687000addCounter 360687000addCounter2 0 readCounter 88687000readCounter2 134606500totoal readCounter 223293500addCounter 88687000addCounter2 67303250addFailure0 using System ; using System.Threading ; using NUnit.Framework ; namespace TickZoom.Utilities.TickZoom.Utilities { [ TestFixture ] public class ActiveMultiQueueTest { private volatile bool stopThread = false ; private Exception threadException ; private long addCounter ; private long readCounter ; private long addCounter2 ; private long readCounter2 ; private long addFailureCounter ; [ SetUp ] public void Setup ( ) { stopThread = false ; addCounter = 0 ; readCounter = 0 ; addCounter2 = 0 ; readCounter2 = 0 ; } [ Test ] public void TestSingleCoreSpeed ( ) { var speedThread = new Thread ( SpeedTestLoop ) ; speedThread.Name = `` 1st Core Speed Test '' ; speedThread.Start ( ) ; Thread.Sleep ( 5000 ) ; stopThread = true ; speedThread.Join ( ) ; if ( threadException ! = null ) { throw new Exception ( `` Thread failed : `` , threadException ) ; } Console.Out.WriteLine ( `` readCounter `` + readCounter ) ; Console.Out.WriteLine ( `` readCounter2 `` + readCounter2 ) ; Console.Out.WriteLine ( `` total readCounter `` + ( readCounter + readCounter2 ) ) ; Console.Out.WriteLine ( `` addCounter `` + addCounter ) ; Console.Out.WriteLine ( `` addCounter2 `` + addCounter2 ) ; } [ Test ] public void TestDualCoreSpeed ( ) { var speedThread1 = new Thread ( SpeedTestLoop ) ; speedThread1.Name = `` Speed Test 1 '' ; var speedThread2 = new Thread ( SpeedTestLoop2 ) ; speedThread2.Name = `` Speed Test 2 '' ; speedThread1.Start ( ) ; speedThread2.Start ( ) ; Thread.Sleep ( 5000 ) ; stopThread = true ; speedThread1.Join ( ) ; speedThread2.Join ( ) ; if ( threadException ! = null ) { throw new Exception ( `` Thread failed : `` , threadException ) ; } Console.Out.WriteLine ( `` readCounter `` + readCounter ) ; Console.Out.WriteLine ( `` readCounter2 `` + readCounter2 ) ; Console.Out.WriteLine ( `` totoal readCounter `` + ( readCounter + readCounter2 ) ) ; Console.Out.WriteLine ( `` addCounter `` + addCounter ) ; Console.Out.WriteLine ( `` addCounter2 `` + addCounter2 ) ; Console.Out.WriteLine ( `` addFailure '' + addFailureCounter ) ; } private void SpeedTestLoop ( ) { try { while ( ! stopThread ) { for ( var i = 0 ; i < 500 ; i++ ) { ++addCounter ; } for ( var i = 0 ; i < 500 ; i++ ) { readCounter++ ; } } } catch ( Exception ex ) { threadException = ex ; } } private void SpeedTestLoop2 ( ) { try { while ( ! stopThread ) { for ( var i = 0 ; i < 500 ; i++ ) { ++addCounter2 ; i++ ; } for ( var i = 0 ; i < 500 ; i++ ) { readCounter2++ ; } } } catch ( Exception ex ) { threadException = ex ; } } } } using System ; using System.Threading ; using NUnit.Framework ; namespace TickZoom.Utilities.TickZoom.Utilities { [ TestFixture ] public class MultiCoreSameClassTest { private ThreadTester threadTester ; public class ThreadTester { private Thread [ ] speedThread = new Thread [ 400 ] ; private long [ ] addCounter = new long [ 400 ] ; private long [ ] readCounter = new long [ 400 ] ; private bool [ ] stopThread = new bool [ 400 ] ; internal Exception threadException ; private int count ; public ThreadTester ( int count ) { for ( var i=0 ; i < speedThread.Length ; i+=10 ) { speedThread [ i ] = new Thread ( SpeedTestLoop ) ; } this.count = count ; } public void Run ( ) { for ( var i = 0 ; i < count*10 ; i+=10 ) { speedThread [ i ] .Start ( i ) ; } } public void Stop ( ) { for ( var i = 0 ; i < stopThread.Length ; i+=10 ) { stopThread [ i ] = true ; } for ( var i = 0 ; i < count * 10 ; i += 10 ) { speedThread [ i ] .Join ( ) ; } if ( threadException ! = null ) { throw new Exception ( `` Thread failed : `` , threadException ) ; } } public void Output ( ) { var readSum = 0L ; var addSum = 0L ; for ( var i = 0 ; i < count ; i++ ) { readSum += readCounter [ i ] ; addSum += addCounter [ i ] ; } Console.Out.WriteLine ( `` Thread readCounter `` + readSum + `` , addCounter `` + addSum ) ; } private void SpeedTestLoop ( object indexarg ) { var index = ( int ) indexarg ; try { while ( ! stopThread [ index*10 ] ) { for ( var i = 0 ; i < 500 ; i++ ) { ++addCounter [ index*10 ] ; } for ( var i = 0 ; i < 500 ; i++ ) { ++readCounter [ index*10 ] ; } } } catch ( Exception ex ) { threadException = ex ; } } } [ SetUp ] public void Setup ( ) { } [ Test ] public void SingleCoreTest ( ) { TestCores ( 1 ) ; } [ Test ] public void DualCoreTest ( ) { TestCores ( 2 ) ; } [ Test ] public void TriCoreTest ( ) { TestCores ( 3 ) ; } [ Test ] public void QuadCoreTest ( ) { TestCores ( 4 ) ; } public void TestCores ( int numCores ) { threadTester = new ThreadTester ( numCores ) ; threadTester.Run ( ) ; Thread.Sleep ( 5000 ) ; threadTester.Stop ( ) ; threadTester.Output ( ) ; } } }"
"private object EvaluateUInt64 ( UInt64 x , UInt64 y ) { switch ( Operation ) { case BinaryOp.Add : return x + y ; case BinaryOp.Subtract : return x - y ; case BinaryOp.Multiply : return x * y ; case BinaryOp.Divide : return x / y ; case BinaryOp.Remainder : return x % y ; default : throw new ApplicationException ( `` error '' ) ; } } private object EvaluateFloat ( float x , float y ) { switch ( Operation ) { case BinaryOp.Add : return x + y ; case BinaryOp.Subtract : return x - y ; case BinaryOp.Multiply : return x * y ; case BinaryOp.Divide : return x / y ; case BinaryOp.Remainder : return x % y ; default : throw new ApplicationException ( `` error '' ) ; } } private object EvaluateDouble ( double x , double y ) { switch ( Operation ) { case BinaryOp.Add : return x + y ; case BinaryOp.Subtract : return x - y ; case BinaryOp.Multiply : return x * y ; case BinaryOp.Divide : return x / y ; case BinaryOp.Remainder : return x % y ; default : throw new ApplicationException ( `` error '' ) ; } }"
list.ItemsSource=db.Templates.GroupBy ( t= > t.CategoryName ) ; < DataTemplate > < TextBlock Text= '' { Binding Key } '' / > < /DataTemplate > < DataTemplate > < TextBlock Text= '' { Binding } '' / > < /DataTemplate >
"class InputManager { SortedDictionary < ushort , Keys > inputList = new SortedDictionary < ushort , Keys > ( ) ; public void Add ( ushort id , Keys key ) { ... } public bool IsPressed ( ushort id ) { ... } } class Main { private enum RegisteredInput : ushort { Up , Down , Confirm } public Main ( ) { InputManager manager = new InputManager ( ) ; manager.Add ( RegisteredInput.Up , Keys.Q ) ; manager.Add ( RegisteredInput.Down , Keys.A ) ; manager.Add ( RegisteredInput.Confirm , Keys.Enter ) ; } void update ( ) { if ( manager.IsPressed ( RegisteredInput.Up ) ) action ( ) ; } }"
< add name= '' MyConnectionString '' connectionString= '' Data Source= . ; InitialCatalog=MyDB ; User ID=username ; Password=pwd ; '' / > < add name= '' Module1Context '' connectionString= '' metadata=res//*/Module1.csdl| ... | ... ; provider=System.Data.SqlClient ; provider connection string=MyConnectionString '' providerName= '' System.Data.EntityClient '' / >
"public static Func < T , bool > Not < T > ( Func < T , bool > otherFunc ) { return arg = > ! otherFunc ( arg ) ; } var isValidStr = LinqUtils.Not ( string.IsNullOrWhiteSpace ) ; var isValidStr = LinqUtils.Not ( ( string s ) = > string.IsNullOrWhiteSpace ( s ) ) ; var isValidStr = LinqUtils.Not < string > ( string.IsNullOrWhiteSpace ) ;"
"var _resultSelectors = new Dictionary < string , Func < DateTime , /*here*/ double , DateTime > > ( ) ; // so I can do_resultSelector.Add ( `` foo '' , ( DateTime dt , int x ) = > ... ) ; _resultSelector.Add ( `` bar '' , ( DateTime dt , double d ) = > ... ) ; _resultSelector.Add ( `` gar '' , ( DateTime dt , float f ) = > ... ) ; _resultSelector.Add ( `` har '' , ( DateTime dt , decimal d ) = > ... ) ;"
"public class GenericRepository < TEntity , TId > where TEntity , class , IIdentifyable < TId > { public virtual TEntity GetById ( TId id ) { using ( var context = new DbContext ( ) ) { var dbSet = context.Set < TEntity > ( ) ; var currentItem = dbSet.FirstOrDefault ( x = > x.Id == id ) ; return currentItem ; } } public virtual bool Exists ( TId id ) { using ( var context = new DbContext ( ) ) { var dbSet = context.Set < TEntity > ( ) ; var exists = dbSet.Any ( x = > x.Id == id ) ; return exists ; } } } public interface IIdentifyable : IIdentifyable < int > { } public interface IIdentifyable < out TId > { TId Id { get ; } } public class CustomerEntity : IIdentifyable < int > { public string Name { get ; set ; } public int Id { get ; set ; } } public class ProductEntity : IIdentifyable < Guid > { public string Name { get ; set ; } public Guid Id { get ; set ; } }"
"var list = ( from p in listData orderby p.Code ascending select new KeyValuePair < int , string > ( p.Code , p.DESC ) ) .Distinct < KeyValuePair < int , string > > ( ) .ToList < KeyValuePair < int , string > > ( ) ; 2 , MEDICAL5 , RETAIL6 , OTHER7 , GOVT 2 , MEDICAL5 , RETAIL7 , GOVT6 , OTHER"
class First : BaseClass { override void Process ( ) { //do something } } class Second : BaseClass { override void Process ( ) { //do something else } }
"at System.ComponentModel.BaseNumberConverter.ConvertFrom ( ITypeDescriptorContext context , CultureInfo culture , Object value ) public static Control FindControlRecursive ( this Control root , string id ) { if ( root.ID == id ) { return root ; } if ( root.Controls.Count > 0 ) { foreach ( Control c in root.Controls ) { Control t = c.FindControlRecursive ( id ) ; if ( t ! = null ) { return t ; } } } return null ; }"
"using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; using Microsoft.CSharp ; using System.CodeDom.Compiler ; using System.Reflection ; using System.IO ; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void button1_Click ( object sender , EventArgs e ) { var csc = new CSharpCodeProvider ( new Dictionary < string , string > ( ) { { `` CompilerVersion '' , `` v3.5 '' } } ) ; var parameters = new CompilerParameters ( new [ ] { `` mscorlib.dll '' , `` System.Core.dll '' } , `` Example '' + `` .exe '' , true ) ; //iloop.ToString ( ) + parameters.GenerateExecutable = true ; CompilerResults results = csc.CompileAssemblyFromSource ( parameters , @ '' using System.Linq ; class Program { public static void Main ( string [ ] args ) { } public static string Main1 ( int abc ) { `` + textBox1.Text.ToString ( ) + @ '' } } '' ) ; results.Errors.Cast < CompilerError > ( ) .ToList ( ) .ForEach ( error = > Error = error.ErrorText.ToString ( ) ) ; var scriptClass = results.CompiledAssembly.GetType ( `` Program '' ) ; var scriptMethod1 = scriptClass.GetMethod ( `` Main1 '' , BindingFlags.Static | BindingFlags.Public ) ; StringBuilder st = new StringBuilder ( scriptMethod1.Invoke ( null , new object [ ] { 10 } ) .ToString ( ) ) ; result = Convert.ToBoolean ( st.ToString ( ) ) ; } } }"
"protected void Application_BeginRequest ( object sender , EventArgs e ) { this.FixURLCosmetics ( ) ; } private void FixURLCosmetics ( ) { HttpContext context = HttpContext.Current ; if ( ! context.Request.HttpMethod.ToString ( ) .Equals ( `` GET '' , StringComparison.OrdinalIgnoreCase ) ) { // if not a GET method cancel url cosmetics return ; } ; string url = context.Request.RawUrl.ToString ( ) ; bool doRedirect = false ; // remove > default.aspx if ( url.EndsWith ( `` /default.aspx '' , StringComparison.OrdinalIgnoreCase ) ) { url = url.Substring ( 0 , url.Length - 12 ) ; doRedirect = true ; } // remove > www if ( url.Contains ( `` //www '' ) ) { url = url.Replace ( `` //www '' , `` // '' ) ; doRedirect = true ; } // redirect if necessary if ( doRedirect ) { context.Response.Redirect ( url ) ; } } if ( ! context.Request.HttpMethod.ToString ( ) .Equals ( `` GET '' , StringComparison.OrdinalIgnoreCase ) ) { // if not a GET method cancel url cosmetics return ; } ;"
private static void Main ( ) { bool CS $ 0 $ 0000 = true ; Class1.DoSomething ( CS $ 0 $ 0000 ) ; Console.ReadKey ( ) ; } static void Main ( ) { MyLib.Class1.DoSomething ( a : true ) ; Console.ReadKey ( ) ; }
6/15/2009 1:45:30 PM - > 6/15/2009 ( en-US ) 6/15/2009 1:45:30 PM - > 15/06/2009 ( fr-FR ) 6/15/2009 1:45:30 PM - > 15.06.2009 ( de-DE ) 6/15/2009 1:45:30 PM - > 6/15 ( en-US ) 6/15/2009 1:45:30 PM - > 15/06 ( fr-FR ) 6/15/2009 1:45:30 PM - > 15.06 . ( de-DE )
"public class FileStreamWatching : FileStream { /// < summary > /// how much was read until now /// < /summary > public long _ReadUntilNow { get ; private set ; } public FileStreamWatching ( string Path , FileMode FileMode , FileAccess FileAccess ) : base ( Path , FileMode , FileAccess ) { this._ReadUntilNow = 0 ; } public override int Read ( byte [ ] array , int offset , int count ) { int ReturnV = base.Read ( array , offset , count ) ; //int ReturnV = base.Read ( array , offset , count ) ; if ( ReturnV > 0 ) { _ReadUntilNow += ReturnV ; Console.WriteLine ( `` Arr Lenght : `` + array.Length ) ; Console.WriteLine ( `` Read : `` + ReturnV ) ; Console.WriteLine ( `` **************************** '' ) ; } return ReturnV ; } } public void Get_File_From_Client ( Stream MyStream ) { using ( FileStream fs = new FileStream ( @ '' C : \Upload\ '' + `` Chat.rar '' , FileMode.Create ) ) { byte [ ] buffer = new byte [ 1000 ] ; int bytes = 0 ; while ( ( bytes = MyStream.Read ( buffer , 0 , buffer.Length ) ) > 0 ) { fs.Write ( buffer , 0 , bytes ) ; fs.Flush ( ) ; } } } < configuration > < system.serviceModel > < bindings > < basicHttpBinding > < binding name= '' BasicHttpBinding_IJob '' transferMode= '' Streamed '' / > < /basicHttpBinding > < /bindings > < client > < endpoint address= '' http : //localhost:8080/Request2 '' binding= '' basicHttpBinding '' bindingConfiguration= '' BasicHttpBinding_IJob '' contract= '' ServiceReference1.IJob '' name= '' BasicHttpBinding_IJob '' / > < /client > < /system.serviceModel > < /configuration > BasicHttpBinding BasicHttpBinding1 = new BasicHttpBinding ( ) ; BasicHttpBinding1.TransferMode = TransferMode.Streamed ; // BasicHttpBinding1.MaxReceivedMessageSize = int.MaxValue ; BasicHttpBinding1.ReaderQuotas.MaxArrayLength = 1000 ; BasicHttpBinding1.ReaderQuotas.MaxBytesPerRead = 1000 ; BasicHttpBinding1.MaxBufferSize = 1000 ; // ServiceHost host = new ServiceHost ( typeof ( JobImplement ) , new Uri ( `` http : //localhost:8080 '' ) ) ; // ServiceMetadataBehavior behavior = new ServiceMetadataBehavior ( ) ; behavior.HttpGetEnabled = true ; // host.Description.Behaviors.Add ( behavior ) ; ServiceThrottlingBehavior throttle = new ServiceThrottlingBehavior ( ) ; throttle.MaxConcurrentCalls = 1 ; host.Description.Behaviors.Add ( throttle ) ; // // host.AddServiceEndpoint ( typeof ( IJob ) , BasicHttpBinding1 , `` Request2 '' ) ; host.Open ( ) ;"
"public class MyClass ( ) { public MyClass ( ) { } public DoSomething ( ) { using ( var service = new CustomerCreditServiceClient ( ) ) { var creditLimit = service.GetCreditLimit ( customer.Firstname , customer.Surname , customer.DateOfBirth ) ; } } } public class MyClass ( ) { private readonly ICustomerCreditService service ; public MyClass ( ICustomerCreditService service ) { this.service= service ; } public DoSomething ( ) { var creditLimit = service.GetCreditLimit ( customer.Firstname , customer.Surname , customer.DateOfBirth ) ; } }"
"static void Main ( ) { GetChar ( ' , ' ) ; } static char GetChar ( char [ ] input ) { return input [ 0 ] ; } static char GetChar ( params char [ ] input ) { return input [ 0 ] ; }"
"< Window x : Class= '' ContentControlVMTest.Window2 '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' clr-namespace : ContentControlVMTest '' Title= '' Window2 '' Height= '' 300 '' Width= '' 300 '' > < DockPanel LastChildFill= '' True '' > < CheckBox Click= '' CheckBox_Click '' Content= '' Test1 ? '' DockPanel.Dock= '' Top '' Margin= '' 5 '' / > < ContentControl x : Name= '' contentControl '' > < ContentControl.Resources > < DataTemplate DataType= '' { x : Type local : Test3 } '' > < TextBlock Text= '' { Binding C } '' Margin= '' 5 '' / > < /DataTemplate > < DataTemplate DataType= '' { x : Type local : Test1 } '' > < DockPanel LastChildFill= '' True '' Margin= '' 5 '' > < TextBlock Text= '' { Binding A } '' DockPanel.Dock= '' Top '' Margin= '' 5 '' / > < ListBox ItemsSource= '' { Binding Bs } '' DisplayMemberPath= '' B '' Margin= '' 5 '' / > < /DockPanel > < /DataTemplate > < /ContentControl.Resources > < /ContentControl > < /DockPanel > < /Window > public class Test3 { public string C { get ; set ; } } public class Test2 { public string B { get ; set ; } } public class Test1 { public string A { get ; set ; } private List < Test2 > _Bs ; public List < Test2 > Bs { get { return _Bs ; } set { _Bs = value ; } } } public partial class Window2 : Window { public Window2 ( ) { InitializeComponent ( ) ; this.KeyDown += Window_KeyDown ; } private void Window_KeyDown ( object sender , System.Windows.Input.KeyEventArgs e ) { if ( Keyboard.IsKeyDown ( Key.LeftCtrl ) ) if ( Keyboard.IsKeyDown ( Key.LeftShift ) ) if ( Keyboard.IsKeyDown ( Key.LeftAlt ) ) if ( Keyboard.IsKeyDown ( Key.G ) ) { GC.Collect ( 2 , GCCollectionMode.Forced ) ; GC.WaitForPendingFinalizers ( ) ; GC.Collect ( 2 , GCCollectionMode.Forced ) ; GC.WaitForPendingFinalizers ( ) ; GC.Collect ( 3 , GCCollectionMode.Forced ) ; GC.WaitForPendingFinalizers ( ) ; GC.Collect ( 3 , GCCollectionMode.Forced ) ; } } private void CheckBox_Click ( object sender , RoutedEventArgs e ) { if ( ( ( CheckBox ) sender ) .IsChecked.GetValueOrDefault ( false ) ) { var x = new Test1 ( ) { A = `` Test1 A '' } ; x.Bs = new List < Test2 > ( ) ; for ( int i = 1 ; i < 10000 ; i++ ) { x.Bs.Add ( new Test2 ( ) { B = `` Test1 B `` + i } ) ; } contentControl.Content = x ; } else { contentControl.Content = new Test3 ( ) { C = `` Test3 C '' } ; } } }"
"private static void Main ( ) { test ( ) .Wait ( ) ; } static async Task test ( ) { var transform = new TransformBlock < int , double > ( i = > i/2.0 ) ; var output = new ActionBlock < double > ( d = > Console.WriteLine ( d ) ) ; // Warning CS4014 here : transform.Completion.ContinueWith ( continuation = > output.Complete ( ) ) ; transform.LinkTo ( output ) ; for ( int i = 0 ; i < 10 ; ++i ) await transform.SendAsync ( i ) ; transform.Complete ( ) ; await output.Completion ; } 00.511.522.533.544.5 transform.Completion.ContinueWith ( continuation = > output.Complete ( ) ) ;"
"private void button1_Click ( object sender , EventArgs e ) { Task.Factory.StartNew < int > ( ( ) = > DelayedAdd ( 5 , 10 ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 20 ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 30 ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 50 ) ) .ContinueWith ( t = > textBox1.Text = t.Result.ToString ( ) , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ; } private int DelayedAdd ( int a , int b ) { Thread.Sleep ( 500 ) ; return a + b ; } Task.Factory.StartNew < int > ( ( ) = > DelayedAdd ( 5 , 10 ) ) .ContinueWith ( t = > textBox1.Text = t.Result.ToString ( ) , TaskScheduler.FromCurrentSynchronizationContext ( ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 20 ) ) .ContinueWith ( t = > textBox1.Text = t.Result.ToString ( ) , TaskScheduler.FromCurrentSynchronizationContext ( ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 30 ) ) .ContinueWith ( t = > textBox1.Text = t.Result.ToString ( ) , TaskScheduler.FromCurrentSynchronizationContext ( ) ) .ContinueWith ( t = > DelayedAdd ( t.Result , 50 ) ) .ContinueWith ( t = > textBox1.Text = t.Result.ToString ( ) , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ;"
"GenericPermutations < int > p = new GenericPermutations < int > ( { 1 , 2 , 3 } ) ; p.nextPermutation ( ) ; // 123p.nextPermutation ( ) ; // 132p.nextPermutation ( ) ; // 213// etc ."
"class TestClass { private List < int > Numbers = new List < int > ( ) ; // Insert code here } TestClass test = new TestClass ( ) { 2 , 4 , 7 , 10 } ; List < int > test = new List < int > ( ) { 2 , 4 , 7 , 10 } ; TestClass test = { 2 , 4 , 7 , 10 } ; Cat cat = new Cat ( ) { Name = `` Sylvester '' , Age=8 } ;"
public class B { public static implicit operator B ( A values ) { return null ; } } public class A { } public class Program { static void Main ( string [ ] args ) { A a = new A ( ) ; B b = a ? ? new B ( ) ; //b = null ... is it wrong that I expect b to be B ( ) ? } }
"string [ ] newArray1 = new [ ] { `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' } ; string [ ] newArray2 = new string [ 4 ] ; int IndTmp = 0 ; foreach ( string TmpString in newArray1 ) { newArray2 [ IndTmp ] = newArray1 [ IndTmp++ ] ; } string [ ] newArray1 = new [ ] { `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' } ; string [ ] newArray2 = new string [ 4 ] ; int IndTmp = 0 ; foreach ( string TmpString in newArray1 ) { newArray2 [ IndTmp++ ] = newArray1 [ IndTmp ] ; }"
"public partial class MainWindow : Window { //Orientation variables : public static Point _anchorPoint ; public static Point _currentPoint ; private static double _originalTop ; private static double _originalLeft ; private static Point _startPoint ; private static bool _isDown = false ; private static bool _isInDrag = false ; private static bool _isDragging = false ; public static UIElement selectedElement = null ; public static bool elementIsSelected = false ; public static Dictionary < object , TranslateTransform > PointDict = new Dictionary < object , TranslateTransform > ( ) ; public static AdornerLayer aLayer ; public MainWindow ( ) { InitializeComponent ( ) ; } //Control events : public static void Control_MouseLeftButtonUp ( object sender , MouseButtonEventArgs e ) //HUD element left mouse button up { if ( _isInDrag ) { var element = sender as FrameworkElement ; element.ReleaseMouseCapture ( ) ; _isInDrag = false ; e.Handled = true ; aLayer = AdornerLayer.GetAdornerLayer ( selectedElement ) ; aLayer.Add ( new ResizingAdorner ( selectedElement ) ) ; } } public static void HUD_MouseDown ( object sender , MouseButtonEventArgs e ) { if ( elementIsSelected ) { elementIsSelected = false ; _isDown = false ; if ( selectedElement ! = null ) { aLayer.Remove ( aLayer.GetAdorners ( selectedElement ) [ 0 ] ) ; selectedElement = null ; } } if ( e.Source ! = mw.PACSGrid ) { _isDown = true ; _startPoint = e.GetPosition ( mw.PACSGrid ) ; selectedElement = e.Source as UIElement ; _originalLeft = VisualWorker.GetLeft ( selectedElement ) ; _originalTop = VisualWorker.GetTop ( selectedElement ) ; aLayer = AdornerLayer.GetAdornerLayer ( selectedElement ) ; aLayer.Add ( new ResizingAdorner ( selectedElement ) ) ; elementIsSelected = true ; e.Handled = true ; } } public static void Control_MouseLeftButtonDown ( object sender , MouseButtonEventArgs e ) //HUD element left mouse button down { if ( elementIsSelected ) { aLayer.Remove ( aLayer.GetAdorners ( selectedElement ) [ 0 ] ) ; selectedElement = sender as UIElement ; var element = sender as FrameworkElement ; _anchorPoint = e.GetPosition ( null ) ; element.CaptureMouse ( ) ; _isInDrag = true ; e.Handled = true ; } } public static void Control_MouseMove ( object sender , MouseEventArgs e ) //Drag & drop HUD element { if ( _isInDrag ) // The user is currently dragging the HUD element ... { _currentPoint = e.GetPosition ( null ) ; TranslateTransform tt = new TranslateTransform ( ) ; bool isMoved = false ; if ( PointDict.ContainsKey ( sender ) ) { tt = PointDict [ sender ] ; isMoved = true ; } tt.X += _currentPoint.X - _anchorPoint.X ; tt.Y += ( _currentPoint.Y - _anchorPoint.Y ) ; _anchorPoint = _currentPoint ; ( sender as UIElement ) .RenderTransform = tt ; if ( isMoved ) { PointDict.Remove ( sender ) ; } PointDict.Add ( sender , tt ) ; } } } // Adorner Class : public class ResizingAdorner : Adorner { Thumb topLeft , topRight , bottomLeft , bottomRight ; // To store and manage the adorner 's visual children . VisualCollection visualChildren ; // Initialize the ResizingAdorner . public ResizingAdorner ( UIElement adornedElement ) : base ( adornedElement ) { visualChildren = new VisualCollection ( this ) ; // Call a helper method to initialize the Thumbs // with a customized cursors . BuildAdornerCorner ( ref topLeft , Cursors.SizeNWSE ) ; BuildAdornerCorner ( ref topRight , Cursors.SizeNESW ) ; BuildAdornerCorner ( ref bottomLeft , Cursors.SizeNESW ) ; BuildAdornerCorner ( ref bottomRight , Cursors.SizeNWSE ) ; // Add handlers for resizing . bottomLeft.DragDelta += new DragDeltaEventHandler ( HandleBottomLeft ) ; bottomRight.DragDelta += new DragDeltaEventHandler ( HandleBottomRight ) ; topLeft.DragDelta += new DragDeltaEventHandler ( HandleTopLeft ) ; topRight.DragDelta += new DragDeltaEventHandler ( HandleTopRight ) ; } // Handler for resizing from the bottom-right . void HandleBottomRight ( object sender , DragDeltaEventArgs args ) { FrameworkElement adornedElement = this.AdornedElement as FrameworkElement ; Thumb hitThumb = sender as Thumb ; if ( adornedElement == null || hitThumb == null ) return ; FrameworkElement parentElement = adornedElement.Parent as FrameworkElement ; // Ensure that the Width and Height are properly initialized after the resize . EnforceSize ( adornedElement ) ; // Change the size by the amount the user drags the mouse , as long as it 's larger // than the width or height of an adorner , respectively . adornedElement.Width = Math.Max ( adornedElement.Width + args.HorizontalChange , hitThumb.DesiredSize.Width ) ; adornedElement.Height = Math.Max ( args.VerticalChange + adornedElement.Height , hitThumb.DesiredSize.Height ) ; } // Handler for resizing from the top-right . void HandleTopRight ( object sender , DragDeltaEventArgs args ) { FrameworkElement adornedElement = this.AdornedElement as FrameworkElement ; Thumb hitThumb = sender as Thumb ; if ( adornedElement == null || hitThumb == null ) return ; FrameworkElement parentElement = adornedElement.Parent as FrameworkElement ; // Ensure that the Width and Height are properly initialized after the resize . EnforceSize ( adornedElement ) ; // Change the size by the amount the user drags the mouse , as long as it 's larger // than the width or height of an adorner , respectively . adornedElement.Width = Math.Max ( adornedElement.Width + args.HorizontalChange , hitThumb.DesiredSize.Width ) ; //adornedElement.Height = Math.Max ( adornedElement.Height - args.VerticalChange , hitThumb.DesiredSize.Height ) ; double height_old = adornedElement.Height ; double height_new = Math.Max ( adornedElement.Height - args.VerticalChange , hitThumb.DesiredSize.Height ) ; double top_old = VisualWorker.GetTop ( adornedElement ) ; //double top_old = Canvas.GetTop ( adornedElement ) ; adornedElement.Height = height_new ; //Canvas.SetTop ( adornedElement , top_old - ( height_new - height_old ) ) ; VisualWorker.SetTop ( adornedElement , top_old - ( height_new - height_old ) ) ; } // Handler for resizing from the top-left . void HandleTopLeft ( object sender , DragDeltaEventArgs args ) { FrameworkElement adornedElement = AdornedElement as FrameworkElement ; Thumb hitThumb = sender as Thumb ; if ( adornedElement == null || hitThumb == null ) return ; // Ensure that the Width and Height are properly initialized after the resize . EnforceSize ( adornedElement ) ; // Change the size by the amount the user drags the mouse , as long as it 's larger // than the width or height of an adorner , respectively . //adornedElement.Width = Math.Max ( adornedElement.Width - args.HorizontalChange , hitThumb.DesiredSize.Width ) ; //adornedElement.Height = Math.Max ( adornedElement.Height - args.VerticalChange , hitThumb.DesiredSize.Height ) ; double width_old = adornedElement.Width ; double width_new = Math.Max ( adornedElement.Width - args.HorizontalChange , hitThumb.DesiredSize.Width ) ; double left_old = VisualWorker.GetLeft ( adornedElement ) ; //double left_old = Canvas.GetLeft ( adornedElement ) ; adornedElement.Width = width_new ; VisualWorker.SetLeft ( adornedElement , left_old - ( width_new - width_old ) ) ; double height_old = adornedElement.Height ; double height_new = Math.Max ( adornedElement.Height - args.VerticalChange , hitThumb.DesiredSize.Height ) ; double top_old = VisualWorker.GetTop ( adornedElement ) ; //double top_old = Canvas.GetTop ( adornedElement ) ; adornedElement.Height = height_new ; //Canvas.SetTop ( adornedElement , top_old - ( height_new - height_old ) ) ; VisualWorker.SetTop ( adornedElement , top_old - ( height_new - height_old ) ) ; } // Handler for resizing from the bottom-left . void HandleBottomLeft ( object sender , DragDeltaEventArgs args ) { FrameworkElement adornedElement = AdornedElement as FrameworkElement ; Thumb hitThumb = sender as Thumb ; if ( adornedElement == null || hitThumb == null ) return ; // Ensure that the Width and Height are properly initialized after the resize . EnforceSize ( adornedElement ) ; // Change the size by the amount the user drags the mouse , as long as it 's larger // than the width or height of an adorner , respectively . //adornedElement.Width = Math.Max ( adornedElement.Width - args.HorizontalChange , hitThumb.DesiredSize.Width ) ; adornedElement.Height = Math.Max ( args.VerticalChange + adornedElement.Height , hitThumb.DesiredSize.Height ) ; double width_old = adornedElement.Width ; double width_new = Math.Max ( adornedElement.Width - args.HorizontalChange , hitThumb.DesiredSize.Width ) ; double left_old = VisualWorker.GetLeft ( adornedElement ) ; //double left_old = Canvas.GetLeft ( adornedElement ) ; adornedElement.Width = width_new ; //Canvas.SetLeft ( adornedElement , left_old - ( width_new - width_old ) ) ; VisualWorker.SetLeft ( adornedElement , left_old - ( width_new - width_old ) ) ; } // Arrange the Adorners . protected override Size ArrangeOverride ( Size finalSize ) { // desiredWidth and desiredHeight are the width and height of the element that 's being adorned . // These will be used to place the ResizingAdorner at the corners of the adorned element . double desiredWidth = AdornedElement.DesiredSize.Width ; double desiredHeight = AdornedElement.DesiredSize.Height ; // adornerWidth & adornerHeight are used for placement as well . double adornerWidth = this.DesiredSize.Width ; double adornerHeight = this.DesiredSize.Height ; topLeft.Arrange ( new Rect ( -adornerWidth / 2 , -adornerHeight / 2 , adornerWidth , adornerHeight ) ) ; topRight.Arrange ( new Rect ( desiredWidth - adornerWidth / 2 , -adornerHeight / 2 , adornerWidth , adornerHeight ) ) ; bottomLeft.Arrange ( new Rect ( -adornerWidth / 2 , desiredHeight - adornerHeight / 2 , adornerWidth , adornerHeight ) ) ; bottomRight.Arrange ( new Rect ( desiredWidth - adornerWidth / 2 , desiredHeight - adornerHeight / 2 , adornerWidth , adornerHeight ) ) ; // Return the final size . return finalSize ; } // Helper method to instantiate the corner Thumbs , set the Cursor property , // set some appearance properties , and add the elements to the visual tree . void BuildAdornerCorner ( ref Thumb cornerThumb , Cursor customizedCursor ) { if ( cornerThumb ! = null ) return ; cornerThumb = new Thumb ( ) ; // Set some arbitrary visual characteristics . cornerThumb.Cursor = customizedCursor ; cornerThumb.Height = cornerThumb.Width = 10 ; cornerThumb.Opacity = 1 ; cornerThumb.Background = new ImageBrush ( new BitmapImage ( new Uri ( @ '' pack : //application : , , ,/Images/Thumb 1.jpg '' ) ) ) ; visualChildren.Add ( cornerThumb ) ; } // This method ensures that the Widths and Heights are initialized . Sizing to content produces // Width and Height values of Double.NaN . Because this Adorner explicitly resizes , the Width and Height // need to be set first . It also sets the maximum size of the adorned element . void EnforceSize ( FrameworkElement adornedElement ) { if ( adornedElement.Width.Equals ( Double.NaN ) ) adornedElement.Width = adornedElement.DesiredSize.Width ; if ( adornedElement.Height.Equals ( Double.NaN ) ) adornedElement.Height = adornedElement.DesiredSize.Height ; FrameworkElement parent = adornedElement.Parent as FrameworkElement ; if ( parent ! = null ) { adornedElement.MaxHeight = parent.ActualHeight ; adornedElement.MaxWidth = parent.ActualWidth ; } } // Override the VisualChildrenCount and GetVisualChild properties to interface with // the adorner 's visual collection . protected override int VisualChildrenCount { get { return visualChildren.Count ; } } protected override Visual GetVisualChild ( int index ) { return visualChildren [ index ] ; } } // Canvas alternative class : public class VisualWorker { public static void SetTop ( UIElement uie , double top ) { var frame = uie as FrameworkElement ; frame.Margin = new Thickness ( frame.Margin.Left , top , frame.Margin.Right , frame.Margin.Bottom ) ; } public static void SetLeft ( UIElement uie , double left ) { var frame = uie as FrameworkElement ; frame.Margin = new Thickness ( left , frame.Margin.Top , frame.Margin.Right , frame.Margin.Bottom ) ; } public static double GetTop ( UIElement uie ) { return ( uie as FrameworkElement ) .Margin.Top ; } public static double GetLeft ( UIElement uie ) { return ( uie as FrameworkElement ) .Margin.Left ; } } < Window x : Name= '' MW '' x : Class= '' MyProgram.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : local= '' clr-namespace : MyProgram '' mc : Ignorable= '' d '' Title= '' MyProgram '' d : DesignHeight= '' 1080 '' d : DesignWidth= '' 1920 '' ResizeMode= '' NoResize '' WindowState= '' Maximized '' WindowStyle= '' None '' MouseLeave= '' HUD_MouseLeave '' > < Grid x : Name= '' MyGrid MouseDown= '' HUD_MouseDown '' / > < Image x : Name= '' Image1 '' Source= '' pic.png '' Margin= '' 880,862,0,0 '' Height= '' 164 '' Width= '' 162 '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Top '' MouseLeftButtonDown= '' Control_MouseLeftButtonDown '' MouseLeftButtonUp= '' Control_MouseLeftButtonUp '' MouseMove= '' Control_MouseMove '' / > < TextBox x : Name= '' Textbox1 '' Margin= '' 440,560,0,0 '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Top '' MouseLeftButtonDown= '' Control_MouseLeftButtonDown '' MouseLeftButtonUp= '' Control_MouseLeftButtonUp '' MouseMove= '' Control_MouseMove '' / >"
NSArray groupArray = ( NSArray ) groupDictionary.ObjectForKey ( key ) ; MyType myObject = ( MyType ) groupArray.ValueAt ( 0 ) ; int [ ] intArray = int [ 10 ] ;
"private void RunParkingLotTest ( ) { points = new int ? [ 100,100 ] ; int parked = 0 ; for ( int i = 0 ; i < 12000 ; i++ ) { int x = random.Next ( 100 ) ; int y = random.Next ( 100 ) ; if ( IsSafeToPark ( x , y ) ) { points [ x , y ] = 1 ; parked++ ; } } Console.WriteLine ( `` Parked : `` + parked + `` \nP value : `` + PhiFunction ( ( parked-3523 ) /21.9 ) ) ; } private bool IsSafeToPark ( int x , int y ) { return PointIsEmpty ( x , y ) & & LeftOfPointIsEmpty ( x , y ) & & RightOfPointIsEmpty ( x , y ) & & BelowPointIsEmpty ( x , y ) & & AbovePointIsEmpty ( x , y ) ; } private bool AbovePointIsEmpty ( int x , int y ) { if ( y == 99 ) { return true ; } else return points [ x , y + 1 ] == null ; } private bool BelowPointIsEmpty ( int x , int y ) { if ( y == 0 ) { return true ; } else return points [ x , y - 1 ] == null ; } private bool RightOfPointIsEmpty ( int x , int y ) { if ( x == 99 ) { return true ; } else return points [ x + 1 , y ] == null ; } private bool LeftOfPointIsEmpty ( int x , int y ) { if ( x == 0 ) { return true ; } else return points [ x - 1 , y ] == null ; } private bool PointIsEmpty ( int x , int y ) { return points [ x , y ] == null ; } private double PhiFunction ( double x ) { //ϕ ( x ) = ( 2π ) −½e−x2/2 return ( ( 1 / Math.Sqrt ( 2 * Math.PI ) ) * Math.Exp ( - ( Math.Pow ( x , 2 ) ) / 2 ) ) ; }"
"public Task < FileActionStatus > SaveAsync ( path , data ) { // Do some stuff , then ... File.WriteAllBytes ( path , data ) ; // < -- Allow this to yield control ? // ... then return result }"
protected internal void LogUserSession ( int ? managerID ) { using ( var sqlCommand = new SqlCommand ( ) ) { sqlCommand.SetCommand ( `` usp_UserActivity_Create '' ) ; SqlParameter prmSessionID = new SqlParameter ( ) ; prmSessionID.ParameterName = `` @ sessionID '' ; prmSessionID.Direction = ParameterDirection.Input ; prmSessionID.SqlDbType = SqlDbType.VarChar ; prmSessionID.Size = 32 ; prmSessionID.SetValue ( SessionID ) ; SqlParameter prmUsername = new SqlParameter ( ) ; prmUsername.ParameterName = `` @ username '' ; prmUsername.Direction = ParameterDirection.Input ; prmUsername.SqlDbType = SqlDbType.VarChar ; prmUsername.Size = 32 ; prmUsername.SetValue ( Username ) ; SqlParameter prmLoginID = new SqlParameter ( ) ; prmLoginID.ParameterName = `` @ loginID '' ; prmLoginID.Direction = ParameterDirection.Output ; prmLoginID.SqlDbType = SqlDbType.Int ; sqlCommand.Parameters.Add ( prmSessionID ) ; sqlCommand.Parameters.Add ( prmUsername ) ; sqlCommand.Parameters.Add ( prmLoginID ) ; using ( sqlCommand.Connection = new SqlConnection ( ConnectionStrings.MainApp ) ) { sqlCommand.Connection.Open ( ) ; sqlCommand.ExecuteNonQueryTryCatch ( ) ; if ( prmLoginID.Value ! = DBNull.Value ) LoginID = Convert.ToInt32 ( prmLoginID.Value ) ; } } } public static bool IsAvailable ( string username ) { using ( var sqlCommand = new SqlCommand ( ) ) { sqlCommand.SetCommand ( `` usp_UsernameIsAvailable '' ) ; var prmUsername = new SqlParameter ( ) ; prmUsername.ParameterName = `` @ username '' ; prmUsername.Direction = ParameterDirection.Input ; prmUsername.SqlDbType = SqlDbType.VarChar ; prmUsername.Size = 32 ; prmUsername.SetValue ( username ) ; var prmReturnValue = new SqlParameter ( ) ; prmReturnValue.ParameterName = `` @ returnValue '' ; prmReturnValue.Direction = ParameterDirection.ReturnValue ; prmReturnValue.SqlDbType = SqlDbType.Bit ; sqlCommand.Parameters.Add ( prmUsername ) ; sqlCommand.Parameters.Add ( prmReturnValue ) ; using ( sqlCommand.Connection = new SqlConnection ( ConnectionStrings.ComplianceApps ) ) { sqlCommand.Connection.Open ( ) ; sqlCommand.ExecuteNonQueryTryCatch ( ) ; return Convert.ToBoolean ( prmReturnValue.Value ) ; } } }
"var rc = SystemInformation.VirtualScreen ; Bitmap bmp = new Bitmap ( rc.Width , rc.Height ) ; Graphics g = Graphics.FromImage ( bmp ) ; g.CopyFromScreen ( rc.Left , rc.Top , 0 , 0 , bmp.Size , CopyPixelOperation.SourceCopy ) ; pictureBox1.Image = bmp ; public partial class SnippingTool : Form { public static Image Snip ( ) { var rc = SystemInformation.VirtualScreen ; Bitmap bmp = new Bitmap ( rc.Width , rc.Height ) ; Graphics g = Graphics.FromImage ( bmp ) ; g.CopyFromScreen ( rc.Left , rc.Top , 0 , 0 , bmp.Size , CopyPixelOperation.SourceCopy ) ; var snipper = new SnippingTool ( bmp ) ; if ( snipper.ShowDialog ( ) == DialogResult.OK ) { return snipper.Image ; } return null ; } public SnippingTool ( Image screenShot ) { InitializeComponent ( ) ; this.BackgroundImage = screenShot ; this.ShowInTaskbar = false ; this.FormBorderStyle = FormBorderStyle.None ; this.StartPosition = FormStartPosition.Manual ; int screenLeft = SystemInformation.VirtualScreen.Left ; int screenTop = SystemInformation.VirtualScreen.Top ; int screenWidth = SystemInformation.VirtualScreen.Width ; int screenHeight = SystemInformation.VirtualScreen.Height ; this.Size = new System.Drawing.Size ( screenWidth , screenHeight ) ; this.Location = new System.Drawing.Point ( screenLeft , screenTop ) ; this.DoubleBuffered = true ; } public Image Image { get ; set ; } private Rectangle rcSelect = new Rectangle ( ) ; private Point pntStart ; protected override void OnMouseDown ( MouseEventArgs e ) { if ( e.Button ! = MouseButtons.Left ) return ; pntStart = e.Location ; rcSelect = new Rectangle ( e.Location , new Size ( 0 , 0 ) ) ; this.Invalidate ( ) ; } protected override void OnMouseMove ( MouseEventArgs e ) { if ( e.Button ! = MouseButtons.Left ) return ; int x1 = Math.Min ( e.X , pntStart.X ) ; int y1 = Math.Min ( e.Y , pntStart.Y ) ; int x2 = Math.Max ( e.X , pntStart.X ) ; int y2 = Math.Max ( e.Y , pntStart.Y ) ; rcSelect = new Rectangle ( x1 , y1 , x2 - x1 , y2 - y1 ) ; this.Invalidate ( ) ; } protected override void OnMouseUp ( MouseEventArgs e ) { if ( rcSelect.Width < = 0 || rcSelect.Height < = 0 ) return ; Image = new Bitmap ( rcSelect.Width , rcSelect.Height ) ; using ( Graphics gr = Graphics.FromImage ( Image ) ) { gr.DrawImage ( this.BackgroundImage , new Rectangle ( 0 , 0 , Image.Width , Image.Height ) , rcSelect , GraphicsUnit.Pixel ) ; } DialogResult = DialogResult.OK ; } protected override void OnPaint ( PaintEventArgs e ) { using ( Brush br = new SolidBrush ( Color.FromArgb ( 120 , Color.Black ) ) ) { int x1 = rcSelect.X ; int x2 = rcSelect.X + rcSelect.Width ; int y1 = rcSelect.Y ; int y2 = rcSelect.Y + rcSelect.Height ; e.Graphics.FillRectangle ( br , new Rectangle ( 0 , 0 , x1 , this.Height ) ) ; e.Graphics.FillRectangle ( br , new Rectangle ( x2 , 0 , this.Width - x2 , this.Height ) ) ; e.Graphics.FillRectangle ( br , new Rectangle ( x1 , 0 , x2 - x1 , y1 ) ) ; e.Graphics.FillRectangle ( br , new Rectangle ( x1 , y2 , x2 - x1 , this.Height - y2 ) ) ; } using ( Pen pen = new Pen ( Color.Red , 3 ) ) { e.Graphics.DrawRectangle ( pen , rcSelect ) ; } } protected override bool ProcessCmdKey ( ref Message msg , Keys keyData ) { if ( keyData == Keys.Escape ) this.DialogResult = DialogResult.Cancel ; return base.ProcessCmdKey ( ref msg , keyData ) ; } } pictureBox1.Image = SnippingTool.Snip ( ) ;"
"class Program { public static void OutputDateTime ( DateTime ? datetime ) { Console.WriteLine ( datetime ) ; } public static bool IsDateTimeHappy ( DateTime datetime ) { if ( DateTime.Compare ( datetime , DateTime.Parse ( `` 1/1 '' ) ) == 0 ) return true ; return false ; } static void Main ( string [ ] args ) { DateTime myDateTime = DateTime.Now ; OutputDateTime ( IsDateTimeHappy ( myDateTime ) ? null : myDateTime ) ; Console.ReadLine ( ) ; ^ } | } |// This line has the compile issue -- -- -- -- -- -- -- -+ condition ? first_expression : second_expression ; if ( condition ) first_expression ; else second_expression ;"
[ AttributeUsage ( AttributeTargets.Class ) ] public class FooAttribute : Attribute { } [ Foo ] public class Bar { } class Program { static void Main ( string [ ] args ) { var attrs = CustomAttributeExtensions.GetCustomAttribute < FooAttribute > ( typeof ( Bar ) ) ; } } Can not convert type 'System.Type ' to 'System.Reflection.MemberInfo '
public abstract class AbstractClass { public static AbstractClass MakeAbstractClass ( string args ) { if ( args == `` a '' ) return new ConcreteClassA ( ) ; if ( args == `` b '' ) return new ConcreteClassB ( ) ; } } public class ConcreteClassA : AbstractClass { } public class ConcreteClassB : AbstractClass { }
"{ `` Size '' : { `` Width '' : 100 , `` Height '' : 50 } , `` Shapes '' : [ { `` Width '' : 10 , `` Height '' : 10 } , { `` Path '' : `` foo.bar '' } , { `` Width '' : 5 , `` Height '' : 2.5 } , { `` Width '' : 4 , `` Height '' : 3 } , ] } var jsonObject = JObject.Load ( reader ) ; bool isCustom = jsonObject .Properties ( ) .Any ( x = > x.Name == `` Path '' ) ; IShape sh ; if ( isCustom ) { sh = new ShapeDxf ( ) ; } else { sh = new ShapeRect ( ) ; } serializer.Populate ( jsonObject.CreateReader ( ) , sh ) ; return sh ;"
"var newSD = new SortedDictionary < k , v > ( ) ; foreach ( var p in oldDictionary.Where ( p = > p.Key.CompareTo ( value ) > = 0 ) ) newSD.Add ( p.Key , p.Value ) ;"
"ALTER PROCEDURE [ dbo ] . [ getByName ] @ firstName varchar , @ lastName varcharAS ... public List < Person > GetPersonByName ( string first , string last ) { var people = new List < Person > ( ) ; var connString = ConfigurationManager.ConnectionStrings [ `` MyDbConnString '' ] .ConnectionString ; using ( var conn = new SqlConnection ( connString ) ) { using ( var cmd = new SqlCommand ( `` dbo.getByName '' , conn ) ) { cmd.CommandType = CommandType.StoredProcedure ; cmd.Parameters.Add ( new SqlParameter ( `` @ firstName '' , SqlDbType.VarChar , 50 ) ) .Value = first ; cmd.Parameters.Add ( new SqlParameter ( `` @ lastName '' , SqlDbType.VarChar , 50 ) ) .Value = last ; conn.Open ( ) ; using ( var reader = cmd.ExecuteReader ( ) ) { people = ReadPeopleData ( reader ) ; } conn.Close ( ) ; } } return people ; } ALTER PROCEDURE [ dbo ] . [ getEmployeesByName ] @ firstName varchar ( 50 ) , @ lastName varchar ( 50 ) AS ... cmd.Parameters.Add ( new SqlParameter ( `` @ firstName '' , SqlDbType.VarChar , 50 ) ) .Value"
public class Parent { private ICollection < Child > children ; public ReadOnlyCollection Children { get ; } public void AddChild ( Child child ) { child.Parent = this ; children.Add ( child ) ; } } public class Child { internal Parent Parent { get ; set ; } public DateTime ValidFrom ; public DateTime ValidTo ; public Child ( ) { } } public class ChildValiditySpecification { bool IsSatisfiedBy ( Child child ) { return child.Parent.Children.Where ( < validityIntersectsCondition here > ) .Count > 0 ; } }
"using System ; using System.CodeDom.Compiler ; using System.IO ; using System.Reflection ; using System.Linq ; namespace DebugSerializeCompiler { class Program { static void Main ( ) { if ( ! Environment.GetCommandLineArgs ( ) .Contains ( `` Compile '' ) ) { DebugSerializeCompiler.SerializerTest.Run ( ) ; } else { Assembly assembly ; if ( TryCompile ( `` ..\\..\\SerializerTest.cs '' , new [ ] { `` Microsoft.CSharp.dll '' , `` System.dll '' , `` System.Core.dll '' , `` System.Data.dll '' , `` System.Xml.dll '' } , out assembly ) ) { Type type = assembly.GetType ( `` DebugSerializeCompiler.SerializerTest '' ) ; MethodInfo methodInfo = type.GetMethod ( `` Run '' ) ; methodInfo.Invoke ( null , null ) ; } } Console.ReadKey ( ) ; } static bool TryCompile ( string fileName , string [ ] referencedAssemblies , out Assembly assembly ) { bool result ; CodeDomProvider compiler = CodeDomProvider.CreateProvider ( `` CSharp '' ) ; var compilerparams = new CompilerParameters { GenerateExecutable = false , GenerateInMemory = true } ; foreach ( var referencedAssembly in referencedAssemblies ) { compilerparams.ReferencedAssemblies.Add ( referencedAssembly ) ; } using ( var reader = new StreamReader ( fileName ) ) { CompilerResults compilerResults = compiler.CompileAssemblyFromSource ( compilerparams , reader.ReadToEnd ( ) ) ; assembly = compilerResults.CompiledAssembly ; result = ! compilerResults.Errors.HasErrors ; if ( ! result ) { Console.Out.WriteLine ( `` Compiler Errors : '' ) ; foreach ( CompilerError error in compilerResults.Errors ) { Console.Out.WriteLine ( `` Position { 0 } . { 1 } : { 2 } '' , error.Line , error.Column , error.ErrorText ) ; } } } return result ; } } } using System ; using System.Collections.Generic ; using System.IO ; using System.Xml.Serialization ; namespace DebugSerializeCompiler { public class SerializerTest { public static void Run ( ) { Console.WriteLine ( `` Executing Run ( ) '' ) ; var family = new Family ( ) ; var xmlSerializer = new XmlSerializer ( typeof ( Family ) ) ; TextWriter sw = new StringWriter ( ) ; try { if ( sw == null ) Console.WriteLine ( `` sw == null '' ) ; if ( family == null ) Console.WriteLine ( `` family == null '' ) ; if ( xmlSerializer == null ) Console.WriteLine ( `` xmlSerializer == null '' ) ; xmlSerializer.Serialize ( sw , family ) ; } catch ( Exception e ) { Console.WriteLine ( `` Exception caught : '' ) ; Console.WriteLine ( e ) ; } Console.WriteLine ( sw ) ; } } [ Serializable ] public class Family { public string LastName { get ; set ; } public List < FamilyMember > FamilyMembers { get ; set ; } } [ Serializable ] public class FamilyMember { public string FirstName { get ; set ; } } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < Project ToolsVersion= '' 4.0 '' DefaultTargets= '' Build '' xmlns= '' http : //schemas.microsoft.com/developer/msbuild/2003 '' > < PropertyGroup > < Configuration Condition= '' ' $ ( Configuration ) ' == `` `` > Debug < /Configuration > < Platform Condition= '' ' $ ( Platform ) ' == `` `` > x86 < /Platform > < ProductVersion > 8.0.30703 < /ProductVersion > < SchemaVersion > 2.0 < /SchemaVersion > < ProjectGuid > { 7B8D2187-4C58-4310-AC69-9F87107C25AA } < /ProjectGuid > < OutputType > Exe < /OutputType > < AppDesignerFolder > Properties < /AppDesignerFolder > < RootNamespace > DebugSerializeCompiler < /RootNamespace > < AssemblyName > DebugSerializeCompiler < /AssemblyName > < TargetFrameworkVersion > v4.0 < /TargetFrameworkVersion > < TargetFrameworkProfile > Client < /TargetFrameworkProfile > < FileAlignment > 512 < /FileAlignment > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Debug|x86 ' `` > < PlatformTarget > x86 < /PlatformTarget > < DebugSymbols > true < /DebugSymbols > < DebugType > full < /DebugType > < Optimize > false < /Optimize > < OutputPath > bin\Debug\ < /OutputPath > < DefineConstants > DEBUG ; TRACE < /DefineConstants > < ErrorReport > prompt < /ErrorReport > < WarningLevel > 4 < /WarningLevel > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Release|x86 ' `` > < PlatformTarget > x86 < /PlatformTarget > < DebugType > pdbonly < /DebugType > < Optimize > true < /Optimize > < OutputPath > bin\Release\ < /OutputPath > < DefineConstants > TRACE < /DefineConstants > < ErrorReport > prompt < /ErrorReport > < WarningLevel > 4 < /WarningLevel > < /PropertyGroup > < ItemGroup > < Reference Include= '' System '' / > < Reference Include= '' System.Core '' / > < Reference Include= '' Microsoft.CSharp '' / > < Reference Include= '' System.Data '' / > < Reference Include= '' System.Xml '' / > < /ItemGroup > < ItemGroup > < Compile Include= '' Program.cs '' / > < Compile Include= '' Properties\AssemblyInfo.cs '' / > < Compile Include= '' SerializerTest.cs '' > < SubType > Code < /SubType > < /Compile > < /ItemGroup > < Import Project= '' $ ( MSBuildToolsPath ) \Microsoft.CSharp.targets '' / > < ! -- To modify your build process , add your task inside one of the targets below and uncomment it . Other similar extension points exist , see Microsoft.Common.targets . < Target Name= '' BeforeBuild '' > < /Target > < Target Name= '' AfterBuild '' > < /Target > -- > < /Project >"
"using System ; using System.IO ; using System.Linq ; using System.Collections.Generic ; public class dt { public int ? Id ; public string Data ; } public class JoinTest { public static int Main ( string [ ] args ) { var a = new List < dt > { new dt { Id = null , Data = `` null '' } , new dt { Id = 1 , Data = `` 1 '' } , new dt { Id = 2 , Data = `` 2 '' } } ; var b = new List < dt > { new dt { Id = null , Data = `` NULL '' } , new dt { Id = 2 , Data = `` two '' } , new dt { Id = 3 , Data = `` three '' } } ; //Join with null elements var c = a.Join ( b , dtA = > dtA.Id , dtB = > dtB.Id , ( dtA , dtB ) = > new { aData = dtA.Data , bData = dtB.Data } ) .ToList ( ) ; // Output : // 2 two foreach ( var aC in c ) Console.WriteLine ( aC.aData + `` `` + aC.bData ) ; Console.WriteLine ( `` `` ) ; //Join with null elements converted to zero c = a.Join ( b , dtA = > dtA.Id.GetValueOrDefault ( ) , dtB = > dtB.Id.GetValueOrDefault ( ) , ( dtA , dtB ) = > new { aData = dtA.Data , bData = dtB.Data } ) .ToList ( ) ; // Output : // null NULL // 2 two foreach ( var aC in c ) Console.WriteLine ( aC.aData + `` `` + aC.bData ) ; Console.WriteLine ( EqualityComparer < int ? > .Default.Equals ( a [ 0 ] .Id , b [ 0 ] .Id ) ) ; Console.WriteLine ( EqualityComparer < object > .Default.Equals ( a [ 0 ] .Id , b [ 0 ] .Id ) ) ; Console.WriteLine ( a [ 0 ] .Id.Equals ( b [ 0 ] .Id ) ) ; return 0 ; } }"
"public Task ShouldHaveBeenAsynchronous ( Action userDelegate , CancellationToken ct ) { var tcs = new TaskCompletionSource < object > ( ) ; try { userDelegate ( ) ; tcs.SetResult ( null ) ; // Indicate completion } catch ( OperationCanceledException ex ) { if ( ex.CancellationToken == ct ) tcs.SetCanceled ( ) ; // Need to pass ct here , but ca n't else tcs.SetException ( ex ) ; } catch ( Exception ex ) { tcs.SetException ( ex ) ; } return tcs.Task ; } private void OtherSide ( ) { var cts = new CancellationTokenSource ( ) ; var ct = cts.Token ; cts.Cancel ( ) ; Task wrappedOperation = ShouldHaveBeenAsynchronous ( ( ) = > { ct.ThrowIfCancellationRequested ( ) ; } , ct ) ; try { wrappedOperation.Wait ( ) ; } catch ( AggregateException aex ) { foreach ( var ex in aex.InnerExceptions .OfType < OperationCanceledException > ( ) ) { if ( ex.CancellationToken == ct ) Console.WriteLine ( `` OK : Normal Cancellation '' ) ; else Console.WriteLine ( `` ERROR : Unexpected cancellation '' ) ; } } }"
"//Need the following packages// < package id= '' DocumentFormat.OpenXml '' version= '' 2.7.2 '' targetFramework= '' net471 '' / > // < package id = `` HtmlToOpenXml.dll '' version= '' 2.0.1 '' targetFramework= '' net471 '' / > using System.Linq ; using DocumentFormat.OpenXml ; using DocumentFormat.OpenXml.Packaging ; using DocumentFormat.OpenXml.Wordprocessing ; using HtmlToOpenXml ; namespace ConsoleAppHtmlParse { class Program { static void Main ( string [ ] args ) { string fileName = @ '' C : \temp\myDoc.docx '' ; using ( WordprocessingDocument document = WordprocessingDocument.Create ( fileName , WordprocessingDocumentType.Document ) ) { document.AddMainDocumentPart ( ) ; document.MainDocumentPart.Document = new Document ( new Body ( ) ) ; HtmlConverter conveter = new HtmlConverter ( document.MainDocumentPart ) ; var compositeElements = conveter.Parse ( Html ) ; Paragraph p = compositeElements [ 0 ] as Paragraph ; p.ParagraphProperties = new ParagraphProperties ( ) ; p.ParagraphProperties.FrameProperties = new FrameProperties ( ) ; p.ParagraphProperties.FrameProperties.Width = new StringValue ( `` 3200 '' ) ; document.MainDocumentPart.Document.Body.Append ( compositeElements ) ; } } const string Html = `` < p > SomeText < img src=\ '' data : image/png ; base64 , iVBORw0KGgoAAAANSUhEUgAAAUAAAAApCAYAAABEHPCMAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAADktJREFUeF7tXftTFVcSvv/JbtX6QoygwIUgvhV8ElGCoMaYTXaT1Wh2f9jaVEzFxM1uahMVxGhABXkKijzE9RHFR6qSUkwEXzFuhIuKb9foRTegxvR2nzln5sw4wLlXiJF7vqqupqfP6e7TPd0zFxA9oKGhoRGi0ANQQ0MjZKEHoIaGRshCD0ANDY2QhR6AGhoaIQs9ADU0NEIWegBqaGiELPQA1NDQCFnoAaihoRGyMAfgzz//rKmXKFi42dKkKdSoN+EhB2dv+mBpXTZMKn4Dxha8qqmHiPJJeaX8BlJIXRNNmoLvn0DgOXuzBSaXLYK5u9+FN7/8GJZ8tRLeQtL8yTnlk/JK+aU8qxTRGH66Jpprvgjv/XmsfxYq90+g8Cw9mA1zdi+F9H3vwNTdf4ZJO5fA5F1vwWTOtRy8TPmcjXml/FKeHz16xNPeOWjNOwd0TbSs5alI6XVLIWPXO8r9Eyg8kza/Dml734aknYvR8WLNe4FTfinPP/30U5dPMdLRmiRdE801N7lq/wQDz+iiBejkTUj89yJGEznXcs/JlF/K88OHD7sdgLRmlK6JlrVsUpJi/wQDz6iil9HhQpiwYyHnf9JyL8iUZ9UBOLJwvpJNLWs5VGSV/gkGnoTCl2D8jjdgfC2S5r3GKc+qAzChQNdEc81lrtI/wcAzApttXO3rSH9kfOx2gz+JPHbrAhhdpb4+FGTKs+oAjN80z9XGk8i6Jlp+lmWV/gkGnvhNc2HM9j/AmJrXeoSPLl0C79YfhPL9iyGhUn1fX+eUZ+UBmD9HyaYq1zXR/FnnKv0TDDzP52fA6JpXe4RGlS6GpScvQgdZfngN6va/CSO2ua8NNaI8qw5AXZNepIo5EP3hFIj4cDaMcNP/AjRiPfmfAtGFr7jqNT1OKv3TFW7daYNzF69A49lmG3ni8tJhVPXvYWT1K8hf4TxwOaF0kdVoAg+vQl3dQojf1v3++NzJMPTvkyGq4GVX/dOSEwpSWFzeUrX1ncmUZ9UBGJs3W8lmd3JfrYkRVwrEbe18/UheN4vSIJ70x09DG0vEJdghrX+SeAKVd9xmAUDb1TKHfi54bTFzyk5HXfD++oKs0j9uuP/gIZxtaX1s8AnyePPSIKF6ASRUIQXLty2BpScu2BtNABtu36ElMKIbO7XSTdHVul+aZ1++y+LyNbnrVTnlWXUAejfqmnTO50PtLYrqHnzd6KZfACM2zYAVLUbdLFyC2hLUmwOwFWpd7fc+7zyvB8FnqOxoPw4rcud2ai8UuEr/OEHD7+T3La6DT5AnZmMqNsJ8iK+cHzxvOA7/5U5dgQX8Zzd2zJviymYmx+YkwpDlyRCTPwt5IoQjDVmdBs9XZkC0kJfPgli+X6yPykl2rLf8xG9K5vtInwzeLcL/PIjJ4vaKhb8UiFqdCJU3jbiaGx+3FwinPKsOwOgNuibuNUmGYcvXw5F2iuouHNmL+twMR9zzIKtVPLTE9S/gmxvfwo7zKDeeMt8Aa/OtuIZtmsf3Z0CUGQ/nORnczjzw4j0RjjHFlczienFe+z7LnryP9MlQ48irtU4MQBru/LrvErsCtw5YeStPwzxY8UUVi/1Itnwil/Jj1EPss+pk2svCt2RmR9QTzynrMQ9xuQ67Zh4c17vMR+BcpX+c6OzNb3RKBiP62kPNFl/5EiZ3HpLBn0TezotL8DV1v17IYp//Sokk401+md8AhPZG+GR5HbRwEeACVOXPsa1vvn2PaRhofc5spo/Lnwaf2N4KqIGmQ3Q5+S+Fr9mr0gWobLzAtAB34OYD/qXAg28hW/E8TpnyrDoAozbMCspHZ3Lfqcn/cIUDbYcc8W/m++ihNRGbNt2uxwHoJyXGUXXFisvfUgBe0pcflM7CcXM3DhnaX+ISEw7SytnY7LuhmV8h+FvWw/BiI5/enFw+tAn3wHfLOAXl1Z7/A3wA3sUBaFyPqz9hxNtxmt17z5e/CBF7G41rHM2N0yCmHNcXpzjyifAfhDjcR8NPPMwN4BnwIe8lv+Kh0HEKfchxtMJ2WY95MG3cOcTqF27mgYPVo+t82OqhKKv0jwz6np9z8AmyDcDhG2ZC3La5EIvEeMWcJ5JrfuARIHxN3a8Xstjnv1Jsk+H2ASZbTYw3HMqrrxo3r/9Skev61df5zX2rDn1lQCZ/K2i7VoJ6bK77JGHDffUiyiVw1PlZsQ1vHOk6nYXsqp7HKVOeVQfgsPUpSjZV5b5VE2tIHG1wj7/WeMUzgE0b9v54GJw5C7ykb+ADENF2oxTXi7eui1BThvoTpVDbchCyuT3xFtz8XRrK7jHFFu7jzW7kIbbFeEA04Z64bWlQzYeG4U8MdsornVuO3zrbkc8nQNgHE+BjMdDID60RA/H+t7Aa5WyW07tQX58BsU2tpMEzfw5ReJZYPEs20uqKF80YfC3kTwx5fFjl4b6Gk3zInmI2Yyv2WwOQZKGX0NJi1Y8NWRY/r0eX+SD7avefLKv0jwy3H3i4kYeajRx4KzARSAYPXrY3m/p+udnc5KwrRrKF7D13kcnww37X9V5RtPYTkFVRBPX8Y9PRBu5f7Mdm9FYUWzf2HbzRSM/isq43n7PH64y/O5nyrD4AZyjZVJX7Vk328+YS+9zixzc159t7ewOs2DhbauZWqGHrhR/ZXipE4tAchGQOIDyTMybhL+Y/Rtz+lhw2bAe9vwua6ALlYXMdj1f4s+ph5EWOXwweB2gw8fNlXTLiaWo04gvb08DOQ7a8fNDQWY7sIf0UGL4Z7Zsx4JDn/laL2l0qtOrScRL9kF7EwddLA9CHg8+I16V+7Ho3+WD27etVZJX+keE27ATZ3gAjc1+AmK3pSLMZj+ZcRY7KSYKBy8bCoGXjkMbC4DUzoeYOjwDha5oJz31k6QctS4KIYnd71k1R5CpbzWbIMWaz1bmujzkm3ehbrSdr/THuX+zHomdtLZIGnRwfFtlxPZD8yDLlWXUARuQmu9pQkft+TUQzY+PxfV3lY7voXIT/UoEUAzY3WydqzO2VzoDwZTuNhpXBziTHZPnLusqHpBP+AxBzXLxxCn/pUO3IixWvfDa0e42/Md/cA5Glhj/x/UMn2q4XM718XrJz+NAMiDoun9nwJ2pHb+fRIics76SXBibJtpyJeF3qx8/RZT7M/dZ6FVmlf2Q4h55MtgEYkTsdHaRB1Ja0gHnRdfaZxcLtL+CD3DHYgGNgAFLKri+g1fYXbO7DmVPu9syb4nKhq5zJfxor5Cip2dzWR35pPBnh/imjmcTHq8OpqE+FoafP0wVWlOithdKgk+OSb3j3uFU55Vl1AA7N0TXpvCbWG2D9N+5xD1+PD4G1Kaa8kr81wR1qdv4REpu5mumFH27va6HHIY36VWIvnilqiz0m06/P+Ojp9+XBsMfiEYPiPFQVkJwKVeyn2FLezPXWAKw/hrL5AxscZF8a5xFDsel0Mgy3+SGeAhEbUplcYxyCDbXMLVIMhca6FT7jXG3Xi9APH3D4Zr6K7BTs5Q8AzBHJ30g5M/1Z9aPYmP8S9E28y3wEx1X6R4Zz6MlkG4DP5UzDRKbC8HKkAHkVv8EDQfP3j9shLmz5Lxe4yqvMZjPk4d+LZttnX39xPfRfNhoqbhhy2/VCps/k33/y+9ahfh0cZq/v9+BoI/kvsG5sR3ziRmpqGI37EmFosV2vyinPqgPwuc90TTqvSaHVeLupJlMgQo67ZDp8TM19cyf0f4/0ll+fD/VSM1exfcIPDUCUefOK/ZUin3Smcimmc9wf8ys+Mp6HCvQn/A7Oncn09ntoHRzhNsy8mXbE9854LHjdHGQYz5BNeE0MxfZj8BH3Q/6GFKRCxJqdcJhySdf3HDPO6d9vs8NieE+84dKQJz+O+M/wHFCOSC/nTIpX1A9uYK5o3+518NHK6TCsm3xY51XnKv0jwzn0ZLINwCGfTcWAZ0Fk+UyDl3GuIKs0W+vxv7Lf2xK8+Zy7vWpeoLbrBa7ySp5sIUeKG9Vfx2Sz2Tp4URDUaHK8q0TBGKjRhH/RVNgkzc746ngxCbinwalXkynPqgMwfN0UJZtuckjUpOEkfzMitEK1nA/zrckOn8+px33MnvBDvg074pyENn+rsR7PFIkD0IxJ2CO/zL98nxgw81Jm7SP40CbB0nM7pg2eB8d5fD6+znZ+AxSPHDfD/ZOwSrJv14vzG3pbHfCsxlpaI/vjspRve/0Q+Ha/stt8WPtVZZX+kdHVD0FsA3DwuskQUYavzoI2z1CWC29JVVXCffjujLr9QGTxpPZfznfVP22Z8qw6AAevneRqQ0XWNdFyX5RV+keG8q/BhK2bBEPLZsDQzS8gcf4MypXm91XyesReT8uUZ9UBGLY2qUd8Pm35114TLT87skr/OKH0i9CDPk2EIaXJSNOfaV7JX+/91/Jc9U+bU55VB+CgTye62njW+K+9Jpo/O1ylf5xQ+qdwAz+dAOGl0yC8BEnzXuOUZ9UBOHCNronmmstcpX/c0O0fQxiwZjwMLpkKYcVTIKwECbmWe16mPKsOwP7Z43rEp5a13Fdklf7pCp3+Oax+2GyDiidr6mWiPKsOQF0TTZrspNI/wcATvjYRBhYmwYCiJBiIpHkvcMwv5Vl1AA7WNdFcc4sr9k8w8Ly2/W3ov3EC9C+ciJTI+IAig2u5Z2TKL+VZdQC+WvM3XRMta5nL/TaMV+qfYOA51noKBnwyFn6TmQD98sfD7wrGQ7+CCZr3BMd8Ul4pv5Rn1f8YXddEc82R54+D32aOxF4Yo9Q/wcDz4MEDOHH+DPyl7EMY+a908P5jpqYeIson5ZXyS3l+9Mj2j3BdQWt0TTRpCq5/AoVHNFxHRwe0t7fDjz/+qKmHiPJJeRXFU3l60RpdE02aguufwADwf8lkaQ0EsRMIAAAAAElFTkSuQmCC\ '' alt=\ '' Screenshot_3\ '' / > moretext < /p > '' ; } }"
"public class X { public int A { get ; set ; } public Y B { get ; set ; } } public class Y { public int C { get ; set ; } } public void Foo ( ) { var x = new X { A = 1 , B = { C = 3 } } ; } public void Foo ( ) { var x = new X { A = 1 , B = new Y { C = 3 } } ; }"
"Dim rand As New SecureRandom Dim arr As Byte ( ) = New Byte ( 7 ) { } rand.NextBytes ( arr ) Dim privateKeyInfo As EncryptedPrivateKeyInfo = EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo ( `` PBEwithHmacSHA-256 '' , Repository.Password.ToCharArray , arr , 1 , data.BouncyCastlePrivateKey )"
"public class Program { enum Direction { Up , Down , Left , Right } static void Main ( string [ ] args ) { // Old style Console.WriteLine ( string.Format ( `` The direction is { 0 } '' , Direction.Right ) ) ; Console.WriteLine ( string.Format ( `` The direction is { 0 } '' , ( int ) Direction.Right ) ) ; // New style Console.WriteLine ( $ '' The direction is { Direction.Right } '' ) ; Console.WriteLine ( $ '' The direction is { ( int ) Direction.Right } '' ) ; } } The direction is RightThe direction is 3The direction is RightThe direction is 3 // `` Cast is redundant '' warningConsole.WriteLine ( $ '' The direction is { ( int ) Direction.Right } '' ) ; // No warnings.Console.WriteLine ( string.Format ( `` The direction is { 0 } '' , ( int ) Direction.Right ) ) ;"
dbContext.Entities.ToArray ( ) ; // contains 3 entriesdbContext.Entities.Add ( new Entity ( ) ) ; dbContext.Entities.ToArray ( ) ; // still contains 3 entries
"var people = People .Where ( p = > p.Cars .Any ( c = > c.Colour == p.FavouriteColour ) ) ; void Main ( ) { var tuples = new List < Tuple < String , int > > ( ) { new Tuple < String , int > ( `` Hello '' , 4 ) , new Tuple < String , int > ( `` World '' , 2 ) , new Tuple < String , int > ( `` Cheese '' , 20 ) } ; var queryableTuples = tuples.AsQueryable ( ) ; // For this example , I want to check which of these strings are longer than their accompanying number . // The expression I want to build needs to use one of the values of the item ( the int ) in order to construct the expression . // Basically just want to construct this : // .Where ( x = > x.Item1.Length > x.Item2 ) var expressionToCheckTuple = BuildExpressionToCheckTuple ( ) ; var result = queryableTuples .AsExpandable ( ) .Where ( t = > expressionToCheckTuple.Invoke ( t ) ) .ToList ( ) ; } public Expression < Func < string , bool > > BuildExpressionToCheckStringLength ( int minLength ) { return str = > str.Length > minLength ; } public Expression < Func < Tuple < string , int > , bool > > BuildExpressionToCheckTuple ( ) { // I 'm passed something ( eg . Tuple ) that contains : // * a value that I need to construct the expression ( eg . the 'min length ' ) // * the value that I will need to invoke the expression ( eg . the string ) return tuple = > BuildExpressionToCheckStringLength ( tuple.Item2 /* the length */ ) .Invoke ( tuple.Item1 /* string */ ) ; } Expression < Func < Tuple < string , int > , bool > > expr = x = > x.Item1.Length > x.Item2 ; var result = queryableTuples .AsExpandable ( ) .Where ( t = > expr.Invoke ( t ) ) .ToList ( ) ; // New signature.public Expression < Func < string , int , bool > > BuildExpressionToCheckStringLength ( ) { // Now takes two parameters . return ( str , minLength ) = > str.Length > minLength ; } public Expression < Func < Tuple < string , int > , bool > > BuildExpressionToCheckTuple ( ) { // Construct the expression before-hand . var expression = BuildExpressionToCheckStringLength ( ) ; // Invoke the expression using both values . return tuple = > expression.Invoke ( tuple.Item1 /* string */ , tuple.Item2 /* the length */ ) ; }"
public class RunnableAdapter : IRunnable { public delegate void RunMethod ( ) ; private RunMethod Runner { get ; set ; } public RunnableAdapter ( RunMethod runner ) { this.Runner = runner ; } public void Run ( ) { Runner.Invoke ( ) ; } } Cheetah c = new Cheetah ( ) ; RunnableAdapter ra = new RunnableAdapter ( c.Run ) ;
"< UserControl.ContextMenu > < ContextMenu StaysOpen= '' True '' > < MenuItem Header= '' Arrow '' cal : Message.Attach= '' ChangeArrowType ( LogicArrowEnum.ARROW ) '' / > ... . public void ChangeArrowType ( LogicArrowEnum arrowType ) { MessageBox.Show ( arrowType ) ; //arrowType is empty ! } public enum LogicArrowEnum { ARROW = 1 , ASSIGN = 2 , IF = 3 , IF_ELSE = 4 }"
"Invalid cast from 'System.String ' to 'System.Reflection.RuntimePropertyInfo ' . public TViewModel GetUserSearchCriteriaDefaults < TViewModel > ( TViewModel viewModel ) where TViewModel : class { Type type = viewModel.GetType ( ) ; string className = viewModel.GetType ( ) .Name ; PropertyInfo [ ] properties = type.GetProperties ( ) ; if ( Request.Cookies [ className ] ! = null ) { string rawValue ; foreach ( PropertyInfo property in properties ) { if ( ! String.IsNullOrEmpty ( Request.Cookies [ className ] [ property.Name ] ) ) { rawValue = Server.HtmlEncode ( Request.Cookies [ className ] [ property.Name ] ) ; Type propertyType = property.GetType ( ) ; var convertedValue = Convert.ChangeType ( rawValue , propertyType ) ; < -- -- Error from this line property.SetValue ( viewModel , convertedValue ) ; } } } return viewModel ; }"
"[ Function ( Name = `` udf_find_a '' , IsComposable = true ) ] public IQueryable < A > FindA ( [ Parameter ( DbType = `` varchar ( 100 ) '' ) ] string keywords ) { return CreateMethodCallQuery < A > ( this , ( ( MethodInfo ) ( MethodBase.GetCurrentMethod ( ) ) ) , keywords ) ; }"
"object lockObject = new object ( ) ; ... method1 : lock ( lockObject ) { CODE1 } method2 : try { Monitor.TryEnter ( lockObject , 20000 , ref lockTaken ) ; if ( lockTaken ) { CODE2 } } catch ( ... ) { ... } finally { if ( lockTaken ) Monitor.Exit ( timerLock ) ; }"
"var foo = ( Name : `` Joe '' , Age : 42 ) ; return View ( foo ) ; @ model ( string Name , int Age ) ;"
// Working with SQLServer and C # // Retrieve all rowscmd.CommandText = `` SELECT some_field FROM data '' ; using ( var reader = cmd.ExecuteReader ( ) ) { while ( reader.Read ( ) ) { Console.WriteLine ( reader.GetString ( 0 ) ) ; } } // working with SQLite and Javaif ( cursor.moveToFirst ( ) ) { do { String data = cursor.getString ( cursor.getColumnIndex ( `` data '' ) ) ; // do what ever you want here } while ( cursor.moveToNext ( ) ) ; } cursor.close ( ) ;
"Int64 L = 90000 ; Int16 S = 90 ; dynamic Payload ; // Whatever is assigned to this next will be acceptedPayload = L ; // This finePayload = S ; // Still fine , a short can be implicitly converted to a longPayload = `` test '' ; // I want it to throw an exception here because the value assigned to Payload can not be implicitly cast to Int64 ( explicit casting is ok ) public dynamic Payload { set { if ( value is ... & & Payload is ... ) { // Using value.GetType ( ) and Payload.GetType ( ) does n't make any difference for me , it 's still ugly ... // this is ok } else if ( ... ) { ... // this is not ok , throw an exception } ... ... ... } }"
"public class Box { public BoxSize Size { get ; set ; } public IEnumerable < Box > Contents { get ; set ; } } Box FindBoxBySize ( Box box , BoxSize size ) { Box _foundBox = null ; Action < IEnumerable < Box > > _recurse = null ; _recurse = new Action < IEnumerable < Box > > ( boxes = > { foreach ( var _box in boxes ) { if ( _box.Size == size ) { _foundBox = _box ; return ; } if ( _box.Contents ! = null ) _recurse ( _box.Contents ) ; } } ) ; _recurse ( box.Contents ) ; return _foundBox ; }"
object o = 12 ; double d = ( double ) o ; object o = 12 ; double d = ( double ) ( int ) o ;
Thread mythread=new Thread ( ThreadStart ( something ) ) ;
"//select friend timeline posts postsvar pquery = from friend in fquery join post in db.game_timeline on friend.id equals post.user_id //join user in db.users on post.friend_id equals user.id into userGroup //join game in db.games on post.game_id equals game.game_id into gameGroup select new { Friend = friend , Post = post , Game = from game in db.games where game.game_id == post.game_id select game , Recipient = from user in db.users where user.id == post.user_id select user , Comments = from comment in db.timeline_comments where comment.post_id == post.id join users in db.users on comment.user_id equals users.id select new { User = users , Comment = comment } } ;"
"public static unsafe void Fill < T > ( this Span < T > span , [ NotNull ] Func < T > provider ) where T : struct { int cores = Environment.ProcessorCount , batch = span.Length / cores , mod = span.Length % cores , sizeT = Unsafe.SizeOf < T > ( ) ; //fixed ( void* p0 = & span.DangerousGetPinnableReference ( ) ) // This does n't work , ca n't pin a T object void* p0 = Unsafe.AsPointer ( ref span.DangerousGetPinnableReference ( ) ) ; { byte* p = ( byte* ) p0 ; // Local copy for the closure Parallel.For ( 0 , cores , i = > { byte* start = p + i * batch * sizeT ; for ( int j = 0 ; j < batch ; j++ ) Unsafe.Write ( start + sizeT * j , provider ( ) ) ; } ) ; // Remaining values if ( mod == 0 ) return ; for ( int i = span.Length - mod ; i < span.Length ; i++ ) span [ i ] = provider ( ) ; } }"
public class UserController : Controller { private UnitOfWork unitofwork ; public UserController ( ) { unitofwork = new UnitofWork ( ) ; } public ActionResult DoStuff ( ) { ... public class UserController : Controller { private UnitOfWork unitofwork = new UnitofWork ( ) ; public ActionResult DoStuff ( ) { ...
"// create boxed int IFormattable box = 42 ; // box.GetType ( ) == typeof ( int ) // unbox and narrow short x1 = ( short ) box ; // fails runtime : - ) short x2 = ( short ) ( int ) box ; // OK // unbox and make unsigned uint y1 = ( uint ) box ; // fails runtime : - ) uint y2 = ( uint ) ( int ) box ; // OK // unbox and widen long z1 = ( long ) box ; // fails runtime : - ) long z2 = ( long ) ( int ) box ; // OK ( cast to long could be made implicit ) // create boxed DayOfWeek IFormattable box = DayOfWeek.Monday ; // box.GetType ( ) == typeof ( DayOfWeek ) // unbox and convert to other // enum type in one cast DateTimeKind dtk = ( DateTimeKind ) box ; // succeeds runtime : - ( Console.WriteLine ( box ) ; // writes Monday Console.WriteLine ( dtk ) ; // writes Utc struct YellowInteger { public readonly int Value ; public YellowInteger ( int value ) { Value = value ; } // Clearly a yellow integer is completely different // from an integer without any particular color , // so it is important that this conversion is // explicit public static explicit operator int ( YellowInteger yi ) { return yi.Value ; } } object box = new YellowInteger ( 1 ) ; int x = ( int ) box ;"
"private static List < string > getPermutations ( int n , string source ) { IEnumerable < string > q = source.Select ( x = > x.ToString ( ) ) ; for ( int i = 0 ; i < n - 1 ; i++ ) { q = q.SelectMany ( x = > source , ( x , y ) = > x + y ) ; } return q.ToList ( ) ; // THIS IS WHERE THE ERROR HAPPENS } private static List < string > filterListByRegex ( List < string > list , string regex ) { List < string > newList = list.ToList ( ) ; for ( int i = newList.Count - 1 ; i > = 0 ; i -- ) { Match match = Regex.Match ( `` '' +newList [ i ] , regex , RegexOptions.IgnoreCase ) ; if ( ! match.Success ) { newList.RemoveAt ( i ) ; } } return newList ; }"
void Main ( ) { Compare1 ( ( Action ) Main ) .Dump ( ) ; Compare2 ( Main ) .Dump ( ) ; } bool Compare1 ( Delegate x ) { return x == ( Action ) Main ; } bool Compare2 ( Action x ) { return x == Main ; } False True
"internal class Program { private static void Main ( ) { Mapper.CreateMap < SourceFoo , TargetFoo > ( ) ; Mapper.CreateMap < string , Stuff > ( ) .ForMember ( dest = > dest.Value , opt = > opt.MapFrom ( src = > src ) ) .ForMember ( dest = > dest.IgnoreMe , opt = > opt.Ignore ( ) ) ; var source = new SourceFoo { Stuff = `` a '' , Stuff2 = `` a '' } ; var target = new TargetFoo { Stuff = new Stuff ( ) , Stuff2 = new Stuff ( ) } ; Mapper.Map ( source , target ) ; Console.WriteLine ( target.Stuff.Value ) ; Console.WriteLine ( target.Stuff2.Value ) ; Console.ReadLine ( ) ; } } public class SourceFoo { public string Stuff { get ; set ; } public string Stuff2 { get ; set ; } } public class TargetFoo { public Stuff Stuff { get ; set ; } public Stuff Stuff2 { get ; set ; } } public class Stuff { public string Value { get ; set ; } public bool IgnoreMe { get ; set ; } }"
"public class Human { public Id { get ; set ; } public string Name { get ; set ; } public string HomePlanet { get ; set ; } } public class HumanType : ObjectGraphType < Human > { public HumanType ( ) { Name = `` Human '' ; Field ( h = > h.Id ) .Description ( `` The id of the human . `` ) ; Field ( h = > h.Name , nullable : true ) .Description ( `` The name of the human . `` ) ; Field ( h = > h.HomePlanet , nullable : true ) .Description ( `` The home planet of the human . `` ) ; } } public class HumanInputType : InputObjectGraphType { public HumanInputType ( ) { Name = `` HumanInput '' ; Field < NonNullGraphType < StringGraphType > > ( `` name '' ) ; //The problematic field Field < StringGraphType > ( `` homePlanet '' ) ; } } /// Example JSON request for an update mutation without HomePlanet /// { /// `` query '' : `` mutation ( $ human : HumanInput ! ) { createHuman ( human : $ human ) { id name } } '' , /// `` variables '' : { /// `` human '' : { /// `` name '' : `` Boba Fett '' /// } /// } /// } ///public class StarWarsMutation : ObjectGraphType < object > { public StarWarsMutation ( StarWarsRepository data ) { Name = `` Mutation '' ; Field < HumanType > ( `` createOrUpdateHuman '' , arguments : new QueryArguments ( new QueryArgument < NonNullGraphType < HumanInputType > > { Name = `` human '' } ) , resolve : context = > { //After conversion human.HomePlanet is null . But it was not informed , we should keep what is on the database at the moment var human = context.GetArgument < Human > ( `` human '' ) ; //On EFCore the Update method is equivalent to an InsertOrUpdate method return data.Update ( human ) ; } ) ; } }"
"using ( var unitOfWork = new UnitOfWork ( ) ) { // Call the data access module and do n't worry about transactions . // Let the Unit of Work open a session , begin a transaction and then commit it . } class UnitOfWork : IDisposable { ISession _session ; ITransation _transaction ; . . . void Dispose ( ) { _transaction.Commit ( ) ; _session.Dispose ( ) ; } } void Dispose ( ) { if ( Dispose was called because an exception was thrown ) { _transaction.Commit ( ) ; } else { _transaction.RollBack ( ) ; } _session.Dispose ( ) ; }"
"public class CoinsWithdrawn { public DateTimeOffset WithdrawlDate { get ; private set ; } public Dictionary < CoinType , int > NumberOfCoinsByType { get ; private set ; } public CoinsWithdrawn ( DateTimeOffset withdrawDate , Dictionary < CoinType , int > numberOfCoinsByType ) { WithdrawlDate = withdrawDate ; NumberOfCoinsByType = numberOfCoinsByType ; } } public class CoinsWithdrawn { private DateTimeOffset _withdrawlDate ; private Dictionary < CoinType , int > _numberOfCoinsByType ; public DateTimeOffset WithdrawlDate { get { return _withdrawlDate ; } set { _withdrawlDate = value ; } } public Dictionary < CoinType , int > NumberOfCoinsByType { get { return _numberOfCoinsByType ; } set { _numberOfCoinsByType = value ; } } public CoinsWithdrawn ( DateTimeOffset withdrawDate , Dictionary < CoinType , int > numberOfCoinsByType ) { WithdrawlDate = withdrawDate ; NumberOfCoinsByType = numberOfCoinsByType ; } }"
"public static int GetDecimals ( MySimpleEnum val ) { int result = 0 ; switch ( val ) { case MySimpleEnum.Base : case MySimpleEnum.Slow : case MySimpleEnum.Normal : case MySimpleEnum.Quick : case MySimpleEnum.Fastest : result = 0 ; break ; } return result ; } public enum MySimpleEnum { Base = 0 , Slow = 1 , Normal = 2 , Quick = 3 , Fastest = 4 }"
class Foo < T > { public T Bar ( ) { /* ... */ } }
"< TextBlock Grid.Row= '' 1 '' Grid.Column= '' 0 '' Style= '' { StaticResource FieldLabel } '' > Search Column < /TextBlock > < StackPanel Grid.Row= '' 1 '' Grid.Column= '' 1 '' Style= '' { StaticResource ValidationStackPanel } '' > < ComboBox x : Name= '' cmbSearchColumn '' DisplayMemberPath= '' MemberName '' IsEditable= '' True '' ItemsSource= '' { Binding SearchColumns } '' SelectedValuePath= '' MemberValue '' Style= '' { StaticResource ComboBoxStyle } '' > < ComboBox.SelectedItem > < Binding Mode= '' TwoWay '' Path= '' SelectedColumn } '' UpdateSourceTrigger= '' Explicit '' > < Binding.ValidationRules > < helpers : NotEmptyStringValidationRule Message= '' Search Column can not be blank . '' ValidatesOnTargetUpdated= '' True '' / > < /Binding.ValidationRules > < /Binding > < /ComboBox.SelectedItem > < /ComboBox > < TextBlock Style= '' { StaticResource FieldLabelError } '' Text= '' { Binding ( Validation.Errors ) [ 0 ] .ErrorContent , ElementName=cmbSearchColumn } '' / > < /StackPanel > < TextBlock Grid.Row= '' 2 '' Grid.Column= '' 0 '' Padding= '' 0 0 9 9 '' Style= '' { StaticResource FieldLabel } '' > Search Value < /TextBlock > < StackPanel Grid.Row= '' 1 '' Grid.Column= '' 1 '' Style= '' { StaticResource ValidationStackPanel } '' > < TextBox x : Name= '' txtSearchValue '' Style= '' { StaticResource FieldTextBox } '' > < TextBox.Text > < Binding Mode= '' TwoWay '' Path= '' SearchValue '' UpdateSourceTrigger= '' Explicit '' > < Binding.ValidationRules > < helpers : NotEmptyStringValidationRule Message= '' Search Value can not be blank . '' ValidatesOnTargetUpdated= '' True '' / > < /Binding.ValidationRules > < /Binding > < /TextBox.Text > < /TextBox > < TextBlock Style= '' { StaticResource FieldLabelError } '' Text= '' { Binding ( Validation.Errors ) [ 0 ] .ErrorContent , ElementName=txtSearchValue } '' / > < /StackPanel > < Button Grid.Row= '' 4 '' Grid.Column= '' 1 '' Command= '' { Binding SearchEmployeesRelayCommand } '' Content= '' Search '' Style= '' { StaticResource FieldButton } '' / >"
"public class Sample { private static Sample _lastSample ; private static int _isSampling ; public static Sample TakeSample ( AutomationManager automation ) { //Only start sampling if not already sampling in some other context if ( Interlocked.CompareExchange ( ref _isSampling , 0 , 1 ) == 0 ) { try { Sample sample = new Sample ( ) ; sample.PerformSampling ( automation ) ; _lastSample = sample ; } finally { //We 're done sampling _isSampling = 0 ; } } return _lastSample ; } private void PerformSampling ( AutomationManager automation ) { //Lots of stuff going on that should n't be run in more than one context at the same time } }"
"Shader `` Custom/GridHighlightShader '' { Properties { [ HideInInspector ] _SelectionColor ( `` SelectionColor '' , Color ) = ( 0.1,0.1,0.1,1 ) [ HideInInspector ] _MovementColor ( `` MovementColor '' , Color ) = ( 0,0.205,1,1 ) [ HideInInspector ] _AttackColor ( `` AttackColor '' , Color ) = ( 1,0,0,1 ) [ HideInInspector ] _GlowInterval ( `` _GlowInterval '' , float ) = 1 _MainTex ( `` Albedo ( RGB ) '' , 2D ) = `` white '' { } _Glossiness ( `` Smoothness '' , Range ( 0,1 ) ) = 0.5 _Metallic ( `` Metallic '' , Range ( 0,1 ) ) = 0.0 } SubShader { Tags { `` RenderType '' = `` Opaque '' } LOD 200 CGPROGRAM // Physically based Standard lighting model , and enable shadows on all light types # pragma surface surf Standard fullforwardshadows // Use shader model 3.0 target , to get nicer looking lighting # pragma target 3.0 struct Input { float2 uv_MainTex ; float3 worldNormal ; float3 worldPos ; } ; sampler2D _MainTex ; half _Glossiness ; half _Metallic ; fixed4 _SelectionColor ; fixed4 _MovementColor ; fixed4 _AttackColor ; half _GlowInterval ; half _ColorizationArrayLength = 0 ; float4 _ColorizationArray [ 600 ] ; half _isPixelInColorizationArray = 0 ; // Add instancing support for this shader . You need to check 'Enable Instancing ' on materials that use the shader . // See https : //docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing . // # pragma instancing_options assumeuniformscaling UNITY_INSTANCING_BUFFER_START ( Props ) // put more per-instance properties here UNITY_INSTANCING_BUFFER_END ( Props ) void surf ( Input IN , inout SurfaceOutputStandard o ) { fixed4 c = tex2D ( _MainTex , IN.uv_MainTex ) ; // Update only the normals facing up and down if ( abs ( IN.worldNormal.x ) < = 0.5 & & ( abs ( IN.worldNormal.z ) < = 0.5 ) ) { // If no colors were passed in , reset all of the colors if ( _ColorizationArray [ 0 ] .w == 0 ) { _isPixelInColorizationArray = 0 ; } else { for ( int i = 0 ; i < _ColorizationArrayLength ; i++ ) { if ( abs ( IN.worldPos.x ) > = _ColorizationArray [ i ] .x & & abs ( IN.worldPos.x ) < _ColorizationArray [ i ] .x + 1 & & abs ( IN.worldPos.z ) > = _ColorizationArray [ i ] .z & & abs ( IN.worldPos.z ) < _ColorizationArray [ i ] .z + 1 ) { _isPixelInColorizationArray = _ColorizationArray [ i ] .w ; } } } if ( _isPixelInColorizationArray > 0 ) { if ( _isPixelInColorizationArray == 1 ) { c = tex2D ( _MainTex , IN.uv_MainTex ) + ( _SelectionColor * _GlowInterval ) - 1 ; } else if ( _isPixelInColorizationArray == 2 ) { c = tex2D ( _MainTex , IN.uv_MainTex ) + ( _MovementColor * _GlowInterval ) ; } else if ( _isPixelInColorizationArray == 3 ) { c = tex2D ( _MainTex , IN.uv_MainTex ) + ( _AttackColor * _GlowInterval ) ; } } } o.Albedo = c.rgb ; o.Metallic = _Metallic ; o.Smoothness = _Glossiness ; o.Alpha = c.a ; } ENDCG } FallBack `` Diffuse '' } private void Update ( ) { var t = ( 2 + ( ( Mathf.Sin ( Time.time ) ) ) ) ; meshRenderer.material.SetFloat ( `` _GlowInterval '' , t ) ; } public void SetColorizationCollectionForShader ( ) { var coloredTilesArray = Battlemap.Instance.tiles.Where ( x = > x.selectionMode ! = TileSelectionMode.None ) .ToArray ( ) ; // https : //docs.unity3d.com/ScriptReference/Material.SetVectorArray.html // Set the tile count in the shader 's own integer variable meshRenderer.material.SetInt ( `` _ColorizationArrayLength '' , coloredTilesArray.Length ) ; // Loop through the tiles to be colored only and grab their world coordinates for ( int i = 0 ; i < coloredTilesArray.Length ; i++ ) { // Also grab the selection mode as the w value of a float4 colorizationArray [ i ] = new Vector4 ( coloredTilesArray [ i ] .x - Battlemap.HALF_TILE_SIZE , coloredTilesArray [ i ] .y , coloredTilesArray [ i ] .z - Battlemap.HALF_TILE_SIZE , ( float ) coloredTilesArray [ i ] .selectionMode ) ; } // Feed the overwritten array into the shader meshRenderer.material.SetVectorArray ( `` _ColorizationArray '' , colorizationArray ) ; }"
"public class Circle { public string ID { get ; set ; } public EllipseGeometry circleGeometry { get ; set ; } public Path circlePath { get ; set ; } } Canvas.SetZIndex ( someCircleID.circlePath,2 ) ;"
"// [ Serializable ( ) ] - removed , unnecessarypublic class Foo { protected List < FooBar > fooBars = new List < FooBar > ( ) ; public virtual List < FooBar > FooBars { get { return fooBars ; } set { fooBars = value ; } } } // [ Serializable ( ) ] - removed , unnecessarypublic class FooBar { public int MyProperty { get ; set ; } } < Foo xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < FooBars > < ! -- Unwanted tag -- > < FooBar > < MyProperty > 7 < /MyProperty > < /FooBar > < FooBar > < MyProperty > 9 < /MyProperty > < /FooBar > < /FooBars > < /Foo > < Foo xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < FooBar > < MyProperty > 7 < /MyProperty > < /FooBar > < FooBar > < MyProperty > 9 < /MyProperty > < /FooBar >"
"Mock < IMyInterface > firstMockedObject = new Mock < IMyInterface > ( ) ; Mock < IMyInterface > secondMockedObject = new Mock < IMyInterface > ( ) ; UnitUnderTest.RegisterHAndler ( firstMockedObject.Object.GetType ( ) , handler1 ) ; UnitUnderTest.RegisterHAndler ( seconMockedObject.Object.GetType ( ) , handler2 ) ;"
"[ Remote ( `` doesUserNameExist '' , `` Account '' , HttpMethod = `` POST '' , ErrorMessage = `` User name already exists . Please enter a different user name . '' ) ]"
"$ .ajax ( { type : `` POST '' , url : `` MyWebService.aspx/DoSomething '' , data : ' { `` myClass '' : ' + JSON.stringify ( myClass ) + ' } ' , contentType : `` application/json ; charset=utf-8 '' , dataType : `` json '' , async : false , success : function ( result ) { alert ( `` success '' ) ; } , error : function ( ) { alert ( `` error '' ) ; } } ) ; [ WebMethod ( EnableSession = true ) ] public static object DoSomething ( MyClass myClass ) { HttpContext.Current.Request.InputStream.Position = 0 ; using ( var reader = new StreamReader ( HttpContext.Current.Request.InputStream ) ) { Logger.Log ( reader.ReadToEnd ( ) ) ; } }"
[ ImportMany ] public IList < IModule > Modules { get ; private set ; } public void BuildUp ( ) { Modules = new List < IModule > ( ) ; var catalog = new DirectoryCatalog ( @ '' .\Modules '' ) ; var container = new CompositionContainer ( catalog ) ; container.ComposeParts ( this ) ; }
fixed { int * p= & x } { // i work with x . }
"< data name= '' Expected.Text '' xml : space= '' preserve '' > < value > Expected Text < /value > < /data > < TextBlock x : Name= '' control '' x : uid= '' Expected / > ResourceLoader loader = ResourceLoader.GetForCurrentView ( ) ; var expected = loader.GetString ( `` Expected '' ) ; Assert.AreEqual ( expected , control.Text ) ;"
"public static bool Equals ( object a , object b ) { return a.Equals ( b ) ; } Hashtable ht = new Hashtable ( ) ; ht.Add ( ( int ) 1 , `` SOME STRING '' ) ; ht.Add ( ( short ) 1 , `` SOME STRING '' ) ; ht.Add ( ( long ) 1 , `` SOME STRING '' ) ;"
int foo ( int ** New_Message_Pointer ) ; [ DllImport ( `` example.dll '' ) ] static extern int foo ( ? ? ? ) ;
"< StackPanel Orientation= '' Horizontal '' VerticalAlignment= '' Top '' > < Button Width= '' 100 '' Height= '' 100 '' MouseMove= '' Button_MouseMove '' / > < Popup x : Name= '' popup '' StaysOpen= '' False '' AllowsTransparency= '' True '' Placement= '' Center '' > < TextBlock > Some random text < /TextBlock > < /Popup > < CheckBox IsChecked= '' { Binding ( Popup.IsOpen ) , ElementName=popup } '' > Popup < /CheckBox > < /StackPanel > private void Button_MouseMove ( object sender , MouseEventArgs e ) { popup.IsOpen = true ; } IsOpen = true ; System.Diagnostics.Trace.WriteLine ( `` M '' ) ;"
"// declarationvoid Method < T > ( T obj , Func < string , T > func ) ; // callMethod ( `` obj '' , s = > ( object ) s ) ;"
"`` \r ( ? ! ^\n ) '' , `` \r\n ''"
"The size is now of 1 elementsWith the loop it took : 00:00:00.0000015 With Linq it took : 00:00:00.0000288 The loop is faster : 94,79 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 10 elementsWith the loop it took : 00:00:00 With Linq it took : 00:00:00.0000007 The loop is faster : 100,00 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 100 elementsWith the loop it took : 00:00:00 With Linq it took : 00:00:00.0000011 The loop is faster : 100,00 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 1 000 elementsWith the loop it took : 00:00:00.0000003 With Linq it took : 00:00:00.0000078 The loop is faster : 96,15 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 10 000 elementsWith the loop it took : 00:00:00.0000063 With Linq it took : 00:00:00.0000765 The loop is faster : 91,76 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 100 000 elementsWith the loop it took : 00:00:00.0000714 With Linq it took : 00:00:00.0007602 The loop is faster : 90,61 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 1 000 000 elementsWith the loop it took : 00:00:00.0007669 With Linq it took : 00:00:00.0081737 The loop is faster : 90,62 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 10 000 000 elementsWith the loop it took : 00:00:00.0070811 With Linq it took : 00:00:00.0754348 The loop is faster : 90,61 % -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -The size is now of 100 000 000 elementsWith the loop it took : 00:00:00.0788133 With Linq it took : 00:00:00.7758791 The loop is faster : 89,84 % public static int Max ( this IEnumerable < int > source ) { if ( source == null ) throw Error.ArgumentNull ( `` source '' ) ; int value = 0 ; bool hasValue = false ; foreach ( int x in source ) { if ( hasValue ) { if ( x > value ) value = x ; } else { value = x ; hasValue = true ; } } if ( hasValue ) return value ; throw Error.NoElements ( ) ; } // -- -- -- -- -- -- -- -- private int [ ] arrDoubles ; // -- -- -- -- -- -- -- -- Stopwatch watch = new Stopwatch ( ) ; //Stop a 100 Millions to avoid memory overflow on my laptopfor ( int i = 1 ; i < = 100000000 ; i = i * 10 ) { fillArray ( i ) ; watch.Restart ( ) ; int max = Int32.MinValue ; // Reset for ( int j = 0 ; j < arrDoubles.Length ; j++ ) { max = Math.Max ( arrDoubles [ j ] , max ) ; } watch.Stop ( ) ; TimeSpan loopSpan = watch.Elapsed ; watch.Restart ( ) ; max = Int32.MinValue ; // Reset max = arrDoubles.Max ( ) ; watch.Stop ( ) ; TimeSpan linqSpan = watch.Elapsed ; } // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -private void fillArray ( int nbValues ) { int Min = Int32.MinValue ; int Max = Int32.MaxValue ; Random randNum = new Random ( ) ; arrDoubles = Enumerable.Repeat ( 0 , nbValues ) .Select ( i = > randNum.Next ( Min , Max ) ) .ToArray ( ) ; }"
"// Implement IClearabledynamicType.AddInterfaceImplementation ( typeof ( IClearable ) ) ; MethodBuilder clearnMethodBuilder = dynamicType.DefineMethod ( `` Clear '' , MethodAttributes.Public | MethodAttributes.Virtual , CallingConventions.Standard ) ; ILGenerator clearMethodILGen = clearnMethodBuilder.GetILGenerator ( ) ; foreach ( FieldBuilder localField in fields ) { clearMethodILGen.Emit ( OpCodes.Ldarg_0 ) ; clearMethodILGen.Emit ( OpCodes.Ldfld , localField ) ; clearMethodILGen.Emit ( OpCodes. ? ? , Profit ? ? ) ; } clearMethodILGen.Emit ( OpCodes.Ret ) ;"
"FileInfo [ ] fileList = new DirectoryInfo ( @ '' G : \Norton Backups '' ) .GetFiles ( ) ; var results = from file in fileList orderby file.CreationTime select new { file.Name , file.CreationTime , file.Length } ; foreach ( var x in results ) Console.WriteLine ( x.Name ) ; AWS025.sv2iAWS025_C_Drive038.v2iAWS025_C_Drive038_i001.iv2iAWS025_C_Drive038_i002.iv2iAWS025_C_Drive038_i003.iv2iAWS025_C_Drive038_i004.iv2iAWS025_C_Drive038_i005.iv2i ... var results = from file in fileList let IsMainBackup = \\ ? ? let ImageNumber = \\ ? ? let IncrementNumber = \\ ? ? where \\ it is a backup file . orderby file.CreationTime select new { file.Name , file.CreationTime , file.Length , IsMainBackup , ImageNumber , IncrementNumber } ;"
"foreach ( type x in list y ) { //dostuff1 ( x ) } foreach ( type x in list y ) { //dostuff2 ( x ) } foreach ( type x in list y ) { //dostuff3 ( x ) } foreach ( type x in list y ) { //dostuff4 ( x ) } foreach ( type x in list y ) { //dostuff5 ( x ) } foreach ( type x in list y ) { //dostuff1 ( x ) //dostuff2 ( x ) //dostuff3 ( x ) //dostuff4 ( x ) //dostuff5 ( x ) } void func ( type x ) { dostuff1 ( x ) yield 0 ; dostuff2 ( x ) yield 0 ; dostuff3 ( x ) yield 0 ; dostuff4 ( x ) yield 0 ; dostuff5 ( x ) yield break ; } for ( int i = 0 ; i < 5 ; ++i ) { foreach ( type x in list y ) { //Call func ( x ) using yield semantics , which I 'm not going to look up right now } }"
"void method1 ( ) { String VIP = `` test '' ; WebClient proxy = new WebClient ( ) ; proxy.OpenReadCompleted += new OpenReadCompletedEventHandler ( proxy_OpenReadCompleted ) ; String urlStr = `` someurl/lookup ? q= '' + keyEntityName + `` & fme=1 & edo=1 & edi=1 '' ; } void proxy_OpenReadCompleted ( object sender , OpenReadCompletedEventArgs e ) { }"
public static class TestParser { static void Parse ( string inputFile ) { // Lots of code goes in here } static void Parse ( List < string > inputFileList ) { // Lots of code goes in here too } }
List < Update > updates = Manager.ValidateAndCreate ( ) ; // protected void Save ( List < Update > updates ) { ... .Save ( updates ) ; public class ExceptionAdvice : AopAlliance.Intercept.IMethodInterceptor { public object Invoke ( AopAlliance.Intercept.IMethodInvocation invocation ) { if ( isValid ( invocation ) ) { return invocation.Proceed ( ) ; } else { return false ; } } private bool isValid ( ... } updates.GetType ( ) .Name == `` Boolean '' updates is bool == false
"routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; routes.MapRoute ( `` Mobile '' , // Route name `` mobile/ { language } / { controller } / { action } / { id } '' , // URL with parameters new { language = `` en '' , controller = `` Route '' , action = `` Index '' , id = UrlParameter.Optional } , // Parameter defaults new { language = @ '' en|us '' } // validation ) ; routes.MapRoute ( `` Default '' , // Route name `` { language } / { controller } / { action } / { id } '' , // URL with parameters new { language = `` en '' , controller = `` Route '' , action = `` Index '' , id = UrlParameter.Optional } , // Parameter defaults new { language = @ '' en|us '' } // validation ) ;"
"void Min ( ref Vector2 value1 , ref Vector2 value2 , out Vector2 result ) public static Vector2 Min ( Vector2 value1 , Vector2 value2 ) ; public class Game1 : Microsoft.Xna.Framework.Game { GraphicsDeviceManager graphics ; SpriteBatch spriteBatch ; private Vector2 vec1 = new Vector2 ( 1 , 2 ) ; private Vector2 vec2 = new Vector2 ( 2 , 3 ) ; private Vector2 min ; private string timeRefOut1 ; private string timeRefOut2 ; private SpriteFont font ; public Game1 ( ) { graphics = new GraphicsDeviceManager ( this ) ; Content.RootDirectory = `` Content '' ; refOut1 ( ) ; refOut2 ( ) ; } private Vector2 refOut1 ( ) { Vector2 min = Vector2.Min ( vec1 , vec2 ) ; return min ; } private Vector2 refOut2 ( ) { Vector2.Min ( ref vec1 , ref vec2 , out min ) ; return min ; } protected override void Initialize ( ) { const int len = 100000000 ; Stopwatch stopWatch = new Stopwatch ( ) ; stopWatch.Start ( ) ; for ( int i = 0 ; i < len ; i++ ) { refOut1 ( ) ; } stopWatch.Stop ( ) ; timeRefOut1 = stopWatch.ElapsedMilliseconds.ToString ( ) ; stopWatch.Reset ( ) ; stopWatch.Start ( ) ; for ( int i = 0 ; i < len ; i++ ) { refOut2 ( ) ; } stopWatch.Stop ( ) ; timeRefOut2 = stopWatch.ElapsedMilliseconds.ToString ( ) ; base.Initialize ( ) ; } protected override void LoadContent ( ) { spriteBatch = new SpriteBatch ( GraphicsDevice ) ; font = Content.Load < SpriteFont > ( `` SpriteFont1 '' ) ; } protected override void Update ( GameTime gameTime ) { if ( GamePad.GetState ( PlayerIndex.One ) .Buttons.Back == ButtonState.Pressed ) this.Exit ( ) ; base.Update ( gameTime ) ; } protected override void Draw ( GameTime gameTime ) { GraphicsDevice.Clear ( Color.CornflowerBlue ) ; spriteBatch.Begin ( ) ; spriteBatch.DrawString ( font , timeRefOut1 , new Vector2 ( 200 , 200 ) , Color.White ) ; spriteBatch.DrawString ( font , timeRefOut2 , new Vector2 ( 200 , 300 ) , Color.White ) ; spriteBatch.End ( ) ; // TODO : Add your drawing code here base.Draw ( gameTime ) ; } } .method public hidebysig static void Min ( valuetype Microsoft.Xna.Framework.Vector2 & value1 , valuetype Microsoft.Xna.Framework.Vector2 & value2 , [ out ] valuetype Microsoft.Xna.Framework.Vector2 & result ) cil managed { // Code size 69 ( 0x45 ) .maxstack 3 IL_0000 : ldarg.2 IL_0001 : ldarg.0 IL_0002 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0007 : ldarg.1 IL_0008 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_000d : blt.s IL_0017 IL_000f : ldarg.1 IL_0010 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0015 : br.s IL_001d IL_0017 : ldarg.0 IL_0018 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_001d : stfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0022 : ldarg.2 IL_0023 : ldarg.0 IL_0024 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0029 : ldarg.1 IL_002a : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_002f : blt.s IL_0039 IL_0031 : ldarg.1 IL_0032 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0037 : br.s IL_003f IL_0039 : ldarg.0 IL_003a : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_003f : stfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0044 : ret } // end of method Vector2 : :Min .method public hidebysig static valuetype Microsoft.Xna.Framework.Vector2 Min ( valuetype Microsoft.Xna.Framework.Vector2 value1 , valuetype Microsoft.Xna.Framework.Vector2 value2 ) cil managed { // Code size 80 ( 0x50 ) .maxstack 3 .locals init ( valuetype Microsoft.Xna.Framework.Vector2 V_0 ) IL_0000 : ldloca.s V_0 IL_0002 : ldarga.s value1 IL_0004 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0009 : ldarga.s value2 IL_000b : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0010 : blt.s IL_001b IL_0012 : ldarga.s value2 IL_0014 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0019 : br.s IL_0022 IL_001b : ldarga.s value1 IL_001d : ldfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0022 : stfld float32 Microsoft.Xna.Framework.Vector2 : :X IL_0027 : ldloca.s V_0 IL_0029 : ldarga.s value1 IL_002b : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0030 : ldarga.s value2 IL_0032 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0037 : blt.s IL_0042 IL_0039 : ldarga.s value2 IL_003b : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0040 : br.s IL_0049 IL_0042 : ldarga.s value1 IL_0044 : ldfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_0049 : stfld float32 Microsoft.Xna.Framework.Vector2 : :Y IL_004e : ldloc.0 IL_004f : ret } // end of method Vector2 : :Min"
public delegate void respondToY ( string msgToSend ) ; private respondToY yHandler ; public void Subscribe ( respondToY methodName ) { yHandler += methodName ; }
"@ using ( Html.BeginForm ( `` AssetReports '' , `` AssetReports '' , FormMethod.Post , new { target = `` _blank '' } ) ) { < div class= '' row mt-15 '' > < div class= '' col-md-12 text-center '' > < input type= '' submit '' class= '' btn btn-primary '' value= '' Show Report '' / > < /div > < /div > } [ HttpPost ] public void AssetReports ( AssetReportsDTO model , AssetReportParametersDTO reportParameters ) { SessionHandler.AssetReport = model ; SessionHandler.AssetReportParameters = reportParameters ; switch ( model.SelectedReportType ) { case AssetReportTypesEnum.ExcessiveIdleReport : Response.Redirect ( `` ~/Reports/AssetReports/ExcessiveIdleReport/ExcessiveIdleReport.aspx '' ) ; break ; } } Task.Factory.StartNew ( ( ) = > { switch ( model.SelectedReportType ) { case AssetReportTypesEnum.ExcessiveIdleReport : Response.Redirect ( `` ~/Reports/AssetReports/ExcessiveIdleReport/ExcessiveIdleReport.aspx '' ) ; break ; } } ) ; new Thread ( ( ) = > { switch ( model.SelectedReportType ) { case AssetReportTypesEnum.ExcessiveIdleReport : Response.Redirect ( `` ~/Reports/AssetReports/ExcessiveIdleReport/ExcessiveIdleReport.aspx '' ) ; break ; } } ) .Start ( ) ; public partial class ExcessiveIdleReport1 : Page { private IReportsProvider _reportsProvider ; protected void Page_Load ( object sender , EventArgs e ) { _reportsProvider = new ReportsProvider ( ) ; if ( ! IsPostBack ) { try { var reportDetails = SessionHandler.AssetReport ; var reportParams = SessionHandler.AssetReportParameters ; var sPath = Server.MapPath ( `` ../ExcessiveIdleReport/ExcessiveIdleReport.rdlc '' ) ; var dsExcessiveReport = _reportsProvider.GetExcessiveIdleReport ( reportDetails.CompanyId , reportDetails.AssetId , reportDetails.StartDate , reportDetails.EndDate , reportParams.SelectedIdleTime * 60 ) ; ExcessiveIdleReportViewer.ProcessingMode = ProcessingMode.Local ; ExcessiveIdleReportViewer.LocalReport.EnableHyperlinks = true ; ExcessiveIdleReportViewer.HyperlinkTarget = `` _blank '' ; ExcessiveIdleReportViewer.LocalReport.DataSources.Add ( new ReportDataSource ( `` ExcessiveIdleReport '' , dsExcessiveReport.Tables [ 0 ] ) ) ; ExcessiveIdleReportViewer.LocalReport.DataSources.Add ( new ReportDataSource ( `` ReportHeaderDetails '' , dsExcessiveReport.Tables [ 1 ] ) ) ; ExcessiveIdleReportViewer.LocalReport.DataSources.Add ( new ReportDataSource ( `` ReportSummary '' , dsExcessiveReport.Tables [ 2 ] ) ) ; ExcessiveIdleReportViewer.LocalReport.ReportPath = sPath ; ExcessiveIdleReportViewer.LocalReport.EnableExternalImages = true ; ExcessiveIdleReportViewer.LocalReport.SetParameters ( param ) ; ExcessiveIdleReportViewer.LocalReport.Refresh ( ) ; } catch ( Exception ex ) { ErrorDiv.InnerText = string.Format ( `` An error occured while generating the ExcessiveIdleReport , Please contact Support with following Message : [ { 0 } ] - [ { 1 } ] '' , ex.Message , ex.StackTrace ) ; ReportContentDiv.Visible = false ; ErrorDiv.Visible = true ; } } } } @ using ( Ajax.BeginForm ( `` AssetReports '' , `` AssetReports '' , new AjaxOptions ( ) { HttpMethod = `` POST '' , OnSuccess = `` OpenReport '' } , new { target = `` _blank '' } ) ) { < div class= '' row mt-15 '' > < div class= '' col-md-12 text-center '' > < input type= '' submit '' class= '' btn btn-primary '' value= '' Show Report '' / > < /div > < /div > } function OpenReport ( response ) { var popup = window.open ( `` about : blank '' , `` _blank '' ) ; // the about : blank is to please Chrome , and _blank to please Firefox popup.location = '/TBReports/AssetReports/ExcessiveIdleReport/ExcessiveIdleReport.aspx ' ; }"
"public class SearchRequestController : ApiController { public IEnumerable < ObjectA > GetAllRequests ( ) { ... } { } public IEnumerable < ObjectA > GetLatestRequest ( ) { ... } { } } public static void RegisterRoutes ( RouteCollection routes ) { routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; routes.MapRoute ( name : `` Default '' , url : `` { controller } / { action } / { id } '' , defaults : new { controller = `` Home '' , action = `` Index '' , id = UrlParameter.Optional } ) ; } Http : //myServer/myvirtualdirectory/api/SearchRequest/GetAllRequests Http : //myServer/myvirtualdirectory/api/SearchRequest/GetLatestRequest public class UserController : ApiController { public IEnumerable < UserObject > SearchUsersByInput ( ) { ... } } Http : //myServer/myvirtualdirectory/api/User/SearchUsersByInput I 'm getting a 405 : { `` Message '' : '' The requested resource does not support http method 'GET ' . '' } public class UserController : ApiController { [ HttpGet ] public IEnumerable < UserObject > SearchUsersByInput ( ) { ... } }"
static bool IsNull < T > ( T instance ) { return instance == null ; } int ? a = 0 ; string b = `` A '' ; int c = 0 ; var watch = Stopwatch.StartNew ( ) ; for ( int i = 0 ; i < 1000000 ; i++ ) { var r1 = IsNull ( a ) ; } Console.WriteLine ( watch.Elapsed.ToString ( ) ) ; watch.Restart ( ) ; for ( int i = 0 ; i < 1000000 ; i++ ) { var r2 = IsNull ( b ) ; } Console.WriteLine ( watch.Elapsed.ToString ( ) ) ; watch.Restart ( ) ; for ( int i = 0 ; i < 1000000 ; i++ ) { var r3 = IsNull ( c ) ; } watch.Stop ( ) ; Console.WriteLine ( watch.Elapsed.ToString ( ) ) ; Console.ReadKey ( ) ; static bool IsNull < T > ( T ? instance ) where T : struct { return instance == null ; }
"class Options { // Remainder omitted ( verb1 , verb2 , verb3 ) [ HelpVerbOption ] public string GetUsage ( string verb ) { return HelpText.AutoBuild ( this , verb ) ; } }"
void Main ( ) { void Main ( ) { Console.WriteLine ( `` Hello ! `` ) ; } Main ( ) ; } void Main ( ) { void Main ( ) { void MainL ( ) { Console.WriteLine ( `` Hello ! `` ) ; } MainL ( ) ; } Main ( ) ; } IL_0000 : call UserQuery. < Main > g__Main0_0IL_0005 : ret < Main > g__Main0_0 : IL_0000 : call UserQuery. < Main > g__Main0_1IL_0005 : ret < Main > g__Main0_1 : IL_0000 : ldstr `` Hello ! `` IL_0005 : call System.Console.WriteLineIL_000A : ret
"string url = `` http : //www.example.com/feed.xml '' ; var settings = new XmlReaderSettings ( ) ; settings.IgnoreComments = true ; settings.IgnoreProcessingInstructions = true ; settings.IgnoreWhitespace = true ; settings.XmlResolver = null ; settings.DtdProcessing = DtdProcessing.Parse ; settings.CheckCharacters = false ; var request = ( HttpWebRequest ) WebRequest.Create ( url ) ; request.Timeout = 900000 ; request.KeepAlive = true ; request.IfModifiedSince = lastModified ; var response = ( HttpWebResponse ) request.GetResponse ( ) ; Stream stream ; stream = response.GetResponseStream ( ) ; stream.ReadTimeout = 600000 ; var xmlReader = XmlReader.Create ( stream , settings ) ; while ( ! xmlReader.EOF ) { ..."
"[ StructLayout ( LayoutKind.Sequential ) ] internal struct STRUCT1 { public Guid guid ; public String str1 ; public String str2 ; } [ StructLayout ( LayoutKind.Sequential ) ] internal struct STRUCT2 { public Guid guid ; public String str1 ; public String str2 ; public Int32 i1 ; } [ StructLayout ( LayoutKind.Explicit ) ] internal struct MASTER_STRUCT_UNION { [ FieldOffset ( 0 ) ] public STRUCT1 Struct1 ; [ FieldOffset ( 0 ) ] public STRUCT2 Struct2 ; } [ StructLayout ( LayoutKind.Sequential ) ] internal struct MASTER_STRUCT { public MASTER_STRUCT_UNION Union ; } class Class1 { public static void Test ( ) { MASTER_STRUCT ms = new MASTER_STRUCT ( ) ; bool match ; ms.Union.Struct1.guid = new Guid ( 0xffeeddcc , 0xbbaa , 0x9988 , 0x77 , 0x66 , 0x55 , 0x44 , 0x33 , 0x22 , 0x11 , 0 ) ; Console.WriteLine ( `` Struct1.guid : \t\t { 0 } \n '' , ms.Union.Struct1.guid.ToString ( ) ) ; Console.WriteLine ( `` Struct2.integer : \t { 0 : x } '' , ms.Union.Struct2.i1 ) ; Console.WriteLine ( `` Struct2.guid : \t\t { 0 } '' , ms.Union.Struct2.guid.ToString ( ) ) ; match = ms.Union.Struct1.guid == ms.Union.Struct2.guid ? true : false ; } }"
"CancellationTokenSource cts ; void Start ( ) { cts = new CancellationTokenSource ( ) ; // run async operation var task = Task.Run ( ( ) = > SomeWork ( cts.Token ) , cts.Token ) ; // wait for completion // after the completion handle the result/ cancellation/ errors } async Task < int > SomeWork ( CancellationToken cancellationToken ) { int result = 0 ; bool loopAgain = true ; while ( loopAgain ) { // do something ... means a substantial work or a micro batch here - not processing a single byte loopAgain = /* check for loop end & & */ cancellationToken.IsCancellationRequested ; if ( loopAgain ) { // reschedule the task to the threadpool and free this thread for other waiting tasks await Task.Yield ( ) ; } } cancellationToken.ThrowIfCancellationRequested ( ) ; return result ; } void Cancel ( ) { // request cancelation cts.Cancel ( ) ; }"
"double d = 2.125 ; Console.WriteLine ( Math.Round ( d , 2 , MidpointRounding.AwayFromZero ) ) ;"
namespace A { class Program { static void Main ( ) { Test test = new Test ( 1 ) ; } } class Test { Test ( int i ) { } } } namespace A { class Program { static void Main ( ) { Test test = new Test ( ) ; } } class Test { Test ( int i ) { } } }
"[ HttpPost ] [ Route ( `` api/upload/ { databaseId } / { searchingEnabled } / { trackingEnabled } '' ) ] public async Task < IHttpActionResult > Upload ( string databaseId , string searchingEnabled , string trackingEnabled , [ FromBody ] string metadata ) { if ( ! Request.Content.IsMimeMultipartContent ( ) ) { return BadRequest ( `` No image is uploaded . `` ) ; } else { var provider = new MultipartMemoryStreamProvider ( ) ; await Request.Content.ReadAsMultipartAsync ( provider ) ; foreach ( var file in provider.Contents ) { // Process each image uploaded } } } The request entity 's media type 'multipart/form-data ' is not supported for this resource ."
"< TextBox Behaviors : UIElementBehaviors.ObserveFocus= '' True '' > < TextBox.Style > < Style TargetType= '' TextBox '' > < Style.Triggers > < Trigger Property= '' Behaviors : UIElementBehaviors.HadFocus '' Value= '' True '' > < Setter Property= '' Background '' Value= '' Pink '' / > < /Trigger > < /Style.Triggers > < /Style > < /TextBox.Style > public class UIElementBehaviors { public static readonly DependencyProperty ObserveFocusProperty = DependencyProperty.RegisterAttached ( `` ObserveFocus '' , typeof ( bool ) , typeof ( UIElementBehaviors ) , new UIPropertyMetadata ( false , OnObserveFocusChanged ) ) ; public static bool GetObserveFocus ( DependencyObject obj ) { return ( bool ) obj.GetValue ( ObserveFocusProperty ) ; } public static void SetObserveFocus ( DependencyObject obj , bool value ) { obj.SetValue ( ObserveFocusProperty , value ) ; } private static void OnObserveFocusChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { var element = d as UIElement ; if ( element == null ) return ; element.LostFocus += OnElementLostFocus ; } static void OnElementLostFocus ( object sender , RoutedEventArgs e ) { var element = sender as UIElement ; if ( element == null ) return ; SetHadFocus ( sender as DependencyObject , true ) ; element.LostFocus -= OnElementLostFocus ; } private static readonly DependencyPropertyKey HadFocusPropertyKey = DependencyProperty.RegisterAttachedReadOnly ( `` HadFocusKey '' , typeof ( bool ) , typeof ( UIElementBehaviors ) , new FrameworkPropertyMetadata ( false ) ) ; public static readonly DependencyProperty HadFocusProperty = HadFocusPropertyKey.DependencyProperty ; public static bool GetHadFocus ( DependencyObject obj ) { return ( bool ) obj.GetValue ( HadFocusProperty ) ; } private static void SetHadFocus ( DependencyObject obj , bool value ) { obj.SetValue ( HadFocusPropertyKey , value ) ; } }"
"// Edit : This line is `` dangerous and foolish '' : - ) // ( However , commenting it does not change the result ) // [ StructLayout ( LayoutKind.Sequential , Pack = 1 ) ] public class MyClass { public bool isit ; public MyClass nextRight ; public MyClass nextDown ; } class Program { static void Main ( string [ ] args ) { var a1 = new MyClass ( ) ; //to prevent JIT code mangling the result ( Skeet ) var before = GC.GetTotalMemory ( true ) ; MyClass [ ] arr = new MyClass [ 10000 ] ; for ( int i = 0 ; i < 10000 ; i++ ) arr [ i ] = new MyClass ( ) ; var after = GC.GetTotalMemory ( true ) ; var per = ( after - before ) / 10000.0 ; Console.WriteLine ( `` Before : { 0 } After : { 1 } Per : { 2 } '' , before , after , per ) ; Console.ReadLine ( ) ; } }"
"var query = ( from item in _entityRepository.DbSet ( ) where MyCondition orderby Entity.EntityID descending select new DTOModel { Id = Entity.EntityID , ... , //My problem is here , when I trying to call a function into linq query : //Size = Entity.IsPersian ? ( Entity.EntitySize.ConvertNumbersToPersian ( ) ) : ( Entity.EntitySize ) //Solution ( 1 ) : //Size = ConvertMethod1 ( Entity ) //Solution ( 2 ) : //Size = ConvertMethod2 ( Entity ) } ) ; //Corresponding to solution ( 1 ) : Func < Entity , string > ConvertMethod1 = p = > ( p.IsPersian ? p.EntitySize.ConvertNumbersToPersian ( ) : p.EntitySize ) ; //Corresponding to solution ( 2 ) : Expression < Func < Entity , string > > ConvertMethod2 = ( p ) = > ( p.IsPersian ? p.EntitySize.ConvertNumbersToPersian ( ) : p.EntitySize ) ;"
void DoWork < T > ( T a ) { } void DoWork ( int a ) { } int a = 1 ; DoWork ( a ) ;
"protected override void OnModelCreating ( ModelBuilder builder ) { base.OnModelCreating ( builder ) ; builder.Entity < Models.User > ( entity = > { entity.HasIndex ( a = > new { a.NormalizedUserName , a.TenantId } ) .HasName ( `` UserNameIndex '' ) .IsUnique ( ) ; } ) ; }"
"public class ClassABase { public string Name { get ; set ; } } public class ClassA : ClassABase { public string Description { get ; set ; } } public class ClassBBase { public string Title { get ; set ; } } public class ClassB : ClassBBase { public string Text { get ; set ; } } public class ContainerA { public IList < ClassA > ClassAList { get ; set ; } public ClassA ClassA { get ; set ; } } public class ContainerB { public IList < ClassB > ClassBList { get ; set ; } public ClassB ClassB { get ; set ; } } public class ClassABaseToClassBBase : Profile { protected override void Configure ( ) { CreateMap < ClassABase , ClassBBase > ( ) .Include < ClassA , ClassB > ( ) .ForMember ( dest = > dest.Title , opt = > opt.MapFrom ( src = > src.Name ) ) ; Mapper.AssertConfigurationIsValid ( ) ; } } public class ClassAToClassB : Profile { protected override void Configure ( ) { CreateMap < ClassA , ClassB > ( ) .ForMember ( dest = > dest.Text , opt = > opt.MapFrom ( src = > src.Description ) ) ; Mapper.AssertConfigurationIsValid ( ) ; } } public class ContainerAToContainerB : Profile { protected override void Configure ( ) { CreateMap < ContainerA , ContainerB > ( ) .ForMember ( dest = > dest.ClassBList , opt = > opt.MapFrom ( src = > Mapper.Map < IList < ClassA > , IList < ClassB > > ( src.ClassAList ) ) ) .ForMember ( dest = > dest.ClassB , opt = > opt.MapFrom ( src = > src.ClassA ) ) ; } } Mapper.Initialize ( x = > { x.AddProfile < ClassABaseToClassBBase > ( ) ; x.AddProfile < ClassAToClassB > ( ) ; x.AddProfile < ContainerAToContainerB > ( ) ; } ) ; public class ClassBBaseToClassB : Profile { protected override void Configure ( ) { CreateMap < ClassBBase , ClassB > ( ) .ForMember ( dest = > dest.Text , opt = > opt.Ignore ( ) ) ; Mapper.AssertConfigurationIsValid ( ) ; } } Mapper.Initialize ( x = > { x.AddProfile < ClassABaseToClassBBase > ( ) ; x.AddProfile < ClassAToClassB > ( ) ; x.AddProfile < ClassBBaseToClassB > ( ) ; x.AddProfile < ContainerAToContainerB > ( ) ; } ) ;"
"services.AddMassTransit ( x = > { x.AddConsumer < MailConsumer > ( ) ; x.AddConsumer < MailFailedConsumer > ( ) ; x.AddBus ( provider = > ConfigureBus ( provider , rabbitMqConfigurations ) ) ; } ) ; private IBusControl ConfigureBus ( IServiceProvider provider , RabbitMqConfigSection rabbitMqConfigurations ) = > Bus.Factory.CreateUsingRabbitMq ( cfg = > { var host = cfg.Host ( rabbitMqConfigurations.Host , `` / '' , hst = > { hst.Username ( rabbitMqConfigurations.Username ) ; hst.Password ( rabbitMqConfigurations.Password ) ; } ) ; cfg.ReceiveEndpoint ( host , $ '' { typeof ( MailSent ) .Namespace } . { typeof ( MailSent ) .Name } '' , endpoint = > { endpoint.Consumer < MailConsumer > ( provider ) ; } ) ; cfg.ReceiveEndpoint ( host , $ '' { typeof ( MailSentFailed ) .Namespace } . { typeof ( MailSentFailed ) .Name } '' , endpoint = > { endpoint.Consumer < MailFailedConsumer > ( provider ) ; } ) ; } ) ;"
//C # 6.0 wayvar g1 = parent ? .child ? .child ? .child ; if ( g1 ! = null ) // TODO//C # 5.0 wayvar g1 = parent.elvisExtension ( ) .child.elvisExtension ( ) .child.elvisExtension ( ) .child ; if ( g1 ! = null ) // TODO
"Skype skype = new SKYPE4COMLib.Skype ( ) ; if ( ! skype.Client.IsRunning ) { skype.Client.Start ( true , true ) ; } skype.Attach ( skype.Protocol , true ) ; Call call = skype.PlaceCall ( `` +17606604690 '' ) ;"
"var projection = from e in context.entities select new QuestionnaireVersionExtended { Id = e.Id , Version = e.Version , CreationDate = e.CreationDate , ... many more properties ... NumberOfItems = ( e.Children.Count ( ) ) } ; var projection = from e in context.entities select new QuestionnaireVersionExtended { e , NumberOfItems = ( e.Children.Count ( ) ) } ;"
var result = new List < int > ( ) ; var tasks = new List < Task < int > > ( ) ; foreach ( var row in rowlist ) tasks.Add ( Task.Factory.StartNew ( ( ) = > DoWork ( row ) ) ) ; foreach ( var task in tasks ) result.Add ( task.Result ) ;
string value = “ 0.01 ” ; float convertedValue = float.Parse ( value ) ; return ( int ) ( convertedValue * 100.0f ) ; string value = “ 0.01 ” ; float convertedValue = float.Parse ( value ) * 100.0f ; return ( int ) ( convertedValue ) ;
"void Ring0.WriteIOPort ( uint port , byte value ) ; byte Ring0.ReadIOPort ( uint port ) ;"
"public class MyInterceptor : IInterceptor { public void Intercept ( IInvocation invocation ) { Console.WriteLine ( `` Pre Execute : `` + invocation.Request.Method.Name ) ; foreach ( var param in invocation.Request.Arguments ) { Console.WriteLine ( `` param : `` + param ) ; } invocation.Proceed ( ) ; Console.WriteLine ( `` Post Execute : `` + invocation.Request.Method.Name ) ; Console.WriteLine ( `` Returned : `` + invocation.ReturnValue ) ; } } using Ninject ; using Ninject.Extensions.Interception.Infrastructure.Language ; using Ninject.Extensions.Interception ; static void Main ( string [ ] args ) { MyClass o = null ; using ( IKernel kernel = new StandardKernel ( ) ) { kernel.Bind < MyClass > ( ) .ToSelf ( ) .Intercept ( ) .With ( new MyInterceptor ( ) ) ; o = kernel.Get < MyClass > ( ) ; } o.Echo ( `` Hello World ! `` ) ; // Error o.Double ( 5 ) ; } Error loading Ninject component IProxyRequestFactoryNo such component has been registered in the kernel 's component container.Suggestions : 1 ) If you have created a custom subclass for KernelBase , ensure that you have properly implemented the AddComponents ( ) method . 2 ) Ensure that you have not removed the component from the container via a call to RemoveAll ( ) . 3 ) Ensure you have not accidentally created more than one kernel.."
"protected onClick ( e : JQueryEventObject , row : number , cell : number ) : void { super.onClick ( e , row , cell ) ; let item = this.itemAt ( row ) ; if ( $ ( e.target ) .hasClass ( 'usuario-row ' ) ) { window.location.href = '/Cadastros/EmpresasUsuarios ? empresaId= ' + item.EmpresaId ; } }"
"Func < string , byte [ ] > getFileContents = ( Mode ! = null & & Mode.ToUpper ( ) == `` TEXT '' ) ? TextFileContents : BinaryFileContents ; private static byte [ ] BinaryFileContents ( string file ) { return System.IO.File.ReadAllBytes ( file ) ; } private static byte [ ] TextFileContents ( string file ) { using ( var sourceStream = new StreamReader ( file ) ) { return Encoding.UTF8.GetBytes ( sourceStream.ReadToEnd ( ) ) ; } } Func < string , byte [ ] > getFileContents2 ; if ( Mode ! = null & & Mode.ToUpper ( ) == `` TEXT '' ) { getFileContents2 = TextFileContents ; } else { getFileContents2 = BinaryFileContents ; }"
< controls : DropShadowPanel BlurRadius= '' 5 '' ShadowOpacity= '' 0.5 '' OffsetX= '' 0 '' OffsetY= '' 0 '' Color= '' Black '' > < Grid BorderBrush= '' White '' BorderThickness= '' 5 '' / > < /controls : DropShadowPanel >
"{ `` FirstName '' : `` Rahul '' , `` LastName '' : `` B '' , `` EmpType '' : { `` RID '' : 2 , `` Title '' : `` Full Time '' } , `` CTC '' : `` 3.5 '' , `` Exp '' : `` 1 '' , `` ComplexObj '' : { `` RID '' : 3 , `` Title '' : { `` Test '' : `` RID '' , `` TWO '' : { `` Test '' : 12 } } } } { `` FirstName '' : `` Rahul '' , `` LastName '' : `` B '' , `` EmpType__RID '' : 2 , `` EmpType__Title '' : `` Full Time '' , `` CTC '' : `` 3.5 '' , `` Exp '' : `` 1 '' , `` ComplexObj__RID '' : 3 , `` ComplexObj__Title__Test '' : `` RID '' , `` ComplexObj__Title__TWO__Test '' : 12 } public static void ConvertNestedJsonToSimpleJson ( JObject jobject , ref JObject jobjectRef , string currentNodeName = `` '' , string rootPath = `` '' ) { string propName = `` '' ; if ( currentNodeName.Equals ( rootPath ) ) { propName = currentNodeName ; } else { propName = ( rootPath == `` '' & & currentNodeName == `` '' ) ? rootPath + `` '' + currentNodeName : rootPath + `` __ '' + currentNodeName ; } foreach ( JProperty jprop in jobject.Properties ( ) ) { if ( jprop.Children < JObject > ( ) .Count ( ) == 0 ) { jobjectRef.Add ( propName == `` '' ? jprop.Name : propName + `` __ '' + jprop.Name , jprop.Value ) ; } else { currentNodeName = jprop.Name ; rootPath = rootPath == `` '' ? jprop.Name : rootPath ; ConvertNestedJsonToSimpleJson ( JObject.Parse ( jprop.Value.ToString ( ) ) , ref jobjectRef , currentNodeName , rootPath ) ; } } } { `` FirstName '' : `` Rahul '' , `` LastName '' : `` B '' , `` EmpType__RID '' : 2 , `` EmpType__Title '' : `` Full Time '' , `` CTC '' : `` 3.5 '' , `` Exp '' : `` 1 '' , `` EmpType__ComplexObj__RID '' : 3 , `` EmpType__Title__Test '' : `` RID '' , `` EmpType__two__Test '' : 12 }"
private void SomeMethod ( ) { return ; } private void SomeMethod ( ) = > return ; private void SomeMethod ( ) = > ;
"@ ViewData.ModelState public class ModelStateTagHelper : TagHelper { public ViewDataDictionary ViewData { get ; set ; } public ModelStateDictionary ModelState { get ; set ; } public override void Process ( TagHelperContext context , TagHelperOutput output ) { } }"
"< Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' { x : Type controls : WaterMarkTextBox } '' > < ControlTemplate.Resources > < Storyboard x : Key= '' Storyboard1 '' > < ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( FrameworkElement.Margin ) '' Storyboard.TargetName= '' PART_FieldTextBlock '' > < SplineThicknessKeyFrame KeyTime= '' 0:0:0.15 '' Value= '' 0,0,10,0 '' / > < /ThicknessAnimationUsingKeyFrames > < /Storyboard > < Storyboard x : Key= '' Storyboard2 '' > < ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( FrameworkElement.Margin ) '' Storyboard.TargetName= '' PART_FieldTextBlock '' > < SplineThicknessKeyFrame KeyTime= '' 0:0:0.25 '' Value= '' 0,0 , -500,0 '' / > < /ThicknessAnimationUsingKeyFrames > < /Storyboard > < /ControlTemplate.Resources > < Grid x : Name= '' PART_GridControl '' ClipToBounds= '' True '' Height= '' { TemplateBinding Height } '' Width= '' { TemplateBinding Width } '' > < TextBlock x : Name= '' PART_PlaceHolderTextBlock '' Style= '' { StaticResource SWMLightTextBlockStyle } '' Foreground= '' # BDBBBB '' FontSize= '' { StaticResource SmallFontSize } '' Text= '' { TemplateBinding PlaceHolderText } '' VerticalAlignment= '' Center '' Margin= '' 20,0,10,0 '' / > < Border Name= '' border '' CornerRadius= '' 0 '' Padding= '' 2 '' BorderThickness= '' 1 '' BorderBrush= '' DeepSkyBlue '' > < ScrollViewer x : Name= '' PART_ContentHost '' / > < /Border > < TextBlock x : Name= '' PART_FieldTextBlock '' HorizontalAlignment= '' Right '' Foreground= '' # BDBBBB '' Margin= '' 0,0 , -500,0 '' Style= '' { StaticResource SWMLightTextBlockStyle } '' FontSize= '' { StaticResource SmallFontSize } '' TextWrapping= '' Wrap '' Text= '' { TemplateBinding FieldText } '' VerticalAlignment= '' Center '' / > < /Grid > < /ControlTemplate > < /Setter.Value > < /Setter >"
"class A : Base { public string CommonField ; public int IntField ; } class B : Base { public string CommonField ; public double DoubleField ; } { `` $ type '' : `` MyApp.A , MyApp '' , `` CommonField '' : `` SomeValue '' , `` IntField '' : 123 , `` SomeBaseField '' : 321 } Newtonsoft.Json.JsonSerializationException : Type specified in JSON 'MyApp.A , MyApp , Version=0.0.1.1 , Culture=neutral , PublicKeyToken=null ' is not compatible with 'MyApp.B , MyApp , Version=0.0.1.1 , Culture=neutral , PublicKeyToken=null ' . Path ' $ type ' , line 2 , position 42. at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ResolveTypeName ( JsonReader reader , Type & objectType , JsonContract & contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , String qualifiedTypeName ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadMetadataProperties ( JsonReader reader , Type & objectType , JsonContract & contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue , Object & newValue , String & id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize ( JsonReader reader , Type objectType , Boolean checkAdditionalContent ) public class JsonABBinder : DefaultSerializationBinder { public override Type BindToType ( string assemblyName , string typeName ) { if ( typeName == `` MyApp.A '' ) return typeof ( B ) ; return base.BindToType ( assemblyName , typeName ) ; } }"
"using System ; using System.Reflection ; public class Program { public static void Main ( ) { var exampleInstance = new Example ( ) ; var exampleType = typeof ( Example ) ; var fooProperty = exampleType.GetProperty ( `` Foo '' ) ; // this works fine - the `` GetSetMethod '' method returns null , however // fails with the following : // [ System.MethodAccessException : Attempt by method 'Program.Main ( ) ' to access method 'Example.set_Foo ( Int32 ) ' failed . ] //fooProperty.SetValue ( exampleInstance , 24 ) ; // same error here : //Run-time exception ( line 14 ) : Attempt by method 'Program.Main ( ) ' to access method 'Example.set_Foo ( Int32 ) ' failed . //exampleType.InvokeMember ( fooProperty.Name , BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.SetProperty | BindingFlags.Instance , null , exampleInstance , new object [ ] { 24 } ) ; } } public class Example { public int Foo { get ; private set ; } }"
modelBuilder.Entity < Entity1 > ( ) .HasKey ( t = > t.Id ) ; modelBuilder.Entity < Entity2 > ( ) .HasKey ( t = > t.Id ) ; modelBuilder.Entity < Entity3 > ( ) .HasKey ( t = > t.Id ) ; ... var derivedEntities = Assembly.GetExecutingAssembly ( ) .GetTypes ( ) . Where ( t = > t.Namespace == `` My.Entities '' & & t.IsAssignableFrom ( typeof ( BaseClass ) ) ) ; foreach ( var entity in derivedEntities ) { modelBuilder.Entity < entity > ( ) .HasKey ( t = > t.Id ) ; }
"WriteableBitmap bitmap = new WriteableBitmap ( width , height ) ; //write bitmap pixelsImage image = new Image ( ) { Stretch = Stretch.None } ; image.Source = bitmap ; image.Width = bitmap.PixelWidth ; image.Height = bitmap.PixelHeight ; //PrintPrintDocument printDocument = new PrintDocument ( ) ; printDocument.PrintPage += ( sender , args ) = > { args.PageVisual = image ; } ; printDocument.Print ( `` QrCode '' ) ;"
< MultiBinding Converter= '' { StaticResource _codeMultiConverter } '' ConverterParameter= '' ZSLOOPAKT '' > < Binding Path= '' ActivityCode '' / > < Binding Source= '' { x : Static lex : LocalizeDictionary.Instance } '' Path= '' Culture '' / > < Binding Source= '' { x : Static RIEnums : CodeTypeInfo+CodeDisplayMode.Both } '' / > < /MultiBinding >
public static void Main ( ) { Test t1 = new Test ( ) ; }
"public async Task < ActionResult > Speak ( string text ) { Task < FileContentResult > task = Task.Run ( ( ) = > { using ( var synth = new System.Speech.Synthesis.SpeechSynthesizer ( ) ) using ( var stream = new MemoryStream ( ) ) { synth.SetOutputToWaveStream ( stream ) ; synth.Speak ( text ) ; var bytes = stream.GetBuffer ( ) ; return File ( bytes , `` audio/x-wav '' ) ; } } ) ; return await task ; } static void Main ( string [ ] args ) { var synth = new System.Speech.Synthesis.SpeechSynthesizer ( ) ; synth.Speak ( `` hello '' ) ; } < div > < input type= '' text '' id= '' txt '' autofocus / > < button type= '' button '' id= '' btn '' > Speak < /button > < /div > < script > document.getElementById ( 'btn ' ) .addEventListener ( 'click ' , function ( ) { var text = document.getElementById ( 'txt ' ) .value ; var url = window.location.href + '/speak ? text= ' + encodeURIComponent ( text ) ; var audio = document.createElement ( 'audio ' ) ; var canPlayWavFileInAudioElement = audio.canPlayType ( 'audio/wav ' ) ; var bgSound = document.createElement ( 'bgsound ' ) ; bgSound.src = url ; var canPlayBgSoundElement = bgSound.getAttribute ( 'src ' ) ; if ( canPlayWavFileInAudioElement ) { // probably Firefox and Chrome audio.setAttribute ( 'src ' , url ) ; audio.setAttribute ( 'autoplay ' , `` ) ; document.getElementsByTagName ( 'body ' ) [ 0 ] .appendChild ( audio ) ; } else if ( canPlayBgSoundElement ) { // internet explorer document.getElementsByTagName ( 'body ' ) [ 0 ] .appendChild ( bgSound ) ; } else { alert ( 'This browser probably can\'t play a wav file ' ) ; } } ) ; < /script >"
"< Window x : Class= '' WpfApplication1.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : local= '' clr-namespace : WpfApplication1 '' mc : Ignorable= '' d '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' IsKeyboardFocusWithinChanged= '' Window_IsKeyboardFocusWithinChanged '' > < Grid Name= '' grid1 '' > < /Grid > < /Window > public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; host = new System.Windows.Forms.Integration.WindowsFormsHost ( ) ; var mtbDate = new System.Windows.Forms.MaskedTextBox ( `` 00/00/0000 '' ) ; host.Child = mtbDate ; host.IsKeyboardFocusWithinChanged += Host_IsKeyboardFocusWithinChanged ; grid1.Children.Add ( host ) ; } private void Host_IsKeyboardFocusWithinChanged ( object sender , DependencyPropertyChangedEventArgs e ) { Console.WriteLine ( host.IsKeyboardFocusWithin.ToString ( ) + '' blah '' ) ; } private System.Windows.Forms.Integration.WindowsFormsHost host ; private void Window_IsKeyboardFocusWithinChanged ( object sender , DependencyPropertyChangedEventArgs e ) { Console.WriteLine ( IsKeyboardFocusWithin.ToString ( ) ) ; } }"
"public class SensorType : EntityData { //PKs public string CompanyId { get ; set ; } public string ServiceId { get ; set ; } public string Type { get ; set ; } } modelBuilder.Entity < SensorType > ( ) .HasKey ( t = > new { t.CompanyId , t.ServiceId } ) ; //No autogeneration of PKsmodelBuilder.Entity < SensorType > ( ) .Property ( t = > t.ServiceId ) .HasDatabaseGeneratedOption ( System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None ) ; modelBuilder.Entity < SensorType > ( ) .Property ( t = > t.CompanyId ) .HasDatabaseGeneratedOption ( System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None ) ; CreateTable ( `` dbo.SensorTypes '' , c = > new { CompanyId = c.String ( nullable : false , maxLength : 128 ) , ServiceId = c.String ( nullable : false , maxLength : 128 ) , Type = c.String ( ) , Id = c.String ( annotations : new Dictionary < string , AnnotationValues > { { `` ServiceTableColumn '' , new AnnotationValues ( oldValue : null , newValue : `` Id '' ) ... } ) .PrimaryKey ( t = > new { t.CompanyId , t.ServiceId } ) .Index ( t = > t.CreatedAt , clustered : true ) ; }"
public async Task < ActionResult > Index ( ) { return View ( ) ; } public ActionResult Index ( ) { return View ( ) ; }
"var msWorkspace = MSBuildWorkspace.Create ( ) ; var solution = await msWorkspace.OpenSolutionAsync ( solutionPath ) ; foreach ( var project in solution.Projects ) { foreach ( var document in project.Documents ) { if ( document.SourceCodeKind ! = SourceCodeKind.Regular ) continue ; var doc = document ; foreach ( var rewriter in rewriters ) { doc = await rewriter.Rewrite ( doc ) ; } if ( doc ! = document ) { Console.WriteLine ( `` changed { 0 } '' , doc.Name ) ; //save result //the solution is now changed and the next document to be processed will belong to the old solution msWorkspace.TryApplyChanges ( doc.Project.Solution ) ; } } }"
"public class Country { public string CountryCode { get ; set ; } public string Name { get ; set ; } public string Flag { get ; set ; } } public class Market { public string CountryCode { get ; set ; } public virtual Country Country { get ; set ; } public int ProductID { get ; set ; } public virtual Product Product { get ; set ; } } public class Product { public int ProductID { get ; set ; } public string Name { get ; set ; } public virtual ICollection < Market > Markets { get ; set ; } } // GET api/product [ HttpGet ] public async Task < IActionResult > GetProduct ( [ FromRoute ] int id ) { return Ok ( await _context.Products .Include ( p = > p.Markets ) .SingleAsync ( m = > m.ProductID == id ) ) ; } public class ProductViewModel { public int ProductID { get ; set ; } public string Name { get ; set ; } public List < MarketViewModel > Markets { get ; set ; } } public class MarketViewModel { public int ProductID { get ; set ; } public Country Country { get ; set ; } } [ HttpGet ( `` { id } '' , Name = `` GetProduct '' ) ] public async Task < IActionResult > GetProduct ( [ FromRoute ] int id ) { Product product = await _context.Products .Include ( t = > t.Markets ) .SingleAsync ( m = > m.ProductID == id ) ; throw new System.Exception ( `` error sample '' ) ; return Ok ( product ) ; } `` dependencies '' : { `` Newtonsoft.Json '' : `` 8.0.1-beta3 '' , public void ConfigureServices ( IServiceCollection services ) { services.AddMvc ( ) .AddJsonOptions ( options = > { options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore ; } ) ;"
< BuildSchema Inputs= '' @ ( ServerMetadataFiles ) '' ServerGeneratedMetadataFiles= '' @ ( ServerGeneratedMetadataFiles ) '' Collation= '' $ ( DatabaseCollation ) '' DatabaseProject= '' @ ( _DatabaseProject ) '' ProjectPath= '' $ ( MSBuildProjectFullPath ) '' OutputDirectory= '' Bin\Data '' SqlExpressInstanceName= '' $ ( SqlExpressInstanceName ) '' ExternalDataSources= '' @ ( ServerExternalDataSources ) '' Condition= '' ' $ ( SkipBuildSchema ) ' == `` '' / >
"1 ( ? < outer > \ ( ) ? 2 ( ? < scheme > http ( ? < secure > s ) ? : // ) ? 3 ( ? < url > 4 ( ? ( scheme ) 5 ( ? : www\ . ) ? 6 |7 www\.8 ) 9 [ a-z0-9 ] 10 ( ? ( outer ) 11 [ -a-z0-9/+ & @ # / % ? =~_ ( ) | ! : , . ; čšžćđ ] + ( ? =\ ) ) 12 |13 [ -a-z0-9/+ & @ # / % ? =~_ ( ) | ! : , . ; čšžćđ ] +14 ) 15 ) 16 ( ? < ending > ( ? ( outer ) \ ) ) ) value = Regex.Replace ( value , @ '' ( ? < outer > \ ( ) ? ( ? < scheme > http ( ? < secure > s ) ? : // ) ? ( ? < url > ( ? ( scheme ) ( ? : www\. ) ? |www\. ) [ a-z0-9 ] ( ? ( outer ) [ -a-z0-9/+ & @ # / % ? =~_ ( ) | ! : ,. ; čšžćđ ] + ( ? =\ ) ) | [ -a-z0-9/+ & @ # / % ? =~_ ( ) | ! : ,. ; čšžćđ ] + ) ) ( ? < ending > ( ? ( outer ) \ ) ) ) '' , `` $ { outer } < a href=\ '' http $ { secure } : // $ { url } \ '' > http $ { secure } : // $ { url } < /a > $ { ending } '' , RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase ) ; `` $ { outer } < a href=\ '' http $ { secure } : // $ { url } \ '' > http $ { secure } : // $ { url } < /a > $ { ending } ''"
[ Authorize ( Roles = `` Admin '' ) ] public class SecretsController : Controller { [ Authorize ] public ActionResult Index ( ) { return View ( ... ) ; } ... }
"catch ( CommunicationException ex ) { if ( Regex.IsMatch ( ex.Message , `` The maximum message size quota for incoming messages . * has been exceeded '' ) ) { // handle thrown exception } throw ; }"
"public Thread ( ParameterizedThreadStart start ) ; public Thread ( ThreadStart start ) ; public Thread ( ParameterizedThreadStart start , int maxStackSize ) ; public Thread ( ThreadStart start , int maxStackSize ) ; Thread thread = new Thread ( new ThreadStart ( ScanDirectory ) ) ; Thread thread = new Thread ( ScanDirectory ) ;"
"public static class CallStackTracker { public static void Print ( ) { var st = new StackTrace ( ) ; for ( int i = 0 ; i < st.FrameCount ; i++ ) { var frame = st.GetFrame ( i ) ; var mb = frame.GetMethod ( ) ; var parameters = mb.GetParameters ( ) ; foreach ( var p in parameters ) { // Stuff probably goes here , but is there another way ? } } } }"
"var myCollection = database.GetCollection < MyObject > ( typeof ( MyObject ) .Name ) ; myCollection.Update ( Query.EQ ( `` _id '' , myId ) , Update.Set ( `` Message '' , `` My message text '' ) ) ; // And now the same call with `` Wrapped '' methodmyCollection.Update ( Query.EQ ( `` _id '' , myId ) , Update.SetWrapped ( `` Message '' , `` My message text '' ) ) ;"
"[ ServiceContract ] public interface IStreamedService { [ OperationContract ] [ WebInvoke ] Stream PullMessage ( Stream incomingStream ) ; } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.PerCall , UseSynchronizationContext = false ) ] public class MyService : IStreamedService { public System.IO.Stream PullMessage ( System.IO.Stream incomingStream ) { // using ( incomingStream ) { // Read data from stream // } Stream outgoingStream = // assigned by omitted code ; return outgoingStream ; } < webHttpBinding > < binding name= '' WebHttpBindingConfiguration '' transferMode= '' Streamed '' maxReceivedMessageSize= '' 1048576 '' receiveTimeout= '' 00:10:00 '' sendTimeout= '' 00:10:00 '' closeTimeout= '' 00:10:00 '' / > < /webHttpBinding >"
"public Task DoSomethingAsync ( CancellationToken cancellationToken ) { return Task.Run ( ( ) = > { while ( true ) { if ( cancellationToken.IsCancellationRequested ) break ; //do some work } } , cancellationToken ) ; }"
public class A < T > : B < T > where T : C { } public class A : B < C > { }
"destAddress = IPAddress.Parse ( `` 192.168.0.198 '' ) , destPort = 80 ; // Create a raw socket to send this packet rawSocket = new Socket ( AddressFamily.InterNetwork , SocketType.Raw , ProtocolType.IP ) ; // Bind the socket to the interface specified IPEndPoint iep = new IPEndPoint ( IPAddress.Parse ( `` 192.168.0.140 '' ) ,0 ) ; rawSocket.Bind ( iep ) ; // Set the HeaderIncluded option since we include the IP header rawSocket.SetSocketOption ( socketLevel , SocketOptionName.HeaderIncluded , 1 ) ; // Send the packet ! int rc = rawSocket.SendTo ( builtPacket , new IPEndPoint ( destAddress , destPort ) ) ; Console.WriteLine ( `` sent { 0 } bytes to { 1 } '' , rc , destAddress.ToString ( ) ) ; sent 40 bytes to 192.168.0.198"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Linq ; using System.Text ; using System.Windows.Forms ; using System.IO ; namespace SpaceInvaders { public partial class Form1 : Form { public int spriteX = 226 ; public int spriteY = 383 ; bool bulletFire = false ; int fireTimer = 8 ; int laserFired ; public Form1 ( ) { InitializeComponent ( ) ; } private void exitToolStripMenuItem_Click ( object sender , EventArgs e ) { this.Close ( ) ; } public void laserFire ( ) { //on laser fire i wont the bulle to move up while bullet timer is enabled //moving up slowly with set intervals while ( bulletTimer.Enabled == true ) { PictureBox laser = new PictureBox ( ) ; laser.BackColor = Color.Chartreuse ; laser.Width = 5 ; laser.Height = 30 ; laserFired = spriteY ; laserFired = laserFired - 10 ; this.Controls.Add ( laser ) ; laser.Location = new Point ( spriteX , laserFired ) ; } } private void Form1_KeyDown ( object sender , KeyEventArgs e ) { //Fire bullet if ( e.KeyCode == Keys.Up ) { bulletFire = true ; if ( bulletFire == true ) { laserFire ( ) ; bulletTimer.Enabled = true ; } } //Controls Right movement if ( spriteX < 448 ) { if ( e.KeyCode == Keys.Right ) { spriteX = spriteX + 20 ; } } //Controls Left Movement if ( spriteX > 0 ) { if ( e.KeyCode == Keys.Left ) { spriteX = spriteX - 20 ; } } //Points sprite to new location pctSprite.Location = new Point ( spriteX , spriteY ) ; } private void bulletTimer_Tick ( object sender , EventArgs e ) { if ( fireTimer == 0 ) { bulletTimer.Enabled = false ; } else { fireTimer = fireTimer - 1 ; } } } }"
using System ; using System.Diagnostics ; using System.Runtime.CompilerServices ; namespace OptimizerTest { public class Test { int dummy ; public void TestFunction ( int stepWidth ) // stepWidth must be a parameter { for ( int step = 0 ; step < stepWidth ; step++ ) { dummy = step + 1000 ; // addition with constant ( same value as later ! ) for ( int x = 0 ; x < 20 ; x += stepWidth ) { int index = x + 1000 + step ; // constant must be same as above and ? ! ? ! // int index = x + step + 1000 ; works ! ! ! ! ! Console.Write ( `` \n\r '' + index ) ; } } } [ MethodImpl ( MethodImplOptions.NoOptimization ) ] public void TestFunctionNoOptimization ( int stepWidth ) { for ( int step = 0 ; step < stepWidth ; step++ ) { dummy = step + 1000 ; for ( int x = 0 ; x < 20 ; x += stepWidth ) { int index = x + 1000 + step ; Console.Write ( `` \n\r '' + index ) ; } } } } class Program { /// < summary > /// Result differs from Start with F5 to Ctrl-F5 /// < /summary > /// < param name= '' args '' > < /param > static void Main ( string [ ] args ) { Test test = new Test ( ) ; Console.Write ( `` \n\r -- -- -- -- -\n\roptimized result\n\r -- -- -- -- -- -- - '' ) ; test.TestFunction ( 8 ) ; Console.Write ( `` \n\r -- -- -- -- -\n\rnot optimized result\n\r -- -- -- -- -- -- - '' ) ; test.TestFunctionNoOptimization ( 8 ) ; Console.Write ( `` \n\r -- -- -- -- -\n\rpress any key '' ) ; Console.ReadKey ( ) ; } } } int index = x + step + 1000 ; int index = x + 1000 + step ;
A.Completed += ( ) = > { B.Completed += ( ) = > { C.Completed += ( ) = > { // } C ( ) ; } B ( ) ; } A ( ) ;
bool b = selectedTables.Any ( table1.IsChildOf ) ) ; public bool IsChildOf ( Table otherTable ) bool b = selectedTables.Any ( a = > table1.IsChildOf ( a ) ) ;
SpecialFunction ( 5 ) ; // Aint x = 5 ; SpecialFunction ( x ) ; // Bint x = 5 ; x = condition ? 3 : 19 ; SpecialFunction ( x ) ; // C
[ HttpPost ( `` CreateShipment '' ) ] [ ValidateModel ] public IActionResult CreateShipment ( [ FromBody ] CreateShipmentRequest request ) { if ( ModelState.IsValid ) { //Do something } return Ok ( ) ; } services.Configure < ApiBehaviorOptions > ( options = > { options.SuppressModelStateInvalidFilter = true ; } ) ;
CurrencyVO currency ; try { if ( idConnection.HasValue & & idConnection ! = 0 ) { currencyConnection = client.GetConnection ( idConnection.Value ) ; model.Connection = currencyConnection ; } else { int providerUserKey = ( int ) Models.UserModel.GetUser ( ) .ProviderUserKey ; currencyConnection = client.GetConnection ( providerUserKey ) ; } currency = model.Currencies.SingleOrDefault ( c = > c.IdCountry == currencyConnection.idcountry ) ? ? new CurrencyVO ( ) ; } catch { currency = new CurrencyVO ( ) ; } finally { model.PublishedContainer.Currency = currency ; } } catch { currency = new CurrencyVO ( ) ; } model.PublishedContainer.Currency = currency ;
"URL : /ModelController/Method/itemID // Where itemID is the id ( int ) of the item in the databasePOST : objectOrArray : { JSON Object/Array } [ HttpPost ] public ActionResult InputResources ( int ? id , Object objectOrArray )"
public async Task < Entity > AddAsync ( Entity entity ) { var savedEntity = m_DataContext.Entities.Add ( entity ) ; await m_DataContext.SaveChangesAsync ( ) ; return await m_DataContext.Entities .Include ( p= > p.SubEntity ) .FirstAsync ( p= > p.Id==savedEntity.Id ) ; }
try { string foo = null ; int len = foo.Length ; } catch ( Exception ex ) { System.Diagnostics.Debug.WriteLine ( ex ) ; } Exception thrown : 'System.NullReferenceException ' in TestStackTraces.exeSystem.NullReferenceException : Object reference not set to an instance of an object.at TestStackTraces.App.OnLaunched ( LaunchActivatedEventArgs e )
MediaCapture mc ; protected override async void OnNavigatedTo ( NavigationEventArgs e ) { mc = new MediaCapture ( ) ; await mc.InitializeAsync ( ) ; preview.Source = mc ; await mc.StartPreviewAsync ( ) ; } protected override async void OnNavigatedFrom ( NavigationEventArgs e ) { await mc.StopPreviewAsync ( ) ; }
"public void OnCommandsRequested ( SettingsPane settingsPane , SettingsPaneCommandsRequestedEventArgs eventArgs ) { UICommandInvokedHandler handler = new UICommandInvokedHandler ( OnSettingsCommand ) ; SettingsCommand appSettings = new SettingsCommand ( `` appSettings '' , `` アプリ内設定 '' , handler ) ; eventArgs.Request.ApplicationCommands.Add ( appSettings ) ; }"
static void Foo < T > ( T t ) where T : Reptile { } static void Foo ( Animal animal ) { } static void Main ( ) { Foo ( new Giraffe ( ) ) ; } static void Foo < T > ( T t ) where T : Reptile { } static void Foo ( Reptile t ) { }
"public enum Movement { [ DisplayName ( `` Turned Right '' ) ] TurnedRight , [ DisplayName ( `` Turned Left '' ) ] [ Description ( `` Execute 90 degree turn to the left '' ) ] TurnedLeft , // ... } public static string GetDisplayName ( this Movement movement ) { ... } public static Movement GetNextTurn ( this Movement movement , ... ) { ... } public class Movement { public int Value { get ; set ; } // i.e . the type backing the enum public string DisplayName { get ; set ; } public string Description { get ; set ; } public Movement GetNextTurn ( ... ) { ... } // ... }"
"public class SomeItem { } public class SomeItemsBag : ConcurrentBag < SomeItem > { } public class SomeItemsList : List < SomeItem > { } public static class Program { private static ConcurrentDictionary < string , SomeItemsBag > _SomeItemsBag ; private static ConcurrentDictionary < string , SomeItemsList > _SomeItemsList ; private static void GetItem ( string key ) { var bag = _SomeItemsBag [ key ] ; var list= _SomeItemsList [ key ] ; ... } }"
"Expression < Action < T , StringBuilder > > expr1 = ( t , sb ) = > sb.Append ( t.Name ) ; Expression < Action < T , StringBuilder > > expr2 = ( t , sb ) = > sb.Append ( `` , `` ) ; Expression < Action < T , StringBuilder > > expr3 = ( t , sb ) = > sb.Append ( t.Description ) ; void Method ( T t , StringBuilder sb ) { sb.Append ( t.Name ) ; sb.Append ( `` , `` ) ; sb.Append ( t.Description ) ; }"
public int Foo ( ) { using ( .. ) { return bar ; } } public int Foo ( ) { var b = null ; using ( .. ) { b = bar ; } return b ; }
"public class Dummy1Controller : Controller { private MyProj.Data.Entities _entities = new Data.Entities ( ) ; private MyProj.Data.Entities2 _coreEntities = new Data.Entities2 ( ) ; //GET : /Customers/ public ActionResult Index ( ) { if ( _entities.table1.Count ( ) == 0 ) return View ( ) ; var pastObj = _entities.table1.First ( ) ; return View ( new Table1ViewModel ( ) { Id = pastObj.Id , FirstName = pastObj.FirstName , LastName = pastObj.LastName , . . . . } ) ; } } public class Dummy2Controller : Controller { private MyProj.Data.Entities _entities = new Data.Entities ( ) ; private MyProj.Data.Entities2 _coreEntities = new Data.Entities2 ( ) ; //GET : /Vehicles/ public ActionResult Index ( ) { if ( _entities.table2.Count ( ) == 0 ) return View ( ) ; var pastObj = _entities.table2.First ( ) ; return View ( new Table1ViewModel ( ) { RegNo = pastObj.RegNo , Make = pastObj.Make , Model = pastObj.Model , . . . . } ) ; } } public class Dummy3Controller : Controller { private MyProj.Data.Entities _entities = new Data.Entities ( ) ; private MyProj.Data.Entities2 _coreEntities = new Data.Entities2 ( ) ; //GET : /Invoices/ public ActionResult Index ( ) { if ( _entities.table3.Count ( ) == 0 ) return View ( ) ; var pastObj = _entities.table3.First ( ) ; return View ( new Table1ViewModel ( ) { InvNo = pastObj.InvNo , Amount = pastObj.Amount , Tax = pastObj.Tax , . . . . } ) ; } } @ model MyProject.Web.ViewModels.Table1ViewModel @ { ViewBag.Title = `` Index '' ; } < link href= '' @ Url.Content ( `` ~/Content/CSS/GenericDetailStyles.css '' ) '' rel= '' stylesheet '' type= '' text/css '' / > < section id= '' content '' > < div id= '' table '' > < div > < h2 > Customer < /h2 > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.Id ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.Id ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.FirstName ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.FirstName ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.LastName ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.LastName ) < /div > < /div > . . . . < /div > < /section > @ { Html.RenderAction ( `` Index '' , `` FooterPartial '' ) ; } -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- @ model MyProject.Web.ViewModels.Table2ViewModel @ { ViewBag.Title = `` Index '' ; } < link href= '' @ Url.Content ( `` ~/Content/CSS/GenericDetailStyles.css '' ) '' rel= '' stylesheet '' type= '' text/css '' / > < section id= '' content '' > < div id= '' table '' > < div > < h2 > Vehicle < /h2 > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.RegNo ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.RegNo ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.Make ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.Make ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.PatientID ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.Model ) < /div > < /div > . . . . < /div > < /section > @ { Html.RenderAction ( `` Index '' , `` FooterPartial '' ) ; } -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- @ model MyProject.Web.ViewModels.Table3ViewModel @ { ViewBag.Title = `` Index '' ; } < link href= '' @ Url.Content ( `` ~/Content/CSS/GenericDetailStyles.css '' ) '' rel= '' stylesheet '' type= '' text/css '' / > < section id= '' content '' > < div id= '' table '' > < div > < h2 > Invoice < /h2 > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.InvNo ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.InvNo ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.Amount ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.Amount ) < /div > < /div > < div class= '' row '' > < div class= '' left '' > @ Html.LabelFor ( x= > x.Tax ) < /div > < div class= '' right '' > @ Html.TextBoxFor ( model = > model.Tax ) < /div > < /div > . . . . < /div > < /section > @ { Html.RenderAction ( `` Index '' , `` FooterPartial '' ) ; }"
"ParallelQuery < string > winningCombos = from n in nextComboMaker.GetNextCombo ( ) .AsParallel ( ) .WithCancellation ( _cancelSource.Token ) where ComboWasAWinner ( n ) select n ; ConcurrentBag < string > wins = new ConcurrentBag < string > ( ) ; foreach ( var winningCombo in winningCombos ) { wins.Add ( winningCombo ) ; if ( wins.Count == _maxWinsAllowed ) break ; } System.AggregateException was unhandled by user code Message=One or more errors occurred . Source=System.Core StackTrace : at System.Linq.Parallel.QueryTaskGroupState.QueryEnd ( Boolean userInitiatedDispose ) at System.Linq.Parallel.MergeExecutor ` 1.Execute [ TKey ] ( PartitionedStream ` 2 partitions , Boolean ignoreOutput , ParallelMergeOptions options , TaskScheduler taskScheduler , Boolean isOrdered , CancellationState cancellationState , Int32 queryId ) at System.Linq.Parallel.PartitionedStreamMerger ` 1.Receive [ TKey ] ( PartitionedStream ` 2 partitionedStream ) at System.Linq.Parallel.ForAllOperator ` 1.WrapPartitionedStream [ TKey ] ( PartitionedStream ` 2 inputStream , IPartitionedStreamRecipient ` 1 recipient , Boolean preferStriping , QuerySettings settings ) at System.Linq.Parallel.UnaryQueryOperator ` 2.UnaryQueryOperatorResults.ChildResultsRecipient.Receive [ TKey ] ( PartitionedStream ` 2 inputStream ) at System.Linq.Parallel.WhereQueryOperator ` 1.WrapPartitionedStream [ TKey ] ( PartitionedStream ` 2 inputStream , IPartitionedStreamRecipient ` 1 recipient , Boolean preferStriping , QuerySettings settings ) at System.Linq.Parallel.UnaryQueryOperator ` 2.UnaryQueryOperatorResults.ChildResultsRecipient.Receive [ TKey ] ( PartitionedStream ` 2 inputStream ) at System.Linq.Parallel.ScanQueryOperator ` 1.ScanEnumerableQueryOperatorResults.GivePartitionedStream ( IPartitionedStreamRecipient ` 1 recipient ) at System.Linq.Parallel.UnaryQueryOperator ` 2.UnaryQueryOperatorResults.GivePartitionedStream ( IPartitionedStreamRecipient ` 1 recipient ) at System.Linq.Parallel.UnaryQueryOperator ` 2.UnaryQueryOperatorResults.GivePartitionedStream ( IPartitionedStreamRecipient ` 1 recipient ) at System.Linq.Parallel.QueryOperator ` 1.GetOpenedEnumerator ( Nullable ` 1 mergeOptions , Boolean suppressOrder , Boolean forEffect , QuerySettings querySettings ) at System.Linq.Parallel.ForAllOperator ` 1.RunSynchronously ( ) at StockWiz.Library.PLINQArrayProcessor.DoProcessing ( ) in C : \Users\dad\Documents\BitBucket\stockwiz_clone\stockwiz\StockWiz.Library\PLINQArrayProcessor.cs : line 50 at System.Threading.Tasks.Task.Execute ( ) InnerException : System.OverflowException Message=Arithmetic operation resulted in an overflow . Source=System.Core StackTrace : at System.Linq.Parallel.PartitionedDataSource ` 1.ContiguousChunkLazyEnumerator.MoveNext ( T & currentElement , Int32 & currentKey ) at System.Linq.Parallel.WhereQueryOperator ` 1.WhereQueryOperatorEnumerator ` 1.MoveNext ( TInputOutput & currentElement , TKey & currentKey ) at System.Linq.Parallel.ForAllOperator ` 1.ForAllEnumerator ` 1.MoveNext ( TInput & currentElement , Int32 & currentKey ) at System.Linq.Parallel.ForAllSpoolingTask ` 2.SpoolingWork ( ) at System.Linq.Parallel.SpoolingTaskBase.Work ( ) at System.Linq.Parallel.QueryTask.BaseWork ( Object unused ) at System.Threading.Tasks.Task.Execute ( ) InnerException : var query = nextComboMaker.GetNextCombo ( ) .AsParallel ( ) ; query.ForAll ( x = > if ( ComboWasAWinner ( x ) wins.Add ( x ) ) ;"
"app.PostCompleted += ( o , args ) = > { if ( args.Error == null ) { MessageBox.Show ( `` Picture posted to wall successfully . `` ) ; } else { MessageBox.Show ( args.Error.Message ) ; } } ;"
"{ `` lastUpdated '' : '' 16:12 '' , '' filterOut '' : [ ] , '' people '' : [ { `` ID '' : '' x '' , '' Name '' : '' x '' , '' Age '' : '' x '' } , { `` ID '' : '' x '' , '' Name '' : '' x '' , '' Age '' : '' x '' } , { `` ID '' : '' x '' , '' Name '' : '' x '' , '' Age '' : '' x '' } ] , `` serviceDisruptions '' : { `` infoMessages '' : [ `` blah blah text '' ] , `` importantMessages '' : [ ] , `` criticalMessages '' : [ ] } }"
keyContainerName= '' AesKeyContainer '' keyContainerName= '' C : \AesKey.txt ''
"public PricingContext ( string connectionString ) : base ( connectionString ) { Database.SetInitializer < PricingContext > ( null ) ; } public PricingContext ( string connectionString , IDatabaseInitializer < PricingContext > databaseInitializer = null ) : base ( connectionString ) { Database.SetInitializer < PricingContext > ( databaseInitializer ) ; }"
IAnimal mything = new Cat ( ) ; mything.chop ( ) ; public class MyAcceptor { public void accept ( IVisitor vst ) { ... } public void accept ( EnhancedConcreteVisitor vst ) { ... } }
"var client = new RestClient ( `` testclient.com '' ) ; var request = new RestRequest ( Method.POST ) ; request.AddHeader ( `` postman-token '' , `` 123-456-789-123-3654 '' ) ; request.AddHeader ( `` cache-control '' , `` no-cache '' ) ; request.AddHeader ( `` content-type '' , `` application/json '' ) ; request.AddHeader ( `` authorization '' , `` NLAuth nlauth_account= 12345678 , nlauth_email=test @ test.com , nlauth_signature=test123 , nlauth_role=correctrole '' ) ; request.AddParameter ( `` application/json '' , `` [ { \ '' id\ '' : \ '' 123\ '' , \t\ '' myid\ '' : \ '' 111\ '' , \t\ '' qty\ '' : \ '' 4\ '' } , { \ '' id\ '' : \ '' 123\ '' , \t\ '' myid\ '' : \ '' 618\ '' , \t\ '' qty\ '' : \ '' 6\ '' } \n , { \ '' id\ '' : \ '' 123\ '' , \t\ '' 1234\ '' : \ '' 2037\ '' , \t\ '' qty\ '' : \ '' 3\ '' } , { \ '' id\ '' : \ '' 123\ '' , \t\ '' 1243\ '' : \ '' 126\ '' , \t\ '' qty\ '' : \ '' 2\ '' } ] '' , ParameterType.RequestBody ) ; IRestResponse response = client.Execute ( request ) ;"
"var client = new KeyVaultClient ( GetAccessToken ) ; var secret = client.GetSecretAsync ( `` https : // { keyvaultName } .vault.azure.net '' , `` MySecret '' ) .Result ; private static async Task < string > GetAccessToken ( string authority , string resource , string scope ) { var context = new AuthenticationContext ( authority , TokenCache.DefaultShared ) ; var credential = new ClientCredential ( clientId : appId , clientSecret : appSecret ) ; var authResult = await context.AcquireTokenAsync ( resource , credential ) ; return authResult.AccessToken ; } private static async Task < string > GetAccessToken ( string authority , string resource , string scope ) { var context = new AuthenticationContext ( authority , TokenCache.DefaultShared ) ; var credential = new ClientCredential ( clientId : appId , clientSecret : appSecret ) ; **var authResult = await context.AcquireTokenAsync ( `` https : //management.core.windows.net/ '' , credential ) ; ** return authResult.AccessToken ; }"
"public ActionResult DeleteRecord ( Record recordToDelete ) { // If user succeeds deleting the record if ( _service.DeleteRecord ( recordToDelete ) { // Add success message MessageHandler.AddMessage ( Status.SUCCESS , `` A message to user '' ) ; // And redirect to list view return RedirectToAction ( `` RecordsList '' ) ; } else { // Else return records details view return View ( `` RecordDetails '' , recordToDelete ) ; } } < % = Html.RenderAllMessages % >"
public class Datum < T > : IReadOnlyList < T > { private IList < T > objects ; public int Count { get ; private set ; } public T this [ int i ] { get { return objects [ i ] ; } private set { this.objects [ i ] = value ; } } public Datum ( IList < T > obj ) { this.objects = obj ; this.Count = obj.Count ; } IEnumerator IEnumerable.GetEnumerator ( ) { return this.GetEnumerator ( ) ; } public IEnumerator < T > GetEnumerator ( ) { return this.objects.GetEnumerator ( ) ; } } static void Main ( string [ ] args ) { List < object > list = new List < object > ( ) ; list.Add ( `` one '' ) ; Datum < object > datum = new Datum < object > ( list ) ; list [ 0 ] = `` two '' ; Console.WriteLine ( datum [ 0 ] ) ; } public Datum ( IList < T > obj ) { this.objects = new List < T > ( ) ; foreach ( T t in obj ) { this.objects.Add ( t ) ; } this.Count = obj.Count ; } static void Main ( string [ ] args ) { List < object > list = new List < object > ( ) ; List < List < object > > containingList = new List < List < object > > ( ) ; list.Add ( `` one '' ) ; containingList.Add ( list ) ; Datum < List < object > > d = new Datum < List < object > > ( containingList ) ; list [ 0 ] = `` two '' ; Console.WriteLine ( d [ 0 ] [ 0 ] ) ; }
"$ scope.onFileSelect = function ( $ files ) { console.log ( `` on file select is running ! `` ) ; // $ files : an array of files selected , each file has name , size , and type . for ( var i = 0 ; i < $ files.length ; i++ ) { var $ file = $ files [ i ] ; ( function ( index ) { Upload.upload ( { url : `` /api/Uploads/Upload '' , // webapi url method : `` POST '' , file : $ file } ) .progress ( function ( evt ) { // get upload percentage console.log ( 'percent : ' + parseInt ( 100.0 * evt.loaded / evt.total ) ) ; } ) .success ( function ( data , status , headers , config ) { // file is uploaded successfully console.log ( data ) ; } ) .error ( function ( data , status , headers , config ) { // file failed to upload console.log ( data ) ; } ) ; } ) ( i ) ; } } [ Route ( `` api/ [ controller ] '' ) ] public class UploadsController : ApiController { [ HttpPost ] // This is from System.Web.Http , and not from System.Web.Mvc public async Task < HttpResponseMessage > Upload ( ) { if ( ! Request.Content.IsMimeMultipartContent ( ) ) { this.Request.CreateResponse ( HttpStatusCode.UnsupportedMediaType ) ; } var provider = GetMultipartProvider ( ) ; var result = await Request.Content.ReadAsMultipartAsync ( provider ) ; // On upload , files are given a generic name like `` BodyPart_26d6abe1-3ae1-416a-9429-b35f15e6e5d5 '' // so this is how you can get the original file name var originalFileName = GetDeserializedFileName ( result.FileData.First ( ) ) ; // uploadedFileInfo object will give you some additional stuff like file length , // creation time , directory name , a few filesystem methods etc.. var uploadedFileInfo = new FileInfo ( result.FileData.First ( ) .LocalFileName ) ; // Through the request response you can return an object to the Angular controller // You will be able to access this in the .success callback through its data attribute // If you want to send something to the .error callback , use the HttpStatusCode.BadRequest instead var returnData = `` ReturnTest '' ; return this.Request.CreateResponse ( HttpStatusCode.OK , new { returnData } ) ; } app.UseMvc ( routes = > { routes.MapRoute ( name : `` default '' , template : `` { controller=Home } / { action=Index } / { id ? } '' ) ; } ) ;"
"private interface IAnimal { } private class Duck : IAnimal { } private class Farm { private readonly ICollection < string > _animals = new List < string > ( ) ; public void Add < T > ( ) { _animals.Add ( typeof ( T ) .Name ) ; } public override string ToString ( ) { return string.Join ( `` , `` , _animals ) ; } } static Farm FarmFactory ( ) { var farm = new Farm ( ) ; farm.Add < Duck > ( ) ; farm.Add < Duck > ( ) ; farm.Add < IAnimal > ( ) ; // whoops farm.Add < Duck > ( ) ; return farm ; } private static void Main ( string [ ] args ) { var farm = FarmFactory ( ) ; Console.WriteLine ( `` Farm : '' ) ; Console.WriteLine ( farm ) ; // Use Cecil to find the call to farm.Add < IAnimal > ( ) : Console.WriteLine ( `` Errors : '' ) ; FindErrors ( ) ; Console.Read ( ) ; } private static void FindErrors ( ) { var methods = AssemblyDefinition.ReadAssembly ( typeof ( Farm ) .Assembly.Location ) .Modules .SelectMany ( module = > module.Types ) .SelectMany ( type = > type.Methods ) .Where ( method = > method.HasBody ) .ToArray ( ) ; var callsToFarmDotAdd = methods .Select ( method = > new { Name = method.Name , MethodReferences = GetCallsToFarmDotAdd ( method ) } ) .Where ( x = > x.MethodReferences.Any ( ) ) .ToArray ( ) ; var testCases = callsToFarmDotAdd .SelectMany ( x = > x.MethodReferences ) ; var callsInError = testCases .Where ( test = > ! test.GenericParameters [ 0 ] .Resolve ( ) .IsClass ) ; foreach ( var error in callsInError ) { Console.WriteLine ( error.FullName ) ; } } private static IEnumerable < MethodReference > GetCallsToFarmDotAdd ( MethodDefinition method ) { return method.Body.Instructions .Where ( instruction = > instruction.OpCode == OpCodes.Callvirt ) .Select ( instruction = > ( MethodReference ) instruction.Operand ) .Where ( methodReference = > methodReference.FullName.Contains ( `` Farm : :Add '' ) ) ; }"
"var result1 = await myService.GetData ( source1 ) ; var result2 = await myService.GetData ( source2 ) ; var result3 = await myService.GetData ( source3 ) ; allResults = Union ( result1 , result2 , result3 ) ;"
"public class Program { public const string Database = `` MongoDB '' ; public static string GetDb ( ) { switch ( Database ) { case `` MongoDB '' : return Database ; } } } 1 > -- -- -- Rebuild All started : Project : NoDefaultCase , Configuration : Debug Any CPU -- -- -- 1 > NoDefaultCase - > C : \Users\MartinEyles\source\repos\NoDefaultCase\NoDefaultCase\bin\Debug\NoDefaultCase.exe========== Rebuild All : 1 succeeded , 0 failed , 0 skipped ========== 1 > -- -- -- Rebuild All started : Project : NoDefaultCase , Configuration : Debug Any CPU -- -- -- 1 > C : \Users\MartinEyles\source\repos\NoDefaultCase\NoDefaultCase\Program.cs ( 9,30,9,35 ) : error CS0161 : 'Program.GetDb ( ) ' : not all code paths return a value========== Rebuild All : 0 succeeded , 1 failed , 0 skipped ========== Microsoft Visual Studio Enterprise 2017 Version 15.9.11VisualStudio.15.Release/15.9.11+28307.586Microsoft .NET Framework Version 4.7.03056 Microsoft Visual Studio Enterprise 2019 Version 16.0.0VisualStudio.16.Release/16.0.0+28729.10Microsoft .NET Framework Version 4.7.03056 Microsoft Visual Studio Enterprise 2019Version 16.0.3VisualStudio.16.Release/16.0.3+28803.352Microsoft .NET Framework Version 4.7.03056"
< PropertyGroup Condition= '' ' $ ( OS ) ' == 'Windows_NT ' `` > < TargetFrameworks > netstandard2.0 ; net461 < /TargetFrameworks > < /PropertyGroup > < ItemGroup Condition= '' ' $ ( TargetFramework ) ' == 'net461 ' `` > < Reference Include= '' System.Web '' / > < /ItemGroup > # if NET461 if ( someFolderVar.StartsWith ( `` ~/ '' ) ) someFolderVar = System.Web.Hosting.HostingEnvironment.MapPath ( someFolderVar ) ; # endif
"var cp866 = Encoding.GetEncoding ( 866 ) ; var utf8 = Encoding.UTF8 ; string source = `` some unreadable set of characters from the database '' ; byte [ ] cp866bytes = cp866.GetBytes ( source ) ; byte [ ] utf8bytes = Encoding.Convert ( cp866 , utf8 , cp866bytes ) ; string result = utf8.GetString ( utf8bytes ) ; string cp866EncodedValue = `` Œ€ „ ‹… Œ‹€ „ …Ž‚€ Šš…‚€ '' ; //actual copy-pasted value"
"using System.Collections.Generic ; public static partial class Permutable { static IEnumerable < IEnumerable < T > > PermuteIterator < T > ( IEnumerable < T > source , int offset ) { var count=0 ; foreach ( var dummy in source ) if ( ++count > offset ) foreach ( var sequence in Permutable.PermuteIterator ( source.Exchange ( offset , count-1 ) , 1+offset ) ) yield return sequence ; if ( offset==count-1 ) yield return source ; } public static IEnumerable < IEnumerable < T > > AsPermutable < T > ( this IEnumerable < T > source ) { return Permutable.PermuteIterator ( source , 0 ) ; } public static IEnumerable < T > Exchange < T > ( this IEnumerable < T > source , int index1 , int index2 ) { // exchange elements at index1 and index2 } }"
master.DescendantNodes ( ) .Union ( child.DescendantNodes ( ) ) ; < SysConfig IsRuntime= '' False '' BarcodeEnabled= '' false '' version= '' 1.2.0.0 '' > < DbPath > C : \Agilent_i1000\ICPT_DB.sqlite < /DbPath > < CardDiagonsticsDelayTime > 10 < /CardDiagonsticsDelayTime > < ScreenSpecs NameID= '' CoreID '' XrelativeID= '' X '' YrelativeID= '' Y '' > < ScreenSpec Name= '' MainCtrlPanel '' Xrelative= '' 0 '' Yrelative= '' 0 '' > < /ScreenSpec > < ScreenSpec Name= '' 1 '' Xrelative= '' 75 '' Yrelative= '' 0 '' NotToUse= '' 1 '' > < /ScreenSpec > < ScreenSpec Name= '' 2 '' Xrelative= '' 75 '' Yrelative= '' 25 '' NotToUse= '' 1 '' > < /ScreenSpec > < /ScreenSpecs > < /SysConfig > < SysConfig IsRuntime= '' False '' BarcodeEnabled= '' false '' version= '' 1.2.0.0 '' > < CardDiagonsticsDelayTime > 20 < /CardDiagonsticsDelayTime > < ScreenSpecs NameID= '' CoreID '' XrelativeID= '' X '' YrelativeID= '' Y '' > < ScreenSpec Name= '' MainCtrlPanel '' Xrelative= '' 0 '' Yrelative= '' 0 '' > < /ScreenSpec > < ScreenSpec Name= '' 1 '' Xrelative= '' 100 '' Yrelative= '' 0 '' > < /ScreenSpec > < ScreenSpec Name= '' 2 '' Xrelative= '' 75 '' Yrelative= '' 25 '' > < /ScreenSpec > < ScreenSpec Name= '' 3 '' Xrelative= '' 175 '' Yrelative= '' 25 '' > < /ScreenSpec > < /ScreenSpecs > < /SysConfig > < SysConfig IsRuntime= '' False '' BarcodeEnabled= '' false '' version= '' 1.2.0.0 '' > < DbPath > C : \Agilent_i1000\ICPT_DB.sqlite < /DbPath > < CardDiagonsticsDelayTime > 20 < /CardDiagonsticsDelayTime > < ScreenSpecs NameID= '' CoreID '' XrelativeID= '' X '' YrelativeID= '' Y '' > < ScreenSpec Name= '' MainCtrlPanel '' Xrelative= '' 0 '' Yrelative= '' 0 '' > < /ScreenSpec > < ScreenSpec Name= '' 1 '' Xrelative= '' 100 '' Yrelative= '' 0 '' NotToUse= '' 1 '' > < /ScreenSpec > < ScreenSpec Name= '' 2 '' Xrelative= '' 75 '' Yrelative= '' 25 '' NotToUse= '' 1 '' > < /ScreenSpec > < ScreenSpec Name= '' 3 '' Xrelative= '' 175 '' Yrelative= '' 25 '' > < /ScreenSpec > < /ScreenSpecs > < /SysConfig >
'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_64\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities\14.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Windows.Forms\v4.0_4.0.0.0__b77a5c561934e089\System.Windows.Forms.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities.Sync\14.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.Sync.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Runtime\14.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Debugger.Runtime.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \Users\Chris James\Documents\Visual Studio 2015\Projects\ConsoleApplication3\ConsoleApplication3\bin\Debug\ConsoleApplication3.vshost.exe ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_64\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll ' . Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled.The thread 0x3344 has exited with code 0 ( 0x0 ) .The thread 0x369c has exited with code 0 ( 0x0 ) .The thread 0x4498 has exited with code 0 ( 0x0 ) . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' c : \users\chris james\documents\visual studio 2015\Projects\ConsoleApplication3\ConsoleApplication3\bin\Debug\ConsoleApplication3.exe ' . Symbols loaded . 'ConsoleApplication3.vshost.exe ' ( CLR v4.0.30319 : ConsoleApplication3.vshost.exe ) : Loaded ' C : \WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Accessibility\v4.0_4.0.0.0__b03f5f7f11d50a3a\Accessibility.dll ' . Symbols loaded.The thread 0x2b58 has exited with code 0 ( 0x0 ) .The thread 0x3994 has exited with code 0 ( 0x0 ) .The program ' [ 11144 ] ConsoleApplication3.vshost.exe ' has exited with code 0 ( 0x0 ) . using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace DelegateTutorial1 { public class MediaStorage { public delegate int PlayMedia ( ) ; public void ReportResult ( PlayMedia playerDelegate ) { if ( playerDelegate ( ) == 0 ) { Console.WriteLine ( `` Media played successfully '' ) ; } else { Console.WriteLine ( `` Media did not play successfully '' ) ; } } } public class AudioPlayer { private int audioPlayerStatus ; public int PlayAudioFile ( ) { Console.WriteLine ( `` Simulating playing an audio file '' ) ; audioPlayerStatus = 0 ; return audioPlayerStatus ; } } public class VideoPlayer { private int videoPlayerStatus ; public int PlayVideoFile ( ) { Console.WriteLine ( `` Simulating a failed video file '' ) ; videoPlayerStatus = -1 ; return videoPlayerStatus ; } } public class Tester { public void Run ( ) { MediaStorage myMediaStorage = new MediaStorage ( ) ; AudioPlayer myAudioPlayer = new AudioPlayer ( ) ; VideoPlayer myVideoPlayer = new VideoPlayer ( ) ; MediaStorage.PlayMedia audioPlayerDelegate = new MediaStorage.PlayMedia ( myAudioPlayer.PlayAudioFile ) ; MediaStorage.PlayMedia videoPlayerDelegate = new MediaStorage.PlayMedia ( myVideoPlayer.PlayVideoFile ) ; myMediaStorage.ReportResult ( audioPlayerDelegate ) ; myMediaStorage.ReportResult ( videoPlayerDelegate ) ; } } class Program { static void Main ( string [ ] args ) { Tester t = new Tester ( ) ; t.Run ( ) ; } } }
"SmtpClient smtp = new SmtpClient ( `` smtp.gmail.com '' , 587 ) ; smtp.UseDefaultCredentials = false ; smtp.Credentials = new NetworkCredential ( `` pevus55 @ gmail.com '' , `` mypassword '' ) ; smtp.EnableSsl = true ; MailAddress mailFrom = new MailAddress ( `` parris797877 @ yahoo.com '' ) ; MailAddress mailTo = new MailAddress ( `` pevus55 @ gmail.com '' ) ; MailMessage msg = new MailMessage ( mailFrom , mailTo ) ; msg.Subject = `` Test '' ; msg.Body = textBox1.Text ; smtp.Send ( msg ) ;"
"public void LinkUp ( ) { if ( _isLinkUp ) return ; _upTime = DateTime.Now ; var span = _upTime.Subtract ( _downTime ) ; _downTimeLog.Add ( new LinkDown ( ) { _span = span , _status = _ipStatus , _time = _downTime } ) ; _isLinkUp = true ; } _downEventLog.AppendLine ( `` Duration- > `` + linkDownLogEvent._span.TotalMilliseconds + `` ms\n '' ) ; if ( ! _spanStopWatch.IsHighResolution ) { throw new ThisMachineIsNotAccurateEnoughForMyLikingException ( `` Find a better machine . `` ) ; } public void LinkUp ( ) { if ( _isLinkUp ) return ; _spanStopWatch.Stop ( ) ; var span = _spanStopWatch.Elapsed ; _downTimeLog.Add ( new LinkDown ( ) { _span = span , _status = _ipStatus , _time = _downTime } ) ; _isLinkUp = true ; }"
public class MainWindowViewModel : ViewModelBase { private TestContext db = new TestContext ( ) ; ... other code follows ( properties methods etc ... ) ... } public class TestViewModel : ViewModelBase { private TestContext db = new TestContext ( ) ; ... other code follows ( properties methods etc ... ) ... }
"public partial class MainPage : UserControl { PointCollection pc ; Int32 [ ] pattern = new Int32 [ ] { 1 , 1 , 0 , 2 , 1 , 0 , 0 , 3 } ; Int32 [ ] position = new Int32 [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; Boolean toggle ; Char r = default ( Char ) ; Int32 distance = 10 ; // line length Int32 step = 100 ; // paints per step Int32 skip = 10 ; // folds per paint Double x = 0 ; Double y = 0 ; Int32 a = 90 ; public MainPage ( ) { InitializeComponent ( ) ; } private void btnFire_Click ( object sender , RoutedEventArgs e ) { x = canvas.ActualWidth / 3 ; y = canvas.ActualHeight / 1.5 ; pc = new PointCollection ( ) ; var n = step ; while ( -- n > 0 ) { List < Char > s = getS ( skip ) ; draw ( s ) ; } Polyline p = new Polyline ( ) ; p.Stroke = new SolidColorBrush ( Colors.Red ) ; p.StrokeThickness = 0.5 ; p.Points = pc ; canvas.Children.Add ( p ) ; } List < Char > getS ( Int32 n ) { List < Char > s1 = new List < Char > ( ) ; while ( n -- > 0 ) s1.Add ( getNext ( 0 ) ) ; return s1 ; } void draw ( List < Char > s ) { pc.Add ( new Point ( x , y ) ) ; for ( Int32 i = 0 , n = s.Count ; i < n ; i++ ) { pc.Add ( new Point ( x , y ) ) ; Int32 j ; if ( int.TryParse ( s [ i ] .ToString ( ) , out j ) & & j ! = 0 ) { if ( ( a + 90 ) % 360 ! = 0 ) { a = ( a + 90 ) % 360 ; } else { a = 360 ; // Right } } else { if ( a - 90 ! = 0 ) { a = a - 90 ; } else { a = 360 ; // Right } } // new target if ( a == 0 || a == 360 ) { y -= distance ; } else if ( a == 90 ) { x += distance ; } else if ( a == 180 ) { y += distance ; } else if ( a == 270 ) { x -= distance ; } // move pc.Add ( new Point ( x , y ) ) ; } } Char getNext ( Int32 n ) { if ( position [ n ] == 7 ) { r = getNext ( n + 1 ) ; position [ n ] = 0 ; } else { var x = position [ n ] > 0 ? pattern [ position [ n ] ] : pattern [ 0 ] ; switch ( x ) { case 0 : r = ' 0 ' ; break ; case 1 : r = ' 1 ' ; break ; case 2 : if ( ! toggle ) { r = ' 1 ' ; } else { r = ' 0 ' ; } toggle = ! toggle ; break ; } position [ n ] = position [ n ] + 1 ; } return r ; } }"
SolidColorBrush blackBrush = new SolidColorBrush ( ) ; SolidColorBrush mySolidColorBrush = new SolidColorBrush ( ) ; mySolidColorBrush.Color = shieldGearModelRec.Gear.Color ;
"dynamic myObj = Assembly.Load ( `` MyAssembly '' ) .CreateInstance ( `` MyType '' ) ; myObj.Execute ( ) ; var appDomain = AppDomain.CreateDomain ( domainName , evidence , setup ) ; var myObj = appDomain.CreateInstanceAndUnwrap ( assembly , type ) ; typeof ( IMyInterface ) .InvokeMember ( `` Execute '' , BindingFlags.InvokeMethod , null , myObj ) ; dynamic myObj = ad.CreateInstanceAndUnwrap ( assembly , type ) ; myObj.Execute ( ) ; [ Serializable ] public class MyClass : MarshalByRefObject { public void Execute ( ) { // do something } } [ Serializable ] public class MyClass : MarshalByRefObject , IPlugin { public void Execute ( ) { // do something } }"
"@ model UI.Models.TestModel @ if ( Model.listTestModel ! = null ) { var grid = new WebGrid ( Model.listTestModel , null , defaultSort : `` ColumnA '' , rowsPerPage : 25 , canPage : true , canSort : true ) ; @ grid.GetHtml ( mode : WebGridPagerModes.All , columns : grid.Columns ( grid.Column ( columnName : `` ColumnA '' , header : `` ColumnA '' ) , grid.Column ( columnName : `` ColumnB '' , header : `` ColumnB '' ) ) ) }"
tabControlDataSource.SelectedIndex = 0 ; tabControlDataSource.SelectedIndex = 1 ; // etc
private bool AllItemsAreSatisfactoryV1 ( IEnumerable < Source > collection ) { foreach ( var foo in collection ) { Target target = SomeFancyLookup ( foo ) ; if ( ! target.Satisfactory ) { return false ; } } return true ; } private bool AllItemsAreSatisfactoryV2 ( IEnumerable < Source > collection ) { return null == ( from foo in collection where ! ( SomeFancyLookup ( foo ) .Satisfactory ) select foo ) .First ( ) ; } private bool AllItemsAreSatisfactoryV3 ( IEnumerable < Source > collection ) { return ! collection.Any ( foo = > ! SomeFancyLookup ( foo ) .Satisfactory ) ; }
public class C { private int _foo ; public int Foo { get { return _foo ; } [ Obsolete ( `` Modifying Foo through the setter may corrupt hash tables. `` + `` Consider using the method 'ModifyFoo ' instead . '' ) ] set { _foo = value ; } } public C ModifyFoo ( int foo ) { // return a new instance of C } }
public namespace ANamespace { public abstract class ABase : IABase { //properties } public abstract class A : ABase { //properties } public class A1 : A { //properties } public class A2 : A { //properties } } AutoMap .AssemblyOf < ABase > ( ) .Where ( e = > e.Namespace == `` ANamespace '' ) .IncludeBase < A > ( ) .IgnoreBase < ABase > ( ) ; AutoMap .AssemblyOf < ABase > ( ) .Where ( e = > e.Namespace == `` ANamespace '' ) .IgnoreBase < ABase > ( ) ;
"using System ; using System.Threading ; using System.Threading.Tasks ; namespace TasksDebugWindowTest { class Program { static void Main ( string [ ] args ) { DoesNotWork ( ) ; } static void Works ( ) { Console.WriteLine ( `` Starting '' ) ; var t = Task.Factory.StartNew ( ( ) = > { Task.Delay ( 100 * 1000 ) .Wait ( ) ; Console.WriteLine ( `` Task complete '' ) ; } ) ; Console.WriteLine ( `` Status : { 0 } '' , t.Status ) ; Thread.Sleep ( 500 ) ; Console.WriteLine ( `` Status : { 0 } '' , t.Status ) ; t.Wait ( ) ; Console.WriteLine ( `` Done '' ) ; } static void DoesNotWork ( ) { Console.WriteLine ( `` Starting '' ) ; var t = Task.Delay ( 100 * 1000 ) ; t.Wait ( ) ; // **** Breakpoint here Console.WriteLine ( `` Task complete '' ) ; } } }"
"public enum EthernetLinkSpeed { [ Description ( `` 10BASE-T '' ) ] _10BaseT , [ Description ( `` 100BASE-T '' ) ] _100BaseT , [ Description ( `` 1000BASE-T '' ) ] _1000BaseT , [ Description ( `` Disconnected '' ) ] Disconnected }"
xmlDocument.Document.Nodes ( ) .Where ( n = > n.NodeType == System.Xml.XmlNodeType.ProcessingInstruction )
"private static byte [ ] Resize ( byte [ ] imageBytes , int width , int height ) { using ( var img = Image.FromStream ( new MemoryStream ( imageBytes ) ) ) { using ( var outStream = new MemoryStream ( ) ) { double y = img.Height ; double x = img.Width ; double factor = 1 ; if ( width > 0 ) factor = width / x ; else if ( height > 0 ) factor = height / y ; var imgOut = new Bitmap ( ( int ) ( x * factor ) , ( int ) ( y * factor ) ) ; var g = Graphics.FromImage ( imgOut ) ; g.Clear ( Color.White ) ; g.DrawImage ( img , new Rectangle ( 0 , 0 , ( int ) ( factor * x ) , ( int ) ( factor * y ) ) , new Rectangle ( 0 , 0 , ( int ) x , ( int ) y ) , GraphicsUnit.Pixel ) ; imgOut.Save ( outStream , ImageFormat.Jpeg ) ; return outStream.ToArray ( ) ; } } } private static byte [ ] Resize ( byte [ ] imageBytes , int width , int height ) { var img = new FIBITMAP ( ) ; var rescaled = new FIBITMAP ( ) ; try { using ( var inStream = new MemoryStream ( imageBytes ) ) { img = FreeImage.LoadFromStream ( inStream ) ; rescaled = FreeImage.Rescale ( img , width , height , FREE_IMAGE_FILTER.FILTER_BICUBIC ) ; using ( var outStream = new MemoryStream ( ) ) { FreeImage.SaveToStream ( rescaled , outStream , FREE_IMAGE_FORMAT.FIF_JPEG ) ; return outStream.ToArray ( ) ; } } } finally { if ( ! img.IsNull ) FreeImage.Unload ( img ) ; img.SetNull ( ) ; if ( ! rescaled.IsNull ) FreeImage.Unload ( rescaled ) ; rescaled.SetNull ( ) ; } }"
"namespace MyApp { using System ; using System.Collections.ObjectModel ; class Program { static void Main ( string [ ] args ) { var col = new MyCollection ( ) ; col.Add ( new MyItem { Enum = MyEnum.Second } ) ; col.Add ( new MyItem { Enum = MyEnum.First } ) ; var item = col [ 0 ] ; Console.WriteLine ( `` 1 ) Null ? { 0 } '' , item == null ) ; item = col [ MyEnum.Second ] ; Console.WriteLine ( `` 2 ) Null ? { 0 } '' , item == null ) ; Console.ReadKey ( ) ; } } class MyItem { public MyEnum Enum { get ; set ; } } class MyCollection : Collection < MyItem > { public MyItem this [ MyEnum val ] { get { foreach ( var item in this ) { if ( item.Enum == val ) return item ; } return null ; } } } enum MyEnum { Default = 0 , First , Second } } 1 ) Null ? True2 ) Null ? False"
"Type ntt = Type.GetTypeFromProgID ( `` NameTranslate '' ) ; dynamic nto = Activator.CreateInstance ( ntt ) ; nto.Init ( 3 , null ) Type shellType = Type.GetTypeFromProgID ( `` WScript.Shell '' ) ; dynamic shell = Activator.CreateInstance ( shellType ) ; shell.SendKeys ( `` abc '' ) ; Type ntt = Type.GetTypeFromProgID ( `` NameTranslate '' ) ; object nto = Activator.CreateInstance ( ntt ) ; object [ ] initParams = new object [ ] { 3 , null } ; ntt.InvokeMember ( `` Init '' , BindingFlags.InvokeMethod , null , nto , initParams ) ;"
public static void Main ( string [ ] args ) { Gdk.Threads.Init ( ) ; // etc ... public static void Main ( string [ ] args ) { Glib.Thread.Init ( ) ; Gdk.Threads.Init ( ) ; // etc ... public static void Main ( string [ ] args ) { try { Gdk.Threads.Init ( ) ; } catch ( Exception ) { GLib.Thread.Init ( ) ; Gdk.Threads.Init ( ) ; } // etc ...
"System.Private.CoreLib : Exception while executing function : FunctionXeroSync . Xero.Api : The type initializer for 'Xero.Api.Infrastructure.Applications.Private.Core ' threw an exception . Microsoft.Extensions.Configuration.FileExtensions : The configuration file 'appsettings.json ' was not found and is not optional . The physical path is ' C : \Users\kirst\AppData\Local\AzureFunctionsTools\Releases\2.6.0\cli\appsettings.json ' . namespace Xero.Api { public class XeroApiSettings : IXeroApiSettings { public IConfigurationSection ApiSettings { get ; set ; } public XeroApiSettings ( string settingspath ) { var builder = new ConfigurationBuilder ( ) .AddJsonFile ( settingspath ) .Build ( ) ; ApiSettings = builder.GetSection ( `` XeroApi '' ) ; } public XeroApiSettings ( ) : this ( `` appsettings.json '' ) { } public string BaseUrl = > ApiSettings [ `` BaseUrl '' ] ; public string CallbackUrl = > ApiSettings [ `` CallbackUrl '' ] ; public string ConsumerKey = > ApiSettings [ `` ConsumerKey '' ] ; public string ConsumerSecret = > ApiSettings [ `` ConsumerSecret '' ] ; public string SigningCertificatePath = > ApiSettings [ `` SigningCertPath '' ] ; public string SigningCertificatePassword = > ApiSettings [ `` SigningCertPassword '' ] ; public string AppType = > ApiSettings [ `` AppType '' ] ; public bool IsPartnerApp = > AppType ? .Equals ( `` partner '' , StringComparison.OrdinalIgnoreCase ) ? ? false ; } } log.LogInformation ( `` base directory : `` +AppDomain.CurrentDomain.BaseDirectory ) ; D : \Program Files ( x86 ) \SiteExtensions\Functions\2.0.12095-alpha\32bit\"
"private Expression MakeWhereForPK ( int id ) { var paramExp = Expression.Parameter ( typeof ( Brand ) , '' b '' ) ; //Expression to get value from the entity var leftExp = Expression.Property ( paramExp , '' ID '' ) ; //Expression to state the value to match ( from the passed in variable ) var rightExp = Expression.Constant ( id , typeof ( int ) ) ; //Expression to compare the two var whereExp = Expression.Equal ( leftExp , rightExp ) ; return Expression.Lambda < Func < Brand , bool > > ( whereExp , paramExp ) ; } ctx.Brands.Where ( b = > b.ID = id ) ; Expression < Func < Brand , bool > > savedExp ; private Expression MakeWhereForPKWithCache ( int id ) { if ( savedExp == null ) { savedExp = MakeWhereForPK ( id ) ; } else { var body = ( BinaryExpression ) savedExp.Body ; var rightExp = ( ConstantExpression ) body.Right ; //At this point , value is readonly , so is there some otherway to `` inject '' id , //and save on compilation ? rightExp.Value = id ; } return savedExp ; }"
"Dictionary < int , Type > AllDrillTypes = new Dictionary < int , Type > ( ) { { 13 , typeof ( TCHEMISTRY ) } , { 14 , typeof ( TDRILLSPAN ) } } ; Type T = AllDrillTypes [ 13 ] ; var LC = Activator.CreateInstance ( typeof ( List < > ) .MakeGenericType ( T ) ) ; MethodInfo M = T.GetMethod ( `` FindAll '' , BindingFlags.Public | BindingFlags.Static , null , new Type [ ] { } , null ) ; LC = M.Invoke ( null , new object [ ] { } ) ; var LingLC = from obj in LC where obj.RunID == 1001 select obj ;"
"Dictionary < string , string > _mydic ; public string this [ string key ] { get { return _mydic [ key ] ; // could throw KeyNotFoundException } set { if ( _mydic.ContainsKey ( key ) ) _mydic [ key ] = value ; else _mydic.Add ( key , value ) ; } }"
"BigInteger bintA = new BigInteger ( baByteArrayReceived ) ; BigInteger bintb = new BigInteger ( baRandomBobSecret ) ; BigInteger bintDHPrime = new BigInteger ( baDHPrime2048 ) ; BigInteger bintSharedSecret = bintA.ModPow ( bintb , bintDHPrime ) ; BIGNUM *bnB = BN_new ( ) ; BIGNUM *bna = BN_new ( ) ; BIGNUM *bnDHPrime = BN_new ( ) ; BIGNUM *bnResult = BN_new ( ) ; BN_CTX *bnctx = BN_CTX_new ( ) ; BN_bin2bn ( baBReceived , 256 , bnB ) ; BN_bin2bn ( baRandomAliceSecret , 256 , bna ) ; BN_bin2bn ( baDHPrime2048 , 256 , bnDHPrime ) ; BN_mod_exp ( bnResult , bnB , bna , bnDHPrime , bnctx ) ; BIGNUM *BN_bin2bn ( const uint8_t *in , size_t len , BIGNUM *ret ) ; int BN_mod_exp ( BIGNUM *r , const BIGNUM *a , const BIGNUM *p , const BIGNUM *m , BN_CTX *ctx ) ;"
Content EN page1 page2 404 FR page1 404 < error404 > < errorPage culture= '' en-US '' > 1187 < /errorPage > < errorPage culture= '' fr-FR '' > 1189 < /errorPage > < /error404 >
"var list = from row in repository.GetAllEntities ( ) group row by new { row.RegionString , row.SubRegionString , row.CountryString } into g select new { g.Key.RegionString , g.Key.SubRegionString , g.Key.CountryString , Count = g.Count ( ) } ; return Json ( list , JsonRequestBehavior.AllowGet ) ; [ { `` RegionString '' : '' Americas '' , `` SubRegionString '' : '' '' , `` CountryString '' : '' '' , `` Count '' :2 } , { `` RegionString '' : '' Americas '' , `` SubRegionString '' : '' NorthAmerica '' , `` CountryString '' : '' Canada '' , `` Count '' :5 } , { `` RegionString '' : '' Americas '' , `` SubRegionString '' : '' NorthAmerica '' , `` CountryString '' : '' US '' , `` Count '' :3 } , { `` RegionString '' : '' Americas '' , `` SubRegionString '' : '' SouthAmerica '' , `` CountryString '' : '' Chile '' , `` Count '' :3 } , { `` RegionString '' : '' EMEA '' , `` SubRegionString '' : '' AsiaPacific '' , `` CountryString '' : '' Australia '' , `` Count '' :2 } , { `` RegionString '' : '' EMEA '' , `` SubRegionString '' : '' AsiaPacific '' , `` CountryString '' : '' Japan '' , `` Count '' :1 } , { `` RegionString '' : '' EMEA '' , `` SubRegionString '' : '' SouthernEurope '' , `` CountryString '' : '' Turkey '' , `` Count '' :1 } , { `` RegionString '' : '' EMEA '' , `` SubRegionString '' : '' WesternEurope '' , `` CountryString '' : '' '' , `` Count '' :1 } ] [ { name : `` Americas '' , children : [ { name : `` NorthAmerica '' , children : [ { `` name '' : `` Canada '' , `` count '' : 5 } , { `` name '' : `` US '' , `` count '' : 3 } ] } , { name : `` SouthAmerica '' , children : [ { `` name '' : `` Chile '' , `` count '' : 1 } ] } , ] , } , { name : `` EMA '' , children : [ { name : `` AsiaPacific '' , children : [ { `` name '' : `` Australia '' , `` count '' : 2 } , { `` name '' : `` Japan '' , `` count '' : 1 } ] } , { name : `` SouthernEurope '' , children : [ { `` name '' : `` Turkey '' , `` count '' : 1 } ] } , ] , } ]"
public class Foo { public bool Bar = false ; } PassInFoo ( new Foo { Bar = true } ) ; public class Foo { public bool Bar = true ; } PassInFoo ( new Foo { Bar = false } ) ;
abstract class Animal { public Leg GetLeg ( ) { ... } } abstract class Leg { } class Dog : Animal { public override DogLeg Leg ( ) { ... } } class DogLeg : Leg { }
typeof ( myType ) .TypeHandle Type.GetType ( string ) .TypeHandle
private class A { private readonly int _value ; public A ( int value ) { _value = value ; } public int Value { get { return _value ; } } } private class B { private readonly int _value ; private B ( int value ) { _value = value ; } public int Value { get { return _value ; } } public static explicit operator B ( A value ) { return new B ( value.Value ) ; } } B n = ( B ) new A ( 5 ) ; B n = ( B ) ( object ) new A ( 5 ) ; // Throws System.InvalidCastException : // Unable to cast object of type ' A ' to type ' B '
"public static string Join ( this IEnumerable < string > strings , string separator ) { return string.Join ( separator , strings.ToArray ( ) ) ; } < return > string.Join ( separator , strings.ToArray ( ) ) < /return > < return > < code > string.Join ( separator , strings.ToArray ( ) ) < /code > < /return >"
"< ItemsControl ItemsSource= '' { Binding SelectedItems , ElementName=listbox } '' DisplayMemberPath= { Binding DisplayMemberPath } '' > < ItemsControl.ItemPanel > < ItemsPanelTemplate > < StackPanel Orientation= '' Horizontal '' IsItemsHost= '' True '' / > < /ItemsPanelTemplate > < /ItemsControl.ItemPanel > < ItemsControl.ItemTemplate > < DataTemplate > < StackPanel Orientation= '' Horizontal '' > < TextBlock x : Name= '' Separator '' Text= '' , `` / > < ContentPresenter/ > < ! -- < TextBlock Text= '' { Binding username } '' / > -- > < /StackPanel > < /DataTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl >"
DbSet < A > A { get ; set ; } public class A { public string Id { get ; set ; } public IList < Base > Bases { get ; set ; } } public abstract class Base { public int Id { get ; set ; } public string Name { get ; set ; } } public abstract class Base1 : Base { public SomeClass SomeClass { get ; set ; } } public class Base2 : Base1 { } public class Base3 : Base1 { public SomeOtherClass SomeOtherClass { get ; set ; } } The Include path expression must refer to a navigation property defined on the type . Use dotted paths for reference navigation properties and the Select operator for collection navigation properties . public IEnumerable < A > GetAll ( string id ) { return _ctx.A .Include ( x = > x.Bases.OfType < Base1 > ( ) .Select ( y= > y.SomeClass ) ) .Where ( x = > x.Id.Equals ( id ) ) .ToList ( ) ; } public IEnumerable < A > GetAll ( string id ) { var lists = _dbContext.A.Where ( x = > x.Id == id ) ; lists.SelectMany ( a = > a.Bases ) .OfType < Base1 > ( ) .Include ( e= > e.SomeClass ) .Load ( ) ; lists.SelectMany ( b = > b.Bases ) .OfType < Base3 > ( ) .Include ( e = > e.SomeOtherClass ) .Load ( ) ; return lists ; }
"public enum PersonType { Student , Professor , Employee } class Person { public string Name { get ; set ; } public PersonType Type { get ; set ; } } class Student : Person { public string MatriculationNumber { get ; set ; } } class Subject { public string Name { get ; set ; } public int WeeklyHours { get ; set ; } } class Professor : Person { public List < Subject > Subjects { get ; set ; } } List < Person > oldPersonList = ... List < Person > newPersonList = ... List < Difference > = GetDifferences ( oldPersonList , newPersonList ) ; public List < Difference > GetDifferences ( List < Person > oldP , List < Person > newP ) { //how to check the properties without casting and checking //for each type and individual property ? ? //can this be done with Reflection even in Lists ? ? } class Difference { public List < string > ChangedProperties { get ; set ; } public Person NewPerson { get ; set ; } public Person OldPerson { get ; set ; } }"
"CMS.TreeEngine.TreeProvider provider = new CMS.TreeEngine.TreeProvider ( CMS.CMSHelper.CMSContext.CurrentUser ) ; CMS.TreeEngine.TreeNode image = provider.SelectSingleNode ( new Guid ( imageID ) , `` en-US '' , CMS.CMSHelper.CMSContext.CurrentSite.SiteName ) ; if ( image ! = null ) { CMS.TreeEngine.TreeNode school = provider.SelectSingleNode ( image.Parent.NodeID , `` en-US '' , true , true ) ; if ( school ! = null ) { string CMSUserID = school.GetValue ( `` CMSUserID '' ) .ToString ( ) ; if ( CMSUserID == ui.UserID.ToString ( ) ) { image.Delete ( false ) ; } } }"
int count = Directory.GetFiles ( Environment.GetFolderPath ( Environment.SpecialFolder .DesktopDirectory ) ) .Length ; int count = Directory.GetFiles ( Environment.GetFolderPath ( Environment.SpecialFolder .Desktop ) ) .Length ;
"[ Foo ( SomeKey= '' A '' , SomeValue= '' 3 '' ) ] [ Foo ( SomeKey= '' B '' , SomeValue= '' 4 '' ) ] public void TheMethod ( ) { SpecialAttributeLogicHere ( ) ; } [ Foo ( SomeKey= '' A '' , SomeValue= '' 3 '' ) ] [ Foo ( SomeKey= '' B '' , SomeValue= '' 4 '' ) ]"
public class SomeClass { private object obj = new object ( ) ; ... . ... . lock ( obj ) { } }
"fixed ( byte* destination = dataBytes ) { Buffer.MemoryCopy ( data , destination , dataLength , dataLength ) ; }"
"'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\PresentationFramework.Luna\3.0.0.0__31bf3856ad364e35\PresentationFramework.Luna.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\PresentationFramework.Aero\3.0.0.0__31bf3856ad364e35\PresentationFramework.Aero.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\PresentationFramework.resources\3.0.0.0_nl_31bf3856ad364e35\PresentationFramework.resources.dll '' MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\System.Data.SqlServerCe\3.5.1.0__89845dcd8080cc91\System.Data.SqlServerCe.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\System.Data.resources\2.0.0.0_nl_b77a5c561934e089\System.Data.resources.dll '' MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded ' C : \WINDOWS\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll ' , Skipped loading symbols . Module is optimized and the debugger option 'Just My Code ' is enabled . 'MyApp.exe ' ( Managed ( v2.0.50727 ) ) : Loaded 'Anonymously Hosted DynamicMethods Assembly ' public static class ConsoleLogger { public class LogWriter : TextWriter { public LogWriter ( ) { } public override Encoding Encoding { get { return Encoding.UTF8 ; } } public override void Write ( string value ) { Logger.Info ( value ) ; } } public static void RedirectConsoleLog ( ) { Console.SetOut ( new LogWriter ( ) ) ; } }"
"while ( read ) { Response.OutputStream.Write ( buffer , 0 , buffer.Length ) ; Response.Flush ( ) ; }"
"public class ClassA { public double ParameterA { get ; private set ; } public double ParameterB { get ; private set ; } public ClassA ( double parameterA , double parameterB ) { ParameterA = parameterA ; ParameterB = parameterB ; } public void Execute ( ClassB object ) { object.Value = ( object.Value * ParameterA ) /ParameterB ; } }"
"interface IFoo { ... } interface IBar : IFoo { ... } class Base : IFoo { ... } class Derived : Base , IBar { ... } if ( Derived is IBar ) // Do work if ( Derived is IBar ) Derived as IFoo // Do work"
"static void Main ( string [ ] args ) { processDirectory ( @ '' c : \temp '' ) ; } private static void processDirectory ( string startLocation ) { foreach ( var directory in Directory.GetDirectories ( startLocation ) ) { processDirectory ( directory ) ; if ( Directory.GetFiles ( directory ) .Length == 0 & & Directory.GetDirectories ( directory ) .Length == 0 ) { Directory.Delete ( directory , false ) ; } } }"
"class Program { private int foo ; public static void Main ( string [ ] args ) { var tmp = new Program ( ) ; // make an object if ( args.Length == 2 ) // depend the outcome on a runtime check { tmp.foo = 12 ; // set value *** } Console.WriteLine ( tmp.foo ) ; } } 000000ae 48 8B 85 10 01 00 00 mov rax , qword ptr [ rbp+00000110h ] 000000b5 C7 40 08 0C 00 00 00 mov dword ptr [ rax+8 ] ,0Ch"
"[ SuppressMessage ( `` Microsoft.Naming '' , `` CA2218 : OverrideGetHashCodeOnOverridingEquals '' , Justification= '' This class is not to be used as key in a hashtable . '' ) ]"
public TResult DoSomethingWithLogging < TResult > ( Func < TResult > someAction ) { try { return someAction.Invoke ( ) ; } catch ( Exception ex ) { LogException ( ex ) throw ; } var result = DoSomethingWithLogging ( ( ) = > Foo ( ) ) ; public static string Foo ( ) { try { return `` Foo '' ; } catch ( Exception ) { // I have to log this exception too without adding anything to Foo return `` Exception caught '' ; } }
"[ assembly : log4net.Config.XmlConfigurator ( ConfigFile = `` Log4Net.config '' , Watch = true ) ]"
"private void SomeMethod ( ) { // ... listener.BeginAcceptTcpClient ( OnAcceptConnection , listener ) ; } private void OnAcceptConnection ( IAsyncResult asyn ) { TcpListener listener = ( TcpListener ) asyn.AsyncState ; TcpClient client = listener.EndAcceptTcpClient ( asyn ) ; }"
"public class PositionComparer : IEqualityComparer < Position > { public bool Equals ( Position x , Position y ) { return ( x.Id == y.Id ) ; } public int GetHashCode ( Position obj ) { return obj.Id.GetHashCode ( ) ; } } public class BaseClassComparer : IEqualityComparer < BaseClass > { public bool Equals ( BaseClass x , BaseClass y ) { return ( x.Id == y.Id ) ; } public int GetHashCode ( BaseClass obj ) { return obj.Id.GetHashCode ( ) ; } } IEnumerable < Position > positions = GetAllPositions ( ) ; positions = allPositions.Distinct ( new BaseClassComparer ( ) )"
public class Container < T > { public T Value { get ; set ; } public static implicit operator T ( Container < T > t ) { return t.Value ; } public static implicit operator Container < T > ( T t ) { return new Container < T > ( ) { Value = t } ; } }
"[ TestMethod ] public void Test_Invalid_Date ( ) { var ts = new DateTime ( 2013 , 3 , 10 , 2 , 15 , 45 ) ; // Convert to UTC using System.TimeZoneInfo var utc = Utils.GetUtc ( ts ) .ToString ( Utils.Format ) ; // Convert to UTC using NodaTime ( Tzdb/Olson dataabase ) var utcNodaTime = Utils.GetUtcTz ( ts ) .ToString ( Utils.Format ) ; Assert.AreEqual ( utc , utcNodaTime ) ; } using System ; using NodaTime ; using NodaTime.TimeZones ; /// < summary > /// Functions to Convert To and From UTC/// < /summary > public class Utils { /// < summary > /// The date format for display/compare /// < /summary > public const string Format = `` yyyy-MM-dd HH : mm : ss.ffffff '' ; /// < summary > /// The eastern U.S. time zone /// < /summary > private static readonly NodaTime.DateTimeZone BclEast = NodaTime.DateTimeZoneProviders.Bcl.GetZoneOrNull ( `` Eastern Standard Time '' ) ; private static readonly TimeZoneInfo EasternTimeZone = TimeZoneInfo.FindSystemTimeZoneById ( `` Eastern Standard Time '' ) ; private static readonly NodaTime.DateTimeZone TzEast = NodaTime.DateTimeZoneProviders.Tzdb.GetZoneOrNull ( `` America/New_York '' ) ; private static readonly ZoneLocalMappingResolver CustomResolver = Resolvers.CreateMappingResolver ( Resolvers.ReturnLater , Resolvers.ReturnStartOfIntervalAfter ) ; public static DateTime GetUtc ( DateTime ts ) { return TimeZoneInfo.ConvertTimeToUtc ( EasternTimeZone.IsInvalidTime ( ts ) ? ts.AddHours ( 1.0 ) : ts , EasternTimeZone ) ; } public static DateTime GetUtcTz ( DateTime ts ) { var local = LocalDateTime.FromDateTime ( ts ) ; var zdt = TzEast.ResolveLocal ( local , CustomResolver ) ; return zdt.ToDateTimeUtc ( ) ; } public static DateTime GetUtcBcl ( DateTime ts ) { var local = LocalDateTime.FromDateTime ( ts ) ; var zdt = BclEast.ResolveLocal ( local , CustomResolver ) ; return zdt.ToDateTimeUtc ( ) ; } }"
for ( int i=0 ; i < 1000 ; ++i ) { lock ( myArray [ i ] ) { // ... } }
"public class TestObject { ... . [ Display ( Name = `` D2 '' , ResourceType = typeof ( WebApplication1.Models.Res.TestObject ) ) ] [ Range ( 0 , 999.9999 ) ] public decimal ? D1 { get ; set ; } // On DBContext I have defined the range/precision // modelBuilder.Entity < TestObject > ( ) .Property ( x = > x.D2 ) .HasPrecision ( 7 , 4 ) ; [ Display ( Name = `` Date1 '' , ResourceType = typeof ( WebApplication1.Models.Res.TestObject ) ) ] // [ DisplayFormat ( ApplyFormatInEditMode = true , DataFormatString = @ '' { 0 : dd\/MM\/yyyy } '' ) ] public DateTime Date1 { get ; set ; } ... . } < div class= '' form-group '' > @ Html.LabelFor ( model = > model.D2 , htmlAttributes : new { @ class = `` control-label col-md-2 '' } ) < div class= '' col-md-10 '' > @ Html.EditorFor ( model = > model.D2 , new { htmlAttributes = new { @ class = `` form-control '' } } ) @ Html.ValidationMessageFor ( model = > model.D2 , `` '' , new { @ class = `` text-danger '' } ) < /div > < /div > < div class= '' form-group '' > @ Html.LabelFor ( model = > model.Date1 , htmlAttributes : new { @ class = `` control-label col-md-2 '' } ) < div class= '' col-md-10 '' > @ Html.EditorFor ( model = > model.Date1 , new { htmlAttributes = new { @ class = `` form-control '' } } ) @ Html.ValidationMessageFor ( model = > model.Date1 , `` '' , new { @ class = `` text-danger '' } ) < /div > < /div > < script src= '' ~/Scripts/globalize/globalize.js '' type= '' text/javascript '' > < /script > < /script > < script src= '' ~/Scripts/globalize/cultures/globalize.culture.de.js '' type= '' text/javascript '' > < /script > < script src= '' ~/Scripts/globalize/cultures/globalize.culture.en-US.js '' type= '' text/javascript '' > < /script > < script > $ .validator.methods.number = function ( value , element ) { return this.optional ( element ) || ! isNaN ( Globalize.parseFloat ( value ) ) ; } $ .validator.methods.date = function ( value , element ) { return this.optional ( element ) || Globalize.parseDate ( value ) ; } $ ( document ) .ready ( function ( ) { Globalize.culture ( ' @ System.Threading.Thread.CurrentThread.CurrentCulture ' ) ; } ) ; < /script > public class DecimalModelBinder : DefaultModelBinder { public override object BindModel ( ControllerContext controllerContext , ModelBindingContext bindingContext ) { object result = null ; // Do n't do this here ! // It might do bindingContext.ModelState.AddModelError // and there is no RemoveModelError ! // // result = base.BindModel ( controllerContext , bindingContext ) ; string modelName = bindingContext.ModelName ; string attemptedValue = bindingContext.ValueProvider.GetValue ( modelName ) .AttemptedValue ; // Depending on CultureInfo , the NumberDecimalSeparator can be `` , '' or `` . '' // Both `` . '' and `` , '' should be accepted , but are n't . string wantedSeperator = NumberFormatInfo.CurrentInfo.NumberDecimalSeparator ; string alternateSeperator = ( wantedSeperator == `` , '' ? `` . '' : `` , '' ) ; if ( attemptedValue.IndexOf ( wantedSeperator ) == -1 & & attemptedValue.IndexOf ( alternateSeperator ) ! = -1 ) { attemptedValue = attemptedValue.Replace ( alternateSeperator , wantedSeperator ) ; } try { if ( bindingContext.ModelMetadata.IsNullableValueType & & string.IsNullOrWhiteSpace ( attemptedValue ) ) { return null ; } result = decimal.Parse ( attemptedValue , NumberStyles.Any ) ; } catch ( FormatException e ) { bindingContext.ModelState.AddModelError ( modelName , e ) ; } return result ; } public class MvcApplication : System.Web.HttpApplication { protected void Application_Start ( ) { ... ModelBinders.Binders.Add ( typeof ( decimal ) , new DecimalModelBinder ( ) ) ; ModelBinders.Binders.Add ( typeof ( decimal ? ) , new DecimalModelBinder ( ) ) ; ... } private void Application_BeginRequest ( Object source , EventArgs e ) { HttpApplication application = ( HttpApplication ) source ; HttpContext context = application.Context ; string culture = null ; if ( context.Request.UserLanguages ! = null & & Request.UserLanguages.Length > 0 ) { culture = Request.UserLanguages [ 0 ] ; Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo ( culture ) ; Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture ; } } } < globalization culture= '' auto '' uiCulture= '' auto '' enableClientBasedCulture= '' true '' / >"
"1 # if ( DEBUG ) 2 // 13 // 24 # else5 // 16 // 27 # endif89 logger.Debug ( `` Log exception , etc . `` ) ;"
"[ __DynamicallyInvokable , TargetedPatchingOptOut ( `` Performance critical to inline across NGen image boundaries '' ) ] public virtual bool Equals ( object obj ) { return RuntimeHelpers.Equals ( this , obj ) ; } // System.Runtime.CompilerServices.RuntimeHelpers/// < summary > Determines whether the specified < see cref= '' T : System.Object '' / > instances are considered equal. < /summary > /// < returns > true if the < paramref name= '' o1 '' / > parameter is the same instance as the < paramref name= '' o2 '' / > parameter , or if both are null , or if o1.Equals ( o2 ) returns true ; otherwise , false. < /returns > /// < param name= '' o1 '' > The first object to compare . < /param > /// < param name= '' o2 '' > The second object to compare . < /param > [ SecuritySafeCritical ] [ MethodImpl ( MethodImplOptions.InternalCall ) ] public new static extern bool Equals ( object o1 , object o2 ) ; object pureObj1 = new object ( ) ; object pureObj2 = new object ( ) ; bool areEql = pureObj1.Equals ( pureObj2 ) ;"
"JsonFx.Json.JsonReader reader = new JsonFx.Json.JsonReader ( ) ; dynamic response = reader.Read ( jsonAsString ) ; { `` result '' : '' success '' , '' return '' : { `` high '' : { `` value '' : '' 3.85001 '' , '' value_int '' : '' 385001 '' , '' display '' : '' 3.85001\u00a0\u20ac '' , '' currency '' : '' EUR '' } } response.return.high.currencyIdentifier expected ; 'return ' is a keyword"
"class Log { entries = new List < Entry > ( ) ; DateTime Date { get ; set ; } IList < Entry > entries { get ; set ; } } class Entry { DateTime ClockIn { get ; set ; } DateTime ClockOut { get ; set ; } } Log log1 = new Log ( ) { Date = new DateTime ( 2010 , 1 , 1 ) , } ; log1.Entries.Add ( new Entry ( ) { ClockIn = new DateTime ( 0001 , 1 , 1 , 9 , 0 , 0 ) , ClockOut = new DateTime ( 0001 , 1 , 1 , 12 , 0 , 0 ) } ) ; Log log2 = new Log ( ) { Date = new DateTime ( 2010 , 2 , 1 ) , } ; var query = from l in DB.GetLogs ( ) from e in l.Entries orderby l.Date ascending select new { Date = l.Date , ClockIn = e.ClockIn , ClockOut = e.ClockOut , } ; /* Date | Clock In | Clock Out 01/01/2010 | 09:00 | 12:00 */ /* Date | Clock In | Clock Out 01/01/2010 | 09:00 | 12:00 02/01/2010 | | */"
public interface IBasic { int Data { get ; } } public interface IChangeable : IBasic { int Data { set ; } } public interface IBasic { int Data { get ; } } public interface IChangeable : IBasic { void ChangeData ( int value ) ; }
DateTime dateTime = new DateTime ( 634546165144647370 ) ; SqlDateTime sqlDateTime = new SqlDateTime ( dateTime ) ; Console.WriteLine ( `` dateTime.TimeOfDay = `` + dateTime.TimeOfDay ) ; Console.WriteLine ( `` sqlDateTime.TimeOfDay = `` + sqlDateTime.Value.TimeOfDay ) ; Console.ReadLine ( ) ; dateTime.TimeOfDay = 10:21:54.4647370 sqlDateTime.TimeOfDay = 10:21:54.4630000
public class TestMiddleware { private readonly RequestDelegate next ; private HttpContext context ; public TestMiddleware ( RequestDelegate next ) { this.next = next ; } public async Task Invoke ( HttpContext context ) { try { this.context = context ;
"[ XmlRootAttribute ( `` MyClass '' , Namespace = `` '' , IsNullable = false ) ] public class MyClass { private string comments ; public string Comments { set { comments = value ; } get { return comments ; } } private System.Collections.Generic.List < string > tests = null ; public System.Collections.Generic.List < string > Tests { get { return tests ; } set { tests = value ; } } } < MyClass > < SomeNode > value < /SomeNode > < /MyClass >"
try { acc = this.fda.GetAccountHeader ( this.selectedTicket.AccountId ) ; } catch ( Exception ex ) { if ( ex is Enterprise.Data.InformationModel.CustomExceptions.InvalidSessionException ) { this.lblError.Text = Resources.Resource.error_sessionedTimedOut ; this.MPError.Show ( ) ; } return ; } catch ( Enterprise.Data.InformationModel.CustomExceptions.InvalidSessionException ex ) { this.lblError.Text = Resources.Resource.error_sessionedTimedOut ; this.MPError.Show ( ) ; return ; } catch ( Exception ex ) { return ; }
"internal List < CodeMemberMethod > createEventHooks ( ) { string [ ] eventNames = new string [ ] { `` OnUpdate '' , `` OnInsert '' , `` OnDelete '' , `` OnSelect '' , `` OnSelectAll '' } ; List < CodeMemberMethod > eventHooks = new List < CodeMemberMethod > ( ) ; foreach ( string eventName in eventNames ) { CodeMemberMethod eventHook = new CodeMemberMethod ( ) ; eventHook.Name = eventName ; eventHook.Attributes = MemberAttributes.ScopeMask ; eventHook.ReturnType = new CodeTypeReference ( `` partial void '' ) ; } return eventHooks ; } partial void OnUpdate ( ) { } partial void OnInsert ( ) { } partial void OnDelete ( ) { } partial void OnSelect ( ) { } partial void OnSelectAll ( ) { }"
"public class GraphicsPanel : Control { EngineWrapper Engine ; public GraphicsPanel ( ) { this.SetStyle ( ControlStyles.Selectable , true ) ; this.SetStyle ( ControlStyles.UserMouse , true ) ; this.SetStyle ( ControlStyles.UserPaint , true ) ; this.TabStop = true ; } public void SetEngine ( EngineWrapper Engine ) { this.Engine = Engine ; Application.Idle += OnApplicationIdle ; } ~GraphicsPanel ( ) { System.Windows.Forms.Application.Idle -= OnApplicationIdle ; } void PassMessage ( Message m ) { Engine.ProcessWindowMessage ( m.Msg , m.WParam , m.LParam ) ; } protected override void WndProc ( ref Message m ) { base.WndProc ( ref m ) ; PassMessage ( m ) ; } private void OnApplicationIdle ( object sender , EventArgs e ) { while ( AppStillIdle ) if ( Engine ! = null ) Engine.ProcessWindowMessage ( 0 , IntPtr.Zero , IntPtr.Zero ) ; } public bool AppStillIdle { get { NativeMethods.PeekMsg msg ; return ! NativeMethods.PeekMessage ( out msg , IntPtr.Zero , 0 , 0 , 0 ) ; } } internal class NativeMethods { private NativeMethods ( ) { } [ StructLayout ( LayoutKind.Sequential ) ] public struct PeekMsg { public IntPtr hWnd ; public Message msg ; public IntPtr wParam ; public IntPtr lParam ; public uint time ; public System.Drawing.Point p ; } [ System.Security.SuppressUnmanagedCodeSecurity ] [ DllImport ( `` User32.dll '' , CharSet = CharSet.Auto ) ] public static extern bool PeekMessage ( out PeekMsg msg , IntPtr hWnd , uint messageFilterMin , uint messageFilterMax , uint flags ) ; } } void EngineWrapper : :ProcessWindowMessage ( int msg , System : :IntPtr wParam , System : :IntPtr lParam ) { m_Engine- > ProcessWindowMessage ( msg , ( void* ) wParam , ( void* ) lParam ) ; } void Input : :ProcessWindowMessage ( int msg , void* wParam , void* lParam ) { if ( msg == 0 || msg == WM_PAINT ) { DrawFrame ( ) ; } else if ( msg == WM_SIZING || msg == WM_SIZE ) { DoResize ( ) ; DrawFrame ( ) ; } else if ( msg > = WM_MOUSEFIRST & & msg < = WM_MOUSEWHEEL ) { ProcessMouseMessage ( msg , wParam , lParam ) ; } }"
"public class Listener { readonly int totalTests ; public Listener ( ITestListener listener , int totalTests ) { this.totalTests = totalTests ; TestListener = listener ; TestRunState = TestRunState.NoTests ; } public ITestListener TestListener { get ; private set ; } public TestRunState TestRunState { get ; set ; } public void onTestFail ( ITestFailed args ) { Console.WriteLine ( args.Messages ) ; } } class TestPassed : TestResultMessage , ITestPassed { /// < summary > /// Initializes a new instance of the < see cref= '' TestPassed '' / > class . /// < /summary > public TestPassed ( ITest test , decimal executionTime , string output ) : base ( test , executionTime , output ) { Console.WriteLine ( `` Execution time was an awesome `` + executionTime ) ; } }"
"using System ; using System.Collections.Generic ; using System.Collections.ObjectModel ; using System.Linq ; using System.Management.Automation ; using System.Text ; using System.Threading.Tasks ; namespace PSDummy { [ Cmdlet ( VerbsCommon.Get , `` BookDetails '' ) ] public class GetBookDetails : Cmdlet , IDynamicParameters { IDictionary < string , string [ ] > m_dummyData = new Dictionary < string , string [ ] > { { `` Terry Pratchett '' , new [ ] { `` Small Gods '' , `` Mort '' , `` Eric '' } } , { `` Douglas Adams '' , new [ ] { `` Hitchhiker 's Guide '' , `` The Meaning of Liff '' } } } ; private RuntimeDefinedParameter m_authorParameter ; private RuntimeDefinedParameter m_bookParameter ; protected override void ProcessRecord ( ) { // Do stuff here.. } public object GetDynamicParameters ( ) { var parameters = new RuntimeDefinedParameterDictionary ( ) ; m_authorParameter = CreateAuthorParameter ( ) ; m_bookParameter = CreateBookParameter ( ) ; parameters.Add ( m_authorParameter.Name , m_authorParameter ) ; parameters.Add ( m_bookParameter.Name , m_bookParameter ) ; return parameters ; } private RuntimeDefinedParameter CreateAuthorParameter ( ) { var p = new RuntimeDefinedParameter ( `` Author '' , typeof ( string ) , new Collection < Attribute > { new ParameterAttribute { ParameterSetName = `` BookStuff '' , Position = 0 , Mandatory = true } , new ValidateSetAttribute ( m_dummyData.Keys.ToArray ( ) ) , new ValidateNotNullOrEmptyAttribute ( ) } ) ; // Actually this is always mandatory , but sometimes I can fall back to a default // value . How ? p.Value = mydefault ? return p ; } private RuntimeDefinedParameter CreateBookParameter ( ) { // How to define a ValidateSet based on the parameter value for // author ? var p = new RuntimeDefinedParameter ( `` Book '' , typeof ( string ) , new Collection < Attribute > { new ParameterAttribute { ParameterSetName = `` BookStuff '' , Position = 1 , Mandatory = true } , new ValidateSetAttribute ( new string [ 1 ] { string.Empty } /* can not fill this , because I can not access the author */ ) , new ValidateNotNullOrEmptyAttribute ( ) } ) ; return p ; } } }"
DataTable [ ] _tables = null ; // Throws System.NullReferenceException_tables.GetType ( ) ; // Throws System.ArgumentNullException_tables.Count ( ) ;
public class CandidateEntity : EntityBase { public virtual IList < GradeEntity > Grades { get ; set ; } public CandidateEntity ( ) { Grades = new List < GradeEntity > ( ) ; } }
fbsave ( ) ; fbsavedetails ( ) ;
"PictureProvider = new Mock < CloudinaryPictureProvider > ( mockProvider.Object , LoggerMock.Object ) { // CallBase true so it will only overwrite the method I want to be mocked . CallBase = true } ; PictureProvider.Protected ( ) .Setup < Task < ReturnObject > > ( `` UploadAsync '' , ItExpr.IsAny < ImageUploadParams > ( ) ) .Returns ( null as Task < ReturnObject > ) ; protected virtual async Task < ReturnObject > UploadAsync ( ImageUploadParams uploadParams ) { var result = await _cloudService.UploadAsync ( uploadParams ) ; return result == null ? null : new ReturnObject { // Setting values from the result object } ; } public async Task < ReturnObject > UploadImageAsync ( byte [ ] imageBytes , string uploadFolder ) { if ( imageBytes == null ) { // Exception thrown } var imageStream = new MemoryStream ( imageBytes ) ; // It throws the NullReferenceException here . var uploadResult = await UploadAsync ( new ImageUploadParams { File = new FileDescription ( Guid.NewGuid ( ) .ToString ( ) , imageStream ) , EagerAsync = true , Folder = uploadFolder } ) ; if ( uploadResult ? .Error == null ) { // This is basically the if statement I wanted to test . return uploadResult ; } { // Exception thrown } } Message : Test method { MethodName } threw exception : System.NullReferenceException : Object reference not set to an instance of an object ."
"public class LFUCache < TKey , TValue > { private readonly Dictionary < TKey , CacheItem > entries ; private readonly SortedSet < CacheItem > lfuList ; private class CacheItem { public TKey Key ; public TValue Value ; public int UseCount ; } private class CacheItemComparer : IComparer < CacheItem > { private readonly IComparer < TKey > cacheKeyComparer ; public CacheItemComparer ( IComparer < TKey > cacheKeyComparer ) { this.cacheKeyComparer = cacheKeyComparer ; if ( cacheKeyComparer == null ) this.cacheKeyComparer = Comparer < TKey > .Default ; } public int Compare ( CacheItem x , CacheItem y ) { int UseCount = x.UseCount - y.UseCount ; if ( UseCount ! = 0 ) return UseCount ; return cacheKeyComparer.Compare ( x.Key , y.Key ) ; } } public LFUCache ( int capacity , IEqualityComparer < TKey > keyEqualityComparer , IComparer < TKey > keyComparer ) // < - here 's my problem { // ... entries = new Dictionary < TKey , CacheItem > ( keyEqualityComparer ) ; lfuList = new SortedSet < CacheItem > ( new CacheItemComparer ( keyComparer ) ) ; } // ... } var cache = new LFUCache < string , int > ( 10000 , StringComparer.InvariantCultureIgnoreCase , StringComparer.InvariantCultureIgnoreCase ) ;"
"protected override void OnNavigatedTo ( NavigationEventArgs e ) { Window.Current.CoreWindow.KeyDown += CoreWindowOnKeyDown ; // ... } bool isItSpace ; private void CoreWindowOnKeyDown ( CoreWindow sender , KeyEventArgs args ) { if ( args.VirtualKey == VirtualKey.Space ) isItSpace = true ; } private void ButtonBase_OnClick ( object sender , RoutedEventArgs e ) { if ( isItSpace ) { isItSpace = false ; return ; } // ... } < Button Click= '' ButtonBase_OnClick '' > Button Text < /Button > if ( FocusManager.GetFocusedElement ( ) is Button ) { var bu = ( Button ) FocusManager.GetFocusedElement ( ) ; bu.IsEnabled = false ; }"
this.WhenActivated ( disposables = > { Debug.WriteLine ( `` ViewModel activated . `` ) ; Disposable .Create ( ( ) = > { Debug.WriteLine ( `` ViewModel deactivated . `` ) ; } ) .AddTo ( disposables ) ; } ) ; // App displays the view : ViewModel activated.View activated.// App hides the view : ViewModel deactivated.View deactivated.ViewModel activated.View activated.ViewModel deactivated.View deactivated . SubViewModel activated.SubView activated.SubViewModel deactivated.SubView deactivated.SubViewModel activated.SubView activated.SubViewModel deactivated.SubView deactivated .
Thread.Sleep ( 5 ) ;
"// ********* Interfaces **********interface IFooSource { // this is the event-stream of objects of type Foo IObservable < Foo > FooArrivals { get ; } } interface IBarSource { // this is the event-stream of objects of type Bar IObservable < Bar > BarArrivals { get ; } } / ********* Implementations *********class FooSource : IFooSource { // Here we put logic that receives Foo objects from the network and publishes them to the FooArrivals event stream . } class FooSubsetsToBarConverter : IBarSource { IFooSource fooSource ; IObservable < Bar > BarArrivals { get { // Do some fancy Rx operators on fooSource.FooArrivals , like Buffer , Window , Join and others and return IObservable < Bar > } } } // this class will subscribe to the bar source and do processingclass BarsProcessor { BarsProcessor ( IBarSource barSource ) ; void Subscribe ( ) ; } // ******************* Main ************************class Program { public static void Main ( string [ ] args ) { var fooSource = FooSourceFactory.Create ( ) ; var barsProcessor = BarsProcessorFactory.Create ( fooSource ) // this will create FooSubsetToBarConverter and BarsProcessor barsProcessor.Subscribe ( ) ; fooSource.Run ( ) ; // this enters a loop of listening for Foo objects from the network and notifying about their arrival . } } //********** interfaces *********interface IPublisher < T > { void Subscribe ( ISubscriber < T > subscriber ) ; } interface ISubscriber < T > { Action < T > Callback { get ; } } //********** implementations *********class FooSource : IPublisher < Foo > { public void Subscribe ( ISubscriber < Foo > subscriber ) { /* ... */ } // here we put logic that receives Foo objects from some source ( the network ? ) publishes them to the registered subscribers } class FooSubsetsToBarConverter : ISubscriber < Foo > , IPublisher < Bar > { void Callback ( Foo foo ) { // here we put logic that aggregates Foo objects and publishes Bars when we have received a subset of Foos that match our criteria // maybe we use Rx here internally . } public void Subscribe ( ISubscriber < Bar > subscriber ) { /* ... */ } } class BarsProcessor : ISubscriber < Bar > { void Callback ( Bar bar ) { // here we put code that processes Bar objects } } //********** program *********class Program { public static void Main ( string [ ] args ) { var fooSource = fooSourceFactory.Create ( ) ; var barsProcessor = barsProcessorFactory.Create ( fooSource ) // this will create BarsProcessor and perform all the necessary subscriptions fooSource.Run ( ) ; // this enters a loop of listening for Foo objects from the network and notifying about their arrival . } }"
"var contextMenu = new ContextMenu ( ) ; contextMenu.Items.Add ( new MenuItem { Header = `` Copy All '' , Icon = FindResource ( `` CopyImage '' ) } ) ; contextMenu.Items.Add ( new MenuItem { Header = `` Copy All with Headers '' , Icon = FindResource ( `` CopyImage '' ) } ) ; contextMenu.Items.Add ( new MenuItem { Header = `` Copy Selected '' , Icon = FindResource ( `` CopyImage '' ) } ) ; contextMenu.Items.Add ( new MenuItem { Header = `` Copy Selected with Headers '' , Icon = FindResource ( `` CopyImage '' ) } ) ; < Image x : Key= '' CopyImage '' Source= '' ../Images/copy.png '' / >"
"void Foo < T > ( IEnumerable < T > collection , params T [ ] items ) { // ... } void Foo < C , T > ( C collection , T item ) where C : ICollection < T > { // ... } void Main ( ) { Foo ( ( IEnumerable < int > ) new [ ] { 1 } , 2 ) ; } void Main ( ) { Foo < int > ( ( IEnumerable < int > ) new [ ] { 1 } , 2 ) ; }"
"enum EmpType : byte { Manager = 1 , Worker = 2 , } byte x = ( Enum.GetUnderlyingType ( typeof ( EmpType ) ) ) 15 ;"
// storageAccount here is a Microsoft.Azure.Management.Storage.Fluent.IStorageAccount instancevar storageAccount = _azure.StorageAccounts .Define ( name ) .WithRegion ( region ) .WithExistingResourceGroup ( resourceGroup ) .WithBlobEncryption ( ) .WithOnlyHttpsTraffic ( ) .WithBlobStorageAccountKind ( ) .WithAccessTier ( AccessTier.Hot ) .Create ( ) ;
int num = 0 ; using ( IEnumerator < TSource > enumerator = source.GetEnumerator ( ) ) { while ( enumerator.MoveNext ( ) ) { num = checked ( num + 1 ) ; } return num ; } // System.Linq.Enumerableusing System.Collections ; using System.Collections.Generic ; public static int Count < TSource > ( this IEnumerable < TSource > source ) { if ( source == null ) { ThrowHelper.ThrowArgumentNullException ( ExceptionArgument.source ) ; } ICollection < TSource > collection = source as ICollection < TSource > ; if ( collection ! = null ) { return collection.Count ; } IIListProvider < TSource > iIListProvider = source as IIListProvider < TSource > ; if ( iIListProvider ! = null ) { return iIListProvider.GetCount ( onlyIfCheap : false ) ; } ICollection collection2 = source as ICollection ; if ( collection2 ! = null ) { return collection2.Count ; } int num = 0 ; using ( IEnumerator < TSource > enumerator = source.GetEnumerator ( ) ) { while ( enumerator.MoveNext ( ) ) { num = checked ( num + 1 ) ; } return num ; } }
public class PersonModel { public string Name { get ; set ; } public string PrimaryPhoneNumber { get ; set ; } public void LoadAccountInfo ( AccountInfo accountInfo ) { this.Name = accountInfo.Name ; } public void LoadPhoneInfo ( PhoneInfo phoneInfo ) { this.PrimaryPhoneNumber = phoneInfo.PhoneNumber ; } } var model = new PersonModel ( ) ; model.LoadAccountInfo ( accountInfo ) ; model.LoadPhoneInfo ( phoneInfo ) ; public PersonModel LoadAccountInfo ( AccountInfo accountInfo ) { this.Name = accountInfo.Name ; return this ; } public PersonModel LoadPhoneInfo ( PhoneInfo phoneInfo ) { this.PrimaryPhoneNumber = phoneInfo.PhoneNumber ; return this ; } var model = new PersonModel ( ) .LoadAccountInfo ( accountInfo ) .LoadPhoneInfo ( phoneInfo ) ;
"if ( StorageNotAvailable ) Assert.Inconclusive ( `` Storage emulator is not available '' ) // where storage emulator is available , continue as normal [ TestMethod ] public void MyTestMethod ( ) { Assert.Inconclusive ( `` I am inconclusive '' ) ; } [ TestMethod ] public async Task MyTestMethodAsync ( ) { Assert.Inconclusive ( `` I am an error '' ) ; }"
public abstract class PostCommandFactory { public ICommand CreateCommand ( ) ; } public class UrlPostCommandFactory : PostCommandFactory { public ICommand CreateCommand ( ) { //Initialize Command Object Here } } public class BodyPostCommandFactory : PostCommandFactory { public ICommand CreateCommand ( ) { //Initialize Command Object Here } } public interface ICommand { string Invoke ( ) ; } public class UrlPostCommand : ICommand { public string Invoke ( ) { //Make URL Post Request } } public class BodyPostCommand : ICommand { public string Invoke ( ) { //Make Request Body Post Request } } public class RequestBodyPostStrategy : IPostStrategy { public string Invoke ( ) { //Make Request Body POST here } } public class UrlPostStrategy : IPostStrategy { public string Invoke ( ) { //Make URL POST here } } public interface IPostStrategy { string Invoke ( ) ; } public class PostContext { pubic List < IPostStrategy > _strategies ; public IPostStrategy _strategy ; public PostContext ( ) { _strategies = new List < IPostStrategy > ( ) ; } public void AddStrategy ( IPostStrategy strategy ) { _strategies.Add ( strategy ) ; } public void SetStrategy ( IPostStrategy strategy ) { _strategy = strategy ; } public void Execute ( ) { _strategy.Invoke ( ) ; } }
"[ Flags ] public enum Settings { WantsEmail = 1 , WantsNotifications = 2 , SharesProfile = 4 , EatsLasagna = 8 }"
dotnet tsgenerator `` $ ( TargetPath ) '' public static void Main ( string [ ] args ) { var dllPath = args [ 0 ] ; // `` D : \Test\bin\Release\netcoreapp2.0\my.dll '' var assembly = Assembly.LoadFile ( dllPath ) ; var types = assembly.GetExportedTypes ( ) ; // Throws exception }
"switch ( command ) { case Command.C1 : return new P1 ( ) ; case Command.C2 : return new P2 ( ) ; default : stream.Position++ ; return null ; } return command switch { Command.C1 = > new P1 ( ) , Command.C3 = > new P2 ( ) , _ = > { stream.Position++ ; return null ; } } ; return command switch { Command.C1 = > new P1 ( ) , Command.C3 = > new P2 ( ) , _ = > new Func < AbstractPacket > ( ( ) = > { stream.Position++ ; return null ; } ) ( ) } ; match command with| Command.C1 - > Some ( P1 ( ) : > AbstractPacket ) | Command.C2 - > Some ( P2 ( ) : > AbstractPacket ) | _ - > stream.Position < - stream.Position + 1 None"
"private void WaitFor10Events ( ) { volatile int totalEvents = 0 ; // error CS0106 : _someEventGenerator.SomeEvent += ( s , e ) = > totalEvents++ ; while ( totalEvents < 10 ) Thread.Sleep ( 100 ) ; }"
public class CreateStockcheckJobModel { [ Engineer ( true ) ] public EngineerModel Engineer { get ; set ; } } < % @ Control Language= '' C # '' Inherits= '' ViewUserControl < EngineerModel > '' % > < % if ( PropertyImRenderingHasAttributeWithTrueBooleanValue ) // What goes here ? { % > < p > Render one thing < /p > < % } else { % > < p > Render another thing < /p > < % } % >
.method private hidebysig static void Main ( string [ ] args ) cil managed { // method body L_0030 : ret }
"[ StructLayout ( LayoutKind.Explicit , Size = 28 ) ] public unsafe struct HandleProxy { [ FieldOffset ( 0 ) , MarshalAs ( UnmanagedType.I4 ) ] public JSValueType _ValueType ; // JSValueType is an enum [ FieldOffset ( 4 ) , MarshalAs ( UnmanagedType.I4 ) ] public Int32 _ManagedObjectID ; [ FieldOffset ( 8 ) ] public void* _NativeEngineProxy ; [ FieldOffset ( 16 ) , MarshalAs ( UnmanagedType.I4 ) ] public Int32 _EngineID ; [ FieldOffset ( 20 ) ] public void* _Handle ; } [ DllImport ( `` Proxy '' ) ] public static extern void DisposeHandleProxy ( HandleProxy* handle ) ; [ StructLayout ( LayoutKind.Explicit , Size = 20 ) ] public unsafe struct ValueProxy { [ FieldOffset ( 0 ) , MarshalAs ( UnmanagedType.I4 ) ] public JSValueType _ValueType ; // 32-bit type value . [ FieldOffset ( 4 ) , MarshalAs ( UnmanagedType.Bool ) ] public bool _Boolean ; [ FieldOffset ( 4 ) , MarshalAs ( UnmanagedType.I4 ) ] public Int32 _Integer ; [ FieldOffset ( 4 ) ] public double _Number ; [ FieldOffset ( 12 ) ] public void* _String ; } [ DllImport ( `` Proxy '' ) ] public static extern void DisposeValueProxy ( ValueProxy* valueProxy ) ;"
"[ AllowAnonymous ] [ HttpPost ( `` DoPost '' ) ] public async Task < IActionResult > InsertFile ( [ FromForm ] List < IFormFile > files , [ FromForm ] string msgTxt ) { ... // use generated container name CloudBlobContainer container = blobClient.GetContainerReference ( SqlInsertId ) ; // create container within blob if ( await container.CreateIfNotExistsAsync ( ) ) { await container.SetPermissionsAsync ( new BlobContainerPermissions { // PublicAccess = BlobContainerPublicAccessType.Blob PublicAccess = BlobContainerPublicAccessType.Off } ) ; } // loop through all files for upload foreach ( var asset in files ) { if ( asset.Length > 0 ) { // replace invalid chars in filename CleanFileName = String.Empty ; CleanFileName = Utils.ReplaceInvalidChars ( asset.FileName ) ; // get name and upload file CloudBlockBlob blockBlob = container.GetBlockBlobReference ( CleanFileName ) ; // START of block write approach //int blockSize = 256 * 1024 ; //256 kb //int blockSize = 4096 * 1024 ; //4MB int blockSize = 15360 * 1024 ; //15MB using ( Stream inputStream = asset.OpenReadStream ( ) ) { long fileSize = inputStream.Length ; //block count is the number of blocks + 1 for the last one int blockCount = ( int ) ( ( float ) fileSize / ( float ) blockSize ) + 1 ; //List of block ids ; the blocks will be committed in the order of this list List < string > blockIDs = new List < string > ( ) ; //starting block number - 1 int blockNumber = 0 ; try { int bytesRead = 0 ; //number of bytes read so far long bytesLeft = fileSize ; //number of bytes left to read and upload //do until all of the bytes are uploaded while ( bytesLeft > 0 ) { blockNumber++ ; int bytesToRead ; if ( bytesLeft > = blockSize ) { //more than one block left , so put up another whole block bytesToRead = blockSize ; } else { //less than one block left , read the rest of it bytesToRead = ( int ) bytesLeft ; } //create a blockID from the block number , add it to the block ID list //the block ID is a base64 string string blockId = Convert.ToBase64String ( ASCIIEncoding.ASCII.GetBytes ( string.Format ( `` BlockId { 0 } '' , blockNumber.ToString ( `` 0000000 '' ) ) ) ) ; blockIDs.Add ( blockId ) ; //set up new buffer with the right size , and read that many bytes into it byte [ ] bytes = new byte [ bytesToRead ] ; inputStream.Read ( bytes , 0 , bytesToRead ) ; //calculate the MD5 hash of the byte array string blockHash = Utils.GetMD5HashFromStream ( bytes ) ; //upload the block , provide the hash so Azure can verify it blockBlob.PutBlock ( blockId , new MemoryStream ( bytes ) , blockHash ) ; //increment/decrement counters bytesRead += bytesToRead ; bytesLeft -= bytesToRead ; } //commit the blocks blockBlob.PutBlockList ( blockIDs ) ; } catch ( Exception ex ) { System.Diagnostics.Debug.Print ( `` Exception thrown = { 0 } '' , ex ) ; // return BadRequest ( ex.StackTrace ) ; } } // END of block write approach ..."
public class SyncManager { private Func < Owned < ISynchProcessor > > _syncProcessor = null ; public SyncManager ( Func < Owned < ISynchProcessor > > syncProcessor ) { _syncProcessor = syncProcessor ; } private void Handle ( ) { using ( var service = _syncProcessor ( ) ) { service.Value.Process ( ) ; } } } Mock < ITimer > timer = new Mock < ITimer > ( ) ; Mock < Func < Owned < ISynchProcessor > > > syncProcessor = new Mock < Func < Owned < ISynchProcessor > > > ( ) ; Mock < Owned < ISynchProcessor > > proc = new Mock < Owned < ISynchProcessor > > ( ) ; [ TestInitialize ] public void TestInitialize ( ) { timer = new Mock < ITimer > ( ) ; syncProcessor = new Mock < Func < Owned < ISynchProcessor > > > ( ) ; syncProcessor.Setup ( item = > item.Invoke ( ) ) .Returns ( ( ) = > proc.Object ) ; }
Stream stream=getStream ( ) ; using ( var request=new Request ( stream ) ) { Stream copy=request.Stream ; // From here on can `` request '' be garbage collected ? DoStuff1 ( ) ; DoStuff2 ( copy ) ; } Stream stream=getStream ( ) ; Request request=null ; try { Stream copy=request.Stream ; // From here on can `` request '' be garbage collected ? DoStuff1 ( ) ; DoStuff2 ( copy ) ; } finally { if ( request ! =null ) request.Dispose ( ) ; }
"public void Execute ( object sender , object parameter ) { //removed some unnecessary code for the sake of being concise var autoCompleteBox = sender as AutoCompleteTextBox ; var e = parameter as SearchTextEventArgs ; var result = SearchUnderlyings ( e.SearchText ) ; autoCompleteBox.ItemsSource = result ; }"
"public class file_prep_obj { public string [ ] file_paths ; public string [ ] hostname ; public Dictionary < string , int > my_dictionary ; public void get_files ( ) { hostname = new string [ ] { `` host1 '' , `` host1 '' , `` host1 '' , `` host2 '' , `` host2 '' , `` host3 '' , `` host4 '' , '' host4 '' , '' host5 '' , '' host6 '' } ; file_paths=new string [ ] { `` C : \\host1_file1 '' , '' C : \\host1_file2 '' , '' C : \\host1_file3 '' , '' C : \\host2_file1 '' , '' C : \\host2_file2 '' , '' C : \\host2_file2 '' , `` C : \\host3_file1 '' , '' C : \\host4_file1 '' , '' C : \\host4_file2 '' , '' C : \\host5_file1 '' , '' C : \\host6_file1 '' } ; //The dictionary provides a count on the number of files that need to be processed for a particular host . my_dictionary = hostname.GroupBy ( x = > x ) .ToDictionary ( g = > g.Key , g = > g.Count ( ) ) ; } } //This class contains a list of file_paths associated with the same host.//The group_file_host_name will be the same for a host.class host_file_thread { public string [ ] group_file_paths ; public string [ ] group_file_host_name ; public void process_file ( string file_path_in ) { var time_delay_random=new Random ( ) ; Console.WriteLine ( `` Started processing File : `` + file_path_in ) ; Task.Delay ( time_delay_random.Next ( 3000 ) +1000 ) ; Console.WriteLine ( `` Completed processing File : `` + file_path_in ) ; } } class Program { static void Main ( string [ ] args ) { file_prep_obj my_files=new file_prep_obj ( ) ; my_files.get_files ( ) ; //Create our host objects ... my_files.my_dictionary.Count represents the max number of threads host_file_thread [ ] host_thread=new host_file_thread [ my_files.my_dictionary.Count ] ; int key_pair_count=0 ; int file_path_position=0 ; foreach ( KeyValuePair < string , int > pair in my_files.my_dictionary ) { host_thread [ key_pair_count ] = new host_file_thread ( ) ; //Initialise the host_file_thread object . Because we have an array of a customised object host_thread [ key_pair_count ] .group_file_paths=new string [ pair.Value ] ; //Initialise the group_file_paths host_thread [ key_pair_count ] .group_file_host_name=new string [ pair.Value ] ; //Initialise the group_file_host_name for ( int j=0 ; j < pair.Value ; j++ ) { host_thread [ key_pair_count ] .group_file_host_name [ j ] =pair.Key.ToString ( ) ; //Group the hosts host_thread [ key_pair_count ] .group_file_paths [ j ] =my_files.file_paths [ file_path_position ] ; //Group the file_paths file_path_position++ ; } key_pair_count++ ; } //Close foreach ( KeyValuePair < string , int > pair in my_files.my_dictionary ) //TODO PROCESS FILES USING host_thread objects . } //Close static void Main ( string [ ] args ) } //Close Class Program"
"string s1 = `` E15QD ( A ) '' ; string s2 = `` NHE15H '' ; string s2 = `` NQE18H '' // Will return { ' Q ' , ' E ' , ' 1 ' } List < char > cA1 = s1.ToList ( ) ; List < char > cA2 = s2.ToList ( ) ; var result = cA1.Where ( x = > cA2.Contains ( x ) ) .ToList ( ) ;"
"richTextBox2.Text = richTextBox1.Text.Replace ( `` : kissing_heart : '' , `` '' ) .Replace ( `` : bouquet : '' , `` '' ) .Replace ( `` : grinning : '' , `` '' ) .ToString ( ) ;"
".Split ( ' ' ) .Split ( new char [ ' ' ] ) using ( System.IO.StreamWriter sw = new StreamWriter ( @ '' C : \consoleapp1.log '' , true ) ) { string anystring = `` pagelength=60 pagewidth=170 cpi=16 lpi=8 landscape=1 lm=2 '' ; sw.WriteLine ( `` .Split ( ' ' ) '' ) ; string [ ] anystrings1 = anystring.Split ( ' ' ) ; for ( int i = 0 ; i < anystrings1.Length ; i++ ) { sw.WriteLine ( $ @ '' { i,2 } : { anystrings1 [ i ] } '' ) ; } sw.WriteLine ( `` .Split ( new char [ ' ' ] ) '' ) ; string [ ] anystrings2 = anystring.Split ( new char [ ' ' ] ) ; for ( int i = 0 ; i < anystrings2.Length ; i++ ) { sw.WriteLine ( $ @ '' { i,2 } : { anystrings2 [ i ] } '' ) ; } } .Split ( ' ' ) 0 : pagelength=60 1 : pagewidth=170 2 : cpi=16 3 : lpi=8 4 : landscape=1 5 : lm=2.Split ( new char [ ' ' ] ) 0 : pagelength=60 pagewidth=170 cpi=16 lpi=8 landscape=1 lm=2"
"[ HttpGet ] public ActionResult < FileResult > Download ( ) { var someBinaryFile = `` somebinaryfilepath '' ; return File ( new FileStream ( firstExe , FileMode.Open , FileAccess.Read , FileShare.Read ) , System.Net.Mime.MediaTypeNames.Application.Octet , true ) ; } { `` fileStream '' : { `` handle '' : { `` value '' :2676 } , '' canRead '' : true , '' canWrite '' : false , '' safeFileHandle '' : { `` isInvalid '' : false , '' isClosed '' : false } , '' name '' : '' somebinaryfilepath '' , '' isAsync '' : false , '' length '' :952320 , '' position '' :0 , '' canSeek '' : true , '' canTimeout '' : false { `` fileContents '' : `` somebinaryfilecontent '' , '' contentType '' : '' application/octet-stream '' , '' fileDownloadName '' : '' '' , '' lastModified '' : null , '' entityTag '' : null , '' enableRangeProcessing '' : true } public FileResult Download ( ) public IActionResult Download ( )"
namespace RoslynError { using System ; using Roslyn.Scripting ; using Roslyn.Scripting.CSharp ; internal class RoslynError { static void Main ( string [ ] args ) { var engine = new ScriptEngine ( ) ; Session session = engine.CreateSession ( ) ; session.Execute ( @ '' using System.Collections ; '' ) ; session.Execute ( @ '' using System.Linq ; '' ) ; Console.ReadKey ( ) ; } } }
public class BaseClass { public string BaseProperty { get ; set ; } } public class ChildClass : BaseClass { public string ChildProperty { get ; set ; } } List < string > propertyNames=new List < string > ( ) ; foreach ( PropertyInfo info in typeof ( T ) .GetProperties ( ) ) { propertyNames.Add ( info.Name ) ; }
"aaa , aaz ... aba , abb , abz , ... zzy , zzz . char [ ] characters = { a , b , c ... z } ; int currentIndex = 29 ; // abdpublic string CurrentSequence ( int currentIndex ) { int ndx1 = getIndex1 ( currentIndex ) ; // = 0 int ndx2 = getIndex2 ( currentIndex ) ; // = 1 int ndx3 = getIndex3 ( currentIndex ) ; // = 3 return string.Format ( `` { 0 } { 1 } { 2 } '' , characters [ ndx1 ] , characters [ ndx2 ] , characters [ ndx3 ] ) ; // abd }"
public abstract class Validator < T > : IValidator public sealed class NewsValidator : Validator < News > Bind < Validator < News > > ( ) .To < NewsValidator > ( ) ; Bind ( typeof ( Validator < > ) ) .To ( typeof ( NullValidator < > ) ) ; Validator < News > Validator < Article > Validator < SomethingElse >
"public void RunCalculator ( Calculator calculator ) { var query = Path.Combine ( EpiPath , calculator.ExeName + `` .exe '' ) ; if ( File.Exists ( Path.Combine ( EpiPath , `` ffs.exe '' ) ) ) { var p = new Process ( ) ; p.StartInfo.FileName = query ; p.StartInfo.WorkingDirectory = EpiPath ; p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden ; p.StartInfo.UseShellExecute = false ; p.StartInfo.CreateNoWindow = true ; p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden ; p.StartInfo.Arguments = String.Join ( `` `` , calculator.Arguments ) ; p.Start ( ) ; p.WaitForExit ( ) ; } else throw new InvalidOperationException ( ) ; }"
"private void DoColorCalcs ( float factor , Color color ) { int mul = ( int ) Math.Max ( Math.Min ( factor * 255.0 , 255.0 ) , 0.0 ) ; tile.Color = new Color ( ( byte ) Math.Min ( tile.Color.R + ( color.R * mul / 255 ) , 255 ) , ( byte ) Math.Min ( tile.Color.G + ( color.G * mul / 255 ) , 255 ) , ( byte ) Math.Min ( tile.Color.B + ( color.B * mul / 255 ) , 255 ) ) ; } private void DoColorCalcs ( float factor , Color color ) { factor= ( float ) Math.Max ( factor , 0.0 ) ; tile.Color = new Color ( ( byte ) Math.Min ( tile.Color.R + ( color.R * factor ) , 255 ) , ( byte ) Math.Min ( tile.Color.G + ( color.G * factor ) , 255 ) , ( byte ) Math.Min ( tile.Color.B + ( color.B * factor ) , 255 ) ) ; }"
var records = cache.Select ( rec = > rec.Id ) .Distinct ( ) .Take ( n ) ; var results = cache.Where ( rec = > records.Contains ( rec.Id ) ) ;
"public void AddFeature ( IFeature ) { InsertSectionBreakIfNeeded ( ) ; if ( IFeature is TableFeature ) { TableFeature tf = ( TableFeature ) feature ; streamWriter.WriteLine ( tf.Title ) ; for ( int row=0 ; row < tf.Data.First.Length ; row++ ) { for ( int column=0 ; i < tf.Data.Length ; i++ ) { if ( i ! = 0 ) { streamWriter.Write ( `` | '' ) ; } streamWriter.Write ( feature.Data [ column ] [ row ] ) ; } } } else if ( IFeature is ListFeature ) { ListFeature lf = ( ListFeature ) feature ; streamWriter.Write ( lf.Title + `` : `` ) ; bool first = true ; foreach ( var v in lf.Data ) { if ( ! first ) { streamWriter.Write ( `` , `` ) ; } else { first = false ; } streamWriter.Write ( v ) ; } } ... else { throw new NotImplementedException ( ) ; } sectionBreakNeeded = true ; }"
"class Foo { } // a regular typeclass Bar < T , U > { } // an open typeclass Moo : Bar < int , string > { } // a closed typevar types = Assembly.GetExecutingAssembly ( ) .GetTypes ( ) .Where ( t = > ? ? ? ) ; types.Foreach ( t = > ConsoleWriteLine ( t.Name ) ) ; // should *not* output `` Bar ` 2 '' bool IsOpenType ( Type type ) { if ( ! type.IsGenericType ) return false ; var args = type.GetGenericArguments ( ) ; return args [ 0 ] .FullName == null ; } Console.WriteLine ( IsOpenType ( typeof ( Bar < , > ) ) ) ; // true Console.WriteLine ( IsOpenType ( typeof ( Bar < int , string > ) ) ) ; // false"
"var elements = from e in calendarDocument.Root.Elements ( `` elementName '' ) select e ; elements.Last ( ) .AddAfterSelf ( new XElement ( `` elementName '' , `` someValue1 '' ) ) ; elements.Last ( ) .AddAfterSelf ( new XElement ( `` elementName '' , `` someValue2 '' ) ) ; elements.Last ( ) .AddAfterSelf ( new XElement ( `` elementName '' , `` someValue3 '' ) ) ; elements.Last ( ) .AddAfterSelf ( new XElement ( `` elementName '' , `` someValue4 '' ) ) ;"
"IDataObject data = new DataObject ( ) ; data.SetData ( DataFormats.FileDrop , new string [ ] { @ '' X : \test.doc '' } ) ; MemoryStream memo = new MemoryStream ( 4 ) ; byte [ ] bytes = new byte [ ] { ( byte ) ( 5 ) , 0 , 0 , 0 } ; memo.Write ( bytes , 0 , bytes.Length ) ; data.SetData ( `` Preferred DropEffect '' , memo ) ; Clipboard.SetDataObject ( data ) ;"
"< SplitView Name= '' Menu '' DisplayMode= '' CompactOverlay '' OpenPaneLength= '' 200 '' CompactPaneLength= '' 0 '' Grid.RowSpan= '' 2 '' > < SplitView.Pane > < StackPanel > < AutoSuggestBox Margin= '' 0,20,0,20 '' Width= '' 170 '' PlaceholderText= '' Search '' QueryIcon= '' Find '' > < /AutoSuggestBox > < ListBox > < ListBoxItem Tapped= '' Projects_Tapped '' > < StackPanel Orientation= '' Horizontal '' > < SymbolIcon Symbol= '' Library '' / > < TextBlock Margin= '' 10,0,0,0 '' > Projects < /TextBlock > < /StackPanel > < /ListBoxItem > [ ... . ] < /ListBox > < /StackPanel > < /SplitView.Pane > < /SplitView >"
"[ HtmlTargetElement ( `` img '' , TagStructure = TagStructure.WithoutEndTag ) ] public class ImageTagHelper : TagHelper { public ImageTagHelper ( IHostingEnvironment environment ) { this._env = environment ; } private IHostingEnvironment _env ; public string DefaultImageSrc { get ; set ; } public override void Process ( TagHelperContext context , TagHelperOutput output ) { // urlHelper.ActionContext.HttpContext . //var env = ViewContext.HttpContext.ApplicationServices.GetService ( typeof ( IHostingEnvironment ) ) as IHostingEnvironment ; string imgPath = context.AllAttributes [ `` src '' ] .Value.ToString ( ) ; if ( ! File.Exists ( _env.WebRootPath + imgPath ) ) { output.Attributes.SetAttribute ( `` src '' , _env.WebRootPath + DefaultImageSrc ) ; } } }"
"hubProxy.On < Dictionary < long , List < SpecialParam > > > ( hubMethod , res = > { DoStuff ( ) ; } ) ; var serializer = JsonSerializer.Create ( ) ; serializer.TypeNameHandling = TypeNameHandling.All ; var hubConfig = new HubConfiguration ( ) ; hubConfig.Resolver.Register ( typeof ( JsonSerializer ) , ( ) = > serializer ) ; GlobalHost.DependencyResolver.Register ( typeof ( JsonSerializer ) , ( ) = > serializer ) ; HubConnection hubConnection = new HubConnection ( hubPath ) ; hubConnection.JsonSerializer.TypeNameHandling = Newtonsoft.Json.TypeNameHandling.Auto ; hubProxy = hubConnection.CreateHubProxy ( hubName ) ; hubProxy.JsonSerializer.TypeNameHandling = Newtonsoft.Json.TypeNameHandling.Auto ; { `` $ type '' : '' Microsoft.AspNet.SignalR.Hubs.HubResponse , Microsoft.AspNet.SignalR.Core '' , '' I '' : '' 0 '' }"
namespace ProjectName.Controllers { public class ReportsController : Controller { public ActionResult Index ( ) { throw new SystemException ( `` here '' ) ; return View ( ) ; } } } < authentication mode= '' Forms '' > < forms loginUrl= '' ~/ '' timeout= '' 2880 '' / > < /authentication >
"interface IFish { bool Swim ( ) ; bool CanWalk { get ; } } abstract class WalkingFishCommon : IFish { bool IFish.CanWalk { get { return true ; } } // ( 1 ) Error : must declare a body , because it is not marked // abstract , extern , or partial // bool IFish.Swim ( ) ; // ( 2 ) Error : the modifier 'abstract ' is not valid for this item // abstract bool IFish.Swim ( ) ; // ( 3 ) : If no declaration is provided , compiler says // `` WalkingFishCommon does not implement member IFish.Swim ( ) '' // { no declaration } // ( 4 ) Error : the modifier 'virtual ' is not valid for this item // virtual bool IFish.Swim ( ) ; // ( 5 ) Compiles , but fails to force derived class to implement Swim ( ) bool IFish.Swim ( ) { return true ; } }"
AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException ; Application.Current.DispatcherUnhandledException += Current_DispatcherUnhandledException ;
"public static class LinqExtensions { public static double Variance ( this IList < double > data ) { double sumSquares=0 ; double avg = data.Average ( ) ; foreach ( var num in data ) { sumSquares += ( num - avg * num - avg ) ; } return sumSquares / ( data.Count - 1 ) ; } public static decimal ? Variance < TSource > ( this IEnumerable < TSource > source , Func < TSource , decimal ? > selector ) { //where to start for implementing ? } }"
"PdfReader reader = new PdfReader ( path ) ; byte [ ] metadata = reader.Metadata ; // metadata [ 0 ] , metadata [ 1 ] , metadata [ 2 ] contain the BOM"
public class AuthMessageSenderOptions { public int PortNumber { get ; set ; } public string SmtpServer { get ; set ; } public string UserName { get ; set ; } public string Password { get ; set ; } } services.Configure < AuthMessageSenderOptions > ( Configuration.GetSection ( `` SMTP '' ) ) ;
"protected virtual ReturnType Create < T > ( ) where T : ReturnType { } protected override ReturnTypeChild Create < T > ( ) // ReturnTypeChild inherits ReturnType { return base.Create < T > as ReturnTypeChild ; } The type 'T ' can not be used as type parameter 'T ' in the generic type or method 'Create ( ) ' . There is no boxing conversion or type parameter conversion from 'T ' to 'ReturnType ' . Constraints for override and explicit interface implementation methods are inherited from the base method , so they can not be specified directly"
private static class EmptyHolder < T > { internal static readonly T [ ] Array = new T [ 0 ] ; }
public class User { public int UserId { get ; set ; } public string Name { get ; set ; } public UserSettings Settings { get ; set ; } } public class UserSettings { public int UserId { get ; set ; } // PK/FK public sting SpecialField { get ; set ; } } var user = new User { Settings = new UserSettings { SpecialField = `` Foo '' } } ; ctx.Users.Add ( user ) ; ctx.SaveChanges ( ) ; var user = ctx.Users.Include ( `` Settings '' ) .Single ( ) ; user.Name = `` Joe '' ; user.Settings.SpecialField = `` Bar '' ; ctx.SaveChanges ( ) ;
public class MatrixSummary { public MatrixSummary ( Matrix < double > matrix ) { } // ... } [ DebuggerTypeProxy ( typeof ( MatrixSummary ) ) ] public class MatrixSummary < T > where T : ... { public MatrixSummary ( Matrix < T > matrix ) { } // ... } [ DebuggerTypeProxy ( typeof ( MatrixSummary < > ) ) ] [ DebuggerTypeProxy ( typeof ( MatrixSummary < double > ) ) ]
namespace { # define MyIf = if ; # define MyElse = else ; ... public someclass { public void someMethod ( ) { MyIf ( true ) { ... } MyElse { ... } } } }
"private const int ItemsPerRequest = 10 ; [ WebMethod ] public RadComboBoxItemData [ ] GetAccount ( object context ) { RadComboBoxContext obj = ( RadComboBoxContext ) context ; DataTable data = GetDataAccount ( obj.Text ) ; RadComboBoxData comboData = new RadComboBoxData ( ) ; int itemOffset = obj.NumberOfItems ; int endOffset = Math.Min ( itemOffset + ItemsPerRequest , data.Rows.Count ) ; comboData.EndOfItems = endOffset == data.Rows.Count ; List result = new List ( endOffset - itemOffset ) ; for ( int i = itemOffset ; i < endOffset ; i++ ) { RadComboBoxItemData itemData = new RadComboBoxItemData ( ) ; itemData.Value = data.Rows [ i ] [ `` AccountLevelNo '' ] .ToString ( ) ; itemData.Text = data.Rows [ i ] [ `` AccountDesc3 '' ] .ToString ( ) ; itemData.Attributes.Add ( `` Level6 '' , data.Rows [ i ] [ `` AccountDesc2 '' ] .ToString ( ) ) ; itemData.Attributes.Add ( `` Level1 '' , data.Rows [ i ] [ `` AccountDesc1 '' ] .ToString ( ) ) ; result.Add ( itemData ) ; } comboData.Items = result.ToArray ( ) ; // comboData.Message = GetStatusMessage ( endOffset , data.Rows.Count ) ; return comboData.Items.ToArray ( ) ; } private static DataTable GetDataAccount ( string text ) { int accCode = 0 ; string query = `` select COA.LevelAccountNo , COA.AccountDesc as AccountDesc3 , Level1.AccountDesc as AccountDesc1 , Level2.AccountDesc as AccountDesc2 from COA COA , ( select LevelAccountNo , AccountDesc `` + `` from COA where len ( LevelAccountNo ) =2 ) as Level1 , ( select LevelAccountNo , AccountDesc from COA where len ( LevelAccountNo ) =5 ) as Level2 `` + `` where Level1.LevelAccountNo=left ( COA.LevelAccountNo,2 ) and Level2.LevelAccountNo=left ( COA.LevelAccountNo,5 ) and len ( COA.LevelAccountNo ) > 6 '' ; try { accCode = Convert.ToInt32 ( text ) ; query = query + `` COA.LevelAccountNo like ' '' + text + `` % ' '' ; } catch ( Exception ex ) { query = query + `` COA.AccountDesc3 like ' % '' + text + `` % ' '' ; } SqlConnection con = new SqlConnection ( ConfigurationSettings.AppSettings [ `` ConnectionString '' ] .ToString ( ) ) ; // string constr=ConfigurationManager.ConnectionStrings [ `` ConnectionString '' ] .ConnectionString ; SqlDataAdapter adapter = new SqlDataAdapter ( query , con ) ; // adapter.SelectCommand.Parameters.AddWithValue ( `` @ text '' , text ) ; DataTable data = new DataTable ( ) ; adapter.Fill ( data ) ; con.Close ( ) ; return data ; } Collapse | Copy Code < telerik : RadComboBox ID= '' cboAccount '' runat= '' server '' Height= '' 200 '' Width= '' 200 '' EmptyMessage= '' Select an Account '' EnableLoadOnDemand= '' true '' ShowMoreResultsBox= '' true '' EnableVirtualScrolling= '' true '' > < HeaderTemplate > < h3 > Accounts < /h3 > < /HeaderTemplate > < ClientItemTemplate > < div > < ul > < li > < span > < b > Name : # = Text # < /b > < /span > < /li > < li > < span > Level6 # = Attributes.Level6 # < /span > < /li > < li > < span > Level1 : # = Attributes.Level4 # < /span > < /li > < li > < span > Level4 # = Attributes.Level1 # < /span > < /li > < /ul > < /div > < br > < /br > < /ClientItemTemplate > < WebServiceSettings Method= '' GetAccount '' Path= '' InvestmentDropDownWebService.asmx '' / > < /telerik : RadComboBox >"
"hourRegistration.Date = `` 12/08/2015 '' ; Date = DateTime.ParseExact ( hourRegistration.Date , `` dd/MM/yyyy '' , CultureInfo.InvariantCulture ) public void CreateHours ( HourRegistrationDTO hourRegistration ) { DAO.Instance.HourRegistration.Add ( new HourRegistration ( ) { Date = DateTime.ParseExact ( hourRegistration.Date , `` dd/MM/yyyy '' , CultureInfo.InvariantCulture ) , Cust_ID = hourRegistration.Cust_id , Login_ID = hourRegistration.Login_id , Hours = hourRegistration.Hours , Comment = hourRegistration.Comment } ) ; DAO.Instance.SaveChanges ( ) ; }"
"// System.Threading.Tasks.Task [ __DynamicallyInvokable ] public static Task Delay ( int millisecondsDelay ) { return Task.Delay ( millisecondsDelay , default ( CancellationToken ) ) ; }"
"[ HttpPost ( `` UploadFiles '' ) ] public async Task < IActionResult > Post ( List < IFormFile > files ) { long size = files.Sum ( f = > f.Length ) ; string filePath = Path.GetTempFileName ( ) ; if ( files.Count > 0 ) { IFormFile file = files [ 0 ] ; if ( file.Length > 0 ) { using ( FileStream stream = new FileStream ( filePath , FileMode.Create ) ) { await file.CopyToAsync ( stream ) ; } } } return View ( ) ; } < form method= '' post '' enctype= '' multipart/form-data '' asp-controller= '' About '' asp-action= '' Post '' > < div class= '' form-group '' > < div class= '' col-md-10 '' > < p > Upload one image using this form : < /p > < input type= '' file '' name= '' files '' > < /div > < /div > < div class= '' form-group '' > < div class= '' col-md-10 '' > < input type= '' submit '' value= '' Upload '' > < /div > < /div > < /form >"
"private string InitAuth ( X509Certificate2 certificate , string systemId , string username , string password ) { byte [ ] plainBytes = Encoding.UTF8.GetBytes ( password ) ; var cipherB64 = string.Empty ; using ( var rsa = ( RSACryptoServiceProvider ) certificate.PublicKey.Key ) cipherB64 = systemId + `` ^ '' + username + `` ^ '' + Convert.ToBase64String ( rsa.Encrypt ( plainBytes , true ) ) ; return cipherB64 ; }"
clientCredentialType= '' certificate ''
< % @ WebHandler Language= '' C # '' Class= '' SyncHandler '' % > using System.Web ; using System.Threading ; public class SyncHandler : IHttpHandler { public void ProcessRequest ( HttpContext context ) { //BLOCKING artifical pause to simulate network activity Thread.Sleep ( 300 ) ; var Response = context.Response ; Response.Write ( `` sync response '' ) ; } public bool IsReusable { get { return true ; } } } < % @ WebHandler Language= '' C # '' Class= '' AsyncHandler '' % > using System.Web ; using System.Threading.Tasks ; public class AsyncHandler : HttpTaskAsyncHandler { public override async Task ProcessRequestAsync ( HttpContext context ) { //NON-BLOCKING artificial pause to simulate network activity await Task.Delay ( 300 ) ; var Response = context.Response ; Response.Write ( `` async response '' ) ; } public override bool IsReusable { get { return true ; } } }
"public class Record { ... public Hashtable data { get ; set ; } } using ( MemoryStream stream = new MemoryStream ( ) ) { BinaryFormatter formatter = new BinaryFormatter ( ) ; formatter.Serialize ( stream , data ) ; result = stream.GetBuffer ( ) ; } // -- -- -- -- -- using ( MemoryStream serializationStream = new MemoryStream ( ( byte [ ] ) value ) ) { BinaryFormatter formatter = new BinaryFormatter ( ) ; result = ( Hashtable ) formatter.Deserialize ( serializationStream ) ; } public class Record { public byte [ ] dataRaw { get ; set ; } [ NotMapped ] public Hashtable data { get { /*deserialize dataRaw */ } set { /*Serialize to dataRaw*/ } } }"
object mutex = new object ( ) ; void Main ( string [ ] args ) { lock ( mutex ) { doThings ( ) ; } } object mutex = new object ( ) ; void Main ( string [ ] args ) { Foo ( ) ; doThings ( ) ; Bar ( ) ; } void Foo ( ) { startLock ( mutex ) ; } void Bar ( ) { endlock ( mutex ) ; }
"public class ImpersonationRequirement : IAuthorizationRequirement { } public class ImpersonationHandler : AuthorizationHandler < ImpersonationRequirement > { protected override Task HandleRequirementAsync ( AuthorizationHandlerContext context , ImpersonationRequirement requirement ) { if ( context.User.CanImpersonate ( ) ) context.Succeed ( requirement ) ; return Task.CompletedTask ; } } public static bool CanImpersonate ( this ClaimsPrincipal principal ) { var val = principal ? .FindFirst ( MyClaimTypes.CAN_IMPERSONATE ) ? .Value ; return bool.TryParse ( val , out var value ) & & value ; } public class MyClaimTypes { /// < summary > /// Boolean value indicating this user is authorized to impersonate other customer accounts . /// < /summary > public const string CAN_IMPERSONATE = `` cim '' ; ... /// < summary > /// Actual name of the user impersonating the current user . /// < /summary > public const string IMPERSONATING_USER = `` imp '' ; } services.AddAuthorization ( options = > { options.AddPolicy ( `` Impersonator '' , policy = > policy.Requirements.Add ( new ImpersonationRequirement ( ) ) ) ; } ) ; [ Produces ( `` application/json '' ) ] [ Authorize ( Policy = `` Impersonator '' ) ] public class ImpersonationController : Controller { private readonly ILogger _logger ; private readonly ITokenManagementService _tokenManagementService ; private readonly UserManager < MyUser > _userManager ; public ImpersonationController ( ITokenManagementService tokenManagementService , ILoggerFactory loggerFactory , UserManager < MyUser > userManager ) { _tokenManagementService = tokenManagementService ; _userManager = userManager ; _logger = loggerFactory.CreateLogger < ImpersonationController > ( ) ; } [ HttpPost ] [ Route ( `` ~/api/impersonation/token '' ) ] [ ProducesResponseType ( typeof ( AuthenticationResponse ) , 200 ) ] [ ProducesResponseType ( typeof ( Exception ) , 500 ) ] public async Task < IActionResult > Impersonate ( [ FromBody ] string userNameToImpersonate ) { try { var impersonated = await _userManager.FindByNameAsync ( userNameToImpersonate ) ; if ( impersonated == null ) throw new EntityNotFoundException ( $ '' Unable to find user ' { userNameToImpersonate } ' in the data store . `` ) ; var actualUserId = User.UserId ( ) ; var token = await _tokenManagementService.GenerateJwt ( impersonated.Id , actualUserId ) ; var refresh = await _tokenManagementService.GenerateRefreshToken ( impersonated.Id , actualUserId ) ; var response = new AuthenticationResponse { AuthenticationToken = token , RefreshToken = refresh } ; return Ok ( response ) ; } catch ( Exception ex ) { return new OopsResult ( ex ) ; } } } if ( context.User.CanImpersonate ( ) ) context.Succeed ( requirement ) ;"
Active Version Runtime Architecture -- -- -- -- -- -- - -- -- -- - -- -- -- -- -- -- 1.0.0-alpha3 svr50 x86 1.0.0-alpha3 svrc50 x86 1.0.0-alpha4 CLR x86 * 1.0.0-alpha4 CoreCLR x86
var activeTemplate = await exec.DbContext.FormTemplates.FindAsync ( exec.Form.ActiveTemplateId ) ; var activeTemplate = exec.Form.ActiveTemplate ; var activeTemplate = await exec.DbContext.FormTemplates.FirstOrDefaultAsync ( x = > x.Id == exec.Form.ActiveTemplateId ) ; // slowvar activeTemplate = exec.DbContext.FormTemplates.FirstOrDefault ( x = > x.Id == exec.Form.ActiveTemplateId ) ; // fast
"2018-11-17T05:40:28.6300135Z Failed StripeAdmin_WhenOnTab_DefaultSortIsByIdDescending2018-11-17T05:40:28.6300461Z Error Message:2018-11-17T05:40:28.6304198Z Test method CS.Portal.E2e.Tests.Admin.StripeAdmin.StripeAdminTests.StripeAdmin_WhenOnTab_DefaultSortIsByIdDescending threw exception : 2018-11-17T05:40:28.6305677Z OpenQA.Selenium.WebDriverTimeoutException : Timed out after 300 seconds2018-11-17T05:40:28.6307041Z Stack Trace:2018-11-17T05:40:28.6307166Z at OpenQA.Selenium.Support.UI.DefaultWait ` 1.ThrowTimeoutException ( String exceptionMessage , Exception lastException ) 2018-11-17T05:40:28.6307999Z at OpenQA.Selenium.Support.UI.DefaultWait ` 1.Until [ TResult ] ( Func ` 2 condition ) 2018-11-17T05:40:28.6308188Z at CS.Portal.E2e.Tests.Utility.WebDriverUtilities.WaitForElement ( IWebDriver driver , By by , Boolean mustBeDisplayed ) in D : \a\1\s\CS.Portal.E2e.Tests\Utility\WebDriverUtilities.cs : line 262018-11-17T05:40:28.6319651Z at CS.Portal.E2e.Tests.Admin.StripeAdmin.StripeAdminTests.StripeAdmin_WhenOnTab_DefaultSortIsByIdDescending ( ) in D : \a\1\s\CS.Portal.E2e.Tests\Admin\StripeAdmin\StripeAdminTests.cs : line 512018-11-17T05:40:28.6319982Z 2018-11-17T05:40:34.4671568Z Results File : D : \a\1\s\TestResults\VssAdministrator_factoryvm-az416_2018-11-17_03_08_24.trx2018-11-17T05:40:34.4692222Z 2018-11-17T05:40:34.4695222Z Attachments:2018-11-17T05:40:34.4697610Z D : \a\1\s\TestResults\672f4d28-5082-42e9-a7e7-f5645aadcfd8\VssAdministrator_factoryvm-az416 2018-11-17 03_02_43.coverage2018-11-17T05:40:34.4697943Z 2018-11-17T05:40:34.4698278Z Total tests : 34 . Passed : 4 . Failed : 30 . Skipped : 0 ."
"//Code in Business Layer and this method is called from Web layer private void GetGeneralNews ( ) { client.BeginGetGeneralNewsFeed ( GeneralNewsCallback , null ) ; } //Call Back Method private static void GeneralNewsCallback ( IAsyncResult asyncResult ) { string response = string.Empty ; try { response = client.EndGetGeneralNewsFeed ( asyncResult ) ; } catch ( Exception ex ) { throw ex ; // Here is the problem . It does not throw the exception to the web layer instead it will suppress the error . } }"
class Speaker { public bool IsPlugged { get ; set ; } protected virtual void Beep ( ) { Contract.Requires ( IsPlugged ) ; Console.WriteLine ( `` Beep '' ) ; } } class WirelessSpeaker : Speaker { public bool TransmitterIsOn { get ; set ; } protected override void Beep ( ) { Contract.Requires ( TransmitterIsOn ) ; base.Beep ( ) ; } }
"var container = new Container ( ) ; container.Options.DefaultScopedLifestyle = new WebRequestLifestyle ( ) ; InitializeContainer ( container ) ; container.RegisterMvcControllers ( Assembly.GetExecutingAssembly ( ) ) ; container.Verify ( ) ; DependencyResolver.SetResolver ( new SimpleInjectorDependencyResolver ( container ) ) ; private static void InitializeContainer ( Container container ) { container.Register < ICacheProvider , CacheProvider > ( Lifestyle.Transient ) ; container.Register < ICacheService , CacheService > ( Lifestyle.Transient ) ; } public class NewsroomController : BaseRenderMvcController { public NewsroomController ( ICacheService cacheService ) : base ( cacheService ) { } public class BaseRenderMvcController : RenderMvcController { public ICacheService CacheService { get ; set ; } public BaseRenderMvcController ( ICacheService cacheService ) { CacheService = cacheService ; } } public class RenderMvcController : UmbracoController , IRenderMvcController , IRenderController , IController { public RenderMvcController ( ) ; public RenderMvcController ( UmbracoContext umbracoContext ) ; public RenderMvcController ( UmbracoContext umbracoContext , UmbracoHelper umbracoHelper ) ;"
squareArea xs = [ pi * r^2 | r < - xs ]
object obj = new object ( ) ; WeakReference wr = new WeakReference ( obj ) ; Assert.IsTrue ( wr.IsAlive ) ; obj = null ; GC.Collect ( ) ; Assert.IsFalse ( wr.IsAlive ) ;
"public partial class MainWindow { private Track _movieSkipSliderTrack ; private Slider sMovieSkipSlider = null ; private Label lbTimeTooltip = null ; private MediaElement Player = null ; public VideoPlayerViewModel ViewModel { get { return DataContext as VideoPlayerViewModel ; } } public MainWindow ( ) { InitializeComponent ( ) ; } private void SMovieSkipSlider_OnLoaded ( object sender , RoutedEventArgs e ) { _movieSkipSliderTrack = ( Track ) sMovieSkipSlider.Template.FindName ( `` PART_Track '' , sMovieSkipSlider ) ; _movieSkipSliderTrack.Thumb.DragDelta += Thumb_DragDelta ; _movieSkipSliderTrack.Thumb.MouseEnter += Thumb_MouseEnter ; } private void Thumb_MouseEnter ( object sender , MouseEventArgs e ) { if ( e.LeftButton == MouseButtonState.Pressed & & e.MouseDevice.Captured == null ) { var args = new MouseButtonEventArgs ( e.MouseDevice , e.Timestamp , MouseButton.Left ) { RoutedEvent = MouseLeftButtonDownEvent } ; SetPlayerPositionToCursor ( ) ; _movieSkipSliderTrack.Thumb.RaiseEvent ( args ) ; } } private void Thumb_DragDelta ( object sender , DragDeltaEventArgs e ) { SetPlayerPositionToCursor ( ) ; } private void SMovieSkipSlider_OnMouseEnter ( object sender , MouseEventArgs e ) { lbTimeTooltip.Visibility = Visibility.Visible ; lbTimeTooltip.SetLeftMargin ( Mouse.GetPosition ( sMovieSkipSlider ) .X ) ; } private void SMovieSkipSlider_OnPreviewMouseMove ( object sender , MouseEventArgs e ) { double simulatedPosition = SimulateTrackPosition ( e.GetPosition ( sMovieSkipSlider ) , _movieSkipSliderTrack ) ; lbTimeTooltip.AddToLeftMargin ( Mouse.GetPosition ( sMovieSkipSlider ) .X - lbTimeTooltip.Margin.Left + 35 ) ; lbTimeTooltip.Content = TimeSpan.FromSeconds ( simulatedPosition ) ; } private void SMovieSkipSlider_OnMouseLeave ( object sender , MouseEventArgs e ) { lbTimeTooltip.Visibility = Visibility.Hidden ; } private void SetPlayerPositionToCursor ( ) { Point mousePosition = new Point ( Mouse.GetPosition ( sMovieSkipSlider ) .X , 0 ) ; double simulatedValue = SimulateTrackPosition ( mousePosition , _movieSkipSliderTrack ) ; SetNewPlayerPosition ( TimeSpan.FromSeconds ( simulatedValue ) ) ; } private double CalculateTrackDensity ( Track track ) { double effectivePoints = Math.Max ( 0 , track.Maximum - track.Minimum ) ; double effectiveLength = track.Orientation == Orientation.Horizontal ? track.ActualWidth - track.Thumb.DesiredSize.Width : track.ActualHeight - track.Thumb.DesiredSize.Height ; return effectivePoints / effectiveLength ; } private double SimulateTrackPosition ( Point point , Track track ) { var simulatedPosition = ( point.X - track.Thumb.DesiredSize.Width / 2 ) * CalculateTrackDensity ( track ) ; return Math.Min ( Math.Max ( simulatedPosition , 0 ) , sMovieSkipSlider.Maximum ) ; } private void SetNewPlayerPosition ( TimeSpan newPosition ) { Player.Position = newPosition ; ViewModel.AlignTimersWithSource ( Player.Position , Player ) ; } } static class Extensions { public static void SetLeftMargin ( this FrameworkElement target , double value ) { target.Margin = new Thickness ( value , target.Margin.Top , target.Margin.Right , target.Margin.Bottom ) ; } public static void AddToLeftMargin ( this FrameworkElement target , double valueToAdd ) { SetLeftMargin ( target , target.Margin.Left + valueToAdd ) ; } } public class VideoPlayerViewModel : ViewModelBase { private TimeSpan _movieElapsedTime = default ( TimeSpan ) ; public TimeSpan MovieElapsedTime { get { return _movieElapsedTime ; } set { if ( value ! = _movieElapsedTime ) { _movieElapsedTime = value ; OnPropertyChanged ( ) ; } } } private TimeSpan _movieLeftTime = default ( TimeSpan ) ; public TimeSpan MovieLeftTime { get { return _movieLeftTime ; } set { if ( value ! = _movieLeftTime ) { _movieLeftTime = value ; OnPropertyChanged ( ) ; } } } public void AlignTimersWithSource ( TimeSpan currentPosition , MediaElement media ) { MovieLeftTime = media.NaturalDuration.TimeSpan - currentPosition ; MovieElapsedTime = currentPosition ; } } public class ViewModelBase : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged ; [ NotifyPropertyChangedInvocator ] protected virtual void OnPropertyChanged ( [ System.Runtime.CompilerServices.CallerMemberName ] string propName = null ) { PropertyChanged ? .Invoke ( this , new PropertyChangedEventArgs ( propName ) ) ; } }"
protected override void OnActionExecuting ( ActionExecutingContext filterContext ) { var langCode = GetLangCode ( ) ; Thread.CurrentThread.CurrentUICulture = new CultureInfo ( langCode ) ; Thread.CurrentThread.CurrentCulture = new CultureInfo ( langCode ) ; }
"public MainWindow ( ) { InitializeComponent ( ) ; this.process = new MyProcess ( ) ; this.worker = new BackgroundWorker ( ) ; this.worker.DoWork += worker_DoWork ; this.worker.RunWorkerCompleted += worker_RunWorkerCompleted ; } private void worker_DoWork ( object sender , DoWorkEventArgs e ) { this.process.Execute ( ( string [ ] ) e.Argument ) ; e.Result = this.process.Paragraph ( ) ; } private void worker_RunWorkerCompleted ( object sender , RunWorkerCompletedEventArgs e ) { this.rtbFolderContent.Document.Blocks.Clear ( ) ; // the next line causes InvalidOperationsException : // The calling thread can not access this object because a different thread owns it . this.rtbFolderContent.Document.Blocks.Add ( ( Paragraph ) e.Result ) ; } ... // folderContent of type string [ ] this.worker.RunWorkerAsync ( this.folderContent ) ; ... class MyProcess { Paragraph formatedFilenames ; public MyProcess ( ) { this.formatedFilenames = new Paragraph ( ) ; } public void Execute ( string [ ] folderContent ) { this.formatedFilenames = new Paragraph ( ) ; if ( folderContent.Length > 0 ) { for ( int f = 0 ; f < folderContent.Length ; ++f ) { this.formatedFilenames.Inlines.Add ( new Run ( folderContent [ f ] + Environment.NewLine ) ) ; // some dummy waiting time Thread.Sleep ( 500 ) ; } } } public Paragraph Paragraph ( ) { return this.formatedFilenames ; } }"
var result = string.Empty ; if ( rootObject ! = null ) { if ( rootObject.FirstProperty ! = null ) { if ( rootObject.FirstProperty.SecondProperty ! = null ) { if ( ! string.IsNullOrEmpty ( rootObject.FirstProperty.SecondProperty.InterestingString ) ) { result = rootObject.FirstProperty.SecondProperty.InterestingString ; } } } } var result = string.Empty ; try { result = rootObject.FirstProperty.SecondProperty.InterestingString ; } catch { }
"Task.Factory.StartNew ( ( ) = > _cardType.InitAllOrdersCollection ( ) ) .ContinueWith ( ( t ) = > ThrowEvent ( ) , TaskContinuationOptions.None ) ; public AsyncObservableCollection < IGridItem > OrdersCollection = new AsyncObservableCollection < IGridItem > ( ) ; public void InitAllOrdersCollection ( ) { // Thread.Sleep ( 50 ) ; < -- this sleep here fixes the problem ! foreach ( var convention in FileNameConventions ) { var namePatterns = convention.NameConvention.Split ( ' , ' ) ; foreach ( var pattern in namePatterns ) { var validFiles = CardTypeExtensions.GetFiles ( this.InputFolder , pattern , convention ) ; if ( validFiles.Any ( ) ) { this.FilesToOrders ( validFiles , convention ) ; } } } } public static List < string > GetFiles ( string inputFolder , string pattern , FileNameConvention convention ) { var files = Directory.GetFiles ( inputFolder , pattern ) ; return files.Where ( file = > IsCorrect ( file , convention ) ) .AsParallel ( ) .ToList ( ) ; } // Adds new order to OrdersCollection if its not there already ! private void FilesToOrders ( List < string > dirFiles , FileNameConvention convention ) { foreach ( var dirFile in dirFiles.AsParallel ( ) ) { var order = new Order ( dirFile , this , convention ) ; if ( ! this.OrdersCollection.ContainsOrder ( order ) ) { this.OrdersCollection.Add ( order ) ; } } } public static bool ContainsOrder ( this ObservableCollection < IGridItem > collection , Order order ) { return collection.Cast < Order > ( ) .Any ( c= > c.Filepath == order.Filepath ) ; }"
testtextbo|xishere
< Style x : Key= '' MyGridRowStyle '' BasedOn= '' { StaticResource { themes : GridRowThemeKey ResourceKey=RowStyle } } '' TargetType= '' { x : Type dxg : GridRowContent } '' > < Setter Property= '' Height '' Value= '' 25 '' / > < Style.Triggers > ... < /Style.Triggers > < /Style > < Style x : Key= '' MyCellStyle '' BasedOn= '' { StaticResource MyGridRowStyle } '' TargetType= '' { x : Type dxg : CellContentPresenter } '' > < Style.Triggers > ... < /Style.Triggers > < /Style > < dxg : GridColumn Header= '' My Header '' FieldName= '' MyFieldName '' Width= '' 100 '' CellStyle= '' { StaticResource MyCellStyle } '' / > RowStyle= '' { StaticResource MyGridRowStyle } ''
"/// < summary > /// Page.FindControl is not recursive by default./// < /summary > /// < param name= '' root '' > Page < /param > /// < param name= '' id '' > ID of control looking for . < /param > /// < returns > The control if found , else null . < /returns > public static Control FindControlRecursive ( Control root , string id ) { if ( int.Equals ( root.ID , id ) ) { return root ; } foreach ( Control control in root.Controls ) { Control foundControl = FindControlRecursive ( control , id ) ; if ( ! object.Equals ( foundControl , null ) ) { return foundControl ; } } return null ; } protected void RadListBox_Dropped ( object sender , RadListBoxDroppedEventArgs e ) { //e.HtmlElementID is the UniqueID of the control I want to work upon . RadDockZone activeControlDockZone = Utilities.FindControlRecursive ( Page , e.HtmlElementID ) as RadDockZone ; }"
"MetadataSet metadataSet = new MetadataSet ( ) ; metadataSet.MetadataSections.Add ( MetadataSection.CreateFromServiceDescription ( System.Web.Services.Description.ServiceDescription.Read ( wsdlStream ) ) ) ; WsdlImporter importer = new WsdlImporter ( metadataSet ) ; if ( serviceDescription ! = null ) importer.WsdlDocuments.Add ( serviceDescription ) ; foreach ( XmlSchema nextSchema in schemas ) importer.XmlSchemas.Add ( nextSchema ) ; ServiceContractGenerator generator = new ServiceContractGenerator ( ) ; generator.Options = ServiceContractGenerationOptions.None ; foreach ( ContractDescription nextContract in importer.ImportAllContracts ( ) ) generator.GenerateServiceContractType ( nextContract ) ; if ( generator.Errors.Count ! = 0 ) throw new Exception ( `` Service assembly compile error : \r\n - `` + string.Join ( `` \r\n - `` , generator.Errors.Select ( e = > e.Message ) ) ) ; // Use generator.TargetCompileUnit to generate the code ..."
"var converter = new JsonSerializer ( ) ; converter.Converters.Add ( new DeviceCalibrationConverter ( ) ) ; // Obviously parameter.value and typeObj being the JSON and Type respectively// I can see stepping through this that these are , in fact , the correct valuesobject deserialized = converter.Deserialize ( new StringReader ( parameter.Value ) , typeObj ) ; public class DeviceCalibrationConverter : JsonConverter { public override bool CanConvert ( Type objectType ) { // I am trying to map the IDeviceCalibration interface to its concrete type ( DeviceCalibration ) return objectType.Equals ( typeof ( IDeviceCalibration ) ) ; } public override object ReadJson ( JsonReader reader , Type objectType , object existingValue , JsonSerializer serializer ) { return serializer.Deserialize ( reader , typeof ( DeviceCalibration ) ) ; } public override void WriteJson ( JsonWriter writer , object value , JsonSerializer serializer ) { serializer.Serialize ( writer , value ) ; } } System.ArgumentOutOfRangeException was unhandled HResult=-2146233086 Message=Version 's parameters must be greater than or equal to zero.Parameter name : build Source=mscorlib ParamName=build StackTrace : at System.Version..ctor ( Int32 major , Int32 minor , Int32 build , Int32 revision ) at Void .ctor ( Int32 , Int32 , Int32 , Int32 ) ( Object [ ] ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters ( JsonReader reader , JsonObjectContract contract , JsonProperty containerProperty , ObjectConstructor ` 1 creator , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject ( JsonReader reader , JsonObjectContract objectContract , JsonProperty containerMember , JsonProperty containerProperty , String id , Boolean & createdFromNonDefaultCreator ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue ( JsonProperty property , JsonConverter propertyConverter , JsonContainerContract containerContract , JsonProperty containerProperty , JsonReader reader , Object target ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject ( Object newObject , JsonReader reader , JsonObjectContract contract , JsonProperty member , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue ( JsonProperty property , JsonConverter propertyConverter , JsonContainerContract containerContract , JsonProperty containerProperty , JsonReader reader , Object target ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject ( Object newObject , JsonReader reader , JsonObjectContract contract , JsonProperty member , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize ( JsonReader reader , Type objectType , Boolean checkAdditionalContent ) at Newtonsoft.Json.JsonSerializer.DeserializeInternal ( JsonReader reader , Type objectType ) at Newtonsoft.Json.JsonSerializer.Deserialize ( TextReader reader , Type objectType ) at FunctionalTesting.ExecuteXMLScript.Execute ( ) in [ folder ] \ExecuteXMLScript.cs : line 141 at FunctionalTesting.TestRunner.RunTests ( ) in [ folder ] \TestRunner.cs : line 102 at FunctionalTesting.Program.Main ( String [ ] args ) in [ folder ] \Program.cs : line 43 at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at System.AppDomain.ExecuteAssembly ( String assemblyFile , Evidence assemblySecurity , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ThreadHelper.ThreadStart_Context ( Object state ) at System.Threading.ExecutionContext.RunInternal ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) InnerException : { `` State '' : '' needs-translation '' , '' OriginalString '' : '' LP '' , '' StringID '' : [ id ] , '' StringValue '' : '' LP '' } } ] , '' MarketingFeatures '' : null , `` CDIDriver '' { `` Name '' : '' [ Product Name ] '' , `` Version '' : { `` Major '' :1 , '' Minor '' :0 , '' Build '' : -1 , '' Revision '' : -1 , '' MajorRevision '' : -1 , '' MinorRevision '' : -1 } } { `` Major '' :1 , '' Minor '' :0 , '' Build '' : -1 , '' Revision '' : -1 , '' MajorRevision '' : -1 , '' MinorRevision '' : -1 } Version = new Version ( ( int ) major , ( int ) minor ) ; new Version ( 1 , 0 , 0 , 0 )"
"public static void Main ( ) { int size = 250000 ; var a = new int [ size ] ; for ( int i = 0 ; i < size ; i++ ) Console.WriteLine ( `` { 0 } '' , a [ i ] ) ; } public static void Main ( ) { int size = 250000 ; var a = new int [ size ] ; for ( int i = 0 ; i < size ; i++ ) Console.WriteLine ( `` 0 '' ) ; }"
< ListView x : Name= '' ListV '' ItemClick= '' ListV_ItemClick '' IsItemClickEnabled= '' True '' > < ListView.ItemsPanel > < ItemsPanelTemplate > < WrapGrid Orientation= '' Horizontal '' ItemWidth= '' 160 '' ItemHeight= '' 280 '' MaximumRowsOrColumns= '' 2 '' / > < /ItemsPanelTemplate > < /ListView.ItemsPanel > < ListView.ItemTemplate > < DataTemplate > < Grid Background= '' Red '' Margin= '' 12 '' Width= '' 100 '' Height= '' 100 '' > < /Grid > < /DataTemplate > < /ListView.ItemTemplate > < /ListView >
"void Synchronize ( string folderAPath , string folderBPath ) { //Code to synchronize the folders }"
"{ // google string url = `` # '' ; if ( value > 5 ) url = `` http : //google.com '' ; menu.Add ( new MenuItem ( url ) ) ; } { // cheese string url = `` # '' ; // url has to be redefined again , // so it ca n't accidently leak into the new menu item if ( value > 45 ) url = `` http : //cheese.com '' ; menu.Add ( new MenuItem ( url ) ) ; } string url = `` # '' ; // google if ( value > 5 ) url = `` http : //google.com '' ; menu.Add ( new MenuItem ( url ) ) ; // cheese url = `` # '' ; // now I need to remember to reset the url if ( value > 45 ) url = `` http : //cheese.com '' ; menu.Add ( new MenuItem ( url ) ) ;"
"public class SimplerAES { private static byte [ ] key = { 88 , 54 , 54 , 147 , 99 , 201 , 41 , 80 , 58 , 100 , 5 , 64 , 213 , 99 , 14 , 15 , 154 , 35 , 110 , 36 , 124 , 25 , 115 , 23 , 56 , 44 , 65 , 7 , 45 , 254 , 1 , 54 } ; private static byte [ ] vector = { 33 , 8 , 121 , 196 , 223 , 45 , 63 , 100 , 1 , 32 , 18 , 87 , 1 , 158 , 119 , 111 } ; private ICryptoTransform encryptor , decryptor ; private UTF8Encoding encoder ; public SimplerAES ( ) { RijndaelManaged rm = new RijndaelManaged ( ) ; encryptor = rm.CreateEncryptor ( key , vector ) ; decryptor = rm.CreateDecryptor ( key , vector ) ; encoder = new UTF8Encoding ( ) ; } public string Encrypt ( string unencrypted ) { return Convert.ToBase64String ( Encrypt ( encoder.GetBytes ( unencrypted ) ) ) ; } public string Decrypt ( string encrypted ) { return encoder.GetString ( Decrypt ( Convert.FromBase64String ( encrypted ) ) ) ; } public byte [ ] Encrypt ( byte [ ] buffer ) { MemoryStream encryptStream = new MemoryStream ( ) ; using ( CryptoStream cs = new CryptoStream ( encryptStream , encryptor , CryptoStreamMode.Write ) ) { cs.Write ( buffer , 0 , buffer.Length ) ; } return encryptStream.ToArray ( ) ; } public byte [ ] Decrypt ( byte [ ] buffer ) { MemoryStream decryptStream = new MemoryStream ( ) ; using ( CryptoStream cs = new CryptoStream ( decryptStream , decryptor , CryptoStreamMode.Write ) ) { cs.Write ( buffer , 0 , buffer.Length ) ; } return decryptStream.ToArray ( ) ; } } String MYCODE = `` 687b1ddf28e8d9d3141c3b5d8d4d1863964a614c74317e88a18a10c1c4723bed18d53c99eeb5f05b6646b10b63ae14166c81b06dd487103d133a06896ed9a125e8e2a9c54a2fec82ddd8abe4ef9bbe1b99664a8bc761db2ce70cd1dd9d6898e72490ccea73d7dab056e86cec23f39328b9eb3ef3ef7942db4122178b8a319971c6de2a5cb7e23dd5ba382525a7993122bf068d9d7ac189e701e1b2120b6f5747123e320f892a51df0ff38d7fef5c24d8914a9974d36183c4885582d2ce37023cbde2c23896e608754e81cf9faf70cd64fea5e930340e185fcfe1f457710a2e8b7c977b4c851f8fb4dd49ea53216dc8242ec6ac17e5256ab16170ac49a124a3972477e6bbfefbf1e1c1f84290e023fa2d7813e7761c9e2872c2d57e8d69be34c2cbb41fd75b81604ebf57dece4c9fd6b5bce441350cc4e2ca1bc78105ee554629ff6201745088a177859d168ffffb356fb2bb327de7495db77e07d9fcc9787fc4313a5118037f5828eb2ac7a006126b21b207eb22a369b3182d1f613b43a097d214650c6fd0af057f7836586b4f55342351e93fbb03f726982f4356c801342b6efe7a9fe29ba6770a61d29656725ed21c77a17fe61ffb6d9dea55bbd1ab9e70c1ce44fc82ed710550483ae3b6049aa7d24cc142f5d521bc8beaa36d2839fb82efe59aafa713659c3e902a65c27e8fa9712cd9d232ac65fbf20bef047371317bd60331f8b8b2971cc1ba2b5e854c3d0b072ad786deb40811dcdb335d2937a1ef86a5d0923294ed9eed758670856bbd89471e4940d6dbdae6d8e4cb10235645c2e23be442a4739d0a24a56b666828269704984621ba9761d47512e0804a3a20b0f7c15ff10036dedb4ad8f1149c028de5d726f9e62244fc22b45a5096736d6dd65e9afddd05234982818f7eccd35555805169cf1ef887bf06bc4cee729513c255ff3e41de5397e45212ca921e394bfd059f30cd3404a3a7e989e374239c22aca956e39d576838bed69551040095a4e070fdecd369b7be51ae30ad0a8c4d3c23c7678a7bb661a720e88d396218b0f37bea4f7959df498b7f2e59460b32735685b551f0fe74786a119ce9343ebd4c3f2efea11f02741a067300fe836ad7943577c56b22cf54964b6bf8be4b0a61c353be7fffe90166c5a1c667938878eace2046eb254fc65ef7a3c98c7877651e1cc735bb006d5ba9fdf5f5555345570a43adbe6a49ed714d79990f408f667ac2a624511b0fc1674bdff0cd02b11a2666cb76b39c84d5aeb2b32c3777f7f577495bdef2ac7cf8a119487c8a97a6c1ec8f5b775cd7059f7edd3d8da1764467058991d6a6c5b061fdbbc255103798d5d2e2d75eff80316b65abff2b9d1514f55e2db114e207ba6d41419924e9397404750a7822daa93c5055dbd3448f8d25550cae7daf8fea9d6ab51eff5f11e88dabe81a0030a775480bb694acf95ce4cf48497fd24272853a62e1af55c5ab4e2d058ebd04f053a01b86b7d87e0c1c8bae2ed3f3e5f2096d83569aef940331f29ed27656968880433b6a892b97239acef888afb9b4f4e3dcb4bb67823ce1e80f2068805145daacea016267dadbb78f437aaed32711dcc436f9a4997cc19eb797c10ca3c8c432b4fdf9c886bdc566f233400e202630925eb837c812c9ba95957ca7035056831d93ab16cd5c9095090e64b3f90d6ff709f732237dd41a3cebe371f7328b7bd3cbb6cf695f98c69b45e1999a3595bd12cc23f5f3cfcf13e355b7a3ea5b0bbc5c60142ae85829915f48d4ae0fc896ed8113e6062a7c6e54ac8470d0c8cc5b5e5e91d702a7b19af4a9b647e84db3ad1c5c65f2f450f99cdce1be4b3a3404070de4f45f36eb0acec358452c72c475ee69615614889737b698afab9472ab2cd12a543555dbe31199b8c188232a85bbbff925a6e8bac9e0c98fd8156b34b849dcbbcb9077018c5a1d5ca7b76fa5ba3e5fa5070c47d4a4e1723503500f1b63395d60fcf8eb551fb3aaac2a52763d89584951e6adcec46cde1e0e7dc0c511fc38a9cb92413c4f4eb54a803ff18e759a9aac56760ab97f1a25f7474561964e541fac9ae4c53d1728565bfe8007c2a015d9e7a2877891a829db9a3b70e91507f060362efe6f7d51573feadb7cedfab390a6a53e171e28b4c0582c2dd944d2b227b0d79f7484795bdbe15da65c3a60d859b10cc3b20614c827eff8d78bf5a64d86d5404c14b96bbd46c2ae176064feb5ef80b5147dae06faa34982b5835fe0562ce210c27abce2e15235cd530550f1927dc2b73f732b159391fbe186a670284a81a3e22d182b0587dda31429d296b486683d3b74205ce6a15102334c43c610c44841fad92ab9456340ef55fde6814ba11a0d069dd680b7b2c63aaa5b6a7d1ab119ebbfb2c5322ee950f94f9780652e258650b2991a62f9964a6534a16104de5463f1fb278b82690999c6ff48a3eed75ca7a619ab5ae4c3c2a66b4bc7d450f597aba119cfcb292f1a91032cc0a8f11f9baabd491fff0bcea62c72f8e30c87e58b769c5a5e1f6c7aca403ace859f199fb60381412d75703966c8adcef9a6938bde96d09376692a9bffe6ab4c31d7f71c8d959feadb0e532a3e6dd8f84d9e0f114d81bb3122ba2cbb9f59b636118a0d7a3c5f177329ccb50a049a60d6 '' xor_get_and_execute_original_code ( MYCODE , mykey ) ;"
"public class RouteConfig { public static void RegisterRoutes ( RouteCollection routes ) { routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; routes.MapRoute ( name : `` HelpRedirect '' , url : `` Help/ { *route } '' , defaults : new { controller = `` Help '' , action = `` ViewRedirect '' } ) ; routes.MapRoute ( name : `` AspxRoute '' , url : `` { controller } / { action } .aspx '' , defaults : new { controller = `` Home '' , action = `` Index '' , id = UrlParameter.Optional } ) ; routes.MapRoute ( name : `` ContactRoute '' , url : `` Contact.aspx '' , defaults : new { controller = `` Contact '' , action = `` Index '' , id = UrlParameter.Optional } ) ; routes.MapRoute ( name : `` Default '' , url : `` { controller } / { action } / { id } '' , defaults : new { controller = `` Home '' , action = `` Index '' , id = UrlParameter.Optional } ) ; } }"
get { throw new StackOverflowException ( ) ; // < Exception happened here } No Source Available Call Stack Location : PresentationFramework.dll ! MS.Internal.Data.PropertyPathWorker.RawValue ( int k ) + 0x64 bytes
var myTaskSceduler = new MyTaskScheduler ( 4 ) ; var taskFactory = new TaskFactory ( myTaskSceduler ) ; taskFactory.StartNew ( DoSomething ) ; Task.Factory.StartNew ( )
< ItemsControl x : Name= '' itemsControl '' ItemsSource= '' { Binding DataList } '' > < ItemsControl.ItemsPanel > < ItemsPanelTemplate > < StackPanel Orientation= '' Vertical '' / > < /ItemsPanelTemplate > < /ItemsControl.ItemsPanel > < ItemsControl.ItemTemplate > < DataTemplate > < Grid MinHeight= '' 250 '' > < ContentPresenter Content= '' { Binding } '' ContentTemplateSelector= '' { StaticResource chartSelector } '' > < ContentPresenter.Resources > < v : ColorProvider x : Key= '' colorProvider '' / > < /ContentPresenter.Resources > < /ContentPresenter > < /Grid > < /DataTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl >
"//Method designed to be awaitablepublic static Task < int > makeInt ( ) { return Task.Run ( ( ) = > 5 ) ; } //In practice , however , I do n't want to await each individual task//I want to await chunks of them at a time , which *should* be easy with Observable.Buffer public static void Main ( ) { //Make a bunch of tasks IEnumerable < Task < int > > futureInts = Enumerable.Range ( 1 , 100 ) .Select ( t = > makeInt ( ) ) ; //Is there a built in way to turn this into an Observable that I can then buffer ? IObservable < int > buffered = futureInts.TasksToObservable ( ) .Buffer ( 15 ) ; // ? ? ? ? buffered.Subscribe ( ints = > { Console.WriteLine ( ints.Count ( ) ) ; //Should be 15 } ) ; }"
public Task < int > AlexsMethod ( ) { < AlexsMethod > d__0 stateMachine = new < AlexsMethod > d__0 ( ) ; stateMachine. < > 4__this = this ; stateMachine. < > t__builder = AsyncTaskMethodBuilder < int > .Create ( ) ; stateMachine. < > 1__state = -1 ; stateMachine. < > t__builder.Start < < AlexsMethod > d__0 > ( ref stateMachine ) ; return stateMachine. < > t__builder.Task ; }
public class C1 { public C1 ( Type type ) { } // ... } public class C2 { public C2 ( C1 c1 ) { } // ... } // RegistrationcontainerBuilder.Register ( ? ? ? ) ; containerBuilder.Register < C2 > ( ) ;
"public ArticlePage ( ) { this.InitializeComponent ( ) ; //.. RegisterForShare ( ) ; } private void RegisterForShare ( ) { DataTransferManager dataTransferManager = DataTransferManager.GetForCurrentView ( ) ; dataTransferManager.DataRequested += new TypedEventHandler < DataTransferManager , DataRequestedEventArgs > ( this.ShareLinkHandler ) ; } private void ShareLinkHandler ( DataTransferManager sender , DataRequestedEventArgs e ) { DataRequest request = e.Request ; DataRequestDeferral defferal = request.GetDeferral ( ) ; request.Data.Properties.Title = this.article.Title ; request.Data.Properties.Description = this.article.Summary ; request.Data.SetWebLink ( new Uri ( this.article.UrlDomain ) ) ; defferal.Complete ( ) ; } private void ShareCommand_Click ( object sender , RoutedEventArgs e ) { DataTransferManager.ShowShareUI ( ) ; }"
var mImage = System.Drawing.Image.FromFile ( filename ) ;
"bool ? isActive = null ; string search = null ; DbSet < Maingroup > query = context.Set < Maingroup > ( ) ; var result = query.AsQueryable ( ) .HasProductsWithState ( isActive ) .HasChildrenWithName ( search ) .OrderBy ( x = > x.SortOrder ) .Select ( x = > new CatalogViewModel.MaingroupViewModel ( ) { Maingroup = x , Subgroups = x.Subgroups.AsQueryable ( ) .HasProductsWithState ( isActive ) .HasChildrenWithName ( search ) .OrderBy ( y = > y.SortOrder ) .Select ( y = > new CatalogViewModel.SubgroupViewModel ( ) { Subgroup = y , Products = y.Products.AsQueryable ( ) .HasProductsWithState ( isActive ) .HasChildrenWithName ( search ) .OrderBy ( z = > z.SortOrder ) .Select ( z = > new CatalogViewModel.ProductViewModel ( ) { Product = z } ) } ) } ) ; return new CatalogViewModel ( ) { Maingroups = await result.ToListAsync ( ) } ; return maingroups.Where ( x = > x.Subgroups.AsQueryable ( ) .HasProductsWithState ( state ) .Any ( ) ) as IQueryable < TEntity > ; public static class ProductServiceExtensions { public static IQueryable < TEntity > HasProductsWithState < TEntity > ( this IQueryable < TEntity > source , bool ? state ) { if ( source is IQueryable < Maingroup > maingroups ) { return maingroups.Where ( x = > x.Subgroups.AsQueryable ( ) .HasProductsWithState ( state ) .Any ( ) ) as IQueryable < TEntity > ; } else if ( source is IQueryable < Subgroup > subgroups ) { return subgroups.Where ( x = > x.Products.AsQueryable ( ) .HasProductsWithState ( state ) .Any ( ) ) as IQueryable < TEntity > ; } else if ( source is IQueryable < Product > products ) { return products.Where ( x = > x.IsActive == state ) as IQueryable < TEntity > ; } return source ; } public static IQueryable < TEntity > HasChildrenWithName < TEntity > ( this IQueryable < TEntity > source , string search ) { if ( source is IQueryable < Maingroup > maingroups ) { return maingroups.Where ( x = > search == null || x.Name.ToLower ( ) .Contains ( search ) || x.Subgroups.AsQueryable ( ) .HasChildrenWithName ( search ) .Any ( ) ) as IQueryable < TEntity > ; } else if ( source is IQueryable < Subgroup > subgroups ) { return subgroups.Where ( x = > search == null || x.Name.ToLower ( ) .Contains ( search ) || x.Products.AsQueryable ( ) .HasChildrenWithName ( search ) .Any ( ) ) as IQueryable < TEntity > ; } else if ( source is IQueryable < Product > products ) { return products.Where ( x = > search == null || x.Name.ToLower ( ) .Contains ( search ) ) as IQueryable < TEntity > ; } return source ; } } public class Maingroup { public long Id { get ; set ; } public string Name { get ; set ; } ... public virtual ICollection < Subgroup > Subgroups { get ; set ; } } public class Subgroup { public long Id { get ; set ; } public string Name { get ; set ; } public long MaingroupId { get ; set ; } public virtual Maingroup Maingroup { get ; set ; } ... public virtual ICollection < Product > Products { get ; set ; } } public class Product { public long Id { get ; set ; } public string Name { get ; set ; } public long SubgroupId { get ; set ; } public virtual Subgroup Subgroup { get ; set ; } ... public bool IsActive { get ; set ; } }"
[ DebuggerDisplay ( `` Text = { Text } '' ) ] class A { public string Text { get ; set ; } } [ DebuggerDisplay ( `` Property = { Property } '' ) ] class B { public A Property { get ; set ; } }
"struct Cur { private const double EPS = 0.00005 ; private double val ; Cur ( double val ) { this.val = Math.Round ( val , 4 ) ; } static Cur operator + ( Cur a , Cur b ) { return new Cur ( a.val + b.val ) ; } static Cur operator - ( Cur a , Cur b ) { return new Cur ( a.val - b.val ) ; } static Cur operator * ( Cur a , double factor ) { return new Cur ( a.val * factor ) ; } static Cur operator * ( double factor , Cur a ) { return new Cur ( a.val * factor ) ; } static Cur operator / ( Cur a , double factor ) { return new Cur ( a.val / factor ) ; } static explicit operator double ( Cur c ) { return Math.Round ( c.val , 4 ) ; } static implicit operator Cur ( double d ) { return new Cur ( d ) ; } static bool operator < ( Cur a , Cur b ) { return ( a.val - b.val ) < -EPS ; } static bool operator > ( Cur a , Cur b ) { return ( a.val - b.val ) > +EPS ; } static bool operator < = ( Cur a , Cur b ) { return ( a.val - b.val ) < = +EPS ; } static bool operator > = ( Cur a , Cur b ) { return ( a.val - b.val ) > = -EPS ; } static bool operator ! = ( Cur a , Cur b ) { return Math.Abs ( a.val - b.val ) < EPS ; } static bool operator == ( Cur a , Cur b ) { return Math.Abs ( a.val - b.val ) > EPS ; } bool Equals ( Cur other ) { return this == other ; } override int GetHashCode ( ) { return ( ( double ) this ) .GetHashCode ( ) ; } override bool Equals ( object o ) { return o is Cur & & this.Equals ( ( Cur ) o ) ; } override string ToString ( ) { return this.val.ToString ( `` C4 '' ) ; } } Currency a = 2.50 ; Console.WriteLine ( a * 2 ) ;"
try { } finally { ..some code here } try { ... some code here } finally { }
"[ DataContract ] public class FieldType { public static readonly FieldType Default = new FieldType ( 1 , `` Default '' ) ; public static readonly FieldType Name = new FieldType ( 2 , `` Name '' ) ; public static readonly FieldType Etc = new FieldType ( 3 , `` Etc '' ) ; private FieldType ( uint id , string name ) { Id = id ; Name = name ; } [ DataMember ] public uint Id { get ; private set ; } [ DataMember ] public string Name { get ; private set ; } //snip other properties }"
"foreach ( string type in typelist ) { IEnumerable < string > lst = from row in root.Descendants ( ) where row.Attribute ( `` serial '' ) .Value.Substring ( 0 , 3 ) .Equals ( type ) select row.Attribute ( `` serial '' ) .Value.Substring ( 3 ) .ToLower ( ) ; serialLists.Add ( type , lst ) ; }"
.assembly extern retargetable mscorlib { .publickeytoken = ( 7C EC 85 D7 BE A7 79 8E ) .ver 2:0:5:0 }
"public void QueryToDB ( string filter ) { this.BeginRefresh ( ) ; if ( string.IsNullOrWhiteSpace ( filter ) ) { this.ItemsSource = SourceData.Select ( x = > x.name ) ; // Source data is my default List of items } else { var t = App.DB_Instance.FilterWords < Words > ( filter ) ; //FilterWords it 's a method , where i make direct requests to the database this.ItemsSource = t.Select ( x = > x.name ) ; } this.EndRefresh ( ) ; } searchBar.TextChanged +=async ( sender , e ) = > { ViewModel.isBusy = true ; //also i got a indicator , to show progress , while query working await Task.Run ( ( ) = > //my background , works fine { listview.QueryToDB ( searchBar.Text ) ; } ) ; ViewModel.isBusy = false ; // after method is finished , indicator turn off } ;"
"object o = ( ( 1==2 ) ? 1 : `` test '' ) ; object o ; if ( 1 == 2 ) { o = 1 ; } else { o = `` test '' ; } int ? subscriptionID ; // comes in as a parameterEntityParameter p1 = new EntityParameter ( `` SubscriptionID '' , DbType.Int32 ) { Value = ( ( subscriptionID == null ) ? DBNull.Value : subscriptionID ) , }"
123456789someusername ( ? < = ( https ? : // ( www. ) ? facebook.com/ ( profile.php ? id= ) ? ) ) ( [ ^/ # ? ] + ) profile.phpsomeusername
"WeakEventManager < EventSource , SomeEventEventArgs > .AddHandler ( source , `` SomeEvent '' , source_SomeEvent ) ; public event EventHandler < EventArgs > LoggingOn ; public event EventHandler < EventArgs > LoggingOn_Weak { add { var eventName = this.GetEventName ( ( ) = > this.LoggingOn ) ; WeakEventManager < CurrentUser , EventArgs > .AddHandler ( this , eventName , value ) ; } remove { var eventName = this.GetEventName ( ( ) = > this.LoggingOn ) ; WeakEventManager < CurrentUser , EventArgs > .RemoveHandler ( this , eventName , value ) ; } } // In a base class view model in my scenarioprivate string GetEventName < T > ( System.Linq.Expressions.Expression < Func < T > > expression ) { return ( expression.Body as System.Linq.Expressions.MemberExpression ) .Member.Name ; } protected void OnLoggingOn ( object sender , EventArgs e ) { var handler = this.LoggingOn ; if ( handler ! = null ) { handler ( sender , e ) ; } }"
"MethodCall ( arg1 , out string arg2 ) ;"
"modelBuilder.Entity < Mail > ( ) .Property ( c = > c.SendTime ) .HasColumnType ( `` datetime2 '' ) ; protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { var genericEntityMethod = modelBuilder.GetType ( ) .GetMethod ( `` Entity '' ) ; var entityTypes = Assembly.GetExecutingAssembly ( ) .GetTypes ( ) .Where ( t = > t.IsClass & & ! t.IsAbstract & & t.GetInterface ( `` IEntity '' ) ! = null ) ; foreach ( var t in entityTypes ) { var props = t.GetProperties ( ) .Where ( p = > p.GetSetMethod ( ) ! = null & & p.GetGetMethod ( ) ! = null & & ( p.PropertyType == typeof ( DateTime ) || p.PropertyType == typeof ( DateTime ? ) ) ) ; foreach ( var propertyInfo in props ) { var entityMethod = genericEntityMethod.MakeGenericMethod ( t.GetType ( ) ) ; var entityTypeConfiguration = entityMethod.Invoke ( modelBuilder , null ) ; var lambdaExpression = Expression.Lambda ( Expression.MakeMemberAccess ( Expression.Parameter ( t ) , propertyInfo ) , Expression.Parameter ( t ) ) ; //var propertyMethod = entityTypeConfiguration.GetType ( ) .GetMethod ( `` Property '' ) ; // Cant get this to work var propertyMethods = entityTypeConfiguration.GetType ( ) .GetMethods ( ) .Where ( m = > m.ReturnType == typeof ( DateTimePropertyConfiguration ) ) .ToList ( ) ; var propertyMethod = propertyInfo.PropertyType == typeof ( DateTime ) ? propertyMethods [ 0 ] : propertyMethods [ 1 ] ; var dateTimePropertyConfiguration = propertyMethod.Invoke ( entityTypeConfiguration , new object [ ] { lambdaExpression } ) ; var hasColumnTypeMethod = entityTypeConfiguration.GetType ( ) .GetMethod ( `` HasColumnType '' ) ; hasColumnTypeMethod.Invoke ( dateTimePropertyConfiguration , new object [ ] { `` datetime2 '' } ) ; } } base.OnModelCreating ( modelBuilder ) ; } var dateTimePropertyConfiguration = propertyMethod.Invoke ( entityTypeConfiguration , new object [ ] { lambdaExpression } ) ; Object of type 'System.Linq.Expressions.Expression ` 1 [ System.Func ` 2 [ Entities.Order , System.Nullable ` 1 [ System.DateTime ] ] ] ' can not be converted to type 'System.Linq.Expressions.Expression ` 1 [ System.Func ` 2 [ System.RuntimeType , System.Nullable ` 1 [ System.DateTime ] ] ]"
< appSettings > < add key= '' dbHostAddress '' value= '' localhost '' / > < /appSettings > < connectionStrings > < add name= '' ConnectionString '' connectionString= '' Data Source=I WOULD LIKE TO ACCESS THE VALUE HERE ; Initial Catalog=Database ; Integrated Security=True ; Connect Timeout=15 '' / > < /connectionStrings >
// create filterHistogramEqualization filter = new HistogramEqualization ( ) ; // process imagefilter.ApplyInPlace ( sourceImage ) ;
"private void Camera_OnFrameReceived ( AVT.VmbAPINET.Frame frame ) { if ( frame.ReceiveStatus == VmbFrameStatusType.VmbFrameStatusComplete ) { if ( lastID ! = 0 & & lastID ! = 1 ) { if ( frame.FrameID - lastID > 1 ) Debug.WriteLine ( `` HEEEEYYY SKIPPED A FRAME , ID : `` + frame.FrameID.ToString ( ) + `` TOTAL LOST : `` + ( frame.FrameID - lastID - 1 ) .ToString ( ) ) ; } lastID = frame.FrameID ; //Debug.WriteLine ( `` Frame received from camera '' ) ; //if the camera is in single mode , dont raise the event ( frame already taken ) if ( Mode == CaptureMode.Single ) return ; //set the last frame _frameQueue.Enqueue ( frame ) ; if ( FilmFrameReady ! = null ) { DateTime dateTime = Accurate.DtNow ; frameTaken = false ; FilmFrameReady ( this , new FilmFrameReadyArgs ( this , dateTime ) ) ; } } }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Collections.Concurrent ; namespace Crystal_Message { class Message { private int messageID ; private string message ; private ConcurrentBag < Employee > messageFor ; private Person messageFrom ; private string calltype ; public Message ( int iden , string message , Person messageFrom , string calltype , string telephone ) { this.messageID = iden ; this.messageFor = new ConcurrentBag < Employee > ( ) ; this.Note = message ; this.MessageFrom = messageFrom ; this.CallType = calltype ; } public ConcurrentBag < Employee > ReturnMessageFor { get { return messageFor ; } } public int MessageIdentification { get { return this.messageID ; } private set { if ( value == 0 ) { throw new ArgumentNullException ( `` Must have Message ID '' ) ; } this.messageID = value ; } } public string Note { get { return message ; } private set { if ( string.IsNullOrWhiteSpace ( value ) ) { throw new ArgumentException ( `` Must Have a Message '' ) ; } this.message = value ; } } public Person MessageFrom { get { return messageFrom ; } private set { this.messageFrom = value ; } } public string CallType { get { return this.calltype ; } private set { if ( string.IsNullOrWhiteSpace ( value ) ) { throw new ArgumentNullException ( `` Please specify call type '' ) ; } this.calltype = value ; } } public void addEmployee ( Employee add ) { messageFor.Add ( add ) ; } public override string ToString ( ) { return `` Message : `` + this.message + `` From : `` + this.messageFrom + `` Call Type : `` + this.calltype + `` For : `` + this.returnMessagefor ( ) ; } private string returnMessagefor ( ) { string generate= '' '' ; foreach ( Employee view in messageFor ) { generate += view.ToString ( ) + `` `` ; } return generate ; } public override bool Equals ( object obj ) { if ( obj == null ) { return false ; } Message testEquals = obj as Message ; if ( ( System.Object ) testEquals == null ) { return false ; } return ( this.messageID == testEquals.messageID ) & & ( this.message == testEquals.message ) & & ( this.messageFor == testEquals.messageFor ) & & ( this.messageFrom == testEquals.messageFrom ) & & ( this.calltype == testEquals.calltype ) ; } public bool Equals ( Message p ) { if ( ( Object ) p == null ) { return false ; } return ( this.messageID == p.messageID ) & & ( this.message == p.message ) & & ( this.messageFor == p.messageFor ) & & ( this.messageFrom == p.messageFrom ) & & ( this.calltype == p.calltype ) ; } public override int GetHashCode ( ) { unchecked { return this.messageID.GetHashCode ( ) * 33 ^ this.message.GetHashCode ( ) * 33 ^ this.messageFor.GetHashCode ( ) * 33 ^ this.messageFrom.GetHashCode ( ) * 33 ^ this.calltype.GetHashCode ( ) ; } } } }"
"public T Prop = new Ctor ( Method ) ; private K Method ( U controller , V request ) ; public DataSource ( Func < ControllerBase , AjaxDataTable.Request , Result > dataSelector ) public AjaxDataTable < SourcesViewModel.Source.Channel > .DataSource AjaxData = new AjaxDataTable < SourcesViewModel.Source.Channel > .DataSource ( OnSelectData ) ; private AjaxDataTable < SourcesViewModel.Source.Channel > .DataSource ajaxData ; public AjaxDataTable < SourcesViewModel.Source.Channel > .DataSource AjaxData { get { if ( ajaxData == null ) { ajaxData = new AjaxDataTable < SourcesViewModel.Source.Channel > .DataSource ( OnDataSelector ) ; } return ajaxData ; } }"
if ( HashHelpers.IsPrime ( j ) & & ( j - 1 ) % 101 ! = 0 ) { return j ; }
var tasks = new List < Task > ( ) ; foreach ( var thing in things ) { tasks.Add ( Task.Run ( async ( ) = > { // async stuff using thing } ) ) ; } var stuffs = await Task.WhenAll ( tasks ) ; tasks.Add ( new Func < Task > ( async ( ) = > { async stuff } ) ( ) ) ;
"public class Article { public string Name { get ; set ; } public string Colour { get ; set ; } } var list = new List < Article > { new Article { Name = `` Article1 , Article2 , Article3 '' , Colour = `` Red '' } , new Article { Name = `` Article4 , Article5 , Article6 '' , Colour = `` Blue '' } , } var list = new List < Article > { new Article { Name = `` Article1 '' , Colour = `` Red '' } , new Article { Name = `` Article2 '' , Colour = `` Red '' } , new Article { Name = `` Article3 '' , Colour = `` Red '' } , new Article { Name = `` Article4 '' , Colour = `` Blue '' } , new Article { Name = `` Article5 '' , Colour = `` Blue '' } , new Article { Name = `` Article6 '' , Colour = `` Blue '' } , }"
"public class Base { public string getClassName ( ) { //using reflection , but I do n't want to have to type the word `` Base '' here . //in other words , DO NOT WANT get { return typeof ( Base ) .FullName ; } return className ; //which is the string `` Base '' } } public class Subclass : Base { //inherits getClassName ( ) , do not want to override } Subclass subclass = new Subclass ( ) ; string className = subclass.getClassName ( ) ; //className should be assigned `` Subclass ''"
"public enum DispatcherShimPriority { Background // ... } public interface DispaicherShim { void Invoke ( Action action , DispatcherShimPriority prio ) ; void BeginInvoke ( Action action , DispatcherShimPriority , prio ) ; } public class DispatcherCore : DispaicherShim ; public class DispatcherFramework : DispaicherShim ; public static DispaicherShim CreateDispatcher ( ) { # if NETCOREAPP2_0 return new DispatcherCore ( ) ; # else return new DispatcherFramework ( ) ; # endif }"
"var els = new EventLogSession ( ) ; els.ExportLogAndMessages ( `` Application '' , PathType.LogName , `` * [ System [ Provider [ @ Name='Prayon.Client ' ] ] ] '' , tempEventLogPath , false , CultureInfo.CurrentCulture ) ; System.Diagnostics.Eventing.Reader.EventLogException : Der Verzeichnisname ist ungültigbei System.Diagnostics.Eventing.Reader.EventLogException.Throw ( Int32 errorCode ) bei System.Diagnostics.Eventing.Reader.NativeWrapper.EvtArchiveExportedLog ( EventLogHandle session , String logFilePath , Int32 locale , Int32 flags ) bei System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages ( String path , PathType pathType , String query , String targetFilePath , Boolean tolerateQueryErrors , CultureInfo targetCultureInfo )"
[ AttributeUsage ( AttributeTargets.Method ) ] public class IgnoreIfInactiveAttribute : OnMethodBoundaryAspect { public override void OnEntry ( MethodExecutionEventArgs eventArgs ) { if ( condition ) { **// How can I make the method return here ? ** } } }
"@ using ( Html.BeginForm ( `` CreateJourney '' , `` Home '' , FormMethod.Post , new { @ class = `` custom '' , id= '' postJourneyForm '' , name= '' postJourneyForm '' , data-abide } ) )"
"private void loadNewAsyncToolStripMenuItem_Click ( object sender , EventArgs e ) { this.Text = `` RunWorkerAsync ( ) '' ; backgroundWorkerLoading.RunWorkerAsync ( ) ; } private void backgroundWorkerLoading_DoWork ( object sender , DoWorkEventArgs e ) { UnsafeThreadMethod ( `` hello '' ) ; EvenUnsaferThreadMethod ( ) ; } private void UnsafeThreadMethod ( string text ) { toolStripLabelRssFeedData.Text = text ; } private void EvenUnsaferThreadMethod ( ) { panelLoading.Visible = true ; } private void EvenUnsaferThreadMethod ( ) { if ( panelLoading.InvokeRequired ) { panelLoading.Invoke ( new MethodInvoker ( ( ) = > { EvenUnsaferThreadMethod ( ) ; } ) ) ; } else { panelLoading.Visible = true ; } }"
Runspace runspace = RunspaceFactory.CreateRunspace ( runspaceConfiguration ) ; runspace.Open ( ) ; RunspaceInvoke scriptInvoker = new RunspaceInvoke ( runspace ) ; Pipeline pipeline = runspace.CreatePipeline ( ) ; pipeline.Commands.AddScript ( @ '' Set-ExecutionPolicy AllSigned '' ) ; pipeline.Commands.AddScript ( @ '' Get-ExecutionPolicy '' ) ; pipeline.Commands.AddScript ( script ) ; Collection < PSObject > results = pipeline.Invoke ( ) ; using ( PowerShell ps = PowerShell.Create ( ) ) { ps.AddCommand ( `` Set-ExecutionPolicy '' ) .AddArgument ( `` Restricted '' ) ; ps.AddScript ( `` Set-ExecutionPolicy Restricted '' ) ; ps.AddScript ( script ) ; Collection < PSObject > results = ps.Invoke ( ) ; }
"[ Test ] public void Test_UrlQueryString ( ) { var urlInput = `` http : //www.domain.com/page-with-querystring ? url=https : //www.domain2.com/page % 3Fp % 3DPEPE '' ; var uri = new Uri ( urlInput ) ; Assert.AreEqual ( urlInput , uri.ToString ( ) ) ; } [ Test ] public void Test_Dot ( ) { var urlInput = `` http : //www.domain.com/page-with-dot . ? p=google '' ; var uri = new Uri ( urlInput ) ; Assert.AreEqual ( urlInput , uri.ToString ( ) ) ; } Runtime Environment - OS Version : Microsoft Windows NT 6.1.7601 Service Pack 1 CLR Version : 4.0.30319.18444 ( Net 4.5 ) ProcessModel : Default DomainUsage : SingleExecution Runtime : net-4.5 ... ... ... ... ... ... .F.F ... ... ... Tests run : 29 , Errors : 0 , Failures : 2 , Inconclusive : 0 , Time : 0.576769973208475 seconds Not run : 0 , Invalid : 0 , Ignored : 0 , Skipped : 0Errors and Failures : 1 ) Test Failure : Test.OrganicTest.Test_Dot Expected string length 45 but was 44 . Strings differ at index 35 . Expected : `` http : //www.domain.com/page-with-dot . ? p=google '' But was : `` http : //www.domain.com/page-with-dot ? p=google '' -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^ 2 ) Test Failure : Test.OrganicTest.Test_UrlQueryString Expected string length 87 but was 83 . Strings differ at index 76 . Expected : `` ... -with-querystring ? url=https : //www.domain2.com/page % 3Fp % 3DPEPE '' But was : `` ... -with-querystring ? url=https : //www.domain2.com/page ? p=PEPE '' -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ^"
"var funcType = typeof ( Func < > ) .MakeGenericType ( hiddenType ) ; Func < object > funcImplementation = ( ) = > GetInstance ( hiddenType ) ; var myFunc= Delegate.CreateDelegate ( funcType , valueGenerator.Method ) ;"
HttpClientHandler aHandler = new HttpClientHandler ( ) ; aHandler.ClientCertificateOptions = ClientCertificateOption.Automatic ; HttpClient aClient = new HttpClient ( aHandler ) ; HttpResponseMessage aResp = await aClient.GetAsync ( `` https : // [ azure service management uri ] '' ) ;
if ( Process.GetCurrentProcess ( ) .HasExited ) { // do something }
"info = new StockInfo { Name = data [ 0 ] as string , Status = s , LotSize = ( int ) data [ 1 ] , ISIN = data [ 2 ] as string , MinStep = ( decimal ) data [ 3 ] } ; new StockInfo ( data [ 0 ] as string , s , ( int ) data [ 1 ] , data [ 2 ] as string , ( decimal ) data [ 3 ] ) info = new StockInfo ( data [ 0 ] as string , // Name s , // Status ( int ) data [ 1 ] , // LotSize data [ 2 ] as string , // ISIN ( decimal ) data [ 3 ] // MinStep ) ;"
"static void Main ( string [ ] args ) { Process notePad = new Process ( ) ; notePad.StartInfo.FileName = `` notepad.exe '' ; notePad.Start ( ) ; IntPtr handle = notePad.Handle ; RECT windowRect = new RECT ( ) ; GetWindowRect ( handle , ref windowRect ) ; int width = windowRect.Right - windowRect.Left ; int height = windowRect.Bottom - windowRect.Top ; Console.WriteLine ( `` Height : `` + height + `` , Width : `` + width ) ; Console.ReadLine ( ) ; } [ DllImport ( `` user32.dll '' ) ] [ return : MarshalAs ( UnmanagedType.Bool ) ] static extern bool GetWindowRect ( IntPtr hWnd , ref RECT lpRect ) ; [ StructLayout ( LayoutKind.Sequential ) ] public struct RECT { public int Left ; // x position of upper-left corner public int Top ; // y position of upper-left corner public int Right ; // x position of lower-right corner public int Bottom ; // y position of lower-right corner }"
# Req1 -- -- > | set the value of the static field to req1 # Req2 -- -- > | set the value of the static field to req2 # Req1 | use that static its supposed to be req2 while its req1
using System ; using System.Collections.Generic ; using System.Text ; namespace ConsoleApplication1 { class A { int num ; public A ( ) { num = 0 ; } public A ( int x ) { num = x ; } public override int GetHashCode ( ) { return num + base.GetHashCode ( ) ; } } class B : A { int num ; public B ( ) { num = 0 ; } public B ( int x ) { num = x ; } public override int GetHashCode ( ) { return num + base.GetHashCode ( ) ; } } class Program { static void Main ( string [ ] args ) { A a = new A ( ) ; B b = new B ( ) ; Console.Write ( a.GetHashCode ( ) + `` `` + b.GetHashCode ( ) ) ; Console.Read ( ) ; } } }
abstract public class ShapeBase { private ShapeDetails _shapedDetails ; public CampusCardBase ( ShapeDetails shDetails ) { _shapedDetails= shDetails ; } public virtual void Draw ( ) ; public virtual float getWidth ( ) ; public virtual void Swap ( ) ; public virtual void Erase ( ) ; public sealed ShapeDetails getShapeDetails ( ) { return _shapedDetails ; } } ;
"struct Area { public static implicit operator Area ( double x ) { return new Area ( x ) ; } public static implicit operator double ( Area area ) { return area.x ; } private Area ( double x ) { this.x = x ; } private readonly double x ; } struct Length { public static implicit operator Length ( double x ) { return new Length ( x ) ; } public static implicit operator double ( Length length ) { return length.x ; } private Length ( double x ) { this.x = x ; } private readonly double x ; } Area CalculateAreaOfRectangleWith ( Length width , Length height ) Area a = 10.0 ; double aWithEvilPowers = a ; … = CalculateAreaOfRectangleWith ( ( double ) a , aWithEvilPowers ) ;"
var regex = new Regex ( @ '' ( ? : '' + mytext + @ '' \s ) ( ? < word > \b\S+\b ) '' ) ; var regex = new Regex ( @ '' ( ? : \S+\s ) ? \S* '' + mytext + @ '' \b\S '' ) ;
"private string [ ] GetArray ( Stream stream ) { BinaryFormatter binaryFormatter = new BinaryFormatter ( ) ; object result = binaryFormatter.Deserialize ( stream ) ; return ( string [ ] ) result ; } private string [ ] GetArray ( Stream stream ) { BinaryFormatter binaryFormatter = new BinaryFormatter ( ) ; MemoryStream memoryStream = new MemoryStream ( ) ; Copy ( stream , memoryStream ) ; memoryStream.Position = 0 ; object result = binaryFormatter.Deserialize ( memoryStream ) ; return ( string [ ] ) result ; }"
"emailUtil.sendEmail ( userId , `` foo '' ) ; public void sendEmail ( String userId , String message ) throws MailException { /* ... logic that could throw a MailException */ }"
"public class MyController : ApiController { [ HttpPost ] public UpdateFeatureResponse UpdateFeature ( UpdateFeatureResuest reqResuest ) { return new UpdateFeatureResponse { IsSuccess = true } ; } [ HttpPost ] public DeleteFeatureResponse DeleteFeature ( DeleteFeatureRequest request ) { return new DeleteFeatureResponse { IsSuccess = true } ; } } public class UpdateFeatureResuest { public int Id { get ; set ; } public string Feature { get ; set ; } } public class UpdateFeatureResponse { public bool IsSuccess { get ; set ; } } public class DeleteFeatureRequest { public int Id { get ; set ; } } public class DeleteFeatureResponse { public bool IsSuccess { get ; set ; } } config.Routes.MapHttpRoute ( name : `` DefaultApi '' , routeTemplate : `` api/ { controller } / { id } '' , defaults : new { id = RouteParameter.Optional } ) ;"
Process p = new Process ( ) ; p.StartInfo.UseShellExecute = false ; p.StartInfo.RedirectStandardOutput = true ; p.StartInfo.FileName = `` C : /Python31/python.exe '' ; p.Start ( ) ; string output = p.StandardOutput.ReadToEnd ( ) ; p.WaitForExit ( ) ; textBox1.Text = output ;
"private static List < AudioTrack > _playList = new List < AudioTrack > { new AudioTrack ( new Uri ( `` http : //198.50.156.4:8062/ ; '' , UriKind.RelativeOrAbsolute ) , `` Radio Vision '' , null , null , null , null , EnabledPlayerControls.All ) , new AudioTrack ( new Uri ( `` http : //live.radiocosmobandung.com . :8001/cosmo '' , UriKind.RelativeOrAbsolute ) , `` Ardan Cosmo '' , null , null , null , null , EnabledPlayerControls.All ) , } ;"
"IObservable < CrimeReport > reportSource = mainSource.Publish ( ) ; MainVM = new MainViewModel ( reportSource ) ; reportSource.Connect ( ) ; var cities = reportSource.GroupBy ( k = > k.City ) .Select ( g = > new CityDto ( g.Key , g ) ; internal class CityDto { public string CityName { get ; set ; } public IObservable < decimal > CityCqi { get ; set ; } public CityDto ( string cityName , IObservable < CrimeReport > cityReports ) { CityName = cityName ; // Get all serious and non serious crimes // var totalSeriousCrimes = cityReports.Where ( c = > c.Severity == CrimeSeverity.Serious ) .Scan ( 0 , ( p , _ ) = > p++ ) ; var totalnonSeriousCrimes = cityReports.Where ( c = > c.Severity == CrimeSeverity.NonSerious ) .Scan ( 0 , ( p , _ ) = > p++ ) ; // Get the ratio // var ratio = Observable.CombineLatest ( totalSeriousCrimes , totalnonSeriousCrimes , ( s , n ) = > n == 0 ? s : s/n ) ; // Avoding DivideByZero here // Get the minimum and maximum estimated solve time // var minEstimatedSolveTime = cityReports.Select ( c = > c.EstimatedSolveTime ) .Scan ( 5000 , ( p , n ) = > n < p ? n : p ) ; var maxEstimatedSolveTime = cityReports.Select ( c= > c.EstimatedSolveTime ) .Scan ( 0 , ( p , n ) = > n > p ? n : p ) ; //Time for the City 's CQI // CityCqi = Observable.CombineLatest ( ratio , minEstimatedSolveTime , maxEstimatedSolveTime , ( r , n , x ) = > r < 1.0 ? r * n : r * m ) ; } } internal class MainViewModel { public MainViewModel ( IObservable < CrimeReport > mainReport ) { /// Here is the snippet also mentioned in Step 2 // var cities = mainReport.GroupBy ( k = > k.City ) .Select ( g = > new CityDto ( g.Key , g ) ) ; ///// T h i s ///// Is //// Where //// I /// am /// Stuck // var allCqis = cities.Select ( c = > c.CityCqi ) ; // gives you IObservable < IObservable < decimal > > , /// Need to use latest of each observable in allCqi and sum them up //// How do I do it ? } } IObservable < IObservable < decimal > >"
public async Task < IList < Product > > GetProducts ( ) { HttpResponseMessage response = await client.GetAsync ( `` api/products '' ) ; string data = await response.Content.ReadAsStringAsync ( ) ; IList < Product > products = JsonConvert.DeserializeObject < IList < Product > > ( data ) ; return products ; } public Task < IList < Product > > GetProducts ( string name = null ) { return _repository.GetProducts ( name ) ; } public IActionResult Index ( ) { Task < IList < Product > > ProductsTask = _manager.GetProducts ( ) ; IList < Product > ProductsNonTask = products.Result.ToList ( ) ; return View ( ) ; } public IList < Product > GetProducts ( ) { Task < HttpResponseMessage > response = client.GetAsync ( `` api/products '' ) ; if ( response.Result.IsSuccessStatusCode ) { string data = response.Result.Content.ReadAsStringAsync ( ) .Result ; IList < Product > products = JsonConvert.DeserializeObject < IList < Product > > ( data ) ; retVal = products ; } }
"Expression < Func < object > > efn = Expression.Lambda < Func < object > > ( Expression.Convert ( ( plan , typeof ( object ) ) ) ; Func < object > fn = efn.Compile ( ) ; // Exception thrown here { Convert ( Query ( MyProjectNamespace.MyDatabaseTableObject ) .Provider ) .Execute ( new QueryCommand ( `` SELECT [ t0 ] . [ LinkId ] , [ t0 ] . [ Url ] FROM [ dbo ] . [ MyDatabaseTable ] AS t0 '' , value ( System.String [ ] ) , r0 = > new MyDatabaseTableObject ( ) { Id = IIF ( r0.IsDBNull ( 0 ) , 0 , Convert ( ChangeType ( r0.GetValue ( 0 ) , System.Int32 ) ) ) , Url = IIF ( r0.IsDBNull ( 1 ) , null , Convert ( ChangeType ( r0.GetValue ( 1 ) , System.String ) ) ) } , value ( System.Collections.Generic.List [ System.String ] ) ) , new [ ] { } ) } at System.Reflection.MethodBase.PerformSecurityCheck ( Object obj , RuntimeMethodHandle method , IntPtr parent , UInt32 invocationFlags ) at System.Reflection.RuntimeConstructorInfo.Invoke ( BindingFlags invokeAttr , Binder binder , Object [ ] parameters , CultureInfo culture ) at System.RuntimeType.CreateInstanceImpl ( BindingFlags bindingAttr , Binder binder , Object [ ] args , CultureInfo culture , Object [ ] activationAttributes ) at System.Activator.CreateInstance ( Type type , BindingFlags bindingAttr , Binder binder , Object [ ] args , CultureInfo culture , Object [ ] activationAttributes ) at System.Linq.Expressions.ExpressionCompiler.AddGlobal ( Type type , Object value ) at System.Linq.Expressions.ExpressionCompiler.GenerateConstant ( ILGenerator gen , Type type , Object value , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateConstant ( ILGenerator gen , ConstantExpression c , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateArgs ( ILGenerator gen , ParameterInfo [ ] pis , ReadOnlyCollection ` 1 args ) at System.Linq.Expressions.ExpressionCompiler.GenerateMethodCall ( ILGenerator gen , MethodInfo mi , ReadOnlyCollection ` 1 args , Type objectType ) at System.Linq.Expressions.ExpressionCompiler.GenerateMethodCall ( ILGenerator gen , MethodCallExpression mc , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateConvert ( ILGenerator gen , UnaryExpression u ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateConditional ( ILGenerator gen , ConditionalExpression b ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateMemberAssignment ( ILGenerator gen , MemberAssignment binding , Type objectType ) at System.Linq.Expressions.ExpressionCompiler.GenerateBinding ( ILGenerator gen , MemberBinding binding , Type objectType ) at System.Linq.Expressions.ExpressionCompiler.GenerateMemberInit ( ILGenerator gen , ReadOnlyCollection ` 1 bindings , Boolean keepOnStack , Type objectType ) at System.Linq.Expressions.ExpressionCompiler.GenerateMemberInit ( ILGenerator gen , MemberInitExpression init ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateLambda ( LambdaExpression lambda ) at System.Linq.Expressions.ExpressionCompiler.GenerateCreateDelegate ( ILGenerator gen , LambdaExpression lambda ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateArgs ( ILGenerator gen , ParameterInfo [ ] pis , ReadOnlyCollection ` 1 args ) at System.Linq.Expressions.ExpressionCompiler.GenerateNew ( ILGenerator gen , NewExpression nex , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateArgs ( ILGenerator gen , ParameterInfo [ ] pis , ReadOnlyCollection ` 1 args ) at System.Linq.Expressions.ExpressionCompiler.GenerateMethodCall ( ILGenerator gen , MethodInfo mi , ReadOnlyCollection ` 1 args , Type objectType ) at System.Linq.Expressions.ExpressionCompiler.GenerateMethodCall ( ILGenerator gen , MethodCallExpression mc , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateConvert ( ILGenerator gen , UnaryExpression u ) at System.Linq.Expressions.ExpressionCompiler.Generate ( ILGenerator gen , Expression node , StackType ask ) at System.Linq.Expressions.ExpressionCompiler.GenerateLambda ( LambdaExpression lambda ) at System.Linq.Expressions.ExpressionCompiler.CompileDynamicLambda ( LambdaExpression lambda ) at System.Linq.Expressions.Expression ` 1.Compile ( ) at SubSonic.Linq.Structure.DbQueryProvider.Execute ( Expression expression ) at SubSonic.Linq.Structure.QueryProvider.System.Linq.IQueryProvider.Execute ( Expression expression ) at SubSonic.Linq.Structure.Query ` 1.GetEnumerator ( ) at System.Collections.Generic.List ` 1..ctor ( IEnumerable ` 1 collection ) at System.Linq.Enumerable.ToList [ TSource ] ( IEnumerable ` 1 source ) at WebApplication1._Default.Page_Load ( Object sender , EventArgs e ) at System.Web.Util.CalliHelper.EventArgFunctionCaller ( IntPtr fp , Object o , Object t , EventArgs e ) at System.Web.Util.CalliEventHandlerDelegateProxy.Callback ( Object sender , EventArgs e ) at System.Web.UI.Control.OnLoad ( EventArgs e ) at System.Web.UI.Control.LoadRecursive ( ) at System.Web.UI.Page.ProcessRequestMain ( Boolean includeStagesBeforeAsyncPoint , Boolean includeStagesAfterAsyncPoint )"
"class RemoteServerContext : DbContext { public DbSet < Customer > Customers { get ; set ; } public DbSet < Order > Orders { get ; set ; } public DbSet < Contact > Contacts { get ; set ; } ... protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder.Entity < Customer > ( ) .ToTable ( `` vw_Customers '' ) ; modelBuilder.Entity < Order > ( ) .ToTable ( `` vw_Orders '' ) ; ... } } var customers = _repository.Customers ( ) .Where ( c = > c.Location == location ) .Where ( ... ) ; public IEnumerable < Customer > CustomersThatMatchACriteria ( string criteria1 , string criteria2 , ... ) //or an object passed in ! { return Database.SqlQuery < Customer > ( `` Exec pp_GetCustomersForCriteria @ crit1 = { 0 } , @ crit2 = { 1 } ... '' , criteria1 , criteria2 , ... ) ; }"
"ObservableCollection < SessionFile > files = /* some code */IEnumerable < Pattern > allFilePatterns= /*some query */foreach ( Pattern pattern in allFilePatterns ) { string iclFilePath = Path.Combine ( pattern.Location , pattern.Filename ) ; SessionFile sfile = new SessionFile ( iclFilePath , pattern.AnalysisDate ) ; SomeDelegate invoker = new SomeDelegate ( sfile.SomeHandler ) ; invoker.BeginInvoke ( allFilePatterns , null , null ) ; files.Add ( sfile ) ; } void SomeHandler ( IEnumerable < Pattern > allFilePatterns ) { foreach ( Pattern pattern in allFilePatterns ) { //some code } }"
x = 27 = 11011x > > 1= 13 = 1101x > > 2= 6 = 110x > > 3= 3 = 11
partial void OnValidate ( System.Data.Linq.ChangeAction action ) ;
"using ( var connection = _connectionProvider.GetDbConnection ( ) ) { connection.Open ( ) ; return connection.Query < Rate > ( query , parameters ) ; } select * from ( select top 1 BuildNumber , RateVersion , SampleId , Tariff , TariffStepName , Factor1 , Result1 from dbo.Rateswhere Tariff = 'Default ' and TariffStepName = 'I_P ' and ( RateVersion < = 1 ) and Factor1 = 'false ' and ( SampleId is null ) order by RateVersion desc , sampleId desc ) top1 System.Diagnostics.Debug.WriteLine ( ( new System.IO.StreamReader ( stream ) ) .ReadToEnd ( ) ) ; public class Rate { public string Tariff { get ; set ; } public string TariffStepName { get ; set ; } public string Factor1 { get ; set ; } public string Factor2 { get ; set ; } public string Factor3 { get ; set ; } public string Factor4 { get ; set ; } public string Factor5 { get ; set ; } public string Factor6 { get ; set ; } public string Factor7 { get ; set ; } public string Factor8 { get ; set ; } public string Factor9 { get ; set ; } public string Factor10 { get ; set ; } public decimal Result1 { get ; set ; } public decimal Result2 { get ; set ; } public decimal Result3 { get ; set ; } public decimal Result4 { get ; set ; } public decimal Result5 { get ; set ; } public decimal Result6 { get ; set ; } public decimal Result7 { get ; set ; } public decimal Result8 { get ; set ; } public decimal Result9 { get ; set ; } public decimal Result10 { get ; set ; } public string TextResult1 { get ; set ; } public string TextResult2 { get ; set ; } public string TextResult3 { get ; set ; } public string TextResult4 { get ; set ; } public string TextResult5 { get ; set ; } public int ? SampleId { get ; set ; } public int BuildNumber { get ; set ; } public decimal ? RateVersion { get ; set ; } } CREATE TABLE dbo . [ Rates ] ( [ BuildNumber ] [ int ] NOT NULL , [ Tariff ] [ varchar ] ( 30 ) NOT NULL , [ TariffStepName ] [ varchar ] ( 60 ) NOT NULL , [ Factor1 ] [ varchar ] ( 50 ) NOT NULL , [ Factor2 ] [ varchar ] ( 50 ) NULL , [ Factor3 ] [ varchar ] ( 50 ) NULL , [ Factor4 ] [ varchar ] ( 50 ) NULL , [ Factor5 ] [ varchar ] ( 50 ) NULL , [ Factor6 ] [ varchar ] ( 50 ) NULL , [ Factor7 ] [ varchar ] ( 50 ) NULL , [ Factor8 ] [ varchar ] ( 50 ) NULL , [ Factor9 ] [ varchar ] ( 50 ) NULL , [ Factor10 ] [ varchar ] ( 50 ) NULL , [ Result1 ] [ varchar ] ( 50 ) NULL , [ Result2 ] [ decimal ] ( 19 , 6 ) NULL , [ Result3 ] [ decimal ] ( 19 , 6 ) NULL , [ Result4 ] [ decimal ] ( 19 , 6 ) NULL , [ Result5 ] [ decimal ] ( 19 , 6 ) NULL , [ Result6 ] [ decimal ] ( 19 , 6 ) NULL , [ Result7 ] [ decimal ] ( 19 , 6 ) NULL , [ Result8 ] [ decimal ] ( 19 , 6 ) NULL , [ Result9 ] [ decimal ] ( 19 , 6 ) NULL , [ Result10 ] [ decimal ] ( 19 , 6 ) NULL , [ RateVersion ] [ decimal ] ( 18 , 2 ) NULL , [ SampleId ] [ int ] NULL , [ TextResult1 ] [ varchar ] ( 50 ) NULL , [ TextResult2 ] [ varchar ] ( 50 ) NULL , [ TextResult3 ] [ varchar ] ( 50 ) NULL , [ TextResult4 ] [ varchar ] ( 50 ) NULL , [ TextResult5 ] [ varchar ] ( 50 ) NULL ) exec sp_executesql N'select * from ( select top 1 BuildNumber , RateVersion , SampleId , Tariff , TariffStepName , Factor1 , Result1 from dbo.Rateswhere Tariff = @ Tariff and TariffStepName = @ TariffStepName and ( RateVersion < = @ RV ) and Factor1 = @ Factor1 and ( SampleId is null ) order by RateVersion desc , sampleId desc ) top1 ' , N ' @ Tariff varchar ( 50 ) , @ TariffStepName varchar ( 50 ) , @ RV decimal ( 3,2 ) , @ Factor1 bit ' , @ Tariff='Default ' , @ TariffStepName='I_P ' , @ RV=1.00 , @ Factor1=0go"
< PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Debug|AnyCPU ' `` > < DebugSymbols > true < /DebugSymbols > < DebugType > full < /DebugType > < Optimize > false < /Optimize > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE ; DEBUG ; SkipPostSharp < /DefineConstants > < ErrorReport > prompt < /ErrorReport > < WarningLevel > 4 < /WarningLevel > < ExcludeGeneratedDebugSymbol > false < /ExcludeGeneratedDebugSymbol > < PlatformTarget > AnyCPU < /PlatformTarget > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Dev|AnyCPU ' '' > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE < /DefineConstants > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Test|AnyCPU ' '' > < DebugSymbols > true < /DebugSymbols > < DebugType > full < /DebugType > < Optimize > false < /Optimize > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE ; DEBUG ; SkipPostSharp < /DefineConstants > < ErrorReport > prompt < /ErrorReport > < WarningLevel > 4 < /WarningLevel > < ExcludeGeneratedDebugSymbol > false < /ExcludeGeneratedDebugSymbol > < PlatformTarget > AnyCPU < /PlatformTarget > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Stage|AnyCPU ' '' > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE < /DefineConstants > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Prod|AnyCPU ' '' > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE < /DefineConstants > < /PropertyGroup > < PropertyGroup Condition= '' ' $ ( Configuration ) | $ ( Platform ) ' == 'Release|AnyCPU ' '' > < OutputPath > bin\ < /OutputPath > < DefineConstants > TRACE < /DefineConstants > < /PropertyGroup >
"void Main ( ) { var result = Operation ( ) ; var str = result .MapLeft ( failure = > $ '' An error has ocurred { failure } '' ) .Reduce ( resource = > resource.Data ) ; Console.WriteLine ( str ) ; } Either < Failed , Resource > Operation ( ) { return new Right < Failed , Resource > ( new Resource ( `` Success '' ) ) ; } class Failed { } class NotFound : Failed { } class Resource { public string Data { get ; } public Resource ( string data ) { this.Data = data ; } } public abstract class Either < TLeft , TRight > { public abstract Either < TNewLeft , TRight > MapLeft < TNewLeft > ( Func < TLeft , TNewLeft > mapping ) ; public abstract Either < TLeft , TNewRight > MapRight < TNewRight > ( Func < TRight , TNewRight > mapping ) ; public abstract TLeft Reduce ( Func < TRight , TLeft > mapping ) ; } public class Left < TLeft , TRight > : Either < TLeft , TRight > { TLeft Value { get ; } public Left ( TLeft value ) { this.Value = value ; } public override Either < TNewLeft , TRight > MapLeft < TNewLeft > ( Func < TLeft , TNewLeft > mapping ) = > new Left < TNewLeft , TRight > ( mapping ( this.Value ) ) ; public override Either < TLeft , TNewRight > MapRight < TNewRight > ( Func < TRight , TNewRight > mapping ) = > new Left < TLeft , TNewRight > ( this.Value ) ; public override TLeft Reduce ( Func < TRight , TLeft > mapping ) = > this.Value ; } public class Right < TLeft , TRight > : Either < TLeft , TRight > { TRight Value { get ; } public Right ( TRight value ) { this.Value = value ; } public override Either < TNewLeft , TRight > MapLeft < TNewLeft > ( Func < TLeft , TNewLeft > mapping ) = > new Right < TNewLeft , TRight > ( this.Value ) ; public override Either < TLeft , TNewRight > MapRight < TNewRight > ( Func < TRight , TNewRight > mapping ) = > new Right < TLeft , TNewRight > ( mapping ( this.Value ) ) ; public override TLeft Reduce ( Func < TRight , TLeft > mapping ) = > mapping ( this.Value ) ; } void Main ( ) { var result = Evaluate ( ) ; Console.WriteLine ( result ) ; } int Evaluate ( ) { var result = Op1 ( ) + Op2 ( ) ; return result ; } int Op1 ( ) { Throw.ExceptionRandomly ( `` Op1 failed '' ) ; return 1 ; } int Op2 ( ) { Throw.ExceptionRandomly ( `` Op2 failed '' ) ; return 2 ; } class Throw { static Random random = new Random ( ) ; public static void ExceptionRandomly ( string message ) { if ( random.Next ( 0 , 3 ) == 0 ) { throw new InvalidOperationException ( message ) ; } } }"
< ItemGroup > < ! -- Manually added reference to F # projects to overcome issue discussed here : http : //stackoverflow.com/questions/23111782/how-do-i-add-a-reference-to-f-portable-library-from-c-sharp-portable-class-libr -- > < ProjectReference Include= '' ..\FS_PL\FS_PL.fsproj '' > < Project > { 2c4b1776-3d34-4534-8520-8a1e6daa0e6e } < /Project > < Name > FS_PL < /Name > < /ProjectReference > < ProjectReference Include= '' ..\FS_PL_Legacy\FS_PL_Legacy.fsproj '' > < Project > { 0d7b657c-906b-4448-ae64-2153a1fa910c } < /Project > < Name > FS_PL_Legacy < /Name > < /ProjectReference > < /ItemGroup >
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < Product xmlns= '' http : //schemas.microsoft.com/developer/2004/01/bootstrapper '' ProductCode= '' My.Bootstrapper.ABC '' > < ! -- Create Package , Product Manifest http : //msdn.microsoft.com/en-us/library/ee335702.aspx Schema Reference : http : //msdn.microsoft.com/en-us/library/ms229223.aspx -- > < PackageFiles > < PackageFile Name= '' XYZ.exe '' / > < /PackageFiles > < InstallChecks > < ! -- If its installed , it will be in Uninstall . DisplayName will be XYZ2.1_rc22 Can still get values of DisplayVersion ( 2.1_rc22 ) & UninstallString from this key -- > < RegistryCheck Property= '' IS_XYZ_INSTALLED '' Key= '' HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\XYZ '' Value= '' DisplayName '' / > < /InstallChecks > < Commands > < Command PackageFile= '' XYZ.exe '' Arguments= '' /Install '' > < InstallConditions > < BypassIf Property= '' IS_XYZ_INSTALLED '' Compare= '' ValueEqualTo '' Value= '' XYZ2.1_rc22 '' / > // tHIS IS THE DISPLAYNAME , THAT I SEE IN REGISTY < FailIf Property= '' AdminUser '' Compare= '' ValueNotEqualTo '' Value= '' True '' String= '' NotAnAdmin '' / > < /InstallConditions > < ExitCodes > < ExitCode Value= '' 0 '' Result= '' Success '' / > < ExitCode Value= '' 1641 '' Result= '' SuccessReboot '' / > < ExitCode Value= '' 3010 '' Result= '' SuccessReboot '' / > < DefaultExitCode Result= '' Fail '' String= '' GeneralFailure '' / > < /ExitCodes > < /Command > < /Commands > < /Product > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < Package xmlns= '' http : //schemas.microsoft.com/developer/2004/01/bootstrapper '' Name= '' DisplayName '' Culture= '' Culture '' > < ! -- Check for XYZversion 2.1_rc22 -- > < Strings > < String Name= '' DisplayName '' > Install My XYZ < /String > < String Name= '' Culture '' > en < /String > < String Name= '' NotAnAdmin '' > Administrator permissions are required to install XYZ.Contact your administrator. < /String > < String Name= '' GeneralFailure '' > A general error has occurred while installing this package. < /String > < /Strings > < /Package >"
Parent { List < Child > Children { get ; set ; } } Child { int Age { get ; set ; } } parents.OrderBy ( p = > p.Children.Min ( c = > c.Age ) )
"public async Task < ActionResult > Index ( ) { ValidateRoleAccess ( Roles.Admin , Roles.AuthorizedUser , Roles.AuditReadOnly ) ; var test1 = System.Web.HttpContext.Current ! = null var decisions = await _lookupService.GetAllDecisions ( ) ; var test2 = System.Web.HttpContext.Current ! = null var statuses = await _lookupService.GetAllEnquiryStatuses ( ) ; var test3 = System.Web.HttpContext.Current ! = null var eeoGroups = await _lookupService.GetEEOGroups ( ) ; var test4 = System.Web.HttpContext.Current ! = null var subCategories = await _lookupService.GetEnquiryTypeSubCategories ( ) ; var test5 = System.Web.HttpContext.Current ! = null var paystreams = await _lookupService.GetPaystreams ( ) ; var test6 = System.Web.HttpContext.Current ! = null var hhses = await _lookupService.GetAllHHS ( ) ; var test7 = System.Web.HttpContext.Current ! = null // ... var decisions = await _lookupService.GetAllDecisions ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; decisions = await _lookupService.GetAllDecisions ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; decisions = await _lookupService.GetAllDecisions ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; var eeoGroups = _lookupService.GetEEOGroups ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; eeoGroups = _lookupService.GetEEOGroups ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; eeoGroups = _lookupService.GetEEOGroups ( ) ; results.Add ( System.Web.HttpContext.Current ! = null ) ; public async Task < List < string > > GetEEOGroups ( ) { return await _dbContext.EmployeeEEOGroup.GroupBy ( e = > e.EEOGroup ) .Select ( g = > g.FirstOrDefault ( ) .EEOGroup ) .ToListAsync ( ) ; } public async Task < IEnumerable < SapHHS > > GetAllHHS ( ) { return await _dbContext.HHS.Where ( x = > x.IsActive ) .ToListAsync ( ) ; } public async Task < IEnumerable < Decision > > GetAllDecisions ( ) { return await Task.FromResult ( _repository.Session.QueryOver < Lookup > ( ) .Where ( l = > l.Type == `` Decision '' & & l.IsActive ) .List ( ) .Select ( l = > new Decision { DecisionId = l.Id , Description = l.Name } ) .ToList ( ) ) ; }"
AntlrInputStream inputStream = new AntlrInputStream ( sSpinTexte ) ; SpinParserLexer SpinLexer = new SpinParserLexer ( inputStream ) ; CommonTokenStream commonTokenStream = new CommonTokenStream ( SpinLexer ) ; SpinParserParser SpinParser = new SpinParserParser ( commonTokenStream ) ; IParseTree tree = ? ? ? ? ?
"private void removeUnRedCellsBtn_Click ( object sender , EventArgs e ) { byte threshold = Convert.ToByte ( diffTxtBox.Text ) ; byte r , g , b ; for ( int i = 0 ; i < m_Bitmap.Width ; i++ ) { for ( int j = 0 ; j < m_Bitmap.Height ; j++ ) { r = im_matrix [ i , j ] .R ; g = im_matrix [ i , j ] .G ; b = im_matrix [ i , j ] .B ; if ( ( r - b ) < threshold || ( r - g ) < threshold ) { m_Bitmap.SetPixel ( i , j , Color.White ) ; } } } pictureArea_PictureBox.Image = m_Bitmap ; }"
public interface IExample { void Foo ( ) ; Task FooAsync ( ) ; } public class Thing { public Thing ( IExample example ) { if ( DateTime.Now.Hours > 5 ) example.Foo ( ) ; else example.FooAsync ( ) .Wait ( ) ; } } [ TestFixture ] public class Test { [ Test ] public void VerifyFooOrFooAsyncCalled ( ) { var mockExample = new Mock < IExample > ( ) ; new Thing ( mockExample.Object ) ; //use mockExample to verify either Foo ( ) or FooAsync ( ) was called //is there a better way to do this then to catch the exception ? ? ? try { mockExample.Verify ( e = > e.Foo ( ) ) ; } catch { mockExample.Verify ( e = > e.FooAsync ( ) ; } } }
"public interface IRecurrencePattern { string Data { get ; set ; } } public class RecurrencePattern : IRecurrencePattern { public string Data { get ; set ; } } public class DbRecurPatt { public string Name { get ; set ; } public string Description { get ; set ; } public static implicit operator RecurrencePattern ( DbRecurPatt obj ) { return new RecurrencePattern ( ) { Data = $ '' { Name } - { Description } '' } ; } } var unsorted = new List < DbRecurPatt > { new DbRecurPatt ( ) , new DbRecurPatt ( ) } ; var sorted = unsorted.Select ( t = > ( IRecurrencePattern ) t ) ; var sorted = unsorted.Select ( t = > ( IRecurrencePattern ) ( RecurrencePattern ) t ) ;"
"public string ShadowCopyFiles { get { return this.Value [ 8 ] ; } set { if ( value ! = null & & string.Compare ( value , `` true '' , StringComparison.OrdinalIgnoreCase ) == 0 ) this.Value [ 8 ] = value ; else this.Value [ 8 ] = ( string ) null ; } } public bool ShadowCopyFiles { get { String s = FusionStore.ShadowCopyFiles ; if ( ( s ! = null ) & & ( String.Compare ( s , `` true '' , StringComparison.OrdinalIgnoreCase ) == 0 ) ) return true ; else return false ; } }"
"public class AsyncMediatorPipeline < TRequest , TResponse > : IAsyncRequestHandler < TRequest , TResponse > where TRequest : IAsyncRequest < TResponse > { private readonly IAsyncRequestHandler < TRequest , TResponse > inner ; private readonly IAsyncPreRequestHandler < TRequest > [ ] preRequestHandlers ; private readonly IAsyncPostRequestHandler < TRequest , TResponse > [ ] postRequestHandlers ; public AsyncMediatorPipeline ( IAsyncRequestHandler < TRequest , TResponse > inner , IAsyncPreRequestHandler < TRequest > [ ] preRequestHandlers , IAsyncPostRequestHandler < TRequest , TResponse > [ ] postRequestHandlers ) { this.inner = inner ; this.preRequestHandlers = preRequestHandlers ; this.postRequestHandlers = postRequestHandlers ; } public async Task < TResponse > Handle ( TRequest message ) { foreach ( var preRequestHandler in preRequestHandlers ) { await preRequestHandler.Handle ( message ) ; } var result = await inner.Handle ( message ) ; foreach ( var postRequestHandler in postRequestHandlers ) { await postRequestHandler.Handle ( message , result ) ; } return result ; } } builder.RegisterAssemblyTypes ( Assembly.GetExecutingAssembly ( ) ) .As ( type = > type.GetInterfaces ( ) .Where ( type = > type.IsClosedTypeOf ( typeof ( IAsyncPreRequestHandler < > ) ) ) ) .InstancePerLifetimeScope ( ) ; public class ClientEditorFormIdentifierValidationHandler : IAsyncPreRequestHandler < AddOrEditClientCommand > { } public class AddOrEditClientCommand : IAsyncRequest < ICommandResult > { } public interface IAsyncRequest < out TResponse > { }"
"int SomeField ; void Foo ( [ Pure ] Func < int , object > getData ) { Contract.Requires ( getData ! = null ) ; Contract.Requires ( getData ( this.SomeField ) ! = null ) ; }"
using System ; public abstract class Response { } public abstract class Request < T > where T : Response { } public class LoginResponse : Response { } public class LoginRequest : Request < LoginResponse > { } public class Program { static void Main ( string [ ] args ) { LoginRequest login = new LoginRequest ( ) ; /* Error : Can not implicitly convert type 'LoginRequest ' to 'Request ' */ Request < Response > castTest = login ; /* No Error */ Request < LoginResponse > castTest2 = login ; } }
public struct Foo { public string Name { get ; private set ; } public Foo ( string name ) : this ( ) { Contract.Requires < ArgumentException > ( name.StartsWith ( `` A '' ) ) ; Name = name ; } } type Foo ( name : string ) = do Contract.Requires < ArgumentException > ( name.StartsWith `` A '' ) member x.Name = name [ < Struct > ] type Foo = val Name : string new ( name : string ) = { do Contract.Requires < ArgumentException > ( name.StartsWith `` A '' ) ; Name = name }
"public class OrderCalculator : IOrderCalculator { private IExchangeRate _exchangeRate ; public OrderCalculator ( IExchangeRate exchangeRate ) { _exchangeRate = exchangeRate ; } public decimal CalculateOrderTotal ( Order newOrder ) { var total = 0m ; foreach ( var item in newOrder.Items ) { total += item.Price * _exchangeRate.GetRate ( ) ; } return total ; } } public class ExchangeRate : IExchangeRate { private RunTimeClass _runtimeValue ; public ExchangeRate ( RunTimeClass runtimeValue ) { _runtimeValue = runtimeValue ; } public decimal GetRate ( ) { //returns the rate according to _runtimeValue if ( _runtimeValue == 1 ) return 15.3m ; else if ( _runtimeValue == 2 ) return 9.9m else return 30m ; } } //WCF Servicepublic decimal GetTotalForOrder ( Order newOrder , RunTimeClass runtimeValue ) { //I would like to pass the runtimeValue when resolving the IOrderCalculator depedency using a dictionary or something //Something like this ObjectFactory.Resolve ( runtimeValue ) ; IOrderCalculator calculator = ObjectFactory.Resolve ( ) ; return calculator.CalculateOrderTotal ( newOrder ) ; }"
"public class Person { public string Name { get ; set ; } public IEnumerable < PersonLocation > Locations { get ; set ; } public IEnumerable < PersonEducation > Educations { get ; set : } } public class PersonLocation { public string Name { get ; set ; } public string Floor { get ; set ; } public string Extension { get ; set ; } } public class PersonEducation { public string SchoolName { get ; set ; } public string GraduationYear { get ; set ; } } IEnumerable < Person > people = GetAllPeople ( ) ; GetFilteredResults ( people , `` Location.Name '' , `` San Francisco '' ) ; GetFilteredResults ( people , `` Location.Floor '' , `` 17 '' ) ; GetFilteredResults ( people , `` Educations.SchoolName '' , `` Northwestern '' ) ; string [ ] modelPropertyParts = ModelProperty.Split ( ' . ' ) ; var prop = typeof ( Person ) .GetProperty ( modelPropertyParts [ 0 ] ) ; var sourceParam = Expression.Parameter ( typeof ( Person ) , `` person '' ) ; var expression = Expression.Equal ( Expression.PropertyOrField ( sourceParam , modelPropertyParts [ 0 ] ) , Expression.Constant ( option.Name ) ) ; var whereSelector = Expression.Lambda < Func < Person , bool > > ( orExp , sourceParam ) ; return people.Where ( whereSelector.Compile ( ) ) ; /*i.e . modelPropertyParts [ 0 ] = Locations & modelPropertyParts [ 1 ] = Name */string [ ] modelPropertyParts = ModelProperty.Split ( ' . ' ) ; var interiorProperty = prop.PropertyType.GetGenericArguments ( ) [ 0 ] ; var interiorParameter = Expression.Parameter ( interiorProperty , `` personlocation '' ) ; var interiorField = Expression.PropertyOrField ( interiorParameter , modelPropertyParts [ 1 ] ) ; var interiorExpression = Expression.Equal ( interiorField , Expression.Constant ( Value ) ) ; var innerLambda = Expression.Lambda < Func < PersonLocation , bool > > ( interiorExpression , interiorParameter ) ; var outerParameter = Expression.Parameter ( typeof ( Person ) , `` person '' ) ; var outerField = Expression.PropertyOrField ( outerParameter , modelPropertyParts [ 0 ] ) ; var outerExpression = ? ? var outerLambda == ? ? return people.Where ( outerLambda.Compile ( ) ) ;"
public IEnumerable < T > Unfold < T > ( this T seed ) { while ( true ) { yield return [ next ( T ) object in custom sequence ] ; } }
"< parameter > < parameterName value= '' @ message '' / > < dbType value= '' String '' / > < size value= '' 8000 '' / > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % message '' / > < /layout > < /parameter > < parameter > < parameterName value= '' @ exception '' / > < dbType value= '' String '' / > < size value= '' 8000 '' / > < layout type= '' log4net.Layout.ExceptionLayout '' / > < /parameter > [ Message ] [ nvarchar ] ( max ) NULL , [ Exeception ] [ ntext ] NULL ,"
"public class AggregateSystem { // stack to store each particle in aggregate private readonly Stack < AggregateParticle > particle_stack ; private readonly GeometryModel3D particle_model ; // positions , indices and texture co-ordinates for particles private readonly Point3DCollection particle_positions ; private readonly Int32Collection triangle_indices ; private readonly PointCollection text_coords ; // brush to apply to particle_model.Material private RadialGradientBrush rad_brush ; // ellipse for rendering private Ellipse ellipse ; private RenderTargetBitmap render_bitmap ; public AggregateSystem ( ) { particle_stack = new Stack < AggregateParticle > ( ) ; particle_model = new GeometryModel3D { Geometry = new MeshGeometry3D ( ) } ; ellipse = new Ellipse { Width = 32.0 , Height = 32.0 } ; rad_brush = new RadialGradientBrush ( ) ; // fill ellipse interior using rad_brush ellipse.Fill = rad_brush ; ellipse.Measure ( new Size ( 32,32 ) ) ; ellipse.Arrange ( new Rect ( 0,0,32,32 ) ) ; render_bitmap = new RenderTargetBitmap ( 32,32,96,96 , PixelFormats.Pbgra32 ) ) ; ImageBrush img_brush = new ImageBrush ( render_bitmap ) ; DiffuseMaterial diff_mat = new DiffuseMaterial ( img_brush ) ; particle_model.Material = diff_mat ; particle_positions = new Point3DCollection ( ) ; triangle_indices = new Int32Collection ( ) ; tex_coords = new PointCollection ( ) ; } public Model3D AggregateModel = > particle_model ; public void Update ( ) { // get the most recently added particle AggregateParticle p = particle_stack.Peek ( ) ; // compute position index for triangle index generation int position_index = particle_stack.Count * 4 ; // create points associated with particle for circle generation Point3D p1 = new Point3D ( p.position.X , p.position.Y , p.position.Z ) ; Point3D p2 = new Point3D ( p.position.X , p.position.Y + p.size , p.position.Z ) ; Point3D p3 = new Point3D ( p.position.X + p.size , p.position.Y + p.size , p.position.Z ) ; Point3D p4 = new Point3D ( p.position.X + p.size , p.position.Y , p.position.Z ) ; // add points to particle positions collection particle_positions.Add ( p1 ) ; particle_positions.Add ( p2 ) ; particle_positions.Add ( p3 ) ; particle_positions.Add ( p4 ) ; // create points for texture co-ords Point t1 = new Point ( 0.0 , 0.0 ) ; Point t2 = new Point ( 0.0 , 1.0 ) ; Point t3 = new Point ( 1.0 , 1.0 ) ; Point t4 = new Point ( 1.0 , 0.0 ) ; // add texture co-ords points to texcoords collection tex_coords.Add ( t1 ) ; tex_coords.Add ( t2 ) ; tex_coords.Add ( t3 ) ; tex_coords.Add ( t4 ) ; // add position indices to indices collection triangle_indices.Add ( position_index ) ; triangle_indices.Add ( position_index + 2 ) ; triangle_indices.Add ( position_index + 1 ) ; triangle_indices.Add ( position_index ) ; triangle_indices.Add ( position_index + 3 ) ; triangle_indices.Add ( position_index + 2 ) ; // update colour of points - **NOTE : UPDATES ENTIRE POINT SYSTEM** // - > want to just apply colour to single particles added rad_brush.GradientStops.Add ( new GradientStop ( p.colour , 0.0 ) ) ; render_bitmap.Render ( ellipse ) ; // set particle_model Geometry model properties ( ( MeshGeometry3D ) particle_model.Geometry ) .Positions = particle_positions ; ( ( MeshGeometry3D ) particle_model.Geometry ) .TriangleIndices = triangle_indices ; ( ( MeshGeometry3D ) particle_model.Geometry ) .TextureCoordinates = tex_coords ; } public void SpawnParticle ( Point3D _pos , Color _col , double _size ) { AggregateParticle agg_particle = new AggregateParticle { position = _pos , colour = _col , size = _size ; } // push most-recently-added particle to stack particle_stack.Push ( agg_particle ) ; } }"
"Container.Instance.Lync.ContactManager.BeginSearch ( SearchQuery , SearchProviders.GlobalAddressList , SearchFields.AllFields , SearchOptions.IncludeContactsWithoutSipOrTelUri , 500 , ContactsAndGroupsCallback , SearchQuery ) ; var cit = ContactInformationType.ContactEndpoints ; var endpoints = contact.GetContactInformation ( cit ) as List < object > ;"
"public async Task < IEnumerable < Widget > > ReadAllAsync ( System.Data.IDbConnection databaseConnection , System.Data.IDbTransaction databaseTransaction ) { var commandText = `` SELECT WidgetId , Name FROM Widget '' ; // _databaseCommandFactory.Create returns an IDbCommand var command = this._databaseCommandFactory.Create ( databaseConnection , databaseTransaction , commandText ) ; using ( var dataReader = command.ExecuteReader ( ) ) { // iterate through the data reader converting a collection of Widgets ( ` IEnumerable < Widget > ` ) } }"
try { // logic } catch ( FileNotFoundException ) // exception type { // handle error } try { // logic } catch ( FileNotFoundException ex ) // exception var { // handle error }
"public enum EnumLogicalOperator { And = 1 , Or = 2 }"
"private async Task FooAsync ( ) { await Something ( ) ; DoAnotherThing ( ) ; await SomethingElse ( ) ; DoOneLastThing ( ) ; } private async Task BarAsync ( ) { await Task.Factory.StartNew ( ( ) = > await FooAsync ( ) , ... , ... , LowPriorityTaskScheduler ) ; }"
"public interface IInterface { } public class Implementation : IInterface { } unityContainer.RegisterTypes ( new [ ] { typeof ( Implementation ) } , WithMappings.FromAllInterfaces , WithName.Default , WithLifetime.ContainerControlled ) ; unityContainer.RegisterTypes ( new [ ] { typeof ( Implementation ) } , WithMappings.FromAllInterfaces , WithName.Default ) ; foreach ( var type in types ) { var fromTypes = getFromTypes ( type ) ; // { IInterface } var name = getName ( type ) ; // null var lifetimeManager = getLifetimeManager ( type ) ; // null or ContainerControlled var injectionMembers = getInjectionMembers ( type ) .ToArray ( ) ; // null RegisterTypeMappings ( container , overwriteExistingMappings , type , name , fromTypes , mappings ) ; if ( lifetimeManager ! = null || injectionMembers.Length > 0 ) { container.RegisterType ( type , name , lifetimeManager , injectionMembers ) ; // ! } } container.RegisterType ( type , name , lifetimeManager , injectionMembers ) ; [ TestMethod ] public void RegistersMappingAndImplementationTypeWithLifetimeAndMixedInjectionMembers ( ) { var container = new UnityContainer ( ) ; container.RegisterTypes ( new [ ] { typeof ( MockLogger ) } , getName : t = > `` name '' , getFromTypes : t = > t.GetTypeInfo ( ) .ImplementedInterfaces , getLifetimeManager : t = > new ContainerControlledLifetimeManager ( ) ) ; var registrations = container.Registrations.Where ( r = > r.MappedToType == typeof ( MockLogger ) ) .ToArray ( ) ; Assert.AreEqual ( 2 , registrations.Length ) ; // ..."
"@ model IEnumerable < GridPageFolderViewModel > public static class HtmlHelperExtensions { # region Grid public static GridBuilder < TModelEntry > GridFor < TModel , TModelEntry > ( this HtmlHelper < TModel > htmlHelper , TModelEntry model ) { return new GridBuilder < TModelEntry > ( ) ; } # endregion } public class GridBuilder < TModel > : IGridBuilder { # region Properties private string name { get ; set ; } # endregion # region Methods public GridBuilder < TModel > WithColumns ( Action < ColumnBuilder < TModel > > function ) { return this ; } internal MvcHtmlString Render ( ) { return new MvcHtmlString ( `` This is a value . `` ) ; } # endregion # region IGridBuilder Members public GridBuilder < TModel > Name ( string name ) { this.name = name ; return this ; } # endregion # region IHtmlString Members public string ToHtmlString ( ) { return Render ( ) .ToHtmlString ( ) ; } # endregion } public class ColumnBuilder < TModel > { public void Bind < TItem > ( Func < TModel , TItem > func ) { } } @ ( Html.GridFor ( new GridPageFolderViewModel ( ) ) .Name ( `` PageOverviewGrid '' ) .WithColumns ( column = > { column.Bind ( c = > c.Name ) ; column.Bind ( c = > c.DateCreated ) ; column.Bind ( c = > c.DateUpdated ) ; } )"
"SyntaxTree tree = SyntaxTree.ParseFile ( Path ) ; CompilationUnitSyntax root = ( CompilationUnitSyntax ) tree.GetRoot ( ) ; MemberDeclarationSyntax firstMember = root.Members [ 0 ] ; TypeDeclarationSyntax lClassDeclarationSyntax = ( TypeDeclarationSyntax ) NamespaceDeclaration.Members [ 1 ] ; MethodDeclarationSyntax lMethodDeclarationSyntax= Syntax.MethodDeclaration ( Syntax.List < AttributeListSyntax > ( ) , Syntax.TokenList ( ) , Syntax.IdentifierName ( `` MemoryStream '' ) , null , Syntax.Identifier ( `` Serialize '' ) , null , Syntax.ParameterList ( ) , Syntax.List < TypeParameterConstraintClauseSyntax > ( ) , Syntax.Block ( lList ) ) ; lClassDeclarationSyntax.Members.Add ( lMethodDeclarationSyntax ) ;"
Templates Short Name Language Tags -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Blazor Server App blazorserver [ C # ] Web/Blazor Blazor WebAssembly App blazorwasm [ C # ] Web/Blazor/WebAssembly dotnet new blazorwasmdotnet builddotnet run
"Animal [ ] reptiles = new Reptile [ ] { new Reptile ( `` lizard '' ) , new Reptile ( `` snake '' ) } ; Animal [ ] animals = new Animal [ ] { new Reptile ( `` alligator '' ) , new Mammal ( `` dolphin '' ) } ; try { Array.ConstrainedCopy ( animals , 0 , reptiles , 0 , 2 ) ; } catch ( ArrayTypeMismatchException atme ) { Console.WriteLine ( ' [ ' + String.Join < Animal > ( `` , `` , reptiles ) + ' ] ' ) ; }"
"var tmp = Cache.Keys.GetOrAdd ( type , key = > { var keys = context.GetKeys ( key ) ; if ( keys.Count ( ) == 1 ) { return new KeyInfo { Name = keys.First ( ) .Name , Info = key.GetInfo ( keys.First ( ) .Name ) } ; } return null ; } ) ; if ( tmp == null ) Cache.Keys.TryRemove ( type , out tmp ) ; return tmp ; public class Cache { public static ConcurrentDictionary < Type , Info > Keys = new ConcurrentDictionary < Type , Info > ( ) ; public static ConcurrentDictionary < Type , string > SetNames = new ConcurrentDictionary < Type , string > ( ) ; }"
"[ TestClass ] public class UnitTest1 { [ TestMethod ] public void TestMethod1 ( ) { // Create new sync context for unit test SynchronizationContext.SetSynchronizationContext ( new SynchronizationContext ( ) ) ; var waitHandle = new ManualResetEvent ( false ) ; var doer = new DoSomethinger ( ) ; //Uncommenting this line causes the ContinueWith part of the Task //below never to execute . //var f = new Form ( ) ; doer.DoSomethingAsync ( ( ) = > waitHandle.Set ( ) ) ; Assert.IsTrue ( waitHandle.WaitOne ( 10000 ) , `` Wait timeout exceeded . `` ) ; } } public class DoSomethinger { public void DoSomethingAsync ( Action onCompleted ) { var task = Task.Factory.StartNew ( ( ) = > Thread.Sleep ( 1000 ) ) ; task.ContinueWith ( t = > { if ( onCompleted ! = null ) onCompleted ( ) ; } , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ; } }"
public ActionResult EntityRecords ( string entityTypeName ) { var entityResults = context. < EntityType > .Tolist ( ) ; return View ( entityResults ) ; }
public struct X { public int a ; } public struct Y { public int a { get ; set ; } } class Program { static void Main ( string [ ] args ) { X x ; x.a = 1 ; Y y ; y.a = 2 ; // < < compile error `` unused local variable '' here Y y2 = new Y ( ) ; y2.a = 3 ; } }
"public static Func < V > To < T , V > ( this Func < T > g , Func < T , V > h ) { return ( ) = > h ( g ( ) ) ; } public static Func < T > ToIdentity < T > ( this T t ) { return ( ) = > t ; } public static string SuffixColumn ( this string v , string suffix , int columns ) { return v.ToIdentity ( ) .ToScrubbedHtml ( ) .ToFormat ( ( ) = > `` { 0 } `` + suffix.ToLower ( ) .PadLeft ( columns , ' ' ) ) .ToErrorText ( v , suffix , columns ) ( ) ; }"
"public class BaseTypeEvent { public Guid Id { get ; set ; } public string Name { get ; set ; } public BaseTypeEvent ( ) { } public BaseTypeEvent ( SomeRandomThing item ) { Id = item.Id ; Name = item.Name ; } } public class SubTypeEvent : BaseTypeEvent { public DateTimeOffset Deleted { get ; set ; } public SubTypeEvent ( ) { Deleted = DateTimeOffset.UtcNow ; } } public class UsageClass { public UsageClass ( IEventBusService eventBusService ) { eventBusService.MyBaseTypeEvents += HandleMethod ; } private void HandleMethod ( BaseTypeEvent e ) { if ( e is SubTypeEvent ) { //code that deals with deletion events //execution never actually gets here } //code that deals with events that are not deletion events } } public delegate void MyEventHandler ( BaseTypeEvent e ) ; public interface IEventBusService { public event MyEventHandler MyBaseTypeEvents ; void PublishStuff ( BaseTypeEvent e ) ; } public class EventBusService : IEventBusService , IDisposable { public void Initialize ( ) { //Bus is MassTransit Bus.Initialize ( sbc = > { sbc.Subscribe ( subs = > subs.Handler < BaseTypeEvent > ( OnBaseTypeEvent ) ) ; } } private void OnBaseTypeEvent ( BaseTypeEvent e ) { if ( MyBaseTypeEvents == null ) return ; try { MyBaseTypeEvents ( e ) ; } catch ( Exception e ) { //some logging } } public event MyEventHandler MyBaseTypeEvents ; public void PublishStuff ( BaseTypeEvent e ) { //some logging //publish e to the event bus of our choice ( MassTransit ) Bus.Instance.Publish ( e ) ; } } eventBusService.PublishStuff ( new SubTypeEvent { Id = id , Deleted = DateTimeOffset.UtcNow } ) ; public delegate void MyEventAHandler ( EventTypeA e ) ; public delegate void MyEventBHandler ( EventTypeB e ) ; void PublishStuffForA ( EventTypeA e ) ; void PublishStuffForB ( EventTypeB e ) ; sbc.Subscribe ( subs = > subs.Handler < EventTypeA > ( OnEventTypeA ) ) ; sbc.Subscribe ( subs = > subs.Handler < EventTypeB > ( OnEventTypeB ) ) ; public UsageClass ( IEventBusService eventBusService ) { eventBusService.MyEventTypeAEvents += HandleMethodForA ; eventBusService.MyEventTypeBEvents += HandleMethodForB ; }"
"private void button_Print_Click ( object sender , RoutedEventArgs e ) { IDocumentPaginatorSource ps = null ; FlowDocument fd = new FlowDocument ( ) ; PrintDialog pd = new PrintDialog ( ) ; Paragraph pg = new Paragraph ( ) ; Style style = new Style ( typeof ( Paragraph ) ) ; Run r = null ; string text = string.Empty ; // get the text text = new TextRange ( this.richTextBox_Info.Document.ContentStart , this.richTextBox_Info.Document.ContentEnd ) .Text ; // configure the style of the flow document style.Setters.Add ( new Setter ( Block.MarginProperty , new Thickness ( 0 ) ) ) ; fd.Resources.Add ( typeof ( Paragraph ) , style ) ; // style the paragraph pg.LineHeight = 0 ; pg.LineStackingStrategy = LineStackingStrategy.BlockLineHeight ; pg.FontFamily = new FontFamily ( `` Courier New '' ) ; pg.TextAlignment = TextAlignment.Left ; pg.FontSize = 8 ; // create the paragraph r = new Run ( text ) ; r.FontFamily = new FontFamily ( `` Courier New '' ) ; r.FontSize = 8 ; pg.Inlines.Add ( r ) ; // add the paragraph to the document fd.Blocks.Add ( pg ) ; ps = fd ; // format the page fd.PagePadding = new Thickness ( 50 ) ; fd.ColumnGap = 0 ; fd.ColumnWidth = pd.PrintableAreaWidth ; // print the document if ( pd.ShowDialog ( ) .Value == true ) { pd.PrintDocument ( ps.DocumentPaginator , `` Information Box '' ) ; } }"
class Program { static void Main ( string [ ] args ) { Console.WriteLine ( `` Connecting to Bluetooth '' ) ; var client = new BluetoothClient ( ) ; Console.WriteLine ( `` DiscoverDevices '' ) ; var devices = client.DiscoverDevices ( ) ; Console.WriteLine ( `` Enumerating '' ) ; foreach ( var device in devices ) { if ( ! device.DeviceName.StartsWith ( `` GNSS '' ) ) continue ; Console.WriteLine ( device.DeviceName ) ; try { Console.WriteLine ( `` Getting serial ports '' ) ; var serviceRecords = device.GetServiceRecords ( BluetoothService.SerialPort ) ; foreach ( var serviceRecord in serviceRecords ) { var name = GetName ( serviceRecord ) ; Console.WriteLine ( name ) ; } } catch ( Exception ex ) { Console.WriteLine ( `` Failed to get SerialPort '' ) ; Console.WriteLine ( ex.ToString ( ) ) ; } } Console.ReadKey ( ) ; } private static string GetName ( ServiceRecord serviceRecord ) { var nameAttribute = serviceRecord.SingleOrDefault ( a = > a.Id == 0 ) ; var name = serviceRecord.GetPrimaryMultiLanguageStringAttributeById ( nameAttribute.Id ) ; return name ; } }
"@ model int ? @ { var matrix = ImpactMatrix.GetMatrix ( ) ; } < div class= '' impactmatrix '' > < table > @ for ( int i = 0 ; i < matrix.GetLength ( 0 ) ; i++ ) { < tr > @ for ( int j = 0 ; j < matrix.GetLength ( 1 ) ; j++ ) { var cell = matrix [ i , j ] ; < td data-color= '' @ cell.Color '' class= '' matrix @ ( Model == cell.Value ? cell.Color.ToString ( ) : `` '' ) '' > @ cell.Value < /td > } < /tr > } < /table > < /div > @ Html.DisplayFor ( m= > m.ImpactFactor , `` ImpactMatrix '' ) @ model int ? < div class= '' impactmatrix-editor '' > @ Html.HiddenFor ( m = > m ) @ Html.DisplayFor ( m = > m , `` ImpactMatrix '' ) < /div >"
public class Encoder { Public static bool Encode ( string videopath ) { ... snip ... return true ; } } public class Encoder { Public static Encode ( string videopath ) { EncodedVideo encoded = new EncodedVideo ( ) ; ... snip ... encoded.EncodedVideoPath = outputFile ; encoded.Success = true ; ... snip ... } } public class EncodedVideo { public string EncodedVideoPath { get ; set ; } public bool Success { get ; set ; } }
12AM 1AM 2AM 3AM 4AM 5AM 6AM GMTGMT -4 40 % of the clients |||||||||||||||||||||||||||||| GMT -5 10 % of the clients |||||||||||||||||||||||||||||| GMT -6 20 % of the clients |||||||||||||||||||||||||||||| GMT -7 30 % of the clients ||||||||||||||||||||||||||||||
"// Specifying arguments for constructor using expression . This is refactoring friendly ! // The constructor seen here is never actually invoked . It is an expression and it 's purpose// is purely to communicate the constructor arguments which will be extracted from itvar foo = A.Fake < FooClass > ( x = > x.WithArgumentsForConstructor ( ( ) = > new FooClass ( `` foo '' , `` bar '' ) ) ) ; [ Test ] public void Constructor_With_Arguments ( ) { var driver = A.Fake < Person > ( x = > x.WithArgumentsForConstructor ( ( ) = > new Person ( `` Jane '' , 42 ) ) ) ; var age = driver.GetAge ( ) ; Assert.AreEqual ( 42 , age ) ; } MyStuff.Tests.Domain.dll ! MyStuff.Tests.Domain.Driver.Person ( string name , int age ) Line 61 C # DynamicProxyGenAssembly2 ! Castle.Proxies.DriverProxy.DriverProxy ( Castle.DynamicProxy.IInterceptor [ ] value , string value , int value ) Unknown [ Native to Managed Transition ] [ Managed to Native Transition ] mscorlib.dll ! System.RuntimeType.CreateInstanceImpl ( System.Reflection.BindingFlags bindingAttr , System.Reflection.Binder binder , object [ ] args , System.Globalization.CultureInfo culture , object [ ] activationAttributes , ref System.Threading.StackCrawlMark stackMark ) Unknownmscorlib.dll ! System.Activator.CreateInstance ( System.Type type , System.Reflection.BindingFlags bindingAttr , System.Reflection.Binder binder , object [ ] args , System.Globalization.CultureInfo culture , object [ ] activationAttributes ) Unknownmscorlib.dll ! System.Activator.CreateInstance ( System.Type type , object [ ] args ) UnknownFakeItEasy.dll ! Castle.DynamicProxy.ProxyGenerator.CreateClassProxyInstance ( System.Type proxyType , System.Collections.Generic.List < object > proxyArguments , System.Type classToProxy , object [ ] constructorArguments ) UnknownFakeItEasy.dll ! Castle.DynamicProxy.ProxyGenerator.CreateClassProxy ( System.Type classToProxy , System.Type [ ] additionalInterfacesToProxy , Castle.DynamicProxy.ProxyGenerationOptions options , object [ ] constructorArguments , Castle.DynamicProxy.IInterceptor [ ] interceptors ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator.GenerateClassProxy ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , Castle.DynamicProxy.IInterceptor interceptor , System.Collections.Generic.IEnumerable < System.Type > allInterfacesToImplement ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator.DoGenerateProxy ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < System.Type > additionalInterfacesToImplement , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , Castle.DynamicProxy.IInterceptor interceptor ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator.CreateProxyGeneratorResult ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < System.Type > additionalInterfacesToImplement , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , FakeItEasy.Core.IFakeCallProcessorProvider fakeCallProcessorProvider ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator.GenerateProxy ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < System.Type > additionalInterfacesToImplement , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , FakeItEasy.Core.IFakeCallProcessorProvider fakeCallProcessorProvider ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator.GenerateProxy ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < System.Type > additionalInterfacesToImplement , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , System.Collections.Generic.IEnumerable < System.Reflection.Emit.CustomAttributeBuilder > customAttributeBuilders , FakeItEasy.Core.IFakeCallProcessorProvider fakeCallProcessorProvider ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.ProxyGeneratorSelector.GenerateProxy ( System.Type typeOfProxy , System.Collections.Generic.IEnumerable < System.Type > additionalInterfacesToImplement , System.Collections.Generic.IEnumerable < object > argumentsForConstructor , System.Collections.Generic.IEnumerable < System.Reflection.Emit.CustomAttributeBuilder > customAttributeBuilders , FakeItEasy.Core.IFakeCallProcessorProvider fakeCallProcessorProvider ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.FakeObjectCreator.GenerateProxy ( System.Type typeOfFake , FakeItEasy.Creation.FakeOptions fakeOptions , System.Collections.Generic.IEnumerable < object > argumentsForConstructor ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.FakeObjectCreator.CreateFake ( System.Type typeOfFake , FakeItEasy.Creation.FakeOptions fakeOptions , FakeItEasy.Creation.IDummyValueCreationSession session , bool throwOnFailure ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.DefaultFakeAndDummyManager.CreateFake ( System.Type typeOfFake , FakeItEasy.Creation.FakeOptions options ) UnknownFakeItEasy.dll ! FakeItEasy.Creation.DefaultFakeCreatorFacade.CreateFake < SysSurge.DynMock.Tests.Domain.Driver > ( System.Action < FakeItEasy.Creation.IFakeOptionsBuilder < SysSurge.DynMock.Tests.Domain.Driver > > options ) Unknown"
using ( ( IDisposable ) null ) { Console.WriteLine ( `` A '' ) ; } Console.WriteLine ( `` B '' ) ;
"public void get_psdata ( ) { //Get data from PS3 cputemp = PS3.GetTemperatureCELL ( ) ; gputemp = PS3.GetTemperatureRSX ( ) ; psversion = PS3.GetFirmwareVersion ( ) ; psversiontype = PS3.GetFirmwareType ( ) ; //Set data into Var L_cputemp_show.Text = cputemp ; L_gputemp_show.Text = gputemp ; L_firmware_show.Text = psversion ; L_type_show.Text = psversiontype ; //Update Label L_cputemp_show.Refresh ( ) ; } //B_connect , Connect Button private void b_connect_Click ( object sender , EventArgs e ) { //Connect CCAPI to PS3 if Button clicked PS3.ConnectTarget ( psip ) ; //Check Connection if ( PS3.SUCCESS ( PS3.ConnectTarget ( psip ) ) ) { //Show Status MessageBox.Show ( `` Connected to : `` + psip + `` ! `` ) ; this.L_status_show.Text = `` Connected ! `` ; L_status_show.ForeColor = System.Drawing.Color.Green ; //Call Function get_psdata ( ) ; } else { //Show Status MessageBox.Show ( `` Failed to Connect to : `` + psip + `` ! `` ) ; this.L_status_show.Text = `` Not Connected ! `` ; L_status_show.ForeColor = System.Drawing.Color.Red ; } } //Function to set refresh delay public void refresh_delay ( ) { MessageBox.Show ( `` Delay set to `` + refresh_int + `` Seconds ! `` ) ; refresh_int = refresh_int * 1000 ; //Change to Miliseconds init_timer ( ) ; } //Timer public Timer timer1 ; public void init_timer ( ) { timer1 = new Timer ( ) ; timer1.Tick += new EventHandler ( timer1_Tick ) ; timer1.Interval = refresh_int ; // in miliseconds timer1.Start ( ) ; } public void timer1_Tick ( object sender , EventArgs e ) { get_psdata ( ) ; } //B_set , Set refresh time button private void B_set_Click ( object sender , EventArgs e ) { //Check refresh Value refresh_string = TB_refresh.Text ; //Check empty if ( refresh_string ! = `` '' ) { //Check minimum refresh_int = Convert.ToInt32 ( TB_refresh.Text ) ; if ( refresh_int < 5 ) { DialogResult confirm = MessageBox.Show ( `` This is not the delay you are looking for ! \r ( I recommend to set it bigger then 5 ) \r Continue with `` + refresh_int + `` Seconds ? `` , `` Realy dude ? `` , MessageBoxButtons.YesNo ) ; if ( confirm == DialogResult.Yes ) { //Call Function refresh_delay ( ) ; } } else { //Call Function refresh_delay ( ) ; } } else { MessageBox.Show ( `` Please set refresh delay ! `` ) ; } }"
"string url= @ '' http : //api.oodle.com/api/v2/listings ? key=TEST & region=chicago & category=vehicle & format=json '' ; string jsonString = new WebClient ( ) .DownloadString ( url ) ; { `` current '' : { `` region '' : { `` id '' : '' chicago '' , `` name '' : '' Chicago '' } , `` category '' : { `` id '' : '' vehicle '' , `` name '' : '' Cars & Vehicles '' , `` abbrev '' : '' Vehicles '' } , `` start '' :1 , `` num '' :10 } }"
var fileMenuItem = new NSMenuItem ( `` File '' ) ; var fileMenu = new NSMenu ( ) ; var fileNew = new NSMenuItem ( `` New '' ) ; var fileOpen = new NSMenuItem ( `` Open '' ) ; var fileSave = new NSMenuItem ( `` Save '' ) ; fileMenu.AddItem ( fileNew ) ; fileMenu.AddItem ( fileOpen ) ; fileMenu.AddItem ( fileSave ) ; fileMenuItem.Menu = fileMenu ; NSApplication.SharedApplication.MainMenu.AddItem ( fileMenuItem ) ;
"[ OutputCache ( Duration = 600 , VaryByParam = `` None '' , VaryByCustom = `` ztest '' ) ] public ViewResult Index ( ) { return View ( ) ; } public override string GetVaryByCustomString ( HttpContext context , string custom ) { if ( custom == `` ztest '' ) { HttpCookie ztest = context.Request.Cookies [ `` ztest '' ] ; if ( ztest ! = null ) { return ztest.Value ; } } return base.GetVaryByCustomString ( context , custom ) ; }"
"foreach ( string directory in directories ) { ... } Parallel.ForEach ( directories , ( directory ) = > { ... } )"
mockObject.Setup ( o = > o.foo ( It.IsAny < List < string > > ( ) ) ) .Returns ( fooBall ) ; mockObject.Setup ( o = > o.foo ( It.IsAny < int > ( ) ) ) .Returns ( fooSquare ) ;
"public class Person { public enum Sex { Male , Female } public Sex Gender { get ; set ; } public Person ( Sex gender ) { Gender = gender ; } } public enum Sex { Male , Female }"
"If I publish my solution to , to my webhost I get a SocketException ( 0x274c ) `` A connection attempt failed because the connected party did not properly respond after a period of time , or established connection failed because connected host has failed to respond 38.69.197.71:45623 '' httpWebRequest useUnsafeHeaderParsing= '' true '' httpRuntime executionTimeout= '' 180 '' HtmlWeb htmlweb = new HtmlWeb ( ) ; htmlweb.PreRequest = new HtmlAgilityPack.HtmlWeb.PreRequestHandler ( OnPreRequest ) ; HtmlDocument htmldoc = htmlweb.Load ( @ '' http : //www.websitetofetch.com , `` IP '' , port , `` username '' , `` password '' ) ; //This is the preRequest config static bool OnPreRequest ( HttpWebRequest request ) { request.KeepAlive = false ; request.Timeout = 100000 ; request.ReadWriteTimeout = 1000000 ; request.ProtocolVersion = HttpVersion.Version10 ; return true ; // ok , go on } Log stuff from app.config < system.diagnostics > < sources > < source name= '' System.ServiceModel.MessageLogging '' switchValue= '' Warning , ActivityTracing '' > < listeners > < add name= '' ServiceModelTraceListener '' / > < /listeners > < /source > < source name= '' System.ServiceModel '' switchValue= '' Verbose , ActivityTracing '' > < listeners > < add name= '' ServiceModelTraceListener '' / > < /listeners > < /source > < source name= '' System.Runtime.Serialization '' switchValue= '' Verbose , ActivityTracing '' > < listeners > < add name= '' ServiceModelTraceListener '' / > < /listeners > < /source > < /sources > < sharedListeners > < add initializeData= '' App_tracelog.svclog '' type= '' System.Diagnostics.XmlWriterTraceListener , System , Version=2.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' name= '' ServiceModelTraceListener '' traceOutputOptions= '' Timestamp '' / > < /sharedListeners > < /system.diagnostics > request.KeepAlive = false ; System.Net.ServicePointManager.Expect100Continue = false ;"
"var thread = new Thread ( ( ) = > { var logQuery = new LogQueryClassClass ( ) ; var inputFormat = new COMEventLogInputContextClassClass { direction = `` FW '' , fullText = true , resolveSIDs = false , formatMessage = true , formatMsg = true , msgErrorMode = `` MSG '' , fullEventCode = false , stringsSep = `` | '' , iCheckpoint = string.Empty , binaryFormat = `` HEX '' } ; try { Debug.AutoFlush = true ; var watch = Stopwatch.StartNew ( ) ; var recordset = logQuery.Execute ( query , inputFormat ) ; watch.Stop ( ) ; watch = Stopwatch.StartNew ( ) ; while ( ! recordset.atEnd ( ) ) { var record = recordset.getRecord ( ) ; recordProcessor ( record ) ; recordset.moveNext ( ) ; } recordset.close ( ) ; watch.Stop ( ) ; } catch { } finally { if ( logQuery ! = null ) { Marshal.ReleaseComObject ( logQuery ) ; GC.SuppressFinalize ( logQuery ) ; logQuery = null ; } } } ) ; thread.SetApartmentState ( ApartmentState.STA ) ; thread.Start ( ) ; thread.Join ( ) ;"
"public static bool operator == ( GenericSendRequest lhs , GenericSendRequest rhs ) { return lhs.Equals ( rhs ) ; } public static bool operator ! = ( GenericSendRequest lhs , GenericSendRequest rhs ) { return ! lhs.Equals ( rhs ) ; } public override bool Equals ( object obj ) { return base.Equals ( obj ) ; } //Yes , it also makes me override GetHashCode since I 'm overriding Equals . public override int GetHashCode ( ) { return base.GetHashCode ( ) ; } public struct GenericSendRequest { public LiveUser Sender ; public LiveUser [ ] Receivers ; public Message Msg ; public ServiceHttpRequest HttpRequest ; } public static GenericSendRequest CreateGenericSendRequest ( ... ) ;"
namespace mycode { class myclass { void function ( ) { foo ( ) ; } void foo ( ) { bar ( ) ; } void bar ( ) { //code.. } } } namespace mycode { class myclass { void function ( ) { foo ( ) ; } void foo ( ) { bar ( ) ; } void bar ( ) { //code.. } } }
MyType myObject ; string displayName = myObject.GetDisplayName ( x = > x.Property ) ; string displayName = BlahBlahUtility.GetDisplayName ( ( MyTpe x ) = > x.Property ) ; string displayName = MyType.Property.GetDisplayName ( ) string displayName = ( ( MyType x ) = > x.Property ) .GetDisplayName ( ) ;
public interface IFoo { bool SomeMethod ( ) ; } public interface IFoo { MyFooObj SomeMethod ( ) ; } public class MyFooObj { bool SomeProp { get ; set ; } }
volatile1 write volatile2 read 1 ) writes to a variable can not be reordered with a following read from the same variable 2 ) no volatile accesses can be eliminated 3 ) no memory accesses can be reordered with a previous volatile read A ) volatile1 write B ) volatile1 read [ to a visible ( accessible | potentially shared ) location ] C ) volatile2 read
"[ Table ] public class Michelle { [ Column ( true ) , PrimaryKey ] public UInt32 A { get ; set ; } [ Column ] public String B { get ; set ; } } public static Action < Object , Object > GenerateSetter ( PropertyInfo propertyInfo ) { if ( ! FactoryFastProperties.CacheSetters.ContainsKey ( propertyInfo ) ) { MethodInfo methodInfoSetter = propertyInfo.GetSetMethod ( ) ; ParameterExpression parameterExpressionInstance = Expression.Parameter ( FactoryFastProperties.TypeObject , `` Instance '' ) ; ParameterExpression parameterExpressionValue = Expression.Parameter ( FactoryFastProperties.TypeObject , `` Value '' ) ; UnaryExpression unaryExpressionInstance = Expression.Convert ( parameterExpressionInstance , propertyInfo.DeclaringType ) ; UnaryExpression unaryExpressionValue = Expression.Convert ( parameterExpressionValue , propertyInfo.PropertyType ) ; MethodCallExpression methodCallExpression = Expression.Call ( unaryExpressionInstance , methodInfoSetter , unaryExpressionValue ) ; Expression < Action < Object , Object > > expressionActionObjectObject = Expression.Lambda < Action < Object , Object > > ( methodCallExpression , new ParameterExpression [ ] { parameterExpressionInstance , parameterExpressionValue } ) ; FactoryFastProperties.CacheSetters.Add ( propertyInfo , expressionActionObjectObject.Compile ( ) ) ; } return FactoryFastProperties.CacheSetters [ propertyInfo ] ; } // Considering setter as something returned by the generator described above// So : // That one works ! setter ( instance , 32u ) ; // This one ... hm not really =/setter ( instance , 64 ) ;"
"void Main ( ) { var payload = new GooglePlacesPayload ( ) ; payload.Status = StatusCode.InvalidRequest ; JsonConvert.SerializeObject ( payload ) .Dump ( ) ; } public class GooglePlacesPayload { [ JsonProperty ( PropertyName = `` error_message '' ) ] public string ErrorMessage { get ; set ; } [ JsonProperty ( PropertyName = `` status '' ) ] [ JsonConverter ( typeof ( StringEnumConverter ) ) ] public StatusCode Status { get ; set ; } } [ Flags ] public enum StatusCode { // reference https : //developers.google.com/maps/premium/previous-licenses/articles/usage-limits # limitexceeded // reference https : //developers.google.com/places/web-service/search # PlaceSearchStatusCodes None = 0 , // indicates that no errors occurred ; the place was successfully detected and at least one result was returned . [ JsonProperty ( PropertyName = `` OK '' ) ] Ok = 1 , // indicates that the search was successful but returned no results . This may occur if the search was passed a latlng in a remote location . [ JsonProperty ( PropertyName = `` ZERO_RESULTS '' ) ] ZeroResults = 2 , // indicates that you are over your quota . The daily quotas are reset at midnight , Pacific Time . [ JsonProperty ( PropertyName = `` OVER_QUERY_LIMIT '' ) ] OverQueryLimit = 4 , // indicates that your request was denied , generally because of lack of an invalid key parameter . [ JsonProperty ( PropertyName = `` REQUEST_DENIED '' ) ] RequestDenied = 8 , // generally indicates that a required query parameter ( location or radius ) is missing . [ JsonProperty ( PropertyName = `` INVALID_REQUEST '' ) ] InvalidRequest = 16 , // When the Google Places service returns a status code other than OK , there may be an additional error_message field within the search response object . // This field contains more detailed information about the reasons behind the given status code . Positive = Ok | ZeroResults , Negative = OverQueryLimit | RequestDenied | InvalidRequest }"
"for ( int i = 0 ; i < 100000 ; i++ ) var bmp = new RenderTargetBitmap ( 256 , 256 , 96 , 96 , PixelFormats.Default ) ; for ( int i = 0 ; i < 100000 ; i++ ) { var bmp = new RenderTargetBitmap ( 256 , 256 , 96 , 96 , PixelFormats.Default ) ; if ( i % 500 == 0 ) { GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; } }"
//string baseAddress = `` http : //192.168.1.6:8111/ '' ; string baseAddress = `` http : //+:8111/ '' ; // Start OWIN host using ( Microsoft.Owin.Hosting.WebApp.Start < Startup > ( url : baseAddress ) ) { Console.ReadLine ( ) ; } //var uri = 'http : //192.168.1.6:8111/api/tests ' ; var uri = 'http : //+:8111/api/tests ' ; function Read ( ) { $ .getJSON ( uri + '/ ' + id ) }
public async Task SaveChangesAsync ( ) { await Context.SaveChangesAsync ( ) ; } public Task UpdateAsync ( List < TEntity > entities ) { foreach ( TEntity entity in entities ) { BeforeUpdate ( entity ) ; Context.Entry ( entity ) .State = EntityState.Modified ; } return SaveChangesAsync ( ) ; } public async Task SaveChangesAsync ( ) { await Context.SaveChangesAsync ( ) ; } public async Task UpdateAsync ( List < TEntity > entities ) { foreach ( TEntity entity in entities ) { BeforeUpdate ( entity ) ; Context.Entry ( entity ) .State = EntityState.Modified ; } await SaveChangesAsync ( ) ; }
"// unmanaged.cpp # include < cstdio > # define EXPORT __declspec ( dllexport ) # define STDCALL __stdcalltypedef void ( STDCALL* raiseExcpFn_t ) ( const char * ) ; extern `` C '' { // STRUCT ADDED TO TEST CLEANUP struct Allocated { int x ; Allocated ( int a ) : x ( a ) { } ~Allocated ( ) { printf ( `` -- - Deleted allocated stack ' % d ' -- -\n '' , x ) ; fflush ( stdout ) ; } } ; static raiseExcpFn_t exceptionRaiser = 0 ; EXPORT void STDCALL registerRaiseExcpFn ( raiseExcpFn_t fun ) { exceptionRaiser = fun ; } EXPORT void STDCALL hello ( const char * x ) { Allocated a0 ( 0 ) ; try { Allocated a1 ( 1 ) ; printf ( `` 1 -- - ' % s ' -- -\n '' , x ) ; fflush ( stdout ) ; ( *exceptionRaiser ) ( `` Something bad happened ! `` ) ; printf ( `` 2 -- - ' % s ' -- -\n '' , x ) ; fflush ( stdout ) ; } catch ( ... ) { printf ( `` 3 -- - ' % s ' -- -\n '' , x ) ; fflush ( stdout ) ; throw ; } printf ( `` 4 -- - ' % s ' -- -\n '' , x ) ; fflush ( stdout ) ; } } // Program.csusing System ; using System.Runtime.InteropServices ; class Program { [ DllImport ( `` unmanaged.dll '' ) ] public static extern void registerRaiseExcpFn ( RaiseException method ) ; [ DllImport ( `` unmanaged.dll '' ) ] public static extern void hello ( [ MarshalAs ( UnmanagedType.LPStr ) ] string m ) ; public delegate void RaiseException ( string s ) ; public static RaiseException excpfnDelegate = new RaiseException ( RaiseExceptionMessage ) ; // Static constructor ( initializer ) static Program ( ) { registerRaiseExcpFn ( excpfnDelegate ) ; } static void RaiseExceptionMessage ( String msg ) { throw new ApplicationException ( msg ) ; } public static void Main ( string [ ] args ) { try { hello ( `` Hello World ! `` ) ; } catch ( Exception e ) { Console.WriteLine ( `` Exception : `` + e.GetType ( ) + `` : '' + e.Message ) ; } } } // Observed output // with Release builds /EHa , VS2010 , .Net 3.5 target//cstest.exe// -- - Deleted allocated stack ' 0 ' -- -// -- - Deleted allocated stack ' 1 ' -- -// 1 -- - 'Hello World ! ' -- -// 3 -- - 'Hello World ! ' -- -// Exception : System.ApplicationException : Something bad happened ! // Observed LEAKING output // with Release builds /EHsc , VS2010 , .Net 3.5 target// cstest.exe// 1 -- - 'Hello World ! ' -- -// Exception : System.ApplicationException : Something bad happened ! // LEAKING output DYLD_LIBRARY_PATH= ` pwd ` mono program.exe // 1 -- - 'Hello World ! ' -- -// Exception : System.ApplicationException : Something bad happened !"
"using ( client = Amazon.AWSClientFactory.CreateAmazonS3Client ( ) ) { var putObjectRequest = new PutObjectRequest { BucketName = bucketName , InputStream = fileStream , Key = fileName , CannedACL = S3CannedACL.PublicRead , //MD5Digest = md5Base64 , //GenerateMD5Digest = true , Timeout = 3600000 //1 Hour } ; S3Response response = client.PutObject ( putObjectRequest ) ; response.Dispose ( ) ; }"
"< Window x : Class= '' TheWPFCoveringWindow.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' WindowStyle= '' None '' WindowState= '' Maximized '' AllowsTransparency= '' True '' Background= '' Transparent '' Topmost= '' True '' > < Button Content= '' Test '' Width= '' 200 '' Height= '' 100 '' / > < /Window > // This code is in another WPF application.private void OnStylusDown ( object sender , StylusDownEventArgs e ) { // Set a breakpoint here . }"
< sites > < site name= '' WebSite1 '' id= '' 1 '' serverAutoStart= '' true '' > < application path= '' / '' > < virtualDirectory path= '' / '' physicalPath= '' % IIS_SITES_HOME % \WebSite1 '' / > < /application > < bindings > < binding protocol= '' http '' bindingInformation= '' :8080 : localhost '' / > < /bindings > < /site > < site name= '' SealingService '' id= '' 2 '' > < application path= '' / '' applicationPool= '' Clr4IntegratedAppPool '' > < virtualDirectory path= '' / '' physicalPath= '' C : \Users\sehch\Documents\Paragon\ParagonCore\servers\SealingService\SealingService '' / > < /application > < bindings > < binding protocol= '' http '' bindingInformation= '' *:61800 : localhost '' / > < binding protocol= '' https '' bindingInformation= '' *:44300 : localhost '' / > < /bindings > < /site > < siteDefaults > < logFile logFormat= '' W3C '' directory= '' % IIS_USER_HOME % \Logs '' / > < traceFailedRequestsLogging directory= '' % IIS_USER_HOME % \TraceLogFiles '' enabled= '' true '' maxLogFileSizeKB= '' 1024 '' / > < /siteDefaults > < applicationDefaults applicationPool= '' Clr4IntegratedAppPool '' / > < virtualDirectoryDefaults allowSubDirConfig= '' true '' / > < /sites > `` C : \Program Files ( x86 ) \IIS Express\iisexpress.exe ''
"GridView gdvList = new GridView ( ) ; gdvList.ID = `` gdvList '' ; TemplateField tField = new TemplateField ( ) ; BoundField dateBF = new BoundField ( ) ; dateBF.DataField = `` Date '' ; gdvList.Columns.Add ( dateBF ) ; BoundField countResponse = new BoundField ( ) ; countResponse.DataField = `` CountResponse '' ; gdvList.Columns.Add ( countResponse ) ; ObjectDataSource ods = new ObjectDataSource ( ) ; ods.ID = `` ods '' ; ods.TypeName = `` Project.BLLQuestion '' ; ods.SelectMethod = `` GetByGroupID '' ; ods.SelectParameters [ `` GroupID '' ] = new Parameter ( `` inGroupID '' , DbType.Int32 , `` 0 '' ) ; ods.DataBind ( ) ; gdvList.DataSource = ods ; gdvList.DataBind ( ) ; < asp : TemplateField ItemStyle-CssClass= '' GridItemTemplateField '' > < ItemTemplate > < a href= '' Question.aspx ? id= < % # Eval ( `` ID '' ) % > '' > < % # Eval ( `` Content '' ) .ToString ( ) .PadRight ( 140 ) .Substring ( 0,140 ) .TrimEnd ( ) + '' ... '' % > < /a > < /ItemTemplate > < /asp : TemplateField >"
"A : C ( A , B ) B : C ( A , B ) public interface I { string A ( ) ; } public class C : I { public string A ( ) { return `` A '' ; } public string B ( ) { return `` B '' ; } } public class A { public virtual void Print ( C c ) { Console.WriteLine ( `` A : C ( `` + c.A ( ) + `` , '' + c.B ( ) + `` ) '' ) ; } } public class B : A { public new void Print ( C c ) { Console.WriteLine ( `` B : C ( `` + c.A ( ) + `` , '' + c.B ( ) + `` ) '' ) ; } public void Print ( I i ) { Console.WriteLine ( `` B : I ( `` + i.A ( ) + `` ) '' ) ; } } class Program { public static void Main ( string [ ] args ) { A a = new A ( ) ; B b = new B ( ) ; C c = new C ( ) ; a.Print ( c ) ; b.Print ( c ) ; } } public override void Print ( C c ) A : C ( A , B ) B : I ( A )"
public void SampleMain ( ) { for ( int i = 1 ; i < = 100 ; i++ ) { DataTable dt = ReadData ( int id ) ; } } public DataTable ReadData ( int id ) { DataTable resultDT = new DataTable ( ) ; DataTable dt1 = new DataTable ( ) ; // Do Operation to Fill DataTable from first connection string adapter.Fill ( dt1 ) ; DataTable dt2 = new DataTable ( ) ; // Do Operation to Fill DataTable from first connection string adapter.Fill ( dt2 ) ; // Code for combining datatable and returning the resulting datatable // Combine DataTables return resultDT ; } public string GetPrimaryConnectionString ( ) { // Retrieve connection string from some file io operations return `` some primary connection string '' ; } public string GetSecondaryConnectionString ( ) { // Retrieve connection string from some file io operations return `` some secondaryconnection string '' ; }
"System.IO.FileNotFoundException : 'Could not load file or assembly 'Microsoft.EntityFrameworkCore , Version=2.0.3.0 , Culture=neutral , PublicKeyToken=adb9793829ddae60 ' or one of its dependencies . The system can not find the file specified ."
"container.RegisterManyForOpenGeneric ( typeof ( IEventHandler < > ) , container.RegisterAll , typeof ( IEventHandler < > ) .Assembly ) ;"
"public ActionResult AllPosts ( ) { int pageSize = 4 ; int pageNum = ( page ? ? 1 ) ; var query = from p in db.Postsselect new ListPostsVM ( ) { PostTitle = p.PostTitle , Author = p.UserProfile.UserName , DateCreated = p.DateCreated , CategoryName = p.Category.CategoryName } ; return View ( query.ToPagedList ( pageNum , pageSize ) ) ; } @ model IPagedList < Blogger.ViewModels.ListPostsVM > @ using PagedList ; @ using PagedList.Mvc ; @ { ViewBag.Title = `` AllPosts '' ; Layout = `` ~/Views/Shared/_AdminLayout.cshtml '' ; } < link href= '' ~/Content/PagedList.css '' rel= '' stylesheet '' / > < h2 > AllPosts < /h2 > < div class= '' allposts '' > < table class= '' table '' > < tr > < th > Title < /th > < th > Author < /th > < th > Category < /th > < th > Date < /th > < /tr > @ foreach ( var item in Model ) { < tr > < td > @ item.PostTitle < p class= '' actions '' > Edit | Delete | View < /p > < /td > < td > @ item.Author < /td > < td > @ item.CategoryName < /td > < td > @ item.DateCreated < /td > < /tr > } < /table > < /div > @ Html.PagedListPager ( Model , page = > Url.Action ( `` Index '' , new { page = page } ) , PagedListRenderOptions.OnlyShowFivePagesAtATime ) An exception of type 'System.NotSupportedException ' occurred in System.Data.Entity.dll but was not handled in user codeAdditional information : The method 'Skip ' is only supported for sorted input in LINQ to Entities . The method 'OrderBy ' must be called before the method 'Skip ' ."
"else if ( modelDescription is CollectionModelDescription ) { var collectionDescription = modelDescription as CollectionModelDescription ; var elementDescription = collectionDescription.ElementDescription ; @ : Collection of @ Html.DisplayFor ( m = > elementDescription.ModelType , `` ModelDescriptionLink '' , new { modelDescription = elementDescription } ) } else { @ Html.DisplayFor ( m = > modelDescription ) } [ Route ( `` Test '' ) ] public IHttpActionResult Post ( [ FromBody ] IEnumerable < MySimpleModel > models ) { return null ; } [ InvalidOperationException : Stack empty . ] System.ThrowHelper.ThrowInvalidOperationException ( ExceptionResource resource ) +52System.Collections.Generic.Stack ` 1.Peek ( ) +6693321System.Web.WebPages.WebPageBase.get_Output ( ) +51System.Web.WebPages.WebPageBase.GetOutputWriter ( ) +35System.Web.WebPages.WebPageExecutingBase.BeginContext ( String virtualPath , Int32 startPosition , Int32 length , Boolean isLiteral ) +50ASP._Page_Areas_HelpPage_Views_Help_DisplayTemplates_ModelDescriptionLink_cshtml.Execute ( ) in c : ... ModelDescriptionLink.cshtml:28System.Web.WebPages.WebPageBase.ExecutePageHierarchy ( ) +271System.Web.Mvc.WebViewPage.ExecutePageHierarchy ( ) +122System.Web.WebPages.WebPageBase.ExecutePageHierarchy ( WebPageContext pageContext , TextWriter writer , WebPageRenderingBase startPage ) +145System.Web.Mvc.RazorView.RenderView ( ViewContext viewContext , TextWriter writer , Object instance ) +695System.Web.Mvc.BuildManagerCompiledView.Render ( ViewContext viewContext , TextWriter writer ) +382System.Web.Mvc.Html.ActionCacheViewItem.Execute ( HtmlHelper html , ViewDataDictionary viewData ) +278 [ InvalidOperationException : Stack empty . ] System.ThrowHelper.ThrowInvalidOperationException ( ExceptionResource resource ) +52System.Collections.Generic.Stack ` 1.Pop ( ) +6667365System.Web.WebPages.WebPageBase.PopContext ( ) +66System.Web.WebPages.WebPageBase.ExecutePageHierarchy ( WebPageContext pageContext , TextWriter writer , WebPageRenderingBase startPage ) +154"
namespace MoviesLibrary { public class MovieDataSource { public MovieDataSource ( ) ; public int Create ( MovieData movie ) ; public List < MovieData > GetAllData ( ) ; public MovieData GetDataById ( int id ) ; public void Update ( MovieData movie ) ; } } public Movie GetMovieById ( int movieId ) { MovieData movieData = new MovieDataSource ( ) .GetDataById ( movieId ) ; if ( movieData ! = null ) { return MovieDataToMovieModel ( movieData ) ; } else { ? ? } } /// < summary > /// Returns a movie/// < /summary > /// < param name= '' movie '' > movieId < /param > /// < returns > Movie < /returns > public Movie Get ( int movieId ) { //try // { var movie = repository.GetMovieById ( movieId ) ; if ( movie == null ) { throw new HttpResponseException ( HttpStatusCode.NotFound ) ; } return movie ; // } //catch ( Exception e ) // { // if ( e is HttpResponseException ) // throw new HttpResponseException ( HttpStatusCode.NotFound ) ; // } }
public interface IControl < T > { T Value { get ; } } public class BoolControl : IControl < bool > { public bool Value { get { return true ; } } } public class StringControl : IControl < string > { public string Value { get { return `` '' ; } } } public class ControlFactory { public IControl GetControl ( string controlType ) { switch ( controlType ) { case `` Bool '' : return new BoolControl ( ) ; case `` String '' : return new StringControl ( ) ; } return null ; } }
"var tempFileName = System.IO.Path.GetTempFileName ( ) ; File.Delete ( tempFileName ) ; using ( var xpsDocument = new XpsDocument ( tempFileName , FileAccess.ReadWrite , CompressionOption.NotCompressed ) ) { var writer = XpsDocument.CreateXpsDocumentWriter ( xpsDocument ) ; writer.Write ( this.DocumentPaginator ) ; } using ( var xpsDocument = new XpsDocument ( tempFileName , FileAccess.Read , CompressionOption.NotCompressed ) ) { var xpsDoc = xpsDocument.GetFixedDocumentSequence ( ) ; return xpsDoc ; } writer.Write ( this.DocumentPaginator ) ; bei System.Windows.Threading.Dispatcher.VerifyAccess ( ) bei System.Windows.Threading.DispatcherObject.VerifyAccess ( ) bei System.Windows.Media.Imaging.BitmapDecoder.get_IsDownloading ( ) bei System.Windows.Media.Imaging.BitmapFrameDecode.get_IsDownloading ( ) bei System.Windows.Media.Imaging.BitmapSource.FreezeCore ( Boolean isChecking ) bei System.Windows.Freezable.Freeze ( Boolean isChecking ) bei System.Windows.PropertyMetadata.DefaultFreezeValueCallback ( DependencyObject d , DependencyProperty dp , EntryIndex entryIndex , PropertyMetadata metadata , Boolean isChecking ) bei System.Windows.Freezable.FreezeCore ( Boolean isChecking ) bei System.Windows.Media.Animation.Animatable.FreezeCore ( Boolean isChecking ) bei System.Windows.Freezable.Freeze ( ) bei System.Windows.Media.DrawingDrawingContext.DrawImage ( ImageSource imageSource , Rect rectangle , AnimationClock rectangleAnimations ) bei System.Windows.Media.DrawingDrawingContext.DrawImage ( ImageSource imageSource , Rect rectangle ) bei System.Windows.Media.DrawingContextDrawingContextWalker.DrawImage ( ImageSource imageSource , Rect rectangle ) bei System.Windows.Media.RenderData.BaseValueDrawingContextWalk ( DrawingContextWalker ctx ) bei System.Windows.Media.DrawingServices.DrawingGroupFromRenderData ( RenderData renderData ) bei System.Windows.UIElement.GetDrawing ( ) bei System.Windows.Media.VisualTreeHelper.GetDrawing ( Visual reference ) bei System.Windows.Xps.Serialization.VisualTreeFlattener.StartVisual ( Visual visual ) bei System.Windows.Xps.Serialization.ReachVisualSerializer.SerializeTree ( Visual visual , XmlWriter resWriter , XmlWriter bodyWriter ) bei System.Windows.Xps.Serialization.ReachVisualSerializer.SerializeObject ( Object serializedObject ) bei System.Windows.Xps.Serialization.DocumentPageSerializer.SerializeChild ( Visual child , SerializableObjectContext parentContext ) bei System.Windows.Xps.Serialization.DocumentPageSerializer.PersistObjectData ( SerializableObjectContext serializableObjectContext ) bei System.Windows.Xps.Serialization.ReachSerializer.SerializeObject ( Object serializedObject ) bei System.Windows.Xps.Serialization.DocumentPageSerializer.SerializeObject ( Object serializedObject ) bei System.Windows.Xps.Serialization.DocumentPaginatorSerializer.PersistObjectData ( SerializableObjectContext serializableObjectContext ) bei System.Windows.Xps.Serialization.DocumentPaginatorSerializer.SerializeObject ( Object serializedObject ) bei System.Windows.Xps.Serialization.XpsSerializationManager.SaveAsXaml ( Object serializedObject ) bei System.Windows.Xps.XpsDocumentWriter.SaveAsXaml ( Object serializedObject , Boolean isSync ) bei System.Windows.Xps.XpsDocumentWriter.Write ( DocumentPaginator documentPaginator ) < Image Source= { x : Null } / > public class CustomImage : Image { public CustomImage ( ) { this.Loaded += CustomImage_Loaded ; this.SourceUpdated += CustomImage_SourceUpdated ; } private void CustomImage_SourceUpdated ( object sender , System.Windows.Data.DataTransferEventArgs e ) { FreezeSource ( ) ; } private void CustomImage_Loaded ( object sender , System.Windows.RoutedEventArgs e ) { FreezeSource ( ) ; } private void FreezeSource ( ) { if ( this.Source == null ) return ; var freeze = this.Source as Freezable ; if ( freeze ! = null & & freeze.CanFreeze & & ! freeze.IsFrozen ) freeze.Freeze ( ) ; } } < StackPanel Orientation= '' Vertical '' > < StackPanel.Resources > < Style TargetType= '' { x : Type Button } '' > < Setter Property= '' Margin '' Value= '' 0,0,0,5 '' > < /Setter > < /Style > < /StackPanel.Resources > < Button Content= '' Open Window 1 '' Click= '' OpenWindowInNewThread '' / > < Button Content= '' Open Window 2 '' Click= '' OpenWindowInSameThread '' / > < /StackPanel > private void OpenWindowInNewThread ( object sender , RoutedEventArgs e ) { var th = new Thread ( ( ) = > { SynchronizationContext.SetSynchronizationContext ( new DispatcherSynchronizationContext ( Dispatcher.CurrentDispatcher ) ) ; var x = new Window1 ( ) ; x.Closed += ( s , ec ) = > Dispatcher.CurrentDispatcher.BeginInvokeShutdown ( DispatcherPriority.Background ) ; x.Show ( ) ; System.Windows.Threading.Dispatcher.Run ( ) ; } ) ; th.SetApartmentState ( ApartmentState.STA ) ; th.IsBackground = true ; th.Start ( ) ; } private void OpenWindowInSameThread ( object sender , RoutedEventArgs e ) { var x = new Window2 ( ) ; x.Show ( ) ; } < StackPanel Orientation= '' Horizontal '' > < ToggleButton Template= '' { StaticResource PlusToggleButton } '' / > < /StackPanel > < StackPanel Orientation= '' Horizontal '' > < ToggleButton Template= '' { StaticResource PlusToggleButton } '' / > < Button Content= '' Print Me '' Click= '' Print '' > < /Button > < /StackPanel > public void Print ( object sender , RoutedEventArgs e ) { PrintDialog pd = new PrintDialog ( ) ; pd.PrintVisual ( this , `` HelloWorld '' ) ; } < ControlTemplate x : Key= '' PlusToggleButton '' TargetType= '' { x : Type ToggleButton } '' > < Image Name= '' Image '' Source= '' /WpfApplication1 ; component/Images/plus.png '' Stretch= '' None '' / > < /ControlTemplate >"
Environment.Exit ( -1 ) ;
public string Read ( HttpRequest req ) { if ( req.Headers [ `` X-Requested-With '' ] == `` XMLHttpRequest '' ) { return req.Headers [ ConfigurationManager.AppSettings [ `` ajaxsession '' ] ] ; } return req.Cookies [ ConfigurationManager.AppSettings [ `` cookiename '' ] ] ; } [ Test ] public void ReadSessionToken_BrowserRequest_ExpectSidToken ( ) { var repo = new DefaultHttpContext ( ) ; }
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < customUI xmlns= '' http : //schemas.microsoft.com/office/2006/01/customui '' onLoad= '' Ribbon_Load '' > < ribbon > < tabs > < tab id= '' ribbon '' label= '' Ribbon '' > < group id= '' ribbonGroup '' label= '' Group '' > < menu id= '' menu '' label= '' Menu '' > < checkBox id= '' checkbox1 '' label= '' Checkbox 1 '' visible= '' true '' onAction= '' OnCheckboxChanged '' / > < checkBox id= '' checkbox2 '' label= '' Checkbox 2 '' visible= '' true '' onAction= '' OnCheckboxChanged '' / > < checkBox id= '' checkbox2 '' label= '' Checkbox 2 '' visible= '' true '' onAction= '' OnCheckboxChanged '' / > < /group > < /tab > < /tabs > < /ribbon > < /customUI > using System ; using System.Collections.Generic ; using System.IO ; using System.Linq ; using System.Reflection ; using System.Runtime.InteropServices ; using System.Text ; using System.Drawing ; using System.Windows.Forms ; using Office = Microsoft.Office.Core ; using Excel = Microsoft.Office.Interop.Excel ; using Microsoft.Office.Tools.Excel ; namespace ExcelAddIn1 { [ ComVisible ( true ) ] public class SSRRibbon : Office.IRibbonExtensibility { private Office.IRibbonUI ribbon ; public SSRRibbon ( ) { } # region IRibbonExtensibility-Member public string GetCustomUI ( string ribbonID ) { return GetResourceText ( `` ExcelAddIn1.SSRRibbon.xml '' ) ; } # endregion # region ribbon callback functions public void Ribbon_Load ( Office.IRibbonUI ribbonUI ) { this.ribbon = ribbonUI ; } public void OnCheckboxChanged ( Office.IRibbonControl control ) { int i = 1 ; } # endregion # region auxiliary private static string GetResourceText ( string resourceName ) { Assembly asm = Assembly.GetExecutingAssembly ( ) ; string [ ] resourceNames = asm.GetManifestResourceNames ( ) ; for ( int i = 0 ; i < resourceNames.Length ; ++i ) { if ( string.Compare ( resourceName , resourceNames [ i ] , StringComparison.OrdinalIgnoreCase ) == 0 ) { using ( StreamReader resourceReader = new StreamReader ( asm.GetManifestResourceStream ( resourceNames [ i ] ) ) ) { if ( resourceReader ! = null ) { return resourceReader.ReadToEnd ( ) ; } } } } return null ; } # endregion } }"
"public void GetMinMaxRange ( DataTable data , string valueColumnName ) { var min = data.AsEnumerable ( ) .Min ( m = > m.Field < double > ( valueColumnName ) ) ; var max = data.AsEnumerable ( ) .Max ( m = > m.Field < double > ( valueColumnName ) ) ; } public void GetMinMaxRange ( DataTable data , string valueColumnName ) { DataColumn column = data.Columns [ valueColumnName ] ; var min = data.AsEnumerable ( ) .Min ( m = > m.Field < column.DataType > ( valueColumnName ) ) ; var max = data.AsEnumerable ( ) .Max ( m = > m.Field < column.DataType > ( valueColumnName ) ) ; } public static double/decimal/int GetMinMaxRange < T > ( DataTable data , string valueColumnName ) where T : IComparable < T > { DataColumn column = data.Columns [ valueColumnName ] ; var min = data.AsEnumerable ( ) .Min ( m = > m.Field < T > ( valueColumnName ) ) ; var max = data.AsEnumerable ( ) .Max ( m = > m.Field < T > ( valueColumnName ) ) ; ; return max - min ; }"
"FORCEINLINELONGLONGInterlockedExchangeAdd64 ( _Inout_ LONGLONG volatile *Addend , _In_ LONGLONG Value ) { LONGLONG Old ; do { Old = *Addend ; } while ( InterlockedCompareExchange64 ( Addend , Old + Value , Old ) ! = Old ) ; return Old ; }"
"public enum MyEnum { open = 1 < < 00 , close = 1 < < 01 , Maybe = 1 < < 02 , ... ... .. }"
"import java.io.DataOutputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.PrintStream ; import java.util.concurrent.ExecutorService ; import java.util.concurrent.Executors ; import java.util.concurrent.ThreadPoolExecutor ; public class PoolDemo { static long FastestMemory = 2000000 ; static long SlowestMemory = 0 ; static long TotalTime ; static int [ ] FileArray ; static DataOutputStream outs ; static FileOutputStream fout ; static Byte myByte = 0 ; public static void main ( String [ ] args ) throws InterruptedException , FileNotFoundException { int Iterations = Integer.parseInt ( args [ 0 ] ) ; int ThreadSize = Integer.parseInt ( args [ 1 ] ) ; FileArray = new int [ Iterations ] ; fout = new FileOutputStream ( `` server_testing.csv '' ) ; // fixed pool , unlimited queue ExecutorService service = Executors.newFixedThreadPool ( ThreadSize ) ; ThreadPoolExecutor executor = ( ThreadPoolExecutor ) service ; for ( int i = 0 ; i < Iterations ; i++ ) { Task t = new Task ( i ) ; executor.execute ( t ) ; } for ( int j=0 ; j < FileArray.length ; j++ ) { new PrintStream ( fout ) .println ( FileArray [ j ] + `` , '' ) ; } } private static class Task implements Runnable { private int ID ; public Task ( int index ) { this.ID = index ; } public void run ( ) { long Start = System.currentTimeMillis ( ) ; int Size1 = 100000 ; int Size2 = 2 * Size1 ; int Size3 = Size1 ; byte [ ] list1 = new byte [ Size1 ] ; byte [ ] list2 = new byte [ Size2 ] ; byte [ ] list3 = new byte [ Size3 ] ; for ( int i=0 ; i < Size1 ; i++ ) { list1 [ i ] = myByte ; } for ( int i = 0 ; i < Size2 ; i=i+2 ) { list2 [ i ] = myByte ; } for ( int i = 0 ; i < Size3 ; i++ ) { byte temp = list1 [ i ] ; byte temp2 = list2 [ i ] ; list3 [ i ] = temp ; list2 [ i ] = temp ; list1 [ i ] = temp2 ; } long Finish = System.currentTimeMillis ( ) ; long Duration = Finish - Start ; TotalTime += Duration ; FileArray [ this.ID ] = ( int ) Duration ; System.out.println ( `` Individual Time `` + this.ID + `` \t : `` + ( Duration ) + `` ms '' ) ; if ( Duration < FastestMemory ) { FastestMemory = Duration ; } if ( Duration > SlowestMemory ) { SlowestMemory = Duration ; } } } }"
var dialog = new FolderBrowserDialog ( ) ; dialog.ShowDialog ( ) ; MessageBox.Show ( dialog.SelectedPath ) ;
"namespace EventDispatcher { public static class EVD { static Dispatcher evd { get { return Singleton < Dispatcher > .Instance ; } } public static void Subscribe ( string name , EvtHandler handler ) { evd.Subscribe ( name , handler ) ; } public static void UnSubscribe ( string name , EvtHandler handler = null ) { evd.UnSubscribe ( name , handler ) ; } public static void Dispatch ( string name , object sender , EvtArgs e = null ) { evd.Dispatch ( name , sender , e ) ; } } class Dispatcher : Dictionary < string , Event > { /* main event dispatcher */ } static class Singleton < T > where T : /* generic singleton creation */ } static Dispatcher evd = new Dispatcher ( ) ; static Dispatcher _evd ; static Dispatcher evd { get { return _evd ? ? ( _evd = new Dispatcher ( ) ) ; } }"
Regex regexObj = new Regex ( `` ( ? : a ) '' ) ; Match matchResults = regexObj.Match ( `` aa '' ) ; while ( matchResults.Success ) { foreach ( Capture g in matchResults.Captures ) { Console.WriteLine ( g.Value ) ; } matchResults = matchResults.NextMatch ( ) ; } aa
"System.ArgumentException : The actual value must be a collection Parametername : actualat NUnit.Framework.Constraints.CollectionConstraint.Matches ( Object actual ) at NUnit.Framework.Constraints.NotConstraint.Matches ( Object actual ) MyTestFile.cs ( 36,0 ) : at MyAssembly.MyTestFixture.MyTestMethod ( )"
"public bool TryGetValue ( TKey key , out TValue value ) { if ( key == null ) class Test < T > where T : class public class NullableDictionary < TKey , TValue > : IDictionary < TKey , TValue > where TKey : class"
public void OnActionExecuted ( ActionExecutedContext context ) { try { var controller = context.Controller as APIServiceBase ; var statusCode = controller.Response.StatusCode ; .. .. } catch { } }
"static void Main ( string [ ] args ) { int i = 2 ; long a = 1024 * 1024 * 1024 * i ; long b = 12345678901234567 ; System.Console.WriteLine ( `` { 0 } '' , a ) ; System.Console.WriteLine ( `` { 0 } '' , b ) ; System.Console.WriteLine ( `` { 0 } '' , long.MaxValue ) ; } -2147483648 12345678901234567 9223372036854775807 Press any key to continue . . ."
"[ Test ] public void SaveUser ( ) { // Arrange var user = new User ( ) ; // Set a bunch of properties of the above User object // Act var usersCountPreSave = repository.SearchSubscribersByUsername ( user.Username ) .Count ( ) ; repository.Save ( user ) ; var usersCountPostSave = repository.SearchSubscribersByUsername ( user.Username ) .Count ( ) ; // Assert Assert.AreEqual ( userCountPreSave + 1 , userCountPostSave ) ; }"
"public class Account : EntityData { //public int id { get ; set ; } public string FirstName { get ; set ; } public string LastName { get ; set ; } public string PhoneNumber { get ; set ; } public string Password { get ; set ; } public DateTime dtCreated { get ; set ; } public Guid oGuid { get ; set ; } } [ { `` id '' : 0 , `` FirstName '' : `` string '' , `` LastName '' : `` string '' , `` PhoneNumber '' : `` string '' , `` Password '' : `` string '' , `` dtCreated '' : `` 2016-07-06T17:45:47.114Z '' , `` oGuid '' : `` string '' , `` Id '' : `` string '' , `` Version '' : `` string '' , `` CreatedAt '' : `` 2016-07-06T17:45:47.114Z '' , `` UpdatedAt '' : `` 2016-07-06T17:45:47.114Z '' , `` Deleted '' : true } ] < add name= '' [ user created preset name ] '' providerName= '' System.Data.SqlClient '' connectionString= '' Server= [ Azuredb server connection ] ; initial catalog= [ DBName ] ; persist security info=True ; user id= [ user ] ; password= [ pass ] ; MultipleActiveResultSets=True '' / > private const string connectionStringName = `` Name= [ user created preset name ] '' ; modelBuilder.Entity < Account > ( ) .ToTable ( `` tblAccount '' ) ;"
"at MonoTouch.UIKit.UIApplication.Main ( System.String [ ] args , System.String principalClassName , System.String delegateClassName ) [ 0x00000 ] in < filename unknown > :0 at MonoTouch.UIKit.UIApplication.Main ( System.String [ ] args ) [ 0x00000 ] in < filename unknown > :0 at MyNamespace.MyProduct.MyProject.Application.Main ( System.String [ ] args ) [ 0x00000 ] in < filename unknown > :0"
"FileStream fs = File.Open ( `` \\\\s1\\temp\\test.tmp '' , FileMode.Append , FileAccess.Write , FileShare.None ) ; fs.Write ( data , 0 , data.Length ) ; fs.Close ( ) ;"
"iVirtualDocket - References iVirtualDocket.UIControls - References iVirtualDocket.CodeLibrary iVirtualDocket.UIControls -References iVirtualDocket.CodeLibrary public byte [ ] SignatureData { get { if ( _signature == null ) { return null ; } else { return iVirtualDocket.CodeLibrary.Conversions.ImageToByteArray ( _signature , ImageFormat.Png ) ; } } } public static byte [ ] ImageToByteArray ( Image imageToConvert , ImageFormat formatOfImage ) { byte [ ] ret ; using ( MemoryStream ms = new MemoryStream ( ) ) { imageToConvert.Save ( ms , formatOfImage ) ; ret = ms.ToArray ( ) ; } return ret ; } public byte [ ] SignatureData { get { if ( _signature == null ) { return null ; } else { // Need to call this code directly here instead of through // the CodeLibrary conversions , otherwise all user controls stop // rendering in design mode byte [ ] ret ; using ( MemoryStream ms = new MemoryStream ( ) ) { _signature.Save ( ms , ImageFormat.Png ) ; ret = ms.ToArray ( ) ; } return ret ; } } }"
services.AddSingleton < IServiceCollection > ( services ) ; [ Route ( `` api/v1/test '' ) ] public class TestController : Microsoft.AspNetCore.Mvc.Controller { private readonly IServiceCollection _services ; public TestController ( IServiceCollection services ) { _services = services ; var myInterface = HttpContext.RequestServices.GetService < IMyInterface > ( ) ; if ( myInterface == null ) { //check if dll exist and load it // ... . var implementation = new ForeignClassFromExternalDll ( ) ; _services.AddSingleton < IMyInterface > ( implementation ) ; } } [ HttpGet ] public IActionResult Test ( ) { var myInterface = HttpContext.RequestServices.GetService < IMyInterface > ( ) ; return Json ( myInterface.DoSomething ( ) ) ; } } public interface IMyInterface { /* ... */ } public class ForeignClassFromExternalDll : IMyInterface { /* ... */ }
"private class AuditCache { public Guid ObjectId ; public int HistoryId ; public DateTime ? DateFrom ; public DateTime ? DateTo ; public string Value ; } ; private HashSet < AuditCache > _ac = new HashSet < AuditCache > ( ) ; _ac.Add ( new AuditCache { ObjectId = currentObjectId , HistoryId = Convert.ToInt32 ( dr [ `` HistoryId '' ] ) , DateTo = Convert.ToDateTime ( dr [ `` CreatedOn '' ] ) , Value = value } ) ; var workList = new Dictionary < Guid , DateTime > ( ) ; foreach ( var g in workList ) List < AuditCache > currentSet = _ac.Where ( v = > v.ObjectId == g.Key ) .ToList ( ) ; Method # 0 - List with Lambda ~30.00s per 1,000 rows ( I never benchmarked this precisely ) Method # 1 - IntersectWith 40.24s per 1,000 rows ( cloning my Hashset spoilt this ) Method # 2 - BinarySearch 3.20s per 1,000 rowsMethod # 3 - Generic Dictionary 2.19s per 1,000 rows"
"var titleField = Infer.Field < Page > ( p = > p.Title , 2 ) ; var metaDescriptionField = Infer.Field < Page > ( p = > p.MetaDescription , 1.5 ) ; var metaKeywordsField = Infer.Field < Page > ( p = > p.Keywords , 2 ) ; var bodyField = Infer.Field < Page > ( p = > p.Body ) ; MultiMatchQuery multiMatchQuery = new MultiMatchQuery ( ) { Fields = new [ ] { bodyField , metaKeywordsField , metaKeywordsField , titleField } , Query = search.Term } ; MultiMatchQuery multiMatchQuery = new MultiMatchQuery ( ) { Fields = Infer.Fields < Page > ( p = > p.Title , p = > p.MetaDescription , p = > p.Keywords , p = > p.Body ) , Query = search.Term } ; var searchResponse = client.Search < Page > ( s = > s .MatchAll ( ) .From ( from ) .Size ( size ) .Fields ( f = > f.Field ( fi = > fi.Id ) .Field ( fi = > fi.SourceId ) ) ) ;"
"public class TestClass : IInterface { } public class Verifier { public static void Verify ( IInterface objectToVerify ) { Debug.Assert ( ( objectToVerify is TestClass ) , `` Passed object must be type of TestClass '' ) ; // ReSharper ( Version 7.1.1 ) marks here `` Expression is always false if ( ! ( objectToVerify is TestClass ) ) { return ; } // do something ... } }"
Text : ABC ( 123 ) Result : ( ABC ( 123Expected Result : ABC ( 123 )
"public void SaveSome ( ) { Array.ForEach ( Enumerable.Range ( 0,3 ) .ToArray ( ) , async x = > await SaveRep ( ) ) ; }"
"using System ; using Newtonsoft.Json ; namespace JsonTestje { class Other { public string Message2 { get ; set ; } } class Demo { public string Message { get ; set ; } public Other Other { get ; set ; } } class Program { static void Main ( string [ ] args ) { var demo = new Demo { Message = `` Hello , World ! `` , Other = new Other { Message2 = `` Here be dragons ! '' } } ; var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto , Formatting = Formatting.Indented } ; var serialized = JsonConvert.SerializeObject ( demo , settings ) ; Console.WriteLine ( serialized ) ; } } } { `` Message '' : `` Hello , World ! `` , `` Other '' : { `` Message2 '' : `` Here be dragons ! '' } } { `` $ type '' : `` JsonTestje.Demo , JsonTestje '' , `` Message '' : `` Hello , World ! `` , `` Other '' : { `` $ type '' : `` JsonTestje.Other , JsonTestje '' , `` Message2 '' : `` Here be dragons ! '' } } { `` $ type '' : `` JsonTestje.Demo , JsonTestje '' , `` Message '' : `` Hello , World ! `` , `` Other '' : { `` Message2 '' : `` Here be dragons ! '' } }"
"MATCH ( ab : Point { Latitude : 24.96325 , Longitude : 67.11343 } ) , ( cd : Point { Latitude : 24.95873 , Longitude : 67.10335 } ) , p = shortestPath ( ( ab ) - [ *..150 ] - ( cd ) ) RETURN p var pathsQuery = client.Cypher .Match ( `` ( ab : Point { Latitude : 24.96325 , Longitude : 67.11343 } ) , ( cd : Point { Latitude : 24.95873 , Longitude : 67.10335 } ) , p = shortestPath ( ( ab ) - [ *..150 ] - ( cd ) ) '' ) .Return < IEnumerable < PointEntity > > ( `` extract ( n in nodes ( p ) : id ( n ) ) '' ) ; var pathsQuery = client.Cypher .Match ( `` ( ab : Point { Latitude : 24.96325 , Longitude : 67.11343 } ) , ( cd : Point { Latitude : 24.95873 , Longitude : 67.10335 } ) , p = shortestPath ( ( ab ) - [ *..150 ] - ( cd ) ) '' ) .Return ( p = > new PathsResult < PointEntity > { Nodes = Return.As < IEnumerable < Node < PointEntity > > > ( `` nodes ( p ) '' ) , } ) ; var pathsQuery = client.Cypher .Match ( `` ( ab : Point { Latitude : 24.96325 , Longitude : 67.11343 } ) , ( cd : Point { Latitude : 24.95873 , Longitude : 67.10335 } ) , p = shortestPath ( ( ab ) - [ *..150 ] - ( cd ) ) '' ) var results = pathsQuery.Return < PathsResult > ( `` p '' ) .Results ; var paths = pathsQuery.Returns < PathsResult > ( `` EXTRACT ( n in nodes ( p ) : n ) AS Nodes , EXTRACT ( rel in rels ( p ) : rel ) AS Relationships '' , CypherResultMode.Projection ) .Results ; 'Neo4jClient.Cypher.ICypherFluentQuery ' does not contain a definition for 'Returns ' and no extension method 'Returns ' accepting a first argument of type 'Neo4jClient.Cypher.ICypherFluentQuery ' could be found ( are you missing a using directive or an assembly reference ? )"
| R1 | R2 | R3 | R4 |U1 | 3 | 1 | 2 | - |U2 | - | 3 | 2 | 2 |U3 | 5 | 4 | - | 4 |U4 | - | - | 5 | - |
"[ MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static void Add ( this IProject @ this , IComponent component ) { @ this.Components.Add ( component ) ; }"
public int Foo ( int a ) { // ... } // in some other methodint ? x = 0 ; x = Foo ( x ) ;
public interface MyInterface { void MyMethod ( ) ; }
"at System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack ( ) at System.Web.Http.Validation.DefaultBodyModelValidator.ValidateNodeAndChildren ( ModelMetadata metadata , ValidationContext validationContext , Object container , IEnumerable ` 1 validators ) at System.Web.Http.Validation.DefaultBodyModelValidator.ValidateProperties ( ModelMetadata metadata , ValidationContext validationContext ) public class Example { [ Required ] public string test { get ; set ; } [ Required ] public CustomEnumType myEnum { get ; set ; } }"
"[ AcceptVerbs ( HttpVerbs.Get ) ] public ActionResult Details ( string id ) { User user = UserRepo.UserByID ( id ) ; return View ( user ) ; } [ AcceptVerbs ( HttpVerbs.Post ) ] public ActionResult Details ( User user ) { return View ( user ) ; } < % using ( Html.BeginForm ( `` Details '' , `` User '' , FormMethod.Post ) ) { % > < fieldset > < legend > Userinfo < /legend > < % = Html.EditorFor ( m = > m.Name , `` LabelTextBoxValidation '' ) % > < % = Html.EditorFor ( m = > m.Email , `` LabelTextBoxValidation '' ) % > < % = Html.EditorFor ( m = > m.Telephone , `` LabelTextBoxValidation '' ) % > < /fieldset > < input type= '' submit '' id= '' btnChange '' value= '' Change '' / > < % } % > < % @ Control Language= '' C # '' Inherits= '' System.Web.Mvc.ViewUserControl < string > '' % > < % = Html.Label ( `` '' ) % > < % = Html.TextBox ( Model , Model ) % > < % = Html.ValidationMessage ( `` '' ) % >"
"this.FindControl ( `` ItemDisplayTitle '' ) .SetBinding ( TextBox.BackgrounProperty , **PATH** , new MyIconverter ( ) , BindingMode.OneWay ) ;"
$ folder = Get-ProjectFolder `` Views\Shared ''
"[ DebuggerDisplay ( @ '' One = { One } , two = { Two } '' ) ] public class A { public int One { get ; set ; } public B Two { get ; set ; } } [ DebuggerDisplay ( @ '' Three = { Three } '' ) ] public class B { public int Three { get ; set ; } } var a = new A { One = 5 , Two = new B { Three = 10 } } ; [ DebuggerDisplay ( @ '' One = { One } , two = 'Three = { Two.Three } ' '' ) ] [ DebuggerDisplay ( @ '' Three = { Three } '' ) ] public class B { public int Three { get ; set ; } public override string ToString ( ) { if ( Debugger.IsAttached ) { return string.Format ( @ '' Three = { 0 } '' , Three ) ; } else { return base.ToString ( ) ; } } }"
"public class ServiceEntity : BaseChild { public int Id { get ; set ; } } public class BaseChild { public string FirstName { get ; set ; } public string LastName { get ; set ; } public int Salary { get ; set ; } public string BkName { get ; set ; } public int BkPrice { get ; set ; } public string BkDescription { get ; set ; } } public class BusinessEntity { public ChildBussiness Details { get ; set ; } } public class ChildBussiness { public string NameFirst { get ; set ; } public string LastName { get ; set ; } public Books BookDetails { get ; set ; } public string Salary { get ; set ; } } public class Books { public string BookName { get ; set ; } public int BookPrice { get ; set ; } public string BookDescription { get ; set ; } } public ActionResult Index ( ) { ServiceEntity obj = GetData ( ) ; Mapper.CreateMap < ServiceEntity , BusinessEntity > ( ) .ForMember ( d = > d.Details , o = > o.MapFrom ( x = > new ChildBussiness { NameFirst = x.FirstName , LastName = x.LastName , Salary = x.Salary.ToString ( ) , BookDetails = new Books { BookDescription = x.BkDescription , BookName = x.BkName , BookPrice = x.BkPrice } } ) ) ; BusinessEntity objDetails = Mapper.Map < ServiceEntity , BusinessEntity > ( obj ) ; } ... ServiceEntity objser = new ServiceEntity ( ) ; Mapper.CreateMap < BusinessEntity , ServiceEntity > ( ) ; Mapper.CreateMap < Books , ServiceEntity > ( ) ; objser = Mapper.Map < BusinessEntity , ServiceEntity > ( model ) ; ..."
"public static UIView ConvertFormsToNative ( Xamarin.Forms.View view , CGRect size ) { var renderer = RendererFactory.GetRenderer ( view ) ; renderer.NativeView.Frame = size ; renderer.NativeView.AutoresizingMask = UIViewAutoresizing.All ; renderer.NativeView.ContentMode = UIViewContentMode.ScaleToFill ; renderer.Element.Layout ( size.ToRectangle ( ) ) ; var nativeView = renderer.NativeView ; nativeView.SetNeedsLayout ( ) ; return nativeView ; }"
"protectionProvider = new DpapiDataProtectionProvider ( `` OurProduct '' ) ; System.Security.Cryptography.CryptographicException : The data protection operation was unsuccessful . This may have been caused by not having the user profile loaded for the current thread 's user context , which may be the case when the thread is impersonating ."
for ( int i = 1 ; i < itemCounter+1 ; i++ ) { if ( explorer.CurrentFolder.Items [ i ] is Outlook.MailItem ) { //Do something } }
class MyButton : Button { Label foo = new Label ( ) ; ProgressBar bar = new ProgessBar ( ) ; }
"private void button1_Click ( object sender , EventArgs e ) { if ( this.Width == 188 ) { this.Width = 372 ; this.Height = 540 ; progressBar.Value = 100 ; copied_status.Text = ( `` Output View Enabled '' ) ; } else { progressBar.Value = 100 ; copied_status.Text = ( `` Output View Disabled '' ) ; this.Width = 188 ; this.Height = 540 ; } if ( this.Width == 372 ) { button1.Text = `` < < `` ; } else button1.Text = `` > > '' ; }"
"< DataGrid Grid.Row= '' 1 '' AutoGenerateColumns= '' False '' CanUserAddRows= '' False '' CanUserDeleteRows= '' False '' CanUserReorderColumns= '' False '' CanUserResizeColumns= '' False '' CanUserResizeRows= '' False '' CanUserSortColumns= '' False '' HorizontalScrollBarVisibility= '' Disabled '' ItemsSource= '' { Binding Path=MyCollection , Mode=OneWay } '' RowDetailsVisibilityMode= '' Collapsed '' RowHeaderStyle= '' { StaticResource ExpanderRowHeaderStyle } '' SelectionMode= '' Single '' SelectionUnit= '' Cell '' > < DataGrid Grid.Row= '' 1 '' AutoGenerateColumns= '' False '' CanUserAddRows= '' False '' CanUserDeleteRows= '' False '' CanUserReorderColumns= '' False '' CanUserResizeColumns= '' False '' CanUserResizeRows= '' False '' CanUserSortColumns= '' False '' HorizontalScrollBarVisibility= '' Disabled '' ItemsSource= '' { Binding Path=BstCollection , Mode=OneWay } '' RowDetailsVisibilityMode= '' Collapsed '' RowHeaderStyle= '' { StaticResource ExpanderRowHeaderStyle } '' SelectionMode= '' Single '' SelectionUnit= '' Cell '' EnableRowVirtualization= '' False '' Loaded= '' DataGrid_Loaded '' DataContextChanged= '' DataGrid_DataContextChanged '' ColumnWidth= '' * '' > < DataGrid.RowStyle > < Style TargetType= '' DataGridRow '' > < Style.Triggers > < DataTrigger Value= '' True '' > < DataTrigger.Binding > < MultiBinding Converter= '' { StaticResource IsLastOrderToBooleanMultiConverter } '' > < MultiBinding.Bindings > < Binding Mode= '' OneWay '' Path= '' BstCollection [ 0 ] .BesbstldOp '' Source= '' { StaticResource BstGbrModel } '' / > < ! -- ReSharper disable Xaml.BindingWithContextNotResolved -- > < Binding Mode= '' OneWay '' Path= '' BesbstldOp '' / > < Binding Mode= '' OneWay '' Path= '' BesHoeveelheid '' / > < ! -- ReSharper restore Xaml.BindingWithContextNotResolved -- > < /MultiBinding.Bindings > < /MultiBinding > < /DataTrigger.Binding > < Setter Property= '' Background '' Value= '' PowderBlue '' / > < /DataTrigger > < /Style.Triggers > < /Style > < /DataGrid.RowStyle > < DataGrid.Columns > < DataGridTemplateColumn Width= '' Auto '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- atlOmschrijving } '' IsReadOnly= '' True '' > < DataGridTemplateColumn.CellEditingTemplate > < DataTemplate DataType= '' bl : Bst '' > < TextBlock Text= '' { Binding atlOmschrijving , Mode=OneWay } '' IsEnabled= '' False '' / > < /DataTemplate > < /DataGridTemplateColumn.CellEditingTemplate > < DataGridTemplateColumn.CellTemplate > < DataTemplate DataType= '' bl : Bst '' > < TextBlock > < Run Text= '' { Binding atlOmschrijving , Mode=OneWay } '' / > < Run Foreground= '' Red '' Text= '' { Binding Path=atl.atlVKMat , Mode=OneWay , Converter= { StaticResource BooleanToBstTextConverter } } '' / > < /TextBlock > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < /DataGridTemplateColumn > < DataGridTextColumn Width= '' Auto '' Binding= '' { Binding Path=BesbstldOp , Mode=OneWay , Converter= { StaticResource DateToStringValueConverter } } '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- BesbstldOp } '' IsReadOnly= '' True '' / > < DataGridTextColumn Width= '' Auto '' Binding= '' { Binding Path=BesGeleverdOp , Mode=OneWay , Converter= { StaticResource DateToStringValueConverter } } '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- BesGeleverdOp } '' IsReadOnly= '' True '' / > < DataGridTextColumn Width= '' * '' Binding= '' { Binding Path=BesHoeveelheid , Mode=OneWay , Converter= { StaticResource IntToStringValueConverter } } '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- BesHoeveelheid } '' IsReadOnly= '' True '' / > < DataGridTextColumn Width= '' Auto '' Binding= '' { Binding Path=atlbstleenheid , Mode=OneWay } '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- atlbstleenheid } '' IsReadOnly= '' True '' / > < DataGridTextColumn Width= '' * '' Binding= '' { Binding Path=vpeNaam , Mode=OneWay } '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- vpeNaam } '' IsReadOnly= '' True '' / > < DataGridTemplateColumn Width= '' * '' MinWidth= '' 85 '' Header= '' { specialLocalization : Translate CtlBstGbr -- grdBsten -- NHoevheid } '' > < DataGridTemplateColumn.CellTemplate > < DataTemplate DataType= '' bl : Bst '' > < TextBlock Text= '' { Binding NHoevheid , Mode=OneWay } '' IsEnabled= '' { Binding atl.atlVKMat , Mode=OneWay } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < DataGridTemplateColumn.CellEditingTemplate > < DataTemplate DataType= '' bl : Bst '' > < customControls : UpDownTextBox MinValue= '' 0 '' Text= '' { Binding NHoevheid , Mode=TwoWay } '' Visibility= '' { Binding Path=atl.atlVKMat , Mode=OneWay , Converter= { StaticResource BooleanToVisibilityConverter } } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellEditingTemplate > < /DataGridTemplateColumn > < /DataGrid.Columns > < DataGrid.RowDetailsTemplate > < DataTemplate DataType= '' bl : Bst '' > < Grid > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' Auto '' / > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < Label Grid.Row= '' 0 '' Grid.Column= '' 0 '' Content= '' { specialLocalization : Translate CtlBstGbr -- lblatl -- } '' / > < TextBox Grid.Row= '' 0 '' Grid.Column= '' 1 '' IsReadOnly= '' True '' Text= '' { Binding Path=atlOmschrijving , Mode=OneWay } '' / > < Label Grid.Row= '' 1 '' Grid.Column= '' 0 '' Content= '' { specialLocalization : Translate CtlBstGbr -- lblInfo -- } '' / > < TextBox Grid.Row= '' 1 '' Grid.Column= '' 1 '' Height= '' 75 '' AcceptsReturn= '' True '' IsReadOnly= '' True '' Text= '' { Binding Path=atl.ArtInfo , Mode=OneWay } '' TextWrapping= '' WrapWithOverflow '' VerticalScrollBarVisibility= '' Visible '' / > < /Grid > < /DataTemplate > < /DataGrid.RowDetailsTemplate > < /DataGrid >"
"Expression < Func < User , bool > > e1 = ( User u ) = > u.IsActive & & u.Group ! = `` PROCESS '' & & u.Name ! = null ; Expression < Func < User , bool > > e2 = ( User u ) = > u.IsActive & & u.Group ! = `` PROCESS '' & & u.Name ! = `` A '' ; Expression < Func < User , bool > > e3 = ( User u ) = > u.IsActive & & u.Group ! = `` PROCESS '' & & u.Name ! = `` B '' ;"
"$ [ data for first line goes here ] $ [ data for second line goes here ] ... var port = new SerialPort ( `` COM3 '' , 4800 ) ; var serialPortSource = Observable.FromEventPattern < SerialDataReceivedEventHandler , SerialDataReceivedEventArgs > ( handler = > port.DataReceived += handler , handler = > port.DataReceived -= handler ) .Select ( e = > port.ReadExisting ( ) ) ; $ [ data for first line goes here ] \r\n $ [ data forsecond line goes here ] public static IEnumerable < string > ToNmeaSentence ( this IEnumerable < char > characters ) { var sb = new StringBuilder ( ) ; foreach ( var ch in characters ) { if ( ch == ' $ ' & & sb.Length > 0 ) { yield return sb.ToString ( ) ; sb.Clear ( ) ; } sb.Append ( ch ) ; } }"
public void myMethod ( ) { if ( .. ) else if ( .. ) else if ( ... ) else if ( ... ) else if ( ... ) //and so on }
long l = 1 ; object obj = ( object ) l ; double d = ( double ) obj ;
"void Main ( ) { Poetry ( ) ; while ( true ) { Console.WriteLine ( `` Outside , within Main . `` ) ; Thread.Sleep ( 200 ) ; } } async void Poetry ( ) { //.. stuff happens before await await Task.Delay ( 10 ) ; for ( int i = 0 ; i < 10 ; i++ ) { Console.WriteLine ( `` Inside , after await . `` ) ; Thread.Sleep ( 200 ) ; } }"
"var random1 = new Random ( 0 ) ; var random2 = new Random ( 1 ) ; var random3 = new Random ( int.MaxValue ) ; //2,147,483,647var buffer1 = new byte [ 8 ] ; var buffer2 = new byte [ 8 ] ; var buffer3 = new byte [ 8 ] ; random1.NextBytes ( buffer1 ) ; random2.NextBytes ( buffer2 ) ; random3.NextBytes ( buffer3 ) ; for ( int i = 0 ; i < 8 ; i++ ) { Console.WriteLine ( `` { 0 } \t\t { 1 } \t\t { 2 } '' , buffer1 [ i ] , buffer2 [ i ] , buffer3 [ i ] ) ; } 26 70 2612 208 1270 134 76111 130 11193 64 93117 151 115228 228 228216 163 216"
if ( ! _isPostBack ) { // Do security check if ( userIsNotAuthorized ) { btnViewReports.Visible = false ; btnEditDetails.Visible = false ; // etc . } }
"SELECT node.GroupName , depth = COUNT ( parent.GroupName ) - 1FROM CompanyGroup nodeJOIN CompanyGroup parent ON node.LeftID BETWEEN parent.LeftID AND parent.RightIDGROUP BY node.GroupName , node.LeftIDORDER BY node.LeftID ; var groupModel = from node in db.CompanyGroups join parent in db.CompanyGroups.Where ( node.LeftID > parent.LeftID & & node.LeftID < parent.RightID ) orderby node.LeftID select node.GroupName ;"
ConsoleKeyInfo ki = System.Console.ReadKey ( ) ; if ( ki.ConsoleKey.Oem2 ) // Do something
"static double NormalFunction ( ) { double a = 0 ; for ( int j = 0 ; j < s_OuterLoopCount ; ++j ) { for ( int i = 0 ; i < s_InnerLoopCount ; ++i ) { double b = i * 2 ; a = a + b + 1 ; } } return a ; } static double TinyFunctions ( ) { double a = 0 ; for ( int i = 0 ; i < s_OuterLoopCount ; i++ ) { a = Loop ( a ) ; } return a ; } static double Loop ( double a ) { for ( int i = 0 ; i < s_InnerLoopCount ; i++ ) { double b = Double ( i ) ; a = Add ( a , Add ( b , 1 ) ) ; } return a ; } static double Double ( double a ) { return a * 2 ; } static double Add ( double a , double b ) { return a + b ; } s_OuterLoopCount = 10000 ; s_InnerLoopCount = 10000 ; NormalFunction Time = 377 ms ; TinyFunctions Time = 1322 ms ; s_OuterLoopCount = 10000 ; s_InnerLoopCount = 10000 ; NormalFunction Time = 173 ms ; TinyFunctions Time = 98 ms ; static double NormalFunction ( ) { double a = 0 ; for ( int j = 0 ; j < s_OuterLoopCount ; ++j ) { for ( int i = 0 ; i < s_InnerLoopCount ; ++i ) { double b = i * 2 ; a = b + 1 + a ; } } return a ; } s_OuterLoopCount = 10000 ; s_InnerLoopCount = 10000 ; NormalFunction Time = 91 ms ; TinyFunctions Time = 102 ms ; s_OuterLoopCount = 10000 ; s_InnerLoopCount = 10000 ; NormalFunction Time = 87 ms ; TinyFunctions Time = 52 ms ;"
public AppHost : AppHostBase { ... public override void Configure ( Container container ) { //Register custom serialization routine ServiceStack.Text.JsConfig < CultureInfo > .SerializeFn = r = > r.TwoLetterISOLanguageName ; ServiceStack.Text.JsConfig < CultureInfo > .DeSerializeFn = r = > return new CultureInfo ( r ) ; } }
"public static class StringExtension { public static string ReplaceNewLine ( this string s ) { return s.Replace ( `` | '' , Environment.NewLine ) ; } // show hint if c is | public static string ReplaceNewLine ( this string s , string c ) { return s.Replace ( c , Environment.NewLine ) ; } }"
"using System ; using System.Runtime.InteropServices ; public class Program { class MutableSlab : IDisposable { private GCHandle handle ; public MutableSlab ( ) { this.handle = GCHandle.Alloc ( new byte [ 256 ] , GCHandleType.Pinned ) ; } public bool IsAllocated = > this.handle.IsAllocated ; public void Dispose ( ) { this.handle.Free ( ) ; } } class ImmutableSlab : IDisposable { private readonly GCHandle handle ; public ImmutableSlab ( ) { this.handle = GCHandle.Alloc ( new byte [ 256 ] , GCHandleType.Pinned ) ; } public bool IsAllocated = > this.handle.IsAllocated ; public void Dispose ( ) { this.handle.Free ( ) ; } } public static void Main ( ) { var mutableSlab = new MutableSlab ( ) ; var immutableSlab = new ImmutableSlab ( ) ; mutableSlab.Dispose ( ) ; immutableSlab.Dispose ( ) ; Console.WriteLine ( $ '' { nameof ( mutableSlab ) } .handle.IsAllocated = { mutableSlab.IsAllocated } '' ) ; Console.WriteLine ( $ '' { nameof ( immutableSlab ) } .handle.IsAllocated = { immutableSlab.IsAllocated } '' ) ; } } mutableSlab.handle.IsAllocated = FalseimmutableSlab.handle.IsAllocated = True"
class SomeClass { object _locker1 = new object ( ) ; object _locker2 = new object ( ) ; public void A ( ) { Monitor.Enter ( _locker1 ) ; //Do something Monitor.Exit ( _locker1 ) ; Monitor.Enter ( _locker2 ) ; //Do something Monitor.Exit ( _locker2 ) ; } public void B ( ) { Monitor.Enter ( _locker2 ) ; //Do something Monitor.Exit ( _locker2 ) ; Monitor.Enter ( _locker1 ) ; //Do something Monitor.Exit ( _locker1 ) ; } } class SomeClass { object _locker1 = new object ( ) ; object _locker2 = new object ( ) ; public void A ( ) { Monitor.Enter ( _locker1 ) ; //Do something Monitor.Enter ( _locker2 ) ; Monitor.Exit ( _locker1 ) ; //Do something Monitor.Exit ( _locker2 ) ; } public void B ( ) { Monitor.Enter ( _locker2 ) ; //Do something Monitor.Enter ( _locker1 ) ; Monitor.Exit ( _locker2 ) ; //Do something Monitor.Exit ( _locker1 ) ; } }
1 . 200- > ... .2 . 300- > ... .3 . ... .4 . 405- > ... . 5 . 001- > first_user_name6 . 002- > first_user_phone7 . 003- > first_user_fax8 . 001- > second_user_name9 . 001- > third_user_name10 . 002- > third_user_phone11 . 003- > third_user_fax12 . 004- > third_user_address13 . ... ..14 . 001- > last_user_name15 . 003- > last_user_fax private List < User > ParseUsers ( Message message ) { List < User > users = new List < User > ( ) ; User user = null ; String val = String.Empty ; for ( Int32 i = message.IndexOfFirst ( Keys.Name ) ; i < message.Count ; i++ ) { val = message [ i ] .Val ; switch ( message [ i ] .Key ) { case Keys.Name : user = new User ( val ) ; users.Add ( user ) ; break ; case Keys.Phone : user.Phone = val ; break ; case Keys.Fax : user.Fax = val ; break ; case Keys.Address : user.Address = val ; break ; default : break ; } } return users ; }
try { some work } catch ( Exeption e ) { commonExceptionHandler ( ) ; } lowLevelMethod ( ) { try { lowestLevelMethod ( ) ; } finally { some really important stuff } } try { lowLevel ( ) } catch ( Exception e ) { exception handling and maybe rethrowing }
"using ( var frm = new OpenFileDialog ( ) ) { frm.DefaultExt = `` dll '' ; frm.Title = `` Select dll ... '' ; frm.Filter = `` Model files ( *.dll ) |*.dll '' ; answer = frm.ShowDialog ( this ) ; if ( answer == DialogResult.OK ) { domain = AppDomain.CreateDomain ( `` Model '' , new Evidence ( AppDomain.CurrentDomain.Evidence ) ) ; try { domain.CreateInstanceFrom ( frm.FileName , `` DummyNamespace.DummyObject '' ) ; modelIsValid = true ; } catch ( TypeLoadException ) { ... } finally { if ( domain ! = null ) AppDomain.Unload ( domain ) ; } } } foreach ( var ass in domain.GetAssemblies ( ) ) //Do not fret , I would run this before unloading the AppDomain Console.WriteLine ( ass.FullName ) ;"
< Experiment name= '' test2 '' loc= '' lab '' timestamp= '' 65420233400 '' > < Instrument name= '' a1 '' rev= '' 1.0 '' / > < Calibration > < date > 13-02-10 < /date > < type > complete < /type > < /Calibration > < /Experiment > < rdf : RDF xmlns : rdf= '' http : //www.w3.org/1999/02/22-rdf-syntax-ns # '' xmlns : zotty= '' http : //www.zotty.com/rdf/ '' > < zotty : experiment > < rdf : Bag > < zotty : name > test2 < /zotty : name > < zotty : loc > lab < /zotty : loc > < zotty : timestamp > 65420233400 < /zotty : timestamp > < zotty : instrument > < rdf : Bag > < zotty : name > a1 < /zotty : name > < zotty : rev > 1.0 < /zotty : rev > < zotty : calibration > < rdf : bag > < zotty : date > 13-02-10 < /zotty : date > < zotty : type > complete < /zotty : type > < /rdf : bag > < /zotty : calibration > < /rdf : Bag > < /zotty : instrument > < rdf : Bag > < /zotty : experiment > < /rdf : RDF >
"public static void OpTest < T > ( T s , T t ) where T : class { System.Console.WriteLine ( s == t ) ; } static void Main ( ) { string s1 = `` строка '' ; System.Text.StringBuilder sb = new System.Text.StringBuilder ( s1 ) ; System.Console.Write ( sb ) ; string s2 = sb.ToString ( ) ; OpTest < string > ( s1 , s2 ) ; }"
public async Task < ActionResult > OnPostSend ( ConditionResponse conditionResponse ) { var files = HttpContext.Request.Form.Files ; } public class ConditionResponse { public List < string > Plots { get ; set ; } public string Comments { get ; set ; } public List < IFormFile > Files { get ; set ; } }
public sealed class WorkItemType
"Dim query = From oa In db.Authors _ Group oa By oa.Book Into grouping = Group _ Select Author = Book , Count = grouping.Count ( Function ( s ) s.AuthorId ) - Author A : 2 books - Author B : 3 books - Author C : 1 book - Author A : 2 books - Author B : 3 books - Author C : 1 book - Author D : 0 book - Author E : 0 book"
"Int for 1000 took 9896625613 tick ( 4227 msec ) UInt16 for 1000 took 6297688551 tick ( 2689 msec ) public static UInt16 [ ] GenerateRandomDataUInt16 ( int length ) { UInt16 [ ] noise = new UInt16 [ length ] ; Random random = new Random ( ( int ) DateTime.Now.Ticks ) ; for ( int i = 0 ; i < length ; ++i ) { noise [ i ] = ( UInt16 ) random.Next ( ) ; } return noise ; } public static int [ ] GenerateRandomDataInt ( int length ) { int [ ] noise = new int [ length ] ; Random random = new Random ( ( int ) DateTime.Now.Ticks ) ; for ( int i = 0 ; i < length ; ++i ) { noise [ i ] = ( int ) random.Next ( ) ; } return noise ; } public static int [ ] AddInt ( int [ ] a , int [ ] b ) { int len = a.Length ; int [ ] result = new int [ len ] ; for ( int i = 0 ; i < len ; ++i ) { result [ i ] = ( int ) ( a [ i ] + b [ i ] ) ; } return result ; } public static UInt16 [ ] AddUInt16 ( UInt16 [ ] a , UInt16 [ ] b ) { int len = a.Length ; UInt16 [ ] result = new UInt16 [ len ] ; for ( int i = 0 ; i < len ; ++i ) { result [ i ] = ( ushort ) ( a [ i ] + b [ i ] ) ; } return result ; } public static void Main ( ) { int count = 1000 ; int len = 128 * 6000 ; int [ ] aInt = GenerateRandomDataInt ( len ) ; int [ ] bInt = GenerateRandomDataInt ( len ) ; Stopwatch s = new Stopwatch ( ) ; s.Start ( ) ; for ( int i=0 ; i < count ; ++i ) { int [ ] resultInt = AddInt ( aInt , bInt ) ; } s.Stop ( ) ; Console.WriteLine ( `` Int for `` + count + `` took `` + s.ElapsedTicks + `` tick ( `` + s.ElapsedMilliseconds + `` msec ) '' ) ; UInt16 [ ] aUInt16 = GenerateRandomDataUInt16 ( len ) ; UInt16 [ ] bUInt16 = GenerateRandomDataUInt16 ( len ) ; s = new Stopwatch ( ) ; s.Start ( ) ; for ( int i=0 ; i < count ; ++i ) { UInt16 [ ] resultUInt16 = AddUInt16 ( aUInt16 , bUInt16 ) ; } s.Stop ( ) ; Console.WriteLine ( `` UInt16 for `` + count + `` took `` + s.ElapsedTicks + `` tick ( `` + s.ElapsedMilliseconds + `` msec ) '' ) ; }"
Activity activity ; activity.Start = `` 2010-01-01 '' ; activity.Duration = `` 10 days '' ; // sets Finish property to `` 2010-01-10 ''
public MyClass : ViewModelBase { private int someVariable ; public int SomeVariable { get { return this.someVariable ; } set { this.someVariable = value ; this.NotifyPropertyChanged ( `` SomeVariable '' ) ; } } }
"< ItemGroup > < PackageReference Include= '' Microsoft.AspNetCore.Http '' Version= '' 2.2.2 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Http.Features '' Version= '' 3.0.0 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Mvc.Core '' Version= '' 2.2.5 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Mvc.NewtonsoftJson '' Version= '' 3.0.0 '' / > < PackageReference Include= '' Microsoft.Extensions.Http '' Version= '' 3.0.0 '' / > < PackageReference Include= '' Microsoft.Net.Http.Headers '' Version= '' 2.2.0 '' / > using Microsoft.AspNetCore.Http.Internal ; IFormFile f = new FormFile ( memoryStream , 0 , memoryStream.Length , `` test '' , `` test.pdf '' ) ; // C : \Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.aspnetcore.http\2.2.0\lib\netstandard2.0\Microsoft.AspNetCore.Http.dll # endregionusing System.IO ; using System.Runtime.CompilerServices ; using System.Threading ; using System.Threading.Tasks ; namespace Microsoft.AspNetCore.Http.Internal { public class FormFile : IFormFile }"
http : //stackoverflow.com/questions/ { question-id } / { slug-made-from-question-title } http : //stackoverflow.com/questions/6291678/convert-input-string-to-a-clean-readable-and-browser-acceptable-route-data http : //stackoverflow.com/questions/6291678/naveen
"public class TreeNode { public enum NodeType { Root , Element , Category } public TreeNode ( ) { Children = new List < TreeNode > ( ) ; } public List < TreeNode > Children { get ; set ; } public string Name { get ; set ; } public NodeType Type { get ; set ; } } Root||_ NodeA ( Element ) |_ Node B ( Element ) | |_ Node B.1 ( Category ) |_ Node C ( Element ) | |_ Node C.1 ( Element ) | |_Node C.1.1 ( Category ) |_ Node D ( Element ) |_Node D.1 ( Element ) Root||_ Node B ( Element ) | |_ Node B.1 ( Category ) |_ Node C ( Element ) |_ Node C.1 ( Element ) |_Node C.1.1 ( Category )"
for ( int i = 0 ; i < 1000 ; i++ ) { int mod = i % 1795 ; //Do some operations here }
ICarFord implements ICarBmw implements ICarToyota implements ICarpublic ICar GetCarByPerson ( int personId ) ICar car = GetCarByPerson ( personId ) ; if ( car is Bmw ) { ( ( Bmw ) car ) .BmwSpecificMethod ( ) ; } else if ( car is Toyota ) { ( ( Toyota ) car ) .ToyotaSpecificMethod ( ) ; }
"public class Demo { public void When ( Func < Person , bool > condition ) { if ( ! condition ) { Log.Info ( `` Condition not met . `` ) ; return ; } // Do something } } demo.When ( x = > x.Name == `` John '' ) ;"
class MyObject { public bool selected ; public int id ; public string name ; } List < MyObject > theObjects = functionThatSelectsObjectsFromContainer ( ) ; List < int > idList = functionThatReturnsListOfIds ( ) ;
# header { background-color : { 0 } ; } < img src= '' { 1 } '' / > < span > { 2 } < /span >
"TestPackage testPackage = new TestPackage ( assemblyName ) ; RemoteTestRunner remoteTestRunner = new RemoteTestRunner ( ) ; remoteTestRunner.Load ( testPackage ) ; TestResult testResult = remoteTestRunner.Run ( new NullListener ( ) , TestFilter.Empty , false , LoggingThreshold.Error ) ;"
public void MyMainMethod ( ) { var getResult = Task.Run ( async ( ) = > { await getResultAsync ( ) ; } ) .Result ; myLabel.Text = getResult ; }
"var searchTerms = `` John Doe '' .Split ( new [ ] { ' ' } , StringSplitOptions.RemoveEmptyEntries ) ; var query = session.Query < Person , PersonIndex > ( ) .Where ( x = > x.FirstName.StartsWithAnyOf ( searchTerms ) || x.LastName.StartsWithAnyOf ( searchTerms ) ) ; var query = session.Query < Person , PersonIndex > ( ) .Where ( x = > x.FirstName.Starts ( searchTerms [ 0 ] ) || x.LastName.StartsWith ( searchTerms [ 0 ] ) || x.FirstName.Starts ( searchTerms [ 1 ] ) || x.LastName.StartsWith ( searchTerms [ 1 ] ) ) ;"
void Main ( ) { int a=5 ; int b=6 ; if ( a < b ) Console.Write ( `` 333 '' ) ; Console.ReadLine ( ) ; } IL_0000 : ldc.i4.5 IL_0001 : stloc.0 IL_0002 : ldc.i4.6 IL_0003 : stloc.1 IL_0004 : ldloc.0 IL_0005 : ldloc.1 IL_0006 : bge.s IL_0012IL_0008 : ldstr `` 333 '' IL_000D : call System.Console.WriteIL_0012 : call System.Console.ReadLine IL_0000 : ldc.i4.5IL_0001 : ldc.i4.6 IL_0002 : bge.s IL_0004IL_0003 : ldstr `` 333 '' IL_0004 : call System.Console.WriteIL_0005 : call System.Console.ReadLine
"No . Member Date1 . 163992 3/8/2012 12:28:13 PM2 . 163993 3/8/2012 12:28:13 PM ... 85 . 164469 3/8/2012 12:28:37 PM86 . 163992 3/8/2012 12:28:44 PM87 . 163993 3/8/2012 12:28:44 PM ... 798 . 167691 3/8/2012 12:32:36 PM foreach ( var recipient in recipientsToEmail ) { _emailSender.SendMemberRegistrationActivationReminder ( eventArgs.Newsletter , eventArgs.RecipientNotificationInfo , previewEmail : string.Empty ) ; } public void SendMemberRegistrationActivationReminder ( DomainObjects.Newsletters.Newsletter newsletter , DomainObjects.Members.MemberEmailNotificationInfo recipient , string previewEmail ) { //Build message here ... ..//Send the message this.SendEmailAsync ( fromAddress : _settings.WebmasterEmail , toAddress : previewEmail.IsEmailFormat ( ) ? previewEmail : recipientNotificationInfo.Email , subject : emailSubject , body : completeMessageBody , memberId : previewEmail.IsEmailFormat ( ) ? null //if this is a preview message , do not mark it as being sent to this member : ( int ? ) recipientNotificationInfo.RecipientMemberPhotoInfo.Id , newsletterId : newsletter.Id , newsletterTypeId : newsletter.NewsletterTypeId , utmCampaign : utmCampaign , languageCode : recipientNotificationInfo.LanguageCode ) ; } private void SendEmailAsync ( string fromAddress , string toAddress , string subject , MultiPartMessageBody body , int ? memberId , string utmCampaign , string languageCode , int ? newsletterId = null , DomainObjects.Newsletters.NewsletterTypeEnum ? newsletterTypeId = null ) { var urlHelper = UrlHelper ( ) ; var viewOnlineUrlFormat = urlHelper.RouteUrl ( `` UtilityEmailRead '' , new { msgid = `` msgid '' , hash = `` hash '' } ) ; ThreadPool.QueueUserWorkItem ( state = > SendEmail ( fromAddress , toAddress , subject , body , memberId , newsletterId , newsletterTypeId , utmCampaign , viewOnlineUrlFormat , languageCode ) ) ; }"
"discord.MessageReceived += async ( s , e ) = > { if ( e.Message.RawText.Contains ( `` Cthulhu '' ) ) await e.Channel.SendMessage ( `` *Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn* '' ) ; } ;"
1 1 1 ... ... ... x x x x x x ... ... x x 1 1 x x ... ... x 1 x x x x ... ... x x x x x x ... ... ... List < Position > GetMatchVertical ( int reelID ) { List < Position > ret = new List < Position > ( ) ; var myReel = board [ reelID ] ; var leftReel = reelID - 1 > = 0 ? board [ reelID - 1 ] : null ; var rightReel = reelID + 1 < boardSize ? board [ reelID + 1 ] : null ; int currentColor = myReel [ 0 ] ; for ( int reelPosition = 1 ; reelPosition < boardSize ; reelPosition++ ) { int nextColor = myReel [ reelPosition ] ; if ( currentColor == nextColor ) { if ( leftReel ! =null ) { if ( reelPosition + 1 < boardSize & & leftReel [ reelPosition + 1 ] == currentColor ) { ret.Add ( logPosition ( ... ) ) ; } } if ( rightReel ! =null ) { if ( reelPosition - 2 > = 0 & & rightReel [ reelPosition - 2 ] == currentColor ) { ret.Add ( logPosition ( ... ) ) ; } } } else { currentColor = nextColor ; } } return ret ; }
"class Base : IEquatable < Base > { public readonly ImmutableType1 X ; readonly ImmutableType2 Y ; public Base ( ImmutableType1 X , ImmutableType2 Y ) { this.X = X ; this.Y = Y ; } public override bool Equals ( object obj ) { if ( object.ReferenceEquals ( this , obj ) ) return true ; if ( obj is null || obj.GetType ( ) ! =this.GetType ( ) ) return false ; return obj is Base o & & X.Equals ( o.X ) & & Y.Equals ( o.Y ) ; } public override int GetHashCode ( ) = > HashCode.Combine ( X , Y ) ; // boilerplate public bool Equals ( Base o ) = > object.Equals ( this , o ) ; public static bool operator == ( Base o1 , Base o2 ) = > object.Equals ( o1 , o2 ) ; public static bool operator ! = ( Base o1 , Base o2 ) = > ! object.Equals ( o1 , o2 ) ; } class Derived : Base , IEquatable < Derived > { public readonly ImmutableType3 Z ; readonly ImmutableType4 K ; public Derived ( ImmutableType1 X , ImmutableType2 Y , ImmutableType3 Z , ImmutableType4 K ) : base ( X , Y ) { this.Z = Z ; this.K = K ; } public override bool Equals ( object obj ) { if ( object.ReferenceEquals ( this , obj ) ) return true ; if ( obj is null || obj.GetType ( ) ! =this.GetType ( ) ) return false ; return obj is Derived o & & base.Equals ( obj ) /* ! */ & & Z.Equals ( o.Z ) & & K.Equals ( o.K ) ; } public override int GetHashCode ( ) = > HashCode.Combine ( base.GetHashCode ( ) , Z , K ) ; // boilerplate public bool Equals ( Derived o ) = > object.Equals ( this , o ) ; }"
public static void Run ( ) { DoStuffAsync ( ) ; } public static async Task DoStuffAsync ( ) { PerformCalc ( ) ; await DoLongTaskAsync ( ) ; PerformAnotherCalc ( ) ; }
"WebClient client = new WebClient ( ) ; String username = `` myusername '' ; String password = `` mypassword '' String filename = `` C : \\Temp\\ '' + DateTime.Now.ToString ( `` yyyyMMddHHmmssffff '' ) + `` .xml '' ; client.Credentials = new System.Net.NetworkCredential ( username , password ) ; string credentials = Convert.ToBase64String ( Encoding.ASCII.GetBytes ( username + `` : '' + password ) ) ; client.DownloadFile ( `` myurl '' , filename ) ;"
String s = `` inner exception : `` + e.InnerException == null ? `` None '' : e.InnerException.Message ; String s = `` inner exception : `` + ( e.InnerException == null ? `` None '' : e.InnerException.Message ) ;
public class SomeModel { public int Id { get ; set ; } ... ..A lot ( 24 ) of Fields here ... .. }
throw new HttpResponseException ( new HttpResponseMessage ( HttpStatusCode.Unauthorized ) { ReasonPhrase = `` invalid username/password '' } ) ;
"using System ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { //two ways to define them var customer = new Tuple < int , string , string > ( 23 , `` Sam '' , `` Smith '' ) ; var customer2 = Tuple.Create < int , string , string > ( 34 , `` James '' , `` Allard '' ) ; //with type inference , more concise ( only available with the Create keyword ) var customer3 = Tuple.Create ( 23 , `` John '' , `` Hoopes '' ) ; //you can go up to eight , then you have to send in another tuple var customer4 = Tuple.Create ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , Tuple.Create ( 8 , 9 , 10 ) ) ; Console.WriteLine ( customer.Item1 ) ; Console.WriteLine ( customer2.Item2 ) ; Console.WriteLine ( customer3.Item3 ) ; Console.WriteLine ( customer4.Rest.Item1.Item3 ) ; Console.ReadLine ( ) ; } } }"
"[ assembly : Repeatable ( AspectPriority = 2 , AttributeTargetAssemblies = `` MyNamespace '' , AttributeTargetTypes = `` MyNamespace.MyClass '' , AttributeTargetMemberAttributes = MulticastAttributes.Public , AttributeTargetMembers = `` *Impl '' , Prefix = `` Cls '' ) ]"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace myprojectvstemplate { public partial class UserInputForm : Form { private string customMessage ; public UserInputForm ( ) { InitializeComponent ( ) ; MessageBox.Show ( `` here , calling ui '' ) ; } public string get_CustomMessage ( ) { return customMessage ; } private void button1_Click ( object sender , EventArgs e ) { customMessage = textBox1.Text ; this.Dispose ( ) ; } } } using System ; using System.Collections.Generic ; using Microsoft.VisualStudio.TemplateWizard ; using System.Windows.Forms ; using EnvDTE ; namespace myprojectvstemplate { public class IWizardImplementation : IWizard { private UserInputForm inputForm ; private string customMessage ; // This method is called before opening any item that // has the OpenInEditor attribute . public void BeforeOpeningFile ( ProjectItem projectItem ) { } public void ProjectFinishedGenerating ( Project project ) { } // This method is only called for item templates , // not for project templates . public void ProjectItemFinishedGenerating ( ProjectItem projectItem ) { } // This method is called after the project is created . public void RunFinished ( ) { } public void RunStarted ( object automationObject , Dictionary < string , string > replacementsDictionary , WizardRunKind runKind , object [ ] customParams ) { try { // Display a form to the user . The form collects // input for the custom message . inputForm = new UserInputForm ( ) ; inputForm.ShowDialog ( ) ; customMessage = inputForm.get_CustomMessage ( ) ; // Add custom parameters . replacementsDictionary.Add ( `` $ custommessage $ '' , customMessage ) ; } catch ( Exception ex ) { MessageBox.Show ( ex.ToString ( ) ) ; } } // This method is only called for item templates , // not for project templates . public bool ShouldAddProjectItem ( string filePath ) { return true ; } } } # include < iostream > using namespace std ; int main ( int argc , char** argv ) { cout < < `` Hi hello world : '' < < `` $ custommessage $ '' ; return 0 ; } < VSTemplate Version= '' 3.0.0 '' xmlns= '' http : //schemas.microsoft.com/developer/vstemplate/2005 '' Type= '' Project '' > < TemplateData > < Name > myproject_project < /Name > < Description > & lt ; No description available & gt ; < /Description > < ProjectType > VC < /ProjectType > < ProjectSubType > < /ProjectSubType > < SortOrder > 1000 < /SortOrder > < CreateNewFolder > true < /CreateNewFolder > < DefaultName > myproject_project < /DefaultName > < ProvideDefaultName > true < /ProvideDefaultName > < LocationField > Enabled < /LocationField > < EnableLocationBrowseButton > true < /EnableLocationBrowseButton > < Icon > __TemplateIcon.ico < /Icon > < /TemplateData > < TemplateContent > < Project TargetFileName= '' myproject_project.vcxproj '' File= '' myproject_project.vcxproj '' ReplaceParameters= '' true '' > < ProjectItem ReplaceParameters= '' false '' TargetFileName= '' $ projectname $ .vcxproj.filters '' > myproject_project.vcxproj.filters < /ProjectItem > < ProjectItem ReplaceParameters= '' true '' TargetFileName= '' myproject_project.cpp '' > myproject_project.cpp < /ProjectItem > < ProjectItem ReplaceParameters= '' false '' TargetFileName= '' ReadMe.txt '' > ReadMe.txt < /ProjectItem > < /Project > < /TemplateContent > < WizardExtension > < Assembly > myprojectvstemplate , Version=1.0.0.0 , Culture=Neutral , PublicKeyToken=a0a3d031ed112d61 < /Assembly > < FullClassName > myprojectvstemplate.IWizardImplementation < /FullClassName > < /WizardExtension > < /VSTemplate >"
"public async Task < bool > MakeDownloadRequestAsync ( string url , string destination , Action < string , long , long , float > progress = null ) { if ( _downloadHttpClient == null ) { _downloadHttpClient = new HttpClient ( new NativeMessageHandler ( ) ) ; } bool finished = false ; try { var result = await _downloadHttpClient.GetAsync ( url , HttpCompletionOption.ResponseHeadersRead ) ; long receivedBytes = 0 ; long totalBytes = result.Content.Headers.ContentLength.HasValue ? result.Content.Headers.ContentLength.Value : 0 ; System.Diagnostics.Debug.WriteLine ( `` Started download file : { 0 } '' , url ) ; using ( var stream = await _downloadHttpClient.GetStreamAsync ( url ) ) { byte [ ] buffer = new byte [ 4096 ] ; var filename = Path.GetFileName ( url ) ; var writeStream = _fileStore.OpenWrite ( Path.Combine ( destination , filename ) ) ; while ( true ) { int bytesRead = await stream.ReadAsync ( buffer , 0 , buffer.Length ) ; if ( bytesRead == 0 ) { finished = true ; System.Diagnostics.Debug.WriteLine ( `` Finished downloading file : { 0 } '' , url ) ; break ; } await writeStream.WriteAsync ( buffer , 0 , buffer.Length ) ; //Task.Delay ( 20 ) ; receivedBytes += bytesRead ; if ( progress ! = null ) { progress.Invoke ( url , receivedBytes , totalBytes , ( float ) receivedBytes/ ( float ) totalBytes ) ; } } writeStream.Dispose ( ) ; stream.Dispose ( ) ; } } catch ( Exception e ) { System.Diagnostics.Debug.WriteLine ( e ) ; } return finished ; }"
public class Program { public static void Main ( string [ ] args ) { if ( args == null ) throw new Exception ( `` test '' ) ; } } saving all filesbuilding projectLaunching explorationstarting ... preparing monitored process for ' C : \Users\User\Documents\Visual Studio 2012\Projects\Unitest\ConsoleApplication9\bin\Debug\ConsoleApplication9.exe'failed to prepare process for assembly ' C : \Users\User\Documents\Visual Studio 2012\Projects\Unitest\ConsoleApplication9\bin\Debug\ConsoleApplication9.exe'monitored process exited with error while loading assembly ( -1006 - 0xfffffc12 ) finished
"< system.serviceModel > < services > < service name= '' Service.MyService '' > < endpoint address= '' '' behaviorConfiguration= '' endpointBehavior '' binding= '' basicHttpBinding '' contract= '' Contracts.IMyService '' / > < /service > < /services > < behaviors > < endpointBehaviors > < behavior name= '' endpointBehavior '' > < logBehavior / > < /behavior > < /endpointBehaviors > < /behaviors > < extensions > < behaviorExtensions > < add name= '' logBehavior '' type= '' MyNamespace.MyBehaviorExtensionElement , MyAssembly , Version=0.0.0.1 , Culture=neutral , PublicKeyToken=null '' / > < /behaviorExtensions > < /extensions > < /system.serviceModel >"
Loaded symbols for C : \ ... \MyApp\MyAppConsole\bin\Debug\MyAppConsoleApp.exe.Loaded symbols for C : \ ... \MyApp\MyAppConsole\bin\Debug\MyAppClassLib.dll .
"for ( int i = 0 ; i < _threadCount ; i++ ) { Thread thread = new Thread ( ( ) = > WorkerThread ( i ) ) ; thread.Start ( ) ; _threads.Add ( thread ) ; } private void WorkerThread ( int id ) { Console.WriteLine ( `` [ { 0 } ] Thread started { 1 } '' , DateTime.Now.ToLongTimeString ( ) , id ) ; } [ 19:10:54 ] Thread start 3 [ 19:10:54 ] Thread start 9 [ 19:10:54 ] Thread start 4 [ 19:10:54 ] Thread start 12 [ 19:10:54 ] Thread start 11 [ 19:10:54 ] Thread start 3 [ 19:10:54 ] Thread start 12 [ 19:10:54 ] Thread start 6 [ 19:10:54 ] Thread start 9 [ 19:10:54 ] Thread start 6 [ 19:10:54 ] Thread start 13 [ 19:10:54 ] Thread start 2 [ 19:10:54 ] Thread start 15 [ 19:10:54 ] Thread start 9 [ 19:10:54 ] Thread start 15"
"< Style TargetType= '' Control '' x : Key= '' disabledStyle '' > < Setter Property= '' IsEnabled '' Value= '' False '' / > < /Style > < Style TargetType= '' TextBox '' x : Key= '' readOnlyStyle '' > < Setter Property= '' IsReadOnly '' Value= '' True '' / > < /Style > # windowOwner is the root window containing this usercontrolfor control in [ Button , ComboBox , CheckBox ] : if self.windowOwner.Resources.Contains ( control ) : self.windowOwner.Resources.Remove ( control ) self.windowOwner.Resources.Add ( control , self.Resources [ 'disabledStyle ' ] ) if self.windowOwner.Resources.Contains ( TextBox ) : self.windowOwner.Resources.Remove ( TextBox ) self.windowOwner.Resources.Add ( TextBox , self.Resources [ 'readOnlyStyle ' ] ) < Style x : Key= '' disabledStyle '' > < ! -- < Setter Property= '' Button.IsEnabled '' Value= '' False '' / > < Setter Property= '' CheckBox.IsEnabled '' Value= '' False '' / > -- > < Setter Property= '' ComboBox.IsEnabled '' Value= '' False '' / > < Setter Property= '' TextBox.IsReadOnly '' Value= '' True '' / > < /Style > self.windowOwner.Style = self.Resources [ 'disabledStyle ' ] < Style TargetType= '' Control '' x : Key= '' disabledStyle '' > < Setter Property= '' IsEnabled '' Value= '' False '' / > < ! -- < Setter Property= '' Button.IsEnabled '' Value= '' False '' / > < Setter Property= '' CheckBox.IsEnabled '' Value= '' False '' / > < Setter Property= '' ComboBox.IsEnabled '' Value= '' False '' / > -- > < Style.Triggers > < DataTrigger Binding= '' { Binding RelativeSource= { RelativeSource Self } , Converter= { StaticResource typeConverter } } '' Value= '' True '' > < Setter Property= '' IsEnabled '' Value= '' True '' / > < Setter Property= '' TextBox.IsReadOnly '' Value= '' True '' / > < /DataTrigger > < /Style.Triggers > < /Style > public class TypeConverter : IValueConverter { public object Convert ( object value , Type targetType , object parameter , CultureInfo culture ) { bool res = value.GetType ( ) == typeof ( TextBox ) ; return res ; } public object ConvertBack ( object value , Type targetType , object parameter , CultureInfo culture ) { // Do n't need any convert back return null ; } } visited = set ( ) def disableControls ( control ) : visited.add ( control ) try : for childNumber in xrange ( VisualTreeHelper.GetChildrenCount ( control ) ) : child = VisualTreeHelper.GetChild ( control , childNumber ) if hasattr ( child , 'Content ' ) and child.Content not in visited : disableControls ( child.Content ) if type ( child ) in [ Button , ComboBox , CheckBox ] : child.IsEnabled = False elif type ( child ) == TextBox : child.IsReadOnly = True elif child not in visited : disableControls ( child ) except : passdisableControls ( self.windowOwner )"
"FirebaseDatabase.DefaultInstance .GetReference ( `` Scenes '' ) .OrderByChild ( `` order '' ) .ValueChanged += ( object sender2 , ValueChangedEventArgs e2 ) = > { if ( e2.DatabaseError ! = null ) { Debug.LogError ( e2.DatabaseError.Message ) ; } scenes = asset.text.Split ( '\n ' ) ; return ; } if ( e2.Snapshot ! = null & & e2.Snapshot.ChildrenCount > 0 ) { sceneCollection.Clear ( ) ; foreach ( var childSnapshot in e2.Snapshot.Children ) { var sceneName = childSnapshot.Child ( `` name '' ) .Value.ToString ( ) ; sceneCollection.Add ( new SceneItem ( sceneName , 0 ) ) ; // I WANTED TO INSTANTIATE SOMTHING HERE } } } ;"
public static void Main ( ) { var cts = new CancellationTokenSource ( ) ; SomeCancellableOperation ( cts.Token ) ; cts.cancel ( ) ; } public void SomeCancellableOperation ( CancellationToken token ) { ... token.ThrowIfCancellationRequested ( ) ; ... }
"MyClass calass = new MyClass ( ) { firstProperty = `` text '' , secondProperty = `` text '' } MyClass calass = new MyClass // no brackets { firstProperty = `` text '' , secondProperty = `` text '' }"
private static SpeechSynthesizer sprecher ; ... sprecher = new SpeechSynthesizer ( ) ; ... private static List < VoiceInfo > GetInstalledVoices ( ) { var listOfVoiceInfo = from voice in sprecher.GetInstalledVoices ( ) select voice.VoiceInfo ; return listOfVoiceInfo.ToList < VoiceInfo > ( ) ; }
< customBinding > < binding name= '' mainBinding '' > < security authenticationMode= '' MutualCertificate '' allowSerializedSigningTokenOnReply= '' true '' requireDerivedKeys= '' false '' requireSignatureConfirmation= '' false '' / > < httpsTransport / > < /binding > < /customBinding > < s : Envelope xmlns : s= '' http : //www.w3.org/2003/05/soap-envelope '' xmlns : a= '' http : //www.w3.org/2005/08/addressing '' xmlns : u= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd '' > < s : Header > < a : Action s : mustUnderstand= '' 1 '' u : Id= '' _1 '' > [ removed ] < /a : Action > < a : MessageID u : Id= '' _2 '' > [ removed ] < /a : MessageID > < a : ReplyTo u : Id= '' _3 '' > < a : Address > [ removed ] < /a : Address > < /a : ReplyTo > < a : To s : mustUnderstand= '' 1 '' u : Id= '' _4 '' > [ removed ] < /a : To > < o : Security s : mustUnderstand= '' 1 '' xmlns : o= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd '' > < u : Timestamp u : Id= '' [ removed ] '' > < u : Created > 2017-05-11T08:59:25.681Z < /u : Created > < u : Expires > 2017-05-11T09:04:25.681Z < /u : Expires > < /u : Timestamp > < e : EncryptedKey Id= '' [ removed ] '' xmlns : e= '' http : //www.w3.org/2001/04/xmlenc # '' > [ removed ] < /e : EncryptedKey > < o : BinarySecurityToken u : Id= '' [ removed ] '' ValueType= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0 # X509v3 '' > [ removed ] < /o : BinarySecurityToken > < Signature Id= '' _0 '' xmlns= '' http : //www.w3.org/2000/09/xmldsig # '' > < SignedInfo > < CanonicalizationMethod Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < SignatureMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # hmac-sha1 '' / > < Reference URI= '' # _1 '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < Reference URI= '' # _2 '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < Reference URI= '' # _3 '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < Reference URI= '' # _4 '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < Reference URI= '' [ removed ] '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < /SignedInfo > < SignatureValue > [ removed ] < /SignatureValue > < KeyInfo > < o : SecurityTokenReference > < o : Reference URI= '' [ removed ] '' / > < /o : SecurityTokenReference > < /KeyInfo > < /Signature > < Signature xmlns= '' http : //www.w3.org/2000/09/xmldsig # '' > < SignedInfo > < CanonicalizationMethod Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < SignatureMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # rsa-sha1 '' / > < Reference URI= '' # _0 '' > < Transforms > < Transform Algorithm= '' http : //www.w3.org/2001/10/xml-exc-c14n # '' / > < /Transforms > < DigestMethod Algorithm= '' http : //www.w3.org/2000/09/xmldsig # sha1 '' / > < DigestValue > [ removed ] < /DigestValue > < /Reference > < /SignedInfo > < SignatureValue > [ removed ] < /SignatureValue > < KeyInfo > < o : SecurityTokenReference > < o : Reference URI= '' [ removed ] '' / > < /o : SecurityTokenReference > < /KeyInfo > < /Signature > < /o : Security > < /s : Header > < s : Body > [ removed ] < /s : Body > < /s : Envelope >
"public static DateTimeZone GetZone ( string tzId ) { // IANA lookup attempt zone = DateTimeZoneProviders.Bcl.GetZoneOrNull ( tzId ) ; if ( zone ! = null ) { return zone ; } // Serialization lookup attempt // Some other tricks to find a reasonable time zone , etc . }"
"abstract class Node { protected Node ( Stream raw ) { // calculate/generate some base class properties } } class FilesystemNode : Node { public FilesystemNode ( FileStream fs ) : base ( fs ) { // all good here ; disposing of fs not our responsibility } } class CompositeNode : Node { public CompositeNode ( IEnumerable some_stuff ) : base ( GenerateRaw ( some_stuff ) ) { // rogue stream from GenerateRaw now loose in the wild ! } static Stream GenerateRaw ( IEnumerable some_stuff ) { var content = new MemoryStream ( ) ; // molest elements of some_stuff into proper format , write to stream content.Seek ( 0 , SeekOrigin.Begin ) ; return content ; } }"
"System.IO.FileLoadException occurred HResult=0x80131040 Message=Could not load file or assembly 'System.Reactive.Linq , Version=3.0.1000.0 , Culture=neutral , PublicKeyToken=31bf3856ad364e35 ' or one of its dependencies . The located assembly 's manifest definition does not match the assembly reference . ( Exception from HRESULT : 0x80131040 )"
"class Program { static void Main ( string [ ] args ) { var temp = args.AsEnumerable ( ) ; for ( int i = 0 ; i < 10_000_000 ; i++ ) { temp = temp.Select ( x = > Foo ( x ) ) ; } Console.ReadKey ( ) ; } private static string Foo ( string x ) { return x ; } } class Program { static void Main ( string [ ] args ) { var temp = args.AsEnumerable ( ) ; for ( int i = 0 ; i < 10_000_000 ; i++ ) { temp = temp.Select ( Foo ) ; } Console.ReadKey ( ) ; } private static string Foo ( string x ) { return x ; } } .method private hidebysig static void Main ( string [ ] args ) cil managed { // Method begins at RVA 0x2050 // Code size 75 ( 0x4b ) .maxstack 3 .entrypoint .locals init ( [ 0 ] class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < string > , [ 1 ] int32 , [ 2 ] bool ) // temp = from x in temp // select Foo ( x ) ; IL_0000 : nop // IEnumerable < string > temp = args.AsEnumerable ( ) ; IL_0001 : ldarg.0 IL_0002 : call class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > [ System.Core ] System.Linq.Enumerable : :AsEnumerable < string > ( class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > ) IL_0007 : stloc.0 // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0008 : ldc.i4.0 IL_0009 : stloc.1 // ( no C # code ) IL_000a : br.s IL_0038 // loop start ( head : IL_0038 ) IL_000c : nop IL_000d : ldloc.0 IL_000e : ldsfld class [ mscorlib ] System.Func ` 2 < string , string > ConsoleApp1.Program/ ' < > c ' : : ' < > 9__0_0 ' IL_0013 : dup IL_0014 : brtrue.s IL_002d IL_0016 : pop IL_0017 : ldsfld class ConsoleApp1.Program/ ' < > c ' ConsoleApp1.Program/ ' < > c ' : : ' < > 9 ' IL_001c : ldftn instance string ConsoleApp1.Program/ ' < > c ' : : ' < Main > b__0_0 ' ( string ) IL_0022 : newobj instance void class [ mscorlib ] System.Func ` 2 < string , string > : :.ctor ( object , native int ) IL_0027 : dup IL_0028 : stsfld class [ mscorlib ] System.Func ` 2 < string , string > ConsoleApp1.Program/ ' < > c ' : : ' < > 9__0_0 ' IL_002d : call class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 1 > [ System.Core ] System.Linq.Enumerable : :Select < string , string > ( class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > , class [ mscorlib ] System.Func ` 2 < ! ! 0 , ! ! 1 > ) IL_0032 : stloc.0 IL_0033 : nop // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0034 : ldloc.1 IL_0035 : ldc.i4.1 IL_0036 : add IL_0037 : stloc.1 // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0038 : ldloc.1 IL_0039 : ldc.i4 10000000 IL_003e : clt IL_0040 : stloc.2 // ( no C # code ) IL_0041 : ldloc.2 IL_0042 : brtrue.s IL_000c // end loop // Console.ReadKey ( ) ; IL_0044 : call valuetype [ mscorlib ] System.ConsoleKeyInfo [ mscorlib ] System.Console : :ReadKey ( ) IL_0049 : pop // ( no C # code ) IL_004a : ret } // end of method Program : :Main .method private hidebysig static void Main ( string [ ] args ) cil managed { // Method begins at RVA 0x2050 // Code size 56 ( 0x38 ) .maxstack 3 .entrypoint .locals init ( [ 0 ] class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < string > , [ 1 ] int32 , [ 2 ] bool ) // ( no C # code ) IL_0000 : nop // IEnumerable < string > temp = args.AsEnumerable ( ) ; IL_0001 : ldarg.0 IL_0002 : call class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > [ System.Core ] System.Linq.Enumerable : :AsEnumerable < string > ( class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > ) IL_0007 : stloc.0 // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0008 : ldc.i4.0 IL_0009 : stloc.1 // ( no C # code ) IL_000a : br.s IL_0025 // loop start ( head : IL_0025 ) IL_000c : nop // temp = temp.Select ( Foo ) ; IL_000d : ldloc.0 IL_000e : ldnull IL_000f : ldftn string ConsoleApp1.Program : :Foo ( string ) IL_0015 : newobj instance void class [ mscorlib ] System.Func ` 2 < string , string > : :.ctor ( object , native int ) IL_001a : call class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 1 > [ System.Core ] System.Linq.Enumerable : :Select < string , string > ( class [ mscorlib ] System.Collections.Generic.IEnumerable ` 1 < ! ! 0 > , class [ mscorlib ] System.Func ` 2 < ! ! 0 , ! ! 1 > ) IL_001f : stloc.0 // ( no C # code ) IL_0020 : nop // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0021 : ldloc.1 IL_0022 : ldc.i4.1 IL_0023 : add IL_0024 : stloc.1 // for ( int i = 0 ; i < 10000000 ; i++ ) IL_0025 : ldloc.1 IL_0026 : ldc.i4 10000000 IL_002b : clt IL_002d : stloc.2 // ( no C # code ) IL_002e : ldloc.2 IL_002f : brtrue.s IL_000c // end loop // Console.ReadKey ( ) ; IL_0031 : call valuetype [ mscorlib ] System.ConsoleKeyInfo [ mscorlib ] System.Console : :ReadKey ( ) IL_0036 : pop // ( no C # code ) IL_0037 : ret } // end of method Program : :Main"
< ProjectTemplateLink ProjectName= '' $ safeprojectname $ .Forms.Plugin.Abstractions '' > Forms.Plugin.Abstractions\Forms.Plugin.Abstractions.vstemplate < /ProjectTemplateLink > < ProjectTemplateLink ProjectName= '' $ safeprojectname $ .Forms.Plugin.iOS '' > Forms.Plugin.iOS\Forms.Plugin.iOS.vstemplate < /ProjectTemplateLink > < ProjectTemplateLink ProjectName= '' $ safeprojectname $ .Forms.Plugin.iOSUnified '' > Forms.Plugin.iOSUnified\Forms.Plugin.iOSUnified.vstemplate < /ProjectTemplateLink > < ProjectTemplateLink ProjectName= '' $ safeprojectname $ .Forms.Plugin.Android '' > Forms.Plugin.Android\Forms.Plugin.Android.vstemplate < /ProjectTemplateLink > < ProjectTemplateLink ProjectName= '' $ safeprojectname $ .Forms.Plugin.WindowsPhone '' > Forms.Plugin.WindowsPhone\Forms.Plugin.WindowsPhone.vstemplate < /ProjectTemplateLink > < /ProjectCollection > `` `
"from ctypes import c_uint , create_string_buffer , CFUNCTYPE , addressofCPUID = create_string_buffer ( `` \x53\x31\xc0\x40\x0f\xa2\x5b\xc3 '' ) cpuinfo = CFUNCTYPE ( c_uint ) ( addressof ( CPUID ) ) print cpuinfo ( )"
"var Files = Directory.GetFiles ( Path , `` * '' + filetype , SearchOption.AllDirectories ) ; long length = new System.IO.FileInfo ( file ) .Length ;"
< RichTextBox SpellCheck.IsEnabled= '' True '' Language= '' en-US '' / > < RichTextBox SpellCheck.IsEnabled= '' True '' InputLanguageManager.InputLanguage= '' en-US '' / >
"string.Equals ( `` Île '' , `` Ile '' , StringComparison.InvariantCultureIgnoreCase )"
public interface IFileDownloader { string Download ( string url ) ; } public class HttpFileDownloader : IFileDownloader { public string Download ( string url ) { //Cut for brevity - downloads file here returns as string return html ; } } public class HttpFileDownloaderRetrier : IFileDownloader { IFileDownloader fileDownloader ; public HttpFileDownloaderRetrier ( IFileDownloader fileDownloader ) { this.fileDownloader = fileDownloader ; } public string Download ( string url ) { Exception lastException = null ; //try 3 shots of pulling a bad URL . And wait 5 seconds after each failed attempt . for ( int i = 0 ; i < 3 ; i++ ) { try { fileDownloader.Download ( url ) ; } catch ( Exception ex ) { lastException = ex ; } Utilities.WaitForXSeconds ( 5 ) ; } throw lastException ; } }
namespace me { public static class Stat { public const int Const = 1 ; } } ... namespace me { public static int Test { return < # = Stat.Const # > ; } }
DbConnection conn = null ; conn = new DbConnection ( ) ; conn.Open ( ) ; ... a number of statements using conn ... conn.Close ( ) ; conn = null ; using ( DbConnection conn = GetConnection ( ) ) { ... statements ... }
"public ActionResult Edit ( [ Bind ( Include = `` BusinessId , Name , About , Phone , TollFree , FAX , Email , Bio , BioPhoto '' ) ] Business business ) { if ( System.IO.File.Exists ( `` image.jpg '' ) ) { business.BioPhoto = System.IO.File.ReadAllBytes ( `` image.jpg '' ) ; ModelState.SetModelValue ( `` BioPhoto '' , new ValueProviderResult ( business.BioPhoto , `` '' , System.Globalization.CultureInfo.InvariantCulture ) ) ; } if ( ModelState.IsValid ) { db.Entry ( business ) .State = EntityState.Modified ; db.SaveChanges ( ) ; return RedirectToAction ( `` Index '' ) ; } return View ( business ) ; } public class Business { public int BusinessId { get ; set ; } [ Required ] [ StringLength ( 100 ) ] public string Name { get ; set ; } [ Required ] public Address address { get ; set ; } [ Required ] [ StringLength ( 20 ) ] public string Phone { get ; set ; } [ StringLength ( 20 ) ] public string TollFree { get ; set ; } [ StringLength ( 20 ) ] public string FAX { get ; set ; } [ Required ] [ StringLength ( 50 ) ] public string Email { get ; set ; } [ Required ] [ StringLength ( 100 ) ] public string WebSite { get ; set ; } [ Required ] public string About { get ; set ; } [ Required ] public string Bio { get ; set ; } [ Required ] public byte [ ] BioPhoto { get ; set ; } } < div class= '' form-group '' > @ Html.LabelFor ( model = > model.BioPhoto , `` BIO Photo ( Best Size : 350 x 450 ) '' , htmlAttributes : new { @ class = `` control-label col-md-2 '' } ) < div class= '' col-md-10 '' > < form enctype= '' multipart/form-data '' > < div class= '' form-group '' style= '' width:400px '' > < input id= '' BioPhoto '' type= '' file '' multiple class= '' file '' data-overwrite-initial= '' false '' / > < /div > < /form > @ Html.ValidationMessageFor ( model = > model.BioPhoto , `` '' , new { @ class = `` text-danger '' } ) < /div > < /div >"
"< RunSettings > < DataCollectionRunSettings > < DataCollectors > < DataCollector friendlyName= '' Code Coverage '' uri= '' datacollector : //Microsoft/CodeCoverage/2.0 '' assemblyQualifiedName= '' Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollector , Microsoft.VisualStudio.TraceCollector , Culture=neutral , PublicKeyToken=b03f5f7f11d50a3a '' enabled= '' false '' > < Configuration > < CodeCoverage > < /CodeCoverage > < /Configuration > < /DataCollector > < /DataCollectors > < /DataCollectionRunSettings > < /RunSettings >"
void Foo ( string bar ) { ... } void Foo ( object bar ) { ... } Foo ( ( string ) null ) ;
"$ ( '.combine-payment-input ' ) .each ( function ( index , value ) { if ( parseFloat ( value.value ) > 0 ) { if ( methodOfPayment == -1 ) { methodOfPayment = value.dataset.method ; } else { methodOfPayment = 0 ; } vmopl.push ( { id : value.dataset.method , name : $ ( 'label [ for= '' ' + value.id + ' '' ] ' ) .html ( ) , inUse : 'True ' , ammount : value.value } ) ; } } ) ; [ Object { id= '' 2 '' , name= '' Card '' , inUse= '' True '' , ammount= '' 500 '' } , Object { id= '' 1 '' , name= '' Cash '' , inUse= '' True '' , ammount= '' 250 '' } ] $ .get ( '/reports/savebill/ ' + methodOfPayment + ' ? vmop= ' + JSON.stringify ( vmopl ) , function ( data ) { if ( data == 'True ' ) { location.href = '/order/neworder/ ' ; } else { alert ( `` Unsuccessful ! `` ) ; } } ) ; public bool SaveBill ( int id , ViewMethodOfPayment [ ] vmop ) { //lots of code ... } public class ViewMethodOfPayment { public long Id { get ; set ; } public string Name { get ; set ; } public bool InUse { get ; set ; } public double Ammount { get ; set ; } }"
"CREATE PROCEDURE [ dbo ] . [ GetOrders ] @ CompanyID int , @ Skip INT , @ Take INTASBEGIN SET NOCOUNT ON ; SELECT *FROM Orders WHERE CompanyID = @ CompanyIDORDER BY t.OrderIDOFFSET @ Skip ROWS FETCH NEXT @ Take ROWS ONLYEND [ EnableQuery ] public async Task < PageResult < Order > > GetOrders ( ODataQueryOptions < Order > queryOptions ) { int CompanyID = User.Identity.GetCompanyID ( ) .TryParseInt ( 0 ) ; ODataQuerySettings settings = new ODataQuerySettings ( ) { PageSize = 100 , } ; int OrderCount = _OrderRepo.GetOrderCount ( CompanyID ) ; int Skip = 0 ; if ( queryOptions.Skip ! = null ) { Skip = queryOptions.Skip.Value ; } IEnumerable < Order > results = await _OrderRepo.GetAll ( CompanyID , Skip , 100 ) ; IQueryable result = queryOptions.ApplyTo ( results.AsQueryable ( ) , settings ) ; Uri uri = Request.ODataProperties ( ) .NextLink ; Request.ODataProperties ( ) .TotalCount = OrderCount ; PageResult < Order > response = new PageResult < Order > ( result as IEnumerable < Order > , uri , Request.ODataProperties ( ) .TotalCount ) ; return response ; }"
"< controls : TileTitle= '' appbar_zune '' Count= '' 1215 '' Grid.Row= '' 121 '' Grid.Column= '' 15 '' TiltFactor= '' 2 '' Width= '' 1* '' Height= '' 1* '' VerticalAlignment= '' Stretch '' HorizontalAlignment= '' Stretch '' > < Rectangle Margin= '' 0 '' Fill= '' { Binding RelativeSource= { RelativeSource AncestorType=Button } , Path=Foreground } '' > < Rectangle.OpacityMask > < VisualBrush Stretch= '' Fill '' Visual= '' { StaticResource appbar_zune } '' / > < /Rectangle.OpacityMask > < /Rectangle > < /controls : Tile >"
"class Service { public Service ( IDataContext dataContext , string name ) { this._dataContext = dataContext ; this._name = name } public string Name { get { return _name ; } } } var service = Ioc.Resolve < Service > ( ? ? ) class Service { public Service ( IDataContext dataContext ) { this._dataContext = dataContext ; } public string Name { get ; set ; } } var service = Ioc.Resolve < Service > ( ) ; service.Name = `` Some name '' ;"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Runtime.InteropServices ; namespace InteropTest { [ Guid ( `` ... '' ) ] [ ClassInterface ( ClassInterfaceType.AutoDual ) ] public class Test { public Test ( ) { } public string Version { get { return `` 1.0 '' ; } } } }
"[ ServiceBehavior ( IncludeExceptionDetailInFaults = true , InstanceContextMode = InstanceContextMode.PerSession ) ] [ AspNetCompatibilityRequirements ( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed ) ] public abstract class AjaxPostBack : IAjaxPostBack `` JSON_Took '' : '' 00:00:00.0012939 '' , '' Set_took '' : '' 00:00:00.0000274 ''"
"Random rnd = new Random ( ) ; int rndNumber = rnd.Next ( 0,101 ) ;"
class Foo { public void Bar ( ) { string s ; int i = s.Length ; } } class Foo { private string s ; public void Bar ( ) { int i = s.Length ; } }
"[ SuppressMessage ( `` Microsoft.Design '' , `` CA1061 '' ) ] [ SuppressMessage ( `` Microsoft.Usage '' , `` CA1812 '' ) ] [ SuppressMessage ( `` Microsoft.Design '' , `` CA1064 '' ) ] public abstract void Foo ( ) ; [ SpecialStuff ] public abstract void Foo ( ) ;"
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < CommandTable xmlns= '' http : //schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable '' xmlns : xs= '' http : //www.w3.org/2001/XMLSchema '' > < Extern href= '' stdidcmd.h '' / > < Extern href= '' vsshlids.h '' / > < Commands package= '' guidTemplatePackPkg '' > < Groups > < Group guid= '' guidTemplatePackCmdSet '' id= '' MyMenuGroup '' priority= '' 0x0600 '' > < Parent guid= '' guidSHLMainMenu '' id= '' IDM_VS_MENU_TOOLS '' / > < /Group > < /Groups > < Buttons > < Button guid= '' guidTemplatePackCmdSet '' id= '' cmdidMyCommand '' priority= '' 0x2000 '' type= '' Button '' > < Parent guid= '' guidSHLMainMenu '' id= '' IDG_VS_CTXT_PROJECT_ADD_REFERENCES '' / > < CommandFlag > DynamicVisibility < /CommandFlag > < CommandFlag > DefaultInvisible < /CommandFlag > < Strings > < CommandName > AddSideWaffleProject < /CommandName > < ButtonText > Add Template Reference ( SideWaffle project ) < /ButtonText > < /Strings > < /Button > < /Buttons > < /Commands > < ! -- SideWaffle Menu Options -- > < Commands package= '' guidMenuOptionsPkg '' > < Groups > < Group guid= '' guidMenuOptionsCmdSet '' id= '' SWMenuGroup '' priority= '' 0x0600 '' > < Parent guid= '' guidSHLMainMenu '' id= '' IDM_VS_MENU_TOOLS '' / > < /Group > < /Groups > < Buttons > < Button guid= '' guidMenuOptionsCmdSet '' id= '' cmdidOpenSWMenu '' priority= '' 0x0100 '' type= '' Button '' > < Parent guid= '' guidMenuOptionsCmdSet '' id= '' SWMenuGroup '' / > < Icon guid= '' guidImages '' id= '' bmpPic1 '' / > < Strings > < ButtonText > SideWaffle Settings < /ButtonText > < /Strings > < /Button > < /Buttons > < Bitmaps > < Bitmap guid= '' guidImages '' href= '' Resources\Images.png '' usedList= '' bmpPic1 , bmpPic2 , bmpPicSearch , bmpPicX , bmpPicArrows '' / > < /Bitmaps > < /Commands > < ! -- End SideWaffle Menu Options -- > < Symbols > < GuidSymbol name= '' guidTemplatePackPkg '' value= '' { e6e2a48e-387d-4af2-9072-86a5276da6d4 } '' / > < GuidSymbol name= '' guidTemplatePackCmdSet '' value= '' { a94bef1a-053e-4066-a851-16e5f6c915f1 } '' > < IDSymbol name= '' MyMenuGroup '' value= '' 0x1020 '' / > < IDSymbol name= '' cmdidMyCommand '' value= '' 0x0100 '' / > < /GuidSymbol > < ! -- SideWaffle Menu Options -- > < GuidSymbol name= '' guidMenuOptionsPkg '' value= '' { ee0cf212-810b-45a1-8c62-e10041913c94 } '' / > < GuidSymbol name= '' guidMenuOptionsCmdSet '' value= '' { c75eac28-63cd-4766-adb1-e655471525ea } '' > < IDSymbol name= '' SWMenuGroup '' value= '' 0x1020 '' / > < IDSymbol name= '' cmdidOpenSWMenu '' value= '' 0x0100 '' / > < /GuidSymbol > < GuidSymbol name= '' guidImages '' value= '' { e2bf6a31-afea-46fb-9397-0c2add3a59d8 } '' > < IDSymbol name= '' bmpPic1 '' value= '' 1 '' / > < IDSymbol name= '' bmpPic2 '' value= '' 2 '' / > < IDSymbol name= '' bmpPicSearch '' value= '' 3 '' / > < IDSymbol name= '' bmpPicX '' value= '' 4 '' / > < IDSymbol name= '' bmpPicArrows '' value= '' 5 '' / > < IDSymbol name= '' bmpPicStrikethrough '' value= '' 6 '' / > < /GuidSymbol > < ! -- End SideWaffle Menu Options -- > < /Symbols > < /CommandTable > using System ; using System.Linq ; using System.Diagnostics ; using System.Globalization ; using System.Runtime.InteropServices ; using System.ComponentModel.Design ; using Microsoft.Win32 ; using Microsoft.VisualStudio ; using Microsoft.VisualStudio.Shell.Interop ; using Microsoft.VisualStudio.OLE.Interop ; using Microsoft.VisualStudio.Shell ; using System.Collections.Generic ; using EnvDTE ; using EnvDTE80 ; using LigerShark.Templates.DynamicBuilder ; using TemplatePack.Tooling ; namespace TemplatePack { [ PackageRegistration ( UseManagedResourcesOnly = true ) ] [ InstalledProductRegistration ( `` # 110 '' , `` # 112 '' , `` 1.0 '' , IconResourceID = 400 ) ] [ ProvideMenuResource ( `` Menus.ctmenu '' , 1 ) ] [ Guid ( GuidList.guidTemplatePackPkgString ) ] [ ProvideAutoLoad ( UIContextGuids80.SolutionExists ) ] public sealed class TemplatePackPackage : Package { private DTE2 _dte ; protected override void Initialize ( ) { base.Initialize ( ) ; _dte = GetService ( typeof ( DTE ) ) as DTE2 ; OleMenuCommandService mcs = GetService ( typeof ( IMenuCommandService ) ) as OleMenuCommandService ; if ( null ! = mcs ) { CommandID cmdId = new CommandID ( GuidList.guidTemplatePackCmdSet , ( int ) PkgCmdIDList.cmdidMyCommand ) ; OleMenuCommand button = new OleMenuCommand ( ButtonClicked , cmdId ) ; button.BeforeQueryStatus += button_BeforeQueryStatus ; mcs.AddCommand ( button ) ; } /*if ( Environment.GetEnvironmentVariable ( `` SideWaffleEnableDynamicTemplates '' ) ! = null ) */ { try { new DynamicTemplateBuilder ( ) .ProcessTemplates ( ) ; } catch ( Exception ex ) { // todo : replace with logging or something System.Windows.MessageBox.Show ( ex.ToString ( ) ) ; } } } void button_BeforeQueryStatus ( object sender , EventArgs e ) { var button = ( OleMenuCommand ) sender ; var project = GetSelectedProjects ( ) .ElementAt ( 0 ) ; // TODO : We should only show this if the target project has the TemplateBuilder NuGet pkg installed // or something similar to that . button.Visible = true ; // button.Visible = project.IsWebProject ( ) ; } private void ButtonClicked ( object sender , EventArgs e ) { Project currentProject = GetSelectedProjects ( ) .ElementAt ( 0 ) ; var projects = _dte.Solution.GetAllProjects ( ) ; var names = from p in projects where p ! = currentProject select p.Name ; ProjectSelector selector = new ProjectSelector ( names ) ; bool ? isSelected = selector.ShowDialog ( ) ; if ( isSelected.HasValue & & isSelected.Value ) { // need to save everything because we will directly write to the project file in the creator _dte.ExecuteCommand ( `` File.SaveAll '' ) ; TemplateReferenceCreator creator = new TemplateReferenceCreator ( ) ; var selectedProject = projects.First ( p = > p.Name == selector.SelectedProjectName ) ; creator.AddTemplateReference ( currentProject , selectedProject ) ; } } public IEnumerable < Project > GetSelectedProjects ( ) { var items = ( Array ) _dte.ToolWindows.SolutionExplorer.SelectedItems ; foreach ( UIHierarchyItem selItem in items ) { var item = selItem.Object as Project ; if ( item ! = null ) { yield return item ; } } } } [ PackageRegistration ( UseManagedResourcesOnly = true ) ] [ InstalledProductRegistration ( `` # 110 '' , `` # 112 '' , `` 1.0 '' , IconResourceID = 400 ) ] [ ProvideMenuResource ( `` Menus.ctmenu '' , 1 ) ] [ Guid ( GuidList.guidMenuOptionsPkgString ) ] public sealed class MenuOptionsPackage : Package { // Overridden Package Implementation # region Package Members protected override void Initialize ( ) { base.Initialize ( ) ; // Add our command handlers for menu ( commands must exist in the .vsct file ) OleMenuCommandService mcs = GetService ( typeof ( IMenuCommandService ) ) as OleMenuCommandService ; if ( null ! = mcs ) { // Create the command for the menu item . CommandID menuCommandID = new CommandID ( GuidList.guidMenuOptionsCmdSet , ( int ) PkgCmdIDList.cmdidMyCommand ) ; MenuCommand menuItem = new MenuCommand ( MenuItemCallback , menuCommandID ) ; mcs.AddCommand ( menuItem ) ; } } # endregion private void MenuItemCallback ( object sender , EventArgs e ) { // Here is where our UI ( i.e . user control ) will go to do all the settings . var window = new SettingsForm ( ) ; window.Show ( ) ; } } } using System ; namespace TemplatePack { static class GuidList { public const string guidTemplatePackPkgString = `` e6e2a48e-387d-4af2-9072-86a5276da6d4 '' ; public const string guidTemplatePackCmdSetString = `` a94bef1a-053e-4066-a851-16e5f6c915f1 '' ; public static readonly Guid guidTemplatePackCmdSet = new Guid ( guidTemplatePackCmdSetString ) ; // SideWaffle Remote Source Settings public const string guidMenuOptionsPkgString = `` ee0cf212-810b-45a1-8c62-e10041913c94 '' ; public const string guidMenuOptionsCmdSetString = `` c75eac28-63cd-4766-adb1-e655471525ea '' ; public static readonly Guid guidMenuOptionsCmdSet = new Guid ( guidMenuOptionsCmdSetString ) ; } static class PkgCmdIDList { public const uint cmdidMyCommand = 0x100 ; public const uint SWMenuGroup = 0x100 ; } ; }"
c = a R b
"var numItems = items.Count ; IEnumerable < JToken > col1Items , col2Items , col3Items ; if ( numItems < =3 ) { col1Items = items.Take ( 1 ) ; col2Items = items.Skip ( 1 ) .Take ( 1 ) ; col3Items = items.Skip ( 2 ) .Take ( 1 ) ; } else { int remainder = numItems % 3 , take = numItems / 3 , col1Take , col2Take , col3Take ; switch ( remainder ) { case 1 : col1Take = take + 1 ; col2Take = take ; col3Take = take ; break ; case 2 : col1Take = take + 1 ; col2Take = take + 1 ; col3Take = take ; break ; default : col1Take = take ; col2Take = take ; col3Take = take ; break ; } col1Items = items.Take ( col1Take ) ; col2Items = items.Skip ( col1Take ) .Take ( col2Take ) ; col3Items = items.Skip ( col1Take + col2Take ) .Take ( col3Take ) ; < div class= '' widgetColumn '' > @ Html.DisplayFor ( m = > col1Items , `` MenuColumn '' ) < /div > < div class= '' widgetColumn '' > @ Html.DisplayFor ( m = > col2Items , `` MenuColumn '' ) < /div > < div class= '' widgetColumn '' > @ Html.DisplayFor ( m = > col3Items , `` MenuColumn '' ) < /div > for ( int i = 1 ; i < = 3 ; i++ ) { IEnumerable < JToken > widgets = new List < JToken > ( ) ; var col = i ; switch ( col ) { case 1 : break ; case 2 : break ; case 3 : break ; } }"
public class Parent { public ICollection < Child > Children { get ; set ; } } public class Child { public decimal Percentage { get ; set ; } } public ParentValidator ( ) { RuleFor ( x = > x.Children ) .SetCollectionValidator ( new ChildValidator ( ) ) ; } private class ChildValidator : AbstractValidator < Child > { public ChildValidator ( ) { RuleFor ( x = > x.Percentage ) .GreaterThan ( 0 ) ) ; } }
"public class RouteConfig { public static void RegisterRoutes ( RouteCollection routes ) { routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; routes.MapMvcAttributeRoutes ( ) ; routes.MapRoute ( null , `` Page { page } '' , new { controller = `` Blogs '' , action = `` Index '' , category = ( string ) null } , new { page = @ '' \d+ '' } ) ; routes.MapRoute ( null , `` { category } '' , new { controller = `` Blogs '' , action = `` Edit '' , page = 1 } ) ; routes.MapRoute ( null , `` { category } /Page { page } '' , new { controller = `` Blogs '' , action = `` List '' } , new { page = @ '' \d+ '' } ) ; routes.MapRoute ( null , `` { controller } / { action } '' ) ; routes.MapRoute ( name : `` Default '' , url : `` { controller } / { action } / { id } '' , defaults : new { controller = `` Home '' , action = `` Index '' , id = UrlParameter.Optional } ) ; } }"
"public sealed class Time { int _ticks = 0 ; int _ticksPerSecond = 30 ; int _secondsPerMinute = 60 ; int _minutesPerHour = 60 ; int _hoursPerDay = 24 ; readonly List < string > _days ; readonly Dictionary < string , int > _months ; // I have n't decided on ctor parameters yet , but we 'd define base units public Time ( ) { // What we call the days of the week . _days = new List < string > { `` Monday '' , `` Tuesday '' , `` Wednesday '' } ; // What we call the months of the year , and the number of days each . _months = new Dictionary < string , int > { { `` January '' , 31 } , { `` February '' , 28 } , { `` March '' , 31 } } ; } public void Advance ( int ticks ) { _ticks += ticks ; } // Number of ticks elapsed since epoch start public int TotalTicks { get { return _ticks ; } } // Number of ticks elapsed during the current second public int CurrentTicks { get { return _ticks % _ticksPerSecond ; } } public int TotalSeconds { get { return _ticks / _ticksPerSecond ; } } public int CurrentSeconds { get { return TotalSeconds % _secondsPerMinute ; } } public int TotalMinutes { get { return TotalSeconds / _secondsPerMinute ; } } public int CurrentMinutes { get { return TotalMinutes % _minutesPerHour ; } } public int TotalHours { get { return TotalMinutes / _minutesPerHour ; } } public int CurrentHours { get { return TotalHours % _hoursPerDay ; } } public List < string > Days { get { return _days ; } } public int TotalDays { get { return TotalHours / _hoursPerDay ; } } public int CurrentDay { get { return TotalDays % _days.Count ; } } public string DayOfWeek { get { return _days [ CurrentDay ] ; } } public int DayOfMonth { get { var d = 0 ; while ( d < TotalDays ) { foreach ( var month in Months ) { var daysInMonth = month.Value ; while ( daysInMonth > 0 & & d < TotalDays ) { d++ ; daysInMonth -- ; } } } return d ; } } public Dictionary < string , int > Months { get { return _months ; } } public int TotalMonths { get { return TotalDays / _months.Values.Sum ( ) ; } } public int CurrentMonth { get { return TotalMonths % Months.Count ; } } … } public int DayOfMonth { get { var d = TotalDays ; var found = false ; while ( ! found ) { foreach ( var month in _months ) { if ( d > month.Value ) d -= month.Value ; else { found = true ; break ; } } } return d ; } } public int TotalMonths { get { var d = TotalDays ; var found = false ; var m = 0 ; while ( ! found ) { foreach ( var month in _months ) { if ( d > month.Value ) { d -= month.Value ; m++ ; } else { found = true ; break ; } } } return m ; } } public string MonthOfYear { get { return _months.Keys.ToList ( ) [ CurrentMonth ] ; } }"
"A connection attempt failed because the connected party did not properly respond after a period of time , or established connection failed because connected host has failed to respond public class ClientInfoServerSinkProvider : IServerChannelSinkProvider { private IServerChannelSinkProvider _nextProvider = null ; public ClientInfoServerSinkProvider ( ) { } public ClientInfoServerSinkProvider ( IDictionary properties , ICollection providerData ) { } public IServerChannelSinkProvider Next { get { return _nextProvider ; } set { _nextProvider = value ; } } public IServerChannelSink CreateSink ( IChannelReceiver channel ) { IServerChannelSink nextSink = null ; if ( _nextProvider ! = null ) { nextSink = _nextProvider.CreateSink ( channel ) ; } return new ClientIPServerSink ( nextSink ) ; } public void GetChannelData ( IChannelDataStore channelData ) { } } public class ClientIPServerSink : BaseChannelObjectWithProperties , IServerChannelSink , IChannelSinkBase { private IServerChannelSink _nextSink ; public ClientIPServerSink ( IServerChannelSink next ) { _nextSink = next ; } public IServerChannelSink NextChannelSink { get { return _nextSink ; } set { _nextSink = value ; } } public void AsyncProcessResponse ( IServerResponseChannelSinkStack sinkStack , Object state , IMessage message , ITransportHeaders headers , Stream stream ) { IPAddress ip = headers [ CommonTransportKeys.IPAddress ] as IPAddress ; CallContext.SetData ( `` ClientIPAddress '' , ip ) ; sinkStack.AsyncProcessResponse ( message , headers , stream ) ; } public Stream GetResponseStream ( IServerResponseChannelSinkStack sinkStack , Object state , IMessage message , ITransportHeaders headers ) { return null ; } public ServerProcessing ProcessMessage ( IServerChannelSinkStack sinkStack , IMessage requestMsg , ITransportHeaders requestHeaders , Stream requestStream , out IMessage responseMsg , out ITransportHeaders responseHeaders , out Stream responseStream ) { if ( _nextSink ! = null ) { IPAddress ip = requestHeaders [ CommonTransportKeys.IPAddress ] as IPAddress ; CallContext.SetData ( `` ClientIPAddress '' , ip ) ; ServerProcessing spres = _nextSink.ProcessMessage ( sinkStack , requestMsg , requestHeaders , requestStream , out responseMsg , out responseHeaders , out responseStream ) ; return spres ; } else { responseMsg = null ; responseHeaders = null ; responseStream = null ; return new ServerProcessing ( ) ; } }"
var myObject = new MyObject ( /*ctor args*/ ) ; myObject = myObject.HydrateFromXml ( string xml ) ;
public abstract class NavEntityController < ChildEntity > where ChildEntity : NavObservableEntity { public abstract void Delete ( ChildEntity line ) ; public abstract void Update ( ChildEntity line ) ; public abstract void Create ( ChildEntity line ) ; public void PushChangesToNav ( NavObservableCollection < ChildEntity > lines ) { foreach ( var line in lines ) { line.ErrorLastAction = false ; EntityState previousState = line.CurrentState ; try { switch ( line.CurrentState ) { case EntityState.Unchanged : break ; case EntityState.NeedsCreate : Create ( line ) ; line.CurrentState = EntityState.Unchanged ; break ; case EntityState.NeedsUpdate : Update ( line ) ; line.CurrentState = EntityState.Unchanged ; break ; case EntityState.NeedsDelete : Delete ( line ) ; line.CurrentState = EntityState.Deleted ; break ; } } catch ( Exception e ) { // ... } } } } public class NavJobController : NavEntityController < NavObservableJob > { public NavJobController ( { } public override void Delete ( NavObservableJob line ) { //Implementation here } public override void Update ( NavObservableJob line ) { //Implementation here } public override void Create ( NavObservableJob line ) { //Implementation here } //Other functionality } NavJobController j = new NavJobController ( ) ; j.Create ( new NavObservableJob ( ) ) ; private abstract void Delete ( ChildEntity line ) ; private abstract void Update ( ChildEntity line ) ; private abstract void Create ( ChildEntity line ) ;
public class BlogHub : Hub { public void Post ( string text ) { //Internal Webapi call / other method of DB Update . Clients.All.BroadcastPost ( text ) ; } } public void PostPost ( string text ) //May have to call this method something different ... { db.posts.add ( new PostModel ( text ) ) ; db.SaveChanges ( ) ; Post ( string Text ) ; }
"static void getBookInfo ( Book book ) { Console.Write ( `` Enter Book Title : `` ) ; book.Title = Console.ReadLine ( ) ; Console.Write ( `` Enter Author 's First Name : `` ) ; book.AuthorFirstName = Console.ReadLine ( ) ; Console.Write ( `` Enter Author 's Last Name : `` ) ; book.AuthorLastName = Console.ReadLine ( ) ; Console.Write ( `` Enter Book Price : $ '' ) ; book.Price = float.Parse ( Console.ReadLine ( ) ) ; } public class VBCodeProvider : CodeDomProvider { // Constructors public VBCodeProvider ( ) ; public VBCodeProvider ( IDictionary < string , string > providerOptions ) ; // Methods public virtual ICodeCompiler CreateCompiler ( ) ; public virtual ICodeGenerator CreateGenerator ( ) ; public virtual TypeConverter GetConverter ( Type type ) ; public virtual void GenerateCodeFromMember ( CodeTypeMember member , TextWriter writer , CodeGeneratorOptions options ) ; // Properties public virtual string FileExtension { get ; } public virtual LanguageOptions LanguageOptions { get ; } } using Microsoft.VisualBasic ; static void getBookInfo ( Book book ) { bool isNumeric ; float number ; string numberInput ; Console.Write ( `` Enter Book Title : `` ) ; book.Title = Console.ReadLine ( ) ; Console.Write ( `` Enter Author 's First Name : `` ) ; book.AuthorFirstName = Console.ReadLine ( ) ; Console.Write ( `` Enter Author 's Last Name : `` ) ; book.AuthorLastName = Console.ReadLine ( ) ; Console.Write ( `` Enter Book Price : $ '' ) ; numberInput = Console.ReadLine ( ) ; isNumeric = float.TryParse ( numberInput , out number ) ; if ( isNumeric ) Console.WriteLine ( number.ToString ( ) ) ; else Console.WriteLine ( `` not number '' ) ; }"
"// Summary : // Represents a collection of strings . [ Serializable ] public class StringCollection : IList , ICollection , IEnumerable { ... public int Add ( string value ) ; ... } int Add ( object value ) ; int Add ( string value ) ; int Add ( object value ) ; does not implement interface member 'System.Collections.IList.Add ( object ) '"
List < String > Types = new List < String > ( ) ; ArrayList Types2 = new ArrayList ( ) ; LinkedList < String > Types4 = new LinkedList < String > ( ) ;
"private VisualStudioWorkspace workspace = null ; public RoslynUtilities ( VisualStudioWorkspace workspace ) { this.workspace = workspace ; } public Solution Solution { get { return workspace.CurrentSolution ; } } public Document GetDocumentFromPath ( string fullPath ) { foreach ( Project proj in this.Solution.Projects ) { foreach ( Document doc in proj.Documents ) { if ( doc.FilePath == fullPath ) return doc ; } } return null ; } public SyntaxTree GetSyntaxTreeFromDocumentPath ( string fullPath ) { Document doc = GetDocumentFromPath ( fullPath ) ; if ( doc ! = null ) return doc.GetSyntaxTreeAsync ( ) .Result ; else return null ; } public SyntaxNode GetNodeByFilePosition ( string fullPath , int absoluteChar ) { SyntaxTree tree = GetSyntaxTreeFromDocumentPath ( fullPath ) ; if ( tree ! = null ) { var compUnit = tree.GetCompilationUnitRoot ( ) ; if ( compUnit ! = null ) { return compUnit.FindToken ( absoluteChar , true ) .Parent ; } } return null ; } private VisualStudioWorkspace GetRoslynWorkspace ( ) { var componentModel = ( IComponentModel ) GetGlobalService ( typeof ( SComponentModel ) ) ; return componentModel.GetService < VisualStudioWorkspace > ( ) ; } EnvDTE80.DTE2 applicationObject = ( EnvDTE80.DTE2 ) GetService ( typeof ( SDTE ) ) ; EnvDTE.TextSelection ts = applicationObject.ActiveWindow.Selection as EnvDTE.TextSelection ; if ( ts == null ) return ; EnvDTE.VirtualPoint point = ts.ActivePoint ; int charOffset = point.AbsoluteCharOffset ; charOffset += point.Line ; //HACK ALERTParse.Roslyn.RoslynUtilities roslyn = new Parse.Roslyn.RoslynUtilities ( GetRoslynWorkspace ( ) ) ; SyntaxNode node = roslyn.GetNodeByFilePosition ( applicationObject.ActiveDocument.FullName , charOffset ) ;"
"public interface IFoo < out T > { T Data { get ; } } public struct Foo < T > : IFoo < T > { public Foo ( T data ) : this ( ) { Data = data ; } public T Data { get ; private set ; } } public class FooService < T > { ... public Foo < T > Get ( string id ) { ... } } // Create and register a few FooService instancesServiceLocator.Register ( new FooService < DateTime > ( ) , `` someServiceId '' ) ; ServiceLocator.Register ( new FooService < double ? > ( ) , `` anotherServiceId '' ) ; // Retrieve a particular FooService instance and call the Get methodvar fooService = ( FooService < object > ) ServiceLocator.Get ( `` someServiceId '' ) ; var foo = fooService.Get ( `` someFooId '' ) ;"
"const MY_MESSAGE = WM_USER+100 ; procedure MyMessage ( var Msg : TMessage ) ; message MY_MESSAGE ; procedure TForm1.MyMessage ( var Msg : TMessage ) ; begin ... .end ; public static uint ms ; protected override void WndProc ( ref Message m ) { if ( m.Msg == ms ) MessageBox.Show ( `` example '' ) ; else base.WndProc ( ref m ) ; } void Button1Click ( object sender , EventArgs e ) { PostMessage ( HWND_BROADCAST , ms , IntPtr.Zero , IntPtr.Zero ) ; }"
"private EnvDTE.ProjectItem AddFileToSolution ( string filePath ) { var folder = CurrentProject.ProjectItems.AddFolder ( Path.GetDirectoryName ( filePath ) ) ; var item = folder.ProjectItems.AddFromFileCopy ( filePath ) ; item.Properties.Item ( `` BuildAction '' ) .Value = `` None '' ; // item.Properties.Item ( `` CopyToOutputDirectory '' ) .Value = `` CopyAlways '' ; // does n't work - the dictionary does n't contain this item , so it throws an exception return item ; }"
"session.CreateSQLQuery ( @ '' SET IDENTITY_INSERT [ Article ] ON '' ) ; Property ( x = > x.ArticleId , m = > { m.NotNullable ( true ) ; m.UniqueKey ( `` UQ_Article_ArticleId '' ) ; m.Column ( cm = > cm.SqlType ( `` INT IDENTITY '' ) ) ; m.Generated ( PropertyGeneration.Insert ) ; m.Insert ( true ) ; m.Update ( false ) ; } ) ;"
"SqlGeography geo = SqlGeography.STGeomFromText ( chars , Constants.SRID ) ; DbGeography dbGeo = DbSpatialServices.Default.GeographyFromProviderValue ( geo ) ; //EntityFramework.SqlServer.dll ( 6.0.0.0 ) System.Data.Entity.SqlServer.SqlTypesAssemblyLoaderpublic SqlTypesAssemblyLoader ( IEnumerable < string > assemblyNames = null ) { this._preferredSqlTypesAssemblies = ( assemblyNames ? ? ( ( IEnumerable < string > ) new string [ ] { `` Microsoft.SqlServer.Types , Version=11.0.0.0 , Culture=neutral , PublicKeyToken=89845dcd8080cc91 '' , `` Microsoft.SqlServer.Types , Version=10.0.0.0 , Culture=neutral , PublicKeyToken=89845dcd8080cc91 '' } ) ) ; this._latestVersion = new Lazy < SqlTypesAssembly > ( new Func < SqlTypesAssembly > ( this.BindToLatest ) , true ) ; } }"
"try { string [ ] files = Directory.GetFiles ( @ '' C : \ '' , * . * '' , SearchOption.AllDirectories ) ; foreach ( string file in files ) { Console.WriteLine ( file ) ; } } catch { }"
"public static partial class LogicFactory { /// < summary > A factory for ILogic instances < /summary > [ PexFactoryMethod ( typeof ( ILogic ) ) ] public static ILogic Create ( string defaultUICulture , bool saveSuccessful ) { return Mock.Of < ILogic > ( x = > x.GetUICulture ( It.IsAny < string > ( ) ) == defaultUICulture & & x.Save ( It.IsAny < string > ( ) , It.IsAny < string > ( ) ) == saveSuccessful ) ; } } [ assembly : PexCreatableByClassFactory ( typeof ( ILogic ) , typeof ( LogicFactory ) ) ]"
"public interface IMessage { object GetContent ( ) ; } public interface IMessage < out TContent > : IMessage where TContent : class { TContent Content { get ; } } public class ServerMessage : IMessage < string > { public ServerMessage ( string content ) { this.Content = content ; } public string Content { get ; private set ; } public object GetContent ( ) { return this.Content ; } } public interface ISubscription { void Unsubscribe ( ) ; } public interface INotification < TMessageType > : ISubscription where TMessageType : class , IMessage { void Register ( Action < TMessageType , ISubscription > callback ) ; void ProcessMessage ( TMessageType message ) ; } internal class Notification < TMessage > : INotification < TMessage > where TMessage : class , IMessage { private Action < TMessage , ISubscription > callback ; public void Register ( Action < TMessage , ISubscription > callbackMethod ) { this.callback = callbackMethod ; } public void Unsubscribe ( ) { this.callback = null ; } public void ProcessMessage ( TMessage message ) { this.callback ( message , this ) ; } } public class NotificationManager { private ConcurrentDictionary < Type , List < ISubscription > > listeners = new ConcurrentDictionary < Type , List < ISubscription > > ( ) ; public ISubscription Subscribe < TMessageType > ( Action < TMessageType , ISubscription > callback ) where TMessageType : class , IMessage { Type messageType = typeof ( TMessageType ) ; // Create our key if it does n't exist along with an empty collection as the value . if ( ! listeners.ContainsKey ( messageType ) ) { listeners.TryAdd ( messageType , new List < ISubscription > ( ) ) ; } // Add our notification to our listener collection so we can publish to it later , then return it . var handler = new Notification < TMessageType > ( ) ; handler.Register ( callback ) ; List < ISubscription > subscribers = listeners [ messageType ] ; lock ( subscribers ) { subscribers.Add ( handler ) ; } return handler ; } public void Publish < T > ( T message ) where T : class , IMessage { Type messageType = message.GetType ( ) ; if ( ! listeners.ContainsKey ( messageType ) ) { return ; } // Exception is thrown here due to variance issues . foreach ( INotification < T > handler in listeners [ messageType ] ) { handler.ProcessMessage ( message ) ; } } } class Program { static void Main ( string [ ] args ) { var notificationManager = new NotificationManager ( ) ; ISubscription subscription = notificationManager.Subscribe < ServerMessage > ( ( message , sub ) = > Console.WriteLine ( message.Content ) ) ; notificationManager.Publish ( new ServerMessage ( `` This works '' ) ) ; IMessage newMessage = MessageFactoryMethod ( `` This throws exception '' ) ; notificationManager.Publish ( newMessage ) ; Console.ReadKey ( ) ; } private static IMessage MessageFactoryMethod ( string content ) { return new ServerMessage ( content ) ; } }"
"< log4net > < appender name= '' CloudWatchLogsAppender '' type= '' CloudWatchAppender.CloudWatchLogsAppender , CloudWatchAppender '' > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % date [ % thread ] % level % logger. % method - % message % newline '' / > < /layout > < groupName value= '' agroupname '' / > < streamName value= '' astreamname '' / > < /appender > < root > < level value= '' INFO '' / > < appender-ref ref= '' CloudWatchLogsAppender '' / > < /root > < logger name= '' Amazon '' > < level value= '' OFF '' / > < /logger > < /log4net > private static readonly ILog Log = LogManager.GetLogger ( MethodBase.GetCurrentMethod ( ) .DeclaringType ) ;"
public class Post { } public class Question : Post { } public class Answer : Post { public void Fail ( ) { Post p = new Post ( ) ; Question q = ( Question ) p ; // This will throw an InvalidCastException } }
class Program { static void Main ( string [ ] args ) { Class700 class700 = new Class700 ( ) ; } } class Class1 { public Class1 ( ) { } } class Class2 : Class1 { public Class2 ( ) { } } class Class3 : Class2 { public Class3 ( ) { } } class Class4 : Class3 { public Class4 ( ) { } } class Class5 : Class4 { public Class5 ( ) { } } //class ClassN : ClassN-1 { public ClassN ( ) { } } where N = 2 to N = 1000
"eventSource .GroupBy ( event = > event.GroupingKey ) .Select ( group = > new { group.Key , Events = group } ) .Subscribe ( group = > group.Events .Buffer ( TimeSpan.FromSeconds ( 60 ) , 100 ) .Subscribe ( list = > SendToStorage ( list ) ) ) ;"
public struct MyStruct { public unsafe fixed byte buffer [ 100 ] ; public int foo ( ) { return sizeof ( buffer ) ; // Compile error . } }
"public class myClass { private object param1 ; private object param2 ; private object param3 ; private object param4 ; public myClass ( object param1 , object param2 , object param3 , object param4 ) { this.param1 = param1 ; this.param2 = param2 ; this.param3 = param3 ; this.param4 = param4 ; } }"
"public XSpreadsheet getSpreadsheet ( int nIndex , XComponent xComp ) { XSpreadsheets xSheets = ( ( XSpreadsheetDocument ) xComp ) .getSheets ( ) ; XIndexAccess xSheetsIA = ( XIndexAccess ) xSheets ; XSpreadsheet xSheet = ( XSpreadsheet ) xSheetsIA.getByIndex ( nIndex ) .Value ; return xSheet ; } XSpreadsheet newSheet = getSpreadsheet ( sheetIndex , xComp ) ; string filePathway = @ '' file : ///c : /temp/blank.ods '' ; PropertyValue [ ] propVals = new PropertyValue [ 0 ] ; XComponent oCalcuDoc = oDesktop.loadComponentFromURL ( filePathway , `` _blank '' , 0 , propVals ) ;"
public class SomeGridRow { public string Code { get ; set ; } public string Description { get ; set ; } public const string Code = `` Code '' ; } string code = gridRow.Code ; // Actual member from instantiated classstring codeField = SomeGridRow.Code ; // Static/Const
"[ HttpGet ] public IActionResult SendEmailVerificationCode ( int userId ) { SpaceUser user = userManager.FindByIdAsync ( userId ) .Result ; bool taskComleted = SendEmailVerificationLink ( userId ) .IsCompleted ; if ( taskComleted ) { AddToErrorData ( InfoMessages.EmailVerificationLinkSent_Params , user.Email ) ; return RedirectToAction ( nameof ( HomeController.Index ) , `` Home '' ) ; } else { return RedirectToAction ( `` EmailNotConfirmed '' , new { userId = user.Id } ) ; } } [ HttpGet ] public IActionResult Index ( ) { return View ( ) ; }"
"public bool stringsMatch ( string searchFor , string searchIn ) { if ( string.IsNullOrEmpty ( searchFor ) ) { return true ; } return searchIn ! = null & & ( searchIn.Trim ( ) .ToLower ( ) .StartsWith ( searchFor.Trim ( ) .ToLower ( ) ) || searchIn.Contains ( `` `` + searchFor ) ) ; } IQueryable < Blah > blahs = query.Where ( b = > stringsMatch ( searchText , b.Name ) ; IQueryable < Blah > blahs = query.Where ( b = > string.IsNullOrEmpty ( searchText ) || ( b.Name ! = null & & ( b.Name.Trim ( ) .ToLower ( ) .StartsWith ( searchText.Trim ( ) .ToLower ( ) ) || b.Name.Contains ( `` `` + searchText ) ) ) ;"
"string searchTerm = `` Essex '' ; context.Clubs.Search ( searchTerm , club = > club.Name , club = > club.County ) //Note : If possible I would rather something closer to the following syntax ... context.Clubs.Search ( club = > new [ ] { club.Name , club.County } , searchTerm ) ; // ... or , even better , something similar to this ... context.Clubs.Search ( club = > new { club.Name , club.County } , searchTerm ) ; public static IQueryable < TSource > Search < TSource > ( this IQueryable < TSource > source , string searchTerm , params Expression < Func < TSource , string > > [ ] stringProperties ) { if ( String.IsNullOrEmpty ( searchTerm ) ) { return source ; } // The lamda I would like to reproduce : // source.Where ( x = > x . [ property1 ] .Contains ( searchTerm ) // || x . [ property2 ] .Contains ( searchTerm ) // || x. [ property3 ] .Contains ( searchTerm ) ... ) //Create expression to represent x . [ property1 ] .Contains ( searchTerm ) var searchTermExpression = Expression.Constant ( searchTerm ) ; //Build parameters var parameters = stringProperties.SelectMany ( prop = > prop.Parameters ) ; Expression orExpression = null ; //Build a contains expression for each property foreach ( var stringProperty in stringProperties ) { var checkContainsExpression = Expression.Call ( stringProperty.Body , typeof ( string ) .GetMethod ( `` Contains '' ) , searchTermExpression ) ; if ( orExpression == null ) { orExpression = checkContainsExpression ; } //Build or expression for each property orExpression = Expression.OrElse ( orExpression , checkContainsExpression ) ; } var methodCallExpression = Expression.Call ( typeof ( Queryable ) , `` Where '' , new Type [ ] { source.ElementType } , source.Expression , Expression.Lambda < Func < TSource , bool > > ( orExpression , parameters ) ) ; return source.Provider.CreateQuery < TSource > ( methodCallExpression ) ; } Expression.Lambda < Func < TSource , bool > > ( orExpression , parameters.First ( ) ) ) ;"
"Math.Round ( 7060.625 , 2 ) ; // prints 7060.62Math.Round ( 7060.624 , 2 ) ; // prints 7060.62Math.Round ( 7060.626 , 2 ) ; // prints 7060.63 + ( 7060.625 ) .toFixed ( 2 ) ; // prints 7060.63 ( value differs ) + ( 7060.624 ) .toFixed ( 2 ) ; // prints 7060.62+ ( 7060.626 ) .toFixed ( 2 ) ; // prints 7060.63"
"Console.WriteLine ( String.Format ( `` { 0 } '' , null ) ) ; String str = null ; Console.WriteLine ( String.Format ( `` { 0 } '' , str ) ) ;"
"MyClass b = new MyClass ( ) ; // implements IdisposableMyClass c = new MyClass ( ) ; MyClass a ; using ( a = new MyClass ( ) ) { a = b ; a = c ; } try { a = new MyClass ( ) ; a = b ; a = c ; } finally { a.Dispose ( ) ; } using ( Font font1 = new Font ( `` Arial '' , 10.0f ) ) { byte charset = font1.GdiCharSet ; } { Font font1 = new Font ( `` Arial '' , 10.0f ) ; try { byte charset = font1.GdiCharSet ; } finally { if ( font1 ! = null ) ( ( IDisposable ) font1 ) .Dispose ( ) ; } }"
"namespace EmailNews.Services { internal interface IScopedProcessingService { void DoWork ( ) ; } internal class ScopedProcessingService : IScopedProcessingService { private readonly ApplicationDbContext _context ; public ScopedProcessingService ( ApplicationDbContext context ) { _context = context ; } public void DoWork ( ) { Mail mail = new Mail ( ) ; mail.Date = DateTime.Now ; mail.Note = `` lala '' ; mail.Tema = `` lala '' ; mail.Email = `` lala '' ; _context.Add ( mail ) ; _context.SaveChangesAsync ( ) ; } } } namespace EmailNews.Services { # region snippet1internal class TimedHostedService : IHostedService , IDisposable { private readonly ILogger _logger ; private Timer _timer ; public TimedHostedService ( IServiceProvider services , ILogger < TimedHostedService > logger ) { Services = services ; _logger = logger ; } public IServiceProvider Services { get ; } public Task StartAsync ( CancellationToken cancellationToken ) { _logger.LogInformation ( `` Timed Background Service is starting . `` ) ; _timer = new Timer ( DoWork , null , TimeSpan.Zero , TimeSpan.FromMinutes ( 1 ) ) ; return Task.CompletedTask ; } private void DoWork ( object state ) { using ( var scope = Services.CreateScope ( ) ) { var scopedProcessingService = scope.ServiceProvider .GetRequiredService < IScopedProcessingService > ( ) ; scopedProcessingService.DoWork ( ) ; } } public Task StopAsync ( CancellationToken cancellationToken ) { _logger.LogInformation ( `` Timed Background Service is stopping . `` ) ; _timer ? .Change ( Timeout.Infinite , 0 ) ; return Task.CompletedTask ; } public void Dispose ( ) { _timer ? .Dispose ( ) ; } } # endregion } services.AddHostedService < TimedHostedService > ( ) ; services.AddScoped < IScopedProcessingService , ScopedProcessingService > ( ) ;"
"public void ConfigureServices ( IServiceCollection services ) { services.AddDbContext < ApplicationDbContext > ( options = > options.UseSqlServer ( Configuration.GetConnectionString ( `` DefaultConnection '' ) ) ) ; services.AddDefaultIdentity < User ( ) .AddEntityFrameworkStores < ApplicationDbContext > ( ) .AddDefaultTokenProviders ( ) ; services.AddAuthentication ( ) .AddFacebook ( facebookOptions = > { facebookOptions.AppId = Configuration [ `` Authentication : Facebook : AppId '' ] ; facebookOptions.AppSecret = Configuration [ `` Authentication : Facebook : AppSecret '' ] ; } ) ; services.Configure < CookiePolicyOptions > ( options = > { // This lambda determines whether user consent for non-essential cookies is needed for a given request . options.CheckConsentNeeded = context = > true ; options.MinimumSameSitePolicy = SameSiteMode.None ; } ) ; // This code should be executed after the identity id registered to work services.ConfigureApplicationCookie ( config = > { config.SlidingExpiration = true ; config.ExpireTimeSpan = TimeSpan.FromMinutes ( 15 ) ; config.Cookie.HttpOnly = true ; config.Events = new CookieAuthenticationEvents { OnRedirectToLogin = ctx = > { if ( ctx.Request.Path.StartsWithSegments ( `` /api '' , StringComparison.CurrentCultureIgnoreCase ) ) { ctx.Response.StatusCode = ( int ) HttpStatusCode.Unauthorized ; } else { ctx.Response.Redirect ( ctx.RedirectUri ) ; } return Task.FromResult ( 0 ) ; } } ; } ) ; services.AddMvc ( ) .SetCompatibilityVersion ( CompatibilityVersion.Version_2_2 ) ; } config.SlidingExpiration = true ; config.ExpireTimeSpan = TimeSpan.FromMinutes ( 15 ) ; config.Cookie.HttpOnly = true ;"
"protected T Clone < T > ( ) where T : class , ICopyable < T > , new ( )"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Drawing.Drawing2D ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace TTTest { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void Form1_Load ( object sender , EventArgs e ) { Opacity = 100 ; } private void button1_Click ( object sender , EventArgs e ) { timer1.Enabled = ! timer1.Enabled ; } private void timer1_Tick ( object sender , EventArgs e ) { Opacity = 0 ; Bitmap img = new Bitmap ( this.Width , this.Height ) ; Graphics gr = Graphics.FromImage ( img ) ; gr.CopyFromScreen ( Location , Point.Empty , Size ) ; this.BackgroundImage = img ; Opacity = 100 ; } private void Form1_Paint ( object sender , PaintEventArgs e ) { Graphics g = e.Graphics ; g.SmoothingMode = SmoothingMode.AntiAlias ; ExtDrawing2D.FillRoundRect ( g , new SolidBrush ( Color.FromArgb ( 100 , 255 , 255 , 255 ) ) , new RectangleF ( 1 , 1 , Width - 3 , Height - 3 ) , 4f ) ; g.DrawPath ( new Pen ( Color.FromArgb ( 100 , 0 , 0 , 0 ) ) , ExtDrawing2D.GetRoundedRect ( new RectangleF ( 0 , 0 , Width - 1 , Height - 1 ) , 5f ) ) ; g.DrawPath ( new Pen ( Color.FromArgb ( 100 , 255,255,255 ) ) , ExtDrawing2D.GetRoundedRect ( new RectangleF ( 1,1 , Width - 3 , Height - 3 ) , 4f ) ) ; } private void button2_Click ( object sender , EventArgs e ) { timer1_Tick ( sender , e ) ; } private void panel1_Paint ( object sender , PaintEventArgs e ) { Graphics g = e.Graphics ; g.SmoothingMode = SmoothingMode.AntiAlias ; ExtDrawing2D.FillRoundRect ( g , new SolidBrush ( Color.FromArgb ( 150 , 255,255,255 ) ) , new RectangleF ( 1 , 1 , panel1.Width - 3 , panel1.Height - 3 ) , 2f ) ; g.DrawPath ( new Pen ( Color.FromArgb ( 100 , 0 , 0 , 0 ) ) , ExtDrawing2D.GetRoundedRect ( new RectangleF ( 0 , 0 , panel1.Width - 1 , panel1.Height - 1 ) , 3f ) ) ; g.DrawPath ( new Pen ( Color.FromArgb ( 100 , 255 , 255 , 255 ) ) , ExtDrawing2D.GetRoundedRect ( new RectangleF ( 1 , 1 , panel1.Width - 3 , panel1.Height - 3 ) , 2f ) ) ; } } }"
"IQueryable < Products > GetAllProductsForCrazyUserNow ( CrazyUser id ) ; Products GetAProductForCrazyUserNow ( CrazyUser id , product id ) ; IQueryable < Products > GetProductsForNiceUserNow ( NiceUser id ) ; Products GetProductsForNiceUserNow ( NiceUser id , product id ) ; IQueryable < Products > GetAllProducts ( ) ; Products GetAProduct ( product id ) ; var Niceman = IQueryable < Products > GetAllProducts ( ) .Where ( u= > u.Name == `` Nice '' ) ;"
Class SomeClass : IDisposable { public void Dispose ( ) { while ( true ) { } } ~SomeClass ( ) { Dispose ( ) ; } }
"struct Point { public Point ( double x , double y , double z ) { _x = x ; _y = y ; _z = z ; } public readonly double _x ; public readonly double _y ; public readonly double _z ; public double X { get { return _x ; } } public double Y { get { return _y ; } } public double Z { get { return _z ; } } } class Program { static void Main ( string [ ] args ) { const int loopCount = 10000000 ; var point = new Point ( 12.0 , 123.5 , 0.123 ) ; var sw = new Stopwatch ( ) ; double x , y , z ; double calculatedValue ; sw.Start ( ) ; for ( int i = 0 ; i < loopCount ; i++ ) { x = point._x ; y = point._y ; z = point._z ; calculatedValue = point._x * point._y / point._z ; } sw.Stop ( ) ; double fieldTime = sw.ElapsedMilliseconds ; Console.WriteLine ( `` Direct field access : `` + fieldTime ) ; sw.Reset ( ) ; sw.Start ( ) ; for ( int i = 0 ; i < loopCount ; i++ ) { x = point.X ; y = point.Y ; z = point.Z ; calculatedValue = point.X * point.Y / point.Z ; } sw.Stop ( ) ; double propertyTime = sw.ElapsedMilliseconds ; Console.WriteLine ( `` Property access : `` + propertyTime ) ; double totalDiff = propertyTime - fieldTime ; Console.WriteLine ( `` Total difference : `` + totalDiff ) ; double averageDiff = totalDiff / loopCount ; Console.WriteLine ( `` Average difference : `` + averageDiff ) ; Console.ReadLine ( ) ; } }"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Web ; namespace WebApplication1.App_Code { public class Util { public static int getMeaningOfLife ( ) { return 42 ; } } } using System ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace WebApplication1.Tests { [ TestClass ] public class UnitTest1 { [ TestMethod ] public void TestMethod1 ( ) { int result = WebApplication1.App_Code.Util.getMeaningOfLife ( ) ; if ( result ! = 42 ) { Assert.Fail ( ) ; } } } }
"public class BaseDataObject { // internal data store private Dictionary < string , object > attachedData = new Dictionary < string , object > ( ) ; public void SetData ( string key , object value ) { attachedData [ key ] = value ; } public object GetData ( string key ) { return attachedData [ key ] ; } public int SomeValue { get ; set ; } public int SomeOtherValue { get ; set ; } } public static class Extensions { public static void SetBarValue ( this BaseDataObject dataObject , int barValue ) { /// Can not attach a property to BaseDataObject ? dataObject.SetData ( `` bar '' , barValue ) ; } } public class TestDemo { public void CreateTest ( ) { // this works BaseDataObject test1 = new BaseDataObject { SomeValue = 3 , SomeOtherValue = 4 } ; // this does not work - it does not compile // can not use extension method in the initialiser block // can not make an exension property BaseDataObject test2 = new BaseDataObject { SomeValue = 3 , SomeOtherValue = 4 , SetBarValue ( 5 ) } ; } } // fluent interface stylepublic static BaseDataObject SetBarValueWithReturn ( this BaseDataObject dataObject , int barValue ) { dataObject.SetData ( `` bar '' , barValue ) ; return dataObject ; } // this worksBaseDataObject test3 = ( new BaseDataObject { SomeValue = 3 , SomeOtherValue = 4 } ) .SetBarValueWithReturn ( 5 ) ;"
"int smallPrime , spGen ; for ( int i = 0 ; i < numSmallPrimes ; i++ ) { smallPrime = smallPrimes [ i ] ; spGen = spHexGen [ i ] ; [ ... ] } for ( int i = 0 ; i < numSmallPrimes ; i++ ) { int smallPrime = smallPrimes [ i ] ; int spGen = spHexGen [ i ] ; [ ... ] }"
"public class Template { public virtual int Id { get ; set ; } public virtual ICollection < Influence > Influences { get ; set ; } } public class Influence { public virtual int Id { get ; set ; } public virtual Trait Trait { get ; set ; } public virtual int Value { get ; set ; } } public class Trait { public virtual int Id { get ; set ; } public virtual string Name { get ; set ; } } public class TemplateConfiguration : EntityConfiguration < Template > { public TemplateConfiguration ( ) { HasKey ( o = > o.Id ) ; Property ( o = > o.Id ) .IsIdentity ( ) ; HasMany ( o = > o.Influences ) .WithRequired ( ) .Map ( `` templates.influences '' , ( template , influence ) = > new { Template = template.Id , Influence = influence.Id } ) ; MapSingleType ( o = > new { o.Id } ) ; } } public TemplateConfiguration ( ) { HasMany ( u = > u.Influences ) .WithMany ( ) .Map ( `` templates.influences '' , ( template , influence ) = > new { Template = template.Id , Trait = influence.Trait.Id , Value = influence.Value } ) ; MapSingleType ( c = > new { c.Id } ) .ToTable ( `` templates '' ) ; } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Data.Objects ; using System.Data.EntityClient ; using System.Data.Entity.ModelConfiguration ; using System.Data.Entity ; using System.Data.Entity.Infrastructure ; namespace EFTest { class Program { static void Main ( string [ ] args ) { Database.SetInitializer < SampleDataContext > ( new AlwaysRecreateDatabase < SampleDataContext > ( ) ) ; var builder = new ModelBuilder ( ) ; builder.Configurations.Add ( new TraitConfiguration ( ) ) ; builder.Configurations.Add ( new InfluenceConfiguration ( ) ) ; builder.Configurations.Add ( new TemplateConfiguration ( ) ) ; var model = builder.CreateModel ( ) ; using ( var context = new SampleDataContext ( model ) ) { var traits = new List < Trait > { new Trait { Name = `` Years '' } , new Trait { Name = `` Days '' } } ; traits.ForEach ( x = > { context.Traits.Add ( x ) ; } ) ; context.SaveChanges ( ) ; var templates = new List < Template > { new Template { Influences = new List < Influence > { new Influence { Trait = context.Traits.Single ( i = > i.Name == `` Years '' ) , Value = 5 } , new Influence { Trait = context.Traits.Single ( i = > i.Name == `` Days '' ) , Value = 15 } } } } ; templates.ForEach ( x = > { context.Templates.Add ( x ) ; } ) ; context.SaveChanges ( ) ; } } } public class SampleDataContext : DbContext { public SampleDataContext ( DbModel model ) : base ( model ) { } public DbSet < Trait > Traits { get ; set ; } public DbSet < Influence > Influences { get ; set ; } public DbSet < Template > Templates { get ; set ; } } public class Trait { public virtual int Id { get ; set ; } public virtual string Name { get ; set ; } } public class TraitConfiguration : EntityConfiguration < Trait > { public TraitConfiguration ( ) { HasKey ( o = > o.Id ) ; Property ( o = > o.Id ) .IsIdentity ( ) ; MapSingleType ( o = > new { o.Id , o.Name } ) ; } } public class Influence { public virtual int Id { get ; set ; } public virtual Trait Trait { get ; set ; } public virtual int Value { get ; set ; } } public class InfluenceConfiguration : EntityConfiguration < Influence > { public InfluenceConfiguration ( ) { HasKey ( o = > o.Id ) ; Property ( o = > o.Id ) .IsIdentity ( ) ; HasRequired ( o = > o.Trait ) ; Property ( o = > o.Value ) ; MapSingleType ( o = > new { o.Id , Trait = o.Trait.Id , o.Value } ) ; } } public class Template { public virtual int Id { get ; set ; } public virtual ICollection < Influence > Influences { get ; set ; } } public class TemplateConfiguration : EntityConfiguration < Template > { public TemplateConfiguration ( ) { HasKey ( o = > o.Id ) ; Property ( o = > o.Id ) .IsIdentity ( ) ; HasMany ( o = > o.Influences ) .WithRequired ( ) .Map ( `` templates.influences '' , ( template , influence ) = > new { Template = template.Id , Influence = influence.Id } ) ; MapSingleType ( o = > new { o.Id } ) ; } } }"
"public Form1 ( ) { InitializeComponent ( ) ; Application.ThreadException += ( sender , e ) = > MessageBox.Show ( e.Exception.ToString ( ) ) ; } private void button1_Click ( object sender , EventArgs e ) { var inner = new Exception ( `` Inner '' ) ; var outer = new Exception ( `` Outer '' , inner ) ; //throw outer ; BeginInvoke ( new Action ( ( ) = > { throw outer ; } ) ) ; }"
"public enum HardwareInterfaceType { Gpib = 1 , Vxi = 2 , GpibVxi = 3 , } HardwareInterfaceType type = default ( HardwareInterfaceType ) ;"
@ { Layout = null ; } < html > < body > < form > < p > @ ViewBag.BeforeCount < /p > < input type= '' submit '' value= '' Submit '' / > < /form > < /body > < /html > public class HomeController : Controller { public ActionResult Index ( ) { ViewBag.BeforeCount = StaticVariableTester.Count ; StaticVariableTester.Count += 50 ; return View ( ) ; } } public class StaticVariableTester { public static int Count ; }
var query = from c in db.Cars select c ; foreach ( Car aCar in query ) { Console.WriteLine ( aCar.Name ) ; }
"AppDomain.CurrentDomain.AssemblyLoad += ( sender , args ) = > { var token = args.LoadedAssembly.GetName ( ) .GetPublicKeyToken ( ) ; if ( ! IsValidToken ( token ) ) { Process.GetCurrentProcess ( ) .Kill ( ) ; } } ;"
public class A { object someObject ; private object someOtherObject ; }
"Table : Item Columns : ItemID , Title , Content Table : Tag Columns : TagID , Title Table : ItemTag Columns : ItemID , TagID//example -- this is the right sidebar of stackoverflowc # × 59279sql × 14885asp.net-mvc × 9123linq × 4337tags × 339"
if ( null ! = obj ) if ( obj ! = null )
"var accessToken = await GetToken ( ) ; // retrieves a token from Active Directoryusing ( var client = new HttpClient ( ) ) { client .DefaultRequestHeaders .Clear ( ) ; client .DefaultRequestHeaders .Authorization = new AuthenticationHeaderValue ( `` Bearer '' , accessToken ) ; client .DefaultRequestHeaders .Accept .Add ( new MediaTypeWithQualityHeaderValue ( `` application/json '' ) ) ; var apiUrl = `` https : // [ mySite ] .sharepoint.com/_api/web '' ; // how do I get the title of the site at the apiUrl variable ? }"
"m = > m.Data m = > Convert ( m.Data ) using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Linq.Expressions ; namespace ConsoleApplication { static class Program { static void Main ( string [ ] args ) { Model model = new Model ( ) { Data = 123 } ; Test ( m = > m.Data , m = > m.Data ) ; Console.ReadLine ( ) ; } public static void Test < TProperty > ( Expression < Func < Model , TProperty > > strongTyped , Expression < Func < Model , object > > weakTyped ) { Console.WriteLine ( `` Strong Typed : { 0 } '' , strongTyped ) ; Console.WriteLine ( `` Weak Typed : { 0 } '' , weakTyped ) ; } } public class Model { public int Data { get ; set ; } } } Strong Typed : m = > m.DataWeak Typed : m = > Convert ( m.Data ) weakTyped.Compile ( ) .Method { System.Object lambda_method ( System.Runtime.CompilerServices.Closure , ConsoleApplication.Model ) } [ System.Reflection.Emit.DynamicMethod.RTDynamicMethod ] : { System.Object lambda_method ( System.Runtime.CompilerServices.Closure , ConsoleApplication.Model ) } base { System.Reflection.MethodBase } : { System.Object lambda_method ( System.Runtime.CompilerServices.Closure , ConsoleApplication.Model ) } MemberType : Method ReturnParameter : null ReturnType : { Name = `` Object '' FullName = `` System.Object '' } ReturnTypeCustomAttributes : { System.Reflection.Emit.DynamicMethod.RTDynamicMethod.EmptyCAHolder }"
FieldInfo [ ] fieldInfos = this.GetType ( ) .GetFields ( BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly ) ; foreach ( FieldInfo fieldInfo in fieldInfos ) { if this.fieldInfo.GetType ( ) = TypeOf ( CustomEventHandler < this.fieldInfo.Name > ) { this.fieldInfo.Name += new CustomEventHandler < this.fieldInfo.Name > ( OnChange < this.fieldInfo.Name > ) ; } }
< add key= '' SenderName '' value= '' & # x1f3eb ; Mr Mooo '' / > @ Styles.Render ( `` ~/Content/css '' )
"ISqlServer sqlServer = await Azure.SqlServers .Define ( serverName ) .WithRegion ( regionName ) .WithExistingResourceGroup ( rgName ) .WithAdministratorLogin ( administratorLogin ) .WithAdministratorPassword ( administratorPassword ) .WithNewElasticPool ( elasticPoolName , elasticPoolEdition ) .CreateAsync ( ) ; { Microsoft.Rest.Azure.CloudException : Invalid value for header ' x-ms-request-id ' . The header must contain a single valid GUID . at Microsoft.Azure.Management.Sql.Fluent.ServersOperations. < CreateOrUpdateWithHttpMessagesAsync > d__10.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at Microsoft.Azure.Management.Sql.Fluent.ServersOperationsExtensions. < CreateOrUpdateAsync > d__11.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at Microsoft.Azure.Management.Sql.Fluent.SqlServerImpl. < CreateResourceAsync > d__53.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.Creatable ` 4. < Microsoft-Azure-Management-ResourceManager-Fluent-Core-ResourceActions-IResourceCreator < IResourceT > -CreateResourceAsync > d__15.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at Microsoft.Azure.Management.ResourceManager.Fluent.Core.DAG.CreatorTaskItem ` 1. < ExecuteAsync > d__6.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at Microsoft.Azure.Management.ResourceManager.Fluent.Core.DAG.TaskGroupBase ` 1. < ExecuteNodeTaskAsync > d__14.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter ` 1.GetResult ( ) at XircuitAPI.Controllers.AzureSqlServerController. < Create > d__9.MoveNext ( ) in C : \Users\ThimoBuchheister\Documents\Code\Xircuit\xircuit\XircuitAPI\Controllers\AzureSqlServerController.cs : line 235 }"
XmlDocument doc = null ; doc = xmlDocuments [ 3 ] ; XmlDocument doc = xmlDocuments [ 3 ] ;
"static class DateTimeExtensions { static GregorianCalendar _gc = new GregorianCalendar ( ) ; public static int GetWeekOfMonth ( this DateTime time ) { DateTime first = new DateTime ( time.Year , time.Month , 1 ) ; return time.GetWeekOfYear ( ) - first.GetWeekOfYear ( ) + 1 ; } static int GetWeekOfYear ( this DateTime time ) { return _gc.GetWeekOfYear ( time , CalendarWeekRule.FirstDay , DayOfWeek.Monday ) ; } }"
Control myControl ; switch ( x ) { case TabType.Edit : { myControl= ... ; } case TabType.View : { myControl= ... ; } } myPageView.Controls.Add ( myControl ) ; Control myControl = null ; switch ( x ) { case TabType.Edit : { myControl= ... ; } case TabType.View : { myControl= ... ; } } myPageView.Controls.Add ( myControl ) ; Control myControl ; switch ( x ) { case TabType.Edit : { myControl= ... ; } default : { myControl= ... ; } } myPageView.Controls.Add ( myControl ) ;
public interface IStore < TEntity > { TEntity Get ( object identifier ) ; void Put ( TEntity entity ) ; } class MyStore : IStore < Product > { public Product Get ( object identifier ) { //whatever } public void Put ( Product entity ) { //Store the product in db //RAISE EVENT ON SUCCESS } }
"[ ServiceContract ] public interface IActiveDirectory { [ OperationContract ] [ WebGet ] void Dummy ( ) ; [ OperationContract ] [ WebGet ] AbstractMessage Dummy2 ( ) ; [ OperationContract ] [ WebGet ] AbstractMessage Dummy3 ( ) ; [ OperationContract ] [ WebGet ] AbstractMessage SetPassWord ( string customer , string customerPassword , string userLogin , string userPassword ) ; } [ DataContract ] public abstract class AbstractMessage { [ DataMember ] public virtual bool IsError { get ; set ; } [ DataMember ] public virtual string ErrorMessage { get ; set ; } [ DataMember ] public virtual string ReturnValue { get ; set ; } } public class Message : AbstractMessage { < ... > } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single , ConcurrencyMode = ConcurrencyMode.Multiple ) ] [ KnownType ( typeof ( AbstractMessage ) ) ] public class ActiveDirectory : IActiveDirectory { public void Dummy ( ) { } public AbstractMessage Dummy2 ( ) { return new AbstractMessage ( ) ; } public AbstractMessage Dummy3 ( ) { return new Message ( ) ; } public AbstractMessage SetPassWord ( string customer , string customerPassword , string userLogin , string userPassword ) { < ... > return message ; // message is of type Message } } [ DataContract ] [ KnownType ( typeof ( AbstractMessage ) ) ] public class Message : AbstractMessage [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single , ConcurrencyMode = ConcurrencyMode.Multiple ) ] [ KnownType ( typeof ( AbstractMessage ) ) ] [ KnownType ( typeof ( Message ) ) ] public class ActiveDirectory : IActiveDirectory"
"[ HttpPost ( `` GenerateApi '' ) ] [ ProducesResponseType ( 200 ) ] [ ProducesResponseType ( 500 ) ] public IActionResult GenerateApi ( RootObject ro ) { //Here I need piece of code to create API dynamically return Ok ( new { ro.apiName , ro.parameters } ) ; } public class RootObject { public string apiName { get ; set ; } public List < parameter > parameters { get ; set ; } } public class parameter { public string parameterName { get ; set ; } public dynamic parameterType { get ; set ; } } www.example.com/api/v1/ [ controller ] / [ apiName ] / { [ parameter1_value ] } / { [ parameter2_value ] }"
"public class WorkListVM { //list for employees [ Display ( Name = `` Select A Employee '' ) ] [ Required ] public int ? EmployeeId { get ; set ; } public GenericSelectList EmployeeList { get ; set ; } } //build view model var vm = new WorkListVM ( ) ; //build employee list vm.EmployeeList = new GenericSelectList ( 0 , '' -- Select Employee -- '' ) ; var employees = new List < Employee > ( ) ; using ( var gr = new GenericRepo < Employee > ( ) ) { employees = gr.Get ( ) .ToList ( ) ; } foreach ( var employee in employees ) { var gl = new GenericListItem ( ) ; gl.Id = employee.EmployeeId ; gl.DisplayFields = employee.FirstName + `` `` + employee.LastName ; vm.EmployeeList.Values.Add ( gl ) ; } public class GenericSelectList { public List < GenericListItem > Values { get ; set ; } public int StartValue { get ; set ; } public string Message { get ; set ; } public GenericSelectList ( int StartValue = 0 , string Message = `` select '' ) { Values = new List < GenericListItem > ( ) ; this.StartValue = StartValue ; this.Message = Message ; } public void BuildValues < T > ( List < T > items , Func < T , int > value , Func < T , string > text ) where T : class { this.Values = items.Select ( f = > new GenericListItem ( ) { Id = value ( f ) , DisplayFields = text ( f ) } ) .ToList ( ) ; } }"
"public Task < WebResponse > Download ( string url ) { TaskCompletionSource < WebResponse > tcs = new TaskCompletionSource < WebResponse > ( TaskCreationOptions.LongRunning ) ; var client = ( HttpWebRequest ) HttpWebRequest.Create ( url ) ; var async = client.BeginGetResponse ( o = > { try { WebResponse resp = client.EndGetResponse ( o ) ; tcs.SetResult ( resp ) ; } catch ( Exception ex ) { tcs.SetException ( ex ) ; } } , null ) ; return tcs.Task ; }"
"public interface IMovable < TEntity , T > where TEntity : class where T : struct { TEntity Move ( IMover < T > moverProvider ) ; } public abstract class Animal : IMovable < Animal , int > { ... public virtual Animal Move ( IMover < int > moverProvider ) { // performs movement using provided mover } } public class Snake : Animal { ... public override Animal Move ( IMover < int > moverProvider ) { // perform different movement } } // I do n't want this if methods would be void typedvar s = GetMySnake ( ) ; s.Move ( provider ) ; return s ; // I do n't want this either if at all possiblereturn ( Snake ) GetMySnake ( ) .Move ( provider ) ; // I simply want thisreturn GetMySnake ( ) .Move ( provider ) ; public Snake Move ( IMover < int > moverProvider ) { }"
int [ ] IndexArray = ArrayWithValues.Return_Indexes_Of_1000_Biggest_Values
"private AutoResetEvent connectionWaitHandle = new AutoResetEvent ( false ) ; private static bool stop = false ; private void MainThread ( ) { TcpListener universalListener = new TcpListener ( IPAddress.Any , currentSettings.ListeningPort ) ; universalListener.Start ( ) ; while ( ! stop ) { IAsyncResult result = universalListener.BeginAcceptTcpClient ( WorkerThread , universalListener ) ; connectionWaitHandle.WaitOne ( ) ; connectionWaitHandle.Reset ( ) ; } } private void WorkerThread ( IAsyncResult result ) { TcpListener listener = result.AsyncState as TcpListener ; if ( listener == null ) { connectionWaitHandle.Set ( ) ; return ; } TcpClient client = listener.EndAcceptTcpClient ( result ) ; connectionWaitHandle.Set ( ) ; NetworkStream netStream = null ; bool timedout = false ; try { while ( ! timedout & & ! stop ) { if ( client.Available > 0 ) { netStream = client.GetStream ( ) ; //Get and Parse data here , no need to show this code //The absolute fastest a message can come in is 2 seconds , so we 'll sleep for one second so we are n't checking when we do n't have to . Thread.Sleep ( 1000 ) ; } else { //Sleep for a millisecond so we do n't completely hog the computer 's resources . Thread.Sleep ( 1 ) ; } if ( /*has timed out*/ ) { timedout = true ; } } } catch ( Exception exception ) { //Log Exception } finally { client.Close ( ) ; } } ( new Task.TaskFactory.FromAsync < TCPClient > ( universalListener.BeginAcceptTcpClient , universalListener.EndAcceptTcpClient , universalListener ) .ContinueWith ( WorkerThread ) ;"
"{ `` key1 '' : `` value1 '' , `` key2 '' : 1000 , `` key2 '' : 2000 , `` key3 '' : `` value3 '' } [ HttpPost ] public IHttpActionResult PostMethod ( [ FromBody ] RequestModel request ) { ... .. } public class RequestModel { [ Required ] public string Key1 { get ; set ; } [ Required ] public int Key2 { get ; set ; } public string Key3 { get ; set ; } }"
"tcpListener = new TcpListener ( IPAddress.Any , this.Port ) ; tcpListener.Start ( ) ; tcpListener.Stop ( ) ; using System ; using System.Diagnostics ; using System.Net ; using System.Net.Sockets ; using System.Reflection ; using System.Threading ; namespace TcpListenerStartStop { class MyTcpListener { public static void Main ( string [ ] args ) { Int32 port = 13000 ; if ( args.Length > 0 ) // indicates child process { Thread.Sleep ( 4000 ) ; // as a child do nothing and wait for a few seconds } else // parent will play with the TcpListener { //LaunchChildProcess ( ) ; // launch child here and listener restart is fine ? ! ? var tcpListener = new TcpListener ( IPAddress.Any , port ) ; tcpListener.Start ( ) ; Console.WriteLine ( `` Starting test in 2 seconds ... '' ) ; Thread.Sleep ( 2000 ) ; LaunchChildProcess ( ) ; // launch child here and listener restart is not fine ? ! ? tcpListener.Stop ( ) ; Console.WriteLine ( `` Stopped . `` ) ; Thread.Sleep ( 1000 ) ; tcpListener.Start ( ) ; Console.WriteLine ( `` Started '' ) ; } Console.WriteLine ( `` All is good , no exceptions : ) '' ) ; } private static void LaunchChildProcess ( ) { Process process = new Process ( ) ; var processStartInfo = new ProcessStartInfo { CreateNoWindow = true , FileName = Assembly.GetExecutingAssembly ( ) .Location , UseShellExecute = false , // comment out this line out listener restart is fine ? ! ? Arguments = `` child '' } ; process.StartInfo = processStartInfo ; process.Start ( ) ; } } }"
"var grid = context.QueryMultiple ( string.Join ( `` ; `` , selectCommands ) ) ; return queries.Select ( q = > grid.Read < T > ( ) ) .AsList ( ) ;"
"RegistryPermission f = new RegistryPermission ( RegistryPermissionAccess.Create , @ '' HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\ Policies\System\EnableLinkedConnections\1 '' ) ; f.Demand ( ) ;"
"static void Main ( string [ ] args ) { Exec ( ) ; } static void Exec ( ) { throw new Exception ( ) ; } at ConsoleApplication28.Program.Exec ( ) at ConsoleApplication28.Program.Main ( String [ ] args ) at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at System.AppDomain.ExecuteAssembly ( String assemblyFile , Evidence assemblySecurity , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ThreadHelper.ThreadStart_Context ( Object state ) at System.Threading.ExecutionContext.RunInternal ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) static void Main ( string [ ] args ) { Exec ( ) ; } static void Exec ( ) { try { throw new Exception ( ) ; } catch ( Exception ex ) { } // Breakpoint } at ConsoleApplication28.Program.Exec ( )"
"using Foo = System.Collections.Generic.Queue < Bar > ; using Foo = System.Collections.Generic.Queue < Bar > ; using FooMap = System.Collections.Generic.Dictionary < char , Foo > ;"
private static void RegisterServices ( IKernel kernel ) { kernel.Bind < IHardwareService > ( ) .To < WindowsHardwareService > ( ) ; kernel.Bind < IStatusApi > ( ) .To < StatusApiController > ( ) ; } var service = new WindowsHardwareService ( ) ; IKernel kernel = new StandardKernel ( ... .. ) ; var context = kernel.Get < IHardwareService > ( ) ; private static void RegisterServices ( IKernel kernel ) { var modules = new IoCModules ( ) ; var newKernal = modules.GetKernel ( ) ; kernel = newKernal ; } public class IoCModules { public IKernel GetKernel ( ) { var modules = new CoreModule ( ) ; return modules.Kernel ; } } public class CoreModule : NinjectModule { public override void Load ( ) { Bind < IHardwareService > ( ) .To < WindowsHardwareService > ( ) ; Bind < IStatusApi > ( ) .To < StatusApiController > ( ) ; } }
"var shape = new ShapeClass ( ( o , u ) = > { LayoutRoot.Children.Add ( o ) ; LayoutRoot.Children.Add ( u ) ; } ) ; public ShapeClass ( Action < Path , TextBlock > insert ) { }"
class Foo { Bar b1 = new Bar ( ) ; public object MethodToCall ( ) { /*Method body here*/ } } Class Bar { public Bar ( ) { /*Constructor here*/ } public void MethodCaller ( ) { //How can i call MethodToCall ( ) from here ? } }
public class Foo { public void Bar ( ) { StaticMethod ( ) ; } private static void StaticMethod ( ) { } } public class Foo { public void Bar ( ) { Foo.StaticMethod ( ) ; } private static void StaticMethod ( ) { } }
"private OurObject Autogenerated_Object1 ( ) { return new OurObject { Name = `` Object1 '' , X = 1 , Y = 2 , Width = 200 , Height = 100 } ; } MONO_PATH=/Users/jonathanpeppers/Desktop/DrawAStickman/Game/Code/iOS/DrawAStickman.iPhone/bin/iPhone/Release/DrawAStickmaniPhone.app /Developer/MonoTouch/usr/bin/arm-darwin-mono -- aot=mtriple=armv7-darwin , full , static , asmonly , nodebug , outfile=/var/folders/4s/lcvdj54x0g72nrsw9vzq6nm80000gn/T/tmp54777849.tmp/monotouch.dll.7.s `` /Users/jonathanpeppers/Desktop/DrawAStickman/Game/Code/iOS/DrawAStickman.iPhone/bin/iPhone/Release/DrawAStickmaniPhone.app/monotouch.dll '' AOT Compilation exited with code 134 , command : MONO_PATH=/Users/jonathanpeppers/Desktop/DrawAStickman/Game/Code/iOS/DrawAStickman.iPhone/bin/iPhone/Release/DrawAStickmaniPhone.app /Developer/MonoTouch/usr/bin/arm-darwin-mono -- aot=mtriple=armv7-darwin , full , static , asmonly , nodebug , outfile=/var/folders/4s/lcvdj54x0g72nrsw9vzq6nm80000gn/T/tmp54777849.tmp/DrawAStickmanCore.dll.7.s `` /Users/jonathanpeppers/Desktop/DrawAStickman/Game/Code/iOS/DrawAStickman.iPhone/bin/iPhone/Release/DrawAStickmaniPhone.app/DrawAStickmanCore.dll '' Mono Ahead of Time compiler - compiling assembly /Users/jonathanpeppers/Desktop/DrawAStickman/Game/Code/iOS/DrawAStickman.iPhone/bin/iPhone/Release/DrawAStickmaniPhone.app/DrawAStickmanCore.dll* Assertion : should not be reached at ../../../../../mono/mono/mini/mini-arm.c:2758"
class Foo { DateTime Timestamp { get ; set ; } } IObservable < Foo > foos = // ... ; var pub = foos.Publish ( ) ; var windows = pub.Select ( x = > new DateTime ( x.Ticks - x.Ticks % TimeSpan.FromSeconds ( 5 ) .Ticks ) ) .DistinctUntilChanged ( ) ; pub.Buffer ( windows ) .Subscribe ( x = > t.Dump ( ) ) ) ; // linqpadpub.Connect ( ) ;
"WeakReference dogRef = new WeakReference ( dog ) ; // Later , try to ref original Dogif ( dogRef.IsAlive ) { // Oops - garbage collection on original Dog could occur here ( ( Dog ) dogRef.Target ) .Bark ( ) ; } WeakReference dogRef = new WeakReference ( dog ) ; // Later , try to ref original DogDog origDog = ( Dog ) dogRef.Target ; if ( origDog ! = null ) { origDog.Bark ( ) ; }"
104500 4783104501 8930104502 21794104503 21927104505 5746104506 9968104509 5867104510 46353104511 7767104512 4903 104500 4783104501 8930104502 21794104503 21927104504 21927 -- 104505 5746104506 9968104507 9968 -- 104508 9968 -- 104509 5867104510 46353104511 7767104512 4903
"List < int > arrCMs = new List < int > ( strMyList.Split ( ' , ' ) .Select ( x = > int.Parse ( x ) ) ) ;"
[ HttpPost ] [ AllowAnonymous ] public IHttpActionResult Test ( ) { // Get URL Args for example is var args = Request.RequestUri.Query ; // But if the arguments are in the body i do n't have idea . }
var s = `` abc '' ; // I want to avoid explicit typing hereIQueryable < ABC > result = null ; try { result = GetData ( ) ; } catch ( Exception ex ) { } if ( result ! = null ) return result.Single ( ) .MyProperty ; else return 0 ;
"SearchanalyticsResource mySearchanalyticsResource = new SearchanalyticsResource ( service ) ; SearchAnalyticsQueryRequest myRequest = new SearchAnalyticsQueryRequest ( ) ; myRequest.StartDate = `` 2015-08-01 '' ; myRequest.EndDate = `` 2015-08-31 '' ; myRequest.RowLimit = 10 ; SearchanalyticsResource.QueryRequest myQueryRequest = mySearchanalyticsResource.Query ( myRequest , site.SiteUrl ) ; SearchAnalyticsQueryResponse myQueryResponse = myQueryRequest.Execute ( ) ;"
"y = > y.SearchColumn y = > y.SubItem.SubColumn x = > x.SearchColumn.Contains ( `` foo '' ) ; x = > x.Sub.SearchColumn.Contains ( `` foo '' ) ; Expression < Func < Entity , string > > createContains ( Expression < Func < Entity , string > > accessor ) { var stringContains = typeof ( String ) .GetMethod ( `` Contains '' , new [ ] { typeof ( String ) } ) ; var pe = Expression.Parameter ( typeof ( T ) , `` __x4326 '' ) ; return Expression.Lambda < Func < Entity , bool > > ( Expression.Call ( curryExpression ( accessor.Body , pe ) , stringContains , Expression.Constant ( `` foo '' ) ) , pe ) ; } static Expression curryExpression ( Expression from , ParameterExpression parameter ) { // this does n't handle the sub-property scenario return Expression.Property ( parameter , ( ( MemberExpression ) from ) .Member.Name ) ; //I thought this would work but it does not //return Expression.Lambda < Func < Entity , string > > ( from , parameter ) .Body ; }"
"Action action = ( Action ) Delegate.CreateDelegate ( typeof ( Action ) , method ) 'Delegate ' does not contain a definition for 'CreateDelegate ' ConsoleApp2..NETCoreApp , Version=v1.0 '"
"ServiceHost serviceHost = null ; Console.WriteLine ( `` Creating service `` + serviceType.FullName ) ; serviceHost = new MyServiceHost ( serviceType , new Uri ( uri ) ) ; var endPointAddress = `` '' ; HttpBindingBase binding = null ; if ( secureConnectionSettings ! = null & & secureConnectionSettings.Enabled ) { Console.WriteLine ( `` Setting certificates '' ) ; X509Store store = new X509Store ( secureConnectionSettings.CertificateStore , secureConnectionSettings.CertificateLocation ) ; store.Open ( OpenFlags.ReadOnly ) ; X509Certificate2Collection certs = store.Certificates.Find ( X509FindType.FindByThumbprint , secureConnectionSettings.Thumbprint , true ) ; store.Close ( ) ; if ( certs.Count > 0 ) serviceHost.Credentials.ServiceCertificate.SetCertificate ( secureConnectionSettings.CertificateLocation , secureConnectionSettings.CertificateStore , X509FindType.FindByThumbprint , secureConnectionSettings.Thumbprint ) ; else throw new Exception ( `` Could not finde certificate with thumbprint `` + secureConnectionSettings.Thumbprint ) ; endPointAddress = uri + `` /BinaryHttpsProto '' ; binding = CreateNetHttpsBinding ( secureConnectionSettings ) ; } else { endPointAddress = uri + `` /BinaryHttpProto '' ; binding = CreateNetHttpBinding ( ) ; } var endpoint = new System.ServiceModel.Description.ServiceEndpoint ( new System.ServiceModel.Description.ContractDescription ( typeof ( IMyClientService ) .FullName ) , binding , new EndpointAddress ( endPointAddress ) ) ; endpoint.EndpointBehaviors.Add ( new ProtoBuf.ServiceModel.ProtoEndpointBehavior ( ) ) ; serviceHost.AddServiceEndpoint ( endpoint ) ; Console.WriteLine ( `` Starting service ... '' ) ; serviceHost.Open ( ) ; Console.WriteLine ( `` Service started successfully ( `` + uri + `` ) '' ) ; return serviceHost ; < endpointBehaviors > < behavior name= '' protoEndpointBehavior '' > < protobuf / > < /behavior > < /endpointBehaviors >"
ApplicationApplication.EntitiesApplication.DataAccess Application.DataAccess.SourceProvidersApplication.DataAccess.SourceParser
"using ( Stream stream = new FileStream ( `` file.txt '' , FileMode.OpenOrCreate ) ) { using ( StreamWriter writer = new StreamWriter ( stream ) ) { // Use the writer object ... } } Stream stream = null ; try { stream = new FileStream ( `` file.txt '' , FileMode.OpenOrCreate ) ; using ( StreamWriter writer = new StreamWriter ( stream ) ) { stream = null ; // Use the writer object ... } } finally { if ( stream ! = null ) stream.Dispose ( ) ; }"
"< Window x : Class= '' SimpleApplication.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : local= '' clr-namespace : SimpleApplication '' mc : Ignorable= '' d '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' > < Grid > < Rectangle Fill= '' Aqua '' Width= '' 150 '' Height= '' 150 '' RenderTransformOrigin= '' 0.5 , 0.5 '' > < Rectangle.RenderTransform > < RotateTransform / > < /Rectangle.RenderTransform > < Rectangle.Triggers > < EventTrigger RoutedEvent= '' Loaded '' > < BeginStoryboard > < Storyboard > < DoubleAnimation Storyboard.TargetProperty= '' ( Rectangle.RenderTransform ) . ( RotateTransform.Angle ) '' To= '' -360 '' Duration= '' 0:0:2 '' RepeatBehavior= '' Forever '' / > < /Storyboard > < /BeginStoryboard > < /EventTrigger > < /Rectangle.Triggers > < /Rectangle > < /Grid >"
"public async void Page_Load ( object sender , EventArgs e ) { ... }"
"public async Task CopyFileAsync ( string sourceFile , string destFile , CancellationToken ct , IProgress < int > progress ) { var bufferSize = 1024*1024 ; byte [ ] bytes = new byte [ bufferSize ] ; using ( var source = new FileStream ( sourceFile , FileMode.Open , FileAccess.Read ) ) { using ( var dest = new FileStream ( destFile , FileMode.Create , FileAccess.Write ) ) { var totalBytes = source.Length ; var copiedBytes = 0 ; var bytesRead = -1 ; while ( ( bytesRead = await source.ReadAsync ( bytes , 0 , bufferSize , ct ) ) > 0 ) { await dest.WriteAsync ( bytes , 0 , bytesRead , ct ) ; copiedBytes += bytesRead ; progress ? .Report ( ( int ) ( copiedBytes * 100 / totalBytes ) ) ; } } } } private void MainProgram ( string [ ] args ) { Console.WriteLine ( `` Create File ... '' ) ; var dir = Path.GetDirectoryName ( typeof ( MainClass ) .Assembly.Location ) ; var file = Path.Combine ( dir , `` file.txt '' ) ; var dest = Path.Combine ( dir , `` fileCopy.txt '' ) ; var rnd = new Random ( ) ; const string chars = ( `` ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 '' ) ; var str = new string ( Enumerable .Range ( 0 , 1024*1024*10 ) .Select ( i = > letters [ rnd.Next ( chars.Length -1 ) ] ) .ToArray ( ) ) ; File.WriteAllText ( file , str ) ; var source = new CancellationTokenSource ( ) ; var token = source.Token ; var progress = new Progress < int > ( ) ; progress.ProgressChanged += ( sender , percent ) = > Console.WriteLine ( $ '' Progress : { percent } % '' ) ; var task = CopyFileAsync ( file , dest , token , progress ) ; Console.WriteLine ( `` Start Copy ... '' ) ; Console.ReadLine ( ) ; } Create File ... Start Copy ... Progress : 10 % Progress : 30 % Progress : 20 % Progress : 60 % Progress : 50 % Progress : 70 % Progress : 80 % Progress : 40 % Progress : 90 % Progress : 100 %"
"customContact = ( CustomContacts ) contactView.SelectedItem ; this.Frame.Navigate ( typeof ( AddTask ) , customContact ) ; protected override void OnNavigatedTo ( NavigationEventArgs e ) { if ( e.Parameter == null ) { code logic } } protected override void OnNavigatedFrom ( NavigationEventArgs e ) { var frameState = SuspensionManager.SessionStateForFrame ( this.Frame ) ; var pageState = new Dictionary < String , Object > ( ) ; this.SaveState ( pageState ) ; frameState [ _pageKey ] = pageState ; }"
"[ Test ] public void Character_WhenHealthIsBelowZero_IsDead ( ) { // create default character with 10 health Character character = new Character ( ) ; character.SubtractHealth ( 20 ) ; Assert.That ( character.IsAlive , Is.EqualTo ( false ) ) ; }"
"Dictionary < int , int > dictionary = new Dictionary < int , int > ( ) ; public void IncrementDictionary ( int key ) { if ( ! dictionary.ContainsKey ( key ) ) { dictionary [ key ] = 1 ; } else { dictionary [ key ] ++ ; } } Dictionary < int , int > dictionary = new Dictionary < int , int > ( ) ; public void IncrementDictionary ( int key ) { if ( ! dictionary.ContainsKey ( key ) ) { dictionary [ key ] = 1 ; return ; } Dictionary < int , int > dictionary2 ; ( dictionary2 = dictionary ) [ key ] = dictionary2 [ key ] + 1 ; }"
"public MyService ( CloudTableClient tableClient , ILogger < MyService > logger ) { } public async Task < MyMapping > GetMappingAsync ( string rowKey ) { var table = GetTable ( ) ; var retrieveOp = TableOperation.Retrieve < MyMapping > ( `` MyPartitionKey '' , rowKey ) ; var tableResult = await table.ExecuteAsync ( retrieveOp ) ; return tableResult.Result as MyMapping ; } private CloudTable GetTable ( ) { return tableClient.GetTableReference ( `` FakeTable '' ) ; }"
public bool IsMockedObject ( object o ) { try { o.GetMockRepository ( ) ; return true ; } catch ( InvalidOperationException ) { return false ; } }
"{ `` body '' : { `` link '' : { `` linkurl '' : [ `` www.google.com '' ] } } , '' error '' : null , '' message '' : `` Data Retrieved successfully '' , '' status '' : true } [ JsonObject ( MemberSerialization.OptIn ) ] public class LinksJSON { [ JsonProperty ] public string link { get ; set ; } [ JsonProperty ] public string message { get ; set ; } [ JsonProperty ] public string error { get ; set ; } [ JsonProperty ] public bool status { get ; set ; } } private static T _download_serialized_json_data < T > ( string url ) where T : new ( ) { using ( var w = new WebClient ( ) ) { var json_data = string.Empty ; // attempt to download JSON data as a string try { json_data = w.DownloadString ( url ) ; } catch ( Exception ) { } // if string with JSON data is not empty , deserialize it to class and return its instance return ! string.IsNullOrEmpty ( json_data ) ? JsonConvert.DeserializeObject < T > ( json_data ) : new T ( ) ; } } public string CheckJSONLink ( ) { var url = `` < api url-removed for security > '' ; var outObj = _download_serialized_json_data < LinksJSON > ( url ) ; return outObj.Link ; }"
"Bootstrapper.IncludingOnly.Assembly ( Assembly.Load ( `` Dashboard.Rest '' ) ) .With.SimpleInjector ( ) .With.ServiceLocator ( ) .Start ( ) ; Container container = Bootstrapper.Container as Container ; GlobalConfiguration.Configuration.DependencyResolver = new SimpleInjectorWebApiDependencyResolver ( container ) ; public class SimpleInjectorRegisterTypes : ISimpleInjectorRegistration { public void Register ( Container container ) container.RegisterSingle < IApplication , ApplicationService > ( ) ; } } public class ApplicationController : ApiController { private readonly IApplication _application ; public ApplicationController ( IApplication application ) { _application = application ; } [ HttpGet ] public IHttpActionResult GetAllApps ( ) { var apps = _application.GetAllApps ( ) ; return apps == null ? ( IHttpActionResult ) Ok ( new Application ( ) ) : Ok ( apps ) ; } ... ."
"< wsdl : service name= '' EngineService '' > < wsdl : port name= '' BasicHttpBinding_IEngineService '' binding= '' tns : BasicHttpBinding_IEngineService '' > < soap : address location= '' http : //localhost:8050/Manage/ '' / > < /wsdl : port > < /wsdl : service > Server stack trace : at System.ServiceModel.Channels.HttpChannelUtilities.ProcessGetResponseWebException ( WebException webException , HttpWebRequest request , HttpAbortReason abortReason ) at System.ServiceModel.Channels.HttpChannelFactory ` 1.HttpRequestChannel.HttpChannelRequest.WaitForReply ( TimeSpan timeout ) at System.ServiceModel.Channels.RequestChannel.Request ( Message message , TimeSpan timeout ) at System.ServiceModel.Dispatcher.RequestChannelBinder.Request ( Message message , TimeSpan timeout ) at System.ServiceModel.Channels.ServiceChannel.Call ( String action , Boolean oneway , ProxyOperationRuntime operation , Object [ ] ins , Object [ ] outs , TimeSpan timeout ) at System.ServiceModel.Channels.ServiceChannelProxy.InvokeService ( IMethodCallMessage methodCall , ProxyOperationRuntime operation ) at System.ServiceModel.Channels.ServiceChannelProxy.Invoke ( IMessage message ) Exception rethrown at [ 0 ] : at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage ( IMessage reqMsg , IMessage retMsg ) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke ( MessageData & msgData , Int32 type ) at IEngineService.SupportedAgents ( ) at EngineServiceClient.SupportedAgents ( ) Inner Exception : The remote server returned an error : ( 404 ) Not Found . at System.Net.HttpWebRequest.GetResponse ( ) at System.ServiceModel.Channels.HttpChannelFactory ` 1.HttpRequestChannel.HttpChannelRequest.WaitForReply ( TimeSpan timeout ) public static ServiceHost Listen < TServiceContract > ( TServiceContract instance , int port , string name ) { //Added this for debugging , was previously just `` name '' string endpoint = String.Format ( `` http : //localhost : { 0 } / { 1 } / '' , port , name ) ; var svcHost = new ServiceHost ( instance , new Uri [ ] { new Uri ( String.Format ( `` http : //localhost : { 0 } / '' , port ) ) } ) ; /* Snip : Add a Faulted handler but it 's never called */ ServiceEndpoint serviceHttpEndpoint = svcHost.AddServiceEndpoint ( typeof ( TServiceContract ) , new BasicHttpBinding { HostNameComparisonMode = HostNameComparisonMode.WeakWildcard } , endpoint ) ; /*Using name instead of endpoint makes no difference beyond removing the trailing slash */ /* Snip : Add a ServiceDebugBehavior with IncludeExceptionDetailInFaults = true */ /* Snip : Add a ServiceMetadataBehavior with HttpGetEnabled = true */ try { log.Trace ( `` Opening endpoint '' ) ; svcHost.Open ( ) ; } catch ( ) { /* Lots of catches for different problems including Exception * None of them get hit */ } log.Info ( `` Service contract { 0 } ready at { 1 } '' , typeof ( TServiceContract ) .Name , svcHost.BaseAddresses.First ( ) ) ; return svcHost ; IEngineService wcfInstance = Resolver.Resolve < IEngineService > ( ) ; service = WcfHoster.Listen ( wcfInstance , 8050 , `` Manage '' ) ; [ ServiceContract ] interface IEngineService { [ OperationContract ] List < string > Agents ( ) ; [ OperationContract ] string Test ( ) ; [ OperationContract ] List < string > SupportedAgents ( ) ; [ OperationContract ] string Connect ( string AgentStrongName , string Hostname ) ; } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single ) ] class EngineService : IEngineService { IAgentManager agentManager ; public EngineService ( IAgentManager AgentManager ) { log.Debug ( `` Engine webservice instantiating '' ) ; this.agentManager = AgentManager ; } public string Connect ( string AgentStrongName , string Hostname ) { log.Debug ( `` Endpoint requested for [ { 0 } ] , [ { 1 } ] '' , Hostname , AgentStrongName ) ; return agentManager.GetSession ( AgentStrongName , Hostname ) ; } public List < string > Agents ( ) { log.Debug ( `` Current agents queried '' ) ; throw new NotImplementedException ( ) ; } public List < string > SupportedAgents ( ) { log.Debug ( `` Supported agents queried '' ) ; return agentManager.SupportedAgents ( ) .ToList ( ) ; } public string Test ( ) { log.Warn ( `` Test query '' ) ; return `` Success ! `` ; } }"
"Int32.Parse ( `` 1,234 '' ) ; Single.Parse ( `` 1,234 '' ) ; Single.Parse ( `` 1,2,3,4 '' ) ; //Returns 1234"
"// Bind : M < A ' > - > ( A ' - > B ' ) - > M < B ' > //// Return : A ' - > M < A ' > Func < M < A > , Func < A , B > , M < B > > Bind ; Func < A , M < A > > Return ; // my custom computation type : class Wrapped < A > { // this corresponds to the Return operation : public Wrapped ( A value ) { this.Value = value ; } public readonly A Value ; } static class Wrapped { // this corresponds to the Bind operation : public static Wrapped < B > Select < A , B > ( this Wrapped < A > x , Func < A , B > selector ) { return new Wrapped < B > ( selector ( x.Value ) ) ; } } Wrapped < int > wrapped = new Wrapped < int > ( 41 ) ; Wrapped < int > answer = from x in wrapped // works on int values instead select x + 1 ; // of Wrapped < int > values !"
"public void SaveChanges ( ) { context.ReportCards .Local .Where ( r = > r.Student == null ) .ToList ( ) .ForEach ( r = > context.ReportCards.Remove ( r ) ) ; context.SaveChanges ( ) ; } context.ReportCards .Local .Where ( r = > r.Student == null ) .ToList ( ) .ForEach ( r = > context.ReportCards.Remove ( r ) ) ; public void SaveChanges ( ) { RemoveOrphans ( Student , ReportCards ) context.SaveChanges ( ) ; } private void RemoveOrphans < T > ( T sourceContext , T orphan ) { context.orphan .Local .Where ( r = > r.sourceContext == null ) .ToList ( ) .ForEach ( r = > context.orphan .Remove ( r ) ) ; }"
template < bool Advanced > int TraceRay ( Ray r ) { do { if ( WalkAndTestCollision ( r ) ) { if ( Advanced ) return AdvancedShade ( collision ) ; else return SimpleShade ( collision ) ; } } while ( InsideScene ( r ) ) ; }
"var service = new TwitterService ( _consumerKey , _consumerSecret , tokenClaim , tokenSecret ) ; IAsyncResult result = service.BeginListTweetsOnUserTimeline ( new ListTweetsOnUserTimelineOptions { Count = 200 } IEnumerable < TwitterStatus > tweets = service.EndListTweetsOnUserTimeline ( result ) ; IAsyncResult result = _twitterService.BeginListTweetsOnUserTimeline ( new ListTweetsOnUserTimelineOptions { Count = 200 } ) ; IEnumerable < TwitterStatus > tweets = _twitterService.EndListTweetsOnUserTimeline ( result ) .ToArray ( ) ; var tweet2 = _twitterService.ListTweetsOnUserTimeline ( new ListTweetsOnUserTimelineOptions { Count = 200 , MaxId = tweets.Last ( ) .Id } ) ; return tweet2 ;"
"[ HttpGet ] [ Authorize ( Roles= '' user '' ) ] [ CustomChecker ] public ActionResult Index ( int ? page , int id=0 ) { EmployeeContext emp = new EmployeeContext ( ) ; student st = emp.students.Single ( x= > x.id ==id ) ; @ ViewBag.id = st.id ; return View ( st.subjSel.ToPagedList ( page ? ? 1 , 4 ) ) ; } @ using PagedList ; @ using PagedList.Mvc ; @ model PagedList < MvcApplication6.Models.subject > < div style= '' font-family : Arial '' > < fieldset > < legend > < h3 > Open Classes < /h3 > < /legend > @ using ( Html.BeginForm ( `` Test '' , `` Enrollment '' ) ) { < input type= '' hidden '' name= '' id '' value= '' @ ViewBag.id '' / > < table border= '' 1 '' > < tr > < th > @ Html.LabelFor ( model = > model [ 0 ] .subj ) < /th > < th > @ Html.LabelFor ( model = > model [ 0 ] .days ) < /th > < th > @ Html.LabelFor ( model = > model [ 0 ] .cstart ) < /th > < th > @ Html.LabelFor ( model = > model [ 0 ] .cend ) < /th > < th > @ Html.LabelFor ( model = > model [ 0 ] .professor ) < /th > < th > @ Html.LabelFor ( model = > model [ 0 ] .units ) < /th > < th > @ Html.CheckBox ( `` test '' ) Select all < /th > < /tr > @ for ( int i = 0 ; i < Model.Count ; i++ ) { < tr > @ Html.HiddenFor ( model = > model [ i ] .id ) < td > @ Html.DisplayFor ( m = > m [ i ] .subj ) @ Html.HiddenFor ( m = > m [ i ] .subj ) < /td > < td > @ Html.DisplayFor ( m = > m [ i ] .days ) @ Html.HiddenFor ( m = > m [ i ] .days ) < /td > < td > @ Html.DisplayFor ( m = > m [ i ] .cstart ) @ Html.HiddenFor ( m = > m [ i ] .cstart ) < /td > < td > @ Html.DisplayFor ( m = > m [ i ] .cend ) @ Html.HiddenFor ( m = > m [ i ] .cend ) < /td > < td > @ Html.DisplayFor ( m = > m [ i ] .professor ) @ Html.HiddenFor ( m = > m [ i ] .professor ) < /td > < td > @ Html.DisplayFor ( m = > m [ i ] .units ) @ Html.HiddenFor ( m = > m [ i ] .units ) < /td > < td > @ Html.CheckBoxFor ( m = > m [ i ] .isSelected ) < /td > < /tr > } < /table > < br / > < br / > < table > < tr > < td align= '' center '' width= '' 500px '' > < /td > < /tr > < tr > < td align= '' center '' width= '' 500px '' > < input type= '' submit '' value= '' submit '' / > | < input type= '' button '' value= '' clear '' / > < /td > < /tr > < /table > < br / > < br / > } < /fieldset > < /div > @ Html.PagedListPager ( Model , page = > Url.Action ( `` Index '' , `` Enrollment '' , new { page , id = Request.QueryString [ `` id '' ] } ) ) [ HttpPost ] [ Authorize ( Roles= '' user '' ) ] public ActionResult Test ( student st )"
static void Main ( ) { string str = `` abc '' ; switch ( str ) { case `` '' : Console.WriteLine ( `` Hello '' ) ; break ; } Console.ReadLine ( ) ; }
public class ReadIntro { private Object _obj = new Object ( ) ; void PrintObj ( ) { Object obj = _obj ; if ( obj ! = null ) { Console.WriteLine ( obj.ToString ( ) ) ; // May throw a NullReferenceException } } void Uninitialize ( ) { _obj = null ; } }
"int i=0 ; ++i = 11 ; The left-hand side of an assignment must be a variable , property or indexer"
"using System ; using System.Threading ; using System.Windows.Forms ; namespace GimmeJustASec { class Program { static void Main ( string [ ] args ) { AppDomain.CurrentDomain.ProcessExit += new EventHandler ( SuddenCleanup ) ; while ( true ) { Thread.Sleep ( 1000 ) ; } } static void SuddenCleanup ( object sender , EventArgs e ) { MessageBox.Show ( `` Hello ! `` ) ; } } } using System ; using System.Threading ; using System.Windows.Forms ; using System.IO ; namespace GimmeJustASec { class Program { private static StreamWriter _log ; static void Main ( string [ ] args ) { _log = File.CreateText ( `` GimmeJustASec.log '' ) ; _log.AutoFlush = true ; _log.WriteLine ( `` Hello ! `` ) ; AppDomain.CurrentDomain.ProcessExit += new EventHandler ( SuddenCleanup ) ; while ( true ) { Thread.Sleep ( 1000 ) ; } } static void SuddenCleanup ( object sender , EventArgs e ) { _log.WriteLine ( `` Goodbye ! `` ) ; } } }"
"public class Ally : Fighter , IMovable , IActor , ITarget { // IMovable implementation public void Move ( ... ) { ... } // IActor implementation public bool HasInitiative { get { ... } } public ICommand IssueCommand ( ... ) { ... } // ITarget implementation public void OnTarget ( ... ) { ... } // other code ... } public class MightySword : ITarget , ILiftable , IUsable { // ITarget implementation public void OnTarget ( ... ) { ... } // ... other interface implementation // other code ... } public class Battlefield : ... { IList < IMovable > movables ; IList < ITarget > targets ; IList < IActor > actors ; // ... and so on } Update ( ... ) { // Say every actor needs to target somebody else // it has nothing to do in the Update method , // but this is an example foreach ( IActor actor in actors ) { if ( actor.HasInitiative ) { ITarget target = targets [ actor.TargetIndex ] ; target.OnTarget ( actor.IssueCommand ( ... ) ) ; } } } Update ( ... ) { IList < IActor > actors = elements.OfType < Actor > ( ) ; foreach ( IActor actor in actors ) { ITarget target = elements.OfType < Target > ( ) [ actor.TargetIndex ] ; target.OnTarget ( actor.IssueCommand ( ... ) ) ; } }"
//open link ; mediaElement.Source = welcomeVideoURL ; //when I leave the page OnNavigatedFrom ( ) mediaElement.Stop ( ) ; mediaElement.ClearValue ( MediaElement.SourceProperty ) ; mediaElement.Source = null ;
"public virtual Task < IDataReader > ExecuteReaderAsync ( IDbCommand dbCommand , CancellationToken cancellationToken ) { return Task.Factory.StartNew ( ( ) = > { var sqlCommand = CheckIfSqlCommand ( dbCommand ) ; PrepareExecuteReader ( dbCommand ) ; return Task < IDataReader > .Factory .FromAsync ( sqlCommand.BeginExecuteReader , sqlCommand.EndExecuteReader , null ) .Result ; } , cancellationToken ) ; } public virtual Task < IDataReader > ExecuteReaderAsync ( IDbCommand dbCommand , CancellationToken cancellationToken ) { var taskCompletionSource = new TaskCompletionSource < IDataReader > ( ) ; var sqlCommand = CheckIfSqlCommand ( dbCommand ) ; PrepareExecuteReader ( dbCommand ) ; var reader = Task < IDataReader > .Factory .FromAsync ( sqlCommand.BeginExecuteReader , sqlCommand.EndExecuteReader , null ) .Result ; taskCompletionSource.SetResult ( reader ) ; return taskCompletionSource.Task ; } public virtual Task < IDataReader > ExecuteReaderAsync ( IDbCommand dbCommand , CancellationToken cancellationToken ) { var sqlCommand = CheckIfSqlCommand ( dbCommand ) ; PrepareExecuteReader ( dbCommand ) ; return Task < IDataReader > .Factory .FromAsync ( sqlCommand.BeginExecuteReader , sqlCommand.EndExecuteReader , null ) ; }"
var t4 = this.GetService ( typeof ( STextTemplating ) ) as ITextTemplating ;
"{ `` Name '' : `` Barbicato Morellino Di Scansano '' , `` Country '' : `` Italy '' , `` Region '' : `` Tuscany '' , } class WineCountriesIndex : AbstractIndexCreationTask < WineDocument , string > { public BeverageCountriesIndex ( ) { Map = wines = > from wine in wines where wine.Country ! = null select new { Key = wine.Country } ; Reduce = results = > from result in results group result by result into g select new { Key = g.Key } ; } } IList < string > countries = session.Query < string , WineCountriesIndex > ( ) .ToList ( ) ;"
Func < object > func = ( ) = > new object ( ) ; Expression < Func < object > > expression = ( ) = > new object ( ) ; expression = func ;
"public class EventSource { public event EventHandler Fired = delegate { } ; public void FireEvent ( ) { Fired ( this , EventArgs.Empty ) ; } } class Program { private static bool added , removed , handled ; static void Main ( string [ ] args ) { for ( int i = 1 ; i < = 100 ; i++ ) { added = removed = handled = false ; var source = new EventSource ( ) ; AddHandlerAsync ( source ) .Wait ( ) ; RemoveHandlerAsync ( source ) .Wait ( ) ; source.FireEvent ( ) ; if ( removed & & handled ) Console.WriteLine ( `` Event handled after removal ! `` ) ; else Console.WriteLine ( `` -- -- -- -- -- -- -- -- -- -- -- -- -- -- '' ) ; } Console.ReadKey ( ) ; } private async static Task AddHandlerAsync ( EventSource source ) { await Task.Run ( ( ) = > { System.Windows.WeakEventManager < EventSource , EventArgs > .AddHandler ( source , `` Fired '' , HandleEvent ) ; added = true ; } ) ; } private async static Task RemoveHandlerAsync ( EventSource source ) { await Task.Run ( ( ) = > { System.Windows.WeakEventManager < EventSource , EventArgs > .RemoveHandler ( source , `` Fired '' , HandleEvent ) ; removed = true ; } ) ; } private static void HandleEvent ( object sender , EventArgs e ) { handled = true ; } }"
"public static DataTable ReturnDataTable ( string ConnectionString , string CommandTextString , CommandType CommandType , int CommandTimeout , List < System.Data.SqlClient.SqlParameter > ParameterList = null ) { using ( System.Data.SqlClient.SqlConnection Connection = new System.Data.SqlClient.SqlConnection ( ) ) { Connection.ConnectionString = ConnectionString ; System.Data.SqlClient.SqlCommand Command = new System.Data.SqlClient.SqlCommand ( ) ; Command.Connection = Connection ; Command.CommandText = CommandTextString ; Command.CommandType = CommandType ; Command.CommandTimeout = CommandTimeout ; if ( ParameterList ! = null ) { if ( ParameterList.Count > 0 ) { foreach ( SqlParameter parameter in ParameterList ) { Command.Parameters.AddWithValue ( parameter.ParameterName , parameter.Value ) ; } } } System.Data.DataTable DataTable = new System.Data.DataTable ( ) ; System.Data.SqlClient.SqlDataAdapter DataAdapter = new System.Data.SqlClient.SqlDataAdapter ( ) ; DataAdapter.SelectCommand = Command ; DataAdapter.Fill ( DataTable ) ; return DataTable ; } }"
"public IEnumerable < Sample > GetPageData ( int orderId , int page , int itemsPerPage ) { var samples = _context.Set < Sample > ( ) .Where ( s = > s.OrderId == orderId ) .OrderBy ( s = > s.Id ) .Skip ( itemsPerPage * page ) .Take ( itemsPerPage ) ; return samples ; } public int GetPage ( int orderId , int sampleId , int itemsPerPage ) { // ? ? ? }"
{ var o = new MyClass ( ) ; o.MyClassEvent += ( args ) = > { } ; } // Will ' o ' be eligible for garbage collection here ?
"using System ; using System.Collections.Generic ; using System.IO ; class Solution { static void Main ( String [ ] args ) { int N = Int32.Parse ( Console.ReadLine ( ) ) ; string [ , ] argList = new string [ N , 2 ] ; for ( int i = 0 ; i < N ; i++ ) { string [ ] s = Console.ReadLine ( ) .Split ( ) ; argList [ i , 0 ] = s [ 0 ] ; argList [ i , 1 ] = s [ 1 ] ; } Trie trie = new Trie ( ) ; for ( int i = 0 ; i < N ; i++ ) { switch ( argList [ i , 0 ] ) { case `` add '' : trie.add ( argList [ i , 1 ] ) ; break ; case `` find '' : Console.WriteLine ( trie.find ( argList [ i , 1 ] ) ) ; break ; default : break ; } } } } class Trie { Trie [ ] trieArray = new Trie [ 26 ] ; private int findCount = 0 ; private bool data = false ; private char name ; public void add ( string s ) { s = s.ToLower ( ) ; add ( s , this ) ; } private void add ( string s , Trie t ) { char first = Char.Parse ( s.Substring ( 0 , 1 ) ) ; int index = first - ' a ' ; if ( t.trieArray [ index ] == null ) { t.trieArray [ index ] = new Trie ( ) ; t.trieArray [ index ] .name = first ; } if ( s.Length > 1 ) { add ( s.Substring ( 1 ) , t.trieArray [ index ] ) ; } else { t.trieArray [ index ] .data = true ; } } public int find ( string s ) { int ans ; s = s.ToLower ( ) ; find ( s , this ) ; ans = findCount ; findCount = 0 ; return ans ; } private void find ( string s , Trie t ) { if ( t == null ) { return ; } if ( s.Length > 0 ) { char first = Char.Parse ( s.Substring ( 0 , 1 ) ) ; int index = first - ' a ' ; find ( s.Substring ( 1 ) , t.trieArray [ index ] ) ; } else { for ( int i = 0 ; i < 26 ; i++ ) { if ( t.trieArray [ i ] ! = null ) { find ( `` '' , t.trieArray [ i ] ) ; } } if ( t.data == true ) { findCount++ ; } } } } Input : `` He '' Trie Contains : '' Hello '' '' Help '' '' Heart '' '' Ha '' '' No '' Output : 3"
"MediaPlayerLauncher mpl = new MediaPlayerLauncher ( ) ; mpl.Media = new Uri ( trailerUrl , UriKind.Absolute ) ; mpl.Controls = MediaPlaybackControls.All ; mpl.Show ( ) ;"
"using System ; using System.Collections.Generic ; using System.Globalization ; using System.Windows ; using System.Windows.Media ; namespace SlowChart { public class SlowChartClass : UIElement { List < Point > points = new List < Point > ( ) ; double XAxis_Width = 2000 ; double XAxis_LeftMost = 0 ; double YAxis_Height = 300 ; double YAxis_Lowest = -150 ; Point mousePoint ; double XAxis_LeftMostPan = 0 ; double YAxis_LowestPan = 0 ; public SlowChartClass ( ) { for ( int i = 0 ; i < 2000 ; i++ ) { double cos = ( float ) Math.Cos ( ( ( double ) i / 100 ) * Math.PI * 2 ) ; cos *= 100 ; points.Add ( new Point ( i , cos ) ) ; } MouseDown += SlowChartClass_MouseDown ; MouseUp += SlowChartClass_MouseUp ; MouseMove += SlowChartClass_MouseMove ; } private void SlowChartClass_MouseMove ( object sender , System.Windows.Input.MouseEventArgs e ) { if ( IsMouseCaptured ) { XAxis_LeftMost = XAxis_LeftMostPan - ( e.GetPosition ( this ) .X - mousePoint.X ) ; YAxis_Lowest = YAxis_LowestPan + ( e.GetPosition ( this ) .Y - mousePoint.Y ) ; InvalidateVisual ( ) ; } } private void SlowChartClass_MouseUp ( object sender , System.Windows.Input.MouseButtonEventArgs e ) { ReleaseMouseCapture ( ) ; } private void SlowChartClass_MouseDown ( object sender , System.Windows.Input.MouseButtonEventArgs e ) { mousePoint = e.GetPosition ( this ) ; XAxis_LeftMostPan = XAxis_LeftMost ; YAxis_LowestPan = YAxis_Lowest ; CaptureMouse ( ) ; } double translateYToScreen ( double Y ) { double y = RenderSize.Height - ( RenderSize.Height * ( ( Y - YAxis_Lowest ) / YAxis_Height ) ) ; return y ; } double translateXToScreen ( double X ) { double x = ( RenderSize.Width * ( ( X - XAxis_LeftMost ) / XAxis_Width ) ) ; return x ; } protected override void OnRender ( DrawingContext drawingContext ) { bool lastPointValid = false ; Point lastPoint = new Point ( ) ; Rect window = new Rect ( RenderSize ) ; Pen pen = new Pen ( Brushes.Black , 1 ) ; // fill background drawingContext.DrawRectangle ( Brushes.White , null , window ) ; foreach ( Point p in points ) { Point screenPoint = new Point ( translateXToScreen ( p.X ) , translateYToScreen ( p.Y ) ) ; if ( lastPointValid ) { // draw from last to this one drawingContext.DrawLine ( pen , lastPoint , screenPoint ) ; } lastPoint = screenPoint ; lastPointValid = true ; } // draw axis drawingContext.DrawText ( new FormattedText ( XAxis_LeftMost.ToString ( `` 0.0 '' ) + `` , '' + YAxis_Lowest.ToString ( `` 0.0 '' ) , CultureInfo.InvariantCulture , FlowDirection.LeftToRight , new Typeface ( `` Arial '' ) ,12 , Brushes.Black ) , new Point ( 0 , RenderSize.Height-12 ) ) ; } } } < Window x : Class= '' SlowChart.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : local= '' clr-namespace : SlowChart '' mc : Ignorable= '' d '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' > < Grid > < local : SlowChartClass/ > < /Grid > < /Window >"
"using System ; namespace MyConsoleOne.BAL { public class GuidStore { private static object objectlock = new object ( ) ; private Guid StartingGuid { get ; set ; } private Guid ? LastGuidHolder { get ; set ; } public GuidStore ( Guid startingGuid ) { this.StartingGuid = startingGuid ; } public Guid ? GetNextGuid ( ) { lock ( objectlock ) { if ( this.LastGuidHolder.HasValue ) { this.LastGuidHolder = Increment ( this.LastGuidHolder.Value ) ; } else { this.LastGuidHolder = Increment ( this.StartingGuid ) ; } } return this.LastGuidHolder ; } private Guid Increment ( Guid guid ) { byte [ ] bytes = guid.ToByteArray ( ) ; byte [ ] order = { 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 6 , 7 , 4 , 5 , 0 , 1 , 2 , 3 } ; for ( int i = 0 ; i < 16 ; i++ ) { if ( bytes [ order [ i ] ] == byte.MaxValue ) { bytes [ order [ i ] ] = 0 ; } else { bytes [ order [ i ] ] ++ ; return new Guid ( bytes ) ; } } throw new OverflowException ( `` Guid.Increment failed . `` ) ; } } } using MyConsoleOne.BAL ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace MyConsoleOne { class Program { static void Main ( string [ ] args ) { GuidStore gs = new GuidStore ( Guid.NewGuid ( ) ) ; for ( int i = 0 ; i < 1000 ; i++ ) { Console.WriteLine ( i ) ; Dictionary < Guid , int > guids = new Dictionary < Guid , int > ( ) ; Parallel.For ( 0 , 1000 , j = > { Guid ? currentGuid = gs.GetNextGuid ( ) ; guids.Add ( currentGuid.Value , j ) ; Console.WriteLine ( currentGuid ) ; } ) ; // Parallel.For } Console.WriteLine ( `` Press ENTER to Exit '' ) ; Console.ReadLine ( ) ; } } } `` 11111111-1111-1111-1111-111111111111_1.txt '' '' 11111111-1111-1111-1111-111111111111_2.txt '' '' 11111111-1111-1111-1111-111111111111_3.txt '' OTHERSTUFF_111111111-1111-1111-1111-111111111112_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111113_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111114_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111115_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111116_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111117_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111118_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-111111111119_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-11111111111a_MORESTUFF.txtOTHERSTUFF_111111111-1111-1111-1111-11111111111b_MORESTUFF.txt public class GuidStore { private static object objectlock = new object ( ) ; private static int [ ] byteOrder = { 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 6 , 7 , 4 , 5 , 0 , 1 , 2 , 3 } ; private Guid StartingGuid { get ; set ; } private Guid ? LastGuidHolder { get ; set ; } public GuidStore ( Guid startingGuid ) { this.StartingGuid = startingGuid ; } public Guid GetNextGuid ( ) { return this.GetNextGuid ( 0 ) ; } public Guid GetNextGuid ( int firstGuidOffSet ) { lock ( objectlock ) { if ( this.LastGuidHolder.HasValue ) { this.LastGuidHolder = Increment ( this.LastGuidHolder.Value ) ; } else { this.LastGuidHolder = Increment ( this.StartingGuid ) ; for ( int i = 0 ; i < firstGuidOffSet ; i++ ) { this.LastGuidHolder = Increment ( this.LastGuidHolder.Value ) ; } } return this.LastGuidHolder.Value ; } } private static Guid Increment ( Guid guid ) { var bytes = guid.ToByteArray ( ) ; var canIncrement = byteOrder.Any ( i = > ++bytes [ i ] ! = 0 ) ; return new Guid ( canIncrement ? bytes : new byte [ 16 ] ) ; } } public class GuidStoreUnitTests { [ TestMethod ] public void GetNextGuidSimpleTest ( ) { Guid startingGuid = new Guid ( `` 11111111-1111-1111-1111-111111111111 '' ) ; GuidStore gs = new GuidStore ( startingGuid ) ; List < Guid > guids = new List < Guid > ( ) ; const int GuidCount = 10 ; for ( int i = 0 ; i < GuidCount ; i++ ) { guids.Add ( gs.GetNextGuid ( ) ) ; } Assert.IsNotNull ( guids ) ; Assert.AreEqual ( GuidCount , guids.Count ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111112 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111113 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111114 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111115 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111116 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111117 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111118 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-111111111119 '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-11111111111a '' ) ) ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-11111111111b '' ) ) ) ; } [ TestMethod ] public void GetNextGuidWithOffsetSimpleTest ( ) { Guid startingGuid = new Guid ( `` 11111111-1111-1111-1111-111111111111 '' ) ; GuidStore gs = new GuidStore ( startingGuid ) ; List < Guid > guids = new List < Guid > ( ) ; const int OffSet = 10 ; guids.Add ( gs.GetNextGuid ( OffSet ) ) ; Assert.IsNotNull ( guids ) ; Assert.AreEqual ( 1 , guids.Count ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == new Guid ( `` 11111111-1111-1111-1111-11111111111c '' ) ) ) ; } [ TestMethod ] public void GetNextGuidMaxRolloverTest ( ) { Guid startingGuid = new Guid ( `` ffffffff-ffff-ffff-ffff-ffffffffffff '' ) ; GuidStore gs = new GuidStore ( startingGuid ) ; List < Guid > guids = new List < Guid > ( ) ; const int OffSet = 10 ; guids.Add ( gs.GetNextGuid ( OffSet ) ) ; Assert.IsNotNull ( guids ) ; Assert.AreEqual ( 1 , guids.Count ) ; Assert.IsNotNull ( guids.FirstOrDefault ( g = > g == Guid.Empty ) ) ; } [ TestMethod ] public void GetNextGuidThreadSafeTest ( ) { Guid startingGuid = Guid.NewGuid ( ) ; GuidStore gs = new GuidStore ( startingGuid ) ; /* The `` key '' of the ConcurrentDictionary must be unique , so this will catch any duplicates */ ConcurrentDictionary < Guid , int > guids = new ConcurrentDictionary < Guid , int > ( ) ; Parallel.For ( 0 , 1000 , j = > { Guid currentGuid = gs.GetNextGuid ( ) ; if ( ! guids.TryAdd ( currentGuid , j ) ) { throw new ArgumentOutOfRangeException ( `` GuidStore.GetNextGuid ThreadSafe Test Failed '' ) ; } } ) ; // Parallel.For } [ TestMethod ] public void GetNextGuidTwoRunsProduceSameResultsTest ( ) { Guid startingGuid = Guid.NewGuid ( ) ; GuidStore gsOne = new GuidStore ( startingGuid ) ; /* The `` key '' of the ConcurrentDictionary must be unique , so this will catch any duplicates */ ConcurrentDictionary < Guid , int > setOneGuids = new ConcurrentDictionary < Guid , int > ( ) ; Parallel.For ( 0 , 1000 , j = > { Guid currentGuid = gsOne.GetNextGuid ( ) ; if ( ! setOneGuids.TryAdd ( currentGuid , j ) ) { throw new ArgumentOutOfRangeException ( `` GuidStore.GetNextGuid ThreadSafe Test Failed '' ) ; } } ) ; // Parallel.For gsOne = null ; GuidStore gsTwo = new GuidStore ( startingGuid ) ; /* The `` key '' of the ConcurrentDictionary must be unique , so this will catch any duplicates */ ConcurrentDictionary < Guid , int > setTwoGuids = new ConcurrentDictionary < Guid , int > ( ) ; Parallel.For ( 0 , 1000 , j = > { Guid currentGuid = gsTwo.GetNextGuid ( ) ; if ( ! setTwoGuids.TryAdd ( currentGuid , j ) ) { throw new ArgumentOutOfRangeException ( `` GuidStore.GetNextGuid ThreadSafe Test Failed '' ) ; } } ) ; // Parallel.For bool equal = setOneGuids.Select ( g = > g.Key ) .OrderBy ( i = > i ) .SequenceEqual ( setTwoGuids.Select ( g = > g.Key ) .OrderBy ( i = > i ) , new GuidComparer < Guid > ( ) ) ; Assert.IsTrue ( equal ) ; } } internal class GuidComparer < Guid > : IEqualityComparer < Guid > { public bool Equals ( Guid x , Guid y ) { return x.Equals ( y ) ; } public int GetHashCode ( Guid obj ) { return 0 ; } }"
"Console.CancelKeyPress += new ConsoleCancelEventHandler ( ( o , e ) = > { Logger.Log ( `` Control+C hit . Shutting down . `` ) ; resetEvent.Set ( ) ; } ) ;"
"var result1 = ( dbCtx.Customers ) .ToList ( ) ; var result2 = dbCtx.Customers.ToList ( ) ; dbCtx.Customers.Add ( new Customer ( ) { Enabled = true , Name = `` Test '' } ) ; public sealed class Customer : BaseEntity { public bool Enabled { get ; set ; } [ Required ] public string Name { get ; set ; } } public abstract class BaseEntity { [ Key ] [ DatabaseGeneratedAttribute ( DatabaseGeneratedOption.Identity ) ] public int Id { get ; set ; } } public class MyDbContext : DbContext { public MyDbContext ( ) : base ( @ '' Server=.\SQLExpress ; Database=MyDatabase ; Trusted_Connection=Yes ; '' ) { Configuration.LazyLoadingEnabled = true ; } public virtual DbSet < Customer > Customers { get ; set ; } } System.NullReferenceException occurred HResult=0x80004003 Message=Object reference not set to an instance of an object . Source=EntityFramework StackTrace : at System.Data.Entity.Internal.Linq.InternalSet ` 1.get_Expression ( ) at System.Data.Entity.Infrastructure.DbQuery ` 1.System.Linq.IQueryable.get_Expression ( ) at MyProjTests.Test1.Test ( MyDbContext dbCtx ) in E : \ProgrammingProjects\WorkInProgress\MyProjRoot\MyProjTests\Test1.cs : line 51 at MyProjTests.Test1.TestMethod1 ( ) in E : \ProgrammingProjects\WorkInProgress\MyProjRoot\MyProjTests\Test1.cs : line 43"
OracleCommand oracleCom = new OracleCommand ( ) ; oracleCom.Connection = oraConnect ; oracleCom.CommandText = `` Select * From `` + Session [ `` tableNameIns '' ] ; OracleDataAdapter adapter = new Oraenter code herecleDataAdapter ( ) ; DataTable tableD = new DataTable ( ) ; tableD.Locale = System.Globalization.CultureInfo.InvariantCulture ; adapter.SelectCommand = oracleCom ; adapter.Fill ( tableD ) ; changeTableAtributs ( tableD ) ; tableResults.DataSource = tableD.AsDataView ( ) ; tableResults.DataBind ( ) ;
mydomain NS ns.mynameserver.com.mydomain NS ns2.mynameserver.com.anotherdomain NS nameservers.com.notinalphadomain NS ns.example.com.notinalphadomain NS ns1.example.com.notinalphadomain NS ns2.example.com .
"Dim ClipboardStream As New StreamReader ( CType ( ClipboardData.GetData ( DataFormats.CommaSeparatedValue ) , Stream ) ) ClipboardStream = new StreamReader ( Convert.ChangeType ( ClipboardData.GetData ( DataFormats.CommaSeparatedValue ) , Stream ) ) ;"
"enum En { val1 , val2 , } void Main ( ) { En plop = 1 ; //error : Can not implicitly convert type 'int ' to 'En ' En woop = 0 ; //no error }"
"static string f ( int n , int r ) { return `` \n '' .PadLeft ( 2 * r , '* ' ) .PadLeft ( n + r ) + ( r < n ? f ( n , ++r ) : `` * '' .PadLeft ( n ) ) ; } Func < int , int , string > f = ( n , r ) = > { return `` \n '' .PadLeft ( 2 * r , '* ' ) .PadLeft ( n + r ) + ( r < n ? f ( n , ++r ) : `` * '' .PadLeft ( n ) ) ; } ;"
"[ HttpPost , Route ( `` UserInfo '' ) ] public async Task < IHttpActionResult > UpdateUserInfo ( UpdateBindingModel model ) { var currentUser = UserManager.FindById ( User.Identity.GetUserId ( ) ) ; if ( model.FirstName ! = null ) { currentUser.FirstName = model.FirstName ; } if ( model.LastName ! = null ) { currentUser.LastName = model.LastName ; } if ( model.SetIntroViewCompleteDate ) { currentUser.IntroViewCompleteDate = DateTime.UtcNow ; } if ( model.SetIntroViewLaunchDate ) { currentUser.IntroViewLaunchDate = DateTime.UtcNow ; } if ( model.SetTipTourCompleteDate ) { currentUser.TipTourCompleteDate = DateTime.UtcNow ; } if ( model.SetTipTourLaunchDate ) { currentUser.TipTourLaunchDate = DateTime.UtcNow ; } IdentityResult result = await UserManager.UpdateAsync ( currentUser ) ; if ( result.Succeeded ) { var data = new UserInfoViewModel { FirstName = currentUser.FirstName , LastName = currentUser.LastName , IntroViewLaunchDate = currentUser.IntroViewLaunchDate } ; return Ok ( data ) ; } return InternalServerError ( ) ; } ApplicationDbContext newContext = new ApplicationDbContext ( ) ; var currentUser = await ( from c in newContext.Users where c.Email == User.Identity.Name select c ) .SingleOrDefaultAsync ( ) ; //update some values await newContext.SaveChangesAsync ( ) ;"
public class Foo { private _settings ; private bool _myBool ; public Foo ( Settings settings ) { this._settings = settings ; this._myBool = this._settings.MyBool ; } } public class Foo { private bool _myBool ; public Foo ( ) { this._myBool = Properties.Settings.Default.MyBool ; } }
template < int N > struct Factorial { enum { value = N * Factorial < N - 1 > : :value } ; } ; template < > struct Factorial < 0 > { enum { value = 1 } ; } ; // Factorial < 4 > : :value == 24// Factorial < 0 > : :value == 1void foo ( ) { int x = Factorial < 4 > : :value ; // == 24 int y = Factorial < 0 > : :value ; // == 1 } public int Factorial ( int N ) { if ( N == 0 ) return 1 ; return Factorial ( N - 1 ) ; }
"class FinallyBuilder < TZ > { readonly Action < TZ > finallyAction ; public FinallyBuilder ( Action < TZ > finallyAction ) { this.finallyAction = finallyAction ; } public TB Bind < TA , TB > ( TA x , Func < TA , TB > cont ) where TA : TZ { // ^^^^^^^^^^^^^ try // this is what gives me a headache { // in the F # version return cont ( x ) ; } finally { finallyAction ( x ) ; } } } type FinallyBuilder < ′z > ( finallyAction : ′z - > unit ) = member this.Bind ( x : ′a ) ( cont : ′a - > ′b ) = try cont x finally finallyAction ( x : > ′z ) // cast illegal due to missing constraint// Note : ' changed to ′ to avoid bad syntax highlighting here on SO . let cleanup = new FinallyBuilder ( fun x - > ... ) cleanup { let ! x = ... // x and y will be passed to the above lambda function at let ! y = ... // the end of this block ; x and y can have different types ! }"
int i = ( i = 20 ) ; int a = 0 ; int i = ( a = 20 ) ; int a = 0 ; int i = a = 20 ;
PS C : \ > $ def = @ '' public class CookieAwareWebClient : System.Net.WebClient { private System.Net.CookieContainer m_container = new System.Net.CookieContainer ( ) ; protected override System.Net.WebRequest GetWebRequest ( System.Uri address ) { System.Net.WebRequest request = base.GetWebRequest ( address ) ; if ( request is System.Net.HttpWebRequest ) { ( request as System.Net.HttpWebRequest ) .CookieContainer = m_container ; } return request ; } } '' @ PS C : \ > Add-Type -TypeDefinition $ def
"static void Main ( string [ ] args ) { Log.Info ( `` Log4net1 '' ) ; DateTime start = DateTime.Now ; for ( int i = 0 ; i < 50 ; i++ ) { DoTheThing ( ) ; } TimeSpan elapsedTime = DateTime.Now - start ; Log.DebugFormat ( `` TOTAL Elapsed time : { 0 } '' , elapsedTime.TotalMilliseconds ) ; Console.ReadKey ( ) ; } private static void DoTheThing ( ) { DateTime start = DateTime.Now ; Regex.Replace ( TEXT , `` nec `` , m = > { return `` ( word nec ) `` ; } ) ; TimeSpan elapsedTime = DateTime.Now - start ; Log.DebugFormat ( `` Elapsed time : { 0 } '' , elapsedTime.TotalMilliseconds ) ; }"
"public class Program { private static void DumpExpression ( Expression expression ) { // how do I dump out here some text like : // set T2 = Perform `` ExternalCalc '' on input.T1 // I can easily get to : // set T2 = Perform `` Invoke '' on input.T1 // but how can I substitute Invoke with the runtime value `` ExternalCalc '' ? } static void Main ( string [ ] args ) { var myEvaluator = new Evaluator ( ) { Name = `` ExternalCalc '' } ; Expression < Func < Input , Output > > myExpression = ( input ) = > new Output ( ) { T2 = myEvaluator.Invoke ( input.T1 ) } ; DumpExpression ( myExpression ) ; } } class Evaluator { public string Name { get ; set ; } public string Invoke ( string input ) { throw new NotImplementedException ( `` Never intended to be implemented '' ) ; } } class Input { public string T1 { get ; set ; } } class Output { public string T2 { get ; set ; } } foreach ( MemberAssignment memberAssignment in body.Bindings ) { Console.WriteLine ( `` assign to { 0 } '' , memberAssignment.Member ) ; Console.WriteLine ( `` assign to { 0 } '' , memberAssignment.BindingType ) ; Console.WriteLine ( `` assign to { 0 } '' , memberAssignment.Expression ) ; var expression = memberAssignment.Expression ; if ( expression is MethodCallExpression ) { var methodCall = expression as MethodCallExpression ; Console.WriteLine ( `` METHOD CALL : `` + methodCall.Method.Name ) ; Console.WriteLine ( `` METHOD CALL : `` + expression.Type.Name ) ; var target = methodCall.Object ; // ? } }"
userVideosDirectory = Directory.GetParent ( Environment.GetFolderPath ( Environment.SpecialFolder.ApplicationData ) ) .FullName + `` \\Videos '' ; C : \Users\username\AppData\Videos C : \Users\username\Videos
"< system.codedom > < compilers > < compiler language= '' c # ; cs ; csharp '' extension= '' .cs '' type= '' Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider , Microsoft.CodeDom.Providers.DotNetCompilerPlatform , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=31bf3856ad364e35 '' warningLevel= '' 4 '' compilerOptions= '' /langversion:6 /nowarn:1659 ; 1699 ; 1701 '' / > < compiler language= '' vb ; vbs ; visualbasic ; vbscript '' extension= '' .vb '' type= '' Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider , Microsoft.CodeDom.Providers.DotNetCompilerPlatform , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=31bf3856ad364e35 '' warningLevel= '' 4 '' compilerOptions= '' /langversion:14 /nowarn:41008 /define : _MYTYPE=\ & quot ; Web\ & quot ; /optionInfer+ '' / > < /compilers > < /system.codedom > Anwendung : csc.exe Frameworkversion : v4.0.30319 Beschreibung : Der Prozess wurde aufgrund einer unbehandelten Ausnahme beendet . Ausnahmeinformationen : System.IO.FileLoadException bei Microsoft.CodeAnalysis.CommandLine.BuildClient.GetCommandLineWindows ( System.Collections.Generic.IEnumerable ' 1 < System.String > ) bei Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run ( System.Collections.Generic.IEnumerable ' 1 < System.String > , System.Collections.Generic.IEnumerable ' 1 < System.String > , Microsoft.CodeAnalysis.CommandLine.RequestLanguage , Microsoft.CodeAnalysis.CommandLine.CompileFunc , Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader ) bei Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main ( System.String [ ] , System.String [ ] ) bei Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main ( System.String [ ] ) Exception information : Exception type : HttpCompileException Exception message : Eine externe Komponente hat eine Ausnahme ausgelöst . bei System.Web.Compilation.AssemblyBuilder.Compile ( ) bei System.Web.Compilation.BuildProvidersCompiler.PerformBuild ( ) bei System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly ( VirtualPath virtualDir , CodeDirectoryType dirType , String assemblyName , StringSet excludedSubdirectories , Boolean isDirectoryAllowed ) bei System.Web.Compilation.BuildManager.CompileCodeDirectory ( VirtualPath virtualDir , CodeDirectoryType dirType , String assemblyName , StringSet excludedSubdirectories ) bei System.Web.Compilation.BuildManager.CompileResourcesDirectory ( ) bei System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled ( ) bei System.Web.Compilation.BuildManager.CallAppInitializeMethod ( ) bei System.Web.Hosting.HostingEnvironment.Initialize ( ApplicationManager appManager , IApplicationHost appHost , IConfigMapPathFactory configMapPathFactory , HostingEnvironmentParameters hostingParameters , PolicyLevel policyLevel , Exception appDomainCreationException )"
"/// < summary > /// Given a < see cref= '' T1 '' / > , return a < see cref= '' T2 '' / > ./// < /summary > public T2 ExampleMethod ( T1 t1 ) { // omitted } Widget < int , string > myExample = new Widget < int , string > ( ) ; myExample.ExampleMethod ( ... ) ; // HERE - if I mouse over the method // I get a tooltip . Is there something I can do to the comment in my // example method above that will allow me to say // `` Given a System.Int32 , return a System.String '' ? ///Given a < see cref= '' T1 '' / > , return a < see cref= '' T2 '' / > ."
"switch ( number ) { case 1 : Number = ( int ) SmsStatusEnum.Sent ; break ; case 2 : Number = ( int ) SmsStatusEnum.Delivered ; break ; case 3 : Number = ( int ) SmsStatusEnum.Failed ; break ; default : Number = ( int ) SmsStatusEnum.Failed ; break ; } return Number ; var statuses = new Dictionary < int , Func < SmsStatusEnum > > { { 1 , ( ) = > SmsStatusEnum.Sent } , { 2 , ( ) = > SmsStatusEnum.Delivered } , { 3 , ( ) = > SmsStatusEnum.Failed } , } ;"
"public ApplicationServer GetByName ( string serverName ) { return QuerySingleResultAndCacheEtag ( session = > session.Query < ApplicationServer > ( ) .Where ( server = > server.Name.ToUpperInvariant ( ) == serverName.ToUpperInvariant ( ) ) .FirstOrDefault ( ) ) as ApplicationServer ; } protected static EntityBase QuerySingleResultAndCacheEtag ( Func < IDocumentSession , EntityBase > func ) { if ( func == null ) { throw new ArgumentNullException ( `` func '' ) ; } using ( IDocumentSession session = Database.OpenSession ( ) ) { EntityBase entity = func.Invoke ( session ) ; if ( entity == null ) { return null ; } CacheEtag ( entity , session ) ; return entity ; } }"
"using ( var httpClientHandler = new HttpClientHandler { Credentials = CredentialCache.DefaultNetworkCredentials } ) { bool disposeHandler = true ; //Setting true or false does not fix the problem using ( var httpClient = new HttpClient ( httpClientHandler , disposeHandler ) ) { using ( var content = new ByteArrayContent ( Encoding.UTF8.GetBytes ( `` Hello '' ) ) ) { // Commenting/uncommenting the line below does not fix the problem // httpRequestMessage.Headers.Connection.Add ( `` Keep-Alive '' ) ; using ( var httpResponseMessage = await httpClient.PostAsync ( `` http : //SomeUrl '' , content ) ) // This line throws an ObjectDisposedException { } } } }"
items.ForEach ( async item = > { doSomeStuff ( ) ; await mongoItems.FindOneAndUpdateAsync ( mongoMumboJumbo ) ; await AddBlah ( SqlMumboJumbo ) ; } ) ;
"[ MethodImpl ( MethodImplOptions.InternalCall , MethodCodeType = MethodCodeType.Runtime ) ] void AddEx ( [ MarshalAs ( UnmanagedType.Struct ) ] object vSafeArrayOfItems ) ;"
"// read : int i = _data [ x , y ] ; byte B = ( byte ) ( i > > 0 ) ; byte G = ( byte ) ( i > > 8 ) ; byte R = ( byte ) ( i > > 16 ) ; // write : _data [ x , y ] = BitConverter.ToInt32 ( new byte [ ] { B , G , R , 0 } , 0 ) ; public struct RGB { public byte R ; public byte G ; public byte B ; }"
//Any object requesting an instance of AdventureWorksEntities will get an instance per request Bind < AdventureWorksEntities > ( ) .ToSelf ( ) .InRequestScope ( ) ;
"// batchRequest is a HttpRequestMessage , http is an HttpClientHttpResponseMessage response = await http.SendAsync ( batchRequest ) ; string fullResponse = await response.Content.ReadAsStringAsync ( ) ; -- batchresponse_e42a30ca-0f3a-4c17-8672-22abc469cd16Content-Type : application/httpContent-Transfer-Encoding : binaryHTTP/1.1 200 OKDataServiceVersion : 3.0 ; Content-Type : application/json ; odata=minimalmetadata ; streaming=true ; charset=utf-8 { \ '' odata.metadata\ '' : \ '' https : //graph.windows.net/XXX.onmicrosoft.com/ $ metadata # directoryObjects/ @ Element\ '' , \ '' odata.type\ '' : \ '' Microsoft.DirectoryServices.User\ '' , \ '' objectType\ '' : \ '' User\ '' , \ '' objectId\ '' : \ '' 5f6851c3-99cc-4a89-936d-4bb44fa78a34\ '' , \ '' deletionTimestamp\ '' : null , \ '' accountEnabled\ '' : true , \ '' signInNames\ '' : [ ] , \ '' assignedLicenses\ '' : [ ] , \ '' assignedPlans\ '' : [ ] , \ '' city\ '' : null , \ '' companyName\ '' : null , \ '' country\ '' : null , \ '' creationType\ '' : null , \ '' department\ '' : \ '' NRF\ '' , \ '' dirSyncEnabled\ '' : null , \ '' displayName\ '' : \ '' dummy1 Test\ '' , \ '' facsimileTelephoneNumber\ '' : null , \ '' givenName\ '' : \ '' dummy1\ '' , \ '' immutableId\ '' : null , \ '' isCompromised\ '' : null , \ '' jobTitle\ '' : \ '' test\ '' , \ '' lastDirSyncTime\ '' : null , \ '' mail\ '' : null , \ '' mailNickname\ '' : \ '' dummy1test\ '' , \ '' mobile\ '' : null , \ '' onPremisesSecurityIdentifier\ '' : null , \ '' otherMails\ '' : [ ] , \ '' passwordPolicies\ '' : null , \ '' passwordProfile\ '' : { \ '' password\ '' : null , \ '' forceChangePasswordNextLogin\ '' : true , \ '' enforceChangePasswordPolicy\ '' : false } , \ '' physicalDeliveryOfficeName\ '' : null , \ '' postalCode\ '' : null , \ '' preferredLanguage\ '' : null , \ '' provisionedPlans\ '' : [ ] , \ '' provisioningErrors\ '' : [ ] , \ '' proxyAddresses\ '' : [ ] , \ '' refreshTokensValidFromDateTime\ '' : \ '' 2016-12-02T08:37:24Z\ '' , \ '' showInAddressList\ '' : null , \ '' sipProxyAddress\ '' : null , \ '' state\ '' : \ '' California\ '' , \ '' streetAddress\ '' : null , \ '' surname\ '' : \ '' Test\ '' , \ '' telephoneNumber\ '' : \ '' 666\ '' , \ '' thumbnailPhoto @ odata.mediaEditLink\ '' : \ '' directoryObjects/5f6851c3-99cc-4a89-936d-4bb44fa78a34/Microsoft.DirectoryServices.User/thumbnailPhoto\ '' , \ '' usageLocation\ '' : null , \ '' userPrincipalName\ '' : \ '' dummy1test @ XXX.onmicrosoft.com\ '' , \ '' userType\ '' : \ '' Member\ '' } -- batchresponse_e42a30ca-0f3a-4c17-8672-22abc469cd16Content-Type : application/httpContent-Transfer-Encoding : binaryHTTP/1.1 200 OKDataServiceVersion : 3.0 ; Content-Type : application/json ; odata=minimalmetadata ; streaming=true ; charset=utf-8 { \ '' odata.metadata\ '' : \ '' https : //graph.windows.net/XXX.onmicrosoft.com/ $ metadata # directoryObjects/ @ Element\ '' , \ '' odata.type\ '' : \ '' Microsoft.DirectoryServices.User\ '' , \ '' objectType\ '' : \ '' User\ '' , \ '' objectId\ '' : \ '' dd35d761-e6ed-44e7-919f-f3b1e54eb7be\ '' , \ '' deletionTimestamp\ '' : null , \ '' accountEnabled\ '' : true , \ '' signInNames\ '' : [ ] , \ '' assignedLicenses\ '' : [ ] , \ '' assignedPlans\ '' : [ ] , \ '' city\ '' : null , \ '' companyName\ '' : null , \ '' country\ '' : null , \ '' creationType\ '' : null , \ '' department\ '' : null , \ '' dirSyncEnabled\ '' : null , \ '' displayName\ '' : \ '' Max Admin\ '' , \ '' facsimileTelephoneNumber\ '' : null , \ '' givenName\ '' : null , \ '' immutableId\ '' : null , \ '' isCompromised\ '' : null , \ '' jobTitle\ '' : null , \ '' lastDirSyncTime\ '' : null , \ '' mail\ '' : null , \ '' mailNickname\ '' : \ '' maxadmin\ '' , \ '' mobile\ '' : null , \ '' onPremisesSecurityIdentifier\ '' : null , \ '' otherMails\ '' : [ ] , \ '' passwordPolicies\ '' : null , \ '' passwordProfile\ '' : null , \ '' physicalDeliveryOfficeName\ '' : null , \ '' postalCode\ '' : null , \ '' preferredLanguage\ '' : null , \ '' provisionedPlans\ '' : [ ] , \ '' provisioningErrors\ '' : [ ] , \ '' proxyAddresses\ '' : [ ] , \ '' refreshTokensValidFromDateTime\ '' : \ '' 2016-12-05T15:11:51Z\ '' , \ '' showInAddressList\ '' : null , \ '' sipProxyAddress\ '' : null , \ '' state\ '' : null , \ '' streetAddress\ '' : null , \ '' surname\ '' : null , \ '' telephoneNumber\ '' : null , \ '' thumbnailPhoto @ odata.mediaEditLink\ '' : \ '' directoryObjects/dd35d761-e6ed-44e7-919f-f3b1e54eb7be/Microsoft.DirectoryServices.User/thumbnailPhoto\ '' , \ '' usageLocation\ '' : null , \ '' userPrincipalName\ '' : \ '' maxadmin @ XXX.onmicrosoft.com\ '' , \ '' userType\ '' : \ '' Member\ '' } -- batchresponse_e42a30ca-0f3a-4c17-8672-22abc469cd16 -- var multipartContent = await response.Content.ReadAsMultipartAsync ( ) ; foreach ( HttpContent currentContent in multipartContent.Contents ) { var testString = currentContent.ReadAsStringAsync ( ) ; // How to get this content as an exploitable object ? } HTTP/1.1 200 OKDataServiceVersion : 3.0 ; Content-Type : application/json ; odata=minimalmetadata ; streaming=true ; charset=utf-8 { \ '' odata.metadata\ '' : \ '' https : //graph.windows.net/XXX.onmicrosoft.com/ $ metadata # directoryObjects/ @ Element\ '' , \ '' odata.type\ '' : \ '' Microsoft.DirectoryServices.User\ '' , \ '' objectType\ '' : \ '' User\ '' , \ '' objectId\ '' : \ '' 5f6851c3-99cc-4a89-936d-4bb44fa78a34\ '' , \ '' deletionTimestamp\ '' : null , \ '' accountEnabled\ '' : true , \ '' signInNames\ '' : [ ] , \ '' assignedLicenses\ '' : [ ] , \ '' assignedPlans\ '' : [ ] , \ '' city\ '' : null , \ '' companyName\ '' : null , \ '' country\ '' : null , \ '' creationType\ '' : null , \ '' department\ '' : \ '' NRF\ '' , \ '' dirSyncEnabled\ '' : null , \ '' displayName\ '' : \ '' dummy1 Test\ '' , \ '' facsimileTelephoneNumber\ '' : null , \ '' givenName\ '' : \ '' dummy1\ '' , \ '' immutableId\ '' : null , \ '' isCompromised\ '' : null , \ '' jobTitle\ '' : \ '' test\ '' , \ '' lastDirSyncTime\ '' : null , \ '' mail\ '' : null , \ '' mailNickname\ '' : \ '' dummy1test\ '' , \ '' mobile\ '' : null , \ '' onPremisesSecurityIdentifier\ '' : null , \ '' otherMails\ '' : [ ] , \ '' passwordPolicies\ '' : null , \ '' passwordProfile\ '' : { \ '' password\ '' : null , \ '' forceChangePasswordNextLogin\ '' : true , \ '' enforceChangePasswordPolicy\ '' : false } , \ '' physicalDeliveryOfficeName\ '' : null , \ '' postalCode\ '' : null , \ '' preferredLanguage\ '' : null , \ '' provisionedPlans\ '' : [ ] , \ '' provisioningErrors\ '' : [ ] , \ '' proxyAddresses\ '' : [ ] , \ '' refreshTokensValidFromDateTime\ '' : \ '' 2016-12-02T08:37:24Z\ '' , \ '' showInAddressList\ '' : null , \ '' sipProxyAddress\ '' : null , \ '' state\ '' : \ '' California\ '' , \ '' streetAddress\ '' : null , \ '' surname\ '' : \ '' Test\ '' , \ '' telephoneNumber\ '' : \ '' 666\ '' , \ '' thumbnailPhoto @ odata.mediaEditLink\ '' : \ '' directoryObjects/5f6851c3-99cc-4a89-936d-4bb44fa78a34/Microsoft.DirectoryServices.User/thumbnailPhoto\ '' , \ '' usageLocation\ '' : null , \ '' userPrincipalName\ '' : \ '' dummy1test @ XXX.onmicrosoft.com\ '' , \ '' userType\ '' : \ '' Member\ '' }"
"public static class ObjectContextExtensions { public static T Find < T > ( this ObjectSet < T > set , int id , params Expression < Func < T , object > > [ ] includes ) where T : class { ... } public static T Find < T > ( this ObjectSet < T > set , int id , params string [ ] includes ) where T : class { ... } } DBContext.Users.Find ( userid.Value ) ; //userid being an int ? ( Nullable < int > )"
< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < ! DOCTYPE html PUBLIC `` -//W3C//DTD XHTML 1.1//EN '' `` http : //www.w3.org/TR/xhtml11/DTD/xhtml11.dtd '' >
R reader ; reader.Value = 5 ; abstract class A { public int Value { get { return ... } } } class R : A { } class W : A { new public int Value { get { return base.Value ; } set { ... . } } }
"Mock < ILogger < MyClass > > loggerMock = ... ; MyClass myClass = ... ; myClass.MethodThatLogsTestException ( ) ; loggerMock.Verify ( l = > l.Log ( It.IsAny < LogLevel > ( ) , It.IsAny < EventId > ( ) , It.IsAny < object > ( ) , It.IsAny < TestException > ( ) , It.IsAny < Func < object , Exception , string > > ( ) ) ) ; public class Test { public class Impl { private readonly ILogger < Impl > logger ; public Impl ( ILogger < Impl > logger ) { this.logger = logger ; } public void Method ( ) { logger.LogError ( new Exception ( ) , `` An error occurred . `` ) ; } } [ Fact ] public void LogsErrorOnException ( ) { var loggerMock = new Mock < ILogger < Impl > > ( ) ; var sut = new Impl ( loggerMock.Object ) ; sut.Method ( ) ; loggerMock.Verify ( l = > l.Log ( It.IsAny < LogLevel > ( ) , It.IsAny < EventId > ( ) , It.IsAny < object > ( ) , It.IsAny < Exception > ( ) , It.IsAny < Func < object , Exception , string > > ( ) ) ) ; } }"
"public class LoginProcess extends HttpServlet { private static final long serialVersionUID = 1L ; protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { try { Bridge.setVerbose ( true ) ; Bridge.init ( ) ; Console.WriteLine ( `` Hello .NET world ! \n '' ) ; Bridge.LoadAndRegisterAssemblyFrom ( new File ( `` C : /Users/ashish.it/workspace/FinalJniWeb/WebContent/WEB-INF/lib/ADHelper.j4n.dll '' ) ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } Enum output ; output=ADHelper.Login ( `` user '' , `` pass '' ) ; System.out.println ( output ) ; } } namespace ADHelper { public partial class ADHelper_ { methods.Add ( global : :net.sf.jni4net.jni.JNINativeMethod.Create ( @ __type , `` Login '' , `` Login2 '' , `` ( Ljava/lang/String ; Ljava/lang/String ; ) Lsystem/Enum ; '' ) ) ; private static global : :net.sf.jni4net.utils.JniHandle Login2 ( global : :System.IntPtr @ __envp , global : :net.sf.jni4net.utils.JniLocalHandle @ __class , global : :net.sf.jni4net.utils.JniLocalHandle UserName , global : :net.sf.jni4net.utils.JniLocalHandle Password ) { // ( Ljava/lang/String ; Ljava/lang/String ; ) Lsystem/Enum ; // ( LSystem/String ; LSystem/String ; ) LADHelper/ADHelper+LoginResult ; global : :net.sf.jni4net.jni.JNIEnv @ __env = global : :net.sf.jni4net.jni.JNIEnv.Wrap ( @ __envp ) ; global : :net.sf.jni4net.utils.JniHandle @ __return = default ( global : :net.sf.jni4net.utils.JniHandle ) ; try { @ __return = global : :net.sf.jni4net.utils.Convertor.StrongC2Jp < global : :ADHelper.ADHelper.LoginResult > ( @ __env , global : :ADHelper.ADHelper.Login ( global : :net.sf.jni4net.utils.Convertor.StrongJ2CString ( @ __env , UserName ) , global : :net.sf.jni4net.utils.Convertor.StrongJ2CString ( @ __env , Password ) ) ) ; } catch ( global : :System.Exception __ex ) { @ __env.ThrowExisting ( __ex ) ; } return @ __return ; } } package adhelper ; @ net.sf.jni4net.attributes.ClrTypepublic class ADHelper extends system.Object { private static system.Type staticType ; protected ADHelper ( net.sf.jni4net.inj.INJEnv __env , long __handle ) { super ( __env , __handle ) ; } @ net.sf.jni4net.attributes.ClrConstructor ( `` ( ) V '' ) public ADHelper ( ) { super ( ( ( net.sf.jni4net.inj.INJEnv ) ( null ) ) , 0 ) ; adhelper.ADHelper.__ctorADHelper0 ( this ) ; } @ net.sf.jni4net.attributes.ClrMethod ( `` ( LSystem/String ; LSystem/String ; ) LADHelper/ADHelper+LoginResult ; '' ) public native static system.Enum Login ( java.lang.String UserName , java.lang.String Password ) ; public static system.Type typeof ( ) { return adhelper.ADHelper.staticType ; } private static void InitJNI ( net.sf.jni4net.inj.INJEnv env , system.Type staticType ) { adhelper.ADHelper.staticType = staticType ; } } *All Dll file loaded message*Jun 3 , 2015 10:56:39 AM org.apache.catalina.core.StandardWrapperValve invokeSEVERE : Servlet.service ( ) for servlet LoginProcess threw exceptionjava.lang.UnsatisfiedLinkError : adhelper.ADHelper.Login ( Ljava/lang/String ; Ljava/lang/String ; ) Lsystem/Enum ; at adhelper.ADHelper.Login ( Native Method ) at com.karvy.login.LoginProcess.doGet ( LoginProcess.java:62 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:617 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:723 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:290 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:206 ) at org.apache.catalina.core.StandardWrapperValve.invoke ( StandardWrapperValve.java:233 ) at org.apache.catalina.core.StandardContextValve.invoke ( StandardContextValve.java:191 ) at org.apache.catalina.core.StandardHostValve.invoke ( StandardHostValve.java:127 ) at org.apache.catalina.valves.ErrorReportValve.invoke ( ErrorReportValve.java:103 ) at org.apache.catalina.core.StandardEngineValve.invoke ( StandardEngineValve.java:109 ) at org.apache.catalina.connector.CoyoteAdapter.service ( CoyoteAdapter.java:293 ) at org.apache.coyote.http11.Http11Processor.process ( Http11Processor.java:861 ) at org.apache.coyote.http11.Http11Protocol $ Http11ConnectionHandler.process ( Http11Protocol.java:606 ) at org.apache.tomcat.util.net.JIoEndpoint $ Worker.run ( JIoEndpoint.java:489 ) at java.lang.Thread.run ( Thread.java:662 )"
"public partial class MainWindow : Window { int _count = 0 ; public MainWindow ( ) { InitializeComponent ( ) ; } private void onLoaded ( object sender , RoutedEventArgs e ) { test ( ) ; } protected override void OnLocationChanged ( EventArgs e ) { base.OnLocationChanged ( e ) ; } void test ( ) { ++_count ; Dispatcher.BeginInvoke ( DispatcherPriority.ApplicationIdle , new Action ( ( ) = > { test ( ) ; } ) ) ; Trace.TraceInformation ( _count.ToString ( ) ) ; Debug.Assert ( _count ! = 5 ) ; } } MainWindow.OnLocationChanged ( System.EventArgs e ) ( … ) System.dll ! Microsoft.Win32.SafeNativeMethods.MessageBox ( System.IntPtr System.dll ! System.Diagnostics.AssertWrapper.ShowMessageBoxAssert ( striSystem.dll ! System.Diagnostics.DefaultTraceListener.Fail ( string message , str System.dll ! System.Diagnostics.DefaultTraceListener.Fail ( string message ) System.dll ! System.Diagnostics.TraceInternal.Fail ( string message ) System.dll ! System.Diagnostics.Debug.Assert ( bool condition ) MainWindow.test ( ) MainWindow.test.AnonymousMethod__0 ( )"
"public override Task < object > GetCachedImage ( string key ) { UIImage inMemoryImage = sdImageCache.ImageFromMemoryCache ( key ) ; // // Return synchronously since the image was found in the memory cache . if ( inMemoryImage ! = null ) { return Task.FromResult ( ( object ) inMemoryImage ) ; } TaskCompletionSource < object > tsc = new TaskCompletionSource < object > ( ) ; // // Query the disk cache asynchronously , invoking the result asynchronously . sdImageCache.QueryDiskCache ( key , ( image , cacheType ) = > { tsc.TrySetResult ( image ) ; } ) ; return tsc.Task ; }"
class Samurai { private IWeapon _weapon ; [ Inject ] public Samurai ( IWeapon weapon ) { _weapon = weapon ; } public void Attack ( string target ) { _weapon.Hit ( target ) ; } } class Program { public static void Main ( ) { Samurai warrior1 = new Samurai ( new Shuriken ( ) ) ; Samurai warrior2 = new Samurai ( new Sword ( ) ) ; warrior1.Attack ( `` the evildoers '' ) ; warrior2.Attack ( `` the evildoers '' ) ; } } class Program { public static void Main ( ) { IKernel kernel = new StandardKernel ( new WarriorModule ( ) ) ; Samurai warrior = kernel.Get < Samurai > ( ) ; warrior.Attack ( `` the evildoers '' ) ; } } var referencedClass = IoC.Get < IReferencedClass > ( ) ; referencedClass.MyList = myList ;
"public class SearchTerm : IEntity { private readonly NavigationProperty < Item > _item ; public SearchTerm ( ) { _item = new NavigationProperty < Item > ( ( ) = > ItemIds ) ; } public string [ ] ItemIds { get ; set ; } } SearchTerm. < .ctor > b__0 : IL_0000 : ldarg.0 IL_0001 : call UserQuery+SearchTerm.get_ItemIdsIL_0006 : stloc.0 // CS $ 1 $ 0000IL_0007 : br.s IL_0009IL_0009 : ldloc.0 // CS $ 1 $ 0000IL_000A : ret SearchTerm..ctor : IL_0000 : ldnull IL_0001 : stloc.0 IL_0002 : ldarg.0 IL_0003 : call System.Object..ctorIL_0008 : nop IL_0009 : nop IL_000A : ldarg.0 IL_000B : ldloc.0 IL_000C : brtrue.s IL_001DIL_000E : ldarg.0 IL_000F : ldftn UserQuery+SearchTerm. < .ctor > b__0IL_0015 : newobj System.Func < System.Collections.Generic.IEnumerable < System.String > > ..ctorIL_001A : stloc.0 IL_001B : br.s IL_001DIL_001D : ldloc.0 IL_001E : newobj UserQuery < UserQuery+Item > +NavigationProperty ` 1..ctorIL_0023 : stfld UserQuery+SearchTerm._itemIL_0028 : nop IL_0029 : ret var method = typeBuilder.DefineMethod ( `` func '' , MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.Virtual , typeof ( IEnumerable < string > ) , Type.EmptyTypes ) ; var methodIl = method.GetILGenerator ( ) ; methodIl.Emit ( OpCodes.Ldarg_0 ) ; methodIl.Emit ( OpCodes.Call , dictionary [ `` get_ItemIds '' ] ) ; methodIl.Emit ( OpCodes.Ret ) ; var funcType = typeof ( Func < , > ) .MakeGenericType ( typeBuilder , typeof ( IEnumerable < string > ) ) ; method.CreateDelegate ( funcType ) ;"
"public class Question : IDisposable , IEquatable < Question > { } public class SessionQuestion : Question , IDisposable , IEquatable < SessionQuestion > { }"
private Color myForegroundColor = Color.Azure ; private Color myBackgroundColor = Color.Empty ; // ... etc . // Avoid creating a copy of myForgroundColor inside SetUpButton ( ) : MyHelperClass.SetUpButton ( ref myForegroundColor ) ; public class ColorContainer { public UiSettingsContainer ( ) { MyColor = Color.Black ; MyNextColor = Color.Blue ; // ..etc ... } public Color MyColor { get ; private set ; } // ... etc ... . } // Assumption : This creates a new copy of color in memory.public void SetSomeColor ( Color col ) { someComponent.color = col ; } // Calling it : SetSomeColor ( myColorContainerInstance.MyColor ) ; // Question : Does this avoid creating a new copy of MyColor in memory ? public void SetSomeColor ( ColorContainer container ) { someComponent.color = container.MyColor ; } // Calling it : SetSomeColor ( myColorContainerInstance ) ; // Assumption : This creates a new copy of color in memory.public void SetSomeColor ( ref Color col ) { someComponent.color = col ; } // Calling it : SetSomeColor ( ref myColorContainerInstance.MyColor ) ;
http : //blah/blah/ ? blahto http : //blah/blah/
"var test = dbcontext.Persons.GetAll ( ) .Where ( c = > c.PersonID == 2 ) .Select ( c = > c.PersonName ) .FirstOrDefault ( ) ; ` SELECT [ Limit1 ] . [ PersonName ] AS [ PersonName ] FROM ( SELECT TOP ( 1 ) [ Extent1 ] . [ PersonName ] AS [ PersonName ] FROM [ dbo ] . [ ApplicationRequest ] AS [ Extent1 ] WHERE [ Extent1 ] . [ PersonID ] = @ p__linq__0 ) AS [ Limit1 ] ' , N ' @ p__linq__0 uniqueidentifier ' , @ p__linq__0= `` 2 '' Public Void PassPredicate ( Func < ApplicationRequest , bool > ReqFunc ) { var test = dbcontext.Persons.GetAll ( ) .Where ( ReqFunc ) .Select ( c = > c.PersonName ) .FirstOrDefault ( ) ; } PassPredicate ( c = > c.PersonID == 2 ) ; SELECT [ Extent1 ] . [ PersonID ] AS [ PersonID ] , [ Extent1 ] . [ PersonName ] AS [ PersonName ] , [ Extent1 ] . [ DOB ] AS [ Dob ] , [ Extent1 ] . [ Height ] AS [ Height ] , [ Extent1 ] . [ BirthCity ] AS [ BirthCity ] , [ Extent1 ] . [ Country ] AS [ Country ] , FROM [ dbo ] . [ Person ] AS [ Extent1 ]"
"var buildParameter = new ClientBuildManagerParameter { PrecompilationFlags = PrecompilationFlags.Default , } ; var clientBuildManager = new ClientBuildManager ( RootVirtualPath , RootPhysicalPath , null , buildParameter ) ; ... clientBuildManager.CompileFile ( relativeVirtualPath , callback ) ;"
"public decimal Multiply ( List < CurveValue > curve , decimal dVal ) { List < CurveValue > curveA = new List < CurveValue > ( ) ; curveA.AddRange ( curve ) ; curveA.ForEach ( a = > a.Value = decimal.Round ( a.Value , 4 ) * dVal ) ; return Sum ( curveA ) ; } public decimal Sum ( List < CurveValue > curveA ) { return curveA.Sum ( x = > x.Value ) ; }"
public void UpdateMailList ( IEnumerable < int > userIDs ) { using ( MainDataContext db = new MainDataContext ( ) ) { var existingUsers = ( from a in db.MailListUsers select a ) ; db.MailListUsers.DeleteAllOnSubmit ( existingUsers ) ; db.SubmitChanges ( ) ; var newUsers = ( from n in userIDs select new MailListUser { UserID = n } ) ; db.MailListUsers.InsertAllOnSubmit ( newUsers ) ; db.SubmitChanges ( ) ; } } } }
"/// < summary > /// Tries to find the category/// < /summary > /// < param name= '' result '' > The Luis result < /param > /// < param name= '' alarm '' > < /param > /// < returns > < /returns > public string TryFindCategory ( LuisResult result ) { // Variable for the title EntityRecommendation title ; // If we find our enenty , return it if ( result.TryFindEntity ( PiiiCK.Category , out title ) ) return title.Entity ; // Default fallback return null ; } [ LuisIntent ( `` Choose category '' ) ] public async Task ChooseCategory ( IDialogContext context , LuisResult result ) { // Get our category var category = TryFindCategory ( result ) ; var response = `` The category you have chosen is not in the system just yet . `` ; switch ( category ) { case `` camera '' : response = $ '' You need help buying a { category } , is this correct ? `` ; this.started = true ; break ; default : if ( ! string.IsNullOrEmpty ( category ) ) response = $ '' Sorry , PiiiCK does not deal with { category.Pluralise ( ) } just yet . `` ; break ; } // Post our response back to the user await context.PostAsync ( response ) ; // Execute the message recieved delegate context.Wait ( MessageReceived ) ; }"
"private void button_Click ( object sender , EventArgs e ) { this.Hide ( ) ; //Hides the main form . form2.ShowDialog ( ) ; //Shows the second form . this.Show ( ) ; // Re-shows the main form after closing the second form ( just in the taskbar , not on the screen ) . this.StartPosition = FormStartPosition.CenterScreen ; // I write this code because I want to show the main form on the screen , not just in the taskbar . }"
"private ObservableCollection < SomeObject > _objectList = null ; private ObservableCollection < SomeObject > _cachedObjectList = null ; this._objectList.ToList ( ) .OrderBy ( x = > x.Id ) .SequenceEqual ( this._cachedObjectList.ToList ( ) .OrderBy ( x = > x.Id ) ) ; public class SomeObject : IEquatable < SomeObject > { public int GetHashCode ( SomeObject object ) { return base.GetHashCode ( ) ; } public bool Equals ( SomeObject other ) { bool result = true ; if ( Object.ReferenceEquals ( other , null ) ) { result = false ; } //Check whether the compared objects reference the same data . if ( Object.ReferenceEquals ( this , other ) ) { result = true ; } else { // if the reference is n't the same , we can check the properties for equality if ( ! this.Id.Equals ( other.Id ) ) { result = false ; } if ( ! this.OtherList.OrderBy ( x = > x.Id ) .ToList ( ) .SequenceEqual ( other.OtherList.OrderBy ( x = > x.Id ) .ToList ( ) ) ) { result = false ; } } return result ; } } }"
"ILGenerator ilGen = methodBuilder.GetILGenerator ( ) ; if ( type == typeof ( int ) ) { ilGen.Emit ( OpCodes.Ldc_I4 , Convert.ToInt32 ( value , CultureInfo.InvariantCulture ) ) ; } else if ( type == typeof ( double ) ) { ilGen.Emit ( OpCodes.Ldc_R8 , Convert.ToDouble ( value , CultureInfo.InvariantCulture ) ) ; } else if ( type == typeof ( string ) ) { ilGen.Emit ( OpCodes.Ldstr , Convert.ToString ( value , CultureInfo.InvariantCulture ) ) ; } else if ( type == typeof ( decimal ) ) { ilGen.Emit ( OpCodes.Ld_ ? ? ? , Convert.ToDecimal ( value , CultureInfo.InvariantCulture ) ) ; } else if ( type == typeof ( decimal ) ) { decimal d = Convert.ToDecimal ( value , CultureInfo.InvariantCulture ) ; // Source : https : //msdn.microsoft.com/en-us/library/bb1c1a6x.aspx var bits = decimal.GetBits ( d ) ; bool sign = ( bits [ 3 ] & 0x80000000 ) ! = 0 ; byte scale = ( byte ) ( ( bits [ 3 ] > > 16 ) & 0x7f ) ; ilGen.Emit ( OpCodes.Ldc_I4 , bits [ 0 ] ) ; ilGen.Emit ( OpCodes.Ldc_I4 , bits [ 1 ] ) ; ilGen.Emit ( OpCodes.Ldc_I4 , bits [ 2 ] ) ; ilGen.Emit ( sign ? OpCodes.Ldc_I4_1 : OpCodes.Ldc_I4_0 ) ; ilGen.Emit ( OpCodes.Ldc_I4 , scale ) ; var ctor = typeof ( decimal ) .GetConstructor ( new [ ] { typeof ( int ) , typeof ( int ) , typeof ( int ) , typeof ( bool ) , typeof ( byte ) } ) ; ilGen.Emit ( OpCodes.Newobj , ctor ) ; }"
"public interface INode { IEnumerable < INode > Children { get ; } } public interface INode < N > : INode where N : INode < N > { new IEnumerable < N > Children { get ; } } public interface IAlpha : INode < IAlpha > { } public interface IBeta : INode < IBeta > { } public abstract class NodeBase < N > : INode < N > where N : INode < N > { protected readonly List < N > _children = new List < N > ( ) ; public IEnumerable < N > Children { get { return _children.AsEnumerable ( ) ; } } IEnumerable < INode > INode.Children { get { return this.Children.Cast < INode > ( ) ; } } } public class Alpha : NodeBase < Alpha > , IAlpha { IEnumerable < IAlpha > INode < IAlpha > .Children { get { return this.Children.Cast < IAlpha > ( ) ; } } } public class Beta : NodeBase < Beta > , IBeta { IEnumerable < IBeta > INode < IBeta > .Children { get { return this.Children.Cast < IBeta > ( ) ; } } } var alpha = new Alpha ( ) ; var beta = new Beta ( ) ; var alphaAsIAlpha = alpha as IAlpha ; var betaAsIBeta = beta as IBeta ; var alphaAsINode = alpha as INode ; var betaAsINode = beta as INode ; var alphaAsINodeAlpha = alpha as INode < Alpha > ; var betaAsINodeBeta = beta as INode < Beta > ; var alphaAsINodeIAlpha = alpha as INode < IAlpha > ; var betaAsINodeIBeta = beta as INode < IBeta > ; var alphaAsNodeBaseAlpha = alpha as NodeBase < Alpha > ; var betaAsNodeBaseBeta = beta as NodeBase < Beta > ;"
"class MyClass { private readonly int a ; private int b ; public MyClass ( int a , int b ) { this.a = a ; this.b = b ; } public int A { get { return a ; } } public int B { get { return b ; } } } MyClass value = null ; Task.Run ( ( ) = > { while ( true ) { value = new MyClass ( 1 , 1 ) ; Thread.Sleep ( 10 ) ; } } ) ; while ( true ) { MyClass result = value ; if ( result ! = null & & ( result.A ! = 1 || result.B ! = 1 ) ) { throw new Exception ( ) ; } Thread.Sleep ( 10 ) ; }"
services.AddAuthentication ( options = > { options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme ; options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme ; } ) .AddCookie ( ) .AddJwtBearer ( async options = > { options.TokenValidationParameters = await wso2Actions.JwtOperations.GetTokenValidationParameters ( ) ; options.Events = new JwtBearerEvents ( ) { // WSO2 sends the JWT in a different field than what is expected . // This allows us to feed it in . OnMessageReceived = context = > { context.Token = context.HttpContext.Request.Headers [ `` X-JWT-Assertion '' ] ; return Task.CompletedTask ; } } } ;
"struct Alice { public string Alpha ; public string Beta ; } struct Bob { public long Gamma ; } static object Foo ( dynamic alice ) { decimal alpha ; long beta ; if ( ! decimal.TryParse ( alice.Alpha , out alpha ) // * || ! long.TryParse ( alice.Beta , out beta ) ) // ** { return alice ; } var bob = new Bob { Gamma = beta } ; // *** // do some stuff with alice and bob return alice ; }"
public interface IAggregateRoot { public string Id { get ; } public string Foo { get ; set ; } public int Bar { get ; set ; } public IList < IChildEntity > Children { get ; } } public interface IAggregateRootRepository { public IAggregateRoot GetById ( string id ) ; public void AddOrUpdate ( IAggregateRoot root ) ; } public interface IAggregateRootRepository { public IAggregateRoot GetById ( string id ) ; public void AddOrUpdate ( IAggregateRoot root ) ; public void AddOrUpdate ( IChildEntity child ) ; }
public virtual DbSet < TEntity > Set < TEntity > ( ) where TEntity : class public override DbSet < TEntity > Set < TEntity > ( ) { return base.Set < TEntity > ( ) ; } public override DbSet < TEntity > Set < TEntity > ( ) where TEntity : class { return base.Set < TEntity > ( ) ; }
RegexOptions.IgnoreCaseRegexOptions.IgnorePatternWhiteSpaceRegexOptions.Multiline
"$ drive = Get-WmiObject -Class Win32_Volume -Namespace root\CIMV2 -ComputerName . | Where-Object { $ _.DriveLetter -eq 'D : ' } $ drive.DefragAnalysis ( ) .DefragAnalysis public static Fragmentation GetVolumeFragmentationAnalysis ( string drive ) { //Fragmenation object initialization removed for simplicity try { ConnectionOptions mgmtConnOptions = new ConnectionOptions { EnablePrivileges = true } ; ManagementScope scope = new ManagementScope ( new ManagementPath ( string.Format ( @ '' \\ { 0 } \root\CIMV2 '' , Environment.MachineName ) ) , mgmtConnOptions ) ; ObjectQuery query = new ObjectQuery ( string.Format ( @ '' SELECT * FROM Win32_Volume WHERE Name = ' { 0 } \\ ' '' , drive ) ) ; scope.Connect ( ) ; using ( ManagementObjectSearcher searcher = new ManagementObjectSearcher ( scope , query ) ) { object [ ] outputArgs = new object [ 2 ] ; foreach ( ManagementObject moVolume in searcher.Get ( ) ) { // Execution stops at this line as the result is always 11 UInt32 result = ( UInt32 ) moVolume.InvokeMethod ( `` DefragAnalysis '' , outputArgs ) ; if ( result == 0 ) { Console.WriteLine ( `` Defrag Needed : = { 0 } \n '' , outputArgs [ 0 ] ) ; ManagementBaseObject mboDefragAnalysis = outputArgs [ 1 ] as ManagementBaseObject ; if ( null ! = mboDefragAnalysis ) { Console.WriteLine ( mboDefragAnalysis [ `` TotalPercentFragmentation '' ] .ToString ( ) ) ; } } else { Console.WriteLine ( `` Return Code : = { 0 } '' , result ) ; } } } } catch ( Exception ex ) { Console.WriteLine ( `` Could not acquire fragmentation data.\n '' + ex ) ; } return result ; } < requestedExecutionLevel level= '' requireAdministrator '' uiAccess= '' false '' / >"
public class ContainerTests : TestFixture { private IContainer _container ; public ContainerTests ( string containerName ) { _container = CreateContainer ( containerName ) ; } [ Fact ] public void ResolveJobFactory ( ) { IJobFactory jobFactory = _container.Resolve < IJobFactory > ( ) ; } private IContainer CreateContainer ( string containerName ) { if ( containerName == `` CastleWindsor '' ) { return new WindsorContainerAdapter ( ) ; } //other adapters throw new NotImplementedException ( ) ; } }
"using System ; using System.Runtime.Remoting.Messaging ; class Program { static void Main ( string [ ] args ) { new Program ( ) .Run ( ) ; Console.ReadLine ( ) ; } void Run ( ) { Action example = new Action ( threaded ) ; IAsyncResult ia = example.BeginInvoke ( new AsyncCallback ( completed ) , null ) ; // Option # 1 : /* ia.AsyncWaitHandle.WaitOne ( ) ; try { example.EndInvoke ( ia ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; } */ } void threaded ( ) { throw new ApplicationException ( `` Kaboom '' ) ; } void completed ( IAsyncResult ar ) { // Option # 2 : Action example = ( ar as AsyncResult ) .AsyncDelegate as Action ; try { example.EndInvoke ( ar ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; } } }"
"//always works , returning a valid object into _page _page = _httpContext.Handler as System.Web.UI.Page ; //Fails throwing the exception : Unable to cast object of type 'System.Web.DefaultHttpHandler ' to type 'System.Web.UI.Page ' _page = ( System.Web.UI.Page ) _httpContext.Handler ; //Fixes the problem if ( _httpContext.Handler is System.Web.UI.Page ) _page = ( System.Web.UI.Page ) _httpContext.Handler ;"
public void MainMethod ( ) { IServiceProvider serviceProvider = GetServiceProvider ( ) ; string value1 = GetValueFromStorage ( `` SomeArg1 '' ) ; // Call AnotherMethod serviceProvider.AnotherMethod ( value1 ) ; string value2 = GetValueFromStorage ( `` SomeArg2 '' ) ; // Call AnotherMethod serviceProvider.AnotherMethod ( value2 ) ; string value3 = GetValueFromStorage ( `` SomeArg3 '' ) ; // Call AnotherMethod serviceProvider.AnotherMethod ( value3 ) ; string value4 = GetValueFromStorage ( `` SomeArg4 '' ) ; // Call AnotherMethod serviceProvider.AnotherMethod ( value4 ) ; } public void TestMainMethod ( ) { // Stub storage IDataStorage dataStorage = MockRepository.GenerateStub < IDataStorage > ( ) ; // Stub serviceProvider IServiceProvider dataStorage = MockRepository.GenerateStub < IServiceProvider > ( ) ; // stub for SomeArg1 dataStorage.Stub ( x = > x.GetValueFromStorage ( null ) .IgnoreArguments ( ) .Return ( `` Value1 '' ) ) .Repeat.Once ( ) ; // stub for SomeArg2 dataStorage.Stub ( x = > x.GetValueFromStorage ( null ) .IgnoreArguments ( ) .Return ( `` Value2 '' ) ) .Repeat.Once ( ) ; // stub for SomeArg3 dataStorage.Stub ( x = > x.GetValueFromStorage ( null ) .IgnoreArguments ( ) .Return ( `` Value3 '' ) ) .Repeat.Once ( ) ; // stub for SomeArg4 dataStorage.Stub ( x = > x.GetValueFromStorage ( null ) .IgnoreArguments ( ) .Return ( `` Value4 '' ) ) .Repeat.Once ( ) ; // call MainMethod MainMethod ( ) ; // Assert that third call is called with `` Value3 '' serviceProvider.AssertWasCalled ( x = > x.AnotherMethod ( `` Value3 '' ) ) ; }
services.AddScoped < ValueStore > ( ) ; var someValueStore = app.ApplicationServices.GetService < ValueStore > ( ) ;
"Dictionary < string , double > a = new Dictionary < string , double > ( ) ; a.Add ( `` a '' , 1e-3 ) ; if ( 1.0 < a [ `` a '' ] * 1e3 ) Console.WriteLine ( `` Wrong '' ) ; if ( 1.0 < 1e-3 * 1e3 ) Console.WriteLine ( `` Wrong '' ) ;"
"namespace TestingApp { static class Program { private static string letters = `` abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 '' ; private static char [ ] characters = letters.ToCharArray ( ) ; private static Random _rng = new Random ( ) ; static void Main ( string [ ] args ) { int totalIntegers = 0 ; int totalLetters = 0 ; for ( int testingIntervals = 0 ; testingIntervals < 3000 ; testingIntervals++ ) { string randomString = NextString ( 10 ) ; string checksum = DreamforceChecksum.GenerateSHA256 ( randomString ) ; int integerCount = checksum.Count ( Char.IsDigit ) ; int letterCount = checksum.Count ( Char.IsLetter ) ; Console.WriteLine ( `` String : `` + randomString ) ; Console.WriteLine ( `` Checksum : `` + checksum ) ; Console.WriteLine ( `` Integers : `` + integerCount ) ; Console.WriteLine ( `` Letters : `` + letterCount ) ; totalIntegers += integerCount ; totalLetters += letterCount ; } Console.WriteLine ( `` Total Integers : `` + totalIntegers ) ; Console.WriteLine ( `` Total Letters : `` + totalLetters ) ; Console.Read ( ) ; } private static string NextString ( int length ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i++ ) { builder.Append ( characters [ _rng.Next ( characters.Length ) ] ) ; } return builder.ToString ( ) ; } } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Security.Cryptography ; using System.Text ; using System.Threading.Tasks ; namespace DreamforceFramework.Framework.Cryptography { public static class DreamforceChecksum { private static readonly SHA256Managed _shaManagedInstance = new SHA256Managed ( ) ; private static readonly StringBuilder _checksumBuilder = new StringBuilder ( ) ; public static string GenerateSHA256 ( string text ) { byte [ ] bytes = Encoding.UTF8.GetBytes ( text ) ; byte [ ] hash = _shaManagedInstance.ComputeHash ( bytes ) ; _checksumBuilder.Clear ( ) ; for ( int index = 0 ; index < hash.Length ; index++ ) { _checksumBuilder.Append ( hash [ index ] .ToString ( `` x2 '' ) ) ; } return _checksumBuilder.ToString ( ) ; } public static byte [ ] GenerateSHA256Bytes ( string text ) { byte [ ] bytes = Encoding.UTF8.GetBytes ( text ) ; byte [ ] hash = _shaManagedInstance.ComputeHash ( bytes ) ; _checksumBuilder.Clear ( ) ; for ( int index = 0 ; index < hash.Length ; index++ ) { _checksumBuilder.Append ( hash [ index ] .ToString ( `` x2 '' ) ) ; } return Encoding.UTF8.GetBytes ( _checksumBuilder.ToString ( ) ) ; } public static bool ValidateDataIntegrity ( string data , string targetHashcode ) { return GenerateSHA256 ( data ) .Equals ( targetHashcode ) ; } } }"
"MicroformatsParser mp = new MicroformatsParser ( `` http : //microformats.org '' ) ; List < HCard > hcards = mp.GetAll < HCard > ( ) ; foreach ( HCard hcard in hcards ) { Console.WriteLine ( `` Full Name : { 0 } '' , hcard.FullName ) ; foreach ( string email in hcard.EmailAddresses ) Console.WriteLine ( `` E-Mail Address : { 0 } '' , email ) ; } [ ContainerName ( `` vcard '' ) ] public class HCard { [ PropertyName ( `` fn '' ) ] public string FullName ; [ PropertyName ( `` email '' ) ] public List < string > EmailAddresses ; [ PropertyName ( `` adr '' ) ] public List < Address > Addresses ; public HCard ( ) { } }"
< configuration > < system.web > < customErrors mode= '' Off '' / > < /system.web > < /configuration > # Build Folders obj/ # User-specific files *.user # SQL Server files App_Data/*.mdf App_Data/*.ldf git rm -r -- cached obj/* git rm -r -- cached */*.user
[ AttributeUsage ( AttributeTargets.Method ) ] public class MyAttribute : Attribute { public MyAttribute ( ) { // Do stuff } ~MyAttribute ( ) { // When is this called ? When the function ends ? Whenever the GC feels like ? } }
"// This is a variant type . At each single time it can only hold one case ( a value ) // from a predefined set of cases . All classes that implement this interface// consitute the set of the valid cases of the variant . So at each time a variant can// be an instance of one of the classes that implement this interface . In order to// add a new case to the variant there must be another class that implements// this interface.public interface ISomeAnimal { // This method introduces the currently held case to whoever uses/processes // the variant . By processing we mean that the case is turned into a resulting // value represented by the generic type TResult . TResult GetProcessed < TResult > ( ISomeAnimalProcessor < TResult > processor ) ; } // This is the awkward part , the visitor that is required every time we want to// to process the variant . For each possible case this processor has a corresponding// method that turns that case to a resulting value.public interface ISomeAnimalProcessor < TResult > { TResult ProcessCat ( Cat cat ) ; TResult ProcessFish ( Fish fish ) ; } // A case that represents a cat from the ISomeAnimal variant.public class Cat : ISomeAnimal { public CatsHead Head { get ; set ; } public CatsBody Body { get ; set ; } public CatsTail Tail { get ; set ; } public IEnumerable < CatsLeg > Legs { get ; set ; } public TResult GetProcessed < TResult > ( ISomeAnimalProcessor < TResult > processor ) { // a processor has a method for each case of a variant , for this // particular case ( being a cat ) we always pick the ProcessCat method return processor.ProcessCat ( this ) ; } } // A case that represents a fish from the ISomeAnimal variant.public class Fish : ISomeAnimal { public FishHead Head { get ; set ; } public FishBody Body { get ; set ; } public FishTail Tail { get ; set ; } public TResult GetProcessed < TResult > ( ISomeAnimalProcessor < TResult > processor ) { // a processor has a method for each case of a variant , for this // particular case ( being a fish ) we always pick the ProcessCat method return processor.ProcessFish ( this ) ; } } public static class AnimalPainter { // Now , in order to process a variant , in this case we want to // paint a picture of whatever animal it prepresents , we have to // create a new implementation of ISomeAnimalProcessor interface // and put the painting logic in it . public static void AddAnimalToPicture ( Picture picture , ISomeAnimal animal ) { var animalToPictureAdder = new AnimalToPictureAdder ( picture ) ; animal.GetProcessed ( animalToPictureAdder ) ; } // Making a new visitor every time you need to process a variant : // 1 . Requires a lot of typing . // 2 . Bloats the type system . // 3 . Makes the code harder to maintain . // 4 . Makes the code less readable . private class AnimalToPictureAdder : ISomeAnimalProcessor < Nothing > { private Picture picture ; public AnimalToPictureAdder ( Picture picture ) { this.picture = picture ; } public Nothing ProcessCat ( Cat cat ) { this.picture.AddBackground ( new SomeHouse ( ) ) ; this.picture.Add ( cat.Body ) ; this.picture.Add ( cat.Head ) ; this.picture.Add ( cat.Tail ) ; this.picture.AddAll ( cat.Legs ) ; return Nothing.AtAll ; } public Nothing ProcessFish ( Fish fish ) { this.picture.AddBackground ( new SomeUnderwater ( ) ) ; this.picture.Add ( fish.Body ) ; this.picture.Add ( fish.Tail ) ; this.picture.Add ( fish.Head ) ; return Nothing.AtAll ; } } }"
for ( int i = 0 ; i < 10 ; i++ ) new Thread ( ( ) = > Console.Write ( i ) ) .Start ( ) ;
public class ConcreteContainer : IContainer { public EntityCollection < ConcreteChild > Children { get ; set ; } } public class ConcreteChild : IChild { } public interface IContainer { IEnumerable < IChild > Children { get ; set ; } } public interface IChild { }
"public static IBuffer Concat ( this IBuffer buffer1 , IBuffer buffer2 ) { var capacity = ( int ) ( buffer1.Length + buffer2.Length ) ; var result = WindowsRuntimeBuffer.Create ( capacity ) ; buffer1.CopyTo ( result ) ; buffer2.CopyTo ( 0 , result , buffer1.Length , buffer2.Length ) ; return result ; }"
class Sync : IDisposable { private static readonly SemaphoreSlim Semaphore = new SemaphoreSlim ( 20 ) ; private Sync ( ) { } public static async Task < Sync > Acquire ( ) { await Semaphore.WaitAsync ( ) ; return new Sync ( ) ; } public void Dispose ( ) { Semaphore.Release ( ) ; } } using ( await Sync.Acquire ( ) ) { // use a resource here }
< Color x : Key= '' Info '' > # 0060ac < /Color > ... < Style x : Key= '' LabelContainer '' TargetType= '' Frame '' > < Setter Property= '' Padding '' Value= '' 5 '' / > < Setter Property= '' HorizontalOptions '' Value= '' Fill '' / > < /Style > < Style x : Key= '' LabelContainer-Info '' TargetType= '' Frame '' BasedOn= '' { StaticResource LabelContainer } '' > < Setter Property= '' BackgroundColor '' Value= '' { DynamicResource Info } '' / > < /Style > < Frame x : Name= '' CreditCardPaymentResultFrame '' Style= '' { StaticResource LabelContainer-Info } '' Padding= '' 0 '' > < Label x : Name= '' PaymentErrorLabel '' Text= '' Lorem ipsum '' IsVisible= '' True '' HorizontalOptions= '' FillAndExpand '' VerticalOptions= '' FillAndExpand '' VerticalTextAlignment= '' Center '' HorizontalTextAlignment= '' Center '' FontSize= '' 18 '' TextColor= '' White '' > < /Label > < /Frame > CreditCardPaymentResultFrame.BackgroundColor = Color.FromHex ( `` # ed3700 '' ) ;
public interface INativeInterface { void PerformAction ( ) ; String Property { get ; set ; } } public abstract class ISimulatedInterface { public abstract void PerformAction ( ) ; public abstract String Property { get ; set ; } }
"asm { mov ax,1 add ax,4 }"
static void ThisWorks ( ) { IList < object > list = new List < object > ( ) ; list.Add ( `` I can add a string since string : object '' ) ; } static void ThisDoesNotWork ( ) { // throws an invalid cast exception IList < object > list = ( IList < object > ) new List < string > ( ) ; list.Add ( `` I 'm never getting here ... why ? `` ) ; }
"public void Update ( ) { Position += Velocity ; Velocity += World.Gravity ; List < SSSPBody > toCheck = World.SpatialHash.GetNearbyItems ( this ) ; for ( int i = 0 ; i < toCheck.Count ; i++ ) { SSSPBody body = toCheck [ i ] ; body.Test.Color = Color.White ; if ( body ! = this & & body.Static ) { float left = ( body.CornerMin.X - CornerMax.X ) ; float right = ( body.CornerMax.X - CornerMin.X ) ; float top = ( body.CornerMin.Y - CornerMax.Y ) ; float bottom = ( body.CornerMax.Y - CornerMin.Y ) ; if ( SSSPUtils.AABBIsOverlapping ( this , body ) ) { body.Test.Color = Color.Yellow ; Vector2 overlapVector = SSSPUtils.AABBGetOverlapVector ( left , right , top , bottom ) ; Position += overlapVector ; } if ( SSSPUtils.AABBIsCollidingTop ( this , body ) ) { if ( ( Position.X > = body.CornerMin.X & & Position.X < = body.CornerMax.X ) & & ( Position.Y + Height/2f == body.Position.Y - body.Height/2f ) ) { body.Test.Color = Color.Red ; Velocity = new Vector2 ( Velocity.X , 0 ) ; } } } } } public static bool AABBIsOverlapping ( SSSPBody mBody1 , SSSPBody mBody2 ) { if ( mBody1.CornerMax.X < = mBody2.CornerMin.X || mBody1.CornerMin.X > = mBody2.CornerMax.X ) return false ; if ( mBody1.CornerMax.Y < = mBody2.CornerMin.Y || mBody1.CornerMin.Y > = mBody2.CornerMax.Y ) return false ; return true ; } public static bool AABBIsColliding ( SSSPBody mBody1 , SSSPBody mBody2 ) { if ( mBody1.CornerMax.X < mBody2.CornerMin.X || mBody1.CornerMin.X > mBody2.CornerMax.X ) return false ; if ( mBody1.CornerMax.Y < mBody2.CornerMin.Y || mBody1.CornerMin.Y > mBody2.CornerMax.Y ) return false ; return true ; } public static bool AABBIsCollidingTop ( SSSPBody mBody1 , SSSPBody mBody2 ) { if ( mBody1.CornerMax.X < mBody2.CornerMin.X || mBody1.CornerMin.X > mBody2.CornerMax.X ) return false ; if ( mBody1.CornerMax.Y < mBody2.CornerMin.Y || mBody1.CornerMin.Y > mBody2.CornerMax.Y ) return false ; if ( mBody1.CornerMax.Y == mBody2.CornerMin.Y ) return true ; return false ; } public static Vector2 AABBGetOverlapVector ( float mLeft , float mRight , float mTop , float mBottom ) { Vector2 result = new Vector2 ( 0 , 0 ) ; if ( ( mLeft > 0 || mRight < 0 ) || ( mTop > 0 || mBottom < 0 ) ) return result ; if ( Math.Abs ( mLeft ) < mRight ) result.X = mLeft ; else result.X = mRight ; if ( Math.Abs ( mTop ) < mBottom ) result.Y = mTop ; else result.Y = mBottom ; if ( Math.Abs ( result.X ) < Math.Abs ( result.Y ) ) result.Y = 0 ; else result.X = 0 ; return result ; }"
"[ Flags ] public enum BrokenEnum { None , FirstOption , SecondOption , ThirdOption }"
var instance1 = new MyObject { Value = `` hello '' } var instance2 = instance1 ; instance1.Value = `` bye '' ; Console.WriteLine ( instance1.Value ) ; Console.WriteLine ( instance2.Value ) ;
"static private string [ ] ParseSemicolon ( string fullString ) { if ( String.IsNullOrEmpty ( fullString ) ) return new string [ ] { } ; if ( fullString.IndexOf ( ' ; ' ) > -1 ) { return fullString.Split ( new [ ] { ' ; ' } , StringSplitOptions.RemoveEmptyEntries ) .Select ( str = > str.Trim ( ) ) .ToArray ( ) ; } else { return new [ ] { fullString.Trim ( ) } ; } }"
"Help.ShowHelp ( this , helpfile , keywordText ) ;"
string regex = @ '' ( ? i ) foo= ( BAR ? - [ A-Z ] + ( 33|34 ) ? ) '' ;
"StopWatch : 0,2 DateTime : 1,0 Diff : 0,81StopWatch : 10000,5 DateTime : 10002,6 Diff : 2,04 ( ... ) StopWatch : 2231807,5 DateTime : 2231947,7 Diff : 140,13StopWatch : 2241809,5 DateTime : 2241950,2 Diff : 140,70"
"class Node { public enum Color { White , Gray , Black } ; public string Name { get ; set ; } //city public List < NeighborNode > Neighbors { get ; set ; } //Connected Edges public Color nodeColor = Color.White ; public int timeDiscover { get ; set ; } //discover time public int timeFinish { get ; set ; } // finish time public Node ( ) { Neighbors = new List < NeighborNode > ( ) ; } public Node ( string n , int discover ) { Neighbors = new List < NeighborNode > ( ) ; this.Name = n ; timeDiscover = discover ; } public Node ( string n , NeighborNode e , decimal m ) { Neighbors = new List < NeighborNode > ( ) ; this.Name = n ; this.Neighbors.Add ( e ) ; } } class NeighborNode { public Node Name { get ; set ; } public decimal Miles { get ; set ; } //Track the miles on the neighbor node public NeighborNode ( ) { } public NeighborNode ( Node n , decimal m ) { Name = n ; Miles = m ; } } public void DijkstraAlgorithm ( List < Node > graph ) { List < DA > _algorithmList = new List < DA > ( ) ; //track the node cost/positioning Stack < Node > _allCities = new Stack < Node > ( ) ; // add all cities into this for examination Node _nodeToExamine = new Node ( ) ; //this is the node we 're currently looking at . decimal _cost = 0 ; foreach ( var city in graph ) // putting these onto a stack for easy manipulation . Probably could have just made this a stack to start { _allCities.Push ( city ) ; _algorithmList.Add ( new DA ( city ) ) ; } _nodeToExamine = _allCities.Pop ( ) ; //pop off the first node while ( _allCities.Count ! = 0 ) // loop through each city { foreach ( var neighbor in _nodeToExamine.Neighbors ) //loop through each neighbor of the node { for ( int i = 0 ; i < _algorithmList.Count ; i++ ) //search the alorithm list for the current neighbor node { if ( _algorithmList [ i ] .Name.Name == neighbor.Name.Name ) //found it { for ( int j = 0 ; j < _algorithmList.Count ; j++ ) //check for the cost of the parent node { if ( _algorithmList [ j ] .Name.Name == _nodeToExamine.Name ) //looping through { if ( _algorithmList [ j ] .Cost ! = 100000000 ) //not infinity _cost = _algorithmList [ j ] .Cost ; //set the cost to be the parent cost break ; } } _cost = _cost + neighbor.Miles ; if ( _algorithmList [ i ] .Cost > _cost ) // check to make sure the miles are less ( better path ) { _algorithmList [ i ] .Parent = _nodeToExamine ; //set the parent to be the top node _algorithmList [ i ] .Cost = _cost ; // set the weight to be correct break ; } } } } _cost = 0 ; _nodeToExamine = _allCities.Pop ( ) ; } }"
"var dataStore = new DataStore ( ) ; Observable.FromEventPattern < DataChangedEventArgs > ( dataStore , nameof ( dataStore.DataChanged ) ) .SubscribeOn ( TaskPoolScheduler.Default ) .Select ( x = > x.EventArgs ) .StartWith ( new DataChangedEventArgs ( ) ) .Throttle ( TimeSpan.FromMilliseconds ( 25 ) ) .Select ( x = > { Thread.Sleep ( 5000 ) ; // Simulate long-running calculation . var result = 42 ; return result ; } ) .ObserveOn ( new SynchronizationContextScheduler ( SynchronizationContext.Current ) ) .Subscribe ( result = > { // Do some interesting work with the result . // ... // Do something that makes the DataStore raise another event . dataStore.RaiseDataChangedEvent ( ) ; // < - DEADLOCK ! } ) ; dataStore.RaiseDataChangedEvent ( ) ; // < - Returns immediately , i.e . does NOT wait for long-running calculation.dataStore.RaiseDataChangedEvent ( ) ; // < - Blocks while waiting for the previous long-running calculation to complete , then returns eventually ."
< script type= '' text/javascript '' src= '' /scripts/blah.js '' > < /script > < script type= '' text/javascript '' src= '' /scripts/yada.js '' > < /script > < script type= '' text/javascript '' src= '' /scripts/all.js '' > < /script >
# nullable enableclass Foo { public string ? Name { get ; set ; } public bool HasName = > Name ! = null ; public void NameToUpperCase ( ) { if ( HasName ) { Name = Name.ToUpper ( ) ; } } }
"System.Text.RegularExpressions.Regex.Replace ( task.Message , @ '' ( \r\n ) { 2 , } ( \r\r ) { 2 , } '' , System.Environment.NewLine ) ; StackoverflowStackExchangeUser Experience Stackoverflow StackExchange User Experience"
"using System ; namespace TestGetHashCode { class Program { static void Main ( string [ ] args ) { for ( int i = 0 ; i < 100 ; i++ ) { object o = new object ( ) ; Console.WriteLine ( o.GetHashCode ( ) ) ; } } } } 37121646,45592480,57352375,2637164,41014879,3888474,25209742,26966483,31884011 [ TargetedPatchingOptOut ( `` Performance critical to inline across NGen image boundaries '' ) ] [ __DynamicallyInvokable ] public virtual int GetHashCode ( ) { return RuntimeHelpers.GetHashCode ( this ) ; } [ SecuritySafeCritical ] [ __DynamicallyInvokable ] [ MethodImpl ( MethodImplOptions.InternalCall ) ] public static int GetHashCode ( object o ) ;"
"var classNameAbbreviationRegex = new Regex ( `` [ A-Z ] + '' , RegexOptions.Compiled ) ; var matches = classNameAbbreviationRegex.Matches ( enumTypeName ) ; var letters = new string [ matches.Count ] ; for ( var i = 0 ; i < matches.Count ; i++ ) { letters [ i ] = matches [ i ] .Value ; } var abbreviation = string.Join ( string.Empty , letters ) ;"
"public interface IItem { // interface members } public class Item < T > : IItem { // class members , and IItem implementation } public interface IItemCollection : IEnumerable < IItem > { // This should be enumerable over all the IItems } // We can not implement both IItemCollection and IEnumerable < TItem > at// the same time , so we need a go between class to implement the// IEnumerable < IItem > interface explicitly : public abstract class ItemCollectionBase : IItemCollection { protected abstract IEnumerator < IItem > GetItems ( ) ; IEnumerator < IItem > IEnumerable < IItem > .GetEnumerator ( ) { return GetItems ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return GetItems ( ) ; } } public class ItemCollection < TKey , TItem > : ItemCollectionBase , IEnumerable < TItem > where TItem : class , IItem , new ( ) { private Dictionary < TKey , TItem > dictionary ; protected override GetItems ( ) { return dictionary.Values ; } public IEnumerator < TItem > GetEnumerator ( ) { return dictionary.Values ; } } public interface IItemCollection { IEnumerable < IItem > Items { get ; } }"
Private sub foo ( ) try 'Do something ' catch throw 'And nothing else ! ' End TryEnd Sub
"dbSet = new DataSet ( ) ; //DataTable and DataRelationDataTable dtStudent = new DataTable ( `` Student '' ) ; //fill datatable 1dtStudent.Columns.Add ( `` Id '' , typeof ( int ) ) ; dtStudent.Columns.Add ( `` Name '' , typeof ( string ) ) ; dtStudent.Columns.Add ( `` TownId '' , typeof ( int ) ) ; dtStudent.Rows.Add ( new object [ ] { 1 , `` Arthur '' , 1 } ) ; dtStudent.Rows.Add ( new object [ ] { 2 , `` Stefan '' , 2 } ) ; DataTable dtTown = new DataTable ( `` Town '' ) ; dtTown.Columns.Add ( `` Id '' , typeof ( int ) ) ; dtTown.Columns.Add ( `` Name '' , typeof ( string ) ) ; dtTown.Rows.Add ( new object [ ] { 1 , `` KW '' , } ) ; dtTown.Rows.Add ( new object [ ] { 2 , `` Perg '' , } ) ; dbSet.Tables.Add ( dtStudent ) ; dbSet.Tables.Add ( dtTown ) ; //DataRelationDataColumn parentCol , childCol ; childCol = dbSet.Tables [ `` Town '' ] .Columns [ `` Id '' ] ; parentCol = dbSet.Tables [ `` Student '' ] .Columns [ `` TownId '' ] ; DataRelation dr ; dr = new DataRelation ( `` DataRelation '' , parentCol , childCol ) ; dbSet.Relations.Add ( dr ) ; dgv.DataSource = dbSet ; dgv.DataMember = `` Student '' ;"
"var stream = _tcpClient.GetStream ( ) ; stream.Write ( requestData , 0 , requestData.Length ) ; using ( var ms = new MemoryStream ( ) ) { var tempBuffer = new byte [ 65535 ] ; do { var numBytesRead = stream.Read ( tempBuffer , 0 , tempBuffer.Length ) ; ms.Write ( tempRead , 0 , numBytesRead ) ; } while ( ms.Length < ExpectedResponseSize ) ; _hardwareResponse = ms.ToArray ( ) ; }"
stelem Type sbyte ( ldloc pArray ) ldc_i4 1 ldc_i4 0 ( sbyte [ ] ) pArray [ 1 ] = 1 ;
type TFooClass = class of TFoo ; TFoo=class end ;
"foreach ( MyClass entry in list ) if ( entry == null ) throw new Exception ( `` null entry ! `` ) ; public class AsynchronousList < T > : List < T > { private AddDelegate addDelegate ; public delegate void AddDelegate ( T item ) ; public AsynchronousList ( ) { addDelegate = new AddDelegate ( this.AddBlocking ) ; } public void AddAsynchronous ( T item ) { addDelegate.BeginInvoke ( item , null , null ) ; } private void AddBlocking ( T item ) { lock ( this ) { Add ( item ) ; } } }"
Task < T > DoSomethingTask < T > ( ) ; Task < T > DoSomethingAsync < T > ( ) ;
"public static string EncryptString ( String toEncrypt , String key ) { Debug.WriteLine ( `` Encrypting string : `` + toEncrypt + `` & key : '' + key ) ; Rijndael AES = Rijndael.Create ( ) ; AES.KeySize = 128 ; AES.BlockSize = 128 ; AES.Mode = CipherMode.ECB ; AES.Padding = PaddingMode.Zeros ; MD5CryptoServiceProvider Hasher = new MD5CryptoServiceProvider ( ) ; AES.Key = Hasher.ComputeHash ( UTF8Encoding.UTF8.GetBytes ( key ) ) ; ICryptoTransform crypto = AES.CreateEncryptor ( AES.Key , AES.IV ) ; byte [ ] txt = UTF8Encoding.UTF8.GetBytes ( HEADER + toEncrypt ) ; byte [ ] cipherText = crypto.TransformFinalBlock ( txt , 0 , txt.Length ) ; return Convert.ToBase64String ( cipherText ) ; ; } if ( $ msg ! = `` '' & & $ key ! = `` '' ) { $ msg = parseMsg ( $ msg ) ; mcrypt_get_key_size ( MCRYPT_RIJNDAEL_128 , MCRYPT_MODE_ECB ) ; $ decrypted = mcrypt_decrypt ( MCRYPT_RIJNDAEL_128 , md5 ( $ key , true ) , base64_decode ( $ msg ) , MCRYPT_MODE_ECB ) ; $ headerLoc = strpos ( $ decrypted , $ correctHeader ) ; /* $ decrypted = str_replace ( $ correctHeader , '' '' , $ decrypted ) ; for ( $ x = 0 ; $ x < 31 ; $ x++ ) { // an attempt at getting rid of control characters $ decrypted = str_replace ( chr ( $ x ) , '' '' , $ decrypted ) ; } */ }"
Kernel.Bind < ILoggingContext > ( ) .To < Application1LoggingContext > ( ) .InThreadScope ( ) ; var ctx = Kernel.Get < ILoggingContext > ( ) ;
"public abstract class Agent { protected IPhysics PluginPhysics { get ; set ; } protected Agent ( ... ) { } } public class Bicycle : Agent { private double maxA ; public Bicycle ( Object anotherParameter ) : base ( ... ) { maxA = ComputationOfMaxA ( ) ; this.PluginPhysics = new Physics ( anotherParameter , maxA ) ; } private static double ComputationOfMaxA ( ) { ... } ... } public abstract class Agent { protected IPhysics PluginPhysics { get ; private set ; } protected Agent ( ... ) { } protected void SetupPhysics ( Physics physics ) { this.PluginPhysics = physics ; } } public class Bicycle : Agent { private double maxA ; public Bicycle ( Object anotherParameter ) : base ( ... ) { maxA = ComputationOfMaxA ( ) ; SetupPhysics ( new Physics ( anotherParameter , maxA ) ) ; } private static double ComputationOfMaxA ( ) { ... } ... }"
"static class ExtendInt { public static bool HasFactor ( this int source , int factor ) { return ( source % factor == 0 ) ; } } class Program { static void Main ( ) { int i = 50 ; int f = 2 ; bool b = i.HasFactor ( f ) ; Console.WriteLine ( `` Is { 0 } a factor of { 1 } ? { 2 } '' , f , i , b ) ; Console.ReadLine ( ) ; } }"
"ServiceBase.Run ( new MyService1 ( ) , new MyService2 ( ) ) ;"
"public async Task SaveItem ( int userId , string name ) { var item = await _context.Items.Where ( i = > i.UserId == userId ) .SingleOrDefaultAsync ( ) ; if ( item == null ) { item = new Item { UserId = userId , Name = name } ; _context.Items.Add ( item ) ; } else { item.Name = name ; _context.Entry ( item ) .State = System.Data.Entity.EntityState.Modified ; } await _context.SaveChangesAsync ( ) ; }"
"static string FindUPSPlease ( ) { string post_data = `` < xml data string > '' ; string uri = `` https : //onlinetools.ups.com/ups.app/xml/Rate '' ; HttpWebRequest request = ( HttpWebRequest ) WebRequest.Create ( uri ) ; request.Method = `` POST '' ; request.KeepAlive = false ; request.ProtocolVersion = HttpVersion.Version10 ; byte [ ] postBytes = Encoding.ASCII.GetBytes ( post_data ) ; request.ContentType = `` application/x-www-form-urlencoded '' ; request.ContentLength = postBytes.Length ; Stream requestStream = request.GetRequestStream ( ) ; requestStream.Write ( postBytes , 0 , postBytes.Length ) ; requestStream.Close ( ) ; // get response and send to console HttpWebResponse response = ( HttpWebResponse ) request.GetResponse ( ) ; Console.WriteLine ( new StreamReader ( response.GetResponseStream ( ) ) .ReadToEnd ( ) ) ; Console.WriteLine ( response.StatusCode ) ; return `` done '' ; }"
"public static async void ThrowNow ( Exception ex ) { throw ex ; } public static async Task TestExAsync ( ) { ThrowNow ( new System.Exception ( `` Testing '' ) ) ; // Throws exception immediately //throw new System.Exception ( `` Testing '' ) ; // Exception is swallowed , not raised in unobserved event await Task.Delay ( 1000 ) ; } void Main ( ) { var task = TestExAsync ( ) ; }"
"enum RelativePositioning { LEFT = 0 , RIGHT = 1 , BOTTOM = 2 , TOP = 3 , FRONT = 4 , BACK = 5 } pos = ( ( eye.X < minCorner.X ? 1 : 0 ) < < ( int ) RelativePositioning.LEFT ) + ( ( eye.X > maxCorner.X ? 1 : 0 ) < < ( int ) RelativePositioning.RIGHT ) + ( ( eye.Y < minCorner.Y ? 1 : 0 ) < < ( int ) RelativePositioning.BOTTOM ) + ( ( eye.Y > maxCorner.Y ? 1 : 0 ) < < ( int ) RelativePositioning.TOP ) + ( ( eye.Z < minCorner.Z ? 1 : 0 ) < < ( int ) RelativePositioning.FRONT ) + ( ( eye.Z > maxCorner.Z ? 1 : 0 ) < < ( int ) RelativePositioning.BACK ) ; enum RelativePositioning { LEFT = 1 , RIGHT = 2 , BOTTOM = 4 , TOP = 8 , FRONT = 16 , BACK = 32 } if ( eye.X < minCorner.X ) { pos += ( int ) RelativePositioning.LEFT ; } if ( eye.X > maxCorner.X ) { pos += ( int ) RelativePositioning.RIGHT ; } if ( eye.Y < minCorner.Y ) { pos += ( int ) RelativePositioning.BOTTOM ; } if ( eye.Y > maxCorner.Y ) { pos += ( int ) RelativePositioning.TOP ; } if ( eye.Z > maxCorner.Z ) { pos += ( int ) RelativePositioning.FRONT ; } if ( eye.Z < minCorner.Z ) { pos += ( int ) RelativePositioning.BACK ; }"
public IEnumerable < string > booster { get ; set ; }
"public class GameManager : MonoBehaviourPunCallbacks { public GameObject playerPrefab ; public Transform spawnPoint ; public void Start ( ) { GameObject player = PhotonNetwork.Instantiate ( this.playerPrefab.name , spawnPoint.position , Quaternion.identity ) ; player.GetComponent < FireFighterHeroController > ( ) .enabled = true ; player.GetComponent < CameraControler > ( ) .enabled = true ; player.GetComponent < CameraControler > ( ) .SetTarget ( player.transform ) ; } # region PUN Callbacks public override void OnLeftRoom ( ) { SceneManager.LoadScene ( 1 ) ; } # endregion # region Custom Methods public void OnClickLeaveRoom_Btn ( ) { PhotonNetwork.LeaveRoom ( ) ; } # endregion } public class CameraControler : MonoBehaviour { private Transform target ; public GameObject camera ; public Vector3 offset ; public void SetTarget ( Transform target ) { this.target = target ; } public void LateUpdate ( ) { camera.transform.position = target.position + offset ; } } public class GameManager : MonoBehaviourPunCallbacks { public Transform spawnPoint ; public void Start ( ) { GameObject player = PhotonNetwork.Instantiate ( `` Player '' , spawnPoint.position , Quaternion.identity ) ; if ( ! player.GetPhotonView ( ) .IsMine ) return ; player.GetComponent < FireFighterHeroController > ( ) .enabled = true ; player.transform.Find ( `` Camera '' ) .gameObject.GetComponent < CameraControler > ( ) .enabled = true ; player.transform.Find ( `` Camera '' ) .gameObject.GetComponent < CameraControler > ( ) .SetTarget ( player.transform ) ; player.transform.Find ( `` Camera '' ) .gameObject.SetActive ( true ) ; } } public class CameraControler : MonoBehaviour { private Transform target ; public Vector3 offset ; public void SetTarget ( Transform target ) { this.target = target ; } public void LateUpdate ( ) { gameObject.transform.position = target.position + offset ; } }"
"public MainWindow ( ) { InitializeComponent ( ) ; this.Title = Properties.Resources.String1 ; } //In order to begin building localizable applications , set // < UICulture > CultureYouAreCodingWith < /UICulture > in your .csproj file//inside a < PropertyGroup > . For example , if you are using US english//in your source files , set the < UICulture > to en-US . Then uncomment//the NeutralResourceLanguage attribute below . Update the `` en-US '' in//the line below to match the UICulture setting in the project file.// [ assembly : NeutralResourcesLanguage ( `` en-US '' , UltimateResourceFallbackLocation.Satellite ) ] [ assembly : NeutralResourcesLanguage ( `` en-US '' , UltimateResourceFallbackLocation.Satellite ) ]"
"SELECT * FROM MyTable WHERE id IN ( 1 , 2 , 3 , 4 , 5 ) if ( variable in ( 1 , 2 , 3 , 4 , 5 ) ) { }"
object [ ] array = new object [ 1 ] ; for ( int i = 0 ; i < 100000 ; i++ ) { ICollection < object > col = ( ICollection < object > ) array ; col.Contains ( null ) ; } object [ ] array = new object [ 1 ] ; for ( int i = 0 ; i < 100000 ; i++ ) { ICollection < object > col = array ; col.Contains ( null ) ; }
"using ( MyDisposable firstDisposable = new MyDisposable ( ) , secondDisposable = new MyDisposable ( ) ) { // do something } using ( var myDisposables = GetMyDisposables ( ) ) { foreach ( var myDisposable in myDisposables ) { DoSomething ( myDisposable ) ; DoSomethingElse ( myDisposable ) ; } } static List < MyDisposable > GetMyDisposables ( ) { throw new NotImplementedException ( ) ; // return a list of MyDisposable objects } static void DoSomething ( MyDisposable withMyDisposable ) { // something } static void DoSomethingElse ( MyDisposable withMyDisposable ) { // something else }"
"static void Main ( string [ ] args ) { if ( args.Length > 0 ) { Console.WriteLine ( args [ 0 ] ) ; } while ( true ) { string incoming = Console.ReadLine ( ) ; string outgoing = `` received : `` + incoming ; Console.WriteLine ( outgoing ) ; if ( incoming == `` exit '' ) return ; } } private function init ( e : Event=null ) : void { this.removeEventListener ( Event.ADDED_TO_STAGE , init ) ; NativeApplication.nativeApplication.addEventListener ( Event.EXITING , onAppClose ) ; var info : NativeProcessStartupInfo = new NativeProcessStartupInfo ( ) ; var file : File = File.applicationDirectory.resolvePath ( `` test.exe '' ) ; info.executable = file ; process = new NativeProcess ( ) ; info.arguments.push ( `` native process started '' ) ; process.addEventListener ( ProgressEvent.STANDARD_OUTPUT_DATA , onOutputData ) ; process.addEventListener ( ProgressEvent.STANDARD_ERROR_DATA , onErrorData ) ; process.addEventListener ( ProgressEvent.STANDARD_INPUT_PROGRESS , onInputProgress ) ; process.addEventListener ( Event.STANDARD_OUTPUT_CLOSE , onOutputClose ) ; process.addEventListener ( Event.STANDARD_ERROR_CLOSE , onErrorClose ) ; process.addEventListener ( IOErrorEvent.STANDARD_ERROR_IO_ERROR , onIOError ) ; process.addEventListener ( IOErrorEvent.STANDARD_INPUT_IO_ERROR , onIOError ) ; process.addEventListener ( IOErrorEvent.STANDARD_OUTPUT_IO_ERROR , onIOError ) ; stage.addEventListener ( KeyboardEvent.KEY_UP , onKeyUp ) ; process.start ( info ) ; } private function onKeyUp ( e : KeyboardEvent ) : void { if ( e.keyCode == Keyboard.ESCAPE ) process.standardInput.writeUTFBytes ( `` exit\n '' ) ; else { var msg : String = e.keyCode + `` \n '' ; process.standardInput.writeUTFBytes ( msg ) ; } } private function onOutputData ( e : ProgressEvent ) : void { var data : String = process.standardOutput.readUTFBytes ( process.standardOutput.bytesAvailable ) ; trace ( `` Got : `` , data ) ; }"
"using System.Drawing ; using System.IO ; class GetPixel { public static void Main ( string [ ] args ) { foreach ( string s in args ) { if ( File.Exists ( s ) ) { var image = new Bitmap ( s ) ; Color p = image.GetPixel ( 0 , 0 ) ; System.Console.WriteLine ( `` R : { 0 } G : { 1 } B : { 2 } '' , p.R , p.G , p.B ) ; } } } } class ConfigChecker { public static void Main ( ) { string drink = `` Nothing '' ; try { System.Configuration.AppSettingsReader configurationAppSettings = new System.Configuration.AppSettingsReader ( ) ; drink = ( ( string ) ( configurationAppSettings.GetValue ( `` Drink '' , typeof ( string ) ) ) ) ; } catch ( System.Exception ) { } System.Console.WriteLine ( `` Drink : `` + drink ) ; } // Main } // class ConfigChecker Wbmp2Png IMG_0001.wbmp IMG_0002.wbmp IMG_0003.wbmp"
"class Triangle { public double Base { get ; set ; } public double Height { get ; set ; } public double Area { get { return ( Base * Height ) / 2 ; } } } class Triangle { public Triangle ( double b , double h ) { Base = b ; Height = h ; } public double Base { get ; set ; } public double Height { get ; set ; } public double Area { get { return ( Base * Height ) / 2 ; } } }"
"private void LoadDetails ( int index ) { try { connection.Open ( ) ; command = new OleDbCommand ( `` SELECT * from tagsTbl WHERE ID= @ 1 '' , connection ) ; command.Parameters.AddWithValue ( `` @ 1 '' , index ) ; reader = command.ExecuteReader ( ) ; while ( reader.Read ( ) ) { nameTextBox.Text = reader [ `` leName '' ] .ToString ( ) ; altTextBox.Text = reader [ `` altName '' ] .ToString ( ) ; unitTextBox.Text = reader [ `` currUnit '' ] .ToString ( ) ; tagTextBox.Text = reader [ `` currTag '' ] .ToString ( ) ; oldTextBox.Text = reader [ `` oldTag '' ] .ToString ( ) ; descTextBox.Text = reader [ `` currDesc '' ] .ToString ( ) ; } connection.Close ( ) ; } catch { connection.Close ( ) ; MessageBox.Show ( errortxt ) ; Application.Exit ( ) ; } } private void testWin_Load ( object sender , EventArgs e ) { loadFileDialog.ShowDialog ( ) ; connection = new OleDbConnection ( strConn ) ; if ( ! blnLoaded ) Application.Exit ( ) ; else { errortxt = `` Attempt to establish connection to database failed ! `` ; LoadDetails ( testInt ) ; this.Show ( ) ; } } private void loadFileDialog_FileOk ( object sender , CancelEventArgs e ) { strConnPath = loadFileDialog.FileName ; strConn = @ '' Provider=Microsoft.ACE.OLEDB.12.0 ; Data Source= '' + strConnPath ; blnLoaded = true ; } private void prevButton_Click ( object sender , EventArgs e ) { if ( testInt > 1 ) testInt -- ; LoadDetails ( testInt ) ; gotoNumericUpDown.Value = testInt ; } private void nextButton_Click ( object sender , EventArgs e ) { testInt++ ; errortxt = `` You can not go higher than that ! `` ; try { LoadDetails ( testInt ) ; gotoNumericUpDown.Value = testInt ; } catch { testInt -- ; } } private void gotoButton_Click ( object sender , EventArgs e ) { try { testInt = ( int ) gotoNumericUpDown.Value ; LoadDetails ( testInt ) ; } catch { } } private void nameSearchButton_Click ( object sender , EventArgs e ) { try { connection.Open ( ) ; command = new OleDbCommand ( `` SELECT * from tagsTbl WHERE leName= ' @ name ' '' , connection ) ; command.CommandType = CommandType.Text ; command.Parameters.AddWithValue ( `` @ name '' , namesTextBox.Text ) ; reader = command.ExecuteReader ( ) ; while ( reader.Read ( ) ) { nameTextBox.Text = reader [ `` leName '' ] .ToString ( ) ; altTextBox.Text = reader [ `` altName '' ] .ToString ( ) ; unitTextBox.Text = reader [ `` currUnit '' ] .ToString ( ) ; tagTextBox.Text = reader [ `` currTag '' ] .ToString ( ) ; oldTextBox.Text = reader [ `` oldTag '' ] .ToString ( ) ; descTextBox.Text = reader [ `` currDesc '' ] .ToString ( ) ; } connection.Close ( ) ; } catch { connection.Close ( ) ; } } private void tagSearchButton_Click ( object sender , EventArgs e ) { try { command = new OleDbCommand ( `` SELECT * from tagsTbl WHERE currTag= ' @ 1 ' '' , connection ) ; command.Parameters.AddWithValue ( `` @ 1 '' , tagsTextBox.Text ) ; connection.Open ( ) ; MessageBox.Show ( command.CommandText ) ; reader = command.ExecuteReader ( ) ; while ( reader.Read ( ) ) { nameTextBox.Text = reader [ `` leName '' ] .ToString ( ) ; altTextBox.Text = reader [ `` altName '' ] .ToString ( ) ; unitTextBox.Text = reader [ `` currUnit '' ] .ToString ( ) ; tagTextBox.Text = reader [ `` currTag '' ] .ToString ( ) ; oldTextBox.Text = reader [ `` oldTag '' ] .ToString ( ) ; descTextBox.Text = reader [ `` currDesc '' ] .ToString ( ) ; } connection.Close ( ) ; } catch { connection.Close ( ) ; } } private string strConnPath = `` '' ; private string strConn = `` '' ; private bool blnLoaded = false ; OleDbConnection connection ; OleDbDataReader reader ; OleDbCommand command ; private string errortxt = `` '' ; int testInt = 1 ; command = new OleDbCommand ( `` SELECT * from tagsTbl WHERE leName= ' @ name ' '' , connection ) ; command.Parameters.AddWithValue ( `` @ name '' , namesTextBox.Text ) ;"
"'//VB.NETDim product1 = New With { .Name = `` paperclips '' , .Price = 1.29 } Dim product2 = New With { .Name = `` paperclips '' , .Price = 1.29 } 'compare product1 and product2 and you get false returned.Dim product3 = New With { Key .Name = `` paperclips '' , Key .Price = 1.29 } Dim product4 = New With { Key .Name = `` paperclips '' , Key .Price = 1.29 } 'compare product3 and product4 and you get true returned . '//C # var product5 = new { Name = `` paperclips '' , Price = 1.29 } ; var product6 = new { Name = `` paperclips '' , Price = 1.29 } ; //compare products 5 and 6 and you get true ."
public class Agent { public virtual List < AgentGroup > AgentGroups { get ; set ; } } public class AgentGroup { public virtual List < Agent > Agents { get ; set ; } } List < AgentGroup > allGroups = context.AgentGroups.Include ( `` Agents '' ) .Include ( `` Agents.AgentGroups '' ) .ToList ( ) ;
var result = from c1 in a1 group c1 by c1.name into GroupResult select ...
"string [ ] source = { `` 1 '' , `` A '' , `` B '' } ; var sourceObjects = Array.ConvertAll ( source , c = > new Source ( c ) ) .ToArray ( ) ;"
class Item { ... } class Items : List < Item > { ... } class MyClass { public string Name { get ; set ; } public Items MyItems { get ; set ; } } < MyClass > < Name > string < /Name > < ItemValues > < ItemValue > < /ItemValue > < ItemValue > < /ItemValue > < ItemValue > < /ItemValue > < /ItemValues > < /MyClass >
class Program { static void Main ( string [ ] args ) { First.Write ( ) ; Second.Write ( ) ; } } static class First { public static int [ ] firstArray = new int [ 20 ] ; public static int [ ] secondArray = Second.secondArray ; public static void Write ( ) { Console.WriteLine ( firstArray.ToString ( ) ) ; Console.WriteLine ( secondArray.ToString ( ) ) ; } } static class Second { public static int [ ] firstArray = First.firstArray ; public static int [ ] secondArray = new int [ 30 ] ; public static void Write ( ) { Console.WriteLine ( firstArray.ToString ( ) ) ; Console.WriteLine ( secondArray.ToString ( ) ) ; } }
SqlConnection c = new SqlConnection ( @ '' ... '' ) ; try { c.Open ( ) ; ... } finally { if ( c ! = null ) // < == check for null c.Dispose ( ) ; } L_0024 : ldloc.1 L_0025 : ldnull L_0026 : ceq L_0028 : stloc.s CS $ 4 $ 0000L_002a : ldloc.s CS $ 4 $ 0000L_002c : brtrue.s L_0035L_002e : ldloc.1 L_002f : callvirt instance void [ mscorlib ] System.IDisposable : :Dispose ( ) L_0034 : nop L_0035 : endfinally
object someObject = new object ( ) ; List < object > listA = new List < object > ( ) ; listA.Add ( new int ( ) ) ; object item = listA.Concat ( new object [ ] { ( object ) new float ( ) } ) .FirstOrDefault ( ) ; [ 0 ] int [ 1 ] float
"var foo = new Foo { Bar = null , Baz = new Baz { Bap = null , Bork = null , Help = new PweaseHelp { Korben = null , Dallas = null , Multipass = null } , Me = new ClearlyMyAbilityToUnderstandResharperSettingsIs ( null ) , } } ; var foo = new Foo { Bar = null , Baz = new Baz { Bap = null , Bork = null , Help = new PweaseHelp { Korben = null , Dallas = null , Multipass = null } , Me = new ClearlyMyAbilityToUnderstandResharperSettingsIs ( null ) , } } ; < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER/ @ EntryValue '' > False < /s : Boolean > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/ANONYMOUS_METHOD_DECLARATION_BRACES/ @ EntryValue '' > NEXT_LINE < /s : String > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/CASE_BLOCK_BRACES/ @ EntryValue '' > NEXT_LINE < /s : String > < s : Int64 x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/CONTINUOUS_INDENT_MULTIPLIER/ @ EntryValue '' > 1 < /s : Int64 > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/EMPTY_BLOCK_STYLE/ @ EntryValue '' > TOGETHER_SAME_LINE < /s : String > < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_ANONYMOUS_METHOD_BLOCK/ @ EntryValue '' > True < /s : Boolean > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/INITIALIZER_BRACES/ @ EntryValue '' > NEXT_LINE < /s : String > < s : Int64 x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_CODE/ @ EntryValue '' > 1 < /s : Int64 > < s : Int64 x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_DECLARATIONS/ @ EntryValue '' > 1 < /s : Int64 > < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/LINE_FEED_AT_FILE_END/ @ EntryValue '' > True < /s : Boolean > < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_AFTER_TYPECAST_PARENTHESES/ @ EntryValue '' > False < /s : Boolean > < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_TRAILING_COMMENT/ @ EntryValue '' > True < /s : Boolean > < s : Boolean x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES/ @ EntryValue '' > True < /s : Boolean > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ARGUMENTS_STYLE/ @ EntryValue '' > CHOP_IF_LONG < /s : String > < s : Int64 x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LIMIT/ @ EntryValue '' > 150 < /s : Int64 > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_OBJECT_AND_COLLECTION_INITIALIZER_STYLE/ @ EntryValue '' > CHOP_IF_LONG < /s : String > < s : String x : Key= '' /Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_PARAMETERS_STYLE/ @ EntryValue '' > CHOP_IF_LONG < /s : String >"
"public class Mapper < T1 , T2 > : IMapper < T1 , T2 > , IMapper < T2 , T1 > { /* implementation for IMapper < T1 , T2 > here . */ /* implementation for IMapper < T2 , T1 > here . */ } public class Mapper < T1 , T2 > : MapperBase < T1 , T2 > , IMapper < T1 , T2 > { /* implementation for IMapper < T1 , T2 > here . */ } public class MapperBase < T1 , T2 > : IMapper < T2 , T1 > { /* implementation for IMapper < T2 , T1 > here . */ }"
"container.Register ( Component .For < MainWindowViewModel > ( ) .ImplementedBy < MainWindowViewModel > ( ) .LifeStyle.Transient .OnCreate ( ( kernel , thisType ) = > kernel.Resolve < IEventAggregator > ( ) .Subscribe ( thisType ) ) ) ; public class MainWindowViewModel : IHandle < SomeMessage > { private readonly FooViewModel _fooViewModel ; private readonly IEventAggregator _eventAggregator ; public MainWindowViewModel ( FooViewModel fooViewModel , IEventAggregator eventAggregator ) { _fooViewModel = fooViewModel ; _eventAggregator = eventAggregator ; //_eventAggregator.Subscribe ( this ) ; _fooViewModel.InvokeEvent ( ) ; } public void Handle ( SomeMessage message ) { Console.WriteLine ( `` Received message with text : { 0 } '' , message.Text ) ; } } public class EventAggregatorFacility : AbstractFacility { protected override void Init ( ) { Kernel.DependencyResolving += Kernel_DependencyResolving ; } private void Kernel_DependencyResolving ( ComponentModel client , DependencyModel model , object dependency ) { if ( typeof ( IHandle ) .IsAssignableFrom ( client.Implementation ) ) { var aggregator = Kernel.Resolve < IEventAggregator > ( ) ; aggregator.Subscribe ( client.Implementation ) ; } } }"
private async Task < string > BadAssAsync ( ) { HttpClient client = new HttpClient ( ) ; WriteInfo ( `` BEFORE AWAIT '' ) ; var response = await client.GetAsync ( `` http : //google.com '' ) ; WriteInfo ( `` AFTER AWAIT '' ) ; string content = await response.Content.ReadAsStringAsync ( ) ; WriteInfo ( `` AFTER SECOND AWAIT '' ) ; return content ; } private T Wait1 < T > ( Func < Task < T > > taskGen ) { return Task.Run ( ( ) = > { WriteInfo ( `` RUN '' ) ; var task = taskGen ( ) ; return task.Result ; } ) .Result ; } *** ( worked fine ) START : TID : 17 ; SCTX : System.Web.AspNetSynchronizationContext ; SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerRUN : TID : 45 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerBEFORE AWAIT : TID : 45 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerAFTER AWAIT : TID : 37 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerAFTER SECOND AWAIT : TID : 37 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskScheduler*** ( deadlocked ) START : TID : 48 ; SCTX : System.Web.AspNetSynchronizationContext ; SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerRUN : TID : 48 ; SCTX : System.Web.AspNetSynchronizationContext ; SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerBEFORE AWAIT : TID : 48 ; SCTX : System.Web.AspNetSynchronizationContext ; SCHEDULER : System.Threading.Tasks.ThreadPoolTaskScheduler static void Main ( string [ ] args ) { WriteInfo ( `` \n***\nBASE '' ) ; var t1 = Task.Run ( ( ) = > { WriteInfo ( `` T1 '' ) ; Task t2 = Task.Run ( ( ) = > { WriteInfo ( `` T2 '' ) ; } ) ; t2.Wait ( ) ; } ) ; t1.Wait ( ) ; } BASE : TID : 1 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerT1 : TID : 3 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskSchedulerT2 : TID : 3 ; SCTX : & ltnull > SCHEDULER : System.Threading.Tasks.ThreadPoolTaskScheduler
"< bindings > < customBinding > < binding name= '' Example_TestBinding '' > < security defaultAlgorithmSuite= '' TripleDesRsa15 '' authenticationMode= '' MutualCertificate '' requireDerivedKeys= '' false '' includeTimestamp= '' false '' messageProtectionOrder= '' SignBeforeEncrypt '' messageSecurityVersion= '' WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 '' requireSignatureConfirmation= '' false '' > < localClientSettings detectReplays= '' true '' / > < localServiceSettings detectReplays= '' true '' / > < /security > < textMessageEncoding messageVersion= '' Soap11 '' / > < httpsTransport authenticationScheme= '' Basic '' manualAddressing= '' false '' maxReceivedMessageSize= '' 524288000 '' transferMode= '' Buffered '' / > < /binding > < /customBinding > < /bindings > < client > < endpoint address= '' https : //blabla.hana.ondemand.com/Example_Test '' binding= '' customBinding '' bindingConfiguration= '' Example_TestBinding '' contract= '' WebServiceTest.Example_Test '' name= '' Example_Test '' / > < /client > var client = new Example_TestClient ( ) ; client.ClientCredentials.UserName.UserName = `` user '' ; client.ClientCredentials.UserName.Password = `` pass '' ; X509Certificate2 certClient = new X509Certificate2 ( certClientPath , certClientPassword ) ; client.ClientCredentials.ClientCertificate.Certificate = certClient ; X509Certificate2 certService= new X509Certificate2 ( certServicePath ) ; client.ClientCredentials.ServiceCertificate.DefaultCertificate = certService ; var response = client.Example_Test ( requestObj ) ; `` The EncryptedKey clause was not wrapped with the required encryption token 'System.IdentityModel.Tokens.X509SecurityToken ' . '' at System.ServiceModel.Security.WSSecurityJan2004.WrappedKeyTokenEntry.CreateWrappedKeyToken ( String id , String encryptionMethod , String carriedKeyName , SecurityKeyIdentifier unwrappingTokenIdentifier , Byte [ ] wrappedKey , SecurityTokenResolver tokenResolver ) \r\n ... The security protocol can not verify the incoming message public override Message ReadMessage ( ArraySegment < byte > buffer , BufferManager bufferManager , string contentType ) { var msgContents = new byte [ buffer.Count ] ; Array.Copy ( buffer.Array , buffer.Offset , msgContents , 0 , msgContents.Length ) ; bufferManager.ReturnBuffer ( buffer.Array ) ; var message = Encoding.UTF8.GetString ( msgContents ) ; //return ReadMessage ( Decryptor.DecryptBody ( message ) , int.MaxValue ) ; var stream = new MemoryStream ( Encoding.UTF8.GetBytes ( message ) ) ; return ReadMessage ( stream , int.MaxValue ) ; } public static MemoryStream DecryptBody ( string xmlResponse ) { X509Certificate2 cert = new X509Certificate2 ( clientCertPath , certPass ) ; SymmetricAlgorithm algorithm = new TripleDESCryptoServiceProvider ( ) ; XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc.PreserveWhitespace = true ; xmlDoc.LoadXml ( xmlResponse ) ; XmlElement encryptedKeyElement = xmlDoc.GetElementsByTagName ( `` EncryptedKey '' , XmlEncryptionStrings.Namespace ) [ 0 ] as XmlElement ; XmlElement keyCipherValueElement = encryptedKeyElement.GetElementsByTagName ( `` CipherValue '' , XmlEncryptionStrings.Namespace ) [ 0 ] as XmlElement ; XmlElement encryptedElement = xmlDoc.GetElementsByTagName ( `` EncryptedData '' , XmlEncryptionStrings.Namespace ) [ 0 ] as XmlElement ; var key = Convert.FromBase64String ( keyCipherValueElement.InnerText ) ; EncryptedData edElement = new EncryptedData ( ) ; edElement.LoadXml ( encryptedElement ) ; EncryptedXml exml = new EncryptedXml ( ) ; algorithm.Key = ( cert.PrivateKey as RSACryptoServiceProvider ) .Decrypt ( key , false ) ; byte [ ] rgbOutput = exml.DecryptData ( edElement , algorithm ) ; exml.ReplaceData ( encryptedElement , rgbOutput ) ; //var body = Encoding.UTF8.GetString ( rgbOutput ) ; MemoryStream ms = new MemoryStream ( ) ; xmlDoc.Save ( ms ) ; return ms ; }"
"class FileReaderWriter : IFileReaderWriter , IDisposable { private readonly string _file ; private readonly Stream _io ; public FileReaderWriter ( string path ) { _io = File.Open ( _file = Check.NotEmpty ( path ) , FileMode.OpenOrCreate , FileAccess.ReadWrite , FileShare.None ) ; } public void Dispose ( ) { _io.Dispose ( ) ; } ... }"
"//i need this route but it 's not workroutes.MapRoute ( `` GetContent '' , '' { sefLink } / { contentId } .html '' , new { controller = `` Content '' , action = `` GetContent '' } , new [ ] { `` CanEcomm.Controllers '' } ) ; //this route is working . i just remove `` .html '' extensionroutes.MapRoute ( `` GetContent '' , `` { sefLink } / { contentId } '' , new { controller = `` Content '' , action = `` GetContent '' } , new [ ] { `` CanEcomm.Controllers '' } ) ;"
"Deployment.Current.Dispatcher.BeginInvoke ( ( ) = > { var customBG = new ImageUserControl ( ) ; customBG.Measure ( new Size ( 480 , 800 ) ) ; var bmp = new WriteableBitmap ( 480 , 800 ) ; //Thrown the **OutOfMemoryException** bmp.Render ( customBG , null ) ; bmp.Invalidate ( ) ; using ( var isf = IsolatedStorageFile.GetUserStoreForApplication ( ) ) { filename = `` /Shared/NewBackGround.jpg '' ; using ( var stream = isf.OpenFile ( filename , System.IO.FileMode.OpenOrCreate ) ) { bmp.SaveJpeg ( stream , 480 , 800 , 0 , 100 ) ; } } } < UserControl blabla ... d : DesignHeight= '' 800 '' d : DesignWidth= '' 480 '' > < Grid x : Name= '' LayoutRoot '' > < Image x : Name= '' nBackgroundSource '' Stretch= '' UniformToFill '' / > //blabla ... < /Grid > < /UserControl > public ImageUserControl ( ) { InitializeComponent ( ) ; LupdateUI ( ) ; } public void LupdateUI ( ) { DataInfo _dataInfo = new DataInfo ( ) ; LayoutRoot.DataContext = _dataInfo ; try { using ( var isoStore = IsolatedStorageFile.GetUserStoreForApplication ( ) ) { using ( var isoFileStream = isoStore.OpenFile ( `` /Shared/BackgroundImage.jpg '' , FileMode.Open , FileAccess.Read ) ) { BitmapImage bi = new BitmapImage ( ) ; bi.SetSource ( isoFileStream ) ; nBackgroundSource.Source = bi ; } } } catch ( Exception ) { } } public class DataInfo { public string Wind1 { get { return GetValueOrDefault < string > ( `` Wind1 '' , `` N/A '' ) ; } set { if ( AddOrUpdateValue ( `` Wind1 '' , value ) ) { Save ( ) ; } } } public string Wind2 { get { return GetValueOrDefault < string > ( `` Wind2 '' , `` N/A '' ) ; } set { if ( AddOrUpdateValue ( `` Wind2 '' , value ) ) { Save ( ) ; } } } //blabla ... }"
XmlDocument xmlResults = new XmlDocument ( ) ; xmlResults.LoadXml ( xml ) ; // XML is a string containing the XML source shown belowXmlNodeList results = xmlResults.SelectNodes ( `` //Document '' ) ; < ResponsePacket xmlns= '' urn : Microsoft.Search.Response '' > < Response domain= '' QDomain '' > < Range > < StartAt > 1 < /StartAt > < Count > 2 < /Count > < TotalAvailable > 2 < /TotalAvailable > < Results > < Document relevance= '' 126 '' xmlns= '' urn : Microsoft.Search.Response.Document '' > < Title > Example 1.doc < /Title > < Action > < LinkUrl size= '' 32256 '' fileExt= '' doc '' > http : //hqiis99/Mercury/Mercury documents/Example 1.doc < /LinkUrl > < /Action > < Description / > < Date > 2010-08-19T14:44:56+01:00 < /Date > < /Document > < Document relevance= '' 31 '' xmlns= '' urn : Microsoft.Search.Response.Document '' > < Title > Mercury documents < /Title > < Action > < LinkUrl size= '' 0 '' fileExt= '' aspx '' > http : //hqiis99/mercury/Mercury documents/Forms/AllItems.aspx < /LinkUrl > < /Action > < Description / > < Date > 2010-08-19T14:49:39+01:00 < /Date > < /Document > < /Results > < /Range > < Status > SUCCESS < /Status > < /Response > < /ResponsePacket >
if ( IsSuccessed == true ) { // } if ( IsSuccessed ) { // }
"var lists = new List < List < int > > { new List < int > { 1 , 2 , 3 , 4 } , new List < int > { 2 , 3 , 4 , 5 , 8 } , new List < int > { 2 , 3 , 4 , 5 , 9 , 9 } , new List < int > { 2 , 3 , 3 , 4 , 9 , 10 } } ; public IEnumerable < T > GetNonShared ( this IEnumerable < IEnumerable < T > > lists ) { // ... fast algorithm here } public IEnumerable < T > GetNonShared ( this IEnumerable < IEnumerable < T > > lists ) { return list.SelectMany ( item = > item ) .Except ( lists.Aggregate ( ( a , b ) = > a.Intersect ( b ) ) ; }"
public class Photo { public int Id { get ; set ; } public string Caption { get ; set ; } public Collection < string > Tags { get ; set ; } }
"... if ( boolVariable ) { string errorText = `` Bla Bla Bla '' ; // Never used ErrorProvider.SetError ( SomeControl , `` Some Warning '' ) ; } else { string errorText = `` Acme Acme Acme '' ; // Used below ErrorProvider.SetError ( SomeControl , errorText ) ; } ..."
struct test { this { get { /*do something*/ } set { /*do something*/ } } } test tt = new test ( ) ; string asd = tt ; // intercept this and then return something else
"var catalog = new AggregateCatalog ( ) ; catalog.Catalogs.Add ( new DirectoryCatalog ( Path.Combine ( Path.GetDirectoryName ( Assembly.GetExecutingAssembly ( ) .location ) , `` Plugins '' ) ) ) ; var container = new CompositionContainer ( catalog ) ; container.ComposeParts ( this ) ; catalog.Catalogs.First ( ) .Parts.First ( ) .GetType ( ) .Assembly.FullName [ ImportMany ( typeof ( IDessertPlugin ) ] private IEnumerable < IDessertPluing > dessertPlugins ; foreach ( var plugin in dessertPlugins ) { Console.WriteLine ( Assembly.GetAssembly ( plugin.GetType ( ) ) .GetName ( ) .Version.ToString ( ) ) ; }"
"[ TestMethod ] public void StackOverflowTest ( ) { var seta = new [ ] { 10 , 20 , 30 , 40 , 50 } ; var setb = new [ ] { 45 , 45 , 100 , 200 } ; var result = Magic ( seta , setb ) ; Assert.AreEqual ( new [ ] { 40,50 } , result.SetA ) ; Assert.AreEqual ( new [ ] { 45 , 45 } , result.SetB ) ; } class MagicResult { public int [ ] SetA { get ; set ; } public int [ ] SetB { get ; set ; } } private MagicResult Magic ( int [ ] seta , int [ ] setb ) { throw new NotImplementedException ( ) ; }"
public class MyType { public void foo ( ) { try { Console.WriteLine ( `` Throw NullReferenceException ? `` ) ; string s = Console.ReadLine ( ) ; if ( s == `` Y '' ) throw new NullReferenceException ( ) ; else throw new ArgumentException ( ) ; } catch ( NullReferenceException ) { Console.WriteLine ( `` NullReferenceException was caught ! `` ) ; } finally { Console.WriteLine ( `` finally block '' ) ; } } } class Program { static void Main ( string [ ] args ) { MyType t = new MyType ( ) ; t.foo ( ) ; } }
"public class IntPtrTester { public static void TestIntPtr ( IntPtr p ) { MessageBox.Show ( `` TestIntPtr Method was Called '' ) ; } public static void TestInt ( int p ) { MessageBox.Show ( `` TestInt Method was Called '' ) ; } } // HDC dc ; // The static method in the .NET class to invoke . bstr_t bstrStaticMethodName ( L '' TestInt '' ) ; SAFEARRAY *psaStaticMethodArgs = NULL ; variant_t vtIntArg ( ( INT ) dc ) ; variant_t vtLengthRet ; ... psaStaticMethodArgs = SafeArrayCreateVector ( VT_VARIANT , 0 , 1 ) ; LONG index = 0 ; hr = SafeArrayPutElement ( psaStaticMethodArgs , & index , & vtIntArg ) ; if ( FAILED ( hr ) ) { wprintf ( L '' SafeArrayPutElement failed w/hr 0x % 08lx\n '' , hr ) ; goto Cleanup ; } // The static method in the .NET class to invoke . // HDC dc ; bstr_t bstrStaticMethodName ( L '' TestIntPtr '' ) ; SAFEARRAY *psaStaticMethodArgs = NULL ; variant_t vtIntArg ( ( INT ) dc ) ; // what do I have to write here ? variant_t vtLengthRet ; variant_t vtIntArg ( ( INT ) dc ) ; variant_t vtIntArg ( ( UINT ) dc ) ; variant_t vtIntArg ( ( long ) dc ) ; variant_t vtIntArg ( ( UINT32 ) dc ) ; variant_t vtIntArg ( ( INT32 ) dc ) ; public class Helper { public static void help ( int hdc ) { IntPtrTester.TestIntPtr ( new IntPtr ( hdc ) ) ; } } variant_t vtIntArg ( ( INT32 ) dc ) ;"
"//makes grid in picture boxprivate void drawGrid ( int numOfCells , int cellSize , Graphics gr ) { Pen p = new Pen ( Color.SteelBlue ) ; for ( int i = 0 ; i < Math.Sqrt ( numOfCells ) + 1 ; i++ ) { // Vertical gr.DrawLine ( p , i * cellSize + 300 , 200 , i * cellSize + 300 , 700 ) ; // Horizontal gr.DrawLine ( p , 300 , i * cellSize+200 , 800 , i * cellSize+200 ) ; } this.topology.SendToBack ( ) ; } //draw the center point for each cell of the grid private void drawCenters ( Graphics gr ) { for ( int j = 0 ; j < rows ; j++ ) { for ( int i = 0 ; i < columns ; i++ ) { gr.FillRectangle ( Brushes.IndianRed , cellsCenters [ 0 , i ] , cellsCenters [ 1 , j ] , 3 , 3 ) ; } } }"
"public class TestClassA { public int ? NullableIntProperty { get ; set ; } } public class TestClassB { public int NotNullableIntProperty { get ; set ; } } cfg.CreateMap < TestClassA , TestClassB > ( ) .ForMember ( dest = > dest.NotNullableIntProperty , opt = > opt.MapFrom ( src = > src.NullableIntProperty ) ) ; cfg.CreateMap < TestClassA , TestClassA > ( ) .ForMember ( dest = > dest.NullableIntProperty , opt = > opt.MapFrom ( src = > src.NullableIntProperty ) ) ; cfg.CreateMap < TestClassB , TestClassA > ( ) .ForMember ( dest = > dest.NullableIntProperty , opt = > opt.MapFrom ( src = > src.NotNullableIntProperty ) ) ; cfg.CreateMap < TestClassB , TestClassB > ( ) .ForMember ( dest = > dest.NotNullableIntProperty , opt = > opt.MapFrom ( src = > src.NotNullableIntProperty ) ) ; int ? = > intint = > int ? int = > intint ? = > int ? var testQueryableDest = testQueryableSrc.ProjectTo < ... > ( _mapper.ConfigurationProvider ) ; cfg.CreateMap < int ? , int > ( ) .ProjectUsing ( src = > src ? ? default ( int ) ) ; [ TestClass ] public class BasicTests { private readonly IMapper _mapper ; public BasicTests ( ) { var config = new MapperConfiguration ( cfg = > { cfg.CreateMap < int ? , int > ( ) .ProjectUsing ( src = > src ? ? default ( int ) ) ; cfg.CreateMap < TestClassA , TestClassB > ( ) .ForMember ( dest = > dest.IntProperty , opt = > opt.MapFrom ( src = > src.NullableIntProperty ) ) ; cfg.CreateMap < TestClassA , TestClassA > ( ) .ForMember ( dest = > dest.NullableIntProperty , opt = > opt.MapFrom ( src = > src.NullableIntProperty ) ) ; cfg.CreateMap < TestClassB , TestClassA > ( ) .ForMember ( dest = > dest.NullableIntProperty , opt = > opt.MapFrom ( src = > src.IntProperty ) ) ; cfg.CreateMap < TestClassB , TestClassB > ( ) .ForMember ( dest = > dest.IntProperty , opt = > opt.MapFrom ( src = > src.IntProperty ) ) ; } ) ; _mapper = new Mapper ( config ) ; } [ TestMethod ] public void CanMapNullableIntToInt ( ) { var testQueryableSource = new List < TestClassA > { new TestClassA { NullableIntProperty = null } } .AsQueryable ( ) ; var testQueryableDestination = testQueryableSource.ProjectTo < TestClassB > ( _mapper.ConfigurationProvider ) ; } [ TestMethod ] public void CanMapNullableIntToNullableInt ( ) { var testQueryableSource = new List < TestClassA > { new TestClassA { NullableIntProperty = null } } .AsQueryable ( ) ; var testQueryableDestination = testQueryableSource.ProjectTo < TestClassA > ( _mapper.ConfigurationProvider ) ; } [ TestMethod ] public void CanMapIntToNullableInt ( ) { var testQueryableSource = new List < TestClassB > { new TestClassB { IntProperty = 0 } } .AsQueryable ( ) ; var testQueryableDestination = testQueryableSource.ProjectTo < TestClassA > ( _mapper.ConfigurationProvider ) ; } [ TestMethod ] public void CanMapIntToInt ( ) { var testQueryableSource = new List < TestClassB > { new TestClassB { IntProperty = 0 } } .AsQueryable ( ) ; var testQueryableDestination = testQueryableSource.ProjectTo < TestClassB > ( _mapper.ConfigurationProvider ) ; } }"
"public class AsyncTests { public void TestMethod1 ( ) { var tasks = new List < Task > ( ) ; for ( var i = 0 ; i < 100 ; i++ ) { var task = new Task ( Action ) ; tasks.Add ( task ) ; task.Start ( ) ; } Task.WaitAll ( tasks.ToArray ( ) ) ; } public void TestMethod2 ( ) { var threads = new List < Thread > ( ) ; for ( var i = 0 ; i < 100 ; i++ ) { var thread = new Thread ( Action ) ; threads.Add ( thread ) ; thread.Start ( ) ; } foreach ( var thread in threads ) { thread.Join ( ) ; } } private void Action ( ) { var task1 = LongRunningOperationAsync ( ) ; var task2 = LongRunningOperationAsync ( ) ; var task3 = LongRunningOperationAsync ( ) ; var task4 = LongRunningOperationAsync ( ) ; var task5 = LongRunningOperationAsync ( ) ; Task [ ] tasks = { task1 , task2 , task3 , task4 , task5 } ; Task.WaitAll ( tasks ) ; } public async Task < int > LongRunningOperationAsync ( ) { var sw = Stopwatch.StartNew ( ) ; await Task.Delay ( 500 ) ; Debug.WriteLine ( `` Completed at { 0 } , took { 1 } ms '' , DateTime.Now , sw.Elapsed.TotalMilliseconds ) ; return 1 ; } }"
"[ TestCase , WithinTransaction ] public async Task Patch_EditJob_Success ( ) { var testJob = Data.SealingJob ; var requestData = new Job ( ) { ID = testJob.ID , Name = `` UPDATED '' } ; var apiResponse = await _controller.EditJob ( testJob.ID , requestData ) ; Assert.IsInstanceOf < StatusCodeResult > ( apiResponse ) ; Assert.AreEqual ( `` UPDATED '' , testJob.Name ) ; } [ TestCase , WithinTransaction ] public async Task Post_RejectJob_Success ( ) { var rejectedJob = Data.SealingJob ; var apiResponse = await _controller.RejectJob ( rejectedJob.ID ) ; Assert.IsInstanceOf < OkResult > ( apiResponse ) ; Assert.IsNull ( rejectedJob.Organizations ) ; Assert.AreEqual ( rejectedJob.JobStatus , JobStatus.OnHold ) ; _fakeEmailSender.Verify ( emailSender = > emailSender.SendEmail ( rejectedJob.Creator.Email , It.Is < string > ( emailBody = > emailBody.Contains ( rejectedJob.Name ) ) , It.IsAny < string > ( ) ) , Times.Once ( ) ) ; } [ HttpPatch ] [ Route ( `` editjob/ { id } '' ) ] public async Task < IHttpActionResult > EditJob ( int id , Job job ) { if ( ! ModelState.IsValid ) { return BadRequest ( ModelState ) ; } if ( id ! = job.ID ) { return BadRequest ( ) ; } Job existingJob = await db.Jobs .Include ( databaseJob = > databaseJob.Regions ) .FirstOrDefaultAsync ( databaseJob = > databaseJob.ID == id ) ; existingJob.Name = job.Name ; // For each Region find if it already exists in the database // If it does , use that Region , if not one will be created for ( var i = 0 ; i < job.Regions.Count ; i++ ) { var regionId = job.Regions [ i ] .ID ; var foundRegion = db.Regions.FirstOrDefault ( databaseRegion = > databaseRegion.ID == regionId ) ; if ( foundRegion ! = null ) { existingJob.Regions [ i ] = foundRegion ; db.Entry ( existingJob.Regions [ i ] ) .State = EntityState.Unchanged ; } } existingJob.JobType = job.JobType ; existingJob.DesignCode = job.DesignCode ; existingJob.DesignProgram = job.DesignProgram ; existingJob.JobStatus = job.JobStatus ; existingJob.JobPriority = job.JobPriority ; existingJob.LotNumber = job.LotNumber ; existingJob.Address = job.Address ; existingJob.City = job.City ; existingJob.Subdivision = job.Subdivision ; existingJob.Model = job.Model ; existingJob.BuildingDesignerName = job.BuildingDesignerName ; existingJob.BuildingDesignerAddress = job.BuildingDesignerAddress ; existingJob.BuildingDesignerCity = job.BuildingDesignerCity ; existingJob.BuildingDesignerState = job.BuildingDesignerState ; existingJob.BuildingDesignerLicenseNumber = job.BuildingDesignerLicenseNumber ; existingJob.WindCode = job.WindCode ; existingJob.WindSpeed = job.WindSpeed ; existingJob.WindExposureCategory = job.WindExposureCategory ; existingJob.MeanRoofHeight = job.MeanRoofHeight ; existingJob.RoofLoad = job.RoofLoad ; existingJob.FloorLoad = job.FloorLoad ; existingJob.CustomerName = job.CustomerName ; try { await db.SaveChangesAsync ( ) ; } catch ( DbUpdateConcurrencyException ) { if ( ! JobExists ( id ) ) { return NotFound ( ) ; } else { throw ; } } return StatusCode ( HttpStatusCode.NoContent ) ; } [ HttpPost ] [ Route ( `` { id } /reject '' ) ] public async Task < IHttpActionResult > RejectJob ( int id ) { var organizations = await db.Organizations .Include ( databaseOrganization = > databaseOrganization.Jobs ) .ToListAsync ( ) ; // Remove job from being shared with organizations foreach ( var organization in organizations ) { foreach ( var organizationJob in organization.Jobs ) { if ( organizationJob.ID == id ) { organization.Jobs.Remove ( organizationJob ) ; } } } var existingJob = await db.Jobs.FindAsync ( id ) ; existingJob.JobStatus = JobStatus.OnHold ; await db.SaveChangesAsync ( ) ; await ResetJob ( id ) ; var jobPdfs = await DatabaseUtility.GetPdfsForJobAsync ( id , db ) ; var notes = `` '' ; foreach ( var jobPdf in jobPdfs ) { if ( jobPdf.Notes ! = null ) { notes += jobPdf.Name + `` : `` + jobPdf.Notes + `` \n '' ; } } // Rejection email var job = await db.Jobs .Include ( databaseJob = > databaseJob.Creator ) .SingleAsync ( databaseJob = > databaseJob.ID == id ) ; _emailSender.SendEmail ( job.Creator.Email , job.Name + `` Rejected '' , notes ) ; return Ok ( ) ; } public class Job { public Job ( ) { this.Regions = new List < Region > ( ) ; this.ComponentDesigns = new List < ComponentDesign > ( ) ; this.MetaPdfs = new List < Pdf > ( ) ; this.OpenedBy = new List < User > ( ) ; } public int ID { get ; set ; } public string Name { get ; set ; } public List < Region > Regions { get ; set ; } // etc ... } public class WithinTransactionAttribute : Attribute , ITestAction { private TransactionScope _transaction ; public ActionTargets Targets = > ActionTargets.Test ; public void BeforeTest ( ITest test ) { _transaction = new TransactionScope ( ) ; } public void AfterTest ( ITest test ) { _transaction.Dispose ( ) ; } } [ TestFixture ] public class JobsControllerTest : IntegrationTest { // ... private JobsController _controller ; private Mock < EmailSender > _fakeEmailSender ; [ SetUp ] public void SetupController ( ) { this._fakeEmailSender = new Mock < EmailSender > ( ) ; this._controller = new JobsController ( Database , _fakeEmailSender.Object ) ; } // ... } public class IntegrationTest { protected SealingServerContext Database { get ; set ; } protected TestData Data { get ; set ; } [ SetUp ] public void SetupDatabase ( ) { this.Database = new SealingServerContext ( ) ; this.Data = new TestData ( Database ) ; } // ... }"
"SecondsBetween ( StrToDateTime ( '16/02/2009 11:25:34 p.m. ' ) , StrToDateTime ( ' 1/01/2005 12:00:00 a.m. ' ) ) ; 130289133 TimeSpan span = DateTime.Parse ( `` 16/02/2009 11:25:34 p.m. '' ) .Subtract ( DateTime.Parse ( `` 1/01/2005 12:00:00 a.m. '' ) ) ; 130289134 TimeSpan span = DateTime.Parse ( `` 16/11/2011 11:25:43 p.m. '' ) .Subtract ( DateTime.Parse ( `` 1/01/2005 12:00:00 a.m. '' ) ) ; SecondsBetween ( StrToDateTime ( '16/11/2011 11:25:43 p.m. ' ) , StrToDateTime ( ' 1/01/2005 12:00:00 a.m. ' ) ) ; both give216905143 16/02/2009 - 1/01/2005 = Delphi and C # calculate a different total seconds16/11/2011 - 1/01/2005 = They calculate the same total seconds"
"SomeMethod ( ( object o ) = > { DoSomething ( ) ; } ) ; // This does not work : SomeMethod ( [ MyAttr ] ( object o ) = > { DoSomething ( ) ; } ) ; // Thos does not work , too : SomeMethod ( ( object o ) = > [ MyAttr ] { DoSomething ( ) ; } ) ;"
"FiniteSet < int > set1 = new FiniteSet < int > ( 1 , 2 , 3 ) ; FiniteSet < int > set2 = new FiniteSet < int > ( 3 , 4 , 5 ) ; Console.WriteLine ( set1 ) ; // { 1 , 2 , 3 } Console.WriteLine ( set2 ) ; // { 3 , 4 , 5 } set1.UnionWith ( set2 ) ; Console.WriteLine ( set1 ) ; // { 1 , 2 , 3 , 4 , 5 }"
class Foo { public int M ( string s ) { return 0 ; } public string M ( int s ) { return String.Empty ; } } dynamic d = // dynamicvar x = new Foo ( ) .M ( d ) ;
public string SomeMethod ( int Parameter ) { string TheString = `` '' ; TheString = SomeOtherMethod ( Parameter ) ; return TheString ; } public string SomeMethod ( int Parameter ) { return SomeOtherMethod ( Parameter ) ; }
< Label Grid.Column= '' 2 '' Grid.Row= '' 8 '' Content= '' { x : Static res : Strings.ToolPanelEditView_Validation_MandatoryField } '' > < /Label > < Label Grid.Column= '' 2 '' Grid.Row= '' 8 '' Content= '' { x : Static res : Strings.ToolPanelEditView_Validation_MandatoryField } '' > < Style > < Setter Property= '' Label.Margin '' Value= '' 0 '' / > < /Style > < /Label >
"var dict = new Dictionary < int , string > ( ) { { 0 , `` '' } , { 1 , `` '' } , { 2 , `` '' } , { 3 , `` '' } } ; var nums = dict.Keys.ToList ( ) ; Parallel.ForEach ( nums , num = > { dict [ num ] = LongTaskToGenerateString ( ) ; } ) ; return dict ;"
"private void GetData ( string tableName , SqlConnection con ) { bool wasOpen = ( con.State == ConnectionState.Open ) ; DataTable table = new DataTable ( tableName ) ; string sqlText = string.Format ( SQL_SELECT_COMMAND , tableName ) ; SqlCommand cmd = new SqlCommand ( sqlText , con ) ; if ( ! wasOpen ) { con.Open ( ) ; } table.Load ( cmd.ExecuteReader ( ) ) ; if ( ! wasOpen ) { con.Close ( ) ; } dataGridView1.DataSource = table.DefaultView ; for ( int i = 0 ; i < table.Columns.Count ; i++ ) { DataColumn tblC = table.Columns [ i ] ; DataGridViewColumn dgvC = dataGridView1.Columns [ i ] ; dgvC.ReadOnly = ( ! tblC.AllowDBNull & & tblC.AutoIncrement & & tblC.Unique ) ; } } SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='Table1 '"
"< Style x : Key= '' Test '' TargetType= '' Button '' > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' Button '' > < StackPanel > < TextBlock x : Name= '' text '' Text= '' { TemplateBinding Content } '' / > < TextBlock x : Name= '' demo '' Text= '' { Binding RelativeSource= { RelativeSource TemplatedParent } } '' / > < /StackPanel > < ControlTemplate.Triggers > < DataTrigger Binding= '' { Binding RelativeSource= { RelativeSource TemplatedParent } , Path=Content } '' > < DataTrigger.Value > < system : String > Test < /system : String > < /DataTrigger.Value > < Setter TargetName= '' test '' Property= '' Foreground '' Value= '' Red '' / > < /DataTrigger > < /ControlTemplate.Triggers > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style >"
// ====== Input ======InputStream socketInputStream = new InputStream ( socket.getInputStream ( ) ) ; // or using string instead like thisInputStream socketInputStream = new ByteArrayInputStream ( `` string '' .getBytes ( ) ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( socketInputStream ) ) ; // ====== Output ======OutputStream socketOutputStream = new OutputStream ( socket.getOutputStream ( ) ) ; // I need to write byte [ ] to the streamBufferedOutputStream out = new BufferedOutputStream ( socketOutputStream ) ;
Acme Solution -- Acme Startup Proj -- Acme Service A.csproj -- Acme Service B.csproj -- Acme Service C.csproj AcmeServiceA.exeAcmeServiceb.exeAcmeServicec.exe
".method private hidebysig instance void SetValue ( valuetype Test.TestFixture/ValueSource & thing , string 'value ' ) cil managed { .maxstack 8 L_0000 : nop L_0001 : ldarg.1 L_0002 : ldarg.2 L_0003 : call instance void Test.TestFixture/ValueSource : :set_Value ( string ) L_0008 : nop L_0009 : ret } [ Test ] public void Test_with_DynamicMethod ( ) { var sourceType = typeof ( ValueSource ) ; PropertyInfo property = sourceType.GetProperty ( `` Value '' ) ; var setter = property.GetSetMethod ( true ) ; var method = new DynamicMethod ( `` Set '' + property.Name , null , new [ ] { sourceType.MakeByRefType ( ) , typeof ( string ) } , true ) ; var gen = method.GetILGenerator ( ) ; gen.Emit ( OpCodes.Ldarg_1 ) ; // Load input to stack gen.Emit ( OpCodes.Ldarg_2 ) ; // Load value to stack gen.Emit ( OpCodes.Call , setter ) ; // Call the setter method gen.Emit ( OpCodes.Ret ) ; var result = ( SetValueDelegate ) method.CreateDelegate ( typeof ( SetValueDelegate ) ) ; var source = new ValueSource ( ) ; result ( ref source , `` hello '' ) ; source.Value.ShouldEqual ( `` hello '' ) ; } public delegate void SetValueDelegate ( ref ValueSource source , string value ) ; public struct ValueSource { public string Value { get ; set ; } }"
"< CheckBox Checked= '' ToggleButton_OnChecked '' Unchecked= '' ToggleButton_OnUnchecked '' > exe < /CheckBox > private void ToggleButton_OnChecked ( object sender , RoutedEventArgs e ) { var ext = ( ( CheckBox ) sender ) .Content.ToString ( ) ; Model.FirstRun.ExcludeExt.Add ( ext ) ; } private void ToggleButton_OnUnchecked ( object sender , RoutedEventArgs e ) { var ext = ( ( CheckBox ) sender ) .Content.ToString ( ) ; Model.FirstRun.ExcludeExt.Remove ( ext ) ; }"
System3 / Rules / Rule7 / ParameterXY / MaxAverageValue
var targetdate = Date.ToString ( `` yyyy-MM-dd '' ) ;
"^* $ using System ; using System.Text.RegularExpressions ; namespace RegexFubar { class Program { static void Main ( string [ ] args ) { Console.WriteLine ( Regex.IsMatch ( `` 127.0.0.1 '' , `` ^* $ '' ) ) ; Console.Read ( ) ; } } }"
"{ `` height '' : `` 25 '' , `` width '' : `` 25 '' } public class Image { public int height { get ; set ; } public Uri url { get ; set ; } public int width { get ; set ; } } dynamic JsonData = JObject.Parse ( JsonString ) ; Image img = JsonData.ToObject < Image > ( ) ; { `` height '' : null , `` width '' : `` 25 '' }"
12 - > 10152 - > 2001538 - > 200025000 - > 30000etc .
"using System ; using System.Threading ; using System.Runtime.CompilerServices ; namespace testRandom { class RandTest { static int NTIMES = 300 ; private long ac=0 ; public void run ( ) { // ask for random number 'ntimes ' and accumulate for ( int i=0 ; i < NTIMES ; i++ ) { ac+=Program.getRandInt ( ) ; System.Threading.Thread.Sleep ( 2 ) ; } } public double getAv ( ) { return ac/ ( double ) NTIMES ; // average } } class Program { static Random random = new Random ( ) ; static int MAXVAL = 256 ; static int NTREADS = 200 ; // [ MethodImpl ( MethodImplOptions.Synchronized ) ] public static int getRandInt ( ) { return random.Next ( MAXVAL+1 ) ; // returns a value between 0 and MAXVAL ( inclusive ) } public static void Main ( string [ ] args ) { RandTest [ ] tests = new RandTest [ NTREADS ] ; Thread [ ] threads = new Thread [ NTREADS ] ; for ( int i=0 ; i < NTREADS ; i++ ) { tests [ i ] = new RandTest ( ) ; threads [ i ] = new Thread ( new ThreadStart ( tests [ i ] .run ) ) ; } for ( int i=0 ; i < NTREADS ; i++ ) threads [ i ] .Start ( ) ; threads [ 0 ] .Join ( ) ; bool alive=true ; while ( alive ) { // make sure threads are finished alive = false ; for ( int i=0 ; i < NTREADS ; i++ ) { if ( threads [ i ] .IsAlive ) alive=true ; } } double av=0 ; for ( int i=0 ; i < NTREADS ; i++ ) av += tests [ i ] .getAv ( ) ; av /= NTREADS ; Console.WriteLine ( `` Average : { 0 , 6 : f2 } Expected : { 1 , 6 : f2 } '' , av , MAXVAL/2.0 ) ; Console.Write ( `` Press any key to continue . . . `` ) ; Console.ReadKey ( true ) ; } } } Average : 78.98 Expected:128.00Press any key to continue . . ."
"public class BadClass { public BadClass ( int ? bad = 1 ) { } } public class GoodClass { public GoodClass ( int ? good = null ) { } } let g = GoodClass ( ) let b = BadClass ( ) let asyncB = async { return BadClass ( ) } | > Async.RunSynchronously GoodClass g = new GoodClass ( null ) ; BadClass b = new BadClass ( 1 ) ; FSharpAsyncBuilder defaultAsyncBuilder = ExtraTopLevelOperators.DefaultAsyncBuilder ; FSharpAsync < BadClass > fSharpAsync = defaultAsyncBuilder.Delay < BadClass > ( new Program.asyncB @ 10 ( defaultAsyncBuilder ) ) ; FSharpAsync < BadClass > computation = fSharpAsync ; BadClass asyncB = FSharpAsync.RunSynchronously < BadClass > ( computation , null , null ) ; FSharpFunc < string [ ] , Unit > fSharpFunc = ExtraTopLevelOperators.PrintFormatLine < FSharpFunc < string [ ] , Unit > > ( new PrintfFormat < FSharpFunc < string [ ] , Unit > , TextWriter , Unit , Unit , string [ ] > ( `` % A '' ) ) ; fSharpFunc.Invoke ( argv ) ; return 0 ; .method public static int32 main ( string [ ] argv ) cil managed { .custom instance void [ FSharp.Core ] Microsoft.FSharp.Core.EntryPointAttribute : :.ctor ( ) = ( 01 00 00 00 ) // Method begins at RVA 0x2050 // Code size 92 ( 0x5c ) .maxstack 5 .entrypoint .locals init ( [ 0 ] class [ InteopTest ] InteopTest.GoodClass g , [ 1 ] valuetype [ mscorlib ] System.Nullable ` 1 < int32 > , [ 2 ] class [ InteopTest ] InteopTest.BadClass b , [ 3 ] class [ InteopTest ] InteopTest.BadClass asyncB , [ 4 ] class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync ` 1 < class [ InteopTest ] InteopTest.BadClass > , [ 5 ] class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsyncBuilder builder @ , [ 6 ] class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync ` 1 < class [ InteopTest ] InteopTest.BadClass > , [ 7 ] class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpFunc ` 2 < string [ ] , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit > , [ 8 ] string [ ] ) IL_0000 : nop IL_0001 : ldloca.s 1 IL_0003 : initobj valuetype [ mscorlib ] System.Nullable ` 1 < int32 > IL_0009 : ldloc.1 IL_000a : newobj instance void [ InteopTest ] InteopTest.GoodClass : :.ctor ( valuetype [ mscorlib ] System.Nullable ` 1 < int32 > ) IL_000f : stloc.0 IL_0010 : ldc.i4.1 IL_0011 : newobj instance void [ InteopTest ] InteopTest.BadClass : :.ctor ( valuetype [ mscorlib ] System.Nullable ` 1 < int32 > ) IL_0016 : stloc.2 IL_0017 : call class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsyncBuilder [ FSharp.Core ] Microsoft.FSharp.Core.ExtraTopLevelOperators : :get_DefaultAsyncBuilder ( ) IL_001c : stloc.s builder @ IL_001e : ldloc.s builder @ IL_0020 : ldloc.s builder @ IL_0022 : newobj instance void Program/asyncB @ 10 : :.ctor ( class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsyncBuilder ) IL_0027 : callvirt instance class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync ` 1 < ! ! 0 > [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsyncBuilder : :Delay < class [ InteopTest ] InteopTest.BadClass > ( class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpFunc ` 2 < class [ FSharp.Core ] Microsoft.FSharp.Core.Unit , class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync ` 1 < ! ! 0 > > ) IL_002c : stloc.s 4 IL_002e : ldloc.s 4 IL_0030 : stloc.s 6 IL_0032 : ldloc.s 6 IL_0034 : ldnull IL_0035 : ldnull IL_0036 : call ! ! 0 [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync : :RunSynchronously < class [ InteopTest ] InteopTest.BadClass > ( class [ FSharp.Core ] Microsoft.FSharp.Control.FSharpAsync ` 1 < ! ! 0 > , class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpOption ` 1 < int32 > , class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpOption ` 1 < valuetype [ mscorlib ] System.Threading.CancellationToken > ) IL_003b : stloc.3 IL_003c : ldstr `` % A '' IL_0041 : newobj instance void class [ FSharp.Core ] Microsoft.FSharp.Core.PrintfFormat ` 5 < class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpFunc ` 2 < string [ ] , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit > , class [ mscorlib ] System.IO.TextWriter , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit , string [ ] > : :.ctor ( string ) IL_0046 : call ! ! 0 [ FSharp.Core ] Microsoft.FSharp.Core.ExtraTopLevelOperators : :PrintFormatLine < class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpFunc ` 2 < string [ ] , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit > > ( class [ FSharp.Core ] Microsoft.FSharp.Core.PrintfFormat ` 4 < ! ! 0 , class [ mscorlib ] System.IO.TextWriter , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit > ) IL_004b : stloc.s 7 IL_004d : ldarg.0 IL_004e : stloc.s 8 IL_0050 : ldloc.s 7 IL_0052 : ldloc.s 8 IL_0054 : callvirt instance ! 1 class [ FSharp.Core ] Microsoft.FSharp.Core.FSharpFunc ` 2 < string [ ] , class [ FSharp.Core ] Microsoft.FSharp.Core.Unit > : :Invoke ( ! 0 ) IL_0059 : pop IL_005a : ldc.i4.0 IL_005b : ret } // end of method Program : :main"
"List < string > original , duplicate1 , duplicate2 , duplicate3 , duplicate4 = new List < string ( ) ; // ... some code ... .. bool isequal = duplicate4.sequenceequal ( duplicate3 ) & & duplicate3.sequenceequal ( duplicate2 ) & & duplicate2.sequenceequal ( duplicate1 ) & & duplicate1.sequenceequal ( original ) ; //can we do it better than this List < List < string > > copy = new List < List < int > > { duplicate1 , duplicate2 , duplicate3 , duplicate4 } ; bool iseqaul = ( original.All ( x = > ( copy.All ( y = > y.Remove ( x ) ) ) ) & & copy.All ( n = > n.Count == 0 ) ) ; List < HashSet < string > > copy2 =new List < HashSet < string > > { new HashSet < string > ( duplicate1 ) , new HashSet < string > ( duplicate2 ) , new HashSet < string > duplicate3 ) , new HashSet < string > ( duplicate4 ) } ; HashSet < string > origninalhashset = new HashSet < string > ( original ) ; bool eq = copy2.All ( x = > origninalhashset.SetEquals ( x ) ) ; var originallkup = original.ToLookup ( i = > i ) ; var lookuplist = new List < ILookup < int , int > > { duplicate4.ToLookup ( i= > i ) , duplicate3.ToLookup ( i= > i ) , duplicate2.ToLookup ( i= > i ) , duplicate1.ToLookup ( i= > i ) } ; bool isequal = ( lookuplist.Sum ( x = > x.Count ) == ( originallkup.Count * 4 ) ) & & ( originallkup.All ( x = > lookuplist.All ( i = > i [ x.Key ] .Count ( ) == x.Count ( ) ) ) ) ;"
"System.Globalization.PersianCalendar p = new System.Globalization.PersianCalendar ( ) ; DateTime date = new DateTime ( 2013,7,22 ) ; int year = p.GetYear ( date ) ; int month = p.GetMonth ( date ) ; int day = p.GetDayOfMonth ( date ) ; DateTime d1 = new DateTime ( year , month , day ) ;"
"public void PrintStars ( object o ) { if ( o is null ) return ; // constant pattern `` null '' if ( ! ( o is int i ) ) return ; // type pattern `` int i '' WriteLine ( new string ( '* ' , i ) ) ; }"
"public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; this.WindowState = WindowState.Maximized ; this.WindowStyle = WindowStyle.None ; this.ResizeMode = ResizeMode.NoResize ; this.Topmost = true ; this.PreviewKeyDown += ( s , e ) = > { if ( e.Key == Key.F11 ) { if ( this.WindowStyle == WindowStyle.None ) { this.WindowState = WindowState.Normal ; this.WindowStyle = WindowStyle.SingleBorderWindow ; this.ResizeMode = ResizeMode.CanResize ; this.Topmost = false ; } else { this.WindowState = WindowState.Maximized ; this.WindowStyle = WindowStyle.None ; this.ResizeMode = ResizeMode.NoResize ; this.Topmost = true ; } } } ; } }"
"public MyObject GetNewObject ( ) { var newCurrentObject = myObjectFactory.CreateNew ( DateTime.Now , `` Frank '' , 41 , secretPassword ) ; return newCurrentObject ; } public MyObject GetNewObject ( ) { return myObjectFactory.CreateNew ( DateTime.Now , `` Frank '' , 41 , secretPassword ) ; }"
float readFromFile = 0.012f ; Console.WriteLine ( `` Read from file : `` + readFromFile ) ; //prints 0.012 double forUse = readFromFile ; Console.WriteLine ( `` Converted to double directly : `` + forUse ) ; //prints 0.0120000001043081 double forUse1 = ( double ) Convert.ToDecimal ( readFromFile ) ; Console.WriteLine ( `` Converted to double via decimal : `` + forUse1 ) ; //prints 0.012
"var sortedWords = words.OrderBy ( a= > a.Length ) Func < string , TKey > keyselector"
"@ LIST_USERS dbo.LIST_USERINFO_TYPE READONLY CREATE TYPE [ dbo ] . [ LIST_USERINFO_TYPE ] AS TABLE ( [ ID_USER ] [ int ] NOT NULL , [ ID_DATA ] [ int ] NOT NULL , [ HEADER_TXT ] [ varchar ] ( 100 ) NULL ) list.Add ( new UserInfoItem { IdUser = 401 , IdData = 3 , HeaderTxt = `` '' } ) ; list.Add ( new UserInfoItem { IdUser= 402 , IdData= 2 , HeaderTxt= `` gotcha '' } ) ; list.Add ( new UserInfoItem { IdUser= 403 , IdData= 1 , HeaderTxt= `` pacific rim '' } ) ; dbConn.StoredProcedure ( sp , new { LISTA_QUESTIONARIO = DomandeRisposteList } ) ; name.DbType = OrmLiteConfig.DialectProvider.GetColumnDbType ( propertyInfo.PropertyType ) ;"
"public static class SampleDataCache { private static Dictionary < string , SampleData > cacheDict = new Dictionary < string , object > ( ) public static Get ( string key ) { if ( ! cacheDict.Contains [ key ] ) cacheDict.Add ( key , new SampleData ( ) ) ; return cacheDict [ key ] ; } }"
"var obj = { } ; // Iterate through each table row and add the editor field data to an object. $ ( '.addressRow ' ) .each ( function ( ) { var row = $ ( this ) ; var addressField = row.find ( '.addressField ' ) ; var attr = addressField.attr ( 'addressFieldName ' ) ; var val = addressField.val ( ) obj [ attr ] = val ; } ) ; $ .ajax ( { type : 'POST ' , url : '/WebServices/AddressService.asmx/SaveAddress ' , data : JSON.stringify ( obj ) , contentType : 'application/json ; charset=utf-8 ' , dataType : 'json ' , success : function ( response ) { alert ( 'address saved ' ) ; } , error : function ( response ) { alert ( 'error ' ) ; } } ) ; [ WebMethod ] public void SaveAddress ( string streetAddress1 , string streetAddress2 , string apartmentNumber , string city , strng state , string zipCode , string country ) { // save address ... } < html xmlns= '' http : //www.w3.org/1999/xhtml '' > < head runat= '' server '' > < title > Web Service Demo < /title > < style type= '' text/css '' > * { font-family : `` Segoe UI '' ; font-size : 12px ; color : # 444444 ; } # result1 { padding : 10px 0px ; } < /style > < script type= '' text/javascript '' src= '' Scripts/jquery.js '' > < /script > < script type= '' text/javascript '' > $ ( document ) .ready ( function ( ) { $ ( 'button ' ) .click ( function ( ) { // NOTE : When using JavaScript objects , the properties MUST match the C # properties EXACTLY ( casing and seplling ) . // I.e . in employee.FirstName , FirstName maps EXACTLY to the FirstName in the C # Employee object . // Create a employee object using the assigning to properties method . var employee1 = { } ; employee1.ID = 5416 ; employee1.FirstName = 'Fred ' ; employee1.LastName = 'Baker ' ; employee1.BirthDate = '07/18/1982 ' ; employee1.StreetAddress = '947 River Street ' ; employee1.City = 'Somnerville ' ; employee1.State = 'AR ' ; employee1.ZipCode = '41370 ' ; // A property has the ability to be a list or complex type . In this example , employee1 uses a list of access codes and employee2 does not . employee1.AccessCodes = new Array ( ) ; employee1.AccessCodes [ 0 ] = 512 ; employee1.AccessCodes [ 1 ] = 887 ; // Create a employee object using the associative array method . var employee2 = { ID : 3316 , FirstName : 'Jason ' , LastName : 'Masters ' , BirthDate : '11/19/1980 ' , StreetAddress : '11 South Crane Avenue ' , City : 'New York ' , State : 'NY ' , ZipCode : '01147 ' // employee2 does no use any access codes . AccessCodes in the C # web method is a list and by excluding it from the JavaScript // object , the C # code defaults the list to the null . } ; // In order to pass a complex JavaScript object to a web method as a complex type , the JavaScript object needs to be JSONified . // The name of the argument in the C # web method MUST be included here in single quotes EXACTLY ( casing and spelling ) the same way // the argument is specified in the C # code . In this example , the web method is `` public string GetEmployeeData ( Employee employee ) '' . The // complex argument is 'employee ' . IT IS VITALLY IMPORTANT that , when using the JSON.stringify ( ) function , the name of the web method // argument is included here exactly the same way as specified in the C # code . I know I 'm being redundant by repeating myself , but // it took me hours to figure out how to do this and the error message from doing this improperly is completely useless ! var data1 = JSON.stringify ( { 'employee ' : employee1 } ) ; // 'employee ' is the web method argument and employee1 is the JavaScript object from above . var data2 = JSON.stringify ( { 'employee ' : employee2 } ) ; // 'employee ' is the web method argument and employee2 is the JavaScript object from above . // Send employee1 to the web method . $ .ajax ( { type : 'POST ' , url : '/WebServices/WebService1.asmx/GetEmployeeData ' , data : data1 , contentType : 'application/json ; charset=utf-8 ' , dataType : 'json ' , success : function ( response ) { $ ( ' # result1 ' ) .html ( response.d ) ; } , error : function ( response ) { $ ( ' # result1 ' ) .html ( 'web service call failure\n ' + response.responseText ) ; } } ) ; // Send employee2 to the web method . $ .ajax ( { type : 'POST ' , url : '/WebServices/WebService1.asmx/GetEmployeeData ' , data : data2 , contentType : 'application/json ; charset=utf-8 ' , dataType : 'json ' , success : function ( response ) { $ ( ' # result2 ' ) .html ( response.d ) ; } , error : function ( response ) { $ ( ' # result2 ' ) .html ( 'web service call failure\n ' + response.responseText ) ; } } ) ; } ) ; } ) ; < /script > < /head > < body > < form id= '' form1 '' runat= '' server '' > < div > < p > This demo shows how to pass a complex JSON object to a web method and get a reponse back from the web method. < /p > < p > 1 ) It creates two JavaScript objects. < /p > < p > 2 ) The JavaScript objects are JSONified and sent to the web method. < /p > < p > 3 ) The web method receives the complex objects and uses them to create response text. < /p > < p > 4 ) When the callback function fires , it displays the text returned from the web service. < /p > < button type= '' button '' > Call Web Service < /button > < div id= '' result1 '' > < /div > < div id= '' result2 '' > < /div > < /div > < /form > < /body > < /html > [ WebService ( Namespace = `` http : //tempuri.org/ '' ) ] [ WebServiceBinding ( ConformsTo = WsiProfiles.BasicProfile1_1 ) ] [ ToolboxItem ( false ) ] [ ScriptService ] public class WebService1 : WebService { [ WebMethod ] public string GetEmployeeData ( Employee employee ) { var output = string.Format ( `` Employee # { 0 } : { 1 } { 2 } lives at { 3 } in { 4 } , { 5 } with a zip code of { 6 } and was born on { 7 } . `` , employee.ID , employee.FirstName , employee.LastName , employee.StreetAddress , employee.City , employee.State , employee.ZipCode , employee.BirthDate.ToShortDateString ( ) ) ; if ( employee.AccessCodes ! = null ) { output += string.Format ( `` Employee # { 0 } has access codes : `` , employee.ID ) ; foreach ( var accessCode in employee.AccessCodes ) { output += accessCode + `` , `` ; } output = output.Substring ( 0 , output.Length - 2 ) ; } else { output += string.Format ( `` Employee # { 0 } does not have any has access codes . `` , employee.ID ) ; } return output ; } } public class Employee { public int ID { get ; set ; } public string FirstName { get ; set ; } public string LastName { get ; set ; } public DateTime BirthDate { get ; set ; } public string StreetAddress { get ; set ; } public string City { get ; set ; } public string State { get ; set ; } public string ZipCode { get ; set ; } public List < int > AccessCodes { get ; set ; } }"
"// Mutable value typePointMutStruct pms1 = new PointMutStruct ( 1 , 2 ) ; PointMutStruct pms2 = pms1 ; // pms1 == ( 1 , 2 ) ; pms2 == ( 1 , 2 ) ; pms2.X = 3 ; MutateState ( pms1 ) ; // Changes the X property to 4.// pms1 == ( 1 , 2 ) ; pms2 == ( 3 , 2 ) ; // Mutable reference typePointMutClass pmc1 = new PointMutClass ( 1 , 2 ) ; PointMutClass pmc2 = pmc1 ; // pmc1 == ( 1 , 2 ) ; pmc2 == ( 1 , 2 ) ; pmc2.X = 3 ; MutateState ( pmc1 ) ; // Changes the X property to 4.// pmc1 == ( 4 , 2 ) ; pmc2 == ( 4 , 2 ) ; // Immutable value typePointImmStruct pis1 = new PointImmStruct ( 1 , 2 ) ; PointImmStruct pis2 = pis1 ; // pis1 == ( 1 , 2 ) ; pis2 == ( 1 , 2 ) ; pis2 = new PointImmStruct ( 3 , pis2.Y ) ; // Ca n't mutate pis1// pis1 == ( 1 , 2 ) ; pis2 == ( 3 , 2 ) ; // Immutable reference typePointImmClass pic1 = new PointImmClass ( 1 , 2 ) ; PointImmClass pic2 = pic1 ; // pic1 == ( 1 , 2 ) ; pic2 == ( 1 , 2 ) ; pic2 = new PointImmClass ( 3 , pic2.Y ) ; // Ca n't mutate pic1 either// pic1 == ( 1 , 2 ) ; pic2 == ( 3 , 2 ) ; string s1 = GenerateTestString ( ) ; // Generate identical non-interned stringsstring s2 = GenerateTestString ( ) ; // by dynamically creating them// object.ReferenceEquals ( strA , strB ) ) == false ; // strA.Equals ( strB ) == true// strA == strB"
"pack : //application : , , ,/myFolder/myPic.bmp"
"CheckBox box ; ComboBox cmBox ; for ( int i = 1 ; i < = sumOfRegisters ; i++ ) { box = new CheckBox ( ) ; box.Name = `` CheckBox '' + i ; box.Text = `` Some text '' ; box.AutoSize = true ; box.Location = new Point ( 10 , i * 25 ) ; //vertical cmBox = new ComboBox ( ) ; cmBox.Name = `` ComboBox '' + i ; cmBox.Size = new System.Drawing.Size ( 302 , 21 ) ; cmBox.TabIndex = i ; cmBox.Text = `` Some Text '' ; cmBox.Location = new Point ( 270 , i * 25 ) ; this.groupBox.Controls.Add ( cmBox ) ; this.groupBox.Controls.Add ( box ) ; } foreach ( Control ctrl in groupBox.Controls )"
"RegistryKey RegKey = Registry.LocalMachine ; RegKey = RegKey.OpenSubKey ( @ '' SOFTWARE\Microsoft\Windows\CurrentVersion\Run '' , true ) ; RegKey.SetValue ( `` AppName '' , `` \ '' '' + @ '' C : \Users\Name\Desktop '' + `` \ '' '' ) ; RegKey.Close ( ) ;"
"// sv - the ScrollViewer to which this event handler is listening// lv - the ListView associated with `` sv '' bool handle_scroll = true ; private void inf_scroll ( object sender , ScrollChangedEventArgs e ) { if ( handle_scroll ) { for ( int i = 0 ; i < e.VerticalChange ; i++ ) { object tmp = lv.Items [ 0 ] ; lv.Items.RemoveAt ( 0 ) ; lv.Items.Add ( tmp ) ; handle_scroll = false ; } for ( int i = 0 ; i > e.VerticalChange ; i -- ) { object tmp = lv.Items [ lv.Items.Count - 1 ] ; lv.Items.RemoveAt ( lv.Items.Count - 1 ) ; lv.Items.Insert ( 0 , tmp ) ; handle_scroll = false ; } if ( ! handle_scroll ) { sv.ScrollToVerticalOffset ( sv.VerticalOffset - e.VerticalChange ) ; } } else { handle_scroll = true ; } }"
"public abstract class MyGenericClass < T1 , T2 > { public T1 Foo { get ; set ; } public T2 Bar { get ; set ; } } public class BobGeneric : MyGenericClass < int , string > { } public class JimGeneric : MyGenericClass < System.Net.Cookie , System.OverflowException > { } //All types in the assembly containing BobGeneric and JimGenericvar allTypes = _asm.GetTypes ( ) ; //This works for interfaces , but not here var specialTypes = allTypes.Where ( x = > typeof ( MyGenericClass < , > ) .IsAssignableFrom ( x ) ) //This also failstypeof ( BobGeneric ) .IsSubclassOf ( typeof ( MyGenericClass < , > ) ) .Dump ( ) ;"
int Foo1 ( IList < int > list ) { int sum = 0 ; for ( int i = 0 ; i < list.Count ; ++i ) sum += list [ i ] ; return sum ; } int Foo2 < T > ( T list ) where T : IList < int > { int sum = 0 ; for ( int i = 0 ; i < list.Count ; ++i ) sum += list [ i ] ; return sum ; } /* ... */var l = new List < int > ( ) ; Foo1 ( l ) ; Foo2 ( l ) ;
var predicate = PredicateBuilder.True < o_order > ( ) ; if ( ! string.IsNullOrEmpty ( param.sSearch ) ) predicate = predicate.And ( s = > s.OrderID.ToString ( ) .Contains ( param.sSearch ) ) ;
"class Dice { public int [ ] Roll ( int _throws , int _sides , int _count ) { Random rnd = new Random ( ) ; int [ ] results = new int [ _throws ] ; // for each set of dice to throw pass data to calculate method for ( int i = 0 ; i < _throws ; i++ ) { int thisThrow = Calculate ( _sides , _count ) ; //add each throw to a new index of array ... repeat for every throw results [ i ] = thisThrow ; } return results ; } private int Calculate ( int _sides , int _count ) { Random rnd = new Random ( ) ; int [ ] result = new int [ _count ] ; int total = 0 ; //for each dice to throw put data into result for ( int i = 0 ; i < _count ; i++ ) { result [ i ] = rnd.Next ( 1 , _sides ) ; } //count the values in result for ( int x = 0 ; x < _count ; x++ ) { total = total + result [ x ] ; } //return total of all dice to Roll method return total ; } }"
namespace B.C { using System ; public class Hidden { public void SayHello ( ) { Console.WriteLine ( `` Hello '' ) ; } } } namespace A.B.C { using B.C ; public class Program { static void Main ( string [ ] args ) { new Hidden ( ) .SayHello ( ) ; } } }
using System ; namespace TrimTest { class Program { static void Main ( string [ ] args ) { Console.WriteLine ( Environment.CommandLine ) ; Console.WriteLine ( Environment.CommandLine.Trim ( ' '' ' ) ) ; Console.ReadKey ( false ) ; } } } `` D : \Projects\TrimTest\TrimTest\bin\Debug\TrimTest.vshost.exe '' D : \Projects\TrimTest\TrimTest\bin\Debug\TrimTest.vshost.exe ''
"static void Main ( string [ ] args ) { var obj = new Random ( ) ; IFormatter formatter = new BinaryFormatter ( ) ; Stream stream = new FileStream ( `` c : \\test.txt '' , FileMode.Create , FileAccess.Write , FileShare.None ) ; formatter.Serialize ( stream , obj ) ; stream.Close ( ) ; for ( var i = 0 ; i < 10 ; i++ ) Console.WriteLine ( obj.Next ( ) .ToString ( ) ) ; Console.WriteLine ( ) ; formatter = new BinaryFormatter ( ) ; stream = new FileStream ( `` c : \\test.txt '' , FileMode.Open , FileAccess.Read , FileShare.Read ) ; obj = ( Random ) formatter.Deserialize ( stream ) ; stream.Close ( ) ; for ( var i = 0 ; i < 10 ; i++ ) Console.WriteLine ( obj.Next ( ) .ToString ( ) ) ; Console.Read ( ) ; }"
( ( ( sizeof_download_in_bytes / durationinseconds ) /1000 ) /1000 ) * 8 = Mbp/s ( ( ( sizeof_download_in_bytes / ( durationinseconds - 45sec ) ) /1000 ) /1000 ) * 8 = Mbp/s
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace ConsoleApplication1 { class ListData { public ListData ( string name , int n ) { Name = name ; Num = n ; } public string Name { get ; private set ; } public int Num { get ; private set ; } } class MyList { public MyList ( ) { m = new List < ListData > ( ) ; } public void AddString ( ListData d ) { m.Add ( d ) ; } private List < ListData > m ; } class Program { static void Main ( string [ ] args ) { { MyList l = new MyList ( ) ; bool bRunning = true ; while ( bRunning ) { Console.WriteLine ( `` a or q '' ) ; string input = Console.ReadLine ( ) ; switch ( input ) { case `` a '' : { Console.WriteLine ( `` Name : `` ) ; string strName = Console.ReadLine ( ) ; Console.WriteLine ( `` Num : `` ) ; string strNum = Console.ReadLine ( ) ; l.AddString ( new ListData ( strName , Convert.ToInt32 ( strNum ) ) ) ; break ; } case `` q '' : { bRunning = false ; break ; } } } } Console.WriteLine ( `` good bye '' ) ; Console.ReadLine ( ) ; } } }"
"Class x = new Class { Field1 = new Field1 ... . , Field2 = new Field2 }"
"Date1 ( Certain date from certain start time to certain end time ) , Date2 ( certain date from certain time to certain time ) , ... Time A to Time B : Number of Attendee in this match = N public class Appointment { [ Key ] public Guid Id { get ; set ; } public virtual ICollection < Attendee > Attendees { get ; set ; } public DateTime StartDateTime { get ; set ; } public DateTime EndDateTime { get ; set ; } public TimeSpan MinAppointmentDuration { get ; set ; } } public class Attendee { public Guid AttendeeId { get ; set ; } public virtual ICollection < Response > Responses { get ; set ; } } public class Response { [ Key ] [ DatabaseGenerated ( DatabaseGeneratedOption.Identity ) ] public int Id { get ; set ; } public Guid AttendeeId { get ; set ; } public DateTime StartDateTime { get ; set ; } public DateTime EndDateTime { get ; set ; } } public class CommonTime { public DateTime Start { get ; set ; } public DateTime End { get ; set ; } public TimeSpan MinAppointmenttime { get ; set ; } public int NumAttendees { get { return Responses.Select ( x = > x.AttendeeId ) .Distinct ( ) .Count ( ) ; } } public List < DataModels.Response > Responses { get ; set ; } public CommonTime ( DataModels.Response response , TimeSpan time ) { Responses = new List < DataModels.Response > ( ) ; Start = response.StartDateTime ; End = response.EndDateTime ; MinAppointmenttime = time ; } public void MergeCommonTime ( DataModels.Response response ) { if ( Start < = response.StartDateTime & & response.EndDateTime < =End ) { Start = response.StartDateTime ; End = response.EndDateTime ; if ( ( End-Start ) > =MinAppointmenttime ) { Responses.Add ( response ) ; } } } public List < CommonTime > FindCommonMatches ( Guid appointmentId ) { var appointment = _db.Appointments.Find ( appointmentId ) ; var attendees = appointment.Attendees.ToList ( ) ; var matches = new List < CommonTime > ( ) ; bool isFirstAttendee = true ; foreach ( var attendee in attendees ) { if ( isFirstAttendee ) { foreach ( var response in attendee.Responses ) { matches.Add ( new CommonTime ( response , appointment.MinAppointmentDuration ) ) ; } isFirstAttendee = false ; } else { foreach ( var response in attendee.Responses ) { matches.ForEach ( x = > x.MergeCommonTime ( response ) ) ; } } } return matches ; } } public class Meeting { public DateTime Start { get ; set ; } public DateTime End { get ; set ; } public List < DataModels.Attendee > Attendees { get ; set ; } } public class Requirement { public DateTime Start { get ; set ; } public DateTime End { get ; set ; } public TimeSpan MinHours { get ; set ; } public int MinAttendees { get ; set ; } public IEnumerable < Meeting > Meetings ( ) { var possibleMeetings = new List < Meeting > ( ) ; var availableHours = ( End - Start ) .TotalHours ; for ( var i = 0 ; i < availableHours - MinHours.Hours ; i++ ) yield return new Meeting { Start = Start.AddHours ( i ) , End = Start.AddHours ( i+MinHours.Hours ) } ; } } public class Scheduler { public IEnumerable < Meeting > Schedule ( Requirement req , List < DataModels.Attendee > attendees ) { var fullMatches = new List < Meeting > ( ) ; var partialMatches = new List < Meeting > ( ) ; foreach ( var m in req.Meetings ( ) ) { foreach ( var a in attendees ) { if ( fullMatches.Any ( ) ) { if ( a.Responses.Any ( r = > r.StartDateTime < = m.Start & & r.EndDateTime > = m.End ) ) { if ( m.Attendees == null ) { m.Attendees = new List < DataModels.Attendee > { a } ; } else { m.Attendees.Add ( a ) ; } } else { break ; // If we found one full match we are n't interested in the partials anymore . } } else { if ( a.Responses.Any ( r = > r.StartDateTime < = m.Start & & r.EndDateTime > = m.End ) ) { if ( m.Attendees == null ) { m.Attendees = new List < DataModels.Attendee > { a } ; } else { m.Attendees.Add ( a ) ; } } } } if ( m.Attendees ! = null ) { if ( m.Attendees.Count == attendees.Count ) fullMatches.Add ( m ) ; else if ( m.Attendees.Count > = req.MinAttendees ) partialMatches.Add ( m ) ; } } return fullMatches.Any ( ) ? fullMatches : partialMatches ; } } } public IEnumerable < Meeting > FindCommonMatches ( Guid appointmentId ) { var appointment = _db.Appointments.Find ( appointmentId ) ; var attendees = appointment.Attendees.Where ( a = > a.HasResponded == true ) .ToList ( ) ; var req = new Requirement { Start = appointment.StartDateTime , End = appointment.EndDateTime , MinHours = appointment.MinAppointmentDuration , MinAttendees = 1 } ; var schedule = new Scheduler ( ) ; var schedules = schedule.Schedule ( req , attendees ) ; return schedules ; } Match1 : 2/24/2014 10:00:00 AM to 2/24/2014 11:00:00 AM Match2 : 2/25/2014 9:00:00 AM to 2/25/2014 11:00:00 AM"
"// I have a string which contains HTML table codes , named as excelTableHttpResponse response = HttpContext.Current.Response ; response.Clear ( ) ; response.AddHeader ( `` Content-Disposition '' , String.Format ( `` Attachment ; Filename=file.xls '' , ) ) ; response.Buffer = true ; response.ContentEncoding = System.Text.Encoding.Default ; response.ContentType = `` application/vnd.ms-excel '' ; response.Write ( excelTable ) ; response.End ( ) ;"
"routes.MapRoute ( `` Default '' , // Route name `` { controller } / { action } / { id } '' , // URL with parameters new { controller = `` Account '' , action = `` LogOn '' , id = UrlParameter.Optional } ) ;"
DialogResult dr = imageFolderBrowser.ShowDialog ( ) ; if ( dr == DialogResult.OK ) { DateTime start = DateTime.Now ; //Get all images in the folder and place them in a List < > files = Directory.GetFiles ( imageFolderBrowser.SelectedPath ) ; foreach ( string file in files ) { sourceImages.Add ( Image.FromFile ( file ) ) ; } DateTime end = DateTime.Now ; timeLabel.Text = end.Subtract ( start ) .TotalMilliseconds.ToString ( ) ; }
"var updated = O ; foreach ( var m in matching ) { if ( m.A ! = null & & m.B ! = null & & m.O ! = null ) { var merge = Merge ( m.A , m.O , m.B ) ; var oldUpdated = updated ; updated = updated.ReplaceNode ( m.O , merge ) ; } else if ( m.A == null & & m.O == null & & m.B ! = null ) updated = updated.AddMembers ( m.B ) ; else if ( m.A ! = null & & m.O == null & & m.B == null ) updated = updated.AddMembers ( m.A ) ; }"
"public partial class App : Application { void App_SessionEnding ( object sender , SessionEndingCancelEventArgs e ) { MessageBox.Show ( `` Sorry , you can not log off while this app is running '' ) ; e.Cancel = true ; } } < Application x : Class= '' SafeShutdownWPF.App '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' clr-namespace : SafeShutdownWPF '' StartupUri= '' MainWindow.xaml '' SessionEnding= '' App_SessionEnding '' > < Application.Resources > < /Application.Resources > < /Application >"
"public void SendEmail ( MailMessage mailMessage ) { string domain = `` kup-nemovitost.cz '' ; var message = MimeMessage.CreateFromMailMessage ( mailMessage ) ; HeaderId [ ] headers = new HeaderId [ ] { HeaderId.From , HeaderId.Subject , HeaderId.Date } ; DkimCanonicalizationAlgorithm headerAlgorithm = DkimCanonicalizationAlgorithm.Relaxed ; DkimCanonicalizationAlgorithm bodyAlgorithm = DkimCanonicalizationAlgorithm.Relaxed ; string dkimPath = Path.Combine ( ConfigHelper.GetDataPath ( ) , `` DKIM '' ) ; string privateKey = Path.Combine ( dkimPath , `` kup-nemovitost.cz.private.rsa '' ) ; DkimSigner signer = new DkimSigner ( privateKey , domain , `` mail '' ) { SignatureAlgorithm = DkimSignatureAlgorithm.RsaSha1 , AgentOrUserIdentifier = `` @ '' + domain , QueryMethod = `` dns/txt '' , } ; message.Prepare ( EncodingConstraint.SevenBit ) ; message.Sign ( signer , headers , headerAlgorithm , bodyAlgorithm ) ; using ( var client = new MailKit.Net.Smtp.SmtpClient ( ) ) { client.Connect ( `` localhost '' , 25 , false ) ; client.Send ( message ) ; client.Disconnect ( true ) ; } } DKIM check details : -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Result : invalidID ( s ) verified : header.From=no-reply @ kup-nemovitost.czSelector=maildomain=kup-nemovitost.czDomainKeys DNS Record=mail._domainkey.kup-nemovitost.cz @ IN TXT `` v=dkim1 ; s=mail ; p=migfma0gcsqgsib3dqebaquaa4gnadcbiqkbgqdnov2pxnjmghdpxw5wpypk1rf7 kxs+5ouvh6f0hraryncku6wbvq+xovbgxz1kuddcb/s9o8wquftxrlffniik3wbm qc+upm+ndloxcxwy0bb2iktbgnmndjiexm/z0npaviwzebr2k6vqdzbp+lmcuece bwasqgw2fki5ospb4qidaqab '' -- -- BEGIN SSH2 PUBLIC KEY -- -- Comment : `` rsa-key-20170606 '' AAAAB3NzaC1yc2EAAAABJQAAAIEAiyEwx+Idlf/Qp2fTYrQMwV3MuF9W7yaKDMHkhzoH+MqWKtNDngQoJcmbyrkMeF0VLYo246ma3gPZh9cDL7i8ygOYKagbyUjgtZFzy+et0tY/+G/IZNaHiQp0QuG/J71uZrl4Jlgkq+0s5bZxpRR45aRpcG1HQMIm6Ku7lgmOt88= -- -- END SSH2 PUBLIC KEY -- -- p= AAAAB3NzaC1yc2EAAAABJQAAAIEAiyEwx+Idlf/Qp2fTYrQMwV3MuF9W7yaKDMHkhzoH+MqWKtNDngQoJcmbyrkMeF0VLYo246ma3gPZh9cDL7i8ygOYKagbyUjgtZFzy+et0tY/+G/IZNaHiQp0QuG/J71uZrl4Jlgkq+0s5bZxpRR45aRpcG1HQMIm6Ku7lgmOt88=This does n't seem to be a valid RSA public key : RSA.xs:178 : OpenSSL error : wrong tag at blib/lib/Crypt/OpenSSL/RSA.pm ( autosplit into blib/lib/auto/Crypt/OpenSSL/RSA/new_public_key.al ) line 91 ."
"public class Course : BaseEntity { public String Title { get ; set ; } public String Description { get ; set ; } public int Revision { get ; set ; } //private IList < Module > _modules ; //public virtual IList < Module > Modules // { // get { return _modules ? ? ( _modules = new List < Module > ( ) ) ; } // set { _modules = value ; } // } public virtual ICollection < Module > Modules { get ; set ; } } public class Module : BaseEntity { [ ForeignKey ( `` Course '' ) ] public Int64 CourseID { get ; set ; } public virtual Course Course { get ; set ; } public String Title { get ; set ; } public Int32 SequenceNo { get ; set ; } public override string HumanDisplay { get { return Title ; } } private IList < ModuleItem > _items ; public virtual IList < ModuleItem > Items { get { return _items ? ? ( _items = new List < ModuleItem > ( ) ) ; } set { _items = value ; } } } [ Key ] [ DatabaseGeneratedAttribute ( DatabaseGeneratedOption.Identity ) ] public Int64 Id { get ; set ; } public virtual ActionResult Edit ( long id = 0 ) { if ( Session.GetUser ( ) .GetCombinedPrivilegeForEntity ( Entity ) .CanRead ) { String saveSuccess = TempData [ `` successMessage '' ] as String ; currentModel = GetID ( id ) ; if ( currentModel == null ) throw new RecordNotFoundException ( id , typeof ( Model ) .Name ) ; currentVM = Activator.CreateInstance < ViewModel > ( ) ; currentVM.Model = currentModel ; currentVM.DB = DB ; currentVM.ViewMode = ViewMode.Edit ; currentVM.SuccessMessage = saveSuccess ; SetViewModelPermissions ( ) ; //Cache.AddEntry ( Session.SessionID , Entity , currentVM.Model.Id , currentVM ) ; if ( currentModel == null ) { return HttpNotFound ( ) ; } if ( ForcePartial || Request.IsAjaxRequest ( ) ) return PartialView ( GetViewName ( `` Edit '' ) , currentVM ) ; else return View ( GetViewName ( `` Edit '' ) , MasterName , currentVM ) ; } else { throw new PermissionException ( `` read '' , Entity ) ; } } currentModel = GetID ( id ) ; protected virtual Model GetID ( long id = 0 ) { return DbSet.Find ( id ) ; } public CourseController ( ) : base ( ) { this.DbSet = DB.Courses ; } public ApplicationCRUDController ( ) : base ( ) { this.DB = eLearn.Models.DbContext.CreateContext ( Session ) ; } protected override void Dispose ( bool disposing ) { if ( DB ! = null ) DB.Dispose ( ) ; base.Dispose ( disposing ) ; }"
SomeMethodThatIsGivenAnAnonymousMethod ( delegate { Test ( ) ; } ) ; SomeMethodThatIsGivenAnAnonymousMethod ( delegate { Test ( ) ; } ) ;
"using System.Dynamic ; sealed class Foo : DynamicObject { public override bool TryInvoke ( InvokeBinder binder , object [ ] args , out object result ) { result = new object ( ) ; return true ; } static void Main ( ) { dynamic foo = new Foo ( ) ; var t1 = foo ( 0 ) ; var t2 = foo ( 0 ) ; var t3 = foo ( 0 ) ; var t4 = foo ( 0 ) ; var t5 = foo ( 0 ) ; } }"
Thread.Sleep ( 0 )
"public ProjectViewModel ( ) { this.collectionView = CollectionViewSource.GetDefaultView ( this.Projects ) ; } private ObservableCollection < ProjectWrapper > _project = new ObservableCollection < ProjectWrapper > ( ) ; public ObservableCollection < ProjectWrapper > Projects { get { return _project ; } set { _project = value ; OnPropertyChanged ( `` Projects '' ) ; } } < UserControl.Resources > < CollectionViewSource x : Key= '' cvs '' Source= '' { Binding Path=Projects } '' > < CollectionViewSource.SortDescriptions > < scm : SortDescription PropertyName= '' ProjectWrapper.Project.Name '' / > < /CollectionViewSource.SortDescriptions > < /CollectionViewSource > < /UserControl.Resources > < ListBox Name= '' ProjectsList '' ItemsSource= '' { Binding Source= { StaticResource cvs } } '' SelectedItem= '' { Binding Path=SelectedProject } '' HorizontalContentAlignment= '' Stretch '' BorderThickness= '' 0 '' Grid.Row= '' 1 '' Grid.RowSpan= '' 3 '' Margin= '' 0,0.4 , -0.2,27.8 '' > < ListBox.ItemTemplate > < DataTemplate > < DockPanel > < TextBlock Text= '' { Binding Path=ProjectModel.Name } '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Center '' Padding= '' 3,2,0,0 '' / > < CheckBox IsChecked= '' { Binding Path=IsSelected , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' HorizontalAlignment= '' Right '' VerticalAlignment= '' Center '' Padding= '' 0,2,5,0 '' Margin= '' 0,2.5,0,0 '' / > < /DockPanel > < /DataTemplate > < /ListBox.ItemTemplate > < /ListBox >"
"public class LogSerilog : ILogSerilog { private readonly IElasticConfiguration configuration ; public LogSerilog ( IElasticConfiguration configuration ) { this.configuration = configuration ; Init ( ) ; } public void Init ( ) { var logger = new LoggerConfiguration ( ) .MinimumLevel.Information ( ) .Enrich.WithMachineName ( ) ; try { logger.WriteTo.Elasticsearch ( this.configuration.GetElasticPath ( ) , typeName : `` Serilog '' ) ; } catch ( Exception ) { //Swallow - Elastic is N/A do n't wa n't to crash . logging wo n't help since I do n't have logger yet : ) } logger.WriteTo.Log4Net ( ) ; Log.Logger = logger.CreateLogger ( ) ; } ... ... ... ."
SELECT COUNT ( * ) FROM POPULATIONWHERE AGE > 50 var count = _context.Population.Count ( x = > x.Age > 50 ) ; var count = _context.Populaton.Where ( x = > x.Age > 50 ) .Count ( ) ; var count = _context.Population.Select ( x = > x.Age > 50 ) .Count ( ) ;
MTable < User > userTable = new System.Data.Linq.Moles.MTable < User > ( ) ; userTable.Bind ( new List < User > { UserObjectHelper.TestUser ( ) } ) ; // this is the line that needs helpMolesDelegates.Func < IQueryProvider > provider = //Insert provider here ! ^userTable.ProviderSystemLinqIQueryableget = provider | | | what can I put here ? -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +
"public class TargetType { public int Id { get ; set ; } public string Name { get ; set ; } public virtual ICollection < SubCategory > SubCategories { get ; set ; } public TargetType ( ) { SubCategories = new HashSet < SubCategory > ( ) ; } } public class SubCategory { public int Id { get ; set ; } public string Name { get ; set ; } public virtual ICollection < SubTargetType > SubTargetTypes { get ; set ; } public SubCategory ( ) { SubTargetTypes = new HashSet < SubTargetType > ( ) ; } } List < SubTargetResponse > result = new List < SubTargetResponse > ( ) ; foreach ( SubCategory sc in myTargetType.SubCategories ) { foreach ( SubTargetType stt in sc.SubTargetTypes ) { if ( stt.Name.ToLower ( ) .Contains ( type.ToLower ( ) ) ) { result.Add ( new SubTargetResponse { Id = stt.Id , CategoryId = sc.Id , Name = stt.Name } ) ; } } }"
"using System.Diagnostics ; protected void Button1_Click ( object sender , EventArgs e ) { Process.Start ( `` shutdown.exe '' , `` -s -t 00 '' ) ; }"
DataTable dataTable = new DataTable ( ) ; dataTable = new DataTable ( ) ; // Will the previously created object be destroyed and memory freed ? static private DataView dataView ; private void RefreshGridView ( ) { dataView = new DataView ( GetDataTable ( ) ) ; // Will the previously created objects be destroyed and memory freed ? BindGridView ( ) ; }
abstract class Parent { static object staticLock = new object ( ) ; public void Method1 ( ) { lock ( staticLock ) { Method2 ( ) ; } } protected abstract Method2 ( ) ; } class Child1 : Parent { protected override Method2 ( ) { // Do something ... } } class Child2 : Parent { protected override Method2 ( ) { // Do something else ... } }
"[ Test ] public void Get_SignIn_Should_Return_View ( ) { # region //TODO : figure out how to extract this out to avoid duplicate code // Arrange var membershipService = new Mock < IMembershipService > ( ) ; var formsService = new Mock < IFormsAuthenticationService > ( ) ; var userService = new Mock < IUserService > ( ) ; var dictService = new Mock < IDictionaryService > ( ) ; var shoppingBasketService = new Mock < IShoppingBasketService > ( ) ; //Create the service provider mock and pass in the IRepositoryFactory so that it is n't instantiating real repositories var repoFactory = new Mock < IRepositoryFactory > ( ) ; var serviceProvider = new Mock < ServiceProvider > ( ( IRepositoryFactory ) repoFactory.Object ) ; var context = new Mock < HttpContextBase > { DefaultValue = DefaultValue.Mock } ; var sessionVars = new Mock < SessionVars > ( ) ; AccountController controller = new AccountController ( serviceProvider.Object , sessionVars.Object ) { FormsService = formsService.Object , MembershipService = membershipService.Object , UserService = userService.Object , DictionaryService = dictService.Object , ShoppingService = shoppingBasketService.Object } ; controller.ControllerContext = new ControllerContext ( ) { Controller = controller , RequestContext = new RequestContext ( context.Object , new RouteData ( ) ) } ; # endregion // Act ActionResult result = controller.SignIn ( ) ; // Assert Assert.IsInstanceOf < ViewResult > ( result ) ; }"
bool IsOdd ( int number ) ; return ( array.Where ( IsOdd ) .Count ( ) > 0 ) ;
class Event { int eserc { get ; set ; } int type { get ; set ; } } class Sequence { List < Event > events ; int freq { get ; set ; } } < ListView Name= '' resultsList '' Grid.Row= '' 5 '' Grid.Column= '' 1 '' Grid.ColumnSpan= '' 3 '' > < ListView.View > < GridView > < GridViewColumn Header= '' Sequence '' Width= '' 450 '' DisplayMemberBinding= '' { Binding events } '' / > < GridViewColumn Header= '' Frequence '' DisplayMemberBinding= '' { Binding freq } '' / > < /GridView > < /ListView.View > < /ListView >
"var playedBanDataList = from bannedPlayers in query select new PlayerBanData { Admin = bannedPlayers.Admin , BannedUntil = bannedPlayers.BannedUntil , IsPermanentBan = bannedPlayers.IsPermanentBan , PlayerName = bannedPlayers.PlayerName , Reason = bannedPlayers.Reason , IpAddresses = bannedPlayers.IpAddresses.Split ( new [ ] { `` , '' } , StringSplitOptions.RemoveEmptyEntries ) .ToList ( ) } ; return playedBanDataList.ToList ( ) ;"
"public class DbConfigurationSource : IConfigurationSource { /// < summary > /// Used to access the contents of the file . /// < /summary > public virtual IDbProvider DbProvider { get ; set ; } /// < summary > /// Determines whether the source will be loaded if the underlying data changes . /// < /summary > public virtual bool ReloadOnChange { get ; set ; } /// < summary > /// Will be called if an uncaught exception occurs in FileConfigurationProvider.Load . /// < /summary > public Action < DbLoadExceptionContext > OnLoadException { get ; set ; } public IConfigurationProvider Build ( IConfigurationBuilder builder ) { return new DbConfigurationProvider ( this ) ; } } public class DbConfigurationDataProvider : IDbProvider , IDisposable { private readonly string _applicationName ; private readonly string _connectionString ; private ConfigurationReloadToken _reloadToken ; public DbConfigurationDataProvider ( string applicationName , string connectionString ) { if ( string.IsNullOrWhiteSpace ( applicationName ) ) { throw new ArgumentNullException ( nameof ( applicationName ) ) ; } if ( string.IsNullOrWhiteSpace ( connectionString ) ) { throw new ArgumentNullException ( nameof ( connectionString ) ) ; } _applicationName = applicationName ; _connectionString = connectionString ; _reloadToken = new ConfigurationReloadToken ( ) ; SqlDependency.Start ( _connectionString ) ; } void OnDependencyChange ( object sender , SqlNotificationEventArgs e ) { var dependency = ( SqlDependency ) sender ; dependency.OnChange -= OnDependencyChange ; var previousToken = Interlocked.Exchange ( ref _reloadToken , new ConfigurationReloadToken ( ) ) ; previousToken.OnReload ( ) ; } public IChangeToken Watch ( ) { return _reloadToken ; } public List < ApplicationSettingDto > GetData ( ) { var settings = new List < ApplicationSettingDto > ( ) ; var sql = `` select parameter , value from dbo.settingsTable where application = @ application '' ; using ( var connection = new SqlConnection ( _connectionString ) ) { using ( var command = new SqlCommand ( sql , connection ) ) { command.Parameters.AddWithValue ( `` application '' , _applicationName ) ; var dependency = new SqlDependency ( command ) ; // Subscribe to the SqlDependency event . dependency.OnChange += OnDependencyChange ; connection.Open ( ) ; using ( var reader = command.ExecuteReader ( ) ) { var keyIndex = reader.GetOrdinal ( `` parameter '' ) ; var valueIndex = reader.GetOrdinal ( `` value '' ) ; while ( reader.Read ( ) ) { settings.Add ( new ApplicationSettingDto { Key = reader.GetString ( keyIndex ) , Value = reader.GetString ( valueIndex ) } ) ; } } } } Debug.WriteLine ( $ '' { DateTime.Now } : { settings.Count } settings loaded '' ) ; return settings ; } public void Dispose ( ) { SqlDependency.Stop ( _connectionString ) ; Debug.WriteLine ( $ '' { nameof ( WhsConfigurationProvider ) } Disposed '' ) ; } } public class DbConfigurationProvider : ConfigurationProvider { private DbConfigurationSource Source { get ; } public DbConfigurationProvider ( DbConfigurationSource source ) { Source = source ? ? throw new ArgumentNullException ( nameof ( source ) ) ; if ( Source.ReloadOnChange & & Source.DbProvider ! = null ) { ChangeToken.OnChange ( ( ) = > Source.DbProvider.Watch ( ) , ( ) = > { Load ( reload : true ) ; } ) ; } } private void Load ( bool reload ) { // Always create new Data on reload to drop old keys if ( reload ) { Data = new Dictionary < string , string > ( StringComparer.OrdinalIgnoreCase ) ; } var settings = Source.DbProvider.GetData ( ) ; try { Load ( settings ) ; } catch ( Exception e ) { HandleException ( e ) ; } OnReload ( ) ; } public override void Load ( ) { Load ( reload : false ) ; } public void Load ( List < ApplicationSettingDto > settings ) { Data = settings.ToDictionary ( s = > s.Key , s = > s.Value , StringComparer.OrdinalIgnoreCase ) ; } private void HandleException ( Exception e ) { // Removed for brevity } } public static class DbConfigurationExtensions { public static IConfigurationBuilder AddDbConfiguration ( this IConfigurationBuilder builder , IConfiguration config , string applicationName = `` '' ) { if ( string.IsNullOrWhiteSpace ( applicationName ) ) { applicationName = config.GetValue < string > ( `` ApplicationName '' ) ; } // DB Server and Catalog loaded from Environment Variables for now var server = config.GetValue < string > ( `` DbConfigurationServer '' ) ; var database = config.GetValue < string > ( `` DbConfigurationDatabase '' ) ; if ( string.IsNullOrWhiteSpace ( server ) ) { // Removed for brevity } if ( string.IsNullOrWhiteSpace ( database ) ) { // Removed for brevity } var sqlBuilder = new SqlConnectionStringBuilder { DataSource = server , InitialCatalog = database , IntegratedSecurity = true } ; return builder.Add ( new DbConfigurationSource { DbProvider = new DbConfigurationDataProvider ( applicationName , sqlBuilder.ToString ( ) ) , ReloadOnChange = true } ) ; } } public class Program { public static void Main ( string [ ] args ) { CreateWebHostBuilder ( args ) .Build ( ) .Run ( ) ; } public static IWebHostBuilder CreateWebHostBuilder ( string [ ] args ) = > WebHost.CreateDefaultBuilder ( args ) .ConfigureAppConfiguration ( ( hostingContext , config ) = > { config.AddDbConfiguration ( hostingContext.Configuration , `` TestApp '' ) ; } ) .UseStartup < Startup > ( ) ; } public void Configure ( IApplicationBuilder app , IApplicationLifetime applicationLifetime , SingletonAddedManually toDispose ) { applicationLifetime.ApplicationStopping.Register ( OnShutdown , toDispose ) ; // configure middleware etc } private void OnShutdown ( object toDispose ) { ( ( IDisposable ) toDispose ) .Dispose ( ) ; }"
"var topShifts = ( from s in shifts where ( from s2 in shifts where s2.CompanyId == s.CompanyId & & s.TimeSlot == s2.TimeSlot orderby s2.Priority select s2 ) .First ( ) .Equals ( s ) select s ) .ToList ( ) ; public struct Shift { public static long Iterations ; private int companyId ; public int CompanyId { get { Iterations++ ; return companyId ; } set { companyId = value ; } } public int Id ; public int TimeSlot ; public int Priority ; } class Program { static void Main ( string [ ] args ) { const int Companies = 1000 ; const int Shifts = 100 ; Console.WriteLine ( string.Format ( `` { 0 } Companies x { 1 } Shifts '' , Companies , Shifts ) ) ; var timer = Stopwatch.StartNew ( ) ; Console.WriteLine ( `` Populating data '' ) ; var shifts = new List < Shift > ( ) ; for ( int companyId = 0 ; companyId < Companies ; companyId++ ) { for ( int shiftId = 0 ; shiftId < Shifts ; shiftId++ ) { shifts.Add ( new Shift ( ) { CompanyId = companyId , Id = shiftId , TimeSlot = shiftId / 3 , Priority = shiftId % 5 } ) ; } } Console.WriteLine ( string.Format ( `` Completed in { 0 : n } ms '' , timer.ElapsedMilliseconds ) ) ; timer.Restart ( ) ; Console.WriteLine ( `` Computing Top Shifts '' ) ; var topShifts = ( from s in shifts where ( from s2 in shifts where s2.CompanyId == s.CompanyId & & s.TimeSlot == s2.TimeSlot orderby s2.Priority select s2 ) .First ( ) .Equals ( s ) select s ) .ToList ( ) ; Console.WriteLine ( string.Format ( `` Completed in { 0 : n } ms '' , timer.ElapsedMilliseconds ) ) ; timer.Restart ( ) ; Console.WriteLine ( `` \nShifts : '' ) ; foreach ( var shift in shifts.Take ( 20 ) ) { Console.WriteLine ( string.Format ( `` C { 0 } Id { 1 } T { 2 } P { 3 } '' , shift.CompanyId , shift.Id , shift.TimeSlot , shift.Priority ) ) ; } Console.WriteLine ( `` \nTop Shifts : '' ) ; foreach ( var shift in topShifts.Take ( 10 ) ) { Console.WriteLine ( string.Format ( `` C { 0 } Id { 1 } T { 2 } P { 3 } '' , shift.CompanyId , shift.Id , shift.TimeSlot , shift.Priority ) ) ; } Console.WriteLine ( string.Format ( `` \nTotal Comparisons : { 0 : n } '' , Shift.Iterations/2 ) ) ; Console.WriteLine ( `` Any key to continue '' ) ; Console.ReadKey ( ) ; } }"
using namespace std # include < iostream > # include `` stdafx.h '' # include `` ConsoleApplication5.h '' # include < iostream > int main ( ) { std : :cout < < `` hi '' ; return 0 ; } StreamWriter srWrite ; StreamWriter srWrite = new StreamWriter ( string filepath ) StreamWriter srWrite = new StreamWriter ( new NetworkStream ( Socket.GetStream ( ) ) ) ; StreamWriter
"if ( LogonUser ( Username , Domain , Password , Logon32LogonInteractive , Logon32ProviderDefault , ref existingTokenHandle ) & & DuplicateToken ( existingTokenHandle , ( int ) SecurityImpersonationLevel.SecurityDelegation , ref duplicateTokenHandle ) ) { Identity = new WindowsIdentity ( duplicateTokenHandle ) ; ImpersonationContext = Identity.Impersonate ( ) ; } else { throw new Win32Exception ( Marshal.GetLastWin32Error ( ) ) ; } private const int Logon32LogonInteractive = 2 ; private const int Logon32ProviderDefault = 0 ; public enum SecurityImpersonationLevel { SecurityAnonymous = 0 , SecurityIdentification = 1 , SecurityImpersonation = 2 , SecurityDelegation = 3 } [ DllImport ( `` advapi32.dll '' , SetLastError = true , CharSet = CharSet.Unicode ) ] private static extern bool LogonUser ( String lpszUsername , String lpszDomain , String lpszPassword , int dwLogonType , int dwLogonProvider , ref IntPtr phToken ) ; [ DllImport ( `` kernel32.dll '' , CharSet = CharSet.Auto ) ] private extern static bool CloseHandle ( IntPtr handle ) ; [ DllImport ( `` advapi32.dll '' , CharSet = CharSet.Auto , SetLastError = true ) ] private static extern bool DuplicateToken ( IntPtr existingTokenHandle , int securityImpersonationLevel , ref IntPtr duplicateTokenHandle ) ;"
"var url = `` http : //theRESTURL.com/rest/API/myRequest '' ; var results = GetHTTPClient ( ) .GetStringAsync ( url ) .Result ; var restResponse = new RestSharp.RestResponse ( ) ; restResponse.Content = results ; var _deserializer = new JsonDeserializer ( ) ; private HttpClient GetHTTPClient ( ) { var httpClient = new HttpClient ( new HttpClientHandler ( ) { Credentials = new System.Net.NetworkCredential ( `` usr '' , `` pwd '' ) , UseDefaultCredentials = false , UseProxy = true , Proxy = new WebProxy ( new Uri ( `` http : //myproxy.com:8080 '' ) ) , AllowAutoRedirect = false } ) ; httpClient.Timeout = new TimeSpan ( 0,0 , 3500 ) ; return httpClient ; } .GetStringAsync ( url ) .Result"
"[ Test , AutoData ] public void IntroductoryTest ( int expectedNumber ) { } System.Reflection.TargetParameterCountException : Parameter count mismatch . at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck ( Object obj , BindingFlags invokeAttr , Binder binder , Object [ ] parameters , CultureInfo culture ) at System.Reflection.RuntimeMethodInfo.Invoke ( Object obj , BindingFlags invokeAttr , Binder binder , Object [ ] parameters , CultureInfo culture ) at NUnit.Core.Reflect.InvokeMethod ( MethodInfo method , Object fixture , Object [ ] args ) at NUnit.Core.TestMethod.RunTestMethod ( ) at NUnit.Core.TestMethod.RunTestCase ( TestResult testResult )"
"{ `` ShowID '' : 10107 , `` StartTime '' : `` 3:00 PM '' , `` MovieID '' : 13 , `` Movie '' : `` Bhaag Milkha Bhaag `` , `` Screen '' : `` CDC SCreen2 '' , `` MediaPath '' : `` bmb1_568962.jpg '' } , { `` ShowID '' : 115 , `` StartTime '' : `` 6:00 PM '' , `` MovieID '' : 13 , `` Movie '' : `` Bhaag Milkha Bhaag `` , `` Screen '' : `` CDC SCreen2 '' , `` MediaPath '' : `` bmb1_568962.jpg '' } , { `` ShowID '' : 110 , `` StartTime '' : `` 9:00 PM '' , `` MovieID '' : 13 , `` Movie '' : `` Bhaag Milkha Bhaag `` , `` Screen '' : `` CDC SCreen2 '' , `` MediaPath '' : `` bmb1_568962.jpg '' } { `` MovieID '' : 13 , `` Movie '' : `` Bhaag Milkha Bhaag `` , `` Screen '' : `` CDC SCreen2 '' , `` MediaPath '' : `` bmb1_568962.jpg '' , `` ShowInfo '' : [ { `` ShowID '' : 10107 , `` StartTime '' : `` 3:00 PM '' } , { `` ShowID '' : 115 , `` StartTime '' : `` 6:00 PM '' } , { `` ShowID '' : 110 , `` StartTime '' : `` 9:00 PM '' } ] } [ WebMethod ] public string NowShowingGetList ( DateTime ShowDate ) { HomeController obj = new HomeController ( ) ; JavaScriptSerializer js = new JavaScriptSerializer ( ) ; string retJSON = js.Serialize ( obj.NowShowingGetList ( ShowDate ) ) ; return retJSON ; } public class NowShowingInfo { public int ShowID { get ; set ; } public string StartTime { get ; set ; } public int MovieID { get ; set ; } public string Movie { get ; set ; } public string Screen { get ; set ; } public string MediaPath { get ; set ; } }"
"using System ; public class Example { private interface ITest { int TestFunc ( string str , int i ) ; } private class Test : ITest { public int TestFunc ( string str , int i ) { return 0 ; } } public static void Main ( ) { ITest t = new Test ( ) ; DoWork ( t.TestFunc ) ; } public static void DoWork < T1 , T2 , TResult > ( Func < T1 , T2 , TResult > func ) { } }"
protected override async void OnStart ( ) { sendHttpRequestAsync ( ) ; } private async void sendHttpRequestAsync ( ) { await ... }
"1. var y = Convert.ToDecimal ( x ) ; // Dim y = Convert.ToDecimal ( x ) 2. var y = new Decimal ( x ) ; // Dim y = new Decimal ( x ) 3. var y = ( decimal ) x ; // Dim y = CType ( x , Decimal ) 4 . -- no C # equivalent -- // Dim y = CDec ( x ) 1. call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Convert : :ToDecimal ( float64 ) -- > which calls System.Decimal : :op_Explicit ( float64 ) -- > which calls System.Decimal : :.ctor ( float64 ) 2. newobj instance void [ mscorlib ] System.Decimal : :.ctor ( float64 ) 3. call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Decimal : :op_Explicit ( float64 ) -- > which calls System.Decimal : :.ctor ( float64 ) 1. call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Convert : :ToDecimal ( float64 ) -- > which calls System.Decimal : :op_Explicit ( float64 ) -- > which calls System.Decimal : :.ctor ( float64 ) 2. call instance void [ mscorlib ] System.Decimal : :.ctor ( float64 ) 3. newobj instance void [ mscorlib ] System.Decimal : :.ctor ( float64 ) 4. newobj instance void [ mscorlib ] System.Decimal : :.ctor ( float64 )"
"private async void button1_Click ( object sender , EventArgs e ) { using ( var file = File.OpenRead ( @ '' C : \Temp\Sample.txt '' ) ) { byte [ ] buffer = new byte [ 4096 ] ; int threadId = Thread.CurrentThread.ManagedThreadId ; int read = await file.ReadAsync ( buffer , 0 , buffer.Length ) .ConfigureAwait ( false ) ; Debug.Assert ( threadId ! = Thread.CurrentThread.ManagedThreadId ) ; } }"
"_message = string.Format ( messageFormat , args ) ; if ( ! string.IsNullOrEmpty ( messageFormat ) ) { _message = string.Format ( messageFormat , args ) ; } if ( messageFormat.IsNotNullOrEmpty ( ) ) { _message = string.Format ( messageFormat , args ) ; // possible 'null ' assignment warning } public static bool IsNotNullOrEmpty ( [ CanBeNull ] this string value ) = > ! IsNullOrEmpty ( value ) ;"
"using ( var service = new IsolatedTemplateService ( ( ) = > appDomain ) ) { return service.Parse ( newTemplate , model , null , null ) ; } var permissionSet = new PermissionSet ( PermissionState.Unrestricted ) ; var permissionSet = new PermissionSet ( PermissionState.None ) ; permissionSet.AddPermission ( new SecurityPermission ( PermissionState.Unrestricted ) ) ; permissionSet.AddPermission ( new ReflectionPermission ( PermissionState.Unrestricted ) ) ; [ SecurityException : Request failed . ] System.AppDomain.CreateInstance ( String assemblyName , String typeName , Boolean ignoreCase , BindingFlags bindingAttr , Binder binder , Object [ ] args , CultureInfo culture , Object [ ] activationAttributes ) +0 RazorEngine.Templating.IsolatedTemplateService..ctor ( Language language , Encoding encoding , IAppDomainFactory appDomainFactory ) +408 RazorEngine.Templating.IsolatedTemplateService..ctor ( Language language , Encoding encoding , Func ` 1 appDomainFactory ) +73 RazorEngine.Templating.IsolatedTemplateService..ctor ( Func ` 1 appDomainFactory ) +41"
"public void MyMethod ( string value1 , string value2 ) { if ( value1 ! = null ) { //do something ( throw exception ) } if ( value2 ! = null ) { //do something ( throw exception ) } //rest of method } [ TestMethod ] public void TestMyMethodShouldThrowExceptionIfValue1IsNull ( ) { //test } [ TestMethod ] public void TestMyMethodShouldThrowExceptionIfValue2IsNull ( ) { //test } [ TestMethod ] public void TestMyMethodWithNullValues ( ) { //pass null for value1 //check //pass null for value2 //check }"
public void Dispose ( ) { GC.SuppressFinalize ( this ) ; } public sealed class MyClass : IDisposable { IList < MyObject > objects ; // MyObject does n't hold any unmanaged resource private bool _disposed ; public void Dispose ( ) { Dispose ( true ) ; GC.SuppressFinalize ( this ) ; } private void Dispose ( bool disposing ) { if ( ! _disposed ) { // do I need to set the list to null and // call Dispose on each item in the list ? if ( disposing ) { foreach ( var o in objects ) o.Dispose ( ) ; objects = null ; } } _disposed = true ; } ~MyClass ( ) { Dispose ( false ) ; } }
"var s = new string ( ' a ' , 3000 ) ; const string history = `` aaaaaa ... aaaaa '' ; const string history = `` aaaaaaaaaaaa\0aa ... aaaaa '' ;"
DataTable _table = new DataTable ( ) ; //1 ) Why I need to Convert DataRow again into DataRow by Casting ? List < DataRow > _rows = _table.Rows.Cast < DataRow > ( ) .Select ( a = > a ) .ToList ( ) ; //2 ) Why this is not valid ? List < DataRow > _rows = _table.Rows.Select ( a = > a ) .ToList ( ) ;
"[ { `` id '' : `` 1 '' , `` description '' : `` foo '' } , { `` id '' : `` 2 '' , `` description '' : `` foo2 '' } , { `` id '' : `` 3 '' , `` description '' : `` foo3 '' } ] [ { `` id '' : `` 4 '' , `` description '' : `` foo4 '' } , { `` id '' : `` 2 '' , `` description '' : `` foo2 '' } ] [ Test ] public void GetAllItems ( ) { //Arrange _mockProviderService .Given ( `` There are items '' ) .UponReceiving ( `` A GET request to retrieve the items '' ) .With ( new ProviderServiceRequest { Method = HttpVerb.Get , Path = `` /items/ '' , Headers = new Dictionary < string , object > { { `` Accept '' , `` application/json '' } } } ) .WillRespondWith ( new ProviderServiceResponse { Status = 200 , Headers = new Dictionary < string , object > { { `` Content-Type '' , `` application/json ; charset=utf-8 '' } } , Body = // array of items with some attributes // ( somthing like : { `` id '' : `` 2 '' , `` description '' : `` foo '' } ) // with flexible length } ) ; var consumer = new ItemApiClient ( _mockProviderServiceBaseUri ) ; //Act var result = consumer.GetItems ( ) ; //Assert Assert.AreEqual ( true , result.Count > 0 ) ; _mockProviderService.VerifyInteractions ( ) ; data.Dispose ( ) ; }"
public IQueryable < DatabaseRecord > GetQueryableLinkedRecords ( ) { if ( this.currentlyHeldIds.Count ( ) == 0 ) { return Enumerable.Empty < DatabaseRecord > ( ) .AsQueryable ( ) ; } else { return from r in this.DBContext.DatabaseRecords where this.currentlyHeldIds.Contains ( r.Id ) select r ; } }
private readonly Lazy < IPrincipal > _principal ; public MyService ( Lazy < IPrincipal > principal ) { _principal = principal ; } container.Register ( ( ) = > new Lazy < IPrincipal > ( ( ) = > HttpContext.Current.User ) ) ; container.Register ( ( ) = > new Lazy < IPrincipal > ( ( ) = > Thread.CurrentPrincipal ) ) ;
"public dynamic Traverse ( dynamic entity , conditions , method ) { foreach ( var propInfo in GetTraversableProperties ( entity ) ) { if ( condition ) method ( propInfo.GetValue ( etc ) ) ; Traverse ( propInfo , condition , method ) ; } return entity ; }"
private void foo ( ) { int a = 1 ; int b = 5 ; } b = 5a = 1 private void foo ( ) { int a = 1 ; int b = 5 ; Console.WriteLine ( a ) ; } private void foo ( ) { int a = 1 ; int b = 5 ; Console.WriteLine ( a ) ; Console.WriteLine ( b ) ; }
try { MyService service = new Service ( ) ; service.DoSomething ( ) ; return something ; } catch ( Exception ex ) { LogSomething ( ) ; return somethingElse ; } finally { MarkAsComplete ( ) ; service.Dispose ( ) ; }
"static string s = null ; public override bool FinishedLaunching ( UIApplication app , NSDictionary options ) { OneSignal.Current.StartInit ( `` MyKey '' ) .HandleNotificationOpened ( HandleNotificationOpened ) .EndInit ( ) ; if ( s ! =null ) { LoadApplication ( new App ( s ) ) ; } else { LoadApplication ( new App ( `` myUrl.lasso '' ) ) ; } return base.FinishedLaunching ( app , options ) ; } private static void HandleNotificationOpened ( OSNotificationOpenedResult result ) { OSNotificationPayload payload = result.notification.payload ; Dictionary < string , object > additionalData = payload.additionalData ; if ( additionalData ! = null ) { if ( additionalData.ContainsKey ( `` url_direct '' ) ) { s = additionalData [ `` url_direct '' ] .ToString ( ) ; System.Diagnostics.Debug.WriteLine ( `` We need to redirect it to : `` + s ) ; } } }"
"CREATE TABLE [ dbo ] . [ Images ] ( [ Id ] INT IDENTITY ( 1 , 1 ) NOT NULL , [ Bild ] IMAGE NOT NULL , PRIMARY KEY CLUSTERED ( [ Id ] ASC ) ) ; public static byte [ ] ImageToByteArray ( System.Drawing.Image imageIn ) { using ( MemoryStream ms = new MemoryStream ( ) ) { imageIn.Save ( ms , System.Drawing.Imaging.ImageFormat.Png ) ; return ms.ToArray ( ) ; } } public static Image ByteArrayToImage ( byte [ ] byteArrayIn ) { using ( MemoryStream ms = new MemoryStream ( byteArrayIn ) ) { Image returnImage = Image.FromStream ( ms ) ; return returnImage ; } } public static ImageList GetRezeptImages ( int rezeptId ) { using ( CookBookDataContext ctx = new CookBookDataContext ( ResourceFile.DBConnection ) ) { IEnumerable < RezeptBilder > bilder = from b in ctx.RezeptBilders where b.FKRezept == rezeptId select b ; ImageList imageList = new ImageList ( ) ; foreach ( RezeptBilder b in bilder ) { imageList.Images.Add ( Helper.ByteArrayToImage ( b.Bild.ToArray ( ) ) ) ; } return imageList ; } } private void dgvRezeptListe_CellClick ( object sender , DataGridViewCellEventArgs e ) { pbRezeptBild.Image = DBManager.GetRezeptImages ( Int32.Parse ( dgvRezeptListe.SelectedRows [ 0 ] .Cells [ 0 ] .Value.ToString ( ) ) ) .Images [ 0 ] ; }"
"using System ; using System.IO ; using System.Xml.Serialization ; namespace Code.Without.IDE { [ Serializable ] public abstract class C1 { [ XmlIgnore ] public abstract bool IsValid_C1 { get ; set ; } } [ Serializable ] public class C2 : C1 { public bool IsValid_C2 { get ; set ; } public override bool IsValid_C1 { get ; set ; } public C2 ( ) { IsValid_C1 = true ; IsValid_C2 = false ; } } public static class AbstractPropertiesAttributeTest { public static void Main ( string [ ] args ) { C2 c2 = new C2 ( ) ; using ( MemoryStream ms = new MemoryStream ( ) ) { XmlSerializer ser = new XmlSerializer ( typeof ( C2 ) ) ; ser.Serialize ( ms , c2 ) ; string result = System.Text.Encoding.UTF8.GetString ( ms.ToArray ( ) ) ; Console.WriteLine ( result ) ; } } } } -- -- -- C : \abhi\Code\CSharp\without IDE\AbstractPropertiesAttributeTest.exe < ? xml version= '' 1.0 '' ? > < C2 xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < IsValid_C2 > false < /IsValid_C2 > < IsValid_C1 > true < /IsValid_C1 > < /C2 > -- -- -- Process returned 0"
"CancellationTokenSource cancellationTokenSource ; Task loopTask ; void StartLoop ( ) { cancellationTokenSource = new CancellationTokenSource ( ) ; loopTask = Task.Factory.StartNew ( Loop , TaskCreationOptions.LongRunning ) ; } void Loop ( ) { while ( true ) { if ( cancellationTokenSource.IsCancellationRequested ) break ; Thread.Yield ( ) ; } } void StopLoop ( ) { cancellationTokenSource.Cancel ( ) ; loopTask = null ; cancellationTokenSource = null ; } volatile bool exitLoop ; Task loopTask ; void StartLoop ( ) { exitLoop = false ; loopTask = Task.Factory.StartNew ( Loop , TaskCreationOptions.LongRunning ) ; } void Loop ( ) { while ( true ) { if ( exitLoop ) break ; Thread.Yield ( ) ; } } void StopLoop ( ) { exitLoop = true ; loopTask = null ; }"
private static string SanitizeVersionStringFromUnit ( string version ) { var santizedString = new string ( version.Where ( char.IsLetterOrDigit ) .ToArray ( ) ) ; ; return santizedString ; }
"string [ ] ugaramStrings = { `` கு '' , `` சு '' , `` டு '' , `` து '' , `` பு '' , `` று '' } ; string [ ] tamilvowels = { `` அ '' , // `` \u0b85 '' `` ஆ '' , // '' \u0b86 '' `` இ '' , // '' \u0b87 '' `` ஈ '' , // '' \u0b88 '' `` உ '' , // '' \u0b89 '' `` ஊ '' , // '' \u0b8A '' `` எ '' , // `` \u0b8E '' `` ஏ '' , // '' \u0b8F '' `` ஐ '' , // '' \u0b90 '' `` ஒ '' , // '' \u0b92 '' `` ஓ '' , // '' \u0b93 '' `` ஔ '' // '' \u0b94 '' } ;"
"//https : //stackoverflow.com/questions/51090597/botframework-on-teams-channel-11-authentication-aad-integrated string tenantIdAAD = `` '' ; try { tenantIdAAD = activity.GetChannelData < TeamsChannelData > ( ) .Tenant.Id ; } catch ( Exception exception ) { tenantIdAAD = `` '' ; } ConnectorClient connector = new ConnectorClient ( new Uri ( activity.ServiceUrl ) ) ; if ( [ AAD_TenantID ] .TenantIdAAD.Equals ( tenantIdAAD ) || activity.ServiceUrl.StartsWith ( `` http : //localhost '' ) ) { await Conversation.SendAsync ( activity , ( ) = > new Dialogs.RootDialog ( ) .LogIfException ( ) ) ; } else { await connector.Conversations.ReplyToActivityAsync ( activity.CreateReply ( `` Access Denied '' ) ) ; }"
"Android application is debugging . Mono Warning : option gen-compact-seq-points is deprecated . 07-14 10:37:16.613 W/monodroid ( 18119 ) : Trying to load sgen from : /data/app/RBOS_2.x_0.x_1.RBOS_2.x_0.x_1-1/lib/arm/libmonosgen-2.0.so07-14 10:37:16.613 W/monodroid-debug ( 18119 ) : Trying to initialize the debugger with options : -- debugger-agent=transport=dt_socket , loglevel=0 , address=127.0.0.1:29342 , server=y , embedding=1 07-14 10:37:16.953 W/monodroid-debug ( 18119 ) : Accepted stdout connection : 29 07-14 10:37:18.793 W/monodroid-gc ( 18119 ) : GREF GC Threshold : 46080 07-14 10:37:18.793 W/monodroid ( 18119 ) : Calling into managed runtime init Loaded assembly : RBOS 2.0.1.dll Loaded assembly : BusinessLogic.dll Loaded assembly : BusinessObject.dll Loaded assembly : DotNetCross.Memory.Unsafe.dll [ External ] Loaded assembly : Newtonsoft.Json.dll [ External ] Loaded assembly : Realm.dll [ External ] Loaded assembly : Remotion.Linq.dll [ External ] Loaded assembly : Xamarin.Android.Support.Animated.Vector.Drawable.dll [ External ] Loaded assembly : Xamarin.Android.Support.Design.dll [ External ] Loaded assembly : Xamarin.Android.Support.v4.dll [ External ] Loaded assembly : Xamarin.Android.Support.v7.AppCompat.dll [ External ] Loaded assembly : Xamarin.Android.Support.v7.CardView.dll [ External ] Loaded assembly : Xamarin.Android.Support.v7.RecyclerView.dll [ External ] Loaded assembly : Xamarin.Android.Support.Vector.Drawable.dll [ External ] Loaded assembly : UTILITIES.dll Loaded assembly : Mono.Android.dll [ External ] Loaded assembly : Java.Interop.dll [ External ] Loaded assembly : System.Core.dll [ External ] Loaded assembly : MonoDroidConstructors [ External ] Loaded assembly : System.dll [ External ] Loaded assembly : System.Data.dll [ External ] Loaded assembly : System.Xml.dll [ External ] 07-14 10:37:20.183 D/OpenGLRenderer ( 18119 ) : Use EGL_SWAP_BEHAVIOR_PRESERVED : true 07-14 10:37:20.193 D/Atlas ( 18119 ) : Validating map ... 07-14 10:37:20.303 W/ResourceType ( 18119 ) : Too many attribute references , stopped at : 0x01010099 07-14 10:37:20.303 W/ResourceType ( 18119 ) : Too many attribute references , stopped at : 0x0101009b 07-14 10:37:20.313 I/TextInputLayout ( 18119 ) : EditText added is not a TextInputEditText . Please switch to using that class instead . Loaded assembly : System.Web.Services.dll [ External ] Loaded assembly : Mono.Security.dll [ External ] 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : < qeglDrvAPI_eglInitialize:379 > : EGL 1.4 QUALCOMM build : AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092_msm8916_64_refs/tags/AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092__release_AU ( I6eddbfa548 ) 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : OpenGL ES Shader Compiler Version : E031.25.03.04 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : Build Date : 09/16/15 Wed 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : Local Branch : 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : Remote Branch : refs/tags/AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : Local Patches : NONE 07-14 10:37:20.903 I/Adreno-EGL ( 18119 ) : Reconstruct Branch : NOTHING 07-14 10:37:20.903 I/OpenGLRenderer ( 18119 ) : Initialized EGL , version 1.4 07-14 10:37:20.923 D/OpenGLRenderer ( 18119 ) : Enabling debug mode 0 07-14 10:37:20.963 W/ResourceType ( 18119 ) : Too many attribute references , stopped at : 0x01010099 07-14 10:37:20.963 W/ResourceType ( 18119 ) : Too many attribute references , stopped at : 0x0101009b 07-14 10:37:20.963 D/AndroidRuntime ( 18119 ) : Shutting down VM An unhandled exception occured . protected override void OnCreate ( Bundle savedInstanceState ) { base.OnCreate ( savedInstanceState ) ; SetContentView ( Resource.Layout.RequestAccess ) ; # region Check if there is an active user - proceed to login , else proceed to request access UserAccountLogic.getAllUserAccountsFromDatabase ( listUserObject ) ; if ( listUserObject.Count > 0 & & listUserObject [ 0 ] .isActive ! =0 ) { //Call LoginActivity var intent = new Intent ( this , typeof ( Login ) ) ; StartActivity ( intent ) ; FinishAffinity ( ) ; } else { txtAccessCode = FindViewById < TextInputLayout > ( Resource.Id.layoutAccessCode ) ; button = FindViewById < Button > ( Resource.Id.btnSend ) ; button.Click += delegate { sendButtonClicked ( ) ; } ; } # endregion Android.Util.Log.Error ( `` L '' , `` Error Occured '' ) ; } //this is the place where exception occur in 5.1.1 . I do n't know why . E/L ( 6824 ) : Error Occured // I added a log tag here before the bracketV/WindowManager ( 866 ) : Adding window Window { 386088e1 u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccess } at 7 of 14 ( before Window { 3031e02c u0 Starting RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 } ) V/WindowManager ( 866 ) : Changing focus from null to Window { 386088e1 u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccess } Callers=com.android.server.wm.WindowManagerService.relayoutWindow:3410 com.android.server.wm.Session.relayout:202 android.view.IWindowSession $ Stub.onTransact:273 com.android.server.wm.Session.onTransact:130I/Adreno-EGL ( 6824 ) : < qeglDrvAPI_eglInitialize:379 > : EGL 1.4 QUALCOMM build : AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092_msm8916_64_refs/tags/AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092__release_AU ( I6eddbfa548 ) I/Adreno-EGL ( 6824 ) : OpenGL ES Shader Compiler Version : E031.25.03.04I/Adreno-EGL ( 6824 ) : Build Date : 09/16/15 WedI/Adreno-EGL ( 6824 ) : Local Branch : I/Adreno-EGL ( 6824 ) : Remote Branch : refs/tags/AU_LINUX_ANDROID_LA.BR.1.1.3.C8.05.01.00.115.092I/Adreno-EGL ( 6824 ) : Local Patches : NONEI/Adreno-EGL ( 6824 ) : Reconstruct Branch : NOTHINGI/OpenGLRenderer ( 6824 ) : Initialized EGL , version 1.4D/OpenGLRenderer ( 6824 ) : Enabling debug mode 0W/ResourceType ( 6824 ) : Too many attribute references , stopped at : 0x01010099W/ResourceType ( 6824 ) : Too many attribute references , stopped at : 0x0101009bD/AndroidRuntime ( 6824 ) : Shutting down VMI/KSO_STAT ( 1466 ) : App is in background , stop update end time , ready to start a new session.V/ExReceiver ( 32431 ) : revceive action =android.intent.action.BATTERY_CHANGEDE/QCOMSysDaemon ( 6861 ) : Ca n't find/open bootselect node : ( No such file or directory ) I/QCOMSysDaemon ( 6861 ) : Starting qcom system daemonE/Diag_Lib ( 6861 ) : Diag_LSM_Init : Failed to open handle to diag driver , error = 2E/QCOMSysDaemon ( 6861 ) : Diag_LSM_Init failed : 0I/Babel_ConcService ( 5697 ) : Acquired partial wake lock to keep ConcurrentService aliveI/Babel_ConcService ( 5697 ) : Released partial wake lock as ConcurrentService became idleI/KSO_STAT ( 1466 ) : App is in background , stop update end time , ready to start a new session.W/ActivityManager ( 866 ) : Launch timeout has expired , giving up wake lock ! V/ExReceiver ( 32431 ) : revceive action =android.intent.action.BATTERY_CHANGEDD/TelephonyProvider ( 1787 ) : simId = 0D/TelephonyProvider ( 1787 ) : simId = 0D/TelephonyProvider ( 1787 ) : query ( ) : mccmnc = 51503 spn = SMART Prepaid simId = 0D/PhoneInterfaceManager ( 1787 ) : [ PhoneIntfMgr ] getDataEnabled : subId=1 phoneId=0D/PhoneInterfaceManager ( 1787 ) : [ PhoneIntfMgr ] getDataEnabled : subId=1 retVal=trueE/QCOMSysDaemon ( 6864 ) : Ca n't find/open bootselect node : ( No such file or directory ) I/QCOMSysDaemon ( 6864 ) : Starting qcom system daemonE/Diag_Lib ( 6864 ) : Diag_LSM_Init : Failed to open handle to diag driver , error = 2E/QCOMSysDaemon ( 6864 ) : Diag_LSM_Init failed : 0E/AndroidRuntime ( 6824 ) : FATAL EXCEPTION : mainE/AndroidRuntime ( 6824 ) : Process : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 , PID : 6824E/AndroidRuntime ( 6824 ) : android.view.InflateException : Binary XML file line # 24 : Error inflating class TextViewE/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.createViewFromTag ( LayoutInflater.java:763 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.rInflate ( LayoutInflater.java:806 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.rInflate ( LayoutInflater.java:809 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.rInflate ( LayoutInflater.java:809 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.inflate ( LayoutInflater.java:504 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.inflate ( LayoutInflater.java:414 ) E/AndroidRuntime ( 6824 ) : at android.view.LayoutInflater.inflate ( LayoutInflater.java:365 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoCursorController $ FloatPanelViewController. < init > ( OppoCursorController.java:1382 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoCursorController.createFloatPanelViewController ( OppoCursorController.java:122 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoCursorController $ InsertionPointCursorController. < init > ( OppoCursorController.java:197 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoCursorController.create ( OppoCursorController.java:75 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoEditor.getOppoInsertionController ( OppoEditor.java:410 ) E/AndroidRuntime ( 6824 ) : at android.widget.OppoEditor.onFocusChanged ( OppoEditor.java:298 ) E/AndroidRuntime ( 6824 ) : at android.widget.TextView.onFocusChanged ( TextView.java:8092 ) E/AndroidRuntime ( 6824 ) : at android.view.View.handleFocusGainInternal ( View.java:4963 ) E/AndroidRuntime ( 6824 ) : at android.view.View.requestFocusNoSearch ( View.java:7679 ) E/AndroidRuntime ( 6824 ) : at android.view.View.requestFocus ( View.java:7658 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2612 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.onRequestFocusInDescendants ( ViewGroup.java:2656 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewGroup.requestFocus ( ViewGroup.java:2615 ) E/AndroidRuntime ( 6824 ) : at android.view.View.requestFocus ( View.java:7625 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewRootImpl.performTraversals ( ViewRootImpl.java:2019 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewRootImpl.doTraversal ( ViewRootImpl.java:1116 ) E/AndroidRuntime ( 6824 ) : at android.view.ViewRootImpl $ TraversalRunnable.run ( ViewRootImpl.java:6084 ) E/AndroidRuntime ( 6824 ) : at android.view.Choreographer $ CallbackRecord.run ( Choreographer.java:773 ) E/AndroidRuntime ( 6824 ) : at android.view.Choreographer.doCallbacks ( Choreographer.java:586 ) E/AndroidRuntime ( 6824 ) : at android.view.Choreographer.doFrame ( Choreographer.java:556 ) E/AndroidRuntime ( 6824 ) : at android.view.Choreographer $ FrameDisplayEventReceiver.run ( Choreographer.java:759 ) E/AndroidRuntime ( 6824 ) : at android.os.Handler.handleCallback ( Handler.java:739 ) E/AndroidRuntime ( 6824 ) : at android.os.Handler.dispatchMessage ( Handler.java:95 ) E/AndroidRuntime ( 6824 ) : at android.os.Looper.loop ( Looper.java:150 ) E/AndroidRuntime ( 6824 ) : at android.app.ActivityThread.main ( ActivityThread.java:5408 ) E/AndroidRuntime ( 6824 ) : at java.lang.reflect.Method.invoke ( Native Method ) E/AndroidRuntime ( 6824 ) : at java.lang.reflect.Method.invoke ( Method.java:372 ) E/AndroidRuntime ( 6824 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:964 ) E/AndroidRuntime ( 6824 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:759 ) E/AndroidRuntime ( 6824 ) : Caused by : java.lang.RuntimeException : Failed to resolve attribute at index 24E/AndroidRuntime ( 6824 ) : at android.content.res.TypedArray.getColor ( TypedArray.java:401 ) E/AndroidRuntime ( 6824 ) : at android.widget.TextView. < init > ( TextView.java:709 ) E/AndroidRuntime ( 6824 ) : at android.widget.TextView. < init > ( TextView.java:645 ) E/AndroidRuntime ( 6824 ) : at android.support.v7.widget.AppCompatTextView. < init > ( AppCompatTextView.java:60 ) E/AndroidRuntime ( 6824 ) : at android.support.v7.widget.AppCompatTextView. < init > ( AppCompatTextView.java:56 ) E/AndroidRuntime ( 6824 ) : at android.support.v7.app.AppCompatViewInflater.createView ( AppCompatViewInflater.java:103 ) E/AndroidRuntime ( 6824 ) : at android.support.v7.app.AppCD/ActivityManager ( 866 ) : addErrorToDropBox processName = RBOS_2.x_0.x_1.RBOS_2.x_0.x_1W/ActivityManager ( 866 ) : Force finishing activity 1 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccessW/ActivityManager ( 866 ) : Force finishing activity 2 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.LauncherW/DropBoxManagerService ( 866 ) : Dropping : data_app_crash ( 10 > 0 bytes ) V/WindowManager ( 866 ) : Changing focus from Window { 386088e1 u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccess } to null Callers=com.android.server.wm.WindowManagerService.setFocusedApp:4259 com.android.server.am.ActivityManagerService.setFocusedActivityLocked:2553 com.android.server.am.ActivityStack.adjustFocusedActivityLocked:2873 com.android.server.am.ActivityStack.finishActivityLocked:3118D/DropBoxManagerService ( 866 ) : file : : /data/system/dropbox/data_app_crash @ 1501223953398.lostV/WindowManager ( 866 ) : Changing focus from null to Window { 18da7c8d u0 Application Error : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 } Callers=com.android.server.wm.WindowManagerService.addWindow:2660 com.android.server.wm.Session.addToDisplay:173 android.view.ViewRootImpl.setView:582 android.view.WindowManagerGlobal.addView:300D/StatusBarManagerService ( 866 ) : manageDisableList userId=0 what=0x0 pkg=Window { 18da7c8d u0 Application Error : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 } W/ActivityManager ( 866 ) : Dismiss app error dialog : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1V/WindowManager ( 866 ) : Changing focus from Window { 18da7c8d u0 Application Error : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 } to null Callers=com.android.server.wm.WindowManagerService.removeWindowLocked:2830 com.android.server.wm.WindowManagerService.removeWindowLocked:2739 com.android.server.wm.WindowManagerService.removeWindow:2729 com.android.server.wm.Session.remove:192I/Process ( 6824 ) : Sending signal . PID : 6824 SIG : 9V/Process ( 6824 ) : killProcess [ 6824 ] Callers=com.android.internal.os.RuntimeInit $ UncaughtHandler.uncaughtException:99 android.runtime.UncaughtExceptionHandler.n_uncaughtException : -2 android.runtime.UncaughtExceptionHandler.uncaughtException:37 java.lang.ThreadGroup.uncaughtException:693I/WindowState ( 866 ) : WIN DEATH : Window { 2ec5203a u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.Launcher } I/WindowState ( 866 ) : WIN DEATH : Window { 386088e1 u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccess } D/WindowStateAnimator ( 866 ) : finishExit add win to mPendingRemove . win : Window { 386088e1 u0 RBOS_2.x_0.x_1.RBOS_2.x_0.x_1/md53392bfeb2a49aa0a04b6510289d0206f.RequestAccess } I/ActivityManager ( 866 ) : Process RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 ( pid 6824 ) has diedV/WindowManager ( 866 ) : Changing focus from null to Window { 8939001 u0 com.android.settings/com.android.settings.SubSettings } Callers=com.android.server.wm.WindowManagerService.relayoutWindow:3410 com.android.server.wm.Session.relayout:202 android.view.IWindowSession $ Stub.onTransact:273 com.android.server.wm.Session.onTransact:130D/StatusBarManagerService ( 866 ) : manageDisableList userId=0 what=0x0 pkg=Window { 8939001 u0 com.android.settings/com.android.settings.SubSettings } W/InputMethodManagerService ( 866 ) : Window already focused , ignoring focus gain of : com.android.internal.view.IInputMethodClient $ Stub $ Proxy @ 29eee4cb attribute=null , token = android.os.BinderProxy @ 129961e8D/AndroidRuntime ( 6867 ) : > > > > > > START com.android.internal.os.RuntimeInit uid 2000 < < < < < < D/AndroidRuntime ( 6867 ) : CheckJNI is OFFE/jniPro ( 6867 ) : protecteyesinit , try to dlopen arm32 so : /system/lib/libprotecteyes.soE/jniPro ( 6867 ) : protecteyesinit , dlopen arm32 so : /system/lib/libprotecteyes.so , open ***success**** , now dlerror info : ( null ) D/AndroidRuntime ( 6867 ) : Calling main entry com.android.commands.am.AmD/ActivityManager ( 866 ) : for debug : forceStopPackage [ pkg : RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 , userId : -1 ] , caller [ pid:6867 , uid:2000 ] I/ActivityManager ( 866 ) : Force stopping RBOS_2.x_0.x_1.RBOS_2.x_0.x_1 appid=10189 user=0 : from pid 6867D/AndroidRuntime ( 6867 ) : Shutting down VMI/KSO_STAT ( 1466 ) : App is in background , stop update end time , ready to start a new session.E/QCOMSysDaemon ( 6886 ) : Ca n't find/open bootselect node : ( No such file or directory ) I/QCOMSysDaemon ( 6886 ) : Starting qcom system daemonE/Diag_Lib ( 6886 ) : Diag_LSM_Init : Failed to open handle to diag driver , error = 2E/QCOMSysDaemon ( 6886 ) : Diag_LSM_Init failed : 0D/TaskPersister ( 866 ) : removeObsoleteFile : deleting file=354_task.xml < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : orientation= '' vertical '' android : alpha= '' 0.9 '' android : background= '' @ drawable/rbos_2 '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : weightSum= '' 100 '' > < LinearLayout android : layout_width= '' match_parent '' android : layout_weight= '' 55 '' android : gravity= '' center '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < ImageView android : src= '' @ drawable/dtglogo3 '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_gravity= '' center '' android : id= '' @ +id/imgLogo '' / > < /LinearLayout > < LinearLayout android : layout_width= '' match_parent '' android : layout_weight= '' 45 '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' android : gravity= '' top '' android : paddingLeft= '' 25dp '' android : paddingRight= '' 25dp '' > < android.support.design.widget.TextInputLayout android : id= '' @ +id/layoutAccessCode '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : theme= '' @ style/TextLabel '' android : background= '' @ android : color/transparent '' android : layout_marginTop= '' 15dp '' > < ! -- android : background= '' @ drawable/layouttextbox '' -- > < EditText android : id= '' @ +id/txtAccessCode '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_gravity= '' center '' android : layout_marginTop= '' 15dp '' android : layout_marginBottom= '' 5dp '' android : maxLength= '' 15 '' android : digits= '' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr‌​stuvwxyz0123456789 '' android : fontFamily= '' @ string/fontFamily '' android : inputType= '' textVisiblePassword|textNoSuggestions '' android : imeOptions= '' actionDone '' android : singleLine= '' true '' android : hint= '' Access Code '' / > < /android.support.design.widget.TextInputLayout > < Button android : id= '' @ +id/btnSend '' android : textAllCaps= '' false '' android : theme= '' @ style/button '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' Send '' android : layout_marginTop= '' 15dp '' android : fontFamily= '' @ string/fontFamily '' android : textSize= '' 20dp '' android : textColor= '' # e4ecd4 '' android : background= '' @ drawable/layoutbutton '' / > < /LinearLayout > < TextView android : text= '' @ string/versionName '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_gravity= '' bottom '' android : textSize= '' 6dp '' android : gravity= '' right '' android : padding= '' 5dp '' android : textColor= '' # 0d47a1 '' / > < /LinearLayout > < ! -- Input Layout -- > < style name= '' TextLabel '' parent= '' TextAppearance.AppCompat '' > < ! -- Hint color and label color in FALSE state -- > < item name= '' android : textColorHint '' > # 000000 < /item > < item name= '' android : textSize '' > 16sp < /item > < ! -- Label color in TRUE state and bar color FALSE and TRUE State -- > < item name= '' colorAccent '' > # 0d47a1 < /item > < item name= '' colorControlNormal '' > # 000000 < /item > < item name= '' colorControlActivated '' > # 0d47a1 < /item > < /style >"
"var timeZoneInfo=TimeZoneInfo.FindSystemTimeZoneById ( viewModel.EventTimeZone ) ; var completeStartDate=TimeZoneInfo.ConvertTimeToUtc ( viewModel.StartDate , timeZoneInfo ) ; `` frameworks '' : { `` netcoreapp1.0 '' : { `` imports '' : [ `` dotnet5.6 '' , `` portable-net45+win8 '' ] } } ,"
& nbsp ; < div > Hello ! Please remember to clean the break room ! ! ! & quot ; bob & quote ; < BR > < /div >
FileUpload1.FileName= '' ClientMachine\\Image1.jpeg '' ; FileUpload.SaveAs ( ServerMachine\\Image1.jpeg ) ;
public class MyClass { public string FirstProperty { get ; set ; } public int SecondProperty { get ; set ; } } MyClass Instance1 = null ; MyClass Instance2 ; // just declaration
static void Foo ( object obj ) { } static void Bar ( ref object obj ) { } static void Main ( ) { // Compiles var a = new { } ; Foo ( a ) ; // Does not compile var b = new { } ; Bar ( ref b ) ; // Compiles object c = new { } ; Bar ( ref c ) ; }
Int32 i = new Int32 ( ) ; typeof ( Int32 ) .GetConstructor ( new Type [ 0 ] ) using System ; public class Program { public static void Main ( ) { Int32 i = new Int32 ( ) ; Console.WriteLine ( i ) ; Console.WriteLine ( typeof ( Int32 ) .GetConstructor ( new Type [ 0 ] ) == null ) ; } }
"var service = new PicasaService ( `` exampleCo-exampleApp-1 '' ) ; service.setUserCredentials ( `` uid '' , `` pwd '' ) ; AlbumQuery query = new AlbumQuery ( PicasaQuery.CreatePicasaUri ( `` default '' ) ) ; PicasaFeed feed = service.Query ( query ) ; var entry = ( PicasaEntry ) feed.Entries.SingleOrDefault ( f = > f.Title.Text == `` Trip to Italy - ALL '' ) ; var ac = new AlbumAccessor ( entry ) ; var photoQuery = new PhotoQuery ( PicasaQuery.CreatePicasaUri ( `` default '' , ac.Id ) ) ; PicasaFeed photoFeed = service.Query ( photoQuery ) ; PicasaEntry picasaEntry = photoFeed.Entries [ 0 ] ; ulong timestamp = Convert.ToUInt64 ( picasaEntry.GetPhotoExtensionValue ( `` timestamp '' ) ) ; // deduct 9 hoursDateTime dt = FromUnixTime ( pa.Timestamp ) .AddHours ( -9 ) ; picasaEntry.SetPhotoExtensionValue ( `` timestamp '' , Convert.ToString ( ToUnixTime ( dt ) ) ) ; var updatedEntry = ( PicasaEntry ) picasaEntry.Update ( ) ;"
"await Task < int > .Factory.FromAsync ( ( cb , state ) = > stream.BeginRead ( buffer , offset , readLen - offset ) , stream.EndRead , null ) ;"
"public static void Execute ( string 1 , string 2 ) public class Test { public string s1 ; public void Run ( string s2 ) { MyOtherClass.Execute ( s2 , s1 ) } }"
"public class SomeEntity { // full review details here } var partialObjects = from e in db.SomeEntities select new PartialEntity { Column1 = e.Column1 , Column2 = e.Column2 } ;"
"var test = loUnitOfWork.Context.Set < DAL.File > ( ) ; public partial class File : BaseEntity { public int Id { get ; set ; } public string FilePath { get ; set ; } public string FileName { get ; set ; } public virtual ICollection < FilePerformer > FilePerformerCollection { get ; set ; } public virtual ICollection < FileProperty > FilePropertyCollection { get ; set ; } public File ( ) { FilePerformerCollection = new List < FilePerformer > ( ) ; FilePropertyCollection = new List < FileProperty > ( ) ; InitializePartial ( ) ; } partial void InitializePartial ( ) ; } SELECT [ Extent1 ] . [ Id ] AS [ Id ] , [ Extent1 ] . [ FilePath ] AS [ FilePath ] , [ Extent1 ] . [ FileName ] AS [ FileName ] , [ Extent1 ] . [ PerformerFolder_Id ] AS [ PerformerFolder_Id ] FROM [ dbo ] . [ File ] AS [ Extent1 ]"
"double [ ] a = Enumerable.Range ( 0 , 7 ) .Cast < double > ( ) .ToArray ( ) ; double [ ] a = Enumerable.Range ( 0 , 7 ) .Select ( x = > ( double ) x ) .ToArray ( ) ;"
public void Initialize ( /*Some configuration parameters here*/ ) { m_Container = new UnityContainer ( ) ; /*Regestering dependencies*/ m_Distributor = m_Container.Resolve < ISimpleFeedMessageDistributor > ( ) ; } public void Start ( ) { if ( m_Distributor == null ) { throw new ApplicationException ( `` Initialize should be called before start '' ) ; } m_Distributor.Start ( ) ; } public void Close ( ) { if ( m_Distributor ! = null ) { m_Distributor.Close ( ) ; } }
"Completed 1024x1024 pixels with 700 points in ... For Loop ( Inline ) : 19636msFor Loop : 12612msParallel.For Loop : 3835ms Completed 1024x1024 pixels with 700 points in ... For Loop ( Inline ) : 23409msFor Loop : 24373msParallel.For Loop : 6839ms using System ; using System.Diagnostics ; using System.Threading.Tasks ; namespace TextureFromPoints { class Program { const int numPoints = 700 ; const int textureSize = 1024 ; static Random rnd = new Random ( ) ; static void Main ( string [ ] args ) { while ( true ) { Console.WriteLine ( `` Starting '' ) ; Console.WriteLine ( ) ; var pointCloud = new Vector3 [ numPoints ] ; for ( int i = 0 ; i < numPoints ; i++ ) pointCloud [ i ] = new Vector3 ( textureSize ) ; var result1 = new Vector3 [ textureSize , textureSize ] ; var result2 = new Vector3 [ textureSize , textureSize ] ; var result3 = new Vector3 [ textureSize , textureSize ] ; var sw1 = Stopwatch.StartNew ( ) ; for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) { var targetPos = new Vector3 ( x , y , 0 ) ; var nearestV3 = pointCloud [ 0 ] ; var nearestV3Distance = nearestV3.DistanceToPoint ( targetPos ) ; for ( int i = 1 ; i < numPoints ; i++ ) { var currentV3 = pointCloud [ i ] ; var currentV3Distance = currentV3.DistanceToPoint ( targetPos ) ; if ( currentV3Distance < nearestV3Distance ) { nearestV3 = currentV3 ; nearestV3Distance = currentV3Distance ; } } result1 [ x , y ] = nearestV3 ; } sw1.Stop ( ) ; var sw2 = Stopwatch.StartNew ( ) ; for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) Computation ( pointCloud , result2 , x , y ) ; sw2.Stop ( ) ; var sw3 = Stopwatch.StartNew ( ) ; Parallel.For ( 0 , textureSize , x = > { for ( int y = 0 ; y < textureSize ; y++ ) Computation ( pointCloud , result3 , x , y ) ; } ) ; sw3.Stop ( ) ; Console.WriteLine ( `` Completed { 0 } x { 0 } pixels with { 1 } points in ... '' , textureSize , numPoints ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` For Loop ( Inline ) '' , sw1.ElapsedMilliseconds ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` For Loop '' , sw2.ElapsedMilliseconds ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` Parallel.For Loop '' , sw3.ElapsedMilliseconds ) ; Console.WriteLine ( ) ; Console.Write ( `` Verifying Data : `` ) ; Console.WriteLine ( CheckResults ( result1 , result2 ) & & CheckResults ( result1 , result3 ) ? `` Valid '' : `` Error '' ) ; Console.WriteLine ( ) ; Console.WriteLine ( ) ; Console.ReadLine ( ) ; } } private static bool CheckResults ( Vector3 [ , ] lhs , Vector3 [ , ] rhs ) { for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) if ( ! lhs [ x , y ] .Equals ( rhs [ x , y ] ) ) return false ; return true ; } private static void Computation ( Vector3 [ ] pointCloud , Vector3 [ , ] result , int x , int y ) { var targetPos = new Vector3 ( x , y , 0 ) ; var nearestV3 = pointCloud [ 0 ] ; var nearestV3Distance = nearestV3.DistanceToPoint ( targetPos ) ; for ( int i = 1 ; i < numPoints ; i++ ) { var currentV3 = pointCloud [ i ] ; var currentV3Distance = currentV3.DistanceToPoint ( targetPos ) ; if ( currentV3Distance < nearestV3Distance ) { nearestV3 = currentV3 ; nearestV3Distance = currentV3Distance ; } } result [ x , y ] = nearestV3 ; } struct Vector3 { public float x ; public float y ; public float z ; public Vector3 ( float x , float y , float z ) { this.x = x ; this.y = y ; this.z = z ; } public Vector3 ( float randomDistance ) { this.x = ( float ) rnd.NextDouble ( ) * randomDistance ; this.y = ( float ) rnd.NextDouble ( ) * randomDistance ; this.z = ( float ) rnd.NextDouble ( ) * randomDistance ; } public static Vector3 operator - ( Vector3 a , Vector3 b ) { return new Vector3 ( a.x - b.x , a.y - b.y , a.z - b.z ) ; } public float sqrMagnitude ( ) { return x * x + y * y + z * z ; } public float DistanceToPoint ( Vector3 point ) { return ( this - point ) .sqrMagnitude ( ) ; } } } } using System ; using System.Diagnostics ; using System.Threading.Tasks ; namespace TextureFromPoints { class RevisedProgram { const int numPoints = 700 ; const int textureSize = 1024 ; static Random rnd = new Random ( ) ; static void Main ( string [ ] args ) { while ( true ) { Console.WriteLine ( `` Starting REVISED '' ) ; Console.WriteLine ( ) ; var pointCloud = new Vector3 [ numPoints ] ; for ( int i = 0 ; i < numPoints ; i++ ) pointCloud [ i ] = new Vector3 ( textureSize ) ; var result1 = new Vector3 [ textureSize , textureSize ] ; var result2 = new Vector3 [ textureSize , textureSize ] ; var result3 = new Vector3 [ textureSize , textureSize ] ; var sw1 = Inline ( pointCloud , result1 ) ; var sw2 = NotInline ( pointCloud , result2 ) ; var sw3 = Parallelized ( pointCloud , result3 ) ; Console.WriteLine ( `` Completed { 0 } x { 0 } pixels with { 1 } points in ... '' , textureSize , numPoints ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` For Loop ( Inline ) '' , sw1.ElapsedMilliseconds ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` For Loop '' , sw2.ElapsedMilliseconds ) ; Console.WriteLine ( `` { 0 } : { 1 } ms '' , `` Parallel.For Loop '' , sw3.ElapsedMilliseconds ) ; Console.WriteLine ( ) ; Console.Write ( `` Verifying Data : `` ) ; Console.WriteLine ( CheckResults ( result1 , result2 ) & & CheckResults ( result1 , result3 ) ? `` Valid '' : `` Error '' ) ; Console.WriteLine ( ) ; Console.WriteLine ( ) ; Console.ReadLine ( ) ; } } private static Stopwatch Parallelized ( Vector3 [ ] pointCloud , Vector3 [ , ] result3 ) { var sw3 = Stopwatch.StartNew ( ) ; Parallel.For ( 0 , textureSize , x = > { for ( int y = 0 ; y < textureSize ; y++ ) Computation ( pointCloud , result3 , x , y ) ; } ) ; sw3.Stop ( ) ; return sw3 ; } private static Stopwatch NotInline ( Vector3 [ ] pointCloud , Vector3 [ , ] result2 ) { var sw2 = Stopwatch.StartNew ( ) ; for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) Computation ( pointCloud , result2 , x , y ) ; sw2.Stop ( ) ; return sw2 ; } private static Stopwatch Inline ( Vector3 [ ] pointCloud , Vector3 [ , ] result1 ) { var sw1 = Stopwatch.StartNew ( ) ; for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) { var targetPos = new Vector3 ( x , y , 0 ) ; var nearestV3 = pointCloud [ 0 ] ; Vector3 temp1 = new Vector3 ( nearestV3.x - targetPos.x , nearestV3.y - targetPos.y , nearestV3.z - targetPos.z ) ; var nearestV3Distance = temp1.x * temp1.x + temp1.y * temp1.y + temp1.z * temp1.z ; for ( int i = 1 ; i < numPoints ; i++ ) { var currentV3 = pointCloud [ i ] ; Vector3 temp2 = new Vector3 ( currentV3.x - targetPos.x , currentV3.y - targetPos.y , currentV3.z - targetPos.z ) ; var currentV3Distance = temp2.x * temp2.x + temp2.y * temp2.y + temp2.z * temp2.z ; if ( currentV3Distance < nearestV3Distance ) { nearestV3 = currentV3 ; nearestV3Distance = currentV3Distance ; } } result1 [ x , y ] = nearestV3 ; } sw1.Stop ( ) ; return sw1 ; } private static bool CheckResults ( Vector3 [ , ] lhs , Vector3 [ , ] rhs ) { for ( int x = 0 ; x < textureSize ; x++ ) for ( int y = 0 ; y < textureSize ; y++ ) if ( ! lhs [ x , y ] .Equals ( rhs [ x , y ] ) ) return false ; return true ; } private static void Computation ( Vector3 [ ] pointCloud , Vector3 [ , ] result , int x , int y ) { var targetPos = new Vector3 ( x , y , 0 ) ; var nearestV3 = pointCloud [ 0 ] ; Vector3 temp1 = new Vector3 ( nearestV3.x - targetPos.x , nearestV3.y - targetPos.y , nearestV3.z - targetPos.z ) ; var nearestV3Distance = temp1.x * temp1.x + temp1.y * temp1.y + temp1.z * temp1.z ; for ( int i = 1 ; i < numPoints ; i++ ) { var currentV3 = pointCloud [ i ] ; Vector3 temp2 = new Vector3 ( currentV3.x - targetPos.x , currentV3.y - targetPos.y , currentV3.z - targetPos.z ) ; var currentV3Distance = temp2.x * temp2.x + temp2.y * temp2.y + temp2.z * temp2.z ; if ( currentV3Distance < nearestV3Distance ) { nearestV3 = currentV3 ; nearestV3Distance = currentV3Distance ; } } result [ x , y ] = nearestV3 ; } struct Vector3 { public float x ; public float y ; public float z ; public Vector3 ( float x , float y , float z ) { this.x = x ; this.y = y ; this.z = z ; } public Vector3 ( float randomDistance ) { this.x = ( float ) rnd.NextDouble ( ) * randomDistance ; this.y = ( float ) rnd.NextDouble ( ) * randomDistance ; this.z = ( float ) rnd.NextDouble ( ) * randomDistance ; } } } } Completed 1024x1024 pixels with 700 points in ... For Loop ( Inline ) : 3820msFor Loop : 3962msParallel.For Loop : 1681ms Completed 1024x1024 pixels with 700 points in ... For Loop ( Inline ) : 10978msFor Loop : 10924msParallel.For Loop : 3073ms"
var showHistory = ( bool ) Session.Contents [ `` ShowHistory '' ] ;
public class Person { public virtual string NameIdHTML { get { return `` < a href='/People/Detail/ '' + Id + `` ' > '' + Name + `` < /a > ( `` + Id + `` ) '' ; } } }
"public sealed class C { public static readonly C C1 = new C ( 0 , 1 ) ; public static readonly C C2 = new C ( 2 , 3 ) ; private readonly int x ; private readonly int y ; private C ( int x , int y ) { this.x = x ; this.y = y ; } public int X { get { return this.x ; } } public int Y { get { return this.y ; } } } public sealed class C { public static readonly C C1 = new C ( ) ; public static readonly C C2 = new C ( ) ; private C ( ) { } }"
"// produce list items out of the communitiesIEnumerable < ListItem > items = communities.Select ( community = > new ListItem ( community.Name , community.Id.ToString ( ) ) ) ; // mark the right list item as selected , if neededif ( platform.CommunityId > 0 ) { string strCommunityId = platform.CommunityId.ToString ( ) ; ListItem selectedItem = items.FirstOrDefault ( item = > item.Value == strCommunityId ) ; if ( selectedItem ! = null ) selectedItem.Selected = true ; } // now items do not store any updated item !"
"public ValidationResult Method1 ( int number , string family ) { var validationResult = new validationResult ( ) ; if ( number > 10 || family= '' akbari '' ) { validationResult.Errors.Add ( new ValidationFailure ( `` '' , `` Invalid Number '' ) ) ; } return validationResult ; } public ValidationResult Method1 ( string name ) { var validationResult = new validationResult ( ) ; if ( name.Length > 20 ) { validationResult.Errors.Add ( new ValidationFailure ( `` '' , `` Invalid name '' ) ) ; } return validationResult ; } public ValidationResult Method1 ( double average , string family ) { var validationResult = new validationResult ( ) ; if ( average < 14 ) { validationResult.Errors.Add ( new ValidationFailure ( `` '' , `` Invalid average '' ) ) ; } return validationResult ; } var validationResult = Method1 ( 20 , `` test '' ) ; if ( ! validationResult.IsValid ) { return validationResult.FirstError ( ) ; } validationResult = Method2 ( `` Samsung '' ) ; if ( ! validationResult.IsValid ) { return validationResult.FirstError ( ) ; } validationResult = Method3 ( 15.5 ) ; if ( ! validationResult.IsValid ) { return validationResult.FirstError ( ) ; }"
"if ( ! String.IsNullOrEmpty ( returnUrl ) ) { return Redirect ( returnUrl ) ; } return RedirectToAction ( `` Open '' , `` ServiceCall '' ) ; if ( ! String.IsNullOrEmpty ( returnUrl ) ) { return Redirect ( returnUrl ) ; } else { return RedirectToAction ( `` Open '' , `` ServiceCall '' ) ; }"
"byte [ ] _argbs = null ; static readonly Bitmap _bmUnderlay = Properties.Resources.bg ; static Bitmap _bmpRender = new Bitmap ( 1024 , 768 , System.Drawing.Imaging.PixelFormat.Format24bppRgb ) ; int bmpHeight = Properties.Resources.bg.Height ; int bmpWidth = Properties.Resources.bg.Width ; static BufferedGraphicsContext _bgc = new BufferedGraphicsContext ( ) ; internal unsafe void FillBackBuffer ( Point cameraPos ) { // lock up the parts of the original image to read ( parts of it ) System.Drawing.Imaging.BitmapData bmd = _bmUnderlay.LockBits ( new Rectangle ( cameraPos.X , cameraPos.Y , 1024 , 768 ) , System.Drawing.Imaging.ImageLockMode.ReadOnly , System.Drawing.Imaging.PixelFormat.Format24bppRgb ) ; // get the address of the first line . IntPtr ptr = bmd.Scan0 ; //if ( _argbs == null || _argbs.Length ! = bmd.Stride * bmd.Height ) // _argbs = new byte [ bmd.Stride * bmd.Height ] ; if ( _argbs == null || _argbs.Length ! = 1024 * 3 * 768 ) _argbs = new byte [ 1024 * 3 * 768 ] ; // copy data out to a buffer Marshal.Copy ( ptr , _argbs , 0 , 1024 * 3 * 768 ) ; _bmUnderlay.UnlockBits ( bmd ) ; // lock the new image to write to ( all of it ) System.Drawing.Imaging.BitmapData bmdNew = _bmpRender.LockBits ( new Rectangle ( 0 , 0 , 1024 , 768 ) , System.Drawing.Imaging.ImageLockMode.ReadWrite , System.Drawing.Imaging.PixelFormat.Format24bppRgb ) ; // copy data to new bitmap Marshal.Copy ( _argbs , 0 , bmdNew.Scan0 , 1024 * 3 * 768 ) ; _bmpRender.UnlockBits ( bmdNew ) ; } private unsafe void _btnGo_Click ( object sender , EventArgs e ) { // less than 2 ms to complete ! ! ! ! ! ! ! ! FillBackBuffer ( new Point ( ) ) ; using ( BufferedGraphics bg = _bgc.Allocate ( CreateGraphics ( ) , ClientRectangle ) ) { System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ( ) ; sw.Start ( ) ; ///// /// // This method takes over 17 ms to complete bg.Graphics.DrawImageUnscaled ( _bmpRender , new Point ( ) ) ; // /// ///// sw.Start ( ) ; this.Text = sw.Elapsed.TotalMilliseconds.ToString ( ) ; bg.Render ( ) ; } }"
"class MyClass { int var1 ; int var2 ; int var3 ; int var4 ; public MyClass ( int var1 , int var2 , int var3 , int var4 ) { this.var1 = var1 ; this.var2 = var2 ; this.var3 = var3 ; this.var4 = var4 ; } }"
"type MyRecord = { X : int ; Y : int ; Z : int } let myRecord1 = { X = 1 ; Y = 2 ; Z = 3 ; } let myRecord2 = { myRecord1 with Y = 100 ; Z = 2 } MyRecord myRecord2 = myRecord .CopyAndUpdate ( p= > p.Y , 10 ) .CopyAndUpdate ( p= > p.Z , 2 ) T CopyAndUpdate < T , P > ( this T , Expression < Func < T , P > > selector , P value )"
source destfilename.ext % programfiles ( x86 ) % \FolderName\ `` Could not find a part of the path % programfiles ( x86 ) % \FolderName\filename.ext ''
"[ ScaffoldTable ( true ) , MetadataType ( typeof ( Fees.Metadata ) ) ] public partial class Fees { public class Metadata { [ FilterUIHint ( `` DateRange '' ) ] public object InvoiceDate ; } {"
"VisitID | ActionID | StartTime | EndTime 0 | 0 | 1/1/2013 | 1/2/2013 1 | 0 | 1/2/2013 | 1/4/2013 1 | 1 | 1/4/2013 | 1/7/2013 2 | 0 | 1/4/2013 | 1/5/2013 2 | 1 | 1/5/2013 | 1/6/2013 2 | 2 | 1/6/2013 | 1/7/2013 VisitID | TotalTime 0 | 1 1 | 5 2 | 3 var first = db.Visits.Where ( v = > v.ActionID == 0 ) var last = db.Visits.GroupBy ( x = > x.VisitID ) .Select ( g = > g.OrderByDescending ( x = > x.ActionID ) .First ( ) ) first.Join ( last , f = > f.VisitID , l = > l.VisitID , ( f , l ) new { VisitID = Key , TotalTime = l.EndTime - f.StartTime } ) ;"
"//Slopes float slopeY = max.Y-min.Y ; float slopeZ = max.Z-min.Z ; float slopeX = max.X-min.X ; float angle = ( float ) Math.Atan ( slopeZ/slopeY ) ; //Console.WriteLine ( OpenTK.Math.Functions.RadiansToDegrees ( ( float ) Math.Atan ( slopeZ/slopeY ) ) .ToString ( ) + '' degrees incline '' ) ; slopeY = slopeY/slopeZ ; float slopeZX = slopeY/slopeX ; //End slopes float surfaceposX = max.X-coord.X ; float surfaceposY = max.Y-coord.Y ; float surfaceposZ = min.Z-coord.Z ; min-=sval ; max+=sval ; //Surface coords //End surface coords //Y SHOULD = mx+b , where M = slope and X = surfacepos , and B = surfaceposZ if ( coord.X < max.X & coord.X > min.X & coord.Y > min.Y & coord.Y < max.Y & coord.Z > min.Z & coord.Z < max.Z ) { if ( slopeY ! =0 ) { Console.WriteLine ( `` Slope = `` +slopeY.ToString ( ) + '' SlopeZX= '' +slopeZX.ToString ( ) + '' surfaceposZ= '' +surfaceposZ.ToString ( ) ) ; Console.WriteLine ( surfaceposY- ( surfaceposY*slopeY ) ) ; //System.Threading.Thread.Sleep ( 40000 ) ; if ( surfaceposY- ( surfaceposZ*slopeY ) < 3 || surfaceposY- ( surfaceposX*slopeZX ) < 3 ) { return true ; } else { return false ; } } else { return true ; } } else { return false ; } //Slopes float slopeY = max.Y-min.Y ; float slopeZ = max.Z-min.Z ; float slopeX = max.X-min.X ; float angle = ( float ) Math.Atan ( slopeZ/slopeY ) ; //Console.WriteLine ( OpenTK.Math.Functions.RadiansToDegrees ( ( float ) Math.Atan ( slopeZ/slopeY ) ) .ToString ( ) + '' degrees incline '' ) ; slopeY = slopeY/slopeZ ; float slopey = slopeY+1/slopeZ ; float slopeZX = slopeY/slopeX ; //End slopes float surfaceposX = min.X-coord.X ; float surfaceposY = max.Y-coord.Y ; float surfaceposZ = min.Z-coord.Z ; min-=sval ; max+=sval ; //Surface coords //End surface coords //Y SHOULD = mx+b , where M = slope and X = surfacepos , and B = surfaceposZ if ( coord.X < max.X & coord.X > min.X & coord.Y > min.Y & coord.Y < max.Y & coord.Z > min.Z & coord.Z < max.Z ) { if ( slopeY ! =0 ) { Console.WriteLine ( `` Slope = `` +slopeY.ToString ( ) + '' SlopeZX= '' +slopeZX.ToString ( ) + '' surfaceposZ= '' +surfaceposZ.ToString ( ) ) ; Console.WriteLine ( surfaceposY- ( surfaceposY*slopeY ) ) ; //System.Threading.Thread.Sleep ( 40000 ) ; surfaceposZ = Math.Abs ( surfaceposZ ) ; if ( surfaceposY > ( surfaceposZ*slopeY ) & surfaceposY-2 < ( surfaceposZ*slopeY ) || surfaceposY > ( surfaceposX*slopeZX ) & surfaceposY-2 < ( surfaceposX*slopeZX ) ) { return true ; } else { return false ; } } else { return true ; } } else { return false ; }"
Task < int > GetIntAsync ( ) int GetInt ( ) ;
using ( PowerShell powerShellInstance = PowerShell.Create ( ) ) { powerShellInstance.AddScript ( scriptContents ) ; Collection < PSObject > PSOutput = powerShellInstance.Invoke ( ) ; if ( powerShellInstance.Streams.Information.Count > 0 ) { foreach ( var item in powerShellInstance.Streams.Information ) { //do something with info } } } }
public void Delete ( Entity item ) ; VS.public void Delete ( int Id ) ;
"unsafe class Foo { void* _ptr ; public void Fix ( ref int value ) { fixed ( void* ptr = & value ) _ptr = ptr ; } public void Increment ( ) { var pointer = ( int* ) _ptr ; ( *pointer ) ++ ; } } static class Program { static int _fieldValue = 42 ; public static void Main ( string [ ] args ) { var foo = new Foo ( ) ; foo.Fix ( ref _fieldValue ) ; foo.Increment ( ) ; } } static class Program { static Action _event ; public static void Main ( string [ ] args ) { MakerefTest ( ref _event ) ; //The invocation list is empty again var isEmpty = _event == null ; } static void MakerefTest ( ref Action multicast ) { Action handler = ( ) = > Console.WriteLine ( `` Hello world . `` ) ; //Assigning a handler to the delegate multicast += handler ; //Executing the delegate 's invocation list successfully if ( multicast ! = null ) multicast ( ) ; //Encapsulating the reference in a TypedReference var tr = __makeref ( multicast ) ; //Removing the handler __refvalue ( tr , Action ) -= handler ; } } static void* _ptr ; static void MakerefTest ( ref Action multicast ) { Action handler = ( ) = > Console.WriteLine ( `` Hello world . `` ) ; multicast += handler ; if ( multicast ! = null ) multicast ( ) ; var tr = __makeref ( multicast ) ; //Storing the address of the TypedReference ( which is on the stack ! ) //inside of _ptr ; _ptr = ( void* ) & tr ; //Getting the TypedReference back from the pointer : var restoredTr = * ( TypedReference* ) _ptr ; __refvalue ( restoredTr , Action ) -= handler ; } unsafe class Horror { void* _ptr ; static void Handler ( ) { Console.WriteLine ( `` Hello world . `` ) ; } public void Fix ( ref Action action ) { action += Handler ; var tr = __makeref ( action ) ; _ptr = ( void* ) & tr ; } public void Clear ( ) { var tr = * ( TypedReference* ) _ptr ; __refvalue ( tr , Action ) -= Handler ; } } interface IRefStorage < T > : IDisposable { void Store ( ref T value ) ; //IDisposable.Dispose should release the reference } unsafe class Horror : IDisposable { void* _ptr ; static void Handler ( ) { Console.WriteLine ( `` Hello world . `` ) ; } public void Fix ( ref Action action ) { action += Handler ; TypedReference tr = __makeref ( action ) ; var mem = Marshal.AllocHGlobal ( sizeof ( TypedReference ) ) ; //magic var refPtr = ( TypedReference* ) mem.ToPointer ( ) ; _ptr = refPtr ; *refPtr = tr ; } public void Dispose ( ) { var tr = * ( TypedReference* ) _ptr ; __refvalue ( tr , Action ) -= Handler ; Marshal.FreeHGlobal ( ( IntPtr ) _ptr ) ; } }"
"public Point Location { get { var rangePixels = Range * PixelsPerMile ; var xCoordinate = OwnLocation.X * MapScale + rangePixels * Math.Cos ( Theta ) ; var yCoordinate = OwnLocation.Y * MapScale - rangePixels * Math.Sin ( Theta ) ; return new Point ( xCoordinate , yCoordinate ) ; } }"
"public static string GetTime ( HttpContext context ) { return DateTime.Now.ToString ( `` T '' ) ; } The cached time is : < % = DateTime.Now.ToString ( `` T '' ) % > < hr / > The substitution time is : < % Response.WriteSubstitution ( GetTime ) ; % > public static string GetTime ( HttpContext context , int newArgument ) { // i 'd like to get sth from DB by newArgument // return data depending on the db values // ... this example is too simple for my usage if ( newArgument == 1 ) return `` '' ; else return DateTime.Now.ToString ( `` T '' ) ; }"
class ABC { private int myInt = 1 ; private double myDouble = 2 ; private String myString = `` 123 '' ; private SomeRandomClass1 myRandomClass1 = new ... private SomeRandomClass2 myRandomClass2 = new ... //pseudo code public int myHashCode ( ) { return 37 * myInt.hashcode ( ) * myDouble.hashCode ( ) * ... * myRandomClass.hashcode ( ) } }
var inputValue= `` 90- '' ; Console.WriteLine ( decimal.Parse ( inputValue ) ) ; Console.WriteLine ( double.Parse ( inputValue ) ) ;
"/// < summary > /// Gets a < see cref= '' System.Collections.Generic.List '' / > of < see cref= '' TEntity '' / > /// objects that match the passed JSON string . /// < /summary > /// < param name= '' myCriteria '' > A list of JSON strings containing a key/value pair of `` parameterNames '' and `` parameterValues '' . < /param > /// < param name= '' myMatchMethod '' > Defines which matching method to use when finding matches on the < paramref name= '' myCriteria '' / > . < /param > /// < returns > /// A < see cref= '' System.Collections.Generic.List '' / > of < see cref= '' TEntity '' / > /// objects . /// < /returns > /// < seealso cref= '' TEntity '' / > /// /// < seealso cref= '' Common.MultipleCriteriaMatchMethod '' / > /// < remarks > /// This method takes a < see cref= '' System.Collections.Generic.List '' / > of JSON strings , and a < see cref= '' Common.MultipleCriteriaMatchMethod '' / > and returns a /// < see cref= '' System.Collections.Generic.List '' / > of all matching /// < see cref= '' TEntity '' / > objects from the back-end database . The < paramref name= '' myMatchMethod '' / > is used to determine how to match when multiple < paramref name= '' myCriteria '' / > are passed . You can require that any results must match on ALL the passed JSON criteria , or on ANY of the passed criteria . This is essentially an `` AND '' versus and `` OR '' comparison . /// < /remarks > [ ContractVerification ( true ) ] public static List < TEntity > GetByCriteria < TContext , TEntity > ( List < string > myCriteria , Common.MultipleCriteriaMatchMethod myMatchMethod ) where TContext : System.Data.Objects.ObjectContext , new ( ) where TEntity : System.Data.Objects.DataClasses.EntityObject { // Setup Contracts Contract.Requires ( myCriteria ! = null ) ; TContext db = new TContext ( ) ; // Intialize return variable List < TEntity > result = null ; // Initialize working variables // Set the predicates to True by default ( for `` AND '' matches ) var predicate = PredicateBuilder.True < TEntity > ( ) ; var customPropertiesPredicate = PredicateBuilder.True < TEntity > ( ) ; // Set the predicates to Falase by default ( for `` OR '' matches ) if ( myMatchMethod == Common.MultipleCriteriaMatchMethod.MatchOnAny ) { predicate = PredicateBuilder.False < TEntity > ( ) ; customPropertiesPredicate = PredicateBuilder.False < TEntity > ( ) ; } // Loop over each Criteria object in the passed list of criteria foreach ( string x in myCriteria ) { // Set the Criteria to local scope ( sometimes there are scope problems with LINQ ) string item = x ; if ( item ! = null ) { JsonLinqParser parser = JsonLinqParserFactory.GetParser ( typeof ( TEntity ) ) ; // If the designated MultipleCriteriaMatchMethod is `` MatchOnAll '' then use `` AND '' statements if ( myMatchMethod == Common.MultipleCriteriaMatchMethod.MatchOnAll ) { predicate = predicate.Expand ( ) .And < TEntity > ( parser.CreateCriteriaExpression < TEntity > ( item ) .Expand ( ) ) ; customPropertiesPredicate = customPropertiesPredicate.Expand ( ) .And < TEntity > ( parser.CreateCriteriaExpressionForCustomProperties < TEntity > ( item ) .Expand ( ) ) ; } // If the designated MultipleCriteriaMatchMethod is `` MatchOnAny '' then use `` OR '' statements else if ( myMatchMethod == Common.MultipleCriteriaMatchMethod.MatchOnAny ) { predicate = predicate.Expand ( ) .Or < TEntity > ( parser.CreateCriteriaExpression < TEntity > ( item ) .Expand ( ) ) ; customPropertiesPredicate = customPropertiesPredicate.Expand ( ) .Or < TEntity > ( parser.CreateCriteriaExpressionForCustomProperties < TEntity > ( item ) .Expand ( ) ) ; } } } // Set a temporary var to hold the results List < TEntity > qry = null ; // Set some Contract Assumptions to waive Static Contract warnings on build Contract.Assume ( predicate ! = null ) ; Contract.Assume ( customPropertiesPredicate ! = null ) ; // Run the query against the backend database qry = db.CreateObjectSet < TEntity > ( ) .AsExpandable < TEntity > ( ) .Where < TEntity > ( predicate ) .ToList < TEntity > ( ) ; //qry = db.CreateObjectSet < TEntity > ( ) .Where ( predicate ) .ToList < TEntity > ( ) ; // Run the query for custom properties against the resultset obtained from the database qry = qry.Where < TEntity > ( customPropertiesPredicate.Compile ( ) ) .ToList < TEntity > ( ) ; // Verify that there are results if ( qry ! = null & & qry.Count ! = 0 ) { result = qry ; } // Return the results return result ; } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using LinqKit ; using Newtonsoft.Json.Linq ; namespace DAL { internal class JsonLinqParser_Paser : JsonLinqParser { internal override System.Linq.Expressions.Expression < Func < TEntity , bool > > CreateCriteriaExpression < TEntity > ( string myCriteria ) { var predicate = PredicateBuilder.True < BestAvailableFIP > ( ) ; JObject o = JObject.Parse ( myCriteria ) ; // bmp decimal _bmp ; if ( o [ `` bmp '' ] ! = null & & decimal.TryParse ( ( string ) o [ `` bmp '' ] , out _bmp ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.bmp == _bmp ) ; } // COUNTY if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` COUNTY '' ] ) ) { string _myStringValue = ( string ) o [ `` COUNTY '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.COUNTY.Contains ( _myStringValue ) ) ; } // emp decimal _emp ; if ( o [ `` emp '' ] ! = null & & decimal.TryParse ( ( string ) o [ `` emp '' ] , out _emp ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.emp == _emp ) ; } // FIPSCO_STR if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` FIPSCO_STR '' ] ) ) { string _myStringValue = ( string ) o [ `` FIPSCO_STR '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.FIPSCO_STR.Contains ( _myStringValue ) ) ; } // FIPSCODE double _FIPSCODE ; if ( o [ `` FIPSCODE '' ] ! = null & & double.TryParse ( ( string ) o [ `` FIPSCODE '' ] , out _FIPSCODE ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.FIPSCODE == _FIPSCODE ) ; } // FROMDESC if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` FROMDESC '' ] ) ) { string _myStringValue = ( string ) o [ `` FROMDESC '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.FROMDESC.Contains ( _myStringValue ) ) ; } // LANEMI decimal _LANEMI ; if ( o [ `` LANEMI '' ] ! = null & & decimal.TryParse ( ( string ) o [ `` LANEMI '' ] , out _LANEMI ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.LANEMI == _LANEMI ) ; } // MPO_ABBV if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` MPO_ABBV '' ] ) ) { string _myStringValue = ( string ) o [ `` MPO_ABBV '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.MPO_ABBV.Contains ( _myStringValue ) ) ; } // owner if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` owner '' ] ) ) { string _myStringValue = ( string ) o [ `` owner '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.owner.Contains ( _myStringValue ) ) ; } // PASER decimal _PASER ; if ( o [ `` PASER '' ] ! = null & & decimal.TryParse ( ( string ) o [ `` PASER '' ] , out _PASER ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.PASER == _PASER ) ; } // PASER_GROUP if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` PASER_GROUP '' ] ) ) { string _myStringValue = ( string ) o [ `` PASER_GROUP '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.PASER_GROUP.Contains ( _myStringValue ) ) ; } // pr decimal _pr ; if ( o [ `` pr '' ] ! = null & & decimal.TryParse ( ( string ) o [ `` pr '' ] , out _pr ) ) { predicate = predicate.And < BestAvailableFIP > ( x = > x.pr == _pr ) ; } // RDNAME if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` RDNAME '' ] ) ) { string _myStringValue = ( string ) o [ `` RDNAME '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.RDNAME.Contains ( _myStringValue ) ) ; } // SPDR_ABBV if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` SPDR_ABBV '' ] ) ) { string _myStringValue = ( string ) o [ `` SPDR_ABBV '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.SPDR_ABBV.Contains ( _myStringValue ) ) ; } // TODESC if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` TODESC '' ] ) ) { string _myStringValue = ( string ) o [ `` TODESC '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.TODESC.Contains ( _myStringValue ) ) ; } // TYPE if ( ! string.IsNullOrWhiteSpace ( ( string ) o [ `` TYPE '' ] ) ) { string _myStringValue = ( string ) o [ `` TYPE '' ] ; predicate = predicate.And < BestAvailableFIP > ( x = > x.TYPE.Contains ( _myStringValue ) ) ; } return predicate ; } internal override System.Linq.Expressions.Expression < Func < TEntity , bool > > CreateCriteriaExpressionForCustomProperties < TEntity > ( string myCriteria ) { var predicate = PredicateBuilder.True < TEntity > ( ) ; return predicate ; } } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Linq.Expressions ; namespace DAL { abstract class JsonLinqParser { abstract internal Expression < Func < TEntity , bool > > CreateCriteriaExpression < TEntity > ( string myCriteria ) where TEntity : System.Data.Objects.DataClasses.EntityObject ; abstract internal Expression < Func < TEntity , bool > > CreateCriteriaExpressionForCustomProperties < TEntity > ( string myCriteria ) where TEntity : System.Data.Objects.DataClasses.EntityObject ; } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace DAL { internal static class JsonLinqParserFactory { internal static JsonLinqParser GetParser ( Type type ) { switch ( type.Name ) { case `` BestAvailableFIP '' : return new JsonLinqParser_Paser ( ) ; default : //if we reach this point then we failed to find a matching type . Throw //an exception . throw new Exception ( `` Failed to find a matching JsonLinqParser in JsonLinqParserFactory.GetParser ( ) - Unknown Type : `` + type.Name ) ; } } } }"
"public class SimpleCanvas : Panel { # region Variables # region Left Property public static double GetLeft ( UIElement element ) { if ( element == null ) { throw new ArgumentNullException ( `` element '' ) ; } object value = element.GetValue ( LeftProperty ) ; Type valueType = value.GetType ( ) ; return Convert.ToDouble ( value ) ; } public static void SetLeft ( UIElement element , double value ) { if ( element == null ) { throw new ArgumentNullException ( `` element '' ) ; } element.SetValue ( LeftProperty , value ) ; } public static readonly DependencyProperty LeftProperty = DependencyProperty.RegisterAttached ( `` Left '' , typeof ( double ) , typeof ( SimpleCanvas ) , new PropertyMetadata ( 0 , OnLeftPropertyChanged ) ) ; public static void OnLeftPropertyChanged ( DependencyObject source , DependencyPropertyChangedEventArgs e ) { UIElement element = ( UIElement ) source ; // This does n't cause ArrangeOverride below to be called element.InvalidateArrange ( ) ; } # endregion # region Top Property public static double GetTop ( UIElement element ) { if ( element == null ) { throw new ArgumentNullException ( `` element '' ) ; } object value = element.GetValue ( TopProperty ) ; return ( value == null ) ? 0 : ( double ) value ; } public static void SetTop ( UIElement element , double value ) { if ( element == null ) { throw new ArgumentNullException ( `` element '' ) ; } element.SetValue ( TopProperty , value ) ; } public static readonly DependencyProperty TopProperty = DependencyProperty.RegisterAttached ( `` Top '' , typeof ( double ) , typeof ( SimpleCanvas ) , new PropertyMetadata ( 0 , OnTopPropertyChanged ) ) ; public static void OnTopPropertyChanged ( DependencyObject source , DependencyPropertyChangedEventArgs e ) { UIElement element = ( UIElement ) source ; // This does n't cause ArrangeOverride below to be called element.InvalidateArrange ( ) ; } # endregion # endregion public SimpleCanvas ( ) { } # region Methods protected override Size MeasureOverride ( Size availableSize ) { foreach ( UIElement child in this.Children ) { child.Measure ( new Size ( double.PositiveInfinity , double.PositiveInfinity ) ) ; } return new Size ( 0 , 0 ) ; } protected override Size ArrangeOverride ( Size finalSize ) { foreach ( UIElement child in this.Children ) { double x = 0 ; double y = 0 ; double left = GetLeft ( child ) ; double top = GetTop ( child ) ; if ( ! double.IsNaN ( left ) ) { x = left ; } if ( ! double.IsNaN ( top ) ) { y = top ; } child.Arrange ( new Rect ( new Point ( x , y ) , child.DesiredSize ) ) ; } return finalSize ; } # endregion }"
IEnumerable < int > var dictionary = GetDict ( ) ; var people = GetPeople ( ) ; people = people.Where ( r = > dictionary.ContainsAny ( r.CarIds ) ) .ToList ( ) ;
public ActionResult Tool ( string id ) { // Code goes here . . } < a href= '' /Home/ @ item.Type/ @ Url.Encode ( item.Title ) '' id= '' toolTitleLink '' > @ item.Title < /a >
struct Mutable { private int x ; public int Mutate ( ) { this.x = this.x + 1 ; return this.x ; } } class Test { public readonly Mutable m = new Mutable ( ) ; static void Main ( string [ ] args ) { Test t = new Test ( ) ; System.Console.WriteLine ( t.m.Mutate ( ) ) ; System.Console.WriteLine ( t.m.Mutate ( ) ) ; System.Console.WriteLine ( t.m.Mutate ( ) ) ; } } public readonly Mutable m = new Mutable ( ) ; public Mutable m = new Mutable ( ) ;
"private int FindEntry ( TKey key ) { if ( key == null ) { ThrowHelper.ThrowArgumentNullException ( ExceptionArgument.key ) ; } if ( buckets ! = null ) { int hashCode = comparer.GetHashCode ( key ) & 0x7FFFFFFF ; for ( int i = buckets [ hashCode % buckets.Length ] ; i > = 0 ; i = entries [ i ] .next ) { if ( entries [ i ] .hashCode == hashCode & & comparer.Equals ( entries [ i ] .key , key ) ) return i ; } } return -1 ; } int hashCode = comparer.GetHashCode ( key ) & 0x7FFFFFFF ; for ( int i = buckets [ hashCode % buckets.Length ] ; i > = 0 ; i = entries [ i ] .next )"
"Private Sub SetAeroTheme ( ByVal themeFile As String , Optional ByVal colorName As String = `` NormalColor '' , Optional ByVal sizeName As String = `` NormalSize '' ) Dim regKeyPath As String = `` Software\Microsoft\Windows\CurrentVersion\ThemeManager '' Using themeService As New ServiceController ( `` Themes '' ) If themeService.Status = ServiceControllerStatus.Running Then themeService.Stop ( ) themeService.WaitForStatus ( ServiceControllerStatus.Stopped ) End If Using regKey As RegistryKey = Registry.CurrentUser.OpenSubKey ( regKeyPath , writable : =True ) regKey.SetValue ( `` LoadedBefore '' , `` 0 '' , RegistryValueKind.String ) regKey.SetValue ( `` DllName '' , themeFile , RegistryValueKind.String ) regKey.SetValue ( `` ColorName '' , colorName , RegistryValueKind.String ) regKey.SetValue ( `` SizeName '' , sizeName , RegistryValueKind.String ) End Using If themeService.Status = ServiceControllerStatus.Stopped Then themeService.Start ( ) themeService.WaitForStatus ( ServiceControllerStatus.Running ) End If End UsingEnd Sub"
"[ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` System.ServiceModel '' , `` 4.0.0.0 '' ) ] [ System.ServiceModel.ServiceContractAttribute ( Namespace = ApuConstants.Namespace ) ] public interface IApuService { [ System.ServiceModel.OperationContractAttribute ( Action = `` * '' , ReplyAction = `` * '' ) ] [ System.ServiceModel.XmlSerializerFormatAttribute ( Style = System.ServiceModel.OperationFormatStyle.Rpc , Use = System.ServiceModel.OperationFormatUse.Encoded ) ] [ System.ServiceModel.ServiceKnownTypeAttribute ( typeof ( Part ) ) ] [ return : System.ServiceModel.MessageParameterAttribute ( Name = `` return '' ) ] Brock.Web.Apu.Response check ( Brock.Web.Apu.Request request ) ; } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class Request { private RequestHeader headerField ; private Lookup lookupField ; /// < remarks/ > public RequestHeader header { get { return this.headerField ; } set { this.headerField = value ; } } /// < remarks/ > public Lookup lookup { get { return this.lookupField ; } set { this.lookupField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class RequestHeader { private string accountField ; private string idField ; /// < remarks/ > public string account { get { return this.accountField ; } set { this.accountField = value ; } } /// < remarks/ > public string id { get { return this.idField ; } set { this.idField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class Part { private string oemField ; private string hicField ; private string skuField ; private string descField ; private int daysField ; private string availField ; private string branchField ; private float listField ; private float netField ; private string typeField ; private string certField ; private string statusField ; /// < remarks/ > public string oem { get { return this.oemField ; } set { this.oemField = value ; } } /// < remarks/ > public string hic { get { return this.hicField ; } set { this.hicField = value ; } } /// < remarks/ > public string sku { get { return this.skuField ; } set { this.skuField = value ; } } /// < remarks/ > public string desc { get { return this.descField ; } set { this.descField = value ; } } /// < remarks/ > public int days { get { return this.daysField ; } set { this.daysField = value ; } } /// < remarks/ > public string avail { get { return this.availField ; } set { this.availField = value ; } } /// < remarks/ > public string branch { get { return this.branchField ; } set { this.branchField = value ; } } /// < remarks/ > public float list { get { return this.listField ; } set { this.listField = value ; } } /// < remarks/ > public float net { get { return this.netField ; } set { this.netField = value ; } } /// < remarks/ > public string type { get { return this.typeField ; } set { this.typeField = value ; } } /// < remarks/ > public string cert { get { return this.certField ; } set { this.certField = value ; } } /// < remarks/ > public string status { get { return this.statusField ; } set { this.statusField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class ResponseHeader { private string statusField ; private string reasonField ; private string accountField ; private string idField ; /// < remarks/ > public string status { get { return this.statusField ; } set { this.statusField = value ; } } /// < remarks/ > public string reason { get { return this.reasonField ; } set { this.reasonField = value ; } } /// < remarks/ > public string account { get { return this.accountField ; } set { this.accountField = value ; } } /// < remarks/ > public string id { get { return this.idField ; } set { this.idField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class Response { private ResponseHeader headerField ; private Part [ ] itemsField ; /// < remarks/ > public ResponseHeader header { get { return this.headerField ; } set { this.headerField = value ; } } /// < remarks/ > public Part [ ] items { get { return this.itemsField ; } set { this.itemsField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` svcutil '' , `` 4.0.30319.33440 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.SoapTypeAttribute ( Namespace = ApuConstants.Namespace ) ] public partial class Lookup { private string oemField ; private string hicField ; private int qtyField ; private string zipField ; /// < remarks/ > public string oem { get { return this.oemField ; } set { this.oemField = value ; } } /// < remarks/ > public string hic { get { return this.hicField ; } set { this.hicField = value ; } } /// < remarks/ > public int qty { get { return this.qtyField ; } set { this.qtyField = value ; } } /// < remarks/ > public string zip { get { return this.zipField ; } set { this.zipField = value ; } } } [ ServiceBehavior ( Namespace = ApuConstants.Namespace ) ] public class ApuService : IApuService { private readonly IApuServiceHandler _handler ; private readonly ISettingService _settingService ; public ApuService ( ) { _handler = EngineContext.Current.Resolve < IApuServiceHandler > ( ) ; _settingService = EngineContext.Current.Resolve < ISettingService > ( ) ; } public Response check ( Request request ) { if ( Authorized ( request ) ) return _handler.ProcessRequest ( request ) ; return _handler.ErrorResponse ( `` Invalid credentials '' ) ; } protected bool Authorized ( Request request ) { if ( request == null || request.header == null ) return false ; var settings = _settingService.LoadSetting < ApuSettings > ( 0 ) ; if ( ! string.Equals ( request.header.account , settings.Username , StringComparison.InvariantCultureIgnoreCase ) ) return false ; if ( ! string.Equals ( request.header.id , settings.Password ) ) return false ; return true ; } } < configuration > < system.web > < compilation targetFramework= '' 4.5.1 '' / > < /system.web > < system.serviceModel > < behaviors > < serviceBehaviors > < behavior name= '' ApuBehavior '' > < serviceMetadata httpGetEnabled= '' true '' httpsGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' true '' / > < /behavior > < /serviceBehaviors > < /behaviors > < bindings > < /bindings > < services > < service name= '' Apu.WebService.ApuService '' behaviorConfiguration= '' ApuBehavior '' > < endpoint address= '' '' binding= '' basicHttpBinding '' contract= '' Web.Apu.IApuService '' bindingNamespace= '' http : //www.testurl.com/apu '' / > < endpoint address= '' mex '' binding= '' mexHttpBinding '' contract= '' IMetadataExchange '' / > < /service > < /services > < /system.serviceModel > < /configuration > < Envelope xmlns= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < s : Header xmlns : s= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < To s : mustUnderstand= '' 1 '' xmlns= '' http : //schemas.microsoft.com/ws/2005/05/addressing/none '' > http : //localhost:15555/Plugins/Brock.Apu/Remote/ApuService.svc < /To > < /s : Header > < Body > < check xmlns= '' http : //www.testurl.com/apu '' > < request > < header > < account > apu < /account > < id > apu001 ! < /id > < /header > < lookup > < hic > 323-01327 < /hic > < oem > 5014351AB < /oem > < qty > 2 < /qty > < zip > 85304 < /zip > < /lookup > < /request > < /check > < /Body > < /Envelope > < s : Envelope xmlns : s= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < s : Body s : encodingStyle= '' http : //schemas.xmlsoap.org/soap/encoding/ '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < q1 : checkResponse xmlns : q1= '' http : //www.testurl.com/apu '' > < return href= '' # id1 '' / > < /q1 : checkResponse > < q2 : Response id= '' id1 '' xsi : type= '' q2 : Response '' xmlns : q2= '' http : //www.testurl.com/apu '' > < header href= '' # id2 '' / > < /q2 : Response > < q3 : ResponseHeader id= '' id2 '' xsi : type= '' q3 : ResponseHeader '' xmlns : q3= '' http : //www.testurl.com/apu '' > < status xsi : type= '' xsd : string '' > no < /status > < reason xsi : type= '' xsd : string '' > Invalid credentials < /reason > < account xsi : type= '' xsd : string '' / > < id xsi : type= '' xsd : string '' / > < /q3 : ResponseHeader > < /s : Body > < /s : Envelope >"
"container.Bind < IClock > ( ) .To < SystemClock > ( ) ; container.Bind < IClock > ( ) .To < SystemClock > ( ) .InSingletonScope ( ) ; private readonly IDateTime _dateTime ; private readonly IClock _clock ; public SystemManager ( IDateTime dateTime , IClock clock ) { this._dateTime = dateTime ; this._clock = clock ; }"
"private void button1_Click ( object sender , EventArgs e ) { OleDbConnection con = new OleDbConnection ( @ '' Provider=Microsoft.Jet.OLEDB.4.0 ; Data Source=C : \db1.mdb '' ) ; OleDbCommand cmd = con.CreateCommand ( ) ; cmd.CommandText = `` INSERT INTO Table1 ( Product , Manufacturer , Description , Price , Image ) VALUES ( 'Column1 ' , 'Column2 ' , 'Column3 ' , 'Column4 ' , @ img ) '' ; byte [ ] yourPhoto = imageToByteArray ( pictureBox1.Image ) ; cmd.Parameters.AddWithValue ( `` @ img '' , yourPhoto ) ; con.Open ( ) ; cmd.ExecuteNonQuery ( ) ; con.Close ( ) ; } public byte [ ] imageToByteArray ( System.Drawing.Image iImage ) { MemoryStream mMemoryStream = new MemoryStream ( ) ; iImage.Save ( mMemoryStream , System.Drawing.Imaging.ImageFormat.Png ) ; return mMemoryStream.ToArray ( ) ; }"
Project myProject = this.CurrentComponentModel.GetService < VisualStudioWorkspace > ( ) .CurrentSolution.Projects .FirstOrDefault ( p = > p.Name == `` MyProject '' ) myProject.HasDocuments == falsemyProject.Documents is Empty myProject.HasDocuments == true myProject.Documents is not Empty
"private object SystemConfigurationCacheLock = new object ( ) ; public SystemConfiguration SystemConfiguration { get { if ( HttpContext.Current.Cache [ `` SystemConfiguration '' ] == null ) lock ( SystemConfigurationCacheLock ) { if ( HttpContext.Current.Cache [ `` SystemConfiguration '' ] == null ) HttpContext.Current.Cache.Insert ( `` SystemConfiguration '' , GetSystemConfiguration ( ) , null , DateTime.Now.AddMinutes ( 1 ) , Cache.NoSlidingExpiration , new CacheItemUpdateCallback ( SystemConfigurationCacheItemUpdateCallback ) ) ; } return HttpContext.Current.Cache [ `` SystemConfiguration '' ] as SystemConfiguration ; } } private void SystemConfigurationCacheItemUpdateCallback ( string key , CacheItemUpdateReason reason , out object expensiveObject , out CacheDependency dependency , out DateTime absoluteExpiration , out TimeSpan slidingExpiration ) { dependency = null ; absoluteExpiration = DateTime.Now.AddMinutes ( 1 ) ; slidingExpiration = Cache.NoSlidingExpiration ; expensiveObject = GetSystemConfiguration ( ) ; } private SystemConfiguration GetSystemConfiguration ( ) { //Load system configuration }"
List < string > result = listA.Except ( listB ) .ToList ( ) ;
"/// < summary > /// Performs basic wildcard find and replace on a string builder , observing one of two /// wildcard characters : * matches any number of characters , or ? matches a single character./// Operates on only one wildcard per invocation ; 2 or more wildcards in < paramref name= '' find '' / > /// will cause an exception./// All characters in < paramref name= '' replaceWith '' / > are treated as literal parts of /// the replacement text./// < /summary > /// < param name= '' find '' > < /param > /// < param name= '' replaceWith '' > < /param > /// < returns > < /returns > public static StringBuilder WildcardReplace ( this StringBuilder sb , string find , string replaceWith ) { if ( find.Split ( new char [ ] { '* ' } ) .Length > 2 || find.Split ( new char [ ] { ' ? ' } ) .Length > 2 || ( find.Contains ( `` * '' ) & & find.Contains ( `` ? '' ) ) ) { throw new ArgumentException ( `` Only one wildcard is supported , but more than one was supplied . `` , `` find '' ) ; } // are we matching one character , or any number ? bool matchOneCharacter = find.Contains ( `` ? `` ) ; string [ ] parts = matchOneCharacter ? find.Split ( new char [ ] { ' ? ' } , StringSplitOptions.RemoveEmptyEntries ) : find.Split ( new char [ ] { '* ' } , StringSplitOptions.RemoveEmptyEntries ) ; int startItemIdx ; int endItemIdx ; int newStartIdx = 0 ; int length ; while ( ( startItemIdx = sb.IndexOf ( parts [ 0 ] , newStartIdx ) ) > 0 & & ( endItemIdx = sb.IndexOf ( parts [ 1 ] , startItemIdx + parts [ 0 ] .Length ) ) > 0 ) { length = ( endItemIdx + parts [ 1 ] .Length ) - startItemIdx ; newStartIdx = startItemIdx + replaceWith.Length ; // With `` ? '' wildcard , find parameter length should equal the length of its match : if ( matchOneCharacter & & length > find.Length ) break ; sb.Remove ( startItemIdx , length ) ; sb.Insert ( startItemIdx , replaceWith ) ; } return sb ; }"
"SELECT Date , ( SELECT MAX ( Date ) FROM Table AS t2 WHERE t2.Date < t1.Date ) AS PrevDateFROM Table AS t1"
"static void Main ( string [ ] args ) { Loop ( ) ; } private static void Loop ( ) { var list = new List < string > { @ '' C : \Users\Public\Music\Sample Music\Amanda.wma '' , // Size : 4.75 MB @ '' C : \Users\Public\Music\Sample Music\Despertar.wma '' , // Size : 5.92 MB @ '' C : \Users\Public\Music\Sample Music\Distance.wma '' , // Size : 6.31 MB } ; Console.WriteLine ( `` before loop '' ) ; Console.ReadLine ( ) ; foreach ( string pathname in list ) { // ... code here ... Console.WriteLine ( `` in loop '' ) ; Console.ReadLine ( ) ; } Console.WriteLine ( GC.CollectionCount ( 1 ) ) ; Console.WriteLine ( `` end loop '' ) ; Console.ReadLine ( ) ; } foreach ( ... ) { byte [ ] buffer = File.ReadAllBytes ( pathname ) ; Console.WriteLine ... } before loop : 9.000 K 1. iteration : 13.000 K2 . iteration : 19.000 K3 . iteration : 25.000 Kafter loop : 25.000 KGC.CollectionCount ( 1 ) : 2 foreach ( ... ) { byte [ ] buffer = File.ReadAllBytes ( pathname ) ; buffer = null ; Console.WriteLine ... } before loop : 9.000 K 1. iteration : 13.000 K2 . iteration : 14.000 K3 . iteration : 15.000 Kafter loop : 15.000 KGC.CollectionCount ( 1 ) : 2 foreach ( ... ) { byte [ ] buffer = File.ReadAllBytes ( pathname ) ; buffer = null ; GC.Collect ( ) ; Console.WriteLine ... } before loop : 9.000 K 1. iteration : 8.500 K2 . iteration : 8.600 K3 . iteration : 8.600 Kafter loop : 8.600 KGC.CollectionCount ( 1 ) : 3"
< services > < service name= '' LANOS.SplunkSearchService.SplunkSearch '' > < endpoint binding= '' basicHttpBinding '' bindingConfiguration= '' basicHttp '' contract= '' LANOS.SplunkSearchService.ISplunkSearch '' / > < endpoint address= '' mex '' binding= '' mexHttpBinding '' contract= '' IMetadataExchange '' / > < /service > < /services > < bindings > < basicHttpBinding > < binding name= '' basicHttp '' allowCookies= '' true '' maxBufferSize= '' 20000000 '' maxBufferPoolSize= '' 20000000 '' maxReceivedMessageSize= '' 20000000 '' > < readerQuotas maxDepth= '' 32 '' maxStringContentLength= '' 200000000 '' maxArrayLength= '' 200000000 '' / > < security mode= '' TransportCredentialOnly '' > < transport clientCredentialType= '' Windows '' / > < /security > < /binding > < /basicHttpBinding > < /bindings > < authentication mode= '' Windows '' / > < authorization > < allow roles= '' .\Developers '' / > < allow users= '' DOMAIN\ServiceAccount '' / > < deny users= '' * '' / > < /authorization >
< ? xml version= '' 1.0 '' ? > < package > < metadata > < id > MyApp < /id > < version > $ version $ < /version > < title > MyApp < /title > < authors > Me < /authors > < owners > Me < /owners > < requireLicenseAcceptance > false < /requireLicenseAcceptance > < description > Description < /description > < releaseNotes > Initial release < /releaseNotes > < copyright > Copyright 2016 < /copyright > < dependencies > < group > < dependency id= '' Newtonsoft.Json '' version= '' 8.0.2 '' / > < /group > < group targetFramework= '' net40 '' > < dependency id= '' Microsoft.Bcl '' version= '' 1.1.10 '' / > < dependency id= '' Microsoft.Bcl.Build '' version= '' 1.0.14 '' / > < dependency id= '' Microsoft.Net.Http '' version= '' 2.2.29 '' / > < /group > < /dependencies > < /metadata > < files > < file src= '' bin\release\**\MyApp.dll '' target= '' lib '' / > < /files > < /package >
"//Gets the BitmapSource from a String path : var image = ListFrames [ 0 ] .ImageLocation.SourceFrom ( ) ; var rectangle = new RectangleGeometry ( new Rect ( new System.Windows.Point ( 0 , 0 ) , new System.Windows.Size ( image.Width , image.Height ) ) ) ; Geometry geometry = Geometry.Empty ; foreach ( Stroke stroke in CinemagraphInkCanvas.Strokes ) { geometry = Geometry.Combine ( geometry , stroke.GetGeometry ( ) , GeometryCombineMode.Union , null ) ; } //Inverts the geometry , to clip the other unselect pixels of the BitmapImage.geometry = Geometry.Combine ( geometry , rectangle , GeometryCombineMode.Exclude , null ) ; //This here is UIElement , I ca n't use this control , I need a way to clip the image without using the UI.var clippedImage = new System.Windows.Controls.Image ( ) ; clippedImage.Source = image ; clippedImage.Clip = geometry ; //I ca n't get the render of the clippedImage control because I 'm not displaying that control ."
public class EstEIDPersoConfig { public bool LaunchDebugger { get ; set ; } public string Password { get ; set ; } public int Slot { get ; set ; } public string Reader { get ; set ; } public string TestInput { get ; set ; } public bool Logging { get ; set ; } public EstEIDPersoConfig ( ) { XElement xml = XElement.Load ( myxml.xml ) ; XElement Configuration = xml.Element ( `` Configuration '' ) ; LaunchDebugger = Convert.ToBoolean ( Configuration.Element ( `` LaunchDebugger '' ) .Value ) ; Password = Configuration.Element ( `` Password '' ) .Value ; Slot = Convert.ToInt32 ( Configuration.Element ( `` Slot '' ) .Value ) ; Reader = Configuration.Element ( `` Reader '' ) .Value ; TestInput = Configuration.Element ( `` TestInput '' ) .Value ; Logging = Convert.ToBoolean ( Configuration.Element ( `` Logging '' ) .Value ) ; } } var value = Configuration.Element ( `` LaunchDebugger '' ) .Value ; if ( value ! = null ) LaunchDebugger = Convert.ToBoolean ( value ) ; else throw new Exception ( `` LaunchDebugger element missing from xml ! `` ) ;
"public static string OutputCSVString < T > ( this IList < T > list , List < Func < T , string > > properties ) { foreach ( var row in list ) { foreach ( var item in properties ) { // Do the output work , including calling item ( row ) . } // Output new line } } // Assuming I 've populated List < Product > ProductList up above ... var columns = new List < Func < Product , string > > ( ) ; columns.Add ( x = > x.Id ) ; columns.Add ( x = > x.Name ) ; string s = ProductList.OutputCSVString ( columns ) ; // This does n't compilestring s = Products.OutputCSVString ( new { p = > p.Id , p = > p.Name } ) ;"
"class Foo { public Foo ( string name ) { Name1 = name ; Name2 = name ; } [ XmlInclude ] public string Name1 { get ; private set ; } [ XmlInclude ] private string Name2 ; } StreamWriter wr = new StreamWriter ( `` path.xml '' ) ; new XmlSerializer < Foo > ( ) .Serialize ( wr , new Foo ( `` me '' ) ) ;"
"var accounts = this.SessionManager.GetActiveSession ( ) .QueryOver < Account > ( ) ; var q = accounts.Select ( Projections.Distinct ( Projections.SqlFunction ( `` substring '' , NHibernateUtil.String , Projections.Property ( `` Name '' ) , Projections.Constant ( 1 ) , Projections.Constant ( 1 ) ) ) ) ; var prefixes = ( from acc in this.SessionManager.GetActiveSession ( ) .Query < Account > ( ) group acc by acc.Name.Substring ( 0 , 1 ) into grp select new { Prefix = grp.Key , Count = grp.Count ( ) } ) ; var accounts = this.SessionManager.GetActiveSession ( ) .QueryOver < Account > ( ) .Select ( Projections.Group < string > ( x = > Projections.SqlFunction ( `` substring '' , NHibernateUtil.String , Projections.Property ( `` Name '' ) , Projections.Constant ( 1 ) , Projections.Constant ( 1 ) ) ) , Projections.Count < string > ( x = > Projections.SqlFunction ( `` substring '' , NHibernateUtil.String , Projections.Property ( `` Name '' ) , Projections.Constant ( 1 ) , Projections.Constant ( 1 ) ) ) ) ;"
"class Program { static void Main ( string [ ] args ) { using ( A a = new A ( `` a '' ) , b = new A ( `` b '' ) ) { } } class A : IDisposable { string n = null ; public A ( string name ) { n = name ; Console.WriteLine ( String.Format ( `` Creating { 0 } '' , n ) ) ; } public void Dispose ( ) { Console.WriteLine ( String.Format ( `` Disposing { 0 } '' , n ) ) ; } } } Creating aCreating bDisposing bDisposing a"
"[ StructLayout ( LayoutKind.Sequential , CharSet = CharSet.Ansi ) ] public struct sHostInfo { public int bFoundHost ; public int LatestConfirmationTime ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 128 ) ] public string szHostMachineName ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 4 ) ] public string HostMachineAddress ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 128 ) ] public string szHostProgramName ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 4 ) ] public string HostProgramVersion ; } [ DllImport ( `` Cortex_SDK.dll '' ) ] public static extern int GetHostInfo ( out sHostInfo pHostInfo ) ;"
class ThreadUnsafe { static int _x ; static void Increment ( ) { _x++ ; } static void Assign ( ) { _x = 123 ; } } class ThreadSafe { static readonly object _locker = new object ( ) ; static int _x ; static void Increment ( ) { lock ( _locker ) _x++ ; } static void Assign ( ) { lock ( _locker ) _x = 123 ; } }
"lookupValue = somedict.get ( someKey , someDefaultValue ) var lookupValue ; if ( ! somedict.TryGetValue ( someKey , lookupValue ) ) lookupValue = someDefaultValue ; var lookupValue = someDefaultValue ; if ( someKey ! = null & & ! somedict.TryGetValue ( someKey , lookupValue ) ) lookupValue = someDefaultValue ;"
"var response = new Response ( ) ; response.Value = `` My value '' ; var response = new Response { Value = `` My value '' , } ; var response = new Response ( ) { Value = `` My value '' , } ;"
"partial class Item { public static Expression < Func < Item , bool > > IsSpecial = ( i = > Math.Sqrt ( i.Id ) % 2==0 ) ; } datacontext.Item.Where ( Item.IsSpecial ) datacontext.Item.Where ( i = > i.IsSpecial ( ) ) datacontext.Item.Where ( i = > i.IsSpecial ( ) & & i.Id > 100 ) partial class Item { public Expression < Func < bool > > IsSpecial = ( ( ) = > Math.Sqrt ( this.Id ) % 2==0 ) ; // 'this ' keyword not available in current context }"
public class ProductViewModel { public ProductDTO Product { get ; set ; } public List < ProductImageViewModel > Images { get ; set ; } } public class ProductImageViewModel { public ProductImageDTO ProductImage { get ; set ; } public IFormFile ImageFile { get ; set ; } } [ HttpPost ] public IActionResult SaveProduct ( [ FromForm ] ProductViewModel model ) { //save code }
"var resRx = Observable.Range ( 1 , 10 ) ; var resOb = Enumerable.Range ( 1 , 10 ) ;"
static int computeBricks ( int n ) { if ( n < = 3 ) { return 1 ; } int [ ] table = new int [ n+1 ] ; table [ 0 ] = 1 ; table [ 1 ] = 1 ; table [ 2 ] = 1 ; table [ 3 ] = 1 ; for ( int i = 4 ; i < = n ; ++i ) { table [ i ] = table [ i-1 ] + table [ i-4 ] ; } return table [ n ] ; }
"// Setup a custom formatter like the one below to get nice exception logging // < target name= '' YourLogFile '' xsi : type= '' File '' fileName= '' $ { basedir } /../logs/YourLogFile.log '' archiveFileName= '' $ { basedir } /../logs/archives/YourLogFile . { # # # # # } .log '' //layout= '' $ { longdate } | $ { level : uppercase=true } | $ { logger } | $ { message } $ { onexception : |EXCEPTION OCCURRED\ : $ { exception : format=type , message , method : maxInnerExceptionLevel=5 : innerFormat=shortType , message , method } } '' //archiveEvery= '' Day '' archiveNumbering= '' Sequence '' maxArchiveFiles= '' 14 '' / > public class NlogAppenderForLog4Net : AppenderSkeleton { protected override void Append ( log4net.Core.LoggingEvent loggingEvent ) { var Logger = LogManager.GetLogger ( loggingEvent.LoggerName ) ; if ( loggingEvent.Level == Level.Fatal ) { if ( loggingEvent.ExceptionObject ! = null ) { Logger.FatalException ( loggingEvent.RenderedMessage , loggingEvent.ExceptionObject ) ; } else { Logger.Fatal ( loggingEvent.RenderedMessage ) ; } } //if its an error else if ( loggingEvent.Level == Level.Error || loggingEvent.Level == Level.Critical || loggingEvent.Level == Level.Emergency ) { if ( loggingEvent.ExceptionObject ! = null ) { Logger.ErrorException ( loggingEvent.RenderedMessage , loggingEvent.ExceptionObject ) ; } else { Logger.Error ( loggingEvent.RenderedMessage ) ; } } //if its a warning else if ( loggingEvent.Level == Level.Warn ) { if ( loggingEvent.ExceptionObject ! = null ) { Logger.WarnException ( loggingEvent.RenderedMessage , loggingEvent.ExceptionObject ) ; } else { Logger.Warn ( loggingEvent.RenderedMessage ) ; } } //if its info else if ( loggingEvent.Level == Level.Info || loggingEvent.Level == Level.Notice ) { Logger.Info ( loggingEvent.RenderedMessage ) ; } else { Logger.Trace ( loggingEvent.RenderedMessage ) ; } } } .Log4Net < NlogAppenderForLog4Net > ( a = > { } )"
"public class Test { public string Text { get ; set ; } public int Number { get ; set ; } } Expression < Func < Test , bool > > predicate1 = x = > x.Text.Length > 5 & & x.Number > 0 ; .Lambda # Lambda1 < System.Func ` 2 [ NHLinqTest.Test , System.Boolean ] > ( NHLinqTest.Test $ x ) { ( $ x.Text ) .Length > 5 & & $ x.Number > 0 } var y = Expression.Parameter ( typeof ( Test ) ) ; var predicate2 = Expression.And ( Expression.GreaterThan ( Expression.Property ( Expression.Property ( y , `` Text '' ) , `` Length '' ) , Expression.Constant ( 5 ) ) , Expression.GreaterThan ( Expression.Property ( y , `` Number '' ) , Expression.Constant ( 0 ) ) ) ; ( $ var1.Text ) .Length > 5 & $ var1.Number > 0"
"< xctk : PropertyGrid PropertyValueChanged= '' PG_PropertyValueChanged '' SelectedObject= '' { Binding SelectedObjects [ 0 ] } '' / > private void PG_PropertyValueChanged ( object sender , PropertyGrid.PropertyValueChangedEventArgs e ) { var changedProperty = ( PropertyItem ) e.OriginalSource ; foreach ( var x in SelectedObjects ) { //make sure that x supports this property var ProperProperty = x.GetType ( ) .GetProperty ( changedProperty.PropertyDescriptor.Name ) ; if ( ProperProperty ! = null ) { //fetch property descriptor from the actual declaring type , otherwise setter //will throw exception ( happens when u have parent/child classes ) var DeclaredProperty = ProperProperty.DeclaringType.GetProperty ( changedProperty.PropertyDescriptor.Name ) ; DeclaredProperty.SetValue ( x , e.NewValue ) ; } } }"
"public static void updateInfo ( string ID , string email , bool pub ) { try { //Get new data context MyDataDataContext db = GetNewDataContext ( ) ; //Creates a new data context //Table used to get user information User user = db.Users.SingleOrDefault ( x = > x.UserId == long.Parse ( ID ) ) ; //Checks to see if we have a match if ( user ! = null ) { //Add values user.Email = email ; user.Publish = publish ; } //Prep to submit changes db.Users.InsertOnSubmit ( user ) ; //Submit changes db.SubmitChanges ( ) ; } catch ( Exception ex ) { //Log error Log ( ex.ToString ( ) ) ; } }"
"DataTable Table = ... var DataWorkSheet = Workbook.Worksheets.Any ( x = > x.Name == `` Data '' ) ? Workbook .Worksheets .First ( x = > x.Name == `` Data '' ) : Workbook .Worksheets .Add ( `` Data '' ) ; int Start = ... // calculate cell start var Source = DataWorkSheet .Cell ( Start , 1 ) .InsertTable ( Table , Name , true ) ; var Range = Source.DataRange ; var PivotWorkSheet = Workbook .Worksheets .Add ( Name ) ; var Pivot = PivotWorkSheet .PivotTables .AddNew ( Name , PivotWorkSheet.Cell ( 1 , 1 ) , DataRange ) ;"
"//A test for GetDeviceTypes [ TestMethod ( ) ] [ HostType ( `` Moles '' ) ] public void GetDeviceTypesTest ( ) { SetUpMoles ( ) ; Login ( ) ; service.GetDeviceLOV = ( ) = > { return new List < DeviceLOV > ( ) { new DeviceLOV { DeviceType = `` Type 1 '' } , new DeviceLOV { DeviceType = `` Type 2 '' } , new DeviceLOV { DeviceType = `` Type 1 '' } } ; } ; List < string > actual ; actual = presenter.GetDeviceTypes ( ) ; Assert.AreEqual ( 2 , actual.Count , '' actual.Count Should = 2 '' ) ; }"
"`` a '' , `` b '' , { 1,2,3 } '' d '' , `` f '' , { 1,2,2 } '' y '' , `` z '' , { } `` a '' , `` b '' , 1 '' a '' , `` b '' , 2 '' a '' , `` b '' , 3 '' d '' , `` f '' , 1 '' d '' , `` f '' , 2 '' d '' , `` f '' , 2 '' y '' , `` z '' , null"
"cView.PropertySet = new PropertySet ( AppointmentSchema.Subject , AppointmentSchema.Start , AppointmentSchema.End , AppointmentSchema.RequiredAttendees , AppointmentSchema.OptionalAttendees ) ; ExchangeService service = new ExchangeService ( ExchangeVersion.Exchange2007_SP1 ) ; service.Credentials = new WebCredentials ( emailAddress , emailPassword ) ; // Initialize values for the start and end times , and the number of appointments to retrieve.DateTime startDate = DateTime.Now ; DateTime endDate = startDate.AddYears ( 1 ) ; const int NUM_APPTS = 4 ; // Initialize the calendar folder object with only the folder ID . CalendarFolder calendar = CalendarFolder.Bind ( service , WellKnownFolderName.Calendar , new PropertySet ( ) ) ; // Set the start and end time and number of appointments to retrieve.CalendarView cView = new CalendarView ( startDate , endDate , NUM_APPTS ) ; // Limit the properties returned to the appointment 's subject , start time , and end time.cView.PropertySet = new PropertySet ( AppointmentSchema.Subject , AppointmentSchema.Start , AppointmentSchema.End , AppointmentSchema.RequiredAttendees , AppointmentSchema.OptionalAttendees ) ; // Retrieve a collection of appointments by using the calendar view.FindItemsResults < Appointment > appointments = calendar.FindAppointments ( cView ) ;"
"ServiceStack.WebServiceException : The provided URI scheme 'https ' is invalid ; expected 'http'.Parameter name : via -- - > System.ArgumentException : The provided URI scheme 'https ' is invalid ; expected 'http'.Parameter name : via at System.ServiceModel.Channels.HttpChannelFactory ` 1.ValidateCreateChannelParameters ( EndpointAddress remoteAddress , Uri via ) at System.ServiceModel.Channels.HttpChannelFactory ` 1.OnCreateChannelCore ( EndpointAddress remoteAddress , Uri via ) at System.ServiceModel.Channels.ChannelFactoryBase ` 1.InternalCreateChannel ( EndpointAddress address , Uri via ) at System.ServiceModel.Channels.ServiceChannelFactory.ServiceChannelFactoryOverRequest.CreateInnerChannelBinder ( EndpointAddress to , Uri via ) at System.ServiceModel.Channels.ServiceChannelFactory.CreateServiceChannel ( EndpointAddress address , Uri via ) at System.ServiceModel.Channels.ServiceChannelFactory.CreateChannel ( Type channelType , EndpointAddress address , Uri via ) at System.ServiceModel.ChannelFactory ` 1.CreateChannel ( EndpointAddress address , Uri via ) at System.ServiceModel.ClientBase ` 1.CreateChannel ( ) at System.ServiceModel.ClientBase ` 1.CreateChannelInternal ( ) at System.ServiceModel.ClientBase ` 1.get_Channel ( ) at ServiceStack.WcfServiceClient.Send ( Message message ) at ServiceStack.WcfServiceClient.Send [ T ] ( Object request ) -- - End of inner exception stack trace -- - at ServiceStack.WcfServiceClient.Send [ T ] ( Object request ) at ElectronicServiceInterface.ESIClient.Login ( ) using ( var client = new Soap12ServiceClient ( Uri ) ) { var request = new MyRequestObject { Username = Username , Password = Password } ; var response = client.Send < MyResponseObject > ( request ) ; }"
"ffplay -fflags nobuffer -f : v mpegts udp : //:8554 _mseStreamSource = new MseStreamSource ( ) ; _mseStreamSource.Opened += ( _ , __ ) = > { _mseSourceBuffer = _mseStreamSource.AddSourceBuffer ( `` video/mp2t '' ) ; _mseSourceBuffer.Mode = MseAppendMode.Sequence ; } ; _mediaPlayerElement.MediaSource = MediaSource.CreateFromMseStreamSource ( _mseStreamSource ) ; UdpReceiveResult receiveResult = await _udpClient.ReceiveAsync ( ) ; byte [ ] bytes = receiveResult.Buffer ; mseSourceBuffer.AppendBuffer ( bytes.AsBuffer ( ) ) ;"
"[ Theory , BasicConventions ] public void GetVersionOnSiteVersionControllerReturnsASiteVersion ( IFixture fixture ) { fixture.OmitAutoProperties = true ; SiteVersion expected = fixture.Create < SiteVersion > ( ) ; SiteVersion actual = null ; var sut = fixture.Create < SiteVersionController > ( ) ; var response = sut .GetSiteVersion ( ) .ExecuteAsync ( new CancellationToken ( ) ) .Result .TryGetContentValue < SiteVersion > ( out actual ) ; actual.AsSource ( ) .OfLikeness < SiteVersion > ( ) .ShouldEqual ( expected ) ; } public class ApiControllerCustomization : ICustomization { public void Customize ( IFixture fixture ) { var origin = fixture.OmitAutoProperties ; fixture.OmitAutoProperties = true ; var sut = fixture.Create < SiteVersionController > ( ) ; sut.Configuration = fixture.Create < HttpConfiguration > ( ) ; sut.Request = fixture.Create < HttpRequestMessage > ( ) ; fixture.Inject < SiteVersionController > ( sut ) ; fixture.OmitAutoProperties = origin ; } }"
"if type ( A ) == int : do_something ( A ) else : do_something ( int ( A ) ) try : do_something ( A ) except TypeError : do_something ( int ( A ) ) return float ( A ) % 20 # coerse A to a float so it 'll only fail if we actually do n't # have anything that can be represented as a real number . if isinstance ( A , Number ) : # This is cheaper because we 're not creating a new return A % 20 # object unless we really have to.else : return float ( A ) % 20 try : # Now we 're doing any logical tests in the 99 % of cases where A is a number return A % 20except TypeError : return float ( A ) % 20"
"Expression < Func < T , dynamic > > orderBy = i = > i.GetType ( ) .GetProperty ( `` PropertyName '' ) .GetValue ( null ) ; ParameterExpression pe = Expression.Parameter ( typeof ( T ) , `` s '' ) ; Expression < Func < T , dynamic > > orderByExpression = Expression.Lambda < Func < T , dynamic > > ( Expression.Convert ( Expression.Property ( pe , `` PropertyName '' ) , typeof ( object ) ) , pe ) ;"
"< UserControl.Resources > < DataTemplate DataType= '' { x : Type engines : CalcEngineViewModel } '' > < engines : CalcEngineView/ > < /DataTemplate > < DataTemplate DataType= '' { x : Type engines : TAEngineViewModel } '' > < engines : TAEngineView/ > < /DataTemplate > < /UserControl.Resources > < Grid > < Grid.RowDefinitions > < RowDefinition Height= '' auto '' / > < RowDefinition Height= '' * '' / > < /Grid.RowDefinitions > < Grid x : Name= '' NavContent '' > < Grid.ColumnDefinitions > < ColumnDefinition Width = '' * '' / > < ColumnDefinition Width = '' * '' / > < ColumnDefinition Width = '' * '' / > < /Grid.ColumnDefinitions > < Button Content= '' Calc '' Command = '' { Binding ChangeViewModelCommand } '' CommandParameter= '' CalculationEngine '' Grid.Column= '' 0 '' / > < Button Content= '' TA '' Command = '' { Binding ChangeViewModelCommand } '' CommandParameter= '' TAEngine '' Grid.Column= '' 1 '' / > < /Grid > < Grid x : Name= '' MainContent '' Grid.Row= '' 1 '' > < ContentControl Content= '' { Binding CurrentEngineViewModel } '' / > < /Grid > < /Grid > < /UserControl > ` public class UtilitiesViewModel : BindableBase { # region Fields public RelayCommand < string > ChangeViewModelCommand { get ; private set ; } private CalcEngineViewModel calcViewModel = new CalcEngineViewModel ( ) ; private TAEngineViewModel taViewModel = new TAEngineViewModel ( ) ; private BindableBase currentEngineViewModel ; public BindableBase CurrentEngineViewModel { get { return currentEngineViewModel ; } set { SetProperty ( ref currentEngineViewModel , value ) ; } } # endregion public UtilitiesViewModel ( ) { ChangeViewModelCommand = new RelayCommand < string > ( ChangeViewModel ) ; } # region Methods public void ChangeViewModel ( string viewToShow ) // ( IEngineViewModel viewModel ) { switch ( viewToShow ) { case `` CalculationEngine '' : CurrentEngineViewModel = calcViewModel ; break ; case `` TAEngine '' : CurrentEngineViewModel = taViewModel ; break ; default : CurrentEngineViewModel = calcViewModel ; break ; } } # endregion } public class BindableBase : INotifyPropertyChanged { protected virtual void SetProperty < T > ( ref T member , T val , [ CallerMemberName ] string propertyName = null ) { if ( object.Equals ( member , val ) ) return ; member = val ; PropertyChanged ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } public event PropertyChangedEventHandler PropertyChanged = delegate { } ; protected virtual void OnPropertyChanged ( string propertyName ) { PropertyChanged ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } } public static class ViewModelLocator { public static bool GetAutoWireViewModel ( DependencyObject obj ) { return ( bool ) obj.GetValue ( AutoWireViewModelProperty ) ; } public static void SetAutoWireViewModel ( DependencyObject obj , bool value ) { obj.SetValue ( AutoWireViewModelProperty , value ) ; } // Using a DependencyProperty as the backing store for AutoWireViewModel . This enables animation , styling , binding , etc ... public static readonly DependencyProperty AutoWireViewModelProperty = DependencyProperty.RegisterAttached ( `` AutoWireViewModel '' , typeof ( bool ) , typeof ( ViewModelLocator ) , new PropertyMetadata ( false , AutoWireViewModelChanged ) ) ; private static void AutoWireViewModelChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { if ( DesignerProperties.GetIsInDesignMode ( d ) ) return ; var viewType = d.GetType ( ) ; var viewTypeName = viewType.FullName ; var viewModelTypeName = viewTypeName + `` Model '' ; var viewModelType = Type.GetType ( viewModelTypeName ) ; var viewModel = Activator.CreateInstance ( viewModelType ) ; ( ( FrameworkElement ) d ) .DataContext = viewModel ; } } if ( Config.Engine.AssemblyPath.Contains ( `` Engines.TimeAndAttendance.dll '' ) ) { uvm.ChangeViewModel ( `` TAEngine '' ) ; } else //Assume Calculation Engine { uvm.ChangeViewModel ( `` CalculationEngine '' ) ; } public class SymCalculationUtilitiesWindow : ToolWindowPane { /// < summary > /// Initializes a new instance of the < see cref= '' SymCalculationUtilitiesWindow '' / > class . /// < /summary > public SymCalculationUtilitiesWindow ( ) : base ( null ) { this.Caption = `` Sym Calculation Utilities '' ; this.ToolBar = new CommandID ( new Guid ( Guids.guidConnectCommandPackageCmdSet ) , Guids.SymToolbar ) ; // This is the user control hosted by the tool window ; Note that , even if this class implements IDisposable , // we are not calling Dispose on this object . This is because ToolWindowPane calls Dispose on // the object returned by the Content property . this.Content = new UtilitiesView ( ) ; } } private UtilitiesViewModel uvm ; uvm = new UtilitiesViewModel ( ) ;"
using ( DBEntities db = new DBEntities ( ) ) { var employeeAgedAbove30 = db.Employees.Where ( s = > s.Age > 30 ) .Count ( ) ; // Method 1 employeeAgedAbove30 = db.Employees.Count ( s = > s.Age > 30 ) ; // Method 2 }
using System ; using System.Threading.Tasks ; class Program { static volatile int a = 0 ; static void Main ( string [ ] args ) { Task [ ] tasks = new Task [ 4 ] ; for ( int h = 0 ; h < 20 ; h++ ) { a = 0 ; for ( int i = 0 ; i < tasks.Length ; i++ ) { tasks [ i ] = new Task ( ( ) = > DoStuff ( ) ) ; tasks [ i ] .Start ( ) ; } Task.WaitAll ( tasks ) ; Console.WriteLine ( a ) ; } Console.ReadKey ( ) ; } static void DoStuff ( ) { for ( int i = 0 ; i < 500000 ; i++ ) { a++ ; } } } 2000000149790310263292000000128160413956341417712139730013960311285850109202710682051091915130049313570771133384148527912902721048169704754
public abstract class Base { public virtual void Foo < T > ( ) where T : class { Console.WriteLine ( `` base '' ) ; } } public class Derived : Base { public override void Foo < T > ( ) { Console.WriteLine ( `` derived '' ) ; } public void Bang ( ) { Action bang = new Action ( delegate { base.Foo < string > ( ) ; } ) ; bang ( ) ; //VerificationException is thrown } } call instance void ConsoleApp.Derived : : ' < > n__FabricatedMethod1 ' < string > ( ) method private hidebysig instance void ' < > n__FabricatedMethod1 ' < T > ( ) cil managed { .custom instance void [ mscorlib ] System.Runtime.CompilerServices.CompilerGeneratedAttribute : :.ctor ( ) = ( 01 00 00 00 ) .maxstack 8 IL_0000 : ldarg.0 IL_0001 : call instance void ConsoleApp.Base : :Foo < ! ! T > ( ) IL_0006 : ret } Action good = new Action ( base.Foo < string > ( ) ) ; good ( ) ; //fine
"app.UseEndpoints ( endpoints = > { endpoints.MapGrpcService < CartService > ( ) ; endpoints.MapControllers ( ) ; } ) ; http { upstream api { server apiserver:5001 ; } upstream function { server funcserver:5002 ; } # redirect all http requests to https server { listen 80 default_server ; listen [ : : ] :80 default_server ; return 301 https : // $ host $ request_uri ; } server { server_name api.localhost ; listen 443 http2 ssl ipv6only=on ; ssl_certificate /etc/certs/api.crt ; ssl_certificate_key /etc/certs/api.key ; location /CartCheckoutService/ValidateCartCheckout { grpc_pass grpc : //api ; proxy_buffer_size 512k ; proxy_buffers 4 256k ; proxy_busy_buffers_size 512k ; grpc_set_header Upgrade $ http_upgrade ; grpc_set_header Connection `` Upgrade '' ; grpc_set_header Connection keep-alive ; grpc_set_header Host $ host : $ server_port ; grpc_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; grpc_set_header X-Forwarded-Proto $ scheme ; } location / { proxy_pass http : //api ; proxy_http_version 1.1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection `` Upgrade '' ; proxy_set_header Connection keep-alive ; proxy_set_header Host $ host : $ server_port ; proxy_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $ scheme ; proxy_cache_bypass $ http_upgrade ; } } server { server_name func.localhost ; listen 443 ssl ; ssl_certificate /etc/certs/func.crt ; ssl_certificate_key /etc/certs/func.key ; location / { proxy_pass http : //function ; proxy_http_version 1.1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection keep-alive ; proxy_set_header Host $ host : $ server_port ; proxy_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $ scheme ; proxy_cache_bypass $ http_upgrade ; } } gzip on ; gzip_vary on ; gzip_proxied no-cache no-store private expired auth ; gzip_types text/plain text/css application/json application/xml ; } services.Configure < KestrelServerOptions > ( y = > { y.ListenAnyIP ( 5010 , o = > { o.Protocols = HttpProtocols.Http2 ; //o.UseHttps ( `` ./certs/backend.pfx '' , `` password1 '' ) ; } ) ; y.ListenAnyIP ( 5001 , o = > { o.Protocols = HttpProtocols.Http1AndHttp2 ; } ) ; } ) ; upstream api { server apiserver:5001 ; } upstream grpcservice { server apiserver:5010 ; } upstream function { server funcserver:5002 ; } location /CartCheckoutService/ValidateCartCheckout { grpc_pass grpc : //api ; }"
myContentControl2.Content = myUserControl ; myContentControl1.RemoveVisualChild ( myUserControl ) ; //here I get an `` Unknown method '' error
"SELECT InquiryId , SupplierId FROM Procure_InquiryDetails InquiryId SupplierId1 2,32 1753 170,2805 7 128 5,9 ; WITH CTE AS ( SELECT InquiryId , [ xml_val ] = CAST ( ' < t > ' + REPLACE ( SupplierId , ' , ' , ' < /t > < t > ' ) + ' < /t > ' AS XML ) FROM Procure_InquiryDetails ) SELECT InquiryId , [ SupplierId ] = col.value ( ' . ' , 'VARCHAR ( 100 ) ' ) FROM CTECROSS APPLY [ xml_val ] .nodes ( '/t ' ) CA ( col ) InquiryId SupplierId 1 2 1 3 2 175 3 170 3 280 5 7 12 8 5 8 9 ; WITH CTEAS ( SELECT InquiryId , [ xml_val ] = CAST ( ' < t > ' + REPLACE ( SupplierId , ' , ' , ' < /t > < t > ' ) + ' < /t > ' AS XML ) , Vendor.Name FROM Procure_InquiryDetails inner join Vendor on ' , ' + Procure_InquiryDetails.SupplierId + ' , ' like ' % , ' + cast ( Vendor.DCLink as nvarchar ( 20 ) ) + ' , % ' ) SELECT InquiryId , Name , [ SupplierId ] = col.value ( ' . ' , 'VARCHAR ( 100 ) ' ) FROM CTECROSS APPLY [ xml_val ] .nodes ( '/t ' ) CA ( col ) InquiryId Name SupplierId -- -- -- -- -- - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1 Accesskenya Group Ltd 21 Accesskenya Group Ltd 31 Aquisana Ltd 21 Aquisana Ltd 32 TOYOTA KENYA 1753 Institute of Chartered Shipbrokers ICS-USD 1703 Institute of Chartered Shipbrokers ICS-USD 2807 CMA CGM Kenya Ltd 128 Aon Kenya Insurance Brokers Ltd 58 Aon Kenya Insurance Brokers Ltd 98 Bill investments ltd 58 Bill investments ltd"
"using Google.Apis.Admin.Directory.directory_v1 DirectoryService directoryService = ServiceInitializers.InitializeDirectoryService ( ) ; OrgUnit oUnit = directoryService.Orgunits.List ( Settings.customerId ) .Execute ( ) .OrganizationUnits.FirstOrDefault ( ) ; string orgUnitPath = oUnit.OrgUnitPath ; var orgUnitDeleteResult = directoryService.Orgunits.Delete ( Settings.customerId , orgUnitPath ) .Execute ( ) ;"
using System ; namespace ConsoleApplication2 { class Program { static void Main ( string [ ] args ) { var square = new Square ( 4 ) ; Console.WriteLine ( square.Calculate ( ) ) ; } } class MathOp { protected MathOp ( Func < int > calc ) { _calc = calc ; } public int Calculate ( ) { return _calc ( ) ; } private Func < int > _calc ; } class Square : MathOp { public Square ( int operand ) : base ( ( ) = > _operand * _operand ) // runtime exception { _operand = operand ; } private int _operand ; } }
"< asp : TemplateField HeaderText= '' Images '' > < ItemTemplate > < asp : FileUpload runat= '' server '' AutoPostBack= '' True '' ID= '' fileupload '' CommandArgument= ' < % # Eval ( `` strImage '' ) % > ' ClientIDMode= '' Static '' / > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' '' > < ItemTemplate > < asp : Image ImageUrl= '' ~/Uploaded Images/Default.png '' runat= '' server '' ID= '' image '' Width= '' 40 '' Height= '' 40 '' / > < /ItemTemplate > < /asp : TemplateField > # region Detail Save1 private DataTable CreateDetailSave ( ) { DataTable dtDetailSave1 = new DataTable ( ) ; DataColumn dc1 ; dc1 = new DataColumn ( `` intArticleDetailId '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; dc1 = new DataColumn ( `` intSectionId '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; dc1 = new DataColumn ( `` intCompoundId '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; dc1 = new DataColumn ( `` decSectionWeight '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; dc1 = new DataColumn ( `` intMessageId '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; dc1 = new DataColumn ( `` strImage '' ) ; dtDetailSave1.Columns.Add ( dc1 ) ; foreach ( GridViewRow row in gvArticle.Rows ) { DataRow dr = dtDetailSave1.NewRow ( ) ; Label lblintArticleDetailId = ( Label ) row.FindControl ( `` lblArticleDetailId '' ) ; Label lblSectionId = ( Label ) row.FindControl ( `` lblSectionId '' ) ; DropDownList ddlCompound = ( DropDownList ) row.FindControl ( `` ddlCompoundId '' ) ; TextBox txtdecSectionWeighte = ( TextBox ) row.FindControl ( `` txtdecSectionWeighte '' ) ; DropDownList intMessage = ( DropDownList ) row.FindControl ( `` ddlMessage '' ) ; FileUpload fileupload = ( FileUpload ) row.FindControl ( `` fileupload '' ) ; dr [ `` intArticleDetailId '' ] = CurrentMode == `` Add '' ? -1 : Convert.ToInt32 ( lblintArticleDetailId.Text ) ; dr [ `` intSectionId '' ] = Convert.ToInt32 ( lblSectionId.Text ) ; dr [ `` intCompoundId '' ] = ddlCompound.SelectedValue ; dr [ `` decSectionWeight '' ] = txtdecSectionWeighte.Text.Trim ( ) ! = `` '' ? Convert.ToDecimal ( txtdecSectionWeighte.Text.Trim ( ) ) : 0 ; dr [ `` intMessageId '' ] = intMessage.SelectedValue ; dr [ `` strImage '' ] = fileupload.HasFile ; dtDetailSave1.Rows.Add ( dr ) ; } return dtDetailSave1 ; } # endregion # region pageload protected void Page_Load ( object sender , EventArgs e ) { if ( ! IsPostBack ) { ClearControls ( ) ; FillArticleDetails ( ) ; EnableControls ( false ) ; Session [ `` SearchPopup '' ] = false ; } else { if ( Session [ `` SearchPopup '' ] ! = null ) { SearchPopup = ( bool ) ( Session [ `` SearchPopup '' ] ) ; if ( SearchPopup ! = false ) { MyMPE.Show ( ) ; } else { MyMPE.Hide ( ) ; } } vAdSearchParaList = new List < SearchParametors > ( ) ; } } # endregion # region Create Article table private void createArticleDataTable ( ) { if ( dt.Columns.Count == 0 ) { dt.Columns.Add ( new DataColumn ( `` intArticleDetailId '' , typeof ( int ) ) ) ; dt.Columns.Add ( new DataColumn ( `` intSectionId '' , typeof ( int ) ) ) ; dt.Columns.Add ( new DataColumn ( `` strSectionName '' , typeof ( string ) ) ) ; dt.Columns.Add ( new DataColumn ( `` intCompoundId '' , typeof ( string ) ) ) ; dt.Columns.Add ( new DataColumn ( `` decSectionWeight '' , typeof ( string ) ) ) ; dt.Columns.Add ( new DataColumn ( `` intMessageId '' , typeof ( string ) ) ) ; dt.Columns.Add ( new DataColumn ( `` fileupload '' , typeof ( string ) ) ) ; } gvArticle.DataSource = dt ; gvArticle.DataBind ( ) ; } # endregion # region Compound Grid - Add empty row private void ArticleGridAddEmptyRow ( int newId ) { DataRow newDr = null ; newDr = dt.NewRow ( ) ; newDr [ `` intArticleDetailId '' ] = 1 ; newDr [ `` intSectionId '' ] = 1 ; newDr [ `` strSectionName '' ] = `` '' ; newDr [ `` intCompoundId '' ] = `` '' ; newDr [ `` decSectionWeight '' ] = `` '' ; newDr [ `` intMessageId '' ] = `` '' ; newDr [ `` strImage '' ] = `` '' ; dt.Rows.Add ( newDr ) ; if ( dtArticleDetails == null || dtArticleDetails.Rows.Count == 0 ) { dtArticleDetails = dt ; } else { dtArticleDetails.Merge ( dt ) ; gvArticle.DataSource = dt ; gvArticle.DataBind ( ) ; } } # endregionprotected void gvArticle_RowUpdating ( object sender , GridViewUpdateEventArgs e ) { GridViewRow row = gvArticle.Rows [ e.RowIndex ] ; FileUpload fu = row.Cells [ 0 ] .FindControl ( `` strImage '' ) as FileUpload ; if ( fu ! = null & & fu.HasFile ) { fu.SaveAs ( Server.MapPath ( `` ~/Uploaded Images '' + fu.FileName ) ) ; } } < asp : GridView ID= '' gvArticle '' ShowHeaderWhenEmpty= '' True '' CssClass= '' table table-bordered table-condensed table-hover '' AutoGenerateColumns= '' False '' runat= '' server '' AllowPaging= '' True '' PageSize= '' 15 '' OnRowDataBound= '' gvArticle_RowDataBound '' BackColor= '' White '' BorderColor= '' # CCCCCC '' BorderStyle= '' None '' BorderWidth= '' 1px '' CellPadding= '' 4 '' ForeColor= '' Black '' GridLines= '' Horizontal '' OnRowUpdating= '' gvArticle_RowUpdating '' > < % -- < HeaderStyle BackColor= '' # 3d4247 '' ForeColor= '' White '' / > -- % > < Columns > < asp : TemplateField HeaderText= '' intArticleDetail '' Visible= '' false '' > < ItemTemplate > < asp : Label ID= '' lblArticleDetailId '' Width= '' 2 '' Text= ' < % # Bind ( `` intArticleDetailId '' ) % > ' ClientIDMode= '' Static '' runat= '' server '' > < /asp : Label > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' SectionID '' Visible= '' false '' > < ItemTemplate > < asp : Label ID= '' lblSectionId '' Width= '' 2 '' Text= ' < % # Bind ( `` intSectionId '' ) % > ' ClientIDMode= '' Static '' runat= '' server '' > < /asp : Label > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' Section '' > < ItemTemplate > < asp : Label ID= '' lblSectionName '' Width= '' 100 '' Text= ' < % # Bind ( `` strSectionName '' ) % > ' ClientIDMode= '' Static '' runat= '' server '' > < /asp : Label > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' Compound '' > < EditItemTemplate > < asp : Label ID= '' lblItemTypeEdit '' Width= '' 50 '' Text= ' < % # Bind ( `` strCompoundName '' ) % > ' lientIDMode= '' Static '' AutoPostBack= '' true '' runat= '' server '' > < /asp : Label > < /EditItemTemplate > < ItemTemplate > < asp : DropDownList ID= '' ddlCompoundId '' Width= '' 200 '' CssClass= '' form-control my-DropDownThin '' lientIDMode= '' Static '' AutoPostBack= '' true '' runat= '' server '' > < /asp : DropDownList > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' Weight '' > < ItemTemplate > < asp : TextBox ID= '' txtdecSectionWeighte '' Width= '' 100 % '' Text= ' < % # Bind ( `` decSectionWeight '' ) % > ' lientIDMode= '' Static '' runat= '' server '' > < /asp : TextBox > < /ItemTemplate > < /asp : TemplateField > < % -- < asp : TemplateField HeaderText= '' Messagers '' > < ItemTemplate > < asp : TextBox ID= '' txtMessage '' Width= '' 100 % '' Text= ' < % # Bind ( `` intMessageId '' ) % > ' ClientIDMode= '' Static '' runat= '' server '' > < /asp : TextBox > < /ItemTemplate > < /asp : TemplateField > -- % > < asp : TemplateField HeaderText= '' Messagers '' > < EditItemTemplate > < asp : Label ID= '' lblMessageId '' Width= '' 50 '' Text= ' < % # Bind ( `` strMessage '' ) % > ' ClientIDMode= '' Static '' AutoPostBack= '' true '' runat= '' server '' > < /asp : Label > < /EditItemTemplate > < ItemTemplate > < asp : DropDownList ID= '' ddlMessage '' Width= '' 300 '' CssClass= '' form-control my-DropDownThin '' lientIDMode= '' Static '' AutoPostBack= '' true '' runat= '' server '' > < /asp : DropDownList > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' Images '' > < ItemTemplate > < asp : FileUpload runat= '' server '' AutoPostBack= '' True '' ID= '' uploadFImage '' CommandArgument= ' < % # Eval ( `` strImage '' ) % > ' ClientIDMode= '' Static '' / > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField HeaderText= '' '' > < ItemTemplate > < asp : Image ImageUrl= '' ~/Uploaded Images/Default.png '' runat= '' server '' ID= '' btnViewFImage '' Width= '' 40 '' Height= '' 40 '' / > < /ItemTemplate > < /asp : TemplateField > < /Columns > < FooterStyle BackColor= '' # CCCC99 '' ForeColor= '' Black '' / > < HeaderStyle BackColor= '' # 333333 '' Font-Bold= '' True '' ForeColor= '' White '' / > < PagerStyle BackColor= '' White '' ForeColor= '' Black '' HorizontalAlign= '' Right '' / > < SelectedRowStyle BackColor= '' # CC3333 '' Font-Bold= '' True '' ForeColor= '' White '' / > < SortedAscendingCellStyle BackColor= '' # F7F7F7 '' / > < SortedAscendingHeaderStyle BackColor= '' # 4B4B4B '' / > < SortedDescendingCellStyle BackColor= '' # E5E5E5 '' / > < SortedDescendingHeaderStyle BackColor= '' # 242121 '' / > < /asp : GridView > < /div > < /ContentTemplate > < Triggers > < asp : PostBackTrigger ControlID= '' gvArticle '' / > < /Triggers > < /asp : UpdatePanel > < /div > < /div > protected void gvArticle_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e.Row.RowType == DataControlRowType.Footer ) { } else if ( e.Row.RowType == DataControlRowType.DataRow ) { { } DataTable CompoundCode = clsArticle.CompoundDataForGrid ( `` '' ) ; DropDownList ddlCompoundId = ( DropDownList ) e.Row.FindControl ( `` ddlCompoundId '' ) ; if ( ddlCompoundId ! = null ) { ddlCompoundId.DataTextField = `` Compound Code '' ; ddlCompoundId.DataValueField = `` Compound Id '' ; ddlCompoundId.DataSource = CompoundCode ; ddlCompoundId.DataBind ( ) ; string country = ( e.Row.FindControl ( `` ddlCompoundId '' ) as DropDownList ) .Text ; ddlCompoundId.Items.FindByValue ( country ) .Selected = true ; } DataTable MsgCode = clsArticle.MessageDataForGrid ( `` '' ) ; DropDownList ddlMessage = ( DropDownList ) e.Row.FindControl ( `` ddlMessage '' ) ; if ( ddlMessage ! = null ) { ddlMessage.DataTextField = `` Message Name '' ; ddlMessage.DataValueField = `` Message Id '' ; ddlMessage.DataSource = MsgCode ; ddlMessage.DataBind ( ) ; ddlMessage.Items.Insert ( 0 , new ListItem ( `` Please select '' ) ) ; string country = ( e.Row.FindControl ( `` ddlMessage '' ) as DropDownList ) .Text ; ddlMessage.Items.FindByValue ( country ) .Selected = true ; } // } } }"
"Header Code : EMERGENCY Ticket No : 123456789 Seq . No : 2Update of : Original Call Date : 01/02/2011 Time : 11:17:03 AM OP : 1102Second Call Date : 01/02/2011 Time : 12:11:00 AM OP : Company : COMPANY NAMEContact : CONTACT NAME Contact Phone : ( 111 ) 111-1111Secondary Contact : SECONDARY CONTACTAlternate Contact : Altern . Phone : Best Time to Call : AFTER 4:30P Fax No : ( 111 ) 111-1111Cell Phone : Pager No : Caller Address : 330 FOO FOO AVENUE 123 private T BetweenOperation < T > ( string emailBody , string start , string end ) { var culture = StringComparison.InvariantCulture ; int startIndex = emailBody.IndexOf ( start , culture ) + start.Length ; int endIndex = emailBody.IndexOf ( end , culture ) ; int length = endIndex - startIndex ; if ( length < 0 ) return default ( T ) ; return ( T ) Convert.ChangeType ( emailBody.Substring ( startIndex , length ) .Trim ( ) , typeof ( T ) ) ; } // returns `` EMERGENCY '' BetweenOperation < string > ( `` email content '' , `` Header Code : '' , `` Ticket No : '' ) private string LineOperation ( string startWithCriteria ) { string [ ] emailLines = EmailBody.Split ( new [ ] { '\n ' } ) ; return emailLines.Where ( emailLine = > emailLine.StartsWith ( startWithCriteria ) ) .FirstOrDefault ( ) ; }"
"{ `` id '' : `` 4a17d6fe-a617-4cf8-a850-0fb6bc8576fd '' , `` country '' : `` DE '' , `` _embedded '' : { `` company '' : { `` name '' : `` Apple '' , `` industrySector '' : `` IT '' , `` owner '' : `` Klaus Kleber '' , `` _embedded '' : { `` emailAddresses '' : [ { `` id '' : `` 4a17d6fe-a617-4cf8-a850-0fb6bc8576fd '' , `` value '' : `` test2 @ consoto.com '' , `` type '' : `` Business '' , `` _links '' : { `` self '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } } } ] , `` phoneNumbers '' : [ { `` id '' : `` 4a17d6fe-a617-4cf8-a850-0fb6bc8576fd '' , `` value '' : `` 01670000000 '' , `` type '' : `` Business '' , `` _links '' : { `` self '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } } } ] , } , `` _links '' : { `` self '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } , `` phoneNumbers '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } , `` addresses '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } , } } , } , `` _links '' : { `` self '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } , `` legalPerson '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } , `` naturalPerson '' : { `` href '' : `` https : //any-host.com/api/v1/customers/1234 '' } } } public class Customer { public Guid Id { get ; set ; } public string Country { get ; set ; } public LegalPerson Company { get ; set ; } } public class LegalPerson { public string Name { get ; set ; } public string IndustrySector { get ; set ; } public string Owner { get ; set ; } public ContactInfo [ ] EmailAddresses { get ; set ; } public ContactInfo [ ] PhoneNumbers { get ; set ; } } public class ContactInfo { public Guid Id { get ; set ; } public string Type { get ; set ; } public string Value { get ; set ; } }"
public static void Main ( string [ ] args ) { CreateWebHostBuilder ( args ) .UseUrls ( `` http : //*:5000 '' ) .UseWebRoot ( @ '' .\WebSite\wwwroot\ '' ) .Build ( ) .Run ( ) ; }
public class product { public string GetName ( ) { return `` product '' ; } public static string GetStaticName ( ) { return `` product '' ; } } product p = new product ( ) ; string _ProductName = p.GetName ( ) ; string _ProductName = product.GetStaticName ( ) ;
var details = dc.SunriseShipment .Where ( it = > ( it.isDeleted == null || it.isDeleted == false ) ) ;
"MyObject o1 = null ; MyObject o2 = null ; if ( o1 == o2 ) ... static bool operator == ( MyClass o1 , MyClass o2 ) { // ooops ! this way leads toward recursion with stackoverflow as the result if ( o1 == null & & o2 == null ) return true ; // it works ! if ( Equals ( o1 , null ) & & Equals ( o2 , null ) ) return true ; ... }"
//Callerpublic DataModel GetData2 ( ) { var generator = new DataFactory ( ) .Create ( `` Gen.2 '' ) ; return generator.GetData ( ) ; } //Factorypublic class DataFactory { public AbstractDataGenerator Create ( string type ) { //Here the magic happens to find all implementations of IDataGenerator var allGenerators = GetImplementations ( ) ; var generator = allGenerators.FirstOrDefault ( f = > f.name == type ) ; if ( generator ! = null ) return ( AbstractDataGenerator ) Activator.CreateInstance ( generator ) ; else return null ; } } //Interfacepublic abstract class AbstractDataGenerator { public static string name ; public abstract DataModel GetData ( ) ; } //Data-Generatorspublic class DataGen1 : AbstractDataGenerator { public static string name = `` Gen.1 '' ; public DataModel GetData ( ) { return new DataModel ( `` 1 '' ) ; } } public class DataGen2 : AbstractDataGenerator { public static string name = `` Gen.2 '' ; public DataModel GetData ( ) { return new DataModel ( `` 2 '' ) ; } }
void Method_A ( ) ; void Method_B ( ) ; void Method_X1 ( ) ; void Method_A ( ) ; void Method_B ( ) ; void Method_X2 ( ) ;
"stream.Read ( message , 0 , 1 ) if ( message == < byte representation of a known class > ) { stream.Read ( message , 0 , Class.RequestSize ) ; }"
"var dictionaryOne = new ConcurrentDictionary < int , int > ( ) ; var dictionaryTwo = new Dictionary < int , int > ( ) ; DoStuffToDictionary ( dictionaryOne ) ; DoStuffToDictionary ( dictionaryTwo ) ; void DoStuffToDictionary ( IDictionary < int , int > items ) { // Manipulate dictionary if ( items [ 0 ] == -1 ) { items [ 0 ] = 0 ; // Dumb example , but are indexers like this OK ? } }"
public bool stopFlag ; void Foo ( ) { lock ( myLock ) { while ( ! stopFlag ) { // do something } } }
"public interface ILoggerRepository { ... } public interface IPlugin { void Attach ( ILoggerRepository repository ) ; } public abstract class PluginSkeleton : IPlugin { public virtual void Attach ( ILoggerRepository repository ) { } } public class RemoteLoggingServerPlugin : PluginSkeleton { override public void Attach ( ILoggerRepository repository ) { base.Attach ( repository ) ; ... } } override public void Attach ( ILoggerRepository repository ) { base.Attach ( repository ) ; // Create the sink and marshal it m_sink = new RemoteLoggingSinkImpl ( repository ) ; try { **RemotingServices.Marshal ( m_sink , m_sinkUri , typeof ( IRemoteLoggingSink ) ) ; ** } catch ( Exception ex ) { LogLog.Error ( declaringType , `` Failed to Marshal remoting sink '' , ex ) ; } } override public void Attach ( ILoggerRepository repository ) { RemotingServices.Marshal ( null , null , typeof ( int ) ) ; }"
readonly IService service ; public Foo ( IService service ) { if ( service == null ) throw new ArgumentNullException ( `` service '' ) ; this.service = service ; } public void Start ( ) { service.DoStuff ( ) ; }
class Program { private static void ThreadRoutine ( ) { System.Windows.Media.MediaPlayer player = new System.Windows.Media.MediaPlayer ( ) ; } static void Main ( string [ ] args ) { Thread aThread ; int iteration = 1 ; while ( true ) { aThread = new Thread ( ThreadRoutine ) ; aThread.Start ( ) ; aThread.Join ( ) ; Console.WriteLine ( `` Iteration : `` + iteration++ ) ; } } }
"[ StructLayout ( LayoutKind.Sequential ) ] public struct ExampleStruct { int i1 ; int i2 ; } public byte [ ] StructToBytes ( ) { ExampleStruct inst = new ExampleStruct ( ) ; int len = Marshal.SizeOf ( inst ) ; byte [ ] arr = new byte [ len ] ; IntPtr ptr = Marshal.AllocHGlobal ( len ) ; Marshal.StructureToPtr ( inst , ptr , true ) ; Marshal.Copy ( ptr , arr , 0 , len ) ; Marshal.FreeHGlobal ( ptr ) ; return arr ; }"
"public interface ICalculator { int Add ( int value , int value2 ) ; } public class Calculator : ICalculator { public int Add ( int value , int value2 ) { return value + value2 ; } } public class Sums { private ICalculator calculator ; public Sums ( ICalculator calculatorArg ) { calculator = calculatorArg ; } public int Add ( int value , int value2 ) { return calculator.Add ( value , value2 ) ; } } [ TestMethod ( ) ] public void AddTest ( ) { //ARRANGE var calculatorArg = MockRepository.GenerateMock < ICalculator > ( ) ; Func < int , int , int > subtract = delegate ( int valueArg , int value2Arg ) { return valueArg - value2Arg ; } ; calculatorArg.Stub ( x = > x.Add ( -1 , -1 ) ) .IgnoreArguments ( ) .Do ( subtract ) ; Sums target = new Sums ( calculatorArg ) ; int value = 5 ; int value2 = 3 ; int expected = 2 ; //ACT int actual = target.Add ( value , value2 ) ; //ASSERT Assert.AreEqual ( expected , actual ) ; }"
public int RetInt { get ; set ; } public int RetInt { get { return someInt ; } set { someInt=value ; } }
"< Grid > < Button Content= '' Ok '' Width= '' 100 '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Center '' Click= '' Click '' Padding= '' 0,2,0,2 '' IsDefault= '' True '' Name= '' _btnOk '' / > < /Grid > public partial class Window : Window { public Window ( ) { InitializeComponent ( ) ; DataContext = this ; } private void Click ( Object sender , RoutedEventArgs e ) { var window = new Window3 ( ) ; window.ShowDialog ( ) ; } } < Grid > < Image Source= '' { Binding FileObject } '' > < /Image > < /Grid > public partial class Window2 : Window { public Window2 ( ) { InitializeComponent ( ) ; DataContext = this ; FileName = `` D : /pdf/myfile.png '' ; Closing += Window2_Closing ; } public String FileName { get ; set ; } public Object FileObject { get { if ( String.IsNullOrEmpty ( FileName ) ) return null ; if ( ! File.Exists ( FileName ) ) return null ; var ms = new MemoryStream ( ) ; var bi = new BitmapImage ( ) ; using ( var fs = new FileStream ( FileName , FileMode.Open , FileAccess.Read ) ) { fs.CopyTo ( ms ) ; bi.BeginInit ( ) ; bi.StreamSource = ms ; bi.EndInit ( ) ; } return bi ; } } void Window2_Closing ( Object sender , System.ComponentModel.CancelEventArgs e ) { GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; } }"
"public static IEnumerable < int > FastFirst ( ) { for ( int i = 1 ; i < 6 ; i++ ) { if ( i > 3 ) Thread.Sleep ( 200 ) ; yield return i ; } } public static IEnumerable < int > SlowFirst ( ) { for ( int i = 1 ; i < 6 ; i++ ) { if ( i < 4 ) Thread.Sleep ( 200 ) ; yield return i ; } } FastFirst ( ) .Union ( SlowFirst ( ) ) ; public static IEnumerable < TResult > SelectAsync < TResult > ( params IEnumerable < TResult > [ ] producer ) { var resultsQueue = new BlockingCollection < TResult > ( ) ; var taskList = new HashSet < Task > ( ) ; foreach ( var result in producer ) { taskList.Add ( Task.Factory.StartNew ( ( ) = > { foreach ( var product in result ) { resultsQueue.Add ( product ) ; } } ) ) ; } Task.Factory.ContinueWhenAll ( taskList.ToArray ( ) , x = > resultsQueue.CompleteAdding ( ) ) ; return resultsQueue.GetConsumingEnumerable ( ) ; }"
public static IEnumerable < TResult > Empty < TResult > ( ) { yield break ; } public static IEnumerable < TResult > Empty < TResult > ( ) { return EmptyEnumerable < TResult > .Instance ; } internal class EmptyEnumerable < TElement > { private static volatile TElement [ ] instance ; public static IEnumerable < TElement > Instance { get { if ( EmptyEnumerable < TElement > .instance == null ) EmptyEnumerable < TElement > .instance = new TElement [ 0 ] ; return ( IEnumerable < TElement > ) EmptyEnumerable < TElement > .instance ; } } }
"Future f1 , f2 ; bool SomeThingToDo ( ) // returns true when `` finished '' { if ( f1 == null ) f1 = Remote1.CallF1 ( ) ; else if ( f1.IsComplete & & f2 == null ) f2 = Remote2.CallF2 ( ) ; else if ( f2 ! = null & & f2.IsComplete ) return true ; return false ; } async Task SomeThingToDo ( ) // returning task is completed when this is finished . { await Remote1.CallF1 ( ) ; await Remote2.CallF2 ( ) ; }"
public async void MyDangerousMethodWhichCouldCrashMyApp ... static void Main ( string [ ] args ) { MainAsync ( ) .Wait ( ) ; Console.ReadLine ( ) ; } async static Task MainAsync ( ) { MyCodeGeneratedClass c = new MyCodeGeneratedClass ( ) ; try { await c.MyCodeGeneratedMethod ( ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; } } public partial class MyCodeGeneratedClass { public async Task MyCodeGeneratedMethod ( ) { HttpClient client = new HttpClient ( ) ; Console.WriteLine ( await client.GetStringAsync ( `` http : //msdn.microsoft.com '' ) ) ; MyCustomCode ( ) ; } partial void MyCustomCode ( ) ; } partial class MyCodeGeneratedClass { async partial void MyCustomCode ( ) { HttpClient client = new HttpClient ( ) ; Console.WriteLine ( await client.GetStringAsync ( `` http : //msdn.microsoft.com '' ) ) ; throw new Exception ( `` Boom '' ) ; } } protected virtual Task MyCustomCode ( T foo ) { return Task.FromResult ( 0 ) ; }
bool isEven ( int & i ) { return i % 2 == 0 } ) int main ( ) { int x = 5 ; std : :cout < < isEven ( x ) ; // is the exact same as if I had written // std : :cout ( x % 2 == 0 ) return 0 ; } bool isEven ( int * i ) { return *i % 2 == 0 } ) int main ( ) { int x = 5 ; std : :cout < < isEven ( & x ) ; // is like // int * temp = & x ; // return *temp % 2 == 0 ; // ( garbage collect temp ) return 0 ; }
foreach ( var item in cmbxColor1.Items ) { cmbxColor2.Items.Add ( item ) ; . . . foreach ( var item in cmbxColor1.Items ) { if ( null ! = cmbxColor2.Items ) { cmbxColor2.Items.Add ( item ) ; . . .
while ( true ) { switch ( state ) { case [ label ] : // here 's where all your goto 's will be state = [ label ] ; continue ; default : // here 's the rest of the program . } }
"public class MyClass : DynamicObject , INotifyPropertyChanged { Dictionary < string , object > properties = new Dictionary < string , object > ( ) ; public override bool TryGetMember ( GetMemberBinder binder , out object result ) { if ( properties.ContainsKey ( binder.Name ) ) { result = properties [ binder.Name ] ; return true ; } else { result = `` Invalid Property ! `` ; return false ; } } public override bool TrySetMember ( SetMemberBinder binder , object value ) { properties [ binder.Name ] = value ; this.OnPropertyChanged ( binder.Name ) ; return true ; } public override bool TryInvokeMember ( InvokeMemberBinder binder , object [ ] args , out object result ) { dynamic method = properties [ binder.Name ] ; result = method ( args [ 0 ] .ToString ( ) , args [ 1 ] .ToString ( ) ) ; return true ; } /// ... . Rest of the class . } < DataTemplate x : Key= '' SearchResults '' > < Grid Width= '' 294 '' Margin= '' 6 '' > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' Auto '' / > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < Border Background= '' { StaticResource ListViewItemPlaceholderBackgroundThemeBrush } '' Margin= '' 0,0,0,10 '' Width= '' 40 '' Height= '' 40 '' > < Image Source= '' { Binding Path=Banner } '' Stretch= '' UniformToFill '' / > < /Border > < StackPanel Grid.Column= '' 1 '' Margin= '' 10 , -10,0,0 '' > < TextBlock Text= '' { Binding SeriesName } '' Style= '' { StaticResource BodyTextStyle } '' TextWrapping= '' NoWrap '' / > < TextBlock Text= '' { Binding Subtitle } '' Style= '' { StaticResource BodyTextStyle } '' Foreground= '' { StaticResource ApplicationSecondaryForegroundThemeBrush } '' TextWrapping= '' NoWrap '' / > < TextBlock Text= '' { Binding Overview } '' Style= '' { StaticResource BodyTextStyle } '' Foreground= '' { StaticResource ApplicationSecondaryForegroundThemeBrush } '' TextWrapping= '' NoWrap '' / > < /StackPanel > < /Grid > < /DataTemplate > public ObservableCollection < dynamic > SearchResults { get ; set ; } ICollection col = item.SearchResults ; this.DefaultViewModel [ `` Results '' ] = col ; //this is the datacontext of the gridview"
"Id OfferId ProdId Qty SaleDate -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -10 7 121518 150 2013-03-14 00:00:00.00019 7 100518 35 2013-03-18 14:46:34.28720 7 121518 805 2013-03-19 13:03:34.02321 10 131541 10 2013-03-20 08:34:40.287 var confRollUps = db.SaleConfirmation .GroupBy ( c = > c.OfferId ) // Ensure we get a list of unique/distinct offers .Select ( g = > g.Select ( i = > new { i.OfferId , i.Product.Variety , // `` Category '' of product , will be the same across products for this offer . i.Product is a SQL Server Navigation property . i.Offer.Price , // The price of the product , set per offer . i.Offer is a SQL Server Navigation property . i.Offer.Quantity , // The quantity of items that are expected to be sold before the offer expires i.Offer.DateClose , // Date of when the offer expires g.Sum ( ii = > ii.Qty ) // Sum up the Qty column , we do n't care about ProdIds not matching } ) ) ;"
"static Dictionary < string , string > _events = new Dictionary < string , string > ( ) ; public static Dictionary < string , string > Events { get { return _events ; } } public static void ResetDictionary ( ) { _events = new Dictionary < string , string > ( ) ; }"
"public class MyContext : MyContextBase { // Constructor public MyContext ( DbContextOptions < MyContext > options ) : base ( options ) { } // Public properties public DbSet < MyList > MyLists { get ; set ; } } public class MyList { public string Id { get ; set ; } public string Email { get ; set ; } public string FirstName { get ; set ; } public string LastName { get ; set ; } public bool Blocked { get ; set ; } } public class MyController : MyControllerBase { private MyContext ContactContext = this.ServiceProvider.GetService < MyContext > ( ) ; public MyController ( IServiceProvider serviceProvider ) : base ( serviceProvider ) { } private bool isContact ( string firstName , string lastName ) { try { var list = this .ContactContext .MyLists .AsNoTracking ( ) // ! ! ! Here it explodes ! ! ! .FirstOrDefault ( entity = > entity.FirstName == firstName & & entity.LastName == lastName ) ; return list ! = null ; } catch ( Exception exception ) { throws Exception ; } return false ; } } using Moq ; using Xunit ; [ Fact ] [ Trait ( `` Category '' , `` Controller '' ) ] public void Test ( ) { string firstName = `` Bob '' ; string lastName = `` Baumeister '' ; // Creating a list with the expectad data var fakeContacts = new MyList [ ] { new MyList ( ) { FirstName = `` Ted '' , LastName = `` Teddy '' } , new MyList ( ) { PartnerId = `` Bob '' , Email = `` Baumeister '' } } ; // Mocking the DbSet < MyList > var dbSet = CreateMockSet ( fakeContacts.AsQueryable ( ) ) ; // Setting the mocked dbSet in ContactContext ContactContext contactContext = new ContactContext ( new DbContextOptions < ContactContext > ( ) ) { MyLists = dbSet.Object } ; // Mocking ServiceProvider serviceProvider .Setup ( s = > s.GetService ( typeof ( ContactContext ) ) ) .Returns ( contactContext ) ; // Creating a controller var controller = new ContactController ( serviceProvider.Object ) ; // Act bool result = controller.isContact ( firstName , lastName ) // Assert Assert.True ( result ) ; } private Mock < DbSet < T > > CreateMockSet < T > ( IQueryable < T > data ) where T : class { var queryableData = data.AsQueryable ( ) ; var mockSet = new Mock < DbSet < T > > ( ) ; mockSet.As < IQueryable < T > > ( ) .Setup ( m = > m.Provider ) .Returns ( queryableData.Provider ) ; mockSet.As < IQueryable < T > > ( ) .Setup ( m = > m.Expression ) .Returns ( queryableData.Expression ) ; mockSet.As < IQueryable < T > > ( ) .Setup ( m = > m.ElementType ) .Returns ( queryableData.ElementType ) ; mockSet.As < IQueryable < T > > ( ) .Setup ( m = > m.GetEnumerator ( ) ) .Returns ( queryableData.GetEnumerator ( ) ) ; return mockSet ; } at System.Linq.EnumerableRewriter.FindMethod ( Type type , String name , ReadOnlyCollection ' 1 args , Type [ ] typeArgs ) at System.Linq.EnumerableRewriter.VisitMethodCall ( MethodCallExpression m ) at System.Linq.Expressions.MethodCallExpression.Accept ( ExpressionVisitor visitor ) at System.Linq.Expressions.ExpressionVisitor.Visit ( Expression node ) at System.Linq.EnumerableQuery ' 1.GetEnumerator ( ) at System.Linq.EnumerableQuery ' 1.System.Collections.Generic.IEnumerable < T > .GetEnumerator ( ) at My.Package.Contact.Controller.MyController.isContact ( String firstName , String lastName ) in C : \Users\source\repos\src\My.Package\My.Package.Contact\Controller\MyController.cs : line 31 mockSet.As < IQueryable < T > > ( ) .Setup ( m = > m.AsNoTracking < T > ( ) ) .Returns ( mockSet.Object ) ; public static IQueryable < TEntity > AsNoTracking < TEntity > ( [ NotNull ] this IQueryable < TEntity > source ) where TEntity : class { Check.NotNull ( source , nameof ( source ) ) ; return source.Provider is EntityQueryProvider ? source.Provider.CreateQuery < TEntity > ( Expression.Call ( instance : null , method : AsNoTrackingMethodInfo.MakeGenericMethod ( typeof ( TEntity ) ) , arguments : source.Expression ) ) : source ; } public static class QueryableExtensions { public static IQueryable < T > AsGatedNoTracking < T > ( this IQueryable < T > source ) where T : class { if ( source.Provider is EntityQueryProvider ) return source.AsNoTracking < T > ( ) ; return source ; } }"
//This Works : public HashSet < Animal.AnimalCell > UpdateList = new HashSet < Animal.AnimalCell > ( new CellComparer ( ) ) ; //This Does not work : public HashSet < Animal.AnimalCell > [ ] UpdateListThreaded = new HashSet < Animal.AnimalCell > ( new CellComparer ( ) ) [ 10 ] ; //This Does not Work : public HashSet < Animal.AnimalCell > [ ] UpdateListThreaded = new HashSet < Animal.AnimalCell > [ 10 ] ( new CellComparer ( ) ) ; //This Works : public HashSet < Animal.AnimalCell > [ ] UpdateListThreaded = new HashSet < Animal.AnimalCell > [ 10 ] ;
"TimeSpan curNow ; TimeSpan lastUpdate ; TimeSpan lastDraw ; public GamePage ( ) { timer = new GameTimer ( ) ; timer.UpdateInterval = TimeSpan.FromTicks ( 333333 ) ; timer.Update += OnUpdate ; timer.Draw += OnDraw ; } private void OnUpdate ( object sender , GameTimerEventArgs e ) { curNow = new TimeSpan ( DateTime.Now.Ticks ) ; TimeSpan elapsed=e.ElapsedTime ; //Always constant and has value : 33ms TimeSpan realElapsed = curNow - lastUpdate ; //Real elapsed time always changing and has a value between : 17-39ms ( sometimes more then 39ms ) lastUpdate = curNow ; } private void OnDraw ( object sender , GameTimerEventArgs e ) { curNow = new TimeSpan ( DateTime.Now.Ticks ) ; TimeSpan elapsed=e.ElapsedTime ; //Always changing and has a value between : 17-39ms ( sometimes more then 39ms ) TimeSpan realElapsed = curNow -lastDraw ; //Always changing and has a value between : 17-39ms ( sometimes more then 39ms ) lastDraw= curNow ; } TimeSpan curNow ; TimeSpan lastUpdate ; TimeSpan lastDraw ; public Game ( ) { // Frame rate is 30 fps by default for Windows Phone . TargetElapsedTime = TimeSpan.FromTicks ( 333333 ) ; } protected override void Update ( GameTime gameTime ) { curNow = new TimeSpan ( DateTime.Now.Ticks ) ; TimeSpan elapsed=gameTime.ElapsedGameTime ; //Always constant and has value : 33ms TimeSpan realElapsed = curNow - lastUpdate ; //Real elapsed time has a value between : 34-35ms ( sometimes more then 35ms ) lastUpdate = curNow ; } protected override void Draw ( GameTime gameTime ) { curNow = new TimeSpan ( DateTime.Now.Ticks ) ; TimeSpan elapsed=gameTime.ElapsedGameTime ; //Value between : 33-34ms ( sometimes more then 34ms ) TimeSpan realElapsed = curNow - lastDraw ; //Value between : 34-35ms ( sometimes more then 35ms ) lastDraw = curNow ; }"
"public override void Write ( XDRDestination destination ) { destination.WriteInt ( intValue ) ; destination.WriteBool ( boolValue ) ; destination.WriteFixedString ( str1 , 100 ) ; destination.WriteVariableString ( str2 , 100 ) ; } .method public hidebysig virtual instance void Write ( class [ XDRFramework ] XDRFramework.XDRDestination destination ) cil managed { // Code size 53 ( 0x35 ) .maxstack 8 IL_0000 : ldarg.1 IL_0001 : ldarg.0 IL_0002 : call instance int32 LearnIL.Test1 : :get_intValue ( ) IL_0007 : callvirt instance void [ XDRFramework ] XDRFramework.XDRDestination : :WriteInt ( int32 ) IL_000c : ldarg.1 IL_000d : ldarg.0 IL_000e : call instance bool LearnIL.Test1 : :get_boolValue ( ) IL_0013 : callvirt instance void [ XDRFramework ] XDRFramework.XDRDestination : :WriteBool ( bool ) IL_0018 : ldarg.1 IL_0019 : ldarg.0 IL_001a : call instance string LearnIL.Test1 : :get_str1 ( ) IL_001f : ldc.i4.s 100 IL_0021 : callvirt instance void [ XDRFramework ] XDRFramework.XDRDestination : :WriteFixedString ( string , uint32 ) IL_0026 : ldarg.1 IL_0027 : ldarg.0 IL_0028 : call instance string LearnIL.Test1 : :get_str2 ( ) IL_002d : ldc.i4.s 100 IL_002f : callvirt instance void [ XDRFramework ] XDRFramework.XDRDestination : :WriteVariableString ( string , uint32 ) IL_0034 : ret } // end of method Test1 : :Write"
"[ Export ( `` TypeA '' , typeof ( MyPlugin ) ) ] [ Export ( `` TypeB '' , typeof ( MyPlugin ) ) ] ServiceLocator.GetExportedValues < MyPlugin > ( `` TypeA '' ) ; ServiceLocator.GetExportedValues < MyPlugin > ( ) ;"
"^\s* ( [ a-z_ ] \w* ) ( ? : \s* , \s* ( [ a-z_ ] \w* ) ) *\s* $"
class Program { static int a ; static int b { get ; set ; } static void Main ( string [ ] args ) { int c ; System.Console.WriteLine ( a ) ; System.Console.WriteLine ( b ) ; System.Console.WriteLine ( c ) ; } } bool MyCondition = true ; int c ; if ( MyCondition ) c = 10 ;
bool dataToAdd ; if ( null == _priceComplianceDetailList ) return dataToAdd ; bool dataToAdd = false ; if ( null == _priceComplianceDetailList ) return dataToAdd ; private bool PopulateSheetWithDetailData ( ) { bool dataToAdd = false ; if ( null == _priceComplianceDetailList ) return dataToAdd ; List < PriceComplianceDetail > _sortedDetailList = . . . return _sortedDetailList.Count > 0 ; }
"Type proxyBuilder ( Type someType , delagate functionToBeApplied , Object forward )"
public class Alpha { public virtual Alpha DoSomething ( ) { return AlphaFactory.GetAlphaFromSomewhere ( ) ; } } public class Beta : Alpha { public override Beta DoSomething ( ) { return BetaFactory.GetBetaFromSomewhere ( ) ; } } new public Beta DoSomething ( ) { return BetaFactory.GetBetaFromSomewhere ( ) ; }
"UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE='01020304 ' ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE='0x01020304 ' ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=0x01020304 ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=CAST ( '01020304 ' as VARBINARY ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=CAST ( 01020304 as VARBINARY ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=CAST ( '01020304 ' as VARBINARY ( 4 ) ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=CAST ( 01020304 as VARBINARY ( 4 ) ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE BINVALUE=CONVERT ( varbinary ( 4 ) , '01020304 ' ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE CAST ( BINVALUE as VARCHAR ( MAX ) ) = CAST ( '01020304 ' as VARCHAR ( MAX ) ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE CAST ( BINVALUE as VARCHAR ( MAX ) ) = CAST ( 01020304 as VARCHAR ( MAX ) ) ; UPDATE MYTABLE SET VALUE= 'new ' WHERE CONVERT ( VARCHAR ( MAX ) , BINVALUE ) = CONVERT ( VARCHAR ( MAX ) , '01020304 ' ) ; static String ToHexString ( Byte [ ] buffer ) { String str ; str = BitConverter.ToString ( buffer ) .Replace ( `` - '' , string.Empty ) ; return ( str ) ; } ... String table = `` MYTABLE '' ; String newvalue = `` new '' ; Byte [ ] binvalue = { 1 , 2 , 3 , 4 } ; String providerStr= @ '' Provider=Microsoft.JET.OLEDB.4.0 ; '' + @ '' data source=C : \myDB.mdb '' ; connection = new OleDbConnection ( providerStr ) ; connection.Open ( ) ; String cmd = @ '' UPDATE `` + table + `` SET VALUE= ' '' + newvalue + `` ' '' + `` WHERE BINVALUE= ' '' + ToHexString ( binvalue ) + `` ' '' + `` ; '' ; OleDbCommand command = new OleDbCommand ( cmd , connection ) ; int result = command.ExecuteNonQuery ( ) ; connection.Close ( ) ;"
"{ `` ? xml '' : { `` @ version '' : `` 1.0 '' , `` @ encoding '' : `` UTF-8 '' } , `` DataFeed '' : { `` @ FeedName '' : `` issuerDetails '' , `` SecurityDetails '' : { `` Security '' : { `` SecurityID '' : { `` @ idValue '' : `` AAPL-NSDQ '' , `` @ fiscalYearEnd '' : `` 2016-12-31T00:00:00.00 '' } , `` FinancialModels '' : { `` FinancialModel '' : [ { `` @ id '' : `` 780 '' , `` @ name '' : `` Estimates - Energy '' , `` @ clientCode '' : `` A '' , `` Values '' : [ { `` @ name '' : `` EBITDA '' , `` @ clientCode '' : `` EBITDA '' , `` @ currency '' : `` C $ '' , `` Value '' : [ { `` @ year '' : `` 2014 '' , `` # text '' : `` 555.64 '' } , { `` @ year '' : `` 2015 '' , `` # text '' : `` -538.986 '' } , { `` @ year '' : `` 2016 '' , `` # text '' : `` 554.447 '' } , { `` @ year '' : `` 2017 '' , `` # text '' : `` 551.091 '' } , { `` @ year '' : `` 2018 '' , `` # text '' : `` 0 '' } ] } , { `` @ name '' : `` EPS '' , `` @ clientCode '' : `` EPS '' , `` @ currency '' : `` C $ '' , `` Value '' : [ { `` @ year '' : `` 2014 '' , `` # text '' : `` 0 '' } , { `` @ year '' : `` 2015 '' , `` # text '' : `` -1.667 '' } , { `` @ year '' : `` 2016 '' , `` # text '' : `` -1.212 '' } , { `` @ year '' : `` 2017 '' , `` # text '' : `` 0.202 '' } , { `` @ year '' : `` 2018 '' , `` # text '' : `` 0 '' } ] } , { `` @ name '' : `` CFPS '' , `` @ clientCode '' : `` CFPS '' , `` @ currency '' : `` C $ '' , `` Value '' : [ { `` @ year '' : `` 2014 '' , `` # text '' : `` 3.196 '' } , { `` @ year '' : `` 2015 '' , `` # text '' : `` -0.207 '' } , { `` @ year '' : `` 2016 '' , `` # text '' : `` 0.599 '' } , { `` @ year '' : `` 2017 '' , `` # text '' : `` 2.408 '' } , { `` @ year '' : `` 2018 '' , `` # text '' : `` 0 '' } ] } ] } ] } } } } } JObject jsonFeed = JObject.Parse ( jsonText ) ; var query = from security in jsonFeed.SelectTokens ( `` DataFeed.SecurityDetails.Security '' ) .SelectMany ( i = > i.ObjectsOrSelf ( ) ) let finModels = security.SelectTokens ( `` FinancialModels.FinancialModel '' ) .SelectMany ( s = > s.ObjectsOrSelf ( ) ) .FirstOrDefault ( ) where finModels ! = null select new { FinModelClientCode = ( string ) finModels.SelectToken ( `` Values [ 1 ] . @ clientCode '' ) , FinModelYear2015 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 1 ] . @ year '' ) , FinModelValue2015 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 1 ] . # text '' ) , FinModelYear2016 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 2 ] . @ year '' ) , FinModelValue2016 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 2 ] . # text '' ) , FinModelYear2017 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 3 ] . @ year '' ) , FinModelValue2017 = ( string ) finModels.SelectToken ( `` Values [ 1 ] .Value [ 3 ] . # text '' ) , } ; public static class JsonExtensions { public static IEnumerable < JToken > DescendantsAndSelf ( this JToken node ) { if ( node == null ) return Enumerable.Empty < JToken > ( ) ; var container = node as JContainer ; if ( container ! = null ) return container.DescendantsAndSelf ( ) ; else return new [ ] { node } ; } public static IEnumerable < JObject > ObjectsOrSelf ( this JToken root ) { if ( root is JObject ) yield return ( JObject ) root ; else if ( root is JContainer ) foreach ( var item in ( ( JContainer ) root ) .Children ( ) ) foreach ( var child in item.ObjectsOrSelf ( ) ) yield return child ; else yield break ; } public static IEnumerable < JToken > SingleOrMultiple ( this JToken source ) { IEnumerable < JToken > arr = source as JArray ; return arr ? ? new [ ] { source } ; } } XmlDocument doc = new XmlDocument ( ) ; doc.LoadXml ( xmlString ) ; jsonText = Newtonsoft.Json.JsonConvert.SerializeXmlNode ( doc ) ; JObject jsonFeed = JObject.Parse ( jsonText ) ;"
"MyControl_MyCollectionChanged ( object sender , NotifyCollectionChangedEventArgs e ) { if ( e.Action == NotifyCollectionChangedAction.Add ) { lock ( e.NewItems.SyncRoot ) { var myItems = e.NewItems.OfType < MyType > ( ) ; if ( myItems.Any ( ) ) { //do stuff } } } } e.NewItems.SyncRoot | { object [ 1 ] } |- [ 0 ] | { System.Linq.Enumerable.WhereSelectListIterator < MyType , IMyInterface > } | |-base ... | |-Non-public members| |-Results View | Expanding the Results View ... | |- [ 0 ] | MyType"
"// this method will return the possible number of testspublic static double PosibleNumberOfTests ( ) { int q1 , q2 , q3 , q4 , q5 , q6 , q7 , q8 , q9 , q10 , q11 , q12 ; // each question value double counter=0 ; // if there is a valid combination then counter will be increased by 1 for ( q12 = 5 ; q12 < 46 ; q12++ ) { for ( q11 = 5 ; q11 < 46 ; q11++ ) { for ( q10 = 5 ; q10 < 46 ; q10++ ) { for ( q9 = 5 ; q9 < 46 ; q9++ ) { for ( q8 = 5 ; q8 < 46 ; q8++ ) { for ( q7 = 5 ; q7 < 46 ; q7++ ) { for ( q6 = 5 ; q6 < 46 ; q6++ ) { for ( q5 = 5 ; q5 < 46 ; q5++ ) { for ( q4 = 5 ; q4 < 46 ; q4++ ) { for ( q3 = 5 ; q3 < 46 ; q3++ ) { for ( q2 = 5 ; q2 < 46 ; q2++ ) { for ( q1 = 5 ; q1 < 46 ; q1++ ) { if ( q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8 + q9 + q10 + q11 + q12 == 100 ) counter++ ; // here is what we need . How many times will this line be executed ! } } } } } } } } } } } } return counter ; }"
int n = 0 ; for ( int i = 0 ; i < 50 ; i++ ) { n = checkStatus ( ) ; switch ( n ) { case 1 : break ; break ; //This is unreachable and so i can not Terminate the For Loop within the SWITCH } } if ( LoopShouldTerminate ) break ;
"If AnalogSignalMeter1.LeftLevel > 0 Or AnalogSignalMeter1.RightLevel > 0 Then ' Do SomethingEnd If Private Function GetVol ( ) As Integer 'Function to read current volume setting Dim MasterMinimum As Integer = 0 Dim DevEnum As New MMDeviceEnumerator ( ) Dim device As MMDevice = DevEnum.GetDefaultAudioEndpoint ( EDataFlow.eRender , ERole.eMultimedia ) Dim Vol As Integer = 0 With device.AudioEndpointVolume Vol = CInt ( .MasterVolumeLevelScalar * 100 ) If Vol < MasterMinimum Then Vol = MasterMinimum / 100.0F End If End With Return VolEnd Function Private Sub Timer1_Tick ( ) If VUSoundLevels > 0 Then ' Run Code & Exit Loop End IFEnd Sub"
What is the difference between < % : % > and < % # : % > in Asp.Net
"public ComplexNumber Add ( ComplexNumber c ) { double realPartAdder = c.GetRealPart ( ) ; double complexPartAdder = c.GetComplexPart ( ) ; double realPartCaller = this.GetRealPart ( ) ; double complexPartCaller = this.GetComplexPart ( ) ; double finalRealPart = realPartCaller + realPartAdder ; double finalComplexPart = complexPartCaller + complexPartAdder ; ComplexNumber summedComplex = new ComplexNumber ( finalRealPart , finalComplexPart ) ; return summedComplex ; }"
"private void MessagePanel_ControlAdded ( object sender , ControlEventArgs e ) { MessagesPanel.ScrollControlIntoView ( e.Control ) ; } MessagesPanel.VerticalScroll.Value = MessagesPanel.VerticalScroll.Maximum private void AddMessageToPanel ( string sender , string datetime , string content ) { GroupBox groupBox = new GroupBox ( ) ; groupBox.Location = new Point ( 0 , 120 * MessagesPanel.Controls.Count ) ; groupBox.RightToLeft = RightToLeft.Yes ; groupBox.Size = new Size ( 500 , 100 ) ; groupBox.Text = string.Format ( `` { 0 } ( { 1 } ) '' , sender , datetime ) ; TextBox textBox = new TextBox ( ) ; textBox.Enabled = false ; textBox.BackColor = Color.White ; textBox.BorderStyle = BorderStyle.None ; textBox.Multiline = true ; textBox.Size = new Size ( 495 , 95 ) ; textBox.Location = new Point ( 0 , 20 ) ; textBox.Text = content ; groupBox.Controls.Add ( textBox ) ; MessagesPanel.Controls.Add ( groupBox ) ; }"
"[ StructLayout ( LayoutKind.Explicit , Pack = 1 , Size = 4 ) ] public struct Mask32 { [ FieldOffset ( 3 ) ] public byte Byte1 ; [ FieldOffset ( 2 ) ] public ushort UShort1 ; [ FieldOffset ( 2 ) ] public byte Byte2 ; [ FieldOffset ( 1 ) ] public byte Byte3 ; [ FieldOffset ( 0 ) ] public ushort UShort2 ; [ FieldOffset ( 0 ) ] public byte Byte4 ; [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static unsafe implicit operator Mask32 ( int i ) = > * ( Mask32* ) & i ; [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static unsafe implicit operator Mask32 ( uint i ) = > * ( Mask32* ) & i ; } public unsafe class MyBenchmark { const int count = 50000 ; [ Benchmark ( Baseline = true ) ] public static void Direct ( ) { var j = 0 ; for ( int i = 0 ; i < count ; i++ ) { //var b1 = i.Byte1 ( ) ; //var b2 = i.Byte2 ( ) ; var b3 = i.Byte3 ( ) ; //var b4 = i.Byte4 ( ) ; j += b3 ; } } [ Benchmark ] public static void ViaStructPointer ( ) { var j = 0 ; int i = 0 ; var s = ( Mask32* ) & i ; for ( ; i < count ; i++ ) { //var b1 = s- > Byte1 ; //var b2 = s- > Byte2 ; var b3 = s- > Byte3 ; //var b4 = s- > Byte4 ; j += b3 ; } } [ Benchmark ] public static void ViaStructPointer2 ( ) { var j = 0 ; int i = 0 ; for ( ; i < count ; i++ ) { var s = * ( Mask32* ) & i ; //var b1 = s.Byte1 ; //var b2 = s.Byte2 ; var b3 = s.Byte3 ; //var b4 = s.Byte4 ; j += b3 ; } } [ Benchmark ] public static void ViaStructCast ( ) { var j = 0 ; for ( int i = 0 ; i < count ; i++ ) { Mask32 m = i ; //var b1 = m.Byte1 ; //var b2 = m.Byte2 ; var b3 = m.Byte3 ; //var b4 = m.Byte4 ; j += b3 ; } } [ Benchmark ] public static void ViaUnsafeAs ( ) { var j = 0 ; for ( int i = 0 ; i < count ; i++ ) { var m = Unsafe.As < int , Mask32 > ( ref i ) ; //var b1 = m.Byte1 ; //var b2 = m.Byte2 ; var b3 = m.Byte3 ; //var b4 = m.Byte4 ; j += b3 ; } } } [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static byte Byte1 ( this int it ) = > ( byte ) ( it > > 24 ) ; [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static byte Byte2 ( this int it ) = > ( byte ) ( ( it > > 16 ) & 0xFF ) ; [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static byte Byte3 ( this int it ) = > ( byte ) ( ( it > > 8 ) & 0xFF ) ; [ DebuggerStepThrough , MethodImpl ( MethodImplOptions.AggressiveInlining ) ] public static byte Byte4 ( this int it ) = > ( byte ) it ; Intel Core i7-3770K CPU 3.50GHz ( Ivy Bridge ) , 1 CPU , 8 logical cores and 4 physical coresFrequency=3410223 Hz , Resolution=293.2360 ns , Timer=TSC [ Host ] : .NET Framework 4.6.1 ( CLR 4.0.30319.42000 ) , 64bit RyuJIT-v4.6.1086.0 DefaultJob : .NET Framework 4.6.1 ( CLR 4.0.30319.42000 ) , 64bit RyuJIT-v4.6.1086.0 Method | Mean | Error | StdDev | Scaled | ScaledSD | -- -- -- -- -- -- -- -- -- | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- - : | -- -- -- -- - : | Direct | 14.47 us | 0.3314 us | 0.2938 us | 1.00 | 0.00 | ViaStructPointer | 111.32 us | 0.6481 us | 0.6062 us | 7.70 | 0.15 | ViaStructPointer2 | 102.31 us | 0.7632 us | 0.7139 us | 7.07 | 0.14 | ViaStructCast | 29.00 us | 0.3159 us | 0.2800 us | 2.01 | 0.04 | ViaUnsafeAs | 14.32 us | 0.0955 us | 0.0894 us | 0.99 | 0.02 | Method | Mean | Error | StdDev | Scaled | ScaledSD | -- -- -- -- -- -- -- -- -- | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- - : | -- -- -- -- - : | Direct | 57.51 us | 1.1070 us | 1.0355 us | 1.00 | 0.00 | ViaStructPointer | 203.20 us | 3.9830 us | 3.5308 us | 3.53 | 0.08 | ViaStructPointer2 | 198.08 us | 1.8411 us | 1.6321 us | 3.45 | 0.06 | ViaStructCast | 79.68 us | 1.5478 us | 1.7824 us | 1.39 | 0.04 | ViaUnsafeAs | 57.01 us | 0.8266 us | 0.6902 us | 0.99 | 0.02 |"
void Main ( ) { throw new Exception ( ) ; throw new Exception ( ) ; }
// Arabic String Astr = `` سُوْرَةُ الْفَاتِحَة '' ; // String with Integer -1num = `` - '' +1 ; // Adding Stringsr = Astr + num ; r = num + Astr ; سُوْرَةُ الْفَاتِحَة‎-1
"string culture = `` vi '' ; System.Threading.Thread.CurrentThread.CurrentCulture = new CultureInfo ( culture ) ; System.Threading.Thread.CurrentThread.CurrentUICulture = System.Threading.Thread.CurrentThread.CurrentCulture ; var CCC = string.Equals ( `` CategId '' , `` CATEGID '' , StringComparison.CurrentCultureIgnoreCase ) ; var xx = string.Equals ( `` TestGID '' , `` TestGID '' , StringComparison.CurrentCultureIgnoreCase ) ; var zz = string.Equals ( `` id '' , `` ID '' , StringComparison.CurrentCultureIgnoreCase ) ;"
"public static int bytesToInt ( byte b0 , byte b1 , byte b2 , byte b3 ) { return ( ( ( int ) b0 < < 24 ) & 0xFF000000 ) | ( ( ( int ) b1 < < 16 ) & 0x00FF0000 ) | ( ( ( int ) b2 < < 8 ) & 0x0000FF00 ) | ( ( int ) b3 & 0x000000FF ) ; } public static byte [ ] charToBytes ( char c ) { byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( ( c > > > 8 ) & 0x00FF ) ; result [ 1 ] = ( byte ) ( ( c > > > 0 ) & 0x00FF ) ; return result ; }"
For each square on the board Check if this key has potential moves If Potential moves < Some way of selecting a next move ( this could be the square we just originated from too ! ) > Register this move into a collection we can check against for subsequent moves Recursively call function with the square we just landed on Else ContinueEnd
"CREATE TABLE [ Post ] ( [ Id ] INT IDENTITY NOT NULL , [ Name ] NVARCHAR ( 20 ) NOT NULL , CONSTRAINT [ PK_Post ] PRIMARY KEY CLUSTERED ( [ Id ] ) ) CREATE TABLE [ Category ] ( [ Id ] INT IDENTITY NOT NULL , [ PostId ] INT NOT NULL , [ Name ] NVARCHAR ( 20 ) NOT NULL , CONSTRAINT [ FK_Category_Post ] FOREIGN KEY ( [ PostId ] ) REFERENCES [ Post ] ( [ Id ] ) ) INSERT INTO [ Post ] ( [ Name ] ) VALUES ( 'Post 1 ' ) INSERT INTO [ Category ] ( [ PostId ] , [ Name ] ) VALUES ( 1 , 'Alpha ' ) void Main ( ) { using ( var sessionFactory = Fluently.Configure ( ) .Database ( MsSqlConfiguration.MsSql2008.Dialect < MsSql2012Dialect > ( ) .ConnectionString ( @ '' Data Source= ( localdb ) \Projects ; Initial Catalog=NhTest ; '' ) ) .Mappings ( x = > { x.FluentMappings.Add ( typeof ( PostMap ) ) ; } ) .BuildSessionFactory ( ) ) using ( var session = sessionFactory.OpenSession ( ) ) { var post = session.Get < Post > ( 1 ) ; Debug.Assert ( post.Categories.First ( ) == `` Alpha '' ) ; try { var second = session.Query < Post > ( ) .Where ( x = > x.Id == 1 ) .Select ( x = > new { x.Categories , x.Name , } ) .Single ( ) ; } catch ( Exception ex ) { Debug.Fail ( ex.ToString ( ) ) ; } var third = session.Query < Post > ( ) .Where ( x = > x.Id == 1 ) .Select ( x = > new { x.Categories , x.Name , } ) .ToList ( ) .First ( ) ; Debug.Assert ( third.Categories.Count ( ) == 1 , `` Category count was `` + third.Categories.Count ( ) ) ; } } // Define other methods and classes hereclass Post { public virtual int Id { get ; protected set ; } public virtual string Name { get ; protected set ; } public virtual IList < string > Categories { get ; protected set ; } } class PostMap : ClassMap < Post > { public PostMap ( ) { Id ( x = > x.Id ) ; Map ( x = > x.Name ) ; HasMany ( x = > x.Categories ) .Table ( `` Category '' ) .Element ( `` Name '' ) .KeyColumn ( `` PostId '' ) ; } } 'System.Linq.EnumerableQuery ` 1 [ System.Collections.Generic.IList ` 1 [ System.String ] ] ' can not be converted to type 'System.Linq.IQueryable ` 1 [ System.Object [ ] ]"
"GetProvinceCodeByLatLong ( a.Latitude , a.Longitude ) [ DbFunction ( `` Core.Models '' , `` fn_GetProvinceCodeByLatLong '' ) ] public static string GetProvinceCodeByLatLong ( double latitude , double longitude ) { throw new NotSupportedException ( `` Direct calls are not supported . `` ) ; } < Function Name= '' fn_GetProvinceCodeByLatLong '' ReturnType= '' varchar '' Aggregate= '' false '' BuiltIn= '' false '' NiladicFunction= '' false '' IsComposable= '' true '' ParameterTypeSemantics= '' AllowImplicitConversion '' Schema= '' dbo '' > < Parameter Name= '' latitude '' Type= '' float '' Mode= '' In '' / > < Parameter Name= '' longitude '' Type= '' float '' Mode= '' In '' / > < /Function >"
[ TestMethod ] [ UseReporter ( typeof ( FileLauncherReporter ) ) ] public void TestPdf ( ) { var createSomePdf = PdfCreate ( ) ; ApprovalTests.Approvals.Verify ( new FileInfo ( createSomePdf.FileName ) ) ; }
A.CallTo ( ( ) = > db.Customers.Add ( A < Customer > .That.Matches ( c = > c.Invoices.First ( ) .Address == EXPECTED_ADDRESS ) ) ) ) .MustHaveHappened ( ) ; var expected = A < Customer > .That.Matches ( c = > c.Invoices.First ( ) .Address == EXPECTED_ADDRESS ) ) ; A.CallTo ( ( ) = > db.Customers.Add ( expected ) ) .MustHaveHappened ( ) ;
System.Configuration.Configuration config = ConfigurationManager.OpenExeConfiguration ( ConfigurationUserLevel.None ) ; config.AppSettings.File = myRuntimeConfigFilePath ; config.Save ( ConfigurationSaveMode.Modified ) ; ConfigurationManager.RefreshSection ( `` appSettings '' ) ;
"TagLib.File f = TagLib.File.Create ( @ '' C : \Users\spunit\Desktop\denna.mp3 '' ) ; TagLib.Id3v2.Tag t = ( TagLib.Id3v2.Tag ) f.GetTag ( TagTypes.Id3v2 ) ; PrivateFrame p = PrivateFrame.Get ( t , `` albumtype '' , true ) ; p.PrivateData = System.Text.Encoding.Unicode.GetBytes ( `` TAG CHANGED '' ) ; f.Tag.Album = `` test '' ; f.Save ( ) ;"
Process.Start ( `` Sample.xls '' ) ; Process p = new Process ( ) ; p.StartInfo.FileName = `` Sample.xls '' ; p.StartInfo.Arguments = `` /r '' ; // open in read-only mode p.Start ( ) ;
"private void txtResults_KeyDown ( object sender , KeyEventArgs e ) { string [ ] words= ( ( TextBox ) sender ) .Text.Split ( ' ' ) ; string s = sampleWord.Text = words [ words.Length - 1 ] ; if ( e.KeyCode == Keys.OemPeriod ) { ShowPopUpList ( s ) ; lst.Focus ( ) ; //This transfers the focus to listbox but then prevents user //from being able to type anymore unless he/she chooses an item ! } else if ( e.KeyCode == Keys.Down || e.KeyCode == Keys.Up ) { lst.Focus ( ) ; //doesnt work : -/ } else { lst.Hide ( ) ; txtResults.Focus ( ) ; } }"
"public static string ToCSVList < T > ( this T list ) where T : List < PersonDocument > , List < AssetDocument > public static string ToCSVList < T > ( this T list ) where T : List < AssetDocument > { var sb = new StringBuilder ( list.Count * 36 + list.Count ) ; string delimiter = String.Empty ; foreach ( var document in list ) { sb.Append ( delimiter + document.AssetID.ToString ( ) ) ; delimiter = `` , '' ; } return sb.ToString ( ) ; } public static string ToCSVList < T > ( this T list ) where T : List < PersonDocument > { var sb = new StringBuilder ( list.Count * 36 + list.Count ) ; string delimiter = String.Empty ; foreach ( var document in list ) { sb.Append ( delimiter + document.PersonID.ToString ( ) ) ; delimiter = `` , '' ; } return sb.ToString ( ) ; }"
Private void CheckControl ( Control ctl ) { switch ( ctl ) { case TextBox : MessageBox.Show ( `` This is My TextBox '' ) ; break ; case Label : MessageBox.Show ( `` This is My Label '' ) ; break ; } }
"public static bool Foo ( string name , out string key )"
"HttpWebRequest request = ( HttpWebRequest ) WebRequest.Create ( `` http : //teamxor.net/vb/tx48/ '' + page ) ; HttpWebResponse response = ( HttpWebResponse ) request.GetResponse ( ) ; StreamReader sr = new StreamReader ( response.GetResponseStream ( ) ) ; string result = sr.ReadToEnd ( ) ; Regex r = new Regex ( `` < div > . * ? < /div > '' ) ; MatchCollection mr = r.Matches ( result ) ; foreach ( Match m in mr ) { MessageBox.Show ( m.Value , `` Test '' , MessageBoxButtons.OK , MessageBoxIcon.Information , MessageBoxDefaultButton.Button1 , MessageBoxOptions.RtlReading ) ; }"
"public T Get < T > ( string key , Func < T > funcWhenNotExist ) { if ( ! Exists ( key ) ) { var result = funcWhenNotExist ( ) ; Cache.Put ( key , result ) ; } return DoSomethingWithRetry ( ( ) = > ( T ) Cache.Get ( key ) , MAXRETRY ) ; } public SomeDto GetSomeDto ( string dtoAlias ) { string cacheKey = `` whatever '' ; var someDto = cacheService.Get ( cacheKey , ( ) = > GetSomeDtoInternal ( dtoAlias ) ) ; return someDto } internal SomeDto GetSomeDtoInternal ( string dtoAlias { //do more here } // Arrange SomeDto stubResult = new SomeDto ( ) ; cacheService.Stub ( s = > s.Get ( Arg < string > .Is.Anything , Arg < Func < SomeDto > > .Is.Anything ) ) .WhenCalled ( m = > { var func = ( Func < SomeDto > ) m.Arguments [ 1 ] ; stubResult = func ( ) ; } ) .Return ( stubResult ) ; // Act var result = service.GetSomeDto ( `` whateveralias '' ) ;"
"var sb = new StringBuilder ( ) ; foreach ( var name in nameValues ) { sb.AppendFormat ( `` { 0 } = { 1 } & '' , name.Key , name.Value ) ; } //remove last ' & ' sign , this is what i think is uglysb.ToString ( ) .Remove ( lastIndex ) ;"
"public static void HandlePopup ( this HostedControl control , string className , string caption , System.Action callback ) { var popupTask = Task.Factory.StartNew ( ( ) = > { Thread.Sleep ( 5000 ) ; // just wait for 5 seconds . } , CancellationToken.None , TaskCreationOptions.None , TaskScheduler.Default ) .ContinueWith ( ( prevTask ) = > { AutomationElementCollection collection = null ; do { } while ( true ) ; } , CancellationToken.None , TaskContinuationOptions.None , TaskScheduler.FromCurrentSynchronizationContext ( ) ) .ContinueWith ( ( prevTask ) = > { if ( ! prevTask.IsFaulted ) { if ( control.InvokeRequired ) { control.Invoke ( callback ) ; } else { callback ( ) ; } } } , CancellationToken.None , TaskContinuationOptions.None , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ; try { ////popupTask.Wait ( ) ; } catch ( AggregateException ex ) { ex.Handle ( exnew = > { return true ; } ) ; } }"
"public void Configure ( IApplicationBuilder app , ILoggerFactory loggerFactory ) { app.UseIISPlatformHandler ( ) ; app.UseDefaultFiles ( ) ; app.UseStaticFiles ( ) ; app.UseMvc ( ) ; //app.Run ( async ( context ) = > // { // var greeting = greeter.GetGreeting ( ) ; // await context.Response.WriteAsync ( greeting ) ; // } ) ; } < system.webServer > < handlers > < add name= '' httpPlatformHandler '' path= '' * '' verb= '' * '' modules= '' httpPlatformHandler '' resourceType= '' Unspecified '' / > < /handlers > < httpPlatform processPath= '' % DNX_PATH % '' arguments= '' % DNX_ARGS % '' stdoutLogEnabled= '' false '' startupTimeLimit= '' 3600 '' forwardWindowsAuthToken= '' true '' / > public IConfiguration Configuration { get ; set ; } public static string ConnectionString { get ; set ; } public Startup ( ) { var builder = new ConfigurationBuilder ( ) .AddJsonFile ( `` appsetting.json '' ) .AddEnvironmentVariables ( ) ; Configuration = builder.Build ( ) ; ConnectionString = Configuration.GetSection ( `` connString '' ) .Value ; } // This method gets called by the runtime . Use this method to add services to the container . // For more information on how to configure your application , visit http : //go.microsoft.com/fwlink/ ? LinkID=398940 public void ConfigureServices ( IServiceCollection services ) { services.AddMvc ( ) ; } // This method gets called by the runtime . Use this method to configure the HTTP request pipeline . public void Configure ( IApplicationBuilder app , ILoggerFactory loggerFactory ) { app.UseIISPlatformHandler ( ) ; //app.UseDefaultFiles ( ) ; app.UseFileServer ( true ) ; app.UseMvc ( routes = > { routes.MapRoute ( name : `` default '' , template : `` { controller=Home } / { action=Index } '' ) ; } ) ; } // Entry point for the application . public static void Main ( string [ ] args ) = > WebApplication.Run < Startup > ( args ) ;"
"No . Time Source Destination Protocol Info 6366 15:54:35.590463 192.168.1.76 173.194.77.121 HTTP GET /key/value/one/two HTTP/1.1 6369 15:54:35.599879 173.194.77.121 192.168.1.76 TCP http > 55407 [ ACK ] Seq=1 Ack=110 Win=344 Len=0 6370 15:54:35.621587 173.194.77.121 192.168.1.76 HTTP HTTP/1.1 200 OK ( application/json ) 6608 15:54:35.815774 192.168.1.76 173.194.77.121 TCP 55407 > http [ ACK ] Seq=110 Ack=357 Win=509 Len=0 No . Time Source Destination Protocol Info 9720 15:54:39.244192 192.168.1.80 173.194.77.121 HTTP GET /key/value/one/two HTTP/1.1 9760 15:54:39.256958 173.194.77.121 192.168.1.80 TCP [ TCP segment of a reassembled PDU ] 9761 15:54:39.256962 173.194.77.121 192.168.1.80 HTTP HTTP/1.1 404 Not Found ( text/html ) 9762 15:54:39.257027 192.168.1.80 173.194.77.121 TCP 55438 > http [ ACK ] Seq=212 Ack=1676 Win=512 Len=0 public static HttpWebRequest CreateWebRequest ( string url , string method = `` GET '' , string referer = null , string contentType = null , int timeout = 100000 , string authentication = null , string bindToIpAddress = null , string host = null ) { var request = ( HttpWebRequest ) WebRequest.Create ( url ) ; if ( ! string.IsNullOrWhiteSpace ( bindToIpAddress ) ) { IPAddress bindIp ; if ( ! IPAddress.TryParse ( bindToIpAddress , out bindIp ) ) { throw new ArgumentException ( `` bindToIpAddress '' ) ; } request.ServicePoint.BindIPEndPointDelegate = ( ( sp , rep , rc ) = > { return new IPEndPoint ( bindIp , 0 ) ; } ) ; } request.Accept = `` */* '' ; request.ContentType = contentType ; request.Referer = referer ; request.Method = method ; request.Timeout = timeout ; if ( ! string.IsNullOrWhiteSpace ( host ) ) { request.Host = host ; } return request ; } string GetData ( ) { try { string result ; var request = CreateWebRequest ( `` http : //jsonplaceholder.typicode.com/posts/1 '' , `` GET '' , `` somedomain.com '' , timeout : ( 10 * 1000 ) , bindToIpAddress : `` 192.168.27.133 '' /*site IP*/ ) ; request.Accept = `` application/json '' ; using ( var response = request.GetResponse ( ) ) { using ( var sr = new StreamReader ( response.GetResponseStream ( ) ) ) { result = sr.ReadToEnd ( ) ; } } return result ; } catch ( Exception ex ) { return null ; } }"
Class MyClass { ... private String x ; private Boolean y ; ... } Class MyClass { ... private string x ; private bool y ; ... }
"List < Student > stuList = new List < Student > ( ) { new Student ( `` 上海 '' ) , new Student ( `` 深圳 '' ) , new Student ( `` 广州 '' ) , new Student ( `` 香港 '' ) } ; System.Globalization.CultureInfo strokCi = new System.Globalization.CultureInfo ( `` zh-tw '' ) ; System.Threading.Thread.CurrentThread.CurrentCulture = strokCi ; ; //stuList.sort ( ) ;"
"Where ( x = > x.Status == EmployeeStatus.Active ) Where ( Function ( x ) x.Status = EmployeeStatus.Active ) at NHibernate.Impl.ExpressionProcessor.FindMemberExpression ( Expression expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 168 at NHibernate.Impl.ExpressionProcessor.ProcessSimpleExpression ( Expression left , Expression right , ExpressionType nodeType ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 323 at NHibernate.Impl.ExpressionProcessor.ProcessSimpleExpression ( BinaryExpression be ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 316 at NHibernate.Impl.ExpressionProcessor.ProcessBinaryExpression ( BinaryExpression expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 418 at NHibernate.Impl.ExpressionProcessor.ProcessExpression ( Expression expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 486 at NHibernate.Impl.ExpressionProcessor.ProcessExpression [ T ] ( Expression ` 1 expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Impl\ExpressionProcessor.cs : line 504 at NHibernate.Criterion.QueryOver ` 2.Add ( Expression ` 1 expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Criterion\QueryOver.cs : line 635 at NHibernate.Criterion.QueryOver ` 2.NHibernate.IQueryOver < TRoot , TSubType > .Where ( Expression ` 1 expression ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Criterion\QueryOver.cs : line 686 at *removed*.EmployeeRepository.GetByEntityId ( Int64 entityId , Expression ` 1 basicCriteria ) in D : \*removed*\EmployeeRepository.cs : line 76 public IEnumerable < Employee > GetByEntityId ( long entityId , Expression < Func < Employee , bool > > basicCriteria ) { IEnumerable < Employee > result ; using ( var tx = Session.BeginTransaction ( ) ) { var employeeQuery = Session.QueryOver < Employee > ( ) .Where ( x = > x.EntityId == entityId ) ; if ( basicCriteria ! = null ) employeeQuery = employeeQuery.Where ( basicCriteria ) ; result = employeeQuery.List ( ) ; tx.Commit ( ) ; } return result ; }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using Microsoft.SqlServer.SSIS.EzAPI ; using Microsoft.SqlServer.Dts.Runtime ; namespace EzApiDemo { public class TableToTable : EzSrcDestPackage < EzOleDbSource , EzSqlOleDbCM , EzOleDbDestination , EzSqlOleDbCM > { public TableToTable ( Package p ) : base ( p ) { } public static implicit operator TableToTable ( Package p ) { return new TableToTable ( p ) ; } public TableToTable ( string sourceServer , string database , string table , string destinationServer ) : base ( ) { string saniName = TableToTable.SanitizeName ( table ) ; string sourceQuery = string.Format ( `` SELECT D.* FROM { 0 } D '' , table ) ; // Define package variables this.Variables.Add ( `` sourceQuery '' , false , `` User '' , sourceQuery ) ; this.Variables.Add ( `` tableName '' , false , `` User '' , table ) ; // Configure DataFlow properties this.DataFlow.Name = `` Replicate `` + saniName ; this.DataFlow.Description = `` Scripted replication '' ; // Connection manager configuration this.SrcConn.SetConnectionString ( sourceServer , database ) ; this.SrcConn.Name = `` PROD '' ; this.SrcConn.Description = string.Empty ; this.DestConn.SetConnectionString ( destinationServer , database ) ; this.DestConn.Name = `` PREPROD '' ; this.DestConn.Description = string.Empty ; // Configure Dataflow 's Source properties this.Source.Name = `` Src `` + saniName ; this.Source.Description = string.Empty ; this.Source.SqlCommand = sourceQuery ; // Configure Dataflow 's Destination properties this.Dest.Name = `` Dest `` + saniName ; this.Dest.Description = string.Empty ; this.Dest.Table = table ; this.Dest.FastLoadKeepIdentity = true ; this.Dest.FastLoadKeepNulls = true ; this.Dest.DataSourceVariable = this.Variables [ `` tableName '' ] .QualifiedName ; this.Dest.AccessMode = AccessMode.AM_OPENROWSET_FASTLOAD_VARIABLE ; this.Dest.LinkAllInputsToOutputs ( ) ; } /// < summary > /// Sanitize a name so that it is valid for SSIS objects . /// Strips [ ] /\ : = /// Replaces . with _ /// < /summary > /// < param name= '' name '' > < /param > /// < returns > < /returns > public static string SanitizeName ( string name ) { string saniName = name.Replace ( `` [ `` , String.Empty ) .Replace ( `` ] '' , string.Empty ) .Replace ( `` . `` , `` _ '' ) .Replace ( `` / '' , string.Empty ) .Replace ( `` \\ '' , string.Empty ) .Replace ( `` : '' , string.Empty ) ; return saniName ; } } } this.Source.DataSourceVariable = this.Variables [ `` sourceQuery '' ] .QualifiedName ; this.Source.AccessMode = AccessMode.AM_SQLCOMMAND_VARIABLE ; this.Dest.DataSourceVariable = this.Variables [ `` tableName '' ] .QualifiedName ; this.Dest.AccessMode = AccessMode.AM_OPENROWSET_FASTLOAD_VARIABLE ; this.Source.AccessMode = AccessMode.AM_OPENROWSET ; this.Source.AccessMode = AccessMode.AM_OPENROWSET_VARIABLE ; this.Source.AccessMode = AccessMode.AM_SQLCOMMAND ; this.Source.AccessMode = AccessMode.AM_OPENROWSET_FASTLOAD ; this.Source.AccessMode = AccessMode.AM_OPENROWSET_FASTLOAD_VARIABLE ; Application app = new Application ( ) ; Package p = app.LoadPackage ( @ '' C : \sandbox\SSISHackAndSlash\SSISHackAndSlash\EzApiPackage.dtsx '' , null ) ; TableToTable to = new TableToTable ( p ) ;"
"[ { content : `` Hey '' , level : `` 1 '' } , { content : `` I just met you '' , level : `` 2 '' } , { content : `` and this is crazy '' , level : `` 2 '' } , { content : `` but here 's my number '' , level : `` 1 '' } , { content : `` call me , maybe '' , level : `` 3 '' } ] < ul > < li > Hey < /li > < li > < ul > < li > I just met you < /li > < li > and this is crazy < /li > < /ul > < /li > < li > but here 's my number < /li > < li > < ul > < li > < ul > < li > call me , maybe < /li > < /ul > < /li > < /ul > < /li > < /ul >"
< Window x : Class= '' MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Title= '' MainWindow '' Height= '' 200 '' Width= '' 525 '' > < Grid > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' 100 '' / > < ColumnDefinition Width= '' * '' / > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < Grid.RowDefinitions > < RowDefinition Height= '' AUTO '' / > < RowDefinition Height= '' AUTO '' / > < /Grid.RowDefinitions > < TextBlock Text= '' TextBlock '' VerticalAlignment= '' Center '' Margin= '' 6 '' / > < TextBlock Grid.Row= '' 1 '' Text= '' Glyphs '' VerticalAlignment= '' Center '' Margin= '' 6 '' / > < TextBlock Text= '' בְּרֵאשִׁית '' Grid.Column= '' 1 '' FontSize= '' 50 '' FontFamily= '' Times New Roman '' FontWeight= '' Normal '' Grid.Row= '' 0 '' / > < Glyphs Grid.Row= '' 1 '' Grid.Column= '' 1 '' FontUri = `` C : \WINDOWS\Fonts\TIMES.TTF '' FontRenderingEmSize = `` 50 '' UnicodeString = `` בְּרֵאשִׁית '' BidiLevel= '' 1 '' Fill = `` Black '' / > < TextBlock Text= '' AVAV '' Grid.Column= '' 2 '' FontSize= '' 50 '' FontFamily= '' Times New Roman '' FontWeight= '' Normal '' Grid.Row= '' 0 '' / > < Glyphs Grid.Row= '' 1 '' Grid.Column= '' 2 '' FontUri = `` C : \WINDOWS\Fonts\TIMES.TTF '' FontRenderingEmSize = `` 50 '' UnicodeString = `` AVAV '' BidiLevel= '' 0 '' Fill = `` Black '' / > < /Grid > < /Window >
[ TestMethod ] public void Test ( ) { var h = new WeakReference ( new object ( ) ) ; GC.Collect ( ) ; Assert.IsNull ( h.Target ) ; } [ TestMethod ] public void Test ( ) { var h = new WeakReference ( new object ( ) ) ; GC.Collect ( ) ; try { } // I just add an empty finally { } // try/finally block Assert.IsNull ( h.Target ) ; // FAIL ! }
public abstract class MyAbstract { [ IndexerName ( `` Indexer '' ) ] public abstract string this [ string propertyName ] { get ; } } public class MyConcrete : MyAbstract { string item ; public string Item { get { return item ; } set { item = value ; } } public override string this [ string propertyName ] { get { return propertyName ; } } }
< Canvas > < Ellipse / > < Ellipse / > < Canvas.RenderTransform > < RotateTransform x : Name= '' rotateEllipse '' / > < /Canvas.RenderTransform > < /Canvas >
"public class Foo < T > { public T Value { get ; set ; } public bool Update { get ; set ; } } public class Bar { public Foo < bool > SomeBool { get ; set ; } public Foo < string > SomeString { get ; set ; } } public void Helper < T > ( Expression < Func < Bar , Foo < T > > > baseExpression , Expression < Func < Bar , T > > valExpression , Expression < Func < Bar , bool > > updateExpression ) { // Do some stuff with those expressions . } Helper ( b= > b.SomeBool , b= > b.SomeBool.Value , b= > b.SomeBool.Update ) ; Helper ( b= > b.SomeBool ) ; public void Helper < T > ( Expression < Func < Bar , Foo < T > > > baseExpression ) { // Do some stuff var valExpression = ? ? ? ; // append ` .Value ` to baseExpression var updateExpression = ? ? ? ; // append ` .Update ` to baseExpression }"
`` DDD.Events.Application.ApplicationReferenceCreated '' .GetHashCode ( )
"[ TestMethod ] public void TestMethod ( ) { List list = MethodToTest ( param1 , param2 ) ; list.Single ( s = > s.Matches ( condition ) ) ; //No actual Assert }"
public class MyClass { protected MyClass ( ) { } public static MyClass Create ( ) { return new MyClass ( ) ; } } MyClass myClass = MyClass.Create ( ) ; MyClass myClass = new MyClass ( ) ;
"new XDocument ( new XElement ( `` a '' , new XElement ( `` b '' , new XElement ( `` c '' ) ) ) ) .Save ( Console.Out ) ; < a > < b > < c / > < /b > < /a > new XDocument ( new XElement ( `` a '' , new XElement ( `` b '' , new XAttribute ( XNamespace.Xml + `` space '' , `` preserve '' ) , new XElement ( `` c '' ) ) ) ) .Save ( Console.Out ) ; < a > < b xml : space= '' preserve '' > < c / > < /b > < /a > < a > < b xml : space= '' preserve '' > < c / > < /b > < /a >"
class Foo { private Bar _BarStruct ; public Bar BarStruct { get { return _BarStruct ; } set { _BarStruct = value ; } } } private struct Bar { public int Number ; Bar ( ) { Number = 1 ; } Bar ( int i ) { Number = i ; } } Foo fooObj = new Foo ( ) ; Foo fooObj = new Foo ( ) ; fooObj.BarStruct.Number = 1 ; fooObj.BarStruct = new Bar ( 2 ) ;
"protected IList < Stuff > RelevantSessionData { get { return ( IList < Stuff > ) Session [ `` relevant_key '' ] ; } set { Session [ `` relevant_key '' ] = value ; } } Debug.WriteLine ( RelevantSessionData.Count ) ; //outputs , say , 3RelevantSessionData.Clear ( ) ; Debug.WriteLine ( RelevantSessionData.Count ) ; //outputs 0"
"void Main ( ) { try { int zero = 0 ; int result = 5 / zero ; } catch ( DivideByZeroException ex ) { Logger logger = LogManager.GetCurrentClassLogger ( ) ; logger.ErrorException ( `` Whoops ! `` , ex ) ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < nlog xmlns= '' http : //www.nlog-project.org/schemas/NLog.xsd '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' > < targets > < target name= '' logfile '' xsi : type= '' File '' fileName= '' logfile.log '' / > < /targets > < rules > < logger name= '' * '' minlevel= '' Info '' writeTo= '' logfile '' / > < /rules > < /nlog >"
"String MessageRecieptDate = messageReceiptDate.Replace ( `` T '' , `` `` ) .Remove ( messageReceiptDate.Length-4 ) ; DateTime dt = new DateTime ( ) ; IFormatProvider culture = new CultureInfo ( `` en-US '' ) ; dt = DateTime.ParseExact ( MessageRecieptDate , `` dd MMM '' , culture ) ;"
class Foo { public string Something ; } class Bar { public string Something { get ; set ; } } class Program { static void Main ( string [ ] args ) { var MyFoo = new Foo ( ) ; MyFoo.Something = `` Hello : foo '' ; System.Console.WriteLine ( MyFoo.Something ) ; var MyBar = new Bar ( ) ; MyBar.Something = `` Hello : bar '' ; System.Console.WriteLine ( MyBar.Something ) ; System.Console.ReadLine ( ) ; } } class Foo { private string _Something ; public string Something { get { //logic return _Something ; } set { //check new invariant _Something = value ; } } }
"[ DbConfigurationType ( typeof ( MySql.Data.Entity.MySqlEFConfiguration ) ) ] public partial class MultipleContext : DbContext { public MariaDBContext ( string connection ) : base ( connection ) { //Database.SetInitializer < MultipleDBContext > ( new MariaDbInitializer ( ) ) ; } public virtual DbSet < Test > Tests { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder.Entity < Test > ( ) .ToTable ( `` test '' ) .HasKey ( e = > e.ID ) ; } } public partial class Test { public int ID { get ; set ; } public string Name { get ; set ; } public string Family { get ; set ; } } < connectionStrings > < add name= '' MariaDBContext '' connectionString= '' server=127.0.0.1 ; user id=root ; password=xx ; database=sb1 '' providerName= '' MySql.Data.MySqlClient '' / > < add name= '' SqlDBContext '' connectionString= '' Data Source=localhost ; Integrated Security=SSPI ; Initial Catalog=db1 '' providerName= '' System.Data.SqlClient '' / > < /connectionStrings > < entityFramework > < defaultConnectionFactory type= '' System.Data.Entity.Infrastructure.LocalDbConnectionFactory , EntityFramework '' > < parameters > < parameter value= '' mssqllocaldb '' / > < /parameters > < /defaultConnectionFactory > < providers > < provider invariantName= '' MySql.Data.MySqlClient '' type= '' MySql.Data.MySqlClient.MySqlProviderServices , MySql.Data.Entity.EF6 , Version=6.9.8.0 , Culture=neutral , PublicKeyToken=c5687fc88969c44d '' / > < /providers > < /entityFramework > MultipleDBContext context = new MultipleDBContext ( System.Configuration.ConfigurationManager.ConnectionStrings [ `` MariaDBContext '' ] .ToString ( ) ) ; var xx = context.Tests.Where ( x = > x.ID > 0 ) .ToList ( ) ; context.Tests.Add ( new Test ( ) { Name = `` name '' , Family = `` '' } ) ; context.SaveChanges ( ) ; xx = context.Tests.Where ( x = > x.ID > 0 ) .ToList ( ) ; //Use sql connectionMultipleDBContext sqlContext = new MultipleDBContext ( System.Configuration.ConfigurationManager.ConnectionStrings [ `` SqlDBContext '' ] .ToString ( ) ) ; var sqlTest = sqlContext.Tests.Where ( x = > x.ID > 0 ) .ToList ( ) ; sqlContext.Tests.Add ( new Test ( ) { Name = `` name_ '' + DateTime.Now.Ticks.ToString ( ) , Family = `` family_ '' + DateTime.Now.Ticks.ToString ( ) , } ) ; sqlContext.SaveChanges ( ) ; sqlTest = sqlContext.Tests.Where ( x = > x.ID > 0 ) .ToList ( ) ;"
"using ( var drawingContext = m_drawingVisual.RenderOpen ( ) ) { // Many different drawingContext.Draw calls // E.g . DrawEllipse , DrawRectangle etc . } override void OnRender ( DrawingContext drawingContext ) { // Many different drawingContext.Draw calls // E.g . DrawEllipse , DrawRectangle etc . } < Viewbox x : Name= '' ImageViewbox '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Center '' > < Grid x : Name= '' ImageGrid '' SnapsToDevicePixels= '' True '' ClipToBounds= '' True '' > < Grid.LayoutTransform > < ScaleTransform x : Name= '' ImageTransform '' CenterX= '' 0 '' CenterY= '' 0 '' ScaleX= '' { Binding ElementName=ImageScaleSlider , Path=Value } '' ScaleY= '' { Binding ElementName=ImageScaleSlider , Path=Value } '' / > < /Grid.LayoutTransform > < Image x : Name= '' ImageSource '' RenderOptions.BitmapScalingMode= '' NearestNeighbor '' SnapsToDevicePixels= '' True '' MouseMove= '' ImageSource_MouseMove '' / > < v : DrawingVisualControl x : Name= '' DrawingVisualControl '' Visual= '' { Binding DrawingVisual } '' SnapsToDevicePixels= '' True '' RenderOptions.BitmapScalingMode= '' NearestNeighbor '' IsHitTestVisible= '' False '' / > < /Grid > < /Viewbox > public class DrawingVisualControl : FrameworkElement { public DrawingVisual Visual { get { return GetValue ( DrawingVisualProperty ) as DrawingVisual ; } set { SetValue ( DrawingVisualProperty , value ) ; } } private void UpdateDrawingVisual ( DrawingVisual visual ) { var oldVisual = Visual ; if ( oldVisual ! = null ) { RemoveVisualChild ( oldVisual ) ; RemoveLogicalChild ( oldVisual ) ; } AddVisualChild ( visual ) ; AddLogicalChild ( visual ) ; } public static readonly DependencyProperty DrawingVisualProperty = DependencyProperty.Register ( `` Visual '' , typeof ( DrawingVisual ) , typeof ( DrawingVisualControl ) , new FrameworkPropertyMetadata ( OnDrawingVisualChanged ) ) ; private static void OnDrawingVisualChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { var dcv = d as DrawingVisualControl ; if ( dcv == null ) { return ; } var visual = e.NewValue as DrawingVisual ; if ( visual == null ) { return ; } dcv.UpdateDrawingVisual ( visual ) ; } protected override int VisualChildrenCount { get { return ( Visual ! = null ) ? 1 : 0 ; } } protected override Visual GetVisualChild ( int index ) { return this.Visual ; } } < ListBox x : Name= '' Items '' Background= '' Black '' VirtualizingPanel.IsVirtualizing= '' True '' SnapsToDevicePixels= '' True '' > < ListBox.ItemTemplate > < DataTemplate DataType= '' { x : Type vm : ElementViewModel } '' > < Border Width= '' { Binding Width_mm } '' Height= '' { Binding Height_mm } '' Background= '' { Binding BackgroundColor } '' BorderBrush= '' { Binding BorderColor } '' BorderThickness= '' 3 '' > < TextBlock Foreground= '' { Binding DrawColor } '' Padding= '' 0 '' Margin= '' 0 '' Text= '' { Binding TextResult } '' FontSize= '' { Binding FontSize_mm } '' TextAlignment= '' Center '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Center '' / > < /Border > < /DataTemplate > < /ListBox.ItemTemplate > < ListBox.ItemContainerStyle > < Style TargetType= '' { x : Type ListBoxItem } '' > < Setter Property= '' Canvas.Left '' Value= '' { Binding X_mm } '' / > < Setter Property= '' Canvas.Top '' Value= '' { Binding Y_mm } '' / > < /Style > < /ListBox.ItemContainerStyle > < ListBox.ItemsPanel > < ItemsPanelTemplate > < Canvas IsItemsHost= '' True '' Width= '' { Binding CanvasWidth_mm } '' Height= '' { Binding CanvasHeight_mm } '' / > < /ItemsPanelTemplate > < /ListBox.ItemsPanel > < /ListBox >"
at NHibernate.Bytecode.AbstractBytecodeProvider.get_ProxyFactoryFactory ( ) in d : \CSharp\NH\NH\nhibernate\src\NHibernate\Bytecode\AbstractBytecodeProvider.cs : line 32at NHibernate.Validator.Util.NHibernateHelper.IsProxyFactoryConfigurated ( ) public static bool IsProxyFactoryConfigurated ( ) { try { IProxyFactoryFactory proxyFactoryFactory = Environment.BytecodeProvider.ProxyFactoryFactory ; return true ; } catch ( ProxyFactoryFactoryNotConfiguredException ) { return false ; } }
"//I replaced my calls to Console.ReadLine ( ) with this . The limit is the//max number of characters that can be entered in the console.public static string ReadChars ( int limit ) { string str = string.Empty ; //all the input so far int left = Console.CursorLeft ; //store cursor position for re-outputting int top = Console.CursorTop ; while ( true ) //keep checking for key events { if ( Console.KeyAvailable ) { //true to intercept input and not output to console //normally . This sometimes fails and outputs anyway . ConsoleKeyInfo c = Console.ReadKey ( true ) ; if ( c.Key == ConsoleKey.Enter ) //stop input on Enter key break ; if ( c.Key == ConsoleKey.Backspace ) //remove last char on Backspace { if ( str ! = `` '' ) { tr = str.Substring ( 0 , str.Length - 1 ) ; } } else if ( c.Key ! = ConsoleKey.Tab & & str.Length < limit ) { //do n't allow tabs or exceeding the max size str += c.KeyChar ; } else { //ignore tabs and when the limit is exceeded continue ; } Console.SetCursorPosition ( left , top ) ; string padding = `` '' ; //padding clears unused chars in field for ( int i = 0 ; i < limit - str.Length ; i++ ) { padding += `` `` ; } //output this way instead Console.Write ( str + padding ) ; } } return str ; }"
namespace MyApp.Extensions { public static class ExtensionMethods { public static string ToTitleCase ( this string Origcase ) { string TitleCase = Origcase ; ... implementation ... return TitleCase ; } } using MyApp.Extensions ; using MyApp.Extensions
void Main ( ) { try { try { Wrapper ( ) ; // line 13 } catch ( Exception e ) { Console.WriteLine ( e.ToString ( ) ) ; throw ; // line 18 } } catch ( Exception e ) { Console.WriteLine ( e.ToString ( ) ) ; } } public void Wrapper ( ) { Throw ( ) ; // line 28 } public void Throw ( ) { var x = ( string ) ( object ) 1 ; // line 33 }
using System ; class Program { class A { } class B : A { } private static void MyMethod ( A a ) /* first method */ { Console.WriteLine ( `` A '' ) ; ; } private static void MyMethod ( B b ) /* second method */ { Console.WriteLine ( `` B '' ) ; } static void Main ( string [ ] args ) { var a = new A ( ) ; // Call first method MyMethod ( a ) ; A b = new B ( ) ; // Should call the second method MyMethod ( b ) ; Console.ReadLine ( ) ; } }
public class Course { public int Id { get ; set ; } public string Name { get ; set ; } public DateTime StartDate { get ; set ; } public DateTime EndDate { get ; set ; } public virtual ICollection < Class > Classes { get ; set ; } } public class Class { public int Id { get ; set ; } public string Name { get ; set ; } public DateTime StartTime { get ; set ; } public DateTime EndTime { get ; set ; } ] public Course Course { get ; set ; } } var myList = context.Classes .GroupBy ( c = > c.Course ) .OrderByDescending ( g = > g.Key.StartDate ) .ToList ( ) var myList = context.Classes .OrderBy ( c = > c.StartTime ) .GroupBy ( c = > c.Course ) .OrderByDescending ( g = > g.Key.StartDate ) .ToList ( ) var myList = context.Classes .GroupBy ( c = > c.Course ) .OrderByDescending ( g = > g.Key.StartDate ) .ThenBy ( g = > g.Select ( c = > c.StartTime ) ) .ToList ( )
typeof ( IComparable ) .IsAssignableFrom ( typeof ( DateTime ? ) ) IComparable comparable = ( DateTime ? ) DateTime.Now ;
"package jnatest ; import com.sun.jna.Callback ; import com.sun.jna.Structure ; import java.util.logging.Logger ; public class LoggerStruct extends Structure { private Logger logger ; public interface GetLevelCallback extends Callback { int callback ( ) ; } public GetLevelCallback getLevel ; public LoggerStruct ( Logger log ) { super ( ) ; this.log = log ; getLevel = new GetLevelCallback ( ) { public int callback ( ) { return logger.getLevel ( ) .intValue ( ) ; } } setFieldOrder ( new String [ ] { `` getLevel '' } ) ; } } package jnatest ; import com.sun.jna.Library ; import com.sun.jna.Native ; public interface ITestLib extends Library { ITestLib INSTANCE = ( ITestLib ) Native.loadLibrary ( `` JNATestC '' , ITestLib.class ) ; int callbackTest ( LoggerStruct logStruct ) ; } package jnatest ; import com.sun.jna.NativeLibrary ; import java.util.logging.Logger ; import java.util.logging.FileHandler ; public class MainClass { public static void main ( String [ ] args ) throws Exception { NativeLibrary.addSearchPath ( `` JNATestC '' , `` C : \\JNATest '' ) ; Logger log = Logger.getLogger ( `` Test '' ) ; FileHandler fileTxt = new FileHandler ( `` Logging.txt '' ) ; log.addHandler ( fileTxt ) ; LoggerStruct logStruct = new LoggerStruct ( log ) ; ITestLib.INSTANCE.callbackTest ( logStruct ) ; } } # pragma onceextern `` C '' { struct LoggerStruct { int ( *getLevel ) ( ) ; } __declspec ( dllexport ) void callbackTest ( LoggerStruct * logStruct ) ; } namespace JnaWrapperTypes { public ref class Logger { // `` public ref '' because I have to use it in C # as well private : LoggerStruct * logStruct ; public : Logger ( LoggerStruct * logStruct ) ; ~Logger ( ) { } int getLevel ( ) ; } ; } # include `` stdafx.h '' # include < vcclr.h > # include `` JNATestC.h '' namespace JnaWrapperTypes { Logger : :Logger ( LoggerStruct * logStruct ) { this- > logStruct = logStruct ; } Logger : :getLevel ( ) { return logStruct- > getLevel ( ) ; } } using namespace JnaWrapperTypes ; using namespace StaticCSharpNamespace ; // Just an example . Not existing C # lib.extern `` C '' { __declspec ( dllexport ) void callbackTest ( LoggerStruct * logStruct ) { int level = logStruct- > getLevel ( ) ; gcroot < Logger^ > logger = gcnew Logger ( logStruct ) ; // IF I ADD `` gcroot '' FOR `` Logger '' THEN WHOLE INVOKE FAILS level = logger- > getLevel ( ) ; StaticCSharpClass : :staticMethod ( logger ) ; // I want to pass Managed object to C # later gcroot < System : :String^ > str = gcnew System : :String ( `` '' ) ; // This does n't generate error } } gcroot < System : :String^ > str = gcnew System : :String ( `` '' ) ;"
"using ( var customerOrderContext = new Entities ( ) ) { return ( from customer in customerOrderContext.Customers select new CustomerOrder.BusinessObjects.Customers { Id = customer.Id , FirstName = customer.FirstName , LastName = customer.LastName , Address = customer.Address , City = customer.City , Email = customer.Email , Gender = customer.Gender , State = customer.State , Zip = customer.Zip } ) .ToList ( ) ; } < add name= '' Entities '' connectionString= '' metadata=res : //*/EF.CustomerOrderContext.csdl|res : //*/EF.CustomerOrderContext.ssdl|res : //*/EF.CustomerOrderContext.msl ; provider=System.Data.SqlClient ; provider connection string= & quot ; data source=Tom-PC\MSSQLSERVER2014 ; initial catalog=Ransang ; integrated security=True ; MultipleActiveResultSets=True ; App=EntityFramework & quot ; '' providerName= '' System.Data.EntityClient '' / > public partial class Entities : DbContext { public Entities ( ) : base ( `` name=Entities '' ) { } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { } public virtual DbSet < Customer > Customers { get ; set ; } public virtual DbSet < OrderDetail > OrderDetails { get ; set ; } public virtual DbSet < Order > Orders { get ; set ; } public virtual DbSet < Product > Products { get ; set ; } } public IEnumerable < BusinessObjects.Customers > GetAllCustomers ( ) { IList < BusinessObjects.Customers > customerCollection = new List < BusinessObjects.Customers > ( ) ; dataAccess.CustomerDao.GetAllCustomers ( ) ; return customerCollection ; }"
"// Create an array of RGB pixelsbyte [ ] pixels = new byte [ width * height * 3 ] ; // Do some processing here ... .// Import the pixel data into a new bitmaBitmap image = new Bitmap ( width , height , width * 3 , PixelFormat.Format24bppRgb , GCHandle.Alloc ( pixels , GCHandleType.Pinned ) .AddrOfPinnedObject ( ) ) ; // Save the imageimage.Save ( `` testimage.png '' , ImageFormat.Png ) ; Unhandled Exception : System.ArgumentException : Parameter is not valid . at System.Drawing.Bitmap..ctor ( Int32 width , Int32 height , Int32 stride , PixelFormat format , IntPtr scan0 ) ( ... ... . ) using System ; using System.Collections.Generic ; using System.Drawing ; using System.Drawing.Imaging ; using System.Runtime.InteropServices ; using System.Diagnostics ;"
"Process p = new Process ( ) ; // That using an other application XmlSerializer xs = new XmlSerializer ( data.GetType ( ) ) ; using ( var ms = new MemoryStream ( ) ) { var sw = new StreamWriter ( ms ) ; XmlWriter xmlwriter = XmlWriter.Create ( sw , xmlWriterSettings ) ; xmlwriter.WriteProcessingInstruction ( `` PipeConfiguratorStyleSheet '' , processing ) ; xs.Serialize ( xmlwriter , data ) ; xmlwriter.Flush ( ) ; ms.Position = 0 ; var sr = new StreamReader ( ms ) ; while ( ! sr.EndOfStream ) { String line = sr.ReadLine ( ) ; p.StandardInput.WriteLine ( line ) ; Console.WriteLine ( line ) ; p.BeginOutputReadLine ( ) ; p.CancelOutputRead ( ) ; } }"
"... List < String > myList = new List ( ) ; Thread writeThread , readThread ; writeThread = new Thread ( write ) ; writeThread.Start ( ) ; readThraed = new Thread ( read ) ; readThread.Start ( ) ; ... private void write ( ) { while ( ... ) { ... lock ( myList ) { myList.Add ( ... ) ; } ... if ( ! readThread.IsAlive ) { readThraed = new Thread ( read ) ; readThread.Start ( ) ; } ... } ... } private void read ( ) { bool noMoreTasks = false ; while ( ! noMoreTasks ) { lock ( MyList ) //syncronize with the ADD func . { if ( dataFromClientList.Count > 0 ) { String task = myList.First ( ) ; myList.Remove ( task ) ; } else { noMoreTasks = true ; } } ... } readThread.Abort ( ) ; }"
"foreach ( ProductList.Products item in pList.Output.Products ) { //KeyValuePair < string , string > kv = new KeyValuePair < string , string > ( `` A '' , item.Ansi ) ; DataRow row = dict [ item.Ansi ] ; for ( int i = 0 ; i < 10 ; i++ ) { row [ `` Material '' ] = item.Material + `` a '' ; //Do stuff just for debugging } hits++ ; }"
"HttpClient http = new HttpClient ( ) ; HttpResponseMessage response = await http.GetAsync ( `` https : //accounts.google.com/o/oauth2/token ? code= '' +localSettings.Values [ `` AccessKey '' ] + '' & client_id=XX-XXXXXXXXXX.apps.googleusercontent.com & client_secret=XXXXX-XXXX & redirect_uri=http : //localhost/oauth2callback & grant_type=authorization_code '' ) ; //response.EnsureSuccessStatusCode ( ) ; Debug.WriteLine ( response.ToString ( ) ) ; HttpResponseMessage response1 = await http.GetAsync ( `` https : //content.googleapis.com/youtube/v3/subscriptions ? part=id & maxResults=10 & mine=true & key= '' +localSettings.Values [ `` AccessKey '' ] ) ; Debug.WriteLine ( response1.ToString ( ) ) ; StatusCode : 405 , ReasonPhrase : `` , Version : 2.0 , Content : System.Net.Http.StreamContent , Headers : { server : GSE alt-svc : quic= '' :443 '' ; p= '' 1 '' ; ma=604800 cache-control : max-age=0 , private accept-ranges : none date : Tue , 29 Sep 2015 16:05:03 GMT x-frame-options : SAMEORIGIN vary : Accept-Encoding x-content-type-options : nosniff alternate-protocol : 443 : quic , p=1 x-xss-protection : 1 ; mode=block content-type : application/json expires : Tue , 29 Sep 2015 16:05:03 GMT } StatusCode : 400 , ReasonPhrase : `` , Version : 2.0 , Content : System.Net.Http.StreamContent , Headers : { server : GSE alt-svc : quic= '' :443 '' ; p= '' 1 '' ; ma=604800 cache-control : max-age=0 , private accept-ranges : none date : Tue , 29 Sep 2015 16:05:04 GMT x-frame-options : SAMEORIGIN vary : X-Origin vary : Origin vary : Accept-Encoding x-content-type-options : nosniff alternate-protocol : 443 : quic , p=1 x-xss-protection : 1 ; mode=block content-type : application/json ; charset=UTF-8 expires : Tue , 29 Sep 2015 16:05:04 GMT }"
"Dictionary < int , ItemBO > result = ( Dictionary < int , ItemBO > ) ( from item in originalResults where item.Value.SomeCriteria == true select item ) ; Dictionary < int , ItemBO > result = ( from item in originalResults where item.Value.SomeCriteria == true select item.Value ) .ToDictionary ( GetItemKey ) ;"
public class A { public virtual void One ( ) { /* ... */ } public void Two ( ) { /* ... */ } } public class B : A { public override void One ( ) { /* ... */ } public new void Two ( ) { /* ... */ } } B b = new B ( ) ; A a = b as A ; a.One ( ) ; // Calls implementation in Ba.Two ( ) ; // Calls implementation in Ab.One ( ) ; // Calls implementation in Bb.Two ( ) ; // Calls implementation in B
"Solution | -- Gui 1 Project | | -- References | | | -- ClassLibrary | -- Gui 2 Project | | -- References | | | -- ClassLibrary | -- Main Gui Project ( StartUp Project ) | | -- References | | | -- Gui 1 Project | | | -- Gui 2 Project | | | -- ClassLibrary | | -- Datafile.wav ( Build Action : Content , Copy-if-newer ) | | -- Mods.xml ( Build Action : Content , Copy-if-newer ) | | -- VariousSourceFiles.cs | -- ClassLibrary | | -- Resources | | | -- Elements.xml ( Build Action : Content , Copy-if-newer ) | | | -- AminoAcids.xml ( Build Action : Content , Copy-if-newer ) | | -- VariousSourceFiles.cs"
"public interface IWriter { void Write ( object obj ) ; Task WriteAsync ( object obj ) ; void Flush ( ) ; Task FlushAsync ( ) ; } public class JsonStreamWriter : IWriter { private readonly Stream _stream ; public JsonStreamWriter ( Stream stream ) { _stream = stream ; } public void Write ( object obj ) { string json = JsonConvert.SerializeObject ( obj ) ; byte [ ] bytes = Encoding.UTF8.GetBytes ( json ) ; _stream.Write ( bytes , 0 , bytes.Length ) ; } public async Task WriteAsync ( object obj ) { string json = JsonConvert.SerializeObject ( obj ) ; byte [ ] bytes = Encoding.UTF8.GetBytes ( json ) ; await _stream.WriteAsync ( bytes , 0 , bytes.Length ) .ConfigureAwait ( false ) ; } public void Flush ( ) { _stream.Flush ( ) ; } public async Task FlushAsync ( ) { await _stream.FlushAsync ( ) .ConfigureAwait ( false ) ; } } public interface IReader { object Read ( Type objectType ) ; Task < object > ReadAsync ( Type objectType ) ; } public class JsonStreamReader : IReader { private readonly Stream _stream ; public JsonStreamReader ( Stream stream ) { _stream = stream ; } public object Read ( Type objectType ) { byte [ ] bytes = new byte [ 1024 ] ; int bytesRead = _stream.Read ( bytes , 0 , bytes.Length ) ; string json = Encoding.UTF8.GetString ( bytes , 0 , bytesRead ) ; object obj = JsonConvert.DeserializeObject ( json , objectType ) ; return obj ; } public async Task < object > ReadAsync ( Type objectType ) { byte [ ] bytes = new byte [ 1024 ] ; int bytesRead = await _stream.ReadAsync ( bytes , 0 , bytes.Length ) .ConfigureAwait ( false ) ; string json = Encoding.UTF8.GetString ( bytes , 0 , bytesRead ) ; object obj = JsonConvert.DeserializeObject ( json , objectType ) ; return obj ; } } public interface IMessenger { void Send ( object message ) ; Task SendAsync ( object message ) ; object Receive ( ) ; Task < object > ReceiveAsync ( ) ; } public interface IMessageDescriptor { string GetMessageName ( Type messageType ) ; Type GetMessageType ( string messageName ) ; } public class Header { public string MessageName { get ; set ; } } public class ProtocolMessenger : IMessenger { private readonly IMessageDescriptor _messageDescriptor ; private readonly IWriter _writer ; private readonly IReader _reader ; public ProtocolMessenger ( IMessageDescriptor messageDescriptor , IWriter writer , IReader reader ) { _messageDescriptor = messageDescriptor ; _writer = writer ; _reader = reader ; } public void Send ( object message ) { Header header = new Header ( ) ; header.MessageName = _messageDescriptor.GetMessageName ( message.GetType ( ) ) ; _writer.Write ( header ) ; _writer.Write ( message ) ; _writer.Flush ( ) ; } public async Task SendAsync ( object message ) { Header header = new Header ( ) ; header.MessageName = _messageDescriptor.GetMessageName ( message.GetType ( ) ) ; await _writer.WriteAsync ( header ) .ConfigureAwait ( false ) ; await _writer.WriteAsync ( message ) .ConfigureAwait ( false ) ; await _writer.FlushAsync ( ) .ConfigureAwait ( false ) ; } public object Receive ( ) { Header header = ( Header ) _reader.Read ( typeof ( Header ) ) ; Type messageType = _messageDescriptor.GetMessageType ( header.MessageName ) ; object message = _reader.Read ( messageType ) ; return message ; } public async Task < object > ReceiveAsync ( ) { Header header = ( Header ) await _reader.ReadAsync ( typeof ( Header ) ) .ConfigureAwait ( false ) ; Type messageType = _messageDescriptor.GetMessageType ( header.MessageName ) ; object message = await _reader.ReadAsync ( messageType ) .ConfigureAwait ( false ) ; return message ; } } public interface ISomeOtherInterface { void DoSomething ( ) ; } public class ComplexClass : IMessenger , ISomeOtherInterface { private readonly IMessenger _messenger ; private readonly ISomeOtherInterface _someOtherInterface ; public ComplexClass ( IMessenger messenger , ISomeOtherInterface someOtherInterface ) { _messenger = messenger ; _someOtherInterface = someOtherInterface ; } public void DoSomething ( ) { _someOtherInterface.DoSomething ( ) ; } public void Send ( object message ) { _messenger.Send ( message ) ; } // Take 1 public Task SendAsync ( object message ) { return _messenger.SendAsync ( message ) ; } // Take 2 public async Task SendAsync ( object message ) { await _messenger.SendAsync ( message ) .ConfigureAwait ( false ) ; } public object Receive ( ) { return _messenger.Receive ( ) ; } // Take 1 public Task < object > ReceiveAsync ( ) { return _messenger.ReceiveAsync ( ) ; } // Take 2 public async Task < object > ReceiveAsync ( ) { return await _messenger.ReceiveAsync ( ) .ConfigureAwait ( false ) ; } }"
"User IDataContext.AuthenticateUser ( string userName , string password ) { byte [ ] hash = PasswordHasher.HashPassword ( userName , password ) ; var query = from e in mContext.GetTable < User > ( ) where e.Email == userName & & e.Password == hash select e ; return query.FirstOrDefault ( ) ; }"
"public class NotFoundModel { private string _contentName ; private string _notFoundTitle ; private string _apologiesMessage ; public string ContentName { get ; private set ; } public string NotFoundTitle { get ; private set ; } public string ApologiesMessage { get ; private set ; } public NotFoundModel ( string contentName , string notFoundTitle , string apologiesMessage ) { this._contentName = contentName ; this._notFoundTitle = notFoundTitle ; this._apologiesMessage = apologiesMessage ; } } < % @ Page Title= '' '' Language= '' C # '' MasterPageFile= '' ~/Views/Shared/Site.Master '' Inherits= '' System.Web.Mvc.ViewPage < Geographika.Models.NotFoundModel > '' % > < asp : Content ID= '' Content1 '' ContentPlaceHolderID= '' TitleContent '' runat= '' server '' > < % = Html.Encode ( Model.ContentName ) % > < /asp : Content > < asp : Content ID= '' Content2 '' ContentPlaceHolderID= '' MainContent '' runat= '' server '' > < h2 > < % = Html.Encode ( Model.NotFoundTitle ) % > < /h2 > < p > < % = Html.Encode ( Model.ApologiesMessage ) % > < /p > < ! -- How can i render here a specific `` BackToIndexView '' , but that it 's not bound to my NotFoundModel ? -- > < /asp : Content > // // GET : /Term/Details/2 public ActionResult Details ( int id ) { Term term = termRepository.SingleOrDefault ( t = > t.TermId == id ) ; if ( term == null ) return View ( `` NotFound '' ) ; // how can i return the specific view that its not bound to Term Model ? // the idea here would be something like : // return View ( `` NotFound '' , new NotFoundModel ( `` a '' , '' b '' , '' c '' ) ) ; else return View ( `` Details '' , term ) ; }"
"private const string TimeRemainingKey = `` time_remaining '' ; private static readonly DateTime TimeRemainingDefault = DateTime.Now ; public static DateTime TimeRemaining { get { return AppSettings.GetValueOrDefault ( TimeRemainingKey , TimeRemainingDefault ) ; } set { AppSettings.AddOrUpdateValue ( TimeRemainingKey , value ) ; } } Settings.TimeRemaining = new DateTime ( ) .AddMinutes ( 30 ) ; DateTime dt = new DateTime ( ) ; Debug.WriteLine ( dt.ToString ( ) ) ; dt = dt.AddMinutes ( 30 ) ; Debug.WriteLine ( dt.ToString ( ) ) ; Settings.TimeRemaining = dt ; Debug.WriteLine ( Settings.TimeRemaining.ToString ( ) ) ;"
"public class BlogPost : Entity { public virtual string Name { get ; set ; } //Should this be here public virtual int AuthorID { get ; set ; } public virtual Author Author { get ; set ; } } BlogPost post = new BlogPost { Name = `` My first post '' , Author = session.Load < Author > ( 1 ) //Avoids hitting the database } ; session.Save ( post ) ; BlogPost post = new BlogPost { Name = `` My first post '' , AuthorID = 1 //Use the id of the object } ; session.Save ( post ) ;"
"private void DVPrintDocument_PrintPage ( object sender , System.Drawing.Printing.PrintPageEventArgs e ) { e.Graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic ; e.Graphics.DrawImage ( pictureBox1.Image , 25 , 25 , 800 , 1050 ) ; } private void Print_button_Click ( object sender , EventArgs e ) { PrintPreviewDialog.Document = PrintDocument ; PrintPreviewDialog.ShowDialog ( ) ; } private int intCurrPage = 0 ; // defining the current page ( its some sort of a counter ) bool opened = false ; // if an image was opened // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -Next and Back Button -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - private void btn_Back_Click ( object sender , EventArgs e ) { if ( opened ) // the button works if the file is opened . you could go with button.enabled { if ( intCurrPage == 0 ) // it stops here if you reached the bottom , the first page of the tiff { intCurrPage = 0 ; } else { intCurrPage -- ; // if its not the first page , then go to the previous page RefreshImage ( ) ; // refresh the image on the selected page } } } private void btn_Next_Click ( object sender , EventArgs e ) { if ( opened ) // the button works if the file is opened . you could go with button.enabled { if ( intCurrPage == Convert.ToInt32 ( lblNumPages.Text ) ) // if you have reached the last page it ends here // the `` -1 '' should be there for normalizing the number of pages { intCurrPage = Convert.ToInt32 ( lblNumPages.Text ) ; } else { intCurrPage++ ; RefreshImage ( ) ; } } } private void Form1_Load ( object sender , EventArgs e ) { var bm = new Bitmap ( pictureBox1.Image ) ; bm.SetResolution ( 600 , 600 ) ; Image image1 = new Bitmap ( bm ) ; pictureBox1.Image = image1 ; pictureBox1.Refresh ( ) ; } public void RefreshImage ( ) { Image myImg ; // setting the selected tiff Image myBmp ; // a new occurance of Image for viewing myImg = System.Drawing.Image.FromFile ( @ lblFile.Text ) ; // setting the image from a file int intPages = myImg.GetFrameCount ( System.Drawing.Imaging.FrameDimension.Page ) ; // getting the number of pages of this tiff intPages -- ; // the first page is 0 so we must correct the number of pages to -1 lblNumPages.Text = Convert.ToString ( intPages ) ; // showing the number of pages lblCurrPage.Text = Convert.ToString ( intCurrPage ) ; // showing the number of page on which we 're on myImg.SelectActiveFrame ( System.Drawing.Imaging.FrameDimension.Page , intCurrPage ) ; // going to the selected page myBmp = new Bitmap ( myImg , pictureBox1.Width , pictureBox1.Height ) ; // setting the new page as an image // Description on Bitmap ( SOURCE , X , Y ) pictureBox1.Image = myBmp ; // showing the page in the pictureBox1 }"
"[ Serializable ] [ System.Runtime.InteropServices.StructLayout ( LayoutKind.Sequential ) ] [ System.Runtime.InteropServices.ComVisible ( true ) ] # if GENERICS_WORK public struct Int32 : IComparable , IFormattable , IConvertible , IComparable < Int32 > , IEquatable < Int32 > /// , IArithmetic < Int32 > # else public struct Int32 : IComparable , IFormattable , IConvertible # endif { internal int m_value ; // Here ? ? ? ? public const int MaxValue = 0x7fffffff ; public const int MinValue = unchecked ( ( int ) 0x80000000 ) ; ... }"
"{ `` _t '' : `` TextboxControl '' , `` LabelText '' : `` Location of incident '' , `` IsRequired '' : true , `` _id '' : `` cbe059d9-b6a9-4de2-b63b-14d44b022e37 '' } { `` LabelText '' : `` Location of incident '' , `` IsRequired '' : true , `` id '' : `` cbe059d9-b6a9-4de2-b63b-14d44b022e37 '' }"
"app.UseMvc ( routes = > { routes.EnableDependencyInjection ( ) ; routes.MapRoute ( `` default '' , `` { controller=Home } / { action=Index } / { id ? } '' ) ; } ) ; app.MapWhen ( x = > ! x.Request.Path.Value.StartsWith ( `` /api '' , StringComparison.OrdinalIgnoreCase ) , builder = > { builder.UseMvc ( routes = > { routes.MapRoute ( `` spa-fallback '' , `` { *url } '' , new { controller = `` Home '' , action = `` Index '' } ) ; } ) ; } ) ;"
var l = new List < string > ( ) ;
interface IXmlDocumentFactory < T > { XmlDocument CreateXml ( ) //serializes just the data XmlDocument CreateXml ( XmlSchema schema ) //serializes data and includes schema } interface IXmlSchemaFactory < T > { XmlSchema CreateXmlSchema ( ) //generates schema dynamically from type } var xmlDocFactory = new XmlDocumentFactory < Foo > ( foo ) ; var xmlDocument = xmlDocFactory.CreateXml ( ) ; //or ... var xmlDocFactory = new XmlDocumentFactory < Foo > ( foo ) ; var xmlSchemaFactory = new XmlSchemaFactory < Foo > ( ) ; var xmlDocument = xmlDocFactory.CreateXml ( xmlSchemaFactory.CreateXmlSchema ( ) ) ; var xmlDocument = new XmlDocumentFactory < Foo > ( foo ) .CreateXml ( ) .IncludeSchema ( ) ; //or ... var xmlDocument = new XmlDocumentFacotry < Foo > ( foo ) .CreateXml ( ) ;
"void AreEqual < T > ( T expected , T actual ) void AreEqual ( object expected , object actual ) AreEqual ( `` Hello '' , `` Hello '' )"
"class Program { static void Main ( string [ ] args ) { // The MyClass type has a Finalize method defined for it // Creating a MyClass places a reference to obj on the finalization table . var myClass = new MyClass ( ) ; // Append another 2 references for myClass onto the finalization table . System.GC.ReRegisterForFinalize ( myClass ) ; System.GC.ReRegisterForFinalize ( myClass ) ; // There are now 3 references to myClass on the finalization table . System.GC.SuppressFinalize ( myClass ) ; System.GC.SuppressFinalize ( myClass ) ; System.GC.SuppressFinalize ( myClass ) ; // Remove the reference to the object . myClass = null ; // Force the GC to collect the object . System.GC.Collect ( 2 , System.GCCollectionMode.Forced ) ; // The first call to obj 's Finalize method will be discarded but // two calls to Finalize are still performed . System.Console.ReadLine ( ) ; } } class MyClass { ~MyClass ( ) { System.Console.WriteLine ( `` Finalise ( ) called '' ) ; } }"
"Span < byte > span = stackalloc byte [ 4 ] ; var singleIntSpan = MemoryMarshal.Cast < byte , int > ( span ) ;"
"`` Hello '' - return false ; `` Helo '' - return true static HashSet < char > charSet = new HashSet < char > ( ) ; static bool IsUniqueChar ( string str ) { foreach ( char c in str ) { charSet.Add ( c ) ; } return charSet.Count ( ) == str.Length ; } static Dictionary < char , bool > charSetDictionary = new Dictionary < char , bool > ( ) ; static bool IsUniqueChar ( string str ) { try { foreach ( char c in str ) { charSetDictionary.Add ( c , true ) ; } } catch { return false ; } static void Main ( string [ ] args ) { Stopwatch sw = Stopwatch.StartNew ( ) ; IsUniqueChar ( `` Hello '' ) ; sw.Stop ( ) ; Console.WriteLine ( `` Elapsed= { 0 } '' , sw.Elapsed ) ; //~005044 }"
"Task < IEnumerable < T > > InOrderOfCompletion < T > ( IEnumerable < T > tasks ) where T : Task public async Task < int > DelayedInt ( int i ) { await Task.Delay ( i*100 ) ; return i ; } [ Test ] public async void Test ( ) { Task < int > [ ] tasks = new [ ] { 5 , 7 , 1 , 3 , 2 , 6 , 4 } .Select ( DelayedInt ) .ToArray ( ) ; IEnumerable < Task < int > > ordered = await InOrderOfCompletion ( tasks ) ; Assert.That ( ordered.Select ( t = > t.Result ) .ToArray ( ) , Is.EqualTo ( new [ ] { 1,2,3,4,5,6,7 } ) ) ; } async Task < IEnumerable < T > > InOrderOfCompletion < T > ( IEnumerable < T > tasks ) where T : Task { HashSet < Task > taskSet = new HashSet < Task > ( tasks ) ; List < T > results = new List < T > ( ) ; while ( taskSet.Count > 0 ) { T complete = ( T ) await Task.WhenAny ( taskSet ) ; taskSet.Remove ( complete ) ; results.Add ( complete ) ; } return results ; }"
"using System ; using System.Linq ; using System.Reflection ; using System.Security.Permissions ; namespace Wrapper { public class RemoteLoader : MarshalByRefObject { private Assembly _pluginAassembly ; private object _instance ; private string _name ; public RemoteLoader ( string assemblyName ) { _name = assemblyName ; if ( _pluginAassembly == null ) { _pluginAassembly = AppDomain.CurrentDomain.Load ( assemblyName ) ; } // Required to identify the types when obfuscated Type [ ] types ; try { types = _pluginAassembly.GetTypes ( ) ; } catch ( ReflectionTypeLoadException e ) { types = e.Types.Where ( t = > t ! = null ) .ToArray ( ) ; } var type = types.FirstOrDefault ( type = > type.GetInterface ( `` IPlugin '' ) ! = null ) ; if ( type ! = null & & _instance == null ) { _instance = Activator.CreateInstance ( type , null , null ) ; } } public void Start ( ) { if ( _instance == null ) { return ; } ( ( IPlugin ) _instance ) .OnStart ( ) ; } public void Stop ( ) { if ( _instance == null ) { return ; } ( ( IPlugin ) _instance ) .OnStop ( close ) ; } } } var domain = AppDomain.CreateDomain ( Name , null , AppSetup ) ; var assemblyPath = Assembly.GetExecutingAssembly ( ) .Location ; var loader = ( RemoteLoader ) Domain.CreateInstanceFromAndUnwrap ( assemblyPath , typeof ( RemoteLoader ) .FullName ) ; loader.Start ( ) ; bool Start ( string name ) ; bool Stop ( string name ) ; List < Plugin > Plugins"
List < T > newset = List1.Concat ( List2 ) .Concat ( List3 ) .Concat ( List4 ) ... ..
"assemblyBuilder = Thread.GetDomain ( ) .DefineDynamicAssembly ( assemName , AssemblyBuilderAccess.RunAndSave ) ; module = assemblyBuilder.DefineDynamicModule ( Filename ) ; module.DefineType ( name , TypeAttributes.Public | TypeAttributes.Class ) class A { void M ( ) { B b = new B ( ) ; } } class B void M ( ) { A a = new A ( ) ; } }"
private const int APPCOMMAND_VOLUME_MUTE = 0x80000 ; private const int WM_APPCOMMAND = 0x319 ;
"< TextBox x : Name= '' _Hours '' Grid.Row= '' 9 '' Grid.Column= '' 1 '' VerticalAlignment= '' Center '' TextAlignment= '' Center '' FontWeight= '' Bold '' FontSize= '' 16 '' Text= '' { Binding ProcessHours , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' TextChanged= '' Hours_TextChanged '' / > partial class ProjectTask { ... public double TotalProcessHours { get { return ProjectBookings.Sum ( b = > b.ProcessHours ) ; } } ... } private void Hours_TextChanged ( object sender , TextChangedEventArgs e ) { UpdateHoursValidity ( ) ; } private void UpdateHoursValidity ( ) { string key = IsInvalidHoursWarning ? `` ShowWarningStoryboard '' : `` HideWarningStoryboard '' ; var storyboard = FindResource ( key ) as Storyboard ; if ( storyboard ! = null ) storyboard.Begin ( ) ; }"
"Microsoft.ApplicationInsightsMicrosoft.ApplicationInsights.Agent.InterceptMicrosoft.ApplicationInsights.DependencyCollectorMicrosoft.ApplicationInsights.NLogTargetMicrosoft.ApplicationInsights.PerfCounterCollectorMicrosoft.ApplicationInsights.WebMicrosoft.ApplicationInsights.WindowsServerMicrosoft.ApplicationInsights.WindowsServer.TelemetryChannel var telemetryClient = new TelemetryClient ( ) ; telemetryClient.Context.User.Id = Environment.UserName ; telemetryClient.Context.Session.Id = Guid.NewGuid ( ) .ToString ( ) ; telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString ( ) ; var telemetryClient = new TelemetryClient ( ) ; var connectionString = connectionStringSettings.ConnectionString ; var mongoUrl = new MongoUrl ( connectionString ) ; var mongoClientSettings = MongoClientSettings.FromUrl ( mongoUrl ) ; mongoClientSettings.ClusterConfigurator = clusterConfigurator = > { clusterConfigurator.Subscribe < CommandSucceededEvent > ( e = > { telemetryClient.TrackDependency ( `` MongoDB '' , e.CommandName , DateTime.Now.Subtract ( e.Duration ) , e.Duration , true ) ; } ) ; clusterConfigurator.Subscribe < CommandFailedEvent > ( e = > { telemetryClient.TrackDependency ( `` MongoDB '' , $ '' { e.CommandName } - { e.ToString ( ) } '' , DateTime.Now.Subtract ( e.Duration ) , e.Duration , false ) ; } ) ; } ; var mongoClient = new MongoClient ( mongoClientSettings ) ;"
"INSERT INTO MySavedResults ( Id , FirstName , LastName ) SELECT Id , FirstName , LastName FROM MemberWHERE FirstName = 'John ' and LastName ='Snow ' and ... -- more conditions"
"Binding bindingSlider = new Binding ( ) ; bindingSlider.Source = mediaElement.Position ; bindingSlider.Mode = BindingMode.TwoWay ; bindingSlider.Converter = ( IValueConverter ) Application.Current.Resources [ `` DoubleTimeSpan '' ] ; slider.SetBinding ( Slider.ValueProperty , bindingSlider ) ; class DoubleTimeSpan : IValueConverter { public object Convert ( object value , Type targetType , object parameter , string language ) { return ( ( TimeSpan ) value ) .TotalSeconds ; } public object ConvertBack ( object value , Type targetType , object parameter , string language ) { return TimeSpan.FromSeconds ( ( double ) value ) ; } }"
internal async Task < List < string > > GetItemsByLookupItemsAsync ( List < string > lookupItems ) { var result = new List < string > ( ) ; using ( var db = new EntityFrameworkDb ( ) ) { var query = from item in db.Table where lookupItems.Contains ( item.LookupColumn ) select item.StringColumn ; var queryResult = new List < string > ( ) ; using ( GetImpersonatedUser ( ) ) { queryResult.AddRange ( await query.ToListAsync ( ) ) ; } result.AddRange ( queryResult.OrderBy ( e = > e ) ) ; } return result ; }
"public abstract class DrilldownBase < W > where W : class , IDrilldown"
"HTTP/1.1 500 Internal Server ErrorContent-Type : application/xml ; ... { `` ErrorMessage '' : '' Error ! '' } HTTP/1.1 401 UnauthorizedContent-Type : application/json ; ... { `` Message '' : '' Authentication failed . `` , '' StackTrace '' : null , '' ExceptionType '' : '' System.InvalidOperationException '' } [ Serializable ] [ DataContract ( Name = `` BaseDataResponseContract '' ) ] public class BaseDataResponseContract { [ DataMember ] public string ErrorMessage { get ; set ; } } // end namespace WebServices.BehaviorsAndInspectors { public class ErrorHandler : IErrorHandler { public bool HandleError ( Exception error ) { return true ; } // end public void ProvideFault ( Exception ex , MessageVersion version , ref Message fault ) { // Create a new instance of the object I would like to return with a default message var baseDataResponseContract = new BaseDataResponseContract { ErrorMessage = `` Error ! '' } ; // Get the outgoing response portion of the current context var response = WebOperationContext.Current.OutgoingResponse ; // Set the http status code response.StatusCode = HttpStatusCode.InternalServerError ; // If the exception is a specific type change the default settings if ( ex.GetType ( ) == typeof ( UserNotFoundException ) ) { baseDataResponseContract.ErrorMessage = `` Invalid Username ! `` ; response.StatusCode = HttpStatusCode.Unauthorized ; } // Create the fault message that is returned ( note the ref parameter ) fault = Message.CreateMessage ( version , `` '' , baseDataResponseContract , new DataContractJsonSerializer ( typeof ( BaseDataResponseContract ) ) ) ; // Tell WCF to use JSON encoding rather than default XML var webBodyFormatMessageProperty = new WebBodyFormatMessageProperty ( WebContentFormat.Json ) ; fault.Properties.Add ( WebBodyFormatMessageProperty.Name , webBodyFormatMessageProperty ) ; // Add ContentType header that specifies we are using json var httpResponseMessageProperty = new HttpResponseMessageProperty ( ) ; httpResponseMessageProperty.Headers [ HttpResponseHeader.ContentType ] = `` application/json '' ; fault.Properties.Add ( HttpResponseMessageProperty.Name , httpResponseMessageProperty ) ; } // end } // end class } // end namespace namespace WebServices.BehaviorsAndInspectors { public class ErrorHandlerExtensionBehavior : BehaviorExtensionElement , IServiceBehavior { public override Type BehaviorType { get { return GetType ( ) ; } } protected override object CreateBehavior ( ) { return this ; } private IErrorHandler GetInstance ( ) { return new ErrorHandler ( ) ; } void IServiceBehavior.AddBindingParameters ( ServiceDescription serviceDescription , ServiceHostBase serviceHostBase , Collection < ServiceEndpoint > endpoints , BindingParameterCollection bindingParameters ) { } // end void IServiceBehavior.ApplyDispatchBehavior ( ServiceDescription serviceDescription , ServiceHostBase serviceHostBase ) { var errorHandlerInstance = GetInstance ( ) ; foreach ( ChannelDispatcher dispatcher in serviceHostBase.ChannelDispatchers ) { dispatcher.ErrorHandlers.Add ( errorHandlerInstance ) ; } } void IServiceBehavior.Validate ( ServiceDescription serviceDescription , ServiceHostBase serviceHostBase ) { } // end } // end class } // end namespace < system.serviceModel > < services > < service name= '' WebServices.MyService '' > < endpoint binding= '' webHttpBinding '' contract= '' WebServices.IMyService '' / > < /service > < /services > < extensions > < behaviorExtensions > < ! -- This extension if for the WCF Error Handling -- > < add name= '' ErrorHandlerBehavior '' type= '' WebServices.BehaviorsAndInspectors.ErrorHandlerExtensionBehavior , WebServices , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=null '' / > < /behaviorExtensions > < /extensions > < behaviors > < serviceBehaviors > < behavior > < serviceMetadata httpGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' true '' / > < ErrorHandlerBehavior / > < /behavior > < /serviceBehaviors > < /behaviors > ... . < /system.serviceModel >"
SPList spList = spWeb.GetListCustom ( `` tasks '' ) ; foreach ( SPListITem item in spList.GetItems ( query ) ) { // ... do something with the SPListCollection it returned } SPList spList = spWeb.GetListCustom ( `` tasks '' ) ; SPListIteCollection taskListCollection = taskList.GetItems ( query ) ; foreach ( SPListITem item in taskListCollection ) { // ... do something with the SPListCollection it returned }
"using System ; using System.Runtime.CompilerServices ; static class Extensions { public static void Foo ( this A a , Exception e = null , string memberName = `` '' ) { } public static void Foo < T > ( this A a , T t , Exception e = null , string memberName = `` '' ) where T : class , IB { } } interface IB { } class A { } class Program { public static void Main ( ) { var a = new A ( ) ; var e = new Exception ( ) ; a.Foo ( e ) ; // < - Compile error `` ambiguous call '' } } public static void Foo ( this A a , Exception e = null ) { } public static void Foo < T > ( this A a , T t , Exception e = null ) where T : class , IB { }"
"var partialEmployeeA=ActiveDirectoryLookup ( employeeID ) ; var partialEmployeeB=OracleDBLookup ( employeeID ) ; var finalEmployee=Merge ( partialEmployeeA , partialEmployeeB ) ; Employee partialEmployeeA ; Employee partialEmployeeB ; var t1 = Task.Run ( ( ) = > { partialEmployeeA=ActiveDirectoryLookup ( employeeID ) ; } ) ; var t2 = Task.Run ( ( ) = > { partialEmployeeB=OracleDBLookup ( employeeID ) ; } ) ; , Task.WaitAll ( t1 , t2 ) ; var finalEmployee=Merge ( partialEmployeeA , partialEmployeeB ) ;"
"[ TestMethod ] public void Verify_Some_Useful_Thing ( ) { using ( var browser = new IE ( ) ) { browser.GoTo ( `` /someurl '' ) ; // etc.. // some assert ( ) statements } } public class BrowserPool { private static readonly Lazy < BrowserPool > _instance = new Lazy < BrowserPool > ( ( ) = > new BrowserPool ( ) ) ; private IE _browser ; private string _ieHwnd ; private int _threadId ; public IE Browser { get { var currentThreadId = GetCurrentThreadId ( ) ; if ( currentThreadId ! = _threadId ) { _browser = IE.AttachTo < IE > ( Find.By ( `` hwnd '' , _ieHwnd ) ) ; _threadId = currentThreadId ; } return _browser ; } set { _browser = value ; _ieHwnd = _browser.hWnd.ToString ( ) ; _threadId = GetCurrentThreadId ( ) ; } } /// < summary > /// private to prevent direct instantiation . /// < /summary > private BrowserPool ( ) { Browser = new IE ( ) ; } /// < summary > /// Get the current executing thread 's id . /// < /summary > /// < returns > Thread Id. < /returns > private int GetCurrentThreadId ( ) { return Thread.CurrentThread.GetHashCode ( ) ; } /// < summary > /// Accessor for instance /// < /summary > public static BrowserPool Instance { get { return _instance ; } } } [ TestMethod ] public void Verify_Some_Useful_Thing ( ) { var browser = BrowserPool.Instance.Browser ; browser.GoTo ( `` /someurl '' ) ; // some assertions }"
"public T DoSomething < T > ( T dictionary ) where T : IDictionary < , > { ... }"
class Money { public Money ( decimal amount ) { Amount = amount ; } public decimal Amount { get ; set ; } public static implicit operator decimal ( Money money ) { return money.Amount ; } public static explicit operator int ( Money money ) { return ( int ) money.Amount ; } } public static int returnIntValueFrom ( Money money ) { return ( int ) money.Amount ; }
var someCharacter = ' x ' ; //put 4 bytes UTF-16 character
"[ 09/16/2015 10:40:35 > 998fb8 : SYS ERR ] Job failed due to exit code -1073740940 X509Certificate2 _certificate = new X509Certificate2 ( echoService.Properties.Resources.public_privatekey , ConfigurationManager.AppSettings [ `` certPsw '' ] ) ;"
public class ItemDTO { public int ItemID { get ; set ; } } public class CostPageDTO { public string CostPageNumber { get ; set ; } public List < ItemDTO > Items { get ; set ; } } static void Main ( string [ ] args ) { List < CostPageDTO > selectedCostPageAndItems = GetSelectedCostPageAndItems ( ) ; List < CostPageDTO > actualItems = GetActualItems ( ) ; //LINQ code to get the matching count costPages } private static List < CostPageDTO > GetSelectedCostPageAndItems ( ) { ItemDTO i1 = new ItemDTO ( ) ; i1.ItemID = 1 ; ItemDTO i2 = new ItemDTO ( ) ; i2.ItemID = 2 ; ItemDTO i3 = new ItemDTO ( ) ; i3.ItemID = 3 ; CostPageDTO c1 = new CostPageDTO ( ) ; c1.CostPageNumber = `` C1 '' ; c1.Items = new List < ItemDTO > ( ) ; c1.Items.Add ( i1 ) ; CostPageDTO c2 = new CostPageDTO ( ) ; c2.CostPageNumber = `` C2 '' ; c2.Items = new List < ItemDTO > ( ) ; c2.Items.Add ( i2 ) ; c2.Items.Add ( i3 ) ; //CostPageDTO c2Duplicate = new CostPageDTO ( ) ; //c2Duplicate.CostPageNumber = `` C2 '' ; //c2Duplicate.Items = new List < ItemDTO > ( ) ; //c2Duplicate.Items.Add ( i2 ) ; //c2Duplicate.Items.Add ( i3 ) ; List < CostPageDTO > selectedCostPageAndItems = new List < CostPageDTO > ( ) ; selectedCostPageAndItems.Add ( c1 ) ; selectedCostPageAndItems.Add ( c2 ) ; //selectedCostPageAndItems.Add ( c2Duplicate ) ; return selectedCostPageAndItems ; } private static List < CostPageDTO > GetActualItems ( ) { ItemDTO i1 = new ItemDTO ( ) ; i1.ItemID = 1 ; ItemDTO i2 = new ItemDTO ( ) ; i2.ItemID = 2 ; ItemDTO i3 = new ItemDTO ( ) ; i3.ItemID = 3 ; ItemDTO i3Duplicate = new ItemDTO ( ) ; i3Duplicate.ItemID = 3 ; CostPageDTO c1 = new CostPageDTO ( ) ; c1.CostPageNumber = `` C1 '' ; c1.Items = new List < ItemDTO > ( ) ; c1.Items.Add ( i1 ) ; c1.Items.Add ( i2 ) ; c1.Items.Add ( i3 ) ; CostPageDTO c2 = new CostPageDTO ( ) ; c2.CostPageNumber = `` C2 '' ; c2.Items = new List < ItemDTO > ( ) ; c2.Items.Add ( i2 ) ; c2.Items.Add ( i3 ) ; c2.Items.Add ( i3Duplicate ) ; List < CostPageDTO > actualItems = new List < CostPageDTO > ( ) ; actualItems.Add ( c1 ) ; actualItems.Add ( c2 ) ; return actualItems ; }
if ( ( attributes & FileAttributes.Hidden ) == FileAttributes.Hidden )
"[ TestMethod ] public void Test ( ) { char [ ] a1 = `` abc '' .ToCharArray ( ) ; char [ ] a2 = { ' a ' , ' b ' , ' c ' , ' ' , ' ' } ; Assert.AreEqual ( 2 , a2.Except ( a1 ) .Count ( ) ) ; } [ TestMethod ] public void Test ( ) { char [ ] a1 = `` abc '' .ToCharArray ( ) ; char [ ] a2 = { ' a ' , ' b ' , ' c ' , ' ' , 'd ' , ' ' } ; Assert.AreEqual ( 2 , a2.Except ( a1 ) .Count ( ) ) ; }"
IList < MyObject > list = GetList ( ) ; foreach ( MyObject obj in list ) { //do something obj.Dispose ( ) ; } using ( IList < MyObject > list = GetList ( ) ) { foreach ( MyObject obj in list ) { //do something } }
"public decimal ? Value { get { decimal amount = 0 ; if ( ! decimal.TryParse ( this.Text , NumberStyles.Currency , null , out amount ) ) { return null ; } else { return amount ; } } set { if ( ! value.HasValue ) { this.Text = `` '' ; } else { this.Text = string.Format ( `` $ { 0 : # , # # 0.00 } '' , value ) ; } } } decimal Amount = uxAmount.Value ? ? 0M ; decimal ? _Amount = uxAmount.Value ; decimal amount = _Amount ? ? 0 ; decimal ? _Amount = uxAmount.Value ; //10000decimal amount = _Amount ? ? 0 ; //10000decimal amount2 = _Amount ? ? 0M ; //10000decimal Amount = uxAmount.Value ? ? 0M ; //0 decimal amount3 = ( uxTaxAmount.Value ) ? ? 0M ; decimal Amount = uxAmount.Value ? ? 0M ; //10000decimal amount3 = ( uxAmount.Value ) ? ? 0M ; //0"
.method public static void Main ( ) cil managed { .entrypoint // Code size 3 ( 0x3 ) .maxstack 1 IL_0000 : ldnull IL_0001 : stloc.0 IL_0002 : ret } // end of method Program : :Main il.Emit ( OpCodes.Ldnull ) ; il.Emit ( OpCodes.Stloc_0 ) ; il.Emit ( OpCodes.Ret ) ;
"string one = ( string ) o [ this.Context [ *WILDCARD* ] [ `` cid1 '' ] ] .ToString ( ) ; /* this works , but has too many [ ] string one = ( string ) o [ this.Context [ `` partner '' ] ] [ this.Context [ `` campaign '' ] ] [ this.Context [ `` segment1 '' ] ] [ this.Context [ `` segment2 '' ] ] [ this.Context [ `` qid2 '' ] ] [ `` community '' ] [ this.Context [ `` cid1 '' ] ] .ToString ( ) ; */ { `` partner '' : { `` campaign '' : { `` round1 '' : { `` round2 '' : { `` def123 '' : { `` community '' : { `` choicec '' : 28 } , `` user '' : { `` choice '' : `` choicec '' , `` writeDateUTC '' : `` 2015-06-15T17:21:59Z '' } } } , `` abc321 '' : { `` community '' : { `` choicec '' : 33 } , `` user '' : { `` choice '' : `` choicec '' , `` writeDateUTC '' : `` 2015-06-15T17:21:59Z '' } } } } } }"
"_actorSystem = ActorSystem.Create ( `` mycluster '' ) ; _actoraActor = this._actorSystem.ActorOf < ActorA > ( ) ; akka : //mycluster/user/ $ a # 1293118665 public class ActorB : ReceiveActor { private readonly Cluster Cluster = Akka.Cluster.Cluster.Get ( Context.System ) ; public ActorB ( ) { this.Receive < ActorIdentity > ( this.IdentifyMessageReceived ) ; this.ReceiveAsync < ClusterEvent.MemberUp > ( this.MemberUpReceived ) ; } protected override void PreStart ( ) { this.Cluster.Subscribe ( this.Self , ClusterEvent.InitialStateAsEvents , new [ ] { typeof ( ClusterEvent.IMemberEvent ) , typeof ( ClusterEvent.UnreachableMember ) } ) ; } protected override void PostStop ( ) { this.Cluster.Unsubscribe ( this.Self ) ; } private async Task < bool > MemberUpReceived ( ClusterEvent.MemberUp obj ) { if ( obj.Member.HasRole ( `` actora '' ) ) { // ! The problem is here . //ALL YOU ARE PROVIDED IS THE NODE ADDRESS : //Obviously this makes sense because it 's the node that has come alive //and not the instances themselves . string address = obj.Member.Address.ToString ( ) ; //akka.tcp : //mycluster @ localhost:666 Context.ActorSelection ( address ) .Tell ( new Identify ( 1 ) ) ; } return true ; } private bool IdentifyMessageReceived ( ActorIdentity obj ) { return true ; } } _actorSystem = ActorSystem.Create ( `` mycluster '' ) ; _actoraActor = this._actorSystem.ActorOf < ActorA > ( `` actora '' ) ;"
"private void DownLoadFile ( string fileLocation ) { BackgroundWorker worker = new BackgroundWorker ( ) ; worker.DoWork += new DoWorkEventHandler ( ( obj , args ) = > { // Will be executed by back ground thread asynchronously . args.Result = Download ( fileLocation ) ; } ) ; worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler ( ( obj , args ) = > { // will be executed in the main thread . Result r = args.Result as Result ; ReportResult ( r ) ; } ) ; worker.RunWorkerAsync ( fileLocation ) ; }"
"SignInManager.SignIn ( user , IsPersistent , false )"
"var result = ( from entityX in new Query < MyEntityX > ( ) from entityY in new Query < MyEntityY > ( ) where entityX.SomeProperty == `` Hello '' & & entityY.SomeOtherProperty == `` Hello 2 '' & & entityX.Id == entityY.XId ) .ToList ( ) ; var result = ( from i in ( from entityX in new Query < MyEntityX > ( ) from entityY in new Query < MyEntityY > ( ) select new { PropX = entityX , PropY = entityY } ) where i.PropX.SomeProperty == `` Hello '' & & i.PropY.SomeOtherProperty == `` Hello 2 '' & & i.PropX.Id == i.PropY.XId select i ) .ToList ( ) ;"
public class StepClause { public NamedStepClause Action1 ( ) { } public NamedStepClause Action2 ( ) { } } public class NamedStepClause : StepClause { public StepClause Step ( string name ) { } } var workflow = new Workflow ( ) .Configure ( ) .Action1 ( ) .Step ( `` abc '' ) .Action2 ( ) .Action2 ( ) .Step ( `` def '' ) .Action1 ( ) ; var workflow = new Workflow ( ) .Configure ( ) .Step ( ) .Action1 ( ) .Step ( `` abc '' ) .Action2 ( ) .Step ( ) .Action2 ( ) .Step ( `` def '' ) .Action1 ( ) ;
"foreach ( CompareOptions i in Enum.GetValues ( new CompareOptions ( ) .GetType ( ) ) .OfType < CompareOptions > ( ) ) Console.WriteLine ( string.Compare ( `` محسنين '' , `` محسنین '' , new CultureInfo ( `` fa-ir '' ) , i ) + `` \t : `` + i ) ; -1 : None-1 : IgnoreCase-1 : IgnoreNonSpace-1 : IgnoreSymbols-1 : IgnoreKanaType-1 : IgnoreWidth1 : OrdinalIgnoreCase-1 : StringSort130 : Ordinal"
if ( boolIsAllowed.HasValue & & boolIsAllowed.Value ) { //do something }
< serviceThrottling maxConcurrentCalls = '' 50 '' maxConcurrentSessions= '' 200 '' / >
"public class MyControl : Button { private _tip ; public string ToolTip { get { return _tip ; } set { _tip = value ; } } private ToolTip _toolTip = new ToolTip ( ) ; public MyControl ( ) { _toolTip.UseAnimation = false ; _toolTip.UseFading = false ; _toolTip.ShowAlways = true ; } protected override void OnMouseHover ( EventArgs e ) { _toolTip.Show ( _tip , this , 0 , Height ) ; base.OnMouseHover ( e ) ; } protected override void OnMouseLeave ( EventArgs e ) { _toolTip.Hide ( this ) ; base.OnMouseLeave ( e ) ; } }"
"private RenderTarget2D RenderTarget ; private DepthStencilBuffer DepthStencilBufferRenderTarget ; private DepthStencilBuffer DepthStencilBufferOriginal ; private SpriteBatch SpriteBatch ; protected override void Initialize ( ) { base.Initialize ( ) ; RenderTarget = new RenderTarget2D ( GraphicsDevice , 1920 , 1080 , 1 , SurfaceFormat.Single ) ; DepthStencilBufferRenderTarget = new DepthStencilBuffer ( GraphicsDevice , 1920 , 1080 , GraphicsDevice.DepthStencilBuffer.Format ) ; DepthStencilBufferOriginal = GraphicsDevice.DepthStencilBuffer ; SpriteBatch = new SpriteBatch ( GraphicsDevice ) ; } protected override void Draw ( GameTime gameTime ) { GraphicsDevice.DepthStencilBuffer = DepthStencilBufferRenderTarget ; GraphicsDevice.SetRenderTarget ( 0 , RenderTarget ) ; GraphicsDevice.Clear ( Color.Black ) ; SpriteBatch.Begin ( ) ; //drawing all stuff here SpriteBatch.End ( ) ; GraphicsDevice.DepthStencilBuffer = DepthStencilBufferOriginal ; GraphicsDevice.SetRenderTarget ( 0 , null ) ; GraphicsDevice.Clear ( Color.Black ) ; Texture2D output = RenderTarget.GetTexture ( ) ; SpriteBatch.Begin ( ) ; Rectangle backbuffer = new Rectangle ( 0 , 0 , m_Options.DisplayWidth , m_Options.DisplayHeight ) ; SpriteBatch.Draw ( output , backbuffer , Color.White ) ; SpriteBatch.End ( ) ; base.Draw ( gameTime ) ; }"
"[ HttpPut ] [ RequestSizeLimit ( 120_000_000 ) ] public async Task < IActionResult > Put ( IFormCollection form ) { ... } Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException : Request body too large . at Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException.Throw ( RequestRejectionReason reason ) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.ForContentLength.OnReadStarting ( ) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.TryInit ( ) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.ReadAsync ( Memory ` 1 buffer , CancellationToken cancellationToken ) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.ReadAsyncInternal ( Memory ` 1 buffer , CancellationToken cancellationToken )"
"public class UserEditorViewModel { public ObservableCollection < UserViewModel > Users { get ; set ; } public IEnumerable < UserViewModel > LoadUsersFromWhateverSource ( ) { /* ... */ } public void ReloadUsersBad ( ) { // bad : the collection is updated , but the WPF control is bound to the old reference . Users = new ObservableCollection < User > ( LoadUsersFromWhateverSource ( ) ) ; } public void ReloadUsersWorksButIsInefficient ( ) { // works : collection object is kept , and items are replaced ; inefficient , though . Users.Clear ( ) ; foreach ( var user in LoadUsersFromWhateverSource ( ) ) Users.Add ( user ) ; } // ... whatever other stuff . }"
"UserCredential credential ; using ( var stream = new FileStream ( `` client_secrets.json '' , FileMode.Open , FileAccess.Read ) ) { credential = await GoogleWebAuthorizationBroker.AuthorizeAsync ( GoogleClientSecrets.Load ( stream ) .Secrets , // This OAuth 2.0 access scope allows an application to upload files to the // authenticated user 's YouTube channel , but does n't allow other types of access . new [ ] { YouTubeService.Scope.YoutubeUpload } , `` user '' , CancellationToken.None ) ; } var youtubeService = new YouTubeService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = Assembly.GetExecutingAssembly ( ) .GetName ( ) .Name , } ) ;"
"//// Summary : // Represents the method that will handle an event that has no event data.//// Parameters : // sender : // The source of the event.//// e : // An object that contains no event data.public delegate void EventHandler ( object sender , EventArgs e ) ; //// Summary : // Represents the method that will handle an event when the event provides data.//// Parameters : // sender : // The source of the event.//// e : // An object that contains the event data.//// Type parameters : // TEventArgs : // The type of the event data generated by the event.public delegate void EventHandler < TEventArgs > ( object sender , TEventArgs e ) ; public delegate void EventHandler < TEventArgs > ( object source , TEventArgs e ) where TEventArgs : EventArgs ;"
"if ( a.b.c.d.e.f ! = null ) Console.Write ( `` ok '' ) ; if ( a ! = null ) if ( a.b ! = null ) if ( a.b.c ! = null ) if ( a.b.c.d ! = null ) if ( a.b.c.d.e ! = null ) if ( a.b.c.d.e.f ! = null ) Console.Write ( `` ok '' ) ; if ( a.Get ( o= > o.b ) .Get ( o= > o.c ) .Get ( o= > o.d ) .Get ( o= > o.e ) .Get ( o= > o.f ) ! = null ) Console.Write ( `` ok '' ) ; if ( a.Get ( `` b.c.d.e.f '' ) ! = null ) Console.Write ( `` ok '' ) ; dynamic da = new SafeExpando ( a ) ; if ( da.b.c.d.e.f ! = null ) Console.Write ( `` ok '' ) ; if ( Get ( a.b.c.d.e.f ) ! = null ) Console.Write ( `` ok '' ) ; if ( a.Get ( a= > a.b.c.d.e.f ) ! = null ) Console.Write ( `` ok '' ) ; [ DebuggerStepThrough ] public static To Get < From , To > ( this From @ this , Func < From , To > get ) { var ret = default ( To ) ; if ( @ this ! = null & & ! @ this.Equals ( default ( From ) ) ) ret = get ( @ this ) ; if ( ret == null & & typeof ( To ) .IsArray ) ret = ( To ) Activator.CreateInstance ( typeof ( To ) , 0 ) ; return ret ; }"
int i ; volatile int v ; i = 42 ; v = 0 ; int some_local_variable = v ; print ( i ) ;
"public enum VerticalAnchors { Top=1 , Mid=2 , Bot=4 } public enum HorizontalAnchors { Lef=8 , Mid=16 , Rig=32 } public enum VisualAnchors { TopLef = VerticalAnchors.Top | HorizontalAnchors.Lef , TopMid = VerticalAnchors.Top | HorizontalAnchors.Mid , TopRig = VerticalAnchors.Top | HorizontalAnchors.Rig , MidLef = VerticalAnchors.Mid | HorizontalAnchors.Lef , MidMid = VerticalAnchors.Mid | HorizontalAnchors.Mid , MidRig = VerticalAnchors.Mid | HorizontalAnchors.Rig , BotLef = VerticalAnchors.Bot | HorizontalAnchors.Lef , BotMid = VerticalAnchors.Bot | HorizontalAnchors.Mid , BotRig = VerticalAnchors.Bot | HorizontalAnchors.Rig } VerticalAnchors.Top | HorizontalAnchors.Lef ; ( int ) VerticalAnchors.Top | ( int ) HorizontalAnchors.Lef"
"'Execution Timeout Expired . The timeout period elapsed prior to completion of the operation or the server is not responding . ' at System.Data.SqlClient.SqlInternalConnection.OnError ( SqlException exception , Boolean breakConnection , Action ` 1 wrapCloseInAction ) at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning ( TdsParserStateObject stateObj , Boolean callerHasConnectionLock , Boolean asyncClose ) at System.Data.SqlClient.TdsParserStateObject.ReadSniError ( TdsParserStateObject stateObj , UInt32 error ) at System.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync ( ) at System.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket ( ) at System.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer ( ) at System.Data.SqlClient.TdsParserStateObject.TryReadByteArray ( Byte [ ] buff , Int32 offset , Int32 len , Int32 & totalRead ) at System.Data.SqlClient.TdsParserStateObject.TryReadString ( Int32 length , String & value ) at System.Data.SqlClient.TdsParser.TryReadSqlStringValue ( SqlBuffer value , Byte type , Int32 length , Encoding encoding , Boolean isPlp , TdsParserStateObject stateObj ) at System.Data.SqlClient.TdsParser.TryReadSqlValue ( SqlBuffer value , SqlMetaDataPriv md , Int32 length , TdsParserStateObject stateObj , SqlCommandColumnEncryptionSetting columnEncryptionOverride , String columnName ) at System.Data.SqlClient.SqlDataReader.TryReadColumnInternal ( Int32 i , Boolean readHeaderOnly ) at System.Data.SqlClient.SqlDataReader.TryReadColumn ( Int32 i , Boolean setTimeout , Boolean allowPartiallyReadColumn ) at System.Data.SqlClient.SqlDataReader.GetValueInternal ( Int32 i ) at System.Data.SqlClient.SqlDataReader.GetValue ( Int32 i ) SELECT TOP 10 *FROM MyTableWHERE LastModifiedBy = 'Stu ' BEGIN TRANUPDATE TOP ( 10000 ) MyTable SET LastModifiedBy = 'Me ' where LastModifiedBy = 'Me'WAITFOR DELAY '00:00:35'COMMIT at System.Data.SqlClient.SqlConnection.OnError ( SqlException exception , Boolean breakConnection , Action ` 1 wrapCloseInAction ) at System.Data.SqlClient.SqlInternalConnection.OnError ( SqlException exception , Boolean breakConnection , Action ` 1 wrapCloseInAction ) at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning ( TdsParserStateObject stateObj , Boolean callerHasConnectionLock , Boolean asyncClose ) at System.Data.SqlClient.TdsParser.TryRun ( RunBehavior runBehavior , SqlCommand cmdHandler , SqlDataReader dataStream , BulkCopySimpleResultSet bulkCopyHandler , TdsParserStateObject stateObj , Boolean & dataReady ) at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData ( ) at System.Data.SqlClient.SqlDataReader.get_MetaData ( ) at System.Data.SqlClient.SqlCommand.FinishExecuteReader ( SqlDataReader ds , RunBehavior runBehavior , String resetOptionsString , Boolean isInternal , Boolean forDescribeParameterEncryption , Boolean shouldCacheForAlwaysEncrypted ) at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds ( CommandBehavior cmdBehavior , RunBehavior runBehavior , Boolean returnStream , Boolean async , Int32 timeout , Task & task , Boolean asyncWrite , Boolean inRetry , SqlDataReader ds , Boolean describeParameterEncryptionRequest ) at System.Data.SqlClient.SqlCommand.RunExecuteReader ( CommandBehavior cmdBehavior , RunBehavior runBehavior , Boolean returnStream , String method , TaskCompletionSource ` 1 completion , Int32 timeout , Task & task , Boolean & usedCache , Boolean asyncWrite , Boolean inRetry ) at System.Data.SqlClient.SqlCommand.RunExecuteReader ( CommandBehavior cmdBehavior , RunBehavior runBehavior , Boolean returnStream , String method ) at System.Data.SqlClient.SqlCommand.ExecuteReader ( CommandBehavior behavior , String method ) at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader ( CommandBehavior behavior ) at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader ( CommandBehavior behavior )"
"var APIListPage = ( APIList ) BuildManager.CreateInstanceFromVirtualPath ( `` ~/APIHelp/APIList.aspx '' , typeof ( APIList ) ) ; ParseHtml ( APIListPage.pdfPage ) ;"
public void AccountTypeFill ( ) { //Get the types of Account ie Entity and individual var acc = from type in dt.mem_types select type.CustCategory ; if ( acc ! = null ) { NewCustomerddlAccountType.DataSource = acc.Distinct ( ) .ToList ( ) ; NewCustomerddlAccountType.DataBind ( ) ; } }
static void Main ( string [ ] args ) { Console.WriteLine ( `` Hello world '' ) ; Console.ReadLine ( ) ; }
"namespace UWP.ViewModels { /// < summary > /// This class contains static reference to all the view models in the /// application and provides an entry point for the bindings./// < /summary > class ViewModelLocator { /// < summary > /// Initializes a new instance of the ViewModelLocator class . /// < /summary > public ViewModelLocator ( ) { ServiceLocator.SetLocatorProvider ( ( ) = > SimpleIoc.Default ) ; if ( ViewModelBase.IsInDesignModeStatic ) { // Create design time view services and models } else { // Create run Time view services and models } //Register services used here SimpleIoc.Default.Register < VideoListModel > ( ) ; } public VideoListModel VideoListModel { get { return ServiceLocator.Current.GetInstance < VideoListModel > ( ) ; } } } namespace UWP.Models { class VideoListItem : ViewModelBase { public string VideoName { get ; set ; } public string Author { get ; set ; } public Uri Vid_url { get ; set ; } public BitmapImage Image { get ; set ; } public VideoListItem ( string videoname , string author , Uri url , BitmapImage img ) { this.VideoName = videoname ; this.Author = author ; this.Vid_url = url ; this.Image = img ; } } } namespace UWP.ViewModels { class VideoListModel : ViewModelBase { public ObservableCollection < VideoListItem > VideoItems { get ; set ; } private VideoListItem videoItems ; public VideoListModel ( ) { } public async static Task < List < VideoListItem > > GetVideoItem ( ) { List < VideoListItem > videoItems = new List < VideoListItem > ( ) ; StorageFolder videos_folder = await KnownFolders.VideosLibrary.CreateFolderAsync ( `` Videos '' ) ; var queryOptions = new QueryOptions ( CommonFileQuery.DefaultQuery , new [ ] { `` .mp4 '' } ) ; var videos = await videos_folder.CreateFileQueryWithOptions ( queryOptions ) .GetFilesAsync ( ) ; foreach ( var video in videos ) { //Debug.WriteLine ( video.Name ) ; //videoItems.Add ( new VideoListItem ( ) ) ; var bitmap = new BitmapImage ( ) ; var thumbnail = await video.GetThumbnailAsync ( ThumbnailMode.SingleItem ) ; await bitmap.SetSourceAsync ( thumbnail ) ; videoItems.Add ( new VideoListItem ( video.DisplayName , `` '' , new Uri ( video.Path ) , bitmap ) ) ; } //foreach ( var video in videoItems ) // { // Debug.WriteLine ( `` Name : { 0 } , Author : { 1 } , Uri : { 2 } , Bitmap : { 3 } '' , video.VideoName , video.Author , video.Vid_url , video.Image.UriSource ) ; // } return videoItems ; } } } < Page xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' using : UWP.Views '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : Controls= '' using : Microsoft.Toolkit.Uwp.UI.Controls '' x : Class= '' UWP.Views.Video '' mc : Ignorable= '' d '' NavigationCacheMode= '' Enabled '' DataContext= '' { Binding Source= { StaticResource ViewModelLocator } , Path=VideoListModel } '' > < ! -- NavigationCacheMode Enable for the page state save -- > < Page.Resources > < DataTemplate x : Key= '' VideoTemplate '' > < Grid Width= '' { Binding Width } '' Height= '' { Binding Height } '' Margin= '' 2 '' > < Image HorizontalAlignment= '' Center '' Stretch= '' UniformToFill '' Source= '' { Binding Image } '' / > < TextBlock Text= '' { Binding VideoName } '' / > < StackPanel Orientation= '' Horizontal '' > < TextBlock Text= '' Author '' / > < TextBlock Text= '' { Binding Author } '' / > < /StackPanel > < /Grid > < /DataTemplate > < /Page.Resources > < Grid Background= '' { ThemeResource ApplicationPageBackgroundThemeBrush } '' > < ListView Name= '' VideosListWrapPanal '' ItemTemplate= '' { StaticResource VideoTemplate } '' > < ItemsControl.ItemsPanel > < ItemsPanelTemplate > < Controls : WrapPanel / > < /ItemsPanelTemplate > < /ItemsControl.ItemsPanel > < /ListView > < /Grid > < /Page > public async MainViewModel ( ) { VideoItems = new ObservableCollection < MainMenuItem > ( await GetVideoItem ( ) ) ; }"
Boolean result ; while ( true ) { try { result = enumerator.MoveNext ( ) ; //Taken from a yield created enumerable if ( ! result ) break ; } catch ( Exception ex ) { Console.WriteLine ( `` CATCHED ... '' ) ; continue ; } }
"internal static Guid OrIfEmpty ( this Guid ? guid , Guid other ) { if ( ! guid.HasValue || guid.Value == Guid.Empty ) { return other ; } return guid.Value ; } ( ( Guid ? ) null ) .OrIfEmpty ( other ) ;"
public interface IEntity { } public class Entity : IEntity { } public class NonEntity { } class SampleControl { public Type EntityType { get ; set ; } }
Namespace Extensions Public Module OrmExtensions < Extension ( ) > Public Function ToDomainObjectCollection ( ByRef objects As OrmCollection ( Of OrmObject ) ) As DomainObjectCollection Return objects.AsQueryable ( ) .ToDomainObjectCollection ( ) End Function < Extension ( ) > Public Function ToDomainObjectCollection ( ByRef objects As IQueryable ( Of OrmObject ) ) As DomainObjectCollection Dim doc As New DomainObjectCollection ( ) For Each o In objects doc.Add ( o.ToDomainObject ( ) ) Next Return doc End Function End ModuleEnd Namespace
"private static void Main ( ) { var dict = new Dictionary < int , int > ( ) ; dict.Add ( 1,1 ) ; SomeMethod ( dict.AsQueryable ( ) ) ; } public static void SomeMethod ( IQueryable dataSource ) { // dataSource as Dictionary < int , int > -- > null var dict = dataSource. ? ? ? }"
private void Execute ( Action action ) { Logger.Start ( ) ; try { action ( ) ; } catch ( Exception exception ) { Logger.WriteException ( ) ; throw ; } finally { Logger.Finish ( ) ; } } public void DoSomething ( string parameter ) { Execute ( ( ) = > GetProvider ( parameter ) .DoSomething ( ) ) ; } private T Execute < T > ( Func < T > action ) { Logger.Start ( ) ; try { return action ( ) ; } catch ( Exception exception ) { Logger.WriteException ( ) ; throw ; } finally { Logger.Finish ( ) ; } } public Result DoSomething ( string parameter ) { Result result = null ; Execute ( ( ) = > result = GetProvider ( parameter ) .DoSomething ( ) ) ; return result ; }
"public partial class UserControl1 : UserControl { Timer blinkTimer ; Color blinkingColor = Color.Red ; int interval = 300 ; bool flag1 = false ; bool flag2 = false ; public UserControl1 ( ) { InitializeComponent ( ) ; // Blinking abel default values this.blinkTimer = new Timer ( ) ; this.blinkTimer.Interval = interval ; ; this.blinkTimer.Tick += new System.EventHandler ( timer_Tick ) ; flag1 = true ; this.blinkTimer.Start ( ) ; } private void blinkLabels ( Label label ) { if ( label.ForeColor == Color.White ) label.ForeColor = blinkingColor ; else label.ForeColor = Color.White ; } void timer_Tick ( object sender , System.EventArgs e ) { if ( flag1 == true ) blinkLabels ( label1 ) ; if ( flag2 == true ) blinkLabels ( label2 ) ; } private void button1_Click ( object sender , EventArgs e ) { flag2 = true ; this.blinkTimer.Start ( ) ; }"
"string [ ] fileNames = Directory.GetFiles ( @ '' C : \D : \..\..\ ... \ '' , `` con.txt '' ) ; foreach ( string fileName in fileNames ) Console.WriteLine ( fileName ) ; C : \D : \..\..\ ... \con"
"@ { ViewBag.Username = `` Charlie Brown '' ; string title1 = string.Format ( `` Welcome { 0 } '' , ViewBag.Username ) ; var title2 = string.Format ( `` Welcome { 0 } '' , ViewBag.Username ) ; } @ Html.ActionLink ( title1 , `` Index '' ) @ Html.ActionLink ( title2 , `` Index '' )"
public class SomeClass { private static int staticField = 10 ; } SimpleIoc.Default.Register < SomeClass > ( ) ; Can not build instance : Multiple constructors found but none marked with PreferredConstructor .
"class IndexNotFoundException : Exception { } public static string RunAndPossiblyThrow ( int index , bool doThrow ) { try { return Run ( index ) ; } catch ( IndexNotFoundException e ) { if ( doThrow ) throw ; } return `` '' ; } public static string Run ( int index ) { if ( _store.Contains ( index ) ) return _store [ index ] ; throw new IndexNotFoundException ( ) ; } public static string RunAndIgnoreThrow ( int index ) { try { return Run ( index ) ; } catch ( IndexNotFoundException e ) { } return `` '' ; } class IndexNotFoundException : Exception { } public static string RunAndPossiblyThrow ( int index , bool doThrow ) { try { return Run ( index ) ; } catch { } return `` '' ; } public static string Run ( int index ) { if ( _store.Contains ( index ) ) return _store [ index ] ; throw new IndexNotFoundException ( ) ; } class IndexNotFoundException : Exception { } public static string RunAndPossiblyThrow ( int index , bool doThrow ) { try { return Run ( index ) ; } catch { } return `` '' ; } public static string Run ( int index ) { if ( _store.Contains ( index ) ) return _store [ index ] ; return `` '' ; } class IndexNotFoundException : Exception { } public static string RunAndPossiblyThrow ( int index , bool doThrow ) { try { throw new IndexNotFoundException ( ) ; } catch { } return `` '' ; }"
bool UseMetricByDefault ( ) { return TimeZone.CurrentTimeZone.GetUtcOffset ( DateTime.Now ) .TotalHours > = 0 ; }
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Web ; using MvcApplication6.App_Start ; using System.IO ; [ assembly : WebActivator.PreApplicationStartMethod ( typeof ( RazorPageBugTest ) , `` Start '' , Order = 0 ) ] namespace MvcApplication6.App_Start { public static class RazorPageBugTest { public static void Start ( ) { using ( var writer = File.Open ( @ '' c : \trace.txt '' , FileMode.Create ) ) { using ( var tw = new StreamWriter ( writer ) ) { tw.AutoFlush = true ; tw.WriteLine ( `` Written at { 0 } '' , DateTime.Now ) ; } } } } }"
struct MyStruct { public bool f ; } struct MyStruct { [ MarshalAs ( UnmanagedType.I1 ) ] public bool f ; } unsafe struct MyStruct { public fixed bool fs [ 1 ] ; } unsafe struct MyStruct { public fixed bool fs [ 4 ] ; } unsafe struct MyStruct { public fixed bool fs [ 5 ] ; }
"[ SerializableAttribute ] public struct Nullable < T > where T : struct , new ( ) Nullable < string > a ; //error . makes sense to me Nullable < Nullable < int > > b ; //error . but why ?"
"using ( DbCommand cmd = new SqlCommand ( `` myProcedure '' , ( SqlConnection ) DataAccessHelper.CreateDatabase ( ) .CreateConnection ( ) ) { CommandType = CommandType.StoredProcedure } ) { cmd.Connection.Open ( ) ; using ( IDataReader dr = cmd.ExecuteReader ( ) ) doWork ( dr ) ; }"
"AVOutputFormat* outputFormat = ffmpeg.av_guess_format ( null , `` output.mp4 '' , null ) ; AVCodec* videoCodec = ffmpeg.avcodec_find_encoder ( outputFormat- > video_codec ) ; AVFormatContext* formatContext = ffmpeg.avformat_alloc_context ( ) ; formatContext- > oformat = outputFormat ; formatContext- > video_codec_id = videoCodec- > id ; ffmpeg.avformat_new_stream ( formatContext , videoCodec ) ; AVCodecContext* codecContext = ffmpeg.avcodec_alloc_context3 ( videoCodec ) ; codecContext- > bit_rate = 400000 ; codecContext- > width = 1280 ; codecContext- > height = 720 ; codecContext- > gop_size = 12 ; codecContext- > max_b_frames = 1 ; codecContext- > pix_fmt = videoCodec- > pix_fmts [ 0 ] ; codecContext- > codec_id = videoCodec- > id ; codecContext- > codec_type = videoCodec- > type ; codecContext- > time_base = new AVRational { num = 1 , den = 30 } ; AVDictionary* options = null ; int result = ffmpeg.av_dict_set ( & options , `` movflags '' , `` faststart '' , 0 ) ; int writeHeaderResult = ffmpeg.avformat_write_header ( formatContext , & options ) ; if ( ( formatContext- > oformat- > flags & ffmpeg.AVFMT_NOFILE ) == 0 ) { int ioOptionResult = ffmpeg.avio_open ( & formatContext- > pb , `` output.mp4 '' , ffmpeg.AVIO_FLAG_WRITE ) ; } int writeHeaderResult = ffmpeg.avformat_write_header ( formatContext , & options ) ; outputFrame- > pts = frameIndex ; packet.flags |= ffmpeg.AV_PKT_FLAG_KEY ; packet.pts = frameIndex ; packet.dts = frameIndex ; int encodedFrame = 0 ; int encodeVideoResult = ffmpeg.avcodec_encode_video2 ( codecContext , & packet , outputFrame , & encodedFrame ) ; if ( encodedFrame ! = 0 ) { packet.pts = ffmpeg.av_rescale_q ( packet.pts , codecContext- > time_base , m_videoStream- > time_base ) ; packet.dts = ffmpeg.av_rescale_q ( packet.dts , codecContext- > time_base , m_videoStream- > time_base ) ; packet.stream_index = m_videoStream- > index ; if ( codecContext- > coded_frame- > key_frame > 0 ) { packet.flags |= ffmpeg.AV_PKT_FLAG_KEY ; } int writeFrameResult = ffmpeg.av_interleaved_write_frame ( formatContext , & packet ) ; } int writeTrailerResult = ffmpeg.av_write_trailer ( formatContext ) ; avcodec-56.dllavdevice-56.dllavfilter-5.dllavformat-56.dllavutil-54.dllpostproc-53.dllswresample-1.dllswscale-3.dll"
< ItemGroup > < Page Include= '' **\*.xaml '' > < SubType > Designer < /SubType > < Generator > MSBuild : UpdateDesignTimeXaml < /Generator > < /Page > < Compile Update= '' **\*.xaml.cs '' SubType= '' Code '' DependentUpon= '' % ( Filename ) '' / > < /ItemGroup > < Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < LanguageTargets > $ ( MSBuildToolsPath ) \Microsoft.CSharp.targets < /LanguageTargets > < TargetFramework > net45 < /TargetFramework > < IsPackable > true < /IsPackable > < /PropertyGroup > < ItemGroup > < Page Include= '' **\*.xaml '' > < SubType > Designer < /SubType > < Generator > MSBuild : UpdateDesignTimeXaml < /Generator > < /Page > < Compile Update= '' **\*.xaml.cs '' SubType= '' Code '' DependentUpon= '' % ( Filename ) '' / > < /ItemGroup > < ItemGroup > < Reference Include= '' PresentationCore '' / > < Reference Include= '' PresentationFramework '' / > < Reference Include= '' System '' / > < Reference Include= '' System.ComponentModel.DataAnnotations '' / > < Reference Include= '' System.Core '' / > < Reference Include= '' System.Xaml '' / > < Reference Include= '' WindowsBase '' / > < /ItemGroup > < /Project >
COMMAND\n ... Unpredictable number of lines of data ... \nEND COMMAND\n ... .repeat ... . Byte buffer [ 1024 ] = `` ... ... ... ... ... ..blah\nThis is another l '' [ another read ] `` ine\n ... ... ... ... ... ... ... ... ... ..More Lines ... '' // Note : no newline at the endStringBuilder sb = new StringBuilder ( `` This is a line\nThis is incomp.. '' ) ; StringReader sr = new StringReader ( sb ) ; string s = sr.ReadLine ( ) ; // returns `` This is a line '' s = sr.ReadLine ( ) ; // returns `` This is incomp.. ''
"[ A ] == [ B ] * 10 - FUNCTION ( [ C ] , STRING_EXPRESSION , FUNCTION ( [ D ] , [ C ] , [ E ] ) ) , FUNCTION ( [ C ] , [ X ] ) , 100"
FootballTeam A = new FootballTeam ( ) ; FootballTeam B = new FootballTeam ( ) ; // now A needs to let B know about it 's manager change// manager is a property inside this class ...
public class Survey { public int SurveyId { get ; set ; } public string Title { get ; set ; } public int BrandId { get ; set ; } public DateTime Created { get ; set ; } public List < SurveyQuestionBlock > QuestionBlocks { get ; set ; } [ ResultColumn ] public string Name { get ; set ; } /// < summary > /// Constructor /// < /summary > public Survey ( ) { Created = DateTime.Now ; QuestionBlocks = new List < SurveyQuestionBlock > ( ) ; } }
"public class Rule { public int Id { get ; set ; } public string RuleValue { get ; set ; } public bool IsActive { get ; set ; } public SharedRuleType RuleType { get ; set ; } public List < Exclusion > Exclusions { get ; set ; } } public class Exclusion { public int Id { get ; set ; } public int InstanceId { get ; set ; } public int SiteId { get ; set ; } [ ForeignKey ( `` RuleId '' ) ] public int RuleId { get ; set ; } public Rule Rule { get ; set ; } } public async Task < List < Rule > > GetRules ( int instanceId , SharedRuleType ruleType , string searchTerm ) { using ( var context = new MyDbContext ( ) ) { var query = context.Set < Rule > ( ) .Include ( r = > r.Exclusions ) // *** Currently returns ALL exclusions but I only want ones where InstanceId == instanceId ( param ) *** .Where ( r = > r.IsActive ) ; if ( ! string.IsNullOrEmpty ( searchTerm ) ) { query = query.Where ( r = > r.RuleValue.Contains ( searchTerm ) ) ; } if ( ruleType ! = SharedRuleType.None ) { query = query.Where ( r = > r.RuleType == ruleType ) ; } return await query.ToListAsync ( ) ; } }"
"using Integration.Models ; using Microsoft.OData.Edm ; using System.Web.Http ; using System.Web.OData.Batch ; using System.Web.OData.Builder ; using System.Web.OData.Extensions ; using Integration.Controllers ; namespace Integration { public static class WebApiConfig { public static void Register ( HttpConfiguration config ) { config.MapODataServiceRoute ( `` odata '' , null , GetEdmModel ( ) , new DefaultODataBatchHandler ( GlobalConfiguration.DefaultServer ) ) ; config.EnsureInitialized ( ) ; } private static IEdmModel GetEdmModel ( ) { //GlobalConfiguration.Configuration.Filters.Add ( new BasicAuthenticationFilter ( ) ) ; // basicAutenthentication ODataConventionModelBuilder builder = new ODataConventionModelBuilder ( ) ; builder.Namespace = `` Integration '' ; builder.ContainerName = `` DefaultContainer '' ; builder.EntitySet < DataRow > ( `` DataRow '' ) ; builder.EntitySet < Connection > ( `` Connection '' ) ; builder.EntitySet < API > ( `` API '' ) ; var edmModel = builder.GetEdmModel ( ) ; return edmModel ; } } } using Integration.DataSource ; using System.Linq ; using System.Web.Http ; using System.Web.OData ; using System.Net ; namespace Integration.Controllers { [ EnableQuery ] public class DataRowController : ODataController { [ BasicAuthenticationFilter ] public IHttpActionResult Get ( ) { return Content ( HttpStatusCode.NoContent , '' NoContent '' ) ; } [ BasicAuthenticationFilter ] public IHttpActionResult Post ( Models.DataRow row ) { if ( ! ModelState.IsValid ) { return BadRequest ( ModelState ) ; } //do stuff to save data // .. return Content ( HttpStatusCode.Created , `` OK '' ) ; } } } using Integration.DataSource ; using System.Linq ; using System.Web.Http ; using System.Web.OData ; using System.Net ; namespace Integration.Controllers { [ EnableQuery ] public class ConnectionController : ODataController { [ BasicAuthenticationFilter ] public IHttpActionResult Get ( ) { return Ok ( IntegrationDataSources.Instance.Connection.AsQueryable ( ) ) ; } [ BasicAuthenticationFilter ] public IHttpActionResult Post ( Models.Connection connection ) { return Content ( HttpStatusCode.NotImplemented , `` NotImplemented '' ) ; } } } using System ; using System.Collections.Generic ; using System.ComponentModel.DataAnnotations ; using System.Linq ; using System.Web ; namespace Integration.Models { public class DataRow { [ Key ] public int ID { get ; set ; } [ Required ] public int Type { get ; set ; } [ Required ] public string DataType { get ; set ; } [ Required ] public string Data { get ; set ; } [ Required ] public int APIVersion { get ; set ; } [ Required ] public string IntegrationProvider { get ; set ; } } public class Connection { [ Key ] public string ConnectionName { get ; set ; } public API Api { get ; set ; } } public class API { [ Key ] public int Version { get ; set ; } public DataRow row { get ; set ; } } }"
[ Testing.User ] |Info : ( [ Testing.Info ] |Name : ( [ System.String ] |Matt ) |Age : ( [ System.Int32 ] |21 ) ) |Description : ( [ System.String ] |This is some description ) - [ Testing.User ] - Info - [ Testing.Info ] - Name - [ System.String ] - Matt - Age - [ System.Int32 ] - 21- Description - [ System.String ] - This is some description [ 0 ] = [ Testing.User ] [ 1 ] = Info : ( [ Testing.Info ] |Name : ( [ System.String ] |Matt ) |Age : ( [ System.Int32 ] |21 ) ) [ 2 ] = Description : ( [ System.String ] |This is some description ) [ 0 ] = [ Testing.User ] [ 1 ] = Info : ( [ Testing.Info ] [ 2 ] = Name : ( [ System.String ] [ 3 ] = Matt ) [ 4 ] = Age : ( [ System.Int32 ] [ 5 ] = 21 ) ) [ 6 ] = Description : ( [ System.String ] [ 7 ] = This is some description )
public class FurCollection : IEnumerable < FurStrand > { public IEnumerator < FurStrand > GetEnumerator ( ) { foreach ( var strand in this.Strands ) { yield return strand ; } } IEnumerator IEnumerable.GetEnumerator ( ) { return this.GetEnumerator ( ) ; } }
public class Worker { private bool _executed = false ; private object _someProperty ; public object SomeProperty { get { return _someProperty ; } set { ThrowIfExecuted ( ) ; _someProperty = value ; } } public void Execute ( ) { ThrowIfExecuted ( ) ; _executed = true ; // do work . . . } private void CheckNotExcecuted ( ) { if ( _executed ) throw new InvalidOperationException ( ) ; } }
"// Initialize the new secure keysvar keyGenerator = KeyGenerator.Create ( ) ; var keyPair = keyGenerator.GenerateKeyPair ( ) ; this._privateKey = keyPair.ToEncryptedPrivateKeyString ( privateKeySecret ) ; this._publicKey = keyPair.ToPublicKeyString ( ) ; // Initialize the certificate generationvar certificateGenerator = new X509V3CertificateGenerator ( ) ; var serialNo = BigInteger.ProbablePrime ( 128 , new Random ( ) ) ; certificateGenerator.SetSerialNumber ( serialNo ) ; certificateGenerator.SetSubjectDN ( GetLicenseeDN ( ) ) ; certificateGenerator.SetIssuerDN ( GetLicencerDN ( ) ) ; certificateGenerator.SetNotAfter ( DateTime.Now.AddYears ( 100 ) ) ; certificateGenerator.SetNotBefore ( DateTime.Now.Subtract ( new TimeSpan ( 7 , 0 , 0 , 0 ) ) ) ; certificateGenerator.SetSignatureAlgorithm ( `` SHA512withRSA '' ) ; certificateGenerator.SetPublicKey ( keyPair.PublicKey ) ; var result = certificateGenerator.Generate ( keyPair.PrivateKey ) ; this._clientCertificate = new X509Certificate2 ( DotNetUtilities.ToX509Certificate ( result ) ) ; this._clientCertificate.PrivateKey = DotNetUtilities.ToRSA ( ( RsaPrivateCrtKeyParameters ) keyPair.PrivateKey ) ; System.Security.Cryptography.CryptographicException : Bad Data.Result StackTrace : at System.Security.Cryptography.CryptographicException.ThrowCryptographicException ( Int32 hr ) at System.Security.Cryptography.Utils._ImportKey ( SafeProvHandle hCSP , Int32 keyNumber , CspProviderFlags flags , Object cspObject , SafeKeyHandle & hKey ) at System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters ( RSAParameters parameters ) at Org.BouncyCastle.Security.DotNetUtilities.ToRSA ( RsaPrivateCrtKeyParameters privKey ) in C : \BouncyCastle\crypto\src\security\DotNetUtilities.cs : line 173 at EBSConnect.EBSClientBase.InitializeSecurity ( String privateKeySecret ) in c : \Projects\EBSConnect\Source\EBSConnect\EBSClientBase.cs : line 78"
"var container = new UnityContainer ( ) ; container.RegisterType < Type1 , Impl1 > ( ) ; container.RegisterType < Type2 , Impl2 > ( ) ; container.RegisterType < Type3 , Impl3 > ( ) ; container.RegisterType < Type4 , Impl4 > ( ) ; var type4Impl = container.Resolve ( ( typeof ) Type4 ) as Type4 ; type4Impl.Run ( ) ; Type1 type1Impl = Impl1 ( ) ; Type2 type2Impl = Impl2 ( ) ; Type3 type3Impl = Impl3 ( type1Impl , type2Impl ) ; Type4 type4Impl = Impl4 ( type1Impl , type3Impl ) ; type4Impl.Run ( ) ;"
"< StackPanel Margin= '' -105,146,66,0 '' Height= '' 900 '' VerticalAlignment= '' Top '' x : Name= '' PrintImageContextMenu '' > < Image Canvas.ZIndex= '' 0 '' Source= '' { Binding Coupon.OverlayImagePath } '' Margin= '' 0 , -21 , -76,108 '' Stretch= '' Fill '' / > < ContentControl Content= '' { Binding } '' ContentTemplateSelector= '' { StaticResource DataViewerDataTemplateSelector } '' / > < /StackPanel > public void Print ( ) { //Executes On Thread Application.Current.Dispatcher.Invoke ( System.Windows.Threading.DispatcherPriority.Normal , ( EventHandler ) delegate { UpdateLayout ( ) ; var fixedDoc = PrintHelper.GetFixedDocument ( StackPanelToPrint , new PrintDialog ( ) ) ; PrintHelper.ShowPrintPreview ( fixedDoc ) ; } , null , null ) ; } private void PrintCurrentForm ( object sender , RoutedEventArgs e ) { Print ( ) ; } public static void ShowPrintPreview ( FixedDocument fixedDoc ) { var wnd = new Window ( ) ; var viewer = new DocumentViewer ( ) ; viewer.Document = fixedDoc ; wnd.Content = viewer ; wnd.ShowDialog ( ) ; } public static FixedDocument GetFixedDocument ( FrameworkElement toPrint , PrintDialog printDialog ) { var capabilities = printDialog.PrintQueue.GetPrintCapabilities ( printDialog.PrintTicket ) ; var pageSize = new Size ( printDialog.PrintableAreaWidth , printDialog.PrintableAreaHeight ) ; var visibleSize = new Size ( capabilities.PageImageableArea.ExtentWidth , capabilities.PageImageableArea.ExtentHeight ) ; var fixedDoc = new FixedDocument ( ) ; //If the toPrint visual is not displayed on screen we neeed to measure and arrange it toPrint.Measure ( new Size ( double.PositiveInfinity , double.PositiveInfinity ) ) ; toPrint.Arrange ( new Rect ( new Point ( 0 , 0 ) , toPrint.DesiredSize ) ) ; // var size = toPrint.DesiredSize ; //Will assume for simplicity the control fits horizontally on the page double yOffset = 0 ; while ( yOffset < size.Height ) { var vb = new VisualBrush ( toPrint ) { Stretch = Stretch.None , AlignmentX = AlignmentX.Left , AlignmentY = AlignmentY.Top , ViewboxUnits = BrushMappingMode.Absolute , TileMode = TileMode.None , Viewbox = new Rect ( 0 , yOffset , visibleSize.Width , visibleSize.Height ) } ; var pageContent = new PageContent ( ) ; var page = new FixedPage ( ) ; ( ( IAddChild ) pageContent ) .AddChild ( page ) ; fixedDoc.Pages.Add ( pageContent ) ; page.Width = pageSize.Width ; page.Height = pageSize.Height ; var canvas = new Canvas ( ) ; FixedPage.SetLeft ( canvas , capabilities.PageImageableArea.OriginWidth ) ; FixedPage.SetTop ( canvas , capabilities.PageImageableArea.OriginHeight ) ; canvas.Width = visibleSize.Width ; canvas.Height = visibleSize.Height ; canvas.Background = vb ; page.Children.Add ( canvas ) ; yOffset += visibleSize.Height ; } return fixedDoc ; }"
int y = x++-+-++x ; int y = x+++-+++x ;
if ( i==0 ) { // do instructions here } if ( 0==i ) { // do instructions here }
namespace App.Views { public abstract class InfoListViewBase < M > : Page where M : InfoListViewModelBase { public InfoListViewBase ( ) { } } public sealed partial class ModelPage : InfoListViewBase < Model > { public Model ( ) { InitializeComponent ( ) ; NavigationCacheMode = NavigationCacheMode.Disabled ; } } } < local : InfoListViewBase x : Class= '' App.Views.ModelPage '' x : TypeArguments= '' l : Model '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : Behaviors= '' using : Template10.Behaviors '' xmlns : Core= '' using : Microsoft.Xaml.Interactions.Core '' xmlns : Interactivity= '' using : Microsoft.Xaml.Interactivity '' xmlns : controls= '' using : Template10.Controls '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : local= '' using : App.Views '' xmlns : l= '' using : Library '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' > < /local : InfoListViewBase > The name `` InfoListViewBase ` 1 '' does not exist in the namespace `` using : App.Views '' .
< xs : element name= '' Something '' type= '' xs : decimal '' minOccurs= '' 0 '' maxOccurs= '' 1 '' / >
public class Test { IEnumerable < IFoo > foos ; public void DoTestOne < H > ( IEnumerable < H > bars ) where H : IFoo { foos = bars ; } public void DoTestTwo ( IEnumerable < IBar > bars ) { foos = bars ; } } public interface IFoo { } public interface IBar : IFoo { }
public string Test ( ) { return `` hello '' ; } .method public hidebysig instance string Test ( ) cil managed { // Code size 11 ( 0xb ) .maxstack 1 .locals init ( [ 0 ] string CS $ 1 $ 0000 ) IL_0000 : nop IL_0001 : ldstr `` hello '' IL_0006 : stloc.0 IL_0007 : br.s IL_0009 IL_0009 : ldloc.0 IL_000a : ret } IL_0007 : br.s IL_0009 IL_0009 : ldloc.0 .method public hidebysig instance string Test ( ) cil managed { // Code size 6 ( 0x6 ) .maxstack 8 IL_0000 : ldstr `` hello '' IL_0005 : ret }
"private string testString ; public string TestString { get { return testString ; } set { testString = value ; } } < TextBlock Text= '' { Binding Path=TestString , Mode=TwoWay } '' Foreground= '' Red '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' FontFamily= '' Calibri '' FontSize= '' 24 '' FontWeight= '' Bold '' > < /TextBlock > public string TestString ;"
"public interface IVisitable < out TVisitable > where TVisitable : IVisitable < TVisitable > { TResult Accept < TResult > ( IVisitor < TResult , TVisitable > visitor ) ; } public class Foo : IVisitable < Foo > { public TResult Accept < TResult > ( IVisitor < TResult , Foo > visitor ) = > visitor.Visit ( this ) ; } public interface IVisitor < out TResult , in TVisitable > where TVisitable : IVisitable < TVisitable > { TResult Visit ( TVisitable visitable ) ; } public class CountVisitor : IVisitor < int , Foo > { public int Visit ( Foo visitable ) = > 42 ; } public class NameVisitor : IVisitor < string , Foo > { public string Visit ( Foo visitable ) = > `` Chewie '' ; } var theFoo = new Foo ( ) ; int count = theFoo.Accept ( new CountVisitor ( ) ) ; string name = theFoo.Accept ( new NameVisitor ( ) ) ; public class Bar : IVisitable < Bar > { public TResult Accept < TResult > ( IVisitor < TResult , Bar > visitor ) = > visitor.Visit ( this ) ; } public class CountVisitor : IVisitor < int , Foo > , IVisitor < int , Bar > { public int Visit ( Foo visitable ) = > 42 ; public int Visit ( Bar visitable ) = > 7 ; } var theFoo = new Foo ( ) ; int count = theFoo.Accept ( new CountVisitor ( ) ) ;"
< Rectangle Grid.Column= '' 0 '' Grid.Row= '' 0 '' Fill= '' Black '' / > < Rectangle Grid.Column= '' 1 '' Grid.Row= '' 0 '' Fill= '' Black '' / > < Rectangle Grid.Column= '' 2 '' Grid.Row= '' 0 '' Fill= '' Black '' / > < Rectangle Grid.Column= '' 3 '' Grid.Row= '' 0 '' Fill= '' Black '' / > < Rectangle Grid.Column= '' 4 '' Grid.Row= '' 0 '' Fill= '' Black '' / >
"using ( var memstream = new MemoryStream ( new WebClient ( ) .DownloadData ( url ) ) ) using ( GZipStream gs = new GZipStream ( memstream , CompressionMode.Decompress ) ) using ( var outmemstream = new MemoryStream ( ) ) { gs.CopyTo ( outmemstream ) ; string t = Encoding.UTF8.GetString ( outmemstream.ToArray ( ) ) ; Console.WriteLine ( t ) ; }"
"private string MyEnumString = Enum.GetName ( typeof ( MyEnum ) , MyEnum.Name ) ; private const string MyEnumString = Enum.GetName ( typeof ( MyEnum ) , MyEnum.Name ) ;"
"int res = 0 ; for ( int i = 0 ; i < 32 ; i++ ) { res += 1 < < i ; } xor edx , edx mov r8d,1 _loop : lea ecx , [ r8-1 ] and ecx,1Fh ; why ? mov eax,1 shl eax , cl add edx , eax mov ecx , r8d and ecx,1Fh ; why ? mov eax,1 shl eax , cl add edx , eax lea ecx , [ r8+1 ] and ecx,1Fh ; why ? mov eax,1 shl eax , cl add edx , eax lea ecx , [ r8+2 ] and ecx,1Fh ; why ? mov eax,1 shl eax , cl add edx , eax add r8d,4 cmp r8d,21h jl _loop"
Type type = typeof ( IMyInterface < > ) .MakeGenericType ( genericTypeForMyInterface )
"var list = from book in books where book.price > 50 select book ; list = list.Take ( 50 ) ; SELECT top 50 id , title , price , authorFROM BooksWHERE price > 50 SELECT [ Limit1 ] . [ C1 ] as [ C1 ] [ Limit1 ] . [ id ] as [ Id ] , [ Limit1 ] . [ title ] as [ title ] , [ Limit1 ] . [ price ] as [ price ] , [ Limit1 ] . [ author ] FROM ( SELECT TOP ( 50 ) [ Extent1 ] . [ id ] as as [ Id ] , [ Extent1 ] . [ title ] as [ title ] , [ Extent1 ] . [ price ] as [ price ] , [ Extent1 ] . [ author ] as [ author ] FROM Books as [ Extent1 ] WHERE [ Extent1 ] . [ price ] > 50 ) AS [ Limit1 ]"
"ServiceThrottlingBehavior stb = _servicehost.Description.Behaviors.Find < ServiceThrottlingBehavior > ( ) ; if ( stb == null ) { stb = new ServiceThrottlingBehavior ( ) ; stb.MaxConcurrentCalls = 1 ; stb.MaxConcurrentInstances = 1 ; stb.MaxConcurrentSessions = 1 ; _servicehost.Description.Behaviors.Add ( stb ) ; } public string ThrottlingCheck ( ) { Thread.Sleep ( new TimeSpan ( 0 , 0 , 0 , 5 , 0 ) ) ; //5 seconds return `` Invoke Complete '' ; }"
"int i ; for ( i = 0 ; i < 10 ; i++ ) { Console.WriteLine ( i ) ; } for ( i = 0 ; i < 10 ; i++ ) { Console.WriteLine ( i ) ; } for ( int i = 0 ; i < 10 ; i++ ) { Console.WriteLine ( i ) ; } for ( int i = 0 ; i < 10 ; i++ ) { Console.WriteLine ( i ) ; } .locals init ( [ 0 ] int32 i ) .locals init ( [ 0 ] int32 i , [ 1 ] int32 i )"
"MicrosoftAccountAuthenticationOptions mo = new MicrosoftAccountAuthenticationOptions ( ) { ClientId = `` My Client ID '' , ClientSecret = `` My Client Secret '' , } ; app.UseMicrosoftAccountAuthentication ( mo ) ;"
string s = `` Do you wish to send anyway ? `` ; IL_0128 : ldstr `` Do you wish to send anyway\ ? ''
"void FastCopyRegion ( Bitmap CopyMe , ref Bitmap IntoMe , Rectangle CopyArea ) { // ` IntoMe ` need not be declared ` ref ` but it brings // attention to the fact it will be modified Debug.Assert ( CopyMe.PixelFormat == IntoMe.PixelFormat , `` PixelFormat mismatch , we could have a problem '' ) ; Debug.Assert ( CopyMe.Width == IntoMe.Width , //This check does not verify `` Stride mismatch , we could have a problem '' ) ; // sign of ` stride ` match BitmapData copyData = CopyMe.LockBits ( CopyArea , ImageLockMode.ReadWrite , CopyMe.PixelFormat ) ; IntoMe.UnlockBits ( copyData ) ; } void FastCopyRegion ( Bitmap CopyMe , ref Bitmap IntoMe , Rectangle CopyArea ) { // ` IntoMe ` need not be declared ` ref ` but it brings attention to the fact it will be modified Debug.Assert ( CopyMe.PixelFormat == IntoMe.PixelFormat , `` PixelFormat mismatch , we could have a problem '' ) ; Debug.Assert ( CopyMe.Width == IntoMe.Width , `` Width mismatch , we could have a problem '' ) ; BitmapData copyD = IntoMe.LockBits ( CopyArea , ImageLockMode.ReadWrite , CopyMe.PixelFormat ) ; BitmapData copyData = CopyMe.LockBits ( CopyArea , ImageLockMode.ReadWrite , CopyMe.PixelFormat ) ; CopyMe.UnlockBits ( copyData ) ; IntoMe.UnlockBits ( copyData ) ; }"
"youtubeService.setUserCredentials ( userBox.Text , passwordBox.Text ) ; try { String strAuth = youtubeService.QueryClientLoginToken ( ) ; } catch ( Exception ex ) { } m_LoggedInSettings = new YouTubeRequestSettings ( myappname , mydevkey , username , password ) ; m_LoggedInRequest = new YouTubeRequest ( m_LoggedInSettings ) ; Comment userComment = new Comment ( ) ; userComment.Content = commentText ; m_LoggedInRequest.AddComment ( youtubevideo , userComment ) ;"
"public class DALBase : IDisposable { protected IDbConnection cn ; public DALBase ( ) { cn = new MySqlConnection ( connString ) ; } public void Dispose ( ) { if ( cn ! = null ) { if ( cn.State ! = ConnectionState.Closed ) { try { cn.Close ( ) ; } catch { } } cn.Dispose ( ) ; } } } public class FooDAL : DALBase { public int CreateFoo ( ) { // Notice that the cmd here is not wrapped in a using or try-finally . IDbCommand cmd = CreateCommand ( `` create foo with sql '' , cn ) ; Open ( ) ; int ident = int.Parse ( cmd.ExecuteScalar ( ) .ToString ( ) ) ; Close ( ) ; cmd.Dispose ( ) ; return ident ; } } using ( FooDAL dal = new FooDAL ( ) ) { return dal.CreateFoo ( ) ; }"
"Subroutine MySub ( a , b , x , y ) ! DEC $ ATTRIBUTES DLLEXPORT , STDCALL , ALIAS : 'MySub ' : : MySubImplicit NoneInteger , INTENT ( IN ) : : a , bInteger , INTENT ( OUT ) : : x , y y=a+b x=2*a+3*bEnd Subroutine MySub using System ; using System.Runtime.InteropServices ; namespace AlReTest { class Program { [ DllImport ( @ '' D : \ ... \AltRetTest.dll '' , CallingConvention=CallingConvention.StdCall ) ] public static extern int MySub ( int a , int b , [ Out ] int x , [ Out ] int y ) ; static void Main ( string [ ] args ) { int a = 4 ; int b = 3 ; int x = 0 ; int y = 0 ; MySub ( a , b , x , y ) ; Console.WriteLine ( x ) ; Console.WriteLine ( y ) ; Console.WriteLine ( MySub ( a , b , x , y ) ) ; } } }"
"void Main ( ) { object something = 4 ; Console.WriteLine ( SomeMethod < int > ( something ) ) ; Console.WriteLine ( SomeMethod < string > ( something ) ) ; } public T SomeMethod < T > ( object someRandomThing ) { T result = Convert.ChangeType ( someRandomThing , typeof ( T ) ) ; return result ; }"
"string url = string.Format ( `` https : //maps.googleapis.com/maps/api/timezone/json ? location= { 0 } , { 1 } & timestamp=1374868635 & sensor=false '' , lat , lon ) ; using ( HttpClient cl = new HttpClient ( ) ) { string json = await cl.GetStringAsync ( url ) .ConfigureAwait ( false ) ; TimeZoneModel timezone = new JavaScriptSerializer ( ) .Deserialize < TimeZoneModel > ( json ) ; } `` timeZoneName '' : `` Central European Summer Time '' TimeZoneInfo tzf = TimeZoneInfo.FindSystemTimeZoneById ( `` Central European Summer Time '' ) ;"
"MyClass obj = new MyClass ( ) { { value1 , value2 } , { value3 , value4 } }"
[ Serializable ] [ DataContract ] [ KnownType ( typeof ( Book ) ) ] public class BookDTO { ... } [ DataContract ( NameSpace= '' somenamespace.DTO.Book '' ) ]
"enum NetopScriptGeneratingCases { AddLogMessages , AddLogErrors , AddLogJournal , AllLog = AddLogMessages | AddLogErrors | AddLogJournal , DoNothing } NetopScriptGeneratingCases netopScriptGeneratingCases = NetopScriptGeneratingCases.DoNothing ; if ( checkBoxAddAuditLog.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogJournal ; } else if ( checkBoxAddErrorLog.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogErrors ; } else if ( checkBoxAddLogMessages.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogMessages ; } else if ( checkBoxAddAuditLog.Checked || checkBoxAddErrorLog.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogJournal | NetopScriptGeneratingCases.AddLogErrors ; } else if ( checkBoxAddAuditLog.Checked || checkBoxAddLogMessages.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogJournal | NetopScriptGeneratingCases.AddLogMessages ; } else if ( checkBoxAddErrorLog.Checked || checkBoxAddLogMessages.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogErrors | NetopScriptGeneratingCases.AddLogMessages ; } else if ( checkBoxAddErrorLog.Checked || checkBoxAddLogMessages.Checked || checkBoxAddAuditLog.Checked ) { netopScriptGeneratingCases = NetopScriptGeneratingCases.AddLogErrors | NetopScriptGeneratingCases.AddLogMessages | NetopScriptGeneratingCases.AddLogJournal ; } var modifiedFiles = NetopScriptGenerator.GenerateNetopScript ( netopScriptGeneratingCases , netopFiles ) ;"
"$ .ajax ( { type : `` POST '' , url : `` @ Url.Action ( `` uploadImage '' , `` Item '' ) '' , data : ' { `` imageData '' : `` ' + image + ' '' } ' , contentType : `` application/json ; charset=utf-8 '' , dataType : `` json '' , success : function ( success ) { alert ( 'Success ' + success.responseText ) ; } , error : function ( response ) { alert ( response.responseText ) ; } } ) ; [ HttpPost ] public ActionResult uploadImage ( string imageData ) { string imageName = Guid.NewGuid ( ) .ToString ( ) ; try { ProductManager pm = new ProductManager ( ) ; pm.AddNewProduct ( imageName ) ; } catch ( Exception e ) { writeToLog ( e ) ; } return Json ( new { success = imageName } , JsonRequestBehavior.AllowGet ) ; }"
using System ; namespace NamingLibrary { public class Foo // IdentifiersShouldDifferByMoreThanCase { protected string bar ; public string Bar { get { return bar ; } } } }
public class MyException : Exception { public int ErrorCode { get ; set ; } public MyException ( ) { } } public class MyException : Exception { public int ErrorCode { get { return ( int ) Data [ `` ErrorCode '' ] ; } set { Data [ `` ErrorCode '' ] = value ; } } public MyException ( ) { } }
var query = ( from organizations in ctxObj.Organizations where organizations.org_type_cd == 1 orderby organizations.org_ID select organizations ) ; int recordCount = query.Count ( ) ; int skipTo = 0 ; int take = 1000 ; if ( recordCount > 0 ) { while ( skipTo < recordCount ) { if ( skipTo + take > recordCount ) take = recordCount - skipTo ; foreach ( Organization o in query.Skip ( skipTo ) .Take ( take ) ) { writeRecord ( o ) ; } skipTo += take ; } }
"public sealed class Player { public Player ( string name , long score ) { Name = name ; Score = score ; ID = Guid.NewGuid ( ) ; } public string Name { get ; private set ; } public Guid ID { get ; private set ; } public long Score { get ; private set ; } } public sealed class PlayerDTO { public PlayerDTO ( string name , long score , string id ) { Name = name ; Score = score ; ID = id ; } public string Name { get ; private set ; } // the client is not .Net and does n't have Guid public string ID { get ; private set ; } public long Score { get ; private set ; } } var playerDto = player as PlayerDTO ;"
public interface IPayeePayrollRunInitialPayElementData : IPayeePayrollRunPayElementData
d : DataContext= '' { d : DesignInstance Type=lTemplates : TemplateEditorCustomVM } '' public class Nested { public class TestCheck { public int One { get ; set ; } public int Two { get ; set ; } } } public class SanityTestVM { public List < Nested.TestCheck > Test { get ; set ; } }
switch ( 1 ) { case 2 : } int i ; switch ( i=1 ) { case 2 : // Control can not fall through from one case label ( 'case 2 : ' ) to another } switch ( 2 ) { case 2 : // Control can not fall through from one case label ( 'case 2 : ' ) to another }
public IEnumerable < Order > GetOpenOrders ( Guid vendorId ) { var tasks = GetAllOrders ( vendorId ) .Where ( order = > ! order.IsCancelled ) .Select ( async order = > await GetLineItems ( order ) ) .Select ( async order = > { var result = ( await order ) ; return result.GetBalance ( ) > 0M ? result : null ; } ) .Select ( async order = > await PopulateName ( await order ) ) .Select ( async order = > await PopulateAddress ( await order ) ) .ToList ( ) ; Task.WaitAll ( tasks.ToArray < Task > ( ) ) ; return tasks.Select ( t = > t.Result ) ; } private IDbConnection CreateConnection ( ) { return new SqlConnection ( `` ... '' ) ; } private IEnumerable < Order > GetAllOrders ( Guid vendorId ) { using ( var db = CreateConnection ( ) ) { return db.Query < Order > ( `` ... '' ) ; } } private async Task < Order > GetLineItems ( Order order ) { using ( var db = CreateConnection ( ) ) { var lineItems = await db.QueryAsync < LineItem > ( `` ... '' ) ; order.LineItems = await Task.WhenAll ( lineItems.Select ( async li = > await GetPayments ( li ) ) ) ; return order ; } } private async Task < LineItem > GetPayments ( LineItem lineItem ) { using ( var db = CreateConnection ( ) ) { lineItem.Payments = await db.QueryAsync < Payment > ( `` ... '' ) ; return lineItem ; } } private async Task < Order > PopulateName ( Order order ) { using ( var db = CreateConnection ( ) ) { order.Name = ( await db.QueryAsync < string > ( `` ... '' ) ) .FirstOrDefault ( ) ; return order ; } } private async Task < Order > PopulateAddress ( Order order ) { using ( var db = CreateConnection ( ) ) { order.Address = ( await db.QueryAsync < string > ( `` ... '' ) ) .FirstOrDefault ( ) ; return order ; } }
"public class CompareTestModel { public string Password { get ; set ; } [ System.Web.Mvc.Compare ( `` Password '' , ErrorMessage = `` The passwords do not match '' ) ] public string PasswordCompare { get ; set ; } } using System.Collections.Generic ; using System.ComponentModel.DataAnnotations ; using System.Web.Mvc ; public static class ModelHelper { public static void ValidateModel ( this Controller controller , object viewModel ) { controller.ModelState.Clear ( ) ; var validationContext = new ValidationContext ( viewModel , null , null ) ; var validationResults = new List < ValidationResult > ( ) ; Validator.TryValidateObject ( viewModel , validationContext , validationResults , true ) ; foreach ( var result in validationResults ) { foreach ( var name in result.MemberNames ) { controller.ModelState.AddModelError ( name , result.ErrorMessage ) ; } } } } [ Test ] public void CompareAttributeTest ( ) { // arrange var model = new CompareTestModel ( ) ; model.Password = `` password '' ; model.PasswordCompare = `` different password '' ; AccountController controller = new AccountController ( ) ; // act controller.ValidateModel ( model ) ; // assert Assert.IsFalse ( controller.ModelState.IsValid ) ; }"
"string script = @ '' using System ; using System ; // generate a warning namespace MyNamespace { public class MyClass { public void MyMethod ( ) { // uncomment the next statement to generate an error //intx = 0 ; } } } '' ; CSharpCodeProvider provider = new CSharpCodeProvider ( new Dictionary < string , string > ( ) { { `` CompilerVersion '' , `` v4.0 '' } } ) ; CompilerParameters compilerParameters = new CompilerParameters ( ) ; compilerParameters.GenerateExecutable = false ; compilerParameters.GenerateInMemory = true ; CompilerResults results = provider.CompileAssemblyFromSource ( compilerParameters , script ) ; foreach ( CompilerError error in results.Errors ) { Console.Write ( error.IsWarning ? `` Warning : `` : `` Error : `` ) ; Console.WriteLine ( error.ErrorText ) ; }"
"Unhandled Exception : System.IO.FileLoadException : Could not load file or assembly 'file : ///Z : \smcho\works\tasks\2011\ni\ng_fpgabackend\myclass.dll ' or one of its dependencies . Operation is not supported . ( Exception from HRESULT : 0x80131515 ) -- - > System.NotSupportedException : An attempt was made to load an assembly from a network location which would have caused the assembly to be sandboxed in previous versions of the .NET Framework . This release of the .NET Framework does not enable CAS policy by default , so this load maybe dangerous . If this load is not intended to sandbox the assembly , please enable the loadFromRemoteSources switch.See http : //go.microsoft.com/fwlink/ ? LinkId=155569 for more information . < configuration > < runtime > < loadFromRemoteSources enabled= '' true '' / > < /runtime > < /configuration >"
"public class UserManager : UserManager < Login > { public UserManager ( IUserStore < Login > store , IOptions < IdentityOptions > optionsAccessor , IPasswordHasher < Login > passwordHasher , IEnumerable < IUserValidator < Login > > userValidators , IEnumerable < IPasswordValidator < Login > > passwordValidators , ILookupNormalizer keyNormalizer , IdentityErrorDescriber errors , IServiceProvider services , ILogger < UserManager < Login > > logger ) : base ( store , optionsAccessor , passwordHasher , userValidators , passwordValidators , keyNormalizer , errors , services , logger ) { // noop } public override bool SupportsUserSecurityStamp = > true ; public override async Task < string > GetSecurityStampAsync ( Login login ) { return await Task.FromResult ( `` MyToken '' ) ; } public override async Task < IdentityResult > UpdateSecurityStampAsync ( Login login ) { return await Task.FromResult ( IdentityResult.Success ) ; } } public void ConfigureServices ( IServiceCollection services ) { // Add framework services . services.AddApplicationInsightsTelemetry ( Configuration ) ; services.AddSingleton ( _ = > Configuration ) ; services.AddSingleton < IUserStore < Login > , UserStore > ( ) ; services.AddSingleton < IRoleStore < Role > , RoleStore > ( ) ; services.AddIdentity < Login , Role > ( o = > { o.Password.RequireDigit = false ; o.Password.RequireLowercase = false ; o.Password.RequireUppercase = false ; o.Password.RequiredLength = 6 ; o.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays ( 365 ) ; o.Cookies.ApplicationCookie.SlidingExpiration = true ; o.Cookies.ApplicationCookie.AutomaticAuthenticate = true ; } ) .AddUserStore < UserStore > ( ) .AddUserManager < UserManager > ( ) .AddRoleStore < RoleStore > ( ) .AddRoleManager < RoleManager > ( ) .AddDefaultTokenProviders ( ) ; services.AddScoped < SignInManager < Login > , SignInManager < Login > > ( ) ; services.AddScoped < UserManager < Login > , UserManager < Login > > ( ) ; services.Configure < AuthorizationOptions > ( options = > { options.AddPolicy ( `` Admin '' , policy = > policy.Requirements.Add ( new AdminRoleRequirement ( new RoleRepo ( Configuration ) ) ) ) ; options.AddPolicy ( `` SuperUser '' , policy = > policy.Requirements.Add ( new SuperUserRoleRequirement ( new RoleRepo ( Configuration ) ) ) ) ; options.AddPolicy ( `` DataIntegrity '' , policy = > policy.Requirements.Add ( new DataIntegrityRoleRequirement ( new RoleRepo ( Configuration ) ) ) ) ; } ) ; services.Configure < FormOptions > ( x = > x.ValueCountLimit = 4096 ) ; services.AddScoped < IPasswordHasher < Login > , PasswordHasher > ( ) ; services.AddDistributedMemoryCache ( ) ; services.AddSession ( ) ; services.AddMvc ( ) ; // repos InjectRepos ( services ) ; // services InjectServices ( services ) ; } public void Configure ( IApplicationBuilder app , IHostingEnvironment env , ILoggerFactory loggerFactory ) { loggerFactory.AddConsole ( Configuration.GetSection ( `` Logging '' ) ) ; loggerFactory.AddDebug ( ) ; app.UseApplicationInsightsRequestTelemetry ( ) ; if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; app.UseDatabaseErrorPage ( ) ; app.UseBrowserLink ( ) ; } else { app.UseExceptionHandler ( `` /home/error '' ) ; } app.UseStatusCodePages ( ) ; app.UseStaticFiles ( ) ; app.UseSession ( ) ; app.UseIdentity ( ) ; app.UseMiddleware ( typeof ( ErrorHandlingMiddleware ) ) ; app.UseMiddleware ( typeof ( RequestLogMiddleware ) ) ; app.UseMvc ( routes = > { routes.MapRoute ( name : `` default '' , template : `` { controller=Home } / { action=Index } / { id ? } '' ) ; } ) ; }"
"public class IndexModel : PageModel { public IActionResult OnGet ( ) { return RedirectToPage ( `` ./Registrations/Index '' ) ; } } public class IndexModel : PageModel { int pageSize = 30 ; private readonly RegistrationAdmin.PostgresDbContext _context ; public IndexModel ( RegistrationAdmin.PostgresDbContext context ) { _context = context ; } public PaginatedList < Registration > Registration { get ; set ; } public async Task OnGetAsync ( int pageIndex = 1 ) { IQueryable < Registration > registrations = _context.Registrations .Include ( r = > r.ContactPerson ) .Include ( r = > r.Badge ) .OrderByDescending ( r = > r.RegistrationId ) ; this.Registration = await PaginatedList < Registration > . CreateAsync ( registrations.AsNoTracking ( ) , pageIndex , pageSize ) ; } } Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware [ 1 ] An unhandled exception has occurred while executing the request.System.InvalidOperationException : No page named './Registrations/Index ' matches the supplied values . at Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor.ExecuteAsync ( ActionContext context , RedirectToPageResult result ) at Microsoft.AspNetCore.Mvc.RedirectToPageResult.ExecuteResultAsync ( ActionContext context ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync ( IActionResult result ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync [ TFilter , TFilterAsync ] ( ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow ( ResultExecutedContext context ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext [ TFilter , TFilterAsync ] ( State & next , Scope & scope , Object & state , Boolean & isCompleted ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters ( ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter ( ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow ( ResourceExecutedContext context ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next ( State & next , Scope & scope , Object & state , Boolean & isCompleted ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync ( ) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync ( ) at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke ( HttpContext httpContext ) at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke ( HttpContext context ) at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke ( HttpContext context )"
"protected void click_handler ( object sender , EventArgs e ) { Thread worker = new Thread ( new ThreadStart ( thread_function ) ) ; worker.Start ( ) ; } protected void thread_function ( ) { int i = 0 ; while ( true ) { Textbox.Text = i.ToString ( ) ; i++ ; } }"
"listView1 = new ListView { View = System.Windows.Forms.View.Details , HeaderStyle = ColumnHeaderStyle.None } ; listView1.Columns.Add ( String.Empty , -2 , HorizontalAlignment.Left ) ;"
static void Main ( ) { for ( int i = 0 ; i < 10 ; i++ ) { bool flag = false ; new Thread ( delegate ( ) { DelegateDisplayIt ( flag ) ; } ) .Start ( ) ; var parameterizedThread = new Thread ( ParameterizedDisplayIt ) ; parameterizedThread.Start ( flag ) ; flag = true ; } Console.ReadKey ( ) ; } private static void DelegateDisplayIt ( object flag ) { if ( ( bool ) flag ) Console.WriteLine ( `` DelegateDisplayIt '' ) ; } private static void ParameterizedDisplayIt ( object flag ) { if ( ( bool ) flag ) Console.WriteLine ( `` ParameterizedDisplayIt '' ) ; }
"[ Test ] public void Attack_TargetWith3Damage_CausesAttackerToDeal3DamageToTarget ( ) { var realAttacker = CreateCreature ( damage : 3 ) ; var wrappedAttacker = A.Fake < ICreature > ( x = > x.Wrapping ( realAttacker ) ) ; var target = A.Fake < ICreature > ( ) ; wrappedAttacker.Attack ( target ) ; A.CallTo ( ( ) = > wrappedAttacker.DealDamage ( target , 3 ) ) .MustHaveHappened ( ) ; }"
"var q = from elem in collection where someCondition ( elem ) select elem ; var q = collection.Where ( elem = > someCondition ( elem ) ) ; var q = collection.Where ( ( elem , index ) = > someCondition ( elem , index ) ) ;"
"public class CustomUserData : Attribute { public CustomUserData ( object aUserData ) { UserData = aUserData ; } public object UserData { get ; set ; } } public static class EnumExtensions { public static TAttribute GetAttribute < TAttribute > ( this Enum aValue ) where TAttribute : Attribute { Type type = aValue.GetType ( ) ; string name = Enum.GetName ( type , aValue ) ; return type.GetField ( name ) .GetCustomAttributes ( false ) .OfType < TAttribute > ( ) .SingleOrDefault ( ) ; } public static object GetCustomUserData ( this Enum aValue ) { CustomUserData userValue = GetAttribute < CustomUserData > ( aValue ) ; return userValue ! = null ? userValue.UserData : null ; } } public static class ParameterDisplayModeEnumListHelper { public static List < ParameterDisplayModeEnum > FromDatabase ( string aDisplayModeString ) { //Default behaviour List < ParameterDisplayModeEnum > result = new List < ParameterDisplayModeEnum > ( ) ; //Split the string list into a list of strings List < string > listOfDisplayModes = new List < string > ( aDisplayModeString.Split ( ' , ' ) ) ; //Iterate the enum looking for matches in the list foreach ( ParameterDisplayModeEnum displayModeEnum in Enum.GetValues ( typeof ( ParameterDisplayModeEnum ) ) ) { if ( listOfDisplayModes.FindIndex ( item = > item == ( string ) displayModeEnum.GetCustomUserData ( ) ) > = 0 ) { result.Add ( displayModeEnum ) ; } } return result ; } public static string ToDatabase ( List < ParameterDisplayModeEnum > aDisplayModeList ) { string result = string.Empty ; foreach ( ParameterDisplayModeEnum listItem in aDisplayModeList ) { if ( result ! = string.Empty ) result += `` , '' ; result += listItem.GetCustomUserData ( ) ; } return result ; } } public static class EnumListHelper < TEnum > { public static List < TEnum > FromDatabase ( string aDisplayModeString ) { //Default behaviour List < TEnum > result = new List < TEnum > ( ) ; //Split the string list into a list of strings List < string > listOfDisplayModes = new List < string > ( aDisplayModeString.Split ( ' , ' ) ) ; //Iterate the enum looking for matches in the list foreach ( TEnum displayModeEnum in Enum.GetValues ( typeof ( TEnum ) ) ) { if ( listOfDisplayModes.FindIndex ( item = > item == ( string ) displayModeEnum.GetCustomUserData ( ) ) > = 0 ) { result.Add ( displayModeEnum ) ; } } return result ; } public static string ToDatabase ( List < TEnum > aDisplayModeList ) { string result = string.Empty ; foreach ( TEnum listItem in aDisplayModeList ) { if ( result ! = string.Empty ) result += `` , '' ; result += listItem.GetCustomUserData ( ) ; } return result ; } }"
"using System ; ... using System.Security.Principal ; namespace dvvWeb.Hubs { public class ChartHub : Hub { CancellationTokenSource tokenSource ; CancellationToken ct ; public void Start ( string serverName , string dbName , string numberOfPoints , string pollingFrequency ) { ConfigModel config = new ConfigModel ( ) ; tokenSource = new CancellationTokenSource ( ) ; ct = tokenSource.Token ; config.Servername = HttpUtility.UrlDecode ( serverName ) ; config.DbName = HttpUtility.UrlDecode ( dbName ) ; config.Preferences.NumberOfPoints = int.Parse ( numberOfPoints ) ; config.Preferences.PollingFrequency = int.Parse ( pollingFrequency ) ; dvvGraphingModel graphingModel = new dvvGraphingModel ( ) ; dvvGraphingHelper graphingHelper = new dvvGraphingHelper ( graphingModel , config.Servername , config.DbName ) ; graphingModel = graphingHelper.Tick ( config.Preferences ) ; var identity = WindowsIdentity.GetCurrent ( ) ; Task.Run ( ( ) = > workItemAsync ( ct , graphingModel , graphingHelper , config , identity ) ) ; } public void Stop ( ) { tokenSource.Cancel ( ) ; } private async Task < CancellationToken > workItemAsync ( CancellationToken ct , dvvGraphingModel graphingModel , dvvGraphingHelper graphingHelper , ConfigModel configModel , WindowsIdentity identity ) { await addDataAsync ( ct , graphingModel , graphingHelper , configModel , identity ) ; return ct ; } private async Task < CancellationToken > addDataAsync ( CancellationToken ct , dvvGraphingModel graphingModel , dvvGraphingHelper graphingHelper , ConfigModel configModel , WindowsIdentity identity ) { try { while ( ! ct.IsCancellationRequested ) { identity.Impersonate ( ) ; Clients.Caller.addPointToChart ( JsonConvert.SerializeObject ( graphingModel ) ) ; System.Threading.Thread.Sleep ( configModel.Preferences.PollingFrequency * 1000 ) ; graphingModel = graphingHelper.Tick ( configModel.Preferences ) ; } } catch ( TaskCanceledException tce ) { Trace.TraceError ( `` Caught TaskCanceledException - signaled cancellation `` + tce.Message ) ; } return ct ; } } }"
"var allCultures = CultureInfo.GetCultures ( CultureTypes.AllCultures ) ; var allLetters = `` ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 '' ; var allLettersCount = allLetters.Length ; foreach ( var culture in allCultures ) { Thread.CurrentThread.CurrentCulture = culture ; Thread.CurrentThread.CurrentUICulture = culture ; var matched = string.Empty ; foreach ( var m in Regex.Matches ( allLetters , `` [ A-Za-z0-9 ] '' , RegexOptions.IgnoreCase ) ) matched += m ; var count = matched.Length ; if ( count ! = allLettersCount ) Console.WriteLine ( `` Culture ' { 0 } ' - { 1 } missing ; Matched : { 2 } '' , culture.Name , ( allLettersCount - count ) .ToString ( ) , matched ) ; } Culture 'az ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'az-Cyrl ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'az-Cyrl-AZ ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'az-Latn ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'az-Latn-AZ ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'tr ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Culture 'tr-TR ' - 1 missing ; Matched : ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
"private void Printdoc_PrintPage ( object sender , System.Drawing.Printing.PrintPageEventArgs e ) { try { qbcDataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells ; // set the left margin of the document to be printed int leftMargin = e.MarginBounds.Left ; // set the top margin of the document to be printed int topMargin = e.MarginBounds.Top ; // variable to determine if more pages are to be printed bool printMore = false ; // temp width int tmpWidth = 0 ; // for the first page to print , set the cell width and header height if ( firstPage ) { foreach ( DataGridViewColumn gridCol in qbcDataGridView.Columns ) { tmpWidth = ( int ) ( Math.Floor ( ( double ) gridCol.Width / totalWidth * totalWidth * ( ( double ) e.MarginBounds.Width / totalWidth ) ) ) ; headerHeight = ( int ) ( e.Graphics.MeasureString ( gridCol.HeaderText , gridCol.InheritedStyle.Font , tmpWidth ) .Height ) + 2 ; // save the width and height of the headers arrayLeftColumns.Add ( leftMargin ) ; arrayColWidths.Add ( tmpWidth ) ; leftMargin += tmpWidth ; } } // loop until all of the grid rows get printed while ( row < = qbcDataGridView.Rows.Count - 1 ) { DataGridViewRow gridRow = qbcDataGridView.Rows [ row ] ; // set the cell height cellHeight = gridRow.Height + 5 ; int count = 0 ; // check to see if the current page settings allow more rows to print if ( topMargin + cellHeight > = e.MarginBounds.Height + e.MarginBounds.Top ) { newPage = true ; firstPage = false ; printMore = true ; break ; } else { if ( newPage ) { // draw the header e.Graphics.DrawString ( `` QBC Directory '' , new Font ( qbcDataGridView.Font , FontStyle.Bold ) , Brushes.Black , e.MarginBounds.Left , e.MarginBounds.Top - e.Graphics.MeasureString ( `` QBC Directory '' , new Font ( qbcDataGridView.Font , FontStyle.Bold ) , e.MarginBounds.Width ) .Height - 13 ) ; // set the data ( now ) and the current time String date = DateTime.Now.ToLongDateString ( ) + `` `` + DateTime.Now.ToShortTimeString ( ) ; // draw the date on the print document e.Graphics.DrawString ( date , new Font ( qbcDataGridView.Font , FontStyle.Bold ) , Brushes.Black , e.MarginBounds.Left + ( e.MarginBounds.Width - e.Graphics.MeasureString ( date , new Font ( qbcDataGridView.Font , FontStyle.Bold ) , e.MarginBounds.Width ) .Width ) , e.MarginBounds.Top - e.Graphics.MeasureString ( `` QBC Directory '' , new Font ( new Font ( qbcDataGridView.Font , FontStyle.Bold ) , FontStyle.Bold ) , e.MarginBounds.Width ) .Height - 13 ) ; // draw the column headers topMargin = e.MarginBounds.Top ; foreach ( DataGridViewColumn gridCol in qbcDataGridView.Columns ) { if ( ! string.IsNullOrEmpty ( gridCol.HeaderText ) ) { // header color e.Graphics.FillRectangle ( new SolidBrush ( Color.LightGray ) , new Rectangle ( ( int ) arrayLeftColumns [ count ] , topMargin , ( int ) arrayColWidths [ count ] , headerHeight ) ) ; // header text box e.Graphics.DrawRectangle ( Pens.Black , new Rectangle ( ( int ) arrayLeftColumns [ count ] , topMargin , ( int ) arrayColWidths [ count ] , headerHeight ) ) ; // header string e.Graphics.DrawString ( gridCol.HeaderText , gridCol.InheritedStyle.Font , new SolidBrush ( gridCol.InheritedStyle.ForeColor ) , new RectangleF ( ( int ) arrayLeftColumns [ count ] , topMargin , ( int ) arrayColWidths [ count ] , headerHeight ) , string_format ) ; } else { break ; } count++ ; } newPage = false ; topMargin += headerHeight ; } count = 0 ; // draw the column 's contents foreach ( DataGridViewCell gridCell in gridRow.Cells ) { if ( gridCell.Value ! = null ) { if ( ! string.IsNullOrEmpty ( gridCell.Value.ToString ( ) ) ) { e.Graphics.DrawString ( gridCell.Value.ToString ( ) , gridCell.InheritedStyle.Font , new SolidBrush ( gridCell.InheritedStyle.ForeColor ) , new RectangleF ( ( int ) arrayLeftColumns [ count ] , topMargin , ( int ) arrayColWidths [ count ] , cellHeight ) , string_format ) ; } else { break ; } } else { break ; } // draw the borders for the cells e.Graphics.DrawRectangle ( Pens.Black , new Rectangle ( ( int ) arrayLeftColumns [ count ] , topMargin , ( int ) arrayColWidths [ count ] , cellHeight ) ) ; count++ ; } } row++ ; topMargin += cellHeight ; // if more lines exist , print another page if ( printMore ) { e.HasMorePages = true ; } else { e.HasMorePages = false ; } } } catch ( Exception ex ) { MessageBox.Show ( ex.Message , `` Error '' , MessageBoxButtons.OK , MessageBoxIcon.Error ) ; } } private void MenuViewMembers_Click ( object sender , EventArgs e ) { qbcDataGridView.Font = new Font ( qbcDataGridView.Font.FontFamily , 10 ) ; qbcDataGridView.Location = new Point ( 30 , 100 ) ; qbcDataGridView.Size = new Size ( 1500 , 500 ) ; dbConn.Open ( ) ; DataTable dt = new DataTable ( ) ; DbAdapter = new OleDbDataAdapter ( `` select ID , household_head , birthday , phone , email , address , status , spouse , spouse_birthday , spouse_email , anniversary , spouse_status , '' + `` child1 , child1_birthday , child1_email , child2 , child2_birthday , child3_birthday , child4 , child4_birthday , child4_email , child5 , child5_birthday , child5_email , '' + `` child6 , child6_birthday , child6_email , child7 , child7_birthday , child7_email from members '' , dbConn ) ; DbAdapter.Fill ( dt ) ; qbcDataGridView.DataSource = dt ; qbcDataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells ; qbcDataGridView.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells ; qbcDataGridView.DefaultCellStyle.WrapMode = DataGridViewTriState.True ; dbConn.Close ( ) ; Controls.Add ( qbcDataGridView ) ; }"
Task.Factory.StartNew ( ( ) = > { foreach ( string value in blockingCollection.GetConsumingEnumerable ( ) ) { Console.WriteLine ( value ) ; } } ) ;
public static Payment Retrieve ( int id ) { var t = repository.Retrieve ( id ) ; //the above line returns a tblPayment object if ( t ! = null ) return new Payment ( t ) ; return null ; } public static Payment Retrieve ( tblPayment tblPayment ) { return new Payment ( tblPayment ) ; }
xr.Settings.ValidationFlags |= XmlSchemaValidationFlags.ReportValidationWarnings ;
a:5 : { s:7 : '' request '' ; s:14 : '' 94.190.179.118 '' ; s:6 : '' status '' ; i:206 ; s:12 : '' currencyCode '' ; s:3 : '' BGL '' ; }
"SqlCommand command = new SqlCommand ( @ '' sys.sp_detach_db 'DBname ' '' , conn ) ; bool DetachBackup ( string backupDBName ) { string connectionString = ConfigurationManager.ConnectionStrings [ `` ConnectionString '' ] .ConnectionString ; var builder = new SqlConnectionStringBuilder ( connectionString ) ; string serverName = builder.DataSource ; string dbName = builder.InitialCatalog ; try { Server smoServer = new Server ( serverName ) ; smoServer.DetachDatabase ( backupDBName + DateTime.Now.ToString ( `` yyyyMMdd '' ) , false ) ; return true ; } catch ( Exception ex ) { MessageBox.Show ( ex.ToString ( ) ) ; return false ; } }"
"public static object [ ] ToArray ( int ID ) { return new object [ 4 ] ; } // create method Type arrayType = typeof ( object [ ] ) ; Type intType = typeof ( int ) ; DynamicMethod dm = new DynamicMethod ( methodName , arrayType , new Type [ ] { intType } ) ; ILGenerator il = dm.GetILGenerator ( ) ; // create the array -- object [ ] il.Emit ( OpCodes.Ldc_I4 , 4 ) ; il.Emit ( OpCodes.Newarr , typeof ( object ) ) ; il.Emit ( OpCodes.Stloc_0 ) ; // return the array il.Emit ( OpCodes.Ldloc_0 ) ; il.Emit ( OpCodes.Ret ) ; return dm ; object result = dm.Invoke ( null , new object [ ] { 1 } ) ;"
qwe asd ... _ qwe _ qwe asd.._
class Foo { ... } class Bar { public Foo FooBar { get ; set ; } } void Test ( ) { var fixture = new Fixture ( ) ; fixture.Customize < Foo > ( x = > x.FromSeed ( TestFooFactory ) ) ; var fooWithoutSeed = fixture.Create < Foo > ( ) ; var fooWithSeed = fixture.Create < Foo > ( new Foo ( ) ) ; var bar = fixture.Create < Bar > ( ) ; //error occurs here } Foo TestFooFactory ( Foo seed ) { //do something with seed ... return new Foo ( ) ; }
public class Person { public int Id { get ; set ; } public string FirstName { get ; set ; } ... } public class Person : PropertyChangedBase { public int Id { get ; set ; } private string _firstName ; public string FirstName { get { return _firstName ; } set { _firstName = value ; NotifyOfPropertyChange ( ( ) = > FirstName ) ; } } ... }
"// in javascript projectvar string1 = ... ; var string2 = ... ; var string3 = ... ; var result = MyLibrary.MyNamespace.MyClass.foo ( [ string1 , string2 , string3 ] ) ; // in C # projectpublic sealed class MyClass { public static string Foo ( string [ ] strings ) { // do stuff ... } } public static string Foo ( object [ ] strings ) { ..."
REST Controller -- Command+DTO -- > Command Handler -- DTO -- > Domain -- ( Event+DTO ) -- > Event Handler
"`` MyClass '' : { `` Value1 '' : 1 , `` Value2 '' : [ ] } public class MyClass { public int Value1 { get ; set ; } public int [ ] Value2 { get ; set ; } } public void ConfigureServices ( IServiceCollection services ) { services.AddOptions ( ) ; services.Configure < MyClass > ( Configuration.GetSection ( `` MyClass '' ) ) ; services.AddSingleton < AService > ( ) ; services.AddMvc ( ) ; } public FeedbackRetrievalService ( IOptions < MyClass > myclass ) { _myclass = myclass ; }"
"string srRegisterDate = `` 25.07.2009 00:00:00 '' CultureInfo culture = new CultureInfo ( `` en-US '' ) ; srRegisterDate = String.Format ( `` { 0 : dddd , MMMM d , yyyy } '' , Convert.ToDateTime ( srRegisterDate ) , culture ) ;"
"public class VideosController : ApiController { public HttpResponseMessage Get ( ) { var response = Request.CreateResponse ( ) ; response.Content = new PushStreamContent ( WriteToStream , new MediaTypeHeaderValue ( `` video/x-flv '' ) ) ; return response ; } private async Task WriteToStream ( Stream arg1 , HttpContent arg2 , TransportContext arg3 ) { //I think metadata needs to be written here but not sure how Startup.AddSubscriber ( arg1 ) ; await Task.Yield ( ) ; } } while ( true ) { bytes = new byte [ 8024000 ] ; int bytesRec = handler.Receive ( bytes ) ; foreach ( var subscriber in Startup.Subscribers.ToList ( ) ) { var theSubscriber = subscriber ; try { await theSubscriber.WriteAsync ( bytes , 0 , bytesRec ) ; } catch { Startup.Subscribers.Remove ( theSubscriber ) ; } } }"
public class Model { public Int32 ? Result { get ; set ; } } Model model = new Model ( ) ; Int32 result = model.Result.Value ; Int32 result = model.Result.HasValue ? model.Result.Value : 0 ;
"bool result ; if ( bool.TryParse ( `` false '' , out result ) & & result ) { Console.WriteLine ( result ) ; } bool result ; if ( bool.TryParse ( `` tRue '' , out result ) & & result ) { Console.WriteLine ( result ) ; }"
"< ContentControl Content= '' { Binding GeneralInvoiceTypes , ValidatesOnDataErrors=True } '' Margin= '' 0,0,5,0 '' / > < DataTemplate DataType= '' { x : Type ViewModels : MultipleOptionsViewModel } '' > < GroupBox Header= '' { Binding Title } '' > < ItemsControl ItemsSource= '' { Binding Options } '' / > < /GroupBox > < /DataTemplate > < DataTemplate DataType= '' { x : Type ViewModels : OptionViewModel } '' > < CheckBox IsChecked= '' { Binding IsChecked } '' Content= '' { Binding Name } '' Margin= '' 6,3,3,0 '' / > < /DataTemplate > < Style TargetType= '' { x : Type ContentControl } '' > < Style.Triggers > < Trigger Property= '' Validation.HasError '' Value= '' true '' > < Setter Property= '' ToolTip '' Value= '' { Binding RelativeSource= { x : Static RelativeSource.Self } , Path= ( Validation.Errors ) [ 0 ] .ErrorContent } '' / > < /Trigger > < /Style.Triggers > < Setter Property= '' Validation.ErrorTemplate '' > < Setter.Value > < ControlTemplate > < Grid > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' 90* '' / > < ColumnDefinition Width= '' 20 '' / > < /Grid.ColumnDefinitions > < Border BorderBrush= '' Red '' BorderThickness= '' 1 '' CornerRadius= '' 2.75 '' Grid.Column= '' 0 '' > < AdornedElementPlaceholder Grid.Column= '' 0 '' / > < /Border > < TextBlock Foreground= '' Red '' Grid.Column= '' 1 '' Margin= '' 0 '' FontSize= '' 12 '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Left '' x : Name= '' txtError '' > * < /TextBlock > < /Grid > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style >"
"public class filterParm { public int age { get ; set ; } public string name { get ; set ; } } var parms = new List < filterParm > { new filterParm { age = 22 , `` phil '' } , new filterParm { age = 19 , `` dave '' } , new filterParm { age = 31 , `` nick '' } } ; private _dbSet < user > Users { get ; set ; } public List < user > CustomFilter ( List < filterParm > parms ) { IQueryable < TEntity > query = _dbSet ; if ( parms.Count > 0 ) { foreach ( var parm in parms ) { query = query.Where ( u = > u.Age == parm.Age & & u.Name == parm.Name ) ; } } return query.ToList ( ) ; } private _dbSet < user > Users { get ; set ; } public List < user > CustomFilter ( List < filterParm > parms ) { IQueryable < TEntity > query = _dbSet ; if ( parms.Count > 0 ) { query = query.Where ( u = > u.Age == parms [ 0 ] .Age & & u.Name == parms [ 0 ] .Name ) ; for ( int i = 1 ; i < parms.Count ; i++ ) { var parm = parms [ i ] ; query = query.Union ( DbSet.Where ( u = > u.Age == parm.Age & & u.Name == parm.Name ) ) ; } } return query.ToList ( ) ; }"
cd desktop $ null > > newfile.txt using ( PowerShell PowerShellInstance = PowerShell.Create ( ) ) { PowerShellInstance.AddScript ( `` cd desktop ; $ null > > newfile.txt '' ) ; PowerShellInstance.Invoke ( ) ; } PowerShellInstance.AddScript ( `` $ null > > C : \\users\\me\\Desktop\\newfile.txt '' ) ;
public interface Command { void Execute ( ) ; } public interface Command < T > { T Execute ( ) ; }
"< asp : GridView ID= '' GridView1 '' runat= '' server '' AutoGenerateColumns= '' False '' > < Columns > < asp : TemplateField > < ItemTemplate > < asp : CheckBox ID= '' check '' runat= '' server '' / > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField > < ItemTemplate > < asp : HiddenField ID= '' hdfId '' runat = '' server '' Value= ' < % # Eval ( `` Id '' ) % > ' / > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField > < ItemTemplate > < asp : HiddenField ID= '' hdfClssIndex '' runat = '' server '' Value= ' < % # Eval ( `` ClassIndex '' ) % > ' / > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField > < ItemTemplate > < asp : Label ID= '' lblFileName '' runat = '' server '' Text= ' < % # Eval ( `` FileName '' ) % > ' / > < /ItemTemplate > < /asp : TemplateField > < /Columns > < /asp : GridView > < asp : Button ID= '' Button1 '' runat= '' server '' onclick= '' Button1_Click '' Text= '' Send Request '' / > protected void Button1_Click ( object sender , EventArgs e ) { foreach ( GridViewRow row in GridView1.Rows ) { var check = row.FindControl ( `` check '' ) as CheckBox ; if ( check.Checked ) { int Id = Convert.ToInt32 ( row.Cells [ 1 ] .Text ) ; //some logic follws here } } }"
public EventHandler SomeEvent = delegate { } ; using System ; using System.ComponentModel ; [ assembly : CLSCompliant ( true ) ] namespace TestLibrary1 { public abstract class Class1 { public event PropertyChangedEventHandler PropertyChanged = delegate { } ; } public class Class2 : Class1 { // this will cause a CA1061 warning public event EventHandler SelectionCancelled = delegate { } ; } public class Class3 : Class1 { // this will not cause a CA1061 warning public event EventHandler SelectionCancelled ; } }
"object obj = ... . ; // type and value unknown at compile timeType t = obj.GetType ( ) ; if ( t.IsPointer ) { void* ptr = Pointer.Unbox ( obj ) ; // I can obtain its ( the object 's ) bytes with : byte [ ] buffer = new byte [ Marshal.SizeOf ( t ) ] ; Marshal.Copy ( ( IntPtr ) ptr , buffer , 0 , buffer.Length ) ; // but how can I get the value represented by the byte array 'buffer ' ? // or how can I get the value of *ptr ? // the following line obviously does n't work : object val = ( object ) *ptr ; // error CS0242 ( obviously ) }"
"public class Test { private static System.Action < int > del ; public static void test ( ) { int i = 100500 ; del = a = > System.Console.WriteLine ( `` param = { 0 } , i = { 1 } '' , a , i ) ; del ( 1 ) ; i = 10 ; del ( 1 ) ; } public static void Main ( ) { test ( ) ; } } param = 1 , i = 100500param = 1 , i = 10 public class Test { private static System.Action < int > del ; public static void test ( ) { int i = 100500 ; del = a = > System.Console.WriteLine ( `` param = { 0 } , i = { 1 } '' , a , i ) ; } public static void Main ( ) { test ( ) ; del ( 1 ) ; } } param = 1 , i = 100500"
Application.OpenURL ( `` http : //www.google.co.uk '' ) ;
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading ; using System.Net.Mail ; using System.Web.Hosting ; namespace Comet { public class CometCore : IRegisteredObject { # region Globals private static CometCore m_instance = null ; private List < CometRequest > m_requests = new List < CometRequest > ( ) ; private int m_timeout = 120000 ; //Default - 20 minutes ; # endregion # region Constructor ( s ) public CometCore ( ) { HostingEnvironment.RegisterObject ( this ) ; } # endregion # region Properties /// < summary > /// Singleton instance of the class /// < /summary > public static CometCore Instance { get { if ( m_instance == null ) m_instance = new CometCore ( ) ; return m_instance ; } } /// < summary > /// In milliseconds or -1 for no timeout . /// < /summary > public int Timeout { get { return m_timeout ; } set { m_timeout = value ; } } # endregion # region Public Methods /// < summary > /// Pauses the thread until an update command with the same id is sent . /// < /summary > /// < param name= '' id '' > < /param > public void WaitForUpdates ( string id ) { //Add this request ( and thread ) to the list and then make it wait . CometRequest request ; m_requests.Add ( request = new CometRequest ( id ) ) ; if ( m_timeout > -1 ) request.MRE.WaitOne ( m_timeout ) ; else request.MRE.WaitOne ( ) ; } /// < summary > /// Un-pauses the threads with this id . /// < /summary > /// < param name= '' id '' > < /param > public void SendUpdate ( string id ) { for ( int i = 0 ; i < m_requests.Count ; i++ ) { if ( m_requests [ i ] .ID.Equals ( id ) ) { m_requests [ i ] .MRE.Set ( ) ; m_requests.RemoveAt ( i ) ; i -- ; } } } # endregion public void Stop ( bool immediate ) { //release all threads for ( int i = 0 ; i < m_requests.Count ; i++ ) { m_requests [ i ] .MRE.Set ( ) ; m_requests.RemoveAt ( i ) ; i -- ; } } } public class CometRequest { public string ID = null ; public ManualResetEvent MRE = new ManualResetEvent ( false ) ; public CometRequest ( string pID ) { ID = pID ; } } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Web ; using System.Web.Services ; using Comet ; namespace CometTest { /// < summary > /// Summary description for Chat /// < /summary > [ WebService ( Namespace = `` http : //tempuri.org/ '' ) ] [ WebServiceBinding ( ConformsTo = WsiProfiles.BasicProfile1_1 ) ] [ System.ComponentModel.ToolboxItem ( false ) ] // To allow this Web Service to be called from script , using ASP.NET AJAX , uncomment the following line . [ System.Web.Script.Services.ScriptService ] public class Chat : System.Web.Services.WebService { [ WebMethod ] public string ReceiveChat ( ) { return ChatData.Instance.GetLines ( ) ; } [ WebMethod ] public string ReceiveChat_Comet ( ) { CometCore.Instance.WaitForUpdates ( `` chat '' ) ; return ChatData.Instance.GetLines ( ) ; } [ WebMethod ] public void Send ( string line ) { ChatData.Instance.Add ( line ) ; CometCore.Instance.SendUpdate ( `` chat '' ) ; } } public class ChatData { private static ChatData m_instance = null ; private List < string > m_chatLines = new List < string > ( ) ; private const int m_maxLines = 5 ; public static ChatData Instance { get { if ( m_instance == null ) m_instance = new ChatData ( ) ; return m_instance ; } } public string GetLines ( ) { string ret = string.Empty ; for ( int i = 0 ; i < m_chatLines.Count ; i++ ) { ret += m_chatLines [ i ] + `` < br > '' ; } return ret ; } public void Add ( string line ) { m_chatLines.Insert ( 0 , line ) ; if ( m_chatLines.Count > m_maxLines ) { m_chatLines.RemoveAt ( m_chatLines.Count - 1 ) ; } } } } < % @ Page Language= '' C # '' AutoEventWireup= '' true '' CodeBehind= '' Default.aspx.cs '' Inherits= '' CometTest.Default '' % > < ! DOCTYPE html PUBLIC `` -//W3C//DTD XHTML 1.0 Transitional//EN '' `` http : //www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd '' > < html xmlns= '' http : //www.w3.org/1999/xhtml '' > < head runat= '' server '' > < title > < /title > < /head > < body > < form id= '' form1 '' runat= '' server '' > < asp : ScriptManager ID= '' ScriptManager1 '' runat= '' server '' > < Services > < asp : ServiceReference Path= '' ~/Chat.asmx '' / > < /Services > < /asp : ScriptManager > < div id= '' lyrChatLines '' style= '' height : 200px ; width : 300px ; border : 1px solid # cccccc ; overflow : scroll '' > < /div > < asp : Panel runat= '' server '' DefaultButton= '' cmdSend '' > < asp : UpdatePanel runat= '' server '' > < ContentTemplate > < asp : TextBox style= '' width : 220px '' runat= '' server '' ID= '' txtChat '' > < /asp : TextBox > < asp : Button runat= '' server '' ID= '' cmdSend '' Text= '' Send '' OnClick= '' cmdSend_Click '' / > < /ContentTemplate > < /asp : UpdatePanel > < /asp : Panel > < script type= '' text/javascript '' > function CometReceive ( ) { CometTest.Chat.ReceiveChat_Comet ( receive , commError , commError ) ; } function ReceiveNow ( ) { CometTest.Chat.ReceiveChat ( receive , commError , commError ) ; } function receive ( str ) { document.getElementById ( `` lyrChatLines '' ) .innerHTML = str ; setTimeout ( `` CometReceive ( ) '' , 0 ) ; } function commError ( ) { document.getElementById ( `` lyrChatLines '' ) .innerHTML = `` Communication Error ... '' ; setTimeout ( `` CometReceive ( ) '' , 5000 ) ; } setTimeout ( `` ReceiveNow ( ) '' , 0 ) ; < /script > < /form > < /body > < /html > using System ; using System.Collections.Generic ; using System.Linq ; using System.Web ; using System.Web.UI ; using System.Web.UI.WebControls ; namespace CometTest { public partial class Default : System.Web.UI.Page { protected void Page_Load ( object sender , EventArgs e ) { } protected void cmdSend_Click ( object sender , EventArgs e ) { Chat service = new Chat ( ) ; service.Send ( Request.UserHostAddress + `` > `` + txtChat.Text ) ; txtChat.Text = string.Empty ; txtChat.Focus ( ) ; } } }"
"class Class1 { volatile int state = 0 ; public int State { get { return state ; } } public Action < int > StateUpdated ; public void UpdateState ( int newState ) { state = newState ; if ( StateUpdated ! = null ) StateUpdated ( newState ) ; } } struct StateData { //some fields } class Class1 { StateData state ; public StateData State { get { return state ; } } public Action < StateData > StateUpdated ; public void UpdateState ( StateData newState ) { state = newState ; if ( StateUpdated ! = null ) StateUpdated ( newState ) ; } } public struct StateData { //some fields } public delegate void StateChangedHandler ( StateData oldState , StateData newState ) ; class Class1 { ConcurrentDictionary < string , StateData > stateCollection = new ConcurrentDictionary < string , StateData > ( ) ; public StateData ? GetState ( string key ) { StateData o ; if ( stateCollection.TryGetValue ( key , out o ) ) return o ; else return null ; } public StateChangedHandler StateUpdated ; void UpdateState ( string key , StateData o ) { StateData ? prev = null ; stateCollection.AddOrUpdate ( key , o , ( id , old ) = > { prev = old ; return o ; } ) ; if ( prev ! = null & & StateUpdated ! = null ) StateUpdated ( prev.Value , o ) ; } }"
"builder.SetCertificate ( new X509Certificate2 ( `` certificate.pfx '' , `` password '' ) ) ;"
string [ ] args var commands = args.Where ( x = > x.StartsWith ( `` - '' ) ) .ToList < String > ( ) ; commands.ForEach ( x = > { x.ToUpper ( ) } ) ; commands.ToString ( ) ;
< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < customUI xmlns= '' http : //schemas.microsoft.com/office/2009/07/customui '' onLoad= '' Ribbon_Load '' > < backstage onShow= '' Backstage_OnShow '' > < tab idMso= '' TabSave '' > < firstColumn > < taskFormGroup idMso= '' SaveGroup '' > < category idMso= '' Save '' > < task id= '' myCustomTask '' label= '' My Custom Task '' insertAfterMso= '' ButtonTaskDynamicServiceProvider '' > < group id= '' myGroupInTabSave '' label= '' Custom functionality '' helperText= '' This group contains custom functionality . `` > < primaryItem > < button id= '' myButton '' label= '' My Button '' onAction= '' CallMe '' / > < /primaryItem > < /group > < /task > < /category > < /taskFormGroup > < /firstColumn > < /tab > < /backstage > < /customUI > public void Backstage_OnShow ( object contextObject ) { // It hits this method . }
"List < empClass > objList = File.ReadAllText ( filePath ) .FromCsv < List < empClass > > ( ) ; EmpId , Employee Name , Employee Address 12 , JohnSmith,123 ABC Street public class empClass { public string EmpId ; public string Employee_Name ; public string Employee_Address ; }"
"public enum TestEnum { TestValue } public class TestClass { public TestEnum Test { get ; set ; } } [ FunctionName ( `` MyHttpTrigger '' ) ] public static IActionResult Run ( [ HttpTrigger ( AuthorizationLevel.Function , `` get '' , `` post '' , Route = null ) ] HttpRequest req , ILogger log ) { return new OkObjectResult ( new TestClass { Test = TestEnum.TestValue } ) ; } func init MyFunctionProjcd MyFunctionProjfunc new -- name MyHttpTrigger -- template `` HttpTrigger '' > func -- version3.0.1975 > dotnet -- version3.1.100 builder.Services.AddSingleton < IActionResultExecutor < ObjectResult > , TestExecutor > ( ) ; class MvcOptionsConfiguration : IPostConfigureOptions < MvcOptions > { ... } public class Startup : FunctionsStartup { public override void Configure ( IFunctionsHostBuilder builder ) { builder.Services.ConfigureOptions < MvcOptionsConfiguration > ( ) ; } } options.OutputFormatters.RemoveType < NewtonsoftJsonOutputFormatter > ( ) ;"
public void Foo < T > ( T bar ) where T : enum
interface IAAA { int F1 { get ; set ; } } class AAA1 { public int F1 { get ; set ; } public int F2 { get ; set ; } } class AAA2 : IAAA { public int F1 { get ; set ; } public int F2 { get ; set ; } } Console.WriteLine ( `` AAA1 which does not implement IAAA '' ) ; foreach ( var prop in typeof ( AAA1 ) .GetProperties ( ) ) { var virtualOrNot = prop.GetGetMethod ( ) .IsVirtual ? `` '' : `` not '' ; Console.WriteLine ( $ @ '' { prop.Name } is { virtualOrNot } virtual '' ) ; } Console.WriteLine ( `` AAA2 which implements IAAA '' ) ; foreach ( var prop in typeof ( AAA2 ) .GetProperties ( ) ) { var virtualOrNot = prop.GetGetMethod ( ) .IsVirtual ? `` '' : `` not '' ; Console.WriteLine ( $ '' { prop.Name } is { virtualOrNot } virtual '' ) ; } AAA1 which does not implement IAAAF1 is not virtualF2 is not virtualAAA2 which implements IAAAF1 is virtualF2 is not virtual
switch ( boolVariable ) { case false : { str = `` blahblah '' ; break ; } case true : { str = `` somethingelse '' ; break ; } default : { str = `` ughthiswouldnevergethit '' ; break ; } } if ( boolVariable ) { str = `` somethingelse '' ; } else { str = `` blahblah '' ; }
public class MyClass { public string MyClassName { get ; private set ; } public string MyClassValue { get ; private set ; } } MyClass [ ] myClasses = new MyClass [ 5 ] ; MyClass andegre = myClasses [ `` andegre '' ] ; MyClass andegre = myClasses [ GetIndexOfOfMyClassName ( `` andegre '' ) ] ;
"class Program { static void Main ( string [ ] args ) { var k = new StandardKernel ( ) ; k.Bind < IEnumerable < int > > ( ) .ToMethod ( GetInts ) ; k.Bind < IFoo > ( ) .To < Foo > ( ) ; //Has an IEnumberable < int > constructor arg var works = k.Get < IEnumerable < int > > ( ) ; //returns the array of ints var tst = k.Get < IFoo > ( ) ; //Empty integer array is passed in by ninject ? ? ? tst.Get ( ) ; //returns an empty integer array ? ? ? ? return ; } public static int [ ] GetInts ( IContext ctx ) { return new int [ ] { 1,2,3,4,5 } ; } } public interface IFoo { IEnumerable < int > Get ( ) ; } public class Foo : IFoo { private int [ ] _vals ; public Foo ( IEnumerable < int > vals ) { _vals = vals.ToArray ( ) ; } public IEnumerable < int > Get ( ) { return _vals ; } }"
"// Example enumeratorIEnumerator < bool > ExampleFunction ( ) { SomeClass heavyObject = new SomeClass ( ) ; while ( heavyObject.Process ( ) ) { yield return true ; } if ( ! heavyObject.Success ) { yield return false ; } // In this example , we 'll never get here - what happens to the incomplete Enumerator // When does heavyObject get GC 'd ? heavyObject.DoSomeMoreStuff ( ) ; } // example call - Where does this enumerator come from ? // Is something creating it with the new keyword in the background ? IEnumerator < bool > enumerator = ExampleFunction ( ) ; while ( enumerator.MoveNext ( ) ) { if ( ! enumerator.Current ) { break ; } } // if enumerator is never used after this , does it get destroyed when the scope ends , or is it GC 'd at a later date ?"
public class ProjectService { private IProjectRepository ProjectRepo { get ; set ; } public ProjectService ( IProjectRepository projectRepo ) { ProjectRepo = projectRepo ; } public void CreateNewProject ( string name ) { IList < Project > projects = ProjectRepo.GetProjectsByName ( name ) ; if ( projects.Count > 0 ) throw new Exception ( `` Project name already exists . `` ) ; Project project = new Project ( name ) ; ProjectRepo.InsertProject ( project ) ; } } public class Project { public int ProjectID { get ; private set ; } public string Name { get ; private set ; } public Project ( string name ) { ValidateName ( name ) ; Name = name ; } private void ValidateName ( string name ) { if ( name == null || name.Equals ( string.Empty ) ) { throw new Exception ( `` Project name can not be empty or null . `` ) ; } } } public interface IProjectRepository { void InsertProject ( Project project ) ; IList < Project > GetProjectsByName ( string projectName ) ; }
class Foo { public Foo ( bool isAction ) { this.IsAction = IsAction ; } public bool IsAction { get ; private set ; } }
"public class SomeMessage { public object Something { get ; set ; } } { `` foo '' :123 } { `` foo '' : { `` $ type '' : '' Akka.Serialization.PrimitiveSurrogate , Akka '' , `` V '' : '' 123 '' , `` T '' :1 } } { `` $ type '' : '' Akka.Util.PrimitiveSurrogate , Akka '' , '' V '' : '' F123.456 '' } { `` $ '' : '' M123.456 '' }"
"namespace ConsoleApp1 { class Program { static void Main ( string [ ] args ) { } } class MyClass < T , U > where T : Something where U : AnOperation < Something > { public U GetAnOperationOfSomething ( ) { AnOperation < T > anOperation = new AnOperation < T > ( ) ; return anOperation ; // Can not implicitly convert type 'ConsoleApp1.AnOperation < T > ' to ' U ' // return ( U ) anOperation ; // Can not convert type 'ConsoleApp1.AnOperation < T > ' to ' U ' also Cast is redundant } } public class Something { } public class AnOperation < T > where T : Something { } }"
"class Dependency { public string Text { get ; } public Dependency ( string text ) = > Text = text ; } class MyMiddleware { private readonly RequestDelegate _next ; private readonly Dependency _dep1 ; private readonly Dependency _dep2 ; public MyMiddleware ( RequestDelegate next , Dependency dep1 , Dependency dep2 ) { _next = next ; _dep1 = dep1 ; _dep2 = dep2 ; } public Task InvokeAsync ( HttpContext context ) { return context.Response.WriteAsync ( _dep1.Text + _dep2.Text ) ; } } class Startup { private readonly Dependency _dep1 ; private readonly Dependency _dep2 ; public Startup ( Dependency dep1 , Dependency dep2 ) { _dep1 = dep1 ; _dep2 = dep2 ; } public void Configure ( IApplicationBuilder appBuilder ) { appBuilder.UseMiddleware < MyMiddleware > ( _dep1 , _dep2 ) ; } } public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; var dep1 = new Dependency ( `` Hello `` ) ; var dep2 = new Dependency ( `` World '' ) ; int port = 5000 ; StartWebServer ( port , dep1 , dep2 ) ; Process.Start ( $ '' http : //localhost : { port } '' ) ; } void StartWebServer ( int port , Dependency dep1 , Dependency dep2 ) { IWebHostBuilder builder = new WebHostBuilder ( ) ; builder.UseUrls ( $ '' http : //0.0.0.0 : { port } / '' ) ; builder.UseKestrel ( ) ; builder.ConfigureServices ( servicesCollection = > servicesCollection.AddSingleton ( new Startup ( dep1 , dep2 ) ) ) ; builder.UseStartup < Startup > ( ) ; IWebHost webHost = builder.Build ( ) ; var task = webHost.StartAsync ( ) ; } }"
public static class MyDict < T > { public static T Value ; }
"using System.IO ; using System.Threading.Tasks ; public class MyClass { private int count ; public async Task < int > MyReadAsync ( Stream stream , byte [ ] buffer ) { var read = await stream.ReadAsync ( buffer , 0 , buffer.Length ) .ConfigureAwait ( false ) ; this.count += read ; return read ; } } private async void OnWhatever ( object sender , EventArgs args ) { await myObject.MyReadAsync ( this.stream , this.buffer ) ; }"
Select ( foo = > new { someProp = `` hello '' + foo.id + `` / '' + foo.bar } Select ( foo = > new { someProp = `` hello '' + SqlFunctions.StringConvert ( ( double ? ) foo.id ) .Trim ( ) + `` / '' + SqlFunctions.StringConvert ( ( double ? ) foo.bar ) .Trim ( ) }
"using System ; using System.Reflection ; class Example { public static void Main ( ) { test Group = new test ( ) ; BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static ; Group.sub.a = `` allo '' ; Group.sub.b = `` lol '' ; foreach ( PropertyInfo property in Group.GetType ( ) .GetField ( `` sub '' ) .FieldType.GetProperties ( bindingFlags ) ) { string strName = property.Name ; Console.WriteLine ( strName + `` = `` + property.GetValue ( Group.sub , null ) .ToString ( ) ) ; Console.WriteLine ( `` -- -- -- -- -- -- -- - '' ) ; } } } public class test { public test2 sub = new test2 ( ) ; } public class test2 { public string a { get ; set ; } public string b { get ; set ; } } property.GetValue ( property.DeclaringType , null ) property.GetValue ( Group.GetType ( ) .GetField ( `` sub '' ) , null ) property.GetValue ( Group.GetType ( ) .GetField ( `` sub '' ) .FieldType , null )"
"class FirstClass { public SecondClass GetRelatedClass ( ) { return new SecondClass ( ) ; } public enum InnerEnum { Violated , NotViolated } } class SecondClass { public int Property { get ; set ; } public string _variable = `` Danny Demeter '' ; } void Violate ( FirstClass first ) { SecondClass second = first.GetRelatedClass ( ) ; var x = second.Property ; var y = second._variable ; var z = FirstClass.InnerEnum.Violated ; }"
"select * from promotion PJOIN PromotionsClaimed PCon PC.PromotionId = P.objectidwhere PC.userId = @ USERID public IList < Promotion > GetRewardsForUser ( string userId ) { //a list of all available promotions IList < Promotion > promos = _promotionLogic.Retrieve ( ) ; //contains a list of Promotion.objectIds for that user IList < PromotionsClaimed > promosClaimed = _promotionsClaimedLogic.RetrieveByCriteria ( t = > t.userId == userId ) ; //should return a list of the Promotion name and code for the rewards claimed by user , but a complete list of Promotion entities would be fine var selectedPromos = from promo in promos join promoClaimed in promosClaimed on promo.objectId equals promoClaimed.PromotionId select new { PromoName = promo.Name , PromoCode = promo.Code } ; return selectedPromos ; }"
"TaskFactory < Stuff > taskFactory = new TaskFactory < Stuff > ( new OrderedTaskScheduler ( ) ) ; var t1 = taskFactory.FromAsync ( ( a , s ) = > api.beginGetStuff ( a , s ) , a = > api.endGetStuff ( a ) ) ; var t2 = taskFactory.FromAsync ( ( a , s ) = > api.beginGetStuff ( a , s ) , a = > api.endGetStuff ( a ) ) ; var t3 = taskFactory.FromAsync ( ( a , s ) = > api.beginGetStuff ( a , s ) , a = > api.endGetStuff ( a ) ) ; public Task FromAsync ( IAsyncResult asyncResult , Action < IAsyncResult > endMethod , TaskCreationOptions creationOptions , TaskScheduler scheduler ) class TaskExecutionQueue { private readonly OrderedTaskScheduler _orderedTaskScheduler ; private readonly TaskFactory _taskFactory ; public TaskExecutionQueue ( OrderedTaskScheduler orderedTaskScheduler ) { _orderedTaskScheduler = orderedTaskScheduler ; _taskFactory = new TaskFactory ( orderedTaskScheduler ) ; } public Task < TResult > QueueTask < TResult > ( Func < Task < TResult > > taskGenerator ) { return _taskFactory.StartNew ( taskGenerator ) .Unwrap ( ) ; } }"
"class test { public test ( ) { _myListOfList = new List < List < double > > ( 1000000 ) ; } public void Run ( ) { for ( int i = 0 ; i < _myListOfList.Capacity ; i++ ) { _myListOfList.Add ( new List < double > ( 3 ) { i , 10*i , 100*i } ) ; //Populate the list with data } } private List < List < double > > _myListOfList ; } class test { public test ( ) { _myListOfTuple = new List < Tuple < double , double , double > > ( 1000000 ) ; } public void Run ( ) { for ( int i = 0 ; i < _myListOfTuple.Capacity ; i++ ) { _myListOfTuple.Add ( new Tuple < double , double , double > ( i , 10 * i , 100 * i ) ) ; //Populate the list with data } } private List < Tuple < double , double , double > > _myListOfTuple ; }"
interface Presenter { void onSendClicked ( ) ; } interface View { String getInput ( ) ; void showProgress ( ) ; void hideProgress ( ) ; } class PresenterImpl implements Presenter { // ... ignore other implementations void onSendClicked ( ) { String input = view.getInput ( ) ; view.showProgress ( ) ; repository.store ( input ) ; view.hideProgress ( ) ; } } class ViewImpl implements View { // ... ignore other implementations void onButtonClicked ( ) { presenter.onSendClicked ( ) ; } String getInput ( ) { return textBox.getInput ( ) ; } void showProgress ( ) { progressBar.show ( ) ; } void hideProgress ( ) { progressBar.hide ( ) ; } } interface Presenter { void saveInput ( String input ) ; } interface View { void showProgress ( ) ; void hideProgress ( ) ; } class PresenterImpl implements Presenter { // ... ignore other implementations void saveInput ( String input ) { view.showProgress ( ) ; repository.store ( input ) ; view.hideProgress ( ) ; } } class ViewImpl implements View { // ... ignore other implementations void onButtonClicked ( ) { String input = textBox.getInput ( ) ; presenter.saveInput ( intput ) ; } void showProgress ( ) { progressBar.show ( ) ; } void hideProgress ( ) { progressBar.hide ( ) ; } }
"protected override async Task OnInitializedAsync ( ) { var client = HttpFactory.CreateClient ( ) ; var token = await LocalStorage.GetItemAsync < string > ( `` authToken '' ) ; client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ( `` Bearer '' , token ) ; var response = await client.GetAsync ( `` url/WeatherForecast '' ) ; var str = await response.Content.ReadAsStringAsync ( ) ; Items = JsonConvert.DeserializeObject < IEnumerable < WeatherForecast > > ( str ) ; } private bool hasRendered ; protected override async Task OnAfterRenderAsync ( bool _ ) { if ( ! hasRendered ) return ; var client = HttpFactory.CreateClient ( ) ; var token = await LocalStorage.GetItemAsync < string > ( `` authToken '' ) ; client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ( `` Bearer '' , token ) ; var response = await client.GetAsync ( `` https : //url/WeatherForecast '' ) ; var str = await response.Content.ReadAsStringAsync ( ) ; Items = JsonConvert.DeserializeObject < IEnumerable < WeatherForecast > > ( str ) ; StateHasChanged ( ) ; hasRendered = true ; }"
"public async Task < bool > UploadToGoogleCloudStorage ( string bucketName , string token , string filePath , string contentType ) { var newObject = new Google.Apis.Storage.v1.Data.Object ( ) { Bucket = bucketName , Name = System.IO.Path.GetFileNameWithoutExtension ( filePath ) } ; var service = new Google.Apis.Storage.v1.StorageService ( ) ; try { using ( var fileStream = new FileStream ( filePath , FileMode.Open ) ) { var uploadRequest = new ObjectsResource.InsertMediaUpload ( service , newObject , bucketName , fileStream , contentType ) ; uploadRequest.OauthToken = token ; ProgressBar.Maximum = fileStream.Length ; uploadRequest.ProgressChanged += UploadProgress ; uploadRequest.ChunkSize = ( 256 * 1024 ) ; await uploadRequest.UploadAsync ( ) .ConfigureAwait ( false ) ; service.Dispose ( ) ; } } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; throw ex ; } return true ; } private void UploadProgress ( IUploadProgress progress ) { switch ( progress.Status ) { case UploadStatus.Starting : ProgressBar.Minimum = 0 ; ProgressBar.Value = 0 ; break ; case UploadStatus.Completed : System.Windows.MessageBox.Show ( `` Upload completed ! `` ) ; break ; case UploadStatus.Uploading : //Console.WriteLine ( progress.BytesSent ) ; - > This is working if I do n't call the method below . UpdateProgressBar ( progress.BytesSent ) ; break ; case UploadStatus.Failed : Console.WriteLine ( `` Upload failed `` + Environment.NewLine + progress.Exception.Message + Environment.NewLine + progress.Exception.StackTrace + Environment.NewLine + progress.Exception.Source + Environment.NewLine + progress.Exception.InnerException + Environment.NewLine + `` HR-Result '' + progress.Exception.HResult ) ; break ; } } private void UpdateProgressBar ( long value ) { Dispatcher.Invoke ( ( ) = > { this.ProgressBar.Value = value ; } ) ; }"
"public class MyClass { public MyClass ( ) { using ( BackgroundWorker _Worker = new BackgroundWorker { WorkerReportsProgress = true } ) { _Worker.DoWork += ( s , args ) = > { ... } ; } _Worker.RunWorkerAsync ( ) ; } }"
"MyEntities db = new MyEntities ( ConnString ) ; var q = from a in db.TableA join b in db.TableB on a.SomeFieldID equals b.SomeFieldID where ( a.UserID == CurrentUser & & b.MyField == Convert.ToInt32 ( MyDropDownList.SelectedValue ) ) select new { a , b } ; if ( q.Any ( ) ) { //snip } if ( db.TableA.Where ( u = > u.UserID == CurrentUser ) .Any ( ) ) { //snip }"
"[ v3_extensions ] subjectAltName = email : foo @ example.org , otherName : pkinitSan ; SEQUENCE : krb_princ_name_1 [ krb_princ_name_1 ] realm = EXP:0 , GeneralString : EXAMPLE.ORG principal_name = EXP:1 , SEQUENCE : krb_princ_seq_1 [ krb_princ_seq_1 ] name_type = EXP:0 , INTEGER:1 name_string = EXP:0 , SEQUENCE : krb_principal_1 [ krb_principal_1 ] princ0 = GeneralString : foo"
entities.Blogs.Where ( b = > b.Tags.Any ( t = > t.Name == tagName ) ) entities.Blogs.Where ( b = > b.Tags.Any ( t = > t.Name == tags [ 0 ] AND t.Name == tags [ 1 ] AND t.Name == tags [ 2 ] etc ... ... . ) )
"< Page x : Class= '' PlatformTD.MainPage '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' using : PlatformTD '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' > < Grid Background= '' { StaticResource ApplicationPageBackgroundThemeBrush } '' Name= '' LayoutRoot '' > < Canvas HorizontalAlignment= '' Stretch '' VerticalAlignment= '' Stretch '' Name= '' MainCanvas '' x : FieldModifier= '' public '' SizeChanged= '' MainCanvas_SizeChanged '' Loaded= '' MainCanvas_Loaded '' / > < /Grid > < /Page > public MainPage ( ) { this.InitializeComponent ( ) ; MainCanvas.KeyDown += MainPage_KeyDown ; MainCanvas.KeyUp += MainPage_KeyUp ; KeyDown += MainPage_KeyDown ; KeyUp += MainPage_KeyUp ; LayoutRoot.KeyDown += MainPage_KeyDown ; LayoutRoot.KeyUp += MainPage_KeyUp ; } private void MainPage_KeyUp ( object sender , KeyRoutedEventArgs e ) { // breakpoint here to catch when event fires // does stuff } private void MainPage_KeyDown ( object sender , KeyRoutedEventArgs e ) { // breakpoint here to catch when event fires // does stuff }"
"public sealed class AmpVolume : System.Attribute { public int MaxVolume { get ; set ; } public AmpVolume ( int maxvolume ) { MaxVolume = maxvolume ; } } [ AmpVolume ( 11 ) ] public class SpinalTapGuitarAmp { } [ AmpVolume ( 11 ) ] public class SpinalTapBassAmp { } [ AmpVolume ( 10 ) ] public class RegularAmp { } get { return ( object ) this ; //TypeId identifies every individual instance of the attribute } get { return ( object ) MaxVolume ; //If we compare two AmpVolume attributes , they should be the same if the volume is the same , right ? }"
class MyClass { private Action _Callback ; public Action Callback { get { return _Callback ; } set { _Callback = value ; } } public void DoCallback ( ) { Action local ; local = Callback ; if ( local == null ) local = new Action ( ( ) = > { } ) ; local ( ) ; } } if ( _Callback ! = null ) _Callback ( ) ; else new Action ( ( ) = > { } ) ( ) ;
public class MyController : Controller { [ HttpGet ] public ActionResult Index ( ) { return View ( ) ; } [ HttpGet ] public ActionResult ZipIndex ( ) { // Get the file returned bu Index ( ) and zip it return File ( /* zip stream */ ) ; } }
+ -- -- -- -- + -- -- -- -- -- -- -- -- -+| Number | Name |+ -- -- -- -- + -- -- -- -- -- -- -- -- -+| 15 | APPLES || 16 | APPLE COMPUTER || 17 | ORANGE || 21 | TWENTY-1 || 291 | 156TH ELEMENT |+ -- -- -- -- + -- -- -- -- -- -- -- -- -+
"let Fetch logger id = logger `` string1 '' `` string2 '' // search a database with the id and return a result void Print ( string x , string y ) { // do nothing } var _logger = FuncConvert.ToFSharpFunc < string , string > ( Print ) ; var _result = Fetch ( logger , 3 ) ; let Fetch logger id = logger `` string1 '' // search a database with the id and return a result"
"public class MyReactiveObject : ReactiveObject , IDynamicMetaObjectProvider { public DynamicMetaObject GetMetaObject ( Expression parameter ) { ... } } public class MyDynamicObject : DynamicObject { } public class MyReactiveObject : ReactiveObject , IDynamicMetaObjectProvider { MyDynamicObject DynamicObject = new MyDynamicObject ( ) ; public DynamicMetaObject GetMetaObject ( Expression parameter ) { return this.DynamicObject.GetMetaObject ( parameter ) ; } }"
"public interface IEventStore { Task < IEnumerable < IDomainEvent > > GetEventsAsync ( Identity aggregateIdentity , Type aggregateType ) ; Task PersistAsync ( IAggregateRoot aggregateRoot , IEnumerable < IDomainEvent > domainEvents ) ; } public interface IMapper < in TSource , out TDestination > { TDestination Map ( TSource source ) ; // I have implementations of this if needed } public class MyEventStore : IEventStore { private readonly IStreamNameFactory _streamNameFactory ; private readonly IEventStoreConnection _eventStoreConnection ; //this is the Greg Young 's EventStore product that I want to use as database private readonly IDomainEventFactory _domainEventFactory ; private readonly IEventDataFactory _eventDataFactory ; public EventStore ( IStreamNameFactory streamNameFactory , IEventStoreConnection eventStoreConnection , IDomainEventFactory domainEventFactory , IEventDataFactory eventDataFactory ) { _streamNameFactory = streamNameFactory ; _eventStoreConnection = eventStoreConnection ; _domainEventFactory = domainEventFactory ; _eventDataFactory = eventDataFactory ; } public async Task < IEnumerable < IDomainEvent > > GetEventsAsync ( Identity aggregateIdentity , Type aggregateType ) { var aggregateIdentityValue = aggregateIdentity.Value ; var streamName = _streamNameFactory.Create ( aggregateIdentityValue , aggregateType ) ; var streamEventSlice = await _eventStoreConnection.ReadStreamEventsForwardAsync ( streamName , 0 , Int32.MaxValue , false ) ; var domainEvents = streamEventSlice .Events .Select ( x = > _domainEventFactory.Create ( x ) ) ; return domainEvents ; } [ SuppressMessage ( `` ReSharper '' , `` PossibleMultipleEnumeration '' ) ] public async Task PersistAsync ( IAggregateRoot aggregateRoot , IEnumerable < IDomainEvent > domainEvents ) { var numberOfEvents = domainEvents.Count ( ) ; var aggregateRootVersion = aggregateRoot.Version ; var originalVersion = aggregateRootVersion - numberOfEvents ; var expectedVersion = originalVersion - 1 ; var aggregateIdentityValue = aggregateRoot.AggregateIdentity.Value ; var aggregateRootType = aggregateRoot.GetType ( ) ; var streamName = _streamNameFactory.Create ( aggregateIdentityValue , aggregateRootType ) ; var assemblyQualifiedName = aggregateRootType.AssemblyQualifiedName ; var eventsToStore = domainEvents.Select ( x = > _eventDataFactory.Create ( x , assemblyQualifiedName ) ) ; await _eventStoreConnection.AppendToStreamAsync ( streamName , expectedVersion , eventsToStore ) ; } } public interface IDomainEventFactory { IDomainEvent Create ( ResolvedEvent resolvedEvent ) ; } public interface IBetterMapping { TDestination Map < TDestination > ( object source ) where TDestination : class ; }"
"namespace TestSolution.Domain.Entities { using System ; using System.Collections.Generic ; using TestSolution.Domain.Entities ; public partial class Person : IPerson { public Person ( ) { //this.CrewMembers = new HastSet < CrewMember > ( ) ; this.CrewMembers = new HashSet < ICrewMember > ( ) ; } public Person ( IPerson iPerson ) { this.PersonID = iPerson.PersonID ; this.First = iPerson.First ; this.Last = iPerson.Last ; //this.CrewMembers = new HastSet < CrewMember > ( ) ; this.CrewMembers = new HashSet < ICrewMember > ( ) ; } public int PersonID { get ; set ; } public string First { get ; set ; } public string Last { get ; set ; } //public virtual ICollection < CrewMember > CrewMembers { get ; set ; } public virtual ICollection < ICrewMember > CrewMembers { get ; set ; } } } namespace TestSolution.Domain.Entities { using System ; using System.Collections.Generic ; public interface IPerson { int PersonID { get ; set ; } string First { get ; set ; } string Last { get ; set ; } //ICollection < CrewMember > CrewMembers { get ; set ; } ICollection < ICrewMember > CrewMembers { get ; set ; } } } public void UpdateCrewMemberModel ( CrewMemberModel CrewMember ) { var query = ( from crewMember in UnitOfWork.DataContext.CrewMembers where crewMember.CrewMemberID == CrewMember.CrewMemberID select crewMember ) .First < CrewMember > ( ) ; query.IsAssigned = CrewMember.IsAssigned ; query.IsCaptain = CrewMember.IsCaptain ; // Exception is thrown here var queryPerson = ( from person in UnitOfWork.DataContext.People where person.PersonID == query.PersonID select person ) .First < Person > ( ) ; queryPerson.First = CrewMember.Person.First ; queryPerson.Last = CrewMember.Person.Last ; //Note that UnitOfWork uses a Factory Repository Pattern ; //Commit just calls on UnitOfWork.DataContext.SaveAll ( ) Method UnitOfWork.Commit ( ) ; } System.Data.Entity.Core.EntityException { `` The navigation property 'CrewMembers ' on entity of type 'System.Data.Entity.DynamicProxies.Person_1A1EF42B1FC8D2DD0084F803201DE1DE4CF6E704C5AE129D954BD5BEAB55826C ' must implement ICollection < T > in order for Entity Framework to be able to track changes in collections . `` } Source : EntityFrameworkat System.Data.Entity.Core.Objects.DataClasses.EntityCollection ` 1.CheckIfNavigationPropertyContainsEntity ( IEntityWrapper wrapper ) at System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Add ( IEntityWrapper wrappedTarget , Boolean applyConstraints , Boolean addRelationshipAsUnchanged , Boolean relationshipAlreadyExists , Boolean allowModifyingOtherEndOfRelationship , Boolean forceForeignKeyChanges ) at System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Add ( IEntityWrapper wrappedEntity , Boolean applyConstraints ) at System.Data.Entity.Core.Objects.DataClasses.EntityReference ` 1.set_ReferenceValue ( IEntityWrapper value ) at System.Data.Entity.Core.Objects.DataClasses.EntityReference.SetEntityKey ( EntityKey value , Boolean forceFixup ) at System.Data.Entity.Core.Objects.EntityEntry.FixupEntityReferenceToPrincipal ( EntityReference relatedEnd , EntityKey foreignKey , Boolean setIsLoaded , Boolean replaceExistingRef ) at System.Data.Entity.Core.Objects.EntityEntry.FixupReferencesByForeignKeys ( Boolean replaceAddedRefs , EntitySetBase restrictTo ) at System.Data.Entity.Core.Objects.ObjectStateManager.FixupReferencesByForeignKeys ( EntityEntry newEntry , Boolean replaceAddedRefs ) at System.Data.Entity.Core.Objects.ObjectStateManager.AddEntry ( IEntityWrapper wrappedObject , EntityKey passedKey , EntitySet entitySet , String argumentName , Boolean isAdded ) at System.Data.Entity.Core.Common.Internal.Materialization.Shaper.HandleEntityAppendOnly [ TEntity ] ( Func ` 2 constructEntityDelegate , EntityKey entityKey , EntitySet entitySet ) at lambda_method ( Closure , Shaper ) at System.Data.Entity.Core.Common.Internal.Materialization.Coordinator ` 1.ReadNextElement ( Shaper shaper ) at System.Data.Entity.Core.Common.Internal.Materialization.Shaper ` 1.SimpleEnumerator.MoveNext ( ) at System.Data.Entity.Internal.LazyEnumerator ` 1.MoveNext ( ) at System.Collections.Generic.List ` 1..ctor ( IEnumerable ` 1 collection ) at System.Linq.Enumerable.ToList [ TSource ] ( IEnumerable ` 1 source ) at TestSolution.Infrastructure.Service.CrewMemberService.UpdateCrewMemberModel ( CrewMemberModel CrewMember ) in c : \Users\brett.caswell\Documents\Visual Studio 2012\Projects\TestSolution\TestSolution.Infrastructure.Service\Services\CrewMemberServices.cs : line 67TargetSite : { Boolean CheckIfNavigationPropertyContainsEntity ( System.Data.Entity.Core.Objects.Internal.IEntityWrapper ) }"
"string [ ] words = { `` cherry '' , `` apple '' , `` blueberry '' , `` cherry '' , `` cherry '' , `` blueberry '' } ; // ... Some LINQ statement here// ..."
"Run-time exception ( line 8 ) : An assembly ( probably `` hdxticim '' ) must be rewritten using the code contracts binary rewriter ( CCRewrite ) because it is calling Contract.Requires < TException > and the CONTRACTS_FULL symbol is defined . Remove any explicit definitions of the CONTRACTS_FULL symbol from your project and rebuild . CCRewrite can be downloaded from http : //go.microsoft.com/fwlink/ ? LinkID=169180 . After the rewriter is installed , it can be enabled in Visual Studio from the project 's Properties page on the Code Contracts pane . Ensure that `` Perform Runtime Contract Checking '' is enabled , which will define CONTRACTS_FULL"
private readonly ICustomerService _customerService ; public Billing ( ICustomerService customerService ) { _customerService = customerService ; } private readonly ICustomerService _customerService ; public Billing ( ) { _customerService = new CustomerService ( ) ; }
"public static string [ ] DownloadList ( string [ ] urlArray , string [ ] toPathArray , string login = `` '' , string pass = `` '' , bool getExt = false ) { Console.WriteLine ( `` DownloadList ( { 0 } , { 1 } , { 2 } , { 3 } , { 4 } ) '' , urlArray , toPathArray , login , pass , getExt ) ; try { returnedArray = new string [ urlArray.Length ] ; Task [ ] taskArray = new Task [ urlArray.Length ] ; for ( int i = 0 ; i < urlArray.Length ; i++ ) { Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` i = { 0 } '' , i ) ; Task task = new Task ( ( ) = > { returnedArray [ i ] = Download ( urlArray [ i ] , toPathArray [ i ] , login , pass , getExt , true ) ; } ) ; task.Start ( ) ; taskArray [ i ] = task ; } Task.WaitAll ( taskArray ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( ) ; Console.WriteLine ( `` Done ! Press Enter to close . `` ) ; Console.ReadLine ( ) ; return returnedArray ; } catch ( Exception e ) { Console.WriteLine ( ) ; Console.WriteLine ( e.Message ) ; Console.ReadLine ( ) ; return null ; } }"
"System.Windows.Markup.XamlParseException occurred Message= [ Line : 0 Position : 0 ] -- - Inner Exception -- -KeyNotFoundException < ListBox x : Name= '' userPhotosListBox '' > < ListBox.ItemTemplate > < DataTemplate > < StackPanel x : Name= '' DataTemplateStackPanel '' Orientation= '' Horizontal '' > < ContentControl Content= '' { Binding Image } '' Width= '' 400 '' / > < Image Name= '' { Binding FileName } '' Source= '' /Images/appbar.delete.rest.png '' Width= '' 48 '' Height= '' 48 '' MouseLeftButtonUp= '' Image_MouseLeftButtonUp '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Center '' MaxWidth= '' 48 '' MaxHeight= '' 48 '' / > < /StackPanel > < /DataTemplate > < /ListBox.ItemTemplate > < /ListBox > using ( var store = IsolatedStorageFile.GetUserStoreForApplication ( ) ) { var userFiles = store.GetFileNames ( ) ; foreach ( var userFile in userFiles ) { if ( userFile.Contains ( PhotoInIsolatedStoragePrefix ) ) { var currentBitmap = ReadBitmapImageFromIso ( userFile ) ; var userPhotoImage = new Image { Source = currentBitmap } ; var userImg = new Img ( userPhotoImage , userFile ) ; userPhotosListBox.Items.Add ( userImg ) ; } } } public class Img { public Img ( Image img , string fileName ) { this.Image = img ; this.FileName = fileName ; } public Image Image { get ; set ; } public string FileName { get ; set ; } }"
namespace SampleComponent { public sealed class Example { public static string GetAnswer ( ) { return `` The answer is 42 . `` ; } public int SampleProperty { get ; set ; } } } document.getElementById ( 'output ' ) .innerHTML = SampleComponent.Example.getAnswer ( ) ;
var x = ifThis ? * This ( ) : That ( ) ;
using ( SolEntities sec = new SolEntities ( ) ) { Planets = sec.CelestialBodies ; }
"< AutoSuggestBox Width= '' 192 '' PlaceholderText= '' Search '' HorizontalAlignment= '' Right '' ItemsSource= '' { Binding SearchResults } '' > < i : Interaction.Behaviors > ... < /i : Interaction.Behaviors > < AutoSuggestBox.ItemTemplate > < DataTemplate > < TextBlock > < Run Text= '' { Binding Name } '' / > < Run Text= '' ( `` / > < Run Text= '' { Binding Origin_Country [ 0 ] } '' / > < Run Text= '' ) '' / > < /TextBlock > < /DataTemplate > < /AutoSuggestBox.ItemTemplate > private ObservableCollection < ShowModel > _searchResults = default ( ObservableCollection < ShowModel > ) ; public ObservableCollection < ShowModel > SearchResults { get { return _searchResults ; } set { Set ( ref _searchResults , value ) ; } }"
"query.Append ( string.Format ( `` INSERT INTO { 0 } ( { 1 } ) VALUES ( { 2 } ) '' , this._TABLE_ , col , val ) ) ; sqlCmd = new SqlCommand ( query.ToString ( ) , sql ) ; sqlCmd.ExecuteNonQuery ( ) ;"
"public static T GetOrDefault < T > ( this T [ ] arr , int n ) { if ( arr.Length > n ) { return arr [ n ] ; } return default ( T ) ; }"
"public static Bitmap CopyDataToBitmap ( byte [ ] data ) { var bmp = new Bitmap ( 640 , 480 , PixelFormat.Format8bppIndexed ) ; var bmpData = bmp.LockBits ( new Rectangle ( 0 , 0 , bmp.Width , bmp.Height ) , ImageLockMode.WriteOnly , bmp.PixelFormat ) ; Marshal.Copy ( data , 0 , bmpData.Scan0 , data.Length ) ; bmp.UnlockBits ( bmpData ) ; return bmp ; }"
"123456789 789123456 static uint [ ] Pow10 = new uint [ ] { 1 , 10 , 100 , 1000 , 10000 , 100000 , 1000000 , 10000000 , 100000000 , uint.MaxValue } ; static uint RotateShift10 ( uint value , int shift ) { int r = ( int ) Math.Floor ( Math.Log10 ( value ) + 1 ) ; while ( r < shift ) shift = shift - r ; if ( shift < 0 ) shift = 9 + shift ; uint x = value / Pow10 [ shift ] ; uint i = 0 ; while ( true ) { if ( x < Pow10 [ i ] ) return x + ( value % Pow10 [ shift ] ) * Pow10 [ i ] ; i += 1 ; } }"
"public sealed class AlgoVersionCacheItem : NotificationObject { public int OrderId { get ; set ; } public string OrderTitle { get ; set ; } public int ? CurrentVersion { get ; set ; } public int CachedVersion { get ; set ; } public IEnumerable < int > AvailableVersions { get ; set ; } } return someQueryable .Select ( version = > new AlgoVersionCacheItem { OrderId = version.OrderId , OrderTitle = version.Order.Title , CurrentVersion = version.Order.CurrentAlgoVersionId , CachedVersion = version.Id , AvailableVersions = version .Order .AlgoVersions .Where ( v = > ( allowUncommittedVersions || v.Statuses.Any ( s = > s.AlgoVersionStatusListItemId == ModelConstants.AlgoVersionCommitted_StatusId ) ) & & v.Id ! = version.Id ) .OrderByDescending ( v = > v.Id ) // this line will cause exception .Select ( v = > v.Id ) } ) .Where ( item = > item.AvailableVersions.Any ( ) ) .OrderByDescending ( item = > item.OrderId ) .ToArray ( ) ;"
"`` JonSnow '' : { `` Direwolf '' : { `` Name '' : `` Ghost '' , `` Color '' : `` White '' , } } '' DanaerysTargaryen '' : { `` Dragons '' : { `` Dragon1 '' : { `` Name '' : `` Drogon '' , } } `` Hair '' : { `` Color '' : `` White '' } } JObject ObjToUpdate= JObject.Parse ( jsonText ) ; JObject Dragon = ObjToUpdate [ `` DanaerysTargaryen '' ] [ `` Dragons '' ] [ `` Dragon1 '' ] as JObject ; Dragon.Add ( `` Color '' , `` Black '' ) ) ; // from outside source : Dictionary < string , string > PathBasedDict // key : Jtoken.Path ( example : `` JonSnow.Weapon.Type '' ) // value : new text to be added ( example : `` Longsword '' ) foreach ( KeyValuePair entry in PathBasedDict ) { string path = entry.Key ; string newText = entry.Value ; if ( ObjToUpdate.SelectToken ( path ) ! = null ) { ObjToUpdate.SelectToken ( path ) .Replace ( newText ) ; } else AddToJson ( path , newText ) ; }"
"public class Commands { public class MyUtil { const int kMaxChunkSize = 127 ; public ResultBuffer StreamToResBuf ( MemoryStream ms , string appName ) { ResultBuffer resBuf = new ResultBuffer ( new TypedValue ( ( int ) DxfCode.ExtendedDataRegAppName , appName ) ) ; for ( int i = 0 ; i < ms.Length ; i += kMaxChunkSize ) { int length = ( int ) Math.Min ( ms.Length - i , kMaxChunkSize ) ; byte [ ] datachunk = new byte [ length ] ; ms.Read ( datachunk , 0 , length ) ; resBuf.Add ( new TypedValue ( ( int ) DxfCode.ExtendedDataBinaryChunk , datachunk ) ) ; } return resBuf ; } public MemoryStream ResBufToStream ( ResultBuffer resBuf ) { MemoryStream ms = new MemoryStream ( ) ; TypedValue [ ] values = resBuf.AsArray ( ) ; // Start from 1 to skip application name for ( int i = 1 ; i < values.Length ; i++ ) { byte [ ] datachunk = ( byte [ ] ) values [ i ] .Value ; ms.Write ( datachunk , 0 , datachunk.Length ) ; } ms.Position = 0 ; return ms ; } public void NewFromEntity ( IClearspanSerializable objectToSave , Entity ent ) { using ( ResultBuffer resBuf = ent.GetXDataForApplication ( `` Member '' ) ) { BinaryFormatter bf = new BinaryFormatter ( ) ; bf.Binder = new MyBinder ( ) ; MemoryStream ms = this.ResBufToStream ( resBuf ) ; objectToSave.SetObjectData ( bf.Deserialize ( ms ) ) ; } } public void SaveToEntity ( IClearspanSerializable objectToSave , Entity ent ) { // Make sure application name is registered // If we were to save the ResultBuffer to an Xrecord.Data , // then we would not need to have a registered application name Transaction tr = ent.Database.TransactionManager.TopTransaction ; RegAppTable regTable = ( RegAppTable ) tr.GetObject ( ent.Database.RegAppTableId , OpenMode.ForWrite ) ; if ( ! regTable.Has ( `` Member '' ) ) { RegAppTableRecord app = new RegAppTableRecord ( ) ; app.Name = `` Member '' ; regTable.Add ( app ) ; tr.AddNewlyCreatedDBObject ( app , true ) ; } BinaryFormatter bf = new BinaryFormatter ( ) ; MemoryStream ms = new MemoryStream ( ) ; bf.Serialize ( ms , objectToSave ) ; ms.Position = 0 ; ent.XData = this.StreamToResBuf ( ms , `` Member '' ) ; ; } } public sealed class MyBinder : SerializationBinder { public override Type BindToType ( string assemblyName , string typeName ) { return Type.GetType ( string.Format ( `` { 0 } , { 1 } '' , typeName , assemblyName ) ) ; } } [ CommandMethod ( `` SaveClassToEntityXData '' , CommandFlags.Modal ) ] public void SaveClassToEntityXData ( IClearspanSerializable objectToSerialize ) { Database db = Application.DocumentManager.MdiActiveDocument.Database ; Editor ed = Application.DocumentManager.MdiActiveDocument.Editor ; PromptEntityResult per = ed.GetEntity ( `` Select entity to save class to : \n '' ) ; if ( per.Status ! = PromptStatus.OK ) return ; MyUtil util = new MyUtil ( ) ; // Save it to the document using ( Transaction tr = db.TransactionManager.StartTransaction ( ) ) { Entity ent = ( Entity ) tr.GetObject ( per.ObjectId , OpenMode.ForWrite ) ; util.SaveToEntity ( objectToSerialize , ent ) ; tr.Commit ( ) ; } // Write some info about the results //ed.WriteMessage ( `` Content of MyClass we serialized : \n { 0 } \n '' , mc.ToString ( ) ) ; } [ CommandMethod ( `` GetClassFromEntityXData '' , CommandFlags.Modal ) ] public void GetClassFromEntityXData ( IClearspanSerializable objectToRestore ) { Database db = Application.DocumentManager.MdiActiveDocument.Database ; Editor ed = Application.DocumentManager.MdiActiveDocument.Editor ; MyUtil util = new MyUtil ( ) ; PromptEntityResult per = ed.GetEntity ( `` Select entity to get class from : \n '' ) ; if ( per.Status ! = PromptStatus.OK ) return ; // Get back the class using ( Transaction tr = db.TransactionManager.StartTransaction ( ) ) { Entity ent = ( Entity ) tr.GetObject ( per.ObjectId , OpenMode.ForRead ) ; util.NewFromEntity ( objectToRestore , ent ) ; tr.Commit ( ) ; } } } [ Serializable ] public class MattMember : IClearspanSerializable { public string Name ; List < int > MattsInts ; public MattMember ( string passedName , List < int > passedInts ) { Name = passedName ; MattsInts = passedInts ; } [ SecurityPermission ( SecurityAction.LinkDemand , Flags = SecurityPermissionFlag.SerializationFormatter ) ] public void GetObjectData ( SerializationInfo info , StreamingContext context ) { info.AddValue ( `` Name '' , Name ) ; info.AddValue ( `` MattsInts '' , MattsInts ) ; } [ SecurityPermission ( SecurityAction.LinkDemand , Flags = SecurityPermissionFlag.SerializationFormatter ) ] public void SetObjectData ( SerializationInfo info , StreamingContext context ) { if ( info == null ) { throw new System.ArgumentNullException ( `` info '' ) ; } Name = ( string ) info.GetValue ( `` Name '' , typeof ( string ) ) ; MattsInts = ( List < int > ) info.GetValue ( `` MattsInts '' , typeof ( List < int > ) ) ; } void IClearspanSerializable.SetObjectData ( object objectInDisguise ) { if ( objectInDisguise == null ) { throw new System.ArgumentNullException ( `` info '' ) ; } MattMember objectToCopy = ( MattMember ) objectInDisguise ; Name = objectToCopy.Name ; MattsInts = objectToCopy.MattsInts ; } } public interface IClearspanSerializable { void GetObjectData ( SerializationInfo info , StreamingContext context ) ; void SetObjectData ( object objectInDisguise ) ; } ******************************************************************************Application does not support just-in-time ( JIT ) debugging . See the end of this message for details . ************** Exception Text **************System.ArgumentException : Can not bind to the target method because its signature or security transparency is not compatible with that of the delegate type . at System.Delegate.CreateDelegate ( Type type , Object firstArgument , MethodInfo method , Boolean throwOnBindFailure ) at System.Delegate.CreateDelegate ( Type type , Object firstArgument , MethodInfo method ) at Autodesk.AutoCAD.Runtime.CommandClass.InvokeWorker ( MethodInfo mi , Object commandObject , Boolean bLispFunction ) at Autodesk.AutoCAD.Runtime.CommandClass.InvokeWorkerWithExceptionFilter ( MethodInfo mi , Object commandObject , Boolean bLispFunction ) at Autodesk.AutoCAD.Runtime.PerDocumentCommandClass.Invoke ( MethodInfo mi , Boolean bLispFunction ) at Autodesk.AutoCAD.Runtime.CommandClass.CommandThunk.Invoke ( ) ************** Loaded Assemblies **************mscorlib Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18444 built by : FX451RTMGDR CodeBase : file : ///C : /Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Acdbmgd Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcdbMgd.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- adui20 Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/adui20.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AdUiPalettes Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AdUiPalettes.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- WindowsBase Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/WindowsBase/v4.0_4.0.0.0__31bf3856ad364e35/WindowsBase.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework/v4.0_4.0.0.0__31bf3856ad364e35/PresentationFramework.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationCore Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_32/PresentationCore/v4.0_4.0.0.0__31bf3856ad364e35/PresentationCore.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Xaml Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xaml/v4.0_4.0.0.0__b77a5c561934e089/System.Xaml.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Configuration Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Configuration/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Configuration.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Xml Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AdApplicationFrame Assembly Version : 0.0.0.0 Win32 Version : 5.2.8.100 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AdApplicationFrame.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AdWindows Assembly Version : 5.2.10.200 Win32 Version : 5.2.10.200 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AdWindows.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework.Classic Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework.classic/v4.0_4.0.0.0__31bf3856ad364e35/PresentationFramework.classic.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Drawing Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- accoremgd Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/accoremgd.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Core Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Acmgd Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/Acmgd.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcWindows Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcWindows.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcWindows.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcWindows.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcCui Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcCui.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework-SystemXml Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework-SystemXml/v4.0_4.0.0.0__b77a5c561934e089/PresentationFramework-SystemXml.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework.Aero Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework.Aero/v4.0_4.0.0.0__31bf3856ad364e35/PresentationFramework.Aero.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- WindowsFormsIntegration Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/WindowsFormsIntegration/v4.0_4.0.0.0__31bf3856ad364e35/WindowsFormsIntegration.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Windows.Forms Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationUI Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationUI/v4.0_4.0.0.0__31bf3856ad364e35/PresentationUI.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- System.Xml.Linq Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml.Linq/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.Linq.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework-SystemXmlLinq Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework-SystemXmlLinq/v4.0_4.0.0.0__b77a5c561934e089/PresentationFramework-SystemXmlLinq.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- FeaturedAppsPlugin Assembly Version : 20.0.0.0 Win32 Version : 20.0.46.0.0 CodeBase : file : ///C : /ProgramData/Autodesk/ApplicationPlugins/Autodesk % 20FeaturedApps.bundle/Contents/Windows/2015/Win32/FeaturedAppsPlugin.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- UIAutomationTypes Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 built by : FX451RTMGREL CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/UIAutomationTypes/v4.0_4.0.0.0__31bf3856ad364e35/UIAutomationTypes.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PresentationFramework-SystemCore Assembly Version : 4.0.0.0 Win32 Version : 4.0.30319.18408 CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework-SystemCore/v4.0_4.0.0.0__b77a5c561934e089/PresentationFramework-SystemCore.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Anonymously Hosted DynamicMethods Assembly Assembly Version : 0.0.0.0 Win32 Version : 4.0.30319.18444 built by : FX451RTMGDR CodeBase : file : ///C : /Windows/Microsoft.Net/assembly/GAC_32/mscorlib/v4.0_4.0.0.0__b77a5c561934e089/mscorlib.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcLayer Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcLayer.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcLayer.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcLayer.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcAeNet.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcAeNet.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcCloudRender.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcCloudRender.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcCustomize.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcCustomize.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcDxWizard.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcDxWizard.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcExportLayoutUI.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcExportLayoutUI.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcInterfere.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcInterfere.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcLayerTools.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcLayerTools.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcMrUi.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcMrUi.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcMultiLineUi.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcMultiLineUi.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcRecoverAll.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcRecoverAll.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcScaleList.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcScaleList.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcUnderlay.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcUnderlay.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcViewTransitionsUi.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcViewTransitionsUi.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AdskConnectionPointMgd.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AdskConnectionPointMgd.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcCalcUi.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcCalcUi.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcLivePreviewContext Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcWindows.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcDialogToolTips Assembly Version : 20.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/AcDialogToolTips.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- AcDialogToolTips.resources Assembly Version : 0.0.0.0 Win32 Version : 20.0.51.0.0 CodeBase : file : ///C : /Program % 20Files/Autodesk/AutoCAD % 202015/en-US/AcDialogToolTips.resources.DLL -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Write To Block Assembly Version : 1.0.5276.26438 Win32 Version : 1.0.0.0 CodeBase : file : ///C : /Users/Administrator/Documents/Clearspan/AutoCAD % 20Projects/Write % 20To % 20Block/Write % 20To % 20Block/bin/Debug/Write % 20To % 20Block.dll -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ************** JIT Debugging **************Application does not support Windows Forms just-in-time ( JIT ) debugging . Contact the application author for moreinformation ."
"writeToDiagnosticsTrace= '' true '' ... < listeners > name= '' WebPageTraceListener '' type= '' System.Web.WebPageTraceListener , System.Web , Version=2.0.3600.0 , Culture=neutral , PublicKeyToken=b03f5f7f11d50a3a '' < /listeners >"
entities.AsParallel ( ) .ForAll ( o = > repository.Insert ( o ) ) ;
"static Bitmap CaptureDesktop ( ) { SIZE size ; Bitmap printscreen = null ; size.cx = Win32Stuff.GetSystemMetrics ( Win32Stuff.SM_CXSCREEN ) ; size.cy = Win32Stuff.GetSystemMetrics ( Win32Stuff.SM_CYSCREEN ) ; int width = size.cx ; int height = size.cy ; IntPtr hWnd = Win32Stuff.GetDesktopWindow ( ) ; IntPtr hDC = Win32Stuff.GetDC ( hWnd ) ; if ( hDC ! = IntPtr.Zero ) { IntPtr hMemDC = GDIStuff.CreateCompatibleDC ( hDC ) ; if ( hMemDC ! = IntPtr.Zero ) { IntPtr m_HBitmap = GDIStuff.CreateCompatibleBitmap ( hDC , width , height ) ; if ( m_HBitmap ! = IntPtr.Zero ) { IntPtr hOld = ( IntPtr ) GDIStuff.SelectObject ( hMemDC , m_HBitmap ) ; GDIStuff.BitBlt ( hMemDC , 0 , 0 , width , height , hDC , 0 , 0 , GDIStuff.SRCCOPY ) ; GDIStuff.SelectObject ( hMemDC , hOld ) ; GDIStuff.DeleteDC ( hMemDC ) ; printscreen = System.Drawing.Image.FromHbitmap ( m_HBitmap ) ; GDIStuff.DeleteObject ( m_HBitmap ) ; } } } Win32Stuff.ReleaseDC ( hWnd , hDC ) ; return printscreen ; }"
public DbSet < SkillType > SkillTypes { get ; set ; }
"public class Model { public string Name { get ; set ; } public int Number { get ; set ; } } @ Html.LabelFor ( model = > model.Name ) // Works fine @ Html.LabelFor ( model = > model.Number ) // Works fine @ { Expression < Func < Offer , object > > nameExpression = model = > model.Name ; Expression < Func < Offer , object > > numberExpression = model = > model.Number ; } @ Html.LabelFor ( nameExpression ) // Works fine @ Html.LabelFor ( numberExpression ) // Error !"
"services.AddIdentity < User , UserRole > ( opt = > opt.User.RequireUniqueEmail = true ) .AddRoles < UserRole > ( ) .AddEntityFrameworkStores < EntityDbContext > ( ) .AddDefaultTokenProviders ( ) ; var jwtSetting = _configuration .GetSection ( `` JwtSettings '' ) .Get < JwtSettings > ( ) ; services.AddAuthentication ( options = > { options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme ; options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme ; } ) .AddJwtBearer ( config = > { config.RequireHttpsMetadata = false ; config.SaveToken = true ; config.TokenValidationParameters = new TokenValidationParameters { ValidIssuer = jwtSetting.Issuer , ValidAudience = jwtSetting.Audience , IssuerSigningKey = new SymmetricSecurityKey ( Encoding.UTF8.GetBytes ( jwtSetting.Key ) ) } ; } ) ; [ Authorize ( Roles = `` Internal '' ) ] [ ApiController ] [ Route ( `` Api/ [ controller ] '' ) ] public class UserController : BasicCrudController < User > { // Stuff here ... }"
"int [ ] [ ] a = { { 1 , 3 , 5 , 9 } , { 4 , 2 , 1 , 7 } , { 5 , 5 , 6 , * } } // * Is not determined since the sums // * do not count as summable values . int [ ] [ ] a = { { 1 , 3 , 3 , 9 } , { 2 , 3 , 1 , 7 } , { 5 , 5 , 6 , * } } // * Is not determined since the sums do // * not count as summable values . int [ ] [ ] b = { { 1 , 0 , 3 } , { 2 , 1 , 2 } }"
Object box = 5 ; int @ int = ( int ) box ; // int = 5int ? nullableInt = box as int ? ; // nullableInt = 5 ; StringComparison @ enum = ( StringComparison ) box ; // enum = OrdinalIgnoreCaseStringComparison ? nullableEnum = box as StringComparison ? ; // nullableEnum = null .
if ( myObject ! = null ) { if ( myObject.Id ! = pId ) { myObject.Id = pId ; myObject.Order = pOrder ; } } if ( myObject ! = null & & myObject.Id ! = pId )
"var composition = new CompositionBatch ( ) ; composition.AddPart ( this ) ; var container = new CompositionContainer ( new DirectoryCatalog ( AppDomain.CurrentDomain.BaseDirectory ) ) ; container.Compose ( composition ) ; var aggregateCatalog = new AggregateCatalog ( new AssemblyCatalog ( Assembly.GetExecutingAssembly ( ) ) , new DirectoryCatalog ( AppDomain.CurrentDomain.BaseDirectory ) ) ; var compositionContainer = new CompositionContainer ( aggregateCatalog ) ; compositionContainer.ComposeParts ( this ) ; [ Import ] public static ILog Log { get ; set ; } [ Import ] public ILog Log { get ; set ; }"
"[ Authorize ( Roles = `` Admin , User '' ) ] public class SomeController : Controller [ Authorize ( Users = `` Charles , Linus '' ) ] public class SomeController : Controller"
decimal technicalPremium = 0 ; foreach ( Risk risk in risks ) { technicalPremium = technicalPremium + risk.TechnicalPremium ; } return technicalPremium ; return risks.Sum ( risk = > risk.TechnicalPremium ) ;
public abstract class Vehicle { public int Id { get ; set ; } public double TopSpeed { get ; set ; } } public class Car : Vehicle { public int Doors { get ; set ; } } public class Motorcycle : Vehicle { public string Color { get ; set ; } } public MyDbContext : DbContext { public DbSet < Car > Cars { get ; set ; } public DbSet < Motorcycle > Motorcycles { get ; set ; } } var dbContext = new MyDbContext ( ) ; var cars = dbContext.Set < Car > ( ) .Where ( x= > x.TopSpeed > 10 ) ; // < -- THIS WORKS var dbContext = new MyDbContext ( ) ; var vehicles = dbContext.Set < Vehicle > ( ) .Where ( x= > x.TopSpeed > 10 ) ; // < -- THIS DOES NOT WORK
if ( `` xx '' .StartsWith ( `` x '' ) ) { } if ( `` xx '' + `` xx '' .StartsWith ( `` x '' ) ) { }
public class ObjectIdModelBinder : IModelBinder { public Task BindModelAsync ( ModelBindingContext bindingContext ) { var result = bindingContext.ValueProvider.GetValue ( bindingContext.FieldName ) ; return Task.FromResult ( new ObjectId ( result.FirstValue ) ) ; } } public class ObjectIdModelBinderProvider : IModelBinderProvider { public IModelBinder GetBinder ( ModelBinderProviderContext context ) { if ( context == null ) throw new ArgumentNullException ( nameof ( context ) ) ; if ( context.Metadata.ModelType == typeof ( ObjectId ) ) { return new BinderTypeModelBinder ( typeof ( ObjectIdModelBinder ) ) ; } return null ; } } public class Player { [ BsonId ] [ ModelBinder ( BinderType = typeof ( ObjectIdModelBinder ) ) ] public ObjectId Id { get ; set ; } public Guid PlatformId { get ; set ; } public string Name { get ; set ; } public int Score { get ; set ; } public int Level { get ; set ; } } [ HttpPost ( `` join '' ) ] public async Task < SomeThing > Join ( Player player ) { return await _someService.DoSomethingOnthePlayer ( player ) ; } { `` Id '' : `` 507f1f77bcf86cd799439011 '' `` PlatformId '' : `` 9c8aae0f-6aad-45df-a5cf-4ca8f729b70f '' }
"public class CustomResult : ActionResult { private readonly object _contentModel ; private readonly ContentType _defaultContentType ; public CustomResult ( object contentModel , ContentType defaultContentType ) { _contentModel = contentModel ; _defaultContentType = defaultContentType ; } public override void ExecuteResult ( ControllerContext context ) { context.HttpContext.Response.Write ( serialized model ) ; } }"
"//this is only shown for 9 secondsnotifyIcon1.ShowBalloonTip ( 15000 ) ; //this is only shown for 9 seconds too : ) notifyIcon1.ShowBalloonTip ( 15000 , `` 1 sec '' , `` shown for one sec '' , ToolTipIcon.Info ) ;"
"Dictionary < string , MyClass > dic = new Dictionary < string , MyClass > ( ) ; dic.add ( `` z1 '' , val1 ) ; dic.add ( `` abc9 '' , val2 ) ; dic.add ( `` abc8 '' , val3 ) ; dic.add ( `` ABC1 '' , val4 ) ; foreach ( KeyValuePair < string , MyClass > kvp in dic ) { } dic.Remove ( `` abc9 '' ) ;"
"RemoveHandler AppDomain.CurrentDomain.AssemblyResolve , AddressOf ClassX.MethodX ? DirectCast ( gettype ( System.AppDomain ) .GetField ( `` AssemblyResolve '' , BindingFlags.Instance or BindingFlags.NonPublic ) .GetValue ( AppDomain.CurrentDomain ) , ResolveEventHandler ) { System.ResolveEventHandler } _methodBase : Nothing _methodPtr : 157334028 _methodPtrAux : 1827519884 _target : { System.ResolveEventHandler } **Method : { System.Reflection.Assembly ResolveAssembly** ( System.Object , System.ResolveEventArgs ) } Target : Nothing RemoveHandler AppDomain.CurrentDomain.AssemblyResolve , AddressOf GetType ( Reflection.Assembly ) .GetMethod ( `` ResolveAssembly '' )"
"HttpWebRequest req = ( WebRequest.Create ( url ) ) as HttpWebRequest ; //At first , get if cookies are necessary ? //If it is , get the required cookie headers //Then add the cookies to the requestCookieContainer cc = new CookieContainer ( ) ; Cookie c1 = new Cookie ( `` header1 '' , `` value1 '' ) ; Cookie c2 = new Cookie ( `` header2 '' , `` value2 '' ) ; CookieCollection ccollection = new CookieCollection ( ) ; ccollection.Add ( c1 ) ; ccollection.Add ( c2 ) ; cc.Add ( uri , ccollection ) ; req.CookieContainer = cc ; //Get response and other stuff ... ..."
[ HMACAuthentication ] [ RoutePrefix ( `` api/forms '' ) ] public class FormsController : ApiController { [ Route ( `` '' ) ] public IHttpActionResult Get ( ) { ClaimsPrincipal principal = Request.GetRequestContext ( ) .Principal as ClaimsPrincipal ; var Name = ClaimsPrincipal.Current.Identity.Name ; return Ok ( `` test '' ) ; } [ Route ( `` '' ) ] public IHttpActionResult Post ( string order ) { return Ok ( order ) ; } } GlobalConfiguration.Configure ( APIWebFormsProject.API.WebApiConfig.Register ) ;
< appender name= '' SmtpAppender '' type= '' log4net.Appender.SmtpAppender '' > < to value= '' sender @ sending.com '' / > < from value= '' receiver @ receiving.rom '' / > < subject value= '' test logging message '' / > < smtpHost value= '' ... `` / > < authentication value= '' Basic '' / > < port value= '' 587 '' / > < bufferSize value= '' 1 '' / > < username value= '' ... `` / > < password value= '' ... `` / > < EnableSsl value= '' true '' / > < lossy value= '' true '' / > < evaluator type= '' log4net.Core.LevelEvaluator '' > < threshold value= '' FATAL '' / > < /evaluator > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % newline % date [ % thread ] % -5level % logger [ % property { NDC } ] - % message % newline % newline % newline '' / > < /layout > < /appender >
"words.Aggregate ( ( workingSentence , next ) = > + next + `` `` + workingSentence ) ; string sentence = `` the quick brown fox jumps over the lazy dog '' ; // Split the string into individual words . string [ ] words = sentence.Split ( ' ' ) ; // Prepend each word to the beginning of the // new sentence to reverse the word order . string reversed = words.Aggregate ( ( workingSentence , next ) = > next + `` `` + workingSentence ) ; Console.WriteLine ( reversed ) ; // This code produces the following output : // // dog lazy the over jumps fox brown quick the"
"public class RootWindow : NativeWindow { public const int SW_SHOWNOACTIVATE = 4 ; [ DllImport ( `` User32.dll '' ) ] private static extern int ShowWindow ( IntPtr hWnd , short cmdShow ) ; public RootWindow ( ) { CreateHandle ( new CreateParams ( ) ) ; ShowWindow ( this.Handle , SW_SHOWNOACTIVATE ) ; } }"
"var wasUnobservedException = false ; TaskScheduler.UnobservedTaskException += ( s , args ) = > wasUnobservedException = true ; var res = TaskEx.Run ( ( ) = > { throw new NaiveTimeoutException ( ) ; return new DateTime ? ( ) ; } ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; Assert.IsTrue ( wasUnobservedException ) ; var wasUnobservedException = false ; TaskScheduler.UnobservedTaskException += ( s , args ) = > wasUnobservedException = true ; var res = TaskEx.Run ( async ( ) = > { await TaskEx.Delay ( 5000 ) .WithTimeout ( 1000 ) .Wait ( ) ; return new DateTime ? ( ) ; } ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; Assert.IsTrue ( wasUnobservedException ) ;"
"< a href= '' createContact.aspx ? placeValuesBeforeTB_=savedValues & TB_iframe=true & height=400 & width=550 & modal=true '' title= '' Add a new Contact '' class= '' thickbox '' > Add a new Contact < /a > ScriptManager.RegisterClientScriptBlock ( this , typeof ( Page ) , Guid.NewGuid ( ) .ToString ( ) , `` $ ( function ( ) { $ .jGrowl ( 'No Contact found : `` + searchContactText.Text + `` ' ) ; } ) ; '' , true ) ; < % @ Page Language= '' C # '' AutoEventWireup= '' true '' CodeBehind= '' WebForm2.aspx.cs '' Inherits= '' RoutingPortal.Presentation.WebForm2 '' % > < ! DOCTYPE html PUBLIC `` -//W3C//DTD XHTML 1.0 Transitional//EN '' `` http : //www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd '' > < html xmlns= '' http : //www.w3.org/1999/xhtml '' > < head runat= '' server '' > < title > < /title > < script src= '' ../Scripts/jquery-1.6.2.js '' type= '' text/javascript '' > < /script > < script src= '' ../Scripts/jquery-ui-1.8.16.custom.min.js '' type= '' text/javascript '' > < /script > < script src= '' ../Scripts/thickbox.js '' type= '' text/javascript '' > < /script > < script src= '' ../Scripts/jquery.jgrowl.js '' type= '' text/javascript '' > < /script > < link href= '' ../Scripts/css/jquery.jgrowl.css '' rel= '' stylesheet '' type= '' text/css '' / > < link rel= '' stylesheet '' href= '' ~/CSS/thickbox.css '' type= '' text/css '' media= '' screen '' / > < /head > < body > < form id= '' form1 '' runat= '' server '' > < asp : ScriptManager ID= '' ScriptManager1 '' runat= '' server '' > < /asp : ScriptManager > < asp : UpdatePanel ID= '' UpdatePanel1 '' runat= '' server '' > < ContentTemplate > < div > < a href= '' createContact.aspx ? placeValuesBeforeTB_=savedValues & TB_iframe=true & height=400 & width=550 & modal=true '' title= '' Add a new Contact '' class= '' thickbox '' > Add a new Contact < /a > < asp : Button ID= '' Button1 '' runat= '' server '' Text= '' Button '' OnClick= '' Button1_Click '' / > < /div > < /ContentTemplate > < /asp : UpdatePanel > < /form > < /body > < /html > namespace RoutingPortal.Presentation { public partial class WebForm2 : System.Web.UI.Page { protected void Page_Load ( object sender , EventArgs e ) { } protected void Button1_Click ( object sender , EventArgs e ) { ScriptManager.RegisterClientScriptBlock ( this.Page , typeof ( Page ) , Guid.NewGuid ( ) .ToString ( ) , `` $ ( function ( ) { $ .jGrowl ( 'My Message ' ) ; } ) ; '' , true ) ; } } } ScriptManager.RegisterStartupScript ( this.Page , typeof ( Page ) , Guid.NewGuid ( ) .ToString ( ) , `` $ .jGrowl ( 'My Message ' ) ; '' , true ) ;"
"Response.Redirect ( `` Salary.aspx '' ) ; try { Response.Redirect ( `` Salary.aspx '' ) ; } catch ( Exception ex ) { //MyLog ( ) ; throw new Exception ( ) ; } //Remaining code in event handler Response.Redirect ( url , false ) ; Context.ApplicationInstance.CompleteRequest ( ) ;"
Task < bool > [ ] recommendations = … ; while ( recommendations.Count > 0 ) { Task < bool > recommendation = await Task.WhenAny ( recommendations ) ; try { if ( await recommendation ) BuyStock ( symbol ) ; break ; } catch ( WebException exc ) { recommendations.Remove ( recommendation ) ; } }
class Program { static void Main ( string [ ] args ) { Console.WriteLine ( `` Begin '' ) ; var myClass = new MyClass ( ) ; Util.Print ( myClass.Id ) ; Util.Print ( myClass.Server ) ; Util.Print ( myClass.Ping ) ; Console.WriteLine ( `` End '' ) ; } } BeginIdServerPingEnd
"using System ; using System.Threading ; using System.Threading.Tasks ; using System.Runtime.CompilerServices ; namespace FlipFlop { class Program { //Declaring these variables static byte a ; static byte b ; //Track a number of iteration that it took to detect operation reordering . static long iterations = 0 ; static object locker = new object ( ) ; //Indicates that operation reordering is not found yet . static volatile bool continueTrying = true ; //Indicates that Check method should continue . static volatile bool continueChecking = true ; static void Main ( string [ ] args ) { //Restarting test until able to catch reordering . while ( continueTrying ) { iterations++ ; a = 0 ; b = 0 ; var checker = new Task ( Check ) ; var writter = new Task ( Write ) ; lock ( locker ) { continueChecking = true ; checker.Start ( ) ; } writter.Start ( ) ; checker.Wait ( ) ; writter.Wait ( ) ; } Console.ReadKey ( ) ; } static void Write ( ) { //Writing is locked until Main will start Check ( ) method . lock ( locker ) { WriteInOneDirection ( ) ; WriteInOtherDirection ( ) ; //Stops spinning in the Check method . continueChecking = false ; } } [ MethodImpl ( MethodImplOptions.NoInlining ) ] static void WriteInOneDirection ( ) { a = 1 ; b = 10 ; } [ MethodImpl ( MethodImplOptions.NoInlining ) ] static void WriteInOtherDirection ( ) { b = 20 ; a = 2 ; } static void Check ( ) { //Spins until finds operation reordering or stopped by Write method . while ( continueChecking ) { int tempA = a ; int tempB = b ; if ( tempB == 10 & & tempA == 2 ) { continueTrying = false ; Console.WriteLine ( `` Caught when a = { 0 } and b = { 1 } '' , tempA , tempB ) ; Console.WriteLine ( `` In `` + iterations + `` iterations . `` ) ; break ; } } } } }"
"Task.Factory.StartNew ( foo ) .ContinueWith ( bar , TaskContinuationOptions.NotOnRanToCompletion ) ;"
"public void CallService ( Delegate service , IContext ctx ) { var serviceArgs = CreateServiceArguments ( service , ctx ) ; service.DynamicInvoke ( serviceArgs ) ; }"
"try { var webAuthenticationResult = await WebAuthenticationBroker.AuthenticateAsync ( WebAuthenticationOptions.None , url ) ; switch ( webAuthenticationResult.ResponseStatus ) { case WebAuthenticationStatus.Success : // Successful authentication . result = webAuthenticationResult.ResponseData.ToString ( ) ; break ; case WebAuthenticationStatus.ErrorHttp : // HTTP error . result = webAuthenticationResult.ResponseErrorDetail.ToString ( ) ; break ; default : // Other error . result = webAuthenticationResult.ResponseData.ToString ( ) ; break ; } } catch ( Exception ex ) { // Authentication failed . Handle parameter , SSL/TLS , and Network Unavailable errors here . result = ex.Message ; }"
string ham = `` ham `` + 4 ; string ham = 4 ;
var productNames = from p in products where p.Id > 100 and p.Id < 5000 select p.ProductName ;
CultureInfo ci = new CultureInfo ( `` es-MX '' ) ; ci.DateTimeFormat.ShortDatePattern = `` ddd dd/MMM/yyyy '' ; Thread.CurrentThread.CurrentCulture = ci ; Dom 19/ago/2012 Dom 19/Ago/2012
public class MyObject { public string Name ; public int Age ; } Name AgeABC 12BBC 14ABC 11 Name AgeABC 11ABC 12BBC 14
[ Test ] public void Test ( ) { float x = 0.0f ; float y = 0.0f ; float z = 0.0f ; if ( ( x * x + y * y + z * z ) < ( float.Epsilon ) ) { return ; } throw new Exception ( `` This is totally bad '' ) ; } if ( ( x * x + y * y + z * z ) < = ( float.Epsilon ) ) // this works ! if ( ( x * x + y * y + z * z ) < ( float.Epsilon*10 ) ) // this does n't ! float x = 0.0f ; float y = 0.0f ; float z = 0.0f ; var res = ( x*x + y*y + z*z ) ; Console.WriteLine ( GetComponentParts ( res ) ) ; Console.WriteLine ( ) ; Console.WriteLine ( GetComponentParts ( float.Epsilon ) ) ; 0 : Sign : 0 ( + ) Exponent : 0xFFFFFF82 ( -126 ) Mantissa : 0x00000000000001.401298E-45 : Sign : 0 ( + ) Exponent : 0xFFFFFF82 ( -126 ) Mantissa : 0x0000000000001 0 : Sign : 0 ( + ) Exponent : 0xFFFFFF82 ( -126 ) Mantissa : 0x00000000000000 : Sign : 0 ( + ) Exponent : 0xFFFFFF82 ( -126 ) Mantissa : 0x0000000000000 0 : Sign : 0 ( + ) Exponent : 0xFFFFFF82 ( -126 ) Mantissa : 0x0000000000001
"DateTime DateTime = new DateTime ( 2010,11,3 ) ; long shazbot = 1000000000 * DateTime.Day ;"
"Type type = Type.GetTypeFromProgID ( `` VisualStudio.DTE.10.0 '' , true ) ; Object comObject = Activator.CreateInstance ( type ) ; ... sol.Open ( solution_full_path ) ;"
"using System ; using System.Collections.Generic ; using Newtonsoft.Json ; using NodaTime ; using NodaTime.Serialization.JsonNet ; using NodaTime.Text ; // Required for LocalTimePatternnamespace TestNodaTime { class MyObject { [ JsonProperty ( `` var1 '' ) ] public int MyProperty { get ; set ; } [ JsonProperty ( `` time '' ) ] public LocalTime MyTime { get ; set ; } } class Program { static void Main ( string [ ] args ) { string serializedObject1 = `` [ { \ '' var1\ '' : \ '' 42\ '' , \ '' time\ '' : \ '' 01:02:03.004\ '' } ] '' ; string serializedObject2 = `` [ { \ '' var1\ '' : \ '' 42\ '' , \ '' time\ '' : \ '' 01:02\ '' } ] '' ; JsonSerializerSettings jss = new JsonSerializerSettings ( ) ; jss.ConfigureForNodaTime ( DateTimeZoneProviders.Bcl ) ; // This works - the pattern is `` hh : mm : ss.fff '' MyObject mo1 = JsonConvert.DeserializeObject < List < MyObject > > ( serializedObject1 , jss ) [ 0 ] ; // This causes an exception - the pattern is `` HH : mm '' MyObject mo2 = JsonConvert.DeserializeObject < List < MyObject > > ( serializedObject2 , jss ) [ 0 ] ; /* * An unhandled exception of type 'NodaTime.Text.UnparsableValueException ' occurred in Newtonsoft.Json.dll * Additional information : The value string does not match a quoted string in the pattern . * Value being parsed : '01:02^ ' . ( ^ indicates error position . ) */ } } } NodaTime.Text.UnparsableValueException was unhandled HResult=-2146233033 Message=The value string does not match a quoted string in the pattern . Value being parsed : '01:02^ ' . ( ^ indicates error position . ) Source=NodaTime StackTrace : at NodaTime.Text.ParseResult ` 1.GetValueOrThrow ( ) at NodaTime.Text.ParseResult ` 1.get_Value ( ) at NodaTime.Serialization.JsonNet.NodaPatternConverter ` 1.ReadJsonImpl ( JsonReader reader , JsonSerializer serializer ) at NodaTime.Serialization.JsonNet.NodaConverterBase ` 1.ReadJson ( JsonReader reader , Type objectType , Object existingValue , JsonSerializer serializer ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.DeserializeConvertable ( JsonConverter converter , JsonReader reader , Type objectType , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue ( JsonProperty property , JsonConverter propertyConverter , JsonContainerContract containerContract , JsonProperty containerProperty , JsonReader reader , Object target ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject ( Object newObject , JsonReader reader , JsonObjectContract contract , JsonProperty member , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList ( IList list , JsonReader reader , JsonArrayContract contract , JsonProperty containerProperty , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , Object existingValue , String id ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal ( JsonReader reader , Type objectType , JsonContract contract , JsonProperty member , JsonContainerContract containerContract , JsonProperty containerMember , Object existingValue ) at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize ( JsonReader reader , Type objectType , Boolean checkAdditionalContent ) at Newtonsoft.Json.JsonSerializer.DeserializeInternal ( JsonReader reader , Type objectType ) at Newtonsoft.Json.JsonSerializer.Deserialize ( JsonReader reader , Type objectType ) at Newtonsoft.Json.JsonConvert.DeserializeObject ( String value , Type type , JsonSerializerSettings settings ) at Newtonsoft.Json.JsonConvert.DeserializeObject [ T ] ( String value , JsonSerializerSettings settings ) at TestNodaTime.Program.Main ( String [ ] args ) at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at System.AppDomain.ExecuteAssembly ( String assemblyFile , Evidence assemblySecurity , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ThreadHelper.ThreadStart_Context ( Object state ) at System.Threading.ExecutionContext.RunInternal ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) InnerException :"
return db.Subjects.SingleOrDefault ( s = > s.ID == ID ) ;
public abstract class Animal { public string Colour { get ; protected set ; } public int Legs { get ; protected set ; } public abstract string Speak ( ) ; } public class Dog : Animal { public Dog ( ) { Legs = 4 ; } public override string Speak ( ) { return `` Woof '' ; } } public sealed class Springer : Dog { public Springer ( ) { Colour = `` Liver and White '' ; } } public sealed class Chihuahua : Dog { public Chihuahua ( ) { Colour = `` White '' ; } public override string Speak ( ) { return `` *annoying* YAP ! `` ; } } public sealed class Dalmatian : Dog { public Dalmatian ( ) { Legs = 20 ; Colour = `` Black and White '' ; } }
"routes.MapRoute ( `` php '' , `` { *x } .php '' , new { controller = ... } ) ; A path segment that contains more than one section , such as a literal sectionor a parameter , can not contain a catch-all parameter.Parameter : routeUrl /p1/p2/p3.php/p1/p2.php/p1.php"
catalog.Catalogs.Add ( new AssemblyCatalog ( `` My.Assembly.Name ) ) ; var resourceNames = GetType ( ) .Assembly.GetManifestResourceNames ( ) ; foreach ( var resourceName in resourceNames )
procedure TNetFilesThrd.Execute ( ) ; begin try while ( not Terminated ) do begin // Check for new files // ... // Rest a little before spinning around again if ( not Terminated ) then Sleep ( TenSeconds ) ; end ; finally // Terminated ( or exception ) so free all resources ... end ; end ; // Rest a little before spinning around againnSleepCounter : = 0 ; while ( not Terminated ) and ( nSleepCounter < 500 ) do begin Sleep ( TwentyMilliseconds ) ; Inc ( nSleepCounter ) ; end ;
_gMonitor.CollectionChanged += new NotifyCollectionChangedEventHandler ( OnCollectionChanged ) ; _gMonitor.CollectionChanged += OnCollectionChanged ;
"public virtual System.IAsyncResult BeginGetCaseStatus ( int CaseOID , int ClientOID , System.AsyncCallback @ __Callback , object @ __UserData ) public virtual void EndGetCaseStatus ( System.IAsyncResult @ __AsyncResult , out DTGenericCode [ ] BasicStatus , out DTGenericCode [ ] ARStatus ) public Task < ? > GetCaseStatusAsync ( int CaseOID , int ClientOID ) { return Task.Factory.FromAsync ( BeginGetCaseStatus ( CaseOID , ClientOID , null , null ) , EndGetCaseStatus ( ? , ? ) ) ; }"
ref object reference = ref some_var ; ref reference = ref other_var ;
"SELECT * FROM dbo.Dogs where Active = ' A ' ; from d in myDataContext.Dogs where d.Active == ' A ' select d ; SELECT [ t0 ] .Name , [ t0 ] .ActiveFROM [ dbo ] . [ Dog ] AS [ t0 ] WHERE UNICODE ( [ t0 ] . [ Active ] ) = @ p1 ... where d.Active.ToString ( ) == EntityFunctions.AsNonUnicode ( ' A'.ToString ( ) ) ;"
public void SpinWait ( ) { for ( int i = 0 ; i < 10000 ; i++ ) { Task.Factory.StartNew ( ( ) = > { var sw = new SpinWait ( ) ; while ( true ) { sw.SpinOnce ( ) ; } } ) ; } }
private readonly List < string > _strings = new List < string > ( ) ; public IEnumerable < string > Strings { get { return _strings ; } } ( ( List < string > ) obj.Strings ) .Add ( `` Hacked '' ) ;
"string xsdPath = `` base.xsd '' ; XDocument doc = XDocument.Load ( xmlPath ) ; XmlSchemaSet schemas = new XmlSchemaSet ( ) ; schemas.Add ( `` http : //some.domain.org '' , xsdPath ) ; schemas.Compile ( ) ; bool isValid = true ; doc.Validate ( schemas , ( o , e ) = > { res.AddMessage ( MessageSeverities.Error , $ '' { e.Severity } : { e.Message } '' ) ; isValid = false ; } ) ; if ( isValid ) { res.AddMessage ( MessageSeverities.Notice , $ '' { formFile.FileName } is valid ! `` ) ; } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < xs : schema targetNamespace= '' http : //some.domain.org '' xmlns= '' http : //some.domain.org '' xmlns : xs= '' http : //www.w3.org/2001/XMLSchema '' elementFormDefault= '' qualified '' > < xs : include id= '' enums '' schemaLocation= '' enums.xsd '' / > < xs : complexType name= '' tAccountingLines '' > < xs : sequence > < xs : element name= '' AccountingLine '' type = '' tAccountingLine '' > < /xs : element > < /xs : sequence > < /xs : complexType > < xs : complexType name= '' tAccountingLine '' > < xs : sequence > < xs : element name= '' AccountingType '' type= '' tAccountingItemTypes '' > < /xs : element > < /xs : element > < /xs : sequence > < /xs : complexType > < /xs : schema > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < xs : schema targetNamespace= '' http : //some.domain.org '' xmlns= '' http : //some.domain.org '' xmlns : xs= '' http : //www.w3.org/2001/XMLSchema '' elementFormDefault= '' qualified '' > < xs : simpleType name= '' tAccountingItemTypes '' > < xs : restriction base= '' xs : string '' > < xs : enumeration value= '' V1 '' / > < xs : enumeration value= '' V2 '' / > < xs : enumeration value= '' V3 '' / > < /xs : restriction > < /xs : simpleType > < /xs : schema >"
"int upperCount = 0 ; int lowerCount = 0 ; int digitCount = 0 ; int symbolCount = 0 ; for ( int i = 0 ; i < password.Length ; i++ ) { if ( Char.IsUpper ( password [ i ] ) ) upperCount++ ; else if ( Char.IsLetter ( password [ i ] ) ) lowerCount++ ; else if ( Char.IsDigit ( password [ i ] ) ) digitCount++ ; else if ( Char.IsSymbol ( password [ i ] ) ) symbolCount++ ; Regex Expression = new Regex ( `` ( { ( ? =.* [ a-z ] ) ( ? =.* [ A-Z ] ) . { 8 , } } | { ( ? =.* [ A-Z ] ) ( ? ! .*\\s ) . { 8 , } } ) '' ) ; bool test= Expression.IsMatch ( txtBoxPass.Text ) ;"
"public static IEnumerable < T > Foo < T > ( this IEnumerable < T > source , int ? howmany = null ) { if ( howmany.HasValue ) return source.Take ( howmany.Value ) ; return source ; } public static List < TTarget > Bar < TTarget , TSource > ( this IEnumerable < TSource > source ) { return new List < TTarget > ( source.Count ( ) ) ; } public static ListResponse < TResponse > BuildListResponse < T , TResponse > ( this IQueryable < T > iq , ListRequest request ) where TResponse : new ( ) { var result = iq.ApplyListRequestParams ( request ) .ToList ( ) .ConvertAll ( x = > x.TranslateTo < TResponse > ( ) ) ; var tcount = iq.Count ( ) ; return new ListResponse < TResponse > { Items = result , _TotalCount = tcount , _PageNumber = request._PageNumber ? ? 1 , } ; }"
"public class MyObject { public Int32 MyVariables = 0 ; } public class MyObject { public Int32 MyVariables = 0 ; public Dictionary < string , MyEnum > MyDict = new Dictionary < string , MyEnum > ( ) ; } System.Runtime.Serialization.Formatters.Binary.BinaryFormatter formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter ( ) ; object obj = formatter.Deserialize ( File.Open ( Path , FileMode.Open ) ) ;"
public class StartPoint { public int StartPointId { get ; set ; } public string Description { get ; set ; } public int StartPointNumber { get ; set ; } public int StartAreaId { get ; set ; } public StartArea StartArea { get ; set ; } } public class StartArea { public int StartAreaId { get ; set ; } public string Description { get ; set ; } public ICollection < StartPoint > StartPoints { get ; set ; } } modelBuilder.Entity < StartPoint > ( ) .HasRequired ( x = > x.StartArea ) .WithMany ( ) .HasForeignKey ( x = > x.StartAreaId ) .WillCascadeOnDelete ( false ) ;
"[ RegisterAction ( `` MyPlugin '' , typeof ( bool ) , typeof ( MyPlugin ) ) ] public class MyPlugin : IStrategy < bool > { public IStrategyResult < bool > Execute ( ISerializable info = null ) { bool result ; try { // do stuff result = true ; } catch ( Exception ) { result = false ; } return new StrategyResult < bool > { Value = result } ; } } [ AttributeUsage ( AttributeTargets.Class ) ] public sealed class RegisterActionAttribute : Attribute { public StrategyAction StrategyAction { get ; } public RegisterActionAttribute ( string actionName , Type targetType , Type returnType , params string [ ] depdencies ) { StrategyAction = new StrategyAction { Name = actionName , StrategyType = targetType , ResponseType = returnType , Dependencies = depdencies } ; } } public interface IStrategy < T > { IStrategyResult < T > Execute ( ISerializable info = null ) ; } public interface IStrategyResult < T > { bool IsValid { get ; set ; } T Value { get ; set ; } } [ ExecuteAction ( `` MyPlugin '' ) ] public dynamic Execute ( string action , params object [ ] parameters ) { var strategyAction = _registeredActions.FirstOrDefault ( a = > a.Name == action ) ; if ( strategyAction == null ) return null ; var type = typeof ( IStrategy < > ) ; var generic = type.MakeGenericType ( strategyAction.StrategyType ) ; var returnType = typeof ( IStrategyResult < > ) ; var genericReturn = returnType.MakeGenericType ( strategyAction.ResponseType ) ; var instance = UnityManager.Container.Resolve ( generic , strategyAction.Name ) ; var method = instance.GetType ( ) .GetMethod ( `` Execute '' ) ; return method.Invoke ( instance , parameters ) ; } public List < dynamic > ExecuteQueuedActions ( ) { var results = new List < dynamic > ( ) ; var actions = _queuedActions.AsQueryable ( ) ; var sortedActions = TopologicalSort.Sort ( actions , action = > action.Dependencies , action = > action.Name ) ; foreach ( var strategyAction in sortedActions ) { _queuedActions.Remove ( strategyAction ) ; results.Add ( Execute ( strategyAction.Name ) ) ; } return results ; }"
"\w* [ ^aoyie ] [ aoyie ] ( [ ^aoyie ] ) \1 ( ed|ing|ied ) List < Book_to_Word > allWords = ( from f in db2.Book_to_Words.AsEnumerable ( ) select f ) .ToList ( ) ; List < Book_to_Word > wordsNOTExist = ( from f in allWords where Regex.IsMatch ( f.WordStr , @ '' ^ ( \w* [ ^aoyie ] + [ aoyie ] ( [ ^aoyie ] ) ( ed|ing|ied ) ) $ '' ) select f ) .ToList ( ) ;"
"[ MessageContract ] public class HelloResponseMessage { [ MessageHeader ( ProtectionLevel=EncryptAndSign ) ] public string SSN { get { return extra ; } set { this.extra = value ; } } } MessageHeader header = MessageHeader.CreateHeader ( `` SessionKey '' , `` ns '' , _key ) ; OperationContext.Current.OutgoingMessageHeaders.Add ( header ) ;"
"interface A { void DoA ( ) ; } interface B { void DoB ( ) ; } class ABCollection { private class ABWrapper : A , B { private readonly A a ; private readonly B b ; public static ABWrapper Create < T > ( T x ) where T : A , B { return new ABWrapper { a = x , b = x } ; } public void DoA ( ) { a.DoA ( ) ; } public void DoB ( ) { b.DoB ( ) ; } } private List < ABWrapper > data = new List < ABWrapper > ( ) ; public void Add < T > ( T val ) where T : A , B { data.Add ( ABWrapper.Create ( val ) ) ; } } private List < A and B > ..."
Type _nullableEnumType = typeof ( Enum ? ) ; Type _nullableDecimalType = typeof ( decimal ? ) ;
DirectoryInfo.GetFiles ( ) .Length 2.147.483.647 ( Int32.MaxValue ) 4.294.967.295 single files in one folder ( probably an Uint32 )
"Console.Write ( `` Test 1 : Console.TreatControlCAsInput = false\nType \ '' hello\ '' : `` ) ; { string readline = Console.ReadLine ( ) ; // type `` hello '' [ enter ] . Console.WriteLine ( `` You typed : { 0 } '' , readline ) ; // Prints `` hello '' . } Console.Write ( `` Test 2 : Console.TreatControlCAsInput = true\nType \ '' hello\ '' : `` ) ; Console.TreatControlCAsInput = true ; { string readline = Console.ReadLine ( ) ; // type `` hello '' [ enter ] . Console.WriteLine ( `` You typed : { 0 } '' , readline ) ; // Should print `` hello '' - but instead , you have to press [ enter ] // *twice* to complete the ReadLine ( ) command , and it adds a `` \r '' // rather than a `` \n '' to the output ( so it overwrites the original line ) } // This bug is a fatal error , because it makes all ReadLine ( ) commands unusable . Console.Write ( `` [ any key to exit ] '' ) ; Console.ReadKey ( ) ;"
public void ProcessRecords ( ) { SetMaxNumberOfThreads ( 20 ) ; MyRecord rec ; while ( ( rec = GetNextRecord ( ) ) ! = null ) { var task = WaitForNextAvailableThreadFromPool ( ProcessRecord ( rec ) ) ; task.Start ( ) } }
typeof ( DateTime ) .IsAutoLayout /* true */ typeof ( DateTime ) .StructLayoutAttribute.Value /* Auto */ .class public auto ansi serializable sealed beforefieldinit System.DateTime ¯¯¯¯
var result = await ( from itm in _itemDataContext.Items where itm.QryGroup1 == `` Y '' & & _itemDataContext.Dbo_MyCustomScalarIntFn ( itm.QryGroup2 ) > 0 ) .ToArrayAsync ( ) ;
"public void GetTokenInfo ( ) { try { var uri = new Uri ( string.Format ( _host + `` webserver/SesTokInfo '' , string.Empty ) ) ; var webRequest = WebRequest.Create ( uri ) ; using ( var response = webRequest.GetResponse ( ) as HttpWebResponse ) { using ( var requestStream = response.GetResponseStream ( ) ) { using ( var reader = new StreamReader ( requestStream ) ) { var content = reader.ReadToEnd ( ) ; XmlDocument xDocument = new XmlDocument ( ) ; xDocument.LoadXml ( content ) ; XmlElement root = xDocument.DocumentElement ; if ( IsResponseReturned ( root ) ) { GlobalConfig.SessionId = root.GetElementsByTagName ( `` SesInfo '' ) [ 0 ] .InnerText ; GlobalConfig.Token = root.GetElementsByTagName ( `` TokInfo '' ) [ 0 ] .InnerText ; } } } } } catch ( Exception exception ) { Debug.WriteLine ( exception ) ; } } public WebResponse PostData ( string body , string url ) { WebResponse webResponse = null ; try { var uri = new Uri ( string.Format ( _host + url , string.Empty ) ) ; var webRequest = ( HttpWebRequest ) WebRequest.Create ( uri ) ; webRequest.Headers.Add ( `` Cookie '' , GlobalConfig.SessionId ) ; webRequest.Headers.Add ( `` _RequestVerificationToken '' , GlobalConfig.Token ) ; webRequest.Method = `` POST '' ; webRequest.ContentType = `` application/xml '' ; byte [ ] bytes = Encoding.UTF8.GetBytes ( body ) ; webRequest.ContentLength = bytes.Length ; Stream requestStream = webRequest.GetRequestStream ( ) ; requestStream.Write ( bytes , 0 , bytes.Length ) ; webResponse = webRequest.GetResponse ( ) ; } catch ( Exception exception ) { Console.WriteLine ( exception ) ; } return webResponse ; }"
"class Program { static Stopwatch stopwatch = new Stopwatch ( ) ; static Program program = new Program ( ) ; static void Main ( ) { Console.WriteLine ( `` main method : '' ) ; Benchmark ( ) ; Console.WriteLine ( ) ; new Program ( ) ; } static Program ( ) { Console.WriteLine ( `` static constructor : '' ) ; Benchmark ( ) ; Console.WriteLine ( ) ; } public Program ( ) { Console.WriteLine ( `` public constructor : '' ) ; Benchmark ( ) ; Console.WriteLine ( ) ; } static void Benchmark ( ) { for ( int t = 0 ; t < 5 ; t++ ) { stopwatch.Reset ( ) ; stopwatch.Start ( ) ; for ( int i = 0 ; i < 1000000 ; i++ ) IsPrime ( 2 * i + 1 ) ; stopwatch.Stop ( ) ; Console.WriteLine ( stopwatch.ElapsedMilliseconds + `` ms '' ) ; } } static Boolean IsPrime ( int x ) { if ( ( x & 1 ) == 0 ) return x == 2 ; if ( x < 2 ) return false ; for ( int i = 3 , s = ( int ) Math.Sqrt ( x ) ; i < = s ; i += 2 ) if ( x % i == 0 ) return false ; return true ; } } // static Program program = new Program ( ) public constructor:894 ms895 ms887 ms884 ms883 msstatic constructor:880 ms872 ms876 ms876 ms872 msmain method:426 ms428 ms426 ms426 ms426 ms// new Program ( ) in Main ( ) public constructor:426 ms427 ms426 ms426 ms426 ms // static Program program = new Program ( ) public constructor:2039 ms2024 ms2020 ms2019 ms2013 msstatic constructor:2019 ms2028 ms2019 ms2021 ms2020 msmain method:1120 ms1120 ms1119 ms1120 ms1120 ms// new Program ( ) in Main ( ) public constructor:1120 ms1128 ms1124 ms1120 ms1122 ms"
public IEnumerable < Dog > GrowAll ( this IEnumerable < Puppy > puppies ) { if ( subjects == null ) throw new ArgumentNullException ( `` subjects '' ) ; foreach ( var puppy in puppies ) yield return puppy.Grow ( ) ; } Puppy [ ] puppies = null ; Assert.Throws < ArgumentNullException > ( ( ) = > puppies.GrowAll ( ) ) ; Puppy [ ] puppies = null ; Assert.Throws < ArgumentNullException > ( ( ) = > puppies.GrowAll ( ) .ToArray ( ) ) ;
"Write ( `` Please enter the first name : `` , false ) ; string fName = Console.ReadLine ( ) .ToUpper ( ) ; Write ( `` Please enter the middle initial : `` , false ) ; string mInitial = Console.ReadLine ( ) .ToUpper ( ) ; Write ( `` Please enter the last name : `` , false ) ; string lName = Console.ReadLine ( ) .ToUpper ( ) ;"
"IProxy < T > AddInterceptor < T1 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , TResult > , T1 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , TResult > , T1 , T2 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , TResult > , T1 , T2 , T3 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , TResult > , T1 , T2 , T3 , T4 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , TResult > , T1 , T2 , T3 , T4 , T5 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , TResult > func ) ; IProxy < T > AddInterceptor < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , TResult > ( Expression < Action < T > > functionOrProperty , Func < Func < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , TResult > , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , TResult > func ) ;"
"public class Program { public static void Main ( ) { string url = `` http : //anus.io '' ; Console.WriteLine ( `` Initializing Request State Object '' ) ; RequestState myRequestState = new RequestState ( ) ; // Creating Http Request myRequestState.request = ( HttpWebRequest ) WebRequest.Create ( url ) ; myRequestState.request.Method = `` GET '' ; myRequestState.request.ReadWriteTimeout = 4000 ; myRequestState.request.Timeout = 4000 ; Console.WriteLine ( `` Begining Async Request '' ) ; IAsyncResult ar = myRequestState.request.BeginGetResponse ( new AsyncCallback ( ResponseCallback ) , myRequestState ) ; Console.WriteLine ( `` Waiting for Results '' ) ; ar.AsyncWaitHandle.WaitOne ( ) ; myRequestState.response = ( HttpWebResponse ) myRequestState.request.EndGetResponse ( ar ) ; Console.WriteLine ( `` Response status code = { 0 } '' , myRequestState.response.StatusCode ) ; } public static void ResponseCallback ( IAsyncResult asyncResult ) { Console.WriteLine ( `` Completed '' ) ; } }"
"SomeControl.Click += null ; public static void AddHandlers ( [ NotNull ] this Button button , [ CanBeNull ] EventHandler click = null , [ CanBeNull ] EventHandler load = null ) { button.Click += click ; button.Load += load ; }"
"[ Route ( `` api/ [ controller ] '' ) ] public class ValuesController : Controller { // GET api/values [ HttpGet ] public IEnumerable < string > Get ( ) { Console.WriteLine ( `` GET Index '' ) ; throw new Exception ( ) ; } // POST api/values [ HttpPost ] public void Post ( ) { Console.WriteLine ( `` POST Index '' ) ; throw new Exception ( ) ; } } [ Route ( `` api/ [ controller ] '' ) ] public class DebugController : Controller { [ HttpGet ( `` error '' ) ] public IActionResult Index ( ) { return StatusCode ( 500 , '' Hello , World ! From debug controller '' ) ; } }"
public List < string > MembershipIds { get ; set ; } = new List < string > ( ) ;
"public interface IList < T > : ICollection < T > , IEnumerable < T > , IEnumerablepublic interface ICollection < T > : IEnumerable < T > , IEnumerablepublic interface IEnumerable < T > : IEnumerable public interface IList < T > : ICollection < T > public interface IOne { string One ( ) ; } public interface ITwo : IOne { string Two ( ) ; } public interface IThree : ITwo , IOne { string Three ( ) ; }"
for ( int i = 0 ; i < 100 * 1000 * 1000 ; ++i ) { ms_Sum += 1 ; } for ( int i = 0 ; i < 50 * 1000 * 1000 ; ++i ) { ms_Sum += 1 ; } for ( int i = 0 ; i < 50 * 1000 * 1000 ; ++i ) { lock ( ms_Lock ) { } ; // Note curly brackets ms_Sum += 1 ; }
"IQueryable < COLOURS > renkler = dbcontext.colours.Select ( s= > new COLOURS { ... . renkler.OrderBy ( o = > Guid.NewGuid ( ) ) .Take ( 2 ) ; var result = NewProducts ( ) .OrderBy ( o = > Guid.NewGuid ( ) ) .Take ( 2 ) ; int result_count = result.Count ( ) ; //This value is 2 : D //but ToList ( ) result 5 : D public IQueryable < COLOURS > NewProducts ( ) { DateTime simdi = DateTime.Now ; DateTime simdi_30 = DateTime.Now.AddDays ( -30 ) ; var collection_products = DefaultColours ( ) .Where ( w = > ( ( w.add_date.Value > = simdi_30 & & w.add_date.Value < = simdi ) || w.is_new == true ) ) .OrderByDescending ( o = > o.add_date ) .Take ( 200 ) .Select ( s = > new COLOURS { colour_code = s.colour_code , model_code = s.products.model_code , sell_price = ( decimal ) s.sell_price , market_price = ( decimal ) s.market_price , is_new = ( bool ) s.is_new , product_id = ( int ) s.product_id , colour_name = s.name , product_name = s.products.name , description = s.products.description , img_path = s.product_images.FirstOrDefault ( f = > f.is_main == true ) .img_path , category_id = ( int ) s.category_relations.FirstOrDefault ( ) .category_id , display_order = ( short ) s.display_order , section_id = ( int ) s.products.section_id , stock_amount = s.pr_sizes.Where ( w = > w.is_active == true & & w.quantity > = 0 ) .Count ( ) > 0 ? ( int ) s.pr_sizes.Where ( w = > w.is_active == true & & w.quantity > = 0 ) .Sum ( s2 = > s2.quantity ) : 0 , section_name = s.products.pr_sections.name , } ) ; return collection_products ; } public IQueryable < COLOURS > RandomNewProducts ( int n ) { var result = NewProducts ( ) .OrderBy ( o = > Guid.NewGuid ( ) ) .Take ( n ) ; int result_count = result.Count ( ) ; //2 //When I run this method it 's getting 5 rows return result ; }"
"public enum MyEnum { OptionOne = 0 , OptionTwo = 2 , OptionThree = 4 } public class Enumer { public static MyEnum ? ParseEnum ( string input ) { try { return ( MyEnum ) Enum.Parse ( typeof ( MyEnum ) , input ) ; } catch ( ArgumentException ) { return null ; } } } [ TestClass ] public class Tester { [ TestMethod ] public void TestEnum ( ) { Assert.AreEqual ( MyEnum.OptionTwo , Enumer.ParseEnum ( `` OptionTwo '' ) ) ; Assert.IsNull ( Enumer.ParseEnum ( `` WrongString '' ) ) ; Assert.IsNull ( Enumer.ParseEnum ( `` 2 '' ) ) ; // returns 2 instead of null Assert.IsNull ( Enumer.ParseEnum ( `` 12345 '' ) ) ; // returns 12345 instead of null } }"
"//string [ ] days = { `` lunes '' , `` martes '' , `` miércoles '' , `` jeuves '' , `` viernes '' , `` sábado '' , `` domingo '' } ; string [ ] days = { `` L '' , `` M '' , `` X '' , `` J '' , `` V '' , `` S '' , `` D '' } ;"
"var odataFormatters = ODataMediaTypeFormatters.Create ( ) ; odataFormatters.Add ( new MyDataMediaTypeFormatter ( ) ) ; config.Formatters.InsertRange ( 0 , odataFormatters ) ; public class MyODataMediaTypeFormatter : ODataMediaTypeFormatter { static IEnumerable < ODataPayloadKind > payloadKinds = new List < ODataPayloadKind > { ODataPayloadKind.Asynchronous , ODataPayloadKind.Batch , ODataPayloadKind.BinaryValue , ODataPayloadKind.Collection , ODataPayloadKind.EntityReferenceLink , ODataPayloadKind.EntityReferenceLinks , ODataPayloadKind.Error , ODataPayloadKind.Delta , ODataPayloadKind.IndividualProperty , ODataPayloadKind.MetadataDocument , ODataPayloadKind.Parameter , ODataPayloadKind.Resource , ODataPayloadKind.ServiceDocument , ODataPayloadKind.Unsupported , ODataPayloadKind.Value } ; public MyODataMediaTypeFormatter ( ) : base ( payloadKinds ) { } }"
"private Boolean GetAdditionalUserInfo ( ) { // if authentication info is saved , do n't go find it if ( Session [ `` UID '' ] ! = null ) return true ; // get the db employee id from the database and save it to the session var r = ( from e in db.Employees where e.Email == User.Identity.Name select new { e.Emp_ID , e.Group_ID } ) .SingleOrDefault ( ) ; if ( ( r == null ) || ( r.Group_ID == ( int ) Role.Inactive ) ) { // could n't find record or inactive return false ; } // Update last login datetime Employee ell = db.Employees.Find ( r.Emp_ID ) ; ell.LastLogin = DateTime.Now ; db.SaveChangesAsync ( ) ; // Save user details to the session Session [ `` UID '' ] = r.Emp_ID ; // TBD : Investigate `` CLAIMS '' - this should probably be a claim Session [ `` Role '' ] = r.Group_ID ; return true ; } public partial class Startup { private static string clientId = ConfigurationManager.AppSettings [ `` ida : ClientId '' ] ; private static string aadInstance = ConfigurationManager.AppSettings [ `` ida : AADInstance '' ] ; private static string tenantId = ConfigurationManager.AppSettings [ `` ida : TenantId '' ] ; private static string postLogoutRedirectUri = ConfigurationManager.AppSettings [ `` ida : PostLogoutRedirectUri '' ] ; //private static string authority = aadInstance + tenantId ; // to make this multi tenant , use common endpoint , not the tenant specific endpointprivate static string authority = aadInstance + `` common '' ; public void ConfigureAuth ( IAppBuilder app ) { app.SetDefaultSignInAsAuthenticationType ( CookieAuthenticationDefaults.AuthenticationType ) ; // https : //stackoverflow.com/questions/20737578/asp-net-sessionid-owin-cookies-do-not-send-to-browser app.UseKentorOwinCookieSaver ( ) ; app.UseCookieAuthentication ( new CookieAuthenticationOptions ( ) ) ; app.UseOpenIdConnectAuthentication ( new OpenIdConnectAuthenticationOptions { ClientId = clientId , Authority = authority , PostLogoutRedirectUri = postLogoutRedirectUri , TokenValidationParameters = new TokenValidationParameters { // If you do n't add this , you get IDX10205 // from here http : //charliedigital.com/2015/03/14/adding-support-for-azure-ad-login-o365-to-mvc-apps/ ValidateIssuer = false } , Notifications = new OpenIdConnectAuthenticationNotifications { RedirectToIdentityProvider = ctx = > { bool isAjaxRequest = ( ctx.Request.Headers ! = null & & ctx.Request.Headers [ `` X-Requested-With '' ] == `` XMLHttpRequest '' ) ; if ( isAjaxRequest ) { ctx.Response.Headers.Remove ( `` Set-Cookie '' ) ; ctx.State = NotificationResultState.HandledResponse ; } return System.Threading.Tasks.Task.FromResult ( 0 ) ; } } } ) ; } }"
string expression = `` q ( \\d* ) ( M ) ? ( T ( ? ! H ) ) ? ( W ) ? ( TH ) ? ( F ) ? ( S ( ? ! U ) ) ? ( SU ) ? `` ;
"bool bWasAlreadyLocked = false ; oEnv.LockDoc ( oWarnings , oEventDoc , ref bWasAlreadyLocked ) ; void CBkgDocEnvX : :LockDoc ( CFIWarningList ^oWarnings , CBaseDoc ^oBaseDoc , // Outputbool % rbWasAlreadyLocked )"
C : \LAME > LAME.exeLAME 32-bits version 3.98.2 ( http : //www.mp3dev.org/ ) usage : blah blahblah blahC : \LAME >
namespace Domain.Interfaces { public interface IUserRepository { IEnumerable < User > GetUsers ( ) ; } } namespace Services.Interfaces { public interface IUserService { IEnumerable < User > GetUsers ( ) ; } } namespace Services { public class UserService : IUserService { private readonly IUserRepository _repository ; public UserService ( IUserRepository repository ) { _repository = repository ; } public IEnumerable < User > GetUsers ( ) { return _repository.GetUsers ( ) ; } } } private readonly IUserService _service ; public HomeController ( IUserService service ) { _service = service ; }
"var application = new Microsoft.Office.Interop.Word.Application ( ) ; application.Visible = false ; try { application.ShowStartupDialog = false ; } catch { } try { application.DisplayAlerts = WdAlertLevel.wdAlertsNone ; } catch { } var doc = application.Documents.Open ( inputFilePath , ConfirmConversions : false , ReadOnly : true , AddToRecentFiles : false , Revert : true , NoEncodingDialog : true ) ;"
< TextBox x : Name= '' txtNotes '' Grid.Column= '' 2 '' TextWrapping= '' WrapWholeWords '' Text= '' TextBlock '' Margin= '' 30 '' FontSize= '' 20 '' / >
"using System ; using System.IO ; using NUnit.Framework ; using ProtoBuf ; using ProtoBuf.Meta ; namespace ProtoBufTestA2 { [ TestFixture ] public class Tester { [ Test ] public void TestMsgBaseCreateModel ( ) { var BM_SD = new Container < SomeDerived > ( ) ; using ( var o = BM_SD ) { o.prop1 = 42 ; o.payload = new SomeDerived ( ) ; using ( var d = o.payload ) { d.SomeBaseProp = -42 ; d.SomeDerivedProp = 62 ; } } var BM_SB = new Container < SomeBase > ( ) ; using ( var o = BM_SB ) { o.prop1 = 42 ; o.payload = new SomeBase ( ) ; using ( var d = o.payload ) { d.SomeBaseProp = 84 ; } } var model = TypeModel.Create ( ) ; model.Add ( typeof ( Container < SomeDerived > ) , true ) ; // BM_SD model.Add ( typeof ( Container < SomeBase > ) , true ) ; // BM_SB model.Add ( typeof ( SomeBase ) , true ) ; // SB model.Add ( typeof ( SomeDerived ) , true ) ; // SD model [ typeof ( SomeBase ) ] .AddSubType ( 50 , typeof ( SomeDerived ) ) ; // SD var ms = new MemoryStream ( ) ; model.SerializeWithLengthPrefix ( ms , BM_SD , BM_SD.GetType ( ) , ProtoBuf.PrefixStyle.Base128 , 0 ) ; model.SerializeWithLengthPrefix ( ms , BM_SB , BM_SB.GetType ( ) , ProtoBuf.PrefixStyle.Base128 , 0 ) ; ms.Position = 0 ; var o1 = ( Container < SomeDerived > ) model.DeserializeWithLengthPrefix ( ms , null , typeof ( Container < SomeDerived > ) , PrefixStyle.Base128 , 0 ) ; var o2 = ( Container < SomeBase > ) model.DeserializeWithLengthPrefix ( ms , null , typeof ( Container < SomeBase > ) , PrefixStyle.Base128 , 0 ) ; } } [ ProtoContract ] public class Container < T > : IDisposable { [ ProtoMember ( 1 ) ] public int prop1 { get ; set ; } [ ProtoMember ( 2 ) ] public T payload { get ; set ; } public void Dispose ( ) { } } [ ProtoContract ] public class AnotherDerived : SomeDerived , IDisposable { [ ProtoMember ( 1 ) ] public int AnotherDerivedProp { get ; set ; } public override void Dispose ( ) { } } [ ProtoContract ] public class SomeDerived : SomeBase , IDisposable { [ ProtoMember ( 1 ) ] public int SomeDerivedProp { get ; set ; } public override void Dispose ( ) { } } [ ProtoContract ] public class SomeBase : IDisposable { [ ProtoMember ( 1 ) ] public int SomeBaseProp { get ; set ; } public virtual void Dispose ( ) { } } [ ProtoContract ] public class NotInvolved : IDisposable { [ ProtoMember ( 1 ) ] public int NotInvolvedProp { get ; set ; } public void Dispose ( ) { } } [ ProtoContract ] public class AlsoNotInvolved : IDisposable { [ ProtoMember ( 1 ) ] public int AlsoNotInvolvedProp { get ; set ; } public void Dispose ( ) { } } } ( Container < SomeDerived > ) model.DeserializeWithLengthPrefix ( ... ) model.DeserializeWithLengthPrefix < Container < SomeDerived > > ( ... ) : public MetaType Add ( int fieldNumber , string memberName , Type itemType , Type defaultType ) ;"
"// do n't want to create dependency here like so//IFileInfoWrap fileInfoWrap = new FileInfoWrap ( filename ) ; // using service locator ( anti-pattern ? ! ) since it ca n't be // injected in this classvar fileInfoWrap = ObjectFactory.GetInstance < IFileInfoWrap > ( new ExplicitArguments ( new Dictionary < string , object > { { `` fileName '' , filename } } ) ) ; Console.WriteLine ( `` File exists ? { 0 } '' , fileInfoWrap.Exists ) ; ObjectFactory.Initialize ( x = > { x.Scan ( scan = > { scan.AssembliesFromPath ( `` . `` ) ; scan.RegisterConcreteTypesAgainstTheFirstInterface ( ) ; scan.WithDefaultConventions ( ) ; } ) ; // use the correct constructor ( string instead of FileInfo ) x.SelectConstructor ( ( ) = > new FileInfoWrap ( null as string ) ) ; // setting the value of the constructor x.For < IFileInfoWrap > ( ) .Use < FileInfoWrap > ( ) .Ctor < string > ( `` fileName '' ) .Is ( @ '' . `` ) ; } ) ;"
"@ model Eriene.Mvc.Models.AccountVM < div class= '' row '' > < div class= '' col-md-6 '' > @ Html.Partial ( `` _Login '' , Model.Login ? ? new Eriene.Mvc.Models.LoginVM ( ) ) < /div > < div class= '' col-md-6 '' > @ Html.Partial ( `` _Register '' , Model.Register ? ? new Eriene.Mvc.Models.RegisterVM ( ) ) < /div > < /div > @ using ( Html.BeginForm ( `` Register '' , `` Account '' , FormMethod.Post , new { @ id = `` login-form '' , @ role = `` form '' , @ class = `` login-form cf-style-1 '' } ) ) [ HttpPost ] [ AllowAnonymous ] public ActionResult Register ( RegisterVM registerVM ) { if ( ModelState.IsValid ) { User user = new Data.User ( ) ; user.Email = registerVM.Email ; user.ActivationCode = Guid.NewGuid ( ) .ToString ( ) ; user.FirstName = registerVM.FirstName ; user.LastName = registerVM.LastName ; user.Password = PasswordHelper.CreateHash ( registerVM.Password ) ; return RedirectToAction ( `` Index '' , `` Home '' ) ; } return View ( `` Authentication '' , new AccountVM ( ) { Register = registerVM } ) ; } public class AccountVM { public LoginVM Login { get ; set ; } public RegisterVM Register { get ; set ; } } public class RegisterVM { [ Required ] public string Email { get ; set ; } [ Required ] public string FirstName { get ; internal set ; } [ Required ] public string LastName { get ; internal set ; } [ Required ] public string Password { get ; internal set ; } [ Compare ] public string PasswordRetype { get ; internal set ; } } public class LoginVM { [ Required ] public string Email { get ; set ; } [ Required ] public string Password { get ; set ; } public bool RememberMe { get ; set ; } }"
interface IFoo { void randomClass ( ) } class RandomClass { }
"http : //localhost:51638/Reserve/ public static void RegisterRoutes ( RouteCollection routes ) { routes.IgnoreRoute ( `` { resource } .axd/ { *pathInfo } '' ) ; // BotDetect requests must not be routed routes.IgnoreRoute ( `` { *botdetect } '' , new { botdetect = @ '' ( . * ) BotDetectCaptcha\.ashx '' } ) ; routes.MapRoute ( name : `` Default '' , url : `` { controller } / { action } / { id } '' , defaults : new { controller = `` UserHome '' , action = `` Index '' , id = UrlParameter.Optional } ) ; } public class ReserveController : Controller { // // GET : /Reserve/ public ActionResult Index ( ) { return View ( ) ; } }"
"void Foo ( IEnumerable < int > a , IEnumerable < int > b ) { // caching them . they are not huge or infinite in my scenario var a = a.ToList ( ) ; var b = b.ToList ( ) ; if ( a.Count ( ) ! = b.Count ( ) ) { throw ... ; } Enumerable.Zip ( a , b , ... ) ; }"
"using ( var ( disposable , number ) = foo ( ) ) { // do some stuff using disposable and number }"
"< endpoint address= '' Address 1 '' binding= '' wsHttpBinding '' bindingConfiguration= '' DefaultBindingConfiguration '' name= '' RemoteEndpoint '' / > < endpoint address= '' Address 2 '' binding= '' wsHttpBinding '' bindingConfiguration= '' DefaultBindingConfiguration '' name= '' LocalEndpoint '' / > public void createServiceProxy ( ) { if ( Util.IsOperatingLocally ( ) ) this.proxy = new ProxyClient ( `` LocalEndpoint '' ) ; else this.proxy = new ProxyClient ( `` RemoteEndpoint '' ) ; } < endpoint address= '' '' binding= '' wsHttpBinding '' bindingConfiguration= '' DefaultBindingConfiguration '' name= '' MyEndpointName '' / > public void createServiceProxy ( ) { if ( Util.IsOperatingLocally ( ) ) this.proxy = new ProxyClient ( `` MyEndpointName '' , `` Address 1 '' ) ; else this.proxy = new ProxyClient ( `` MyEndpointName '' , `` Address 2 '' ) ; } < client > < endpoint address= '' http : //localhost:3471/Service.svc '' binding= '' customBinding '' bindingConfiguration= '' MyEndpointName '' contract= '' MyService.IService '' name= '' MyEndpointName '' > < identity > < userPrincipalName value= '' DevMachine\UserNa , e '' / > < /identity > < /endpoint > < /client >"
Type someName = new Type ( ) ; IList < TypeTwo > someOther = someClass.getStuff ( ) ; var someOther = someClass.getStuff ( ) ;
"using System.Collections.Generic ; using System.Linq ; namespace ConsoleApplication6 { public class Program { static void Main ( ) { var myEnum = MyEnum.Good ; var list = new List < MyData > { new MyData { Id = 1 , Code = `` 1 '' } , new MyData { Id = 2 , Code = `` 2 '' } , new MyData { Id = 3 , Code = `` 3 '' } } ; // Evaluates to false if ( myEnum == MyEnum.Bad ) // BREAK POINT { /* * A first chance exception of type 'System.NullReferenceException ' occurred in ConsoleApplication6.exe Additional information : Object reference not set to an instance of an object . */ var x = new MyClass ( ) ; MyData result ; //// With this line the 'System.NullReferenceException ' gets thrown in the line above : result = list.FirstOrDefault ( r = > r.Code == x.Code ) ; //// But with this line , with ' x ' not referenced , the code above runs ok : //result = list.FirstOrDefault ( r = > r.Code == `` x.Code '' ) ; } } } public enum MyEnum { Good , Bad } public class MyClass { public string Code { get ; set ; } } public class MyData { public int Id { get ; set ; } public string Code { get ; set ; } } } using System.Collections.Generic ; using System.Linq ; namespace ConsoleApplication6 { public class Program { static void Main ( ) { var myEnum = MyEnum.Good ; var list = new List < MyData > { new MyData { Id = 1 , Code = `` 1 '' } , new MyData { Id = 2 , Code = `` 2 '' } , new MyData { Id = 3 , Code = `` 3 '' } } ; // Evaluates to false if ( myEnum == MyEnum.Bad ) // BREAK POINT { MyMethod ( list ) ; } } private static void MyMethod ( List < MyData > list ) { // When the code is in this method , it works fine var x = new MyClass ( ) ; MyData result ; result = list.FirstOrDefault ( r = > r.Code == x.Code ) ; } } public enum MyEnum { Good , Bad } public class MyClass { public string Code { get ; set ; } } public class MyData { public int Id { get ; set ; } public string Code { get ; set ; } } }"
public class MyBaseClass { } public class MyClass : MyBaseClass { } public class B < T > { } public class A < T > : B < T > { } static void Main ( string [ ] args ) { // Does not compile B < MyBaseClass > myVar = new A < MyClass > ( ) ; } interface IB < out T > { } public class B < T > : IB < T > { }
using System ; class MyClass { public MyClass x ; } public static class Program { public static void Main ( ) { var a = new MyClass ( ) ; var b = new MyClass ( ) ; a.x = ( a = b ) ; Console.WriteLine ( a.x == a ) ; } }
_context.AddObject ( user ) ; _context.Users.AddObject ( user ) ; _context.Attach ( user ) ; _context.Users.Attach ( user ) ; _context.AddObject ( user ) ; _context.Users.AddObject ( user ) ;
"private void buttonStart_Click ( object sender , EventArgs e ) { workerCustomers.RunWorkerAsync ( ) ; } private void workerCustomers_ProgressChanged ( object sender , ProgressChangedEventArgs e ) { progressBar1.Value = e.ProgressPercentage ; progressBar2.Value = ( int ) e.UserState ; } private void workerCustomers_DoWork ( object sender , DoWorkEventArgs e ) { for ( int customer = 0 ; customer < 50 ; customer++ ) { int customerPercentage = ++customer * 100 / 50 ; workerCustomers.ReportProgress ( customerPercentage , 0 ) ; for ( int location = 0 ; location < 500 ; location++ ) { int locationPercentage = ++location * 100 / 500 ; workerCustomers.ReportProgress ( customerPercentage , locationPercentage ) ; } workerCustomers.ReportProgress ( customerPercentage , 0 ) ; } }"
"public class UserProviderSimple : IUserProvider { public void CreateUser ( User user ) { //some code to user here } } public class UserServiceSimple : IUserService { public IUserProvider UserProvider { get ; set ; } public UserServiceSimple ( IUserProvider userProvider ) { UserProvider = userProvider ; } public void CreateUser ( User user ) { UserProvider.CreateUser ( user ) ; } } public class ServiceLocator { private readonly UnityContainer _container ; private static ServiceLocator _instance ; public static ServiceLocator Instance ( ) { if ( _instance == null ) { _instance = new ServiceLocator ( ) ; return _instance ; } return _instance ; } private ServiceLocator ( ) { _container = new UnityContainer ( ) ; _container.RegisterType < IUserProvider , UserProviderSimple > ( ) ; _container.RegisterType < IUserService , UserServiceSimple > ( ) ; } public T Resolve < T > ( ) { return _container.Resolve < T > ( ) ; } } class Program { private static IUserService _userService ; private static void ConfigureDependencies ( ) { _userService = ServiceLocator.Instance ( ) .Resolve < IUserService ( ) ; } static void Main ( string [ ] args ) { ConfigureDependencies ( ) ; } }"
"< Grid > < StackPanel > < ViewportControl Bounds= '' 0,0,1271,1381.5 '' Height= '' 480 '' Width= '' 800 '' CacheMode= '' BitmapCache '' RenderTransformOrigin= '' { Binding KontaktPunkter } '' Canvas.ZIndex= '' 1 '' > < ViewportControl.RenderTransform > < CompositeTransform x : Name= '' myTransform '' ScaleX= '' 1 '' ScaleY= '' 1 '' TranslateX= '' 0 '' TranslateY= '' 0 '' / > < /ViewportControl.RenderTransform > < View : Picture/ > < /ViewportControl > < /StackPanel > < View : PopUpUC DataContext= '' { Binding PopUp } '' / > < /Grid > public void ZoomDelta ( ManipulationDeltaEventArgs e ) { FrameworkElement Element = ( FrameworkElement ) e.OriginalSource ; ViewportControl Picture ; Grid PictureGrid ; double MainWidth = Application.Current.RootVisual.RenderSize.Height ; double MainHeight = Application.Current.RootVisual.RenderSize.Width ; if ( Element is ViewportControl ) { Picture = Element as ViewportControl ; } else { Picture = FindParentOfType < ViewportControl > ( Element ) ; } if ( Element is Grid ) { PictueGrid = Element as Grid ; } else { PictureGrid = FindParentOfType < Grid > ( Element ) ; } Grid ScreenGrid = FindParentOfType < Grid > ( PictureGrid ) ; if ( e.PinchManipulation ! = null ) { var newScale = e.PinchManipulation.DeltaScale * Map.previousScale ; if ( ! IsZooming ) { Point FingerOne = e.PinchManipulation.Current.PrimaryContact ; Point FingerTwo = e.PinchManipulation.Current.SecondaryContact ; Point center = new Point ( ( FingerOne.X + FingerTwo.X ) / 2 , ( FingerOne.Y + FingerTwo.Y ) / 2 ) ; KontaktPunkter = new Point ( center.X / Picture.Bounds.Width , center.Y / Picture.Bounds.Height ) ; IsZooming = true ; } var newscale = Map.imageScale * newScale ; var transform = ( CompositeTransform ) Picture.RenderTransform ; if ( newscale > 1 ) { Map.imageScale *= newScale ; transform.ScaleX = Map.imageScale ; transform.ScaleY = Map.imageScale ; } else { transform.ScaleX = transform.ScaleY = 1 ; } } e.Handled = true ; }"
"[ AspectTypeDependency ( AspectDependencyAction.Commute , typeof ( ILocationValidationAspect ) ) ]"
"public class UserDAL : IUserDAL { private IDataClassesDataContext _ctx ; public UserDAL ( ) { string env = ConfigurationManager.AppSettings [ `` Environment '' ] ; string connectionString = ConfigurationManager .ConnectionStrings [ env ] .ConnectionString ; _ctx = new DataClassesDataContext ( connectionString ) ; } public UserDAL ( IDataClassesDataContext context ) { _ctx = context ; } public List < User > GetUsersByOrganization ( int organizationId ) { IOrderedQueryable < User > vUsers = ( from myUsers in _ctx.Users where myUsers.Organization == organizationId orderby myUsers.LastName select myUsers ) ; return vUsers.ToList ( ) ; } public bool IsUserInOrganization ( User user , int orgainzationID ) { // Do some Dal Related logic here . return GetUsersByOrganization ( orgainzationID ) .Contains ( user ) ; } }"
< Grid > < Image Name= '' Image_1 '' Panel.ZIndex= '' 1 '' / > < Image Name= '' Image_2 '' Panel.ZIndex= '' 2 '' / > < /Grid >
"public static T ConvertStringToEnumValue < T > ( string valueToConvert , bool isCaseSensitive ) { if ( typeof ( T ) .BaseType.FullName ! = `` System.Enum '' & & typeof ( T ) .BaseType.FullName ! = `` System.ValueType '' ) { throw new ArgumentException ( `` Type must be of Enum and not `` + typeof ( T ) .BaseType.FullName ) ; } if ( String.IsNullOrWhiteSpace ( valueToConvert ) ) return ( T ) typeof ( T ) .TypeInitializer.Invoke ( null ) ; valueToConvert = valueToConvert.Replace ( `` `` , `` '' ) ; if ( typeof ( T ) .BaseType.FullName == `` System.ValueType '' ) { return ( T ) Enum.Parse ( Nullable.GetUnderlyingType ( typeof ( T ) ) , valueToConvert , ! isCaseSensitive ) ; } return ( T ) Enum.Parse ( typeof ( T ) , valueToConvert , ! isCaseSensitive ) ; } EnumHelper.ConvertStringToEnumValue < Enums.Animals ? > ( `` Cat '' ) ;"
Fixture fixture = new Fixture ( ) ; fixture.Register ( ObjectId.GenerateNewId ) ;
"interface ITest { void Test ( ) ; } class TestClass : ITest { public void Test ( ) { } } class Program { static void Test ( IEnumerable < ITest > tests ) { foreach ( var t in tests ) { Console.WriteLine ( t ) ; } } static void Main ( string [ ] args ) { var lst = new List < TestClass > ( ) ; Test ( lst ) ; // fails , why ? Test ( lst.Select ( t= > t as ITest ) ) ; //success Test ( lst.ToArray ( ) ) ; // success } }"
"Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ version , [ string ] $ configuration = `` Release '' , [ boolean ] $ tests = $ false , [ boolean ] $ publish = $ false , [ boolean ] $ pack = $ false , [ string ] $ outputFolder = `` build\packages '' ) # Include build functions . `` ./BuildFunctions.ps1 '' # The solution we are building $ solution = `` NerveFramework.sln '' $ assemblies = `` NerveFramework '' , `` NerveFramework.Web '' , `` NerveFramework.Web.Mvc '' , `` NerveFramework.Web.WebApi '' # Start by changing the assembly versionWrite-Host `` Changing the assembly versions to ' $ version ' ... '' $ assemblyInfos = Get-ChildItem $ assemblies -Filter `` AssemblyInfo.cs '' -Recurse | Resolve-Path -Relativeforeach ( $ assemblyInfo in $ assemblyInfos ) { ChangeAssemblyVersion $ assemblyInfo $ version } # Build the entire solutionWrite-Host `` Cleaning and building $ solution ( Configuration : $ configuration ) '' BuildSolution $ solution $ configuration # Change dependency version on all depending assembliesWrite-Host `` Changing the NerveFramework ( s ) NuGet Spec version dependencies to ' $ version ' ... '' $ nuspecs = Get-ChildItem $ assemblies -Filter `` NerveFramework*.nuspec '' -Recurse | Resolve-Path -Relativeforeach ( $ nuspec in $ nuspecs ) { ChangeNugetSpecDependencyVersion $ nuspec `` NerveFramework '' $ version } # Pack the assemblies and move to output folderif ( $ pack ) { Write-Host `` Packaging projects ... '' $ projects = Get-ChildItem $ assemblies -Filter `` NerveFramework*.csproj '' -Recurse | Resolve-Path -Relative foreach ( $ project in $ projects ) { PackProject $ project $ configuration $ outputFolder } } # Publish the assembliesif ( $ publish ) { Write-Host `` Publishing packages ... '' $ packages = Get-ChildItem $ outputFolder -Filter `` * $ version.nupkg '' -Recurse | Resolve-Path -Relative foreach ( $ package in $ packages ) { PublishPackage $ package } } Function BuildSolution ( ) { Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ solution , [ Parameter ( Mandatory= $ true ) ] [ string ] $ configuration ) # Set the path to the .NET folder in order to use `` msbuild.exe '' $ env : PATH = `` C : \Windows\Microsoft.NET\Framework64\v4.0.30319 '' Invoke-Expression `` msbuild.exe $ solution /nologo /v : m /p : Configuration= $ configuration /t : Clean '' Invoke-Expression `` msbuild.exe $ solution /nologo /v : m /p : Configuration= $ configuration /clp : ErrorsOnly '' } Function ChangeAssemblyVersion ( ) { Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ filePath , [ Parameter ( Mandatory= $ true ) ] [ string ] $ publishVersion ) Write-Host `` -- Updating ' $ filePath ' to version ' $ publishVersion ' '' $ assemblyVersionPattern = 'AssemblyVersion\ ( `` [ 0-9 ] + ( \ . ( [ 0-9 ] +|\* ) ) { 1,3 } '' \ ) ' $ assemblyVersion = 'AssemblyVersion ( `` ' + $ publishVersion + ' '' ) ' ; $ assemblyFileVersionPattern = 'AssemblyFileVersion\ ( `` [ 0-9 ] + ( \ . ( [ 0-9 ] +|\* ) ) { 1,3 } '' \ ) ' $ assemblyFileVersion = 'AssemblyFileVersion ( `` ' + $ publishVersion + ' '' ) ' ; ( Get-Content $ filePath -Encoding utf8 ) | ForEach-Object { % { $ _ -Replace $ assemblyVersionPattern , $ assemblyVersion } | % { $ _ -Replace $ assemblyFileVersionPattern , $ assemblyFileVersion } } | Set-Content $ filePath } Function ChangeNugetSpecDependencyVersion ( ) { Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ filePath , [ Parameter ( Mandatory= $ true ) ] [ string ] $ packageId , [ Parameter ( Mandatory= $ true ) ] [ string ] $ publishVersion ) [ xml ] $ toFile = ( Get-Content $ filePath ) $ nodes = $ toFile.SelectNodes ( `` //package/metadata/dependencies/dependency [ starts-with ( @ id , $ packageId ) ] '' ) if ( $ nodes ) { foreach ( $ node in $ nodes ) { $ nodeId = $ node.id Write-Host `` -- Updating ' $ nodeId ' in ' $ filePath ' to version ' $ publishVersion ' '' $ node.version = `` [ `` + $ publishVersion + '' ] '' $ toFile.Save ( $ filePath ) } } } Function PackProject ( ) { Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ project , [ Parameter ( Mandatory= $ true ) ] [ string ] $ configuration , [ Parameter ( Mandatory= $ true ) ] [ string ] $ outputFolder ) if ( ! ( Test-Path -Path $ outputFolder ) ) { New-Item $ outputFolder -Type Directory } Write-Host `` -- Packaging ' $ project ' '' Invoke-Expression `` .nuget\NuGet.exe pack $ project -OutputDirectory ' $ outputFolder ' -Prop Configuration= $ configuration '' } Function PublishPackage ( ) { Param ( [ Parameter ( Mandatory= $ true ) ] [ string ] $ package ) Write-Host `` -- Publishing ' $ package ' '' Invoke-Expression `` .nuget\NuGet.exe push $ package '' }"
public class BaseGenericType < T > { } public class SubGenericType < T > : BaseGenericType < List < T > > { }
"string myString = `` abc '' ; object myObject = myString ; string myStringBack = ( string ) myObject ; .maxstack 1.locals init ( [ 0 ] string myString , [ 1 ] object myObject , [ 2 ] string myStringBack ) L_0000 : nop L_0001 : ldstr `` abc '' L_0006 : stloc.0 L_0007 : ldloc.0 L_0008 : stloc.1 L_0009 : ldloc.1 L_000a : castclass stringL_000f : stloc.2 L_0010 : ret Upcasting and downcasting between compatible reference types performs referenceconversions : a new reference is created that points to the same object ."
"var arithmeticMean = new Aggregation { Descriptor = new AggregationDescriptor { Name = `` Arithmetic Mean '' } , Action = ( IEnumerable arg ) = > { double count = 0 ; double sum = 0 ; foreach ( var item in arg ) { sum += ( double ) item ; count++ ; } return sum / count ; } } ;"
"class Program { static void Main ( string [ ] args ) { string path = @ '' C : \Users\ < valid csv path > '' ; var resultEvaluator = new ResultEvaluator ( string.Format ( @ '' { 0 } \ { 1 } '' , path , `` hockey.csv '' ) ) ; var team = resultEvaluator.GetTeamSmallestDifferenceForAgainst ( ) ; Console.WriteLine ( string.Format ( `` Smallest difference in ‘ For ’ and ‘ Against ’ goals > TEAM : { 0 } , GOALS DIF : { 1 } '' , team.Name , team.Difference ) ) ; Console.ReadLine ( ) ; } } public interface IResultEvaluator { Team GetTeamSmallestDifferenceForAgainst ( ) ; } public class ResultEvaluator : IResultEvaluator { private static DataTable leagueDataTable ; private readonly string filePath ; private readonly ICsvExtractor csvExtractor ; public ResultEvaluator ( string filePath ) { this.filePath = filePath ; csvExtractor = new CsvExtractor ( ) ; } private DataTable LeagueDataTable { get { if ( leagueDataTable == null ) { leagueDataTable = csvExtractor.GetDataTable ( filePath ) ; } return leagueDataTable ; } } public Team GetTeamSmallestDifferenceForAgainst ( ) { var teams = GetTeams ( ) ; var lowestTeam = teams.OrderBy ( p = > p.Difference ) .First ( ) ; return lowestTeam ; } private IEnumerable < Team > GetTeams ( ) { IList < Team > list = new List < Team > ( ) ; foreach ( DataRow row in LeagueDataTable.Rows ) { var name = row [ `` Team '' ] .ToString ( ) ; var @ for = int.Parse ( row [ `` For '' ] .ToString ( ) ) ; var against = int.Parse ( row [ `` Against '' ] .ToString ( ) ) ; var team = new Team ( name , against , @ for ) ; list.Add ( team ) ; } return list ; } } public interface ICsvExtractor { DataTable GetDataTable ( string csvFilePath ) ; } public class CsvExtractor : ICsvExtractor { public DataTable GetDataTable ( string csvFilePath ) { var lines = File.ReadAllLines ( csvFilePath ) ; string [ ] fields ; fields = lines [ 0 ] .Split ( new [ ] { ' , ' } ) ; int columns = fields.GetLength ( 0 ) ; var dt = new DataTable ( ) ; //always assume 1st row is the column name . for ( int i = 0 ; i < columns ; i++ ) { dt.Columns.Add ( fields [ i ] .ToLower ( ) , typeof ( string ) ) ; } DataRow row ; for ( int i = 1 ; i < lines.GetLength ( 0 ) ; i++ ) { fields = lines [ i ] .Split ( new char [ ] { ' , ' } ) ; row = dt.NewRow ( ) ; for ( int f = 0 ; f < columns ; f++ ) row [ f ] = fields [ f ] ; dt.Rows.Add ( row ) ; } return dt ; } } public class Team { public Team ( string name , int against , int @ for ) { Name = name ; Against = against ; For = @ for ; } public string Name { get ; private set ; } public int Against { get ; private set ; } public int For { get ; private set ; } public int Difference { get { return ( For - Against ) ; } } }"
"string Text = `` 012345678901234567890123456789 '' ; List < int > Indexes = new List < int > ( ) { 2 , 4 , 7 , 9 , 15 , 18 , 23 , 10 , 1 , 2 , 15 , 40 } ; 035681234679012456789 foreach ( int index in Indexes .OrderByDescending ( x = > x ) .Distinct ( ) .Where ( x = > x < Text.Length ) ) { Text = Text.Remove ( index , 1 ) ; } Gallant : 3.322 ticksTim Schmelter : 8.602.576 ticksSergei Zinovyev : 9.002 ticksrbaghbanli : 7.137 ticksJirí Tesil Tesarík : 72.580 ticks"
"Option MgtStudio Application -- -- -- -- -- -- -- -- -- -- -- - -- -- -- -- -- -- -- -- -- -- -- -- -- -- textsize 2147483647 -1language us_english us_englishdateformat mdy mdydatefirst 7 7lock_timeout -1 -1quoted_identifier SET SETarithabort SET NOT SETansi_null_dflt_on SET SETansi_warnings SET SETansi_padding SET SETansi_nulls SET SETconcat_null_yields_null SET SETisolation level read committed read committed INSERT INTO GeocacherPoints ( CacherID , RegionID , Board , Control , Points ) SELECT z.CacherID , z.RegionID , z.Board , 21 , z.PointsFROM ( SELECT CacherID , gp.RegionID , Board=gp.Board + 10 , ( CASE WHEN ( SELECT COUNT ( * ) FROM Geocache g JOIN GeocacheRegions r ON ( r.CacheID = g.ID ) WHERE r.RegionID = gp.RegionID AND g.FinderPoints > = 5 ) < 20 THEN NULL ELSE ( SELECT SUM ( y.FinderPoints ) / 20 FROM ( SELECT x.FinderPoints , ROW_NUMBER ( ) OVER ( ORDER BY x.FinderPoints DESC , x.ID ) AS Row FROM ( SELECT g.FinderPoints , g.ID FROM Geocache g JOIN Log l ON ( l.CacheID = g.ID ) JOIN Geocacher c ON ( c.ID = l.CacherID ) JOIN GeocacheRegions r ON ( r.CacheID = g.ID ) WHERE YEAR ( l.LogDate ) = @ Year AND g.FinderPoints > = 5 AND c.ID = gp.CacherID AND r.RegionID = gp.RegionID ) x ) y WHERE y.Row < = 20 ) END ) Points FROM GeocacherPoints gp JOIN Region r ON r.RegionID = gp.RegionID WHERE gp.Control = 21 AND r.RegionType IN ( 'All ' , 'State ' ) AND gp.Board = @ Board - 10 ) zWHERE z.Points IS NOT NULL AND z.Points > = 1"
StageObject [ ] StageSplitDate = new StageObject [ Stages.Rows.Count ] ; for ( int i = 0 ; i < Stages.Rows.Count ; i++ ) { StageSplitDate [ i ] = new StageObject ( ) ; StageSplitDate [ i ] .StageId = `` String Value '' ; StageSplitDate [ i ] .FromTime = StartTime ; StartTime =StartTime.AddMinutes ( Convert.ToDouble ( 10 ) ) ; StageSplitDate [ i ] .ToTime = StartTime ; } return StageSplitDate ; public class StageObject { public string StageId { get ; set ; } public DateTime FromTime { get ; set ; } public DateTime ToTime { get ; set ; } }
public abstract class BaseClassWithGenericMethod { public virtual System.Collections.IList CreateList < T > ( ) { return new List < T > ( ) ; } } public class DerivedClassWithGenericMethod : BaseClassWithGenericMethod { public override System.Collections.IList CreateList < T > ( ) { return new List < T > ( ) ; } }
"using System ; using System.Text.RegularExpressions ; namespace RegexNoMatch { class Program { static void Main ( ) { string input = `` a foobar & b '' ; string regex1 = `` ( foobar|foo ) & ? `` ; string regex2 = `` ( foo|foobar ) & ? `` ; string replace = `` $ 1 '' ; Console.WriteLine ( Regex.Replace ( input , regex1 , replace ) ) ; Console.WriteLine ( Regex.Replace ( input , regex2 , replace ) ) ; Console.ReadKey ( ) ; } } } a foobar ba foobar b a foobar ba foobar & b"
"private static void Foo ( int i ) { Console.WriteLine ( `` hello '' ) ; } 00000000 push ebp 00000001 mov ebp , esp 00000003 push eax 00000004 mov dword ptr [ ebp-4 ] , ecx 00000007 cmp dword ptr ds : [ 005C14A4h ] ,0 0000000e je 00000015 00000010 call 65E0367F //the console writleline code follows here and is not part of the question static private void Bar ( ) { for ( int i = 0 ; i < 1000 ; i++ ) { Foo ( i ) ; } } 00000000 push ebp 00000001 mov ebp , esp 00000003 push eax 00000004 cmp dword ptr ds : [ 006914A4h ] ,0 0000000b je 00000012 0000000d call 65CC36CF // the for loop code follows here private static void Foo ( ) { Console.WriteLine ( `` hello '' ) ; } 00000000 push ebp 00000001 mov ebp , esp 00000003 cmp dword ptr ds : [ 005614A4h ] ,0 0000000a je 00000011 0000000c call 65E3367F //fix stackframe00000000 push ebp 00000001 mov ebp , esp //store eax so it can be used locally00000003 push eax //ensure static ctor have been called00000004 cmp dword ptr ds : [ 006914A4h ] ,0 //it has been called , ignore it0000000b je 00000012//it has n't been called , call it now 0000000d call 65CC36CF"
public static void ShowList < T > ( this IEnumerable < T > Values ) { foreach ( T item in Values ) { Console.WriteLine ( item ) ; } } string text = `` test '' ; text.ShowList ( ) ; ShowList < T > ( this IEnumerable < T > Values ) : Where ! = string //does n't work
"var now = Instant.FromDateTimeUtc ( DateTime.UtcNow ) ; var tzdb = DateTimeZoneProviders.Tzdb ; var list = from id in tzdb.Ids where id.Contains ( `` / '' ) & & ! id.StartsWith ( `` etc '' , StringComparison.OrdinalIgnoreCase ) let tz = tzdb [ id ] let offset = tz.GetUtcOffset ( now ) orderby offset , id select new { DisplayValue = string.Format ( `` ( UTC { 0 } ) { 1 } { 2 } `` , offset.ToString ( `` +HH : mm '' , null ) , now.WithOffset ( offset ) .TimeOfDay.ToString ( `` hh : mm tt '' , null ) , id ) } ;"
"HttpWebRequest request = HttpWebRequest.Create ( url ) as HttpWebRequest ; request.Method = `` POST '' ; request.ContentLength = jsonData.Length ; request.ContentType = `` application/json '' ; Stream requestStream = request.GetRequestStream ( ) ; requestStream.Write ( jsonData , 0 , jsonData.Length ) ; requestStream.Close ( ) ; var response = request.GetResponse ( ) as HttpWebResponse ;"
string searchQuery = `` SELECT * FROM Win32_Printer '' ; ManagementObjectSearcher searchPrinters = new ManagementObjectSearcher ( searchQuery ) ; ManagementObjectCollection printerCollection = searchPrinters.Get ( ) ; foreach ( ManagementObject printer in printerCollection ) { PropertyDataCollection printerProperties = printer.Properties ; foreach ( PropertyData property in printerProperties ) { if ( property.Name == `` KeepPrintedJobs '' ) { printerProperties [ property.Name ] .Value = true ; } } }
"using Newtonsoft.Json ; using Newtonsoft.Json.Linq ; var d1 = new DateTimeOffset ( 2014 , 12 , 15 , 18 , 0 , 0 , TimeSpan.FromHours ( 1 ) ) ; var obj = new { time = d1 } ; var json = JsonConvert.SerializeObject ( obj , Formatting.Indented ) ; Console.WriteLine ( json ) ; var jo = JObject.Parse ( json ) ; Console.WriteLine ( jo.Value < string > ( `` time '' ) + `` // jo.Value < string > ( \ '' time\ '' ) '' ) ; Console.WriteLine ( jo [ `` time '' ] + `` // jo [ \ '' time\ '' ] '' ) ; { `` time '' : `` 2014-12-15T18:00:00+01:00 '' } 12/15/2014 17:00:00 // jo.Value < string > ( `` time '' ) 15/12/2014 17:00:00 // jo [ `` time '' ]"
"public class ApplicationUser : IdentityUser { ... public int ? StudentId { get ; set ; } public virtual Student Student { get ; set ; } } public class Student { public int Id { get ; set ; } public string UserId { get ; set ; } public virtual ApplicationUser User { get ; set ; } } var user = new ApplicationUser ( ) { Name = `` test '' , UserName = `` test '' , Student = new Student ( ) } ; var result = await userManager.CreateAsync ( user , `` test12345 ! `` ) ;"
static void Main ( string [ ] args ) { try { Console.WriteLine ( `` No Error '' ) ; } catch ( DataException ) /*why no compilation error in this line ? */ { Console.WriteLine ( `` Error ... . '' ) ; } Console.ReadKey ( ) ; }
"Socket serverSocket = new Socket ( AddressFamily.InterNetwork , SocketType.Stream , ProtocolType.IP ) ; serverSocket.Bind ( new IPEndPoint ( IPAddress.Any , 8080 ) ) ; serverSocket.Listen ( 128 ) ; serverSocket.BeginAccept ( null , 0 , OnAccept , null ) ;"
"string foldername = Path.Combine ( Environment.GetFolderPath ( Environment.SpecialFolder.Desktop ) , String.Format ( `` FIXED_ { 0 } .tmx '' , Path.GetFileNameWithoutExtension ( textBox1.Text ) ) ) ; string text = File.ReadAllText ( textBox1.Text ) ; text = Regex.Replace ( text , @ '' < seg\b [ ^ > ] * > '' , `` < seg > '' , RegexOptions.Multiline ) ; text = Regex.Replace ( text , @ '' < seg > < /tuv > '' , `` < seg > < /seg > < /tuv > '' , RegexOptions.Multiline ) ; File.WriteAllText ( foldername , text ) ;"
ImageInfo result = await service.UploadAsync ( imagePath ) ;
myqueue.pushback ( String value ) ; while ( true ) { String path = queue.pop ( ) ; if ( process ( path ) ) { Console.WriteLine ( `` Good ! `` ) ; } else { queue.pushback ( path ) ; } } class JobData { public string path ; public short ttl ; public static implicit operator String ( JobData jobData ) { jobData.ttl -- ; return jobData.path ; } }
"public interface ILoggable { void Log ( Func < string > message , Logger.Type type ) ; } public static class Logger { public static void Log ( this ILoggable loggable , Func < string > message ) { loggable.Log ( message , Type.Information ) ; } public static void Log ( this ILoggable loggable , string prefix , byte [ ] data , int len ) { /* snip */ } public static void Log ( this ILoggable loggable , Exception ex ) { /* snip */ } // And so on ... } catch ( Exception ex ) { this.Log ( ex ) ; // this works Log ( ex ) ; // this goes not"
"public class DownloadItem { # region Events public delegate void DownloadItemDownloadCompletedEventHandler ( object sender , DownloadCompletedEventArgs args ) ; public event DownloadItemDownloadCompletedEventHandler DownloadItemDownloadCompleted ; protected virtual void OnDownloadItemDownloadCompleted ( DownloadCompletedEventArgs e ) { DownloadItemDownloadCompleted ? .Invoke ( this , e ) ; } public delegate void DownloadItemDownloadProgressChangedEventHandler ( object sender , DownloadProgressChangedEventArgs args ) ; public event DownloadItemDownloadProgressChangedEventHandler DownloadItemDownloadProgressChanged ; protected virtual void OnDownloadItemDownloadProgressChanged ( DownloadProgressChangedEventArgs e ) { DownloadItemDownloadProgressChanged ? .Invoke ( this , e ) ; } # endregion # region Fields private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ; private WebClient _client ; # endregion # region Properties public PlaylistItem Item { get ; } public string SavePath { get ; } public bool Overwrite { get ; } # endregion public DownloadItem ( PlaylistItem item , string savePath , bool overwrite = false ) { Item = item ; SavePath = savePath ; Overwrite = overwrite ; } public void StartDownload ( ) { if ( File.Exists ( SavePath ) & & ! Overwrite ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true ) ) ; return ; } OnDownloadItemDownloadProgressChanged ( new DownloadProgressChangedEventArgs ( 1 ) ) ; Item.RetreiveDownloadUrl ( ) ; if ( string.IsNullOrEmpty ( Item.DownloadUrl ) ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , new InvalidOperationException ( `` Could not retreive download url '' ) ) ) ; return ; } // GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce ; using ( _client = new WebClient ( ) ) { _client.Headers.Add ( `` user-agent '' , `` Mozilla/4.0 ( compatible ; MSIE 6.0 ; Windows NT 5.2 ; .NET CLR 1.0.3705 ; ) '' ) ; try { _client.DownloadDataCompleted += ( sender , args ) = > { Task.Run ( ( ) = > { DownloadCompleted ( args ) ; } ) ; } ; _client.DownloadProgressChanged += ( sender , args ) = > OnDownloadItemDownloadProgressChanged ( new DownloadProgressChangedEventArgs ( args.ProgressPercentage ) ) ; _client.DownloadDataAsync ( new Uri ( Item.DownloadUrl ) ) ; } catch ( Exception ex ) { Logger.Warn ( ex , `` Error downloading track { 0 } '' , Item.VideoId ) ; OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , ex ) ) ; } } } private void DownloadCompleted ( DownloadDataCompletedEventArgs args ) { // _client = null ; // GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce ; // GC.Collect ( 2 , GCCollectionMode.Forced ) ; if ( args.Cancelled ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , args.Error ) ) ; return ; } try { File.WriteAllBytes ( SavePath , args.Result ) ; using ( var file = TagLib.File.Create ( SavePath ) ) { file.Save ( ) ; } try { MusicFormatConverter.M4AToMp3 ( SavePath ) ; } catch ( Exception ) { // ignored } OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( false ) ) ; } catch ( Exception ex ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , ex ) ) ; Logger.Error ( ex , `` Error writing track file for track { 0 } '' , Item.VideoId ) ; } } public void StopDownload ( ) { _client ? .CancelAsync ( ) ; } public override int GetHashCode ( ) { return Item.GetHashCode ( ) ; } public override bool Equals ( object obj ) { var item = obj as DownloadItem ; return Item.Equals ( item ? .Item ) ; } } class MusicFormatConverter { public static void M4AToMp3 ( string filePath , bool deleteOriginal = true ) { if ( string.IsNullOrEmpty ( filePath ) || ! filePath.EndsWith ( `` .m4a '' ) ) throw new ArgumentException ( nameof ( filePath ) ) ; var toolPath = Path.Combine ( `` tools '' , `` ffmpeg.exe '' ) ; var convertedFilePath = filePath.Replace ( `` .m4a '' , `` .mp3 '' ) ; File.Delete ( convertedFilePath ) ; var process = new Process { StartInfo = { FileName = toolPath , # if ! DEBUG WindowStyle = ProcessWindowStyle.Hidden , # endif Arguments = $ '' -i \ '' { filePath } \ '' -acodec libmp3lame -ab 128k \ '' { convertedFilePath } \ '' '' } } ; process.Start ( ) ; process.WaitForExit ( ) ; if ( ! File.Exists ( convertedFilePath ) ) throw new InvalidOperationException ( `` File was not converted successfully ! `` ) ; if ( deleteOriginal ) File.Delete ( filePath ) ; } } private void DownloadCompleted ( DownloadDataCompletedEventArgs args ) { // _client = null ; // GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce ; // GC.Collect ( 2 , GCCollectionMode.Forced ) ; if ( args.Cancelled ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , args.Error ) ) ; return ; } try { File.WriteAllBytes ( SavePath , args.Result ) ; /* using ( var file = TagLib.File.Create ( SavePath ) ) { file.Save ( ) ; } try { MusicFormatConverter.M4AToMp3 ( SavePath ) ; } catch ( Exception ) { // ignore } */ OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( false ) ) ; } catch ( Exception ex ) { OnDownloadItemDownloadCompleted ( new DownloadCompletedEventArgs ( true , ex ) ) ; Logger.Error ( ex , `` Error writing track file for track { 0 } '' , Item.VideoId ) ; } } public class DownloadManager { # region Fields private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ; private readonly Queue < DownloadItem > _queue ; private readonly List < DownloadItem > _activeDownloads ; private bool _active ; private Thread _thread ; # endregion # region Construction public DownloadManager ( ) { _queue = new Queue < DownloadItem > ( ) ; _activeDownloads = new List < DownloadItem > ( ) ; } # endregion # region Methods public void AddToQueue ( DownloadItem item ) { _queue.Enqueue ( item ) ; StartManager ( ) ; } public void Abort ( ) { _thread ? .Abort ( ) ; _queue.Clear ( ) ; _activeDownloads.Clear ( ) ; } private void StartManager ( ) { if ( _active ) return ; _active = true ; _thread = new Thread ( ( ) = > { try { while ( _queue.Count > 0 & & _queue.Peek ( ) ! = null ) { DownloadItem ( ) ; while ( _activeDownloads.Count > = Properties.Settings.Default.ParallelDownloads ) { Thread.Sleep ( 10 ) ; } } _active = false ; } catch ( ThreadInterruptedException ) { // ignored } } ) ; _thread.Start ( ) ; } private void DownloadItem ( ) { if ( _activeDownloads.Count > = Properties.Settings.Default.ParallelDownloads ) return ; DownloadItem item ; try { item = _queue.Dequeue ( ) ; } catch { return ; } if ( item ! = null ) { item.DownloadItemDownloadCompleted += ( sender , args ) = > { if ( args.Error ! = null ) Logger.Error ( args.Error , `` Error downloading track { 0 } '' , ( ( DownloadItem ) sender ) .Item.VideoId ) ; _activeDownloads.Remove ( ( DownloadItem ) sender ) ; } ; _activeDownloads.Add ( item ) ; Task.Run ( ( ) = > item.StartDownload ( ) ) ; } } # endregion"
"{ `` tesla '' , `` model s '' } { `` tesla '' , `` roadster '' } { `` honda '' , `` civic '' } { `` honda '' , `` accord '' } { `` tesla '' : [ `` model s '' , `` roadster '' ] , `` honda '' : [ `` civic '' , `` accord '' ] } var result = query.Select ( q = > new { q.Manufacturer , q.Car } ) .Distinct ( ) .ToDictionary ( q = > q.Manufacturer.ToString ( ) , q = > q.Car.ToArray ( ) ) ;"
"public static bool TryGetPolls ( out List < Poll > polls , out string errorMessage ) public static List < Poll > GetPolls ( )"
MyClass.DoThis ( Action < Foo > action ) ; MyClass.DoThis ( Action < Bar > action ) ; MyClass.DoThis ( foo = > foo.DoSomething ( ) ) ;
[ Export ] internal class SomeExport { } [ ModuleExport ( typeof ( SomeModule ) ) ] internal class SomeModule : IModule { [ ImportingConstructor ] internal SomeModule ( SomeExport instance ) { } }
foreach ( var row in currentTable.Rows ) { var valueAtCurrentRow = row [ 0 ] ; } foreach ( DataRow row in currentTable.Rows ) { var valueAtCurrentRow = row [ 0 ] ; }
"public List < Entity.CapacityGrid > SelectByFormula ( string strFormula , int iVersionId ) { // declaration List < Entity.CapacityGrid > oList ; // retrieve ingredients oList = ( from Grid in _Dc.CapacityGrid.Include ( `` EquipmentSection '' ) join Header in _Dc.CapacityHeader on Grid.HeaderId equals Header.HeaderId where Header.Formula == strFormula & & Header.VersionId == iVersionId select Grid ) .ToList ( ) ; // return return oList ; // retrieve ingredient quantity by equipement using ( Model.CapacityGrid oModel = new Model.CapacityGrid ( Configuration.RemoteDatabase ) ) oQuantity = oModel.SelectByFormula ( strFormulaName , iVersionId ) ; // code to throw the exception var o = ( oQuantity [ 0 ] .EquipmentSection.TypeId ) ;"
Emp Id Name Login Logout 12345 RAMACHANDRAN 7/30/2013 8:40 7/30/2013 10:40 12345 RAMACHANDRAN 7/30/2013 12:30 7/30/2013 14:20 12345 RAMACHANDRAN 8/01/2013 18:10 8/01/2013 20:20 12345 RAMACHANDRAN 8/01/2013 20:40 8/01/2013 22:00 12346 RAVI 8/03/2013 12:30 8/03/2013 14:20 12346 RAVI 8/03/2013 18:10 8/03/2013 20:20 Emp Id Name Login Logout Duration 12345 RAMACHANDRAN 7/30/2013 8:40 7/30/2013 14:20 5:40 12345 RAMACHANDRAN 8/01/2013 18:10 8/01/2013 22:00 3:50 12346 RAVI 8/03/2013 12:30 8/03/2013 20:20 7:50
public void SampleMethod ( ref int i ) { }
"public partial class MainWindow : Window , INotifyPropertyChanged { private string _status ; private CancellationTokenSource _cancellationTokenSource ; public MainWindow ( ) { InitializeComponent ( ) ; _status = `` Ready '' ; DataContext = this ; } public string Status { get { return _status ; } set { _status = value ; OnPropertyChanged ( nameof ( Status ) ) ; } } private void OnStart ( object sender , RoutedEventArgs e ) { Status = `` Running ... '' ; _cancellationTokenSource = new CancellationTokenSource ( ) ; StartProcessing ( ) ; } private void OnStop ( object sender , RoutedEventArgs e ) { _cancellationTokenSource.Cancel ( ) ; } private async void StartProcessing ( ) { try { await new Task ( ( ) = > { Thread.Sleep ( 5000 ) ; } , _cancellationTokenSource.Token ) ; } catch ( TaskCanceledException e ) { Debug.WriteLine ( $ '' Expected : { e.Message } '' ) ; } Status = `` Done ! `` ; } public event PropertyChangedEventHandler PropertyChanged ; protected virtual void OnPropertyChanged ( string propertyName ) { PropertyChanged ? .Invoke ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } } < Window x : Class= '' CancellationSample.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' Title= '' Cancellation Test '' Height= '' 350 '' Width= '' 525 '' > < DockPanel LastChildFill= '' True '' > < StackPanel DockPanel.Dock= '' Top '' > < Button Width= '' 70 '' Margin= '' 5 '' Click= '' OnStart '' > Start < /Button > < Button Width= '' 70 '' Margin= '' 5 '' Click= '' OnStop '' > Stop < /Button > < /StackPanel > < StatusBar DockPanel.Dock= '' Bottom '' > < StatusBarItem > < TextBlock Text= '' { Binding Status } '' / > < /StatusBarItem > < /StatusBar > < Grid > < /Grid > < /DockPanel > < /Window >"
"public enum ColumnType { INT , STRING , OBJECT }"
"Users Internet | ====Firewall==== Port 80 , 443 only | Web Server DMZ - ASP.NET MVC + Web API | ====Firewall==== Port 80 , 443 only | `` App '' Server WCF or ASP.NET Web API ? ? | Database Internal network"
"if ( ! EventLog.SourceExists ( ADDIN_FRIENDLY_NAME ) ) { EventLog.CreateEventSource ( ADDIN_FRIENDLY_NAME , null ) ; } EventLog.WriteEntry ( ADDIN_FRIENDLY_NAME , message , EventLogEntryType.Warning ) ;"
"public abstract class SomeClass { private string _name ; private int _someInt ; private int _anotherInt ; public SomeClass ( string name , int someInt = 10 , int anotherInt = 20 ) { _name = name ; _someInt = someInt ; _anotherInt = anotherInt ; } }"
"using Cluster.Manager.Helper ; using Cluster.Manager.Messages ; using System ; using System.Collections.Generic ; using System.Globalization ; using System.IO ; using System.Linq ; using System.Net ; using System.Web ; using System.Web.Mvc ; namespace Cluster.Manager { public class HomeController : Controller { // GET : Home public ActionResult Index ( ) { ClusterMonitoring monitoring = new ClusterMonitoring ( ) ; string getStatus = monitoring.GetNameNodeStatus ( `` '' , new Credential ( ) ) ; return View ( ) ; } } } namespace Cluster.Manager.Helper { public class ClusterMonitoring { public virtual string GetNameNodeStatus ( string hostName , Credential credential ) { return `` Method Not Implemented '' ; } } } namespace NSubstituteControllerSupport { [ TestFixture ] public class UnitTest1 { [ Test ] public void ValidateNameNodeStatus ( ) { var validation = Substitute.ForPartsOf < ClusterMonitoring > ( ) ; validation.When ( actionMethod = > actionMethod.GetNameNodeStatus ( Arg.Any < string > ( ) , Arg.Any < Credential > ( ) ) ) .DoNotCallBase ( ) ; validation.GetNameNodeStatus ( `` ipaddress '' , new Credential ( ) ) .Returns ( `` active '' ) ; var controllers = Substitute.For < HomeController > ( ) ; controllers.Index ( ) ; } } }"
List < string > myList = new List < string > ( ) ; myList.Add ( aString ) ; ViewBag.linkList = myList ; @ ViewBag.linkList.First ( )
class SomeClass { private TaskCompletionSource < string > _someTask ; public Task < string > WaitForThing ( ) { _someTask = new TaskCompletionSource < string > ( ) ; return _someTask.Task ; } //Other code which calls _someTask.SetResult ( .. ) ; } //Some code..await someClassInstance.WaitForThing ( ) ; //Some more code
"public class Class1 { private static string String1 = `` one '' ; private static string String2 = `` two '' ; public static void PrintStrings ( string str1 , string str2 ) { ..."
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < ! -- I . OverallI.1 Each pattern can have < Match > ... . < /Match > element . For the given type declaration , the pattern with the match , evaluated to 'true ' with the largest weight , will be used I.2 Each pattern consists of the sequence of < Entry > ... < /Entry > elements . Type member declarations are distributed between entriesI.3 If pattern has RemoveAllRegions= '' true '' attribute , then all regions will be cleared prior to reordering . Otherwise , only auto-generated regions will be clearedI.4 The contents of each entry is sorted by given keys ( First key is primary , next key is secondary , etc ) . Then the declarations are grouped and en-regioned by given propertyII . Available match operandsEach operand may have Weight= '' ... '' attribute . This weight will be added to the match weight if the operand is evaluated to 'true'.The default weight is 1II.1 Boolean functions : II.1.1 < And > ... . < /And > II.1.2 < Or > ... . < /Or > II.1.3 < Not > ... . < /Not > II.2 OperandsII.2.1 < Kind Is= '' ... '' / > . Kinds are : class , struct , interface , enum , delegate , type , constructor , destructor , property , indexer , method , operator , field , constant , event , memberII.2.2 < Name Is= '' ... '' [ IgnoreCase= '' true/false '' ] / > . The 'Is ' attribute contains regular expressionII.2.3 < HasAttribute CLRName= '' ... '' [ Inherit= '' true/false '' ] / > . The 'CLRName ' attribute contains regular expressionII.2.4 < Access Is= '' ... '' / > . The 'Is ' values are : public , protected , internal , protected internal , privateII.2.5 < Static/ > II.2.6 < Abstract/ > II.2.7 < Virtual/ > II.2.8 < Override/ > II.2.9 < Sealed/ > II.2.10 < Readonly/ > II.2.11 < ImplementsInterface CLRName= '' ... '' / > . The 'CLRName ' attribute contains regular expressionII.2.12 < HandlesEvent / > -- > < Patterns xmlns= '' urn : shemas-jetbrains-com : member-reordering-patterns '' > < ! -- Do not reorder COM interfaces and structs marked by StructLayout attribute -- > < Pattern > < Match > < Or Weight= '' 100 '' > < And > < Kind Is= '' interface '' / > < Or > < HasAttribute CLRName= '' System.Runtime.InteropServices.InterfaceTypeAttribute '' / > < HasAttribute CLRName= '' System.Runtime.InteropServices.ComImport '' / > < /Or > < /And > < HasAttribute CLRName= '' System.Runtime.InteropServices.StructLayoutAttribute '' / > < /Or > < /Match > < /Pattern > < ! -- Special formatting of NUnit test fixture -- > < Pattern RemoveAllRegions= '' true '' > < Match > < And Weight= '' 100 '' > < Kind Is= '' class '' / > < HasAttribute CLRName= '' NUnit.Framework.TestFixtureAttribute '' Inherit= '' true '' / > < /And > < /Match > < ! -- Setup/Teardow -- > < Entry > < Match > < And > < Kind Is= '' method '' / > < Or > < HasAttribute CLRName= '' NUnit.Framework.SetUpAttribute '' Inherit= '' true '' / > < HasAttribute CLRName= '' NUnit.Framework.TearDownAttribute '' Inherit= '' true '' / > < HasAttribute CLRName= '' NUnit.Framework.FixtureSetUpAttribute '' Inherit= '' true '' / > < HasAttribute CLRName= '' NUnit.Framework.FixtureTearDownAttribute '' Inherit= '' true '' / > < /Or > < /And > < /Match > < Group Region= '' Setup/Teardown '' / > < /Entry > < ! -- All other members -- > < Entry/ > < ! -- Test methods -- > < Entry > < Match > < And Weight= '' 100 '' > < Kind Is= '' method '' / > < HasAttribute CLRName= '' NUnit.Framework.TestAttribute '' Inherit= '' false '' / > < /And > < /Match > < Sort > < Name/ > < /Sort > < /Entry > < /Pattern > < Pattern RemoveAllRegions= '' true '' > < ! -- static fields and constants -- > < Entry > < Match > < Or > < And > < Kind Is= '' constant '' / > < Static/ > < /And > < And > < Kind Is= '' field '' / > < Static/ > < /And > < /Or > < /Match > < Sort > < Readonly/ > < Name/ > < /Sort > < Group > < Name Region= '' Static Fields and Constants '' / > < /Group > < /Entry > < ! -- fields and constants -- > < Entry > < Match > < Or > < And > < Kind Is= '' constant '' / > < Not > < Static/ > < /Not > < /And > < And > < Kind Is= '' field '' / > < Not > < Static/ > < /Not > < /And > < /Or > < /Match > < Sort > < Readonly/ > < Name/ > < /Sort > < Group > < Name Region= '' Fields and Constants '' / > < /Group > < /Entry > < /Pattern > < ! -- Default pattern -- > < Pattern RemoveAllRegions= '' false '' > < ! -- public delegate -- > < Entry > < Match > < And Weight= '' 100 '' > < Access Is= '' public '' / > < Kind Is= '' delegate '' / > < /And > < /Match > < Sort > < Name/ > < /Sort > < Group Region= '' Delegates '' / > < /Entry > < ! -- public enum -- > < Entry > < Match > < And Weight= '' 100 '' > < Access Is= '' public '' / > < Kind Is= '' enum '' / > < /And > < /Match > < Sort > < Name/ > < /Sort > < Group > < Name Region= '' $ { Name } enum '' / > < /Group > < /Entry > < ! -- Constructors . Place static one first -- > < Entry > < Match > < Kind Is= '' constructor '' / > < /Match > < Sort > < Static/ > < /Sort > < Group > < Name Region= '' Constructor / Destructor '' / > < /Group > < /Entry > < ! -- properties , indexers -- > < Entry > < Match > < Or > < Kind Is= '' property '' / > < Kind Is= '' indexer '' / > < /Or > < /Match > < Group Region= '' Properties '' / > < /Entry > < ! -- interface implementations -- > < Entry > < Match > < And Weight= '' 100 '' > < Kind Is= '' member '' / > < ImplementsInterface/ > < /And > < /Match > < Sort > < ImplementsInterface Immediate= '' true '' / > < /Sort > < Group > < ImplementsInterface Immediate= '' true '' Region= '' $ { ImplementsInterface } Members '' / > < /Group > < /Entry > < ! -- all other members -- > < Entry/ > < ! -- nested types -- > < Entry > < Match > < Kind Is= '' type '' / > < /Match > < Sort > < Name/ > < /Sort > < Group > < Name Region= '' Nested type : $ { Name } '' / > < /Group > < /Entry > < /Pattern > < /Patterns >"
"return new List < dynamic > ( fields.Select ( field = > new { Id = field.Id , Alias = field.Alias , Name = field.Name , Type = field.Type , Value = field.Value , SortOrder = field.SortOrder } ) ) ;"
"public sealed partial class MainPage : Page { public ObservableCollection < int > Items { get ; set ; } private Random _random = new Random ( 123 ) ; public MainPage ( ) { this.InitializeComponent ( ) ; Items = new ObservableCollection < int > ( ) ; Items.Add ( 1 ) ; Items.Add ( 1 ) ; Items.Add ( 1 ) ; flipview.ItemsSource = Items ; } private void flipview_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { if ( this.flipview.SelectedIndex == 0 ) { Items.Insert ( 0 , 1 ) ; Items.RemoveAt ( Items.Count - 1 ) ; } else if ( this.flipview.SelectedIndex == this.flipview.Items.Count - 1 ) { Items.Add ( 1 ) ; Items.RemoveAt ( 0 ) ; } } } < Page.Resources > < DataTemplate x : Key= '' DataTemplate '' > < Grid > < Grid.Background > < LinearGradientBrush EndPoint= '' 1,0.5 '' StartPoint= '' 0,0.5 '' > < GradientStop Color= '' Black '' / > < GradientStop Color= '' White '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Grid.Background > < /Grid > < /DataTemplate > < /Page.Resources > < Grid Background= '' { ThemeResource ApplicationPageBackgroundThemeBrush } '' > < FlipView x : Name= '' flipview '' SelectionChanged= '' flipview_SelectionChanged '' ItemsSource= '' { Binding } '' ItemTemplate= '' { StaticResource DataTemplate } '' / > < /Grid >"
public interface ICategory { IList < Product > Products { get ; } } public class Category : ICategory { public List < Product > Products { get { new List < Product > ( ) ; } } }
There are no more endpoints available from the endpoint mapper
"using System ; using System.Reflection ; class Program { [ Test ( new [ ] { Test.Foo } , null ) ] static void Main ( string [ ] args ) { var type = typeof ( Program ) ; var method = type.GetMethod ( `` Main '' , BindingFlags.Static | BindingFlags.NonPublic ) ; var attribute = method.GetCustomAttributesData ( ) [ 0 ] .ConstructorArguments ; Console.ReadKey ( ) ; } } public enum Test { Foo , Bar } [ AttributeUsage ( AttributeTargets.Method , AllowMultiple = true ) ] public class TestAttribute : Attribute { public TestAttribute ( Test [ ] valuesOne , Test [ ] valuesTwo ) { } } System.RuntimeTypeHandle.GetTypeByNameUsingCARules ( String name , RuntimeModule scope ) System.Reflection.CustomAttributeTypedArgument.ResolveType ( RuntimeModule scope , String typeName ) System.Reflection.CustomAttributeTypedArgument..ctor ( RuntimeModule scope , CustomAttributeEncodedArgument encodedArg ) System.Reflection.CustomAttributeData.get_ConstructorArguments ( )"
"Dictionary < string , int > PersonDictionary = new Dictionary < string , int > ( ) ; Sally , 6Beth , 5Mary , 5"
public abstract class ServiceDependencyHost { protected virtual T ReferenceService < T > ( ) where T : ServiceBase { // Virtual implementation here ... } } public sealed class ProcessServiceOperation : ServiceDependencyHost { public override T ReferenceService < T > ( ) { // Override implementation here ... return base.ReferenceService < T > ( ) ; } } return base.ReferenceService < T > ( ) ; public override T ReferenceService < T > ( ) where T : ServiceBase
[ Route ( `` api/ [ controller ] '' ) ] public class ValuesController : Controller { private readonly TestRepo _testRepo ; public ValuesController ( TestRepo testRepo ) = > _testRepo = testRepo ; [ HttpGet ( ) ] public async Task < IActionResult > Get ( ) { _testRepo.SetValue ( 5 ) ; await Task.Delay ( 100 ) ; var val = _testRepo.GetValue ( ) ; // val here has correctly 5. return Ok ( ) ; } } public class TestRepo : IDisposable { private static readonly AsyncLocal < int ? > _asyncLocal = new AsyncLocal < int ? > ( ) ; public int ? GetValue ( ) = > _asyncLocal.Value ; public void SetValue ( int x ) = > _asyncLocal.Value = x ; public void Foo ( ) = > SetValue ( 5 ) ; public void Dispose ( ) { if ( GetValue ( ) == null ) { throw new InvalidOperationException ( ) ; //GetValue ( ) should be 5 here : ( } } }
"Select Wiki.WikiId , Wiki.WikiText , Wiki.Title , Wiki.CreatedOn , Tags.TagId , Tags.TagText , Tags.CreatedOnFrom WikiLeft Join ( WikiTagInner Join Tag as Tags on WikiTag.TagId = Tags.TagId ) on Wiki.WikiId = WikiTag.WikiIdFor Json Auto var connectionString = `` '' ; // connection stringvar sql = `` '' ; // query from abovevar chunks = new List < string > ( ) ; using ( var connection = new SqlConnection ( connectionString ) ) using ( var command = connection.CreateCommand ( ) ) { command.CommandText = sql ; connection.Open ( ) ; var reader = command.ExecuteReader ( ) ; while ( reader.Read ( ) ) { chunks.Add ( reader.GetString ( 0 ) ) ; // Reads in chunks of ~2K Bytes } } var json = string.Concat ( chunks ) ;"
DateTime t = DateTime.Today ; bool isGreater = t > null ; bool isGreater = ( DateTime ? ) t > ( DateTime ? ) null ; DateTime t = DateTime.Today ; bool isEqual = t == null ;
"return ( from lead in db.Leads join postcodeEnProvincie in postcodeEnProvincies on lead.Postcode equals postcodeEnProvincie.Postcode where ( lead.CreationDate > = range.StartDate ) & & ( lead.CreationDate < = range.EndDate ) group lead by postcodeEnProvincie.Provincie into g select new Web.Models.GroupedLeads ( ) { GroupName = g.Key , HotLeads = g.Count ( l = > l.Type == Data.LeadType.Hot ) , Leads = g.Count ( ) , PriorityLeads = g.Count ( l = > l.Type == Data.LeadType.Priority ) , Sales = g.Count ( l = > l.Sold ) , ProductA = g.Count ( l = > l.Producten.Any ( a = > ( ( a.Name.Equals ( `` productA '' , StringComparison.CurrentCultureIgnoreCase ) ) || ( a.Parent.Name.Equals ( `` productA '' , StringComparison.CurrentCultureIgnoreCase ) ) ) ) ) , ProductB = g.Count ( l = > l.Producten.Any ( a = > ( ( a.Name.Equals ( `` productB '' , StringComparison.CurrentCultureIgnoreCase ) ) || ( a.Parent.Name.Equals ( `` productB '' , StringComparison.CurrentCultureIgnoreCase ) ) ) ) ) , ProductC = g.Count ( l = > l.Producten.Any ( a = > ( ( a.Name.Equals ( `` productC '' , StringComparison.CurrentCultureIgnoreCase ) ) || ( a.Parent.Name.Equals ( `` productC '' , StringComparison.CurrentCultureIgnoreCase ) ) ) ) ) , ProductC = g.Count ( l = > l.Producten.Any ( a = > ( ( a.Name.Equals ( `` productD '' , StringComparison.CurrentCultureIgnoreCase ) ) || ( a.Parent.Name.Equals ( `` productD '' , StringComparison.CurrentCultureIgnoreCase ) ) ) ) ) } ) .ToList ( ) ; public static System.Linq.Expressions.Expression < Func < Data.Lead , bool > > ContainingProductEx ( string productName ) { var ignoreCase = StringComparison.CurrentCultureIgnoreCase ; return ( Data.Lead lead ) = > lead.Producten.Any ( ( product = > product.Name.Equals ( productName , ignoreCase ) || product.Parent.Name.Equals ( productName , ignoreCase ) ) ) ; } var test = db.Leads.Where ( Extensions.ContainingProductEx ( `` productA '' ) ) .ToList ( ) ; return ( from lead in db.Leads join postcodeEnProvincie in postcodeEnProvincies on lead.Postcode equals postcodeEnProvincie.Postcode where ( lead.CreationDate > = range.StartDate ) & & ( lead.CreationDate < = range.EndDate ) group lead by postcodeEnProvincie.Provincie into g select new Web.Models.GroupedLeads ( ) { GroupName = g.Key , HotLeads = g .Where ( l = > l.Type == Data.LeadType.Hot ) .Count ( ) , Leads = g.Count ( ) , PriorityLeads = g .Where ( l = > l.Type == Data.LeadType.Priority ) .Count ( ) , Sales = g .Where ( l = > l.Sold ) .Count ( ) , ProductA = g .Where ( Extensions.ContainingProductEx ( `` productA '' ) ) .Count ( ) , ProductB = g .Where ( Extensions.ContainingProductEx ( `` productB '' ) ) .Count ( ) , ProductC = g .Where ( Extensions.ContainingProductEx ( `` productC '' ) ) .Count ( ) , ProductD = g .Where ( Extensions.ContainingProductEx ( `` productD '' ) ) .Count ( ) } ) .ToList ( ) ;"
public sealed class Base { public Base ( ) { } } public class Derived < T > where T : Base { public Derived ( ) { } }
"public abstract class CommonVirtualFile : VirtualFile { public virtual string Url { get { throw new NotImplementedException ( ) ; } } public virtual string LocalPath { get { throw new NotImplementedException ( ) ; } } public override Stream Open ( ) { throw new NotImplementedException ( ) ; } public virtual Stream Open ( FileMode fileMode ) { throw new NotImplementedException ( ) ; } protected CommonVirtualFile ( string virtualPath ) : base ( virtualPath ) { } } public override Stream Open ( FileMode fileMode ) { return new FileStream ( `` The_Path_To_The_File_On_Disk '' ) , fileMode ) ; } const string virtualPath = `` /assets/newFile.txt '' ; var file = HostingEnvironment.VirtualPathProvider.GetFile ( virtualPath ) as CommonVirtualFile ; if ( file == null ) { var virtualDir = VirtualPathUtility.GetDirectory ( virtualPath ) ; var directory = HostingEnvironment.VirtualPathProvider.GetDirectory ( virtualDir ) as CommonVirtualDirectory ; file = directory.CreateFile ( VirtualPathUtility.GetFileName ( virtualPath ) ) ; } byte [ ] fileContent ; using ( var fileStream = new FileStream ( @ '' c : \temp\fileToCopy.txt '' , FileMode.Open , FileAccess.Read ) ) { fileContent = new byte [ fileStream.Length ] ; fileStream.Read ( fileContent , 0 , fileContent.Length ) ; } // write the content to the local file system using ( Stream stream = file.Open ( FileMode.Create ) ) { stream.Write ( fileContent , 0 , fileContent.Length ) ; }"
"public static object Send ( string webAddr , object param ) { HttpUtil.IgnoreBadCertificates ( ) ; HttpWebRequest request = null ; object result = null ; request = ( HttpWebRequest ) WebRequest.Create ( webAddr ) ; request.ContentType = `` application/json ; charset=utf-8 '' ; request.Method = `` POST '' ; request.Accept = `` application/json '' ; String u = GetString ( a1 ) ; String p = GetString ( a1 ) + GetString ( a2 ) ; String encoded = System.Convert.ToBase64String ( System.Text.Encoding.UTF8.GetBytes ( u + `` : '' + p ) ) ; request.Headers.Add ( `` Authorization '' , `` Basic `` + encoded ) ; using ( var streamWriter = new StreamWriter ( request.GetRequestStream ( ) ) ) { var myJsonString = Newtonsoft.Json.JsonConvert.SerializeObject ( param ) ; streamWriter.Write ( myJsonString ) ; streamWriter.Flush ( ) ; } var response = ( HttpWebResponse ) request.GetResponse ( ) ; using ( var streamReader = new StreamReader ( response.GetResponseStream ( ) ) ) { result = streamReader.ReadToEnd ( ) ; } return result ; } public class CambiosController : BaseApiController { private ICambioService cambioService ; public CambiosController ( ICambioService cambioService ) { this.cambioService = cambioService ; } [ HttpPost ] [ Authorize ] public HttpResponseMessage Post ( [ FromBody ] CambioRequest cambioRequest ) { HttpResponseMessage response = null ; if ( cambioRequest == null ) { Exception ex = new ArgumentException ( `` cambioRequest '' ) ; return Request.CreateErrorResponse ( HttpStatusCode.BadRequest , ex ) ; } try { var result = this.cambioService.EnviarConfiguracion ( cambioRequest ) ; response = Request.CreateResponse ( HttpStatusCode.OK , result ) ; } catch ( Exception ex ) { response = Request.CreateErrorResponse ( HttpStatusCode.InternalServerError , ex ) ; } return response ; } protected override void Dispose ( bool disposing ) { if ( disposing ) { this.cambioService.Dispose ( ) ; } base.Dispose ( disposing ) ; } public static void RegisterComponents ( ) { LoggerFacility.Debug ( string.Empty , string.Empty , `` UnityConfig.RegisterComponents ( ) '' ) ; var container = new UnityContainer ( ) ; container.RegisterTypes ( AllClasses.FromAssemblies ( BuildManager.GetReferencedAssemblies ( ) .Cast < Assembly > ( ) ) .Where ( x = > x.Name ! = `` IUnitOfWork '' & & x.Name ! = `` IDbContext '' ) , WithMappings.FromMatchingInterface , WithName.Default , overwriteExistingMappings : true ) ; container.RegisterType < IUnitOfWork , UnitOfWork > ( new PerResolveLifetimeManager ( ) ) ; container.RegisterType < IDbContext , ControlConfigContext > ( new PerResolveLifetimeManager ( ) ) ; GlobalConfiguration.Configuration.DependencyResolver = new UnityDependencyResolver ( container ) ; }"
switch ( Request.QueryString [ `` Report '' ] ) { case `` ReportA '' : CreateReportAReport ( `` ReportA 's Title '' ) ; break ; case `` ReportB '' : CreateReportBReport ( `` ReportB 's Title '' ) ; break ; case `` ReportC '' : CreateReportCReport ( `` ReportC 's Title '' ) ; break ; case `` ReportD '' : CreateReportDReport ( `` ReportD 's Title '' ) ; break ; ...
"internal sealed class MyFrameworkElement : FrameworkElement { public double EndX { get { return ( double ) this.GetValue ( MyFrameworkElement.EndXProperty ) ; } set { this.SetValue ( MyFrameworkElement.EndXProperty , value ) ; } } public static readonly DependencyProperty EndXProperty = DependencyProperty.Register ( `` EndX '' , typeof ( double ) , typeof ( MyFrameworkElement ) , new FrameworkPropertyMetadata ( 0d , FrameworkPropertyMetadataOptions.AffectsRender ) ) ; protected override void OnRender ( DrawingContext dc ) { dc.DrawLine ( new Pen ( Brushes.Red , 2 ) , new Point ( 0 , 0 ) , new Point ( this.EndX , 100 ) ) ; dc.DrawLine ( new Pen ( Brushes.Green , 3 ) , new Point ( 10 , 300 ) , new Point ( 200 , 10 ) ) ; } }"
"// 32-bit version [ StructLayout ( LayoutKind.Sequential , Pack=1 ) ] public struct SYSTEM_HANDLE_INFORMATION { public uint ProcessID ; public byte ObjectTypeNumber ; public byte Flags ; public ushort Handle ; public uint Object_Pointer ; public UInt32 GrantedAccess ; } // 64-bit version [ StructLayout ( LayoutKind.Sequential , Pack=1 ) ] public struct SYSTEM_HANDLE_INFORMATION { public int Reserved ; // unknown , no documentation found public uint ProcessID ; public byte ObjectTypeNumber ; public byte Flags ; public ushort Handle ; public long Object_Pointer ; public UInt32 GrantedAccess ; }"
public partial class Comment string email public partial class Comment [ IsEmailAddress ] string email
"public BumperFX BmprFX ; BumperFX [ ] _poolOfBumperFX ; int _indexBumperFX , _poolSize = 10 ; public LandingFX LndngFX ; LandingFX [ ] _poolOfLndngFX ; int _indexLndngFX , _poolSizeLndngFX = 5 ; void Start ( ) { _poolOfBumperFX = new BumperFX [ _poolSize ] ; for ( var i = 0 ; i < _poolSize ; i++ ) { _poolOfBumperFX [ i ] = Instantiate ( BmprFX , transform ) ; } _poolOfLndngFX = new LandingFX [ _poolSizeLndngFX ] ; for ( var i = 0 ; i < _poolSizeLndngFX ; i++ ) { _poolOfLndngFX [ i ] = Instantiate ( LndngFX , transform ) ; } } public LandingFX GimmeLandingFX ( ) { if ( _indexLndngFX == _poolSizeLndngFX ) _indexLndngFX = 0 ; var lndngFX = _poolOfLndngFX [ _indexLndngFX ] ; _indexLndngFX++ ; return lndngFX ; } public BumperFX GimmeBumperFX ( ) { if ( _indexBumperFX == _poolSize ) _indexBumperFX = 0 ; var bumperFX = _poolOfBumperFX [ _indexBumperFX ] ; _indexBumperFX++ ; return bumperFX ; } FXDistributor.sRef.GimmeLandingFX ( ) .Bounce ( bounce.point , bounce.tangentImpulse , bounce.normalImpulse ) ;"
"[ Table ( `` Clients '' ) ] public partial class Client { [ Key ] [ DatabaseGeneratedAttribute ( DatabaseGeneratedOption.Identity ) ] public int Id { get ; set ; } public virtual int UserCreated_Id { get ; set ; } [ ForeignKey ( `` UserCreated_Id '' ) ] public virtual ApplicationUser UserCreated { get ; set ; } } client.UserCreated_Id = User.Identity.GetUserId < int > ( ) ; public class ApplicationUser : IdentityUser public class ApplicationUser : IdentityUser < int , ApplicationUserLogin , ApplicationUserRole , ApplicationUserClaim > public class ApplicationDbContext : IdentityDbContext < ApplicationUser , ApplicationRole , int , ApplicationUserLogin , ApplicationUserRole , ApplicationUserClaim > { public ApplicationDbContext ( ) : base ( `` IPDB '' ) { } public static ApplicationDbContext Create ( ) { return new ApplicationDbContext ( ) ; } } public class MyDbContext : DbContext { public MyDbContext ( ) : base ( `` IPDB '' ) { // Tells Entity Framework that we will handle the creation of the database manually for all the projects in the solution Database.SetInitializer < MyDbContext > ( null ) ; } public DbSet < Client > Clients { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { // ANOTHER CHANGE I HAD TO MADE TO BE ABLE TO SCAFFOLDING modelBuilder.Entity < ApplicationUserLogin > ( ) .HasKey < int > ( l = > l.UserId ) ; modelBuilder.Entity < ApplicationRole > ( ) .HasKey < int > ( r = > r.Id ) ; modelBuilder.Entity < ApplicationUserRole > ( ) .HasKey ( r = > new { r.RoleId , r.UserId } ) ; } }"
"Texture2D sheet ; Point paddleSize = new Point ( 112 , 24 ) ; Point paddleSheetPosition = new Point ( 0 , 240 ) ; Vector2 paddleViewportPosition ; Rectangle paddleRectangle ; Point ballSize = new Point ( 24 , 24 ) ; Point ballSheetPosition = new Point ( 160 , 240 ) ; Vector2 ballViewportPosition ; Rectangle ballRectangle ; Vector2 ballVelocity ; paddleViewportPosition = new Vector2 ( ( GraphicsDevice.Viewport.Bounds.Width - paddleSize.X ) / 2 , GraphicsDevice.Viewport.Bounds.Height - ( paddleSize.Y * 2 ) ) ; paddleRectangle = new Rectangle ( paddleSheetPosition.X , paddleSheetPosition.Y , paddleSize.X , paddleSize.Y ) ; Random random = new Random ( ) ; ballViewportPosition = new Vector2 ( random.Next ( GraphicsDevice.Viewport.Bounds.Width ) , random.Next ( GraphicsDevice.Viewport.Bounds.Top , GraphicsDevice.Viewport.Bounds.Height / 2 ) ) ; ballRectangle = new Rectangle ( ballSheetPosition.X , ballSheetPosition.Y , ballSize.X , ballSize.Y ) ; ballVelocity = new Vector2 ( 3f , 3f ) ; spriteBatch.Draw ( sheet , paddleViewportPosition , paddleRectangle , Color.White ) ; spriteBatch.Draw ( sheet , ballViewportPosition , ballRectangle , Color.White ) ; if ( ballRectangle.Intersects ( paddleRectangle ) ) { ballVelocity.Y = -ballVelocity.Y ; }"
"Assembly myAssembly = Assembly.LoadFrom ( `` Assembly Path for assembly with different version '' ) ; object classObject = myAssembly.CreateInstance ( `` ClassName '' ) ; Type classType = myAssembly.GetType ( `` ClassName '' ) ; MethodInfo myMethod = classType.GetMethod ( `` MyMethod '' , BindingFlags.Instance ) ; // Creating an object of class in the latest assembly and need to pass this// to method in assembly with different version.ClassInBothVesions parameter = new ClassInBothVesions ( ) ; myMethod.Invoke ( classObject , new object [ ] { parameter } ) ;"
"{ `` href '' : '' https : //host/profiles/123 '' , `` givenName '' : '' Bob '' , `` surname '' : '' Smith '' , `` gender '' : '' male '' , `` favColor '' : '' red '' , `` socialNetworks '' : { `` href '' : '' https : //host/socialNetworkMemberships ? profileId=123 '' } } { `` href '' : '' https : //host/profiles/123 '' , `` surname '' : '' Smith '' , `` favColor '' : '' red '' } { `` href '' : '' https : //host/profiles/123 '' , `` givenName '' : '' Bob '' , `` surname '' : '' Smith '' , `` gender '' : '' male '' , `` favColor '' : '' red '' , `` socialNetworks '' : { `` href '' : '' https : //host/socialNetworkMemberships ? profileId=123 '' , `` items '' : [ { `` href '' : '' https : //host/socialNetworkMemberships/abcde '' , `` siteName '' : '' Facebook '' , `` profileUrl '' : '' http : //www.facebook.com/ ... '' } , ... ] } }"
"- Soulution - Project - Migrations - CSVFolder - file1.csv - file2.csv - Migration1.cs - Migration2.cs public override void Up ( ) { var migrationsDir = AppDomain.CurrentDomain.BaseDirectory + `` /Migrations/CSVFolder/ '' ; // For some reason , Path.Combine ( ) does n't work for me here so I manually concatenate the strings . var templateFiles = Directory.GetFiles ( migrationsDir , `` *.csv '' ) ; foreach ( var filename in templateFiles ) { Sql ( ) ; // SQL Insert statement here . } }"
"public Chassis GetChassisForElcomp ( SPPA.Domain.ChassisData.Chassis asMaintained , SPPA.Domain.ChassisData.Chassis newChassis ) { Chassis c = asMaintained ; List < Narrative > newNarrativeList = new List < Narrative > ( ) ; foreach ( Narrative newNarrative in newChassis.Narratives ) { bool narrativefound = false ; foreach ( Narrative orig in asMaintained.Narratives ) { if ( string.Compare ( orig.PCode , newNarrative.PCode ) ==0 ) { narrativefound = true ; if ( newNarrative.NarrativeValue.Trim ( ) .Length ! = 0 ) { orig.NarrativeValue = newNarrative.NarrativeValue ; newNarrativeList.Add ( orig ) ; } break ; } if ( narrativefound == false ) { newNarrativeList.Add ( newNarrative ) ; } } } c.SalesCodes = newChassis.SalesCodes ; c.Narratives = newNarrativeList ; return c ; }"
"Func < Note , bool > excludeCollectionCategory = ( ui == UIRequestor.ProjectNotes ) ? x = > x.NoteCategory ! = `` Collections '' : x = > true ; // -- error : can not convert lambda to lambda"
"import numpy as npimport timet1 = time.time ( ) for i in range ( 1,10000000 ) : np.log ( i ) t2 = time.time ( ) print ( t2 - t1 ) import mathimport timet1 = time.time ( ) for i in range ( 1,10000000 ) : math.log ( i ) t2 = time.time ( ) print ( t2 - t1 ) ticfor i = 1:10000000 log ( i ) ; endtoc var t = DateTime.Now ; for ( int i = 1 ; i < 10000000 ; ++i ) Math.Log ( i ) ; Console.WriteLine ( ( DateTime.Now - t ) .TotalSeconds ) ;"
public MainPage ( ) { this.InitializeComponent ( ) ; this.DataContext = this ; // cache page this.NavigationCacheMode = NavigationCacheMode.Required ; }
"[ AttributeUsage ( AttributeTargets.Class , Inherited = true , AllowMultiple = true ) ] public abstract class BaseAttribute : Attribute { public string Name { get ; set ; } } public class FooAttribute : BaseAttribute { } [ Foo ( Name = `` A '' ) ] [ Foo ( Name = `` B '' ) ] [ Foo ( Name = `` C '' ) ] public class Bar { } //Main methodvar attributes = typeof ( Bar ) .GetCustomAttributes ( true ) .OfType < FooAttribute > ( ) .ToList < FooAttribute > ( ) ; var getC = attributes.First ( item = > item.Name == `` C '' ) ; attributes.Remove ( getC ) ; attributes.ForEach ( a = > Console.WriteLine ( a.Name ) ) ; [ SecuritySafeCritical ] public override int GetHashCode ( ) { Type type = base.GetType ( ) ; //*****NOTICE***** FieldInfo [ ] fields = type.GetFields ( BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance ) ; object obj2 = null ; for ( int i = 0 ; i < fields.Length ; i++ ) { object obj3 = ( ( RtFieldInfo ) fields [ i ] ) .InternalGetValue ( this , false , false ) ; if ( ( obj3 ! = null ) & & ! obj3.GetType ( ) .IsArray ) { obj2 = obj3 ; } if ( obj2 ! = null ) { break ; } } if ( obj2 ! = null ) { return obj2.GetHashCode ( ) ; } return type.GetHashCode ( ) ; }"
"using System ; using GalaSoft.MvvmLight.Messaging ; namespace TestApp { class Program { static void Main ( string [ ] args ) { var prog = new Program ( ) ; var recipient = new object ( ) ; prog.RegisterMessageA ( recipient ) ; prog.RegisterMessageB ( recipient ) ; prog.SendMessage ( `` First Message '' ) ; GC.Collect ( ) ; prog.SendMessage ( `` Second Message '' ) ; } public void RegisterMessageA ( object target ) { Messenger.Default.Register ( this , ( Message msg ) = > { Console.WriteLine ( msg.Name + `` recieved by A '' ) ; var x = target ; } ) ; } public void RegisterMessageB ( object target ) { Messenger.Default.Register ( this , ( Message msg ) = > { Console.WriteLine ( msg.Name + `` received by B '' ) ; } ) ; } public void SendMessage ( string name ) { Messenger.Default.Send ( new Message { Name = name } ) ; } class Message { public string Name { get ; set ; } } } } First Message recieved by AFirst Message received by BSecond Message received by B"
"SendMessage ( new Message ( a : 1 , b : null ) ) ; SendMessage ( new Message ( a : null , b : 2 ) ) ; SendMessage ( new Message ( a : 3 , b : 4 ) ) ; object gate = new object ( ) ; int ? pendingB ; Message WrapA ( int a , int millisecondsTimeout ) { int ? b ; lock ( gate ) { b = pendingB ; pendingB = null ; Monitor.Pulse ( gate ) ; } return new Message ( a , b ) ; } Message WrapB ( int b , int millisecondsTimeout ) { lock ( gate ) { if ( pendingB == null ) { pendingB = b ; Monitor.Wait ( gate , millisecondsTimeout ) ; if ( pendingB ! = b ) return null ; pendingB = null ; } } return new Message ( null , b ) ; } public static class Program { static int counter0 = 0 ; static int counterA = 0 ; static int counterB = 0 ; static int counterAB = 0 ; static void SendMessage ( Message m ) { if ( m ! = null ) if ( m.a ! = null ) if ( m.b ! = null ) Interlocked.Increment ( ref counterAB ) ; else Interlocked.Increment ( ref counterA ) ; else if ( m.b ! = null ) Interlocked.Increment ( ref counterB ) ; else Interlocked.Increment ( ref counter0 ) ; } static Thread [ ] Start ( int threadCount , int eventCount , int eventInterval , int wrapTimeout , Func < int , int , Message > wrap ) { Thread [ ] threads = new Thread [ threadCount * eventCount ] ; for ( int i = 0 ; i < threadCount ; i++ ) { for ( int j = 0 ; j < eventCount ; j++ ) { int k = i * 1000 + j ; int l = j * eventInterval + i ; threads [ i * eventCount + j ] = new Thread ( ( ) = > { Thread.Sleep ( l ) ; SendMessage ( wrap ( k , wrapTimeout ) ) ; } ) ; threads [ i * eventCount + j ] .Start ( ) ; } } return threads ; } static void Join ( params Thread [ ] threads ) { for ( int i = 0 ; i < threads.Length ; i++ ) { threads [ i ] .Join ( ) ; } } public static void Main ( string [ ] args ) { var wrapper = new MessageWrapper ( ) ; var sw = Stopwatch.StartNew ( ) ; // Only A events var t0 = Start ( 10 , 40 , 7 , 1000 , wrapper.WrapA ) ; Join ( t0 ) ; // A and B events var t1 = Start ( 10 , 40 , 7 , 1000 , wrapper.WrapA ) ; var t2 = Start ( 10 , 10 , 19 , 1000 , wrapper.WrapB ) ; Join ( t1 ) ; Join ( t2 ) ; // Only B events var t3 = Start ( 10 , 20 , 7 , 1000 , wrapper.WrapB ) ; Join ( t3 ) ; Console.WriteLine ( sw.Elapsed ) ; Console.WriteLine ( `` 0 : { 0 } '' , counter0 ) ; Console.WriteLine ( `` A : { 0 } '' , counterA ) ; Console.WriteLine ( `` B : { 0 } '' , counterB ) ; Console.WriteLine ( `` AB : { 0 } '' , counterAB ) ; Console.WriteLine ( `` Generated A : { 0 } , Sent A : { 1 } '' , 10 * 40 + 10 * 40 , counterA + counterAB ) ; Console.WriteLine ( `` Generated B : { 0 } , Sent B : { 1 } '' , 10 * 10 + 10 * 20 , counterB + counterAB ) ; } }"
"Call to Proxy 1 ... Good ! Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Good ! Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Timeout ... Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! Call to Proxy 1 ... Good ! Call to Proxy 2 ... Good ! Call to Proxy 3 ... Good ! Call to Proxy 4 ... Good ! String html = null ; HttpWebRequest request = null ; WebProxy webProxy = null ; try { request = ( HttpWebRequest ) WebRequest.Create ( url ) ; webProxy = new WebProxy ( proxyIP , proxyPort ) ; webProxy.Credentials = new NetworkCredential ( proxyUser , proxyPass ) ; request.Proxy = webProxy ; request.KeepAlive = false ; request.Timeout = 5000 ; request.ReadWriteTimeout = 5000 ; request.Method = `` GET '' ; request.UserAgent = generateAgentString ( ) ; using ( WebResponse resp = ( WebResponse ) request.GetResponse ( ) ) { using ( Stream strm = resp.GetResponseStream ( ) ) { StreamReader reader = new StreamReader ( strm , Encoding.UTF8 ) ; try { html = reader.ReadToEnd ( ) ; } catch { Console.WriteLine ( `` Failed '' ) ; html = null ; } finally { strm.Flush ( ) ; reader.BaseStream.Dispose ( ) ; reader.Dispose ( ) ; strm.Dispose ( ) ; resp.Dispose ( ) ; } } } if ( request ! = null ) { request.Abort ( ) ; } } catch ( Exception e ) { Console.WriteLine ( e ) ; }"
"static bool AreReferencesEqual < T > ( T first , T second ) where T : class { return first == second ; } static void Main ( ) { string name = `` Jon '' ; string intro1 = `` My name is `` + name ; string intro2 = `` My name is `` + name ; Console.WriteLine ( intro1 == intro2 ) ; Console.WriteLine ( AreReferencesEqual ( intro1 , intro2 ) ) ; } True False static void Main ( ) { string intro1 = `` My name is Jon '' ; string intro2 = `` My name is Jon '' ; Console.WriteLine ( intro1 == intro2 ) ; Console.WriteLine ( AreReferencesEqual ( intro1 , intro2 ) ) ; } True True"
"private static IntPtr HookCallback ( int nCode , IntPtr wParam , IntPtr lParam ) { if ( nCode ! = HC_ACTION ) return CallNextHookEx ( _hookID , nCode , wParam , lParam ) ; var keyInfo = ( Kbdllhookstruct ) Marshal.PtrToStructure ( lParam , typeof ( Kbdllhookstruct ) ) ; if ( keyInfo.VkCode == VK_LWIN ) { if ( wParam == ( IntPtr ) WM_KEYDOWN ) { _isWinDown = true ; } else { _isWinDown = false ; if ( _isWinTabDetected ) { _isWinTabDetected = false ; return ( IntPtr ) 1 ; } } } else if ( keyInfo.VkCode == VK_TAB & & _isWinDown ) { _isWinTabDetected = true ; if ( wParam == ( IntPtr ) WM_KEYDOWN ) { return ( IntPtr ) 1 ; } else { _isWinTabDetected = true ; Console.WriteLine ( `` WIN + TAB Pressed '' ) ; return ( IntPtr ) 1 ; } } return CallNextHookEx ( _hookID , nCode , wParam , lParam ) ; } } }"
var abc = new ABC ( ) ; abc.method1 ( ) .method2 ( ) .methodThrowsException ( ) .method3 ( ) ; public ABC method1 ( ) { return this ; } public ABC method3 ( ) { throw new ArgumentException ( ) ; }
"public class CustomerType { public int Id { get ; set ; } public string Name { get ; set ; } public MemberType MemberType { get ; set ; } } public enum MemberType { Adult , Child } groupBoxMemberType.DataBindings.Add ( `` Selected '' , this.bindingSource , `` MemberType '' ) ; customerType = customerTypeRequest.Load ( id ) ; bindingSource.DataSource = customerType ; //raises exception"
"BeginCatchBlock ( ) BeginExceptFilterBlock ( ) BeginFaultBlock ( ) BeginFinallyBlock ( ) EndExceptionBlock ( ) L_00ca : leave.s L_00e5L_00cc : leave L_00d1 public static async Task < bool > TestAsync ( int ms ) { var local = ms / 1000 ; Console.WriteLine ( `` In async call , before await `` + local.ToString ( ) + `` -second delay . `` ) ; await System.Threading.Tasks.Task.Delay ( ms ) ; Console.WriteLine ( `` In async call , after await `` + local.ToString ( ) + `` -second delay . `` ) ; Console.WriteLine ( ) ; Console.WriteLine ( `` Press any key to continue . `` ) ; Console.ReadKey ( false ) ; return true ; }"
"< DataGrid Name= '' grid '' ItemsSource= '' { Binding } '' Height= '' 300 '' Width= '' 900 '' AutoGenerateColumns= '' False '' VerticalScrollBarVisibility= '' Disabled '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Top '' RowHeight= '' 40 '' > < DataGrid.Resources > < Style x : Key= '' BackgroundColourStyle '' TargetType= '' { x : Type TextBlock } '' > < Style.Triggers > < Trigger Property= '' Text '' Value= '' 1 '' > < Setter Property= '' Background '' Value= '' LightGreen '' / > < /Trigger > < /Style.Triggers > < /Style > < /DataGrid.Resources > < DataGrid.Columns > < DataGridTextColumn Binding= '' { Binding Path=Number } '' ElementStyle= '' { StaticResource BackgroundColourStyle } '' MinWidth= '' 40 '' > < /DataGridTextColumn > < /DataGrid.Columns > < DataGrid.ItemsPanel > < ItemsPanelTemplate > < WrapPanel Orientation= '' Vertical '' / > < /ItemsPanelTemplate > < /DataGrid.ItemsPanel > < /DataGrid > calledGrid.DataContext = calledNumbers.DefaultView ; DataSet dataSet = new DataSet ( `` myDS '' ) ; this.bingoCalls ( dataSet ) ; DataTable numbersTable = new DataTable ( `` Numbers '' ) ; numbersTable.Columns.Add ( `` Number '' , typeof ( Int32 ) ) ; for ( int i = 1 ; i < 91 ; i++ ) { numbersTable.Rows.Add ( i ) ; } dataSet.Tables.Add ( numbersTable ) ;"
"List < int > myList = [ 1,3,7,23,56,58,164,185 ] ; List < int > borders = [ 4,59,170 ] ; [ [ 1,3 ] , [ 7,23,56,58 ] , [ 164 ] , [ 185 ] ]"
for ( int outerCounter=0 ; outerCounter < 20 ; outerCounter++ ) { for ( int innerCounter=0 ; innerCounter < 20 ; innerCounter++ ) { if ( expr ) { [ continue outer ] ; // here I wish to continue on the outer loop } [ some inner code ] } [ some outer code ] }
RightToLeft=Yes and RightToLeftLayout=True
"< ? xml version= '' 1.0 '' ? > < configuration > < log4net > < root > < level value= '' ALL '' / > < appender-ref ref= '' console '' / > < appender-ref ref= '' file '' / > < /root > < appender name= '' console '' type= '' log4net.Appender.ConsoleAppender '' > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % date % level % logger - % message % newline '' / > < /layout > < /appender > < appender name= '' file '' type= '' log4net.Appender.RollingFileAppender '' > < file value= '' ApplicationLogging.log '' / > < appendToFile value= '' true '' / > < rollingStyle value= '' Size '' / > < maxSizeRollBackups value= '' 5 '' / > < maximumFileSize value= '' 10MB '' / > < staticLogFileName value= '' true '' / > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % date [ % thread ] % level % logger - % message % newline '' / > < /layout > < /appender > < /log4net > < /configuration > [ assembly : XmlConfigurator ( ConfigFile = `` log4net.config '' , Watch = true ) ] XmlConfigurator.Configure ( ) ; ILog logger = LogManager.GetLogger ( MethodBase.GetCurrentMethod ( ) .DeclaringType ) ; logger.Info ( `` Application started . `` ) ; readonly ILog logger = LogManager.GetLogger ( System.Reflection.MethodBase.GetCurrentMethod ( ) .DeclaringType ) ; logger.Info ( `` some logging here '' ) ; context.Database.Log = ( dbLog = > logger.Debug ( dbLog ) ) ; < appSettings > < add key= '' log4net.Internal.Debug '' value= '' true '' / > < /appSettings > < system.diagnostics > < trace autoflush= '' true '' > < listeners > < add name= '' textWriterTraceListener '' type= '' System.Diagnostics.TextWriterTraceListener '' initializeData= '' C : \log4net.txt '' / > < /listeners > < /trace > < /system.diagnostics > < ! -- < appender name= '' console '' type= '' log4net.Appender.ConsoleAppender '' > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % date % level % logger - % message % newline '' / > < /layout > < /appender > -- >"
"namespace CodeEnumType { public enum MyEnum : byte { Member1 = 0 , Member2 = 1 , } } < # @ template hostspecific= '' true '' language= '' C # '' # > < # @ output extension= '' .cs '' # > < # @ assembly name= '' EnvDte '' # > < # @ import namespace= '' EnvDTE '' # > < # @ import namespace= '' System.Collections.Generic '' # > < # var serviceProvider = this.Host as IServiceProvider ; var dte = serviceProvider.GetService ( typeof ( DTE ) ) as DTE ; var project = dte.Solution.FindProjectItem ( this.Host.TemplateFile ) .ContainingProject as Project ; var projectItems = GetProjectItemsRecursively ( project.ProjectItems ) ; foreach ( var projectItem in projectItems ) { var fileCodeModel = projectItem.FileCodeModel ; if ( fileCodeModel == null ) { continue ; } CodeElements codeElements = fileCodeModel.CodeElements ; ProcessCodeElements ( codeElements ) ; } # > < # +public void ProcessCodeElements ( CodeElements codeElements ) { if ( codeElements == null ) { return ; } foreach ( CodeElement codeElement in codeElements ) { switch ( codeElement.Kind ) { case vsCMElement.vsCMElementNamespace : CodeNamespace codeNamespace = codeElement as CodeNamespace ; CodeElements childCodeElements = codeNamespace.Members ; ProcessCodeElements ( childCodeElements ) ; break ; case vsCMElement.vsCMElementEnum : CodeEnum codeEnum = codeElement as CodeEnum ; WriteLine ( codeEnum.Name ) ; // // here I would like the enum type // break ; } } } public IEnumerable < ProjectItem > GetProjectItemsRecursively ( ProjectItems items ) { if ( items == null ) { yield break ; } foreach ( ProjectItem item in items ) { yield return item ; var childItems = GetProjectItemsRecursively ( item.ProjectItems ) ; foreach ( ProjectItem childItem in childItems ) { yield return childItem ; } } } # > // // here I would like the enum type //"
"public class ServicesRegistry : Registry { public ServicesRegistry ( ) { Scan ( x = > { x.AssemblyContainingType < MyMarkerService > ( ) ; x.WithDefaultConventions ( ) ; } ) ; } } public class LogInterceptor : IInterceptor { public void Intercept ( IInvocation invocation ) { var watch = Stopwatch.StartNew ( ) ; invocation.Proceed ( ) ; watch.Stop ( ) ; //log the time } } var proxyGenerator = new ProxyGenerator ( ) ; container.Configure ( x = > x.For < IServiceA > ( ) .Use < ServiceA > ( ) .DecorateWith ( instance = > proxyGenerator.CreateInterfaceProxyWithTarget ( instance , new LogInterceptor ( ) ) ) ) ;"
actualWidth = ( double ) System.Windows.Browser.HtmlPage.Window.Eval ( `` screen.width '' ) ; actualHeight = ( double ) System.Windows.Browser.HtmlPage.Window.Eval ( `` screen.height '' ) ;
public static IEnumerable < TSource > AsEnumerable < TSource > ( this IEnumerable < TSource > source ) { return source ; }
public Guid TestKey { get { lock ( _testKeyLock ) { return _testKey ; } } set { lock ( _testKeyLock ) { _testKey = value ; } } } get { Guid result ; lock ( _testKeyLock ) { result = _testKey ; } return result ; }
"XDocument xDoc ; List < string > propertiesToMask ; foreach ( string propertyToMask in propertiesToMask ) { foreach ( XElement element in xDoc.Descendants ( propertyToMask ) ) { element.SetValue ( new string ( ' _ ' , element.Value.Length ) ) ; } } propertiesToMask .ForEach ( propertyToMask = > xDoc.Descendants ( propertyToMask ) .ToList ( ) .ForEach ( element = > element.SetValue ( new string ( ' _ ' , element.Value.Length ) ) ) ) ;"
short a=0 ; Console.Write ( Marshal.SizeOf ( a ) ) ; /*1*/ IL_0000 : ldc.i4.0 /*2*/ IL_0001 : stloc.0 /*3*/ IL_0002 : ldloc.0 /*4*/ IL_0003 : box System.Int16/*5*/ IL_0008 : call System.Runtime.InteropServices.Marshal.SizeOf/*6*/ IL_000D : call System.Console.Write
"[ ComVisible ] public class Gizmo { public string name { get ; set ; } } [ ComVisible ] public class GizmoUser { public void doSomethingWith ( object oGizmo ) { Gizmo g = ( Gizmo ) oGizmo ; System.Diagnostics.Debug.WriteLine ( g.name ) ; } } var // Returns a Gizmo instance gizmo = window.external.GiveMeAGizmo ( ) , // Returns a GizmoUser instance gUser = window.external.GiveMeAGizmoUser ( ) ; gizmo.name = 'hello ' ; // Passes Gizmo instance back to C # codegUser.doSomethingWith ( gizmo ) ;"
"protected internal override Expression Accept ( ExpressionVisitor visitor ) { return visitor.VisitMemberInit ( this ) ; } protected override Expression Accept ( ExpressionVisitor visitor ) { return this.Update ( visitor.VisitAndConvert ( this.NewExpression , `` VisitMemberInit '' ) , visitor.Visit ( this.Bindings , VisitMemberBinding ) ) ; }"
"private void UploadFileToFTP ( HttpPostedFile file , string server , string user , string pass ) { string uploadUrl = server + file.FileName ; string uploadFileName = Path.GetFileName ( file.FileName ) ; Stream streamObj = file.InputStream ; Byte [ ] buffer = new Byte [ file.ContentLength ] ; streamObj.Read ( buffer , 0 , buffer.Length ) ; streamObj.Close ( ) ; streamObj = null ; try { SetMethodRequiresCWD ( ) ; FtpWebRequest ftp = ( FtpWebRequest ) FtpWebRequest.Create ( uploadUrl ) ; //ftp.Method = WebRequestMethods.Ftp.MakeDirectory ; ftp.Method = WebRequestMethods.Ftp.UploadFile ; ftp.UsePassive = true ; ftp.Credentials = new NetworkCredential ( user , pass ) ; FtpWebResponse CreateForderResponse = ( FtpWebResponse ) ftp.GetResponse ( ) ; if ( CreateForderResponse.StatusCode == FtpStatusCode.PathnameCreated ) { string ftpUrl = string.Format ( `` { 0 } / { 1 } '' , uploadUrl , uploadFileName ) ; FtpWebRequest requestObj = FtpWebRequest.Create ( ftpUrl ) as FtpWebRequest ; requestObj.KeepAlive = true ; requestObj.UseBinary = true ; requestObj.Method = WebRequestMethods.Ftp.UploadFile ; requestObj.Credentials = new NetworkCredential ( user , pass ) ; Stream requestStream = requestObj.GetRequestStream ( ) ; requestStream.Write ( buffer , 0 , buffer.Length ) ; requestStream.Flush ( ) ; requestStream.Close ( ) ; requestObj = null ; } } catch ( WebException e ) { String status = ( ( FtpWebResponse ) e.Response ) .StatusDescription ; } }"
class Test { public BinaryWriter Content { get ; private set ; } public Test Write < T > ( T data ) { Content.Write ( data ) ; return this ; } } 1 . The best overloaded method match for 'System.IO.BinaryWriter.Write ( bool ) ' has some invalid arguments2 . Argument 1 : can not convert from 'T ' to 'bool '
public abstract class TaskBase { public abstract void DoWork ( ) ; } LoadAssemblyFromFile ( `` Assembly0001.dll '' ) ; Assembly0001.Task1.DoWork ( ) ; public sealed class Task1 : MasterAssembly.TaskBase { public override void DoWork { /* whatever */ } }
public static T SomeMethod < T > ( this object value ) where T ! = IEnumerable { }
"Private countObjects As IntegerPrivate Sub MyMainFunction ( ) Dim objects As List ( Of MyObject ) 'Query with Dapper , unrelevant to the problem . Using connection As New System.Data.SqlClient.SqlConnection ( `` aConnectionString '' ) objects = connection.Query ( `` SELECT * FROM Foo '' ) 'Returns around 81000 rows . End Using Parallel.ForEach ( objects , Sub ( u ) MyParallelFunction ( u ) ) Console.WriteLine ( String.Format ( `` Count : { 0 } '' , countObjects ) ) 'Prints `` Count : 80035 '' or another incorrect count , which seems to differ on each execution of MyMainFunction.End SubPrivate Sub MyParallelFunction ( obj As MyObject ) Interlocked.Increment ( countObjects ) 'Breakpoint Hit Count is at around 81300 or another incorrect number when done . 'Continues executing unrelated code using obj ... End Sub Private countObjects As IntegerPrivate locker As SomeTypePrivate Sub MyMainFunction ( ) locker = New SomeType ( ) Dim objects As List ( Of MyObject ) 'Query with Dapper , unrelevant to the problem . Using connection As New System.Data.SqlClient.SqlConnection ( `` aConnectionString '' ) objects = connection.Query ( `` SELECT * FROM Foo '' ) 'Returns around 81000 rows . End Using Parallel.ForEach ( objects , Sub ( u ) MyParallelFunction ( u ) ) Console.WriteLine ( String.Format ( `` Count : { 0 } '' , countObjects ) ) 'Prints `` Count : 81000 '' .End SubPrivate Sub MyParallelFunction ( obj As MyObject ) SyncLock locker countObjects += 1 'Breakpoint Hit Count is 81000 when done . End SyncLock 'Continues executing unrelated code using obj ... End Sub Sub Main ( ) Dim oClass1 As New Class1 oClass1.MyMainFunction ( ) End Sub Imports System.ThreadingPublic Class Class1 Public Class Dummy Public Sub New ( ) End Sub End Class Public Class MyObject Public Property Id As Integer Public Sub New ( p_Id As Integer ) Id = p_Id End Sub End Class Public Property countObjects As Integer Private locker As Dummy Public Sub MyMainFunction ( ) locker = New Dummy ( ) Dim objects As New List ( Of MyObject ) For i As Integer = 1 To 81000 objects.Add ( New MyObject ( i ) ) Next Parallel.ForEach ( objects , Sub ( u As MyObject ) MyParallelFunction ( u ) End Sub ) Console.WriteLine ( String.Format ( `` Count : { 0 } '' , countObjects ) ) 'Interlock prints an incorrect count , different in each execution . SyncLock prints the correct count . Console.ReadLine ( ) End Sub 'Interlocked Private Sub MyParallelFunction ( ByVal obj As MyObject ) Interlocked.Increment ( countObjects ) End Sub 'SyncLock 'Private Sub MyParallelFunction ( ByVal obj As MyObject ) ' SyncLock locker ' countObjects += 1 ' End SyncLock 'End SubEnd Class"
"var comboBoxItem1 = new ComboBoxItem ( ) ; var comboBoxItem2 = new ComboBoxItem ( ) ; cmb.Items.Add ( comboBoxItem1 ) ; cmb.Items.Add ( comboBoxItem2 ) ; comboBoxItem1.Content = `` 1 '' ; comboBoxItem1.MouseMove += ( s , args ) = > { MessageBox.Show ( `` 1 '' ) ; } ; comboBoxItem2.Content = `` 2 '' ; comboBoxItem2.MouseMove += ( s , args ) = > { MessageBox.Show ( `` 2 '' ) ; } ; StackPanel spCondition = new StackPanel ( ) ; spCondition.Orientation = Orientation.Horizontal ; ComboBox cmbValue1 = new ComboBox ( ) ; cmbValue1.IsTextSearchEnabled = false ; cmbValue1.IsEditable = true ; cmbValue1.Width = 70 ; cmbValue1.LostFocus += cmbValue_LostFocus ; cmbValue1.PreviewMouseLeftButtonDown += cmbValue_MouseLeftButtonDown ; cmbValue1.SelectionChanged += cmbValue_SelectionChanged ; Border border = new Border ( ) ; border.Child = cmbValue1 ; spCondition.Children.Add ( border ) ; private void cmbValue_MouseLeftButtonDown ( object sender , MouseButtonEventArgs e ) { ComboBox cmb = sender as ComboBox ; cmb.Items.Clear ( ) ; //Iterates through all virtual tables foreach ( TableContainer table in parentTable.ParentVisualQueryBuilder.ListOpenUnjoinedTables ) { ComboBoxItem item = new ComboBoxItem ( ) ; item.MouseMove += item_MouseMove ; if ( table.IsVirtual == false ) { item.Content = `` [ `` + table.TableDescription + `` ] '' ; } else { item.Content = `` [ `` + table.View.Name + `` ] '' ; } item.Tag = table ; cmb.Items.Add ( item ) ; } }"
var treeViewItem = ( TreeViewItem ) e.NewValue ; var treeViewItemTag = treeViewItem.Tag ; if ( treeViewItemTag == `` ViewForAMs '' ) { ObjectQuery < AccountManagerView > oq = entities.AccountManagerViews ; var q = from c in oq select c ; dataGrid1.ItemsSource = q.ToList ( ) ; } < Window x : Class= '' AccountingWpfApplication1.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' Loaded= '' Window_Loaded '' > < DockPanel > < TreeView Name= '' treeView1 '' ItemsSource= '' { Binding Folders } '' SelectedItemChanged= '' treeView1_SelectedItemChanged '' > < TreeViewItem Header= '' Account Manager View '' Tag= '' ViewForAMs '' / > < /TreeView > < DataGrid AutoGenerateColumns= '' True '' Name= '' dataGrid1 '' / > < /DockPanel > < /Window >
"string json = Newtonsoft.Json.JsonConvert.SerializeObject ( from , new JsonSerializerSettings ( ) { TypeNameHandling = TypeNameHandling.All } ) ; public override bool Equals ( object obj ) { if ( obj == null ) return false ; CapacityConfiguration cc = ( CapacityConfiguration ) obj ; // < -- TypeCastException here ; other Properties of the same class are sent in as parameter ! } public override bool Equals ( object obj ) { if ( obj is CapacityConfiguration == false ) return false ; CapacityConfiguration cc = ( CapacityConfiguration ) obj ; } public class JsonTestClass { public string Name { get ; set ; } public List < int > MyIntList { get ; set ; } public override bool Equals ( object obj ) { if ( obj == null ) return false ; JsonTestClass jtc = ( JsonTestClass ) obj ; return true ; } } JsonTestClass c = new JsonTestClass ( ) ; c.Name = `` test '' ; c.MyIntList = new List < int > ( ) ; c.MyIntList.Add ( 1 ) ; string json = Newtonsoft.Json.JsonConvert.SerializeObject ( c , new JsonSerializerSettings ( ) { TypeNameHandling = TypeNameHandling.All } ) ;"
"public class Orchestration < T1 , T2 , T3 > { public Orchestration ( Action < T1 , T2 , T3 > action , int maxNumberOfRetries ) public bool Run ( T1 one , T2 two , T3 three ) var orchestration = new Orchestration < string , string , bool > ( File.Copy , 5 ) ; orchestration.Run ( `` c : \filename.txt '' , `` d : \filename.txt '' , true )"
"public event EventHandler IdleTimeoutReached ; public event EventHandler ? IdleTimeoutReached ; public event EventHandler IdleTimeoutReached = new EventHandler ( ( o , e ) = > { } ) ;"
"if ( Input.GetKey ( `` up '' ) || Input.GetKey ( `` down '' ) || Input.GetKey ( `` left '' ) || Input.GetKey ( `` right '' ) ) { if ( Time.time > NextActionTime ) { NextActionTime = Time.time + Period ; EnemyEncounter = Random.Range ( 1 , 50 ) ; if ( EnemyEncounter == 25 ) { NetworkManager.singleton.ServerChangeScene ( `` Scene2 '' ) ; } } }"
"typeof ( Func < , > ) typeof ( Func < , bool > ) public void Foo < T > ( Func < T , bool > func ) { } public void Foo < T > ( Func < T , int > func ) { } var methodFoo = typeof ( Program ) .GetMethods ( ) .FirstOrDefault ( m = > m.Name == `` Foo '' & & m.GetParameters ( ) [ 0 ] .ParameterType .GetGenericTypeDefinition ( ) == typeof ( Func < , > ) ) ; var methodFoo = typeof ( Program ) .GetMethods ( ) .FirstOrDefault ( m = > m.Name == `` Foo '' & & m.GetParameters ( ) [ 0 ] .ParameterType .GetGenericArguments ( ) [ 1 ] == typeof ( int ) ) ; var methodFoo = typeof ( Program ) .GetMethod ( `` Foo '' , BindingFlags.Public | BindingFlags.Instance , null , new [ ] { typeof ( Func < , bool > ) } , // ERROR typeof ( Func < , > ) does n't work either null ) ;"
"using UnityEngine ; using System.Collections ; public class UnitySingletonPersistent < T > : MonoBehaviour where T : Component { private static T instance ; public static T Instance { get { if ( instance == null ) { instance = FindObjectOfType < T > ( ) ; if ( instance == null ) { GameObject obj = new GameObject ( ) ; obj.name = typeof ( T ) .Name ; obj.hideFlags = HideFlags.DontSave ; instance = obj.AddComponent < T > ( ) ; } } return instance ; } } public virtual void Awake ( ) { DontDestroyOnLoad ( this.gameObject ) ; if ( instance == null ) { instance = this as T ; } else { Destroy ( gameObject ) ; } } } public class DataMgrBase < TKey , TValue > : UnitySingletonPersistent < DataMgrBase < TKey , TValue > > { protected Dictionary < TKey , TValue > dataDict ; public override void Awake ( ) { base.Awake ( ) ; dataDict = new Dictionary < TKey , TValue > ( ) ; } public TValue GetDataForKey ( TKey key ) { TValue data ; if ( dataDict.TryGetValue ( key , out data ) ) { return data ; } else { data = LoadDataForKey ( key ) ; if ( data ! = null ) { dataDict.Add ( key , data ) ; } return data ; } } virtual protected TValue LoadDataForKey ( TKey key ) { if ( dataDict.ContainsKey ( key ) ) { return GetDataForKey ( key ) ; } else { return default ( TValue ) ; } } }"
"Event 7 was called with 5 argument ( s ) , but it is defined with 6 paramenter ( s ) .Event 10 was called with 5 argument ( s ) , but it is defined with 6 paramenter ( s ) .Event 10 was called with 5 argument ( s ) , but it is defined with 6 paramenter ( s ) ."
.method public hidebysig specialname static bool op_Addition ( ... ) { ... } .method public hidebysig specialname static bool + ( ... ) { ... }
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Binary_Search_2 { class Program { static void Main ( string [ ] args ) { int [ ] arr = new int [ 10 ] ; Random rnd = new Random ( ) ; for ( int i = 0 ; i < arr.Length ; i++ ) { arr [ i ] = rnd.Next ( 1 , 10 ) ; } Array.Sort ( arr ) ; for ( int i = 0 ; i < arr.Length ; i++ ) { Console.Write ( `` { 0 } , '' , arr [ i ] ) ; } int Start = 0 ; int End = arr.Length ; int Center = Start + End / 2 ; int Pivot ; while ( arr [ 6 ] > 0 ) { while ( arr [ 6 ] < arr [ Center ] ) { End = Center ; Center = ( End + Start ) / 2 ; if ( Pivot == arr [ Center ] ) { Console.WriteLine ( `` The Index is { 0 } '' , arr [ Center ] ) ; } break ; } while ( arr [ 6 ] > arr [ Center ] ) { Start = Center ; Center = ( End + Start ) / 2 ; if ( Pivot == arr [ Center ] ) //**This is where the error occurs . ** { Console.WriteLine ( `` The index is { 0 } '' , arr [ Center ] ) ; } } } } } }"
Int64 x = 11111111111 ; Int64 y = 11111111111 ; Int64 z = x * y ;
< system.webServer > < rewrite > < rules > < rule name= '' Redirect to HTTPS '' > < match url= '' ( . * ) '' / > < conditions > < add input= '' { HTTPS } '' pattern= '' off '' ignoreCase= '' true '' / > < add input= '' { URL } '' pattern= '' / $ '' negate= '' true '' / > < add input= '' { REQUEST_FILENAME } '' matchType= '' IsFile '' negate= '' true '' / > < /conditions > < action type= '' Redirect '' url= '' https : // { SERVER_NAME } / { R:1 } '' redirectType= '' SeeOther '' / > < /rule > < /rules > < /rewrite >
< add name= '' BA '' connectionString= '' Data Source= ( LocalDB ) \v11.0 ; AttachDbFilename=|DataDirectory|\AppData\TahlilGar.mdf ; Integrated Security=True ; '' providerName= '' System.Data.SqlClient '' / >
"public void TransactionalMethod ( ) { var items = GetListOfItems ( ) ; foreach ( var item in items ) { MethodThatMayThrowException ( item ) ; item.Processed = true ; } } var customers = new Dictionary < CustomerKey , Customer > ( ) ; var customerTx = new Dictionary < CustomerKey , Customer > ( ) ; foreach ( var customer in customers.Values ) { var updatedCust = customer.Clone ( ) ; customerTx.Add ( GetKey ( updatedCust ) , updatedCust ) ; if ( CalculateRevenueMightThrowException ( customer ) > = 10000 ) { updatedCust.Preferred = true ; } } lock ( customers ) { customers = customerTx ; } foreach ( var kvp in customerTx ) { customers [ kvp.Key ] = kvp.Value ; }"
"private static readonlyDictionary < Type , Func < object , byte [ ] > > Converters = new Dictionary < Type , Func < object , byte [ ] > > ( ) { { typeof ( byte ) , o = > BitConverter.GetBytes ( ( byte ) o ) } , { typeof ( int ) , o = > BitConverter.GetBytes ( ( int ) o ) } , { typeof ( UInt16 ) , o = > BitConverter.GetBytes ( ( UInt16 ) o ) } , ... } ; public static void ToBytes ( object [ ] data , byte [ ] buffer ) { int offset = 0 ; foreach ( object obj in data ) { if ( obj == null ) { // Or do whatever you want throw new ArgumentException ( `` Unable to convert null values '' ) ; } Func < object , byte [ ] > converter ; if ( ! Converters.TryGetValue ( obj.GetType ( ) , out converter ) ) { throw new ArgumentException ( `` No converter for `` + obj.GetType ( ) ) ; } byte [ ] obytes = converter ( obj ) ; Buffer.BlockCopy ( obytes , 0 , buffer , offset , obytes.Length ) ; offset += obytes.Length ; } } byte [ ] obytes = converter ( obj ) ;"
"*c++ = *a++ - *b++ ; [ STAThread ] unsafe static void Main ( string [ ] args ) { double [ ] arr = new double [ ] { 2 , 4 , 6 , 8 , 10 } ; double scalar = 1 ; fixed ( double* arrP = arr ) { double* end = arrP + arr.Length ; double* p = arrP ; double* p2 = arrP ; while ( p < end ) { // gives : 3,5,7,9,2,4827634676971E+209 *p++ = *p - scalar ; // gives correct result : 1,3,5,7,9 //*p = *p - scalar ; //p++ ; } } Console.WriteLine ( String.Join < double > ( `` , '' , arr ) ) ; Console.ReadKey ( ) ; }"
"private Panel _pnlBacteria ; //Panel representing a piece of bacteriaprivate Random r = new Random ( ) ; //For randomly-generated valuesprivate int _prevX ; //Stores the previous X locationprivate int _prevY ; //Stores the previous Y locationpublic Form1 ( ) { InitializeComponent ( ) ; _pnlBacteria = new Panel ( ) ; /* Get more property assignments to this._pnlBacteria ( omitted ) */ //Bacteria 's start position is also randomly selected _prevX = r.Next ( 50 , 300 ) ; _prevY = r.Next ( 50 , 500 ) ; } //Timer runs every 100 seconds changing the location of the bacteriaprivate void TmrMoveBacteria_Tick ( object sender , EventArgs e ) { int x , y ; //Get random values for X and Y based on where the bacteria was previously //and move randomly within ±10 range . Also it can not go off the screen . do { x = r.Next ( _prevX - 10 , _prevX + 10 ) ; y = r.Next ( _prevY - 10 , _prevY + 10 ) ; } while ( ( y < = 0 ) || ( y > = 500 ) || ( x < = 0 ) || ( x > = 300 ) ) ; //Save the new location to be used in the next Tick round as previous values _prevX = x ; _prevY = y ; //Apply the actual location change to the bacteria panel _pnlBacteria.Top = y ; _pnlBacteria.Left = x ; }"
"// This constructor is not used by the MVC framework but is instead provided for ease// of unit testing this type . See the comments at the end of this file for more// information.public AccountController ( IFormsAuthentication formsAuth , IMembershipService service ) { FormsAuth = formsAuth ? ? new FormsAuthenticationService ( ) ; MembershipService = service ? ? new AccountMembershipService ( ) ; }"
"< TextBox x : Name= '' txtboxSearch '' Height= '' 22 '' Margin= '' 3,35,111,0 '' TextWrapping= '' Wrap '' VerticalAlignment= '' Top '' BorderThickness= '' 1 '' MaxLines= '' 1 '' MaxLength= '' 256 '' Grid.Column= '' 2 '' BorderBrush= '' # FF828790 '' > < TextBox.Style > < Style TargetType= '' TextBox '' xmlns : sys= '' clr-namespace : System ; assembly=mscorlib '' > < Style.Resources > < VisualBrush x : Key= '' CueBannerBrush '' AlignmentX= '' Left '' AlignmentY= '' Center '' Stretch= '' None '' > < VisualBrush.Visual > < TextBox Text= '' Search '' Foreground= '' LightGray '' FontStyle= '' Italic '' / > < /VisualBrush.Visual > < /VisualBrush > < /Style.Resources > < Style.Triggers > < Trigger Property= '' Text '' Value= '' { x : Static sys : String.Empty } '' > < Setter Property= '' Background '' Value= '' { StaticResource CueBannerBrush } '' / > < /Trigger > < Trigger Property= '' Text '' Value= '' { x : Null } '' > < Setter Property= '' Background '' Value= '' { StaticResource CueBannerBrush } '' / > < /Trigger > < Trigger Property= '' IsKeyboardFocused '' Value= '' True '' > < Setter Property= '' Background '' Value= '' White '' / > < /Trigger > < /Style.Triggers > < /Style > < /TextBox.Style > < /TextBox >"
Type type = paramInfo.ParameterType ; public TObject Stub < TObject > ( ) { Fixture fixture = new Fixture ( ) ; return fixture.Create < TObject > ( ) ; } Type type = parameterInfo.ParameterType ; var obj = Stub < type > ( ) ; //Compile error ! ( `` can not resolve symbol type '' )
"POST http : //example.com/token HTTP/1.1User-Agent : FiddlerContent-Type : x-www-form-urlencodedHost : example.comContent-Length : 73grant_type=password & username=example @ example.com & password=examplePassword HTTP/1.1 200 OKCache-Control : no-cachePragma : no-cacheContent-Type : application/json ; charset=UTF-8Expires : -1Server : Microsoft-IIS/10.0X-Powered-By : ASP.NETDate : Tue , 16 Aug 2016 12:04:39 GMT { `` access_token '' : `` xxxx '' , `` token_type '' : `` bearer '' , `` expires_in '' : 17999 , `` refresh_token '' : `` xxxx '' , `` .issued '' : `` Tue , 16 Aug 2016 12:04:38 GMT '' , `` .expires '' : `` Tue , 16 Aug 2016 17:04:38 GMT '' } var result = await _signInManager.PasswordSignInAsync ( model.UserName , model.Password , model.RememberMe , shouldLockout : false ) ; public Task < SignInStatus > PasswordSignInAsync ( string userName , string password , bool isPersistent , bool shouldLockout ) on ` SignInManager < , > ` and make a web call across to the security server ."
"internal class LocalizationFeature : IPlugin { public static bool Enabled { private set ; get ; } /// < summary > /// Activate the localization mechanism , so every response Dto which is a < see cref= '' ILocalizedDto '' / > /// will be translated . /// < /summary > /// < param name= '' appHost '' > The app host < /param > public void Register ( IAppHost appHost ) { if ( Enabled ) { return ; } Enabled = true ; var filter = new LocalizationFilter ( ) ; appHost.RequestFilters.Add ( filter.RequestFilter ) ; appHost.ResponseFilters.Add ( filter.ResponseFilter ) ; } } // My request/response filterpublic class LocalizationFilter { private readonly Dictionary < int , ILocalizedRequest > localizedRequests = new Dictionary < int , ILocalizedRequest > ( ) ; public ILocalizer Localizer { get ; set ; } public void RequestFilter ( IHttpRequest req , IHttpResponse res , object requestDto ) { var localizedRequest = requestDto as ILocalizedRequest ; if ( localizedRequest ! = null ) { localizedRequests.Add ( GetRequestId ( req ) , localizedRequest ) ; } } public void ResponseFilter ( IHttpRequest req , IHttpResponse res , object response ) { var requestId = GetRequestId ( req ) ; if ( ! ( response is ILocalizedDto ) || ! localizedRequests.ContainsKey ( requestId ) ) { return ; } var localizedDto = response as ILocalizedDto ; var localizedRequest = localizedRequests [ requestId ] ; localizedRequests.Remove ( requestId ) ; Localizer.Translate ( localizedDto , localizedRequest.Language ) ; } private static int GetRequestId ( IHttpRequest req ) { return req.GetHashCode ( ) ; } }"
"if ( body.TrackingState == SkeletonTrackingState.Tracked ) { Joint joint = body.Joints [ JointType.Head ] ; SkeletonPoint skeletonPoint = joint.Position ; // 2D coordinates in pixels System.Drawing.Point point = new System.Drawing.Point ( ) ; if ( _mode == CameraMode.Color ) { // Skeleton-to-Color mapping ColorImagePoint colorPoint = _sensor.CoordinateMapper.MapSkeletonPointToColorPoint ( skeletonPoint , ColorImageFormat.RgbResolution640x480Fps30 ) ; point.X = colorPoint.X ; point.Y = colorPoint.Y ; //Console.WriteLine ( `` X == `` + point.X + `` Y == `` + point.Y ) ; X = ( int ) Math.Floor ( point.X + 0.5 ) ; Y = ( int ) Math.Floor ( point.Y + 0.5 ) ; } // DRAWING ... Ellipse ellipse = new Ellipse { Fill = System.Windows.Media.Brushes.LightBlue , Width = 20 , Height = 20 } ; Canvas.SetLeft ( ellipse , point.X - ellipse.Width / 2 ) ; Canvas.SetTop ( ellipse , point.Y - ellipse.Height / 2 ) ; canvas.Children.Add ( ellipse ) ; }"
"public class Request { public string Type { get ; set ; } public string Username { get ; set ; } public string Key { get ; set ; } } var request = new Request { Type = `` Not null '' , Username = `` Not null '' } ; // Get an error here that Key is null"
volatile int value = 100000 ; // < -- do I need the volitile keyword// ... .public void AnotherThreadMethod ( ) { while ( Interlocked.Decrement ( ref value ) > 0 ) { // do something } } public void AThreadMethod ( ) { while ( value > 0 ) { // do something } } public class CountDownLatch { private volatile int m_remain ; // < -- - do I need the volatile keyword here ? private EventWaitHandle m_event ; public CountDownLatch ( int count ) { Reset ( count ) ; } public void Reset ( int count ) { if ( count < 0 ) throw new ArgumentOutOfRangeException ( ) ; m_remain = count ; m_event = new ManualResetEvent ( false ) ; if ( m_remain == 0 ) { m_event.Set ( ) ; } } public void Signal ( ) { // The last thread to signal also sets the event . if ( Interlocked.Decrement ( ref m_remain ) == 0 ) m_event.Set ( ) ; } public void Wait ( ) { m_event.WaitOne ( ) ; } }
static void Main ( ) { ManualResetEvent m = new ManualResetEvent ( true ) ; // or bool b = true Thread thread = new Thread ( new ThreadStart ( delegate ( ) { while ( m.WaitOne ( ) ) //or while ( b ) { //do something } //perform final operation and exit } ) ) ; thread.Start ( ) ; //do something m.Reset ( ) ; //or b = false //do something else } static void Main ( ) { Thread thread = new Thread ( new ThreadStart ( delegate ( ) { try { while ( true ) { //do something } } catch ( ThreadAbortException e ) { //perform final operation and exit } } ) ) ; thread.Start ( ) ; //do something thread.Abort ( ) ; //do something else }
public abstract class Base { protected abstract AlgorithmStep1 ( ) ; protected abstract AlgorithmStep2 ( ) ; public sealed void TemplateMethod ( ) // sealed : compile error { AlgorithmStep1 ( ) ; AlgorithmStep2 ( ) ; } }
╔════╤═══════╤══════════╤══════╗║ id │ ime │ surname │ year ║╠════╪═══════╪══════════╪══════╣║ 1 │ Name1 │ Surname1 │ 1994 ║╟────┼───────┼──────────┼──────╢║ 1 │ Name1 │ Surname1 │ 1995 ║╟────┼───────┼──────────┼──────╢║ 2 │ Name2 │ Surname2 │ 1996 ║╟────┼───────┼──────────┼──────╢║ 3 │ Name3 │ Surname3 │ 1996 ║╚════╧═══════╧══════════╧══════╝ ╔════╤═══════╤══════════╤═══════╗║ id │ ime │ surname │ year ║╠════╪═══════╪══════════╪═══════╣║ 1 │ Name1 │ Surname1 │ 1994 ║║ │ │ │ 1995 ║╟────┼───────┼──────────┼───────╢║ 2 │ Name2 │ Surname2 │ 1996 ║╟────┼───────┼──────────┼───────╢║ 3 │ Name3 │ Surname3 │ 1996 ║╚════╧═══════╧══════════╧═══════╝ ╔════╤═══════╤══════════╤═══════╗║ id │ ime │ surname │ year ║╠════╪═══════╪══════════╪═══════╣║ 1 │ Name1 │ Surname1 │ 1994 ║╟────────────┼──────────┤ 1995 ║║ │ Surname1 │ ║╟────────────┼──────────┼───────╢║ 2 │ Name2 │ Surname2 │ 1996 ║╟────┼───────┼──────────┼───────╢║ 3 │ Name3 │ Surname3 │ 1996 ║╚════╧═══════╧══════════╧═══════╝
"I need the Authorize attribute in our Controller can accept two difernts tokens . One token , is provided from one private ADFS , and other token is provided from AzureAd . Several Ionic clients go to over ADFS , other Ionic clients go to over Azure AD My Dev Scenario : Asp.Net Core 2.2 WebApiMy actual startup.cs ( abreviated ) services.AddAuthentication ( JwtBearerDefaults.AuthenticationScheme ) .AddJwtBearer ( ( options = > { options.Audience = Configuration [ `` Adfs : Audience '' ] ; options.Authority = Configuration [ `` Adfs : Issuer '' ] ; options.SaveToken = true ; options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = false } ; } ) ) ; Configure ( … ) { app.UseAuthentication ( ) }"
"string [ ] result = Regex.Split ( text , pattern ) ; private string [ ] Split ( ) { List < string > list = new List < string > ( ) ; int pos = 0 , i = 0 ; bool within = false ; Func < string > add = ( ) = > Format.Substring ( pos , i - pos ) ; //string a ; for ( ; i < Format.Length ; i++ ) { //a = add ( ) ; char c = Format [ i ] ; switch ( c ) { case '/ ' : if ( ! within ) { list.Add ( add ( ) ) ; pos = i + 1 ; } break ; case ' [ ' : within = true ; break ; case ' ] ' : within = false ; break ; } } list.Add ( add ( ) ) ; return list.Where ( s = > ! string.IsNullOrEmpty ( s ) ) .ToArray ( ) ; }"
"public static string Encrypt ( this string plainText ) { RijndaelManaged aes = new RijndaelManaged ( ) ; aes.KeySize = 256 ; aes.BlockSize = 128 ; aes.Padding = PaddingMode.Zeros ; aes.Mode = CipherMode.CBC ; aes.Key = Encoding.Default.GetBytes ( key ) ; aes.GenerateIV ( ) ; ICryptoTransform AESEncrypt = aes.CreateEncryptor ( aes.Key , aes.IV ) ; byte [ ] buffer = Encoding.ASCII.GetBytes ( plainText ) ; String encryptedText = Convert.ToBase64String ( Encoding.Default.GetBytes ( Encoding.Default.GetString ( AESEncrypt.TransformFinalBlock ( buffer , 0 , buffer.Length ) ) ) ) ; String mac = `` '' ; using ( var hmacsha256 = new HMACSHA256 ( Encoding.Default.GetBytes ( key ) ) ) { hmacsha256.ComputeHash ( Encoding.Default.GetBytes ( Convert.ToBase64String ( aes.IV ) + encryptedText ) ) ; mac = ByteArrToString ( hmacsha256.Hash ) ; } var keyValues = new Dictionary < string , object > { { `` iv '' , Convert.ToBase64String ( aes.IV ) } , { `` value '' , encryptedText } , { `` mac '' , mac } , } ; JavaScriptSerializer serializer = new JavaScriptSerializer ( ) ; //return serializer.Serialize ( keyValues ) ; return Convert.ToBase64String ( Encoding.ASCII.GetBytes ( serializer.Serialize ( keyValues ) ) ) ; } public static string Decrypt ( this string cipherText ) { RijndaelManaged aes = new RijndaelManaged ( ) ; aes.KeySize = 256 ; aes.BlockSize = 128 ; aes.Padding = PaddingMode.Zeros ; aes.Mode = CipherMode.CBC ; aes.Key = Encoding.Default.GetBytes ( key ) ; dynamic payload = GetJsonPayload ( cipherText ) ; //return Encoding.Default.GetString ( Convert.FromBase64String ( cipherText ) ) ; //cipherText = Convert.ToBase64String ( Encoding.Default.GetBytes ( payload [ `` value '' ] ) ) ; aes.IV = Convert.FromBase64String ( payload [ `` iv '' ] ) ; ICryptoTransform AESDecrypt = aes.CreateDecryptor ( aes.Key , aes.IV ) ; byte [ ] buffer = Convert.FromBase64String ( payload [ `` value '' ] ) ; return ( Encoding.Default.GetString ( AESDecrypt.TransformFinalBlock ( buffer , 0 , buffer.Length ) ) ) .ToString ( ) ; }"
"pairs = [ ( 2 , '' dog '' ) , ( 1 , `` cat '' ) , ( 3 , `` dragon '' ) , ( 1 , `` tiger '' ) ] # Returns the PAIR ( not the number ) that minimizes on pair [ 0 ] min_pair = min ( pairs , key=lambda pair : pair [ 0 ] ) # this will return ( 1 , 'cat ' ) , NOT 1 class Animal { public string name ; public int age ; }"
"[ Serializable ] public class WorkItem { } { `` webroot '' : `` wwwroot '' , `` version '' : `` 1.0.0-* '' , `` dependencies '' : { `` Microsoft.AspNet.Server.IIS '' : `` 1.0.0-beta7 '' , `` Microsoft.AspNet.Server.WebListener '' : `` 1.0.0-beta7 '' , `` _my.DataAccess.Common '' : `` 1.0.0-* '' , `` _my.DependencyInjection.Common '' : `` 1.0.0-* '' , `` System.Runtime.Serialization '' : `` 4.0.0.0 '' } , `` commands '' : { `` web '' : `` Microsoft.AspNet.Hosting -- config hosting.ini '' } , `` frameworks '' : { `` dnx451 '' : { `` frameworkAssemblies '' : { `` System.Runtime.Serialization '' : `` 4.0.0.0 '' } } , `` dnxcore50 '' : { } } , `` publishExclude '' : [ `` node_modules '' , `` bower_components '' , `` **.xproj '' , `` **.user '' , `` **.vspscc '' ] , `` exclude '' : [ `` wwwroot '' , `` node_modules '' , `` bower_components '' ] }"
string source = `` Test/Company/Business/Department/Logs.tvs/v1 '' ; static void Main ( ) { string component = String.Empty ; string version = String.Empty ; string source = `` Test/Company/Business/Department/Logs.tvs/v1 '' ; if ( ! String.IsNullOrEmpty ( source ) ) { String [ ] partsOfSource = source.Split ( '/ ' ) ; if ( partsOfSource ! = null ) { if ( partsOfSource.Length > 2 ) { component = partsOfSource [ partsOfSource.Length - 2 ] ; } if ( partsOfSource.Length > 1 ) { version = partsOfSource [ partsOfSource.Length - 1 ] ; } } } Console.WriteLine ( component ) ; Console.WriteLine ( version ) ; Console.Read ( ) ; }
"int i ; int* pi = & i ; int i ; IntPtr pi = & i ; string aString = text ; byte [ ] theBytes = System.Text.Encoding.Default.GetBytes ( aString ) ; // Marshal the managed struct to a native block of memory . int myStructSize = theBytes.Length ; IntPtr pMyStruct = Marshal.AllocHGlobal ( myStructSize ) ; //int* or IntPtr is good ? try { Marshal.Copy ( theBytes , 0 , pMyStruct , myStructSize ) ; ... ... ... ... ..."
"DataSet ds = new DataSet ( ) ; SqlConnection cs = new SqlConnection ( @ '' Data Source=DELL-PC ; Initial Catalog=Image_DB ; Integrated Security=True '' ) ; SqlDataAdapter da = new SqlDataAdapter ( ) ; SqlCommand cmd = new SqlCommand ( ) ; BindingSource Input = new BindingSource ( ) ; DataView dview = new DataView ( ) ; private void Form1_Load ( object sender , EventArgs e ) { //create a DataGridView Image Column DataGridViewImageColumn dgvImage = new DataGridViewImageColumn ( ) ; //set a header test to DataGridView Image Column dgvImage.HeaderText = `` Images '' ; dgvImage.ImageLayout = DataGridViewImageCellLayout.Stretch ; DataGridViewTextBoxColumn dgvId = new DataGridViewTextBoxColumn ( ) ; dgvId.HeaderText = `` ID '' ; DataGridViewTextBoxColumn dgvName = new DataGridViewTextBoxColumn ( ) ; dgvName.HeaderText = `` Name '' ; dataGridView1.Columns.Add ( dgvId ) ; dataGridView1.Columns.Add ( dgvName ) ; dataGridView1.Columns.Add ( dgvImage ) ; dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill ; dataGridView1.RowTemplate.Height = 120 ; dataGridView1.AllowUserToAddRows = false ; } // button add data to dataGridView // insert image from pictureBox to dataGridView private void btn_Add_Click ( object sender , EventArgs e ) { MemoryStream ms = new MemoryStream ( ) ; pictureBox1.Image.Save ( ms , pictureBox1.Image.RawFormat ) ; byte [ ] img = ms.ToArray ( ) ; dataGridView1.Rows.Add ( txt_UserID.Text , txt_Name.Text , img ) ; } // browse image in pictureBox1 Click private void pictureBox1_Click ( object sender , EventArgs e ) { OpenFileDialog opf = new OpenFileDialog ( ) ; opf.Filter = `` Choose Image ( *.jpg ; *.png ; *.gif ) |*.jpg ; *.png ; *.gif '' ; if ( opf.ShowDialog ( ) == DialogResult.OK ) { pictureBox1.Image = Image.FromFile ( opf.FileName ) ; } } private void btn_Save_Click ( object sender , EventArgs e ) { for ( int i = 5 ; i < dataGridView1.Rows.Count ; i++ ) { string col1 = dataGridView1 [ 0 , dataGridView1.CurrentCell.RowIndex ] .Value.ToString ( ) ; string col2 = dataGridView1 [ 1 , dataGridView1.CurrentCell.RowIndex ] .Value.ToString ( ) ; string col3 = dataGridView1 [ 2 , dataGridView1.CurrentCell.RowIndex ] .Value.ToString ( ) ; string insert_sql = `` INSERT INTO Input ( UserID , UserName , PassImage ) VALUES ( ' '' + col1 + `` ' , ' '' + col2 + `` ' , ' '' + col3 + `` ' ) '' ; this.getcom ( insert_sql ) ; } MessageBox.Show ( `` Record Added '' ) ; } public SqlConnection GetSqlConnection ( ) //connection function { string str_sqlcon = `` Data Source=DELL-PC ; Initial Catalog=Image_DB ; Integrated Security=True '' ; SqlConnection mycon = new SqlConnection ( str_sqlcon ) ; mycon.Open ( ) ; return mycon ; } public void getcom ( string sqlstr ) //function for adding rows { SqlConnection sqlcon = this.GetSqlConnection ( ) ; // Watch out same string type as GetSQLConnection function SqlCommand sqlcom = new SqlCommand ( sqlstr , sqlcon ) ; sqlcom.ExecuteNonQuery ( ) ; sqlcom.Dispose ( ) ; sqlcon.Close ( ) ; sqlcon.Dispose ( ) ; }"
"string name = string.Format ( `` { 0 : yyyyMMddHHmmss } '' , DateTime.Now ) ; string filename = `` TestFile.xml '' ; string filepath = ConfigurationManager.AppSettings [ `` XmlFiles '' ] + `` \\ '' + filename ; DataTable dataTable = dsData.Tables [ 0 ] ; FileStream fs =new FileStream ( filepath , FileMode.Create ) ; XmlWriterSettings xws = new XmlWriterSettings { OmitXmlDeclaration = true } ; using ( XmlWriter xmlWriter = XmlWriter.Create ( fs , xws ) ) { xmlWriter.WriteStartElement ( `` root '' ) ; foreach ( DataRow dataRow in dataTable.Rows ) { xmlWriter.WriteStartElement ( `` datanode '' ) ; foreach ( DataColumn dataColumn in dataTable.Columns ) { xmlWriter.WriteElementString ( dataColumn.ColumnName.Replace ( `` \n\r '' , `` `` ) .Replace ( `` \n '' , `` `` ) .Replace ( `` \r '' , `` `` ) , Convert.ToString ( dataRow [ dataColumn ] ) .Replace ( `` \n\r '' , `` `` ) .Replace ( `` \n '' , `` `` ) .Replace ( `` \r '' , `` `` ) ) ; } xmlWriter.WriteEndElement ( ) ; } xmlWriter.WriteEndElement ( ) ; xmlWriter.Flush ( ) ; xmlWriter.Close ( ) ; } fs.Close ( ) ; Byte [ ] b = File.ReadAllBytes ( filepath ) ; if ( File.Exists ( filepath ) ) File.Delete ( filepath ) ; string s = string.Format ( `` { 0 : yyyyMMddHHmmss } '' , DateTime.Now ) ; HttpContext.Current.Response.ContentType = `` application/xml '' ; HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.UTF8 ; HttpContext.Current.Response.AppendHeader ( `` Content-Disposition '' , `` attachment ; filename= '' + s + `` .xml '' + `` '' ) ; HttpContext.Current.Response.BinaryWrite ( b ) ; HttpContext.Current.Response.End ( ) ;"
"var X = XElement.Parse ( @ '' < ROOT > < MUL v= ' 2 ' / > < MUL v= ' 3 ' / > < /ROOT > '' ) ; Enumerable.Range ( 1 , 100 ) .Select ( s = > X.Elements ( ) .Select ( t = > Int32.Parse ( t.Attribute ( `` v '' ) .Value ) ) .Aggregate ( s , ( t , u ) = > t * u ) ) .ToList ( ) .ForEach ( s = > Console.WriteLine ( s ) ) ;"
"int GetDeviceInfo ( DWORD deviceIndex , DeviceInfo* pDeviceInfo ) ; # pragma once # ifdef STCL_DEVICES_DLL # define STCL_DEVICES_EXPORT extern `` C '' _declspec ( dllexport ) # else # define STCL_DEVICES_EXPORT extern `` C '' _declspec ( dllimport ) # endifenum SD_ERR { SD_ERR_OK = 0 , SD_ERR_FAIL , SD_ERR_DLL_NOT_OPEN , SD_ERR_INVALID_DEVICE , //device with such index does n't exist SD_ERR_FRAME_NOT_SENT , } ; # pragma pack ( 1 ) struct LaserPoint { WORD x ; WORD y ; byte colors [ 6 ] ; } ; struct DeviceInfo { DWORD maxScanrate ; DWORD minScanrate ; DWORD maxNumOfPoints ; char type [ 32 ] ; } ; /////////////////////////////////////////////////////////////////////////////Must be called when starting to use//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int OpenDll ( ) ; /////////////////////////////////////////////////////////////////////////////All devices will be closed and all resources deleted//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT void CloseDll ( ) ; /////////////////////////////////////////////////////////////////////////////Search for .NET devices ( Moncha.NET now ) ///Must be called after OpenDll , but before CreateDeviceList ! ///In pNumOfFoundDevs can return number of found devices ( optional ) //////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int SearchForNETDevices ( DWORD* pNumOfFoundDevs ) ; /////////////////////////////////////////////////////////////////////////////Creates new list of devices - previous devices will be closed///pDeviceCount returns device count//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int CreateDeviceList ( DWORD* pDeviceCount ) ; /////////////////////////////////////////////////////////////////////////////Returns unique device name///deviceIndex is zero based device index//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int GetDeviceIdentifier ( DWORD deviceIndex , WCHAR** ppDeviceName ) ; /////////////////////////////////////////////////////////////////////////////Send frame to device , frame is in following format : ///WORD x///WORD y///byte colors [ 6 ] ///so it 's 10B point ( = > dataSize must be numOfPoints * 10 ) ///scanrate is in Points Per Second ( pps ) //////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int SendFrame ( DWORD deviceIndex , byte* pData , DWORD numOfPoints , DWORD scanrate ) ; /////////////////////////////////////////////////////////////////////////////Returns true in pCanSend if device is ready to send next frame//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int CanSendNextFrame ( DWORD deviceIndex , bool* pCanSend ) ; /////////////////////////////////////////////////////////////////////////////Send DMX if device supports it - pDMX must be ( ! ! ! ) 512B long//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int SendDMX ( DWORD deviceIndex , byte* pDMX ) ; /////////////////////////////////////////////////////////////////////////////Send blank point to position x , y//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int SendBlank ( DWORD deviceIndex , WORD x , WORD y ) ; /////////////////////////////////////////////////////////////////////////////Get device info//////////////////////////////////////////////////////////////////////////STCL_DEVICES_EXPORT int GetDeviceInfo ( DWORD deviceIndex , DeviceInfo* pDeviceInfo ) ; using System ; using System.Threading ; using System.Runtime.InteropServices ; namespace MonchaTestSDK { public class Program { [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int OpenDll ( ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern void CloseDll ( ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int SearchForNETDevices ( ref UInt32 pNumOfFoundDevs ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int CreateDeviceList ( ref UInt32 pDeviceCount ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int GetDeviceIdentifier ( UInt32 deviceIndex , out IntPtr ppDeviceName ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int SendFrame ( UInt32 deviceIndex , LaserPoint [ ] pData , UInt32 numOfPoints , UInt32 scanrate ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int CanSendNextFrame ( UInt32 deviceIndex , ref bool pCanSend ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // OK public static extern int SendBlank ( UInt32 deviceIndex , UInt16 x , UInt16 y ) ; [ DllImport ( `` ..\\..\\dll\\StclDevices.dll '' , CallingConvention = CallingConvention.Cdecl ) ] // FAILS public static extern int GetDeviceInfo ( UInt32 deviceIndex , ref DeviceInfo pDeviceInfo ) ; [ StructLayout ( LayoutKind.Sequential , Pack=1 ) ] public struct LaserPoint { public UInt16 x ; public UInt16 y ; [ MarshalAs ( UnmanagedType.ByValArray , SizeConst = 6 ) ] public byte [ ] colors ; } [ StructLayout ( LayoutKind.Sequential , CharSet=CharSet.Ansi ) ] public struct DeviceInfo { public UInt32 maxScanrate ; public UInt32 minScanrate ; public UInt32 maxNumOfPoints ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 32 ) ] public string deviceType ; } public static void Main ( string [ ] args ) { Console.WriteLine ( `` Moncha SDK\n '' ) ; OpenDll ( ) ; Console.WriteLine ( `` StclDevices.dll is open . `` ) ; UInt32 deviceCount1 = 0 ; int r1 = SearchForNETDevices ( ref deviceCount1 ) ; Console.WriteLine ( `` SearchForNETDevices ( ) [ `` + r1+ '' ] : `` +deviceCount1 ) ; UInt32 deviceCount2 = 0 ; int r2 = CreateDeviceList ( ref deviceCount2 ) ; Console.WriteLine ( `` CreateDeviceList ( ) [ `` +r2+ '' ] : `` +deviceCount2 ) ; IntPtr pString ; int r3 = GetDeviceIdentifier ( 0 , out pString ) ; string devname = Marshal.PtrToStringUni ( pString ) ; Console.WriteLine ( `` GetDeviceIdentifier ( ) [ `` +r3+ '' ] : `` +devname ) ; DeviceInfo pDevInfo = new DeviceInfo ( ) ; pDevInfo.type = `` '' ; int r4 = GetDeviceInfo ( 0 , ref pDevInfo ) ; Console.WriteLine ( `` GetDeviceInfo ( ) [ `` +r4+ '' ] : `` ) ; Console.WriteLine ( `` - min : `` +pDevInfo.minScanrate ) ; Console.WriteLine ( `` - max : `` + pDevInfo.maxScanrate ) ; Console.WriteLine ( `` - points : `` + pDevInfo.maxNumOfPoints ) ; Console.WriteLine ( `` - type : `` + pDevInfo.deviceType ) ; Thread.Sleep ( 5000 ) ; CloseDll ( ) ; } } } int r4 = GetDeviceInfo ( 0 , ref pDevInfo ) ; An unhandled exception of type 'System.NullReferenceException ' occured in MonchaTestSDK.exeAdditional information : Object reference not set to an instance of an object int r4 = GetDeviceInfo ( 0 , ref pDevInfo ) ; 05210749 int 3 0521074A push ebp 0521074B cwde 0521074C xor ecx , ecx 0521074E call 0521011C 05210753 int 3 05210754 test dword ptr [ eax-1 ] , edx 05210757 ? ? ? ? 05210758 dec dword ptr [ ebx-0AF7Bh ] 0521075E dec dword ptr [ ecx-6F466BBBh ] public static void Main ( string [ ] args ) { OpenDll ( ) ; UInt32 deviceCount = 0 ; CreateDeviceList ( ref deviceCount ) ; DeviceInfo pDevInfo = new DeviceInfo ( ) ; GetDeviceInfo ( 0 , ref pDevInfo ) ; // error occurs on this line CloseDll ( ) ; } An unhandled exception of type 'System.NullReferenceException ' occured in MonchaTestSDK.exeAdditional information : Object reference not set to an instance of an object [ StructLayout ( LayoutKind.Sequential , CharSet = CharSet.Ansi , Pack = 1 ) ] public struct DeviceInfo { public UInt32 maxScanrate ; public UInt32 minScanrate ; public UInt32 maxNumOfPoints ; // [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 32 ) ] //public string deviceType ; } GetDeviceInfo ( ) [ 0 ] : - min : 1000 - max : 40000 - points : 3000 [ StructLayout ( LayoutKind.Sequential , CharSet = CharSet.Ansi , Pack = 1 ) ] public struct DeviceInfo { public UInt32 maxScanrate ; public UInt32 minScanrate ; public UInt32 maxNumOfPoints ; [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 32 ) ] public string deviceType ; } private void queryDeviceProperties ( UInt32 index ) { HwDeviceInfo pDevInfo = new HwDeviceInfo ( ) ; int code = GetDeviceInfo ( index , ref pDevInfo ) ; if ( code==0 ) { Console.WriteLine ( pDevInfo.minScanrate ) ; Console.WriteLine ( pDevInfo.maxScanrate ) ; Console.WriteLine ( pDevInfo.maxNumOfPoints ) ; Console.WriteLine ( pDevInfo.type ) ; } else { Console.WriteLine ( `` Error Code : `` +code ) ; } }"
"List < Person > people = new List < Person > { new Person { Name = `` A '' , SSN= '' 1 '' , Age = 23 } , new Person { Name = `` A '' , SSN= '' 2 '' , Age = 23 } , new Person { Name = `` B '' , SSN= '' 3 '' , Age = 24 } , new Person { Name = `` C '' , SSN= '' 4 '' , Age = 24 } , new Person { Name = `` D '' , SSN= '' 5 '' , Age = 23 } } ;"
"public class Parent { public int ParentId { get ; set ; } public string Name { get ; set ; } public virtual List < Child > Childs { get ; set ; } } public class Child { public int ChildId { get ; set ; } public int ParentId { get ; set ; } public string Name { get ; set ; } public virtual Parent Parent { get ; set ; } } public class Entities : DbContext { public DbSet < Parent > Parents { get ; set ; } public DbSet < Child > Childs { get ; set ; } } USE [ master ] GOIF EXISTS ( SELECT name FROM sys.databases WHERE name = 'PerformanceParentChild ' ) alter database [ PerformanceParentChild ] set single_user with rollback immediate DROP DATABASE [ PerformanceParentChild ] GOCREATE DATABASE [ PerformanceParentChild ] GOUSE [ PerformanceParentChild ] GOBEGIN TRAN T1 ; SET NOCOUNT ONCREATE TABLE [ dbo ] . [ Parents ] ( [ ParentId ] [ int ] CONSTRAINT PK_Parents PRIMARY KEY , [ Name ] [ nvarchar ] ( 200 ) NULL ) GOCREATE TABLE [ dbo ] . [ Children ] ( [ ChildId ] [ int ] CONSTRAINT PK_Children PRIMARY KEY , [ ParentId ] [ int ] NOT NULL , [ Name ] [ nvarchar ] ( 200 ) NULL ) GOINSERT INTO Parents ( ParentId , Name ) VALUES ( 1 , 'Parent ' ) DECLARE @ nbChildren int ; DECLARE @ childId int ; SET @ nbChildren = 25000 ; SET @ childId = 0 ; WHILE @ childId < @ nbChildrenBEGIN SET @ childId = @ childId + 1 ; INSERT INTO [ dbo ] . [ Children ] ( ChildId , ParentId , Name ) VALUES ( @ childId , 1 , 'Child # ' + convert ( nvarchar ( 5 ) , @ childId ) ) ENDCREATE NONCLUSTERED INDEX [ IX_ParentId ] ON [ dbo ] . [ Children ] ( [ ParentId ] ASC ) GOALTER TABLE [ dbo ] . [ Children ] ADD CONSTRAINT [ FK_Children.Parents_ParentId ] FOREIGN KEY ( [ ParentId ] ) REFERENCES [ dbo ] . [ Parents ] ( [ ParentId ] ) GOCOMMIT TRAN T1 ; < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < connectionStrings > < add name= '' Entities '' providerName= '' System.Data.SqlClient '' connectionString= '' Server=localhost ; Database=PerformanceParentChild ; Trusted_Connection=true ; '' / > < /connectionStrings > < /configuration > class Program { static void Main ( string [ ] args ) { List < Parent > parents ; List < Child > children ; Entities entities ; DateTime before ; TimeSpan childrenLoadElapsed ; TimeSpan parentLoadElapsed ; using ( entities = new Entities ( ) ) { before = DateTime.Now ; parents = entities.Parents.ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load only the parent from DbSet : '' + parentLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { before = DateTime.Now ; children = entities.Childs.ToList ( ) ; childrenLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load only the children from DbSet : '' + childrenLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { before = DateTime.Now ; parents = entities.Parents.ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; before = DateTime.Now ; children = entities.Childs.ToList ( ) ; childrenLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load the parent from DbSet : '' + parentLoadElapsed.TotalSeconds + `` seconds '' + `` , then load the children from DbSet : '' + childrenLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { before = DateTime.Now ; children = entities.Childs.ToList ( ) ; childrenLoadElapsed = DateTime.Now - before ; before = DateTime.Now ; parents = entities.Parents.ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load the children from DbSet : '' + childrenLoadElapsed.TotalSeconds + `` seconds '' + `` , then load the parent from DbSet : '' + parentLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { before = DateTime.Now ; parents = entities.Parents.ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; before = DateTime.Now ; children = parents [ 0 ] .Childs ; childrenLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load the parent from DbSet : '' + parentLoadElapsed.TotalSeconds + `` seconds '' + `` , then load the children from Parent 's lazy loaded navigation property : '' + childrenLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { before = DateTime.Now ; parents = entities.Parents.Include ( p = > p.Childs ) .ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load the parent from DbSet and children from include : '' + parentLoadElapsed.TotalSeconds + `` seconds '' ) ; } using ( entities = new Entities ( ) ) { entities.Configuration.ProxyCreationEnabled = false ; entities.Configuration.AutoDetectChangesEnabled = false ; entities.Configuration.LazyLoadingEnabled = false ; entities.Configuration.ValidateOnSaveEnabled = false ; before = DateTime.Now ; parents = entities.Parents.Include ( p = > p.Childs ) .ToList ( ) ; parentLoadElapsed = DateTime.Now - before ; System.Diagnostics.Debug.WriteLine ( `` Load the parent from DbSet and children from include : '' + parentLoadElapsed.TotalSeconds + `` seconds with everything turned off '' ) ; } } }"
"public void MyFunc ( object myArgument ) { if ( myArgument == null ) throw new ArgumentNullException ( `` myArgument '' ) ; ... . //inside a shared assembly in a class called Guardpublic static void AgainstArgumentNull ( object obj , string message ) { if ( obj == null ) throw new ArgumentNullException ( message ) ; } public void MyFunc ( object myArgument ) { Guard.AgainstArgumentNull ( myArgument , `` myArgument '' ) ; ... ."
"public partial class TestForm : Form { public TestForm ( ) { InitializeComponent ( ) ; Width = 400 ; Height = 400 ; var txt = new TextBox { Dock = DockStyle.Bottom , BackColor = Color.Khaki } ; var dgv = new DataGridView { Dock = DockStyle.Fill , ColumnCount = 3 , RowCount = 5 } ; dgv.Controls.Add ( txt ) ; Controls.Add ( dgv ) ; dgv.PreviewKeyDown += DgvOnPreviewKeyDown ; dgv.KeyDown += DgvOnKeyDown ; txt.PreviewKeyDown += TxtOnPreviewKeyDown ; txt.KeyDown += TxtOnKeyDown ; } private void DgvOnPreviewKeyDown ( object sender , PreviewKeyDownEventArgs e ) { Debug.WriteLine ( String.Format ( `` Dgv Key Preview { 0 } '' , e.KeyCode ) ) ; e.IsInputKey = true ; } private void DgvOnKeyDown ( object sender , KeyEventArgs e ) { Debug.WriteLine ( String.Format ( `` Dgv Key { 0 } '' , e.KeyCode ) ) ; } private void TxtOnPreviewKeyDown ( object sender , PreviewKeyDownEventArgs e ) { Debug.WriteLine ( String.Format ( `` Txt Key Preview { 0 } '' , e.KeyCode ) ) ; } private void TxtOnKeyDown ( object sender , KeyEventArgs e ) { Debug.WriteLine ( String.Format ( `` Txt Key { 0 } '' , e.KeyCode ) ) ; } }"
"TypeBuilder dynaType = dynaModule.DefineType ( typeof ( T ) .Name + `` _ORMProxy '' ) ; dynaType.AddInterfaceImplementation ( typeof ( IServiceTable ) ) ; // ( 1 ) Implement : ( String ) IServiceTable.TableName { get ; } FieldBuilder tableNameField = dynaType.DefineField ( `` tableName '' , typeof ( String ) , FieldAttributes.Private ) ; MethodBuilder tableNamePublicGetAccessor = dynaType.DefineMethod ( `` get_tableName '' , MethodAttributes.Public ) ; tableNamePublicGetAccessor ..."
[ NotifyPropertyChanged ] public class MyClass { public double SomeValue { get ; set ; } public double ModifiedValue { get ; private set ; } [ SuppressNotify ] public double OnlySetOnce { get ; private set ; } public MyClass ( ) { OnlySetOnce = 1.0 ; } }
"public static void PerformAsycAction ( this User user , Action < User > action ) { ThreadPool.QueueUserWorkItem ( _ = > { var context = new DatabaseContext ( ) ; MiniProfilerEF.Initialize ( ) ; var consistantUser = context.Set < User > ( ) .Get ( user.Id ) ; action ( consistantUser ) ; context.SaveChanges ( ) ; } ) ; } protected void Application_Start ( ) { MiniProfilerEF.Initialize ( ) ; ... }"
public static void Main ( ) { DateTime dt = DateTime.Now ; Thread.CurrentThread.CurrentCulture = new CultureInfo ( `` es-PA '' ) ; Console.WriteLine ( dt.ToString ( `` d '' ) ) ; Console.ReadLine ( ) ; }
@ if ( Request.IsAuthenticated ) { }
"public class Sample { Sample Parent { get ; set ; } public Sample ( Sample parent ) { Parent = parent ; } public int Depth { get { if ( Parent == null ) return -1 ; else return Parent.Depth + 1 ; } } } const string assemblyName = `` SampleAssembly '' ; const string parentPproperty = `` Parent '' ; const string depthProperty = `` Depth '' ; const string typeName = `` Sample '' ; const string assemblyFileName = assemblyName + `` .dll '' ; AppDomain domain = AppDomain.CurrentDomain ; AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly ( new AssemblyName ( assemblyName ) , AssemblyBuilderAccess.RunAndSave ) ; ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule ( assemblyName , assemblyFileName ) ; TypeBuilder typeBuilder = moduleBuilder.DefineType ( typeName , TypeAttributes.Public ) ; FieldBuilder parentField = typeBuilder.DefineField ( $ '' _ { parentPproperty } '' , typeBuilder , FieldAttributes.Private ) ; PropertyBuilder propertyBuilder = typeBuilder.DefineProperty ( parentPproperty , PropertyAttributes.None , parentField.FieldType , Type.EmptyTypes ) ; MethodAttributes getSetAttr = MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig ; MethodBuilder getParentMethod = typeBuilder.DefineMethod ( $ '' get_ { propertyBuilder.Name } '' , getSetAttr , parentField.FieldType , Type.EmptyTypes ) ; ILGenerator il = getParentMethod.GetILGenerator ( ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Ldfld , parentField ) ; il.Emit ( OpCodes.Ret ) ; propertyBuilder.SetGetMethod ( getParentMethod ) ; MethodBuilder setParentMethod = typeBuilder.DefineMethod ( $ '' set_ { propertyBuilder.Name } '' , qetSetAttr , null , Type.EmptyTypes ) ; il = setParentMethod.GetILGenerator ( ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Ldarg_1 ) ; il.Emit ( OpCodes.Stfld , parentField ) ; il.Emit ( OpCodes.Ret ) ; propertyBuilder.SetSetMethod ( setParentMethod ) ; parentField = typeBuilder.DefineField ( $ '' _ { depthProperty } '' , typeBuilder , FieldAttributes.Private ) ; propertyBuilder = typeBuilder.DefineProperty ( depthProperty , PropertyAttributes.None , parentField.FieldType , Type.EmptyTypes ) ; MethodBuilder getDepthMethod = typeBuilder.DefineMethod ( $ '' get_ { depthProperty } '' , getSetAttr , parentField.FieldType , Type.EmptyTypes ) ; il = getDepthMethod.GetILGenerator ( ) ; LocalBuilder lb = il.DeclareLocal ( typeof ( bool ) ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Call , getParentMethod ) ; il.Emit ( OpCodes.Ldnull ) ; il.Emit ( OpCodes.Ceq ) ; il.Emit ( OpCodes.Stloc_0 ) ; il.Emit ( OpCodes.Ldloc_0 ) ; il.Emit ( OpCodes.Brfalse_S ) ; il.Emit ( OpCodes.Ldc_I4_1 ) ; il.Emit ( OpCodes.Stloc_1 ) ; il.Emit ( OpCodes.Br_S ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Call , getParentMethod ) ; il.Emit ( OpCodes.Callvirt , getDepthMethod ) ; il.Emit ( OpCodes.Ldc_I4_1 ) ; il.Emit ( OpCodes.Add ) ; il.Emit ( OpCodes.Stloc_1 ) ; il.Emit ( OpCodes.Br_S ) ; il.Emit ( OpCodes.Ldloc_1 ) ; il.Emit ( OpCodes.Ret ) ; propertyBuilder.SetGetMethod ( getDepthMethod ) ; ConstructorBuilder constructor = typeBuilder.DefineConstructor ( MethodAttributes.Public , CallingConventions.HasThis , new Type [ ] { typeBuilder } ) ; il= constructor.GetILGenerator ( ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Call , typeof ( object ) .GetConstructor ( Type.EmptyTypes ) ) ; il.Emit ( OpCodes.Ldarg_0 ) ; il.Emit ( OpCodes.Ldarg_1 ) ; il.Emit ( OpCodes.Call , setParentMethod ) ; il.Emit ( OpCodes.Ret ) ; Type type = typeBuilder.CreateType ( ) ; var obj1 = Activator.CreateInstance ( type , null ) ; var obj2 = Activator.CreateInstance ( type , obj1 ) ; assemblyBuilder.Save ( assemblyFileName ) ;"
public class Title { private readonly string _title ; public Title ( string title ) { _title = title ; } public static implicit operator Title ( string title ) { return new Title ( title ) ; } } public ActionResult Add ( string title ) { //stuff } public ActionResult Add ( Title title ) { //stuff } < form method= '' post '' action= '' /Page/Add '' id= '' add-page-form '' > < div class= '' form-group '' > < label for= '' page-title '' > Page title < /label > < input type= '' text '' name= '' title '' id= '' page-title '' > < /div > < /form >
ChargeLearning ChargeLearning _content _framework css sample-data ChargeLearning.sln index.html
bool success = true ; 1 - success & = SomeFunctionReturningABool ( ) ; 2 - success = success & SomeFunctionReturningABool ( ) ; 3 - success = success & & SomeFunctionReturningABool ( ) ;
"//contravariance `` in '' interface ICanEat < in T > where T : class { void Eat ( T food ) ; } class HungryWolf : ICanEat < ICloneable > , ICanEat < IConvertible > { public void Eat ( IConvertible convertibleFood ) { Console.WriteLine ( `` This wolf ate your CONVERTIBLE object ! `` ) ; } public void Eat ( ICloneable cloneableFood ) { Console.WriteLine ( `` This wolf ate your CLONEABLE object ! `` ) ; } } ICanEat < string > wolf = new HungryWolf ( ) ; wolf.Eat ( `` sheep '' ) ; class Wolf2 : ICanEat < Exception > , ICanEat < SystemException > // also try reversing the interface order here { public void Eat ( SystemException systemExceptionFood ) { Console.WriteLine ( `` This wolf ate your SYSTEM EXCEPTION object ! `` ) ; } public void Eat ( Exception exceptionFood ) { Console.WriteLine ( `` This wolf ate your EXCEPTION object ! `` ) ; } } static void Main ( ) { var w2 = new Wolf2 ( ) ; w2.Eat ( new StackOverflowException ( ) ) ; // OK , one overload is more `` specific '' than the other ICanEat < StackOverflowException > w2Soe = w2 ; // Contravariance w2Soe.Eat ( new StackOverflowException ( ) ) ; // Depends on interface order in Wolf2 }"
"public static void AddJob ( List < IJob > masterJobs , List < Job > jobs ) { masterJobs.AddRange ( jobs ) ; //fail to compile } public static void AddJob ( List < IJob > masterJobs , List < Job > jobs ) { masterJobs.AddRange ( jobs.Cast < IJob > ( ) ) ; }"
public class MyType { public int IntField { get ; set ; } public MyType ( int intField ) { IntField = intField ; } public static bool operator ! ( MyType mt ) { return ( mt.IntField < = 0 ) ; } public static MyType operator ! ( MyType mt ) { var result = new MyType ( -mt.IntField ) ; return result ; }
"public class Foo { private int foo ; public int Reset ( ) = > foo = 0 ; //remember , assignment expressions //return something ! } public class Foo { private int foo ; public int Reset ( ) { foo = 0 ; return foo ; } }"
"public static readonly DependencyProperty MembersProperty = DependencyProperty.Register ( `` Members '' , typeof ( ObservableCollection < object > ) , typeof ( MembershipList ) , new PropertyMetadata ( null ) ) ; public ObservableCollection < object > Members { get { return ( ObservableCollection < object > ) GetValue ( MembersProperty ) ; } set { SetValue ( MembersProperty , value ) ; } } < Style TargetType= '' { x : Type local : MembershipListItem } '' > < Setter Property= '' IsMember '' > < Setter.Value > < MultiBinding Converter= '' { StaticResource MembershipTest } '' > < Binding / > < ! -- Passes the DataContext to the converter -- > < Binding Path= '' Members '' RelativeSource= '' { RealtiveSource AncestorType= { x : Type local : MembershipList } } '' / > < /MultiBinding > < /Setter.Value > < /Setter > < /Style > < Style TargetType= '' { x : Type local : MembershipListItem } '' > < Setter Property= '' IsMember '' > < Setter.Value > < MultiBinding Converter= '' { StaticResource MembershipTest } '' > < Binding / > < ! -- Passes the DataContext to the converter -- > < Binding Path= '' Members '' RelativeSource= '' { RealtiveSource AncestorType= { x : Type local : MembershipList } } '' / > < Binding Path= '' Members.Count '' FallbackValue= '' 0 '' / > < /MultiBinding > < /Setter.Value > < /Setter > < /Style > public static readonly DependencyProperty MembersCollectionChangedProperty = DependencyProperty.Register ( `` MembersCollectionChanged '' , typeof ( bool ) , typeof ( MembershipList ) , new PropertyMetadata ( false ) ) ; public bool MembersCollectionChanged { get { return ( bool ) GetValue ( MembersCollectionChangedProperty ) ; } set { SetValue ( MembersCollectionChangedProperty , value ) ; } } public static readonly DependencyProperty MembersProperty = DependencyProperty.Register ( `` Members '' , typeof ( ObservableCollection < object > ) , typeof ( MembershipList ) , new PropertyMetadata ( null , Members_PropertyChanged ) ) ; // Added the change handlerpublic int Members { get { return ( int ) GetValue ( MembersProperty ) ; } set { SetValue ( MembersProperty , value ) ; } } private static void Members_PropertyChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { var oldMembers = e.OldValue as ObservableCollection < object > ; var newMembers = e.NewValue as ObservableCollection < object > ; if ( oldMembers ! = null ) oldMembers.CollectionChanged -= Members_CollectionChanged ; if ( newMembers ! = null ) oldMembers.CollectionChanged += Members_CollectionChanged ; } private static void Members_CollectionChanged ( object sender , System.Collections.Specialized.NotifyCollectionChangedEventArgs e ) { // 'Toggle ' the property to refresh the binding MembersCollectionChanged = ! MembersCollectionChanged ; } < Style TargetType= '' { x : Type local : MembershipListItem } '' > < Setter Property= '' IsMember '' > < Setter.Value > < MultiBinding Converter= '' { StaticResource MembershipTest } '' > < Binding / > < ! -- Passes in the DataContext -- > < Binding Path= '' Members '' RelativeSource= '' { RealtiveSource AncestorType= { x : Type local : MembershipList } } '' / > < Binding Path= '' MembersCollectionChanged '' RelativeSource= '' { RealtiveSource AncestorType= { x : Type local : MembershipList } } '' / > < /MultiBinding > < /Setter.Value > < /Setter > < /Style > private ObservableCollection < object > _members ; public ObservableCollection < object > Members { get { return _members ; } set { if ( _members == value ) return ; // Unsubscribe the old one if not null if ( _members ! = null ) _members.CollectionChanged -= Members_CollectionChanged ; // Store the new value _members = value ; // Wire up the new one if not null if ( _members ! = null ) _members.CollectionChanged += Members_CollectionChanged ; RaisePropertyChanged ( nameof ( Members ) ) ; } } private void Members_CollectionChanged ( object sender , NotifyCollectionChangedEventArgs e ) { RaisePropertyChanged ( nameof ( Members ) ) ; }"
public async Task < IEnumerable < T > > GetAll ( ) var data1 = src1.GetAll ( ) ; var data2 = src2.GetAll ( ) ; var data3 = src3.GetAll ( ) ; //and so on
"class C { public int A { get ; set ; } public int B ; public C ( int a , int b ) { this.A = A ; // Oops , bug ! Should be ` this.A = a ` . No warning this.B = B ; // Oops , bug ! Should be ` this.B = b ` . ` warning CS1717 : Assignment made to same variable ; did you mean to assign something else ? ` } }"
"using System ; using System.Linq ; using System.Threading.Tasks ; using System.Threading.Tasks.Dataflow ; namespace DataflowTest { class Program { static void Main ( string [ ] args ) { var firstBlock = new TransformBlock < int , int > ( x = > x , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; var secondBlock = new TransformBlock < int , string > ( async x = > { if ( x == 12 ) { await Task.Delay ( 5000 ) ; return $ '' { DateTime.Now } : Message is { x } ( This is delayed message ! ) `` ; } return $ '' { DateTime.Now } : Message is { x } '' ; } , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; var thirdBlock = new ActionBlock < string > ( s = > Console.WriteLine ( s ) , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; firstBlock.LinkTo ( secondBlock ) ; secondBlock.LinkTo ( thirdBlock ) ; var populateTask = Task.Run ( async ( ) = > { foreach ( var x in Enumerable.Range ( 1 , 15 ) ) { await firstBlock.SendAsync ( x ) ; } } ) ; populateTask.Wait ( ) ; secondBlock.Completion.Wait ( ) ; } } } 09.08.2016 15:03:08 : Message is 109.08.2016 15:03:08 : Message is 509.08.2016 15:03:08 : Message is 609.08.2016 15:03:08 : Message is 709.08.2016 15:03:08 : Message is 809.08.2016 15:03:08 : Message is 909.08.2016 15:03:08 : Message is 1009.08.2016 15:03:08 : Message is 1109.08.2016 15:03:08 : Message is 309.08.2016 15:03:08 : Message is 209.08.2016 15:03:08 : Message is 409.08.2016 15:03:13 : Message is 12 ( This is delayed message ! ) 09.08.2016 15:03:08 : Message is 1509.08.2016 15:03:08 : Message is 1309.08.2016 15:03:08 : Message is 14 09.08.2016 15:03:08 : Message is 109.08.2016 15:03:08 : Message is 509.08.2016 15:03:08 : Message is 609.08.2016 15:03:08 : Message is 709.08.2016 15:03:08 : Message is 809.08.2016 15:03:08 : Message is 909.08.2016 15:03:08 : Message is 1009.08.2016 15:03:08 : Message is 1109.08.2016 15:03:08 : Message is 309.08.2016 15:03:08 : Message is 209.08.2016 15:03:08 : Message is 409.08.2016 15:03:08 : Message is 1509.08.2016 15:03:08 : Message is 1309.08.2016 15:03:08 : Message is 1409.08.2016 15:03:13 : Message is 12 ( This is delayed message ! ) using System ; using System.Diagnostics ; using System.Linq ; using System.Net.Http ; using System.Security.Cryptography ; using System.Text ; using System.Threading.Tasks ; using System.Threading.Tasks.Dataflow ; namespace DataflowTest { class Program { static void Main ( string [ ] args ) { var firstBlock = new TransformBlock < int , string > ( x = > x.ToString ( ) , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; var secondBlock = new TransformBlock < string , Tuple < string , string > > ( async x = > { using ( var httpClient = new HttpClient ( ) ) { if ( x == `` 4 '' ) await Task.Delay ( 5000 ) ; var result = await httpClient.GetStringAsync ( $ '' http : //scooterlabs.com/echo/ { x } '' ) ; return new Tuple < string , string > ( x , result ) ; } } , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; var thirdBlock = new TransformBlock < Tuple < string , string > , Tuple < string , byte [ ] > > ( x = > { using ( var algorithm = SHA256.Create ( ) ) { var bytes = Encoding.UTF8.GetBytes ( x.Item2 ) ; var hash = algorithm.ComputeHash ( bytes ) ; return new Tuple < string , byte [ ] > ( x.Item1 , hash ) ; } } , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; var fourthBlock = new ActionBlock < Tuple < string , byte [ ] > > ( x = > { var output = $ '' { DateTime.Now } : Hash for element # { x.Item1 } : { GetHashAsString ( x.Item2 ) } '' ; Console.WriteLine ( output ) ; } , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 } ) ; firstBlock.LinkTo ( secondBlock ) ; secondBlock.LinkTo ( thirdBlock ) ; thirdBlock.LinkTo ( fourthBlock ) ; var populateTasks = Enumerable.Range ( 1 , 10 ) .Select ( x = > firstBlock.SendAsync ( x ) ) ; Task.WhenAll ( populateTasks ) .ContinueWith ( x = > firstBlock.Complete ( ) ) .Wait ( ) ; fourthBlock.Completion.Wait ( ) ; } private static string GetHashAsString ( byte [ ] bytes ) { var sb = new StringBuilder ( ) ; int i ; for ( i = 0 ; i < bytes.Length ; i++ ) { sb.AppendFormat ( `` { 0 : X2 } '' , bytes [ i ] ) ; if ( i % 4 == 3 ) sb.Append ( `` `` ) ; } return sb.ToString ( ) ; } } } 09.08.2016 20:44:53 : Hash for element # 3 : 4D0AB933 EE521204 CA784F3E 248EC698 F9E4D5F3 8F23A78F 3A00E069 29E73E3209.08.2016 20:44:53 : Hash for element # 2 : 4D0AB933 EE521204 CA784F3E 248EC698 F9E4D5F3 8F23A78F 3A00E069 29E73E3209.08.2016 20:44:53 : Hash for element # 1 : 4D0AB933 EE521204 CA784F3E 248EC698 F9E4D5F3 8F23A78F 3A00E069 29E73E3209.08.2016 20:44:58 : Hash for element # 6 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B309.08.2016 20:44:58 : Hash for element # 8 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B309.08.2016 20:44:58 : Hash for element # 9 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B309.08.2016 20:44:58 : Hash for element # 10 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B309.08.2016 20:44:58 : Hash for element # 4 : 44A63CBF 8E27D0DD AFE5A761 AADA4E49 AA52FE8E E3D7DC82 AFEAAF1D 72A9BC7F09.08.2016 20:44:58 : Hash for element # 5 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B309.08.2016 20:44:58 : Hash for element # 7 : FC86E4F8 A83036BA 365BC7EE F9371778 59A11186 ED12A43C 3885D686 5004E6B3"
"public bool AreEqual ( object object1 , object object2 , Type comparisionType ) public ObjectDifference [ ] GetObjectDifferences ( object object1 , object object2 , Type comparisionType ) { ArrayList memberList = new ArrayList ( ) ; ArrayList differences = new ArrayList ( ) ; memberList.AddRange ( comparisionType.GetProperties ( ) ) ; memberList.AddRange ( comparisionType.GetFields ( ) ) ; for ( int loopCount = 0 ; loopCount < memberList.Count ; loopCount++ ) { object objVal1 = null ; object objVal2 = null ; MemberInfo member = ( ( MemberInfo ) memberList [ loopCount ] ) ; switch ( ( ( MemberInfo ) memberList [ loopCount ] ) .MemberType ) { case MemberTypes.Field : objVal1 = object1 ! = null ? ( ( FieldInfo ) memberList [ loopCount ] ) .GetValue ( object1 ) : null ; objVal2 = object2 ! = null ? ( ( FieldInfo ) memberList [ loopCount ] ) .GetValue ( object2 ) : null ; break ; case MemberTypes.Property : objVal1 = object1 ! = null ? ( ( PropertyInfo ) memberList [ loopCount ] ) .GetValue ( object1 , null ) : null ; objVal2 = object2 ! = null ? ( ( PropertyInfo ) memberList [ loopCount ] ) .GetValue ( object2 , null ) : null ; break ; default : break ; } if ( AreValuesDifferentForNull ( objVal1 , objVal2 ) ) { ObjectDifference obj = new ObjectDifference ( objVal1 , objVal2 , member , member.Name ) ; differences.Add ( obj ) ; } else if ( AreValuesDifferentForPrimitives ( objVal1 , objVal2 ) ) { ObjectDifference obj = new ObjectDifference ( objVal1 , objVal2 , member , member.Name ) ; differences.Add ( obj ) ; } else if ( AreValuesDifferentForList ( objVal1 , objVal2 ) ) { ObjectDifference [ ] listDifference = GetListDifferences ( ( ICollection ) objVal1 , ( ICollection ) objVal2 , member ) ; differences.AddRange ( listDifference ) ; } else if ( ( ! AreValuesEqual ( objVal1 , objVal2 ) ) & & ( objVal1 ! = null || objVal2 ! = null ) ) { ObjectDifference obj = new ObjectDifference ( objVal1 , objVal2 , member , member.Name ) ; differences.Add ( obj ) ; } } return ( ObjectDifference [ ] ) differences.ToArray ( typeof ( ObjectDifference ) ) ; } public class ObjectDifference { private readonly object objectValue1 ; private readonly object objectValue2 ; private readonly System.Reflection.MemberInfo member ; private readonly string description ; public object ObjectValue1 { get { return objectValue1 ; } } public object ObjectValue2 { get { return objectValue2 ; } } public System.Reflection.MemberInfo Member { get { return member ; } } public string Description { get { return description ; } } public ObjectDifference ( object objVal1 , object objVal2 , System.Reflection.MemberInfo member , string description ) { this.objectValue1 = objVal1 ; this.objectValue2 = objVal2 ; this.member = member ; this.description = description ; } } class Name { string firstName , LastName ; List phNumber ; } class PhoneNumber { string officeNo , MobileNo , HomeNo ; }"
"static class Log { static void Debug ( string message ) ; static void Debug ( IFormattable message ) ; static bool IsDebugEnabled { get ; } } if ( Log.IsDebugEnabled ) Log.Debug ( string.Format ( `` Message { 0 } '' , expensiveObject ) ) ; Log.Debug ( $ '' Message { expensiveObject } '' ) ;"
"string myFilePath = Path.Combine ( `` c : '' , `` myDoc.txt '' ) ; // vs. string myFilePath = `` C : '' + `` \\myDoc.txt '' ;"
"public static void Reinitialize < T > ( T instance ) { var initializer = typeof ( T ) .GetHiddenConstructorThatDoesntNew ( typeof ( int ) , typeof ( string ) ) ; // call the constructor ( int , string ) on instance initializer.Invoke ( instance , 7 , `` Bill '' ) ; }"
"FruitID FruitName FruitColor FruitCost 1 Apple Red 1.2 2 Apple Green 1.4 3 Apple HalfHalf 1.5 [ Test ] public void DeleteFruit ( ) { var fruitList = CreateFruitList ( ) ; var fm = new FruitManager ( ) ; var resultList = fm.DeleteFruitTest ( `` Apple '' , 2 , fruitList ) ; //Assert that fruitobject with x properties is not in list ? how } private static List < Fruit > CreateFruitList ( ) { //Build test data var f01 = new Fruit { Name = `` Apple '' , Id = 1 , etc ... } ; var f02 = new Fruit { Name = `` Apple '' , Id = 2 , etc ... } ; var f03 = new Fruit { Name = `` Apple '' , Id = 3 , etc ... } ; var fruitList = new List < Fruit > { f01 , f02 , f03 } ; return fruitList ; }"
"public static bool DictionaryEquals < TKey , TValue > ( IDictionary < TKey , TValue > d1 , IDictionary < TKey , TValue > d2 ) { if ( d1 == d2 ) return true ; if ( d1 == null || d2 == null ) return false ; if ( d1.Count ! = d2.Count ) return false ; // < -- warning here // Equality check goes here return true ; }"
"new Dictionary < string , string > { { `` Foo '' , `` Bar `` } , } ; new List < string > { `` Foo '' , } ;"
"string.Format ( `` ( ourOwnManagedBy:1.2.840.113556.1.4.1941 : = { 0 } ) '' , dn ) ;"
"public Dictionary < string , Func < T , bool > > Filters { get { Dictionary < string , Func < T , bool > > filters = ( Dictionary < string , Func < T , bool > > ) ViewState [ `` filters '' ] ; if ( filters == null ) { filters = new Dictionary < string , Func < T , bool > > ( ) ; ViewState [ `` filters '' ] = filters ; } return filters ; } } //in page load DataSource.Filters.Add ( `` userid '' , u = > u.UserID == 8 ) ; //in page load int userId = int.Parse ( DdlUsers.SelectedValue ) ; DataSource.Filters.Add ( `` userid '' , u = > u.UserID == userId ) ; void test ( ) { Test test = new Test ( ) ; string param1 = `` parametertopass '' ; test.MyEvent += ( ) = > Console.WriteLine ( param1 ) ; using ( MemoryStream ms = new MemoryStream ( ) ) { BinaryFormatter bf = new BinaryFormatter ( ) ; bf.Serialize ( ms , test ) ; //bang } } [ Serializable ] public class Test { public event Action MyEvent ; }"
"private static readonly string ConnectionString = `` Dummy '' ; public static SqlConnection GetConnection ( ) { SqlConnection Connection = new SqlConnection ( ConnectionString ) ; return Connection ; } public static SqlDataAdapter GetDataAdapter ( string Query ) { SqlDataAdapter Adapt = new SqlDataAdapter ( Query , GetConnection ( ) ) ; return Adapt ; }"
[ NotMapped ] public bool IsSomething { get { return this.otherproperty == `` something '' ; } }
public class TestClassOut { public string Id { get ; set ; } public float [ ] Score { get ; set ; } public string PredictedLabel { get ; set ; } } model.TryGetScoreLabelNames ( out scoreLabels ) ;
"p_ap_a_testp_LIGp_pp_p_cp_p_c2p_p_cccp_p_testp_tresTestLineGraph1TestLineGrpah | -- p_ | -- p_a | -- p_a_test | -- p_LIG | -- p_p | -- p_p_ | -- p_p_c | -- p_p_c2 | -- p_p_ccc | -- p_p_test | -- p_tresTestLineGraph1TestLineGrpah private GraphUINode ( List < string > subNodes , GraphUINode parent , string name , int lvl = 0 ) : base ( parent.m_viewDataSubControl ) { parent.Nodes.Add ( this ) ; this.Name = name ; this.Text = name ; string currentPrefix = `` '' ; int pertinentSubNodes = 0 ; while ( pertinentSubNodes < subNodes.Count -1 & & subNodes [ pertinentSubNodes ] .Split ( ' _ ' ) .Length < 2+ lvl ) pertinentSubNodes++ ; for ( int i = 0 ; i < = lvl ; i++ ) { currentPrefix += subNodes [ pertinentSubNodes ] .Split ( ' _ ' ) [ i ] + `` _ '' ; } List < String > children = new List < string > ( ) ; foreach ( string child in subNodes ) { // The child is in the same group than the previous one if ( child.StartsWith ( currentPrefix ) ) { children.Add ( child ) ; } else { // Create a node only if needed if ( children.Count > 1 ) { // Create the new node new GraphUINode ( children , this , currentPrefix , lvl + 1 ) ; children.Clear ( ) ; children.Add ( child ) ; } else { new GraphTemplateNode ( this , m_viewDataSubControl , child ) ; } currentPrefix = `` '' ; for ( int i = 0 ; i < = lvl ; i++ ) { currentPrefix += child.Split ( ' _ ' ) [ i ] + `` _ '' ; } } } }"
"protected virtual void OnLeave ( EmployeeEventArgs e ) { var handler = Leave ; if ( handler ! = null ) handler ( this , e ) ; } var handler = Leave ; protected virtual void OnLeave ( EmployeeEventArgs e ) { if ( Leave ! = null ) Leave ( this , e ) ; }"
public interface ILogger { void Log ( ) ; } public class A : ILogger { public void Log ( ... ) ; } public class B : ILogger { public void Log ( ... ) ; } public class Many : ILogger { private readonly List < ILogger > m_loggers ; public Many ( IEnumerable < ILogger > loggers ) { m_loggers = loggers.ToList ( ) ; } public void Log ( ) { m_loggers.ForEach ( c = > c.Log ( ) ) ; } }
public class Program { public class Foobar { public string Name { get ; set ; } public string Place { get ; set ; } public int Index { get ; set ; } } public static void Main ( ) { ArrayPool < Foobar > pool = ArrayPool < Foobar > .Shared ; var foobars = pool.Rent ( 5 ) ; foreach ( var foobar in foobars ) { // prints `` true '' Console.WriteLine ( $ '' foobar is null ? ans= { foobar == null } '' ) ; } } }
"< Window x : Class= '' myProject.Views.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : VtkTab= '' clr-namespace : myProject.Views.UITabs.VtkTab '' x : Name= '' Mainwindow '' MinHeight= '' 600 '' MinWidth= '' 800 '' Title= '' { Binding Title } '' Height= '' 720 '' Width= '' 1280 '' Icon= '' { StaticResource ApplicationIcon } '' Loaded= '' OnLoaded '' DataContext= '' { Binding Main , Source= { StaticResource ViewModelLocator } } '' Style= '' { StaticResource WindowStyle } '' mc : Ignorable= '' d '' > < DockPanel > < TabControl > ... . ... . < VtkTab : VtkTabView / > ... . ... . < /TabControl > < /DockPanel > < /Window > < UserControl x : Class= '' myProject.Views.UITabs.VtkTab.VtkTabView '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : vtk= '' clr-namespace : Kitware.VTK ; assembly=Kitware.VTK '' Loaded= '' WindowLoaded '' Height= '' 480 '' Width= '' 640 '' > < WindowsFormsHost Name= '' Wfh '' > < vtk : RenderWindowControl x : Name= '' RenderControl '' / > < /WindowsFormsHost > < /UserControl > public partial class UITabView { protected static Random _random = new Random ( ) ; vtkActor actor = vtkActor.New ( ) ; public VtkTabView ( ) { InitializeComponent ( ) ; var sphere = vtkSphereSource.New ( ) ; sphere.SetThetaResolution ( 8 ) ; sphere.SetPhiResolution ( 16 ) ; var shrink = vtkShrinkPolyData.New ( ) ; shrink.SetInputConnection ( sphere.GetOutputPort ( ) ) ; shrink.SetShrinkFactor ( 0.9 ) ; var move = vtkTransform.New ( ) ; move.Translate ( _random.NextDouble ( ) , _random.NextDouble ( ) , _random.NextDouble ( ) ) ; var moveFilter = vtkTransformPolyDataFilter.New ( ) ; moveFilter.SetTransform ( move ) ; moveFilter.SetInputConnection ( shrink.GetOutputPort ( ) ) ; var mapper = vtkPolyDataMapper.New ( ) ; mapper.SetInputConnection ( moveFilter.GetOutputPort ( ) ) ; // The actor links the data pipeline to the rendering subsystem actor.SetMapper ( mapper ) ; actor.GetProperty ( ) .SetColor ( 1 , 0 , 0 ) ; } private void WindowLoaded ( object sender , RoutedEventArgs e ) { var renderer = RenderControl.RenderWindow.GetRenderers ( ) .GetFirstRenderer ( ) ; renderer.AddActor ( actor ) ; } }"
"[ TestFixture ] public sealed class Test { [ Test ] public void TestChecker ( ) { var checker = new Checker ( ) ; Assert.That ( checker.IsDateTime ( DateTime.Now ) , Is.True ) ; } } public class Checker { public bool IsDateTime ( object o ) { return o is DateTime ; } } .method public hidebysig instance bool IsDateTime ( object o ) cil managed { // Code size 15 ( 0xf ) .maxstack 2 .locals init ( bool V_0 ) IL_0000 : nop IL_0001 : ldarg.1 IL_0002 : isinst [ mscorlib ] System.DateTime IL_0007 : ldnull IL_0008 : cgt.un IL_000a : stloc.0 IL_000b : br.s IL_000d IL_000d : ldloc.0 IL_000e : ret } // end of method Validator : :IsValid .method public hidebysig instance bool IsDateTime ( object o ) cil managed { // Code size 10 ( 0xa ) .maxstack 8 IL_0000 : ldarg.1 IL_0001 : isinst [ mscorlib ] System.DateTime IL_0006 : ldnull IL_0007 : cgt.un IL_0009 : ret } // end of method Validator : :IsValid"
using System.Runtime.InteropServices ; using System.Threading.Tasks ; namespace InteropEventTest { [ Guid ( `` E1BC643E-0CCF-4A91-8499-71BC48CAC01D '' ) ] [ InterfaceType ( ComInterfaceType.InterfaceIsIUnknown ) ] [ ComVisible ( true ) ] public interface ITheEvents { void OnHappened ( string theMessage ) ; } [ Guid ( `` 77F1EEBA-A952-4995-9384-7228F6182C32 '' ) ] [ ComVisible ( true ) ] public interface IInteropConnection { void DoEvent ( string theMessage ) ; } [ Guid ( `` 2EE25BBD-1849-4CA8-8369-D65BF47886A5 '' ) ] [ ClassInterface ( ClassInterfaceType.None ) ] [ ComSourceInterfaces ( typeof ( ITheEvents ) ) ] [ ComVisible ( true ) ] public class InteropConnection : IInteropConnection { [ ComVisible ( false ) ] public delegate void Happened ( string theMessage ) ; public event Happened OnHappened ; public void DoEvent ( string theMessage ) { if ( OnHappened ! = null ) { Task.Factory.StartNew ( ( ) = > OnHappened ( theMessage ) ) ; } } } } Private WithEvents tester As InteropEventTest.InteropConnectionPrivate Sub Command1_Click ( ) Call tester.DoEvent ( Text1.Text ) End SubPrivate Sub Form_Load ( ) Set tester = New InteropConnectionEnd SubPrivate Sub tester_OnHappened ( ByVal theMessage As String ) Text2.Text = theMessageEnd Sub Root|- > [ D ] Interop.Event.Tester |- > Interop.Event.Tester.manifest|- > [ D ] InteropEventTest |- > InteropEventTest.dll|- > InteropEventTest.manifest|- > InteropEventTest.tlb|- > tester.exe|- > tester.exe.manifest < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' yes '' ? > < assembly xmlns= '' urn : schemas-microsoft-com : asm.v1 '' manifestVersion= '' 1.0 '' > < assemblyIdentity name= '' Interop.Event.Tester '' version= '' 1.0.0.0 '' type= '' win32 '' processorArchitecture= '' x86 '' / > < /assembly > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' yes '' ? > < assembly xmlns= '' urn : schemas-microsoft-com : asm.v1 '' manifestVersion= '' 1.0 '' > < assemblyIdentity name= '' InteropEventTest '' version= '' 1.0.0.0 '' type= '' win32 '' / > < clrClass name= '' InteropEventTest.InteropConnection '' clsid= '' { 2EE25BBD-1849-4CA8-8369-D65BF47886A5 } '' progid= '' InteropEventTest.InteropConnection '' runtimeVersion= '' v4.0.30319 '' threadingModel= '' Both '' / > < file name= '' InteropEventTest.tlb '' > < typelib tlbid= '' { 5CD6C635-503F-4103-93B0-3EBEFB91E500 } '' version= '' 1.0 '' helpdir= '' '' flags= '' hasdiskimage '' / > < /file > < comInterfaceExternalProxyStub name= '' ITheEvents '' iid= '' { E1BC643E-0CCF-4A91-8499-71BC48CAC01D } '' proxyStubClsid32= '' { 00020424-0000-0000-C000-000000000046 } '' baseInterface= '' { 00000000-0000-0000-C000-000000000046 } '' tlbid= '' { 5CD6C635-503F-4103-93B0-3EBEFB91E500 } '' / > < /assembly > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' yes '' ? > < assembly xmlns= '' urn : schemas-microsoft-com : asm.v1 '' manifestVersion= '' 1.0 '' > < assemblyIdentity name= '' tester.exe '' version= '' 1.0.0.0 '' type= '' win32 '' processorArchitecture= '' x86 '' / > < dependency > < dependentAssembly > < assemblyIdentity name= '' InteropEventTest '' version= '' 1.0.0.0 '' type= '' win32 '' / > < /dependentAssembly > < /dependency > < dependency > < dependentAssembly > < assemblyIdentity name= '' Interop.Event.Tester '' version= '' 1.0.0.0 '' type= '' win32 '' processorArchitecture= '' x86 '' / > < /dependentAssembly > < /dependency > < /assembly >
cacheLock.EnterWriteLock ( ) ; try { //Do something } finally { cacheLock.ExitWriteLock ( ) ; }
"public abstract class ControllerBase : Controller { public CompanyChannel < IAuthorizationService > authorizationServiceClient ; public ControllerBase ( CompanyChannel < IAuthorizationService > authService ) { this.authorizationServiceClient = authService ; } } public partial class SearchController : ControllerBase { protected CompanyChannel < IComplaintTaskService > complaintTaskServiceChannel ; protected IComplaintTaskService taskServiceClient ; protected ComplaintSearchViewModel searchViewModel ; # region `` Constructor `` public SearchController ( CompanyChannel < IComplaintTaskService > taskService , CompanyChannel < IAuthorizationService > authService , ComplaintSearchViewModel viewModel ) : base ( authService ) { searchViewModel = viewModel ; this.complaintTaskServiceChannel = taskService ; this.taskServiceClient = complaintTaskServiceChannel.Channel ; } # endregion public virtual ActionResult Index ( ) { return View ( ) ; } }"
IEnumerable < T > sequence = BuildSequence ( ) ; // 'BuildSequence ' makes some tough actions and uses 'yield return'// to form the resulting sequence . sequence.Take ( 5 ) ;
"public static void Main ( ) { string json = @ '' ... '' ; // snipped for brevity - see DotNetFiddle : https : //dotnetfiddle.net/wKN1Hj var root = ( JContainer ) JToken.Parse ( json ) ; var t3 = root.SelectTokens ( `` $ .Array3B. [ * ] .Array3B1. [ * ] . * '' ) ; // See DotNetFiddle for simpler examples that work Console.WriteLine ( $ '' { MergedAncestry ( t3 ) .ToString ( ) } '' ) ; // Wrong output ! Console.ReadKey ( ) ; } // Returns a single document merged using the full ancestry of each of the input tokensstatic JToken MergedAncestry ( IEnumerable < JToken > tokens ) { JObject merged = null ; foreach ( var token in tokens ) { if ( merged == null ) { // First object merged = ( JObject ) GetFullAncestry ( token ) ; } else { // Subsequent objects merged merged.Merge ( ( JObject ) GetFullAncestry ( token ) , new JsonMergeSettings { // union array values together to avoid duplicates MergeArrayHandling = MergeArrayHandling.Union } ) ; } } return merged ? ? new JObject ( ) ; } // Recursively builds a new tree to the node matching the ancestry of the original nodestatic JToken GetFullAncestry ( JToken node , JToken tree = null ) { if ( tree == null ) { // First level : start by cloning the current node tree = node ? .DeepClone ( ) ; } if ( node ? .Parent == null ) { // No parents left , return the tree we 've built return tree ; } // Rebuild the parent node in our tree based on the type of node JToken a ; switch ( node.Parent ) { case JArray _ : return GetFullAncestry ( node.Parent , new JArray ( tree ) ) ; case JProperty _ : return GetFullAncestry ( node.Parent , new JProperty ( ( ( JProperty ) node.Parent ) .Name , tree ) ) ; case JObject _ : return GetFullAncestry ( node.Parent , new JObject ( tree ) ) ; default : return tree ; } } { `` Array3A '' : [ { `` Item_3A1 '' : `` Desc_3A1 '' } ] , `` Array3B '' : [ { `` Item_3B1 '' : `` Desc_3B1 '' } , { `` Array3B1 '' : [ { `` Item_1 '' : `` Desc_3B11 '' } , { `` Item_2 '' : `` Desc_3B12 '' } , { `` Item_3 '' : `` Desc_3B13 '' } ] } , { `` Array3B2 '' : [ { `` Item_1 '' : `` Desc_3B21 '' } , { `` Item_2 '' : `` Desc_3B22 '' } , { `` Item_3 '' : `` Desc_3B23 '' } ] } ] } $ .Array3B. [ * ] .Array3B1. [ * ] . * { `` Array3B '' : [ { `` Array3B1 '' : [ { `` Item_1 '' : `` Desc_3B11 '' } , { `` Item_2 '' : `` Desc_3B12 '' } , { `` Item_3 '' : `` Desc_3B13 '' } ] } ] } { `` Array3B '' : [ { `` Array3B1 '' : [ { `` Item_1 '' : `` Desc_3B11 '' } ] } , { `` Array3B1 '' : [ { `` Item_2 '' : `` Desc_3B12 '' } ] } , { `` Array3B1 '' : [ { `` Item_3 '' : `` Desc_3B13 '' } ] } ] }"
"static void Main ( string [ ] args ) { string basePath = Path.Combine ( Environment.CurrentDirectory , `` Lib '' ) ; for ( int a = 0 ; a < 10 ; a++ ) { CreateFolders ( basePath ) ; basePath = Path.Combine ( basePath , a.ToString ( ) ) ; for ( int b = 0 ; b < 10 ; b++ ) { CreateFolders ( basePath ) ; basePath = Path.Combine ( basePath , b.ToString ( ) ) ; for ( int c = 0 ; c < 10 ; c++ ) { CreateFolders ( basePath ) ; basePath = Path.Combine ( basePath , c.ToString ( ) ) ; for ( int d = 0 ; d < 10 ; d++ ) { CreateFolders ( basePath ) ; basePath = Path.Combine ( basePath , d.ToString ( ) ) ; basePath = Helpers.DirMoveBack ( basePath ) ; } basePath = Helpers.DirMoveBack ( basePath ) ; } basePath = Helpers.DirMoveBack ( basePath ) ; } basePath = Helpers.DirMoveBack ( basePath ) ; } Console.ReadLine ( ) ; } // Creates folders ' 0 ' - ' 9 ' in the specified pathstatic void CreateFolders ( string path ) { for ( int a = 0 ; a < 10 ; a++ ) { Directory.CreateDirectory ( string.Format ( `` { 0 } \\ { 1 } '' , path , a ) ) ; Console.WriteLine ( string.Format ( `` { 0 } \\ { 1 } '' , path , a ) ) ; } } public static class Helpers { // Moves the directory back one step public static string DirMoveBack ( string path ) { for ( int a = path.Length - 1 ; a > 0 ; a -- ) if ( path [ a ] == '\\ ' ) return path.Substring ( 0 , a ) ; return path ; } }"
foreach ( var file in files ) { SomeMethod ( file ) ; } var errors = new List < Exception > ( ) ; foreach ( var file in files ) { try { SomeMethod ( file ) ; } catch ( Exception ex ) { errors.Add ( ex ) ; } }
"System.Text.RegularExpressions.Regex.IsMatch ( `` 00000000000000000000000000000 '' , `` ^ [ 1-9 ] |0 $ '' )"
"var connectionFactory = new ConnectionFactory ( ) { HostName = hostName } ; var connection = _connectionFactory.CreateConnection ( ) ; var channel = connection.CreateModel ( ) ; public void ListenToQueue ( string queue ) { var channel = _queueConnectionProvider.GetQueue ( ) ; var consumer = new EventingBasicConsumer ( channel ) ; consumer.Received += ( model , ea ) = > { string path = @ '' d : \debug.log.txt '' ; File.AppendAllLines ( path , new List < string > ( ) { `` MESSAGE RECEIVED '' , Environment.NewLine } ) ; var body = ea.Body ; var message = Encoding.UTF8.GetString ( body ) ; channel.BasicAck ( ea.DeliveryTag , false ) ; } ; channel.BasicConsume ( queue , true , consumer ) ; }"
"Service Layer ( AccountingMoudle , InventoryModule , ... ) Business Layer ( AccountingMoudle , InventoryModule , ... ) Data Layer ( AccountingModule , InventoryModule , ... ) AccountingModule ( Service Layer , Business Layer , Data Layer ) InventoryModule ( Service Layer , Business Layer , Data Layer ) + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ + -- -- -- -- -- -- -- -- -- -- -- -- -- -- ++ -- +AccountingServiceComponent +-+InventoryServiceComponent| Weak Dependency |+ -- +AccountingBusinessComponent < -- -- -- -- -- -- -- -- -- + +-+InventoryBusinessComponent| |+ -- +AccountingDataComponent +-+InventoryDataComponent + + +-+ GetDocumentByID ( int id ) + -- +GetProductByID ( int id ) | | +-+ SaveDocument ( Document d ) + -- +SaveProduct ( Product p )"
"//THE PROBLEM IS HERE.IEnumerable list3 = bookList.Where ( n = > n.author.Length > = 14 ) ; using System ; using System.Collections ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace Assignment2CuttingPhilip { public class Book { public string title ; public string author ; public Book ( string title , string author ) { this.title = title ; this.author = author ; } public override string ToString ( ) { return `` Title : \ ' '' + title + `` \ ' , Author : '' + author ; } } public class Books : IEnumerable { private Book [ ] _books ; public Books ( Book [ ] bArray ) { _books = new Book [ bArray.Length ] ; for ( int i = 0 ; i < bArray.Length ; i++ ) { _books [ i ] = bArray [ i ] ; } } IEnumerator IEnumerable.GetEnumerator ( ) { return ( IEnumerator ) GetEnumerator ( ) ; } public BooksEnum GetEnumerator ( ) { return new BooksEnum ( _books ) ; } } public class BooksEnum : IEnumerator { public Book [ ] _books ; int position = -1 ; public BooksEnum ( Book [ ] list ) { _books = list ; } public bool MoveNext ( ) { position++ ; return ( position < _books.Length ) ; } public void Reset ( ) { position = -1 ; } object IEnumerator.Current { get { return Current ; } } public Book Current { { try { return _books [ position ] ; } catch ( IndexOutOfRangeException ) { throw new InvalidOperationException ( ) ; } } } } class Assignement2PhilipCutting { static void Main ( string [ ] args ) { Book [ ] bookArray = new Book [ 3 ] { new Book ( `` Advance C # super stars '' , `` Prof Suad Alagic '' ) , new Book ( `` Finding the right lint '' , `` Philip Cutting '' ) , new Book ( `` Cat in the hat '' , `` Dr Sues '' ) } ; Books bookList = new Books ( bookArray ) ; IEnumerable List = from Book abook in bookList where abook.author.Length < = 14 select abook ; IEnumerable list2 = bookArray.Where ( n = > n.author.Length > = 14 ) ; //**THE PROBLEM IS HERE** . IEnumerable list3 = bookList.Where ( n = > n.author.Length > = 14 ) ; foreach ( Book abook in List ) { Console.WriteLine ( abook ) ; } } } }"
"public static bool AllFlagsSet < T > ( this T input , params T [ ] values ) where T : struct , IConvertible { bool allSet = true ; int enumVal = input.ToInt32 ( null ) ; foreach ( T itm in values ) { int val = itm.ToInt32 ( null ) ; if ( ! ( ( enumVal & val ) == val ) ) { allSet = false ; break ; } } return allSet ; } public static bool OnlyTheseFlagsSet < T > ( this T input , params T [ ] values ) where T : struct , IConvertible { }"
public class MyObject { public MyField Field { get ; set ; } } public class MyField { [ JsonProperty ] public Entity MyEntity { get ; set ; } public IEntity IMyEntity { get ; set ; } } public interface IEntity { string MyStr { get ; } } public class Entity : IEntity { } JsonConvert.DeserializeObject < MyObject > ( myObjStr ) ;
"public class MembersController : SurfaceController { public ActionResult Index ( ) { return Content ( `` Hello , Member ! `` ) ; } } < system.webServer > < validation validateIntegratedModeConfiguration= '' false '' / > < modules runAllManagedModulesForAllRequests= '' true '' > < remove name= '' UrlRewriteModule '' / > < add name= '' UrlRewriteModule '' type= '' UrlRewritingNet.Web.UrlRewriteModule , UrlRewritingNet.UrlRewriter '' / > . .. ..."
"IUnitOfWork uow = new UnitOfWork < EMDataContext > ( ) ; DeviceService deviceService = new DeviceService ( uow ) ; var what = deviceService.GetAllDevices ( ) ; public UnitOfWork ( ) { _ctx = new TContext ( ) ; _repositories = new Dictionary < Type , object > ( ) ; _disposed = false ; }"
"string addressBookEntryIds = `` 41,42x,43 '' ; var ids = addressBookEntryIds.Split ( new [ ] { ' , ' , ' ; ' } , StringSplitOptions.RemoveEmptyEntries ) ; var addressBookEntryIdList =new List < long > ( ) ; foreach ( var rec in ids ) { long val ; if ( Int64.TryParse ( rec , out val ) ) { addressBookEntryIdList.Add ( val ) ; } }"
List < MyCustomClass > listCustClass = GetList ( ) ; List < MyCustomClass > listCustClass = new List < MyCustomClass > ( ) ; listCustClass = GetList ( ) ;
"Thread t1 = new Thread ( functionsActivations ( 3 , 4000 , 0 , 4 ) ) ; Thread t2 = new Thread ( functionsActivations ( 3 , 4000 , 5 , 9 ) ) ; t1.start ( ) ; t2.Start ( ) ; Thread t3 = new Thread ( functionsActivations ( 4 , 4000 , 0 , 4 ) ) ; Thread t4 = new Thread ( functionsActivations ( 4 , 4000 , 5 , 9 ) ) ;"
__builtins__.__import__ = None # Stops imports workingreload = None # Stops reloading working ( specifically stops them reloading builtins # giving back an unbroken __import___ !
"SELECT ownerid where sysid in ( `` , `` , `` ) -- i.e . List < string > var chiLst = new List < string > ( ) ; var parRec = Lnq.attlnks.Where ( a = > a.sysid IN chiList ) .Select ( a = > a.ownerid ) ;"
"[ JSONAPIFilter ] public IEnumerable < string > ComplexType ( ) { return new List < string > ( ) { `` hello '' , `` world '' } ; } [ JSONAPIFilter ] public JsonResult ComplexTypeJSON ( ) { return Json ( new List < string > ( ) { `` hello '' , `` world '' } ) ; } `` System.Collections.Generic.List ` 1 [ System.String ] '' namespace MyProject.Controllers { using System ; using System.Collections.Generic ; using System.Web.Mvc ; using MyProject.Filters ; public class TestController : Controller { [ JSONAPIFilter ] public IEnumerable < string > ComplexType ( ) { return new List < string > ( ) { `` hello '' , `` world '' } ; } [ JSONAPIFilter ] public JsonResult ComplexTypeJSON ( ) { return Json ( new List < string > ( ) { `` hello '' , `` world '' } ) ; } // GET : Test [ JSONAPIFilter ] public ActionResult Index ( ) { return Json ( new { foo = `` bar '' , bizz = `` buzz '' } ) ; } [ JSONAPIFilter ] public string SimpleType ( ) { return `` foo '' ; } [ JSONAPIFilter ] public ActionResult Throw ( ) { throw new InvalidOperationException ( `` Some issue '' ) ; } } } namespace MyProject.Filters { using System ; using System.Collections.Generic ; using System.Linq ; using System.Web.Mvc ; using MyProject.Exceptions ; using MyProject.Models.JSONAPI ; public class JSONAPIFilterAttribute : ActionFilterAttribute , IExceptionFilter { private static readonly ISet < Type > IgnoredTypes = new HashSet < Type > ( ) { typeof ( FileResult ) , typeof ( JavaScriptResult ) , typeof ( HttpStatusCodeResult ) , typeof ( EmptyResult ) , typeof ( RedirectResult ) , typeof ( ViewResultBase ) , typeof ( RedirectToRouteResult ) } ; private static readonly Type JsonErrorType = typeof ( ErrorModel ) ; private static readonly Type JsonModelType = typeof ( ResultModel ) ; public override void OnActionExecuted ( ActionExecutedContext filterContext ) { if ( filterContext == null ) { throw new ArgumentNullException ( `` filterContext '' ) ; } if ( IgnoredTypes.Any ( x = > x.IsInstanceOfType ( filterContext.Result ) ) ) { base.OnActionExecuted ( filterContext ) ; return ; } var resultModel = ComposeResultModel ( filterContext.Result ) ; var newJsonResult = new JsonResult ( ) { JsonRequestBehavior = JsonRequestBehavior.AllowGet , Data = resultModel } ; filterContext.Result = newJsonResult ; base.OnActionExecuted ( filterContext ) ; } public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var modelState = filterContext.Controller.ViewData.ModelState ; if ( modelState == null || modelState.IsValid ) { base.OnActionExecuting ( filterContext ) ; } else { throw new ModelStateException ( `` Errors in ModelState '' ) ; } } public virtual void OnException ( ExceptionContext filterContext ) { if ( filterContext == null ) { throw new ArgumentNullException ( `` filterContext '' ) ; } if ( filterContext.Exception == null ) return ; // Todo : if modelstate error , do not provide that message // set status code to 404 var errors = new List < string > ( ) ; if ( ! ( filterContext.Exception is ModelStateException ) ) { errors.Add ( filterContext.Exception.Message ) ; } var modelState = filterContext.Controller.ViewData.ModelState ; var modelStateErrors = modelState.Values.SelectMany ( x = > x.Errors ) .Select ( x = > x.ErrorMessage ) .ToList ( ) ; if ( modelStateErrors.Any ( ) ) errors.AddRange ( modelStateErrors ) ; var errorCode = ( int ) System.Net.HttpStatusCode.InternalServerError ; var errorModel = new ErrorModel ( ) { status = errorCode.ToString ( ) , detail = filterContext.Exception.StackTrace , errors = errors , id = Guid.NewGuid ( ) , title = filterContext.Exception.GetType ( ) .ToString ( ) } ; filterContext.ExceptionHandled = true ; filterContext.HttpContext.Response.Clear ( ) ; filterContext.HttpContext.Response.TrySkipIisCustomErrors = true ; filterContext.HttpContext.Response.StatusCode = errorCode ; var newResult = new JsonResult ( ) { Data = errorModel , JsonRequestBehavior = JsonRequestBehavior.AllowGet } ; filterContext.Result = newResult ; } private ResultModel ComposeResultModel ( ActionResult actionResult ) { var newModelData = new ResultModel ( ) { } ; var asContentResult = actionResult as ContentResult ; if ( asContentResult ! = null ) { newModelData.data = asContentResult.Content ; return newModelData ; } var asJsonResult = actionResult as JsonResult ; if ( asJsonResult == null ) return newModelData ; var dataType = asJsonResult.Data.GetType ( ) ; if ( dataType ! = JsonModelType ) { newModelData.data = asJsonResult.Data ; } else { newModelData = asJsonResult.Data as ResultModel ; } return newModelData ; } } }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace what { public class Class1 { // This class can not be modified , is only // here to produce a complete example . public class PublicClass { public PublicClass ( ) { } } protected internal class ProtectedInternalClass : PublicClass { public ProtectedInternalClass ( ) { } public void SomeExtraFunction ( ) { } } public class SomeDataProvider { public int AnInterestingValue ; public int AnotherInterestingValue ; protected internal ProtectedInternalClass data ; // < -- - Occurs here . public PublicClass Data { get { return data ; } } } public static SomeDataProvider RetrieveProvider ( ) { SomeDataProvider provider = new SomeDataProvider ( ) ; provider.data = new ProtectedInternalClass ( ) ; provider.data.SomeExtraFunction ( ) ; return provider ; } } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace what { public class Class2 : Class1 { public Class2 ( ) { var pi = new ProtectedInternalClass ( ) ; var provider = new SomeDataProvider ( ) ; provider.data = pi ; } // no errors here } public class Class3 { public Class3 ( ) { var pi = new Class1.ProtectedInternalClass ( ) ; var provider = new Class1.SomeDataProvider ( ) ; provider.data = pi ; } // no errors here } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace some_other_assembly { public class Class4 : what.Class1 { public Class4 ( ) { var pi = new ProtectedInternalClass ( ) ; var provider = new SomeDataProvider ( ) ; provider.data = pi ; } // no errors here } public class Class5 { public Class5 ( ) { var pi = new what.Class1.ProtectedInternalClass ( ) ; // < -- - Inaccessible due to protection level , as it should be . var provider = new what.Class1.SomeDataProvider ( ) ; provider.data = pi ; // < -- - Intellisense implies inaccessible , but not indicated via error . } } }"
public static class Container < T > { public static readonly T [ ] EmptyArray = new T [ 0 ] ; } ... var emptyArray = Container < int > .EmptyArray ; ...
foreach ( var eventhandler in OnIdChanged.GetInvocationList ( ) ) { OnIdChanged -= ( ItemEventHandler ) eventhandler ; } foreach ( var eventhandler in OnNameChanged.GetInvocationList ( ) ) { ...
var Data1 = await WebService1.Call ( ) ; var Data2 = await WebService2.Call ( ) ; var Data3 = await WebService3.Call ( ) ; var Task1 = WebService1.Call ( ) ; var Task2 = WebService2.Call ( ) ; var Task3 = WebService3.Call ( ) ; var Data1 = await Task1 ; var Data2 = await Task2 ; var Data3 = await Task3 ;
try { // Open the connection _connection.Open ( ) ; // [ 1 ] } catch ( OracleException ex ) // [ 2 ] { // Handle the exception int x = ex.ErrorCode ; }
"// stack is used to traverse the tree iteratively . Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; private void treeView1_AfterCheck ( object sender , TreeViewEventArgs e ) { TreeNode selectedNode = e.Node ; bool checkedStatus = e.Node.Checked ; // suppress repeated even firing treeView1.AfterCheck -= treeView1_AfterCheck ; // traverse children stack.Push ( selectedNode ) ; while ( stack.Count > 0 ) { TreeNode node = stack.Pop ( ) ; node.Checked = checkedStatus ; System.Console.Write ( node.Text + `` , `` ) ; if ( node.Nodes.Count > 0 ) { ICollection tnc = node.Nodes ; foreach ( TreeNode n in tnc ) { stack.Push ( n ) ; } } } //traverse parent while ( selectedNode.Parent ! =null ) { TreeNode node = selectedNode.Parent ; node.Checked = checkedStatus ; selectedNode = selectedNode.Parent ; } // `` suppress repeated even firing '' ends here treeView1.AfterCheck += treeView1_AfterCheck ; string str = string.Empty ; } using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Drawing ; using System.Windows.Forms ; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } # region MyRegion private void button1_Click ( object sender , EventArgs e ) { TreeNode a = new TreeNode ( `` A '' ) ; TreeNode b = new TreeNode ( `` B '' ) ; TreeNode c = new TreeNode ( `` C '' ) ; TreeNode d = new TreeNode ( `` D '' ) ; TreeNode g = new TreeNode ( `` G '' ) ; TreeNode h = new TreeNode ( `` H '' ) ; TreeNode i = new TreeNode ( `` I '' ) ; TreeNode j = new TreeNode ( `` J '' ) ; TreeNode k = new TreeNode ( `` K '' ) ; TreeNode l = new TreeNode ( `` L '' ) ; TreeNode m = new TreeNode ( `` M '' ) ; TreeNode n = new TreeNode ( `` N '' ) ; TreeNode o = new TreeNode ( `` O '' ) ; TreeNode p = new TreeNode ( `` P '' ) ; TreeNode q = new TreeNode ( `` Q '' ) ; TreeNode r = new TreeNode ( `` R '' ) ; TreeNode s = new TreeNode ( `` S '' ) ; TreeNode t = new TreeNode ( `` T '' ) ; TreeNode u = new TreeNode ( `` U '' ) ; TreeNode v = new TreeNode ( `` V '' ) ; TreeNode w = new TreeNode ( `` W '' ) ; TreeNode x = new TreeNode ( `` X '' ) ; TreeNode y = new TreeNode ( `` Y '' ) ; TreeNode z = new TreeNode ( `` Z '' ) ; k.Nodes.Add ( x ) ; k.Nodes.Add ( y ) ; l.Nodes.Add ( s ) ; l.Nodes.Add ( t ) ; l.Nodes.Add ( u ) ; n.Nodes.Add ( o ) ; n.Nodes.Add ( p ) ; n.Nodes.Add ( q ) ; n.Nodes.Add ( r ) ; g.Nodes.Add ( k ) ; g.Nodes.Add ( l ) ; i.Nodes.Add ( m ) ; i.Nodes.Add ( n ) ; j.Nodes.Add ( b ) ; j.Nodes.Add ( c ) ; j.Nodes.Add ( d ) ; a.Nodes.Add ( g ) ; a.Nodes.Add ( h ) ; a.Nodes.Add ( i ) ; a.Nodes.Add ( j ) ; treeView1.Nodes.Add ( a ) ; treeView1.ExpandAll ( ) ; button1.Enabled = false ; } # endregion"
var set = ctx.Set < MyEntity > ( ) ; using ( var ctx = new MyDbContext ( ) ) { var u = ctx.Set < User > ( ) .Future ( ) ; var c = ctx.Set < Country > ( ) .Future ( ) ; var users = u.ToList ( ) ; }
"using System ; class Program { static void Main ( ) { Console.WriteLine ( Environment.Version ) ; CatchAnException < TestException > ( ) ; Console.ReadKey ( ) ; } private static void CatchAnException < TException > ( ) where TException : Exception { Console.WriteLine ( `` Trying to catch a < { 0 } > ... '' , typeof ( TException ) .Name ) ; try { throw new TestException ( ) ; } catch ( TException ex ) { Console.WriteLine ( `` *** PASS ! *** '' ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Caught < { 0 } > in 'catch ( Exception ex ) ' handler . `` , ex.GetType ( ) .Name ) ; Console.WriteLine ( `` *** FAIL ! *** '' ) ; } Console.WriteLine ( ) ; } } internal class TestException : Exception { } 2.0.50727.3068Trying to catch a < TestException > ... *** FAIL ! ***Caught < TestException > in 'catch ( Exception ex ) ' handler . Expected : < TestException > Actual : < TestException > Result of typeof ( TException ) == ex.GetType ( ) is True"
"$ http.post ( `` http : //api.domain.com/Controller/Method '' , JSON.stringify ( data ) , { headers : { 'Content-Type ' : 'application/json ' } } ) .then ( function ( response ) { console.log ( response ) ; } , function ( response ) { // something went wrong } ) ; }"
float f = 7.1f ; double d = f ; Console.WriteLine ( d == 7.1d ) ; // falseConsole.WriteLine ( d < 7.1d + float.Epsilon ) ; // true by luckConsole.WriteLine ( d > 7.1d - float.Epsilon ) ; // false ( less luck ) float f2 = ( float ) d ; Console.WriteLine ( f2 == f ) ; // true Console.WriteLine ( d == 7.1f ) ; // 7.1f implicitly converted to double as above
"m_interval = Observable.Interval ( TimeSpan.FromSeconds ( 5 ) , m_schedulerProvider.EventLoop ) .ObserveOn ( m_schedulerProvider.EventLoop ) .Select ( l = > Observable.FromAsync ( DoWork ) ) .Concat ( ) .Subscribe ( ) ; [ Fact ] public void MultiPluginStatusHelperShouldWaitForNextQuery ( ) { m_queryHelperMock .Setup ( x = > x.CustomQueryAsync ( ) ) .Callback ( ( ) = > Thread.Sleep ( 10000 ) ) .Returns ( Task.FromResult ( new QueryCompletedEventData ( ) ) ) .Verifiable ( ) ; var multiPluginStatusHelper = m_container.GetInstance < IMultiPluginStatusHelper > ( ) ; multiPluginStatusHelper.MillisecondsInterval = 5000 ; m_testSchedulerProvider.EventLoopScheduler.AdvanceBy ( TimeSpan.FromMilliseconds ( 5000 ) .Ticks ) ; m_testSchedulerProvider.EventLoopScheduler.AdvanceBy ( TimeSpan.FromMilliseconds ( 5000 ) .Ticks ) ; m_queryHelperMock.Verify ( x = > x.CustomQueryAsync ( ) , Times.Once ) ; }"
"public MainWindow ( ) { InitializeComponent ( ) ; Loaded += ( s , e ) = > { DataContext = new MainWindowViewModel ( ) ; Closing += ( ( MainWindowViewModel ) DataContext ) .MainWindow_Closing ; } ; } private void CloseWindow ( IClosable window ) { if ( window ! = null ) { windowClosingCTS.Cancel ( ) ; window.Close ( ) ; } } // Print Preview public static void PrintPreview ( FixedDocument fixeddocument , CancellationToken ct ) { // Was cancellation already requested ? if ( ct.IsCancellationRequested ) ct.ThrowIfCancellationRequested ( ) ; ... ... ... ... ... ... ... ... ... ... . // Use my custom document viewer ( the print button is removed ) . var previewWindow = new PrintPreview ( fixedDocumentSequence ) ; //Register the cancellation procedure with the cancellation token ct.Register ( ( ) = > previewWindow.Close ( ) ) ; previewWindow.ShowDialog ( ) ; } } public CancellationTokenSource windowClosingCTS { get ; set ; } // Constructor public MainMenu ( ) { readers = new List < Reader > ( ) ; CloseWindowCommand = new RelayCommand < IClosable > ( this.CloseWindow ) ; windowClosingCTS = new CancellationTokenSource ( ) ; }"
MyDel delA = myInstObj.MyM1 ; MyDel delB = SClass.OtherM2 ; MyDel delC = delA + delB ; // Has combined invocation list
namespace StaticTester { class Program { static void Main ( string [ ] args ) { Outer.Inner.Go ( ) ; Console.WriteLine ( ) ; Outer.Go ( ) ; Console.ReadLine ( ) ; } } public static partial class Outer { static Outer ( ) { Console.Write ( `` In Outer 's static constructor\n '' ) ; } public static void Go ( ) { Console.Write ( `` Outer Go\n '' ) ; } public static class Inner { static Inner ( ) { Console.Write ( `` In Inner 's static constructor\n '' ) ; } public static void Go ( ) { Console.Write ( `` Inner Go\n '' ) ; } } } }
var name = ( from x in new System.Management.ManagementObjectSearcher ( `` SELECT * FROM Win32_OperatingSystem '' ) .Get ( ) .OfType < System.Management.ManagementObject > ( ) select x.GetPropertyValue ( `` Caption '' ) ) .FirstOrDefault ( ) ; BootDevice : \Device\HarddiskVolume1BuildNumber : 10586BuildType : Multiprocessor FreeCaption : Microsoft Windows 10 Pro NCodeSet : 1252CountryCode : 1CreationClassName : Win32_OperatingSystemCSCreationClassName : Win32_ComputerSystemCSDVersion : CSName : DESKTOP-6UJPPDSCurrentTimeZone : 120DataExecutionPrevention_32BitApplications : TrueDataExecutionPrevention_Available : TrueDataExecutionPrevention_Drivers : TrueDataExecutionPrevention_SupportPolicy : 2Debug : FalseDescription : Distributed : FalseEncryptionLevel : 256ForegroundApplicationBoost : 2FreePhysicalMemory : 2027936FreeSpaceInPagingFiles : 4486600FreeVirtualMemory : 2611432InstallDate : 20151223101608.000000+120LargeSystemCache : LastBootUpTime : 20160215101020.112003+120LocalDateTime : 20160225114508.446000+120Locale : 0409Manufacturer : Microsoft CorporationMaxNumberOfProcesses : 4294967295MaxProcessMemorySize : 137438953344MUILanguages : System.String [ ] Name : Microsoft Windows 10 Pro N|C : \WINDOWS|\Device\Harddisk0\Partition2NumberOfLicensedUsers : 0NumberOfProcesses : 157NumberOfUsers : 2OperatingSystemSKU : 49Organization : OSArchitecture : 64-bitOSLanguage : 1033OSProductSuite : 256OSType : 18OtherTypeDescription : PAEEnabled : PlusProductID : PlusVersionNumber : PortableOperatingSystem : FalsePrimary : TrueProductType : 1RegisteredUser : developerSerialNumber : 00332-00331-71784-AA054ServicePackMajorVersion : 0ServicePackMinorVersion : 0SizeStoredInPagingFiles : 4637884Status : OKSuiteMask : 272SystemDevice : \Device\HarddiskVolume2SystemDirectory : C : \WINDOWS\system32SystemDrive : C : TotalSwapSpaceSize : TotalVirtualMemorySize : 12910660TotalVisibleMemorySize : 8272776Version : 10.0.10586WindowsDirectory : C : \WINDOWS
"public static Tax GetEmployeeTax ( string Id , Employee employee , dynamic inputObject ) { var temp = new Employee ( ) ; //use the dynamic object propertiesreturn temp ; } dynamic dynamicEmployeeTax = new ExpandoObject ( ) ; dynamicEmployeeTax.FederalTaxInfo = `` Some information '' ; dynamicEmployeeTax.StateTaxInfo = `` Some other information '' ;"
"string FirstNamestring LastNamestring MiddleName int StaffID int CostCentre bool staffMatchesSearch ( Staff stf ) { if ( tbSrch.Text.Trim ( ) == string.Empty ) return true ; // No search = match always . string s = tbSrch.Text.Trim ( ) .ToLower ( ) ; // Do the checks in the order most likely to return soonest : if ( stf.LastName.ToLower ( ) .Contains ( s ) ) return true ; if ( stf.FirstName.ToLower ( ) .Contains ( s ) ) return true ; if ( stf.MiddleName.ToLower ( ) .Contains ( s ) ) return true ; if ( stf.CostCentre.ToString ( ) .Contains ( s ) ) return true ; // Yes , we want partial matches on CostCentre if ( stf.StaffID.ToString ( ) .Contains ( s ) ) return true ; // And also on StaffID return false ; } tbSrch_TextChanged ( object sender , EventArgs e ) { lbStaff.BeginUpdate ( ) ; lbStaff.Items.Clear ( ) ; foreach ( Staff stf in staff ) if ( staffMatchesSearch ( stf ) ) lbStaff.Items.Add ( stf ) ; lbStaff.EndUpdate ( ) ; }"
"public static IOrderedEnumerable < TSource > ToOrderBy < TSource , TKey > ( this IEnumerable < TSource > source , Func < TSource , TKey > keySelector ) { if ( source == null ) return null ; var seenKeys = new HashSet < TKey > ( ) ; var culture = new CultureInfo ( `` pt-PT '' ) ; return source.OrderBy ( element = > seenKeys.Add ( keySelector ( element ) ) , StringComparer.Create ( culture , false ) ) ; }"
"System.Collections.Generic.List < string > aList = new System.Collections.Generic.List < string > { `` aa '' , `` ab '' , `` ba '' , `` bb '' } ; // instead ofstring firstString = ( from item in aList where item.StartsWith ( `` a '' ) select item ) .First ( ) ; // would be nicestring firstString = from item in aList where item.StartsWith ( `` a '' ) selectFirst item ; // or something elsefrom item in aListwhere item.StartsWith ( `` a '' ) WriteLineToConsole item ;"
"dbContext.Persons.Load ( ) ; myDataGridView.DataSource = dbContext.Persons.Local.ToBindingList ( ) ; myDataGridView.Columns [ `` Description '' ] .AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells ; Person p = new Person ( ) ; p.Name = `` Tester Alfred '' ; p.Description = `` Description '' ; //no more properties , only those two ( Id Property is annotated as [ Key ] dbContext.Persons.Add ( p ) ; // this throws a NullReferenceException System.Data.Entity.Core.Objects.ObjectContext.AddSingleObject ( EntitySet entitySet , IEntityWrapper wrappedEntity , String argumentName ) bei System.Data.Entity.Core.Objects.ObjectContext.AddObject ( String entitySetName , Object entity ) bei System.Data.Entity.Internal.Linq.InternalSet ` 1. < > c__DisplayClassd. < Add > b__c ( ) bei System.Data.Entity.Internal.Linq.InternalSet ` 1.ActOnSet ( Action action , EntityState newState , Object entity , String methodName ) bei System.Data.Entity.Internal.Linq.InternalSet ` 1.Add ( Object entity ) bei System.Data.Entity.DbSet ` 1.Add ( TEntity entity )"
"// Startup.csservices.AddHttpClient < GitHubService > ( ) ; // GitHubController.cspublic class GitHubController : Controller { private readonly GitHubService _service ; public GitHubController ( GitHubService service ) { _service = service ; } } // GitHubController.cspublic class GitHubController : Controller { private readonly IMediator _mediator ; public GitHubController ( IMediator mediator ) { _mediator= mediator ; } public async Task < IActionResult > GetGitHubRepositoryInfo ( GetGitHubRepositoryCommand command ) { _mediator.Send ( command ) ; } } // GetGitHubRepositoryHandler.cspublic class GetGitHubRepositoryHandler : IRequestHandler < GetGitHubRepositoryCommand , GetGitHubRepositoryCommandResult > { private HttpClient _httpClient ; public GetGitHubRepositoryHandler ( HttpClient httpClient ) { _httpClient = httpClient ; } } services.AddHttpClient < ExtractX509CommandHandler > ( ) ; services.AddMediatR ( typeof ( Startup ) .Assembly , typeof ( ExtractX509CommandHandler ) .Assembly ) ;"
"public static List < T > ToDelimitedList < T > ( this string value , string delimiter ) { if ( value == null ) { return new List < T > ( ) ; } var output = value.Split ( new string [ ] { delimiter } , StringSplitOptions.RemoveEmptyEntries ) ; return output.Select ( x = > ( T ) x ) .ToList ( ) ; } var someStr = `` 123,4,56,78,100 '' ; List < int > intList = someStr.ToDelimitedList < int > ( `` , '' ) ; var someStr = `` true ; false ; true ; true ; false '' ; List < bool > boolList = someStr.ToDelimitedList < bool > ( `` ; '' ) ;"
"< asp : fileupload id= '' FileUpload '' runat= '' server '' allowmultiple= '' true '' cssclass= '' fileUpload btn btn-sm btn-default '' onchange= '' preloadImages ( ) '' / > < div class= '' field col-md-2 col-md-offset-1 immScarpePreview MainPreviewBox '' > < asp : image id= '' Image1 '' runat= '' server '' visible= '' false '' cssclass= '' img-responsive '' / > < asp : button id= '' ImmButton '' runat= '' server '' text= '' Upload '' onclick= '' ImmButton_Click '' cssclass= '' hidden '' / > < /div > < script > function preloadImages ( ) { $ ( ' # < % =ImmButton.ClientID % > ' ) .trigger ( 'click ' ) ; } < /script > protected void ImmButton_Click ( object sender , EventArgs e ) { if ( FileUpload.HasFile ) { try { int cont = 0 ; byte [ ] fileData = null ; foreach ( HttpPostedFile file in FileUpload.PostedFiles ) { if ( cont == 0 ) { using ( var binaryReader = new BinaryReader ( file.InputStream ) ) fileData = binaryReader.ReadBytes ( file.ContentLength ) ; File.WriteAllBytes ( Server.MapPath ( `` immScarpe/tmp/ '' + file.FileName ) , fileData ) ; setImage1 ( `` immScarpe/tmp/ '' + file.FileName ) ; } else if ( cont == 1 ) { using ( var binaryReader = new BinaryReader ( file.InputStream ) ) fileData = binaryReader.ReadBytes ( file.ContentLength ) ; File.WriteAllBytes ( Server.MapPath ( `` immScarpe/tmp/ '' + file.FileName ) , fileData ) ; setImage2 ( `` immScarpe/tmp/ '' + file.FileName ) ; } else if ( cont == 2 ) //and so on ... //so on ... cont++ ; } } catch ( Exception ex ) { //error writing file Console.Write ( ex.Message ) ; } } } private void setImage1 ( string image ) //all equals for all the 5 images { Image1.ImageUrl = image ; Image1.Visible = true ; }"
"double x = Math.Min ( 1+Math.Sqrt ( A+Math.Max ( B1 , B2 ) ) , Math.Min ( Math.Cos ( Z1 ) , Math.Cos ( Z2 ) ) ) ; double x = min ( 1+sqrt ( A+max ( B1 , B2 ) ) , min ( cos ( Z1 ) , cos ( Z2 ) ) ) ; using min = Math.Min ; ... double x = min ( a , b ) ;"
private MigrationRequestViewModel Request { get ; set ; } private MigrationRequestViewModel RequestSnapshot { get ; set ; }
IEnumerable < string > values = from first in goodOrderedjoin second in badOrdered on first.ToLower ( ) equalssecond.ToLower ( ) select second ;
"... private static void Main ( string [ ] args ) { string file=DateTime.Now.ToFileTime ( ) .ToString ( ) ; File.AppendAllText ( file , `` Mutex\r\n '' ) ; bool CreatedNew ; Mutex mutex=new Mutex ( true , AppDomain.CurrentDomain.FriendlyName , out CreatedNew ) ; if ( CreatedNew ) { # if DEBUG File.AppendAllText ( file , `` Launching in DEBUG mode\r\n '' ) ; # else File.AppendAllText ( file , `` Launching in RELEASE mode\r\n '' ) ; # endif //Program.Launch ( ) ; Program.ProcessArgsAndLaunch ( args ) ; } else { File.AppendAllText ( file , `` Handling dupe\r\n '' ) ; Program.HandleDuplicate ( ) ; } } ..."
"namespace Metro_test { [ TestClass ] public class UnitTest1 { [ TestMethod ] public void TestMethod1 ( ) { Assert.Equals ( 0 , 1 ) ; } } }"
//Main methodpublic async Task < int > Foo1 ( int x ) { var result = await DoingSomethingAsync ( x ) ; return DoSomethingElse ( result ) ; } //other methodpublic async Task < int > Foo2 ( Double double ) { return await Foo1 ( Convert.ToInt32 ( double ) ) ; } //other methodpublic Task < int > Foo3 ( Double double ) { return Foo1 ( Convert.ToInt32 ( double ) ) ; } int x = await Foo1 ( 1 ) ; int x = await Foo2 ( 1D ) ; int x = await Foo3 ( 1D ) ;
"// This works.Func < SomeType > a = ( ) = > new SomeType ( ) ; Func < object > b = a ; // This does n't work ! Func < int > five = ( ) = > 5 ; Func < object > fiveCovariant = five ; Func < int > answer = ( ) = > 42 ; Expression answerExpression = Expression.Constant ( answer ) ; // No InvalidOperationException is thrown at this line.Expression converted = Expression.Convert ( answerExpression , typeof ( Func < object > ) ) ;"
"var item = Session.Get < Item > ( itemId ) ; var flaggedResult = Session.CreateCriteria < ItemWithUserFlag > ( ) .Add ( Restrictions.Eq ( `` User.Id '' , userId ) ) .Add ( Restrictions.Eq ( `` Item '' , item ) ) .List < ItemWithUserFlag > ( ) ; if ( flaggedResult.Count > 0 ) item.IsMarked = true ; return item ;"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { int x = 3 ; Console.WriteLine ( x.factorial ( ) ) ; Console.ReadLine ( ) ; } } public static class MyMathExtension { public static int factorial ( this int x ) { if ( x < = 1 ) return 1 ; if ( x == 2 ) return 2 ; else return x * factorial ( x - 1 ) ; } } }
"private void Initialize ( ) { NETWORK.SetActivationFunction ( ANN_MLP.AnnMlpActivationFunction.SigmoidSym ) ; NETWORK.SetTrainMethod ( ANN_MLP.AnnMlpTrainMethod.Backprop ) ; Matrix < double > layers = new Matrix < double > ( new Size ( 4 , 1 ) ) ; layers [ 0 , 0 ] = 2 ; layers [ 0 , 1 ] = 2 ; layers [ 0 , 2 ] = 2 ; layers [ 0 , 3 ] = 1 ; NETWORK.SetLayerSizes ( layers ) ; } private void Train ( ) { // providing data for input Matrix < float > input = new Matrix < float > ( 4 , 2 ) ; input [ 0 , 0 ] = MIN_ACTIVATION_FUNCTION ; input [ 0 , 1 ] = MIN_ACTIVATION_FUNCTION ; input [ 1 , 0 ] = MIN_ACTIVATION_FUNCTION ; input [ 1 , 1 ] = MAX_ACTIVATION_FUNCTION ; input [ 2 , 0 ] = MAX_ACTIVATION_FUNCTION ; input [ 2 , 1 ] = MIN_ACTIVATION_FUNCTION ; input [ 3 , 0 ] = MAX_ACTIVATION_FUNCTION ; input [ 3 , 1 ] = MAX_ACTIVATION_FUNCTION ; //providing data for output Matrix < float > output = new Matrix < float > ( 4 , 1 ) ; output [ 0 , 0 ] = MIN_ACTIVATION_FUNCTION ; output [ 1 , 0 ] = MAX_ACTIVATION_FUNCTION ; output [ 2 , 0 ] = MAX_ACTIVATION_FUNCTION ; output [ 3 , 0 ] = MAX_ACTIVATION_FUNCTION ; // mixing input and output for training TrainData mixedData = new TrainData ( input , Emgu.CV.ML.MlEnum.DataLayoutType.RowSample , output ) ; // stop condition = 1 million iterations NETWORK.TermCriteria = new MCvTermCriteria ( 1000000 ) ; // training NETWORK.Train ( mixedData ) ; } private void Predict ( ) { Matrix < float > input = new Matrix < float > ( 1 , 2 ) ; input [ 0 , 0 ] = MIN_ACTIVATION_FUNCTION ; input [ 0 , 1 ] = MIN_ACTIVATION_FUNCTION ; Matrix < float > output = new Matrix < float > ( 1 , 1 ) ; NETWORK.Predict ( input , output ) ; MessageBox.Show ( output [ 0 , 0 ] .ToString ( ) ) ; ////////////////////////////////////////////// input [ 0 , 0 ] = MIN_ACTIVATION_FUNCTION ; input [ 0 , 1 ] = MAX_ACTIVATION_FUNCTION ; NETWORK.Predict ( input , output ) ; MessageBox.Show ( output [ 0 , 0 ] .ToString ( ) ) ; ////////////////////////////////////////////// input [ 0 , 0 ] = MAX_ACTIVATION_FUNCTION ; input [ 0 , 1 ] = MIN_ACTIVATION_FUNCTION ; NETWORK.Predict ( input , output ) ; MessageBox.Show ( output [ 0 , 0 ] .ToString ( ) ) ; //////////////////////////////////////////////// input [ 0 , 0 ] = MAX_ACTIVATION_FUNCTION ; input [ 0 , 1 ] = MAX_ACTIVATION_FUNCTION ; NETWORK.Predict ( input , output ) ; MessageBox.Show ( output [ 0 , 0 ] .ToString ( ) ) ; }"
public struct Input { public decimal Number1 { get ; set ; } public decimal Number2 { get ; set ; } } public class InBenchmarking { const int loops = 50000000 ; Input inputInstance ; public InBenchmarking ( ) { inputInstance = new Input { } ; } [ Benchmark ] public decimal DoSomethingRefLoop ( ) { decimal result = 0M ; for ( int i = 0 ; i < loops ; i++ ) { result = DoSomethingRef ( ref inputInstance ) ; } return result ; } [ Benchmark ] public decimal DoSomethingInLoop ( ) { decimal result = 0M ; for ( int i = 0 ; i < loops ; i++ ) { result = DoSomethingIn ( inputInstance ) ; } return result ; } [ Benchmark ( Baseline = true ) ] public decimal DoSomethingLoop ( ) { decimal result = 0M ; for ( int i = 0 ; i < loops ; i++ ) { result = DoSomething ( inputInstance ) ; } return result ; } public decimal DoSomething ( Input input ) { return input.Number1 ; } public decimal DoSomethingIn ( in Input input ) { return input.Number1 ; } public decimal DoSomethingRef ( ref Input input ) { return input.Number1 ; } } Method | Mean | Error | StdDev | Scaled | ScaledSD | -- -- -- -- -- -- -- -- -- - | -- -- -- -- - : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- - : | -- -- -- -- - : | DoSomethingRefLoop | 20.15 ms | 0.3967 ms | 0.6058 ms | 0.41 | 0.03 | DoSomethingInLoop | 48.88 ms | 0.9756 ms | 2.5529 ms | 0.98 | 0.08 | DoSomethingLoop | 49.84 ms | 1.0872 ms | 3.1367 ms | 1.00 | 0.00 |
"public class SomeClass { public T GenericMethod < T > ( dynamic value ) { return ( T ) value ; } } new SomeClass ( ) .GenericMethod < object > ( new object ( ) ) ; // throws System.NullReferenceException new SomeClass ( ) .GenericMethod < string > ( `` SomeString '' ) ; // returns SomeStringnew SomeClass ( ) .GenericMethod < object > ( `` SomeString '' ) ; // returns SomeString public class SomeOtherClass { public T GenericMethod < T > ( object value ) { return ( T ) value ; } } System.NullReferenceException : Object reference not set to an instance of an object . at Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter.GenerateLambda ( EXPRCALL pExpr ) at Microsoft.CSharp.RuntimeBinder.Semantics.ExprVisitorBase.Visit ( EXPR pExpr ) at Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter.Rewrite ( TypeManager typeManager , EXPR pExpr , IEnumerable ` 1 listOfParameters ) at Microsoft.CSharp.RuntimeBinder.RuntimeBinder.BindCore ( DynamicMetaObjectBinder payload , IEnumerable ` 1 parameters , DynamicMetaObject [ ] args , DynamicMetaObject & deferredBinding ) at Microsoft.CSharp.RuntimeBinder.RuntimeBinder.Bind ( DynamicMetaObjectBinder payload , IEnumerable ` 1 parameters , DynamicMetaObject [ ] args , DynamicMetaObject & deferredBinding ) at Microsoft.CSharp.RuntimeBinder.BinderHelper.Bind ( DynamicMetaObjectBinder action , RuntimeBinder binder , IEnumerable ` 1 args , IEnumerable ` 1 arginfos , DynamicMetaObject onBindingError ) at Microsoft.CSharp.RuntimeBinder.CSharpConvertBinder.FallbackConvert ( DynamicMetaObject target , DynamicMetaObject errorSuggestion ) at System.Dynamic.DynamicMetaObject.BindConvert ( ConvertBinder binder ) at System.Dynamic.DynamicMetaObjectBinder.Bind ( Object [ ] args , ReadOnlyCollection ` 1 parameters , LabelTarget returnLabel ) at System.Runtime.CompilerServices.CallSiteBinder.BindCore [ T ] ( CallSite ` 1 site , Object [ ] args ) at System.Dynamic.UpdateDelegates.UpdateAndExecute1 [ T0 , TRet ] ( CallSite site , T0 arg0 )"
"string s = `` \U0001D11E '' ; bool c = Char.IsSurrogate ( s , 0 ) ; Console.WriteLine ( String.Format ( `` Length : { 0 } , is surrogate : { 1 } '' , s.Length , c ) ) ; let s = `` \U0001D11E '' let c = Char.IsSurrogate ( s , 0 ) printf `` Length : % d , is surrogate : % b '' s.Length c"
public void ConfigureServices ( IServiceCollection services ) { services .AddMvc ( ) .SetCompatibilityVersion ( CompatibilityVersion.Version_2_2 ) ; //services.AddOptions < UploadConfig > ( Configuration.GetSection ( `` UploadConfig '' ) ) ; } [ Route ( `` api/ [ controller ] '' ) ] [ ApiController ] public class HelloWorldController : ControllerBase { public HelloWorldController ( IOptions < UploadConfig > config ) { var config1 = config.Value.Config1 ; } }
"protected void SetRefProperty < T > ( ref T propertyBackingField , T newValue ) where T : class { bool isDifferent = false ; // for reference types , we use a simple reference equality check to determine // whether the values are 'equal ' . We do not use an equality comparer as these are often // unreliable indicators of equality , AND because value equivalence does NOT indicate // that we should share a reference type since it may be a mutable . if ( propertyBackingField ! = newValue ) { isDifferent = true ; } } .method family hidebysig instance void SetRefProperty < class T > ( ! ! T & propertyBackingField , ! ! T newValue ) cil managed { .maxstack 2 .locals init ( [ 0 ] bool isDifferent , [ 1 ] bool CS $ 4 $ 0000 ) L_0000 : nop L_0001 : ldc.i4.0 L_0002 : stloc.0 L_0003 : ldarg.1 L_0004 : ldobj ! ! T L_0009 : box ! ! T L_000e : ldarg.2 L_000f : box ! ! T L_0014 : ceq L_0016 : stloc.1 L_0017 : ldloc.1 L_0018 : brtrue.s L_001e L_001a : nop L_001b : ldc.i4.1 L_001c : stloc.0 L_001d : nop L_001e : ret }"
12/312*3/12 ( 12*54 ) / ( 3/4 ) some12text/some3textsome12text*some2text/some12text ( some12text*some54text ) / ( some3text/some4text ) 34*157 document.getElementById ( `` 34 '' ) .value*document.getElementById ( `` 157 '' ) .value var pattern = @ '' \d+ '' ; var input = `` 12/3 ; Regex r = new Regex ( pattern ) ; var matches = r.Matches ( input ) ; foreach ( Match match in matches ) { // im at a loss what to match and replace here }
"var spanGetter = typeof ( Span < > ) .MakeGenericType ( typeof ( float ) ) .GetMethod ( `` get_Item '' ) ; var myFloatSpan = Expression.Parameter ( typeof ( Span < float > ) , `` s '' ) ; var myValue = Expression.Call ( myFloatSpan , spanGetter , Expression.Constant ( 42 ) ) ; var myAdd = Expression.Add ( myValue , Expression.Constant ( 13f ) ) ;"
"// ... inside Sheet1.csprivate IExpenseWorksheetFactory _factory ; void ExpensesBeforeRightClick ( Excel.Range target , ref bool cancel ) { Application.EnableEvents = false ; var popup = _factory.CreateContextMenu ( ) ; popup.ShowContextMenu ( target , ref cancel ) ; Application.EnableEvents = true ; } // ... rest of Sheet1.cs /// < summary > /// Abstract Factory for creating Worksheet logic objects . Meant to be used with Ninject Factory extension./// < /summary > public interface IExpenseWorksheetFactory { ExpenseWorksheet CreateWorksheet ( ) ; ExpenseWorksheet.ContextMenus CreateContextMenu ( ) ; ExpenseWorksheet.Events CreateEventHandlers ( ) ; } //instantiate the kernel in app 's Composition Root_kernel = new StandardKernel ( ) ; //worksheet related stuff - seems to be ok to be singleton_kernel.Bind < ExpenseWorksheet > ( ) .ToSelf ( ) .InSingletonScope ( ) ; _kernel.Bind < ExpenseWorksheet.Events > ( ) .ToSelf ( ) .InSingletonScope ( ) ; _kernel.Bind < ExpenseWorksheet.ContextMenus > ( ) .ToSelf ( ) .InSingletonScope ( ) ; // '' automagic '' factories_kernel.Bind < IExpenseWorksheetFactory > ( ) .ToFactory ( ) ;"
"void GetChannelData ( string name , out object data ) { // Depending on `` name '' , the underlying type of // `` data '' can be different : int [ ] , byte [ ] , float [ ] ... // Below I simply return int [ ] for the sake of example int [ ] intArray = { 0 , 1 , 2 , 3 , 4 , 5 } ; data = intArray ; } object objArray ; GetChannelData ( `` test '' , out objArray ) ; double [ ] doubleArray = Array.ConvertAll < objArray.GetType ( ) .GetElementType ( ) , double > ( objArray , item = > ( double ) item ) ;"
"private static async Task AutoRetryHandlerAsync_Worker ( Func < Task < bool > > taskToRun , ... ) private static async Task AutoRetryHandlerAsync_Worker ( Func < Task < bool > > taskToRun , ... ) { try { await taskToRun ( ) ; } catch ( Exception ) { // Execute later , and wait the result to complete await Task.Delay ( currentDelayMs ) .ContinueWith ( t = > { // Wait for the recursive call to complete AutoRetryHandlerAsync_Worker ( taskToRun ) .Wait ( ) ; } ) ; // Stop return ; } } private static async Task AutoRetryHandlerAsync_Worker ( Func < Task < bool > > taskToRun , ... ) { try { await taskToRun ( ) ; } catch ( Exception ) { // Execute later , and wait the result to complete await Task.Delay ( currentDelayMs ) .ContinueWith ( async t = > { // Wait for the recursive call to complete await AutoRetryHandlerAsync_Worker ( taskToRun ) ; } ) ; // Stop return ; } } public static void Main ( string [ ] args ) { long o = 0 ; Task.Run ( async ( ) = > { // # 1 await await Task.Delay ( 1000 ) .ContinueWith ( async t = > { // # 2 await await Task.Delay ( 1000 ) .ContinueWith ( t2 = > { o = 10 ; } ) ; } ) ; var hello = o ; } ) ; Task.Delay ( 10000 ) .Wait ( ) ; }"
public static void Something ( string [ ] value ) { if ( value is { } ) { DoSomethingElse ( ) ; } }
"[ TypeConverter ( typeof ( LocalizedEnumTypeConverter ) ) ] public enum MyEnum { EnumVal1 = 0 , EnumVal2 = 1 , EnumVal3 = 2 , }"
public string City { get ; set ; } public string City ;
"Func < int > func = ( ) = > 5 ; Func < int > x = ( ) = > 5 ; Func < int > y = ( ) = > 5 ; class EventSender { public event EventHandler Event ; public void Send ( ) { EventHandler handler = this.Event ; if ( handler ! = null ) { handler ( this , EventArgs.Empty ) ; } } } class Program { static string _message = `` Hello , world ! `` ; static void Main ( ) { var sender = new EventSender ( ) ; sender.Event += ( obj , args ) = > Console.WriteLine ( _message ) ; sender.Send ( ) ; // Unless I 'm mistaken , this lambda expression is semantically identical // to the one above . However , the handler is not removed , indicating // that a different delegate instance is constructed . sender.Event -= ( obj , args ) = > Console.WriteLine ( _message ) ; // This prints `` Hello , world ! '' again . sender.Send ( ) ; } }"
"< Page x : Class= '' MainPage '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Loaded= '' Page_Loaded_1 '' x : Name= '' myMainPage '' FlowDirection= '' RightToLeft '' > < Page.Resources > < Style TargetType= '' ContentControl '' x : Key= '' MenuItemsStyle '' > < Setter Property= '' Background '' Value= '' Transparent '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate > < Viewport3D VerticalAlignment= '' Stretch '' HorizontalAlignment= '' Stretch '' ClipToBounds= '' False '' > < Viewport3D.Camera > < PerspectiveCamera x : Name= '' myCam '' FieldOfView= '' 90 '' Position= '' { Binding ElementName=myMainWindow , Path=CameraHeight } '' NearPlaneDistance= '' 1 '' FarPlaneDistance= '' 10 '' / > < /Viewport3D.Camera > < ModelVisual3D > < ModelVisual3D.Content > < Model3DGroup > < DirectionalLight Color= '' # FFFFFFFF '' Direction= '' 0,0 , -1 '' / > < /Model3DGroup > < /ModelVisual3D.Content > < /ModelVisual3D > < Viewport2DVisual3D x : Name= '' V2d3d '' > < Viewport2DVisual3D.Transform > < Transform3DGroup > < RotateTransform3D > < RotateTransform3D.Rotation > < AxisAngleRotation3D Axis= '' 0,1,0 '' Angle= '' 0 '' x : Name= '' aar3D '' / > < /RotateTransform3D.Rotation > < /RotateTransform3D > < /Transform3DGroup > < /Viewport2DVisual3D.Transform > < Viewport2DVisual3D.Material > < DiffuseMaterial Viewport2DVisual3D.IsVisualHostMaterial= '' True '' Brush= '' White '' / > < /Viewport2DVisual3D.Material > < Viewport2DVisual3D.Geometry > < MeshGeometry3D Positions= '' { Binding ElementName=myMainWindow , Path=MeshPosions } '' TextureCoordinates= '' 0,0 0,1 1,1 1,0 '' TriangleIndices= '' 0 1 2 0 2 3 '' / > < /Viewport2DVisual3D.Geometry > < Border Name= '' mainBorder '' VerticalAlignment= '' Stretch '' HorizontalAlignment= '' Stretch '' > < Border.Style > < Style TargetType= '' Border '' > < Setter Property= '' BorderThickness '' Value= '' 1.2 '' / > < Setter Property= '' Background '' > < Setter.Value > < SolidColorBrush Color= '' Transparent '' / > < /Setter.Value > < /Setter > < Setter Property= '' BorderBrush '' > < Setter.Value > < SolidColorBrush Color= '' Transparent '' / > < /Setter.Value > < /Setter > < /Style > < /Border.Style > < ContentPresenter VerticalAlignment= '' Stretch '' HorizontalAlignment= '' Stretch '' Content= '' { TemplateBinding ContentControl.Content } '' > < ContentPresenter.Triggers > < EventTrigger RoutedEvent= '' ContentPresenter.MouseLeftButtonDown '' > // Axis Animation < /EventTrigger > < /ContentPresenter.Triggers > < /ContentPresenter > < /Border > < /Viewport2DVisual3D > < /Viewport3D > < /ControlTemplate > < /Setter.Value > < /Setter > < Style.Triggers > < EventTrigger RoutedEvent= '' ContentControl.MouseLeftButtonDown '' > //Axis Animation < /EventTrigger > < EventTrigger RoutedEvent= '' ContentControl.MouseEnter '' > //ScaleAnimation < /EventTrigger > < EventTrigger RoutedEvent= '' ContentControl.MouseLeave '' > //ScaleAnimation < /EventTrigger > < /Style.Triggers > < /Style > < /Page.Resources > < Page.Triggers > < EventTrigger RoutedEvent= '' Loaded '' > //Load Object Scale And Fade In < /EventTrigger > < /Page.Triggers > < Grid Name= '' MainGrid '' > < Canvas Name= '' MainCanvas '' VerticalAlignment= '' Stretch '' HorizontalAlignment= '' Stretch '' FlowDirection= '' LeftToRight '' > < ContentControl Opacity= '' 0 '' Name= '' MenuItem1 '' Style= '' { StaticResource MenuItemsStyle } '' MouseDown= '' MenuItem1_MouseDown '' Panel.ZIndex= '' 1 '' > < Image Source= '' /IsargaranProject ; component/Images/isargari.jpg '' / > < ContentControl.RenderTransform > < ScaleTransform ScaleX= '' 0.7 '' ScaleY= '' 0.7 '' x : Name= '' MenuItem1ST '' / > < /ContentControl.RenderTransform > < /ContentControl > < /Canvas > < /Grid > < /Page >"
"public static class HttpFileManager { public void DownloadImage ( string url , Action < Texture > successCallback = null , Credentials credentials = null , Action < UnityWebRequest > errorCallback = null ) { StartCoroutine ( DownloadImageProcess ( url , successCallback , credentials , errorCallback ) ) ; } private static IEnumerator DownloadImageProcess ( string url , Action < Texture > successCallback , Credentials credentials , Action < UnityWebRequest > errorCallback ) { var www = UnityWebRequestTexture.GetTexture ( url ) ; if ( credentials ! = null ) { // This simply adds some headers to the request required for JIRA api // it is not relevant for this question AddCredentials ( www , credentials ) ; } yield return www.SendWebRequest ( ) ; if ( www.isNetworkError || www.isHttpError ) { Debug.LogErrorFormat ( `` Download from { 0 } failed with { 1 } '' , url , www.error ) ; errorCallback ? .Invoke ( www ) ; } else { Debug.LogFormat ( `` Download from { 0 } complete ! `` , url ) ; successCallback ? .Invoke ( ( ( DownloadHandlerTexture ) www.downloadHandler ) .texture ) ; } } public static void UploadFile ( byte [ ] rawData , string url , Action < UnityWebRequest > successcallback , Credentials credentials , Action < UnityWebRequest > errorCallback ) private static IEnumerator UploadFileProcess ( byte [ ] rawData , string url , Action < UnityWebRequest > successCallback , Credentials credentials , Action < UnityWebRequest > errorCallback ) { var form = new WWWForm ( ) ; form.AddBinaryData ( `` file '' , rawData , '' Test.png '' ) ; var www = UnityWebRequest.Post ( url , form ) ; www.SetRequestHeader ( `` Accept '' , `` application/json '' ) ; if ( credentials ! = null ) { // This simply adds some headers to the request required for JIRA api // it is not relevant for this question AddCredentials ( www , credentials ) ; } yield return www.SendWebRequest ( ) ; if ( www.isNetworkError || www.isHttpError ) { Debug.LogErrorFormat ( `` Upload to { 0 } failed with code { 1 } { 2 } '' , url , www.responseCode , www.error ) ; errorCallback ? .Invoke ( www ) ; } else { Debug.LogFormat ( `` Upload to { 0 } complete ! `` , url ) ; successCallback ? .Invoke ( www ) ; } } } public Texture TestTexture ; // Begin the downloadpublic void DownloadTestImage ( ) { _httpFileManager.DownloadImage ( ImageGetURL , DownloadImageSuccessCallback , _credentials ) ; } // After Download store the Textureprivate void DownloadImageSuccessCallback ( Texture newTexture ) { TestTexture = newTexture ; } // Start the uploadpublic void UploadTestImage ( ) { var data = ( ( Texture2D ) TestTexture ) .EncodeToPNG ( ) ; _httpFileManager.UploadFile ( data , ImagePostUrl , UploadSuccessCallback , _credentials ) ; } // After Uploadingprivate static void UploadSuccessCallback ( UnityWebRequest www ) { Debug.Log ( `` Upload worked ! `` ) ; } ( DownloadHandlerTexture ) www.downloadHandler ) .texture ( ( Texture2D ) TestTexture ) .EncodeToPNG ( ) ;"
< Entry Placeholder= '' focus this entry . '' VerticalOptions= '' Start '' Text = `` FOCUS THIS ! `` > < Entry.Effects > < effects : SelectAllTextEntryEffect / > < /Entry.Effects > < /Entry > < Style TargetType= '' Entry '' > < Setter Property= '' Keyboard '' Value= '' Text '' / > < ! -- Defaults to capitalize first word -- > < Setter Property= '' Effects '' Value= '' effects : SelectAllTextEntryEffect '' / > < /Style > Ca n't resolve EffectsProperty on Entry
_purchaseOrder.AmountIsNull += new DomainObject.InvalidDomainObjectEventHandler ( HandleDomainObjectEvent ) ; _purchaseOrder.NoReason += new DomainObject.InvalidDomainObjectEventHandler ( HandleDomainObjectEvent ) ; _purchaseOrder.NoSupplier += new DomainObject.InvalidDomainObjectEventHandler ( HandleDomainObjectEvent ) ; _purchaseOrder.BothNewAndExistingSupplier += new DomainObject.InvalidDomainObjectEventHandler ( HandleDomainObjectEvent ) ;
"private static AppDomain CreateSandbox ( ) { var permissions = new PermissionSet ( PermissionState.None ) ; permissions.AddPermission ( new SecurityPermission ( SecurityPermissionFlag.Execution ) ) ; permissions.AddPermission ( new FileIOPermission ( FileIOPermissionAccess.Read| FileIOPermissionAccess.PathDiscovery , AppDomain.CurrentDomain.BaseDirectory ) ) ; var appinfo = new AppDomainSetup ( ) ; appinfo.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory ; return AppDomain.CreateDomain ( `` Scripting sandbox '' , null , appinfo , permissions , fullTrustAssembly ) ; } try { var src = engine.CreateScriptSourceFromString ( s.Python , SourceCodeKind.Statements ) ; src.Execute ( ActionsScope ) ; } catch ( Exception e ) { ExceptionOperations eo = engine.GetService < ExceptionOperations > ( ) ; string error = eo.FormatException ( e ) ; Debug.WriteLine ( error ) ; } System.Security.SecurityException was caught Message=Request failed . Source=Microsoft.Scripting GrantedSet= < PermissionSet class= '' System.Security.PermissionSet '' version= '' 1 '' > < IPermission class= '' System.Security.Permissions.FileIOPermission , mscorlib , Version=4.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' version= '' 1 '' Read= '' F : \Programming\OCTGN\octgnFX\Octgn\bin\ReleaseMode with Debug\ '' PathDiscovery= '' F : \Programming\OCTGN\octgnFX\Octgn\bin\ReleaseMode with Debug\ '' / > < IPermission class= '' System.Security.Permissions.SecurityPermission , mscorlib , Version=4.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' version= '' 1 '' Flags= '' Execution '' / > < /PermissionSet > PermissionState= < PermissionSet class= '' System.Security.PermissionSet '' version= '' 1 '' Unrestricted= '' true '' / > RefusedSet= '' '' Url=file : ///F : /Programming/OCTGN/octgnFX/Octgn/bin/ReleaseMode with Debug/Microsoft.Scripting.DLL StackTrace : at Microsoft.Scripting.SyntaxErrorException.GetObjectData ( SerializationInfo info , StreamingContext context ) at System.Runtime.Serialization.ObjectCloneHelper.GetObjectData ( Object serObj , String & typeName , String & assemName , String [ ] & fieldNames , Object [ ] & fieldValues ) at Microsoft.Scripting.Hosting.ScriptSource.Execute ( ScriptScope scope ) at Octgn.Scripting.Engine.LoadScripts ( ) in F : \Programming\OCTGN\octgnFX\Octgn\Scripting\Engine.cs : line 58 InnerException :"
"struct MyStruct { private readonly int _value ; public MyStruct ( int val ) { this._value = val ; } public override bool Equals ( object obj ) { return false ; } public override int GetHashCode ( ) { return base.GetHashCode ( ) ; } public static bool operator == ( MyStruct a , MyStruct b ) { return false ; } public static bool operator ! = ( MyStruct a , MyStruct b ) { return false ; } } Expression < Func < MyStruct , MyStruct , bool > > exprA = ( valueA , valueB ) = > valueA == valueB ; Expression < Func < MyStruct ? , MyStruct ? , bool > > exprB = ( nullableValueA , nullableValueB ) = > nullableValueA == nullableValueB ; Expression < Func < MyStruct ? , MyStruct , bool > > exprC = ( nullableValueA , valueB ) = > nullableValueA == valueB ;"
"class Foo { ( int , int ) bar = ( 0 , 1 ) ; } class Foo { readonly ( int , int ) bar = ( 0 , 1 ) ; } class Foo { const ( int , int ) bar = ( 0 , 1 ) ; } class Foo { readonly ExampleStruct field ; void Method ( ) { field.structField = 2 ; } } struct ExampleStruct { public int structField ; }"
"public void Test ( ) { TestDisposable disposable = new TestDisposable ( ) ; using ( disposable ) { throw new Exception ( `` Test '' ) ; } } .method public hidebysig instance void Test ( ) cil managed { .maxstack 2 .locals init ( [ 0 ] class LVK.Reflection.Tests.UsingConstructTests/TestDisposable disposable , [ 1 ] class LVK.Reflection.Tests.UsingConstructTests/TestDisposable CS $ 3 $ 0000 , [ 2 ] bool CS $ 4 $ 0001 ) L_0000 : nop L_0001 : newobj instance void LVK.Reflection.Tests.UsingConstructTests/TestDisposable : :.ctor ( ) L_0006 : stloc.0 L_0007 : ldloc.0 L_0008 : stloc.1 L_0009 : nop L_000a : ldstr `` Test '' L_000f : newobj instance void [ mscorlib ] System.Exception : :.ctor ( string ) L_0014 : throw L_0015 : ldloc.1 L_0016 : ldnull L_0017 : ceq L_0019 : stloc.2 L_001a : ldloc.2 L_001b : brtrue.s L_0024 L_001d : ldloc.1 L_001e : callvirt instance void [ mscorlib ] System.IDisposable : :Dispose ( ) L_0023 : nop L_0024 : endfinally .try L_0009 to L_0015 finally handler L_0015 to L_0025 } foreach ( var method in interfaceType.GetMethods ( ) ) { ParameterInfo [ ] methodParameters = method.GetParameters ( ) ; var parameters = string.Join ( `` , `` , methodParameters .Select ( ( p , index ) = > p.Name + `` = { `` + index + `` } '' ) ) ; var signature = method.Name + `` ( `` + parameters + `` ) '' ; type.ImplementInterfaceMethod ( method ) .GetILGenerator ( ) // object [ ] temp = new object [ param-count ] .variable < object [ ] > ( ) // # 0 .ldc ( methodParameters.Length ) .newarr ( typeof ( object ) ) .stloc_0 ( ) // copy all parameter values into array .EmitFor ( Enumerable.Range ( 0 , methodParameters.Length ) , ( il , i ) = > il .ldloc_0 ( ) .ldc ( i ) .ldarg_opt ( i + 1 ) .EmitIf ( methodParameters [ i ] .ParameterType.IsValueType , a = > a .box ( methodParameters [ i ] .ParameterType ) ) .stelem ( typeof ( object ) ) ) // var x = _Logger.Scope ( LogLevel.Debug , signature , parameterArray ) .ld_this ( ) .ldfld ( loggerField ) .ldc ( LogLevel.Debug ) .ldstr ( signature ) .ldloc ( 0 ) .call_smart ( typeof ( ILogger ) .GetMethod ( `` Scope '' , new [ ] { typeof ( LogLevel ) , typeof ( string ) , typeof ( object [ ] ) } ) ) // using ( x ) { ... } .EmitUsing ( u = > u .ld_this ( ) .ldfld ( instanceField ) .ldargs ( Enumerable.Range ( 1 , methodParameters.Length ) .ToArray ( ) ) .call_smart ( method ) .EmitCatch < Exception > ( ( il , ex ) = > il .ld_this ( ) .ldfld ( loggerField ) .ldc ( LogLevel.Debug ) .ldloc ( ex ) .call_smart ( typeof ( ILogger ) .GetMethod ( `` LogException '' , new [ ] { typeof ( LogLevel ) , typeof ( Exception ) } ) ) ) ) .ret ( ) ; }"
"public static int Count < TSource > ( this IEnumerable < TSource > source ) ; namespace Test { public static class Extensions { public static int Count < TSource > ( this IEnumerable < TSource > source ) { return -1 ; //evil code } } //commented temporarily //public static class CommentedExtensions // { // public static int Count < TSource > ( this IEnumerable < TSource > source ) // { // return -2 ; //another evil code // } // } public static void Main ( string [ ] args ) { Console.WriteLine ( Enumerable.Range ( 0,10 ) .Count ( ) ) ; // -1 , evil code works Console.Read ( ) ; } } Enumerable.Count ( Enumerable.Range ( 0,10 ) ) MyExtension.Count ( Enumerable.Range ( 0,10 ) )"
"{ `` field1 '' : null , `` field2 '' : null } { `` field1 '' : null , } public class MyData { public string Field1 { get ; set ; } public string Field2 { get ; set ; } }"
"var dateFormat = new DateTime ( 2016 , 10 , 12 ) .ToString ( `` MMMM '' ) ; //Oktober"
"MetadataWorkspace workspace = new MetadataWorkspace ( new string [ ] { `` res : //*/ '' } , new Assembly [ ] { Assembly.GetExecutingAssembly ( ) } ) ; using ( var scope = new TransactionScope ( ) ) using ( var conn = DatabaseUtil.GetConnection ( ) ) using ( EntityConnection entityConnection = new EntityConnection ( workspace , ( DbConnection ) conn ) ) using ( var db = new UniversalModelEntities ( entityConnection ) ) { //Do EF things //Call other SQL commands return db.SaveChanges ( ) ; }"
myGrid.ManipulationMode = ManipulationModes.TranslateX | ManipulationModes.TranslateY ; < Grid Style= '' { StaticResource LayoutRootStyle } '' ManipulationMode= '' TranslateY '' ManipulationCompleted= '' manipulationCompleted '' > < Grid.ManipulationMode > < ManipulationModes > TranslateX < /ManipulationModes > < ManipulationModes > TranslateY < /ManipulationModes > < /Grid.ManipulationMode >
long valueCast = ( long ) ( 10 + intVariable ) ; long valueTyped = 10L + intVariable ;
< Method name= '' A '' > < Method name= '' B '' params= '' ( int ) 7 '' > < Method name= '' C '' params= '' ( string ) 'something ' '' / > < /Method > < /Method > < Method name= '' A '' > < Method name= '' B '' params= '' ( int ) 7 '' > < Params > < int > 7 < /int > < /Params > < Method name= '' C '' > < Params > < string > something < /string > < /Params > < /Method > < /Method > < /Method >
"[ TestMethod ] public async Task GetGroups_Succeeds ( ) { var controller = new GroupsController ( _groupsLoggerMock.Object , _uowRunnerMock.Object , _repoFactoryMock.Object ) ; var groups = await controller.GetGroups ( ) ; Assert.IsNotNull ( groups ) ; } [ TestMethod ] public void GetGroups_Succeeds ( ) { HttpClient.Execute ( ) ; dynamic obj = JsonConvert.DeserializeObject < dynamic > ( HttpClient.ResponseContent ) ; Assert.AreEqual ( 200 , HttpClient.ResponseStatusCode ) ; Assert.AreEqual ( `` OK '' , HttpClient.ResponseStatusMsg ) ; string groupid = obj [ 0 ] .id ; string name = obj [ 0 ] .name ; string usercount = obj [ 0 ] .userCount ; string participantsjson = obj [ 0 ] .participantsJson ; Assert.IsNotNull ( name ) ; Assert.IsNotNull ( usercount ) ; Assert.IsNotNull ( participantsjson ) ; }"
[ HttpPost ( `` open '' ) ] public IActionResult OpenInspections ( [ FromBody ] IEnumerable < int > inspectionIds ) { return NoContent ( ) ; // ...
"var numbers = Enumerable.Range ( 0 , 20 ) ; var parallelResult = numbers.AsParallel ( ) .AsOrdered ( ) .Where ( i = > i % 2 == 0 ) .AsSequential ( ) ; foreach ( int i in parallelResult.Take ( 5 ) ) Console.WriteLine ( i ) ;"
"SecureString ( Char* , int32 )"
public interface IRepository < T > { IEnumerable < T > FindAll ( ) ; IEnumerable < T > FindById ( int id ) ; IEnumerable < T > FindBy < A > ( A type ) ; } public IEnumerable < SomeClass > FindBy < A > ( A type ) { return _context.Set < SomeClass > ( ) .Where ( x = > x . == type ) ; // I was hoping to do x.type and it would use the same variable to search . } public IDbSet < TEntity > Set < TEntity > ( ) where TEntity : class { return base.Set < TEntity > ( ) ; }
"public partial class MainPage : ContentPage { void OnPurchased ( object sender , EventArgs e ) { InAppBilling ( ) ; } async void InAppBilling ( ) { try { var productId = `` xxxxx.xxxx_appbilling '' ; var connected = await CrossInAppBilling.Current.ConnectAsync ( ) ; if ( ! connected ) { //Could n't connect to billing , could be offline , alert user return ; } //try to purchase item var purchase = await CrossInAppBilling.Current.PurchaseAsync ( productId , ItemType.InAppPurchase , `` apppayload '' ) ; if ( purchase == null ) { //Not purchased , alert the user } else { //Purchased , save this information var id = purchase.Id ; var token = purchase.PurchaseToken ; var state = purchase.State ; } } catch ( Exception ex ) { //Something bad has occurred , alert user } finally { //Disconnect , it is okay if we never connected await CrossInAppBilling.Current.DisconnectAsync ( ) ; } } } public class MainActivity : global : :Xamarin.Forms.Platform.Android.FormsAppCompatActivity { protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base.OnActivityResult ( requestCode , resultCode , data ) ; InAppBillingImplementation.HandleActivityResult ( requestCode , resultCode , data ) ; } }"
"public string GenerateURLFromModel ( string action , string controller ) { HttpContextWrapper wrapper = new HttpContextWrapper ( HttpContext.Current ) ; Uri url = HttpContext.Current.Request.Url ; UrlHelper urlHelper = new UrlHelper ( new RequestContext ( wrapper , RouteTable.Routes.GetRouteData ( wrapper ) ) ) ; return url.AbsoluteUri.Replace ( url.PathAndQuery , urlHelper.Action ( action , controller ) ) ; }"
"public class Question { public Guid ID { get ; set ; } public int Number { get ; set ; } public QuestionType Type { get ; set ; } public string Content { get ; set ; } public Section Section { get ; set ; } public IList < Answer > Answers { get ; set ; } } < div > [ Content ] < /div > < div > < input type= '' [ Depends on QuestionType property ] '' / > [ Answer Value ] < input type= '' [ Depends on QuestionType property ] '' / > [ Answer Value ] < input type= '' [ Depends on QuestionType property ] '' / > [ Answer Value ] ... < /div > public interface IQuestionRenderer { string RenderHtml ( Question question ) ; } public class MultipleChoiceQuestionRenderer : IQuestionRenderer { # region IQuestionRenderer Members public string RenderHtml ( Question question ) { var wrapper = new HtmlGenericControl ( `` div '' ) ; wrapper.ID = question.ID.ToString ( ) ; wrapper.Attributes.Add ( `` class '' , `` question-wrapper '' ) ; var content = new HtmlGenericControl ( `` div '' ) ; content.Attributes.Add ( `` class '' , `` question-content '' ) ; content.InnerHtml = question.Content ; wrapper.Controls.Add ( content ) ; var answers = new HtmlGenericControl ( `` div '' ) ; answers.Attributes.Add ( `` class '' , `` question-answers '' ) ; wrapper.Controls.Add ( answers ) ; foreach ( var answer in question.Answers ) { var answerLabel = new HtmlGenericControl ( `` label '' ) ; answerLabel.Attributes.Add ( `` for '' , answer.ID.ToString ( ) ) ; answers.Controls.Add ( answerLabel ) ; var answerTag = new HtmlInputRadioButton ( ) ; answerTag.ID = answer.ID.ToString ( ) ; answerTag.Name = question.ID.ToString ( ) ; answer.Value = answer.ID.ToString ( ) ; answerLabel.Controls.Add ( answerTag ) ; var answerValue = new HtmlGenericControl ( ) ; answerValue.InnerHtml = answer.Value + `` < br/ > '' ; answerLabel.Controls.Add ( answerValue ) ; } var stringWriter = new StringWriter ( ) ; var htmlWriter = new HtmlTextWriter ( stringWriter ) ; wrapper.RenderControl ( htmlWriter ) ; return stringWriter.ToString ( ) ; } # endregion } public class Question { private Dictionary < QuestionType , IQuestionRenderer > _renderers = new Dictionary < QuestionType , IQuestionRenderer > { { QuestionType.MultipleChoice , new MultipleChoiceQuestionRenderer ( ) } } ; public Guid ID { get ; set ; } public int Number { get ; set ; } public QuestionType Type { get ; set ; } public string Content { get ; set ; } public Section Section { get ; set ; } public IList < Answer > Answers { get ; set ; } public string RenderHtml ( ) { var renderer = _renderers [ Type ] ; return renderer.RenderHtml ( this ) ; } }"
"public object RetrieveById ( int Id ) { //stuff happens ... Contract.Ensures ( newObject ! = null , `` object must not be null '' ) ; return newProject ; //No error message if I move the Contract.Ensures to here //But it is n't asserting/throwing a contract exception here either }"
"var result = query.Where ( item = > item.Name == `` Soap '' ) var item = Expression.Parameter ( typeof ( Item ) , `` item '' ) ; var prop = Expression.Property ( item , `` Name '' ) ; var soap = Expression.Constant ( `` Soap '' ) ; var equal = Expression.Equal ( prop , soap ) ; var lambda = Expression.Lambda < Func < Item , bool > > ( equal , item ) ; var result = queryableData.Where ( lambda ) ; var result = query.Where ( item = > item.Data.Name == `` Soap '' ) ."
IQueryable query = getIQueryableSomehow ( ) ; Predicate = PredicateBuilder.False < SomeType > ( ) ; foreach ( SomeOtherType t in inputEnumerable ) { Predicate = Predicate.Or ( x = > x.ListInSomeType.Contains ( t ) ) } var results = query.Where ( Predicate ) ;
0 `` name 1 '' 1 `` name 2 '' 2 `` name 3 '' 0 `` name 1 '' 2 `` name 3 ''
"BitArray bitArray =new BitArray ( new bool [ ] { true , true , false , false , false , false , false , false } ) ; new byte [ ] { ConvertToByte ( bitArray ) } ) private static byte ConvertToByte ( BitArray bits ) // http : //stackoverflow.com/questions/560123/convert-from-bitarray-to-byte { if ( bits.Count ! = 8 ) { throw new ArgumentException ( `` incorrect number of bits '' ) ; } byte [ ] bytes = new byte [ 1 ] ; bits.CopyTo ( bytes , 0 ) ; return bytes [ 0 ] ; } [ Flags ] public enum EventMessageTypes { None = 0 , aaa = 1 , bbb = 2 , ccc = 4 , ddd = 8 , eee = 16 , fff = 32 , All = aaa | bbb | ccc | ddd | eee | fff // All Events } // Do bitwise OR to combine the values we want EventMessageTypes eventMessages = EventMessageTypes.aaa | EventMessageTypes.bbb | EventMessageTypes.ccc ;"
"CLASS | TABLE | TYPE -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- + -- -- -- BaseEntity ( abstract ) | BaseTable |Inherited_TPH | BaseTable | 1Inherited_TPT | Inherited_TPT | 2 class MyContext : DbContext { public MyContext ( string connectionString ) : base ( connectionString ) { } public DbSet < Inherited_TPH > TPH_Set { get ; set ; } public DbSet < Inherited_TPT > TPT_Set { get ; set ; } public DbSet < SomethingElse > Another_Set { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder .Entity < BaseEntity > ( ) .ToTable ( `` BaseTable '' ) ; modelBuilder .Entity < Inherited_TPH > ( ) .Map ( t = > t.Requires ( `` Type '' ) .HasValue ( 1 ) ) ; modelBuilder .Entity < Intermediate_TPT > ( ) .Map ( t = > t.Requires ( `` Type '' ) .HasValue ( 2 ) ) ; modelBuilder .Entity < Intermediate_TPT > ( ) .Map < Inherited_TPT > ( t = > t.ToTable ( `` Inherited_TPT '' ) ) ; modelBuilder .Entity < SomethingElse > ( ) .ToTable ( `` SomethingElse '' ) .HasKey ( t = > t.Id ) ; } } public abstract class BaseEntity { public virtual int Id { get ; set ; } public virtual string Title { get ; set ; } } public class Inherited_TPH : BaseEntity { } public abstract class Intermediate_TPT : BaseEntity { } public class Inherited_TPT : Intermediate_TPT { public virtual string Comment { get ; set ; } } public class SomethingElse { public virtual string Description { get ; set ; } public virtual int Id { get ; set ; } } static void Main ( string [ ] args ) { Database.SetInitializer < MyContext > ( null ) ; var ctx = new MyContext ( @ '' Data Source= ( local ) ; Initial Catalog=nh_ef ; Integrated Security=true '' ) ; try { // Accessing Inherited_TPH works just fine foreach ( var item in ctx.TPH_Set ) Console.WriteLine ( `` { 0 } : { 1 } '' , item.Id , item.Title ) ; // Accessing Inherited_TPT works just fine foreach ( var item in ctx.TPT_Set ) Console.WriteLine ( `` { 0 } : { 1 } ( { 2 } ) '' , item.Id , item.Title , item.Comment ) ; // The rror occurs when accessing ANOTHER entity : foreach ( var item in ctx.Another_Set ) Console.WriteLine ( `` { 0 } : { 1 } '' , item.Id , item.Description ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; if ( ex.InnerException ! = null ) { Console.WriteLine ( ex.InnerException.Message ) ; } } }"
"< ListView ItemsSource= '' { Binding ... } '' Margin= '' 0 , 0 , 0 , 0 '' > ... < ListView.ItemTemplate > < DataTemplate > < local : MyUserControl/ > < /DataTemplate > < /ListView.ItemTemplate > < /ListView > private bool isDescriptionVisible = false ; private void Grid_Holding ( object sender , HoldingRoutedEventArgs e ) { if ( ! isDescriptionVisible ) { DescriptionFadeIn.Begin ( ) ; isDescriptionVisible = true ; } } private void Grid_Tapped ( object sender , TappedRoutedEventArgs e ) { if ( isDescriptionVisible ) { DescriptionFadeOut.Begin ( ) ; isDescriptionVisible = false ; } } < Grid.Resources > < Storyboard x : Name= '' FadeIn '' > < DoubleAnimation Storyboard.TargetProperty= '' Opacity '' Storyboard.TargetName= '' DescriptionLayer '' Duration= '' 0:0:0.3 '' To= '' .8 '' / > < /Storyboard > < Storyboard x : Name= '' FadeOut '' > < DoubleAnimation Storyboard.TargetProperty= '' Opacity '' Storyboard.TargetName= '' DescriptionLayer '' Duration= '' 0:0:0.3 '' To= '' 0 '' / > < /Storyboard > < /Grid.Resources > < Grid Margin= '' 0 , 0 , 0 , 48 '' Holding= '' Grid_Holding '' Tapped= '' Grid_Tapped '' > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' 1* '' / > < /Grid.RowDefinitions > < Image Source= '' { Binding Img } '' Stretch= '' UniformToFill '' Height= '' 240 '' Width= '' 450 '' / > < Grid x : Name= '' DescriptionLayer '' Background= '' Black '' Opacity= '' 0 '' > < TextBlock Text= '' { Binding Description } '' FontSize= '' 16 '' TextWrapping= '' Wrap '' Margin= '' 0 , 9 , 0 , 0 '' MaxHeight= '' 170 '' TextTrimming= '' CharacterEllipsis '' / > < /Grid > < StackPanel Grid.Row= '' 1 '' Margin= '' 12 '' > < TextBlock Text= '' { Binding Author } '' FontSize= '' 16 '' / > < TextBlock Text= '' { Binding Title } '' FontSize= '' 18 '' / > < /StackPanel > < /Grid > < ItemsControl.ItemsPanel > < ItemsPanelTemplate > < VirtualizingStackPanel/ > < /ItemsPanelTemplate > < /ItemsControl.ItemsPanel >"
"[ Flags ] public enum Types { None = 0 , Alarm = 1 , Exit = 2 , Panic = 4 , Fire = 8 , Tamper = 16 , Key = 32 , Line = 64 , FTC = 128 , Unused = 256 , tech_1 = 512 , // ... tech_2 through _7 omitted for brevity tech_8 = 65536 , fire_1 = 131072 , // ... fire_2 through _11 omitted for brevity fire_12 = 268435456 , Key = 536870912 , Exit = 1073741824 , Gas = 2147483648 , // Can not convert source type uint to target type int }"
"public class MyAuthMiddleware { private readonly RequestDelegate _next ; public MyAuthMiddleware ( RequestDelegate next ) { _next = next ; } public async Task Invoke ( HttpContext httpContext ) { var claims = new List < Claim > { new Claim ( `` userId '' , `` 22222222 '' ) } ; ClaimsIdentity userIdentity = new ClaimsIdentity ( claims , '' MyAuthenticationType '' ) ; ClaimsPrincipal principal = new ClaimsPrincipal ( userIdentity ) ; httpContext.User = principal ; await _next ( httpContext ) ; } } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { //app.UseAuthentication ( ) ; //removed it . I will set the thread manually if ( env.IsDevelopment ( ) ) app.UseDeveloperExceptionPage ( ) ; app.UseMyAuthMiddleware ( ) ; // < -- -- -- -- -- Myne app.UseMvc ( ) ; app.Run ( async context = > { await context.Response.WriteAsync ( `` Hello World ! `` ) ; } ) ; } [ HttpGet ] [ Route ( `` data '' ) ] [ Authorize ] public IActionResult GetData ( ) { var a=User.Claims.First ( f = > f.Type == `` userId '' ) ; return new JsonResult ( new List < string > { `` a '' , `` b '' , a.ToString ( ) , User.Identity.AuthenticationType } ) ; } //httpContext.User = principal ; // line is remarked http : //localhost:5330/api/cities/data http : //localhost:5330/Account/Login ? ReturnUrl= % 2Fapi % 2Fcities % 2Fdata public void ConfigureServices ( IServiceCollection services ) { services.AddAuthentication ( CookieAuthenticationDefaults.AuthenticationScheme ) .AddCookie ( CookieAuthenticationDefaults.AuthenticationScheme , a = > { a.LoginPath = `` '' ; a.Cookie.Name = `` myCookie '' ; } ) ; services.AddMvc ( ) ; }"
"public interface IEditor < T > where T : SpecialObject public class View : IEditor < Person > Boolean isEditor = View is IEditor < SpecialObject > void Closing ( object sender , MyEventArgs e ) { if ( e.Item is IView ) { // DO some closing tasks if ( e.Item is IEditor < SpecialObject > ) // always false { // Do some special tasks var editor = e.Item as IEditor < SpecialObject > ; var storedEditObect = editor.StoredObject ; // more tasks } } else if ( e.Item is ISomeOtherView ) { } }"
var something = obj as MyClass ; val something = obj.asInstanceOf [ MyClass ]
"CREATE TABLE CommonEntityGroup ( Id INT NOT NULL IDENTITY ( 1 , 1 ) PRIMARY KEY , Name NVARCHAR ( 100 ) NOT NULL ) ; GOCREATE UNIQUE INDEX IX_CommonEntityGroup_Name ON CommonEntityGroup ( Name ) GOCREATE TABLE CommonEntity ( Id INT NOT NULL IDENTITY ( 1 , 1 ) PRIMARY KEY , Name NVARCHAR ( 100 ) NOT NULL , CommonEntityGroupId INT NOT NULL , CONSTRAINT FK_CommonEntity_CommonEntityGroup FOREIGN KEY ( CommonEntityGroupId ) REFERENCES CommonEntityGroup ( Id ) ) ; GOCREATE UNIQUE INDEX IX_CommonEntity_CommonEntityGroupId_Name ON CommonEntity ( CommonEntityGroupId , Name ) GO public class CommonEntityGroupRepository // sort of { public CommonEntityGroupRepository ( EntitiesDbContext db ) ... // CommonEntityRepository will use this class/method internally to create parent CommonEntityGroup . public CommonEntityGroup FindOrCreateAndSave ( String groupName ) { return this.TryFind ( groupName ) ? ? // db.FirstOrDefault ( ... ) this.CreateAndSave ( groupName ) ; } private CommonEntityGroup CreateAndSave ( String groupName ) { var group = this.Db.CommonEntityGroups.Create ( ) ; group.Name = groupName ; this.Db.CommonGroups.Add ( group ) try { this.Db.SaveChanges ( ) ; return group ; } catch ( DbUpdateException dbExc ) { // Check that it was Name Index violation ( perhaps make indices IGNORE_DUP_KEY ) return this.Find ( groupName ) ; // TryFind that throws exception . } } }"
public class SalesOrder { public Int32 OrderID { get ; set ; } public DateTime Expiration { get ; set ; } } DateTime utcnow = DateTime.UtcNow ; var open = ( from a in context.SalesOrders where a.Expiration > utcnow select a ) .ToList ( ) ; var open = ( from a in context.SalesOrders where a.Expiration > DateTime.UtcNow select a ) .ToList ( ) ;
"namespace Ofl.Net.Http { public interface IHttpClientFactory { Task < HttpClient > CreateAsync ( HttpMessageHandler handler , bool disposeHandler , CancellationToken cancellationToken ) ; } } private class HttpClientFactory : IHttpClientFactory { # region Implementation of IHttpClientFactory public Task < HttpClient > CreateAsync ( HttpMessageHandler handler , bool disposeHandler , CancellationToken cancellationToken ) { // Return a new client . return Task.FromResult ( new HttpClient ( ) ) ; } # endregion } [ Fact ] public async Task Test_CreateAsync_Interface_Async ( ) { // Cancellation token . CancellationToken cancellationToken = CancellationToken.None ; // The client factory . IHttpClientFactory factory = new HttpClientFactory ( ) ; // Not null . Assert.NotNull ( factory ) ; // Create client . HttpClient client = await factory.CreateAsync ( null , true , cancellationToken ) .ConfigureAwait ( false ) ; // Not null . Assert.NotNull ( client ) ; } [ Fact ] public async Task Test_CreateAsync_Concrete_Async ( ) { // Cancellation token . CancellationToken cancellationToken = CancellationToken.None ; // The client factory . var factory = new HttpClientFactory ( ) ; // Not null . Assert.NotNull ( factory ) ; // Create client . HttpClient client = await factory.CreateAsync ( null , true , cancellationToken ) .ConfigureAwait ( false ) ; // Not null . Assert.NotNull ( client ) ; } System.TypeLoadException : Method 'CreateAsync ' in type 'HttpClientFactory ' from assembly 'Ofl.Net.Http.Abstractions.Tests , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=null ' does not have an implementation . at Ofl.Net.Http.Abstractions.Tests.HttpClientFactoryTests. < Test_CreateAsync_Interface_Async > d__1.MoveNext ( ) at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start [ TStateMachine ] ( TStateMachine & stateMachine ) at Ofl.Net.Http.Abstractions.Tests.HttpClientFactoryTests.Test_CreateAsync_Interface_Async ( )"
"public string GenerateSomeSql ( Expression < Func < TResult , TProperty > > expression ) GenerateSomeSql ( x = > x.Age ) //suppose this will always return `` select Age from Person '' GenerateSomeSql ( x = > x.Ssn ) //suppose this will always return `` select Ssn from Person ''"
MyPerson mp = new MyPerson ( ) ; //Field int g=0 ; //Field public void DoWork ( ) { int i ; MyPerson mp2 = new MyPerson ( ) ; ... }
using System.IO ; namespace TestWipeFolder { internal class Program { private static void Main ( string [ ] args ) { var di = new DirectoryInfo ( @ '' C : \foo\bar\baz '' ) ; if ( di.Exists ) { di.Delete ( true ) ; } // This does n't work . C : \foo\bar is still there but it does n't remake baz . di.Create ( ) ; } } }
private String GetNewAvailableId ( ) { String newId = Guid.NewGuid ( ) .ToString ( ) ; while ( clientsById.ContainsKey ( newId ) ) { newId = Guid.NewGuid ( ) .ToString ( ) ; } return newId ; }
"System.Runtime.Serialization.SerializationException Assembly 'EntityFrameworkDynamicProxies-Marriott.emergePortal.Common , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=null ' is not found . System.Web.HttpException ( 0x80004005 ) : Exception of type 'System.Web.HttpException ' was thrown . -- - > System.Runtime.Serialization.SerializatioFnException : Assembly 'EntityFrameworkDynamicProxies-Marriott.emergePortal.Common , Version=1.0.0.0 , Culture=neutral , PublicKeyToken=null ' is not found . at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserializeInSharedTypeMode ( XmlReaderDelegator xmlReader , Int32 declaredTypeID , Type declaredType , String name , String ns ) at ReadArrayOfPropertyEnrollmentFromXml ( XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString , XmlDictionaryString , CollectionDataContract ) at System.Runtime.Serialization.CollectionDataContract.ReadXmlValue ( XmlReaderDelegator xmlReader , XmlObjectSerializerReadContext context ) at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserializeInSharedTypeMode ( XmlReaderDelegator xmlReader , Int32 declaredTypeID , Type declaredType , String name , String ns ) at ReadArrayOfPropertyEnrollmentFromXml ( XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString [ ] , XmlDictionaryString [ ] ) at System.Runtime.Serialization.ClassDataContract.ReadXmlValue ( XmlReaderDelegator xmlReader , XmlObjectSerializerReadContext context ) at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserializeInSharedTypeMode ( XmlReaderDelegator xmlReader , Int32 declaredTypeID , Type declaredType , String name , String ns ) at ReadArrayOfanyTypeFromXml ( XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString , XmlDictionaryString , CollectionDataContract ) at System.Runtime.Serialization.CollectionDataContract.ReadXmlValue ( XmlReaderDelegator xmlReader , XmlObjectSerializerReadContext context ) at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserializeInSharedTypeMode ( XmlReaderDelegator xmlReader , Int32 declaredTypeID , Type declaredType , String name , String ns ) at ReadSerializableSessionStateStoreDataFromXml ( XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString [ ] , XmlDictionaryString [ ] ) at System.Runtime.Serialization.ClassDataContract.ReadXmlValue ( XmlReaderDelegator xmlReader , XmlObjectSerializerReadContext context ) at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserializeInSharedTypeMode ( XmlReaderDelegator xmlReader , Int32 declaredTypeID , Type declaredType , String name , String ns ) at System.Runtime.Serialization.XmlObjectSerializerReadContextComplex.InternalDeserialize ( XmlReaderDelegator xmlReader , Type declaredType , String name , String ns ) at System.Runtime.Serialization.NetDataContractSerializer.InternalReadObject ( XmlReaderDelegator xmlReader , Boolean verifyObjectName ) at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions ( XmlReaderDelegator reader , Boolean verifyObjectName , DataContractResolver dataContractResolver ) at System.Runtime.Serialization.XmlObjectSerializer.ReadObject ( XmlDictionaryReader reader ) at Microsoft.ApplicationServer.Caching.NetDataContractCacheObjectSerializer.Deserialize ( Stream stream ) at Microsoft.ApplicationServer.Caching.DataCacheObjectSerializationProvider.DeserializeUserObject ( Byte [ ] [ ] serializedData , ValueFlagsVersion flagsType ) at Microsoft.ApplicationServer.Caching.SocketClientProtocol.GetAndLock ( String key , TimeSpan timeout , DataCacheLockHandle & lockHandle , String region , Boolean lockKey , IMonitoringListener listener ) at Microsoft.ApplicationServer.Caching.DataCache. < > c__DisplayClass8a. < GetAndLock > b__89 ( ) at Microsoft.ApplicationServer.Caching.DataCache.GetAndLock ( String key , TimeSpan timeout , DataCacheLockHandle & lockHandle ) at Microsoft.Web.DistributedCache.DataCacheForwarderBase. < > c__DisplayClass31 ` 1. < PerformCacheOperation > b__30 ( ) at Microsoft.Web.DistributedCache.DataCacheRetryWrapper.PerformCacheOperation ( Action action ) at Microsoft.Web.DistributedCache.DataCacheForwarderBase.GetAndLock ( String key , TimeSpan timeout , DataCacheLockHandle & lockHandle ) at Microsoft.Web.DistributedCache.BlobBasedSessionStoreProvider.GetItem ( HttpContextBase context , String id , Boolean acquireWriteLock , Boolean & locked , TimeSpan & lockAge , Object & lockId , SessionStateActions & actions ) at Microsoft.Web.DistributedCache.DistributedCacheSessionStateStoreProvider.GetItemExclusive ( HttpContext context , String id , Boolean & locked , TimeSpan & lockAge , Object & lockId , SessionStateActions & actions ) at System.Web.SessionState.SessionStateModule.GetSessionStateItem ( ) at System.Web.SessionState.SessionStateModule.PollLockedSessionCallback ( Object state ) at System.Web.SessionState.SessionStateModule.EndAcquireState ( IAsyncResult ar ) at System.Web.HttpApplication.AsyncEventExecutionStep.OnAsyncEventCompletion ( IAsyncResult ar )"
private void AllowOtherSelectors ( bool value ) { foreach ( var c in this.Parent.Controls ) { if ( c == this ) continue ; if ( ! ( c is RoundGroupedSelector ) ) continue ; var rgs = c as RoundGroupedSelector ; rgs.AllowMultiple = value ; } }
"private MemoryStream GetZip ( ) { ZipFile zip = new ZipFile ( ) ; List < string , string > files = getFiles ( ) ; zip.AddEntry ( `` xyz-Header.csv '' , getHeader ( files ) ) ; zip.AddEntry ( `` xyz-Summary '' , getSummary ( files ) ) ; foreach ( var x in files ) { zip.AddEntry ( `` xyz- '' + x.Item1 + `` .csv '' , x.Item2 ) ; } MemoryStream memoryStream = new MemoryStream ( ) ; zip.Save ( memoryStream ) ; memoryStream.position = 0 ; return memoryStream ; }"
"if ( obj is byte || obj is int || obj is long || obj is decimal || obj is double || obj is float ) if ( obj is byte , int , long )"
// visual studio 2008 hides lines that have this char literally ( bug in visual studio ? ! ? ) so i wrote it 's unicode instead.char specialChar = ( char ) 10781 ; string specialString = specialChar.ToString ( ) ; // prints 1Console.WriteLine ( specialString.Length ) ; // prints 10781Console.WriteLine ( ( int ) specialChar ) ; // prints falseConsole.WriteLine ( string.Empty.StartsWith ( `` A '' ) ) ; // both prints true WTF ? ! ? Console.WriteLine ( string.Empty.StartsWith ( specialString ) ) ; Console.WriteLine ( string.Empty.StartsWith ( ( ( char ) 10781 ) .ToString ( ) ) ) ;
object myObj = `` abc '' ; string myStr = ( string ) myObj ;
"[ Serializable ] public interface IDesignTimeQueryProcessing { public string ConnectionString { get ; } ... } var userAssembly = Assembly.LoadFrom ( GetAssemblyPath ( userProject ) ) ; IQueryFirst_TargetProject iqftp = ( IQueryFirst_TargetProject ) Activator.CreateInstance ( userAssembly.GetType ( typeName.Value ) ) ; AppDomain ad = AppDomain.CreateDomain ( `` tmpDomain '' , null , new AppDomainSetup { ApplicationBase = Path.GetDirectoryName ( targetAssembly ) } ) ; byte [ ] assemblyBytes = File.ReadAllBytes ( targetAssembly ) ; var userAssembly = ad.Load ( assemblyBytes ) ; AppDomain ad = AppDomain.CreateDomain ( `` tmpDomain '' , null , new AppDomainSetup { ApplicationBase = Path.GetDirectoryName ( targetAssembly ) } ) ; IQueryFirst_TargetProject iqftp = ( IQueryFirst_TargetProject ) ad.CreateInstanceFromAndUnwrap ( targetAssembly , typeName.Value ) ;"
"< phone : PanoramaItem Header= '' { Binding Path=LocalizedResources.SavedGamesHeader , Source= { StaticResource LocalizedStrings } } '' Orientation= '' Horizontal '' > < phone : LongListSelector Margin= '' 0,0 , -22,2 '' ItemsSource= '' { Binding SavedGames } '' > < phone : LongListSelector.ItemTemplate > < DataTemplate > < StackPanel Orientation= '' Vertical '' Margin= '' 12,2,0,20 '' Width= '' 432 '' > < toolkit : ContextMenuService.ContextMenu > < toolkit : ContextMenu > < toolkit : MenuItem Header= '' Remove '' Click= '' RemoveSave_OnClick '' / > < /toolkit : ContextMenu > < /toolkit : ContextMenuService.ContextMenu > < Image Margin= '' 10,5,10,0 '' Height= '' 173 '' Width= '' 248 '' Source= '' { Binding Screen } '' Stretch= '' Fill '' HorizontalAlignment= '' Left '' > < /Image > < StackPanel Width= '' 311 '' Margin= '' 8,5,0,0 '' HorizontalAlignment= '' Left '' > < TextBlock Tap= '' Save_OnTap '' Tag= '' { Binding SavedGame } '' Text= '' { Binding SaveName } '' TextWrapping= '' Wrap '' Margin= '' 10,0 '' Style= '' { StaticResource PhoneTextExtraLargeStyle } '' FontSize= '' { StaticResource PhoneFontSizeMedium } '' Foreground= '' White '' FontWeight= '' Bold '' FontFamily= '' Arial Black '' HorizontalAlignment= '' Left '' / > < TextBlock Text= '' { Binding GameName } '' TextWrapping= '' Wrap '' Margin= '' 10 , -2,10,0 '' Style= '' { StaticResource PhoneTextSubtleStyle } '' HorizontalAlignment= '' Left '' / > < StackPanel Orientation= '' Horizontal '' HorizontalAlignment= '' Left '' > < TextBlock Text= '' Created on : '' Margin= '' 10 , -2,10,0 '' Style= '' { StaticResource PhoneTextSubtleStyle } '' / > < TextBlock Text= '' { Binding Created } '' TextWrapping= '' Wrap '' Margin= '' 5 , -2,10,0 '' Style= '' { StaticResource PhoneTextSubtleStyle } '' / > < /StackPanel > < /StackPanel > < /StackPanel > < /DataTemplate > < /phone : LongListSelector.ItemTemplate > < /phone : LongListSelector > < /phone : PanoramaItem > private void RemoveSave_OnClick ( object sender , RoutedEventArgs e ) { var menuItem = ( MenuItem ) sender ; var saveViewModel = menuItem.DataContext as SavesViewModel ; EmuStorageMgr.Instance.DeleteSave ( saveViewModel.SavedGame.SaveFolder ) ; App.ViewModel.RescanSaves ( ) ; } public ObservableCollection < SavesViewModel > SavedGames { get ; private set ; } public void RescanSaves ( ) { SavedGames.Clear ( ) ; var saves = EmuStorageMgr.Instance.GetSaves ( ) ; foreach ( var save in saves ) { SavedGames.Add ( new SavesViewModel ( save ) ) ; } this.IsSavesLoaded = true ; NotifyPropertyChanged ( `` SavedGames '' ) ; }"
"public interface MyInterface { int Property1 { get ; } void Method1 ( ) ; void Method2 ( ) ; } public interface MyInterface { int Property1 { get ; } explicit void Method1 ( ) ; explicit void Method2 ( ) ; } public interface IMovable { MovableComponent MovableComponent { get ; } } public struct MovableComponent { private Vector2 position ; private Vector2 velocity ; private Vector2 acceleration ; public int Method1 ( ) { // Implementation } public int Method2 ( ) { // Implementation } } public static IMovableExtensions { public static void Method1 ( this IMovable movableObject ) { movableObject.MovableComponent.Method1 ( ) ; } public static void Method2 ( this IMovable movableObject ) { movableObject.MovableComponent.Method2 ( ) ; } } public class MovableObject : IMovable { private readonly MovableComponent movableComponent = new MovableComponent ( ) ; public MovableComponent MovableComponent { get { return movableComponent ; } // Preferably hiddem , all it 's methods are available through extension methods . } } class Program { static void Main ( string [ ] args ) { MovableObject movableObject = new MovableObject ( ) ; movableObject.Method1 ( ) ; // Extension method movableObject.Method2 ( ) ; // Extension method movableObject.MovableComponent // Should preferably be hidden . } }"
"private void treeView1_DragOver ( object sender , DragEventArgs e ) { TreeNode tNode = FindNodeAtPoint ( e.X , e.Y ) ; } private TreeNode FindNodeAtPoint ( int x , int y ) { Point p = new Point ( x , y ) ; p = PointToClient ( p ) ; ... ... ... ... ... . ... ... ... ... ... . ... ... ... ... ... . }"
"So , if user provides1000 I will display 1,0001000.00 = > 1,000.001000.0 = > 1,000.01,000.5 = > 1,000.5 String.Format ( `` { 0 : # ,0. # # # # # # } '' , Decimal.Parse ( input ) ) ; String.Format ( `` { 0 : # ,0. # # # # # # } '' , Double.Parse ( input ) ;"
[ TypeConverter ( typeof ( ExpandableObjectConverter ) ) ] public class TestClass1 { public TestClass2 TestProperty1 { get ; } = new TestClass2 ( ) ; } [ TypeConverter ( typeof ( ExpandableObjectConverter ) ) ] public sealed class TestClass2 { [ TypeConverter ( typeof ( CollectionConverter ) ) ] public ReadOnlyCollection < TestClass3 > TestProperty2 { get { List < TestClass3 > collection = new List < TestClass3 > ( ) ; for ( int i = 0 ; i < = 10 ; i++ ) { collection.Add ( new TestClass3 ( ) ) ; } return collection.AsReadOnly ( ) ; } } } [ TypeConverter ( typeof ( ExpandableObjectConverter ) ) ] public sealed class TestClass3 { [ Category ( `` Category 1 '' ) ] public string TestProperty3 { get ; } = `` Test '' ; } < TypeConverter ( GetType ( ExpandableObjectConverter ) ) > Public Class TestClass1 Public ReadOnly Property TestProperty1 As TestClass2 = New TestClass2 ( ) End Class < TypeConverter ( GetType ( ExpandableObjectConverter ) ) > Public NotInheritable Class TestClass2 < TypeConverter ( GetType ( CollectionConverter ) ) > Public ReadOnly Property TestProperty2 As ReadOnlyCollection ( Of TestClass3 ) Get Dim collection As New List ( Of TestClass3 ) For i As Integer = 0 To 10 collection.Add ( New TestClass3 ( ) ) Next Return collection.AsReadOnly ( ) End Get End PropertyEnd Class < TypeConverter ( GetType ( ExpandableObjectConverter ) ) > Public NotInheritable Class TestClass3 < Category ( `` Category 1 '' ) > Public ReadOnly Property TestProperty3 As String = `` Test '' End Class [ Category ( `` Category 1 '' ) ] public string TestProperty3 { get ; set ; } = `` Test '' ; < Category ( `` Category 1 '' ) > Public Property TestProperty3 As String = `` Test ''
"public void StoredProcedureThatIsBeingcalled ( int variable_1 , int variable_2 , out DataSet ds ) { using ( SqlConnection con = new SqlConnection ( DatabaseConnectionString ) ) { ds = new DataSet ( `` DsToGoOut '' ) ; using ( SqlCommand cmd = new SqlCommand ( `` StoredProcedureThatIsBeingcalled '' , DbConn.objConn ) ) { cmd.CommandType = CommandType.StoredProcedure ; cmd.Parameters.Add ( new SqlParameter ( `` @ variable_1 '' , variable_1 ) ) ; cmd.Parameters.Add ( new SqlParameter ( `` @ variable_2 '' , variable_2 ) ) ; try { con.Open ( ) ; SqlDataAdapter objDataAdapter = new SqlDataAdapter ( ) ; objDataAdapter.SelectCommand = cmd ; objDataAdapter.Fill ( ds ) ; con.Close ( ) ; } catch ( Exception ex ) { //sql_log_err } } } }"
"public class A { public virtual void Method ( A parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } public virtual void Method ( B parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } } public class B : A { public virtual void Method ( object parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } public override void Method ( A parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } public override void Method ( B parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } } public static class S { public static void Method ( this B instance , B parameter ) { Console.WriteLine ( MethodBase.GetCurrentMethod ( ) ) ; } } var b = new B ( ) ; b.Method ( new B ( ) ) ; // B.Method ( Object parameter ) Why ? ? ?"
using System ; using System.Collections.ObjectModel ; using System.Web.UI.WebControls ; namespace Sample { public class MyCheckBoxList : CheckBoxList { public int A { get ; set ; } public int B { get ; set ; } protected override void OnLoad ( EventArgs e ) { //dummy task Collection < int > ints = new Collection < int > ( ) ; // ... ... .. this.DataSource = ints ; this.DataBind ( ) ; } } } using System ; using System.Collections.ObjectModel ; using System.Web.UI.WebControls ; namespace Sample { public class MyDropDownList : DropDownList { public int A { get ; set ; } public int B { get ; set ; } protected override void OnLoad ( EventArgs e ) { //dummy task Collection < int > ints = new Collection < int > ( ) ; // ... ... .. this.DataSource = ints ; this.DataBind ( ) ; } } }
"[ Serializable ] public struct PhoneNumber : IEquatable < PhoneNumber > { private const int AreaCodeShift = 54 ; private const int CentralOfficeCodeShift = 44 ; private const int SubscriberNumberShift = 30 ; private const int CentralOfficeCodeMask = 0x000003FF ; private const int SubscriberNumberMask = 0x00003FFF ; private const int ExtensionMask = 0x3FFFFFFF ; private readonly ulong value ; public int AreaCode { get { return UnmaskAreaCode ( value ) ; } } public int CentralOfficeCode { get { return UnmaskCentralOfficeCode ( value ) ; } } public int SubscriberNumber { get { return UnmaskSubscriberNumber ( value ) ; } } public int Extension { get { return UnmaskExtension ( value ) ; } } public PhoneNumber ( ulong value ) : this ( UnmaskAreaCode ( value ) , UnmaskCentralOfficeCode ( value ) , UnmaskSubscriberNumber ( value ) , UnmaskExtension ( value ) , true ) { } public PhoneNumber ( int areaCode , int centralOfficeCode , int subscriberNumber ) : this ( areaCode , centralOfficeCode , subscriberNumber , 0 , true ) { } public PhoneNumber ( int areaCode , int centralOfficeCode , int subscriberNumber , int extension ) : this ( areaCode , centralOfficeCode , subscriberNumber , extension , true ) { } private PhoneNumber ( int areaCode , int centralOfficeCode , int subscriberNumber , int extension , bool throwException ) { value = 0 ; if ( areaCode < 200 || areaCode > 989 ) { if ( ! throwException ) return ; throw new ArgumentOutOfRangeException ( `` areaCode '' , areaCode , @ '' The area code portion must fall between 200 and 989 . `` ) ; } else if ( centralOfficeCode < 200 || centralOfficeCode > 999 ) { if ( ! throwException ) return ; throw new ArgumentOutOfRangeException ( `` centralOfficeCode '' , centralOfficeCode , @ '' The central office code portion must fall between 200 and 999 . `` ) ; } else if ( subscriberNumber < 0 || subscriberNumber > 9999 ) { if ( ! throwException ) return ; throw new ArgumentOutOfRangeException ( `` subscriberNumber '' , subscriberNumber , @ '' The subscriber number portion must fall between 0 and 9999 . `` ) ; } else if ( extension < 0 || extension > 1073741824 ) { if ( ! throwException ) return ; throw new ArgumentOutOfRangeException ( `` extension '' , extension , @ '' The extension portion must fall between 0 and 1073741824 . `` ) ; } else if ( areaCode.ToString ( ) [ 1 ] == ' 9 ' ) { if ( ! throwException ) return ; throw new ArgumentOutOfRangeException ( `` areaCode '' , areaCode , @ '' The second digit of the area code can not be greater than 8 . `` ) ; } else { value |= ( ( ulong ) ( uint ) areaCode < < AreaCodeShift ) ; value |= ( ( ulong ) ( uint ) centralOfficeCode < < CentralOfficeCodeShift ) ; value |= ( ( ulong ) ( uint ) subscriberNumber < < SubscriberNumberShift ) ; value |= ( ( ulong ) ( uint ) extension ) ; } } public override bool Equals ( object obj ) { return obj ! = null & & obj.GetType ( ) == typeof ( PhoneNumber ) & & Equals ( ( PhoneNumber ) obj ) ; } public bool Equals ( PhoneNumber other ) { return this.value == other.value ; } public override int GetHashCode ( ) { return value.GetHashCode ( ) ; } public override string ToString ( ) { return ToString ( PhoneNumberFormat.Separated ) ; } public string ToString ( PhoneNumberFormat format ) { switch ( format ) { case PhoneNumberFormat.Plain : return string.Format ( @ '' { 0 : D3 } { 1 : D3 } { 2 : D4 } { 3 : # } '' , AreaCode , CentralOfficeCode , SubscriberNumber , Extension ) .Trim ( ) ; case PhoneNumberFormat.Separated : return string.Format ( @ '' { 0 : D3 } - { 1 : D3 } - { 2 : D4 } { 3 : # } '' , AreaCode , CentralOfficeCode , SubscriberNumber , Extension ) .Trim ( ) ; default : throw new ArgumentOutOfRangeException ( `` format '' ) ; } } public ulong ToUInt64 ( ) { return value ; } public static PhoneNumber Parse ( string value ) { var result = default ( PhoneNumber ) ; if ( ! TryParse ( value , out result ) ) { throw new FormatException ( string.Format ( @ '' The string `` '' { 0 } '' '' could not be parsed as a phone number . `` , value ) ) ; } return result ; } public static bool TryParse ( string value , out PhoneNumber result ) { result = default ( PhoneNumber ) ; if ( string.IsNullOrEmpty ( value ) ) { return false ; } var index = 0 ; var numericPieces = new char [ value.Length ] ; foreach ( var c in value ) { if ( char.IsNumber ( c ) ) { numericPieces [ index++ ] = c ; } } if ( index < 9 ) { return false ; } var numericString = new string ( numericPieces ) ; var areaCode = int.Parse ( numericString.Substring ( 0 , 3 ) ) ; var centralOfficeCode = int.Parse ( numericString.Substring ( 3 , 3 ) ) ; var subscriberNumber = int.Parse ( numericString.Substring ( 6 , 4 ) ) ; var extension = 0 ; if ( numericString.Length > 10 ) { extension = int.Parse ( numericString.Substring ( 10 ) ) ; } result = new PhoneNumber ( areaCode , centralOfficeCode , subscriberNumber , extension , false ) ; return result.value ! = 0 ; } public static bool operator == ( PhoneNumber left , PhoneNumber right ) { return left.Equals ( right ) ; } public static bool operator ! = ( PhoneNumber left , PhoneNumber right ) { return ! left.Equals ( right ) ; } private static int UnmaskAreaCode ( ulong value ) { return ( int ) ( value > > AreaCodeShift ) ; } private static int UnmaskCentralOfficeCode ( ulong value ) { return ( int ) ( ( value > > CentralOfficeCodeShift ) & CentralOfficeCodeMask ) ; } private static int UnmaskSubscriberNumber ( ulong value ) { return ( int ) ( ( value > > SubscriberNumberShift ) & SubscriberNumberMask ) ; } private static int UnmaskExtension ( ulong value ) { return ( int ) ( value & ExtensionMask ) ; } } public enum PhoneNumberFormat { Plain , Separated }"
"double [ , ] lookup = { { 1,2,3 } , { 4,5,6 } } ;"
dynamic fooVar = new FooClass ( ) ;
"-- -- -- -- |=====timespan====| -- -- -- -- -- -- -- -|=====timespan====| -- -- -- -- -- -- -- > 1 2 3 4 5 6 7 8 [ 1,2,3,4,5 ] , [ 6,7,8 ] |=====timespan====|=====timespan====|=====timespan====|=====timespan====| -- > 1 2 3 4 5 6 7 8 [ 1,2,3,4 ] , [ 5 ] , [ 6,7 ] , [ 8 ] var source = Observable.Concat ( Observable.Timer ( TimeSpan.FromSeconds ( 6 ) ) .Select ( o = > 1 ) , Observable.Timer ( TimeSpan.FromSeconds ( 1 ) ) .Select ( o = > 2 ) , Observable.Timer ( TimeSpan.FromSeconds ( 3 ) ) .Select ( o = > 3 ) , Observable.Never < int > ( ) ) ; Console.WriteLine ( `` { 0 } = > Started '' , DateTime.Now ) ; source.Buffer ( TimeSpan.FromSeconds ( 4 ) ) .Subscribe ( i = > Console.WriteLine ( `` { 0 } = > [ { 1 } ] '' , DateTime.Now , string.Join ( `` , '' , i ) ) ) ; 4/24/2015 7:01:09 PM = > Started4/24/2015 7:01:13 PM = > [ ] 4/24/2015 7:01:17 PM = > [ 1,2 ] 4/24/2015 7:01:21 PM = > [ 3 ] 4/24/2015 7:01:25 PM = > [ ] 4/24/2015 7:01:29 PM = > [ ] 4/24/2015 7:01:33 PM = > [ ]"
"ReportData.TrySetCurrentThreadName ( String.Format ( `` { 0 } . { 1 } '' , MethodBase.GetCurrentMethod ( ) .DeclaringType , MethodBase.GetCurrentMethod ( ) .Name ) ) ; public static void TrySetCurrentThreadName ( String threadName ) { if ( System.Threading.Thread.CurrentThread.Name == null ) { System.Threading.Thread.CurrentThread.Name = threadName ; } }"
"List < foo > spamSpamAndSpam ; List < foo > spamSpamSpamSausageEggsAndSpam ; List < foo > spamSpamSpamSausageEggsBaconAndSpam ; List < foo > spamSpamSpamSpamSpamWithoutSpam ; List < foo > spamSpamSpamSpamSpamSpamSpamSpamSpamLovelySpamWonderfulSpam ; List < string > Brian= new List < string > ( ) ; Brian.Add ( `` Always '' ) ; Brian.Add ( `` Look '' ) ; Brian.Add ( `` On '' ) ; Brian.Add ( `` The '' ) ; Brian.Add ( `` Bright '' ) ; Brian.Add ( `` Side '' ) ; Brian.Add ( `` Of '' ) ; Brian.Add ( `` Life '' ) ; func < foo , bool > deadParrot = x = > Brian.Contains ( x.bar ) ; IEnumerable < foo > okLumberjacks = spamSpamAndSpam.Where ( deadParrot ) ; okLumberjacks = okLumberjacks.Concat ( spamSpamSpamSpamSausageEggsAndSpam.Where ( deadParrot ) ) ; // And so on , concatenating the results of Where ( ) from every list of < foo > . foreach ( foo incontinentRunner in okLumberjacks ) { incontinentRunner.SillyWalk ( ) ; } ni = ni.Concat ( someList.Where ( filter ) ) ; okLumberjacks = spamSpamAndSpam . And ( spamSpamSpamSausageEggsAndSpam ) . And ( spamSpamSpamSausageEggsBaconAndSpam ) /* etc */ .Where ( deadParrot ) ; okLumberjacks = spanishInquisition.Where ( deadParrot ) ; // Where the type of spanishInquisition is List < List < foo > > ."
private bool chech_unwanted_text ( string query ) { if ( query.Contains ( `` DELETE '' ) || query.Contains ( `` delete '' ) || query.Contains ( `` CREATE '' ) || query.Contains ( `` create '' ) || query.Contains ( `` COPY '' ) || query.Contains ( `` copy '' ) || query.Contains ( `` INSERT '' ) || query.Contains ( `` insert '' ) || query.Contains ( `` DROP '' ) || query.Contains ( `` drop '' ) || query.Contains ( `` UPDATE '' ) || query.Contains ( `` update '' ) || query.Contains ( `` ALTER '' ) || query.Contains ( `` alter '' ) ) { return false ; } else return true ; }
"dbase.AddInParameter ( cmd , `` @ LoginUser '' , DbType.String , UserID ) ; try { using ( IDataReader dr = dbase.ExecuteReader ( cmd ) ) if ( dr.Read ( ) ) { dt = new DataTable ( `` DashBoard '' ) ; dt.Load ( dr ) ; } } ALTER PROCEDURE [ dbo ] . [ USP_ViewAdminDashBoard ] ( @ LoginUser varchar ( 75 ) ) -- Add the parameters for the stored procedure hereASBEGIN SET NOCOUNT ON ; SET DATEFORMAT DMY ; DECLARE @ LastLoginDate as DateTime Select @ LastLoginDate = dbo.UDF_GetLastLoginByUser ( @ LoginUser ) Select 'Last Login Date ' , convert ( varchar ( 12 ) , @ LastLoginDate,105 ) Union Select 'Nos . Records pending for Upload ' as Title , convert ( varchar ( 5 ) , COUNT ( s.BatchID ) ) Total from dbo.BREGISTRATIONENTRY s , Dbo.TBL_iBATCH B where B.BatchID = s.BatchID And b.Forwarded = 0 and b.isBatchClosed = 1END"
"public class Foo : IFoo { private readonly IFoo innerFoo ; public Foo ( IFoo innerFoo ) { this.innerFoo = innerFoo ; } public int ? Bar { get ; set ; } public int ? Baz { get ; set ; } } int IFoo.GetBar ( ) { if ( ( Bar == null ) & & ( innerFoo ! = null ) ) Bar = innerFoo.GetBar ( ) ; return Bar ? ? 0 ; } int IFoo.GetBaz ( ) { if ( ( Baz == null ) & & ( innerFoo ! = null ) ) Baz = innerFoo.GetBaz ( ) ; return Baz ? ? 0 ; } T LazyLoad < T > ( ref T prop , Func < IFoo , T > loader ) { if ( ( prop == null ) & & ( innerFoo ! = null ) ) prop = loader ( innerFoo ) ; return prop ; } int IFoo.GetBar ( ) { return LazyLoad ( ref Bar , f = > f.GetBar ( ) ) ; // < -- - Wo n't compile } T LazyLoad < T > ( Expression < Func < T > > propExpr , Func < IFoo , T > loader ) { var memberExpression = propExpr.Body as MemberExpression ; if ( memberExpression ! = null ) { // Use Reflection to inspect/set the property } } return LazyLoad ( f = > f.Bar , f = > f.GetBar ( ) ) ; return LazyLoad ( f = > 3 , f = > f.GetBar ( ) ) ; T LazyLoad < T > ( Func < T > getter , Action < T > setter , Func < IFoo , T > loader ) { ... }"
"var join = context.Foo .Join ( context.Bar , foo = > new { foo.Year , foo.Month } , bar = > new { bar.Year , bar.Month } , ( foo , bar ) = > new { foo.Name , bar.Owner , foo.Year } ) .Where ( anon = > anon.Year == 2015 ) .ToList ( ) ; var joinQuery = from foo in context.Foo join bar in context.Bar on new { foo.Year , foo.Month } equals new { bar.Year , bar.Month } where foo.Year == 2015 select new { foo.Name , bar.Owner } ; var join = joinQuery.ToList ( ) ; .Select ( anon = > new { /* the properties I want */ } )"
"RouteData.Values.Add ( `` CancelActionFilter '' , true ) ; if ( filterContext.RouteData.Values [ `` CancelActionFilter '' ] ! = null ) { return ; }"
"public class GenericResult < T > { public T Data { get ; set ; } public bool IsSuccess { get ; set ; } public string Message { get ; set ; } } public GenericResult < int > AddCategory ( TCategory tCategory ) { GenericResult < int > result = new GenericResult < int > ( ) ; //business logic validation , dont make sense , only example : ) if ( tCategory.Name.Lenght > 100 ) { result.IsSuccess = false ; result.Message = `` Category Name length is too long '' ; result.Data = 0 ; } //handle .net runtime error//may be database is not aviable . try { result.Data = this.catalogRepository.AddCategory ( tCategory ) ; result.IsSuccess = true ; } catch ( Exception ex ) { result.Data = 0 ; result.IsSuccess = false ; result.Message = ex.Message ; } return result ; } public GenericResult < IEnumerable < TCategory > > GetCategoryHierarchy ( TCategory parentCategory ) { GenericResult < IEnumerable < TCategory > > result = new GenericResult < IEnumerable < TCategory > > ( ) ; try { IEnumerable < TCategory > allCategories = catalogRepository.GetAllCategories ( ) ; result.Data = GetCategoryHierarchy ( allCategories , parentCategory ) ; result.IsSuccess = true ; } catch ( Exception ex ) { result.IsSuccess = false ; result.Data = null ; result.Message = ex.Message ; } return result ; }"
class Eq a where ( == ) : : a - > a - > Boolinstance Eq Integer where x == y = x ` integerEq ` y interface Eq < T > { bool Equal ( T elem ) ; } public class Integer : Eq < int > { public bool Equal ( int elem ) { return _elem == elem ; } }
public class A { protected A ( ) { } protected A Make ( ) { return new A ( ) ; } } public class B : A { A a = new A ( ) ; //inaccessible due to protection level B b = new B ( ) ; private B ( ) { A c = new A ( ) ; //inaccessible due to protection level a = new A ( ) ; //inaccessible due to protection level a = Make ( ) ; } }
"double [ ] myDoubleArray = new double [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ; double last = myDoubleArray.Last ( ) ; double last = myDoubleArray [ myDoubleArray.Length - 1 ] ;"
public class Program { static void Main ( string [ ] args ) { TestAsync ( ) ; Console.ReadKey ( true ) ; } private static async void TestAsync ( ) { bool complete = false ; Func < Task > testFunc = async ( ) = > { await Task.Delay ( 1000 ) ; bool toggle = false ; while ( ! complete ) toggle = ! toggle ; } ; var task = testFunc ( ) ; Thread.Sleep ( 2000 ) ; complete = true ; await task ; Console.WriteLine ( `` Done '' ) ; } }
"// Setup session optionsSessionOptions sessionOptions = new SessionOptions { Protocol = Protocol.Sftp , HostName = `` example.com '' , UserName = `` user '' , Password = `` mypassword '' , SshHostKeyFingerprint = `` ssh-rsa 2048 xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx : xx '' } ; using ( Session session = new Session ( ) ) { // Connect session.Open ( sessionOptions ) ; }"
"private void ViewWinLoaded ( object sender , RoutedEventArgs e ) { var stud = from s in data.Students select s ; Student [ ] st=stud.ToArray < Student > ( ) ; datagrid.ItemsSource = st ; } < DataGrid x : Name= '' datagrid '' HorizontalAlignment= '' Left '' Height= '' 232 '' VerticalAlignment= '' Top '' Width= '' 461 '' > < DataGrid.Columns > < DataGridTextColumn Binding= '' { Binding Path=StudentID } '' ClipboardContentBinding= '' { x : Null } '' Header= '' StudentID '' / > < DataGridTextColumn Binding= '' { Binding Path=FirstName } '' ClipboardContentBinding= '' { x : Null } '' Header= '' First Name '' / > < DataGridTextColumn Binding= '' { Binding Path=LastName } '' ClipboardContentBinding= '' { x : Null } '' Header= '' Last Name '' / > < DataGridTextColumn Binding= '' { Binding Path=Gender } '' ClipboardContentBinding= '' { x : Null } '' Header= '' Gender '' / > < DataGridTextColumn Binding= '' { Binding Path=GPA } '' ClipboardContentBinding= '' { x : Null } '' Header= '' GPA '' / > < /DataGrid.Columns > < /DataGrid >"
void OnCollisionEnter ( Collision collision ) { } ( )
"[ DataContract ] public class RegularFileMetadata : FileMetadataBase , IDisposable { bool _Disposed = false ; //note this ! // ... protected virtual void Dispose ( bool disposing ) { if ( ! _Disposed ) { // ... _Disposed = true ; //note this too ! } } public void Dispose ( ) { Dispose ( true ) ; GC.SuppressFinalize ( this ) ; } } [ OperationContract ] [ ServiceKnownType ( typeof ( RegularFileMetadata ) ) ] Guid BeginUpload ( FileMetadataBase metadata ) ; Dictionary < Guid , RegularFileMetadata > _Dict ; public Guid BeginUpload ( FileMetadataBase fileMetadata ) { // ... var metadata = fileMetadata as RegularFileMetadata ; Guid sessionId = Guid.NewGuid ( ) ; _Dict.Add ( sessionId , metadata ) ; //metadata SAVED ! return sessionId ; } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single ) ]"
public static byte [ ] getBytes ( short value ) { byte [ ] bytes = new byte [ 2 ] ; bytes [ 0 ] = ( byte ) ( value > > 8 ) ; bytes [ 1 ] = ( byte ) value ; return bytes ; } public unsafe static byte [ ] GetBytes ( short value ) { byte [ ] bytes = new byte [ 2 ] ; fixed ( byte* b = bytes ) * ( ( short* ) b ) = value ; return bytes ; }
FilePrefixList.Any ( s = > FileName.StartsWith ( s ) )
"typedef struct drive_info_t { unsigned char drive_alias [ 32 ] ; } drive_info_t ; unsigned int get_drive_info_list ( drive_info_t **list , unsigned int *item_count ) { //fill list in native C //print out in native C printf ( `` list.alias - % s\r\n '' , list [ i ] - > drive_alias ) ; } [ StructLayout ( LayoutKind.Sequential ) ] public struct drive_info_t { [ MarshalAs ( UnmanagedType.ByValArray , SizeConst = 32 ) ] public byte [ ] drive_alias ; } [ DllImport ( `` mydll.dll '' , EntryPoint = `` get_drive_info_list '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern uint GetDriveInfoList ( out System.IntPtr ptr_list_info , out System.IntPtr ptr_count ) ; IntPtr ptr_list_info = IntPtr.Zero ; IntPtr ptr_cnt = IntPtr.Zero ; ret = api.GetDriveInfoList ( out ptr_list_info , out ptr_cnt ) ; nAlloc = ptr_cnt.ToInt32 ( ) ; int szStruct = Marshal.SizeOf ( typeof ( api.drive_info_t ) ) ; api.drive_info_t [ ] localStructs = new api.drive_info_t [ nAlloc ] ; for ( int i = 0 ; i < nAlloc ; i++ ) { localStructs [ i ] = ( api.drive_info_t ) Marshal.PtrToStructure ( ptr_list_info , typeof ( api.drive_info_t ) ) ; ptr_list_info = new IntPtr ( ptr_list_info.ToInt32 ( ) + ( szStruct ) ) ; } for ( uint i = 0 ; i < localStructs.Length ; i++ ) { Console.WriteLine ( `` list.alias - { 0 } '' , System.Text.Encoding.Default.GetString ( localStructs [ i ] .drive_alias ) ) ; } ======================== C values ============================list.alias - drv1list.alias - drv2list.alias - drv3list.alias - drv4======================== C # values ============================list.alias - drv1list.alias - o£Q95drv2list.alias - o£Q95drv3list.alias - o£Q95drv4"
"< ListView Name= '' lv '' ItemsSource= '' { Binding OCollection } '' Background= '' Linen '' Grid.ColumnSpan= '' 3 '' > < ListView.ItemTemplate > < DataTemplate > < Grid Background= '' LightGray '' Name= '' buttonGrid '' Tag= '' { Binding dumyString } '' > < i : Interaction.Behaviors > < ic : DataTriggerBehavior Binding= '' { Binding ElementName=lv , Path=SelectedValue.dumyString } '' Value= '' { Binding dumyString } '' ComparisonCondition= '' Equal '' > < ic : ChangePropertyAction TargetObject= '' { Binding ElementName=ButtonA } '' PropertyName= '' Visibility '' Value= '' Visible '' / > < /ic : DataTriggerBehavior > < ic : DataTriggerBehavior Binding= '' { Binding ElementName=lv , Path=SelectedValue.dumyString } '' Value= '' { Binding dumyString } '' ComparisonCondition= '' NotEqual '' > < ic : ChangePropertyAction TargetObject= '' { Binding ElementName=ButtonA } '' PropertyName= '' Visibility '' Value= '' Collapsed '' / > < /ic : DataTriggerBehavior > < ic : DataTriggerBehavior Binding= '' { Binding ElementName=lv , Path=buttonGrid.Tag } '' Value= '' { Binding dumyString } '' ComparisonCondition= '' Equal '' > < ic : ChangePropertyAction TargetObject= '' { Binding ElementName=ButtonB } '' PropertyName= '' Visibility '' Value= '' Visible '' / > < /ic : DataTriggerBehavior > < /i : Interaction.Behaviors > < Image Source= '' /Assets/Logo.png '' / > < Button Name= '' ButtonA '' Content= '' ButtonA '' Background= '' Black '' Visibility= '' Collapsed '' / > < Button Name= '' ButtonB '' Content= '' ButtonB '' Background= '' Black '' Visibility= '' Collapsed '' / > < /Grid > < /DataTemplate > < /ListView.ItemTemplate > < /ListView > public class dumyClass { public string dumyString { get ; set ; } }"
DataStore myData = new DataStore ;
Object lockThis = new Object ( ) ; lock ( lockThis ) { //Critical Section } lock { //Critical Section }
"[ Route ( ApiConstants.ROOT_API_URL_VERSION_1 + `` DigimonWorld2Admin/Digimon/Create '' ) ] public class CreateCommandController : MetalKidApiControllerBase { private readonly IMediator _mediator ; public CreateCommandController ( IMediator mediator ) = > _mediator = mediator ; [ HttpPost ] public async Task Post ( [ FromBody ] CreateCommand command ) = > await _mediator.ExecuteAsync ( command ) ; } public class CommandHandlerExceptionDecorator < TCommand > : ICommandHandler < TCommand > where TCommand : ICommand { private readonly ICommandHandler < TCommand > _commandHandler ; private readonly ILogger _logger ; private readonly IUserContext _userContext ; public CommandHandlerExceptionDecorator ( ICommandHandler < TCommand > commandHandler , ILogger logger , IUserContext userContext ) { Guard.IsNotNull ( commandHandler , nameof ( commandHandler ) ) ; Guard.IsNotNull ( logger , nameof ( logger ) ) ; _commandHandler = commandHandler ; _logger = logger ; _userContext = userContext ; } public async Task ExecuteAsync ( TCommand command , CancellationToken token = default ( CancellationToken ) ) { try { await _commandHandler.ExecuteAsync ( command , token ) .ConfigureAwait ( false ) ; } catch ( BrokenRuleException ) { throw ; // Let caller catch this directly } catch ( UserFriendlyException ex ) { await _logger.LogAsync ( new LogEntry ( LogTypeEnum.Error , _userContext , `` Friendly exception with command : `` + typeof ( TCommand ) .FullName , ex , command ) ) .ConfigureAwait ( false ) ; throw ; // Let caller catch this directly } catch ( NoPermissionException ex ) { await _logger.LogAsync ( new LogEntry ( LogTypeEnum.Error , _userContext , `` No Permission exception with command : `` + typeof ( TCommand ) .FullName , ex , command ) ) .ConfigureAwait ( false ) ; throw new UserFriendlyException ( CommonResource.Error_NoPermission ) ; // Rethrow with a specific message } catch ( ConcurrencyException ex ) { await _logger.LogAsync ( new LogEntry ( LogTypeEnum.Error , _userContext , `` Concurrency error with command : `` + typeof ( TCommand ) .FullName , ex , command ) ) .ConfigureAwait ( false ) ; throw new UserFriendlyException ( CommonResource.Error_Concurrency ) ; // Rethrow with a specific message } catch ( Exception ex ) { await _logger.LogAsync ( new LogEntry ( LogTypeEnum.Error , _userContext , `` Error with command : `` + typeof ( TCommand ) .FullName , ex , command ) ) .ConfigureAwait ( false ) ; throw new UserFriendlyException ( CommonResource.Error_Generic ) ; // Rethrow with a specific message } } } public class CommandHandlerValidatorDecorator < TCommand > : ICommandHandler < TCommand > where TCommand : ICommand { private readonly ICommandHandler < TCommand > _commandHandler ; private readonly IEnumerable < ICommandValidator < TCommand > > _validators ; public CommandHandlerValidatorDecorator ( ICommandHandler < TCommand > commandHandler , ICollection < ICommandValidator < TCommand > > validators ) { Guard.IsNotNull ( commandHandler , nameof ( commandHandler ) ) ; Guard.IsNotNull ( validators , nameof ( validators ) ) ; _commandHandler = commandHandler ; _validators = validators ; } public async Task ExecuteAsync ( TCommand command , CancellationToken token = default ( CancellationToken ) ) { var brokenRules = ( await Task.WhenAll ( _validators.AsParallel ( ) .Select ( a = > a.ValidateCommandAsync ( command , token ) ) ) .ConfigureAwait ( false ) ) .SelectMany ( a = > a ) .ToList ( ) ; if ( brokenRules.Any ( ) ) { throw new BrokenRuleException ( brokenRules ) ; } await _commandHandler.ExecuteAsync ( command , token ) .ConfigureAwait ( false ) ; } } public class CreateCommandValidator : CommandValidatorBase < CreateCommand > { private readonly IDigimonWorld2ContextFactory _contextFactory ; public CreateCommandValidator ( IDigimonWorld2ContextFactory contextFactory ) { _contextFactory = contextFactory ; } protected override void CreateRules ( CancellationToken token = default ( CancellationToken ) ) { AddRule ( ( ) = > Validate.If ( string.IsNullOrEmpty ( Command.Name ) ) ? .CreateRequiredBrokenRule ( DigimonResources.Digipedia_CreateCommnad_Name , nameof ( Command.Name ) ) ) ; AddRule ( ( ) = > Validate.If ( Command.DigimonTypeId == 0 ) ? .CreateRequiredBrokenRule ( DigimonResources.Digipedia_CreateCommnad_DigimonTypeId , nameof ( Command.DigimonTypeId ) ) ) ; AddRule ( ( ) = > Validate.If ( Command.RankId == 0 ) ? .CreateRequiredBrokenRule ( DigimonResources.Digipedia_CreateCommnad_RankId , nameof ( Command.RankId ) ) ) ; AddRule ( async ( ) = > { using ( var context = _contextFactory.Create ( false ) ) { return Validate.If ( ! string.IsNullOrEmpty ( Command.Name ) & & await context.Digimons .AnyAsync ( a = > a.Name == Command.Name , token ) .ConfigureAwait ( false ) ) ? .CreateAlreadyInUseBrokenRule ( DigimonResources.Digipedia_CreateCommnad_Name , Command.Name , nameof ( Command.Name ) ) ; } } ) ; } } public class CreateCommandValidatorHandler : ICommandHandler < CreateCommand > { private const int ExpectedChangesCount = 1 ; private readonly IDigimonWorld2ContextFactory _contextFactory ; private readonly IMapper < CreateCommand , DigimonEntity > _mapper ; public CreateCommandValidatorHandler ( IDigimonWorld2ContextFactory contextFactory , IMapper < CreateCommand , DigimonEntity > mapper ) { _contextFactory = contextFactory ; _mapper = mapper ; } public async Task ExecuteAsync ( CreateCommand command , CancellationToken token = default ( CancellationToken ) ) { using ( var context = _contextFactory.Create ( ) ) { var entity = _mapper.Map ( command ) ; context.Digimons.Add ( entity ) ; await context.SaveChangesAsync ( ExpectedChangesCount , token ) .ConfigureAwait ( false ) ; } } } internal static class ErrorConfiguration { public static void Configure ( IApplicationBuilder app , IHostingEnvironment env , ILoggerFactory loggerFactory , IConfigurationRoot configuration ) { loggerFactory.AddConsole ( configuration.GetSection ( `` Logging '' ) ) ; loggerFactory.AddDebug ( ) ; if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; app.UseBrowserLink ( ) ; } else { app.UseExceptionHandler ( `` /Home/Error '' ) ; } app.UseExceptionHandler ( errorApp = > { errorApp.Run ( async context = > { var error = context.Features.Get < IExceptionHandlerFeature > ( ) ? .Error ; context.Response.StatusCode = GetErrorStatus ( error ) ; context.Response.ContentType = `` application/json '' ; var message = GetErrorData ( error ) ; await context.Response.WriteAsync ( message , Encoding.UTF8 ) ; } ) ; } ) ; } private static string GetErrorData ( Exception ex ) { if ( ex is BrokenRuleException brokenRules ) { return JsonConvert.SerializeObject ( new { BrokenRules = brokenRules.BrokenRules } ) ; } if ( ex is UserFriendlyException userFriendly ) { return JsonConvert.SerializeObject ( new { Message = userFriendly.Message } ) ; } return JsonConvert.SerializeObject ( new { Message = MetalKid.Common.CommonResource.Error_Generic } ) ; } private static int GetErrorStatus ( Exception ex ) { if ( ex is BrokenRuleException || ex is UserFriendlyException ) { return ( int ) HttpStatusCode.BadRequest ; } return ( int ) HttpStatusCode.InternalServerError ; } } public class BrokenRule { public string RuleMessage { get ; set ; } public string Relation { get ; set ; } public BrokenRule ( ) { } public BrokenRule ( string ruleMessage , string relation = `` '' ) { Guard.IsNotNullOrWhiteSpace ( ruleMessage , nameof ( ruleMessage ) ) ; RuleMessage = ruleMessage ; Relation = relation ; } } [ Route ( ApiConstants.ROOT_API_URL_VERSION_1 + `` DigimonWorld2Admin/Digimon/Create '' ) ] public class CreateCommandController : MetalKidApiControllerBase { private readonly IMediator _mediator ; private readonly ICreateCommandValidator _validator ; public CreateCommandController ( IMediator mediator , ICreateCommandValidator validator ) { _mediator = mediator ; _validator = validator } [ HttpPost ] public async Task < IHttpResult > Post ( [ FromBody ] CreateCommand command ) { var validationResult = _validator.Validate ( command ) ; if ( validationResult.Errors.Count > 0 ) { return ValidationHelper.Response ( validationResult ) ; } await _mediator.ExecuteAsync ( command ) ; return Ok ( ) ; } } [ Route ( ApiConstants.ROOT_API_URL_VERSION_1 + `` DigimonWorld2Admin/Digimon/Create '' ) ] public class CreateCommandController : MetalKidApiControllerBase { private readonly IResultMediator _mediator ; public CreateCommandController ( IResultMediator mediator ) = > _mediator = mediator ; [ HttpPost ] public async Task < IHttpAction > Post ( [ FromBody ] CreateCommand command ) = > await _mediator.ExecuteAsync ( command ) ; } Task ExecuteAsync ( TCommand , CancellationToken token ) ;"
< ContentPage xmlns= '' http : //xamarin.com/schemas/2014/forms '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2009/xaml '' x : Class= '' App1.Views.MyPage '' xmlns : vm= '' clr-namespace : App1.ViewModels ; '' xmlns : androidWidget= '' clr-namespace : Com.CustomAAR ; assembly=Com.CustomAAR ; targetPlatform=Android '' xmlns : formsAndroid= '' clr-namespace : Xamarin.Forms ; assembly=Xamarin.Forms.Platform.Android ; targetPlatform=Android '' Title= '' { Binding Title } '' > < ContentPage.Content > < ContentView x : Name= '' contentViewParent '' > < androidWidget : MyCustomViewGroup x : Arguments= '' { x : Static formsandroid : Forms.Context } '' > < /androidWidget : MyCustomViewGroup > < /ContentView > < ! -- < ContentView IsVisible= '' True '' IsEnabled= '' True '' BindingContext= '' { Binding MyCustomViewGroup } '' > < /ContentView > -- > < /ContentPage.Content > < /ContentPage > public partial class MyPage : ContentPage { MyCustomViewGroupModel viewModel ; public MyPage ( ) { InitializeComponent ( ) ; } public MyPage ( MyCustomViewGroupModel viewModel ) { InitializeComponent ( ) ; # if __ANDROID__ NativeViewWrapper wrapper = ( NativeViewWrapper ) contentViewParent.Content ; MyCustomViewGroup myCustomViewGroup = ( MyCustomViewGroup ) wrapper.NativeView ; //myCustomViewGroup = new MyCustomViewGroup ( Android.App.Application.Context ) ; myCustomViewGroup.SomeAction ( `` '' ) ; # endif BindingContext = this.viewModel = viewModel ; } }
public sealed class MyClass { ... public static MyClass Instance { get { return SingletonHolder.instance ; } } ... static class SingletonHolder { public static MyClass instance = new MyClass ( ) ; } }
"public enum Elvis { INSTANCE ; private final String [ ] favoriteSongs = { `` Hound Dog '' , `` Heartbreak Hotel '' } ; public void printFavorites ( ) { System.out.println ( Arrays.toString ( favoriteSongs ) ) ; } } INSTANCE ;"
250 = byte [ 1 ] 2000 = byte [ 2 ] 80000 = byte [ 3 ] var foo = getBytes ( bar ) ;
public bool IsShipped { get { # region ' Test Code ' if ( ! String.IsNullOrEmpty ( TrailerNo ) || ( TruckDate ! = Global.NODATE ) ) { return true ; } # endregion return false ; } } public static bool IsShipped ( string boxNumber ) { var array = GetCrate ( boxNumber ) ; if ( array ! = null ) { foreach ( var item in array ) { if ( item.IsShipped ) { return true ; } } } return false ; }
"_myBytes = File.ReadAllBytes ( @ '' D : \Projects\AppDomainTest\plugin.dll '' ) ; var domain = AppDomain.CreateDomain ( `` plugintest '' , null , null , null , false ) ; domain.Load ( _myBytes ) ; foreach ( var ass in domain.GetAssemblies ( ) ) { Console.WriteLine ( $ '' ass.FullName : { ass.FullName } '' ) ; Console.WriteLine ( string.Join ( Environment.NewLine , ass.GetTypes ( ) .ToList ( ) ) ) ; } domain.CreateInstance ( `` plugin '' , `` Plugins.Test '' ) ;"
"public class SGI_MembershipProvider : MembershipProvider { public override bool ChangePassword ( string username , string oldPassword , string newPassword ) { if ( ! ValidateUser ( username , oldPassword ) ) return false ; ValidatePasswordEventArgs args = new ValidatePasswordEventArgs ( username , newPassword , true ) ; OnValidatingPassword ( args ) ; if ( args.Cancel ) { if ( args.FailureInformation ! = null ) { throw args.FailureInformation ; } else { throw new Exception ( `` Change password canceled due to new password validation failure . `` ) ; } } ... .. //Database connectivity and code execution to change password. } ... . }"
"< Window x : Class= '' MyCompany.Application.Shared.UI.Dialogs.SomeWindow xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' Background= '' # FFF3F3F7 '' > < Window.Resources > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.BorderBrush '' Color= '' # FFF3F3F7 '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Background '' Color= '' White '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Background.Hover '' Color= '' # FFAEAEB6 '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Background.Active '' Color= '' # FF0D6AA8 '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Background.HoverSelected '' Color= '' # FF009AD9 '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Background.Disabled '' Color= '' # FFAEAEB6 '' options : Freeze= '' True '' / > < SolidColorBrush x : Key= '' Theme.DataGrid.Row.Foreground.Selected '' Color= '' White '' options : Freeze= '' True '' / > < Style x : Key= '' GridView.ColumnHeader.Gripper.Style '' TargetType= '' { x : Type Thumb } '' > < Setter Property= '' Width '' Value= '' 8 '' / > < Setter Property= '' Background '' Value= '' Transparent '' / > < Setter Property= '' Cursor '' Value= '' SizeWE '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' { x : Type Thumb } '' > < Border Background= '' { TemplateBinding Background } '' Padding= '' { TemplateBinding Padding } '' / > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style > < Style TargetType= '' { x : Type GridViewColumnHeader } '' > < EventSetter Event= '' FrameworkElement.Loaded '' Handler= '' GridViewColumnHeader_Loaded '' / > < Setter Property= '' FontWeight '' Value= '' Bold '' / > < Setter Property= '' BorderBrush '' Value= '' Transparent '' / > < Setter Property= '' BorderThickness '' Value= '' 0 '' / > < Setter Property= '' Background '' Value= '' { StaticResource Theme.DataGrid.ColumnHeader.Background } '' / > < Setter Property= '' Foreground '' Value= '' Black '' / > < Setter Property= '' HorizontalContentAlignment '' Value= '' Left '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' { x : Type GridViewColumnHeader } '' > < Grid > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' * '' / > < ColumnDefinition Width= '' 1 '' / > < /Grid.ColumnDefinitions > < Border Grid.Column= '' 0 '' x : Name= '' Border '' BorderBrush= '' { TemplateBinding BorderBrush } '' BorderThickness= '' { TemplateBinding BorderThickness } '' Background= '' { TemplateBinding Background } '' > < ContentPresenter Margin= '' { TemplateBinding Padding } '' HorizontalAlignment= '' { TemplateBinding HorizontalContentAlignment } '' VerticalAlignment= '' { TemplateBinding VerticalContentAlignment } '' / > < /Border > < Thumb Grid.Column= '' 1 '' x : Name= '' PART_HeaderGripper '' HorizontalAlignment= '' Right '' Style= '' { DynamicResource Theme.DataGrid.ColumnHeader.Gripper.Style } '' / > < /Grid > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style > < Style TargetType= '' { x : Type ListView } '' > < Setter Property= '' BorderThickness '' Value= '' { DynamicResource Theme.DataGrid.BorderThickness } '' / > < Setter Property= '' Background '' Value= '' { StaticResource Theme.TreeView.Background } '' / > < /Style > < Style TargetType= '' { x : Type ListViewItem } '' > < Setter Property= '' Background '' Value= '' White '' / > < Setter Property= '' Foreground '' Value= '' { DynamicResource Theme.DataGrid.Row.Foreground } '' / > < Setter Property= '' VerticalAlignment '' Value= '' Stretch '' / > < Setter Property= '' HorizontalAlignment '' Value= '' Stretch '' / > < Setter Property= '' VerticalContentAlignment '' Value= '' Stretch '' / > < Setter Property= '' HorizontalContentAlignment '' Value= '' Stretch '' / > < Setter Property= '' BorderThickness '' Value= '' 0 '' / > < Setter Property= '' BorderBrush '' Value= '' Transparent '' / > < Setter Property= '' Padding '' Value= '' { DynamicResource Theme.DataGrid.Cell.Padding } '' / > < Setter Property= '' Margin '' Value= '' 1 '' / > < Style.Triggers > < Trigger Property= '' IsMouseOver '' Value= '' True '' > < Setter Property= '' Background '' Value= '' { DynamicResource Theme.DataGrid.Row.Background.Hover } '' / > < /Trigger > < Trigger Property= '' IsSelected '' Value= '' True '' > < Setter Property= '' Background '' Value= '' { DynamicResource Theme.DataGrid.Row.Background.Active } '' < Setter Property= '' Foreground '' Value= '' { DynamicResource Theme.DataGrid.Row.Background.Selected } '' / > < /Trigger > < Trigger Property= '' IsEnabled '' Value= '' False '' > < Setter Property= '' Background '' Value= '' { DynamicResource Theme.DataGrid.Row.Background.Disabled } '' / > < /Trigger > < MultiTrigger > < MultiTrigger.Conditions > < Condition Property= '' IsMouseOver '' Value= '' True '' / > < Condition Property= '' IsSelected '' Value= '' True '' / > < /MultiTrigger.Conditions > < Setter Property= '' Background '' Value= '' { DynamicResource Theme.DataGrid.Row.Background.HoverSelected } '' / > < /MultiTrigger > < /Style.Triggers > < /Style > < /Window.Resources > < StackPanel > < CheckBox Content= '' IsGrouped '' IsChecked= '' { Binding IsGrouped } '' / > < ListView Margin= '' 10 '' ItemsSource= '' { Binding Users } '' > < ListView.View > < GridView AllowsColumnReorder= '' False '' > < GridViewColumn Header= '' Name '' DisplayMemberBinding= '' { Binding Name } '' / > < GridViewColumn Header= '' Age '' DisplayMemberBinding= '' { Binding Age } '' / > < GridViewColumn Header= '' Mail '' DisplayMemberBinding= '' { Binding Mail } '' / > < GridViewColumn Header= '' Group '' DisplayMemberBinding= '' { Binding Group } '' / > < /ListView > < /StackPanel > < /Window > namespace MyCompany.Application.Shared.UI.Dialogs { public class User { public string Name { get ; set ; } public int Age { get ; set ; } public string Mail { get ; set ; } public string Group { get ; set ; } } public class SomeWindowViewModel : ViewModel { List < User > items = new List < User > ( ) ; IEnumerable < User > GetUsers ( ) { foreach ( var item in items ) { yield return item ; } } public ICollectionView Users { get ; } private bool _isGrouped = false ; public bool IsGrouped { get { return _isGrouped ; } set { _isGrouped = value ; if ( value ) { Users.GroupDescriptions.Add ( new PropertyGroupDescription ( `` Group '' ) ) ; } else { Users.GroupDescriptions.Clear ( ) ; } } } public SomeWindowViewModel ( ) { items.Add ( new User ( ) { Name = `` John Doe '' , Age = 42 , Mail = `` john @ doe-family.com '' , Group = `` OneGroup1 '' } ) ; items.Add ( new User ( ) { Name = `` Jane Doe '' , Age = 39 , Mail = `` jane @ doe-family.com '' , Group = `` OneGroup1 '' } ) ; items.Add ( new User ( ) { Name = `` Sammy Doe '' , Age = 7 , Mail = `` sammy.doe @ gmail.com '' , Group = `` TwoGroup2 '' } ) ; items.Add ( new User ( ) { Name = `` Pentti Doe '' , Age = 7 , Mail = `` pena.doe @ gmail.com '' , Group = `` TwoGroup2 '' } ) ; Users = CollectionViewSource.GetDefaultView ( GetUsers ( ) ) ; } } }"
"[ Route ( `` sort/ { SortColumn } / { SortOrder ? } '' , Name = `` Sort-Product '' ) ] [ Route ( `` page/ { Page : int } / { SortColumn } / { SortOrder ? } '' , Name = `` Paging-Product '' ) ] [ Route ( `` search/ { SearchString } '' ) ] [ Route ( `` index '' ) ] public ActionResult Index ( string searchString , string filter , string currentFilter , string sortColumn , string sortOrder , int ? page ) { IOrderedQueryable < Product > entities = ( IOrderedQueryable < Product > ) db.FilteredProducts ; if ( searchString ! = null ) page = 1 ; else searchString = currentFilter ; if ( filter ! = null ) { string [ ] filters = filter.Split ( new char [ ] { ' . ' } ) ; filter = `` '' ; // filter on form if ( filters.Length > 0 & & ! String.IsNullOrEmpty ( filters [ 0 ] ) ) { FormLibraryEntry formEntry = FormLibraryController.GetFormLibraryEntry ( filters [ 0 ] , StateHelper.GetSchema ( ) ) ; if ( formEntry ! = null ) { entities = ( IOrderedQueryable < Product > ) entities.Where ( s = > s.FormName == formEntry.Id ) ; AddFixedNotification ( String.Format ( Resources.Entity.Environment.FilteredByFormMessage , formEntry.Name ) ) ; filter += filters [ 0 ] ; } } // filter on design template if ( filters.Length > 1 & & ! String.IsNullOrEmpty ( filters [ 1 ] ) ) { var designEntry = DesignTemplateController.GetTemplateLibraryEntry ( filters [ 1 ] , StateHelper.GetSchema ( ) ) ; if ( designEntry ! = null ) { entities = ( IOrderedQueryable < Product > ) entities.Where ( s = > s.TemplateName == designEntry.Id ) ; AddFixedNotification ( String.Format ( Resources.Entity.Environment.FilteredByDesignTemplateMessage , designEntry.Name ) ) ; filter += `` . '' + filters [ 1 ] ; } } } if ( ! String.IsNullOrEmpty ( searchString ) ) { entities = ( IOrderedQueryable < Product > ) entities.Where ( s = > s.Name.ToUpper ( ) .Contains ( searchString.ToUpper ( ) ) || ( ! String.IsNullOrEmpty ( s.FormName ) & & s.FormName.ToUpper ( ) .Contains ( searchString.ToUpper ( ) ) ) || ( ! String.IsNullOrEmpty ( s.UrlName ) & & s.UrlName.ToUpper ( ) .Contains ( searchString.ToUpper ( ) ) ) ) ; AddFixedNotification ( String.Format ( Resources.Entity.Environment.FilteredBySearchTermMessage , searchString ) ) ; } switch ( sortColumn ) { case `` id '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.Id ) : entities.OrderBy ( s = > s.Id ) ; break ; case `` name '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.Name ) : entities.OrderBy ( s = > s.Name ) ; break ; case `` enabled '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.IsEnabled ) : entities.OrderBy ( s = > s.IsEnabled ) ; break ; case `` formname '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.FormName ) : entities.OrderBy ( s = > s.FormName ) ; break ; case `` design '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.TemplateName ) : entities.OrderBy ( s = > s.TemplateName ) ; break ; case `` urlname '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.UrlName ) : entities.OrderBy ( s = > s.UrlName ) ; break ; case `` forms '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.SubmittedForms.Count ( ) ) : entities.OrderBy ( s = > s.SubmittedForms.Count ( ) ) ; break ; case `` modified '' : entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.ModificationDate ) : entities.OrderBy ( s = > s.ModificationDate ) ; break ; default : sortColumn = `` name '' ; sortOrder = `` '' ; entities = ( sortOrder == `` desc '' ) ? entities.OrderByDescending ( s = > s.Name ) : entities.OrderBy ( s = > s.Name ) ; break ; } ViewBag.SortColumn = sortColumn ; ViewBag.SortOrder = sortOrder == `` desc '' ? `` desc '' : `` '' ; ViewBag.SearchString = searchString ; ViewBag.Filter = filter ; int pageSize = StateHelper.GetPageSize ( ) ; int pageNumber = StateHelper.HasPageSizeChanged ? 1 : ( page ? ? 1 ) ; object selectionProduct = ModelHelper.GetSelectedModelId ( `` Product '' ) ; if ( selectionProduct ! = null ) { IEnumerable < IEnumerable < Product > > pp = entities.Partition ( pageSize ) ; int calculatedPage = 0 ; bool found = false ; foreach ( var item in pp ) { calculatedPage++ ; IEnumerable < Product > inner = item as IEnumerable < Product > ; foreach ( var product in inner ) { if ( product.Id == ( int ) selectionProduct ) { found = true ; ViewBag.selectedRowProduct = product.Id ; break ; } } if ( found ) break ; } if ( found ) pageNumber = calculatedPage ; } return View ( entities.ToPagedList ( pageNumber , pageSize ) ) ; } object selectionProduct = ModelHelper.GetSelectedModelId ( `` Product '' ) ; if ( selectionProduct ! = null ) { IEnumerable < IEnumerable < Product > > pp = entities.Partition ( pageSize ) ; int calculatedPage = 0 ; bool found = false ; foreach ( var item in pp ) { calculatedPage++ ; IEnumerable < Product > inner = item as IEnumerable < Product > ; foreach ( var product in inner ) { if ( product.Id == ( int ) selectionProduct ) { found = true ; ViewBag.selectedRowProduct = product.Id ; break ; } } if ( found ) break ; } if ( found ) pageNumber = calculatedPage ; } public static bool FindPage ( Type T , object modelId , IEnumerable < Type > entities , int pageSize , int calculatedPage , int ? id ) { if ( modelId ! = null ) { calculatedPage = 0 ; IEnumerable < IEnumerable < T > > pp = entities.Partition ( pageSize ) ; int page = 0 ; bool found = false ; foreach ( var item in pp ) { page++ ; IEnumerable < Type > inner = item as IEnumerable < Type > ; foreach ( var product in inner ) { if ( id == ( int ) modelId ) { found = true ; break ; } } if ( found ) break ; } if ( found ) calculatedPage = page ; else calculatedPage = 0 ; return found ; } return false ; } The type or namespace name 'T ' could not be found ( are you missing a using directive or an assembly reference ? )"
< authentication mode= '' Forms '' > < forms cookieless= '' UseCookies '' slidingExpiration= '' true '' timeout= '' 1 '' > < /forms > < /authentication >
using System ; using System.Linq ; public string FindArgument ( string [ ] args ) { var arg = args.FirstOrDefault ( x = > x == `` abc '' ) ; return arg ; } var arg = args.Contains ( `` abc '' ) ? `` abc '' : null ; return arg ;
static void Main ( string [ ] args ) { int j = 0 ; Func < int > f = ( ) = > { for ( int i = 0 ; i < 3 ; i++ ) { j += i ; } return j ; } ; int myStr = f ( ) ; Console.WriteLine ( myStr ) ; Console.WriteLine ( j ) ; Console.Read ( ) ; }
"protected override async void OnStart ( ) { PermissionStatus status = await CrossPermissions.Current.CheckPermissionStatusAsync ( Permission.LocationWhenInUse ) ; if ( status == PermissionStatus.Unknown ) { var result = await CrossPermissions.Current.RequestPermissionsAsync ( Permission.LocationWhenInUse ) ; } } if ( ActivityCompat.ShouldShowRequestPermissionRationale ( this , Manifest.Permission.AccessFineLocation ) ) { } else { ActivityCompat.RequestPermissions ( this , new String [ ] { Manifest.Permission.AccessFineLocation } , PERMISSIONS_REQUEST_LOCATION ) ; }"
"private static void OnSendingHeaderCallback ( object state ) { AuthenticationHandler handler = ( AuthenticationHandler ) state ; handler.ApplyResponseAsync ( ) .Wait ( ) ; } public async Task < T > GetConfigurationAsync ( CancellationToken cancel ) { DateTimeOffset now = DateTimeOffset.UtcNow ; if ( _currentConfiguration ! = null & & _syncAfter > now ) { return _currentConfiguration ; } await _refreshLock.WaitAsync ( cancel ) ; try { Exception retrieveEx = null ; if ( _syncAfter < = now ) { try { // Do n't use the individual CT here , this is a shared operation that should n't be affected by an individual 's cancellation . // The transport should have it 's own timeouts , etc.. _currentConfiguration = await _configRetriever.GetConfigurationAsync ( _metadataAddress , _docRetriever , CancellationToken.None ) ; Contract.Assert ( _currentConfiguration ! = null ) ; _lastRefresh = now ; _syncAfter = DateTimeUtil.Add ( now.UtcDateTime , _automaticRefreshInterval ) ; } catch ( Exception ex ) { retrieveEx = ex ; _syncAfter = DateTimeUtil.Add ( now.UtcDateTime , _automaticRefreshInterval < _refreshInterval ? _automaticRefreshInterval : _refreshInterval ) ; } } if ( _currentConfiguration == null ) { throw new InvalidOperationException ( string.Format ( CultureInfo.InvariantCulture , ErrorMessages.IDX10803 , _metadataAddress ? ? `` null '' ) , retrieveEx ) ; } // Stale metadata is better than no metadata return _currentConfiguration ; } finally { _refreshLock.Release ( ) ; } }"
"class MyType : TypeDelegator { public MyType ( Type parent ) : base ( parent ) { } } class Program { static void Main ( string [ ] args ) { Type t1 = typeof ( string ) ; Type t2 = new MyType ( typeof ( string ) ) ; Console.WriteLine ( EqualityComparer < Type > .Default.Equals ( t1 , t2 ) ) ; // < -- false Console.WriteLine ( EqualityComparer < Type > .Default.Equals ( t2 , t1 ) ) ; // < -- true Console.WriteLine ( t1.Equals ( t2 ) ) ; // < -- true Console.WriteLine ( t2.Equals ( t1 ) ) ; // < -- true Console.WriteLine ( Object.Equals ( t1 , t2 ) ) ; // < -- false Console.WriteLine ( Object.Equals ( t2 , t1 ) ) ; // < -- true } }"
"string encrypPassword = `` ThisIsMyPassword '' ; string encryptedString = EncryptString ( ClearString , encrypPassword ) ; // save encryptedString to harddrive"
"// Simple passthrough to next layer : elide.Task < string > PassthroughAsync ( int x ) = > _service.DoSomethingPrettyAsync ( x ) ; // Simple overloads for a method : elide.async Task < string > DoSomethingPrettyAsync ( CancellationToken cancellationToken ) { ... // Core implementation , using await . }"
"public class RepositoryFactory { public IRepository < IEntity > GetRepository ( FormTypes formType ) { // Represents the IRepository that should be created , based on the form type passed var typeToCreate = formType.GetAttribute < EnumTypeAttribute > ( ) .Type ; // return an instance of the form type repository IRepository < IEntity > type = Activator.CreateInstance ( typeToCreate ) as IRepository < IEntity > ; if ( type ! = null ) return type ; throw new ArgumentException ( string.Format ( `` No repository found for { 0 } '' , nameof ( formType ) ) ) ; } } public interface IRepository < T > where T : class , IEntity { bool Create ( IEnumerable < T > entities ) ; IEnumerable < T > Read ( ) ; bool Update ( IEnumerable < T > entities ) ; bool Delete ( IEnumerable < T > entities ) ; } public enum FormTypes { [ EnumType ( typeof ( Form64_9C2Repository ) ) ] Form64_9C2 , [ EnumType ( typeof ( Form64_9BaseRepository ) ) ] Form64_9Base } public static class EnumExtensions { /// < summary > /// Get the Enum attribute /// < /summary > /// < typeparam name= '' T '' > The attribute < /typeparam > /// < param name= '' enumValue '' > The enum < /param > /// < returns > The type to create < /returns > public static T GetAttribute < T > ( this System.Enum enumValue ) where T : Attribute { FieldInfo field = enumValue.GetType ( ) .GetField ( enumValue.ToString ( ) ) ; object [ ] attribs = field.GetCustomAttributes ( typeof ( T ) , false ) ; T result = default ( T ) ; if ( attribs.Length > 0 ) { result = attribs [ 0 ] as T ; } return result ; } } public class Form64_9C2Repository : IRepository < Form64_9C2 > { public bool Create ( IEnumerable < Form64_9C2 > entities ) { throw new NotImplementedException ( ) ; } public bool Delete ( IEnumerable < Form64_9C2 > entities ) { throw new NotImplementedException ( ) ; } public IEnumerable < Form64_9C2 > Read ( ) { throw new NotImplementedException ( ) ; } public bool Update ( IEnumerable < Form64_9C2 > entities ) { throw new NotImplementedException ( ) ; } } public interface IEntity { } public class Form64_9C2 : IEntity { } class Program { static void Main ( string [ ] args ) { Console.WriteLine ( `` Repository Factory Example \n\n '' ) ; Business.Factory.RepositoryFactory factory = new Business.Factory.RepositoryFactory ( ) ; // Get a 64 9C2 repository var repo9c2 = factory.GetRepository ( FormTypes.Form64_9C2 ) ; Console.WriteLine ( repo9c2 ) ; } }"
"using System ; using System.Net ; using System.Threading ; using System.Threading.Tasks ; static class Program { static int SumPageSizesSync ( string [ ] uris ) { int total = 0 ; var wc = new WebClient ( ) ; foreach ( var uri in uris ) { total += wc.DownloadData ( uri ) .Length ; Console.WriteLine ( `` Received synchronized data ... '' ) ; } return total ; } static async Task < int > SumPageSizesAsync ( string [ ] uris ) { int total = 0 ; var wc = new WebClient ( ) ; foreach ( var uri in uris ) { var data = await wc.DownloadDataTaskAsync ( uri ) ; Console.WriteLine ( `` Received async 'd CTP data ... '' ) ; total += data.Length ; } return total ; } static int SumPageSizesManual ( string [ ] uris ) { int total = 0 ; int remaining = 0 ; foreach ( var uri in uris ) { Interlocked.Increment ( ref remaining ) ; var wc = new WebClient ( ) ; wc.DownloadDataCompleted += ( s , e ) = > { Console.WriteLine ( `` Received manually async data ... '' ) ; Interlocked.Add ( ref total , e.Result.Length ) ; Interlocked.Decrement ( ref remaining ) ; } ; wc.DownloadDataAsync ( new Uri ( uri ) ) ; } while ( remaining > 0 ) { Thread.Sleep ( 25 ) ; } return total ; } static void Main ( string [ ] args ) { var uris = new string [ ] { // Just found a slow site , to demonstrate the problem : ) `` http : //www.europeanchamber.com.cn/view/home '' , `` http : //www.europeanchamber.com.cn/view/home '' , `` http : //www.europeanchamber.com.cn/view/home '' , `` http : //www.europeanchamber.com.cn/view/home '' , `` http : //www.europeanchamber.com.cn/view/home '' , } ; { var start = Environment.TickCount ; SumPageSizesSync ( uris ) ; Console.WriteLine ( `` Synchronous : { 0 } milliseconds '' , Environment.TickCount - start ) ; } { var start = Environment.TickCount ; SumPageSizesManual ( uris ) ; Console.WriteLine ( `` Manual : { 0 } milliseconds '' , Environment.TickCount - start ) ; } { var start = Environment.TickCount ; SumPageSizesAsync ( uris ) .Wait ( ) ; Console.WriteLine ( `` Async CTP : { 0 } milliseconds '' , Environment.TickCount - start ) ; } } } Received synchronized data ... Received synchronized data ... Received synchronized data ... Received synchronized data ... Received synchronized data ... Synchronous : 14336 millisecondsReceived manually async data ... Received manually async data ... Received manually async data ... Received manually async data ... Received manually async data ... Manual : 8627 milliseconds // Almost twice as fast ... Received async 'd CTP data ... Received async 'd CTP data ... Received async 'd CTP data ... Received async 'd CTP data ... Received async 'd CTP data ... Async CTP : 13073 milliseconds // Why so slow ? ?"
"Private Type PatchRec string As StringEnd TypePrivate Sub Command1_Click ( ) Dim intFileNum As Integer Dim recTest As TestRec intFileNum = FreeFile Open `` E : \testing '' & `` \ '' & `` testfile '' & `` .bin '' For Binary Access Write As # intFileNum recTest.string = `` This is a test string '' Put # intFileNum , , recPatch Close # intFileNumEnd Sub public static void Main ( params string [ ] args ) { using ( var fs = new FileStream ( `` test.bin '' , FileMode.Create , FileAccess.ReadWrite ) ) using ( var bw = new BinaryWriter ( fs ) ) { string str = `` This is a test string '' ; bw.Write ( str ) ; } } vb6 - 15 00 54 68 69 73 20 69 73 20 61 20 74 65 73 74 20 73 74 72 69 6E 67c # - 15 54 68 69 73 20 69 73 20 61 20 74 65 73 74 20 73 74 72 69 6E 67"
Indent of second line in Indentation Inde second line in Indentation Indentaof second line in Indentation of second line in Indentation of second line in Inde ntation of second line in
"var a = ( b.c = d ) ; public class TestClass { private bool _invertedBoolean ; public bool InvertedBoolean { get { return _invertedBoolean ; } set { //do n't ask me why you would with a boolean , //but consider rounding on currency values , or //properties which clone their input value instead //of taking the reference . _invertedBoolean = ! value ; } } } [ TestMethod ] public void ExampleTest ( ) { var t = new TestClass ( ) ; bool result ; result = ( t.InvertedBoolean = true ) ; Assert.IsFalse ( result ) ; }"
"public static Action < T1 , T2 > GetFieldSetter < T1 , T2 > ( this FieldInfo fieldInfo ) { if ( typeof ( T1 ) ! = fieldInfo.DeclaringType & & ! typeof ( T1 ) .IsSubclassOf ( fieldInfo.DeclaringType ) ) { throw new ArgumentException ( ) ; } ParameterExpression targetExp = Expression.Parameter ( typeof ( T1 ) , `` target '' ) ; ParameterExpression valueExp = Expression.Parameter ( typeof ( T2 ) , `` value '' ) ; // // Expression.Property can be used here as well MemberExpression fieldExp = Expression.Field ( targetExp , fieldInfo ) ; BinaryExpression assignExp = Expression.Assign ( fieldExp , valueExp ) ; // return Expression.Lambda < Action < T1 , T2 > > ( assignExp , targetExp , valueExp ) .Compile ( ) ; } // initialization of the setters dictionary Dictionary < string , object > setters = new Dictionary ( string , object ) ( ) ; Dictionary < string , FieldInfo > fldInfos = new Dictionary ( string , FieldInfo ) ( ) ; FieldInfo f = this.GetType ( ) .GetField ( `` my_int_field '' ) ; setters.Add ( f.Name , GetFieldSetter < object , int > ( f ) ; fldInfos.Add ( f.Name , f ) ; // f = this.GetType ( ) .GetField ( `` my_string_field '' ) ; setters.Add ( f.Name , GetFieldSetter < object , string > ( f ) ; fldInfos.Add ( f.Name , f ) ; void setFieldValue ( string fieldName , object value ) { var setterAction = setters [ fieldName ] ; // TODO : now the problem = > how do I invoke `` setterAction '' with // object and fldInfos [ fieldName ] as parameters ... ? } -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT A -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 0.0036 ms Set reflection : 2.319 ms Set ref.Emit : 1.8186 ms Set Accessor : 4.3622 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT B -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 0.0004 ms Set reflection : 0.1179 ms Set ref.Emit : 1.2197 ms Set Accessor : 2.8819 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT C -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 0.0024 ms Set reflection : 0.1106 ms Set ref.Emit : 1.1577 ms Set Accessor : 2.9451 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT A -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 33.2744 ms Set reflection : 1259.9551 ms Set ref.Emit : 531.0168 ms Set Accessor : 505.5682 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT B -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 38.7921 ms Set reflection : 2584.2972 ms Set ref.Emit : 971.773 ms Set Accessor : 901.7656 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT C -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 40.3942 ms Set reflection : 3796.3436 ms Set ref.Emit : 1510.1819 ms Set Accessor : 1469.4459 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT A -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 3.6849 ms Set reflection : 44.5447 ms Set ref.Emit : 47.1925 ms Set Accessor : 49.2954 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT B -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 4.1016 ms Set reflection : 76.6444 ms Set ref.Emit : 79.4697 ms Set Accessor : 83.3695 ms -- -- -- -- -- -- -- -- -- -- -- -- -- -- OBJECT C -- -- -- -- -- -- -- -- -- -- -- -- -- -- Set direct : 4.2907 ms Set reflection : 128.5679 ms Set ref.Emit : 126.6639 ms Set Accessor : 132.5919 ms"
"{ ' a ' , ' b ' , ' c ' } ! = { ' a ' , ' c ' , ' b ' } { new Customer { Id=2 , Name= '' abc '' } , new Customer { Id=3 , Name= '' def '' } } ! = { new Customer { Id=3 , Name= '' def '' } , new Customer { Id=2 , Name= '' abc '' } } { new Customer { Id=2 , Name= '' abc '' } , new Customer { Id=3 , Name= '' def '' } } == { new Customer { Id=2 , Name= '' abc '' } , new Customer { Id=3 , Name= '' def '' } }"
"namespace GServices { [ ServiceKnownType ( typeof ( SearchType ) ) ] [ ServiceContract ( SessionMode = SessionMode.Allowed ) ] public interface ITest { [ OperationContract ] int subtract ( int x , int y ) ; } [ ServiceKnownType ( typeof ( SearchType ) ) ] [ ServiceContract ( SessionMode = SessionMode.Allowed ) ] public interface ITest2 { [ OperationContract ] int add ( int x , int y ) ; } public class G : ITest2 , ITest { public int add ( int x , int y ) { return x + y ; } public int subtract ( int x , int y ) { return x + y ; } } } < service name= '' GQS1 '' behaviorConfiguration= '' GQwcfBehaviour '' > < endpoint address= '' DP2Svcs '' binding= '' wsHttpContextBinding '' bindingConfiguration= '' wsHttpEndpointBindingConfig '' contract= '' GServices.itest '' > < identity > < dns value= '' localhost '' / > < /identity > < /endpoint > < /service > < % @ ServiceHost Language= '' C # '' Debug= '' true '' Service= '' GServices.G '' % >"
"enum Test { None } ; int [ ] data = { 0 } ; Test [ ] result = Array.ConvertAll ( data , element = > ( Test ) element ) ; Test [ ] result = data.Cast < Test > ( ) .ToArray ( ) ; var result = data.Cast < Test > ( ) .ToList ( ) ; // Happens with `` ToList ( ) '' too . var result = new List < Test > ( ) ; foreach ( var item in data.Cast < Test > ( ) ) result.Add ( item ) ; var result = data.Select ( x = > x ) .Cast < Test > ( ) .ToList ( ) ; List < int > data = new List < int > { 0 } ; var result = data.Cast < Test > ( ) .ToList ( ) ; List < int > data = new List < int > { 0 } ; var result = data.Cast < Test > ( ) .ToArray ( ) ;"
"-1 -1 -1 -1 9 -1 -1 -1 -1 public static Bitmap ApplyWithPadding ( Bitmap image , Bitmap mask ) { if ( image.PixelFormat == PixelFormat.Format8bppIndexed ) { Bitmap imageClone = ( Bitmap ) image.Clone ( ) ; Bitmap maskClone = ( Bitmap ) mask.Clone ( ) ; ///////////////////////////////////////////////////////////////// Complex [ , ] cPaddedLena = ImageDataConverter.ToComplex ( imageClone ) ; Complex [ , ] cPaddedMask = ImageDataConverter.ToComplex ( maskClone ) ; Complex [ , ] cConvolved = Convolution.Convolve ( cPaddedLena , cPaddedMask ) ; return ImageDataConverter.ToBitmap ( cConvolved ) ; } else { throw new Exception ( `` not a grascale '' ) ; } } public static Bitmap Apply ( Bitmap sourceBitmap ) { Sharpen filter = new Sharpen ( ) ; BitmapData sourceData = sourceBitmap.LockBits ( new Rectangle ( 0 , 0 , sourceBitmap.Width , sourceBitmap.Height ) , ImageLockMode.ReadOnly , PixelFormat.Format32bppArgb ) ; byte [ ] pixelBuffer = new byte [ sourceData.Stride * sourceData.Height ] ; byte [ ] resultBuffer = new byte [ sourceData.Stride * sourceData.Height ] ; Marshal.Copy ( sourceData.Scan0 , pixelBuffer , 0 , pixelBuffer.Length ) ; sourceBitmap.UnlockBits ( sourceData ) ; double blue = 0.0 ; double green = 0.0 ; double red = 0.0 ; int filterWidth = filter.FilterMatrix.GetLength ( 1 ) ; int filterHeight = filter.FilterMatrix.GetLength ( 0 ) ; int filterOffset = ( filterWidth - 1 ) / 2 ; int calcOffset = 0 ; int byteOffset = 0 ; for ( int offsetY = filterOffset ; offsetY < sourceBitmap.Height - filterOffset ; offsetY++ ) { for ( int offsetX = filterOffset ; offsetX < sourceBitmap.Width - filterOffset ; offsetX++ ) { blue = 0 ; green = 0 ; red = 0 ; byteOffset = offsetY * sourceData.Stride + offsetX * 4 ; for ( int filterY = -filterOffset ; filterY < = filterOffset ; filterY++ ) { for ( int filterX = -filterOffset ; filterX < = filterOffset ; filterX++ ) { calcOffset = byteOffset + ( filterX * 4 ) + ( filterY * sourceData.Stride ) ; blue += ( double ) ( pixelBuffer [ calcOffset ] ) * filter.FilterMatrix [ filterY + filterOffset , filterX + filterOffset ] ; green += ( double ) ( pixelBuffer [ calcOffset + 1 ] ) * filter.FilterMatrix [ filterY + filterOffset , filterX + filterOffset ] ; red += ( double ) ( pixelBuffer [ calcOffset + 2 ] ) * filter.FilterMatrix [ filterY + filterOffset , filterX + filterOffset ] ; } } blue = filter.Factor * blue + filter.Bias ; green = filter.Factor * green + filter.Bias ; red = filter.Factor * red + filter.Bias ; if ( blue > 255 ) { blue = 255 ; } else if ( blue < 0 ) { blue = 0 ; } if ( green > 255 ) { green = 255 ; } else if ( green < 0 ) { green = 0 ; } if ( red > 255 ) { red = 255 ; } else if ( red < 0 ) { red = 0 ; } resultBuffer [ byteOffset ] = ( byte ) ( blue ) ; resultBuffer [ byteOffset + 1 ] = ( byte ) ( green ) ; resultBuffer [ byteOffset + 2 ] = ( byte ) ( red ) ; resultBuffer [ byteOffset + 3 ] = 255 ; } } Bitmap resultBitmap = new Bitmap ( sourceBitmap.Width , sourceBitmap.Height ) ; BitmapData resultData = resultBitmap.LockBits ( new Rectangle ( 0 , 0 , resultBitmap.Width , resultBitmap.Height ) , ImageLockMode.WriteOnly , PixelFormat.Format32bppArgb ) ; Marshal.Copy ( resultBuffer , 0 , resultData.Scan0 , resultBuffer.Length ) ; resultBitmap.UnlockBits ( resultData ) ; return resultBitmap ; } string path = @ '' E : \lena.png '' ; string path2 = @ '' E : \mask.png '' ; Bitmap _inputImage ; Bitmap _maskImage ; private void LoadImages_Click ( object sender , EventArgs e ) { _inputImage = Grayscale.ToGrayscale ( Bitmap.FromFile ( path ) as Bitmap ) ; /* _maskImage = Grayscale.ToGrayscale ( Bitmap.FromFile ( path2 ) as Bitmap ) ; */ SharpenFilter filter = new SharpenFilter ( ) ; double [ , ] mask = new double [ , ] { { -1 , -1 , -1 , } , { -1 , 9 , -1 , } , { -1 , -1 , -1 , } , } ; _maskImage = ImageDataConverter.ToBitmap ( mask ) ; inputImagePictureBox.Image = _inputImage ; maskPictureBox.Image = _maskImage ; } Bitmap _paddedImage ; Bitmap _paddedMask ; private void padButton_Click ( object sender , EventArgs e ) { Bitmap lena = Grayscale.ToGrayscale ( _inputImage ) ; Bitmap mask = Grayscale.ToGrayscale ( _maskImage ) ; ////Not working ... //int maxWidth = ( int ) Math.Max ( lena.Width , mask.Width ) ; //int maxHeight = ( int ) Math.Max ( lena.Height , mask.Height ) ; ////This is working correctly in case if I use a png image as a mask . int maxWidth = ( int ) Tools.ToNextPow2 ( Convert.ToUInt32 ( lena.Width + mask.Width ) ) ; int maxHeight = ( int ) Tools.ToNextPow2 ( Convert.ToUInt32 ( lena.Height + mask.Height ) ) ; _paddedImage = ImagePadder.Pad ( lena , maxWidth , maxHeight ) ; _paddedMask = ImagePadder.Pad ( mask , maxWidth , maxHeight ) ; paddedImagePictureBox.Image = _paddedImage ; paddedMaskPictureBox.Image = _paddedMask ; } private void filterButton_Click ( object sender , EventArgs e ) { // Not working properly . // Freezes the application . Bitmap sharp = SharpenFilter.ApplyWithPadding ( _paddedImage , _paddedMask ) ; ////Works well . But , very slow . //Bitmap sharp = SharpenFilter.Apply ( _paddedImage ) ; filteredPictureBox.Image = sharp as Bitmap ; }"
"services.AddSwaggerGen ( c = > { // Other swagger options c.AddSecurityDefinition ( `` Bearer '' , new ApiKeyScheme { In = `` header '' , Description = `` Please enter into field the word 'Bearer ' following by space and your JWT token '' , Name = `` Authorization '' , Type = `` apiKey '' } ) ; c.AddSecurityRequirement ( new Dictionary < string , IEnumerable < string > > { { `` Bearer '' , Enumerable.Empty < string > ( ) } , } ) ; // Other swagger options } ) ;"
ApplicationName.exe_p4952_r15_ad1
< membership > < providers > < add connectionStringName= '' MyServer '' name= '' MyServer '' type= '' System.Web.Security.SqlMembershipProvider '' enablePasswordReset= '' true '' requiresQuestionAndAnswer= '' false '' enablePasswordRetrieval= '' false '' / > < /providers > < /membership >
"public static int [ ] CreateArray ( int size ) { var ret = new int [ size ] ; ret [ 0 ] = 0 ; ret [ 1 ] = 1 ; Parallel.ForEach ( Enumerable.Range ( 2 , size - 2 ) , i = > { ret [ i ] = Func ( i ) .Count ( ) ; } ) ; return ret ; } public static IEnumerable < int > Func ( int i ) { ... } public static int [ ] CreateArray ( int size ) { var tableFromIndex2 = ... return new [ ] { 0 , 1 } .Concat ( tableFromIndex2 ) .ToArray ( ) ; }"
public TResponse Execute < TResponse > ( Request request ) where TResponse : Response { return ( TResponse ) proxy.ExecuteRequest ( request ) ; Execute < GetSomeDataResponse > ( new GetSomeDataRequest ( ) ) ; public Task < TResponse > ExecuteAsync < TResponse > ( Request request ) where TResponse : Response { // need to cast to a Task < TResponse > return proxy.ExecuteRequestAsync ( request Task < GetSomeDataResponse > res = ExecuteAsync < GetSomeDataResponse > ( new GetSomeDataRequest ( ) ) ;
protected internal virtual OkResult Ok ( ) ; // Note that I 'm not overriding base methodprotected IHttpActionResult Ok ( string message = null ) ; IHttpActionResult result = Ok ( ) ; protected override async Task < IHttpActionResult > Delete ( Key id ) { bool deleted = // ... Attempts to delete entity if ( deleted ) return Ok ( ) ; else return NotFound ( ) ; }
Server [ @ Name='MyServerName ' ] /Database [ @ Name='MyDatabaseName ' ] /Table [ @ Name='MyTableName ' and @ Schema='MySchemaName ' ]
"Array.ForEach ( arr , proc ) arr.ForEach ( proc ) Array.Sort ( arr ) arr.Sort ( )"
"public class Demo : ICloneable { public int Value { get ; set ; } public string UID { get ; set ; } public Demo ( int nValue ) { Value = nValue ; } public object Clone ( ) { return this.MemberwiseClone ( ) ; } } public class Program { public static void Print ( List < Demo > objList ) { Console.WriteLine ( ) ; foreach ( Demo objDemo in objList ) { Console.WriteLine ( `` { 0 } = { 1 } '' , objDemo.UID , objDemo.Value ) ; } } public static void Main ( ) { List < Demo > objList = new List < Demo > ( ) ; Demo obj1 = new Demo ( 100 ) ; obj1.UID = `` Demo_obj1 '' ; Demo obj2 = ( Demo ) obj1.Clone ( ) ; obj2.UID = `` Demo_obj2 '' ; objList.Add ( obj1 ) ; objList.Add ( obj2 ) ; Print ( objList ) ; obj1 = obj2 ; obj1.Value = 200 ; Console.WriteLine ( ) ; Console.WriteLine ( obj1.UID + `` = `` + obj1.Value ) ; Console.WriteLine ( obj2.UID + `` = `` + obj2.Value ) ; Print ( objList ) ; Console.ReadKey ( ) ; } } Demo_obj1 = 100Demo_obj2 = 100Demo_obj2 = 200Demo_obj2 = 200Demo_obj1 = 100Demo_obj2 = 200"
"app.UseCors ( builder = > builder.WithOrigins ( `` http : //localhost:8080 '' , `` https : //test-env.com '' ) .AllowAnyHeader ( ) .AllowAnyMethod ( ) ) ;"
< xsd : element name= '' metadata '' > < xsd : complexType > < xsd : sequence > < xsd : element name= '' value '' type= '' xsd : string '' minOccurs= '' 0 '' / > < /xsd : sequence > < xsd : attribute name= '' name '' use= '' required '' type= '' xsd : string '' / > < xsd : attribute name= '' type '' type= '' xsd : string '' / > < xsd : attribute name= '' mimetype '' type= '' xsd : string '' / > < xsd : attribute ref= '' xml : space '' / > < /xsd : complexType > < /xsd : element >
"public class LoginViewModel : ViewModelBase , ILoginViewModel , INavigationAware { ... [ ImportingConstructor ] public LoginViewModel ( IRegionManager regionManager , IUnityContainer container , IEventAggregator eventAggregator ) { _regionManager = regionManager ; _container = container ; _eventAggregator = eventAggregator ; } private DelegateCommand _Login ; public DelegateCommand Login { get { if ( _Login == null ) _Login = new DelegateCommand ( ( ) = > LoginHandler ( ) ) ; return _Login ; } } private void LoginHandler ( ) { _client = new JabberClient ( ) ; _client.Server = `` gmail.com '' ; _client.User = Username ; _client.Password = Password ; ... _client.OnAuthenticate += client_OnAuthenticate ; _client.Connect ( ) ; } private void client_OnAuthenticate ( object sender ) { Console.WriteLine ( `` Authenticated ! `` ) ; _eventAggregator.GetEvent < UserAuthenticatedEvent > ( ) .Publish ( `` '' ) ; } public bool IsNavigationTarget ( NavigationContext navigationContext ) { return true ; } ... } public class RosterViewModel : IRosterViewModel , INavigationAware { private readonly IEventAggregator _eventAggregator ; private readonly IRegionManager _regionManager ; [ ImportingConstructor ] public RosterViewModel ( IRegionManager regionManager , IEventAggregator eventAggregator ) { _regionManager = regionManager ; _eventAggregator = eventAggregator ; _eventAggregator.GetEvent < UserAuthenticatedEvent > ( ) .Subscribe ( o = > { Console.WriteLine ( `` Requesting navigation ... '' ) ; _regionManager.RequestNavigate ( RegionNames.ContentRegion , new Uri ( WellKnownViewNames.RosterView , UriKind.Relative ) ) ; } ) ; } public bool IsNavigationTarget ( NavigationContext navigationContext ) { return true ; } public void OnNavigatedFrom ( NavigationContext navigationContext ) { } public void OnNavigatedTo ( NavigationContext navigationContext ) { Console.WriteLine ( `` I 'm here at the RosterViewModel '' ) ; } }"
TypeName UnderlyingType { get ; } Type UnderlyingType { get ; }
@ using ( Html.BeginForm ) { < div class= '' step '' id= '' step1 '' > @ Html.Partial ( `` Step1 '' ) < /div > < div class= '' step '' id= '' step2 '' > @ Html.Partial ( `` Step2 '' ) < /div > }
"// summary and param tags are here when you 're not looking./// < exception cref= '' ArgumentNullException > /// < paramref name= '' text '' / > is null./// < /exception > public void Write ( string text ) { if ( text == null ) throw new ArgumentNullException ( `` text '' , `` Text must not be null . `` ) ; // sync stuff ... } public async Task WriteAsync ( string text ) { if ( text == null ) throw new ArgumentNullException ( `` text '' , `` Text must not be null . `` ) ; // async stuff ... } Task t ; try { t = foo.WriteAsync ( text ) ; } catch ( ArgumentNullException ) { // handling stuff . }"
"[ ComVisible ( true ) ] [ AttributeUsageAttribute ( AttributeTargets.Constructor | AttributeTargets.Method , AllowMultiple = true , Inherited = false ) ] public sealed class MyPrincipalPermissionAttribute : CodeAccessSecurityAttribute { public MyPrincipalPermissionAttribute ( SecurityAction action ) : base ( action ) { } public override IPermission CreatePermission ( ) { if ( Unrestricted ) return new PrincipalPermission ( PermissionState.Unrestricted ) ; var stackTrace = new StackTrace ( ) ; var fullnameArray = new List < String > ( ) ; foreach ( var frame in stackTrace.GetFrames ( ) ) { try { var method = frame.GetMethod ( ) ; if ( method ! = null & & method.ReflectedType.IsSubclassOf ( typeof ( BaseClass ) ) ) fullnameArray.Add ( method.ReflectedType.FullName ) ; } catch { } } if ( fullnameArray.Count ( ) > 0 ) return new PrincipalPermission ( null , fullnameArray [ 0 ] , true ) ; return new PrincipalPermission ( PermissionState.Unrestricted ) ; } } public class MyClassCalledFirstWork : BaseClass { [ MyPrincipalPermission ( SecurityAction.Demand ) ] public override void DoSomething ( ) { return ; } } public class MyClassCalledSecondDontWork : BaseClass { [ MyPrincipalPermission ( SecurityAction.Demand ) ] public override void DoSomething ( ) { return ; } }"
"enum MyEnum { mine = 1 , his = 1 }"
object theLock = new object ( ) ; ... lock ( theLock ) { ... }
"internal class DummyDataStore : IBotDataStore < BotData > { public DummyDataStore ( ) { } public Task < bool > FlushAsync ( IAddress key , CancellationToken cancellationToken ) { return Task.FromResult ( true ) ; } public Task < BotData > LoadAsync ( IAddress key , BotStoreType botStoreType , CancellationToken cancellationToken ) { return Task.FromResult ( new BotData ( ) ) ; } public Task SaveAsync ( IAddress key , BotStoreType botStoreType , BotData data , CancellationToken cancellationToken ) { return Task.CompletedTask ; } } Conversation.UpdateContainer ( builder = > { //Registration of message logger builder.RegisterType < BotMessageLogger > ( ) .AsImplementedInterfaces ( ) .InstancePerDependency ( ) ; //Registration of dummy data storage var store = new DummyDataStore ( ) ; builder.Register ( c = > store ) .As < IBotDataStore < BotData > > ( ) .AsSelf ( ) .SingleInstance ( ) ; } ) ; Conversation.UpdateContainer ( builder = > { var store = new InMemoryDataStore ( ) ; builder.Register ( c = > store ) .Keyed < IBotDataStore < BotData > > ( AzureModule.Key_DataStore ) .AsSelf ( ) .SingleInstance ( ) ; } ) ;"
"private IDictionary < string , ICollection < string > > foos ; public IEnumerable < KeyValuePair < string , IEnumerable < string > > Foos { get { return foos ; } } public IEnumerable < KeyValuePair < string , IEnumerable < string > > > Foos { get { return foos.Select ( x = > new KeyValuePair < string , IEnumerable < string > > ( x.Key , x.Value ) ) ; } }"
object a= student1 ; //student1 is instance of Student class string typeName=GetTypeNameInsideObject ( obj1 )
"var doc = Globals.ThisAddIn.Application.ActiveWindow ( ) .WordEditor ; var pic = doc.Application.Selection.InlineShapes.AddPicture ( `` MY IMAGE URL '' , true ) ; doc.Application.Selection.Hyperlinks.add ( pic , `` MY URL '' ) ;"
"List < string > values = new List < string > ( ) ; GroupServiceClient client = new GroupServiceClient ( `` WSHttpBinding_IGroupService '' ) ; www.test.co.uk.programme.programme Group = new www.test.co.uk.programme.programme ( ) ; DateTime time = DateTime.Now ; values.Clear ( ) ; client.Open ( ) ; Group.number = textBox1.Text ; client.GetGroup ( ref time , ref Group ) ; GroupStorageMessage toReturn = new GroupStorageMessage ( ) ; toReturn.group = Group ; selectedGroupId = Convert.ToString ( toReturn.group.number ) ; values.Add ( Convert.ToString ( toReturn.group.number ) ) ; values.Add ( Convert.ToString ( toReturn.group.name ) ) ; listBox1.ItemsSource=values ; client.Close ( ) ; ServiceReference1.programme Group = new ServiceReference1.programme ( ) ; ServiceReference1.GroupServiceClient Client = new ServiceReference1.GroupServiceClient ( ) ; DateTime Time = DateTime.Now ; Client.Open ( ) ; string [ ] aa = new string [ 1 ] ; aa [ 0 ] = textBox1.Text ; Group.tags = aa ; Client.GetGroups ( ref Time , Group ) ; ServiceReference1.GroupArrayMessage toReturn = new ServiceReference1.GroupArrayMessage ( ) ; ServiceReference1.programme [ ] Groups = new ServiceReference1.programme [ 1 ] ; toReturn.groups = Groups ; = returns null [ ServiceContract ( Namespace = `` http : //www.Test.co.uk/groupstorage '' ) ] public interface IGroupStorageService { /** * Get a group from the collection of groups */ [ OperationContract ] GroupStorageMessage GetGroup ( GroupStorageMessage message ) ; /** * Add a group to the collection of groups */ [ OperationContract ] void AddGroup ( GroupStorageMessage message ) ; /** * Remove a group from the collection of groups */ [ OperationContract ] void RemoveGroup ( GroupStorageMessage message ) ; /** * Update a group in the collection of groups */ [ OperationContract ] void UpdateGroup ( GroupStorageMessage message ) ; [ OperationContract ] GroupArrayMessage GetGroups ( GroupStorageMessage message ) ; } [ MessageContract ] public class GroupArrayMessage { /** * Message header is the timestamp when the message was created */ [ MessageHeader ( Name = `` time '' ) ] public DateTime Time ; /** * Message body is a collection of Users */ [ MessageBodyMember ( Name = `` groups '' ) ] public Group [ ] Groups ; } [ DataContract ( Namespace = `` http : //www.test.co.uk/programme '' , Name = `` programme '' ) ] public class Group { /** * The number representing the Programme ( Programme ID ) */ [ DataMember ( Name = `` number '' ) ] public string Number ; /** * The name of the Programme */ [ DataMember ( Name = `` name '' ) ] public string Name ; /// < summary > /// Add Tags /// < /summary > [ DataMember ( Name = `` tags '' ) ] public string [ ] Tags ;"
"[ DataContract ] public class MyContract { [ DataMember ] public int Identity { get ; set ; } [ DataMember ] public string Name { get ; set ; } // More members } public class static MyContractFactory { public static MyContract GetMyContract ( ) { // Complex implementation } } namespace MyPrefix.WebServicve1 { [ ServiceContract ] public class IMyInterface1 { [ OperationContract ] public void DoSomethingWithMyContract ( MyContract data ) ; } [ ServiceContract ] public class IMyInterface2 { [ OperationContract ] public void DoSomethingDifferentWithMyContract ( MyContract data ) ; } } MyWebService1.MyContractMyWebService2.MyContract [ OperationContract ] public void DoSomethingWithMyContract ( MyContract data ) ; [ OperationContract ( Name = `` DoSomethingWithMyDataByAdditionalData '' ] public void DoSomethingWithMyContract ( MyContract data , MyContract2 additionalData ) ; [ ServiceContract ( Name = `` IServiceContract '' , Namespace = `` http : //myurl/2012/05 '' ) ] public interface IServiceContract1 { // Some operations } [ ServiceContract ( Name = `` IServiceContract '' , Namespace = `` http : //myurl/2012/06 '' ) ] public interface IServiceContract2 { // Some different operations using new DataContracts } public class MyService : IServiceContract1 , IServiceContract2 { // Implement both operations } < service behaviorConfiguration= '' WcfServiceTests.ServiceBehavior '' name= '' Test.MyService '' > < endpoint address= '' 2012/05 '' binding= '' wsHttpBinding '' contract= '' Test.IServiceContract1 '' > < identity > < dns value= '' localhost '' / > < /identity > < /endpoint > < endpoint address= '' 2012/06 '' binding= '' wsHttpBinding '' contract= '' Test.IServiceContract2 '' > < identity > < dns value= '' localhost '' / > < /identity > < /endpoint > < endpoint address= '' mex '' binding= '' mexHttpBinding '' contract= '' IMetadataExchange '' / > < /service >"
public IQueryable < Bar > GetBars ( [ FromODataUri ] int key ) { } public IQueryable < Foo > GetFoos ( ) { }
"< behaviors > < endpointBehaviors > < behavior name= '' ScannerManagerBehavior '' > < clientCredentials > < clientCertificate findValue= '' ClientName '' x509FindType= '' FindBySubjectName '' storeLocation= '' CurrentUser '' storeName= '' My '' / > < serviceCertificate > < authentication certificateValidationMode= '' PeerTrust '' / > < /serviceCertificate > < /clientCredentials > < /behavior > < /endpointBehaviors > < /behaviors > DuplexChannelFactory < IScannerManager > _smFactory = new DuplexChannelFactory < IScannerManager > ( instanceContext , nameOfEndPoint ) ; var _commsChannel = _smFactory.CreateChannel ( ) ;"
"using System ; using System.Collections.Generic ; using System.Linq ; namespace ContainsNotDoingWhatIThoughtItWould { class Program { public class MyEquatable : IEquatable < MyEquatable > { string [ ] tags ; public MyEquatable ( params string [ ] tags ) { this.tags = tags ; } public bool Equals ( MyEquatable other ) { if ( other == null ) { return false ; } if ( this.tags.Count ( ) ! = other.tags.Count ( ) ) { return false ; } var commonTags = this.tags.Intersect ( other.tags ) ; return commonTags.Count ( ) == this.tags.Count ( ) ; } public override int GetHashCode ( ) { int hash = 17 ; foreach ( string element in this.tags.OrderBy ( x = > x ) ) { hash = unchecked ( hash * element.GetHashCode ( ) ) ; } return hash ; } } static void Main ( string [ ] args ) { // Two objects for the search list var a = new MyEquatable ( `` A '' ) ; var ab = new MyEquatable ( `` A '' , `` B '' ) ; IEnumerable < MyEquatable > myList = new MyEquatable [ ] { a , ab } ; // This is the MyEquatable that we want to find var target = new MyEquatable ( `` A '' , `` B '' ) ; // Check that the equality and hashing works var isTrue1 = target.GetHashCode ( ) == ab.GetHashCode ( ) ; var isTrue2 = target.Equals ( ab ) ; var isFalse1 = target.GetHashCode ( ) == a.GetHashCode ( ) ; var isFalse2 = target.Equals ( a ) ; // Why is this false ? var whyIsThisFalse = myList.Contains ( target ) ; // If that is false , why is this true ? var wrappedChildTarget = new List < MyEquatable > { target } ; var thisIsTrue = myList.Intersect ( wrappedChildTarget ) .Any ( ) ; } } }"
"class Program { static void Main ( string [ ] args ) { var obj = new SetTree < int > ( ) ; var dyn = ( dynamic ) obj ; Program.Print ( dyn ) ; // throws StackOverflowException ! ! // Note : this works just fine for 'everything else ' but my SetTree < T > } static void Print ( object obj ) { Console.WriteLine ( `` object '' ) ; } static void Print < TKey > ( ISortedSet < TKey > obj ) { Console.WriteLine ( `` set '' ) ; } } interface ISortedSet < TKey > { } sealed class SetTree < TKey > : BalancedTree < SetTreeNode < TKey > > , ISortedSet < TKey > { } abstract class BalancedTree < TNode > where TNode : TreeNode < TNode > { } abstract class SetTreeNode < TKey > : KeyTreeNode < SetTreeNode < TKey > , TKey > { } abstract class KeyTreeNode < TNode , TKey > : TreeNode < TNode > where TNode : KeyTreeNode < TNode , TKey > { } abstract class TreeNode < TNode > where TNode : TreeNode < TNode > { } EAX = 02B811B4 EBX = 0641EA5C ECX = 02C3B0EC EDX = 02C3A504 ESI = 02C2564CEDI = 0641E9AC EIP = 011027B9 ESP = 0641E91C EBP = 0641E9B8 EFL = 00000202"
"[ DllImport ( `` Mpr.dll '' , CharSet = CharSet.Unicode , SetLastError = true ) ] private static extern int WNetAddConnection2 ( [ In ] NetResource lpNetResource , string lpPassword , string lpUsername , int flags ) ; public static bool Connect ( string remoteName , string localName , bool persistent ) { if ( ! IsLocalPathValid ( localName ) ) return false ; var r = new NetResource { dwScope = ResourceScope.RESOURCE_GLOBALNET , dwType = ResourceType.RESOURCETYPE_ANY , dwDisplayType = ResourceDisplayType.RESOURCEDISPLAYTYPE_SHARE , dwUsage = ResourceUsage.RESOURCEUSAGE_CONNECTABLE , lpRemoteName = remoteName , lpLocalName = localName } ; return WNetAddConnection2 ( r , null , null , persistent ? 1 : 0 ) == 0 ; } [ StructLayout ( LayoutKind.Sequential ) ] public class NetResource { public ResourceScope dwScope ; public ResourceType dwType ; public ResourceDisplayType dwDisplayType ; public ResourceUsage dwUsage ; public string lpLocalName ; public string lpRemoteName ; public string lpComment ; public string lpProvider ; } Connect ( @ '' \\server\folder '' , `` X : '' , true ) ; lpRemoteName = `` \\\\server\\folder '' ; lpProvider = null ; lpLocalName = `` X : '' ; lpComment = null ; dwUsage = Connectable ; dwType = Any ; dwScope = GlobalNet ; dwDisplayType = Share ;"
"var scriptText = File.ReadAllText ( args [ 0 ] ) ; var scriptOptions = ScriptOptions.Default .WithReferences ( typeof ( System.Object ) .GetTypeInfo ( ) .Assembly ) ; var script = CSharpScript.Create ( scriptText , scriptOptions , typeof ( Globals ) ) ; var scriptArgs = new string [ args.Length-1 ] ; Array.Copy ( args , 1 , scriptArgs , 0 , args.Length-1 ) ; script.RunAsync ( new Globals { Args = scriptArgs } ) .GetAwaiter ( ) .GetResult ( ) ; public class Globals { public string [ ] Args { get ; set ; } } using System ; Console.WriteLine ( `` Args [ 0 ] : { 0 } '' , Args [ 0 ] ) ; $ dotnet run test.csxProject BitThicket.DotNet.ScriptTool ( .NETCoreApp , Version=v1.0 ) was previously compiled . Skipping compilation.Script error : Microsoft.CodeAnalysis.Scripting.CompilationErrorException : ( 7,9 ) : error CS1501 : No overload for method 'WriteLine ' takes 2 arguments at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.ThrowIfAnyCompilationErrors ( DiagnosticBag diagnostics , DiagnosticFormatter formatter ) at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.CreateExecutor [ T ] ( ScriptCompiler compiler , Compilation compilation , CancellationToken cancellationToken ) at Microsoft.CodeAnalysis.Scripting.Script ` 1.GetExecutor ( CancellationToken cancellationToken ) at Microsoft.CodeAnalysis.Scripting.Script ` 1.RunAsync ( Object globals , Func ` 2 catchException , CancellationToken cancellationToken ) at BitThicket.DotNet.ScriptTool.Program.Main ( String [ ] args ) in /Users/ben/proj/bt/dotnet-scriptcs/src/BitThicket.DotNet.ScriptTool/Program.cs : line 63"
"// 1 - value : System.String [ , , , ] [ , , ] [ , ] string unexpectedFullName = typeof ( string [ , ] [ , , ] [ , , , ] ) .FullName ; // 2 - value : System.String [ , ] [ , , ] [ , , , ] string expectedFullName = Type.GetType ( `` System.String [ , ] [ , , ] [ , , , ] '' ) .FullName ;"
"int index = hashCode % [ Dictionary Capacity ] ; public override int GetHashCode ( ) { unchecked { int hash = 17 ; // Suitable nullity checks etc , of course : ) hash = hash * 23 + field1.GetHashCode ( ) ; hash = hash * 23 + field2.GetHashCode ( ) ; hash = hash * 23 + field3.GetHashCode ( ) ; return hash ; } } int hash = 17 ; hash = hash * 23 + 11 ; //402 hash = hash * 23 + 17 ; //9263 hash = hash * 23 + 173 //213222 return hash ;"
var r = new RegionInfo ( `` MD '' ) ;
"dynamic newObject= new NewObject ( ) ; MapperConfiguration config = new MapperConfiguration ( cfg = > { cfg.CreateMissingTypeMaps = true ; cfg.AddGlobalIgnore ( `` LU '' ) ; cfg.ShouldMapProperty = p = > ! p.GetType ( ) .ToString ( ) .StartsWith ( `` LU '' ) ; cfg.ShouldMapField = p = > ! p.GetType ( ) .ToString ( ) .StartsWith ( `` LU '' ) ; } ) ; IMapper mapper = config.CreateMapper ( ) ; newObject = mapper.Map ( objectToCopy , objectToCopy.GetType ( ) , newObject.GetType ( ) ) ; MapperConfiguration config = new MapperConfiguration ( cfg = > { cfg.CreateMissingTypeMaps = true ; cfg.AddGlobalIgnore ( `` LU '' ) ; cfg.ShouldMapProperty = p = > ! p.PropertyType.Name.StartsWith ( `` LU '' ) ; cfg.ShouldMapField = p = > ! p.FieldType.Name.StartsWith ( `` LU '' ) ; } ) ; MapperConfiguration config = new MapperConfiguration ( cfg = > { cfg.CreateMissingTypeMaps = true ; cfg.AddGlobalIgnore ( `` LU '' ) ; cfg.ShouldMapProperty = p = > ! p.Name.StartsWith ( `` LU '' ) ; cfg.ShouldMapField = p = > ! p.Name.StartsWith ( `` LU '' ) ; } ) ;"
if ( shapes.Contains ( shape ) ) { // DoSomething } public int CompareTo ( Shape other ) { return this.coordinate.Equals ( other.coordinate ) ; } Can not implicitly convert type 'bool ' to 'int ' return this.coordinate.CompareTo ( other.coordinate ) ;
"int index = 0 ; foreach ( var websitePage in websitePages ) { if ( index == 0 ) classAttributePart = `` class=\ '' first\ '' '' ; sb.AppendLine ( String.Format ( `` < li '' + classAttributePart + `` > '' + `` < a href=\ '' { 0 } \ '' > { 1 } < /a > < /li > '' , websitePage.GetFileName ( ) , websitePage.Title ) ) ; index++ ; }"
"public bool HasChanges { get { return customers.Any ( customer = > customer.Changed ) ; } } < Button IsEnabled= '' { Binding HasChanges , Mode=OneWay } '' ..."
"// Something that `` runs '' ( in some coordinated way ) multiple `` runnable '' things.interface IRunnableOf < T > where : IRunnable// Provide base-class functionality for a `` runner '' abstract class RunnerBase < T > : IRunnableOf < T > class SequentialRunner < T > : RunnerBase < T > // Same interface , different behavior.class ConcurrentRunner < T > : RunnerBase < T > // other types of runners.class ConcurrentBlockRunner : SequentialRunner < Block > class SequentialBlockRunner : ConcurrentRunner < Block > interface IBlockRunner : IRunnableOf < Block > { } class ConcurrentBlockRunner : SequentialRunner < Block > , IBlockRunnerclass SequentialBlockRunner : ConcurrentRunner < Block > , IBlockRunner abstract class BlockRunnerBase { int Prop1 { get ; set ; } int Prop2 { get ; set ; } class ConcurrentBlockRunner : SequentialRunner < Block > , BlockRunnerBaseclass SequentialBlockRunner : ConcurrentRunner < Block > , BlockRunnerBase class BlockRunner : IBlockRunner { IBlockRunner _member ; int Prop1 { get ; set ; } // Wish I could put these in some base class int Prop2 { get ; set ; } // Lots of proxy calls , and proxy events into _member void Method ( ) { _member.Method ( ) ; } event SomeEvent { add { _member.SomeEvent += value ; } remove { _member.SomeEvent -= value ; } } }"
"internal static List < DetectedWindow > EnumerateWindows ( ) { var shellWindow = GetShellWindow ( ) ; var windows = new List < DetectedWindow > ( ) ; EnumWindows ( delegate ( IntPtr handle , int lParam ) { if ( handle == shellWindow ) return true ; if ( ! IsWindowVisible ( handle ) ) return true ; if ( IsIconic ( handle ) ) return true ; var length = GetWindowTextLength ( handle ) ; if ( length == 0 ) return true ; var builder = new StringBuilder ( length ) ; GetWindowText ( handle , builder , length + 1 ) ; GetWindowRect ( handle , out Rect rect ) ; windows.Add ( new DetectedWindow ( handle , rect.ToRect ( ) , builder.ToString ( ) ) ) ; return true ; } , IntPtr.Zero ) ; return windows ; } public class DetectedWindow { public IntPtr Handle { get ; private set ; } public Rect Bounds { get ; private set ; } public string Name { get ; private set ; } public DetectedWindow ( IntPtr handle , Rect bounds , string name ) { Handle = handle ; Bounds = bounds ; Name = name ; } } Microsoft Visual Studio - -8 ; -8 ; 1936 ; 1056Microsoft Edge - 0 ; 77 ; 1920 ; 963EnumWindows - Stack Overflow and 7 more pages ‎- Microsoft Edge - -8 ; -8 ; 1936 ; 1056Microsoft Edge - 0 ; 77 ; 1920 ; 963Microsoft Edge - 0 ; 77 ; 1920 ; 963Microsoft Edge - 0 ; 0 ; 1920 ; 1080Microsoft Edge - 0 ; 0 ; 1920 ; 1080Microsoft Edge - 0 ; 8 ; 1920 ; 1040Microsoft Edge - 0 ; 85 ; 1920 ; 963Microsoft Edge - 150 ; 79 ; 1532 ; 42Microsoft Edge - 0 ; 85 ; 1920 ; 963Microsoft Edge - 0 ; 77 ; 1920 ; 963Microsoft Edge - 0 ; 85 ; 1920 ; 963Microsoft Edge - 0 ; 213 ; 1920 ; 964Microsoft Edge - 0 ; 0 ; 1920 ; 1080Microsoft Edge - 484 ; 208 ; 952 ; 174Microsoft Edge - 0 ; 84 ; 1920 ; 964Microsoft Edge - 0 ; 84 ; 1920 ; 964Microsoft Edge - 0 ; 84 ; 1920 ; 964 Microsoft Edge - 0 ; 0 ; 1920 ; 1080Mail - 0 ; 32 ; 1356 ; 693Mail - 278 ; 252 ; 1372 ; 733OneNote - 0 ; 8 ; 1920 ; 1040My notes - OneNote - -8 ; -8 ; 1936 ; 1056Photos - 0 ; 32 ; 1920 ; 1008Photos - -8 ; -8 ; 1936 ; 1056Skype - 0 ; 40 ; 1920 ; 1008Skype - -8 ; -8 ; 1936 ; 1056Store - 0 ; 40 ; 1920 ; 1008Store - -8 ; -8 ; 1936 ; 1056Movies & TV - 0 ; 0 ; 1920 ; 1080Movies & TV - -8 ; -8 ; 1936 ; 1056Groove Music - 0 ; 32 ; 1466 ; 712Groove Music - -7 ; 3 ; 1372 ; 733Settings - 0 ; 40 ; 1920 ; 1008Settings - -8 ; -8 ; 1936 ; 1056Windows Shell Experience Host - 0 ; 0 ; 1920 ; 1080"
"var logQuery = from entry in xDoc.Descendants ( `` logentry '' ) where ( entry.Element ( `` author '' ) .Value.ToLower ( ) .Contains ( matchText ) || entry.Element ( `` msg '' ) .Value.ToLower ( ) .Contains ( matchText ) || entry.Element ( `` paths '' ) .Value.ToLower ( ) .Contains ( matchText ) || entry.Element ( `` revision '' ) .Value.ToLower ( ) .Contains ( matchText ) ) select new { Revision = entry.Attribute ( `` revision '' ) .Value , Author = entry.Element ( `` author '' ) .Value , CR = LogFormatter.FormatCR ( entry.Element ( `` msg '' ) .Value ) , Date = LogFormatter.FormatDate ( entry.Element ( `` date '' ) .Value ) , Message = LogFormatter.FormatComment ( entry.Element ( `` msg '' ) .Value ) , ET = LogFormatter.FormatET ( entry.Element ( `` msg '' ) .Value ) , MergeFrom = LogFormatter.FormatMergeFrom ( entry.Element ( `` msg '' ) .Value ) , MergeTo = LogFormatter.FormatMergeTo ( entry.Element ( `` msg '' ) .Value ) } ;"
"Public event EventHandler Handler ; Protected void OnEvent ( ) { var handler = this.Handler ; If ( null ! =handler ) { handler ( this , new EventArgs ( ) ) ; } }"
"< RibbonComboBox SelectionBoxWidth= '' 150 '' Grid.Row= '' 0 '' > < RibbonGallery SelectedItem= '' { Binding SelectedUtilityRun , Mode=TwoWay } '' > < RibbonGalleryCategory ItemsSource= '' { Binding UtilityRunLabels } '' / > < /RibbonGallery > < /RibbonComboBox >"
"container.Register < ISettings , Settings > ( ) ; var settings = container.Resolve < ISettings > ( ) ; System.Type theTypeWeWantToRegister = Type.GetType ( settings.GetTheISomeOtherServiceType ( ) ) ; container.Register ( ISomeOtherService , theTypeWeWantToRegister ) ;"
"public class PacketListViewModel : ReactiveObject { private readonly ReactiveList < PacketViewModel > _packets ; private PacketViewModel _selectedPacket ; private readonly ICollectionView _packetView ; private string _filterText ; /// < summary > /// Gets the collection of packets represented by this object /// < /summary > public ICollectionView Packets { get { if ( _packets.Count == 0 ) RebuildPacketCollection ( ) ; return _packetView ; } } public string FilterText { get { return _filterText ; } set { this.RaiseAndSetIfChanged ( ref _filterText , value ) ; } } public PacketViewModel SelectedPacket { get { return _selectedPacket ; } set { this.RaiseAndSetIfChanged ( ref _selectedPacket , value ) ; } } public PacketListViewModel ( IEnumerable < FileViewModel > files ) { _packets = new ReactiveList < PacketViewModel > ( ) ; _packetView = CollectionViewSource.GetDefaultView ( _packets ) ; _packetView.Filter = PacketFilter ; _filterText = String.Empty ; this.WhenAnyValue ( x = > x.FilterText ) .Throttle ( TimeSpan.FromMilliseconds ( 300 ) /* , RxApp.TaskpoolScheduler*/ ) .DistinctUntilChanged ( ) .ObserveOnDispatcher ( ) .Subscribe ( _ = > _packetView.Refresh ( ) ) ; } private bool PacketFilter ( object item ) { // Filter logic } private void RebuildPacketCollection ( ) { // Rebuild packet list from data source _packetView.Refresh ( ) ; } } [ Fact ] public void FilterText_WhenThrottleTimeoutHasPassed_FiltersProperly ( ) { new TestScheduler ( ) .With ( s = > { // Arrange var fvm = GetLoadedFileViewModel ( ) ; var sut = new PacketListViewModel ( fvm ) ; var lazy = sut.Packets ; // Act sut.FilterText = `` Call '' ; s.AdvanceToMs ( 301 ) ; // Assert var res = sut.Packets.OfType < PacketViewModel > ( ) .ToList ( ) ; sut.Packets.OfType < PacketViewModel > ( ) .Count ( ) .Should ( ) .Be ( 1 , `` only a single packet should match the filter '' ) ; } ) ; } SynchronizationContext.SetSynchronizationContext ( new SynchronizationContext ( ) ) ; < TextBox Name= '' FilterTextBox '' Grid.Column= '' 1 '' VerticalAlignment= '' Center '' Text= '' { Binding FilterText , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' / > < DataGrid ItemsSource= '' { Binding Path=Packets } '' Name= '' PacketDataGrid '' SelectedItem= '' { Binding SelectedPacket } '' AutoGenerateColumns= '' False '' EnableRowVirtualization= '' True '' SelectionMode= '' Single '' SelectionUnit= '' FullRow '' CanUserAddRows= '' False '' CanUserResizeRows= '' False '' > < DataGrid.Columns > ... private FileViewModel GetLoadedFileViewModel ( ) { var mre = new ManualResetEventSlim ( ) ; var fvm = new FileViewModel ( new MockDataLoader ( ) ) ; MessageBus.Current .Listen < FileUpdatedPacketListMessage > ( fvm.MessageToken.ToString ( ) ) .Subscribe ( msg = > mre.Set ( ) ) ; fvm.LoadFile ( `` irrelevant.log '' ) ; mre.Wait ( 500 ) ; return fvm ; }"
"using ( StreamReader sr = new StreamReader ( Server.MapPath ( `` 03122013114450.txt '' ) , true ) ) { string txtValues = sr.ReadToEnd ( ) ; string [ ] txtValuesArray1 = Regex.Split ( txtValues , `` \r\n '' ) ; ArrayList array = new ArrayList ( ) ; foreach ( string value in txtValuesArray1 ) { array.Add ( value ) ; } for ( int i = 0 ; i < array.Count ; i++ ) { if ( array.Count % 2 ! = 0 ) array.RemoveAt ( i + 2 ) ; else array.RemoveAt ( i + 1 ) ; } }"
"SqlCommand insert = new SqlCommand ( @ '' INSERT into orderDetails ( orderID , Name , Phone , Mobile , Email , DelName , DelRoad , DelTown , DelCity , DelCounty , DelPostCode , BilName , BilRoad , BilTown , BilCity , BilCounty , BilPostCode ) values ( @ orderID , @ Name , @ Phone , @ Mobile , @ Email , @ DelName , @ DelRoad , @ DelTown , @ DelCity , @ DelCounty , @ DelPostCode , @ BilName , @ BilRoad , @ BilTown , @ BilCity , @ BilCounty , @ BilPostCode ) '' , connection ) ; insert.Parameters.AddWithValue ( `` @ orderID '' , ID ) ; insert.Parameters.AddWithValue ( `` @ Name '' , name ) ; insert.Parameters.AddWithValue ( `` @ Phone '' , customer.Phone ) ; insert.Parameters.AddWithValue ( `` @ Mobile '' , customer.Mobile ) ; insert.Parameters.AddWithValue ( `` @ Email '' , customer.Email ) ; insert.Parameters.AddWithValue ( `` @ DelName '' , customer.DelName ) ; insert.Parameters.AddWithValue ( `` @ DelRoad '' , customer.DelRoad ) ; insert.Parameters.AddWithValue ( `` @ DelTown '' , customer.DelTown ) ; insert.Parameters.AddWithValue ( `` @ DelCity '' , customer.DelCity ) ; insert.Parameters.AddWithValue ( `` @ DelCounty '' , customer.DelCounty ) ; insert.Parameters.AddWithValue ( `` @ DelPostCode '' , customer.DelPostCode ) ; insert.Parameters.AddWithValue ( `` @ BilName '' , customer.BilName ) ; insert.Parameters.AddWithValue ( `` @ BilRoad '' , customer.BilRoad ) ; insert.Parameters.AddWithValue ( `` @ BilTown '' , customer.BilTown ) ; insert.Parameters.AddWithValue ( `` @ BilCity '' , customer.BilCity ) ; insert.Parameters.AddWithValue ( `` @ BilCounty '' , customer.BilCounty ) ; insert.Parameters.AddWithValue ( `` @ BilPostCode '' , customer.BilPostCode ) ; insert.ExecuteNonQuery ( ) ; CREATE TABLE [ dbo ] . [ orderDetails ] ( [ orderID ] INT NOT NULL , [ Name ] NCHAR ( 100 ) NULL , [ Phone ] NCHAR ( 100 ) NULL , [ Mobile ] NCHAR ( 15 ) NULL , [ Email ] NCHAR ( 15 ) NULL , [ DelName ] NCHAR ( 100 ) NULL , [ DelRoad ] NCHAR ( 100 ) NULL , [ DelTown ] NCHAR ( 100 ) NULL , [ DelCity ] NCHAR ( 100 ) NULL , [ DelCounty ] NCHAR ( 100 ) NULL , [ DelPostCode ] NCHAR ( 100 ) NULL , [ BilName ] NCHAR ( 100 ) NULL , [ BilRoad ] NCHAR ( 100 ) NULL , [ BilTown ] NCHAR ( 100 ) NULL , [ BilCity ] NCHAR ( 100 ) NULL , [ BilCounty ] NCHAR ( 100 ) NULL , [ BilPostCode ] NCHAR ( 100 ) NULL , PRIMARY KEY CLUSTERED ( [ orderID ] ASC ) ) ; public class Customer { public string FirstName { get ; set ; } public string LastName { get ; set ; } public string Phone { get ; set ; } public string Mobile { get ; set ; } public string Email { get ; set ; } public string DelName { get ; set ; } public string DelRoad { get ; set ; } public string DelTown { get ; set ; } public string DelCity { get ; set ; } public string DelCounty { get ; set ; } public string DelPostCode { get ; set ; } public string BilName { get ; set ; } public string BilRoad { get ; set ; } public string BilTown { get ; set ; } public string BilCity { get ; set ; } public string BilCounty { get ; set ; } public string BilPostCode { get ; set ; } public bool sameasDel { get ; set ; } }"
namespace AbsPractice { class Program { static void Main ( string [ ] args ) { SavingsCustomer sc = new SavingsCustomer ( ) ; CorporateCustomer cc = new CorporateCustomer ( ) ; } } public abstract class Customer { protected Customer ( ) { Console.WriteLine ( `` Constructor of Abstract Customer '' ) ; Print ( ) ; } protected abstract void Print ( ) ; } public class SavingsCustomer : Customer { public SavingsCustomer ( ) { Console.WriteLine ( `` Constructor of SavingsCustomer '' ) ; } protected override void Print ( ) { Console.WriteLine ( `` Print ( ) Method of SavingsCustomer '' ) ; } } public class CorporateCustomer : Customer { public CorporateCustomer ( ) { Console.WriteLine ( `` Constructor of CorporateCustomer '' ) ; } protected override void Print ( ) { Console.WriteLine ( `` Print ( ) Method of CorporateCustomer '' ) ; } } }
"at DynamicInjector54d92ac63a2e47fda5ffbcc19b9942a9 ( Object [ ] ) at Ninject.Activation.Providers.StandardProvider.Create ( IContext context ) at Ninject.Activation.Context.Resolve ( ) at Ninject.KernelBase. < > c__DisplayClass10. < Resolve > b__c ( IBinding binding ) at System.Linq.Enumerable.WhereSelectEnumerableIterator ` 2.MoveNext ( ) at System.Linq.Enumerable.SingleOrDefault [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Planning.Targets.Target ` 1.GetValue ( Type service , IContext parent ) at Ninject.Planning.Targets.Target ` 1.ResolveWithin ( IContext parent ) at Ninject.Activation.Providers.StandardProvider.GetValue ( IContext context , ITarget target ) at Ninject.Activation.Providers.StandardProvider. < > c__DisplayClass4. < Create > b__2 ( ITarget target ) at System.Linq.Enumerable.WhereSelectArrayIterator ` 2.MoveNext ( ) at System.Linq.Buffer ` 1..ctor ( IEnumerable ` 1 source ) at System.Linq.Enumerable.ToArray [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Activation.Providers.StandardProvider.Create ( IContext context ) at Ninject.Activation.Context.Resolve ( ) at Ninject.KernelBase. < > c__DisplayClass10. < Resolve > b__c ( IBinding binding ) at System.Linq.Enumerable.WhereSelectEnumerableIterator ` 2.MoveNext ( ) at System.Linq.Enumerable.SingleOrDefault [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Planning.Targets.Target ` 1.GetValue ( Type service , IContext parent ) at Ninject.Planning.Targets.Target ` 1.ResolveWithin ( IContext parent ) at Ninject.Activation.Providers.StandardProvider.GetValue ( IContext context , ITarget target ) at Ninject.Activation.Providers.StandardProvider. < > c__DisplayClass4. < Create > b__2 ( ITarget target ) at System.Linq.Enumerable.WhereSelectArrayIterator ` 2.MoveNext ( ) at System.Linq.Buffer ` 1..ctor ( IEnumerable ` 1 source ) at System.Linq.Enumerable.ToArray [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Activation.Providers.StandardProvider.Create ( IContext context ) at Ninject.Activation.Context.Resolve ( ) at Ninject.KernelBase. < > c__DisplayClass10. < Resolve > b__c ( IBinding binding ) at System.Linq.Enumerable.WhereSelectEnumerableIterator ` 2.MoveNext ( ) at System.Linq.Enumerable.SingleOrDefault [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Planning.Targets.Target ` 1.GetValue ( Type service , IContext parent ) at Ninject.Planning.Targets.Target ` 1.ResolveWithin ( IContext parent ) at Ninject.Activation.Providers.StandardProvider.GetValue ( IContext context , ITarget target ) at Ninject.Activation.Providers.StandardProvider. < > c__DisplayClass4. < Create > b__2 ( ITarget target ) at System.Linq.Enumerable.WhereSelectArrayIterator ` 2.MoveNext ( ) at System.Linq.Buffer ` 1..ctor ( IEnumerable ` 1 source ) at System.Linq.Enumerable.ToArray [ TSource ] ( IEnumerable ` 1 source ) at Ninject.Activation.Providers.StandardProvider.Create ( IContext context ) at Ninject.Activation.Context.Resolve ( ) at Ninject.KernelBase. < > c__DisplayClass10. < Resolve > b__c ( IBinding binding ) at System.Linq.Enumerable.WhereSelectEnumerableIterator ` 2.MoveNext ( ) at System.Linq.Enumerable. < CastIterator > d__b1 ` 1.MoveNext ( ) at System.Linq.Enumerable.Single [ TSource ] ( IEnumerable ` 1 source ) at Ninject.ResolutionExtensions.Get [ T ] ( IResolutionRoot root , IParameter [ ] parameters ) at MyProgram.Program.Main ( String [ ] args ) in C : \Dev\MyProject\MyProject.WinPresentation\Program.cs : ligne 40at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at System.AppDomain.ExecuteAssembly ( String assemblyFile , Evidence assemblySecurity , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ThreadHelper.ThreadStart_Context ( Object state ) at System.Threading.ExecutionContext.RunInternal ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean preserveSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) [ STAThread ] public static void Main ( string [ ] args ) { var module = new MyAppNinjectModule ( args ) ; var kernel = new StandardKernel ( module ) ; var argsHelper = module.CommandLineArgs ; var logProvider = kernel.Get < ILogProvider > ( ) ; var logger = logProvider.GetLogger ( typeof ( Program ) .Name ) ; if ( argsHelper.LoggingDisabledArgument.IsSpecified ( ) ) logProvider.DisableLogging ( ) ; logger.Info ( log.LogAppStart ) ; var installer = kernel.Get < IInstaller > ( ) ; // > > > InvalidCastException here if ( argsHelper.QuietInterfaceArgument.IsSpecified ( ) ) { // running with -quiet command-line switch : just execute and exit . installer.Execute ( ) ; } else { // instantiate a new App object ( WPF ) , and run it . // installer.Execute ( ) may or may not be executed , depending on user actions . var app = new App ( installer ) ; app.Run ( ) ; } } public ManualInstaller ( IView < MainWindowViewModel > view , IProcessHelper processHelper , ISettingsHelper settingsHelper , ILogProvider logProvider , ISetupBootstrapper installer , bool notifySuccess ) : base ( notifySuccess , processHelper , settingsHelper , logProvider , installer ) var msg = string.Empty ; if ( CommandLineArgs.CompletionMessageArgument.IsSpecified ( ) ) msg = CommandLineArgs.CompletionMessageArgument.ParameterValue ( ) ; Bind < MainWindowViewModel > ( ) .ToSelf ( ) .WithConstructorArgument ( `` completionMessage '' , msg ) ; Bind < IView < MainWindowViewModel > > ( ) .To < MainWindow > ( ) ; Bind < IInstaller > ( ) .To < ManualInstaller > ( ) .WithConstructorArgument ( `` notifySuccess '' , notifySuccess ) ; // resolve installer dependencies : var view = kernel.Get < IView < MainWindowViewModel > > ( ) ; // > > > InvalidCastException herevar processHelper = kernel.Get < IProcessHelper > ( ) ; var settingsHelper = kernel.Get < ISettingsHelper > ( ) ; var bootstrapper = kernel.Get < ISetupBootstrapper > ( ) ; var installer = new ManualInstaller ( view , processHelper , settingsHelper , logProvider , bootstrapper , true ) ; // resolve ViewModel dependencies : var processHelper = kernel.Get < IProcessHelper > ( ) ; // > > > InvalidCastException herevar settingsHelper = kernel.Get < ISettingsHelper > ( ) ; var messenger = kernel.Get < INetworkMessenger > ( ) ; var factory = kernel.Get < IBuildServerFactory > ( ) ; var dialogs = kernel.Get < ICommonDialogs > ( ) ; // resolve ProcessHelper dependencies : var processWrapper = kernel.Get < IProcessWrapper > ( ) ; var wmiWrapper = kernel.Get < IWindowsManagementInstrumentationWrapper > ( ) ; var helper = new ProcessHelper ( processWrapper , wmiWrapper , logProvider , 300 ) ; private readonly ILogProvider _logProvider ; private readonly IProcessWrapper _process ; private readonly IWindowsManagementInstrumentationWrapper _wmi ; public int TimeoutSeconds { get ; private set ; } public ProcessHelper ( IProcessWrapper process , IWindowsManagementInstrumentationWrapper wmiWrapper , ILogProvider logProvider , int timeout ) { _logProvider = logProvider ; _process = process ; _wmi = wmiWrapper ; TimeoutSeconds = timeout ; } Bind < IProcessHelper > ( ) .To < ProcessHelper > ( ) .WithConstructorArgument ( `` timeout '' , Properties.Settings.Default.ProcessTimeoutSeconds ) ;"
var saveFileDialog = new SaveFileDialog ( ) ; saveFileDialog.ShowDialog ( ) ; // User selects file and clicks `` Save '' within the dialog using System ; using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace WindowsFormsApp1 { static class Program { /// < summary > /// The main entry point for the application . /// < /summary > [ STAThread ] static void Main ( ) { Application.EnableVisualStyles ( ) ; Application.SetCompatibleTextRenderingDefault ( false ) ; var saveFileDialog = new SaveFileDialog ( ) ; saveFileDialog.ShowDialog ( ) ; } } }
"protected DataSet dsEvents ; protected void Page_Load ( object sender , EventArgs e ) { Calendar1.FirstDayOfWeek = FirstDayOfWeek.Sunday ; Calendar1.NextPrevFormat = NextPrevFormat.FullMonth ; Calendar1.TitleFormat = TitleFormat.Month ; Calendar1.ShowGridLines = true ; Calendar1.DayStyle.HorizontalAlign = HorizontalAlign.Left ; Calendar1.DayStyle.VerticalAlign = VerticalAlign.Top ; Calendar1.OtherMonthDayStyle.BackColor = System.Drawing.Color.LightGray ; Calendar1.VisibleDate = DateTime.Today ; FillEventDataset ( ) ; GetFirstDayOfNextMonth ( ) ; if ( ! IsPostBack ) { Calendar1.VisibleDate = DateTime.Today ; FillEventDataset ( ) ; GetFirstDayOfNextMonth ( ) ; } } protected DateTime GetFirstDayOfNextMonth ( ) { int monthNumber , yearNumber ; if ( Calendar1.VisibleDate.Month == 12 ) { monthNumber = 1 ; yearNumber = Calendar1.VisibleDate.Year + 1 ; } else { monthNumber = Calendar1.VisibleDate.Month + 1 ; yearNumber = Calendar1.VisibleDate.Year ; } DateTime lastDate = new DateTime ( yearNumber , monthNumber , 1 ) ; return lastDate ; } protected void FillEventDataset ( ) { DateTime firstDate = new DateTime ( Calendar1.VisibleDate.Year , Calendar1.VisibleDate.Month , 1 ) ; DateTime lastDate = GetFirstDayOfNextMonth ( ) ; dsEvents = GetSelectedMonthData ( firstDate , lastDate ) ; } protected DataSet GetSelectedMonthData ( DateTime firstDate , DateTime lastDate ) { DataSet dsMonth = new DataSet ( ) ; using ( SqlConnection conn = new SqlConnection ( connectionString ) ) { SqlCommand comm = new SqlCommand ( `` SELECT EventDate , EventLocation , EventSubject , EventStart FROM EventList WHERE EventDate > = @ FirstDate AND EventDate < = @ LastDate '' , conn ) ; comm.CommandType = CommandType.Text ; comm.Parameters.AddWithValue ( `` @ FirstDate '' , firstDate ) ; comm.Parameters.AddWithValue ( `` @ LastDate '' , lastDate ) ; conn.Open ( ) ; SqlDataAdapter sqlDataAdapter = new SqlDataAdapter ( comm ) ; try { sqlDataAdapter.Fill ( dsMonth ) ; } finally { conn.Close ( ) ; } } return dsMonth ; } protected void Calendar1_DayRender ( object sender , DayRenderEventArgs e ) { e.Day.IsSelectable = false ; e.Cell.ForeColor = System.Drawing.Color.Black ; if ( e.Day.IsOtherMonth ) { e.Cell.Visible = true ; e.Cell.Text = `` '' ; } DateTime nextEvent ; String nextLocation ; String nextSubject ; String nextStart ; if ( dsEvents ! = null ) { foreach ( DataRow dr in dsEvents.Tables [ 0 ] .Rows ) { nextEvent = ( DateTime ) dr [ `` EventDate '' ] ; nextLocation = dr [ `` EventLocation '' ] .ToString ( ) ; nextSubject = dr [ `` EventSubject '' ] .ToString ( ) ; nextStart = dr [ `` EventStart '' ] .ToString ( ) ; if ( nextEvent == e.Day.Date ) { Literal literal1 = new Literal ( ) ; literal1.Text = `` < br/ > '' ; e.Cell.Controls.Add ( literal1 ) ; Label label1 = new Label ( ) ; label1.Text = nextStart.ToString ( ) ; label1.Font.Size = new FontUnit ( FontSize.Small ) ; e.Cell.Controls.Add ( label1 ) ; Literal literal2 = new Literal ( ) ; literal2.Text = `` & nbsp ; & nbsp ; '' ; e.Cell.Controls.Add ( literal2 ) ; Label label2 = new Label ( ) ; label2.Text = nextSubject.ToString ( ) ; label2.Font.Size = new FontUnit ( FontSize.Small ) ; e.Cell.Controls.Add ( label2 ) ; Literal literal3 = new Literal ( ) ; literal3.Text = `` & nbsp ; & nbsp ; '' ; e.Cell.Controls.Add ( literal3 ) ; Label label3 = new Label ( ) ; label3.Text = nextLocation.ToString ( ) ; label3.Font.Size = new FontUnit ( FontSize.Small ) ; e.Cell.Controls.Add ( label3 ) ; } } } } protected void Calendar1_VisibleMonthChanged ( object sender , MonthChangedEventArgs e ) { GetFirstDayOfNextMonth ( ) ; FillEventDataset ( ) ; }"
if ( true ) DoThis ( ) ; if ( true ) DoThis ( ) ;
"public class Task : IThreadPoolWorkItem , IAsyncResult , IDisposable public interface IAsyncResult { object AsyncState { get ; } WaitHandle AsyncWaitHandle { get ; } bool CompletedSynchronously { get ; } bool IsCompleted { get ; } } System.Threading.Tasks.Task t = new System.Threading.Tasks.Task ( ( ) = > { } ) ; t.AsyncWaitHandle.ToString ( ) ; System.IAsyncResult t = new System.Threading.Tasks.Task ( ( ) = > { } ) ; t.AsyncWaitHandle.ToString ( ) ;"
"Observable.Using ( ( ) = > new Stream ( ) , s = > DoSomething ( s ) ) ; Observable.Using ( async ( ) = > await CreateStream ( ) , s = > DoSomething ( s ) ) ; async Task < Stream > CreateStream ( ) { ... } DoSomething ( Stream s ) { ... }"
"public class Sample { static void Main ( string [ ] args ) { new Tester ( ) .FirstCall ( ) ; } } public class Tester { public void FirstCall ( ) { try { SecondCall ( ) ; } catch ( Exception e ) { Console.WriteLine ( e.StackTrace ) ; Console.WriteLine ( e.Message ) ; } } public void SecondCall ( ) { try { ThirdCall ( ) ; } catch ( GoodException ex ) { throw new Exception ( ex.Message , ex ) ; } } public void ThirdCall ( ) { try { FourthCall ( ) ; } catch ( ArithmeticException ae ) { throw new GoodException ( `` Arithmetic mistake : `` + ae.Message , ae ) ; } } public void FourthCall ( ) { int d = 0 ; int x = 10 / d ; } } at PlayingWithExceptions.Tester.FourthCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 67 at PlayingWithExceptions.Tester.ThirdCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 59 at PlayingWithExceptions.Tester.SecondCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 41 at PlayingWithExceptions.Tester.FirstCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 25Arithmetic mistake : Attempted to divide by zero . at PlayingWithExceptions.Tester.SecondCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 41 at PlayingWithExceptions.Tester.FirstCall ( ) in d : \Projects\PlayingWithExceptions\PlayingWithExceptions\Trying.cs : line 25Arithmetic mistake : Attempted to divide by zero ."
if ( ( teststring ? ? string.Empty ) ==string.Empty )
"var query1 = from x in db.DBProducts select new MyProduct { Id = x.ProductId , Name = x.ProductName , Details = new MyProductDetail { Id = x.DBProductDetail.ProductDetailId , Description = x.DBProductDetail.ProductDetailDescription } } public partial class DBProduct { MyProduct ToDomainObject ( ) { return new MyProduct { Id = this.ProductId , Name = this.ProductName , Details = this.DBProductDetails.ToDomainObject ( ) } ; } } public partial class DBProductDetail { MyProductDetail ToDomainObject ( ) { return new MyProductDetail { Id = this.ProductDetailId , Description = this.ProductDetailDescription } ; } } var query1 = from x in db.DBProducts select x.ToDomainObject ( ) ;"
new SQLiteConnection ( `` : memory : '' ) .Dump ( ) ;
< Application.Resources > < ResourceDictionary > < ResourceDictionary.MergedDictionaries > < ResourceDictionary Source= '' Style/Colors.xaml '' / > < ResourceDictionary Source= '' Style/HeaderStyle.xaml '' / > < /ResourceDictionary.MergedDictionaries > < /ResourceDictionary > < /Application.Resources > < SolidColorBrush x : Key= '' DarkTextForeground '' Color= '' # 7471b9 '' / > < Style x : Key= '' HeaderTextBlockStyle '' TargetType= '' TextBlock '' > < Setter Property= '' Foreground '' Value= '' { StaticResource DarkTextForeground } '' / > < Setter Property= '' FontWeight '' Value= '' Black '' / > < /Style > < ResourceDictionary.MergedDictionaries > < ResourceDictionary Source= '' Colors.xaml '' / > < /ResourceDictionary.MergedDictionaries > < Style x : Key= '' HeaderTextBlockStyle '' TargetType= '' TextBlock '' > < Setter Property= '' Foreground '' Value= '' { StaticResource DarkTextForeground } '' / > < Setter Property= '' FontWeight '' Value= '' Black '' / > < /Style >
Assembly.GetEntryAssembly ( ) .GetTypes ( ) .Where ( t = > t.Namespace == `` namespace '' ) < > c__DisplayClass3_0 < > c__DisplayClass4_0 < > c__DisplayClass6_0 < > c__DisplayClass2_0 < > c__DisplayClass2_1 < > c__DisplayClass2_2 < > c__DisplayClass2_3 < > c__DisplayClass2_4 < > c__DisplayClass2_5 < > c__DisplayClass2_6 < > c__DisplayClass2_7 < > c__DisplayClass2_8
"Object o = datta ; // should be data , compiler error"
// a demo data stream that emits every secondvar dataStream = Observable.Interval ( TimeSpan.FromSeconds ( 1 ) ) ; // a demo flag stream that toggles every 5 secondsvar toggle = false ; var gateStream = Observable.Interval ( TimeSpan.FromSeconds ( 5 ) ) .Select ( _ = > toggle = ! toggle ) ;
"a l ig t mj e a public class Letter { public int X { get ; set ; } public int Y { get ; set ; } public char Character { get ; set ; } public List < Letter > Neighbors { get ; set ; } public Letter PreviousLetter { get ; set ; } public int Generation { get ; set ; } public Letter ( char character ) { Neighbors = new List < Letter > ( ) ; Character = character ; } public void SetGeneration ( int generation ) { foreach ( var item in Neighbors ) { item.Generation = generation ; } } } private static void GenerateWords ( Letter input , int maxLength , StringBuilder sb ) { if ( input.Generation > = maxLength ) { if ( sb.Length == maxLength ) { allWords.Add ( sb.ToString ( ) ) ; sb.Remove ( sb.Length - 1 , 1 ) ; } return ; } sb.Append ( input.Character ) ; if ( input.Neighbors.Count > 0 ) { foreach ( var child in input.Neighbors ) { if ( input.PreviousLetter == child ) continue ; child.PreviousLetter = input ; child.Generation = input.Generation + 1 ; GenerateWords ( child , maxLength , sb ) ; } } }"
"Assign principal ( user or group ) to application : •resourceId is the objectId of the servicePrincipal that get created in the tenant for the application•id is the default role id of App.•principalId is the objectId of the principal ( user or group ) that is being assigned to the app.HTTP POST https : //graph.windows.net/7fe877e6-a150-4992-bbfe-f517e304dfa0/users/de4b092e-1dd4-4d40-b74d-a2d7096c9495/appRoleAssignments ? api-version=1.5Authorization : Bearer eyJ0eXAiOi -- snip -- JKVBfk_QContent-Type : application/jsonContent-Length : 176 { `` id '' : `` fc60bc23-43df-4a60-baaa-f0b8694e0259 '' , '' principalId '' : `` de4b092e-1dd4-4d40-b74d-a2d7096c9495 '' , '' resourceId '' : `` 93c60e8e-74f9-4add-9ae2-dd9bc0d6edcd '' } AppRoleAssignment appAssignment = new AppRoleAssignment ( ) ; appAssignment.Id = appRole.Id ; appAssignment.PrincipalId = new Guid ( retrievedUser.ObjectId ) ; appAssignment.ResourceId = new Guid ( `` aa9b2f6b-6528-4552-a202-2039ce86d95c '' ) ; appAssignment.UpdateAsync ( ) ;"
Thread t = new Thread ( ( ) = > { Window1 win = new Window1 ( ) ; win.Show ( ) ; System.Windows.Threading.Dispatcher.Run ( ) ; } ) ; t.SetApartmentState ( ApartmentState.STA ) ; t.Start ( ) ; Style s = ( Style ) TryFindResource ( `` TestKey '' ) ; Console.WriteLine ( ( ( Setter ) s.Setters [ 0 ] ) .Property.Name ) ; // no problems.Dispatcher == this.Dispatcher // false
-Company-Contact-Project-Issue etc ... -Create-Edit-Delete-Export Policy1 Company Create YesPolicy1 Company Edit YesPolicy1 Company Delete NoPolicy2 Company Create NoPolicy2 Company Edit YesPolicy2 Company Delete No Company create yesCompany edit yesCompany delete no Create Edit DeleteCompany Yes Owner Only YesContact No No NoProject Yes Yes Owner Only
IQueryable events = Events .Where ( i = > i.Date.Month == date.Month ) .GroupBy ( i = > i.Date.Day ) ;
"return String.Format ( `` { 0 } f , { 1 } f , { 2 } f , { 3 } f , { 4 } f , { 5 } f , { 6 } f , { 7 } f , { 8 } f , { 9 } f , { 10 } f , { 11 } f , { 12 } f , { 13 } f , { 14 } f , { 15 } f '' , M.M11 , M.M12 , M.M13 , M.M14 , M.M21 , M.M22 , M.M23 , M.M24 , M.M31 , M.M32 , M.M33 , M.M34 , M.OffsetX , M.OffsetY , M.OffsetZ , M.M44 ) ;"
using System ; using Mono.Cecil ; using System.IO ; FileInfo f = new FileInfo ( `` SomeAssembly.dll '' ) ; AssemblyDefinition assemDef = AssemblyFactory.GetAssembly ( f.FullName ) ; List < TypeReference > trList = new List < TypeReference > ( ) ; foreach ( TypeReference tr in assemblyDef.MainModule.TypeReferences ) { trList.Add ( tr.FullName ) ; }
private List < object > obs ;
"static X509Certificate2 GetCertificateFromStore ( string thumbprint ) { var store = new X509Store ( StoreLocation.CurrentUser ) ; try { thumbprint = Regex.Replace ( thumbprint , @ '' [ ^\da-zA-z ] '' , string.Empty ) .ToUpper ( ) ; store.Open ( OpenFlags.ReadOnly ) ; var certCollection = store.Certificates ; var currentCerts = certCollection.Find ( X509FindType.FindByTimeValid , DateTime.Now , false ) ; var signingCert = currentCerts.Find ( X509FindType.FindByThumbprint , thumbprint , false ) ; if ( signingCert.Count == 0 ) { throw new Exception ( $ '' Could not find Xero SSL certificate . cert_name= { thumbprint } '' ) ; } return signingCert [ 0 ] ; } finally { store.Close ( ) ; } } The page you are attempting to access requires your browser to have a Secure Sockets Layer ( SSL ) client certificate that the Web server recognizes ."
"private IConnectionFactory CreateConnectionFactory ( ) { XMSFactoryFactory factoryFactory = XMSFactoryFactory.GetInstance ( XMSC.CT_WMQ ) ; IConnectionFactory connectionFactory = factoryFactory.CreateConnectionFactory ( ) ; connectionFactory.SetStringProperty ( XMSC.WMQ_HOST_NAME , _wmqHostName ) ; connectionFactory.SetIntProperty ( XMSC.WMQ_PORT , _wmqPort ) ; connectionFactory.SetStringProperty ( XMSC.WMQ_CHANNEL , _wmqChannel ) ; connectionFactory.SetIntProperty ( XMSC.WMQ_CONNECTION_MODE , XMSC.WMQ_CM_CLIENT_UNMANAGED ) ; connectionFactory.SetStringProperty ( XMSC.WMQ_QUEUE_MANAGER , _wmqQueueManager ) ; connectionFactory.SetIntProperty ( XMSC.WMQ_BROKER_VERSION , 0 ) ; connectionFactory.SetStringProperty ( XMSC.WMQ_SECURITY_EXIT , `` MySecurityExitName '' ) ; return ( connectionFactory ) ; }"
protected override bool OnPowerEvent ( PowerBroadcastStatus powerStatus ) { Logger.Log ( `` Power status is : `` + powerStatus ) ; if ( powerStatus == PowerBroadcastStatus.ResumeAutomatic ) { ConnectionWatchdog.ReConnect ( ) ; } return base.OnPowerEvent ( powerStatus ) ; }
a.IDatabaseClass db_class = ( a.IDatabase ) new b.Database ( ) ;
"`` step in : Stepping over non user code '' SPSecurity.RunWithElevatedPrivileges ( delegate ( ) [ DllImport ( `` idDll.dll '' , EntryPoint = `` GetMachineId '' , SetLastError = true ) ] extern static string GetComponentId ( [ MarshalAs ( UnmanagedType.LPStr ) ] String s ) ; public static string GetComponentId ( ) { Debugger.Break ( ) ; if ( _machine == string.Empty ) { string temp = `` '' ; id= ComponentId.GetComponentId ( temp ) ; } return id ; }"
"class Program { static object lockObj = new object ( ) ; static void Main ( string [ ] args ) { Task.Run ( ( ) = > { Console.WriteLine ( `` Program starts running on thread { 0 } '' , Thread.CurrentThread.ManagedThreadId ) ; var taskToRun = new Task ( ( ) = > { lock ( lockObj ) { for ( int i = 0 ; i < 10 ; i++ ) Console.WriteLine ( `` { 0 } from Thread { 1 } '' , i , Thread.CurrentThread.ManagedThreadId ) ; } } ) ; taskToRun.Start ( ) ; lock ( lockObj ) { taskToRun.Wait ( ) ; } } ) .Wait ( ) ; } } /* Console outputProgram starts running on thread 30 from Thread 31 from Thread 32 from Thread 33 from Thread 34 from Thread 35 from Thread 36 from Thread 37 from Thread 38 from Thread 39 from Thread 3*/"
< PropertyGroup > < TargetFrameworkSDKToolsDirectory Condition= '' ' $ ( PlatformTarget ) ' == 'x64 ' '' > $ ( TargetFrameworkSDKToolsDirectory ) \ $ ( PlatformTarget ) \ < /TargetFrameworkSDKToolsDirectory > < /PropertyGroup > < PropertyGroup > < TargetFrameworkSDKToolsDirectory > ..\Tools64 < /TargetFrameworkSDKToolsDirectory > < /PropertyGroup >
"[ TestMethod ( ) ] [ DeploymentItem ( `` PrestoCommon.dll '' ) ] public void ApplicationShouldBeInstalledTest_UseCase9 ( ) { // Debugger hits this line ApplicationServer appServerAccessor = new ApplicationServer ( ) ; // Debugger does not hit these next two lines PrivateObject privateObject = new PrivateObject ( appServerAccessor ) ; ApplicationServer appServer = ApplicationServerLogic.GetByName ( `` server10 '' ) ; // Debugger hits this line . Weirdness : both objects are null , and after this line runs , // appServerAccessor is no longer null . appServerAccessor.Id = appServer.Id ; // Skips this line ApplicationWithOverrideVariableGroup appWithValidGroup = appServer.ApplicationsWithOverrideGroup [ 0 ] ; // Debugger hits this line , but F11 does n't take me into the method . appWithValidGroup.CustomVariableGroup = CustomVariableGroupLogic.GetById ( `` CustomVariableGroups/4 '' ) ; // Skips this line Assert.AreEqual ( true , true ) ; } [ TestMethod ( ) ] [ DeploymentItem ( `` PrestoCommon.dll '' ) ] public void ApplicationShouldBeInstalledTest_UseCase9 ( ) { // Debugger hits this line ApplicationServer appServerAccessor = new ApplicationServer ( ) ; // New line . It 's recognized by the debugger , and it shows up in the disassembly . if ( DateTime.Now > DateTime.Now.AddHours ( 1 ) ) { return ; } // Debugger does not hit these next two lines PrivateObject privateObject = new PrivateObject ( appServerAccessor ) ; ApplicationServer appServer = ApplicationServerLogic.GetByName ( `` server10 '' ) ; // Gets hit now . // Debugger hits this line . Weirdness : both objects are null , and after this line runs , // appServerAccessor is no longer null . appServerAccessor.Id = appServer.Id ; // No longer gets hit . // Skips this line ( now it 's getting hit ) ApplicationWithOverrideVariableGroup appWithValidGroup = appServer.ApplicationsWithOverrideGroup [ 0 ] ; // Debugger hits this line , but F11 does n't take me into the method . Now this gets skipped . appWithValidGroup.CustomVariableGroup = CustomVariableGroupLogic.GetById ( `` CustomVariableGroups/4 '' ) ; // Skips this line . Still skipped . Assert.AreEqual ( true , true ) ; } if ( DateTime.Now > DateTime.Now.AddDays ( 1 ) ) { return ; }"
"static void Main ( string [ ] args ) { EncoderDevice video = EncoderDevices.FindDevices ( EncoderDeviceType.Video ) .Count > 0 ? EncoderDevices.FindDevices ( EncoderDeviceType.Video ) [ 0 ] : null ; EncoderDevice audio = EncoderDevices.FindDevices ( EncoderDeviceType.Audio ) .Count > 0 ? EncoderDevices.FindDevices ( EncoderDeviceType.Audio ) [ 0 ] : null ; LiveJob job = new LiveJob ( ) ; if ( video ! = null & & audio ! = null ) { LiveDeviceSource source = job.AddDeviceSource ( video , audio ) ; job.ActivateSource ( source ) ; PushBroadcastPublishFormat publishingPoint = new PushBroadcastPublishFormat ( ) ; publishingPoint.PublishingPoint = new Uri ( `` http : //streamwebtown.com/abc '' ) ; publishingPoint.UserName = `` user '' ; publishingPoint.Password = PullPW ( `` Stream '' ) ; job.ApplyPreset ( LivePresets.VC1Broadband16x9 ) ; job.PublishFormats.Add ( publishingPoint ) ; job.StartEncoding ( ) ; Console.ReadKey ( ) ; job.StopEncoding ( ) ; } } private static SecureString PullPW ( string pw ) { SecureString s = new SecureString ( ) ; foreach ( char c in pw ) s.AppendChar ( c ) ; return s ; }"
public class X509Authentication : IClientAuthenticator { protected readonly X509Certificate2 Certificate ; public X509Authentication ( X509Certificate2 certificate ) { if ( certificate == null ) throw new ArgumentNullException ( `` certificate '' ) ; Certificate = certificate ; } public HttpClient GenerateClient ( ) { var clientHandler = new WebRequestHandler ( ) ; clientHandler.ClientCertificates.Add ( Certificate ) ; var request = new HttpClient ( clientHandler ) ; return request ; } public void Dispose ( ) { //nothing to do here . } } [ TestMethod ] public void HttpClientCreationIncludesCertificate ( ) { using ( var auth = new X509Authentication ( _certificate ) ) using ( var client = auth.GenerateClient ( ) ) { Assert ... what ? The certificate ( s ) are not visible here . } }
"dynamic jsObject ; jsObject = new ExpandoObject ( ) ; jsObject.dataUrl = Controller.Url.Action ( `` loadall '' , `` residuals '' , new { EditionId = EditionId , Country = Country , ModelYear = ModelYear , MakeId = ModelId , StyleId = style.Id } ) ; jsObject.id = style.Id ; jsObject.text = style.Name ; jsObject.iconCls = `` sprite-toolbar-flag-us '' ; jsObject.checked = false ; // < -- - < < the problem is here jsObject.leaf = true ; jsObject.IsCustomQuote = style.IsCustomQuote ; return jsObject ;"
C : \Program Files\CCleaner\ ... C : \Program Files\Common Files\ ... C : \Program Files ( x86 ) \Adobe\ ... C : \Program Files ( x86 ) \Common Files\ ...
"var evaluator = new LookupBasedEvaluator ( ) ; // find all ten-vertex polygons that are a subset of the set of points var ssg = new SubsetGenerator < PolygonData > ( Points.All , 10 ) ; const int TEST_SIZE = 10000000 ; // evaluate the first 10 million records // materialize the data into memory ... var polygons = ssg.AsParallel ( ) .Take ( TEST_SIZE ) .Cast < PolygonData > ( ) .ToArray ( ) ; var sw1 = Stopwatch.StartNew ( ) ; // for loop completes in about 4.02 seconds ... ~ 2.483 million/sec foreach ( var polygon in polygons ) evaluator.Evaluate ( polygon ) ; s1.Stop ( ) ; Console.WriteLine ( `` Linear , single core loop : { 0 } '' , s1.ElapsedMilliseconds ) ; // now attempt the same thing in parallel using Parallel.ForEach ... // MS documentation indicates this internally uses a worker thread pool // completes in 2.61 seconds ... or ~ 3.831 million/sec var sw2 = Stopwatch.StartNew ( ) ; Parallel.ForEach ( polygons , p = > evaluator.Evaluate ( p ) ) ; sw2.Stop ( ) ; Console.WriteLine ( `` Parallel.ForEach ( ) loop : { 0 } '' , s2.ElapsedMilliseconds ) ; // now using PLINQ , er get slightly better results , but not by much // completes in 2.21 seconds ... or ~ 4.524 million/second var sw3 = Stopwatch.StartNew ( ) ; polygons.AsParallel ( Environment.ProcessorCount ) .AsUnordered ( ) // no sure this is necessary ... .ForAll ( h = > evalautor.Evaluate ( h ) ) ; sw3.Stop ( ) ; Console.WriteLine ( `` PLINQ.AsParallel.ForAll : { 0 } '' , s3.EllapsedMilliseconds ) ; // now using four explicit threads : // best , still short of expectations at 1.99 seconds = ~ 5 million/sec ParameterizedThreadStart tsd = delegate ( object pset ) { foreach ( var p in ( IEnumerable < Card [ ] > ) pset ) evaluator.Evaluate ( p ) ; } ; var t1 = new Thread ( tsd ) ; var t2 = new Thread ( tsd ) ; var t3 = new Thread ( tsd ) ; var t4 = new Thread ( tsd ) ; var sw4 = Stopwatch.StartNew ( ) ; t1.Start ( hands ) ; t2.Start ( hands ) ; t3.Start ( hands ) ; t4.Start ( hands ) ; t1.Join ( ) ; t2.Join ( ) ; t3.Join ( ) ; t4.Join ( ) ; sw.Stop ( ) ; Console.WriteLine ( `` Four Explicit Threads : { 0 } '' , s4.EllapsedMilliseconds ) ;"
"public ActionResult Edit ( int id , [ DateAndTime ( `` year '' , `` mo '' , `` day '' , `` hh '' , '' mm '' , '' secondsorhwatever '' ) ] DateTime foo ) { public ActionResult Edit ( MyModelWithADateTimeProperty model ) { ModelBinders.Binders [ typeof ( DateTime ) ] = new DateAndTimeModelBinder ( ) { Date = `` Date '' , Time = `` Time '' } ; public class MyDataModel { [ Required ] public CurrencyType BudgetRange { get ; set ; } public PositiveOnlyCurrencyType PaymentAmount { get ; set ; } [ Required ] public StripNonDigitsIntegerType SquareFootage { get ; set ; }"
"public partial class Driver : IBaseEntity { public short DriverId { get ; set ; } public string Surname { get ; set ; } public string Initials { get ; set ; } public byte DriverStatusTypeId { get ; set ; } public DriverStatusType DriverStatusType { get ; set ; } } public partial class DriverStatusType { public DriverStatusType ( ) { Drivers = new HashSet < Driver > ( ) ; } public byte DriverStatusTypeId { get ; set ; } public string DriverStatusTypeName { get ; set ; } public string Description { get ; set ; } public ICollection < Driver > Drivers { get ; set ; } } public class DriverService : IDriverService { public DriverService ( MyContext context ) { Context = context ; } public MyContext Context { get ; } public async Task < IEnumerable < Driver > > GetAllDrivers ( ) { var drivers = await Context .Drivers .Include ( d = > d.DriverStatusType ) .toListAsync ( ) ; return drivers ; } public async Task < Driver > GetDriverById ( int id ) { var driver = await Context .Drivers .Include ( d = > d.DriverStatusType ) .Where ( d = > d.DriverId == id ) .FirstOrDefaultAsync ( ) ; return driver ; } } { `` driverId '' : 1 , `` surname '' : `` Stark '' , `` initials '' : `` T '' , `` driverStatusTypeId '' : 2 , `` driverStatusType '' : { `` driverStatusTypeId '' : 2 , `` driverStatusTypeName '' : `` Available '' , `` description '' : `` This driver is available '' , `` drivers '' : [ ] } } [ { `` driverId '' : 1 , `` surname '' : `` Stark '' , `` initials '' : `` T '' , `` displayText '' : `` Tony Stark '' , `` driverStatusTypeId '' : 2 , `` driverStatusType '' : { `` driverStatusTypeId '' : 2 , `` driverStatusTypeName '' : `` Available '' , `` description '' : `` This driver is available '' , `` drivers '' : [ { `` driverId '' : 2 , `` surname '' : `` Rogers '' , `` initials '' : `` S '' , `` driverStatusTypeId '' : 2 } , { `` driverId '' : 3 , `` surname '' : `` Romanoff '' , `` initials '' : `` N '' , `` driverStatusTypeId '' : 2 } , { `` driverId '' : 4 , `` surname '' : `` Banner '' , `` initials '' : `` B '' , `` driverStatusTypeId '' : 2 } , ..."
string str= '' a '' ; str += '' b '' ; str += '' c '' ; str += '' d '' ; str += '' e '' ; console.write ( str ) //output : abcde
"public class MyObject : DatabaseObject { public string FieldX { get { return GetValue < string > ( `` FieldX '' ) ; } set { SetValue < string > ( `` FieldX '' , value ) ; } } public int FieldY { get { return GetValue < int > ( `` FieldY '' ) ; } set { SetValue < int > ( `` FieldY '' , value ) ; } } } public class DatabaseObject { public T GetValue < T > ( string FieldName ) { // Code that actually gets the right value } public void SetValue < T > ( string FieldName , T value ) { // Code that actually sets the value in the right place } } MethodBase.GetCurrentMethod ( ) .Name.Substring ( 4 ) public string FieldX { get { return GetValue ( ) ; } set { SetValue ( value ) ; } } public int FieldY { get { return GetValue ( ) ; } set { SetValue ( value ) ; } }"
"this.Click += ( s , e ) = > { MessageBox.Show ( ( ( MouseEventArgs ) e ) .Location.ToString ( ) ) ; } ;"
"namespace ManifestResources { class Program { static void Main ( string [ ] args ) { var assembly = Assembly.GetExecutingAssembly ( ) ; // Works fine var mailTemplate = assembly.GetManifestResourceStream ( `` ManifestResources.mailtemplate.cshtml '' ) ; // Not ok , localized mail template is null var localizedMailTemplate = assembly.GetManifestResourceStream ( `` ManifestResources.mailtemplate.nl-NL.cshtml '' ) ; } } }"
public class CustomerList : System.Collections.Generic.List < Customer > { /// supposed to be empty } using CustomerList = System.Collections.Generic.List < Customer >
public class InstanceInformation { public string PatientID { get ; set ; } public string StudyID { get ; set ; } public string SeriesID { get ; set ; } public string InstanceID { get ; set ; } } PatientID/StudyID/SeriesID/InstanceID var groups = from instance in instances group instance by instance.PatientID into patientGroups from studyGroups in ( from instance in patientGroups group instance by instance.StudyID ) from seriesGroup in ( from instance in studyGroups group instance by instance.SeriesID ) from instanceGroup in ( from instance in seriesGroup group instance by instance.InstanceID ) group instanceGroup by patientGroups.Key ;
"services.AddHttpClient < MyFunctionClient > ( client = > { client.BaseAddress = new Uri ( mySettings.GetValue < string > ( `` myFunctionUrl '' ) ) ; client.DefaultRequestHeaders.Add ( `` x-functions-key '' , mySettings.GetValue < string > ( `` myFunctionKey '' ) ) ; } ) ; services.AddBot < QnAMakerBot > ( options = > { options.CredentialProvider = new ConfigurationCredentialProvider ( Configuration ) ; options.ConnectorClientRetryPolicy = new RetryPolicy ( new BotFrameworkHttpStatusCodeErrorDetectionStrategy ( ) , 3 , TimeSpan.FromSeconds ( 2 ) , TimeSpan.FromSeconds ( 20 ) , TimeSpan.FromSeconds ( 1 ) ) ; var middleware = options.Middleware ; middleware.Add ( new ConversationState < ChatLog > ( new MemoryStorage ( ) ) ) ; middleware.Add ( new MyCustomMiddleware ( ) ) ; // < - I want to inject a typed HttpClient here// ... etc . ... ."
"Adam God.LoadAdam ( AdamID theAdamID ) var adam = new Adam ( theAdamId , this ) Adam.Adam ( AdamID theAdamID , God theGod ) _god = theGod _mind = theGod.LoadMind ( theAdamId , this ) Mind God.LoadMind ( AdamID theAdamID , Adam theAdam ) var mind = new Mind ( theAdam ) var mindId = new minId ( theAdamId ) mind.DeserializeFromFile ( minId ) Mind.Mind ( Adam theAdam ) _adam = theAdam"
class ClassB { } class ClassA { private ClassB classB ; public ClassA ( ) { this.classB = new ClassB ( ) ; } } class ClassA { private ClassB classB ; public ClassA ( ClassB classB ) { this.classB = classB ; } }
"//linesTable is an System.data.DataTable object// ... for loop code in hereDataRow row = linesTable.Rows [ i ] ; //Where i is the loop indexDictionary < String , String > valuesDictionary = row.Table.Columns.Cast < DataColumn > ( ) .ToDictionary ( col = > col.ColumnName , col = > row.Field < String > ( col.ColumnName ) ) ; //ATTEMPT # 1/*Dictionary < String , Double > numericValues = valuesDictionary.Where ( subs = > { double doubleValue ; return double.TryParse ( subs.Value , out doubleValue ) ; } ) .Cast < Dictionary < String , Double > > ( ) ; *///ATTEMPT # 2Dictionary < String , Double > numericValues = valuesDictionary.Where ( subs = > { double doubleValue ; return double.TryParse ( subs.Value , out doubleValue ) ; } ) .ToDictionary < String , Double > ( pair = > pair.Key , pair = > double.Parse ( pair.Value ) ) ;"
public void GetCustomersForSelectedStates ( string [ ] statesArray ) { var customers = _repo.GetAllCustomers ( ) ; var filteredCustomers = from CUST in customers join ST in States on CT.Tag_Id equals ST.Id where CUST.ID == customer.ID & & ( ST.Name == statesArray [ 0 ] ||ST.Name ==statesArray [ 1 ] || ST.Name== statesArray [ 2 ] ||ST.Name =statesArray [ 3 ] ) //Do something with customers } ( ST.Name == statesArray [ 0 ] ||ST.Name ==statesArray [ 1 ] || ST.Name== statesArray [ 2 ] ||ST.Name =statesArray [ 3 ] ) var dynamicQuery = `` ( `` ; var dynamicQuery = `` ( `` ; for ( int i = 0 ; i < statesArray.Count ( ) ; i++ ) { dynamicQuery += `` ST.Name == '' +statesArray [ 0 ] ; if ( i==statesArray.Count ( ) ) dynamicQuery+= '' ) '' } //Psuedo codevar customers = _repo.GetAllCustomers ( ) ; var filteredCustomers = from CUST in customers join ST in States on CT.Tag_Id equals ST.Id where CUST.ID == customer.ID & & Expression ( dynamicQuery )
class Apple float seedCount ; ... ... about 25 variables and properties here . void Update ( ) < -- a huge method that checks for each property and updates if so class Apple Seed seed ;
int value = 5 ; MessageBox.Show ( value ) ;
"var source = new [ ] { 5 , 6 , 7 } ; source.Intersect ( new [ ] { 5 , 7 , 6 } ) .Count ( ) == source.Length ;"
"[ Serializable ] public class ConcertCityDialog : AbstractBasicDialog < DialogResult > { private static FacebookService FacebookService = > new FacebookService ( new FacebookClient ( ) ) ; [ LuisIntent ( `` ConcertCity '' ) ] public async Task ConcertCityIntent ( IDialogContext context , LuisResult result ) { var fbAccount = await FacebookService.GetAccountAsync ( context.Activity.From.Id ) ; var selectedCityName = result.Entities.FirstOrDefault ( ) ? .Entity ; concert_city selectedCity ; using ( var concertCityService = new ConcertCityService ( ) ) { selectedCity = concertCityService.FindConcertCity ( selectedCityName ) ; } if ( selectedCity == null ) { await NoneIntent ( context , result ) ; return ; } user_interaction latestInteraction ; using ( var userService = new MessengerUserService ( ) ) { var user = userService.FindByFacebookIdIncludeInteractions ( context.Activity.From.Id ) ; latestInteraction = user.user_interaction.MaxBy ( e = > e.created_at ) ; } latestInteraction.preferred_city_id = selectedCity.id ; latestInteraction.gif_created = true ; using ( var userInteractionService = new UserInteractionService ( ) ) { userInteractionService.UpdateUserInteraction ( latestInteraction ) ; } var shareIntroReply = context.MakeMessage ( ) ; shareIntroReply.Text = `` Great choice ! You are now participating in the competition . If you dare then pass your message \uD83D\uDE0E '' ; await context.PostAsync ( shareIntroReply ) ; var reply = await MessageUtility.MakeShareMessageCard ( context , fbAccount , latestInteraction , false ) ; await context.PostAsync ( reply ) ; context.Done ( DialogResult.Done ) ; } [ LuisIntent ( `` '' ) ] [ LuisIntent ( `` None '' ) ] public async Task NoneIntent ( IDialogContext context , LuisResult result ) { messenger_user user ; using ( var userService = new MessengerUserService ( ) ) { user = userService.FindByFacebookId ( context.Activity.From.Id ) ; } var phrase = CreateMisunderstoodPhrase ( user , result.Query ) ; using ( var misunderstoodPhraseService = new MisunderstoodPhraseService ( ) ) { misunderstoodPhraseService.CreatePhrase ( phrase ) ; } List < concert_city > concertCities ; using ( var concertCityService = new ConcertCityService ( ) ) { concertCities = concertCityService.GetUpcomingConcertCities ( ) .ToList ( ) ; } // Prompt city var reply = context.MakeMessage ( ) ; reply.Text = `` I 'm not sure what you mean \uD83E\uDD14 < br/ > Which Grøn Koncert would you like to attend ? `` ; reply.SuggestedActions = new SuggestedActions { Actions = concertCities.Select ( e = > MessageUtility.MakeQuickAnswer ( e.name ) ) .ToList ( ) } ; await context.PostAsync ( reply ) ; context.Wait ( MessageReceived ) ; } protected override void OnDeserializedCustom ( StreamingContext context ) { } } [ Serializable ] public abstract class AbstractBasicDialog < T > : LuisDialog < T > { protected AbstractBasicDialog ( ) : base ( new LuisService ( new LuisModelAttribute ( ConfigurationManager.AppSettings [ `` LuisAppId '' ] , ConfigurationManager.AppSettings [ `` LuisAPIKey '' ] , domain : ConfigurationManager.AppSettings [ `` LuisAPIHostName '' ] ) ) ) { } [ LuisIntent ( `` Cancel '' ) ] public virtual async Task CancelIntent ( IDialogContext context , LuisResult result ) { var randomQuotes = new List < string > { `` If you say so , I 'll leave you alone for now '' , `` alright then , I 'll leave you alone '' , `` Okay then , I wo n't bother you anymore '' } ; await context.PostAsync ( MessageUtility.RandAnswer ( randomQuotes ) ) ; context.Done ( DialogResult.Cancel ) ; } [ LuisIntent ( `` Start '' ) ] public virtual async Task StartIntent ( IDialogContext context , LuisResult result ) { context.Done ( DialogResult.Restart ) ; } [ LuisIntent ( `` CustomerSupport '' ) ] public async Task CustomerSupportIntent ( IDialogContext context , LuisResult result ) { using ( var userService = new MessengerUserService ( ) ) { var user = userService.FindByFacebookId ( context.Activity.From.Id ) ; if ( user ! = null ) { user.receiving_support = true ; userService.UpdateUser ( user ) ; } } await context.PostAsync ( `` I 'll let customer service know , that you want to talk to them . They will get back to you within 24 hours. < br/ > If at any time you want to return to me , and start passing a message , just type \ '' Stop customer support\ '' . `` ) ; context.Call ( new CustomerSupportDialog ( ) , ResumeAfterCustomerSupport ) ; } private async Task ResumeAfterCustomerSupport ( IDialogContext context , IAwaitable < DialogResult > result ) { context.Done ( await result ) ; } protected misunderstood_phrase CreateMisunderstoodPhrase ( messenger_user user , string phrase ) { return new misunderstood_phrase { phrase = phrase , dialog = GetType ( ) .Name , messenger_user_id = user.id } ; } [ OnDeserialized ] private void OnDeserialized ( StreamingContext context ) { OnDeserializedCustom ( context ) ; } protected abstract void OnDeserializedCustom ( StreamingContext context ) ; } [ Serializable ] public class BasicLuisDialog : LuisDialog < DialogResult > { private static FacebookService FacebookService = > new FacebookService ( new FacebookClient ( ) ) ; public BasicLuisDialog ( ) : base ( new LuisService ( new LuisModelAttribute ( ConfigurationManager.AppSettings [ `` LuisAppId '' ] , ConfigurationManager.AppSettings [ `` LuisAPIKey '' ] , domain : ConfigurationManager.AppSettings [ `` LuisAPIHostName '' ] ) ) ) { } [ LuisIntent ( `` '' ) ] [ LuisIntent ( `` None '' ) ] public async Task NoneIntent ( IDialogContext context , LuisResult result ) { var facebookAccount = await FacebookService.GetAccountAsync ( context.Activity.From.Id ) ; RegisterUser ( facebookAccount , null , out var user ) ; var phrase = CreateMisunderstoodPhrase ( user , result.Query ) ; using ( var misunderstoodPhraseService = new MisunderstoodPhraseService ( ) ) { misunderstoodPhraseService.CreatePhrase ( phrase ) ; } var reply = context.MakeMessage ( ) ; reply.SuggestedActions = new SuggestedActions { Actions = new List < CardAction > { new CardAction { Title = `` Get started '' , Type = ActionTypes.ImBack , Value = `` Get started '' } , new CardAction { Title = `` Customer support '' , Type = ActionTypes.ImBack , Value = `` Customer support '' } } } ; var name = string.IsNullOrEmpty ( facebookAccount.FirstName ) ? `` '' : $ '' { facebookAccount.FirstName } `` ; reply.Text = $ '' Hm , I 'm not sure what you mean { name } \uD83E\uDD14 Here are some ways you can interact with me : '' ; await context.PostAsync ( reply ) ; context.Wait ( MessageReceived ) ; } [ LuisIntent ( `` Greeting '' ) ] [ LuisIntent ( `` Positive '' ) ] [ LuisIntent ( `` Start '' ) ] public async Task GreetingIntent ( IDialogContext context , LuisResult result ) { var rnd = new Random ( ) ; var facebookAccount = await FacebookService.GetAccountAsync ( context.Activity.From.Id ) ; // Initial Greeting var greetings = new List < string > { `` Well hello there '' , `` Hi there '' } ; if ( ! string.IsNullOrEmpty ( facebookAccount.FirstName ) ) { greetings.Add ( `` Hi { 0 } '' ) ; greetings.Add ( `` Hello { 0 } '' ) ; greetings.Add ( `` Welcome { 0 } '' ) ; } if ( facebookAccount.Gender == `` male '' ) greetings.Add ( `` Hey handsome '' ) ; else if ( facebookAccount.Gender == `` female '' ) greetings.Add ( `` Hi gorgeous '' ) ; var randIndex = rnd.Next ( greetings.Count ) ; var greeting = string.Format ( greetings [ randIndex ] , facebookAccount.FirstName ) ; await context.PostAsync ( greeting ) ; await MessageUtility.StartTyping ( context , 300 ) ; country country ; using ( var countryService = new CountryService ( ) ) { country = countryService.FindCountry ( facebookAccount.Locale ) ; } var userHasCountry = RegisterUser ( facebookAccount , country , out var user ) ; // If user contry not found prompt for answer if ( ! userHasCountry ) { var countryReply = context.MakeMessage ( ) ; countryReply.Text = `` You are hard to keep track of - where are you from ? `` ; countryReply.SuggestedActions = new SuggestedActions { Actions = new List < CardAction > { MessageUtility.MakeQuickAnswer ( `` Denmark '' ) , MessageUtility.MakeQuickAnswer ( `` Norway '' ) , MessageUtility.MakeQuickAnswer ( `` Sweden '' ) , MessageUtility.MakeQuickAnswer ( `` Other '' ) } } ; await context.PostAsync ( countryReply ) ; context.Call ( new CountryDialog ( ) , AfterCountryDialog ) ; } else { await FunPrompt ( context , country ) ; } } private async Task AfterCountryDialog ( IDialogContext countryContext , IAwaitable < country > countryAwaitable ) { var country = await countryAwaitable ; var facebookAccount = await FacebookService.GetAccountAsync ( countryContext.Activity.From.Id ) ; using ( var userService = new MessengerUserService ( ) ) { var user = userService.FindByFacebookId ( facebookAccount.Id ) ; user.country = country ; userService.UpdateUser ( user ) ; } var reply = countryContext.MakeMessage ( ) ; reply.Text = `` That 's cool \uD83D\uDE0E '' ; await countryContext.PostAsync ( reply ) ; await MessageUtility.StartTyping ( countryContext , 350 ) ; await FunPrompt ( countryContext , country ) ; } private async Task FunPrompt ( IDialogContext context , country country ) { if ( country ? .name == `` norway '' & & DateTime.Now < new DateTime ( 2018 , 8 , 13 ) ) { var reply = context.MakeMessage ( ) ; reply.Text = `` Unfortunately the competition is n't open in Norway yet . You can still talk to customer support if you want to '' ; reply.SuggestedActions = new SuggestedActions { Actions = new List < CardAction > { MessageUtility.MakeQuickAnswer ( `` Customer support '' ) } } ; await context.PostAsync ( reply ) ; context.Wait ( MessageReceived ) ; } else if ( ( country ? .name == `` denmark '' & & DateTime.Now > = new DateTime ( 2018 , 7 , 29 ) ) || ( country ? .name == `` norway '' & & DateTime.Now > = new DateTime ( 2018 , 10 , 21 ) ) ) { var reply = context.MakeMessage ( ) ; reply.Text = `` The competition has ended . You can still talk to customer support if you want to '' ; reply.SuggestedActions = new SuggestedActions { Actions = new List < CardAction > { MessageUtility.MakeQuickAnswer ( `` Customer support '' ) } } ; await context.PostAsync ( reply ) ; context.Wait ( MessageReceived ) ; } else { await context.PostAsync ( `` Are you up for some fun ? `` ) ; context.Call ( new IntroductionDialog ( ) , ResumeAfterDialog ) ; } } [ LuisIntent ( `` CustomerSupport '' ) ] public async Task CustomerSupportIntent ( IDialogContext context , LuisResult result ) { using ( var userService = new MessengerUserService ( ) ) { var user = userService.FindByFacebookId ( context.Activity.From.Id ) ; if ( user ! = null ) { user.receiving_support = true ; userService.UpdateUser ( user ) ; } } await context.PostAsync ( `` I 'll let customer support know , that you want to talk to them . They should be messaging you shortly. < br/ > You can end your conversation with customer support at any time by typing \ '' Stop customer support\ '' . `` ) ; context.Call ( new CustomerSupportDialog ( ) , ResumeAfterDialog ) ; } private async Task ResumeAfterDialog ( IDialogContext context , IAwaitable < DialogResult > result ) { var resultState = await result ; if ( resultState == DialogResult.Restart ) await GreetingIntent ( context , null ) ; else if ( resultState == DialogResult.CustomerSupport ) await ResumeAfterCustomerSupport ( context ) ; else if ( resultState == DialogResult.Done || resultState == DialogResult.Cancel ) context.Done ( resultState ) ; else context.Wait ( MessageReceived ) ; } private async Task ResumeAfterCustomerSupport ( IDialogContext context ) { using ( var userService = new MessengerUserService ( ) ) { var user = userService.FindByFacebookId ( context.Activity.From.Id ) ; if ( user ! = null ) { user.receiving_support = false ; userService.UpdateUser ( user ) ; } } await context.PostAsync ( `` I hope you got the help you needed . Would you like to pass a message to a friend ? `` ) ; context.Call ( new IntroductionDialog ( ) , ResumeAfterDialog ) ; } private bool RegisterUser ( FacebookAccount fbAccount , country country , out messenger_user user ) { if ( string.IsNullOrEmpty ( fbAccount ? .Id ) ) { user = null ; return false ; } using ( var userService = new MessengerUserService ( ) ) { user = userService.FindByFacebookId ( fbAccount.Id ) ; if ( user ! = null ) return user.country ! = null ; user = new messenger_user { id = fbAccount.Id , country = country } ; userService.CreateUser ( user ) ; return user.country ! = null ; } } protected misunderstood_phrase CreateMisunderstoodPhrase ( messenger_user user , string phrase ) { return new misunderstood_phrase { phrase = phrase , dialog = GetType ( ) .Name , messenger_user_id = user.id } ; } } Conversation.UpdateContainer ( builder = > { builder.RegisterModule ( new DialogModule ( ) ) ; builder.RegisterModule ( new ReflectionSurrogateModule ( ) ) ; builder.RegisterModule ( new DialogModule_MakeRoot ( ) ) ; builder.RegisterModule ( new AzureModule ( Assembly.GetExecutingAssembly ( ) ) ) ; var store = new TableBotDataStore ( ConfigurationManager.ConnectionStrings [ `` StorageConnectionString '' ] .ConnectionString ) ; builder.Register ( c = > store ) .Keyed < IBotDataStore < BotData > > ( AzureModule.Key_DataStore ) .AsSelf ( ) .SingleInstance ( ) ; builder.Register ( c = > new CachingBotDataStore ( store , CachingBotDataStoreConsistencyPolicy .ETagBasedConsistency ) ) .As < IBotDataStore < BotData > > ( ) .AsSelf ( ) .InstancePerLifetimeScope ( ) ; builder.RegisterType < BasicLuisDialog > ( ) .As < LuisDialog < DialogResult > > ( ) .InstancePerDependency ( ) ; } ) ;"
"public class ReverseProxyController : NancyModule { public ReverseProxyController ( ) { Get [ `` / '' , true ] = async ( parameters , ct ) = > { var result = await GetResult ( parameters , ct ) ; return result ; } ; } private async Task < Response > GetResult ( dynamic parameters , CancellationToken ct ) { var client = new HttpClient ( ) ; string url = Request.Query [ `` url '' ] .Value.ToString ( ) ; if ( url == null ) return null ; client.DefaultRequestHeaders.Add ( `` Access-Control-Allow-Origin '' , `` * '' ) ; client.DefaultRequestHeaders.Add ( `` User-Agent '' , `` Mozilla/5.0 ( Windows NT 6.1 ; WOW64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/54.0.2840.71 Safari/537.36 '' ) ; client.DefaultRequestHeaders.Add ( `` Upgrade-Insecure-Requests '' , `` 1 '' ) ; client.DefaultRequestHeaders.Add ( `` Accept '' , `` text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , */* ; q=0.8 '' ) ; client.DefaultRequestHeaders.Add ( `` Accept-Encoding '' , `` gzip , deflate , sdch , br '' ) ; client.DefaultRequestHeaders.Add ( `` Accept-Language '' , `` en-US , en ; q=0.8 , ru ; q=0.6 '' ) ; var response = await client.GetAsync ( url , ct ) ; ct.ThrowIfCancellationRequested ( ) ; switch ( response.StatusCode ) { case HttpStatusCode.OK : var stream = await response.Content.ReadAsStreamAsync ( ) ; return Response.FromStream ( stream , response.Content.Headers.ContentType ! = null ? response.Content.Headers.ContentType.ToString ( ) : `` application/octet-stream '' ) ; default : return Response.AsText ( `` \nError `` + response.StatusCode ) ; } } }"
"services.AddScoped < Interface , Class > ( ) ; ... . 200 lines laterservices.AddScoped < ISettings , Settings > ( )"
"public static int Main ( string [ ] args ) { try { AppDomain currentDomain = AppDomain.CurrentDomain ; currentDomain.UnhandledException += new UnhandledExceptionEventHandler ( GlobalExceptionHandler ) ; string name = Assembly.GetExecutingAssembly ( ) .GetName ( ) .Name ; MessageBox.Show ( string.Format ( `` Executing assembly is { 0 } '' , name ) ) ; // TODO : Remove after testing < = this one is seen IntPtr mutexHandle = CreateMutex ( IntPtr.Zero , true , name ) ; long error = GetLastError ( ) ; MessageBox.Show ( string.Format ( `` Last error int was { 0 } '' , error.ToString ( ) ) ) ; // TODO : Remove after testing < = this one is also seen if ( error == ERROR_ALREADY_EXISTS ) { ReleaseMutex ( mutexHandle ) ; IntPtr hWnd = FindWindow ( `` # NETCF_AGL_BASE_ '' , null ) ; if ( ( int ) hWnd > 0 ) { SetForegroundWindow ( hWnd ) ; } return 0 ; } MessageBox.Show ( `` made it into Main method # 4 '' ) ; // TODO : Remove after testing < = this one is seen ReleaseMutex ( mutexHandle ) ; MessageBox.Show ( `` made it into Main method # 5 '' ) ; // TODO : Remove after testing < = this one is seen DeviceInfo devIn = DeviceInfo.GetInstance ( ) ; MessageBox.Show ( `` made it into Main method # 6 '' ) ; // TODO : Remove after testing < = this one is seen Wifi.DisableWifi ( ) ; MessageBox.Show ( `` made it into Main method # 7 '' ) ; // TODO : Remove after testing < = this one is seen // Instantiate a new instance of Form1 . frmCentral f1 = new frmCentral ( ) ; f1.Height = devIn.GetScreenHeight ( ) ; f1.Text = SSCS.GetFormTitle ( `` SSCS HHS '' , `` '' , `` '' ) ; MessageBox.Show ( `` made it before Application.Run ( ) in Main method '' ) ; // TODO : Remove after testing < = this one is NOT seen Application.Run ( f1 ) ; devIn.Close ( ) ; Application.Exit ( ) ; return 0 ; } catch ( Exception ex ) { SSCS.ExceptionHandler ( ex , `` Main '' ) ; return 0 ; } } // Main ( ) method public frmCentral ( ) { try { // // Required for Windows Form Designer support // InitializeComponent ( ) ; MessageBox.Show ( `` made it past InitializeComponent ( ) in frmCentral constructor '' ) ; // < = this displays devIn = DeviceInfo.GetInstance ( ) ; MessageBox.Show ( `` made it past DeviceInfo.GetInstance ( ) in frmCentral constructor '' ) ; // < = this displays dbconn = DBConnection.GetInstance ( ) ; MessageBox.Show ( `` made it past DBConnection.GetInstance ( ) in frmCentral constructor '' ) ; WindowState = FormWindowState.Maximized ; UpdateMenuItemSelectable = false ; ResetConnectionFetchForm = false ; AllowNewItems = true ; listboxWork.Focus ( ) ; MessageBox.Show ( `` made it through frmCentral constructor '' ) ; // < = this one does NOT display } catch ( Exception ex ) { SSCS.ExceptionHandler ( ex , `` frmCentral ( ) '' ) ; } } // frmCentral Constructor // Singleton pattern , or at least a derivation thereofpublic static DBConnection GetInstance ( ) { MessageBox.Show ( `` made it into DBConnection.GetInstance ( ) '' ) ; try { if ( instance == null ) { MessageBox.Show ( `` made it into DBConnection.GetInstance ( ) ; instance was null '' ) ; instance = new DBConnection ( ) ; } } catch ( Exception ex ) { SSCS.ExceptionHandler ( ex , `` DBConnection.GetInstance '' ) ; } return instance ; } private DBConnection ( ) { try { // Connection String string conStr = `` Data Source = `` + filename ; string cmpStr = conStr + `` .tmp '' ; MessageBox.Show ( string.Format ( `` made it into DBConnection constructor . cmpStr == { 0 } '' , cmpStr ) ) ; // TODO : Comment out or remove if ( File.Exists ( filename+ '' .tmp '' ) ) File.Delete ( filename+ '' .tmp '' ) ; engine = new SqlCeEngine ( conStr ) ; MessageBox.Show ( string.Format ( `` SqlCeEngine created . conStr == { 0 } '' , conStr ) ) ; // TODO : Comment out or remove if ( File.Exists ( filename ) ) { MessageBox.Show ( string.Format ( `` file { 0 } exists '' , filename ) ) ; // TODO : Comment out or remove } else { // Create the SQL Server CE database engine.CreateDatabase ( ) ; MessageBox.Show ( `` Made it past call to engine.CreateDatabase ( ) '' ) ; // TODO : Comment out or remove } engine.Dispose ( ) ; objCon = new SqlCeConnection ( conStr ) ; MessageBox.Show ( `` Made it past call to new SqlCeConnection ( conStr ) '' ) ; // TODO : Comment out or remove objCon.Open ( ) ; } catch ( Exception ex ) { SSCS.ExceptionHandler ( ex , `` DBConnection.DBConnection '' ) ; } } public static void ExceptionHandler ( Exception ex , string location ) { try { MessageBox.Show ( `` Exception : `` + ex.Message + `` \n\nLocation : `` + location , GetFormTitle ( `` SSCS : `` + ex.GetType ( ) .FullName , '' '' , '' '' ) ) ; } catch ( Exception exc ) { MessageBox.Show ( `` Exception Handler generated an exception ! \n '' + exc.Message + `` \n\nCalling Location : `` + location , GetFormTitle ( `` SSCS : `` + exc.GetType ( ) .FullName , '' '' , '' '' ) ) ; } } public static string GetFormTitle ( string formName , string serialNo , string siteNo ) { string titleBar = formName == `` '' ? `` SSCS HHS '' : formName ; if ( ( serialNo == `` '' ) ) { User person = new User ( ) ; person.getUserFromTable ( ) ; serialNo = person.getSerialNo ( ) ; } if ( frmCentral.HashSiteMapping.ContainsKey ( siteNo ) ) { siteNo = ( string ) frmCentral.HashSiteMapping [ siteNo ] ; } if ( serialNo ! = `` '' ) titleBar += `` - `` + serialNo + ( siteNo == `` '' ? `` '' : `` Site # '' + siteNo ) ; return titleBar ; } currentDomain.UnhandledException += new UnhandledExceptionEventHandler ( GlobalExceptionHandler ) ; static void GlobalExceptionHandler ( object sender , UnhandledExceptionEventArgs args ) { Exception e = ( Exception ) args.ExceptionObject ; MessageBox.Show ( string.Format ( `` GlobalExceptionHandler caught { 0 } ; Compact Framework Version == { 1 } '' , e.Message , Environment.Version.ToString ( ) ) ) ; } public static string GetFormTitle ( string formName , string serialNo , string siteNo ) { MessageBox.Show ( string.Format ( `` GetFormTitle ( ) reached . formName == { 0 } ; serialNo == { 1 } ; siteNo == { 2 } '' , formName , serialNo , siteNo ) ) ; // TODO : Remove after testing string titleBar = formName == `` '' ? `` SSCS HHS '' : formName ; if ( ( serialNo == `` '' ) ) { User person = new User ( ) ; person.getUserFromTable ( ) ; serialNo = person.getSerialNo ( ) ; } if ( frmCentral.HashSiteMapping.ContainsKey ( siteNo ) ) { siteNo = ( string ) frmCentral.HashSiteMapping [ siteNo ] ; } if ( serialNo ! = `` '' ) titleBar += `` - `` + serialNo + ( siteNo == `` '' ? `` '' : `` Site # '' + siteNo ) ; MessageBox.Show ( string.Format ( `` titleBar val about to be returned . Val is { 0 } '' , titleBar ) ) ; // TODO : Remove after testing return titleBar ; } 0 ) Made it into DBConnection.GetInstance ( ) 1 ) Made it into DBConnection.GetInstance ( ) instance was null2 ) Made it to DBConnection constructor cmpStr == ... .3 ) Sqlceengine created . conStr == ... 4 ) File \My Documents\HHSDB.SDF exists5 ) Made it past call to new SqlCeConnection ( conStr ) 6 ) GetFormTitle ( ) reached . fromName == SSCS : System.Data.SqlserverCe.SqlCeException ; serial No == ; siteNo == * Let 's have no attempts at humor revolving around warm booty , now !"
public int SumTo ( int max ) { int sum = 0 ; for ( var i = 1 ; i < = max ; i++ ) { sum += i ; } return sum ; } public int SumTo ( int max ) { int sum = 0 ; for ( var i = 0 ; i < = max ; i++ ) { sum += i ; } return sum ; } sum = max * ( max + 1 ) / 2 ; public int SumArray ( int [ ] array ) { int sum = 0 ; for ( var i = 0 ; i < array.Length ; i++ ) { sum += array [ i ] ; } return sum ; }
"< Window x : Class= '' WpfRichTextBoxUnderline.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' Title= '' MainWindow '' Height= '' 350 '' Width= '' 525 '' > < DockPanel LastChildFill= '' True '' > < Button Name= '' SaveAndReloadButton '' Content= '' Save and Reload '' DockPanel.Dock= '' Bottom '' Click= '' SaveAndReloadButton_Click '' / > < ToggleButton Name= '' UnderlineButton '' DockPanel.Dock= '' Top '' Width= '' 20 '' Command= '' { x : Static EditingCommands.ToggleUnderline } '' CommandTarget= '' { Binding ElementName=RichText } '' > < ToggleButton.Content > < TextBlock Text= '' U '' TextDecorations= '' Underline '' / > < /ToggleButton.Content > < /ToggleButton > < RichTextBox Name= '' RichText '' SelectionChanged= '' RichTextBox_SelectionChanged '' / > < /DockPanel > < /Window > private void RichTextBox_SelectionChanged ( object sender , RoutedEventArgs e ) { if ( this.RichText.Selection ! = null ) { object currentValue = this.RichText.Selection.GetPropertyValue ( Inline.TextDecorationsProperty ) ; this.UnderlineButton.IsChecked = ( currentValue == DependencyProperty.UnsetValue ) ? false : currentValue ! = null & & currentValue.Equals ( TextDecorations.Underline ) ; } } public Stream GenerateStreamFromString ( string s ) { MemoryStream stream = new MemoryStream ( ) ; StreamWriter writer = new StreamWriter ( stream ) ; writer.Write ( s ) ; writer.Flush ( ) ; stream.Position = 0 ; return stream ; } private async void SaveAndReloadButton_Click ( object sender , RoutedEventArgs e ) { string data = null ; var range = new TextRange ( this.RichText.Document.ContentStart , this.RichText.Document.ContentEnd ) ; using ( var memoryStream = new MemoryStream ( ) ) { range.Save ( memoryStream , DataFormats.Rtf ) ; memoryStream.Position = 0 ; using ( StreamReader reader = new StreamReader ( memoryStream ) ) { data = await reader.ReadToEndAsync ( ) ; } } // load var stream = GenerateStreamFromString ( data ) ; range = new TextRange ( this.RichText.Document.ContentStart , this.RichText.Document.ContentEnd ) ; range.Load ( stream , DataFormats.Rtf ) ; }"
Project = x.Project == null ? null : new Model { ... }
"var newList = oldList.Select ( x = > new Thing { FullName = String.Format ( `` { 0 } { 1 } '' , x.FirstName , x.LastName ) , OtherThingId = x.GetOtherThing ( ) ! = null : x.GetOtherThing ( ) .Id : 0 // Might call x.GetOtherThing ( ) twice ? } ) ; public OtherThing GetOtherThing ( ) { if ( this.Category == null ) return null ; return this.Category.OtherThings.FirstOrDefault ( t = > t.Text == this.Text ) ; } public OtherThing GetOtherThing ( ) { return new OtherThing { Id = new Random ( ) .Next ( 100 ) } ; }"
class A { public virtual void M ( ) { } } class B : A { public override void M ( ) { } } class C : B { public override void M ( ) { } }
"public event EventHandler < MyEventArgs > SampleEvent ; public class HasEvent { // Declare an event of delegate type EventHandler of // MyEventArgs . public event EventHandler < MyEventArgs > SampleEvent ; public void DemoEvent ( string val ) { // Copy to a temporary variable to be thread-safe . EventHandler < MyEventArgs > temp = SampleEvent ; if ( temp ! = null ) temp ( this , new MyEventArgs ( val ) ) ; } }"
"log.Info ( typeof ( DbContext ) .AssemblyQualifiedName ) ; Microsoft.EntityFrameworkCore.DbContext , Microsoft.EntityFrameworkCore , Version=2.0.2.0 , Culture=neutral , PublicKeyToken=adb9793829ddae60"
"[ Fact ] [ AutoRollback ] public void Entity_should_be_in_list ( ) { Entity e = new Entity { Name = `` Test '' , } ; dataContext.Entities.InsertOnSubmit ( e ) ; dataContext.SubmitChanges ( ) ; selenium.Open ( `` http : //localhost/MyApp '' ) ; Assert.True ( selenium.IsTextPresent ( `` Test '' ) ) ; }"
[ HttpPost ] [ ValidateAntiForgeryToken ] public ActionResult Create ( ICollection < Book > bookList ) { if ( ModelState.IsValid ) { foreach ( var item in bookList ) db.Books.Add ( item ) ; db.SaveChanges ( ) ; return RedirectToAction ( `` Index '' ) ; } return View ( articlediscounts ) ; } < fieldset > < legend > Book < /legend > < table id= '' tableBooks '' class= '' display '' cellspacing= '' 0 '' width= '' 100 % '' > < thead > < tr > < th > Title < /th > < th > Author < /th > < /tr > < /thead > < tbody > @ for ( int i = 0 ; i < 10 ; i++ ) { < tr > < td > < div class= '' editor-field '' > @ Html.EditorFor ( model = > model.Title ) @ Html.ValidationMessageFor ( model = > model.Title ) < /div > < /td > < td > < div class= '' editor-field '' > @ Html.EditorFor ( model = > model.Author ) @ Html.ValidationMessageFor ( model = > model.Author ) < /div > < /td > < /tr > } < /tbody > < /table > < p > < input type= '' submit '' value= '' Create '' / > < /p > < /fieldset >
// Example bool is truebool t = true ; // Convert bool to intint i = t ? 1 : 0 ; Console.WriteLine ( i ) ; // 1
"CreateTable ( `` dbo.NetC_EF_ZoneMapping '' , c = > new { PostcodeKey = c.String ( nullable : false , maxLength : 128 ) , Zone_ID = c.Int ( ) , } ) .PrimaryKey ( t = > t.PostcodeKey ) .ForeignKey ( `` dbo.NetC_EF_Zone '' , t = > t.Zone_ID ) .Index ( t = > t.Zone_ID ) ; .PrimaryKey ( t = > t.Zone_ID ) /// < summary > /// Represents a mapping between a postcode and a zone/// < /summary > [ Table ( `` NetC_EF_ZoneMapping '' ) ] public class ZoneMapping { /// < summary > /// Gets or sets the postcode identifier /// < /summary > [ Key ] public String PostcodeKey { get ; set ; } /// < summary > /// Gets or sets the Zone identifier /// < /summary > [ Key ] public Zone Zone { get ; set ; } } var result = this.context.ZoneMappings.Include ( `` Zone '' ) .Where ( z = > z.Zone.ID == 257 & & z.PostcodeKey == `` 2214 '' ) ; var result2 = new FreightContext ( ) .ZoneMappings.Include ( `` Zone '' ) .Where ( z = > z.Zone.ID == 257 & & z.PostcodeKey == `` 2214 '' ) ; if ( result.First ( ) .Zone.ID ! = result2.First ( ) .Zone.ID ) throw new InvalidOperationException ( ) ; // Copy the contents of the posted file to a memory stream using ( StreamReader sr = new StreamReader ( fileUpload.PostedFile.InputStream ) ) using ( FreightContext context = new FreightContext ( ) ) { // Attempt to run the import ZoneMappingCSVImporter importer = new ZoneMappingCSVImporter ( sr , context , System.Globalization.CultureInfo.CurrentUICulture ) ; var items = importer.GetItems ( ) .ToList ( ) ; importer.SaveItems ( items ) ; this.successBox.Value = `` Import completed and added `` + items.Count ( ) + `` zones mappings . `` ; } public ZoneMappingCSVImporter ( TextReader textReader , FreightContext context , CultureInfo culture ) : base ( textReader , context , culture ) { this.reader.Configuration.RegisterClassMap ( new ZoneMappingMap ( this.context ) ) ; } /// < summary > /// Initializes a new instance of the < see cref= '' ZoneMap '' / > class . /// < /summary > public ZoneMappingMap ( FreightContext context ) { if ( context == null ) throw new ArgumentNullException ( `` context '' ) ; Map ( m = > m.PostcodeKey ) ; Map ( m = > m.Zone ) .ConvertUsing ( row = > { // Grab the name of the zone then go find this in the database String name = row.GetField < String > ( `` Zone '' ) ; return context.Zones.Where ( z = > String.Compare ( z.Name , name , true ) == 0 ) .FirstOrDefault ( ) ; } ) ; }"
"modelBuilder.Entity < AlbumTrack > ( ) .HasIndex ( t = > new { t.TrackNumber , t.AlbumId ) .IsUnique ( ) ; modelBuilder.Entity < AlbumTrack > ( ) .HasIndex ( t = > EF.Property < int > ( t , '' AlbumId '' ) ) .IsUnique ( ) ; modelBuilder.Entity < AlbumTrack > ( ) .HasIndex ( t = > new { t.TrackNumber , EF.Property < int > ( t , '' AlbumId '' ) } ) .IsUnique ( ) ;"
if ( searchBox.Text.Equals ( `` string literal '' ) ) { MessageBox.Show ( `` another string literal '' ) ; } if ( specialcase ) doEasterEgg ( ) ;
"public class Base { public string LogicalName { get ; set ; } public int NumberOfChars { get ; set ; } public Base ( ) { } public Base ( string logicalName , int numberOfChars ) { LogicalName = logicalName ; NumberOfChars = numberOfChars ; } } public class Derived1 : Base { public const string EntityLogicalName = `` Name1 '' ; public const int EntityNumberOfChars = 30 ; public Derived1 ( ) : base ( EntityLogicalName , EntityNumberOfChars ) { } } public class Derived2 : Base { public const string EntityLogicalName = `` Name2 '' ; public const int EntityNumberOfChars = 50 ; public Derived2 ( ) : base ( EntityLogicalName , EntityNumberOfChars ) { } } public IEnumerable < T > GetEntities < T > ( string entityName , int numberOfChars ) where T : Base { //Some code to get the entities } public void TestEntities < T > ( ) where T : Base { var entities = GetEntities < T > ( T.EntityLogicalName , T.EntityNumberOfChars ) ; //some other code to test the entities }"
"var obj = new EduBranch { Id = model.Id , WorklevelId = model.WorklevelId , EdulevelId = model.EdulevelId , Title = model.Title , StartEduYearId = model.StartEduYearId , EndEduYearId = model.EndEduYearId , } ; var objectCreate1 = new CodeObjectCreateExpression ( `` EduBranch '' , new CodeExpression [ ] { } ) ;"
"int a = random.Next ( 0 , 4 ) ; if ( a = 0 ) statement1 if ( a = 1 ) statement2 if ( a = 2 ) statement3 if ( a = 3 ) statement4 int a = random.Next ( 0 , 1000 ) if ( a < 250 ) statement1 if ( a > = 250 & & a < 500 ) statement2 if ( a > = 500 & & a < 750 ) statement3 if ( a > = 750 ) statement4"
interface IFoo < in T > where T : struct { void Boo ( T x ) ; }
"public class TestClass { public IOrderedEnumerable < long > orderedDatas { get ; set ; } public string Name { get ; set ; } public TestClass ( string name ) { this.Name = name ; this.orderedDatas = new List < long > ( ) .OrderBy ( p = > p ) ; } } [ HttpPost ] public IHttpActionResult Post ( [ FromBody ] TestClass test ) { return Ok ( test ) ; } { Name : `` tiit '' , `` orderedDatas '' : [ 2 , 3 , 4 ] , } public class TestClass { public IOrderedEnumerable < long > orderedDatas { get ; set ; } public string Name { get ; set ; } public TestClass ( ) { this.Name = `` default '' ; this.orderedDatas = new List < long > ( ) .OrderBy ( i = > i ) ; } } var json = `` { Name : 'tiit ' , 'orderedDatas ' : [ 2,3,4,332232 ] } '' ; var result = JsonConvert.DeserializeObject < TestClass > ( json ) ;"
[ Theory ] [ Dependency ] public void TestWithDependencies ( IThing thing ) { thing.Hello ( ) ; } public sealed class DependencyAttribute : AutoDataAttribute { public DependencyAttribute ( ) : base ( new Fixture ( ) .Customize ( new WindsorCustomization ( ) ) ) { } } public class WindsorCustomization : ICustomization { public WindsorCustomization ( ) { // build container here using SUT installers } public void Customize ( IFixture fixture ) { fixture.Inject < IThing > ( new Thing ( ) ) ; } }
"using System ; public abstract class Dispatcher < T > { public T Call ( object foo ) { return CallDispatch ( ( dynamic ) foo ) ; } protected abstract T CallDispatch ( int foo ) ; protected abstract T CallDispatch ( string foo ) ; } public class Program { public static void Main ( ) { TypeFinder d = new TypeFinder ( ) ; Console.WriteLine ( d.Call ( 0 ) ) ; Console.WriteLine ( d.Call ( `` '' ) ) ; } private class TypeFinder : Dispatcher < CallType > { protected override CallType CallDispatch ( int foo ) { return CallType.Int ; } protected override CallType CallDispatch ( string foo ) { return CallType.String ; } } private enum CallType { Int , String } }"
"// Here 's an example of what I could receiveExpression < Action < int > > expression = ( a = > Console.WriteLine ( a * 2 ) ) ; // And here 's what I 'm trying to do to invoke itexpression.Compile ( ) .DynamicInvoke ( 6 ) ; Object reference not set to an instance of an object at System.Linq.jvm.Runner.CreateDelegate ( ) at System.Linq.Expressions.LambdaExpression.Compile ( ) at System.Linq.Expressions.Expression ` 1 [ System.Action ` 1 [ System.Int32 ] ] .Compile ( ) at TestSolution2.AppDelegate.FinishedLaunching ( MonoTouch.UIKit.UIApplication app , MonoTouch.Foundation.NSDictionary options )"
"Parallel.ForEach ( Directory.GetFiles ( dir ) .ToList ( ) , file = > { _destDetail.CurrOp = string.Format ( `` Copying file : { 0 } '' , Path.GetFileName ( file ) ) ; File.Copy ( file , file.Replace ( _destDetail.Source , _destDetail.Dest ) , true ) ; if ( _destDetail.Progress < _destDetail.MaxProgress ) _destDetail.Progress++ ; } ) ;"
"void Main ( ) { ( new [ ] { 0,1,2,3 } ) .Where ( IsNull ) .Dump ( ) ; } static bool IsNull ( object arg ) { return arg == null ; }"
class KerningHelper { private void ! KerningHelper ( ) { ( ( IDisposable ) this ) .Dispose ( ) ; } }
"public class MyClass { private string _userID ; //new code [ Obsolete ( `` This constructor is obsolete , please use other constructor . `` , true ) ] public MyClass ( ) { _userID = `` '' ; //defaulting to empty string for all those using this constructor } public MyClass ( string userID ) { _userID = userID ; //this is why they need to use this constructor } }"
"[ EnableClientAccess ( ) ] public class SubscriptionService : DomainService { [ Query ( IsDefault = true ) ] public IQueryable < Subscription > GetSubscriptionList ( ) { SubscriptionDataContext dc = new SubscriptionDataContext ( ) ; var subs = dc.Subscription.Where ( x = > x.Status == STATUS.Active ) .Select ( x = > new Subscription { ID = x.ID , Name = x.Name } ) .ToList ( ) ; return subs.AsQueryable ( ) ; } public void InsertSubscription ( Subscription sub ) { if ( ! sub.ID.IsEmpty ( ) ) { SubscriptionDataContext dc = new SubscriptionDataContext ( ) ; Subscription tmpSub = dc.GetByID < Subscription > ( sub.ID ) ; if ( tmpSub ! = null ) { tmpSub.Name = sub.Name ; dc.Save ( tmpSub ) ; } else { tmpSub = new Subscription ( ) ; tmpSub.Name = sub.Name ; dc.Save ( tmpSub ) ; } } } public void UpdateSubscription ( Subscription sub ) { if ( ! sub.ID.IsEmpty ( ) ) { SubscriptionDataContext dc = new SubscriptionDataContext ( ) ; Subscription tmpSub = dc.GetByID < Subscription > ( sub.ID ) ; if ( tmpSub ! = null ) { tmpSub.Name = sub.Name ; dc.Save ( tmpSub ) ; } } } public void DeleteSubscription ( Subscription sub ) { if ( ! sub.ID.IsEmpty ( ) ) { SubscriptionDataContext dc = new SubscriptionDataContext ( ) ; Subscription tmpSub = dc.GetByID < Subscription > ( sub.ID ) ; if ( tmpSub ! = null ) { dc.Delete ( tmpSub ) ; } } } }"
"class Program { static void Main ( string [ ] args ) { string solutionPath = @ '' ..\..\..\StaticAnalysis.sln '' ; MSBuildWorkspace workspace = MSBuildWorkspace.Create ( ) ; Solution solution = workspace.OpenSolutionAsync ( solutionPath ) .Result ; var vdocProject = FindProjectByName ( `` VDoc '' , solution ) ; SemanticModel semanticModel = vdocProject.Documents.First ( ) .GetSemanticModelAsync ( ) .Result ; var nsVDocQueryFunctionalTest = ( INamespaceOrTypeSymbol ) semanticModel.LookupNamespacesAndTypes ( 0 , null , `` VDocQueryFunctionalTest '' ) .First ( ) ; var tVDocQuery = ( ITypeSymbol ) semanticModel.LookupNamespacesAndTypes ( 0 , nsVDocQueryFunctionalTest , `` VDocQuery '' ) .First ( ) ; TypeInfo ti = GetFromVDocRef ( solution ) ; bool result1 = ti.Type.Equals ( tVDocQuery ) ; // false , expected = true ? //these 2 lines added after Jason Malinowski answer var sVDocQuerySource = SymbolFinder.FindSourceDefinitionAsync ( ti.Type , solution ) .Result ; bool result2 = sVDocQuerySource.Equals ( tVDocQuery ) ; // false , expected = true ? //this line solved the problem , thanks to @ Tamas bool result3 = ti.Type.DeclaringSyntaxReferences.FirstOrDefault ( ) ? .Equals ( tVDocQuery.DeclaringSyntaxReferences.FirstOrDefault ( ) ) ? ? false ; } private static TypeInfo GetFromVDocRef ( Solution solution ) { var vdocQueryTestProject = FindProjectByName ( `` VDocQueryTest '' , solution ) ; var vdocQueryTestProjectSemanticModel = vdocQueryTestProject.Documents.First ( ) .GetSemanticModelAsync ( ) .Result ; var compilationUnit = ( CompilationUnitSyntax ) vdocQueryTestProject.Documents.First ( ) .GetSyntaxRootAsync ( ) .Result ; var ns = ( NamespaceDeclarationSyntax ) compilationUnit.Members [ 0 ] ; var cls = ( ClassDeclarationSyntax ) ns.Members [ 0 ] ; var method = ( MethodDeclarationSyntax ) cls.Members [ 0 ] ; var stat = ( ExpressionStatementSyntax ) method.Body.Statements [ 0 ] ; var newExpr = ( ObjectCreationExpressionSyntax ) stat.Expression ; var ti = vdocQueryTestProjectSemanticModel.GetTypeInfo ( newExpr ) ; return ti ; } static Project FindProjectByName ( string projectName , Solution solution ) { var project = solution.Projects.SingleOrDefault ( p = > p.Name == projectName ) ; return project ; } } using System.Collections.Generic ; namespace VDocQueryFunctionalTest { public class VDocQuery { public VDocQuery ( ) { } public void AddFields ( string docType , params string [ ] fields ) { } public List < VDoc > Execute ( ) { return null ; } } } using VDocQueryFunctionalTest ; namespace VDocQueryTest { static class VDocQueryUse { public static void VDocQueryUseTest ( ) { new VDocQuery ( ) ; } } }"
{ { CalendarCustom|year= { { { year| { { # time : Y } } } } } |month=08|float=right } } ( \ { \ { .+ ? ( : ? \ } \ } [ ^\ { ] + ? \ } \ } ) )
Guid bandCLSID = new Guid ( `` { 01E04581-4EEE-11d0-BFE9-00AA005B4383 } '' ) ; Type bandType = Type.GetTypeFromCLSID ( bandCLSID ) ; IDeskBand deskband = ( IDeskBand ) Activator.CreateInstance ( bandType ) ; ( deskband as IOleObjectWithSite ) .SetSite ( various interfaces ) ; ( deskband as IDockingWindow ) .ShowDW ( true ) ;
const string replacement = @ '' '' ;
var x = new Nullable < int > ( ) ; var y = new int ? ( ) ; var z = typeof ( Nullable < int > ) ; var v = typeof ( int ? ) ;
"pantry = ( from p in items group p by p.IngredientId into g select new PantryItem ( ) { IngredientId = g.Key , Amt = g.Sum ( p = > p.Amt ) } ) ; x - nullx - nully - 5y - 10z - 10z - null x - nully - 15z - 10 x - 0.0y - 15z - 10"
"Enumerable.Range ( 0 , 10000 ) .AsParallel ( ) .ForAll ( _ = > Thread.Sleep ( 50000 ) ) ;"
"public ActionResult IPN ( ) { var uri = new UriBuilder ( `` https : //www.coinpayments.net/index.php '' ) ; uri.SetQueryParam ( `` cmd '' , `` _pay_auto '' ) ; uri.SetQueryParam ( `` merchant '' , `` merchant_key '' ) ; uri.SetQueryParam ( `` allow_extra '' , `` 0 '' ) ; uri.SetQueryParam ( `` currency '' , `` USD '' ) ; uri.SetQueryParam ( `` reset '' , `` 1 '' ) ; uri.SetQueryParam ( `` success_url '' , `` http : //localhost:49725/home/SuccessResponse '' ) ; //todo : redirect to confirm success page uri.SetQueryParam ( `` key '' , `` wc_order_5b7b84b91a882 '' ) ; uri.SetQueryParam ( `` cancel_url '' , `` http : //localhost:49725/home/FailiureResponse '' ) ; uri.SetQueryParam ( `` order_id '' , `` 36 '' ) ; uri.SetQueryParam ( `` invoice '' , `` PREFIX-36 '' ) ; uri.SetQueryParam ( `` ipn_url '' , `` http : //localhost:49725/ ? wc-api=WC_Gateway_Coinpayments '' ) ; uri.SetQueryParam ( `` first_name '' , `` John '' ) ; uri.SetQueryParam ( `` last_name '' , `` Smith '' ) ; uri.SetQueryParam ( `` email '' , `` a @ a.com '' ) ; uri.SetQueryParam ( `` want_shipping '' , `` 1 '' ) ; uri.SetQueryParam ( `` address1 '' , `` 228 Park Ave S & address2 '' ) ; uri.SetQueryParam ( `` city '' , `` New York '' ) ; uri.SetQueryParam ( `` state '' , `` NY '' ) ; uri.SetQueryParam ( `` zip '' , `` 10003-1502 '' ) ; uri.SetQueryParam ( `` country '' , `` US '' ) ; uri.SetQueryParam ( `` item_name '' , `` Order 33 '' ) ; uri.SetQueryParam ( `` quantity '' , `` 1 '' ) ; uri.SetQueryParam ( `` amountf '' , `` 100.00000000 '' ) ; uri.SetQueryParam ( `` shippingf '' , `` 0.00000000 '' ) ; return Redirect ( uri.ToString ( ) ) ; } Public ActionResult SuccessResponse ( ) { var ipn_version = Request.Form [ `` ipn_version '' ] ; var ipn_id = Request.Form [ `` ipn_id '' ] ; var ipn_mode = Request.Form [ `` ipn_mode '' ] ; var merchant = Request.Form [ `` merchant '' ] ; var txn_id = Request.Form [ `` txn_id '' ] ; var status = Request.Form [ `` status '' ] ; return Content ( status ) ; }"
double maxVal = Double.MaxValue ; maxVal = maxVal + 10000000000000000000 ; Console.WriteLine ( maxVal + `` `` + Double.IsInfinity ( maxVal ) ) ; //prints 1.79769313486232E+308 False
private IMyInterface _instance = new MyImplementaion ( ) ;
"struct AnimalCount { int Chickens ; int Goats ; } IEnumerable < AnimalCount > FarmsInEachPen ( ) { ... . yield new AnimalCount ( x , y ) ; ... . } ConsumeChicken ( IEnumerable < int > ) ; ConsumeGoat ( IEnumerable < int > ) ; ConsumeChicken ( FarmsInEachPen ( ) .Select ( x = > x.Chickens ) ) ; ConsumeGoats ( FarmsInEachPen ( ) .Select ( x = > x.Goats ) ) ;"
"object target = ... // some instance on which we want to set a propertyobject value = ... // some value - in this case , a stringvar propertyInfo = ... // some property of target - in this case , not a stringtry { propertyInfo.SetValue ( obj , value , null ) ; } catch ( ArgumentException ) { // We go off and look for our own way of converting between // the type of value and the type of the property . } if ( propertyInfo.PropertyType.IsAssignableFrom ( value.GetType ( ) ) { // Try/catch as above } else { // Do the manual conversion as if the exception had been thrown . }"
"[ Display ( Name = '' Contractor 1 : '' ) ] [ Remote ( `` ValidateContractor '' , `` Contracts '' ) ] public string Cntrctr1 { get ; set ; } [ Display ( Name = `` Contractor 2 : '' ) ] [ Remote ( `` ValidateContractor '' , `` Contracts '' ) ] ` enter code here ` public string Cntrctr2 { get ; set ; } public JsonResult ValidateContractor1 ( string Cntrctr ) { var valid = Validations.ValidateContractor ( Cntrctr ) ; if ( ! valid ) { return Json ( `` Enter correct contractor '' , JsonRequestBehavior.AllowGet ) ; } else { return Json ( true , JsonRequestBehavior.AllowGet ) ; } } public static bool ValidateContractor ( string CntrctrNM ) { bool valid ; using ( var entities = new CAATS_Entities ( ) ) { var result = ( from t in entities.PS_VENDOR_V where ( t.VNDR_1_NM ) .Equals ( CntrctrNM ) select t ) .FirstOrDefault ( ) ; if ( result ! = null ) { valid = true ; } else { valid = false ; } } return valid ; }"
"public static ICoreService2010 GetTridionClient ( ) { var binding = new BasicHttpBinding ( ) { Name = `` BasicHttpBinding_TridionCoreService '' , CloseTimeout = new TimeSpan ( 0 , 1 , 0 ) , OpenTimeout = new TimeSpan ( 0 , 1 , 0 ) , ReceiveTimeout = new TimeSpan ( 0 , 10 , 0 ) , SendTimeout = new TimeSpan ( 0 , 1 , 0 ) , AllowCookies = false , BypassProxyOnLocal = false , HostNameComparisonMode = HostNameComparisonMode.StrongWildcard , MaxBufferSize = 4194304 , // 4MB MaxBufferPoolSize = 4194304 , MaxReceivedMessageSize = 4194304 , MessageEncoding = WSMessageEncoding.Text , TextEncoding = System.Text.Encoding.UTF8 , TransferMode = TransferMode.Buffered , UseDefaultWebProxy = true , ReaderQuotas = new System.Xml.XmlDictionaryReaderQuotas ( ) { MaxDepth = 32 , MaxStringContentLength = 4194304 , // 4MB MaxArrayLength = 4194304 , MaxBytesPerRead = 4194304 , MaxNameTableCharCount = 16384 } , Security = new BasicHttpSecurity ( ) { Mode = BasicHttpSecurityMode.TransportCredentialOnly , Transport = new HttpTransportSecurity ( ) { ClientCredentialType = HttpClientCredentialType.None , } , Message = new BasicHttpMessageSecurity ( ) { ClientCredentialType = BasicHttpMessageCredentialType.UserName } } } ; string hostname = ConfigurationManager.AppSettings [ `` TridionUrl '' ] ; string username = ConfigurationManager.AppSettings [ `` TridionUsername '' ] ; hostname = string.Format ( `` { 0 } { 1 } { 2 } '' , hostname.StartsWith ( `` http '' ) ? `` '' : `` http : // '' , hostname , hostname.EndsWith ( `` / '' ) ? `` '' : `` / '' ) ; var endpoint = new EndpointAddress ( hostname + `` /webservices/CoreService.svc/basicHttp_2010 '' ) ; var factory = new ChannelFactory < ICoreService2010 > ( binding , endpoint ) ; factory.Credentials.UserName.UserName = username ; return factory.CreateChannel ( ) ; }"
"public partial class Startup { private static string clientId = ConfigurationManager.AppSettings [ `` ClientId '' ] ; private static string aadInstance = ConfigurationManager.AppSettings [ `` AADInstance '' ] ; private static string tenantId = ConfigurationManager.AppSettings [ `` TenantId '' ] ; private static string postLogoutRedirectUri = ConfigurationManager.AppSettings [ `` PostLogoutRedirectUri '' ] ; private static string authority = aadInstance + tenantId ; public void ConfigureAuth ( IAppBuilder app ) { app.SetDefaultSignInAsAuthenticationType ( CookieAuthenticationDefaults.AuthenticationType ) ; app.UseCookieAuthentication ( new CookieAuthenticationOptions ( ) ) ; app.UseOpenIdConnectAuthentication ( new OpenIdConnectAuthenticationOptions { ClientId = clientId , Authority = authority , PostLogoutRedirectUri = postLogoutRedirectUri } ) ; } } public void LoginUsingAzure ( ) { HttpContext.GetOwinContext ( ) .Authentication.Challenge ( new AuthenticationProperties { RedirectUri = `` / '' } , OpenIdConnectAuthenticationDefaults.AuthenticationType ) ; }"
"using System ; using System.Net ; using System.Net.NetworkInformation ; using System.Windows ; namespace WebClientAsync { public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; NetworkChange.NetworkAvailabilityChanged += ( sender , e ) = > Dispatcher.Invoke ( delegate ( ) { this.Title = `` Network is `` + ( e.IsAvailable ? `` available '' : `` down '' ) ; } ) ; } const string SRC = `` http : //ovh.net/files/10Mio.dat '' ; const string TARGET = @ '' d : \stuff\10Mio.dat '' ; private async void btnDownload_Click ( object sender , RoutedEventArgs e ) { btnDownload.IsEnabled = false ; btnDownload.Content = `` Downloading `` + SRC ; try { using ( var wcl = new WebClient ( ) ) { wcl.Credentials = System.Net.CredentialCache.DefaultNetworkCredentials ; await wcl.DownloadFileTaskAsync ( new Uri ( SRC ) , TARGET ) ; btnDownload.Content = `` Downloaded '' ; } } catch ( Exception ex ) { btnDownload.Content = ex.Message + Environment.NewLine + ( ( ex.InnerException ! = null ) ? ex.InnerException.Message : String.Empty ) ; } btnDownload.IsEnabled = true ; } } } using System ; using System.Net ; using System.Threading ; using System.Threading.Tasks ; using System.Windows ; namespace WebClientAsync { public partial class MainWindow : Window { const string SRC = `` http : //ovh.net/files/10Mio.dat '' ; const string TARGET = @ '' d : \stuff\10Mio.dat '' ; // Time needed to restore network connection const int TIMEOUT = 30 * 1000 ; public MainWindow ( ) { InitializeComponent ( ) ; } private async void btnDownload_Click ( object sender , RoutedEventArgs e ) { btnDownload.IsEnabled = false ; btnDownload.Content = `` Downloading `` + SRC ; CancellationTokenSource cts = new CancellationTokenSource ( ) ; CancellationToken token = cts.Token ; Timer timer = new Timer ( ( o ) = > { // Force async cancellation cts.Cancel ( ) ; } , null //state , TIMEOUT , Timeout.Infinite // once ) ; DownloadProgressChangedEventHandler handler = ( sa , ea ) = > { // Restart timer if ( ea.BytesReceived < ea.TotalBytesToReceive & & timer ! = null ) { timer.Change ( TIMEOUT , Timeout.Infinite ) ; } } ; btnDownload.Content = await DownloadFileTA ( token , handler ) ; // Note ProgressCallback will fire once again after awaited . timer.Dispose ( ) ; btnDownload.IsEnabled = true ; } private async Task < string > DownloadFileTA ( CancellationToken token , DownloadProgressChangedEventHandler handler ) { string res = null ; WebClient wcl = new WebClient ( ) ; wcl.Credentials = System.Net.CredentialCache.DefaultNetworkCredentials ; wcl.DownloadProgressChanged += handler ; try { using ( token.Register ( ( ) = > wcl.CancelAsync ( ) ) ) { await wcl.DownloadFileTaskAsync ( new Uri ( SRC ) , TARGET ) ; } res = `` Downloaded '' ; } catch ( Exception ex ) { res = ex.Message + Environment.NewLine + ( ( ex.InnerException ! = null ) ? ex.InnerException.Message : String.Empty ) ; } wcl.Dispose ( ) ; return res ; } } }"
"using System ; using System.Collections.Generic ; namespace MvcApplication1.Models { [ Serializable ] public class MonthlyModel { public int TypeId { get ; set ; } public List < YearDTO > Items { get ; set ; } } [ Serializable ] public class YearDTO { public DateTime Year { get ; set ; } public MonthDTO January { get ; set ; } public MonthDTO February { get ; set ; } public MonthDTO March { get ; set ; } public MonthDTO April { get ; set ; } public MonthDTO May { get ; set ; } public MonthDTO June { get ; set ; } public MonthDTO July { get ; set ; } public MonthDTO August { get ; set ; } public MonthDTO September { get ; set ; } public MonthDTO October { get ; set ; } public MonthDTO November { get ; set ; } public MonthDTO December { get ; set ; } } [ Serializable ] public class MonthDTO { public DateTime start { get ; set ; } public DateTime end { get ; set ; } public int priceTypeId { get ; set ; } public bool IsEnabled { get ; set ; } public bool IsSelected { get ; set ; } } } using System ; using System.Collections.Generic ; using System.Web.Mvc ; using MvcApplication1.Models ; namespace MvcApplication1.Controllers { public class HistoricalController : Controller { [ HttpGet ] public ActionResult Monthly ( ) { int typeId = -1 ; try { typeId = Convert.ToInt32 ( RouteData.Values [ `` id '' ] ) ; } catch ( Exception ) { } MonthlyModel mm ; if ( Session [ String.Format ( `` MonthlySelect { 0 } '' , typeId ) ] ! = null ) { mm = ( MonthlyModel ) Session [ String.Format ( `` MonthlySelect { 0 } '' , typeId ) ] ; } else { mm = GetMonthlyModel ( typeId ) ; } return View ( mm ) ; } private MonthlyModel GetMonthlyModel ( int typeId ) { MonthlyModel mm = new MonthlyModel ( ) ; var list = ChartManager.GetAvailableMonthlyCharts ( typeId , 1 , 3 , new DateTime ( 1995 , 1 , 1 ) , DateTime.Today ) ; foreach ( Tuple < DateTime , DateTime , bool , int > val in list ) { var start = val.Item1 ; var end = val.Item2 ; var exists = val.Item3 ; var pti = val.Item4 ; var items = mm.Items ? ? ( mm.Items = new List < YearDTO > ( ) ) ; int idx = items.FindIndex ( f = > f.Year.Year == start.Year ) ; if ( idx == -1 ) { items.Add ( new YearDTO { Year = new DateTime ( start.Year , 1 , 1 ) } ) ; idx = items.FindIndex ( f = > f.Year.Year == start.Year ) ; } switch ( start.Month ) { case 1 : items [ idx ] .January = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 2 : items [ idx ] .February = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 3 : items [ idx ] .March = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 4 : items [ idx ] .April = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 5 : items [ idx ] .May = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 6 : items [ idx ] .June = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 7 : items [ idx ] .July = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 8 : items [ idx ] .August = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 9 : items [ idx ] .September = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 10 : items [ idx ] .October = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 11 : items [ idx ] .November = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; case 12 : items [ idx ] .December = new MonthDTO { start = start , end = end , priceTypeId = pti , IsEnabled = exists , IsSelected = false } ; break ; } } mm.metalId = typeId ; return mm ; } [ HttpPost ] public ActionResult MonthlyCharts ( MonthlyModel model ) { List < ChartDTO > list = new List < ChartDTO > ( ) ; foreach ( YearDTO dto in model.Items ) { var val = dto.January ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.February ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.March ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.April ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.May ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.June ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.July ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.August ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.September ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.October ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.November ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; val = dto.December ; if ( val.IsSelected ) list.Add ( ChartManager.GetChart ( val.start , val.end , model.metalId , 1 , val.priceTypeId ) ) ; } Session [ String.Format ( `` MonthlySelect { 0 } '' , model.metalId ) ] = model ; ModelState.Clear ( ) ; return View ( list ) ; } } } @ model MvcApplication1.Models.MonthlyModel @ { ViewBag.Title = `` Monthly charts `` ; Layout = `` ~/Views/Shared/_Layout.cshtml '' ; } < h2 > @ ( ViewBag.Title ) < /h2 > < div id= '' choice-container '' > @ using ( Html.BeginForm ( `` MonthlyCharts '' , `` Historical '' , FormMethod.Post ) ) { @ Html.TextBox ( `` metalId '' , Model.metalId , new { @ type = `` hidden '' } ) < table > < tr > < th > Year < /th > < th > January < /th > < th > February < /th > < th > March < /th > < th > April < /th > < th > May < /th > < th > June < /th > < th > July < /th > < th > August < /th > < th > September < /th > < th > October < /th > < th > November < /th > < th > December < /th > < th > < /th > < /tr > @ for ( int i = 0 ; i < Model.Items.Count ( ) ; i++ ) { < tr > < td > @ Html.Label ( `` Items [ `` + i + `` ] .Year '' , Model.Items [ i ] .Year.ToString ( @ '' yyyy '' ) ) @ Html.TextBox ( `` Items [ `` + i + `` ] .Year '' , Model.Items [ i ] .Year , new { @ type = `` hidden '' } ) < /td > < td > < div align=center class= '' editor-field '' > @ if ( Model.Items [ i ] .January.IsEnabled ) { @ Html.CheckBox ( `` Items [ `` + i + `` ] .January.IsSelected '' , Model.Items [ i ] .January.IsSelected , new { @ class = `` chk '' } ) } else { @ Html.CheckBox ( `` Items [ `` + i + `` ] .January.IsSelected '' , Model.Items [ i ] .January.IsSelected , new { @ disabled = `` disabled '' } ) } @ Html.TextBox ( `` Items [ `` + i + `` ] .January.IsEnabled '' , Model.Items [ i ] .January.IsEnabled , new { @ type = `` hidden '' } ) @ Html.TextBox ( `` Items [ `` + i + `` ] .January.start '' , Model.Items [ i ] .January.start , new { @ type = `` hidden '' } ) @ Html.TextBox ( `` Items [ `` + i + `` ] .January.end '' , Model.Items [ i ] .January.end , new { @ type = `` hidden '' } ) @ Html.TextBox ( `` Items [ `` + i + `` ] .January.priceTypeId '' , Model.Items [ i ] .January.priceTypeId , new { @ type = `` hidden '' } ) < /div > < /td > @ * ... . 11 times ... . * @ < /tr > } < /table > < input type= '' submit '' class= '' button '' value= '' Get the image '' / > } < /div >"
public class Address { public int ID { get ; set ; } public virtual City City { get ; set ; } } public class City { public int ID { get ; set ; } public string Name { get ; set ; } public virtual Zone Zone { get ; set ; } } public class MyContext : DbContext { public MyContext ( ) : base ( `` TransportService '' ) { } public virtual DbSet < City > Cities { get ; set ; } public virtual DbSet < Address > Addresses { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { base.OnModelCreating ( modelBuilder ) ; modelBuilder.Entity < Address > ( ) .HasRequired ( x = > x.City ) .WithMany ( ) .WillCascadeOnDelete ( true ) ; } } public void Add ( AddressDto address ) { using ( var context = new MyContext ( ) ) { context.Addresses.Add ( address.FromDto < Address > ( ) ) ; context.SaveChanges ( ) ; } }
"private Dictionary < String , Tile > tiles = new Dictionary < String , Tile > ( ) ; Tile tile = tiles.get ( x + `` : '' + y ) ;"
"namespace WumpusWorld { class PlayerAI { //struct that simulates a cell in the AI replication of World Grid struct cellCharacteristics { public int pitPercentage ; public int wumpusPercentage ; public bool isPit ; public bool neighborsMarked ; public int numTimesvisited ; } private cellCharacteristics [ , ] AIGrid ; //array that simulates World Grid for the AI private enum Move { Up , Down , Right , Left , Enter , Escape } ; //enum that represents integers that trigger movement in WumpusWorldForm class Stack < int > returnPath ; //keeps track of each move of AI to trace its path back bool returntoBeg ; //flag that is triggered when AI finds gold int numRandomMoves ; //keeps track of the number of random moves that are done public PlayerAI ( ) { AIGrid = new cellCharacteristics [ 5 , 5 ] ; cellCharacteristics c ; returntoBeg = false ; returnPath = new Stack < int > ( ) ; numRandomMoves = 0 ; for ( int y = 0 ; y < 5 ; y++ ) { for ( int x = 0 ; x < 5 ; x++ ) { c = new cellCharacteristics ( ) ; c.isPit = false ; c.neighborsMarked = false ; c.numTimesvisited = 0 ; AIGrid [ x , y ] = c ; } } } } }"
"static void Main ( string [ ] args ) { const string RegXPattern = @ '' /api/ ( ? < controller > \w+ ) / ( ? < action > \w+ ) / ? $ '' ; var regex = new Regex ( RegXPattern , RegexOptions.IgnoreCase | RegexOptions.Compiled ) ; const string InputToMatch = `` /api/person/load '' ; regex.IsMatch ( InputToMatch ) ; // Warmup var sw = Stopwatch.StartNew ( ) ; for ( int i = 0 ; i < 10000000 ; i++ ) { var match = regex.IsMatch ( InputToMatch ) ; } sw.Stop ( ) ; Console.WriteLine ( sw.Elapsed.ToString ( ) ) ; Console.ReadLine ( ) ; }"
warning CS1570 : XML comment on 'XXX.DocumentedMethod ( ) ' has badly formed XML -- 'Reference to undefined entity 'Delta ' . ' /// < summary > /// & amp ; & Delta ; & # 916 ; /// < /summary > public void DocumentedMethod ( ) { }
public class Base { } public class Derived < T > : Base { } public class Foo { } var derived = new Derived < Foo > ( ) ; derived is Objectderived is Basederived is Derived < Foo > var lazy = new Lazy < Derived < Foo > > ( ) ; lazy is Lazy < Derived < Foo > > lazy is Lazy < Object > lazy is Lazy < Base >
"void prepare3dChart ( Chart chart , ChartArea ca ) { ca.Area3DStyle.Enable3D = true ; Series s = new Series ( ) ; chart.Series.Add ( s ) ; s.ChartType = SeriesChartType.Bubble ; s.MarkerStyle = MarkerStyle.Diamond ; s [ `` PixelPointWidth '' ] = `` 100 '' ; s [ `` PixelPointGapDepth '' ] = `` 1 '' ; chart.ApplyPaletteColors ( ) ; addTestData ( chart ) ; } void addTestData ( Chart chart ) { Random rnd = new Random ( 9 ) ; double x = 0 , y = 0 , z = 0 ; for ( int i = 0 ; i < 100 ; i++ ) { AddXY3d ( chart.Series [ 0 ] , x , y , z ) ; x = Math.Sin ( i / 11f ) * 88 + rnd.Next ( 3 ) ; y = Math.Cos ( i / 10f ) * 88 + rnd.Next ( 5 ) ; z = ( Math.Sqrt ( i * 2f ) * 88 + rnd.Next ( 6 ) ) ; } } int AddXY3d ( Series s , double xVal , double yVal , double zVal ) { int p = s.Points.AddXY ( xVal , yVal , zVal ) ; s.Points [ p ] .Color = Color.Transparent ; return p ; } private void chart1_PostPaint ( object sender , ChartPaintEventArgs e ) { Chart chart = sender as Chart ; if ( chart.Series.Count < 1 ) return ; if ( chart.Series [ 0 ] .Points.Count < 1 ) return ; ChartArea ca = chart.ChartAreas [ 0 ] ; List < List < PointF > > data = new List < List < PointF > > ( ) ; foreach ( Series s in chart.Series ) data.Add ( GetPointsFrom3D ( ca , s , s.Points.ToList ( ) , e.ChartGraphics ) ) ; renderLines ( data , e.ChartGraphics.Graphics , chart , true ) ; renderPoints ( data , e.ChartGraphics.Graphics , chart , 6 ) ; } List < PointF > GetPointsFrom3D ( ChartArea ca , Series s , List < DataPoint > dPoints , ChartGraphics cg ) { var p3t = dPoints.Select ( x = > new Point3D ( ( float ) ca.AxisX.ValueToPosition ( x.XValue ) , ( float ) ca.AxisY.ValueToPosition ( x.YValues [ 0 ] ) , ( float ) ca.AxisY.ValueToPosition ( x.YValues [ 1 ] ) ) ) .ToArray ( ) ; ca.TransformPoints ( p3t.ToArray ( ) ) ; return p3t.Select ( x = > cg.GetAbsolutePoint ( new PointF ( x.X , x.Y ) ) ) .ToList ( ) ; } void renderLines ( List < List < PointF > > data , Graphics graphics , Chart chart , bool curves ) { for ( int i = 0 ; i < chart.Series.Count ; i++ ) { if ( data [ i ] .Count > 1 ) using ( Pen pen = new Pen ( Color.FromArgb ( 64 , chart.Series [ i ] .Color ) , 2.5f ) ) if ( curves ) graphics.DrawCurve ( pen , data [ i ] .ToArray ( ) ) ; else graphics.DrawLines ( pen , data [ i ] .ToArray ( ) ) ; } } void renderPoints ( List < List < PointF > > data , Graphics graphics , Chart chart , float width ) { for ( int s = 0 ; s < chart.Series.Count ; s++ ) { Series S = chart.Series [ s ] ; for ( int p = 0 ; p < S.Points.Count ; p++ ) using ( SolidBrush brush = new SolidBrush ( Color.FromArgb ( 64 , S.Color ) ) ) graphics.FillEllipse ( brush , data [ s ] [ p ] .X - width / 2 , data [ s ] [ p ] .Y - width / 2 , width , width ) ; } } void prepare3dChart ( Chart chart , ChartArea ca ) { ca.Area3DStyle.Enable3D = true ; ca.BackColor = Color.Transparent ; ca.AxisX.Minimum = -300 ; ca.AxisX.Maximum = 300 ; ca.AxisY.Minimum = -300 ; ca.AxisY.Maximum = 300 ; ca.AxisX.Crossing = 0 ; // move both axes.. ca.AxisY.Crossing = 0 ; // to the middle ca.AxisX.Interval = 50 ; ca.AxisY.Interval = 50 ; ca.AxisX.MajorGrid.LineColor = Color.LightGray ; ca.AxisY.MajorGrid.LineColor = Color.LightGray ; chart.Series.Clear ( ) ; Series s = new Series ( ) ; chart.Series.Add ( s ) ; s.ChartType = SeriesChartType.Bubble ; s.MarkerStyle = MarkerStyle.Diamond ; s [ `` PixelPointWidth '' ] = `` 100 '' ; s [ `` PixelPointGapDepth '' ] = `` 1 '' ; chart.ApplyPaletteColors ( ) ; addTestData ( chart ) ; }"
"public class Fallible < T > : IEquatable < Fallible < T > > { # region Constructors public Fallible ( ) { //value defaults to default ( T ) //exception defaults to null } public Fallible ( T value ) : this ( ) { this.value = value ; } public Fallible ( Exception error ) : this ( ) { if ( error == null ) throw new ArgumentNullException ( nameof ( error ) ) ; Error = error ; } public Fallible ( Func < T > getValue ) : this ( ) { if ( error == null ) throw new ArgumentNullException ( nameof ( getValue ) ) ; try { this.value = getValue ( ) ; } catch ( Exception x ) { Error = x ; } } # endregion # region Properties public T Value { get { if ( ! HasValue ) throw new InvalidOperationException ( `` Can not get Value if HasValue is false . `` ) ; return value ; } } private T value ; public Exception Error { get ; } public bool HasValue = > Error == null ; # endregion # region Equality public bool Equals ( Fallible < T > other ) = > ( other ! = null ) & & Equals ( Error , other.Error ) & & Equals ( Value , other.Value ) ; public override bool Equals ( object obj ) = > Equals ( obj as Fallible < T > ) ; public static bool operator == ( Fallible < T > a , Fallible < T > b ) { if ( a == null ) return b == null ; return a.Equals ( b ) ; } public static bool operator ! = ( Fallible < T > a , Fallible < T > b ) { if ( a == null ) return b ! = null ; return ! a.Equals ( b ) ; } public override int GetHashCode ( ) = > HasValue ? Value.GetHashCode ( ) : Error.GetHashCode ( ) ; # endregion public override string ToString ( ) = > HasValue ? $ '' Fallible { { { Value } } } '' : $ '' Fallible { { { Error.GetType ( ) } : { Error.Message } } } '' ; }"
"public static TResult MaxOrDefault < T , TResult > ( this IEnumerable < T > enumerable , Func < T , TResult > func ) { var list = enumerable.ToList ( ) ; if ( ! list.Any ( ) ) return default ( TResult ) ; return list.Max ( func ) ; }"
Console.WriteLine ( new string [ 0 ] .GetType ( ) .IsSerializable ) ; True
"int x ; // ... //if ( x == 10 ) // do something ldloc.0ldc.i4.s 10ceqbne.un.s do_not_do_something// do somethingdo_not_do_something : ldloc.0ldc.i4.s 10ceqldc.i4.0ceqstloc.1ldloc.1brtrue.s do_not_do_something// do somethingdo_not_do_something : int x , y ; // ... //y = x == 10 ; if ( y ! = 0 ) // do something"
"Name : ModuleNameAntiForgery : enabledAuthor : The Orchard TeamWebsite : http : //orchardproject.netVersion : 1.0OrchardVersion : 1.0Description : Description for the moduleFeatures : ModuleName : Description : Description for feature ModuleName . using Orchard.Mvc.Routes ; using Orchard.WebApi.Routes ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Web ; using System.Web.Http ; namespace ModuleName { public class ModuleNameApiRoutes : IHttpRouteProvider { public void GetRoutes ( ICollection < RouteDescriptor > routes ) { foreach ( var routeDescriptor in GetRoutes ( ) ) { routes.Add ( routeDescriptor ) ; } } public IEnumerable < RouteDescriptor > GetRoutes ( ) { return new [ ] { new HttpRouteDescriptor { Name = `` ModuleName '' , Priority = 5 , RouteTemplate = `` api/modulename/ { controller } / { id } '' , Defaults = new { area = `` ModuleName '' , id = RouteParameter.Optional } } } ; } } } using Newtonsoft.Json.Linq ; using Orchard ; using Orchard.Data ; using ModuleName.Models ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Net ; using System.Net.Http ; using System.Web.Http ; namespace ModuleName.Controllers { public class ConsumptionController : ApiController { public IOrchardServices Services { get ; private set ; } private readonly IRepository < Vessel_ConsumptionPartRecord > _repository ; public ConsumptionController ( IOrchardServices orchardServices , IRepository < Vessel_ConsumptionPartRecord > repository ) { _repository = repository ; } // GET : Home public HttpResponseMessage Get ( ) { ... } } }"
SELECT *FROM CandidateWHERE Candidate.IsArchived = 0 AND -- Do not inlude restricted locations ( RestrictionStatus = 2 ) Candidate.CandidateId NOT IN ( SELECT CandidateId FROM CandidateLocation WHERE IsArchived = 0 AND CountryISOCode = @ Location AND RestrictionStatus = 2 ) AND ( -- Include Explicit Permitted Locations Candidate.CandidateId IN ( SELECT CandidateId FROM CandidateLocation WHERE IsArchived = 0 AND CountryISOCode = @ Location AND RestrictionStatus = 1 ) OR -- Include Candidates with no Explicit Permitted Locations Candidate.CandidateId NOT IN ( SELECT CandidateId FROM CandidateLocation WHERE IsArchived = 0 AND RestrictionStatus = 1 ) )
public interface ISecurityContext { dynamic Data { get ; } bool CurrenUserAuthenticated ( ) ; IEnumerable < object > CurrenUserRoles ( ) ; } public class ExperimentalPolicy : ISecurityPolicy { public PolicyResult Enforce ( ISecurityContext context ) { dynamic data = context.Data ; // Data property is not accessible . } }
public class Sample { public void Foo ( ) { Console.WriteLine ( `` Foo '' ) ; ; } } public class EmptyStatementRemoval : CSharpSyntaxRewriter { public override SyntaxNode VisitEmptyStatement ( EmptyStatementSyntax node ) { return null ; } } public class Sample { public void Foo ( ) { Console.WriteLine ( `` Foo '' ) ; # region SomeRegion //Some other code # endregion ; } }
T value1 = el.value ; // it 's of type T alreadyT value2 = default ( T ) ; if ( value1 ! = value2 ) // gives the following error : Operator ' ! = ' can not be applied to operands of type 'T ' and 'T ' { // ... }
class Foo { public static string a = `` abc '' ; public static string b = Foo.a + `` def '' ; }
"[ AuthorizeFunc ] [ BlockWidget ] public PartialViewResult WidgetPayments ( ) { PaymentFormMV data ; // No New Keyword used if ( SimUtils.IsDelayedPaymentAllowed ) { data = Pay.GetData ( PaymentPageMode.DelayedPayment ) ; } else { data = PayHelp.GetData ( PaymentPageMode.MakePayment ) ; } return PartialView ( `` PaymentsWrapper '' , data ) ; } [ AuthorizeFunc ] [ BlockWidget ] public PartialViewResult WidgetPayments ( ) { PaymentFormMV data = new PaymentFormMV ( ) ; // New Keyword used if ( SimUtils.IsDelayedPaymentAllowed ) { data = Pay.GetData ( PaymentPageMode.DelayedPayment ) ; } else { data = PayHelp.GetData ( PaymentPageMode.MakePayment ) ; } return PartialView ( `` PaymentsWrapper '' , data ) ; }"
new AppleList ( ) ; new OrangeList ( ) ; new LemonList ( ) ; new FruitList < Fruit.Apple > ( ) ; new FruitList < Fruit.Orange > ( ) ; new FruitList < Fruit.Lemon > ( ) ;
String [ ] lines = System.IO.File.ReadAllLines ( path ) ; foreach ( String line in lines ) { line.Trim ( ) ; } for ( int i=0 ; i < lines.Length ; ++i ) { lines [ i ] = lines [ i ] .Trim ( ) ; }
< PropertyGroup > < TargetFramework > netstandard1.6 < /TargetFramework > < IntermediateOutputPath > new\path\to\obj < /IntermediateOutputPath > < /PropertyGroup >
"library pinvokeproblem ; { $ R *.res } uses Windows , SysUtils ; procedure Test ( const testByte : byte ) ; stdcall ; begin OutputDebugString ( PWideChar ( IntToStr ( testByte ) ) ) ; end ; exports Test ; end . [ DllImport ( `` pinvokeproblem.dll '' , CallingConvention = CallingConvention.StdCall , EntryPoint = `` Test '' ) ] private static extern void Test ( byte testByte ) ; public static void Main ( string [ ] args ) { for ( int i = 1 ; i < = 1000 ; i++ ) // more iterations = better chance to fail { int threadCount = 10 ; Parallel.For ( 1 , threadCount , new ParallelOptions { MaxDegreeOfParallelism = threadCount } , test = > { byte byteArgument = 42 ; Test ( byteArgument ) ; Console.WriteLine ( String.Format ( `` Iteration { 0 } : { 1 } '' , test , byteArgument ) ) ; } ) ; } }"
"namespace ConsoleApplication13 { using System ; using System.Reflection ; using PostSharp ; using PostSharp.Aspects ; using PostSharp.Aspects.Dependencies ; using PostSharp.Extensibility ; [ Serializable ] [ ProvideAspectRole ( `` COMPOSER '' ) ] public sealed class ComposeAspectAttribute : CompositionAspect { [ NonSerialized ] private readonly Type interfaceType ; private readonly Type implementationType ; public ComposeAspectAttribute ( Type interfaceType , Type implementationType ) { this.interfaceType = interfaceType ; this.implementationType = implementationType ; } // Invoked at build time . We return the interface we want to implement . protected override Type [ ] GetPublicInterfaces ( Type targetType ) { return new [ ] { this.interfaceType } ; } // Invoked at run time . public override object CreateImplementationObject ( AdviceArgs args ) { return Activator.CreateInstance ( this.implementationType ) ; } } [ Serializable ] [ ProvideAspectRole ( `` INTERCEPTOR '' ) ] [ MulticastAttributeUsage ( MulticastTargets.Method ) ] [ AspectRoleDependency ( AspectDependencyAction.Order , AspectDependencyPosition.After , `` COMPOSER '' ) ] public sealed class InterceptAspectAttribute : MethodInterceptionAspect { public override void CompileTimeInitialize ( MethodBase method , AspectInfo aspectInfo ) { base.CompileTimeInitialize ( method , aspectInfo ) ; // Warning in VS output Message.Write ( method , SeverityType.Warning , `` XXX '' , `` Method : `` + method.Name ) ; } public override void OnInvoke ( MethodInterceptionArgs args ) { Console.WriteLine ( `` Intercepted before '' ) ; args.Proceed ( ) ; Console.WriteLine ( `` Intercepted after '' ) ; } } interface ITest { void Call ( ) ; } class TestImpl : ITest { public void Call ( ) { Console.WriteLine ( `` CALL remote implemented '' ) ; } } [ InterceptAspect ( AspectPriority = 1 ) ] [ ComposeAspect ( typeof ( ITest ) , typeof ( TestImpl ) , AspectPriority = 2 ) ] class Test { // this should , after compilation , have all methods of ITest , implemented through an instance of TestImpl , which get intercepted before TestImpl is called public void CallLocalImplementedTest ( ) { Console.WriteLine ( `` CALL local implemented '' ) ; } } class Program { static void Main ( ) { var test = new Test ( ) ; ITest t = Post.Cast < Test , ITest > ( test ) ; Console.WriteLine ( `` TEST # 1 '' ) ; t.Call ( ) ; Console.WriteLine ( `` TEST # 2 '' ) ; test.CallLocalImplementedTest ( ) ; Console.ReadLine ( ) ; } } } TEST # 1CALL remote implementedTEST # 2Intercepted beforeCALL local implementedIntercepted after"
"< s : Envelope xmlns : s= '' http : //schemas.xmlsoap.org/soap/envelope/ '' xmlns : u= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd '' > < s : Header > < VsDebuggerCausalityData xmlns= '' http : //schemas.microsoft.com/vstudio/diagnostics/servicemodelsink '' > uIDPo/zwMmtdsVhFsAVDkQbiV/4AAAAA1zXtnc72UEm+4tlKzvCxsvN6OC2prvRIljIX4XzHKEYACQAA < /VsDebuggerCausalityData > < o : Security s : mustUnderstand= '' 1 '' xmlns : o= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd '' > < u : Timestamp u : Id= '' _0 '' > < u : Created > 2016-03-18T12:45:27.558Z < /u : Created > < u : Expires > 2016-03-18T12:50:27.558Z < /u : Expires > < /u : Timestamp > < o : UsernameToken u : Id= '' uuid-2c7986ba-eee5-4411-90a9-a02b625c55ff-1 '' > < o : Username > MyUserName < /o : Username > < o : Password Type= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0 # PasswordText '' > MyPlainPassword < /o : Password > < /o : UsernameToken > < /o : Security > < /s : Header > < s : Body xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < generateId xmlns= '' http : //com.vedaadvantage/dp3/Enterprise/StandardTradeCreditCommercial/IndividualCommercialService '' / > < /s : Body > < /s : Envelope > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < system.serviceModel > < bindings > < customBinding > < binding name= '' myBinding '' > < textMessageEncoding messageVersion= '' Soap11 '' / > < security authenticationMode= '' UserNameOverTransport '' messageSecurityVersion= '' WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 '' > < /security > < httpsTransport / > < /binding > < /customBinding > < /bindings > < client > < endpoint address= '' https : // { URL } '' binding= '' customBinding '' bindingConfiguration= '' myBinding '' contract= '' ServiceReference2.MyService '' name= '' IndividualCommercialService '' / > < /client > < /system.serviceModel > < /configuration > private static X509Certificate2 DownloadSslCertificate ( string strDNSEntry ) { X509Certificate2 cert = null ; using ( TcpClient client = new TcpClient ( ) ) { //ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 ; client.Connect ( strDNSEntry , 443 ) ; SslStream ssl = new SslStream ( client.GetStream ( ) , false , new RemoteCertificateValidationCallback ( ValidateServerCertificate ) , null ) ; try { ssl.AuthenticateAsClient ( strDNSEntry ) ; } catch ( AuthenticationException e ) { //log.Debug ( e.Message ) ; ssl.Close ( ) ; client.Close ( ) ; return cert ; } catch ( Exception e ) { //log.Debug ( e.Message ) ; ssl.Close ( ) ; client.Close ( ) ; return cert ; } cert = new X509Certificate2 ( ssl.RemoteCertificate ) ; ssl.Close ( ) ; client.Close ( ) ; return cert ; } } private static void Main ( string [ ] args ) { var proxy = new MyService ( ) ; var uri = proxy.Endpoint.Address.Uri ; var cer = DownloadSslCertificate ( uri.DnsSafeHost ) ; EndpointIdentity identity = EndpointIdentity.CreateDnsIdentity ( cer.Subject.Replace ( `` CN= '' , `` '' ) ) ; EndpointAddress address = new EndpointAddress ( proxy.Endpoint.Address.Uri , identity ) ; proxy.Endpoint.Address = address ; proxy.ClientCredentials.UserName.UserName = `` MyUserName '' ; proxy.ClientCredentials.UserName.Password = `` MyPlainPassword '' ; proxy.ClientCredentials.ServiceCertificate.DefaultCertificate = cer ; proxy.HellowWorld ( ) ; }"
"Func < string , bool > pingable = ( url ) = > return pingtest ( url ) ; * Func < string , Task < bool > > pingable = ( input ) = > { return pingtest ( url ) ; } ; * Task < bool > pingable = new Task < bool > ( ( input ) = > { return pingtest ( url ) ; } ) ; Func < string , bool > pingable = ( input ) = > { return pingtest ( url ) ; } ; var tasks = new List < Task > ( ) ; * tasks.Add ( async new Task ( ping ( `` google.de '' ) ) ) ; Task < int > task = new Task < int > ( obj = > { return obj + 1 ; } , 300 ) ; Func < string , Task < bool > > ping = url = > Task.Run ( ( ) = > { try { Ping pinger = new Ping ( ) ; PingReply reply = pinger.Send ( url ) ; return reply.Status == IPStatus.Success ; } catch ( Exception ) { return false ; } } ) ; var tasks = new List < Task > ( ) ; tasks.Add ( ping ( `` andreas-reiff.de '' ) ) ; tasks.Add ( ping ( `` google.de '' ) ) ; Task.WaitAll ( tasks.ToArray ( ) ) ; bool online = tasks.Select ( task = > ( ( Task < bool > ) task ) .Result ) .Contains ( true ) ;"
"public class ArrayWrapper { public ArrayWrapper ( int newWidth , int newHeight ) { width = newWidth ; height = newHeight ; data = new int [ width * height ] ; } public int this [ int x , int y ] { get { return data [ y * width + x ] ; } set { data [ y * width + x ] = value ; } } public readonly int width , height ; public readonly int [ ] data ; } public class Program { public static void Main ( string [ ] args ) { ArrayWrapper bigArray = new ArrayWrapper ( 15000 , 15000 ) ; Stopwatch stopwatch = new Stopwatch ( ) ; stopwatch.Start ( ) ; for ( int y = 0 ; y < bigArray.height ; y++ ) for ( int x = 0 ; x < bigArray.width ; x++ ) bigArray.data [ y * bigArray.width + x ] = 12 ; stopwatch.Stop ( ) ; Console.WriteLine ( String.Format ( `` Directly : { 0 } ms '' , stopwatch.ElapsedMilliseconds ) ) ; stopwatch.Restart ( ) ; for ( int y = 0 ; y < bigArray.height ; y++ ) for ( int x = 0 ; x < bigArray.width ; x++ ) bigArray [ x , y ] = 12 ; stopwatch.Stop ( ) ; Console.WriteLine ( String.Format ( `` Via indexer : { 0 } ms '' , stopwatch.ElapsedMilliseconds ) ) ; Console.ReadKey ( ) ; } } Directly : 1282 msVia indexer : 2134 ms bigArray.data [ y * bigArray.width + x ] = 12 ; 000000a2 mov eax , dword ptr [ ebp-3Ch ] // Evaluate index of array000000a5 mov eax , dword ptr [ eax+4 ] 000000a8 mov edx , dword ptr [ ebp-3Ch ] 000000ab mov edx , dword ptr [ edx+8 ] 000000ae imul edx , dword ptr [ ebp-10h ] 000000b2 add edx , dword ptr [ ebp-14h ] // ... until here000000b5 cmp edx , dword ptr [ eax+4 ] // Range checking000000b8 jb 000000BF 000000ba call 6ED23CF5 // Throw IndexOutOfRange000000bf mov dword ptr [ eax+edx*4+8 ] ,0Ch // Assign value to array bigArray [ x , y ] = 12 ; 0000015e push dword ptr [ ebp-18h ] // Push x and y00000161 push 0Ch // ( prepare parameters ) 00000163 mov ecx , dword ptr [ ebp-3Ch ] 00000166 mov edx , dword ptr [ ebp-1Ch ] 00000169 cmp dword ptr [ ecx ] , ecx 0000016b call dword ptr ds : [ 004B27DCh ] // Call the indexer ( ... ) data [ y * width + x ] = value ; 00000000 push ebp 00000001 mov ebp , esp 00000003 sub esp,8 00000006 mov dword ptr [ ebp-8 ] , ecx 00000009 mov dword ptr [ ebp-4 ] , edx 0000000c cmp dword ptr ds : [ 004B171Ch ] ,0 // Some additional checking , I guess ? 00000013 je 0000001A 00000015 call 6ED24648 0000001a mov eax , dword ptr [ ebp-8 ] // Evaluating index0000001d mov eax , dword ptr [ eax+4 ] 00000020 mov edx , dword ptr [ ebp-8 ] 00000023 mov edx , dword ptr [ edx+8 ] 00000026 imul edx , dword ptr [ ebp+0Ch ] 0000002a add edx , dword ptr [ ebp-4 ] // ... until here0000002d cmp edx , dword ptr [ eax+4 ] // Range checking00000030 jb 00000037 00000032 call 6ED23A5D // Throw IndexOutOfRange exception00000037 mov ecx , dword ptr [ ebp+8 ] 0000003a mov dword ptr [ eax+edx*4+8 ] , ecx // Actual assignment } 0000003e nop 0000003f mov esp , ebp 00000041 pop ebp 00000042 ret 8 // Returning bigArray.data [ y * bigArray.width + x ] = 12 ; 000000ae mov eax , dword ptr [ ebp-10h ] 000000b1 imul eax , edx 000000b4 add eax , ebx 000000b6 cmp eax , edi 000000b8 jae 000001FA 000000be mov dword ptr [ ecx+eax*4+8 ] ,0Ch bigArray [ x , y ] = 12 ; 0000016b mov eax , dword ptr [ ebp-14h ] 0000016e imul eax , edx 00000171 add eax , ebx 00000173 cmp eax , edi 00000175 jae 000001FA 0000017b mov dword ptr [ ecx+eax*4+8 ] ,0Ch Directly : 573 msVia indexer : 353 msDirectly : 356 msVia indexer : 362 msDirectly : 351 msVia indexer : 370 msDirectly : 351 msVia indexer : 354 msDirectly : 359 msVia indexer : 356 ms"
interface IPerson { string Name { get ; } } class MyPerson : IPerson { string IPerson.Name { get ; } internal MyPerson ( string withName ) { // does n't work ; Property or indexer 'IPerson.Name ' // can not be assigned to -- it is read only ( ( IPerson ) this ) .Name = withName ; } } class MyPerson : IPerson { string _name ; string IPerson.Name { get { return _name ; } } internal MyPerson ( string withName ) { _name = withName ; } }
"`` ... ... '' .Split ( new String [ ] { `` ... '' , `` .. '' } , StringSplitOptions.None ) ; 1. `` '' 2. `` '' 3. `` '' `` ... ... '' .Split ( new String [ ] { `` .. '' , `` ... '' } , StringSplitOptions.None ) ; 1. `` '' 2. `` '' 3. `` '' 4. `` '' `` 5.x.7 '' .Split ( new String [ ] { `` .x '' , `` x . `` } , StringSplitOptions.None ) `` 5.x.7 '' .Split ( new String [ ] { `` x . `` , `` .x '' } , StringSplitOptions.None )"
public interface IPerson : IEquatable < IPerson > { } //Simple example implementation of Equals ( returns always true ) class Person : IPerson { public bool Equals ( IPerson other ) { return true ; } public override bool Equals ( object obj ) { return true ; } public override int GetHashCode ( ) { return 0 ; } } private static void doEqualityCompares ( ) { var t1 = new Person ( ) ; var hst = new HashSet < Person > ( ) ; var hsi = new HashSet < IPerson > ( ) ; hst.Add ( t1 ) ; hsi.Add ( t1 ) ; //Direct comparison t1.Equals ( t1 ) ; //IEquatable < T > .Equals ( T ) hst.Contains ( t1 ) ; //Equals ( object ) -- > why ? both sides inherit of IPerson ... hst.Contains ( ( IPerson ) t1 ) ; //IEquatable < T > .Equals ( T ) hsi.Contains ( t1 ) ; //IEquatable < T > .Equals ( T ) hsi.Contains ( ( IPerson ) t1 ) ; //IEquatable < T > .Equals ( T ) }
"public interface IEventPublisher < TEvent > { void Publish ( TEvent Event ) ; } public interface IEventSubscriber < TEvent > { void Subscribe ( Action < TEvent > CallBack ) ; } class EventMediator < T > : IEventPublisher < T > , IEventSubscriber < T > { List < Action < T > > Subscriptions = new List < Action < T > > ( ) ; public void Publish ( T Event ) { foreach ( var Subscription in this.Subscriptions ) Subscription.Invoke ( Event ) ; } public void Subscribe ( Action < T > CallBack ) { this.Subscriptions.Add ( CallBack ) ; } } this.Container = new SimpleInjector.Container ( ) ; this.Container.RegisterOpenGeneric ( typeof ( IEventPublisher < > ) , typeof ( EventMediator < > ) , Lifestyle.Singleton ) ; this.Container.RegisterOpenGeneric ( typeof ( IEventSubscriber < > ) , typeof ( EventMediator < > ) , Lifestyle.Singleton ) ; this.Container.Verify ( ) ; class DummyEvent { } var p = this.Container.GetInstance < IEventPublisher < DummyEvent > > ( ) ; var s = this.Container.GetInstance < IEventSubscriber < DummyEvent > > ( ) ; var areSame = ( object.ReferenceEquals ( p , s ) ) ;"
public class AsyncTest { int i ; public async Task DoOpAsync ( ) { await SomeOperationAsync ( ) ; // Does the following code continuation can run // in parrallel ? i++ ; // some other continuation code ... . } public void Start ( ) { for ( int i=0 ; i < 1000 ; i++ ) { var _ = DoOpAsync ( ) ; } // dummy variable to bypass warning } }
class Foo { static void Main ( ) { if ( Main is Foo ) Main ( ) ; } }
"public static class _cWainfoPrintReport { private static int m_currentPageIndex ; private static IList < Stream > m_streams ; public static Stream CreateStream ( string name , string fileNameExtension , Encoding encoding , string mimeType , bool willSeek ) { Stream stream = new MemoryStream ( ) ; m_streams.Add ( stream ) ; return stream ; } public static void _mExport ( LocalReport report , bool print = true , double _pageWightInches = 8.27 , double _pageHeightInches = 11.69 , double _MarginTopInches = 0.025 , double _MarginLeftInches = 0.025 , double _MarginRightInches = 0.025 , double _MarginBottomInches = 0.025 ) { string deviceInfo = @ '' < DeviceInfo > < OutputFormat > EMF < /OutputFormat > < PageWidth > '' + _pageWightInches + `` in < /PageWidth > < PageHeight > '' + _pageHeightInches + `` in < /PageHeight > < MarginTop > '' + _MarginTopInches + `` in < /MarginTop > < MarginLeft > '' + _MarginLeftInches + `` in < /MarginLeft > < MarginRight > '' + _MarginRightInches + `` in < /MarginRight > < MarginBottom > '' + _MarginBottomInches + `` in < /MarginBottom > < /DeviceInfo > '' ; Warning [ ] warnings ; m_streams = new List < Stream > ( ) ; report.Render ( `` Image '' , deviceInfo , CreateStream , out warnings ) ; foreach ( Stream stream in m_streams ) stream.Position = 0 ; if ( print ) { _mPrint ( _pageWightInches , _pageHeightInches , _MarginTopInches , _MarginLeftInches , _MarginRightInches , _MarginBottomInches ) ; } report.ReleaseSandboxAppDomain ( ) ; } // Handler for PrintPageEvents public static void _mPrintPage ( object sender , PrintPageEventArgs ev ) { Metafile pageImage = new Metafile ( m_streams [ m_currentPageIndex ] ) ; // Adjust rectangular area with printer margins . Rectangle adjustedRect = new Rectangle ( ev.PageBounds.Left - ( int ) ev.PageSettings.HardMarginX , ev.PageBounds.Top - ( int ) ev.PageSettings.HardMarginY , ev.PageBounds.Width , ev.PageBounds.Height ) ; // Draw a white background for the report ev.Graphics.FillRectangle ( Brushes.White , adjustedRect ) ; // Draw the report content ev.Graphics.DrawImage ( pageImage , adjustedRect ) ; // Prepare for the next page . Make sure we have n't hit the end . m_currentPageIndex++ ; ev.HasMorePages = ( m_currentPageIndex < m_streams.Count ) ; } public static PaperSize CalculatePaperSize ( double WidthInCentimeters , double HeightInCentimetres ) { int Width = int.Parse ( ( Math.Round ( ( WidthInCentimeters * 0.393701 ) * 100 , 0 , MidpointRounding.AwayFromZero ) ) .ToString ( ) ) ; int Height = int.Parse ( ( Math.Round ( ( HeightInCentimetres * 0.393701 ) * 100 , 0 , MidpointRounding.AwayFromZero ) ) .ToString ( ) ) ; PaperSize NewSize = new PaperSize ( ) ; NewSize.RawKind = ( int ) PaperKind.Custom ; NewSize.Width = Width ; NewSize.Height = Height ; NewSize.PaperName = `` Letter '' ; return NewSize ; } public static void _mPrint ( double _pageWightInches = 8.27 , double _pageHeightInches = 11.69 , double _MarginTopInches = 0.025 , double _MarginLeftInches = 0.025 , double _MarginRightInches = 0.025 , double _MarginBottomInches = 0.025 ) { if ( m_streams == null || m_streams.Count == 0 ) throw new Exception ( `` Error : no stream to print . `` ) ; PrintDocument printDoc = new PrintDocument ( ) ; PaperSize RequiredPaperSize = CalculatePaperSize ( _pageWightInches * 2.54 , _pageHeightInches * 2.54 ) ; bool FoundMatchingPaperSize = false ; for ( int index = 0 ; index < printDoc.PrinterSettings.PaperSizes.Count ; index++ ) { if ( printDoc.PrinterSettings.PaperSizes [ index ] .Height == RequiredPaperSize.Height & & printDoc.PrinterSettings.PaperSizes [ index ] .Width == RequiredPaperSize.Width ) { printDoc.PrinterSettings.DefaultPageSettings.PaperSize = printDoc.PrinterSettings.PaperSizes [ index ] ; printDoc.DefaultPageSettings.PaperSize = printDoc.PrinterSettings.PaperSizes [ index ] ; FoundMatchingPaperSize = true ; break ; } } if ( ! printDoc.PrinterSettings.IsValid ) { throw new Exception ( `` Error : can not find the default printer . `` ) ; } else { printDoc.PrintPage += new PrintPageEventHandler ( _mPrintPage ) ; m_currentPageIndex = 0 ; printDoc.Print ( ) ; } } public static void _mPrintToPrinter ( this LocalReport report ) { _mExport ( report ) ; } public static void _mDisposePrint ( ) { if ( m_streams ! = null ) { foreach ( Stream stream in m_streams ) stream.Close ( ) ; m_streams = null ; } } } PrintViewer _PJobEntry = new PrintViewer ( ) ; DataTable dt = new DataSet1.MainTableDataTable ( ) ; dt.Rows.Add ( 'vales for dataset ' ) ; _PJobEntry._RptView.LocalReport.DataSources.Add ( new ReportDataSource ( `` DataSet1 '' , dt ) ) ; _PJobEntry._RptView.LocalReport.ReportEmbeddedResource = `` WAINFOBUSSOLN.Printing.RptSaleInvoice02.rdlc '' ; _PJobEntry._RptView.SetDisplayMode ( DisplayMode.PrintLayout ) ; _cWainfoPrintReport._mExport ( _PJobEntry._RptView.LocalReport , true , 8.27 , 11.69 , 0.25 , 0.25 , 0.28 , 0.25 ) ;"
"using System ; using System.Collections.Generic ; using System.Diagnostics ; using System.Linq ; using System.Reflection.Emit ; using System.Threading.Tasks ; using Microsoft.CodeAnalysis ; using Microsoft.CodeAnalysis.CSharp ; using Microsoft.CodeAnalysis.CSharp.Syntax ; using Microsoft.CodeAnalysis.Formatting ; using Microsoft.CodeAnalysis.MSBuild ; using Microsoft.CodeAnalysis.FindSymbols ; using System.Collections.Immutable ; namespace Diagrams { class Program { static void Main ( string [ ] args ) { string solutionName = `` Diagrams '' ; string solutionExtension = `` .sln '' ; string solutionFileName = solutionName + solutionExtension ; string rootPath = @ '' C : \Workspace\ '' ; string solutionPath = rootPath + solutionName + @ '' \ '' + solutionFileName ; MSBuildWorkspace workspace = MSBuildWorkspace.Create ( ) ; DiagramGenerator diagramGenerator = new DiagramGenerator ( solutionPath , workspace ) ; diagramGenerator.ProcessSolution ( ) ; # region reference //TODO : would ReferencedSymbol.Locations be a better way of accessing MethodDeclarationSyntaxes ? //INamedTypeSymbol programClass = compilation.GetTypeByMetadataName ( `` DotNetDiagrams.Program '' ) ; //IMethodSymbol barMethod = programClass.GetMembers ( `` Bar '' ) .First ( s = > s.Kind == SymbolKind.Method ) as IMethodSymbol ; //IMethodSymbol fooMethod = programClass.GetMembers ( `` Foo '' ) .First ( s = > s.Kind == SymbolKind.Method ) as IMethodSymbol ; //ITypeSymbol fooSymbol = fooMethod.ContainingType ; //ITypeSymbol barSymbol = barMethod.ContainingType ; //Debug.Assert ( barMethod ! = null ) ; //Debug.Assert ( fooMethod ! = null ) ; //List < ReferencedSymbol > barReferencedSymbols = SymbolFinder.FindReferencesAsync ( barMethod , solution ) .Result.ToList ( ) ; //List < ReferencedSymbol > fooReferencedSymbols = SymbolFinder.FindReferencesAsync ( fooMethod , solution ) .Result.ToList ( ) ; //Debug.Assert ( barReferencedSymbols.First ( ) .Locations.Count ( ) == 1 ) ; //Debug.Assert ( fooReferencedSymbols.First ( ) .Locations.Count ( ) == 0 ) ; # endregion Console.ReadKey ( ) ; } } class DiagramGenerator { private Solution _solution ; public DiagramGenerator ( string solutionPath , MSBuildWorkspace workspace ) { _solution = workspace.OpenSolutionAsync ( solutionPath ) .Result ; } public async void ProcessSolution ( ) { foreach ( Project project in _solution.Projects ) { Compilation compilation = await project.GetCompilationAsync ( ) ; ProcessCompilation ( compilation ) ; } } private async void ProcessCompilation ( Compilation compilation ) { var trees = compilation.SyntaxTrees ; foreach ( var tree in trees ) { var root = await tree.GetRootAsync ( ) ; var classes = root.DescendantNodes ( ) .OfType < ClassDeclarationSyntax > ( ) ; foreach ( var @ class in classes ) { ProcessClass ( @ class , compilation , tree , root ) ; } } } private void ProcessClass ( ClassDeclarationSyntax @ class , Compilation compilation , SyntaxTree tree , SyntaxNode root ) { var methods = @ class.DescendantNodes ( ) .OfType < MethodDeclarationSyntax > ( ) ; foreach ( var method in methods ) { var model = compilation.GetSemanticModel ( tree ) ; // Get MethodSymbol corresponding to method var methodSymbol = model.GetDeclaredSymbol ( method ) ; // Get all InvocationExpressionSyntax in the above code . var allInvocations = root.DescendantNodes ( ) .OfType < InvocationExpressionSyntax > ( ) ; // Use GetSymbolInfo ( ) to find invocations of target method var matchingInvocations = allInvocations.Where ( i = > model.GetSymbolInfo ( i ) .Symbol.Equals ( methodSymbol ) ) ; ProcessMethod ( matchingInvocations , method , @ class ) ; } var delegates = @ class.DescendantNodes ( ) .OfType < DelegateDeclarationSyntax > ( ) ; foreach ( var @ delegate in delegates ) { var model = compilation.GetSemanticModel ( tree ) ; // Get MethodSymbol corresponding to method var methodSymbol = model.GetDeclaredSymbol ( @ delegate ) ; // Get all InvocationExpressionSyntax in the above code . var allInvocations = tree.GetRoot ( ) .DescendantNodes ( ) .OfType < InvocationExpressionSyntax > ( ) ; // Use GetSymbolInfo ( ) to find invocations of target method var matchingInvocations = allInvocations.Where ( i = > model.GetSymbolInfo ( i ) .Symbol.Equals ( methodSymbol ) ) ; ProcessDelegates ( matchingInvocations , @ delegate , @ class ) ; } } private void ProcessMethod ( IEnumerable < InvocationExpressionSyntax > matchingInvocations , MethodDeclarationSyntax methodDeclarationSyntax , ClassDeclarationSyntax classDeclarationSyntax ) { foreach ( var invocation in matchingInvocations ) { MethodDeclarationSyntax actingMethodDeclarationSyntax = null ; if ( SyntaxNodeHelper.TryGetParentSyntax ( invocation , out actingMethodDeclarationSyntax ) ) { var r = methodDeclarationSyntax ; var m = actingMethodDeclarationSyntax ; PrintCallerInfo ( invocation , classDeclarationSyntax , m.Identifier.ToFullString ( ) , r.ReturnType.ToFullString ( ) , r.Identifier.ToFullString ( ) , r.ParameterList.ToFullString ( ) , r.TypeParameterList ! = null ? r.TypeParameterList.ToFullString ( ) : String.Empty ) ; } } } private void ProcessDelegates ( IEnumerable < InvocationExpressionSyntax > matchingInvocations , DelegateDeclarationSyntax delegateDeclarationSyntax , ClassDeclarationSyntax classDeclarationSyntax ) { foreach ( var invocation in matchingInvocations ) { DelegateDeclarationSyntax actingMethodDeclarationSyntax = null ; if ( SyntaxNodeHelper.TryGetParentSyntax ( invocation , out actingMethodDeclarationSyntax ) ) { var r = delegateDeclarationSyntax ; var m = actingMethodDeclarationSyntax ; PrintCallerInfo ( invocation , classDeclarationSyntax , m.Identifier.ToFullString ( ) , r.ReturnType.ToFullString ( ) , r.Identifier.ToFullString ( ) , r.ParameterList.ToFullString ( ) , r.TypeParameterList ! = null ? r.TypeParameterList.ToFullString ( ) : String.Empty ) ; } } } private void PrintCallerInfo ( InvocationExpressionSyntax invocation , ClassDeclarationSyntax classBeingCalled , string callingMethodName , string returnType , string calledMethodName , string calledMethodArguments , string calledMethodTypeParameters = null ) { ClassDeclarationSyntax parentClassDeclarationSyntax = null ; if ( ! SyntaxNodeHelper.TryGetParentSyntax ( invocation , out parentClassDeclarationSyntax ) ) { throw new Exception ( ) ; } calledMethodTypeParameters = calledMethodTypeParameters ? ? String.Empty ; var actedUpon = classBeingCalled.Identifier.ValueText ; var actor = parentClassDeclarationSyntax.Identifier.ValueText ; var callInfo = callingMethodName + `` = > '' + calledMethodName + calledMethodTypeParameters + calledMethodArguments ; var returnCallInfo = returnType ; string info = BuildCallInfo ( actor , actedUpon , callInfo , returnCallInfo ) ; Console.Write ( info ) ; } private string BuildCallInfo ( string actor , string actedUpon , string callInfo , string returnInfo ) { const string calls = `` - > '' ; const string returns = `` -- > '' ; const string descriptionSeparator = `` : `` ; string callingInfo = actor + calls + actedUpon + descriptionSeparator + callInfo ; string returningInfo = actedUpon + returns + actor + descriptionSeparator + `` returns `` + returnInfo ; callingInfo = callingInfo.RemoveNewLines ( true ) ; returningInfo = returningInfo.RemoveNewLines ( true ) ; string result = callingInfo + Environment.NewLine ; result += returningInfo + Environment.NewLine ; return result ; } } static class SyntaxNodeHelper { public static bool TryGetParentSyntax < T > ( SyntaxNode syntaxNode , out T result ) where T : SyntaxNode { // set defaults result = null ; if ( syntaxNode == null ) { return false ; } try { syntaxNode = syntaxNode.Parent ; if ( syntaxNode == null ) { return false ; } if ( syntaxNode.GetType ( ) == typeof ( T ) ) { result = syntaxNode as T ; return true ; } return TryGetParentSyntax < T > ( syntaxNode , out result ) ; } catch { return false ; } } } public static class StringEx { public static string RemoveNewLines ( this string stringWithNewLines , bool cleanWhitespace = false ) { string stringWithoutNewLines = null ; List < char > splitElementList = Environment.NewLine.ToCharArray ( ) .ToList ( ) ; if ( cleanWhitespace ) { splitElementList.AddRange ( `` `` .ToCharArray ( ) .ToList ( ) ) ; } char [ ] splitElements = splitElementList.ToArray ( ) ; var stringElements = stringWithNewLines.Split ( splitElements , StringSplitOptions.RemoveEmptyEntries ) ; if ( stringElements.Any ( ) ) { stringWithoutNewLines = stringElements.Aggregate ( stringWithoutNewLines , ( current , element ) = > current + ( current == null ? element : `` `` + element ) ) ; } return stringWithoutNewLines ? ? stringWithNewLines ; } } }"
grep -r 'UIWebView ' .Binary file ./.vs/NorthernLights/xs/sqlite3/storage.ide matches./iOS/NorthernLights.iOS.csproj : < MtouchExtraArgs > -- optimize=experimental-xforms-product-type -- warn-on-type-ref=UIKit.UIWebView < /MtouchExtraArgs > Binary file ./packages/Xamarin.Forms.4.6.0.726/buildTransitive/XCODE10/Xamarin.Forms.Platform.iOS.dll matchesBinary file ./packages/Xamarin.Forms.4.6.0.726/buildTransitive/XCODE11/Xamarin.Forms.Platform.iOS.dll matchesBinary file ./packages/Xamarin.Forms.4.6.0.726/build/XCODE10/Xamarin.Forms.Platform.iOS.dll matchesBinary file ./packages/Xamarin.Forms.4.6.0.726/build/XCODE11/Xamarin.Forms.Platform.iOS.dll matchesBinary file ./packages/HockeySDK.Xamarin.5.2.0/lib/Xamarin.iOS10/HockeySDK.iOSBindings.dll matches
"TItem = record Id : Int32 ; Description : PWideChar ; end ; function GetNumElements ( const ATableName : PWideChar ) : Integer ; stdcall ; var recordCount : Integer ; begin ... // code to get the number of records from ATableName Result : = recordCount ; end ; procedure GetTableData ( const ATableName : PWideChar ; const AIdField : PWideChar ; const ADataField : PWideChar ; result : array of TItem ) ; stdcall ; begin ... // ATableName , AIdField , and ADataField are used to query the specific table , then I loop through the records and add each one to result array index : = -1 ; while not Query.Eof do begin Inc ( index ) ; result [ index ] .Id : = Query.FieldByName ( AIdField ) .AsInteger ; result [ index ] .Description : = PWideChar ( Query.FieldByName ( ADataField ) .AsString ) ; Query.Next ; end ; ... // cleanup stuff ( freeing created objects , etc ) end ; [ StructLayoutAttribute ( LayoutKind.Explicit ) ] // also tried LayoutKind.Sequential without FieldOffsetpublic struct TItem { [ FieldOffset ( 0 ) ] public Int32 Id ; [ MarshalAs ( UnmanagedType.LPWStr ) , FieldOffset ( sizeof ( Int32 ) ) ] public string Description ; } public static extern void GetTableData ( [ MarshalAs ( UnmanagedType.LPWStr ) ] string tableName , [ MarshalAs ( UnmanagedType.LPWStr ) ] string idField , [ MarshalAs ( UnmanagedType.LPWStr ) ] string dataField , [ MarshalAs ( UnmanagedType.LPArray ) ] TItem [ ] items , int high ) ; public void GetListItems ( ) { int numProjects = GetNumElements ( `` Project '' ) ; TItems [ ] projectItems = new TItem [ numProjects ] ; GetTableData ( `` Project '' , `` ProjectId '' , `` ProjectName '' , projectItems , numProjects ) ; } Id = 0Description = null"
Type type ; List < type > var listType = typeof ( List < > ) .MakeGenericType ( new [ ] { type } ) ; IList list = Activator.CreateInstance ( listType ) ) ; < ArrayOfString > ... < /ArrayOfString > < ArrayOfAnyType > ... < /ArrayOfAnyType >
"List < NewClass > returnList = lookupList.Select ( i = > new NewClass { Property1 = i.ID1.ToString ( ) , Property2 = i.ID2.ToString ( ) , Property3 = i.ID3.ToString ( ) , ... .. } ) .ToList ( ) ; { Property1=7081C549-64D6-458E-A693-0D2C9C47D183 Property2=06DD6A59-D339-4E15-89EA-48803DBA271E Property3=9A876EDD-3B79-C27E-1680-E0820A0CD6EC } var returnList = new List < NewClass > ( ) ; foreach ( var item in lookupList ) { returnList.Add ( new NewClass { Property1 = item.ID1.ToString ( ) , Property2 = item.ID2.ToString ( ) , Property3 = item.ID3.ToString ( ) , ... .. } ) ; } { Property1=7081c549-64d6-458e-a693-0d2c9c47d183 Property2=06dd6a59-d339-4e15-89ea-48803dba271e Property3=9a876edd-3b79-c27e-1680-e0820a0cd6ec }"
"class T { public int identifier ; //Arbitrary but unique for each character ( Guids in real-life ) public char character ; //In real life not a char , but I chose char here for easy demo purposes } int [ ] identifierSequence = new int [ ] { 9 , 3 , 4 , 4 , 7 } ; { identifier : 3 , character ' e ' } , { identifier : 9 , character ' h ' } , { identifier : 4 , character ' l ' } , { identifier : 4 , character ' l ' } , { identifier : 7 , character ' o ' } Input : e h l l oOutput : he l l o Dictionary < int , T > buffer = new Dictionary < int , T > ( ) ; int curIndex = 0 ; inputObserable.SelectMany ( item = > { buffer [ item.identifier ] = item ; IEnumerable < ReportTemplate > GetReadyElements ( ) { while ( true ) { int nextItemIdentifier = identifierSequence [ curIndex ] ; T nextItem ; if ( buffer.TryGetValue ( nextItemIdentifier , out nextItem ) ) { buffer.Remove ( nextItem.identifier ) ; curIndex++ ; yield return nextItem ; } else { break ; } } } return GetReadyElements ( ) ; } ) ; public static IObservable < T > OrderByIdentifierSequence < T , TId > ( this IObservable < T > source , IList < TId > identifierSequence , Func < T , TId > identifierFunc ) { var initialState = new OrderByIdentifierSequenceState < T , TId > ( 0 , ImmutableDictionary < TId , ImmutableList < T > > .Empty , Enumerable.Empty < T > ( ) ) ; return source.Scan ( initialState , ( oldState , item ) = > { //Function to be called upon receiving new item //If we can pattern match the first item , then it is moved into Output , and concatted continuously with the next possible item //Otherwise , if nothing is available yet , just return the input state OrderByIdentifierSequenceState < T , TId > GetOutput ( OrderByIdentifierSequenceState < T , TId > state ) { int index = state.Index ; ImmutableDictionary < TId , ImmutableList < T > > buffer = state.Buffer ; IList < T > output = new List < T > ( ) ; while ( index < identifierSequence.Count ) { TId key = identifierSequence [ index ] ; ImmutableList < T > nextValues ; if ( ! buffer.TryGetValue ( key , out nextValues ) || nextValues.IsEmpty ) { //No values available yet break ; } T toOutput = nextValues [ nextValues.Count - 1 ] ; output.Add ( toOutput ) ; buffer = buffer.SetItem ( key , nextValues.RemoveAt ( nextValues.Count - 1 ) ) ; index++ ; } return new OrderByIdentifierSequenceState < T , TId > ( index , buffer , output ) ; } //Before calling the recursive function , add the new item to the buffer TId itemIdentifier = identifierFunc ( item ) ; ImmutableList < T > valuesList ; if ( ! oldState.Buffer.TryGetValue ( itemIdentifier , out valuesList ) ) { valuesList = ImmutableList < T > .Empty ; } var remodifiedBuffer = oldState.Buffer.SetItem ( itemIdentifier , valuesList.Add ( item ) ) ; return GetOutput ( new OrderByIdentifierSequenceState < T , TId > ( oldState.Index , remodifiedBuffer , Enumerable.Empty < T > ( ) ) ) ; } ) // Use Dematerialize/Notifications to detect and emit end of stream . .SelectMany ( output = > { var notifications = output.Output .Select ( item = > Notification.CreateOnNext ( item ) ) .ToList ( ) ; if ( output.Index == identifierSequence.Count ) { notifications.Add ( Notification.CreateOnCompleted < T > ( ) ) ; } return notifications ; } ) .Dematerialize ( ) ; } class OrderByIdentifierSequenceState < T , TId > { //Index shows what T we 're waiting on public int Index { get ; } //Buffer holds T that have arrived that we are n't ready yet for public ImmutableDictionary < TId , ImmutableList < T > > Buffer { get ; } //Output holds T that can be safely emitted . public IEnumerable < T > Output { get ; } public OrderByIdentifierSequenceState ( int index , ImmutableDictionary < TId , ImmutableList < T > > buffer , IEnumerable < T > output ) { this.Index = index ; this.Buffer = buffer ; this.Output = output ; } } /// < summary > /// Takes the items from the source observable , and returns them in the order specified in identifierSequence . /// If an item is missing from the source observable , the returned obserable returns items up until the missing item and then blocks until the source observable is completed . /// All available items are then returned in order . Note that this means that while a correct order is guaranteed , there might be missing items in the result observable . /// If there are items in the source observable that are not in identifierSequence , these items will be ignored . /// < /summary > /// < typeparam name= '' T '' > The type that is produced by the source observable < /typeparam > /// < typeparam name= '' TId '' > The type of the identifiers used to uniquely identify a T < /typeparam > /// < param name= '' source '' > The source observable < /param > /// < param name= '' identifierSequence '' > A list of identifiers that defines the sequence in which the source observable is to be ordered < /param > /// < param name= '' identifierFunc '' > A function that takes a T and outputs its unique identifier < /param > /// < returns > An observable with the same elements as the source , but ordered by the sequence of items in identifierSequence < /returns > public static IObservable < T > OrderByIdentifierSequence < T , TId > ( this IObservable < T > source , IList < TId > identifierSequence , Func < T , TId > identifierFunc ) { if ( source == null ) { throw new ArgumentNullException ( nameof ( source ) ) ; } if ( identifierSequence == null ) { throw new ArgumentNullException ( nameof ( identifierSequence ) ) ; } if ( identifierFunc == null ) { throw new ArgumentNullException ( nameof ( identifierFunc ) ) ; } if ( identifierSequence.Count == 0 ) { return Observable.Empty < T > ( ) ; } HashSet < TId > identifiersInSequence = new HashSet < TId > ( identifierSequence ) ; return Observable.Create < T > ( observer = > { //current index of pending item in identifierSequence int index = 0 ; //buffer of items we have received but are not ready for yet Dictionary < TId , List < T > > buffer = new Dictionary < TId , List < T > > ( ) ; return source.Select ( item = > { //Function to be called upon receiving new item //We search for the current pending item in the buffer . If it is available , we yield return it and repeat . //If it is not available yet , stop . IEnumerable < T > GetAvailableOutput ( ) { while ( index < identifierSequence.Count ) { TId key = identifierSequence [ index ] ; List < T > nextValues ; if ( ! buffer.TryGetValue ( key , out nextValues ) || nextValues.Count == 0 ) { //No values available yet break ; } yield return nextValues [ nextValues.Count - 1 ] ; nextValues.RemoveAt ( nextValues.Count - 1 ) ; index++ ; } } //Get the identifier for this item TId itemIdentifier = identifierFunc ( item ) ; //If this item is not in identifiersInSequence , we ignore it . if ( ! identifiersInSequence.Contains ( itemIdentifier ) ) { return Enumerable.Empty < T > ( ) ; } //Add the new item to the buffer List < T > valuesList ; if ( ! buffer.TryGetValue ( itemIdentifier , out valuesList ) ) { valuesList = new List < T > ( ) ; buffer [ itemIdentifier ] = valuesList ; } valuesList.Add ( item ) ; //Return all available items return GetAvailableOutput ( ) ; } ) .Subscribe ( output = > { foreach ( T cur in output ) { observer.OnNext ( cur ) ; } if ( index == identifierSequence.Count ) { observer.OnCompleted ( ) ; } } , ( ex ) = > { observer.OnError ( ex ) ; } , ( ) = > { //When source observable is completed , return the remaining available items while ( index < identifierSequence.Count ) { TId key = identifierSequence [ index ] ; List < T > nextValues ; if ( ! buffer.TryGetValue ( key , out nextValues ) || nextValues.Count == 0 ) { //No values available index++ ; continue ; } observer.OnNext ( nextValues [ nextValues.Count - 1 ] ) ; nextValues.RemoveAt ( nextValues.Count - 1 ) ; index++ ; } //Mark observable as completed observer.OnCompleted ( ) ; } ) ; } ) ; }"
"public interface IRepository < T > { T Get ( int id ) ; T [ ] GetAll ( ) ; void Add ( T item ) ; void Update ( T item ) ; void Delete ( T item ) ; } public abstract class Repository < T > : IRepository < T > { public T Get ( int id ) { ... } public T [ ] GetAll ( ) { ... } public void Add ( T item ) { ... } public void Update ( T item ) { ... } public void Delete ( T item ) { ... } } public interface IMovieRepository { Movie [ ] GetByGenre ( Genre genre ) ; Movie [ ] GetByYear ( int year ) ; Movie [ ] GetByTitle ( string title ) ; } public class MovieRepository : Repository < Movie > , IMovieRepository { public Movie [ ] GetByGenre ( Genre genre ) { ... } public Movie [ ] GetByYear ( int year ) { ... } public Movie [ ] GetByTitle ( string title ) { ... } }"
System.Diagnostics.Process.Start ( path ) ; // path = UNC network path \\This_PC_Does_Not_Exist\dir\\This_PC_Is_Turned_Off\dir
"services.AddHttpClient ( `` named '' , c = > { c.BaseAddress = new Uri ( `` TODO '' ) ; c.DefaultRequestHeaders.Accept.Add ( new MediaTypeWithQualityHeaderValue ( `` application/json '' ) ) ; c.DefaultRequestHeaders.CacheControl = new CacheControlHeaderValue { NoCache = true , NoStore = true , MaxAge = new TimeSpan ( 0 ) , MustRevalidate = true } ; } ) .ConfigurePrimaryHttpMessageHandler ( ( ) = > new HttpClientHandler { AllowAutoRedirect = false , AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip } ) ; clientFactory.CreateClient ( ) ;"
Select * from student Select * from student FOR SYSTEM_TIME AS OF '2015-09-01 T10:00:00.7230011 '
"public class Model { public decimal ? Result { get ; set ; } } new CodePropertyReferenceExpression ( new CodePropertyReferenceExpression ( modelArgument , `` Result '' ) , `` Value '' ) ) new CodeMethodInvokeExpression ( new CodeMethodReferenceExpression ( new CodePropertyReferenceExpression ( modelArgument , `` Result '' ) , `` GetValueOrDefault '' ) , new [ ] { new CodePrimitiveExpression ( 0m ) } ) ) ,"
"... < Site name= '' Web '' > < VirtualApplication name= '' cms '' physicalDirectory= '' ../../../umbracocms '' / > ... Access to the path ' E : \sitesroot\1\config\applications.config ' is denied.Description : An unhandled exception occurred during the execution of the current web request . Please review the stack trace for more information about the error and where it originated in the code . Exception Details : System.UnauthorizedAccessException : Access to the path ' E : \sitesroot\1\config\applications.config ' is denied . [ UnauthorizedAccessException : Access to the path ' E : \sitesroot\1\config\applications.config ' is denied . ] System.IO.__Error.WinIOError ( Int32 errorCode , String maybeFullPath ) +216 System.IO.FileStream.Init ( String path , FileMode mode , FileAccess access , Int32 rights , Boolean useRights , FileShare share , Int32 bufferSize , FileOptions options , SECURITY_ATTRIBUTES secAttrs , String msgPath , Boolean bFromProxy , Boolean useLongPath , Boolean checkHost ) +1430 System.IO.FileStream..ctor ( String path , FileMode mode , FileAccess access , FileShare share , Int32 bufferSize , FileOptions options , String msgPath , Boolean bFromProxy ) +205 System.IO.FileStream..ctor ( String path , FileMode mode , FileAccess access , FileShare share , Int32 bufferSize , Boolean useAsync ) +112 System.Xml.XmlWriterSettings.CreateWriter ( String outputFileName ) +7430688 System.Xml.Linq.XDocument.Save ( String fileName , SaveOptions options ) +189 Umbraco.Core.Services.SectionService.LoadXml ( Action ` 1 callback , Boolean saveAfterCallback ) +253 Umbraco.Core.EnumerableExtensions.ForEach ( IEnumerable ` 1 items , Action ` 1 action ) +148 Umbraco.Core.CoreBootManager.Complete ( Action ` 1 afterComplete ) +116 Umbraco.Web.WebBootManager.Complete ( Action ` 1 afterComplete ) +337 [ HttpException ( 0x80004005 ) : Access to the path ' E : \sitesroot\1\config\applications.config ' is denied . ] System.Web.HttpApplicationFactory.EnsureAppStartCalledForIntegratedMode ( HttpContext context , HttpApplication app ) +12582201 System.Web.HttpApplication.RegisterEventSubscriptionsWithIIS ( IntPtr appContext , HttpContext context , MethodInfo [ ] handlers ) +175 System.Web.HttpApplication.InitSpecial ( HttpApplicationState state , MethodInfo [ ] handlers , IntPtr appContext , HttpContext context ) +304 System.Web.HttpApplicationFactory.GetSpecialApplicationInstance ( IntPtr appContext , HttpContext context ) +404 System.Web.Hosting.PipelineRuntime.InitializeApplication ( IntPtr appContext ) +475 [ HttpException ( 0x80004005 ) : Access to the path ' E : \sitesroot\1\config\applications.config ' is denied . ] System.Web.HttpRuntime.FirstRequestInit ( HttpContext context ) +12599232 System.Web.HttpRuntime.EnsureFirstRequestInit ( HttpContext context ) +159 System.Web.HttpRuntime.ProcessRequestNotificationPrivate ( IIS7WorkerRequest wr , HttpContext context ) +12438981 < Startup priority= '' 1 '' > < Task commandLine= '' startup.bat '' executionContext= '' elevated '' taskType= '' simple '' / > < /Startup > echo `` starting startup task '' > > log.txt % windir % \system32\Icacls.exe ..\* /T /grant `` Network Service '' : ( F ) > log.txt"
"void bool DoWithWriteLock ( ReaderWriterLockSlim RWLock , int TimeOut , Action Fn ) { bool holdingLock = false ; try { if ( RWLock.TryEnterWriteLock ( TimeOut ) ) { holdingLock = true ; Fn ( ) ; } } finally { if ( holdingLock ) { RWLock.ExitWriteLock ( ) ; } } return holdingLock ; }"
"private void DoSomething ( object obj ) { MessageBox.Show ( `` called object '' ) ; } private void DoSomething ( params object [ ] obj ) { MessageBox.Show ( `` called object [ ] '' ) ; } private void button1_Click ( object sender , EventArgs e ) { decimal ? amount = null ; dynamic obj = amount ; DoSomething ( obj ) ; }"
Base b ; // value is acquiredswitch ( b ) { case Child1 child1 : ProcessChild1 ( child1 ) ; break ; case Child2 child2 : case Child3 child3 : ProcessAnyOther ( b ) ; // < -- break ; default : throw new ArgumentOutOfRangeException ( nameof ( b ) ) ; } case Child2 : case Child3 : case Child2 nevermind : case Child3 nevermind : case Child2 _ : case Child3 _ :
delegate void myHandler ( int i ) ; myHandler myHandlerContainer ; ... foreach ( Delegate @ delegate in myHandlerContainer.GetInvocationList ( ) ) { ... }
public class User : Entity { public virtual string FirstName { get ; set ; } public virtual string LastName { get ; set ; } public virtual PcmAudioStream FullNameRecording { get ; set ; } // ... } public class UserMap : ClassMap < User > { public UserMap ( ) { Id ( x = > x.Id ) ; Map ( x = > x.FirstName ) ; Map ( x = > x.LastName ) ; Map ( x = > x.FullNameRecording ) .CustomType < PcmAudioStreamAsByteArray > ( ) ; } }
"[ TestClass ] public class CustomerTests : TestClassBase { private Customer SetUpCustomerForRepository ( ) { return new Customer ( ) { CustId = 5 , DifId = `` 55 '' , CustLookupName = `` The Dude '' , LoginList = new [ ] { new Login { LoginCustId = 5 , LoginName = `` tdude '' } , new Login { LoginCustId = 5 , LoginName = `` tdude2 '' } } } ; } [ TestMethod ] public void CanGetCustomerById ( ) { // arrange var customer = SetUpCustomerForRepository ( ) ; var repository = Stub < ICustomerRepository > ( ) ; // act repository.Stub ( rep = > rep.GetById ( 5 ) ) .Return ( customer ) ; // assert Assert.AreEqual ( customer , repository.GetById ( 5 ) ) ; } } public class TestClassBase { protected T Stub < T > ( ) where T : class { return MockRepository.GenerateStub < T > ( ) ; } } public interface ICustomerRepository : IRepository < Customer > { IList < Customer > FindCustomers ( string q ) ; Customer GetCustomerByDifID ( string difId ) ; Customer GetCustomerByLogin ( string loginName ) ; } public interface IRepository < T > { void Save ( T entity ) ; void Save ( List < T > entity ) ; bool Save ( T entity , out string message ) ; void Delete ( T entity ) ; T GetById ( int id ) ; ICollection < T > FindAll ( ) ; }"
// stats is the string I showed abovevar statsArray = stats.Split ( ' ' ) ; for ( var i = 0 ; i < statsArray.Length ; i++ ) { switch ( statsArray [ i ] ) { default : break ; case `` Health : '' : MyCharacter.Health = statsArray [ i+1 ] ; break ; case `` Mana : '' : MyCharacter.Mana = statsArray [ i+1 ] ; break ; case `` MoveSpeed : '' : MyCharacter.MoveSpeed = statsArray [ i+1 ] ; break ; } }
if ( wager > balance ) { winLoseLabel.Text = `` You ca n't bet more than you have ! `` ; } switch ( betResult ) { case TIE : winloseLabel.Text = `` Tie . You still lose . HA ! `` ; myRules.Balance -= wager ; break ; case PLAYERWINS : winloseLabel.Text = `` You win . Woop-de-do.. '' ; myRules.Balance += wager ; break ; case DEALERWINS : winloseLabel.Text = `` You lose . Get over it . `` ; myRules.Balance -= wager ; break ; }
unsafe { int i = * ( int* ) 0 ; } unsafe { * ( int* ) 0=0 ; }
public String Bla { get ; set ; } private String _bla ; public String Bla { get { return _bla ; } set { _bla = value ; } } [ CompilerGenerated ] private string < MyField > k__BackingField ; [ CompilerGenerated ] public void set_MyField ( string value ) { this. < MyField > k__BackingField = value ; } [ CompilerGenerated ] public string get_MyField ( ) { return this. < MyField > k__BackingField ; }
/* Foo.Bar.GetOrders ( ) */ SELECT * FROM Order WHERE orderId > 123
"protected override IModuleCatalog CreateModuleCatalog ( ) { var filepath = Assembly.GetExecutingAssembly ( ) .Location ; var path = Path.GetDirectoryName ( filepath ) ; System.IO.Directory.SetCurrentDirectory ( path ) ; path = Path.Combine ( path , `` Modules '' ) ; var moduleCatalog = new DirectoryModuleCatalog ( ) { ModulePath = path } ; return moduleCatalog ; }"
"List < Tuple < string , string , Func < bool > > > properties = new List < Tuple < string , string , Func < bool > > > { Tuple.Create ( FirstName , `` User first name is required '' , ? ? ? ) , } ; ..."
"List < Tuple < int , int > > tt = new List < Tuple < int , int > > ( ) ; tt.Add ( new Tuple < int , int > ( 12,32 ) ) ; tt.sort ( ) ; tt.binarysearch ( item1:12 ) ;"
"public static string SignCall ( Dictionary < string , string > args ) { IOrderedEnumerable < KeyValuePair < string , string > > sortedArgs = args.OrderBy ( arg = > arg.Key ) ; string signature = sortedArgs.Select ( pair = > pair.Key + pair.Value ) . Aggregate ( ( first , second ) = > first + second ) ; return MD5 ( signature + SecretKey ) ; } public static string GetSignedURI ( Dictionary < string , string > args , bool get ) { var stringBuilder = new StringBuilder ( ) ; if ( get ) stringBuilder.Append ( `` http : //ws.audioscrobbler.com/2.0/ ? `` ) ; foreach ( var kvp in args ) stringBuilder.AppendFormat ( `` { 0 } = { 1 } & '' , kvp.Key , kvp.Value ) ; stringBuilder.Append ( `` api_sig= '' +SignCall ( args ) ) ; return stringBuilder.ToString ( ) ; } var args = new Dictionary < string , string > { { `` method '' , `` auth.getSession '' } , { `` api_key '' , ApiKey } , { `` token '' , token } } ; string url = GetSignedURI ( args , true ) ; public static string MD5 ( string toHash ) { byte [ ] textBytes = Encoding.UTF8.GetBytes ( toHash ) ; var cryptHandler = new System.Security.Cryptography.MD5CryptoServiceProvider ( ) ; byte [ ] hash = cryptHandler.ComputeHash ( textBytes ) ; return hash.Aggregate ( `` '' , ( current , a ) = > current + a.ToString ( `` x2 '' ) ) ; }"
"using MySql.Data.MySqlClient ; string db_Server = `` 10.0.0.0 '' ; string db_Name = `` myDatabase '' ; string db_User = `` myUser '' ; string db_Pass = `` myPassword '' ; // Connection String MySqlConnection myConnection = new MySqlConnection ( `` server = { 0 } ; database = { 1 } ; uid = { 2 } ; pwd = { 3 } '' , db_server , db_Name , db_User , db_Pass ) ; MySqlConnection myConnection = new MySqlConnection ( `` server=10.0.0.0 ; database=myDatabase ; uid=myUser ; pwd=myPassword '' ) ;"
class Program { private int ? m_bool ; private bool prop { get { return false ; } } void test ( ) { //nothing } private object Test ( ) { if ( prop ) { try { test ( ) ; } catch ( Exception ) { } m_bool = 1 ; } return null ; } static void Main ( string [ ] args ) { new Program ( ) .Test ( ) ; } }
"const BinaryStringEncoding encoding = BinaryStringEncoding.Utf8 ; const string strDescriptor = `` LOCAL=user '' ; public static async Task < string > ProtectTextAsync ( string strClearText ) { DataProtectionProvider Provider = new DataProtectionProvider ( strDescriptor ) ; IBuffer buffMsg = CryptographicBuffer.ConvertStringToBinary ( strClearText , encoding ) ; IBuffer buffProtected = await Provider.ProtectAsync ( buffMsg ) ; return CryptographicBuffer.EncodeToBase64String ( buffProtected ) ; } public static async Task < String > UnprotectTextAsync ( string strProtected ) { DataProtectionProvider Provider = new DataProtectionProvider ( ) ; IBuffer buffProtected = CryptographicBuffer.DecodeFromBase64String ( strProtected ) ; IBuffer buffUnprotected = await Provider.UnprotectAsync ( buffProtected ) ; String strClearText = CryptographicBuffer.ConvertBinaryToString ( encoding , buffUnprotected ) ; return strClearText ; } System.Exception : 'The specified data could not be decrypted . ( Excep_FromHResult 0x8009002C ) '"
"using ( var context = new PrincipalContext ( ContextType.Domain , `` bbad.lan '' ) ) { using ( var searcher = new PrincipalSearcher ( new UserPrincipal ( context ) ) ) { foreach ( var result in searcher.FindAll ( ) ) { DirectoryEntry entry = result.GetUnderlyingObject ( ) as DirectoryEntry ; if ( entry.Properties [ `` memberOf '' ] .Value == `` Computer '' ) { MessageBox.Show ( `` aaa : `` + entry.Properties [ `` Name '' ] .Value.ToString ( ) ) ; } } } } 1 . MsgBox : CN=Gäste , CN=Builtin , DC=bbad , DC=lan2 . MsgBox : System.Object [ ] etc ."
< a asp-page= '' /contact-us '' > Contact Us < /a > // i want this < a href= '' /contact-us '' > Contact Us < /a > // i get this < a href= '' /Contact-us '' > Contact Us < /a > https : //stackoverflow.com/questions/anchortaghelper-asp-page-to-use-lowercase -- VS -- https : //stackoverflow.com/Questions/Anchortaghelper-asp-page-to-use-lowercase
using ( CheckbookDataContext db = new CheckbookDataContext ( DBConnectionString ) ) { if ( ! db.DatabaseExists ( ) ) { isNewLoad = true ; db.CreateDatabase ( ) ; } }
@ foreach ( var post in Model . `` table '' .Where ( w = > w.Private_ID == 1 ) .OrderBy ( o = > o.Date ) ) { < div class = '' post '' > < fieldset > < p class= '' post_details '' > At @ post.Post_Date By @ post.Username < /p > @ post.Post_Desc < /fieldset > < /div > }
var someList = new List < SomeObject > ( ) ; AppleOrangeFruitBowl_OutsideBananaGrapeFruitBowl_Inside AppleBananaGrapeOrangeFruitBowl_InsideFruitBowl_Outside
class A { public A ( ) { Console.Writeline ( `` A '' ) ; } } class B : A { public B ( ) : base ( ) { } } class A { public A ( ) { Console.Writeline ( `` A '' ) ; } } class B : A { public B ( ) { } }
public interface IFoo { ICollection < IBar > Bars { get ; set ; } } public class Foo : IFoo { public virtual ICollection < IBar > Bars { get ; set ; } } public virtual ICollection < Bar > Bars { get ; set ; } public interface IFoo { IBar Bar { get ; set ; } } public class Foo : IFoo { public virtual IBar Bar { get ; set ; } } public class Foo : IFoo { public virtual Bar Bar { get ; set ; } IBar IFoo.Bar { get { return Bar ; } set { Bar = ( Bar ) value ; } } } public class Foo : IFoo { public virtual ICollection < Bar > Bars { get ; set ; } ICollection < IBar > IFoo.Bars { get { return ( ICollection < IBar > ) Enumeration.Cast < IBar > ( Bars ) ; } set { Bars = ( ICollection < Bar > ) value ; } } }
"DoSomething ( int min , int max ) { if ( min < 1 || min > 5 ) throw new ArgumentOutOfRangeException ( `` min '' ) ; if ( max < 1 || max > 5 ) throw new ArgumentOutOfRangeException ( `` max '' ) ; if ( min > max ) throw new ArgumentOutOfRangeException ( `` min & max '' ) ; DoSomethingWithYourLife ( ) ; // = ) }"
"public static class TraceHelper { public static void WriteLine ( string message ) { // Validation and preprocessing Trace.WriteLine ( message ) ; } } using Android.Util ; namespace System.Diagnostics { public static class Trace { # region Non-Public Data Members private const string Tag = `` Trace '' ; # endregion public static void WriteLine ( string message ) { Log.WriteLine ( LogPriority.Verbose , Tag , message ) ; } } }"
< Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < TargetFramework > netstandard1.4 < /TargetFramework > < PackageVersion > 2.0.1 < /PackageVersion > < AssemblyName > currency < /AssemblyName > < /PropertyGroup > < /Project >
if ( 5 is object ) if ( new Point ( ) is object ) if ( `` 12345 '' is object ) if ( new StringBuilder ( ) is object )
"using System ; using System.Linq ; using System.Threading.Tasks ; using System.Threading.Tasks.Dataflow ; namespace DataflowTest { class Program { static void Main ( string [ ] args ) { var options = new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 , EnsureOrdered = false } ; var boundedOptions = new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 , EnsureOrdered = false , BoundedCapacity = 5 } ; var bufferBlock = new BufferBlock < int > ( boundedOptions ) ; var producerBlock = new TransformBlock < int , int > ( x = > x + 1 , options ) ; var broadcastBlock = new BroadcastBlock < int > ( x = > x , options ) ; var consumerBlock = new ActionBlock < int > ( async x = > { var delay = 1000 ; if ( x > 10 ) delay = 5000 ; await Task.Delay ( delay ) ; Console.WriteLine ( x ) ; } , boundedOptions ) ; producerBlock.LinkTo ( bufferBlock ) ; bufferBlock.LinkTo ( broadcastBlock ) ; broadcastBlock.LinkTo ( producerBlock ) ; broadcastBlock.LinkTo ( consumerBlock ) ; bufferBlock.Post ( 1 ) ; consumerBlock.Completion.Wait ( ) ; } } } 2134569055690536905469057438028438040142303438079"
"var clients = from client in taxPortalService.Client ( ) select new ClientViewModel { ResidentialAddressLine1 = client.RESADDRESSLINE1 , ResidentialAddressLine2 = client.RESADDRESSLINE2 , ResidentialAddressLine3 = client.RESADDRESSLINE3 , ResidentialAddressLine4 = client.RESADDRESSLINE4 , ResidentialPostalCode = client.RESPOSTCODE , ResidentialCountry = client.RESCOUNTRY , IAResidentialAddress = client.RESADDRESSLINE1 + `` , `` + client.RESADDRESSLINE2 + `` , `` + client.RESADDRESSLINE3 + `` , `` + client.RESADDRESSLINE4 + `` , `` + client.RESPOSTCODE + `` , `` + client.RESCOUNTRY } ;"
private async Task LoadData ( ) { // Fetch data var data = await FetchData ( ) ; // Display data // ... } // Create and run new threadvar thread = new Thread ( ThreadMain ) ; thread.SetApartmentState ( ApartmentState.STA ) ; thread.IsBackground = true ; thread.CurrentCulture = Thread.CurrentThread.CurrentCulture ; thread.CurrentUICulture = Thread.CurrentThread.CurrentUICulture ; thread.Start ( ) ; private static void ThreadMain ( ) { // Set synchronization context var dispatcher = Dispatcher.CurrentDispatcher ; SynchronizationContext.SetSynchronizationContext ( new DispatcherSynchronizationContext ( dispatcher ) ) ; // Show window var window = new MyWindow ( ) ; window.ShowDialog ( ) ; // Shutdown dispatcher.InvokeShutdown ( ) ; }
"< Grid x : Name= '' ContentPanel '' Background= '' { StaticResource PhoneChromeBrush } '' Grid.Row= '' 1 '' > < ListBox x : Name= '' parentLB '' Margin= '' 12,12,12,12 '' HorizontalContentAlignment= '' Stretch '' > < ListBox.ItemTemplate > < DataTemplate > < StackPanel Orientation= '' Vertical '' Margin= '' 0,12,0,0 '' > < StackPanel Orientation= '' Horizontal '' > < TextBlock Text= '' Parent Name : `` / > < TextBlock Text= '' { Binding Name } '' / > < /StackPanel > < StackPanel Orientation= '' Horizontal '' > < TextBlock Text= '' Number of Children with Degrees : `` / > < TextBlock Text= '' { Binding NumberOfChildrenWithDegrees , Mode=TwoWay , UpdateSourceTrigger=Explicit } '' / > < /StackPanel > < ListBox Margin= '' 12,0,0,0 '' x : Name= '' group2 '' ItemsSource= '' { Binding Children , Mode=TwoWay } '' > < ListBox.ItemTemplate > < DataTemplate > < StackPanel > < StackPanel Orientation= '' Horizontal '' > < TextBlock Text= '' Child Name : `` / > < TextBlock Text= '' { Binding Name } '' / > < /StackPanel > < CheckBox Content= '' Has High School Degree : '' IsChecked= '' { Binding HasHighSchoolDegree , Mode=TwoWay } '' / > < CheckBox Content= '' Has University Degree : `` IsChecked= '' { Binding HasUniversityDegree , Mode=TwoWay } '' / > < CheckBox Content= '' Has Two Degrees ? `` IsEnabled= '' False '' IsChecked= '' { Binding HasTwoDegrees } '' / > < /StackPanel > < /DataTemplate > < /ListBox.ItemTemplate > < /ListBox > < /StackPanel > < /DataTemplate > < /ListBox.ItemTemplate > < /ListBox > < /Grid > Imports System.Collections.ObjectModelImports System.ComponentModelPartial Public Class TestPage Inherits PhoneApplicationPage Public Sub New ( ) InitializeComponent ( ) parentLB.ItemsSource = Grandparent1.ParentGroups End Sub Public Function Grandparent1 ( ) As GrandParent Dim ParentGroups As New List ( Of Parent ) ParentGroups.Add ( Parent1 ) ParentGroups.Add ( Parent2 ) Dim gp As New GrandParent gp.ParentGroups = ParentGroups Return gp End Function Public Function Parent2 ( ) As Parent Dim p As New Parent With { .Name = `` Tom '' } Dim c1 As New Child With { .Name = `` Tammy '' } Dim c2 As New Child With { .Name = `` Timmy '' } Dim children As New List ( Of Child ) children.Add ( c1 ) children.Add ( c2 ) p.Children = children Return p End Function Public Function Parent1 ( ) As Parent Dim p As New Parent With { .Name = `` Carol '' } Dim c1 As New Child With { .Name = `` Carl '' } c1.HasHighSchoolDegree = True c1.HasUniversityDegree = True Dim c2 As New Child With { .Name = `` Karla '' } Dim children As New List ( Of Child ) children.Add ( c1 ) children.Add ( c2 ) p.Children = children Return p End FunctionEnd ClassPublic Class GrandParent Inherits BindableBase Public Property ParentGroups As List ( Of Parent ) End ClassPublic Class Parent Inherits BindableBase Public Property Name As String Private _children As List ( Of Child ) Public Property Children As List ( Of Child ) Get Return Me._children End Get Set ( value As List ( Of Child ) ) Me.SetProperty ( Me._children , value ) End Set End Property Private _numberOfChildrenWithDegrees As Integer Public Property NumberOfChildrenWithDegrees As Integer Get Return Children.Where ( Function ( f ) f.HasTwoDegrees ) .Count End Get Set ( value As Integer ) Me.SetProperty ( Me._numberOfChildrenWithDegrees , value ) End Set End PropertyEnd ClassPublic Class Child Inherits BindableBase Public Property Name As String Public ReadOnly Property HasTwoDegrees As Boolean Get Return HasHighSchoolDegree AndAlso HasUniversityDegree End Get End Property Private _hasUniversityDegree As Boolean Public Property HasUniversityDegree As Boolean Get Return Me._hasUniversityDegree End Get Set ( value As Boolean ) Me.SetProperty ( Me._hasUniversityDegree , value ) OnPropertyChanged ( `` HasTwoDegrees '' ) End Set End Property Private _hasHighSchoolDegree As Boolean Public Property HasHighSchoolDegree As Boolean Get Return Me._hasHighSchoolDegree End Get Set ( value As Boolean ) Me.SetProperty ( Me._hasHighSchoolDegree , value ) OnPropertyChanged ( `` HasTwoDegrees '' ) End Set End PropertyEnd ClassPublic MustInherit Class BindableBase Implements INotifyPropertyChanged Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Protected Function SetProperty ( Of T ) ( ByRef storage As T , value As T , Optional propertyName As String = Nothing ) As Boolean If Object.Equals ( storage , value ) Then Return False storage = value Me.OnPropertyChanged ( propertyName ) Return True End Function Protected Sub OnPropertyChanged ( Optional propertyName As String = Nothing ) RaiseEvent PropertyChanged ( Me , New PropertyChangedEventArgs ( propertyName ) ) End SubEnd Class"
"string [ ] strArray = { `` aa '' , `` bb '' , `` xx '' , `` cc '' , `` xx '' , `` dd '' , `` ee '' , `` ff '' , `` xx '' , '' xx '' , '' gg '' , '' xx '' } ; ccdd , ee , ffgg"
"/// < summary > /// Calculate the most significant 64 bits of the 128-bit product x * y , where x and y are 64-bit integers . /// < /summary > /// < returns > Returns the most significant 64 bits of the product x * y. < /returns > public static long mul64hi ( long x , long y ) { # if ! NET35 BigInteger product = BigInteger.Multiply ( x , y ) ; product = product > > 64 ; long l = ( long ) product ; return l ; # else throw new NotSupportedException ( ) ; //TODO ! # endif }"
public class NetStandardClass { public string GetHklmRegValue ( ) { var lmKey = Microsoft.Win32.Registry.LocalMachine ; var softwareKey = lmKey.OpenSubKey ( `` Software '' ) ; return `` value '' ; } } class Program { static void Main ( string [ ] args ) { string value = new ClassLibrary2.NetStandardClass ( ) .GetHklmRegValue ( ) ; } }
"NUnit.Framework.Assert.That < T > ( ref T , NUnit.Framework.Constraints.IResolveConstraint , string , params object [ ] ) NUnit.Framework.Assert.That < T > ( ref T , NUnit.Framework.Constraints.IResolveConstraint , string ) NUnit.Framework.Assert.That < T > ( ref T , NUnit.Framework.Constraints.IResolveConstraint ) NUnit.Framework.Assert.That ( object , NUnit.Framework.Constraints.IResolveConstraint , string , params object [ ] ) NUnit.Framework.Assert.That ( object , NUnit.Framework.Constraints.IResolveConstraint , string ) NUnit.Framework.Assert.That ( object , NUnit.Framework.Constraints.IResolveConstraint )"
"public abstract class A < T > where T : A < T > , new ( ) { public static void Process ( ) { Process ( new T ( ) ) ; } public static void Process ( T t ) { // Do Something ... } } public class B : A < B > { } public class C : A < C > { } public abstract class A < T extends A < T > > { public static < T extends A < T > > void process ( ) { process ( new T ( ) ) ; // Error : Can not instantiate the type T } public static < T extends A < T > > void process ( T t ) { // Do Something ... } public class B extends A < B > { } public class C extends A < C > { } }"
class Filtering : Display { private int length = 10000 ; public Filtering ( ) : base ( length ) { } } abstract class Display { public Display ( int length ) { } }
"public class MyCollection : ICollection < string > { private readonly ICollection < string > _inner = new Collection < string > ( ) ; public void Add ( string item ) { _inner.Add ( item ) ; } // < -- CodeContracts : ensures unproven : this.Count > = Contract.OldValue ( this.Count ) public void Clear ( ) { _inner.Clear ( ) ; } // < -- CodeContracts : ensures unproven : this.Count == 0 public bool Contains ( string item ) { return _inner.Contains ( item ) ; // < -- CodeContracts : ensures unproven : ! Contract.Result < bool > ( ) || this.Count > 0 } public void CopyTo ( string [ ] array , int arrayIndex ) { _inner.CopyTo ( array , arrayIndex ) ; // < -- CodeContracts : requires unproven : arrayIndex + this.Count < = array.Length } public IEnumerator < string > GetEnumerator ( ) { return _inner.GetEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return GetEnumerator ( ) ; } public bool Remove ( string item ) { return _inner.Remove ( item ) ; } public int Count { get { return _inner.Count ; } } public bool IsReadOnly { get { return _inner.IsReadOnly ; } } }"
"HttpClient client = new HttpClient ( ) ; // Create a HttpClientclient.BaseAddress = new Uri ( `` http : //localhost:8081/api/Animals '' ) ; //Set the Base Address//eg : - methodToInvoke='GetAmimals'//e.g : - input='Animal ' classHttpResponseMessage response = client.GetAsync ( 'GetAllAnimals ' ) .Result ; // Blocking call ! if ( response.IsSuccessStatusCode ) { XmlSerializer serializer = new XmlSerializer ( typeof ( Animal ) ) ; //Animal is my Class ( e.g ) string data = response.Content.ReadAsStringAsync ( ) .Result ; using ( MemoryStream ms = new MemoryStream ( UTF8Encoding.UTF8.GetBytes ( data ) ) ) { var _response = ( Animal ) serializer.Deserialize ( ms ) ; return _response ; } } HttpClient client = new HttpClient ( ) ; // Create a HttpClient client.BaseAddress = new Uri ( `` http : //localhost:8081/api/Animals '' ) ; //Set the Base Address //eg : - methodToInvoke='GetAmimals ' //e.g : - input='Animal ' class HttpResponseMessage response = client.GetAsync ( 'GetAllDogs ' ) .Result ; // Blocking call ! if ( response.IsSuccessStatusCode ) { XmlSerializer serializer = new XmlSerializer ( typeof ( Dog ) ) ; //Animal is my Class ( e.g ) string data = response.Content.ReadAsStringAsync ( ) .Result ; using ( MemoryStream ms = new MemoryStream ( UTF8Encoding.UTF8.GetBytes ( data ) ) ) { var _response = ( Dog ) serializer.Deserialize ( ms ) ; return _response ; } } private T GetAPIData ( T input , string parameters , string methodToInvoke ) { try { HttpClient client = new HttpClient ( ) ; client.BaseAddress = new Uri ( `` http : //localhost:8081/api/Animals '' ) ; //eg : - methodToInvoke='GetAmimals ' //e.g : - input='Animal ' class HttpResponseMessage response = client.GetAsync ( methodToInvoke ) .Result ; // Blocking call ! if ( response.IsSuccessStatusCode ) { XmlSerializer serializer = new XmlSerializer ( typeof ( input ) ) ; string data = response.Content.ReadAsStringAsync ( ) .Result ; using ( MemoryStream ms = new MemoryStream ( UTF8Encoding.UTF8.GetBytes ( data ) ) ) { var _response = ( input ) serializer.Deserialize ( ms ) ; return _response ; } } } catch ( Exception ex ) { throw new Exception ( ex.Message ) ; } return ( T ) input ; } var testData = GetAPIData ( new Aminal ( ) , null , 'GetAmimals ' ) ;"
"string targetSharepointPath = @ '' \\team.mycompany.com @ SSL\DavWWWRoot\team\wmscompanydep\Software Releases\MyToolConfig '' System.IO.File.Copy ( sourcePath , targetSharepointPath , false ) ;"
"DateTime.ParseExact ( `` 13/05/2012 '' , `` dd/mm/yyyy '' , null ) DateTime.Parse ( `` 13/05/2012 '' ) DateTime.Parse ( `` 13/05/2012 '' ) DateTime.ParseExact ( `` 13/05/2012 '' , `` dd/mm/yyyy '' , null ) String was not recognized as a valid DateTime ."
Task bind = Task.Factory.StartNew ( ( ) = > { Thread.CurrentThread.CurrentCulture = culture ; // do some asp.net binding stuff with automatic // date formatting gridView.DataSource = table ; gridView.DataBind ( ) ; }
myNewClass n = new myNewClass ( ) ; n.aFunction ( ) ;
"< asp : Repeater ID= '' ResultsTableRepeater '' runat= '' server '' OnPreRender= '' ResultsTableRepeater_PreRender '' > < HeaderTemplate > < table class= '' td-table-bordered '' style= '' font-size : small ; width : 90 % '' > < tr > < th > Change # < /th > < th > Change Title < /th > < th > Change Description < /th > < th > Clarity Id < /th > < th > Package Description < /th > < th > Package Name < /th > < th > Package Status < /th > < th > Assigned To < /th > < th > New Package < /th > < /tr > < /HeaderTemplate > < ItemTemplate > < asp : Literal runat= '' server '' Text= ' < % # Eval ( `` ChangeId '' ) % > ' ID= '' IdTag '' Visible= '' false '' > < /asp : Label > < tr id= '' tableRow '' class= '' '' data-changeId= ' < % # Eval ( `` ChangeId '' ) % > ' runat= '' server '' style= ' < % # ( Eval ( `` AssignedTo '' ) .ToString ( ) == `` 7 '' || Eval ( `` AssignedTo '' ) .ToString ( ) == `` 8 '' ) ? `` `` : `` font-weight : bold ; background-color : cornsilk '' % > ' > < td > < % # Eval ( `` ChangeId '' ) % > < /td > < td > < % # Eval ( `` ChangeTitle '' ) % > < /td > < td > < % # Eval ( `` ChangeDescription '' ) % > < /td > < td > < % # Eval ( `` ClarityId '' ) % > < /td > < td > < % # ( Eval ( `` PackageId '' ) .ToString ( ) == string.Empty ) ? `` '' : `` < a href=http : //dev.rlaninfrastructure.tdbank.ca/RCIViewForm ? ChangeId= '' + Eval ( `` ChangeId '' ) + `` & PackageId= '' + Eval ( `` PackageId '' ) + `` runat='server ' id='RCILink ' > '' % > < asp : Label ID= '' ExistingPackageLabel '' runat= '' server '' Text= ' < % # ( Eval ( `` PackageId '' ) .ToString ( ) == string.Empty ) ? `` No packages '' : Eval ( `` PackageDescription '' ) .ToString ( ) % > ' > < /asp : Label > < % # ( Eval ( `` PackageId '' ) .ToString ( ) == string.Empty ) ? `` '' : `` < /a > '' % > < /td > < td > < % # Eval ( `` PackageName '' ) % > < /td > < td > < asp : Label ID= '' LabRequestedLabel '' runat= '' server '' Text= ' < % # ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 1 '' ) ? `` Requested '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 2 '' ) ? `` Built '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 3 '' ) ? `` NFT '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 4 '' ) ? `` Pilot '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 5 '' ) ? `` Production '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 6 '' ) ? `` Completed '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 7 '' ) ? `` Cancelled '' : ( Eval ( `` PackageStatus '' ) .ToString ( ) == `` 8 '' ) ? `` Pending '' : `` '' % > ' > < /asp : Label > < /td > < td > < % # ( Eval ( `` EmployeeName '' ) .ToString ( ) == string.Empty ) ? `` '' : Eval ( `` EmployeeName '' ) % > < /td > < td > < % # `` < a href=http : //dev.rlaninfrastructure.tdbank.ca/RCIViewForm ? ChangeId= '' + Eval ( `` ChangeId '' ) + `` runat='server ' id='RCILink ' > '' % > < asp : Label ID= '' NewPackageLabel '' runat= '' server '' Text= '' Create New '' > < /asp : Label > < % # '' < /a > '' % > < /td > < /tr > < /ItemTemplate > < FooterTemplate > < /table > < /FooterTemplate > < /asp : Repeater > protected void ResultsTableRepeater_PreRender ( object sender , EventArgs e ) { int previousId = 0 ; int currentId = 0 ; int nextId = 0 ; for ( int item = 0 ; item < ResultsTableRepeater.Items.Count ; item++ ) { Literal idTag = ( Literal ) ResultsTableRepeater.Items [ item ] .FindControl ( `` IdTag '' ) ; Literal classTag = ( Literal ) ResultsTableRepeater.Items [ item ] .FindControl ( `` ClassTag '' ) ; HtmlTableRow tableRow = ( HtmlTableRow ) ResultsTableRepeater.Items [ item ] .FindControl ( `` tableRow '' ) ; if ( item ! = ResultsTableRepeater.Items.Count - 1 ) int.TryParse ( ( ( Literal ) ResultsTableRepeater.Items [ item + 1 ] .FindControl ( `` IdTag '' ) ) .Text.ToString ( ) , out nextId ) ; if ( int.TryParse ( idTag.Text , out currentId ) ) { if ( currentId == previousId ) { tableRow.Attributes [ `` class '' ] = `` hidden '' ; } else if ( currentId ! = previousId & & currentId == nextId ) { tableRow.Attributes [ `` class '' ] = `` toggler '' ; } } else nextId = 0 ; int.TryParse ( idTag.Text , out previousId ) ; } } $ ( `` .toggler '' ) .click ( function ( ) { var idClicked = $ ( this ) .data ( `` changeid '' ) ; //Toggle hidden on the sibling rows with the same data id $ ( this ) .nextAll ( `` [ data-changeId= ' '' + idClicked + '' ' ] '' ) .toggleClass ( `` hidden '' ) ; //Toggle opened status on clicked row $ ( this ) .toggleClass ( `` opened '' ) ; } ) ; .hidden { display : none ; } .toggler td : first-child : :after { content : '' + '' ; } .toggler.opened td : first-child : :after { content : '' - '' ; }"
"namespace AnimationTest { public partial class MainWindow : Window { ScaleTransform transP ; TranslateTransform trans2P ; DoubleAnimation animP ; DoubleAnimation animYP ; DoubleAnimation animXP ; TransformGroup myTransformGroupP ; public MainWindow ( ) { InitializeComponent ( ) ; transP = new ScaleTransform ( ) ; trans2P = new TranslateTransform ( ) ; myTransformGroupP = new TransformGroup ( ) ; myTransformGroupP.Children.Add ( transP ) ; myTransformGroupP.Children.Add ( trans2P ) ; animP = new DoubleAnimation ( 1 , 20 , TimeSpan.FromMilliseconds ( 3000 ) ) ; animXP = new DoubleAnimation ( 0 , -14000 , TimeSpan.FromMilliseconds ( 3000 ) ) ; animYP = new DoubleAnimation ( 0 , -4000 , TimeSpan.FromMilliseconds ( 3000 ) ) ; } private void button1_Click ( object sender , RoutedEventArgs e ) { image1.RenderTransform = myTransformGroupP ; transP.BeginAnimation ( ScaleTransform.ScaleXProperty , animP ) ; transP.BeginAnimation ( ScaleTransform.ScaleYProperty , animP ) ; trans2P.BeginAnimation ( TranslateTransform.XProperty , animXP ) ; trans2P.BeginAnimation ( TranslateTransform.YProperty , animYP ) ; } } }"
"richTextBox1.Text = `` aaabbbccc '' ; richTextBox1.Text = richTextBox1.Text.Replace ( `` bbb '' , `` '' ) ;"
"switch ( publicationType ) { case PublicationType.Book : return Session.Query < Publication > ( ) .Where ( p = > p.PublicationType == PublicationType.Book ) .OrderByDescending ( p = > p.DateApproved ) .Take ( 10 ) .Select ( p = > new PublicationViewModel { ... } ) ; case PublicationType.Magazine : return Session.Query < Publication > ( ) .Where ( p = > p.PublicationType == PublicationType.Magazine ) .OrderByDescending ( p = > p.DateApproved ) .Take ( 10 ) .Select ( p = > new PublicationViewModel { ... } ) ; case PublicationType.Newspaper ... . } private IEnumerable < PublicationViewModel > GetPublicationItems ( Func < PublicationType , bool > > pubQuery ) { return Session.Query < Publication > ( ) .Where ( pubQuery ) .OrderByDescending ( p = > p.DateApproved ) .Take ( 10 ) .Select ( p = > new PublicationViewModel { ... } ) ; } private bool IsBook ( PublicationType publicationType ) { return publicationType == PublicationType.Book ; } GetPublicationItems ( IsBook ) ;"
"someEnumerable.Where ( x = > x ! = null ) .Select ( x = > x.SomeProperty ) ; someEnumerable.Where ( x = > x ! = null & & x.SomeProperty ! = null ) .Select ( x = > x.SomeProperty.SomeOtherProperty ) ; someEnumerable.SelectWithNullCheck ( x = > x.SomeProperty ) ; someEnumerable.SelectWithNullCheck ( x = > x.SomeProperty.SomeOtherProperty ) ; public static IEnumerable < TResult > SelectWithNullCheck < TSource , TResult > ( this IEnumerable < TSource > source , Func < TSource , TResult > selector ) { return source.Where ( THIS IS WHERE THE AUTOMATIC NULL-CHECKS HAPPEN ) .Select ( selector ) ; }"
"Rectangle cuttedSprite = new Rectangle ( this.W * ( int ) this.mCurSprite.X , this.H * ( int ) this.mCurSprite.Y , this.W , this.H ) ; spriteBatch.Draw ( this.mSpriteTexture , this.mPosition , cuttedSprite , Color.White ) ;"
"public static void Fun < S , T > ( Func < S , T > func ) { } Fun ( ( string s ) = > true ) ; //compiles , T is inferred from return type . public static void Fun < T > ( Func < T , T > func ) { } Fun ( t = > true ) ; //ca n't infer type ."
"Cost : 1 Ingredient : CoffeeCost : 1 Ingredient : CoffeeCost : 1 Ingredient : CoffeeCost : 1 Ingredient : Coffee namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { Coffee sampleCoffee = new SimpleCoffee ( ) ; Console.WriteLine ( `` Cost : `` + sampleCoffee.getCost ( ) + `` Ingredient : `` + sampleCoffee.getIngredient ( ) ) ; sampleCoffee = new Milk ( sampleCoffee ) ; Console.WriteLine ( `` Cost : `` + sampleCoffee.getCost ( ) + `` Ingredient : `` + sampleCoffee.getIngredient ( ) ) ; sampleCoffee = new Sprinkles ( sampleCoffee ) ; Console.WriteLine ( `` Cost : `` + sampleCoffee.getCost ( ) + `` Ingredient : `` + sampleCoffee.getIngredient ( ) ) ; sampleCoffee = new Whip ( sampleCoffee ) ; Console.WriteLine ( `` Cost : `` + sampleCoffee.getCost ( ) + `` Ingredient : `` + sampleCoffee.getIngredient ( ) ) ; Console.ReadKey ( ) ; } } //The Coffee Interface defines the functionality of Coffee implemented by decoratorpublic interface Coffee { double getCost ( ) ; // returns the cost of coffee String getIngredient ( ) ; //returns the ingredients mixed with coffee } //implementation of simple coffee without any extra ingredientspublic class SimpleCoffee : Coffee { double cost ; String ingredient ; public SimpleCoffee ( ) { cost = 1 ; ingredient = `` Coffee '' ; } public double getCost ( ) { return cost ; } public String getIngredient ( ) { return ingredient ; } } //abstract decorator class - note that it implements coffee interfaceabstract public class CoffeeDecorator : Coffee { protected Coffee decoratedCoffee ; protected String ingredientSeparator ; public CoffeeDecorator ( Coffee decoratedCoffee ) { this.decoratedCoffee = decoratedCoffee ; ingredientSeparator = `` , `` ; } public CoffeeDecorator ( ) { } public double getCost ( ) //note it implements the getCost function defined in interface Coffee { return decoratedCoffee.getCost ( ) ; } public String getIngredient ( ) { return decoratedCoffee.getIngredient ( ) ; } } //Decorator Milk that mixes milk with coffee//note it extends CoffeeDecoratorpublic class Milk : CoffeeDecorator { double cost ; String ingredient ; public Milk ( Coffee decoratedCoffee ) : base ( decoratedCoffee ) { cost = 0.5 ; ingredient = `` Milk '' ; } public double getCost ( ) { return base.getCost ( ) + cost ; } public String getIngredient ( ) { return base.getIngredient ( ) + base.ingredientSeparator + ingredient ; } } //Decorator Whip that mixes whip with coffee//note it extends CoffeeDecoratorpublic class Whip : CoffeeDecorator { double cost ; String ingredient ; public Whip ( Coffee decoratedCoffee ) : base ( decoratedCoffee ) { cost = 0.7 ; ingredient = `` Whip '' ; } public double getCost ( ) { return base.getCost ( ) + cost ; } public String getIngredient ( ) { return base.getIngredient ( ) + base.ingredientSeparator + ingredient ; } } //Decorator Sprinkles that mixes sprinkles with coffee//note it extends CoffeeDecoratorpublic class Sprinkles : CoffeeDecorator { double cost ; String ingredient ; public Sprinkles ( Coffee decoratedCoffee ) : base ( decoratedCoffee ) { cost = 0.2 ; ingredient = `` Sprinkles '' ; } public double getCost ( ) { return base.getCost ( ) + cost ; } public String getIngredient ( ) { return base.getIngredient ( ) + base.ingredientSeparator + ingredient ; } } }"
"private void OnLoaded ( Object sender , RoutedEventArgs e ) { IFilterViewModel viewModel = ( IFilterViewModel ) DataContext ; viewModel.Closing += OnViewModelClosing ; } private void OnViewModelClosing ( Object sender , EventArgs < Result > e ) { IFilterViewModel viewModel = ( IFilterViewModel ) DataContext ; viewModel.Closing -= OnViewModelClosing ; DialogResult = ( e.Value == Result.OK ) ? true : false ; Close ( ) ; }"
public class Test { public Test ( Action < long > arg ) { } public Test ( Action < decimal > arg ) { } } public class CallTest { public CallTest ( ) { Test t = new Test ( TestDecimal ) ; } public void TestDecimal ( decimal arg ) { } public void TestLong ( long arg ) { } }
Thread _thread = new Thread ( _caller.CallServices ( ) ) ; _thread.Start ( ) ; _thread.Join ( timeout ) ; if ( _thread.IsAlive ) { _thread.Abort ( ) ; throw new Exception ( `` Timed-out attempting to connect . `` ) ; }
"public class IOCompletionWorker { public unsafe void Start ( IntPtr completionPort ) { while ( true ) { uint bytesRead ; uint completionKey ; NativeOverlapped* nativeOverlapped ; var result = Interop.GetQueuedCompletionStatus ( completionPort , out bytesRead , out completionKey , & nativeOverlapped , uint.MaxValue ) ; var overlapped = Overlapped.Unpack ( nativeOverlapped ) ; if ( result ) { var asyncResult = ( ( FileReadAsyncResult ) overlapped.AsyncResult ) ; asyncResult.ReadCallback ( bytesRead , asyncResult.Buffer ) ; } else { ThreadLogger.Log ( Interop.GetLastError ( ) .ToString ( ) ) ; } Overlapped.Free ( nativeOverlapped ) ; } } } var completionPortThread = new Thread ( ( ) = > new IOCompletionWorker ( ) .Start ( completionPortHandle ) ) { IsBackground = true } ; completionPortThread.Start ( ) ;"
"IEnumerable < int > numbers = Enumerable.Range ( 3 , 100000-3 ) ; var parallelQuery = from n in numbers.AsParallel ( ) where Enumerable.Range ( 2 , ( int ) Math.Sqrt ( n ) ) .All ( i = > n % i > 0 ) select n ; ParallelEnumerable.Range ( 1 , 10000000 ) .Sum ( i = > Math.Sqrt ( i ) )"
summaryForm.MdiParent = ContainerForm ; summaryForm.WindowState = FormWindowState.Maximized ; summaryForm.Show ( ) ;
"private String text ; public String Text { get { return text ; } private set { // some actions with a value value = value.Replace ( ' a ' , ' b ' ) ; text = value ; } } public Test ( String text ) { this.text = text ; }"
public class MyClass { public string MyProperty { get ; set ; } } [ Table ] public class MyClass { [ Column ] public string MyProperty { get ; set ; } }
"Func < T1 , object > private Func < T1 , T2 > GetFunc < T1 , T2 > ( string expression ) { Func < T1 , object > objFunc = CreateFunction ( expression ) ) ; return objFunc as Func < T1 , T2 > ; }"
"[ TestClass ] public class RepoTest { private const string TestConnectionString = @ '' Server=localhost\SQL2014EXPRESS64 ; Database=RepoTest ; Trusted_Connection=True ; '' ; private const string MasterConnectionString = @ '' Server=localhost\SQL2014EXPRESS64 ; Database=master ; Trusted_Connection=True ; '' ; [ TestInitialize ] private void Initialize ( ) { using ( var connection = new SqlConnection ( MasterConnectionString ) ) using ( var command = new SqlCommand ( Resources.Initialize , connection ) ) { command.ExecuteNonQuery ( ) ; } } [ TestCleanup ] private void Cleanup ( ) { using ( var connection = new SqlConnection ( MasterConnectionString ) ) using ( var command = new SqlCommand ( Resources.Cleanup , connection ) ) { command.ExecuteNonQuery ( ) ; } } [ TestMethod ] public void CreateARepo ( ) { var repo = new Repo ( TestConnectionString ) ; } }"
public class A { private readonly int i ; public A ( ) { void SetI ( ) { i = 10 ; } SetI ( ) ; } }
"< Documents > < Document > < id > 1 < /id > < title > title1 < /title > < productTypes > < productType id= '' x1 '' > Capital Costs Analysis Forum - Brazil < /productType > < productType id= '' x3 '' > Environmental , Health and Safety & amp ; Sustainability < /productType > < /productTypes > < /Document > < Document > < id > 2 < /id > < title > title2 < /title > < productTypes > < productType id= '' x1 '' > Capital Costs Analysis Forum - Brazil < /productType > < /productTypes > < /Document > < Document > < id > 3 < /id > < title > title3 < /title > < productTypes > < productType id= '' x3 '' > Environmental , Health and Safety & amp ; Sustainability < /productType > < /productTypes > < /Document > < Document > < id > 4 < /id > < title > title4 < /title > < productTypes > < productType id= '' x2 '' > Defense , Risk & amp ; Security < /productType > < /productTypes > < /Document > var documents = from document in some.Descendants ( `` Document '' ) group document by ( string ) document .Element ( `` productTypes '' ) .Elements ( `` productType '' ) .First ( ) into docGroupselect docGroup ;"
"public interface IXmlSerializable { //if this interface is implemented , the object can be serialized to XML string toXML ( ) ; IXmlSerializable fromXML ( XmlDocumentFragment inXml ) ; } public class AwwaTransmissionInfo : IXmlSerializable { public DateTime DateTime = DateTime.Now ; public int ItemCount ; public string toXML ( ) { throw new Exception ( `` The method or operation is not implemented . `` ) ; } public AwwaTransmissionInfo fromXML ( XmlDocumentFragment inXml ) { throw new Exception ( `` The method or operation is not implemented . `` ) ; } } public class CEmail { public string Email = `` '' ; public string toXML ( ) { throw new System.Exception ( `` The method or operation is not implemented . `` ) ; } public CEmail fromXML ( XmlDocumentFragment inXml ) { throw new System.Exception ( `` The method or operation is not implemented . `` ) ; } }"
public class BaseRenderer { Func < string > renderer ; public BaseRenderer ( Func < string > renderer ) { this.renderer = renderer ; } public string Render ( ) { return renderer ( ) ; } } public class NameRenderer : BaseRenderer { public string Name { get ; set ; } public NameRenderer ( ) : base ( ( ) = > this.Name ) { } } public class Program { public static void Main ( ) { Console.WriteLine ( new NameRenderer ( ) { Name = `` Foo '' } .Render ( ) ) ; } }
"InputManager.GamePads.ButtonPressed ( Buttons.A , s = > s.MoveToScreen < NextScreen > ( ) ) ;"
public IQueryable < User > Query ( ) { return _Repository.Query < User > ( ) .ForEachDelayed ( u= > AppendData ( u ) ) ; } var users = from u in _Repository.Query < User > ( ) select AppendData ( u ) ; return users ;
public static T GetValue < T > ( int input ) { object value = ExternalGetValue ( input ) ; return value ! = null ? ( T ) value : default ( T ) } var value = ExternalGetValue ( input ) as Nullable < T > ; public static T GetValue < T > ( int input ) where T : struct { ... } public static T GetValue < T > ( int input ) where T : class { ... }
public struct Test { public double Val ; public Test ( double val = double.NaN ) { Val = val ; } public bool IsValid { get { return ! double.IsNaN ( Val ) ; } } } Test myTest = new Test ( ) ; bool valid = myTest.IsValid ;
"public Car ( string color = `` red '' , topSpeed = 180 ) { carColor = color ; carTopSpeed = topSpeed ; }"
"string [ ] validDomains = { `` @ test1.com '' , `` @ test2.com '' , `` @ test3.com '' } ; string email = `` test @ test1.com ''"
"private void DoSomethingWithDatabase ( string f1 , int f2 ) { SqlCommand myCommand = new SqlCommand ( `` SELECT Field1 , Field2 , Field3 FROM MyTable WHERE Field1 = @ F1 AND Field2 = @ F2 '' , this.myConn ) ; myCommand.Parameters.Add ( `` @ F1 '' , System.Data.SqlDbType.VarChar ) ; myCommand.Parameters.Add ( `` @ F2 '' , System.Data.SqlDbType.Int ) ; if ( f1 == `` '' ) myCommand.Parameters [ `` @ F1 '' ] .Value = DBNull.Value ; else myCommand.Parameters [ `` @ F1 '' ] .Value = f1 ; if ( f2 < 0 ) myCommand.Parameters [ `` @ F2 '' ] .Value = DBNull.Value ; else myCommand.Parameters [ `` @ F2 '' ] .Value = f2 ; // code to do stuff with the results here } string theQuery = `` SELECT Field1 , Field2 , Field3 FROM MyTable WHERE `` ; if ( f1 == `` '' ) theQuery += `` Field1 IS NULL `` ; else theQuery += `` Field1 = @ F1 `` ; // ... SqlCommand myCommand = new SqlCommand ( theQuery , this.myConn ) ; if ( f1 == `` '' ) { myCommand.Parameters.Add ( `` @ F1 '' , System.Data.SqlDbType.VarChar ) ; myCommand.Parameters [ `` @ F1 '' ] .Value = f1 ; } // ..."
"Random r = new Random ( ) ; int x = ( p1.X + p2.X ) / 2 ; int y ; if ( ! initial ) y = r.Next ( Math.Min ( p1.Y , p2.Y ) , Math.Max ( p1.Y , p2.Y ) ) ; else y = r.Next ( Math.Min ( p1.Y , p2.Y ) - Game1.screenHeight / 2 , Math.Max ( p1.Y , p2.Y ) + Game1.screenHeight / 2 ) ; return new Point ( x , y ) ;"
"[ SqlProcedure ] public static void Receipt ( SqlString initiatorPassword , SqlString initiatorId , SqlXml XMLOut , out SqlString strMessge ) XmlReader r = ( XmlReader ) XmlOut.CreateReader ( ) ; XmlDocument doc = new XmlDocument ( ) ; doc.load ( r ) ; int lastdepth = -1 ; Boolean objend = true ; Boolean wt = false ; //Write Member/Object statements for the header omittedJsonWriter w = new JsonTextWriter ( ) while ( m.Read ( ) ) { if ( ( lastdepth == -1 ) & & ( m.IsStartElement ( ) ) ) { //Checking for root element lastdepth = 0 ; } if ( ( m.IsStartElement ( ) ) & & ( lastdepth ! = -1 ) ) { //Checking for Start element ( < html > ) w.WriteMember ( m.Name ) ; if ( objend ) { //Check if element is new Parent Node , if so , write start object w.WriteStartObject ( ) ; objend = false ; } } if ( m.NodeType == XmlNodeType.Text ) { //Writes text here . NOTE : m.Depth > lastdepth here ! ! ! ! ! ! ! w.WriteString ( m.Value ) ; wt = true ; } if ( m.NodeType == XmlNodeType.Whitespace ) //If whitespace , keep on truckin { m.Skip ( ) ; } if ( ( m.NodeType == XmlNodeType.EndElement ) & & ( wt == false ) & & ( lastdepth > m.Depth ) ) { //End element that ends a series of `` Child '' nodes w.WriteEndObject ( ) ; objend = true ; } if ( ( m.NodeType == XmlNodeType.EndElement ) & & ( wt == true ) ) //Standard end of an el { wt = false ; } lastdepth = m.Depth ; } w.WriteEndObject ( ) ; jout = w.ToString ( ) ; }"
public struct Point { public float X ; //4-bytes public float Y ; //4-bytes . }
"var arr = new string [ ] { `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' } ; var result = Array.ConvertAll ( arr , s = > Int32.Parse ( s ) ) ; IL_0001 : ldc.i4.4 IL_0002 : newarr System.StringIL_0007 : stloc.2 IL_0008 : ldloc.2 IL_0009 : ldc.i4.0 IL_000A : ldstr `` 1 '' IL_000F : stelem.ref IL_0010 : ldloc.2 IL_0011 : ldc.i4.1 IL_0012 : ldstr `` 2 '' IL_0017 : stelem.ref IL_0018 : ldloc.2 IL_0019 : ldc.i4.2 IL_001A : ldstr `` 3 '' IL_001F : stelem.ref IL_0020 : ldloc.2 IL_0021 : ldc.i4.3 IL_0022 : ldstr `` 4 '' IL_0027 : stelem.ref IL_0028 : ldloc.2 IL_0029 : stloc.0 IL_002A : ldloc.0 IL_002B : ldsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_0030 : brtrue.s IL_0045IL_0032 : ldnull IL_0033 : ldftn b__0IL_0039 : newobj System.Converter < System.String , System.Int32 > ..ctorIL_003E : stsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_0043 : br.s IL_0045IL_0045 : ldsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_004A : call System.Array.ConvertAllIL_004F : stloc.1 b__0 : IL_0000 : ldarg.0 IL_0001 : call System.Int32.ParseIL_0006 : stloc.0 IL_0007 : br.s IL_0009IL_0009 : ldloc.0 IL_000A : ret var arr = new string [ ] { `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' } ; var result = arr.Select ( s = > int.Parse ( s ) ) .ToArray ( ) ; IL_0001 : ldc.i4.4 IL_0002 : newarr System.StringIL_0007 : stloc.2 IL_0008 : ldloc.2 IL_0009 : ldc.i4.0 IL_000A : ldstr `` 1 '' IL_000F : stelem.ref IL_0010 : ldloc.2 IL_0011 : ldc.i4.1 IL_0012 : ldstr `` 2 '' IL_0017 : stelem.ref IL_0018 : ldloc.2 IL_0019 : ldc.i4.2 IL_001A : ldstr `` 3 '' IL_001F : stelem.ref IL_0020 : ldloc.2 IL_0021 : ldc.i4.3 IL_0022 : ldstr `` 4 '' IL_0027 : stelem.ref IL_0028 : ldloc.2 IL_0029 : stloc.0 IL_002A : ldloc.0 IL_002B : ldsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_0030 : brtrue.s IL_0045IL_0032 : ldnull IL_0033 : ldftn b__0IL_0039 : newobj System.Func < System.String , System.Int32 > ..ctorIL_003E : stsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_0043 : br.s IL_0045IL_0045 : ldsfld UserQuery.CS $ < > 9__CachedAnonymousMethodDelegate1IL_004A : call System.Linq.Enumerable.SelectIL_004F : call System.Linq.Enumerable.ToArrayIL_0054 : stloc.1 b__0 : IL_0000 : ldarg.0 IL_0001 : call System.Int32.ParseIL_0006 : stloc.0 IL_0007 : br.s IL_0009IL_0009 : ldloc.0 IL_000A : ret"
"public virtual HttpResponseMessage GetById ( int id ) { var entity = repository.GetById ( id ) ; if ( entity == null ) { var message = string.Format ( `` No { 0 } with ID = { 1 } '' , GenericTypeName , id ) ; return ErrorMsg ( HttpStatusCode.NotFound , message ) ; } return Request.CreateResponse ( HttpStatusCode.OK , SingleResult.Create ( repository.Table.Where ( t = > t.ID == id ) ) ) ; } [ TestMethod ] public void Get_By_Id ( ) { //Arrange var moq = CreateMockRepository ( ) ; var controller = new AddressApiController ( moq ) ; controller.Request = new HttpRequestMessage ( ) controller.Request.SetConfiguration ( new HttpConfiguration ( ) ) // Action HttpResponseMessage response = controller.GetById ( 1 ) ; var result = response.Content.ReadAsAsync < T > ( ) .Result ; // Accert Assert.IsNotNull ( result ) ; }"
class Employee { public string Id { get ; set ; } public string Name { get ; set ; } public string Gender { get ; set ; } }
"private FileInfo GetNameOfViewToServe ( ) { var LeftPartOfUri = Request.Url.GetLeftPart ( UriPartial.Authority ) ; var folder = Request.Url.AbsoluteUri.Replace ( LeftPartOfFolderUri , string.Empty ) ; var directory = new DirectoryInfo ( Server.MapPath ( @ '' ~\Views\ '' + folder ) ) ; return directory.GetFiles ( ) .First ( ) ; }"
"{ `` snippet-format '' : '' raw '' , '' total '' :1 , '' start '' :1 , '' page-length '' :200 , '' results '' : [ { `` index '' :1 , '' uri '' : '' /myproject/info.xml '' , '' path '' : '' fn : doc ( \ '' /myproject/info.xml\ '' ) '' , '' score '' :0 , '' confidence '' :0 , '' fitness '' :0 , '' content '' : '' < root xmlns : xs=\ '' http : //www.w3.org/2001/XMLSchema\ '' xmlns=\ '' \ '' xmlns : search=\ '' http : //marklogic.com/appservices/search\ '' > < content > Adams Project file < /content > < /root > '' } ] , '' facets '' : { `` lastmodified '' : { `` type '' : '' xs : dateTime '' , '' facetValues '' : [ ] } } , '' metrics '' : { `` query-resolution-time '' : '' PT0.002559S '' , '' facet-resolution-time '' : '' PT0.00111S '' , '' snippet-resolution-time '' : '' PT0.000043S '' , '' total-time '' : '' PT0.0039S '' } } public class SearchResponse : MarkLogicObject { // response fields public string SnippetFormat { get ; set ; } public int Total { get ; set ; } public int Start { get ; set ; } public int PageLength { get ; set ; } public SearchResult [ ] Results { get ; set ; } public string Warning { get ; set ; } public override string ToString ( ) { return `` SnippetFormat : `` + SnippetFormat + `` , Total : `` + Total + `` , Start : `` + Start + `` , Warning : `` + Warning ; } public static SearchResponse ParseJson ( string json ) { var map = JsonObject.Parse ( json ) ; return new SearchResponse { Total = int.Parse ( map [ `` total '' ] ) , Start = int.Parse ( map [ `` start '' ] ) , PageLength = int.Parse ( map [ `` page-length '' ] ) , SnippetFormat = map [ `` snippet-format '' ] , Warning = map [ `` warning '' ] , Results = map [ `` results '' ] .FromJson < SearchResult [ ] > ( ) // why does n't this deserialise properly ? It creates a SearchResponse object mirroring this one instead . } ; } } // Sub elements of SearchResponsepublic class SearchResult { public string Uri { get ; set ; } public long Index { get ; set ; } public string Path { get ; set ; } public double Score { get ; set ; } public double Fitness { get ; set ; } public double Confidence { get ; set ; } public string Content { get ; set ; } // JSON or XML content ( probably XML , no matter what ? format=json says ) public override string ToString ( ) { return string.Format ( `` [ SearchResult : Uri= { 0 } , Index= { 1 } , Path= { 2 } , Score= { 3 } , Fitness= { 4 } , Confidence= { 5 } , Content= { 6 } ] '' , Uri , Index , Path , Score , Fitness , Confidence , Content ) ; } } HttpWebResponse webResponse = restClient.Get < HttpWebResponse > ( completePath ( `` /v1/search '' , qp ) ) ; using ( var stream = webResponse.GetResponseStream ( ) ) using ( var sr = new StreamReader ( stream ) ) { var text = sr.ReadToEnd ( ) ; log.log ( `` response text : `` + text ) ; result = text.FromJson < SearchResponse > ( ) ; } log.log ( `` RESULT : `` + result.ToString ( ) ) ; for ( int i = 0 ; i < result.Results.Length ; i++ ) { log.log ( `` Result `` + i + `` : `` + result.Results [ i ] .ToString ( ) ) ; } 19:30:24 | SparkleMLLogger | RESULT : SnippetFormat : raw , Total : 1 , Start : 1 , Warning : 19:30:24 | SparkleMLLogger | Result : SnippetFormat : raw , Total : 1 , Start : 1 , Warning :"
public class BaseContainer < T > : IEnumerable < T > { public void DoStuff ( T item ) { throw new NotImplementedException ( ) ; } public IEnumerator < T > GetEnumerator ( ) { } System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ( ) { } } public class Container < T > : BaseContainer < T > { public void DoStuff ( IEnumerable < T > collection ) { } public void DoStuff < Tother > ( IEnumerable < Tother > collection ) where Tother : T { } } Container < string > c = new Container < string > ( ) ; c.DoStuff ( `` Hello World '' ) ; public class Container < T > : BaseContainer < T > { public new void DoStuff ( T item ) { base.DoStuff ( item ) ; } public void DoStuff ( IEnumerable < T > collection ) { } public void DoStuff < Tother > ( IEnumerable < Tother > collection ) where Tother : T { } }
foreach ( XmlNode foo in xmlNodeList ) { string baa = foo.Attributes [ `` baa '' ] .Value ; } foreach ( var foo in xmlNodeList ) { string baa = foo.Attributes [ `` baa '' ] .Value ; }
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication2 { class Program { static void Main ( string [ ] args ) { List < string > list = new List < string > ( ) { `` fred-064528-NEEDED1 '' , `` xxxx '' , `` frederic-84728957-NEEDED2 '' , `` sam-028-NEEDED3 '' , `` -- -- - '' , `` another-test '' } ; var result = from s in list where ( from c in s where c == '- ' select c ) .Count ( ) == 2 select s.Substring ( s.LastIndexOf ( `` - '' ) + 1 ) ; foreach ( string s in result ) Console.WriteLine ( s ) ; Console.WriteLine ( `` Press Enter '' ) ; Console.ReadLine ( ) ; } } }"
ref = Profiler.StartStep ( `` Creating CRM Model '' ) ; //Do horrible CRM workvar myNewHorribleObject = CRM.ModelHorribleStuff ( ... ) ; Profiler.StopStep ( ref ) ; ref = Profiler.StartStep ( `` How long does it take to get X '' ) ; var data = Repository.GetSomething ( myNewHorribleObject.SomeId ) ; Profiler.StopStep ( ref ) ; ref = Profiler.StartStep ( `` How long does it take to get Y '' ) ; var newData = Repository.GetSomethingElse ( myNewHorribleObject.ContextId ) ; Profiler.StopStep ( ref ) ;
"Func < int , string > = i= > i.ToString ( ) ; var func37 = ( Func < CultureInfo , string > ) ( 37.ToString ) ; var toStringMethod = typeof ( int ) .GetMethod ( `` ToString '' , BindingFlags.Instance | BindingFlags.Public , null , new Type [ ] { typeof ( CultureInfo ) } , null ) ; var func42 = ( Func < CultureInfo , string > ) Delegate.CreateDelegate ( typeof ( Func < CultureInfo , string > ) , 42 , toStringMethod , true ) ; Console.WriteLine ( object.ReferenceEquals ( func37.Method , func42.Method ) ) ; //trueConsole.WriteLine ( func37.Target ) ; //37Console.WriteLine ( func42.Target ) ; //42Console.WriteLine ( func37 ( CultureInfo.InvariantCulture ) ) ; //37Console.WriteLine ( func42 ( CultureInfo.InvariantCulture ) ) ; //-201040128 ... WTF ?"
"void Main ( ) { Enum.GetValues ( typeof ( Options ) ) .Cast < int > ( ) .Dump ( ) ; Enum.GetValues ( typeof ( Options ) ) .Cast < int > ( ) .ToList ( ) .Dump ( ) ; } public enum Options { Equal , LessThan , GreaterThan }"
"dotnet ef migrations add InitialMigration System.IO.FileNotFoundException : Could not load file or assembly 'netstandard , Version=2.0.0.0 , Culture=neutral , PublicKeyToken=cc7b13ffcd2ddd51 ' . The system can not find the file specified.File name : 'netstandard , Version=2.0.0.0 , Culture=neutral , PublicKeyToken=cc7b13ffcd2ddd51 ' at System.Reflection.RuntimeAssembly.GetType ( RuntimeAssembly assembly , String name , Boolean throwOnError , Boolean ignoreCase , ObjectHandleOnStack type , ObjectHandleOnStack keepAlive ) at System.Reflection.RuntimeAssembly.GetType ( String name , Boolean throwOnError , Boolean ignoreCase ) at Microsoft.EntityFrameworkCore.Tools.ReflectionOperationExecutor..ctor ( String assembly , String startupAssembly , String projectDir , String contentRootPath , String dataDirectory , String rootNamespace , String environment ) at Microsoft.EntityFrameworkCore.Tools.Commands.ProjectCommandBase.CreateExecutor ( ) at Microsoft.EntityFrameworkCore.Tools.Commands.MigrationsListCommand.Execute ( ) at Microsoft.DotNet.Cli.CommandLine.CommandLineApplication.Execute ( String [ ] args ) at Microsoft.EntityFrameworkCore.Tools.Program.Main ( String [ ] args ) Could not load file or assembly 'netstandard , Version=2.0.0.0 , Culture=neutral , PublicKeyToken=cc7b13ffcd2ddd51 ' . The system can not find the file specified . < Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < TargetFramework > netcoreapp2.0 < /TargetFramework > < /PropertyGroup > < ItemGroup > < PackageReference Include= '' Analytics '' Version= '' 3.0.0 '' / > < PackageReference Include= '' AWSSDK.Core '' Version= '' 3.3.17.6 '' / > < PackageReference Include= '' AWSSDK.S3 '' Version= '' 3.3.10.2 '' / > < PackageReference Include= '' CoreCompat.System.Drawing.v2 '' Version= '' 5.2.0-preview1-r131 '' / > < PackageReference Include= '' HtmlAgilityPack '' Version= '' 1.5.1 '' / > < PackageReference Include= '' ImageProcessor '' Version= '' 2.5.4 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.SqlServer '' Version= '' 2.0.0 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.SqlServer.Design '' Version= '' 2.0.0-preview1-final '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.Tools '' Version= '' 2.0.0 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.Tools.DotNet '' Version= '' 2.0.0 '' / > < PackageReference Include= '' Newtonsoft.Json '' Version= '' 10.0.3 '' / > < PackageReference Include= '' NLog.Extensions.Logging '' Version= '' 1.0.0-rtm-beta5 '' / > < PackageReference Include= '' QRCoder '' Version= '' 1.2.9 '' / > < PackageReference Include= '' System.Configuration.ConfigurationManager '' Version= '' 4.4.0 '' / > < PackageReference Include= '' WindowsAzure.Storage '' Version= '' 8.4.0 '' / > < /ItemGroup > < ItemGroup > < DotNetCliToolReference Include= '' Microsoft.EntityFrameworkCore.Tools.DotNet '' Version= '' 1.0.0 '' / > < /ItemGroup > < /Project >"
public readonly struct Test { public Test ( int value ) { Value = value ; } public int Value { get ; } } var array = new Test [ ] { new Test ( 1 ) } ; Console.WriteLine ( array [ 0 ] .Value ) ; // Prints 1 array.AsSpan ( ) .AsBytes ( ) [ 3 ] = 1 ; Console.WriteLine ( array [ 0 ] .Value ) ; // Prints 16777217
"[ Required ] public SelectList hierarchy { get ; set ; } public virtual IEnumerable < SelectListItem > Hierarchy { get { var hierarchies = new List < Company > ( ) ; hierarchies = RoleCompanyHelper.GetHierachies ( ) ; var hierarchiesList = new List < SelectListItem > ( ) ; foreach ( var hierarchy in hierarchies ) { hierarchiesList.Add ( new SelectListItem { Value = hierarchy.CompanyID.ToString ( ) , Text = hierarchy.CompanyName } ) ; } return new SelectList ( hierarchiesList , `` Value '' , `` Text '' ) ; } } public ActionResult Index ( ) { var vm = new AXCurrentRolesViewModel ( ) ; return View ( vm ) ; } @ model TelerikMvcApp1.Models.AXCurrentRolesViewModel @ ( Html.Kendo ( ) .MultiSelect ( ) .Name ( `` addRoleCompany_hierarchy '' ) .BindTo ( new SelectList ( `` Value '' , `` Text '' ) ) .Value ( Model.hierarchy ) .DataTextField ( `` HierarchyName '' ) .DataValueField ( `` HierarchyID '' ) .Placeholder ( `` Select Hierarchy ... '' ) .Filter ( FilterType.StartsWith ) .AutoBind ( false ) ) < select id= '' addRoleCompany_hierarchy '' multiple= '' multiple '' name= '' addRoleCompany_hierarchy '' > < /select > < script > jQuery ( function ( ) { jQuery ( `` # addRoleCompany_hierarchy '' ) .kendoMultiSelect ( { `` dataSource '' : [ { `` Text '' : '' All Companies Inc IFRS \u0026 Consol '' , '' Value '' : '' 55 '' } , { `` Text '' : '' All Posting Companies ( exc POC \u0026 Investments ) '' , '' Value '' : '' 56 '' } , { `` Text '' : '' BUUK Group Structure '' , '' Value '' : '' 57 '' } , { `` Text '' : '' Cardiff Entities '' , '' Value '' : '' 58 '' } , { `` Text '' : '' Department '' , '' Value '' : '' 59 '' } , { `` Text '' : '' GTC/GPL/ENC/IPL/QPL/EAM '' , '' Value '' : '' 60 '' } , { `` Text '' : '' GTC/GUC/CUL '' , '' Value '' : '' 61 '' } , { `` Text '' : '' GTCConsoleAndOperationalCompanies '' , '' Value '' : '' 62 '' } , { `` Text '' : '' GTCOperationalCompanies '' , '' Value '' : '' 63 '' } , { `` Text '' : '' Inexus Companies '' , '' Value '' : '' 64 '' } , { `` Text '' : '' Investment Companies Only '' , '' Value '' : '' 65 '' } , { `` Text '' : '' PIL/POL '' , '' Value '' : '' 66 '' } ] , '' dataTextField '' : '' HierarchyName '' , '' filter '' : '' startswith '' , '' autoBind '' : fal se , `` dataValueField '' : '' HierarchyID '' , '' placeholder '' : '' Select Hierarchy ... '' } ) ; } ) ; < /script >"
"public partial class Form1 : Form { private string TestString ; private int AveCharWidth ; private int Position ; public Form1 ( ) { InitializeComponent ( ) ; TestString = `` 123456789012345678901234567890123456789012345678901234567890 '' ; AveCharWidth = GetFontWidth ( ) ; Position = 0 ; } private void Form1_Load ( object sender , EventArgs e ) { Font = new Font ( FontFamily.GenericMonospace , 12 , FontStyle.Regular , GraphicsUnit.Pixel ) ; } protected override void OnGotFocus ( EventArgs e ) { Windows.CreateCaret ( Handle , ( IntPtr ) 0 , 2 , ( int ) Font.Height ) ; Windows.ShowCaret ( Handle ) ; UpdateCaretPosition ( ) ; base.OnGotFocus ( e ) ; } protected void UpdateCaretPosition ( ) { Windows.SetCaretPos ( Padding.Left + ( Position * AveCharWidth ) , Padding.Top ) ; } protected override void OnLostFocus ( EventArgs e ) { Windows.HideCaret ( Handle ) ; Windows.DestroyCaret ( ) ; base.OnLostFocus ( e ) ; } protected override void OnPaint ( PaintEventArgs e ) { e.Graphics.DrawString ( TestString , Font , SystemBrushes.WindowText , new PointF ( Padding.Left , Padding.Top ) ) ; } protected override bool IsInputKey ( Keys keyData ) { switch ( keyData ) { case Keys.Right : case Keys.Left : return true ; } return base.IsInputKey ( keyData ) ; } protected override void OnKeyDown ( KeyEventArgs e ) { switch ( e.KeyCode ) { case Keys.Left : Position = Math.Max ( Position - 1 , 0 ) ; UpdateCaretPosition ( ) ; break ; case Keys.Right : Position = Math.Min ( Position + 1 , TestString.Length ) ; UpdateCaretPosition ( ) ; break ; } base.OnKeyDown ( e ) ; } protected int GetFontWidth ( ) { int AverageCharWidth = 0 ; using ( var graphics = this.CreateGraphics ( ) ) { try { Windows.TEXTMETRIC tm ; var hdc = graphics.GetHdc ( ) ; IntPtr hFont = this.Font.ToHfont ( ) ; IntPtr hOldFont = Windows.SelectObject ( hdc , hFont ) ; var a = Windows.GetTextMetrics ( hdc , out tm ) ; var b = Windows.SelectObject ( hdc , hOldFont ) ; var c = Windows.DeleteObject ( hFont ) ; AverageCharWidth = tm.tmAveCharWidth ; } catch { } finally { graphics.ReleaseHdc ( ) ; } } return AverageCharWidth ; } } public static class Windows { [ Serializable , StructLayout ( LayoutKind.Sequential , CharSet = CharSet.Auto ) ] public struct TEXTMETRIC { public int tmHeight ; public int tmAscent ; public int tmDescent ; public int tmInternalLeading ; public int tmExternalLeading ; public int tmAveCharWidth ; public int tmMaxCharWidth ; public int tmWeight ; public int tmOverhang ; public int tmDigitizedAspectX ; public int tmDigitizedAspectY ; public short tmFirstChar ; public short tmLastChar ; public short tmDefaultChar ; public short tmBreakChar ; public byte tmItalic ; public byte tmUnderlined ; public byte tmStruckOut ; public byte tmPitchAndFamily ; public byte tmCharSet ; } [ DllImport ( `` user32.dll '' ) ] public static extern bool CreateCaret ( IntPtr hWnd , IntPtr hBitmap , int nWidth , int nHeight ) ; [ DllImport ( `` User32.dll '' ) ] public static extern bool SetCaretPos ( int x , int y ) ; [ DllImport ( `` User32.dll '' ) ] public static extern bool DestroyCaret ( ) ; [ DllImport ( `` User32.dll '' ) ] public static extern bool ShowCaret ( IntPtr hWnd ) ; [ DllImport ( `` User32.dll '' ) ] public static extern bool HideCaret ( IntPtr hWnd ) ; [ DllImport ( `` gdi32.dll '' , CharSet = CharSet.Auto ) ] public static extern bool GetTextMetrics ( IntPtr hdc , out TEXTMETRIC lptm ) ; [ DllImport ( `` gdi32.dll '' ) ] public static extern IntPtr SelectObject ( IntPtr hdc , IntPtr hgdiobj ) ; [ DllImport ( `` GDI32.dll '' ) ] public static extern bool DeleteObject ( IntPtr hObject ) ; }"
"public String Replace ( String oldValue , String newValue ) ; string s = ReplaceInternal ( oldValue , newValue ) ;"
"create table Froms ( Id int identity ( 1 , 1 ) not null , Guid [ uniqueidentifier ] not null , constraint [ PK_Froms ] primary key clustered ( Id asc ) ) gocreate table Tos ( Id int not null , Guid [ uniqueidentifier ] not null , constraint [ PK_Tos ] primary key clustered ( Id asc ) ) go set nocount ondeclare @ i int = 0while @ i < 10000begin insert Froms ( Guid ) values ( newid ( ) ) set @ i += 1endgo using System ; namespace TestForEachAsync { public class From { public int Id { get ; set ; } public Guid Guid { get ; set ; } } } using System ; namespace TestForEachAsync { public class To { public int Id { get ; set ; } public Guid Guid { get ; set ; } } } using Microsoft.EntityFrameworkCore ; namespace TestForEachAsync { public class Context : DbContext { public DbSet < From > Froms { get ; set ; } public DbSet < To > Tos { get ; set ; } protected override void OnConfiguring ( DbContextOptionsBuilder optionsBuilder ) { optionsBuilder.UseSqlServer ( `` YOUR_CONNECTION_STRING '' ) ; } } } using System ; using System.Linq ; using System.Threading.Tasks ; using Microsoft.EntityFrameworkCore ; namespace TestForEachAsync { internal class Program { private static async Task Main ( string [ ] args ) { //Get the `` froms '' var selectContext = new Context ( ) ; var froms = selectContext.Froms.Select ( f = > new { f.Id , f.Guid } ) ; int count = 0 ; Task < int > saveChangesTask = null ; Context insertContext = new Context ( ) ; Context prevInsertContext = null ; //Iterate through `` froms '' await froms.ForEachAsync ( async f = > { //Add instace of `` to '' to the context var to = new To { Id = f.Id , Guid = f.Guid } ; await insertContext.Tos.AddAsync ( to ) ; count++ ; //If another 100 of `` to '' s has been added to the context ... if ( count % 100 == 0 ) { //Wait for the previous 100 `` to '' s to finish saving to the database if ( saveChangesTask ! = null ) { await saveChangesTask ; } //Start saving the next 100 `` to '' s saveChangesTask = insertContext.SaveChangesAsync ( ) ; //Dispose of the context that was used to save previous 100 `` to '' s prevInsertContext ? .Dispose ( ) ; //Reassign the context used to save the current 100 `` to '' s to a `` prev '' variable , //and set context variable to the new Context instance . prevInsertContext = insertContext ; insertContext = new Context ( ) ; } } ) ; //Wait for second last 100 `` to '' s to finish saving to the database if ( saveChangesTask ! = null ) { await saveChangesTask ; } //Save the last 100 `` to '' s to the database await insertContext.SaveChangesAsync ( ) ; insertContext.Dispose ( ) ; Console.WriteLine ( `` Done '' ) ; Console.ReadKey ( ) ; } } }"
"T FindById < T , TId > ( TId id ) where T : class , IEntity < TId > where TId : IEquatable < TId > ; int id = 123 ; var myApproval = PartsDC.FindById < Approval , int > ( id ) ; int id = 123 ; var myApproval = PartsDC.FindById < Approval > ( id ) ; public class FindIdWrapper < T > where T : class { public readonly IDataContext InvokeOn ; public FindIdWrapper ( IDataContext invokeOn ) { InvokeOn = invokeOn ; } T ById < TId > ( TId id ) where TId : IEquatable < TId > { return InvokeOn.FindById < T , TId > ( id ) ; } } public static class DataContextExtensions { public static FindIdWrapper < T > Find < T > ( this IDataContext dataContext ) where T : class , IEntity { return new FindIdWrapper < T > ( dataContext ) ; } }"
"[ Flags ] public enum MyEnum { Unknown = 0 , Type1 = 1 , Type2 = 2 , Type3 = 4 , Type4 = 8 , Type5 = 16 } MyEnum enumerationSet = MyEnum.Type1 | MyEnum.Type2 if ( enumerationSet.HasFlag ( MyEnum.Type1 ) ) { // Do something } Console.WriteLine ( `` { 0 } '' , enumerationSet ) ; Type1 , Type2 MyEnum.Type1 | MyEnum.Type2 == 3 List < MyEnum > myEnumSetList = MyEnum.GetSet ( 3 )"
/// < summary > /// Implementations represent a configuration with a specific data /// type < see cref= '' T '' / > that can be used by this application./// < /summary > internal interface IConfiguration < T > { }
"IFormatter formatter = new BinaryFormatter ( ) ; Stream stream = new FileStream ( `` MyFile.lvl '' , FileMode.Create , FileAccess.Write , FileShare.None ) ; formatter.Serialize ( stream , Globals.CurrentLevel ) ; stream.Close ( ) ;"
"using System ; using System.Windows.Forms ; namespace SlowLVRendering { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; this.Load += new System.EventHandler ( this.Form1_Load ) ; } private void Form1_Load ( object sender , EventArgs e ) { const string slow = `` ヽ ( ´。㉨° ) ﾉ Ƹ̴Ӂ̴Ʒ~ ღ ( ヽ ( ´。㉨° ) ﾉ ༼ つ´º㉨º ༽つ ) ( 」ﾟヘﾟ ) 」ヽ ( ´。㉨° ) ﾉ Ƹ̴Ӂ̴Ʒ~ ღ ( ヽ ( ´。㉨° ) ﾉ ༼ つ´º㉨º ༽つ ) ( 」ﾟヘﾟ ) 」 '' ; ListView lv = new ListView ( ) ; lv.Dock = DockStyle.Fill ; lv.View= View.Details ; for ( int i = 0 ; i < 2 ; i++ ) lv.Columns.Add ( `` Title `` +i , 500 ) ; for ( int i = 0 ; i < 10 ; i++ ) { var lvi = lv.Items.Add ( slow ) ; lvi.SubItems.Add ( slow ) ; } Controls.Add ( lv ) ; } } }"
"public class Parent { // Other properties ... public IList < Child > Children { get ; set ; } } public IEnumerable < Parent > DoStuff ( ) { var result = DoOtherStuff ( ) // Returns IEnumerable < Parent > .OrderByDescending ( SomePredicate ) .ThenBy ( AnotherPredicate ) ; // This sorting works as expected in the return value . foreach ( Parent parent in result ) { parent.Children = parent.Children.OrderBy ( YetAnotherPredicate ) .ToList ( ) ; // When I look at parent.Children here in the debugger , it 's sorted properly . } return result ; // When I look at the return value , the Children are not sorted . } var result = DoOtherStuff ( ) .OrderByDescending ( SomePredicate ) .ThenBy ( AnotherPredicate ) .ToList ( ) ; // < -- Added ToList here"
"< ! -- language : lang-php -- > str = 123 ; $ fp = fopen ( `` /home/prod/publickey.pem '' , `` r '' ) ; $ cert = fread ( $ fp , 8192 ) ; fclose ( $ fp ) ; $ pk1 = openssl_get_publickey ( $ cert ) ; openssl_seal ( $ str , $ sealed , $ ekeys , array ( $ pk1 ) ) ; openssl_free_key ( $ pk1 ) ; $ sealed = base64_encode ( $ sealed ) ; $ Xevk = base64_encode ( $ ekeys [ 0 ] ) ; echo $ Xevk . `` \n\n\n '' . $ sealed ; < ! -- language : c # -- > public static string DecryptSSL ( string str ) { string [ ] strs = System.Text.RegularExpressions.Regex.Split ( str , `` \n\n\n '' ) ; X509Certificate2 myCert2 = null ; RSACryptoServiceProvider rsa = null ; try { myCert2 = new X509Certificate2 ( Properties.Resources.mycertkey , `` '' ) ; rsa = ( RSACryptoServiceProvider ) myCert2.PrivateKey ; } catch ( Exception e ) { Console.WriteLine ( e.Message ) ; } byte [ ] xkey = rsa.Decrypt ( Convert.FromBase64String ( strs [ 0 ] ) , false ) ; byte [ ] content = Convert.FromBase64String ( strs [ 1 ] ) ; EncDec.RC4 ( ref content , xkey ) ; return System.Convert.ToBase64String ( content ) ; } public static void RC4 ( ref Byte [ ] bytes , Byte [ ] key ) { Byte [ ] s = new Byte [ 256 ] ; Byte [ ] k = new Byte [ 256 ] ; Byte temp ; int i , j ; for ( i = 0 ; i < 256 ; i++ ) { s [ i ] = ( Byte ) i ; k [ i ] = key [ i % key.GetLength ( 0 ) ] ; } j = 0 ; for ( i = 0 ; i < 256 ; i++ ) { j = ( j + s [ i ] + k [ i ] ) % 256 ; temp = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = temp ; } i = j = 0 ; for ( int x = 0 ; x < bytes.GetLength ( 0 ) ; x++ ) { i = ( i + 1 ) % 256 ; j = ( j + s [ i ] ) % 256 ; temp = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = temp ; int t = ( s [ i ] + s [ j ] ) % 256 ; bytes [ x ] ^= s [ t ] ; } }"
public int GetSize < T > ( ) { return sizeof ( T ) ; //this wont work because T is n't assigned but is there a way to do this } public int GetSize < T > ( ) { if ( typeof ( T ) == typeof ( byte ) || typeof ( T ) == typeof ( sbyte ) ) { return 1 ; } else if ( typeof ( T ) == typeof ( short ) || typeof ( T ) == typeof ( ushort ) || typeof ( T ) == typeof ( char ) ) { return 2 ; } //and so on . }
var reportList = new List < StocksHeldInCustody > ( ) ; foreach ( var correctDepotHolding in correctDepotHoldings ) { var reportLine = new StocksHeldInCustody ( ) ; reportLine.ClientNo = correctDepotHolding.ClientNo ; reportLine.Value = correctDepotHolding.ValueOfStock ; reportLine.Depot = correctDepotHolding.Depot ; reportLine.SEDOL = correctDepotHolding.StockCode ; reportLine.Units = correctDepotHolding.QuantityHeld ; reportLine.Custodian = `` Unknown '' ; reportLine.StockName = correctDepotHolding.StockR1.Trim ( ) + `` `` + correctDepotHolding.StockR2.Trim ( ) ; //Get custodian info foreach ( var ccHolding in ccHoldList ) { if ( correctDepotHolding.ClientNo ! = ccHolding.ClientNo ) continue ; if ( correctDepotHolding.Depot ! = ccHolding.Depot ) continue ; if ( correctDepotHolding.StockCode ! = ccHolding.StockCode ) continue ; if ( correctDepotHolding.QuantityHeld ! = ccHolding.QuantityHeld ) continue ; reportLine.Custodian = ccHolding.Custodian ; break ; } reportList.Add ( reportLine ) ; }
public class Sample { public string name { get ; set ; } public int price { get ; set } } Sample sampleA = new Sample ( ) ; sampleA.name = `` test '' ; Sample sampleB = new Sample ( ) ; sampleB.price = 100 ; Sample sampleC = sampleA + sampleB ; sampleC.name = `` test '' ; sampleC.price = 100 ;
"public IList < Role > GetRoles ( string username ) { var login = GetLoginForUser ( username ) ; return ! login.Groups.Any ( ) ? new List < Role > ( ) : login.Groups.SelectMany ( x = > x.Roles ) .OrderBy ( x = > x.DisplayName ) .ToList ( ) ; } System.Collections.Generic.Dictionary ` 2 [ [ System.__Canon , mscorlib ] , [ System.Nullable ` 1 [ [ System.Int32 , mscorlib ] ] , mscorlib ] ] .FindEntry ( System.__Canon ) +129 System.Collections.Generic.Dictionary ` 2 [ [ System.__Canon , mscorlib ] , [ System.Nullable ` 1 [ [ System.Int32 , mscorlib ] ] , mscorlib ] ] .TryGetValue ( System.__Canon , System.Nullable ` 1 < Int32 > ByRef ) +12 NHibernate.AdoNet.ColumnNameCache.GetIndexForColumnName ( System.String , NHibernate.AdoNet.ResultSetWrapper ) +25 NHibernate.AdoNet.ColumnNameCache.GetIndexForColumnName ( System.String , NHibernate.AdoNet.ResultSetWrapper ) +25 NHibernate.AdoNet.ResultSetWrapper.GetOrdinal ( System.String ) +e NHibernate.AdoNet.ResultSetWrapper.GetOrdinal ( System.String ) +e NHibernate.Type.NullableType.NullSafeGet ( System.Data.IDataReader , System.String ) +29 NHibernate.Type.NullableType.NullSafeGet ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor , System.Object ) +16 NHibernate.Type.NullableType.NullSafeGet ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor , System.Object ) +16 NHibernate.Persister.Collection.AbstractCollectionPersister.ReadKey ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor ) +14 NHibernate.Persister.Collection.AbstractCollectionPersister.ReadKey ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor ) +14 NHibernate.Loader.Loader.ReadCollectionElement ( System.Object , System.Object , NHibernate.Persister.Collection.ICollectionPersister , NHibernate.Loader.ICollectionAliases , System.Data.IDataReader , NHibernate.Engine.ISessionImplementor ) +34 NHibernate.Loader.Loader.ReadCollectionElement ( System.Object , System.Object , NHibernate.Persister.Collection.ICollectionPersister , NHibernate.Loader.ICollectionAliases , System.Data.IDataReader , NHibernate.Engine.ISessionImplementor ) +34 NHibernate.Loader.Loader.ReadCollectionElements ( System.Object [ ] , System.Data.IDataReader , NHibernate.Engine.ISessionImplementor ) +d2 NHibernate.Loader.Loader.ReadCollectionElements ( System.Object [ ] , System.Data.IDataReader , NHibernate.Engine.ISessionImplementor ) +d2 NHibernate.Loader.Loader.GetRowFromResultSet ( System.Data.IDataReader , NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , NHibernate.LockMode [ ] , NHibernate.Engine.EntityKey , System.Collections.IList , NHibernate.Engine.EntityKey [ ] , Bo+ab NHibernate.Loader.Loader.GetRowFromResultSet ( System.Data.IDataReader , NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , NHibernate.LockMode [ ] , NHibernate.Engine.EntityKey , System.Collections.IList , NHibernate.Engine.EntityKey [ ] , Bo+ab NHibernate.Loader.Loader.DoQuery ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +1e7 NHibernate.Loader.Loader.DoQuery ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +1e7 NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +7f NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +7f NHibernate.Loader.Loader.LoadCollection ( NHibernate.Engine.ISessionImplementor , System.Object , NHibernate.Type.IType ) +de NHibernate.Loader.Loader.LoadCollection ( NHibernate.Engine.ISessionImplementor , System.Object , NHibernate.Type.IType ) +de NHibernate.Loader.Collection.CollectionLoader.Initialize ( System.Object , NHibernate.Engine.ISessionImplementor ) +1c NHibernate.Loader.Collection.CollectionLoader.Initialize ( System.Object , NHibernate.Engine.ISessionImplementor ) +1c NHibernate.Persister.Collection.AbstractCollectionPersister.Initialize ( System.Object , NHibernate.Engine.ISessionImplementor ) +1e NHibernate.Persister.Collection.AbstractCollectionPersister.Initialize ( System.Object , NHibernate.Engine.ISessionImplementor ) +1e NHibernate.Event.Default.DefaultInitializeCollectionEventListener.OnInitializeCollection ( NHibernate.Event.InitializeCollectionEvent ) +16d NHibernate.Impl.SessionImpl.InitializeCollection ( NHibernate.Collection.IPersistentCollection , Boolean ) +1fa NHibernate.Collection.AbstractPersistentCollection.Initialize ( Boolean ) +2f NHibernate.Collection.AbstractPersistentCollection.Read ( ) +d NHibernate.Collection.Generic.PersistentGenericBag ` 1 [ [ System.__Canon , mscorlib ] ] .System.Collections.Generic.IEnumerable < T > .GetEnumerator ( ) +11 System_Core_ni ! System.Linq.Enumerable+ < SelectManyIterator > d__14 ` 2 [ [ System.__Canon , mscorlib ] , [ System.__Canon , mscorlib ] ] .MoveNext ( ) +10c System_Core_ni ! System.Linq.Buffer ` 1 [ [ System.__Canon , mscorlib ] ] ..ctor ( System.Collections.Generic.IEnumerable ` 1 < System.__Canon > ) +d9 System_Core_ni ! System.Linq.OrderedEnumerable ` 1+ < GetEnumerator > d__0 [ [ System.__Canon , mscorlib ] ] .MoveNext ( ) +6f System_Core_ni ! System.Linq.OrderedEnumerable ` 1+ < GetEnumerator > d__0 [ [ System.__Canon , mscorlib ] ] .MoveNext ( ) +6f mscorlib_ni ! System.Collections.Generic.List ` 1 [ [ System.__Canon , mscorlib ] ] ..ctor ( System.Collections.Generic.IEnumerable ` 1 < System.__Canon > ) +17e System_Core_ni ! System.Linq.Enumerable.ToList [ [ System.__Canon , mscorlib ] ] ( System.Collections.Generic.IEnumerable ` 1 < System.__Canon > ) +3b Company.ApplicationServices.SecurityService.GetRoles ( System.String ) +ef var cfg = Fluently.Configure ( ) .Database ( MsSqlConfiguration.MsSql2008.ConnectionString ( c = > c.FromConnectionStringWithKey ( `` DatabaseConnectionString '' ) ) .CurrentSessionContext < WebSessionContext > ( ) // ... etc etc ... . .Cache ( c = > c.ProviderClass < NHibernate.Caches.SysCache2.SysCacheProvider > ( ) .UseQueryCache ( ) .UseSecondLevelCache ( ) .UseMinimalPuts ( ) ) ; For < NHibernate.Cfg.Configuration > ( ) .Singleton ( ) .Use ( cfg ) ; For < NHibernate.ISessionFactory > ( ) .Singleton ( ) .Use ( ctx = > { try { var config = ctx.GetInstance < NHibernate.Cfg.Configuration > ( ) ; return config.BuildSessionFactory ( ) ; } catch ( SqlException ex ) { ctx.GetInstance < IExceptionLogger > ( ) .Error ( ex ) ; throw ; } } ) ; For < NHibernate.ISession > ( ) .HybridHttpOrThreadLocalScoped ( ) .Use ( ctx = > ctx.GetInstance < NHibernate.ISessionFactory > ( ) .OpenSession ( ) ) ; public class SecurityService : ISecurityService { private readonly IRepository < Login > loginRepository ; public IList < Role > GetCurrentUserRoles ( ) { var login = GetLoginForCurrentUser ( ) ; return GetRoles ( login.Name ) ; } public Login GetLoginForCurrentUser ( ) { //Some logic to derive the current UserId { guid } via some resources injected into this service class . return loginRepository.GetReference ( loginId ) ; } } public class NHibernateRepository < T > : IRepository < T > where T : class { protected ISession Session { get ; set ; } public NHibernateRepository ( ISession session ) { Session = session ; } public T GetReference ( object id ) { return Session.Get < T > ( id ) ; } // Other methods typical of a repository class , nothing special } For < ISecurityService > ( ) .Use < SecurityService > ( ) ; For ( typeof ( IRepository < > ) ) .Use ( typeof ( NHibernateRepository < > ) ) ; //And then the ISession is commented above . System.Collections.Generic.Dictionary ` 2 [ [ System.__Canon , mscorlib ] , [ System.Nullable ` 1 [ [ System.Int32 , mscorlib ] ] , mscorlib ] ] .FindEntry ( System.__Canon ) +129 System.Collections.Generic.Dictionary ` 2 [ [ System.__Canon , mscorlib ] , [ System.Nullable ` 1 [ [ System.Int32 , mscorlib ] ] , mscorlib ] ] .TryGetValue ( System.__Canon , System.Nullable ` 1 ByRef ) +12 NHibernate.AdoNet.ColumnNameCache.GetIndexForColumnName ( System.String , NHibernate.AdoNet.ResultSetWrapper ) +25 NHibernate.AdoNet.ResultSetWrapper.GetOrdinal ( System.String ) +e NHibernate.Type.NullableType.NullSafeGet ( System.Data.IDataReader , System.String ) +29 NHibernate.Type.NullableType.NullSafeGet ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor , System.Object ) +16 NHibernate.Type.AbstractType.Hydrate ( System.Data.IDataReader , System.String [ ] , NHibernate.Engine.ISessionImplementor , System.Object ) +14 NHibernate.Persister.Entity.AbstractEntityPersister.Hydrate ( System.Data.IDataReader , System.Object , System.Object , NHibernate.Persister.Entity.ILoadable , System.String [ ] [ ] , Boolean , NHibernate.Engine.ISessionImplementor ) +3ce NHibernate.Loader.Loader.LoadFromResultSet ( System.Data.IDataReader , Int32 , System.Object , System.String , NHibernate.Engine.EntityKey , System.String , NHibernate.LockMode , NHibernate.Persister.Entity.ILoadable , NHibernate.Engine.ISessionImplementor ) +118 NHibernate.Loader.Loader.InstanceNotYetLoaded ( System.Data.IDataReader , Int32 , NHibernate.Persister.Entity.ILoadable , NHibernate.Engine.EntityKey , NHibernate.LockMode , System.String , NHibernate.Engine.EntityKey , System.Object , System.Collections.IList , NHi+8c NHibernate.Loader.Loader.GetRow ( System.Data.IDataReader , NHibernate.Persister.Entity.ILoadable [ ] , NHibernate.Engine.EntityKey [ ] , System.Object , NHibernate.Engine.EntityKey , NHibernate.LockMode [ ] , System.Collections.IList , NHibernate.Engine.ISessionImpleme+129 NHibernate.Loader.Loader.GetRowFromResultSet ( System.Data.IDataReader , NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , NHibernate.LockMode [ ] , NHibernate.Engine.EntityKey , System.Collections.IList , NHibernate.Engine.EntityKey [ ] , Bo+97 NHibernate.Loader.Loader.DoQuery ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +1e7 NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections ( NHibernate.Engine.ISessionImplementor , NHibernate.Engine.QueryParameters , Boolean ) +7f NHibernate.Loader.Loader.LoadEntity ( NHibernate.Engine.ISessionImplementor , System.Object , NHibernate.Type.IType , System.Object , System.String , System.Object , NHibernate.Persister.Entity.IEntityPersister ) +f3 NHibernate.Loader.Entity.AbstractEntityLoader.Load ( NHibernate.Engine.ISessionImplementor , System.Object , System.Object , System.Object ) +22 NHibernate.Loader.Entity.AbstractEntityLoader.Load ( System.Object , System.Object , NHibernate.Engine.ISessionImplementor ) +12 NHibernate.Persister.Entity.AbstractEntityPersister.Load ( System.Object , System.Object , NHibernate.LockMode , NHibernate.Engine.ISessionImplementor ) +69 NHibernate.Event.Default.DefaultLoadEventListener.LoadFromDatasource ( NHibernate.Event.LoadEvent , NHibernate.Persister.Entity.IEntityPersister , NHibernate.Engine.EntityKey , NHibernate.Event.LoadType ) +84 NHibernate.Event.Default.DefaultLoadEventListener.DoLoad ( NHibernate.Event.LoadEvent , NHibernate.Persister.Entity.IEntityPersister , NHibernate.Engine.EntityKey , NHibernate.Event.LoadType ) +1d7 NHibernate.Event.Default.DefaultLoadEventListener.Load ( NHibernate.Event.LoadEvent , NHibernate.Persister.Entity.IEntityPersister , NHibernate.Engine.EntityKey , NHibernate.Event.LoadType ) +5e NHibernate.Event.Default.DefaultLoadEventListener.ReturnNarrowedProxy ( NHibernate.Event.LoadEvent , NHibernate.Persister.Entity.IEntityPersister , NHibernate.Engine.EntityKey , NHibernate.Event.LoadType , NHibernate.Engine.IPersistenceContext , System.Object ) +73 NHibernate.Event.Default.DefaultLoadEventListener.ProxyOrLoad ( NHibernate.Event.LoadEvent , NHibernate.Persister.Entity.IEntityPersister , NHibernate.Engine.EntityKey , NHibernate.Event.LoadType ) +cb NHibernate.Event.Default.DefaultLoadEventListener.OnLoad ( NHibernate.Event.LoadEvent , NHibernate.Event.LoadType ) +120 NHibernate.Impl.SessionImpl.FireLoad ( NHibernate.Event.LoadEvent , NHibernate.Event.LoadType ) +140 NHibernate.Impl.SessionImpl.Get ( System.String , System.Object ) +148 NHibernate.Impl.SessionImpl.Get ( System.Type , System.Object ) +121 NHibernate.Impl.SessionImpl.Get [ [ System.__Canon , mscorlib ] ] ( System.Object ) +143 Intellitive.Data.Repositories.NHibernateRepository ` 1 [ [ System.__Canon , mscorlib ] ] .GetReference ( System.Object ) +38"
< ? xml version= '' 1.0 '' ? > < SOAP-ENV : Envelope xmlns : SOAP-ENV= '' http : //schemas.xmlsoap.org/soap/envelope/ '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : SOAP-ENC= '' http : //schemas.xmlsoap.org/soap/encoding/ '' > < SOAP-ENV : Body SOAP-ENV : encodingStyle= '' http : //schemas.xmlsoap.org/soap/encoding/ '' xmlns : NS2= '' http : //tempuri.org/ '' > < NS1 : SomeTagName xmlns : NS1= '' http : //tempuri.org/ '' > < SomeID xsi : type= '' xsd : int '' > 12345 < /SomeID > < SomeStatus xsi : type= '' NS2 : SomeStatusType '' > SOME_OK_STATUS < /SomeStatus > < /NS1 : SomeTagName > < /SOAP-ENV : Body > < /SOAP-ENV : Envelope > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < s : Envelope xmlns : s= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < s : Body > < SomeTagName xmlns= '' http : //tempuri.org/ '' > < SomeID > 12345 < /SomeID > < SomeStatus > SOME_OK_STATUS < /SomeStatus > < /SomeTagName > < /s : Body > < /s : Envelope >
"public List < Lesson > GetLessonsFromDay ( string Day ) { command.CommandText = `` SELECT * FROM [ Scadule ] WHERE [ day ] = ' '' + Day + `` ' '' ; con.Open ( ) ; SqlDataReader sdr = command.ExecuteReader ( ) ; List < Lesson > lessons = new List < Lesson > ( ) ; while ( sdr.Read ( ) ) { lessons.Add ( new Lesson ( Day , ( int ) sdr [ `` [ num ] '' ] , ( string ) sdr [ `` [ time ] '' ] , ( string ) sdr [ `` [ class ] '' ] , ( string ) sdr [ `` [ where ] '' ] ) ) ; } con.Close ( ) ; return lessons ; } public class Lesson { public Lesson ( string Day , int Num , string Time , string Class , string Where ) { this.Day = Day ; this.Num = Num ; this.Time = Time ; this.Class = Class ; this.Where = Where ; } public string Day { get ; set ; } public int Num { get ; set ; } public string Time { get ; set ; } public string Class { get ; set ; } public string Where { get ; set ; } }"
"public static Fix64 operator * ( Fix64 x , Fix64 y ) { var xl = x.m_rawValue ; // underlying long of x var yl = y.m_rawValue ; // underlying long of y var xlow = xl & 0x00000000FFFFFFFF ; // take the 32 lowest bits of x var xhigh = xl > > 32 ; // take the 32 highest bits of x var ylow = yl & 0x00000000FFFFFFFF ; // take the 32 lowest bits of y var yhigh = yl > > 32 ; // take the 32 highest bits of y // perform multiplications var lowlow = xlow * ylow ; var lowhigh = xlow * yhigh ; var highlow = xhigh * ylow ; var highhigh = xhigh * yhigh ; // take the highest bits of lowlow and the lowest of highhigh var loResult = lowlow > > 32 ; var midResult1 = lowhigh ; var midResult2 = highlow ; var hiResult = highhigh < < 32 ; // add everything together and build result var finalResult = loResult + midResult1 + midResult2 + hiResult ; return new Fix64 ( finalResult ) ; // this constructor just copies the parameter into m_rawValue } Failed for FromRaw ( -1 ) * FromRaw ( -1 ) : expected 0 but got -1Failed for FromRaw ( -4 ) * FromRaw ( 6791302811978701836 ) : expected -1.4726290525868535041809082031 but got -2,4726290525868535041809082031Failed for FromRaw ( 2265950765 ) * FromRaw ( 17179869183 ) : expected 2.1103311001788824796676635742 but got 1,1103311001788824796676635742"
IEnumerable < T > items = listOfItems.Where ( d = > d is T ) .Cast < T > ( ) ; IEnumerable < T > items = listOfItems.OfType < T > ( ) ;
switch ( value ) { case `` 1 '' : mode = Mode.One ; break ; case `` 2 '' : mode = Mode.Two ; break ; } switch ( value ) { case `` 1 '' : mode = Mode.One ; break ; case `` 2 '' : mode = Mode.Two ; break ; }
"void Main ( ) { SynchronizationContext.SetSynchronizationContext ( new FooContext ( ) ) ; Action a = ( ) = > { var current = SynchronizationContext.Current ; //current is null here } ; a.BeginInvoke ( null , null ) ; ... sleep"
using ( var ms = new MemoryStream ( ) ) { using ( var writer = BinaryWriter ( ms ) ) { writer.Write ( /*something*/ ) ; writer.Flush ( ) ; } Assert.That ( ms.Length > 0 ) ; // Throws ObjectDisposedException }
if ( x==x++ ) //Always returns true if ( x.Equals ( x++ ) ) //Always returns false int x=0 ; int y=0 ; if ( x.Equals ( y++ ) ) // Returns True
"//Assume predicates is passed as a method argument.// of List < Expression < Func < T , bool > > > //Assume user is passed in as a method argument.//Assume FilterToUserAccess is a custom extension method that restricts the dataset// to access restrictions.var query = _dbContext.Set < EntityType > ( ) .FilterToUserAccess ( user ) ; foreach ( var p in predicates ) { query = query.Where ( p ) ; } return p.ToList ( ) ; //Assume predicates is passed as a method argument.// of List < Expression < Func < T , bool > > > //Assume user is passed in as a method argument.//Assume FilterToUserAccess is a custom extension method that restricts the dataset// to access restrictions.var query = _dbContext.Set < EntityType > ( ) .FilterToUserAccess ( user ) ; foreach ( var p in predicates ) { query = query.Or ( p ) ; } return p.ToList ( ) ; _dbContext.Set < EntityType > ( ) .Where ( predicate1 || predicate2 || predicate3 )"
.HasColumnType ( `` datetime2 '' )
"{ `` bugs '' : { `` 12345 '' : { `` comments '' : [ { `` id '' : 1 , `` text '' : `` Description 1 '' } , { `` id '' : 2 , `` text '' : `` Description 2 '' } ] } } } public class Comment { public int id { get ; set ; } public string text { get ; set ; } } public class 12345 { public IList < Comment > comments { get ; set ; } } public class Bugs { public 12345 12345 { get ; set ; } } public class Root { public Bugs bugs { get ; set ; } } public class Comment { public int id { get ; set ; } public string text { get ; set ; } } public class __invalid_type__12345 { public List < Comment > comments { get ; set ; } } public class Bugs { public __invalid_type__12345 __invalid_name__12345 { get ; set ; } } public class RootObject { public Bugs bugs { get ; set ; } }"
"using ( var request = new WebClient ( ) ) { request.Credentials = new NetworkCredential ( `` username '' , `` password '' ) ; return request.DownloadData ( mantisAtt.download_url ) ; }"
"List < struct { string , string , double } > L = new List < struct { string , string , double } > ; L.Add ( { `` hi '' , `` mom '' , 5.0 } ) ;"
"public HttpResponseMessage LogIn ( LoginModel model ) { if ( ModelState.IsValid ) { if ( User.Identity.IsAuthenticated ) { return Request.CreateResponse ( HttpStatusCode.Conflict , `` already logged in . `` ) ; } if ( WebSecurity.Login ( model.UserName , model.Password , persistCookie : model.RememberMe ) ) { FormsAuthentication.SetAuthCookie ( model.UserName , model.RememberMe ) ; return Request.CreateResponse ( HttpStatusCode.OK , `` logged in successfully '' ) ; } else { return new HttpResponseMessage ( HttpStatusCode.Unauthorized ) ; } } // If we got this far , something failed return new HttpResponseMessage ( HttpStatusCode.InternalServerError ) ; } public HttpResponseMessage LogOut ( ) { if ( User.Identity.IsAuthenticated ) { WebSecurity.Logout ( ) ; return Request.CreateResponse ( HttpStatusCode.OK , `` logged out successfully . `` ) ; } return Request.CreateResponse ( HttpStatusCode.Conflict , `` already done . `` ) ; }"
"namespace ClassInsideStruct { class ClassInsideStruct { static void Main ( string [ ] args ) { ValueType ObjVal = new ValueType ( 10 ) ; ObjVal.Display ( ) ; ValueType.ReferenceType ObjValRef = new ValueType.ReferenceType ( 10 ) ; ObjValRef.Display ( ) ; Test ( ObjVal , ObjValRef ) ; ObjVal.Display ( ) ; ObjValRef.Display ( ) ; Console.ReadKey ( ) ; } private static void Test ( ValueType v , ValueType.ReferenceType r ) { v.SValue = 50 ; r.RValue = 50 ; } } struct ValueType { int StructNum ; ReferenceType ObjRef ; public ValueType ( int i ) { StructNum = i ; ObjRef = new ReferenceType ( i ) ; } public int SValue { get { return StructNum ; } set { StructNum = value ; ObjRef.RValue = value ; } } public void Display ( ) { Console.WriteLine ( `` ValueType : `` + StructNum ) ; Console.Write ( `` ReferenceType Inside ValueType Instance : `` ) ; ObjRef.Display ( ) ; } public class ReferenceType { int ClassNum ; public ReferenceType ( int i ) { ClassNum = i ; } public void Display ( ) { Console.WriteLine ( `` Reference Type : `` + ClassNum ) ; } public int RValue { get { return ClassNum ; } set { ClassNum = value ; } } } } } ValueType : 10ReferenceType Inside ValueType Instance : Reference Type : 10Reference Type : 10ValueType : 10ReferenceType Inside ValueType Instance : Reference Type : 50Reference Type : 50"
"using System.Windows.Forms ; namespace Test01 { partial class Form1 { /// < summary > /// Required designer variable . /// < /summary > private System.ComponentModel.IContainer components = null ; /// < summary > /// Clean up any resources being used . /// < /summary > /// < param name= '' disposing '' > true if managed resources should be disposed ; otherwise , false. < /param > protected override void Dispose ( bool disposing ) { if ( disposing & & ( components ! = null ) ) { components.Dispose ( ) ; } base.Dispose ( disposing ) ; } # region Windows Form Designer generated code /// < summary > /// Required method for Designer support - do not modify /// the contents of this method with the code editor . /// < /summary > private void InitializeComponent ( ) { this.textBox1 = new System.Windows.Forms.TextBox ( ) ; this.checkBox1 = new System.Windows.Forms.CheckBox ( ) ; this.SuspendLayout ( ) ; // // textBox1 // this.textBox1.Location = new System.Drawing.Point ( 33 , 32 ) ; this.textBox1.Name = `` textBox1 '' ; this.textBox1.Size = new System.Drawing.Size ( 186 , 20 ) ; this.textBox1.TabIndex = 0 ; this.textBox1.Text = `` Text '' ; this.textBox1.TextChanged += new System.EventHandler ( this.textBox1_TextChanged ) ; // // checkBox1 // this.checkBox1.AutoSize = true ; this.checkBox1.Location = new System.Drawing.Point ( 38 , 65 ) ; this.checkBox1.Name = `` checkBox1 '' ; this.checkBox1.Size = new System.Drawing.Size ( 80 , 17 ) ; this.checkBox1.TabIndex = 1 ; this.checkBox1.Text = `` checkBox1 '' ; this.checkBox1.UseVisualStyleBackColor = true ; // // Form1 // this.AutoScaleDimensions = new System.Drawing.SizeF ( 6F , 13F ) ; this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font ; this.ClientSize = new System.Drawing.Size ( 234 , 86 ) ; this.Controls.Add ( this.checkBox1 ) ; this.Controls.Add ( this.textBox1 ) ; this.Name = `` Form1 '' ; this.Text = `` Form1 '' ; this.ResumeLayout ( false ) ; this.PerformLayout ( ) ; } void textBox1_TextChanged ( object sender , System.EventArgs e ) { if ( this.checkBox1.Checked ) this.checkBox1.CheckState = CheckState.Unchecked ; else this.checkBox1.CheckState = CheckState.Checked ; } # endregion private System.Windows.Forms.TextBox textBox1 ; private System.Windows.Forms.CheckBox checkBox1 ; } } namespace Test01 { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } } }"
"at NHibernate.AdoNet.SqlClientBatchingBatcher.DoExecuteBatch ( IDbCommand ps ) at NHibernate.AdoNet.AbstractBatcher.ExecuteBatchWithTiming ( IDbCommand ps ) at NHibernate.AdoNet.AbstractBatcher.ExecuteBatch ( ) at NHibernate.AdoNet.AbstractBatcher.PrepareCommand ( CommandType type , SqlString sql , SqlType [ ] parameterTypes ) at NHibernate.AdoNet.AbstractBatcher.PrepareBatchCommand ( CommandType type , SqlString sql , SqlType [ ] parameterTypes ) at NHibernate.Persister.Entity.AbstractEntityPersister.Insert ( Object id , Object [ ] fields , Boolean [ ] notNull , Int32 j , SqlCommandInfo sql , Object obj , ISessionImplementor session ) at NHibernate.Persister.Entity.AbstractEntityPersister.Insert ( Object id , Object [ ] fields , Object obj , ISessionImplementor session ) at NHibernate.Action.EntityInsertAction.Execute ( ) at NHibernate.Engine.ActionQueue.Execute ( IExecutable executable ) at NHibernate.Engine.ActionQueue.ExecuteActions ( IList list ) at NHibernate.Engine.ActionQueue.ExecuteActions ( ) at NHibernate.Event.Default.AbstractFlushingEventListener.PerformExecutions ( IEventSource session ) at NHibernate.Event.Default.DefaultFlushEventListener.OnFlush ( FlushEvent event ) at NHibernate.Impl.SessionImpl.Flush ( ) at Xena.Database.Main.Listeners.Strategies.CreateEntityAuditTrailStrategy.Execute ( Object criteria ) in K : \Projects\Xena\WorkDir\src\Xena.Database.Main\Listeners\Strategies\CreateEntityAuditTrailStrategy.cs : line 41at Xena.Domain.Rules.Strategies.StrategyExtensions.Execute [ TCriteria ] ( IEnumerable ` 1 strategies , TCriteria criteria ) in K : \Projects\Xena\WorkDir\src\Xena.Domain\Rules\Strategies\RelayStrategy.cs : line 55at NHibernate.Action.EntityInsertAction.PostInsert ( ) at NHibernate.Action.EntityInsertAction.Execute ( ) at NHibernate.Engine.ActionQueue.Execute ( IExecutable executable ) at NHibernate.Engine.ActionQueue.ExecuteActions ( IList list ) at NHibernate.Engine.ActionQueue.ExecuteActions ( ) at NHibernate.Event.Default.AbstractFlushingEventListener.PerformExecutions ( IEventSource session ) at NHibernate.Event.Default.DefaultAutoFlushEventListener.OnAutoFlush ( AutoFlushEvent event ) at NHibernate.Impl.SessionImpl.AutoFlushIfRequired ( ISet ` 1 querySpaces ) at NHibernate.Impl.SessionImpl.List ( CriteriaImpl criteria , IList results ) at NHibernate.Impl.CriteriaImpl.List ( IList results ) at NHibernate.Impl.CriteriaImpl.UniqueResult [ T ] ( ) at Xena.Web.EntityUpdaters.LedgerPostPreviewUpdater.TryCreateNewFiscalEntity ( ISession session , FiscalSetup fiscalSetup , LedgerPostPreview & entity , IEnumerable ` 1 & errors ) in K : \Projects\Xena\WorkDir\src\Xena.Web\EntityUpdaters\LedgerPostPreviewUpdater.cs : line 52at Xena.Web.SecurityContext. < > c__DisplayClass8_0 ` 1. < TrySaveUpdate > b__0 ( ISession session , TEntity & entity , IEnumerable ` 1 & errors ) in K : \Projects\Xena\WorkDir\src\Xena.Web\SecurityContext.cs : line 235at Xena.Web.SecurityContext. < > c__DisplayClass41_0 ` 1. < TrySave > b__0 ( ITransaction tx ) in K : \Projects\Xena\WorkDir\src\Xena.Web\SecurityContext.cs : line 815at Xena.Web.SecurityContext.TryWrapInTransaction [ T ] ( Func ` 2 action , T & result , IEnumerable ` 1 & errors , Boolean alwaysCommit ) in K : \Projects\Xena\WorkDir\src\Xena.Web\SecurityContext.cs : line 804at Xena.Web.SecurityContext.TrySave [ TEntity ] ( IEntityUpdater ` 1 entityUpdater , EntityCreate ` 1 create ) in K : \Projects\Xena\WorkDir\src\Xena.Web\SecurityContext.cs : line 812at Xena.Web.SecurityContext.TrySaveUpdate [ TEntity ] ( IFiscalEntityUpdater ` 1 entityUpdater ) in K : \Projects\Xena\WorkDir\src\Xena.Web\SecurityContext.cs : line 236at Xena.Web.Api.XenaFiscalApiController.WrapSave [ TEntity , TDto ] ( IFiscalEntityUpdater ` 1 updater , Func ` 2 get , Action ` 2 postGet ) in K : \Projects\Xena\WorkDir\src\Xena.Web\Api\Abstract\XenaFiscalApiController.cs : line 35at Xena.Web.Api.ApiLedgerPostPreviewController.Post ( LedgerPostPreviewDto ledgerPostPreview ) in K : \Projects\Xena\WorkDir\src\Xena.Web\Api\ApiLedgerPostPreviewController.cs : line 79at lambda_method ( Closure , Object , Object [ ] ) at System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionExecutor. < > c__DisplayClass10. < GetExecutor > b__9 ( Object instance , Object [ ] methodParameters ) at System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync ( HttpControllerContext controllerContext , IDictionary ` 2 arguments , CancellationToken cancellationToken ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Controllers.ApiControllerActionInvoker. < InvokeActionAsyncCore > d__0.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter ` 1.GetResult ( ) at System.Web.Http.Controllers.ActionFilterResult. < ExecuteAsync > d__2.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Filters.AuthorizationFilterAttribute. < ExecuteAuthorizationFilterAsyncCore > d__2.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter ` 1.GetResult ( ) at System.Web.Http.Dispatcher.HttpControllerDispatcher. < SendAsync > d__1.MoveNext ( ) Message=Violation of PRIMARY KEY constraint 'PK_LedgerPostPreview ' . Can not insert duplicate key in object 'dbo.LedgerPostPreview ' . The duplicate key value is ( 94873244 ) .The statement has been terminated . Reading high value : select next_hifrom hibernate_unique_key with ( updlock , rowlock ) Updating high value : update hibernate_unique_keyset next_hi = 5978 /* @ p0 */where next_hi = 5977 /* @ p1 - next_hi */ public static void MapId < TMapping , TType > ( this TMapping mapping ) where TMapping : ClassMapping < TType > where TType : class , IHasId { mapping.Id ( m = > m.Id , m = > m.Generator ( Generators.HighLow , g = > g.Params ( new { max_lo = 100 } ) ) ) ; } using ( var tx = Session.BeginTransaction ( ) ) { try { var voucherPreview = Session.Get < VoucherPreview > ( voucherPreviewId ) ; //Parent var postPreview = //Factory create with the voucherPreview ; var index = Session.QueryOver < LedgerPostPreview > ( ) .Where ( lpp = > lpp.VoucherPreview == voucherPreview ) .SelectList ( l = > l.SelectMax ( lpp = > lpp.Index ) ) .SingleOrDefault < int > ( ) + 1 postPreview.Index = index ; // Set a few other properties and check validity Session.SaveOrUpdate ( postPreview ) ; } catch ( Exception ex ) { //Errorhandling leading to the above stacktrace } }"
"int [ ] Numbers= new int [ 5 ] { 5,2,3,4,5 } ; var query = from a in Numbers where a== Numbers.Max ( n = > n ) //notice MAX he should also get his value somehow select a ; foreach ( var element in query ) Console.WriteLine ( element ) ;"
"public IEnumerable < List < T > > ReadFile ( ) { foreach ( string filepath in lstOfFiles ) { var stream = new FileStream ( filepath , FileMode.Open , FileAccess.Read ) ; foreach ( var item in ReadStream ( stream ) ) yield return item ; //where item is of type List < string > } } lstOfFiles.AsParallel ( ) .ForAll ( filepath = > { var stream = new FileStream ( filepath , FileMode.Open , FileAccess.Read ) ; foreach ( var item in ReadStream ( Stream ) ) yield return item ; } ) ;"
< RestoreProjectStyle > PackageReference < /RestoreProjectStyle > < AutoGenerateBindingRedirects > true < /AutoGenerateBindingRedirects >
"using System ; using System.Runtime.InteropServices ; namespace Test1 { class Program { [ DllImport ( `` libCoolProp.so '' ) ] private static extern double PropsSI ( string Output , string Name1 , double Prop1 , string Name2 , double Prop2 , string Ref ) ; static void Main ( string [ ] args ) { double propsRes = PropsSI ( `` H '' , `` T '' , 300.0 , `` Q '' , 0.0 , `` R410A '' ) ; Console.WriteLine ( propsRes ) ; } } }"
"decimal d = 2 ; Console.WriteLine ( `` d == 2 = { 0 } '' , d == 2 ) ; Console.WriteLine ( `` d == ( decimal ) 2 = { 0 } '' , d == ( decimal ) 2 ) ; Console.WriteLine ( `` d.Equals ( 2 ) = { 0 } '' , d.Equals ( 2 ) ) ; Console.WriteLine ( `` d.Equals ( ( decimal ) 2 ) = { 0 } '' , d.Equals ( ( decimal ) 2 ) ) ; decimal ? d = 2 ; public override bool Equals ( object other ) { if ( ! this.HasValue ) { return ( other == null ) ; } if ( other == null ) { return false ; } return this.value.Equals ( other ) ; } public bool Equals ( T other ) { if ( ! this.HasValue ) return false ; return this.value.Equals ( other ) ; }"
using ( var context = new BloggingContext ( ) ) { var blog = context.Blogs.Find ( 1 ) ; // Count how many posts the blog has var postCount = context.Entry ( blog ) .Collection ( b = > b.Posts ) .Query ( ) .Count ( ) ; } var blog = context.Blogs.Find ( 1 ) ; var postCount = blog.Posts.Count ( ) ;
"String print = `` 8A9B485ECDC56B6E0FD023D6994A57EEC49B0717 '' ; String newPrint = thumbprint.Trim ( ) .Replace ( `` `` , `` '' ) .ToUpper ( ) ; print '' 8A9B485ECDC56B6E0FD023D6994A57EEC49B0717 '' newPrint '' ‎8A9B485ECDC56B6E0FD023D6994A57EEC49B0717 '' String.Compare ( print , newPrint ) ; 0print == newPrintfalseprint.Equals ( newPrint ) false"
Menu 1 Item 1 Menu 1 Item 2 Menu 1 Item N -- -- -- -- - Menu 2 Item 1 Menu 2 Item 2 Menu 2 Item N
"string item = `` < ? xml version=\ '' 1.0\ '' encoding=\ '' UTF - 8\ '' ? > '' + `` < request > '' + `` < Username > admin < /Username > '' + `` < Password > '' + password + `` < /Password > '' + `` < password_type > 4 < /password_type > '' + `` < /request > `` ; var request = ( HttpWebRequest ) WebRequest.Create ( `` http : //192.168.8.1/api/user/login '' ) ; request.Method = `` POST '' ; request.Headers [ `` _RequestVerificationToken '' ] = Token ; request.Headers [ `` Cookie '' ] = Sess ; byte [ ] bytes = Encoding.UTF8.GetBytes ( item ) ; request.ContentType = `` application/xml ; charset=UTF-8 '' ; request.ContentLength = bytes.Length ; Stream streamreq = request.GetRequestStream ( ) ; streamreq.Write ( bytes , 0 , bytes.Length ) ; streamreq.Close ( ) ; using ( HttpWebResponse response = ( HttpWebResponse ) request.GetResponse ( ) ) using ( StreamReader reader = new StreamReader ( response.GetResponseStream ( ) ) ) { var result = reader.ReadToEnd ( ) ; }"
"class DefaultRandomDateSource : DatasourceBase < DateTime > { private DateTime _MaxDate { get ; set ; } private DateTime _MinDate { get ; set ; } private Random _random { get ; set ; } public DefaultRandomDateSource ( DateTime MaxDate , DateTime MinDate ) { _MaxDate = MaxDate ; _MinDate = MinDate ; } public override DateTime Next ( IGenerationSession session ) { var tspan = _MaxDate - _MinDate ; var rndSpan = new TimeSpan ( 0 , _random.Next ( 0 , ( int ) tspan.TotalMinutes ) , 0 ) ; return _MinDate + rndSpan ; } } IGenerationSessionFactory factory = AutoPocoContainer.Configure ( x = > { x.Conventions ( c = > { c.UseDefaultConventions ( ) ; } ) ; x.AddFromAssemblyContainingType < Meeting > ( ) ; x.Include < Meeting > ( ) .Setup ( ( c = > c.CreatedBy ) ) .Use < FirstNameSource > ( ) .Setup ( c = > c.StartDate ) .Use < DefaultRandomDateSource > ( DateTime.Parse ( `` 21/05/2011 '' ) , DateTime.Parse ( `` 21/05/2012 '' ) ) ; } ) ;"
"using System.Collections.Generic ; namespace MyNamespace { using IntPair = KeyValuePair < int , int > ; } namespace MyNamespace { using System.Collections.Generic ; //using IntPair = KeyValuePair < int , int > ; // Error ! using IntPair = System.Collections.Generic.KeyValuePair < int , int > ; // works }"
class TBase { ... } class TDerived : TBase { ... } class Container { ICollection < TBase > instances ; ... } class TopLevel { Container container1 ; Container container2 ; ... } var fixture = new Fixture ( ) ; fixture.Customize < TBase > ( c = > c.Create < TDerived > ( ) ) ; var model = this.fixture.Create < TopLevel > ( ) ;
"public partial class UserColumnGrid { public int UserColumnGridID { get ; set ; } public int UserID { get ; set ; } public int ColumnGridID { get ; set ; } public int ColumnWidth { get ; set ; } public bool IsVisible { get ; set ; } public virtual ColumnGrid ColumnGrid { get ; set ; } public virtual User User { get ; set ; } } dbContext.UserColumnGrid.Where ( ucg = > ucg.UserID == userID ) .ToList ( ) ; SELECT [ Extent1 ] . [ UserColumnGridID ] AS [ UserColumnGridID ] , [ Extent1 ] . [ UserID ] AS [ UserID ] , [ Extent1 ] . [ ColumnGridID ] AS [ ColumnGridID ] , [ Extent1 ] . [ ColumnWidth ] AS [ ColumnWidth ] , [ Extent1 ] . [ IsVisible ] AS [ IsVisible ] FROM [ dbo ] . [ UserColumnGrid ] AS [ Extent1 ] WHERE ( [ Extent1 ] . [ UserID ] = 1 /* @ p__linq__0 */ ) AND ( 1 /* @ p__linq__0 */ IS NOT NULL )"
static void Main ( string [ ] args ) { var t1 = Task.Run ( async ( ) = > { Console.WriteLine ( `` Putting in fake processing 1 . `` ) ; await Task.Delay ( 300 ) ; Console.WriteLine ( `` Fake processing finished 1 . `` ) ; } ) ; var t2 = t1.ContinueWith ( async ( c ) = > { Console.WriteLine ( `` Putting in fake processing 2 . `` ) ; await Task.Delay ( 200 ) ; Console.WriteLine ( `` Fake processing finished 2 . `` ) ; } ) ; var t3 = t2.ContinueWith ( async ( c ) = > { Console.WriteLine ( `` Putting in fake processing 3 . `` ) ; await Task.Delay ( 100 ) ; Console.WriteLine ( `` Fake processing finished 3 . `` ) ; } ) ; Console.ReadLine ( ) ; }
"var customCrashListener = new CustomCrashListener ( ) ; CrashManager.Register ( this , `` appId '' , customCrashListener ) ; class CustomCrashListener : CrashManagerListener { public bool ShouldAutoUploadCrashes ( ) { return true ; } }"
"public static List < AvailableDay > Find ( string mailboxCalendarId , string [ ] typeTrameCles , DateTime dateMin , bool hasPhNonUrgent , bool hasPhUrgence , bool hasPhUrgenceDuJour ) public static List < AvailableDay > Find ( string mailboxCalendarId , string [ ] typeTrameCles , DateTime dateMin , bool hasPhNonUrgent , bool hasPhUrgence , bool hasPhUrgenceDuJour , int maxDaysResultCout = 1 )"
"var qq = new int [ 2,3 ] { { 1,2,3 } , { 1,2,4 } } ; var t = qq.GetType ( ) .ToString ( ) ; //is `` System.Int32 [ , ] '' var t2 = ? ? ; // should be `` System.Int32 ''"
internal class Thing.class private auto ansi beforefieldinit Thing.Thing extends [ mscorlib ] System.Object
DataContext.Table.Count ( c = > c.condition ) ;
"HECHT , WILLIAM Hecht , William"
"private int counter = 0 ; private void button1_Click ( object sender , EventArgs e ) { counter++ ; // code will go here }"
"public static explicit operator DomainModel.Role ( Role roleEntity ) { DomainModel.Role role = new DomainModel.Role { RoleId = roleEntity.RoleId , Name = roleEntity.Name } ; return role ; } user.Role = ( DomainModel.Role ) _userRepository.GetRole ( user ) ; // Would normally results in a NullReferenceException public static explicit operator DomainModel.Role ( Role roleEntity ) { DomainModel.Role role = roleEntity == null ? null : new DomainModel.Role { RoleId = roleEntity.RoleId , Name = roleEntity.Name } ; return role ; }"
internal interface IPTask < T > { bool CanExecute ( T instance ) ; T Process ( T instance ) ; } internal interface IProcessor < T > { T Execute ( T instance ) ; } public class Processor < T > : IProcessor < T > { private readonly ITasks < T > tasks ; public Processor ( ITasks < T > tasks ) { this.tasks= tasks ; } public T Execute ( T instance ) { var taskstoExecute = tasks.GetTasks ( ) .Where ( task = > task.CanExecute ( instance ) ) ; taskstoExecute.ToList ( ) .ForEach ( task= > task.Process ( instance ) ) ; return T ; } } internal interface ITasks < T > { IEnumerable < IPTask < T > > GetTasks ( ) ; }
"var printDialog = new PrintDialog ( ) ; if ( printDialog.ShowDialog ( ) == true ) { var flowDocument = new FlowDocument ( ) ; var paragraph = new Paragraph ( ) ; paragraph.FontFamily = new FontFamily ( `` Courier New '' ) ; paragraph.FontSize = 10 ; paragraph.Margin = new Thickness ( 0 ) ; paragraph.Inlines.Add ( new Run ( this.textToPrint ) ) ; flowDocument.FontSize = 10 ; flowDocument.Blocks.Add ( paragraph ) ; var paginator = ( ( IDocumentPaginatorSource ) flowDocument ) .DocumentPaginator ; printDialog.PrintDocument ( paginator , `` Chit '' ) ; }"
"// Use of unassigned local variable 'handler'.SessionEndingEventHandler handler = ( sender , e ) = > { isShuttingDown = true ; SystemEvents.SessionEnding -= handler ; } ; SessionEndingEventHandler handler = null ; handler = ( sender , e ) = > { isShuttingDown = true ; SystemEvents.SessionEnding -= handler ; } ; SystemEvents.SessionEnding += handler ; handler ( null , null ) ;"
"private void Form1_Load ( object sender , EventArgs e ) { int x = 10 ; int y = 10 ; /// Process the list of files found in the directory . string [ ] fileEntries = Directory.GetFiles ( @ '' c : \lotsofDocs '' ) ; foreach ( string fileName in fileEntries ) { // do something with fileName Button newbotton = new Button ( ) ; newbotton.AutoSize = true ; newbotton.Text = fileName ; panel1.Controls.Add ( newbotton ) ; newbotton.Location = new Point ( x , y ) ; x += 150 ; if ( x == 760 ) { y += 50 ; x = 10 ; } }"
public interface ICatalog { string Name { get ; } IEnumerable < Item > GetItems ( Predicate < Item > predicate ) ; }
"using ( FileStream fs = new FileStream ( @ '' C : \temp\1.txt '' , FileMode.Open , FileAccess.Read , FileShare.ReadWrite | FileShare.Delete ) ) { int len = ( int ) fs.Length ; byte [ ] array = new byte [ len ] ; int bytesRead = fs.Read ( array , 0 , len ) ; }"
class Test1 { public static string x1 = EchoAndReturn1 ( `` Init x1 '' ) ; public static string EchoAndReturn1 ( string s ) { Console.WriteLine ( s ) ; return s ; } } class Programm { public static void Main ( ) { Console.WriteLine ( `` Starting Main '' ) ; Test1.EchoAndReturn1 ( `` Echo 1 '' ) ; Console.WriteLine ( `` After echo '' ) ; string y = Test1.x1 ; //marked line } } Init x1Starting MainEcho 1After echo Starting MainInit x1Echo 1After echo
"public class Account { public int Id { get ; set ; } public int GroupId { get ; set ; } public string Name { get ; set ; } public decimal Balance { get ; set ; } public string AccountType { get ; set ; } public virtual AccountGroup Group { get ; set ; } } public class AccountGroup { public AccountGroup ( ) { Accounts = new HashSet < Account > ( ) ; Groups = new HashSet < AccountGroup > ( ) ; } public int Id { get ; set ; } public bool IsRoot { get { return Parent == null ; } } public bool IsLeaf { get { return ! Groups.Any ( ) ; } } public decimal Balance { get { return IsLeaf ? Accounts.Sum ( a = > a.Balance ) : Groups.Sum ( g = > g.Balance ) ; } } // if leaf group , get sum of all account balances , otherwise get sum of all subgroups public int ? ParentId { get ; set ; } public string Name { get ; set ; } public string Description { get ; set ; } public virtual ISet < Account > Accounts { get ; private set ; } public virtual ISet < AccountGroup > Groups { get ; private set ; } public virtual AccountGroup Parent { get ; set ; } } // start processing root groups ( ones without parent ) foreach ( var rootGroup in db.AccountGroups.Include ( g= > g.Groups ) .Where ( g = > g.ParentId == null ) ) { TraverseAccountGroup ( rootGroup , 0 ) ; } // recursive methodprivate static void TraverseAccountGroup ( AccountGroup accountGroup , int level ) { // // process account group // Console.WriteLine ( `` { 0 } { 1 } ( { 2 } ) '' , String.Empty.PadRight ( level * 2 , ' . ' ) , accountGroup.Name , level ) ; // // if subgroups exist , process recursivelly // if ( accountGroup.Groups.Any ( ) ) { foreach ( var subGroup in accountGroup.Groups ) { TraverseAccountGroup ( subGroup , level + 1 ) ; } } // // otherwise , process accounts belonging to leaf subgroup // else { foreach ( var account in accountGroup.Accounts ) { Console.WriteLine ( `` ACCOUNT [ { 0 } ] '' , account.Name ) ; } } }"
"class Program { static void Main ( string [ ] args ) { var objs = new object [ ] { new Class1 ( ) , new Class2 ( ) } ; foreach ( var item in objs ) { Method ( item ) ; } } static void Method ( Class1 obj ) { } static void Method ( Class2 obj ) { } } class Class1 { } class Class2 { }"
User.UserRoleID == 9 ? false : true
using ( var p = new Process ( ) ) { p.StartInfo.FileName = `` c : \\temp\\SomeConsoleApp.exe '' ; p.Start ( ) ; }
"public void Configure ( IApplicationEnvironment appEnv , IApplicationBuilder app , IHostingEnvironment env ) { if ( env.IsDevelopment ( ) ) { app.UseBrowserLink ( ) ; app.UseDeveloperExceptionPage ( ) ; } else { app.UseExceptionHandler ( HandleException ) ; } app.UseStaticFiles ( ) ; app.UseMvc ( routes = > MapRoutes ( routes , appEnv ) ) ; } private static void MapRoutes ( IRouteBuilder routes , IApplicationEnvironment env ) { routes.MapRoute ( name : `` default '' , template : `` { controller } / { action } / { id ? } '' , defaults : new { controller = `` main '' , action = `` index '' } ) ; } private static void HandleException ( IApplicationBuilder errorApp ) { # pragma warning disable CS1998 // Async method lacks 'await ' operators and will run synchronously errorApp.Run ( async context = > HandleErrorContext ( context ) ) ; # pragma warning restore CS1998 // Async method lacks 'await ' operators and will run synchronously } private static void HandleErrorContext ( HttpContext context ) { var error = context.Features.Get < IExceptionHandlerFeature > ( ) ; var exception = error.Error ; if ( exception == null ) { context.Response.Redirect ( `` ../error/external '' ) ; } else if ( exception is ExpirationException ) { context.Response.Redirect ( `` ../error/expired '' ) ; } else if ( exception is HttpException ) { var httpException = exception as HttpException ; int code = httpException.GetHttpCode ( ) ; context.Response.Redirect ( `` ../error/external ? code= '' + code ) ; } else { context.Response.Redirect ( `` ../error/external '' ) ; } }"
// retrieve a key from the key safe - this will create it if it does not exist yetSystem.Security.Cryptography.CspParameters csp = new CspParameters ( ) ; csp.KeyContainerName = `` MyKeyName '' ; System.Security.Cryptography.RSACryptoServiceProvider key = new RSACryptoServiceProvider ( csp ) ;
int a = 5 ; int b = 5 ; int c = 7 ; int d = 6 ; int ee = 6 ; int f = 8 ; int g = 9 ; int h = 6 ; int i = 6 ; int j = 4 ; int k = 8 ; int l = 9 ; int m = 5 ; long x = a * b * c * d * ee * f * g * h * i * j * k * l * m ; double aa = 5 ; double ab = 5 ; double ac = 7 ; double ad = 6 ; double aee = 6 ; double af = 8 ; double ag = 9 ; double ah = 6 ; double ai = 6 ; double aj = 4 ; double ak = 8 ; double al = 9 ; double am = 5 ; long y = ( long ) ( aa * ab * ac * ad * aee * af * ag * ah * ai * aj * ak * al * am ) ;
sealed class MyType { static Type typeReference = typeof ( MyType ) ; // ... } var instance = new MyType ( ) ; var type1 = instance.GetType ( ) ; var type2 = typeof ( MyType ) ; var type3 = typeReference ;
"public class A { private string _a_string ; public string AString { get { return _a_string ; } set { _a_string = value ; } } } public class B { private string _b_string ; private A _a ; public A A { get { return _a ; } set { _a = value ; } } public string BString { get { return _b_string ; } set { _b_string = value ; } } } B _b = new B { A = { AString = `` aString '' } , BString = `` bString '' } ; B _b = new B { A = new A { AString = `` aString '' } , BString = `` bString '' } ;"
... _myNullableInt == obj._myNullableInt & & _myString == obj._myString & & ...
"from w in Widgets.OrderBy ( w = > w.CreatedOn ) let foo = w.Foos.FirstOrDefault ( ) let bar = w.Bars.FirstOrDefault ( ) select new { w.WidgetID , foo.fValue } from w in Widgetslet bar = w.Bars.FirstOrDefault ( ) let foo = w.Foos.FirstOrDefault ( ) orderby w.CreatedOnselect new { w.WidgetID , foo.fValue } from w in Widgets.OrderBy ( w = > w.CreatedOn ) let bar = w.Bars.FirstOrDefault ( ) let foo = w.Foos.FirstOrDefault ( ) select new { w.WidgetID , foo.fValue } ... ( SELECT TOP ( 1 ) [ Extent7 ] . [ fValue ] AS [ fValue ] FROM ( SELECT TOP ( 1 ) [ Extent6 ] . [ BarID ] AS [ BarID ] FROM [ dbo ] . [ Bars ] AS [ Extent6 ] WHERE [ Extent1 ] . [ WidgetID ] = [ Extent6 ] . [ bWidgetID ] ) AS [ Limit5 ] CROSS JOIN [ dbo ] . [ Foos ] AS [ Extent7 ] WHERE [ Extent1 ] . [ WidgetID ] = [ Extent7 ] . [ fWidgetID ] ) AS [ C1 ] ... create table Widgets ( WidgetID int not null primary key , CreatedOn datetime not null ) insert Widgets values ( 1 , '1995-02-03 ' ) create table Foos ( FooID int not null primary key , fWidgetID int not null references Widgets ( WidgetID ) , fValue int not null ) insert Foos values ( 7 , 1 , 96 ) create table Bars ( BarID int not null primary key , bWidgetID int not null references Widgets ( WidgetID ) , bValue int not null )"
"public async Task < HttpResponseMessage > Post ( [ FromBody ] Activity incomingMessage ) { try { if ( incomingMessage.Type == ActivityTypes.Message ) { using ( var scope = DialogModule.BeginLifetimeScope ( Conversation.Container , activity ) ) { var stack = scope.Resolve < IDialogStack > ( ) ; } ... private void RegisterBotModules ( ) { var builder = new ContainerBuilder ( ) ; builder.RegisterModule ( new DialogModule ( ) ) ; builder.RegisterModule ( new ReflectionSurrogateModule ( ) ) ; builder.RegisterModule ( new DialogModule_MakeRoot ( ) ) ; builder.RegisterModule < GlobalMessageHandler > ( ) ; builder.RegisterModule ( new AzureModule ( Assembly.GetExecutingAssembly ( ) ) ) ; var store = new TableBotDataStore ( /*connection string*/ ) ; builder.Register ( c = > store ) .Keyed < IBotDataStore < BotData > > ( AzureModule.Key_DataStore ) .AsSelf ( ) .SingleInstance ( ) ; builder.Register ( c = > new CachingBotDataStore ( store , CachingBotDataStoreConsistencyPolicy.ETagBasedConsistency ) ) .As < IBotDataStore < BotData > > ( ) .AsSelf ( ) .InstancePerLifetimeScope ( ) ; builder.Update ( Conversation.Container ) ; var config = GlobalConfiguration.Configuration ; config.DependencyResolver = new AutofacWebApiDependencyResolver ( Conversation.Container ) ; }"
var type1 = typeof ( List < > ) ; var type2 = typeof ( IEnumerable < > ) ; //return falsetype2.IsAssignableFrom ( type1 ) ;
public IQueryable < T > GetAll < T > ( ) { using ( var transaction = _session.BeginTransaction ( ) ) { var data = _session.Linq < T > ( ) ; transaction.Commit ( ) ; return data ; } }
object o = 10 ; // Boxint i = ( int ) o ; // Unbox bool isInt = o is int ; // Is the unbox here or not ?
"var bmp = new Bitmap ( width , height , PixelFormat.Format32bppArgb ) ; public void CaptureApplication ( ) { string procName = `` firefox '' ; var proc = Process.GetProcessesByName ( procName ) [ 0 ] ; var rect = new User32.Rect ( ) ; User32.GetWindowRect ( proc.MainWindowHandle , ref rect ) ; int width = rect.right - rect.left ; int height = rect.bottom - rect.top ; var bmp = new Bitmap ( width , height , PixelFormat.Format32bppArgb ) ; Graphics graphics = Graphics.FromImage ( bmp ) ; graphics.CopyFromScreen ( rect.left , rect.top , 0 , 0 , new Size ( width , height ) , CopyPixelOperation.SourceCopy ) ; bmp.Save ( `` c : \\tmp\\test.png '' , ImageFormat.Png ) ; } private class User32 { [ StructLayout ( LayoutKind.Sequential ) ] public struct Rect { public int left ; public int top ; public int right ; public int bottom ; } [ DllImport ( `` user32.dll '' ) ] public static extern IntPtr GetWindowRect ( IntPtr hWnd , ref Rect rect ) ; }"
"class HashTable < TKey , TValue > : ... IEnumerable < out IAssociation < out TKey , out TValue > > , IEnumerable < out KeyValuePair < TKey , TValue > > { // Primary : public IEnumerator < IAssociation < TKey , TValue > > GetEnumerator ( ) ; // Secondary : IEnumerator < KeyValuePair < TKey , TValue > > IEnumerable < KeyValuePair < TKey , TValue > > .GetEnumerator ( ) ; } using System ; using System.Collections.Generic ; using System.Linq ; var hashtable = new HashTable < string , int > ( ) ; foreach ( var kv in hashtable ) { // kv is IAssociation < string , int > } var xs1 = from x in hashtable // < -- 1 select x ; var xs2 = hashtable.Select ( x = > x ) ; // < -- 2 using SCG = System.Collections.Generic ; public class HashTable < TKey , TValue > : IKeyedCollection < TKey , TValue > , SCG.IDictionary < TKey , TValue > public interface IKeyedCollection < out TKey , out TValue > : ICollection < IAssociation < TKey , TValue > > public interface ICollection < out T > : SCG.IEnumerable < T > public interface IAssociation < out TKey , out TValue > // .NET Framework : public interface IDictionary < TKey , TValue > : ICollection < KeyValuePair < TKey , TValue > > public interface ICollection < T > : IEnumerable < T >"
using System ; namespace ConditionalDebug { public class Program { public static void Main ( string [ ] args ) { var r = new Random ( ) ; var i = r.Next ( 2 ) ; i += r.Next ( 2 ) ; i += r.Next ( 2 ) ; i += r.Next ( 2 ) ; i += r.Next ( 2 ) ; i = 1 ; Console.WriteLine ( i ) ; } } }
DateTime myDateTime = DateTime.Parse ( `` 01-01-0001 00:00:00 '' ) ; Console.WriteLine ( myDateTime.AddDays ( 735768.0 ) ) ;
"namespace ElQueue.DataClasses { [ DataContract ] public sealed class SettingsModel { [ DataMember ( IsRequired = true ) ] public int [ ] VideoMediaData { get ; set ; } } } using ( SomeDataContext dataContext = new SomeDataContext ( ) ) { SettingsModel m = new SettingsModel ( ) ; m.VideoMediaData = new int [ ] { 1 , 2 , 3 } ; dataContext.MainTableSettings.InsertOnSubmit ( new MainTableSetting ( ) { SettingsModel = m } ) ; dataContext.SubmitChanges ( ) ; } using ( SomeDataContext dataContext = new SomeDataContext ( ) ) { var r = dataContext.MainTableSettings.Single ( ) ; }"
< location path= '' home '' allowOverride= '' false '' > < system.web > < authorization > < deny users= '' ? `` / > < allow users= '' * '' / > < /authorization > < /system.web > < /location >
+ ( Class ) layerClass { //configure the UIView to have emitter layer return [ CAEmitterLayer class ] ; }
"//Setup inputs one time ... foreach ( var input in p_inputs ) { inputs.Add ( input.Function , input ) ; profiles.Add ( input.Function , new RunProfile ( input.Function , input.Weight ) ) ; input.Input.Prepare ( package [ input.Function ] ) ; } //Profile ... DateTime start ; int g_state = 0 ; int l_state = 0 ; long [ ] g = new long [ 3 ] { 2 , 2 , 2 } ; long [ ] l = new long [ 3 ] { 2 , 2 , 2 } ; while ( g [ 0 ] * g [ 1 ] * g [ 2 ] < Device.MaxWorkGroupSize ) { l [ 0 ] = 2 ; l [ 1 ] = 2 ; l [ 2 ] = 2 ; l_state = 0 ; //Reset locals bool proceed = true ; while ( proceed ) { proceed = ( l [ 0 ] ! = g [ 0 ] || l [ 1 ] ! = g [ 1 ] || l [ 2 ] ! = g [ 2 ] ) ; if ( CLUtilities.ValidateExecutionParameters ( Device , g , l ) ) { Debug.Log ( `` Profiling Start : `` + g.ToEnumeratedString ( ) + `` / `` + l.ToEnumeratedString ( ) ) ; foreach ( var profile in profiles ) { start = DateTime.Now ; //Exception here when on ( g=6x4x4 , l=6x4x4 ) package.Execute ( package [ profile.Key ] , g , l ) ; package.Commands.Flush ( ) ; package.Commands.Finish ( ) ; float time = ( float ) ( DateTime.Now - start ) .TotalMilliseconds ; profile.Value.AddRun ( g , l , time ) ; } Debug.Log ( `` Profiling Ending : `` + g.ToEnumeratedString ( ) + `` / `` + l.ToEnumeratedString ( ) ) ; } l [ l_state ] += 2 ; l_state = ( l_state == 2 ) ? 0 : l_state + 1 ; } g [ g_state ] += 2 ; g_state = ( g_state == 2 ) ? 0 : g_state + 1 ; }"
internal class WhyDoThis : Exception { } public class Foo { private class WhyWhyWhy : Exception { } }
ISqlUtil sqlUtil = GetTheRealSqlUtilObjectSomehow ( ... ) ; var mock = new Mock < ISqlUtil > ( ) ; mock.Setup ( o = > o.SpecialMethodToBeMocked ( ... ) ) .Returns < ... > ( ... ) // Here I would like to delegate the rest of the methods to the real sqlUtil object . How ?
"< phone : PhoneApplicationPage x : Class= '' SamplePage.Pages.About '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : phone= '' clr-namespace : Microsoft.Phone.Controls ; assembly=Microsoft.Phone '' xmlns : shell= '' clr-namespace : Microsoft.Phone.Shell ; assembly=Microsoft.Phone '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' FontFamily= '' { StaticResource PhoneFontFamilyNormal } '' FontSize= '' { StaticResource PhoneFontSizeNormal } '' Foreground= '' { StaticResource PhoneForegroundBrush } '' SupportedOrientations= '' Portrait '' Orientation= '' Portrait '' mc : Ignorable= '' d '' d : DesignHeight= '' 768 '' d : DesignWidth= '' 480 '' xmlns : toolkit= '' clr-namespace : Microsoft.Phone.Controls ; assembly=Microsoft.Phone.Controls.Toolkit '' shell : SystemTray.IsVisible= '' True '' > < ! -- Transitions -- > < toolkit : TransitionService.NavigationInTransition > < toolkit : NavigationInTransition > < toolkit : NavigationInTransition.Backward > < toolkit : TurnstileFeatherTransition Mode= '' BackwardIn '' / > < /toolkit : NavigationInTransition.Backward > < toolkit : NavigationInTransition.Forward > < toolkit : TurnstileFeatherTransition Mode= '' ForwardIn '' / > < /toolkit : NavigationInTransition.Forward > < /toolkit : NavigationInTransition > < /toolkit : TransitionService.NavigationInTransition > < toolkit : TransitionService.NavigationOutTransition > < toolkit : NavigationOutTransition > < toolkit : NavigationOutTransition.Backward > < toolkit : TurnstileFeatherTransition Mode= '' BackwardOut '' / > < /toolkit : NavigationOutTransition.Backward > < toolkit : NavigationOutTransition.Forward > < toolkit : TurnstileFeatherTransition Mode= '' ForwardOut '' / > < /toolkit : NavigationOutTransition.Forward > < /toolkit : NavigationOutTransition > < /toolkit : TransitionService.NavigationOutTransition > < ! -- LayoutRoot is the root grid where all page content is placed -- > < Grid x : Name= '' LayoutRoot '' Background= '' White '' > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' * '' / > < /Grid.RowDefinitions > < ! -- TitlePanel contains the name of the application and page title -- > < StackPanel Grid.Row= '' 0 '' Margin= '' 12,17,0,20 '' > < TextBlock Text= '' ABOUT '' Style= '' { StaticResource PhoneTextNormalStyle } '' Foreground= '' # 404041 '' FontWeight= '' Bold '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 0 '' / > < /StackPanel > < Grid x : Name= '' ContentPanel '' Grid.Row= '' 1 '' Margin= '' 24,0,0,0 '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Top '' > < Grid > < Image Height= '' 100 '' Source= '' /Assets/Images/logo.png '' Margin= '' -5,0,0,0 '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Top '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 1 '' / > < StackPanel Margin= '' 0,90,0,0 '' > < StackPanel Margin= '' 0,0,0,0 '' Orientation= '' Horizontal '' HorizontalAlignment= '' Left '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 2 '' > < Image Height= '' 76 '' Width= '' 76 '' Margin= '' -16,0 , -20,0 '' Source= '' /Assets/AppBar/appbar.shield.png '' / > < HyperlinkButton Foreground= '' # FF474747 '' NavigateUri= '' http : //sample.com/ '' TargetName= '' _anything '' Content= '' Privacy Policy '' / > < /StackPanel > < StackPanel toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 3 '' Margin= '' 0 , -20,0,0 '' Orientation= '' Horizontal '' HorizontalAlignment= '' Left '' > < Image Height= '' 76 '' Width= '' 76 '' Margin= '' -16,0 , -20,0 '' Source= '' /Assets/AppBar/appbar.email.png '' / > < HyperlinkButton Foreground= '' # FF474747 '' NavigateUri= '' http : //sample.com/ '' TargetName= '' _anything '' Content= '' Send Feedback '' / > < /StackPanel > < /StackPanel > < ScrollViewer Margin= '' 0,210,0,0 '' > < Grid > < StackPanel Margin= '' 2,0,12,0 '' > < ! -- HEADER -- > < TextBlock TextWrapping= '' Wrap '' Text= '' Version '' FontWeight= '' Bold '' FontSize= '' 30 '' Foreground= '' # FF363636 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 4 '' / > < ! -- BODY -- > < RichTextBox TextWrapping= '' Wrap '' Margin= '' -10,0,0,0 '' TextAlignment= '' Justify '' FontSize= '' 24 '' Foreground= '' # FF363636 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 5 '' > < Paragraph > < Run Text= '' 0.0.1 '' / > < /Paragraph > < /RichTextBox > < ! -- HEADER -- > < TextBlock TextWrapping= '' Wrap '' Text= '' Description '' FontWeight= '' Bold '' FontSize= '' 30 '' Foreground= '' # FF363636 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 6 '' / > < ! -- BODY -- > < RichTextBox TextWrapping= '' Wrap '' Margin= '' -10,0,0,0 '' TextAlignment= '' Justify '' FontSize= '' 24 '' Foreground= '' # FF363636 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 7 '' > < Paragraph > < Run Text= '' Lorem Ipsum is simply dummy text of the printing and typesetting industry . Lorem Ipsum has been the industry 's standard dummy text ever since the 1500s , when an unknown printer took a galley of type and scrambled it to make a type specimen book . It has survived not only five centuries , but also the leap into electronic typesetting , remaining essentially unchanged . `` / > < /Paragraph > < /RichTextBox > < ! -- HEADER -- > < TextBlock TextWrapping= '' Wrap '' Text= '' Developed by '' FontWeight= '' Bold '' FontSize= '' 30 '' Foreground= '' # FF363636 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 8 '' / > < ! -- BODY -- > < Grid HorizontalAlignment= '' Left '' Width= '' 440 '' toolkit : TurnstileFeatherEffect.FeatheringIndex= '' 9 '' > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' Auto '' / > < ColumnDefinition Width= '' Auto '' / > < /Grid.ColumnDefinitions > < Image Grid.Column= '' 0 '' HorizontalAlignment= '' Left '' Source= '' /Assets/Images/logo.png '' > < /Image > < Image Grid.Column= '' 1 '' Margin= '' 5,0,0,0 '' HorizontalAlignment= '' Left '' Source= '' /Assets/Images/logo.png '' > < /Image > < /Grid > < /StackPanel > < /Grid > < /ScrollViewer > < /Grid > < /Grid > < /Grid > < /phone : PhoneApplicationPage >"
"List < int > lst = new List < int > ( ) ; lst.Add ( 1 ) ; lst.Add ( 3 ) ; lst.Add ( 5 ) ; lst.Add ( -3 ) ; lst.Add ( 4 ) ; lst.Add ( -4 ) ; lst.Add ( 5 ) ; lst.Add ( 6 ) ; lst.Skip ( lst.Max ( 0 , lst.Count - 1 ) ) .ToList ( ) ; Last positive values after last negative value : in example list last negative value is -4and last positive values are 5 , 6 , So I want 5 and 6 from given list"
"{ `` gigaxel '' : { `` id '' : 36588106 , `` name '' : `` Gigaxel '' , `` profileIconId '' : 713 , `` revisionDate '' : 1451577643000 , `` summonerLevel '' : 30 } } public class Rootobject { public Gigaxel gigaxel { get ; set ; } } public class Gigaxel { public int id { get ; set ; } public string name { get ; set ; } public int profileIconId { get ; set ; } public long revisionDate { get ; set ; } public int summonerLevel { get ; set ; } } public class LOLFacade { private const string APIKey = `` secret : D '' ; public async static Task < Rootobject > ConnectToRiot ( string user , string regionName ) { var http = new HttpClient ( ) ; string riotURL = String.Format ( `` https : // { 0 } .api.pvp.net/api/lol/ { 0 } /v1.4/summoner/by-name/ { 1 } ? api_key= { 2 } '' , regionName , user , APIKey ) ; var response = await http.GetAsync ( riotURL ) ; var result = await response.Content.ReadAsStringAsync ( ) ; return JsonConvert.DeserializeObject < Rootobject > ( result ) ; } } Rootobject root = new Rootobject { gigaxel = new Gigaxel ( ) } ; root = await LOLFacade.ConnectToRiot ( `` gigaxel '' , '' EUNE '' ) ; string name = root.gigaxel.name ; int level = root.gigaxel.summonerLevel ; InfoTextBlock.Text = name + `` is level `` + level ; Object reference not set to an instance of an object . public class Rootobject { public Gigaxel xenon94 { get ; set ; } }"
"int Count ( Func < ContratoList , bool > @ where ) ; int Count ( Func < ContratoList , bool > where ) ;"
void someRoutine ( std : :istream & stream ) { ... }
await RunFirstOperationAsync ( ) ; await RunSecondOperationAsync ( ) ; await RunFirstOperationAsync ( ) .ContinueWith ( t = > RunSecondOperationAsync ( ) ) ;
"public static class LabelExtensions { public static Label BlinkText ( this Label label , int duration ) { System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer ( ) ; timer.Interval = duration ; timer.Tick += ( sender , e ) = > { timer.Stop ( ) ; label.Font = new Font ( label.Font , label.Font.Style ^ FontStyle.Bold ) ; } ; label.Font = new Font ( label.Font , label.Font.Style | FontStyle.Bold ) ; timer.Start ( ) ; return label ; } }"
double test = Math.Ceiling ( 100 * 1.09 ) ; label75.Text = Convert.ToString ( test ) ;
DirectoryInfo [ ] diList = currentDirectory.GetDirectories ( ) ; var dirs = from eachDir in diList orderby eachDir.FullName descending select eachDir ; MessageBox.Show ( dirs [ 0 ] .FullName ) ; Can not apply indexing with [ ] to an expression of type 'System.Linq.IOrderedEnumerable < System.IO.DirectoryInfo >
public static implicit operator Deal ( string dealAsXml ) { //convert the xml into Deal object }
"public class Datum : IDictionary < string , object > { private Dictionary < string , object > _entries ; public Datum ( ) { _entries = new Dictionary < string , object > ( ) ; } public object this [ string s ] { get { return this._entries [ s ] ; } } ... } rptTags.DataSource = new [ ] { new Datum { { `` Count '' , 1 } } , new Datum { { `` Count '' , 2 } } ; < asp : Repeater ID= '' rptTags '' runat= '' server '' > < ItemTemplate > < % # ( int ) Eval ( `` Count '' ) > < /ItemTemplate > < /asp : Repeater >"
"< Image Source= '' pack : //siteoforigin : , , ,/Common/Images/CompanyLogo.png '' / > < Image Source= '' pack : //application : , , ,/ResourcesAssembly ; component/Common/Images/CompanyLogo.png '' / >"
"emailBody = $ '' Good morning { person.GetFullName ( ) } , blah blah blah , { person.GetFullName ( ) } would you like to play a game ? `` ;"
public Shogun ( IEnumerable < IWeapon > allWeapons ) { this.allWeapons = allWeapons ; } Bind < IWeapon > ( ) .To < Sword > ( ) ; Bind < IWeapon > ( ) .To < Dagger > ( ) .WhenInjectedInto < Shogun > ( ) ; Bind < IWeapon > ( ) .To < Sword > ( ) ; Bind < IWeapon > ( ) .To < Dagger > ( ) .WhenInjectedInto < Shogun > ( ) ; Bind < IWeapon > ( ) .To < Shuriken > ( ) .WhenInjectedInto < Shogun > ( ) ;
"class A { private readonly int [ ] arr = new [ ] { 10 , 20 , 30 , 40 , 50 } ; private readonly List < int > list = new List < int > ( new [ ] { 10 , 20 , 30 , 40 , 50 } ) ; public int [ ] GetArr ( ) { return arr ; } public IList < int > GetList ( ) { return list ; } } var a = new A ( ) ; var arr1 = a.GetArr ( ) ; var arr2 = a.GetArr ( ) ; Console.WriteLine ( `` arr1 [ 2 ] : `` + arr1 [ 2 ] .ToString ( ) ) ; // > arr1 [ 2 ] : 30Console.WriteLine ( `` arr2 [ 2 ] : `` + arr2 [ 2 ] .ToString ( ) ) ; // > arr2 [ 2 ] : 30// ONE CALLER MUTATESarr1 [ 2 ] = 99 ; // BOTH CALLERS AFFECTEDConsole.WriteLine ( `` arr1 [ 2 ] : `` + arr1 [ 2 ] .ToString ( ) ) ; // > arr1 [ 2 ] : 99Console.WriteLine ( `` arr2 [ 2 ] : `` + arr2 [ 2 ] .ToString ( ) ) ; // > arr2 [ 2 ] : 99 var a = new A ( ) ; var list1 = a.GetList ( ) ; var list2 = a.GetList ( ) ; Console.WriteLine ( `` list1 [ 2 ] : `` + list1 [ 2 ] .ToString ( ) ) ; // > list1 [ 2 ] : 30Console.WriteLine ( `` list2 [ 2 ] : `` + list2 [ 2 ] .ToString ( ) ) ; // > list2 [ 2 ] : 30// ONE CALLER MUTATESlist1 [ 2 ] = 99 ; // BOTH CALLERS AFFECTEDConsole.WriteLine ( `` list1 [ 2 ] : `` + list1 [ 2 ] .ToString ( ) ) ; // > list1 [ 2 ] : 99Console.WriteLine ( `` list2 [ 2 ] : `` + list2 [ 2 ] .ToString ( ) ) ; // > list2 [ 2 ] : 99"
"< div align= '' CENTER '' class='dataTitle ' > Host State Breakdowns : < /div > < p align='center ' > < a href='trends.cgi ? host=hostname & includesoftstates=no & assumeinitialstates=yes & initialassumedhoststate=0 & backtrack=4 ' > < img src='trends.cgi ? createimage & host=hostname & includesoftstates=no & initialassumedhoststate=0 & backtrack=4 ' border= '' 1 '' alt='Host State Trends ' title='Host State Trends ' width='500 ' height='20 ' > < /a > < br > < /p > < div align= '' CENTER '' > < table border= '' 0 '' class='data ' > < tr > < th class='data ' > State < /th > < th class='data ' > Type / Reason < /th > < th class='data ' > Time < /th > < th class='data ' > % Total Time < /th > < th class='data ' > % Known Time < /th > < /tr > < tr class='dataEven ' > < td class='hostUP ' rowspan= '' 3 '' > UP < /td > < td class='dataEven ' > Unscheduled < /td > < td class='dataEven ' > 0d 10h 5m 19s < /td > < td class='dataEven ' > 100.000 % < /td > < td class='dataEven ' > 100.000 % < /td > < /tr > < tr class='dataEven ' > < td class='dataEven ' > Scheduled < /td > < td class='dataEven ' > 0d 0h 0m 0s < /td > < td class='dataEven ' > 0.000 % < /td > < td class='dataEven ' > 0.000 % < /td > < /tr > < tr class='hostUNREACHABLE ' > < td class='hostUNREACHABLE ' > Total < /td > < td class='hostUNREACHABLE ' > 0d 0h 0m 0s < /td > < td class='hostUNREACHABLE ' > 0.000 % < /td > < td class='hostUNREACHABLE ' > 0.000 % < /td > < /tr > < tr class='dataOdd ' > < td class='dataOdd ' rowspan= '' 3 '' > Undetermined < /td > < td class='dataOdd ' > Nagios Not Running < /td > < td class='dataOdd ' > 0d 0h 0m 0s < /td > < td class='dataOdd ' > 0.000 % < /td > < td class='dataOdd ' > < /td > < /tr > < tr class='dataOdd ' > < td class='dataOdd ' > Insufficient Data < /td > < td class='dataOdd ' > 0d 0h 0m 0s < /td > < td class='dataOdd ' > 0.000 % < /td > < td class='dataOdd ' > < /td > < /tr > < tr class='dataOdd ' > < td class='dataOdd ' > Total < /td > < td class='dataOdd ' > 0d 0h 0m 0s < /td > < td class='dataOdd ' > 0.000 % < /td > < td class='dataOdd ' > < /td > < /tr > < tr > < td colspan= '' 3 '' > < /td > < /tr > < tr class='dataEven ' > < td class='dataEven ' > All < /td > < td class='dataEven ' > Total < /td > < td class='dataEven ' > 0d 10h 5m 19s < /td > < td class='dataEven ' > 100.000 % < /td > < td class='dataEven ' > 100.000 % < /td > < /tr > < /table > < /div > < br > < br > < div align= '' CENTER '' class='dataTitle ' > State Breakdowns For Host Services : < /div > < div align= '' CENTER '' > < table border= '' 0 '' class='data ' > < tr > < th class='data ' > Service < /th > < th class='data ' > % Time OK < /th > < th class='data ' > % Time Warning < /th > < th class='data ' > % Time Unknown < /th > < th class='data ' > % Time Critical < /th > < th class='data ' > % Time Undetermined < /th > < /tr > < tr class='dataOdd ' > < td class='dataOdd ' > < a href='avail.cgi ? host=hostname & service=servicename & t1=1478498400 & t2=1478534719 & backtrack=4 & assumestateretention=yes & assumeinitialstates=yes & assumestatesduringnotrunning=yes & initialassumedhoststate=0 & initialassumedservicestate=0 & show_log_entries & showscheduleddowntime=yes & rpttimeperiod=24x7 ' > servicename < /a > < /td > < td class='serviceOK ' > 100.000 % ( 100.000 % ) < /td > < td class='serviceWARNING ' > 0.000 % ( 0.000 % ) < /td > < td class='serviceUNKNOWN ' > 0.000 % ( 0.000 % ) < /td > < td class='serviceCRITICAL ' > 0.000 % ( 0.000 % ) < /td > < td class='dataOdd ' > 0.000 % < /td > < /tr > < tr class='dataEven ' > < td class='dataEven ' > < a href='avail.cgi ? host=hostname & service=servicename2 & t1=1478498400 & t2=1478534719 & backtrack=4 & assumestateretention=yes & assumeinitialstates=yes & assumestatesduringnotrunning=yes & initialassumedhoststate=0 & initialassumedservicestate=0 & show_log_entries & showscheduleddowntime=yes & rpttimeperiod=24x7 ' > servicename2 < /a > < /td > < td class='serviceOK ' > 100.000 % ( 100.000 % ) < /td > < td class='serviceWARNING ' > 0.000 % ( 0.000 % ) < /td > < td class='serviceUNKNOWN ' > 0.000 % ( 0.000 % ) < /td > < td class='serviceCRITICAL ' > 0.000 % ( 0.000 % ) < /td > < td class='dataEven ' > 0.000 % < /td > < /tr > < /table > < /div > var response = ( HttpWebResponse ) request.GetResponse ( ) ; var stream = response.GetResponseStream ( ) ; HtmlDocument doc = new HtmlDocument ( ) ; doc.Load ( stream ) ; foreach ( HtmlNode node in doc.DocumentNode.SelectNodes ( `` //table [ @ class ] '' ) ) { foreach ( HtmlNode node2 in node.SelectNodes ( `` //td [ @ class = 'serviceOK ' ] '' ) ) { var value = node2.InnerText ; } foreach ( HtmlNode node3 in node.SelectNodes ( `` //a [ contains ( @ href , 'avail.cgi ' ) ] '' ) ) { var name = node3.InnerText ; } } 100.000 % ( 100.000 % ) 100.000 % ( 100.000 % ) servicenameservicename2100.000 % ( 100.000 % ) 100.000 % ( 100.000 % ) servicenameservicename2"
var a = Item.CatchLog ( ) .Where ( x= > x.Property== '' value '' ) .Take ( 10 ) ; var a = Item.CatchLog ( ) .FirstOrDefault ( x= > x.Property== '' value '' ) ; var a = Item.CatchLog ( ) .Any ( x= > x.Property== '' value '' ) ;
"// Data Access Layer.public async IAsyncEnumerable < Product > GetAllProducts ( ) { Container container = cosmosClient.GetContainer ( DatabaseId , ContainerId ) ; var iterator = container.GetItemQueryIterator < Product > ( `` SELECT * FROM c '' ) ; while ( iterator.HasMoreResults ) { foreach ( var product in await iterator.ReadNextAsync ( ) ) { yield return product ; } } } // Usageawait foreach ( var product in productsRepository.GetAllProducts ( ) ) { Console.WriteLine ( product ) ; } foreach ( var line in File.ReadLines ( `` Filename '' ) ) { // ... process line . }"
"using System ; using System.Collections.Generic ; using System.Dynamic ; namespace ConsoleApp { class Program { static void Main ( string [ ] args ) { dynamic product = new ExpandoObject ( ) ; product.ProductName = `` Elbow Grease '' ; product.Enabled = true ; product.Price = 4.90m ; product.StockCount = 9000 ; product.StockValue = 44100 ; product.Tags = new string [ ] { `` Real '' , `` OnSale '' } ; // Will output : { `` ProductName '' : '' Elbow Grease '' , '' Enabled '' : true , '' Price '' :4.90 , // `` StockCount '' :9000 , '' StockValue '' :44100 , '' Tags '' : [ `` Real '' , '' OnSale '' ] } var json1 = Newtonsoft.Json.JsonConvert.SerializeObject ( product ) ; Console.WriteLine ( json1 ) ; // Both will throw exception : System.InvalidCastException : “ Unable to // cast object of type ' < GetExpandoEnumerator > d__51 ' to type // 'System.Collections.IDictionaryEnumerator'. ” var json2 = System.Text.Json.JsonSerializer.Serialize ( product ) ; Console.WriteLine ( json2 ) ; var json3 = System.Text.Json.JsonSerializer.Serialize < IDictionary < string , object > > ( product as IDictionary < string , object > ) ; Console.WriteLine ( json3 ) ; Console.ReadKey ( ) ; } } }"
"/controller/action/subaction/id public ActionResult Members ( string subaction , long id=0 ) { switch ( subaction ) { case `` Details '' : var member = _payment.GetMember ( id ) ; return View ( `` Members_details '' , member ) ; default : var members = _payment.GetMembers ( ) .ToList ( ) ; return View ( `` Members_list '' , members ) ; } }"
public delegate void TestMethod ( ) ; struct TestMetaData { TestMethod method ; string testName ; }
"await blobRef.DownloadToFileAsync ( `` D : \\temp\\data.mdf '' , FileMode.Create ) ;"
"var systemPath = Environment.GetFolderPath ( Environment.SpecialFolder.System ) ; var dism = new Process ( ) ; dism.StartInfo.FileName = Path.Combine ( systemPath , `` Dism.exe '' ) ; dism.StartInfo.Arguments = `` /Online /Get-Features /Format : Table '' ; dism.StartInfo.Verb = `` runas '' ; dism.StartInfo.UseShellExecute = false ; dism.StartInfo.RedirectStandardOutput = true ; dism.Start ( ) ; var result = dism.StandardOutput.ReadToEnd ( ) ; dism.WaitForExit ( ) ;"
"// Unit test methodpublic void RemoveAppGroupTest ( ) { string addGroup = `` TestGroup '' ; string status = string.Empty ; string message = string.Empty ; appActiveDirectoryServicesClient.RemoveAppGroup ( `` AOD '' , addGroup , ref status , ref message ) ; } // Inside the WCF service [ OperationBehavior ( Impersonation = ImpersonationOption.Required ) ] public void RemoveAppGroup ( string AppName , string GroupName , ref string Status , ref string Message ) { string accessOnDemandDomain = `` MyDomain '' ; RemoveAppGroupFromDomain ( AppName , accessOnDemandDomain , GroupName , ref Status , ref Message ) ; } public AppActiveDirectoryDomain ( string AppName , string DomainName ) { if ( string.IsNullOrEmpty ( AppName ) ) { throw new ArgumentNullException ( `` AppName '' , `` You must specify an application name '' ) ; } } // Lets try this again.public AppActiveDirectoryDomain ( string AppName , string DomainName ) { // Explicitly set the value for testing purposes . AppName = `` AOD '' ; if ( AppName == null ) { throw new ArgumentNullException ( `` AppName '' , `` You must specify an application name '' ) ; } if ( AppName.Length == 0 ) { // This exception gets thrown , even though it obviously is n't a zero length string . throw new ArgumentNullException ( `` AppName '' , `` You must specify an application name '' ) ; } } .method public hidebysig specialname rtspecialname instance void .ctor ( string AppName , string DomainName ) cil managed { .maxstack 5.locals init ( [ 0 ] class [ System ] System.Net.NetworkCredential ldapCredentials , [ 1 ] string [ ] creds , [ 2 ] string userName , [ 3 ] class [ mscorlib ] System.ArgumentNullException exc , [ 4 ] class [ System.DirectoryServices ] System.DirectoryServices.ActiveDirectory.DirectoryContext directoryContext , [ 5 ] class [ System.DirectoryServices ] System.DirectoryServices.ActiveDirectory.Domain domain , [ 6 ] class [ System.DirectoryServices.Protocols ] System.DirectoryServices.Protocols.LdapException V_6 , [ 7 ] class [ mscorlib ] System.Exception V_7 , [ 8 ] bool CS $ 4 $ 0000 , [ 9 ] char [ ] CS $ 0 $ 0001 , [ 10 ] string [ ] CS $ 0 $ 0002 ) L_0000 : ldarg.0 L_0001 : ldsfld string [ mscorlib ] System.String : :EmptyL_0006 : stfld string MyNamespace.MyClass.AppActiveDirectoryDomain : :appOUL_000b : ldarg.0 L_000c : call instance void [ mscorlib ] System.Object : :.ctor ( ) L_0011 : nop L_0012 : nop L_0013 : ldstr `` AOD '' L_0018 : call bool [ mscorlib ] System.String : :IsNullOrEmpty ( string ) L_001d : ldc.i4.0 L_001e : ceq L_0020 : stloc.s CS $ 4 $ 0000L_0022 : ldloc.s CS $ 4 $ 0000L_0024 : brtrue.s L_0037L_0026 : nop L_0027 : ldstr `` AppName '' L_002c : ldstr `` You must specify an application name '' L_0031 : newobj instance void [ mscorlib ] System.ArgumentNullException : :.ctor ( string , string ) L_0036 : throw .method public hidebysig static bool IsNullOrEmpty ( string 'value ' ) cil managed { .maxstack 8 L_0000 : ldarg.0 L_0001 : brfalse.s L_000d L_0003 : ldarg.0 L_0004 : callvirt instance int32 System.String : :get_Length ( ) L_0009 : ldc.i4.0 L_000a : ceq L_000c : ret L_000d : ldc.i4.1 L_000e : ret }"
private decimal ? _blah ; private decimal Blah { get { if ( _blah == null ) _blah = InitBlah ( ) ; return _blah.Value ; } }
"Unable to create a constant value of type 'DemoApp.Member ' . Only primitive types ( 'such as Int32 , String , and Guid ' ) are supported in this context . interface IDemoContext : IDisposable { IDbSet < Member > Members { get ; set ; } IDbSet < Team > Teams { get ; set ; } } public partial class DemoContext : DbContext , IDemoContext { public DemoContext ( ) : base ( `` name=DemoContext '' ) { } public IDbSet < Member > Members { get ; set ; } public IDbSet < Team > Teams { get ; set ; } } public partial class Member { public Member ( ) { this.SecondaryTeams = new HashSet < Team > ( ) ; } public int ID { get ; set ; } public string Name { get ; set ; } public int ? PrimaryTeamID { get ; set ; } public virtual Team PrimaryTeam { get ; set ; } public virtual ICollection < Team > SecondaryTeams { get ; set ; } } public partial class Team { public Team ( ) { this.PrimaryMembers = new HashSet < Member > ( ) ; this.SecondaryMembers = new HashSet < Member > ( ) ; } public int ID { get ; set ; } public string Name { get ; set ; } public virtual ICollection < Member > PrimaryMembers { get ; set ; } public virtual ICollection < Member > SecondaryMembers { get ; set ; } } using ( IDemoContext dbi = new DemoContext ( ) ) { var members = ( from member in dbi.Members select new { Name = member.Name , Team = member.PrimaryTeam.Name , SecondaryTeams = from secondaryTeam in member.SecondaryTeams join primaryMember in dbi.Members on secondaryTeam.ID equals primaryMember.PrimaryTeamID into secondaryTeamMembers select new { Name = secondaryTeam.Name , Count = secondaryTeamMembers.Count ( ) } } ) .ToList ( ) ; } using ( DemoContext dbi = new DemoContext ( ) )"
"public class Order : Entity { public Order ( ) { this.OrderItems = new List < OrderItem > ( ) ; this.OrderItems.InsertingItem += new ListChangingEventHandler < OrderItem > ( OrderItems_InsertingItem ) ; this.OrderItems.SettingItem += new ListChangingEventHandler < OrderItem > ( OrderItems_SettingItem ) ; this.OrderItems.RemovingItem += new ListChangingEventHandler < OrderItem > ( OrderItems_RemovingItem ) ; } virtual public List < OrderItem > OrderItems { get ; internal set ; } void OrderItems_InsertingItem ( object sender , IOperationEventArgs < OrderItem > e ) { if ( ! validationPasses ) { e.Cancel = true ; return ; } e.Item.Parent = this ; } void OrderItems_SettingItem ( object sender , IOperationEventArgs < OrderItem > e ) { if ( ! validationPasses ) { e.Cancel = true ; return ; } e.Item.Parent = this ; } void OrderItems_RemovingItem ( object sender , IOperationEventArgs < OrderItem > e ) { if ( ! validationPasses ) { e.Cancel = true ; return ; } e.Item.Parent = null ; } } public class Order : Entity { public Order ( ) { this.OrderItems = new List < OrderItem > ( ) ; this.OrderItems.ListChanging += new ListChangingEventHandler < OrderItem > ( OrderItems_ListChanging ) ; } virtual public List < OrderItem > OrderItems { get ; internal set ; } void OrderItems_ListChanging ( object sender , IOperationEventArgs < OrderItem > e ) { switch ( e.Action ) { case ListChangingType.Inserting : case ListChangingType.Setting : if ( validationPasses ) { e.Item.Parent = this ; } else { e.Cancel = true ; } break ; case ListChangingType.Removing : if ( validationPasses ) { e.Item.Parent = null ; } else { e.Cancel = true ; } break ; } } }"
HtmlDocument html = new HtmlDocument ( ) ; html.Load ( new StringReader ( Document.Content ) ) ; //Is the < html > I 'm load in database var titles = html.DocumentNode.SelectNodes ( `` //Document-Title '' ) ;
"[ Required ] [ DisplayFormat ( DataFormatString = `` { 0 : dd.MM.yyyy } '' , ApplyFormatInEditMode = true ) ] [ Display ( Name = `` Beginn '' ) ] public DateTime Start { get ; set ; }"
"private static T Execute < T > ( IRestRequest request , string baseUrl ) where T : class , new ( ) { var client = new RestClient ( baseUrl ) ; var response = client.Execute < T > ( request ) ; if ( response.ErrorException ! = null ) { Console.WriteLine ( `` Error : Exception : { 0 } , Headers : { 1 } , Content : { 2 } , Status Code : { 3 } '' , response.ErrorException , response.Headers , response.Content , response.StatusCode ) ; } return response.Data ; } public static ProPayResponse MerchantSignUpForProPay ( ) { var baseUrl = `` https : //xmltestapi.propay.com/ProPayAPI '' ; var request = BuildMerchantTestData ( ) ; var restRequest = CreateRestRequest ( `` SignUp '' , Method.PUT ) ; restRequest.AddJsonBody ( request ) ; return Execute < ProPayResponse > ( restRequest , baseUrl ) ; } private static async Task < RestRequest > CreateRestRequest ( string resource , Method method ) { var credentials = GetCredentials ( ) ; var restRequest = new RestRequest { Resource = resource , Method = method , RequestFormat = DataFormat.Json , } ; restRequest.AddHeader ( `` accept '' , `` application/json '' ) ; restRequest.AddHeader ( `` Authorization '' , credentials ) ; return restRequest ; } private static string GetCredentials ( ) { var termId = `` myterm '' ; // put affiliate term id here , if you have it var certString = `` mycertString '' ; // put affiliate cert string here var encodedCredentials = Convert.ToBase64String ( Encoding.Default.GetBytes ( certString + `` : '' + termId ) ) ; var credentials = $ '' Basic { encodedCredentials } '' ; return credentials ; } Error : Exception : System.Xml.XmlException : '= ' is an unexpected token . The expected token is ' ; ' . Line 26 , position 43. at System.Xml.XmlTextReaderImpl.Throw ( Exception e ) at System.Xml.XmlTextReaderImpl.Throw ( String res , String [ ] args ) at System.Xml.XmlTextReaderImpl.ThrowUnexpectedToken ( String expectedToken1 , String expectedToken2 ) at System.Xml.XmlTextReaderImpl.HandleEntityReference ( Boolean isInAttributeValue , EntityExpandType expandType , Int32 & charRefEndPos ) at System.Xml.XmlTextReaderImpl.ParseText ( Int32 & startPos , Int32 & endPos , Int32 & outOrChars ) at System.Xml.XmlTextReaderImpl.FinishPartialValue ( ) at System.Xml.XmlTextReaderImpl.get_Value ( ) at System.Xml.Linq.XContainer.ContentReader.ReadContentFrom ( XContainer rootContainer , XmlReader r ) at System.Xml.Linq.XContainer.ReadContentFrom ( XmlReader r ) at System.Xml.Linq.XContainer.ReadContentFrom ( XmlReader r , LoadOptions o ) at System.Xml.Linq.XDocument.Load ( XmlReader reader , LoadOptions options ) at System.Xml.Linq.XDocument.Parse ( String text , LoadOptions options ) at RestSharp.Deserializers.XmlDeserializer.Deserialize [ T ] ( IRestResponse response ) at RestSharp.RestClient.Deserialize [ T ] ( IRestRequest request , IRestResponse raw ) , Headers : System.Collections.Generic.List ` 1 [ RestSharp.Parameter ] , Content : Error : Exception : System.Xml.XmlException : Data at the root level is invalid . Line 1 , position 1.at System.Xml.XmlTextReaderImpl.Throw ( Exception e ) at System.Xml.XmlTextReaderImpl.Throw ( String res , String arg ) at System.Xml.XmlTextReaderImpl.ParseRootLevelWhitespace ( ) at System.Xml.XmlTextReaderImpl.ParseDocumentContent ( ) at System.Xml.XmlTextReaderImpl.Read ( ) at System.Xml.Linq.XDocument.Load ( XmlReader reader , LoadOptions options ) at System.Xml.Linq.XDocument.Parse ( String text , LoadOptions options ) at RestSharp.Deserializers.XmlDeserializer.Deserialize [ T ] ( IRestResponse response ) at RestSharp.RestClient.Deserialize [ T ] ( IRestRequest request , IRestResponse raw ) , Message : Data at the root level is invalid . Line 1 , position 1. , Headers : System.Collections.Generic.List ` 1 [ RestSharp.Parameter ] , Content : ? < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? >"
"public class Foo : DynamicObject { /// < summary > /// Gets or sets the properties . /// < /summary > /// < value > The properties. < /value > public Dictionary < string , object > Properties { get ; set ; } = new Dictionary < string , object > ( ) ; /// < summary > /// Gets the count . /// < /summary > /// < value > The count. < /value > public int Count = > Properties.Keys.Count ; } public static void Main ( ) { Foo foo= new Foo ( ) ; foo.Properties = new Dictionary < string , object > ( ) { { `` SomeId '' , 123 } , { `` DataType '' , '' UnKnonw '' } , { `` SomeOtherId '' , 456 } , { `` EmpName '' , `` Pranay Deep '' } , { `` EmpId '' , `` 789 '' } , { `` RandomProperty '' , `` 576Wow_Omg '' } } ; //Now serializing.. string jsonFoo = JsonConvert.SerializeObject ( foo ) ; //Here jsonFoo = `` { } '' .. why ? Foo foo2= JsonConvert.DeserializeObject < Foo > ( jsonFoo ) ; }"
"private void ThisCollectionChanged ( object sender , NotifyCollectionChangedEventArgs e ) { Item I = e.NewItems._________ ; // < < < < < can not access any property to get the item var j = e.NewItems ; //System.Collections.ArrayList.ReadOnlyList , see if you can find in the MSDN docs . IList I1 = ( IList ) e.NewItems ; //Cast fails . IList < Item > = ( IList < Item > ) e.NewItems.________ ; // < < < < < < < Ca n't make this cast without an IList.Item [ Index ] accessor . var i = j [ 0 ] ; //null var ioption = j.Item [ 0 ] ; //no such accessor string s = ( string ) i ; //null }"
// this ... void Foo ( Type T ) ; // ... over this.void Foo < T > ( ) ;
global : :System.String
extern `` C '' { int get_mac_address ( char * mac ) ; //the function returns a mac address in the char * mac } public class Hwdinfo { [ DllImport ( `` mydll.dll '' ) ] public static extern void get_mac_address ( string s ) ; }
dynamic = < exp > ;
public class MyClass : IInterface { void IInterface.NoneWillCall ( int ragh ) { } }
"// Contains 4*1920*1080 entries of color-info : BGRA|BGRA|BGRA..byte [ ] cFrameData = new byte [ 4 * cWidth * cHeight ] ; cFrame.CopyConvertedFrameDataToArray ( cFrameData , ColorImageFormat.Bgra ) ; // Has 512*424 entries with depth informationushort [ ] dFrameData = new ushort [ dWidth* dHeight ] ; dFrame.CopyFrameDataToArray ( dFrameData ) ; // Create the array that contains the color information for every depth-pixelbyte [ ] dColors = new byte [ 4 * dFrameData.Length ] ; for ( int i = 0 , j = 0 ; i < cFrameData.Length ; ++i ) { // The mapped color index . -- - > I 'm stuck here : int colIx = ? ; dColors [ j ] = cFrameData [ colIx ] ; // B dColors [ j + 1 ] = cFrameData [ colIx + 1 ] ; // G dColors [ j + 2 ] = cFrameData [ colIx + 2 ] ; // R dColors [ j + 3 ] = cFrameData [ colIx + 3 ] ; // A j += 4 ; } // Lookup table for color-point informationColorSpacePoint [ ] cSpacePoints = new ColorSpacePoint [ dWidth * dHeight ] ; this.kinectSensor.CoordinateMapper.MapDepthFrameToColorSpace ( dFrameData , cSpacePoints ) ; int x = ( int ) ( cSpacePoints [ i ] .X + 0.5f ) ; int y = ( int ) ( cSpacePoints [ i ] .Y + 0.5f ) ; int ix = x * cWidth + y ; byte r = cFrameData [ ix + 2 ] ; byte g = cFrameData [ ix + 1 ] ; byte b = cFrameData [ ix ] ; byte a = cFrameData [ ix + 3 ] ;"
public class Foo { public Foo ( string test ) { Test = test ; } public string Test { get ; set ; } }
"void ObjectFollowCursor ( ) { Ray ray = Camera.main.ScreenPointToRay ( Input.mousePosition ) ; Vector3 point = ray.origin + ( ray.direction * distance ) ; Vector3 temp = point ; temp.y = 0.2f ; // limits player on y axis cursorObject.position = temp ; } // If puck hits playerif ( collision.gameObject.tag == `` Player '' ) { Vector3 forceVec = this.GetComponent < Rigidbody > ( ) .velocity.normalized * hitForce ; rb.AddForce ( forceVec , ForceMode.Impulse ) ; Debug.Log ( `` Player Hit '' ) ; }"
class Wrapped < T > : IDisposable { public Wrapped ( T obj ) { /* ... */ } public static implicit operator Wrapped < T > ( T obj ) { return new Wrapped < T > ( obj ) ; } public void Dispose ( ) { /* ... */ } } interface IX { /* ... */ } class X : IX { /* ... */ } ... IX plainIX = new X ( ) ; using ( Wrapped < IX > wrappedIX = plainIX ) { /* ... */ }
"string myName = `` John '' , myAge = `` 33 '' , myAddress = `` Melbourne '' ; Test ( myName , myAge , myAddress ) ; private static void Test ( params string [ ] values ) { List < string > keyValueList = new List < string > ( ) ; //for ( int i = 0 ; i < values.Length ; i++ ) foreach ( var p in values ) { // '' Key '' is always `` p '' , obviously Console.WriteLine ( $ '' Key : { nameof ( p ) } , Value : { p } '' ) ; } }"
"List < int > _lstNeedToOrder = new List < int > ( ) ; _lstNeedToOrder.AddRange ( new int [ ] { 1 , 5 , 6 , 8 } ) ; //I need to sort this based on the below list.List < int > _lstOrdered = new List < int > ( ) ; //to order by this list_lstOrdered.AddRange ( new int [ ] { 13 , 5 , 11 , 1 , 4 , 9 , 2 , 7 , 12 , 10 , 3 , 8 , 6 } ) ; order will be -- > _lstNeedToOrder = 5,1,8,6"
interface I1 { } class CI1 : I1 { } List < CI1 > listOfCI1 = new List < CI1 > ( ) ; IEnumerable < I1 > enumerableOfI1 = listOfCI1 ; //this worksIList < I1 > listofI1 = listOfCI1 ; //this does not List < I1 > listOfI12 = listOfCI1 ;
public class MultiCollectionEnumerable < T > : IEnumerable < T > { private MultiCollectionEnumerator < T > enumerator ; public MultiCollectionEnumerable ( params IEnumerable < T > [ ] collections ) { enumerator = new MultiCollectionEnumerator < T > ( collections ) ; } public IEnumerator < T > GetEnumerator ( ) { enumerator.Reset ( ) ; return enumerator ; } IEnumerator IEnumerable.GetEnumerator ( ) { enumerator.Reset ( ) ; return enumerator ; } private class MultiCollectionEnumerator < T > : IEnumerator < T > { private IEnumerable < T > [ ] collections ; private int currentIndex ; private IEnumerator < T > currentEnumerator ; public MultiCollectionEnumerator ( IEnumerable < T > [ ] collections ) { this.collections = collections ; this.currentIndex = -1 ; } public T Current { get { if ( currentEnumerator ! = null ) return currentEnumerator.Current ; else return default ( T ) ; } } public void Dispose ( ) { if ( currentEnumerator ! = null ) currentEnumerator.Dispose ( ) ; } object IEnumerator.Current { get { return Current ; } } public bool MoveNext ( ) { if ( currentIndex > = collections.Length ) return false ; if ( currentIndex < 0 ) { currentIndex = 0 ; if ( collections.Length > 0 ) currentEnumerator = collections [ 0 ] .GetEnumerator ( ) ; else return false ; } while ( ! currentEnumerator.MoveNext ( ) ) { currentEnumerator.Dispose ( ) ; currentEnumerator = null ; currentIndex++ ; if ( currentIndex > = collections.Length ) return false ; currentEnumerator = collections [ currentIndex ] .GetEnumerator ( ) ; } return true ; } public void Reset ( ) { if ( currentEnumerator ! = null ) { currentEnumerator.Dispose ( ) ; currentEnumerator = null ; } this.currentIndex = -1 ; } } }
string y = x == null ? `` '' : x ; string y = # x ; public static string ToNotNull ( this string value ) { return value == null ? `` '' : value ; } string y = x.ToNotNull ( ) ;
public class MyClass { public string s1 ; public string s2 ; public int v1 ; public MyClass ( ) { s1 = `` '' ; s2 = `` '' ; v1 = 0 ; } public MyClass ( MyClass s ) { this = s ; //Error on this line } } MyClass a = new MyClass ( ) ; MyClass b = new MyClass ( a ) ;
"POST https : //core-mydocker. # # # # /signin-wsfed HTTP/1.1Accept : image/gif , image/jpeg , image/pjpeg , application/x-ms-application , application/xaml+xml , application/x-ms-xbap , */*Referer : https : //sts-mydocker. # # # # /Pages/Email/Default.aspx ? wtrealm=https % 3a % 2f % 2fcore-mydocker. # # # # % 2f & wa=wsignin1.0 & wreply=https % 3a % 2f % 2fcore-mydocker. # # # # % 2fsignin-wsfed & wctx= # # # # # Accept-Language : fr-FR , fr ; q=0.8 , en-GB ; q=0.6 , en ; q=0.4 , ja ; q=0.2User-Agent : Mozilla/5.0 ( compatible ; MSIE 9.0 ; Windows NT 6.2 ; WOW64 ; Trident/7.0 ) Content-Type : application/x-www-form-urlencodedAccept-Encoding : gzip , deflateHost : core-mydocker. # # # # Content-Length : 10612Connection : Keep-AliveCache-Control : no-cache HTTP/1.1 302 FoundServer : nginx/1.12.2Date : Thu , 21 Feb 2019 09:39:34 GMTContent-Length : 0Connection : keep-aliveCache-Control : no-cachePragma : no-cacheExpires : Thu , 01 Jan 1970 00:00:00 GMTLocation : http : //core-mydocker. # # # # /AuthenticateSet-Cookie : .AspNetCore.Correlation.WsFederation. # # # # # # = ; expires=Thu , 01 Jan 1970 00:00:00 GMT ; path=/ ; HTTPOnly ; Securesignin-wsfed ; httponlySet-Cookie : FedAuth= # # # # # # # =/ ; HTTPOnly ; Secure ; httponlyAccess-Control-Allow-Credentials : trueAccess-Control-Allow-Origin : https : //mydocker. # # # #"
"T [ ] arr = ... ; fixed ( T* ptr = arr ) { // Use ptr here . } Can not take the address of , get the size of , or declare a pointer to a managed type"
"List < Expression < Func < Products , Object > > > list = new List < Expression < Func < Products , Object > > > ( ) { p = > p.Name , p = > p.Id } ; var expr = list [ 0 ] ; myProducts.OrderBy ( expr ) ;"
"var path = Path.Combine ( Path.GetTempPath ( ) , Path.GetFileNameWithoutExtension ( Path.GetRandomFileName ( ) ) ) ; Directory.CreateDirectory ( path ) ; var testFile = Path.Combine ( path , `` test.txt '' ) ; File.WriteAllText ( testFile , `` Test file '' ) ; var source = Repository.Init ( path ) ; using ( var repository = new Repository ( source ) ) { repository.Index.Add ( `` test.txt '' ) ; } Directory.Delete ( path , true ) ;"
"using System.Collections.Generic ; using System.Runtime.Serialization ; using System.ServiceModel ; using System.ServiceModel.Web ; namespace BookStore { [ ServiceContract ] public interface IBookStore { [ OperationContract ] [ WebGet ] List < Book > GetBooksList ( ) ; [ OperationContract ] [ WebGet ( UriTemplate = `` GetBook/ { id } '' ) ] // The value of UriTemplate defines the name that the // client should use to turn to the function Book GetBookById ( int id ) ; [ OperationContract ] [ WebInvoke ( UriTemplate = `` AddBook/ { name } '' , Method = `` PUT '' ) ] void AddBook ( string name ) ; [ OperationContract ] [ WebInvoke ( UriTemplate = `` UpdateBook/ { id } / { name } '' , Method = `` POST '' ) ] void UpdateBook ( int id , string name ) ; [ OperationContract ] [ WebInvoke ( UriTemplate = `` DeleteBook/ { id } '' , Method = `` DELETE '' ) ] void DeleteBook ( int id ) ; } [ DataContract ] public class Book { int id ; string name ; [ DataMember ] public int ID { get { return id ; } set { id = value ; } } [ DataMember ] public string Name { get { return name ; } set { name = value ; } } } } using System.Collections.Generic ; using System.ServiceModel ; using System.ServiceModel.Activation ; namespace BookStore { [ AspNetCompatibilityRequirements ( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed ) ] [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single ) ] public class BookStoreImpl : IBookStore { public void AddBook ( string name ) { using ( var db = new BookStoreContext ( ) ) { Book book = new BookStore.Book { Name = name } ; db.Books.Add ( book ) ; db.SaveChanges ( ) ; } } public void DeleteBook ( int id ) { try { using ( var db = new BookStoreContext ( ) ) { Book book = db.Books.Find ( id ) ; db.Books.Remove ( book ) ; db.SaveChanges ( ) ; } } catch { throw new FaultException ( `` Something went wrong '' ) ; } } public Book GetBookById ( int id ) { using ( var db = new BookStoreContext ( ) ) { return db.Books.Find ( id ) ; } } public List < Book > GetBooksList ( ) { List < Book > allBooks = new List < Book > ( ) ; try { using ( var db = new BookStoreContext ( ) ) { IEnumerator < Book > booksEnum = db.Books.GetEnumerator ( ) ; booksEnum.Reset ( ) ; while ( booksEnum.MoveNext ( ) ) { allBooks.Add ( booksEnum.Current ) ; } } } catch { throw new FaultException ( `` Something went wrong '' ) ; } return allBooks ; } public void UpdateBook ( int id , string name ) { try { using ( var db = new BookStoreContext ( ) ) { Book book = db.Books.Find ( id ) ; book.Name = name ; db.SaveChanges ( ) ; } } catch { throw new FaultException ( `` Something went wrong '' ) ; } } } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < configSections > < ! -- For more information on Entity Framework configuration , visit http : //go.microsoft.com/fwlink/ ? LinkID=237468 -- > < section name= '' entityFramework '' type= '' System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection , EntityFramework , Version=6.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' requirePermission= '' false '' / > < /configSections > < appSettings > < add key= '' aspnet : UseTaskFriendlySynchronizationContext '' value= '' true '' / > < /appSettings > < system.web > < compilation debug= '' true '' targetFramework= '' 4.5.2 '' / > < httpRuntime targetFramework= '' 4.5.2 '' / > < httpModules > < add name= '' ApplicationInsightsWebTracking '' type= '' Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule , Microsoft.AI.Web '' / > < /httpModules > < /system.web > < system.serviceModel > < behaviors > < serviceBehaviors > < behavior name= '' MyServiceBehavior '' > < serviceMetadata httpGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' true '' / > < /behavior > < /serviceBehaviors > < endpointBehaviors > < behavior name= '' WebBehavior '' > < webHttp / > < /behavior > < /endpointBehaviors > < /behaviors > < services > < service behaviorConfiguration= '' MyServiceBehavior '' name= '' BookStore.BookStoreImpl '' > < endpoint address= '' http : //localhost:8080/bookservice/ '' binding= '' wsHttpBinding '' contract= '' BookStore.IBookStore '' / > < endpoint address= '' '' behaviorConfiguration= '' WebBehavior '' binding= '' webHttpBinding '' contract= '' BookStore.IBookStore '' > < /endpoint > < endpoint address= '' mex '' binding= '' mexHttpBinding '' contract= '' IMetadataExchange '' / > < /service > < /services > < /system.serviceModel > < ! -- < system.serviceModel > < services > < service name= '' BookStore.BookStoreImpl '' > < endpoint address= '' http : //localhost:8080/bookservice '' behaviorConfiguration= '' restfulBehavior '' binding= '' webHttpBinding '' bindingConfiguration= '' '' contract= '' BookStore.IBookStore '' / > < host > < baseAddresses > < add baseAddress= '' http : //localhost:8080/bookservice '' / > < /baseAddresses > < /host > < /service > < /services > < behaviors > < serviceBehaviors > < behavior > < serviceMetadata httpGetEnabled= '' true '' httpsGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' false '' / > < /behavior > < /serviceBehaviors > < endpointBehaviors > < behavior name= '' restfulBehavior '' > < webHttp / > < /behavior > < /endpointBehaviors > < /behaviors > < protocolMapping > < add binding= '' basicHttpsBinding '' scheme= '' https '' / > < /protocolMapping > < serviceHostingEnvironment aspNetCompatibilityEnabled= '' true '' multipleSiteBindingsEnabled= '' true '' / > < /system.serviceModel > -- > < system.webServer > < modules runAllManagedModulesForAllRequests= '' true '' > < remove name= '' ApplicationInsightsWebTracking '' / > < add name= '' ApplicationInsightsWebTracking '' type= '' Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule , Microsoft.AI.Web '' preCondition= '' managedHandler '' / > < /modules > < ! -- To browse web app root directory during debugging , set the value below to true . Set to false before deployment to avoid disclosing web app folder information . -- > < directoryBrowse enabled= '' true '' / > < validation validateIntegratedModeConfiguration= '' false '' / > < /system.webServer > < entityFramework > < defaultConnectionFactory type= '' System.Data.Entity.Infrastructure.LocalDbConnectionFactory , EntityFramework '' > < parameters > < parameter value= '' mssqllocaldb '' / > < /parameters > < /defaultConnectionFactory > < providers > < provider invariantName= '' System.Data.SqlClient '' type= '' System.Data.Entity.SqlServer.SqlProviderServices , EntityFramework.SqlServer '' / > < /providers > < /entityFramework > < /configuration >"
"-- -- -- -- -- -- id | state -- -- -- -- -- -- 1 |xxx2 |yyy -- -- -- -- -- -- -- -id|Name |stateid -- -- -- -- -- -- -- 1|aaa |12|abb |13|ccc |24|dds |2 -- -- -- -- -- -- -- -- -- state |count -- -- -- -- -- -- -- -- -- -xxx | 2yyy | 2 var count= ( from n in bc.db.state select new { states = n.state , count = ( from c in bc.db.namelist where c.stateid == n.id select n ) .Count ( ) } ) ;"
"delegate ( ) { // type impl here , but not implementing any interface } new IInterface ( ) { // interface methods impl here } public void RunTest ( ) { Cleanup ( delegate ( ) { return `` hello from anonymous type '' ; } ) ; } private void Cleanup ( GetString obj ) { Console.WriteLine ( `` str from delegate `` + obj ( ) ) ; } delegate string GetString ( ) ;"
"double dbl ; Double.TryParse ( `` 20.0 '' , out dbl ) ;"
var nextLineDescription = `` \n\t\t\t\t\t '' ; // for formatting Console.WriteLine ( `` ARGUMENTS '' ) ; Console.WriteLine ( `` '' ) ; Console.WriteLine ( `` \t -- someparameter= < number > \t\t '' + `` Description of the parameter '' + nextLineDescription + `` that can span multiple lines '' + nextLineDescription + `` and defaults to 5.\n '' ) ; ARGUMENTS -- someparameter=number Description of the parameter that can span multiple lines and defaults to 5 -- nextParameter Next description ...
"[ DllImport ( `` SDL2.dll '' , CallingConvention = CallingConvention.Cdecl , EntryPoint = `` SDL_GetError '' ) ] private static extern IntPtr SDL_GetError ( ) ; public static string GetError ( ) { return Marshal.PtrToStringAnsi ( SDL_GetError ( ) ) ; } [ DllImport ( `` SDL2.dll '' , CallingConvention = CallingConvention.Cdecl , EntryPoint = `` SDL_GetError '' ) ] [ return : MarshalAs ( UnmanagedType.LPStr ) ] public static extern string GetError ( ) ;"
"public struct MyStruct { private int _i ; public MyStruct ( int i ) { _i = i ; } public static bool operator true ( MyStruct ms ) { return ms._i > 0 ; } public static bool operator false ( MyStruct ms ) { return ms._i < = 0 ; } public override string ToString ( ) { return this._i.ToString ( ) ; } } class Program { private static void Main ( ) { MyStruct b1 = new MyStruct ( 1 ) ; // to be considered true MyStruct b2 = new MyStruct ( -1 ) ; // to be considered false Console.WriteLine ( b1 & & b2 ) ; Console.WriteLine ( b2 & & b1 ) ; } } public static MyStruct operator & ( MyStruct lhs , MyStruct rhs ) { return new MyStruct ( lhs._i & rhs._i ) ; }"
class Program { static void Main ( string [ ] args ) { Console.Write ( `` Number of elements in the array : `` ) ; int numberOfElements = int.Parse ( Console.ReadLine ( ) ) ; int [ ] array = new int [ numberOfElements ] ; for ( int i = 0 ; i < numberOfElements ; i++ ) { Console.Write ( $ '' Element no { i+1 } : `` ) ; array [ i ] = int.Parse ( Console.ReadLine ( ) ) ; } for ( int i = 0 ; i < array.Length ; i++ ) { int count = 0 ; for ( int j = 0 ; j < array.Length ; j++ ) { if ( array [ i ] == array [ j ] ) { count++ ; } } Console.WriteLine ( $ '' { array [ i ] } appears `` + count + `` times '' ) ; } } } }
select 'GO ' go select 1 as go Go select 100
"using Newtonsoft.Json ; using Newtonsoft.Json.Serialization ; using System ; namespace Test { public class Input { public int TypeId { get ; set ; } public object ObjectDefinesInput ; } public class VoiceInput { public string Language ; } public class TextInput { public string Encoding ; } public interface IResponse { void Respond ( ) ; } public class VoiceResponse : IResponse { private VoiceInput input { get ; set ; } public VoiceResponse ( VoiceInput input ) { this.input = input ; } public void Respond ( ) { // use information on VoiceInput to do something Console.WriteLine ( `` ( In `` + this.input.Language + '' ) : beep buup boop . `` ) ; } } public class TextResponse : IResponse { private TextInput input { get ; set ; } public TextResponse ( TextInput input ) { this.input = input ; } public void Respond ( ) { Console.WriteLine ( `` I am a text handler . Using `` + this.input.Encoding + '' . `` ) ; } } public static class ResponseFactory { public static IResponse CreateResponseHandler ( Input input ) { // -- -- -- -- -- -- -- -- - ISSUE HERE -- -- -- -- -- -- -- -- -- -- -- -- -- -- -// // I 'm using JsonConvert to serialize an < object > to a string , and then string jsonObjectDefinesInput = JsonConvert.SerializeObject ( input.ObjectDefinesInput , new JsonSerializerSettings { Formatting = Formatting.Indented , ContractResolver = new CamelCasePropertyNamesContractResolver ( ) } ) ; switch ( input.TypeId ) { case 1 : // ( VoiceInput ) input.ObjectDefinesInput throws exception // input.ObjectDefinesInput as VoiceInput returns null VoiceInput voiceInput = JsonConvert.DeserializeObject < VoiceInput > ( jsonObjectDefinesInput ) ; return new VoiceResponse ( voiceInput ) ; default : TextInput textInput = JsonConvert.DeserializeObject < TextInput > ( jsonObjectDefinesInput ) ; return new TextResponse ( textInput ) ; } } } public class Program { public static void Main ( string [ ] args ) { string jsonData1 = `` { \ '' typeId\ '' : 1 , \ '' ObjectDefinesInput\ '' : { \ '' Language\ '' : \ '' Robot\ '' } } '' ; string jsonData2 = `` { \ '' typeId\ '' : 2 , \ '' ObjectDefinesInput\ '' : { \ '' Encoding\ '' : \ '' UTF-8\ '' } } '' ; Input someInpput1 = JsonConvert.DeserializeObject < Input > ( jsonData1 ) ; Input someInpput2 = JsonConvert.DeserializeObject < Input > ( jsonData2 ) ; IResponse testResponse1 = ResponseFactory.CreateResponseHandler ( someInpput1 ) ; IResponse testResponse2 = ResponseFactory.CreateResponseHandler ( someInpput2 ) ; testResponse1.Respond ( ) ; testResponse2.Respond ( ) ; Console.ReadLine ( ) ; } } }"
"public class MyDataObject { public string FooProperty { get ; set ; } } void Bind ( ) { var gridView = myListView.View as GridView ; gridView.Columns.Clear ( ) ; gridView.Columns.Add ( new GridViewColumn ( ) { Header = `` FooHeader '' , DisplayMember = new Binding ( `` FooProperty '' ) } ) ; List < MyDataObject > source = GetData ( ) ; myListView.ItemsSource = source ; }"
class foo : IDoo { }
VEHICLE ID : int PK Owner : varchar ( 50 ) Consumption : float FirstCirculationDate : date Type : varchar ( 50 ) Discriminator : varchar ( 10 )
"@ { Html.RenderPartialIf ( `` _SideNav '' , Request.IsAuthenticated ) ; } @ { Html.RenderPartial ( `` _CurrentUser '' ) ; } < div class= '' login-info '' > < span > < a href= '' javascript : void ( 0 ) ; '' id= '' show-shortcut '' data-action= '' toggleShortcut '' > < img src= '' ~/content/img/avatars/sunny.png '' alt= '' me '' class= '' online '' / > < span > @ User.Identity.Name < /span > < i class= '' fa fa-angle-down '' > < /i > < /a > < /span > < /div > FormsAuthentication.SetAuthCookie ( username , isPersistent ) ; ... ..HttpContext.Current.User = new GenericPrincipal ( new GenericIdentity ( username , `` Forms '' ) , roles ) ;"
[ 0 ] a [ 1 ] a [ 2 ] b [ 3 ] c [ 4 ] c [ 5 ] a [ 6 ] c [ 7 ] d [ 8 ] c [ 9 ] d [ 0 ] a [ 1 ] b [ 2 ] c [ 3 ] a [ 4 ] c [ 5 ] d [ 0 ] c [ 1 ] d [ 2 ] c [ 3 ] d [ 0 ] c [ 1 ] d
private Int64 count ; private object _myLock ; public Int64 Count { get { lock ( _myLock ) { return count ; } } } public void Increment { Interlocked.Increment ( ref count ) ; }
myObject.Stub ( s = > s.MyMethod ( null ) ) .IgnoreArguments ( ) .Return ( `` bleh '' ) ; var s = `` s '' ;
"Expression < Func < T , object > > Expression < Func < T , bool > > Expression < Func < T , object > > myExpression = model= > Convert ( model.IsAnAirplane ) Expression < Func < T , bool > > myExpression = model= > model.IsAnAirplane Expression < Func < T , bool > > myExpression = model= > Convert ( Convert ( model.IsAnAirplane ) )"
public Currency ( Guid ? vcurrencyUI = null ) : base ( vcurrencyUI ) { } public Currency ( Guid ? vcurrencyUI ) : base ( vcurrencyUI ) { } public Currency ( ) : base ( ) { }
"[ ServiceContract ] public interface IDtoService { [ OperationContract ] MyDto GetData ( int value ) ; } public enum Rating { None = 0 , NotSet = 1 , Somevalue = 34 } [ DataContract ] public class MyDto { Rating _rate ; [ DataMember ] public Rating Rating { get { return _rate ; } set { _rate = value ; } } } public class DtoService : IDtoService { public MyDto GetData ( int value ) { var dto = new MyDto { Rating = ( Rating ) 42 } ; // not in ENUM ! return dto ; } } var cl = new DtoServiceClient.DtoServiceClient ( ) ; var tada = cl.GetData ( 1 ) ; // connection closed exception Debug.Assert ( Enum.IsDefined ( typeof ( Rating ) , value ) , '' value is not valid for this enum '' ) ; System.Diagnostics.Contracts.Contract.Assert ( Enum.IsDefined ( typeof ( Rating ) , value ) ) ;"
"public class PersonDto { public int id { get ; set ; } //i want resharper to accept this as a valid name , // but only in this context . public string Name { get ; set ; } public string _CID { get ; set ; } //some external api is sending me data named like this }"
static void Main ( string [ ] args ) { A a = new A ( ) ; ( a.b ) .i = 100 ; } class A { private B _b = new B ( ) ; public B b { get { return _b ; } } } class B { public int i ; }
foreach ( var item in aCollection ) Debug.WriteLine ( item.Name ) ;
ABBCCCDDDDEEEEEFFFFFF FFFFFFDDDDBBACCCEEEEE
[ DataContract ] public class SomeModel { [ DataMember ( Name = `` id '' ) ] public string Id { get ; set ; } // ... }
"//all of the following output `` Nada , Zilch , One '' Console.WriteLine ( TestEnum.One ) ; Console.WriteLine ( Convert.ToString ( TestEnum.One ) ) ; Console.WriteLine ( TypeDescriptor.GetConverter ( typeof ( TestEnum ) ) .ConvertToString ( TestEnum.One ) ) ; [ Flags ] enum TestEnum { Zero = 0 , Nada = 0 , Zilch = 0 , One = 1 } var types = typeof ( void ) .Assembly.GetTypes ( ) .Where ( type = > type.IsEnum & & type.IsPublic & & Enum.GetValues ( type ) .Cast < object > ( ) .GroupBy ( value = > value ) .Any ( grp = > grp.Count ( ) > 1 ) ) .ToList ( ) ;"
"private void MainForm_Activated ( object sender , EventArgs e ) { if ( Open == true ) { //blink active window _addForm.Activate ( ) ; //makes window active } }"
GlobalMouseHandler globalClick = new GlobalMouseHandler ( ) ; System.Windows.Forms.Application.AddMessageFilter ( globalClick ) ; public class GlobalMouseHandler : System.Windows.Forms.IMessageFilter { private const int WM_LBUTTONDOWN = 0x201 ; private const int WM_RBUTTONDOWN = 0x204 ; public bool PreFilterMessage ( ref System.Windows.Forms.Message m ) { if ( m.Msg == WM_LBUTTONDOWN || m.Msg == WM_RBUTTONDOWN ) { var c = System.Windows.Forms.Control.FromHandle ( m.HWnd ) ; if ( c ! = null ) // TODO : CLOSE ALL WPF MENUS ETC // Did n't work : MainWindow.Instance.ARandomControl.Focus ( ) ; } return false ; } }
Start Value : 1End Value : 10Value Holders : 10|Expected Result : 1 2 3 4 5 6 7 8 9 10 Start Value : 1End Value : 10Value Holders : 5|Expected Result : 1 3 5 8 10 or 1 3 6 8 10Start Value : 1End Value : 10Value Holders : 3|Expected Result : 1 5 10 or 1 6 10 Start Value : 1End Value : 10Value Holders : 15|Expected Result : 1 2 3 4 4 5 5 6 6 7 7 8 8 9 10 ( or something similar )
"public partial class Form1 : Form { private readonly BindingList < string > List = new BindingList < string > ( ) ; public Form1 ( ) { InitializeComponent ( ) ; listBox1.DataSource = List ; listBox1.SelectedValueChanged += ( s , e ) = > System.Diagnostics.Debug.WriteLine ( `` VALUE '' ) ; listBox1.SelectedIndexChanged += ( s , e ) = > System.Diagnostics.Debug.WriteLine ( `` INDEX '' ) ; addButton.Click += ( s , e ) = > List.Add ( `` Item `` + ( List.Count + 1 ) ) ; removeButton.Click += ( s , e ) = > List.RemoveAt ( List.Count - 1 ) ; logSelectionButton.Click += ( s , e ) = > { System.Diagnostics.Debug.WriteLine ( `` Selected Index : `` + listBox1.SelectedIndex ) ; System.Diagnostics.Debug.WriteLine ( `` Selected Value : `` + listBox1.SelectedValue ) ; } ; } }"
public class Employee { public int Id { get ; set ; } public String Name { get ; set ; } public virtual Department Department { get ; set ; } } internal class EmployeeMapping : EntityTypeConfiguration < Employee > { public EmployeeMapping ( ) { HasKey ( a = > a.Id ) ; Property ( a = > a.Id ) .HasColumnName ( `` UserId '' ) ; HasRequired < Department > ( a = > a.Department ) .WithOptional ( ) .Map ( a = > a.MapKey ( `` DepartmentId '' ) ) ; } } public class Department { public int Id { get ; set ; } public String Name { get ; set ; } } internal class DepartmentMapping : EntityTypeConfiguration < Department > { public DepartmentMapping ( ) { HasKey ( a = > a.Id ) ; Property ( a = > a.Id ) .HasColumnName ( `` DepartmentId '' ) ; } } public class Rota { public int Id { get ; set ; } public virtual Employee Employee { get ; set ; } public virtual Department Department { get ; set ; } } internal class RotaMapping : EntityTypeConfiguration < Rota > { public RotaMapping ( ) { HasKey ( a = > a.Id ) ; Property ( a = > a.Id ) .HasColumnName ( `` RotaId '' ) ; HasOptional < Employee > ( a = > a.Employee ) .WithOptionalDependent ( ) .Map ( a = > a.MapKey ( `` EmployeeId '' ) ) ; HasOptional < Department > ( a = > a.Department ) .WithOptionalDependent ( ) .Map ( a = > a.MapKey ( `` DepartmentId '' ) ) ; } }
"public interface IRepository { IDisposable CreateConnection ( ) ; User GetUser ( ) ; //other methods , doesnt matter } public class Repository { private SqlConnection _connection ; IDisposable CreateConnection ( ) { _connection = new SqlConnection ( ) ; _connection.Open ( ) ; return _connection ; } User GetUser ( ) { //using _connection gets User from Database //assumes _connection is not null and open } //other methods , doesnt matter } using ( _repository.CreateConnection ( ) ) { var user = _repository.GetUser ( ) ; //do something with user }"
"Func < bool , WeakReference > create = disposed = > { var cache = new MemoryCache ( `` my cache '' ) ; if ( disposed ) { cache.Dispose ( ) ; } return new WeakReference ( cache ) ; } ; // with false , we loop forever . With true , we exitvar weakCache = create ( false ) ; while ( weakCache.IsAlive ) { `` Still waiting ... '' .Dump ( ) ; Thread.Sleep ( 1000 ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; } '' Cleaned up ! `` .Dump ( ) ; MANAGED_STACK : SP IP Function 000000298835E6D0 0000000000000001 System_Web ! System.Web.Hosting.UnsafeIISMethods.MgdGetSiteNameFromId ( IntPtr , UInt32 , IntPtr ByRef , Int32 ByRef ) +0x2 000000298835E7B0 000007F7C56C7F2F System_Web ! System.Web.Configuration.ProcessHostConfigUtils.GetSiteNameFromId ( UInt32 ) +0x7f 000000298835E810 000007F7C56DCB68 System_Web ! System.Web.Configuration.ProcessHostMapPath.MapPathCaching ( System.String , System.Web.VirtualPath ) +0x2a8 000000298835E8C0 000007F7C5B9FD52 System_Web ! System.Web.Hosting.HostingEnvironment.MapPathActual ( System.Web.VirtualPath , Boolean ) +0x142 000000298835E940 000007F7C5B9FABB System_Web ! System.Web.CachedPathData.GetPhysicalPath ( System.Web.VirtualPath ) +0x2b 000000298835E9A0 000007F7C5B99E9E System_Web ! System.Web.CachedPathData.GetConfigPathData ( System.String ) +0x2ce 000000298835EB00 000007F7C5B99E19 System_Web ! System.Web.CachedPathData.GetConfigPathData ( System.String ) +0x249 000000298835EC60 000007F7C5BB008D System_Web ! System.Web.Configuration.HttpConfigurationSystem.GetApplicationSection ( System.String ) +0x1d 000000298835EC90 000007F7C5BAFDD6 System_Configuration ! System.Configuration.ConfigurationManager.GetSection ( System.String ) +0x56 000000298835ECC0 000007F7C63A11AE System_Runtime_Caching ! Unknown+0x3e 000000298835ED20 000007F7C63A1115 System_Runtime_Caching ! Unknown+0x75 000000298835ED60 000007F7C639C3C5 System_Runtime_Caching ! Unknown+0xe5 000000298835EDD0 000007F7C7628D86 System_Runtime_Caching ! Unknown+0x86 // my code here"
"enum Letters { A , B , C , D , E } var frozenLetter = fixture.Freeze ( Letters.D ) ; var letter = fixture.Create < Letters > ( ) ; var anotherLetter = fixture.Create < Letters > ( ) ;"
"private void button1_Click ( object sender , EventArgs e ) { DateTime sonsBirthday = DateTime.Parse ( txtSonsBirthday.Text ) .Date ; DateTime now = DateTime.Now ; TimeSpan timeSpan = now - sonsBirthday ; timeSpan = Convert.TimeSpan ( lblTimeAlive ) ; // blue squiggly under TimeSpan here"
"using System ; using System.Threading.Tasks ; using System.Diagnostics.Tracing ; using System.Reflection ; namespace ConsoleApplication { class Program { internal class MyEventListener : EventListener { protected override void OnEventSourceCreated ( EventSource eventSource ) { Console.WriteLine ( eventSource ) ; base.OnEventSourceCreated ( eventSource ) ; if ( eventSource.Name == `` System.Threading.Tasks.TplEventSource '' ) { Console.WriteLine ( `` enabled : `` + eventSource.IsEnabled ( ) ) ; // trying to disable with EventCommand.Disable : Invalid command try { System.Diagnostics.Tracing.EventSource.SendCommand ( eventSource , EventCommand.Disable , new System.Collections.Generic.Dictionary < string , string > ( ) ) ; Console.WriteLine ( `` enabled : `` + eventSource.IsEnabled ( ) ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; } // reflection : does n't work for Windows Phone/Store apps try { var ti = typeof ( EventSource ) .GetTypeInfo ( ) ; var f = ti.GetDeclaredField ( `` m_eventSourceEnabled '' ) ; f.SetValue ( eventSource , false ) ; Console.WriteLine ( `` enabled : `` + eventSource.IsEnabled ( ) ) ; } catch ( Exception ex ) { Console.WriteLine ( ex.Message ) ; } } } protected override void OnEventWritten ( EventWrittenEventArgs eventData ) { Console.WriteLine ( eventData ) ; } } static MyEventListener listener = new MyEventListener ( ) ; static void Main ( string [ ] args ) { Task.Delay ( 1000 ) .Wait ( ) ; Console.ReadLine ( ) ; } } } public sealed partial class App : Application { static MyEventListener listener = new MyEventListener ( ) ; }"
"< div > < a href= '' # '' id= '' addNew '' > Add New < /a > < /div > < table id= '' dataTable '' > < tr > < th > Item < /th > < th > Cost < /th > < th > < /th > < /tr > @ if ( Model ! = null & & Model.Count > 0 ) { int j = 0 ; foreach ( var i in Model ) { < tr > < td > @ Html.DropDownListFor ( a = > a [ j ] .fk_purchase_id , ( SelectList ) ViewBag.fk_purchase_id , null , htmlAttributes : new { @ class = `` form-control '' } ) < /td > < td > @ Html.TextBoxFor ( a = > a [ j ] .cost , htmlAttributes : new { @ class = `` form-control '' } ) < /td > < td > @ if ( j > 0 ) { < a href= '' # '' class= '' remove '' > Remove < /a > } < /td > < /tr > j++ ; } } < /table > < script > $ ( function ( ) { //1 . Add new row $ ( `` # addNew '' ) .click ( function ( e ) { e.preventDefault ( ) ; var $ tableBody = $ ( `` # dataTable '' ) ; var $ trLast = $ tableBody.find ( `` tr : last '' ) ; var $ trNew = $ trLast.clone ( ) ; alert ( $ trNew.html ) ; var suffix = $ trNew.find ( ' : input : first ' ) .attr ( 'name ' ) .match ( /\d+/ ) ; $ trNew.find ( `` td : last '' ) .html ( ' < a href= '' # '' class= '' remove '' > Remove < /a > ' ) ; $ .each ( $ trNew.find ( ' : input ' ) , function ( i , val ) { // Replaced Name var oldN = $ ( this ) .attr ( 'name ' ) ; var newN = oldN.replace ( ' [ ' + suffix + ' ] ' , ' [ ' + ( parseInt ( suffix ) + 1 ) + ' ] ' ) ; $ ( this ) .attr ( 'name ' , newN ) ; //Replaced value var type = $ ( this ) .attr ( 'type ' ) ; if ( type.toLowerCase ( ) == `` text '' ) { $ ( this ) .attr ( 'value ' , `` ) ; } } ) ; $ trLast.after ( $ trNew ) ; } ) ; } ) ; < /script >"
"using System ; using System.Threading.Tasks ; namespace TestNS { class Program { static void Main ( string [ ] args ) { Foo ( ) .Wait ( ) ; // sadly , it breaks here } static async Task Foo ( ) { var foo = 42 ; if ( foo == 42 ) { throw new Exception ( ) ; // want it to break here } } } }"
static class Settings { private static Theme _defaultTheme ; public static Theme DefaultTheme { get { return _defaultTheme ; } private set { _defaultTheme = value ; ThemeManager.SetTheme ( value ) ; } } static Settings ( ) { DefaultTheme = Themes.SomeTheme ; } } ThemeManager.SetTheme ( Settings.DefaultTheme ) ;
"using ( var importer = new AssimpContext ( ) ) { scene = importer.ImportFile ( file , PostProcessSteps.Triangulate | PostProcessSteps.FlipUVs | PostProcessSteps.JoinIdenticalVertices ) ; } private static void SerializeMeshes ( BinaryWriter writer , IEnumerable < Mesh > meshes ) { foreach ( Mesh mesh in meshes ) { ICollection < int > triangles = MeshLoadTriangles ( mesh ) ; MeshSerializeHeader ( writer , mesh.Name , mesh.VertexCount , triangles.Count , mesh.MaterialIndex ) ; MeshSerializeVertices ( writer , mesh.Vertices ) ; MeshSerializeUVCoordinate ( writer , mesh.TextureCoordinateChannels ) ; MeshSerializeTriangleIndices ( writer , triangles ) ; } } private static void MeshSerializeUVCoordinate ( BinaryWriter writer , List < Vector3D > [ ] textureCoordinateChannels ) { // get first channel and serialize to writer . Discard z channel // This is Vector3D since happening outside Unity List < Vector3D > list = textureCoordinateChannels [ 0 ] ; foreach ( Vector3D v in list ) { float x = v.X ; float y = v.Y ; writer.Write ( x ) ; writer.Write ( y ) ; } } private static void MeshSerializeVertices ( BinaryWriter writer , IEnumerable < Vector3D > vertices ) { foreach ( Vector3D vertex in vertices ) { Vector3D temp = vertex ; writer.Write ( temp.X ) ; writer.Write ( temp.Y ) ; writer.Write ( temp.Z ) ; } } private static void MeshSerializeTriangleIndices ( BinaryWriter writer , IEnumerable < int > triangleIndices ) { foreach ( int index in triangleIndices ) { writer.Write ( index ) ; } } private static void DeserializeMeshes ( BinaryReader reader , SceneGraph scene ) { MeshData [ ] meshes = new MeshData [ scene.meshCount ] ; for ( int i = 0 ; i < scene.meshCount ; i++ ) { meshes [ i ] = new MeshData ( ) ; MeshReadHeader ( reader , meshes [ i ] ) ; MeshReadVertices ( reader , meshes [ i ] ) ; MeshReadUVCoordinate ( reader , meshes [ i ] ) ; MeshReadTriangleIndices ( reader , meshes [ i ] ) ; } scene.meshes = meshes as IEnumerable < MeshData > ; } private static void MeshReadUVCoordinate ( BinaryReader reader , MeshData meshData ) { bool hasUv = reader.ReadBoolean ( ) ; if ( hasUv == false ) { return ; } Vector2 [ ] uvs = new Vector2 [ meshData.vertexCount ] ; for ( int i = 0 ; i < uvs.Length ; i++ ) { uvs [ i ] = new Vector2 ( ) ; uvs [ i ] .x = reader.ReadSingle ( ) ; uvs [ i ] .y = reader.ReadSingle ( ) ; } meshData.uvs = uvs ; } private static void MeshReadHeader ( BinaryReader reader , MeshData meshData ) { meshData.name = reader.ReadString ( ) ; meshData.vertexCount = reader.ReadInt32 ( ) ; meshData.triangleCount = reader.ReadInt32 ( ) ; meshData.materialIndex = reader.ReadInt32 ( ) ; } private static void MeshReadVertices ( BinaryReader reader , MeshData meshData ) { Vector3 [ ] vertices = new Vector3 [ meshData.vertexCount ] ; for ( int i = 0 ; i < vertices.Length ; i++ ) { vertices [ i ] = new Vector3 ( ) ; vertices [ i ] .x = reader.ReadSingle ( ) ; vertices [ i ] .y = reader.ReadSingle ( ) ; vertices [ i ] .z = reader.ReadSingle ( ) ; } meshData.vertices = vertices ; } private static void MeshReadTriangleIndices ( BinaryReader reader , MeshData meshData ) { int [ ] triangleIndices = new int [ meshData.triangleCount ] ; for ( int i = 0 ; i < triangleIndices.Length ; i++ ) { triangleIndices [ i ] = reader.ReadInt32 ( ) ; } meshData.triangles = triangleIndices ; } private static Mesh [ ] CreateMeshes ( SceneGraph scene ) { Mesh [ ] meshes = new Mesh [ scene.meshCount ] ; int index = 0 ; foreach ( MeshData meshData in scene.meshes ) { meshes [ index ] = new Mesh ( ) ; Vector3 [ ] vec = meshData.vertices ; meshes [ index ] .vertices = vec ; meshes [ index ] .triangles = meshData.triangles ; meshes [ index ] .uv = meshData.uvs ; meshes [ index ] .normals = meshData.normals ; meshes [ index ] .RecalculateNormals ( ) ; index++ ; } return meshes ; }"
try { // Exception in using parameter using ( SqlConnection connection = new SqlConnection ( `` LippertTheLeopard '' ) ) { connection.Open ( ) ; } } catch ( Exception ex ) { } using ( SqlConnection connection = new SqlConnection ( ) ) { try { connection.Open ( ) ; } catch ( Exception ex ) { } } SqlConnection connection2 = null ; try { connection2 = new SqlConnection ( `` z '' ) ; connection2.Open ( ) ; } catch ( Exception ex ) { } finally { IDisposable disp = connection2 as IDisposable ; if ( disp ! = null ) { disp.Dispose ( ) ; } } using ( SqlConnection connection = new SqlConnection ( ) ) { connection.Open ( ) ; } catch ( Exception ex ) { // What went wrong ? Well at least connection is Disposed }
< customBinding > < binding > < textMessageEncoding writeEncoding= '' utf-8 '' messageVersion= '' Soap11WSAddressing10 '' / > < security authenticationMode= '' MutualCertificate '' enableUnsecuredResponse= '' false '' messageProtectionOrder= '' EncryptBeforeSign '' includeTimestamp= '' true '' defaultAlgorithmSuite= '' TripleDesRsa15 '' allowSerializedSigningTokenOnReply= '' false '' messageSecurityVersion= '' WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 '' / > < httpsTransport requireClientCertificate= '' true '' / > < /binding > < /customBinding >
"public void MyMethod ( ) { int i = 0 ; var thread = new Thread ( ( ) = > { Thread.Sleep ( 100 ) ; if ( i == 0 ) { Console.WriteLine ( `` Value not changed and is { 0 } '' , i ) ; } else { Console.WriteLine ( `` Value changed to { 0 } . `` , i ) ; } } ) ; thread.Start ( ) ; i = 1 ; }"
using Globals.log4net ;
while ( documentStore.DocumentDatabase.Statistics.StaleIndexes.Length ! = 0 ) Thread.Sleep ( 10 ) ;
"public static void NotNull < T > ( T obj , string param ) { if ( obj.Equals ( null ) ) throw new ArgumentNullException ( param ) ; } public static void NotNull < T > ( T obj , string param , Logger logger , LogLevel logLevel ) { }"
public class BunnyManager { public Bunny < T > GetBunny < T > ( string someJson ) { return new Bunny < T > ( someJson ) ; } } public class Bunny < T > { T parsedJson { get ; set ; } public Bunny < T > ( string someJson ) { if ( ! string.IsNullOrEmpty ( someJson ) ) parsedJson = ConvertJsonStringToObject < T > ( someJson ) ; } }
"public void ConfigureServices ( IServiceCollection services ) { # region IOC //ommitted # endregion services.AddAutoMapper ( typeof ( SomeModel ) ) ; services.AddCors ( c = > { c.AddPolicy ( `` AllowOrigin '' , options = > options.AllowAnyOrigin ( ) .AllowAnyHeader ( ) .AllowAnyMethod ( ) ) ; } ) ; services.AddDbContext < SomeContext > ( options = > options.UseSqlServer ( _configuration.GetConnectionString ( `` Dev '' ) ) ) ; services.AddMvc ( ) .AddFluentValidation ( ) ; } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; IdentityModelEventSource.ShowPII = true ; } //Eliminating that auth is the problem //app.UseAuthentication ( ) ; if ( env.IsProduction ( ) ) { app.UseHsts ( ) ; app.UseHttpsRedirection ( ) ; } app.UseCors ( `` AllowOrigin '' ) ; app.UseMvcWithDefaultRoute ( ) ; //tried this instead of below . No luck //app.UseMvc ( ) ; app.Use ( ( context , next ) = > { if ( context.Request.Path.Value == `` '' || context.Request.Path.Value == `` / '' ) { context.Response.ContentType = `` text/plain '' ; return context.Response.WriteAsync ( `` We 're running ! `` ) ; } return next.Invoke ( ) ; } ) ; app.Run ( context = > { context.Response.StatusCode = 404 ; context.Response.ContentType = `` application/json '' ; return context.Response.WriteAsync ( `` { \ '' message\ '' : \ '' Not found\ '' } '' ) ; } ) ; } } public static void Main ( string [ ] args ) { using ( var scope = host.Services.CreateScope ( ) ) { var services = scope.ServiceProvider ; try { var context = services.GetRequiredService < SomeContext > ( ) ; DbInitializer.Initialize ( context ) ; } catch ( Exception ex ) { logger.Error ( ex , `` An error occured while seeding the database '' ) ; } } host.Run ( ) ; } public static IWebHost CreateWebHostBuilder ( string [ ] args ) { IHostingEnvironment env = null ; var builder = WebHost.CreateDefaultBuilder ( args ) .UseStartup < Startup > ( ) .ConfigureAppConfiguration ( ( hostingContext , config ) = > { env = hostingContext.HostingEnvironment ; } ) .UseHttpSys ( options = > { if ( ! env.IsDevelopment ( ) ) { options.UrlPrefixes.Add ( `` https : //*:30010/BasePathOfAPI/ '' ) ; } else { options.UrlPrefixes.Add ( `` http : //localhost:5000/BasePathOfAPI/ '' ) ; } } ) .ConfigureLogging ( b = > { b.AddApplicationInsights ( `` id here '' ) ; } ) .UseNLog ( ) .Build ( ) ; return builder ; } [ Route ( `` api/ { someNumber : int } /Home '' ) ] [ ApiController ] public class HomeController : ControllerBase { //ctor and props ommitted [ HttpGet ( `` GetSomeData '' ) [ ProducesResponseType ( StatusCodes.200OK ) ] public async Task < IActionResult > GetSomeData ( ) { //implemenetation } } https : //somehost/BasePathOfAPI/api/1234/Home/GetSomeData http : //localhost:5000/BasePathOfAPI/api/1234/Home/GetSomeData"
"private async void button1_Click ( object sender , EventArgs e ) { var task = DoRequestAsync ( ) ; textBox1.Text = `` starting async task '' ; var text = await task ; textBox1.Text = text ; } private async Task < string > DoRequestAsync ( ) { try { var client = new HttpClient ( ) ; client.Timeout = new TimeSpan ( 0 , 0 , 0 , 5 ) ; await client.GetAsync ( `` http : //123.123.123.123 '' ) ; // force a timeout exception } catch ( Exception e ) { } return `` done ! `` ; } private async void button1_Click ( object sender , EventArgs e ) { var task = DoRequestAsync ( ) ; textBox1.Text = `` starting async task '' ; var text = await task ; textBox1.Text = text ; } private async Task < string > DoRequestAsync ( ) { try { var request = WebRequest.Create ( `` http : //123.123.123.123 '' ) ; request.Timeout = 5000 ; request.GetResponse ( ) ; // force a timeout exception } catch ( Exception e ) { } return `` done ! `` ; } await Task.Run ( ( ) = > { var request = WebRequest.Create ( `` http : //123.123.123.123 '' ) ; request.Timeout = 5000 ; request.GetResponse ( ) ; } ) ;"
"const byte [ ] mySalt = //It 's a secret to everybody . [ global : :System.Configuration.UserScopedSettingAttribute ( ) ] public global : :System.Net.NetworkCredential ServerLogin { get { var tmp = ( ( global : :System.Net.NetworkCredential ) ( this [ `` ServerLogin '' ] ) ) ; if ( tmp ! = null ) tmp.Password = new System.Text.ASCIIEncoding ( ) .GetString ( ProtectedData.Unprotect ( Convert.FromBase64String ( tmp.Password ) , mySalt , DataProtectionScope.CurrentUser ) ) ; return tmp ; } set { var tmp = value ; tmp.Password = Convert.ToBase64String ( ProtectedData.Protect ( new System.Text.ASCIIEncoding ( ) .GetBytes ( tmp.Password ) , mySalt , DataProtectionScope.CurrentUser ) ) ; this [ `` ServerLogin '' ] = value ; } } private MD5 md5 = MD5.Create ( ) ; [ global : :System.Configuration.UserScopedSettingAttribute ( ) ] public global : :System.Net.NetworkCredential ServerLogin { get { var tmp = ( ( global : :System.Net.NetworkCredential ) ( this [ `` ServerLogin '' ] ) ) ; if ( tmp ! = null ) tmp.Password = System.Text.Encoding.UTF8.GetString ( ProtectedData.Unprotect ( Convert.FromBase64String ( tmp.Password ) , md5.ComputeHash ( System.Text.Encoding.UTF8.GetBytes ( tmp.UserName.ToUpper ( ) ) ) , DataProtectionScope.CurrentUser ) ) ; return tmp ; } set { var tmp = value ; tmp.Password = Convert.ToBase64String ( ProtectedData.Protect ( System.Text.Encoding.UTF8.GetBytes ( tmp.Password ) , md5.ComputeHash ( System.Text.Encoding.UTF8.GetBytes ( tmp.UserName.ToUpper ( ) ) ) , DataProtectionScope.CurrentUser ) ) ; this [ `` ServerLogin '' ] = tmp ; } }"
"public class Customer { public int Id { get ; set ; } public string Name { get ; set ; } public List < Order > Orders { get ; set ; } } public class Order { public int Id { get ; set ; } public string Description { get ; set ; } } var customers = new List < Customer > { new Customer { Id = 2 , Name = `` Jane Doe '' } , new Customer { Id = 1 , Name = `` John Doe '' , Orders = new List < Order > { new Order { Id = 342 , Description = `` Ordered a ball '' } , new Order { Id = 345 , Description = `` Ordered a bat '' } } } } ; // I 'm trying to get a count of customer orders added with customers with no orders// In the above data , I would expect a count of 3 as detailed below//// CId Name OId// -- -- -- -- -- -- -- -- // 2 Jane Doe// 1 John Doe 342// 1 John Doe 345int customerAndOrdersCount = { linq call here } ; // equals 3 [ TestMethod ] public void TestSolutions ( ) { var customers = GetCustomers ( ) ; // data from above var count1 = customers.Select ( customer = > customer.Orders ) .Sum ( orders = > ( orders ! = null ) ? orders.Count ( ) : 1 ) ; var count2 = ( from c in customers from o in ( c.Orders ? ? Enumerable.Empty < Order > ( ) ) .DefaultIfEmpty ( ) select c ) .Count ( ) ; var count3 = customers.Sum ( c = > c.Orders == null ? 1 : c.Orders.Count ( ) ) ; var count4 = customers.Sum ( c = > c.Orders==null ? 1 : Math.Max ( 1 , c.Orders.Count ( ) ) ) ; Assert.AreEqual ( 3 , count1 ) ; Assert.AreEqual ( 3 , count2 ) ; Assert.AreEqual ( 3 , count3 ) ; Assert.AreEqual ( 3 , count4 ) ; }"
"create table Weed ( Id int identity ( 1,1 ) not null , Name nvarchar ( 100 ) not null , Description nvarchar ( max ) null , Image varbinary ( max ) null ) public partial class Weed { public Weed ( ) { } public int Id { get ; set ; } public string Name { get ; set ; } public string Description { get ; set ; } public byte [ ] Image { get ; set ; } }"
string name = nameVariable ? ? string.Empty ;
public class Test { public int A = 0 ; public int B = 4 ; public void Method1 ( ) // Set local with field { int a = A ; for ( int i = 0 ; i < 100 ; i++ ) { a += B ; } A = a ; } public void Method2 ( ) // Set field with local { int b = B ; for ( int i = 0 ; i < 100 ; i++ ) { A += b ; } } } Method1 : 28.1321 msMethod2 : 162.4528 ms
DateTime midnightYesterday = DateTime.Today.AddDays ( -1.0d ) ;
"public unsafe override bool Equals ( T [ ] x , T [ ] y ) { if ( ReferenceEquals ( x , y ) ) return true ; if ( x == null || y == null ) return false ; if ( x.Length ! = y.Length ) return false ; var xArray = ( Array ) x ; var yArray = ( Array ) y ; fixed ( void* xPtr = xArray ) //compiler error 1 fixed ( T* yPtr = y ) //compiler error 2 { return memcmp ( xPtr , yPtr , x.Length * this.elementSize ) ; } } 1 . Can not implicitly convert type 'System.Array ' to 'void* ' 2 . Can not take the address of , get the size of , or declare a pointer to a managed type ( 'T ' )"
"kernel.Bind ( x = > x .FromThisAssembly ( ) .SelectAllClasses ( ) .InheritedFrom ( typeof ( IQueryHandler < , > ) ) .BindSingleInterface ( ) .Configure ( b = > b.WhenInjectedInto ( typeof ( ValidationHandlerDecorator < , > ) ) .InRequestScope ( ) ) ) ; kernel.Bind ( typeof ( IQueryHandler < , > ) ) .To ( typeof ( PerformanceHandlerDecorator < , > ) ) .InRequestScope ( ) ; kernel.Bind < IQueryHandler < query1 , result1 > > ( ) .ToMethod ( context = > HttpContext.Current.Request.RequestContext.RouteData.Values [ `` type '' ] .ToString ( ) .ToLower ( ) == `` api '' ? ( IQueryHandler < query1 , result1 > ) new apiHandler ( ) : ( IQueryHandler < query1 , result1 > ) new defaultHandler ( ) ) kernel.Bind < IMyContext > ( ) .To < MyContext > ( ) .InRequestScope ( ) ; kernel.Bind ( x = > x.FromThisAssembly ( ) .SelectAllClasses ( ) .InheritedFrom ( typeof ( IQueryHandler < , > ) ) .StartingWith ( kernel.Get < IMyContext > ( ) .customRouteValue ) // this is n't valid ... .BindSingleInterface ( ) .Configure ( b = > b.InRequestScope ( ) ) ) ; IQueryHandler < GetDocInfo , DocInfo > IQueryHandler < GetFileInfo , FileInfo > IQueryHandler < GetOrderInfo , OrderInfo > IQueryHandler < GetMessageInfo , MessageInfo > public class defaultschemaGetMessageQueryHandler : IQueryHandler < GetMessageInfo , MessageInfo > public class client1schemaGetMessageQueryHandler : IQueryHandler < GetMessageInfo , MessageInfo > public class client2schemaGetMessageQueryHandler : IQueryHandler < GetMessageInfo , MessageInfo > string route = serviceType.Name.Substring ( 0 , indexOfSuffix ) ; string route = System.ComponentModel.TypeDescriptor .GetAttributes ( serviceType ) .OfType < QueryImplementation > ( ) .Single ( ) .Id ; [ System.AttributeUsage ( System.AttributeTargets.Class | System.AttributeTargets.Struct ) ] public class QueryImplementation : System.Attribute { public string Id { get { return id ; } } private string id ; public QueryImplementation ( string id ) { this.id = id ; } } [ QueryImplementation ( `` Custom '' ) ] public class CustomDocQueryHandler : IQueryHandler < GetDocInfo , DocInfo >"
foreach ( var source in m_sources ) { if ( ! source.IsExhausted ) { ... . } } foreach ( var source in m_sources.Where ( src = > ! src.IsExhausted ) ) { ... }
"public List < class_Table1 > list_rows_table1 ( ) { // class_Table1 contains each column of table as public property List < class_Table1 > myList = new List < class_Table1 > ( ) ; // sp_List_Rows : stored procedure that lists data // from Table1 with some conditions or filters Connection cnx = new Connection ; Command cmd = new Command ( sp_List_Rows , cnx ) ; cnx.Open ; IDataReader dr = cmd.ExecuteReader ( ) ; while ( dr.Read ( ) ) { class_Table1 ct = new class_Table1 ( ) ; ct.ID = Convert.ToInt32 ( dr [ ID_table1 ] ) ; ct.Name = dr [ name_table1 ] .ToString ( ) ; // ... all others wanted columns follow here myList.Add ( ct ) ; } dr.Close ( ) ; cnx.Close ( ) ; // myList contains all wanted rows ; from a Form fills a dataGridView return myList ( ) ; }"
"+ -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+| PersonId | RelativeId | Relation |+ -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+| 1 | 2 | `` Son '' || 2 | 1 | `` Father '' || 1 | 3 | `` Mother '' || 3 | 1 | `` Son '' || 2 | 3 | `` Husband '' || 3 | 2 | `` Wife '' |+ -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+ + -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -+| PersonId | RelativeId | Relation | ReverseRelation |+ -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -+| 1 | 2 | `` Son '' | `` Father '' || 1 | 3 | `` Mother '' | `` Son '' || 2 | 3 | `` Husband '' | `` Wife '' |+ -- -- -- -- -- + -- -- -- -- -- -- + -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -+ class Program { static void Main ( string [ ] args ) { List < RelationDTO > relationDTOList = new List < RelationDTO > { new RelationDTO { PersonId = 1 , RelativeId = 2 , Relation = `` Son '' } , new RelationDTO { PersonId = 2 , RelativeId = 1 , Relation = `` Father '' } , new RelationDTO { PersonId = 1 , RelativeId = 3 , Relation = `` Mother '' } , new RelationDTO { PersonId = 3 , RelativeId = 1 , Relation = `` Son '' } , new RelationDTO { PersonId = 2 , RelativeId = 3 , Relation = `` Husband '' } , new RelationDTO { PersonId = 3 , RelativeId = 2 , Relation = `` Wife '' } , } ; var grp = relationDTOList.GroupBy ( x = > new { x.PersonId } ) .ToList ( ) ; } } public class RelationDTO { public int PersonId { get ; set ; } public int RelativeId { get ; set ; } public string Relation { get ; set ; } } public class Relations { public int PersonId { get ; set ; } public int RelativeId { get ; set ; } public string Relation { get ; set ; } public string ReverseRelation { get ; set ; } }"
"using System ; using System.Collections.Generic ; using System.Linq.Expressions ; namespace Test { public class Program { public static void Main ( ) { var parent = new Parent < Class > ( ) ; // OK : TProperty == int . Prints `` 1 '' parent.Map ( c = > c.IntValue ) ; // OK : TProperty == int . Prints `` 2 '' parent.Map ( c = > c.IEnumerableIntValue ) ; // Wrong : TProperty == ICollection < int > . Prints `` 1 '' parent.Map ( c = > c.ICollectionIntValue ) ; // Wrong : TProperty == List < int > . Prints `` 1 '' parent.Map ( c = > c.ListIntValue ) ; // Wrong : TProperty == int [ ] . Prints `` 1 '' parent.Map ( c = > c.ArrayIntValue ) ; } public class Class { public int IntValue { get ; set ; } public IEnumerable < int > IEnumerableIntValue { get ; set ; } public ICollection < int > ICollectionIntValue { get ; set ; } public List < int > ListIntValue { get ; set ; } public int [ ] ArrayIntValue { get ; set ; } } } public class Parent < T > { public void Map < TProperty > ( Expression < Func < T , TProperty > > expression ) { Console.WriteLine ( `` 1 '' ) ; } public void Map < TProperty > ( Expression < Func < T , IEnumerable < TProperty > > > expression ) { Console.WriteLine ( `` 2 '' ) ; } } } public void Map < TEnumerable , TElement > ( Expression < Func < T , TEnumerable > > expression ) where TEnumerable : IEnumerable < TElement > { Console.WriteLine ( `` 2 '' ) ; } parent.Map < int [ ] , int > ( c = > c.ArrayIntValue ) ;"
string tr ; string tr = null ;
class Shortcut { public string Name { get ; } public IList < Trigger > Triggers { get ; } public IList < Action > Actions { get ; } } class Trigger { public string Name { get ; } } class Action { public string Name { get ; } }
class UsingTest { public class Disposable : IDisposable { public void Dispose ( ) { var i = 0 ; i++ ; } } public static Disposable GetDisposable ( bool error ) { var obj = new Disposable ( ) ; if ( error ) throw new Exception ( `` Error ! `` ) ; return obj ; } } using ( var tmp = UsingTest.GetDisposable ( true ) ) { }
"TiffTag.GEOTIFF_MODELTIEPOINTTAGTiffTag.GEOTIFF_MODELPIXELSCALETA tiff.SetField ( TiffTag.GEOTIFF_MODELTIEPOINTTAG , 0.0 , 0.0 , 0.0 , leftTopX , leftTopY , 0.0 ) ; tiff.SetField ( TiffTag.GEOTIFF_MODELPIXELSCALETAG , pixelScaleX , pixelScaleY , 0.0 ) ; public void WriteTiff ( ) { using ( var tiff = Tiff.Open ( `` C : \\test\\newCreated.tif '' , `` w '' ) ) { if ( tiff == null ) return ; int width = 100 ; int height = 100 ; int byteDepth = 4 ; int tileSize = 64 ; //Geo info to add double leftTopX = 10000 ; double leftTopY = 15000 ; double pixelScaleX = 1 ; double pixelScaleY = 1 ; //Set the basic tags tiff.SetField ( TiffTag.IMAGEWIDTH , width ) ; tiff.SetField ( TiffTag.IMAGELENGTH , height ) ; tiff.SetField ( TiffTag.SAMPLESPERPIXEL , 1 ) ; tiff.SetField ( TiffTag.BITSPERSAMPLE , 8 * byteDepth ) ; tiff.SetField ( TiffTag.ORIENTATION , Orientation.TOPLEFT ) ; tiff.SetField ( TiffTag.ROWSPERSTRIP , height ) ; tiff.SetField ( TiffTag.XRESOLUTION , 88 ) ; tiff.SetField ( TiffTag.YRESOLUTION , 88 ) ; tiff.SetField ( TiffTag.RESOLUTIONUNIT , ResUnit.INCH ) ; tiff.SetField ( TiffTag.PLANARCONFIG , PlanarConfig.CONTIG ) ; tiff.SetField ( TiffTag.PHOTOMETRIC , Photometric.MINISBLACK ) ; tiff.SetField ( TiffTag.COMPRESSION , Compression.NONE ) ; tiff.SetField ( TiffTag.FILLORDER , FillOrder.MSB2LSB ) ; tiff.SetField ( TiffTag.SOFTWARE , `` MyLib '' ) ; tiff.SetField ( TiffTag.SAMPLEFORMAT , SampleFormat.IEEEFP ) ; //Set the size of the tile tiff.SetField ( TiffTag.TILEWIDTH , tileSize ) ; tiff.SetField ( TiffTag.TILELENGTH , tileSize ) ; //set the geographics info //The following two lines never succeeded ... . tiff.SetField ( TiffTag.GEOTIFF_MODELTIEPOINTTAG , 0.0 , 0.0 , 0.0 , leftTopX , leftTopY , 0.0 ) ; tiff.SetField ( TiffTag.GEOTIFF_MODELPIXELSCALETAG , pixelScaleX , pixelScaleY , 0.0 ) ; //Write the tile data here // ... ... .. // } }"
type Foo ( ) = member this.Bar ( ) = Some ( 1 ) let option = ( new Foo ( ) ) .Bar ( ) let result = if option.IsNone then `` Is none '' else `` Is some '' var optionType = new Foo ( ) .Bar ( ) ;
"public Task < UpdateResult > AddActivityAsync ( ClaimsPrincipal principal , Activity activity ) { return _userManager.SaveToDatabaseAsync ( principal , activity ) ; } public async Task < UpdateResult > AddActivityAsync ( ClaimsPrincipal principal , Activity activity ) { return await _userManager.SaveToDatabaseAsync ( principal , activity ) ; } await _profile.AddActivityAsync ( ... , ... )"
"Foo.Shared - this has all the interfacesFoo.Users - references Foo.SharedFoo.Payment - references Foo.Shared public interface IDependencyResolver { T Get < T > ( ) ; } public class DependencyResolver : IDependencyResolver { private readonly IKernel _kernel ; public DependencyResolver ( IKernel kernel ) { _kernel = kernel ; } public T Get < T > ( ) { return _kernel.Get < T > ( ) ; } } public class MyModule : StandardModule { public override void Load ( ) { Bind < IDependencyResolver > ( ) .To < DependencyResolver > ( ) .WithArgument ( `` kernel '' , Kernel ) ; Bind < Foo.Shared.ISomeType > ( ) .To < Foo.Payment.SomeType > ( ) ; // < - binding to different assembly ... } } public class UserAccounts : IUserAccounts { private ISomeType _someType ; public UserAccounts ( IDependencyResolver dependencyResolver ) { _someType = dependencyResolver.Get < ISomeType > ( ) ; // < - this essentially creates a new instance of Foo.Payment.SomeType } }"
"struct MyStruct { char chArray [ 96 ] ; __int64 offset ; unsigned count ; } [ StructLayout ( LayoutKind.Sequential , CharSet = CharSet.Ansi , Size = 108 ) ] public struct PreIndexStruct { [ MarshalAs ( UnmanagedType.ByValTStr , SizeConst = 96 ) ] public string Key ; public long Offset ; public int Count ; } using ( BinaryReader br = new BinaryReader ( new FileStream ( pathToFile , FileMode.Open , FileAccess.Read , FileShare.Read , bufferSize ) ) ) { long length = br.BaseStream.Length ; long position = 0 ; byte [ ] buff = new byte [ structSize ] ; GCHandle buffHandle = GCHandle.Alloc ( buff , GCHandleType.Pinned ) ; while ( position < length ) { br.Read ( buff , 0 , structSize ) ; PreIndexStruct pis = ( PreIndexStruct ) Marshal.PtrToStructure ( buffHandle.AddrOfPinnedObject ( ) , typeof ( PreIndexStruct ) ) ; structures.Add ( pis ) ; position += structSize ; } buffHandle.Free ( ) ; }"
"my $ s = `` A '' ; $ s =~ s/\w*/B/ ; print $ s ; $ s now = `` B '' string s = Regex.Replace ( `` A '' , @ '' \w* '' , `` B '' ) ; s now = `` BB ''"
"$ time git stashSaved working directory and index state WIP on master : b9454ed Initial commitHEAD is now at b9454ed Initial commit real 0m8.042suser 0m0.000ssys 0m0.046s static void Main ( string [ ] args ) { Repository repo=new Repository ( @ '' C : \Users\UserTest\TestGitRepo '' ) ; repo.Stashes.Add ( new Signature ( `` test '' , `` test @ test.com '' , new DateTimeOffset ( DateTime.Now ) ) , `` Stash on master '' ) ; }"
"string SaltAndPwd = string.Concat ( plainTextPassword , salt ) ; SHA256 sha2 = SHA256Managed.Create ( ) ; byte [ ] buff = sha2.ComputeHash ( Encoding.Unicode.GetBytes ( SaltAndPwd ) ) ; string plainTextPassword = `` aF7Cvs+QzZKM=4 ! `` ; string salt = `` o9kc5FvhWQU== '' ; SHA256 sha2 = SHA256Managed.Create ( ) ; for ( var i = 0 ; i < = 60000 ; i++ ) { byte [ ] buff = sha2.ComputeHash ( Encoding.Unicode.GetBytes ( SaltAndPwd ) ) ; } public string BuildVerify ( ) { string password = `` '' ; string salt = `` '' ; byte [ ] result ; using ( var sha256 = SHA256.Create ( ) ) { password = `` hovercraft '' ; // step 1 : you can use RNGCryptoServiceProvider for something worth using var passwordHashing = new PasswordHashing ( ) ; salt = passwordHashing.CreateRandomSalt ( ) ; // step 2 string hash = Convert.ToBase64String ( sha256.ComputeHash ( Encoding.UTF8.GetBytes ( salt + password ) ) ) ; // step 3 result = sha256.ComputeHash ( Encoding.UTF8.GetBytes ( salt + hash ) ) ; // step 4 for ( int i = 0 ; i < 60000 ; i++ ) { result = sha256.ComputeHash ( Encoding.UTF8.GetBytes ( salt + Convert.ToBase64String ( result ) ) ) ; } } // TESTING VERIFY this works .. string SaltAndPwd = string.Concat ( password , salt ) ; SHA256 sha2 = SHA256Managed.Create ( ) ; byte [ ] buff = sha2.ComputeHash ( Encoding.Unicode.GetBytes ( SaltAndPwd ) ) ; string resultHash = Convert.ToBase64String ( buff ) ; string hassPassword = Convert.ToBase64String ( result ) ; if ( resultHash.Equals ( hassPassword ) ) { // perfect } return `` '' ; } public class PasswordHashing { public string CreateRandomSalt ( ) { string password = `` '' ; password = HashPassword.CreateSalt ( 8 ) + `` = '' ; password = password.Replace ( `` / '' , `` c '' ) ; return password ; } } public static string CreateSalt ( int size ) { RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ( ) ; byte [ ] buff = new byte [ size ] ; rng.GetBytes ( buff ) ; return Convert.ToBase64String ( buff ) ; }"
static int Main ( string [ ] args ) { return 1 ; } .method private hidebysig static int32 Main ( string [ ] args ) cil managed { .entrypoint .maxstack 1 .locals init ( [ 0 ] int32 V_0 ) // Local variable init IL_0000 : nop // Do nothing IL_0001 : ldc.i4.1 // Push ' 1 ' to stack IL_0002 : stloc.0 // Pop stack to local variable 0 IL_0003 : br.s IL_0005 // Jump to next instruction IL_0005 : ldloc.0 // Load local variable 0 onto stack IL_0006 : ret // Return } .method static int32 Main ( ) { .entrypoint ldc.i4.1 // Push ' 1 ' to stack ret // Return }
public class Program { static void M ( ) { } static void Main ( string [ ] args ) { Action a = new Action ( M ) ; Delegate b = new Action ( M ) ; Console.WriteLine ( a == b ) ; //got False here Console.Read ( ) ; } }
var user = db.AspNetUsers.FirstOrDefault ( u = > u.Id == userId ) ; if ( user ! = null ) { var itemsToRemove = user.ItemXrefs.Where ( i = > ! itemIDs.Contains ( i.ItemID ) ) .ToList ( ) ; foreach ( var xref in itemsToRemove ) { user.ItemXrefs.Remove ( xref ) ; } db.SaveChanges ( ) ; // ... }
"public interface IPlayer { int Attack ( int amount ) ; } public interface IPowerPlayer : IPlayer { int IPlayer.Attack ( int amount ) { return amount + 50 ; } } public interface ILimitedPlayer : IPlayer { new int Attack ( int amount ) { return amount + 10 ; } } public class Player : IPowerPlayer , ILimitedPlayer { } IPlayer player = new Player ( ) ; Console.WriteLine ( player.Attack ( 5 ) ) ; // Output 55 , -- > im not sure from this output . I can compile the code but not execute it ! IPowerPlayer powerPlayer = new Player ( ) ; Console.WriteLine ( powerPlayer.Attack ( 5 ) ) ; // Output 55ILimitedPlayer limitedPlayer = new Player ( ) ; Console.WriteLine ( limitedPlayer.Attack ( 5 ) ) ; // Output 15 Console.WriteLine ( player.Attack ( 5 ) ) ; // Output 55"
[ ClassInterface ( ClassInterfaceType.AutoDual ) ] [ ProgId ( `` MyProgId '' ) ] [ MyMefExport ( `` MyProgId '' ) ] public class MyClass { } [ MyCompositeAttribute ( `` MyProgId '' ) ] public class MyClass { }
using ( var a = new MyClass ( ) ) { //Code Here }
"// Messaging class : private Dictionary < Type , List < Func < Message , bool > > > listeners ; // Set up by some other code.public void AddListener < T > ( Func < Message , bool > listener ) where T : Message { this.listeners [ typeof ( T ) ] .Add ( listener ) ; } public void SendMessage < T > ( T message ) where T : Message { foreach ( Func < Message , bool > listener in this.listeners [ typeof ( T ) ] ) { listener ( message ) ; } } // Some other class : private void Start ( ) { messaging.AddListener < MyMessage > ( this.MessageHandler ) ; // Subscribe to messages of a certain type . } private bool MessageHandler ( Message message ) { // We receive the message as the Message base type ... MyMessage message2 = ( MyMessage ) message ; // ... so we have to cast it to MyMessage . // Handle the message . } private bool MessageHandler ( MyMessage message ) { // Handle the message . } // Messaging class : private Dictionary < Type , List < Delegate > > listeners ; // Delegate instead of Func < Message , bool > .public void AddListener < T > ( Func < T , bool > listener ) where T : Message { // Func < T , bool > instead of Func < Message , bool > . this.listeners [ typeof ( T ) ] .Add ( listener ) ; } public void SendMessage < T > ( T message ) where T : Message { foreach ( Delegate listener in this.listeners [ typeof ( T ) ] ) { listener.Method.Invoke ( method.Target , new object [ ] { message } ) ; // Partial solution 1 . ( ( Func < T , bool > ) listener ) ( message ) ; // Partial solution 2 . } }"
`` C : \Program Files ( x86 ) \Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe '' `` C : \mytest.dll '' /TestCaseFilter : '' TestCategory=traitA|TestCategory=traitB|traitN '' /logger : trx < Expression > is of the format < property > = < value > [ | < Expression > ] .
"{ `` PostProcessing '' : { `` ValidationHandlerConfiguration '' : { `` MinimumTrustLevel '' : 80 , `` MinimumMatchingTrustLevel '' : 75 } , `` MatchingCharacterRemovals '' : [ `` - '' , `` '' '' , `` : '' ] } , `` Processing '' : { `` OrderSelection '' : { `` SelectionDaysInterval '' : 30 , `` SelectionDaysMaximum '' : 365 } } } [ JsonObject ( MemberSerialization.OptIn ) ] public class RecognitionConfiguration { [ JsonProperty ( PropertyName = `` PostProcessing '' , Required = Required.Always ) ] public PostRecognitionConfiguration PostRecognitionConfiguration { get ; set ; } [ JsonProperty ( PropertyName = `` Processing '' , Required = Required.Always ) ] public ProcessRecognitionConfiguration ProcessRecognitionConfiguration { get ; set ; } } [ JsonObject ( MemberSerialization.OptIn ) ] public class PostRecognitionConfiguration { [ JsonProperty ( Required = Required.Always ) ] public ValidationHandlerConfiguration ValidationHandlerConfiguration { get ; set ; } [ JsonProperty ] public List < string > MatchingCharacterRemovals { get ; set ; } } [ JsonObject ( MemberSerialization.OptIn ) ] public class ProcessRecognitionConfiguration { [ JsonProperty ( PropertyName = `` OrderSelection '' , Required = Required.Always ) ] public OrderSelectionConfiguration OrderSelectionConfiguration { get ; set ; } } var serializedConfiguration = this.ConfigurationSection.Get < RecognitionConfiguration > ( ) ; this.ConfigurationSection.GetSection ( `` Processing '' ) .Get < ProcessRecognitionConfiguration > ( ) { `` ProcessRecognitionConfiguration '' : { `` OrderSelectionConfiguration '' : { `` SelectionDaysInterval '' : 30 , `` SelectionDaysMaximum '' : 365 } } }"
DateTime startTimeFunctionTotal = DateTime.Now ; for ( int i = 0 ; i < array.Count ; i++ ) { DateTime startTimeFunction = DateTime.Now ; //some code here DateTime stopTimeFunction = DateTime.Now ; TimeSpan durationTimeFunction = stopTimeFunction - startTimeFunction ; } DateTime stopTimeFunctionTotal = DateTime.Now ; TimeSpan durationTimeFunctionTotal = stopTimeFunctionTotal - startTimeFunctionTotal ;
"public class SimpleCircleAdorner : Adorner { // Be sure to call the base class constructor . public SimpleCircleAdorner ( UIElement adornedElement , Panel ownerPanel ) : base ( adornedElement ) { _ownerPanel = ownerPanel ; } protected override void OnMouseEnter ( MouseEventArgs e ) { Point point = Mouse.GetPosition ( AdornedElement ) ; _currentPosition = getMousePosition ( point ) ; switch ( _currentPosition ) { case MousePosition.BR : case MousePosition.TL : Cursor = Cursors.SizeNWSE ; break ; case MousePosition.BL : case MousePosition.TR : Cursor = Cursors.SizeNESW ; break ; } } protected override void OnMouseLeave ( MouseEventArgs e ) { AdornerLayer adornerLayer = AdornerLayer.GetAdornerLayer ( AdornedElement ) ; if ( adornerLayer ! = null ) { Adorner [ ] adorners = adornerLayer.GetAdorners ( AdornedElement ) ; if ( adorners ! = null ) { foreach ( Adorner adorner in adorners ) { adornerLayer.Remove ( adorner ) ; } } } } MousePosition _currentPosition ; Panel _ownerPanel ; bool _isDraging = false ; Point _startPosition ; protected override void OnPreviewMouseLeftButtonDown ( MouseButtonEventArgs e ) { if ( Mouse.Capture ( this ) ) { _isDraging = true ; _startPosition = Mouse.GetPosition ( _ownerPanel ) ; } } protected override void OnPreviewMouseMove ( MouseEventArgs e ) { if ( _isDraging ) { Point newPosition = Mouse.GetPosition ( _ownerPanel ) ; double diffX = ( newPosition.X - _startPosition.X ) ; double diffY = ( newPosition.Y - _startPosition.Y ) ; // we should decide whether to change Width and Height or to change Canvas.Left and Canvas.Right if ( Math.Abs ( diffX ) > = 1 || Math.Abs ( diffY ) > = 1 ) { switch ( _currentPosition ) { case MousePosition.TL : case MousePosition.BL : foreach ( FrameworkElement ui in _ownerPanel.Children ) { if ( ui.GetType ( ) == typeof ( Ellipse ) || ui.GetType ( ) == typeof ( Line ) ) { Canvas.SetLeft ( ui , Math.Max ( 0 , Canvas.GetLeft ( ui ) + diffX ) ) ; ui.Width = Math.Max ( 0 , ui.Width - diffX ) ; } } _ownerPanel.InvalidateArrange ( ) ; break ; case MousePosition.BR : case MousePosition.TR : foreach ( FrameworkElement ui in _ownerPanel.Children ) { if ( ui.GetType ( ) == typeof ( Ellipse ) || ui.GetType ( ) == typeof ( Line ) ) { ui.Width = Math.Max ( 0 , ui.Width + diffX ) ; } } break ; } switch ( _currentPosition ) { case MousePosition.TL : case MousePosition.TR : foreach ( FrameworkElement ui in _ownerPanel.Children ) { if ( ui.GetType ( ) == typeof ( Ellipse ) || ui.GetType ( ) == typeof ( Line ) ) { Canvas.SetTop ( ui , Math.Max ( 0 , Canvas.GetTop ( ui ) + diffY ) ) ; } } foreach ( FrameworkElement ui in _ownerPanel.Children ) { if ( ui.GetType ( ) == typeof ( Ellipse ) || ui.GetType ( ) == typeof ( Line ) ) { ui.Height = Math.Max ( 0 , ui.Height - diffY ) ; } } break ; case MousePosition.BL : case MousePosition.BR : foreach ( FrameworkElement ui in _ownerPanel.Children ) { if ( ui.GetType ( ) == typeof ( Ellipse ) || ui.GetType ( ) == typeof ( Line ) ) { ui.Height = Math.Max ( 0 , ui.Height + diffY ) ; } } break ; } } _startPosition = newPosition ; } } protected override void OnPreviewMouseLeftButtonUp ( MouseButtonEventArgs e ) { } protected override void OnPreviewMouseRightButtonUp ( MouseButtonEventArgs e ) { if ( _isDraging ) { Mouse.Capture ( null ) ; _isDraging = false ; } } MousePosition getMousePosition ( Point point ) // point relative to element { double h2 = ActualHeight / 2 ; double w2 = ActualWidth / 2 ; if ( point.X < w2 & & point.Y < h2 ) return MousePosition.TL ; else if ( point.X > w2 & & point.Y > h2 ) return MousePosition.BR ; else if ( point.X > w2 & & point.Y < h2 ) return MousePosition.TR ; else return MousePosition.BL ; } enum MousePosition { TL , TR , BL , BR } double _renderRadius = 5.0 ; protected override void OnRender ( DrawingContext drawingContext ) { Rect adornedElementRect = new Rect ( this.AdornedElement.DesiredSize ) ; SolidColorBrush renderBrush = new SolidColorBrush ( Colors.Black ) ; renderBrush.Opacity = 0.3 ; Pen renderPen = new Pen ( new SolidColorBrush ( Colors.Black ) , 1.5 ) ; drawingContext.DrawEllipse ( renderBrush , renderPen , adornedElementRect.TopLeft , _renderRadius , _renderRadius ) ; drawingContext.DrawEllipse ( renderBrush , renderPen , adornedElementRect.TopRight , _renderRadius , _renderRadius ) ; drawingContext.DrawEllipse ( renderBrush , renderPen , adornedElementRect.BottomLeft , _renderRadius , _renderRadius ) ; drawingContext.DrawEllipse ( renderBrush , renderPen , adornedElementRect.BottomRight , _renderRadius , _renderRadius ) ; } }"
"public class MyPersonDTO { public string Name { get ; set ; } public string Age { get ; set ; } public string Address { get ; set ; } } public static class MyDocReader { public static IList < MyPersonDTO > GetPersons ( NativeDocument doc ) { //Code to read Persons from doc and return MyPersonDTOs } } public static class MyDocReader { public static IList < MyPersonDTO > persons GetPersons ( NativeDocument doc , out IDictionary < string , string > errors ) { //Code to read persons from doc } } public class MyPersonDTO { public string Name { get ; set ; } public string Age { get ; set ; } public string Address { get ; set ; } public IDictionary < string , string > Errors { get ; set ; } }"
[ ComVisible ( true ) ] public interface ITest { string Name { get ; } DateTime Date { get ; } } [ Serializable ] [ ComVisible ( true ) ] public class Test : ITest { public string Name { get ; private set ; } public DateTime Date { get ; private set ; } }
< root > < level1 name= '' level1A '' > < level2 name= '' level2A '' > < level3 name= '' level3A '' > < level4 name= '' level4A '' > < level5 name= '' level5A '' > < level6 name= '' level6A '' > < level7 name= '' level7A '' > < level8 name= '' level8A '' > < /level8 > < /level7 > < /level6 > < /level5 > < /level4 > < /level3 > < /level2 > < /level1 > < level1 name= '' level1B '' > < level2 name= '' level2B '' > < level3 name= '' level3B '' > < level4 name= '' level4B '' > < level5 name= '' level5B '' > < level6 name= '' level6B '' > < level7 name= '' level7B '' > < level8 name= '' level8B '' > < /level8 > < /level7 > < /level6 > < /level5 > < /level4 > < /level3 > < /level2 > < /level1 > < /root >
class A { public object B { set { } } } Expression < Func < A > > expr = ( ) = > new A { B = new object { } } ; using System ; using System.Linq.Expressions ; class Test { public static void Main ( ) { Expression < Func < A > > expr = ( ) = > new A { B = new object { } } ; } } class A { public object B { set { } } }
private void InitializeTimer ( ) { Timer myTimer = new Timer ( ) ; myTimer.Interval = 3000 ; myTimer.Enabled = true ; myTimer.Tick += new EventHandler ( TimerEventProcessor ) ; myTimer.Start ( ) ; }
private void _createClosure ( int i ) { ClosureAction = new Action ( ( ) = > { var j = i ; var k = somenum ; } ) ; } private void _createLambda ( ) { LambdaAction = new Action ( ( ) = > { this._instanceAction ( ) ; } ) ; } private void _createInstance ( ) { InstanceAction = new Action ( _instanceAction ) ; } private void _createStatic ( ) { StaticAction = new Action ( _staticAction ) ; } private int somenum ; private void _instanceAction ( ) { somenum++ ; } private static void _staticAction ( ) { }
"public object GetInstance ( System.Type serviceType , System.ServiceModel.InstanceContext instanceContext , System.Net.Http.HttpRequestMessage request ) ; public void ReleaseInstance ( System.ServiceModel.InstanceContext instanceContext , object service ) ; public class NinjectResourceFactory : IResourceFactory { private readonly IKernel _kernel ; public NinjectResourceFactory ( ) { var modules = new INinjectModule [ ] { new ServiceDIModule ( ) , //Service Layer Module new RepositoryDIModule ( ) , //Repo Layer Module new DataServiceDIModule ( ) } ; _kernel = new StandardKernel ( modules ) ; } # region IResourceFactory Members public object GetInstance ( Type serviceType , InstanceContext instanceContext , HttpRequestMessage request ) { return Resolve ( serviceType ) ; } public void ReleaseInstance ( InstanceContext instanceContext , object service ) { throw new NotImplementedException ( ) ; } # endregion private object Resolve ( Type type ) { return _kernel.Get ( type ) ; } //private T Resolve < T > ( ) // { // return _kernel.Get < T > ( ) ; // } //private T Resolve < T > ( string name ) // { // return _kernel.Get < T > ( metaData = > metaData.Has ( name ) ) ; // return _kernel.Get < T > ( ) .Equals ( With.Parameters . // ContextVariable ( `` name '' , name ) ) ; // } } var configuration = HttpHostConfiguration.Create ( ) .SetResourceFactory ( new NinjectResourceFactory ( ) ) ; RouteTable.Routes.MapServiceRoute < StateProvinceResource > ( `` States '' , configuration ) ;"
< ColumnFamily Name= '' MySCFName '' ColumnType= '' Super '' CompareWith= '' TimeUUIDType '' CompareSubcolumnsWith= '' AsciiType '' / > select `` something '' from MyTable where `` timestamp '' between `` 2011-01-01 00:00:00.000 '' and `` 2011-03-01 00:00:00.000 '' family.Get ( `` 238028210009775 '' ) .Fetch ( DateTime.Parse ( `` 2011-01-01 00:00:00.000 '' ) ) .FirstOrDefault ( ) ;
"[ DllImport ( ExternDll.User32 , ExactSpelling=true , CharSet=CharSet.Auto ) ] public static extern bool GetWindowRect ( HandleRef hWnd , [ In , Out ] ref NativeMethods.RECT rect ) ; [ DllImport ( `` user32.dll '' ) ] [ return : MarshalAs ( UnmanagedType.Bool ) ] public static extern bool GetWindowRect ( HandleRef hwnd , out RECT lpRect ) ;"
"myString = ( string ) Services.Execute ( `` service_name '' , arg1 , arg2 , ... ) ; myString = ServiceName ( arg1 , arg2 , ... ) ; public static string ServiceName ( int arg1 , Entity arg2 , ... ) { return ( string ) Services.Execute ( `` service_name '' , arg1 , arg2 , ... ) ; } [ ServiceImport ( `` service_name '' ) ] public static extern string ServiceName ( int arg1 , Entity arg2 , ... ) ;"
"while ( d.IndexOf ( `` -- '' ) ! = -1 ) d=d.Replace ( `` -- '' , `` - '' ) ; `` آدنیس , اسم دختر , girl name , آدونیس -- ‌-گلی-به-رنگ-زرد-و-قرمز-که-فقط-هنگام-تابش-خورشید-باز-می-شود '' `` آدنیس , اسم دختر , girl name , آدونیس-‌-گلی-به-رنگ-زرد-و-قرمز-که-فقط-هنگام-تابش-خورشید-باز-می-شود ''"
public static class ExtensionMethods { public static bool IsNumeric ( this object obj ) { if ( obj == null ) return false ; return obj.GetType ( ) .IsPrimitive || obj is double || ( obj is Decimal || obj is DateTime ) || obj is TimeSpan ; } }
< SpecificVersion > False < /SpecificVersion >
"const string issuer = `` issuer '' ; const string audience = `` audience '' ; byte [ ] keyForHmacSha256 = new byte [ 32 ] ; new Random ( ) .NextBytes ( keyForHmacSha256 ) ; var claims = new List < Claim > { new Claim ( `` deviceId '' , `` 12 '' ) } ; var now = DateTime.UtcNow ; var expires = now.AddHours ( 1 ) ; var signingCredentials = new SigningCredentials ( new SymmetricSecurityKey ( keyForHmacSha256 ) , SecurityAlgorithms.HmacSha256Signature , SecurityAlgorithms.Sha256Digest ) ; var token = new JwtSecurityToken ( issuer , audience , claims , now , expires , signingCredentials ) ; return _tokenHandler.WriteToken ( token ) ;"
"System.Type t = System.Type.GetTypeFromProgID ( `` SAP.Functions '' , true ) ; dynamic fc = System.Activator.CreateInstance ( t , false ) ; dynamic connection = fc.Connection ; connection.System = `` '' ; System.Type t = System.Type.GetTypeFromProgID ( `` SAP.Functions '' , true ) ; dynamic fc = System.Activator.CreateInstance ( t , false ) ; var connection = fc.Connection as SAPLogonCtrl.Connectionconnection.System = `` '' ; System.Type t = System.Type.GetTypeFromProgID ( `` SAP.Functions '' , true ) ; dynamic fc = System.Activator.CreateInstance ( t , false ) ; dynamic c1 = fc.Connection ; var c2 = fc.Connection as SAPLogonCtrl.Connection ; if ( c1 == c2 ) c2.System = `` '' ; dynamic fc = System.Activator.CreateInstance ( t , false ) ; var fc = System.Activator.CreateInstance ( t , false ) as SAPFunctionsOCX.SAPFunctions ;"
[ TestClass ] public class UnitTest1 { [ TestMethod ] public unsafe void TestMethod1 ( ) { Mock < IMyUnsafeInterface > mockDependency = new Mock < IMyUnsafeInterface > ( ) ; mockDependency.Setup ( i = > i.DoWork ( It.IsAny < int* > ( ) ) ) ; // error on this line systemUnderTest.Dependency = mockDependency.Object ; ... } } public unsafe interface IMyUnsafeInterface { void DoWork ( int* intPtr ) ; byte* MethodNotRelevantToThisTest1 ( byte* bytePtr ) ; ComplexObject MethodNotRelevantToThisTest2 ( ) ; ... } Error 1 The type 'int* ' may not be used as a type argument public unsafe class MyUnsafeClass : IMyUnsafeInterface { public void DoWork ( int* intPtr ) { // Do something } public byte* MethodNotRelevantToThisTest1 ( byte* bytePtr ) { throw new NotImplementedException ( ) ; } public ComplexObject MethodNotRelevantToThisTest2 ( ) { throw new NotImplementedException ( ) ; } ... }
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Test { # region Base Classes public class GenericElement { } /// < summary > Visit to a GenericElement < /summary > public class Generic_Visit < E > where E : GenericElement { public E Element { get ; set ; } } /// < summary > Collection of Visits < /summary > public class Generic_Route < V , E > where V : Generic_Visit < E > where E : GenericElement { public List < V > Visits { get ; set ; } public Double Distance { get ; set ; } } /// < summary > Collection of Routes < /summary > public class Generic_Solution < R , V , E > where R : Generic_Route < V , E > where V : Generic_Visit < E > where E : GenericElement { public List < R > Routes { get ; set ; } public Double Distance { get { return this.Routes.Select ( r = > r.Distance ) .Sum ( ) ; } } } # endregion # region TSP Classes public class Concrete_TSPNode : GenericElement { } public abstract class Generic_TSPVisit < E > : Generic_Visit < E > where E : Concrete_TSPNode { public Double Time { get ; set ; } } public abstract class Generic_TSPRoute < V , E > : Generic_Route < V , E > where V : Concrete_TSPVisit where E : Concrete_TSPNode { public Double Time { get { return this.Visits.Select ( v = > v.Time ) .Sum ( ) ; } } } public abstract class Generic_TSPSolution < R , V , E > : Generic_Solution < R , V , E > where R : Concrete_TSPRoute where V : Concrete_TSPVisit where E : Concrete_TSPNode { public Double Time { get { return this.Routes.Select ( r = > r.Time ) .Sum ( ) ; } } } public class Concrete_TSPVisit : Generic_TSPVisit < Concrete_TSPNode > { } public class Concrete_TSPRoute : Generic_TSPRoute < Concrete_TSPVisit , Concrete_TSPNode > { } public class Concrete_TSPSolution : Generic_TSPSolution < Concrete_TSPRoute , Concrete_TSPVisit , Concrete_TSPNode > { } # endregion # region VRP public class Concrete_VRPNode : Concrete_TSPNode { } public abstract class Generic_VRPVisit < E > : Generic_TSPVisit < E > where E : Concrete_VRPNode { public Double Capacity { get ; set ; } } public abstract class Generic_VRPRoute < V , E > : Generic_TSPRoute < V , E > where V : Concrete_VRPVisit where E : Concrete_VRPNode { public Double Capacity { get { return this.Visits.Select ( v = > v.Capacity ) .Sum ( ) ; } } } public abstract class G_VRPSolution < R , V , E > : Generic_TSPSolution < R , V , E > where R : Concrete_VRPRoute where V : Concrete_VRPVisit where E : Concrete_VRPNode { public Double Capacity { get { return this.Routes.Select ( r = > r.Capacity ) .Sum ( ) ; } } } public class Concrete_VRPVisit : Generic_VRPVisit < Concrete_VRPNode > { } public class Concrete_VRPRoute : Generic_VRPRoute < Concrete_VRPVisit , Concrete_VRPNode > { } public class Concrete_VRPSolution : Generic_TSPSolution < Concrete_VRPRoute , Concrete_VRPVisit , Concrete_VRPNode > { } # endregion }"
"var stringWithLongWords = `` Here 's a text with tooooooooooooo long words '' ; var trimmed = TrimLongWords ( stringWithLongWords , 6 ) ; `` Here 's a text with tooooo long words '' private static string TrimLongWords ( string original , int maxCount ) { return string.Join ( `` `` , original.Split ( ' ' ) .Select ( x = > x.Substring ( 0 , x.Length > maxCount ? maxCount : x.Length ) ) ) ; }"
"public void SendToServer ( string message ) { var asyncEvent = new SocketAsyncEventArgs { RemoteEndPoint = new DnsEndPoint ( server , serverPort ) } ; var buffer = Encoding.UTF8.GetBytes ( message + Environment.NewLine ) ; asyncEvent.SetBuffer ( buffer , 0 , buffer.Length ) ; connection.SendAsync ( asyncEvent ) ; }"
public class Item { public int Id { get ; set ; } public ItemDescription ItemDescription { get ; set ; } } public class ItemDescription { public int Id { get ; set ; } public int Revision { get ; set ; } public string Test { get ; set ; } } Scaffold Controller Item
"len = input ( 9 , minval=1 , title= '' Length '' ) high_ = highest ( hl2 , len ) low_ = lowest ( hl2 , len ) round_ ( val ) = > val > .99 ? .999 : val < -.99 ? -.999 : valvalue = 0.0value : = round_ ( .66 * ( ( hl2 - low_ ) / max ( high_ - low_ , .001 ) - .5 ) + .67 * nz ( value [ 1 ] ) ) fish1 = 0.0fish1 : = .5 * log ( ( 1 + value ) / max ( 1 - value , .001 ) ) + .5 * nz ( fish1 [ 1 ] ) fish2 = fish1 [ 1 ] public class FisherTransform : IndicatorBase { public int Length = 9 ; public decimal [ ] Fish { get ; set ; } public decimal [ ] Trigger { get ; set ; } decimal _maxHigh ; decimal _minLow ; private decimal _value1 ; private decimal _lastValue1 ; public FisherTransform ( IEnumerable < Candle > candles , int length ) : base ( candles ) { Length = length ; RequiredCount = Length ; _lastValue1 = 1 ; } protected override void Initialize ( ) { Fish = new decimal [ Series.Length ] ; Trigger = new decimal [ Series.Length ] ; } public override void Compute ( int startIndex = 0 , int ? endIndex = null ) { if ( endIndex == null ) endIndex = Series.Length ; for ( int index = 0 ; index < endIndex ; index++ ) { if ( index == 1 ) { Fish [ index - 1 ] = 1 ; } _minLow = Series.Average.Lowest ( Length , index ) ; _maxHigh = Series.Average.Highest ( Length , index ) ; _value1 = Maths.Normalize ( 0.66m * ( ( Maths.Divide ( Series.Average [ index ] - _minLow , Math.Max ( _maxHigh - _minLow , 0.001m ) ) - 0.5m ) + 0.67m * _lastValue1 ) ) ; _lastValue1 = _value1 ; Fish [ index ] = 0.5m * Maths.Log ( Maths.Divide ( 1 + _value1 , Math.Max ( 1 - _value1 , .001m ) ) ) + 0.5m * Fish [ index - 1 ] ; Trigger [ index ] = Fish [ index - 1 ] ; } } }"
[ HttpGet ( `` api/role/ { role } /users '' ) ]
"List < char > lstGetDecrName ( List < char > lstVal ) //entry point of the value that returns decreased value { List < char > lstTmp = lstVal ; subCheckEmpty ( ref lstTmp ) ; switch ( lstTmp.Count ) { case 0 : lstTmp.Add ( '- ' ) ; return lstTmp ; case 1 : if ( lstTmp [ 0 ] == '- ' ) { return lstTmp ; } break ; case 2 : if ( lstTmp [ 1 ] == ' 0 ' ) { if ( lstTmp [ 0 ] == ' 1 ' ) { lstTmp.Clear ( ) ; lstTmp.Add ( ' 9 ' ) ; return lstTmp ; } if ( lstTmp [ 0 ] == ' A ' ) { lstTmp.Clear ( ) ; lstTmp.Add ( '- ' ) ; return lstTmp ; } } if ( lstTmp [ 1 ] == ' A ' ) { if ( lstTmp [ 0 ] == ' A ' ) { lstTmp.Clear ( ) ; lstTmp.Add ( ' Z ' ) ; return lstTmp ; } } break ; } return lstGetDecrValue ( lstTmp , lstVal ) ; } List < char > lstGetDecrValue ( List < char > lstTmp , List < char > lstVal ) { List < char > lstValue = new List < char > ( ) ; switch ( lstTmp.Last ( ) ) { case ' A ' : lstValue = lstGetDecrTemp ( ' Z ' , lstTmp , lstVal ) ; break ; case ' a ' : lstValue = lstGetDecrTemp ( ' z ' , lstTmp , lstVal ) ; break ; case ' 0 ' : lstValue = lstGetDecrTemp ( ' 9 ' , lstTmp , lstVal ) ; break ; default : char tmp = ( char ) ( lstTmp.Last ( ) - 1 ) ; lstTmp.RemoveAt ( lstTmp.Count - 1 ) ; lstTmp.Add ( tmp ) ; lstValue = lstTmp ; break ; } return lstValue ; } List < char > lstGetDecrTemp ( char chrTemp , List < char > lstTmp , List < char > lstVal ) //shifting places eg unit to ten , etc . { if ( lstTmp.Count == 1 ) { lstTmp.Clear ( ) ; lstTmp.Add ( '- ' ) ; return lstTmp ; } lstTmp.RemoveAt ( lstTmp.Count - 1 ) ; lstVal = lstGetDecrName ( lstTmp ) ; lstVal.Insert ( lstVal.Count , chrTemp ) ; return lstVal ; }"
"( IEnumerable < object > ) new Dictionary < string , string > ( )"
[ TestCase ] public void InsertionSortedSet_AddValues_NoException ( ) { var test = new InsertionSortedSet < int > ( ) ; test.Add ( 5 ) ; test.Add ( 2 ) ; test.Add ( 7 ) ; test.Add ( 4 ) ; test.Add ( 9 ) ; } [ TestCase ] public void InsertionSortedSet_AddValues_CorrectCount ( ) { var test = new InsertionSortedSet < int > ( ) ; test.Add ( 5 ) ; test.Add ( 2 ) ; test.Add ( 7 ) ; test.Add ( 4 ) ; test.Add ( 9 ) ; Assert.IsTrue ( test.Count == 5 ) ; }
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' no '' ? > < marc : collection xmlns : marc= '' http : //www.loc.gov/MARC21/slim '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //www.loc.gov/MARC21/slim http : //www.loc.gov/standards/marcxml/schema/MARC21slim.xsd '' > < marc : record > < marc : leader > 00925njm 22002777a 4500 < /marc : leader > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' no '' ? > < collection xmlns= '' http : //www.loc.gov/MARC21/slim '' > < record > < leader > 01142cam 2200301 a 4500 < /leader > Regex xmlNamespace = new Regex ( `` xmlns : ( ? < PREFIX > [ ^= ] + ) =\ '' ( ? < URI > [ ^\ '' ] + ) \ '' '' , RegexOptions.Compiled ) ; XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc.LoadXml ( xmlRecord ) ; XmlNamespaceManager nsMgr = new XmlNamespaceManager ( xmlDoc.NameTable ) ; MatchCollection namespaces = xmlNamespace.Matches ( xmlRecord ) ; foreach ( Match n in namespaces ) { nsMgr.AddNamespace ( n.Groups [ `` PREFIX '' ] .ToString ( ) , n.Groups [ `` URI '' ] .ToString ( ) ) ; } if ( LeaderNode.Contains ( `` : '' ) ) { string prefix = LeaderNode.Substring ( 0 , LeaderNode.IndexOf ( ' : ' ) ) ; XmlNode root = xmlDoc.FirstChild ; string nameSpace = root.GetNamespaceOfPrefix ( prefix ) ; nsMgr.AddNamespace ( prefix , nameSpace ) ; }"
"private void _Insert ( Hashtable hash , string tablename , Func < string , object [ ] , SqlCommand > command ) private void _Insert ( Hashtable hash , string tablename , Func < string , object [ ] , OleCommand > command ) class RemoteDatabase { public SqlCommand GetCommand ( string query , object [ ] values ) ; } _Insert ( enquiry , `` Enquiry '' , ( Func < string , object [ ] , SqlCommand > ) ( _RemoteDatabase.GetCommand ) ) ;"
"public async static Task SearchYoutube ( string query , int count ) { try { string format = `` https : //www.googleapis.com/youtube/v3/search ? part=snippet & maxResults=20 & q=mere & key=XXXXXXXXXXXXXXX & pageToken= '' ; HttpClient client = new HttpClient ( ) ; // System.Net.ServicePointManager.EnableDnsRoundRobin = true ; var html = await client.GetStringAsync ( format ) ; string ht = html.ToString ( ) ; } catch ( Exception ex ) { //var resp = ex.Response as HttpWebResponse ; } }"
"Id TestId SourceSubVariantId TargetSubVariantId DiffPerc114 100 66 67 100.00115 100 67 68 100.00116 100 70 71 99.99 Id=66 , Name=AbcId=68 , Name=PqrId=69 , Name=xyz Id=70 , Name=lmnId=71 , Name=xxxId=72 , Name=hhh public class Variants { public int Id { get ; set ; } public string Name { get ; set ; } public string Type { get ; set ; } public virtual ICollection < SubVariants > SubVariants { get ; set ; } } public class SubVariants { public int Id { get ; set ; } public int VariantId { get ; set ; } public string Name { get ; set ; } public virtual Variants Variants { get ; set ; } public virtual ICollection < TestOperation > TestOperation { get ; set ; } public virtual ICollection < TestOperation > TestOperation1 { get ; set ; } } public class TestOperation { public int Id { get ; set ; } public Nullable < int > TestId { get ; set ; } public int SourceSubVariantId { get ; set ; } public int TargetSubVariantId { get ; set ; } public decimal DiffPerc { get ; set ; } public virtual SubVariants SubVariants { get ; set ; } public virtual SubVariants SubVariants1 { get ; set ; } public virtual Test Test { get ; set ; } } int testId=100 ; var query = from v in context.Variants where v.Type == `` Add '' select new { ParentVariant = v.Name , Type = v.Method , CustomSubvariantList = ( from svName in context.SubVariants.Select ( sv = > sv.Name ) .Distinct ( ) join x in ( from sv in v.SubVariants from to in sv.TestOperation where to.TestId == testId orderby sv.Id select new { sv.Name , to.DiffPerc , SourceId = ( int ? ) to.SubVariants.Id , TargetID= ( int ? ) to.SubVariants1.Id } ) on svName equals x.Name into g from x in g.DefaultIfEmpty ( ) orderby x.SourceId select new { SourceId=x.SourceId ? ? 0 , TargetId=x.TargetID ? ? 0 , Name = svName , DiffPerc = x.DiffPerc } ) .ToList ( ) } ; Id Name Type CategoryId11 Variant1 Add 112 Variant2 Add 113 Variant3 Add 114 Variant4 Add 1 Id VariantId Name66 11 Abc67 11 PQR68 11 Xyz70 12 lmn71 12 xxx72 12 hhh Id TestId SourceSubVariantId TargetSubVariantId DiffPerc114 100 66 67 10.00115 100 67 68 20.00114 100 70 71 40.00115 100 71 72 50.00 Id VariantId Name66 11 Abc67 11 PQR68 11 Xyz70 12 Abc71 12 PQR72 12 Xyz"
var ws = MSBuildWorkspace.Create ( ) ; var soln = ws.OpenSolutionAsync ( @ '' C : \Users\ ... \SampleInheritanceStuff.sln '' ) .Result ; var proj = soln.Projects.Single ( ) ; var compilation = proj.GetCompilationAsync ( ) .Result ; string TEST_ATTRIBUTE_METADATA_NAME = `` NUnit.Framework.TestAttribute '' ; var testAttributeType = compilation.GetTypeByMetadataName ( TEST_ATTRIBUTE_METADATA_NAME ) ; //Now how do I find types that inherit from this type ?
static object mutex = new object ( ) ; static Task currentTask ; async Task Fetch ( ) { lock ( mutex ) { if ( currentTask ! = null ) return currentTask ; } currentTask = DoAsyncNetworkIO ( ) ; await currentTask ; lock ( mutex ) { var task = currentTask ; currentTask = null ; return task ; } }
"someInstruction.DoPeriodic ( TimeSpan.FromSeconds ( 5 ) ) ; public static class ExtensionMethods { public static async Task < T > DoPeriodic < T > ( this Task < T > task , CancellationToken token , TimeSpan dueTime , TimeSpan interval ) { // Initial wait time before we begin the periodic loop . if ( dueTime > TimeSpan.Zero ) await Task.Delay ( dueTime , token ) ; // Repeat this loop until cancelled . while ( ! token.IsCancellationRequested ) { // Wait to repeat again . if ( interval > TimeSpan.Zero ) await Task.Delay ( interval , token ) ; } } }"
var server = new TestServer ( TestServer.CreateBuilder ( ) .UseStartup < Startup > ( ) ) ; var server = new TestServer ( new WebHostBuilder ( ) .UseStartup < Startup > ( ) ) ; System.Exception : Could not resolve a service of type 'ShikashiBot.IShikashiBotManager ' for the parameter 'botManager ' of method 'Configure ' on type 'ShikashiBot.Startup ' .
"internal class ReferenceType { public int Value ; } internal struct ValueType { public int Value ; } internal struct ExtendedValueType { public int Value ; private double _otherData ; // this field is here just to make the object bigger } private ReferenceType [ ] _referenceTypeData ; private ValueType [ ] _valueTypeData ; private ExtendedValueType [ ] _extendedValueTypeData ; [ Benchmark ] public int ReferenceTypeSum ( ) { var sum = 0 ; for ( var i = 0 ; i < Size ; i++ ) { sum += _referenceTypeData [ i ] .Value ; } return sum ; } Method | Size | Mean | Error | StdDev | Ratio | RatioSD | -- -- -- -- -- -- -- -- -- -- - | -- -- - | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- : | -- -- -- -- : | ReferenceTypeSum | 100 | 75.76 ns | 1.2682 ns | 1.1863 ns | 1.00 | 0.00 | ValueTypeSum | 100 | 79.83 ns | 0.3866 ns | 0.3616 ns | 1.05 | 0.02 | ExtendedValueTypeSum | 100 | 78.70 ns | 0.8791 ns | 0.8223 ns | 1.04 | 0.01 | | | | | | | | ReferenceTypeSum | 500 | 354.78 ns | 3.9368 ns | 3.6825 ns | 1.00 | 0.00 | ValueTypeSum | 500 | 367.08 ns | 5.2446 ns | 4.9058 ns | 1.03 | 0.01 | ExtendedValueTypeSum | 500 | 346.18 ns | 2.1114 ns | 1.9750 ns | 0.98 | 0.01 | | | | | | | | ReferenceTypeSum | 1000 | 697.81 ns | 6.8859 ns | 6.1042 ns | 1.00 | 0.00 | ValueTypeSum | 1000 | 720.64 ns | 5.5592 ns | 5.2001 ns | 1.03 | 0.01 | ExtendedValueTypeSum | 1000 | 699.12 ns | 9.6796 ns | 9.0543 ns | 1.00 | 0.02 | Method | Size | Mean | Error | StdDev | Ratio | RatioSD | -- -- -- -- -- -- -- -- -- -- - | -- -- - | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- : | -- -- -- -- : | ReferenceTypeSum | 100 | 76.22 ns | 0.5232 ns | 0.4894 ns | 1.00 | 0.00 | ValueTypeSum | 100 | 80.69 ns | 0.9277 ns | 0.8678 ns | 1.06 | 0.01 | ExtendedValueTypeSum | 100 | 78.88 ns | 1.5693 ns | 1.4679 ns | 1.03 | 0.02 | | | | | | | | ReferenceTypeSum | 500 | 354.30 ns | 2.8682 ns | 2.5426 ns | 1.00 | 0.00 | ValueTypeSum | 500 | 372.72 ns | 4.2829 ns | 4.0063 ns | 1.05 | 0.01 | ExtendedValueTypeSum | 500 | 357.50 ns | 7.0070 ns | 6.5543 ns | 1.01 | 0.02 | | | | | | | | ReferenceTypeSum | 1000 | 696.75 ns | 4.7454 ns | 4.4388 ns | 1.00 | 0.00 | ValueTypeSum | 1000 | 697.95 ns | 2.2462 ns | 2.1011 ns | 1.00 | 0.01 | ExtendedValueTypeSum | 1000 | 687.75 ns | 2.3861 ns | 1.9925 ns | 0.99 | 0.01 | Method | Size | Mean | Error | StdDev | Ratio | RatioSD | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op | -- -- -- -- -- -- -- -- -- -- - | -- -- - | -- -- -- -- -- - : | -- -- -- -- -- - : | -- -- -- -- -- - : | -- -- -- : | -- -- -- -- : | -- -- -- -- -- -- : | -- -- -- -- -- -- : | -- -- -- -- -- -- : | -- -- -- -- -- -- -- -- -- -- : | ReferenceTypeSum | 100 | 110.1 ns | 0.6836 ns | 0.6060 ns | 1.00 | 0.00 | - | - | - | - | ValueTypeSum | 100 | 109.5 ns | 0.4320 ns | 0.4041 ns | 0.99 | 0.00 | - | - | - | - | ExtendedValueTypeSum | 100 | 109.5 ns | 0.5438 ns | 0.4820 ns | 0.99 | 0.00 | - | - | - | - | | | | | | | | | | | | ReferenceTypeSum | 500 | 517.8 ns | 10.1271 ns | 10.8359 ns | 1.00 | 0.00 | - | - | - | - | ValueTypeSum | 500 | 511.9 ns | 7.8204 ns | 7.3152 ns | 0.99 | 0.03 | - | - | - | - | ExtendedValueTypeSum | 500 | 534.7 ns | 3.0168 ns | 2.8219 ns | 1.03 | 0.02 | - | - | - | - | | | | | | | | | | | | ReferenceTypeSum | 1000 | 1,058.3 ns | 8.8829 ns | 8.3091 ns | 1.00 | 0.00 | - | - | - | - | ValueTypeSum | 1000 | 1,048.4 ns | 8.6803 ns | 8.1196 ns | 0.99 | 0.01 | - | - | - | - | ExtendedValueTypeSum | 1000 | 1,057.5 ns | 5.9456 ns | 5.5615 ns | 1.00 | 0.01 | - | - | - | - | [ Benchmark ] public int ReferenceTypeOptimizedSum ( ) { var sum = 0 ; var array = _referenceTypeData ; for ( var i = 0 ; i < array.Length ; i++ ) { sum += array [ i ] .Value ; } return sum ; } [ Benchmark ] public int ReferenceTypeUnrolledSum ( ) { var sum = 0 ; var array = _referenceTypeData ; for ( var i = 0 ; i < array.Length ; i += 16 ) { sum += array [ i ] .Value ; sum += array [ i + 1 ] .Value ; sum += array [ i + 2 ] .Value ; sum += array [ i + 3 ] .Value ; sum += array [ i + 4 ] .Value ; sum += array [ i + 5 ] .Value ; sum += array [ i + 6 ] .Value ; sum += array [ i + 7 ] .Value ; sum += array [ i + 8 ] .Value ; sum += array [ i + 9 ] .Value ; sum += array [ i + 10 ] .Value ; sum += array [ i + 11 ] .Value ; sum += array [ i + 12 ] .Value ; sum += array [ i + 13 ] .Value ; sum += array [ i + 14 ] .Value ; sum += array [ i + 15 ] .Value ; } return sum ; } Method | Size | Mean | Error | StdDev | Ratio | RatioSD | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | -- -- - | -- -- -- -- - : | -- -- -- -- -- : | -- -- -- -- -- : | -- -- -- : | -- -- -- -- : | ReferenceTypeSum | 512 | 344.8 ns | 3.6473 ns | 3.4117 ns | 1.00 | 0.00 | ValueTypeSum | 512 | 361.2 ns | 3.8004 ns | 3.3690 ns | 1.05 | 0.02 | ExtendedValueTypeSum | 512 | 347.2 ns | 5.9686 ns | 5.5831 ns | 1.01 | 0.02 | ReferenceTypeOptimizedSum | 512 | 254.5 ns | 2.4427 ns | 2.2849 ns | 0.74 | 0.01 | ValueTypeOptimizedSum | 512 | 353.0 ns | 1.9201 ns | 1.7960 ns | 1.02 | 0.01 | ExtendedValueTypeOptimizedSum | 512 | 280.3 ns | 1.2423 ns | 1.0374 ns | 0.81 | 0.01 | ReferenceTypeUnrolledSum | 512 | 213.2 ns | 1.2483 ns | 1.1676 ns | 0.62 | 0.01 | ValueTypeUnrolledSum | 512 | 201.3 ns | 0.6720 ns | 0.6286 ns | 0.58 | 0.01 | ExtendedValueTypeUnrolledSum | 512 | 223.6 ns | 1.0210 ns | 0.9550 ns | 0.65 | 0.01 |"
protected override void Dispose ( bool disposing ) { if ( disposing & & ( components ! = null ) ) { components.Dispose ( ) ; } base.Dispose ( disposing ) ; } protected override void Dispose ( bool disposing ) { if ( disposing & & ( components ! = null ) ) { components.Dispose ( ) ; if ( _myDisposable ! = null ) _myDisposable.Dispose ( ) ; if ( _myOtherDisposable ! = null ) _myOtherDisposable.Dispose ( ) ; } base.Dispose ( disposing ) ; } protected override void Dispose ( bool disposing ) { if ( disposing ) { if ( components ! = null ) components.Dispose ( ) ; } base.Dispose ( disposing ) ; }
SELECT * FROM Win32_NTLogEvent where LogFile = 'System ' or logFile='Active Directory Web Services ' SELECT * FROM Win32_NTLogEvent where LogFile = 'Microsoft-Windows-AppLocker/EXE and DLL '
"[ RoutePrefix ( `` api/test '' ) ] public class TestController : ApiController { [ HttpGet ] [ Route ( @ '' resource/ { *path ? } '' ) ] public async Task < HttpResponseMessage > GetFolder ( string path = `` '' ) { return this.Request.CreateResponse ( HttpStatusCode.OK , new { Status = `` OK '' } ) ; } } < system.webServer > < handlers > < remove name= '' ExtensionlessUrlHandler-Integrated-4.0 '' / > < remove name= '' OPTIONSVerbHandler '' / > < remove name= '' TRACEVerbHandler '' / > < add name= '' ExtensionlessUrlHandler-Integrated-4.0 '' path= '' * . '' verb= '' * '' type= '' System.Web.Handlers.TransferRequestHandler '' preCondition= '' integratedMode , runtimeVersionv4.0 '' / > < ! -- API must handle all file names -- > < add name= '' ApiUrlHandler '' path= '' /api/test/* '' verb= '' GET , POST , PUT , DELETE , OPTIONS '' type= '' System.Web.Handlers.TransferRequestHandler '' preCondition= '' integratedMode , runtimeVersionv4.0 '' / > < /handlers > < /system.webServer > GET /api/test/resource = > HTTP 200 ( as expected ) GET /api/test/resource/foo = > HTTP 200 ( as expected ) GET /api/test/foo = > HTTP 404 ( as expected ) GET /api/test/foo/bar = > HTTP 500 ( expected : 404 )"
"void SetupDailyTask ( ) { using ( TaskService ts = new TaskService ( `` servername.us.xxxxxdomain.com '' , @ '' domainname\username '' , '' domainname '' , '' password '' ) ) { //Task tsk = ts.GetTask ( `` DailyTask '' ) ; //if ( tsk ! = null ) { ts.RootFolder.DeleteTask ( `` DailyTask '' ) ; } //DateTime dt = DateTime.Now ; //TimeSpan tsp = new TimeSpan ( 12 , 44 , 0 ) ; //dt = dt.Date + tsp ; //ts.Execute ( `` notepad.exe '' ) .Once ( ) .Starting ( dt ) .AsTask ( `` DailyTask '' ) ; } }"
"static void Main ( string [ ] args ) { try { System.Windows.Forms.Application.Run ( mainform ) ; } catch ( Exception ex ) { // Log error and display error message } } static void Main ( string [ ] args ) { System.Windows.Forms.Application.ThreadException += new ThreadExceptionEventHandler ( Application_ThreadException ) ; System.Windows.Forms.Application.Run ( mainform ) ; } static void Application_ThreadException ( object sender , ThreadExceptionEventArgs e ) { // Log error and display error message }"
"private void RunSeveralAlgorithmObjects ( ) { IEnumerable < ILexiconEntry > currentEntries = allLexiconEntries.GetGroup ( intCurrentAlgorithmObject , intNumberOfAlgorithmObjectsToUse ) ; algorithm.LexiconEntries = currentEntries ; algorithm.Run ( ) ; intCurrentAlgorithmObject++ ; for ( int i = 0 ; i < intNumberOfAlgorithmObjectsToUse - 1 ; i++ ) { algorithm = CreateNewAlgorithmObject ( ) ; AddAlgorithmListeners ( ) ; algorithm.Run ( ) ; intCurrentAlgorithmObject++ ; } } private TextMiningAlgorithm CreateNewAlgorithmObject ( ) { TextMiningAlgorithm newAlg = new TextMiningAlgorithm ( ) ; newAlg.SortedTermStruct = algorithm.SortedTermStruct ; newAlg.PreprocessedSynonyms = algorithm.PreprocessedSynonyms ; newAlg.DistanceMeasure = algorithm.DistanceMeasure ; newAlg.HitComparerMethod = algorithm.HitComparerMethod ; newAlg.LexiconEntries = allLexiconEntries.GetGroup ( intCurrentAlgorithmObject , intNumberOfAlgorithmObjectsToUse ) ; newAlg.MaxTermPercentageDeviation = algorithm.MaxTermPercentageDeviation ; newAlg.MaxWordPercentageDeviation = algorithm.MaxWordPercentageDeviation ; newAlg.MinWordsPercentageHit = algorithm.MinWordsPercentageHit ; newAlg.NumberOfThreads = algorithm.NumberOfThreads ; newAlg.PermutationType = algorithm.PermutationType ; newAlg.RemoveStopWords = algorithm.RemoveStopWords ; newAlg.RestrictPartialTextMatches = algorithm.RestrictPartialTextMatches ; newAlg.Soundex = algorithm.Soundex ; newAlg.Stemming = algorithm.Stemming ; newAlg.StopWords = algorithm.StopWords ; newAlg.Synonyms = algorithm.Synonyms ; newAlg.Terms = algorithm.Terms ; newAlg.UseSynonyms = algorithm.UseSynonyms ; algorithm = null ; return newAlg ; } // Run the algorithm in it 's own thread Thread algorithmThread = new Thread ( new ThreadStart ( RunSeveralAlgorithmObjects ) ) ; algorithmThread.Start ( ) ;"
"/// < summary > /// Parses the PE header and determines whether the given assembly is a console application./// < /summary > /// < param name= '' assemblyPath '' > The path of the assembly to check. < /param > /// < returns > True if the given assembly is a console application ; false otherwise. < /returns > /// < remarks > The magic numbers in this method are extracted from the PE/COFF file/// format specification available from http : //www.microsoft.com/whdc/system/platform/firmware/pecoff.mspx/// < /remarks > bool AssemblyUsesConsoleSubsystem ( string assemblyPath ) { using ( var s = new FileStream ( assemblyPath , FileMode.Open , FileAccess.Read ) ) { var rawPeSignatureOffset = new byte [ 4 ] ; s.Seek ( 0x3c , SeekOrigin.Begin ) ; s.Read ( rawPeSignatureOffset , 0 , 4 ) ; int peSignatureOffset = rawPeSignatureOffset [ 0 ] ; peSignatureOffset |= rawPeSignatureOffset [ 1 ] < < 8 ; peSignatureOffset |= rawPeSignatureOffset [ 2 ] < < 16 ; peSignatureOffset |= rawPeSignatureOffset [ 3 ] < < 24 ; var coffHeader = new byte [ 24 ] ; s.Seek ( peSignatureOffset , SeekOrigin.Begin ) ; s.Read ( coffHeader , 0 , 24 ) ; byte [ ] signature = { ( byte ) ' P ' , ( byte ) ' E ' , ( byte ) '\0 ' , ( byte ) '\0 ' } ; for ( int index = 0 ; index < 4 ; index++ ) { Assert.That ( coffHeader [ index ] , Is.EqualTo ( signature [ index ] ) , `` Attempted to check a non PE file for the console subsystem ! `` ) ; } var subsystemBytes = new byte [ 2 ] ; s.Seek ( 68 , SeekOrigin.Current ) ; s.Read ( subsystemBytes , 0 , 2 ) ; int subSystem = subsystemBytes [ 0 ] | subsystemBytes [ 1 ] < < 8 ; return subSystem == 3 ; /*IMAGE_SUBSYSTEM_WINDOWS_CUI*/ } }"
"private delegate void SetLabelTextDelegate ( string str1 , string str2 ) ; public void SetLabelText ( string str1 , string str2 ) { if ( this.label1.InvokeRequired || this.label2.InvokeRequired ) { this.Invoke ( new SetLabelTextDelegate ( SetLabelText ) , new object [ ] { str1 , str2 } ) ; return ; } this.label1.Text = ( str1 == string.Empty ) ? this.label1.Text : str1 ; this.label2.Text = ( str2 == string.Empty ) ? this.label2.Text : str2 ; }"
"session.CreateCriteria < MyType > ( ) .Add ( Expression.Eq ( `` State '' , StateEnum.Complete ) ) could not resolve property : State of : MyNamespace.MyType"
"abstract class Goods { public decimal weight ; string Title , BarCode ; double Price ; public Goods ( string title , string barCode , double price ) { Title = title ; BarCode = barCode ; Price = price ; } } abstract class Book : Goods { protected int NumPages ; public Book ( string title , string barCode , double price , int numPages ) : base ( title , barCode , price ) { NumPages = numPages ; weight = 1 ; } public override void display ( ) { base.display ( ) ; Console.WriteLine ( `` Page Numbers : { 0 } '' , NumPages ) ; } } public Book ( string title , string barCode , double price , int numPages ) : base ( title , barCode , price )"
"{ SELECT * FROM FCR.V_REPORT WHERE DATE BETWEEN to_date ( '14/09/2001 ' , 'dd/mm/yyyy ' ) AND to_date ( '30/09/2011 ' , 'dd/mm/yyyy ' ) } public static DataTable GetReport ( string date1 , string date2 ) { DatabaseAdapter dba = DatabaseAdapter.GetInstance ( ) ; string SqlQuery = string.Format ( @ '' SELECT * FROM FCR.V_REPORT WHERE DATE BETWEEN to_date ( ' { 0 } ' , 'dd/mm/yyyy ' ) AND to_date ( ' { 1 } ' , 'dd/mm/yyyy ' ) '' , date1 , date2 ) ; OracleDataReader reader = dba.QueryDatabase ( SqlQuery ) ; DataTable dt = new DataTable ( ) ; dt.Load ( reader ) ; int temp = dt.Rows.Count ; return dt ; } SELECT * FROM FCR.V_REPORTWHERE DATE BETWEEN to_date ( '01/01/2001 ' , 'dd/mm/yyyy ' ) AND to_date ( '30/09/2011 ' , 'dd/mm/yyyy ' )"
"private static void Update < T > ( DbContext context , ICollection < T > existing , ICollection < T > updated ) // where T : class { context.RemoveRange ( existing ) ; updated.ToList ( ) .ForEach ( existing.Add ) ; }"
"public class Translation { public string key { get ; set ; } public string value { get ; set ; } public string cultureId { get ; set ; } } public async Task < IActionResult > ReactGetResources ( string module = `` shared '' ) { string [ ] Languages = { `` en-US '' , `` fr-FR '' , `` it-IT '' , `` es-ES '' } ; List < Translation > Translation = new List < Translation > ( ) ; Translation.Add ( new Translation { key = `` hello '' , value = `` Hello '' , cultureId = `` en-US '' } ) ; Translation.Add ( new Translation { key = `` hello '' , value = `` Bonjour '' , cultureId = `` fr-FR '' } ) ; Translation.Add ( new Translation { key = `` hello '' , value = `` Buongiorno '' , cultureId = `` it-IT '' } ) ; Translation.Add ( new Translation { key = `` goodbye '' , value = `` Good Bye '' , cultureId = `` en-US '' } ) ; Translation.Add ( new Translation { key = `` goodbye '' , value = `` Au revoir '' , cultureId = `` fr-FR '' } ) ; Translation.Add ( new Translation { key = `` goodbye '' , value = `` adiós '' , cultureId = `` es-ES '' } ) ; Dictionary < string , List < string > > query = Translation .OrderBy ( o = > o.cultureId ) .GroupBy ( o = > o.key ) .ToDictionary ( g = > g.Key , g = > g.Select ( x = > x.value ) .ToList ( ) ) ; return Json ( query ) ; } { `` hello '' : [ `` Hello '' , //en `` Bonjour '' , //fr `` Buongiorno '' //it ] , `` goodbye '' : [ `` Good Bye '' , //en `` Au revoir '' , //fr `` Adiós '' , //es ] } { `` hello '' : [ `` Hello '' , //en `` Bonjour '' , //en `` Buongiorno '' , //it null //es ] , `` goodbye '' : [ `` Good Bye '' , //en `` Au revoir '' , //fr null , //it `` Adiós '' //es ] }"
public class Item { [ Key ] public int ItemId { get ; set ; } public string ItemName { get ; set ; } public Node PrimaryNode { get ; set ; } public User User { get ; set ; } } using ( var db = new MyContext ( ) ) { var item = db.Items.Include ( i = > i.User ) .Include ( n = > n.PrimaryNode ) .FirstOrDefault ( i = > i.ItemId == id ) ; }
"public async Task WrapperMethod ( ) { int result=await GetIntAsync ( ) ; } public async Errand < int > GetIntAsync ( ) { await Task.Delay ( 1000 ) ; return 3 ; } [ AttributeUsage ( AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate , Inherited = false , AllowMultiple = false ) ] public sealed class AsyncMethodBuilderAttribute : Attribute { // // Parameters : // builderType : public AsyncMethodBuilderAttribute ( Type builderType ) { this.BuilderType = builderType ; } // public Type BuilderType { get ; } } [ AsyncMethodBuilder ( typeof ( Builder ) ) ] public partial class Errand { private readonly Builder mbuilder ; public Errand ( ) { } internal Errand ( Builder methodBuilder ) = > this.mbuilder = methodBuilder ; private readonly HashSet < Awaiter > awaiters = new HashSet < Awaiter > ( ) ; protected bool isCompleted = false ; public Awaiter GetAwaiter ( ) { Awaiter result = new Awaiter ( this ) ; this.awaiters.Add ( result ) ; return result ; } } public partial class Builder { # region `` Compiler integration `` public static Builder Create ( ) { return new Builder ( ) ; } protected IAsyncStateMachine myStateMachine ; public void Start < TStateMachine > ( ref TStateMachine stateMachine ) where TStateMachine : IAsyncStateMachine { this.myStateMachine = stateMachine ; this.errand = new Errand ( this ) ; stateMachine.MoveNext ( ) ; } public void SetException ( Exception ex ) { } public void AwaitOnCompleted < TAwaiter , TStateMachine > ( ref TAwaiter awaiter , ref TStateMachine machine ) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { var foo = machine as IAsyncStateMachine ; awaiter.OnCompleted ( ( ) = > { foo.MoveNext ( ) ; } ) ; } public void AwaitUnsafeOnCompleted < TAwaiter , TStateMachine > ( ref TAwaiter awaiter , ref TStateMachine machine ) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { IAsyncStateMachine asyncMachine = machine as IAsyncStateMachine ; awaiter.OnCompleted ( ( ) = > asyncMachine.MoveNext ( ) ) ; } private Errand errand ; public Errand Task { get { return this.errand ; } } public void SetStateMachine ( IAsyncStateMachine stateMachine ) { } public void SetResult ( ) { } # endregion // internal void AddAwaiter ( Awaiter awaiter ) = > this.awaiters.Add ( awaiter ) ; }"
"Update < TReport > ( object updateOnly , Expression < Func < TReport , bool > > where ) Update ( new { Name = `` test '' } , new { Id = id } ) x = > x.Id == id ."
"public AuditFacade ( IIocContainer container , Func < IAuditManager > auditManagerFactory , Func < ValidatorFactory > validatorCreatorFactory , IUserContext userContext , Func < ITenantManager > tenantManagerFactory , Func < IMonitoringComponent > monitoringComponentFactory ) : base ( container , auditManagerFactory , GlobalContext.CurrentTenant , validatorCreatorFactory , userContext , tenantManagerFactory ) { _monitoringComponent = new Lazy < IMonitoringComponent > ( monitoringComponentFactory ) ; } public AuditTenantComponent ( Func < IAuditTenantRepository > auditTenantRepository ) { _auditTenantRepository = new Lazy < IAuditTenantRepository > ( auditTenantRepository ) ; }"
public class XmlRepository1 { private XDocument xDocument ; public void CrudOp ( ) { // Perform CRUD operation ... // Call Save ( ) xDocument.Save ( path ) ; } } public class XmlRepository2 { private XDocument xDocument ; public void CrudOp ( ) { // Perform CRUD operation ... // DO N'T call save } // Provide a SaveChanges ( ) method to the end-user ... public void SaveChanges ( ) { xDocument.Save ( path ) ; } }
"public delegate void LockCallback ( ) ; /// < summary > /// Provides locking based on a string key . /// Locks are local to the LockProvider instance./// The class handles disposing of unused locks . Generally used for /// coordinating writes to files ( of which there can be millions ) . /// Only keeps key/lock pairs in memory which are in use./// Thread-safe./// < /summary > public class LockProvider { /// < summary > /// The only objects in this collection should be for open files . /// < /summary > protected Dictionary < String , Object > locks = new Dictionary < string , object > ( StringComparer.Ordinal ) ; /// < summary > /// Synchronization object for modifications to the 'locks ' dictionary /// < /summary > protected object createLock = new object ( ) ; /// < summary > /// Attempts to execute the 'success ' callback inside a lock based on 'key ' . If successful , returns true . /// If the lock can not be acquired within 'timoutMs ' , returns false /// In a worst-case scenario , it could take up to twice as long as 'timeoutMs ' to return false . /// < /summary > /// < param name= '' key '' > < /param > /// < param name= '' success '' > < /param > /// < param name= '' failure '' > < /param > /// < param name= '' timeoutMs '' > < /param > public bool TryExecute ( string key , int timeoutMs , LockCallback success ) { //Record when we started . We do n't want an infinite loop . DateTime startedAt = DateTime.UtcNow ; // Tracks whether the lock acquired is still correct bool validLock = true ; // The lock corresponding to 'key ' object itemLock = null ; try { //We have to loop until we get a valid lock and it stays valid until we lock it . do { // 1 ) Creation/aquire phase lock ( createLock ) { // We have to lock on dictionary writes , since otherwise // two locks for the same file could be created and assigned // at the same time . ( i.e , between TryGetValue and the assignment ) if ( ! locks.TryGetValue ( key , out itemLock ) ) locks [ key ] = itemLock = new Object ( ) ; //make a new lock ! } // Loophole ( part 1 ) : // Right here - this is where another thread ( executing part 2 ) could remove 'itemLock ' // from the dictionary , and potentially , yet another thread could // insert a new value for 'itemLock ' into the dictionary ... etc , etc.. // 2 ) Execute phase if ( System.Threading.Monitor.TryEnter ( itemLock , timeoutMs ) ) { try { // May take minutes to acquire this lock . // Trying to detect an occurence of loophole above // Check that itemLock still exists and matches the dictionary lock ( createLock ) { object newLock = null ; validLock = locks.TryGetValue ( key , out newLock ) ; validLock = validLock & & newLock == itemLock ; } // Only run the callback if the lock is valid if ( validLock ) { success ( ) ; // Extremely long-running callback , perhaps throwing exceptions return true ; } } finally { System.Threading.Monitor.Exit ( itemLock ) ; //release lock } } else { validLock = false ; //So the finally clause does n't try to clean up the lock , someone else will do that . return false ; //Someone else had the lock , they can clean it up . } //Are we out of time , still having an invalid lock ? if ( ! validLock & & Math.Abs ( DateTime.UtcNow.Subtract ( startedAt ) .TotalMilliseconds ) > timeoutMs ) { //We failed to get a valid lock in time . return false ; } // If we had an invalid lock , we have to try everything over again . } while ( ! validLock ) ; } finally { if ( validLock ) { // Loophole ( part 2 ) . When loophole part 1 and 2 cross paths , // An lock object may be removed before being used , and be orphaned // 3 ) Cleanup phase - Attempt cleanup of lock objects so we do n't // have a *very* large and slow dictionary . lock ( createLock ) { // TryEnter ( ) fails instead of waiting . // A normal lock would cause a deadlock with phase 2 . // Specifying a timeout would add great and pointless overhead . // Whoever has the lock will clean it up also . if ( System.Threading.Monitor.TryEnter ( itemLock ) ) { try { // It succeeds , so no-one else is working on it // ( but may be preparing to , see loophole ) // Only remove the lock object if it // still exists in the dictionary as-is object existingLock = null ; if ( locks.TryGetValue ( key , out existingLock ) & & existingLock == itemLock ) locks.Remove ( key ) ; } finally { // Remove the lock System.Threading.Monitor.Exit ( itemLock ) ; } } } } } // Ideally the only objects in 'locks ' will be open operations now . return true ; } } LockProvider p = new LockProvider ( ) ; bool success = p.TryExecute ( `` filename '' ,1000 , delegate ( ) { //This code executes within the lock } ) ;"
"06-19 00:39:55.362 13143-13143/ ? I/zygote64 : Late-enabling -Xcheck : jni06-19 00:39:55.474 13143-13143/SDL2Droid_CS.SDL2Droid_CS W/ActivityThread : Application SDL2Droid_CS.SDL2Droid_CS can be debugged on port 8100 ... 06-19 00:39:55.514 13143-13143/ ? W/monodroid : Creating public update directory : ` /data/user/0/SDL2Droid_CS.SDL2Droid_CS/files/.__override__ ` Using override path : /data/user/0/SDL2Droid_CS.SDL2Droid_CS/files/.__override__ Using override path : /storage/emulated/0/Android/data/SDL2Droid_CS.SDL2Droid_CS/files/.__override__ Trying to load sgen from : /data/user/0/SDL2Droid_CS.SDL2Droid_CS/files/.__override__/libmonosgen-2.0.so Trying to load sgen from : /storage/emulated/0/Android/data/SDL2Droid_CS.SDL2Droid_CS/files/.__override__/libmonosgen-2.0.so Trying to load sgen from : /storage/emulated/0/../legacy/Android/data/SDL2Droid_CS.SDL2Droid_CS/files/.__override__/libmonosgen-2.0.so Trying to load sgen from : /data/app/SDL2Droid_CS.SDL2Droid_CS-wmPu9Ce48QdJhvYc6bPRiA==/lib/arm64/libmonosgen-2.0.so Trying to load sgen from : /data/user/0/SDL2Droid_CS.SDL2Droid_CS/files/.__override__/links/libmonosgen-2.0.so06-19 00:39:55.515 13143-13143/ ? W/monodroid : Trying to load sgen from : /system/lib/libmonosgen-2.0.so06-19 00:39:55.515 13143-13143/ ? A/monodroid : can not find libmonosgen-2.0.so in override_dir : /data/user/0/SDL2Droid_CS.SDL2Droid_CS/files/.__override__ , app_libdir : /data/app/SDL2Droid_CS.SDL2Droid_CS-wmPu9Ce48QdJhvYc6bPRiA==/lib/arm64 nor in previously printed locations . Do you have a shared runtime build of your app with AndroidManifest.xml android : minSdkVersion < 10 while running on a 64-bit Android 5.0 target ? This combination is not supported . Please either set android : minSdkVersion > = 10 or use a build without the shared runtime ( like default Release configuration ) ."
"var data = ( from t in ctx.ObjectContext.Widgets where t.CampaignId == campaignId & & t.CalendarEventId == calendarEventId ( t.RecurringEventId IS NULL OR t.RecurringEventId = recurringEventId ) select t ) ; data = data.OrderBy ( t = > t.Id ) ; if ( page > 0 ) { data = data.Skip ( rows * ( page - 1 ) ) .Take ( rows ) ; } var l = data.ToList ( ) ; select top 50 * from Widgets w where CampaignId = xxx AND CalendarEventId = yyy AND ( RecurringEventId IS NULL OR RecurringEventId = zzz ) order by w.Id SELECT TOP ( 50 ) [ Project1 ] . [ Id ] AS [ Id ] , [ Project1 ] . [ CampaignId ] AS [ CampaignId ] < redacted > FROM ( SELECT [ Project1 ] . [ Id ] AS [ Id ] , [ Project1 ] . [ CampaignId ] AS [ CampaignId ] , < redacted > , row_number ( ) OVER ( ORDER BY [ Project1 ] . [ Id ] ASC ) AS [ row_number ] FROM ( SELECT [ Extent1 ] . [ Id ] AS [ Id ] , [ Extent1 ] . [ CampaignId ] AS [ CampaignId ] , < redacted > FROM [ dbo ] . [ Widgets ] AS [ Extent1 ] WHERE ( [ Extent1 ] . [ CampaignId ] = @ p__linq__0 ) AND ( [ Extent1 ] . [ CalendarEventId ] = @ p__linq__1 ) AND ( [ Extent1 ] . [ RecurringEventId ] = @ p__linq__2 OR [ Extent1 ] . [ RecurringEventId ] IS NULL ) ) AS [ Project1 ] ) AS [ Project1 ] WHERE [ Project1 ] . [ row_number ] > 0ORDER BY [ Project1 ] . [ Id ] ASC var data = ( from t in ctx.ObjectContext.Widgets where t.CampaignId == campaignId & & t.CalendarEventId == calendarEventId ( t.RecurringEventId IS NULL OR t.RecurringEventId = recurringEventId ) select t ) ) .AsEnumerable ( ) .Select ( ( item , index ) = > new { Index = index , Item = item } ) ; data = data.OrderBy ( t = > t.Index ) ; if ( page > 0 ) { data = data.Where ( t = > t.Index > = ( rows * ( page - 1 ) ) ) ; } data = data.Take ( rows ) ;"
"string test = String.Format ( `` { 0 } test { 1 } '' , `` Mark '' , 13 ) ; string test = string.Format ( `` { 0 } test { 1 } '' , `` Mark '' , 13 ) ;"
"< r : Ribbon Name= '' ribbon '' > < r : Ribbon.QuickAccessToolBar > < r : RibbonQuickAccessToolBar ItemsSource = '' { Binding QuickMenuItems , Mode=OneWay } '' > < r : RibbonQuickAccessToolBar.ItemTemplate > < DataTemplate > < StackPanel > < r : RibbonButton QuickAccessToolBarId= '' { Binding RibbonId } '' Label= '' { Binding Label } '' SmallImageSource= '' { Binding ImageUri } '' Command= '' { Binding Command } '' / > < /StackPanel > < /DataTemplate > < /r : RibbonQuickAccessToolBar.ItemTemplate > < /r : RibbonQuickAccessToolBar > < /r : Ribbon.QuickAccessToolBar > < r : RibbonTab Header= '' Home '' > < r : RibbonGroup x : Name= '' Clipboard '' ItemsSource = '' { Binding MenuItems , Mode=OneWay } '' > < r : RibbonGroup.ItemTemplate > < DataTemplate > < StackPanel > < r : RibbonButton QuickAccessToolBarId= '' { Binding RibbonId } '' Label= '' { Binding Label } '' SmallImageSource= '' { Binding ImageUri } '' Command= '' { Binding Command } '' / > < /StackPanel > < /DataTemplate > < /r : RibbonGroup.ItemTemplate > < /r : RibbonGroup > < /r : RibbonTab > < /r : Ribbon > ObservableCollection < RibbonItem > _MenuItems ; ObservableCollection < RibbonItem > _QuickMenuItems ; public ObservableCollection < RibbonItem > MenuItems { get { return _MenuItems ; } } public ObservableCollection < RibbonItem > QuickMenuItems { get { return _QuickMenuItems ; } } public class RibbonItem { public RibbonItem ( string label , string imageUri , ICommand command , string ribbonId ) { Label = label ; ImageUri = imageUri ; Command = command ; } public string Label { get ; private set ; } public string ImageUri { get ; private set ; } public ICommand Command { get ; private set ; } public string RibbonId { get ; private set ; } }"
ManagementObjectSearcher mo = new ManagementObjectSearcher ( `` select * from Win32_SoundDevice '' ) ; foreach ( ManagementObject soundDevice in mo.Get ( ) ) { MessageBox.Show ( soundDevice.GetPropertyValue ( `` Caption '' ) .ToString ( ) ) ; // or MessageBox.Show ( soundDevice.GetPropertyValue ( `` Description '' ) .ToString ( ) ) ; //or MessageBox.Show ( soundDevice.GetPropertyValue ( `` Manufacturer '' ) .ToString ( ) ) ; //or MessageBox.Show ( soundDevice.GetPropertyValue ( `` Name '' ) .ToString ( ) ) ; //or MessageBox.Show ( soundDevice.GetPropertyValue ( `` ProductName '' ) .ToString ( ) ) ; } WaveInCapabilities [ ] devices = GetAvailableDevices ( ) ; foreach ( device in devices ) { MessageBox.Show ( device.ProductName ) ; }
"DispatcherTimer timer = new DispatcherTimer ( ) ; timer.Interval = TimeSpan.FromSeconds ( 10 ) ; EventHandler callback = null ; callback = ( s , e ) = > { timer.Stop ( ) ; timer.Tick -= callback ; } ; timer.Tick += callback ; timer.Start ( ) ;"
< asp : TextBox ID= '' descriptiont '' runat= '' server '' Rows= '' 3 '' Width= '' 300px '' Height= '' 100px '' Wrap= '' true '' > descriptiont.Text = s.GetValue ( 1 ) .ToString ( ) ; descriptiont.Enabled = false ;
"{ ... `` iisSettings '' : { `` windowsAuthentication '' : false , `` anonymousAuthentication '' : true , `` iisExpress '' : { `` applicationUrl '' : `` http : //localhost:52088 '' , `` sslPort '' : 44300 } } , ... } WebHost.CreateDefaultBuilder ( args ) //.UseUrls ( `` https : //localhost/5100 '' ) .UseStartup < Startup > ( ) ; services.AddHttpsRedirection ( _ = > { _.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect ; _.HttpsPort = 5100 ; } ) ;"
public void SomeMethod ( ) { ... using ( var foo = new Foo ( ) ) { ... } // Foo is n't use after here ( obviously ) . ... }
"class DatabaseContext : DbContext { public DatabaseContext ( ) : base ( `` database '' ) { } public DbSet < Login > Logins { get ; set ; } public DbSet < master > masters { get ; set ; } public DbSet < People > People { get ; set ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < configSections > < ! -- For more information on Entity Framework configuration , visit http : //go.microsoft.com/fwlink/ ? LinkID=237468 -- > < section name= '' entityFramework '' type= '' System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection , EntityFramework , Version=6.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' requirePermission= '' false '' / > < /configSections > < startup > < supportedRuntime version= '' v4.0 '' sku= '' .NETFramework , Version=v4.5.2 '' / > < /startup > < entityFramework > < defaultConnectionFactory type= '' System.Data.Entity.Infrastructure.LocalDbConnectionFactory , EntityFramework '' > < parameters > < parameter value= '' mssqllocaldb '' / > < /parameters > < /defaultConnectionFactory > < providers > < provider invariantName= '' System.Data.SqlClient '' type= '' System.Data.Entity.SqlServer.SqlProviderServices , EntityFramework.SqlServer '' / > < /providers > < /entityFramework > < /configuration > ` < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < configSections > < ! -- For more information on Entity Framework configuration , visit http : //go.microsoft.com/fwlink/ ? LinkID=237468 -- > < section name= '' entityFramework '' type= '' System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection , EntityFramework , Version=6.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' requirePermission= '' false '' / > < /configSections > < startup > < supportedRuntime version= '' v4.0 '' sku= '' .NETFramework , Version=v4.5.2 '' / > < /startup > < entityFramework > < defaultConnectionFactory type= '' System.Data.Entity.Infrastructure.LocalDbConnectionFactory , EntityFramework '' > < parameters > < parameter value= '' mssqllocaldb '' / > < /parameters > < /defaultConnectionFactory > < providers > < provider invariantName= '' System.Data.SqlClient '' type= '' System.Data.Entity.SqlServer.SqlProviderServices , EntityFramework.SqlServer '' / > < /providers > < /entityFramework > < /configuration > `"
public class SomeClass : ICloneable { // Some Code // Implementing interface method public object Clone ( ) { // Some Clonning Code } }
"app.UseGoogleAuthentication ( clientId : `` APIKEY.apps.googleusercontent.com '' , clientSecret : `` SECRET-K '' ) ; app.UseGoogleAuthentication ( new GoogleOAuth2AuthenticationOptions ( ) { ClientId = `` APIKEY.apps.googleusercontent.com '' , ClientSecret = `` SECRET-K '' , CallbackPath = new PathString ( `` /signin-google '' ) } ) ;"
// instead of writingFoo x = default ( Foo ) ; // we can just writeFoo x = default ; int ? x = default ( int ? ) ; // x is nullint ? x = default ; // x is null static void Foo ( int ? x = default ( int ? ) ) { // x is null } static void Foo ( int ? x = default ) { // x is 0 ! ! ! }
< local : RepositoryContainer xmlns : local= '' clr-namespace : SystemSpecs.View.UserControls '' Title= '' My Repository Title '' / > < UserControl x : Class= '' SystemSpecs.View.UserControls.RepositoryContainer '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : local= '' clr-namespace : SystemSpecs.View.UserControls '' mc : Ignorable= '' d '' d : DesignHeight= '' 100 '' d : DesignWidth= '' 500 '' d : DataContext= '' { d : DesignData Source=RepositoryContainerDesignData.xaml } '' DataContext= '' { Binding RelativeSource= { RelativeSource Self } } '' > < Grid > < TextBlock Text= '' { Binding Path=Title } '' FontSize= '' 24 '' Foreground= '' White '' HorizontalAlignment= '' Center '' / > < /Grid > < /UserControl > using System.Windows.Controls ; namespace SystemSpecs.View.UserControls { public partial class RepositoryContainer : UserControl { public string Title { get ; set ; } public RepositoryContainer ( ) { InitializeComponent ( ) ; } } }
var StripeHelper = { payProceed : function ( token ) { try { var _ajax = new AjaxHelper ( `` /Services/Service.asmx/PaymentProceed '' ) ; _ajax.Data = `` { token : '' + JSON.stringify ( token ) + `` } '' ; _ajax.OnInit = function ( ) { PageHelper.loading ( true ) ; } ; _ajax.OnSuccess = function ( data ) { console.log ( data.d ) ; PageHelper.loading ( false ) ; window.location ( '/payment-success ' ) ; } ; _ajax.Init ( ) ; } catch ( e ) { PageHelper.loading ( false ) ; } } } [ WebMethod ( EnableSession = true ) ] public string PaymentProceed ( string token ) { Session [ `` PAYMENT_MODE '' ] = PaymentContants.PaymentVia.Stripe ; var myCharge = new StripeChargeCreateOptions ( ) ; myCharge.AmountInCents = 100 ; myCharge.Currency = `` USD '' ; myCharge.Description = `` Charge for property sign and postage '' ; myCharge.TokenId = token ; string key = `` sk_test_Uvk2cH***********Fvs '' ; //test key var chargeService = new StripeChargeService ( key ) ; StripeCharge stripeCharge = new StripeCharge ( ) ; //Error is coming for below line -- > stripeCharge = chargeService.Create ( myCharge ) ; //No token found return stripeCharge.Id ; }
Input Price : 25.1132356547854257645454 DocumentDB Price : 25.113235654785
"var rootElem = xDoc.Root ; // XDocumentrootElem.SetAttributeValue ( `` { xml } space '' , `` preserve '' ) ; < ProjectDetails xmlns= '' http : //site/ppm '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' p3 : space= '' preserve '' xmlns : p3= '' xml '' > < ProjectDetails xmlns= '' http : //site/ppm '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xml : space= '' preserve '' >"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using SFML ; using SFML.Graphics ; using SFML.Window ; namespace Source { public ColorWheel ( ) { for ( int y = 0 ; y < 255 ; y++ ) { for ( int z = 0 ; z < 6 ; z++ ) { for ( int x = 0 ; x < 255 ; x++ ) { uint ux = ( uint ) x ; uint uy = ( uint ) y ; uint uz = ( uint ) z ; ux = ux + ( uz * 255 ) ; image.SetPixel ( ux , uy , color ) ; //Red 255 - Green 0-254 if ( z == 0 ) { color.G += 1 ; } //Green 255 - Red 255-0 else if ( z == 1 ) { color.R -= 1 ; } //Green 255 - Blue 0-255 else if ( z == 2 ) { color.B += 1 ; } //Blue 255 - Green 255-0 else if ( z == 3 ) { color.G -= 1 ; } //Blue 255 - Red 0-255 else if ( z == 4 ) { color.R += 1 ; } //Red 255 - Blue 255-0 else if ( z == 5 ) { color.B -= 1 ; } Texture texture = new Texture ( image ) ; sprite.Texture = texture ; } public void Update ( double dt ) { } public void Render ( RenderWindow rWindow ) { rWindow.Draw ( sprite ) ; } }"
"CreateChildControls ( System.Collections.IEnumerable dataSource , bool dataBinding )"
"static void Main ( string [ ] args ) { snowcrashCLR.Blueprint blueprint ; snowcrashCLR.Result result ; var path = args.Length > 1 ? args [ 1 ] : @ '' c : \ '' ; snowcrashCLR.SnowCrashCLR.parse ( path , out blueprint , out result ) ; if ( result ! = null ) { var warnings = result.GetWarningsCs ( ) ; foreach ( var warning in warnings ) { Console.WriteLine ( `` { 0 } : { 1 } '' , warning.code , warning.message ) ; } } } [ FileNotFoundException : Could not load file or assembly 'snowcrashCLR.DLL ' or one of its dependencies . The specified module could not be found . ] System.Reflection.RuntimeAssembly._nLoad ( AssemblyName fileName , String codeBase , Evidence assemblySecurity , RuntimeAssembly locationHint , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean throwOnFileNotFound , Boolean forIntrospection , Boolean suppressSecurityChecks ) +0 System.Reflection.RuntimeAssembly.nLoad ( AssemblyName fileName , String codeBase , Evidence assemblySecurity , RuntimeAssembly locationHint , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean throwOnFileNotFound , Boolean forIntrospection , Boolean suppressSecurityChecks ) +34 System.Reflection.RuntimeAssembly.InternalLoadAssemblyName ( AssemblyName assemblyRef , Evidence assemblySecurity , RuntimeAssembly reqAssembly , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean throwOnFileNotFound , Boolean forIntrospection , Boolean suppressSecurityChecks ) +152 System.Reflection.RuntimeAssembly.InternalLoad ( String assemblyString , Evidence assemblySecurity , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean forIntrospection ) +77 System.Reflection.RuntimeAssembly.InternalLoad ( String assemblyString , Evidence assemblySecurity , StackCrawlMark & stackMark , Boolean forIntrospection ) +16 System.Reflection.Assembly.Load ( String assemblyString ) +28 MS Visual C++ 2005 Redist ( x64 ) MS Visual C++ 2008 Redist ( x64 ) 9.0.30729.4148MS Visual C++ 2008 Redist ( x64 ) 9.0.30729.6161MS Visual C++ 2008 Redist ( x86 ) 9.0.30729.4148MS Visual C++ 2008 Redist ( x86 ) 9.0.30729.6161MS Visual C++ 2010 x64 Redist - 10.0.40219MS Visual C++ 2013 x64 Redist - 12.0.30501MS Visual C++ 2013 x86 Redist - 12.0.30501"
"using System ; using System.Linq.Expressions ; class Program { static void Main ( ) { Func < decimal , ConsoleColor > converter1 = x = > ( ConsoleColor ) x ; ConsoleColor c1 = converter1 ( 7m ) ; // fine Expression < Func < decimal , ConsoleColor > > expr = x = > ( ConsoleColor ) x ; // System.InvalidOperationException was unhandled // No coercion operator is defined between types // 'System.Decimal ' and 'System.ConsoleColor ' . Func < decimal , ConsoleColor > converter2 = expr.Compile ( ) ; ConsoleColor c2 = converter2 ( 7m ) ; } }"
< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < wsdl : definitions xmlns : soap= '' http : //schemas.xmlsoap.org/wsdl/soap/ '' xmlns : tm= '' http : //microsoft.com/wsdl/mime/textMatching/ '' xmlns : soapenc= '' http : //schemas.xmlsoap.org/soap/encoding/ '' xmlns : mime= '' http : //schemas.xmlsoap.org/wsdl/mime/ '' xmlns : s= '' http : //www.w3.org/2001/XMLSchema '' xmlns : soap12= '' http : //schemas.xmlsoap.org/wsdl/soap12/ '' xmlns : http= '' http : //schemas.xmlsoap.org/wsdl/http/ '' xmlns : wsdl= '' http : //schemas.xmlsoap.org/wsdl/ '' > < wsdl : types > < s : schema elementFormDefault= '' qualified '' > < s : element name= '' Submit '' > < s : complexType > < s : sequence > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' name= '' Incident '' > < s : complexType > < s : sequence > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' form= '' unqualified '' name= '' TransactionId '' type= '' s : string '' / > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' form= '' unqualified '' name= '' TransactionType '' type= '' s : string '' / > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' form= '' unqualified '' name= '' TransactionSubType '' type= '' s : string '' / > < s : element minOccurs= '' 0 '' maxOccurs= '' unbounded '' form= '' unqualified '' name= '' ConfigurationItem '' > < s : complexType > < s : sequence > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' form= '' unqualified '' name= '' AssetTag '' type= '' s : string '' / > < s : element minOccurs= '' 0 '' maxOccurs= '' 1 '' form= '' unqualified '' name= '' Name '' type= '' s : string '' / > ... . svcutil.exe file_name.wsdl class Submit { ... } class Incident { ... } class ConfigurationItem { ... } < Submit > < Incident > < TransactionId > 12345 < /TransactionId > < TransactionType > 12345 < /TransactionType > < TransactionSubType > 12345 < /TransactionSubType > < ConfigurationItem > < AssetTag > xyz < /AssetTag > < Name > name < /Name > < /ConfigurationItem > < /Incident > < /Submit > class SubmitIncident { ... } class SubmitIncidentConfigurationItem { ... } < SubmitIncident > < TransactionId > ... < /TransactionId > < TransactionType > ... < /TransactionType > < TransactionSubType > ... < /TransactionSubType > < SubmitIncidentConfigurationItem > < AssetTag > ... < /AssetTag > < Name > ... < /Name > < /SubmitIncidentConfigurationItem > < /SubmitIncident >
"internal class ExpandableCollectionConverter : ExpandableObjectConverter { public override PropertyDescriptorCollection GetProperties ( ITypeDescriptorContext context , object value , Attribute [ ] attributes ) { //implementation that returns a list of property descriptors , //one for each item in `` value '' } } TypeDescriptor.AddAttributes ( type , new TypeConverterAttribute ( typeof ( ExpandableCollectionConverter ) ) ) ; public static class ExpandableObjectManager { public static void AddTypeDescriptor ( Type tItem ) { //eventually calls TypeDescriptor.AddAttributes } } class Employee { public string Name { get ; set ; } public string Title { get ; set ; } public DateTime DateOfBirth { get ; set ; } } ExpandableObjectManager.AddTypeDescriptor ( typeof ( List < Employee > ) ) ; ExpandableObjectManager.AddTypeDescriptor ( typeof ( List < > ) ) ;"
"using UnityEngine ; using UnityEditor ; using System.Reflection ; public class IconAssignmentPostProcessor : AssetPostprocessor { static void OnPostprocessAllAssets ( string [ ] importedAssets , string [ ] deletedAssets , string [ ] movedAssets , string [ ] movedFromAssetPaths ) { Texture2D icon = AssetDatabase.LoadAssetAtPath < Texture2D > ( `` Assets/Iconfolder/MyFancyIcon.png '' ) ; foreach ( string asset in importedAssets ) { MonoScript script = AssetDatabase.LoadAssetAtPath < MonoScript > ( asset ) ; if ( script ! = null ) { PropertyInfo inspectorModeInfo = typeof ( SerializedObject ) .GetProperty ( `` inspectorMode '' , BindingFlags.NonPublic | BindingFlags.Instance ) ; SerializedObject serializedObject = new SerializedObject ( script ) ; inspectorModeInfo.SetValue ( serializedObject , InspectorMode.Debug , null ) ; SerializedProperty iconProperty = serializedObject.FindProperty ( `` m_Icon '' ) ; iconProperty.objectReferenceValue = icon ; serializedObject.ApplyModifiedProperties ( ) ; serializedObject.Update ( ) ; EditorUtility.SetDirty ( script ) ; } } AssetDatabase.SaveAssets ( ) ; AssetDatabase.Refresh ( ) ; } }"
abstract class Base { } class MyClass : Base { } // ... void Method ( List < Base > list ) { } var derivedList = new List < MyClass > ( ) ; Method ( derivedList ) ;
"using System ; using System.Runtime.InteropServices ; namespace PInvokeTest { class Program { [ DllImport ( `` msvcrt40.dll '' ) ] public static extern int printf ( string format , __arglist ) ; public static void Main ( ) { printf ( `` Hello % s ! \n '' , __arglist ( `` World '' ) ) ; Console.ReadKey ( ) ; } } }"
"public class AcceptMethods { public int Accept ( string s , int k = 1 ) { return 1 ; } public int Accept ( object s ) { return 2 ; } public int Accept ( IEnumerable < object > s ) { return 7 ; } public int Accept ( IList < object > s ) { return 4 ; } } object [ ] list = new object [ ] { `` a '' , new object [ 0 ] , `` c '' , `` d '' } ; Assert.AreEqual ( 7 , list.Select ( ( a ) = > ( ( int ) new AcceptMethods ( ) .Accept ( ( dynamic ) a ) ) ) .Sum ( ) ) ; int sum = 0 ; foreach ( var item in list ) { var method = GetBestMatching ( typeof ( AcceptMethods ) .GetMethods ( ) , item.GetType ( ) ) ; sum += ( int ) method.Invoke ( myObject , new object [ ] { item } ) ; } Assert.AreEqual ( 7 , sum ) ; private MethodBase GetBestMatching ( IEnumerable < MethodInfo > methods , Type [ ] parameters ) { return Type.DefaultBinder.SelectMethod ( BindingFlags.Instance | BindingFlags.Public | BindingFlags.OptionalParamBinding | BindingFlags.InvokeMethod , methods.ToArray ( ) , parameters , null ) ; }"
"using System ; using System.Collections.Concurrent ; using System.IO ; using System.Reflection ; using System.Security.Cryptography ; using System.Text ; public enum MigrationsSource { Target = 1 , Deployed= 2 } public class AssemblyLoader { private readonly ConcurrentDictionary < string , MigrationsSource > m_Sources = new ConcurrentDictionary < string , MigrationsSource > ( ) ; private string m_DeployedPath ; private string m_TargetPath ; public AssemblyLoader ( ) { AppDomain.CurrentDomain.AssemblyResolve += ResolveDependentAssembly ; } ~AssemblyLoader ( ) { AppDomain.CurrentDomain.AssemblyResolve -= ResolveDependentAssembly ; } private Assembly ResolveDependentAssembly ( object sender , ResolveEventArgs args ) { MigrationsSource source ; if ( m_Sources.TryGetValue ( BuildAssemblyId ( args.RequestingAssembly ) , out source ) ) { var assemblyName = new AssemblyName ( args.Name ) ; string targetPath = Path.Combine ( source == MigrationsSource.Deployed ? m_DeployedPath : m_TargetPath , string.Format ( `` { 0 } .dll '' , assemblyName.Name ) ) ; assemblyName.CodeBase = targetPath ; //We have to use LoadFile here , otherwise we wo n't load a differing //version , regardless of the codebase because only LoadFile //will actually load a *new* assembly if it 's at a different path //See : http : //msdn.microsoft.com/en-us/library/b61s44e8 ( v=vs.110 ) .aspx var dependentAssembly = Assembly.LoadFile ( assemblyName.CodeBase ) ; m_Sources.TryAdd ( BuildAssemblyId ( dependentAssembly ) , source ) ; return dependentAssembly ; } return null ; } private string BuildAssemblyId ( Assembly assembly ) { return Convert.ToBase64String ( HashAlgorithm.Create ( `` SHA1 '' ) .ComputeHash ( UTF8Encoding.UTF8.GetBytes ( string.Format ( `` { 0 } | { 1 } '' , assembly.FullName , assembly.Location ) ) ) ) ; } } Unhandled Exception : System.NullReferenceException : Object reference not set to an instance of an object . at EntityFramework.AssemblyLoader.BuildAssemblyId ( Assembly assembly ) in c : \EntityFramework\AssemblyLoader.cs : line 103 at EntityFramework.AssemblyLoader.ResolveDependentAssembly ( Object sender , ResolveEventArgs args ) in c : \EntityFramework\AssemblyLoader.cs : line 42 at System.AppDomain.OnAssemblyResolveEvent ( RuntimeAssembly assembly , String assemblyFullName ) at System.RuntimeTypeHandle.GetTypeByName ( String name , Boolean throwOnError , Boolean ignoreCase , Boolean reflectionOnly , StackCrawlMarkHandle stackMark , IntPtr pPrivHostBinder , Boolean loadTypeFromPartialName , ObjectHandleOnStack type ) at System.RuntimeTypeHandle.GetTypeByName ( String name , Boolean throwOnError , Boolean ignoreCase , Boolean reflectionOnly , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean loadTypeFromPartialName ) at System.RuntimeType.GetType ( String typeName , Boolean throwOnError , Boolean ignoreCase , Boolean reflectionOnly , StackCrawlMark & stackMark ) at System.Type.GetType ( String typeName , Boolean throwOnError ) at System.Data.Entity.Infrastructure.DependencyResolution.ClrTypeAnnotationSerializer.Deserialize ( String name , String value ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.CreateMetadataPropertyFromXmlAttribute ( String xmlNamespaceUri , String attributeName , String value ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.AddOtherContent ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.ParseAttribute ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.Parse ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.Schema.HandleEntityTypeElement ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.Schema.HandleElement ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.ParseElement ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.SchemaElement.Parse ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.Schema.HandleTopLevelSchemaElement ( XmlReader reader ) at System.Data.Entity.Core.SchemaObjectModel.Schema.InternalParse ( XmlReader sourceReader , String sourceLocation ) at System.Data.Entity.Core.SchemaObjectModel.Schema.Parse ( XmlReader sourceReader , String sourceLocation ) at System.Data.Entity.Core.SchemaObjectModel.SchemaManager.ParseAndValidate ( IEnumerable ` 1 xmlReaders , IEnumerable ` 1 sourceFilePaths , SchemaDataModelOption dataModel , AttributeValueNotification providerNotification , AttributeValueNotification providerManifestTokenNotification , ProviderManifestNeeded providerManifestNeeded , IList ` 1 & schemaCollection ) at System.Data.Entity.Core.SchemaObjectModel.SchemaManager.ParseAndValidate ( IEnumerable ` 1 xmlReaders , IEnumerable ` 1 sourceFilePaths , SchemaDataModelOption dataModel , DbProviderManifest providerManifest , IList ` 1 & schemaCollection ) at System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.LoadItems ( IEnumerable ` 1 xmlReaders , IEnumerable ` 1 sourceFilePaths , SchemaDataModelOption dataModelOption , DbProviderManifest providerManifest , ItemCollection itemCollection , Boolean throwOnError ) at System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Init ( IEnumerable ` 1 xmlReaders , IEnumerable ` 1 filePaths , Boolean throwOnError ) at System.Data.Entity.Core.Metadata.Edm.EdmItemCollection..ctor ( IEnumerable ` 1 xmlReaders ) at System.Data.Entity.Utilities.XDocumentExtensions.GetStorageMappingItemCollection ( XDocument model , DbProviderInfo & providerInfo ) at System.Data.Entity.Migrations.Infrastructure.EdmModelDiffer.Diff ( XDocument sourceModel , XDocument targetModel , Lazy ` 1 modificationCommandTreeGenerator , MigrationSqlGenerator migrationSqlGenerator , String sourceModelVersion , String targetModelVersion ) at System.Data.Entity.Migrations.DbMigrator.IsModelOutOfDate ( XDocument model , DbMigration lastMigration ) at System.Data.Entity.Migrations.DbMigrator.Upgrade ( IEnumerable ` 1 pendingMigrations , String targetMigrationId , String lastMigrationId ) at System.Data.Entity.Migrations.DbMigrator.UpdateInternal ( String targetMigration ) at System.Data.Entity.Migrations.DbMigrator. < > c__DisplayClassc. < Update > b__b ( ) at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists ( Action mustSucceedToKeepDatabase ) at System.Data.Entity.Migrations.DbMigrator.Update ( String targetMigration ) at System.Data.Entity.Internal.DatabaseCreator.CreateDatabase ( InternalContext internalContext , Func ` 3 createMigrator , ObjectContext objectContext ) at System.Data.Entity.Internal.InternalContext.CreateDatabase ( ObjectContext objectContext , DatabaseExistenceState existenceState ) at System.Data.Entity.Database.Create ( DatabaseExistenceState existenceState ) at System.Data.Entity.CreateDatabaseIfNotExists ` 1.InitializeDatabase ( TContext context ) at System.Data.Entity.Internal.InternalContext. < > c__DisplayClassf ` 1. < CreateInitializationAction > b__e ( ) at System.Data.Entity.Internal.InternalContext.PerformInitializationAction ( Action action ) at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization ( ) at System.Data.Entity.Internal.LazyInternalContext. < InitializeDatabase > b__4 ( InternalContext c ) at System.Data.Entity.Internal.RetryAction ` 1.PerformAction ( TInput input ) at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction ( Action ` 1 action ) at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase ( ) at EntityFramework.DbDeploymentManager.HandleDatabaseInitialization ( DatabaseEndpoint endpoint ) in c : \EntityFramework\DbDeploymentManager.cs : line 185 at EntityFramework.DbDeploymentManager.Deploy ( ) in c : \EntityFramework\DbDeploymentManager.cs : line 67 at EntityFramework.Deployer.Program.Main ( String [ ] args ) in c : \EntityFramework.Deployer\Program.cs : line 23 [ Table ( `` dbo.tblCustomer '' ) ] public class Customer { public Guid Id { get ; set ; } public string Name { get ; set ; } }"
"public static double f ( double x1 , double x2 = 1 ) { return x1 * x2 ; } .method public hidebysig static float64 f ( float64 x1 , [ opt ] float64 x2 ) cil managed { .param [ 2 ] = float64 ( 1 ) // Method begins at RVA 0x20c6 // Code size 4 ( 0x4 ) .maxstack 8 IL_0000 : ldarg.0 IL_0001 : ldarg.1 IL_0002 : mul IL_0003 : ret } // end of method A : :f"
"public delegate void MyClassEHandler ( MyClassEParam param ) ; public class MyClassE { public static event MyClassEHandler Error { add { MyClassE.Error = ( MyClassEHandler ) Delegate.Combine ( MyClassE.Error , value ) ; } } }"
"public sealed class Child { public Child ( string id , string name , Parent parent ) { Id = id ; Name = name ; Parent = parent ; } public Parent ParentInstance { get ; private set ; } public string Id { get ; private set ; } public string Name { get ; private set ; } } public sealed class Parent { public Parent ( string id , string name , IEnumerable < Child > children ) { Id = id ; Name = name ; Children = children ; } public string Id { get ; private set ; } public string Name { get ; private set ; } public IEnumerable < Child > Children { get ; private set ; } } internal Parent ParseParent ( XElement parentXElement ) { return new Parent ( parentXElement.Attribute ( `` id '' ) .Value , parentXElement.Attribute ( `` name '' ) .Value , parentXElement.Descendants ( `` child '' ) .Select ( ParseChild ) ) ; } public Parent ( string id , string name , IEnumerable < Child > children ) { Id = id ; Name = name ; Children = children.ForEach ( c = > c.ParentInstance = this ) ; }"
"public class A { public static int Foo ; } public class Program { static void Main ( ) { // The following variable will be allocated on the // stack and will directly hold 42 because it is a // value type . int foo = 42 ; // The following field resides on the ( high frequency ) // heap , but is it boxed because of being a value type ? A.Foo = 42 ; } }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication4 { class Program { static void Main ( string [ ] args ) { int a = 1 ; int b = 2 ; Console.WriteLine ( a + b ) ; } } } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication4 { class Program { static void Main ( string [ ] args ) { int a = 1 ; int b = 2 ; int c = 3 ; Console.WriteLine ( a + b + c ) ; } } } .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint // Code size 15 ( 0xf ) .maxstack 2 .locals init ( int32 V_0 , int32 V_1 ) IL_0000 : nop IL_0001 : ldc.i4.1 IL_0002 : stloc.0 IL_0003 : ldc.i4.2 IL_0004 : stloc.1 IL_0005 : ldloc.0 IL_0006 : ldloc.1 IL_0007 : add IL_0008 : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_000d : nop IL_000e : ret } // end of method Program : :Main .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint // Code size 19 ( 0x13 ) .maxstack 2 .locals init ( [ 0 ] int32 a , [ 1 ] int32 b , [ 2 ] int32 c ) IL_0000 : nop IL_0001 : ldc.i4.1 IL_0002 : stloc.0 IL_0003 : ldc.i4.2 IL_0004 : stloc.1 IL_0005 : ldc.i4.3 IL_0006 : stloc.2 IL_0007 : ldloc.0 IL_0008 : ldloc.1 IL_0009 : add IL_000a : ldloc.2 IL_000b : add IL_000c : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_0011 : nop IL_0012 : ret } // end of method Program : :Main"
*.x.y*.y For example : *.xa.ba.cb.dmight create a tree like +-*-.-x |start + -- + | +-b | | +-a-.-+-c | | +-b-.-d
SendKeys.Send ( `` ^V '' ) ;
"new List < String > ( ) { `` a '' , `` b '' , `` c '' , `` d '' } .asParallel ( ) .Select ( str = > str + `` a '' ) .asSequential ( ) .ToList ( ) .ForEach ( str = > Console.Write ( str + `` , `` ) ;"
public class Event { public DateTime ScheduledDate { get ; set ; } public String Name { get ; set ; } public Location Location { get ; set ; } } public class User { public String Name { get ; set ; } public List < Events > AssociatedEvents { get ; set ; } } public class User { public Int32 UserProfileId { get ; set ; } public String Name { get ; set ; } public List < Events > AssociatedEvents { get ; set ; } }
"{ `` _id '' : UUID ( `` 12345678-62d9-4024-86dc-123456789012 '' ) , '' polygon '' : { `` type '' : `` Polygon '' , `` coordinates '' : [ [ [ 18.414846 , -33.9699577 ] , [ 18.414846 , -26.0991189 ] , [ 31.0330578 , -26.0991189 ] , [ 31.0330578 , -33.9699577 ] , [ 18.414846 , -33.9699577 ] ] ] } , '' foo '' : `` bar '' } [ 1 , { `` polygon '' : `` 2dsphere '' } , `` polygon_2dsphere '' , `` data.fooCollection '' , 3 ] db.getCollection ( 'fooCollection ' ) .find ( { `` polygon '' : { $ geoIntersects : { $ geometry : { type : `` LineString '' , coordinates : [ [ 24.7698287 , -28.7353533 ] , [ 28.0423 , -26.19793 ] ] } } } } ) db.getCollection ( 'fooCollection ' ) .find ( { `` polygon '' : { $ geoIntersects : { $ geometry : { type : `` LineString '' , coordinates : [ [ 27.7706902 , -26.1091189 ] , [ 28.0423 , -26.19793 ] ] } } } } ) { `` type '' : '' GeometryCollection '' , '' geometries '' : [ { `` type '' : '' Polygon '' , '' coordinates '' : [ [ [ 18.414846 , -33.9699577 ] , [ 18.414846 , -26.0991189 ] , [ 31.0330578 , -26.0991189 ] , [ 31.0330578 , -33.9699577 ] , [ 18.414846 , -33.9699577 ] ] ] } , { `` type '' : '' LineString '' , '' coordinates '' : [ [ 27.7706902 , -26.1091189 ] , [ 28.0423 , -26.19793 ] ] } , { `` type '' : '' LineString '' , '' coordinates '' : [ [ 24.7698287 , -28.7353533 ] , [ 28.0423 , -26.19793 ] ] } ] }"
"public enum Animals { dog = 0 , cat = 1 , rat = 2 }"
"[ TypeDescriptionProvider ( typeof ( HyperTypeDescriptor.HyperTypeDescriptionProvider ) ) ] public class DataObject < T > : INotifyPropertyChanged , IDataErrorInfo , IEditableObject , IDataObject where T : DataObject < T > , new ( )"
public interface IFooBar { /// < summary > foo < para > bar < /para > < para > baz < /para > < /summary > void Foo ( ) ; /// < summary > foo /// < para > bar < /para > /// < para > baz < /para > /// < /summary > void Bar ( ) ; /// < summary > foo < para / > bar < para / > baz < /summary > void Baz ( ) ; /// < summary > foo < para / > ///bar /// < para / > baz /// < /summary > void Qux ( ) ; }
double [ ] singleRow = new double [ 6000 ] ; int maxI = 800 ; for ( int i=0 ; i < maxI ; i++ ) { singleRow = someObject.producesOutput ( ) ; // ... // do something with singleRow// ... } double [ ] singleRow = new double [ 6000 ] ; int maxI = 800 ; for ( int i=0 ; i < maxI ; i++ ) { singleRow = someObject.producesOutput ( ) ; // ... // do something with singleRow// ... GC.Collect ( ) }
"static class Test { // Static constructor with dependent method : static int x ; static Test ( ) { x = 5 ; } static int Dependent ( ) { return x ; } // Static , independent method : static int Independent ( int y ) { return y+1 ; } }"
"public class Example { //for demonstration purposes - just returns default ( T ) public static T Foo < T > ( ) { return default ( T ) ; } } static object LateFoo ( Type t ) { //creates the delegate and invokes it in one go return ( Func < object > ) Delegate.CreateDelegate ( typeof ( Func < object > ) , typeof ( Example ) .GetMethod ( `` Foo '' , BindingFlags.Public | BindingFlags.Static ) . MakeGenericMethod ( t ) ) ( ) ; } static object LateFoo ( Type t ) { var method = typeof ( Example ) .GetMethod ( `` Foo '' , BindingFlags.Public | BindingFlags.Static ) .MakeGenericMethod ( t ) ; //in practise I cache the delegate , invoking it freshly built or from the cache return Expression.Lambda < Func < IField , object > > ( Expression.Convert ( Expression.Call ( method ) , typeof ( object ) ) ) .Compile ( ) ( ) ; } public static int Foo ( ) { Func < object > f = new Func < object > ( Foo ) ; return 0 ; }"
[ assembly : AssemblyCompany ( `` Microsoft '' ) ] // fail [ assembly : AssemblyCompany ( `` FooBar Inc. '' ) ] // pass
using System ; using System.Diagnostics ; namespace Demo { class Program { static void Main ( string [ ] args ) { Stopwatch sw = new Stopwatch ( ) ; for ( int trial = 0 ; trial < 4 ; ++trial ) { sw.Restart ( ) ; loop1 ( ) ; Console.WriteLine ( `` loop1 ( ) took `` + sw.Elapsed ) ; sw.Restart ( ) ; loop2 ( ) ; Console.WriteLine ( `` loop2 ( ) took `` + sw.Elapsed ) ; sw.Restart ( ) ; loop3 ( ) ; Console.WriteLine ( `` loop3 ( ) took `` + sw.Elapsed ) ; // Console.WriteLine ( ) ; // < -- Uncomment this and the timings change a LOT ! } } static void loop1 ( ) { bool done = false ; for ( int i = 0 ; i < 100000 & & ! done ; ++i ) { for ( int j = 0 ; j < 100000 & & ! done ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { done = true ; break ; } } } } } static void loop2 ( ) { for ( int i = 0 ; i < 100000 ; ++i ) { for ( int j = 0 ; j < 100000 ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { goto exit ; } } } } exit : return ; } static void loop3 ( ) { for ( int i = 0 ; i < 100000 ; ++i ) { for ( int j = 0 ; j < 100000 ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { k = 2 ; j = 100000 ; i = 100000 ; } } } } } } } loop1 ( ) took 00:00:01.7935267loop2 ( ) took 00:00:01.4747297loop3 ( ) took 00:00:05.6677592loop1 ( ) took 00:00:01.7654008loop2 ( ) took 00:00:01.4818888loop3 ( ) took 00:00:05.7656440loop1 ( ) took 00:00:01.7990239loop2 ( ) took 00:00:01.5019258loop3 ( ) took 00:00:05.7979425loop1 ( ) took 00:00:01.8356245loop2 ( ) took 00:00:01.5688070loop3 ( ) took 00:00:05.7238753 loop1 ( ) took 00:00:01.8229538loop2 ( ) took 00:00:07.8174210loop3 ( ) took 00:00:01.4879274loop1 ( ) took 00:00:01.7691919loop2 ( ) took 00:00:07.4781999loop3 ( ) took 00:00:01.4810248loop1 ( ) took 00:00:01.7749845loop2 ( ) took 00:00:07.5304738loop3 ( ) took 00:00:01.4634904loop1 ( ) took 00:00:01.7521282loop2 ( ) took 00:00:07.6325186loop3 ( ) took 00:00:01.4663219 using System ; using System.Diagnostics ; using System.Text ; namespace Demo { class Program { static void Main ( string [ ] args ) { Console.WriteLine ( test ( ) ) ; } static string test ( ) { Stopwatch sw = new Stopwatch ( ) ; int total = 0 ; StringBuilder builder = new StringBuilder ( ) ; for ( int trial = 0 ; trial < 2 ; ++trial ) { sw.Restart ( ) ; total += loop1 ( ) ; builder.AppendLine ( `` loop1 ( ) took `` + sw.Elapsed ) ; sw.Restart ( ) ; total += loop2 ( ) ; builder.AppendLine ( `` loop2 ( ) took `` + sw.Elapsed ) ; sw.Restart ( ) ; total += loop3 ( ) ; builder.AppendLine ( `` loop3 ( ) took `` + sw.Elapsed ) ; //builder.AppendLine ( ) ; // Uncommenting this line makes a big difference ! } builder.AppendLine ( total.ToString ( ) ) ; return builder.ToString ( ) ; } static int loop1 ( ) { bool done = false ; int total = 0 ; for ( int i = 0 ; i < 100000 & & ! done ; ++i ) { for ( int j = 0 ; j < 100000 & & ! done ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { done = true ; break ; } ++total ; } } } return total ; } static int loop2 ( ) { int total = 0 ; for ( int i = 0 ; i < 100000 ; ++i ) { for ( int j = 0 ; j < 100000 ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { goto exit ; } ++total ; } } } exit : return total ; } static int loop3 ( ) { int total = 0 ; for ( int i = 0 ; i < 100000 ; ++i ) { for ( int j = 0 ; j < 100000 ; ++j ) { for ( int k = 0 ; k < 2 ; ++k ) { if ( i == 9900 ) { k = 2 ; j = 100000 ; i = 100000 ; } else { ++total ; } } } } return total ; } } } loop1 ( ) took 00:00:06.6509471loop2 ( ) took 00:00:06.7322771loop3 ( ) took 00:00:01.5361389loop1 ( ) took 00:00:06.5746730loop2 ( ) took 00:00:06.7051531loop3 ( ) took 00:00:01.5027345-1004901888 loop1 ( ) took 00:00:06.9444200loop2 ( ) took 00:00:02.8960563loop3 ( ) took 00:00:01.4759535loop1 ( ) took 00:00:06.9036553loop2 ( ) took 00:00:03.1514154loop3 ( ) took 00:00:01.4764172-1004901888
"for ( long i = 0 ; i < 10000000 ; i++ ) { _value += offset ; } for ( long i = 0 ; i < 10000000 ; i++ ) { Interlocked.Add ( ref _value , offset ) ; } for ( long i = 0 ; i < 10000000 ; i++ ) { lock ( _syncRoot ) { _value += offset ; } }"
"< NavigationView Name= '' nv '' > < NavigationView.MenuItems > < NavigationViewItem Content= '' dsadas '' / > < NavigationViewItem Content= '' dsadas '' / > < NavigationViewItem Content= '' dsadas '' / > < NavigationViewItem Content= '' dsadas '' / > < /NavigationView.MenuItems > < Button Click= '' Button_Click '' Content= '' de select '' / > < /NavigationView > private void Button_Click ( object sender , RoutedEventArgs e ) { nv.SelectedItem = null ; }"
"Parallel.For ( 0 , 10 , i = > DoSomething ( i ) ) ; ... void DoSomething ( int par ) { Console.WriteLine ( $ '' Test : { par } '' ) ; }"
public class ProgressThrottle < T > : Progress < T > { private DateTime _time = DateTime.Now ; public ProgressThrottle ( Action < T > handler ) : base ( handler ) { } protected override void OnReport ( T value ) { if ( DateTime.Now.AddMilliseconds ( 50 ) < _time ) { base.OnReport ( value ) ; _time = DateTime.Now ; } } } public class ProgressThrottle2 < T > : IProgress < T > { private DateTime _time = DateTime.Now ; private readonly IProgress < T > _wrapper ; public ProgressThrottle2 ( IProgress < T > wrapper ) { _wrapper = wrapper ; } public void Report ( T value ) { if ( DateTime.Now.AddMilliseconds ( 50 ) < _time ) { _wrapper.Report ( value ) ; _time = DateTime.Now ; } }
"int [ ] numbers = { 5 , 4 , 1 , 3 , 9 , 8 , 6 , 7 , 2 , 0 } ; var firstSmallNumbers = numbers.TakeWhile ( ( n , index ) = > n > = index ) ; foreach ( var n in firstSmallNumbers ) { Console.WriteLine ( n ) ; }"
"private List < List < string > > Search ( string text , string searchTerm , bool searchEntireWord ) { var result = new List < List < string > > ( ) ; var searchTerms = searchTerm.Split ( ' ' ) ; foreach ( var word in searchTerms ) { var searchResults = ExtractParagraph ( text , word , sizeOfResult , searchEntireWord ) ; result.Add ( searchResults ) ; if ( searchResults.Count > 0 ) { foreach ( var searchResult in searchResults ) { Response.Write ( `` < strong > Result : < /strong > `` + searchResult + `` < br > '' ) ; } } } return result ; } private List < string > ExtractParagraph ( string text , string searchTerm , sizeOfResult , bool searchEntireWord ) { var result = new List < string > ( ) ; searchTerm = searchEntireWord ? @ '' \b '' + searchTerm + @ '' \b '' : searchTerm ; //var expression = @ '' ( ( ^. { 0,30 } |\w* . { 30 } ) \b '' + searchTerm + @ '' \b ( . { 30 } \w*| . { 0,30 } $ ) ) '' ; var expression = @ '' ( ( ^ . { 0 , '' + sizeOfResult + @ '' } |\w* . { `` + sizeOfResult + @ '' } ) '' + searchTerm + @ '' ( . { `` + sizeOfResult + @ '' } \w*| . { 0 , '' + sizeOfResult + @ '' } $ ) ) '' ; var wordMatch = new Regex ( expression , RegexOptions.IgnoreCase | RegexOptions.Singleline ) ; foreach ( Match m in wordMatch.Matches ( text ) ) { result.Add ( m.Value ) ; } return result ; } var text = `` The Dog is a pet animal . It is one of ... '' ; var searchResults = Search ( text , `` dog '' , 10 ) ; if ( searchResults.Count > 0 ) { foreach ( var searchResult in searchResults ) { foreach ( var result in searchResult ) { Response.Write ( `` < strong > Result : < /strong > `` + result + `` < br > '' ) ; } } } var searchResults = Search ( text , `` dog '' , 0 , false ) ; // should include only the matched wordvar searchResults = Search ( text , `` dog '' , 1 , false ) ; // should include the matched word and only one word preceding and following the matched word ( if any ) var searchResults = Search ( text , `` dog '' , 10 , false ) ; // should include the matched word and up to 10 characters ( but not cutting off words in the middle ) preceding and following it ( if any ) var searchResults = Search ( text , `` dog '' , 50 , false ) ; // should include the matched word and up to 50 characters ( but not cutting off words in the middle ) preceding and following it ( if any )"
"// This method is an annoying one but it has to exist at least until we make passing handles between// processes first class . We need this because once the child handle is inherited , the OS considers// the parent and child 's handles to be different . Therefore , if a child closes its handle , our // Read/Write methods wo n't throw because the OS will think that there is still a child handle around// that can still Write/Read to/from the other end of the pipe.//// Ideally , we would want the Process class to close this handle after it has been inherited . See// the pipe spec future features section for more information.// // Right now , this is the best signal to set the anonymous pipe as connected ; if this is called , we// know the client has been passed the handle and so the connection is live . [ System.Security.SecurityCritical ] public void DisposeLocalCopyOfClientHandle ( ) { if ( m_clientHandle ! = null & & ! m_clientHandle.IsClosed ) { m_clientHandle.Dispose ( ) ; } }"
"var formats = CurVoice.VoiceInfo.SupportedAudioFormats ; if ( formats.Count > 0 ) { var format = formats [ 0 ] ; reader.SetOutputToWaveFile ( CurAudioFile , format ) ; } else { var format = // How can I find it , if the audio has n't provided it ? reader.SetOutputToWaveFile ( CurAudioFile , format ) ; }"
"@ foreach ( var item in Model.items ) { < li > @ Html.Partial ( `` ItemView '' , item ) < /li > } @ using ( Html.BeginForm ( ... ) ) { @ Html.HiddenFor ( m= > m.Id ) < label > @ Model.Name ( @ Model.Id ) < /label > < input type= '' submit '' value= '' Delete '' / > } public ActionResult AllItems ( ) { var model = new AllItemsModel ( ) ; return PartialView ( model ) ; } public ActionResult Delete ( DeleteModel model ) { ... . Perform the delete ... return PartialView ( `` AllItems '' , new AllItemsModel ( ) ) ; }"
"int NextPrime ( int from ) { while ( true ) { n++ ; if ( ! Enumerable.Range ( 2 , ( int ) Math.Sqrt ( n ) - 1 ) .Any ( ( i ) = > n % i == 0 ) ) return n ; } } int NextPrimeB ( int from ) { while ( true ) { n++ ; bool hasFactor = false ; for ( int i = 2 ; i < = ( int ) Math.Sqrt ( n ) ; i++ ) { if ( n % i == 0 ) hasFactor = true ; } if ( ! hasFactor ) return n ; } }"
"Exception type : InvalidOperationException Exception message : Collection was modified ; enumeration operation may not execute . at System.Reflection.RuntimeAssembly._nLoad ( AssemblyName fileName , String codeBase , Evidence assemblySecurity , RuntimeAssembly locationHint , StackCrawlMark & stackMark , IntPtr pPrivHostBinder , Boolean throwOnFileNotFound , Boolean forIntrospection , Boolean suppressSecurityChecks ) at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly ( String name , CultureInfo culture , Version version , Boolean throwOnFileNotFound , StackCrawlMark & stackMark ) at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly ( CultureInfo lookForCulture , StackCrawlMark & stackMark ) at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet ( CultureInfo culture , Dictionary ` 2 localResourceSets , Boolean tryParents , Boolean createIfNotExists , StackCrawlMark & stackMark ) at System.Resources.ResourceManager.InternalGetResourceSet ( CultureInfo requestedCulture , Boolean createIfNotExists , Boolean tryParents , StackCrawlMark & stackMark ) at System.Resources.ResourceManager.InternalGetResourceSet ( CultureInfo culture , Boolean createIfNotExists , Boolean tryParents ) at System.Resources.ResourceManager.GetString ( String name , CultureInfo culture ) public IList < Function > MapWithLanguage ( IList < Function > list ) { if ( list == null ) { return null ; } var currentResource = Type.GetType ( `` Fanex.Athena.Models.ViewModel.Menu , Fanex.Athena.Models '' ) ; ResourceManager rm = new ResourceManager ( currentResource ) ; var newList = new List < Function > ( ) ; foreach ( var func in list ) { newList.Add ( new Function { Name = rm.GetString ( `` Menu_ '' + func.FunctionId ) , } ) ; } return newList ; }"
"var bytes = new byte [ ] { 0x80 , 0x14 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x02 , 0x00 , 0x00 , 0x3B , 0x8F , 0x80 , 0x01 , 0x80 , 0x4F , 0x0C , 0xA0 , 0x00 , 0x00 , 0x03 , 0x06 , 0x03 , 0x00 , 0x03 , 0x00 , 0x00 , 0x00 , 0x00 , 0x68 } ; var result1 = GetStruct < RdrToPcDataBlock1 > ( bytes ) ; var result2 = GetStruct < RdrToPcDataBlock2 > ( bytes ) ; [ StructLayout ( LayoutKind.Sequential ) ] public struct RdrToPcDataBlock1 { public byte MessageType ; public int DwLength ; public byte Slot ; public byte Seq ; public byte Status ; public byte Error ; public byte ChainParameter ; [ MarshalAs ( UnmanagedType.ByValArray ) ] public byte [ ] Data ; } [ StructLayout ( LayoutKind.Explicit ) ] public struct RdrToPcDataBlock2 { [ FieldOffset ( 0 ) ] public byte MessageType ; [ FieldOffset ( 1 ) ] public int DwLength ; [ FieldOffset ( 5 ) ] public byte Slot ; [ FieldOffset ( 6 ) ] public byte Seq ; [ FieldOffset ( 7 ) ] public byte Status ; [ FieldOffset ( 8 ) ] public byte Error ; [ FieldOffset ( 9 ) ] public byte ChainParameter ; [ FieldOffset ( 10 ) ] public byte Data ; } public T GetStruct < T > ( byte [ ] bytes ) { try { var handle = GCHandle.Alloc ( bytes , GCHandleType.Pinned ) ; var item = ( T ) Marshal.PtrToStructure ( handle.AddrOfPinnedObject ( ) , typeof ( T ) ) ; handle.Free ( ) ; return item ; } catch { return default ( T ) ; } }"
"var input = new int [ ] { 1,2,3 } // does not compile but did not want to include extra classes.var output = { ( 1,1 ) , ( 2,3 ) , ( 3,6 ) } ;"
server { listen 80 default_server ; listen [ : : ] :80 default_server ; root /var/www/html ; # Add index.php to the list if you are using PHP index index.html index.htm ; root /var/www/html ; server_name _ ; # Front-end : Node.js location / { proxy_pass http : //localhost:3000 ; proxy_http_version 1.1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection 'upgrade ' ; proxy_set_header Host $ host ; proxy_cache_bypass $ http_upgrade ; } # Back-end : C # ASP.NET Core 2.1 location /api/ { proxy_pass http : //localhost:5000 ; proxy_http_version 1.1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection keep-alive ; proxy_cache_bypass $ http_upgrade ; proxy_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $ scheme ; } }
"public static string BruteForceHash ( string hash ) { var results = from c0 in Enumerable.Range ( 0 , 36 ) from c1 in Enumerable.Range ( 0 , 36 ) from c2 in Enumerable.Range ( 0 , 36 ) from c3 in Enumerable.Range ( 0 , 36 ) from c4 in Enumerable.Range ( 0 , 36 ) from c5 in Enumerable.Range ( 0 , 36 ) select new string ( new [ ] { Characters [ c0 ] , Characters [ c1 ] , Characters [ c2 ] , Characters [ c3 ] , Characters [ c4 ] , Characters [ c5 ] , } ) ; string found = null ; Parallel.ForEach ( results , ( result , loopstate , a ) = > { string hashed = SHA1 ( result , Encoding.Default ) ; if ( hashed == hash ) { found = result ; loopstate.Break ( ) ; } } ) ; if ( found ! = null ) { return found ; } return `` Not found . `` ; }"
[ Subject ( typeof ( ITMFileParser ) ) ] public class When_parsing_from_index_59_to_79 { private const string Line = `` ... ... ... '' ; private static ITMFileParser _parser ; private static ITMData _data ; private Establish context = ( ) = > { _parser = new ITMFileParser ( ) ; } ; private Because of = ( ) = > { _data = _parser.Parse ( Line ) ; } ; private It should_get_fldName = ( ) = > _data.FldName.ShouldBeEqualIgnoringCase ( `` HUMMELDUMM '' ) ; } [ Subject ( typeof ( ITMFileParser ) ) ] public class When_parsing_single_line_from_ITM_file { const string Line = `` '' static ITMFileParser _parser ; static ITMData _data ; Establish context = ( ) = > { _parser = new ITMFileParser ( ) ; } ; private Because of = ( ) = > { _data = _parser.Parse ( Line ) ; } ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; It should_get_fld ? ? ? = ( ) = > _data.Fld ? ? ? .ShouldEqual ( ? ? ? ) ; ... }
"private void eventLog_Application_EntryWritten ( object sender , EntryWrittenEventArgs e ) { // Process e.Entry }"
< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < d > < summary > Demo summary < /summary > < /d > /// < include file= '' docs.xml '' path= '' d/* '' / > `` ' < include file= '' docs.xml '' path= '' d/* '' / >
"/// < summary > /// v1.0 Controller/// < /summary > public class Sample1Controller : ApiController { [ FullVersionedRoute ( `` api/test '' , `` 1.0 '' ) ] public IEnumerable < string > Get ( ) { return new [ ] { `` This is version 1.0 test ! '' } ; } } /// < summary > /// v2.0 Controller/// < /summary > public class Sample2Controller : ApiController { [ FullVersionedRoute ( `` api/test '' , `` 2.0 '' ) ] public IEnumerable < string > Get ( ) { return new [ ] { `` This is version 2.0 test ! '' } ; } } using System.Collections.Generic ; using System.Web.Http.Routing ; namespace HelperClasses.Versioning { /// < summary > /// Provides an attribute route that 's restricted to a specific version of the api . /// < /summary > internal class FullVersionedRoute : RouteFactoryAttribute { public FullVersionedRoute ( string template , string allowedVersion ) : base ( template ) { AllowedVersion = allowedVersion ; } public string AllowedVersion { get ; private set ; } public override IDictionary < string , object > Constraints { get { var constraints = new HttpRouteValueDictionary ( ) ; constraints.Add ( `` version '' , new FullVersionConstraint ( AllowedVersion ) ) ; return constraints ; } } } } using System.Collections.Generic ; using System.Linq ; using System.Net.Http ; using System.Web.Http.Routing ; namespace HelperClasses.Versioning { /// < summary > /// A Constraint implementation that matches an HTTP header against an expected version value . /// < /summary > internal class FullVersionConstraint : IHttpRouteConstraint { public const string VersionHeaderName = `` api-version '' ; private const string DefaultVersion = `` 1.0 '' ; public FullVersionConstraint ( string allowedVersion ) { AllowedVersion = allowedVersion ; } public string AllowedVersion { get ; private set ; } public bool Match ( HttpRequestMessage request , IHttpRoute route , string parameterName , IDictionary < string , object > values , HttpRouteDirection routeDirection ) { if ( routeDirection == HttpRouteDirection.UriResolution ) { var version = GetVersionHeader ( request ) ? ? DefaultVersion ; return ( version == AllowedVersion ) ; } return false ; } private string GetVersionHeader ( HttpRequestMessage request ) { IEnumerable < string > headerValues ; if ( request.Headers.TryGetValues ( VersionHeaderName , out headerValues ) ) { // enumerate the list once IEnumerable < string > headers = headerValues.ToList ( ) ; // if we find once instance of the target header variable , return it if ( headers.Count ( ) == 1 ) { return headers.First ( ) ; } } return null ; } } }"
"private int sharedState = 0 ; private void FirstThread ( ) { Volatile.Write ( ref sharedState , 1 ) ; } private void SecondThread ( ) { int sharedStateSnapshot = Volatile.Read ( ref sharedState ) ; Console.WriteLine ( sharedStateSnapshot ) ; }"
public object SomeProperty { get ; set ; } public object SomeProperty { get { throw new NotImplementedException ( ) ; } set { throw new NotImplementedException ( ) ; } }
var transaction = connection.BeginTransaction ( ) ; //some crud operation here transaction.Commit ( ) var transaction = connection.BeginTransaction ( ) ; try { //some crud operation here transaction.Commit } catch ( Exception ex ) { transaction.Rollback ( ) ; }
class Program { static void Main ( string [ ] args ) { Child childInstance = Child.ParseFromA ( @ '' path/to/Afile '' ) as Child ; } } class Parent { int property ; public static Parent ParseFromA ( string filename ) { Parent parent = new Parent ( ) ; // parse file and set property here ... return parent ; } } class Child : Parent { public void SomeAdditionalFunction ( ) { } }
"private void IOSNotificationManager ( ) { // determine whether user has already allowed or disallowed notifications -- wo n't run again if user has already made decision StartCoroutine ( RequestAuthorization ( ) ) ; // Schedule daily notification for user based on time of play // iOS uses local time , while Android uses UTC DateTime userTime = DateTime.Now ; // Set a reminder for this specific day of the week ( 0 = Sunday , 6 = Saturday ) . // Note that this will overwrite any previous time set for this day . GameData.PushNotificationTimes [ ( int ) userTime.DayOfWeek ] = userTime ; // Schedule the week of push notifications for days that have n't already been scheduled for ( var i = 0 ; i < 7 ; i++ ) { if ( GameData.PushNotificationTimes [ i ] == null ) { // get the number of days after which the notification should occur int daysToNotification = ( i - ( int ) userTime.DayOfWeek + 7 ) % 7 ; DateTime nextDay = userTime.AddDays ( daysToNotification ) ; GameData.PushNotificationTimes [ i ] = nextDay ; } Debug.Log ( `` The push notification time scheduled for day `` + i + `` is `` + GameData.PushNotificationTimes [ i ] ) ; } for ( var i = 0 ; i < 7 ; i++ ) { DateTime pushNotificationTime = GameData.PushNotificationTimes [ i ] ; var calendarTrigger = new iOSNotificationCalendarTrigger ( ) { Day = pushNotificationTime.Day , Hour = pushNotificationTime.Hour , Minute = pushNotificationTime.Minute , // Indicate whether the notification is repeated every defined time period . // For instance if hour and minute fields are set the notification will be triggered every day at the specified hour and minute . Repeats = true } ; } }"
"var createPurchaseOrder = new PurchaseOrder ( ) ; createPurchaseOrder.entity = new RecordRef ( ) { internalId = “ 653 ” //type = RecordType.purchaseOrder , //typeSpecified = true } ; RecordRef soRecordRef = new RecordRef ( ) ; soRecordRef.internalId = “ XXXXXXXX ” ; soRecordRef.type = RecordType.salesOrder ; soRecordRef.typeSpecified = true ; createPurchaseOrder.createdFrom = soRecordRef ; RecordRef depRecordRef = new RecordRef ( ) ; depRecordRef.internalId = “ 3 ” ; depRecordRef.name = “ eBay : eBay FNC ” ; depRecordRef.type = RecordType.department ; depRecordRef.typeSpecified = true ; createPurchaseOrder.department = depRecordRef ; PurchaseOrderItem [ ] Items = new PurchaseOrderItem [ 1 ] ; Items [ 0 ] = new PurchaseOrderItem ( ) ; RecordRef item = new RecordRef ( ) ; item.type = RecordType.nonInventoryPurchaseItem ; item.typeSpecified = true ; item.internalId = “ XXXXX ” ; Items [ 0 ] .item = item ; Items [ 0 ] .rate = “ 5 ” ; Items [ 0 ] .quantity = 1 ; Items [ 0 ] .quantitySpecified = true ; PurchaseOrderItemList purchaseOrderItemList = new PurchaseOrderItemList ( ) ; purchaseOrderItemList.item = Items ; createPurchaseOrder.itemList = purchaseOrderItemList ; WriteResponse response = Service.add ( createPurchaseOrder ) ; var updateSalesOrder = new SalesOrder ( ) ; updateSalesOrder.internalId = “ XXXXXXXX ” ; SalesOrderItem [ ] soItems = new SalesOrderItem [ 1 ] ; var soItem = new SalesOrderItem ( ) ; RecordRef roItem = new RecordRef ( ) ; roItem.type = RecordType.inventoryItem ; roItem.typeSpecified = true ; roItem.internalId = “ XXXXX ” ; soItem.item = roItem ; RecordRef prLevel = new RecordRef ( ) ; prLevel.type = RecordType.priceLevel ; prLevel.internalId = “ -1 ” ; prLevel.typeSpecified = true ; soItem.price = prLevel ; soItem.rate = “ 15 ” ; soItem.quantity = 1 ; soItem.quantitySpecified = true ; RecordRef poItem = new RecordRef ( ) ; poItem.type = RecordType.purchaseOrder ; poItem.typeSpecified = true ; poItem.internalId = purchaseOrder.internalId ; soItem.createdPo = poItem ; soItems [ 0 ] = soItem ; SalesOrderItemList salesOrderItemList = new SalesOrderItemList ( ) ; salesOrderItemList.item = soItems ; updateSalesOrder.itemList = salesOrderItemList ; response = Service.update ( updateSalesOrder ) ; if ( response.status.isSuccess ! = true ) throw new Exception ( response.status.statusDetail [ 0 ] .message ) ; 3.2 **createdFrom** field is displaying as below when we create purchase order through netsuite ."
2014-04-24T00:00:00 DateTime d = DateTime.Parse ( strValue ) ;
byte [ ] b = new byte [ 55000 ] ; for ( int i = 0 ; i < b.Length ; i++ ) { Console.WriteLine ( ConvertToString ( b [ i ] ) ) ; }
"public void readSms ( ) { try { comm = AppData.getInstance ( ) .getComm ( ) ; DecodedShortMessage [ ] messages = comm.ReadMessages ( PhoneMessageStatus.All , `` SM '' ) ; foreach ( DecodedShortMessage message in messages ) { if ( AppData.getInstance ( ) .mensagens.Count ! = 0 ) { Message msg = new Message ( AppData.getInstance ( ) .messages.Last.Value.getId ( ) + 1 , ( ( SmsDeliverPdu ) ( message.Data ) ) .OriginatingAddress , message.Data.UserDataText , ( ( SmsDeliverPdu ) ( message.Data ) ) .SCTimestamp.ToDateTime ( ) , false ) ; AppData.getInstance ( ) .setMensagem ( msg ) ; } else { Message msg = new Message ( 0 , ( ( SmsDeliverPdu ( message.Data ) ) .OriginatingAddress , message.Data.UserDataText , ( ( SmsDeliverPdu ) ( message.Data ) ) .SCTimestamp.ToDateTime ( ) , false ) ; AppData.getInstance ( ) .setMensagem ( msg ) ; } } // I need to put the event of sorting here in case any message was been added } catch ( Exception ex ) { MessageBox.Show ( ex.Message ) ; } } public void preencherTabela ( int lastIndex ) { LinkedList < Message > messages = AppData.getInstance ( ) .getMessagessList ( ) ; { addTable ( messages.ElementAt ( i ) .getId ( ) , messages.ElementAt ( i ) .getChecked ( ) , messages.ElementAt ( i ) .getMsg ( ) , messages.ElementAt ( i ) .getNum ( ) , messages.ElementAt ( i ) .getDate ( ) ) ; } } private void addTable ( int p , bool p_2 , string p_3 , string p_4 , DateTime dateTime ) { this.dataGridView1.Invoke ( new MethodInvoker ( ( ) = > { this.dataGridView1.Rows.Add ( p , p_2 , p_3 , p_4 , dateTime ) ; } ) ) ; }"
"# region Delete_Illegal_Items public static void RemoveIllegalItems ( ) { Console.Clear ( ) ; DirectoryInfo Libraries = new DirectoryInfo ( Library.DestinationMain ) ; try { foreach ( var Lib in Libraries.GetDirectories ( ) ) { Console.WriteLine ( `` Working On { 0 } . `` , Lib.Name ) ; Parallel.Invoke ( ( ) = > { RemoveBadFiles ( Lib ) ; } , ( ) = > { DeleteEmptyFolders ( Lib ) ; } ) ; } } catch ( AggregateException e ) { Console.WriteLine ( `` There Was An Unusual Error During Initialization Of Library Correction : \n { 0 } '' , e.InnerException.ToString ( ) ) ; } } private static string [ ] BadFiles = { @ '' .hta '' , @ '' .exe '' , @ '' .lnk '' , @ '' .tmp '' , @ '' .config '' , @ '' .ashx '' , @ '' .hta . `` , @ '' .hta : : $ DATA '' , @ '' .zip '' , @ '' .asmx '' , @ '' .json '' , @ '' .soap '' , @ '' .svc '' , @ '' .xamlx '' , @ '' .msi '' , @ '' .ops '' , @ '' .pif '' , @ '' .shtm '' , @ '' .shtml '' , @ '' smt '' , @ '' .vb '' , @ '' .vbe '' , @ '' .vbs '' , @ '' .ds_store '' , @ '' .db '' , @ '' .ini '' , @ '' .tiff '' } ; private static void RemoveBadFiles ( DirectoryInfo directory ) { DirectoryInfo [ ] dirs = null ; FileInfo [ ] files = null ; if ( directory ! = null ) { files = directory.GetFiles ( ) ; } try { dirs = directory.GetDirectories ( ) ; } catch ( IOException ) { } catch ( Exception e ) { Console.WriteLine ( `` \nError During Enumeration Of Items To Delete : \n { 0 } '' , e.Message ) ; } if ( files ! = null ) { foreach ( var file in files ) { try { if ( file.IsReadOnly ) { file.IsReadOnly = false ; } if ( BadFiles.Contains ( Path.GetExtension ( file.FullName ) ) ) { File.Delete ( file.FullName ) ; } } catch ( Exception e ) { Console.WriteLine ( `` \nError During Removal Or Illegal Files : \n '' + e.Message ) ; } } } if ( dirs ! = null ) { foreach ( var dir in dirs ) { switch ( dir.Name ) { case `` .TemporaryItems '' : { try { Directory.Delete ( dir.FullName ) ; } catch { } break ; } case `` AI_RecycleBin '' : { try { Directory.Delete ( dir.FullName ) ; } catch { } break ; } case `` .ToRemove '' : { try { Directory.Delete ( dir.FullName ) ; } catch { } break ; } default : { break ; } } RemoveBadFiles ( dir ) ; } } } private static void DeleteEmptyFolders ( DirectoryInfo directory ) { Program Main = new Program ( ) ; try { DirectoryInfo [ ] dirs = directory.GetDirectories ( ) ; foreach ( var subDirectory in dirs ) { int sum = Library.CountLibrary ( subDirectory.FullName ) ; if ( sum == 0 ) { Directory.Delete ( subDirectory.FullName ) ; } DeleteEmptyFolders ( subDirectory ) ; } } catch { } } # endregion"
"//// Authenticate against CardOS card//var card = new Card ( _scsh3.reader ) ; var crypto = new Crypto ( ) ; var key = new Key ( ) ; key.setComponent ( Key.DES , new ByteString ( `` 01010101010101010101010101010101 '' , HEX ) ) ; // Get challengevar challenge = card.sendApdu ( 0x00 , 0x84 , 0x00 , 0x00 , 8 , [ 0x9000 ] ) ; // Crypto.DES_MAC_EMV is a CBC generated Retail-MACvar cipher = crypto.sign ( key , Crypto.DES_MAC_EMV , challenge ) ; card.sendApdu ( 0x00 , 0x82 , 0x00 , 0x81 , cipher ) ; print ( `` Card returns `` + card.SW.toString ( 16 ) + `` - `` + card.SWMSG ) ;"
"public class Recipe { // [ Required ] public string Name { get ; set ; } [ MaxLength ( 1 ) ] public string difficulty = `` a_string_that_is_too_long '' ; } public static void Main ( string [ ] args ) { var recipe = new Recipe ( ) ; var context = new ValidationContext ( recipe , serviceProvider : null , items : null ) ; var results = new List < ValidationResult > ( ) ; var isValid = Validator.TryValidateObject ( recipe , context , results ) ; if ( ! isValid ) { foreach ( var validationResult in results ) { Console.WriteLine ( validationResult.ErrorMessage ) ; } } else { Console.WriteLine ( `` is valid '' ) ; } }"
"this.Map ( x = > x.Discount ) .Precision ( 8 ) .Scale ( 2 ) .Not.Nullable ( ) ; public virtual Decimal Discount { get ; set ; } Discount NUMERIC ( 19 , 0 ) not null ,"
public void Test_PerformanceUnit ( ) { Stopwatch sw = new Stopwatch ( ) ; sw.Start ( ) ; Random r = new Random ( ) ; for ( int i = 0 ; i < 10000 ; i++ ) { testRand ( r ) ; } sw.Stop ( ) ; Console.WriteLine ( sw.ElapsedTicks ) ; } public object testRand ( Random r ) { if ( r.Next ( 1 ) > 10 ) { lock ( this ) { return null ; } } return r ; }
public static Random random = new Random ( ) ; for ( int x = 0 ; x < 75 ; x++ ) { if ( main.random.Next ( 11 ) == 1 ) { tiles [ heightMap [ x ] - 1 ] [ x ] = 4 ; tiles [ heightMap [ x ] - 2 ] [ x ] = 4 ; tiles [ heightMap [ x ] - 3 ] [ x ] = 4 ; tiles [ heightMap [ x ] - 4 ] [ x ] = 4 ; tiles [ heightMap [ x ] - 5 ] [ x ] = 4 ; tiles [ heightMap [ x ] - 5 ] [ x - 1 ] = 5 ; tiles [ heightMap [ x ] - 6 ] [ x - 1 ] = 5 ; tiles [ heightMap [ x ] - 6 ] [ x ] = 5 ; tiles [ heightMap [ x ] - 5 ] [ x + 1 ] = 5 ; tiles [ heightMap [ x ] - 6 ] [ x + 1 ] = 5 ; } }
from outerInterfaces in interfacesfrom i in outerInterfaces.GetInterfaces ( ) from m in i.GetMethods ( ) select m
"SELECT GeometryType ( GeomFromText ( AsWKT ( object ) ) ) as ` type ` FROM geo.data ; //var polygon = ( byte [ ] ) reader [ `` object '' ] ; //var obj = new MySqlGeometry ( MySqlDbType.Blob , polygon ) ; var polygon = reader [ `` object '' ] .ToString ( ) ; var obj = MySqlGeometry.Parse ( polygon ) ; SELECT AsWKB ( object ) as 'object ' FROM geo.data var polygon = ( byte [ ] ) reader [ `` object '' ] ; var obj = new MySqlGeometry ( MySqlDbType.Blob , polygon ) ; SELECT GeometryType ( GeomFromText ( AsWKT ( object ) ) ) as ` type ` , AsWKT ( object ) as ` data ` FROM geo.data var polygon = reader [ `` object '' ] .ToString ( ) ; var obj = MySqlGeometry.Parse ( polygon ) ; SELECT AsWKT ( object ) as 'object ' FROM geo.data System.FormatException : String does not contain a valid geometry value"
Secrect string : `` THIS IS A SECRET STRING WHICH CAN BE SHARED BETWEEN THE SERVICES '' Unit test signature : `` B0d57pcHoDiTDE/98dyrMx9HoFKGLOcM094eYBgJqHo= '' JWT.IO signature : B0d57pcHoDiTDE_98dyrMx9HoFKGLOcM094eYBgJqHo
"Process app = new Process ( ) ; app.StartInfo.UseShellExecute = false ; app.StartInfo.FileName = path ; app.StartInfo.Domain = `` Domain '' ; app.StartInfo.UserName = `` userName '' ; string password = `` Password '' ; System.Security.SecureString ssPwd = new System.Security.SecureString ( ) ; for ( int x = 0 ; x < password.Length ; x++ ) { ssPwd.AppendChar ( password [ x ] ) ; } password = `` '' ; app.StartInfo.Password = ssPwd ; app.Start ( ) ; private bool IsRunning ( string name ) { Process [ ] processlist = Process.GetProcesses ( ) ; if ( Process.GetProcessesByName ( name ) .Length > 0 ) { string user = Process.GetProcessesByName ( name ) [ 0 ] .StartInfo.UserName ; log.Debug ( `` Process `` + name + `` is running by : `` + user ) ; return true ; } else { return false ; } } public string GetProcessOwner ( int processId ) { string query = `` SELECT * FROM Win32_Process WHERE ProcessID = `` + processId ; ManagementObjectSearcher searcher = new ManagementObjectSearcher ( query ) ; ManagementObjectCollection processList = searcher.Get ( ) ; foreach ( ManagementObject obj in processList ) { string [ ] argList = new string [ ] { string.Empty , string.Empty } ; int returnVal = Convert.ToInt32 ( obj.InvokeMethod ( `` GetOwner '' , argList ) ) ; if ( returnVal == 0 ) { // return DOMAIN\user return argList [ 1 ] + `` \\ '' + argList [ 0 ] ; } } return `` NO OWNER '' ; }"
for ( int i = 1 ; i < = MaxCollectionSize ; i++ ) { // Reset time measurement TestContainer.ResetSnapshot ( ) ; // Enable time measurement TestContainer.BeginSnapshot ( ) ; // Execute one add operation on 1000 lists each ProfileAction.Invoke ( TestContainer ) ; TestContainer.EndSnapShot ( ) ; double elapsedMilliseconds = ( TestContainer.GetElapsedMilliSeconds ( ) / ( double ) Stopwatch.Frequency ) * 1000 ; // ... }
"public sealed class TrackingFileSystemWatcher : FileSystemWatcher { private static readonly object fileWatcherDictionaryLock = new object ( ) ; private static readonly object runningTaskDictionaryLock = new object ( ) ; private readonly Dictionary < int , Task > runningTaskDictionary = new Dictionary < int , Task > ( 15 ) ; private readonly Dictionary < string , FileSystemWatcherProperties > fileWatcherDictionary = new Dictionary < string , FileSystemWatcherProperties > ( ) ; // Wired up elsewhere private void OnChanged ( object sender , FileSystemEventArgs eventArgs ) { this.ProcessModifiedDatafeed ( eventArgs ) ; } private void ProcessModifiedDatafeed ( FileSystemEventArgs eventArgs ) { lock ( TrackingFileSystemWatcher.fileWatcherDictionaryLock ) { // Read the file and generate hash here // Properties if the file has been processed before // ContainsNonNullKey is an extension method if ( this.fileWatcherDictionary.ContainsNonNullKey ( eventArgs.FullPath ) ) { try { fileProperties = this.fileWatcherDictionary [ eventArgs.FullPath ] ; } catch ( KeyNotFoundException keyNotFoundException ) { } catch ( ArgumentNullException argumentNullException ) { } } else { // Create a new properties object } fileProperties.ChangeType = eventArgs.ChangeType ; fileProperties.FileContentsHash = md5Hash ; fileProperties.LastEventTimestamp = DateTime.Now ; Task task ; try { task = new Task ( ( ) = > new DatafeedUploadHandler ( ) .UploadDatafeed ( this.legalOrg , datafeedFileData ) , TaskCreationOptions.LongRunning ) ; } catch { .. } // Only lock long enough to add the task to the dictionary lock ( TrackingFileSystemWatcher.runningTaskDictionaryLock ) { try { this.runningTaskDictionary.Add ( task.Id , task ) ; } catch { .. } } try { task.ContinueWith ( t = > { try { lock ( TrackingFileSystemWatcher.runningTaskDictionaryLock ) { this.runningTaskDictionary.Remove ( t.Id ) ; } // Will this lock burn me ? lock ( TrackingFileSystemWatcher.fileWatcherDictionaryLock ) { // Persist the file watcher properties to // disk for recovery at OnStart ( ) } } catch { .. } } ) ; task.Start ( ) ; } catch { .. } } } }"
var aa = a ( ) ; b ( aa ) ; > > new Baz.Boo ( ) .Foo ( aa ) new Boo ( ) ; // dummy to ensure loadingvar aa = a ( ) ; b ( aa ) ;
"{ `` name '' : `` AuthenticationRequest '' , `` username '' : `` root '' , `` password '' : `` password '' , `` etc '' : `` etc '' } { `` name '' : `` AuthFailed '' , `` args '' : [ { `` reason '' : `` Reason text '' } ] }"
( string s ) = > s.Length - > Parameters [ 0 ] Lambda -- -- -- -- -Parameter ( string s ) \ / \- > Body /- > Expression \ / Member ( Length )
private string GetMemberName ( Expression < Func < object > > expression ) { //gets the property name ( MemberExpression or UnaryExpression ) //out of scope return propertyName ; } derived.GetMemberName ( ( ) = > derived.MyPropertyInt ) ; derived.GetMemberName ( ( ) = > derived.MyPropertyStr ) ; derived.GetMemberName ( ( ) = > `` something '' ) ; //does not `` return '' anything but compiles ( out of scope ) derived.GetMemberName ( ( ) = > anotherClass.RandomMember ) ; //not derived from `` base ''
public class MyTest { public const string HI = `` Hello '' ; public void TestMethod ( ) { string filler ; filler = this.HI ; //Wo n't work . filler = HI //Works . } }
IEnumerable < DTODataType > dts = ( from langDT in langDTs join langIAVDT in langInstructionsAVDTs on langDT.DataTypeKey equals langIAVDT.DataTypeKey where langIAVDT.InstructionAVKey == av.InstructionAVKey select langDT ) .Distinct ( ) ; var sql = ( ( System.Data.Objects.ObjectQuery ) dts ) .ToTraceString ( ) ; List < DTOInstructionActiveValueDataType > langInstructionsAVDTs = CurrentLPInstructionManager.GetInstructionsActiveValuesDataTypes ( ( from avKey in langInstructionsAVs select avKey.InstructionAVKey ) .Distinct ( ) .ToArray ( ) ) ; List < DTODataType > langDTs = _LPDataTypeManager.GetDataTypes ( ( from dt in langInstructionsAVDTs orderby dt.DataTypeKey select dt.DataTypeKey ) .Distinct ( ) .ToArray ( ) ) ; public global : :System.Data.Objects.ObjectQuery < instructions > instructions
"public override IMatrix operator + ( IMAtrix lhsMatrix , IMatrix rhsMatrix ) { ... }"
"@ model List < ItemViewModel > @ for ( int i = 0 ; i < Model.Count ; i++ ) { @ Html.EditorFor ( m = > m [ i ] .Foo ) @ Html.EditorFor ( m = > m [ i ] .Bar ) } @ model WrappingViewModel @ Html.EditorFor ( m = > m.Items ) @ Html.EditorFor ( m = > m.Items [ i ] .Foo ) public class WrappingViewModel { [ UIHint ( `` _ItemView '' ) ] public List < ItemViewModel > Items { get ; set ; } public WrappingViewModel ( ) { Items = new List < ItemViewModel > ( ) ; } } public class ItemViewModel { public string Foo { get ; set ; } public string Bar { get ; set ; } } public ActionResult Index ( ) { var model = new WrappingViewModel ( ) ; model.Items.Add ( new ItemViewModel { Foo = `` Foo1 '' , Bar = `` Bar1 '' } ) ; model.Items.Add ( new ItemViewModel { Foo = `` Foo2 '' , Bar = `` Bar2 '' } ) ; return View ( model ) ; } @ model WrappingViewModel @ using ( Html.BeginForm ( ) ) { @ Html.EditorFor ( m = > m.Items ) < input type= '' submit '' value= '' Submit '' / > } @ model List < ItemViewModel > @ for ( int i = 0 ; i < Model.Count ; i++ ) { @ Html.EditorFor ( m = > m [ i ] .Foo ) @ Html.EditorFor ( m = > m [ i ] .Bar ) }"
throw new InvalidOperationException ( `` I 'm not configured correctly ! `` ) ; throw new ArgumentNullException ( `` You passed a null ! `` ) ; throw new StupidUserException ( `` You ca n't divide by 0 ! What the hell were you THINKING ? ? ? DUMMY ! ! ! ! ! `` ) ;
"using System ; using System.Web ; using System.Web.Profile ; namespace proj_app.utils { public class ProfileCommon : System.Web.Profile.ProfileBase { public virtual string Name { get { return ( ( string ) ( this.GetPropertyValue ( `` Name '' ) ) ) ; } set { this.SetPropertyValue ( `` Name '' , value ) ; } } public static ProfileCommon GetProfile ( string username ) { return ( ( ProfileCommon ) ( ProfileBase.Create ( username ) ) ) ; } } } The object of the ProfileCommon type can not be casted to proj_app.utils.ProfileCommon.Description : ... unhandled exception during the web request ... Details about the exception : The object of the ProfileCommon type can not be casted to proj_app.utils.ProfileCommon.Zdrojová chyba : Line 36 : public static ProfileCommon GetProfile ( string username ) Line 37 : { Line 38 : return ( ( ProfileCommon ) ( ProfileBase.Create ( username ) ) ) ; Line 39 : } Line 40 : } Source file : d : \__RizeniProjektu\aplikace\proj_app\utils\ProfileCommon.cs Line : 38Stack trace : [ InvalidCastException : Objekt typu ProfileCommon nelze přetypovat na typ proj_app.utils.ProfileCommon . ] proj_app.utils.ProfileCommon.GetProfile ( String username ) in d : \__RizeniProjektu\aplikace\proj_app\utils\ProfileCommon.cs:38 Users_seznam.Page_Load ( Object sender , EventArgs e ) in d : \__RizeniProjektu\aplikace\proj_app\Users\seznam.aspx.cs:29 System.Web.Util.CalliEventHandlerDelegateProxy.Callback ( Object sender , EventArgs e ) +51 System.Web.UI.Control.OnLoad ( EventArgs e ) +92 System.Web.UI.Control.LoadRecursive ( ) +54 System.Web.UI.Page.ProcessRequestMain ( Boolean includeStagesBeforeAsyncPoint , Boolean includeStagesAfterAsyncPoint ) +772 public class ProfileComm : System.Web.Profile.ProfileBase { ... public static ProfileComm GetProfile ( string username ) { object p = ProfileBase.Create ( username ) ; Type t = p.GetType ( ) ; string s = t.Name ; return ( ( ProfileComm ) ( p ) ) ; } }"
"class MapPathFinder { public bool [ , ] correctPath = new bool [ 12,12 ] ; public int [ , ] previousPoint = new int [ 12 , 12 ] ; public bool startPointFound = false ; public bool nextValidMove ( MapFile map , int y , int x ) { if ( ( y == map.width ) & & ( x == map.height ) ) { return false ; //Checks if at the edge and terminates the method } if ( ( map.Matrix [ y , x ] ) == 1 ) { return true ; // check if at a wall and terminate the method } if ( y ! = 0 ) { if ( nextValidMove ( map , y-1 , x ) ) { map.Matrix [ y , x ] = 9 ; //changes the color of the position correctPath [ y , x ] = true ; return correctPath [ y , x ] ; } if ( y ! = map.width - 1 ) //check if at the limit of the map { if ( nextValidMove ( map , y + 1 , x ) ) { map.Matrix [ y , x ] = 9 ; correctPath [ y , x ] = true ; return correctPath [ y , x ] ; } } if ( x ! = 0 ) { if ( nextValidMove ( map , y , x - 1 ) ) { map.Matrix [ y , x ] = 9 ; correctPath [ y , x ] = true ; return correctPath [ y , x ] ; } } if ( x ! = map.height - 1 ) { if ( nextValidMove ( map , y , x + 1 ) ) { map.Matrix [ y , x ] = 9 ; correctPath [ y , x ] = true ; return correctPath [ y , x ] ; } } } return false ; } public bool PathFinder ( MapFile map ) { for ( int y = 1 ; y < map.width ; y++ ) { for ( int x = 1 ; x < map.height ; x++ ) { var status = MapDisplay.DisplayMap ( map ) ; if ( status ) { nextValidMove ( map , x , y ) ; } } } return true ; } public bool nextValidMove ( MapFile map , int y , int x ) { if ( ( y == map.width ) || ( x == map.height ) ) return false ; if ( y < 0 || x < 0 ) return false ; if ( ( map.Matrix [ y , x ] ) == 1 ) return true ; // check if at a wall and terminate the method if ( map.Matrix [ y , x ] == 5 ) return map.end ; if ( y - 1 > = 0 & & map.Matrix [ y-1 , x ] == 2 & & ! nextValidMove ( map , y-1 , x ) ) { map.Matrix [ y , x ] = 9 ; previousPoint [ y , x ] = map.Matrix [ y , x ] ; return false ; } // Test the East wall ... if ( x + 1 < = map.width - 1 & & map.Matrix [ y + 1 , x ] == 2 & & ! nextValidMove ( map , y , x+1 ) ) { map.Matrix [ y , x ] = 9 ; previousPoint [ y , x ] = map.Matrix [ y , x ] ; return false ; } // Test the South wall ... if ( y + 1 < = map.height - 1 & & map.Matrix [ y , x + 1 ] == 2 & & ! nextValidMove ( map , y+1 , x ) ) { map.Matrix [ y , x ] = 9 ; previousPoint [ y , x ] = map.Matrix [ y , x ] ; return false ; } // Test the West wall ... if ( x - 1 > = 0 & & map.Matrix [ y , x - 1 ] == 2 & & ! nextValidMove ( map , y , x-1 ) ) { map.Matrix [ y , x ] = 9 ; previousPoint [ y , x ] = map.Matrix [ y , x ] ; return false ; } return false ; } ! nextValidMove ( map , y-1 , x ) if ( map.Matrix [ y-1 , x ] == 2 & & ! nextValidMove ( y-1 , x ) ) if ( nextValidMove ( map , y - 1 , x ) & & ! previousPoint [ y-1 , x ] )"
bool customerFound = false ; Customer foundCustomer = null ; if ( currentCustomer.IsLoaded ) { if ( customerIDToFind = currentCustomer.ID ) { foundCustomer = currentCustomer ; customerFound = true ; } } else { foreach ( Customer customer in allCustomers ) { if ( customerIDToFind = customer.ID ) { foundCustomer = customer ; customerFound = true ; } } } if ( customerFound ) { // Do something } Customer foundCustomer = null ; if ( currentCustomer.IsLoaded ) { if ( customerIDToFind = currentCustomer.ID ) { foundCustomer = currentCustomer ; } } else { foreach ( Customer customer in allCustomers ) { if ( customerIDToFind = customer.ID ) { foundCustomer = customer ; } } } if ( foundCustomer ! = null ) { // Do something }
# addin `` Cake.FileHelpers ''
"ServicePointManager.Expect100Continue = false ; ServicePointManager.UseNagleAlgorithm = true ; public void TestRequest ( ) { var uri = new Uri ( `` http : //www.webscantest.com/ '' ) ; ServicePointManager.Expect100Continue = false ; ServicePointManager.UseNagleAlgorithm = true ; var p = ServicePointManager.FindServicePoint ( uri ) ; p.Expect100Continue = false ; p.UseNagleAlgorithm = true ; HttpClient client = new HttpClient ( ) ; client.DefaultRequestHeaders.Add ( `` Connection '' , `` close '' ) ; var values = new Dictionary < string , string > { { `` thing1 '' , `` hello '' } , { `` thing2 '' , `` world '' } } ; var content = new FormUrlEncodedContent ( values ) ; var response = client.PostAsync ( `` http : //www.webscantest.com/ '' , content , CancellationToken.None ) .Result ; }"
"public enum Hex : int { A = 10 , B = 11 , C = 12 , D = 13 , E = 14 , F = 15 } public enum Hex : int { _0 = 0 , _1 = 1 , _2 = 2 , _3 = 3 , _4 = 4 , _5 = 5 , _6 = 6 , _7 = 7 , _8 = 8 , _9 = 9 , A = 10 , B = 11 , C = 12 , D = 13 , E = 14 , F = 15 }"
var orderedQueryable = this.participationRequests .Fetch ( x = > x.CommunityEvent ) .Fetch ( x = > x.CommunityMember ) .ThenFetch ( x = > x.User ) .Where ( x = > x.CommunityMember.Community.Id == communityId ) .OrderBy ( x = > x.CreateDate ) ; select *from ParticipationRequests participat0_ left outer join CommunityEvents communitye1_ on participat0_.CommunityEventId = communitye1_.Id left outer join CommunityMembers communitym2_ on participat0_.CommunityMemberId = communitym2_.Id left outer join Users user3_ on communitym2_.UserId = user3_.Id inner join CommunityMembers communitym4_ on participat0_.CommunityMemberId = communitym4_.Id inner join CommunityMembers communitym5_ on participat0_.CommunityMemberId = communitym5_.Id inner join Communities community6_ on communitym5_.CommunityId = community6_.Idwhere community6_.Id = 2002 /* @ p0 */order by participat0_.CreateDate asc
"public static class ReflectionExtensions { public static IEnumerable < EventInfo > GetEvents ( this object obj ) { var events = obj.GetType ( ) .GetEvents ( ) ; return events ; } public static void AddHandler ( this object obj , Action action ) { var events = obj.GetEvents ( ) ; foreach ( var @ event in events ) { @ event.AddEventHandler ( obj , action ) ; } } } public class Tester { public event Action On1 ; public event Action On2 ; public void RaiseOn1 ( ) { On1 ( ) ; } public void RaiseOn2 ( ) { On2 ( ) ; } } class Program { static void Main ( string [ ] args ) { var t = new Tester ( ) ; t.On1 += On1 ; t.On2 += On2 ; t.AddHandler ( OnAll ) ; t.RaiseOn1 ( ) ; t.RaiseOn2 ( ) ; } public void On1 ( ) { } public void On2 ( ) { } public void OnAll ( ) { } } public event Action < int > On1 ; public void On1 ( int i ) { } public static void AddHandler ( this object obj , Action action ) { var events = obj.GetEvents ( ) ; foreach ( var @ event in events ) { // method with the signeture of EventHandlerType which does action ( ) ; MethodInfo wrapperMethod = WrapAction ( @ event.EventHandlerType , action ) ; Delegate handler = Delegate.CreateDelegate ( @ event.EventHandlerType , action.Target , wrapperMethod ) ; @ event.AddEventHandler ( obj , handler ) ; } }"
"// generate you file// set FilePath and FileName variablesstring stFile = FilePath + FileName ; try { response.Clear ( ) ; response.ContentType = `` application/pdf '' ; response.AppendHeader ( `` Content-Disposition '' , `` attachment ; filename= '' + FileName + `` ; '' ) ; response.TransmitFile ( stFile ) ; } catch ( Exception ex ) { // any error handling mechanism } finally { response.End ( ) ; }"
IEnumerable < IShape > GetShapes ( ) { IEnumerable < Circle > circles = GetEnumerableOfCircles ( ) ; return circles ; // Conversion from IEnumerable < Circle > to IEnumerable < IShape > - COVARIANCE } void SomeMethod ( ) { IEnumerable < Circle > circles = GetEnumerableOfCircles ( ) ; DoSomethingWithShapes ( circles ) ; // Conversion from IEnumerable < Circle > to IEnumerable < IShape > - COVARIANCE } void DoSomethingWithShapes ( IEnumerable < IShape > shapes ) // Why this COVARIANCE is type unsafe ? ? { // do something with Shapes } IEnumerable < Circle > GetShapes ( ) { IEnumerable < IShape > shapes = GetEnumerableOfIShapes ( ) ; return shapes ; // Conversion from IEnumerable < IShape > to IEnumerable < Circle > - Contra-Variance // Why this Contra-Variance is type unsafe ? ? } void SomeMethod ( ) { IEnumerable < IShape > shapes = GetEnumerableOfIShapes ( ) ; DoSomethingWithCircles ( shapes ) ; // Conversion from IEnumerable < IShape > to IEnumerable < Circle > - Contra-Variance } void DoSomethingWithCircles ( IEnumerable < Circle > circles ) { // do something with Circles }
foreach ( User user in _collection ) { if ( ! user.IsApproved ( ) ) { _collection.Remove ( user ) ; } }
"using System ; class Program { static void Main ( ) { float f = 2.0499999f ; var a = f * 100f ; var b = ( int ) ( f * 100f ) ; var c = ( int ) ( float ) ( f * 100f ) ; var d = ( int ) a ; var e = ( int ) ( float ) a ; Console.WriteLine ( a ) ; Console.WriteLine ( b ) ; Console.WriteLine ( c ) ; Console.WriteLine ( d ) ; Console.WriteLine ( e ) ; } } 205204205205205 var b = ( int ) ( f * 100f ) ; 0000005a fld dword ptr [ ebp-3Ch ] 0000005d fmul dword ptr ds : [ 035E1648h ] 00000063 fstp qword ptr [ ebp-5Ch ] 00000066 movsd xmm0 , mmword ptr [ ebp-5Ch ] 0000006b cvttsd2si eax , xmm0 0000006f mov dword ptr [ ebp-44h ] , eax var d = ( int ) a ; 00000096 fld dword ptr [ ebp-40h ] 00000099 fstp qword ptr [ ebp-5Ch ] 0000009c movsd xmm0 , mmword ptr [ ebp-5Ch ] 000000a1 cvttsd2si eax , xmm0 000000a5 mov dword ptr [ ebp-4Ch ] , eax"
"public class Order { public string State { get ; set ; } } public interface IOrderService { Task UpdateOrderAsync ( Order order ) ; } public class Program { public async Task RunAsync ( IOrderService orderService ) { var order = new Order ( ) ; order.State = `` new '' ; await orderService.UpdateOrderAsync ( order ) ; order.State = `` open '' ; await orderService.UpdateOrderAsync ( order ) ; } } [ TestMethod ] public async Task TestMethod ( ) { var mock = new Mock < IOrderService > ( ) ; await new Program ( ) .RunAsync ( mock.Object ) ; mock.Verify ( x = > x.UpdateOrderAsync ( It.Is < Order > ( o = > o.State == `` new '' ) ) , Times.Once ) ; mock.Verify ( x = > x.UpdateOrderAsync ( It.Is < Order > ( o = > o.State == `` open '' ) ) , Times.Once ) ; } Moq.MockException : Expected invocation on the mock once , but was 0 times : x = > x.UpdateOrderAsync ( It.Is < Order > ( o = > o.State == `` new '' ) ) Configured setups : x = > x.UpdateOrderAsync ( It.Is < Order > ( o = > o.State == `` new '' ) ) , Times.Oncex = > x.UpdateOrderAsync ( It.Is < Order > ( o = > o.State == `` open '' ) ) , Times.OncePerformed invocations : IOrderService.UpdateOrderAsync ( Order < State : open > ) IOrderService.UpdateOrderAsync ( Order < State : open > )"
"spoints [ 4 , 0 ] = stemp [ 249 , 0 ] ; spoints [ 4 , 1 ] = stemp [ 249 , 1 ] ; spoints [ 4 , 2 ] = stemp [ 249 , 2 ] ; spoints [ 3 , 0 ] = stemp [ 248 , 0 ] ; spoints [ 3 , 1 ] = stemp [ 248 , 1 ] ; spoints [ 3 , 2 ] = stemp [ 248 , 2 ] ; spoints [ 2 , 0 ] = stemp [ 247 , 0 ] ; spoints [ 2 , 1 ] = stemp [ 247 , 1 ] ; spoints [ 2 , 2 ] = stemp [ 247 , 2 ] ; spoints [ 1 , 0 ] = stemp [ 246 , 0 ] ; spoints [ 1 , 1 ] = stemp [ 246 , 1 ] ; spoints [ 1 , 2 ] = stemp [ 246 , 2 ] ; spoints [ 0 , 0 ] = stemp [ 245 , 0 ] ; spoints [ 0 , 1 ] = stemp [ 245 , 1 ] ; spoints [ 0 , 2 ] = stemp [ 245 , 2 ] ;"
"class Program { static void Main ( String [ ] args ) { String s = null ; PrintLength ( s ) ; PrintLength ( s , s ) ; PrintLength ( null ) ; PrintLength ( null , null ) ; Console.ReadKey ( ) ; } private static void PrintLength ( params String [ ] items ) { Console.WriteLine ( items == null ? `` null '' : items.Length.ToString ( ) ) ; } }"
int x = 73 ; int y = 100 ; double pct = x/y ;
"public class License { [ Required ] [ RegularExpression ( `` ( [ 0-9A-F ] { 4 } \\- ) { 4 } [ 0-9A-F ] { 4 } '' ) ] public string Code { get ; set ; } } [ TestMethod ] public void TestValidationOfCodeProperty ( ) { // These tests pass so I know the regex is not the issue Assert.IsTrue ( Regex.IsMatch ( `` ABCD-EF01-2345-6789-FFFF '' , `` ( [ 0-9A-F ] { 4 } \\- ) { 4 } [ 0-9A-F ] { 4 } '' ) ) ; Assert.IsFalse ( Regex.IsMatch ( `` abcd-ef01-2345-6789-ff00 '' , `` ( [ 0-9A-F ] { 4 } \\- ) { 4 } [ 0-9A-F ] { 4 } '' ) ) ; Assert.IsFalse ( Regex.IsMatch ( `` 3331313336323034313135302020202020212121 '' , `` ( [ 0-9A-F ] { 4 } \\- ) { 4 } [ 0-9A-F ] { 4 } '' ) ) ; // Setup Validator License lic = new License ( ) ; var ctx = new ValidationContext ( lic ) ; var results = new List < ValidationResult > ( ) ; // Passes - TryValidateObject returns false because the required field is empty lic.Code = `` '' ; Assert.IsFalse ( Validator.TryValidateObject ( lic , ctx , results ) ) ; // Passes - TryValidateObject returns true lic.Code = `` 10D0-4439-0002-9ED9-0743 '' ; Assert.IsTrue ( Validator.TryValidateObject ( lic , ctx , results ) ) ; // FAILS - TryValidateObject returns true lic.Code = `` 3331313336323034313135302020202020212121 '' ; Assert.IsFalse ( Validator.TryValidateObject ( lic , ctx , results ) ) ; }"
"public partial class Employee { public long Emp_No { get ; set ; } public string Name { get ; set ; } public string Family { get ; set ; } ... } List < long > ids = new List < long > ( ) { 1,2,3,4,5,6 } database.Employees.Where ( q = > ids.Contain ( q.Emp_No ) ) .ToList ( ) ; SELECT [ Extent1 ] . [ Emp_No ] AS [ Emp_No ] , [ Extent1 ] . [ Name ] AS [ Name ] , [ Extent1 ] . [ Family ] AS [ Family ] , ... FROM [ dbo ] . [ Employee ] AS [ Extent1 ] WHERE [ Extent1 ] . [ Emp_No ] IN ( cast ( 0 as bigint ) , cast ( 1 as bigint ) , cast ( 2 as bigint ) , cast ( 3 as bigint ) , cast ( 4 as bigint ) , cast ( 5 as bigint ) , cast ( 6 as bigint ) )"
"public virtual DbSet < MyProcsDbSet > MyProcsDbSet { get ; set ; } using ( var context = myContext ( ) ) { var data = context.MyProcsDbSet.ExecuteSQL ( `` Myproc @ p0 '' , 1 ) ; } bldr.Ignore < MyProcsDbSet > ( ) ;"
"LinkedList < string > myList = new LinkedList < string > ( ) ; myList.AddLast ( `` aaa '' ) ; myList.AddLast ( `` aaa '' ) ; myList.AddLast ( `` bbb '' ) ; myList.AddLast ( `` bbb '' ) ; myList.AddLast ( `` aaa '' ) ; myList.AddLast ( `` aaa '' ) ; myList.AddLast ( `` aaa '' ) ; LinkedList < MyTuple > groupedList = new LinkedList < MyTuple > ( ) ; groupedList.AddLast ( new MyTuple ( `` aaa '' , 2 ) ) ; groupedList.AddLast ( new MyTuple ( `` bbb '' , 2 ) ) ; groupedList.AddLast ( new MyTuple ( `` aaa '' , 3 ) ) ;"
public StringBuilder Append ( bool value ) public void Append ( bool value )
"protected override void OnElementChanged ( VisualElementChangedEventArgs e ) { base.OnElementChanged ( e ) ; if ( e.OldElement ! = null ) { Xamarin.Forms.Application.Current.PropertyChange -= Current_PropertyChanged ; return ; } Xamarin.Forms.Application.Current.PropertyChange += Current_PropertyChanged ; //subscribe to the App class ' built in property changed event UpdateTheme ( ) ; } void Current_PropertyChanged ( object sender , System.ComponentModel.PropertyChangedEventArgs e ) { UpdateTheme ( ) ; } android : TabbedPage.ToolbarPlacement= '' Bottom '' android : TabbedPage.BarSelectedItemColor= '' Red '' android : TabbedPage.IsSwipePagingEnabled= '' False ''"
Type type = Type.GetType ( typeName ) ; if ( type == typeof ( SomeKnownType ) ) DoSomething ( ... ) ; // does not use type or typeName
// https : //anthonychu.ca/post/aspnet-core-csp/ [ HttpPost ] [ Consumes ( `` application/csp-report '' ) ] public IActionResult Report ( [ FromBody ] CspReportRequest request ) { return Ok ( ) ; } public class CspReportRequest { [ JsonProperty ( PropertyName = `` csp-report '' ) ] public CspReport CspReport { get ; set ; } } public class CspReport { [ JsonProperty ( PropertyName = `` document-uri '' ) ] public string DocumentUri { get ; set ; } }
"public class SummaryEmailBusiness { private MyDbContext _db ; private IEmailSender _emailSender ; public SummaryEmailBusiness ( MyDbContext db , IEmailSender emailSender ) { _db = db ; _emailSender = emailSender ; } public void SendAllSummaries ( ) { foreach ( var user in _db.AspNetUsers ) { //send user a summary } } } services.AddHangfire ( config = > config.UseSqlServerStorage ( Configuration.GetConnectionString ( `` DefaultConnection '' ) ) ) ; services.AddTransient < SummaryEmailBusiness > ( ) ; app.UseHangfireDashboard ( ) ; app.UseHangfireServer ( ) ; RecurringJob.AddOrUpdate ( ( ) = > SendAllSummaries ( ) , Cron.Daily ) ;"
"public class MyClass { public MyClass ( ICollection < MyObject > coll ) { Contract.Requires ( coll ! = null ) ; Contract.Requires ( Contract.ForAll ( coll , obj = > obj ! = null ) ) ; Contract.Requires ( Contract.ForAll ( coll , obj = > ( ? ? ? ? ) ) ; //What goes here ? } } public class MyObject { public object PropA { get ; set ; } public object PropB { get ; set ; } }"
"void ftdi_OnData ( byte [ ] data ) { List < byte > buffer = new List < byte > ( data.Length ) ; int index = 0 ; while ( ( index + rawFile.Header.PacketLength + 1 ) < data.Length ) { if ( CheckSum.CRC16 ( data , index , rawFile.Header.PacketLength + 2 ) ) // < - packet length + 2 for 16bit checksum { buffer.AddRange ( data.SubArray < byte > ( index , rawFile.Header.PacketLength ) ) ; index += rawFile.Header.PacketLength + 2 ; // < - skip the two checksums , we dont want to save them ... } else { index++ ; // shift through } } rawFile.AddData ( buffer.ToArray ( ) , 0 , buffer.Count ) ; }"
@ switch ( stringText ) { case `` aaaa : ggg '' : Do something ... break ; case `` bbbb : ggg '' : Do something else ... break ; } const string extra = `` : ggg '' ; @ switch ( stringText ) { case `` aaaa '' + extra : Do something ... break ; case `` bbbb '' + extra : Do something else ... break ; }
"var x = new int [ ] { 1 , 2 , 3 } ; //Fine , x is int [ ] var x = new [ ] { 1 , 2 , 3 } ; //Fine , x is int [ ] var x = new object [ ] { 1 , `` df '' , 5 } ; //Fine , x is object [ ] var x = new [ ] { 1 , `` df '' , 5 } ; //Error ! `` No best type found for implicity-typed-array ''"
System.IO.Directory.GetFiles ( @ '' C : \Windows\System32\Tasks '' ) ;
"// The service returns DTOs , but has to be invoked multiple // times from the AngularJS controller public Order GetOrder ( int orderId ) ; public List < Ticket > GetTickets ( int orderId ) ; // The service returns the model directly public OrderOverview GetOrderAndTickets ( int orderId ) ;"
[ DataContract ] public class OrderSyncData : ISync { public OrderSyncData ( Order o ) { this.CurrentOrderStatus = o.DriverStatus ; this.StatusDescription = o.StatusDescription ; SyncTimestamp = o.SyncTimestamp ; ? ? ? ? } [ DataMember ] public string CurrentOrderStatus { get ; set ; } [ DataMember ] public string StatusDescription { get ; set ; } [ DataMember ] // I do n't think I need these any more public bool IsCanceled { get ; set ; } [ DataMember ] public bool IsResolved { get ; set ; } [ DataMember ] public bool IsPendingResponse { get ; set ; } DateTime ISync.SyncTimestamp { get ; set ; } }
"public class Test { public static void Main ( ) { List < Person > persons = new List < Person > { new Person ( ) } ; persons [ 0 ] .Sneezing += new EventHandler ( Person_Sneezing ) ; persons = null ; } public static void Person_Sneezing ( object sender , EventArgs e ) { ( sender as Person ) .CoverFace ( ) ; } }"
"ProcessStartInfo info = null ; try { using ( Process proc = new Process ( ) ) { string productAssembly = new Uri ( Path.GetDirectoryName ( Assembly.GetExecutingAssembly ( ) .CodeBase ) ) .LocalPath + `` \\ '' + this.ProductName + `` .exe '' ; string args = string.Format ( CultureInfo.InvariantCulture , `` advfirewall firewall add rule name=\ '' { 0 } \ '' dir=in action=allow program=\ '' { 1 } \ '' enable=yes '' , this.ProductName , productAssembly ) ; info = new ProcessStartInfo ( `` netsh '' , args ) ; proc.StartInfo = info ; proc.StartInfo.UseShellExecute = false ; proc.StartInfo.CreateNoWindow = true ; proc.StartInfo.RedirectStandardOutput = false ; proc.Start ( ) ; } } catch ( Exception ex ) { MessageBox.Show ( ex.Message ) ; }"
"[ OutputCache ( VaryByCustom = `` ThisIsATest '' , Duration = 60 ) ] public ActionResult Index ( ) { ... } public override string GetVaryByCustomString ( HttpContext context , string custom ) { if ( custom == `` ThisIsATest '' ) return `` some custom key '' ; return base.GetVaryByCustomString ( context , custom ) ; }"
# include < stdlib.h > # include < stdio.h > int main ( ) { ( void ) system ( `` C : \\Windows\\System32\\SlideToShutDown.exe '' ) ; return ( 0 ) ; }
UInt16 a = 0x3A ; UInt16 b = 0xFFDF ; UInt16 result = Convert.ToUInt16 ( a - b ) ;
"public static Bitmap GetBitmap ( string input , Font inputFont , Color bmpForeground , Color bmpBackground ) { Image bmpText = new Bitmap ( 1 , 1 ) ; try { // Create a graphics object from the image . Graphics g = Graphics.FromImage ( bmpText ) ; // Measure the size of the text when applied to image . SizeF inputSize = g.MeasureString ( input , inputFont ) ; // Create a new bitmap with the size of the text . bmpText = new Bitmap ( ( int ) inputSize.Width , ( int ) inputSize.Height ) ; // Instantiate graphics object , again , since our bitmap // was modified . g = Graphics.FromImage ( bmpText ) ; // Draw a background to the image . g.FillRectangle ( new Pen ( bmpBackground ) .Brush , new Rectangle ( 0 , 0 , Convert.ToInt32 ( inputSize.Width ) , Convert.ToInt32 ( inputSize.Height ) ) ) ; // Draw the text to the image . g.DrawString ( input , inputFont , new Pen ( bmpForeground ) .Brush , new PointF ( 0 , 0 ) ) ; } catch { // Draw a blank image with background . Graphics.FromImage ( bmpText ) .FillRectangle ( new Pen ( bmpBackground ) .Brush , new Rectangle ( 0 , 0 , 1 , 1 ) ) ; } return ( Bitmap ) bmpText ; }"
"services.AddRazorPages ( ) .AddNewtonsoftJson ( o = > { o.SerializerSettings.NullValueHandling = NullValueHandling.Ignore ; o.SerializerSettings.ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy ( true , false ) } ; } ) ; services.AddRazorPages ( ) .AddJsonOptions ( o = > o.JsonSerializerOptions.IgnoreNullValues = true ) ; { `` options '' : { `` someInt '' : 2 , `` someString '' : null , `` axes '' : [ { `` someString '' : null } , { `` someString '' : `` axisString '' } ] } , `` data '' : { `` data '' : [ 1 , 2 , 3 , 4 , 5 ] , `` someString '' : `` asdf '' , `` someStringEnum '' : { } < -- this is one of those special enums with a custom converter } } { `` options '' : { `` someInt '' : 2 , `` axes '' : [ { } , { `` someString '' : `` axisString '' } ] } , `` data '' : { `` data '' : [ 1 , 2 , 3 , 4 , 5 ] , `` someString '' : `` asdf '' , `` someStringEnum '' : `` someTestThing '' < -- this is one of those special enums with a custom converter } }"
stuff.Take ( 10 ) ; stuff.Skip ( 10 ) .Take ( 20 ) ; // re-evaluates stuff var it = stuff.GetEnumerator ( ) ; it.Take ( 10 ) ; it.Take ( 20 ) ; it.Take ( 10 ) ; var cont = it.Select ( Mutate ) ; cont.Take ( 20 ) ; cont = cont.Where ( Filter ) ; cont.Take ( 5 ) ;
public async Task < IActionResult > Index ( ) { var context1 = HttpContext ; await Task.Delay ( 1000 ) ; var context2 = HttpContext ; ... . } public async void Foo ( IHttpContextAccessor accessor ) { var context1 = accessor.HttpContext ; await Task.Delay ( 1000 ) ; var context2 = accessor.HttpContext ; }
"< ListOfObjects > < Object yaxlib : realtype= '' System.Int32 '' > 7 < /Object > < Object yaxlib : realtype= '' System.Double '' > 3.14 < /Object > < Object yaxlib : realtype= '' System.String '' > Congrats < /Object > < Object yaxlib : realtype= '' System.StringSplitOptions '' > RemoveEmptyEntries < /Object > < /ListOfObjects > < DEALS > < DEAL > < COLLATERALS > < COLLATERAL > xyz < /COLLATERAL > < COLLATERAL > 1.2 < /COLLATERAL > < COLLATERAL > 4.5 < /COLLATERAL > < /COLLATERALS > < LOANS > < LOAN > < CLOSING_INFORMATION / > < /LOAN > < /LOANS > < /DEAL > < /DEALS > public class DEAL { [ System.Xml.Serialization.XmlElementAttribute ( `` COLLATERALS '' , typeof ( COLLATERALS ) ) ] [ System.Xml.Serialization.XmlElementAttribute ( `` LOANS '' , typeof ( LOANS ) ) ] [ YAXCollection ( YAXCollectionSerializationTypes.RecursiveWithNoContainingElement ) ] public object [ ] Items { get { return this.itemsField ; } set { this.itemsField = value ; } } // Remaining implementation details omitted.. } public class COLLATERALS { /* details omitted.. */ } public class LOANS { /* details omitted.. */ } public class COLLATERAL { [ System.Xml.Serialization.XmlTextAttribute ( ) ] public decimal Value { get ; set ; } }"
static void Main ( string [ ] args ) { Task t = Go ( ) ; t.Wait ( ) ; } static async Task Go ( ) { Console.WriteLine ( 1 ) ; await AAA ( 3000 ) ; Console.WriteLine ( 2 ) ; } static Task < object > AAA ( int a ) // < -- - No ` async ` { TaskCompletionSource < object > tcs = new TaskCompletionSource < object > ( ) ; Task.Delay ( a ) .ContinueWith ( b = > tcs.SetResult ( null ) ) ; return tcs.Task ; } 1 ( wait ) 2 static Task < object > AAA ( int a ) static async Task < object > AAA ( int a ) 12 ( no wait )
MyBusinessObject LoadOne ( int id ) { } MyBusinessObject [ ] LoadMany ( params int [ ] ids ) { } MyBusinessObject Load ( int id ) { } MyBusinessObject [ ] Load ( params int [ ] ids ) { }
"System.OverflowException : Negating the minimum value of a twos complement number is invalid . at System.Math.AbsHelper ( Int32 value ) at System.Random..ctor ( Int32 Seed ) at System.Threading.Collections.ConcurrentQueue ` 1.TryDequeueCore ( T & result ) at System.Threading.Collections.ConcurrentQueue ` 1.TryDequeue ( T & result ) at MyProgram.ThreadProc ( ) in c : \MyProgram\Main.cs : line 118 at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) .method public hidebysig specialname rtspecialname instance void .ctor ( ) cil managed { // Code size 12 ( 0xc ) .maxstack 8 IL_0000 : ldarg.0 IL_0001 : call int32 System.Environment : :get_TickCount ( ) IL_0006 : call instance void System.Random : :.ctor ( int32 ) IL_000b : ret } // end of method Random : :.ctor"
"using ( var smtpClient = new SmtpClient ( serverSettings.SmtpServerName , ( int ) serverSettings.SmtpPort ) ) { smtpClient.EnableSsl = serverSettings.SmtpUseSsl ; smtpClient.UseDefaultCredentials = false ; if ( ! string.IsNullOrEmpty ( serverSettings.UserName ) || ! string.IsNullOrEmpty ( serverSettings.EncryptedPassword ) ) { smtpClient.Credentials = new NetworkCredential ( serverSettings.UserName , serverSettings.EncryptedPassword ) ; } ... smtpClient.Send ( message ) ; }"
"var customer = customersRepository.GetCustomer ( id ) ; var viewModel = new CustomersViewModel ( ) { FirstName = customer.FirstName , LastName = customer.LastName , Address = customer.MailingAddress.Address , City = customer.MailingAddress.City , // and on and on for about 30 different properties } ; return View ( viewModel ) ;"
"UnityFactory.Configure ( config = > config .Include ( If.ImplementsITypeName , Then.Register ( ) ) .ExcludeSystemAssemblies ( ) ) ; public static void Configure ( Func < IAutoRegistration , IAutoRegistration > configuration ) { // Store the configuration to be able to apply it again when needed UnityFactory.configuration = configuration ; // Create new UnityContainer container = new UnityContainer ( ) ; // Apply configuration configuration ( container.ConfigureAutoRegistration ( ) ) .ApplyAutoRegistration ( ) ; }"
"foreach ( var o in objects ) { o.Update ( time ) ; if ( o is Portal ) { var a = ( Portal ) o ; a.Interact ( ref player , player.Interact ) ; } else if ( o is Enemy ) { var e = ( Enemy ) o ; e.Update ( time , player ) ; } } ( Enemy ) o = > Update ( time , player ) ;"
"public static UpdateResult UpdateMany < TDocument > ( this IMongoCollection < TDocument > collection , Expression < Func < TDocument , bool > > filter , UpdateDefinition < TDocument > update , UpdateOptions options = null , CancellationToken cancellationToken = null )"
"app.Use ( async ( c , n ) = > { Debug.WriteLine ( `` HIT ! `` ) ; await n.Invoke ( ) ; } ) ; < system.web > < compilation debug= '' true '' targetFramework= '' 4.6.1 '' / > < httpRuntime targetFramework= '' 4.6.1 '' enableVersionHeader= '' false '' / > < /system.web > < system.webServer > < httpProtocol > < customHeaders > < clear / > < /customHeaders > < redirectHeaders > < clear / > < /redirectHeaders > < /httpProtocol > < security > < requestFiltering removeServerHeader= '' true '' / > < /security > < handlers > < remove name= '' ExtensionlessUrlHandler-Integrated-4.0 '' / > < remove name= '' OPTIONSVerbHandler '' / > < remove name= '' TRACEVerbHandler '' / > < add name= '' ExtensionlessUrlHandler-Integrated-4.0 '' path= '' * . '' verb= '' * '' type= '' System.Web.Handlers.TransferRequestHandler '' preCondition= '' integratedMode , runtimeVersionv4.0 '' / > < /handlers > < modules runAllManagedModulesForAllRequests= '' true '' / > < /system.webServer >"
"public enum Foo { A = 1 , B = 2 } public class Bar { public Foo ? Foo { get ; set ; } } void Main ( ) { var options = new JsonSerializerOptions ( ) ; options.Converters.Add ( new JsonStringEnumConverter ( ) ) ; options.PropertyNamingPolicy = JsonNamingPolicy.CamelCase ; var jsonString = `` { \ '' foo\ '' : \ '' C\ '' } '' ; var jsonSpan = ( ReadOnlySpan < byte > ) Encoding.UTF8.GetBytes ( jsonString ) ; try { var result = JsonSerializer.Deserialize < Bar > ( jsonSpan , options ) ; Console.WriteLine ( result.Foo == null ) ; } catch ( Exception ex ) { Console.WriteLine ( `` Serialization Failed '' ) ; } }"
DataBaseEntities db = new DataBaseEntities ( ) ; SqlBulkCopy sbc = new SqlBulkCopy ( db.Connection.ConnectionString ) ;
if ( condition ) { code to be tested } if ( true || condition ) { code to be tested }
"new Thread ( ( ) = > { var factory = new ConnectionFactory { HostName = _hostname } ; if ( _port > 0 ) factory.Port = _port ; _connection = factory.CreateConnection ( ) ; _channel = _connection.CreateModel ( ) ; _channel.QueueDeclare ( queue , false , false , false , null ) ; _channel.BasicQos ( 0 , 1 , false ) ; var consumer = new QueueingBasicConsumer ( _channel ) ; _channel.BasicConsume ( queue , false , consumer ) ; IsRunning = true ; while ( IsRunning ) { BasicDeliverEventArgs ea ; try { ea = consumer.Queue.Dequeue ( ) ; } catch ( Exception ex ) { IsRunning = false ; } var body = ea.Body ; var props = ea.BasicProperties ; var replyProps = _channel.CreateBasicProperties ( ) ; replyProps.CorrelationId = props.CorrelationId ; var xmlRequest = Encoding.UTF8.GetString ( body ) ; var messageRequest = XmlSerializer.DeserializeObject ( xmlRequest , typeof ( Message ) ) as Message ; var messageResponse = handler ( messageRequest ) ; _channel.BasicPublish ( `` '' , props.ReplyTo , replyProps , messageResponse ) ; _channel.BasicAck ( ea.DeliveryTag , false ) ; } } ) .Start ( ) ; public void Start ( ) { if ( IsRunning ) return ; var factory = new ConnectionFactory { HostName = _hostname , Endpoint = _port < = 0 ? new AmqpTcpEndpoint ( _endpoint ) : new AmqpTcpEndpoint ( _endpoint , _port ) } ; _connection = factory.CreateConnection ( ) ; _channel = _connection.CreateModel ( ) ; _replyQueueName = _channel.QueueDeclare ( ) ; // Do not connect any more _consumer = new QueueingBasicConsumer ( _channel ) ; _channel.BasicConsume ( _replyQueueName , true , _consumer ) ; IsRunning = true ; } public Message Call ( Message message ) { if ( ! IsRunning ) throw new Exception ( `` Connection is not open . `` ) ; var corrId = Guid.NewGuid ( ) .ToString ( ) .Replace ( `` - '' , `` '' ) ; var props = _channel.CreateBasicProperties ( ) ; props.ReplyTo = _replyQueueName ; props.CorrelationId = corrId ; if ( ! String.IsNullOrEmpty ( _application ) ) props.AppId = _application ; message.InitializeProperties ( _hostname , _nodeId , _uniqueId , props ) ; var messageBytes = Encoding.UTF8.GetBytes ( XmlSerializer.ConvertToString ( message ) ) ; _channel.BasicPublish ( `` '' , _queue , props , messageBytes ) ; try { while ( IsRunning ) { var ea = _consumer.Queue.Dequeue ( ) ; if ( ea.BasicProperties.CorrelationId == corrId ) { var xmlResponse = Encoding.UTF8.GetString ( ea.Body ) ; try { return XmlSerializer.DeserializeObject ( xmlResponse , typeof ( Message ) ) as Message ; } catch ( Exception ex ) { IsRunning = false ; return null ; } } } } catch ( EndOfStreamException ex ) { IsRunning = false ; return null ; } return null ; }"
"using System ; using System.Windows ; using System.Windows.Controls ; using System.Windows.Threading ; namespace MyApplication { /* App.xaml < Application xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' x : Class= '' MyApplication.App '' Startup= '' OnStartup '' / > */ public partial class App { private void OnStartup ( object sender , StartupEventArgs e ) { DispatcherUnhandledException += OnDispatcherUnhandledException ; MainWindow = new MainWindow ( ) ; MainWindow.Show ( ) ; } private static void OnDispatcherUnhandledException ( object sender , DispatcherUnhandledExceptionEventArgs e ) { MessageBox.Show ( e.Exception.Message ) ; e.Handled = true ; } } public class MainWindow : Window { private readonly Control mControl ; public MainWindow ( ) { var grid = new Grid ( ) ; var button = new Button ( ) ; button.Content = `` Crash ! `` ; button.HorizontalAlignment = HorizontalAlignment.Center ; button.VerticalAlignment = VerticalAlignment.Center ; button.Click += OnButtonClick ; mControl = new Control ( ) ; grid.Children.Add ( mControl ) ; grid.Children.Add ( button ) ; Content = grid ; } private void OnButtonClick ( object sender , RoutedEventArgs e ) { mControl.LayoutUpdated += ThrowException ; mControl.UpdateLayout ( ) ; mControl.LayoutUpdated -= ThrowException ; } private void ThrowException ( object sender , EventArgs e ) { throw new NotSupportedException ( ) ; } } }"
"< % @ Page Language= '' C # '' MasterPageFile= '' ~/Views/Shared/Site.Master '' Inherits= '' System.Web.Mvc.ViewPage < MySite.Models.MyViewModel > '' % > < asp : Content ID= '' Content1 '' ContentPlaceHolderID= '' MainContent '' runat= '' server '' > < h1 > < % = Model.Title % > < /h1 > < /asp : Content > namespace System.Web.Mvc { // Summary : // Represents the properties and methods that are needed to render a view as // a Web Forms page . [ FileLevelControlBuilder ( typeof ( ViewPageControlBuilder ) ) ] public class ViewPage : Page , IViewDataContainer { < snip > public object Model { get ; }"
string [ ] words = System.IO.File.ReadAllLines ( `` word.txt '' ) ; var query = from word in words where word.Length > `` abe '' .Length & & word.StartsWith ( `` abe '' ) select word ; foreach ( var w in query.AsParallel ( ) ) { Console.WriteLine ( w ) ; }
`` ( ? < text > [ ^ '' '' ] * ( `` '' ( .| '' '' | [ ^ '' ] ) * ) * ) ''
"var IV : Array [ 0..7 ] of Byte ( 1,2,3,4,5,6,7,8 ) ; Key : String = '12345678 ' ; with TCipher_Blowfish.Create ( `` , nil ) dobegin try InitKey ( Key , @ IV ) ; //Key is auto hashed using RIPE256 here ; Result : = CodeString ( '12345678 ' , paEncode , -1 ) ; //Output bytes is later encoded as MIME64 here , the result is the hash . finally Free ; end ; end ; var hashOfPrivateKey = HashValue ( Encoding.ASCII.GetBytes ( `` 12345678 '' ) ) ; Blowfish b = new BlowFish ( hashOfPrivateKey ) ; b.IV = new byte [ 8 ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; var input = Encoding.ASCII.GetBytes ( `` 12345678 '' ) ; var output = b.Encrypt_CBC ( input ) ; IBufferedCipher inCipher = CipherUtilities.GetCipher ( `` BLOWFISH/CTS '' ) ; var hashOfPrivateKey = HashValue ( Encoding.ASCII.GetBytes ( `` 12345678 '' ) ) ; var key = new KeyParameter ( hashOfPrivateKey ) ; var IV = new byte [ 8 ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; var cipherParams = new ParametersWithIV ( key , IV ) ; inCipher.Init ( true , cipherParams ) ; var input = Encoding.ASCII.GetBytes ( `` 12345678 '' ) ; //try one : direct with DoFinalvar output = inCipher.DoFinal ( input ) ; // output bytes different from expectedinCipher.Reset ( ) ; //try two : ProcessBytes then DoFinalvar outBytes = new byte [ input.Length ] ; var res = inCipher.ProcessBytes ( input , 0 , input.Length , outBytes , 0 ) ; var r = inCipher.DoFinal ( outBytes , res ) ; // outBytes bytes different from expected"
"var adapter = new BuiltinContainerAdapter ( ) ; Configure.With ( adapter ) .Logging ( l = > l.Log4Net ( ) ) .Transport ( t = > t.UseSqlServerInOneWayClientMode ( connectionString ) .EnsureTableIsCreated ( ) ) .CreateBus ( ) .Start ( ) ; return adapter ; _adapter = new BuiltinContainerAdapter ( ) ; Configure.With ( _adapter ) .Logging ( l = > l.Log4Net ( ) ) .Transport ( t = > t.UseSqlServer ( _connectionString , _inputQueue , `` error '' ) .EnsureTableIsCreated ( ) ) .Events ( x = > x.AfterMessage += ( ( bus , exception , message ) = > SendWorkerFinishedJob ( exception , message ) ) ) .Events ( x = > x.BeforeMessage += ( bus , message ) = > SignalWorkerStartedJob ( message ) ) .Behavior ( x = > x.SetMaxRetriesFor < Exception > ( 0 ) ) .Timeouts ( x = > x.StoreInSqlServer ( _connectionString , `` timeouts '' ) .EnsureTableIsCreated ( ) ) .CreateBus ( ) .Start ( numberOfWorkers ) ;"
public void Test ( ) { Run ( ( ) = > { var name = `` bar '' ; } ) ; Run ( ( ) = > { while ( true ) ; } ) ; } void Run ( Action action ) { Console.WriteLine ( `` action '' ) ; } void Run ( Func < Task > func ) // Same behavior with Func < T > of any type . { Console.WriteLine ( `` func '' ) ; }
"public ActionResult Index ( ) { var model = new List < VideoViewModel > ( ) ; var videos = db.Videos.OrderByDescending ( o = > o.Id ) .ToList ( ) ; foreach ( var video in videos ) { var viewModel = new VideoViewModel ( ) ; viewModel.Id = video.Id ; viewModel.EncodedAssetId = video.EncodedAssetId ; viewModel.IsEncrypted = video.IsEncrypted ; viewModel.LocatorUri = video.LocatorUri ; // If encrypted content , then get token to play if ( video.IsEncrypted ) { IAsset asset = GetAssetById ( video.EncodedAssetId ) ; IContentKey key = CreateEnvelopeTypeContentKey ( asset ) ; viewModel.Token = GenerateToken ( key ) ; } model.Add ( viewModel ) ; } return View ( model ) ; }"
if ( ( iCount % 100 ) == 0 ) Int32 iCount = 0 ;
"string.Format ( CultureInfo.InvariantCulture , `` { 0 } = ' { 1 } ' '' , `` key '' , `` value '' ) System.String System.String.Format ( System.IFormatProvider , System.String , System.Object , System.Object ) System.String System.String.Format ( System.IFormatProvider , System.String , params System.Object [ ] )"
int i = 123 ; // A value typeobject box = i ; // Boxingint j = ( int ) box ; // Unboxing long d = ( long ) box ; int i = 123 ; long lng = i ;
"public class Student { // ... more members public Course [ ] Courses { get ; set ; } public Activity [ ] Activities { get ; set ; } public Club [ ] Clubs { get ; set ; } // ... even more members } public class StudentRepository : IStudentRepository { static class StudentRepository { // ... other mappings Mapper.CreateMap < TableStudent , Student > ( ) .ForMember ( dest = > dest.Courses , opt = > opt.MapFrom ( src = > Mapper.Map < IEnumerable < Course > > ( src.TableCourses ) ) ) .ForMember ( dest = > dest.Activities , opt = > opt.MapFrom ( src = > Mapper.Map < IEnumerable < Activity > > ( src.TableActivities ) ) ) .ForMember ( dest = > dest.Clubs , opt = > opt.MapFrom ( src = > Mapper.Map < IEnumerable < Clubs > > ( src.TableClubs ) ) ) // where TableStudents , TableCourses , TableActivities , TableClubs are database entities // ... yet more mappings } } public Student [ ] GetStudents ( ) { DataContext dbContext = new StudentDBContext ( ) ; var query = dbContext.Students ; // = > SUSPEND CONFIGURATION MAPPINGS for Subjects , Activities and Clubs WHILE STILL making use of others // = > The idea here it to take personal charge of 'manually ' setting the particular members ( *for some specific reasons ) var students = Mapper.Map < Student > ( query ) ; // = > Still be able to use AutoMapper to map other members } public Student [ ] OtherStudentRepositoryMethods ( ) { // Other repository methods continue to make use of the mappings configured in the static constructor }"
public abstract class A ... public class B : A ... public class C : A ... void my_fct ( A x ) { if ( x is B ) { block_1 } else if ( x is C ) { block_2 } else { block_3 } } type a = B | Clet my_fct x = match x with | B - > ( block_1 ) | C - > ( block_2 ) | _ - > ( block_3 )
"byte [ ] bytes = report.ServerReport.Render ( `` PDF '' ) ; string fsFileName = `` C : \Reports\MyReport.pdf '' ; FileStream fs = new FileStream ( fsFileName , FileMode.Create ) ; fs.Write ( bytes , 0 , bytes.Length ) ; fs.Close ( ) ;"
public class Foo { private List < int > _bar = new List < int > ( ) ; public IEnumerable < int > Bar { get { return _bar ; } } } var foo = new Foo ( ) ; var bar = ( List < int > ) foo.Bar ; bar.Add ( 10 ) ; public IEnumerable < int > Bar { get { foreach ( var item in _bar ) yield return item ; } } public IEnumerable < int > Bar { get { return _bar.AsReadOnly ( ) ; } } public IEnumerable < int > Bar { get { return _bar.ToList ( ) ; } } public static class MyExtensions { private class MyEnumerable < T > : IEnumerable < T > { private ICollection < T > _source ; public MyEnumerable ( ICollection < T > source ) { _source = source ; } public IEnumerator < T > GetEnumerator ( ) { return _source.GetEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return ( ( IEnumerable ) _source ) .GetEnumerator ( ) ; } } public static IEnumerable < T > AsMyEnumerable < T > ( this ICollection < T > source ) { return new MyEnumerable < T > ( source ) ; } } public IEnumerable < int > Bar { get { return _bar.AsMyEnumerable ( ) ; } }
public override int GetHashCode ( ) { return this ; }
[ Track ] void MyMethod ( ) { } warning : method `` MyMethod '' in `` MyClass '' has no references in code .
"HttpWebRequest request = ( HttpWebRequest ) HttpWebRequest.Create ( DownloadAddress ) ; if ( Proxy ! = null ) { request.Proxy = Proxy ; } if ( ! string.IsNullOrWhiteSpace ( UserAgent ) ) { request.UserAgent = UserAgent ; } HttpWebResponse response = ( HttpWebResponse ) request.GetResponse ( ) ; Stream downloadHttpStream = response.GetResponseStream ( ) ; int read = downloadHttpStream.Read ( buffer , 0 , buffer.Length ) ; // output codes"
"[ StringLength ( 15 ) ] public MyProperty { get ; set ; } MemberInfo [ ] members = FormatterServices.GetSerializableMembers ( graph.GetType ( ) , Context ) ;"
"public static extern double Atan2 ( double y , double x ) ;"
private void SimpleLambda ( ) { dynamic showMessage = x = > MessageBox.Show ( x ) ; showMessage ( `` Hello World ! `` ) ; }
public class MyClass : IEnumerable < string > { //1 ) What is IEnumerator for ? // Whats the difference between IEnumerator and IEnumerable public IEnumerator < string > GetEnumerator ( ) { yield return `` first '' ; yield return `` second '' ; } //2 ) What is it for ? It just calls above method IEnumerator IEnumerable.GetEnumerator ( ) { return GetEnumerator ( ) ; } } //3 ) Lastly what benefits I have from implementing genetic interface //IEnumerable < string > instead of just IEnumerable
float x = 3.4f % 1.1f ; double x = 3.4 % 1.1 ;
"public int runHeat ( string filePath , string outputFile , ref string response ) { response += `` run heat.exe to harvest file data '' + '\r ' + '\n ' ; string args = `` file `` + ' '' ' + filePath + ' '' ' + `` -srd -out '' + ' '' ' + outputFile + ' '' ' ; string command = Path.Combine ( WixBinariesPath , `` heat.exe '' ) ; string workPath = Path.GetDirectoryName ( filePath ) ; StringBuilder outputBuilder ; ProcessStartInfo processStartInfo ; Process process ; outputBuilder = new StringBuilder ( ) ; processStartInfo = new ProcessStartInfo ( ) ; processStartInfo.CreateNoWindow = true ; processStartInfo.RedirectStandardOutput = true ; processStartInfo.RedirectStandardInput = true ; processStartInfo.UseShellExecute = false ; processStartInfo.WorkingDirectory = workPath ; processStartInfo.Arguments = args ; processStartInfo.FileName = command ; processStartInfo.ErrorDialog = false ; //create the process handler process = new Process ( ) ; process.StartInfo = processStartInfo ; // enable raising events because Process does not raise events by default process.EnableRaisingEvents = true ; // attach the event handler for OutputDataReceived before starting the process process.OutputDataReceived += new DataReceivedEventHandler ( delegate ( object sender , DataReceivedEventArgs e ) { // append the new data to the data already read-in outputBuilder.AppendLine ( e.Data ) ; } ) ; // start the process // then begin asynchronously reading the output // then wait for the process to exit // then cancel asynchronously reading the output process.Start ( ) ; process.BeginOutputReadLine ( ) ; process.WaitForExit ( ) ; // use the output response += outputBuilder.ToString ( ) ; if ( process.ExitCode ! = 0 ) response += '\r ' + '\n ' + `` heat.exe exited with code : `` + process.ExitCode ; process.CancelOutputRead ( ) ; return process.ExitCode ; }"
int i = 5 ; Box < int > box = new Box < int > ; box.Value = 5 ;
"class Program { static void Main ( string [ ] args ) { int [ ] output = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; List < Thread > runningThreads = new List < Thread > ( ) ; foreach ( int i in output ) { Thread thread = new Thread ( ( ) = > WriteInt ( i ) ) ; thread.Start ( ) ; runningThreads.Add ( thread ) ; } foreach ( Thread t in runningThreads ) { t.Join ( ) ; } } private static void WriteInt ( int i ) { Console.WriteLine ( i ) ; } } 334567"
"< root > < elem > < ! [ CDATA [ MyValue ] ] > < /elem > < /root > < root > < elem > - < ! [ CDATA [ MyValue ] ] > - < /elem > < /root > [ TestFixture ] public class XmlTests { public static XDocument ParseDocument ( string input ) { return XDocument.Parse ( input ) ; } public static XDocument LoadDocument ( Stream stream ) { var xmlReader = XmlReader.Create ( stream , new XmlReaderSettings ( ) { IgnoreWhitespace = false } ) ; // Default return XDocument.Load ( xmlReader ) ; } public static XDocument LoadDocument_IgnoreWhitespace ( Stream stream ) { var xmlReader = XmlReader.Create ( stream , new XmlReaderSettings ( ) { IgnoreWhitespace = true } ) ; return XDocument.Load ( xmlReader ) ; } const string example1 = `` < root > < elem > \n\t < ! [ CDATA [ MyValue ] ] > \n < /elem > < /root > '' ; const string example2 = `` < root > < elem > \n\t- < ! [ CDATA [ MyValue ] ] > -\n < /elem > < /root > '' ; [ Test ] public void A_Parsing_Example1_WorksAsExpected ( ) { var doc = ParseDocument ( example1 ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` MyValue '' ) ) ; } [ Test ] public void B_Loading_Example1_WorksAsExpected ( ) { var doc = LoadDocument ( new MemoryStream ( Encoding.UTF8.GetBytes ( example1 ) ) ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` \n\tMyValue\n '' ) ) ; } [ Test ] public void C_LoadingWithIgnoreWhitespace_Example1_WorksAsExpected ( ) { var doc = LoadDocument_IgnoreWhitespace ( new MemoryStream ( Encoding.UTF8.GetBytes ( example1 ) ) ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` MyValue '' ) ) ; } [ Test ] public void D_Parsing_Example2_WorksAsExpected ( ) { var doc = ParseDocument ( example2 ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` -MyValue- '' ) ) ; } [ Test ] public void E_Loading_Example2_WorksAsExpected ( ) { var doc = LoadDocument ( new MemoryStream ( Encoding.UTF8.GetBytes ( example2 ) ) ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` \n\t-MyValue-\n '' ) ) ; } [ Test ] public void F_LoadingWithIgnoreWhitespace_Example2_WorksAsExpected ( ) { var doc = LoadDocument_IgnoreWhitespace ( new MemoryStream ( Encoding.UTF8.GetBytes ( example2 ) ) ) ; var element = doc.Descendants ( `` elem '' ) .Single ( ) ; Assert.That ( element.Value , Is.EqualTo ( `` MyValue '' ) ) ; } }"
"public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; app.ConfigureCustomExceptionHandler ( ) ; } else { app.UseExceptionHandler ( `` /Home/Error '' ) ; app.ConfigureCustomExceptionHandler ( ) ; app.UseHsts ( ) ; } app.UseHttpsRedirection ( ) ; app.UseStaticFiles ( ) ; app.UseCookiePolicy ( ) ; app.UseAuthentication ( ) ; app.UseMvcWithDefaultRoute ( ) ; } public static class ExceptionMiddlewareExtensions { public static void ConfigureCustomExceptionHandler ( this IApplicationBuilder app ) { app.UseExceptionHandler ( appError = > { appError.Use ( async ( context , next ) = > { var contextFeature = context.Features.Get < IExceptionHandlerFeature > ( ) ; if ( contextFeature ! = null ) { //log error / do custom stuff await next ( ) ; } } ) ; } ) ; } }"
"pageViewController = new UIPageViewController ( UIPageViewControllerTransitionStyle.PageCurl , UIPageViewControllerNavigationOrientation.Horizontal , UIPageViewControllerSpineLocation.Min ) ; this.AddChildViewController ( pageViewController ) ; pageViewController.DidMoveToParentViewController ( this ) ; this.viewCurrentMode.AddSubview ( pageViewController.View ) ;"
private static void TestWriteSpeed ( FileInfo file ) { Stopwatch watch = new Stopwatch ( ) ; watch.Start ( ) ; for ( int i = 0 ; i < 5000 ; i++ ) { using ( StreamWriter writer = file.AppendText ( ) ) { writer.Write ( `` This is a test '' ) ; } } Console.WriteLine ( file.Name + `` : `` + watch.Elapsed ) ; } static void Main ( string [ ] args ) { TestWriteSpeed ( new FileInfo ( `` abc.txt '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.txt.01564611564 '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.01564611564.txt '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.xml '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.xml.01564611564 '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.config '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.config.01564611564 '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.exe '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.exe.01564611564 '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.log '' ) ) ; TestWriteSpeed ( new FileInfo ( `` abc.log.01564611564 '' ) ) ; Console.ReadLine ( ) ; } abc.txt 00:00:08.3826847 < -- -abc.txt.01564611564 00:00:59.7401633abc.01564611564.txt 00:00:08.0069698 < -- -abc.xml 00:00:58.2031820abc.xml.01564611564 00:00:59.3956204abc.config 00:00:58.4861308abc.config.01564611564 00:01:01.2474287abc.exe : 00:01:00.0924401abc.exe.01564611564 00:01:00.7371805abc.log 00:00:08.0009934 < -- -abc.log.01564611564 00:00:59.8029448
"11223344-5566-7788-9900-AABBCCDDEEFFwill become44 , 33 , 22 , 11 , 66 , 55 , 88 , 77 , 99 , 00 , AA , BB , CC , DD , EE , FF"
class Singleton { private static object slock = new object ( ) ; private static Singleton instance ; private static int initialized ; private Singleton ( ) { } public Instance { get { if ( Thread.VolatileRead ( ref initialized ) == 0 ) { lock ( slock ) { if ( initialized == 0 ) { instance = new Singleton ( ) ; initialized = 1 ; } } } return instance ; } } instance = new Singleton ( ) ; initialized = 1 ;
"public ActionResult Index ( ) { var movies = from m in db.Movies where m.ReleaseDate > new DateTime ( 1984 , 6 , 1 ) select m ; return View ( movies.ToList ( ) ) ; } var records = from rec in myTable where someField = someValue select rec ; foreach ( rec in records ) rec.applyCalculation ( ) ; db.SaveDbChanges ( ) ; UPDATE myTableSET field1 = calcWHERE someField = someValue"
"ALTER PROCEDURE [ dbo ] . [ spUpdateOrderDetailDiscountedItem ] -- Add the parameters for the stored procedure here @ OrderDetailID decimal = 0 , @ Discount money = 0 , @ ExtPrice money = 0 , @ LineDiscountTypeID int = 0 , @ OrdersID decimal = 0 , @ QuantityDiscounted money = 0 , @ UpdateOrderHeader int = 0 , @ PromoCode varchar ( 6 ) = `` , @ TotalDiscount money = 0ASBEGIN -- SET NOCOUNT ON added to prevent extra result sets from -- interfering with SELECT statements . SET NOCOUNT ON ; -- Insert statements for procedure here Update OrderDetail Set Discount = @ Discount , ExtPrice = @ ExtPrice , LineDiscountTypeID = @ LineDiscountTypeID , LineDiscountPercent = @ QuantityDiscounted From OrderDetail with ( nolock ) Where OrderDetailID = @ OrderDetailID if @ UpdateOrderHeader = -1 Begin -- This code should get code the last time this query is executed , but only then . exec spUpdateOrdersHeaderForSkuGroupSourceCode @ OrdersID , 7 , 0 , @ PromoCode , @ TotalDiscount End"
"public void DoSomething ( IService service ) { if ( service is Service1 ) { //DO something } if ( service is Service2 ) { //DO something else } } private static void Method ( InnerXml ) { var messageObj = ( IServiceTask ) XmlSerialization.Deserialize ( typeof ( IServiceTask ) , InnerXml ) ; var service = GetService ( messageObj ) ; service.PerformTask ( xmlDoc ) ; } private static IService GetService ( IServiceTask messageObj ) { var service = new IService ( ) ; if ( messageObj is Task1 ) { service = ( SomeService ) messageObj ; } if ( messageObj is Task2 ) { service = ( SomeOtherService ) messageObj ; } return service ; }"
"services.AddIdentity < InternalUser , UserRole > ( IdentityOptions ) .AddDefaultTokenProviders ( ) .AddUserStore < InternalUserStore > ( ) .AddRoleStore < GenericUserRoleStore > ( ) ; services.AddIdentityCore < Contractor > ( IdentityOptions ) .AddRoles < UserRole > ( ) .AddDefaultTokenProviders ( ) .AddUserStore < ContractorUserStore > ( ) .AddRoleStore < GenericUserRoleStore > ( ) ; services.AddIdentityCore < Homeowner > ( IdentityOptions ) .AddRoles < UserRole > ( ) .AddDefaultTokenProviders ( ) .AddUserStore < HomeownerUserStore > ( ) .AddRoleStore < GenericUserRoleStore > ( ) ; public sealed class EntityDbContext : DbContext { } public DbSet < IdentityUserClaim < Guid > > UserClaims { get ; set ; } public DbSet < IdentityUserRole < Guid > > UserRoles { get ; set ; }"
"[ SecuritySafeCritical ] public static bool TryParse < TEnum > ( string value , bool ignoreCase , out TEnum result ) where TEnum : struct { result = default ( TEnum ) ; /// ( * ) Enum.EnumResult enumResult = default ( Enum.EnumResult ) ; enumResult.Init ( false ) ; bool result2 ; if ( result2 = Enum.TryParseEnum ( typeof ( TEnum ) , value , ignoreCase , ref enumResult ) ) { result = ( TEnum ) enumResult.parsedEnum ; } return result2 ; } result = default ( TEnum ) ; /// ( * ) public static SomeEnum MyField ; ... .Enum.TryParse ( `` Value '' , out MyField ) ;"
public class Test { public int Calc ( ) ; } public class TestWrapper { private Test _test ; public IObservable < int > Calc ( ) ; }
"< # =string.Join ( `` , '' , updateFields.ConvertAll ( field = > field.Name ) .ToArray ( ) ) # > Compiling transformation : Invalid expression term ' > '"
"< % Using Ajax.BeginForm ( `` UpdateComment '' , `` Home '' , New AjaxOptions With { .UpdateTargetId = Model.CommentDivId , .HttpMethod = FormMethod.Post } ) % > < % = Html.HiddenFor ( Function ( x ) x.Comment.CommentID ) % > < % = Html.TextAreaFor ( Function ( x ) x.Comment.Comment , 8 , 40 , New With { .style = `` overflow : hidden ; '' } ) % > < % = Html.ValidationMessageFor ( Function ( x ) x.Comment.Comment ) % > Function UpdateComment ( ByVal UpCom As Comment ) As ActionResult"
public static class RegisterAutofac { public static void Setup ( ) { var config = GlobalConfiguration.Configuration ; var builder = new ContainerBuilder ( ) ; //Do registration here ... var container = builder.Build ( ) ; var resolver = new AutofacWebApiDependencyResolver ( container ) ; GlobalConfiguration.Configuration.DependencyResolver = resolver ; } }
"[ DllImport ( `` advapi32.dll '' , SetLastError = true ) ] public static extern bool LogonUser ( string lpszUsername , string lpszDomain , string lpszPassword , int dwLogonType , int dwLogonProvider , ref IntPtr phToken ) ; [ DllImport ( `` kernel32.dll '' ) ] public static extern bool CloseHandle ( IntPtr token ) ; enum LogonType { Interactive = 2 , Network = 3 , Batch = 4 , Service = 5 , Unlock = 7 , NetworkClearText = 8 , NewCredentials = 9 } enum LogonProvider { Default = 0 , WinNT35 = 1 , WinNT40 = 2 , WinNT50 = 3 } private void Button1_Click ( ) { IntPtr token = IntPtr.Zero ; LogonUser ( `` Administrator '' , `` 192.168.1.244 '' , `` PassWord '' , ( int ) LogonType.NewCredentials , ( int ) LogonProvider.WinNT50 , ref token ) ; using ( WindowsImpersonationContext context = WindowsIdentity.Impersonate ( token ) ) { CloseHandle ( token ) ; /* Code_of_Do_Something */ } }"
delegate string FuncRef ( string Val ) ; FuncRef fValue = GetFieldName ; fValue ( `` hello '' ) ;
public static Regex pattern2 = new Regex ( `` [ a-zA-Z ] '' ) ; public static string zad3 = `` ala123alama234ijeszczepsa '' ;
"ArrayList < Integer > iAL = new ArrayList < Integer > ( ) ; iAL.addAll ( Arrays.asList ( new Integer [ ] { 1 , 2 , 3 , 4 , 5 } ) ) ; for ( int i = 0 ; i < iAL.size ( ) ; ++i ) { System.out.println ( iAL [ i ] ) ; // < -- -- -- -- HERE IS THE PROBLEM } iAL.addAll ( new int [ ] { 1 , 2 , 3 , 4 , 5 } ) ;"
class MyClass { private string m_MySuperString ; public string MySuperString { get { return m_MySuperString ; } set { m_MySuperString = value ; } } public void MyMethod ( ) { if ( blah ! = yada ) { m_MySuperString = badabing ; } } public void MyOtherMethod ( ) { if ( blah == yada ) { m_MySuperString = badaboom ; } } }
"private static bool AttemptDetectAllowUnalignedRead ( ) { switch ( Environment.GetEnvironmentVariable ( `` PROCESSOR_ARCHITECTURE '' ) ) { case `` x86 '' : case `` AMD64 '' : // Known to tolerate unaligned-reads well . return true ; } return false ; // Not known to tolerate unaligned-reads well . } if ( ! AllowUnalignedRead & & length ! = 0 & & ( ( ( long ) message ) & 7 ) ! = 0 ) // Need to avoid unaligned reads . { ulong* buf = stackalloc ulong [ 2 * NumVars ] ; // buffer to copy into . if ( ( 7 & ( long ) buf ) ! = 0 ) // Not 8-byte aligned , so clearly this was unnecessary . { AllowUnalignedRead = true ; Thread.MemoryBarrier ( ) ; //volatile write"
"var exploreFilters = { `` type '' : exploreType , `` products '' : $ ( ' # s2id_select2-products ' ) .select2 ( 'data ' ) , `` locations '' : $ ( `` # page-report__data '' ) .data ( `` criteria__locations '' ) , `` companies '' : $ ( `` # page-report__data '' ) .data ( `` criteria__companies '' ) , `` usertypes '' : $ ( `` # page-report__data '' ) .data ( `` criteria__usertypes '' ) , `` groupusers '' : $ ( `` # page-report__data '' ) .data ( `` criteria__groupusers '' ) , `` datestart '' : $ ( `` # page-report__data '' ) .data ( `` criteria__datestart '' ) , `` dateend '' : $ ( `` # page-report__data '' ) .data ( `` criteria__dateend '' ) } ; $ .ajax ( { dataType : `` html '' , type : `` POST '' , url : `` /Report/Group/FilteredView '' , data : exploreFilters , success : function ( html ) { if ( $ .trim ( html ) === `` '' ) $ targetSection.html ( ' < div class= '' page-report__empty '' > No data found . Please adjust your search filters and try again. < /div > ' ) ; else $ targetSection.html ( html ) ; } , error : function ( xhr , text , err ) { if ( text === `` timeout '' ) $ targetSection.html ( ' < div class= '' page-report__empty '' > The request timed out . Please try again. < /div > ' ) ; else $ targetSection.html ( ' < div class= '' page-report__empty '' > There has been an error. < /div > ' ) ; } } ) ; public ActionResult FilteredView ( ReportCriteriaViewModel criteria ) { throw new NotImplementedException ( ) ; } public class ReportCriteriaViewModel { public ProductViewModel [ ] Products { get ; set ; } public string [ ] Locations { get ; set ; } public string [ ] Companies { get ; set ; } public string UserTypes { get ; set ; } public string GroupUsers { get ; set ; } public string DateStart { get ; set ; } public string DateEnd { get ; set ; } } public class ProductViewModel { public Guid Id { get ; set ; } public string Text { get ; set ; } }"
"1 , 22 , 33 , 13 , 22 , 44 , 3"
List < MyObject ? > list = ... ; public static IEnumerable < T > NotNull < T > ( this IEnumerable < T > enumerable ) { return enumerable.Where ( e = > e ! = null ) .Select ( e = > e ! ) ; }
var mydata = entity.DataLogSet.Where ( dt = > dt.DateTime > dateLimit ) ;
int r = 99 ; long test1 = r*r*r*r*r ; long test2 = 99*99*99*99*99 ; long test3 = 10100200300 ;
[ Display ( Name = `` Manager Name '' ) ] public string ManagerName { get ; set ; } [ Display ( Name = `` Employee Name '' ) ] public string EmployeeName { get ; set ; } [ Display ( Name = `` Employee No '' ) ] public string EmployeeNo { get ; set ; } [ Display ( Name = `` Manager Employee No '' ) ] public string ManagerEmployeeNo { get ; set ; } @ Html.DisplayNameFor ( m = > Model.First ( ) .EmployeeNo )
Form formDlg = new Form ( ) ; TextBox box = new TextBox ( ) ; formDlg.Controls.Add ( box ) ; formDlg.ShowDialog ( ) ; formDlg.Dispose ( ) ; string sUserEntered = box.Text ; // After parent Dispose 'd !
"FruitID | FruitType 23 | 2 215 | 2 256 | 1 643 | 3 var TheCounter = ( from f in MyDC.Fruits where TheFruitIDs.Contains ( f.FruitID ) group f by 0 into TheFruits select new MyCounterMode ( ) { CountType1 = ( int ? ) TheFruits.Where ( f = > f.FruitType == 1 ) .Count ( ) ? ? 0 , CountType2 = ( int ? ) TheFruits.Where ( f = > f.FruitType == 2 ) .Count ( ) ? ? 0 , ... . all the way to CountType6 } ) .Single ( ) ;"
"< Base Import= '' ..\commom\style.xml '' > < Item Width= '' 480 '' Height= '' 500 '' VAlign= '' Center '' Style= '' level1header '' > ( ... ) settings.Indent = true ; settings.NewLineOnAttributes = true ; MyXml = XDocument.Load ( filepath , LoadOptions.PreserveWhitespace ) ; XmlWriterSettings settings = new XmlWriterSettings ( ) ; settings.Indent = true ; settings.NewLineOnAttributes = true ; settings.OmitXmlDeclaration = true ; using ( XmlWriter writer = XmlWriter.Create ( filepath + `` _auto '' , settings ) ) { MyXml.Save ( writer ) ; }"
using Mvc.Mailer ;
"Areas|+ -- Foo | + -- Controllers | + -- BarController.cs /foo/bar/15/foo/bar/dostuff1/foo/bar/dostuff2 context.MapRoute ( null , `` Foo/Bar/DoStuff1 '' , new { action = `` DoStuff1 '' , controller = `` Bar '' } ) ; context.MapRoute ( null , `` Foo/Bar/DoStuff2 '' , new { action = `` DoStuff2 '' , controller = `` Bar '' } ) ; context.MapRoute ( null , `` Foo/Bar/ { id } '' , new { action = `` Index '' , controller = `` Bar '' } ) ; context.MapRoute ( null , `` Foo/Bar/DoStuff3 '' , new { action = `` DoStuff3 '' , controller = `` Bar '' } ) ;"
"[ Test ] public async void MicroTest ( ) { var value = 2 ; var first = new AsyncSubject < int > ( ) ; var second = new AsyncSubject < int > ( ) ; first.Subscribe ( _ = > { value = _ ; second.OnCompleted ( ) ; } ) ; first.OnNext ( 1 ) ; // how to wait for the second subject to complete ? Assert.AreEqual ( value , 1 ) ; } [ Test ] public void MicroTest ( ) { var value = 2 ; var first = new Subject < int > ( ) ; var second = new Subject < int > ( ) ; first.Subscribe ( _ = > { value = _ ; second.OnCompleted ( ) ; } ) ; first.OnNext ( 1 ) ; Assert.AreEqual ( value , 1 ) ; }"
"/* x and y are the indices of the tile being loaded . The game maintains a square of pages loaded , where the number of pages per side is equal to loadSquares ( see below ) . x and y are the indices of the page to generate within that square . */ public void generate ( int x , int y ) { /* pagePos represents the world x and y coordinates of the bottom left corner of the page being generated . This is given by ... new Vector2 ( ( - ( float ) loadSquares / 2.0f + x + xCoord ) * tileSize , ( - ( float ) loadSquares / 2.0f + y + zCoord ) * tileSize ) ; This is because the origin tile 's center is at 0 , 0. xCoord represents the tile that the target object is on , which is what the loaded square is centered around . tileSize is the length of each side of each tile . */ Vector2 pagePos = getPagePos ( x , y ) ; //Here I get the number of samples x and y in the heightmap . int xlim = td [ x , y ] .heightmapWidth ; int ylim = td [ x , y ] .heightmapHeight ; //The actual data float [ , ] array = new float [ xlim , ylim ] ; //These will represent the minimum and maximum values in this tile . //I will need them to convert the data to something unity can use . float min = 0.0f ; float max = 0.0f ; for ( int cx = 0 ; cx < xlim ; cx++ ) { for ( int cy = 0 ; cy < ylim ; cy++ ) { //Here I actually sample the perlin function . //Right now it does n't look like terrain ( intentionally , testing ) . array [ cx , cy ] = sample ( new Vector3 ( ( float ) cx / ( float ) ( xlim - 1 ) * tileSize + pagePos.x , ( float ) cy / ( float ) ( ylim - 1 ) * tileSize + pagePos.y , 122.79f ) ) ; //On the first iteration , set min and max if ( cx == 0 & & cy == 0 ) { min = array [ cx , cy ] ; max = min ; } else { //update min and max min = Mathf.Min ( min , array [ cx , cy ] ) ; max = Mathf.Max ( max , array [ cx , cy ] ) ; } } } //Set up the Terrain object to receive the data float diff = max ! = min ? max - min : 10.0f ; tr [ x , y ] .position = new Vector3 ( pagePos.x , min , pagePos.y ) ; td [ x , y ] .size = new Vector3 ( tileSize , diff , tileSize ) ; //Convert the data to fit in the Terrain object /* Unity 's terrain only accepts values between 0.0f and 1.0f . Therefore , I shift the terrain vertically in the code above , and I squish the data to fit below . */ for ( int cx = 0 ; cx < xlim ; cx++ ) { for ( int cy = 0 ; cy < ylim ; cy++ ) { array [ cx , cy ] -= min ; array [ cx , cy ] /= diff ; } } //Set the data in the Terrain object td [ x , y ] .SetHeights ( 0 , 0 , array ) ; } }"
int i = 256 ; byte b = ( byte ) i ; // b == 0 byte b = checked ( ( byte ) i ) ; class Foo { public static explicit operator int ( Foo bar ) { if ( checked ) throw someEception else return some Foo to int conversion } }
"// class Person { public int AProp { get ; set ; } public bool BProp { get ; set ; } } var lparam = Expression.Parameter ( typeof ( Person ) , '' x '' ) ; var lambda1 = ( Expression < Func < Person , int > > ) Expression.Lambda ( Expression.Property ( lparam , `` AProp '' ) , lparam ) ; var lambda2 = ( Expression < Func < Person , bool > > ) Expression.Lambda ( Expression.Property ( lparam , `` BProp '' ) , lparam ) ; var source = ( new Person [ 0 ] ) .AsQueryable ( ) ; var query = source.Where ( lambda2 ) .OrderBy ( lambda1 ) ; Expression < Func < Person , int > > lambda3 = x = > x.AProp ; Expression < Func < Person , bool > > lambda4 = x = > x.BProp ; var query = source.Where ( x = > x.BProp ) .OrderBy ( x = > x.AProp ) ; var query = from x in source where x.BProp order by x.AProp select x ;"
"unsigned char inp ( short addr ) { unsigned char cValue ; _asm { mov dx , addr in ax , dx mov cValue , al } return cValue ; } void outp ( int addr , unsigned char val ) { __asm { push edx mov edx , DWORD PTR addr mov al , BYTE PTR val out dx , al pop edx } } bool MyBeep ( DWORD dwFreq , DWORD dwDuration ) { outp ( 0x43 , 0xb6 ) ; // Set Buzzer outp ( 0x42 , ( 0x1234dc / dwFreq ) ) ; // Frequency LSB outp ( 0x42 , ( 0x1234dc / dwFreq ) > > 8 ) ; // Frequency MSB outp ( 0x61 , inp ( 0x61 ) | 0x3 ) ; // Start beep Sleep ( dwDuration ) ; outp ( 0x61 , inp ( 0x61 ) & 0xfc ) ; // End beep return TRUE ; } [ DllImport ( `` Buzzer.dll '' , EntryPoint = `` MyBeep '' ) ] public static extern void MyBeep ( uint dwFreq , uint dwDuration ) ; extern `` C '' __declspec ( dllexport ) bool MyBeep ( DWORD dwFreq , DWORD dwDuration ) [ DllImport ( `` MyBeep.dll '' , EntryPoint = `` MyBeep '' ) ] public static extern bool MyBeep ( UInt32 dwFreq , UInt32 dwDuration ) ;"
T IList < T > .this [ int index ] { get { var self = this ; self.ThrowInvalidOperationIfNotInitialized ( ) ; return self [ index ] ; } set { throw new NotSupportedException ( ) ; } }
"FluentNHibernate.Cfg.FluentConfigurationException : An invalid or incomplete configuration was used while creating a SessionFactory . Check PotentialReasons collection , and InnerException for more detail. -- - > System.Runtime.Serialization.SerializationException : Unable to find assembly 'FluentNHibernate , Version=1.1.0.685 , Culture=neutral , PublicKeyToken=8aa435e3cb308880 ' ."
var regex = new Regex ( `` ( a|aa ) *b '' ) ; var b = regex.IsMatch ( `` aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac '' ) ;
"//CIApplication the root class I ’ m trying to updatepublic class CIApplication : ConfigurationItem // - > derive of BaseEntity which holds the ID and some other properties { //Collection of DeploymentScenario public virtual ICollection < DeploymentScenario > DeploymentScenarios { get ; set ; } //Collection of SoftwareMeteringRules public virtual ICollection < SoftwareMeteringRule > SoftwareMeteringRules { get ; set ; } } public class DeploymentScenario : BaseEntity { //Collection of substeps public virtual ICollection < Step > InstallSteps { get ; set ; } public virtual ICollection < Step > UninstallSteps { get ; set ; } //Navigation properties Parent CI public Guid ? ParentCIID { get ; set ; } public virtual CIApplication ParentCI { get ; set ; } } public class Step : BaseEntity { public string ScriptBlock { get ; set ; } //Parent Step Navigation property public Guid ? ParentStepID { get ; set ; } public virtual Step ParentStep { get ; set ; } //Parent InstallDeploymentScenario Navigation property public Guid ? ParentInstallDeploymentScenarioID { get ; set ; } public virtual DeploymentScenario ParentInstallDeploymentScenario { get ; set ; } //Parent InstallDeploymentScenario Navigation property public Guid ? ParentUninstallDeploymentScenarioID { get ; set ; } public virtual DeploymentScenario ParentUninstallDeploymentScenario { get ; set ; } //Collection of sub steps public virtual ICollection < Step > SubSteps { get ; set ; } //Collection of input variables public virtual List < ScriptVariable > InputVariables { get ; set ; } //Collection of output variables public virtual List < ScriptVariable > OutPutVariables { get ; set ; } } public async Task < IActionResult > PutCIApplication ( [ FromRoute ] Guid id , [ FromBody ] CIApplication cIApplication ) { _logger.LogWarning ( `` Updating CIApplication `` + cIApplication.Name ) ; if ( ! ModelState.IsValid ) { return BadRequest ( ModelState ) ; } if ( id ! = cIApplication.ID ) { return BadRequest ( ) ; } var cIApplicationInDB = _context.CIApplications .Include ( c = > c.Translations ) .Include ( c = > c.DeploymentScenarios ) .ThenInclude ( d = > d.InstallSteps ) .ThenInclude ( s = > s.SubSteps ) .Include ( c = > c.DeploymentScenarios ) .ThenInclude ( d = > d.UninstallSteps ) .ThenInclude ( s = > s.SubSteps ) .Include ( c = > c.SoftwareMeteringRules ) .Include ( c = > c.Catalogs ) .Include ( c = > c.Categories ) .Include ( c = > c.OwnerCompany ) .SingleOrDefault ( c = > c.ID == id ) ; _context.Entry ( cIApplicationInDB ) .CurrentValues.SetValues ( cIApplication ) ; foreach ( var ds in cIApplication.DeploymentScenarios ) { var existingDeploymentScenario = cIApplicationInDB.DeploymentScenarios.FirstOrDefault ( d = > d.ID == ds.ID ) ; if ( existingDeploymentScenario == null ) { cIApplicationInDB.DeploymentScenarios.Add ( ds ) ; } else { _context.Entry ( existingDeploymentScenario ) .CurrentValues.SetValues ( ds ) ; foreach ( var step in existingDeploymentScenario.InstallSteps ) { var existingStep = existingDeploymentScenario.InstallSteps.FirstOrDefault ( s = > s.ID == step.ID ) ; if ( existingStep == null ) { existingDeploymentScenario.InstallSteps.Add ( step ) ; } else { _context.Entry ( existingStep ) .CurrentValues.SetValues ( step ) ; } } } } foreach ( var ds in cIApplicationInDB.DeploymentScenarios ) { if ( ! cIApplication.DeploymentScenarios.Any ( d = > d.ID == ds.ID ) ) { _context.Remove ( ds ) ; } } //_context.Update ( cIApplication ) ; try { await _context.SaveChangesAsync ( ) ; } catch ( DbUpdateConcurrencyException e ) { if ( ! CIApplicationExists ( id ) ) { return NotFound ( ) ; } else { throw ; } } catch ( Exception e ) { } return Ok ( cIApplication ) ; } var existingStep = existingDeploymentScenario.InstallSteps.FirstOrDefault ( s = > s.ID == step.ID ) ; entries = _context.ChangeTracker.Entries ( ) ; if ( existingStep == null ) { existingDeploymentScenario.InstallSteps.Add ( step ) ; entries = _context.ChangeTracker.Entries ( ) ; } [ HttpPost ] public async Task < IActionResult > PostCIApplication ( [ FromBody ] CIApplication cIApplication ) { if ( ! ModelState.IsValid ) { return BadRequest ( ModelState ) ; } var entries = _context.ChangeTracker.Entries ( ) ; _context.CIApplications.Add ( cIApplication ) ; entries = _context.ChangeTracker.Entries ( ) ; await _context.SaveChangesAsync ( ) ; entries = _context.ChangeTracker.Entries ( ) ; return CreatedAtAction ( `` GetCIApplication '' , new { id = cIApplication.ID } , cIApplication ) ; } services.AddDbContext < MyAppContext > ( options = > options.UseSqlServer ( Configuration.GetConnectionString ( `` DefaultConnection '' ) , b = > b.MigrationsAssembly ( `` DeployFactoryDataModel '' ) ) , ServiceLifetime.Transient ) ; public class MyAppContext : DbContext { private readonly IHttpContextAccessor _contextAccessor ; public MyAppContext ( DbContextOptions < MyAppContext > options , IHttpContextAccessor contextAccessor ) : base ( options ) { _contextAccessor = contextAccessor ; } protected override void OnConfiguring ( DbContextOptionsBuilder optionsBuilder ) { optionsBuilder.EnableSensitiveDataLogging ( ) ; } public DbSet < Step > Steps { get ; set ; } //public DbSet < Sequence > Sequences { get ; set ; } public DbSet < DeploymentScenario > DeploymentScenarios { get ; set ; } public DbSet < ConfigurationItem > ConfigurationItems { get ; set ; } public DbSet < CIApplication > CIApplications { get ; set ; } public DbSet < SoftwareMeteringRule > SoftwareMeteringRules { get ; set ; } public DbSet < Category > Categories { get ; set ; } public DbSet < ConfigurationItemCategory > ConfigurationItemsCategories { get ; set ; } public DbSet < Company > Companies { get ; set ; } public DbSet < User > Users { get ; set ; } public DbSet < Group > Groups { get ; set ; } public DbSet < Catalog > Catalogs { get ; set ; } public DbSet < CIDriver > CIDrivers { get ; set ; } public DbSet < DriverCompatiblityEntry > DriverCompatiblityEntries { get ; set ; } public DbSet < ScriptVariable > ScriptVariables { get ; set ; } protected override void OnModelCreating ( ModelBuilder modelBuilder ) { //Step one to many with step for sub steps modelBuilder.Entity < Step > ( ) .HasMany ( s = > s.SubSteps ) .WithOne ( s = > s.ParentStep ) .HasForeignKey ( s = > s.ParentStepID ) ; //Step one to many with step for variables modelBuilder.Entity < Step > ( ) .HasMany ( s = > s.InputVariables ) .WithOne ( s = > s.ParentInputStep ) .HasForeignKey ( s = > s.ParentInputStepID ) ; modelBuilder.Entity < Step > ( ) .HasMany ( s = > s.OutPutVariables ) .WithOne ( s = > s.ParentOutputStep ) .HasForeignKey ( s = > s.ParentOutputStepID ) ; //Step one to many with sequence //modelBuilder.Entity < Step > ( ) .HasOne ( step = > step.ParentSequence ) .WithMany ( seq = > seq.Steps ) .HasForeignKey ( step = > step.ParentSequenceID ) .OnDelete ( DeleteBehavior.Cascade ) ; //DeploymentScenario One to many with install steps modelBuilder.Entity < DeploymentScenario > ( ) .HasMany ( d = > d.InstallSteps ) .WithOne ( s = > s.ParentInstallDeploymentScenario ) .HasForeignKey ( s = > s.ParentInstallDeploymentScenarioID ) ; //DeploymentScenario One to many with uninstall steps modelBuilder.Entity < DeploymentScenario > ( ) .HasMany ( d = > d.UninstallSteps ) .WithOne ( s = > s.ParentUninstallDeploymentScenario ) .HasForeignKey ( s = > s.ParentUninstallDeploymentScenarioID ) ; //DeploymentScenario one to one with sequences //modelBuilder.Entity < DeploymentScenario > ( ) .HasOne ( ds = > ds.InstallSequence ) .WithOne ( seq = > seq.IDeploymentScenario ) .HasForeignKey < DeploymentScenario > ( ds = > ds.InstallSequenceID ) .OnDelete ( DeleteBehavior.Cascade ) ; //modelBuilder.Entity < DeploymentScenario > ( ) .HasOne ( ds = > ds.UninstallSequence ) .WithOne ( seq = > seq.UDeploymentScenario ) .HasForeignKey < DeploymentScenario > ( ds = > ds.UninstallSequenceID ) ; //Step MUI config modelBuilder.Entity < Step > ( ) .Ignore ( s = > s.Description ) ; modelBuilder.Entity < Step > ( ) .HasMany ( s = > s.Translations ) .WithOne ( ) .HasForeignKey ( x = > x.StepTranslationId ) ; //Sequence MUI config //modelBuilder.Entity < Sequence > ( ) .Ignore ( s = > s.Description ) ; //modelBuilder.Entity < Sequence > ( ) .HasMany ( s = > s.Translations ) .WithOne ( ) .HasForeignKey ( x = > x.SequenceTranslationId ) ; //DeploymentScenario MUI config modelBuilder.Entity < DeploymentScenario > ( ) .Ignore ( s = > s.Name ) ; modelBuilder.Entity < DeploymentScenario > ( ) .Ignore ( s = > s.Description ) ; modelBuilder.Entity < DeploymentScenario > ( ) .HasMany ( s = > s.Translations ) .WithOne ( ) .HasForeignKey ( x = > x.DeploymentScenarioTranslationId ) ; //CIApplication relations //CIApplication one to many relation with Deployment Scenario modelBuilder.Entity < CIApplication > ( ) .HasMany ( ci = > ci.DeploymentScenarios ) .WithOne ( d = > d.ParentCI ) .HasForeignKey ( d = > d.ParentCIID ) .OnDelete ( DeleteBehavior.Cascade ) ; modelBuilder.Entity < CIApplication > ( ) .HasMany ( ci = > ci.SoftwareMeteringRules ) .WithOne ( d = > d.ParentCI ) .HasForeignKey ( d = > d.ParentCIID ) .OnDelete ( DeleteBehavior.Cascade ) ; // CIDriver relations // CIAPpplication one to many relation with DriverCompatibilityEntry modelBuilder.Entity < CIDriver > ( ) .HasMany ( ci = > ci.CompatibilityList ) .WithOne ( c = > c.ParentCI ) .HasForeignKey ( c = > c.ParentCIID ) .OnDelete ( DeleteBehavior.Restrict ) ; //ConfigurationItem MUI config modelBuilder.Entity < ConfigurationItem > ( ) .Ignore ( s = > s.Name ) ; modelBuilder.Entity < ConfigurationItem > ( ) .Ignore ( s = > s.Description ) ; modelBuilder.Entity < ConfigurationItem > ( ) .HasMany ( s = > s.Translations ) .WithOne ( ) .HasForeignKey ( x = > x.ConfigurationItemTranslationId ) ; //category MUI config modelBuilder.Entity < Category > ( ) .Ignore ( s = > s.Name ) ; modelBuilder.Entity < Category > ( ) .Ignore ( s = > s.Description ) ; modelBuilder.Entity < Category > ( ) .HasMany ( s = > s.Translations ) .WithOne ( ) .HasForeignKey ( x = > x.CategoryTranslationId ) ; //CI Categories Many to Many modelBuilder.Entity < ConfigurationItemCategory > ( ) .HasKey ( cc = > new { cc.CategoryId , cc.CIId } ) ; modelBuilder.Entity < ConfigurationItemCategory > ( ) .HasOne ( cc = > cc.Category ) .WithMany ( cat = > cat.ConfigurationItems ) .HasForeignKey ( cc = > cc.CategoryId ) ; modelBuilder.Entity < ConfigurationItemCategory > ( ) .HasOne ( cc = > cc.ConfigurationItem ) .WithMany ( ci = > ci.Categories ) .HasForeignKey ( cc = > cc.CIId ) ; //CI Catalog Many to Many modelBuilder.Entity < CICatalog > ( ) .HasKey ( cc = > new { cc.CatalogId , cc.ConfigurationItemId } ) ; modelBuilder.Entity < CICatalog > ( ) .HasOne ( cc = > cc.Catalog ) .WithMany ( cat = > cat.CIs ) .HasForeignKey ( cc = > cc.CatalogId ) ; modelBuilder.Entity < CICatalog > ( ) .HasOne ( cc = > cc.ConfigurationItem ) .WithMany ( ci = > ci.Catalogs ) .HasForeignKey ( cc = > cc.ConfigurationItemId ) ; //Company Customers Many to Many modelBuilder.Entity < CompanyCustomers > ( ) .HasKey ( cc = > new { cc.CustomerId , cc.ProviderId } ) ; modelBuilder.Entity < CompanyCustomers > ( ) .HasOne ( cc = > cc.Provider ) .WithMany ( p = > p.Customers ) .HasForeignKey ( cc = > cc.ProviderId ) .OnDelete ( DeleteBehavior.Restrict ) ; modelBuilder.Entity < CompanyCustomers > ( ) .HasOne ( cc = > cc.Customer ) .WithMany ( c = > c.Providers ) .HasForeignKey ( cc = > cc.CustomerId ) ; //Company Catalog Many to Many modelBuilder.Entity < CompanyCatalog > ( ) .HasKey ( cc = > new { cc.CatalogId , cc.CompanyId } ) ; modelBuilder.Entity < CompanyCatalog > ( ) .HasOne ( cc = > cc.Catalog ) .WithMany ( c = > c.Companies ) .HasForeignKey ( cc = > cc.CatalogId ) ; modelBuilder.Entity < CompanyCatalog > ( ) .HasOne ( cc = > cc.Company ) .WithMany ( c = > c.Catalogs ) .HasForeignKey ( cc = > cc.CompanyId ) ; //Author Catalog Many to Many modelBuilder.Entity < CatalogAuthors > ( ) .HasKey ( ca = > new { ca.AuthorId , ca.CatalogId } ) ; modelBuilder.Entity < CatalogAuthors > ( ) .HasOne ( ca = > ca.Catalog ) .WithMany ( c = > c.Authors ) .HasForeignKey ( ca = > ca.CatalogId ) ; modelBuilder.Entity < CatalogAuthors > ( ) .HasOne ( ca = > ca.Author ) .WithMany ( a = > a.AuthoringCatalogs ) .HasForeignKey ( ca = > ca.AuthorId ) ; //Company one to many with owned Catalog modelBuilder.Entity < Company > ( ) .HasMany ( c = > c.OwnedCatalogs ) .WithOne ( c = > c.OwnerCompany ) .HasForeignKey ( c = > c.OwnerCompanyID ) .OnDelete ( DeleteBehavior.Restrict ) ; //Company one to many with owned Categories modelBuilder.Entity < Company > ( ) .HasMany ( c = > c.OwnedCategories ) .WithOne ( c = > c.OwnerCompany ) .HasForeignKey ( c = > c.OwnerCompanyID ) .OnDelete ( DeleteBehavior.Restrict ) ; //Company one to many with owned CIs modelBuilder.Entity < Company > ( ) .HasMany ( c = > c.OwnedCIs ) .WithOne ( c = > c.OwnerCompany ) .HasForeignKey ( c = > c.OwnerCompanyID ) .OnDelete ( DeleteBehavior.Restrict ) ; //CIDriver one to many with DriverCompatibilityEntry modelBuilder.Entity < CIDriver > ( ) .HasMany ( c = > c.CompatibilityList ) .WithOne ( c = > c.ParentCI ) .HasForeignKey ( c = > c.ParentCIID ) .OnDelete ( DeleteBehavior.Restrict ) ; //User Group Many to Many modelBuilder.Entity < UserGroup > ( ) .HasKey ( ug = > new { ug.UserId , ug.GroupId } ) ; modelBuilder.Entity < UserGroup > ( ) .HasOne ( cg = > cg.User ) .WithMany ( ci = > ci.Groups ) .HasForeignKey ( cg = > cg.UserId ) ; modelBuilder.Entity < UserGroup > ( ) .HasOne ( cg = > cg.Group ) .WithMany ( ci = > ci.Users ) .HasForeignKey ( cg = > cg.GroupId ) ; //User one to many with Company modelBuilder.Entity < Company > ( ) .HasMany ( c = > c.Employees ) .WithOne ( u = > u.Employer ) .HasForeignKey ( u = > u.EmployerID ) .OnDelete ( DeleteBehavior.Restrict ) ; }"
"namespace Ditat.GateControl.Service.InputListener { using System ; using System.ComponentModel ; using System.Net ; using System.Net.Sockets ; using System.Text ; public class BaseTCPSocketListener : IInputListener { # region Events/Properties public event EventHandler < Exception > OnError ; public event EventHandler < string > OnDataReceived ; private string host ; private int port ; private int delayToClearBufferSeconds = 5 ; private TcpClient client ; private readonly byte [ ] buffer = new byte [ 1024 ] ; /// < summary > /// Will accumulate data as it 's received /// < /summary > private string DataBuffer { get ; set ; } /// < summary > /// Store time of last data receipt . Need this in order to purge data after delay /// < /summary > private DateTime LastDataReceivedOn { get ; set ; } # endregion public BaseTCPSocketListener ( ) { // Preset all entries this.LastDataReceivedOn = DateTime.UtcNow ; this.DataBuffer = string.Empty ; } public void Init ( string config ) { // Parse info var bits = config.Split ( new [ ] { '| ' } , StringSplitOptions.RemoveEmptyEntries ) ; this.host = bits [ 0 ] ; var hostBytes = this.host.Split ( new [ ] { ' . ' } , StringSplitOptions.RemoveEmptyEntries ) ; var hostIp = new IPAddress ( new [ ] { byte.Parse ( hostBytes [ 0 ] ) , byte.Parse ( hostBytes [ 1 ] ) , byte.Parse ( hostBytes [ 2 ] ) , byte.Parse ( hostBytes [ 3 ] ) } ) ; this.port = int.Parse ( bits [ 1 ] ) ; this.delayToClearBufferSeconds = int.Parse ( bits [ 2 ] ) ; // Close open client if ( this.client ? .Client ! = null ) { this.client.Client.Disconnect ( true ) ; this.client = null ; } // Connect to client this.client = new TcpClient ( ) ; if ( ! this.client.ConnectAsync ( hostIp , this.port ) .Wait ( 2500 ) ) throw new Exception ( $ '' Failed to connect to { this.host } : { this.port } in allotted time '' ) ; this.EstablishReceiver ( ) ; } protected void DataReceived ( IAsyncResult result ) { // End the data receiving that the socket has done and get the number of bytes read . var bytesCount = 0 ; try { bytesCount = this.client.Client.EndReceive ( result ) ; } catch ( Exception ex ) { this.RaiseOnErrorToClient ( new Exception ( nameof ( this.DataReceived ) ) ) ; this.RaiseOnErrorToClient ( ex ) ; } // No data received , establish receiver and return if ( bytesCount == 0 ) { this.EstablishReceiver ( ) ; return ; } // Convert the data we have to a string . this.DataBuffer += Encoding.UTF8.GetString ( this.buffer , 0 , bytesCount ) ; // Record last time data received this.LastDataReceivedOn = DateTime.UtcNow ; this.RaiseOnDataReceivedToClient ( this.DataBuffer ) ; this.DataBuffer = string.Empty ; this.EstablishReceiver ( ) ; } private void EstablishReceiver ( ) { try { // Set up again to get the next chunk of data . this.client.Client.BeginReceive ( this.buffer , 0 , this.buffer.Length , SocketFlags.None , this.DataReceived , this.buffer ) ; } catch ( Exception ex ) { this.RaiseOnErrorToClient ( new Exception ( nameof ( this.EstablishReceiver ) ) ) ; this.RaiseOnErrorToClient ( ex ) ; } } private void RaiseOnErrorToClient ( Exception ex ) { if ( this.OnError == null ) return ; foreach ( Delegate d in this.OnError.GetInvocationList ( ) ) { var syncer = d.Target as ISynchronizeInvoke ; if ( syncer == null ) { d.DynamicInvoke ( this , ex ) ; } else { syncer.BeginInvoke ( d , new object [ ] { this , ex } ) ; } } } private void RaiseOnDataReceivedToClient ( string data ) { if ( this.OnDataReceived == null ) return ; foreach ( Delegate d in this.OnDataReceived.GetInvocationList ( ) ) { var syncer = d.Target as ISynchronizeInvoke ; if ( syncer == null ) { d.DynamicInvoke ( this , data ) ; } else { syncer.BeginInvoke ( d , new object [ ] { this , data } ) ; } } } } } private void ListenBaseButton_Click ( object sender , EventArgs e ) { if ( this.bsl == null ) { this.bsl = new BaseTCPSocketListener ( ) ; this.bsl.OnDataReceived += delegate ( object o , string s ) { this.DataTextBox.Text += $ '' Base : { DateTime.Now } - { s } '' + Environment.NewLine ; } ; this.bsl.OnError += delegate ( object o , Exception x ) { this.DataTextBox.Text += $ '' Base TCP receiver error : { DateTime.Now } - { x.Message } '' + Environment.NewLine ; } ; } try { this.bsl.Init ( `` 192.168.33.70|10001|10 '' ) ; this.DataTextBox.Text += `` BEGIN RECEIVING BSL data -- -- -- -- -- -- -- -- -- -- -- -- -- '' + Environment.NewLine ; } catch ( Exception exception ) { this.DataTextBox.Text += $ '' ERROR CONNECTING TO BSL -- -- -- -- -- -- { exception.Message } '' + Environment.NewLine ; } }"
"Step 6/10 : RUN dotnet publish -c Release -o out -- - > Running in 73c3f5fa9112Microsoft ( R ) Build Engine version 16.5.0+d4cbfca49 for .NET CoreCopyright ( C ) Microsoft Corporation . All rights reserved . Restore completed in 55.93 ms for /app/Backend.csproj./usr/share/dotnet/sdk/3.1.200/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets ( 234,5 ) : error NETSDK1064 : Package Microsoft.CodeAnalysis.Analyzers , version 2.9.8 was not found . It might have been deleted since NuGet restore . Otherwise , NuGet restore might have only partially completed , which might have been due to maximum path length restrictions . [ /app/Backend.csproj ] The command '/bin/sh -c dotnet publish -c Release -o out ' returned a non-zero code : 1 FROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build-envWORKDIR /app # Copy csproj and restore as distinct layersCOPY *.csproj ./RUN dotnet restore # Copy everything else and buildCOPY . ./RUN dotnet publish -c Release -o out # Build runtime imageFROM mcr.microsoft.com/dotnet/core/aspnet:3.1WORKDIR /appCOPY -- from=build-env /app/out . # Command used to start the projectENTRYPOINT [ `` dotnet '' , `` Project.dll '' ] < PackageReference Include= '' Microsoft.AspNetCore.Authentication.Facebook '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Authentication.Google '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Identity.EntityFrameworkCore '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.AspNetCore.Identity.UI '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.CodeAnalysis.Analyzers '' Version= '' 2.9.8 '' / > < PackageReference Include= '' Microsoft.CodeAnalysis.FxCopAnalyzers '' Version= '' 2.9.8 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.Sqlite '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.SqlServer '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.EntityFrameworkCore.Tools '' Version= '' 3.1.2 '' / > < PackageReference Include= '' Microsoft.VisualStudio.Web.CodeGeneration.Design '' Version= '' 3.1.1 '' / > Step 4/10 : RUN dotnet restore -- - > Running in 1f26d6ac4244 Restore completed in 47.46 sec for /app/Backend.csproj.Removing intermediate container 1f26d6ac4244 -- - > f1a2994a2704"
"FileInfo file = new FileInfo ( `` C : \\Temp\\CSVTest.csv '' ) ; List < dynamic > dynObj ; using ( var reader = new StreamReader ( file.FullName ) ) using ( var csv = new CsvReader ( reader ) ) { dynObj = csv.GetRecords < dynamic > ( ) .ToList ( ) ; foreach ( var d in dynObj ) { var properties = d.GetType ( ) .GetProperties ( ) ; foreach ( var property in properties ) { var PropertyName = property.Name ; var PropetyValue = d.GetType ( ) .GetProperty ( property.Name ) .GetValue ( d , null ) ; } } } Id , Name , Barnd1 , one , abc2 , two , xyz"
namespace MyProgram.Testing { public class Test1 { public void TestMethod ( ) { String actualType = this.GetType ( ) .FullName.ToString ( ) ; return ; } public static String GetInheritedClassName ( ) { return System.Reflection.MethodBase.GetCurrentMethod ( ) .ReflectedType.FullName ; } } public class Test2 : Test1 { } public class Test3 { String test2ClassName = Test2.GetInheritedClassName ( ) ; } }
"public class ExpiringLazy < T > { private readonly object valueGetLock = new object ( ) ; private readonly Func < T > valueFactory ; private readonly TimeSpan timeout ; private T cachedValue ; private DateTime cachedTime ; public T Value { get { Thread.MemoryBarrier ( ) ; if ( cachedTime.Equals ( default ( DateTime ) ) || DateTime.UtcNow > cachedTime + timeout ) { lock ( valueGetLock ) { if ( cachedTime.Equals ( default ( DateTime ) ) || DateTime.UtcNow > cachedTime + timeout ) { cachedValue = valueFactory ( ) ; Thread.MemoryBarrier ( ) ; cachedTime = DateTime.UtcNow ; } } } return cachedValue ; } } public ExpiringLazy ( Func < T > valueFactory , TimeSpan timeout ) { if ( valueFactory == null ) throw new ArgumentNullException ( nameof ( valueFactory ) ) ; this.valueFactory = valueFactory ; this.timeout = timeout ; } }"
"[ HttpPost ] [ Route ( `` RemoveUserFromRole '' ) ] public async Task < IHttpActionResult > RemoveUserFromRole ( UserRolesViewModel model ) { if ( ! ModelState.IsValid ) return BadRequest ( ModelState ) ; var result = await UserManager.RemoveUserFromRolesAsync ( model.UserId , model.RoleNames ) ; if ( result.Errors.Any ( ) ) return InternalServerError ( ) ; return Ok ( ) ; } public class UserRolesViewModel { [ Required ] public string UserId { get ; set ; } [ Required ] public IList < string > RoleNames { get ; set ; } } public virtual async Task < IdentityResult > RemoveUserFromRolesAsync ( string userId , IList < string > roles ) { var userRoleStore = ( IUserRoleStore < ApplicationUser , string > ) Store ; var user = await FindByIdAsync ( userId ) .ConfigureAwait ( false ) ; if ( user == null ) throw new InvalidOperationException ( `` Invalid user Id '' ) ; var userRoles = await userRoleStore.GetRolesAsync ( user ) .ConfigureAwait ( false ) ; foreach ( var role in roles.Where ( userRoles.Contains ) ) await userRoleStore.RemoveFromRoleAsync ( user , role ) .ConfigureAwait ( false ) ; return await UpdateAsync ( user ) .ConfigureAwait ( false ) ; } { `` userId '' : `` 0d5f97e4-65a0-43ad-b889-0af98a7ff326 '' , `` roleNames '' : [ `` User '' ] } { `` userId '' : `` 0d5f97e4-65a0-43ad-b889-0af98a7ff326 '' , `` roleNames '' : [ `` Mod '' ] }"
void Main ( ) { int x = 7 ; F ( x ) ; } void F ( double a ) { a.Dump ( `` double '' ) ; } void F ( float a ) { a.Dump ( `` float '' ) ; } void Main ( ) { int x = 7 ; F ( x ) ; } void F ( double a ) { a.Dump ( `` double '' ) ; } void F ( decimal a ) { a.Dump ( `` decimal '' ) ; }
"public class Order : IComparable { private string _StockCode ; private bool _BidSide ; private int _Volume ; private decimal _Price ; private int _ExchangeOrderId ; public int CompareTo ( Order other ) { if ( _BidSide ! = other.BidSide ) { return _BidSide ? 1 : -1 ; } return decimal.Compare ( _Price , other.Price ) ; } }"
namespace test { class Program { static void Main ( string [ ] args ) { var serviceProvider = new ServiceCollection ( ) .AddLogging ( config = > config.ClearProviders ( ) .AddConsole ( ) .SetMinimumLevel ( LogLevel.Trace ) ) .BuildServiceProvider ( ) ; //configure console logging serviceProvider .GetService < ILoggerFactory > ( ) ; var logger = serviceProvider.GetService < ILoggerFactory > ( ) .CreateLogger < Program > ( ) ; logger.LogDebug ( `` All done ! `` ) ; Console.Write ( `` Yup '' ) ; } } static void Main ( string [ ] args ) { using ( var serviceProvider = new ServiceCollection ( ) .AddLogging ( config = > config.ClearProviders ( ) .AddConsole ( ) .SetMinimumLevel ( LogLevel.Trace ) ) .BuildServiceProvider ( ) ) { //configure console logging serviceProvider .GetService < ILoggerFactory > ( ) ; var logger = serviceProvider.GetService < ILoggerFactory > ( ) .CreateLogger < Program > ( ) ; // run app logic logger.LogDebug ( `` All done ! `` ) ; } Console.Write ( `` Yup '' ) ; }
private static async Task < string > GetPostAsync ( int id ) { var client = new HttpClient ( ) ; var response = await client.GetAsync ( $ '' https : //jsonplaceholder.typicode.com/posts/ { id } '' ) ; return await response.Content.ReadAsStringAsync ( ) ; } private static async Task TaskWhenAll ( IEnumerable < int > postIds ) { var tasks = postIds.Select ( GetPostAsync ) ; await Task.WhenAll ( tasks ) ; } private static async Task MultipleAwait ( IEnumerable < int > postIds ) { foreach ( var postId in postIds ) { await GetPostAsync ( postId ) ; } }
"void HandleOnRequestPlayMusic ( object sender , UrlEventArgs e ) { var url = Utils.UrlFromString ( e.Url ) ; string oldUrl = `` '' ; if ( musicPlayer ! = null ) { oldUrl = musicPlayer.Url.AbsoluteString ; KillAudioPlayer ( ) ; // no problems killing the audio player from here } if ( oldUrl ! = url.AbsoluteString ) { musicPlayer = AVAudioPlayer.FromUrl ( url ) ; musicPlayer.FinishedPlaying += HandleAudioFinished ; musicPlayer.Play ( ) ; } } void HandleAudioFinished ( object sender , AVStatusEventArgs e ) { KillAudioPlayer ( ) ; // killing audio player from here causes app to crash } void KillAudioPlayer ( ) { if ( musicPlayer ! = null ) { InvokeOnMainThread ( ( ) = > { musicPlayer.Stop ( ) ; musicPlayer.FinishedPlaying -= HandleAudioFinished ; musicPlayer.Dispose ( ) ; musicPlayer = null ; } ) ; } }"
"public class ImmutableObject < T > { private readonly Func < IEnumerable < KeyValuePair < string , object > > > initContainer ; protected ImmutableObject ( ) { } protected ImmutableObject ( IEnumerable < KeyValuePair < string , object > > properties ) { var fields = GetType ( ) .GetFields ( ) .Where ( f= > f.IsPublic ) ; var fieldsAndValues = from fieldInfo in fields join keyValuePair in properties on fieldInfo.Name.ToLower ( ) equals keyValuePair.Key.ToLower ( ) select new { fieldInfo , keyValuePair.Value } ; fieldsAndValues.ToList ( ) .ForEach ( fv= > fv.fieldInfo.SetValue ( this , fv.Value ) ) ; } protected ImmutableObject ( Func < IEnumerable < KeyValuePair < string , object > > > init ) { initContainer = init ; } protected T setProperty ( string propertyName , object propertyValue , bool lazy = true ) { Func < IEnumerable < KeyValuePair < string , object > > > mergeFunc = delegate { var propertyDict = initContainer == null ? ObjectToDictonary ( ) : initContainer ( ) ; return propertyDict.Select ( p = > p.Key == propertyName ? new KeyValuePair < string , object > ( propertyName , propertyValue ) : p ) .ToList ( ) ; } ; var containerConstructor = typeof ( T ) .GetConstructors ( ) .First ( ce = > ce.GetParameters ( ) .Count ( ) == 1 & & ce.GetParameters ( ) [ 0 ] .ParameterType.Name == `` Func ` 1 '' ) ; return ( T ) ( lazy ? containerConstructor.Invoke ( new [ ] { mergeFunc } ) : DictonaryToObject < T > ( mergeFunc ( ) ) ) ; } private IEnumerable < KeyValuePair < string , object > > ObjectToDictonary ( ) { var fields = GetType ( ) .GetFields ( ) .Where ( f= > f.IsPublic ) ; return fields.Select ( f= > new KeyValuePair < string , object > ( f.Name , f.GetValue ( this ) ) ) .ToList ( ) ; } private static object DictonaryToObject < T > ( IEnumerable < KeyValuePair < string , object > > objectProperties ) { var mainConstructor = typeof ( T ) .GetConstructors ( ) .First ( c = > c.GetParameters ( ) .Count ( ) == 1 & & c.GetParameters ( ) .Any ( p = > p.ParameterType.Name == `` IEnumerable ` 1 '' ) ) ; return mainConstructor.Invoke ( new [ ] { objectProperties } ) ; } public T ToObject ( ) { var properties = initContainer == null ? ObjectToDictonary ( ) : initContainer ( ) ; return ( T ) DictonaryToObject < T > ( properties ) ; } } public class State : ImmutableObject < State > { public State ( ) { } public State ( IEnumerable < KeyValuePair < string , object > > properties ) : base ( properties ) { } public State ( Func < IEnumerable < KeyValuePair < string , object > > > func ) : base ( func ) { } public readonly int SomeInt ; public State someInt ( int someInt ) { return setProperty ( `` SomeInt '' , someInt ) ; } public readonly string SomeString ; public State someString ( string someString ) { return setProperty ( `` SomeString '' , someString ) ; } } //creating new empty objectvar state = new State ( ) ; // Set fields , will return an empty object with the `` chained methods '' .var s2 = state.someInt ( 3 ) .someString ( `` a string '' ) ; // Resolves all the `` chained methods '' and initialize the object setting all the fields by reflection.var s3 = s2.ToObject ( ) ;"
"< ? xml version= '' 1.0 '' encoding='UTF-8 ' standalone='no ' ? > < ! DOCTYPE score-partwise PUBLIC `` -//Recordare//DTD MusicXML 2.0 Partwise//EN '' `` http : //www.musicxml.org/dtds/partwise.dtd '' > < score-partwise version= '' 2.0 '' > < work > ... < /work > ... < /score-partwise > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' no '' ? > < ! DOCTYPE score-timewise PUBLIC `` -//Recordare//DTD MusicXML 2.0 Timewise//EN '' `` http : //www.musicxml.org/dtds/timewise.dtd '' > < score-timewise version= '' 2.0 '' > < work > ... < /work > ... < /score-timewise > using ( var fileStream = new FileStream ( openFileDialog.FileName , FileMode.Open ) ) { var xmlSerializer = new XmlSerializer ( typeof ( ScorePartwise ) ) ; var result = ( ScorePartwise ) xmlSerializer.Deserialize ( fileStream ) ; }"
"var actor = context.Child ( actorName ) ; if ( actor.Equals ( ActorRefs.Nobody ) ) { actor = CreateNewActor ( ) ; } Context.Stop ( actor ) actor = context.Child ( actorName ) ; // what do we get here , same actor or ActorRefs.Nobody ?"
"< section name= '' log4net '' type= '' log4net.Config.Log4NetConfigurationSectionHandler , log4net '' / >"
"using System ; using System.Collections.Generic ; namespace Deconstruct { class Test { public int A { get ; set ; } = 0 ; public int B { get ; set ; } = 0 ; public void Deconstruct ( out int a , out int b ) { a = this.A ; b = this.B ; } } class Program { static void Main ( string [ ] args ) { var test = new Test ( ) ; var ( a , b ) = test ; var testList = new List < Test > ( ) ; var tupleList = new List < ( int , int ) > ( ) ; tupleList = testList ; // ERROR HERE ... . } } }"
"private void mybutton_Click ( object sender , EventArgs e ) { // do some processing here } private void mycombobox_SelectedIndexChanged ( object sender , EventArgs e ) { mybutton_Click ( sender , e ) ; // this is the line which pops up the dialog }"
throw new Exception ( `` Test Exception '' ) ;
"< Window x : Class= '' View.Settings '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' Height= '' 570 '' Width= '' 800 '' WindowStartupLocation= '' CenterOwner '' Background= '' { StaticResource DarkGrayBackground } '' ResizeMode= '' CanResize '' WindowStyle= '' SingleBorderWindow '' Title= '' Settings '' WindowState= '' Normal '' > < WindowChrome.WindowChrome > < WindowChrome CaptionHeight= '' 0 '' CornerRadius= '' 0 '' GlassFrameThickness= '' 1 '' UseAeroCaptionButtons= '' False '' ResizeBorderThickness= '' 5 '' NonClientFrameEdges= '' None '' / > < /WindowChrome.WindowChrome > < Border BorderBrush= '' Black '' BorderThickness= '' 1 '' > < DockPanel HorizontalAlignment= '' Stretch '' LastChildFill= '' True '' Margin= '' 0,0,0,0 '' VerticalAlignment= '' Stretch '' > < ! -- TitleBar -- > < Border DockPanel.Dock= '' Top '' BorderBrush= '' { StaticResource GrayBorder } '' BorderThickness= '' 0,0,0,1 '' > < Grid Height= '' 40 '' Background= '' { StaticResource WhiteBackground } '' > < DockPanel LastChildFill= '' False '' > < Image DockPanel.Dock= '' Left '' Margin= '' 0,0,5,0 '' > < /Image > < Label DockPanel.Dock= '' Left '' Content= '' { DynamicResource settings } '' Margin= '' 0,0,0,0 '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' > < /Label > < Button DockPanel.Dock= '' Right '' Style= '' { StaticResource CloseButton } '' x : Name= '' CloseBtn '' / > < /DockPanel > < /Grid > < /Border > < ! -- Left Menu -- > < Border DockPanel.Dock= '' Left '' Width= '' 180 '' Background= '' { StaticResource GrayBackground } '' BorderBrush= '' { StaticResource GrayBorder } '' BorderThickness= '' 0,0,1,0 '' > < DockPanel Margin= '' 0,40,0,0 '' Width= '' 180 '' LastChildFill= '' False '' > < Button DockPanel.Dock= '' Top '' Style= '' { StaticResource BigGrayButton } '' Content= '' { DynamicResource general } '' / > < /DockPanel > < /Border > < ! -- Bottom bar -- > < Border DockPanel.Dock= '' Bottom '' BorderBrush= '' { StaticResource GrayBorder } '' BorderThickness= '' 0,1,0,0 '' Height= '' 40 '' Background= '' { StaticResource WhiteBackground } '' > < DockPanel LastChildFill= '' False '' > < /DockPanel > < /Border > < ! -- Main Page -- > < ScrollViewer Background= '' { StaticResource DarkGrayBackground } '' IsTabStop= '' True '' HorizontalScrollBarVisibility= '' Auto '' VerticalScrollBarVisibility= '' Auto '' DockPanel.Dock= '' Top '' > < DockPanel LastChildFill= '' False '' Margin= '' 10,0,10,10 '' > < Label DockPanel.Dock= '' Top '' Height= '' 40 '' FontSize= '' 16 '' FontWeight= '' SemiBold '' VerticalContentAlignment= '' Center '' Content= '' { DynamicResource general } '' / > < Frame DockPanel.Dock= '' top '' x : Name= '' MainFrame '' > < /Frame > < /DockPanel > < /ScrollViewer > < /DockPanel > < /Border >"
"public SomeClass DoSomething ( string param1 , [ Optional , DefaultParameterValue ( `` '' ) ] string optional ) public SomeClass DoSomething ( string param1 , string optional = `` '' )"
"hello ( pause ) world ( pause ) ! ( pause ) [ ' h ' , ' e ' , ' l ' , ' l ' , ' o ' ] [ ' w ' , ' o ' , ' r ' , ' l ' , 'd ' ] [ ' ! ' ] _input.Buffer ( ( ) = > _input.Delay ( TimeSpan.FromSeconds ( 1 ) ) ) .ObserveOnDispatcher ( ) .Subscribe ( OnCompleteInput ) ;"
"var pc = new PerformanceCounter ( `` ASP.NET '' , `` Requests Current '' , `` '' , `` myRemoteMachine '' ) ; pc.NextValue ( ) ; // returns always 0pc.NextValue ( ) ; // returns always 0"
"class EntityFrameworkElmahErrorLog { public EntityFrameworkElmahErrorLog ( IDictionary config ) : this ( ) { } public override ErrorLogEntry GetError ( string id ) { using ( var context = new MyContext ( ) ) { var intId = Int64.Parse ( id , CultureInfo.InvariantCulture ) ; var item = context.ErrorLog.Single ( x = > x.Id == intId ) ; return new ErrorLogEntry ( this , id , ErrorXml.DecodeString ( item.Details ) ) ; } } // etc . } < errorLog type= '' MyProject.EntityFrameworkErrorLog , MyProject '' / >"
// module level declarationSocket _client ; void ProcessSocket ( ) { _client = GetSocketFromSomewhere ( ) ; using ( _client ) { DoStuff ( ) ; // receive and send data Close ( ) ; } } void Close ( ) { _client.Close ( ) ; _client = null ; }
"public class DirectionClass { public bool Forwards { get ; set ; } public double Sign { get ; set ; } public EDirection { get ; set ; } //plus associated constructor overloads , implementing IEquatable , etc . } public static implicit operator DirectionClass ( double sign ) ; public static implicit operator DirectionClass ( bool forwards ) ; //etc.."
"private void button1_Click ( object sender , EventArgs e ) { Debug.WriteLine ( `` click ! `` ) ; } private void treeView1_BeforeExpand ( object sender , TreeViewCancelEventArgs e ) { Debug.WriteLine ( `` Hello ! `` ) ; } treeView1.BeforeExpand += new TreeViewCancelEventHandler ( anyMethodNameYouLike ) ;"
"@ model My.PageModel @ My.CustomControl ( new CustomControlModel { AreaTitle = `` Details '' , RenderSideContent = ( ) = > { < div > @ using ( My.CustomWrapper ( `` General '' ) ) { My.BasicControl ( Model.Controls [ 0 ] ) } < /div > } } ) < div > @ Model.AreaTitle < div class= '' my-custom-content '' > @ Model.RenderSideContent ( ) < /div > < /div >"
setAuthorFilters ( selectedAuthors ) { selectedAuthors.forEach ( x = > this.setAuthorFilter ( x ) ) ; this.updateUrl ( ) ; } setAuthorFilter ( selectedAuthor ) { this.vm.SelectAuthors = this.vm.SelectAuthors.filter ( x = > x.id ! == selectedAuthor.id ) ; this.vm.PreviousSelectedAuthors = this.vm.CurrentSelectedAuthors.slice ( ) ; this.vm.CurrentSelectedAuthors.push ( selectedAuthor ) ; } setAuthorFilters ( selectedAuthors ) { foreach ( var selectedAuthor in selectedAuthors ) { this.vm.SelectAuthors = this.vm.SelectAuthors.filter ( x = > x.id ! == selectedAuthor.id ) ; this.vm.PreviousSelectedAuthors = this.vm.CurrentSelectedAuthors.slice ( ) ; this.vm.CurrentSelectedAuthors.push ( selectedAuthor ) ; } this.updateUrl ( ) ; }
"HttpWebRequest webRequest = ( HttpWebRequest ) WebRequest.Create ( url ) ; var result = webRequest.BeginGetResponse ( internalCallback , userState ) ; if ( result.CompletedSynchronously ) { Trace.Error ( `` WEBREQUEST COMPLETED SYNC ! `` ) ; } if ( this.m_Free & & this.m_WriteDone & & ! forcedsubmit & & ( this.m_WriteList.Count == 0 || request.Pipelined & & ! request.HasEntityBody & & ( this.m_CanPipeline & & this.m_Pipelining ) & & ! this.m_IsPipelinePaused ) ) { this.m_Free = false ; needReConnect = this.StartRequest ( request , true ) ; if ( needReConnect == TriState.Unspecified ) { flag = true ; this.PrepareCloseConnectionSocket ( ref returnResult ) ; this.Close ( 0 ) ; } }"
"public sealed class Order { public Order ( ) { Items = new List < OrderItem > ( ) ; } public List < OrderItem > Items { get ; private set ; } } public sealed class OrderItem { } var order = new Order { Items = { new OrderItem ( ) , new OrderItem ( ) } } ;"
"var list = new List < string > ( ) { `` a '' , `` b '' , `` c '' } ; var created = from i in list select new A ( ) ; class A { public string Label ; } foreach ( var c in created ) { c.Label = `` Set '' ; } Assert.AreEqual ( `` Set '' , created.ElementAt ( 2 ) .Label ) ;"
"Assert.That ( ( ) = > someObject.MethodThrows ( ) , Throws.TypeOf < SomeException > ( ) .With.Property ( `` Data '' ) .Count.EqualTo ( 3 ) , /* Data is a collection */ `` Exception expected '' ) ; Assert.AreEqual ( 3 , Assert.Throws < SomeException > ( ( ) = > someObject.MethodThrows ( ) , `` Exception expected '' ) .Data.Count ) ;"
"public class InterlockedBool { private int _value ; public bool Value { get { return _value > 0 ; } set { System.Threading.Interlocked.Exchange ( ref _value , value ? 1 : 0 ) ; } } public static bool operator == ( InterlockedBool obj1 , bool obj2 ) { return obj1.Value.Equals ( obj2 ) ; } public static bool operator ! = ( InterlockedBool obj1 , bool obj2 ) { return ! obj1.Value.Equals ( obj2 ) ; } public override bool Equals ( bool obj ) { return this.Value.Equals ( obj ) ; } } InterlockedBool ib = new InterlockedBool ( ) ; if ( ib ) { } if ( ib == true ) { }"
if ( object ) if ( object ! = null )
"public ActionResult TwoDropDownList ( ) { HotelContext H = new HotelContext ( ) ; ViewBag.DropDownListOne = new SelectList ( H.Continent.ToList ( ) , `` Id '' , `` Name '' ) ; return View ( ) ; } [ HttpPost ] public JsonResult UpdateCountryDropDownList ( int ContinentId ) { HotelContext H = new HotelContext ( ) ; List < SelectListItem > CountryNames = new List < SelectListItem > ( ) ; List < Country > Co = H.Country.Where ( x = > x.ContinentId == ContinentId ) .ToList ( ) ; Co.ForEach ( x = > { CountryNames.Add ( new SelectListItem { Text = x.Name , Value = x.Id.ToString ( ) } ) ; } ) ; return Json ( CountryNames , JsonRequestBehavior.AllowGet ) ; } @ model Hotel.Models.Continent < script > $ ( document ) .ready ( function ( ) { $ ( `` # Name '' ) .change ( function ( ) { var ContinentoId = $ ( this ) .val ( ) ; $ .ajax ( { type : `` POST '' , dataType : `` json '' , data : { ContinentId : ContinentoId } , url : ' @ Url.Action ( `` UpdateCountryDropDownList '' , '' Home '' ) ' , success : function ( result ) { var Country = `` < select id='ddlCountry ' > '' ; Country = Country + ' < option value= '' '' > -- Select -- < /option > ' ; for ( var i = 0 ; i < result.length ; i++ ) { Country = Country + ' < option value= ' + result [ i ] .Value + ' > ' + result [ i ] .Text + ' < /option > ' ; } Country = Country + ' < /select > ' ; $ ( ' # Countries ' ) .html ( Country ) ; } , error : function ( xhr , ajaxOptions , thrownError ) { console.log ( arguments ) } } ) ; } ) ; } ) < /script > @ using ( Html.BeginForm ( ) ) { SelectList se = ViewBag.DropDownListOne ; @ Html.DropDownListFor ( x= > x.Name , se , '' -- Select -- '' ) < div id = '' Countries '' > @ Html.DropDownList ( `` ddlCountry '' , new List < SelectListItem > ( ) , '' -- Select -- '' ) < /div > < input type= '' submit '' value= '' submit '' style= '' margin-top:100px ; '' / > } [ HttpPost ] public string TwoDropDownList ( string Name , string ddlCountry ) { if ( string.IsNullOrEmpty ( Name ) || string.IsNullOrEmpty ( ddlCountry ) ) { return ( `` you must select Both '' ) ; } else return ( `` everything is working fine '' ) ; }"
"class MainClass { public static async Task < int > UsingAsyncModifier ( ) { return 10 ; } public static Task < int > UsingTaskCompletionSource ( ) { TaskCompletionSource < int > tcs = new TaskCompletionSource < int > ( ) ; tcs.SetResult ( 10 ) ; return tcs.Task ; } public static Task < int > UsingTaskFromResult ( ) { return Task.FromResult ( 10 ) ; } public static void Main ( string [ ] args ) { DateTime t = DateTime.Now ; const int repeat = 10000 ; // Results volatile while repeat grows . Console.WriteLine ( `` Repeat { 0 } times . `` , repeat ) ; int j = 0 ; for ( int i = 0 ; i < repeat ; i++ ) { j += UsingAsyncModifier ( ) .Result ; } Console.WriteLine ( `` UsingAsyncModifier : { 0 } '' , DateTime.Now - t ) ; t = DateTime.Now ; for ( int i = 0 ; i < repeat ; i++ ) { j += UsingTaskCompletionSource ( ) .Result ; } Console.WriteLine ( `` UsingTaskCompletionSource : { 0 } '' , DateTime.Now - t ) ; t = DateTime.Now ; for ( int i = 0 ; i < repeat ; i++ ) { j += UsingTaskFromResult ( ) .Result ; } Console.WriteLine ( `` UsingTaskFromResult : { 0 } '' , DateTime.Now - t ) ; } } Repeat 10000 times.UsingAsyncModifier : 00:00:00.1043980UsingTaskCompletionSource : 00:00:00.0095270UsingTaskFromResult : 00:00:00.0089460 Repeat 100000 times.UsingAsyncModifier : 00:00:00.1676000UsingTaskCompletionSource : 00:00:00.0872020UsingTaskFromResult : 00:00:00.0870180 Repeat 1000000 times.UsingAsyncModifier : 00:00:00.8458490UsingTaskCompletionSource : 00:00:00.8870980UsingTaskFromResult : 00:00:00.9027320"
void ReadCsv ( IEnumerable < string > records ) { var headerRecord = records.Take ( 1 ) ; var dataRecords = ? ? ? ReadDataRecords ( dataRecords ) ; } void ReadDataRecords ( IEnumerable < string > records ) { // ... }
//2016-01-22​T17:34:52.648Zvar tick1 = 635890808926480754 ; //2016-01-22​T17:34:52.000Zvar tick2 = 635890808920000000 ;
System.Threading.Monitor.Enter ( Lock ) ; try { filter.Execute ( ) ; //get data from database Request.Clear ( ) ; return filter.XML ; //create xml and return to client } finally { System.Threading.Monitor.Exit ( Lock ) ; }
"public void Hit ( int npage ) { bool fetch = false ; lock ( pagesHit ) { if ( ! pagesHit.Contains ( npage ) ) { pagesHit.Add ( npage ) ; fetch = true ; } } if ( fetch ) { pageFiller.Completed += ( s , e ) = > { lock ( pagesHit ) { pagesHit.Remove ( npage ) ; } } ; } }"
"con = new SqlConnection ( `` Data Source= ... .. '' ) ; con.FireInfoMessageEventOnUserErrors = true ; con.InfoMessage += new SqlInfoMessageEventHandler ( myInfoMessage ) ; void myInfoMessage ( object sender , SqlInfoMessageEventArgs e ) { foreach ( SqlError err in e.Errors ) { errors += err.LineNumber.ToString ( ) + `` : `` + err.Message + `` \r\n '' ; } }"
"static void Main ( string [ ] args ) { var values = new List < int > ( ) { 1 , 2 , 3 , 4 , 5 } ; var funcs = new List < Func < int > > ( ) ; foreach ( var v in values ) { funcs.Add ( ( ) = > v * 10 ) ; } foreach ( var f in funcs ) { Console.WriteLine ( f ( ) ) ; } Console.ReadKey ( ) ; } VS 2010 == C # 4VS 2013 == C # 5"
"var l = new List < ( string name , int ID ) > ( ) { ( `` Bob '' , 1 ) , ( `` Mary '' , 2 ) , ( `` Beth '' , 3 ) } ; listBox1.DataSource = l ; listBox1.DisplayMember = `` name '' ; listBox1.DisplayMember = `` Item1 '' ; listBox1.ValueMember = `` Item3 '' ; // optional"
"List < int > numbers = new List < int > ( ) { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; IEnumerable < int > evens = numbers.Where ( ( x ) = > { return x % 2 == 0 ; } ) ; IEnumerable < int > evens2 = numbers.Where < int > ( ( x ) = > { return x % 2 == 0 ; } ) ;"
"public string SaveVideoInformation ( string ID , string videoName ) { string Result = null ; try { Result = Insert ( ID , videoName ) ; Process [ ] pname = Process.GetProcessesByName ( `` AutoRunVideoWaterMarkingTook '' ) ; if ( pname.Length == 0 ) { Result += `` | Trying to run Process '' ; try { Process process = Process.Start ( @ '' ~\Debug\AutoRunVideoWaterMarkingTook.exe '' ) ; Result += `` | Process Ran Successfully '' ; } catch ( Exception ex ) { Result += `` | Exception While Running the process '' ; throw new Exception ( `` Unable to start Process ) ; } } else { Result += `` |Process Already Running '' ; } } catch ( Exception ex ) { Result = `` Not Done , '' + ex.Message ; } return Result ; }"
var tab = new int [ 10 ] ;
"namespace TestingPacman { class Firebolt { Bitmap firebolt0 = null ; Bitmap firebolt1 = null ; public Point fireboltposition ; int fireboltwidth = 0 ; int fireboltheight = 0 ; public Firebolt ( int x , int y ) { fireboltposition.X = x ; fireboltposition.Y = y ; if ( firebolt0 == null ) firebolt0 = new Bitmap ( `` firebolt0.gif '' ) ; if ( firebolt1 == null ) firebolt1 = new Bitmap ( `` firebolt1.gif '' ) ; int fireboltwidth = firebolt0.Width ; int fireboltheight = firebolt0.Height ; } public Rectangle GetFrame ( ) { Rectangle Labelrec = new Rectangle ( fireboltposition.X , fireboltposition.Y , fireboltwidth , fireboltheight ) ; return Labelrec ; } public void Draw ( Graphics g ) { Rectangle fireboltdecR = new Rectangle ( fireboltposition.X , fireboltposition.Y , fireboltwidth , fireboltheight ) ; Rectangle fireboltsecR = new Rectangle ( 0 , 0 , fireboltwidth , fireboltheight ) ; g.DrawImage ( firebolt0 , fireboltdecR , fireboltsecR , GraphicsUnit.Pixel ) ; } } namespace TestingPacman { public partial class Form1 : Form { // int inc = 0 ; Eater TheEater = new Eater ( 100,100 ) ; TimeDisplay time = new TimeDisplay ( ) ; int sec = 0 ; Score score = new Score ( ) ; int countofeaten=0 ; Random r = new Random ( ) ; private List < Label > redlabels = new List < Label > ( ) ; private List < Label > bluelabels = new List < Label > ( ) ; Firebolt firebolt ; List < Firebolt > listfirebolt = new List < Firebolt > ( ) ; private void Form1_Paint ( object sender , PaintEventArgs e ) { Graphics g = e.Graphics ; g.FillRectangle ( Brushes.White , 0 , 0 , this.ClientRectangle.Width , ClientRectangle.Height ) ; TheEater.Draw ( g ) ; foreach ( Firebolt f in listfirebolt ) f.Draw ( g ) ; } private void Form1_KeyDown ( object sender , KeyEventArgs e ) { timer1.Enabled = true ; string result = e.KeyData.ToString ( ) ; Invalidate ( TheEater.GetFrame ( ) ) ; switch ( result ) { case `` D1 '' : if ( TheEater.eaterwidth > = 9 & & TheEater.eaterheight > = 9 ) { TheEater.eaterwidth++ ; TheEater.eaterheight++ ; } break ; case `` F '' : listfirebolt.Add ( firebolt = new Firebolt ( TheEater.Position.X , TheEater.Position.Y ) ) ; Invalidate ( firebolt.GetFrame ( ) ) ; break ; case `` D2 '' : if ( TheEater.eaterwidth > 10 & & TheEater.eaterheight > 10 ) { TheEater.eaterwidth -- ; TheEater.eaterheight -- ; } break ; case `` D9 '' : TheEater.inc=TheEater.inc+2 ; break ; case `` D0 '' : TheEater.inc=TheEater.inc-2 ; break ; case `` Left '' : TheEater.MoveLeft ( ClientRectangle ) ; Invalidate ( TheEater.GetFrame ( ) ) ; break ; case `` Right '' : TheEater.MoveRight ( ClientRectangle ) ; Invalidate ( TheEater.GetFrame ( ) ) ; break ; case `` Up '' : TheEater.MoveUp ( ClientRectangle ) ; Invalidate ( TheEater.GetFrame ( ) ) ; break ; case `` Down '' : TheEater.MoveDown ( ClientRectangle ) ; Invalidate ( TheEater.GetFrame ( ) ) ; break ; default : break ; } RemoveifIntersected ( ) ; } label2.Text = score.Iskore.ToString ( ) ; } private void timer1_Tick ( object sender , EventArgs e ) { label1.Text = time.FormatTime ( sec++ ) ; } } }"
"[ TestFixture ] public class ExecutionTest { public void BadMethod ( ) { throw new Exception ( `` Something bad happened '' ) ; } [ Test ] public void TestBadMethod ( ) { // Want this , but it wo n't work ! ! // BadMethod.Execute ( ) .IgnoreExceptions ( ) ; // Ick ( ( Action ) BadMethod ) .Exec ( ) .IgnoreExceptions ( ) ; // Still ick ( ( Action ) BadMethod ) .IgnoreExceptions ( ) ; // Do not want ExtensionMethods.Exec ( BadMethod ) .IgnoreExceptions ( ) ; // Better but still meh this.Exec ( BadMethod ) .IgnoreExceptions ( ) ; } } public static class ExtensionMethods { public static Action Exec ( this Action action ) { return action ; } public static Action Exec ( this object obj , Action action ) { return action ; } public static void IgnoreExceptions ( this Action action ) { try { action ( ) ; } catch { } } }"
"using System ; using System.IO ; using System.Windows.Forms ; namespace T5ShortestTime { static class Program { /// < summary > /// The main entry point for the application . /// < /summary > [ STAThread ] static void Main ( ) { try { Application.EnableVisualStyles ( ) ; Application.SetCompatibleTextRenderingDefault ( false ) ; Application.Run ( new T5ShortestTimeForm ( ) ) ; } catch ( Exception e ) { string errordir = Path.Combine ( Application.StartupPath , `` errorlog '' ) ; string errorlog = Path.Combine ( errordir , DateTime.Now.ToString ( `` yyyyMMdd_HHmmss_fff '' ) + `` .txt '' ) ; if ( ! Directory.Exists ( errordir ) ) Directory.CreateDirectory ( errordir ) ; File.WriteAllText ( errorlog , e.ToString ( ) ) ; } } } } Problem signature : Problem Event Name : CLR20r3 Problem Signature 01 : T5ShortestTime.exe Problem Signature 02 : 2.8.3.1 Problem Signature 03 : 5743e646 Problem Signature 04 : T5ShortestTime Problem Signature 05 : 2.8.3.1 Problem Signature 06 : 5743e646 Problem Signature 07 : 182 Problem Signature 08 : 1b Problem Signature 09 : System.NullReferenceException OS Version : 6.3.9600.2.0.0.272.7 Locale ID : 1033 Additional Information 1 : bb91 Additional Information 2 : bb91a371df830534902ec94577ebb4a3 Additional Information 3 : aba1 Additional Information 4 : aba1ed7202d796d19b974eec93d89ec2Read our privacy statement online : http : //go.microsoft.com/fwlink/ ? linkid=280262If the online privacy statement is not available , please read our privacy statement offline : C : \Windows\system32\en-US\erofflps.txt"
"context.Wines.AddOrUpdate ( new Wine ( ) { Id = 1 , Name = `` Шардоне '' , etc ... ... ... ... ... ... ... ... ... ... ... ... ... . var db = new WineSystemDbContext ( ) ; var ShardoneWine = new Wine { Name = `` Шардоне } ; db.Wines.Add ( ShardoneWine ) ;"
"void HandlerName ( object sender , HandlerEventArgs e ) { throw new NotImplementedException ( ) ; } private void HandlerName ( object sender , HandlerEventArgs args ) { throw new NotImplementedException ( ) ; }"
var itemsToday = DatabaseContext.Items .Where ( f = > f.StartTime > DateTime.Today & & f.StartTime < DateTime.Today.AddDays ( 1 ) ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType1 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType2 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType3 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType4 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType5 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType6 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType7 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType8 ) .Include ( x = > x.LocalStats ) .ThenInclude ( x= > x.StatType9 ) .Include ( x = > x.LocalDetails ) ... .OrderBy ( f= > f.SomeOrderingCriterion ) ;
this.MyProperty = this.GetSomeValue ( ) ;
public string Name { get { return model.Name ; } set { model.Name = value ; } } private string name ; public string Name { get { return name ; } set { name = value ; } }
public class Helper : IDisposable { // Assume that it 's ANY OTHER IDisposable type . SqlConnection is just an example . public SqlConnection SqlConnection { get ; set ; } public void Dispose ( ) { if ( SqlConnection ! = null ) { SqlConnection.Dispose ( ) ; } } }
"public class Playlist { private ICollection < PlaylistEntry > playlistEntries ; public int PlaylistId { get ; set ; } public string Name { get ; set ; } public virtual ICollection < PlaylistEntry > PlaylistEntries { get = > this.playlistEntries ? ? ( this.playlistEntries = new HashSet < PlaylistEntry > ( ) ) ; set = > this.playlistEntries = value ; } } public class PlaylistEntry { [ DatabaseGenerated ( DatabaseGeneratedOption.Identity ) ] public int PlaylistEntryId { get ; set ; } public string FilePath { get ; set ; } [ ForeignKey ( `` Playlist '' ) ] public int PlaylistId { get ; set ; } [ Required ] public Playlist Playlist { get ; set ; } } var playlist = new Playlist { Name = `` My first playlist '' } ; using ( var context = new MusicPlayerContext ( stringBuilder ) ) { context.Playlists.Add ( playlist ) ; context.SaveChanges ( ) ; } playlist.PlaylistEntries.Add ( new PlaylistEntry { FilePath = `` lkdfj '' , PlaylistId = playlist.PlaylistId } ) ; using ( var context = new MusicPlayerContext ( stringBuilder ) ) { context.Playlists.Attach ( playlist ) ; context.Entry ( playlist ) .State = EntityState.Modified ; context.SaveChanges ( ) ; } using ( var context = new MusicPlayerContext ( stringBuilder ) ) { context.Playlists.Include ( x = > x.PlaylistEntries ) .ToList ( ) ; }"
"< TextBox Height= '' 23 '' Margin= '' 146,0,105,97.04 '' Name= '' txb_Geboortedatum '' VerticalAlignment= '' Bottom '' > < TextBox.Text > < Binding Path= '' Geboortedatum '' StringFormat= '' d '' UpdateSourceTrigger= '' PropertyChanged '' > < Binding.ValidationRules > < ExceptionValidationRule / > < /Binding.ValidationRules > < /Binding > < /TextBox.Text > < /TextBox > FrameworkElement.LanguageProperty.OverrideMetadata ( typeof ( FrameworkElement ) , new FrameworkPropertyMetadata ( XmlLanguage.GetLanguage ( CultureInfo.CurrentCulture.IetfLanguageTag ) ) ) ; .NET 3.5 .NET 4.0d/MM/yyyy d/MM/yyyyd/MM/yy d/MM/yydd-MM-yy dd-MM-yydd.MM.yy dd.MM.yyyyyy-MM-dd dd.MMM.yyyy yyyy-MM-dd"
"private readonly ConcurrentDictionary < Credential , Lazy < Data > > Cache= new ConcurrentDictionary < Credential , Lazy < Data > > ( ) ; public Data GetData ( Credential credential ) { // This instance will be thrown away if a cached // value with our `` credential '' key already exists . Lazy < Data > newLazy = new Lazy < Data > ( ( ) = > GetDataInternal ( credential ) , LazyThreadSafetyMode.ExecutionAndPublication ) ; Lazy < Data > lazy = Cache.GetOrAdd ( credential , newLazy ) ; bool added = ReferenceEquals ( newLazy , lazy ) ; // If true , we won the race . Data data ; try { // Wait for the GetDataInternal call to complete . data = lazy.Value ; } finally { // Only the thread which created the cache value // is allowed to remove it , to prevent races . if ( added ) { Cache.TryRemove ( credential , out lazy ) ; } } return data ; }"
"strSQL = `` SELECT date , COUNT ( * ) AS downloads , c-ip `` strSQL = strSQL & `` FROM C : \temp\Log\*.log `` strSQL = strSQL & `` WHERE cs-method='RETR ' `` strSQL = strSQL & `` GROUP BY date , c-ip `` RecordSet can not be used at this time [ Unknown Error ] - SELECT Date and Time of download - Where user = 'xxx ' - WHERE RETR = is a download - WHERE Filename = u_ex150709.log or xxx Dim rsLP As ILogRecordset = NothingDim rowLP As ILogRecord = NothingDim LogParser As LogQueryClassClass = NothingDim W3Clog As COMW3CInputContextClassClass = NothingDim UsedBW As Double = 0Dim Unitsprocessed As IntegerDim strSQL As String = NothingLogParser = New LogQueryClassClass ( ) W3Clog = New COMW3CInputContextClassClass ( ) TrystrSQL = `` SELECT date , COUNT ( * ) AS downloads , c-ip `` strSQL = strSQL & `` FROM C : \temp\Log\*.log `` strSQL = strSQL & `` WHERE cs-method='RETR ' `` strSQL = strSQL & `` GROUP BY date , c-ip `` 'run the query against W3C logrsLP = LogParser.Execute ( strSQL , W3Clog ) 'Error occurs in the line belowrowLP = rsLP.getRecord ( )"
public class MyClass { public static void OverloadedMethod ( MyClass l ) { } public static void OverloadedMethod ( MyCastableClass l ) { } //Try commenting this out separately from the next implicit operator . //Comment out the resulting offending casts in Test ( ) as well . public static implicit operator MyCastableClass ( MyClass l ) { return new MyCastableClass ( ) ; } //Try commenting this out separately from the previous implicit operator . //Comment out the resulting offending casts in Test ( ) as well . public static implicit operator MyClass ( MyCastableClass l ) { return new MyClass ( ) ; } static void Test ( ) { MyDerivedClass derived = new MyDerivedClass ( ) ; MyClass class1 = new MyClass ( ) ; MyClass class2 = new MyDerivedClass ( ) ; MyClass class3 = new MyCastableClass ( ) ; MyCastableClass castableClass1 = new MyCastableClass ( ) ; MyCastableClass castableClass2 = new MyClass ( ) ; MyCastableClass castableClass3 = new MyDerivedClass ( ) ; OverloadedMethod ( derived ) ; //Ambiguous call between OverloadedMethod ( MyClass l ) and OverloadedMethod ( MyCastableClass l ) OverloadedMethod ( class1 ) ; OverloadedMethod ( class2 ) ; OverloadedMethod ( class3 ) ; OverloadedMethod ( castableClass1 ) ; OverloadedMethod ( castableClass2 ) ; OverloadedMethod ( castableClass3 ) ; } public class MyDerivedClass : MyClass { } public class MyCastableClass { }
< configuration > < system.web > < httpRuntime relaxedUrlToFileSystemMapping= '' true '' / > < ! -- ... your other settings ... -- > < /system.web > < /configuration > HTTP Error 404.8 - Not FoundThe request filtering module is configured to deny a path in the URL that contains a hiddenSegment section .
abstract class Animal { public Animal ( ) { //init stuff.. } } class Cat : Animal { public Cat ( bool is_keyboard ) : base ( ) //NOTE here { //other init stuff } }
"private readonly SemaphoreSlim Semaphore = new SemaphoreSlim ( 1 ) ; public async Task FooAsync ( ) { await Semaphore.WaitAsync ( ) ; // Do stuff here Semaphore.Release ( ) ; } public sealed class AsyncMutex { private readonly SemaphoreSlim Semaphore = new SemaphoreSlim ( 1 ) ; public async Task < IDisposable > Lock ( ) { await Semaphore.WaitAsync ( ) .ConfigureAwait ( false ) ; return new _Lock ( Semaphore ) ; } private sealed class _Lock : IDisposable { private readonly SemaphoreSlim Semaphore ; public _Lock ( SemaphoreSlim semaphore ) = > Semaphore = semaphore ; void IDisposable.Dispose ( ) = > Semaphore.Release ( ) ; } } private readonly AsyncMutex Mutex = new AsyncMutex ( ) ; public async Task FooAsync ( ) { using ( _ = await Mutex.Lock ( ) ) { // Do stuff here } } .method public hidebysig instance void T1 ( ) cil managed { .maxstack 1 .locals init ( [ 0 ] class System.Threading.Tasks.AsyncMutex mutex , [ 1 ] class System.IDisposable V_1 ) IL_0001 : newobj instance void System.Threading.Tasks.AsyncMutex : :.ctor ( ) IL_0006 : stloc.0 // mutex IL_0007 : ldloc.0 // mutex IL_0008 : callvirt instance class System.Threading.Tasks.Task ` 1 < class System.IDisposable > System.Threading.Tasks.AsyncMutex : :Lock ( ) IL_000d : callvirt instance ! 0/*class System.IDisposable*/ class System.Threading.Tasks.Task ` 1 < class System.IDisposable > : :get_Result ( ) IL_0012 : stloc.1 // V_1 .try { // Do stuff here.. IL_0025 : leave.s IL_0032 } finally { IL_0027 : ldloc.1 // V_1 IL_0028 : brfalse.s IL_0031 IL_002a : ldloc.1 // V_1 IL_002b : callvirt instance void System.IDisposable : :Dispose ( ) IL_0031 : endfinally } IL_0032 : ret }"
"public Stream GetDecryptedFileStream ( string inputFile , byte [ ] key , byte [ ] iv ) { var fsCrypt = new FileStream ( inputFile , FileMode.Open , FileAccess.Read , FileShare.Read ) ; var rmCrypto = new RijndaelManaged ( ) ; var transform = rmCrypto.CreateDecryptor ( key , iv ) ; var cs = new CryptoStream ( fsCrypt , transform , CryptoStreamMode.Read ) ; return cs ; }"
"Expression < Func < T , bool > > matchExpression ; Expression < Func < T , bool > > func3 = ( i ) = > ! matchExpression.Invoke ( i ) ;"
var x = 1 ; Action < int > myAction = ( x ) = > { Console.WriteLine ( x ) ; } ;
"crc = ( crc > > 8 ) ^ crcTable [ ( ( val & 0x0000ff00 ) > > 8 ) ^ crc & 0xff ] ; 0000006f mov eax , dword ptr [ ebp-40h ] 00000072 shr eax,8 00000075 mov edx , dword ptr [ ebp-3Ch ] 00000078 mov ecx,0FF00h 0000007d and edx , ecx 0000007f shr edx,8 00000082 mov ecx , dword ptr [ ebp-40h ] 00000085 mov ebx,0FFh 0000008a and ecx , ebx 0000008c xor edx , ecx 0000008e mov ecx , dword ptr ds : [ 03387F38h ] 00000094 cmp edx , dword ptr [ ecx+4 ] 00000097 jb 0000009E 00000099 call 6F54F5EC 0000009e xor eax , dword ptr [ ecx+edx*4+8 ] 000000a2 mov dword ptr [ ebp-40h ] , eax -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - crc = ( crc > > 8 ) ^ crcTable [ ( ( val & 0x0000ff00 ) > > 8 ) ^ crc & 0xff ] ; 000000a5 mov eax , dword ptr [ rsp+20h ] 000000a9 shr eax,8 000000ac mov dword ptr [ rsp+38h ] , eax 000000b0 mov rdx,124DEE68h 000000ba mov rdx , qword ptr [ rdx ] 000000bd mov eax , dword ptr [ rsp+00000090h ] 000000c4 and eax,0FF00h 000000c9 shr eax,8 000000cc mov ecx , dword ptr [ rsp+20h ] 000000d0 and ecx,0FFh 000000d6 xor eax , ecx 000000d8 mov ecx , eax 000000da mov qword ptr [ rsp+40h ] , rdx 000000df mov rax , qword ptr [ rsp+40h ] 000000e4 mov rax , qword ptr [ rax+8 ] 000000e8 mov qword ptr [ rsp+48h ] , rcx 000000ed cmp qword ptr [ rsp+48h ] , rax 000000f2 jae 0000000000000100 000000f4 mov rax , qword ptr [ rsp+48h ] 000000f9 mov qword ptr [ rsp+48h ] , rax 000000fe jmp 0000000000000105 00000100 call 000000005FA5D364 00000105 mov rax , qword ptr [ rsp+40h ] 0000010a mov rcx , qword ptr [ rsp+48h ] 0000010f mov ecx , dword ptr [ rax+rcx*4+10h ] 00000113 mov eax , dword ptr [ rsp+38h ] 00000117 xor eax , ecx 00000119 mov dword ptr [ rsp+20h ] , eax public static uint CRC32 ( uint val ) { uint crc = 0xffffffff ; crc = ( crc > > 8 ) ^ crcTable [ ( val & 0x000000ff ) ^ crc & 0xff ] ; crc = ( crc > > 8 ) ^ crcTable [ ( ( val & 0x0000ff00 ) > > 8 ) ^ crc & 0xff ] ; crc = ( crc > > 8 ) ^ crcTable [ ( ( val & 0x00ff0000 ) > > 16 ) ^ crc & 0xff ] ; crc = ( crc > > 8 ) ^ crcTable [ ( val > > 24 ) ^ crc & 0xff ] ; // flip bits return ( crc ^ 0xffffffff ) ; }"
"DateTime test = DateTime.Parse ( `` Dec 24 17:45 '' ) ; if ( ! DateTime.TryParseExact ( inDateTime , `` MMM dd HH : mm '' , System.Globalization.CultureInfo.CurrentCulture , System.Globalization.DateTimeStyles.AllowWhiteSpaces , out outDateTime ) ) { if ( ! DateTime.TryParseExact ( inDateTime , `` MMM dd yyyy '' , System.Globalization.CultureInfo.CurrentCulture , System.Globalization.DateTimeStyles.AllowWhiteSpaces , out outDateTime ) ) { //Handle failure to Parse } }"
int hashcode =FirstValue.ResolveNull ( ) .GetHashCode ( ) ^SecondValue.ResolveNull ( ) .GetHashCode ( ) ^ ... int hashcode = ( FirstValue ? ? String.Empty ) .GetHashCode ( ) ^ ( SecondValue ? ? String.Empty ) .GetHashCode ( ) ^ ... string s ; string s = null ; s.ResolveNull ( ) ;
"0.12961924D+01 // note leading space , FORTRAN pads its output so that positive and negative// numbers are the same string lengthstring s = `` 0.12961924D+01 '' ; double v1 = Double.Parse ( s ) double v2 = Double.Parse ( s , NumberStyles.Float )"
"private void StartSDCBackupSet ( ) { using ( Process p = new Process ( ) ) { p.StartInfo.FileName = `` SDCBackup '' ; try { p.Start ( ) ; BackIcon.ShowBalloonTip ( 5000 , `` Backup '' , `` Editor for settings startet '' , ToolTipIcon.Info ) ; } catch ( Exception ) { MessageBox.Show ( `` Program til settings blev ikke fundet '' ) ; } } }"
"public partial class Form1 : Form { private CameraWrapper cam ; public Form1 ( ) { cam = new CameraWrapper ( ) ; InitializeComponent ( ) ; } public partial class Form1 : Form { private CameraWrapper cam = new CameraWrapper ( ) ; public Form1 ( ) { InitializeComponent ( ) ; } class CameraWrapper { private Cognex.DataMan.SDK.DataManSystem ds ; public CameraWrapper ( ) { ds = new DataManSystem ( ) ; DataManConnectionParams connectionParams = new DataManConnectionParams ( `` 10.10.191.187 '' ) ; ds.Connect ( connectionParams ) ; ds.DmccResponseArrived += new DataManSystem.DmccResponseArrivedEventHandler ( ds_DmccResponseArrived ) ; } public void Trigger ( ) { SendCommand ( `` TRIGGER ON '' ) ; } void ds_DmccResponseArrived ( object sender , DmccResponseArrivedEventArgs e ) { System.Console.Write ( `` Num barcodes : `` ) ; System.Console.WriteLine ( e.Data.Length.ToString ( ) ) ; } void SendCommand ( string command ) { const string cmdHeader = `` || > '' ; ds.SendDmcc ( cmdHeader + command ) ; } }"
"services.Configure < AuthorizationOptions > ( options = > { options.AddPolicy ( `` AllowProfileManagement '' , policy = > policy.Requirements.Add ( new AllowProfileManagementRequirement ( new MyRepository ( new MyContext ( ) ) ) ) ) ; } ) ; services.AddEntityFramework ( ) .AddSqlServer ( ) .AddDbContext < MemorialContext > ( options = > options.UseSqlServer ( Configuration [ `` Data : DefaultConnection : ConnectionString '' ] ) ) ; services.AddTransient < MyRepository > ( provider = > new MyRepository ( provider.GetRequiredService < MyContext > ( ) ) ) ;"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text.RegularExpressions ; using Helpers.Extensions ; namespace Helpers.Utils { public class CSSParser { private readonly Dictionary < string , Dictionary < string , string > > _dict = new Dictionary < string , Dictionary < string , string > > ( ) ; private const string SelectorKey = `` selector '' ; private const string NameKey = `` name '' ; private const string ValueKey = `` value '' ; private const string GroupsPattern = @ '' ( ? < selector > ( ? : ( ? : [ ^ , { ] + ) \s* , ? \s* ) + ) \ { ( ? : ( ? < name > [ ^ } : ] + ) \s* : \s* ( ? < value > [ ^ } ; ] + ) ; ? \s* ) *\ } '' ; private const string CommentsPattern = @ '' ( ? < ! '' '' ) \/\*.+ ? \*\/ ( ? ! `` `` ) '' ; private readonly Regex _pattern = new Regex ( GroupsPattern , RegexOptions.IgnoreCase | RegexOptions.Multiline ) ; public CSSParser ( string cssString ) { var noCommentsString = Regex.Replace ( cssString , CommentsPattern , `` '' ) ; var matches = _pattern.Matches ( noCommentsString ) ; foreach ( Match item in matches ) { var selector = item.Groups [ SelectorKey ] .Captures [ 0 ] .Value.Trim ( ) ; var selectorParts = selector.Split ( ' , ' ) .Select ( s= > s.Trim ( ) ) ; foreach ( var part in selectorParts ) { if ( ! _dict.ContainsKey ( part ) ) _dict [ part ] = new Dictionary < string , string > ( ) ; } var classNameCaptures = item.Groups [ NameKey ] .Captures ; var valueCaptures = item.Groups [ ValueKey ] .Captures ; var count = item.Groups [ NameKey ] .Captures.Count ; for ( var i = 0 ; i < count ; i++ ) { var className = classNameCaptures [ i ] .Value.TrimIfNotNull ( ) ; var value = valueCaptures [ i ] .Value.TrimIfNotNull ( ) ; foreach ( var part in selectorParts ) { _dict [ part ] [ className ] = value ; } } } } public IEnumerable < KeyValuePair < string , string > > LookupValues ( string selector ) { IEnumerable < KeyValuePair < string , string > > result = new KeyValuePair < string , string > [ ] { } ; if ( _dict.ContainsKey ( selector ) ) { var subdict = _dict [ selector ] ; result = subdict.ToList ( ) ; } return result ; } public string LookupValue ( string selector , string style ) { string result = null ; if ( _dict.ContainsKey ( selector ) ) { var subdict = _dict [ selector ] ; if ( subdict.ContainsKey ( style ) ) result = subdict [ style ] ; } return result ; } } } [ TestMethod ] public void TestParseMultipleElementNames ( ) { const string css = @ '' h1 , h2 , h3 , h4 , h5 , h6 { font-family : Georgia , 'Times New Roman ' , serif ; color : # 006633 ; line-height : 1.2em ; font-weight : normal ; } '' ; var parser = new CSSParser ( css ) ; Assert.AreEqual ( `` normal '' , parser.LookupValue ( `` h4 '' , `` font-weight '' ) ) ; } [ TestMethod ] public void TestParseNoAttributesStyle ( ) { const string css = @ '' # submenu-container { } '' ; var parser = new CSSParser ( css ) ; Assert.IsFalse ( parser.LookupValues ( `` # submenu-container '' ) .Any ( ) ) ; } foreach ( Match item in matches ) namespace Helpers.Extensions { public static class StringExtension { public static string TrimIfNotNull ( this string input ) { return input ! = null ? input.Trim ( ) : null ; } } }"
"// 2 > nul|| @ goto : batch/* : batch @ echo offsetlocal : : find csc.exeset `` frm= % SystemRoot % \Microsoft.NET\Framework\ '' for /f `` tokens=* delims= '' % % v in ( 'dir /b /a : d /o : -n `` % SystemRoot % \Microsoft.NET\Framework\v* '' ' ) do ( set netver= % % v goto : break_loop ) : break_loopset csc= % frm % % netver % \csc.exe : : csc.exe found % csc % /nologo /out : '' % ~n0.exe '' `` % ~dpsfnx0 '' % ~n0.exeendlocalexit /b 0*/public class Hello { public static void Main ( ) { ClearC ( ) ; System.Console.WriteLine ( `` Hello , C # World ! `` ) ; } private static void ClearC ( ) { System.Console.MoveBufferArea ( 0,0 , System.Console.BufferWidth , System.Console.BufferHeight-1 , 0,0 ) ; } } C : \ > // 2 > nul ||Hello , C # World !"
type Person ( ? name : string ) = let name = defaultArg name `` '' member x.Name = name var myObj1 = new Person ( `` mark '' ) ;
"CREATE TABLE [ dbo ] . [ Word ] ( [ WordId ] VARCHAR ( 20 ) NOT NULL , [ CategoryId ] INT DEFAULT ( ( 1 ) ) NOT NULL , [ GroupId ] INT DEFAULT ( ( 1 ) ) NOT NULL , PRIMARY KEY CLUSTERED ( [ WordId ] ASC ) , CONSTRAINT [ FK_WordWordCategory ] FOREIGN KEY ( [ CategoryId ] ) REFERENCES [ dbo ] . [ WordCategory ] ( [ WordCategoryId ] ) , CONSTRAINT [ FK_WordWordGroup ] FOREIGN KEY ( [ GroupId ] ) REFERENCES [ dbo ] . [ WordGroup ] ( [ WordGroupId ] ) ) ; CREATE TABLE [ dbo ] . [ WordForm ] ( [ WordFormId ] VARCHAR ( 20 ) NOT NULL , [ WordId ] VARCHAR ( 20 ) NOT NULL , [ Primary ] BIT DEFAULT ( ( 0 ) ) NOT NULL , [ PosId ] INT NOT NULL , [ Definition ] VARCHAR ( MAX ) NULL , PRIMARY KEY CLUSTERED ( [ WordFormId ] ASC ) , CONSTRAINT [ FK_WordFormPos ] FOREIGN KEY ( [ PosId ] ) REFERENCES [ dbo ] . [ Pos ] ( [ PosId ] ) , CONSTRAINT [ FK_WordFormWord ] FOREIGN KEY ( [ WordId ] ) REFERENCES [ dbo ] . [ Word ] ( [ WordId ] ) ) ; CREATE TABLE [ dbo ] . [ SampleSentence ] ( [ SampleSentenceId ] INT IDENTITY ( 1 , 1 ) NOT NULL , [ WordFormId ] VARCHAR ( 20 ) NOT NULL , [ Text ] VARCHAR ( MAX ) NOT NULL , CONSTRAINT [ PK_SampleSentence ] PRIMARY KEY CLUSTERED ( [ SampleSentenceId ] ASC ) , CONSTRAINT [ FK_SampleSentenceWordForm ] FOREIGN KEY ( [ WordFormId ] ) REFERENCES [ dbo ] . [ WordForm ] ( [ WordFormId ] ) ) ; public class Word { public string WordId { get ; set ; } // WordId ( Primary key ) ( length : 20 ) public int CategoryId { get ; set ; } // CategoryId public int GroupId { get ; set ; } // GroupId // Reverse navigation public virtual System.Collections.Generic.ICollection < WordForm > WordForms { get ; set ; } // WordForm.FK_WordFormWord // Foreign keys public virtual WordCategory WordCategory { get ; set ; } // FK_WordWordCategory public virtual WordGroup WordGroup { get ; set ; } // FK_WordWordGroup public Word ( ) { CategoryId = 1 ; GroupId = 1 ; WordForms = new System.Collections.Generic.List < WordForm > ( ) ; } } public class WordForm { public string WordFormId { get ; set ; } // WordFormId ( Primary key ) ( length : 20 ) public string WordId { get ; set ; } // WordId ( length : 20 ) public bool Primary { get ; set ; } // Primary public int PosId { get ; set ; } // PosId public string Definition { get ; set ; } // Definition // Reverse navigation public virtual System.Collections.Generic.ICollection < SampleSentence > SampleSentences { get ; set ; } // SampleSentence.FK_SampleSentenceWordForm // Foreign keys public virtual Pos Pos { get ; set ; } // FK_WordFormPos public virtual Word Word { get ; set ; } // FK_WordFormWord public WordForm ( ) { Primary = false ; SampleSentences = new System.Collections.Generic.List < SampleSentence > ( ) ; } } public class SampleSentence : AuditableTable { public int SampleSentenceId { get ; set ; } // SampleSentenceId ( Primary key ) public string WordFormId { get ; set ; } // WordFormId ( length : 20 ) public string Text { get ; set ; } // Text // Foreign keys public virtual WordForm WordForm { get ; set ; } // FK_SampleSentenceWordForm } public async Task < IHttpActionResult > Put ( [ FromBody ] Word word ) { var oldObj = db.WordForms .Where ( w = > w.WordId == word.WordId ) .AsNoTracking ( ) .ToList ( ) ; var newObj = word.WordForms.ToList ( ) ; var upd = newObj.Where ( n = > oldObj.Any ( o = > ( o.WordFormId == n.WordFormId ) & & ( o.PosId ! = n.PosId || ! o.Definition.Equals ( n.Definition ) ) ) ) .ToList ( ) ; var add = newObj.Where ( n = > oldObj.All ( o = > o.WordFormId ! = n.WordFormId ) ) .ToList ( ) ; var del = oldObj.Where ( o = > newObj.All ( n = > n.WordFormId ! = o.WordFormId ) ) .ToList ( ) ; foreach ( var wordForm in upd ) { db.WordForms.Attach ( wordForm ) ; db.Entry ( wordForm ) .State = EntityState.Modified ; } foreach ( var wordForm in add ) { db.WordForms.Add ( wordForm ) ; } foreach ( var wordForm in del ) { db.WordForms.Attach ( wordForm ) ; db.WordForms.Remove ( wordForm ) ; } db.Words.Attach ( word ) ; db.Entry ( word ) .State = EntityState.Modified ; await db.SaveChangesAsync ( User , DateTime.UtcNow ) ; return Ok ( word ) ; }"
"public IEnumerable < MyType > DoSomething < TResult > ( Func < MyType , TResult > func ) where TResult : AnotherType public IEnumerable < MyType > DoSomething < TResult > ( Func < MyType , TResult > func ) where TResult : IEnumerable < AnotherType >"
Table : VisibilityId Value -- -- -- - 0 Visible 1 Invisible 2 Collapsed
"var topics = ( from t in ctx.Topics where t.SubjectId == subjectId & & t.ParentId == null select new { t.Title , t.Id } ) .ToList ( ) ; int ? parent = null ; var topics = ( from t in ctx.Topics where t.SubjectId == subjectId & & t.ParentId == parent select new { t.Title , t.Id } ) .ToList ( ) ;"
"[ Table ( `` UserProfile '' ) ] public class UserProfile { public enum StudentStatusType { Student = 1 , Graduate = 2 } [ Key ] public int UserId { get ; set ; } public string UserName { get ; set ; } public string FullName { get ; set ; } public StudentStatusType Status { get ; set ; } } public partial class EnumTest : DbMigration { public override void Up ( ) { AddColumn ( `` UserProfile '' , `` Status '' , c = > c.Int ( nullable : false , defaultValue:1 ) ) ; } public override void Down ( ) { DropColumn ( `` UserProfile '' , `` Status '' ) ; } } var user = new UserProfile ( ) ; user.Status = UserProfile.StudentStatusType.Graduate ; user.FullName = `` new '' ; user.UserName = `` new '' ; users.UserProfiles.Add ( user ) ; users.SaveChanges ( ) ; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |UserId | UserName | FullName | Status | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |1 | new | new | 1 | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --"
# include < iostream > int main ( ) { float f=0.0f/0.0f ; std : :cout < < f ; return 0 ; } class Test { public static void main ( String args [ ] ) { float f=0.0f/0.0f ; System.out.println ( f ) ; } } class Test { public static void Main ( string [ ] args ) { float f=0.0f/0.0f ; Console.Write ( f ) ; } }
string html = @ '' < ul > < li > this is a test < /li > < /ul > '' ; string sanitized = Sanitizer.GetSafeHtmlFragment ( html ) ; \r\n < li > this is a test < /li >
"< records > < record index= '' 1 '' > < property name= '' Username '' > Sven < /property > < property name= '' Domain '' > infinity2 < /property > < property name= '' LastLogon '' > 12/15/2009 < /property > < /record > < record index= '' 2 '' > < property name= '' Username '' > Josephine < /property > < property name= '' Domain '' > infinity3 < /property > < property name= '' LastLogon '' > 01/02/2010 < /property > < /record > < record index= '' 3 '' > < property name= '' Username '' > Frankie < /property > < property name= '' Domain '' > wk-infinity9 < /property > < property name= '' LastLogon '' > 10/02/2009 < /property > < /record > < /records > foreach ( Record rec in myVar ) { Console.WriteLine ( `` ID : { 0 } User : { 1 } Domain : { 2 } LastLogon : { 3 } '' , rec.Index , rec.Username , rec.Domain , rec.LastLogon ) ; }"
"public class Article : EntityBase { public string ArticleNumber { get ; set ; } // Owned object , shares article number as key . public StorageDetails StorageStuff { get ; set ; } // An Entity from another table having a foreign key reference public SomeOtherEntity OtherStuff { get ; set ; } } public class StorageDetails : OwnedObject < Article > { public Article Owner { get ; set ; } } // Somewhere during model creation ... builder.OwnsOne ( article = > article.StorageStuff ) ; builder.HasOne ( article = > article.OtherStuff ) ..."
catch ( Exception e ) { log.Error ( e.GetType ( ) ) ; // it write 'System.Data.EntityException ' } try { ... } catch ( EntityException a ) { // need to do something log.Error ( `` I got it ! `` ) ; } catch ( Exception e ) { log.Error ( `` No '' ) ; }
class Base { public void foo ( ) { System.Console.WriteLine ( `` base '' ) ; } } class Derived : Base { static void Main ( string [ ] args ) { Base b = new Base ( ) ; b.foo ( ) ; b = new Derived ( ) ; b.foo ( ) ; } public new void foo ( ) { System.Console.WriteLine ( `` derived '' ) ; } } class Base { public void foo ( ) { System.out.println ( `` Base '' ) ; } } class Derived extends Base { public void foo ( ) { System.out.println ( `` Derived '' ) ; } public static void main ( String [ ] s ) { Base b = new Base ( ) ; b.foo ( ) ; b = new Derived ( ) ; b.foo ( ) ; } }
for ( int i = 0 ; i < 100 ; i++ ) { Common.ToastFunctions.SendToast ( ( i * 5 ) .ToString ( ) + `` seconds '' ) ; await System.Threading.Tasks.Task.Delay ( TimeSpan.FromSeconds ( 5 ) ) ; } this._backgroundTaskDeferral = args.TaskInstance.GetDeferral ( ) ; args.TaskInstance.Canceled += OnTaskCanceled ; var details = args.TaskInstance.TriggerDetails as AppServiceTriggerDetails ; if ( details ? .Name == `` com.ganjine '' ) //Remote Activation { _appServiceconnection = details.AppServiceConnection ; _appServiceconnection.RequestReceived += OnRequestReceived ; _appServiceconnection.ServiceClosed += AppServiceconnection_ServiceClosed ; }
< startup > < supportedRuntime version= '' v2.0.5727 '' / > < supportedRuntime version= '' v4.0 '' / > < /startup > Warning : System.MissingMethodException : Method not found : 'Boolean System.Threading.WaitHandle.WaitOne ( Int32 ) ' . while resolving 0xa0000e1 - System.Threading.WaitHandle.WaitOne.11/11/2010 01:54:07 [ 3620 ] : Method not found : 'Boolean System.Threading.WaitHandle.WaitOne ( Int32 ) ' . while compiling method XXX
[ JsonIgnore ] public bool AllowedToEdit { get { return _allowedToEdit ; } set { _allowedToEdit = value ; } }
"var myDictionary = new Dictionary < string , decimal > { { `` hello '' , 0m } , { `` world '' , 1m } } ; var myDictionary = new Dictionary < string , decimal > { { `` hello '' , 0m } , { `` world '' , 1m } } .ToImmutableDictionary ( ) ;"
// Create IQueryablevar query = from a in ArticleServerContext.Set < Article > ( ) where a.Approved orderby a.UtcDate descending select a ; // Get total rows ( needed for pagination logic ) int totalRows = query.Count ( ) // Get rows for current pagequery = query.Skip ( ( CurrentPage - 1 ) * RowsPerPage ) .Take ( RowsPerPage ) ;
map.IndexOfValue ( `` boo '' ) .ShouldBe ( 2 ) ; // - > map.IndexOfValue ( `` boo '' ) should be 2 but was 1
"public override void Initialize ( string name , System.Collections.Specialized.NameValueCollection config ) { if ( config == null ) throw new ArgumentNullException ( `` config '' ) ; if ( name == null ) name = `` MyCustomMembershipProvider '' ; ... }"
"private int GetLeftOfColumn ( ColumnHeader column , ListView lv ) { if ( ! lv.Columns.Contains ( column ) ) return -1 ; int calculated_left = 0 ; for ( int i = 0 ; i < lv.Columns.Count ; i++ ) if ( lv.Columns [ i ] == column ) return calculated_left ; else calculated_left += lv.Columns [ i ] .Width + 1 ; return calculated_left ; }"
"public class Class1 { public string prop1 { get ; set ; } public int prop2 { get ; set ; } public static explicit operator Class2 ( Class1 c1 ) { return new Class2 ( ) { prop1 = c1.prop1 , prop2 = c1.prop2 } ; } } public class Class2 { public string prop1 { get ; set ; } public int prop2 { get ; set ; } } void Main ( ) { Class1 [ ] c1 = new Class1 [ ] { new Class1 ( ) { prop1 = `` asdf '' , prop2 = 1 } } ; //works Class2 c2 = ( Class2 ) c1 [ 0 ] ; //does n't work : Compiles , but throws at run-time //InvalidCastException : Unable to cast object of type 'Class1 ' to type 'Class2 ' . Class2 c3 = c1.Cast < Class2 > ( ) .First ( ) ; }"
"public class Request { public int ID { get ; set ; } ... public virtual ICollection < History > History { get ; set ; } ... } public class History { public int ID { get ; set ; } ... public virtual Request Request { get ; set ; } public Status Status { get ; set ; } ... } public class RequestController : BaseController { [ HttpPost ] [ ValidateAntiForgeryToken ] public ActionResult Create ( RequestViewModel rvm ) { Request request = rvm.Request if ( ModelState.IsValid ) { ... History history = new History { Request = request , Status = Status.RequestCreated , ... } ; db.RequestHistories.Add ( history ) ; db.Requests.Add ( request ) ; ... } } } // GET : Requests/CreateHistorypublic ActionResult CreateHistory ( Status status ) { History history = new History ( ) ; history.Status = status ; return View ( history ) ; } // POST : Requests/CreateHistory [ HttpPost ] [ ValidateAntiForgeryToken ] public ActionResult CreateHistory ( int id , History history ) { if ( ModelState.IsValid ) { history.Request = db.Requests.Find ( id ) ; ... db.RequestHistories.Add ( history ) ; } } @ * Available user actions * @ < ul class= '' dropdown-menu '' role= '' menu '' > @ * Analyst has option to withdraw a request * @ < li > @ Html.ActionLink ( `` Withdraw '' , `` CreateHistory '' , new { id = Model.Change.ID , status = Status.Withdrawn } , null ) < /li > @ * Request manager approval if not already received * @ < li > ... < /li > @ * If user is in Development and the Request is authorised by Analytics Manager * @ < li > ... < /li > ... < /ul > public ActionResult RequestApproval ( int id ) { ... } [ MyAuthoriseAttribute ( Roles = `` Analytics , User '' ) ] [ HttpPost ] [ ValidateAntiForgeryToken ] public ActionResult RequestApproval ( int id , History history ) { ... } public ActionResult Approve ( int id ) { ... } [ MyAuthoriseAttribute ( Roles = `` Analytics , Manager '' ) ] [ HttpPost ] [ ValidateAntiForgeryToken ] public ActionResult Approve ( int id , History history ) { ... }"
internal class AnonymousMethod_Example { public void MyFunc ( string [ ] args ) { var x = 5 ; Action act = delegate ( ) { Console.WriteLine ( x ) ; } ; act ( ) ; } } .class private auto ansi beforefieldinit AnonymousMethod_Example { .class nested private auto ansi sealed beforefieldinit ' < > c__DisplayClass0_0 ' { .field public int32 x .method assembly hidebysig instance void ' < MyFunc > b__0 ' ( ) cil managed { ... AnonymousMethod_Example/ ' < > c__DisplayClass0_0 ' : :x call void [ mscorlib ] System.Console : :WriteLine ( int32 ) ... } ... } ... internal class LocalFunction_Example { public void MyFunc ( string [ ] args ) { var x = 5 ; void DoIt ( ) { Console.WriteLine ( x ) ; } ; DoIt ( ) ; } } .class private auto ansi beforefieldinit LocalFunction_Example { .class nested private auto ansi sealed beforefieldinit ' < > c__DisplayClass0_0 ' extends [ mscorlib ] System.ValueType { .field public int32 x } .method public hidebysig instance void MyFunc ( string [ ] args ) cil managed { ... ldc.i4.5 stfld int32 LocalFunction_Example/ ' < > c__DisplayClass1_0 ' : :x ... call void LocalFunction_Example : : ' < MyFunc > g__DoIt1_0 ' ( valuetype LocalFunction_Example/ ' < > c__DisplayClass1_0 ' & ) } .method assembly hidebysig static void ' < MyFunc > g__DoIt0_0 ' ( valuetype LocalFunction_Example/ ' < > c__DisplayClass0_0 ' & `` ) cil managed { ... LocalFunction_Example/ ' < > c__DisplayClass0_0 ' : :x call void [ mscorlib ] System.Console : :WriteLine ( int32 ) ... } }
"async void button1_Click_1 ( object sender , EventArgs e ) { var ts = TaskScheduler.FromCurrentSynchronizationContext ( ) ; await Task.Factory.StartNew ( async ( ) = > { MessageBox.Show ( ( TaskScheduler.Current == ts ) .ToString ( ) ) ; //True await new WebClient ( ) .DownloadStringTaskAsync ( `` http : //www.google.com '' ) ; MessageBox.Show ( ( TaskScheduler.Current == ts ) .ToString ( ) ) ; //False } , CancellationToken.None , TaskCreationOptions.None , ts ) .Unwrap ( ) ; } MessageBox.Show ( ( TaskScheduler.Current == TaskScheduler.Default ) .ToString ( ) ) ;"
< myCustomConfig myAnnoyingType= '' System.String '' / > [ ConfigurationProperty ( `` myAnnoyingType '' ) ] public string MyAnnoyingType { get { return ( string ) this [ `` myAnnoyingType '' ] ; } } // else where in the appvar stringType = thatConfig.MyAnnoyingTypevar actualType = Type.GetType ( stringType ) ; // wow that was boring . [ ConfigurationProperty ( `` myAnnoyingType '' ) ] public Type MyAnnoyingType { get { return ( Type ) this [ `` myAnnoyingType '' ] ; } }
"// given the pathstring path = `` Directory/Path to escape.exe '' ; Console.WriteLine ( System.Web.HttpUtility.UrlPathEncode ( path ) ) ; // returns `` Installer/My % 20Installer.msi '' < - This is what I requireConsole.WriteLine ( System.Web.HttpUtility.UrlEncode ( path ) ) ; // returns `` Installer % 2fMy+Installer.msi '' // none of these return what I require , eitherConsole.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.ASCII ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.BigEndianUnicode ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.Default ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.UTF32 ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.UTF7 ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.UTF8 ) ) ; Console.WriteLine ( System.Web.HttpUtility.UrlEncode ( path , Encoding.Unicode ) ) ; // returns Directory % 2FPath % 20to % 20escape.exeConsole.WriteLine ( Uri.EscapeDataString ( path ) ) ;"
"[ Cmdlet ( `` Use '' , `` Dummy '' ) ] public class UseDummyCmdlet : PSCmdlet { protected override void ProcessRecord ( ) { var errorRecord = new ErrorRecord ( new Exception ( `` Something Happened '' ) , `` SomethingHappened '' , ErrorCategory.CloseError , null ) ; ThrowTerminatingError ( errorRecord ) ; } } Function Use-Dummy ( ) { [ CmdletBinding ( ) ] Param ( ) process { $ errorRecord = New-Object System.Management.Automation.ErrorRecord -ArgumentList ( New-Object System.Exception ) , 'SomethingHappened ' , 'NotSpecified ' , $ null $ PSCmdlet.ThrowTerminatingError ( $ errorRecord ) } } Use-Dummy : Exception of type 'System.Exception ' was thrown.At line:1 char:10+ use-dummy < < < < + CategoryInfo : NotSpecified : ( : ) [ Use-Dummy ] , Exception + FullyQualifiedErrorId : SomethingHappened , Use-Dummy An exception of type 'System.Management.Automation.PipelineStoppedException ' occurred in System.Management.Automation.dll but was not handled in user codeAdditional information : The pipeline has been stopped ."
"using ( SqlConnection connection1 = new SqlConnection ( ) , connection2 = new SqlConnection ( ) ) { } using ( SqlConnection connection1 = new SqlConnection ( ) ) using ( SqlConnection connection2 = new SqlConnection ( ) ) { }"
switch ( fruit ) { case Apple apple : case Orange orange : // impossible to use apple or orange break ; case Banana banana : break ; } List < Fruit > applesAndOranges = new List < Fruit > ( ) ; switch ( fruit ) { case Fruit X when X is Apple || X is Orange : applesAndOranges.Add ( X ) ; break ; case Banana banana : break ; }
"DateTime.ParseExact ( MyDateString , `` yyMMddHHmmtt.ttt '' ) ;"
"int Ncount = 0 ; private void Textbox_KeyDown ( object sender , KeyEventArgs e ) { Ncount += 1 ; MessageBox.Show ( `` KeyDown 's Ncount : `` + Ncount.ToString ( ) ) ; } private void Textbox_KeyPress ( object sender , KeyPressEventArgs e ) { Ncount += 1 ; MessageBox.Show ( `` KeyPress 's Ncount : `` + Ncount.ToString ( ) ) ; } KeyPress 's Ncount : 2 KeyDown 's Ncount : 1"
"DirectoryInfo someDir = new DirectoryInfo ( @ '' .\someDir '' ) ; Console.WriteLine ( $ '' Would you like to delete the directory { someDir.FullName } ? `` ) ; string response = Console.ReadLine ( ) .ToLower ( ) ; response switch { `` yes '' = > { someDir.Delete ( ) ; ... MoreActions } , _ = > DoNothing ( ) } ;"
namespace University.API.Controllers { [ Route ( `` api/ [ controller ] '' ) ] [ ApiController ] public class UniversityController : ControllerBase { private readonly IUniversityService universityService ; public UniversityController ( IUniversityService universityService ) { this.universityService = universityService ; } [ Authorize ( Policy = `` GetUniversities '' ) ] [ HttpGet ( `` GetUniversities '' ) ] public async Task < ServiceResult > GetUniversities ( ) { return await universityService.GetUniversities ( ) ; } [ Authorize ( Policy = `` GetStudents '' ) ] [ HttpGet ( `` GetStudents '' ) ] public async Task < ServiceResult > GetStudents ( ) { return await universityService.GetStudents ( ) ; } [ Authorize ( Policy = `` DeleteUniversity '' ) ] [ HttpGet ( `` DeleteUniversity '' ) ] public async Task < ServiceResult > DeleteUniversity ( int universityId ) { return await universityService.DeleteUniversity ( universityId ) ; } } }
"public IQueryable < T > Get < T > ( Predicate < T > criteria ) { using ( IDbConnection db = dbConnectionFactory.OpenDbConnection ( ) ) { SqlExpressionVisitor < T > ev = OrmLiteConfig.DialectProvider.ExpressionVisitor < T > ( ) ; ev.Where ( x = > criteria.Invoke ( x ) ) return db.Select ( ev ) .AsQueryable ( ) ; } } public IQueryable < CostCenter > Get ( Identity user ) { using ( IDbConnection db = dbConnectionFactory.OpenDbConnection ( ) ) { SqlExpressionVisitor < CostCenter > ev = OrmLiteConfig.DialectProvider.ExpressionVisitor < CostCenter > ( ) ; ev.Where ( x = > x.OrgId == user.OrgId ) ; ev.Where ( x = > x.VisibilityStockpointId == user.StockpointId ) ; `` return db.Select ( ev ) .AsQueryable ( ) ; } } [ Alias ( `` CostCenterDetail '' ) ] public class CostCenter { public Guid Id { get ; set ; } public Guid StockpointId { get ; set ; } public virtual Guid ? VisibilityStockpointId { get ; set ; } public string Description { get ; set ; } public string Number { get ; set ; } public string OrgId { get ; set ; } } public IQueryable < T > Get < T > ( Expression < Func < T , bool > > criteria ) { using ( IDbConnection db = dbConnectionFactory.OpenDbConnection ( ) ) { return db.Select ( criteria ) .AsQueryable ( ) ; } }"
"private static void Main ( string [ ] args ) { Type serviceType = typeof ( AuthService ) ; ServiceHost serviceHost = new ServiceHost ( serviceType ) ; WebHttpBinding binding = new WebHttpBinding ( ) ; binding.Security.Mode = WebHttpSecurityMode.TransportCredentialOnly ; binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Windows ; ServiceEndpoint basicServiceEndPoint = serviceHost.AddServiceEndpoint ( typeof ( IAuthService ) , binding , `` http : //notebook50:87 '' ) ; basicServiceEndPoint.Behaviors.Add ( new WebHttpBehavior ( ) ) ; Console.WriteLine ( `` wcf service started '' ) ; serviceHost.Open ( ) ; Console.ReadLine ( ) ; } public class AuthService : IAuthService { public List < string > GetUserInformation ( ) { List < string > userInfo = new List < string > ( ) ; userInfo.Add ( `` Environment.User = `` + Environment.UserName ) ; userInfo.Add ( `` Environment.UserDomain = `` + Environment.UserDomainName ) ; if ( OperationContext.Current ! = null & & OperationContext.Current.ServiceSecurityContext ! = null ) { userInfo.Add ( `` WindowsIdentity = `` + OperationContext.Current.ServiceSecurityContext.WindowsIdentity.Name ) ; userInfo.Add ( `` Auth protocol = `` + OperationContext.Current.ServiceSecurityContext.WindowsIdentity.AuthenticationType ) ; } else { userInfo.Add ( `` WindowsIdentity = empty '' ) ; } WebOperationContext.Current.OutgoingResponse.ContentType = `` text/plain '' ; return userInfo ; } } [ ServiceContract ] public interface IAuthService { [ OperationContract ] [ WebInvoke ( Method = `` GET '' , ResponseFormat = WebMessageFormat.Json , UriTemplate = `` test/ '' ) ] List < string > GetUserInformation ( ) ; }"
"EventSource ( Name= '' BasicLogger '' ) public class BasicLogger : EventSource { ... } EventSource ( Name= '' HardymanDatabaseLog '' ) public class BasicLogger : EventSource { ... } using System.ComponentModel ; using System.Diagnostics.Tracing ; namespace Etw { class Program { static void Main ( string [ ] args ) { BasicLogger.Log.Error ( `` Hello1 '' ) ; BasicLogger.Log.Critical ( `` Hello2 '' ) ; } } [ EventSource ( Name = `` BasicLogger '' ) ] public class BasicLogger : EventSource { public static readonly BasicLogger Log = new BasicLogger ( ) ; [ Event ( 1 , Message = `` { 0 } '' , Level = EventLevel.Critical ) ] public void Critical ( string message ) { if ( IsEnabled ( ) ) WriteEvent ( 1 , message ) ; } [ Event ( 2 , Message = `` { 0 } '' , Level = EventLevel.Error ) ] public void Error ( string message ) { if ( IsEnabled ( ) ) WriteEvent ( 2 , message ) ; } [ Event ( 3 , Message = `` { 0 } '' , Level = EventLevel.Warning ) ] public void Warning ( string message ) { if ( IsEnabled ( ) ) WriteEvent ( 3 , message ) ; } [ Event ( 4 , Message = `` { 0 } '' , Level = EventLevel.Informational ) ] public void Informational ( string message ) { if ( IsEnabled ( ) ) WriteEvent ( 4 , message ) ; } } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration xmlns= '' http : //schemas.microsoft.com/practices/2013/entlib/semanticlogging/etw '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //schemas.microsoft.com/practices/2013/entlib/semanticlogging/etw SemanticLogging-svc.xsd '' > < sinks > < consoleSink name= '' ConsoleEventSink '' > < sources > < eventSource name= '' HardymanDatabaseLog '' level= '' LogAlways '' / > < /sources > < eventTextFormatter header= '' +=========================================+ '' / > < /consoleSink > < /sinks > < /configuration >"
"[ HttpPost ] public SaveResult SaveChanges ( JObject saveBundle ) { try { return _breezeComponent.SaveChanges ( saveBundle ) ; } catch ( DbUpdateConcurrencyException ex ) { //Workaround needed } } { `` entities '' : [ { `` EventId '' : 11111 , `` EventName '' : `` Jon Doe '' , `` EventCity '' : `` Montreal '' , `` EventDate '' : `` 2014-01-24T00:00:00Z '' , `` TermDate '' : `` 2014-01-08T00:00:00Z '' , `` Insertedby '' : `` Terry '' , `` InsertDate '' : `` 2014-01-06T14:31:14.197Z '' , `` Updatedby '' : `` Terry '' , `` UpdateDate '' : `` 2014-01-07T15:50:53.037Z '' , `` entityAspect '' : { `` entityTypeName '' : `` Event : # Cds.Corpo.GuestList.Models '' , `` defaultResourceName '' : `` Events '' , `` entityState '' : `` Deleted '' , `` originalValuesMap '' : { } , `` autoGeneratedKey '' : { `` propertyName '' : `` EventId '' , `` autoGeneratedKeyType '' : `` Identity '' } } } ] , `` saveOptions '' : { } }"
"public static async Task GetWeatherDataAsync ( List < Model > models ) { SemaphoreSlim semaphore = new SemaphoreSlim ( 10 ) ; var taskList = new List < Task < ComparisonModel > > ( ) ; foreach ( var x in models ) { await semaphore.WaitAsync ( ) ; taskList.Add ( CompDaysAsync ( x ) ) ; } try { await Task.WhenAll ( taskList.ToArray ( ) ) ; } catch ( Exception e ) { } finally { semaphore.Release ( ) ; } } public static async Task < Models > CompDaysAsync ( Model model ) { var httpClient = new HttpClient ( ) ; httpClient.DefaultRequestHeaders.Authorization = new Headers.AuthenticationHeaderValue ( `` Token '' , '' xxxxxxxx '' ) ; httpClient.Timeout = TimeSpan.FromMinutes ( 5 ) ; var taskList = new List < Task < Models.DateTemp > > ( ) ; foreach ( var item in model.list ) { taskList.Add ( WeatherAPI.GetResponseForDayAsync ( item , httpClient , Latitude , Longitude ) ) ; } httpClient.Dispose ( ) ; try { await Task.WhenAll ( taskList.ToArray ( ) ) ; } catch ( Exception e ) { } return model ; } public static async Task < DateTemp > GetResponseForDayAsync ( DateTemp date , HttpClient httpClient , decimal ? Latitude , decimal ? Longitude ) { var response = await httpClient.GetStreamAsync ( request1 ) ; StreamReader myStreamReader = new StreamReader ( response ) ; string responseData = myStreamReader.ReadToEnd ( ) ; double [ ] data = new double [ 2 ] ; if ( responseData ! = `` [ [ null , null ] ] '' ) { data = Array.ConvertAll ( responseData.Replace ( `` [ `` , `` '' ) .Replace ( `` ] '' , `` '' ) .Split ( ' , ' ) , double.Parse ) ; } else { data = null ; } ; double precipData = 0 ; var response2 = await httpClient.GetStreamAsync ( request2 ) ; StreamReader myStreamReader2 = new StreamReader ( response2 ) ; string responseData2 = myStreamReader2.ReadToEnd ( ) ; if ( responseData2 ! = null & & responseData2 ! = `` [ null ] '' & & responseData2 ! = `` [ 0.0 ] '' ) { precipData = double.Parse ( responseData2.Replace ( `` [ `` , `` '' ) .Replace ( `` ] '' , `` '' ) ) ; } date.Precip = precipData ; if ( data ! = null ) { date.minTemp = data [ 0 ] ; date.maxTemp = data [ 1 ] ; } return date ; }"
"s = > new Allocation { Id = s.Id , UnitName = s.UnitName , Address = s.NewAddress , Tel = s.NewTel }"
"var libraryBookIdsWithShelfAndBookTagQuery = ( from shelf in session.Query < Shelf > ( ) join sbttref in session.Query < ShelfBookTagTypeCrossReference > ( ) on shelf.ShelfId equals sbttref.ShelfId join bookTag in session.Query < BookTag > ( ) on sbttref.BookTagTypeId equals ( byte ) bookTag.BookTagType join btbref in session.Query < BookTagBookCrossReference > ( ) on bookTag.BookTagId equals btbref.BookTagId join book in session.Query < Book > ( ) on btbref.BookId equals book.BookId join libraryBook in session.Query < LibraryBook > ( ) on book.BookId equals libraryBook.BookId join library in session.Query < LibraryCredential > ( ) on libraryBook.LibraryCredentialId equals library.LibraryCredentialId join lcsg in session .Query < LibraryCredentialSalesforceGroupCrossReference > ( ) on library.LibraryCredentialId equals lcsg.LibraryCredentialId join userGroup in session.Query < UserGroup > ( ) on lcsg.UserGroupOrganizationId equals userGroup.UserGroupOrganizationId where shelf.ShelfId == shelfId & & userGroup.UserGroupId == userGroupId & & ! book.IsDeleted & & book.IsDrm ! = null & & book.BookFormatTypeId ! = null select new { Book = book , LibraryBook = libraryBook , BookTag = bookTag } ) ; // add a couple of where clauses , then ... var result = libraryBookIdsWithShelfAndBookTagQuery.ToList ( ) ; SELECT DISTINCT book4_.bookid AS BookId12_0_ , libraryboo5_.librarybookid AS LibraryB1_35_1_ , booktag2_.booktagid AS BookTagId15_2_ , book4_.title AS Title12_0_ , book4_.isbn AS ISBN12_0_ , book4_.publicationdate AS Publicat4_12_0_ , book4_.classificationtypeid AS Classifi5_12_0_ , book4_.synopsis AS Synopsis12_0_ , book4_.thumbnailurl AS Thumbnai7_12_0_ , book4_.retinathumbnailurl AS RetinaTh8_12_0_ , book4_.totalpages AS TotalPages12_0_ , book4_.lastpage AS LastPage12_0_ , book4_.lastpagelocation AS LastPag11_12_0_ , book4_.lexilerating AS LexileR12_12_0_ , book4_.lastpageposition AS LastPag13_12_0_ , book4_.hidden AS Hidden12_0_ , book4_.teacherhidden AS Teacher15_12_0_ , book4_.modifieddatetime AS Modifie16_12_0_ , book4_.isdeleted AS IsDeleted12_0_ , book4_.importedwithlexile AS Importe18_12_0_ , book4_.bookformattypeid AS BookFor19_12_0_ , book4_.isdrm AS IsDrm12_0_ , book4_.lightsailready AS LightSa21_12_0_ , libraryboo5_.bookid AS BookId35_1_ , libraryboo5_.libraryid AS LibraryId35_1_ , libraryboo5_.externalid AS ExternalId35_1_ , libraryboo5_.totalcopies AS TotalCop5_35_1_ , libraryboo5_.availablecopies AS Availabl6_35_1_ , libraryboo5_.statuschangedate AS StatusCh7_35_1_ , booktag2_.booktagtypeid AS BookTagT2_15_2_ , booktag2_.booktagvalue AS BookTagV3_15_2_ FROM shelf shelf0_ , shelfbooktagtypecrossreference shelfbookt1_ , booktag booktag2_ , booktagbookcrossreference booktagboo3_ , book book4_ , librarybook libraryboo5_ , library librarycre6_ , librarycredentialsalesforcegroupcrossreference librarycre7_ , usergroup usergroup8_ WHERE shelfbookt1_.shelfid = shelf0_.shelfid AND booktag2_.booktagtypeid = shelfbookt1_.booktagtypeid AND booktagboo3_.booktagid = booktag2_.booktagid AND book4_.bookid = booktagboo3_.bookid AND libraryboo5_.bookid = book4_.bookid AND librarycre6_.libraryid = libraryboo5_.libraryid AND librarycre7_.librarycredentialid = librarycre6_.libraryid AND usergroup8_.usergrouporganizationid = librarycre7_.usergrouporganizationid AND shelf0_.shelfid = @ p0 AND usergroup8_.usergroupid = @ p1 AND NOT ( book4_.isdeleted = 1 ) AND ( book4_.isdrm IS NOT NULL ) AND ( book4_.bookformattypeid IS NOT NULL ) AND book4_.lightsailready = 1"
"private void autopopulate ( decimal totalPayment ) { //remove old rows for ( int i = 0 ; i < tblCashReceiptsApplyToBindingSource.List.Count ; i++ ) { DataRowView viewRow = tblCashReceiptsApplyToBindingSource.List [ i ] as DataRowView ; RentalEaseDataSet.tblCashReceiptsApplyToRow row = viewRow.Row as RentalEaseDataSet.tblCashReceiptsApplyToRow ; if ( row.CashReceiptsID == this.ReceiptID ) { tblCashReceiptsApplyToBindingSource.List.Remove ( viewRow ) ; i -- ; } } decimal payment = totalPayment ; //look for an exact amount foreach ( DataGridViewRow dueRow in dataViewDueRO.Rows ) { decimal due = -1 * ( Decimal ) dueRow.Cells [ Due.Index ] .Value ; if ( due == payment ) { String charge = ( String ) dueRow.Cells [ Description.Index ] .Value ; int chargeID = ManageCheckbooks.findTransactionID ( charge ) ; tblCashReceiptsApplyToBindingSource.AddNew ( ) ; RentalEaseDataSet.tblCashReceiptsApplyToRow row = ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row as RentalEaseDataSet.tblCashReceiptsApplyToRow ; row.CashReceiptsID = this.ReceiptID ; row.ApplyTo = chargeID ; row.Paid = payment ; //convert to positive payment = 0 ; break ; } } //if the exact amount was found , payment will = 0 , and this will do nothing , otherwise , //divy out everything left over ( which will be everything ) foreach ( DataGridViewRow dueRow in dataViewDueRO.Rows ) { String charge = ( String ) dueRow.Cells [ Description.Index ] .Value ; decimal due = ( Decimal ) dueRow.Cells [ Due.Index ] .Value ; if ( due > 0 || payment < = 0 ) { continue ; } int chargeID = ManageCheckbooks.findTransactionID ( charge ) ; payment += due ; //due is negative , so this will subtract how much the user owes tblCashReceiptsApplyToBindingSource.AddNew ( ) ; RentalEaseDataSet.tblCashReceiptsApplyToRow row = ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row as RentalEaseDataSet.tblCashReceiptsApplyToRow ; row.CashReceiptsID = this.ReceiptID ; row.ApplyTo = chargeID ; if ( payment > = 0 ) { //payment is enough to cover this row.Paid = due * -1 ; //convert to positive } else { //does n't have enough money to conver this , can only cover partial , or none row.Paid = ( due - payment ) * -1 ; //math : //money remaining $ 50 , current charge = $ 60 //payment = 50 + -60 = -10 //row [ `` Paid '' ] = ( -60 - -10 ) * -1 //row [ `` Paid '' ] = ( -60 + 10 ) * -1 //row [ `` Paid '' ] = -50 * -1 //row [ `` Paid '' ] = 50 } if ( payment < = 0 ) { break ; //do n't conintue , no more money to distribute } } isVirginRow = true ; } protected override void saveToDatabase ( ) { tblCashReceiptsBindingSource.EndEdit ( ) ; isVirginRow = false ; RentalEaseDataSet.tblCashReceiptsRow [ ] rows = rentalEaseDataSet.tblCashReceipts.Select ( `` ID < 0 '' ) as RentalEaseDataSet.tblCashReceiptsRow [ ] ; int newID = -1 ; if ( rows.Count ( ) > 0 ) { tblCashReceiptsTableAdapter.Update ( rows [ 0 ] ) ; newID = rows [ 0 ] .ID ; } tblCashReceiptsTableAdapter.Update ( rentalEaseDataSet.tblCashReceipts ) ; //update table /*foreach ( RentalEaseDataSet.tblCashReceiptsApplyToRow row in rentalEaseDataSet.tblCashReceiptsApplyTo.Select ( `` CashReceiptsID = -1 '' ) ) { row.CashReceiptsID = newID ; } */ //update binding source DataRowView [ ] applicationsOld = new DataRowView [ tblCashReceiptsApplyToBindingSource.List.Count ] ; RentalEaseDataSet.tblCashReceiptsApplyToRow [ ] applicationsNew = new RentalEaseDataSet.tblCashReceiptsApplyToRow [ tblCashReceiptsApplyToBindingSource.List.Count ] ; tblCashReceiptsApplyToBindingSource.List.CopyTo ( applicationsOld , 0 ) ; for ( int i = 0 ; i < applicationsOld.Count ( ) ; i++ ) { RentalEaseDataSet.tblCashReceiptsApplyToRow row = applicationsOld [ i ] .Row as RentalEaseDataSet.tblCashReceiptsApplyToRow ; if ( row.CashReceiptsID < 0 ) { applicationsNew [ i ] = rentalEaseDataSet.tblCashReceiptsApplyTo.NewRow ( ) as RentalEaseDataSet.tblCashReceiptsApplyToRow ; applicationsNew [ i ] [ `` ID '' ] = row.ID ; applicationsNew [ i ] [ `` CashReceiptsID '' ] = this.ReceiptID ; applicationsNew [ i ] [ 2 ] = row [ 2 ] ; applicationsNew [ i ] [ 3 ] = row [ 3 ] ; applicationsNew [ i ] [ 4 ] = row [ 4 ] ; //row.Delete ( ) ; } } for ( int i = 0 ; i < applicationsOld.Count ( ) ; i++ ) { try { if ( ( int ) applicationsOld [ i ] .Row [ `` ID '' ] < 0 ) { applicationsOld [ i ] .Row.Delete ( ) ; } } catch ( RowNotInTableException ) { break ; } } this.tblCashReceiptsApplyToBindingSource.Filter = `` CashReceiptsID = `` + this.ReceiptID ; foreach ( DataRow newRow in applicationsNew ) { if ( newRow == null ) { break ; } tblCashReceiptsApplyToBindingSource.AddNew ( ) ; ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row [ 0 ] = newRow [ 0 ] ; ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row [ 1 ] = newRow [ 1 ] ; ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row [ 2 ] = newRow [ 2 ] ; ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row [ 3 ] = newRow [ 3 ] ; ( ( DataRowView ) tblCashReceiptsApplyToBindingSource.Current ) .Row [ 4 ] = newRow [ 4 ] ; } tblCashReceiptsApplyToBindingSource.EndEdit ( ) ; checkForBadRows ( ) ; tblCashReceiptsApplyToTableAdapter.Update ( rentalEaseDataSet.tblCashReceiptsApplyTo ) ; tblCashReceiptsApplyToTableAdapter.Fill ( rentalEaseDataSet.tblCashReceiptsApplyTo ) ; }"
"// http : //localhost/api/fire/test/ // Route : `` api/fire/ { name } '' , public HttpResponseMessage Post ( [ FromUri ] string name , object data ) { // Snip } public override Task < object > ReadFromStreamAsync ( Type type , Stream readStream , HttpContent content , IFormatterLogger formatterLogger ) { var name = `` test '' ; // TODO this should come from the current request var formatter = _httpSelfHostConfiguration.Formatters.JsonFormatter ; if ( name.Equals ( `` test '' , StringComparison.InvariantCultureIgnoreCase ) ) { return formatter.ReadFromStreamAsync ( typeof ( SomeType ) , readStream , content , formatterLogger ) ; } else { return formatter.ReadFromStreamAsync ( typeof ( OtherType ) , readStream , content , formatterLogger ) ; } }"
"private void button6_Click ( object sender , EventArgs e ) { string Access = @ '' c : \exportdb\DestinationDB.mdb '' ; string connect = @ '' Provider=Microsoft.Jet.OLEDB.4.0 ; Data Source=C : \exportdb\DestinationDB.mdb ; '' ; using ( OleDbConnection conn = new OleDbConnection ( connect ) ) { using ( OleDbCommand cmd = new OleDbCommand ( ) ) { cmd.Connection = conn ; cmd.CommandText = `` INSERT INTO [ MS Access ; Database= '' + Access + `` ] . [ Persons ] SELECT * FROM [ Persons $ ] '' ; conn.Open ( ) ; cmd.ExecuteNonQuery ( ) ; } } }"
"using System ; namespace Frank { public class WeakReference < T > : WeakReference where T : class { public WeakReference ( T target ) : base ( target ) { } public WeakReference ( T target , bool trackResurrection ) : base ( target , trackResurrection ) { } protected WeakReference ( ) : base ( ) { } public new T Target { get { return ( T ) base.Target ; } set { base.Target = value ; } } } }"
"[ Serializable ] public class A : MarshalByRefObject { public void Execute ( ) { typeof ( A ) .GetConstructor ( Type.EmptyTypes ) .Invoke ( null ) ; // Fine - Why ? typeof ( B ) .GetConstructor ( Type.EmptyTypes ) .Invoke ( null ) ; // Fine - Why ? } } public class B { } class Program { static void Main ( string [ ] args ) { PermissionSet set = new PermissionSet ( PermissionState.None ) ; SecurityPermission security = new SecurityPermission ( SecurityPermissionFlag.Execution ) ; set.AddPermission ( security ) ; Evidence evidence = new Evidence ( ) ; AppDomainSetup setup = new AppDomainSetup ( ) ; setup.ApplicationBase = `` C : '' ; AppDomain domain = AppDomain.CreateDomain ( `` hello '' , evidence , setup , set ) ; A a = ( A ) domain.CreateInstanceAndUnwrap ( Assembly.GetExecutingAssembly ( ) .FullName , typeof ( A ) .FullName ) ; a.Execute ( ) ; } } using System ; using System.Reflection ; using System.Security ; using System.Security.Permissions ; using System.Security.Policy ; namespace ConsoleApplication1 { [ Serializable ] public class A : MarshalByRefObject { public void Execute ( ) { B b = new B ( ) ; // BOMB ! ERROR ! Security demand : reflection forbidden ! b.GetType ( ) .GetMethod ( `` ExecuteInB '' , BindingFlags.Instance | BindingFlags.NonPublic ) .Invoke ( b , null ) ; } } public class B { private void ExecuteInB ( ) { } } class Program { static void Main ( string [ ] args ) { PermissionSet set = new PermissionSet ( PermissionState.None ) ; SecurityPermission security = new SecurityPermission ( PermissionState.None ) ; security.Flags = SecurityPermissionFlag.Execution ; set.AddPermission ( security ) ; Evidence evidence = new Evidence ( ) ; AppDomainSetup setup = new AppDomainSetup ( ) ; setup.ApplicationBase = `` C : '' ; AppDomain domain = AppDomain.CreateDomain ( `` hola '' , evidence , setup , set ) ; A a = ( A ) domain.CreateInstanceAndUnwrap ( `` ConsoleApplication1 '' , `` ConsoleApplication1.A '' ) ; a.Execute ( ) ; } } }"
"var client = new HttpClient ( ) ; client.DefaultRequestHeaders.Add ( `` Accept '' , `` application/json '' ) ; client.DefaultRequestHeaders.Add ( `` Authorization '' , `` Bearer `` + accessToken ) ; var restUrlImportPbix = POWER_BI_SERVICE_ROOT_URL + $ '' datasets/ { dataset.id } /Default.SetAllConnections '' ; var postData = new { connectionString = _powerBISettings.DataConnectionString } ; var response = client.PostAsync ( restUrlImportPbix , new StringContent ( JsonConvert.SerializeObject ( postData ) , Encoding.UTF8 , `` application/json '' ) ) .Result ;"
[ assembly : AssemblyVersion ( `` 01.01.01.002 '' ) ] 1.1.1.2 [ assembly : AssemblyVersion ( `` 01.01.01.200 '' ) ] [ assembly : AssemblyVersion ( `` 01.01.01.102 '' ) ]
"var lineItems = from li in Repository.Query < CostingLineItem > ( ) let cid = ( li.ParentCostingPackage ! = null ) ? li.ParentCostingPackage.ParentCostingEvent.ProposalSection.Proposal.Costing.Id : li.ParentCostingEvent.ProposalSection.Proposal.Costing.Id where cid == costingId & & li.OriginalProductId.HasValue & & ( li.Quantity.HasValue & & li.Quantity.Value > 0 ) & & // li.QuantityUnitMultiplier Classifications.Contains ( li.OriginalProduct.ClassificationEnumIndex ) let selectedChoiceId = li.OriginalPackageOptionId.HasValue ? ( from c in li.OriginalPackageOption.CostingLineItems orderby ( c.IsIncluded ? ? false ) ? -2 : ( c.IsDefaultItem ? ? false ) ? -1 : c.Id select ( int ) c.OriginalPackageOptionChoiceId ) .FirstOrDefault ( ) : 0 where selectedChoiceId == 0 || ( li.OriginalPackageOptionChoiceId.HasValue & & li.OriginalPackageOptionId.Value == selectedChoiceId ) let hasProviderAvailable = li.OriginalProductItem.ProductItemVendors.Any ( piv = > piv.ProductPricings.Any ( pp = > pp.ProductItemVendor.CompanyId ! = null || pp.ProductItemVendor.HotelId ! = null ) ) select new { LineItem = li , ProductItem = li.OriginalProductItem , Product = li.OriginalProduct , Vendors = li.CostingLineItemVendors , HasProviderAvailable = hasProviderAvailable } ; let selectedChoiceId = 0"
"new XElement ( `` root '' , new XElement ( `` request '' , new XElement ( `` messageData '' , ... ) ) ) ; Root ( Request ( MessageData ( ... ) ) ) ; private static XElement Root ( params object [ ] content ) { return new XElement ( `` root '' , content ) ; }"
namespace Token1.Token2.Token3 { public class Class1 { } } namespace Token2.Token4.Token5 { public class Class1 { } } namespace Token1.Token2.Token3 { public class Class1 { var frameworkClass1 = new Token2.Token4.Token5.Class1 ( ) ; } }
"public class HtmlTextBox { public string Text { get ; set ; } } public class HtmlDiv { public string Text { get ; set ; } } public interface IText { string Text { get ; } } public class HtmlTextBox2 : HtmlTextBox , IText { } public class HtmlDiv2 : HtmlDiv , IText { } IText h2 = new HtmlTextBox2 { Text= '' Hello World '' } ; Console.WriteLine ( h2.Text ) ; //OUTPUT : hello world"
class ClassWithConstants { private const string ConstantA = `` Something '' ; private const string ConstantB = ConstantA + `` Else '' ; ... }
"private int _TimerInterval ; public int TimerInterval { get { return _TimerInterval ; } } private int _Factor1 ; public int Factor1 { set { _Factor1 = value ; _TimerInterval = _Factor1 * _Factor2 ; } get { return _Factor1 ; } } private int _Factor2 ; public int Factor2 { set { _Factor2 = value ; _TimerInterval = _Factor1 * _Factor2 ; } get { return _Factor2 ; } } Exception Message : ' 0 ' is not a valid value for 'Interval ' . 'Interval ' must be greater than 0.Exception Target Site : set_Interval exitTimer.Interval = _config.TimerInterval ; // Main Formpublic fMain ( ) { InitializeComponent ( ) ; config = new ConfigData ( ) ; config.LoadConfig ( ) ; // Other initializations } //ConfigData Class// XML config field namesprivate const string cfFactor1 = `` Factor1 '' ; private const string cfFactor1 = `` Factor2 '' ; private const string cfFactor3 = `` Factor3 '' ; private const string cfFactor4 = `` Factor4 '' ; //Default valuesprivate const int DefFactor1 = 1 ; private const int DefFactor2 = 50 ; private const int DefFactor3 = 1 ; private const int DefFactor4 = 25 ; public void LoadConfig ( ) { Factor1 = ParseInt ( ConfigurationManager.AppSettings [ cfFactor1 ] , DefFactor1 ) ; Factor2 = ParseInt ( ConfigurationManager.AppSettings [ cfFactor2 ] , DefFactor2 ) ; Factor3 = ParseInt ( ConfigurationManager.AppSettings [ cfFactor3 ] , DefFactor3 ) ; Factor4 = ParseInt ( ConfigurationManager.AppSettings [ cfFactor4 ] , DefFactor4 ) ; } int ParseInt ( string numberString , int aDefault = 0 ) { int result ; if ( ! int.TryParse ( numberString , out result ) ) { result = aDefault ; } return result ; }"
"protected virtual int GetBalance ( BinaryTreeNode < T > node ) { if ( node ! = null ) { IEnumerable < BinaryTreeNode < T > > leftSubtree = null , righSubtree = null ; if ( node.Left ! = null ) leftSubtree = node.Left.ToEnumerable ( BinaryTreeTraversalType.InOrder ) ; if ( node.Right ! = null ) righSubtree = node.Right.ToEnumerable ( BinaryTreeTraversalType.InOrder ) ; var leftHeight = leftSubtree.IsNullOrEmpty ( ) ? 0 : leftSubtree.Max ( x = > x.Depth ) - node.Depth ; var righHeight = righSubtree.IsNullOrEmpty ( ) ? 0 : righSubtree.Max ( x = > x.Depth ) - node.Depth ; return righHeight - leftHeight ; } return 0 ; } public class BinaryTreeNode < T > { private BinaryTreeNode < T > _left , _right ; private int _height ; public T Value { get ; set ; } public BinaryTreeNode < T > Parent ; public int Depth { get ; set ; } public BinaryTreeNode ( ) { } public BinaryTreeNode ( T data ) { Value = data ; } public BinaryTreeNode < T > Left { get { return _left ; } set { _left = value ; if ( _left ! = null ) { _left.Depth = Depth + 1 ; _left.Parent = this ; } UpdateHeight ( ) ; } } public BinaryTreeNode < T > Right { get { return _right ; } set { _right = value ; if ( _right ! = null ) { _right.Depth = Depth + 1 ; _right.Parent = this ; } UpdateHeight ( ) ; } } public int Height { get { return _height ; } protected internal set { _height = value ; if ( Parent ! = null ) { Parent.UpdateHeight ( ) ; } } } private void UpdateHeight ( ) { if ( Left == null & & Right == null ) { return ; } if ( Left ! = null & & Right ! = null ) { if ( Left.Height > Right.Height ) Height = Left.Height + 1 ; else Height = Right.Height + 1 ; } else if ( Left == null ) Height = Right.Height + 1 ; else Height = Left.Height + 1 ; } } public class BinarySearchTree < T > { private readonly Comparer < T > _comparer = Comparer < T > .Default ; public BinarySearchTree ( ) { } public BinaryTreeNode < T > Root { get ; set ; } public virtual void Add ( T value ) { var n = new BinaryTreeNode < T > ( value ) ; int result ; BinaryTreeNode < T > current = Root , parent = null ; while ( current ! = null ) { result = _comparer.Compare ( current.Value , value ) ; if ( result == 0 ) { parent = current ; current = current.Left ; } if ( result > 0 ) { parent = current ; current = current.Left ; } else if ( result < 0 ) { parent = current ; current = current.Right ; } } if ( parent == null ) Root = n ; else { result = _comparer.Compare ( parent.Value , value ) ; if ( result > 0 ) parent.Left = n ; else parent.Right = n ; } } } if ( Parent ! = null ) { Parent.UpdateHeight ( ) ; }"
"OleDbConnection accCon = new OleDbConnection ( ) ; OdbcCommand mySQLCon = new OdbcCommand ( ) ; try { //connect to mysql Connect ( ) ; mySQLCon.Connection = connection ; //connect to access accCon.ConnectionString = @ '' Provider=Microsoft.Jet.OLEDB.4.0 ; '' + @ '' Data source= `` + pathToAccess ; accCon.Open ( ) ; var cnt = 0 ; while ( cnt < 5 ) { if ( accCon.State == ConnectionState.Open ) break ; cnt++ ; System.Threading.Thread.Sleep ( 50 ) ; } if ( cnt == 5 ) { ToolBox.logThis ( `` Connection to Access DB did not open . Exit Process '' ) ; return ; } } catch ( Exception e ) { ToolBox.logThis ( `` Faild to Open connections . msg - > `` + e.Message + `` \\n '' + e.StackTrace ) ; } OleDbCommand accCmn = new OleDbCommand ( ) ; accCmn.Connection = accCon ; //access insert query structurevar insertAccessQuery = `` INSERT INTO { 0 } values ( { 1 } ) ; '' ; // key = > tbl name in access , value = > mysql query to b executedforeach ( var table in tblNQuery ) { try { mySQLCon.CommandText = table.Value ; //executed mysql query using ( var dataReader = mySQLCon.ExecuteReader ( ) ) { //variable to hold row data var rowData = new object [ dataReader.FieldCount ] ; var parameters = `` '' ; //read the result set from mysql query while ( dataReader.Read ( ) ) { //fill rowData with the row values dataReader.GetValues ( rowData ) ; //build the parameters for insert query for ( var i = 0 ; i < dataReader.FieldCount ; i++ ) parameters += `` ' '' + rowData [ i ] + `` ' , '' ; parameters = parameters.TrimEnd ( ' , ' ) ; //insert to access accCmn.CommandText = string.Format ( insertAccessQuery , table.Key , parameters ) ; try { accCmn.ExecuteNonQuery ( ) ; } catch ( Exception exc ) { ToolBox.logThis ( `` Faild to insert to access db . msg - > `` + exc.Message + `` \\n\\tInsert query - > `` + accCmn.CommandText ) ; } parameters = `` '' ; } } } catch ( Exception e ) { ToolBox.logThis ( `` Faild to populate access db . msg - > `` + e.Message + `` \\n '' + e.StackTrace ) ; } } Disconnect ( ) ; accCmn.Dispose ( ) ; accCon.Close ( ) ;"
public class Page { public int Id { get ; set ; } public string PageURL { get ; set ; } public string Name { get ; set ; } public string Title { get ; set ; } public List < DateTime > Visits { get ; set ; } public Page ( ) { Visits = new List < DateTime > ( ) ; } } private ApplicationDbContext db = new ApplicationDbContext ( ) ; public ActionResult CookiePolicy ( ) { var page = db.Pages.FirstOrDefault ( c = > c.PageURL == `` cookiepolicy '' ) ; page.Visits.Add ( DateTime.Now ) ; // this list of datetime objects does not get updated page.Title = `` test `` ; //but this property does ViewBag.Title = page.Title ; db.Entry ( page ) .State = EntityState.Modified ; db.SaveChanges ( ) ; return View ( page ) ; }
"[ 0 ] = [ 0 ] = true StructuralComparisons.Equals ( new int [ ] { 0 } , new int [ ] { 0 } ) == false var a = new { X = 3 , Y = new { Z = -1 } } ; var b = new { X = 3 , Y = new { Z = -1 } } ; StructuralComparisons.Equals ( a , b ) == true ;"
[ Conditional ( `` ! SILVERLIGHT '' ) ] private void DoStuffThatSilverlightCant ( ) { ... }
"var value = context.Products.Where ( t = > t.CategoryId == catId ) .Select ( t = > t.Version ) .DefaultIfEmpty ( ) .Max ( ) ; var expectedZero = new List < int > ( ) .DefaultIfEmpty ( ) .Max ( ) ; System.InvalidOperationException : Sequence contains no elements . at int lambda_method ( Closure , QueryContext , DbDataReader , ResultContext , int [ ] , ResultCoordinator ) at bool Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor+QueryingEnumerable < T > +Enumerator.MoveNext ( ) at TSource System.Linq.Enumerable.Single < TSource > ( IEnumerable < TSource > source ) at TResult Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute < TResult > ( Expression query ) at TResult Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute < TResult > ( Expression expression ) at TSource System.Linq.Queryable.Max < TSource > ( IQueryable < TSource > source ) at ... ( my method that run the code ) [ Table ( `` tmpExtProduct '' , Schema = `` ext '' ) ] public partial class Product { [ Key ] [ DatabaseGenerated ( DatabaseGeneratedOption.None ) ] public int Version { get ; set ; } [ Column ( TypeName = `` datetime '' ) ] public DateTime ImportDate { get ; set ; } public int CategoryId { get ; set ; } public string Description { get ; set ; } [ ForeignKey ( nameof ( Ext.Category ) ) ] public int CategoryId { get ; set ; } [ InverseProperty ( nameof ( Ext.Category.Products ) ) ] public virtual Category Category { get ; set ; } } exec sp_executesql N'SELECT MAX ( [ t0 ] . [ Version ] ) FROM ( SELECT NULL AS [ empty ] ) AS [ empty ] LEFT JOIN ( SELECT [ p ] . [ Version ] , [ p ] . [ CategoryId ] , [ p ] . [ ImportDate ] , [ p ] . [ Description ] FROM [ ext ] . [ tmpExtProduct ] AS [ p ] WHERE ( ( [ p ] . [ CategoryId ] = @ __categoryId_0 ) AND @ __categoryId_0 IS NOT NULL ) ) AS [ t0 ] ON 1 = 1 ' , N ' @ __categoryId_0 int ' , @ __categoryId_0=5"
"public static IEnumerable < TTo > ConvertFrom < TTo , TFrom > ( this IEnumerable < TFrom > toList ) { return ConvertFrom < TTo , TFrom > ( toList , TypeDescriptor.GetConverter ( typeof ( TTo ) ) ) ; } public static IEnumerable < TTo > ConvertFrom < TTo , TFrom > ( this IEnumerable < TFrom > toList , TypeConverter converter ) { foreach ( var t in toList ) yield return ( TTo ) converter.ConvertFrom ( t ) ; }"
"public static Generic Get < Generic > ( this Entity input ) { return ( Generic ) input ; } public static Generic Get < Generic > ( this Entity input ) { return ( Generic ) input ; } public static Generic Get < Generic > ( this Entity2 input ) { return ( Generic ) input ; } public static Generic Get < Generic > ( this [ Entity , Entity2 ] input ) { return ( Generic ) input ; } public static Generic Get < Generic > ( this Entity input ) { return CommonLogic ( input ) ; } public static Generic Get < Generic > ( this Entity2 input ) { return CommonLogic ( input ) ; } private static Generic CommonLogic ( Object input ) { return ( Generic ) input ; }"
"sealed class Ref < T > { public delegate T Func < T > ( ) ; private readonly Func < T > getter ; public Ref ( Func < T > getter ) { this.getter = getter ; } public T Value { get { return getter ( ) ; } } } static Ref < int > joik ( ) { int [ ] y = new int [ 50000 ] ; int x = 5 ; Ref < int > vart1 = new Ref < int > ( delegate ( ) { return x ; } ) ; Ref < int [ ] > vart2 = new Ref < int [ ] > ( delegate ( ) { return y ; } ) ; return vart1 ; } .method private hidebysig static class Program/Ref ` 1 < int32 > joik ( ) cil managed { // Code size 72 ( 0x48 ) .maxstack 3 .locals init ( [ 0 ] class Program/Ref ` 1 < int32 > vart1 , [ 1 ] class Program/Ref ` 1 < int32 [ ] > vart2 , [ 2 ] class Program/ ' < > c__DisplayClass2 ' ' < > 8__locals3 ' , [ 3 ] class Program/Ref ` 1 < int32 > CS $ 1 $ 0000 ) IL_0000 : newobj instance void Program/ ' < > c__DisplayClass2 ' : :.ctor ( ) IL_0005 : stloc.2 IL_0006 : nop IL_0007 : ldloc.2 IL_0008 : ldc.i4 0xc350 IL_000d : newarr [ mscorlib ] System.Int32 IL_0012 : stfld int32 [ ] Program/ ' < > c__DisplayClass2 ' : :y IL_0017 : ldloc.2 IL_0018 : ldc.i4.5 IL_0019 : stfld int32 Program/ ' < > c__DisplayClass2 ' : :x IL_001e : ldloc.2 IL_001f : ldftn instance int32 Program/ ' < > c__DisplayClass2 ' : : ' < joik > b__0 ' ( ) IL_0025 : newobj instance void class Program/Ref ` 1/Func ` 1 < int32 , int32 > : :.ctor ( object , native int ) IL_002a : newobj instance void class Program/Ref ` 1 < int32 > : :.ctor ( class Program/Ref ` 1/Func ` 1 < ! 0 , ! 0 > ) IL_002f : stloc.0 IL_0030 : ldloc.2 IL_0031 : ldftn instance int32 [ ] Program/ ' < > c__DisplayClass2 ' : : ' < joik > b__1 ' ( ) IL_0037 : newobj instance void class Program/Ref ` 1/Func ` 1 < int32 [ ] , int32 [ ] > : :.ctor ( object , native int ) IL_003c : newobj instance void class Program/Ref ` 1 < int32 [ ] > : :.ctor ( class Program/Ref ` 1/Func ` 1 < ! 0 , ! 0 > ) IL_0041 : stloc.1 IL_0042 : ldloc.0 IL_0043 : stloc.3 IL_0044 : br.s IL_0046 IL_0046 : ldloc.3 IL_0047 : ret } // end of method Program : :joik"
"private static string GetLoginHtml ( ) { var request = ( HttpWebRequest ) WebRequest.Create ( LoginUrl ) ; var cookieJar = new CookieContainer ( ) ; request.Method = `` POST '' ; request.ContentType = `` application/x-www-form-urlencoded '' ; request.CookieContainer = cookieJar ; using ( var requestStream = request.GetRequestStream ( ) ) { string content = `` Email= '' + Username + `` & Passwd= '' + Password ; requestStream.Write ( Encoding.UTF8.GetBytes ( content ) , 0 , Encoding.UTF8.GetBytes ( content ) .Length ) ; using ( var sr = new StreamReader ( request.GetResponse ( ) .GetResponseStream ( ) ) ) { string html = sr.ReadToEnd ( ) ; string galxValue = ParseOutValue ( html , `` GALX '' ) ; return GetLoginHtml2 ( galxValue , cookieJar ) ; } } } using ( var sr = new StreamReader ( request.GetResponse ( ) .GetResponseStream ( ) ) ) 3 200 HTTP Tunnel to accounts.google.com:443 0"
class Controller { private CustomerRepository Rep ; public ActionResult SomeAction ( int id ) { return Json ( Rep.GetCustomerById ( id ) ) ; } } class CustomerRepository { public Customer GetCustomerById ( int id ) { var cached = Database.FindByPK ( id ) ; if ( cached ! = null ) return cached ; var webserviceData = Webservice.GetData ( id ) ; var customer = ConvertDataToCustomer ( webserviceData ) ; SaveCustomer ( customer ) ; return customer ; } } class Controller { private CustomerRepository Rep ; private Webservice Service ; public ActionResult SomeAction ( int id ) { var customer = Rep.GetCustomerById ( id ) ; if ( customer ! = null ) return Json ( customer ) ; var remote = Service.GetCustomerById ( id ) ; Rep.SaveCustomer ( remote ) ; return Json ( remote ) ; } }
"public class Program { public static ILoggerFactory LoggerFactory ; public static IConfigurationRoot Configuration ; static void Main ( string [ ] args ) { var applicationBaseDirectory = AppContext.BaseDirectory ; string environment = Environment.GetEnvironmentVariable ( `` ASPNETCORE_ENVIRONMENT '' ) ; if ( string.IsNullOrWhiteSpace ( environment ) ) throw new ArgumentNullException ( `` Environment not found in ASPNETCORE_ENVIRONMENT '' ) ; ConfigureApplication ( applicationBaseDirectory , environment ) ; var serviceCollection = ConfigureServices ( ) ; var serviceProvider = ConfigureIoC ( serviceCollection ) ; ConfigureLogging ( serviceProvider ) ; var logger = LoggerFactory.CreateLogger < Program > ( ) ; logger.LogInformation ( `` Starting Application '' ) ; ServiceRunner < IWindowsService > .Run ( config = > { var applicationName = typeof ( Program ) .Namespace ; config.SetName ( $ '' { applicationName } '' ) ; config.SetDisplayName ( $ '' { applicationName } '' ) ; config.SetDescription ( $ '' Service that matches Previous Buyers to Vehicles In Inventory to Fine Upgrade Opportunities . `` ) ; config.Service ( serviceConfig = > { serviceConfig.ServiceFactory ( ( extraArgs , microServiceController ) = > { return serviceProvider.GetService < IWindowsService > ( ) ; } ) ; serviceConfig.OnStart ( ( service , extraArgs ) = > { logger.LogInformation ( $ '' Service { applicationName } started . `` ) ; service.Start ( ) ; } ) ; serviceConfig.OnStop ( ( service = > { logger.LogInformation ( $ '' Service { applicationName } stopped . `` ) ; service.Stop ( ) ; } ) ) ; serviceConfig.OnError ( error = > { logger.LogError ( $ '' Service { applicationName } encountered an error with the following exception : \n { error.Message } '' ) ; } ) ; } ) ; } ) ; } private static void ConfigureApplication ( string applicationBaseDirectory , string environment ) { Directory.SetCurrentDirectory ( AppDomain.CurrentDomain.BaseDirectory ) ; var builder = new ConfigurationBuilder ( ) .SetBasePath ( applicationBaseDirectory ) .AddJsonFile ( `` appsettings.json '' ) .AddJsonFile ( $ '' appsettings . { environment } .json '' , optional : true ) .AddEnvironmentVariables ( ) ; Configuration = builder.Build ( ) ; } private static IServiceCollection ConfigureServices ( ) { var serviceCollection = new ServiceCollection ( ) .AddLogging ( ) .AddOptions ( ) ; serviceCollection.AddDbContext < JandLReportingContext > ( options = > options.UseSqlServer ( Configuration.GetConnectionString ( `` JandLReporting '' ) ) , ServiceLifetime.Transient ) ; //serviceCollection.AddDbContext < JLMIDBContext > ( options = > options.UseSqlServer ( Configuration.GetConnectionString ( `` JLMIDB '' ) ) , ServiceLifetime.Scoped ) ; serviceCollection.Configure < TimerSettings > ( Configuration.GetSection ( `` TimerSettings '' ) ) ; serviceCollection.Configure < AppSettings > ( Configuration.GetSection ( `` AppSettings '' ) ) ; return serviceCollection ; } private static IServiceProvider ConfigureIoC ( IServiceCollection serviceCollection ) { //Setup StructureMap var container = new Container ( ) ; container.Configure ( config = > { config.Scan ( scan = > { scan.AssemblyContainingType ( typeof ( Program ) ) ; scan.AssembliesFromApplicationBaseDirectory ( ) ; scan.AssembliesAndExecutablesFromApplicationBaseDirectory ( ) ; scan.WithDefaultConventions ( ) ; } ) ; config.Populate ( serviceCollection ) ; } ) ; return container.GetInstance < IServiceProvider > ( ) ; } private static void ConfigureLogging ( IServiceProvider serviceProvider ) { LoggerFactory = serviceProvider.GetService < ILoggerFactory > ( ) .AddConsole ( Configuration.GetSection ( `` Logging '' ) ) .AddFile ( Configuration.GetSection ( `` Logging '' ) ) .AddDebug ( ) ; } } public class WindowsService : MicroService , IWindowsService { private readonly ILogger _logger ; private readonly IServiceProvider _serviceProvider ; private readonly TimerSettings _timerSettings ; public WindowsService ( ILogger < WindowsService > logger , IServiceProvider serviceProvider , IOptions < TimerSettings > timerSettings ) { _logger = logger ; _serviceProvider = serviceProvider ; _timerSettings = timerSettings.Value ; } public void Start ( ) { StartBase ( ) ; Timers.Start ( `` ServiceTimer '' , GetTimerInterval ( ) , async ( ) = > { await PollingPassAsyc ( ) ; } , ( error ) = > { _logger.LogCritical ( $ '' Exception while starting the service : { error } \n '' ) ; } ) ; } private async Task PollingPassAsyc ( ) { using ( var upgradeOpportunityService = _serviceProvider.GetService < IUpgradeOpportunityService > ( ) ) { await upgradeOpportunityService.FindUpgradeOpportunitiesAsync ( ) ; } } private int GetTimerInterval ( ) { return _timerSettings.IntervalMinutes * 60 * 1000 ; } public void Stop ( ) { StopBase ( ) ; _logger.LogInformation ( $ '' Service has stopped '' ) ; } }"
let s = System.Diagnostics.Stopwatch ( ) let mutable a = 1s.Start ( ) for i in 0 .. 1000000000 do if i < 0 then if i < 0 then a < - 4printfn `` fast = % d '' s.ElapsedMillisecondss.Restart ( ) for i in 0 .. 1000000000 do if i < 0 & & i < 0 then a < - 4printfn `` slow1 = % d '' s.ElapsedMillisecondss.Restart ( ) for i in 0 .. 1000000000 do if i < 0 & i < 0 then a < - 4printfn `` slow2 = % d '' s.ElapsedMilliseconds
new ListItem ( datareader [ `` dc '' ] ) ; ( along those lines ) .
public class RegistrationManager { public List < object > RegisteredObjects ; public bool TryRegisterObject ( object o ) { // ... // Add or not to Registered // ... } }
static void Main ( string [ ] args ) { Console.WriteLine ( `` From String : string name = WindowsIdentity.GetCurrent ( ) .Name '' ) ; string name = WindowsIdentity.GetCurrent ( ) .Name ; Console.WriteLine ( `` name : `` + name ) ; Console.WriteLine ( `` name.GetHashCode ( ) .GetType ( ) : `` + name.GetHashCode ( ) .GetType ( ) ) ; Console.WriteLine ( `` name.GetHashCode ( ) : `` + name.GetHashCode ( ) ) ; Console.WriteLine ( `` name.GetHashCode ( ) .ToString ( ) : `` + name.GetHashCode ( ) .ToString ( ) ) ; Console.WriteLine ( ) ; Console.WriteLine ( ) ; Console.WriteLine ( `` Direct '' ) ; Console.WriteLine ( `` WindowsIdentity.GetCurrent ( ) .Name : `` + WindowsIdentity.GetCurrent ( ) .Name ) ; Console.WriteLine ( `` WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .GetType ( ) : `` + WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .GetType ( ) ) ; Console.WriteLine ( `` WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) : `` + WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) ) ; Console.WriteLine ( `` WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .ToString ( ) : `` + WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .ToString ( ) ) ; Console.WriteLine ( ) ; Console.WriteLine ( ) ; Console.WriteLine ( `` Press Enter to continue '' ) ; Console.ReadLine ( ) ; } From String : string name = WindowsIdentity.GetCurrent ( ) .Namename : COMMARC\tjename.GetHashCode ( ) .GetType ( ) : System.Int32name.GetHashCode ( ) : - ? 2097695743name.GetHashCode ( ) .ToString ( ) : - ? 2097695743DirectWindowsIdentity.GetCurrent ( ) .Name : COMMARC\tjeWindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .GetType ( ) : System.Int32WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) : - ? 2097695743WindowsIdentity.GetCurrent ( ) .Name.GetHashCode ( ) .ToString ( ) : - ? 2097695743Press Enter to continue
"//field levelprivate static Random _random = new Random ( ) ; //used in a method_random.Next ( 0 , 2 )"
internal bool isFileExists ( ) { StringBuilder fileName = new StringBuilder ( AppDomain.CurrentDomain.BaseDirectory + `` Registry\\ '' + postalCode + `` .html '' ) ; if ( System.IO.File.Exists ( fileName.ToString ( ) ) ) { return true ; } else { return false ; } }
var q = new Queue < object > ( ) ; lock ( q.SyncRoot ) { ... } Queue < T > does not provide a defintion for SyncRoot blah blah ...
"IStructuralEquatable array11 = new int [ ] { 1 , 1 } ; IStructuralEquatable array12 = new int [ ] { 1 , 2 } ; IStructuralEquatable array22 = new int [ ] { 2 , 2 } ; var comparer = EqualityComparer < int > .Default ; Console.WriteLine ( array11.GetHashCode ( comparer ) ) ; // 32Console.WriteLine ( array12.GetHashCode ( comparer ) ) ; // 32Console.WriteLine ( array22.GetHashCode ( comparer ) ) ; // 64"
"MessageBox.Show ( string.Format ( `` You have purchased ' { 0 } ' ( { 1 } ) . Currently , the value of { 0 } is { 2 : C } / share . `` , stock.Symbol , stock.CompanyName , stock.ValuePerShare ) , Resources.FrmMain_btnVoting_Click_Vote_Purchase , MessageBoxButtons.OK , MessageBoxIcon.Information ) ;"
"< osm > < n id= '' 2638006578 '' l= '' 5.9295547 '' b= '' 52.5619519 '' / > < n id= '' 2638006579 '' l= '' 5.9301973 '' b= '' 52.5619526 '' / > < n id= '' 2638006581 '' l= '' 5.9303625 '' b= '' 52.5619565 '' / > < n id= '' 2638006583 '' l= '' 5.9389539 '' b= '' 52.5619577 '' / > < n id= '' 2638006589 '' l= '' 5.9386643 '' b= '' 52.5619733 '' / > < n id= '' 2638006590 '' l= '' 5.9296231 '' b= '' 52.5619760 '' / > < n id= '' 2638006595 '' l= '' 5.9358987 '' b= '' 52.5619864 '' / > < n id= '' 2638006596 '' l= '' 5.9335913 '' b= '' 52.5619865 '' / > < w id= '' 453071384 '' > < nd rf= '' 2638006581 '' / > < nd rf= '' 2638006590 '' / > < nd rf= '' 2638006596 '' / > < nd rf= '' 2638006583 '' / > < nd rf= '' 2638006578 '' / > < /w > < w id= '' 453071385 '' > < nd rf= '' 2638006596 '' / > < nd rf= '' 2638006578 '' / > < nd rf= '' 2638006581 '' / > < nd rf= '' 2638006583 '' / > < /w > < /osm > [ XmlRoot ( `` osm '' ) ] public class DataCollection { [ XmlElement ( `` n '' ) ] public List < Node > Nodes { get ; private set ; } [ XmlElement ( `` w '' ) ] public List < Way > Ways { get ; private set ; } public DataCollection ( ) { this.Nodes = new List < Node > ( ) ; this.Ways = new List < Way > ( ) ; } } [ Serializable ( ) ] public class Node { [ XmlAttribute ( `` id '' , DataType = `` long '' ) ] public long ID { get ; set ; } [ XmlAttribute ( `` w '' , DataType = `` double '' ) ] public double Lat { get ; set ; } [ XmlAttribute ( `` l '' , DataType = `` double '' ) ] public double Lon { get ; set ; } } [ Serializable ( ) ] public class Way { [ XmlAttribute ( `` id '' , DataType = `` long '' ) ] public long ID { get ; set ; } [ XmlElement ( `` nd '' ) ] public List < NodeReference > References { get ; private set ; } public Way ( ) { this.References = new List < NodeReference > ( ) ; } } [ Serializable ( ) ] public class NodeReference { [ XmlAttribute ( `` rf '' , DataType = `` long '' ) ] public long ReferenceID { get ; set ; } } public static void Read ( ) { XmlSerializer serializer = new XmlSerializer ( typeof ( DataCollection ) ) ; using ( FileStream fileStream = new FileStream ( @ '' path/to/file.xml '' , FileMode.Open ) ) { DataCollection result = ( DataCollection ) serializer.Deserialize ( fileStream ) ; // Example Requested usage : result.Ways [ 0 ] .Nodes } Console.Write ( `` '' ) ; }"
"< Grid > < Image x : Name= '' BackgroundImage '' Source= '' /Assets/background.png '' / > < Rectangle x : Name= '' ClippingRect '' Margin= '' 50 '' Fill= '' # 30f0 '' / > < /Grid > var graphicsEffect = new BlendEffect { Mode = BlendEffectMode.Multiply , Background = new ColorSourceEffect { Name = `` Tint '' , Color = Windows.UI.Color.FromArgb ( 50,0,255,0 ) , } , Foreground = new GaussianBlurEffect ( ) { Name = `` Blur '' , Source = new CompositionEffectSourceParameter ( `` Backdrop '' ) , BlurAmount = ( float ) 20 , BorderMode = EffectBorderMode.Hard , } } ; var blurEffectFactory = _compositor.CreateEffectFactory ( graphicsEffect , new [ ] { `` Blur.BlurAmount '' , `` Tint.Color '' } ) ; var _brush = blurEffectFactory.CreateBrush ( ) ; _brush.SetSourceParameter ( `` Backdrop '' , _compositor.CreateBackdropBrush ( ) ) ; var blurSprite = _compositor.CreateSpriteVisual ( ) ; blurSprite.Size = new Vector2 ( ( float ) BackgroundImage.ActualWidth , ( float ) BackgroundImage.ActualHeight ) ; blurSprite.Brush = _brush ; ElementCompositionPreview.SetElementChildVisual ( BackgroundImage , blurSprite ) ;"
public string Forename { get { return CurrentPerson.Forename ; } set { if ( Forename ! = value ) { CurrentPerson.Forename = value ; NotifyPropertyChanged ( `` Forename '' ) ; } } }
"using System ; using System.Threading ; namespace OriginalCallStackIsLostOnRethrow { class Program { static void Main ( string [ ] args ) { try { A2 ( ) ; // Uncomment this to see how the unhandled // exception in the foreground thread causes // the program to terminate // An exception in this foreground thread // *does* terminate the program // var t = new Thread ( ( ) = > { // throw new DivideByZeroException ( ) ; // } ) ; // t.Start ( ) ; } catch ( Exception ex ) { // I am not expecting anything from the // threads to come here , which is fine Console.WriteLine ( ex ) ; } finally { Console.WriteLine ( `` Press any key to exit ... '' ) ; Console.ReadKey ( ) ; } } static void A2 ( ) { B2 ( ) ; } static void B2 ( ) { C2 ( ) ; } static void C2 ( ) { D2 ( ) ; } static void D2 ( ) { Action action = ( ) = > { Console.WriteLine ( $ '' D2 called on worker # { Thread.CurrentThread.ManagedThreadId } . Exception will occur while running D2 '' ) ; throw new DivideByZeroException ( ) ; Console.WriteLine ( `` Do we get here ? Obviously not ! `` ) ; } ; action.BeginInvoke ( ar = > Console.WriteLine ( $ '' D2 completed on worker thread # { Thread.CurrentThread.ManagedThreadId } '' ) , null ) ; } } } Press any key to exit ... D2 called on worker # 6 . Exception will occur while running D2D2 completed on worker thread # 6 using System ; using System.Threading ; namespace OriginalCallStackIsLostOnRethrow { class Program { static void Main ( string [ ] args ) { try { // A2 ( ) ; A3 ( ) ; } catch ( Exception ex ) { Console.WriteLine ( ex ) ; } finally { Console.WriteLine ( `` Press any key to exit ... '' ) ; Console.ReadKey ( ) ; } } static void A2 ( ) { B2 ( ) ; } static void B2 ( ) { C2 ( ) ; } static void C2 ( ) { D2 ( ) ; } static void D2 ( ) { Action action = ( ) = > { try { Console.WriteLine ( $ '' D2 called on worker # { Thread.CurrentThread.ManagedThreadId } . Exception will occur while running D2 '' ) ; throw new DivideByZeroException ( ) ; // Console.WriteLine ( `` Do we get here ? Obviously not ! `` ) ; } catch ( Exception ex ) { Console.WriteLine ( ex ) ; } } ; action.BeginInvoke ( ar = > Console.WriteLine ( $ '' D2 completed on worker thread # { Thread.CurrentThread.ManagedThreadId } '' ) , null ) ; } static void A3 ( ) { B3 ( ) ; } static void B3 ( ) { C3 ( ) ; } static void C3 ( ) { D3 ( ) ; } static void D3 ( ) { Action action = ( ) = > { Console.WriteLine ( $ '' D2 called on worker # { Thread.CurrentThread.ManagedThreadId } . `` ) ; } ; action.BeginInvoke ( ar = > { Console.WriteLine ( $ '' D2 completed on worker thread # { Thread.CurrentThread.ManagedThreadId } . Oh , but wait ! Exception ! `` ) ; // This one on the completion callback does terminate the program throw new DivideByZeroException ( ) ; } , null ) ; } } }"
var inputBlock = new BufferBlock < EventBase > ( ) ; //if EventBase is Meeting then go to block X//if EventBase is Appointment the go to block Y
"protected override CreateParams CreateParams { get { CreateParams cp = base.CreateParams ; cp.ExStyle |= 0x20 ; return cp ; } } SetStyle ( ControlStyles.SupportsTransparentBackColor , true ) ; public class TransparentControl : Panel { public bool drag = false ; public bool enab = false ; private int m_opacity = 100 ; private int alpha ; public TransparentControl ( ) { SetStyle ( ControlStyles.SupportsTransparentBackColor , true ) ; SetStyle ( ControlStyles.Opaque , true ) ; this.BackColor = Color.Transparent ; } public int Opacity { get { if ( m_opacity > 100 ) { m_opacity = 100 ; } else if ( m_opacity < 1 ) { m_opacity = 1 ; } return this.m_opacity ; } set { this.m_opacity = value ; if ( this.Parent ! = null ) { Parent.Invalidate ( this.Bounds , true ) ; } } } protected override CreateParams CreateParams { get { CreateParams cp = base.CreateParams ; cp.ExStyle = cp.ExStyle | 0x20 ; return cp ; } } protected override void OnPaint ( PaintEventArgs e ) { Graphics g = e.Graphics ; Rectangle bounds = new Rectangle ( 0 , 0 , this.Width - 1 , this.Height - 1 ) ; Color frmColor = this.Parent.BackColor ; Brush bckColor = default ( Brush ) ; alpha = ( m_opacity * 255 ) / 100 ; if ( drag ) { Color dragBckColor = default ( Color ) ; if ( BackColor ! = Color.Transparent ) { int Rb = BackColor.R * alpha / 255 + frmColor.R * ( 255 - alpha ) / 255 ; int Gb = BackColor.G * alpha / 255 + frmColor.G * ( 255 - alpha ) / 255 ; int Bb = BackColor.B * alpha / 255 + frmColor.B * ( 255 - alpha ) / 255 ; dragBckColor = Color.FromArgb ( Rb , Gb , Bb ) ; } else { dragBckColor = frmColor ; } alpha = 255 ; bckColor = new SolidBrush ( Color.FromArgb ( alpha , dragBckColor ) ) ; } else { bckColor = new SolidBrush ( Color.FromArgb ( alpha , this.BackColor ) ) ; } if ( this.BackColor ! = Color.Transparent | drag ) { g.FillRectangle ( bckColor , bounds ) ; } bckColor.Dispose ( ) ; g.Dispose ( ) ; base.OnPaint ( e ) ; } protected override void OnBackColorChanged ( EventArgs e ) { if ( this.Parent ! = null ) { Parent.Invalidate ( this.Bounds , true ) ; } base.OnBackColorChanged ( e ) ; } protected override void OnParentBackColorChanged ( EventArgs e ) { this.Invalidate ( ) ; base.OnParentBackColorChanged ( e ) ; } } Parent.Controls.Cast < Control > ( ) .Where ( c = > Parent.Controls.GetChildIndex ( c ) > Parent.Controls.GetChildIndex ( this ) ) .Where ( c = > c.Bounds.IntersectsWith ( this.Bounds ) ) .OrderByDescending ( c = > Parent.Controls.GetChildIndex ( c ) ) .ToList ( ) .ForEach ( c = > c.DrawToBitmap ( bmp , c.Bounds ) ) ; var pts = this.PointToScreen ( circularprogressbar1.Location ) ; pts = circularprogressbar2.PointToClient ( pts ) ; circularprogressbar1.Parent = circularprogressbar2 ; circularprogressbar1.Location = pts ;"
"enum ColorEnum { Red , Green , Blue } ; ObjectType thatObject = obtainThatObject ( ) ; if ( thatObject.Color == ColorEnum.Red ) { //blah } dynamic thatObject = obtainThatObject ( ) ; if ( thatObject.Color.ToString ( ) == `` Red '' ) { //blah }"
"using System ; using System.Threading ; public class MutexSample { static Mutex gM1 ; static Mutex gM2 ; const int ITERS = 100 ; static AutoResetEvent Event1 = new AutoResetEvent ( false ) ; static AutoResetEvent Event2 = new AutoResetEvent ( false ) ; static AutoResetEvent Event3 = new AutoResetEvent ( false ) ; static AutoResetEvent Event4 = new AutoResetEvent ( false ) ; public static void Main ( String [ ] args ) { Console.WriteLine ( `` Mutex Sample ... '' ) ; // Create Mutex initialOwned , with name of `` MyMutex '' . gM1 = new Mutex ( true , `` MyMutex '' ) ; // Create Mutex initialOwned , with no name . gM2 = new Mutex ( true ) ; Console.WriteLine ( `` - Main Owns gM1 and gM2 '' ) ; AutoResetEvent [ ] evs = new AutoResetEvent [ 4 ] ; evs [ 0 ] = Event1 ; // Event for t1 evs [ 1 ] = Event2 ; // Event for t2 evs [ 2 ] = Event3 ; // Event for t3 evs [ 3 ] = Event4 ; // Event for t4 MutexSample tm = new MutexSample ( ) ; Thread thread1 = new Thread ( new ThreadStart ( tm.t1Start ) ) ; Thread thread2 = new Thread ( new ThreadStart ( tm.t2Start ) ) ; Thread thread3 = new Thread ( new ThreadStart ( tm.t3Start ) ) ; Thread thread4 = new Thread ( new ThreadStart ( tm.t4Start ) ) ; thread1.Start ( ) ; // Does Mutex.WaitAll ( Mutex [ ] of gM1 and gM2 ) thread2.Start ( ) ; // Does Mutex.WaitOne ( Mutex gM1 ) thread3.Start ( ) ; // Does Mutex.WaitAny ( Mutex [ ] of gM1 and gM2 ) thread4.Start ( ) ; // Does Mutex.WaitOne ( Mutex gM2 ) Thread.Sleep ( 2000 ) ; Console.WriteLine ( `` - Main releases gM1 '' ) ; gM1.ReleaseMutex ( ) ; // t2 and t3 will end and signal Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` - Main releases gM2 '' ) ; gM2.ReleaseMutex ( ) ; // t1 and t4 will end and signal // Waiting until all four threads signal that they are done . WaitHandle.WaitAll ( evs ) ; Console.WriteLine ( `` ... Mutex Sample '' ) ; } public void t1Start ( ) { Console.WriteLine ( `` t1Start started , Mutex.WaitAll ( Mutex [ ] ) '' ) ; Mutex [ ] gMs = new Mutex [ 2 ] ; gMs [ 0 ] = gM1 ; // Create and load an array of Mutex for WaitAll call gMs [ 1 ] = gM2 ; Mutex.WaitAll ( gMs ) ; // Waits until both gM1 and gM2 are released Thread.Sleep ( 2000 ) ; Console.WriteLine ( `` t1Start finished , Mutex.WaitAll ( Mutex [ ] ) satisfied '' ) ; Event1.Set ( ) ; // AutoResetEvent.Set ( ) flagging method is done } public void t2Start ( ) { Console.WriteLine ( `` t2Start started , gM1.WaitOne ( ) '' ) ; gM1.WaitOne ( ) ; // Waits until Mutex gM1 is released -- -errors is here -- - Console.WriteLine ( `` t2Start finished , gM1.WaitOne ( ) satisfied '' ) ; Event2.Set ( ) ; // AutoResetEvent.Set ( ) flagging method is done } public void t3Start ( ) { Console.WriteLine ( `` t3Start started , Mutex.WaitAny ( Mutex [ ] ) '' ) ; Mutex [ ] gMs = new Mutex [ 2 ] ; gMs [ 0 ] = gM1 ; // Create and load an array of Mutex for WaitAny call gMs [ 1 ] = gM2 ; Mutex.WaitAny ( gMs ) ; // Waits until either Mutex is released Console.WriteLine ( `` t3Start finished , Mutex.WaitAny ( Mutex [ ] ) '' ) ; Event3.Set ( ) ; // AutoResetEvent.Set ( ) flagging method is done } public void t4Start ( ) { Console.WriteLine ( `` t4Start started , gM2.WaitOne ( ) '' ) ; gM2.WaitOne ( ) ; // Waits until Mutex gM2 is released Console.WriteLine ( `` t4Start finished , gM2.WaitOne ( ) '' ) ; Event4.Set ( ) ; // AutoResetEvent.Set ( ) flagging method is done } }"
"public class PurchaseOrder { public string NewNumber { get ; private set ; } public string NewLine { get ; private set ; } new public PurchaseOrder ( string purchaseOrderText ) { NewNumber = GetNewNumber ( purchaseOrderText ) ; NewLine = GetNewLine ( purchaseOrderText ) ; } // ... definition of GetNewNumber / GetNewLine ... // both return null if they ca n't parse the text } public void Purchase_Order_Is_Valid_When_New_Purchase_Order_Number_And_Line_Number_Are_Not_Null ( ) { PurchaseOrder order = new PurchaseOrder ( ) { NewNumber = `` 123456 '' , NewLine = `` 001 '' } ; Assert.IsTrue ( order.IsValid ) ; }"
< div > < a href= '' @ Href '' onclick= '' @ OnClick '' class= '' @ Classes '' style= '' @ Styles '' > @ Content < /a > < /div >
( ( object ) false ) == ( ( object ) false ) ( ( object ) false ) .Equals ( ( object ) false )
Me.flowpanelMenuRules.Controls.Add ( PanelRule ( i ) )
interface IStartup { void Configuration ( IAppBuilder app ) ; } public class MyStartup : IStartup { public void Configuration ( IAppBuilder app ) { ... } } public void Start < T > ( ) where T : IStartup
"ThreadPool.QueueUserWorkItem ( myComputationCall , my_computation_data ) ; public static void myComputationCall ( Object my_computation_data ) { try { MyDataObject data = ( MyDataObject ) my_computation_data ; var computation_run = new MyComputation ( data.parameter1 , data.parameter2 ) ; data.result = computation_run.result ; } finally { if ( Interlocked.Decrement ( ref num_work_items_remaining ) == 0 ) done_event.Set ( ) ; } } private static ManualResetEvent done_event ; ... done_event = new ManualResetEvent ( false ) ;"
"Dim o As Object = If ( myBool , 5 , ... )"
class Program { static void Main ( string [ ] args ) { var types = typeof ( Program ) .Assembly.GetTypes ( ) .Where ( t = > ! t.IsAbstract & & t.IsClass ) ; foreach ( var type in types ) { Console.WriteLine ( type.FullName ) ; } Console.ReadKey ( ) ; } }
GoogleCredential credential = GoogleCredential.GetApplicationDefaultAsync ( ) .Result ; Console.WriteLine ( Environment.GetEnvironmentVariable ( `` GOOGLE_APPLICATION_CREDENTIALS '' ) ) ;
class Program { class Test { public string Name { get ; set ; } } static void Main ( string [ ] args ) { //Here I 'm using reflection to inspect methods of Test class Type type = typeof ( Test ) ; foreach ( var item in type.GetMethods ( ) ) { Console.WriteLine ( item.Name ) ; } } } static void Main ( string [ ] args ) { Type type = typeof ( Test ) ; foreach ( var item in type.GetFields ( ) ) { Console.WriteLine ( item.Name ) ; } }
"connection.Execute ( @ '' set nocount on create table # t ( i int ) set nocount off insert # t select @ a a union all select @ b set nocount on drop table # t '' , new { a=1 , b=2 } ) .IsEqualTo ( 2 ) ;"
"private void Form1_MouseClick ( object sender , MouseEventArgs e ) { if ( e.Button == MouseButtons.Right ) { paddle.movePaddleRight ( ) ; this.Invalidate ( ) ; } if ( e.Button == MouseButtons.Left ) { paddle.movePaddleLeft ( ) ; this.Invalidate ( ) ; } }"
public async Task < ActionResult > Index ( int [ ] ids ) { List < int > listOfDataPoints = dataPointService ( ids ) ; List < Task > dpTaskList = new List < Task > ( ) ; foreach ( var x in listOfDataPoints ) { dpTaskList.Add ( C_Async ( x ) ) ; } await Task.WhenAll ( dpTaskList ) ; return View ( ) ; } private async Task C_Async ( int id ) { //this method executes very fast var idTemp = paddID ( id ) ; await D_Async ( idTemp ) ; } private async Task D_Async ( string id ) { //this method executes very fast await E_Async ( id ) ; } private async Task E_Async ( string url ) { //this method performs the actual async IO result = await new WebClient ( ) .DownloadStringTaskAsync ( new Uri ( url ) ) saveContent ( result ) ; }
"DataService1.DataEntities dataEntities = new ( constructorArg1 , ... )"
static void Main ( string [ ] args ) { int age = 3 ; object myBox = age ; AddThree ( myBox ) ; // here myBox = 3 but I was expecting to be = 6 } private static void AddThree ( object age2 ) { age2 = ( int ) age2 + 3 ; }
"using System ; using System.Runtime.InteropServices ; using System.Security ; namespace Test { public delegate void GlfwCharCallback ( GlfwWindow window , Char character ) ; [ StructLayout ( LayoutKind.Explicit ) ] public struct GlfwMonitor { private GlfwMonitor ( IntPtr ptr ) { _nativePtr = ptr ; } [ FieldOffset ( 0 ) ] private readonly IntPtr _nativePtr ; public static readonly GlfwMonitor Null = new GlfwMonitor ( IntPtr.Zero ) ; } [ StructLayout ( LayoutKind.Explicit ) ] public struct GlfwWindow { private GlfwWindow ( IntPtr ptr ) { _nativePtr = ptr ; } [ FieldOffset ( 0 ) ] private readonly IntPtr _nativePtr ; public static GlfwWindow Null = new GlfwWindow ( IntPtr.Zero ) ; } public class Wrap { [ DllImport ( `` GLFW3 '' , CallingConvention = CallingConvention.Cdecl ) , SuppressUnmanagedCodeSecurity ] private static extern Int32 glfwInit ( ) ; [ DllImport ( `` GLFW3 '' , CallingConvention = CallingConvention.Cdecl ) , SuppressUnmanagedCodeSecurity ] internal static extern GlfwWindow glfwCreateWindow ( Int32 width , Int32 height , [ MarshalAs ( UnmanagedType.LPStr ) ] String title , GlfwMonitor monitor , GlfwWindow share ) ; [ DllImport ( `` GLFW3 '' , CallingConvention = CallingConvention.Cdecl ) , SuppressUnmanagedCodeSecurity ] internal static extern void glfwSetCharCallback ( GlfwWindow window , GlfwCharCallback callback ) ; [ DllImport ( `` GLFW3 '' , CallingConvention = CallingConvention.Cdecl ) , SuppressUnmanagedCodeSecurity ] internal static extern void glfwPollEvents ( ) ; public static Boolean Init ( ) { return glfwInit ( ) == 1 ; } public static GlfwWindow CreateWindow ( Int32 width , Int32 height , String title , GlfwMonitor monitor , GlfwWindow share ) { return glfwCreateWindow ( width , height , title , monitor , share ) ; } public static void SetCharCallback ( GlfwWindow window , GlfwCharCallback callback ) { glfwSetCharCallback ( window , callback ) ; } public static void PollEvents ( ) { glfwPollEvents ( ) ; } } } using System ; namespace Test { class Program { static void Main ( ) { Wrap.Init ( ) ; var window = Wrap.CreateWindow ( 800 , 600 , `` None '' , GlfwMonitor.Null , GlfwWindow.Null ) ; Wrap.SetCharCallback ( window , ( glfwWindow , character ) = > Console.WriteLine ( character ) ) ; while ( true ) { Wrap.PollEvents ( ) ; } } } }"
private int MyIntField ; private string MyStringField ; public int MyInt { get { return MyIntField ; } set { MyIntField = value ; } } public string MyString { get { return MyStringField ; } set { MyStringField = value ; } } private int MyIntField ; public int MyInt { get { return MyIntField ; } set { MyIntField = value ; } } private string MyStringField ; public string MyString { get { return MyStringField ; } set { MyStringField = value ; } }
static void Main ( string [ ] args ) { const int count = 10000000 ; var stopwatch = new Stopwatch ( ) ; var list = new List < int > ( count ) ; var rnd = new Random ( ) ; for ( int i = 0 ; i < count ; i++ ) { list.Add ( rnd.Next ( ) ) ; } const int repeat = 20 ; double indeces = 0 ; double forEach = 0 ; for ( int iteration = 0 ; iteration < repeat ; iteration++ ) { stopwatch.Restart ( ) ; long tmp = 0 ; for ( int i = 0 ; i < count ; i++ ) { tmp += list [ i ] ; } indeces += stopwatch.Elapsed.TotalSeconds ; stopwatch.Restart ( ) ; foreach ( var integer in list ) { tmp += integer ; } forEach += stopwatch.Elapsed.TotalSeconds ; } Console.WriteLine ( indeces /repeat ) ; Console.WriteLine ( forEach /repeat ) ; } 0.0347//index access 0.0737//enumerating //the same as before ... IEnumerable < int > listAsEnumerable = list ; //the same as before ... foreach ( var integer in listAsEnumerable ) { tmp += integer ; } ... 0.0321//index access 0.1246//enumerating ( 2x slower ! )
"Program ( ) { Type t = typeof ( Foo ) ; Foo foo = new Foo ( ) ; PropertyInfo pi = memberinfo ( Foo.Name ) as PropertyInfo ; // or shall it be like this // PropertyInfo pi = memberinfo ( foo.Name ) as PropertyInfo ; string name = pi.GetValue ( foo , null ) ; }"
"public class Parent { public string FirstName { get ; set ; } } public class Child { public Child ( ) { Mom = new Parent ( ) ; // so we do n't have to worry about nulls } public string FavoriteToy { get ; set ; } public Parent Mom { get ; set ; } } [ TestFixture ] public class Tests { [ Test ] public void MyTest ( ) { var kid = new Child ( ) ; Expression < Func < Child , string > > momNameSelector = ( ch = > ch.Mom.FirstName ) ; Expression < Func < Child , string > > toyNameSelector = ( ch = > ch.FavoriteToy ) ; kid.ExecuteMagicSetter ( momNameSelector , `` Jane '' ) ; kid.ExecuteMagicSetter ( toyNameSelector , `` Bopp-It ! `` ) ; Assert.That ( kid.Mom.FirstName , Is.EqualTo ( `` Jane '' ) ) ; Assert.That ( kid.FavoriteToy , Is.EqualTo ( `` Bopp-It ! `` ) ) ; } } public static TEntity ExecuteMagicSetter < TEntity , TProperty > ( this TEntity obj , Expression < Func < TEntity , TProperty > > selector , TProperty value ) where TEntity : class , new ( ) // I do n't require this but I can allow this restriction if it helps { // magic }"
"private void Timer1_Tick ( object sender , EventArgs e ) { txtTimerValue.Text = DateTime.Now.ToString ( `` hh : mm : ss.FFF '' , CultureInfo.InvariantCulture ) ; } private void Timer1_Tick ( object sender , EventArgs e ) { txtTimerValue.Text = DateTime.Now.ToString ( `` hh : mm : ss.FFF '' , CultureInfo.InvariantCulture ) ; List < int > primeNumbersList = WorkOutFirstNPrimeNumbers ( 500 ) ; PrintPrimeNumbersToScreen ( primeNumbersList ) ; } private List < int > WorkOutFirstNPrimeNumbers ( int n ) { List < int > primeNumbersList = new List < int > ( ) ; txtPrimeAnswers.Clear ( ) ; int counter = 1 ; while ( primeNumbersList.Count < n ) { if ( DetermineIfPrime ( counter ) ) { primeNumbersList.Add ( counter ) ; } counter++ ; } return primeNumbersList ; } private bool DetermineIfPrime ( int n ) { for ( int i = 2 ; i < n ; i++ ) { if ( n % i == 0 ) { return false ; } } return true ; } private void PrintPrimeNumbersToScreen ( List < int > primeNumbersList ) { foreach ( int primeNumber in primeNumbersList ) { txtPrimeAnswers.Text += String.Format ( `` The value { 0 } is prime \r\n '' , primeNumber ) ; } }"
public abstract class Query { [ DataMember ] public Cube Cube { get ; private set ; } [ DataMember ] public List < Filter > Filters { get ; private set ; } [ DataMember ] public Slicer Slicer { get ; set ; } } Query q = ... ; RoamingSettings.Values [ `` query '' ] = q ;
"public JsonResult AutoComplete ( string term ) { var result = ( from c in db.CategoryContents where c.Title.ToLower ( ) .Contains ( term.ToLower ( ) ) select new { c.Title , c.ImageURL , Description = c.Category.Name + `` Review '' } ) .Distinct ( ) ; return Json ( result , JsonRequestBehavior.AllowGet ) ; } $ ( document ) .ready ( function ( ) { var displayLimit = 7 ; // jqueryui autocomplete configuration $ ( `` # term '' ) .autocomplete ( { source : function ( req , resp ) { // get JSON object from SearchController $ .ajax ( { url : `` /Search/AutoComplete '' , // SearchController JsonResult type : `` POST '' , dataType : `` json '' , data : { term : req.term } , success : function ( data ) { resp ( $ .map ( data , function ( item ) { return { label : item.Name , value : item.Name , imageURL : item.ImageURL , id : item.ID } ; } ) ) ; } } ) ; } , select : function ( event , ui ) { // keyword selected ; parse values and forward off to ProductController 's ViewProduct View var selected = ui.item ; var mdlNum , mdlName ; if ( selected.value ! == null ) { var array = selected.value.split ( ' ' ) ; mdlNum = array [ 0 ] .toLowerCase ( ) ; // mdlName = selected.value.replace ( array [ 0 ] , `` ) .trim ( ) .toLowerCase ( ) .replace ( / [ ^a-z0-9 ] +/g , ' ' ) ; // window.location.replace ( 'http : // ' + location.host + '/Search/Refine ? ref= ' + mdlNum + `` + mdlName ) ; window.location.replace ( 'http : // ' + location.host + '/Category/Details/ ' + ui.id ) ; } } , open : function ( ) { $ ( 'ul.ui-autocomplete ' ) .addClass ( 'opened ' ) } , close : function ( ) { $ ( 'ul.ui-autocomplete ' ) .removeClass ( 'opened ' ) .css ( 'display ' , 'block ' ) ; } } ) .data ( `` ui-autocomplete '' ) ._renderItem = function ( ul , item ) { //var inner_html = ' < a > < div id= '' example '' class= '' k-content '' > < div class= '' demo-section '' > < div class= '' .customers-list img '' > < img src= '' ' + `` ../common/theme/images/gallery/3.jpg '' + ' '' > < /div > < div class= '' customers-list h3 '' > ' + item.label + ' < /div > < div class= '' customers-list p '' > ' + item.description + ' < /div > < /div > < /div > < /a > ' ; var newText = String ( item.value ) .replace ( new RegExp ( this.term , `` gi '' ) , `` < strong > $ & < /strong > '' // `` < span class='ui-state-highlight ' > $ & < /span > '' ) ; var inner_html = ' < a > < div class= '' list_item_container '' > < div class= '' image '' > < img src= '' ' + item.imageURL + ' '' alt= '' '' / > < /div > < div class= '' labels '' > ' + newText + ' < /div > < div class= '' description '' > ' + item.id + ' < /div > < /div > < /a > ' ; return $ ( `` < li > < /li > '' ) .data ( `` item.autocomplete '' , item ) .append ( inner_html ) .appendTo ( ul ) ; } ; window.location.replace ( 'http : // ' + location.host + '/Category/Details/ ' + ui.id ) ;"
public interface IProblem { string QuestionText { get ; set ; } object Response { get ; } bool IsComplete ( ) ; bool IsCorrect ( ) ; } public abstract class Problem : IProblem { public string QuestionText { get ; set ; } public object Response { get ; protected set ; } public virtual bool IsComplete ( ) { return true ; } public abstract bool IsCorrect ( ) ; } public class BinaryProblem : Problem { public decimal N1 { get ; set ; } public decimal N2 { get ; set ; } public decimal Response { get { return ( decimal ) base.Response ; } set { base.Response = value ; } } public override bool IsCorrect ( ) { return N1 + N2 == Response ; } } static void Main ( string [ ] args ) { BinaryProblem p = new BinaryProblem ( ) ; p.N1 = 2 ; p.N2 = 4 ; p.Response = 6 ; IProblem p2 = p ; Console.WriteLine ( p2.Response ) ; Console.WriteLine ( p2.IsComplete ( ) .ToString ( ) ) ; }
"_________________ ________________________ ________________| | | | | ||PERSON PROPERTIES| | PERSONSITE PROPERTIES | |SITE PROPERTIES ||_________________| |________________________| |________________|| Name Person 1 | |Relation type for item 1| | Name for item 1||_________________| |________________________| |________________| |Relation type for item 2| | Name for item 2| |________________________| |________________| |Relation type for item 3| | Name for item 3| |________________________| |________________| _________________ ________________________ ________________| Name Person 2 | |Relation type for item 1| | Name for item 1||_________________| |________________________| |________________| |Relation type for item 2| | Name for item 1| |________________________| |________________| public class Person : IObject { public ICollection < PersonSite > PersonSites { get ; set ; } } public class PersonSite : IObject { public Person Person { get ; set ; } public Site Site { get ; set ; } public RelationType RelationType { get ; set ; } } public class Site : IObject { public ICollection < PersonSite > PersonSites { get ; set ; } } ____ | |0..* ______________ __|____|______ 1..* _______________| CSV EXPORTER |________| CSV TABLE ( T ) |__________| CSV COLUMN ( T ) ||______________| |______________| |_______________| | |1..* ______|________ | CSV ROWS ( T ) | |_______________| public class CSVExportTable < T > where T : IObject { private Matrix < string > Matrix { get ; set ; } private ICollection < CSVExportTableColumn < T > > Columns { get ; set ; } private ICollection < CSVExportTableRow < T > > Rows { get ; set ; } private ICollection < CSVExportTable < IObject > > SubTables { get ; set ; } private Expression < Func < T , object > > Link { get ; set ; } public CSVExportTable ( ) { this.Matrix = new Matrix < string > ( ) ; this.Columns = new List < CSVExportTableColumn < T > > ( ) ; this.SubTables = new List < CSVExportTable < IObject > > ( ) ; this.Rows = new List < CSVExportTableRow < T > > ( ) ; } public CSVExportTable < R > AddSubTable < R > ( Expression < Func < T , object > > link ) where R : IObject { /* This is where we create the link between the main table items and the subtable items ( = where we retreive Person = > Person.PersonSites as an ICollection < R > since the subtable has a different type ( T ! = R but they have the same interface ( IObject ) ) */ } public void AddColumn ( Expression < Func < T , object > > exportProperty ) { this.Columns.Add ( new CSVExportTableColumn < T > ( exportProperty ) ) ; } public Matrix < string > GenerateMatrix ( ) { int rowIndex= 0 ; foreach ( CSVExportTableRow < T > row in this.Rows ) { int columnIndex = 0 ; foreach ( CSVExportTableColumn < T > column in this.Columns ) { this.Matrix = this.Matrix.AddValue ( rowIndex , columnIndex , ( ( string ) column.ExportProperty.Compile ( ) .DynamicInvoke ( row.Item ) ) ) ; columnIndex++ ; } rowIndex++ ; } return this.Matrix ; } public Matrix < string > ApplyTemplate ( ICollection < T > items ) { // Generate rows foreach ( T item in items ) { this.Rows.Add ( new CSVExportTableRow < T > ( item ) ) ; } // Instantiate the matrix Matrix < string > matrix = new Matrix < string > ( ) ; // Generate matrix for every row foreach ( var row in this.Rows ) { matrix = GenerateMatrix ( ) ; // Generate matrix for every sub table foreach ( var subTable in this.SubTables ) { // This it where we should call ApplyTemplate for the current subTable with the elements that the link expression gave us ( ICollection ) . } } return matrix ; } } public class CSVExportTableColumn < T > where T : IObject { public Expression < Func < T , object > > ExportProperty { get ; set ; } public CSVExportTableColumn ( Expression < Func < T , object > > exportProperty ) { this.ExportProperty = exportProperty ; } }"
"try { Object aObject = myCollection [ myObject ] ; } catch ( Exception e ) { //if this is thrown , then the object does n't exist in the collection }"
"public void MyMethod ( ... ) { ... using ( MyTimeoutObject mto = new MyTimeoutObject ( new TimeSpan ( 0,0,30 ) ) ) { // Everything in here must complete within the timespan // or mto will throw an exception . When the using block // disposes of mto , then the timer is disabled and // disaster is averted . } ... } using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Timers ; public class MyTimeoutObject : IDisposable { private Timer timer = null ; public MyTimeoutObject ( TimeSpan ts ) { timer = new Timer ( ) ; timer.Elapsed += timer_Elapsed ; timer.Interval = ts.TotalMilliseconds ; timer.Start ( ) ; } void timer_Elapsed ( object sender , ElapsedEventArgs e ) { throw new TimeoutException ( `` A code block has timed out . `` ) ; } public void Dispose ( ) { if ( timer ! = null ) { timer.Stop ( ) ; } } }"
"class ModelA { public string Name { get ; set ; } public OberservableCollection < ModelB > Bs { get ; set ; } } class ModelB { public string Make { get ; set ; } public ObservableCollection < ModelC > Cs { get ; set ; } } class ModelC { public string Brand { get ; set ; } } < DataTemplate x : Key= '' modelATemplate '' > < Grid Margin= '' 5 '' > < Grid.RowDefinitions > < RowDefinition / > < /Grid.RowDefinitions > < ScrollViewer Grid.Row= '' 2 '' VerticalScrollBarVisibility= '' Auto '' > < ItemsControl ItemsSource= '' { Binding Bs } '' ItemTemplate= '' { StaticResource modelBTemplate } '' / > < /ScrollViewer > < /Grid > < /DataTemplate > < DataTemplate x : Key= '' modelBTemplate '' > < Grid Margin= '' 5 '' HorizontalAlignment= '' Center '' > < Grid.RowDefinitions > < RowDefinition / > < RowDefinition / > < /Grid.RowDefinitions > < TextBlock Grid.Row= '' 0 '' Text= '' { Binding Make } '' > < ItemsControl Grid.Row= '' 1 '' ItemsSource= '' { Binding Mode=OneWay , Path=Cs } '' ItemTemplate= '' { StaticResource ResourceKey=modelCTemplate } '' > < /ItemsControl > < /Grid > < /DataTemplate > public class ModelBViewModel { ModelB MyModelB { get ; set ; } }"
UsingTypes Namespace Class Types Variables Methods method names
using System ; using System.ComponentModel.DataAnnotations ; namespace BusinessRuleDemo { class MyBusinessClass { [ Required ] public string SomeRequiredProperty { get ; set ; } } } using System ; using System.ComponentModel ; namespace BusinessRuleDemo { class MyBusinessClass { [ DataAnnotations.Required ] public string SomeRequiredProperty { get ; set ; } } }
"let rec isprime x =primes| > Seq.takeWhile ( fun i - > i*i < = x ) | > Seq.forall ( fun i - > x % i < > 0 ) and primes = seq { yield 2 yield ! ( Seq.unfold ( fun i - > Some ( i , i+2 ) ) 3 ) | > Seq.filter isprime } let n = 1000let start = System.DateTime.Nowprintfn `` % d '' ( primes | > Seq.nth n ) let duration = System.DateTime.Now - startprintfn `` Elapsed Time : `` System.Console.WriteLine duration class Program { static bool isprime ( int n ) { foreach ( int p in primes ( ) ) { if ( p * p > n ) return true ; if ( n % p == 0 ) return false ; } return true ; } static IEnumerable < int > primes ( ) { yield return 2 ; for ( int i=3 ; ; i+=2 ) { if ( isprime ( i ) ) yield return i ; } } static void Main ( string [ ] args ) { int n = 1000 ; var pr = primes ( ) .GetEnumerator ( ) ; DateTime start = DateTime.Now ; for ( int count=0 ; count < n ; count++ ) { pr.MoveNext ( ) ; } Console.WriteLine ( pr.Current ) ; DateTime end = DateTime.Now ; Console.WriteLine ( `` Duration `` + ( end - start ) ) ; } }"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Collections.Concurrent ; using System.Threading ; namespace ConcurrentQueueSample { class Program { static SemaphoreSlim semaphoreSlim = new SemaphoreSlim ( 3 ) ; static void Main ( string [ ] args ) { System.Timers.Timer timer = new System.Timers.Timer ( ) ; timer.Elapsed += new System.Timers.ElapsedEventHandler ( timer_Elapsed ) ; timer.Interval = 1234 ; timer.Enabled = true ; timer.Start ( ) ; for ( int i = 0 ; i < 10 ; i++ ) new Thread ( go ) .Start ( i ) ; } static void timer_Elapsed ( object sender , System.Timers.ElapsedEventArgs e ) { semaphoreSlim.Release ( ) ; } static void go ( object i ) { Console.WriteLine ( `` id : { 0 } '' , i ) ; semaphoreSlim.Wait ( ) ; Console.WriteLine ( `` id : { 0 } is in '' , i ) ; Thread.Sleep ( 1250 ) ; Console.WriteLine ( `` id : { 0 } left ! `` , i ) ; } } }"
"Point currentPoint = e.GetPosition ( this ) ; // Determine the new amount to scroll.Point delta = new Point ( scrollStartPoint.X - currentPoint.X , scrollStartPoint.Y - currentPoint.Y ) ; if ( Math.Abs ( delta.X ) < PixelsToMoveToBeConsideredScroll & & Math.Abs ( delta.Y ) < PixelsToMoveToBeConsideredScroll ) return ; scrollTarget.X = scrollStartOffset.X + delta.X ; scrollTarget.Y = scrollStartOffset.Y + delta.Y ; // Scroll to the new position.sv.ScrollToHorizontalOffset ( scrollTarget.X ) ; sv.ScrollToVerticalOffset ( scrollTarget.Y ) ;"
property System : :ServiceProcess : :ServiceControllerStatus ^ Status { ServiceControllerStatus ^ get ( ) { return ( ServiceControllerStatus ) _status- > dwCurrentState ; } } System.Enum if ( ( ServiceControllerStatus ) currentService.Status == ServiceControllerStatus.Running ) //do smth
"List < Tuple < int , string > > list = new List < Tuple < int , string > > ( ) ; list.Add ( new Tuple < int , string > ( 1 , `` cat '' ) ) ; list.Add ( new Tuple < int , string > ( 100 , `` apple '' ) ) ; list.Add ( new Tuple < int , string > ( 2 , `` zebra '' ) ) ; list.Sort ( ( a , b ) = > a.Item1.CompareTo ( b.Item1 ) ) ; foreach ( var element in list ) { Console.WriteLine ( element ) ; } list.Sort ( ( a , b ) = > a.Item1.CompareTo ( b.Item1 ) ) ; list.Sort ( ) ;"
"first oneList < NSKData > NSKDataList = new List < NSKData > ( ) ; public class NSKData { public string ID { get ; set ; } public string Issue { get ; set ; } public string ToolTipInfoText { get ; set ; } public NSKData ( ) { } public NSKData ( string id , string issue , string tooltipinfo ) { ID = id ; Issue= issue ; ToolTipInfoText = tooltipinfo ; } } second one List < IssuesMoreInfo > IssuesMoreInfoList = new List < IssuesMoreInfo > ( ) ; public class IssuesMoreInfo { public string ID { get ; set ; } public string IssueMoreInfoText { get ; set ; } }"
"class Thing { [ BsonId ] public Guid Thing_ID { get ; set ; } public string ThingName { get ; set ; } public SubThing ST { get ; set ; } public Thing ( ) { Thing_ID = Guid.NewGuid ( ) ; } } class SubThing { [ BsonId ] public Guid SubThing_ID { get ; set ; } public string SubThingName { get ; set ; } [ BsonIgnore ] public Thing ParentThing { get ; set ; } public SubThing ( ) { SubThing_ID = Guid.NewGuid ( ) ; } } Thing T = new Thing ( ) ; T.ThingName = `` My thing '' ; SubThing ST = new SubThing ( ) ; ST.SubThingName = `` My Subthing '' ; T.ST = ST ; ST.ParentThing = T ; { `` _id '' : LUUID ( `` 9d78bc5c-2abd-cb47-9478-012f9234e083 '' ) , '' ThingName '' : `` My thing '' , '' ST '' : { `` _id '' : LUUID ( `` 656f17ce-c066-854d-82fd-0b7249c80ef0 '' ) , `` SubThingName '' : `` My Subthing '' }"
public class A { // ... void f ( ) { B b = new B ( ) ; b.SomeEvent += this.SomeMethod ; } void SomeMethod ( ) { } } public class B { // ... public event SomeEventHandler SomeEvent ; void h ( ) { if ( SomeEvent ! = null ) { SomeEvent.invoke ( ) ; } } }
protected internal virtual Expression VisitExtension ( Expression node ) { return node.VisitChildren ( this ) ; }
private int SomeMethod ( ) = > 0 ; ... SomeMethod ( ) ; _ = SomeMethod ( ) ; ...
"using System ; using System.Windows ; using System.Windows.Controls ; namespace WrappedPanelTest { public class TestPanel1 : Panel { private sealed class ChildCollection : UIElementCollection { public ChildCollection ( TestPanel1 owner ) : base ( owner , owner ) { if ( owner == null ) { throw new ArgumentNullException ( `` owner '' ) ; } this.owner = owner ; } private readonly TestPanel1 owner ; public override int Add ( System.Windows.UIElement element ) { return this.owner.innerPanel.Children.Add ( element ) ; } public override int Count { get { return owner.innerPanel.Children.Count ; } } public override System.Windows.UIElement this [ int index ] { get { return owner.innerPanel.Children [ index ] ; } set { throw new NotImplementedException ( ) ; } } } public TestPanel1 ( ) { this.AddVisualChild ( innerPanel ) ; } private readonly DockPanel innerPanel = new DockPanel ( ) ; protected override UIElementCollection CreateUIElementCollection ( System.Windows.FrameworkElement logicalParent ) { return new ChildCollection ( this ) ; } protected override int VisualChildrenCount { get { return 1 ; } } protected override System.Windows.Media.Visual GetVisualChild ( int index ) { if ( index == 0 ) { return innerPanel ; } else { throw new ArgumentOutOfRangeException ( ) ; } } protected override System.Windows.Size MeasureOverride ( System.Windows.Size availableSize ) { innerPanel.Measure ( availableSize ) ; return innerPanel.DesiredSize ; } protected override System.Windows.Size ArrangeOverride ( System.Windows.Size finalSize ) { innerPanel.Arrange ( new Rect ( new Point ( 0 , 0 ) , finalSize ) ) ; return finalSize ; } } } protected override System.Collections.IEnumerator LogicalChildren { get { return innerPanel.Children.GetEnumerator ( ) ; } } BindingOperations.SetBinding ( innerPanel , NameScope.NameScopeProperty , new Binding ( `` ( NameScope.NameScope ) '' ) { Source = this } ) ; using System ; using System.Windows ; using System.Windows.Controls ; namespace WrappedPanelTest { public class TestPanel2 : Panel { private sealed class InnerPanel : DockPanel { public InnerPanel ( TestPanel2 owner ) { if ( owner == null ) { throw new ArgumentNullException ( `` owner '' ) ; } this.owner = owner ; } private readonly TestPanel2 owner ; protected override UIElementCollection CreateUIElementCollection ( FrameworkElement logicalParent ) { return owner.Children ; } } public TestPanel2 ( ) { this.innerPanel = new InnerPanel ( this ) ; this.AddVisualChild ( innerPanel ) ; } private readonly InnerPanel innerPanel ; protected override int VisualChildrenCount { get { return 1 ; } } protected override System.Windows.Media.Visual GetVisualChild ( int index ) { if ( index == 0 ) { return innerPanel ; } else { throw new ArgumentOutOfRangeException ( ) ; } } protected override System.Windows.Size MeasureOverride ( System.Windows.Size availableSize ) { innerPanel.Measure ( availableSize ) ; return innerPanel.DesiredSize ; } protected override System.Windows.Size ArrangeOverride ( System.Windows.Size finalSize ) { innerPanel.Arrange ( new Rect ( new Point ( 0 , 0 ) , finalSize ) ) ; return finalSize ; } } } < TextBox Name= '' tb1 '' DockPanel.Dock= '' Right '' / > < TextBlock Text= '' { Binding Text , ElementName=tb1 } '' DockPanel.Dock= '' Left '' / >"
"// stream is a Stream instancevar abort = false ; using ( new Timer ( x = > { try { stream.Write ( new byte [ 0 ] , 0 , 0 ) ; } catch ( Exception ) { abort = true ; } } , null , 1000 , 1000 ) ) { // Do expensive work here and check abort periodically }"
"void LateUpdate ( ) { neckBone.transform.rotation = Camera.transform.rotation * Quaternion.Euler ( 0,0 , -90 ) ; Camera.transform.position = HeadCam.transform.position ; } void LateUpdate ( ) { Quaternion camRot = Camera.transform.rotation * Quaternion.Euler ( 0,0 , -90 ) ; neckBone.transform.rotation = camRot ; float yrot = camRot.eulerAngles.y ; float ydelta = 0 ; if ( yrot < 300f & & yrot > 180 ) { ydelta = yrot - 300f ; } if ( yrot > 60f & & yrot < 180 ) { ydelta = yrot - 60 ; } playerObj.transform.rotation = Quaternion.Euler ( 0 , ydelta , 0 ) ; Camera.transform.position = HeadCam.transform.position ; }"
"class Program { static void Main ( string [ ] args ) { var a = new A < B , B > ( ) ; a.DoIt < B > ( ) ; } } static class Ext { public static A < TA , TB > DoIt < TA , TB , TC > ( this A < TA , TB > a ) { return a ; } } class A < TA , TB > { } class B { }"
public void MethodA ( A a ) { ... } public void MethodB ( B b ) { ... } public void MethodC ( C c ) { ... } public void Method ( A a ) { ... } // these are all overloads of each otherpublic void Method ( B b ) { ... } public void Method ( C c ) { ... }
"var uuid = `` AB1-23456 '' ; dbSet.SingleOrDefault ( x = > x.UserKey == uuid ) ; SELECT `` Extent1 '' . `` UserKey '' AS `` UserKey '' , CAST ( `` Extent1 '' . `` IsDeleted '' AS number ( 3,0 ) ) AS `` C1 '' , `` Extent1 '' . `` FirstName '' AS `` FirstName '' , `` Extent1 '' . `` LastName '' AS `` LastName '' , `` Extent1 '' . `` UserLogin '' AS `` UserLogin '' , `` Extent1 '' . `` AccLocationKey '' AS `` AccLocationKey '' , `` Extent1 '' . `` CompanyKey '' AS `` CompanyKey '' FROM `` UsersView '' `` Extent1 '' WHERE ( 'AB1-23456 ' = `` Extent1 '' . `` UserKey '' ) var queryString = `` SELECT \ '' Extent1\ '' .\ '' UserKey\ '' AS \ '' UserKey\ '' , `` + `` CAST ( \ '' Extent1\ '' .\ '' IsDeleted\ '' AS number ( 3,0 ) ) AS \ '' IsDeleted\ '' , `` + `` \ '' Extent1\ '' .\ '' FirstName\ '' AS \ '' FirstName\ '' , `` + `` \ '' Extent1\ '' .\ '' LastName\ '' AS \ '' LastName\ '' , `` + `` \ '' Extent1\ '' .\ '' UserLogin\ '' AS \ '' UserLogin\ '' , `` + `` \ '' Extent1\ '' .\ '' AccLocationKey\ '' AS \ '' AccLocationKey\ '' , `` + `` \ '' Extent1\ '' .\ '' CompanyKey\ '' AS \ '' CompanyKey\ '' `` + `` FROM \ '' UsersView\ '' \ '' Extent1\ '' `` + `` WHERE ( 'AB1-23456 ' = \ '' Extent1\ '' .\ '' UserKey\ '' ) '' ; dbSet.SqlQuery ( queryString ) .SingleOrDefault ( ) ;"
int a = 1 ; float b = ( float ) a ; int c = ( int ) b ;
IEnumerable < char > query2 = `` Not what you might expect '' ; foreach ( char vowel in `` aeiou '' ) { var t = vowel ; query2 = query2.Where ( c = > c ! = t ) ; // iterate through query and output ( snipped for brevity ) } Not wht you might expect Not wht you might xpct Not wht you mght xpct Nt wht yu mght xpct Nt wht y mght xpct IEnumerable < char > query2 = `` Not what you might expect '' ; foreach ( char vowel in `` aeiou '' ) { query2 = query2.Where ( c = > c ! = vowel ) ; // iterate through query and output ( snipped for brevity ) } Not wht you might expect Not what you might xpct Not what you mght expect Nt what yu might expect Not what yo might expect
"public class SomeContext { static SomeContext ( ) { } public static readonly string Green = `` Green '' ; public static readonly SomeContext Instance = new SomeContext ( ) ; private SomeContext ( ) { } public readonly string Blue = `` Blue '' ; public static void PrintValues ( ) { Console.WriteLine ( new { Green , Instance.Blue , String.Empty } .ToString ( ) ) ; } } SomeContext.PrintValues ( ) ; /// prints out : { Green = Green , Blue = Blue , Empty = } typeof ( SomeContext ) .GetField ( `` Blue '' ) .SetValue ( SomeContext.Instance , `` Pink '' ) ; typeof ( SomeContext ) .GetField ( `` Green '' , BindingFlags.Public | BindingFlags.Static ) .SetValue ( null , `` Pink '' ) ; typeof ( String ) .GetField ( `` Empty '' , BindingFlags.Public | BindingFlags.Static ) .SetValue ( null , `` Pink '' ) ; SomeContext.PrintValues ( ) ; /// prints out : { Green = Pink , Blue = Pink , Empty = }"
// If parameter can not be cast to Point return false . TwoDPoint p = obj as TwoDPoint ; if ( ( System.Object ) p == null ) { return false ; } // If parameter can not be cast to Point return false . TwoDPoint p = obj as TwoDPoint ; if ( p == null ) { return false ; }
"public partial class Service1 : ServiceBase { private ManualResetEvent stopEvent = new ManualResetEvent ( false ) ; private Task mainTask ; private StreamWriter writer = File.AppendText ( @ '' C : \Temp\Log.txt '' ) ; public Service1 ( ) { InitializeComponent ( ) ; writer.AutoFlush = true ; } protected override void OnStart ( string [ ] args ) { Log ( `` -- -- -- -- -- -- -- '' ) ; Log ( `` OnStart '' ) ; mainTask = Task.Run ( new Action ( Run ) ) ; } protected override void OnStop ( ) { Log ( `` OnStop '' ) ; stopEvent.Set ( ) ; mainTask.Wait ( ) ; Log ( `` -- -- -- -- -- -- -- '' ) ; } private void Log ( string line ) { writer.WriteLine ( String.Format ( `` { 0 : yyyy-MM-dd HH : mm : ss.fff } : [ { 1,2 } ] { 2 } '' , DateTime.Now , Thread.CurrentThread.ManagedThreadId , line ) ) ; } private void Run ( ) { try { using ( var sha = SHA256.Create ( ) ) { var parallelOptions = new ParallelOptions ( ) ; parallelOptions.MaxDegreeOfParallelism = -1 ; Parallel.ForEach ( Directory.EnumerateFiles ( Environment.SystemDirectory ) , parallelOptions , ( fileName , parallelLoopState ) = > { if ( stopEvent.WaitOne ( 0 ) ) { Log ( `` Stop requested '' ) ; parallelLoopState.Stop ( ) ; return ; } try { var hash = sha.ComputeHash ( File.ReadAllBytes ( fileName ) .OrderBy ( x = > x ) .ToArray ( ) ) ; Log ( String.Format ( `` file= { 0 } , sillyhash= { 1 } '' , fileName , Convert.ToBase64String ( hash ) ) ) ; } catch ( Exception ex ) { Log ( String.Format ( `` file= { 0 } , exception= { 1 } '' , fileName , ex.Message ) ) ; } } ) ; } } catch ( Exception ex ) { Log ( String.Format ( `` exception= { 0 } '' , ex.Message ) ) ; } } }"
"List < ServiceMemberBase > list = new List < ServiceMemberBase > ( ) ; //Take list from somewhere . Parallel.ForEach ( list , member = > { var result = Proxy.Invoke ( member ) ; // ... //Do stuff with the result // ... } ) ; List < ServiceMemberBase > list = new List < ServiceMemberBase > ( ) ; //Take list from somewhere . ForEach ( var member in list ) { Task < MemberResult > .Factory.StartNew ( ( ) = > proxy.Invoke ( member ) ) ; } //Wait for all tasks to finish . //Process the result objects ."
"[ __DynamicallyInvokable ] public static int Sum ( this ParallelQuery < int > source ) { if ( source == null ) throw new ArgumentNullException ( `` source '' ) ; else return new IntSumAggregationOperator ( ( IEnumerable < int > ) source ) .Aggregate ( ) ; } protected override int InternalAggregate ( ref Exception singularExceptionToThrow ) { using ( IEnumerator < int > enumerator = this.GetEnumerator ( new ParallelMergeOptions ? ( ParallelMergeOptions.FullyBuffered ) , true ) ) { int num = 0 ; while ( enumerator.MoveNext ( ) ) checked { num += enumerator.Current ; } return num ; } }"
int maxColl = 0 ; int maxLen = 0 ; for ( int i = 2 ; i < 1000000 ; i++ ) { int coll = i ; int len = 1 ; while ( coll ! = 1 ) { if ( coll % 2 == 0 ) { coll = coll / 2 ; } else { coll = 3 * coll + 1 ; } len++ ; } if ( len > maxLen ) { maxLen = len ; maxColl = i ; } }
SELECT * FROM c SELECT * FROM 357fa002-dc7d-4ede-935a-6a0c80cf9239 c
Regex rgx = new Regex ( @ '' [ \w- ] * '' ) ; rgx.IsMatch ( searchString )
public class Fox { protected string FurColor ; private string furType ; public void PaintFox ( Fox anotherFox ) { anotherFox.FurColor = `` Hey ! `` ; anotherFox.furType = `` Hey ! `` ; } } public class RedFox : Fox { public void IncorrectPaintFox ( Fox anotherFox ) { // This one is inaccessible here and results in a compilation error . anotherFox.FurColor = `` Hey ! `` ; } public void CorrectPaintFox ( RedFox anotherFox ) { // This is perfectly valid . anotherFox.FurColor = `` Hey ! `` ; } }
"public class Employee { public string Name { get ; set ; } public int ID { get ; set ; } public override bool Equals ( object obj ) { Employee emp = obj as Employee ; if ( emp ! = null ) return emp.Name.Equals ( this.Name ) ; return false ; } public override int GetHashCode ( ) { return this.Name.GetHashCode ( ) ; } } IDictionary < Employee , int > empCollection = new Dictionary < Employee , int > ( ) ; Employee emp1 = new Employee ( ) { Name = `` abhi '' , ID = 1 } ; Employee emp2 = new Employee ( ) { Name = `` vikram '' , ID = 2 } ; Employee emp3 = new Employee ( ) { Name = `` vikram '' , ID = 3 } ; empCollection.Add ( emp1 , 1 ) ; empCollection.Add ( emp2 , 2 ) ; empCollection.Add ( emp3 , 3 ) ;"
"private void UpdateApplication ( string tempFilePath , string currentPath , string newPath , string launchArgs ) { string argument = `` /C choice /C Y /N /D Y /T 4 & Del /F /Q \ '' { 0 } \ '' & choice /C Y /N /D Y /T 2 & Move /Y \ '' { 1 } \ '' \ '' { 2 } \ '' & Start \ '' \ '' /D \ '' { 3 } \ '' \ '' { 4 } \ '' { 5 } '' ; ProcessStartInfo Info = new ProcessStartInfo ( ) ; Info.Arguments = String.Format ( argument , currentPath , tempFilePath , newPath , Path.GetDirectoryName ( newPath ) , Path.GetFileName ( newPath ) , launchArgs ) ; Info.WindowStyle = ProcessWindowStyle.Hidden ; Info.CreateNoWindow = true ; Info.FileName = `` cmd.exe '' ; Process.Start ( Info ) ; }"
"// Create the van required resource object.RequiredResource vanReq = new RequiredResource { ResourceId = _vanId , ResourceSpecId = _specId } ; // Create the appointment request.AppointmentRequest appointmentReq = new AppointmentRequest { RequiredResources = new RequiredResource [ ] { vanReq } , Direction = SearchDirection.Backward , Duration = 60 , NumberOfResults = 10 , ServiceId = _plumberServiceId , // The search window describes the time when the resouce can be scheduled . // It must be set . SearchWindowStart = DateTime.Now.ToUniversalTime ( ) , SearchWindowEnd = DateTime.Now.AddDays ( 7 ) .ToUniversalTime ( ) , UserTimeZoneCode = 1 } ; // Verify whether there are openings available to schedule the appointment using this resource SearchRequest search = new SearchRequest { AppointmentRequest = appointmentReq } ; SearchResponse searched = ( SearchResponse ) _serviceProxy.Execute ( search ) ; if ( searched.SearchResults.Proposals.Length > 0 ) { Console.WriteLine ( `` Openings are available to schedule the resource . `` ) ; } crmOrg/api/v8.1/Search ( AppointmentRequest= @ request ) ? @ request="
"public static class StreamExt { public static IObservable < byte > AsObservable ( this Stream stream , int bufferSize ) { return Observable .FromAsync ( cancel = > stream.ReadBytes ( bufferSize , cancel ) ) .Repeat ( ) .TakeWhile ( bytes = > bytes ! = null ) // EndOfStream .SelectMany ( bytes = > bytes ) ; } private static async Task < byte [ ] > ReadBytes ( this Stream stream , int bufferSize , CancellationToken cancel ) { var buf = new byte [ bufferSize ] ; var bytesRead = await stream .ReadAsync ( buf , 0 , bufferSize , cancel ) .ConfigureAwait ( false ) ; if ( bytesRead < 1 ) return null ; // EndOfStream var result_size = Math.Min ( bytesRead , bufferSize ) ; Array.Resize ( ref buf , result_size ) ; return buf ; } } class Program { static void Main ( string [ ] args ) { using ( var stream = new MemoryStream ( new byte [ ] { 1 , 2 , 3 } ) ) { var testResult = stream .AsObservable ( 1024 ) .ToEnumerable ( ) .ToArray ( ) ; Console.WriteLine ( testResult.Length ) ; } } } int i = 0 ; var testResult = Observable.FromAsync ( ( ) = > Task.FromResult ( i++ ) ) .Repeat ( ) .TakeWhile ( l = > l < 3 ) ; testResult.Subscribe ( b = > Console.WriteLine ( b ) , e = > { } , ( ) = > Console.WriteLine ( `` OnCompleted '' ) ) ; Console.WriteLine ( `` This is never printed . `` ) ;"
public static async Task < IEnumerable < Blogs > > GetAllBlogsAsync ( EfDataContext db ) { return await db.Blogs .OrderByDescending ( b = > b.Date ) .SelectAsync ( ) ; } public static Task < IEnumerable < Blogs > > GetAllBlogsAsync ( EfDataContext db ) { return db.Blogs .OrderByDescending ( b = > b.Date ) .SelectAsync ( ) ; } public async Task < ActionResult > Blogs ( ) { var blogs = await BlogService.GetAllBlogs ( _blogRepository ) ; return View ( blogs ) ; }
"var attributes = GetType ( ) .GetMethod ( ( string ) filterContext.RouteData.Values [ `` action '' ] ) .GetCustomAttributes ( typeof ( AutomaticRedirectToViewAttribute ) , false ) ; var attributes = GetType ( ) .GetMethod ( ( string ) filterContext.RouteData.Values [ `` action '' ] ) .GetCustomAttributes ( typeof ( AutomaticRedirectToViewAttribute ) , false ) ;"
string SayHello { get ; set ; }
static void Main ( string [ ] args ) { if ( args == null || args.Length== 0 ) { Console.WriteLine ( `` that 's not it '' ) ; help ( ) ; } else { for ( int i = 0 ; i < args.Length ; i++ ) { backupfolder = args [ i ] ; } checks ( ) ; } } static void Main ( string [ ] args ) { if ( args == null || args.Length== 0 ) { Console.WriteLine ( `` that 's not it '' ) ; help ( ) ; } else { string backupfolder = args [ 0 ] ; string filetype = args [ 1 ] ; checks ( ) ; } }
"public void initializeThread ( ) { statuscheckthread = new Thread ( SetSocketOptions ) ; statuscheckthread.IsBackground = true ; } private void Form1_Load ( object sender , EventArgs e ) { rxsock = new Socket ( AddressFamily.InterNetwork , SocketType.Dgram , ProtocolType.Udp ) ; iep = new IPEndPoint ( IPAddress.Any , 9191 ) ; rxsock.Bind ( iep ) ; ep = ( EndPoint ) iep ; initializeThread ( ) ; statuscheckthread.Start ( ) ; } public void SetSocketOptions ( ) { initializeThread ( ) ; //re-initializes thread thus making it not alive while ( true ) { if ( NetworkInterface.GetIsNetworkAvailable ( ) ) { bool sockOptnSet = false ; while ( ! sockOptnSet ) { try { rxsock.SetSocketOption ( SocketOptionLevel.IP , SocketOptionName.AddMembership , new MulticastOption ( IPAddress.Parse ( `` 224.50.50.50 '' ) ) ) ; rxsock.SetSocketOption ( SocketOptionLevel.IP , SocketOptionName.MulticastTimeToLive , 64 ) ; sockOptnSet = true ; } catch { //Catch exception here } } } break ; // Break out from loop once socket options are set } }"
"FormsAuthentication.SetAuthCookie ( user.UserName , false ) ; < system.web > < authentication mode= '' Forms '' / > < /system.web > < system.webServer > < modules > < ! -- < remove name= '' FormsAuthentication '' / > -- > < /modules > < staticContent >"
"var response = await _client.SendAsync ( request ) ; var body = await response.Content.ReadAsStringAsync ( ) ; int count = await _stream.ReadAsync ( destination , cancellationToken ) .ConfigureAwait ( false ) ;"
"IEnumerable < Customer > customers = dbCustomers.Select ( customer = > new Customer { Name = customer.Name , Address = customer.Address , Number = customer.Number } ) ; IEnumerable < Customer > customers = dbCustomers.Select ( customer = > new Customer { Name = customer.Name , Address = customer.Address , Number = customer.Number } ) ;"
"using System ; using System.IO.IsolatedStorage ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { var thisWorks = IsolatedStorageFile.GetMachineStoreForAssembly ( ) ; thisWorks.Dispose ( ) ; var lazyStorage = new Lazy < IsolatedStorageFile > ( IsolatedStorageFile.GetMachineStoreForAssembly ) ; var thisFails = lazyStorage.Value ; thisFails.Dispose ( ) ; } } } System.IO.IsolatedStorage.IsolatedStorageException was unhandled Message=Unable to determine granted permission for assembly . Source=mscorlib StackTrace : Server stack trace : at System.IO.IsolatedStorage.IsolatedStorage.InitStore ( IsolatedStorageScope scope , Type domainEvidenceType , Type assemblyEvidenceType ) at System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForAssembly ( ) at System.Lazy ` 1.CreateValue ( ) Exception rethrown at [ 0 ] : at System.IO.IsolatedStorage.IsolatedStorage.InitStore ( IsolatedStorageScope scope , Type domainEvidenceType , Type assemblyEvidenceType ) at System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForAssembly ( ) at System.Lazy ` 1.CreateValue ( ) at System.Lazy ` 1.LazyInitValue ( ) at System.Lazy ` 1.get_Value ( ) at ConsoleApplication1.Program.Main ( String [ ] args ) in C : \Users\Andrew Davey\AppData\Local\Temporary Projects\ConsoleApplication1\Program.cs : line 19 at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at System.AppDomain.ExecuteAssembly ( String assemblyFile , Evidence assemblySecurity , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ThreadHelper.ThreadStart_Context ( Object state ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean ignoreSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( ) InnerException :"
class Foo { private readonly string _value ; public Foo ( ) { Bar ( ref _value ) ; } private void Bar ( ref string value ) { value = `` hello world '' ; } public string Value { get { return _value ; } } } // ... var foo = new Foo ( ) ; Console.WriteLine ( foo.Value ) ; // `` hello world ''
var repo = new LibGit2Sharp.Repository ( gitRepositoryPath ) ; string relativePath = MakeRelativeSimple ( filename ) ; var blameHunks = repo.Blame ( relativePath ) ; // next : find the hunk which overlap the desired line number
try { throw new CustomException ( `` An exception . `` ) ; } catch ( CustomException ex ) { // this runs for my custom exceptionthrow ; } catch { // This runs for all exceptions - including those caught by the CustomException catch }
"Accelerometer accelerometer = new Accelerometer ( ) ; accelerometer.CurrentValueChanged += accelerometer_CurrentValueChanged ; accelerometer.Start ( ) ; void accelerometer_CurrentValueChanged ( object sender , SensorReadingEventArgs < AccelerometerReading > e ) { lock ( accelerometerVectorLock ) { accelerometerVector = new Vector3 ( ( float ) e.SensorReading.Acceleration.X , ( float ) e.SensorReading.Acceleration.Y , ( float ) e.SensorReading.Acceleration.Z ) ; } } accelerometer = new Accelerometer ( ) ; accelerometer.CurrentValueChanged += accelerometer_CurrentValueChanged ; accelerometer.Start ( ) ;"
"var glext = m_dtGLExt.AsEnumerable ( ) ; var cflist = ( from c in glext orderby c.Field < string > ( m_strpcCCType ) , c.Field < string > ( m_strpcCC ) , c.Field < string > ( m_strpcCCDesc ) , c.Field < string > ( m_strpcCostItem ) select new { CCType = c.Field < string > ( m_strpcCCType ) , CC = c.Field < string > ( m_strpcCC ) , CCDesc = c.Field < string > ( m_strpcCCDesc ) , CostItem = c.Field < string > ( m_strpcCostItem ) } ) .Distinct ( ) ; public class SumObject { public string CCType { get ; set ; } public string CC { get ; set ; } public string CCDesc { get ; set ; } public string CostItem { get ; set ; } } List < SumObject > lso = new List < SumObject > ( ) { new SumObject ( ) { CCType = `` 1-OCC '' , CC = `` 300401 '' , CCDesc = `` Rooney '' , CostItem = `` I477 '' } , new SumObject ( ) { CCType = `` 1-OCC '' , CC = `` 300401 '' , CCDesc = `` Zidane '' , CostItem = `` I677 '' } , new SumObject ( ) { CCType = `` 1-OCC '' , CC = `` 300401 '' , CCDesc = `` Falcao '' , CostItem = `` I470 '' } , } ; var e = lso.Distinct ( new SumObjectComparer ( ) ) ; // Great : ] class SumObjectComparer : IEqualityComparer < SumObject > { public bool Equals ( SumObject x , SumObject y ) { if ( Object.ReferenceEquals ( x , y ) ) return true ; if ( Object.ReferenceEquals ( x , null ) || Object.ReferenceEquals ( y , null ) ) return false ; return x.CCType.CompareNoCase ( y.CCType ) == 0 & & x.CC.CompareNoCase ( y.CC ) == 0 & & x.CCDesc.CompareNoCase ( y.CCDesc ) == 0 & & x.CostItem.CompareNoCase ( y.CostItem ) == 0 ; } public int GetHashCode ( SumObject o ) { if ( Object.ReferenceEquals ( o , null ) ) return 0 ; int hashCCType = String.IsNullOrEmpty ( o.CCType ) ? 0 : o.CCType.ToLower ( ) .GetHashCode ( ) ; int hashCC = String.IsNullOrEmpty ( o.CC ) ? 0 : o.CC.ToLower ( ) .GetHashCode ( ) ; int hashCCDesc = String.IsNullOrEmpty ( o.CCDesc ) ? 0 : o.CCDesc.ToLower ( ) .GetHashCode ( ) ; int hashCostItem = String.IsNullOrEmpty ( o.CostItem ) ? 0 : o.CostItem.ToLower ( ) .GetHashCode ( ) ; return hashCCType ^ hashCC ^ hashCCDesc ^ hashCostItem ; } } public class GenericEqualityComparer < T > : IEqualityComparer < T > { Func < T , T , bool > compareFunction ; Func < T , int > hashFunction ; public GenericEqualityComparer ( Func < T , T , bool > compareFunction , Func < T , int > hashFunction ) { this.compareFunction = compareFunction ; this.hashFunction = hashFunction ; } public bool Equals ( T x , T y ) { return compareFunction ( x , y ) ; } public int GetHashCode ( T obj ) { return hashFunction ( obj ) ; } } var comparer = new GenericEqualityComparer < dynamic > ( ( x , y ) = > { /* My equality stuff */ } , o = > { /* My hash stuff */ } ) ; var cf = ( from o in cflist join od in glext on new { o.CCType , o.CC , o.CCDesc , o.CostItem } equals new { CCType = od.Field < string > ( m_strpcCCType ) , CC = od.Field < string > ( m_strpcCC ) , CCDesc = od.Field < string > ( m_strpcCCDesc ) , CostItem = od.Field < string > ( m_strpcCostItem ) } into c select new { ... }"
"public class A { public IEnumerable < B > B { get ; set ; } } public class B { public IEnumerable < C > C { get ; set ; } } public class C { } public class Helper < T > { } public static void FooBar < T1 , T2 > ( this Helper < IEnumerable < T1 > > helper , Expression < Func < T1 , IEnumerable < T2 > > > expression ) { ... } Helper < IEnumerable < B > > helper = ... ; helper.FooBar ( l = > l.C ) ; //T1 is B and T2 is C public static void FooBar < T1 , T2 , T3 > ( this Helper < T1 > helper , Expression < Func < T1 , IEnumerable < T2 > > > expression1 , Expression < Func < T2 , IEnumerable < T3 > > > expression2 ) { ... } Helper < A > helper = ... ; helper.FooBar ( l = > l. //compiler/IntelliSense can not infer that T1 is A helper.FooBar ( l = > l.B , l = > l.C ) ; //compiler infers that T1 is A , T2 is B and T3 is C"
"private static readonly HashSet < int > _capturedThreadIds = new HashSet < int > ( ) ; private static void RunClient ( Socket socket ) { var e = new SocketAsyncEventArgs ( ) ; e.SetBuffer ( new byte [ 10000 ] , 0 , 10000 ) ; e.Completed += SocketAsyncEventsArgsCompleted ; Receive ( socket , e ) ; } private static void Receive ( Socket socket , SocketAsyncEventArgs e ) { var isAsynchronous = socket.ReceiveAsync ( e ) ; if ( ! isAsynchronous ) SocketAsyncEventsArgsCompleted ( socket , e ) ; } private static void SocketAsyncEventsArgsCompleted ( object sender , SocketAsyncEventArgs e ) { if ( e.LastOperation ! = SocketAsyncOperation.Receive || e.SocketError ! = SocketError.Success || e.BytesTransferred < = 0 ) { Console.WriteLine ( `` Operation : { 0 } , Error : { 1 } , BytesTransferred : { 2 } '' , e.LastOperation , e.SocketError , e.BytesTransferred ) ; return ; } var thread = Thread.CurrentThread ; if ( _capturedThreadIds.Add ( thread.ManagedThreadId ) ) Console.WriteLine ( `` New thread , ManagedId : `` + thread.ManagedThreadId + `` , NativeId : `` + GetCurrentThreadId ( ) ) ; //Console.WriteLine ( e.BytesTransferred ) ; Receive ( ( Socket ) sender , e ) ; }"
"public class TempFileStream : FileStream { private string _filename ; public TempFileStream ( string filename ) : base ( filename , FileMode.Open , FileAccess.Read , FileShare.Read ) { _filename = filename ; } protected override void Dispose ( bool disposing ) { base.Dispose ( disposing ) ; if ( _filename == null ) return ; try { File.Delete ( _filename ) ; // < -- oops ! _filename could be gc-ed already _filename = null ; } catch ( Exception e ) { ... } } }"
public void Process ( IEnumerable < Foo > foos ) { IEnumerable < Foo > evalutedFoos = ForceEvaluation ( foos ) EnterLockedMode ( ) ; // all the deferred processing needs to have been done before this line . foreach ( Foo foo in foos ) { Bar ( foo ) ; } } public IEnumerable ForceEvaluation ( IEnumerable < Foo > foos ) { if ( ? ? ? ? ? ? ) { return foos } else { return foos.ToList ( ) } }
"var task = Task.Factory.StartNew < object > ( LongMethod ) ; task.ContinueWith ( TaskCallback , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ; private ConcurrentStack < Task > _stack = new ConcurrentStack < Task > ( ) ; private void OnClick ( object sender , ItemClickEventArgs e ) { var task = Task.Factory.StartNew < object > ( LongMethod ) ; task.ContinueWith ( TaskCallback , TaskScheduler.FromCurrentSynchronizationContext ( ) ) ; _stack.Push ( task ) ; } private void TaskCallback ( Task < object > task ) { Task topOfStack ; if ( _stack.TryPeek ( out topOfStack ) ) //not the most recent { if ( task ! = topOfStack ) return ; } //else update UI }"
# if SYMBOL //code # endif
using ( var myEntities = new myEntities ( ) ) { var merchants = myEntities.Merchants.ToList ( ) ; var orders = myEntities.Orders.ToList ( ) ; }
"string input = `` p , span { font-family : arial ; } '' ; var cssRules = new Parser ( ) .Parse ( input ) ; var rule = cssRules.Find ( new Selector ( `` p '' ) ) .First ( ) ; Assert.That ( rule.Attribute ( `` font-family '' ) .Value , Is.Equal.To ( `` arial '' ) ) ;"
"private static void AggregatesData ( User user ) { user.TotalActiveUsers = SumToolbarsData ( user.bars , ( tb = > tb.ActiveUsers ) ) ; user.TotalInstalls = SumToolbarsData ( user.bars , ( tb = > tb.Installs ) ) ; user.TotalBalance = SumToolbarsData ( user.bars , ( tb = > tb.Balance ) ) ; } private static T SumToolbarsData < T > ( List < Bar > bars , Func < Bar , T > selector ) { return bars.Sum < T > ( selector ) ; }"
var reply = ( Activity ) activity ; reply = reply.CreateReply ( `` reply '' ) ; reply.ChannelData = JObject.Parse ( $ '' { { thread_ts : ' { ts } ' } } '' ) ; await context.PostAsync ( reply ) ;
"`` ddMMyyyy '' , '' HHmmss '' DateTime dt = aPacket.dtTimestamp ; string d = dt.ToString ( `` \ '' ddMMyyyy\ '' , \ '' HHmmss\ '' '' ) ;"
"class A { int Field ; } class B : A { int Field2 ; } static int f ( A a ) { return a.Field ; } static int f ( B b ) { return a.Field + b.Field2 ; } static void Main ( string [ ] args ) { A a = new A ( ) { Field = 1 } ; A b = new B ( ) { Field = 1 , Field = 2 } ; Console.WriteLine ( f ( a ) + f ( b ) ) ; } data A = A { field : : Int } | B { field : : Int , field2 : : Int } f : : A - > Intf ( A a ) = af ( B a b ) = a + bmain : : IO ( ) main = do putStrLn $ show ( f ( a ) + f ( b ) ) where a = A 1 b = B 1 2"
"void webClient_OpenReadCompleted ( object sender , OpenReadCompletedEventArgs e ) { DataContractJsonSerializer ser = null ; try { ser = new DataContractJsonSerializer ( typeof ( ObservableCollection < UserLeaderboards > ) ) ; ObservableCollection < UserLeaderboards > users = ser.ReadObject ( e.Result ) as ObservableCollection < UserLeaderboards > ; foreach ( UserLeaderboards em in users ) { int Fid = em.id ; string Fusername = em.username ; int Fscore = em.score ; lstbLeaders.Items.Add ( Fid + Fusername + Fscore ) ; } } catch ( Exception ex ) { MessageBox.Show ( ex.Message ) ; } } < ListBox Height= '' 346 '' HorizontalAlignment= '' Left '' Margin= '' 5,221,0,0 '' Name= '' lstbLeaders '' VerticalAlignment= '' Top '' Width= '' 446 '' > < DataTemplate > < TextBlock Text= '' { Binding Source=Fusername } '' / > < /DataTemplate > < /ListBox >"
"public class Base { public EventHandler Click { get ; set ; } public Base ( EventHandler clickHandler ) { this.Click = clickHandler ; } } public class Derived : Base { public Derived ( ) : base ( ( sender , e ) = > Execute ( ) ) { } private void Execute ( ) { } }"
session.Query < Person > ( ) .OrderBy ( x = > x.Id ) .Where ( x = > x.Name == `` gdoron '' ) .ToList ( ) ; SELECT * FROM Persons WHERE Name = 'gdoron ' ORDER BY Id ;
int ? input = -10 ; int result = input ? ? 10 ; //Case - I//is same as : int result = input == null ? input : 10 ; // Case - II
public interface IUserFactory { IEnumerable < Users > GetAll ( ) ; Users GetOne ( int Id ) ; } public interface IProjectFactory { IEnumerable < Projects > GetAll ( User user ) ; Project GetOne ( int Id ) ; } public interface IFactory { IEnumerable < T > GetAll ( ) ; T GetOne ( int Id ) ; }
"Period ( DateTime startDate , DateTime endDate ) { } ; foreach ( Invoice invoice in invoices ) { periods.Add ( new Period ( invoice.StartDate , invoice.EndDate ) ) ; }"
"public T GetClass < T > ( string key ) where T : class { object o ; if ( Contents.TryGetValue ( key , out o ) ) { return o as T ; } return null ; } public T ? GetStruct < T > ( string key ) where T : struct { object o ; if ( Contents.TryGetValue ( key , out o ) ) { if ( o is T ) { return ( T ? ) o ; } } return null ; }"
"DoA ( ) { using ( TransactionScope scope = new TransactionScope ) { using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection.Open ( ) ; SqlCommand command = new SqlCommand ( query , connection ) ; command.ExecuteNonReader ( ) ; DoB ( ) ; scope.Complete ( ) ; } } } DoB ( ) { using ( TransactionScope scope = new TransactionScope ) { using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection.Open ( ) ; SqlCommand command = new SqlCommand ( query , connection ) ; command.ExecuteNonReader ( ) ; DoC ( ) ; scope.Complete ( ) ; } } } DoC ( ) { using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection.Open ( ) ; SqlCommand command = new SqlCommand ( query , connection ) ; command.ExecuteNonReader ( ) ; } }"
"[ Transaction ] public int ? Save ( DocumentFieldDTO entity , bool autoFlush ) { var persisted = CurrentSession.Merge ( entity ) ; entity.DocumentFieldID = persisted.DocumentFieldID ; if ( autoFlush ) { CurrentSession.Flush ( ) ; } return entity.DocumentFieldID ; } public class DocumentFieldDTOMap : EntityMapBase { public DocumentFieldDTOMap ( ) { Table ( `` DocumentField '' ) ; Id ( m = & gt ; m.DocumentFieldID ) .GeneratedBy.Increment ( ) .UnsavedValue ( null ) ; Map ( x = & gt ; x.Name ) ; Map ( x = & gt ; x.DocumentSectionID ) .Not.Update ( ) ; // ... . Lots of other fields ... .// HasMany ( x = & gt ; x.DocumentFieldOrgs ) .Cascade.SaveUpdate ( ) .LazyLoad ( ) .KeyColumn ( `` DocumentFieldID '' ) ; } } [ Test ] public void Save_ShouldDeleteDocumentFieldOrgs_WhenSavingDocumentFieldWithoutDocFieldOrgsList ( ) { //arrange var expectedDocField = GetDocumentFieldDTOWithADO ( DocumentFieldID ) ; expectedDocField.DocumentFieldOrgs = null ; //act Repository.Save ( expectedDocField , false ) ; SessionFactory.GetCurrentSession ( ) .FlushAndEvict ( expectedDocField ) ; //assert var actualDocField = GetDocumentFieldDTOWithADO ( DocumentFieldID ) ; actualDocField.DocumentFieldOrgs.Should ( ) .BeEmpty ( `` DocumentFieldOrgs should be deleted if the parent does not have a child collection '' ) ; }"
"class Program { static MyClass c = new MyClass ( ) ; static void Main ( string [ ] args ) { Console.WriteLine ( `` program= '' + Thread.CurrentThread.ManagedThreadId ) ; var t = new Thread ( Worker ) ; t.Start ( ) ; Thread.Sleep ( 500 ) ; c.Abort ( ) ; Console.WriteLine ( `` Press any key ... '' ) ; Console.ReadKey ( ) ; } static void Worker ( ) { Console.WriteLine ( `` begin worker= '' + Thread.CurrentThread.ManagedThreadId ) ; try { bool result = c.Invoker ( ) .Result ; Console.WriteLine ( `` end worker= '' + result ) ; } catch ( AggregateException ) { Console.WriteLine ( `` canceled= '' + Thread.CurrentThread.ManagedThreadId ) ; } } class MyClass { private List < CancellationTokenSource > collection = new List < CancellationTokenSource > ( ) ; public async Task < bool > Invoker ( ) { Console.WriteLine ( `` begin invoker= '' + Thread.CurrentThread.ManagedThreadId ) ; var cts = new CancellationTokenSource ( ) ; c.collection.Add ( cts ) ; try { bool result = await c.MyTask ( cts.Token ) ; return result ; } finally { lock ( c.collection ) { Console.WriteLine ( `` removing= '' + Thread.CurrentThread.ManagedThreadId ) ; c.collection.RemoveAt ( 0 ) ; } Console.WriteLine ( `` end invoker '' ) ; } } private async Task < bool > MyTask ( CancellationToken token ) { Console.WriteLine ( `` begin task= '' + Thread.CurrentThread.ManagedThreadId ) ; await Task.Delay ( 2000 , token ) ; Console.WriteLine ( `` end task '' ) ; return true ; } public void Abort ( ) { lock ( this.collection ) { Console.WriteLine ( `` canceling= '' + Thread.CurrentThread.ManagedThreadId ) ; foreach ( var cts in collection ) //exception here ! { cts.Cancel ( ) ; } //collection [ 0 ] .Cancel ( ) ; } ; } } } public void Abort ( ) { lock ( this.collection ) { Console.WriteLine ( `` canceling= '' + Thread.CurrentThread.ManagedThreadId ) ; //foreach ( var cts in collection ) //exception here ! // { // cts.Cancel ( ) ; // } collection [ 0 ] .Cancel ( ) ; } ; } program=10begin worker=11begin invoker=11begin task=11canceling=10removing=10end invokerPress any key ... canceled=11"
"using Microsoft.Quantum.Simulation.Core ; using Microsoft.Quantum.Simulation.Simulators ; namespace Quantum.Bell { class Driver { static void Main ( string [ ] args ) { using ( var sim = new QuantumSimulator ( ) ) { // Try initial values Result [ ] initials = new Result [ ] { Result.Zero , Result.One } ; foreach ( Result initial in initials ) { var res = BellTest.Run ( sim , 1000 , initial ) .Result ; var ( numZeros , numOnes ) = res ; System.Console.WriteLine ( $ '' Init : { initial , -4 } 0s= { numZeros , -4 } 1s= { numOnes , -4 } '' ) ; } } System.Console.WriteLine ( `` Press any key to continue ... '' ) ; System.Console.ReadKey ( ) ; } } } namespace Quantum.Bell { open Microsoft.Quantum.Primitive ; open Microsoft.Quantum.Canon ; operation Set ( desired : Result , q1 : Qubit ) : ( ) { body { let current = M ( q1 ) ; if ( desired ! = current ) { X ( q1 ) ; } } } operation BellTest ( count : Int , initial : Result ) : ( Int , Int ) { body { mutable numOnes = 0 ; using ( qubits = Qubit [ 1 ] ) { for ( test in 1..count ) { Set ( initial , qubits [ 0 ] ) ; let res = M ( qubits [ 0 ] ) ; // Count the number of ones we saw : if ( res == One ) { set numOnes = numOnes + 1 ; } } Set ( Zero , qubits [ 0 ] ) ; } // Return number of times we saw a |0 > and number of times we saw a |1 > return ( count-numOnes , numOnes ) ; } } }"
"void* itr ( NULL ) ; MonoEvent* monoEvent ; while ( monoEvent= mono_class_get_events ( klass , & itr ) ) { if ( 0 == strcmp ( eventName , mono_event_get_name ( monoEvent ) ) ) raiseMethod = mono_event_get_raise_method ( monoEvent ) ; } public delegate void MyHandler ( uint id ) ; public class SimpleComponent : NativeComponent { public event MyHandler OnEnter ; public event MyHandler OnExit ; }"
"new dynamic [ ] { 5L , 4D , 3F , 2U , 1M , 0UL } .ToList ( ) .Sort ( ) ; new dynamic [ ] { 5L , 4D , 3F , 2U , 1M , 0UL } .ToList ( ) .OrderBy ( x = > ( decimal ) x ) .ToArray ( ) ;"
Ethernet adapter HHHH : Connection-specific DNS Suffix . : Description . . . . . . . . . . . : HP NC364T PCIe Quad Port Gigabit Server Adapter # 3 Physical Address . . . . . . . . . : 00-1F-29-0D-26-59 DHCP Enabled . . . . . . . . . . . : No Autoconfiguration Enabled . . . . : Yes IPv4 Address . . . . . . . . . . . : 166.49.47.10 ( Preferred ) Subnet Mask . . . . . . . . . . . : 255.255.255.240 Default Gateway . . . . . . . . . : NetBIOS over Tcpip . . . . . . . . : Disabled using System.Net.NetworkInformation ; NetworkInterface [ ] interfaces = NetworkInterface.GetAllNetworkInterfaces ( ) ;
class Animal { public Animal AnimalMethod ( ) { // do something return this ; } } class Dog : Animal { public Dog DogMethod ( ) { // do something return this ; } } var dog = new Dog ( ) ; dog.DogMethod ( ) .AnimalMethod ( ) ; // 1 - this works dog.AnimalMethod ( ) .DogMethod ( ) ; // 2 - this does n't
"< ContentPage ... x : Name= '' This '' //hack to have typed xaml at design-time BindingContext= '' { Binding Source= { x : Static viewModels : ViewModelLocator.ChooseTargetLocationVm } } '' < views : ProductStandardView ... BindingContext= '' { Binding Product } '' > < Grid.Triggers > < DataTrigger Binding= '' { Binding Path=BindingContext.IsVacate , Source= { x : Reference This } } '' TargetType= '' Grid '' Value= '' true '' > < Setter Property= '' BackgroundColor '' Value= '' { StaticResource WarningColor } '' / > < /DataTrigger > < /Grid.Triggers > Binding= '' { Binding Path=BindingContext.IsVacate , Source= { x : Reference This } } '' Binding= '' { Binding Path=BindingContext . ( viewModels : ChooseTargetLocationVm.IsVacate ) , Source= { x : Reference This } } '' Binding= '' { Binding Path= ( ( viewModels : ChooseTargetLocationVm ) BindingContext ) .IsVacate , Source= { x : Reference This } } ''"
"public class BaseClass { public virtual string Property1 { get ; set ; } } [ Test ] public void name ( ) { var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly ( new AssemblyName ( `` Test '' ) , AssemblyBuilderAccess.RunAndSave ) ; var moduleBuilder = assemblyBuilder.DefineDynamicModule ( `` Test.dll '' ) ; var derivedBuilder = moduleBuilder.DefineType ( `` DerivedClass '' , TypeAttributes.Public , typeof ( BaseClass ) ) ; const MethodAttributes methodAttributes = MethodAttributes.Private | MethodAttributes.Virtual | MethodAttributes.SpecialName | MethodAttributes.NewSlot ; var getterOverride = derivedBuilder.DefineMethod ( `` get_Property1 '' , methodAttributes , typeof ( string ) , Type.EmptyTypes ) ; var getterILGenerator = getterOverride.GetILGenerator ( ) ; getterILGenerator.Emit ( OpCodes.Ldnull ) ; getterILGenerator.Emit ( OpCodes.Ret ) ; derivedBuilder.DefineMethodOverride ( getterOverride , typeof ( BaseClass ) .GetMethod ( `` get_Property1 '' ) ) ; var setterOverride = derivedBuilder.DefineMethod ( `` set_Property1 '' , methodAttributes , typeof ( void ) , new [ ] { typeof ( string ) } ) ; var setterILGenerator = setterOverride.GetILGenerator ( ) ; setterILGenerator.Emit ( OpCodes.Ret ) ; derivedBuilder.DefineMethodOverride ( setterOverride , typeof ( BaseClass ) .GetMethod ( `` set_Property1 '' ) ) ; var derivedType = derivedBuilder.CreateType ( ) ; var props = derivedType.GetProperties ( BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance ) ; assemblyBuilder.Save ( `` Test.dll '' ) ; Assert.That ( props , Has.Length.EqualTo ( 1 ) ) ; }"
List < A > OurList = new List < A > ( ) ; private void Update ( ) { Boolean Changed = // ? if ( Changed ) CheckList ( OurList ) ; }
- Views/ - Templates/ - test1/ - Home - Index.cshtml - test2/ - Home - List.cshtml - Home/ - Index.cshtml
private static IEnumerable < string > DoStuff ( string Input ) { List < string > sResult = GetData ( Input ) ; sResult.ForEach ( x = > DoStuff ( x ) ) ; //does not work sResult.ForEach ( item = > yield return item ; ) ; //does work foreach ( string item in sResult ) yield return item ; }
"public class BaseService { protected static readonly object StaticLockObject = new object ( ) ; } public abstract class WebServiceBase < TService > : BaseService where TService : System.Web.Services.Protocols.SoapHttpClientProtocol , new ( ) { protected static void EnsureServiceIsOpened ( ) { if ( Service == null ) { lock ( StaticLockObject ) { if ( Service == null ) { Service = new TService ( ) ; } } } } protected static void EnsureServiceIsClosed ( ) { if ( Service ! = null ) { lock ( StaticLockObject ) { if ( Service ! = null ) // Why expression is always true { Service.Dispose ( ) ; Service = null ; } } } }"
using System ; namespace ConsoleApplication1 { class Program { static void Main ( ) { var start = DateTime.Now ; for ( var i = 0 ; i < 1000000000 ; i++ ) { } Console.WriteLine ( ( DateTime.Now - start ) .TotalMilliseconds ) ; } } }
"{ \field { \*\fldinst { HYPERLINK `` '' https : //www.example.com/ '' '' } } { \fldrslt { \cf1 keyword\cf0 } } } public class ExRichText : RichTextBox { [ DllImport ( `` kernel32.dll '' , EntryPoint = `` LoadLibraryW '' , CharSet = CharSet.Unicode , SetLastError = true ) ] private static extern IntPtr LoadLibraryW ( string path ) ; protected override CreateParams CreateParams { get { var cp = base.CreateParams ; LoadLibraryW ( `` MsftEdit.dll '' ) ; cp.ClassName = `` RichEdit50W '' ; return cp ; } } } public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; ExRichText rtb = new ExRichText ( ) ; rtb.Parent = this ; rtb.SetBounds ( 10 , 10 , 200 , 100 ) ; rtb.Rtf = @ '' { \rtf1 { \colortbl ; \red255\green0\blue0 ; } bar { \field { \*\fldinst { HYPERLINK `` '' https : //www.example.com/ '' '' } } { \fldrslt { \cf1 link\cf0 } } } bar } '' ; } }"
"var result = new { prop1 = `` hello '' , prop2 = `` world '' , prop3 = `` . '' } ;"
"public HistoGrapher ( IList < string > points , IList < T > values ) : this ( points.Select ( ( point , pointIndex ) = > new KeyValuePair < string , T > ( point , values [ pointIndex ] ) ) ) { Contract.Requires < ArgumentNullException > ( points ! = null , `` points '' ) ; Contract.Requires < ArgumentNullException > ( values ! = null , `` values '' ) ; Contract.Requires < ArgumentException > ( points.Count == values.Count , `` The lengths of the lists should be equal . `` ) ; } public HistoGrapher ( IEnumerable < KeyValuePair < string , T > > pointValuePairs ) { // useful code goes here }"
"public class DefaultMeasurement : MarshalByRefObject , IMeasurement { private List < IPoint > iPoints ; public this [ int aIndex ] { get { return iPoints [ aIndex ] ; } } } [ Serializable ] public class DefaultPoint : IPoint , ISerializable { public int Value { get ; set ; } }"
"public static class MapperHelper { /// < summary > /// extension Method for Reader : Maps reader to type defined /// < /summary > /// < typeparam name= '' T '' > Generic type : Model Class Type < /typeparam > /// < param name= '' dataReader '' > this : current Reader < /param > /// < returns > List of Objects < /returns > public static IEnumerable < T > DataReaderMapper < T > ( this IDataReader dataReader ) where T : class , new ( ) { T obj = default ( T ) ; //optimized taken out of both foreach and while loop PropertyInfo [ ] PropertyInfo ; var temp = typeof ( T ) ; PropertyInfo = temp.GetProperties ( ) ; while ( dataReader.Read ( ) ) { obj = new T ( ) ; foreach ( PropertyInfo prop in PropertyInfo ) { if ( DataConverterHelper.ColumnExists ( dataReader , prop.Name ) & & ! dataReader.IsDBNull ( prop.Name ) ) { prop.SetValue ( obj , dataReader [ prop.Name ] , null ) ; } } yield return obj ; } } }"
"foreach ( IAttributeRoute route in GlobalConfiguration.Configuration.Routes.OfType < IAttributeRoute > ( ) ) { if ( ! string.IsNullOrWhiteSpace ( route.RouteName ) & & ! json.ContainsKey ( route.RouteName ) ) { json.Add ( route.RouteName , `` / '' + route.Url ) ; } } foreach ( var route in GlobalConfiguration.Configuration.Routes ) { if ( route is IAttributeRoute ) // uhhhh ? { var r = route as IAttributeRoute ; if ( ! string.IsNullOrWhiteSpace ( r.RouteName ) & & ! json.ContainsKey ( r.RouteName ) ) { json.Add ( r.RouteName , `` / '' + r.Url ) ; } } }"
var pset = new PermissionSet ( PermissionState.None ) ; pset.AddPermission ( new SecurityPermission ( SecurityPermissionFlag.Execution ) ) ;
String first = new String ( new char [ ] { ' a ' } ) ; string second = `` a '' ;
public interface IFoo { void Bar ( ) ; } public class FooClass : IFoo { /// < summary > ... < /summary > /// < seealso cref= '' ? `` / > //How do you reference the IFoo.Bar ( ) method public void Bar ( ) { } /// < summary > ... < /summary > /// < seealso cref= '' ? `` / > //How do you reference the standard Bar ( ) method void IFoo.Bar ( ) { } } < seealso cref= '' IFoo.Bar ( ) '' / > //Explicitly implemented interface method < seealso cref= '' Bar ( ) '' / > //Standard method
"public abstract class BaseCommand { public BaseCommand ( ) { this.CommandId = Guid.NewGuid ( ) ; this.State = CommandState.Ready ; } public Guid CommandId { get ; private set ; } public CommandState State { get ; private set ; } protected abstract void OnExecute ( ) ; public void Execute ( ) { OnExecute ( ) ; State = CommandState.Executed ; } } public class DeleteItemCommand { public int ItemId { get ; set ; } protected override void OnExecute ( ) { var if = AnyKindOfFactory.GetItemRepository ( ) ; if.DeleteItem ( ItemId ) ; } } public class DeleteItemCommand { public int ItemId { get ; set ; } protected override void Execute ( ) { if ( ItemId == default ( int ) ) throw new VeryBadThingHappendException ( `` ItemId is not set , can not delete the void '' ) ; var if = AnyKindOfFactory.GetItemRepository ( ) ; if.DeleteItem ( ItemId ) ; } } public class DeleteItemCommand { public int ItemId { get ; set ; } public void Execute ( ) { Contract.Requires < VeryBadThingHappendException > ( ItemId ! = default ( int ) ) ; var if = AnyKindOfFactory.GetItemRepository ( ) ; if.DeleteItem ( ItemId ) ; } }"
"myStrings.AsParallel ( ) .AsOrdered ( ) .Select ( str = > Operation1 ( str ) ) .AsSequential ( ) .Select ( str = > Operation2 ( str ) ) ; //immagine Operation2 ( ) maintains some sort of state and must take the outputs from Operation1 in the original order public static class ParallelHelper { public static IEnumerable < U > SelectAsOrdered < T , U > ( this ParallelQuery < T > query , Func < T , U > func ) { var completedTasks = new Dictionary < int , U > ( ) ; var queryWithIndexes = query.Select ( ( x , y ) = > new { Input = x , Index = y } ) .AsParallel ( ) .Select ( t = > new { Value = func ( t.Input ) , Index = t.Index } ) .WithMergeOptions ( ParallelMergeOptions.NotBuffered ) ; int i = 0 ; foreach ( var task in queryWithIndexes ) { if ( i==task.Index ) { Console.WriteLine ( `` immediately yielding task : { 0 } '' , i ) ; i++ ; yield return task.Value ; U previouslyCompletedTask ; while ( completedTasks.TryGetValue ( i , out previouslyCompletedTask ) ) { completedTasks.Remove ( i ) ; Console.WriteLine ( `` delayed yielding task : { 0 } '' , i ) ; yield return previouslyCompletedTask ; i++ ; } } else { completedTasks.Add ( task.Index , task.Value ) ; } } yield break ; } } myStrings.AsParallel ( ) .SelectAsOrdered ( str = > Operation1 ( str ) ) .Select ( str = > Operation2 ( str ) ) ;"
$ git show < file > $ git show < commit > : < file >
"public float lat1 = 42.239616f ; public float lat2 = -8.72304f ; public float lon1 = 42.239659f ; public float lon2 = -8.722305f ; void operacion ( ) { float R = 6371000 ; // metres float omega1 = ( ( lat1/180 ) *Mathf.PI ) ; float omega2 = ( ( lat2/180 ) *Mathf.PI ) ; float variacionomega1 = ( ( ( lat2 - lat1 ) /180 ) *Mathf.PI ) ; float variacionomega2 = ( ( ( lon2 - lon1 ) / 180 ) * Mathf.PI ) ; float a = Mathf.Sin ( variacionomega1/2 ) * Mathf.Sin ( variacionomega1/2 ) + Mathf.Cos ( omega1 ) * Mathf.Cos ( omega2 ) * Mathf.Sin ( variacionomega2/2 ) * Mathf.Sin ( variacionomega2/2 ) ; float c = 2 * Mathf.Atan2 ( Mathf.Sqrt ( a ) , Mathf.Sqrt ( 1-a ) ) ; float d = R * c ; }"
if ( someCondition ) { // do some work ViewBag.SomeProperty = values ; } return View ( ) ; @ if ( ViewBag.SomeProperty ! = null ) { ... } dynamic dynamicVariable = new { Name = `` Foo '' } ; if ( dynamicVariable.Surname ! = null ) Console.WriteLine ( dynamicVariable.Surname ) ;
"List < bool > bList = new List < bool > ( ) { true , false , true , true , true , false , false } ; bool bResult = bList [ 0 ] ; for ( int i = 1 ; i < bList.Count ; i++ ) { bResult ^= bList [ i ] ; }"
internal class Program { public interface IJob { } public class Job1 : IJob { } public class Job2 : IJob { } public class Repository < TJob > where TJob : IJob { public List < TJob > GetJobs ( ) { return new List < TJob > ( ) ; } } private static void Main ( string [ ] args ) { IJob iJob = new Job1 ( ) ; // Valid Repository < IJob > repo = new Repository < Job1 > ( ) ; // Not Valid } }
"modelBuilder .Properties ( ) .Where ( p = > p.PropertyType == typeof ( string ) & & p.GetCustomAttributes ( typeof ( MaxLengthAttribute ) , false ) .Length == 0 ) .Configure ( p = > p.HasMaxLength ( 2000 ) ) ;"
"[ HttpPost ] [ ValidateJsonAntiForgeryToken ] public JsonResult LoadPage ( int id , string returnUrl , PageFormViewModel pageForm , string jsonFormModel ) [ AttributeUsage ( AttributeTargets.Method | AttributeTargets.Class , AllowMultiple = false , Inherited = true ) ] public class ValidateJsonAntiForgeryTokenAttribute : FilterAttribute , IAuthorizationFilter { public void OnAuthorization ( AuthorizationContext filterContext ) { if ( filterContext == null ) { throw new ArgumentNullException ( `` filterContext '' ) ; } var httpContext = filterContext.HttpContext ; var cookie = httpContext.Request.Cookies [ AntiForgeryConfig.CookieName ] ; AntiForgery.Validate ( cookie ! = null ? cookie.Value : null , httpContext.Request.Headers [ `` __RequestVerificationToken '' ] ) ; } } var getURL = $ ( ' # GetURL ' ) .val ( ) ; var returnUrl = $ ( ' # ReturnUrl ' ) .val ( ) ; var pageId = $ ( ' # PageId ' ) .val ( ) ; var token = $ ( 'input [ name= '' __RequestVerificationToken '' ] ' ) .val ( ) ; var headers = { } ; headers [ '__RequestVerificationToken ' ] = token ; var thePageForm = pageForm ; var theFormModel = formModel ; $ .ajax ( { type : 'POST ' , url : getURL , contentType : `` application/json ; charset=utf-8 '' , dataType : 'json ' , async : false , headers : headers , data : JSON.stringify ( { id : pageId , returnUrl : returnUrl , pageForm : thePageForm , jsonFormModel : theFormModel } ) , success : function ( model ) { //Load the page } error : function ( ) } ) ; PageViewModel model = new PageViewModel ( ) ; model.Page = dbPages.Pages.Where ( m = > m.Id == id ) .First ( ) ;"
"private void button1_Click ( object sender , EventArgs e ) { for ( int i = 0 ; i < listView1.Items.Count ; i++ ) { if ( listView1.Items [ i ] .SubItems [ 0 ] .Text == `` A1 '' ) { listView1.Items.RemoveAt ( i ) ; } } } private void Form1_Load ( object sender , EventArgs e ) { for ( int i = 0 ; i < 3 ; i++ ) { ListViewItem lvi = new ListViewItem ( `` A1 '' ) ; lvi.SubItems.AddRange ( new string [ ] { `` desc '' + i.ToString ( ) , i.ToString ( ) } ) ; listView1.Items.Add ( lvi ) ; } for ( int i = 0 ; i < 2 ; i++ ) { ListViewItem lvi = new ListViewItem ( `` A2 '' ) ; lvi.SubItems.AddRange ( new string [ ] { `` desc '' + i.ToString ( ) , i.ToString ( ) } ) ; listView1.Items.Add ( lvi ) ; } }"
"// this is the delegate declaration to Allow Background worker thread to write to Log Output delegate void LogUpdateCallBack ( String LogMessage ) ; // method to update the Log Window from the Background Thread public void LogUpdate ( String LogMessage ) { Console.WriteLine ( `` Entering '' ) ; if ( ! Application.Current.Dispatcher.CheckAccess ( ) ) { Console.WriteLine ( `` Thread does n't have UI access '' ) ; LogUpdateCallBack callback = new LogUpdateCallBack ( LogUpdate ) ; Application.Current.Dispatcher.Invoke ( callback , LogMessage ) ; } else { Console.WriteLine ( `` Thread has UI access '' ) ; listBox_Output.Items.Add ( LogMessage ) ; Console.WriteLine ( LogMessage ) ; // listBox_Output.TopIndex = listBox_Output.Items.Count - 1 ; } Console.WriteLine ( `` Exiting '' ) ; } EnteringThread does n't have UI accessEnteringThread has UI accessMy LogMessage is output here ExitingExitingEnteringThread does n't have UI accessEnteringThread has UI accessMy LogMessage is output here ExitingExiting Application.Current.Dispatcher.BeginInvoke ( new LogUpdateCallBack ( LogUpdate ) , LogMessage ) Console.WriteLine ( listBox_Output ) ; System.Windows.Controls.ListBox Items.Count:2020System.Windows.Controls.ListBox Items.Count:2021System.Windows.Controls.ListBox Items.Count:2022System.Windows.Controls.ListBox Items.Count:2023System.Windows.Controls.ListBox Items.Count:2024System.Windows.Controls.ListBox Items.Count:2025"
"protected override void OnActivated ( IActivatedEventArgs args ) { base.OnActivated ( args ) ; ReceivedSpeechRecognitionResult = null ; if ( args.Kind == ActivationKind.VoiceCommand ) { var commandArgs = args as VoiceCommandActivatedEventArgs ; if ( commandArgs ! = null ) { ReceivedSpeechRecognitionResult = commandArgs.Result ; var rootFrame = Window.Current.Content as Frame ; if ( rootFrame ! = null ) { rootFrame.Navigate ( typeof ( CheckCredentials ) , null ) ; } } } } private async Task CheckForVoiceCommands ( ) { await Task.Delay ( 1 ) ; // not sure why I need this var speechRecognitionResult = ( ( App ) Application.Current ) .ReceivedSpeechRecognitionResult ; if ( speechRecognitionResult == null ) { return ; } var voiceCommandName = speechRecognitionResult.RulePath [ 0 ] ; switch ( voiceCommandName ) { // omitted } ( ( App ) Application.Current ) .ReceivedSpeechRecognitionResult = null ; } global : :Windows.UI.Xaml.Application.Start ( ( p ) = > new App ( ) ) ;"
"/*My current Moq setup*/class Program { static void Main ( string [ ] args ) { var mock = new Mock < IFluent > ( ) ; var c1 = new ClassA ( ) { Id = 1 , Records = new List < int > ( ) { 5 , 2 , 1 , 10 } , MetaData = new List < string > ( ) } ; var c2 = new ClassA ( ) { Id = 2 , Records = new List < int > ( ) , MetaData = new List < string > ( ) { `` X '' , `` Y '' , `` Z '' } } ; mock.Setup ( x = > x.GetById ( 1 ) .IncludeRecords ( ) .IncludeMetaData ( ) .Get ( ) ) .Returns ( c1 ) ; mock.Setup ( x = > x.GetById ( 2 ) .IncludeRecords ( ) .IncludeMetaData ( ) .Get ( ) ) .Returns ( c2 ) ; var result = new ComputeClass ( ) .ComputeStuff ( mock.Object ) ; Console.WriteLine ( result ) ; Console.ReadLine ( ) ; } } /*Fluent interface and object returned*/public interface IFluent { IFluent GetById ( int id ) ; IFluent IncludeRecords ( ) ; IFluent IncludeMetaData ( ) ; ClassA Get ( ) ; } public class ClassA { public int Id { get ; set ; } public ICollection < int > Records { get ; set ; } public ICollection < string > MetaData { get ; set ; } } /*the method which is doing the work*/public class ComputeClass { public string ComputeStuff ( IFluent fluent ) { var ids = new List < int > ( ) { 1 , 2 } ; var result = new StringBuilder ( ) ; foreach ( var id in ids ) { var resClass = fluent.GetById ( id ) .IncludeRecords ( ) .IncludeMetaData ( ) .Get ( ) ; result.Append ( $ '' Id : { id } , Records : { resClass.Records.Count } , MetaData : { resClass.MetaData.Count } { Environment.NewLine } '' ) ; } return result.ToString ( ) ; } } Current incorrect result /*Id : 1 , Records : 0 , MetaData : 3 Id : 2 , Records : 0 , MetaData : 3*/ Expected Result /*Id : 1 , Records : 3 , MetaData : 0 Id : 2 , Records : 0 , MetaData : 3*/"
this.Name = myName Name = myName
var q = ( from o in db.Orders where db.Cards ( p = > p.OrderId == o.Id & & p.Sum + ( db.CardItems.Where ( i = > i.IncomeId == p.Id ) .Sum ( i = > ( double ? ) i.Amount ) ? ? 0 ) ! = ( db.CardItems.Where ( i = > i.DeductId == p.Id ) .Sum ( i = > ( double ? ) i.Amount ) ? ? 0 ) ) .Any ( ) select o ) ;
Process.Start ( url ) ; ProcessStartInfo.UserName = Environment.UserName
"var homeItem = sitecoreContext.GetHomeItem < HomeItem > ( ) ; // Create the car itemICar car = sitecoreService.Create ( homeItem.BooksFolder , new Car { Tires = 4 , Seats=4 } ) ;"
text.ToUpper ( CultureInfo.CurrentCulture ) .Length == text.Lengthtext.ToLower ( CultureInfo.CurrentCulture ) .Length == text.Length
public class Pair { public DateTime Timestamp ; public double Value ; }
class MyScrollableControl : ScrollableControl { public MyScrollableControl ( ) { this.AutoScroll = false ; this.HScroll = true ; } } this.HorizontalScroll.Visible = true ; this.AutoScroll = false ; this.HScroll = true ; this.HorizontalScroll.Visible = true ;
"public abstract class BaseUIViewController : UIViewController { public BaseUIViewController ( ) : base ( ) { } public BaseUIViewController ( .. ) : base ( .. ) { } } public class MyController : BaseUIViewController { public MyController ( ISOmeService service , IOtherService service ) { .. } override ViewDidLoad ( .. ) { .. } }"
"public Matrix ConvertToMatrix ( ) { //Figure out how big the return matrix should be int totalRows = this.TotalRows ( ) ; int totalColumns = this.TotalColumns ( ) ; Matrix returnMatrix = new Matrix ( totalRows , totalColumns ) ; List < object > rowElementsList = new List < object > ( ) ; // '' outer '' index means an index of the MatricesMatrix // '' inner '' index means an index of a Matrix within the Matrices Matrix //outer row loop for ( int outerRowIndex = 0 ; outerRowIndex < NumberOfRows ; outerRowIndex++ ) { //outer column loop for ( int outerColumnIndex = 0 ; outerColumnIndex < NumberOfColumns ; outerColumnIndex++ ) { Matrix currentMatrix = GetElement ( outerRowIndex , outerColumnIndex ) ; object element = null ; //inner row loop for ( int innerRowIndex = 0 ; innerRowIndex < currentMatrix.NumberOfRows ; innerRowIndex++ ) { //inner column loop for ( int innerColumnIndex = 0 ; innerColumnIndex < currentMatrix.NumberOfColumns ; innerColumnIndex++ ) { element = currentMatrix.GetElement ( innerRowIndex , innerColumnIndex ) ; } } returnMatrix.SetElement ( outerRowIndex , outerColumnIndex , ( double ) element ) ; } } return returnMatrix ; } [ TestMethod ] public void MatricesMatrix_ConvertToMatrixTest ( ) { Matrix m1 = new Matrix ( 2 ) ; Matrix m2 = new Matrix ( 2 , 3 ) ; Matrix m3 = new Matrix ( 2 ) ; Matrix m4 = new Matrix ( 2 , 3 ) ; double [ ] m1Row1 = { 1 , 1 } ; double [ ] m1Row2 = { 1 , 1 } ; double [ ] m2Row1 = { 2 , 2 , 2 } ; double [ ] m2Row2 = { 2 , 2 , 2 } ; double [ ] m3Row1 = { 3 , 3 } ; double [ ] m3Row2 = { 3 , 3 } ; double [ ] m4Row1 = { 4 , 4 , 4 } ; double [ ] m4Row2 = { 4 , 4 , 4 } ; m1.SetRowOfMatrix ( 0 , m1Row1 ) ; m1.SetRowOfMatrix ( 1 , m1Row2 ) ; m2.SetRowOfMatrix ( 0 , m2Row1 ) ; m2.SetRowOfMatrix ( 1 , m2Row2 ) ; m3.SetRowOfMatrix ( 0 , m3Row1 ) ; m3.SetRowOfMatrix ( 1 , m3Row2 ) ; m4.SetRowOfMatrix ( 0 , m4Row1 ) ; m4.SetRowOfMatrix ( 1 , m4Row2 ) ; MatricesMatrix testMatricesMatrix = new MatricesMatrix ( 2 , 2 ) ; testMatricesMatrix.SetElement ( 0 , 0 , m1 ) ; testMatricesMatrix.SetElement ( 0 , 1 , m2 ) ; testMatricesMatrix.SetElement ( 1 , 0 , m3 ) ; testMatricesMatrix.SetElement ( 1 , 1 , m4 ) ; Matrix expectedResult = new Matrix ( 4 , 5 ) ; double [ ] expectedRow1 = { 1 , 1 , 2 , 2 , 2 } ; double [ ] expectedRow2 = { 1 , 1 , 2 , 2 , 2 } ; double [ ] expectedRow3 = { 3 , 3 , 4 , 4 , 4 } ; double [ ] expectedRow4 = { 3 , 3 , 4 , 4 , 4 } ; expectedResult.SetRowOfMatrix ( 0 , expectedRow1 ) ; expectedResult.SetRowOfMatrix ( 1 , expectedRow2 ) ; expectedResult.SetRowOfMatrix ( 2 , expectedRow3 ) ; expectedResult.SetRowOfMatrix ( 3 , expectedRow4 ) ; Matrix actualResult = testMatricesMatrix.ConvertToMatrix ( ) ; ( actualResult == expectedResult ) .Should ( ) .BeTrue ( ) ; }"
if ( fi.FieldType.Name == `` Int16 '' ) bw.Write ( ( Int16 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` UInt16 '' ) bw.Write ( ( UInt16 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Int32 '' ) bw.Write ( ( Int32 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` UInt32 '' ) bw.Write ( ( UInt32 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Int64 '' ) bw.Write ( ( Int64 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` UInt64 '' ) bw.Write ( ( UInt64 ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Single '' ) bw.Write ( ( float ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Double '' ) bw.Write ( ( double ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Decimal '' ) bw.Write ( ( decimal ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` Byte '' ) bw.Write ( ( byte ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` SByte '' ) bw.Write ( ( sbyte ) fi.GetValue ( obj ) ) ; else if ( fi.FieldType.Name == `` String '' ) bw.Write ( ( string ) fi.GetValue ( obj ) ) ; bw.Write ( ( fi.FieldType ) fi.GetValue ( obj ) ) ;
"IEnumerable < Wazoo > zipped = arr1.Zip ( arr2 , ( outer , inner ) = > new Wazoo { P1 = outer , P2 = inner } ) ; IEnumerable < Wazoo > zipped = arr1.Zip ( arr2 , arr3 , ( e1 , e2 , e3 ) = > new Wazoo { P1 = e1 , P2 = e2 , P3 = e3 } ) ;"
"var genericNullableType = typeof ( Nullable < > ) ; var nullableType = genericNullableType.MakeGenericType ( typeof ( bool ) ) ; var returnValue = Activator.CreateInstance ( nullableType , ( object ) false ) ;"
List < StorageFile > allTrackFiles = null ; private async Task GetFiles ( StorageFolder folder ) { if ( ! scanningRemovableTask ) { return ; } try { if ( allTrackFiles == null ) { allTrackFiles = new List < StorageFile > ( ) ; } var items = await folder.GetItemsAsync ( ) ; foreach ( var item in items ) { if ( item.GetType ( ) == typeof ( StorageFile ) ) { StorageFile storageFile = item as StorageFile ; allTrackFiles.Add ( storageFile ) ; var basicProperties = await storageFile.GetBasicPropertiesAsync ( ) ; var musicProperties = await storageFile.OpenReadAsync ( ) ; } else await GetFiles ( item as StorageFolder ) ; } } catch ( Exception e ) { } }
"DateTime dt = DateTime.ParseExact ( fileDate , `` yyyyy-DD-MM '' , CultureInfo.InvariantCulture ) ; DateTime dt = DateTime.Parse ( fileDate ) ; String was not recognized as a valid DateTime ."
"WebRequest Request = Request.Create ( `` http : //example.com '' ) as HttpWebRequest ; Request.Method = `` POST '' ; Request.ContentType = `` application/x-www-form-urlencoded ; charset=UTF-8 '' ; Request.Headers.Set ( `` Accept-Encoding '' , `` gzip , deflate '' ) ; Request.Accept = `` */* '' ; Request.Headers.Set ( `` Accept '' , `` */* '' ) ;"
"class A { } class B { } class WorkerA { public WorkerA ( Func < A > funcA ) { } } class WorkerAorB { public WorkerAorB ( Func < A > funcA ) { } public WorkerAorB ( Func < B > funcB ) { } } class WorkerAandB { public WorkerAandB ( Func < A > funcA , Func < B > funcB = null ) { } public WorkerAandB ( Func < B > funcB ) { } } class ManagerA { A GetA ( ) { return new A ( ) ; } static A GetAstatic ( ) { return new A ( ) ; } Func < A > GetAfunc = GetAstatic ; ManagerA ( ) { new WorkerA ( ( ) = > new A ( ) ) ; // ok new WorkerA ( GetA ) ; // ok new WorkerA ( GetAstatic ) ; // ok new WorkerAorB ( ( ) = > new A ( ) ) ; // ok new WorkerAorB ( ( ) = > new B ( ) ) ; // ok new WorkerAorB ( GetA ) ; // error CS0121 new WorkerAorB ( GetAstatic ) ; // error CS0121 new WorkerAorB ( ( ) = > GetA ( ) ) ; // ok new WorkerAorB ( GetAfunc ) ; // ok new WorkerAandB ( ( ) = > new A ( ) ) ; // ok new WorkerAandB ( GetA ) ; // error CS0407 new WorkerAandB ( GetAstatic ) ; // error CS0407 new WorkerAandB ( GetA , null ) ; // ok new WorkerAandB ( GetAstatic , null ) ; // ok new WorkerAandB ( GetAfunc ) ; // ok } } // class ManagerB or ManagerAandB left as an exercise to the reader ! class B : A { } public WorkerAandB ( Func < B > funcB ) { } new WorkerAandB ( GetB ) new WorkerAandB ( GetB , GetB )"
"sample [ 1,2,4,8,16,32 ]"
var lines = File.ReadAllLines ( `` C : \\FileToSearch.txt '' ) .Where ( x = > ! x.EndsWith ( `` 999999999999 '' ) ) ; foreach ( var line in lines ) { if ( lineCounter == 1 ) { outputResults.Add ( oData.ToCanadianFormatFileHeader ( ) ) ; } else if ( lineCounter == 2 ) { outputResults.Add ( oData.ToCanadianFormatBatchHeader ( ) ) ; } else { oData.FromUsLineFormat ( line ) ; outputResults.Add ( oData.ToCanadianLineFormat ( ) ) ; } lineCounter = lineCounter + 1 ; textBuilder += ( line + `` < br > '' ) ; }
"2020-11-14T01:59:45.8238544Z [ command ] '' C : \Program Files\dotnet\dotnet.exe '' build D : \a\1\s\XXX.csproj `` -dl : CentralLogger , \ '' D : \a\_tasks\DotNetCoreCLI_5541a522-603c-47ad-91fc-a4b1d163081b\2.178.0\dotnet-build-helpers\Microsoft.TeamFoundation.DistributedTask.MSBuild.Logger.dll\ '' *ForwardingLogger , \ '' D : \a\_tasks\DotNetCoreCLI_5541a522-603c-47ad-91fc-a4b1d163081b\2.178.0\dotnet-build-helpers\Microsoft.TeamFoundation.DistributedTask.MSBuild.Logger.dll\ '' '' 2020-11-14T01:59:46.1472016Z Microsoft ( R ) Build Engine version 16.7.0+7fb82e5b2 for .NET2020-11-14T01:59:46.1473316Z Copyright ( C ) Microsoft Corporation . All rights reserved.2020-11-14T01:59:46.1473902Z 2020-11-14T01:59:46.6006398Z Determining projects to restore ... 2020-11-14T01:59:47.2059773Z Restored D : \a\1\s\XXX.csproj ( in 234 ms ) .2020-11-14T01:59:47.2119638Z 1 of 2 projects are up-to-date for restore . 2020-11-14T01:59:47.3209350Z # # [ error ] C : \Program Files\dotnet\sdk\3.1.403\Microsoft.Common.CurrentVersion.targets ( 1177,5 ) : Error MSB3644 : The reference assemblies for .NETFramework , Version=v5.0 were not found . To resolve this , install the Developer Pack ( SDK/Targeting Pack ) for this framework version or retarget your application . You can download .NET Framework Developer Packs at https : //aka.ms/msbuild/developerpacks2020-11-14T01:59:47.3261839Z C : \Program Files\dotnet\sdk\3.1.403\Microsoft.Common.CurrentVersion.targets ( 1177,5 ) : error MSB3644 : The reference assemblies for .NETFramework , Version=v5.0 were not found . To resolve this , install the Developer Pack ( SDK/Targeting Pack ) for this framework version or retarget your application . You can download .NET Framework Developer Packs at https : //aka.ms/msbuild/developerpacks [ D : \a\1\s\XXX.csproj ] 2020-11-14T01:59:47.3270768Z 2020-11-14T01:59:47.3274231Z Build FAILED.2020-11-14T01:59:47.3275925Z 2020-11-14T01:59:47.3277393Z C : \Program Files\dotnet\sdk\3.1.403\Microsoft.Common.CurrentVersion.targets ( 1177,5 ) : error MSB3644 : The reference assemblies for .NETFramework , Version=v5.0 were not found . To resolve this , install the Developer Pack ( SDK/Targeting Pack ) for this framework version or retarget your application . You can download .NET Framework Developer Packs at https : //aka.ms/msbuild/developerpacks [ D : \a\1\s\XXX.csproj ] 2020-11-14T01:59:47.3279484Z 0 Warning ( s ) 2020-11-14T01:59:47.3279860Z 1 Error ( s ) 2020-11-14T01:59:47.3280170Z 2020-11-14T01:59:47.3280537Z Time Elapsed 00:00:01.092020-11-14T01:59:47.3624731Z # # [ error ] Error : The process ' C : \Program Files\dotnet\dotnet.exe ' failed with exit code 1"
class classA { public virtual void sayhello ( ) { Console.WriteLine ( `` hello I 'm A '' ) ; } } ; class classB : classA { public override void sayhello ( ) { Console.WriteLine ( `` hello I 'm B '' ) ; } } ; class Program { static void Main ( string [ ] args ) { classB a = new classB ( ) ; a.sayhello ( ) ; } } class classB : classA { public void sayhello ( ) { Console.WriteLine ( `` hello I 'm B '' ) ; } } ;
"static void Main ( string [ ] args ) { ReceiptsItemCodeAnalysisContext db = new ReceiptsItemCodeAnalysisContext ( ) ; var recon = db.Recons .Where ( r = > r.Transacs.Where ( t = > t.ItemCodeDetails.Count > 0 ) .Count ( ) > 0 ) .OrderBy ( r = > r.ReconNum ) ; // used for `` paging '' the processing var processed = 0 ; var total = recon.Count ( ) ; var batchSize = 1000 ; //100000 ; var batch = 1 ; var skip = 0 ; var doBatch = true ; while ( doBatch ) { // list to store facts processed during the batch List < ReconFact > facts = new List < ReconFact > ( ) ; // get the Recon items to process in this batch put them in a list List < Recon > toProcess = recon.Skip ( skip ) .Take ( batchSize ) .Include ( r = > r.Transacs.Select ( t = > t.ItemCodeDetails ) ) .ToList ( ) ; // to process real fast Parallel.ForEach ( toProcess , r = > { // processing a recon and adding the facts to the list var thisReconFacts = ReconFactGenerator.Generate ( r ) ; thisReconFacts.ForEach ( f = > facts.Add ( f ) ) ; Console.WriteLine ( processed += 1 ) ; } ) ; // saving the facts using pattern provided by Slauma using ( TransactionScope scope = new TransactionScope ( TransactionScopeOption.Required , new System.TimeSpan ( 0 , 15 , 0 ) ) ) { ReceiptsItemCodeAnalysisContext context = null ; try { context = new ReceiptsItemCodeAnalysisContext ( ) ; context.Configuration.AutoDetectChangesEnabled = false ; int count = 0 ; foreach ( var fact in facts.Where ( f = > f ! = null ) ) { count++ ; Console.WriteLine ( count ) ; context = ContextHelper.AddToContext ( context , fact , count , 250 , true ) ; //context.AddToContext ( context , fact , count , 250 , true ) ; } context.SaveChanges ( ) ; } finally { if ( context ! = null ) context.Dispose ( ) ; } scope.Complete ( ) ; } Console.WriteLine ( `` batch { 0 } finished continuing '' , batch ) ; // continuing the batch batch++ ; skip = batchSize * ( batch - 1 ) ; doBatch = skip < total ; // AFTER THIS facts AND toProcess SHOULD BE RESET // BUT IT LOOKS LIKE THEY ARE NOT OR AT LEAST SOMETHING // IS GROWING IN MEMORY } Console.WriteLine ( `` Processing is done { } recons processed '' , processed ) ; } class ContextHelper { public static ReceiptsItemCodeAnalysisContext AddToContext ( ReceiptsItemCodeAnalysisContext context , ReconFact entity , int count , int commitCount , bool recreateContext ) { context.Set < ReconFact > ( ) .Add ( entity ) ; if ( count % commitCount == 0 ) { context.SaveChanges ( ) ; if ( recreateContext ) { context.Dispose ( ) ; context = new ReceiptsItemCodeAnalysisContext ( ) ; context.Configuration.AutoDetectChangesEnabled = false ; } } return context ; } }"
public class PersonModel { public string FName { get ; set ; } public string LName { get ; set ; } } public class PersonController ( ) : Controller { public ActionResult Save ( PersonModel person ) { if ( ModelState.IsValid ) // returns true // do things return View ( person ) } }
"stp1.Start ( ) ; for ( int i = 0 ; i < tsk.Length ; i++ ) { tsk [ i ] = Task.Factory.StartNew ( ( object obj ) = > { resp = http.SynchronousRequest ( web , 443 , true , req ) ; } , i ) ; } try { Task.WaitAll ( tsk ) ; } stp1.Stop ( ) ;"
public abstract class TestClass { public int Get ( ) { # if DEBUG return 1 ; # else return 2 ; # endif } }
"_log.Info ( `` Information - We are about to do magic ! '' ) ; _log.Warn ( `` Warning ! `` ) ; _log.Trace ( `` Trace some data . `` ) ; _log.Error ( `` Something bad happened at { 0 } '' , DateTime.Now ) ; _log.Fatal ( `` Danger Will Robinson ! `` ) ; NSLog ( @ '' % @ % @ started '' , [ self class ] , NSStringFromSelector ( _cmd ) ) ; NSLog ( @ '' % @ % @ ends `` , [ self class ] , NSStringFromSelector ( _cmd ) ) ;"
"Marshal.PtrToStringAuto ( Marshal.ReadIntPtr ( myCOMObject.GetString , 0 ) interface _MyCOMObect : IDispatch { ... [ id ( 0x60030006 ) ] HRESULT GetString ( [ in ] _IEventHistory* p_oEventHistory , [ out , retval ] _IXML** ) ; ... } ; [ uuid ( 09A06762-5322-4DC1-90DD-321D4EFC9C3E ) , version ( 1.0 ) , custom ( { 17093CC6-9BD2-11CF-AA4F-304BF89C0001 } , `` 0 '' ) ] coclass MyCOMObject { [ default ] interface _CFactory ; } ; [ odl , uuid ( C6E7413F-C63A-43E4-8B67-6AEAD132F5E5 ) , version ( 1.0 ) , hidden , dual , nonextensible , oleautomation ]"
class Test1 { public const int b = 8 ; public static int z = 3 ; public static void Main ( string [ ] args ) { const int q = 6 ; Console.WriteLine ( q ) ; Console.WriteLine ( b ) ; Console.WriteLine ( z ) ; } } .field public static literal int32 b = int32 ( 0x00000008 ) .field public static int32 z// method line 2.method public static hidebysig default void Main ( string [ ] args ) cil managed { // Method begins at RVA 0x2058 .entrypoint // Code size 23 ( 0x17 ) .maxstack 8 IL_0000 : ldc.i4.6 IL_0001 : call void class [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_0006 : ldc.i4.8 IL_0007 : call void class [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_000c : ldsfld int32 Test.Test1 : :z IL_0011 : call void class [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_0016 : ret } // end of method Test1 : :Main Unhandled Exception : System.InvalidProgramException : Invalid IL code in Test.Test1 : Main ( string [ ] ) : IL_0006 : ldsfld 0x04000001 [ ERROR ] FATAL UNHANDLED EXCEPTION : System.InvalidProgramException : Invalid IL code in Test.Test1 : Main ( string [ ] ) : IL_0006 : ldsfld 0x04000001
"Expression < Func < TestQuerySource , Bundle > > expression = db = > ( from b in db.Bundles join bi in db.BundleItems on b.ID equals bi.BundleID join p in db.Products on bi.ProductID equals p.ID group p by b ) .First ( ) .Key ; System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation . -- - > System.NotSupportedException : The member ' < > f__AnonymousType0 ` 2 [ Bundle , BundleItem ] .bi ' has no supported translation to SQL . { db = > db.Bundles.Join ( db.BundleItems , b = > b.ID , bi = > bi.BundleID , ( b , bi ) = > new < > f__AnonymousType0 ` 2 ( b = b , bi = bi ) ) .Join ( db.Products , < > h__TransparentIdentifier0 = > < > h__TransparentIdentifier0.bi.ProductID , p = > p.ID , ( < > h__TransparentIdentifier0 , p ) = > new < > f__AnonymousType1 ` 2 ( < > h__TransparentIdentifier0 = < > h__TransparentIdentifier0 , p = p ) ) .GroupBy ( < > h__TransparentIdentifier1 = > < > h__TransparentIdentifier1. < > h__TransparentIdentifier0.b , < > h__TransparentIdentifier1 = > < > h__TransparentIdentifier1.p ) .First ( ) .Key } { db = > db.Bundles.Join ( db.BundleItems , b = > b.ID , bi = > bi.BundleID , ( b , bi ) = > new < > f__AnonymousType0 ` 2 ( b , bi ) ) .Join ( db.Products , < > h__TransparentIdentifier0 = > < > h__TransparentIdentifier0.bi.ProductID , p = > p.ID , ( < > h__TransparentIdentifier0 , p ) = > new < > f__AnonymousType1 ` 2 ( < > h__TransparentIdentifier0 , p ) ) .GroupBy ( < > h__TransparentIdentifier1 = > < > h__TransparentIdentifier1. < > h__TransparentIdentifier0.b , < > h__TransparentIdentifier1 = > < > h__TransparentIdentifier1.p ) .First ( ) .Key } Expression < Func < TestQuerySource , Category > > expression = db = > db.Categories.First ( ) ; Expression < Func < TestQuerySource , Int32 > > expression = db = > db.Categories.GroupBy ( c = > c.ID ) .First ( ) .Key ; Expression < Func < TestQuerySource , Product > > expression = db = > ( from bi in db.BundleItems join p in db.Products on bi.ProductID equals p.ID select p ) .First ( ) ; Expression < Func < TestQuerySource , dynamic > > expression = db = > ( from bi in db.BundleItems join p in db.Products on bi.ProductID equals p.ID select new { a = bi , b = p } ) .First ( ) ; { db = > db.BundleItems.Join ( db.Products , bi = > bi.ProductID , p = > p.ID , ( bi , p ) = > new < > f__AnonymousType0 ` 2 ( a = bi , b = p ) ) .First ( ) } { db = > db.BundleItems.Join ( db.Products , bi = > bi.ProductID , p = > p.ID , ( bi , p ) = > new < > f__AnonymousType0 ` 2 ( bi , p ) ) .First ( ) }"
items.Count ( ) items.Count items.Distinct ( ) .Count ( )
object reference = new StringBuilder ( ) ; object box = 42 ; object unset = null ; // CASE ONE : bad reference conversions ( CIL instrcution 0x74 'castclass ' ) try { string s = ( string ) reference ; } catch ( InvalidCastException ice ) { Console.WriteLine ( ice.Message ) ; // Unable to cast object of type 'System.Text.StringBuilder ' to type 'System.String ' . } try { string s = ( string ) box ; } catch ( InvalidCastException ice ) { Console.WriteLine ( ice.Message ) ; // Unable to cast object of type 'System.Int32 ' to type 'System.String ' . } // CASE TWO : bad unboxing conversions ( CIL instrcution 0xA5 'unbox.any ' ) try { long l = ( long ) reference ; } catch ( InvalidCastException ice ) { Console.WriteLine ( ice.Message ) ; // Specified cast is not valid . } try { long l = ( long ) box ; } catch ( InvalidCastException ice ) { Console.WriteLine ( ice.Message ) ; // Specified cast is not valid . } try { long l = ( long ) unset ; } catch ( NullReferenceException nre ) { Console.WriteLine ( nre.Message ) ; // Object reference not set to an instance of an object . }
void PerformOperation ( in SomeReadOnlyStruct value ) { } void PerformOperation < T > ( in ReadOnlySpan < T > value ) { } void PerformOperation < T > ( ReadOnlySpan < T > value ) { }
static void TestTearingLong ( ) { System.Threading.Thread A = new System.Threading.Thread ( ThreadA ) ; A.Start ( ) ; System.Threading.Thread B = new System.Threading.Thread ( ThreadB ) ; B.Start ( ) ; } static ulong s_x ; static void ThreadA ( ) { int i = 0 ; while ( true ) { s_x = ( i & 1 ) == 0 ? 0x0L : 0xaaaabbbbccccddddL ; i++ ; } } static void ThreadB ( ) { while ( true ) { ulong x = s_x ; Debug.Assert ( x == 0x0L || x == 0xaaaabbbbccccddddL ) ; } } static double s_x ; static void TestTearingDouble ( ) { System.Threading.Thread A = new System.Threading.Thread ( ThreadA ) ; A.Start ( ) ; System.Threading.Thread B = new System.Threading.Thread ( ThreadB ) ; B.Start ( ) ; } static void ThreadA ( ) { long i = 0 ; while ( true ) { s_x = ( ( i & 1 ) == 0 ) ? 0.0 : double.MaxValue ; i++ ; if ( i % 10000000 == 0 ) { Console.Out.WriteLine ( `` i = `` + i ) ; } } } static void ThreadB ( ) { while ( true ) { double x = s_x ; System.Diagnostics.Debug.Assert ( x == 0.0 || x == double.MaxValue ) ; } }
public void GenericMethod < T > ( T item ) { var typeOf = typeof ( T ) ; var getType = item.GetType ( ) ; } GenericMethod ( 1 ) GenericMethod ( ( object ) 1 ) typeOf = System.Int32getType = System.Int32 typeOf = System.ObjectgetType = System.Int32
"try { foreach ( FileInfo fi in di.GetFiles ( ) ) { collection.Add ( fi.Name ) ; } foreach ( DirectoryInfo d in di.GetDirectories ( ) ) { populateItems ( collection , d ) ; } } catch ( UnauthorizedAccessException ex ) { //ignore and move onto next directory }"
"var updateDefinition = new UpdateDefinitionBuilder < OverviewProfile > ( ) .Set ( a = > a.Advisors [ -1 ] .IsCurrent , advisor.IsCurrent ) ; public class OverviewProfile : BaseInvestorProfile { //Other properties public List < Advisor.View.Advisor > Advisors { get ; set ; } public OverviewProfile ( int id ) : base ( id ) { Advisors = new List < Advisor.View.Advisor > ( ) ; } }"
public IFoo GetFooInstance ( ) { # IF DEBUG return new TestFoo ( ) ; # ELSE return new Foo ( ) ; # ENDIF }
public class Bootstrapper : UnityBootstrapper { protected override DependencyObject CreateShell ( ) { return Container.Resolve < MainWindow > ( ) ; } protected override void InitializeShell ( ) { base.InitializeShell ( ) ; Application.Current.MainWindow = ( Window ) Shell ; Application.Current.MainWindow.Show ( ) ; } protected override void ConfigureModuleCatalog ( ) { ModuleCatalog moduleCatalog = ( ModuleCatalog ) ModuleCatalog ; moduleCatalog.AddModule ( typeof ( MainShellModule ) ) ; } }
"public interface IFooBarController { [ HttpPost ] void DoSomething ( ) ; [ HttpPost ] void Delete ( int id ) ; } public class FooBarController : IFooBarController { public void DoSomething ( ) { // This API method can only be called using POST , // as you would expect from the interface . } public void Delete ( int id ) { // This API method can only be called using DELETE , // even though the interface specifies [ HttpPost ] . } }"
"[ Serializable , XmlRoot ( `` config '' ) ] public sealed class RemoteHost : IEquatable < RemoteHost > { // ... } public class Program { public static void Main ( ) { RemoteHost host = new RemoteHost ( `` A '' ) ; List < RemoteHost > hosts = new List < RemoteHost > ( ) ; hosts.Add ( host ) ; XmlSerializer ser = new XmlSerializer ( typeof ( List < RemoteHost > ) ) ; ser.Serialize ( Console.Out , hosts ) ; } } < ? xml version= '' 1.0 '' ? > < ArrayOfConfig xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < config Name= '' A '' > < /config > < /ArrayOfConfig > < ? xml version= '' 1.0 '' encoding= '' ibm850 '' ? > < ArrayOfRemoteHost xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < RemoteHost Name= '' A '' > < /RemoteHost > < /ArrayOfRemoteHost >"
public static class SessionKeys { public static class Login { public static string AccessToken = nameof ( AccessToken ) ; public static string UserInfo = nameof ( UserInfo ) ; } } public static class SessionKeys { public static class Login { public static string AccessToken = `` AccessToken '' ; public static string UserInfo = `` UserInfo '' ; } }
var test = string.Empty ; if ( test.Length == 0 ) Console.WriteLine ( `` String is empty ! `` ) ; if ( ! ( test.Any ( ) ) ) Console.WriteLine ( `` String is empty ! `` ) ; if ( test.Count ( ) == 0 ) Console.WriteLine ( `` String is empty ! `` ) ; if ( String.IsNullOrWhiteSpace ( test ) ) Console.WriteLine ( `` String is empty ! `` ) ; var s = Convert.ToString ( test ) ; s = test.ToString ( CultureInfo.InvariantCulture ) ;
void Foo < T > ( ) where T : new ( ) { var t = new T ( ) ; }
"var types = this.GetType ( ) .GetTypeInfo ( ) .Assembly.GetTypes ( ) .Where ( t = > Attribute.IsDefined ( t , typeof ( MyAttribute ) ) ) ;"
connection.OpenAsync ( ) .ConfigureAwait ( false ) ; cmd.ExecuteNonQueryAsync ( ) .ConfigureAwait ( false ) ;
"ERROR [ 42000 ] [ Microsoft ] [ ODBC SQL Server Driver ] [ SQL Server ] Can not open database `` EmployeeDb '' requested by the login . The login failed.ERROR [ 42000 ] [ Microsoft ] [ ODBC SQL Server Driver ] [ SQL Server ] Can not open database `` EmployeeDb '' requested by the login . The login failed.StackTrace : at System.Data.Odbc.OdbcConnection.HandleError ( OdbcHandle hrHandle , RetCode retcode ) at System.Data.Odbc.OdbcConnectionHandle..ctor ( OdbcConnection connection , OdbcConnectionString constr , OdbcEnvironmentHandle environmentHandle ) at System.Data.Odbc.OdbcConnectionOpen..ctor ( OdbcConnection outerConnection , OdbcConnectionString connectionOptions ) at System.Data.Odbc.OdbcConnectionFactory.CreateConnection ( DbConnectionOptions options , DbConnectionPoolKey poolKey , Object poolGroupProviderInfo , DbConnectionPool pool , DbConnection owningObject ) at System.Data.ProviderBase.DbConnectionFactory.CreateConnection ( DbConnectionOptions options , DbConnectionPoolKey poolKey , Object poolGroupProviderInfo , DbConnectionPool pool , DbConnection owningConnection , DbConnectionOptions userOptions ) at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection ( DbConnection owningConnection , DbConnectionPoolGroup poolGroup , DbConnectionOptions userOptions ) at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection ( DbConnection owningConnection , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions , DbConnectionInternal oldConnection , DbConnectionInternal & connection ) at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal ( DbConnection outerConnection , DbConnectionFactory connectionFactory , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions ) at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection ( DbConnection outerConnection , DbConnectionFactory connectionFactory , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions ) at System.Data.ProviderBase.DbConnectionInternal.OpenConnection ( DbConnection outerConnection , DbConnectionFactory connectionFactory ) at System.Data.Odbc.OdbcConnection.Open ( ) var conn = new OdbcConnection ( @ '' DSN=Employee '' ) ; conn.Open ( ) ; conn.Close ( ) ;"
"public static ReactiveUI.ObservableAsPropertyHelper < TRet > ObservableToProperty < TObj , TRet > ( this TObj This , System.IObservable < TRet > observable , System.Linq.Expressions.Expression < System.Func < TObj , TRet > > property , TRet initialValue = null , System.Reactive.Concurrency.IScheduler scheduler = null ) System.Linq.Expressions.Expression < System.Func < TObj , TRet > > property , this.ObservableAsPropertyHelper ( observable , me = > me.MyProperty ) m.ObservableToProperty ( this , value , fun me - > me.Property ) m.ObservableToProperty ( this , value , new Linq.Expression.Expression ( fun me - > me.Property )"
[ Table ( `` SavesSet '' ) ] public partial class Saves { public Saves ( ) { this.SkillsSet = new HashSet < Skills > ( ) ; } [ Key ] public int SaveID { get ; set ; } public string Player { get ; set ; } public int Age { get ; set ; } public int Money { get ; set ; } public virtual ICollection < Skills > SkillsSet { get ; set ; } } [ Table ( `` SkillsSet '' ) ] public partial class Skills { [ Key ] public int SkillID { get ; set ; } public string Name { get ; set ; } public int Value { get ; set ; } public int SavesSaveID { get ; set ; } public virtual Saves SavesSet { get ; set ; } } private SavesContext db = new SavesContext ( ) ; foreach ( Saves s in db.SavesSet.ToList ( ) ) { ListViewItem l = new ListViewItem ( ) ; l.Name = s.SaveID.ToString ( ) ; l.Text = s.Player ; ListViewSaves.Items.Add ( l ) ; } Saves s = new Saves ( ) ; s.Player = `` TestName '' ; s.Age = 5110 ; s.Money = 200 ; db.SavesSet.Add ( s ) ; db.SaveChanges ( ) ; public SavesContext ( ) : base ( `` Saves '' ) { } public DbSet < Saves > SavesSet { get ; set ; } public DbSet < Skills > SkillsSet { get ; set ; } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < configuration > < configSections > < /configSections > < connectionStrings > < add name= '' TextSim.Properties.Settings.Saves '' connectionString= '' Data Source=C : \Documents and Settings\My\My Documents\visual studio 2010\Projects\TextSim\TextSim\Saves.sdf '' providerName= '' System.Data.SqlServerCe.3.5 '' / > < /connectionStrings > < /configuration >
.method private hidebysig static class myModelTestarea.Foo Method ( ) cil managed { .maxstack 1 .locals init ( [ 0 ] class myModelTestarea.Foo CS $ 1 $ 0000 ) L_0000 : nop L_0001 : ldc.i4.0 L_0002 : newarr object L_0007 : call object myModelTestarea.Program : :Resolve ( object [ ] ) L_000c : castclass myModelTestarea.Foo L_0011 : stloc.0 L_0012 : br.s L_0014 L_0014 : ldloc.0 L_0015 : ret } private static Foo Method ( ) { return ( Foo ) Resolve ( ) ; } private static object Resolve ( params object [ ] args ) { return new Foo ( ) ; }
"[ WebMethod ( EnableSession = true , Description = `` Method for deleting files uploaded by customers '' ) ] [ ScriptMethod ( ResponseFormat = ResponseFormat.Xml ) ] public Boolean deleteCustFiles ( string cNum , string year , string fileName ) { try { if ( String.IsNullOrEmpty ( cNum ) || String.IsNullOrEmpty ( year ) || String.IsNullOrEmpty ( fileName ) ) throw new Exception ( ) ; string path = Server.MapPath ( @ '' ~\docs\custFiles\ '' + year + @ '' \ '' + cNum + @ '' \ '' + fileName ) ; File.Delete ( path ) ; } catch { throw new Exception ( `` Unable to delete file '' ) ; } return true ; }"
"< Application.Resources > < DataTemplate DataType= '' { x : Type vm : BlowerViewModel } '' > < v : BlowerView / > < /DataTemplate > < DataTemplate DataType= '' { x : Type vm : HomeViewModel } '' > < v : HomeView / > < /DataTemplate > < /Application.Resources > < Window x : Class= '' App.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : vm= '' clr-namespace : App.UI.ViewModel '' Title= '' MainWindow '' SizeToContent= '' WidthAndHeight '' > < Window.DataContext > < vm : MainViewModel / > < /Window.DataContext > < ContentControl Content= '' { Binding CurrentView } '' / > < /Window > public class MainViewModel : BaseViewModel { private BaseViewModel _currentView ; public MainViewModel ( ) { CurrentView = new HomeViewModel ( ) ; } public BaseViewModel CurrentView { get { return _currentView ; } set { if ( _currentView ! = value ) { _currentView = value ; RaiseChangedEvent ( `` CurrentView '' ) ; } } } public ICommand SwitchView { get { return new CommandHandler ( ( ) = > SwitchBlower ( ) ) ; } } protected void SwitchBlower ( ) { CurrentView = new BlowerViewModel ( ) ; } } < UserControl x : Class= '' App.UI.View.HomeView '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : vm= '' clr-namespace : App.UI.ViewModel '' Height= '' 300 '' Width= '' 300 '' > < Grid > < TextBlock > This is the homeview < /TextBlock > < Button Command= '' { Binding DataContext.SwitchView , RelativeSource= { RelativeSource AncestorType= { x : Type vm : MainViewModel } } , Mode=OneWay } '' Content= '' Test '' / > < /Grid > < /UserControl >"
"class DummyComparer : IEqualityComparer < Dummy > { public bool Equals ( Dummy x , Dummy y ) { return x.ID == y.ID ; } public int GetHashCode ( Dummy obj ) { return obj.ID.GetHashCode ( ) ; } } class Dummy { public int ID { get ; set ; } public string Name { get ; set ; } } [ Test ] public void UnionTest ( ) { var comparer = new DummyComparer ( ) ; var d1 = new Dummy { ID = 0 , Name = `` test0 '' } ; var d2 = new Dummy { ID = 0 , Name = `` test1 '' } ; var d3 = new Dummy { ID = 1 , Name = `` test2 '' } ; var d4 = new Dummy { ID = 1 , Name = `` test3 '' } ; var col1 = new Dummy [ ] { d1 , d3 } ; var col2 = new Dummy [ ] { d2 , d4 } ; var x1 = col1.Union ( col2 , comparer ) .ToList ( ) ; var x2 = col2.Union ( col1 , comparer ) .ToList ( ) ; var y1 = col1.Except ( col2 , comparer ) .ToList ( ) ; var y2 = col2.Except ( col1 , comparer ) .ToList ( ) ; var z1 = col1.Intersect ( col2 , comparer ) .ToList ( ) ; var z2 = col2.Intersect ( col1 , comparer ) .ToList ( ) ; Assert.AreEqual ( 2 , x1.Count ) ; Assert.Contains ( d1 , x1 ) ; Assert.Contains ( d3 , x1 ) ; Assert.AreEqual ( 2 , x2.Count ) ; Assert.Contains ( d2 , x2 ) ; Assert.Contains ( d4 , x2 ) ; Assert.AreEqual ( 0 , y1.Count ) ; Assert.AreEqual ( 0 , y2.Count ) ; Assert.AreEqual ( 2 , z1.Count ) ; Assert.Contains ( d1 , z1 ) ; Assert.Contains ( d3 , z1 ) ; Assert.AreEqual ( 2 , z2.Count ) ; Assert.Contains ( d2 , z2 ) ; Assert.Contains ( d4 , z2 ) ; }"
class HowAreVarAndValImplementedInScala { var v1 = 123 val v2 = 456 def method1 ( ) = { var v3 = 123 val v4 = 456 println ( v3 + v4 ) } } public class HowAreVarAndValImplementedInScala { private int v1 = 123 ; private final int v2 = 456 ; public int v1 ( ) { return this.v1 ; } public void v1_ $ eq ( int x $ 1 ) { this.v1 = x $ 1 ; } public int v2 ( ) { return this.v2 ; } public void method1 ( ) { int v3 = 123 ; int v4 = 456 ; Predef..MODULE $ .println ( BoxesRunTime.boxToInteger ( v3 + v4 ) ) ; } } public class HowAreVarAndValImplementedInScala : ScalaObject { private int v1 ; private int v2 ; public override int v1 ( ) { return this.v1 ; } public override void v1_ $ eq ( int x $ 1 ) { this.v1 = x $ 1 ; } public override int v2 ( ) { return this.v2 ; } public override void method1 ( ) { int v3 = 123 ; int v4 = 456 ; Predef $ .MODULE $ .println ( v3 + v4 ) ; } public HowAreVarAndValImplementedInScala ( ) { this.v1 = 123 ; this.v2 = 456 ; } }
"//this will work private void button1_Click ( object sender , RoutedEventArgs e ) { var query = ctx.AccountSet ; query.BeginExecute ( ( result ) = > { textBox1.Text = query.EndExecute ( result ) .First ( ) .Name ; } , null ) ; } //this will fail private void button2_Click ( object sender , RoutedEventArgs e ) { System.Threading.Tasks.Task.Factory.StartNew ( RestAsync ) ; } void RestAsync ( ) { var query = ctx.AccountSet ; var async = query.BeginExecute ( null , null ) ; var task = System.Threading.Tasks.Task.Factory.FromAsync < Account > ( async , ( result ) = > { return query.EndExecute ( result ) .First ( ) ; // < - Exception thrown here } ) ; textBox1.Dispatcher.BeginInvoke ( ( ) = > { textBox1.Text = task.Result.Name ; } ) ; }"
// this takes voters while we have less than 300 voices int voicesSoFar = 0 ; int voicesNeededMaximum = 300 ; var eligibleVoters = voters.TakeWhile ( ( p = > ( voicesSoFar += p.Voices ) < voicesNeededMaximum ) ) ;
"countries-france -- paris -- bordeaux-germany-italysubjects-math -- algebra -- calculus-science -- chemistry -- biologyother-this-that using System ; using System.Collections.Generic ; using System.Text ; namespace TestRecursive2342 { class Program { static void Main ( string [ ] args ) { List < OutlineObject > outlineObjects = new List < OutlineObject > ( ) ; //convert file contents to object collection List < string > lines = Helpers.GetFileAsLines ( ) ; Stack < OutlineObject > stack = new Stack < OutlineObject > ( ) ; foreach ( var line in lines ) { OutlineObject oo = new OutlineObject ( line ) ; if ( stack.Count > 0 ) { OutlineObject topObject = stack.Peek ( ) ; if ( topObject.Indent < oo.Indent ) { topObject.OutlineObjects.Add ( oo ) ; stack.Push ( oo ) ; } else { stack.Pop ( ) ; stack.Push ( oo ) ; } } else { stack.Push ( oo ) ; } if ( oo.Indent == 0 ) outlineObjects.Add ( oo ) ; } outlineObjects.ForEach ( oo = > Console.WriteLine ( oo.Line ) ) ; Console.ReadLine ( ) ; } } public class OutlineObject { public List < OutlineObject > OutlineObjects { get ; set ; } public string Line { get ; set ; } public int Indent { get ; set ; } public OutlineObject ( string rawLine ) { OutlineObjects = new List < OutlineObject > ( ) ; Indent = rawLine.CountPrecedingDashes ( ) ; Line = rawLine.Trim ( new char [ ] { '- ' , ' ' , '\t ' } ) ; } } public static class Helpers { public static List < string > GetFileAsLines ( ) { return new List < string > { `` countries '' , `` -france '' , `` -- paris '' , `` -- bordeaux '' , `` -germany '' , `` -italy '' , `` subjects '' , `` -math '' , `` -- algebra '' , `` -- calculus '' , `` -science '' , `` -- chemistry '' , `` -- biology '' , `` other '' , `` -this '' , `` -that '' } ; } public static int CountPrecedingDashes ( this string line ) { int tabs = 0 ; StringBuilder sb = new StringBuilder ( ) ; foreach ( var c in line ) { if ( c == '- ' ) tabs++ ; else break ; } return tabs ; } } }"
"[ DllImport ( `` user32.dll '' , CallingConvention = CallingConvention.StdCall ) ] public static extern void mouse_event ( long dwFlags , uint dx , uint dy , long cButtons , long dwExtraInfo ) ; private const int MOUSEEVENTF_LEFTDOWN = 0x201 ; private const int MOUSEEVENTF_LEFTUP = 0x202 ; private const uint MK_LBUTTON = 0x0001 ; public delegate bool EnumWindowsProc ( IntPtr hWnd , IntPtr parameter ) ; [ DllImport ( `` user32.dll '' , SetLastError = true ) ] static extern IntPtr FindWindow ( string lpClassName , string lpWindowName ) ; [ DllImport ( `` user32.dll '' , SetLastError = true ) ] public static extern IntPtr FindWindowEx ( IntPtr parentHandle , IntPtr childAfter , string className , string windowTitle ) ; [ DllImport ( `` user32.dll '' , CharSet = CharSet.Auto ) ] static extern IntPtr SendMessage ( IntPtr hWnd , UInt32 Msg , IntPtr wParam , IntPtr lParam ) ; [ DllImport ( `` user32.dll '' , SetLastError = true ) ] public static extern bool EnumChildWindows ( IntPtr hwndParent , EnumWindowsProc lpEnumFunc , IntPtr lParam ) ; static IntPtr childWindow ; private static bool EnumWindow ( IntPtr handle , IntPtr pointer ) { childWindow = handle ; return false ; } public static void Main ( string [ ] args ) { OpenPaint ( ) ; // Method that opens MSPaint IntPtr hwndMain = FindWindow ( `` mspaint '' , null ) ; IntPtr hwndView = FindWindowEx ( hwndMain , IntPtr.Zero , `` MSPaintView '' , null ) ; // Getting the child windows of MSPaintView because it seems that the class name of the child is n't constant EnumChildWindows ( hwndView , new EnumWindowsProc ( EnumWindow ) , IntPtr.Zero ) ; Random random = new Random ( ) ; Thread.Sleep ( 500 ) ; // Simulate a left click without releasing it SendMessage ( childWindow , MOUSEEVENTF_LEFTDOWN , new IntPtr ( MK_LBUTTON ) , CreateLParam ( random.Next ( 10 , 930 ) , random.Next ( 150 , 880 ) ) ) ; for ( int counter = 0 ; counter < 50 ; counter++ ) { // Change the cursor position to a random point in the paint area Cursor.Position = new Point ( random.Next ( 10 , 930 ) , random.Next ( 150 , 880 ) ) ; Thread.Sleep ( 100 ) ; } // Release the left click SendMessage ( childWindow , MOUSEEVENTF_LEFTUP , new IntPtr ( MK_LBUTTON ) , CreateLParam ( random.Next ( 10 , 930 ) , random.Next ( 150 , 880 ) ) ) ; } private static void OpenPaint ( ) { Process.process = new Process ( ) ; process.StartInfo.FileName = `` mspaint.exe '' ; process.StartInfo.WindowStyle = `` ProcessWindowStyle.Maximized ; process.Start ( ) ; }"
"[ DllImport ( @ '' MyAntiquatedLibrary.dll '' ) [ SecurityPermission ( SecurityAction.Assert , Unrestricted = true ) ] internal static extern void GetConnectionString ( string port , string server , string instance , [ Out ] StringBuilder output ) ; void GetConnectionString ( const char far *Portname , const char far *ServerName const char far *InstanceName , char far *retConnectionName ) ; protected void Page_Load ( object sender , EventArgs e ) { try { var connectionString = new StringBuilder ( ) ; GetConnectionString ( null , `` myHost '' , `` myInstance '' , connectionString ) ; MyLabel.Text = connectionString.ToString ( ) ; } catch ( Exception ex ) { MyLabel.Text = string.Format ( `` Something went wrong : { 0 } '' , ex.Message ) ; } } AccessViolationException was unhandled.Attempted to read or write protected memory . This is often an indication that other memory is corrupt ."
if ( null == false ) { }
"public class CustomConverter : TypeConverter { public override bool CanConvertTo ( ITypeDescriptorContext context , Type destinationType ) { if ( destinationType == typeof ( ICommand ) ) { return true ; } return base.CanConvertTo ( context , destinationType ) ; } public override object ConvertTo ( ITypeDescriptorContext context , CultureInfo culture , object value , Type destinationType ) { if ( destinationType == typeof ( ICommand ) ) { return new DelegateCommand < object > ( x = > { } ) ; } return base.ConvertTo ( context , culture , value , destinationType ) ; } } < Button Content= '' Execute '' Command= '' { Binding CustomObject } '' / > < Button Content= '' { Binding CustomObject } '' / >"
"Expression < Func < TSource , bool > > CreatePropertyFilter < TSource > ( Expression < Func < TSource , string > > selector , string value , TextMatchMode matchMode ) ; Expression < Func < string , bool > > comparerExpression ; switch ( matchMode ) { case TextMatchMode.StartsWith : comparerExpression = p = > p.StartsWith ( value ) ; break ; case TextMatchMode.EndsWith : comparerExpression = p = > p.EndsWith ( value ) ; break ; case TextMatchMode.Contains : comparerExpression = p = > p.Contains ( value ) ; break ; default : comparerExpression = p = > p.Equals ( value ) ; break ; } var equalityComparerParameter = Expression.Parameter ( typeof ( IncomingMail ) , null ) ; var equalityComparerExpression = Expression.Invoke ( comparerExpression , Expression.Invoke ( selector , equalityComparerParameter ) ) ; var equalityComparerPredicate = Expression.Lambda < Func < IncomingMail , bool > > ( equalityComparerExpression , equalityComparerParameter ) ;"
interface ITarget { List < string > GetProducts ( ) ; } public class VendorAdaptee { public List < string > GetListOfProducts ( ) { List < string > products = new List < string > ( ) ; products.Add ( `` Gaming Consoles '' ) ; products.Add ( `` Television '' ) ; products.Add ( `` Books '' ) ; products.Add ( `` Musical Instruments '' ) ; return products ; } } class VendorAdapter : ITarget { public List < string > GetProducts ( ) { VendorAdaptee adaptee = new VendorAdaptee ( ) ; return adaptee.GetListOfProducts ( ) ; } } class ShoppingPortalClient { static void Main ( string [ ] args ) { ITarget adapter = new VendorAdapter ( ) ; foreach ( string product in adapter.GetProducts ( ) ) { Console.WriteLine ( product ) ; } Console.ReadLine ( ) ; } }
"public class MyClass < T , C > : IMyClass where T : SomeTClass where C : SomeCClass { private T t ; private C c ; public MyClass ( ) { this.t= Activator.CreateInstance < T > ( ) ; this.c= Activator.CreateInstance < C > ( ) ; } } Type type = typeof ( MyClass < , > ) .MakeGenericType ( typeOfSomeTClass , typeOfSomeCClass ) ; object instance = Activator.CreateInstance ( type ) ;"
"public class Grid { public double ID { get ; set ; } public double X { get ; set ; } public double Y { get ; set ; } public double Z { get ; set ; } public MyClass MoreProperties { get ; set ; } public Grid ( int id , double x , double y , double z ) { this.ID = id ; this.X = x ; this.Y = y ; this.Z = z ; } } public abstract class Element { public int ID { get ; set ; } public int NumberOfGrids { get ; set ; } public List < Grid > Grids { get ; set ; } //4 Grids in this case public Element ( ) { Grids = new List < Grid > ( ) ; } } class Data : ModelBase { public List < Grid > Grids { get ; set ; } public List < Element > Elements { get ; set ; } } public void AsociateGridsToElements ( ) { foreach ( Element elem in Elements ) { for ( int i = 0 ; i < elem.Grids.Count ; i++ ) { elem.Grids [ i ] = Grids.Where ( g = > g.ID == elem.Grids [ i ] .ID ) .FirstOrDefault ( ) ; } } }"
"private async void ThrowExceptionAsync ( ) { throw new InvalidOperationException ( ) ; } public void AsyncVoidExceptions_CannotBeCaughtByCatch ( ) { try { ThrowExceptionAsync ( ) ; } catch ( Exception ) { // The exception is never caught here ! throw ; } } static void Main ( ) { AppDomain.CurrentDomain.UnhandledException += ( sender , ex ) = > { LogCurrentSynchronizationContext ( `` AppDomain.CurrentDomain.UnhandledException '' ) ; LogException ( `` AppDomain.CurrentDomain.UnhandledException '' , ex.ExceptionObject as Exception ) ; } ; try { try { void ThrowExceptionVoid ( ) = > throw new Exception ( `` ThrowExceptionVoid '' ) ; ThrowExceptionVoid ( ) ; } catch ( Exception ex ) { LogException ( `` AsyncMain - Catch - ThrowExceptionVoid '' , ex ) ; } try { // CS1998 C # This async method lacks 'await ' operators and will run synchronously . async void ThrowExceptionAsyncVoid ( ) = > throw new Exception ( `` ThrowExceptionAsyncVoid '' ) ; ThrowExceptionAsyncVoid ( ) ; } // exception can not be caught , despite the code running synchronously . catch ( Exception ex ) { LogException ( `` AsyncMain - Catch - ThrowExceptionAsyncVoid '' , ex ) ; } } catch ( Exception ex ) { LogException ( `` Main '' , ex ) ; } Console.ReadKey ( ) ; } private static void LogCurrentSynchronizationContext ( string prefix ) = > Debug.WriteLine ( $ '' { prefix } - `` + $ '' CurrentSynchronizationContext : { SynchronizationContext.Current ? .GetType ( ) .Name } `` + $ '' - { SynchronizationContext.Current ? .GetHashCode ( ) } '' ) ; private static void LogException ( string prefix , Exception ex ) = > Debug.WriteLine ( $ '' { prefix } - Exception - { ex.Message } '' ) ; Exception thrown : 'System.Exception ' in ConsoleApp3.dllAsyncMain - Catch - ThrowExceptionVoid - Exception - ThrowExceptionVoidException thrown : 'System.Exception ' in ConsoleApp3.dllAn exception of type 'System.Exception ' occurred in ConsoleApp3.dll but was not handled in user codeThrowExceptionAsyncVoidAppDomain.CurrentDomain.UnhandledException - CurrentSynchronizationContext : - AppDomain.CurrentDomain.UnhandledException - Exception - ThrowExceptionAsyncVoidThe thread 0x1c70 has exited with code 0 ( 0x0 ) .An unhandled exception of type 'System.Exception ' occurred in System.Private.CoreLib.ni.dllThrowExceptionAsyncVoidThe program ' [ 18584 ] dotnet.exe ' has exited with code 0 ( 0x0 ) ."
"static async Task < int > DelayAndReturnAsync ( int val ) { await Task.Delay ( TimeSpan.FromSeconds ( val ) ) ; return val ; } // This method now prints `` 1 '' , `` 2 '' , and `` 3 '' .static async Task ProcessTasksAsync ( ) { // Create a sequence of tasks . Task < int > taskA = DelayAndReturnAsync ( 2 ) ; Task < int > taskB = DelayAndReturnAsync ( 3 ) ; Task < int > taskC = DelayAndReturnAsync ( 1 ) ; var tasks = new [ ] { taskA , taskB , taskC } ; var processingTasks = tasks.Select ( async t = > { var result = await t ; Trace.WriteLine ( result ) ; } ) .ToArray ( ) ; // Await all processing to completeawait Task.WhenAll ( processingTasks ) ; }"
"public bool TestMethodsOf < T , I > ( ) { var impl = typeof ( T ) ; var valid = true ; foreach ( var iface in impl.GetInterfaces ( ) .Where ( i = > typeof ( I ) .IsAssignableFrom ( i ) ) ) { var members = iface.GetMethods ( ) ; foreach ( var member in members ) { Trace.Write ( `` Checking if method `` + iface.Name + `` . '' + member.Name + `` is virtual ... '' ) ; var implMember = impl.GetMethod ( member.Name , member.GetParameters ( ) .Select ( c = > c.ParameterType ) .ToArray ( ) ) ; if ( ! implMember.IsVirtual ) { Trace.WriteLine ( string.Format ( `` FAILED '' ) ) ; valid = false ; continue ; } Trace.WriteLine ( string.Format ( `` OK '' ) ) ; } } return valid ; } Assert.IsTrue ( TestMethodsOf < MyView , IMyView > ( ) ) ;"
"typedef struct _SECURITY_ATTRIBUTES { DWORD nLength ; LPVOID lpSecurityDescriptor ; BOOL bInheritHandle ; } SECURITY_ATTRIBUTES , *PSECURITY_ATTRIBUTES , *LPSECURITY_ATTRIBUTES ; public struct _SECURITY_ATTRIBUTES { public int nLength ; public unsafe byte* lpSecurityDescriptor ; public int bInheritHandle ; } public struct SecurityAttributes { private int length ; private unsafe byte* securityDescriptor ; private int bInheritHandle ; public Int32 Length { get { return this.length ; } set { this.length = value ; } } public Byte* SecurityDescriptor { get { return this.seurityDescriptor ; } set { this.securityDescriptor = value ; } } public Int32 InheritHandle { get { return this.bInheritHandle ; } set { this.bInheritHandle = value ; } } public SecurityAttributes ( int length , byte* securityDescriptor , int inheritHandle ) { this.length = length ; this.securityDescriptor = securityDescriptor ; this.inheritHandle = inheritHandle ; } }"
"{ `` LegalFeeNet '' : 363.54 , `` LegalFeeVat '' : 72.708 , `` DiscountNet '' : 0.0 , `` DiscountVat '' : 0.0 , `` OtherNet '' : 12.0 , `` OtherVat '' : 2.4 , `` DisbursementNet '' : 220.0 , `` DisbursementVat '' : 0.0 , `` AmlCheck '' : null , `` LegalSubTotal '' : 363.54 , `` TotalFee '' : 450.648 , `` Discounts '' : 0.0 , `` Vat '' : 75.108 , `` DiscountedPrice '' : 360.5184 , `` RecommendedRetailPrice '' : 450.648 , `` SubTotal '' : 375.54 , `` Name '' : `` Will '' , `` IsDiscounted '' : false , `` CustomerCount '' : 3 } ClassName { LegalFeeNet = 363.54M , LegalFeeVat = 72.708M , DiscountNet = 0.0M , DiscountVat = 0.0M , OtherNet = 12.0M , OtherVat = 2.4M , DisbursementNet = 220.0M , DisbursementVat = 0.0M , AmlCheck = nullM , LegalSubTotal = 363.54M , TotalFee = 450.648M , Discounts = 0.0M , Vat = 75.108M , DiscountedPrice = 360.5184M , RecommendedRetailPrice = 450.648M , SubTotal = 375.54M , Name = `` Will '' , IsDiscounted = false , CustomerCount = 3 }"
await Task.Run ( RunSomethingAsync ) .ConfigureAwait ( false ) ;
class Foo { string bar { get ; set ; } int a { get ; set ; } int b { get ; set ; } int c { get ; set ; } } return listOfFoo.Where ( f = > f.a > = 0 ) .OrderBy ( f = > f.a ) .Take ( 5 ) .Select ( f = > f.bar ) ;
"public interface IThingFactory { Thing GetThing ( int thingId ) ; } public class CachedThingFactory : IThingFactory { private IThingFactory _wrapped ; private Dictionary < int , Thing > _cachedThings ; public CachedThingFactory ( IThingFactory wrapped ) { this._wrapped = wrapped ; _cachedThings = new Dictionary < int , Thing > ( ) ; } public Thing GetThing ( int thingId ) { Thing x ; if ( _cachedThings.TryGetValue ( thingId , out x ) ) return x ; x = _wrapped.GetThing ( thingId ) ; _cachedThings [ thingId ] = x ; return x ; } }"
"class TestObject { public string message = `` '' ; private delegate string deleg ( ) ; public TestObject ( string msg ) { message = msg ; } public Delegate GetMethod ( ) { deleg tmp = this.TestMethod ; return tmp ; } public string TestMethod ( ) { return message ; } } static void Main ( string [ ] args ) { var list = new List < WeakReference > ( ) ; var obj = new TestObject ( `` Hello 1 '' ) ; list.Add ( new WeakReference ( obj.GetMethod ( ) ) ) ; Console.WriteLine ( `` Initial obj : `` + ( ( Delegate ) list [ 0 ] .Target ) .DynamicInvoke ( ) ) ; //Works fine obj = null ; //Now , obj is set to null , the TestObject ( `` Hello 1 '' ) can be collected by GC GC.Collect ( ) ; //Force GC Console.WriteLine ( `` Is obj null : `` + ( ( obj ) == null ? `` True '' : `` False '' ) ) ; Console.WriteLine ( `` After GC collection : `` + ( ( Delegate ) list [ 0 ] .Target ) .DynamicInvoke ( ) ) ; Console.ReadKey ( ) ; }"
public class Item { //Other properties removed to shorten public string name { get ; set ; } public string typeLine { get ; set ; } } ItemsDisplay.ItemsSource = searchResults ; < ItemsControl Name= '' ItemsDisplay '' > < ItemsControl.ItemTemplate > < DataTemplate > < Grid > < ! -- COLUMN DEFINITIONS ETC REMOVED TO SHORTEN -- > < StackPanel Grid.Column= '' 1 '' > < Label Name= '' ItemName '' Margin= '' 10 '' > < Label.Content > < MultiBinding StringFormat= '' { } { 0 } { 1 } '' > < Binding Path= '' name '' / > < Binding Path= '' typeLine '' / > < /MultiBinding > < /Label.Content > < /Label > < /StackPanel > < /Grid > < /DataTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl > < StackPanel Grid.Column= '' 1 '' > < Label Name= '' ItemName '' Margin= '' 10 '' Content= '' { Binding Path=name } '' / > < Label Name= '' ItemType '' Margin= '' 10 '' Content= '' { Binding Path=typeLine } '' / > < /StackPanel >
x.Should ( ) .BeEquivalentTo ( y ) ; x.ShouldBeEquivalentTo ( y ) ; x.Should ( ) .NotBeNull ( ) .And.BeEquivalentTo ( y ) ;
int ? x = null ; nullx.HasValuefalse
WebClient Client = new WebClient ( ) ; var result = Encoding.GetEncoding ( `` UTF-8 '' ) .GetString ( Client.DownloadData ( URL ) ) ;
"string desc = `` radiologic examination eye detect foreign body '' ; string regex = `` \\b '' + `` *ct '' + `` \\b '' ; if ( Regex.IsMatch ( desc , regex ) ) { String x = Regex.Replace ( desc , regex , `` `` + `` ct '' + `` `` ) .Trim ( ) ; Console.WriteLine ( x ) ; }"
Write-Output `` _Profiles_ '' Write-Output `` CurrentUserCurrentHost = ' $ ( $ Profile.CurrentUserCurrentHost ) ' '' Write-Output `` CurrentUserAllHosts = ' $ ( $ Profile.CurrentUserAllHosts ) ' '' Write-Output `` AllUsersCurrentHost = ' $ ( $ Profile.AllUsersCurrentHost ) ' '' Write-Output `` AllUsersAllHosts = ' $ ( $ Profile.AllUsersAllHosts ) ' '' _Profiles_CurrentUserCurrentHost = ' C : \Users\rob\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1'CurrentUserAllHosts = ' C : \User\rob\Documents\WindowsPowerShell\profile.ps1'AllUsersCurrentHost = ' C : \Windows\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1'AllUsersAllHosts = ' C : \Windows\System32\WindowsPowerShell\v1.0\profile.ps1 ' _Profiles_CurrentUserCurrentHost = `` CurrentUserAllHosts = `` AllUsersCurrentHost = `` AllUsersAllHosts = ``
"public interface IMovable { void Move ( ) ; } public interface IUnloadable { void Unload ( ) ; } public class Vehicle : IMovable { public void Move ( ) { Console.Write ( `` moving '' ) ; } } public class Truck : IMovable , IUnloadable { private Vehicle Veh ; public Truck ( Vehicle veh ) { this.Veh = veh ; } public void Move ( ) { Veh.Move ( ) ; Console.Write ( `` reverse with beepy noise as well '' ) ; } public void Unload ( ) { Console.Write ( `` Unload '' ) ; } }"
"using System ; using System.Globalization ; static class Program { static double x ; static void Main ( ) { x = 2d ; // now debugger shows `` 2.0 '' , as if it has used // x.ToString ( `` F1 '' , CultureInfo.InvariantCulture ) x = 8.0 / 7.0 ; // now debugger shows `` 1.1428571428571428 '' , as if it had used // x.ToString ( `` R '' , CultureInfo.InvariantCulture ) // Note that 17 significant figures are shown , not the usual 15. x = -1e-200 / 1e200 ; // now debugger shows `` 0.0 '' ; there is no indication that this is really negative zero // Console.WriteLine ( 1.0 / x ) ; // this is negative infinity } }"
"private double [ ] ComputeOutputs ( double [ ] xValues ) { if ( xValues.Length ! = numInput ) throw new Exception ( `` Bad xValues array length '' ) ; double [ ] hSums = new double [ numHidden ] ; // hidden nodes sums scratch array double [ ] oSums = new double [ numOutput ] ; // output nodes sums for ( int i = 0 ; i < xValues.Length ; ++i ) // copy x-values to inputs this.inputs [ i ] = xValues [ i ] ; for ( int j = 0 ; j < numHidden ; ++j ) // compute i-h sum of weights * inputs for ( int i = 0 ; i < numInput ; ++i ) hSums [ j ] += this.inputs [ i ] * this.ihWeights [ i ] [ j ] ; // note += for ( int i = 0 ; i < numHidden ; ++i ) // add biases to input-to-hidden sums hSums [ i ] += this.hBiases [ i ] ; for ( int i = 0 ; i < numHidden ; ++i ) // apply activation this.hOutputs [ i ] = HyperTanFunction ( hSums [ i ] ) ; // hard-coded for ( int j = 0 ; j < numOutput ; ++j ) // compute h-o sum of weights * hOutputs for ( int i = 0 ; i < numHidden ; ++i ) oSums [ j ] += hOutputs [ i ] * hoWeights [ i ] [ j ] ; for ( int i = 0 ; i < numOutput ; ++i ) // add biases to input-to-hidden sums oSums [ i ] += oBiases [ i ] ; double [ ] softOut = Softmax ( oSums ) ; // softmax activation does all outputs at once for efficiency Array.Copy ( softOut , outputs , softOut.Length ) ; double [ ] retResult = new double [ numOutput ] ; // could define a GetOutputs method instead Array.Copy ( this.outputs , retResult , retResult.Length ) ; return retResult ; private static double HyperTanFunction ( double x ) { if ( x < -20.0 ) return -1.0 ; // approximation is correct to 30 decimals else if ( x > 20.0 ) return 1.0 ; else return Math.Tanh ( x ) ; } private static double [ ] Softmax ( double [ ] oSums ) { // determine max output sum // does all output nodes at once so scale does n't have to be re-computed each time double max = oSums [ 0 ] ; for ( int i = 0 ; i < oSums.Length ; ++i ) if ( oSums [ i ] > max ) max = oSums [ i ] ; // determine scaling factor -- sum of exp ( each val - max ) double scale = 0.0 ; for ( int i = 0 ; i < oSums.Length ; ++i ) scale += Math.Exp ( oSums [ i ] - max ) ; double [ ] result = new double [ oSums.Length ] ; for ( int i = 0 ; i < oSums.Length ; ++i ) result [ i ] = Math.Exp ( oSums [ i ] - max ) / scale ; return result ; // now scaled so that xi sum to 1.0 } public double Accuracy ( double [ ] [ ] testData ) { // percentage correct using winner-takes all int numCorrect = 0 ; int numWrong = 0 ; double [ ] xValues = new double [ numInput ] ; // inputs double [ ] tValues = new double [ numOutput ] ; // targets double [ ] yValues ; // computed Y for ( int i = 0 ; i < testData.Length ; ++i ) { Array.Copy ( testData [ i ] , xValues , numInput ) ; // parse test data into x-values and t-values Array.Copy ( testData [ i ] , numInput , tValues , 0 , numOutput ) ; yValues = this.ComputeOutputs ( xValues ) ; int maxIndex = MaxIndex ( yValues ) ; // which cell in yValues has largest value ? int tMaxIndex = MaxIndex ( tValues ) ; if ( maxIndex == tMaxIndex ) ++numCorrect ; else ++numWrong ; } return ( numCorrect * 1.0 ) / ( double ) testData.Length ; }"
"public class HeaderController : Controller { private IMenuService _menuService ; public HeaderController ( IMenuService menuService ) { this._menuService = menuService ; } // // GET : /Header/ public ActionResult Index ( ) { return View ( ) ; } public ActionResult GetMenu ( ) { MenuItem menu = this._menuService.GetMenu ( ) ; return View ( `` Menu '' , menu ) ; } } public class MenuService : IMenuService { private IMenuRespository _menuRepository ; public MenuService ( IMenuRespository menuRepository ) { this._menuRepository = menuRepository ; } public MenuItem GetMenu ( ) { return this._menuRepository.GetMenu ( ) ; } } public class MenuRepository : IMenuRespository { public MenuItem GetMenu ( ) { //return the menu items } } public interface IMenuService { MenuItem GetMenu ( ) ; } public interface IMenuRespository { MenuItem GetMenu ( ) ; } MenuItem menu = new MenuService ( new MenuRepository ( ) ) ;"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Sample { class Demo { public delegate void ContraAction < in T > ( T a ) ; public interface IContainer < out T > { T GetItem ( ) ; void Do ( ContraAction < T > action ) ; } public class Container < T > : IContainer < T > { private T item ; public Container ( T item ) { this.item = item ; } public T GetItem ( ) { return item ; } public void Do ( ContraAction < T > action ) { action ( item ) ; } } public class Shape { public void Draw ( ) { Console.WriteLine ( `` Shape Drawn '' ) ; } } public class Circle : Shape { public void DrawCircle ( ) { Console.WriteLine ( `` Circle Drawn '' ) ; } } public static void Main ( ) { Circle circle = new Circle ( ) ; IContainer < Shape > container = new Container < Circle > ( circle ) ; container.Do ( s = > s.Draw ( ) ) ; //calls shape //Old school polymorphism ... how is this not the same thing ? Shape shape = new Circle ( ) ; shape.Draw ( ) ; } } }
"[ Test ] public void InvokeGenericMethod ( ) { var method = typeof ( SampleTests ) .GetMethod ( `` SomeGenericMethod '' ) ; var closedMethod = method.MakeGenericMethod ( GetTypeArgument ( ) ) ; closedMethod.Invoke ( null , new object [ ] { 42 } ) ; } public static void SomeGenericMethod < T > ( T value ) { } private Type GetTypeArgument ( ) { return typeof ( int ) ; } [ Test ] public void InvokeGenericType ( ) { var type = typeof ( SomeGenericClass < > ) .MakeGenericType ( typeof ( string ) ) ; var instance = Activator.CreateInstance ( type ) ; var method = type.GetMethod ( `` Execute '' ) ; method.Invoke ( instance , new object [ ] { `` Test '' } ) ; } public class SomeGenericClass < T > { public void Execute ( T value ) { } }"
"//C++struct InputOutputStruct { double a , b , c ; } extern `` C '' __declspec ( dllexport ) void DoSomethingToStruct ( InputOutputStruct* s ) { } //C # using System.Runtime.InteropServices ; [ StructLayout ( LayoutKind.Sequential ) ] public struct InputOutputStruct { public double a , b , c ; } [ DllImport ( `` CpluplusDll.dll '' ) ] public static unsafe extern bool DoSomethingToStruct ( InputOutputStruct* s ) ; class CSharpWrapper { static void Main ( string [ ] args ) { InputOutputStruct s = new InputOutputStruct ( ) ; unsafe { InputOutpustruct* sPtr = & s ; DoSomethingToStruct ( sPtr ) ; s = *sPtr ; } } }"
"`` [ ... ] provides a compile-time reference assembly [ ... ] but there is no run-time assembly compatible with [ ... ] '' System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-arm-aot.Some packages are not compatible with UAP , Version=v10.0 ( win10-x64-aot ) .System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-x64.Some packages are not compatible with UAP , Version=v10.0 ( win10-arm ) .Some packages are not compatible with UAP , Version=v10.0 ( win10-x86-aot ) .System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-x86.System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-x86-aot.System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-arm.Some packages are not compatible with UAP , Version=v10.0 ( win10-x64 ) .System.IO.FileSystem.Watcher 4.0.0-rc2-24027 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on UAP , Version=v10.0 , but there is no run-time assembly compatible with win10-x64-aot.Some packages are not compatible with UAP , Version=v10.0 ( win10-x86 ) .Some packages are not compatible with UAP , Version=v10.0 ( win10-arm-aot ) . `` dependencies '' : { `` Microsoft.ApplicationInsights '' : `` 2.1.0-beta4 '' , `` Microsoft.ApplicationInsights.PersistenceChannel '' : `` 2.0.0-beta3 '' , `` Microsoft.ApplicationInsights.WindowsApps '' : `` 1.1.1 '' , `` Microsoft.NETCore.Platforms '' : `` 1.0.1-rc2-24027 '' , `` Microsoft.NETCore.UniversalWindowsPlatform '' : `` 5.1.0 '' , `` NETStandard.Library '' : `` 1.5.0-rc2-24027 '' , `` System.IO.FileSystem.Watcher '' : `` 4.0.0-rc2-24027 '' } ,"
"int Id { get ; } int age { get ; } CustomerType CustomerType { get ; } ObservableCollection < IValue > ListOfValues { get ; } String Name { get ; } < TreeView ItemsSource= '' { Binding ListOfCustomers , UpdateSourceTrigger=PropertyChanged } '' > < TreeView.Resources > < HierarchicalDataTemplate DataType= '' { x : Type customerConfig : ICustomer } '' > < TextBlock Text= '' { Binding Id } '' / > < /HierarchicalDataTemplate > < HierarchicalDataTemplate DataType= '' { x : Type valueConfig : IValue } '' ItemsSource= '' { Binding ListOfValues } '' > < StackPanel > < TextBlock Text= '' { Binding Name } '' / > < /StackPanel > < /HierarchicalDataTemplate > < /TreeView.Resources > < /TreeView >"
var list = source as T [ ] ? ? source.ToArray ( ) ;
"static void Main ( string [ ] args ) { string apiNew = `` https : //management.azure.com/subscriptions/xxxxxxxxxxxxxxxxxxxxxxxx/providers/Microsoft.Compute/virtualMachines ? api-version=2018-06-01 '' ; string apiOld = `` https : //management.core.windows.net/xxxxxxxxxxxxxxxxxxxxxxxx/services/vmimages '' AzureRestClient client = new AzureRestClient ( credentials.TenantId , credentials.ClientId , credentials.ClientSecret ) ; //OK - I can list the managed VMs . string resultNew = client.GetRequestAsync ( apiNew ) .Result ; // 403 forbidden string resultOld = client.GetRequestAsync ( apiOld ) .Result ; } public class AzureRestClient : IDisposable { private readonly HttpClient _client ; public AzureRestClient ( string tenantName , string clientId , string clientSecret ) { _client = CreateClient ( tenantName , clientId , clientSecret ) .Result ; } private async Task < string > GetAccessToken ( string tenantName , string clientId , string clientSecret ) { string authString = `` https : //login.microsoftonline.com/ '' + tenantName ; string resourceUrl = `` https : //management.core.windows.net/ '' ; var authenticationContext = new AuthenticationContext ( authString , false ) ; var clientCred = new ClientCredential ( clientId , clientSecret ) ; var authenticationResult = await authenticationContext.AcquireTokenAsync ( resourceUrl , clientCred ) ; var token = authenticationResult.AccessToken ; return token ; } async Task < HttpClient > CreateClient ( string tenantName , string clientId , string clientSecret ) { string token = await GetAccessToken ( tenantName , clientId , clientSecret ) ; HttpClient client = new HttpClient ( ) ; client.DefaultRequestHeaders.Accept.Clear ( ) ; client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ( `` Bearer '' , token ) ; return client ; } public async Task < string > GetRequestAsync ( string url ) { return await _client.GetStringAsync ( url ) ; } } HTTP/1.1 403 ForbiddenContent-Length : 288Content-Type : application/xml ; charset=utf-8Server : Microsoft-HTTPAPI/2.0Date : Mon , 22 Oct 2018 11:03:40 GMTHTTP/1.1 403 ForbiddenContent-Length : 288Content-Type : application/xml ; charset=utf-8Server : Microsoft-HTTPAPI/2.0Date : Mon , 22 Oct 2018 11:03:40 GMT < Error xmlns= '' http : //schemas.microsoft.com/windowsazure '' xmlns : i= '' http : //www.w3.org/2001/XMLSchema-instance '' > < Code > ForbiddenError < /Code > < Message > The server failed to authenticate the request . Verify that the certificate is valid and is associated with this subscription. < /Message > < /Error >"
"[ assembly : DebuggerVisualizer ( typeof ( DataSetVisualizer ) , typeof ( DataSetVisualizerSource ) , Target = typeof ( DataTable ) , Description = `` My DataTable Visualizer '' ) ] < Assembly : DebuggerVisualizer ( GetType ( DataSetVisualizer ) , GetType ( DataSetVisualizerSource ) , Target : = GetType ( DataTable ) , Description : = `` My DataTable Visualizer '' ) >"
"class Program { private const string Folder = `` C : \\Temp\\InputData '' ; static void Main ( string [ ] args ) { var cts = new CancellationTokenSource ( ) ; foreach ( var obj in Input ( cts.Token ) ) Console.WriteLine ( obj ) ; } public static IEnumerable < object > Input ( CancellationToken cancellationToken ) { var fileList = new BlockingCollection < string > ( ) ; var watcher = new FileSystemWatcher ( Folder ) ; watcher.Created += ( source , e ) = > { if ( cancellationToken.IsCancellationRequested ) watcher.EnableRaisingEvents = false ; else if ( Path.GetFileName ( e.FullPath ) == `` STOP '' ) { watcher.EnableRaisingEvents = false ; fileList.CompleteAdding ( ) ; File.Delete ( e.FullPath ) ; } else fileList.Add ( e.FullPath ) ; } ; watcher.EnableRaisingEvents = true ; return from file in fileList.GetConsumingEnumerable ( cancellationToken ) //.AsParallel ( ) //.WithCancellation ( cancellationToken ) //.WithDegreeOfParallelism ( 5 ) let obj = CreateMyObject ( file ) select obj ; } private static object CreateMyObject ( string file ) { return file ; } }"
"int rowsAffected = await conn.ExecuteAsync ( `` MyProc '' , new { myVar = ( DataTable ) GetThatDataTable ( ) , } , commandType : CommandType.StoredProcedure ) ;"
"[ Required ( ErrorMessage= '' Your Name Required '' ) ] [ Display ( Name = `` Your Name '' ) ] [ DataType ( DataType.Text ) ] [ MaxLength ( 120 , ErrorMessage = `` Must be under 120 characters '' ) ] public String YourName { get ; set ; } @ Html.LabelFor ( model = > model.YourName ) @ model MVC.Web.Models.ContactUsModel < div > @ Html.LabelFor ( model = > model.YourName ) @ Html.EditorFor ( model = > model.YourName ) < /div > [ Required ( ErrorMessage = `` Your Email Is Required '' ) ] [ Display ( Name = `` Your Email '' ) ] [ RegularExpression ( @ '' ^\w+ ( [ -+. ' ] \w+ ) * @ \w+ ( [ -. ] \w+ ) *\.\w+ ( [ - . ] \w+ ) * $ '' , ErrorMessage = `` Your Email Is Invalid '' ) ] [ DataType ( DataType.Text ) ] public String FromEmail { get ; set ; } < div > @ Html.LabelFor ( model = > model.FromEmail ) @ Html.EditorFor ( model = > model.FromEmail ) < /div > [ MinLength ( 3 , ErrorMessage = `` Minimum 3 Characters '' ) ] [ MaxLength ( 30 , ErrorMessage = `` Maximum 30 Characters '' ) ]"
"class MyClass { public MyClass ( string myArg ) { this.myArg = myArg ; } } private readonly ConcurrentBag < string > scopeParameters = new ConcurrentBag < string > ( ) ; internal object ParameterScope ( IContext context , string parameterName ) { var param = context.Parameters.First ( p = > p.Name.Equals ( parameterName ) ) ; var paramValue = param.GetValue ( context , context.Request.Target ) as string ; paramValue = string.Intern ( paramValue ) ; if ( paramValue ! = null & & ! scopeParameters.Contains ( paramValue ) ) { scopeParameters.Add ( paramValue ) ; } return paramValue ; } public override void Load ( ) { Bind < MyClass > ( ) .ToSelf ( ) .InScope ( c = > ParameterScope ( c , `` myArg '' ) ) ; Bind < IMyClassFactory > ( ) .ToFactory ( ) ; }"
"private Byte [ ] _activityId ; public Guid ActivityId { get { return new Guid ( this._activityId ) ; } set { Byte [ ] bytes = value.ToByteArray ( ) ; Interlocked.Exchange ( ref this._activityId , bytes ) ; } }"
"< Button Content= '' Remove '' Command= '' { Binding RemoveCommand } '' x : Name= '' btnRemove '' Visibility= '' Collapsed '' / > public ICommand RemoveCommand { get { if ( _removeCommand == null ) { _removeCommand = new RelayCommand ( ( ) = > { if ( RemoveRequested ! = null ) RemoveRequested ( this , EventArgs.Empty ) ; } , ( ) = > { // CanExecute Callback if ( Status == WorkStatus.Processing || Status == WorkStatus.Pending ) { Debug.WriteLine ( `` Returning False '' + Status ) ; return false ; } Debug.WriteLine ( `` Returning True '' ) ; return true ; // After uploads , this returns True , in my Output Window . } ) ; } return _removeCommand ; }"
constructor ( private field1 : string ) { } private readonly string field1 ; public MyClass ( string field1 ) { this.field1 = field1 ; }
public interface IYourList < T > { T this [ int index ] { get ; set ; } }
"< Style x : Key= '' navigationItemContainerStyle '' TargetType= '' ListBoxItem '' > < Setter Property= '' Margin '' Value= '' 5,3 '' / > < Setter Property= '' FontSize '' Value= '' 16 '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate > < Grid Cursor= '' Hand '' > < VisualStateManager.VisualStateGroups > < ! -- code omitted -- ! > < /VisualStateManager.VisualStateGroups > < Border x : Name= '' contentBorder '' Background= '' { StaticResource navigationHighlightBrush } '' CornerRadius= '' 3 '' Opacity= '' 0 '' / > < ContentControl x : Name= '' content '' Margin= '' 10,5 '' Content= '' { Binding } '' Foreground= '' DarkGray '' / > < /Grid > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style > < DataTemplate x : Key= '' navigationListBoxItemTemplate '' > < HyperlinkButton Content= '' { Binding } '' Background= '' Transparent '' / > < /DataTemplate > < ContentPresenter x : Name= '' content '' Margin= '' 10,5 '' / >"
Event Viewer/Applications and Services/Microsoft/Windows/Sysmon/Operational EventLog [ ] eventLogs = EventLog.GetEventLogs ( ) ;
"openid-check=1archetype.quickreg=1tos_locale=en_USportal=typepadoic.time=1303249620-9db5665031c9c6b36031openid.claimed_id=https : //example/user/8c481fb7-1b5c-4e50-86b5-xxxxxxxxxopenid.identity=https : //example/user/8c481fb7-1b5c-4e50-86b5-xxxxxxxxxopenid.sig=hoaxQrsN4BBg6H8kp50NoQwpHmcO96BBe+jB3oOP2UA=openid.signed=claimed_id , identity , assoc_handle , op_endpoint , return_to , response_nonce , ns.alias3 , alias3.modeopenid.assoc_handle= { 634388464235195799 } { oqMrOA== } { 32 } openid.op_endpoint=https : //example/openid/provideropenid.return_to=https : //www.typepad.com/secure/services/signin/openid ? openid-check=1archetype.quickreg=1tos_locale=en_USportal=typepadoic.time=1303249620-9db5665031c9c6b36031openid.response_nonce=2011-04-19T21:47:03Z1aa4NZ48openid.mode=id_resopenid.ns=http : //specs.openid.net/auth/2.0openid.ns.alias3=http : //openid.net/srv/ax/1.0openid.alias3.mode=fetch_response < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < xrds : XRDSxmlns : xrds= '' xri : // $ xrds '' xmlns : openid= '' http : //openid.net/xmlns/1.0 '' xmlns= '' xri : // $ xrd* ( $ v*2.0 ) '' > < XRD > < Service priority= '' 10 '' > < Type > http : //specs.openid.net/auth/2.0/signon < /Type > < LocalID > https : //example/user/8c481fb7-1b5c-4e50-86b5-xxxxxxxxx < /LocalID > < Type > http : //openid.net/extensions/sreg/1.1 < /Type > < Type > http : //axschema.org/contact/email < /Type > < URI > https : //example/openid/provider < /URI > < /Service > < Service priority= '' 20 '' > < Type > http : //openid.net/signon/1.0 < /Type > < Type > http : //openid.net/extensions/sreg/1.1 < /Type > < Type > http : //axschema.org/contact/email < /Type > < URI > https : //example/openid/provider < /URI > < /Service > < /XRD > < /xrds : XRDS > < ! -- Error Code : unexpected_url_redirect -- > protected ActionResult SendAssertion ( IAuthenticationRequest authReq ) { // Not shown : redirect to a prompt if needed if ( authReq.IsDirectedIdentity ) { authReq.LocalIdentifier = Current.LoggedInUser.GetClaimedIdentifier ( ) ; } if ( ! authReq.IsDelegatedIdentifier ) { authReq.ClaimedIdentifier = authReq.LocalIdentifier ; } authReq.IsAuthenticated = this.UserControlsIdentifier ( authReq ) ; if ( authReq.IsAuthenticated.Value ) { // User can setup an alias , but we do n't actually want relying parties to store that since it can change over time authReq.ClaimedIdentifier = Current.LoggedInUser.GetClaimedIdentifier ( ) ; authReq.LocalIdentifier = Current.LoggedInUser.GetClaimedIdentifier ( ) ; // Not shown : responding to AX and SREG requests } var req = OpenIdProvider.PrepareResponse ( authReq ) ; var ret = req.AsActionResult ( ) ; return ret ; }"
"< ComboBox Background= '' { x : Null } '' Height= '' 33 '' HorizontalAlignment= '' Left '' IsEditable= '' False '' IsEnabled= '' True '' Margin= '' 10,151,0,0 '' Name= '' comboBox2 '' VerticalAlignment= '' Top '' Width= '' 239 '' VerticalContentAlignment= '' Center '' FontSize= '' 14 '' IsReadOnly= '' False '' Text= '' '' SelectionChanged= '' comboBox2_SelectionChanged '' TabIndex= '' 6 '' HorizontalContentAlignment= '' Left '' Padding= '' 10,3 '' FontWeight= '' SemiBold '' AllowDrop= '' False '' Cursor= '' Hand '' IsTabStop= '' True '' / > < ComboBox Background= '' { x : Null } '' FontSize= '' 14 '' Height= '' 33 '' HorizontalAlignment= '' Left '' IsEditable= '' False '' IsEnabled= '' True '' Margin= '' 10,190,0,0 '' Name= '' comboBox3 '' VerticalAlignment= '' Top '' VerticalContentAlignment= '' Center '' Width= '' 439 '' IsReadOnly= '' False '' Text= '' '' SelectionChanged= '' comboBox3_SelectionChanged '' TabIndex= '' 8 '' HorizontalContentAlignment= '' Left '' Padding= '' 10,3 '' FontWeight= '' SemiBold '' ClipToBounds= '' False '' Cursor= '' Hand '' IsHitTestVisible= '' True '' SnapsToDevicePixels= '' True '' UseLayoutRounding= '' True '' / >"
First Failure : Restart the ServiceSecond Failure : Restart the ServiceSubsequent Failures : Restart the ServiceReset fail count after : 1 daysRestart service after : 2 minutes f.EnableServiceRecovery ( r = > { r.RestartService ( 2 ) ; r.RestartService ( 5 ) ; r.RestartService ( 5 ) ; r.OnCrashOnly ( ) ; r.SetResetPeriod ( 1 ) ; } ) ; The MyService service terminated unexpectedly . It has done this 1 time ( s ) . The following corrective action will be taken in 120000 milliseconds : Restart the service.The MyService service terminated unexpectedly . It has done this 2 time ( s ) . The following corrective action will be taken in 300000 milliseconds : Restart the service.The MyService service terminated unexpectedly . It has done this 3 time ( s ) . The following corrective action will be taken in 300000 milliseconds : Restart the service.The MyService service terminated unexpectedly . It has done this 4 time ( s ) .
"< inventories > < inventory > < id > I001 < /id > < brand > Apple < /brand > < product > iPhone 5S < /product > < price > 750 < /price > < description > The newest iPhone < /description > < barcode > 1234567 < /barcode > < quantity > 75 < /quantity > < inventory > < /inventories > < inventories > < inventory > < id > I001 < /id > < brand > Apple < /brand > < product > iPhone 5S < /product > < price > 750 < /price > < description > The best iPhone < /description > < barcode > 1234567 < /barcode > < quantity > 7 < /quantity > < inventory > < /inventories > ies > private void UpdateInventory ( string id ) { using ( IsolatedStorageFile isf = IsolatedStorageFile.GetUserStoreForApplication ( ) ) { using ( IsolatedStorageFileStream stream = isf.OpenFile ( `` inventories.xml '' , FileMode.OpenOrCreate , FileAccess.ReadWrite ) ) { XDocument doc = XDocument.Load ( stream ) ; var item = from c in doc.Descendants ( `` inventory '' ) where c.Element ( `` id '' ) .Value == id select c ; foreach ( XElement e in item ) { e.Element ( `` price '' ) .SetValue ( txtPrice.Text ) ; e.Element ( `` description '' ) .SetValue ( txtDescription.Text ) ; e.Element ( `` quantity '' ) .SetValue ( txtQuantity.Text ) ; } stream.Position = 0 ; doc.Save ( stream ) ; stream.Close ( ) ; NavigationService.Navigate ( new Uri ( `` /MainPage.xaml '' , UriKind.Relative ) ) ; } } }"
"IEnumerable < KeyValuePair < T , double > > items = sequence.Select ( item = > new KeyValuePair < T , double > ( item , weight ( item ) ) ) ; if ( items.Any ( pair = > pair.Value < 0 ) ) throw new ArgumentException ( `` Item weights can not be less than zero . `` ) ; double sum = items.Sum ( pair = > pair.Value ) ; foreach ( KeyValuePair < T , double > pair in items ) { ... }"
"static void Main ( string [ ] args ) { // This should execute SomeOperation ( ) synchronously Execute ( ( ) = > SomeOperation ( ) ) ; // This should begin execution of SomeOperationAsync ( ) , but not wait ( fire and forget ) Execute ( ( ) = > SomeOperationAsync ( ) ) ; // This should await the execution of SomeOperationAsync ( ) ( execute synchronously ) Execute ( async ( ) = > await SomeOperationAsync ( ) ) ; }"
var matches = people.Where ( x = > x.LastName == userEntry || userEntry == string.Empty ) .ToList ( ) ; var matches = RavenSession.Query < Person > ( ) .Where ( x = > x.LastName == userEntry || userEntry == string.Empty ) .ToList ( ) ;
int a = 2147483647 + 10 ; int ten = 10 ; int b = 2147483647 + ten ;
"public class UserBlogSettings { private UserBlogSettings ( ) { Load ( ) ; } public static UserBlogSettings Instance { get { string cacheKey = `` UserBlogSettings- '' + HttpContext.Current.Session [ `` userOrgName '' ] .ToString ( ) ; object cacheItem = HttpRuntime.Cache [ cacheKey ] as UserBlogSettings ; if ( cacheItem == null ) { cacheItem = new UserBlogSettings ( ) ; HttpRuntime.Cache.Insert ( cacheKey , cacheItem , null , DateTime.Now.AddMinutes ( 1 ) , Cache.NoSlidingExpiration ) ; } return ( UserBlogSettings ) cacheItem ; } } }"
"HttpClient http = this._httpClientFactory.CreateClient ( ) ; // Skipped : setup HttpRequestMessageusing ( HttpResponseMessage response = await http.SendAsync ( request ) ) { try { _ = response.EnsureSuccessStatusCode ( ) ; } catch ( HttpRequestException ) { string responseString = await response.Content.ReadAsStringAsync ( ) ; // Fails with ObjectDisposedException this._logger.LogInformation ( `` Received invalid HTTP response status ' { 0 } ' from SMS API . Response content was { 1 } . `` , ( int ) response.StatusCode , responseString ) ; throw ; } }"
"void MyFct ( Type a_type ) { // Check if it 's type of List < > if ( a_type.Name == `` List ` 1 '' ) { // Do stuff } // Check if it 's type of Dictionary < , > else if ( a_type.Name == `` Dictionary ` 2 '' ) { // Do stuff } } void MyFct ( Type a_type ) { // Check if it 's type of List < > if ( a_type == typeof ( List < > ) ) { // Do stuff } // Check if it 's type of Dictionary < , > else if ( a_type == typeof ( Dictionary < , > ) ) { // Do stuff } }"
class C { private static string str ; private static async Task < int > FooAsync ( ) { str += `` 2 '' ; await Task.Delay ( 100 ) ; str += `` 4 '' ; return 5 ; } private static void Main ( string [ ] args ) { str = `` 1 '' ; var t = FooAsync ( ) ; str += `` 3 '' ; str += t.Result ; // Line X Console.WriteLine ( str ) ; } } int i = t.Result ; str += i ;
using System ; namespace OrderingSystem.Domain { public abstract class Entity < T > where T : Entity < T > { } }
"public static bool Validate ( byte [ ] pdfIn , X509Certificate2 cert ) { using ( var reader = new PdfReader ( pdfIn ) ) { var fields = reader.AcroFields ; var signames = fields.GetSignatureNames ( ) ; if ( ! signames.Any ( n = > fields.SignatureCoversWholeDocument ( n ) ) ) throw new Exception ( `` None signature covers all document '' ) ; var verifications = signames.Select ( n = > fields.VerifySignature ( n ) ) ; var invalidSignature = verifications.Where ( v = > ! v.Verify ( ) ) ; var invalidTimeStamp = verifications.Where ( v = > ! v.VerifyTimestampImprint ( ) ) ; if ( invalidSignature.Any ( ) ) throw new Exception ( `` Invalid signature found '' ) ; } using ( var reader = new PdfReader ( pdfIn ) ) { var ltvVerifier = new LtvVerifier ( reader ) { OnlineCheckingAllowed = false , CertificateOption = LtvVerification.CertificateOption.WHOLE_CHAIN , Certificates = GetChain ( cert ) .ToList ( ) , VerifyRootCertificate = false , Verifier = new MyVerifier ( null ) } ; var ltvResult = new List < VerificationOK > { } ; ltvVerifier.Verify ( ltvResult ) ; if ( ! ltvResult.Any ( ) ) throw new Exception ( `` Ltv verification failed '' ) ; } return true ; } private static X509.X509Certificate [ ] GetChain ( X509Certificate2 myCert ) { var x509Chain = new X509Chain ( ) ; x509Chain.Build ( myCert ) ; var chain = new List < X509.X509Certificate > ( ) ; foreach ( var cert in x509Chain.ChainElements ) { chain.Add ( DotNetUtilities.FromX509Certificate ( cert.Certificate ) ) ; } return chain.ToArray ( ) ; } class MyVerifier : CertificateVerifier { public MyVerifier ( CertificateVerifier verifier ) : base ( verifier ) { } override public List < VerificationOK > Verify ( X509.X509Certificate signCert , X509.X509Certificate issuerCert , DateTime signDate ) { Console.WriteLine ( signCert.SubjectDN + `` : ALL VERIFICATIONS DONE '' ) ; return new List < VerificationOK > ( ) ; } } if ( verifier ! = null ) result.AddRange ( verifier.Verify ( signCert , issuerCert , signDate ) ) ; // verify using the previous verifier in the chain ( if any ) return result ; in Org.BouncyCastle.X509.X509Certificate.CheckSignature ( AsymmetricKeyParameter publicKey , ISigner signature ) in Org.BouncyCastle.X509.X509Certificate.Verify ( AsymmetricKeyParameter key ) in iTextSharp.text.pdf.security.CertificateVerifier.Verify ( X509Certificate signCert , X509Certificate issuerCert , DateTime signDate ) in iTextSharp.text.pdf.security.RootStoreVerifier.Verify ( X509Certificate signCert , X509Certificate issuerCert , DateTime signDate ) in PdfCommon.CrlVerifierSkippingLdap.Verify ( X509Certificate signCert , X509Certificate issuerCert , DateTime signDate ) in c : \Projects\digit\Fuentes\PdfCommon\CrlVerifierSkippingLdap.cs : line 76 in iTextSharp.text.pdf.security.OcspVerifier.Verify ( X509Certificate signCert , X509Certificate issuerCert , DateTime signDate ) in PdfCommon.LtvVerifierSkippingLdap.Verify ( X509Certificate signCert , X509Certificate issuerCert , DateTime sigDate ) in c : \Projects\digit\Fuentes\PdfCommon\LtvVerifierSkippingLdap.cs : line 221 in PdfCommon.LtvVerifierSkippingLdap.VerifySignature ( ) in c : \Projects\digit\Fuentes\PdfCommon\LtvVerifierSkippingLdap.cs : line 148 in PdfCommon.LtvVerifierSkippingLdap.Verify ( List ` 1 result ) in c : \Projects\digit\Fuentes\PdfCommon\LtvVerifierSkippingLdap.cs : line 112"
"< Style TargetType= '' Button '' x : Key= '' MenuButtonStyle '' > < Setter Property= '' HorizontalAlignment '' Value= '' Stretch '' / > < Setter Property= '' Foreground '' Value= '' Black '' / > < Setter Property= '' FontFamily '' Value= '' Sitka Heading '' / > < Setter Property= '' FontSize '' Value= '' 20 '' / > < Setter Property= '' Template '' > < Setter.Value > < ControlTemplate TargetType= '' Button '' > < Grid > < VisualStateManager.VisualStateGroups > < VisualStateGroup x : Name= '' CommonStates '' > < VisualState x : Name= '' Normal '' / > < VisualState x : Name= '' Pressed '' > < Storyboard > < ColorAnimation Duration= '' 0 '' Storyboard.TargetName= '' ButtonTextElement '' Storyboard.TargetProperty= '' ( TextBlock.Foreground ) . ( SolidColorBrush.Color ) '' To= '' Blue '' / > < ObjectAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( UIElement.Visibility ) '' Storyboard.TargetName= '' normalImage '' > < DiscreteObjectKeyFrame KeyTime= '' 0 '' > < DiscreteObjectKeyFrame.Value > < Visibility > Collapsed < /Visibility > < /DiscreteObjectKeyFrame.Value > < /DiscreteObjectKeyFrame > < /ObjectAnimationUsingKeyFrames > < ObjectAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( UIElement.Visibility ) '' Storyboard.TargetName= '' mouseOverImage '' > < DiscreteObjectKeyFrame KeyTime= '' 0 '' > < DiscreteObjectKeyFrame.Value > < Visibility > Visible < /Visibility > < /DiscreteObjectKeyFrame.Value > < /DiscreteObjectKeyFrame > < /ObjectAnimationUsingKeyFrames > < /Storyboard > < /VisualState > < VisualState x : Name= '' MouseOver '' > < Storyboard > < ColorAnimation Duration= '' 0 '' Storyboard.TargetName= '' ButtonTextElement '' Storyboard.TargetProperty= '' ( TextBlock.Foreground ) . ( SolidColorBrush.Color ) '' To= '' Blue '' / > < ObjectAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( UIElement.Visibility ) '' Storyboard.TargetName= '' normalImage '' > < DiscreteObjectKeyFrame KeyTime= '' 0 '' > < DiscreteObjectKeyFrame.Value > < Visibility > Collapsed < /Visibility > < /DiscreteObjectKeyFrame.Value > < /DiscreteObjectKeyFrame > < /ObjectAnimationUsingKeyFrames > < ObjectAnimationUsingKeyFrames Storyboard.TargetProperty= '' ( UIElement.Visibility ) '' Storyboard.TargetName= '' mouseOverImage '' > < DiscreteObjectKeyFrame KeyTime= '' 0 '' > < DiscreteObjectKeyFrame.Value > < Visibility > Visible < /Visibility > < /DiscreteObjectKeyFrame.Value > < /DiscreteObjectKeyFrame > < /ObjectAnimationUsingKeyFrames > < /Storyboard > < /VisualState > < /VisualStateGroup > < /VisualStateManager.VisualStateGroups > < Border BorderBrush= '' Black '' BorderThickness= '' 0,0,0,0.5 '' Margin= '' 30,0,0,0 '' Grid.ColumnSpan= '' 2 '' / > < TextBlock x : Name= '' ButtonTextElement '' Text= '' { TemplateBinding Content } '' Margin= '' 30,0 '' Foreground= '' { TemplateBinding Foreground } '' Grid.Column= '' 0 '' VerticalAlignment= '' { TemplateBinding VerticalAlignment } '' / > < Image x : Name= '' normalImage '' Source= '' /Assets/menu-arrow-left.png '' Grid.Column= '' 1 '' Stretch= '' None '' HorizontalAlignment= '' Right '' Margin= '' 0,0,30,0 '' / > < Image x : Name= '' mouseOverImage '' Source= '' /Assets/menu-arrow-left-hover.png '' Grid.Column= '' 1 '' Stretch= '' None '' HorizontalAlignment= '' Right '' Visibility= '' Collapsed '' Margin= '' 0,0,30,0 '' / > < /Grid > < /ControlTemplate > < /Setter.Value > < /Setter > < /Style > < ColorAnimation Storyboard.TargetName= '' MouseOverVisualElement '' Storyboard.TargetProperty= '' TextBlock.Foreground '' To= '' Red '' / > < Button Style= '' { StaticResource MenuButtonStyle } '' Content= '' Home '' / >"
"void Main ( ) { var foo1 = new Foo { Items = new List < int > { 1 , 2 , 3 } } ; var foo2 = new Foo { Items = { 1 , 2 , 3 } } ; foo1.Dump ( ) ; foo2.Dump ( ) ; } class Foo { public List < int > Items { get ; set ; } } var foo1 = new Foo ( ) ; foo1.Items = new List < int > { 1 , 2 , 3 } ; var foo2 = new Foo ( ) ; foo2.Items.Add ( 1 ) ; foo2.Items.Add ( 2 ) ; foo2.Items.Add ( 3 ) ;"
"public DataTemplate ItemTemplate { get { return _list.ItemTemplate ; } set { _list.ItemTemplate = value ; } } public static readonly DependencyProperty ItemTemplateProperty = DependencyProperty.Register ( `` ItemTemplate '' , typeof ( DataTemplate ) , typeof ( MyUserControl ) ) ; public DataTemplate ItemTemplate { get { return ( DataTemplate ) GetValue ( ItemTemplateProperty ) ; } set { _list.ItemTemplate = value ; SetValue ( ItemTemplateProperty , value ) ; } } < Window.Resources > < DataTemplate x : Key= '' ItemTemplate '' > < TextBlock Text= '' { Binding Path=Name } '' / > < /DataTemplate > < /Window.Resources > < local : MyUserControl ItemTemplate= '' { StaticResource ItemTemplate } '' / >"
class LinqTest { public class test { public int val ; public List < test > Tests ; } private void CrashMe ( ) { test t = new test ( ) ; //Uncomment this to cause the problem //var x = t.Tests.Min ( c = > c.Tests.Min ( d = > d.Tests.Min ( e = > e.Tests.Min ( f= > f.Tests.Min ( g= > g.Tests.Min ( h = > h.val ) ) ) ) ) ) ; } }
- > MainPage.xaml - > Style.xaml- > App.Xaml has Style.xaml referenced < SolidColorBrush x : Key= '' DmBlueBrush '' Color= '' { StaticResource DmBlue } '' / > < Application xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' > < Application.Resources > < ResourceDictionary > < ResourceDictionary.MergedDictionaries > < ResourceDictionary Source= '' Theme/Styles.xaml '' / > < ResourceDictionary Source= '' Theme/Other.xaml '' / > < /ResourceDictionary.MergedDictionaries > < /ResourceDictionary > < /Application.Resources > < /Application >
"static void K ( ) { } static void Main ( ) { var k = new Action ( new Action ( new Action ( K ) ) ) ) ; } new Action ( new Action ( new Action ( null , ldftn ( K ) ) , ldftn ( Invoke ) ) .Invoke ) ; var k = new Action ( new Action ( new Action ( K ) .Invoke ) .Invoke ) ; delegate void Baz ( ) ; delegate void Bar ( ) ; ... var k = new Baz ( new Bar ( new Action ( K ) ) ) ;"
"/// < summary > /// The namespace that the rule is contained within./// < /summary > private string @ namespace ; // [ ... ] internal Rule ( string name , string @ namespace , string checkId , string context , bool warning ) : this ( name , @ namespace , checkId , context , warning , string.Empty , null , true , false ) { Param.Ignore ( name , @ namespace , checkId , context , warning ) ; }"
class Program { static void Main ( string [ ] args ) { var task = Task.Factory.StartNew ( ( ) = > { throw new ApplicationException ( `` message '' ) ; } ) ; try { task.ContinueWith ( t = > Console.WriteLine ( `` End '' ) ) ; } catch ( AggregateException aex ) { Console.Write ( aex.InnerException.Message ) ; } } } catch ( AggregateException aex ) { Console.Write ( aex.InnerException.Message ) ; }
Dim SQL As String = < a > Use testalter table BarFoo alter column CouponName nvarchar ( 328 ) alter table Foo alter column IngredientName nvarchar ( 328 ) alter table Bar alter column IngredientShortDescription nvarchar ( 328 ) alter table FooBar alter column ItemName nvarchar ( 328 ) < /a > .Value
"Throw.IfNull ( theArgument , `` theArgument '' ) ;"
String searchText = `` multiple lines of text . `` ; int position = textBox.Text.IndexOf ( searchText ) ; textBox.SelectionStart = position ; textBox.SelectionLength = searchText.Length ; textBox.ScrollToCaret ( ) ; // caret is at the end of the selected text
"using System ; using System.Windows ; using System.Windows.Controls ; namespace CoolConversion { /// < summary > /// Interaction logic for MainWindow.xaml /// < /summary > public partial class MainWindow : Window { decimal feet ; decimal meter ; public MainWindow ( ) { InitializeComponent ( ) ; } private void TextBox_TextChanged ( object sender , TextChangedEventArgs e ) { feet = Convert.ToDecimal ( Feet.Text ) ; meter = feet / 3.281 ; } } }"
var foo = `` hello '' ; Action bar = ( ) = > Console.WriteLine ( foo ) ; bar ( ) ; foo = `` goodbye '' ; bar ( ) ;
int length = ( int ? ) elem.Attribute ( `` Length '' ) ? ? 0 ;
"@ Model.ForEach ( ( card , i ) = > { @ < li class= '' c @ ( i ) '' > @ card.Text < /li > ; } ) public static void ForEach < T > ( this IEnumerable < T > source , Action < T , Int32 > action ) { Int32 i = 0 ; foreach ( T item in source ) { action ( item , i ) ; i++ ; } } // ForEach"
"[ TestMethod ] public void Can_Parse_To_DateTime ( ) { DateTime expected = new DateTime ( 2011 , 10 , 19 , 16 , 01 , 59 ) ; DateTime actual ; string value = `` Wed Oct 19 16:01:59 PDT 2011 '' ; string mask = `` ddd MMM dd HH : mm : ss xxx YYYY '' ; bool parses = DateTime.TryParseExact ( value , mask , CultureInfo.InvariantCulture , DateTimeStyles.None , out actual ) ; Assert.IsTrue ( parses ) ; Assert.AreEqual ( expected , actual ) ; } [ TestMethod ] public void parsing ( ) { DateTime expected = new DateTime ( 2011 , 10 , 19 , 16 , 01 , 59 ) ; DateTime actual ; string value = `` Wed Oct 19 16:01:59 PDT 2011 '' ; string mask = `` ddd MMM dd HH : mm : ss YYYY '' ; // note removal of `` xxx `` value = value.Remove ( 20 , 4 ) ; // removal of the `` PDT `` bool parses = DateTime.TryParseExact ( value , mask , CultureInfo.InvariantCulture , DateTimeStyles.None , out actual ) ; Assert.IsTrue ( parses ) ; Assert.AreEqual ( expected , actual ) ; }"
public void UpdateProject ( Project project ) { using ( var transaction = _session.BeginTransaction ( ) ) { try { _session.Update ( project ) ; _session.Flush ( ) ; transaction.Commit ( ) ; } catch ( HibernateException ) { transaction.Rollback ( ) ; throw ; } } }
var Foo = new [ ] { new { Something = 321 } } ; Console.WriteLine ( Foo [ 0 ] .Something ) ; Foo.ForEach ( x = > Console.WriteLine ( x.Something ) ) ;
"public class SomeClass { short a ; short b ; } // Warning , my bit math might not be entirely accurate ! public class SomeClass { private int _ab ; public short a { get { return _ab & 0x00ff ; } set { _ab |= value & 0x00ff ; } public short b { get { return _ab > > 8 ; } set { _ab |= value < < 8 ; } } }"
"var db = new TestDbDataContext ( ) { Log = Console.Out } ; var res = from f in db.MasterTables where f.MasterColumn1 == `` wtf '' select new { f.Id , SlaveCols1 = f.Slave1s.Select ( s = > s.SlaveCol1 ) , SlaveCols2 = f.Slave2s.Select ( s = > s.SlaveColumn2 ) } ; foreach ( var re in res ) { Console.Out.WriteLine ( re.Id + `` `` + string.Join ( `` , `` , re.SlaveCols1.ToArray ( ) ) + `` `` + string.Join ( `` , `` , re.SlaveCols2.ToArray ( ) ) ) ; } SELECT [ t0 ] . [ Id ] , [ t1 ] . [ SlaveCol1 ] , ( SELECT COUNT ( * ) FROM [ FR ] . [ Slave1 ] AS [ t2 ] WHERE [ t2 ] . [ MasterId ] = [ t0 ] . [ Id ] ) AS [ value ] FROM [ FR ] . [ MasterTable ] AS [ t0 ] LEFT OUTER JOIN [ FR ] . [ Slave1 ] AS [ t1 ] ON [ t1 ] . [ MasterId ] = [ t0 ] . [ Id ] WHERE [ t0 ] . [ MasterColumn1 ] = @ p0ORDER BY [ t0 ] . [ Id ] , [ t1 ] . [ Id ] -- @ p0 : Input NVarChar ( Size = 3 ; Prec = 0 ; Scale = 0 ) [ wtf ] -- Context : SqlProvider ( Sql2008 ) Model : AttributedMetaModel Build : 3.5.30729.5420SELECT [ t0 ] . [ SlaveColumn2 ] FROM [ FR ] . [ Slave2 ] AS [ t0 ] WHERE [ t0 ] . [ MasterId ] = @ x1 -- @ x1 : Input Int ( Size = 0 ; Prec = 0 ; Scale = 0 ) [ 1 ] -- Context : SqlProvider ( Sql2008 ) Model : AttributedMetaModel Build : 3.5.30729.54201 SlaveCol1Wtf SlaveCol2Wtf var db = new TestDbDataContext ( ) { Log = Console.Out } ; var res = from f in db.MasterTables join s1 in db.Slave1s on f.Id equals s1.MasterId into s1Tbl from s1 in s1Tbl.DefaultIfEmpty ( ) join s2 in db.Slave2s on f.Id equals s2.MasterId into s2Tbl from s2 in s2Tbl.DefaultIfEmpty ( ) where f.MasterColumn1 == `` wtf '' select new { f.Id , s1.SlaveCol1 , s2.SlaveColumn2 } ; foreach ( var re in res ) { Console.Out.WriteLine ( re.Id + `` `` + re.SlaveCol1 + `` `` + re.SlaveColumn2 ) ; } using ( new DbConnectionScope ( ) ) { var db = new TestDbDataContext ( ) { Log = Console.Out } ; DataLoadOptions loadOptions = new DataLoadOptions ( ) ; loadOptions.LoadWith < MasterTable > ( c = > c.Slave1s ) ; loadOptions.LoadWith < MasterTable > ( c = > c.Slave2s ) ; db.LoadOptions = loadOptions ; var res = from f in db.MasterTables where f.MasterColumn1 == `` wtf '' select f ; foreach ( var re in res ) { Console.Out.WriteLine ( re.Id + `` `` + string.Join ( `` , `` , re.Slave1s.Select ( s = > s.SlaveCol1 ) .ToArray ( ) ) + `` `` + string.Join ( `` , `` , re.Slave2s.Select ( s = > s.SlaveColumn2 ) .ToArray ( ) ) ) ; } }"
"[ Test ] public void Int ( ) { int val = 1 ; int expected = val ; int actual = val ; Assert.IsTrue ( expected == actual ) ; Assert.AreEqual ( expected , actual ) ; } [ Test ] public void Int ( ) { Random rnd = new Random ( ) ; int val = rnd.Next ( ) ; int expected = val ; int actual = val ; Console.WriteLine ( `` val is { 0 } '' , val ) ; Assert.IsTrue ( expected == actual ) ; Assert.AreEqual ( expected , actual ) ; }"
"public void connect ( string user , string password , string server , string database ) { connectString = `` user id= '' + user + `` ; '' + `` password= '' + password + `` ; '' + `` server= '' + server + `` ; '' + `` Trusted_Connection=yes ; '' + `` database= '' + database + `` ; '' + `` connection timeout=5 '' ; myConnection = new SqlConnection ( connectString ) ; try { myConnection.Open ( ) ; isConnected = true ; } catch ( SqlException ) { isConnected = false ; } catch ( InvalidOperationException ) { isConnected = false ; } }"
public static void Main ( string [ ] args ) { foreach ( var item in Numbers ( ) .Take ( 10 ) ) Console.WriteLine ( item ) ; Console.ReadKey ( ) ; } public static IEnumerable < int > Numbers ( ) { int x = 0 ; while ( true ) yield return x++ ; } public static IEnumerable < int > Numbers ( ) { return new < Numbers > d__0 ( -2 ) ; } [ DebuggerHidden ] public < Numbers > d__0 ( int < > 1__state ) { this. < > 1__state = < > 1__state ; this. < > l__initialThreadId = Thread.CurrentThread.ManagedThreadId ; }
"List < PathGeometry > firstList ; List < PathGeometry > secondList ; [ ... ] foreach ( PathGeometry pg1 in firstList ) foreach ( PathGeometry pg2 in secondList ) { PathGeometry intergeo = PathGeometry.Combine ( pg1 , pg2 , GeometryCombineMode.Intersect , null ) ; if ( intergeo.GetArea ( ) > 0 ) { // do whatever with intergeo.GetArea ( ) } }"
"public static IEnumerable < IEnumerable < T > > GetAllPossibleCombos < T > ( IEnumerable < IEnumerable < T > > items ) { IEnumerable < IEnumerable < T > > combos = new [ ] { new T [ 0 ] } ; foreach ( var inner in items ) combos = combos.SelectMany ( c = > inner , ( c , i ) = > c.Append ( i ) ) ; return combos ; }"
public IEnumerable < T > GetControls < T > ( ) : where T : ControlBase { // removed . } public class HandleBase < TOwner > : ControlBase : TOwner { // Removed } GetControls < HandleBase < this.GetType ( ) > > ;
"DateTime dt = DateTime.ParseExact ( `` 1122010 '' , `` Mddyyyy '' , System.Globalization.CultureInfo.CurrentCulture ) ;"
public method FindCustomer ( int id ) { if ( _customers == null ) // some code which will load the customers list } public LoadData ( ) { // some code which will load the customers list } CustomerManager manager = new CustomerManager ( ) ; manager.LoadData ( ) ; Customer customer = manager.FindCustomer ( int id ) ;
"public static async Task WriteStringAsync ( this Stream stream , string messageString ) { var encoding = new UTF8Encoding ( false ) ; //no BOM using ( var streamWriter = new StreamWriter ( stream , encoding ) ) { await streamWriter.WriteAsync ( messageString ) ; await streamWriter.FlushAsync ( ) ; } await stream.FlushAsync ( ) ; //is this necessary ? }"
"< ListView ItemsSource= '' { Binding Calibrations } '' > < ListView.View > < GridView > < GridView.Columns > < GridViewColumn Header= '' Voltage [ kV ] '' Width= '' 70 '' DisplayMemberBinding= '' { Binding Voltage } '' / > < GridViewColumn Header= '' Filter '' Width= '' 100 '' DisplayMemberBinding= '' { Binding FilterName } '' / > < GridViewColumn Header= '' Calibration Date '' Width= '' 100 '' DisplayMemberBinding= '' { Binding CalibrationDate } '' / > < GridViewColumn Header= '' Calibration '' Width= '' 60 '' > < GridViewColumn.CellTemplate > < DataTemplate > < Button Content= '' Start '' Click= '' OnStart '' / > < /DataTemplate > < /GridViewColumn.CellTemplate > < /GridViewColumn > < /GridView.Columns > < /GridView > < /ListView.View > < /ListView > private void OnStart ( object sender , RoutedEventArgs e ) { // how do I know , on which item this button is }"
"class BaseBL < T > where T : class { public IList < T > GetAll ( ) { using ( TestObjectContext entities = new TestObjectContext ( ... ) ) { var result = from obj in entities.CreateObjectSet < T > ( ) select obj ; return result.ToList ( ) ; } } } class BaseBL < T > where T : class { private readonly Func < ObjectContext , IQueryable < T > > cqGetAll = CompiledQuery.Compile < ObjectContext , IQueryable < T > > ( ( ctx ) = > from obj in ctx.CreateObjectSet < T > ( ) select obj ) ; public IList < T > GetAll ( ) { using ( TestObjectContext entities = new TestObjectContext ( ... ) ) { var result = cqGetAll.Invoke ( entities ) ; return result.ToList ( ) ; } } } base { System.Exception } = { `` LINQ to Entities does not recognize the method'System.Data.Objects.ObjectSet ` 1 [ admin_model.TestEntity ] CreateObjectSet [ TestEntity ] ( ) ' method , and this method can not be translated into a store expression . '' }"
"foo ( ref my_class.prop ) ; { var tmp = my_class.prop ; foo ( tmp ) ; my_class.prop = tmp ; } Swap ( inout my_class.prop1 , inout my_class.prop2 ) ;"
myMetadata.Rules = myListOfrules ; public static void InserirTipoMetadata ( TA_TIPO_METADATA tipoMetadata ) { using ( EnterpriseContext context = new EnterpriseContext ( ) ) { context.TipoMetadata.AddObject ( tipoMetadata ) ; context.SaveChanges ( System.Data.Objects.SaveOptions.DetectChangesBeforeSave ) ; } }
"var anonymousType = { id = 45 , Name= '' MyName '' , Description= '' Whatever '' }"
"System.Collections.Generic.IList ` 1 [ TestReflection.Car ] Cars using System ; using System.Reflection ; using System.Collections.Generic ; namespace TestReflection { class MainClass { public static void Main ( string [ ] args ) { Type t = typeof ( Dealer ) ; MemberInfo [ ] mi = t.GetMember ( `` Cars '' ) ; Console.WriteLine ( `` { 0 } '' , mi [ 0 ] .ToString ( ) ) ; Console.ReadLine ( ) ; } } class Dealer { public IList < Car > Cars { get ; set ; } } class Car { public string CarModel { get ; set ; } } }"
"C1 = real ( product ( ( / ( -1 , i1=1 , m-1 ) / ) ) *product ( ( / ( i1 , i1=2 , m ) / ) ) ) int product1 = -1 ; int product2 = 1 ; for ( int i1 = 1 ; i1 < = ( m-1 ) ; i1++ ) { product1 *= -1 ; } for ( int i2 = 2 , i2 < = m ; i2++ ) { product2 *= i2 ; } float C1 = ( float ) ( product1 * product2 ) ; A = ( /2*I , I = 1,5/ )"
start : int x ; string input ; Console.Write ( `` Enter a number between 2-16 : `` ) ; input = Console.ReadLine ( ) ; x = Int32.Parse ( input ) ; Console.WriteLine ( `` \n '' ) ; if ( x < = 16 & x > = 2 ) { control statement code code code } else { Console.WriteLine ( `` You must enter a number between 2 and 16 '' ) ; goto start ; }
"public class Test : DynamicObject { public override bool TryGetMember ( GetMemberBinder binder , out object result ) { if ( binder.Name == ( `` Posts '' ) ) { result = `` property accessed was 'Posts ' '' ; return true ; } return base.TryGetMember ( binder , out result ) ; } } dynamic test = new Test ( ) ; var result = test.Posts ; dynamic test = new Test ( ) ; var result = test.Posts.Load ( 123 ) ; if ( binder.Name == ( `` Posts '' ) ) { if ( ... == `` Load '' ) result = this.Load < Post > ( ... 123 ) ; return true ; } class Program { static void Main ( string [ ] args ) { dynamic test = new Test ( ) ; dynamic result = test.Posts.Load ( 123 ) ; Console.WriteLine ( result.Name ) ; dynamic result2 = test.Posts.Load ( 909 ) ; Console.WriteLine ( result2.Name ) ; Console.ReadKey ( ) ; } } public class Test : DynamicObject { public override bool TryGetMember ( GetMemberBinder binder , out object result ) { if ( binder.Name == ( `` Posts '' ) ) { result = new ChainBuilder ( this , `` Post '' ) ; return true ; } return base.TryGetMember ( binder , out result ) ; } public T Load < T > ( int id ) where T : Post , new ( ) { if ( id == 123 ) return new T { Id = 123 , Name = `` Bananas '' } ; return new T { Id = 0 , Name = `` Others '' } ; } private class ChainBuilder : DynamicObject { public dynamic OriginalObject { get ; set ; } public string PropertyInvoked { get ; set ; } public ChainBuilder ( DynamicObject originalObject , string propertyInvoked ) { OriginalObject = originalObject ; PropertyInvoked = propertyInvoked ; } public override bool TryInvokeMember ( InvokeMemberBinder binder , object [ ] args , out object result ) { if ( binder.Name == `` Load '' ) { result = OriginalObject.Load < Post > ( ( int ) args [ 0 ] ) ; return true ; } return base.TryInvokeMember ( binder , args , out result ) ; } } } public class Post { public int Id { get ; set ; } public string Name { get ; set ; } }"
[ webmethod ] public Stream GetStream ( string path ) { return Iservice.GetStream ( path ) ; }
"string input = `` [ section1 key1=value1 key2=value2 ] [ section2 key1=value1 key2=value2 key3=value3 ] [ section3 key1=value1 ] '' ; MatchCollection matches=Regex.Matches ( input , @ '' \ [ [ ^\ ] ] *\ ] '' ) ; foreach ( Match match in matches ) { string subinput = match.Value ; int firstSpace = subinput.IndexOf ( ' ' ) ; string section = subinput.Substring ( 1 , firstSpace-1 ) ; Console.WriteLine ( section ) ; MatchCollection newMatches = Regex.Matches ( subinput.Substring ( firstSpace + 1 ) , @ '' \s* ( \w+ ) \s*=\s* ( \w+ ) \s* '' ) ; foreach ( Match newMatch in newMatches ) { Console.WriteLine ( `` { 0 } = { 1 } '' , newMatch.Groups [ 1 ] .Value , newMatch.Groups [ 2 ] .Value ) ; } }"
public partial class PersonCredential : UserControl { public PersonCredential ( ) { InitializeComponent ( ) ; Dispatcher.BeginInvoke ( ( Action ) ( ( ) = > { SCLib type = new SCLib ( ) ; type.StartMonitoring ( ) ; type.CardArrived += ( string ATR ) = > { this.CardHolderName.Content = ATR ; } ; } ; } ) ) ; public partial class MainWindow : Window { PersonCredential personCredential { get ; set ; } public MainWindow ( ) { InitializeComponent ( ) ; var personCredential = new CoffeeShop.PersonCredential ( ) ; //create an instance of user control . this.personCredentials.Content = personCredential ; // assign it to the content control inside the wpf main window .. // blah blah } public async void StartMonitoring ( ) { // Wait for user to press a key try { this.establishContext ( ) ; await Task.Run ( new Action ( WaitForReaderArrival ) ) ; ////WaitForReaderArrival ( ) ; if ( IsReaderArrived ( ) )
Membership.GetUser ( User.Identity.Name ) aspnet_Membershipaspnet_Users
bool foundVoice = false ; foreach ( var v in installedVoices ) { if ( v.VoiceInfo.Name.Contains ( selectedVoice ) & & v.VoiceInfo.Culture.ToString ( ) == selectedCulture ) { foundVoice = true ; break ; } } var foundVoice = installedVoices.FirstOrDefault ( v = > v.VoiceInfo.Name.Contains ( selectedVoice ) & & v.VoiceInfo.Culture.ToString ( ) == selectedCulture ) ;
"void Main ( ) { var code = @ '' namespace P { class Program { public void NoAttributes ( ) { } // ? ? ? [ TestCategory ( `` '' Atomic '' '' ) ] public void OneAtt1 ( ) { } [ TestCategory ( `` '' Atomic '' '' ) ] public void OneAtt2 ( ) { } [ TestMethod , TestCategory ( `` '' Atomic '' '' ) ] public void TwoAtts ( ) { } } } '' ; var tree = CSharpSyntaxTree.ParseText ( code ) ; var rewriter = new AttributeRemoverRewriter ( ) ; var rewrittenRoot = rewriter.Visit ( tree.GetRoot ( ) ) ; Console.WriteLine ( rewrittenRoot.GetText ( ) .ToString ( ) ) ; } public class AttributeRemoverRewriter : CSharpSyntaxRewriter { public override SyntaxNode VisitAttributeList ( AttributeListSyntax attributeList ) { var nodesToRemove = attributeList .Attributes .Where ( att = > ( att.Name as IdentifierNameSyntax ) .Identifier.Text.StartsWith ( `` TestCategory '' ) ) .ToArray ( ) ; if ( nodesToRemove.Length == attributeList.Attributes.Count ) { //Remove the entire attribute return attributeList .RemoveNode ( attributeList , SyntaxRemoveOptions.KeepNoTrivia ) ; } else { //Remove just the matching ones recursively foreach ( var node in nodesToRemove ) return VisitAttributeList ( attributeList.RemoveNode ( node , SyntaxRemoveOptions.KeepNoTrivia ) ) ; } return base.VisitAttributeList ( attributeList ) ; } } namespace P { class Program { public void NoAttributes ( ) { } // ? ? ? public void OneAtt1 ( ) { } public void OneAtt2 ( ) { } [ TestMethod ] public void TwoAtts ( ) { } } } namespace P { class Program { public void NoAttributes ( ) { } public void OneAtt1 ( ) { } public void OneAtt2 ( ) { } [ TestMethod ] public void TwoAtts ( ) { } } }"
"CREATE TABLE [ dbo ] . [ People ] ( [ PersonId ] [ int ] NOT NULL , [ Name ] [ nvarchar ] ( MAX ) NOT NULL , [ UpdatedDate ] [ smalldatetime ] NOT NULL ... Other fields ... ) CREATE TABLE [ dbo ] . [ CompanyPositions ] ( [ CompanyPositionId ] [ int ] NOT NULL , [ CompanyId ] [ int ] NOT NULL , [ PersonId ] [ int ] NOT NULL , ... Other fields ... ) return ( from pos in CompanyPositions join p in People on pos.PersonId equals p.PersonId select pos ) .ToList ( ) ; SELECT [ Extent1 ] . [ CompanyPositionId ] AS [ CompanyPositionId ] , [ Extent1 ] . [ CompanyId ] AS [ CompanyId ] , ... . FROM [ dbo ] . [ CompanyPositions ] AS [ Extent1 ] // The min date check will always be true , here to force linq to perform the inner joinvar minDate = DateTimeExtensions.SqlMinSmallDate ; return ( from pos in CompanyPositions join p in People on pos.PersonId equals p.PersonId where p.UpdatedDate > = minDate select pos ) .ToList ( ) ;"
"void doStuff < TDerived > ( params TDerived [ ] args ) where TDerived : Base { //stuff } class Super { } class Sub0 : Super { } class Sub1 : Super { } Sub0 s0 = new Sub0 ( ) ; Sub1 s1 = new Sub1 ( ) ; doStuff ( s0 , s1 ) ; void doStuff < TDerived > ( params SomeReadOnlyCollection < TDerived > [ ] args ) where TDerived : Base { foreach ( var list in args ) { foreach ( TDerived thing in list ) { //stuff } } }"
"public override TokenClient GetTokenClient ( string host , string port ) { var certificate = SmartCardHandler.GetInstance ( ) .Result.CurrentCertificate ( ) ; if ( certificate == null ) throw new Exception ( `` Certificate is missing '' ) ; var handler = new WebRequestHandler ( ) ; handler.ServerCertificateValidationCallback = PinPublicKey ; var url = $ '' https : // { host } : { port } /connect/token '' ; handler.ClientCertificates.Add ( certificate ) ; return new TokenClient ( url , ClientTypes.Siths , `` secret '' , handler ) ; } token = await tokenClient.RequestCustomGrantAsync ( ClientTypes.Siths , `` MyApp.wcf offline_access '' ) ; private async Task < ChannelFactory < T > > CreateChannelFactory ( LoginTypeBase loginType , MyAppToken token ) { var service = await _ConsulService.GetServiceBlocking ( loginType.MyAppServicesToUse , forceRefresh : true , token : new CancellationTokenSource ( TimeSpan.FromSeconds ( 30 ) ) .Token ) ; if ( service == null ) throw new MyAppServiceCommunicationException ( ) ; var cert = loginType.ClientCertificate ; var uri = loginType.GetMyAppClientServiceURL ( service.Address , service.Port ) ; var header = AddressHeader.CreateAddressHeader ( nameof ( MyAppToken ) , nameof ( MyAppToken ) , token ) ; var endpointAddress = new EndpointAddress ( uri , header ) ; ServiceEndpoint serviceEndpoint = null ; if ( loginType.LoginType == LoginType.SmartCard || loginType.LoginType == LoginType.UsernamePasswordSLL ) { var binding = new NetHttpsBinding ( `` netHttpsBinding '' ) ; binding.Security.Mode = BasicHttpsSecurityMode.Transport ; if ( loginType.LoginType == LoginType.SmartCard ) binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Certificate ; else binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None ; serviceEndpoint = new ServiceEndpoint ( ContractDescription.GetContract ( typeof ( T ) ) , binding , endpointAddress ) ; } else { var binding = new NetHttpBinding ( `` netHttpBinding '' ) ; serviceEndpoint = new ServiceEndpoint ( ContractDescription.GetContract ( typeof ( T ) ) , binding , endpointAddress ) ; } serviceEndpoint.EndpointBehaviors.Add ( new ProtoEndpointBehavior ( ) ) ; serviceEndpoint.EndpointBehaviors.Add ( new CustomMessageInspectorBehavior ( ) ) ; var v = new ChannelFactory < T > ( serviceEndpoint ) ; if ( loginType.LoginType == LoginType.SmartCard ) { v.Credentials.ClientCertificate.Certificate = cert ; //v.Credentials.ClientCertificate.SetCertificate ( StoreLocation.CurrentUser , StoreName.My , X509FindType.FindByThumbprint , cert.Thumbprint ) ; } return v ; } } public override IMessage Invoke ( IMessage msg ) { var methodCall = ( IMethodCallMessage ) msg ; var method = ( MethodInfo ) methodCall.MethodBase ; var channel = GetChannel ( false ) ; var retryCount = 3 ; do { try { var result = method.Invoke ( channel , methodCall.InArgs ) ; var returnmessage = new ReturnMessage ( result , null , 0 , methodCall.LogicalCallContext , methodCall ) ; return returnmessage ; } catch ( Exception e ) { if ( e is TargetInvocationException & & e.InnerException ! = null ) { if ( e.InnerException is FaultException ) return new ReturnMessage ( ErrorHandler.Instance.UnwrapAgentException ( e.InnerException ) , msg as IMethodCallMessage ) ; if ( e.InnerException is EndpointNotFoundException || e.InnerException is TimeoutException ) channel = GetChannel ( true ) ; } retryCount -- ; } } while ( retryCount > 0 ) ; throw new Exception ( `` Retrycount reached maximum . Customproxy Invoke '' ) ; } private async Task RefreshToken ( LoginTypeBase loginType ) { if ( _MyAppToken == null ) return ; var tokenClient = await GetTokenClient ( loginType ) ; var result = ! string.IsNullOrEmpty ( _refreshToken ) ? await tokenClient.RequestRefreshTokenAsync ( _refreshToken , _cancelToken.Token ) : await tokenClient.RequestCustomGrantAsync ( `` siths '' , cancellationToken : _cancelToken.Token ) ; if ( string.IsNullOrEmpty ( result.AccessToken ) ) throw new Exception ( $ '' Accesstoken har blivit null försökte refresha med { tokenClient.ClientId } { _refreshToken } { DateTime.Now } '' ) ; _MyAppToken.Token = result.AccessToken ; _refreshToken = result.RefreshToken ; } var handler = new WebRequestHandler ( ) ; handler.ServerCertificateValidationCallback = PinPublicKey ; handler.ClientCertificates.Add ( SmartCardHandler.GetInstance ( ) .Result.CurrentCertificate ( ) ) ; var client = new TokenClient ( url , ClientTypes.Siths , `` secret.ro101.orbit '' , handler ) ; TokenResponse token = await client.RequestCustomGrantAsync ( ClientTypes.Siths , `` orbit.wcf offline_access '' ) ; if ( token.IsError ) MessageBox.Show ( `` Failed ! `` ) ; else MessageBox.Show ( `` Success ! `` ) ; } catch ( Exception ex ) { MessageBox.Show ( `` Exception : `` + ex.ToString ( ) ) ; } } ServicePointManager.MaxServicePointIdleTime = 1 ;"
"public object Addition ( object a , object b ) { var type = a.GetType ( ) ; var op = type.GetMethod ( `` op_Addition '' , BindingFlags.Static | BindingFlags.Public ) ; return op.Invoke ( null , new object [ ] { a , b } ) ; }"
SelectedText = e.KeyChar.ToString ( ) ;
"class Base { } class Derived : Base { } class Test1 { private List < Derived > m_X ; public IEnumerable < Base > GetEnumerable ( ) { return m_X ; } } class Test2 < TBase , TDerived > where TDerived : TBase { private List < TDerived > m_X ; public IEnumerable < TBase > GetEnumerable ( ) { return m_X ; } }"
"List < B > foo = new List < B > ( ) ; // B inherits from A , which implements IComparable < A > foo.Add ( new B ( ) ) ; foo.BinarySearch ( new B ( ) ) ; // InvalidOperationException , `` Failed to compare two elements in the array . '' public abstract class A : IComparable < A > { public int x ; public int CompareTo ( A other ) { return x.CompareTo ( other.x ) ; } } public class B : A { }"
product.PrimaryImage = db.ProductImages .Where ( p = > p.Product.ID == product.ID ) .OrderBy ( p = > p.Order ? ? 999999 ) .ThenBy ( p = > p.ID ) .FirstOrDefault ( ) .Name ; db.SaveChanges ( ) ; System.NullReferenceException : Object reference not set to an instance of an object . ProductImages primaryProductImage = db.ProductImages.Where ( p = > p.Product.ID == product.ID ) .OrderBy ( p = > p.Order ? ? 999999 ) .ThenBy ( p = > p.ID ) .FirstOrDefault ( ) ; string primaryImage = ( primaryProductImage ! = null ) ? primaryProductImage.Name : null ; product.PrimaryImage = primaryImage ; db.SaveChanges ( ) ;
"List < string > list = new List < string > ( ) { `` str '' , `` str '' , `` str '' , ... .. N times } ;"
var tempSomeObject = BarObject.FooProperty ; SomeVb6BusinessLogicMethod ( ref tempSomeObject ) ; // Continue to do work and set other temp objects due to ref constraint SomeVb6BusinessLogicMethod ( ( BarObject.FooProperty ) ) 'Note the extra parens
"Container.RegisterType < TempDataDictionary > ( new PerThreadLifetimeManager ( ) ) .RegisterType < IMessageManager , MessageManager > ( ) ; var manager = DependencyResolver.Current.GetService < IMessageManager > ( ) ; public interface IMessageManager { void AddSuccess ( string message , int ? dismissAfter = null ) ; void AddError ( string message , int ? dismissAfter = null ) ; void AddInfo ( string message , int ? dismissAfter = null ) ; void AddWarning ( string message , int ? dismissAfter = null ) ; Dictionary < string , IEnumerable < FlashMessage > > GetAlerts ( ) ; }"
< StackPanel Background= '' White '' Margin= '' 5 '' > < ContentControl Content= '' { Binding CurrentPhaseView } '' / > < /StackPanel >
int length ; uint length ;
public class MyClass : DisposableParentClass { private MyProp _prop ; public MyClass ( MyProp prop ) { _prop = prop ; } public MyClass ( ) { _prop = new MyProp ( ) ; } protected override void Dispose ( bool disposing ) { if ( disposing ) { _prop.Dispose ( ) ; } base.Dispose ( disposing ) ; } } public class MyClass : DisposableParentClass { private MyProp _prop ; private bool _myPropInjected = false ; public MyClass ( MyProp prop ) { _prop = prop ; _myPropInjected = true ; } public MyClass ( ) { _prop = new MyProp ( ) ; } protected override void Dispose ( bool disposing ) { if ( disposing ) { if ( ! _myPropInjected ) { _prop.Dispose ( ) ; } } base.Dispose ( disposing ) ; } }
"public static double [ ] [ ] XORInput = { new [ ] { 0.0 , 0.0 } , new [ ] { 1.0 , 0.0 } , new [ ] { 0.0 , 1.0 } , new [ ] { 1.0 , 1.0 } } ; public static double [ ] [ ] XORIdeal = { new [ ] { 0.0 } , new [ ] { 1.0 } , new [ ] { 1.0 } , new [ ] { 0.0 } } ; int dimension = 8 ; int numNeuronsPerDimension = 64 ; double volumeNeuronWidth = 2.0 / numNeuronsPerDimension ; bool includeEdgeRBFs = true ; RBFNetwork n = new RBFNetwork ( dimension , numNeuronsPerDimension , 1 , RBFEnum.Gaussian ) ; n.SetRBFCentersAndWidthsEqualSpacing ( 0 , 1 , RBFEnum.Gaussian , volumeNeuronWidth , includeEdgeRBFs ) ; //n.RandomizeRBFCentersAndWidths ( 0 , 1 , RBFEnum.Gaussian ) ; INeuralDataSet trainingSet = new BasicNeuralDataSet ( XORInput , XORIdeal ) ; SVDTraining train = new SVDTraining ( n , trainingSet ) ; int epoch = 1 ; do { train.Iteration ( ) ; Console.WriteLine ( `` Epoch # '' + epoch + `` Error : '' + train.Error ) ; epoch++ ; } while ( ( epoch < 1 ) & & ( train.Error > 0.001 ) ) ;"
"private const int TheAnswer = 42 ; /// < summary > /// With this style turned on for your form , /// Windows double-buffers the form and all its child controls./// < /summary > public const int WS_EX_COMPOSITED = 0x02000000 ;"
"var str = `` [ Hello World ] '' ; //enclose all occurences of [ and ] with brackets [ ] str = str.Replace ( `` [ `` , '' [ [ ] '' ) .Replace ( `` ] '' , '' [ ] ] '' ) ; regexTime 40.5065 replaceTime 20.8891 stringBuilderTime 6.9776 regexTime 1209.3529 replaceTime 403.3985 stringBuilderTime 175.2583 public static String EncloseChars ( this string input , char [ ] charsToEnclose , String leftSide , String rightSide ) { if ( charsToEnclose == null || leftSide == null || rightSide == null ) throw new ArgumentException ( `` Invalid arguments for EncloseChars '' , charsToEnclose == null ? `` charsToEnclose '' : leftSide == null ? `` leftSide '' : `` rightSide '' ) ; Array.Sort ( charsToEnclose ) ; StringBuilder sb = new StringBuilder ( ) ; foreach ( char c in input ) { if ( Array.BinarySearch ( charsToEnclose , c ) > -1 ) sb.Append ( leftSide ) .Append ( c ) .Append ( rightSide ) ; else sb.Append ( c ) ; } return sb.ToString ( ) ; } '' [ Hello World ] '' .EncloseChars ( new char [ ] { ' [ ' , ' ] ' } , '' [ `` , '' ] '' ) ;"
"public partial class Call { public int Id { get ; set ; } public string Email { get ; set ; } public IDictionary < string , object > DynamicProperties { get ; } } public class CallController : ODataController { [ EnableQuery ] public IQueryable < Call > GetCall ( [ FromODataUri ] int key ) { return _context.Call.GetAll ( ) ; } } public static partial class WebApiConfig { public static void Register ( HttpConfiguration config ) { AllowUriOperations ( config ) ; ODataModelBuilder builder = new ODataConventionModelBuilder ( ) ; builder.ComplexType < Call > ( ) ; var model = builder.GetEdmModel ( ) ; config.MapODataServiceRoute ( RoutePrefix.OData4 , RoutePrefix.OData4 , model ) ; } private static void AllowUriOperations ( HttpConfiguration config ) { config.Count ( ) ; config.Filter ( ) ; config.OrderBy ( ) ; config.Expand ( ) ; config.Select ( ) ; } }"
SpeechRecognitionEngine = new SpeechRecognitionEngine ( ) ; SpeechRecognitionEngine.SetInputToDefaultAudioDevice ( ) ; var choices = new Choices ( ) ; choices.Add ( `` Set timer '' ) ; var gb = new GrammarBuilder ( ) ; gb.Append ( choices ) ; var g = new Grammar ( gb ) ; SpeechRecognitionEngine.LoadGrammarAsync ( g ) ; SpeechRecognitionEngine.RecognizeAsync ( RecognizeMode.Multiple ) ; SpeechRecognitionEngine.SpeechRecognized += OnSpeechRecognized ;
public interface IIntCounters { int this [ string counterName ] { get ; set ; } } public class MyClass : IIntCounters { public IIntCounters Counters { get { return this ; } } int IIntCounters.this [ string counterName ] { get { ... return something ... } } }
"public void DoAuth ( ) { String uri = GetUri ( ) ; ProcessStartInfo startInfo = new ProcessStartInfo ( uri ) ; startInfo.WindowStyle = ProcessWindowStyle.Hidden ; Process.Start ( startInfo ) ; } public void DoAuth ( ) { String uri = GetUri ( ) ; HttpWebRequest request = ( HttpWebRequest ) WebRequest.Create ( uri ) ; HttpWebResponse webResponse ; try { webResponse = ( HttpWebResponse ) request.GetResponse ( ) ; Console.WriteLine ( `` Error code : { 0 } '' , webResponse.StatusCode ) ; using ( Stream data = webResponse.GetResponseStream ( ) ) using ( var reader = new StreamReader ( data ) ) { //do what here ? } } catch ( Exception e ) { throw ; } } using SpotifyAPI.Web.Enums ; using SpotifyAPI.Web.Models ; using System ; using System.IO ; using System.Net ; using System.Text ; using System.Threading ; namespace SpotifyAPI.Web.Auth { public class ImplicitGrantAuth { public delegate void OnResponseReceived ( Token token , String state ) ; private SimpleHttpServer _httpServer ; private Thread _httpThread ; public String ClientId { get ; set ; } public String RedirectUri { get ; set ; } public String State { get ; set ; } public Scope Scope { get ; set ; } public Boolean ShowDialog { get ; set ; } public event OnResponseReceived OnResponseReceivedEvent ; /// < summary > /// Start the auth process ( Make sure the internal HTTP-Server ist started ) /// < /summary > public void DoAuth ( ) { String uri = GetUri ( ) ; HttpWebRequest request = ( HttpWebRequest ) WebRequest.Create ( uri ) ; HttpWebResponse webResponse ; try { webResponse = ( HttpWebResponse ) request.GetResponse ( ) ; Console.WriteLine ( `` Error code : { 0 } '' , webResponse.StatusCode ) ; using ( Stream data = webResponse.GetResponseStream ( ) ) using ( var reader = new StreamReader ( data ) ) { //nothing } } catch ( Exception e ) { throw ; } /*ProcessStartInfo startInfo = new ProcessStartInfo ( uri ) ; startInfo.WindowStyle = ProcessWindowStyle.Hidden ; Process.Start ( startInfo ) ; */ } private String GetUri ( ) { StringBuilder builder = new StringBuilder ( `` https : //accounts.spotify.com/authorize/ ? `` ) ; builder.Append ( `` client_id= '' + ClientId ) ; builder.Append ( `` & response_type=token '' ) ; builder.Append ( `` & redirect_uri= '' + RedirectUri ) ; builder.Append ( `` & state= '' + State ) ; builder.Append ( `` & scope= '' + Scope.GetStringAttribute ( `` `` ) ) ; builder.Append ( `` & show_dialog= '' + ShowDialog ) ; return builder.ToString ( ) ; } /// < summary > /// Start the internal HTTP-Server /// < /summary > public void StartHttpServer ( int port = 80 ) { _httpServer = new SimpleHttpServer ( port , AuthType.Implicit ) ; _httpServer.OnAuth += HttpServerOnOnAuth ; _httpThread = new Thread ( _httpServer.Listen ) ; _httpThread.Start ( ) ; } private void HttpServerOnOnAuth ( AuthEventArgs e ) { OnResponseReceivedEvent ? .Invoke ( new Token { AccessToken = e.Code , TokenType = e.TokenType , ExpiresIn = e.ExpiresIn , Error = e.Error } , e.State ) ; } /// < summary > /// This will stop the internal HTTP-Server ( Should be called after you got the Token ) /// < /summary > public void StopHttpServer ( ) { _httpServer.Dispose ( ) ; _httpServer = null ; } } } _auth.OnResponseReceivedEvent += _auth_OnResponseReceivedEvent ; _auth.StartHttpServer ( 8000 ) ; _auth.DoAuth ( ) ;"
"public struct ChildSyntaxList : IEnumerable < SyntaxNodeOrToken > { private readonly SyntaxNode node ; private readonly int count ; public Enumerator GetEnumerator ( ) { return node == null ? new Enumerator ( ) : new Enumerator ( node , count ) ; } IEnumerator < SyntaxNodeOrToken > IEnumerable < SyntaxNodeOrToken > .GetEnumerator ( ) { return node == null ? SpecializedCollections.EmptyEnumerator < SyntaxNodeOrToken > ( ) : new EnumeratorImpl ( node , count ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return node == null ? SpecializedCollections.EmptyEnumerator < SyntaxNodeOrToken > ( ) : new EnumeratorImpl ( node , count ) ; } public struct Enumerator { internal Enumerator ( SyntaxNode node , int count ) { /* logic */ } public SyntaxNodeOrToken Current { get { /* logic */ } } public bool MoveNext ( ) { /* logic */ } public void Reset ( ) { /* logic */ } } private class EnumeratorImpl : IEnumerator < SyntaxNodeOrToken > { private Enumerator enumerator ; internal EnumeratorImpl ( SyntaxNode node , int count ) { enumerator = new Enumerator ( node , count ) ; } public SyntaxNodeOrToken Current { get { return enumerator.Current ; } } object IEnumerator.Current { get { return enumerator.Current ; } } public void Dispose ( ) { } public bool MoveNext ( ) { return enumerator.MoveNext ( ) ; } public void Reset ( ) { enumerator.Reset ( ) ; } } }"
"public interface DisposableFiddle : IDisposable { // Implements IDisposable } public class FiddleFactory { public DisposableFiddle CreateFiddle ( SomethingThatDifferentiatesFiddles s ) { // returns a newly created fiddle . } } public class FiddleFactory { private Dictionary < SomethingThatDifferentiatesFiddles , DisposableFiddle > fiddles = new ... ; public DisposableFiddle CreateFiddle ( SomethingThatDifferentiatesFiddles s ) { // returns an existing fiddle if a corresponding s is found , // or a newly created fiddle , after adding it to the dictionary , // if no corresponding s is found . } } public class FiddlePool : IDisposable { private Dictionary < SomethingThatDifferentiatesFiddles , DisposableFiddle > fiddles = new ... ; public DisposableFiddle GetFiddle ( SomethingThatDifferentiatesFiddles s ) { // returns an existing fiddle if a corresponding s is found , // or a newly created fiddle , after adding it to the dictionary , // if no corresponding s is found . } // Implements IDisposable }"
foreach ( child in Children ) { if ( child.ShouldRun ( ) ) { child.Run ( ) ; break ; } }
"void provider_GetAssignmentsComplete ( object sender , QP_Truck_Model.Providers.GetAssignmentsEventArgs e ) { lvMyAssignments.Dispatcher.BeginInvoke ( ( ) = > { lvMyAssignments.ItemsSource = e.HandOverDocs ; } ) ; }"
"public bool IsInLength ( string text , int maxLength , Encoding encoding ) { return encoding.GetByteCount ( text ) < maxLength ; }"
< providers > < add name= '' OdbcProvider '' type= '' Samples.AspNet.Membership.OdbcMembershipProvider '' connectionStringName= '' OdbcServices '' enablePasswordRetrieval= '' true '' enablePasswordReset= '' true '' requiresQuestionAndAnswer= '' true '' writeExceptionsToEventLog= '' true '' / > < /providers > < /membership >
"public class CustomPoint { public double X { get ; set ; } public double Y { get ; set ; } public CustomPoint ( double x , double y ) { this.X = x ; this.Y = y ; } } public class PointComparer : IEqualityComparer < CustomPoint > { public bool Equals ( CustomPoint x , CustomPoint y ) { return ( ( x.X == y.X ) & & ( y.Y == x.Y ) ) ; } public int GetHashCode ( CustomPoint obj ) { int hash = 0 ; hash ^= obj.X.GetHashCode ( ) ; hash ^= obj.Y.GetHashCode ( ) ; return hash ; } } list.GroupBy ( x = > x ) .Where ( x = > x.Count ( ) = 2 ) .Select ( x = > x.Key ) .ToList ( ) ;"
"Thread 1 - Start WriteThread 2 - Start ReadThread 3 - Start Write Thread 1 starts its write and locks the list.Thread 2 adds itself to the read queue.Thread 3 adds itself to the write queue.Thread 1 finishes writing and releases the lockThread 3 aquires the lock and starts its writeThread 3 finishes writing and releases the lockThread 2 performs its read public partial class SimpleLock : System.Web.UI.Page { public static ReaderWriterLockSlim threadLock = new ReaderWriterLockSlim ( ) ; protected void Page_Load ( object sender , EventArgs e ) { List < String > outputList = new List < String > ( ) ; Thread thread1 = new Thread ( delegate ( object output ) { ( ( List < String > ) output ) .Add ( `` Write 1 Enter '' ) ; threadLock.EnterWriteLock ( ) ; ( ( List < String > ) output ) .Add ( `` Write 1 Begin '' ) ; Thread.Sleep ( 100 ) ; ( ( List < String > ) output ) .Add ( `` Write 1 End '' ) ; threadLock.ExitWriteLock ( ) ; ( ( List < String > ) output ) .Add ( `` Write 1 Exit '' ) ; } ) ; thread1.Start ( outputList ) ; Thread.Sleep ( 10 ) ; Thread thread2 = new Thread ( delegate ( object output ) { ( ( List < String > ) output ) .Add ( `` Read 2 Enter '' ) ; threadLock.EnterReadLock ( ) ; ( ( List < String > ) output ) .Add ( `` Read 2 Begin '' ) ; Thread.Sleep ( 100 ) ; ( ( List < String > ) output ) .Add ( `` Read 2 End '' ) ; threadLock.ExitReadLock ( ) ; ( ( List < String > ) output ) .Add ( `` Read 2 Exit '' ) ; } ) ; thread2.Start ( outputList ) ; Thread.Sleep ( 10 ) ; Thread thread3 = new Thread ( delegate ( object output ) { ( ( List < String > ) output ) .Add ( `` Write 3 Enter '' ) ; threadLock.EnterWriteLock ( ) ; ( ( List < String > ) output ) .Add ( `` Write 3 Begin '' ) ; Thread.Sleep ( 100 ) ; ( ( List < String > ) output ) .Add ( `` Write 3 End '' ) ; threadLock.ExitWriteLock ( ) ; ( ( List < String > ) output ) .Add ( `` Write 3 Exit '' ) ; } ) ; thread3.Start ( outputList ) ; thread1.Join ( ) ; thread2.Join ( ) ; thread3.Join ( ) ; Response.Write ( String.Join ( `` < br / > '' , outputList.ToArray ( ) ) ) ; } }"
public class C : IDisposable { private void ReleaseUnmanaged ( ) { } private void ReleaseOtherDisposables ( ) { } protected virtual void Dispose ( bool disposing ) { ReleaseUnmanaged ( ) ; if ( disposing ) { ReleaseOtherDisposables ( ) ; } } ~ C ( ) { Dispose ( false ) ; } public void Dispose ( ) { Dispose ( true ) ; GC.SuppressFinalize ( this ) ; } }
"╔═══════╦════════╗ ╔═══════╦════════╗Default values : ║ Key ║ Value ║ Edited values : ║ Key ║ Value ║ ╠═══════╬════════╣ ╠═══════╬════════╣ ║ NAME ║ NAME ║ ║ NAME ║ John ║ ║ SPORT ║ SPORT ║ ║ SPORT ║ Tennis ║ ╚═══════╩════════╝ ╚═══════╩════════╝ `` Hi NAME , welcome to SPORT camp . '' `` Hi John , welcome to Tennis camp . '' using System.Collections.Generic ; using System.Linq ; using System.Text.RegularExpressions ; using System.Windows.Controls ; using System.Windows.Documents ; using System.Windows.Media ; namespace WPFTest.Resources { public class MyRichTextBox : RichTextBox { public MyRichTextBox ( ) { this.TextChanged += MyRichTextBox_TextChanged ; this.Background = Brushes.LightGray ; this.Parameters = new Dictionary < string , string > ( ) ; this.Parameters.Add ( `` NAME '' , `` NAME '' ) ; this.Parameters.Add ( `` SPORT '' , `` SPORT '' ) ; this.Format = `` Hi { 0 } , welcome to { 1 } camp . `` ; this.Text = string.Format ( this.Format , this.Parameters.Values.ToArray < string > ( ) ) ; this.Runs = new List < Run > ( ) { new Run ( ) { Background = Brushes.LightGray , Tag = `` Hi `` } , new Run ( ) { Background = Brushes.Black , Foreground = Brushes.White , Tag = `` NAME '' } , new Run ( ) { Background = Brushes.LightGray , Tag = `` , welcome to `` } , new Run ( ) { Background = Brushes.Black , Foreground = Brushes.White , Tag = `` SPORT '' } , new Run ( ) { Background = Brushes.LightGray , Tag = `` camp . '' } , } ; this.UpdateRuns ( ) ; } public Dictionary < string , string > Parameters { get ; set ; } public List < Run > Runs { get ; set ; } public string Text { get ; set ; } public string Format { get ; set ; } private void MyRichTextBox_TextChanged ( object sender , TextChangedEventArgs e ) { string richText = new TextRange ( this.Document.Blocks.FirstBlock.ContentStart , this.Document.Blocks.FirstBlock.ContentEnd ) .Text ; string [ ] oldValues = this.Parameters.Values.ToArray < string > ( ) ; string [ ] newValues = null ; bool extracted = this.TryParseExact ( richText , this.Format , out newValues ) ; if ( extracted ) { var changed = newValues.Select ( ( x , i ) = > new { NewVal = x , Index = i } ) .Where ( x = > x.NewVal ! = oldValues [ x.Index ] ) .FirstOrDefault ( ) ; string key = this.Parameters.Keys.ElementAt ( changed.Index ) ; this.Parameters [ key ] = string.IsNullOrWhiteSpace ( newValues [ changed.Index ] ) ? key : newValues [ changed.Index ] ; this.Text = richText ; } else { e.Handled = true ; } this.UpdateRuns ( ) ; } private void UpdateRuns ( ) { this.TextChanged -= this.MyRichTextBox_TextChanged ; foreach ( Run run in this.Runs ) { string value = run.Tag.ToString ( ) ; if ( this.Parameters.ContainsKey ( value ) ) { run.Text = this.Parameters [ value ] ; } else { run.Text = value ; } } Paragraph p = this.Document.Blocks.FirstBlock as Paragraph ; p.Inlines.Clear ( ) ; p.Inlines.AddRange ( this.Runs ) ; this.TextChanged += this.MyRichTextBox_TextChanged ; } public bool TryParseExact ( string data , string format , out string [ ] values ) { int tokenCount = 0 ; format = Regex.Escape ( format ) .Replace ( `` \\ { `` , `` { `` ) ; format = string.Format ( `` ^ { 0 } $ '' , format ) ; while ( true ) { string token = string.Format ( `` { { { 0 } } } '' , tokenCount ) ; if ( ! format.Contains ( token ) ) { break ; } format = format.Replace ( token , string.Format ( `` ( ? 'group { 0 } ' . * ) '' , tokenCount++ ) ) ; } RegexOptions options = RegexOptions.None ; Match match = new Regex ( format , options ) .Match ( data ) ; if ( tokenCount ! = ( match.Groups.Count - 1 ) ) { values = new string [ ] { } ; return false ; } else { values = new string [ tokenCount ] ; for ( int index = 0 ; index < tokenCount ; index++ ) { values [ index ] = match.Groups [ string.Format ( `` group { 0 } '' , index ) ] .Value ; } return true ; } } } }"
"private readonly Dictionary < IService , object > _resolvedServices = new Dictionary < IService , object > ( ) ; // Code removed for brevitypublic void Dispose ( ) { // Code removed for brevity // PERF : We 've enumerating the dictionary so that we do n't allocate to enumerate . // .Values allocates a KeyCollection on the heap , enumerating the dictionary allocates // a struct enumerator foreach ( var entry in _resolvedServices ) { ( entry.Value as IDisposable ) ? .Dispose ( ) ; } _resolvedServices.Clear ( ) ; } foreach ( var entry in _resolvedServices.Values ) { ( entry as IDisposable ) ? .Dispose ( ) ; }"
"[ AttributeUsage ( AttributeTargets.Property ) ] class TypeAttribute : Attribute { private Type _type ; public Type Type { get { return _type ; } } public TypeAttribute ( Type t ) { _type = t ; } } List < PropertyInfo > result = target.GetType ( ) .GetProperties ( ) .Where ( p = > p.GetCustomAttributes ( typeof ( TypeAttribute ) , true ) //.Where ( ca = > ( ( TypeAttribute ) ca ) . ) .Any ( ) ) .ToList ( ) ; PropertyBuilder propertyBuilder = tb.DefineProperty ( propertyName , PropertyAttributes.HasDefault , propertyType , null ) ; ConstructorInfo classCtorInfo = typeof ( TypeAttribute ) . GetConstructor ( new Type [ ] { typeof ( Type ) } ) ; CustomAttributeBuilder myCABuilder = new CustomAttributeBuilder ( classCtorInfo , new object [ ] { getType ( dataType ) } ) ; propertyBuilder.SetCustomAttribute ( myCABuilder ) ;"
"public partial class Window1 : Window { public bool DoesContain ( ArrayList list , object element ) { for ( int i = 0 ; i < list.Count ; i++ ) if ( list [ i ] .Equals ( element ) ) return true ; return false ; } public Window1 ( ) { InitializeComponent ( ) ; ArrayList list = new ArrayList ( ) ; for ( int i = 0 ; i < 10000000 ; i++ ) list.Add ( `` zzz `` + i ) ; Stopwatch sw = new Stopwatch ( ) ; sw.Start ( ) ; //Console.Out.WriteLine ( list.Contains ( `` zzz 9000000 '' ) + `` `` + sw.Elapsed ) ; Console.Out.WriteLine ( DoesContain ( list , `` zzz 9000000 '' ) + `` `` + sw.Elapsed ) ; } } public partial class Window1 : Window { public bool DoesContain ( ArrayList list , object element ) { int count = list.Count ; for ( int i = count - 1 ; i > = 0 ; i -- ) if ( element.Equals ( list [ i ] ) ) return true ; return false ; } public bool DoesContain1 ( ArrayList list , object element ) { int count = list.Count ; for ( int i = 0 ; i < count ; i++ ) if ( element.Equals ( list [ i ] ) ) return true ; return false ; } public Window1 ( ) { InitializeComponent ( ) ; ArrayList list = new ArrayList ( ) ; for ( int i = 0 ; i < 10000000 ; i++ ) list.Add ( `` zzz `` + i ) ; Stopwatch sw = new Stopwatch ( ) ; long total = 0 ; int nr = 100 ; for ( int i = 0 ; i < nr ; i++ ) { sw.Reset ( ) ; sw.Start ( ) ; DoesContain ( list , '' zzz '' ) ; total += sw.ElapsedMilliseconds ; } Console.Out.WriteLine ( total / nr ) ; total = 0 ; for ( int i = 0 ; i < nr ; i++ ) { sw.Reset ( ) ; sw.Start ( ) ; DoesContain1 ( list , `` zzz '' ) ; total += sw.ElapsedMilliseconds ; } Console.Out.WriteLine ( total / nr ) ; total = 0 ; for ( int i = 0 ; i < nr ; i++ ) { sw.Reset ( ) ; sw.Start ( ) ; list.Contains ( `` zzz '' ) ; total += sw.ElapsedMilliseconds ; } Console.Out.WriteLine ( total / nr ) ; } }"
//// Test engine set to ` x86 ` for ` default processor architecture ` [ TestMethod ] public void TestMemory ( ) { var x = new List < int > ( ) ; try { for ( long y = 0 ; y < long.MaxValue ; y++ ) x.Add ( 0 ) ; } catch ( Exception ) { System.Diagnostics.Debug.WriteLine ( `` Actual capacity ( int ) : `` + x.Count ) ; System.Diagnostics.Debug.WriteLine ( `` Size of objects : `` + System.Runtime.InteropServices.Marshal.SizeOf ( x.First ( ) .GetType ( ) ) ) ; //// This gives us `` 4 '' } }
"select someThing from someTable where someColumn in ( 'item1 ' , 'item2 ' ) if ( someEnum == someEnum.Enum1 || someEnum == someEnum.Enum2 || someEnum == someEnum.Enum3 ) { this.DoSomething ( ) ; } namespace System { public static class SystemExtensions { public static bool In < T > ( this T needle , params T [ ] haystack ) { return haystack.Contains ( needle ) ; } } } if ( someEnum.In ( someEnum.Enum1 , someEnum.Enum2 , someEnum.Enum3 ) ) this.DoSomething ( ) ; if ( someInt.In ( CONSTANT1 , CONSTANT2 ) ) this.DoSomethingElse ( ) ;"
"public async Task DoSomethingAsync ( ) { // We are on a thread that has a SynchronizationContext here . await DoSomethingElseAsync ( ) ; // We are back on the same thread as before here // ( well sometimes , depending on how the captured SynchronizationContext is implemented ) }"
public class Item { [ Key ] public int ItemID { get ; set ; } public ICollection < AddInfo > AddInfos { get ; set ; } ... // consisting of another 100+ properties ! } public class AddInfo { [ Key ] public int AddInfoID { get ; set ; } public int ? ItemID { get ; set ; } public string SomePayload { get ; set ; } } ... var myQueryable = this._context.Items.Include ( i = > i.AddInfos ) .Where ( **some filter** ) ; ... // moar filtersvar result = myQueryable.ToList ( ) ;
"if ( Request.Headers.Range ! = null ) { try { var httpResponce = Request.CreateResponse ( ) ; httpResponce.Content = new PushStreamContent ( ( Action < Stream , HttpContent , TransportContext > ) WriteContentToStream ) ; return httpResponce ; } catch ( Exception ex ) { return new HttpResponseMessage ( HttpStatusCode.InternalServerError ) ; } } else { return new HttpResponseMessage ( HttpStatusCode.RequestedRangeNotSatisfiable ) ; } /*method for streaming*/private async void WriteContentToStream ( Stream outputStream , HttpContent content , TransportContext transportContext ) { string relativeFilePath = `` ~/App_Data/Videos/4.mp4 '' ; try { var filePath = System.Web.Hosting.HostingEnvironment.MapPath ( relativeFilePath ) ; int bufferSize = 1000 ; byte [ ] buffer = new byte [ bufferSize ] ; using ( var fileStream = new FileStream ( filePath , FileMode.Open , FileAccess.Read , FileShare.Read ) ) { int totalSize = ( int ) fileStream.Length ; while ( totalSize > 0 ) { int count = totalSize > bufferSize ? bufferSize : totalSize ; int sizeOfReadedBuffer = fileStream.Read ( buffer , 0 , count ) ; await outputStream.WriteAsync ( buffer , 0 , sizeOfReadedBuffer ) ; totalSize -= sizeOfReadedBuffer ; } } } catch ( HttpException ex ) { if ( ex.ErrorCode == -2147023667 ) { return ; } } finally { outputStream.Close ( ) ; } } public HttpResponseMessage Test ( ) { if ( Request.Headers.Range ! = null ) { try { string relativeFilePath = `` ~/App_Data/Videos/4.mp4 '' ; var filePath = System.Web.Hosting.HostingEnvironment.MapPath ( relativeFilePath ) ; HttpResponseMessage partialResponse = Request.CreateResponse ( HttpStatusCode.PartialContent ) ; partialResponse.Headers.AcceptRanges.Add ( `` bytes '' ) ; var stream = new FileStream ( filePath , FileMode.Open , FileAccess.Read ) ; partialResponse.Content = new ByteRangeStreamContent ( stream , Request.Headers.Range , new MediaTypeHeaderValue ( `` video/mp4 '' ) ) ; return partialResponse ; } catch ( Exception ) { return new HttpResponseMessage ( HttpStatusCode.InternalServerError ) ; } } else { return new HttpResponseMessage ( HttpStatusCode.RequestedRangeNotSatisfiable ) ; } }"
var model= db.PageData.FirstOrDefault ( ) ; if ( model==null ) { //return Error } reutrn View ( model ) ;
< ? xml version= '' 1.0 '' encoding= '' UTF-16 '' ? > < xsl : stylesheet version= '' 2.0 '' xmlns : xsl= '' http : //www.w3.org/1999/XSL/Transform '' xmlns : xs= '' http : //www.w3.org/2001/XMLSchema '' xmlns : fn= '' http : //www.w3.org/2005/xpath-functions '' > < xsl : output method= '' xml '' version= '' 1.0 '' encoding= '' UTF-16 '' indent= '' yes '' / > < xsl : template match= '' * '' > < xsl : element name= '' { lower-case ( local-name ( ) ) } '' > < xsl : apply-templates select= '' @ * '' / > < xsl : apply-templates select= '' * | text ( ) '' / > < /xsl : element > < /xsl : template > < xsl : template match= '' @ * '' > < xsl : attribute name= '' { lower-case ( local-name ( ) ) } '' > < xsl : value-of select= '' . `` / > < /xsl : attribute > < /xsl : template > < /xsl : stylesheet > fn : lower-case
Assert.Throws < ArgumentException > ( ( ) = > dog.BarkAt ( deafDog ) ) ;
public void Foo < TClass > ( TClass item ) where TClass : class { } public void Bar < T > ( T item ) { this.Foo < T > ( item ) ; } public void Bar < T > ( T item ) { if ( typeof ( T ) .IsClass ) this.Foo < T **as class** > ( ) ; }
"namespace Engine { public partial class Test : MonoBehaviour { [ SerializeField ] private float radius = 1f ; } } namespace Engine { public partial class Test { private void OnDrawGizmosSelected ( ) { Gizmos.color = new Color ( 1f , 1f , 0f , 0.3f ) ; Gizmos.DrawSphere ( new Vector3 ( 0,0,0 ) , radius ) ; // in `` this '' context field `` radius '' not found } } }"
foreach ( var i in orderItems ) { Line invLine = new Line ( ) ; invLine.Id = i.ItemID ; invLine.Amount = i.SubTotal.Value ; invLine.AmountSpecified = true ; invLine.Description = i.ItemName ; invLine.DetailType = LineDetailTypeEnum.SalesItemLineDetail ; invLine.DetailTypeSpecified = true ; SalesItemLineDetail silDetails = new SalesItemLineDetail ( ) ; silDetails.Qty = i.Qty ; silDetails.QtySpecified = true ; silDetails.ItemRef = new ReferenceType ( ) { Value = i.ItemID } ; invLine.AnyIntuitObject = silDetails ; invoice.Line [ lineCount ] = invLine ; lineCount += 1 ; }
"public void Configure ( IApplicationBuilder app ) { // ... . app.UseEndpoints ( endpoints = > { endpoints.MapGrpcService < ComunicacaoService > ( ) ; endpoints.MapControllerRoute ( `` default '' , `` { controller } / { action=Index } / { id ? } '' ) ; } ) ; // ..."
"public class MyModelExampleSchemaFilter : ISchemaFilter { public void Apply ( Schema schema , SchemaFilterContext context ) { if ( context.SystemType.IsAssignableFrom ( typeof ( MyModel ) ) ) { schema.Example = new MyModel { Name = `` model name '' , value = 42 } ; } } } /// < summary > /// A class that recursively adapts a unidirectional POCO tree into an < see cref= '' IOpenApiAny '' / > /// < /summary > /// < remarks > /// < para > This will fail if a graph is provided ( backwards and forwards references < /para > /// < /remarks > public class OpenApiPoco : IOpenApiAny { /// < summary > /// The model to be converted /// < /summary > private readonly object _model ; /// < summary > /// Initializes a new instance of the < see cref= '' OpenApiPoco '' / > class . /// < /summary > /// < param name= '' model '' > the model to convert to an < see cref= '' IOpenApiAny '' / > < /param > public OpenApiPoco ( object model ) { this._model = model ; } /// < inheritdoc / > public AnyType AnyType = > DetermineAnyType ( this._model ) ; # region From Interface IOpenApiExtension /// < inheritdoc / > public void Write ( IOpenApiWriter writer , OpenApiSpecVersion specVersion ) { this.Write ( this._model , writer , specVersion ) ; } # endregion private static AnyType DetermineAnyType ( object model ) { if ( model is null ) { return AnyType.Null ; } var modelType = model.GetType ( ) ; if ( modelType.IsAssignableFrom ( typeof ( int ) ) || modelType.IsAssignableFrom ( typeof ( long ) ) || modelType.IsAssignableFrom ( typeof ( float ) ) || modelType.IsAssignableFrom ( typeof ( double ) ) || modelType.IsAssignableFrom ( typeof ( string ) ) || modelType.IsAssignableFrom ( typeof ( byte ) ) || modelType.IsAssignableFrom ( typeof ( byte [ ] ) ) // Binary or Byte || modelType.IsAssignableFrom ( typeof ( bool ) ) || modelType.IsAssignableFrom ( typeof ( DateTimeOffset ) ) // DateTime || modelType.IsAssignableFrom ( typeof ( DateTime ) ) // Date ) { return AnyType.Primitive ; } if ( modelType.IsAssignableFrom ( typeof ( IEnumerable ) ) ) // test after primitive check so as to avoid catching string and byte [ ] { return AnyType.Array ; } return AnyType.Object ; // Assume object } private void Write ( object model , [ NotNull ] IOpenApiWriter writer , OpenApiSpecVersion specVersion ) { if ( writer is null ) { throw new ArgumentNullException ( nameof ( writer ) ) ; } if ( model is null ) { writer.WriteNull ( ) ; return ; } var modelType = model.GetType ( ) ; if ( modelType.IsAssignableFrom ( typeof ( int ) ) || modelType.IsAssignableFrom ( typeof ( long ) ) || modelType.IsAssignableFrom ( typeof ( float ) ) || modelType.IsAssignableFrom ( typeof ( double ) ) || modelType.IsAssignableFrom ( typeof ( string ) ) || modelType.IsAssignableFrom ( typeof ( byte [ ] ) ) // Binary or Byte || modelType.IsAssignableFrom ( typeof ( bool ) ) || modelType.IsAssignableFrom ( typeof ( DateTimeOffset ) ) // DateTime || modelType.IsAssignableFrom ( typeof ( DateTime ) ) // Date ) { this.WritePrimitive ( model , writer , specVersion ) ; return ; } if ( modelType.IsAssignableFrom ( typeof ( IEnumerable ) ) ) // test after primitive check so as to avoid catching string and byte [ ] { this.WriteArray ( ( IEnumerable ) model , writer , specVersion ) ; return ; } this.WriteObject ( model , writer , specVersion ) ; // Assume object } private void WritePrimitive ( object model , IOpenApiWriter writer , OpenApiSpecVersion specVersion ) { switch ( model.GetType ( ) ) { case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( string ) ) : // string writer.WriteValue ( ( string ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( byte [ ] ) ) : // assume Binary ; ca n't differentiate from Byte and Binary based on type alone // if we chose to treat byte [ ] as Byte we would Base64 it to string . eg : writer.WriteValue ( Convert.ToBase64String ( ( byte [ ] ) propertyValue ) ) ; writer.WriteValue ( Encoding.UTF8.GetString ( ( byte [ ] ) model ) ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( bool ) ) : // boolean writer.WriteValue ( ( bool ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( DateTimeOffset ) ) : // DateTime as DateTimeOffset writer.WriteValue ( ( DateTimeOffset ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( DateTime ) ) : // Date as DateTime writer.WriteValue ( ( DateTime ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( double ) ) : // Double writer.WriteValue ( ( double ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( float ) ) : // Float writer.WriteValue ( ( float ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( int ) ) : // Integer writer.WriteValue ( ( int ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( long ) ) : // Long writer.WriteValue ( ( long ) model ) ; break ; case TypeInfo typeInfo when typeInfo.IsAssignableFrom ( typeof ( Guid ) ) : // Guid ( as a string ) writer.WriteValue ( model.ToString ( ) ) ; break ; default : throw new ArgumentOutOfRangeException ( nameof ( model ) , model ? .GetType ( ) .Name , `` unexpected model type '' ) ; } } private void WriteArray ( IEnumerable model , IOpenApiWriter writer , OpenApiSpecVersion specVersion ) { writer.WriteStartArray ( ) ; foreach ( var item in model ) { this.Write ( item , writer , specVersion ) ; // recursive call } writer.WriteEndArray ( ) ; } private void WriteObject ( object model , IOpenApiWriter writer , OpenApiSpecVersion specVersion ) { var propertyInfos = model.GetType ( ) .GetProperties ( ) ; writer.WriteStartObject ( ) ; foreach ( var property in propertyInfos ) { writer.WritePropertyName ( property.Name ) ; var propertyValue = property.GetValue ( model ) ; switch ( propertyValue.GetType ( ) ) { case TypeInfo typeInfo // primitives when typeInfo.IsAssignableFrom ( typeof ( string ) ) // string || typeInfo.IsAssignableFrom ( typeof ( byte [ ] ) ) // assume Binary or Byte || typeInfo.IsAssignableFrom ( typeof ( bool ) ) // boolean || typeInfo.IsAssignableFrom ( typeof ( DateTimeOffset ) ) // DateTime as DateTimeOffset || typeInfo.IsAssignableFrom ( typeof ( DateTime ) ) // Date as DateTime || typeInfo.IsAssignableFrom ( typeof ( double ) ) // Double || typeInfo.IsAssignableFrom ( typeof ( float ) ) // Float || typeInfo.IsAssignableFrom ( typeof ( int ) ) // Integer || typeInfo.IsAssignableFrom ( typeof ( long ) ) // Long || typeInfo.IsAssignableFrom ( typeof ( Guid ) ) : // Guid ( as a string ) this.WritePrimitive ( propertyValue , writer , specVersion ) ; break ; case TypeInfo typeInfo // Array test after primitive check so as to avoid catching string and byte [ ] when typeInfo.IsAssignableFrom ( typeof ( IEnumerable ) ) : // Enumerable as array of objects this.WriteArray ( ( IEnumerable ) propertyValue , writer , specVersion ) ; break ; case TypeInfo typeInfo // object when typeInfo.IsAssignableFrom ( typeof ( object ) ) : // Object default : this.Write ( propertyValue , writer , specVersion ) ; // recursive call break ; } } writer.WriteEndObject ( ) ; } }"
"private async void GetNewsIndex ( string theN ) { string newsURI = newsURL + theN ; string fileName = theN + `` -temp.html '' ; string folderName = `` news '' ; prgBar01.Visibility = System.Windows.Visibility.Visible ; try { Task < string > contentDataDownloaded = new WebClient ( ) .DownloadStringTaskAsync ( new Uri ( newsURI ) ) ; string response = await contentDataDownloaded ; WriteTempFile ( theN , response.ToString ( ) ) ; string contentData = ProcessDataToXMLNews ( fileName , folderName ) ; WritenewsIndexXMLFile ( newsIndexURI , folderName , contentData ) ; DisplayNewsIndex ( ) ; } catch { // } }"
"public partial class AddPersonForm : Form { private readonly DemoContext _context ; public AddPersonForm ( ) { _context = new DemoContext ( ) ; InitializeComponent ( ) ; } protected override void OnLoad ( EventArgs e ) { _context.People.Load ( ) ; personBindingSource.DataSource = _context.People.Local.ToBindingList ( ) ; personBindingSource.AddNew ( ) ; personBindingSource.MovePrevious ( ) ; personBindingSource.MoveNext ( ) ; base.OnLoad ( e ) ; } private void personBindingNavigatorSaveItem_Click ( object sender , EventArgs e ) { int changes = _context.SaveChanges ( ) ; Debug.WriteLine ( `` # of changes : `` + changes ) ; } }"
// line # { // 1 // 2 { // 3 double test = 0 ; // 4 } // 5 // 6 double test = 0 ; // 7 } // 8
Hue Amount R G B | H S LOriginal 244 196 10 | 48 0.92 0.5Blue 240 30 % 237 30 45 | 356 0.85 0.52Blue 240 50 % 245 9 156 | 323 0.93 0.5Blue 240 80 % 140 12 244 | 273 0.91 0.5Blue 240 100 % 12 12 244 | 240 0.91 0.5 Hue Amount R G B | H S LOriginal 244 196 10 | 48 0.92 0.5Green 120 30 % 211 237 30 | 68 0.85 0.52Green 120 50 % 159 237 30 | 83 0.85 0.52Green 120 80 % 81 237 29 | 105 0.85 0.52Green 120 100 % 29 237 29 | 120 0.85 0.52
"public ActionResult Save ( Car model , FormCollection form ) { Int32 milage ; if ( model.MyProperty == 0 & & Int32.TryParse ( form [ `` MyProperty '' ] , NumberStyles.AllowThousands , CultureInfo.InvariantCulture , out milage ) { model.MyProperty = milage ; } else ModelState.AddModelError ( `` Invalid '' , `` Property looks invalid '' ) ; [ ... ] }"
"string strPath = Server.MapPath ( `` ~/Recipt001.png '' ) ; Bitmap myBitmap = new Bitmap ( strPath ) ; //Some filters Grayscale , invert , threshold//Blod Filtering BlobCounter blobCounter = new BlobCounter ( ) ; blobCounter.ProcessImage ( temp ) ; blobCounter.ObjectsOrder = ObjectsOrder.YX ; blobCounter.FilterBlobs = true ; Blob [ ] blobs = blobCounter.GetObjectsInformation ( ) ; Graphics g = Graphics.FromImage ( myBitmap ) ; Pen redPen = new Pen ( Color.Red , 2 ) ; SimpleShapeChecker shapeChecker = new SimpleShapeChecker ( ) ; // dictionary of color to highlight different shapesDictionary < PolygonSubType , Color > colors = new Dictionary < PolygonSubType , Color > ( ) ; colors.Add ( PolygonSubType.Unknown , Color.White ) ; colors.Add ( PolygonSubType.Trapezoid , Color.Orange ) ; colors.Add ( PolygonSubType.Parallelogram , Color.Red ) ; colors.Add ( PolygonSubType.Rectangle , Color.Green ) ; colors.Add ( PolygonSubType.Square , Color.Blue ) ; colors.Add ( PolygonSubType.Rhombus , Color.Gray ) ; colors.Add ( PolygonSubType.EquilateralTriangle , Color.Pink ) ; colors.Add ( PolygonSubType.IsoscelesTriangle , Color.Purple ) ; colors.Add ( PolygonSubType.RectangledTriangle , Color.SkyBlue ) ; colors.Add ( PolygonSubType.RectangledIsoscelesTriangle , Color.SeaGreen ) ; for ( int i = 0 , n = blobs.Length ; i < n ; i++ ) { List < IntPoint > corners ; List < IntPoint > edgePoints = blobCounter.GetBlobsEdgePoints ( blobs [ i ] ) ; Point center ; double radius ; if ( shapeChecker.IsQuadrilateral ( edgePoints , out corners ) ) { if ( shapeChecker.CheckPolygonSubType ( corners ) == PolygonSubType.Rectangle ) { g.DrawPolygon ( redPen , ToPointsArray ( corners ) ) ; } } } redPen.Dispose ( ) ; g.Dispose ( ) ;"
locale = `` ja-jp '' ; var items = from c in db.Contents.Include ( `` Translation '' ) where c.RegionalInfo.Any ( x = > x.RegionId == locale ) select c ;
public class Restaurant { public virtual int ID { get ; set ; } public virtual string Name { get ; set ; } public virtual Address Address { get ; set ; } public virtual ICollection < Review > Reviews { get ; set ; } } public interface IDbContext { IQueryable < Restaurant > Restaurants { get ; } IQueryable < Review > Reviews { get ; } int SaveChanges ( ) ; T Attach < T > ( T entity ) where T : class ; T Add < T > ( T entity ) where T : class ; T Delete < T > ( T entity ) where T : class ; }
"long x = long.MaxValue ; decimal y = x ; x.Dump ( ) ; y.Dump ( ) ; ( x == y ) .Dump ( ) ; ( y == x ) .Dump ( ) ; Object.Equals ( x , y ) .Dump ( ) ; Object.Equals ( y , x ) .Dump ( ) ; x.Equals ( y ) .Dump ( ) ; y.Equals ( x ) .Dump ( ) ; 9223372036854775807 9223372036854775807 True True False False False True using System ; namespace TestConversion { class Program { static void Main ( string [ ] args ) { long x = long.MaxValue ; decimal y = x ; Console.WriteLine ( x ) ; Console.WriteLine ( y ) ; Console.WriteLine ( x == y ) ; Console.WriteLine ( y == x ) ; Console.WriteLine ( Object.Equals ( x , y ) ) ; Console.WriteLine ( Object.Equals ( y , x ) ) ; Console.WriteLine ( x.Equals ( y ) ) ; Console.WriteLine ( y.Equals ( x ) ) ; Console.ReadKey ( ) ; } } } .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint .maxstack 2 .locals init ( [ 0 ] int64 x , [ 1 ] valuetype [ mscorlib ] System.Decimal y ) L_0000 : nop L_0001 : ldc.i8 9223372036854775807 L_000a : stloc.0 L_000b : ldloc.0 L_000c : call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Decimal : :op_Implicit ( int64 ) L_0011 : stloc.1 L_0012 : ldloc.0 L_0013 : call void [ mscorlib ] System.Console : :WriteLine ( int64 ) L_0018 : nop L_0019 : ldloc.1 L_001a : call void [ mscorlib ] System.Console : :WriteLine ( valuetype [ mscorlib ] System.Decimal ) L_001f : nop L_0020 : ldloc.0 L_0021 : call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Decimal : :op_Implicit ( int64 ) L_0026 : ldloc.1 L_0027 : call bool [ mscorlib ] System.Decimal : :op_Equality ( valuetype [ mscorlib ] System.Decimal , valuetype [ mscorlib ] System.Decimal ) L_002c : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_0031 : nop L_0032 : ldloc.1 L_0033 : ldloc.0 L_0034 : call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Decimal : :op_Implicit ( int64 ) L_0039 : call bool [ mscorlib ] System.Decimal : :op_Equality ( valuetype [ mscorlib ] System.Decimal , valuetype [ mscorlib ] System.Decimal ) L_003e : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_0043 : nop L_0044 : ldloc.0 L_0045 : box int64 L_004a : ldloc.1 L_004b : box [ mscorlib ] System.Decimal L_0050 : call bool [ mscorlib ] System.Object : :Equals ( object , object ) L_0055 : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_005a : nop L_005b : ldloc.1 L_005c : box [ mscorlib ] System.Decimal L_0061 : ldloc.0 L_0062 : box int64 L_0067 : call bool [ mscorlib ] System.Object : :Equals ( object , object ) L_006c : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_0071 : nop L_0072 : ldloca.s x L_0074 : ldloc.1 L_0075 : box [ mscorlib ] System.Decimal L_007a : call instance bool [ mscorlib ] System.Int64 : :Equals ( object ) L_007f : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_0084 : nop L_0085 : ldloca.s y L_0087 : ldloc.0 L_0088 : call valuetype [ mscorlib ] System.Decimal [ mscorlib ] System.Decimal : :op_Implicit ( int64 ) L_008d : call instance bool [ mscorlib ] System.Decimal : :Equals ( valuetype [ mscorlib ] System.Decimal ) L_0092 : call void [ mscorlib ] System.Console : :WriteLine ( bool ) L_0097 : nop L_0098 : call valuetype [ mscorlib ] System.ConsoleKeyInfo [ mscorlib ] System.Console : :ReadKey ( ) L_009d : pop L_009e : ret }"
public interface ICell { int Value { get ; } void IncrementValue ( ) ; }
"private string Parse ( string s ) { var dict = new Dictionary < string , string > { { `` a '' , `` x '' } , { `` b '' , `` y '' } } ; return dict [ s ] ; }"
"class Klazz { private const int N = 100 ; private const int Length = 10000000 ; var gpu = Gpu.Default ; // here is the Exception thrown public static void Unmanaged ( ) { var data = new int [ Length ] ; for ( var k = 0 ; k < N ; k++ ) gpu.For ( 0 , data.Length , i = > data [ i ] += 1 ) ; } }"
"int Foo < T1 > ( ) ; int Foo < T1 , T2 > ( ) ; int Foo < T1 , T2 , T3 > ( ) ; ... int Foo < T1 , T2 , T3 ... TN > ( ) ; int Foo < T1 , T2 , T3 > ( ) { this.data = new byte [ 3 ] ; // allocate 1 array slot per type } int Foo < T1 , T2 , T3 > ( ) { this.data = new byte [ _NUMBER_OF_GENERIC_PARAMETERS ] ; } int Foo < T1 , T2 , T3 > ( ) { this.data = new byte [ _NUMBER_OF_GENERIC_PARAMETERS ] ; // can do this Type [ ] types = new Type [ ] { T1 , T2 , T3 } ; // but would rather do this Type [ ] types = _ARRAY_OR_COLLECTION_OF_THE_GENERIC_PARAMETERS ; }"
if ( Test == `` test1 '' || Test == `` test2 '' || Test == `` test3 '' ) { //do something } if ( Test == `` test1 '' : '' test2 '' : '' test3 '' )
public interface IJsonAble { public string ToJson ( ) = > System.Text.Json.JsonSerializer.Serialize ( this ) ; } public class SumRequest : IJsonAble { public int X { get ; set ; } public int Y { get ; set ; } public void Tmp ( ) { new SumRequest ( ) .ToJson ( ) ; //compile error } }
"public static class TestRandoIntStaticClass { private static readonly Lazy < int > LazyRandomInt = new Lazy < int > ( ( ) = > { // lazily initialize a random interger seeded off of the current time // according to readings , this should happen only once return new Random ( ( int ) DateTime.Now.Ticks ) .Next ( ) ; } ) ; // according to readings , this should be a thread safe operation public static int RandomInt = > LazyRandomInt.Value ; } public class TestClass { public static IEnumerable < object [ ] > RandomIntMemberData ( ) { var randomInt = new List < object [ ] > { new object [ ] { TestRandoIntStaticClass.RandomInt } , } ; return randomInt as IEnumerable < object [ ] > ; } [ Theory ] [ MemberData ( nameof ( RandomIntMemberData ) ) ] public void RandoTest ( int rando ) { // these two ought to be equal if TestRandoIntStaticClass.RandomInt is only initialized once Assert.True ( rando == TestRandoIntStaticClass.RandomInt , $ '' { nameof ( rando ) } = { rando } but { nameof ( TestRandoIntStaticClass.RandomInt ) } = { TestRandoIntStaticClass.RandomInt } '' ) ; } }"
# include `` stdafx.h '' # include < iostream > using namespace System ; using namespace std ; static void ThrowingManagedException ( ) { throw gcnew ArgumentException ( `` For no good reason '' ) ; } static void ThrowingNativeException ( ) { throw std : :exception ( `` For no good reason '' ) ; } static void SomeBadThingsHappen ( ) { short a [ 1 ] ; a [ 0 ] =1 ; a [ 2 ] = 2 ; // SomeOne make stupid mistake } int main ( array < System : :String ^ > ^args ) { Console : :WriteLine ( L '' Test Exceptions '' ) ; try { SomeBadThingsHappen ( ) ; //ThrowingNativeException ( ) ; //ThrowingManagedException ( ) ; } catch ( Exception^ e ) { Console : :WriteLine ( `` Something awful happened : `` + e ) ; } Console : :WriteLine ( `` Press enter to exit '' ) ; Console : :Read ( ) ; return 0 ; }
private Task < string > Download ( ) { var wc = new WebClient ( ) ; Task < string > backgroundDownload = wc.DownloadStringTaskAsync ( this.Uri ) ; // Make sure the WebClient is disposed no matter what . backgroundDownload.ContinueWith ( ( downloadTask ) = > { wc.Dispose ( ) ; } ) ; return backgroundDownload ; }
"private void UserControl1_Paint ( object sender , PaintEventArgs e ) { e.Graphics.DrawEllipse ( Pens.Black , new Rectangle ( -200 , -500 , this.Width + 400 , this.Height + 420 ) ) ; }"
if ( _updatedisplay == null ) { // UpdateDisplay contains code to set control properties on the form _updatedisplay = new EventHandler ( UpdateDisplay ) ; } Invoke ( _updatedisplay ) ;
"migrationBuilder.AddPrimaryKey ( `` AspNetRoles '' , `` PK_AspNetRoles '' , new [ ] { `` Id '' } , isClustered : true ) ;"
"HashSet < int > set = new HashSet < int > ( ) ; set.Add ( 1 ) ; set.Add ( 2 ) ; set.Add ( 3 ) ; set.Add ( 4 ) ; set.Add ( 5 ) ; // Result : 1 , 3 , 4 , 5 , 2 ."
"< ECDHKeyValue xmlns= '' http : //www.w3.org/2001/04/xmldsig-more # '' > < DomainParameters > < NamedCurve URN= '' urn : oid:1.3.132.0.35 '' / > < /DomainParameters > < PublicKey > < X Value= '' 11 '' xsi : type= '' PrimeFieldElemType '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' / > < Y Value= '' 17 '' xsi : type= '' PrimeFieldElemType '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' / > < /PublicKey > < /ECDHKeyValue > using ( ECDiffieHellmanCng dhKey = new ECDiffieHellmanCng ( ) ) { dhKey.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash ; dhKey.HashAlgorithm = CngAlgorithm.Sha256 ; Console.WriteLine ( dhKey.PublicKey.ToXmlString ( ) ) ; } ECDiffieHellmanCngPublicKey pbkey = ECDiffieHellmanCngPublicKey.FromXmlString ( xmlHere ) ; using ( ECDiffieHellman dhBob = ECDiffieHellman.Create ( ECCurve.CreateFromValue ( `` 1.3.132.0.35 '' ) ) ) { using ( ECDiffieHellman dhAlice = ECDiffieHellman.Create ( ECCurve.CreateFromValue ( `` 1.3.132.0.35 '' ) ) ) { byte [ ] b = dhAlice.DeriveKeyMaterial ( dhBob.PublicKey ) ; byte [ ] b2 = dhBob.DeriveKeyMaterial ( dhAlice.PublicKey ) ; Console.WriteLine ( b.SequenceEqual ( b2 ) ) ; } } Unhandled Exception : System.PlatformNotSupportedException : The specified curve 'ECDSA_P521 ' or its parameters are not valid for this platform . -- - > Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The parameter is incorrect at System.Security.Cryptography.CngKeyLite.SetProperty ( SafeNCryptHandle ncryptHandle , String propertyName , Byte [ ] value ) at System.Security.Cryptography.CngKeyLite.SetCurveName ( SafeNCryptHandle keyHandle , String curveName ) at System.Security.Cryptography.CngKeyLite.GenerateNewExportableKey ( String algorithm , String curveName ) at System.Security.Cryptography.ECCngKey.GenerateKey ( ECCurve curve ) -- - End of inner exception stack trace -- - at System.Security.Cryptography.ECCngKey.GenerateKey ( ECCurve curve ) at System.Security.Cryptography.ECDiffieHellman.Create ( ECCurve curve ) at TestCore.Program.Main ( String [ ] args )"
"CREATE TABLE [ dbo ] . [ DeviceLogs ] ( [ DeviceLogId ] [ int ] IDENTITY ( 1,1 ) NOT NULL , [ UserId ] [ nvarchar ] ( 50 ) NULL , [ LogDate ] [ datetime2 ] ( 0 ) NULL , ) GO 1 1 2013-05-29 11:05:15 //accepted ( its the first occurance for userid 1 ) 2 1 2013-05-29 11:05:20 //discarded ( within 5 mins from 1st record ) 3 1 2013-05-29 11:07:56 //discarded ( within 5 mins from 1st record ) 4 1 2013-05-29 11:11:15 //accepted ( after 5 mins from 1st occurance ) 5 2 2013-05-29 11:06:05 //accepted ( its the first occurance for userid 2 ) 6 2 2013-05-29 11:07:18 //discarded ( within 5 mins from 1st record ) 7 2 2013-05-29 11:09:38 //discarded ( within 5 mins from 1st record ) 8 2 2013-05-29 11:12:15 //accepted ( after 5 mins from 1st occurance ) 1 1 2013-05-29 11:05:15 4 1 2013-05-29 11:11:15 5 2 2013-05-29 11:06:05 8 2 2013-05-29 11:12:15 db.DeviceLogs.GroupBy ( g= > new { g.LogDate.Year , g.LogDate.Month , g.LogDate.Day , g.LogDate.Hour , g.LogDate.Minutes , g.UserID } ) .Select ( s= > new { UserID=s.Key.UserID , s. ? ? ? } ) ;"
public class MyClass { private static MyClass heldInstance ; public MyClass ( ) { heldInstance = this ; } }
public class Program { public static void Main ( string [ ] args ) { bool toggle = false ; bool didfinally = false ; var thread = new Thread ( ( ) = > { Console.WriteLine ( `` running '' ) ; RuntimeHelpers.PrepareConstrainedRegions ( ) ; try { while ( true ) { toggle = ! toggle ; } } finally { didfinally = true ; } } ) ; thread.Start ( ) ; Console.WriteLine ( `` sleeping '' ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` aborting '' ) ; thread.Abort ( ) ; Console.WriteLine ( `` aborted '' ) ; thread.Join ( ) ; Console.WriteLine ( `` joined '' ) ; Console.WriteLine ( `` didfinally= '' + didfinally ) ; Console.Read ( ) ; } }
"< div class= '' reorderListDemo '' style= '' width : 100 % '' > < cc1 : ReorderList ID= '' ReorderList1 '' runat= '' server '' DataSourceID= '' SqlDataSource1 '' DataKeyField= '' RecordingFilterId '' AllowReorder= '' true '' SortOrderField= '' Priority '' PostBackOnReorder= '' False '' > < ItemTemplate > < table style= '' width : 100 % '' cellpadding= '' 0 '' cellspacing= '' 0 '' border= '' 0 '' > < tr > < td width= '' 6 % '' style= '' padding-left:5px ; padding-top:3px ; '' > < a href= '' javascript : switchViews ( 'divRF < % # Eval ( `` RecordingFilterId '' ) % > ' , 'dragHandle < % # Eval ( `` RecordingFilterId '' ) % > ' ) ; '' > < img id= '' imgdivRF < % # Eval ( `` RecordingFilterId '' ) % > '' border= '' 0 '' src= '' Images/expand.png '' / > < /a > < /td > < td width= '' 34 % '' > < asp : Label ID= '' Label7 '' runat= '' server '' Text= ' < % # Eval ( `` Name '' ) % > ' meta : resourcekey= '' Label7Resource1 '' / > < /td > < /tr > < tr > < td colspan= '' 6 '' width= '' 100 % '' style= '' padding-right:10px ; '' > < div id= '' divRF < % # Eval ( `` RecordingFilterId '' ) % > '' style= '' display : none ; width : 99 % ; '' > < table style= '' width : 100 % ; '' cellspacing= '' 0 '' cellpadding= '' 0 '' border= '' 0 '' > < tbody > < tr > < td style= '' color : white ; width : 15 % ; padding-left : 30px ; '' class= '' topleft '' align= '' left '' > < div > < b > < asp : Label ID= '' Label3 '' runat= '' server '' Text= '' Rule '' meta : resourcekey= '' Label3Resource2 '' > < /asp : Label > < /b > < /div > < /td > < /tr > < /tbody > < /table > < div class= '' reorderListDemo '' style= '' margin-left : 0px ; width : 97 % ; '' > < cc1 : ReorderList ID= '' ReorderList2 '' runat= '' server '' PostBackOnReorder= '' False '' CallbackCssStyle= '' callbackStyle '' AllowReorder= '' True '' DataKeyField= '' RuleId '' SortOrderField= '' Priority '' > < ItemTemplate > < table style= '' width : 100 % '' cellpadding= '' 0 '' cellspacing= '' 0 '' border= '' 0 '' > < tr > < td align= '' left '' style= '' padding-left : 10px ; width : 15 % ; '' > < asp : Label ID= '' Label6 '' runat= '' server '' ToolTip= ' < % # Eval ( `` RuleName '' ) % > ' Text= ' < % # Eval ( `` RuleName '' ) .ToString ( ) .Length > 14 ? Eval ( `` RuleName '' ) .ToString ( ) .Substring ( 0,12 ) + `` .. '' : Eval ( `` RuleName '' ) .ToString ( ) % > ' / > < /td > < /tr > < /table > < /ItemTemplate > < ReorderTemplate > < asp : Panel ID= '' Panel2 '' runat= '' server '' CssClass= '' reorderCue '' meta : resourcekey= '' Panel2Resource1 '' > < /asp : Panel > < /ReorderTemplate > < DragHandleTemplate > < div class= '' dragHandleChild '' id= '' dragHandle < % # Eval ( `` RecordingFilterId '' ) % > '' > < /div > < /DragHandleTemplate > < /cc1 : ReorderList > < asp : SqlDataSource ID= '' SqlDataSource2 '' runat= '' server '' ConnectionString= '' < % $ ConnectionStrings : MyConnectionString % > '' ProviderName= '' < % $ ConnectionStrings : MyConnectionString.ProviderName % > '' OnDeleted= '' OnRuleDeleted '' SelectCommand= '' SELECT RuleId , RecordingFilterId , RuleName , RecordingAction , RecordingCondition , ExtensionValue , Priority , CallType FROM rules WHERE ( [ RecordingFilterId ] = @ RecordingFilterId ) and RuleName & lt ; & gt ; `` ORDER BY [ Priority ] asc '' UpdateCommand= '' UPDATE [ Rules ] SET [ Priority ] = @ Priority WHERE RuleId = @ original_RuleID '' DeleteCommand= '' exec DeleteRule @ original_RuleID '' OldValuesParameterFormatString= '' original_ { 0 } '' > < DeleteParameters > < asp : Parameter Name= '' original_RuleID '' / > < /DeleteParameters > < SelectParameters > < asp : ControlParameter ControlID= '' lblCategoryName '' Name= '' RecordingFilterId '' PropertyName= '' Text '' Type= '' String '' / > < /SelectParameters > < UpdateParameters > < asp : Parameter Name= '' Priority '' Type= '' Int32 '' / > < asp : Parameter Name= '' original_RuleID '' Type= '' String '' / > < /UpdateParameters > < /asp : SqlDataSource > < /div > < /div > < /td > < /tr > < /table > < /ItemTemplate > < ReorderTemplate > < asp : Panel ID= '' Panel2 '' runat= '' server '' CssClass= '' reorderCue '' > < /asp : Panel > < /ReorderTemplate > < DragHandleTemplate > < div class= '' dragHandle '' id= '' dragHandle < % # Eval ( `` RecordingFilterId '' ) % > '' > < /div > < /DragHandleTemplate > < /cc1 : ReorderList > < /div > < asp : SqlDataSource ID= '' SqlDataSource1 '' runat= '' server '' ConnectionString= '' < % $ ConnectionStrings : MyConnectionString % > '' ProviderName= '' < % $ ConnectionStrings : MyConnectionString.ProviderName % > '' SelectCommand= '' SELECT RecordingFilterId , Name , Description , SystemFilter , Priority FROM recordingfilters WHERE SystemFilter= ' 1 ' AND STATUS =1 order BY Priority '' UpdateCommand= '' UPDATE [ recordingfilters ] SET [ Priority ] = @ Priority WHERE RecordingFilterId = @ original_RecordingFilterId '' OnDeleted= '' OnFilterDeleted '' DeleteCommand= '' exec DeleteRecordingFilter @ original_RecordingFilterId '' OldValuesParameterFormatString= '' original_ { 0 } '' > < DeleteParameters > < asp : Parameter Name= '' original_RecordingFilterId '' / > < /DeleteParameters > < UpdateParameters > < asp : Parameter Name= '' Priority '' Type= '' Int32 '' / > < asp : Parameter Name= '' original_RecordingFilterId '' Type= '' String '' / > < /UpdateParameters > < /asp : SqlDataSource >"
"public interface IStruct < T > where T : struct { } public class EnumIsAStruct : IStruct < DateTimeKind > { } public class MCVE < T > : IStruct < T > where T : struct , Enum { } public class MCVE < T > : IStruct < T > where T : Enum { }"
"public class Window { private void window_DoubleClick ( object sender , EventArgs e ) { /// Maximize/minimize window } private void myCustomControl_DoubleClick ( object sender , EventArgs e ) { /// Do other things , but PLEASE do n't resize ! e.Handled = true ; } } < Window x : class= '' MyProject.MyWindow '' MouseDoubleClick= '' window_DoubleClick '' > < Grid Grid.Row= '' 0 '' Margin= '' 0 '' > < local : myCustomControl MouseDoubleClick= '' myCustomControl_DoubleClick '' / > < /Grid > < /Window > private void myCustomControl_PreviewMouseDoubleClick ( object sender , MouseButtonEventArgs e ) { e.Handled = true ; }"
"{ `` total_count '' : 2 , `` num_pages '' : 1 , `` current_page '' : 1 , `` balance '' : { `` amount '' : `` 0.00001199 '' , `` currency '' : `` BTC '' } , `` transactions '' : [ { `` transaction '' : { `` id '' : `` 5018f833f8182b129c00002f '' , `` created_at '' : `` 2012-08-01T02:34:43-07:00 '' , `` sender '' : { `` id '' : `` 5011f33df8182b142400000e '' , `` name '' : `` User Two '' , `` email '' : `` user2 @ example.com '' } , `` recipient '' : { `` id '' : `` 5011f33df8182b142400000a '' , `` name '' : `` User One '' , `` email '' : `` user1 @ example.com '' } } } , { `` transaction '' : { `` id '' : `` 5018f833f8182b129c00002e '' , `` created_at '' : `` 2012-08-01T02:36:43-07:00 '' , `` hsh '' : `` 9d6a7d1112c3db9de5315b421a5153d71413f5f752aff75bf504b77df4e646a3 '' , `` sender '' : { `` id '' : `` 5011f33df8182b142400000e '' , `` name '' : `` User Two '' , `` email '' : `` user2 @ example.com '' } , `` recipient_address '' : `` 37muSN5ZrukVTvyVh3mT5Zc5ew9L9CBare '' } } ] }"
List < CallRates > cr = CallRates.ProcessCallsFile ( file ) ;
namespace MvcApplication3.Controllers { public class ValuesController : ApiController { // GET api/values/5 [ MyExceptionHandler ] public string Get ( int id ) { string value = GetValue ( id ) ; return value ; } private string GetValue ( int id ) { throw new DivideByZeroException ( ) ; } } [ Serializable ] public class MyExceptionHandler : OnExceptionAspect { public override void OnException ( MethodExecutionArgs args ) { args.FlowBehavior = FlowBehavior.Continue ; args.ReturnValue = `` Error Getting Value '' ; } } }
"public void MyProcess ( int a , string b , object c ) { log ( String.Format ( `` Entering process MyProcess with arguments : [ a ] = [ { 0 } ] ; [ b ] = [ { 1 } ] ; [ c ] = [ { 2 } ] '' , a.ToString ( ) , b , c.ToString ( ) ) ; try { int d = DoStuff ( a ) log ( String.Format ( `` DoStuff ( { 0 } ) returned value { 1 } '' , a.ToString ( ) , d.ToString ( ) ) ) ; } catch ( Exception ex ) { log ( String.Format ( `` An exception occurred during process DoStuff ( { 0 } ) \nException : \n { 1 } '' , a.ToString ( ) , ex.ToString ( ) ) ) } } Monitor ( MyClass.MyMethod )"
"var response = owin.HttpClient.PostAsJsonAsync ( uri , body ) ; var result = response.Wait ( 15000 ) ; public IHttpActionResult Add ( Item item ) { var result = _db.AddItem ( item ) ; return Ok ( result ) ; } TestServer _owinTestServer ; public async Task < HttpResponse message > Method1 ( string url , object body ) { return await _owinTestServer.HttpClient.PostAsJsonAsync ( url , body ) ; } public async Task < ItemPreview > Method2 ( object body ) ; { return await Method1 ( `` .. '' , body ) .Result.Content.ReadAsAsync < ItemPreview > ( ) ; } [ TestMethod ] public void test1 ( ) { Item item = new ( ... ) ; Method2 ( item ) .Continue with ( task = > { // Never reach here } }"
"static class Program { [ STAThread ] static void Main ( ) { Form myForm1 = new Form ( ) ; myForm1.Width = 820 ; myForm1.Height = 340 ; PropertyGrid grid1 = new PropertyGrid ( ) ; grid1.Left = 0 ; grid1.Top = 0 ; grid1.Width = 400 ; grid1.Height = 300 ; myForm1.Controls.Add ( grid1 ) ; grid1.SelectedObject = new MyObject ( ) ; PropertyGrid grid2 = new PropertyGrid ( ) ; grid2.Left = 400 ; grid2.Top = 0 ; grid2.Width = 400 ; grid2.Height = 300 ; myForm1.Controls.Add ( grid2 ) ; object [ ] objects = new object [ ] { new MyObject ( ) , new MyObject ( ) } ; grid2.SelectedObjects = objects ; Application.Run ( myForm1 ) ; } } public class MyObject { [ DisplayName ( `` ZZZZ '' ) ] public int AProperty { get ; set ; } [ DisplayName ( `` BBBB '' ) ] public int BProperty { get ; set ; } }"
"// Struct member 'T.m_field ' of type 'T ' causes a cycle in the struct layoutstruct T { T m_field ; } BindingFlags privateInstance = BindingFlags.NonPublic | BindingFlags.Instance ; // Give me all the private instance fields of the int type.FieldInfo [ ] int32Fields = typeof ( int ) .GetFields ( privateInstance ) ; foreach ( FieldInfo field in int32Fields ) { Console.WriteLine ( `` { 0 } ( { 1 } ) '' , field.Name , field.FieldType ) ; } m_value ( System.Int32 )"
"public class Form { # region Public Properties public List < Field > Fields { get ; set ; } public string Id { get ; set ; } public string Name { get ; set ; } public string Version { get ; set ; } public int Revision { get ; set ; } # endregion } public class Field { # region Public Properties public string DisplayName { get ; set ; } public List < Field > Fields { get ; set ; } public string Id { get ; set ; } public FieldKind Type { get ; set ; } public FieldType FieldType { get ; set ; } # endregion } public class FieldType { # region Public Properties public DataType DataType { get ; set ; } public string DisplayName { get ; set ; } public string Id { get ; set ; } # endregion } public class DataType { # region Public Properties public string BaseType { get ; set ; } public string Id { get ; set ; } public string Name { get ; set ; } public List < Restriction > Restrictions { get ; set ; } # endregion } public bool Equals ( T x , T y ) { var type = typeof ( T ) ; if ( typeof ( IEquatable < T > ) .IsAssignableFrom ( type ) ) { return EqualityComparer < T > .Default.Equals ( x , y ) ; } var enumerableType = type.GetInterface ( typeof ( IEnumerable < > ) .FullName ) ; if ( enumerableType ! = null ) { var elementType = enumerableType.GetGenericArguments ( ) [ 0 ] ; var elementComparerType = typeof ( DifferenceComparer < > ) .MakeGenericType ( elementType ) ; var elementComparer = Activator.CreateInstance ( elementComparerType , new object [ ] { _foundDifferenceCallback , _existedDifference } ) ; return ( bool ) typeof ( Enumerable ) .GetGenericMethod ( `` SequenceEqual '' , new [ ] { typeof ( IEnumerable < > ) , typeof ( IEnumerable < > ) , typeof ( IEqualityComparer < > ) } ) .MakeGenericMethod ( elementType ) .Invoke ( null , new [ ] { x , y , elementComparer } ) ; } foreach ( var propertyInfo in type.GetProperties ( ) ) { var leftValue = propertyInfo.GetValue ( x ) ; var rightValue = propertyInfo.GetValue ( y ) ; if ( leftValue ! = null ) { var propertyComparerType = typeof ( DifferenceComparer < > ) .MakeGenericType ( propertyInfo.PropertyType ) ; var propertyComparer = Activator.CreateInstance ( propertyComparerType , new object [ ] { _foundDifferenceCallback , _existedDifference } ) ; if ( ! ( ( bool ) typeof ( IEqualityComparer < > ) .MakeGenericType ( propertyInfo.PropertyType ) .GetMethod ( `` Equals '' ) .Invoke ( propertyComparer , new object [ ] { leftValue , rightValue } ) ) ) { // Create and publish the difference with its Type } } else { if ( ! Equals ( leftValue , rightValue ) ) { // Create and publish the difference with its Type } } } //return true if no differences are found } public struct Difference { public readonly string Property ; public readonly DifferenceType Type ; public readonly IExtractionable Expected ; public readonly IExtractionable Actual ; }"
"var a = new ListItem ( a ) ; var b = new ListItem ( b ) ; var c = new ListItem ( c ) ; var d = new ListItem ( d ) ; var observableList = new List < ListItem > { a , b , c , d } .ToObservable ( ) ; var itemA = observableList.First ( ) ; // Never reachedAssert.AreEqual ( expectedFoo , itemA.Foo ) ; observableList.First ( ) .Subscribe ( item = > Assert.AreEqual ( expectedFoo , item ) ) ; observableList.Subscribe ( SomeMethod ) .First ( ) // This does n't even make sense , right ?"
"public class ViewModel { public class Item { public string Text { get ; set ; } public bool IsSelected { get ; set ; } public static implicit operator Item ( string text ) = > new Item ( ) { Text = text } ; } public ObservableCollection < Item > Items { get ; } = new ObservableCollection < Item > { `` Item 1 '' , `` Item 2 '' , `` Item 3 long enough to use horizontal scroll '' , `` Item 4 '' , `` Item 5 '' , new Item { Text = `` Item 6 '' , IsSelected = true } , // select something `` Item 7 '' , `` Item 8 '' , `` Item 9 '' , } ; } public partial class MainWindow : Window { ViewModel _vm = new ViewModel ( ) ; public MainWindow ( ) { InitializeComponent ( ) ; } void Button_Click ( object sender , RoutedEventArgs e ) = > DataContext = DataContext == null ? _vm : null ; } < StackPanel > < ContentControl Content= '' { Binding } '' > < ContentControl.Resources > < DataTemplate DataType= '' { x : Type local : ViewModel } '' > < ListView Width= '' 100 '' Height= '' 100 '' ItemsSource= '' { Binding Items } '' > < ListView.ItemTemplate > < DataTemplate > < TextBlock Text= '' { Binding Text } '' / > < /DataTemplate > < /ListView.ItemTemplate > < ListView.ItemContainerStyle > < Style TargetType= '' ListViewItem '' > < Setter Property= '' IsSelected '' Value= '' { Binding IsSelected } '' / > < /Style > < /ListView.ItemContainerStyle > < /ListView > < /DataTemplate > < /ContentControl.Resources > < /ContentControl > < Button Content= '' Click '' Click= '' Button_Click '' / > < /StackPanel >"
"void Update ( ) { GameObject player1 = GameObject.Find ( `` Player1 '' ) ; GameObject player2 = GameObject.Find ( `` Player2 '' ) ; GameObject enemy1 = GameObject.Find ( `` Enemy1 '' ) ; GameObject enemy2 = GameObject.Find ( `` Enemy2 '' ) ; GameObject enemy3 = GameObject.Find ( `` Enemy3 '' ) ; Vector3 newPos = new Vector3 ( 0 , 0 , 0 ) ; moveObjects ( newPos , 3f , player1 , player2 , enemy1 , enemy2 , enemy3 ) ; } void moveObjects ( Vector3 newPos , float duration , params GameObject [ ] objs ) { for ( int i = 0 ; i < objs.Length ; i++ ) { //StartCoroutine ( moveToNewPos ( objs [ i ] .transform , newPos , duration ) ) ; } }"
"int [ ] numbers = new int [ 7 ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 } ; var numQuery = from num in numbers where ( num % 2 ) == 0 select num ; var numQuery = select num // error : ; expected from num in numbers where ( num % 2 ) == 0 ;"
class UserState { ServerChildSocket MainConnection { get ; set ; } ServerChildSocket FileDownloadConnection { get ; set ; } ServerChildSocket VoiceChatConnection { get ; set ; } }
"public event MouseEventHandler MouseMove ; void AttachHandler ( UIElement element ) { element.MouseMove += OnMouseMove ; } void AttachHandler ( UIElement element ) { element.AddHandler ( UIElement.MouseMoveEvent , new MouseEventHandler ( OnMouseMove ) , true ) ; }"
async IAsyncEnumerable < string > MyStringEnumerator ( ) ; async IAsyncEnumerable < string > MyFunction ( ) { // ... do some code ... // Return all elements of the whole stream from the enumerator await foreach ( var s in MyStringEnumerator ( ) ) { yield return s ; } }
"public List < anEntity > Get ( int page , int pagesize , Func < anEntity , IComparable > orderby ) { using ( var ctx = new MyContext ( ) ) { return ctx.anEntity.OrderBy ( orderby ) .Skip ( pagesize * page ) .Take ( pagesize ) .ToList ( ) ; } } return ctx.anEntity.OrderBy ( x = > x.aField ) .Skip ( pagesize * page ) .Take ( pagesize ) .ToList ( ) ;"
"class User { int Id { get ; } string Name { get ; } string Status { get ; } } IObservable < User > source ; var models = new SourceCache < User , int > ( user = > user.Id ) ; models.Connect ( ) .Transform ( u = > new UserViewModel ( ) { ... } ) ... .Bind ( out viewModels ) .Subscribe ( ) ; source.Subscribe ( ul = > models.EditDiff ( ul , ( a , b ) = > a.Status == b.Status ) ) ;"
"HttpContext.Current.Cache.Insert ( cacheID , cachedObject , null , expiryTimeStamp , Cache.NoSlidingExpiration , updateCallBack ) ; var expiryTimeStamp = DateTime.Now.Add ( new TimeSpan ( 0 , 0 , 20 ) ) ;"
static IEnumerable < A > GetA ( ) { using ( var db = ConnectionFactory.Current.GetDBConnection ( ) ) { return from a in db.A select a ; } } static B [ ] DoSmth ( ) { var aItems = GetA ( ) ; if ( ! aItems.Any ( ) ) return null ; return aItems.Select ( a = > new B ( a.prop1 ) ) .ToArray ( ) ; }
"MESSAGE : Instances can not be resolved and nested lifetimes can not be created from this LifetimeScope as it has already been disposed.STACKTRACE : System.ObjectDisposedException at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent ( IComponentRegistration registration , IEnumerable ` 1 parameters ) at Autofac.ResolutionExtensions.ResolveOptionalService ( IComponentContext context , Service service , IEnumerable ` 1 parameters ) at System.Web.Mvc.DependencyResolverExtensions.GetService [ TService ] ( IDependencyResolver resolver ) public T GetInstance < T > ( ) { return DependencyResolver.Current.GetService < T > ( ) ; }"
var foo = File.ReadAllText ( `` NewFolder1/HTMLPage1.htm '' ) ;
"// Test.csusing System ; using System.Linq ; public static class Test { public static void Main ( ) { Console.WriteLine ( Environment.Version ) ; int [ ] numbers1 = { 5 , 4 , 1 , 3 , 9 , 8 , 6 , 7 , 2 , 0 } ; var numbers2 = from number in numbers1 where number < 5 select number ; Func < int , int > negate = number = > -1 * number ; foreach ( var number in numbers2 ) Console.WriteLine ( negate ( number ) ) ; } }"
"var myList = new List < int > { 1 , 2 , 3 , 4 } ; var evenNumbers = myList.Where ( x = > x % 2 == 0 ) ; foreach ( var number in evenNumbers ) { Console.WriteLine ( number ) ; } if ( evenNumbers is IDisposable ) { ( ( IDisposable ) evenNumbers ) .Dispose ( ) ; // This line will be executed }"
"protected void Application_BeginRequest ( object sender , EventArgs e ) { if ( ConfigurationManager.AppSettings [ `` abc '' ] ! = null ) { } }"
ulong lSmallValue = 5 ; ulong lBigValue = 10 ; ulong lDifference = lSmallValue - lBigValue ; Console.WriteLine ( lDifference ) ; Console.WriteLine ( ( long ) lDifference ) ; 18446744073709551611-5
var countryName = `` Sweden '' ; //var countryName = `` Denmark '' ; var regions = CultureInfo.GetCultures ( CultureTypes.SpecificCultures ) .Select ( x = > new RegionInfo ( x.LCID ) ) ; var englishRegion = regions.FirstOrDefault ( region = > region.EnglishName.Contains ( countryName ) ) ; var twoLetterISORegionName = englishRegion.TwoLetterISORegionName ;
bindingListActivty.Select ( k = > k._dataGridViewId == 1 ) ; bindingListActivty.Select ( k = > k._dataGridViewId == 1 ) .addBuyOrders ( new BuyOrders ( ) ) ;
"[ ResolveAssemblyReferences ] ResolveAssemblyReference [ 14:30:01 ] : [ ResolveAssemblyReference ] No way to resolve conflict between `` protobuf-net , Version=2.0.0.602 , Culture=neutral , PublicKeyToken=257b51d87d2e4d67 '' and `` protobuf-net , Version=2.0.0.480 , Culture=neutral , PublicKeyToken=257b51d87d2e4d67 '' . Choosing `` protobuf-net , Version=2.0.0.602 , Culture=neutral , PublicKeyToken=257b51d87d2e4d67 '' arbitrarily . [ 14:30:01 ] : [ ResolveAssemblyReference ] No way to resolve conflict between `` Newtonsoft.Json , Version=6.0.0.0 , Culture=neutral , PublicKeyToken=30ad4fe6b2a6aeed '' and `` Newtonsoft.Json , Version=4.5.0.0 , Culture=neutral , PublicKeyToken=30ad4fe6b2a6aeed '' . Choosing `` Newtonsoft.Json , Version=6.0.0.0 , Culture=neutral , PublicKeyToken=30ad4fe6b2a6aeed '' arbitrarily . [ 14:30:01 ] : [ ResolveAssemblyReference ] Consider app.config remapping of assembly `` protobuf-net , Culture=neutral , PublicKeyToken=257b51d87d2e4d67 '' from Version `` 2.0.0.602 '' [ ] to Version `` 2.0.0.668 '' [ D : \TeamCity\buildAgent\work\2772494ce0e0bbd7\branches\Stategic.Window.Release1\src\Strategic.Window\packages\protobuf-net.2.0.0.668\lib\net40\protobuf-net.dll ] to solve conflict and get rid of warning . [ 14:30:01 ] : [ ResolveAssemblyReference ] Consider app.config remapping of assembly `` Newtonsoft.Json , Culture=neutral , PublicKeyToken=30ad4fe6b2a6aeed '' from Version `` 6.0.0.0 '' [ ] to Version `` 7.0.0.0 '' [ D : \TeamCity\buildAgent\work\2772494ce0e0bbd7\branches\Stategic.Window.Release1\src\Strategic.Window\packages\Newtonsoft.Json.7.0.1\lib\net45\Newtonsoft.Json.dll ] to solve conflict and get rid of warning . [ 14:30:01 ] : [ ResolveAssemblyReference ] Consider app.config remapping of assembly `` RazorEngine , Culture=neutral , PublicKeyToken=9ee697374c7e744a '' from Version `` 3.0.8.0 '' [ ] to Version `` 3.7.4.0 '' [ D : \TeamCity\buildAgent\work\2772494ce0e0bbd7\branches\Stategic.Window.Release1\src\Strategic.Window\packages\RazorEngine.3.7.4\lib\net45\RazorEngine.dll ] to solve conflict and get rid of warning . [ 14:30:01 ] : [ ResolveAssemblyReference ] Consider app.config remapping of assembly `` WebGrease , Culture=neutral , PublicKeyToken=31bf3856ad364e35 '' from Version `` 1.5.1.25624 '' [ ] to Version `` 1.5.2.14234 '' [ D : \TeamCity\buildAgent\work\2772494ce0e0bbd7\branches\Stategic.Window.Release1\src\Strategic.Window\packages\WebGrease.1.5.2\lib\WebGrease.dll ] to solve conflict and get rid of warning . [ 14:30:01 ] W : [ ResolveAssemblyReference ] C : \Program Files ( x86 ) \MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets ( 1819 , 5 ) : warning MSB3247 : Found conflicts between different versions of the same dependent assembly . In Visual Studio , double-click this warning ( or select it and press Enter ) to fix the conflicts ; otherwise , add the following binding redirects to the `` runtime '' node in the application configuration file : < assemblyBinding xmlns= '' urn : schemas-microsoft-com : asm.v1 '' > < dependentAssembly > < assemblyIdentity name= '' protobuf-net '' culture= '' neutral '' publicKeyToken= '' 257b51d87d2e4d67 '' / > < bindingRedirect oldVersion= '' 0.0.0.0-2.0.0.668 '' newVersion= '' 2.0.0.668 '' / > < /dependentAssembly > < /assemblyBinding > < assemblyBinding xmlns= '' urn : schemas-microsoft-com : asm.v1 '' > < dependentAssembly > < assemblyIdentity name= '' Newtonsoft.Json '' culture= '' neutral '' publicKeyToken= '' 30ad4fe6b2a6aeed '' / > < bindingRedirect oldVersion= '' 0.0.0.0-7.0.0.0 '' newVersion= '' 7.0.0.0 '' / > < /dependentAssembly > < /assemblyBinding > < assemblyBinding xmlns= '' urn : schemas-microsoft-com : asm.v1 '' > < dependentAssembly > < assemblyIdentity name= '' RazorEngine '' culture= '' neutral '' publicKeyToken= '' 9ee697374c7e744a '' / > < bindingRedirect oldVersion= '' 0.0.0.0-3.7.4.0 '' newVersion= '' 3.7.4.0 '' / > < /dependentAssembly > < /assemblyBinding > < assemblyBinding xmlns= '' urn : schemas-microsoft-com : asm.v1 '' > < dependentAssembly > < assemblyIdentity name= '' WebGrease '' culture= '' neutral '' publicKeyToken= '' 31bf3856ad364e35 '' / > < bindingRedirect oldVersion= '' 0.0.0.0-1.5.2.14234 '' newVersion= '' 1.5.2.14234 '' / > < /dependentAssembly > < /assemblyBinding >"
bool success = false ; try { DoSomething ( ) ; success = true ; } finally { if ( ! success ) Rollback ( ) ; } try { DoSomething ( ) ; } catch { Rollback ( ) ; throw ; }
if ( true ) { string foo = null ; List < string > bar = new List < string > { `` test '' } ; bar.Any ( t = > t == foo ) ; }
class Foo < T > where T : Bar { T Bar ; } abstract class Bar { } class MyBar : Bar { } static void Main ( string [ ] args ) { var fooMyBar = new Foo < MyBar > ( ) ; AddMoreFoos ( fooMyBar ) ; } static void AddMoreFoos < T > ( Foo < T > FooToAdd ) where T : Bar { var listOfFoos = new List < Foo < Bar > > ( ) ; listOfFoos.Add ( FooToAdd ) ; //Does n't compile listOfFoos.Add ( ( Foo < Bar > ) FooToAdd ) ; //does n't compile }
struct EmptyResult { } public Foo ( ) { EmptyResult result ; }
"void M ( int a , int b , int c /* and many more */ )"
double totalDistance = ( from g in db.Logs join h in db.Races on g.raceId equals h.RaceId where g.userId == id select h.distance ) .Sum ( ) ; double totalDistance = ( from g in db.Logs join h in db.Races on g.raceId equals h.RaceId where g.userId == id select h.distance ) .Sum ( ) ? ? 0 ; namespace RacePace.Models { public class Race { public int RaceId { get ; set ; } [ DisplayName ( `` Race Setting '' ) ] public string place { get ; set ; } [ DisplayName ( `` Distance ( km ) '' ) ] public double distance { get ; set ; } [ DisplayName ( `` Date '' ) ] public DateTime date { get ; set ; } [ DisplayName ( `` Commencement Time '' ) ] public DateTime timeStarted { get ; set ; } [ DisplayName ( `` Active '' ) ] public Boolean active { get ; set ; } [ DisplayName ( `` Description '' ) ] public string description { get ; set ; } [ DisplayName ( `` Creator '' ) ] public int UserId { get ; set ; } } }
"Observable.FromEvent < PropertyChangedEventArgs > ( h = > MyObject.PropertyChanged += h , h = > MyObject.PropertyChanged -= h ) .Where ( e= > e.PropertyName == `` Title '' ) .Throttle ( TimeSpan.FromSeconds ( 0.5 ) ) .Subscribe ( e= > { /*do something*/ } ) ;"
this.Parent.Move += new System.EventHandler ( this.parent_Move ) ;
"var quartEst = Quarterly_estimates.OrderByDescending ( q = > q.Yyyy ) .ThenByDescending ( q = > q.Quarter ) .Where ( q = > q.Ticker.Equals ( `` IBM '' ) & & q.Eps ! = null ) .Select ( q = > new { ticker = q.Ticker , Quarter = q.Quarter , Year = q.Yyyy , Eps = q.Eps } ) .AsEnumerable ( ) .Where ( q = > Convert.ToInt32 ( string.Format ( `` { 0 } { 1 } '' , q.Year , q.Quarter ) ) > Convert.ToInt32 ( finInfo ) ) ; var quartAct = Quarterlies.OrderByDescending ( q = > q.Yyyy ) .ThenByDescending ( q = > q.Quarter ) .Where ( q = > q.Ticker.Equals ( `` IBM '' ) & & Convert.ToInt16 ( q.Yyyy ) > = DateTime.Now.Year - 3 ) .Select ( q = > new { Tick = q.Ticker , Quarter = q.Quarter , Year = q.Yyyy , Eps = q.Eps_adj } ) .AsEnumerable ( ) .Where ( q = > Convert.ToInt32 ( string.Format ( `` { 0 } { 1 } '' , q.Year , q.Quarter ) ) < = Convert.ToInt32 ( finInfo ) ) ; var quartComb = quartEst.Union ( quartAct ) ; Instance argument : can not convert from 'System.Collections.Generic.List < AnonymousType # 1 > ' to 'System.Linq.IQueryable < AnonymousType # 2 > '"
# region Using directivesusing System.X ; using System.Y ; using System.Z ; using System.A ; # regionnamespace X { ... } namespace X { # region Using directivesusing System.X ; using System.Y ; using System.Z ; using System.A ; # region ... }
"Vector3 k = new Vector3 ( Mathf.NegativeInfinity , Mathf.NegativeInfinity , Mathf.NegativeInfinity ) ; Debug.Log ( k==k ) ; // evaluates to False Debug.Log ( Mathf.Mathf.NegativeInfinity == Mathf.Mathf.NegativeInfinity ) // evaluates to True as expected"
"public interface PipelineElement < in TIn , out TOut > { IEnumerable < TOut > Run ( IEnumerable < TIn > input , Action < Error > errorReporter ) ; } public interface Stage { } public abstract class PipelineElementBase < TIn , TOut > : PipelineElement < object , object > , PipelineElement < TIn , TOut > where TIn : Stage where TOut : Stage { IEnumerable < object > PipelineElement < object , object > .Run ( IEnumerable < object > input , Action < Error > errorReporter ) { return this.Run ( input.Cast < TIn > ( ) , errorReporter ) .Cast < object > ( ) ; } public abstract IEnumerable < TOut > Run ( IEnumerable < TIn > input , Action < Error > errorReporter ) ; } public interface MyInterface < A > { } public class MyClass : MyInterface < string > , MyInterface < int > { }"
"public static bool TryGetBytes ( this Encoding encoding , ReadOnlySpan < char > str , Span < byte > bytes , out int written ) { try { written = Encoding.UTF8.GetBytes ( str , span ) ; return true ; } catch ( ArgumentException ) { written = 0 ; return false ; } public static bool TryGetBytes ( this Encoding encoding , ReadOnlySpan < char > str , Span < byte > bytes , out int written ) { if ( encoding.GetByteCount ( str ) > span.Length ) { written = 0 ; return false ; } written = Encoding.UTF8.GetBytes ( str , span ) ; return true ; }"
"[ HttpGet ] public ActionResult Index ( ) { var options = new List < SelectListItem > ( ) ; options.Add ( new SelectListItem { Text = `` Text1 '' , Value = `` 1 '' } ) ; options.Add ( new SelectListItem { Text = `` Text2 '' , Value = `` 2 '' } ) ; options.Add ( new SelectListItem { Text = `` Text3 '' , Value = `` 3 '' } ) ; ViewBag.Status = options ; return View ( ) ; } @ Html.DropDownList ( `` Status '' , ViewBag.Status as SelectList )"
kernel.Bind ( typeof ( IRepository < > ) ) .To ( typeof ( efRepository < > ) ) .InRequestScope ( ) ; kernel.Bind ( typeof ( IRepository < > ) ) .To ( typeof ( xrmRepository < > ) ) .When ( request = > request.Service.GetGenericArguments ( ) [ 0 ] .GetType ( ) .IsSubclassOf ( typeof ( Entity ) ) ) .InRequestScope ( ) ;
"Assembly a = Assembly.LoadFrom ( @ '' C : \Development\DaDll.dll '' ) ; Type type = a.GetType ( `` FileReleaseHandler '' , true ) ; TestInterface.INeeedHelp handler = Activator.CreateInstance ( type ) as TestInterface.INeeedHelp ;"
switch ( m.WParam.ToInt32 ( ) ) { case Common.Interop.Window.WM_IME_CHAR : break ; case Common.Interop.Window.WM_IME_ENDCOMPOSITION : PassCharToScreen ( m ) ; break ; case Common.Interop.Window.WM_CHAR : PassCharToScreen ( m ) ; break ; case Common.Interop.Window.WM_IME_NOTIFY : break ; case Common.Interop.Window.WM_IME_COMPOSITION : PassCharToScreen ( m ) ; break ; case Common.Interop.Window.WM_IME_COMPOSITIONFULL : break ;
"Grid.Column ( `` MyProperty '' , `` MyProperty '' , format : @ < span class= '' something '' > @ item.MyProperty.MyExtensionMethodForString ( ) < /span > ) ERROR : 'string ' does not contain a definition for 'MyExtensionMethodForString ' Grid.Column ( `` MyProperty '' , `` MyProperty '' , format : @ < span class= '' something '' > @ ( ( string ) ( item.MyProperty ) .MyExtensionMethodForString ( ) ) < /span > ) Grid.Column ( `` MyProperty '' , `` MyProperty '' , format : @ < span class= '' something '' > @ ( Utils.MyExtensionMethodForString ( item.MyProperty ) ) < /span > )"
"public class MyClass < T > { public static readonly String MyStringValue ; static MyClass ( ) { MyStringValue = GenerateString ( ) ; } private static String GenerateString ( ) { //Dynamically generated ONCE per type ( hence , not const ) } public void Foo ( ) { Console.WriteLine ( MyStringValue ) ; } } private static Object MyLock ; static MyClass ( ) { lock ( MyLock ) { if ( MyStringValue == null ) MyStringValue = GenerateString ( ) ; } }"
"internal sealed class Startup : FunctionsStartup { public override void Configure ( IFunctionsHostBuilder builder ) { builder.Services.AddHostedService < ExampleBackgroundService > ( ) ; } } Microsoft.Azure.WebJobs.Script.InvalidHostServicesException : 'The following service registrations did not match the expected services : [ Invalid ] ServiceType : Microsoft.Extensions.Hosting.IHostedService , Lifetime : Singleton , ImplementationType : ExampleBackgroundService '"
Action < string > action = Console.WriteLine ; var runtime = Ruby.CreateRuntime ( ) ; var engine = runtime.GetEngine ( `` rb '' ) ; engine.Execute ( @ '' class YieldTest def test yield 'From IronRuby ' end end `` ) ; object test = engine.Runtime.Globals.GetVariable ( `` YieldTest '' ) ; dynamic t = engine.Operations.CreateInstance ( test ) ; t.test ( action ) ;
"public static T Read < T > ( this ByteContainer ba , int size , string format ) where T : struct , IConvertible { var s = string.Concat ( ba.Bytes.Select ( b = > b.ToString ( format ) ) .ToArray ( ) ) ; var magic = FromString < T > ( s ) ; return ( T ) Convert.ChangeType ( magic , typeof ( T ) ) ; } private static T FromString < T > ( string s ) where T : struct { if ( typeof ( T ) .Equals ( typeof ( decimal ) ) ) { var x = ( decimal ) System.Convert.ToInt32 ( s ) / 100 ; return ( T ) Convert.ChangeType ( x , typeof ( T ) ) ; } if ( typeof ( T ) .Equals ( typeof ( int ) ) ) { var x = System.Convert.ToInt32 ( s ) ; return ( T ) Convert.ChangeType ( x , typeof ( T ) ) ; } if ( typeof ( T ) .Equals ( typeof ( DateTime ) ) ) ... etc ... } // < WishfulThinking > private static decimal FromString < T > ( string s ) { return ( decimal ) System.Convert.ToInt32 ( s ) / 100 ; } private static int FromString < T > ( string s ) { return System.Convert.ToInt32 ( s ) ; } // < /WishfulThinking >"
//NOTE NOTE NOTE NOTE//These fields map directly onto the fields in an EE StringObject . See object.h for the layout.// [ NonSerialized ] private int m_stringLength ; // The Empty constant holds the empty string value . It is initialized by the EE during startup.// It is treated as intrinsic by the JIT as so the static constructor would never run.// Leaving it uninitialized would confuse debuggers.////We need to call the String constructor so that the compiler does n't mark this as a literal.//Marking this as a literal would mean that it does n't show up as a field which we can access //from native.public static readonly String Empty ; // Gets the length of this string///// This is a EE implemented function so that the JIT can recognise is specially/// and eliminate checks on character fetchs in a loop like : /// for ( int I = 0 ; I < str.Length ; i++ ) str [ i ] /// The actually code generated for this will be one instruction and will be inlined .
if ( ... ) { return ... ; } else { return ... ; } if ... : return ... else return ...
"// Constructs a Decimal from an integer value.//public Decimal ( int value ) { // JIT today ca n't inline methods that contains `` starg '' opcode . // For more details , see DevDiv Bugs 81184 : x86 JIT CQ : // Removing the inline striction of `` starg '' . int value_copy = value ; if ( value_copy > = 0 ) { flags = 0 ; } else { flags = SignMask ; value_copy = -value_copy ; } lo = value_copy ; mid = 0 ; hi = 0 ; }"
public class Result { public List < DBData > Data { get ; set ; } public int Total { get ; set ; } public bool Success { get ; set ; } } public class Result { public IEnumerable < DBData > Data { get ; set ; } public int Total { get ; set ; } public bool Success { get ; set ; } }
"private static readonly object LoadEvent = new object ( ) ; public event EventHandler < MyEventArgs > Load { add { Events.AddHandler ( LoadEvent , value ) ; } remove { Events.RemoveHandler ( LoadEvent , value ) ; } } protected virtual void OnLoad ( MyEventArg e ) { var evnt = ( EventHandler < MyEventArg > ) Events [ LoadEvent ] ; if ( evnt ! = null ) evnt ( this , e ) ; } public event EventHandler < MyEventArgs > Load ; protected virtual void OnLoad ( MyEvent e ) { if ( Load ! = null ) Load ( this , e ) ; }"
open System { 1I.. ( bigint ( Int32.MaxValue / 100 ) ) } | > Seq.sumlet mutable sum = 0Ifor i in 1I.. ( bigint ( Int32.MaxValue / 100 ) ) do sum < - sum + isumlet sum = ref 0Ifor i in 1I.. ( bigint ( Int32.MaxValue / 100 ) ) do sum : = ! sum + isum [ < EntryPoint > ] let main argv = let sw = new Stopwatch ( ) sw.Start ( ) printfn `` % A '' ( { 1I.. ( bigint ( Int32.MaxValue / 100 ) ) } | > Seq.sum ) sw.Stop ( ) printfn `` took % A '' sw.Elapsed Console.ReadKey ( ) | > ignore 0 static void Main ( string [ ] args ) { Stopwatch sw = new Stopwatch ( ) ; sw.Start ( ) ; BigInteger sum = new BigInteger ( 0 ) ; BigInteger max = new BigInteger ( Int32.MaxValue / 100 ) ; Console.WriteLine ( max ) ; for ( BigInteger i = new BigInteger ( 1 ) ; i < = max ; ++i ) { sum += i ; } sw.Stop ( ) ; Console.WriteLine ( sum ) ; Console.WriteLine ( sw.Elapsed ) ; Console.ReadKey ( ) ; }
"private string TempFolder = Path.GetTempPath ( ) ; private void EraseTempFiles ( ) { // For each temp file : foreach ( string tempFile in TempFiles ) { if ( File.Exists ( tempFile ) ) { File.Delete ( tempFile ) ; } } } [ 23:54:52 ] The process has exited . [ 23:54:52 ] Dump count not reached . AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler ( UnhandledExceptionHandler ) ; private void UnhandledExceptionHandler ( object sender , UnhandledExceptionEventArgs e ) { System.Windows.Forms.MessageBox.Show ( ( ( Exception ) e.ExceptionObject ) .Message ) ; throw new NotImplementedException ( ) ; }"
"var client = MySvcRef.MySvcClient ( ) ; var assistant = FormsAuthenticationAssistant ( ) ; var result = assistant.Execute < MySvcRef.UserClass [ ] > ( ( ) = > client.GetAllUsers ( out totalRecords , pageIndex , pageSize ) , client.InnerChannel ) ;"
public ModelClass { public string name { get ; set ; } public int num { get ; set ; } } // in some controllervar model = from s in _db.SomeClass select s ; string mostCommonName = ? ? ? ? ? ? ?
"{ id : 1 , bar : [ { id : 1 , baz : [ ] } , { id : 2 , baz : [ { id : 1 } ] } ] }"
public class Team { private int _teamNumber = 0 ; private int _score = 0 ; } public class Round { Team [ ] _teams = new Team [ 4 ] ; Question [ ] _questions = new Clue [ 30 ] ; bool _done = true ; } currentRound.Teams [ 0 ] .Score = 300 ; currentRound.Teams [ 1 ] .Score = 300 ; currentRound.Teams [ 2 ] .Score = 100 ; currentRound.Teams [ 3 ] .Score = 350 ;
"public enum RegistryRights { QueryValues = 1 , SetValue = 2 , CreateSubKey = 4 , EnumerateSubKeys = 8 , Notify = 16 , CreateLink = 32 , Delete = 65536 , ReadPermissions = 131072 , WriteKey = 131078 , ExecuteKey = 131097 , ReadKey = 131097 , ChangePermissions = 262144 , TakeOwnership = 524288 , FullControl = 983103 , } foreach ( System.Security.AccessControl.RegistryRights regItem in Enum.GetValues ( typeof ( System.Security.AccessControl.RegistryRights ) ) ) { System.Diagnostics.Debug.WriteLine ( regItem.ToString ( ) + `` `` + ( ( int ) regItem ) .ToString ( ) ) ; } QueryValues 1SetValue 2CreateSubKey 4EnumerateSubKeys 8Notify 16CreateLink 32Delete 65536ReadPermissions 131072WriteKey 131078ReadKey 131097ReadKey 131097ChangePermissions 262144TakeOwnership 524288FullControl 983103"
CustomClassName testClass = new CustomClassName ( ) ; ObservableCollection < CustomClassName > collection = new ObservableCollection < CustomClassName > ( ) ; testClass.SomeEvent += OnSomeEvent ; collection.add ( testClass ) ;
Convert.FromBase64String ( `` AIzaSyAcMvMr_bk91qRKZ5SGYEvF5HWjXVE7Xkk '' ) ;
"public async Task < ActionResult > Edit ( [ Bind ( Include = `` Account , Account.AccountModelId , Account.Name , Account.CreatedDate , SelectedPlayers '' ) ] AccountViewModel_Form vm ) { if ( ModelState.IsValid ) { if ( vm.SelectedPlayers ! = null ) { vm.Account.PlayerModels = db.PlayerModels.Where ( p = > p.AccountModel.AccountModelId == vm.Account.AccountModelId ) .ToList ( ) ; foreach ( var player in vm.Account.PlayerModels ) { player.AccountModel = null ; db.Entry ( player ) .State = EntityState.Modified ; } vm.Account.PlayerModels.Clear ( ) ; foreach ( var player_id in vm.SelectedPlayers ) { var player = db.PlayerModels.Where ( p = > p.PlayerModelId == player_id ) .First ( ) ; vm.Account.PlayerModels.Add ( player ) ; db.Entry ( player ) .State = EntityState.Modified ; } } db.Entry ( vm.Account ) .State = EntityState.Modified ; await db.SaveChangesAsync ( ) ; return RedirectToAction ( `` Index '' ) ; } return View ( vm ) ; } public class AccountViewModel_Form { public AccountModel Account { get ; set ; } public HashSet < Int32 > SelectedPlayers { get ; set ; } public virtual List < PlayerModel > PlayersList { get ; set ; } } public class AccountModel { public AccountModel ( ) { PlayerModels = new HashSet < PlayerModel > ( ) ; } public Int32 AccountModelId { get ; set ; } public string Name { get ; set ; } public DateTime CreatedDate { get ; set ; } public virtual ICollection < PlayerModel > PlayerModels { get ; set ; } } public class PlayerModel { public Int32 PlayerModelId { get ; set ; } public float Gold { get ; set ; } public string Name { get ; set ; } public virtual AccountModel AccountModel { get ; set ; } }"
"try { using ( Bitmap.Config config = Bitmap.Config.Rgb565 ) { return Bitmap.CreateBitmap ( blurredBitmap , width , height , config ) ; } } catch ( Java.Lang.Exception exception ) { Util.Log ( exception.ToString ( ) ) ; }"
public async Task < IObservable < Message > > GetMessages ( Guid chatId ) { var messages = ..Get chats ; return messages ; }
[ Authorize ] public ActionResult Index ( ) { return View ( ) ; }
"public HttpResponseMessage Post ( ) { var parsedContent=Request.Content.ReadAsMultipartAsync ( ) .Result ; foreach ( var item in parsedContent.Contents ) { switch ( item.Headers.ContentType.MediaType ) { case `` application/json '' : doSomething ( item ) ; break ; case `` text/plain '' : doSomethingElse ( item ) ; break ; case `` application/pdf '' : doAnotherThing ( item ) ; break ; case `` image/png '' : doYetAnotherThing ( item ) ; break ; } } //return status message based on results of previous calls ... } public static HttpRequestMessage CreateMixedPostRequest ( string url , IEnumerable < HttpContent > contentItems ) { var request=new HttpRequestMessage ( HttpMethod.Post , url ) ; var content=new MultipartContent ( `` mixed '' ) ; foreach ( var item in contentItems ) { content.Add ( item ) ; } request.Content=content ; return request ; }"
public static bool CameraP ( ) { return Microsoft.WindowsMobile.Status.SystemState.CameraPresent ; } public static bool CameraE ( ) { return Microsoft.WindowsMobile.Status.SystemState.CameraEnabled ; } public static bool CameraPresent1 ( ) { return Microsoft.WindowsMobile.Status.SystemState.CameraPresent & & Microsoft.WindowsMobile.Status.SystemState.CameraEnabled ; } public static bool CameraPresent2 ( ) { return CameraP ( ) & & CameraE ( ) ; }
interface IVehicle { void DoSth ( ) ; } class VW : IVehicle { public virtual void DoSth ( ) { ... } } class Golf : VW { } class Lupo : VW { public override void DoSth ( ) { base.DoSth ( ) ; ... } } List < VW > myCars = new List < VW > ( ) ; myCars.Add ( new Golf ( ) ) ; myCars.Add ( new Lupo ( ) ) ; if ( myCars is List < IVehicle > ) { foreach ( IVehicle v in myCars ) v.DoSth ( ) ; }
"< Button x : Name= '' CloseButton '' Click= '' OnCloseButtonClick '' / > private uint _i ; OnCloseButtonClick ( object sender , RoutedEventArgs e ) { DialogResult = true ; System.Diagnostics.Debug ( _i++ ) ; }"
"class Program { static void Main ( string [ ] args ) { Console.Write ( `` Enter in the value of the string : `` ) ; List < char > charList = Console.ReadLine ( ) .Trim ( ) .ToList ( ) ; int x = charList.LastIndexOf ( charList.Last ( char.IsLetter ) ) ; Console.WriteLine ( `` this is the last letter { 0 } '' , x ) ; Console.WriteLine ( `` This is the length of the string { 0 } '' , charList.Count ) ; Console.WriteLine ( `` We should have the last { 0 } characters removed '' , charList.Count - x ) ; for ( int i = x ; i < charList.Count ; i++ ) { charList.Remove ( charList [ i ] ) ; } foreach ( char c in charList ) { Console.Write ( c ) ; } Console.ReadLine ( ) ; } }"
public int GetDecimalPlaces ( decimal decimalNumber ) { try { int decimalPlaces = 1 ; double powers = 10.0 ; if ( decimalNumber > 0.0m ) { while ( ( ( double ) decimalNumber * powers ) % 1 ! = 0.0 ) { powers *= 10.0 ; ++decimalPlaces ; } } return decimalPlaces ; int test = GetDecimalPlaces ( 0.1m ) ; int test2 = GetDecimalPlaces ( 0.01m ) ; int test3 = GetDecimalPlaces ( 0.001m ) ; int test4 = GetDecimalPlaces ( 0.0000000001m ) ; int test5 = GetDecimalPlaces ( 0.00000000010000000001m ) ; int test6 = GetDecimalPlaces ( 0.0000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001m ) ;
private void BringSelectedItemIntoView ( LogEntry logEntry ) { if ( logEntry ! = null ) { ContentDataGrid.ScrollIntoView ( logEntry ) ; } }
< configuration > < system.web > < anonymousIdentification enabled= '' true '' / > < profile > < providers > < clear/ > < add name= '' AspNetSqlProfileProvider '' type= '' System.Web.Profile.SqlProfileProvider '' connectionStringName= '' ApplicationServices '' applicationName= '' / '' / > < /providers > < properties > < add name= '' Name '' type= '' String '' allowAnonymous= '' true '' / > < group name= '' Address '' > < add name= '' Street '' type= '' String '' / > < add name= '' City '' type= '' String '' allowAnonymous= '' true '' / > < add name= '' ZipCode '' type= '' String '' / > < add name= '' State '' type= '' String '' / > < /group > < /properties > < /profile > < /system.web > < /configuration >
string longestString ; string shortestString ; if ( string1.Length > string2.Length ) { longestString = string1 ; shortestString = string2 ; } else { longestString = string2 ; shortestString = string1 ; }
"public override bool Equals ( object obj ) { if ( obj == null || GetType ( ) ! = obj.GetType ( ) ) { return false ; } var other = ( MyType ) obj ; if ( other.Prop1 ! = Prop1 ) { return false ; } return true ; } public override int GetHashCode ( ) { int hash = -657803396 ; num ^= Prop1.GetHashCode ( ) ; return num ; } public override bool Equals ( object obj ) { return this.HashEqualsAndIsSameType ( obj ) ; } public static bool HashEquals ( this object source , object obj ) { if ( source ! = null & & obj ! = null ) { return source.GetHashCode ( ) == obj.GetHashCode ( ) ; } if ( source ! = null || obj ! = null ) { return false ; } return true ; } public static bool HashEqualsAndIsSameType < T > ( this T source , object obj ) { return ( obj == null || obj.GetType ( ) == typeof ( T ) ) & & source.HashEquals ( obj ) ; }"
"< CollectionViewSource x : Key= '' GroupsViewSource '' Source= '' { Binding Groups , UpdateSourceTrigger=PropertyChanged } '' > < CollectionViewSource.SortDescriptions > < scm : SortDescription PropertyName= '' GroupName '' / > < /CollectionViewSource.SortDescriptions > < /CollectionViewSource > < CollectionViewSource x : Key= '' ParentGroupsViewSource '' Source= '' { Binding ParentGroups } '' > < CollectionViewSource.SortDescriptions > < scm : SortDescription PropertyName= '' GroupName '' / > < /CollectionViewSource.SortDescriptions > < /CollectionViewSource > < DataGrid Grid.Row= '' 0 '' Grid.Column= '' 0 '' ItemsSource= '' { Binding Source= { StaticResource GroupsViewSource } } '' SelectedItem= '' { Binding SelectedGroup } '' x : Name= '' dataGrid '' AutoGenerateColumns= '' False '' CanUserAddRows= '' False '' SelectionMode= '' Single '' SelectionUnit= '' FullRow '' IsSynchronizedWithCurrentItem= '' True '' EnableRowVirtualization= '' False '' VirtualizingPanel.IsContainerVirtualizable= '' False '' RowEditEnding= '' DataGrid_RowEditEnding '' > < DataGrid.Resources > < Style TargetType= '' { x : Type DataGridCell } '' BasedOn= '' { StaticResource { x : Type DataGridCell } } '' > < EventSetter Event= '' PreviewMouseLeftButtonDown '' Handler= '' DataGridCell_PreviewMouseLeftButtonDown '' / > < /Style > < /DataGrid.Resources > < i : Interaction.Triggers > < i : EventTrigger EventName= '' RowEditEnding '' > < i : InvokeCommandAction Command= '' { Binding DataGridRowEditEndingCommand } '' / > < /i : EventTrigger > < /i : Interaction.Triggers > < DataGrid.Columns > < DataGridTemplateColumn Header= '' Group Name '' Width= '' * '' SortMemberPath= '' GroupName '' > < DataGridTemplateColumn.HeaderTemplate > < DataTemplate > < Grid IsHitTestVisible= '' True '' > < Grid.ColumnDefinitions > < ColumnDefinition/ > < ColumnDefinition/ > < /Grid.ColumnDefinitions > < TextBlock Grid.Column= '' 0 '' Text= '' { TemplateBinding Content } '' / > < ! -- FILTER EXPANDER -- > < Expander Grid.Column= '' 1 '' IsHitTestVisible= '' True '' VerticalAlignment= '' Top '' Margin= '' 30 0 0 0 '' ToolTip= '' Filter '' > < Border IsHitTestVisible= '' True '' BorderThickness= '' 1 '' Margin= '' -160 5 0 0 '' MinWidth= '' 200 '' Height= '' 31 '' > < TextBox Text= '' { Binding DataContext.SearchGroupName , ElementName=uc , UpdateSourceTrigger=PropertyChanged } '' TextChanged= '' SearchTextBox_TextChanged '' ToolTip= '' Enter Group Name to search '' FontSize= '' 16 '' BorderThickness= '' 1 '' / > < /Border > < /Expander > < /Grid > < /DataTemplate > < /DataGridTemplateColumn.HeaderTemplate > < DataGridTemplateColumn.CellTemplate > < DataTemplate > < TextBlock Text= '' { Binding GroupName } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < DataGridTemplateColumn.CellEditingTemplate > < DataTemplate > < TextBox Text= '' { Binding GroupName } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellEditingTemplate > < /DataGridTemplateColumn > < DataGridTemplateColumn Header= '' Parent Group '' Width= '' * '' SortMemberPath= '' ParentID '' > < DataGridTemplateColumn.CellTemplate > < DataTemplate > < TextBlock Text= '' { Binding ParentID , Converter= { StaticResource parentIDToGroupNameConverter } } '' / > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < DataGridTemplateColumn.CellEditingTemplate > < DataTemplate > < ComboBox ItemsSource= '' { Binding Source= { StaticResource ParentGroupsViewSource } } '' DisplayMemberPath= '' GroupName '' SelectedValue= '' { Binding ParentID , Converter= { StaticResource parentIDToGroupNameConverter } } '' SelectedValuePath= '' GroupName '' / > < /DataTemplate > < /DataGridTemplateColumn.CellEditingTemplate > < /DataGridTemplateColumn > < DataGridTemplateColumn Header= '' Edit '' Width= '' 50 '' IsReadOnly= '' True '' > < DataGridTemplateColumn.CellTemplate > < DataTemplate > < Grid > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Button x : Name= '' btnEdit '' Style= '' { StaticResource ResourceKey=EditButton } '' Height= '' 35 '' Width= '' 35 '' Visibility= '' { Binding DataContext.IsInEdit , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } , Converter= { StaticResource boolToVisibilityInverseConverter } } '' Click= '' EditButton_Click '' Command= '' { Binding DataContext.EditCommand , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } } '' / > < Button x : Name= '' btnSave '' Grid.Row= '' 1 '' Style= '' { StaticResource ResourceKey=SaveButton } '' Height= '' 35 '' Width= '' 35 '' Visibility= '' { Binding DataContext.IsInEdit , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } , Converter= { StaticResource boolToVisibilityConverter } } '' Click= '' SaveButton_Click '' Command= '' { Binding DataContext.SaveCommand , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } } '' / > < /Grid > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < /DataGridTemplateColumn > < DataGridTemplateColumn Header= '' Delete '' Width= '' 70 '' IsReadOnly= '' True '' > < DataGridTemplateColumn.CellTemplate > < DataTemplate > < Grid > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Button x : Name= '' btnDelete '' Style= '' { StaticResource ResourceKey=DeleteButton } '' Height= '' 35 '' Width= '' 35 '' Visibility= '' { Binding DataContext.IsInEdit , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } , Converter= { StaticResource boolToVisibilityInverseConverter } } '' Command= '' { Binding DataContext.DeleteCommand , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } } '' / > < Button x : Name= '' btnCancel '' Grid.Row= '' 1 '' Style= '' { StaticResource ResourceKey=CancelButton } '' Height= '' 35 '' Width= '' 35 '' Visibility= '' { Binding DataContext.IsInEdit , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } , Converter= { StaticResource boolToVisibilityConverter } } '' Command= '' { Binding DataContext.CancelCommand , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type UserControl } } } '' Click= '' CancelButton_Click '' / > < /Grid > < /DataTemplate > < /DataGridTemplateColumn.CellTemplate > < /DataGridTemplateColumn > < /DataGrid.Columns > < /DataGrid > public partial class ListView : UserControl { ERPLiteDBContext db = new ERPLiteDBContext ( ) ; public ListView ( ) { InitializeComponent ( ) ; } private void DataGridCell_PreviewMouseLeftButtonDown ( object sender , MouseButtonEventArgs e ) { DependencyObject dep = ( DependencyObject ) e.OriginalSource ; if ( dep == null ) return ; while ( dep ! = null & & ! ( dep is DataGridCell ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; if ( dep is DataGridCell ) { if ( ! ( ( DataGridCell ) dep ) .IsReadOnly ) { if ( ! ( ( DataGridCell ) dep ) .IsEditing ) e.Handled = true ; } } while ( dep ! = null & & ! ( dep is DataGridRow ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; if ( dep is DataGridRow ) { ( ( DataGridRow ) dep ) .IsSelected = true ; } while ( dep ! = null & & ! ( dep is DataGrid ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; if ( dep is DataGrid ) { ( ( DataGrid ) dep ) .Focus ( ) ; } } private void EditButton_Click ( object sender , RoutedEventArgs e ) { int rowIndex = 0 ; DependencyObject dep = ( DependencyObject ) e.OriginalSource ; while ( dep ! = null & & ! ( dep is DataGridCell ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; DataGridRow row = null ; if ( dep is DataGridCell ) { while ( dep ! = null & & ! ( dep is DataGridRow ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } row = ( DataGridRow ) dep ; rowIndex = FindRowIndex ( row ) ; } while ( dep ! = null & & ! ( dep is DataGrid ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; DataGrid dg = ( DataGrid ) dep ; dg.CurrentCell = new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ 0 ] ) ; dg.BeginEdit ( ) ; for ( int column = 0 ; column < = dg.Columns.Count - 1 ; column++ ) { if ( ! ( GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsReadOnly ) ) { GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsEditing = true ; } } var rows = GetDataGridRows ( dg ) ; foreach ( DataGridRow r in rows ) { if ( ! ( r.IsEditing ) ) { r.IsEnabled = false ; } } } private void SaveButton_Click ( object sender , RoutedEventArgs e ) { int rowIndex = 0 ; DependencyObject dep = ( DependencyObject ) e.OriginalSource ; while ( dep ! = null & & ! ( dep is DataGridCell ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; DataGridRow row = null ; if ( dep is DataGridCell ) { while ( dep ! = null & & ! ( dep is DataGridRow ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } row = ( DataGridRow ) dep ; rowIndex = FindRowIndex ( row ) ; } while ( dep ! = null & & ! ( dep is DataGrid ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; DataGrid dg = ( DataGrid ) dep ; dg.CommitEdit ( DataGridEditingUnit.Row , true ) ; for ( int column = 0 ; column < = dg.Columns.Count - 1 ; column++ ) { if ( ! ( GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsReadOnly ) ) { GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsEditing = false ; } } var rows = GetDataGridRows ( dg ) ; foreach ( DataGridRow r in rows ) { r.IsEnabled = true ; } } private void CancelButton_Click ( object sender , RoutedEventArgs e ) { DependencyObject dep = ( DependencyObject ) e.OriginalSource ; int rowIndex = 0 ; DataGridRow row = null ; while ( dep ! = null & & ! ( dep is DataGridRow ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } row = ( DataGridRow ) dep ; rowIndex = FindRowIndex ( row ) ; while ( dep ! = null & & ! ( dep is DataGrid ) ) { dep = VisualTreeHelper.GetParent ( dep ) ; } if ( dep == null ) return ; DataGrid dg = ( DataGrid ) dep ; var rows = GetDataGridRows ( dg ) ; dg.CancelEdit ( DataGridEditingUnit.Row ) ; for ( int column = 0 ; column < = dg.Columns.Count - 1 ; column++ ) { if ( ! ( GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsReadOnly ) ) { GetDataGridCell ( new DataGridCellInfo ( dg.Items [ rowIndex ] , dg.Columns [ column ] ) ) .IsEditing = false ; } } foreach ( DataGridRow r in rows ) { r.IsEnabled = true ; } } private void DataGrid_RowEditEnding ( object sender , DataGridRowEditEndingEventArgs e ) { DataGrid dg = ( DataGrid ) sender ; foreach ( DataGridRow row in GetDataGridRows ( dg ) ) { row.IsEnabled = true ; } } private void SearchTextBox_TextChanged ( object sender , TextChangedEventArgs e ) { if ( dataGrid.SelectedItem ! = null ) { dataGrid.ScrollIntoView ( dataGrid.SelectedItem ) ; } } public DataGridCell GetDataGridCell ( DataGridCellInfo cellInfo ) { var cellContent = cellInfo.Column.GetCellContent ( cellInfo.Item ) ; if ( cellContent ! = null ) return ( DataGridCell ) cellContent.Parent ; return null ; } private int FindRowIndex ( DataGridRow row ) { DataGrid dataGrid = ItemsControl.ItemsControlFromItemContainer ( row ) as DataGrid ; int index = dataGrid.ItemContainerGenerator.IndexFromContainer ( row ) ; return index ; } public IEnumerable < DataGridRow > GetDataGridRows ( DataGrid grid ) { var itemsSource = grid.ItemsSource as IEnumerable ; if ( null == itemsSource ) yield return null ; foreach ( var item in itemsSource ) { var row = grid.ItemContainerGenerator.ContainerFromItem ( item ) as DataGridRow ; if ( null ! = row ) yield return row ; } } } public class ListViewModel : ViewModelBase { ERPLiteDBContext db = new ERPLiteDBContext ( ) ; public ListViewModel ( ) { Groups = new ObservableCollection < Group > ( db.Groups ) ; ParentGroups = new ObservableCollection < Group > ( db.Groups ) ; EditCommand = new RelayCommand ( Edit ) ; SaveCommand = new RelayCommand ( Save ) ; DeleteCommand = new RelayCommand ( Delete ) ; CancelCommand = new RelayCommand ( Cancel ) ; DataGridRowEditEndingCommand = new RelayCommand ( DataGridRowEditEnding ) ; SearchGroupName = `` '' ; IsInEdit = false ; } public RelayCommand EditCommand { get ; set ; } public RelayCommand SaveCommand { get ; set ; } public RelayCommand DeleteCommand { get ; set ; } public RelayCommand CancelCommand { get ; set ; } public RelayCommand DataGridRowEditEndingCommand { get ; set ; } private string _searchGroupName ; public string SearchGroupName { get { return _searchGroupName ; } set { if ( value == null ) { SearchGroupName = `` '' ; } else { _searchGroupName = value ; } OnPropertyChanged ( `` SearchGroupName '' ) ; SelectedGroup = db.Groups.AsEnumerable ( ) .OrderBy ( x = > x.GroupName ) .Where ( x = > x.GroupName.StartsWith ( SearchGroupName , StringComparison.OrdinalIgnoreCase ) ) .FirstOrDefault ( ) ; if ( SelectedGroup == null ) { SelectedGroup = db.Groups.AsEnumerable ( ) .OrderBy ( x = > x.GroupName ) .Where ( x = > x.GroupName.Contains ( SearchGroupName , StringComparison.OrdinalIgnoreCase ) ) .FirstOrDefault ( ) ; } } } private ObservableCollection < Group > _groups ; public ObservableCollection < Group > Groups { get { return _groups ; } set { _groups = value ; OnPropertyChanged ( `` Groups '' ) ; } } private Group _selectedGroup ; public Group SelectedGroup { get { return _selectedGroup ; } set { _selectedGroup = value ; OnPropertyChanged ( `` SelectedGroup '' ) ; if ( value ! = null ) { ParentGroups = new ObservableCollection < Group > ( db.Groups.Where ( x = > x.GroupID ! = value.GroupID ) ) ; ParentGroups.Add ( new Group { GroupID = -1 , GroupName = `` Primary '' } ) ; } } } private ObservableCollection < Group > _parentGroups ; public ObservableCollection < Group > ParentGroups { get { return _parentGroups ; } set { _parentGroups = value ; OnPropertyChanged ( `` ParentGroups '' ) ; } } private Group _selectedParentGroup ; public Group SelectedParentGroup { get { return _selectedParentGroup ; } set { _selectedParentGroup = value ; OnPropertyChanged ( `` SelectedParentGroup '' ) ; } } private bool _isInEdit ; public bool IsInEdit { get { return _isInEdit ; } set { _isInEdit = value ; OnPropertyChanged ( `` IsInEdit '' ) ; } } private void Edit ( object obj ) { IsInEdit = true ; } private void Save ( object obj ) { IsInEdit = false ; SaveToDataBase ( ) ; } private void Delete ( object obj ) { } private void Cancel ( object obj ) { IsInEdit = false ; } private void DataGridRowEditEnding ( object obj ) { IsInEdit = false ; } public void SaveToDataBase ( ) { Group currentGroup = db.Groups.Where ( x = > x.GroupID == SelectedGroup.GroupID ) .FirstOrDefault ( ) ; if ( currentGroup ! = null ) { currentGroup.GroupName = SelectedGroup.GroupName ; if ( SelectedGroup.ParentID == -1 ) { currentGroup.ParentID = null ; } else { currentGroup.ParentID = SelectedGroup.ParentID ; } db.SaveChanges ( ) ; } } }"
"DateTime dt = new DateTime ( 2010 , 1 , 1 , 10 , 0 , 0 , 0 , DateTimeKind.Utc ) ; Console.WriteLine ( dt + `` - `` + dt.ToLocalTime ( ) ) ; dt = new DateTime ( 2010 , 7 , 1 , 10 , 0 , 0 , 0 , DateTimeKind.Utc ) ; Console.WriteLine ( dt + `` - `` + dt.ToLocalTime ( ) ) ; 01.01.2010 10:00:00 - 01.01.2010 14:00:0001.07.2010 10:00:00 - 01.07.2010 15:00:00"
class OverloadTest { void Main ( ) { CallWithDelegate ( SomeOverloadedMethod ) ; } delegate void SomeDelegateWithoutParameters ( ) ; delegate void SomeDelegateWithParameter ( int n ) ; void CallWithDelegate ( SomeDelegateWithoutParameters del ) { } void CallWithDelegate ( SomeDelegateWithParameter del ) { } void SomeOverloadedMethod ( ) { } void SomeOverloadedMethod ( int n ) { } }
"static void Main ( ) { var rows = new List < Job > ( ) ; using ( var reader = new StreamReader ( `` mydatafile.csv '' ) using ( var csv = new CsvReader ( reader ) ) { csv.Configuration.RegisterClassMap < JobMap > ( ) ; while ( csv.Read ( ) ) { var record = new Job { JobId = csv.GetField < int > ( `` Job ID '' ) , ItemCount = csv.GetField < int > ( `` Item Count '' ) } ; rows.Add ( record ) ; } } } public class Job { public int JobId { get ; set ; } public int ItemCount { get ; set ; } } public sealed class JobMap : ClassMap < Job > { Map ( m = > m.JobId ) ; Map ( m = > m.ItemCount ) .TypeConverterOption.NullValues ( `` N/A '' ) ; } CsvHelper.TypeConversion.TypeConverterException : 'The conversion can not be performed.Text : ' N/A'MemberType : TypeConverter : 'CsvHelper.TypeConversion.Int32Converter ''"
"private static void outputDictionaryContentsByDescending ( Dictionary < string , int > list ) { try { //Outputs entire list in descending order foreach ( KeyValuePair < string , int > pair in list.OrderByDescending ( key = > key.Value ) ) { Console.WriteLine ( `` { 0 } , { 1 } '' , pair.Key , pair.Value ) ; } } catch ( Exception e ) { MessageBox.Show ( e.Message , `` Error detected '' , MessageBoxButtons.OK , MessageBoxIcon.Error ) ; } }"
Category N : M ItemSalesPromotion N : M Item -- Query for search Items in Category screenSELECT * FROM ITEMS iLEFT JOIN ItemsCategories ic on ic.ItemId = i.ItemIdWHERE ic.CategoryId IS NULL OR ic.CategoryId < > @ CurrentCategoryId -- Query for search Items in SalesPromotion screenSELECT * FROM ITEMS iLEFT JOIN ItemsSalesPromotions isp on isp.ItemId= i.ItemIdWHERE isp.PromotionId IS NULL OR isp.PromotionId < > @ CurrentPromotionId
"class LoggingInterceptor : IInterceptor { private readonly ILogger _logger ; public LoggingInterceptor ( ILogger logger ) { if ( logger == null ) throw new ArgumentNullException ( `` logger '' ) ; _logger = logger ; } public void Intercept ( IInvocation invocation ) { // just a placeholder implementation , I 'm not actually planning to do this ; ) _logger.Info ( invocation.Method.Name ) ; invocation.Proceed ( ) ; } } container.Register ( Component.For < LoggingInterceptor > ( ) .LifeStyle.Transient ) ; container.Register ( Component.For < IEmployeeRepository > ( ) .ImplementedBy < EmployeeRepository > ( ) .Interceptors ( InterceptorReference.ForType < LoggingInterceptor > ( ) ) .First ) ;"
public async Task DoThingAsyc ( ) { // do some setup return await otherLib.DoThingAsync ( ) .ConfigureAwait ( false ) ; } // need to preserve my synchronization contextawait myLib.DoThingAync ( ) ; // do I have my context here or did my lib lose it ?
< DataTrigger Binding= '' { Binding Something } '' ValueIsNot= '' { x : Null } '' >
"public class FailFastRequestBehavior < TRequest , TResponse > : IPipelineBehavior < TRequest , TResponse > { private readonly IEnumerable < IValidator > _validators ; public FailFastRequestBehavior ( IEnumerable < IValidator < TRequest > > validators ) { _validators = validators ; } public Task < TResponse > Handle ( TRequest request , CancellationToken cancellationToken , RequestHandlerDelegate < TResponse > next ) { var failures = _validators .Select ( async v = > await v.ValidateAsync ( request ) ) .SelectMany ( result = > result.Result.Errors ) .Where ( f = > f ! = null ) ; return failures.Any ( ) ? Errors ( failures ) : next ( ) ; } ... } public class MyUseCase { public class Command : IRequest < CommandResponse > { ... } public class Validator : AbstractValidator < Command > { ... } public class Handler < T > : IRequestHandler < T , CommandResponse > { ... } } AssemblyScanner .FindValidatorsInAssembly ( Assembly.GetAssembly ( typeof ( MyUseCase ) ) ) .ForEach ( result = > services.AddScoped ( result.InterfaceType , result.ValidatorType ) ) ; public interface IOrder { string OrderId { get ; set ; } } public class IOrderValidator : AbstractValidator < IOrder > { public IOrderValidator ( ) { CascadeMode = CascadeMode.StopOnFirstFailure ; RuleFor ( x = > x.OrderId ) .Rule1 ( ) .Rule2 ( ) .Rule3 ( ) .RuleN ( ) } } public class MyUseCase { public class Command : IRequest < CommandResponse > : IOrder { ... } public class Validator : AbstractValidator < Command > { ... } public class Handler < T > : IRequestHandler < T , CommandResponse > { ... } }"
"public delegate TResult Func < in T , out TResult > ( T arg ) ; IEnumerable < TSource > Where < TSource > ( this IEnumerable < TSource > source , Func < TSource , bool > predicate ) ; // p is a XElement objectp= > p.Element ( `` firstname '' ) .Value.StartsWith ( `` Q '' )"
"private List < string > Getmp3sFromFolders ( string folder ) { List < string > fileArray = new List < string > ( ) ; try { DirectoryInfo dir = new DirectoryInfo ( folder ) ; var files = dir.EnumerateFiles ( `` *.mp3 '' ) ; foreach ( var file in files ) { fileArray.Add ( file.FullName ) ; Dispatcher.BeginInvoke ( _AddMP3ToListbox , file.Name ) ; } var directories = dir.EnumerateDirectories ( ) ; foreach ( var subdir in directories ) { fileArray.AddRange ( Getmp3sFromFolders ( subdir.FullName ) ) ; } // lblFolderSearching.Content = folder.ToString ( ) ; } catch { } return fileArray ; }"
Int32 [ ] tmpInt = new Int32 [ 32 ] ; long lStart = DateTime.Now.Ticks ; Thread t1 = new Thread ( new ThreadStart ( delegate ( ) { for ( Int32 i = 0 ; i < 100000000 ; i++ ) Interlocked.Increment ( ref tmpInt [ 5 ] ) ; } ) ) ; Thread t2 = new Thread ( new ThreadStart ( delegate ( ) { for ( Int32 i = 0 ; i < 100000000 ; i++ ) Interlocked.Increment ( ref tmpInt [ 20 ] ) ; } ) ) ; t1.Start ( ) ; t2.Start ( ) ; t1.Join ( ) ; t2.Join ( ) ; Console.WriteLine ( ( ( DateTime.Now.Ticks - lStart ) /10000 ) .ToString ( ) ) ;
"LogicalThreadContext.Properties [ `` MyProperty '' ] = 1 ; < log4net > < appender name= '' RollingLogFileAppenderSize '' type= '' log4net.Appender.RollingFileAppender '' > < file value= '' Logs\Log.log '' / > < lockingModel type= '' log4net.Appender.FileAppender+MinimalLock '' / > < appendToFile value= '' true '' / > < rollingStyle value= '' Composite '' / > < datePattern value= '' yyyyMMdd '' / > < maxSizeRollBackups value= '' 3 '' / > < maximumFileSize value= '' 5MB '' / > < layout type= '' log4net.Layout.PatternLayout '' > < conversionPattern value= '' % d [ % 2t ] [ % property ] % level % m % n '' / > < /layout > < /appender > < root > < level value= '' INFO '' / > < appender-ref ref= '' RollingLogFileAppenderSize '' / > < /root > < /log4net > 2015-11-03 16:24:36,313 [ 10 ] [ { MyProperty=1 , log4net : Identity= , log4net : UserName=User , log4net : HostName=User } ] INFO - Info conversionPattern value= '' % d [ % 2t ] [ % property { MyProperty } ] % level % m % n '' LogicalThreadContext.Properties.Remove ( `` log4net : UserName '' ) ;"
"foreach ( var key in a.Keys.Union ( b.Keys ) ) { dist += Math.Pow ( b [ key ] - a [ key ] , 2 ) ; }"
public interface IExecutionStrategy { Task < Result > ExecuteMessage ( Message message ) ; } public class WcfExecutionStrategy { public async Task < Result > ExecuteMessage ( Message message ) { using ( var client = new Client ( ) ) { return await client.RunMessageOnServer ( message ) ; } } } public class MessageExecutor { private readonly IExecutionStrategy _strategy ; public MessageExecutor ( IExecutionStrategy strategy ) { _strategy = strategy ; } public Task < Result > ExecuteMessage ( Message msg ) { // ... . // Do some common checks and code here // ... . var result = await _strategy.ExecuteMessage ( msg ) ; // ... . // Do some common cleanup and logging here // ... .. return result ; } } public class HttpclientExecutionStrategy { public async Task < Result > ExecuteMessage ( Message message ) { var request = CreateWebRequestmessage var responseStream = await Task.Run ( ( ) = > { var webResponse = ( HttpWebResponse ) webRequest.GetResponse ( ) ; return webResponse.GetResponseStream ( ) ; } return MessageStreamer.ReadResultFromStream ( responseStream ) ; } }
"private DriveService GetServiceA ( ) { var settings = SettingsProvider.GetInstance ( ) ; string keyFilePath = HostingEnvironment.MapPath ( `` ~/App_Data/keyfile.json '' ) ; var scopes = new string [ ] { DriveService.Scope.Drive } ; var stream = new IO.FileStream ( keyFilePath , IO.FileMode.Open , IO.FileAccess.Read ) ; var credential = GoogleCredential.FromStream ( stream ) ; credential = credential.CreateScoped ( scopes ) ; var service = new DriveService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` MyAppName '' } ) ; return service ; } FileList fileList = service.FileList ( ) .Execute ( ) ; private DriveService GetServiceB ( ) { var settings = SettingsProvider.GetInstance ( ) ; string keyFilePath = HostingEnvironment.MapPath ( `` ~/App_Data/keyfile.json '' ) ; string serviceAccountEmail = `` < account-email > @ < project-id > .iam.gserviceaccount.com '' ; var scopes = new string [ ] { DriveService.Scope.Drive } ; var stream = new IO.FileStream ( keyFilePath , IO.FileMode.Open , IO.FileAccess.Read ) ; var reader = new IO.StreamReader ( stream ) ; string jsonCreds = reader.ReadToEnd ( ) ; var o = JObject.Parse ( jsonCreds ) ; string privateKey = o [ `` private_key '' ] .ToString ( ) ; var credential = new ServiceAccountCredential ( new ServiceAccountCredential.Initializer ( serviceAccountEmail ) { Scopes = scopes , User = `` designated.user @ sameappsdomain.com '' } .FromPrivateKey ( privateKey ) ) ; var service = new DriveService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` MyAppName '' } ) ; return service ; } private DriveService GetServiceC ( ) { var settings = SettingsProvider.GetInstance ( ) ; string p12KeyFilePath = HostingEnvironment.MapPath ( `` ~/App_Data/keyfile.p12 '' ) ; string serviceAccountEmail = `` < account-email > @ < project-id > .iam.gserviceaccount.com '' ; var scopes = new string [ ] { DriveService.Scope.Drive } ; // Full access X509Certificate2 certificate = new X509Certificate2 ( p12KeyFilePath , `` notasecret '' , X509KeyStorageFlags.Exportable ) ; var credential = new ServiceAccountCredential ( new ServiceAccountCredential.Initializer ( serviceAccountEmail ) { Scopes = scopes , User = `` designated.user @ sameappsdomain.com '' } .FromCertificate ( certificate ) ) ; var service = new DriveService ( new BaseClientService.Initializer ( ) { HttpClientInitializer = credential , ApplicationName = `` MyAppName '' } ) ; return service ; } public class GoogleDrive { public DriveService Service { get ; private set ; } public GoogleDrive ( ) { this.Service = this.GetService ( ) ; } private DriveService GetService ( ) { // Code from either A , B or C } public FilesResource.ListRequest FileList ( ) { return this.Service.Files.List ( ) ; } } var service = new GoogleDrive ( ) ; FilesResource.ListRequest listRequest = service.FileList ( ) ; FileList fileList = listRequest.Execute ( ) ;"
String [ ] results = myRegEx.Matches ( myString ) [ 0 ] .Groups [ `` Group1 '' ] .Captures.Select ( x = > x.Value ) .ToArray < String > ( ) ;
"var list = new List < A > { new A { B = new List < B > { B1 , B2 , B3 , B4 } } new A { B = new List < B > { B3 , B4 , B5 , B6 } } new A { B = new List < B > { B2 , B3 , B4 , B5 , B6 } } } ;"
"string userInput = Console.ReadLine ( ) ; Dictionary < string , string > something = new Dictionary < string , string > ( ) ; something.Add ( `` MyKey '' , userInput ) ; string userInput = Console.ReadLine ( ) ; string userKey = Console.ReadLine ( ) ; Dictionary < string , string > something = new Dictionary < string , string > ( ) ; something.Add ( userKey , userInput ) ;"
"using System ; using System.IO ; using System.Linq ; public class Check { public static bool ExistsInArray ( int [ ] ints , int val ) { if ( ints.Contains ( val ) ) return true ; else return false ; } } if ( ints.Contains ( val ) ) return true ; else return false ; var lower = 0 ; var upper = ints.Length - 1 ; if ( k < ints [ lower ] || k > ints [ upper ] ) return false ; if ( k == ints [ lower ] ) return true ; if ( k == ints [ upper ] ) return true ; do { var middle = lower + ( upper - lower ) / 2 ; if ( ints [ middle ] == k ) return true ; if ( lower == upper ) return false ; if ( k < ints [ middle ] ) upper = Math.Max ( lower , middle - 1 ) ; else lower = Math.Min ( upper , middle + 1 ) ; } while ( true ) ;"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using Microsoft.AspNetCore.Builder ; using Microsoft.AspNetCore.Hosting ; using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace ProblemsV4 { public class Startup { public Startup ( IConfiguration configuration ) { Configuration = configuration ; } public IConfiguration Configuration { get ; } // This method gets called by the runtime . Use this method to add services to the container . public void ConfigureServices ( IServiceCollection services ) { services.AddMvc ( ) ; } // This method gets called by the runtime . Use this method to configure the HTTP request pipeline . public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; } else { app.UseExceptionHandler ( `` /Home/Error '' ) ; } app.UseStaticFiles ( ) ; app.UseMvc ( routes = > { routes.MapRoute ( name : `` default '' , template : `` { controller=Problem } / { action=Index } '' ) ; } ) ; } } }"
"< Window > < Grid > < Grid.RowDefinitions > < RowDefinition Height= '' 100 '' / > < RowDefinition/ > < Grid.RowDefinitions > < Label Grid.Row= '' 0 '' Content= '' top label '' / > < Viewport3D Grid.Row= '' 1 '' x : Name= '' vp3D '' > < Viewport3D.Camera > < PerspectiveCamera x : Name= '' pCamera '' LookDirection= '' 0 0 -1 '' UpDirection= '' 0 1 0 '' / > < /Viewport3D.Camera > < Viewport2DVisual3D x : Name= '' v2dv3d '' > < Viewport2DVisual3D.Geometry > < MeshGeometry3D x : Name= '' mg3d '' TextureCoordinates= '' 0,0 0,1 1,1 1,0 '' TriangleIndices= '' 0 1 2 0 2 3 '' / > < /Viewport2DVisual3D.Geometry > < Viewport2DVisual3D.Material > < DiffuseMaterial Viewport2DVisual3D.IsVisualHostMaterial= '' True '' Brush= '' White '' / > < /Viewport2DVisual3D.Material > < Image Height= '' { Binding ElementName=vp3D , Path=ActualHeight } '' Width= '' { Binding ElementName=vp3D , Path=ActualWidth } '' Stretch= '' Fill '' / > < /Viewport2DVisual3D > < ModelVisual3D > < ModelVisual3D.Content > < DirectionalLight Color= '' # FFFFFFFF '' Direction= '' 0,0 , -1 '' / > < /ModelVisual3D.Content > < /ModelVisual3D > < /Viewport3D > < /Grid > < /Window"
List < type1 > list1 = ... ; List < type2 > list2 = new List < type2 > ( ) ; foreach ( type1 l1 in list1 ) { list2.Add ( myTransformFunc ( l1 ) ) ; } list2 = [ myTransformFunc ( l1 ) for l1 in list1 ]
string str = `` abc '' ; if ( str.Equals ( `` abc '' ) ) if ( `` abc '' .Equals ( str ) )
< p > Blah bah < P > < STRONG > Some Text < /STRONG > < STRONG > < /p > < UL > < LI > < /STRONG > Item 1. < /LI > < LI > Item 2 < /LI > < LI > Item 3 < /LI > < /UL > HtmlDocument doc = new HtmlDocument ( ) ; doc.OptionOutputAsXml = true ; doc.OptionFixNestedTags = true ; // doc.OptionAutoCloseOnEnd = true ; doc.LoadHtml ( htmlText ) ;
"class Program { static void Main ( string [ ] args ) { CancellationTokenSource tokensource = new CancellationTokenSource ( ) ; CancellationToken token = tokensource.Token ; Task task = Task.Run ( ( ) = > { while ( ! token.IsCancellationRequested ) { Console.Write ( `` * '' ) ; Thread.Sleep ( 1000 ) ; } } , token ) .ContinueWith ( ( t ) = > { t.Exception.Handle ( ( e ) = > true ) ; Console.WriteLine ( `` You have canceled the task '' ) ; } , TaskContinuationOptions.OnlyOnCanceled ) ; Console.WriteLine ( `` Press any key to cancel '' ) ; Console.ReadLine ( ) ; tokensource.Cancel ( ) ; task.Wait ( ) ; } }"
"public abstract class BaseObject { private readonly string _name ; protected BaseObject ( string name ) { _name = name ; } public string Name { get { return _name ; } } } public class Swag : BaseObject { private readonly int _weight ; public Swag ( string name , int weight ) : base ( name ) { _weight = weight ; } public int Weight { get { return _weight ; } } } /* I like the flexibility of i.e . : Container < BankVault , Pickles > but if the container itself is carriable ( Swag ) , then its contents are by nature also carriable . */public class Container < TContainer , TContents > : BaseObject where TContainer : BaseObject where TContents : BaseObject , or Swag if TContainer : ( Swag or derived from Swag ) { ContainerContents < TContents > _contents ; public Container ( string name , int maxItems ) : base ( name ) { /* if ( TContainer is derived from Swag ) { TContents must be too } */ _contents = new ContainerContents < TContents > ( maxItems ) ; } } public class ContainerContents < T > : List < T > where T : BaseObject { int _maxItems ; public ContainerContents ( int maxItems ) { _maxItems = maxItems ; } }"
interface IMyInterface { void DoSomething ( ) ; } class MyClass : IMyInterface { public void DoSomething ( ) { } }
"1. int [ ] lcolSample = new int [ 10 ] { 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 3 , 4 } ; 2. for ( int lintCount1 = 0 ; lintCount1 < 10 ; lintCount1++ ) 3 . { 4 . Prog1 ( lintCount1 ) ; 5. int [ ] lcolSample1 = new int [ 10 ] { 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 3 , 4 } ; 6. lintCount3 = lintCount3 + 100 ; 7. lintCount1 = lintCount1 + 2 ; 8. lcolSample [ lintCount1-1 ] = lcolSample1 [ lintCount1 ] + 100 ; 9 . }"
[ ServiceContract ( CallbackContract = typeof ( IWCFServiceCallback ) ) ] public interface IWCFService { [ OperationContract ] void OpenWindow ( ) ; } public interface IWCFServiceCallback { [ OperationContract ( IsOneWay = true ) ] void ReturnValue ( object [ ] value ) ; }
"1 , Smith , 249.24 , 6/10/20102 , Johnson , 1332.23 , 6/11/20103 , Woods , 2214.22 , 6/11/20101 , Smith , 219.24 , 6/11/2010"
"public static string Join ( string separator , params object [ ] values ) { ... for ( int index = 1 ; index < values.Length ; ++index ) { sb.Append ( separator ) ; if ( values [ index ] ! = null ) // first if statement { string str2 = values [ index ] .ToString ( ) ; if ( str2 ! = null ) // second if statement sb.Append ( str2 ) ; } } ... }"
string blah = AppLib.Properties.Settings.Default.TemplatePath ; < connectionStrings > < add name= '' AppConnectionString '' connectionString= '' XXXX '' / > < add name= '' AppLib.Properties.Settings.AppConnectionString '' connectionString= '' XXXX '' / > < /connectionStrings > string blah = System.Configuration.ConfigurationManager.AppSettings [ `` TemplatePath_PDF '' ] ; < appSettings > < add key= '' TemplatePath_PDF '' value= '' xxx '' / > < /appSettings >
"var p = new Process ( ) { StartInfo = new ProcessStartInfo ( `` tail.exe '' ) { UseShellExecute = false , RedirectStandardOutput = true , Arguments = `` -f c : \\test.log '' } } ; p.Start ( ) ; // the following thread blocks until the process exitsTask.Factory.StartNew ( ( ) = > p.StandardOutput.Read ( ) ) ; // main thread wait until child process exitsp.WaitForExit ( ) ; p.OutputDataReceived += ( proc , data ) = > { if ( data ! = null & & data.Data ! = null ) { Console.WriteLine ( data.Data ) ; } } ; p.BeginOutputReadLine ( ) ;"
"double distance = 50 ; var result = stores.Where < MyStore > ( s = > Helper.GetDistance ( lat , lon , s.Lat , s.Lon ) < = distance ) .OrderBy ( s = > Helper.GetDistance ( lat , lon , s.Lat , s.Lon ) ) .ToList ( ) ;"
A a = new A ( ) ; A a = default ( A ) ;
"public Car With < TOut > ( Func < Car , TOut > lambda ) { lambda.Invoke ( this ) ; return this ; } var car = new Car ( ) .With ( x = > x.VehicleType = `` Sedan '' ) .With ( x = > x.Wheels = 4 ) .With ( x = > x.Colour = `` Pink '' ) .With ( x = > x.Model = `` fancyModelName '' ) .With ( x = > x.Year = `` 2007 '' ) .With ( x = > x.Engine = `` Large '' ) .With ( x = > x.WeightKg = 2105 ) .With ( x = > x.InvoiceNumber = `` 1234564 '' ) .With ( x = > x.ServicePlanActive = true ) .With ( x = > x.PassedQA = false ) .With ( x = > x.Vin = `` blabla '' ) ;"
"public class ExampleController : Controller { // this is syntactically not correct public IActionResult Collection ( ... . , string $ orderBy = null ) { ... } }"
var myString = `` my string `` ; myString.Trim ( ) ; // myString is now value `` my string '' var myString = `` my string `` ; myString = myString.Trim ( ) ; // myString is now value `` my string ''
"MyListView.ManipulationMode = ManipulationModes.TranslateX ; MyListView.ManipulationStarted += ( s , e ) = > x1 = ( int ) e.Position.X ; MyListView.ManipulationCompleted += ( s , e ) = > { x2 = ( int ) e.Position.X ; if ( x1 > x2 ) { DataController.PaneOpen ( false ) ; } ; if ( x1 < x2 ) { DataController.PaneOpen ( true ) ; } ; } ;"
"// original codeenum Fruit { Apple , Orange , Banana , } ... Fruit fruit = acquireFruit ( ) ; if ( fruit ! = Fruit.Orange & & fruit ! = Fruit.Banana ) coreFruit ( ) ; else pealFruit ( ) ; eatFruit ( ) ; // new codeenum Fruit { Apple , Orange , Banana , Grape , } // select fruit that needs to be coredselect Fruit from FruitBasket where FruitType not in ( Orange , Banana ) internal static class EnumSafetyExtensions { /* By adding enums to these methods , you certify that 1 . ) ALL the logic inside this assembly is aware of the * new enum value and 2 . ) ALL the new scenarios introduced with this new enum have been accounted for . * Adding new enums to an IsNot ( ) method without without carefully examining every reference will result in failure . */ public static bool IsNot ( this SalesOrderType target , params SalesOrderType [ ] setb ) { // SetA = known values - SetB List < SalesOrderType > seta = new List < SalesOrderType > { SalesOrderType.Allowance , SalesOrderType.NonAllowance , SalesOrderType.CompanyOrder , SalesOrderType.PersonalPurchase , SalesOrderType.Allotment , } ; setb.ForEach ( o = > seta.Remove ( o ) ) ; // if target is in SetA , target is not in SetB if ( seta.Contains ( target ) ) return true ; // if target is in SetB , target is not not in SetB if ( setb.Contains ( target ) ) return false ; // if the target is not in seta ( the considered values minus the query values ) and the target is n't in setb // ( the query values ) , then we 've got a problem . We 've encountered a value that this assembly does not support . throw new InvalidOperationException ( `` Unconsidered Value detected : SalesOrderType . '' + target.ToString ( ) ) ; } } bool needsCoring = fruit.IsNot ( Fruit.Orange , Fruit.Banana ) ; Fruit fruit = acquireFruit ( ) ; if ( fruit ! = Fruit.Orange & & fruit ! = Fruit.Banana ) coreFruit ( ) ; else if ( fruit == Fruit.Apple ) pealFruit ( ) ; else throw new NotSupportedException ( `` Unknown Fruit : '' + fruit ) eatFruit ( ) ;"
"public interface IJob { ILogger Logger { get ; set ; } } public class JobC : IJob { public ILogger Logger { get ; set ; } private ServiceA serviceA ; private ServiceB serviceB ; public JobC ( ServiceA serviceA , ServiceB serviceB ) { this.serviceA = serviceA ; this.serviceB = serviceB ; } } public class ServiceB { public ILogger Logger { get ; set ; } } public class ServiceA { public ILogger Logger { get ; set ; } } var childLogger = Logger.CreateChildLogger ( jobGroupName ) ; var job = windsorContainer.Resolve ( jobType ) ; job.Logger = childLogger ; public interface IService { } public class ServiceWithLogger : IService { public ILogger Logger { get ; set ; } } public class ServiceComposition { public ILogger Logger { get ; set ; } public IService Service { get ; set ; } public ServiceComposition ( IService service ) { Service = service ; } } public class NameService { public NameService ( string name ) { Name = name ; } public string Name { get ; set ; } } public class NameServiceConsumer { public NameService NameService { get ; set ; } } public class NameServiceConsumerComposition { public NameService NameService { get ; set ; } public NameServiceConsumer NameServiceConsumer { get ; set ; } } [ TestFixture ] public class Tests { [ Test ] public void GivenDynamicParamtersConfigurationContainerShouldPassLoggerDownTheTree ( ) { var container = new WindsorContainer ( ) ; container.AddFacility < LoggingFacility > ( ) ; container.Register ( Component.For < IService > ( ) .ImplementedBy < ServiceWithLogger > ( ) .LifestyleTransient ( ) , Component.For < ServiceComposition > ( ) .DynamicParameters ( ( k , d ) = > { d [ `` Logger '' ] = k.Resolve < ILogger > ( ) .CreateChildLogger ( d [ `` name '' ] .ToString ( ) ) ; } ) .LifestyleTransient ( ) ) ; var service = container.Resolve < ServiceComposition > ( new { name = `` my child '' } ) ; var childLogger = ( ( ServiceWithLogger ) service.Service ) .Logger ; Assert.IsTrue ( ( ( ConsoleLogger ) childLogger ) .Name.Contains ( `` my child '' ) ) ; } [ Test ] public void GivenDynamicParamtersConfigurationContainerShouldPassNameDownTheTree ( ) { var container = new WindsorContainer ( ) ; container.AddFacility < LoggingFacility > ( ) ; container.Register ( Component.For < NameService > ( ) .LifestyleTransient ( ) .DependsOn ( new { name = `` default '' } ) , Component.For < NameServiceConsumer > ( ) .LifestyleTransient ( ) , Component.For < NameServiceConsumerComposition > ( ) .DynamicParameters ( ( k , d ) = > { d [ `` nameService '' ] = k.Resolve < NameService > ( d [ `` nameParam '' ] ) ; } ) .LifestyleTransient ( ) ) ; var service = container.Resolve < NameServiceConsumerComposition > ( new { nameParam = `` my child '' } ) ; Console.WriteLine ( service.NameServiceConsumer.NameService.Name ) ; Assert.IsTrue ( service.NameServiceConsumer.NameService.Name.Contains ( `` my child '' ) ) ; } }"
"var db0010016 = _idb0010016Rep.GetAll ( ) .Where ( e = > e.ExecutionTime.TimeOfDay == viewmodel.ExecutionTime ) .FirstOrDefault ( ) ; var db0010016 = _idb0010016Rep.FindBy ( e = > DbFunctions.CreateTime ( e.ExecutionTime.Hour , e.ExecutionTime.Minute , e.ExecutionTime.Second ) == exetime ) .FirstOrDefault ( ) ; { `` Invalid parameter binding\r\nParameter name : ParameterName '' }"
using Str = System.String ; using IE < T > = System.Collections.Generic.IEnumerable < T > ; using IE = System.Collections.Generic.IEnumerable ;
private static MyObject _locker = new MyObject ( ) ; ... lock ( _locker ) { ... _locker = new MyObject ( ) ; ... }
// A function to match the delegatepublic static int DoSomething ( ) { Console.WriteLine ( `` i am called '' ) ; return 1 ; } // UsageAction action = ( ) = > DoSomething ( ) ; Func < int > func = ( ) = > DoSomething ( ) ; action ( ) ; func ( ) ;
"using System ; using System.Diagnostics ; using System.Linq ; namespace SortTest { class Program { static void Main ( string [ ] args ) { int arraySize = 10000 ; int loops = 500 ; double normalFloatTime = 0 ; double floatWithIDTime = 0 ; double structTime = 0 ; double arraySortOverloadTime = 0 ; bool floatWithIDCorrect = true ; bool structCorrect = true ; bool arraySortOverloadCorrect = true ; //just so we know the program is busy Console.WriteLine ( `` Sorting random arrays , this will take some time ... '' ) ; Random random = new Random ( ) ; Stopwatch sw = new Stopwatch ( ) ; for ( int i = 0 ; i < loops ; i++ ) { float [ ] normalFloatArray = new float [ arraySize ] ; SortTest [ ] floatWithIDArray = new SortTest [ arraySize ] ; SortStruct [ ] structArray = new SortStruct [ arraySize ] ; SortTest [ ] arraySortOverloadArray = new SortTest [ arraySize ] ; //fill the arrays for ( int j = 0 ; j < arraySize ; j++ ) { normalFloatArray [ j ] = NextFloat ( random ) ; floatWithIDArray [ j ] = new SortTest ( normalFloatArray [ j ] , j ) ; structArray [ j ] = new SortStruct ( normalFloatArray [ j ] , j ) ; arraySortOverloadArray [ j ] = new SortTest ( normalFloatArray [ j ] , j ) ; } //Reset stopwatch from any previous state sw.Reset ( ) ; sw.Start ( ) ; Array.Sort ( normalFloatArray ) ; sw.Stop ( ) ; normalFloatTime += sw.ElapsedTicks ; //Reset stopwatch from any previous state sw.Reset ( ) ; sw.Start ( ) ; Array.Sort ( floatWithIDArray ) ; sw.Stop ( ) ; floatWithIDTime += sw.ElapsedTicks ; //Reset stopwatch from any previous state sw.Reset ( ) ; sw.Start ( ) ; Array.Sort ( structArray ) ; sw.Stop ( ) ; structTime += sw.ElapsedTicks ; //Reset stopwatch from any previous state sw.Reset ( ) ; sw.Start ( ) ; Array.Sort ( arraySortOverloadArray.Select ( k = > k.ID ) .ToArray ( ) , arraySortOverloadArray ) ; sw.Stop ( ) ; arraySortOverloadTime += sw.ElapsedTicks ; for ( int k = 0 ; k < normalFloatArray.Length ; k++ ) { if ( normalFloatArray [ k ] ! = floatWithIDArray [ k ] .SomeFloat ) { floatWithIDCorrect = false ; } if ( normalFloatArray [ k ] ! = structArray [ k ] .SomeFloat ) { structCorrect = false ; } if ( normalFloatArray [ k ] ! = arraySortOverloadArray [ k ] .SomeFloat ) { arraySortOverloadCorrect = false ; } } } //calculate averages double normalFloatAverage = normalFloatTime / loops ; double floatWithIDAverage = floatWithIDTime / loops ; double structAverage = structTime / loops ; double arraySortOverloadAverage = arraySortOverloadTime / loops ; //print averages Console.WriteLine ( `` normalFloatAverage : { 0 } ticks.\nfloatWithIDAverage : { 1 } ticks.\nstructAverage : { 2 } ticks.\narraySortOverloadAverage : { 3 } ticks . `` , normalFloatAverage , floatWithIDAverage , structAverage , arraySortOverloadAverage ) ; Console.WriteLine ( `` floatWithIDArray has `` + ( floatWithIDCorrect ? `` '' : `` NOT `` ) + `` been sorted correctly atleast once . `` ) ; Console.WriteLine ( `` structArray has `` + ( structCorrect ? `` '' : `` NOT `` ) + `` been sorted correctly atleast once . `` ) ; Console.WriteLine ( `` arraySortOverloadArray has `` + ( arraySortOverloadCorrect ? `` '' : `` NOT `` ) + `` been sorted correctly atleast once . `` ) ; Console.WriteLine ( `` Press enter to exit . `` ) ; //pause so we can see the console Console.ReadLine ( ) ; } static float NextFloat ( Random random ) { double mantissa = ( random.NextDouble ( ) * 2.0 ) - 1.0 ; double exponent = Math.Pow ( 2.0 , random.Next ( -126 , 128 ) ) ; return ( float ) ( mantissa * exponent ) ; } } class SortTest : IComparable < SortTest > { public float SomeFloat ; public int ID ; public SortTest ( float f , int id ) { SomeFloat = f ; ID = id ; } public int CompareTo ( SortTest other ) { float f = other.SomeFloat ; if ( SomeFloat < f ) return -1 ; else if ( SomeFloat > f ) return 1 ; else return 0 ; } } struct SortStruct : IComparable < SortStruct > { public float SomeFloat ; public int ID ; public SortStruct ( float f , int id ) { SomeFloat = f ; ID = id ; } public int CompareTo ( SortStruct other ) { float f = other.SomeFloat ; if ( SomeFloat < f ) return -1 ; else if ( SomeFloat > f ) return 1 ; else return 0 ; } } } Sorting random arrays , this will take some time ... normalFloatAverage : 3840,998 ticks.floatWithIDAverage : 12850.672 ticks.Press enter to exit . Sorting random arrays , this will take some time ... normalFloatAverage : 3629.092 ticks.floatWithIDAverage : 12721.622 ticks.structAverage : 12870.584 ticks.Press enter to exit . Sorting random arrays , this will take some time ... normalFloatAverage : 3679.928 ticks.floatWithIDAverage : 14084.794 ticks.structAverage : 11725.364 ticks.arraySortOverloadAverage : 2186.3 ticks.floatWithIDArray has been sorted correctly atleast once.structArray has been sorted correctly atleast once.arraySortOverloadArray has NOT been sorted correctly atleast once.Press enter to exit . Sorting random arrays , this will take some time ... normalFloatAverage : 2384.578 ticks.floatWithIDAverage : 6405.866 ticks.structAverage : 4583.992 ticks.arraySortOverloadAverage : 4551.104 ticks.floatWithIDArray has been sorted correctly all the time.structArray has been sorted correctly all the time.arraySortOverloadArray has been sorted correctly all the time.Press enter to exit ."
byte [ ] postBuffer = Encoding.UTF8.GetBytes ( postStr ) ; byte [ ] postBuffer = new UTF8Encoding ( ) .GetBytes ( postStr ) ;
"using System ; using System.Runtime.InteropServices ; namespace CloseTask { class Program { [ DllImport ( `` user32.dll '' ) ] public static extern int FindWindow ( string lpClassName , string lpWindowName ) ; [ DllImport ( `` user32.dll '' ) ] public static extern int SendMessage ( int hWnd , uint Msg , int wParam , int lParam ) ; public const int WM_SYSCOMMAND = 0x0112 ; public const int SC_CLOSE = 0xF060 ; static void Main ( string [ ] args ) { closeWindow ( ) ; } private static void closeWindow ( ) { // retrieve the handler of the window of Word // Class name , Window Name int iHandle = FindWindow ( `` OpusApp '' , `` Document1 - Microsoft Word '' ) ; if ( iHandle > 0 ) { //close the window using API SendMessage ( iHandle , WM_SYSCOMMAND , SC_CLOSE , 0 ) ; } } } }"
"var test1 = a is byte & b ; // compilesvar test2 = a is byte ? & b ; // does not compilevar test3 = a is byte ? & & b ; // compiles unsafe private void Test < T > ( T a , bool b ) { var test1 = a is byte ? & b ; // does not compile var test2 = a is byte ? & & b ; // compiles var test3 = a is byte ? & b : & b ; // compiles } Syntax error , ' : ' expected var test1 = ( a is byte ) ? & b [ : missing part that it complains about ] ; var test2 = ( a is byte ? ) & & ( b ) ; var test1 = true & b ; var test2 = true & & b ; // orvar test1 = a is byte & b ; var test2 = a is byte & & b ; var test = ( a is byte ? ) & b ; // compiles var test1 = a is byte & b ; var test2 = a is byte ? & b ; var test3 = a is byte ? & & b ;"
"var vectorTest = new Vector2 ( 1 , 2 ) + new Vector2 ( 3 , 4 ) ; // Worksvar x = Expression.Parameter ( typeof ( Vector2 ) , `` x '' ) ; var test = System.Linq.Dynamic .DynamicExpression.ParseLambda ( new [ ] { x } , null , `` x = x + x '' ) ;"
"MAXDIFF 1 5 rouge vert bleu bleue orange NHunspell.Hunspell h = new NHunspell.Hunspell ( `` t.aff '' , `` dico.dic '' ) ; List < string > s = h.Suggest ( `` bleuue '' ) ; bleuebleu"
"Private WithEvents Processor As MyDefault.RuleEnginePublic Sub Execute ( StartDate As Date , EndDate As Date , SomeOtherParms As String ) Set Processor = New MyDefault.RuleEngineProcessor.Execute StartDate , EndDate , SomeOtherParmsEnd SubPrivate Sub Processor_OnProgressUpdate ( ByVal percentComplete As Double ) 'Show the progress on the UI to the userEnd Sub Private WithEvents Processor As MyDefault.RuleEnginePublic Sub Execute ( StartDate As Date , EndDate As Date , SomeOtherParms As String ) If CustomConditionIsMet Then 'In real-life we 'll look this info up from a table or config file Set Processor = CreateObject ( `` MyCustom.RuleEngine '' ) Else Set Processor = New MyDefault.RuleEngineEnd IfProcessor.Execute StartDate , EndDate , SomeOtherParmsEnd SubPrivate Sub Processor_OnProgressUpdate ( ByVal percentComplete As Double ) 'Show the progress on the UI to the userEnd Sub"
"[ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single , ConcurrencyMode = ConcurrencyMode.Multiple ) ] NetNamedPipeBinding binding = new NetNamedPipeBinding ( ) ; const int maxValue = 0x40000000 ; // 1GBbinding.MaxBufferSize = maxValue ; binding.MaxReceivedMessageSize = maxValue ; binding.ReaderQuotas.MaxArrayLength = maxValue ; binding.ReaderQuotas.MaxBytesPerRead = maxValue ; binding.ReaderQuotas.MaxStringContentLength = maxValue ; // receive timeout acts like a general timeoutbinding.ReceiveTimeout = TimeSpan.MaxValue ; binding.SendTimeout = TimeSpan.MaxValue ; ChannelFactory < IDatabaseSession > pipeFactory = new ChannelFactory < IDatabaseSession > ( binding , new EndpointAddress ( `` net.pipe : //localhost/DatabaseService '' ) ) ; IDatabaseSession dbSession = pipeFactory.CreateChannel ( )"
"public void DoSomething ( string parameterA , int parameterB ) { } var parameters = ( `` someValue '' , 5 ) ; DoSomething ( parameters ) ;"
"using System ; using System.Drawing ; using System.Drawing.Imaging ; using System.Windows.Forms ; using System.Runtime.InteropServices ; using System.Threading ; public partial class FormX : Form { private delegate void setImageCallback ( ) ; Bitmap _bmp ; Bitmap _bmp_draw ; bool _exit ; double _x ; IntPtr _ImgBuffer ; bool buffercopy ; bool copyBitmap ; bool refresh ; public FormX ( ) { InitializeComponent ( ) ; _x = 10.1 ; // set experimemental parameters buffercopy = false ; copyBitmap = false ; refresh = true ; } private void buttonStart_Click ( object sender , EventArgs e ) { Thread camThread = new Thread ( new ThreadStart ( Cycle ) ) ; camThread.Start ( ) ; } private void buttonStop_Click ( object sender , EventArgs e ) { _exit = true ; } private void Cycle ( ) { _ImgBuffer = IntPtr.Zero ; _exit = false ; IntPtr vcap = cvCreateCameraCapture ( 0 ) ; while ( ! _exit ) { IntPtr frame = cvQueryFrame ( vcap ) ; if ( buffercopy ) { UnmanageCopy ( frame ) ; _bmp = SharedBitmap ( _ImgBuffer ) ; } else { _bmp = SharedBitmap ( frame ) ; } // make calculations int N = 1000000 ; /*1000000*/ for ( int i = 0 ; i < N ; i++ ) _x = Math.Sin ( 0.999999 * _x ) ; ShowFrame ( ) ; } cvReleaseImage ( ref _ImgBuffer ) ; cvReleaseCapture ( ref vcap ) ; } private void ShowFrame ( ) { if ( pbCam.InvokeRequired ) { this.Invoke ( new setImageCallback ( ShowFrame ) ) ; } else { Pen RectangleDtPen = new Pen ( Color.Azure , 3 ) ; if ( copyBitmap ) { if ( _bmp_draw ! = null ) _bmp_draw.Dispose ( ) ; //_bmp_draw = new Bitmap ( _bmp ) ; // deep copy _bmp_draw = _bmp.Clone ( new Rectangle ( 0 , 0 , _bmp.Width , _bmp.Height ) , _bmp.PixelFormat ) ; } else { _bmp_draw = _bmp ; // add reference to the same object } Graphics g = Graphics.FromImage ( _bmp_draw ) ; String drawString = _x.ToString ( ) ; Font drawFont = new Font ( `` Arial '' , 56 ) ; SolidBrush drawBrush = new SolidBrush ( Color.Red ) ; PointF drawPoint = new PointF ( 10.0F , 10.0F ) ; g.DrawString ( drawString , drawFont , drawBrush , drawPoint ) ; drawPoint = new PointF ( 10.0F , 300.0F ) ; g.DrawString ( drawString , drawFont , drawBrush , drawPoint ) ; g.DrawRectangle ( RectangleDtPen , 12 , 12 , 200 , 400 ) ; g.Dispose ( ) ; pbCam.Image = _bmp_draw ; if ( refresh ) pbCam.Refresh ( ) ; } } public void UnmanageCopy ( IntPtr f ) { if ( _ImgBuffer == IntPtr.Zero ) _ImgBuffer = cvCloneImage ( f ) ; else cvCopy ( f , _ImgBuffer , IntPtr.Zero ) ; } // only works with 3 channel images from camera ! ( to keep code minimal ) public Bitmap SharedBitmap ( IntPtr ipl ) { // gets unmanaged data from pointer to IplImage : IntPtr scan0 ; int step ; Size size ; OpenCvCall.cvGetRawData ( ipl , out scan0 , out step , out size ) ; return new Bitmap ( size.Width , size.Height , step , PixelFormat.Format24bppRgb , scan0 ) ; } // based on older version of OpenCv . Change dll name if different [ DllImport ( `` opencv_highgui246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern IntPtr cvCreateCameraCapture ( int index ) ; [ DllImport ( `` opencv_highgui246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern void cvReleaseCapture ( ref IntPtr capture ) ; [ DllImport ( `` opencv_highgui246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern IntPtr cvQueryFrame ( IntPtr capture ) ; [ DllImport ( `` opencv_core246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern void cvGetRawData ( IntPtr arr , out IntPtr data , out int step , out Size roiSize ) ; [ DllImport ( `` opencv_core246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern void cvCopy ( IntPtr src , IntPtr dst , IntPtr mask ) ; [ DllImport ( `` opencv_core246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern IntPtr cvCloneImage ( IntPtr src ) ; [ DllImport ( `` opencv_core246 '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern void cvReleaseImage ( ref IntPtr image ) ; }"
"[ MarkupExtensionReturnType ( typeof ( Length ) ) ] public class LengthExtension : MarkupExtension { // adding the attribute like this compiles but does nothing . public LengthExtension ( [ TypeConverter ( typeof ( LengthTypeConverter ) ) ] Length value ) { this.Value = value ; } [ ConstructorArgument ( `` value '' ) ] public Length Value { get ; set ; } public override object ProvideValue ( IServiceProvider serviceProvider ) { return this.Value ; } } < Label Content= '' { units : Length 1 mm } '' / > public class LengthTypeConverter : TypeConverter { public override bool CanConvertFrom ( ITypeDescriptorContext context , Type sourceType ) { if ( sourceType == typeof ( string ) ) { return true ; } return base.CanConvertFrom ( context , sourceType ) ; } public override bool CanConvertTo ( ITypeDescriptorContext context , Type destinationType ) { if ( destinationType == typeof ( InstanceDescriptor ) || destinationType == typeof ( string ) ) { return true ; } return base.CanConvertTo ( context , destinationType ) ; } public override object ConvertFrom ( ITypeDescriptorContext context , CultureInfo culture , object value ) { var text = value as string ; if ( text ! = null ) { return Length.Parse ( text , culture ) ; } return base.ConvertFrom ( context , culture , value ) ; } public override object ConvertTo ( ITypeDescriptorContext context , CultureInfo culture , object value , Type destinationType ) { if ( value is Length & & destinationType ! = null ) { var length = ( Length ) value ; if ( destinationType == typeof ( string ) ) { return length.ToString ( culture ) ; } else if ( destinationType == typeof ( InstanceDescriptor ) ) { var factoryMethod = typeof ( Length ) .GetMethod ( nameof ( Length.FromMetres ) , BindingFlags.Public | BindingFlags.Static , null , new Type [ ] { typeof ( double ) } , null ) ; if ( factoryMethod ! = null ) { var args = new object [ ] { length.metres } ; return new InstanceDescriptor ( factoryMethod , args ) ; } } } return base.ConvertTo ( context , culture , value , destinationType ) ; } }"
if ( toDispose is IDisposable ) ( toDispose as IDisposable ) .Dispose ( ) ; IDisposable disposable = toDispose as IDisposable ; if ( disposable ! = null ) disposable.Dispose ( ) ;
"A1 G18A20 G50A51 G58 [ HttpGet ] [ SkipTokenAuthorization ] public HttpResponseMessage DownloadFundAllocationDetails ( int id , DateTime date ) { var ms = GetStrategy ( id ) ; DateTime d = new DateTime ( date.Year , date.Month , 1 ) .AddMonths ( 1 ) .AddDays ( -1 ) ; if ( ms.FIRM_ID ! = null ) { var firm = GetService < FIRM > ( ) .Get ( ms.FIRM_ID.Value ) ; IEnumerable < FIRMWIDE_MANAGER_ALLOCATION > allocationsGroup = null ; var allocationsGrouped = GetAllocationsGrouped ( EntityType.Firm , firm.ID , d ) ; string fileName = string.Format ( `` { 0 } as of { 1 } .xlsx '' , `` test '' , date.ToString ( `` MMM , yyyy '' ) ) ; byte [ ] fileContents ; var newFile = new FileInfo ( fileName ) ; using ( var package = new OfficeOpenXml.ExcelPackage ( newFile ) ) { FundAllocationsPrinter.Print ( package , allocationsGrouped ) ; fileContents = package.GetAsByteArray ( ) ; } var result = new HttpResponseMessage ( HttpStatusCode.OK ) { Content = new ByteArrayContent ( fileContents ) } ; result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue ( `` attachment '' ) { FileName = fileName } ; result.Content.Headers.ContentType = new MediaTypeHeaderValue ( `` application/vnd.openxmlformats-officedocument.spreadsheetml.sheet '' ) ; return result ; } return null ; # endregion } public class FundAllocationsPrinter { public static void Print ( ExcelPackage package , ILookup < string , FIRMWIDE_MANAGER_ALLOCATION > allocation ) { ExcelWorksheet wsSheet1 = package.Workbook.Worksheets.Add ( `` Sheet1 '' ) ; wsSheet1.Protection.IsProtected = false ; int count = 0 ; int previouscount = 0 ; var position = 2 ; int startposition = 1 ; IEnumerable < FIRMWIDE_MANAGER_ALLOCATION > allocationGroup = null ; foreach ( var ag in allocation ) { allocationGroup = ag.Select ( a = > a ) ; var allocationList = allocationGroup.ToList ( ) ; count = allocationList.Count ( ) ; using ( ExcelRange Rng = wsSheet1.Cells [ `` A '' + startposition + `` : G '' + ( count + previouscount + 1 ) ] ) { ExcelTableCollection tblcollection = wsSheet1.Tables ; ExcelTable table = tblcollection.Add ( Rng , `` tblAllocations '' + count ) ; //Set Columns position & name table.Columns [ 0 ] .Name = `` Manager Strategy '' ; table.Columns [ 1 ] .Name = `` Fund '' ; table.Columns [ 2 ] .Name = `` Portfolio '' ; table.Columns [ 3 ] .Name = `` As Of '' ; table.Columns [ 4 ] .Name = `` EMV ( USD ) '' ; table.Columns [ 5 ] .Name = `` Percent '' ; table.Columns [ 6 ] .Name = `` Allocations '' ; wsSheet1.Column ( 1 ) .Width = 45 ; wsSheet1.Column ( 2 ) .Width = 45 ; wsSheet1.Column ( 3 ) .Width = 55 ; wsSheet1.Column ( 4 ) .Width = 15 ; wsSheet1.Column ( 5 ) .Width = 25 ; wsSheet1.Column ( 6 ) .Width = 20 ; wsSheet1.Column ( 7 ) .Width = 20 ; // table.ShowHeader = true ; table.ShowFilter = true ; table.ShowTotal = true ; //Add TotalsRowFormula into Excel table Columns table.Columns [ 0 ] .TotalsRowLabel = `` Total Rows '' ; table.Columns [ 4 ] .TotalsRowFormula = `` SUBTOTAL ( 109 , [ EMV ( USD ) ] ) '' ; table.Columns [ 5 ] .TotalsRowFormula = `` SUBTOTAL ( 109 , [ Percent ] ) '' ; table.Columns [ 6 ] .TotalsRowFormula = `` SUBTOTAL ( 109 , Allocations ] ) '' ; table.TableStyle = TableStyles.Dark10 ; } foreach ( var ac in allocationGroup ) { wsSheet1.Cells [ `` A '' + position ] .Value = ac.MANAGER_STRATEGY_NAME ; wsSheet1.Cells [ `` B '' + position ] .Value = ac.MANAGER_FUND_NAME ; wsSheet1.Cells [ `` C '' + position ] .Value = ac.PRODUCT_NAME ; wsSheet1.Cells [ `` D '' + position ] .Value = ac.EVAL_DATE.ToString ( `` dd MMM , yyyy '' ) ; wsSheet1.Cells [ `` E '' + position ] .Value = ac.UsdEmv ; wsSheet1.Cells [ `` F '' + position ] .Value = Math.Round ( ac.GroupPercent,2 ) ; wsSheet1.Cells [ `` G '' + position ] .Value = Math.Round ( ac.WEIGHT_WITH_EQ,2 ) ; position++ ; } position++ ; previouscount = position ; // position = position + 1 ; startposition = position ; position++ ; } } }"
void ValidateBuyerRules ( ) { var nodesWithRules = ActiveNodes.Where ( x = > x.RuleClass.IsNotNullOrEmpty ( ) ) ; **if ( ! nodesWithRules.Any ( ) ) return ; ** foreach ( var ruleClass in nodesWithRules ) { // Do something here } }
"[ StructLayout ( LayoutKind.Sequential , Pack = 1 ) ] public readonly struct MyStruct { public readonly int Field1 ; public readonly int Field2 ; public MyStruct ( int field1 , int field2 ) = > ( Field1 , Field2 ) = ( field1 , field2 ) ; public ReadOnlySpan < byte > Span { get { // This code only works when MyStruct is not read only ReadOnlySpan < MyStruct > temp = MemoryMarshal.CreateReadOnlySpan ( ref this , 1 ) ; return MemoryMarshal.Cast < MyStruct , byte > ( temp ) ; } } }"
interface IFoo : IUnknown { HRESULT DoSomething ( ) ; } coclass Bar { [ default ] interface IFoo ; }
"public class WeakEventDelegate < TEventArgs > where TEventArgs : EventArgs { private readonly WeakReference handlerReference ; public WeakEventDelegate ( Action < object , TEventArgs > handler ) { handlerReference = new WeakReference ( handler ) ; } public void Handle ( object source , TEventArgs e ) { Action < object , TEventArgs > unwrappedHandler = ( Action < object , TEventArgs > ) handlerReference.Target ; if ( unwrappedHandler ! = null ) { unwrappedHandler.Invoke ( source , e ) ; } } } void subscribe ( ) { publisher.RaiseCustomEvent += this.HandleCustomEvent ; } private readonly WeakDelegate < CustomEventArgs > _customHandler = new WeakDelegate < CustomEventArgs > ( this.HandleCustomEvent ) ; void subscribe ( ) { publisher.RaiseCustomEvent += _customHandler.Handle ; }"
"// In Update ( ) .using ( AndroidJavaClass processingClass = new AndroidJavaClass ( `` com.postprocessing.PostprocessingJniHelper '' ) ) { if ( postprocessingClass == null ) { Debug.LogError ( `` Could not find the postprocessing class . `` ) ; return ; } short [ ] dataShortIn = ... ; // My original data . short [ ] dataShortOut = new short [ dataShortIn.Length ] ; Buffer.BlockCopy ( dataShortIn , 0 , dataShortOut , 0 , dataShortIn.Length ) ; bool success = postprocessingClass.CallStatic < bool > ( `` postprocess '' , TextureSize.x , TextureSize.y , dataShortIn , dataShortOut ) ; Debug.Log ( `` Processed successfully : `` + success ) ; } public final class PostprocessingJniHelper { // Load JNI methods static { System.loadLibrary ( `` postprocessing_jni '' ) ; } public static native boolean postprocess ( int width , int height , short [ ] inData , short [ ] outData ) ; private PostprocessingJniHelper ( ) { } } extern `` C '' { JNIEXPORT jboolean JNICALL POSTPROCESSING_JNI_METHOD_HELPER ( postprocess ) ( JNIEnv *env , jclass thiz , jint width , jint height , jshortArray inData , jshortArray outData ) { jshort *inPtr = env- > GetShortArrayElements ( inData , nullptr ) ; jshort *outPtr = env- > GetShortArrayElements ( outData , nullptr ) ; jboolean status = false ; if ( inPtr ! = nullptr & & outPtr ! = nullptr ) { status = PostprocessNative ( reinterpret_cast < const uint16_t * > ( inPtr ) , width , height , reinterpret_cast < uint16_t * > ( outPtr ) ) ; } env- > ReleaseShortArrayElements ( inData , inPtr , JNI_ABORT ) ; env- > ReleaseShortArrayElements ( outData , outPtr , 0 ) ; return status ; } bool PostprocessNative ( const uint16_t* data_in , int width , int height , uint16_t* data_out ) { for ( int y = 0 ; y < height ; ++y ) { for ( int x = 0 ; x < width ; ++x ) { data_out [ x + y * width ] = 10 ; } } // Changing the return value here is correctly reflected in C # . return false ; }"
IEnumerable < String > existedThings = from mdinfo in mdInfoTotal select mdinfo.ItemNo ; IEnumerable < String > thingsToSave = from item in lbXReadSuccess.Items.Cast < ListItem > ( ) select item.Value ; bool hasItemNo ; foreach ( string itemNo in existedThings ) hasItemNo= thingsToSave.Contains ( itemNo ) ;
if ( integerArray [ i ] == 68 ) break ;
foreach ( Project pr in solution.Projects ) { foreach ( Document doc in pr.Documents ) { // my js-file is not included } }
"public static IObservable < TResult > If < TSource , TResult > ( this IObservable < TSource > source , Func < TSource , bool > predicate , Func < TSource , IObservable < TResult > > thenSource , Func < TSource , IObservable < TResult > > elseSource ) { return source .SelectMany ( value = > predicate ( value ) ? thenSource ( value ) : elseSource ( value ) ) ; } numbers.If ( predicate : i = > i % 2 == 0 , thenSource : i = > Observable .Return ( i ) .Do ( _ = > { /* some side effects */ } ) .Delay ( TimeSpan.FromSeconds ( 1 ) ) , // some other operations elseSource : i = > Observable .Return ( i ) .Do ( _ = > { /* some other side effects */ } ) ) ;"
"public static DependencyProperty FooListProperty = DependencyProperty.Register ( `` FooList '' , typeof ( List < Problem > ) , typeof ( ProblemView ) ) ; public List < Problem > FooList { get { return ( List < Problem > ) GetValue ( FooListProperty ) ; } set { SetValue ( FooListProperty , value ) ; } } protected override void OnPropertyChanged ( DependencyPropertyChangedEventArgs e ) { base.OnPropertyChanged ( e ) ; if ( e.Property == FooListProperty ) { // Do something } } < local : ProblemView HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' FooList= '' { Binding list } '' / > public List < Problem > list ; private void Window_Loaded ( object sender , RoutedEventArgs e ) { // Some processes and it sets to list field list = a ; }"
"Id ( int ) , ParentId ( int ? ) , Name ( string ) Id : 1 , ParentId : null , Name : Pi Id : 2 , ParentId : null , Name : Gamma Id : 11 , ParentId : 1 , Name : Charlie Id : 12 , ParentId : 1 , Name : Beta Id : 21 , ParentId : 2 , Name : Alpha Id : 22 , ParentId : 2 , Name : Omega var sortedItems = itemsToSort.OrderBy ( x= > x.Name ) .GroupBy ( x= > x.ParentId ) ; var finalCollection = new List < Item > var parentGroup = sortedItems.Where ( si = > si.Key == null ) ; foreach ( parent in parentGroup ) { finalCollection.Add ( parent ) ; foreach ( child in sortedItems.Where ( si = > si.Key == parent.Id ) { finalCollection.Add ( child ) ; } } IEnumerable < Item >"
public List < Product1 > GetProduct1Data ( ) { // ... . context.Product1.Where ( .. ) .Tolist ( ) ; } public List < Product2 > GetProduct2Data ( ) { // ... . context.Product2.Where ( .. ) .Tolist ( ) ; } public List < Product3 > GetProduct3Data ( ) { // ... . context.Product3.Where ( .. ) .Tolist ( ) ; } public IHttpActionResult GetProducts ( ProductType product ) { /// ... . // Ii have to call repositories according to product parameter }
< a href= '' http : //www.someurl.com '' > link < /a > < a href= '' /http ... .. > link < /a > http : // /http : / ( single forward slash like its a path )
var accountModel = new AccountModel { Email = `` iDontExist @ gmail.com '' }
"public static void OnUnhandledException ( object sender , UnhandledExceptionEventArgs e ) { Logger.log ( `` UNHANDLED EXCEPTION : `` + e.ExceptionObject.ToString ( ) ) ; Mail.Sendmail ( `` ADMIN ALERT : `` + e.ExceptionObject.ToString ( ) ) ; Console.Read ( ) ; // Yes , this is an ungraceful trick , I confess . }"
class TestClass { public int ? value = 0 ; } TestClass test = new TestClass ( ) ; FieldInfo field = typeof ( TestClass ) .GetFields ( BindingFlags.Instance | BindingFlags.Public ) [ 0 ] ; Nullable.GetUnderlyingType ( field.FieldType ) .ToString ( )
using ( DataTable dt = Admin_User_Functions.Admin_KitItems_GetItems ( ) ) { ... }
"DOMAIN ( 1AC72358 ) : HANDLE ( Pinned ) :72c12f8 : Root : 174c5e20 ( System.Object [ ] ) - > 16533060 ( Project.ProjectParts.PartContainer ) - > 167fe554 ( Project.ProjectParts.Part.PartActivity ) - > 167d21d8 ( Project.ProjectParts.Sprites.Graphic ) - > 16770f28 ( System.Windows.Controls.Canvas ) - > 16770e1c ( System.Windows.Controls.Canvas ) - > 16770ee4 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 1680e778 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16770f9c ( System.Windows.Controls.Canvas ) - > 16819114 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819160 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16818df4 ( System.Windows.Controls.Canvas ) - > 16818e58 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819f10 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 168194c4 ( System.Windows.Controls.Canvas ) - > 16819528 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819574 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16819370 ( System.Windows.Controls.Image ) - > 21c82138 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 21c82184 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 168195dc ( System.Windows.Media.Imaging.WriteableBitmap ) - > 21c7ce2c ( System.Int32 [ ] ) DOMAIN ( 1AC72358 ) : HANDLE ( AsyncPinned ) :72c1dfc : Root : 166bae48 ( System.Threading.OverlappedData ) - > 1654d448 ( System.Threading.IOCompletionCallback ) - > 1654c29c ( System.Net.Sockets.SocketAsyncEventArgs ) - > 1654bad4 ( System.Net.Sockets.Socket+StaticConnectAsyncState ) - > 1654ba40 ( System.Net.Sockets.SocketAsyncEventArgs ) - > 1654b684 ( System.ServiceModel.Channels.SocketConnectionInitiator+ConnectAsyncResult ) - > 1654b414 ( System.ServiceModel.Channels.ConnectionPoolHelper+EstablishConnectionAsyncResult ) - > 1654b3b0 ( System.ServiceModel.Channels.ClientFramingDuplexSessionChannel+OpenAsyncResult ) - > 1654b380 ( System.ServiceModel.Channels.CommunicationObject+OpenAsyncResult ) - > 1654b330 ( System.ServiceModel.Channels.CommunicationObject+OpenAsyncResult ) - > 1654b0f4 ( System.ServiceModel.Channels.ServiceChannel+SendAsyncResult ) - > 1654b070 ( System.ServiceModel.ClientBase ` 1+AsyncOperationContext [ [ Cassandra.Common.WCF.IAsyncWcfRequestProcessor , Cassandra.Common.Silverlight ] ] ) - > 1654b05c ( System.ComponentModel.AsyncOperation ) - > 1654b04c ( Project.Common.IoC.InvokeAsyncCompletedEventRequestsArgs ) - > 1654afec ( System.Action ` 1 [ [ Project.Common.IoC.ProcessRequestsAsyncCompletedArgsEx , Project.Common.SL ] ] ) - > 1654afc8 ( Project.Common.IoC.AsyncRequestDispatcherEx+ < > c__DisplayClass1 ) - > 1654afa0 ( Project.Common.IoC.NetResponseReceiver ) - > 1653408c ( System.Action ` 2 [ [ Cassandra.Common.ExceptionInfo , Cassandra.Common.Silverlight ] , [ Cassandra.Common.ExceptionType , Cassandra.Common.Silverlight ] ] ) - > 16533ffc ( Project.ProjectParts.ILE.Services.EngineProxyService+ < > c__DisplayClass5 ) - > 16533fdc ( System.Action ` 1 [ [ Cassandra.Common.ReceivedResponses , Cassandra.Common.Silverlight ] ] ) - > 16533fbc ( Project.ProjectParts.ILE.Services.IEngineProxyExtensions+ < > c__DisplayClass1 ` 2 [ [ Project.Services.RequestsAndResponses.ListMediaServersByTokenRequest , Project.Services.RequestsAndResponses.Silverlight ] , [ Project.Services.RequestsAndResponses.ListInstitutionMediaServersResponse , Project.Services.RequestsAndResponses.Silverlight ] ] ) - > 16533f9c ( System.Action ` 1 [ [ Project.Services.RequestsAndResponses.ListInstitutionMediaServersResponse , Project.Services.RequestsAndResponses.Silverlight ] ] ) - > 1650a2a0 ( Project.ProjectParts.ILE.MainPage ) - > 1674ea0c ( Project.ProjectParts.ActivityTimer ) - > 165330a4 ( Project.ProjectParts.PauseManager ) - > 165330bc ( System.Collections.Generic.List ` 1 [ [ Project.ProjectParts.IPausable , ActivityFramework ] ] ) - > 166a8610 ( System.Object [ ] ) - > 167ca858 ( Project.ProjectParts.ActivityTimer ) - > 167ca838 ( Project.ProjectParts.ActivityTimerEventHandler ) - > 16533060 ( Project.ProjectParts.PartContainer ) - > 167fe554 ( Project.ProjectParts.Part.PartActivity ) - > 167d21d8 ( Project.ProjectParts.Sprites.Graphic ) - > 16770f28 ( System.Windows.Controls.Canvas ) - > 16770e1c ( System.Windows.Controls.Canvas ) - > 16770ee4 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 1680e778 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16770f9c ( System.Windows.Controls.Canvas ) - > 16819114 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819160 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16818df4 ( System.Windows.Controls.Canvas ) - > 16818e58 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819f10 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 168194c4 ( System.Windows.Controls.Canvas ) - > 16819528 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 16819574 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 16819370 ( System.Windows.Controls.Image ) - > 21c82138 ( System.Collections.Generic.Dictionary ` 2 [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] ) - > 21c82184 ( System.Collections.Generic.Dictionary ` 2+Entry [ [ MS.Internal.IManagedPeerBase , System.Windows ] , [ System.Object , mscorlib ] ] [ ] ) - > 168195dc ( System.Windows.Media.Imaging.WriteableBitmap ) - > 21c7ce2c ( System.Int32 [ ] ) DOMAIN ( 1AC72358 ) : HANDLE ( Pinned ) :72c2b18 : Root : 21c7ce2c ( System.Int32 [ ] )"
"C : \Users\user\Downloads\VMware-vSphereSDK-6.5.0-4571253\SDK\vsphere-ws\dotnet\bin > build.bat 1 file ( s ) copied.Fixing HttpNfcLeaseInfo type , adding missing leaseState propertyGenerating VimService.csMicrosoft ( R ) Service Model Metadata Tool [ Microsoft ( R ) Windows ( R ) Communication Foundation , Version 4.6.1055.0 ] Copyright ( c ) Microsoft Corporation . All rights reserved.Generating files ... C : \Users\user\Downloads\VMware-vSphereSDK-6.5.0-4571253\SDK\vsphere-ws\dotnet\bin\VimService.csCompiling original VimService.dllMicrosoft ( R ) Service Model Metadata Tool [ Microsoft ( R ) Windows ( R ) Communication Foundation , Version 4.6.1055.0 ] Copyright ( c ) Microsoft Corporation . All rights reserved.Generating XML serializers ... C : \Users\user\Downloads\VMware-vSphereSDK-6.5.0-4571253\SDK\vsphere-ws\dotnet\bin\VimServiceSerializers.cs 1 file ( s ) copied.Optimizing VimService.cs by stripping serializer hint attributes.Compiling optimized VimService.dllFAILED echo Compiling optimized VimService.dllcsc /t : library /out : Vim25Service.dll VimService.cs VimServiceSerializers.cs > nul || goto ERROR C : \Users\user\Downloads\VMware-vSphereSDK-6.5.0-4571253\SDK\vsphere-ws\dotnet\bin > csc /t : library /out : Vim25Service.dll VimService.cs VimServiceSerializers.csMicrosoft ( R ) Visual C # Compiler version 1.3.1.60616Copyright ( C ) Microsoft Corporation . All rights reserved.VimServiceSerializers.cs ( 32548,98 ) : error CS8078 : An expression is too long or complex to compile C : \Users\user\Downloads\VMware-vSphereSDK-6.5.0-4571253\SDK\vsphere-ws\dotnet\bin > csc /t : library /out : Vim25Service.dll VimService.cs VimServiceSerializers.csMicrosoft ( R ) Visual C # Compiler version 2.0.0.61213Copyright ( C ) Microsoft Corporation . All rights reserved.VimServiceSerializers.cs ( 31372,109 ) : error CS8078 : An expression is too long or complex to compile"
class CrmToRealTypeConverter : IConverter { # region IConverter Members public object Convert < T > ( T obj ) { return Convert ( obj ) ; } # endregion private DateTime ? Convert ( CrmDateTime obj ) { return obj.IsNull == false ? ( DateTime ? ) obj.UserTime : null ; } private int ? Convert ( CrmNumber obj ) { return obj.IsNull == false ? ( int ? ) obj.Value : null ; } private decimal ? Convert ( CrmDecimal obj ) { return obj.IsNull == false ? ( decimal ? ) obj.Value : null ; } private double ? Convert ( CrmDouble obj ) { return obj.IsNull == false ? ( double ? ) obj.Value : null ; } private float ? Convert ( CrmFloat obj ) { return obj.IsNull == false ? ( float ? ) obj.Value : null ; } private decimal ? Convert ( CrmMoney obj ) { return obj.IsNull == false ? ( decimal ? ) obj.Value : null ; } private bool ? Convert ( CrmBoolean obj ) { return obj.IsNull == false ? ( bool ? ) obj.Value : null ; } }
"public class Person { public string FirstName ; public string LastName ; public int Age ; public int Grade ; } { `` Robby '' , `` Goki '' , 12 , 8 } { `` Bobby '' , `` Goki '' , 10 , 8 } { `` Sobby '' , `` Goki '' , 10 , 8 } { null , `` Goki '' , -1 , 8 } Person unionMan = new Person ( ) ; if ( people.Select ( p = > p.FirstName ) .Distinct ( ) .Count ( ) == 1 ) unionMan.FirstName = people [ 0 ] .FirstName ; if ( people.Select ( p = > p.LastName ) .Distinct ( ) .Count ( ) == 1 ) unionMan.LastName = people [ 0 ] .LastName ; if ( people.Select ( p = > p.Age ) .Distinct ( ) .Count ( ) == 1 ) unionMan.Age = people [ 0 ] .Age ; if ( people.Select ( p = > p.Grade ) .Distinct ( ) .Count ( ) == 1 ) unionMan.Grade = people [ 0 ] .Grade ; string [ ] members = new string [ ] { `` FirstName '' , `` LastName '' , `` Age '' , `` Grade '' } ; foreach ( string member in members ) { if ( people.Select ( p = > p.**member** ) .Distinct ( ) .Count ( ) == 1 ) unionMan . **member** = people [ 0 ] . **member** ; }"
"void PopulateQueries ( XDocument doc , TreeView tree ) { foreach ( TreeNode node in tree.Nodes ) { var taskName = node.Text ; var queriesNode = node.Nodes.Add ( `` Queries '' ) ; var queries = doc.Descendants ( `` Tasks '' ) .Descendants ( `` Task '' ) .Where ( d = > d.Attribute ( `` name '' ) .Value == taskName ) .Descendants ( `` Queries '' ) .Descendants ( `` add '' ) .ToList ( ) ; for ( int i = 0 ; i < queries.Count ; i++ ) { queriesNode.Nodes.Add ( queries [ i ] .Attribute ( `` Query '' ) .Value , `` query '' + i ) ; } } } void treeView1_NodeMouseClick ( object sender , TreeNodeMouseClickEventArgs e ) { textBoxRaw.Text = string.Empty ; if ( e.Node.Text.StartsWith ( `` query '' ) ) { textBoxRaw.Text = e.Node.Name ; } }"
"[ OperationBehavior ( TransactionScopeRequired = true ) ] public async Task CallAsync ( ) { using ( var scope = new TransactionScope ( TransactionScopeAsyncFlowOption.Enabled ) ) { await _service.WriteAsync ( ) ; await _service.WriteAsync ( ) ; scope.Complete ( ) ; } } [ OperationBehavior ( TransactionScopeRequired = true ) ] public async Task CallAsync ( ) { await WriteAsync ( ) ; // Transaction.Current is now null await WriteAsync ( ) ; } public class TransactionScopeMessageInspector : IDispatchMessageInspector { public object AfterReceiveRequest ( ref Message request , IClientChannel channel , InstanceContext instanceContext ) { var transactionMessage = ( TransactionMessageProperty ) OperationContext.Current.IncomingMessageProperties [ `` TransactionMessageProperty '' ] ; var scope = new TransactionScope ( transactionMessage.Transaction , TransactionScopeAsyncFlowOption.Enabled ) ; return scope ; } public void BeforeSendReply ( ref Message reply , object correlationState ) { var transaction = correlationState as TransactionScope ; if ( transaction ! = null ) { transaction.Complete ( ) ; transaction.Dispose ( ) ; } } } await _service_WriteAsync ( ) ; public async Task CallAsync ( ) { var scope = new TransactionScope ( TransactionScopeAsyncFlowOption.Enabled ) ; await _service.WriteAsync ( ) ; await _service.WriteAsync ( ) ; scope.Complete ( ) ; } [ OperationContract , TransactionFlow ( TransactionFlowOption.Mandatory ) ] Task WriteAsync ( ) ;"
"class A { // May be set by a code or by an user . public string Property { set { PropertyChanged ( this , EventArgs.Empty ) ; } } public EventHandler PropertyChanged ; } class B { private A _a ; public B ( A a ) { _a = a ; _a.PropertyChanged += Handler ; } void Handler ( object s , EventArgs e ) { // Who changed the Property ? } public void MakeProblem ( ) { _a.Property = `` make a problem '' ; } } bool _dontDoThis ; void Handler ( object s , EventArgs e ) { if ( _dontDoThis ) return ; // Do this ! } public void MakeProblem ( ) { _dontDoThis = true ; _a.Property = `` make a problem '' ; _dontDoThis = false ; }"
public class AList < T > where T : A { void DoStuff ( T foo ) { } void CallDoStuff ( ) { DoStuff ( new A ( ) ) ; // ERROR : Can not convert A to T } } public class A { }
"CancellationTokenSource tokenSource2 = new CancellationTokenSource ( ) ; CancellationToken token2 = tokenSource2.Token ; Task task2 = new Task ( ( ) = > { for ( int i = 0 ; i < int.MaxValue ; i++ ) { token2.ThrowIfCancellationRequested ( ) ; Thread.Sleep ( 100 ) ; Console.WriteLine ( `` Task 2 - Int value { 0 } '' , i ) ; } } , token2 ) ; task2.Start ( ) ; Console.WriteLine ( `` Press any key to cancel the task '' ) ; Console.ReadLine ( ) ; tokenSource2.Cancel ( ) ; Console.WriteLine ( `` Task 2 cancelled ? { 0 } '' , task2.IsCanceled ) ;"
"const int num = 100000 ; const int dist = 10 ; var events = new List < DateTimeOffset > ( ) ; var curr = DateTimeOffset.Now ; var gap = new Random ( ) ; var time = new HistoricalScheduler ( curr ) ; for ( int i = 0 ; i < num ; i++ ) { events.Add ( curr ) ; curr += TimeSpan.FromMilliseconds ( gap.Next ( dist ) ) ; } var stream = Observable.Generate < int , DateTimeOffset > ( 0 , s = > s < events.Count , s = > s + 1 , s = > events [ s ] , s = > events [ s ] , time ) ; stream.Buffer ( TimeSpan.FromMilliseconds ( num ) , time ) .Subscribe ( l = > Console.WriteLine ( time.Now + `` : `` + l.Count ) ) ; time.AdvanceBy ( TimeSpan.FromMilliseconds ( num * dist ) ) ; mscorlib.dll ! System.Threading.Interlocked.Exchange < System.IDisposable > ( ref System.IDisposable location1 , System.IDisposable value ) + 0x3d bytes System.Reactive.Core.dll ! System.Reactive.Disposables.SingleAssignmentDisposable.Dispose ( ) + 0x37 bytes System.Reactive.Core.dll ! System.Reactive.Concurrency.ScheduledItem < System.DateTimeOffset > .Cancel ( ) + 0x23 bytes ... System.Reactive.Core.dll ! System.Reactive.Disposables.AnonymousDisposable.Dispose ( ) + 0x4d bytes System.Reactive.Core.dll ! System.Reactive.Disposables.SingleAssignmentDisposable.Dispose ( ) + 0x4f bytes System.Reactive.Core.dll ! System.Reactive.Concurrency.ScheduledItem < System.DateTimeOffset > .Cancel ( ) + 0x23 bytes ..."
"Func < String , int , bool > predicate = ( str , index ) = > str.Length == index ; String [ ] words = { `` orange '' , `` apple '' , `` Article '' , `` elephant '' , `` star '' , `` and '' } ; IEnumerable < String > aWords = words.Where ( predicate ) .Select ( str = > str ) ; foreach ( String word in aWords ) Console.WriteLine ( word ) ; Select ( str = > str ) IEnumerable < String > aWords = words.Where ( predicate ) ;"
public class FarmDbContext : DbContext { public FarmDbContext ( DbContextOptions < FarmDbContext > options ) : base ( options ) { } public DbSet < Farm > Farms { get ; set ; } //i want to have one instance of farm public DbSet < Machine > Machines { get ; set ; } public DbSet < Stable > Stables { get ; set ; } public DbSet < Worker > Workers { get ; set ; } public DbSet < Cultivation > Cultivations { get ; set ; } } public class Farm { [ Key ] public int Id { get ; set ; } public string Name { get ; set ; } public virtual List < Stable > Stables { get ; set ; } public virtual List < Machine > Machines { get ; set ; } public virtual List < Worker > Workers { get ; set ; } public virtual List < Cultivation > Cultivations { get ; set ; } public Farm GetFarm ( ) = > farm ; private Farm farm ; private Farm ( ) { } } private readonly FarmDbContext _context ; public FarmController ( FarmDbContext context ) = > _context = context ; // GET : api/Farm [ HttpGet ] public IActionResult GetFarms ( ) = > Ok ( _context.Farms.SingleOrDefault ( ) ) ;
class Program { static void Main ( string [ ] args ) { Task.Factory.StartNew ( ( ) = > Console.WriteLine ( SingletonClass.Instance.GetHashCode ( ) ) ) ; Task.Factory.StartNew ( ( ) = > Console.WriteLine ( SingletonClass.Instance.GetHashCode ( ) ) ) ; Console.ReadLine ( ) ; } } public sealed class SingletonClass { [ ThreadStatic ] private static SingletonClass _instance ; public static SingletonClass Instance { get { if ( _instance == null ) { _instance = new SingletonClass ( ) ; } return _instance ; } } private SingletonClass ( ) { } } class Program { static void Main ( string [ ] args ) { Task.Factory.StartNew ( ( ) = > Console.WriteLine ( SingletonClass.Instance.GetHashCode ( ) ) ) ; Task.Factory.StartNew ( ( ) = > Console.WriteLine ( SingletonClass.Instance.GetHashCode ( ) ) ) ; Console.ReadLine ( ) ; } } public sealed class SingletonClass { [ ThreadStatic ] private static SingletonClass _instance = new SingletonClass ( ) ; public static SingletonClass Instance { get { return _instance ; } } private SingletonClass ( ) { } }
"( [ MyCustomAttribute ( ... ) ] param1 , param2 ) = > { ... private void method blah ( [ MyCustomAttribute ( ... ) ] Type1 param1 , Type2 param2 ) { ..."
"ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls ; var baseAddress = new Uri ( `` https : //www.cdc.co.nz '' ) ; var cookieContainer = new CookieContainer ( ) ; using ( var handler = new HttpClientHandler ( ) { CookieContainer = cookieContainer , UseCookies = true } ) using ( HttpClient client = new HttpClient ( handler ) { BaseAddress = baseAddress } ) { HttpResponseMessage response = null ; //Let 's visit the homepage to set initial cookie values Task.Run ( async ( ) = > response = await client.GetAsync ( `` / '' ) ) .GetAwaiter ( ) .GetResult ( ) ; //200 string urlToPost = `` /login/ '' ; var postData = new List < KeyValuePair < string , string > > ( ) ; postData.Add ( new KeyValuePair < string , string > ( `` username '' , `` username '' ) ) ; postData.Add ( new KeyValuePair < string , string > ( `` password '' , `` password '' ) ) ; HttpContent stringContent = new FormUrlEncodedContent ( postData ) ; client.DefaultRequestHeaders.Add ( `` Accept '' , `` text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , image/apng , */* ; q=0.8 '' ) ; client.DefaultRequestHeaders.Add ( `` Accept-Encoding '' , `` gzip , deflate , br '' ) ; client.DefaultRequestHeaders.Add ( `` Accept-Language '' , `` en-GB , en-US ; q=0.9 , en ; q=0.8 '' ) ; client.DefaultRequestHeaders.Add ( `` User-Agent '' , `` Mozilla/5.0 ( Windows NT 10.0 ; Win64 ; x64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/67.0.3396.99 Safari/537.36 '' ) ; client.DefaultRequestHeaders.Add ( `` Origin '' , `` https : //www.cdc.co.nz '' ) ; client.DefaultRequestHeaders.Add ( `` Upgrade-Insecure-Requests '' , `` 1 '' ) ; client.DefaultRequestHeaders.Add ( `` Connection '' , `` keep-alive '' ) ; client.DefaultRequestHeaders.Add ( `` Host '' , `` www.cdc.co.nz '' ) ; client.DefaultRequestHeaders.Add ( `` Referer '' , `` https : //www.cdc.co.nz/login/ '' ) ; cookieContainer.Add ( baseAddress , new Cookie ( `` _ga '' , `` GA1.3.720299450.1533761418 '' ) ) ; cookieContainer.Add ( baseAddress , new Cookie ( `` _gat_oldTracker '' , `` 1 '' ) ) ; cookieContainer.Add ( baseAddress , new Cookie ( `` _gat '' , `` 1 '' ) ) ; cookieContainer.Add ( baseAddress , new Cookie ( `` _gid '' , `` GA1.3.1011102476.1533761418 '' ) ) ; //Tyler 's suggestion here works ! //cookieContainer.Add ( baseAddress , new Cookie ( `` PHPSESSID '' , `` value from browser login response header '' ) ) ; //Receiving 200 response for the nextline , though it returns a 302 in a browser environment Task.Run ( async ( ) = > response = await client.PostAsync ( urlToPost , stringContent ) ) .GetAwaiter ( ) .GetResult ( ) ; //401 response for the next line Task.Run ( async ( ) = > response = await client.GetAsync ( `` /products/list.html ? cat=5201 '' ) ) .GetAwaiter ( ) .GetResult ( ) ; } POST /login/ HTTP/1.1Host : www.cdc.co.nzConnection : keep-aliveContent-Length : 69Cache-Control : max-age=0Origin : https : //www.cdc.co.nzUpgrade-Insecure-Requests : 1Content-Type : application/x-www-form-urlencodedUser-Agent : Mozilla/5.0 ( Windows NT 10.0 ; Win64 ; x64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/67.0.3396.99 Safari/537.36Accept : text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , image/apng , */* ; q=0.8Referer : https : //www.cdc.co.nz/login/Accept-Encoding : gzip , deflate , brAccept-Language : en-GB , en-US ; q=0.9 , en ; q=0.8Cookie : _ga=GA1.3.720299450.1533761418 ; _gid=GA1.3.1011102476.1533761418 ; PHPSESSID=p3jn5qqhcul59blum597mp2o41 ; _gat=1 ; _gat_oldTracker=1 HTTP/1.1 302 FoundDate : Thu , 09 Aug 2018 00:51:11 GMTServer : Apache/2.4.7 ( Ubuntu ) X-Powered-By : PHP/5.5.9-1ubuntu4.25Expires : Thu , 19 Nov 1981 08:52:00 GMTCache-Control : no-store , no-cache , must-revalidate , post-check=0 , pre-check=0Pragma : no-cacheSet-Cookie : PHPSESSID=oh7in7n5pjbkrkng4qwwwn22uaq951 < -- -- -- -- Needed in subsequent Request headers to not 401.Location : https : //www.cdc.co.nz/home/news.htmlContent-Length : 0Keep-Alive : timeout=5 , max=100Connection : Keep-AliveContent-Type : text/html GET /login/ HTTP/1.1 Host : www.cdc.co.nz Connection : keep-alive Upgrade-Insecure-Requests : 1 User-Agent : Mozilla/5.0 ( Windows NT 10.0 ; Win64 ; x64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/67.0.3396.99 Safari/537.36 Accept : text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , image/apng , */* ; q=0.8 Referer : https : //www.cdc.co.nz/home/my-account/ Accept-Encoding : gzip , deflate , br Accept-Language : en-GB , en-US ; q=0.9 , en ; q=0.8 Cookie : _ga=GA1.3.720299450.1533761418 ; _gid=GA1.3.1011102476.1533761418 ; _gat=1 ; _gat_oldTracker=1 ; PHPSESSID=sdjm7r2jge751jo39mkesqnfl6 HTTP/1.1 200 OKDate : Thu , 09 Aug 2018 01:11:14 GMTServer : Apache/2.4.7 ( Ubuntu ) X-Powered-By : PHP/5.5.9-1ubuntu4.25Expires : Thu , 19 Nov 1981 08:52:00 GMTCache-Control : no-store , no-cache , must-revalidate , post-check=0 , pre-check=0Pragma : no-cacheVary : Accept-EncodingKeep-Alive : timeout=5 , max=98Connection : Keep-AliveContent-Type : text/html ; charset=UTF-8Content-Length : 5668 ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls ; var baseAddress = new Uri ( `` https : //www.cdc.co.nz '' ) ; using ( HttpClient client = new HttpClient ( ) { BaseAddress = baseAddress } ) { HttpResponseMessage response = null ; //Let 's visit the homepage to set initial cookie values Task.Run ( async ( ) = > response = await client.GetAsync ( `` / '' ) ) .GetAwaiter ( ) .GetResult ( ) ; //200 string urlToPost = `` /login/ '' ; var postData = new List < KeyValuePair < string , string > > ( ) ; postData.Add ( new KeyValuePair < string , string > ( `` username '' , `` username '' ) ) ; postData.Add ( new KeyValuePair < string , string > ( `` password '' , `` password '' ) ) ; postData.Add ( new KeyValuePair < string , string > ( `` returnUrl '' , `` /login/ '' ) ) ; < -- -- - To simulate the browser postData.Add ( new KeyValuePair < string , string > ( `` service '' , `` login '' ) ) ; < -- -- - To simulate the browser HttpContent stringContent = new FormUrlEncodedContent ( postData ) ; //Receiving 200 response for the nextline , though it returns a 302 in a browser environment Task.Run ( async ( ) = > response = await client.PostAsync ( urlToPost , stringContent ) ) .GetAwaiter ( ) .GetResult ( ) ; //200 response now Task.Run ( async ( ) = > response = await client.GetAsync ( `` /products/list.html ? cat=5201 '' ) ) .GetAwaiter ( ) .GetResult ( ) ; }"
public class Sensor { public int Id { get ; set ; } [ Required ] [ MaxLength ( 40 ) ] public string Name { get ; set ; } }
The call is ambiguous between the following methods or properties :
class Jumper : IDisposable { public Jumper ( ) { Jumper.StartJumping ( ) ; } public void Dispose ( ) { Jumper.EndJumping ( ) ; } public static void StartJumping ( ) { ... } public static void EndJumping ( ) { ... } } public bool SomeFunction ( ) { // do some stuff // start jumping ... using ( new Jumper ( ) ) { // do more stuff // while jumping } // end jumping }
"DateTime endTime = DateTime.Now.AddDays ( 30 ) ; InsertIntoDatabase ( endTime ) ; var row = Db.SelectRow ( `` select endTime from MyTable Where @ column=myval '' , columnValue ) ; Assert.Equal ( row [ `` endTime '' ] , endTime ) ; // This is false ! Why ? Date { 7/17/2015 12:00:00 AM } System.DateTime Day 17 int DayOfWeek Friday System.DayOfWeek DayOfYear 198 int Hour 1 int Kind Unspecified System.DateTimeKind Millisecond 370 int Minute 21 int Month 7 int Second 27 int Ticks 635726928873700000 long+ TimeOfDay { 01:21:27.3700000 } System.TimeSpan Year 2015 int Date { 7/17/2015 12:00:00 AM } System.DateTime Day 17 int DayOfWeek Friday System.DayOfWeek DayOfYear 198 int Hour 1 int Kind Local System.DateTimeKind Millisecond 371 int Minute 21 int Month 7 int Second 27 int Ticks 635726928873716049 long+ TimeOfDay { 01:21:27.3716049 } System.TimeSpan Year 2015 int"
"public static bool IsAValidInteger ( string strWholeNumber ) { try { int wholeNumber = Convert.ToInt32 ( strWholeNumber ) ; return true ; } catch { return false ; } } public static bool IsAValidWholeNumber ( string questionalWholeNumber ) { int result ; if ( questionalWholeNumber.Trim ( ) == `` '' || int.TryParse ( questionalWholeNumber , out result ) ) { return true ; } else { return false ; } }"
"public PluginManagerService ( IPluginToServiceProviderBridge serviceProvider , IUnitOfWork unitOfWork ) { this.unitOfWork = unitOfWork ; this.serviceProvider = serviceProvider ; lock ( threadLock ) { if ( initialised == false ) { LinkPluginsWithDatabase ( ) ; initialised = true ; } // I do n't like this next line , but // not sure what else to do this.UnitOfWork.Save ( ) ; } } protected void LinkPluginsWithDatabase ( ) { var plugins = this.serviceProvider.GetAllPlugins ( ) ; foreach ( var plugin in plugins ) { var db = new PluginRecord { interfaceType = plugin.InterfaceType ; var id = plugin.Id ; var version = plugin.Version ; } // store in db via unit of work repository this.unitOfWork.PluginsRepository.Add ( db ) ; } }"
"ExcelQueryFactory excel = new ExcelQueryFactory ( ) ; excel.FileName = myXLFile ; excel.AddMapping < Part > ( x = > x.Manufacturer , `` Mfg . `` ) ; var parts = from x in excel.Worksheet < Part > ( 0 ) select x ;"
var fxRate = new FxRate ( ) ; < Analyzers > < Analyzer AnalyzerId= '' StyleCop.CSharp.NamingRules '' > < AnalyzerSettings > < CollectionProperty Name= '' Hungarian '' > ... < Value > fx < /Value > ...
"// pseudocodeint GetTotalAllocations ( ) { ... ; } class Foo { string bar ; string baz ; } public static void Main ( ) { int allocationsBefore = GetTotalAllocations ( ) ; PauseGarbageCollector ( ) ; // do I need this ? I do n't want the GC to run during the function and skew the number of allocations // Some code that makes allocations . var foo = new Foo ( ) { bar = `` bar '' , baz = `` baz '' } ; ResumeGarbageCollector ( ) ; int allocationsAfter = GetTotalAllocations ( ) ; Console.WriteLine ( allocationsAfter - allocationsBefore ) ; // Should print 3 allocations - one for Foo , and 2 for its fields . }"
"x > =0y > =0f ( x , y ) =x^2+y^2 > =100g ( x , y ) =x^2+y^2 < =200"
Task < int > task = ... ; Action < int > f = ... ; task.ContinueWith ( t = > f ( t.Result ) ) ; TaskAwaiter < int > awaiter = task.GetAwaiter ( ) ; awaiter.OnCompleted ( ( ) = > f ( awaiter.GetResult ( ) ) ) ;
"public struct SomeStruct { [ FieldOffset ( 0x00 ) ] public IntPtr * VTable ; [ FieldOffset ( 0x10 ) ] public uint SomeValue ; } var * data = ( SomeStruct* ) ( Address ) ; Invoke < delegate > ( data- > VTable [ 0x3C ] ) ( delegateArguments ) var eax = Invoke < Func < uint , uint > ( data- > VTable [ 0x3C ] ) ( arg1 , arg2 )"
"FlowLayoutPanel.Controls.Clear ( ) ; < < add new controls , assigning Click events with += > > private void Refresh ( ) { Label l ; Random rnd = new Random ( ) ; // What code should i add here to prevent memory leaks _flowLP.Controls.Clear ( ) ; l = new Label ( ) ; l.Text = `` 1 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; l = new Label ( ) ; l.Text = `` 2 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; l = new Label ( ) ; l.Text = `` 3 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; l = new Label ( ) ; l.Text = `` 4 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; l = new Label ( ) ; l.Text = `` 5 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; l = new Label ( ) ; l.Text = `` 6 '' ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method1 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method2 ; if ( rnd.Next ( 3 ) == 0 ) l.Click += Method3 ; _flowLP.Controls.Add ( l ) ; }"
"Visio.Master shapetodrop = Masters.get_ItemU ( @ '' Start Event '' ) ; Visio.Shape DropShape = ActivePage.Drop ( shapetodrop , x , y ) ; DropShape.Name = name ; DropShape.Text = name ;"
"var list1 = new List < string > { `` A '' , `` B '' , `` C '' } ; var list2 = new List < string > { `` AA '' , `` BB '' , `` CC '' } ; list1.Sort ( ) ; list2.Sort ( ) ; > > list1 [ 0 ] : `` A '' [ 1 ] : `` B '' [ 2 ] : `` C '' > > list2 [ 0 ] : `` BB '' [ 1 ] : `` CC '' [ 2 ] : `` AA ''"
string s = `` 1234 '' ; foreach ( char c in s ) Console.WriteLine ( c ) ; string s = `` 1234 '' ; for ( int i = 0 ; i < s.Length ; i++ ) Console.WriteLine ( s [ i ] ) ; IL_0000 : ldstr `` 1234 '' IL_0005 : stloc.0 IL_0006 : ldloc.0 IL_0007 : stloc.2 IL_0008 : ldc.i4.0 IL_0009 : stloc.3 IL_000A : br.s IL_001EIL_000C : ldloc.2 IL_000D : ldloc.3 IL_000E : callvirt System.String.get_CharsIL_0013 : stloc.1 IL_0014 : ldloc.1 IL_0015 : call System.Console.WriteLineIL_001A : ldloc.3 IL_001B : ldc.i4.1 IL_001C : add IL_001D : stloc.3 IL_001E : ldloc.3 IL_001F : ldloc.2 IL_0020 : callvirt System.String.get_LengthIL_0025 : blt.s IL_000C
"< configSections > < section name= '' interestingThings '' type= '' Test.InterestingThingsSection , Test '' / > < section name= '' moreInterestingThings '' type= '' Test.InterestingThingsSection , Test '' / > < /configSections > < interestingThings > < add name= '' Thing1 '' value= '' Seuss '' / > < /interestingThings > < moreInterestingThings > < add name= '' Thing2 '' value= '' Seuss '' / > < /moreInterestingThings > InterestingThingsSection interesting = ( InterestingThingsSection ) ConfigurationManager.GetSection ( `` interestingThings '' ) ; InterestingThingsSection more = ( InterestingThingsSection ) ConfigurationManager.GetSection ( `` moreInterestingThings '' ) ; public static IEnumerable < T > SectionsOfType < T > ( this Configuration configuration ) where T : ConfigurationSection { return configuration.Sections.OfType < T > ( ) .Union ( configuration.SectionGroups.SectionsOfType < T > ( ) ) ; } public static IEnumerable < T > SectionsOfType < T > ( this ConfigurationSectionGroupCollection collection ) where T : ConfigurationSection { var sections = new List < T > ( ) ; foreach ( ConfigurationSectionGroup group in collection ) { sections.AddRange ( group.Sections.OfType < T > ( ) ) ; sections.AddRange ( group.SectionGroups.SectionsOfType < T > ( ) ) ; } return sections ; }"
System.OverflowException : Value was either too large or too small for an Int32 . private Int32 ConvertValue ( double value ) { if ( value > Int32.MaxValue ) { Console.WriteLine ( `` Could n't convert value `` + value + `` to Int32 '' ) ; return Int32.MaxValue ; } else if ( value < Int32.MinValue ) { Console.WriteLine ( `` Could n't convert value `` + value + `` to Int32 '' ) ; return Int32.MinValue ; } else { return Convert.ToInt32 ( value ) ; } }
object a = null ; var b = Convert.ToString ( null ) ; var c = Convert.ToString ( a ) ; string d = Convert.ToString ( null ) ; // CLR chooses Convert.ToString ( string value ) string e = Convert.ToString ( a ) ; // CLR chooses Convert.ToString ( object value ) object x = null ; if ( x is object ) { Console.Write ( `` x is object '' ) ; } if ( x is string ) { Console.Write ( `` x is string '' ) ; } if ( null is object ) { Console.Write ( `` null is object '' ) ; } if ( null is string ) { Console.Write ( `` null is string '' ) ; }
"CREATE TYPE [ dbo ] . [ VwdCodeList ] AS TABLE ( [ VwdCode ] [ varchar ] ( 50 ) NOT NULL ) /// < summary > /// Inserts all new WatchListCodes for a given watchlist/// < /summary > public const string InsertWatchListCodes = @ '' INSERT INTO [ dbo ] . [ WatchListCodes ] ( [ WatchListID ] , [ VwdCode ] , [ Sort ] ) SELECT @ WatchListID , VwdCode , ROW_NUMBER ( ) OVER ( ORDER BY ( SELECT 1 ) ) FROM @ VwdCodeList ; '' ; SqlParameter vwdCodeListParameter = insertWatchListCodeCommand.Parameters.Add ( `` @ VwdCodeList '' , SqlDbType.Structured ) ; vwdCodeListParameter.TypeName = `` [ dbo ] . [ VwdCodeList ] '' ; vwdCodeListParameter.Value = WatchListSql.GetVwdCodeRecords ( newVwdCodes , true ) ; int inserted = insertWatchListCodeCommand.ExecuteNonQuery ( ) ; CREATE TYPE [ dbo ] . [ VwdCodeList ] AS TABLE ( [ VwdCode ] [ varchar ] ( 50 ) NOT NULL , [ Sort ] [ smallint ] NOT NULL ) public const string InsertWatchListCodes = @ '' INSERT INTO [ dbo ] . [ WatchListCodes ] ( [ WatchListID ] , [ VwdCode ] , [ Sort ] ) SELECT @ WatchListID , cl.VwdCode , cl.Sort FROM @ VwdCodeList cl ; '' ; public static IEnumerable < SqlDataRecord > GetVwdCodeRecords ( IEnumerable < string > vwdCodes , bool trimCode = true ) { short currentSort = 0 ; foreach ( string vwdCode in vwdCodes ) { var record = new SqlDataRecord ( new SqlMetaData ( `` VwdCode '' , SqlDbType.VarChar , 50 ) , new SqlMetaData ( `` Sort '' , SqlDbType.SmallInt ) ) ; record.SetString ( 0 , trimCode ? vwdCode.Trim ( ) : vwdCode ) ; record.SetInt16 ( 1 , ++currentSort ) ; yield return record ; } }"
"new ChromeOptions.AddUserProfilePreference ( `` profile.default_content_setting_values.automatic_downloads '' , 2 ) ;"
"enum EnumType { First , Second , Third } class ClassB { public string Func ( int index ) { return `` Func ( int ) '' ; } public string Func ( EnumType type ) { return `` Func ( EnumType ) '' ; } } class Program { static void Main ( string [ ] args ) { ClassB b = new ClassB ( ) ; Console.WriteLine ( b.Func ( 0 ) ) ; Console.WriteLine ( b.Func ( EnumType.First ) ) ; Console.ReadLine ( ) ; } } Func ( int ) Func ( EnumType ) enum EnumType { First , Second , Third } class ClassA { public string Func ( int index ) { return `` Func ( int ) '' ; } } class ClassB : ClassA { public string Func ( EnumType enumType ) { return `` Func ( EnumType ) '' ; } } class Program { static void Main ( string [ ] args ) { ClassB b = new ClassB ( ) ; Console.WriteLine ( b.Func ( 0 ) ) ; Console.WriteLine ( b.Func ( EnumType.First ) ) ; Console.ReadLine ( ) ; } } Func ( EnumType ) Func ( EnumType ) Console.WriteLine ( b.Func ( 0 ) ) ; Console.WriteLine ( b.Func ( 1 ) ) ; Console.WriteLine ( b.Func ( EnumType.First ) ) ; Func ( EnumType ) Func ( int ) Func ( EnumType )"
interface IFoo { ... } struct Foo1 : IFoo { ... } struct Foo2 : IFoo { ... } //Some other class which contains this : List < IFoo > listOfFoo ;
"public class SignupViewModel { public string Username { get ; set ; } public string Password { get ; set ; } public string Password2 { get ; set ; } public string Email { get ; set ; } } public ActionResult Index ( ) { if ( ! Security.IsAuthneticated ) { return View ( `` SignupPge '' , new SignupViewModel ( ) ) ; } } @ model SignupViewModel < p > @ using ( var signupForm = Html.BeginForm ( `` Signup '' , `` Account '' ) ) { @ Html.TextBoxFor ( m = > m.Email , new { placeholder = `` Email '' } ) @ Html.TextBoxFor ( m = > m.Username , new { placeholder = `` Username '' } ) @ Html.PasswordFor ( m = > m.Password , new { placeholder = `` Password '' } ) @ Html.PasswordFor ( m = > m.Password2 , new { placeholder = `` Confirm Password '' } ) < input type= '' submit '' value= '' Create Account '' / > } < /p > }"
TotalCashIn = totals ! = null & & totals.Any ( ) ? totals.First ( ) .TotalCashIn : null ; TotalCashIn = totals ! = null ? totals.FirstOrDefault ( ) .TotalCashIn : null ;
"namespace project23 { public class ActiveEmployee { public int EmpID { get ; set ; } public string EmpName { get ; set ; } private DateTime date ; private BackgroundWorker worker ; public Stopwatch sw ; public ActiveEmployee ( int empID , string empName ) { date = DateTime.Now ; worker = new BackgroundWorker ( ) ; worker.DoWork += BackgroundWork ; worker.WorkerReportsProgress = true ; worker.RunWorkerAsync ( ) ; } private TimeSpan elapsed ; public TimeSpan Elapsed { get { return elapsed ; } set { elapsed = value ; NotifyPropertyChanged ( `` Elapsed '' ) ; } } private void BackgroundWork ( object sender , DoWorkEventArgs args ) { sw = new Stopwatch ( ) ; sw.Start ( ) ; if ( true ) { Elapsed = sw.Elapsed ; } } public event PropertyChangedEventHandler PropertyChanged ; private void NotifyPropertyChanged ( String info ) { if ( PropertyChanged ! = null ) { PropertyChanged ( this , new PropertyChangedEventArgs ( info ) ) ; } } } } using System ; using System.ComponentModel ; using System.Timers ; namespace Eksamen_Januar_2011 { public class ActiveEmployee : INotifyPropertyChanged { public int EmpID { get ; set ; } public string EmpName { get ; set ; } private DateTime startDate ; private BackgroundWorker worker ; private Timer timer ; public ActiveEmployee ( int empID , string empName ) { startDate = DateTime.Now ; worker = new BackgroundWorker ( ) ; worker.DoWork += BackgroundWork ; timer = new Timer ( 1000 ) ; timer.Elapsed += TimerElapsed ; worker.RunWorkerAsync ( ) ; } private TimeSpan elapsed ; public TimeSpan Elapsed { get { return elapsed ; } set { elapsed = value ; NotifyPropertyChanged ( `` Elapsed '' ) ; } } private void BackgroundWork ( object sender , DoWorkEventArgs args ) { timer.Start ( ) ; } private void TimerElapsed ( object sender , ElapsedEventArgs e ) { Elapsed = DateTime.Now - startDate ; } public event PropertyChangedEventHandler PropertyChanged ; private void NotifyPropertyChanged ( String info ) { if ( PropertyChanged ! = null ) { PropertyChanged ( this , new PropertyChangedEventArgs ( info ) ) ; } } }"
"-.2 ^ ( \+|- ) ? [ 0-9 ] { 1,11 } ? ( ? : \ . [ 0-9 ] { 1,4 } ) ? $ -0.2345-1012.1250.12455.55525000000000 ( aka 25 Billion ) 25000000000.25 -.2-.421"
using System.Diagnostics ; Process process = new Process ( ) ; // ... process.OutputDataReceived += new DataReceivedEventHandler ( this.OnRecvStdOut ) ; process.ErrorDataReceived += new DataReceivedEventHandler ( this.OnRecvStdErr ) ; // ... process.Start ( ) ; process.BeginOutputReadLine ( ) ; process.BeginErrorReadLine ( ) ; // ... process.WaitForExit ( ) ; public void OnRecvStdOut ( ... ) { something.Increase ( ) ; // the stuff that takes so long something.DecreaseAndSignal ( ) ; } something.WaitUntilZero ( ) ; while ( ioOperations > 0 ) { something.WaitForSignal ( 500 ) ; } using System.Threading ; protected int IOCount = 0 ; protected AutoResetEvent _IOSyncEvent = new AutoResetEvent ( false ) ; public void OnRecvStdOut ( ... ) { Interlocked.Increase ( ref IOCount ) ; // the stuff that takes so long Interlocked.Decrease ( ref IOCount ) ; IOSyncEvent.Set ( ) ; } // After process.WaitForExit ( ) while ( IOCount > 0 ) { // 250 for a case that signal occurs after condition and before wait IOSyncEvent.WaitOne ( 250 ) ; }
double myDouble = 12d ; float myFloat = 10f ;
"_repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` origin/ : NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` : NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` : origin/NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` : refs/remotes/ : origin/NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` : refs/remotes/origin/NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` refs/heads/ : origin/NewBranchForDeletion '' , options ) _repo.Network.Push ( _repo.Network.Remotes [ `` origin '' ] , `` refs/heads/ : NewBranchForDeletion '' , options ) repo.Network.Push ( repo.Remotes [ `` my-remote '' ] , objectish : null , destinationSpec : `` my-branch '' ) ; // Or using a refspec , like you would use with git push ... repo.Network.Push ( repo.Remotes [ `` my-remote '' ] , pushRefSpec : `` : my-branch '' ) ;"
"< phone : PhoneApplicationPage.Resources > < local : BooleanToVisibilityConverter x : Key= '' BooleanToVisibilityConverter '' / > < /phone : PhoneApplicationPage.Resources > < StackPanel x : Name= '' NotSupportedWarning '' Visibility= '' { Binding IsNotSupported , Converter= { StaticResource BooleanToVisibilityConverter } } '' >"
string a = `` xx '' ; string b = `` xx '' ; string c = `` x '' ; string d = String.Intern ( c + c ) ; Console.WriteLine ( ( object ) a == ( object ) b ) ; // True Console.WriteLine ( ( object ) a == ( object ) d ) ; // True
ulong hash1 = AverageHash ( theImage ) ; ulong hash2 = AverageHash ( theOtherImage ) ; uint BitCount ( ulong theNumber ) { uint count = 0 ; for ( ; theNumber > 0 ; theNumber > > = 8 ) { count += bitCounts [ ( theNumber & 0xFF ) ] ; } return count ; } Console.WriteLine ( `` Similarity : `` + ( ( 64 - BitCount ( hash1 ^ hash2 ) ) * 100.0 ) / 64.0 + `` % '' ) ;
"if ( checkBox_MinMaxChars.Checked ) { int minChar = int.Parse ( numeric_MinChars.Text ) ; int maxChar = int.Parse ( numeric_MaxChars.Text ) ; myList = myList.Where ( x = > x.Length > = minChar & & x.Length < = maxChar ) .ToList ( ) ; } int minWords = int.Parse ( numeric_MinWords.Text ) ; int maxWords = int.Parse ( numeric_MaxWords.Text ) ; sortBox1 = sortBox1.Where ( x = > x.Trim ( ) .Split ( new char [ ] { ' ' } , StringSplitOptions.RemoveEmptyEntries ) .Count ( ) > = minWords & & x.Trim ( ) .Split ( new char [ ] { ' ' } , StringSplitOptions.RemoveEmptyEntries ) .Count ( ) < = maxWords ) .ToList ( ) ;"
"@ using ( Ajax.BeginForm ( `` SaveCandidateLanguage '' , `` Candidate '' , new AjaxOptions { HttpMethod = `` Post '' , OnBegin = `` onBeginFormValidation '' , OnSuccess = `` onSaveCandidateLanguageSuccess '' } ) ) { // form input elements } @ using ( Ajax.BeginForm ( `` SaveCandidateLanguage '' , `` Candidate '' , new AjaxOptions { HttpMethod = `` Post '' , OnBegin = `` onBeginFormValidation '' , OnSuccess = `` onSaveCandidateLanguageSuccess '' } , new { id = `` addEditCandidateLanguageForm '' , novalidate = `` novalidate '' } ) ) { // form input elements }"
string ageDescription = `` Five years old '' ; try { int age = int.Parse ( ageDescription ) ; } catch ( Exception ) { // Could n't parse age ; handle parse failure }
Public Enum SomeEnum As Integer < Description ( `` Name One '' ) > NameOne = 1End Enum
"public class Profile { public Name Name { get ; private set ; } ... } public class Name { public string First { get ; } public string Last { get ; } ... } public override void Configure ( EntityTypeBuilder < Profile > builder ) { base.Configure ( builder ) ; builder.OwnsOne ( navigationExpression : p = > p.Name , buildAction : n = > { n.Property ( n = > n.First ) .HasColumnName ( `` NameFirst '' ) .HasMaxLength ( 25 ) .IsRequired ( ) ; n.Property ( n = > n.Last ) .HasColumnName ( `` NameLast '' ) .HasMaxLength ( 25 ) .IsRequired ( ) ; } ) ; }"
"[ Subject ( typeof ( SomeController ) ) ] public class When_user_clicks_the_vote_down_button_on_a_post : SomeControllerContext { Establish context = ( ) = > { post = PostFakes.VanillaPost ( ) ; post.Votes = 10 ; session.Setup ( s = > s.Single ( Moq.It.IsAny < Expression < Func < Post , bool > > > ( ) ) ) .Returns ( post ) ; session.Setup ( s = > s.CommitChanges ( ) ) ; } ; Because of = ( ) = > result = controller.VoteDown ( 1 ) ; It should_decrement_the_votes_of_the_post_by_1 = ( ) = > suggestion.Votes.ShouldEqual ( 9 ) ; It should_not_let_the_user_vote_more_than_once ; } [ Subject ( typeof ( SomeController ) ) ] public class When_user_clicks_the_vote_down_button_on_a_post : SomeControllerContext { Establish context = ( ) = > { post = PostFakes.VanillaPost ( ) ; post.Votes = 0 ; session.Setup ( s = > s.Single ( Moq.It.IsAny < Expression < Func < Post , bool > > > ( ) ) ) .Returns ( post ) ; session.Setup ( s = > s.CommitChanges ( ) ) ; } ; Because of = ( ) = > result = controller.VoteUp ( 1 ) ; It should_increment_the_votes_of_the_post_by_1 = ( ) = > suggestion.Votes.ShouldEqual ( 1 ) ; It should_not_let_the_user_vote_more_than_once ; }"
"private static UnitDescriptor createUnitDescriptor ( string code ) { switch ( code ) { case UnitCode.DEG_C : return new UnitDescriptorDegC ( ) ; case UnitCode.DEG_F : return new UnitDescriptorDegF ( ) ; : : default : throw new SystemException ( string.format ( `` unknown code : { o } '' , code ) ; } }"
public void BindEvent ( A a ) { a.X += AEventHandler ; }
"/// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` xsd '' , `` 4.6.81.0 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.XmlTypeAttribute ( AnonymousType = true ) ] [ System.Xml.Serialization.XmlRootAttribute ( Namespace = `` '' , IsNullable = false ) ] public partial class request { private usertype userField ; private string versionField ; /// < remarks/ > [ System.Xml.Serialization.XmlElementAttribute ( Form = System.Xml.Schema.XmlSchemaForm.Unqualified ) ] public usertype user { get { return this.userField ; } set { this.userField = value ; } } /// < remarks/ > [ System.Xml.Serialization.XmlAttributeAttribute ( ) ] public string version { get { return this.versionField ; } set { this.versionField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` xsd '' , `` 4.6.81.0 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] public partial class usertype { private string emailField ; private string passwordField ; /// < remarks/ > [ System.Xml.Serialization.XmlElementAttribute ( Form = System.Xml.Schema.XmlSchemaForm.Unqualified ) ] public string email { get { return this.emailField ; } set { this.emailField = value ; } } /// < remarks/ > [ System.Xml.Serialization.XmlElementAttribute ( Form = System.Xml.Schema.XmlSchemaForm.Unqualified ) ] public string password { get { return this.passwordField ; } set { this.passwordField = value ; } } } /// < remarks/ > [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` xsd '' , `` 4.6.81.0 '' ) ] [ System.SerializableAttribute ( ) ] [ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.ComponentModel.DesignerCategoryAttribute ( `` code '' ) ] [ System.Xml.Serialization.XmlTypeAttribute ( AnonymousType = true ) ] [ System.Xml.Serialization.XmlRootAttribute ( Namespace = `` '' , IsNullable = false ) ] public partial class NewDataSet { private request [ ] itemsField ; /// < remarks/ > [ System.Xml.Serialization.XmlElementAttribute ( `` request '' ) ] public request [ ] Items { get { return this.itemsField ; } set { this.itemsField = value ; } } }"
"public ActionResult Upload ( HttpPostedFileBase file ) { List < string > validIDs , invalidIDs ; if ( file.ContentLength > 0 ) { //do something } } $ ( document ) .ready ( function ( ) { $ ( `` # file_upload '' ) .uploadify ( { 'uploader ' : '/Scripts/uploadify/uploadify.swf ' , 'script ' : '/XYZ/Upload ' , 'cancelImg ' : '/Scripts/uploadify/cancel.png ' , 'fileExt ' : '*.jpg ; *.gif ; *.png ; *.bmp ; *.htm ; *.html ; *.zip ' , 'fileDesc ' : '*.jpg ; *.gif ; *.png ; *.bmp ; *.htm ; *.html ; *.zip ' , 'auto ' : true , 'multi ' : false , 'sizeLimit ' : 1048576 , //1 MB 'buttonText ' : 'Upload Files ' } } ) ; } ) ;"
"var query = new TableQuery < DynamicTableEntity > ( ) .Where ( TableQuery.GenerateFilterCondition ( `` PartitionKey '' , QueryComparisons.Equal , myPartitionKey ) ) ; foreach ( DynamicTableEntity entity in myTable.ExecuteQuery ( query ) ) { // Process entity here . } Parallel.ForEach ( myTable.ExecuteQuery ( query ) , ( entity , loopState ) = > { // Process entity here in a thread-safe manner . // Edited to add : Details of the loop body below : // This is the essence of the fixed loop body : lock ( myLock ) { DataRow myRow = myDataTable.NewRow ( ) ; // [ Add entity data to myRow . ] myDataTable.Rows.Add ( myRow ) ; } // Old code ( apparently not thread-safe , though NewRow ( ) is supposed to create // a DataRow based on the table 's schema without changing the table state ) : /* DataRow myRow = myDataTable.NewRow ( ) ; lock ( myLock ) { // [ Add entity data to myRow . ] myDataTable.Rows.Add ( myRow ) ; } */ } ) ;"
List < Model > list = _myServiceContract.MyServiceMethod ( MySearchModel ) ; pagedData = list.Skip ( ( page - 1 ) * pageSize ) .Take ( pageSize ) ;
"using ( ServiceHost serviceHost = new ServiceHost ( typeof ( CalculatorService ) , baseAddress ) ) { // Add calculator endpoint serviceHost.AddServiceEndpoint ( typeof ( ICalculator ) , new WSHttpBinding ( ) , string.Empty ) ; // ** DISCOVERY ** // // Make the service discoverable by adding the discovery behavior ServiceDiscoveryBehavior discoveryBehavior = new ServiceDiscoveryBehavior ( ) ; serviceHost.Description.Behaviors.Add ( discoveryBehavior ) ; // Send announcements on UDP multicast transport discoveryBehavior.AnnouncementEndpoints.Add ( new UdpAnnouncementEndpoint ( ) ) ; // ** DISCOVERY ** // // Add the discovery endpoint that specifies where to publish the services serviceHost.Description.Endpoints.Add ( new UdpDiscoveryEndpoint ( ) ) ; // Open the ServiceHost to create listeners and start listening for messages . serviceHost.Open ( ) ; } { DiscoveryClient discoveryClient = new DiscoveryClient ( new UdpDiscoveryEndpoint ( ) ) ; Collection < EndpointDiscoveryMetadata > calculatorServices = ( Collection < EndpointDiscoveryMetadata > ) discoveryClient.Find ( new FindCriteria ( typeof ( ICalculator ) ) ) .Endpoints ; discoveryClient.Close ( ) ; CalculatorClient client = new CalculatorClient ( ) ; client.Endpoint.Address = calculatorServices [ 0 ] .Address ; }"
"enum Coffee { BIG , SMALL } public class MyClass { private Coffee coffee ; // Constructor etc . }"
void MyFunction ( ) { Bitmap image = RetrieveImage ( ) ; DoSomething ( image ) ; } void MyFunction ( ) { DoSomething ( RetrieveImage ( ) ) ; }
DataTable schema = conn.GetSchema ( ) ; DataTable tables = conn.GetSchema ( `` Tables '' ) ; DataTable columns = conn.GetSchema ( `` Columns '' ) ;
var regEx_gaid = < % = regEx [ `` regEx_gaid '' ] % > ; var regEx_wCard = < % = regEx [ `` regEx_wildCard '' ] % > ; var regEx_fCss = < % = regEx [ `` regEx_flattenCss '' ] % > ; var regEx_iCss = < % = regEx [ `` regEx_inlineCss '' ] % > ; ... function doSomething ( ) { // do something with those variables declared above . }
"< telerik : GridViewDataColumn Name= '' grdItemBuildColumn '' DataMemberBinding= '' { Binding Build , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' IsReadOnlyBinding= '' { Binding IsEnable , Mode=OneWay , UpdateSourceTrigger= PropertyChanged } '' > < telerik : GridViewDataColumn.CellEditTemplate > < DataTemplate > < telerik : RadMaskedNumericInput Value= '' { Binding Build , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' Mask= '' # 1.0 '' Placeholder= '' `` TextMode= '' PlainText '' AllowInvalidValues= '' False '' IsClearButtonVisible= '' False '' AutoFillNumberGroupSeparators= '' False '' ext : MaskedInputExtensions.Minimum= '' 0 '' SelectionOnFocus= '' SelectAll '' AcceptsReturn= '' False '' > < i : Interaction.Triggers > < i : EventTrigger EventName= '' ValueChanged '' > < i : InvokeCommandAction Command= '' { Binding BuidValueChangedCommand , Source= { StaticResource MarketSeriesViewModel } } '' / > < /i : EventTrigger > < /i : Interaction.Triggers > < /telerik : RadMaskedNumericInput > < /DataTemplate > < /telerik : GridViewDataColumn.CellEditTemplate > < /telerik : GridViewDataColumn > public ICommand BuidValueChangedCommand { get { return new RelayCommand ( BuildValueChanged ) ; } } private void BuildValueChanged ( ) { // Ask confirmation for delete . if ( ShowMessages.MessageBox ( `` This will be removed from the collection '' , `` Application '' ) ) { DeleteItem ( SelectedItem.Id ) } else { Item bo = RestoreBuild ( SelectedItem ) ; SelectedItem = bo ; } }"
"object lockObj = obj ; // ( the langspec does n't mention this var , but it would n't be safe without it ) Monitor.Enter ( lockObj ) ; try { statement ; } finally { Monitor.Exit ( lockObj ) ; } try { object lockObj = obj ; bool lockTaken = false ; Monitor.Enter ( lockObj , ref lockTaken ) ; statement ; } finally { if ( lockTaken ) Monitor.Exit ( lockObj ) ; }"
< ListBox.ItemContainerStyle > < Style TargetType= '' ListBoxItem '' > < Setter Property= '' Template '' > < ! -- Selection stuff -- > < /Setter > < Setter Property= '' Canvas.Top '' Value= '' { Binding y } '' / > < Setter Property= '' Canvas.Left '' Value= '' { Binding x } '' / > < Setter Property= '' VerticalContentAlignment '' Value= '' Stretch '' / > < Setter Property= '' HorizontalContentAlignment '' Value= '' Stretch '' / > < Setter Property= '' Padding '' Value= '' 5 '' / > < Setter Property= '' Panel.ZIndex '' Value= '' { Binding z } '' / > < Setter Property= '' ContentTemplate '' > < Setter.Value > < DataTemplate > < Grid > < Path Data= '' { Binding data } '' Stroke= '' { Binding brush } '' StrokeThickness= '' 2 '' Stretch= '' Fill '' / > < TextBlock Text= '' { Binding i } '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' / > < /Grid > < /DataTemplate > < /Setter.Value > < /Setter > < Style.Triggers > < DataTrigger Binding= '' { Binding type } '' Value= '' tableBlock '' > < Setter Property= '' ContentTemplate '' > < Setter.Value > < DataTemplate > < Grid > < Rectangle Fill= '' { Binding fill } '' Stroke= '' Black '' StrokeThickness= '' 5 '' Width= '' { Binding width } '' Height= '' { Binding height } '' Panel.ZIndex= '' 50 '' / > < TextBlock Text= '' { Binding id } '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' / > < /Grid > < /DataTemplate > < /Setter.Value > < /Setter > < /DataTrigger > < /Style.Triggers > < /Style > < /ListBox.ItemContainerStyle >
"public class Superheroes { public Dictionary < string , SomeHero > > SuperNumber { get ; set ; } } public class SomeHero { // unique properties } public class Supervillans { public Dictionary < string , SomeVillan > > SuperNumber { get ; set ; } } public class SomeVillan { // unique properties } CreateMap < KeyValuePair < string , Superheroes > , KeyValuePair < string , Supervillans > > ( ) ;"
"public string GetAttributeValueByNameAttributeAndProperty ( CodeClass cc , string nameAttribute , string nameProperty ) { var value = `` '' ; foreach ( CodeAttribute ca in cc.Attributes ) { if ( ca.Name.Contains ( nameAttribute ) & & ca.Value.Contains ( nameProperty ) ) { value = ca.Value.Remove ( 0 , ca.Value.IndexOf ( nameProperty ) ) ; value = value.Replace ( `` `` , '' '' ) ; if ( value.Contains ( `` , '' ) ) value = value.Remove ( ca.Value.IndexOf ( `` , '' ) ) ; } } return value ; }"
ssMinnow = listStrLineElements [ VESSEL_TO_AVOID ] .ToString ( ) ; ssMinnow = listStrLineElements [ VESSEL_TO_AVOID ] ;
"< Popup x : Name= '' logincontroler '' IsOpen= '' False '' Margin= '' 0,190,896,276 '' IsLightDismissEnabled= '' True '' > < StackPanel Height= '' 300 '' Width= '' 470 '' x : Name= '' popup '' FlowDirection= '' RightToLeft '' > < Grid Width= '' 470 '' Background= '' White '' > < Grid.RowDefinitions > < RowDefinition Height= '' 70 '' / > < RowDefinition Height= '' * '' / > < /Grid.RowDefinitions > < RichEditBox Grid.Row= '' 1 '' Height= '' 250 '' TextWrapping= '' Wrap '' FontSize= '' 20 '' Name= '' notesPopupTextBox '' FlowDirection= '' LeftToRight '' / > < StackPanel Grid.Row= '' 0 '' Orientation= '' Horizontal '' Background= '' # FFE3E3E5 '' > < Button Name= '' CanclePopupButton '' Content= '' Cancel '' Width= '' 64 '' Height= '' 64 '' Click= '' CanclePopupButton_Click '' / > < Button Name= '' ClearNotePopupButton '' Content= '' Clear '' Width= '' 64 '' Height= '' 64 '' Click= '' ClearNotePopupButton_Click '' / > < Button Name= '' saveNoteButton '' Content= '' Save '' Width= '' 64 '' Height= '' 64 '' Click= '' saveNoteButton_Click '' / > < TextBlock FontWeight= '' Medium '' FontSize= '' 40 '' Foreground= '' # 2a2a86 '' Margin= '' 170 12 0 0 '' > Note < /TextBlock > < /StackPanel > < /Grid > < /StackPanel > < /Popup > private void ShowButton_Click ( object sender , RoutedEventArgs e ) { logincontroler.IsOpen = true ; flipView1.IsEnabled = false ; } private void CanclePopupButton_Click ( object sender , RoutedEventArgs e ) { logincontroler.IsOpen = false ; flipView1.IsEnabled = true ; }"
"Message response = await SendRequestAsyncImpl ( m , true ) .ConfigureAwait ( false ) ; System.Runtime.Remoting.Messaging.CallContext.LogicalSetData ( `` flag '' , true ) ;"
< Error > < Message > An error has occurred. < /Message > < ExceptionMessage > Method not found : 'System.String RazorEngine.Templating.ITemplate.Run ( RazorEngine.Templating.ExecuteContext ) '. < /ExceptionMessage > < ExceptionType > System.MissingMethodException < /ExceptionType > < StackTrace > at Microsoft.Azure.Mobile.Server.Content.HtmlActionResult.ExecuteAsync ( CancellationToken cancellationToken ) at System.Web.Http.Controllers.ApiControllerActionInvoker. < InvokeActionAsyncCore > d__0.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Controllers.ActionFilterResult. < ExecuteAsync > d__2.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Filters.AuthorizationFilterAttribute. < ExecuteAuthorizationFilterAsyncCore > d__2.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Controllers.AuthenticationFilterResult. < ExecuteAsync > d__0.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Controllers.ExceptionFilterResult. < ExecuteAsync > d__0.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Web.Http.Controllers.ExceptionFilterResult. < ExecuteAsync > d__0.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- -at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Web.Http.Dispatcher.HttpControllerDispatcher. < SendAsync > d__1.MoveNext ( ) < /StackTrace > < /Error >
class Program { interface I1 { } interface I2 { } class C1 : I1 { } class C2 : I2 { } static void Main ( string [ ] args ) { C1 c1 = new C1 ( ) ; C2 c2 = new C2 ( ) ; I1 i1 = c1 ; I2 i2 = c2 ; bool x = c1 == c2 ; bool y = i1 == i2 ; } }
public class Foo < T > : ObservableCollection < T > { private T bar ; public Foo ( IEnumerable < T > items ) : base ( items.ToList ( ) ) { Contract.Requires ( items ! = null ) ; if ( this.Any ( ) ) this.bar = this [ 0 ] ; // gives 'requires unproven : index < @ this.Count ' } }
"translation = new int [ ] { 0 , 300 } ; var anim2 = ObjectAnimator.OfInt ( new MarginProxyAnimator ( myview ) , `` TopMargin '' , translation ) ; anim2.SetDuration ( 500 ) ; anim2.Start ( ) ; public class MarginProxyAnimator : Java.Lang.Object { /// ... other code ... public int getTopMargin ( ) { var lp = ( ViewGroup.MarginLayoutParams ) mView.LayoutParameters ; return lp.TopMargin ; } public void setTopMargin ( int margin ) { var lp = ( ViewGroup.MarginLayoutParams ) mView.LayoutParameters ; lp.SetMargins ( lp.LeftMargin , margin , lp.RightMargin , lp.BottomMargin ) ; mView.RequestLayout ( ) ; } }"
Namespace.Namespace.ClassNameEnclosing + ClassNameNested .
private void SpendsAnalysis ( ) { float tempQty = 0 ; float tempPrice = 0 ; double tempTot = 0 ; double total = 0 ; foreach ( DataGridViewRow row in dataGridView1.Rows ) { tempQty = ( float ) row.Cells [ `` Qty '' ] .Value ; tempPrice = ( float ) row.Cells [ `` Unit '' ] .Value ; tempTot = tempQty * tempPrice ; total += tempTot ; } textBox7.Text = total.ToString ( ) ; }
"string [ 3,3 ] = > tic-tac-toe board ( or similar ) string [ 8,8 ] = > chess or checkers board //using our tic-tac-toe board : string [ 0,0 ] = `` x '' ; //top-leftstring [ 1,1 ] = `` o '' ; //middle-middle//to movestring [ 0,1 ] = bN ; //Black Knight 's starting positonstring [ 2,2 ] = bN ; //Black Knight movesstring [ 0,1 ] = String.Empty ;"
"< PropertyGroup > < OutputType > Exe < /OutputType > < TargetFramework > netcoreapp2.0 < /TargetFramework > < /PropertyGroup > < ItemGroup > < PackageReference Include= '' Newtonsoft.Json '' Version= '' 10.0.3 '' / > < PackageReference Include= '' System.Net.WebSockets.Client '' Version= '' 4.3.1 '' / > < /ItemGroup > private readonly ClientWebSocket _socket ; public ApiConnection ( ) { _socket = new ClientWebSocket ( ) ; } public async Task Connect ( ) { // the uri is like : wss : //example.com/ws await _socket.ConnectAsync ( new Uri ( _settings.WebSocketUrl ) , CancellationToken.None ) ; if ( _socket.State == WebSocketState.Open ) Console.WriteLine ( `` connected . `` ) ; } System.Net.WebSockets.WebSocketException ( 0x80004005 ) : Unable to connect to the remote server -- - > System.Security.Authentication.AuthenticationException : The remote certificate is invalid according to the validation procedure . at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Net.Security.SslState.StartSendAuthResetSignal ( ProtocolToken message , AsyncProtocolRequest asyncRequest , ExceptionDispatchInfo exception ) at System.Net.Security.SslState.CheckCompletionBeforeNextReceive ( ProtocolToken message , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartSendBlob ( Byte [ ] incoming , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.ProcessReceivedBlob ( Byte [ ] buffer , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartReadFrame ( Byte [ ] buffer , Int32 readBytes , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartReceiveBlob ( Byte [ ] buffer , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.CheckCompletionBeforeNextReceive ( ProtocolToken message , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartSendBlob ( Byte [ ] incoming , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.ProcessReceivedBlob ( Byte [ ] buffer , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartReadFrame ( Byte [ ] buffer , Int32 readBytes , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartReceiveBlob ( Byte [ ] buffer , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.CheckCompletionBeforeNextReceive ( ProtocolToken message , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartSendBlob ( Byte [ ] incoming , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.ProcessReceivedBlob ( Byte [ ] buffer , Int32 count , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.StartReadFrame ( Byte [ ] buffer , Int32 readBytes , AsyncProtocolRequest asyncRequest ) at System.Net.Security.SslState.PartialFrameCallback ( AsyncProtocolRequest asyncRequest ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Net.Security.SslState.InternalEndProcessAuthentication ( LazyAsyncResult lazyResult ) at System.Net.Security.SslState.EndProcessAuthentication ( IAsyncResult result ) at System.Net.Security.SslStream.EndAuthenticateAsClient ( IAsyncResult asyncResult ) at System.Threading.Tasks.TaskFactory ` 1.FromAsyncCoreLogic ( IAsyncResult iar , Func ` 2 endFunction , Action ` 1 endAction , Task ` 1 promise , Boolean requiresSynchronization ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Net.WebSockets.WebSocketHandle. < ConnectAsyncCore > d__24.MoveNext ( ) at System.Net.WebSockets.WebSocketHandle. < ConnectAsyncCore > d__24.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Net.WebSockets.ClientWebSocket. < ConnectAsyncCore > d__16.MoveNext ( ) -- - End of stack trace from previous location where exception was thrown -- - at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) at System.Runtime.CompilerServices.TaskAwaiter.GetResult ( )"
"public static TextReader Serialize < T > ( T obj ) where T : new ( ) { if ( obj == null ) throw new ArgumentNullException ( `` obj '' ) ; return Serialize < T > ( obj , null ) ; } public static void Serialize < T > ( T obj , TextWriter outbound ) where T : new ( ) { if ( obj == null ) throw new ArgumentNullException ( `` obj '' ) ; Serialize < T > ( obj , outbound , null ) ; }"
"var list = this.WorkflowDiaryManager.WorkflowActionRepository.All .Fetch ( x = > x.CaseView ) .Fetch ( x = > x.WorkflowActionType ) .ThenFetchMany ( x = > x.WorkflowActionPriorityList ) .Where ( x = > x.AssignedUser.Id == userId || x.CaseView.MooseUserId == userId ) from Kctc.WorkflowAction workflowac0_ left outer join Kctc.WorkflowCaseView workflowca1_ on workflowac0_.CaseId=workflowca1_.CaseId left outer join Kctc.WorkflowActionType workflowac2_ on workflowac0_.WorkflowActionTypeId=workflowac2_.WorkflowActionTypeId left outer join Kctc.WorkflowActionPriority workflowac3_ on workflowac2_.WorkflowActionTypeId=workflowac3_.WorkflowActionTypeId , Kctc.WorkflowCaseView workflowca4_ where workflowac0_.CaseId=workflowca4_.CaseId and ( workflowac0_.AssignedUser= @ p0 or workflowca4_ . [ MooseUserId ] = @ p1 ) ; @ p0 = 1087 [ Type : Int32 ( 0 ) ] , @ p1 = 1087 [ Type : Int32 ( 0 ) ] Table ( `` Kctc.WorkflowAction '' ) ; Id ( x = > x.Id ) .GeneratedBy.Identity ( ) .Column ( `` WorkflowActionId '' ) ; References ( x = > x.WorkflowActionType ) .Column ( `` WorkflowActionTypeId '' ) .Unique ( ) ; References ( x = > x.CompletedBy ) .Column ( `` CompletedBy '' ) ; References ( x = > x.CaseView ) .Column ( `` CaseId '' ) .Not.Update ( ) .Unique ( ) ; References ( x = > x.AssignedUser ) .Column ( `` AssignedUser '' ) ; Table ( `` Kctc.WorkflowCaseView '' ) ; Id ( x = > x.Id ) .Column ( `` CaseId '' ) ; Map ( x = > x.MooseUserId ) .Nullable ( ) ;"
"using System ; using System.Collections.Generic ; using System.IO ; using System.Linq ; using System.Text ; using System.Threading ; using System.Threading.Tasks ; namespace throw_test { static class Program { static void Main ( ) { int fileCount1 = Directory.GetFiles ( `` D : \\MyDir '' , `` *.xlsx '' ) .Length ; int fileCount2 = Directory.GetFiles ( `` D : \\MyDir '' , `` *.xls '' ) .Length ; Console.WriteLine ( `` File Count 1 : `` + fileCount1 ) ; Console.WriteLine ( `` File Count 2 : `` + fileCount2 ) ; Console.Read ( ) ; } } }"
"# pragma warning disable 659 , 660 , 661"
"abstract class Descrip [ T < : DTypes , GeomT [ _ < : DTypes ] < : GeomBase [ _ ] ] ( newGeom : NewGeom [ GeomT ] ) { type GeomType = GeomT [ T ] val geomM : GeomT [ T ] = newGeom.apply [ T ] ( ) } namespace ConsoleApplication3 { class Class1 < T > { List < List < T > > listlist ; } } Lang : Higher-kind Wild-card Open-typesScala yes yes yesC # no no noJava no yes noC++ yes yes yes"
FieldInfo [ ] fieldInfos ; fieldInfos = this.GetType ( ) .GetFields ( BindingFlags.NonPublic | BindingFlags.Instance ) ;
"`` The first car I saw was color , the second car was color and the third car was color '' var colors = new List < string > { `` reg '' , `` green '' , `` blue '' } ; var sentence = `` The first car I saw was color , the second car was color and the third car was color '' ; foreach ( var color in colors ) { var regex = new Regex ( `` ( \b [ color ] +\b ) '' ) ; sentence = regex.Replace ( sentence , color , 1 ) ; }"
"using System ; class Test { public static unsafe void Main ( ) { int* fib = stackalloc int [ 100 ] ; int* p = fib ; *p++ = *p++ = 1 ; for ( int i=2 ; i < 100 ; ++i , ++p ) *p = p [ -1 ] + p [ -2 ] ; for ( int i=0 ; i < 10 ; ++i ) Console.WriteLine ( fib [ i ] ) ; } } *p++ = *p++ = 1"
"container.AddFacility < TypedFactoryFacility > ( ) ; container.Register ( Component.For < IThingFactory > ( ) .AsFactory ( ) ) ; container.Register ( Component.For < IThing > ( ) .ImplementedBy < TransientObject > ( ) .Named ( `` TransientObject '' ) .LifeStyle.Transient ) ; var factory = container.Resolve < IThingFactory > ( ) ; WeakReference reference = null ; new Action ( ( ) = > { var service = factory.GetTransientObject ( ) ; reference = new WeakReference ( service , true ) ; } ) ( ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; Assert.That ( reference.Target , Is.Null , `` reference should be null '' ) ;"
static void Main ( ) { Mutable m1 = new Mutable ( ) ; m1.MutateWrong ( ) .ToArray ( ) ; //Force the iterator to execute Console.WriteLine ( `` After MutateWrong ( ) : `` + m1.Value ) ; Console.WriteLine ( ) ; Mutable m2 = new Mutable ( ) ; m2.MutateRight ( ) ; Console.WriteLine ( `` After MutateRight ( ) : `` + m2.Value ) ; } struct Mutable { public int Value ; public IEnumerable < int > MutateWrong ( ) { Value = 7 ; Console.WriteLine ( `` Inside MutateWrong ( ) : `` + Value ) ; yield break ; } public IEnumerable < int > MutateRight ( ) { Value = 7 ; Console.WriteLine ( `` Inside MutateRight ( ) : `` + Value ) ; return new int [ 0 ] ; } } Inside MutateWrong ( ) : 7After MutateWrong ( ) : 0Inside MutateRight ( ) : 7After MutateRight ( ) : 7
"foreach ( XmlNode nodeP in node.SelectNodes ( `` Property '' ) ) { propsList.Add ( nodeP.Attributes [ `` name '' ] .Value , true ) ; }"
"__declspec ( dllexport ) int __cdecl import_csv ( char *path , struct human ***persons , int *numPersons ) { int res ; FILE *csv ; char line [ 1024 ] ; struct human **humans ; csv = fopen ( path , `` r '' ) ; if ( csv == NULL ) { return errno ; } *numPersons = 0 ; // init to sane value /* * All I 'm trying to do for now is get more than one working . * Starting with 2 seems reasonable . My test CSV file only has 2 lines . */ humans = calloc ( 2 , sizeof ( struct human * ) ) ; if ( humans == NULL ) return ENOMEM ; while ( fgets ( line , 1024 , csv ) ) { char *tmp = strdup ( line ) ; struct human *person ; humans [ *numPersons ] = calloc ( 1 , sizeof ( *person ) ) ; person = humans [ *numPersons ] ; // easier to work with if ( person == NULL ) { return ENOMEM ; } person- > contact = calloc ( 1 , sizeof ( * ( person- > contact ) ) ) ; if ( person- > contact == NULL ) { return ENOMEM ; } res = parse_human ( line , person ) ; if ( res ! = 0 ) { return res ; } ( *numPersons ) ++ ; } ( *persons ) = humans ; fclose ( csv ) ; return 0 ; } IntPtr humansPtr = IntPtr.Zero ; int numHumans = 0 ; HelloLibrary.import_csv ( args [ 0 ] , ref humansPtr , ref numHumans ) ; HelloLibrary.human [ ] humans = new HelloLibrary.human [ numHumans ] ; IntPtr [ ] ptrs = new IntPtr [ numHumans ] ; IntPtr aIndex = ( IntPtr ) Marshal.PtrToStructure ( humansPtr , typeof ( IntPtr ) ) ; // Populate the array of IntPtrfor ( int i = 0 ; i < numHumans ; i++ ) { ptrs [ i ] = new IntPtr ( aIndex.ToInt64 ( ) + ( Marshal.SizeOf ( typeof ( IntPtr ) ) * i ) ) ; } // Marshal the array of human structsfor ( int i = 0 ; i < numHumans ; i++ ) { humans [ i ] = ( HelloLibrary.human ) Marshal.PtrToStructure ( ptrs [ i ] , typeof ( HelloLibrary.human ) ) ; } // Use the marshalled dataforeach ( HelloLibrary.human human in humans ) { Console.WriteLine ( `` first : ' { 0 } ' '' , human.first ) ; Console.WriteLine ( `` last : ' { 0 } ' '' , human.last ) ; HelloLibrary.contact_info contact = ( HelloLibrary.contact_info ) Marshal . PtrToStructure ( human.contact , typeof ( HelloLibrary.contact_info ) ) ; Console.WriteLine ( `` cell : ' { 0 } ' '' , contact.cell ) ; Console.WriteLine ( `` home : ' { 0 } ' '' , contact.home ) ; }"
"public class Server { [ Key ] public int Id { get ; set ; } public string InstanceCode { get ; set ; } public string ServerName { get ; set ; } } public class Users { [ Key ] public int Id { get ; set ; } public string Name { get ; set ; } public int ServerId { get ; set ; } //foreign key relationship } public IEnumerable < SelectListItem > ServerItems { get { Servers.ToList ( ) .Select ( s = > new selectListItem { Value = x.Id.ToString ( ) , Text = $ '' { s.InstanceCode } @ { s.ServerName } '' } ) ; } } public IEnumerable < SelectListItem > ServerItems { get { var items = new List < SelectListItem > ( ) ; Servers.ToList ( ) .ForEach ( x = > { var count = Users.ToList ( ) .Where ( t = > t.ServerId == x.Id ) .Count ( ) ; items.Add ( new SelectListItem { Value = x.Id.ToString ( ) , Text = $ '' { x.InstanceCode } @ { x.ServerName } ( { count } users on ) '' } ) ; } ) ; return items ; } }"
"1,8,4,2,6,3,5,7 1 2 3 4 5 6 7 81 ( first item ) 8 ( last item ) 4 ( mid item ) 2 ( mid of first half ) 6 ( mid of second half ) 3 ( mid of 1st chunk ) 5 ( mid of 2nd chunk ) 7 ( mid of 3rd chunk ) static void Main ( string [ ] args ) { List < int > numberlist = new List < int > ( ) ; numberlist.Add ( 1 ) ; numberlist.Add ( 2 ) ; numberlist.Add ( 3 ) ; numberlist.Add ( 4 ) ; numberlist.Add ( 5 ) ; numberlist.Add ( 6 ) ; numberlist.Add ( 7 ) ; numberlist.Add ( 8 ) ; int rev = numberlist.Count-1 ; int fwd = 0 ; // order 1,8,2,7,3,6,4,5 for ( int re = 0 ; re < numberlist.Count ; re++ ) { if ( re % 2 == 0 ) { Console.WriteLine ( numberlist [ fwd ] ) ; fwd++ ; } else { Console.WriteLine ( numberlist [ rev ] ) ; rev -- ; } } Console.ReadLine ( ) ; } 1 2 3 4 5 6 71 7 4 2 5 3 61 2 3 4 5 6 7 8 9 10 11 121 12 6 3 9 2 4 7 10 5 8 111 2 3 4 5 6 7 8 9 10 11 12 13 14 15 161 16 8 4 12 2 6 10 14 3 5 7 9 11 13 15"
"// Read a byte from 'stream ' . Timeout after 10 sec . Monitor the cancellation token.stream.ReadTimeout = 10000 ; await stream.ReadAsync ( buf , 0 , 1 , cts.Token ) ; BlockingCollection < byte [ ] > SendQueue = new ... ; ... // Check for a message from network layer . Timeout after 10 seconds.// Monitor cancellation token.SendQueue.TryTake ( out msg , 10000 , cts.Token ) ; byte [ ] buf = new byte [ 1 ] ; using ( CancellationTokenSource internalTokenSource = new CancellationTokenSource ( ) ) { CancellationToken internalToken = internalTokenSource.Token ; CancellationToken stopToken = stopTokenSource.Token ; using ( CancellationTokenSource linkedCts = CancellationTokenSource.CreateLinkedTokenSource ( stopToken , internalToken ) ) { CancellationToken ct = linkedCts.Token ; Task < int > readTask = m_stream.ReadAsync ( buf , 0 , 1 , ct ) ; Task < byte [ ] > msgTask = m_sendQueue.DequeueAsync ( ct ) ; Task keepAliveTask = Task.Delay ( m_keepAliveTime , ct ) ; // Wait for at least one task to complete await Task.WhenAny ( readTask , msgTask , keepAliveTask ) ; // Next cancel the other tasks internalTokenSource.Cancel ( ) ; try { await Task.WhenAll ( readTask , msgTask , keepAliveTask ) ; } catch ( OperationCanceledException e ) { if ( e.CancellationToken == stopToken ) throw ; } if ( msgTask.IsCompleted ) // Send the network layer message else if ( readTask.IsCompleted ) // Process the byte from the physical layer else Contract.Assert ( keepAliveTask.IsCompleted ) ; // Send a keep alive message } }"
public class Emp { public string Name { get ; set ; } public Manager Manager { get ; set ; } public Assistant Assistant { get ; set ; } } public class Manager : Emp { } public class Assistant : Emp { } var foo = new Manager ( ) ; var elmo = new Emp ( ) ; elmo.Manager = foo ; elmo.Manager.Manager = new Manager ( ) ; //how to disallow access to Manager.Manager ?
"'use strict ' ; self.addEventListener ( 'push ' , function ( event ) { var msg = { } ; if ( event.data ) { msg = event.data.json ( ) ; } let notificationTitle = msg.title ; const notificationOptions = { body : msg.body , //body dir : 'rtl ' , //direction icon : msg.icon , //image data : { url : msg.url , //click } , } ; event.waitUntil ( Promise.all ( [ self.registration.showNotification ( notificationTitle , notificationOptions ) , ] ) ) ; } ) ; self.addEventListener ( 'notificationclick ' , function ( event ) { event.notification.close ( ) ; let clickResponsePromise = Promise.resolve ( ) ; if ( event.notification.data & & event.notification.data.url ) { clickResponsePromise = clients.openWindow ( event.notification.data.url ) ; } const fetchOptions = { method : 'post ' } ; fetch ( 'http : //localhost:5333/usrh.ashx ? click=true ' , fetchOptions ) . then ( function ( response ) { if ( response.status > = 400 & & response.status < 500 ) { throw new Error ( 'Failed to send push message via web push protocol ' ) ; } } ) .catch ( ( err ) = > { this.showErrorMessage ( 'Ooops Unable to Send a Click ' , err ) ; } ) ; } ) ; self.addEventListener ( 'notificationclose ' , function ( event ) { const fetchOptions = { method : 'post ' } ; fetch ( 'http : //localhost:5333/usrh.ashx ? close=true ' , fetchOptions ) . then ( function ( response ) { if ( response.status > = 400 & & response.status < 500 ) { throw new Error ( 'Failed to send push message via web push protocol ' ) ; } } ) .catch ( ( err ) = > { this.showErrorMessage ( 'Ooops Unable to Send a Click ' , err ) ; } ) ; } ) ; self.addEventListener ( 'pushsubscriptionchange ' , function ( ) { const fetchOptions = { method : 'post ' , } ; fetch ( 'http : //localhost:5333/usru.ashx ' , fetchOptions ) .then ( function ( response ) { if ( response.status > = 400 & & response.status < 500 ) { console.log ( 'Failed web push response : ' , response , response.status ) ; throw new Error ( 'Failed to update users . ' ) ; } } ) .catch ( ( err ) = > { this.showErrorMessage ( 'Ooops Unable to Send a user ' , err ) ; } ) ; } ) ; registerServiceWorker ( ) { if ( 'serviceWorker ' in navigator ) { navigator.serviceWorker.register ( 'http : //localhost:5333/service-worker.js ' ) .catch ( ( err ) = > { this.showErrorMessage ( 'Unable to Register SW ' , 'Sorry this demo requires a service worker to work and it ' + 'failed to install - sorry : ( ' ) ; console.error ( err ) ; } ) ; } else { this.showErrorMessage ( 'Service Worker Not Supported ' , 'Sorry this demo requires service worker support in your browser . ' + 'Please try this demo in Chrome or Firefox Nightly . ' ) ; } } class PushClient { constructor ( subscriptionUpdate , appkeys ) { this._subscriptionUpdate = subscriptionUpdate ; this._publicApplicationKey = appkeys ; if ( ! ( 'serviceWorker ' in navigator ) ) { return ; } if ( ! ( 'PushManager ' in window ) ) { return ; } if ( ! ( 'showNotification ' in ServiceWorkerRegistration.prototype ) ) { return ; } navigator.serviceWorker.ready.then ( ( ) = > { this.setUpPushPermission ( ) ; } ) ; } setUpPushPermission ( ) { return navigator.serviceWorker.ready.then ( ( serviceWorkerRegistration ) = > { return serviceWorkerRegistration.pushManager.getSubscription ( ) ; } ) .then ( ( subscription ) = > { if ( ! subscription ) { return ; } this._subscriptionUpdate ( subscription ) ; } ) .catch ( ( err ) = > { console.log ( 'setUpPushPermission ( ) ' , err ) ; } ) ; } subscribeDevice ( ) { return new Promise ( ( resolve , reject ) = > { if ( Notification.permission === 'denied ' ) { sc ( 3 ) ; return reject ( new Error ( 'Push messages are blocked . ' ) ) ; } if ( Notification.permission === 'granted ' ) { sc ( 3 ) ; return resolve ( ) ; } if ( Notification.permission === 'default ' ) { Notification.requestPermission ( ( result ) = > { if ( result === 'denied ' ) { sc ( 0 ) ; } else if ( result === 'granted ' ) { sc ( 1 ) ; } else { sc ( 2 ) ; } if ( result ! == 'granted ' ) { reject ( new Error ( 'Bad permission result ' ) ) ; } resolve ( ) ; } ) ; } } ) .then ( ( ) = > { return navigator.serviceWorker.ready.then ( ( serviceWorkerRegistration ) = > { return serviceWorkerRegistration.pushManager.subscribe ( { userVisibleOnly : true , applicationServerKey : this._publicApplicationKey.publicKey , } ) ; } ) .then ( ( subscription ) = > { this._subscriptionUpdate ( subscription ) ; if ( subscription ) { this.sendPushMessage ( subscription ) ; } } ) .catch ( ( subscriptionErr ) = > { } ) ; } ) .catch ( ( ) = > { } ) ; } toBase64 ( arrayBuffer , start , end ) { start = start || 0 ; end = end || arrayBuffer.byteLength ; const partialBuffer = new Uint8Array ( arrayBuffer.slice ( start , end ) ) ; return btoa ( String.fromCharCode.apply ( null , partialBuffer ) ) ; } unsubscribeDevice ( ) { navigator.serviceWorker.ready.then ( ( serviceWorkerRegistration ) = > { return serviceWorkerRegistration.pushManager.getSubscription ( ) ; } ) .then ( ( pushSubscription ) = > { if ( ! pushSubscription ) { this._subscriptionUpdate ( null ) ; return ; } return pushSubscription.unsubscribe ( ) .then ( function ( successful ) { if ( ! successful ) { console.error ( 'We were unable to unregister from push ' ) ; } } ) ; } ) .then ( ( ) = > { this._subscriptionUpdate ( null ) ; } ) .catch ( ( err ) = > { console.error ( 'Error thrown while revoking push notifications . ' + 'Most likely because push was never registered ' , err ) ; } ) ; } sendPushMessage ( subscription ) { let payloadPromise = Promise.resolve ( null ) ; payloadPromise = JSON.parse ( JSON.stringify ( subscription ) ) ; const vapidPromise = EncryptionHelperFactory.createVapidAuthHeader ( this._publicApplicationKey , subscription.endpoint , 'http : //localhost:5333/ ' ) ; return Promise.all ( [ payloadPromise , vapidPromise , ] ) .then ( ( results ) = > { const payload = results [ 0 ] ; const vapidHeaders = results [ 1 ] ; let infoFunction = this.getWebPushInfo ; infoFunction = ( ) = > { return this.getWebPushInfo ( subscription , payload , vapidHeaders ) ; } ; const requestInfo = infoFunction ( ) ; this.sendRequestToProxyServer ( requestInfo ) ; } ) ; } getWebPushInfo ( subscription , payload , vapidHeaders ) { let body = null ; const headers = { } ; headers.TTL = 60 ; if ( payload ) { headers.Encryption = ` auth= $ { payload.keys.auth } ` ; headers [ 'Crypto-Key ' ] = ` p256dh= $ { payload.keys.p256dh } ` ; headers [ 'Content-Encoding ' ] = 'aesgcm ' ; } else { headers [ 'Content-Length ' ] = 0 ; } if ( vapidHeaders ) { headers.Authorization = ` WebPush $ { vapidHeaders.authorization } ` ; if ( headers [ 'Crypto-Key ' ] ) { headers [ 'Crypto-Key ' ] = ` $ { headers [ 'Crypto-Key ' ] } ; ` + ` p256ecdsa= $ { vapidHeaders.p256ecdsa } ` ; } else { headers [ 'Crypto-Key ' ] = ` p256ecdsa= $ { vapidHeaders.p256ecdsa } ` ; } } const response = { headers : headers , endpoint : subscription.endpoint , } ; if ( body ) { response.body = body ; } return response ; } sendRequestToProxyServer ( requestInfo ) { const fetchOptions = { method : 'post ' , } ; if ( requestInfo.body & & requestInfo.body instanceof ArrayBuffer ) { requestInfo.body = this.toBase64 ( requestInfo.body ) ; fetchOptions.body = requestInfo ; } fetchOptions.body = JSON.stringify ( requestInfo ) ; fetch ( 'http : //localhost:5333/usrh.ashx ' , fetchOptions ) .then ( function ( response ) { if ( response.status > = 400 & & response.status < 500 ) { console.log ( 'Failed web push response : ' , response , response.status ) ; throw new Error ( 'Failed to send push message via web push protocol ' ) ; } } ) .catch ( ( err ) = > { this.showErrorMessage ( 'Ooops Unable to Send a Push ' , err ) ; } ) ; } } Authorization : WebPush eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJodHRwcxxxxx Crypto-Key : p256dh=BBp90dwDWxxxxc1TfdBjFPqxxxxxwjO9fCip-K_Eebmg= ; p256ecdsa=BDd3_hVL9fZi9Yboxxxxxxoendpoint : https : //fcm.googleapis.com/fcm/send/cxxxxxxxxxxxxxxJRorOMHKLQ3gtT7Encryption : auth=9PzQZ1mut99qxxxxxxxxxxyw== Content-Encoding : aesgcm public static async Task < bool > SendNotificationByte ( string endpoint , string [ ] Keys , byte [ ] userSecret , byte [ ] data = null , int ttl = 0 , ushort padding = 0 , bool randomisePadding = false , string auth= '' '' ) { # region send HttpRequestMessage Request = new HttpRequestMessage ( HttpMethod.Post , endpoint ) ; Request.Headers.TryAddWithoutValidation ( `` Authorization '' , auth ) ; Request.Headers.Add ( `` TTL '' , ttl.ToString ( ) ) ; if ( data ! = null & & Keys [ 1 ] ! = null & & userSecret ! = null ) { EncryptionResult Package = EncryptMessage ( Decode ( Keys [ 1 ] ) , userSecret , data , padding , randomisePadding ) ; Request.Content = new ByteArrayContent ( Package.Payload ) ; Request.Content.Headers.ContentType = new MediaTypeHeaderValue ( `` application/octet-stream '' ) ; Request.Content.Headers.ContentLength = Package.Payload.Length ; Request.Content.Headers.ContentEncoding.Add ( `` aesgcm '' ) ; Request.Headers.Add ( `` Crypto-Key '' , `` dh= '' + Encode ( Package.PublicKey ) + '' ; '' +Keys [ 2 ] + '' = '' +Keys [ 3 ] ) ; Request.Headers.Add ( `` Encryption '' , `` salt= '' + Encode ( Package.Salt ) ) ; } using ( HttpClient HC = new HttpClient ( ) ) { HttpResponseMessage res = await HC.SendAsync ( Request ) .ConfigureAwait ( false ) ; if ( res.StatusCode == HttpStatusCode.Created ) return true ; else return false ; } # endregion } { StatusCode : 410 , ReasonPhrase : 'Gone ' , Version : 1.1 , Content : System.Net.Http.StreamContent , Headers : { Access-Control-Allow-Headers : content-encoding , encryption , crypto-key , ttl , encryption-key , content-type , authorization Access-Control-Allow-Methods : POST Access-Control-Allow-Origin : * Access-Control-Expose-Headers : location , www-authenticate Connection : keep-alive Cache-Control : max-age=86400 Date : Tue , 21 Feb 2017 08:19:03 GMT Server : nginx Content-Length : 179 Content-Type : application/json } } { StatusCode : 400 , ReasonPhrase : 'UnauthorizedRegistration ' , Version : 1.1 , Content : System.Net.Http.StreamContent , Headers : { X-Content-Type-Options : nosniff X-Frame-Options : SAMEORIGIN X-XSS-Protection : 1 ; mode=block Alt-Svc : quic= '' :443 '' ; ma=2592000 ; v= '' 35,34 '' Vary : Accept-Encoding Transfer-Encoding : chunked Accept-Ranges : none Cache-Control : max-age=0 , private Date : Tue , 21 Feb 2017 08:18:35 GMT Server : GSE Content-Type : text/html ; charset=UTF-8 Expires : Tue , 21 Feb 2017 08:18:35 GMT } }"
const vector < const Foo * > * const List < Foo > = vector < Foo * > * // No constsReadOnlyCollection < Foo > = const vector < Foo * > * // First const toggledList < ImmutableFoo > = vector < const Foo * > * // Second const toggledreadonly List < Foo > = vector < Foo * > * const // Third const toggledreadonly ReadOnlyCollection < ImmutableFoo > = const vector < const Foo * > * const // All consts toggled
"[ HttpGet ] public IEnumerable < Maquina > Get ( ) { var maquinas = _cobraAppContext.Maquina .Include ( m = > m.IdMarcaMotorNavigation ) .Include ( m = > m.IdModeloNavigation ) .ToList ( ) ; return maquinas ; //Two or more object obtains : ( } [ { `` id '' : 1 , `` nombre '' : `` M1 '' , `` idModelo '' : 3 , `` serie '' : `` 123456 '' , `` idMarcaMotor '' : 3 , `` serieMotor '' : `` 123456789 '' , `` descripcion '' : `` ejemplo 123 '' , `` fechaCreacion '' : `` 2016-12-06T08:30:51.307 '' , `` idMarcaMotorNavigation '' : { `` id '' : 3 , `` nombre '' : `` DAEWO '' , `` descripcion '' : `` DAEWO '' , `` fechaCreacion '' : `` 2016-11-29T15:17:33.223 '' , `` maquina '' : [ ] } } ]"
"bool stop = false ; Thread [ ] threads = new Thread [ 10 ] ; for ( int i = 0 ; i < threads.Length ; i++ ) threads [ i ] = new Thread ( new ThreadStart ( Job ) ) ; // How to make sure all threads have exited , when the boolean = falsevoid Job ( ) { while ( ! stop ) // Do something }"
"IntPtr AllocBlock ( int bufferSize ) { IntPtr ptrToMem = Marshal.AllocHGlobal ( bufferSize ) ; // zero memory for ( int i = 0 ; i < bufferSize ; i++ ) Marshal.WriteInt16 ( ptrToMem , i , 0 ) ; return ptrToMem ; }"
"public delegate int test ( int i ) ; public test Success ( ) { Func < int , int > f = x = > x ; return f.Invoke ; // < - code successfully compiled } public test Fail ( ) { Func < int , int > f = x = > x ; return f ; // < - code does n't compile }"
< system.serviceModel > < services > < service name= '' Cns.TrafficCopService.ManagementService '' > < host > < baseAddresses > < add baseAddress= '' http : //localhost:8000/TrafficCop/ManagementService '' / > < /baseAddresses > < /host > < endpoint address= '' '' binding= '' wsHttpBinding '' contract= '' Cns.TrafficCopService.IManagementService '' / > < /service > < /services > < /system.serviceModel > if ( this.serviceHost ! = null ) { this.serviceHost.Close ( ) ; } this.serviceHost = new ServiceHost ( typeof ( ManagementService ) ) ; this.serviceHost.Open ( ) ; < system.serviceModel > < bindings > < wsHttpBinding > < binding name= '' WSHttpBinding_IManagementService '' / > < /wsHttpBinding > < /bindings > < client > < endpoint address= '' http : //localhost:8000/TrafficCop/ManagementService '' binding= '' wsHttpBinding '' bindingConfiguration= '' WSHttpBinding_IManagementService '' contract= '' IManagementService '' name= '' WSHttpBinding_IManagementService '' > < /endpoint > < /client > < /system.serviceModel >
using System ; using System.Collections ; using System.Collections.Generic ; namespace AProject.Helpers { public static class AClass { namespace AProject.Helpers { using System ; using System.Collections ; using System.Collections.Generic ; public static class AClass {
"public static class Bezier { public static Vector3 GetPoint ( Vector3 p0 , Vector3 p1 , Vector3 p2 , Vector3 p3 , float t ) { t = Mathf.Clamp01 ( t ) ; float oneMinusT = 1f - t ; return oneMinusT * oneMinusT * oneMinusT * p0 + 3f * oneMinusT * oneMinusT * t * p1 + 3f * oneMinusT * t * t * p2 + t * t * t * p3 ; } public static Vector3 GetFirstDerivative ( Vector3 p0 , Vector3 p1 , Vector3 p2 , Vector3 p3 , float t ) { t = Mathf.Clamp01 ( t ) ; float oneMinusT = 1f - t ; return 3f * oneMinusT * oneMinusT * ( p1 - p0 ) + 6f * oneMinusT * t * ( p2 - p1 ) + 3f * t * t * ( p3 - p2 ) ; } } [ RequireComponent ( typeof ( LineRenderer ) ) ] public class BezierCurve : MonoBehaviour { public Vector3 [ ] points ; LineRenderer lr ; public int numPoints = 49 ; bool controlPointsChanged = false ; bool isMoving = false ; public void Reset ( ) { points = new Vector3 [ ] { new Vector3 ( 1f , 0f , 0f ) , new Vector3 ( 2f , 0f , 0f ) , new Vector3 ( 3f , 0f , 0f ) , new Vector3 ( 4f , 0f , 0f ) } ; } void Start ( ) { lr = GetComponent < LineRenderer > ( ) ; lr.positionCount = 0 ; DrawBezierCurve ( ) ; } public Vector3 GetPoint ( float t ) { return transform.TransformPoint ( Bezier.GetPoint ( points [ 0 ] , points [ 1 ] , points [ 2 ] , points [ 3 ] , t ) ) ; } public void DrawBezierCurve ( ) { lr = GetComponent < LineRenderer > ( ) ; lr.positionCount = 1 ; lr.SetPosition ( 0 , points [ 0 ] ) ; for ( int i = 1 ; i < numPoints+1 ; i++ ) { float t = i / ( float ) numPoints ; lr.positionCount = i+1 ; lr.SetPosition ( i , GetPoint ( t ) ) ; } } public Vector3 GetVelocity ( float t ) { return transform.TransformPoint ( Bezier.GetFirstDerivative ( points [ 0 ] , points [ 1 ] , points [ 2 ] , points [ 3 ] , t ) ) - transform.position ; } public Vector3 GetDirection ( float t ) { return GetVelocity ( t ) .normalized ; } } [ CustomEditor ( typeof ( BezierCurve ) ) ] public class BezierCurveEditor : Editor { private BezierCurve curve ; private Transform handleTransform ; private Quaternion handleRotation ; private const int lineSteps = 10 ; private const float directionScale = 0.5f ; private void OnSceneGUI ( ) { curve = target as BezierCurve ; handleTransform = curve.transform ; handleRotation = Tools.pivotRotation == PivotRotation.Local ? handleTransform.rotation : Quaternion.identity ; Vector3 p0 = ShowPoint ( 0 ) ; Vector3 p1 = ShowPoint ( 1 ) ; Vector3 p2 = ShowPoint ( 2 ) ; Vector3 p3 = ShowPoint ( 3 ) ; Handles.color = Color.gray ; Handles.DrawLine ( p0 , p1 ) ; Handles.DrawLine ( p2 , p3 ) ; Handles.DrawBezier ( p0 , p3 , p1 , p2 , Color.white , null , 2f ) ; curve.DrawBezierCurve ( ) ; if ( GUI.changed ) { curve.DrawBezierCurve ( ) ; EditorUtility.SetDirty ( curve ) ; Repaint ( ) ; } } private void ShowDirections ( ) { Handles.color = Color.green ; Vector3 point = curve.GetPoint ( 0f ) ; Handles.DrawLine ( point , point + curve.GetDirection ( 0f ) * directionScale ) ; for ( int i = 1 ; i < = lineSteps ; i++ ) { point = curve.GetPoint ( i / ( float ) lineSteps ) ; Handles.DrawLine ( point , point + curve.GetDirection ( i / ( float ) lineSteps ) * directionScale ) ; } } private Vector3 ShowPoint ( int index ) { Vector3 point = handleTransform.TransformPoint ( curve.points [ index ] ) ; EditorGUI.BeginChangeCheck ( ) ; point = Handles.DoPositionHandle ( point , handleRotation ) ; if ( EditorGUI.EndChangeCheck ( ) ) { Undo.RecordObject ( curve , `` Move Point '' ) ; EditorUtility.SetDirty ( curve ) ; curve.points [ index ] = handleTransform.InverseTransformPoint ( point ) ; } return point ; } } public class BezierPair : MonoBehaviour { public GameObject bez1 ; public GameObject bez2 ; public void setupCurves ( ) { bez1 = GameObject.Find ( `` Bez1 '' ) ; bez2 = GameObject.Find ( `` Bez2 '' ) ; } } [ CustomEditor ( typeof ( BezierPair ) ) ] public class BezierPairEditor : Editor { private BezierPair bezPair ; public override void OnInspectorGUI ( ) { bezPair = target as BezierPair ; if ( bezPair.bez1.GetComponent < BezierCurve > ( ) .points [ 0 ] ! = bezPair.bez2.GetComponent < BezierCurve > ( ) .points [ 0 ] ) { Vector3 assignPoint0 = bezPair.bez1.GetComponent < BezierCurve > ( ) .points [ 0 ] ; bezPair.bez2.GetComponent < BezierCurve > ( ) .points [ 0 ] = assignPoint0 ; } if ( GUI.changed ) { EditorUtility.SetDirty ( bezPair.bez1 ) ; EditorUtility.SetDirty ( bezPair.bez2 ) ; Repaint ( ) ; } }"
async Task Main ( ) { IList < int > myList = await TestAsync ( ) ; } public Task < IList < int > > TestAsync ( ) { return Task.FromResult ( new List < int > ( ) ) ; }
"Public Function Lines ( ByVal rdr as TextReader ) As IEnumerable ( Of String ) Return New GenericIterator ( Of String ) ( Function ( ByRef nextItem As String ) As Boolean nextItem = rdr.ReadLine Return nextItem IsNot Nothing End Function ) End Function public IEnumerable < IResult > ExecuteSearch ( ) { var search = new SearchGames { SearchText = SearchText } .AsResult ( ) ; yield return Show.Busy ( ) ; yield return search ; var resultCount = search.Response.Count ( ) ; if ( resultCount == 0 ) SearchResults = _noResults.WithTitle ( SearchText ) ; else if ( resultCount == 1 & & search.Response.First ( ) .Title == SearchText ) { var getGame = new GetGame { Id = search.Response.First ( ) .Id } .AsResult ( ) ; yield return getGame ; yield return Show.Screen < ExploreGameViewModel > ( ) .Configured ( x = > x.WithGame ( getGame.Response ) ) ; } else SearchResults = _results.With ( search.Response ) ; yield return Show.NotBusy ( ) ; } Private _state As Integer = -1Public Function MoveNext ( ) As Boolean Implements IEnumerator.MoveNext _state += 1 Return _func ( _Current , _state ) End Function Public Function ExecuteSearch ( ) As IEnumerable ( Of String ) ' If we need some variable shared across states , define it here Dim someSharedStuff As String = String.Empty ' Notice the second lambda function parameter below - state Return New GenericIterator ( Of IResult ) ( Function ( ByRef nextItem As IResult , state As Integer ) As Boolean Select Case state Case 0 someSharedStuff = `` First state '' nextItem = Show.Busy Return True Case 1 nextItem = Show.SomeLoadingScreen ' Do some additional processing here ... Return True Case 2 ' Do something with someSharedStuff variable ... Console.WriteLine ( someSharedStuff ) nextItem = PerforSomemWebServiceCall ( ) Return True ' ... Case 6 nextItem = Show.NotBusy Return False End Select Return False End Function ) End Function"
delegate void D1 ( ) ; delegate void D2 ( ) ; D1 d1 = MethodGroup ; D2 d2 = d1 ; // compile time errorD2 d2 = new D2 ( d1 ) ; // you need to do this instead
var result = GetFiles ( source ) ; for ( int i = 0 ; i < Environment.ProcessorCount ; i++ ) { tasks.Add ( Task.Factory.StartNew ( ( ) = > { ProcessCopy ( result ) ; } ) ) ; } Task.WaitAll ( tasks.ToArray ( ) ) ; C : \Users\esac\Pictures\2000-06\DSC_1834.JPGC : \Users\esac\Pictures\2000-06\DSC_1835.JPGC : \Users\esac\Pictures\2000-06\.picasa.iniC : \Users\esac\Pictures\2000-06\DSC_1834.JPGC : \Users\esac\Pictures\2000-06\DSC_1835.JPGC : \Users\esac\Pictures\2000-06\.picasa.iniC : \Users\esac\Pictures\2000-06\DSC_1834.JPGC : \Users\esac\Pictures\2000-06\DSC_1835.JPGC : \Users\esac\Pictures\2000-06\.picasa.iniC : \Users\esac\Pictures\2000-06\DSC_1834.JPGC : \Users\esac\Pictures\2000-06\DSC_1835.JPG
"public Task SleepAsyncA ( int millisecondsTimeout ) { return Task.Run ( ( ) = > thread.Sleep ( millisecondsTimeout ) ; } public Task SleepAsyncB ( int millisecondsTimeout ) { TaskCompletionSource < bool > tcs = null ; var t = new Timer ( delegate { tcs.TrySetResult ( true ) ; } , -1 , -1 ) ; tcs = new TaskCompletionSource < bool > ( t ) ; t.Change ( millisecondsTimeout , -1 ) ; return tcs.Task ; }"
class Foo { static Func < string > sRunner ; Func < string > _runner ; public Foo ( Func < string > runner ) { _runner = runner ? ? sRunner ? ? ( ) = > `` Hey ! `` ; } }
"using ( WebClient client = new WebClient ( ) ) { client.Encoding = System.Text.Encoding.UTF8 ; client.Headers [ HttpRequestHeader.ContentType ] = `` application/json '' ; byte [ ] requestData = new byte [ 0 ] ; string jsonRequest = `` { } '' ; if ( data ! = null ) { string tempRequest = Converter.SerializeToString ( data ) ; jsonRequest = `` { \ '' Data\ '' : \ '' '' + tempRequest + `` \ '' } '' ; requestData = System.Text.Encoding.UTF8.GetBytes ( jsonRequest ) ; } // below line of code is the culprit byte [ ] returnedData = client.UploadData ( url , `` POST '' , requestData ) ; if ( returnedData.Length > 0 ) { // do stuff } } var request = ( System.Net.HttpWebRequest ) System.Net.WebRequest.Create ( url ) ; request.ContentType = `` application/json '' ; request.Method = `` POST '' ; var sw = new System.IO.StreamWriter ( request.GetRequestStream ( ) , System.Text.Encoding.UTF8 ) ; sw.Write ( jsonRequest ) ; // jsonRequest is same variable as in above code , string with json object.sw.Close ( ) ; var re = request.GetResponse ( ) ; string resultString = `` '' ; using ( var outputStream = new System.IO.StreamReader ( re.GetResponseStream ( ) , System.Text.Encoding.UTF8 ) ) { resultString = outputStream.ReadToEnd ( ) ; } if ( resultString.Length > 0 ) { } bool isCompleted = false ; byte [ ] returnedData = null ; client.UploadDataCompleted += new UploadDataCompletedEventHandler ( ( object sender , UploadDataCompletedEventArgs e ) = > { Debug.Log ( `` return event '' ) ; returnedData = e.Result ; isCompleted =true ; } ) ; Debug.Log ( `` async call start '' ) ; client.UploadDataAsync ( new Uri ( url ) , requestData ) ; while ( isCompleted == false ) { Thread.Sleep ( 100 ) ; } if ( returnedData.Length > 0 ) { }"
MyClass _localMyClass = MyClassDAO.GetMyClassByID ( 123 ) ? ? new MyClass ( ) ; public static MyClass GetMyClassByID ( int id ) { var query = from m in ctx.MyClass where m.MyClassID == id select m ; return query.FirstOrDefault < MyClass > ( ) ; }
public IEnumerable < ElementType > GetSubtreeFlattenedPostOrder ( ) { return PostOrderRecursive ( this ) ; IEnumerable < ElementType > PostOrderRecursive ( BinaryTree < ElementType > currentNode ) { if ( currentNode.HasLeft ) PostOrderRecursive ( currentNode.Left ) ; if ( currentNode.HasRight ) PostOrderRecursive ( currentNode.Right ) ; yield return currentNode.element ; } }
error_code=1017 & wrap_error_reason=ExternalConsentConnectivityProblem
"// Since we are now rewriting the path we need to check again that the // current user has access to the rewritten path.// Get the user for the current request// If the user is anonymous or authentication does n't work for this suffix // avoid a NullReferenceException in the UrlAuthorizationModule by creating // a generic identity.string virtualCachedPath = cache.GetVirtualCachedPath ( ) ; IPrincipal user = context.User ? ? new GenericPrincipal ( new GenericIdentity ( string.Empty , string.Empty ) , new string [ 0 ] ) ; // Do we have permission to call // UrlAuthorizationModule.CheckUrlAccessForPrincipal ? PermissionSet permission = new PermissionSet ( PermissionState.None ) ; permission.AddPermission ( new AspNetHostingPermission ( AspNetHostingPermissionLevel.Unrestricted ) ) ; bool hasPermission = permission.IsSubsetOf ( AppDomain.CurrentDomain.PermissionSet ) ; bool isAllowed = true ; // Run the rewritten path past the auth system again , using the result as // the default `` AllowAccess '' valueif ( hasPermission & & ! context.SkipAuthorization ) { isAllowed = UrlAuthorizationModule.CheckUrlAccessForPrincipal ( virtualCachedPath , user , `` GET '' ) ; }"
Bind < IWeapon > ( ) .To < Sword > ( ) ; Bind < IWeapon > ( ) .To < Knife > ( ) ; Bind < IWeapon > ( ) .To < ChuckNorris > ( ) ; IEnumerable < IWeapon > weapons = ServiceLocator.Current.GetAllInstances < IWeapon > ( ) ;
"public class Program { delegate void Srini ( string param ) ; static void Main ( string [ ] args ) { Srini sr = new Srini ( PrintHello1 ) ; sr += new Srini ( PrintHello2 ) ; //case 2 : sr += new Srini ( delegate ( string o ) { Console.WriteLine ( o ) ; } ) ; sr += new Srini ( delegate ( object o ) { Console.WriteLine ( o.ToString ( ) ) ; } ) ; //case 4 : sr += new Srini ( delegate { Console.WriteLine ( “ This line is accepted , though the method signature is not Comp ” ) ; } ) ; //case 5 sr ( `` Hello World '' ) ; Console.Read ( ) ; } static void PrintHello1 ( string param ) { Console.WriteLine ( param ) ; } static void PrintHello2 ( object param ) { Console.WriteLine ( param ) ; } }"
"{ `` version '' : `` 1.0.0-* '' , `` compilationOptions '' : { `` emitEntryPoint '' : true } , `` dependencies '' : { `` Microsoft.AspNet.IISPlatformHandler '' : `` 1.0.0-rc1-final '' , `` Microsoft.AspNet.Mvc '' : `` 6.0.0-rc1-final '' , `` Microsoft.AspNet.Server.Kestrel '' : `` 1.0.0-rc1-final '' , `` Microsoft.AspNet.StaticFiles '' : `` 1.0.0-rc1-final '' } , `` frameworks '' : { `` dnxcore50 '' : { } } , `` exclude '' : [ `` wwwroot '' , `` node_modules '' ] , `` publishExclude '' : [ `` **.user '' , `` **.vspscc '' ] , `` commands '' : { `` web '' : `` Microsoft.AspNet.Server.Kestrel '' } } 1 > Information : [ LoaderContainer ] : Load name=Microsoft.Dnx.Tooling1 > Information : [ PathBasedAssemblyLoader ] : Loaded name=Microsoft.Dnx.Tooling in 2ms1 > Information : [ Bootstrapper ] Runtime Framework : DNX , Version=v4.5.11 > Microsoft .NET Development Utility Mono-x64-1.0.0-rc1-16231"
"SQLWrapper.GetRecordset ( connstr-alias , sql-statement , parameters ) ; SQLWrapper.GetDataset ( connstr-alias , sql-statement , parameters ) ; SQLWrapper.Execute ( connstr-alias , sql-statement , parameters ) ; Person p = Person.get ( id ) ; p.fname = `` jon '' ; p.lname = `` smith '' ; p.Save ( ) ; Person p = new Person ( ) ; p.fname = `` Jon '' ; p.lname = `` Smith '' ; p.Save ( ) ; p.Delete ( ) ;"
int i = 1000 ; object o = ( object ) i ; // casti.CompareTo ( 1000 ) ; o.CompareTo ( 1000 ) ; // error string s = ( string ) i ; // cast error AudioRender a = new AudioRender ( ) ; IBaseFilter b = ( IBaseFilter ) a ; // casta.Run ( 1000 ) ; // errorb.Run ( 1000 ) ;
- AppRunner | - Apprunner.csproj | - wwwroot- Tests | - Tests.csproj | - bin | - debug | - netcoreapp2.1 | - I want copy wwwroot here < ItemGroup > < None Update= '' ..\AppRunner\wwwroot\* '' > < CopyToOutputDirectory > Always < /CopyToOutputDirectory > < /None > < /ItemGroup >
"List < string > lstRoles = new List < string > ( ) ; lstRoles = _repository.GetRolesForFindJobseekers ( ) ; List < string > lstFunctions = new List < string > ( ) ; lstFunctions = _repository.GetFunctionsForRolesFindJobSeekers ( ) ; List < SelectListItem > selectListRoles = new List < SelectListItem > ( ) ; int i = 1 ; foreach ( string role in lstRoles ) { selectListRoles.Add ( new SelectListItem { Text = role , Value = role , Selected = ( i == 0 ) } ) ; i++ ; } ViewData [ `` RolesForJobSeekers '' ] = selectListRoles ;"
"Private Class GH_DataStructureEnumerator ( Of Q As Types.IGH_Goo ) Implements IEnumerable ( Of Q ) Implements IEnumerator ( Of Q ) ... . ... . 'Current , MoveNext , Reset etc . ' ... . ... . Public Function GetEnumerator_Generic ( ) As IEnumerator ( Of Q ) _ Implements IEnumerable ( Of Q ) .GetEnumerator Return Me End FunctionEnd Class"
"public class MyDynamicClass : DynamicObject { public string MyNormalProperty { get ; set ; } } ... MyDynamicClass instance = new MyDynamicClass ( ) { MyNormalProperty = `` Hello , world ! `` } ; string json = JsonConvert.SerializeObject ( instance ) ; // the resulting string is `` { } '' , but I expected to see MyNormalProperty in there"
Public Class bill_staff Inherits System.Windows.Forms.Form ... .End Class using ( var frm = new bill_staff ( ) ) frm.ShowDialog ( ) ; bill_staff.ShowDialog ( ) ; Public Function ShowDialog ( ) As System.Windows.Forms.DialogResult
private MyViewModel GetVM ( Params myParams ) { string cacheKey = myParams.runDate.ToString ( ) ; var cacheResults = HttpContext.Cache [ cacheKey ] as MyViewModel ; if ( cacheResults == null ) { cacheResults = RunExpensiveCodeToGenerateVM ( myParams ) ; HttpContext.Cache [ cacheKey ] = cacheResults ; } return cacheResults ; }
class Magic { [ Conditional ( `` DEBUG '' ) ] public static void DoMagic ( int stuff ) { } public static int ComputeMagic ( ) { throw new InvalidOperationException ( ) ; } } class Program { static void Main ( string [ ] args ) { Magic.DoMagic ( Magic.ComputeMagic ( ) ) ; } }
"[ JsonObject ] public class SomeObject { [ JsonProperty ( PropertyName = `` id '' ) ] public string Id { get ; set ; } [ JsonProperty ( PropertyName = `` name '' ) ] public string Name { get ; set ; } [ JsonProperty ( PropertyName = `` is_active '' ) ] public bool IsActive { get ; set ; } public string SomeOtherObjectId { get ; set ; } } Expression < Func < SomeObject , bool > > exp = o = > o.SomeOtherObjectId == `` someId '' & & o.IsActive ; Expression < Func < SomeObject , bool > > modifiedExp = o = > o.IsActive ; return deserializedObject.Where ( modifiedExp ) ; protected override Expression VisitBinary ( BinaryExpression node ) { if ( node.NodeType ! = ExpressionType.Equal ) return base.VisitBinary ( node ) ; if ( new [ ] { node.Left , node.Right } .Select ( child = > child as MemberExpression ) .Any ( memberEx = > memberEx ! = null & & memberEx.Member.CustomAttributes.All ( p = > p.AttributeType.Name ! = `` JsonPropertyAttribute '' ) ) ) { return Expression.Constant ( true ) ; } return base.VisitBinary ( node ) ; }"
# r `` bin\Debug\ConsoleApplication7.exe ''
"[ sts_sitGuid ] [ uniqueidentifier ] NOT NULL , -- tells us which site the setting is for [ sts_group ] [ nvarchar ] ( 50 ) NOT NULL , -- used to group settings e.g . test/live [ sts_name ] [ nvarchar ] ( max ) NULL , -- the display name of the setting , for edit forms [ sts_alias ] [ nvarchar ] ( 50 ) NOT NULL , -- the name for the setting [ sts_value ] [ nvarchar ] ( max ) NOT NULL , -- the settings value [ sts_dataType ] [ nvarchar ] ( 50 ) NULL , -- indicates the control to render on edit form [ sts_ord ] [ tinyint ] NULL , -- The order they will appear in on the admin form"
"public class TestClass { public int Num { get ; set ; } public string Name { get ; set ; } } IEnumerable < TestClass > originalEnumerable = Enumerable.Range ( 1 , 1 ) . Select ( x = > new TestClass ( ) { Num = x , Name = x.ToString ( ) } ) ; List < TestClass > listFromEnumerable = originalEnumerable.ToList ( ) ; // falsebool test = ReferenceEquals ( listFromEnumerable [ 0 ] , originalEnumerable.ElementAt ( 0 ) ) ;"
static async Task < int > GetPageLengthAsync ( string url ) { using ( HttpClient client = new HttpClient ( ) ) { Task < string > fetchTextTask = client.GetStringAsync ( url ) ; int length = ( await fetchTextTask ) .Length ; return length ; } } public static void Main ( ) { Task < int > lengthTask = GetPageLengthAsync ( `` http : //csharpindepth.com '' ) ; Console.WriteLine ( lengthTask.Result ) ; }
public class DesignerPatternBrush : Brush { public string Name { get ; set ; } }
public interface IInputBoxService < out T > { bool ShowDialog ( ) ; T Result { get ; } } public class StringInputBoxService : IInputBoxService < string > { ... } ... IInputBoxService < object > service = new StringInputBoxService ( ) ; public class IntegerInputBoxService : IInputBoxService < int > { ... } ... IInputBoxService < object > service = new IntegerInputBoxService ( ) ;
public class Stage { public int ID { get ; set ; } public int ? NextStageID { get ; set ; } public string Name { get ; set ; } public virtual Stage NextStage { get ; set ; } }
"var q2 = list.GroupBy ( x = > x.GroupId ) .Select ( g = > g .OrderByDescending ( x = > x.Date ) .FirstOrDefault ( ) ) ; var q1 = from x in list group x by x.GroupId into g from y in g orderby y.Date descending select g.FirstOrDefault ( ) ; public class MyClass { public int Id { get ; set ; } public string GroupId { get ; set ; } public DateTime Date { get ; set ; } public override bool Equals ( object obj ) { var item = obj as MyClass ; return item == null ? false : item.Id == this.Id ; } } static void Main ( string [ ] args ) { var list = new List < MyClass > { new MyClass { GroupId = `` 100 '' , Date=DateTime.Parse ( `` 01/01/2000 '' ) , Id = 1 } , new MyClass { GroupId = `` 100 '' , Date=DateTime.Parse ( `` 02/01/2000 '' ) , Id = 2 } , new MyClass { GroupId = `` 200 '' , Date=DateTime.Parse ( `` 01/01/2000 '' ) , Id = 3 } , new MyClass { GroupId = `` 200 '' , Date=DateTime.Parse ( `` 02/01/2000 '' ) , Id = 4 } , new MyClass { GroupId = `` 300 '' , Date=DateTime.Parse ( `` 01/01/2000 '' ) , Id = 5 } , new MyClass { GroupId = `` 300 '' , Date=DateTime.Parse ( `` 02/01/2000 '' ) , Id = 6 } , } ; var q1 = from x in list group x by x.GroupId into g from y in g orderby y.Date descending select g.FirstOrDefault ( ) ; var q2 = list.GroupBy ( x = > x.GroupId ) .Select ( g = > g .OrderByDescending ( x = > x.Date ) .FirstOrDefault ( ) ) ; Debug.Assert ( q1.SequenceEqual ( q2 ) ) ; }"
"var request = DicomCFindRequest.CreatePatientQuery ( patientId : _patientid , patientName : _patientname ) ; var client = new DicomClient ( ) ; client.AddRequest ( request ) ; await client.SendAsync ( destip , port , useTLS , callingAE , calledAE ) ; request = DicomCFindRequest.CreateStudyQuery ( patientId : _patientid ) ; 2019-02-24 02:32:49.1671 INFO Dicom.Log.NLogManager+NLogger.Log DICOM_STORAGE - > Association request : Calling AE Title : TEST_01 Called AE Title : DICOM_STORAGE Remote host : xxx.29.51.150Remote port : 7817Implementation Class : Implementation Class UID [ 1.3.6.1.4.1.30071.8 ] Implementation Version : fo-dicom 4.0.0Maximum PDU Length : 16384Async Ops Invoked : 1Async Ops Performed : 1Presentation Contexts : 1 Presentation Context : 1 [ Proposed ] Abstract Syntax : Study Root Query/Retrieve Information Model - FIND Transfer Syntax : Implicit VR Little Endian : Default Transfer Syntax for DICOM 2019-02-24 02:32:49.1671 INFO Dicom.Log.NLogManager+NLogger.Log DICOM_STORAGE < - Association accept : Calling AE Title : TEST_01Called AE Title : DICOM_STORAGERemote host : xxx.29.51.150Remote port : 7817Implementation Class : Unknown [ 1.2.752.24.3.3.25.7 ] Implementation Version : WISSTOSCP_20_1Maximum PDU Length : 28672Async Ops Invoked : 1Async Ops Performed : 1Presentation Contexts : 1 Presentation Context : 1 [ RejectAbstractSyntaxNotSupported ] Abstract Syntax : Study Root Query/Retrieve Information Model - FIND Transfer Syntax : Implicit VR Little Endian : Default Transfer Syntax for DICOM 2019-02-24 02:32:49.1671 INFO DicomHandler.DicomHandler+ < > c__DisplayClass8_0. < QueryRetrieveSCU > b__0 DicomCFindRequest.QueryRetrieveSCU response rp.status=Failure [ 0122 : Refused : SOP class not supported ] 2019-02-24 02:32:49.1671 INFO Dicom.Network.DicomCFindRequest.PostResponse DicomCFindRequest.QueryRetrieveSCU response return . 2019-02-24 02:32:49.1671 ERROR Dicom.Log.NLogManager+NLogger.Log No accepted presentation context found for abstract syntax : Study Root Query/Retrieve Information Model - FIND [ 1.2.840.10008.5.1.4.1.2.2.1 ] 2019-02-24 02:32:49.2288 INFO Dicom.Log.NLogManager+NLogger.Log DICOM_STORAGE - > Association release request 2019-02-24 02:32:49.2288 INFO Dicom.Log.NLogManager+NLogger.Log DICOM_STORAGE < - Association release response jdicom : *** request ***application context UID : nullcalled title : DICOM_QR_SCPcalling title : jdicommax pdu size : 32768max operation invoked : 1max operation performed : 1implementation class UID : 1.2.826.0.1.3680043.2.60.0.1implementation version Name : softlink_jdt103abstract syntax scu scp 1.2.840.10008.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.2.1 -1 -1 1.2.840.10008.5.1.4.1.2.3.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.2 -1 -1 1.2.840.10008.5.1.4.1.2.2.2 -1 -1 1.2.840.10008.5.1.4.1.2.3.2 -1 -1 nr abstract syntax pcid description 0 1.2.840.10008.1.1 1 Verification SOP Class ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 1 1.2.840.10008.5.1.4.1.2.1.1 3 Patient Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 2 1.2.840.10008.5.1.4.1.2.2.1 5 Study Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 3 1.2.840.10008.5.1.4.1.2.3.1 7 Patient/Study Only Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 4 1.2.840.10008.5.1.4.1.2.1.2 9 Patient Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 5 1.2.840.10008.5.1.4.1.2.2.2 11 Study Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 6 1.2.840.10008.5.1.4.1.2.3.2 13 Patient/Study Only Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax ***************Waiting for AssociationRspASSOCIATE_ACKNOWLEDGE detectedjdicom : # 17 : DICOM_QR_SCP > > A-ASSOCIATE-AC PDUjdicom : *** acknowledge ***max pdu size : 28672max operation invoked : 1max operation performed : 1implementation class UID : 1.2.752.24.3.3.25.7implementation version name : WIQRSCP_20_1abstract syntax scu scp nr pcid result transfer syntax 0 1 accepted 1.2.840.10008.1.2 1 3 accepted 1.2.840.10008.1.2 2 5 accepted 1.2.840.10008.1.2 3 7 accepted 1.2.840.10008.1.2 4 9 accepted 1.2.840.10008.1.2 5 11 accepted 1.2.840.10008.1.2 6 13 accepted 1.2.840.10008.1.2 ******************* PatientRootLog # 14 1 PatientID ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ ] # 0 0 SeriesInstanceUID ( 0020,0011 ) IS [ ] # 0 0 SeriesNumber ( 0020,1209 ) IS [ ] # 0 0 NumberOfSeriesRelatedImagesjdicom : DICOM_QR_SCP PDU receivedjdicom : # 16 : DICOM_QR_SCP > > C-FIND-RSP Patient Root Query/Retrieve Information Model - FIND SOP Class , status # ff00H [ StatusEntry.PENDING ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.1.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 258 ] # 2 1 DataSetType ( 0000,0900 ) US [ 65280 ] # 2 1 Statusjdicom : # 16 : DICOM_QR_SCP > > Dataset ( 0008,0005 ) CS [ ISO_IR 100 ] # 10 1 SpecificCharacterSet ( 0008,0050 ) SH [ 1912121-0034201 ] # 16 1 AccessionNumber ( 0008,0052 ) CS [ SERIES ] # 6 1 QueryRetrieveLevel ( 0008,0054 ) AE [ DICOM_QR_SCP ] # 12 1 RetrieveAETitle ( 0008,0060 ) CS [ OP ] # 2 1 Modality ( 0010,0020 ) LO [ 19121212-1212 ] # 14 1 PatientID ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0010 ) SH [ 1912121-0034201 ] # 16 1 StudyID ( 0020,0011 ) IS [ 1 ] # 2 1 SeriesNumber ( 0020,1209 ) IS [ 1 ] # 2 1 NumberOfSeriesRelatedImagesjdicom : DICOM_QR_SCP Waiting for PDUjdicom : DICOM_QR_SCP PDU receivedjdicom : # 16 : DICOM_QR_SCP > > C-FIND-RSP Patient Root Query/Retrieve Information Model - FIND SOP Class , status # 0000H [ Success ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.1.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 257 ] # 2 1 DataSetType ( 0000,0900 ) US [ 0 ] # 2 1 Statusjdicom : DICOM_QR_SCP Waiting for PDUjdicom : Enter _dimseSCUs.waitUntilEmpty ( jdicom : Enter _as.sendReleaseRequest ( ) jdicom : # 16 : DICOM_QR_SCP < < A-RELEASE-RQ PDUjdicom : Leave DimseExchange.releaseAssoc ( ) jdicom : DICOM_QR_SCP PDU receivedjdicom : # 16 : DICOM_QR_SCP > > A-RELEASE-RP PDUjdicom : # 16 : DICOM_QR_SCP closing socketjdicom : DICOM_QR_SCP Leave DimseExchange.run ( ) jdicom : # 17 : DICOM_QR_SCP < < A-ASSOCIATE-RQ PDUjdicom : *** request ***application context UID : nullcalled title : DICOM_QR_SCPcalling title : jdicommax pdu size : 32768max operation invoked : 1max operation performed : 1implementation class UID : 1.2.826.0.1.3680043.2.60.0.1implementation version Name : softlink_jdt103abstract syntax scu scp 1.2.840.10008.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.2.1 -1 -1 1.2.840.10008.5.1.4.1.2.3.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.2 -1 -1 1.2.840.10008.5.1.4.1.2.2.2 -1 -1 1.2.840.10008.5.1.4.1.2.3.2 -1 -1 nr abstract syntax pcid description 0 1.2.840.10008.1.1 1 Verification SOP Class ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 1 1.2.840.10008.5.1.4.1.2.1.1 3 Patient Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 2 1.2.840.10008.5.1.4.1.2.2.1 5 Study Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 3 1.2.840.10008.5.1.4.1.2.3.1 7 Patient/Study Only Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 4 1.2.840.10008.5.1.4.1.2.1.2 9 Patient Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 5 1.2.840.10008.5.1.4.1.2.2.2 11 Study Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 6 1.2.840.10008.5.1.4.1.2.3.2 13 Patient/Study Only Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax ***************Waiting for AssociationRspASSOCIATE_ACKNOWLEDGE detectedjdicom : # 17 : DICOM_QR_SCP > > A-ASSOCIATE-AC PDUjdicom : *** acknowledge ***max pdu size : 28672max operation invoked : 1max operation performed : 1implementation class UID : 1.2.752.24.3.3.25.7implementation version name : WIQRSCP_20_1abstract syntax scu scp nr pcid result transfer syntax 0 1 accepted 1.2.840.10008.1.2 1 3 accepted 1.2.840.10008.1.2 2 5 accepted 1.2.840.10008.1.2 3 7 accepted 1.2.840.10008.1.2 4 9 accepted 1.2.840.10008.1.2 5 11 accepted 1.2.840.10008.1.2 6 13 accepted 1.2.840.10008.1.2 *******************jdicom : DICOM_QR_SCP Enter DimseExchange.run ( ) jdicom : # 17 : DICOM_QR_SCP < < C-FIND-RQ Patient Root Query/Retrieve Information Model - FIND SOP Classjdicom : DICOM_QR_SCP Waiting for PDU ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.1.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32 ] # 2 1 CommandField ( 0000,0110 ) US [ 1 ] # 2 1 MessageID ( 0000,0700 ) US [ 0 ] # 2 1 Priority ( 0000,0800 ) US [ 65278 ] # 2 1 DataSetTypejdicom : # 17 : DICOM_QR_SCP < < Dataset ( 0008,0018 ) UI [ ] # 0 0 SOPInstanceUID ( 0008,0052 ) CS [ IMAGE ] # 6 1 QueryRetrieveLevel ( 0010,0020 ) LO [ 19121212-1212 ] # 14 1 PatientID ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0013 ) IS [ ] # 0 0 InstanceNumberjdicom : DICOM_QR_SCP PDU receivedjdicom : # 17 : DICOM_QR_SCP > > C-FIND-RSP Patient Root Query/Retrieve Information Model - FIND SOP Class , status # ff00H [ StatusEntry.PENDING ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.1.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 258 ] # 2 1 DataSetType ( 0000,0900 ) US [ 65280 ] # 2 1 Statusjdicom : # 17 : DICOM_QR_SCP > > Dataset ( 0008,0005 ) CS [ ISO_IR 100 ] # 10 1 SpecificCharacterSet ( 0008,0018 ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024575915205577 ] # 50 1 SOPInstanceUID ( 0008,0050 ) SH [ 1912121-0034201 ] # 16 1 AccessionNumber ( 0008,0052 ) CS [ IMAGE ] # 6 1 QueryRetrieveLevel ( 0008,0054 ) AE [ DICOM_QR_SCP ] # 12 1 RetrieveAETitle ( 0010,0020 ) LO [ 19121212-1212 ] # 14 1 PatientID ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0010 ) SH [ 1912121-0034201 ] # 16 1 StudyID ( 0020,0013 ) IS [ 1 ] # 2 1 InstanceNumberjdicom : DICOM_QR_SCP Waiting for PDUjdicom : DICOM_QR_SCP PDU receivedjdicom : # 17 : DICOM_QR_SCP > > C-FIND-RSP Patient Root Query/Retrieve Information Model - FIND SOP Class , status # 0000H [ Success ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.1.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 257 ] # 2 1 DataSetType ( 0000,0900 ) US [ 0 ] # 2 1 Statusjdicom : DICOM_QR_SCP Waiting for PDUjdicom : Enter _dimseSCUs.waitUntilEmpty ( jdicom : Enter _as.sendReleaseRequest ( ) jdicom : # 17 : DICOM_QR_SCP < < A-RELEASE-RQ PDUjdicom : Leave DimseExchange.releaseAssoc ( ) jdicom : DICOM_QR_SCP PDU receivedjdicom : # 17 : DICOM_QR_SCP > > A-RELEASE-RP PDUjdicom : # 17 : DICOM_QR_SCP closing socketjdicom : DICOM_QR_SCP Leave DimseExchange.run ( ) Studyroot LOG : 1 Priority ( 0000,0800 ) US [ 65278 ] # 2 1 DataSetTypejdicom : # 23 : DICOM_QR_SCP < < Dataset ( 0008,0052 ) CS [ SERIES ] # 6 1 QueryRetrieveLevel ( 0008,0060 ) CS [ ] # 0 0 Modality ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ ] # 0 0 SeriesInstanceUID ( 0020,0011 ) IS [ ] # 0 0 SeriesNumber ( 0020,1209 ) IS [ ] # 0 0 NumberOfSeriesRelatedImagesjdicom : DICOM_QR_SCP PDU receivedjdicom : # 23 : DICOM_QR_SCP > > C-FIND-RSP Study Root Query/Retrieve Information Model - FIND SOP Class , status # ff00H [ StatusEntry.PENDING ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.2.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 258 ] # 2 1 DataSetType ( 0000,0900 ) US [ 65280 ] # 2 1 Statusjdicom : # 23 : DICOM_QR_SCP > > Dataset ( 0008,0005 ) CS [ ISO_IR 100 ] # 10 1 SpecificCharacterSet ( 0008,0050 ) SH [ 1912121-0034201 ] # 16 1 AccessionNumber ( 0008,0052 ) CS [ SERIES ] # 6 1 QueryRetrieveLevel ( 0008,0054 ) AE [ DICOM_QR_SCP ] # 12 1 RetrieveAETitle ( 0008,0060 ) CS [ OP ] # 2 1 Modality ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0010 ) SH [ 1912121-0034201 ] # 16 1 StudyID ( 0020,0011 ) IS [ 1 ] # 2 1 SeriesNumber ( 0020,1209 ) IS [ 1 ] # 2 1 NumberOfSeriesRelatedImagesjdicom : DICOM_QR_SCP Waiting for PDUjdicom : DICOM_QR_SCP PDU receivedjdicom : # 23 : DICOM_QR_SCP > > C-FIND-RSP Study Root Query/Retrieve Information Model - FIND SOP Class , status # 0000H [ Success ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.2.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 257 ] # 2 1 DataSetType ( 0000,0900 ) US [ 0 ] # 2 1 Statusjdicom : DICOM_QR_SCP Waiting for PDUjdicom : Enter _dimseSCUs.waitUntilEmpty ( jdicom : Enter _as.sendReleaseRequest ( ) jdicom : # 23 : DICOM_QR_SCP < < A-RELEASE-RQ PDUjdicom : Leave DimseExchange.releaseAssoc ( ) jdicom : DICOM_QR_SCP PDU receivedjdicom : # 23 : DICOM_QR_SCP > > A-RELEASE-RP PDUjdicom : # 23 : DICOM_QR_SCP closing socketjdicom : DICOM_QR_SCP Leave DimseExchange.run ( ) jdicom : # 24 : DICOM_QR_SCP < < A-ASSOCIATE-RQ PDUjdicom : *** request ***application context UID : nullcalled title : DICOM_QR_SCPcalling title : jdicommax pdu size : 32768max operation invoked : 1max operation performed : 1implementation class UID : 1.2.826.0.1.3680043.2.60.0.1implementation version Name : softlink_jdt103abstract syntax scu scp 1.2.840.10008.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.1 -1 -1 1.2.840.10008.5.1.4.1.2.2.1 -1 -1 1.2.840.10008.5.1.4.1.2.3.1 -1 -1 1.2.840.10008.5.1.4.1.2.1.2 -1 -1 1.2.840.10008.5.1.4.1.2.2.2 -1 -1 1.2.840.10008.5.1.4.1.2.3.2 -1 -1 nr abstract syntax pcid description 0 1.2.840.10008.1.1 1 Verification SOP Class ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 1 1.2.840.10008.5.1.4.1.2.1.1 3 Patient Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 2 1.2.840.10008.5.1.4.1.2.2.1 5 Study Root Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 3 1.2.840.10008.5.1.4.1.2.3.1 7 Patient/Study Only Query/Retrieve Information Model - FIND SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 4 1.2.840.10008.5.1.4.1.2.1.2 9 Patient Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 5 1.2.840.10008.5.1.4.1.2.2.2 11 Study Root Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax 6 1.2.840.10008.5.1.4.1.2.3.2 13 Patient/Study Only Query/Retrieve Information Model - MOVE SOP Cl ... ts-0 1.2.840.10008.1.2 Implicit VR Little Endian Transfer Syntax ***************Waiting for AssociationRspASSOCIATE_ACKNOWLEDGE detectedjdicom : # 24 : DICOM_QR_SCP > > A-ASSOCIATE-AC PDUjdicom : *** acknowledge ***max pdu size : 28672max operation invoked : 1max operation performed : 1implementation class UID : 1.2.752.24.3.3.25.7implementation version name : WIQRSCP_20_1abstract syntax scu scp nr pcid result transfer syntax 0 1 accepted 1.2.840.10008.1.2 1 3 accepted 1.2.840.10008.1.2 2 5 accepted 1.2.840.10008.1.2 3 7 accepted 1.2.840.10008.1.2 4 9 accepted 1.2.840.10008.1.2 5 11 accepted 1.2.840.10008.1.2 6 13 accepted 1.2.840.10008.1.2 *******************jdicom : DICOM_QR_SCP Enter DimseExchange.run ( ) jdicom : # 24 : DICOM_QR_SCP < < C-FIND-RQ Study Root Query/Retrieve Information Model - FIND SOP Classjdicom : DICOM_QR_SCP Waiting for PDU ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.2.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32 ] # 2 1 CommandField ( 0000,0110 ) US [ 1 ] # 2 1 MessageID ( 0000,0700 ) US [ 0 ] # 2 1 Priority ( 0000,0800 ) US [ 65278 ] # 2 1 DataSetTypejdicom : # 24 : DICOM_QR_SCP < < Dataset ( 0008,0018 ) UI [ ] # 0 0 SOPInstanceUID ( 0008,0052 ) CS [ IMAGE ] # 6 1 QueryRetrieveLevel ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0013 ) IS [ ] # 0 0 InstanceNumberjdicom : DICOM_QR_SCP PDU receivedjdicom : # 24 : DICOM_QR_SCP > > C-FIND-RSP Study Root Query/Retrieve Information Model - FIND SOP Class , status # ff00H [ StatusEntry.PENDING ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.2.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 258 ] # 2 1 DataSetType ( 0000,0900 ) US [ 65280 ] # 2 1 Statusjdicom : # 24 : DICOM_QR_SCP > > Dataset ( 0008,0005 ) CS [ ISO_IR 100 ] # 10 1 SpecificCharacterSet ( 0008,0018 ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024575915205577 ] # 50 1 SOPInstanceUID ( 0008,0050 ) SH [ 1912121-0034201 ] # 16 1 AccessionNumber ( 0008,0052 ) CS [ IMAGE ] # 6 1 QueryRetrieveLevel ( 0008,0054 ) AE [ DICOM_QR_SCP ] # 12 1 RetrieveAETitle ( 0020,000d ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476158 ] # 50 1 StudyInstanceUID ( 0020,000e ) UI [ 1.3.6.1.4.1.30071.8.345050320220.6024574499476159 ] # 50 1 SeriesInstanceUID ( 0020,0010 ) SH [ 1912121-0034201 ] # 16 1 StudyID ( 0020,0013 ) IS [ 1 ] # 2 1 InstanceNumberjdicom : DICOM_QR_SCP Waiting for PDUjdicom : DICOM_QR_SCP PDU receivedjdicom : # 24 : DICOM_QR_SCP > > C-FIND-RSP Study Root Query/Retrieve Information Model - FIND SOP Class , status # 0000H [ Success ] ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.2.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32800 ] # 2 1 CommandField ( 0000,0120 ) US [ 1 ] # 2 1 MessageIDBeingRespondedTo ( 0000,0800 ) US [ 257 ] # 2 1 DataSetType ( 0000,0900 ) US [ 0 ] # 2 1 Statusjdicom : DICOM_QR_SCP Waiting for PDUjdicom : Enter _dimseSCUs.waitUntilEmpty ( jdicom : Enter _as.sendReleaseRequest ( ) jdicom : # 24 : DICOM_QR_SCP < < A-RELEASE-RQ PDUjdicom : Leave DimseExchange.releaseAssoc ( ) jdicom : DICOM_QR_SCP PDU receivedjdicom : # 24 : DICOM_QR_SCP > > A-RELEASE-RP PDUjdicom : # 24 : DICOM_QR_SCP closing socketjdicom : DICOM_QR_SCP Leave DimseExchange.run ( ) PatientStudyOnlyOM_QR_SCP < < C-FIND-RQ Patient/Study Only Query/Retrieve Information Model - FIND SOP Classjdicom : DICOM_QR_SCP Waiting for PDU ( 0000,0002 ) UI [ 1.2.840.10008.5.1.4.1.2.3.1 ] # 28 1 AffectedSOPClassUID ( 0000,0100 ) US [ 32 ] # 2 1 CommandField ( 0000,0110 ) US [ 1 ] # 2 1 MessageID"
"@ using Microsoft.AspNetCore.Mvc.Localization @ inject IViewLocalizer Localizer < h1 > @ Localizer [ `` Index '' ] < /h1 > ... public void ConfigureServices ( IServiceCollection services ) { ... services.AddLocalization ( a = > a.ResourcesPath = `` / '' ) ; services.Configure < RequestLocalizationOptions > ( a = > { CultureInfo [ ] supportedCultures = { new CultureInfo ( `` sv-SE '' ) , new CultureInfo ( `` se '' ) } ; a.DefaultRequestCulture = new RequestCulture ( `` se '' ) ; a.SupportedCultures = supportedCultures ; a.SupportedUICultures = supportedCultures ; } ) ; ... } public class HomeController : Controller { private readonly Context _context ; private readonly IStringLocalizer < HomeController > _localizer ; public HomeController ( Context context , IStringLocalizer < HomeController > localizer ) { _context = context ; _localizer = localizer ; } ... }"
NET40NET45 # If NET45 then Sub Async ... End Sub # Else Sub ... End Sub # End If
"public class AttributeFilter < T > : IEqualityComparer < AttributeFilter < T > > { private string _attributeName ; private T _attributeValue ; private List < T > _attributeValues { get ; set ; } public AttributeFilter ( string attributeName ) { AttributeName = attributeName ; _attributeValues = new List < T > ( ) ; } public void AddValues ( T attributeValue ) { AttributeValue = attributeValue ; if ( ! _attributeValues.Contains ( AttributeValue ) ) { _attributeValues.Add ( AttributeValue ) ; } } // Ive cut out the getter setter etc that is not relevant } List < AttributeFilter < T > > public class GroupEntity < T > { private string _groupName ; // because I want to a have a List < AttributeFilter < T > > , but I dont really want this here . because of program.cs when I initialise a new GroupEntity < > I have to tell it what type . I wont know . The type could be int32 , string , long or whatever . private List < AttributeFilter < T > > _filters ; public void AddFilters ( AttributeFilter < T > attributeFilter ) { if ( ! _filters.Contains ( attributeFilter , attributeFilter ) ) { _filters.Add ( attributeFilter ) ; } } public GroupEntity ( ) { _filters = new List < AttributeFilter < T > > ( ) ; } public GroupEntity ( string groupName ) : this ( ) { _groupName = groupName ; } class Program { static void Main ( string [ ] args ) { // Create AttributeFilter object for user attribute : EYAccountType var at1 = new AttributeFilter < string > ( `` EYAccountType '' ) ; at1.AddValues ( `` 02 '' ) ; at1.AddValues ( `` 03 '' ) ; at1.AddValues ( `` 04 '' ) ; at1.AddValues ( `` 05 '' ) ; // try adding anothr AtributeFilter with same name . var at3 = new AttributeFilter < string > ( `` EYAccountType1 '' ) ; at3.AddValues ( `` 06 '' ) ; at3.AddValues ( `` 07 '' ) ; // Create AttributeFilter object for user attribute : userAccountControl var at2 = new AttributeFilter < int > ( `` userAccountControl '' ) ; at2.AddValues ( 512 ) ; at2.AddValues ( 544 ) ; at2.AddValues ( 546 ) ; at2.AddValues ( 4096 ) ; // Now create a GroupEntity object var group1 = new GroupEntity < string > ( `` My_First_AD_Group_Name '' ) ; // Try adding the above two AttributeFilter objects we created to the GroupEntity object . group1.AddFilters ( at1 ) ; group1.AddFilters ( at3 ) ; // This is the problem . I know why this is happening . because I initialised the var group1 = new GroupEntity < string > . So it wont accept at2 because at2 is taking in int . //group1.AddFilters ( at2 ) ; }"
< Grid > < Grid.RowDefinitions > < RowDefinition > < /RowDefinition > < RowDefinition > < /RowDefinition > < /Grid.RowDefinitions > < toolkit : AutoCompleteBox > < toolkit : AutoCompleteBox.ContextMenu > < ContextMenu > < MenuItem Header= '' Menu Item 1 '' > < /MenuItem > < MenuItem Header= '' Menu Item 2 '' > < /MenuItem > < /ContextMenu > < /toolkit : AutoCompleteBox.ContextMenu > < /toolkit : AutoCompleteBox > < TextBox Grid.Row= '' 1 '' > < TextBox.ContextMenu > < ContextMenu > < MenuItem Header= '' Menu Item 1 '' > < /MenuItem > < MenuItem Header= '' Menu Item 2 '' > < /MenuItem > < /ContextMenu > < /TextBox.ContextMenu > < /TextBox > < /Grid >
"static class AnimalTopology { IEnumerable < Animal > ListVertebrated ( Func < Skeleton , bool > selector ) { // remainder omitted } } static class VertebratedSelectorsA { // this is compatible with `` Func < Skeleton , bool > selector '' static bool Algorithm1 ( Skeleton s ) { // ... } } static class VertebratedSelectorsB { // this method creates the function for later application static Func < Skeleton , bool > CreateAlgorithm1Selector ( Skeleton s ) { // ... } }"
Page.Form.Controls [ 1 ] .Controls [ 1 ] .Controls [ 4 ] .Controls [ 1 ] .Controls [ 13 ] .Controls [ 1 ] .Controls [ 0 ] .Controls [ 0 ] .Controls [ 4 ] .FindControl ( `` '' ) ;
"`` dependencies '' : { ... other stuff ... `` Foo.Bar '' : `` * '' } ,"
"public static Mat Detect ( string filename ) { var cfg = `` 4000.cfg '' ; var model = `` 4000.weights '' ; //YOLOv2 544x544 var threshold = 0.3 ; var mat = Cv2.ImRead ( filename ) ; var w = mat.Width ; var h = mat.Height ; var blob = CvDnn.BlobFromImage ( mat , 1 / 255.0 , new OpenCvSharp.Size ( 416 , 416 ) , new Scalar ( ) , true , false ) ; var net = CvDnn.ReadNetFromDarknet ( Path.Combine ( System.AppDomain.CurrentDomain.BaseDirectory , cfg ) , Path.Combine ( System.AppDomain.CurrentDomain.BaseDirectory , model ) ) ; net.SetInput ( blob , `` data '' ) ; Stopwatch sw = new Stopwatch ( ) ; sw.Start ( ) ; var prob = net.Forward ( ) ; // Process NeuralNet sw.Stop ( ) ; Console.WriteLine ( $ '' Runtime : { sw.ElapsedMilliseconds } ms '' ) ; const int prefix = 5 ; //skip 0~4 for ( int i = 0 ; i < prob.Rows ; i++ ) { var confidence = prob.At < float > ( i , 4 ) ; if ( confidence > threshold ) { //get classes probability Cv2.MinMaxLoc ( prob.Row [ i ] .ColRange ( prefix , prob.Cols ) , out _ , out OpenCvSharp.Point max ) ; var classes = max.X ; var probability = prob.At < float > ( i , classes + prefix ) ; if ( probability > threshold ) //more accuracy { //get center and width/height var centerX = prob.At < float > ( i , 0 ) * w ; var centerY = prob.At < float > ( i , 1 ) * h ; var width = prob.At < float > ( i , 2 ) * w ; var height = prob.At < float > ( i , 3 ) * h ; //label formating var label = $ '' { Labels [ classes ] } { probability * 100:0.00 } % '' ; Console.WriteLine ( $ '' confidence { confidence * 100:0.00 } % { label } '' ) ; var x1 = ( centerX - width / 2 ) < 0 ? 0 : centerX - width / 2 ; //avoid left side over edge //draw result mat.Rectangle ( new OpenCvSharp.Point ( x1 , centerY - height / 2 ) , new OpenCvSharp.Point ( centerX + width / 2 , centerY + height / 2 ) , Colors [ classes ] , 2 ) ; var textSize = Cv2.GetTextSize ( label , HersheyFonts.HersheyTriplex , 0.5 , 1 , out var baseline ) ; Cv2.Rectangle ( mat , new Rect ( new OpenCvSharp.Point ( x1 , centerY - height / 2 - textSize.Height - baseline ) , new OpenCvSharp.Size ( textSize.Width , textSize.Height + baseline ) ) , Colors [ classes ] , Cv2.FILLED ) ; Cv2.PutText ( mat , label , new OpenCvSharp.Point ( x1 , centerY - height / 2 - baseline ) , HersheyFonts.HersheyTriplex , 0.5 , Scalar.Black ) ; } } } return mat ; }"
import clrclr.AddReference ( ... ) from ... import ...
"< Page x : Class= '' NativeBug.MainPage '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' mc : Ignorable= '' d '' > < Grid Background= '' { ThemeResource ApplicationPageBackgroundThemeBrush } '' > < ! -- INSERT THIS LABEL -- > < TextBlock x : Name= '' _Label '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' / > < /Grid > < /Page > using System ; using System.Collections.Generic ; namespace NativeBug { public sealed partial class MainPage { public MainPage ( ) { InitializeComponent ( ) ; var startPoint = new Point2D ( 50 , 50 ) ; var points = new [ ] { new Point2D ( 100 , 100 ) , new Point2D ( 100 , 50 ) , new Point2D ( 50 , 100 ) , } ; var bounds = ComputeBounds ( startPoint , points , 15 ) ; _Label.Text = $ '' { bounds.MinX } , { bounds.MinY } = > { bounds.MaxX } , { bounds.MaxY } '' ; } private static Rectangle2D ComputeBounds ( Point2D startPoint , IEnumerable < Point2D > points , double strokeThickness = 0 ) { var lastPoint = startPoint ; var cumulativeBounds = new Rectangle2D ( ) ; foreach ( var point in points ) { var bounds = ComputeBounds ( lastPoint , point , strokeThickness ) ; cumulativeBounds = cumulativeBounds.Union ( bounds ) ; lastPoint = point ; } return cumulativeBounds ; } private static Rectangle2D ComputeBounds ( Point2D fromPoint , Point2D toPoint , double strokeThickness ) { var bounds = new Rectangle2D ( fromPoint.X , fromPoint.Y , toPoint.X , toPoint.Y ) ; // ** Uncomment the line below to see the difference ** //return strokeThickness < = 0 ? bounds : bounds.Inflate2 ( strokeThickness ) ; return strokeThickness < = 0 ? bounds : bounds.Inflate1 ( strokeThickness ) ; } } public struct Point2D { public readonly double X ; public readonly double Y ; public Point2D ( double x , double y ) { X = x ; Y = y ; } } public struct Rectangle2D { public readonly double MinX ; public readonly double MinY ; public readonly double MaxX ; public readonly double MaxY ; private bool IsEmpty = > MinX == 0 & & MinY == 0 & & MaxX == 0 & & MaxY == 0 ; public Rectangle2D ( double x1 , double y1 , double x2 , double y2 ) { MinX = Math.Min ( x1 , x2 ) ; MinY = Math.Min ( y1 , y2 ) ; MaxX = Math.Max ( x1 , x2 ) ; MaxY = Math.Max ( y1 , y2 ) ; } public Rectangle2D Union ( Rectangle2D rectangle ) { if ( IsEmpty ) { return rectangle ; } var newMinX = Math.Min ( MinX , rectangle.MinX ) ; var newMinY = Math.Min ( MinY , rectangle.MinY ) ; var newMaxX = Math.Max ( MaxX , rectangle.MaxX ) ; var newMaxY = Math.Max ( MaxY , rectangle.MaxY ) ; return new Rectangle2D ( newMinX , newMinY , newMaxX , newMaxY ) ; } public Rectangle2D Inflate1 ( double value ) { var halfValue = value * .5 ; return new Rectangle2D ( MinX - halfValue , MinY - halfValue , MaxX + halfValue , MaxY + halfValue ) ; } public Rectangle2D Inflate2 ( double value ) { var halfValue = value * .5 ; var x1 = MinX - halfValue ; var y1 = MinY - halfValue ; var x2 = MaxX + halfValue ; var y2 = MaxY + halfValue ; return new Rectangle2D ( x1 , y1 , x2 , y2 ) ; } } }"
Uri test = new Uri ( `` http : //server/folder ... / '' ) ; test.PathAndQuery ;
"[ Flags ] public enum Donkeys { [ Display ( Name = `` Monkey 1 '' ) ] Donkey1 = 0 , [ Description ( `` Monkey 2 '' ) ] Donkey2 = 1 }"
public interface ILogManager { void RemoveListener ( ILogListener listener ) ; }
"protected override void OnPaint ( PaintEventArgs e ) { } private void button1_Click ( object sender , EventArgs e ) { }"
Public Partial Class Index Inherits System.Web.Mvc.Viewpage ( Of List ( Of Task ) ) End Class public partial class DirList : System.Web.Mvc.ViewPage { }
@ inherits ViewPage @ Authenticate ( RedirectUrl = `` /Login '' ) < div > Hello @ UserSession.UserName < /div > < div > You are in the secured area now < /div >
interface IFoo { int Offset { get ; } } interface IBar : IFoo { int Offset { set ; } }
var foo = await SomeMethod ( ) ;
using Bar ;
mi.GetMethodBody ( ) .GetILAsByteArray ( )
"UserType userType = ( UserType ) Enum.Parse ( typeof ( UserType ) , iUserType.ToString ( ) ) ;"
"// Controller List < dynamic > myLists = new List < dynamic > ( ) ; for ( int i=0 ; i < 3 ; i++ ) { var ano = new { a= ' a ' , b = i } ; myLists.Add ( ano ) ; } Session [ `` rows '' ] = myLists ; // My Viewforeach ( dynamic row in ( Session [ `` rows '' ] as List < dynamic > ) ) { < div > @ row < /div > // output { a : ' a ' , b :1 } < div > @ row.a < /div > // throw the error . }"
"ratio = newValue / originalvalue double NearestLowerFactor ( float value , double factor ) { return Math.Floor ( value / factor ) * factor ; }"
var inTransitStocks = orderHistories.Where ( oh = > oh.Shipped_Qty > 0 ) .Select ( oh = > oh.Shipped_Qty ) ; //.ToList ( ) ; var inTransitStock = ( int ) inTransitStocks.Sum ( ) ; SELECT [ t0 ] . [ Shipped Qty ] FROM [ dbo ] . [ Order History ] AS [ t0 ] WHERE ( [ t0 ] . [ Shipped Qty ] > @ p0 ) AND ( [ t0 ] . [ CUST_ID ] = @ p1 ) AND ( [ t0 ] . [ SHIP_TO_ID ] = @ p2 ) AND ( [ t0 ] . [ Item ] = @ p3 ) AND ( ( [ t0 ] . [ DT_LST_SHP ] > = @ p4 ) OR ( UNICODE ( [ t0 ] . [ LN_STA ] ) = @ p5 ) )
"< Application x : Class= '' CDesign.App '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' clr-namespace : CDesign '' StartupUri= '' MainWindow.xaml '' > < Application.Resources > < ResourceDictionary x : Name= '' ThemeDictionary '' > < ResourceDictionary.MergedDictionaries > < ResourceDictionary Source= '' pack : //application : , , ,/AppStyles ; component/Resources/Icons.xaml '' / > < ResourceDictionary Source= '' pack : //application : , , ,/AppStyles ; component/Resources/IconsNonShared.xaml '' / > < ! -- MahApps.Metro resource dictionaries . Make sure that all file names are Case Sensitive ! -- > < ResourceDictionary Source= '' pack : //application : , , ,/MahApps.Metro ; component/Styles/Controls.xaml '' / > < ResourceDictionary Source= '' pack : //application : , , ,/MahApps.Metro ; component/Styles/Fonts.xaml '' / > < ResourceDictionary Source= '' pack : //application : , , ,/MahApps.Metro ; component/Styles/Colors.xaml '' / > < ! -- Accent and AppTheme setting -- > < ResourceDictionary x : Uid= '' Accents '' x : Name= '' Accents '' Source= '' pack : //application : , , ,/MahApps.Metro ; component/Styles/Accents/Blue.xaml '' / > < ResourceDictionary x : Uid= '' BaseTheme '' x : Name= '' BaseTheme '' Source= '' pack : //application : , , ,/MahApps.Metro ; component/Styles/Accents/BaseDark.xaml '' / > < /ResourceDictionary.MergedDictionaries > < /ResourceDictionary > < /Application.Resources >"
"public ReactiveAsyncCommand DeleteCommand { get ; protected set ; } ... DeleteCommand = new ReactiveAsyncCommand ( ) ; DeleteCommand.RegisterAsyncAction ( DeleteEntity ) ; ... private void DeleteEntity ( object obj ) { if ( MessageBox.Show ( `` Do you really want to delete this entity ? `` , `` Confirm '' , MessageBoxButton.YesNo ) == MessageBoxResult.Yes ) { //some delete operations } }"
System.InvalidOperationExceptionSystem.NotSupportedExceptionSystem.ArgumentExceptionKeyNotFoundException
"{ name : `` Name '' , type : `` simple1 '' , value : 100 } ; { name : `` Name '' , type : { optional1 : { setting1 : `` s1 '' , setting2 : `` s2 '' , ///etc . } , value : 100 } ; public class Configuration { [ JsonProperty ( PropertyName = `` name '' ) ] public string Name { get ; set ; } [ JsonProperty ( PropertyName = `` type '' ) ] public MyEnumTypes Type { get ; set ; } public OptionalType TypeAdditionalData { get ; set ; } [ JsonProperty ( PropertyName = `` value '' ) ] public int Value { get ; set ; } public bool ShouldSerializeType ( ) { OptionalSettingsAttribute optionalSettingsAttr = this.Type.GetAttributeOfType < OptionalSettingsAttribute > ( ) ; return optionalSettingsAttr == null ; } public bool ShouldSerializeTypeAdditionalData ( ) { OptionalSettingsAttribute optionalSettingsAttr = this.Type.GetAttributeOfType < OptionalSettingsAttribute > ( ) ; return optionalSettingsAttr ! = null ; } } public enum MyEnumTypes { [ EnumMember ( Value = `` simple1 '' ) ] Simple1 , [ EnumMember ( Value = `` simple2 '' ) ] Simple2 , [ OptionalSettingsAttribute ] [ EnumMember ( Value = `` optional1 '' ) ] Optional1 , [ EnumMember ( Value = `` optional2 '' ) ] [ OptionalSettingsAttribute ] Optional2 } public class ConfigurationCustomConverter : JsonConverter { public override bool CanConvert ( Type objectType ) { return typeof ( Configuration ) .IsAssignableFrom ( objectType ) ; } public override object ReadJson ( JsonReader reader , Type objectType , object existingValue , JsonSerializer serializer ) { return serializer.Deserialize < Configuration > ( reader ) ; } public override void WriteJson ( JsonWriter writer , object value , JsonSerializer serializer ) { //my changes here serializer.Serialize ( writer , value ) ; } [ JsonConverter ( typeof ( ConfigurationCustomConverter ) ) ] public class Configuration"
ParserResult < Options > parserResult = Parser.Default.ParseArguments < Options > ( args ) ; WriteLine ( parserResult.Tag ) ;
"List < Shape > Shapes = new List < Shape > ( ) ; // somwhere later if ( CurrentShape == `` polyline '' ) { Shapes.Add ( new Polyline ( Points ) ) ; } else if ( CurrentShape == `` rectangle '' ) { Shapes.Add ( new Rectangle ( BeginPoint , EndPoint ) ) ; } // and so on ."
"var options = new OnMessageOptions { AutoComplete = true , AutoRenewTimeout = TimeSpan.FromMinutes ( 3 ) } ; _queueClient.OnMessage ( OnMessage , options ) ; internal sealed class CalculateService : StatelessService { public CalculateService ( StatelessServiceContext context ) : base ( context ) { } /// < summary > /// Optional override to create listeners ( e.g. , TCP , HTTP ) for this service replica to handle client or user requests . /// < /summary > /// < returns > A collection of listeners. < /returns > protected override IEnumerable < ServiceInstanceListener > CreateServiceInstanceListeners ( ) { string serviceBusQueueName = CloudConfigurationManager.GetSetting ( `` QueueName '' ) ; yield return new ServiceInstanceListener ( context = > new ServiceBusQueueCommunicationListener ( new Handler ( this ) , context , serviceBusQueueName ) , `` StatelessService-ServiceBusQueueListener '' ) ; } } internal sealed class Handler : AutoCompleteServiceBusMessageReceiver { protected override Task ReceiveMessageImplAsync ( BrokeredMessage message , CancellationToken cancellationToken ) { ServiceEventSource.Current.ServiceMessage ( _service , $ '' Handling queue message { message.MessageId } '' ) ; var computeRole = new ExcelCompute ( ) ; var rMessage = new RangeMessage ( ) ; rMessage = message.GetBody < RangeMessage > ( ) ; var result = computeRole.OnMessage ( rMessage , message.MessageId ) ; //returns true if the compute was successful ( which it currently , always is ) return Task.FromResult ( result ) ; } }"
"public Homework ( ) { InitializeComponent ( ) ; Title = `` Homework '' ; } public class MyTabbedPage : TabbedPage { public MyTabbedPage ( ) { this.CurrentPageChanged +=delegate { this.Title = this.CurrentPage.Title ; } ; } } public App ( ) { InitializeComponent ( ) ; MainPage = new NavigationPage ( new LoginPage ( ) ) ; } btnLogin.Clicked +=async delegate { await Navigation.PushAsync ( new ParentDashboard ( ) , false ) ; } ; public partial class ParentDashboard : MyTabbedPage { public ParentDashboard ( ) { InitializeComponent ( ) ; Title= '' Home '' ; //upto here title working } }"
"U Upcast < T , U > ( T x ) where T : U { return x ; } let ucast < 'T , ' U when 'T : > ' U > ( x : 'T ) = x : > ' U"
"public static bool IsWithinRange < T > ( this IEnumerable < T > enumerable , int max ) { return enumerable.Count ( ) < = max ; }"
// Once your app is done using the HttpClient object call dispose to // free up system resources ( the underlying socket and memory used for the object ) httpclient.Dispose ( ) ;
string result = string.Empty ; try { //site url ClientContext context = new ClientContext ( `` siturl '' ) ; // The SharePoint web at the URL . Web web = context.Web ; FileCreationInformation newFile = new FileCreationInformation ( ) ; newFile.Content = System.IO.File.ReadAllBytes ( @ '' C : \test.mp4 '' ) ; newFile.Url = `` test.mp4 '' ; List docs = web.Lists.GetByTitle ( `` Learning Materials2 '' ) ; Microsoft.SharePoint.Client.File uploadFile = docs.RootFolder.Files.Add ( newFile ) ; context.Load ( uploadFile ) ; context.ExecuteQuery ( ) ; } catch ( Exception Ex ) { }
public class MyException < T > : Exception { public string MyProperty { get ; } public MyException ( T prop ) : base ( prop.ToString ( ) ) { MyProperty = prop ? .ToString ( ) ; } } public class MyDerivedStringException : MyException < string > { public MyDerivedStringException ( string prop ) : base ( prop ) { } } public class MyDerivedIntException : MyException < int > { public MyDerivedIntException ( int prop ) : base ( prop ) { } } try { ... } catch ( Exception e ) when ( e is MyDerivedStringException || e is MyDerivedIntException ) { }
"public void DisplayDuration ( TimeSpan duration ) { string formattedDuration ; if ( duration.TotalMilliseconds < 2000 ) formattedDuration = string.Format ( `` { 0 } ms '' , duration.TotalMilliseconds ) ; else if ( duration.TotalSeconds < 60 ) formattedDuration = string.Format ( `` { 0 } sec '' , duration.TotalSeconds ) ; else formattedDuration = string.Format ( `` { 0 } min '' , duration.TotalMinutes ) ; this.TimingLabel.Text = formattedDuration ; } formattedDuration = string.Format ( `` { 0 } ms '' , duration.TotalMilliseconds.ToString ( ) ) ;"
"( From , To ) ( From , To ) ... ( From , To ) ( 2019-1-10 , 2019-1-12 ) ( 2019-3-10 , 2019-3-14 ) ( 2019-1-12 , 2019-1-13 ) ( 2019-1-10 , 2019-1-12 ) + ( 2019-1-12 , 2019-1-13 ) - > ( 2019-1-10 , 2019-1-13 ) ( 2019-3-10 , 2019-3-14 ) - > ( 2019-3-10 , 2019-3-14 )"
"Bitmap b = new Bitmap ( 100,100 ) ; MemoryStream ms = new MemoryStream ( ) ; b.Save ( ms , System.Drawing.Imaging.ImageFormat.Png ) ; Texture2D tex = Texture2D.Load ( g.device , ms ) ; // crashing herems.Close ( ) ;"
"public static List < char > rotate ( this List < char > currentList , int periodes ) { if ( periodes ! = 1 ) { int x = currentList.Count ( ) - 1 ; return rotate ( currentList.Skip ( x ) . Concat ( currentList.Take ( x ) ) .ToList < char > ( ) , periodes - 1 ) ; } return currentList ; } ring = new List < char > ( ) { ' a ' , ' b ' , ' c ' , 'd ' , ' e ' , ' f ' , ' g ' , ' h ' , ' i ' , ' j ' } ; J A B C D E F G H II J A B C D E F G HH I J A B C D E F GG H I J A B C D E FF G H I J A B C D E Recursive StepsE F G H I J A B C DD E F G H I J A B CC D E F G H I J A BB C D E F G H I J A A B C D E F G H I J Result"
"enum Myenum { a , b , c= 0 } public class Program { static void Main ( string [ ] args ) { Myenum ma = Myenum.a ; Console.WriteLine ( ma ) ; } } enum Myenum { a , b=0 , c } public class Program { static void Main ( string [ ] args ) { Myenum ma = Myenum.a ; Console.WriteLine ( ma ) ; } }"
private List < tableName > MyDynamicQuery ( string tableName ) { IEnumerable < tableName > dynamicList ; using ( MyEntities db = _conn.GetContext ( ) ) { dynamicList = ( from q in db. < tableName > select q ) .ToList ( ) ; } return dynamicList ; }
"the quick brown fox jumped over the lazy dogthe quick brown fox jumped over the lazy dogthe quick brown fox jumped over the lazy dogthe quick brown fox jumped over the lazy dog thehuick brown fox jumped over the lazy dog var txtFiles = Directory.GetFiles ( @ '' E : \PROJ\replaceY\replaceY\ '' , `` *.txt '' ) ; foreach ( string currentFile in txtFiles ) { string [ ] lines = File.ReadAllLines ( currentFile ) ; foreach ( string line in lines ) { var theString = line ; var aStringBuilder = new StringBuilder ( theString ) ; aStringBuilder.Remove ( 3 , 2 ) ; aStringBuilder.Insert ( 3 , `` h '' ) ; theString = aStringBuilder.ToString ( ) ; using ( StreamWriter outfile = new StreamWriter ( currentFile ) ) { outfile.Write ( theString.ToString ( ) ) ; } Console.WriteLine ( theString ) ; Console.ReadKey ( ) ; } }"
"public string ProductName { get ; set ; } ... public Price Price { get ; set ; } public class Price { public Price ( decimal amount , string currency ) { Amount = amount ; Currency = currency ; } public decimal Amount { get ; private set ; } public string Currency { get ; private set ; } }"
"Input : A = [ 1 , 2 ] B = [ -2 , -1 ] C = [ -1 , 2 ] D = [ 0 , 2 ] Output:2Explanation : The two tuples are : 1 . ( 0 , 0 , 0 , 1 ) - > A [ 0 ] + B [ 0 ] + C [ 0 ] + D [ 1 ] = 1 + ( -2 ) + ( -1 ) + 2 = 0 2 . ( 1 , 1 , 0 , 0 ) - > A [ 1 ] + B [ 1 ] + C [ 0 ] + D [ 0 ] = 2 + ( -1 ) + ( -1 ) + 0 = 0 public static int FourSumCount ( int [ ] A , int [ ] B , int [ ] C , int [ ] D ) { int count = 0 ; List < int > map1 = new List < int > ( ) ; List < int > map2 = new List < int > ( ) ; for ( int i = 0 ; i < A.Length ; i++ ) for ( int y = 0 ; y < B.Length ; y++ ) { map1.Add ( A [ i ] + B [ y ] ) ; map2.Add ( C [ i ] + D [ y ] ) ; } for ( int i = 0 ; i < map2.Count ( ) ; i++ ) { for ( int j = 0 ; j < map2.Count ( ) ; j++ ) //if ( map1.Contains ( map2 [ i ] *-1 ) ) // { // var newList = map1.FindAll ( s = > s.Equals ( map2 [ i ] * -1 ) ) ; // count = count + newList.Count ( ) ; // } if ( map1 [ i ] + map2 [ j ] == 0 ) { count++ ; } } return count ; }"
"public interface ID { string MReturn ( ) ; } public class D : ID { public string MReturn ( ) { return `` Hi '' ; } } public class E : ID { public string MReturn ( ) { return `` HiE '' ; } } public class F : ID { public string MReturn ( ) { return `` Hif '' ; } } private static IUnityContainer BuildUnityContainer ( ) { var container = new UnityContainer ( ) ; container.RegisterType < ID , D > ( ) ; container.RegisterType < IController , HomeController > ( `` feedbackRepo '' ) ; container.RegisterType < ID , E > ( ) ; container.RegisterType < ID , F > ( ) ; // register all your components with the container here // it is NOT necessary to register your controllers // e.g . container.RegisterType < ITestService , TestService > ( ) ; return container ; }"
public bool AllowsDuplicates { get ; } = true ; public bool AllowsDuplicates = > true ; private readonly bool _backingField = true ; public bool AllowsDuplicates { get { return _backingField ; } } public bool AllowsDuplicates { get { return true ; } }
"var keyspaceStream = Observable.FromEventPattern < RedisSubscriptionReceivedEventArgs > ( h = > keyspaceMonitor.KeySpaceChanged += h , h = > keyspaceMonitor.KeySpaceChanged -= h ) ; var throttledStream = keyspaceStream.Throttle ( TimeSpan.FromSeconds ( 10 ) ) ;"
"< Command Name= '' notepad '' > < Example > Notepad Example Sentence ! < /Example > < ListenFor > Notepad { wildcardArgs } < /ListenFor > < Feedback > Notepadding { wildcardArgs } < /Feedback > < Navigate/ > < /Command > < PhraseTopic Label= '' wildcardArgs '' Scenario= '' Dictation '' > < ! -- < Subject > Wildcard < /Subject > -- > < /PhraseTopic > public static CortanaCommand ProcessCommand ( SpeechRecognitionResult speechRecognitionResult , CommandDiagnostics diagnostics ) { // Get the name of the voice command and the raw text string voiceCommandName = speechRecognitionResult.RulePath [ 0 ] ; string text = speechRecognitionResult.Text ; string mode = speechRecognitionResult.SemanticInterpretation.Properties [ interpretationKey ] .FirstOrDefault ( ) ; // When mode is voice , text is `` Notepad Example sentence ! '' // When mode is text , text is `` Notepad ... '' // How can one retrieve `` Example sentence ! '' from `` ... '' ! ? // Is there some property other than speechRecognitionResult.Text that holds the raw text typed ? string argument = null ; CortanaCommand processedCommand = null ; switch ( voiceCommandName ) { // ... case CortanaCommand.Notepad : const string notepad = `` Notepad '' ; argument = CortanaCommand.StripOffCommandName ( notepad , text ) ; processedCommand = new NotepadCortanaCommand ( argument , diagnostics ) ; break ; default : Debug.WriteLine ( `` Command Name Not Found : `` + voiceCommandName ) ; break ; } return processedCommand ; }"
public class Client { public Int32 ClientID { get ; set ; } public virtual ICollection < Inquiry > InquiryManufacturers { get ; set ; } public virtual ICollection < Product > Products { get ; set ; } public virtual ICollection < Inquiry > InquiryRetailers { get ; set ; } } public class Product { public Int32 ProductID { get ; set ; } public Int32 ClientID { get ; set ; } public virtual Client Client { get ; set ; } public virtual ICollection < Inquiry > Inquiries { get ; set ; } } public class Inquiry { public Int32 InquiryID { get ; set ; } public Int32 ProductID { get ; set ; } public Int32 ManufacturerID { get ; set ; } public Int32 RetailerID { get ; set ; } public virtual Product Product { get ; set ; } public virtual Client Manufacturer { get ; set ; } public virtual Client Retailer { get ; set ; } } HasRequired ( i = > i.Product ) .WithMany ( p = > p.Inquiries ) ; HasRequired ( i = > i.Manufacturer ) .WithMany ( p = > p.InquiryManufacturers ) .HasForeignKey ( p = > p.ManufacturerID ) ; HasRequired ( i = > i.Retailer ) .WithMany ( p = > p.InquiryRetailers ) .HasForeignKey ( p = > p.RetailerID ) ;
"string [ ] temp = { `` a '' , `` b '' , `` c '' , `` d '' , `` e '' , `` f '' , `` g '' , `` h '' , `` i '' , `` j '' } ; string [ ] temp2 = { `` a , b , c '' , `` d , e , f '' , `` g , h , i '' , `` j '' } ; string temp3 = string.Join ( `` , '' , temp ) ; `` a , b , c , d , e , f , g , h , i , j ''"
[ StructLayout ( LayoutKind.Explicit ) ] struct STRUCT { [ FieldOffset ( 0 ) ] public Int64 fieldTotal ; [ FieldOffset ( 0 ) ] public Int32 fieldFirst ; [ FieldOffset ( 32 ) ] public Int32 fieldSecond ; } STRUCT str = new STRUCT ( ) ; str.fieldFirst = Int32.MaxValue ; str.fieldSecond = Int32.MaxValue ; Console.WriteLine ( str.fieldTotal ) ; // < -- -- - I 'd expect both these values Console.WriteLine ( Int64.MaxValue ) ; // < -- -- - to be the same . Console.ReadKey ( ) ;
// ReSharper disable UnusedMember.Globalpublic class TheClass : IInterfaceWiredUsingSpringDI// ReSharper restore UnusedMember.Global [ MeansImplicitUse ] public class IoCAttribute : Attribute { } [ IoC ] public class TheClass : IInterfaceWiredUsingSpringDI
"if 66 = 'A1 ' or '0110 1 ' 6e = 'A2 ' or '0110 2 ' e6 = 'B1 ' or '1110 1 ' ee = 'B2 ' or '1110 2'then what is A3 or B3 , etc . [ init ] [ HouseCode | DeviceCode ] [ ready ] [ HouseCode | FunctionCode ] 04 66 06 62 // A1 ON04 6e 06 62 // A2 ON 04 62 06 62 // A3 ON04 6a 06 62 // A4 ON04 61 06 62 // A5 ON04 69 06 62 // A6 ON04 65 06 62 // A7 ON04 6d 06 62 // A8 ON04 67 06 62 // A9 ON04 6f 06 62 // A10 ON04 63 06 62 // A11 ON04 6b 06 62 // A12 ON04 60 06 62 // A13 ON04 68 06 62 // A14 ON04 64 06 62 // A15 ON04 6c 06 62 // A16 ON04 e6 06 e2 // B1 ON 04 ee 06 e2 // B2 ON 04 e2 06 e2 // B3 ON 04 ea 06 e2 // B4 ON ... .04 ec 06 e2 // B16 ON04 66 06 63 // A1 Off04 e6 06 e3 // B1 Off04 66 06 61 // All A lights On ( using A1 as the starting point ) 04 e6 06 e1 // All B lights On ( using B1 as the starting point ) 04 66 06 66 // All A lights Off ( using A1 as the starting point ) 04 e6 06 66 // All B lights Off ( using A1 as the starting point ) 04 66 06 64 2a // A1 Dim 2004 66 06 64 2c // A1 Dim 2104 66 06 64 2e // A1 Dim 2204 66 06 65 2a // A1 Bright 2004 66 06 65 69 // A1 Bright 50 HouseCode DeviceCode Binary Value A 1 0110 B 2 1110 C 3 0010 D 4 1010 E 5 0001 F 6 1001 G 7 0101 H 8 1101 I 9 0111 J 10 1111 K 11 0011 L 12 1011 M 13 0000 N 14 1000 O 15 0100 P 16 1100FunctionCode Binary ValueAll Units Off 0000All Lights On 0001On 0010Off 0011Dim 0100Bright 0101All Lights Off 0110Extended Code 0111Hail Request 1000Hail Acknowledge 1001Pre-set Dim ( 1 ) 1010Pre-set Dim ( 2 ) 1011Extended Data Transfer 1100Status On 1101 Status Off 1110Status Request 1111"
static void Main ( string [ ] args ) { String wikiPageUrl = @ '' http : //it.wikipedia.org/wiki/ʿAbd_Allāh_al-Sallāl '' ; if ( wikiPageUrl.Contains ( `` wikipedia.org/wiki/ '' ) ) { int i = wikiPageUrl.LastIndexOf ( `` wikipedia.org/wiki/ '' ) ; Console.WriteLine ( i ) ; } }
UserID | UserName -- -- -- -- -- -- -- -- -1 | Yogi2 | Mike
"objResult = await this.UserManager.ChangePasswordAsync ( objUser , objChangePassword.OldPassword , objChangePassword.NewPassword ) ; [ HttpPost ( `` / [ controller ] /change-password '' ) ] public async Task < IActionResult > ChangePasswordAsync ( [ FromBody ] ChangePassword objChangePassword ) { AspNetUsers objUser = null ; IdentityResult objResult = null ; // retrieve strUserId from the token . objUser = await this.UserManager.FindByIdAsync ( strUserId ) ; objResult = await this.UserManager.ChangePasswordAsync ( objUser , objChangePassword.OldPassword , objChangePassword.NewPassword ) ; if ( ! objResult.Succeeded ) { // Handle error . } return this.Ok ( new User ( objUser ) ) ; } using ABC.Common.Interfaces ; using ABC.Model.Clients ; using Microsoft.AspNetCore.Identity ; using System ; using System.ComponentModel.DataAnnotations ; using System.ComponentModel.DataAnnotations.Schema ; namespace ABC.Model.AspNetCore { // Class for AspNetUsers model public class AspNetUsers : IdentityUser { public AspNetUsers ( ) { // Construct the AspNetUsers object to have some default values here . } public AspNetUsers ( User objUser ) : this ( ) { // Populate the values of the AspNetUsers object with the values found in the objUser passed if it is not null . if ( objUser ! = null ) { this.UserId = objUser.UserId ; // This is the problem field . this.Email = objUser.Email ; this.Id = objUser.AspNetUsersId ; // Other fields . } } // All of the properties added to the IdentityUser base class that are extra fields in the AspNetUsers table . [ DatabaseGenerated ( DatabaseGeneratedOption.Identity ) ] [ Key ] public int UserId { get ; set ; } // Other fields . } } using ABC.Model.AspNetCore ; using JsonApiDotNetCore.Models ; using System ; using System.ComponentModel.DataAnnotations ; namespace ABC.Model.Clients { public class User : Identifiable { public User ( ) { // Construct the User object to have some default values show when creating a new object . } public User ( AspNetUsers objUser ) : this ( ) { // Populate the values of the User object with the values found in the objUser passed if it is not null . if ( objUser ! = null ) { this.AspNetUsersId = objUser.Id ; this.Id = objUser.UserId ; // Since the Identifiable is of type Identifiable < int > we use the UserIdas the Id value . this.Email = objUser.Email ; // Other fields . } } // Properties [ Attr ( `` asp-net-users-id '' ) ] public string AspNetUsersId { get ; set ; } [ Attr ( `` user-id '' ) ] public int UserId { get ; set ; } [ Attr ( `` email '' ) ] public string Email { get ; set ; } [ Attr ( `` user-name '' ) ] public string UserName { get ; set ; } // Other fields . } } using Microsoft.EntityFrameworkCore ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Linq.Expressions ; namespace ABC.Data.Infrastructure { public abstract class EntitiesRepositoryBase < T > where T : class { # region Member Variables protected Entities m_DbContext = null ; protected DbSet < T > m_DbSet = null ; # endregion public virtual void Update ( T objEntity ) { this.m_DbSet.Attach ( objEntity ) ; this.DbContext.Entry ( objEntity ) .State = EntityState.Modified ; } } }"
var sw = new Stopwatch ( ) ; sw.Start ( ) ; while ( sw.Elapsed.Seconds < 10 ) { System.Threading.Thread.Sleep ( 50 ) ; Console.WriteLine ( sw.Elapsed.Milliseconds.ToString ( ) + `` ms '' ) ; } sw.Stop ( ) ; 50 ms101 ms151 ms202 ms253 ms304 ms355 ms405 ms456 ms507 ms558 ms608 ms659 ms710 ms761 ms812 ms862 ms913 ms964 ms15 ms65 ms116 ms167 ms218 ms
"protected void btnCsvHidden_Click ( object sender , EventArgs e ) { var csv = csvString.Value ; var filename = `` Reporting '' ; Response.Clear ( ) ; Response.ClearHeaders ( ) ; Response.AddHeader ( `` Cache-Control '' , `` no-store , no-cache '' ) ; Response.AddHeader ( `` content-disposition '' , `` attachment ; filename=\ '' '' + filename + `` .csv\ '' '' ) ; Response.ContentType = `` text/csv '' ; Response.Write ( csv ) ; Response.End ( ) ; }"
"[ HttpPost ] public async Task < IActionResult > Edit ( ViewModel model ) { ... . return RedirectToAction ( `` Info '' , new { id = model.Id , `` # '' = `` item_55 '' } ) ; }"
"PropertySet props = new PropertySet ( AppointmentSchema.Start , AppointmentSchema.End , AppointmentSchema.Id , AppointmentSchema.Organizer , AppointmentSchema.Subject , AppointmentSchema.Body , AppointmentSchema.RequiredAttendees ) ; props.RequestedBodyType = BodyType.Text ; Appointment appointment = Appointment.Bind ( _service , new ItemId ( appointmentId ) , props ) ; if ( IsResource ( appointment.Organizer.Address ) & & appointment.Organizer.Address ! = resourceId ) { /* * removed for brevity , no attendee manipulation here */ } else { List < Attendee > remove = new List < Attendee > ( ) ; foreach ( var attendee in appointment.RequiredAttendees ) { if ( IsResource ( attendee.Address ) & & attendee.Address ! = resourceId ) { remove.Add ( attendee ) ; } } remove.ForEach ( a = > appointment.RequiredAttendees.Remove ( a ) ) ; if ( ! appointment.RequiredAttendees.Any ( a = > a.Address == resourceId ) ) { appointment.RequiredAttendees.Add ( resourceId ) ; } } /** removed for brevity , no attendee manipulation here*/if ( IsAvailable ( resourceId , startTime , endTime , appointmentId ) ) appointment.Update ( ConflictResolutionMode.AlwaysOverwrite , SendInvitationsOrCancellationsMode.SendToAllAndSaveCopy ) ; else throw new RoomUnavailableException ( ) ; < Trace Tag = `` EwsRequest '' Tid= '' 14 '' Time= '' 2017-09-25 20:20:24Z '' Version= '' 15.00.0847.030 '' > < ? xml version = `` 1.0 '' encoding= '' utf-8 '' ? > < soap : Envelope xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : m= '' http : //schemas.microsoft.com/exchange/services/2006/messages '' xmlns : t= '' http : //schemas.microsoft.com/exchange/services/2006/types '' xmlns : soap= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < soap : Header > < t : RequestServerVersion Version = `` Exchange2013 '' / > < / soap : Header > < soap : Body > < m : UpdateItem ConflictResolution = `` AlwaysOverwrite '' SendMeetingInvitationsOrCancellations= '' SendToAllAndSaveCopy '' > < m : ItemChanges > < t : ItemChange > < t : ItemId Id = `` AAMkAGEwYWRjZjA3LWNlZjAtNDI2Ny05ZjQwLWUzYWZjOThhMjkzNwBGAAAAAABWdX+yf6THTpO/1LYpoG6xBwD6lEwS6u8XQbDhIlTh/X/UAAAAAAENAAD6lEwS6u8XQbDhIlTh/X/UAAAi3oSdAAA= '' ChangeKey= '' DwAAABYAAAD6lEwS6u8XQbDhIlTh/X/UAAAi3ocU '' / > < t : Updates > < t : SetItemField > < t : FieldURI FieldURI = `` calendar : RequiredAttendees '' / > < t : CalendarItem > < t : RequiredAttendees > < t : Attendee > < t : Mailbox > < t : Name > Exchange Test < /t : Name > < t : EmailAddress > etest @ supertester.com < /t : EmailAddress > < t : RoutingType > SMTP < /t : RoutingType > < t : MailboxType > Mailbox < /t : MailboxType > < /t : Mailbox > < /t : Attendee > < t : Attendee > < t : Mailbox > < t : EmailAddress > redroom @ supertester.com < /t : EmailAddress > < /t : Mailbox > < /t : Attendee > < /t : RequiredAttendees > < /t : CalendarItem > < /t : SetItemField > < /t : Updates > < /t : ItemChange > < /m : ItemChanges > < /m : UpdateItem > < /soap : Body > < /soap : Envelope > < /Trace > < Trace Tag = `` EwsResponse '' Tid= '' 14 '' Time= '' 2017-09-25 20:20:24Z '' Version= '' 15.00.0847.030 '' > < ? xml version = `` 1.0 '' encoding= '' utf-8 '' ? > < s : Envelope xmlns : s= '' http : //schemas.xmlsoap.org/soap/envelope/ '' > < s : Header > < h : ServerVersionInfo MajorVersion = `` 15 '' MinorVersion= '' 1 '' MajorBuildNumber= '' 225 '' MinorBuildNumber= '' 41 '' Version= '' V2_48 '' xmlns : h= '' http : //schemas.microsoft.com/exchange/services/2006/types '' xmlns= '' http : //schemas.microsoft.com/exchange/services/2006/types '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' / > < /s : Header > < s : Body xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' > < m : UpdateItemResponse xmlns : m= '' http : //schemas.microsoft.com/exchange/services/2006/messages '' xmlns : t= '' http : //schemas.microsoft.com/exchange/services/2006/types '' > < m : ResponseMessages > < m : UpdateItemResponseMessage ResponseClass = `` Error '' > < m : MessageText > Set action is invalid for property. < /m : MessageText > < m : ResponseCode > ErrorInvalidPropertySet < /m : ResponseCode > < m : DescriptiveLinkKey > 0 < /m : DescriptiveLinkKey > < m : MessageXml > < t : FieldURI FieldURI = `` calendar : RequiredAttendees '' / > < /m : MessageXml > < m : Items / > < /m : UpdateItemResponseMessage > < /m : ResponseMessages > < /m : UpdateItemResponse > < /s : Body > < /s : Envelope > < /Trace >"
"using System ; using System.IO ; using System.Data ; using System.Text ; using System.Drawing.Imaging ; using System.Drawing.Printing ; using System.Collections.Generic ; using System.Windows.Forms ; using Microsoft.Reporting.WinForms ; public class Demo : IDisposable { private int m_currentPageIndex ; private IList < Stream > m_streams ; // Routine to provide to the report renderer , in order to // save an image for each page of the report . private Stream CreateStream ( string name , string fileNameExtension , Encoding encoding , string mimeType , bool willSeek ) { DataSet ds = new DataSet ( ) ; ds.Tables.Add ( dsData.Tables [ 0 ] .Copy ( ) ) ; using ( MemoryStream stream = new MemoryStream ( ) ) { IFormatter bf = new BinaryFormatter ( ) ; ds.RemotingFormat = SerializationFormat.Binary ; bf.Serialize ( stream , ds ) ; data = stream.ToArray ( ) ; } Stream stream1 = new MemoryStream ( data ) ; m_streams.Add ( stream1 ) ; return stream1 ; } // Export the given report as an EMF ( Enhanced Metafile ) file . private void Export ( LocalReport report ) { string deviceInfo = @ '' < DeviceInfo > < OutputFormat > EMF < /OutputFormat > < PageWidth > 8.5in < /PageWidth > < PageHeight > 11in < /PageHeight > < MarginTop > 0.25in < /MarginTop > < MarginLeft > 0.25in < /MarginLeft > < MarginRight > 0.25in < /MarginRight > < MarginBottom > 0.25in < /MarginBottom > < /DeviceInfo > '' ; Warning [ ] warnings ; m_streams = new List < Stream > ( ) ; report.Render ( `` Image '' , deviceInfo , CreateStream , out warnings ) ; foreach ( Stream stream in m_streams ) stream.Position = 0 ; } // Handler for PrintPageEvents private void PrintPage ( object sender , PrintPageEventArgs ev ) { Metafile pageImage = new Metafile ( m_streams [ m_currentPageIndex ] ) ; // Adjust rectangular area with printer margins . Rectangle adjustedRect = new Rectangle ( ev.PageBounds.Left - ( int ) ev.PageSettings.HardMarginX , ev.PageBounds.Top - ( int ) ev.PageSettings.HardMarginY , ev.PageBounds.Width , ev.PageBounds.Height ) ; // Draw a white background for the report ev.Graphics.FillRectangle ( Brushes.White , adjustedRect ) ; // Draw the report content ev.Graphics.DrawImage ( pageImage , adjustedRect ) ; // Prepare for the next page . Make sure we have n't hit the end . m_currentPageIndex++ ; ev.HasMorePages = ( m_currentPageIndex < m_streams.Count ) ; } private void Print ( ) { if ( m_streams == null || m_streams.Count == 0 ) throw new Exception ( `` Error : no stream to print . `` ) ; PrintDocument printDoc = new PrintDocument ( ) ; if ( ! printDoc.PrinterSettings.IsValid ) { throw new Exception ( `` Error : can not find the default printer . `` ) ; } else { printDoc.PrintPage += new PrintPageEventHandler ( PrintPage ) ; m_currentPageIndex = 0 ; printDoc.Print ( ) ; } } // Create a local report for Report.rdlc , load the data , // export the report to an .emf file , and print it . private void Run ( ) { LocalReport report = new LocalReport ( ) ; LocalReport report = new LocalReport ( ) ; report.ReportPath = @ '' Reports\InvoiceReportTest.rdlc '' ; report.DataSources.Add ( new ReportDataSource ( `` DataSet1 '' , dsPrintDetails ) ) ; Export ( report ) ; Print ( ) ; } public void Dispose ( ) { if ( m_streams ! = null ) { foreach ( Stream stream in m_streams ) stream.Close ( ) ; m_streams = null ; } } public static void Main ( string [ ] args ) { using ( Demo demo = new Demo ( ) ) { demo.Run ( ) ; } } }"
myObject .useRepository ( `` Stuff '' ) .withTransactionSupport ( ) .retries ( 3 ) .logWarnings ( ) .logErrors ( ) ;
IEnumerable < int > numQuery1 = from num in numbers where num % 2 == 0 orderby num select num ;
"List < int > numberList = new List < int > ( ) { 30 , 60 , 90 , 120 , 150 , 180 , 270 , 300 , 330 } ; { 30 , 180 } { 270 , 330 } List < int > numberList = new List < int > ( ) { 30 , 60 , 120 , 150 , 270 , 300 , 330 } ; { 30 , 60 } { 120 , 150 } { 270 , 330 }"
var list = new List < List < int > > ( ) ; IEnumerable < List < int > > x = list ; List < IEnumerable < int > > y = list ; IEnumerable < IEnumerable < int > > z = list ;
public class TextType { public TextType ( String text ) { underlyingString = text ; } public static implicit operator String ( TextType text ) { return text.underlyingString ; } private String underlyingString ; } TextType text = new TextType ( `` Something '' ) ; String str = text ; // This is OK. TextType textFromStringConstant = `` SomeOtherText '' ;
using ( ExternalWidget widget = new ExternalWidget ( ) ) { widget.DoSomething ( ) ; }
"using System.Drawing ; namespace PCL { public class RectOwner { public RectangleF Rect { get ; set ; } } } using PCL ; namespace IOSApp { public class RectOwnerIOS : RectOwner { public RectOwnerIOS ( ) { this.Rect = new System.Drawing.RectangleF ( 10 , 20 , 30 , 40 ) ; } } } using PCL ; namespace MacApp { public class RectOwnerSubclass : RectOwner { public RectOwnerSubclass ( ) { this.Rect = new System.Drawing.RectangleF ( 5 , 6 , 7 , 8 ) ; // errors here : // /Users/william/Documents/splat/MacApp/RectOwnerMac.cs ( 16,16 ) : Error CS7069 : Reference to type ` System.Drawing.RectangleF ' claims it is defined assembly ` Splat , Version=1.6.2.0 , Culture=neutral , PublicKeyToken=null ' , but it could not be found ( CS7069 ) ( MacApp ) // /Users/william/Documents/splat/MacApp/RectOwnerMac.cs ( 23,23 ) : Error CS0029 : Can not implicitly convert type ` System.Drawing.RectangleF [ Xamarin.Mac , Version=0.0.0.0 , Culture=neutral , PublicKeyToken=84e04ff9cfb79065 ] ' to ` System.Drawing.RectangleF [ Splat , Version=1.6.2.0 , Culture=neutral , PublicKeyToken=null ] ' ( CS0029 ) ( MacApp ) } } }"
char value = '\0 ' ; bool isEmpty = value.ToString ( ) == string.Empty ; // This returns FALSE because // '\0'.ToString ( ) returns `` \0 '' // where I expect it to be // string.empty
"list = { 32183,15883,26917,25459,22757,25236,1657 } list.Sum = 150092 list.Sum / z z = variable ( user Input - in this example it 's 3 ) 50031 32183 + 15883 = 48066 or 32183 + 15883 + 26917 = 74983 26917 + 25459 = 52376 or 26917 + 25459 + 22757 = 75133 32183 + 15883 + 1657 for ( int i = 0 ; i < z ; i++ ) { mid = suma/z ; najbliższy = listSum.Aggregate ( ( x , y ) = > Math.Abs ( x - mid ) < Math.Abs ( y - mid ) ? x : y ) ; }"
"public static void Main ( string [ ] args ) { int ? n = 1 ; int i = 1 ; n = ++n - -- i ; Console.WriteLine ( `` Without Nullable < int > n = { 0 } '' , n ) ; //outputs n = 2 n = 1 ; i = 1 ; n = ++n - new Nullable < int > ( -- i ) ; Console.WriteLine ( `` With Nullable < int > n = { 0 } '' , n ) ; //outputs n = 3 Console.ReadKey ( ) ; } public static void Main ( ) { int ? n = 1 ; int i = 1 ; n = n - new Nullable < int > ( sideEffect ( ref i ) ) ; Console.WriteLine ( `` With Nullable < int > n = { 0 } '' , n ) ; Console.ReadKey ( ) ; } private static int sideEffect ( ref int i ) { Console.WriteLine ( `` sideEffect ( { 0 } ) called '' , i ) ; return -- i ; }"
int count ; EntitiesContainer dbContext = new EntitiesContainer ( ) ; var aCnt = from a in dbContext.Approvals where a.id == id select a.Transactions.Count ; count = aCnt.First ( ) ; count = Transactions.Count ; count = Transactions.AsQueryable < Transaction > ( ) .Count ( ) ;
"[ FeeSchemeId ] UNIQUEIDENTIFIER NOT NULL , [ SortPosition ] INT NOT NULL , UNIQUE ( FeeSchemeId , SortPosition )"
DataContext db = new DataContext ( `` myconnectistring '' ) ; Table < MyImmutableType > myImmutableObjects = db.GetTable < MyImmutableType > ( ) ;
"int pixel = Marshal.ReadInt32 ( bitmapData.Scan0 , x * 4 + y * bitmapData.Stride ) ; int pixel = ( ( int* ) bitmapData.Scan0 ) [ x + y * bitmapData.Stride / 4 ] ;"
"class Program { static void DoSomething < T > ( ) where T : unmanaged { } struct MyStruct { public ( int , int ) Value ; } static void Main ( string [ ] args ) { DoSomething < MyStruct > ( ) ; // → OK DoSomething < ( int , int ) > ( ) ; // → Shows compile-time error } } unsafe { ( int , int ) * p1 ; // → Compile-time error , MyStruct* p2 ; // → Compiles }"
"public class ModelBase { } public class ModelA : ModelBase { } public interface IInterface < in TModel > { void Do ( TModel model ) ; } public abstract class AbstractClass < TModel > : IInterface < TModel > { public abstract void Do ( TModel model ) ; } public class ConcreteClass : AbstractClass < ModelA > , IInterface < ModelBase > { public override void Do ( ModelA model ) { // I 'd like to invoke this method } public void Do ( ModelBase model ) { // how do I invoke the method above ? ? Do ( ( ModelA ) model ) ; } } ( ( IClass < ModelA > ) this ) .Do ( ( ModelA ) model ) ; base.Do ( ( ModelA ) model ) ; public class ConcreteClass : IInterface < ModelA > , IInterface < ModelBase >"
namespace test { public class test { public static void foo ( int i ) { i++ ; } public static void foo ( ref int i ) { i++ ; } } } int main ( array < System : :String ^ > ^args ) { int i=0 ; test : :test : :foo ( i ) ; //error C2668 : ambiguous call to overloaded function test : :test : :foo ( % i ) ; //error C3071 : operator ' % ' can only be applied to an instance of a ref class or a value-type int % r=i ; test : :test : :foo ( r ) ; //error C2668 : ambiguous call to overloaded function Console : :WriteLine ( i ) ; return 0 ; }
"bool InheritsFrom ( ITypeSymbol symbol , string expectedParentTypeName ) { while ( true ) { if ( symbol.ToString ( ) .Equals ( expectedParentTypeName ) ) { return true ; } if ( symbol.BaseType ! = null ) { symbol = symbol.BaseType ; continue ; } break ; } return false ; } SyntaxNodeAnalysisContext context ; // is already initialized PropertyDeclarationSyntax propertyDeclaration = ( PropertyDeclarationSyntax ) context.Node ; ClassDeclarationSyntax classDeclaration = ( ClassDeclarationSyntax ) propertyDeclaration.Parent ; TypeInfo propertyTypeInfo = context.SemanticModel.GetTypeInfo ( propertyDeclaration ) ; TypeInfo classTypeInfo = context.SemanticModel.GetTypeInfo ( classDeclaration ) ;"
class Address { private String streetAddress ; private int number ; private String postalCode ; private City city ; private State state ; private Country country ; }
Microsoft Visual Studio Professional 2012Microsoft Team Explorer for Visual Studio 2012Microsoft Visual Basic 2012Microsoft Visual C # 2012Microsoft Visual C++ 2012Microsoft Visual F # 2012Microsoft® Visual Studio® 2012 Code Analysis Spell CheckerNuGet Package ManagerPreEmptive Analytics Visualizer
"double d = 123456.123456D ; double d2 = 123456D ; 123,456.123456123,456 123,456.123456123,456.000000 123456.123456123456 123,456123,456"
public async Task < ActionResult > Get ( int id ) { try { // Logic return Ok ( someReturnValue ) ; } catch { return Problem ( ) ; } } [ TestMethod ] public async Task GetCallsProblemOnInvalidId ( ) { var result = sut.Get ( someInvalidId ) ; }
"public void ExampleMethod ( int number ) { try { int num = number ... open connection to file ... write number to file } catch ( Exception ex ) { ... . deal with exception ( ex.message , ex.stacktrace etc ... ) } finally { ... close file connection } }"
"< video id= '' vPlayer '' class= '' video-js '' autoplay controls playsinline preload= '' auto '' data-setup= ' { `` fluid '' : true } 'poster= '' @ ImgManager.GetVideoImgUrl ( Model.ThumbnailUrl ) '' > < source src= '' //xyz.nl/api/Videos/Get ? filename=340a85a3-ccea-4a2a-bab6-74def07e416c.webm & type=video % 2Fwebm '' type= '' video/webm '' > < source src= '' //xyz.nl/api/Videos/Get ? filename=340a85a3-ccea-4a2a-bab6-74def07e416c.mp4 & type=video % 2Fmp4 '' type= '' video/mp4 '' > public HttpResponseMessage Get ( string filename , string type ) { var video = new VideoStream ( filename ) ; var response = Request.CreateResponse ( ) ; response.Content = new PushStreamContent ( video.WriteToStream , new MediaTypeHeaderValue ( type ) ) ; return response ; } public class VideoStream { private readonly string _filename ; public VideoStream ( string fileName ) { _filename = fileName ; } public async Task WriteToStream ( Stream outputStream , HttpContent content , TransportContext context ) { try { var storage = new AzureMainStorage ( `` avideo '' ) ; byte [ ] file = await storage.GetFileAsync ( _filename ) ; var buffer = new byte [ 65536 ] ; using ( var video = new MemoryStream ( file ) ) { var length = ( int ) video.Length ; var bytesRead = 1 ; while ( length > 0 & & bytesRead > 0 ) { bytesRead = video.Read ( buffer , 0 , Math.Min ( length , buffer.Length ) ) ; await outputStream.WriteAsync ( buffer , 0 , bytesRead ) ; length -= bytesRead ; } } } catch ( HttpException ex ) { Utilities.LogErrorToDb ( ex ) ; return ; } finally { outputStream.Close ( ) ; } } } }"
"[ OperationContract ] void AddTask ( string description ) ; public void AddTask ( string description ) { TaskListLinqDataContext db = new TaskListLinqDataContext ( ) ; Task task = new Task ( ) { Description = description , IsCompleted = false , EntryDate = DateTime.Now } ; db.Tasks.InsertOnSubmit ( task ) ; db.SubmitChanges ( ) ; } [ WebInvoke ( Method= '' PUT '' , UriTemplate= '' tasks/ { description } '' ) ] [ OperationContract ] void AddTask ( string description ) ;"
public Task LoginAsync ( ) { return Task.Run ( winrtLibrary.Login ( ) ; ) }
if ( res == ResultType.Failure ) something = ProcessFailure ( .. ) ; if ( res == ResultType.ScheduledAndMonitored ) something = DoSomething ( ... ) & & DoSomething3 ( .. ) ; if ( res == ResultType.MoreInfoAvailable ) info = GetInfo ( .. ) ; if ( res == ResultType.OK & & someCondition ) something = DoSomething2 ( .. ) ; ... . continued if ( res == ResultType.Failure ) something = ProcessFailure ( .. ) ; if ( res == ResultType.ScheduledAndMonitored ) something = DoSomething ( ... ) & & DoSomething3 ( .. ) ; if ( res == ResultType.MoreInfoAvailable ) info = GetInfo ( .. ) ; if ( res == ResultType.OK & & someCondition ) something = DoSomething2 ( .. ) ; ... . continued
"class ReferencePreservingDataContractSerializerOperationBehavior : DataContractSerializerOperationBehavior { public ReferencePreservingDataContractSerializerOperationBehavior ( OperationDescription operationDescription ) : base ( operationDescription ) { } public override XmlObjectSerializer CreateSerializer ( Type type , string name , string ns , IList < Type > knownTypes ) { return CreateDataContractSerializer ( type , name , ns , knownTypes ) ; } private static XmlObjectSerializer CreateDataContractSerializer ( Type type , string name , string ns , IList < Type > knownTypes ) { return CreateDataContractSerializer ( type , name , ns , knownTypes ) ; } public override XmlObjectSerializer CreateSerializer ( Type type , XmlDictionaryString name , XmlDictionaryString ns , IList < Type > knownTypes ) { return new DataContractSerializer ( type , name , ns , knownTypes , 0x7FFF /*maxItemsInObjectGraph*/ , false/*ignoreExtensionDataObject*/ , true/*preserveObjectReferences*/ , null/*dataContractSurrogate*/ ) ; } } private static XmlObjectSerializer CreateDataContractSerializer ( Type type , string name , string ns , IList < Type > knownTypes ) { return CreateDataContractSerializer ( type , name , ns , knownTypes ) ; }"
open Systemopen System.Diagnosticslet stopwatch = new Stopwatch ( ) stopwatch.Start ( ) let mutable isPrime = truefor i in 2 .. 100000 do for j in 2 .. i do if i < > j & & i % j = 0 then isPrime < - false if isPrime then printfn `` % i '' i isPrime < - truestopwatch.Stop ( ) printfn `` Elapsed time : % ims '' stopwatch.ElapsedMillisecondsConsole.ReadKey ( ) | > ignore using System ; using System.Diagnostics ; namespace ConsoleApp1 { class Program { static void Main ( string [ ] args ) { Stopwatch stopwatch = new Stopwatch ( ) ; stopwatch.Start ( ) ; bool isPrime = true ; for ( int i = 2 ; i < = 100000 ; i++ ) { for ( int j = 2 ; j < = i ; j++ ) { if ( i ! = j & & i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { Console.WriteLine ( i ) ; } isPrime = true ; } stopwatch.Stop ( ) ; Console.WriteLine ( `` Elapsed time : `` + stopwatch.ElapsedMilliseconds + `` ms '' ) ; Console.ReadKey ( ) ; } } }
"string [ ] strings = { `` -1 '' , `` 1 '' , `` 1Foo '' , `` -1Foo '' } ; Array.Sort ( strings ) ; Console.WriteLine ( string.Join ( `` , '' , strings ) ) ; 1,1Foo , -1 , -1Foo 1 , -1,1Foo , -1Foo Array.Sort ( strings , StringComparer.OrdinalIgnoreCase ) ;"
string cookieKey = `` SearchDisplayType '' + key ? ? `` `` ;
"var client2 = new RestClient ( `` https : //graph.windows.net/a0a00aa0-aaaa-0000-0000-00000e0000aa/reports ? api-version=beta '' ) ; var request2 = new RestRequest ( Method.GET ) ; request2.AddHeader ( `` cache-control '' , `` no-cache '' ) ; request2.AddHeader ( `` authorization '' , `` Bearer `` + token ) ; request2.AddHeader ( `` content-type '' , `` application/json '' ) ; IRestResponse response2 = client2.Execute ( request2 ) ; Console.WriteLine ( response2.Content ) ; { `` error '' : { `` code '' : '' Unable to check Directory Read access for appId : 00000aa-aaaa-0a0a-0000-000000000000 '' , '' message '' : '' message : Unable to check Directory Read access for appId : 00000aa-aaaa-0a0a-0000-000000000000\n client-request-id:00aa0a0a-48bf-4bf8-ae40-a2976a3c6910 timestamp:2017-04-28 01:38:52Z '' } }"
System.Reflection.Emit.DynamicMethod.CreateDelegateSystem.Data.Linq.SqlClient.ObjectReaderCompiler.CompileSystem.Data.Linq.SqlClient.SqlProvider.GetReaderFactorySystem.Data.Linq.SqlClient.SqlProvider.System.Data.Linq.Provider.IProvider.CompileSystem.Data.Linq.CommonDataServices+DeferredSourceFactory ` 1.ExecuteKeyQuerySystem.Data.Linq.CommonDataServices+DeferredSourceFactory ` 1.ExecuteSystem.Linq.Enumerable.SingleOrDefaultSystem.Data.Linq.EntityRef ` 1.get_Entity
ResultType SynchronousCode ( ParamType x ) { return SomeLongRunningWebRequest ( x ) ; } async Task < ResultType > AsynchronousCode ( ParamType x ) { return await Task.Run ( ( ) = > SomeLongRunningWebRequest ( x ) ) ; } async Task < ResultType > AsynchronousCode ( ParamType x ) { await Task.Yield ( ) ; return SomeLongRunningWebRequest ( x ) ; }
userName = HttpContext.Current.Request.ServerVariables [ `` LOGON_USER '' ] ;
if ( Path.GetFullPath ( A ) .StartsWith ( Path.GetFullPath ( B ) ) || Path.GetFullPath ( B ) .StartsWith ( Path.GetFullPath ( A ) ) ) { /* ... do your magic ... */ }
"public decimal Calulate ( decimal x , decimal y ) { string script = @ '' var calc = new Com.Example.FormCalculater ( ) ; var result = calc.Calculate ( { 0 } , { 1 } ) ; '' ; this.ScriptEngine.Evaluate ( string.Format ( script , x , y ) ) ; var result = this.ScriptEngine.Evaluate ( `` result '' ) ; return Convert.ToDecimal ( result ) ; } public class Calculator { public decimal Add ( decimal x , decimal y ) { ... } public decimal Substract ( decimal x , decimal y ) { ... } public decimal Multiply ( decimal x , decimal y ) { ... } public decimal Divide ( decimal x , decimal y ) { ... } }"
int yield = previousVal/actualVal ; return yield ; // Should this be allowed ! ! ! ? ? ?
"static class Program { static void Main ( string [ ] args ) { var task = SlowThreadAsync ( ) ; for ( int i = 0 ; i < 5 ; i++ ) { Console.WriteLine ( i * i ) ; } Console.WriteLine ( `` Slow thread result { 0 } '' , task.Result ) ; Console.WriteLine ( `` Main finished on thread { 0 } '' , Thread.CurrentThread.ManagedThreadId ) ; Console.ReadKey ( ) ; } static async Task < int > SlowThreadAsync ( ) { Console.WriteLine ( `` SlowThreadAsync started on thread { 0 } '' , Thread.CurrentThread.ManagedThreadId ) ; await Task.Delay ( 2000 ) ; Console.WriteLine ( `` SlowThreadAsync completed on thread { 0 } '' , Thread.CurrentThread.ManagedThreadId ) ; return 3443 ; } }"
"[ { `` outputFileName '' : `` wwwroot/css/Test.css '' , `` inputFiles '' : [ `` wwwroot/css/Global.css '' ] , `` minify '' : { `` enabled '' : true , `` renameLocals '' : true } } ] < link rel= '' stylesheet '' href= '' ~/css/Test.css '' / >"
< ItemsControl ItemsSource= '' { Binding Table.Columns } '' > < ItemsControl.ItemsPanel > < ItemsPanelTemplate > < StackPanel Orientation= '' Horizontal '' VerticalAlignment= '' Stretch '' / > < /ItemsPanelTemplate > < /ItemsControl.ItemsPanel > < ItemsControl.ItemTemplateSelector > < local : ColumnTemplateSelector InputParameterColumnTemplate= '' { StaticResource InputParamterColumn } '' SingleParameterColumnTemplate= '' { StaticResource SingleParameterColumn } '' / > < /ItemsControl.ItemTemplateSelector > < /ItemsControl > < DataTemplate x : Key= '' SingleParameterColumn '' > < DataGrid AutoGenerateColumns= '' False '' ItemsSource= '' { Binding Cells } '' RowHeight= '' 25 '' RowHeaderWidth= '' 0 '' > < DataGrid.Columns > < DataGridTemplateColumn > < DataGridTemplateColumn.HeaderTemplate > < DataTemplate > < StackPanel Orientation= '' Horizontal '' > < TextBlock Text= '' { Binding Name } '' TextWrapping= '' Wrap '' TextAlignment= '' Center '' MaxWidth= '' 60 '' > < /TextBlock > < Button > < Image ... / > < /Button > < /StackPanel > < /DataTemplate > < /DataGridTemplateColumn.HeaderTemplate > < DataGridTemplateColumn.CellTemplateSelector > ... . < /DataGridTemplateColumn.CellTemplateSelector > < /DataGridTemplateColumn > < /DataGrid.Columns > < /DataGrid > < /DataTemplate >
public class PossibleMatch { public PossibleMatch ( ) { StoreIds = new List < long > ( ) ; OrderLineIds = new List < long > ( ) ; } public IList < long > StoreIds { get ; set ; } public IList < long > OrderLineIds { get ; set ; } }
var task = Task.Run ( ) ; var func = ( ) = > task.Result ;
"// Prepare the credentials.string runasUsername = @ '' MarioKart 8 '' ; string runasPassword = `` MarioKart '' ; SecureString ssRunasPassword = new SecureString ( ) ; foreach ( char x in runasPassword ) ssRunasPassword.AppendChar ( x ) ; PSCredential credentials =new PSCredential ( runasUsername , ssRunasPassword ) ; // Prepare the connectionvar connInfo = new WSManConnectionInfo ( new Uri ( `` MarioKart8Server '' ) , `` http : //schemas.microsoft.com/powershell/Microsoft.Exchange '' , credentials ) ; connInfo.AuthenticationMechanism = AuthenticationMechanism.Basic ; connInfo.SkipCACheck = true ; connInfo.SkipCNCheck = true ; // Create the runspace where the command will be executedvar runspace = RunspaceFactory.CreateRunspace ( connInfo ) ; // create the PowerShell commandvar command = new Command ( `` New-Mailbox '' ) ; ... .// Add the command to the runspace 's pipelinerunspace.Open ( ) ; var pipeline = runspace.CreatePipeline ( ) ; pipeline.Commands.Add ( command ) ; // Execute the commandvar results = pipeline.Invoke ( ) ; if ( results.Count > 0 ) System.Diagnostics.Debug.WriteLine ( `` SUCCESS '' ) ; else System.Diagnostics.Debug.WriteLine ( `` FAIL '' ) ;"
"object obj = properties.Current.Value ; Type objType = obj.GetType ( ) ; string output = String.Join ( `` , '' , ( objType ) obj ) ; object [ ] objArr = ( object [ ] ) obj ; ( Unable to cast exception )"
"public class Foo { /// < summary > /// The describes the ABC property /// < /summary > public virtual int ABC { get { return _abc ; } set { _abc = value ; } } protected int _abc ; /// < summary > /// The describes the XYZ property /// < /summary > public virtual int XYZ { get { return _xyz ; } set { _xyz = value ; } } protected int _xyz ; } public class Bar : Foo { public override int ABC { set { // DO SOMETHING base.ABC = value ; } } } Bar bar = new Bar ( ) ; // In MonoDevelop 2.4.2 ( OS X ) , the ABC property does n't show the comments// in the autocomplete popup or when you hover the mouse over the property.int abc = bar.ABC ; // ... but they do show up for XYZ , because it does n't overrideint xyz = bar.XYZ ;"
"public static Bitmap GetImage ( IWebElement element ) { RemoteWebDriver driver = BrowserManager.GetInstance ( ) .GetDriver ( ) ; Actions action = new Actions ( driver ) ; //take screenshot of page action.MoveToElement ( element ) .Build ( ) .Perform ( ) ; Byte [ ] ba= ( ( ITakesScreenshot ) driver ) .GetScreenshot ( ) .AsByteArray ; Bitmap ss = new Bitmap ( new MemoryStream ( ba ) ) ; //ss.Save ( `` c : \\tmp\\ss.png '' , ImageFormat.Png ) ; Rectangle crop = new Rectangle ( element.Location.X , element.Location.Y , element.Size.Width , element.Size.Height ) ; //create a new image by cropping the original screenshot Bitmap image = ss.Clone ( crop , ss.PixelFormat ) ; return image ; }"
var customers = GetCustomers ( ) ; var customerQuery = customers.Where ( x= > x.CustomerID == 1 & & x.CustomerName == `` Bob '' ) ; // The query is for illustration only Property : CustomerIDOperator : EqualsValue : 1Property : CustomerNameOperator : EqualsValue : Bob
"[ DllImport ( `` some.dll '' , CallingConvention = CvInvoke.CvCallingConvention ) ] public static extern IntPtr cvCreateHeader ( Size size , int a , int b ) ;"
"private async void testButton_Click ( object sender , RoutedEventArgs e ) { var picker = new Windows.Storage.Pickers.FolderPicker ( ) ; StorageFolder folder = await picker.PickSingleFolderAsync ( ) ; }"
partial void OpenLoginWindow ( NSMenuItem sender ) { var loginController = new MainWindowController ( ) ; loginController.Window.MakeKeyAndOrderFront ( this ) ; loginController.ShowWindow ( this ) ; }
"{ `` persons '' : [ { `` age '' :30 , `` name '' : '' david '' , `` hobbies '' : [ { `` name '' : '' tennis '' , `` hours '' :5 } , { `` name '' : '' football '' , `` hours '' :10 } ] } , { `` name '' : '' adam '' , `` age '' :23 , `` hobbies '' : [ ] } ] } { `` person '' : [ { `` age '' :25 , `` name '' : '' dave '' , `` hobbies '' : [ { `` name '' : '' Basketball '' , `` hours '' :5 } , { `` name '' : '' football '' , `` hours '' :10 } ] } , { `` name '' : '' Steve '' , `` age '' :28 , `` hobbies '' : [ ] } ] } List < Person > person ; List < Person > persons ;"
"WindowsService winSvc = new WindowsService ( ) ; ServiceBase [ ] servicesToRun = new ServiceBase [ ] { winSvc } ; ServiceBase.Run ( servicesToRun ) ; internal sealed class WindowsService : ServiceBase { private ServiceHost wcfServiceHost = null ; internal WindowsService ( ) { AutoLog = true ; CanStop = true ; CanShutdown = true ; CanPauseAndContinue = false ; } internal void StartWcfService ( ) { wcfServiceHost = new ServiceHost ( typeof ( DemoService ) ) ; wcfServiceHost.Open ( ) ; } protected override void Dispose ( bool disposing ) { if ( wcfServiceHost ! = null ) { wcfServiceHost.Close ( ) ; } base.Dispose ( disposing ) ; } protected override void OnStart ( string [ ] args ) { new XmlSerializer ( typeof ( MyType ) ) ; StartWcfService ( ) ; } } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.PerSession , TransactionAutoCompleteOnSessionClose = false , IncludeExceptionDetailInFaults = true ) ] public sealed class DemoService : IDemoService { [ TransactionFlow ( TransactionFlowOption.Allowed ) ] [ OperationBehavior ( TransactionScopeRequired = true , TransactionAutoComplete = true ) ] public int Add ( int a , int b ) { return a + b ; } } IChannelFactory < IDemoService > channelFactory = new ChannelFactory < IDemoService > ( `` defaultClientConfiguration '' ) ; IDisposable channel = null ; for ( int index = 0 ; index < 5000 ; index++ ) { using ( channel = ( IDisposable ) channelFactory.CreateChannel ( new EndpointAddress ( `` net.tcp : //localhost:23456/DemoService '' ) ) ) { IDemoService demoService = ( IDemoService ) channel ; using ( TransactionScope tx = new TransactionScope ( TransactionScopeOption.RequiresNew ) ) { demoService.Add ( 3 , 9 ) ; tx.Complete ( ) ; } ) }"
"public class Program { private static List < string > Test ( string i ) { return new List < string > { i } ; } private static dynamic GetD ( ) { return 1 ; } public static void Main ( ) { int value1 = GetD ( ) ; // < -- int var result1 = Test ( `` Value `` + value1 ) ; // No problem , prints `` Value 1 '' , First ( ) on List < string > works ok. Console.WriteLine ( result1.First ( ) ) ; var value2 = GetD ( ) ; // < -- var var result2 = Test ( `` Value `` + value2 ) ; // The below line gives RuntimeBinderException // 'System.Collections.Generic.List < string > ' does not contain a // definition for 'First ' Console.WriteLine ( result2.First ( ) ) ; } }"
"IList < Article > articles = GetArticles ( ) ; return articles.Map < ArticleViewModel > ( _mappingEngine ) ; public static IEnumerable < T2 > Map < T1 , T2 > ( this IEnumerable < T1 > list , IMappingEngine engine ) { return list.Select ( engine.Map < T1 , T2 > ) ; } articles.Map < Article , ArticleViewModel > ( _mappingEngine ) ; public static IEnumerable < T1 > DummyMap < T1 > ( this IEnumerable < T1 > list , IMappingEngine engine ) { return list ; } articles.DummyMap ( _mappingEngine ) ;"
"[ Serializable ] public class EncryptKeyNotFoundException : Exception { public EncryptKeyNotFoundException ( ) : base ( ) { } public EncryptKeyNotFoundException ( string message ) : base ( message ) { } public EncryptKeyNotFoundException ( string format , params object [ ] args ) : base ( string.Format ( format , args ) ) { } public EncryptKeyNotFoundException ( string message , Exception innerException ) : base ( message , innerException ) { } public EncryptKeyNotFoundException ( string format , Exception innerException , params object [ ] args ) : base ( string.Format ( format , args ) , innerException ) { } protected EncryptKeyNotFoundException ( SerializationInfo info , StreamingContext context ) : base ( info , context ) { } } [ ClassInterfaceAttribute ( ClassInterfaceType.None ) ] [ ComVisibleAttribute ( true ) ] protected EncryptKeyNotFoundException ( SerializationInfo info , StreamingContext context ) : base ( info , context ) { }"
"public class NHibernateIQueryableQueryBase < TEntity , TQuery , TQueryInterface > : IQuery < TEntity > , IFluentQueryInterface < TEntity , TQueryInterface > where TQuery : NHibernateIQueryableQueryBase < TEntity , TQuery , TQueryInterface > , TQueryInterface where TQueryInterface : IQuery < TEntity > public TQueryInterface And { get { var result = this as TQuery ; return result ; } }"
/* * * * */
new ConditionCreator ( ) .Add ( ) .Or ( ) .Add ( ) .And ( ) .Add ( ) new ConditionCreator ( ) .Add ( ) .Add ( ) .Add ( ) .Or ( ) .And ( ) .Add ( ) .And ( ) .And ( )
for ( ; ; ) { //some if statements and a case statement }
"public static class Monitor { private static List < object > monitoredObjects ; public static void Initialize ( ) { monitoredObjects = new List < object > ( ) ; } public static void Watch ( object o ) { monitoredObjects.Add ( o ) ; } public static void Unwatch ( object o ) { monitoredObjects.Remove ( o ) ; } public static void Draw ( RenderWindow app ) { //Not actual code , I actually draw this in game foreach ( object o in monitoredObjects ) Console.WriteLine ( o.ToString ( ) ) ; } } public class Property { private object obj ; private PropertyInfo propertyInfo ; public override string ToString ( ) { return propertyInfo.Name + `` : `` + propertyInfo.GetValue ( obj , null ) .ToString ( ) ; } public Property ( object o , string property ) { obj = o ; propertyInfo = o.GetType ( ) .GetProperty ( property ) ; } } Monitor.Watch ( new Property ( Game , `` FPS '' ) ) ; Monitor.Watch ( Game.FPS ) ;"
"public Microsoft.SharePoint.Client.File UploadFileSlicePerSlice ( ClientContext ctx , string libraryName , string fileName , int fileChunkSizeInMB = 3 ) { // Each sliced upload requires a unique ID . Guid uploadId = Guid.NewGuid ( ) ; // Get the name of the file . string uniqueFileName = Path.GetFileName ( fileName ) ; // Ensure that target library exists , and create it if it is missing . if ( ! LibraryExists ( ctx , ctx.Web , libraryName ) ) { CreateLibrary ( ctx , ctx.Web , libraryName ) ; } // Get the folder to upload into . List docs = ctx.Web.Lists.GetByTitle ( libraryName ) ; ctx.Load ( docs , l = > l.RootFolder ) ; // Get the information about the folder that will hold the file . ctx.Load ( docs.RootFolder , f = > f.ServerRelativeUrl ) ; ctx.ExecuteQuery ( ) ; // File object . Microsoft.SharePoint.Client.File uploadFile ; // Calculate block size in bytes . int blockSize = fileChunkSizeInMB * 1024 * 1024 ; // Get the information about the folder that will hold the file . ctx.Load ( docs.RootFolder , f = > f.ServerRelativeUrl ) ; ctx.ExecuteQuery ( ) ; // Get the size of the file . long fileSize = new FileInfo ( fileName ) .Length ; if ( fileSize < = blockSize ) { // Use regular approach . using ( FileStream fs = new FileStream ( fileName , FileMode.Open ) ) { FileCreationInformation fileInfo = new FileCreationInformation ( ) ; fileInfo.ContentStream = fs ; fileInfo.Url = uniqueFileName ; fileInfo.Overwrite = true ; uploadFile = docs.RootFolder.Files.Add ( fileInfo ) ; ctx.Load ( uploadFile ) ; ctx.ExecuteQuery ( ) ; // Return the file object for the uploaded file . return uploadFile ; } } else { // Use large file upload approach . ClientResult < long > bytesUploaded = null ; FileStream fs = null ; try { fs = System.IO.File.Open ( fileName , FileMode.Open , FileAccess.Read , FileShare.ReadWrite ) ; using ( BinaryReader br = new BinaryReader ( fs ) ) { byte [ ] buffer = new byte [ blockSize ] ; Byte [ ] lastBuffer = null ; long fileoffset = 0 ; long totalBytesRead = 0 ; int bytesRead ; bool first = true ; bool last = false ; // Read data from file system in blocks . while ( ( bytesRead = br.Read ( buffer , 0 , buffer.Length ) ) > 0 ) { totalBytesRead = totalBytesRead + bytesRead ; // You 've reached the end of the file . if ( totalBytesRead == fileSize ) { last = true ; // Copy to a new buffer that has the correct size . lastBuffer = new byte [ bytesRead ] ; Array.Copy ( buffer , 0 , lastBuffer , 0 , bytesRead ) ; } if ( first ) { using ( MemoryStream contentStream = new MemoryStream ( ) ) { // Add an empty file . FileCreationInformation fileInfo = new FileCreationInformation ( ) ; fileInfo.ContentStream = contentStream ; fileInfo.Url = uniqueFileName ; fileInfo.Overwrite = true ; uploadFile = docs.RootFolder.Files.Add ( fileInfo ) ; // Start upload by uploading the first slice . using ( MemoryStream s = new MemoryStream ( buffer ) ) { // Call the start upload method on the first slice . bytesUploaded = uploadFile.StartUpload ( uploadId , s ) ; ctx.ExecuteQuery ( ) ; // < -- -- -- here exception // fileoffset is the pointer where the next slice will be added . fileoffset = bytesUploaded.Value ; } // You can only start the upload once . first = false ; } } else { // Get a reference to your file . uploadFile = ctx.Web.GetFileByServerRelativeUrl ( docs.RootFolder.ServerRelativeUrl + System.IO.Path.AltDirectorySeparatorChar + uniqueFileName ) ; if ( last ) { // Is this the last slice of data ? using ( MemoryStream s = new MemoryStream ( lastBuffer ) ) { // End sliced upload by calling FinishUpload . uploadFile = uploadFile.FinishUpload ( uploadId , fileoffset , s ) ; ctx.ExecuteQuery ( ) ; // Return the file object for the uploaded file . return uploadFile ; } } else { using ( MemoryStream s = new MemoryStream ( buffer ) ) { // Continue sliced upload . bytesUploaded = uploadFile.ContinueUpload ( uploadId , fileoffset , s ) ; ctx.ExecuteQuery ( ) ; // Update fileoffset for the next slice . fileoffset = bytesUploaded.Value ; } } } } // while ( ( bytesRead = br.Read ( buffer , 0 , buffer.Length ) ) > 0 ) } } finally { if ( fs ! = null ) { fs.Dispose ( ) ; } } } return null ; }"
CultureInfo.CurrentCulture.LCIDEncoding.GetEncoding ( int codePage ) Encoding.CodePage
"public IConfigurationRoot Configuration { get ; } // This method gets called by the runtime . Use this method to add services to the container . public void ConfigureServices ( IServiceCollection services ) { //https : //docs.microsoft.com/en-us/aspnet/core/security/cors services.AddCors ( options = > { options.AddPolicy ( `` AllowSpecificOrigin '' , builder = > builder.WithOrigins ( `` http : //example.com '' ) .AllowAnyHeader ( ) ) ; } ) ; services.Configure < MvcOptions > ( options = > { options.Filters.Add ( new CorsAuthorizationFilterFactory ( `` AllowSpecificOrigin '' ) ) ; } ) ; // Add framework services . services.AddMvc ( ) ; } // This method gets called by the runtime . Use this method to configure the HTTP request pipeline . public void Configure ( IApplicationBuilder app , IHostingEnvironment env , ILoggerFactory loggerFactory ) { loggerFactory.AddConsole ( Configuration.GetSection ( `` Logging '' ) ) ; loggerFactory.AddDebug ( ) ; app.UseCors ( `` AllowSpecificOrigin '' ) ; app.UseMvc ( ) ; }"
"// Iterate all public fields using reflectionforeach ( FieldInfo fi in obj.GetType ( ) .GetFields ( ) ) { // Determine if decorated with MyAttribute . var attribs = fi.GetCustomAttributes ( typeof ( MyAttribute ) , true ) ; if ( attribs.Length == 1 ) { // Get value of field . object value = fi.GetValue ( obj ) ; DoAction ( value ) ; } } // Iterate all public properties using reflectionforeach ( PropertyInfo pi in obj.GetType ( ) .GetProperties ( ) ) { // Determine if decorated with MyAttribute . var attribs = pi.GetCustomAttributes ( typeof ( MyAttribute ) , true ) ; if ( attribs.Length == 1 ) { // Get value of property . object value = pi.GetValue ( obj , null ) ; DoAction ( value ) ; } } DoEachMember ( obj.GetType ( ) .GetFields ( ) ) ; DoEachMember ( obj.GetType ( ) .GetProperties ( ) ) ; public void DoEachMember ( MemberInfo mi , object obj ) { foreach ( MemberInfo mi in obj.GetType ( ) .GetProperties ( ) ) { object value mi.GetValue ( obj ) ; // NO SUCH METHOD ! } } // Delegate to get value from field or property.delegate object GetValue ( MemberInfo mi , object obj ) ; public void DoEachMember ( MemberInfo [ ] members , object obj ) { // Protect against empty array . if ( members.Length == 0 ) return ; GetValue getValue ; // define delegate // First element is FieldInfo if ( members [ 0 ] as FieldInfo ! = null ) getValue = ( mi , obj ) = > ( ( FieldInfo ) mi ) .GetValue ( obj ) ; // First element is PropertyInfo else if ( members [ 0 ] as PropertyInfo ! = null ) getValue = ( mi , obj ) = > ( ( PropertyInfo ) mi ) .GetValue ( obj , null ) ; // Anything else is unacceptable else throw new ArgumentException ( `` Must be field or property . `` ) ; foreach ( MemberInfo mi in members ) { // Determine if decorated with MyAttribute . var attribs = mi.GetCustomAttributes ( typeof ( MyAttribute ) , true ) ; if ( attribs.Length == 1 ) { object value = getValue ( mi , obj ) ; DoStuff ( value ) ; } } } foreach ( MemberInfo mi in members ) { // ... object value ; if ( ( var fi = mi as FieldInfo ) ! = null ) value = fi.GetValue ( obj ) ; else if ( ( var pi = mi as PropertyInfo ) ! = null ) value = pi.GetValue ( obj , null ) ; else throw new ArgumentException ( `` Must be field or property . `` ) ; DoStuff ( value ) ; }"
"System.IO.MemoryStream PDF = new WkHtmlToPdfConverter ( ) .GetPdfStream ( properties ) ; System.IO.FileStream file = new System.IO.FileStream ( `` abc_landscape.pdf '' , System.IO.FileMode.Create ) ; PDF.Position = 0 ; properties.IsHorizontalOrientation = false ; System.IO.MemoryStream PDF_portrait = new WkHtmlToPdfConverter ( ) .GetPdfStream ( properties ) ; System.IO.FileStream file_portrait = new System.IO.FileStream ( `` abc_portrait.pdf '' , System.IO.FileMode.Create ) ; PDF_portrait.Position = 0 ; System.IO.MemoryStream finalStream = new System.IO.MemoryStream ( ) ; PDF.CopyTo ( finalStream ) ; PDF_portrait.CopyTo ( finalStream ) ; System.IO.FileStream file_combined = new System.IO.FileStream ( `` abc_combined.pdf '' , System.IO.FileMode.Create ) ; try { PDF.WriteTo ( file ) ; PDF.Flush ( ) ; PDF_portrait.WriteTo ( file_portrait ) ; PDF_portrait.Flush ( ) ; finalStream.WriteTo ( file_combined ) ; finalStream.Flush ( ) ; } catch ( Exception ) { throw ; } finally { PDF.Close ( ) ; file.Close ( ) ; PDF_portrait.Close ( ) ; file_portrait.Close ( ) ; finalStream.Close ( ) ; file_combined.Close ( ) ; } var htmlStream = new MemoryStream ( ) ; var writer = new StreamWriter ( htmlStream ) ; writer.Write ( htmlString ) ; writer.Flush ( ) ; htmlStream.Position = 0 ; return htmlStream ; Process process = Process.Start ( psi ) ; process.EnableRaisingEvents = true ; try { process.Start ( ) ; process.BeginErrorReadLine ( ) ; var inputTask = Task.Run ( ( ) = > { htmlStream.CopyTo ( process.StandardInput.BaseStream ) ; process.StandardInput.Close ( ) ; } ) ; // Copy the output to a memorystream MemoryStream pdf = new MemoryStream ( ) ; var outputTask = Task.Run ( ( ) = > { process.StandardOutput.BaseStream.CopyTo ( pdf ) ; } ) ; Task.WaitAll ( inputTask , outputTask ) ; process.WaitForExit ( ) ; // Reset memorystream read position pdf.Position = 0 ; return pdf ; } catch ( Exception ex ) { throw ex ; } finally { process.Dispose ( ) ; }"
"using System ; namespace TestingLambda2872 { class Program { static void Main ( string [ ] args ) { Func < int , int > AddToIt = AddToItClosure ( ) ; Console.WriteLine ( `` the result is { 0 } '' , AddToIt ( 3 ) ) ; //returns 30 Console.ReadLine ( ) ; } public static Func < int , int > AddToItClosure ( ) { int a = 27 ; Func < int , int > func = s = > s + a ; return func ; } } }"
int speed = 100 ; int Speed { get ; set ; }
"proc GetPacksPtrNim ( parSze : int , PackArrINOUT : var DataPackArr ) { .stdcall , exportc , dynlib . } = PackArrINOUT.newSeq ( parSze ) var dummyStr = `` abcdefghij '' for i , curDataPack in PackArrINOUT.mpairs : dummyStr [ 9 ] = char ( i + int8 ' 0 ' ) curDataPack = DataPack ( buffer : dummyStr , intVal : uint32 i ) type DataPackArr = seq [ DataPack ] DataPack = object buffer : string intVal : uint32 EXPORT_API void __cdecl c_returnDataPack ( unsigned int size , dataPack** DpArr ) { unsigned int dumln , Index ; dataPack* CurDp = { NULL } ; char dummy [ STRMAX ] ; *DpArr = ( dataPack* ) malloc ( size * sizeof ( dataPack ) ) ; CurDp = *DpArr ; strncpy ( dummy , `` abcdefgHij '' , STRMAX ) ; dumln = sizeof ( dummy ) ; for ( Index = 0 ; Index < size ; Index++ , CurDp++ ) { CurDp- > IVal = Index ; dummy [ dumln-1 ] = ' 0 ' + Index % ( 126 - ' 0 ' ) ; CurDp- > Sval = ( char* ) calloc ( dumln , sizeof ( dummy ) ) ; strcpy ( CurDp- > Sval , dummy ) ; } } [ DllImport ( @ '' cdllI.dll '' , CallingConvention = CallingConvention.Cdecl ) , SuppressUnmanagedCodeSecurity ] private static extern uint c_returnDataPack ( uint x , DataPackg.TestC** tcdparr ) ; public unsafe static class DataPackg { [ StructLayout ( LayoutKind.Sequential ) ] public struct TestC { public uint Id ; public IntPtr StrVal ; } } public static unsafe List < DataPackg.TestC > PopulateLstPackC ( int ArrL ) { DataPackg.TestC* PackUArrOut ; List < DataPackg.TestC > RtLstPackU = new List < DataPackg.TestC > ( ArrL ) ; c_returnDataPack ( ( uint ) ArrL , & PackUArrOut ) ; DataPackg.TestC* CurrentPack = PackUArrOut ; for ( int i = 0 ; i < ArrL ; i++ , CurrentPack++ ) { RtLstPackU.Add ( new DataPackg.TestC ( ) { StrVal = CurrentPack- > StrVal , Id = CurrentPack- > Id } ) ; } //Console.WriteLine ( `` Res= { 0 } '' , Marshal.PtrToStringAnsi ( ( IntPtr ) RtLstPackU [ 1 ] .StrVal ) ) ; //new string ( RtLstPackU [ 0 ] .StrVal ) ) ; return RtLstPackU ; }"
class Constants { public static int nullInt { get { return int.MinValue ; } } } private decimal _unitPrice = Constants.nullInt ; public decimal UnitPrice { get { return _unitPrice ; } set { _unitPrice = ( value == null ) ? Constants.nullInt : value ; } } private void Save ( ) { //Datalayer calls and other props omitted SqlParameter sqlParm = new SqlParameter ( ) ; sqlParm.Value = ( this.UnitPrice == Constants.nullInt ) ? DBNull.Value : ( object ) this.UnitPrice ; } public decimal ? UnitPrice { get ; set ; } private void Save ( ) { //Datalayer calls and other props omitted SqlParameter sqlParm = new SqlParameter ( ) ; sqlParm.Value = this.UnitPrice ? ? DBNull.Value ; }
"public class Foo { ... public Size AvatarSize { get { return myAvatarSize ; } set { myAvatarSize = value ; } } ... } myFoo.AvatarSize = new Size ( 20 , 20 ) ; //this is one possible way myFoo.AvatarSize.Height = 20 ; //.NET stylemyFoo.AvatarSize.Width = 20 ; //error"
"Bus.Send < CreateBatch > ( batch = > { batch.Id = Guid.NewGuid ( ) ; ... . etc } ) ; private void btnSave_Click ( object sender , EventsArg e ) { Bus.Send < CreateBatch > ( batch = > { batch.Id = Guid.NewGuid ( ) ; ... . etc } ) .Register < int > ( c= > { MessageBox.Show ( `` Command Succeded '' ) ; Close ( ) ; } ) ; } public void Hanlde ( CreateBatch cmd ) { //initiate aggregate and save it . Bus.Return ( /*What ? ? Success Code ? */ ) ; } private void btnSave_Click ( object sender , EventsArg e ) { Bus.Send < CreateBatch > ( batch = > { batch.Id = Guid.NewGuid ( ) ; ... . etc } ) ; Close ( ) ; } private void btnSave_Click ( object sender , EventsArg e ) { Bus.Send < CreateBatch > ( batch = > { batch.Id = Guid.NewGuid ( ) ; ... . etc } ) ; Close ( ) ; } public class BatchHandler : IHandleMessages < BatchCreated > { public void Handle ( BatchCreated evnt ) { if ( SomeCachForSentIDS.Contains ( evnt.BatchId ) ///Code to refresh the row in the grid and reflect that the command succeeded . } }"
"using System ; using System.Threading ; ... var factory = ( ) = > { return new object ( ) ; } ; var lazy = new Lazy < object > ( factory , LazyThreadSafetyMode.ExecutionAndPublication ) ;"
private const int THRESHHOLD = 2 ; static void Main ( string [ ] args ) { string hello ; if ( THRESHHOLD > 1 ) return ; Console.WriteLine ( hello ) ; } private const int THRESHHOLD = 2 ; static void Main ( string [ ] args ) { string hello ; if ( THRESHHOLD > 1 ) return ; hello.LMFAO ( ) ; }
"APIHANDLE GizmoCreateHandle ( ) ; CHILDHANDLE GizmoCreateChildHandle ( APIHANDLE apiHandle ) ; GizmoCloseHandle ( APIHANDLE apiHandle ) ; GizmoCloseChildHandle ( APIHANDLE apiHandle , CHILDHANDLE childHandle ) ; [ DllImport ( `` gizmo.dll '' ) ] private static extern ApiSafeHandle GizmoCreateHandle ( ) ; [ DllImport ( `` gizmo.dll '' ) ] private static extern void GizmoCloseHandle ( IntPtr apiHandle ) ; [ DllImport ( `` gizmo.dll '' ) ] private static extern ChildSafeHandle GizmoCreateChildHandle ( ApiSafeHandle apiHandle ) ; [ DllImport ( `` gizmo.dll '' ) ] private static extern void GizmoCloseChildHandle ( ApiSafeHandle apiHandle , IntPtr childHandle ) ; [ DllImport ( `` gizmo.dll '' ) ] private static extern void GizmoChildModify ( ChildSafeHandle childHandle , int flag ) ; public class ApiSafeHandle : SafeHandle { public ApiSafeHandle ( ) : base ( IntPtr.Zero , true ) { } public override bool IsInvalid { get { return this.handle == IntPtr.Zero ; } } protected override bool ReleaseHandle ( ) { GizmoCloseHandle ( this.handle ) ; return true ; } } public class ChildSafeHandle : SafeHandle { private ApiSafeHandle apiHandle ; public ChildSafeHandle ( ) : base ( IntPtr.Zero , true ) { } public override bool IsInvalid { get { return this.handle == IntPtr.Zero ; } } public void SetParent ( ApiSafeHandle handle ) { this.apiHandle = handle ; } // This method is part of the finalizer for SafeHandle . // It access its own handle plus the API handle , which is also a SafeHandle // According to MSDN , this violates the rules for finalizers . protected override bool ReleaseHandle ( ) { if ( this.apiHandle == null ) { // We were used incorrectly - we were allocated , but never given // the means to deallocate ourselves return false ; } else if ( this.apiHandle.IsClosed ) { // Our parent was already closed , which means we were implicitly closed . return true ; } else { GizmoCloseChildHandle ( apiHandle , this.handle ) ; return true ; } } } public class GizmoApi { ApiSafeHandle apiHandle ; public GizmoApi ( ) { this.apiHandle = GizmoCreateHandle ( ) ; } public GizmoChild CreateChild ( ) { ChildSafeHandle childHandle = GizmoCreateChildHandle ( this.apiHandle ) ; childHandle.SetParent ( this.apiHandle ) ; return new GizmoChild ( childHandle ) ; } } public class GizmoChild { private ChildSafeHandle childHandle ; internal GizmoChild ( ChildSafeHandle handle ) { this.childHandle = handle ; } public void SetFlags ( int flags ) { GizmoChildModify ( this.childHandle , flags ) ; } // etc . }"
"POST / ... /Upload.asp ? b_customerId= [ O/M1234 ] HTTP/1.1Content-length : 12345Content-type : multipart/form-data ; boundary=vxvxvHost : www.foo.com -- vxvxvContent-disposition : form-data ; name= ” File1 ” ; filename= ” noColonsSpacesOrAmpersandsInHere ” Content-type : text/xml < ? xml version= ” 1.0 ” encoding= ” UTF-8 ” ? > ... < bat : Batch ... ... ... . < /bat : Batch > -- vxvxv -- data = `` -- vxvxv '' + Environment.NewLine + `` Content-disposition : form-data ; name=\ '' File1\ '' ; '' + Environment.NewLine + `` filename=\ '' provideTest.xml\ '' '' + Environment.NewLine + `` Content-type : text/xml '' + Environment.NewLine + @ '' < ? xml version= '' '' 1.0 '' '' encoding= '' '' UTF-8 '' '' ? > '' + Environment.NewLine + data + Environment.NewLine + `` -- vxvxv -- '' ; var encoding = ASCIIEncoding.UTF8 ; HttpWebRequest request ; var postData = encoding.GetBytes ( data ) ; request = ( HttpWebRequest ) WebRequest.Create ( url ) ; request.ContentLength = postData.Length ; request.Method = `` POST '' ; request.ContentType = `` multipart/form-data ; boundary=vxvxv '' ; request.Host = `` www.foo.com '' ; request.ContentLength = postData.Length ; X509Certificate2Collection certCollect = new X509Certificate2Collection ( ) ; X509Certificate2 cert = new X509Certificate2 ( @ '' C : \a\cert.pfx '' , `` password '' ) ; certCollect.Add ( cert ) ; request.ClientCertificates = certCollect ; using ( Stream writeStream = request.GetRequestStream ( ) ) { writeStream.Write ( postData , 0 , postData.Length ) ; } WebResponse webResponse = request.GetResponse ( ) ; string output = new StreamReader ( webResponse.GetResponseStream ( ) ) .ReadToEnd ( ) ; LogEntry.Write ( `` Recieved : `` + output ) ; return output ; POST https : //../Upload.asp ? b_customerId= % 5BO/M1234 % 5D HTTP/1.1Content-Type : multipart/form-data ; boundary=vxvxvHost : www.foo.comContent-Length : 5500Expect : 100-continueConnection : Keep-Alive -- vxvxvContent-disposition : form-data ; name= '' File1 '' ; filename= '' provideTest.xml '' Content-type : text/xml < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > ... SNIP ... < /bat : Batch > -- vxvxv --"
var posts = from post in postsRepository.GetPosts ( name ) let commentsCount = ( from c in NHUnitOfWork.CurrentSession.Linq < Comment > ( ) where c.Post.ID == post.ID select c ) .Count ( ) select new ...
public class GenericClass < T > { } public bool IsDeriveFrom ( object o ) { return o.GetType ( ) .IsSubclassOf ( typeof ( GenericClass ) ) ; //will throw exception here }
public abstract class Vehicle { public abstract boolean IsNew ; } public partial class Car : Vehicle { public override boolean IsNew { get { _isNew.Invoke ( this ) ; } } } public partial class Motorcycle : Vehicle { public override boolean IsNew { get { _isNew.Invoke ( this ) ; } } }
interface ITicket < T > where T : ITicketable { } public class TicketRequiredAttribute : Attribute { public TicketRequiredAttribute ( ITicket < T > ticket ) { if ( ticket == null ) return ; } } [ TicketRequired ( CreateProductTicket ) ] public ActionResult CreateProduct ( Product product ) { // ... **I am unsure how to tell if TicketRequired was true or not** }
"// GET : api/people/ { personId } [ Route ( `` api/people/ { personId } '' ) ] [ HttpGet ] public HttpResponseMessage Get ( long personId ) { } // GET : api/people ? text=something [ Route ( `` api/people '' ) ] [ HttpGet ] public HttpResponseMessage Get ( string text ) { } config.Routes.MapHttpRoute ( name : `` DefaultApi '' , routeTemplate : `` api/ { controller } / { id } '' , defaults : new { id = RouteParameter.Optional } ) ;"
"public class Emoticon { public Emoticon ( string key , Bitmap bitmap ) { Key = key ; Bitmap = bitmap ; BitmapImage = bitmap.ToBitmapImage ( ) ; } public string Key { get ; } public Bitmap Bitmap { get ; } public BitmapImage BitmapImage { get ; } } public class EmoticonRichTextBox : RichTextBox { private readonly List < Emoticon > _emoticons ; public EmoticonRichTextBox ( ) { _emoticons = new List < Emoticon > { new Emoticon ( `` : D '' , Properties.Resources.grinning_face ) } ; } protected override void OnTextChanged ( TextChangedEventArgs e ) { base.OnTextChanged ( e ) ; Dispatcher.InvokeAsync ( Look ) ; } private void Look ( ) { const string keyword = `` : D '' ; var text = new TextRange ( Document.ContentStart , Document.ContentEnd ) ; var current = text.Start.GetInsertionPosition ( LogicalDirection.Forward ) ; while ( current ! = null ) { var textInRun = current.GetTextInRun ( LogicalDirection.Forward ) ; if ( ! string.IsNullOrWhiteSpace ( textInRun ) ) { var index = textInRun.IndexOf ( keyword , StringComparison.Ordinal ) ; if ( index ! = -1 ) { var selectionStart = current.GetPositionAtOffset ( index , LogicalDirection.Forward ) ; if ( selectionStart == null ) continue ; var selectionEnd = selectionStart.GetPositionAtOffset ( keyword.Length , LogicalDirection.Forward ) ; var selection = new TextRange ( selectionStart , selectionEnd ) { Text = string.Empty } ; var emoticon = _emoticons.FirstOrDefault ( x = > x.Key.Equals ( keyword ) ) ; if ( emoticon == null ) continue ; var image = new System.Windows.Controls.Image { Source = emoticon.BitmapImage , Height = 18 , Width = 18 , Margin = new Thickness ( 0 , 3 , 0 , 0 ) } ; // inserts at the end of the line selection.Start ? .Paragraph ? .Inlines.Add ( image ) ; // does n't work CaretPosition = CaretPosition.GetPositionAtOffset ( 1 , LogicalDirection.Forward ) ; } } current = current.GetNextContextPosition ( LogicalDirection.Forward ) ; } } } public static class BitmapExtensions { public static BitmapImage ToBitmapImage ( this Bitmap bitmap ) { using ( var stream = new MemoryStream ( ) ) { bitmap.Save ( stream , ImageFormat.Png ) ; stream.Position = 0 ; var image = new BitmapImage ( ) ; image.BeginInit ( ) ; image.CacheOption = BitmapCacheOption.OnLoad ; image.DecodePixelHeight = 18 ; image.DecodePixelWidth = 18 ; image.StreamSource = stream ; image.EndInit ( ) ; image.Freeze ( ) ; return image ; } } }"
"public class Schedule { public Schedule ( ) { } private ICollection < ScheduleDetail > _assignedWeeks ; public int Id { get ; set ; } public string Name { get ; set ; } public int WorkingGroupId { get ; set ; } public ScheduleType ScheduleType { get ; set ; } public bool IsFixed { get ; } public bool IsFlexible { get ; } public bool IsFullTime { get ; } public ICollection < ScheduleDetail > AssignedWeeks { get = > _assignedWeeks ; set = > _assignedWeeks = value ; } } public abstract class ScheduleType : Enumeration { protected ScheduleType ( int value , string displayName ) : base ( value , displayName ) { } public static readonly ScheduleType Fixed = new FixedType ( ) ; public static readonly ScheduleType Flexible = new FlexibleType ( ) ; public static readonly ScheduleType FullTime = new FullTimeType ( ) ; public static readonly ScheduleType PartTime = new PartTimeType ( ) ; public static readonly ScheduleType Rotated = new RotatedType ( ) ; private class FixedType : ScheduleType { public FixedType ( ) : base ( 1 , `` Fixed Work Schedule '' ) { } } private class FlexibleType : ScheduleType { public FlexibleType ( ) : base ( 2 , `` Flexible Work Schedule '' ) { } } private class FullTimeType : ScheduleType { public FullTimeType ( ) : base ( 3 , `` Full Time Work Schedule '' ) { } } private class PartTimeType : ScheduleType { public PartTimeType ( ) : base ( 4 , `` Part Time Work Schedule '' ) { } } private class RotatedType : ScheduleType { public RotatedType ( ) : base ( 5 , `` Rotated Work Schedule '' ) { } } } public abstract class Enumeration : IComparable { private readonly int _value ; private readonly string _displayName ; protected Enumeration ( ) { } protected Enumeration ( int value , string displayName ) { _value = value ; _displayName = displayName ; } public int Value { get { return _value ; } } public string DisplayName { get { return _displayName ; } } public override string ToString ( ) { return DisplayName ; } public static IEnumerable < T > GetAll < T > ( ) where T : Enumeration , new ( ) { var type = typeof ( T ) ; var fields = type.GetFields ( BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly ) ; foreach ( var info in fields ) { var instance = new T ( ) ; var locatedValue = info.GetValue ( instance ) as T ; if ( locatedValue ! = null ) { yield return locatedValue ; } } } public override bool Equals ( object obj ) { var otherValue = obj as Enumeration ; if ( otherValue == null ) { return false ; } var typeMatches = GetType ( ) .Equals ( obj.GetType ( ) ) ; var valueMatches = _value.Equals ( otherValue.Value ) ; return typeMatches & & valueMatches ; } public override int GetHashCode ( ) { return _value.GetHashCode ( ) ; } public static int AbsoluteDifference ( Enumeration firstValue , Enumeration secondValue ) { var absoluteDifference = Math.Abs ( firstValue.Value - secondValue.Value ) ; return absoluteDifference ; } public static T FromValue < T > ( int value ) where T : Enumeration , new ( ) { var matchingItem = parse < T , int > ( value , `` value '' , item = > item.Value == value ) ; return matchingItem ; } public static T FromDisplayName < T > ( string displayName ) where T : Enumeration , new ( ) { var matchingItem = parse < T , string > ( displayName , `` display name '' , item = > item.DisplayName == displayName ) ; return matchingItem ; } private static T parse < T , K > ( K value , string description , Func < T , bool > predicate ) where T : Enumeration , new ( ) { var matchingItem = GetAll < T > ( ) .FirstOrDefault ( predicate ) ; if ( matchingItem == null ) { var message = string.Format ( `` ' { 0 } ' is not a valid { 1 } in { 2 } '' , value , description , typeof ( T ) ) ; throw new ApplicationException ( message ) ; } return matchingItem ; } public int CompareTo ( object other ) { return Value.CompareTo ( ( ( Enumeration ) other ) .Value ) ; } }"
"public class BillingItem { public virtual int ID { get ; set ; } public virtual string Name { get ; set ; } // ... other properties public virtual ICollection < PaymentItem > PaymentItems { get ; set ; } public BillingItem ( ) { PaymentItems = new List < PaymentItem > ( ) ; } } public class PaymentItem { public virtual int ID { get ; set ; } public virtual BillingItem OwningBillingItem { get ; set ; } // ... other properties } public class BillingItemMapping : ClassMapping < BillingItem > { public BillingItemMapping ( ) { Table ( `` BillingItems '' ) ; Lazy ( true ) ; Id ( x = > x.ID , map = > map.Generator ( Generators.Identity ) ) ; Set ( x = > x.PaymentItems , c = > { c.Key ( k = > { k.Column ( `` ID '' ) ; k.ForeignKey ( `` BillingItemID '' ) ; } ) ; c.Inverse ( true ) ; c.Cascade ( Cascade.None ) ; } , r = > r.OneToMany ( o = > { } ) ) ; Property ( x = > x.Name ) ; // ... other properties } } public class PaymentItemMapping : ClassMapping < PaymentItem > { public PaymentItemMapping ( ) { Table ( `` PaymentItems '' ) ; Lazy ( true ) ; Id ( x = > x.ID , map = > map.Generator ( Generators.Identity ) ) ; ManyToOne ( x = > x.OwningBillingItem , m = > { m.Column ( `` ID '' ) ; m.Update ( false ) ; m.Insert ( false ) ; m.Cascade ( Cascade.None ) ; m.Fetch ( FetchKind.Join ) ; m.NotFound ( NotFoundMode.Exception ) ; m.Lazy ( LazyRelation.Proxy ) ; m.ForeignKey ( `` BillingItemID '' ) ; } ) ; Property ( x = > x.DueDate , map = > map.NotNullable ( true ) ) ; // ... other properties . } } public void Add ( BillingItem toAdd ) { using ( ISession session = Helpers.NHibernateHelper.OpenSession ( ) ) using ( ITransaction tran = session.BeginTransaction ( ) ) { session.Save ( toAdd ) ; foreach ( var pi in toAdd.PaymentItems ) { session.Save ( pi ) ; } tran.Commit ( ) ; } } var bi = new BillingItem ( ) { Name = Guid.NewGuid ( ) .ToString ( ) , // ... others.. } ; var pi = new PaymentItem ( ) { OwningBillingItem = bi , DueDate = DateTime.Now.AddDays ( 3 ) // ... others.. } ; bi.PaymentItems.Add ( pi ) ; var repo = new Repository ( ) ; repo.Add ( bi ) ; OwningBillingItem = bi bi.PaymentItems.Add ( pi ) ;"
"private static Logger _logger = LogManager.GetCurrentClassLogger ( ) ; public static bool IsIpInternal ( ) { var ipAddress = HttpContext.Current.Request.UserHostAddress ; var logEvent = new LogEventInfo ( LogLevel.Info , _logger.Name , ipAddress ) ; _logger.Log ( logEvent ) ; try { if ( ipAddress ! = null ) { var ipParts = ipAddress.Split ( new [ ] { `` . '' } , StringSplitOptions.RemoveEmptyEntries ) .Select ( int.Parse ) .ToArray ( ) ; var isDebug = System.Diagnostics.Debugger.IsAttached ; if ( ipParts [ 0 ] == 10 ) { return true ; } } } catch ( Exception e ) { logEvent = new LogEventInfo ( LogLevel.Error , _logger.Name , e.Message ) ; _logger.Log ( logEvent ) ; return false ; } return false ; }"
'reader [ `` DateDue '' ] as DateTime ? ' threw an exception of type 'System.NullReferenceException'Data : { System.Collections.ListDictionaryInternal } HResult : -2147467261HelpLink : nullInnerException : nullMessage : `` Object reference not set to an instance of an object . `` Source : nullStackTrace : nullTargetSite : null { 1/26/2015 12:00:00 AM } Date : { 1/26/2015 12:00:00 AM } Day : 26DayOfWeek : MondayDayOfYear : 26Hour : 0Kind : UnspecifiedMillisecond : 0Minute : 0Month : 1Second : 0Ticks : 635578272000000000TimeOfDay : { System.TimeSpan } Year : 2015 { 1/26/2015 12:00:00 AM } Date : { 1/26/2015 12:00:00 AM } Day : 26DayOfWeek : MondayDayOfYear : 26Hour : 0Kind : UnspecifiedMillisecond : 0Minute : 0Month : 1Second : 0Ticks : 635578272000000000TimeOfDay : { 00:00:00 } Year : 2015
"config .AddJsonFile ( `` appsettings.json '' ) .AddCommandLine ( args ) ; var actions = _configuration.GetSection ( `` actions '' ) .Get < List < string > > ( ) ; foreach ( var action in actions ) { Console.WriteLine ( action ) ; } dotnet MyService.dll -- actions Action1 , Action2dotnet MyService.dll -- actions [ Action1 , Action2 ] dotnet MyService.dll -- actions [ `` Action1 '' , '' Action2 '' ]"
"public IActionResult Process ( ) { return View ( ) ; } [ HttpPost ] public IActionResult Process ( List < IFormFile > files ) { var telemetry = new TelemetryClient ( ) ; try { var result = files.Count + `` file ( s ) processed `` + Environment.NewLine ; foreach ( var file in files ) { result += file.FileName + Environment.NewLine ; var memoryStream = new MemoryStream ( ) ; file.CopyTo ( memoryStream ) ; memoryStream.Seek ( 0 , SeekOrigin.Begin ) ; var binaryReader = new BinaryReader ( memoryStream ) ; var bytes = binaryReader.ReadBytes ( ( int ) memoryStream.Length ) ; var imageInformation = ImageService.ProcessImage ( bytes ) ; ImageService.SaveImage ( imageInformation.Result , bytes , file.FileName.Substring ( file.FileName.LastIndexOf ( `` . `` , StringComparison.Ordinal ) + 1 ) ) ; } return View ( ( object ) result ) ; } catch ( Exception ex ) { telemetry.TrackException ( ex ) ; throw ; } } POST https : //os-gbsphotoretain.azurewebsites.net/Image/Process HTTP/1.1Host : os-gbsphotoretain.azurewebsites.netConnection : keep-aliveContent-Length : 924Pragma : no-cacheCache-Control : no-cacheOrigin : https : //os-gbsphotoretain.azurewebsites.netUpgrade-Insecure-Requests : 1User-Agent : Mozilla/5.0 ( Windows NT 10.0 ; Win64 ; x64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/60.0.3112.90 Safari/537.36Content-Type : multipart/form-data ; boundary= -- -- WebKitFormBoundarySjQVgrsvAqJYXmSTAccept : text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , image/apng , */* ; q=0.8Referer : https : //os-gbsphotoretain.azurewebsites.net/Image/ProcessAccept-Encoding : gzip , deflate , brAccept-Language : en-US , en ; q=0.8Cookie : _ga=GA1.3.955734319.1501514097 ; ai_user=UkqSf|2017-07-31T15:17:38.409Z ; ARRAffinity=1628d46398b292eb2e3ba76b4b0f1eb1e30abd9bd1036d7a90b9c51f7baa2306 ; ai_session=/fPFh|1502738361594.15|1502738361594.15 -- -- -- WebKitFormBoundarySjQVgrsvAqJYXmSTContent-Disposition : form-data ; name= '' files '' ; filename= '' printer.jpg '' Content-Type : image/jpeg JFIF ` ` C $ . ' `` , # ( 7 ) ,01444 ' 9=82 < .342 C 2 ! ! 22222222222222222222222222222222222222222222222222 `` } ! 1AQa `` q2 # B R $ 3br % & ' ( ) *456789 : CDEFGHIJSTUVWXYZcdefghijstuvwxyz w ! 1AQ aq '' 2 B # 3R br $ 4 % & ' ( ) *56789 : CDEFGHIJSTUVWXYZcdefghijstuvwxyz ? +X K 21 c Z ] ӥg v ; : P I f > m ; ] ֬u nm ` Q 1 P6 s 9 |b r| G -- -- -- WebKitFormBoundarySjQVgrsvAqJYXmST -- { `` $ content-type '' : `` image/jpeg '' , `` $ content '' : `` /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAAQABADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD1C9EMuqzGK1juS+3P7rccgc4yMYxjv1q/ol0I4bfTpQVniXaoyDuQHjoTg7ccGsDU7O+0+xEdoJfMUKiKE84MB/dJ5B9mzj6VneFtO1271qx1G+hubaGBjmCSUfMSMZZQNoxzgDnPfGKqcnypEJW1R//Z '' } [ HttpPost ] public IActionResult ProcessJson ( string json ) { var telemetry = new TelemetryClient ( ) ; try { var result = `` JSON processed `` + Environment.NewLine ; var details = ( dynamic ) Newtonsoft.Json.JsonConvert.DeserializeObject ( json ) ; var content = ( string ) details [ `` $ content '' ] ; var bytes = Convert.FromBase64String ( content ) ; ProcessBytes ( bytes , `` jpeg '' ) ; return View ( `` Process '' , result ) ; } catch ( Exception ex ) { telemetry.TrackException ( ex ) ; throw ; } } [ HttpPost ] public IActionResult ProcessJson ( [ FromBody ] FlowFile file ) { ... } public class FlowFile { [ JsonProperty ( PropertyName = `` $ content-type '' ) ] public string ContentType { get ; set ; } [ JsonProperty ( PropertyName = `` $ content '' ) ] public string Content { get ; set ; } } & # xD ; & # xA ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x0 ; & # x10 ; JFIF & # x0 ; & # x1 ; & # x1 ; & # x1 ; & # x0 ; ` & # x0 ; ` & # x0 ; & # x0 ; & # xFFFD ; & # xFFFD ; & # x0 ; C & # x0 ; & # x8 ; & # x6 ; & # x6 ; & # x7 ; & # x6 ; & # x5 ; & # x8 ; & # x7 ; & # x7 ; & # x7 ; & # x9 ; & # x9 ; & # x8 ; & # xA ; & # xC ; & # x14 ; & # xD ; & # xC ; & # xB ; & # xB ; & # xC ; & # x19 ; & # x12 ; & # x13 ; & # xF ; & # x14 ; & # x1D ; & # x1A ; & # x1F ; & # x1E ; & # x1D ; & # x1A ; & # x1C ; & # x1C ; $ . & # x27 ; & quot ; , # & # x1C ; & # x1C ; ( 7 ) ,01444 & # x1F ; & # x27 ; 9=82 & lt ; .342 & # xFFFD ; & # xFFFD ; & # x0 ; C & # x1 ; & # x9 ; & # x9 ; & # x9 ; & # xC ; & # xB ; & # xC ; & # x18 ; & # xD ; & # xD ; & # x18 ; 2 ! & # x1C ; ! 22222222222222222222222222222222222222222222222222 & # xFFFD ; & # xFFFD ; & # x0 ; & # x11 ; & # x8 ; & # x0 ; & # x10 ; & # x0 ; & # x10 ; & # x3 ; & # x1 ; & quot ; & # x0 ; & # x2 ; & # x11 ; & # x1 ; & # x3 ; & # x11 ; & # x1 ; & # xFFFD ; & # xFFFD ; & # x0 ; & # x1F ; & # x0 ; & # x0 ; & # x1 ; & # x5 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x1 ; & # x2 ; & # x3 ; & # x4 ; & # x5 ; & # x6 ; & # x7 ; & # x8 ; & # x9 ; & # xA ; & # xB ; & # xFFFD ; & # xFFFD ; & # x0 ; & # xFFFD ; & # x10 ; & # x0 ; & # x2 ; & # x1 ; & # x3 ; & # x3 ; & # x2 ; & # x4 ; & # x3 ; & # x5 ; & # x5 ; & # x4 ; & # x4 ; & # x0 ; & # x0 ; & # x1 ; } & # x1 ; & # x2 ; & # x3 ; & # x0 ; & # x4 ; & # x11 ; & # x5 ; & # x12 ; ! 1A & # x6 ; & # x13 ; Qa & # x7 ; & quot ; q & # x14 ; 2 & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x8 ; # B & # xFFFD ; & # xFFFD ; & # x15 ; R & # xFFFD ; & # xFFFD ; $ 3br & # xFFFD ; & # x9 ; & # xA ; & # x16 ; & # x17 ; & # x18 ; & # x19 ; & # x1A ; % & amp ; & # x27 ; ( ) *456789 : CDEFGHIJSTUVWXYZcdefghijstuvwxyz & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x0 ; & # x1F ; & # x1 ; & # x0 ; & # x3 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x1 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x0 ; & # x1 ; & # x2 ; & # x3 ; & # x4 ; & # x5 ; & # x6 ; & # x7 ; & # x8 ; & # x9 ; & # xA ; & # xB ; & # xFFFD ; & # xFFFD ; & # x0 ; & # xFFFD ; & # x11 ; & # x0 ; & # x2 ; & # x1 ; & # x2 ; & # x4 ; & # x4 ; & # x3 ; & # x4 ; & # x7 ; & # x5 ; & # x4 ; & # x4 ; & # x0 ; & # x1 ; & # x2 ; w & # x0 ; & # x1 ; & # x2 ; & # x3 ; & # x11 ; & # x4 ; & # x5 ; ! 1 & # x6 ; & # x12 ; AQ & # x7 ; aq & # x13 ; & quot ; 2 & # xFFFD ; & # x8 ; & # x14 ; B & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x9 ; # 3R & # xFFFD ; & # x15 ; br & # xFFFD ; & # xA ; & # x16 ; $ 4 & # xFFFD ; % & # xFFFD ; & # x17 ; & # x18 ; & # x19 ; & # x1A ; & amp ; & # x27 ; ( ) *56789 : CDEFGHIJSTUVWXYZcdefghijstuvwxyz & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x0 ; & # xC ; & # x3 ; & # x1 ; & # x0 ; & # x2 ; & # x11 ; & # x3 ; & # x11 ; & # x0 ; ? & # x0 ; & # xFFFD ; & # xB ; & # xFFFD ; & # xC ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x2B ; X & # xFFFD ; K & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x1C ; & # xFFFD ; & # xFFFD ; 21 & # xFFFD ; c & # xFFFD ; Z & # xFFFD ; & # xFFFD ; ] & # x8 ; & # xFFFD ; & # x4E5 ; & # x5 ; g & # xFFFD ; v & # xFFFD ; & # xFFFD ; ; & # xFFFD ; & # x1E ; : & # x13 ; & # xFFFD ; & # xFFFD ; & # x1C ; & # x1A ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # xFFFD ; & # x11 ; & # x1D ; & # xFFFD ; & # xFFFD ; & # xFFFD ; P & # xFFFD ; & # xFFFD ; & # x13 ; & # xFFFD ; & # xC ; & # x7 ; & # xFFFD ; I & # xFFFD ; & # x1F ; f & # xFFFD ; & gt ; & # xFFFD ; & # xFFFD ; & # xFFFD ; m ; ] & # xFFFD ; & # x5AC ; u & # x1B ; & # xFFFD ; nm & # xFFFD ; & # xFFFD ; & # xFFFD ; ` & # xFFFD ; Q & # xFFFD ; & # x12 ; 1 & # xFFFD ; P6 & # xFFFD ; s & # xFFFD ; 9 & # xFFFD ; |b & # xFFFD ; r| & # xFFFD ; & # x10 ; & # xFFFD ; & # xFFFD ; G & # xFFFD ;"
"HTMLAgilityPack.dllMySql.Data.dllRKLib.ExportData.dll ************** Exception Text **************System.MissingMethodException : Method not found : 'Void System.Threading.Monitor.Enter ( System.Object , Boolean ByRef ) '.at MySql.Data.MySqlClient.MySqlConnection.set_ConnectionString ( String value ) at MySql.Data.MySqlClient.MySqlConnection..ctor ( String connectionString ) in : line 0"
"public static void Send ( MailItem mail ) { var sender = Membership.GetUser ( mail.CreatedBy ) ; if ( sender == null ) { return ; } using ( var msg = new MailMessage { From = new MailAddress ( ConfigurationManager.AppSettings [ `` EmailSender '' ] , ConfigurationManager.AppSettings [ `` EmailSenderName '' ] ) } ) { foreach ( var recipient in mail.MailRecipients ) { var recipientX = Membership.GetUser ( recipient.UserKey ) ; if ( recipientX == null ) { continue ; } msg.To.Add ( new MailAddress ( recipientX.Email , recipientX.UserName ) ) ; } msg.Subject = `` [ From : `` + sender.UserName + `` ] '' + mail.Subject ; msg.Body = mail.Body ; if ( HttpContext.Current ! = null ) { msg.Body += Environment.NewLine + Environment.NewLine + `` To reply via Web click link below : '' + Environment.NewLine ; msg.Body += ConfigurationManager.AppSettings [ `` MailPagePath '' ] + `` ? AID= '' + ContextManager.CurrentAccount.AccountId + `` & RUN= '' + sender.UserName ; } try { using ( var emailClient = new SmtpClient ( ) ) { emailClient.Send ( msg ) ; } } catch ( Exception ex ) { Logger.LogException ( ex ) ; } } }"
"try { await connection.OpenAsync ( ) ; var obj = await cmd.ExecuteScalarAsync ( ) ; return obj ! = null ? Int32.Parse ( obj.ToString ( ) ) ! = 1 : false ; } catch ( Exception ex ) { Log.Error ( `` An error has occurred checking a customer/product authorization . `` , ex ) ; return false ; } finally { connection.Close ( ) ; } SELECT ( CASE WHEN @ HasAuthTable = 0 THEN 1 ELSE 0 END ) | @ IsAuthorized AS IsAuthorized obj0obj == nullfalseobj ! = nullfalseobj == 0error CS0019 : Operator '== ' can not be applied to operands of type 'object ' and 'int'obj ! = 0error CS0019 : Operator ' ! = ' can not be applied to operands of type 'object ' and 'int ' ( int ) obj == 0true ( int ) obj ! = 0falseobj.GetType ( ) .FullName '' System.Int32 '' obj.Equals ( null ) false ! obj.Equals ( null ) trueObject.ReferenceEquals ( obj , null ) false ! Object.ReferenceEquals ( obj , null ) false SELECT CAST ( ( ( CASE WHEN @ HasAuthTable = 0 THEN 1 ELSE 0 END ) | @ IsAuthorized ) AS BIT ) AS IsAuthorized objfalseobj ! = nullfalseobj == nullfalseobj.GetType ( ) .FullName '' System.Boolean ''"
"private void falseDesktop_MouseMove ( object sender , MouseEventArgs e ) { zoomBox.Image = showZoomBox ( e.Location ) ; zoomBox.Invalidate ( ) ; } private Image showZoomBox ( Point curLocation ) { int x = 0 ; int y = 0 ; if ( curLocation.X - 12 < = 0 ) { x = curLocation.X - 12 ; } else { x = curLocation.X ; } if ( curLocation.Y - 11 < = 0 ) { y = curLocation.Y - 11 ; } else { y = curLocation.Y ; } Point start = new Point ( curLocation.X - 12 , curLocation.Y - 11 ) ; Size size = new Size ( 24 , 22 ) ; Rectangle rect = new Rectangle ( start , size ) ; Image selection = cropImage ( falseDesktop.Image , rect ) ; return selection ; } private static Image cropImage ( Image img , Rectangle cropArea ) { if ( cropArea.Width ! = 0 & & cropArea.Height ! = 0 ) { Bitmap bmpImage = new Bitmap ( img ) ; Bitmap bmpCrop = bmpImage.Clone ( cropArea , bmpImage.PixelFormat ) ; bmpImage.Dispose ( ) ; return ( Image ) ( bmpCrop ) ; } return null ; }"
Console.WriteLine ( `` Enter a string : `` ) ; var name = Console.ReadLine ( ) ; var intoarray = new char [ name.Length ] ; for ( var i = 0 ; i < = intoarray.Length ; i++ ) { intoarray [ i ] = name [ i ] ; } foreach ( var n in intoarray ) Console.WriteLine ( intoarray [ n ] ) ;
"public static IObservable < U > Select < T , U > ( this IObservable < T > source , Func < T , CancellationToken , Task < U > > selector ) ; Dropbox.GetImagesRecursively ( ) .ObserveOn ( SynchronizationContext.Current ) .Select ( DownloadImage ) .Subscribe ( AddImageToFilePicker ) ;"
"< xctk : WizardPage x : Name= '' NewContactPage '' PageType= '' Interior '' Title= '' Contacts '' Style= '' { DynamicResource NewContactPage } '' CanCancel= '' True '' CanFinish= '' False '' Loaded= '' NewContactPage_Loaded '' PreviousPage= '' { Binding ElementName=NewPersonPage } '' > < Grid HorizontalAlignment= '' Stretch '' VerticalAlignment= '' Top '' > < control : DataLoader x : Name= '' ctrNewContactLoader '' / > < StackPanel HorizontalAlignment= '' Stretch '' VerticalAlignment= '' Top '' Orientation= '' Vertical '' > < ItemsControl ItemsSource= '' { Binding Path=Person.PersonContacts , Mode=TwoWay , RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType=Window } } '' Name= '' icContacts '' > < ItemsControl.ItemTemplate > < ItemContainerTemplate > < StackPanel HorizontalAlignment= '' Stretch '' VerticalAlignment= '' Top '' Orientation= '' Vertical '' Margin= '' 5 '' Background= '' WhiteSmoke '' > < CheckBox IsChecked= '' { Binding Path=IsValid } '' Content= '' { Binding Path=ContactType.Description } '' Name= '' cbContactVisible '' / > < Grid HorizontalAlignment= '' Stretch '' VerticalAlignment= '' Top '' Visibility= '' { Binding ElementName=cbContactVisible , Path=IsChecked , Converter= { StaticResource BooleanToVisibilityConverter } } '' > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < Grid.RowDefinitions > < RowDefinition Height= '' auto '' / > < /Grid.RowDefinitions > < TextBox Grid.Row= '' 0 '' Grid.Column= '' 0 '' HorizontalAlignment= '' Stretch '' MaxLength= '' 64 '' Name= '' txtContactValue '' Text= '' { Binding Path=Contact , ValidatesOnDataErrors=True , ValidatesOnNotifyDataErrors=True , ValidatesOnExceptions=True } '' / > < /Grid > < /StackPanel > < /ItemContainerTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl > < /StackPanel > < /Grid > public class PersonContactModel : BaseObjectModel { public PersonContactModel ( ) { this.Created = DateTime.Now ; this.Updated = DateTime.Now ; this.IsValid = true ; this.ContactType = new ContactTypeModel ( ) ; } public string Contact { get ; set ; } public ContactTypeModel ContactType { get ; set ; } public DateTime Created { get ; set ; } public int Id { get ; set ; } public bool IsValid { get ; set ; } public DateTime Updated { get ; set ; } public override string this [ string columnName ] { get { string retVal = string.Empty ; switch ( columnName ) { case `` Contact '' : retVal = base.Concat ( base.RequeiredField ( this.Contact ) , base.MinLength ( this.Contact , 5 ) , base.MaxLength ( this.Contact , 62 ) ) ; break ; } return retVal ; } } } < Style TargetType= '' xctk : WizardPage '' x : Key= '' NewContactPage '' > < Setter Property= '' NextButtonVisibility '' Value= '' Hidden '' / > < Style.Triggers > < MultiDataTrigger > < MultiDataTrigger.Conditions > < Condition Binding= '' { Binding Path= ( Validation.HasError ) , ElementName=txtContactValue } '' Value= '' False '' / > < /MultiDataTrigger.Conditions > < Setter Property= '' NextButtonVisibility '' Value= '' Visible '' / > < /MultiDataTrigger > < /Style.Triggers > < /Style >"
public interface SomethingProvider { public Something GetSomething ( ) ; } public interface SomethingProvider { public Task < Something > GetSomethingAsync ( ) ; } public interface SomethingProvider { public Something GetSomething ( ) ; public Task < Something > GetSomethingAsync ( ) ; }
"public class MyService : IMyServiceContract { // This should get filled by MEF after Prism loads the required modules [ Import ] IDatabase db ; public MyService ( ) { var bootsrapper = new MyServiceBoostrapper ( ) ; bootsrapper.Run ( ) ; } } public class MyServiceBoostrapper : MefBootstrapper { protected override void ConfigureContainer ( ) { base.ConfigureContainer ( ) ; } protected override IModuleCatalog CreateModuleCatalog ( ) { return new ConfigurationModuleCatalog ( ) ; } protected override void ConfigureAggregateCatalog ( ) { base.ConfigureAggregateCatalog ( ) ; // TODO : Add this assembly ... do n't know why this.AggregateCatalog.Catalogs.Add ( new AssemblyCatalog ( typeof ( MyServiceBoostrapper ) .Assembly ) ) ; this.AggregateCatalog.Catalogs.Add ( new AssemblyCatalog ( typeof ( IDatabase ) .Assembly ) ) ; // This is what provides the service this.AggregateCatalog.Catalogs.Add ( new AssemblyCatalog ( typeof ( DatabaseImpl ) .Assembly ) ) ; } protected override DependencyObject CreateShell ( ) { // we do n't need the shell return null ; } } [ ModuleExport ( typeof ( IDatabase ) ) ] public class ModuleActivator : IModule { public void Initialize ( ) { // Do nothing as this module simply provides the API . } } public interface IDatabase { // interface methods here ... } [ ModuleExport ( typeof ( DatabaseImpl ) , DependsOnModuleNames = new string [ ] { `` IDatabase '' } ) ] public class ModuleActivator : IModule { public void Initialize ( ) { // Do nothing as this is a library module . } } [ Export ( typeof ( IDatabase ) ) ] public class DatabaseImpl : IDatabase { /// implementation here ... }"
"string s = `` string '' ; s = s + s ; // this translates to s = string.concat ( `` string '' , `` string '' ) ; [ TargetedPatchingOptOut ( `` Performance critical to inline across NGen image boundaries '' ) ] public static bool operator == ( string a , string b ) { return string.Equals ( a , b ) ; } [ TargetedPatchingOptOut ( `` Performance critical to inline across NGen image boundaries '' ) ] public static bool operator ! = ( string a , string b ) { return ! string.Equals ( a , b ) ; }"
bool m_Done = false ; Task.Run ( ( ) = > m_Done = true ) ; if ( m_Done ) { // Do something }
"System.UnauthorizedAccessException : Le serveur distant a retourné une erreur : ( 401 ) Non autorisé . Manage claim is required for this operation . TrackingId:2ca420e3-aac6-467c-bacb-6e051dbc3e39_G47 , TimeStamp:1/29/2016 11:20:41 PM -- - > System.Net.WebException : Le serveur distant a retourné une erreur : ( 401 ) Non autorisé . à System.Net.HttpWebRequest.EndGetResponse ( IAsyncResult asyncResult ) à Microsoft.ServiceBus.Messaging.ServiceBusResourceOperations.GetAsyncResult ` 1. < GetAsyncSteps > b__3c ( GetAsyncResult ` 1 thisPtr , IAsyncResult r ) à Microsoft.ServiceBus.Messaging.IteratorAsyncResult ` 1.StepCallback ( IAsyncResult result ) -- - Fin de la trace de la pile d'exception interne -- -Server stack trace : Exception rethrown at [ 0 ] : à Microsoft.ServiceBus.Common.ExceptionDispatcher.Throw ( Exception exception ) à Microsoft.ServiceBus.Common.AsyncResult.End [ TAsyncResult ] ( IAsyncResult result ) à Microsoft.ServiceBus.Common.AsyncResult ` 1.End ( IAsyncResult asyncResult ) à Microsoft.ServiceBus.Messaging.ServiceBusResourceOperations.EndGet [ TEntityDescription ] ( IAsyncResult asyncResult , String [ ] & resourceNames ) à Microsoft.ServiceBus.NamespaceManager.EndGetQueue ( IAsyncResult result ) à System.Threading.Tasks.TaskFactory ` 1.FromAsyncCoreLogic ( IAsyncResult iar , Func ` 2 endFunction , Action ` 1 endAction , Task ` 1 promise , Boolean requiresSynchronization ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - [ ... ] à MassTransit.AzureServiceBusTransport.NamespaceManagerExtensions. < CreateQueueSafeAsync > d__1.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - [ ... ] à MassTransit.AzureServiceBusTransport.Pipeline.PrepareReceiveQueueFilter. < Send > d__5.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - [ ... ] à MassTransit.AzureServiceBusTransport.ServiceBusReceiveTransport. < > c__DisplayClass12_0. < < Receiver > b__0 > d.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - [ ... ] à MassTransit.Internals.Extensions.TaskExtensions. < WithCancellation > d__0 ` 1.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception [ ... ] à MassTransit.MassTransitBus. < StartAsync > d__30.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - à System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ( ) à MassTransit.MassTransitBus. < StartAsync > d__30.MoveNext ( ) -- - Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée -- - à System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess ( Task task ) à System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification ( Task task ) à System.Runtime.CompilerServices.TaskAwaiter ` 1.GetResult ( ) à MassTransit.Util.TaskUtil.Await [ T ] ( Func ` 1 taskFactory , CancellationToken cancellationToken ) à MassTransit.MassTransitBus.MassTransit.IBusControl.Start ( )"
List < Type > myTypes = new List < Type > ( ) ; foreach ( Assembly a in AppDomain.CurrentDomain.GetAssemblies ( ) ) myTypes.AddRange ( a.GetTypes ( ) ) ;
... public void TestMethod ( ) { } ...
"public ValuesController ( IStringLocalizer < ValuesController > localizer , IService < BaseEntity > service ) { _localizer = localizer ; _service = service ; } public class Service < T > : IService < T > where T : BaseEntity { # region Properties protected IRepository Repository { get ; set ; } protected IUnitOfWorkFactory UnitOfWorkFactory { get ; set ; } private readonly ILogger _logger ; private readonly IStringLocalizer _localizer ; # endregion # region Ctor public Service ( IRepository repository , IUnitOfWorkFactory unitOfWorkFactory , ILogger < Service < T > > logger , IStringLocalizer < Service < T > > localizer ) { Repository = repository ; UnitOfWorkFactory = unitOfWorkFactory ; _logger = logger ; _localizer = localizer ; } } services.AddLocalization ( options = > options.ResourcesPath = `` Resources '' ) ;"
< SplitView x : Name= '' NavigationSplitView '' DisplayMode= '' CompactOverlay '' IsPaneOpen= '' True '' CompactPaneLength= '' { StaticResource ShellCompactPaneSize } '' OpenPaneLength= '' 300 '' PaneBackground= '' { ThemeResource SplitViewBackgroundBrush } '' > < ! -- //App root frame where all content data will be loaded -- > < Frame x : Name= '' rootFrame '' / > < SplitView.Pane > ... < /SplitView.Pane > < /SplitView > < Page.BottomAppBar > < CommandBar x : Name= '' AppCommandBar '' Background= '' Transparent '' > < CommandBar.PrimaryCommands > < AppBarButton Name= '' Save '' Icon= '' Save '' Label= '' Save '' > < /AppBarButton > < AppBarButton Name= '' Clear '' Icon= '' ClearSelection '' Label= '' Clear '' > < /AppBarButton > < /CommandBar.PrimaryCommands > < /CommandBar > < /Page.BottomAppBar >
"var floatList = new float [ ] { 2.7f , 3.1f , 4.5f } ; var intList = from int test1 in floatList select test1 ; foreach ( var v in intList ) Console.Write ( `` { 0 } `` , v.ToString ( ) ) ;"
String delimit = `` [ break ] '' ; String [ ] tokens = myString.Split ( delimit ) ;
"public struct OtherStruct { public int PublicProperty { get ; set ; } public int PublicField ; public OtherStruct ( int propertyValue , int fieldValue ) : this ( ) { PublicProperty = propertyValue ; PublicField = fieldValue ; } public int GetProperty ( ) { return PublicProperty ; } public void SetProperty ( int value ) { PublicProperty = value ; } } public struct SomeStruct { public OtherStruct OtherStruct { get ; set ; } } class Program { static void Main ( string [ ] args ) { SomeStruct a = new SomeStruct ( ) ; //a.OtherStruct.PublicProperty++ ; a.OtherStruct.SetProperty ( a.OtherStruct.GetProperty ( ) + 1 ) ; } }"
"< customUI xmlns= '' http : //schemas.microsoft.com/office/2006/01/customui '' > < ribbon > < tabs > < tab id= '' custom '' label= '' Custom AddIn '' > < group id= '' ConfigGroup '' label= '' Configuration '' > < labelControl id= '' lb1 '' getLabel= '' GetLabel '' getSupertip= '' GetSupertip '' / > < button id= '' bt1 '' label= '' Set Server URL '' getSupertip= '' GetSupertip '' / > ... < /group > < /tab > < /tabs > < /ribbon > < /customUI > public class CustomRibbon : ExcelRibbon , IExcelAddIn { public string GetSupertip ( IRibbonControl control ) { switch ( control.Id ) { case `` lb1 '' : return `` The current server address is : `` + API.serverURL ; case `` bt1 '' : return `` Click to change the server URL . ( Currently : `` + API.serverURL + `` ) '' ; } }"
"[ Flags ] public enum UserPrivileges : byte { None = 0 , // 0000 0000 View = 1 < < 0 , // 0000 0001 Import = 1 < < 1 , // 0000 0010 Export = 1 < < 2 , // 0000 0100 Supervisor = View | Import | Export | 1 < < 3 , // 0000 1111 Admin = Supervisor | 1 < < 4 // 0001 1111 } public class ByteFlagsEnumValueConverter : IValueConverter { private byte _targetValue ; public object Convert ( object value , Type targetType , object parameter , CultureInfo culture ) { var mask = ( byte ) parameter ; _targetValue = ( byte ) value ; return ( ( mask | _targetValue ) == _targetValue ) ; } public object ConvertBack ( object value , Type targetType , object parameter , CultureInfo culture ) { var mask = ( byte ) parameter ; if ( ( bool ) value ) { _targetValue |= mask ; } else { // Get next superflag for mask ( e.g . 0110 - > 1111 ) var b = mask ; b -- ; b |= ( byte ) ( b > > 1 ) ; b |= ( byte ) ( b > > 2 ) ; b |= ( byte ) ( b > > 4 ) ; b |= ( byte ) ( b > > 8 ) ; // if you remove a superflag ( e.g . 1111 ) also remove // everything higher than this flag if ( mask == b || mask == 1 ) _targetValue & = ( byte ) ( mask > > 1 ) ; else // ? ? ? ? ? ? ? ? } return Enum.Parse ( targetType , _targetValue.ToString ( ) ) ; } } 0001 1111 // Admin0000 0010 // Import -- -- -- -- -0000 0101 // View | Export"
Process [ ] p = Process.GetProcessesByName ( `` Microsoft.StickyNotes '' ) ; IntPtr windowHandle = p [ 0 ] .Handle ; var taskbarList = ( ITaskbarList ) new CoTaskbarList ( ) ; taskbarList.HrInit ( ) ; taskbarList.DeleteTab ( windowHandle ) ; //does n't do anything
"class Hello { public static void Main ( ) { Console.WriteLine ( `` Hello , World '' ) ; } }"
public abstract class Parent : IComparable < Parent > { public string Title ; public Parent ( string title ) { this.Title = title ; } public int CompareTo ( Parent other ) { return this.Title.CompareTo ( other.Title ) ; } } public class Child : Parent { public Child ( string title ) : base ( title ) { } } List < Child > children = GetChildren ( ) ; children.Sort ( ) ; //Fails with `` Failed to compare two elements in the array . ''
using ( var client = new SmtpClient ( ) ) { client.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory ; client.PickupDirectoryLocation = @ '' C : \temp '' ; var message = new MailMessage ( ) ; message.To.Add ( new MailAddress ( `` alice @ a.com '' ) ) ; message.From = new MailAddress ( `` bob @ b.com '' ) ; message.Subject = `` Smtp Dot Stuffing Test '' ; message.Body = `` .A.B.C ... .. .0.1.2.3.4.5.6.7.8.9 '' ; client.Send ( message ) ; }
With End With
< Users > < User Id= '' 1 '' > < Name > abc < /Name > < LastName > d < /LastName > < /User > < User Id= '' 2 '' > < Name > < /Name > < LastName > ab < /LastName > < /User > < User Id= '' 3 '' > < Name > a < /Name > < LastName > efg < /LastName > < /User > < /Users > < xsl : template match= '' Users '' > < Users > < xsl : for-each select= '' User '' > < xsl : sort select= '' Name '' / > < xsl : sort select= '' LastName '' / > < User > < xsl : attribute name= '' Id '' > < xsl : value-of select= '' attribute : :Id '' / > < /xsl : attribute > < Name > < xsl : value-of select= '' Name '' / > < /Name > < LastName > < xsl : value-of select= '' LastName '' / > < /LastName > < /User > < /xsl : for-each > < /Users > < /xsl : template >
_containerBuilder = new ContainerBuilder ( ) ; _containerBuilder.RegisterGeneric ( typeof ( CommandObserver < > ) ) .As ( typeof ( ICommandObserver < > ) ) ; _containerBuilder.RegisterGeneric ( typeof ( PropertyProvider < > ) ) .As ( typeof ( IPropertyProvider < > ) ) ;
var kernel = new StandardKernel ( ) ; kernel.Bind < IBreakfast > .To < Spam > ( ) ; kernel.Bind < IBreakfast > .To < Eggs > ( ) ; kernel.Bind < IBreakfast > .To < MoreSpam > ( ) ; kernel.Get < IBreakfast > ( ) .Eat ( ) ; // call Eat method on all three bound implementations
"< item > < title > Ellen celebrates the 20th anniversary of coming out episode < /title > < link > http : //www.dailymail.co.uk/video/tvshowbiz/video-1454179/Ellen-celebrates-20th-anniversary-coming-episode.html ? ITO=1490 & ns_mchannel=rss & ns_campaign=1490 < /link > < description > Ellen celebrates 20th anniversary of coming out episode on her old sitcom 'Ellen ' . Ellen said she cried during rehearsals but urged everyone to stay true to themselves and it will benefit you in the long term. < /description > < enclosure url= '' http : //i.dailymail.co.uk/i/pix/2017/04/27/00/3FA409EA00000578-0-image-m-21_1493249529333.jpg '' type= '' image/jpeg '' length= '' 7972 '' / > < pubDate > Thu , 27 Apr 2017 00:45:14 +0100 < /pubDate > < guid > http : //www.dailymail.co.uk/video/tvshowbiz/video-1454179/Ellen-celebrates-20th-anniversary-coming-episode.html ? ITO=1490 & ns_mchannel=rss & ns_campaign=1490 < /guid > < media : description/ > < media : thumbnail url= '' http : //i.dailymail.co.uk/i/pix/2017/04/27/00/3FA409EA00000578-0-image-m-21_1493249529333.jpg '' width= '' 154 '' height= '' 115 '' / > < media : credit scheme= '' urn : ebu '' > YouTube < /media : credit > < media : content url= '' http : //video.dailymail.co.uk/video/mol/2017/04/26/4464646762446275941/1024x576_MP4_4464646762446275941.mp4 '' type= '' video/mp4 '' medium= '' video '' duration= '' 245 '' lang= '' en '' / > < /item > foreach ( SyndicationItem item in feed.Items ) { foreach ( SyndicationElementExtension extension in item.ElementExtensions ) { XElement ele = extension.GetObject < XElement > ( ) ; MessageBox.Show ( ele.Value ) ; } }"
public class Payment { public int PaymentId { get ; set ; } } public class PaymentBank { public int PaymentId { get ; set ; } } public class PaymentCheque { public int PaymentId { get ; set ; } } public class PaymentCheque : Payment { public int RoutingNumber { get ; set ; } }
"[ System.Diagnostics.DebuggerStepThroughAttribute ( ) ] [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` System.ServiceModel '' , `` 4.0.0.0 '' ) ] public partial class AXLPortClient : System.ServiceModel.ClientBase < AxlNetClient.AXLPort > , AxlNetClient.AXLPort { public AXLPortClient ( ) { } public AXLPortClient ( string endpointConfigurationName ) : base ( endpointConfigurationName ) { } ... public class AxlClientFactory : IAxlClientFactory { private const string AxlEndpointUrlFormat = `` https : // { 0 } :8443/axl/ '' ; public AXLPortClient CreateClient ( IUcClientSettings settings ) { ServicePointManager.ServerCertificateValidationCallback = ( sender , certificate , chain , errors ) = > true ; ServicePointManager.Expect100Continue = false ; var basicHttpBinding = new BasicHttpBinding ( BasicHttpSecurityMode.Transport ) ; basicHttpBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic ; basicHttpBinding.MaxReceivedMessageSize = 20000000 ; basicHttpBinding.MaxBufferSize = 20000000 ; basicHttpBinding.MaxBufferPoolSize = 20000000 ; basicHttpBinding.ReaderQuotas.MaxDepth = 32 ; basicHttpBinding.ReaderQuotas.MaxArrayLength = 20000000 ; basicHttpBinding.ReaderQuotas.MaxStringContentLength = 20000000 ; basicHttpBinding.TransferMode = TransferMode.Buffered ; //basicHttpBinding.UseDefaultWebProxy = false ; var axlEndpointUrl = string.Format ( AxlEndpointUrlFormat , settings.Server ) ; var endpointAddress = new EndpointAddress ( axlEndpointUrl ) ; var axlClient = new AXLPortClient ( basicHttpBinding , endpointAddress ) ; axlClient.ClientCredentials.UserName.UserName = settings.User ; axlClient.ClientCredentials.UserName.Password = settings.Password ; return axlClient ; } } svcutil AXLAPI.wsdl AXLEnums.xsd AXLSoap.xsd /t : code /l : C # /o : Client.cs /n : * , AxlNetClient"
private Boolean AtLeastOneBufferItemIsNonZero ( int [ ] Buffer ) { Boolean result = false ; foreach ( int Item in Buffer ) { result = ! ( Item == ( int ) 0 ) ; if ( result ) break ; } return result ; } private Boolean AtLeastOneBufferItemIsNonZero ( float [ ] Buffer ) { Boolean result = false ; foreach ( float Item in Buffer ) { result = ! ( Item == ( float ) 0 ) ; if ( result ) break ; } return result ; } //SOMETHING LIKE THIS ? private Boolean AtLeastOneBufferItemIsNonZero < T > ( T [ ] Buffer ) where T : NUMBERTYPE { Boolean result = false ; foreach ( T Item in Buffer ) { result = ! ( Item.Equals ( 0 ) ) ; //Nope ... . if ( result ) break ; } return result ; }
"public double Price { get { return ( double ) GetValue ( PriceProperty ) ; } set { SetValue ( PriceProperty , value ) ; } } public static readonly DependencyProperty PriceProperty = DependencyProperty.Register ( `` Price '' , typeof ( double ) , typeof ( Quote ) , new UIPropertyMetadata ( 0.0d ) ) ;"
"namespace AplicacaoRoles2.Models.SharedViewModels { public class PartialLoginViewModel { [ Required ] public string Nome { get ; set ; } } } @ using Microsoft.AspNetCore.Identity @ using AplicacaoRoles2.Models @ model AplicacaoRoles2.Models.SharedViewModels.PartialLoginViewModel @ inject SignInManager < ApplicationUser > SignInManager @ inject UserManager < ApplicationUser > UserManager @ if ( SignInManager.IsSignedIn ( User ) ) { < form asp-area= '' '' asp-controller= '' Account '' asp-action= '' Logout '' method= '' post '' id= '' logoutForm '' class= '' navbar-right '' > < ul class= '' nav navbar-nav navbar-right '' > < li > < a asp-area= '' '' asp-controller= '' Manage '' asp-action= '' Index '' title= '' Manage '' > Hello @ Html.DisplayFor ( model = > model.Nome ) ! < /a > < /li > public class HomeController : Controller { private readonly ApplicationDbContext _context ; public HomeController ( ApplicationDbContext context ) { _context = context ; } public async Task < IActionResult > Index ( ) { PartialLoginViewModel model = new PartialLoginViewModel ( ) ; var userName = User.Identity.Name ; var applicationUser = await _context.ApplicationUser.SingleOrDefaultAsync ( m = > m.UserName == userName ) ; model.Nome = applicationUser.Nome ; return View ( model ) ; } @ Html.Partial ( `` _LoginPartial '' ) @ Html.Partial ( `` _LoginPartial '' ) @ Html.Partial ( `` _LoginPartial '' , new AplicacaoRoles2.Models.SharedViewModels.PartialLoginViewModel ( ) )"
"public static IntPtr DoubleArrayToIntPtr ( double [ ] d ) { IntPtr p = Marshal.AllocCoTaskMem ( sizeof ( double ) * d.Length ) ; Marshal.Copy ( d , 0 , p , d.Length ) ; return p ; } public static IntPtr IntArrayToIntPtr ( int [ ] d ) { IntPtr p = Marshal.AllocCoTaskMem ( sizeof ( int ) * d.Length ) ; Marshal.Copy ( d , 0 , p , d.Length ) ; return p ; }"
"private void Principal_Load ( object sender , EventArgs e ) { Color custom ; int contr = 0 , contg = 0 , contb = 0 ; do { while ( contr < 255 & & contg == 0 ) { if ( contb ! = 0 ) { contb -- ; } contr++ ; while ( contg < 255 & & contb == 0 ) { if ( contr ! = 0 ) { contr -- ; } contg++ ; while ( contb < 255 & & contr == 0 ) { if ( contg ! = 0 ) { contg -- ; } contb++ ; } } } custom = Color.FromArgb ( contr , contg , contb ) ; this.BackColor = custom ; } while ( true ) ; }"
"{ `` -LeHl495vL6vh-8CaLbD '' : { `` apiKey '' : '' sr-tr-137-beea04e44cb452ba0da0ca090b7e61b4ec6ffc69 '' } , `` -LeHl6jrhUEMb7slZcpB '' : { `` apiKey '' : '' sr-tr-137-aef7a23095c0c7baef1ef681bdd8bf9756ac2a17 '' } } public class RequestedReport { public Dictionary < string , List < ReportData > > ReportDatas { get ; set ; } } public class ReportData { public string apiKey { get ; set ; } }"
public class Property { private String title ; private String area ; private int sleeps = 0 ; public static void main ( String [ ] args ) { Property newProperty = new Property.Builder ( `` Test Property '' ) .Area ( `` Test Area '' ) .Sleeps ( 7 ) .build ( ) ; } private Property ( Builder builder ) { this.title = builder.title ; this.area = builder.area ; this.sleeps =builder.sleeps ; } public static class Builder { private String title ; private String area ; private int sleeps = 0 ; public Builder ( String title ) { this.title = title ; } public Builder Area ( String area ) { this.area = area ; return this ; } public Builder Sleeps ( int sleeps ) { this.sleeps = sleeps ; return this ; } public Property build ( ) { return new Property ( this ) ; } } } public class Property { private String title ; private String area ; private Property ( Builder Builder ) { title = Builder.title ; area = Builder.area ; } public static class Builder { // Required parameters private String title ; private String area ; // Optional parameters private int sleeps = 0 ; public Builder ( String val ) { this.title = val ; } public Builder Area ( String val ) { this.area = val ; return this ; } public Builder Sleeps ( int val ) { this.sleeps = val ; return this ; } public Property build ( ) { return new Property ( this ) ; } } }
foo.NetType = bool ; foo.NetType = typeof ( bool ) ;
MyMethodNameIsReallyLong _SoImMakingItSpanMultipleLines _SoIDontHaveToHorizontallyScroll _AndMyLifeIsMuchEasier ( ) { DoSomething ( ) ; }
"import CultLibimport LonelyHeroclass Dream ( Enemy ) : pass var bc = new BooCompiler ( ) ; bc.Parameters.Input.Add ( new FileInput ( `` rsc/script/ai/ '' + `` Dream '' + `` .boo '' ) ) ; bc.Parameters.Pipeline = new CompileToMemory ( ) ; bc.Parameters.References.Add ( Assembly.GetExecutingAssembly ( ) ) ; bc.Parameters.References.Add ( Assembly.LoadFile ( new DirectoryInfo ( `` CultLib.dll '' ) .FullName ) ) ; bc.Parameters.References.Add ( Assembly.LoadFile ( new DirectoryInfo ( `` sfmlnet-audio-2.dll '' ) .FullName ) ) ; bc.Parameters.References.Add ( Assembly.LoadFile ( new DirectoryInfo ( `` sfmlnet-graphics-2.dll '' ) .FullName ) ) ; bc.Parameters.References.Add ( Assembly.LoadFile ( new DirectoryInfo ( `` sfmlnet-window-2.dll '' ) .FullName ) ) ; var cc = bc.Run ( ) ; if ( cc.GeneratedAssembly ! =null ) { cc.GeneratedAssembly.CreateInstance ( `` Dream '' , true , BindingFlags.NonPublic , null , new object [ ] { Parent , pos } , null , null ) ; } else { foreach ( var error in cc.Errors ) Console.WriteLine ( error ) ; }"
"private void LoadAssignments ( AssignmentType assignmentType , Collection < Assignment > assignments ) { bool flag ; DataTable lessons = this.GetResults ( assignmentType ) ; try { IEnumerator enumerator = lessons.Rows.GetEnumerator ( ) ; try { while ( true ) { flag = enumerator.MoveNext ( ) ; if ( ! flag ) { break ; } DataRow row = ( DataRow ) enumerator.Current ; } } finally { IDisposable disposable = enumerator as IDisposable ; flag = disposable == null ; if ( ! flag ) { disposable.Dispose ( ) ; } } } finally { flag = lessons == null ; if ( ! flag ) { lessons.Dispose ( ) ; } } } .method private hidebysig instance void LoadAssignments ( valuetype TTReporterCore.AssignmentType assignmentType , class [ mscorlib ] System.Collections.ObjectModel.Collection ` 1 < valuetype TTReporterCore.Assignment > assignments ) cil managed { .locals init ( [ 0 ] bool flag , [ 1 ] class [ System.Data ] System.Data.DataTable lessons , [ 2 ] class [ mscorlib ] System.Collections.IEnumerator enumerator , [ 3 ] class [ System.Data ] System.Data.DataRow row , [ 4 ] class [ mscorlib ] System.IDisposable disposable , [ 5 ] bool flag1 ) IL_0000 : nop IL_0001 : ldarg.0 IL_0002 : ldarg.1 IL_0003 : call instance class [ System.Data ] System.Data.DataTable TTReporterCore.TTReader : :GetResults ( valuetype TTReporterCore.AssignmentType ) IL_0008 : stloc.1 .try { IL_0009 : nop IL_000a : ldloc.1 IL_000b : callvirt instance class [ System.Data ] System.Data.DataRowCollection [ System.Data ] System.Data.DataTable : :get_Rows ( ) IL_0010 : callvirt instance class [ mscorlib ] System.Collections.IEnumerator [ System.Data ] System.Data.InternalDataCollectionBase : :GetEnumerator ( ) IL_0015 : stloc.2 .try { IL_0016 : nop IL_0017 : br.s IL_0038 .loop { IL_0019 : nop IL_001a : ldloc.2 IL_001b : callvirt instance bool [ mscorlib ] System.Collections.IEnumerator : :MoveNext ( ) IL_0020 : stloc.0 IL_0021 : ldloc.0 IL_0022 : stloc.s flag1 IL_0024 : ldloc.s flag1 IL_0026 : brtrue.s IL_002b IL_0028 : nop IL_0029 : br.s IL_003d IL_002b : ldloc.2 IL_002c : callvirt instance object [ mscorlib ] System.Collections.IEnumerator : :get_Current ( ) IL_0031 : castclass [ System.Data ] System.Data.DataRow IL_0036 : stloc.3 IL_0037 : nop IL_0038 : ldc.i4.1 IL_0039 : stloc.s flag1 IL_003b : br.s IL_0019 } IL_003d : nop IL_003e : leave.s IL_0062 } finally { IL_0040 : nop IL_0041 : ldloc.2 IL_0042 : isinst [ mscorlib ] System.IDisposable IL_0047 : stloc.s disposable IL_0049 : ldloc.s disposable IL_004b : ldnull IL_004c : ceq IL_004e : stloc.0 IL_004f : ldloc.0 IL_0050 : stloc.s flag1 IL_0052 : ldloc.s flag1 IL_0054 : brtrue.s IL_0060 IL_0056 : nop IL_0057 : ldloc.s disposable IL_0059 : callvirt instance void [ mscorlib ] System.IDisposable : :Dispose ( ) IL_005e : nop IL_005f : nop IL_0060 : nop IL_0061 : endfinally } IL_0062 : nop IL_0063 : nop IL_0064 : leave.s IL_007e } finally { IL_0066 : nop IL_0067 : ldloc.1 IL_0068 : ldnull IL_0069 : ceq IL_006b : stloc.0 IL_006c : ldloc.0 IL_006d : stloc.s flag1 IL_006f : ldloc.s flag1 IL_0071 : brtrue.s IL_007c IL_0073 : nop IL_0074 : ldloc.1 IL_0075 : callvirt instance void [ System ] System.ComponentModel.MarshalByValueComponent : :Dispose ( ) IL_007a : nop IL_007b : nop IL_007c : nop IL_007d : endfinally } IL_007e : nop IL_007f : ret }"
"Property.Bind ( v = > n = v , ( ) = > n ) public static IProperty < T > Bind < T > ( Action < T > set , Func < T > get ) private BoundExpression BindAddressOfExpression ( PrefixUnaryExpressionSyntax node , DiagnosticBag diagnostics ) { if ( ! this.InUnsafeRegion ) { BoundExpression rValue = BindValue ( node.Operand , diagnostics , BindValueKind.RValue ) ; BoundExpression lValue = BindValue ( node.Operand , diagnostics , BindValueKind.Assignment ) ; var valueParamSymbol = new SourceSimpleParameterSymbol ( null , rValue.Type , 0 , RefKind.None , `` __v '' , ImmutableArray < Location > .Empty ) ; var valueParam = new BoundParameter ( node , valueParamSymbol ) ; var assignment = new BoundAssignmentOperator ( node , lValue , valueParam , RefKind.None , rValue.Type ) ; var assignmentStatement = new BoundExpressionStatement ( node , assignment ) ; var assignmentBlock = new BoundBlock ( node , ImmutableArray < LocalSymbol > .Empty , ImmutableArray.Create < BoundStatement > ( assignmentStatement ) ) { WasCompilerGenerated = true } ; assignmentBlock = FlowAnalysisPass.AppendImplicitReturn ( assignmentBlock ) ;"
"[ ApiController ] [ Authorize ] [ Route ( `` [ controller ] '' ) ] public class JwtController : ControllerBase { public JwtController ( ) { } [ HttpGet ] public ActionResult Get ( ) = > Ok ( `` Working ! `` ) ; } services.AddAuthentication ( x = > { x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme ; x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme ; } ) .AddJwtBearer ( x = > { x.RequireHttpsMetadata = false ; x.SaveToken = true ; x.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = false , ValidateAudience = false } ; } ) ; [ Fact ] public async Task JwtIsSkipped ( ) { var response = ( await _Client.GetAsync ( `` /jwt '' ) ) .EnsureSuccessStatusCode ( ) ; var stringResponse = await response.Content.ReadAsStringAsync ( ) ; Assert.Equal ( `` Working ! `` , stringResponse ) ; } public class TestAuthHandler : AuthenticationHandler < AuthenticationSchemeOptions > { public const string DefaultScheme = `` Test '' ; public TestAuthHandler ( IOptionsMonitor < AuthenticationSchemeOptions > options , ILoggerFactory logger , UrlEncoder encoder , ISystemClock clock ) : base ( options , logger , encoder , clock ) { } protected override Task < AuthenticateResult > HandleAuthenticateAsync ( ) { var claims = new [ ] { new Claim ( ClaimTypes.Name , `` Test user '' ) } ; var identity = new ClaimsIdentity ( claims , DefaultScheme ) ; var principal = new ClaimsPrincipal ( identity ) ; var ticket = new AuthenticationTicket ( principal , DefaultScheme ) ; return Task.FromResult ( AuthenticateResult.Success ( ticket ) ) ; } } public class UnitTest : IClassFixture < WebApplicationFactory < Startup > > { private readonly WebApplicationFactory < Startup > _Factory ; private readonly HttpClient _Client ; public UnitTest ( WebApplicationFactory < Startup > factory ) { _Factory = factory ; _Client = _Factory.WithWebHostBuilder ( builder = > { builder.ConfigureTestServices ( services = > { services.AddAuthentication ( TestAuthHandler.DefaultScheme ) .AddScheme < AuthenticationSchemeOptions , TestAuthHandler > ( TestAuthHandler.DefaultScheme , options = > { } ) ; } ) ; } ) .CreateClient ( ) ; _Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ( TestAuthHandler.DefaultScheme ) ; } [ Fact ] public async Task JwtIsSkipped ( ) { var response = ( await _Client.GetAsync ( `` /jwt '' ) ) .EnsureSuccessStatusCode ( ) ; var stringResponse = await response.Content.ReadAsStringAsync ( ) ; Assert.Equal ( `` Working ! `` , stringResponse ) ; } }"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication1 { public class P1 { static void Main ( string [ ] args ) { B b = new B ( ) ; P2 p2 = new P2 ( ) ; p2.Foo ( b ) ; // Uncomment code to cause infinite recursion //P1 p1 = new P1 ( ) ; //p1.Foo ( b ) ; } private void Foo ( A a ) { Console.WriteLine ( `` P1 : :Foo Private Non-Virtual '' ) ; } public virtual void Foo ( B b ) { Console.WriteLine ( `` Inside P1 : :Foo '' ) ; // Uncomment code to cause infinite recursion // Foo ( b ) ; } } public class P2 : P1 { private void Foo ( A a ) { Console.WriteLine ( `` P2 : :Foo Private Non-Virtual '' ) ; } public override void Foo ( B b ) { Console.WriteLine ( `` P2 : :Foo Virtual '' ) ; Foo ( b ) ; } } public class A { public int a = 10 ; } public class B : A { public int b = 20 ; }
"[ WebMethod ] public void EnqueueRecipes ( SecurityCredentials credentials , Guid [ ] recipeIds ) { DB.User user = new DB.User ( credentials ) ; using ( new TransactionScope ( OnDispose.Commit ) ) { foreach ( Guid rid in recipeIds ) { DB.QueuedRecipe qr = new DB.QueuedRecipe ( Guid.NewGuid ( ) , user , new DB.Recipe ( rid ) ) ; qr.Create ( ) ; } } } //Check for dupesDB.QueuedRecipe [ ] dbRecipes = DB.QueuedRecipe.FindAll ( Expression.In ( `` Recipe '' , ( from r in recipeIds select new DB.Recipe ( r ) ) .ToArray ( ) ) ) ; List < Guid > existing = ( from r in dbRecipes select r.Recipe.RecipeId ) .ToList ( ) ; using ( new TransactionScope ( OnDispose.Commit ) ) { foreach ( Guid rid in recipeIds ) { if ( existing.Contains ( rid ) ) continue ; DB.QueuedRecipe qr = new DB.QueuedRecipe ( Guid.NewGuid ( ) , user , new DB.Recipe ( rid ) ) ; qr.Create ( ) ; } }"
public class SessionManager { //// static constructor does n't matter //static SessionManager ( ) // { // _instance = new SessionManager ( ) ; // } private static SessionManager _instance = new SessionManager ( ) ; public static SessionManager GetInstance ( ) { return _instance ; } public SessionManager ( ) { Console.WriteLine ( $ '' { nameof ( SessionManager ) } constructor called '' ) ; this.RecoverState ( ) ; } public bool RecoverState ( ) { Console.WriteLine ( $ '' { nameof ( RecoverState ) } called '' ) ; List < SessionInfo > activeSessionsInDb = SessionManagerDatabase.GetInstance ( ) .LoadActiveSessionsFromDb ( ) ; // ... return true ; } public List < SessionInfo > GetAllActiveSessions ( ) { Console.WriteLine ( $ '' { nameof ( GetAllActiveSessions ) } called '' ) ; return new List < SessionInfo > ( ) ; } } public class SessionManagerDatabase { //// static constructor does n't matter //static SessionManagerDatabase ( ) // { // _instance = new SessionManagerDatabase ( ) ; // } private static readonly SessionManagerDatabase _instance = new SessionManagerDatabase ( ) ; public static SessionManagerDatabase GetInstance ( ) { return _instance ; } public SessionManagerDatabase ( ) { Console.WriteLine ( $ '' { nameof ( SessionManagerDatabase ) } constructor called '' ) ; Synchronize ( ) ; } public void Synchronize ( ) { Console.WriteLine ( $ '' { nameof ( Synchronize ) } called '' ) ; // NullReferenceException here List < SessionInfo > memorySessions = SessionManager.GetInstance ( ) .GetAllActiveSessions ( ) ; // ... } public List < SessionInfo > LoadActiveSessionsFromDb ( ) { Console.WriteLine ( $ '' { nameof ( LoadActiveSessionsFromDb ) } called '' ) ; return new List < SessionInfo > ( ) ; } } public class SessionInfo { } static void Main ( string [ ] args ) { try { var sessionManagerInstance = SessionManager.GetInstance ( ) ; } catch ( TypeInitializationException e ) { Console.WriteLine ( e ) ; throw ; } } SessionManager constructor calledRecoverState calledSessionManagerDatabase constructor calledSynchronize calledSystem.TypeInitializationException : Der Typeninitialisierer für `` SessionManager '' hat eine Ausnahme verursacht . -- - > System.TypeInitializationException : Der Typeninitialisierer für `` SessionManagerDatabase '' hat eine Ausnahme verursacht . -- - > System.NullReferenceException : Der Objektverweis wurde nicht auf eine Objektinstanz festgelegt . bei ConsoleApplication_CSharp.Program.SessionManagerDatabase.Synchronize ( ) in ... ... bei ConsoleApplication_CSharp.Program.SessionManagerDatabase..ctor ( ) in ... ... bei ConsoleApplication_CSharp.Program.SessionManagerDatabase..cctor ( ) in ... ... -- - Ende der internen Ausnahmestapelüberwachung -- - bei ConsoleApplication_CSharp.Program.SessionManagerDatabase.GetInstance ( ) bei ConsoleApplication_CSharp.Program.SessionManager.RecoverState ( ) in ... ... bei ConsoleApplication_CSharp.Program.SessionManager..ctor ( ) in ... .. bei ConsoleApplication_CSharp.Program.SessionManager..cctor ( ) in ... ... -- - Ende der internen Ausnahmestapelüberwachung -- - bei ConsoleApplication_CSharp.Program.SessionManager.GetInstance ( ) bei ConsoleApplication_CSharp.Program.Main ( String [ ] args ) in ... ...
"public class MyClass { private int _TheProperty ; internal int TheProperty { get { return _TheProperty ; } set { System.Threading.Thread.VolatileWrite ( ref _TheProperty , value ) ; } } }"
"Imports System.Math [ ... ] Return New Vector3 ( Sin ( az ) * Cos ( el ) , Cos ( az ) * Cos ( el ) , Sin ( el ) ) using System ; [ ... ] return new Vector3 ( Math.Sin ( az ) * Math.Cos ( el ) , Math.Cos ( az ) * Math.Cos ( el ) , Math.Sin ( el ) ) ;"
"public classMyGrid { private DataGridView m_dg ; public MyGrid ( DataGridView dg ) { m_dg = dg ; m_dg.RowHeadersVisible = false ; m_dg.SortCompare += new DataGridViewSortCompareEventHandler ( m_dg_SortCompare ) ; } void m_dg_SortCompare ( object sender , DataGridViewSortCompareEventArgs e ) { // do custom sorting here } } MyGrid g1 = new MyGrid ( dataGridView1 ) ; MyGrid g2 = new MyGrid ( dataGridView2 ) ;"
using System ; using System.Collections.Generic ; using System.Linq ; using System.Data ; using System.Data.Entity.Core.Objects ; using Web_API.Models ; namespace Web_API.DAL { class GenericRepository < T > : IRepository < T > where T : class { private ApplicationDbContext entities = null ; IObjectSet < T > _objectSet ; public GenericRepository ( ApplicationDbContext _entities ) { entities = _entities ; _objectSet = entities.CreateObjectSet < T > ( ) ; } ...
"{ `` Id '' : `` 12346 '' , `` ItemName '' : `` New Item '' , `` ItemCost '' : 45 }"
"public IHttpActionResult SavePlayerLoc ( IEnumerable < int > playerLocations ) { int userId = RequestContext.Principal.Identity.GetUserId < int > ( ) ; bool isSavePlayerLocSaved = sample.SavePlayerLoc ( userId , playerLocations ) ; return Ok ( isSavePlayerLocSaved ) ; } [ TestMethod ( ) ] public void SavePlayerLocTests ( ) { var context = new Mock < HttpContextBase > ( ) ; var mockIdentity = new Mock < IIdentity > ( ) ; context.SetupGet ( x = > x.User.Identity ) .Returns ( mockIdentity.Object ) ; mockIdentity.Setup ( x = > x.Name ) .Returns ( `` admin '' ) ; var controller = new TestApiController ( ) ; var actionResult = controller.SavePlayerLoc ( GetLocationList ( ) ) ; var response = actionResult as OkNegotiatedContentResult < IEnumerable < bool > > ; Assert.IsNotNull ( response ) ; }"
public static void Decrypt ( XmlDocument Doc ) { // Check the arguments . if ( Doc == null ) throw new ArgumentNullException ( `` Doc '' ) ; // Create a new EncryptedXml object . EncryptedXml exml = new EncryptedXml ( Doc ) ; // Decrypt the XML document . exml.DecryptDocument ( ) ; }
"public IEnumerable < FooDataItem > GetDataItemsByColor ( IEnumerable < BarDto > dtos ) { double totalNumber = dtos.Where ( x = > x.Color ! = null ) .Sum ( p = > p.Number ) ; return from stat in dtos where stat.Color ! = null group stat by stat.Color into gr orderby gr.Sum ( p = > p.Number ) descending select new FooDataItem { Color = gr.Key , NumberTotal = gr.Sum ( p = > p.Number ) , NumberPercentage = gr.Sum ( p = > p.Number ) / totalNumber } ; } public IEnumerable < FooDataItem > GetDataItemsByName ( IEnumerable < BarDto > dtos ) { double totalData = dtos.Where ( x = > x.Name ! = null ) .Sum ( v = > v.Data ) ; return from stat in dtos where stat.Name ! = null group stat by stat.Name into gr orderby gr.Sum ( v = > v.Data ) descending select new FooDataItem { Name = gr.Key , DataTotal = gr.Sum ( v = > v.Data ) , DataPercentage = gr.Sum ( v = > v.Data ) / totalData } ; }"
"class Program { static long _input ; static long _timesDivided ; static string _output ; static void Main ( ) { Console.WriteLine ( `` Enter the number of Pirates : `` ) ; var isValidInput = long.TryParse ( Console.ReadLine ( ) , out _input ) ; if ( ! isValidInput ) { Console.WriteLine ( `` Please enter a valid number '' ) ; Console.ReadKey ( ) ; return ; } Console.WriteLine ( `` Caculating minimum treasure ... \r\n \r\n '' ) ; _timesDivided = _input + 1 ; var answer = CalculateTreasure ( ) ; if ( answer > 0 ) _output = string.Format ( `` The minimum treasure is { 0 } '' , answer ) ; else _output = `` There was an error , please try another number '' ; Console.WriteLine ( _output ) ; Console.ReadKey ( ) ; } private static long CalculateTreasure ( ) { long result = 0 ; try { while ( true ) { result++ ; while ( true ) { if ( result % _input == 1 ) { break ; } else { result++ ; } } long treasure = result ; for ( long i = 0 ; i < _timesDivided ; i++ ) { var remainder = treasure % _input ; if ( remainder ! = 1 ) { break ; } var share = ( treasure - remainder ) / _input ; if ( i == ( _timesDivided - 1 ) ) { treasure = ( treasure - ( share * _input ) ) ; if ( treasure == 1 ) return result ; } else { treasure = ( treasure - share ) - 1 ; } } } } catch ( Exception ex ) { //log exception here return 0 ; } } } private static long CalculateTreasure ( ) { try { long result = ( long ) Math.Pow ( ( double ) _input , ( double ) _timesDivided ) ; while ( true ) { result -- ; while ( true ) { if ( result % _input == 1 ) { break ; } else { result -- ; } } long treasure = result ; for ( long i = 0 ; i < _timesDivided ; i++ ) { var remainder = treasure % _input ; if ( remainder ! = 1 ) { break ; } var share = ( treasure - remainder ) / _input ; if ( i == ( _timesDivided - 1 ) ) { treasure = ( treasure - ( share * _input ) ) ; if ( treasure == 1 ) return result ; } else { treasure = ( treasure - share ) - 1 ; } } } } catch ( Exception ex ) { //log exception here return 0 ; } }"
"SearchPane.GetForCurrentView ( ) .SuggestionsRequested += ( s , e ) = > { if ( e.QueryText.Length < 3 ) return ; // TODO : if identical to the last request , return ; // TODO : if asked less than 500ms ago , return ; } ; System.Reactive.Linq.Observable.FromEventPattern < Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestedEventArgs > ( Windows.ApplicationModel.Search.SearchPane.GetForCurrentView ( ) , `` SuggestionsRequested '' ) .Throttle ( TimeSpan.FromMilliseconds ( 500 ) , System.Reactive.Concurrency.Scheduler.CurrentThread ) .Where ( x = > x.EventArgs.QueryText.Length > 3 ) .DistinctUntilChanged ( x = > x.EventArgs.QueryText.Trim ( ) ) .Subscribe ( x = > HandleSuggestions ( x.EventArgs ) ) ;"
"< urlMappings > < add url= '' ~/login '' mappedUrl= '' ~/Views/LoginPage.aspx '' / > < add url= '' ~/login/ '' mappedUrl= '' ~/Views/LoginPage.aspx '' / > < /urlMappings > < form method= '' post '' action= '' LoginPage '' id= '' ct101 '' class= '' .myForm '' > < form method= '' post '' action= '' ./ '' id= '' ct101 '' class= '' .myForm '' > < % @ Page Title= '' DREW KENNEDY | WELCOME '' Language= '' C # '' MasterPageFile= '' Site.Master '' AutoEventWireup= '' true '' CodeBehind= '' LoginPage.aspx.cs '' Inherits= '' MyMedia.Views.LoginPage '' % > < asp : Content ID= '' BodyContent '' ContentPlaceHolderID= '' MainContent '' runat= '' server '' > < ! -- form is located on Site.Master -- > < asp : Button OnClick= '' LoginBtn_Click '' CssClass= '' login '' runat= '' server '' name= '' submit '' Text= '' Sign In '' / > < /asp : Content > protected void LoginBtn_Click ( object sender , EventArgs e ) { //Tried the following line while commenting out everything else to make sure Postback is being ignored //Response.Write ( `` < script > alert ( 'Test ' ) ; < /script > '' ) ; try { AbstractPersistenceDecorator decorator = new PersistenceDecorator ( ) ; string uname = username.Text.Trim ( ) ; //username is a TextBox Control string pass = password.Text.Trim ( ) ; //password is a TextBox control bool isCookieRequested = CheckBox.Checked ; if ( decorator.authenticate ( uname , pass ) ) { //calling SQL Server for authentication User AuthenticatedUser = ( User ) Session [ `` User '' ] ? ? decorator.getUserInfo ( uname ) ; if ( Session [ `` User '' ] == null ) Session [ `` User '' ] = AuthenticatedUser ; if ( isCookieRequested ) { HttpCookie cookie = new HttpCookie ( `` username '' , AuthenticatedUser.Username ) ; cookie.Expires.AddDays ( 7 ) ; Response.Cookies.Add ( cookie ) ; } else { Session.Timeout = 15 ; } Thread.Sleep ( 1600 ) ; //string redirect = string.Format ( `` dashboard ? username= { 0 } '' , AuthenticatedUser.Username ) ; Response.Redirect ( `` dashboard ? username= '' + AuthenticatedUser.Username ) ; } } catch ( Exception ex ) { //who cares ? } }"
[ DLLimport ( `` MyDLL.dll '' ) ]
"//Get the times stored in the gif//PropertyTagFrameDelay ( ( PROPID ) 0x5100 ) comes from gdiplusimaging.h//More info on http : //msdn.microsoft.com/en-us/library/windows/desktop/ms534416 ( v=vs.85 ) .aspxvar times = img.GetPropertyItem ( 0x5100 ) .Value ; [ 75,0,0,0,125,0,0,0,125,0,0,0,125,0,0,0,250,0,0,0 ] [ 75,0,0,0 ] [ x,0,0,0 ] [ 75,0,0,0 ] [ 50,0,0,0 ] [ 125,0,0,0 ] status = GDIPlus.GdipGetPropertyItemSize ( nativeObject , propid , out propSize ) ;"
"protected override void GenerateGridBitmap ( ) { if ( _circleGrid ! = null ) { _circleGrid.Dispose ( ) ; _circleGrid = null ; } Bitmap _texture = new Bitmap ( circleSize , circleSize ) ; using ( Graphics g = Graphics.FromImage ( _texture ) ) { g.SmoothingMode = SmoothingMode.HighQuality ; g.InterpolationMode = InterpolationMode.HighQualityBicubic ; g.PixelOffsetMode = PixelOffsetMode.HighQuality ; Rectangle r = new Rectangle ( 0 , 0 , circleSize , circleSize ) ; g.DrawEllipse ( Pens.Black , r ) ; } Bitmap rowBlock = new Bitmap ( CanvasSize.Width - ( circleSize/ 2 ) , circleSize ) ; using ( Brush b = new TextureBrush ( _texture ) ) { using ( Graphics g = Graphics.FromImage ( rowBlock ) ) { g.CompositingQuality = CompositingQuality.HighQuality ; g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic ; g.SmoothingMode = SmoothingMode.HighQuality ; g.FillRectangle ( b , new Rectangle ( new Point ( 0 , 0 ) , rowBlock.Size ) ) ; } } //rowBlock.Save ( `` rowblock.bmp '' ) ; _circleGrid = new Bitmap ( CanvasSize.Width , CanvasSize.Height ) ; using ( Graphics g = Graphics.FromImage ( _circleGrid ) ) { g.CompositingQuality = CompositingQuality.HighQuality ; g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic ; g.SmoothingMode = SmoothingMode.HighQuality ; int x , y ; for ( int i = 0 ; i < rows ; i++ ) { x = 0 ; if ( i % 2 ! = 0 ) x = ( circleSize/ 2 ) ; y = ( i * circleSize ) ; if ( i ! = 0 ) { y -= ( VERTICAL_PIXEL_OFFSET * i ) ; } g.DrawImage ( rowBlock , x , y ) ; //g.DrawImage ( DrawCodedCrystal ( i , rowBlock ) , x , y ) ; Console.WriteLine ( i ) ; } } _circleGrid.Save ( `` grid.bmp '' ) ; Console.WriteLine ( _circleGrid.Size ) ; _texture.Dispose ( ) ; _texture = null ; rowBlock.Dispose ( ) ; rowBlock = null ; } protected override CanvasCell GetCanvasCellAt ( int x , int y ) { Rectangle rect = GetImageViewPort ( ) ; Point pt = new Point ( x , y ) ; CanvasCell c = new CanvasCell ( ) { Row = -1 , Column = -1 } ; if ( rect.Contains ( pt ) ) { double zoomedCircleSize = CircleSize * ZoomFactor ; Point p = pt ; // PointToClient ( new Point ( x , y ) ) ; p.X -= ( int ) ( rect.X + ( AutoScrollPosition.X ) ) ; p.Y -= ( int ) ( rect.Y + ( AutoScrollPosition.Y ) ) ; int row = ( int ) ( ( p.Y ) / ( zoomedCircleSize ) ) ; //row = ( int ) ( ( p.Y + ( row * ZoomFactor ) ) / zoomedCircleSize ) ; int col ; if ( row % 2 ! = 0 ) { if ( p.X > = 0 & & p.X < ( zoomedCircleSize / 2 ) ) { col = -1 ; } else col = ( int ) ( ( p.X - ( zoomedCircleSize / 2 ) ) / zoomedCircleSize ) ; } else { if ( p.X > ( zoomedCircleSize * cols ) ) { col = -1 ; } else { col = ( int ) ( ( p.X ) / zoomedCircleSize ) ; } } //if ( ! GetRectangle ( row , col ) .ContainsWithInBoundingCircle ( p ) ) // { // c.Column = -1 ; // c.Row = -1 ; // } //else { c.Column = col ; c.Row = row ; } } // return c ; }"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Linq ; using System.Text ; using System.Windows.Forms ; namespace ComboBoxTextProperty { public partial class Form3 : Form { public Form3 ( ) { InitializeComponent ( ) ; List < string > source = new List < string > ( ) { `` 15 '' , `` 63 '' , `` 238 '' , `` 1284 '' , `` 13561 '' } ; comboBox1.DataSource = source ; comboBox1.DrawMode = DrawMode.OwnerDrawFixed ; comboBox1.DropDownStyle = ComboBoxStyle.DropDown ; comboBox1.SelectedIndex = 0 ; comboBox1.DrawItem += new DrawItemEventHandler ( ComboBox_DrawItem ) ; } /// < summary > /// Allow the text in the ComboBox to be center aligned . /// Change the DrawMode Property from Normal to either OwnerDrawFixed or OwnerDrawVariable . /// If DrawMode is not changed , the DrawItem event will NOT fire and the DrawItem event handler will not execute . /// For a DropDownStyle of DropDown , the selected item remains left aligned but the expanded dropped down list is centered . /// < /summary > /// < param name= '' sender '' > < /param > /// < param name= '' e '' > < /param > private void ComboBox_DrawItem ( object sender , DrawItemEventArgs e ) { ComboBox comboBox1 = sender as ComboBox ; // By using sender , one method could handle multiple ComboBoxes . if ( comboBox1 ! = null ) { e.DrawBackground ( ) ; // Always draw the background . if ( e.Index > = 0 ) // If there are items to be drawn . { StringFormat format = new StringFormat ( ) ; // Set the string alignment . Choices are Center , Near and Far . format.LineAlignment = StringAlignment.Center ; format.Alignment = StringAlignment.Center ; // Set the Brush to ComboBox ForeColor to maintain any ComboBox color settings . // Assumes Brush is solid . Brush brush = new SolidBrush ( comboBox1.ForeColor ) ; if ( ( e.State & DrawItemState.Selected ) == DrawItemState.Selected ) // If drawing highlighted selection , change brush . { brush = SystemBrushes.HighlightText ; } e.Graphics.DrawString ( comboBox1.Items [ e.Index ] .ToString ( ) , comboBox1.Font , brush , e.Bounds , format ) ; // Draw the string . } } } } }"
"DropFiles df = new DropFiles ( ) ; string filename = @ '' D : \projects\hello.txt '' ; byte [ ] binaryData = Encoding.Unicode.GetBytes ( filename ) ; binaryData = binaryData.Concat ( new byte [ ] { 0 , 0 } ) .ToArray ( ) ; IntPtr pointerToGlobalMemory = Marshal.AllocHGlobal ( Marshal.SizeOf ( df ) + binaryData.Length ) ; df.Files = Marshal.SizeOf ( df ) ; df.Wide = true ; Marshal.StructureToPtr ( df , pointerToGlobalMemory , true ) ; IntPtr newPointer = new IntPtr ( pointerToGlobalMemory.ToInt32 ( ) + Marshal.SizeOf ( df ) ) ; Marshal.Copy ( binaryData , 0 , newPointer , binaryData.Length ) ; var descriptorFormat = new COMInterop.FORMATETC ( ) ; descriptorFormat.cfFormat = HdropDescriptorId ; // 15descriptorFormat.ptd = IntPtr.Zero ; descriptorFormat.dwAspect = COMInterop.DVASPECT.DVASPECT_CONTENT ; descriptorFormat.lindex = -1 ; descriptorFormat.tymed = COMInterop.TYMED.TYMED_HGLOBAL ; var td = new COMInterop.STGMEDIUM ( ) ; td.unionmember = pointerToGlobalMemory ; td.tymed = COMInterop.TYMED.TYMED_HGLOBAL ; dataObject.SetData ( ref descriptorFormat , ref td , true ) ;"
"int solutionWeight ; Dictionary < int , int > Evaluate ( int w , Dictionary < int , SortedSet < int > > wbk , int key ) { if ( w == solutionWeight ) return new Dictionary < int , int > ( ) ; if ( key == 8 ) return null ; foreach ( var w2 in wbk [ key ] ) { if ( ( w & w2 ) ! = 0 ) continue ; var s = Evaluate ( w | w2 , wbk , key + 1 ) ; if ( s ! = null ) { s.Add ( key , w2 ) ; return s ; } } return null ; } let rec Evaluate ( w : int , wbk : Dictionary < int , SortedSet < int > > , key : int ) : Dictionary < int , int > = if w = solutionWeight then Dictionary < int , int > ( ) else if key = 8 then null else // ... this is wrong - runs off the end of some collection - fails with key not found exception let ws = wbk . [ key ] | > Seq.filter ( fun w2 - > ( w2 & & & w ) = 0 ) /// ... for some reason , execution resumes here after the key = 8 clause above let ss = ws | > Seq.map ( fun w - > ( w , Evaluate ( w , wbk , key+1 ) ) ) let sw = ss | > Seq.find ( fun sw - > snd sw < > null ) let s = snd sw s.Add ( key , fst sw ) s let rec Evaluate ( w : int , wbk : Dictionary < int , SortedSet < int > > , key : int ) : Dictionary < int , int > = if w = solutionWeight then Dictionary < int , int > ( ) else if key = 8 then null else EvalHelper ( w , wbk , key , wbk . [ key ] .GetEnumerator ( ) ) and EvalHelper ( w : int , wbk : Dictionary < int , SortedSet < int > > , key : int , ws : IEnumerator < int > ) : Dictionary < int , int > = if ws.MoveNext ( ) then let w2 = ws.Current if ( w & & & w2 ) = 0 then let s = Evaluate ( w ||| w2 , wbk , key+ 1 ) if s < > null then s.Add ( key , w2 ) s else EvalHelper ( w , wbk , key , ws ) else EvalHelper ( w , wbk , key , ws ) else null let rec Evaluate ( w , wbk : Dictionary < int , SortedSet < int > > , key ) : Dictionary < int , int > option = let rec EvalHelper ( ws ) = match ws with | w2 : : mws - > match w & & & w2 with | 0 - > let s = Evaluate ( w ||| w2 , wbk , key+ 1 ) match s with | None - > EvalHelper ( mws ) | Some s - > s.Add ( key , w2 ) Some ( s ) | _ - > EvalHelper ( mws ) | _ - > None if w = solutionWeight then Some ( Dictionary < int , int > ( ) ) else if key = 8 then None else EvalHelper ( List.ofSeq wbk . [ key ] )"
"Public Function StopService ( ByVal serviceName As String , ByVal timeoutMilliseconds As Double ) As Boolean Try Dim service As New ServiceController ( serviceName ) Dim timeout As TimeSpan = TimeSpan.FromMilliseconds ( timeoutMilliseconds ) service . [ Stop ] ( ) If timeoutMilliseconds < = 0 Then service.WaitForStatus ( ServiceControllerStatus.Stopped ) Else service.WaitForStatus ( ServiceControllerStatus.Stopped , timeout ) End If Return service.Status = ServiceControllerStatus.Stopped Catch ex As Win32Exception 'error occured when accessing a system API ' Return False Catch ex As TimeoutException Return False End TryEnd Function"
byte [ ] [ ] A = new byte [ 256 ] [ ] ; A [ n ] = new byte [ 256 ] ;
"namespace DelegateTest { class Program { static void Main ( string [ ] args ) { var lol = new SomeClass ( ) ; lol.SomeEvent += handler ; } static void handler ( object sender , SomeDerivedClass e ) { } } class SomeClass { public delegate void SomeEventDelegate < in T > ( object sender , T data ) ; public event SomeEventDelegate < ISomeInterface > SomeEvent ; } interface ISomeInterface { } class SomeDerivedClass : ISomeInterface { } }"
"abstract class Person { public string Name { get ; set ; } } class Child : Person { } class Parent : Person { public List < Person > Children { get ; set ; } } class Ancestor : Parent { } Ancestor myAncestor = new Ancestor { Name = `` GrandDad '' , Children = new List < Person > { new Child { Name = `` Aunt '' } , new Child { Name = `` Uncle '' } , new Parent { Name = `` Dad '' , Children = new List < Person > { new Child { Name = `` Me '' } , new Child { Name = `` Sister '' } } } } } ; GrandDad - Aunt - Uncle - *Dad -Me -Sister"
"private Button AddClearButton ( ) { return new Button { OnClientClick = string.Format ( @ '' $ ( ' . { 0 } ' ) .css ( 'background-color ' , ' # FBFBFB ' ) ; $ ( ' # ' + { 1 } ) .val ( `` ) ; $ ( ' # ' + { 2 } ) .val ( `` ) ; return false ; '' , _className , _hiddenImageNameClientId , _hiddenPathClientId ) , Text = LanguageManager.Instance.Translate ( `` /button/clear '' ) } ; } _nameAndImageDiv = new HtmlGenericControl ( `` div '' ) ; var imageDiv = new HtmlGenericControl ( `` div '' ) ; imageDiv.Attributes.Add ( `` style '' , `` width : 70px ; height : 50px ; text-align : center ; padding-top : 5px ; `` ) ; var nameDiv = new HtmlGenericControl ( `` div '' ) ; nameDiv.Attributes.Add ( `` style '' , `` width : 70px ; word-wrap : break-word ; text-align : center ; '' ) ; var image = new HostingThumbnailImage ( ) ;"
< custom : Decorator Context= '' { Binding ValueHelper } '' > < TextBox Text= '' { Binding ValueHelper.Text } '' / > < /custom : Decorator >
"System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation . -- - > System.IO.IOException : Logon failure : unknown user name or bad password.at System.IO.__Error.WinIOError ( Int32 errorCode , String maybeFullPath ) at System.IO.Directory.InternalGetFileDirectoryNames ( String path , String userPathOriginal , String searchPattern , Boolean includeFiles , Boolean includeDirs , SearchOption searchOption ) at System.IO.Directory.GetDirectories ( String path , String searchPattern , SearchOption searchOption ) Library.Class obj =new Library.Class ( ) ; obj.Execute ( serverPath ) ; Assembly assembly = Assembly.LoadFile ( @ '' pathTo\Library.dll '' ) ; Type type = assembly.GetType ( `` Library.Class '' ) ; MethodInfo executeMethod = type.GetMethod ( `` Execute '' ) ; object classInstance = Activator.CreateInstance ( type , null ) ; object [ ] parameterArray = new object [ ] { serverPath } ; executeMethod.Invoke ( classInstance , parameterArray ) ; public void Execute ( string serverPath ) { string [ ] directories = Directory.GetDirectories ( serverPath , `` 1 . * '' , SearchOption.TopDirectoryOnly ) ; foreach ( var directory in directories ) { Console.WriteLine ( directory ) ; } }"
"MailMessage mail = new MailMessage ( ) ; SmtpClient SmtpServer = new SmtpClient ( `` smtp.gmail.com '' ) ; mail.From = new MailAddress ( `` @ googlemail.com '' ) ; mail.To.Add ( `` @ .com '' ) ; mail.Subject = `` ( Somee.com notification ) New order confirmation '' ; mail.Body = `` ( Somee.com notification ) New order confirmation '' ; SmtpServer.Port = 587 ; SmtpServer.Credentials = new System.Net.NetworkCredential ( `` '' , `` '' ) ; SmtpServer.EnableSsl = true ; SmtpServer.Send ( mail ) ;"
"public static int WeekOf ( DateTime ? date ) { if ( date.HasValue ) { GregorianCalendar gCalendar = new GregorianCalendar ( ) ; int WeekNumber = gCalendar.GetWeekOfYear ( date.Value , CalendarWeekRule.FirstFourDayWeek , DayOfWeek.Monday ) ; return WeekNumber ; } else return 0 ; } public static List < ExpressionListDictionary > MyMethod ( int weeknr ) { using ( DataAccessAdapter adapter = CreateAdapter ( ) ) { LinqMetaData meta = new LinqMetaData ( adapter ) ; var q = ( from i in meta.Test where WeekOf ( i.StartDate ) == weeknr select new ExpressionListDictionary ( ) { { `` SomeId '' , i.Id } } ) ; return q.ToList ( ) ; } } List < ExpressionListDictionary > someIDs = MyMethod ( weeknr ) ; /* weeknr = 19 - > step by step debugging */"
"[ DataContract ] public class A : List < B > { [ DataMember ] public double TestA { get ; set ; } } [ DataContract ] public class B { [ DataMember ] public double TestB { get ; set ; } } List < A > list = new List < A > ( ) { new A ( ) { TestA = 1 } , new A ( ) { TestA = 3 } } ; json = JsonConvert.SerializeObject ( list ) ; //json : [ [ ] , [ ] ]"
"using System ; using System.Collections.Generic ; using System.Diagnostics ; using System.Linq ; using Juliet.Collections.Immutable ; namespace ConsoleApplication1 { class Program { const int VALUE_COUNT = 5000 ; static void Main ( string [ ] args ) { var avlTreeTimes = TimeIt ( TestAvlTree ) ; var derivedAvlTreeTimes = TimeIt ( TestDerivedAvlTree ) ; Console.WriteLine ( `` avlTreeTimes : { 0 } , derivedAvlTreeTimes : { 1 } '' , avlTreeTimes , derivedAvlTreeTimes ) ; } static double TimeIt ( Func < int , int > f ) { var seeds = new int [ ] { 314159265 , 271828183 , 231406926 , 141421356 , 161803399 , 266514414 , 15485867 , 122949829 , 198491329 , 42 } ; var times = new List < double > ( ) ; foreach ( int seed in seeds ) { var sw = Stopwatch.StartNew ( ) ; f ( seed ) ; sw.Stop ( ) ; times.Add ( sw.Elapsed.TotalMilliseconds ) ; } // throwing away top and bottom results times.Sort ( ) ; times.RemoveAt ( 0 ) ; times.RemoveAt ( times.Count - 1 ) ; return times.Average ( ) ; } static int TestAvlTree ( int seed ) { var rnd = new System.Random ( seed ) ; var avlTree = AvlTree < double > .Create ( ( x , y ) = > x.CompareTo ( y ) ) ; for ( int i = 0 ; i < VALUE_COUNT ; i++ ) { avlTree = avlTree.Insert ( rnd.NextDouble ( ) ) ; } return avlTree.Count ; } static int TestDerivedAvlTree ( int seed ) { var rnd = new System.Random ( seed ) ; var avlTree2 = DerivedAvlTree < double > .Create ( ( x , y ) = > x.CompareTo ( y ) ) ; for ( int i = 0 ; i < VALUE_COUNT ; i++ ) { avlTree2 = avlTree2.Insert ( rnd.NextDouble ( ) ) ; } return avlTree2.Count ; } } }"
"public virtual IEnumerable < Allocation > Allocations { get { return _allocations ; } } private ICollection < Allocation > _allocations ; public Activity ( IActivitySubject subject ) { // constructor ... . _allocations = new HashSet < Allocation > ( new DurationExcludedEqualityComparer ( ) ) ; } public virtual void ClockIn ( Allocation a ) { ... if ( _allocations.Contains ( a ) ) _allocations.Remove ( a ) ; _allocations.Add ( a ) ; } public virtual void ClockIn ( Allocation a ) { ... var found = _allocations.Where ( x = > x.StartTime.Equals ( a.StartTime ) & & x.Resource.Equals ( a.Resource ) ) .FirstOrDefault ( ) ; if ( found ! = null ) { if ( ! Equals ( found.Duration , a.Duration ) ) { found.UpdateDurationTo ( a.Duration ) ; } } else { _allocations.Add ( a ) ; } public class DurationExcludedEqualityComparer : EqualityComparer < Allocation > { public override bool Equals ( Allocation lhs , Allocation rhs ) { if ( ReferenceEquals ( null , rhs ) ) return false ; if ( ReferenceEquals ( lhs , null ) ) return false ; if ( ReferenceEquals ( lhs , rhs ) ) return true ; return lhs.StartTime.Equals ( rhs.StartTime ) & & lhs.Resource.Equals ( rhs.Resource ) & & lhs.Activity.Equals ( rhs.Activity ) ; } public override int GetHashCode ( Allocation obj ) { if ( ReferenceEquals ( obj , null ) ) return 0 ; unchecked { var result = 17 ; result = ( result * 397 ) ^ obj.StartTime.GetHashCode ( ) ; result = ( result * 397 ) ^ ( obj.Resource ! = null ? obj.Resource.GetHashCode ( ) : 0 ) ; result = ( result * 397 ) ^ ( obj.Activity ! = null ? obj.Activity.GetHashCode ( ) : 0 ) ; return result ; } } }"
"try { AddAdminUserInput input1 = JsonConvert.DeserializeObject < AddAdminUserInput > ( input ) ; Foundation_Services_DL_DataEntities Db = DLMetadataContext.GetContext ( ) ; UserAccount account = new UserAccount { emplid = input1.emplid , sso = input1.sso , deptid = input1.deptid , usertype = input1.usertype , status = input1.status , username = input1.username } ; Db.UserAccounts.Add ( account ) ; Db.SaveChanges ( ) ; Dictionary < string , string > dict = new Dictionary < string , string > ( ) ; dict.Add ( `` status '' , `` 0 '' ) ; dict.Add ( `` message '' , `` User Addition Successful '' ) ; Context.Response.Write ( JsonConvert.SerializeObject ( dict ) ) ; } catch ( System.Data.Entity.Infrastructure.DbUpdateException dbev ) { Dictionary < string , string > dict = new Dictionary < string , string > ( ) ; dict.Add ( `` status '' , `` 1 '' ) ; dict.Add ( `` message '' , `` User Addition Failed - User Already Exists '' ) ; Context.Response.Write ( JsonConvert.SerializeObject ( dict ) ) ; }"
"using System ; using System.Threading ; using System.Runtime.InteropServices ; namespace MarshalNested { public unsafe struct a_struct_test1 { public fixed sbyte a_string [ 3 ] ; public fixed sbyte some_data [ 12 ] ; } public struct a_struct_test2 { [ MarshalAs ( UnmanagedType.ByValArray , SizeConst = 3 ) ] public sbyte [ ] a_string ; [ MarshalAs ( UnmanagedType.ByValArray , SizeConst = 4 ) ] public a_nested [ ] some_data ; } public unsafe struct a_struct_test3 { public fixed sbyte a_string [ 3 ] ; [ MarshalAs ( UnmanagedType.ByValArray , SizeConst = 4 ) ] public a_nested [ ] some_data ; } public unsafe struct a_nested { public fixed sbyte a_notherstring [ 3 ] ; } class Program { static unsafe void Main ( string [ ] args ) { a_struct_test1 lStruct1 = new a_struct_test1 ( ) ; lStruct1.a_string [ 0 ] = ( sbyte ) ' a ' ; lStruct1.a_string [ 1 ] = ( sbyte ) ' b ' ; lStruct1.a_string [ 2 ] = ( sbyte ) ' c ' ; a_struct_test2 lStruct2 = new a_struct_test2 ( ) ; lStruct2.a_string = new sbyte [ 3 ] ; lStruct2.a_string [ 0 ] = ( sbyte ) ' a ' ; lStruct2.a_string [ 1 ] = ( sbyte ) ' b ' ; lStruct2.a_string [ 2 ] = ( sbyte ) ' c ' ; a_struct_test3 lStruct3 = new a_struct_test3 ( ) ; lStruct3.a_string [ 0 ] = ( sbyte ) ' a ' ; lStruct3.a_string [ 1 ] = ( sbyte ) ' b ' ; lStruct3.a_string [ 2 ] = ( sbyte ) ' c ' ; IntPtr lPtr1 = Marshal.AllocHGlobal ( 15 ) ; Marshal.StructureToPtr ( lStruct1 , lPtr1 , false ) ; IntPtr lPtr2 = Marshal.AllocHGlobal ( 15 ) ; Marshal.StructureToPtr ( lStruct2 , lPtr2 , false ) ; IntPtr lPtr3 = Marshal.AllocHGlobal ( 15 ) ; Marshal.StructureToPtr ( lStruct3 , lPtr3 , false ) ; string s1 = `` '' ; string s2 = `` '' ; string s3 = `` '' ; for ( int x = 0 ; x < 3 ; x++ ) { s1 += ( char ) Marshal.ReadByte ( lPtr1+x ) ; s2 += ( char ) Marshal.ReadByte ( lPtr2+x ) ; s3 += ( char ) Marshal.ReadByte ( lPtr3+x ) ; } Console.WriteLine ( `` Ptr1 ( size `` + Marshal.SizeOf ( lStruct1 ) + `` ) says `` + s1 ) ; Console.WriteLine ( `` Ptr2 ( size `` + Marshal.SizeOf ( lStruct2 ) + `` ) says `` + s2 ) ; Console.WriteLine ( `` Ptr3 ( size `` + Marshal.SizeOf ( lStruct3 ) + `` ) says `` + s3 ) ; Thread.Sleep ( 10000 ) ; } } } Ptr1 ( size 15 ) says abcPtr2 ( size 15 ) says abcPtr3 ( size 15 ) says a"
"public class CustomException : Exception { private readonly string _customField ; public CustomException ( string customField , string message ) : base ( message ) { // What 's the best way to reuse the customField initialization code in the // overloaded constructor ? Something like this ( customField ) } public CustomException ( string customField ) { _customField = customField ; } }"
"using Moq ; using Xunit ; namespace NetCore3.Tests { public interface IMyInterface { } public class UnitTest { [ Fact ] public void Test ( ) { var mock = new Mock < IMyInterface > ( ) ; var tmp = mock.Object ; // this line throwing exception } } } NetCore3.Tests.UnitTest.TestSystem.NotSupportedException : A non-collectible assembly may not reference a collectible assembly.System.NotSupportedExceptionA non-collectible assembly may not reference a collectible assembly . at System.Reflection.Emit.ModuleBuilder.GetTypeRef ( QCallModule module , String strFullName , QCallModule refedModule , String strRefedModuleFileName , Int32 tkResolution ) at System.Reflection.Emit.ModuleBuilder.GetTypeRefNested ( Type type , Module refedModule , String strRefedModuleFileName ) at System.Reflection.Emit.ModuleBuilder.GetTypeTokenWorkerNoLock ( Type type , Boolean getGenericDefinition ) at System.Reflection.Emit.ModuleBuilder.GetTypeTokenInternal ( Type type , Boolean getGenericDefinition ) at System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation ( Type interfaceType ) at Castle.DynamicProxy.Generators.Emitters.ClassEmitter..ctor ( ModuleScope modulescope , String name , Type baseType , IEnumerable ` 1 interfaces , TypeAttributes flags , Boolean forceUnsigned ) at Castle.DynamicProxy.Generators.BaseProxyGenerator.BuildClassEmitter ( String typeName , Type parentType , IEnumerable ` 1 interfaces ) at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.Init ( String typeName , ClassEmitter & emitter , Type proxyTargetType , FieldReference & interceptorsField , IEnumerable ` 1 interfaces ) at Castle.DynamicProxy.Generators.InterfaceProxyWithoutTargetGenerator.GenerateType ( String typeName , Type proxyTargetType , Type [ ] interfaces , INamingScope namingScope ) at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator. < > c__DisplayClass6_0. < GenerateCode > b__0 ( String n , INamingScope s ) at Castle.Core.Internal.SynchronizedDictionary ` 2.GetOrAdd ( TKey key , Func ` 2 valueFactory ) at Castle.DynamicProxy.Generators.BaseProxyGenerator.ObtainProxyType ( CacheKey cacheKey , Func ` 3 factory ) at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget ( Type interfaceToProxy , Type [ ] additionalInterfacesToProxy , ProxyGenerationOptions options , IInterceptor [ ] interceptors ) at Moq.Mock ` 1.InitializeInstance ( ) at Moq.Mock ` 1.OnGetObject ( ) at Moq.Mock ` 1.get_Object ( ) at NetCore3.Tests.UnitTest.Test ( ) in C : \Work\NetCore3\NetCore3.Tests\UnitTest1.cs : line 14 < Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < TargetFramework > netcoreapp3.1 < /TargetFramework > < IsPackable > false < /IsPackable > < /PropertyGroup > < ItemGroup > < PackageReference Include= '' Microsoft.NET.Test.Sdk '' Version= '' 16.6.1 '' / > < PackageReference Include= '' Moq '' Version= '' 4.14.5 '' / > < PackageReference Include= '' xunit '' Version= '' 2.4.1 '' / > < PackageReference Include= '' xunit.runner.visualstudio '' Version= '' 2.4.2 '' / > < PackageReference Include= '' coverlet.collector '' Version= '' 1.3.0 '' / > < /ItemGroup > < /Project >"
"IL_0000 : ldarg.0 IL_0001 : ldc.i4.2 IL_0002 : div IL_0003 : ret } // end of method Program : :Divider IL_0000 : ldarg.0 IL_0001 : ldc.i4.1 IL_0002 : shr IL_0003 : ret } // end of method Program : :Shifter Console.WriteLine ( string.Format ( `` { 0 } shift-divided by 2 : { 1 } divide-divided by 2 : { 2 } '' , 60 , TwoShifter ( 60 ) , TwoDivider ( 60 ) ) ) ; 00000026 mov dword ptr [ edx+4 ] ,3Ch ... 0000003b mov dword ptr [ edx+4 ] ,1Eh ... 00000057 mov dword ptr [ esi+4 ] ,1Eh Console.WriteLine ( string.Format ( `` { 0 } divide-divided by 3 : { 1 } '' , 60 , ThreeDivider ( 60 ) ) ) ; 00000085 mov dword ptr [ esi+4 ] ,3Ch ... 000000a0 mov dword ptr [ esi+4 ] ,14h Console.WriteLine ( string.Format ( `` { 0 } shift-divided by 4 : { 1 } divide-divided by 4 { 2 } '' , 60 , FourShifter ( 60 ) , FourDivider ( 60 ) ) ) ; 000000ce mov dword ptr [ esi+4 ] ,3Ch ... 000000e3 mov dword ptr [ edx+4 ] ,0Fh ... 000000ff mov dword ptr [ esi+4 ] ,0Fh Console.WriteLine ( string.Format ( `` { 0 } n-divided by 2 : { 1 } n-divided by 3 : { 2 } n-divided by 4 : { 3 } '' , 60 , Divider ( 60 , 2 ) , Divider ( 60 , 3 ) , Divider ( 60 , 4 ) ) ) ; 0000013e mov dword ptr [ esi+4 ] ,3Ch ... 0000015b mov dword ptr [ esi+4 ] ,1Eh ... 0000017b mov dword ptr [ esi+4 ] ,14h ... 0000019b mov dword ptr [ edi+4 ] ,0Fh Console.WriteLine ( string.Format ( `` { 0 } shift-divided by 2 : { 1 } divide-divided by 2 : { 2 } '' , i , TwoShifter ( i ) , TwoDivider ( i ) ) ) ; 00000211 sar eax,1 ... 00000230 sar eax,1 Console.WriteLine ( string.Format ( `` { 0 } divide-divided by 3 : { 1 } '' , i , ThreeDivider ( i ) ) ) ; Console.WriteLine ( string.Format ( `` { 0 } shift-divided by 4 : { 1 } divide-divided by 4 { 2 } '' , i , FourShifter ( i ) , FourDivider ( i ) ) ) ; 000002c5 sar eax,2 ... 000002ec sar eax,2 Console.WriteLine ( string.Format ( `` { 0 } n-divided by 2 : { 1 } n-divided by 3 : { 2 } n-divided by 4 : { 3 } '' , i , Divider ( i , 2 ) , Divider ( i , 3 ) , Divider ( i , 4 ) ) ) ; 00000345 sar eax,1 ... 00000370 idiv eax , ecx ... 00000395 sar esi,2"
string path = Environment.GetFolderPath ( Environment.SpecialFolder.ApplicationData ) + `` \\fourmlinks.txt '' ; System.OperatingSystem osInfo = System.Environment.OSVersion ; if ( osInfo.Platform == PlatformID.Win32NT ) path = Environment.SpecialFolder.LocalApplicationData + `` \\fourmlinks.txt '' ; else path = Environment.GetFolderPath ( Environment.SpecialFolder.ApplicationData ) + `` \\fourmlinks.txt '' ;
"class BidirectionalMap < T1 , T2 > where T1 ! = T2 { ... }"
public bool IsOverdraft ) { balanceProvider.IsOverdraft ( ) ; } NMock2.Expect.Once.On ( mockBalanceProvider ) .Method ( `` IsOverdraft '' ) .Will ( NMock2.Return.Value ( false ) ) ;
"ReleaseCapture ( ) ; SendMessage ( this.Handle , WM_NCRBUTTONDOWN , 0 , 0 ) ; SendMessage ( this.Handle , WM_RBUTTONUP , 0 , 0 ) ; SendMessage ( this.Handle , WM_CONTEXTMENU , 0 , 0 ) ; ReleaseCapture ( ) ; SendMessage ( this.Handle , WM_NCRBUTTONDOWN , HT_CAPTION , 0 ) ; SendMessage ( this.Handle , WM_RBUTTONUP , HT_CAPTION , 0 ) ; SendMessage ( this.Handle , WM_CONTEXTMENU , HT_CAPTION , 0 ) ;"
"@ using MyProject.BusinessLogic < div class= '' form-group '' > < div class= '' col-sm-12 '' > < button type= '' button '' class= '' btn btn-success '' onclick= '' $ ( ' # AddContractHistory ' ) .modal ( 'show ' ) ; '' > < i class= '' fa fa-plus '' > < /i > New ContractHistory < /button > < /div > < div class= '' col-sm-12 '' > < button type= '' button '' class= '' btn btn-success '' onclick= '' $ ( ' # AddCompany ' ) .modal ( 'show ' ) ; '' > < i class= '' fa fa-plus '' > < /i > New Company < /button > < /div > < /div > < div id= '' AddContractHistory '' class= '' modal fade '' role= '' dialog '' > < div class= '' modal-dialog modal-lg '' id= '' mymodal '' > @ Html.Partial ( `` AddContractHistory '' , new ContractHistory ( ) ) < /div > < /div > < div id= '' AddCompany '' class= '' modal fade '' role= '' dialog '' > < div class= '' modal-dialog modal-lg '' id= '' mymodal '' > @ Html.Partial ( `` AddCompany '' , new Company ( ) ) < /div > < /div > @ inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage < MyProject.BusinessLogic.ContractHistory > < div id= '' myform '' > < div class= '' modal-content '' > < div class= '' modal-header '' > < button type= '' button '' class= '' close '' data-dismiss= '' modal '' > & times ; < /button > < h4 class= '' modal-title '' > contract < /h4 > < /div > < div class= '' modal-body '' > < div class= '' row '' > < div class= '' panel-body '' > < div class= '' form-horizontal '' > @ Html.ValidationSummary ( ) @ Html.HiddenFor ( c = > c.ID ) < div class= '' form-group '' > < div class= '' col-sm-6 '' > @ Html.LabelFor ( c = > c.PlaceName ) < div class= '' input-group '' > < span class= '' input-group-addon '' > < i class= '' fa fa-file-text-o '' aria-hidden= '' true '' > < /i > < /span > @ Html.EditorFor ( c = > c.PlaceName , new { htmlAttributes = new { @ class = `` form-control requierd-field '' } } ) < /div > < /div > < div class= '' col-sm-6 '' > @ Html.LabelFor ( c = > c.ActivityDescription ) < div class= '' input-group '' > < span class= '' input-group-addon '' > < i class= '' fa fa-file-text-o '' aria-hidden= '' true '' > < /i > < /span > @ Html.EditorFor ( c = > c.ActivityDescription , new { htmlAttributes = new { @ class = `` form-control requierd-field '' } } ) < /div > < /div > < /div > < /div > < /div > < /div > < /div > < div class= '' modal-footer '' > < button type= '' submit '' class= '' btn btn-success '' formaction= '' AddContractHistory '' > submit < /button > < button type= '' button '' class= '' btn btn-default '' data-dismiss= '' modal '' > cancel < /button > < /div > < /div > < /div > @ inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage < MyProject.BusinessLogic.Company > < div id= '' myform '' > < div class= '' modal-content '' > < div class= '' modal-header '' > < button type= '' button '' class= '' close '' data-dismiss= '' modal '' > & times ; < /button > < h4 class= '' modal-title '' > Company < /h4 > < /div > < div class= '' modal-body '' > < div class= '' row '' > < div class= '' panel-body '' > < div class= '' form-horizontal '' > @ Html.ValidationSummary ( ) @ Html.HiddenFor ( c = > c.ID ) < div class= '' form-group '' > < div class= '' col-sm-6 '' > @ Html.LabelFor ( c = > c.PlaceName ) < div class= '' input-group '' > < span class= '' input-group-addon '' > < i class= '' fa fa-file-text-o '' aria-hidden= '' true '' > < /i > < /span > @ Html.EditorFor ( c = > c.PlaceName , new { htmlAttributes = new { @ class = `` form-control requierd-field '' } } ) < /div > < /div > < div class= '' col-sm-6 '' > @ Html.LabelFor ( c = > c.ActivityDescription ) < div class= '' input-group '' > < span class= '' input-group-addon '' > < i class= '' fa fa-file-text-o '' aria-hidden= '' true '' > < /i > < /span > @ Html.EditorFor ( c = > c.ActivityDescription , new { htmlAttributes = new { @ class = `` form-control requierd-field '' } } ) < /div > < /div > < /div > < /div > < /div > < /div > < /div > < div class= '' modal-footer '' > < button type= '' submit '' class= '' btn btn-success '' formaction= '' AddCompany '' > submit < /button > < button type= '' button '' class= '' btn btn-default '' data-dismiss= '' modal '' > cancel < /button > < /div > < /div > < /div >"
"public SomeClass { // Main Storage of all the Peptide instances , class provided below private HashSet < Peptide > peptides = new HashSet < Peptide > ( ) ; public void SomeMethod ( IEnumerable < string > files ) { foreach ( string file in files ) { using ( PeptideReader reader = new PeptideReader ( file ) ) { foreach ( DataLine line in reader.ReadNextLine ( ) ) { Peptide testPep = new Peptide ( line.Sequence ) ; if ( peptides.Contains ( testPep ) ) { // ** Problem Is Here ** // I want to get the Peptide object that is in HashSet // so I can add the DataLine to it , I do n't want use the // testPep object ( even though they are considered `` equal '' ) peptides [ testPep ] .Add ( line ) ; // I know this does n't work testPep.Add ( line ) // THIS IS NO GOOD , since it wo n't be saved in the HashSet which i use in other methods . } else { // The HashSet does n't contain this peptide , so we can just add it testPep.Add ( line ) ; peptides.Add ( testPep ) ; } } } } } } public Peptide : IEquatable < Peptide > { public string Sequence { get ; private set ; } private int hCode = 0 ; public PsmList PSMs { get ; set ; } public Peptide ( string sequence ) { Sequence = sequence.Replace ( ' I ' , ' L ' ) ; hCode = Sequence.GetHashCode ( ) ; } public void Add ( DataLine data ) { if ( PSMs == null ) { PSMs = new PsmList ( ) ; } PSMs.Add ( data ) ; } public override int GethashCode ( ) { return hCode ; } public bool Equals ( Peptide other ) { return Sequence.Equals ( other.Sequence ) ; } } public PSMlist : List < DataLine > { // and some other stuff that is not important }"
class Instrument { public string ClassCode { get ; set ; } public string Ticker { get ; set ; } public override string ToString ( ) { return `` ClassCode : `` + ClassCode + `` Ticker : `` + Ticker + ' . ' ; } } class Instrument { public string ClassCode { get ; set ; } public string Ticker { get ; set ; } public override string ToString ( ) { return `` ClassCode : `` + ClassCode + `` Ticker : `` + Ticker + ' . ' ; } public override bool Equals ( object obj ) { if ( obj == null ) return false ; Instrument instrument = obj as Instrument ; if ( instrument == null ) return false ; return ( ( ClassCode.Equals ( instrument.ClassCode ) ) & & ( Ticker.Equals ( instrument.Ticker ) ) ; } public override int GetHashCode ( ) { int hash = 13 ; hash = ( hash * 7 ) + ClassCode.GetHashCode ( ) ; hash = ( hash * 7 ) + Ticker.GetHashCode ( ) ; return hash ; } } if ( cache.Keys.Any ( instrument = > instrument.Ticker == newTicker & & instrument.ClassCode == newClassCode ) )
< Button x : Name= '' buttonOK '' Content= '' OK '' / > buttonOK.InnerRectangle.RadiusX = 5 ; buttonOK.InnerRectangle.RadiusY = 5 ;
"private void Form1_Paint ( object sender , PaintEventArgs e ) { e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit ; var height = 0 ; for ( var i = 1 ; i < = 17 ; i++ ) { using ( var font = new Font ( `` Calibri '' , i ) ) { var text = `` ClearTypeGridFit `` + i + `` pt '' ; e.Graphics.DrawString ( text , font , SystemBrushes.ControlText , 0 , height ) ; height += ( int ) e.Graphics.MeasureString ( text , font ) .Height ; } } }"
"function numberWithCommas ( str ) { return str.toString ( ) .replace ( /\B ( ? = ( \d { 3 } ) + ( ? ! \d ) ) /g , `` , '' ) ; } < input type= '' number '' min= '' 0 '' class= '' myclass '' value= '' @ somevalue '' / >"
"public ServiceSoapClient ( EndpointConfiguration endpointConfiguration , string username , string password , string domain ) : base ( ServiceSoapClient.GetBindingForEndpoint ( endpointConfiguration ) , ServiceSoapClient.GetEndpointAddress ( endpointConfiguration ) ) { this.ChannelFactory.Credentials.Windows.ClientCredential.UserName = username ; this.ChannelFactory.Credentials.Windows.ClientCredential.Password = password ; this.ChannelFactory.Credentials.Windows.ClientCredential.Domain = domain ; this.Endpoint.Name = endpointConfiguration.ToString ( ) ; ConfigureEndpoint ( this.Endpoint , this.ClientCredentials ) ; } private static System.ServiceModel.Channels.Binding GetBindingForEndpoint ( EndpointConfiguration endpointConfiguration ) { if ( ( endpointConfiguration == EndpointConfiguration.ServiceSoap ) ) { System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding ( ) ; result.MaxBufferSize = int.MaxValue ; result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max ; result.MaxReceivedMessageSize = int.MaxValue ; result.AllowCookies = true ; result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport ; result.Security.Transport.ClientCredentialType = HttpClientCredentialType.Windows ; return result ; } throw new System.InvalidOperationException ( string.Format ( `` Could not find endpoint with name \ ' { 0 } \ ' . `` , endpointConfiguration ) ) ; }"
"< runtime > < AppContextSwitchOverrides value= '' Switch.System.Windows.Input.Stylus.EnablePointerSupport=true '' / > < /runtime > < startup > < supportedRuntime version= '' v4.0 '' sku= '' .NETFramework , Version=v4.5 '' / > < /startup >"
"string [ ] sarray = new [ ] { `` A '' , `` B '' , `` C '' , `` D '' } ; string [ ] sarray = new string [ 4 ] ; // all slots initialized to nullsarray [ 0 ] = `` A '' ; sarray [ 1 ] = `` B '' ; sarray [ 2 ] = `` C '' ; sarray [ 3 ] = `` D '' ;"
"string cfg = ConfigurationManager.AppSettings [ `` myKey '' ] ; decimal bla ; if ( ! decimal.TryParse ( cfg , out bla ) ) { bla = 0 ; // 0 is the default value } else { if ( bla < 0 || bla > 10 ) { bla = 0 ; } } // initialize it so the compiler does n't complain when you select it afterdecimal awesome = 0 ; // use Enumerable.Repeat to grab a `` singleton '' IEnumerable < string > // which is feed with the value got from app settingsawesome = Enumerable.Repeat ( ConfigurationManager.AppSettings [ `` myKey '' ] , 1 ) // Is it parseable ? grab it .Where ( value = > decimal.TryParse ( value , out awesome ) ) // This is a little trick : select the own variable since it has been assigned by TryParse // Also , from now on I 'm working with an IEnumerable < decimal > .Select ( value = > awesome ) // Check the other constraints .Where ( number = > number > = 0 & & number < = 10 ) // If the previous `` Where '' s were n't matched , the IEnumerable is empty , so get the default value .DefaultIfEmpty ( 0 ) // Return the value from the IEnumerable .Single ( ) ; decimal awesome = 0 ; awesome = Enumerable.Repeat ( ConfigurationManager.AppSettings [ `` myKey '' ] , 1 ) .Where ( value = > decimal.TryParse ( value , out awesome ) ) .Select ( value = > awesome ) .Where ( number = > number > = 0 & & number < = 10 ) .DefaultIfEmpty ( 0 ) .Single ( ) ;"
"abstract public class AppCommandBase : IDisposable { } abstract public class ReadCommandBase < T , ResultT > : AppCommandBase abstract public class ReadItemCommandBase < T , FilterT > : ReadCommandBase < T , T > { } public class MyTableReadItemCommand : ReadItemCommandBase < MyTableClass , Int ? > { } abstract public ReadListCommandBase < T > : ReadCommandBase < T , IEnumerable < T > > { } public class MyTableReadListCommand : ReadListCommandBase < MyTableClass > { }"
"^Q80,3^W100^H10^P1^S3^AD^C1^R2~Q+0^O0^D0^E35~R200^LDy2-me-ddTh : m : sAH,0,0,1,1,0,0 , XAH,744,0,1,1,0,0 , XAH,746,560,1,1,0,0 , XAH,0,550,1,1,0,0 , XAG,160,208,1,1,0,0 , AA,234,283,1,1,0,0 , HalooE net use LPT2 \\localhost\godexUsbPrinter /yesprint /D : LPT2 label.cmd"
public class People { public int id ; public string nameHash ; public string name ; } foreach ( People person in PeopleCollection ) { ... }
< Application.Resources > < ItemsPanelTemplate x : Key= '' mycustomItemsPanel '' > ... . Some code here < /ItemsPanelTemplate > < /Application.Resources > < ... . ItemsPanel= '' { StaticResource mycustomItemsPanel } '' / > < ... . ItemsPanel= '' Binding Source= { StaticResource mycustomItemsPanel } } '' / >
"public struct Key { public string Name { get ; private set ; } public int Rating { get ; private set ; } public LolCat ( string name , int rating ) : this ( ) { Name = name ; Rating = rating ; } } // useagevar key = new Key ( `` MonorailCat '' , 5 ) ; public struct Key { public string Name ; public int Rating ; } // useagevar key = new Key { Name = `` MonorailCat '' , Rating = 5 } ; public immutable struct Key { string Name ; int Rating ; } // useage ( needs compiler magic ) var key = new Key ( Name : `` MonorailCat '' , Rating : 5 ) ;"
T item ; public T Item { get { return item ; } set { item = value ; } } ConcurrentQueue < T > item ; public T Item { get { T result ; item.TryPeek ( out result ) ; return item ; } set { item.TryEnqueue ( value ) ; T ignored ; item.TryDequeue ( out ignored ) ; } }
"List < List < int > > list = new List < List < int > > ( ) { new List < int > ( ) { 0 ,1 ,2 , 3 , 4 , 5 , 6 } , new List < int > ( ) { 0 ,1 ,2 , 3 , 4 , 5 , 6 } , new List < int > ( ) { 0 ,1 ,4 , 2 , 4 , 5 , 6 } , new List < int > ( ) { 0 ,3 ,2 , 5 , 1 , 6 , 4 } } ;"
public class Entry { public int UseraccountId { get ; set ; } public int CompanyId { get ; set ; } public DateTime CreationDate { get ; set ; } public string Target { get ; set ; } public string Message { get ; set ; } } List < Entry > entries = ... //get all entries .
"< Pivot x : Name= '' FilterPivot '' IsHeaderItemsCarouselEnabled= '' True '' SelectedIndex= '' 0 '' > < PivotItem Header= '' Author '' > < ListBox ItemsSource= '' { x : Bind AuthorFacets , Mode=OneWay } '' Name= '' AuthorListBox '' SelectionMode= '' Multiple '' SelectionChanged= '' AuthorListBox_SelectionChanged '' > < ListBox.ItemContainerStyle > < Style TargetType= '' ListBoxItem '' > < Setter Property= '' HorizontalContentAlignment '' Value= '' Stretch '' / > < /Style > < /ListBox.ItemContainerStyle > < ListBox.ItemTemplate > < DataTemplate x : DataType= '' local : IFacet '' > < Grid > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' * '' > < /ColumnDefinition > < ColumnDefinition Width= '' Auto '' > < /ColumnDefinition > < /Grid.ColumnDefinitions > < TextBlock Grid.Column= '' 0 '' Text= '' { x : Bind read } '' TextWrapping= '' Wrap '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Center '' / > < Border Grid.Column= '' 1 '' Background= '' Gray '' MinWidth= '' 25 '' CornerRadius= '' 8 '' > < TextBlock Text= '' { x : Bind num } '' HorizontalAlignment= '' Center '' VerticalAlignment= '' Center '' Padding= '' 2 '' / > < /Border > < /Grid > < /DataTemplate > < /ListBox.ItemTemplate > < /ListBox > < /PivotItem > < PivotItem Header= '' Language '' > ... . ... . < /PivotItem > < PivotItem Header= '' Learning Resource Type '' > ... . ... . < /PivotItem > < PivotItem Header= '' Subject '' > ... . ... . < /PivotItem > < PivotItem Header= '' Type '' > ... . ... . < /PivotItem > < PivotItem Header= '' Education Level '' > ... . ... . < /PivotItem > < PivotItem Header= '' Source '' > ... . ... . < /PivotItem > < /Pivot > public FilterPage ( ) { this.InitializeComponent ( ) ; this.NavigationCacheMode = NavigationCacheMode.Required ; } protected override void OnNavigatedTo ( NavigationEventArgs e ) { base.OnNavigatedTo ( e ) ; FilterPivot.SelectedIndex = 0 ; }"
bool validFactory = fields .Where ( fields = > field.FieldType == typeof ( DependencyPropertyFactory < T > ) & & field.IsStatic ) .Any ( ) ; bool validFactory = fields .Where ( field = > field.FieldType == typeof ( DependencyPropertyFactory < T > ) ) .Where ( field = > field.IsStatic ) .Any ( ) ;
interface MyInterface { } delegate void MyFuncType < in InType > ( InType input ) ; class MyClass < T > where T : MyInterface { public void callDelegate ( MyFuncType < MyInterface > func ) { MyFuncType < T > castFunc1 = ( MyFuncType < T > ) func ; //Error MyFuncType < T > castFunc2 = func as MyFuncType < T > ; MyFuncType < T > castFunc3 = func is MyFuncType < T > ? ( MyFuncType < T > ) func : ( MyFuncType < T > ) null ; //Error } } Can not convert type 'delegateCovariance.MyFuncType < myNamespace.MyInterface > ' to myNamespace.MyFuncType < T > '
public DateTime ? LastLogon { get ; }
"using Castle.DynamicProxy ; using Castle.MicroKernel.Registration ; using Castle.Windsor ; using System ; namespace Sandbox { public interface IFooInterceptor : IInterceptor { } public interface IFoo { void Print ( ) ; } public interface IBar { IFoo MyFoo { get ; set ; } } public class Foo : IFoo { public void Print ( ) { Console.WriteLine ( `` Print '' ) ; } } public class FooInterceptor : IFooInterceptor , IInterceptor { public void Intercept ( IInvocation invocation ) { Console.WriteLine ( `` Awesome '' ) ; invocation.Proceed ( ) ; } } public class Bar : IBar { public virtual IFoo MyFoo { get ; set ; } } class Program { static void Main ( string [ ] args ) { IWindsorContainer container = new WindsorContainer ( ) .Register ( Component.For < IBar > ( ) .ImplementedBy < Bar > ( ) .LifestyleTransient ( ) , Component.For < IFoo > ( ) .ImplementedBy < Foo > ( ) .LifestyleTransient ( ) .Interceptors < IFooInterceptor > ( ) , Component.For < IFooInterceptor > ( ) .ImplementedBy < FooInterceptor > ( ) .LifestyleTransient ( ) ) ; var bar = container.Resolve < IBar > ( ) ; var foo = container.Resolve < IFoo > ( ) ; // this is n't null bar.MyFoo.Print ( ) ; // exception : bar.MyFoo is null Console.WriteLine ( `` Done '' ) ; Console.ReadLine ( ) ; } } }"
"string.Format ( `` Init took { 0 : mm : ss } '' , ( object ) DateTime.Now.Subtract ( renderStartTime ) )"
function string F ( object o ) { return o.ToString ( ) ; } function string F ( DbType t ) { return t.ToString ( ) ; } int i = 0 ; F ( ( long ) 0 ) == `` String '' // would have been `` 0 '' in VS 2005F ( 0 ) == `` String '' F ( i ) == `` 0 ''
Bananas - > Where color='blue ' - > Where size > '20cm ' - > Take 25
import System.Timers ; alias LiteTimer=System.Threading.Timer ; alias WinForms=System.Windows.Forms ; public class Sample { public void Action ( ) { var elapsed = false ; using ( var t = new LiteTimer.Timer ( _ = > elapsed = true ) { while ( ! elapsed ) CallSomeFinickyApi ( ) ; } } }
"var patternDateTimeOffset = ZonedDateTimePattern.CreateWithCurrentCulture ( `` g o < m > '' , DateTimeZoneProviders.Tzdb ) ; lblOriginalDateTimeAndOffsetVal.Text = patternDateTimeOffset.Format ( zonedDateTime ) ;"
"A a ; // I want to get rid of this variableif ( ( a = collection.FirstOrDefault ( x = > x.Field == null ) ) ! = null ) { throw new ScriptException ( `` { 0 } '' , a.y ) ; //I need to access other field of the object here , that 's why I had to declare a variable outside of the expression }"
class Program { static void Main ( string [ ] args ) { Console.WriteLine ( new Person ( `` james '' ) == new Person ( `` james '' ) ) ; Console.ReadKey ( ) ; } } class Person { private string Name ; public Person ( string name ) { Name = name ; } public override int GetHashCode ( ) { return 1 ; } public override bool Equals ( object obj ) { return true ; } }
"PerformanceCounter p = new PerformanceCounter ( `` Memory '' , `` Available Bytes '' ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; float mem = p.NextValue ( ) ;"
"syntax = `` proto3 '' ; package Messenger ; service MessengerService { rpc SubscribeForMessages ( User ) returns ( stream Message ) { } rpc SendMessage ( Message ) returns ( Close ) { } } message User { string displayName = 1 ; } message Message { User from = 1 ; string message = 2 ; } message Close { } using System ; using System.Collections.Concurrent ; using System.Collections.Generic ; using System.Linq ; using System.Threading ; using System.Threading.Tasks ; using Grpc.Core ; using Messenger ; namespace SimpleGrpcTestStream { /* DependenciesInstall-Package Google.ProtobufInstall-Package GrpcInstall-Package Grpc.ToolsInstall-Package System.Interactive.AsyncInstall-Package System.Linq.Async */ internal static class Program { private static void Main ( ) { var messengerServer = new MessengerServer ( ) ; messengerServer.Start ( ) ; var channel = Common.GetNewInsecureChannel ( ) ; var client = new MessengerService.MessengerServiceClient ( channel ) ; var clientUser = Common.GetUser ( `` Client '' ) ; var otherUser = Common.GetUser ( `` Other '' ) ; var cancelClientSubscription = AddCancellableMessageSubscription ( client , clientUser ) ; var cancelOtherSubscription = AddCancellableMessageSubscription ( client , otherUser ) ; client.SendMessage ( new Message { From = clientUser , Message_ = `` Hello '' } ) ; client.SendMessage ( new Message { From = otherUser , Message_ = `` World '' } ) ; client.SendMessage ( new Message { From = clientUser , Message_ = `` Whoop '' } ) ; cancelClientSubscription.Cancel ( ) ; cancelOtherSubscription.Cancel ( ) ; channel.ShutdownAsync ( ) .Wait ( ) ; messengerServer.ShutDown ( ) .Wait ( ) ; } private static CancellationTokenSource AddCancellableMessageSubscription ( MessengerService.MessengerServiceClient client , User user ) { var cancelMessageSubscription = new CancellationTokenSource ( ) ; var messages = client.SubscribeForMessages ( user ) ; var messageSubscription = messages .ResponseStream .ToAsyncEnumerable ( ) .Finally ( ( ) = > messages.Dispose ( ) ) ; messageSubscription.ForEachAsync ( message = > Console.WriteLine ( $ '' New Message : { message.Message_ } '' ) , cancelMessageSubscription.Token ) ; return cancelMessageSubscription ; } } public static class Common { private const int Port = 50051 ; private const string Host = `` localhost '' ; private static readonly string ChannelAddress = $ '' { Host } : { Port } '' ; public static User GetUser ( string name ) = > new User { DisplayName = name } ; public static readonly User ServerUser = GetUser ( `` Server '' ) ; public static readonly Close EmptyClose = new Close ( ) ; public static Channel GetNewInsecureChannel ( ) = > new Channel ( ChannelAddress , ChannelCredentials.Insecure ) ; public static ServerPort GetNewInsecureServerPort ( ) = > new ServerPort ( Host , Port , ServerCredentials.Insecure ) ; } public sealed class MessengerServer : MessengerService.MessengerServiceBase { private readonly Server _server ; public MessengerServer ( ) { _server = new Server { Ports = { Common.GetNewInsecureServerPort ( ) } , Services = { MessengerService.BindService ( this ) } , } ; } public void Start ( ) { _server.Start ( ) ; } public async Task ShutDown ( ) { await _server.ShutdownAsync ( ) .ConfigureAwait ( false ) ; } private readonly ConcurrentDictionary < User , IServerStreamWriter < Message > > _messageSubscriptions = new ConcurrentDictionary < User , IServerStreamWriter < Message > > ( ) ; public override async Task < Close > SendMessage ( Message request , ServerCallContext context ) { await Task.Run ( ( ) = > { foreach ( var ( _ , messageStream ) in _messageSubscriptions ) { messageStream.WriteAsync ( request ) ; } } ) .ConfigureAwait ( false ) ; return await Task.FromResult ( Common.EmptyClose ) .ConfigureAwait ( false ) ; } public override async Task SubscribeForMessages ( User request , IServerStreamWriter < Message > responseStream , ServerCallContext context ) { await Task.Run ( ( ) = > { responseStream.WriteAsync ( new Message { From = Common.ServerUser , Message_ = $ '' { request.DisplayName } is listening for messages ! `` , } ) ; _messageSubscriptions.TryAdd ( request , responseStream ) ; } ) .ConfigureAwait ( false ) ; } } public static class AsyncStreamReaderExtensions { public static IAsyncEnumerable < T > ToAsyncEnumerable < T > ( this IAsyncStreamReader < T > asyncStreamReader ) { if ( asyncStreamReader is null ) { throw new ArgumentNullException ( nameof ( asyncStreamReader ) ) ; } return new ToAsyncEnumerableEnumerable < T > ( asyncStreamReader ) ; } private sealed class ToAsyncEnumerableEnumerable < T > : IAsyncEnumerable < T > { public IAsyncEnumerator < T > GetAsyncEnumerator ( CancellationToken cancellationToken = default ) = > new ToAsyncEnumerator < T > ( _asyncStreamReader , cancellationToken ) ; private readonly IAsyncStreamReader < T > _asyncStreamReader ; public ToAsyncEnumerableEnumerable ( IAsyncStreamReader < T > asyncStreamReader ) { _asyncStreamReader = asyncStreamReader ; } private sealed class ToAsyncEnumerator < TEnumerator > : IAsyncEnumerator < TEnumerator > { public TEnumerator Current = > _asyncStreamReader.Current ; public async ValueTask < bool > MoveNextAsync ( ) = > await _asyncStreamReader.MoveNext ( _cancellationToken ) ; public ValueTask DisposeAsync ( ) = > default ; private readonly IAsyncStreamReader < TEnumerator > _asyncStreamReader ; private readonly CancellationToken _cancellationToken ; public ToAsyncEnumerator ( IAsyncStreamReader < TEnumerator > asyncStreamReader , CancellationToken cancellationToken ) { _asyncStreamReader = asyncStreamReader ; _cancellationToken = cancellationToken ; } } } } }"
"public static int QuiescentValue ( chessBoard Board , int Alpha , int Beta ) { QuiescentNodes++ ; int MinMax = Board.WhoseMove ; // 1 = maximierend , -1 = minimierend int Counter = 0 ; int maxCount ; int tempValue = 0 ; int currentAlpha = Alpha ; int currentBeta = Beta ; int QuietWorth = chEvaluation.Evaluate ( Board ) ; if ( MinMax == 1 ) //Max { if ( QuietWorth > = currentBeta ) return currentBeta ; if ( QuietWorth > currentAlpha ) currentAlpha = QuietWorth ; } else //Min { if ( QuietWorth < = currentAlpha ) return currentAlpha ; if ( QuietWorth < currentBeta ) currentBeta = QuietWorth ; } List < chMove > HitMoves = GetAllHitMoves ( Board ) ; maxCount = HitMoves.Count ; if ( maxCount == 0 ) return chEvaluation.Evaluate ( Board ) ; chessBoard tempBoard ; while ( Counter < maxCount ) { tempBoard = new chessBoard ( Board ) ; tempBoard.Move ( HitMoves [ Counter ] ) ; tempValue = QuiescentValue ( tempBoard , currentAlpha , currentBeta ) ; if ( MinMax == 1 ) //maximierend { if ( tempValue > = currentBeta ) { return currentBeta ; } if ( tempValue > currentAlpha ) { currentAlpha = tempValue ; } } else //minimierend { if ( tempValue < = currentAlpha ) { return currentAlpha ; } if ( tempValue < currentBeta ) { currentBeta = tempValue ; } } Counter++ ; } if ( MinMax == 1 ) return currentAlpha ; else return currentBeta ; }"
private void CreateAddress ( BizObjects.Address address ) { var entity = new EntityFramework.Address ( ) ; entity.Line1 = address.Line1 ; entity.Line2 = address.Line2 ; entity.City = address.City ; entity.State = address.State ; entity.ZipCode = address.ZipCode ; _entities.AddToAddress ( entity ) ; _entities.SaveChanges ( ) ; }
public static IEnumerable < int > FibonacciTo ( int max ) { int m1 = 0 ; int m2 = 1 ; int r = 1 ; while ( r < = max ) { yield return r ; r = m1 + m2 ; m1 = m2 ; m2 = r ; } } foreach ( int i in FibonacciTo ( 56 ) .Where ( n = > n > = 24 ) ) { Console.WriteLine ( i ) ; } foreach ( int i in Fibonacci ( ) .Where ( n = > n > = 24 & & n < = 56 ) ) { Console.WriteLine ( i ) ; }
string [ ] commandLines = Environment.GetCommandLineArgs ( ) ;
"class Program { public static void Main ( ) { var ListToSend = new List < List < string > > ( ) ; var ListToReceive = new List < List < string > > ( ) ; ListToSend = SimulateData ( ) .ToList ( ) ; using ( Stream stream = GetStream ( ListToSend ) ) { var formatter = new BinaryFormatter ( ) ; while ( stream.CanRead || 1 == 1 || true ... ) // What should I put in here to stop once I read everything ? ? ? { List < string > row = formatter.Deserialize ( stream ) as List < string > ; ListToReceive.Add ( row ) ; } Printer ( ListToReceive ) ; Console.WriteLine ( `` Done '' ) ; } } private static void Printer ( List < List < string > > data ) { Console.WriteLine ( `` Printing '' ) ; foreach ( var row in data ) { foreach ( var cell in row ) { Console.Write ( cell + `` \t '' ) ; } Console.WriteLine ( `` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - '' ) ; } } private static Stream GetStream ( IEnumerable < List < string > > data ) { return EnumerableStream.Create ( data , DeserializerCallback ) ; } private static List < byte > DeserializerCallback ( object obj ) { var binFormatter = new BinaryFormatter ( ) ; var mStream = new MemoryStream ( ) ; binFormatter.Serialize ( mStream , obj ) ; return mStream.ToArray ( ) .ToList ( ) ; } private static IEnumerable < List < string > > SimulateData ( ) { Random randomizer = new Random ( ) ; for ( var i = 0 ; i < 10 ; i++ ) { var row = new List < string > ( ) ; for ( var j = 0 ; j < 1000 ; j++ ) { row.Add ( ( randomizer.Next ( 100 ) ) .ToString ( ) ) ; } yield return row ; } } }"
"< ViewportControl x : Name= '' ViewPortTestTest '' Bounds= '' 0,0,1271,1381.5 '' Height= '' 480 '' Width= '' 800 '' Canvas.ZIndex= '' 1 '' Grid.Row= '' 1 '' > < ViewportControl.RenderTransform > < CompositeTransform x : Name= '' myTransformTest '' / > < /ViewportControl.RenderTransform > < View : Map x : Name= '' ZoomableContent '' > < View : Map.RenderTransform > < CompositeTransform x : Name= '' myTransform '' / > < ! -- ScaleX= '' { Binding Map.imageScale } '' ScaleY= '' { Binding Map.imageScale } '' / > -- > < /View : Map.RenderTransform > < /View : Map > < /ViewportControl > public void ManStart ( ManipulationStartedEventArgs e ) { e.Handled = true ; ViewportControl VP = FindParentOfType < ViewportControl > ( ChampViewModelSel ) ; } } public void ManDelta ( ManipulationDeltaEventArgs e ) { e.Handled = true ; Point fingerPosition = e.DeltaManipulation.Translation ; Temp.x = fingerPosition.X ; Temp.y = fingerPosition.Y ; } }"
"string [ ] test = new string [ ] { `` apple '' , `` banana '' , `` tomato '' , `` pineapple '' , `` grapes '' } ; string result = `` '' ; for ( int i = 1 ; i < 4 ; i++ ) { result += test [ i ] + `` `` ; }"
dynamic myExpando = new ExpandoObject ( ) ; myExpando.TheAnswerToLifeTheUniverseAndEverything= 42 ; myExpando.GetTheQuestion = ( ( Func < string > ) ( ( ) = > { return `` How many road must a man walk down before we can call him a man ? `` ; } ) ) ;
"Func < Employee , Employee > _myFunc ; void Main ( ) { Func < Employee , Employee > test1 = _myFunc ; //Ok Func < Employee , Person > test2 = _myFunc ; //Ok Func < Person , Employee > test3 = _myFunc ; //Fails Func < Person , Person > test4 = _myFunc ; //Fails } public class Person { } public class Employee : Person { }"
"[ DllImport ( `` coredll.dll '' ) ] private extern static int GetDeviceUniqueID ( [ In , Out ] byte [ ] appdata , int cbApplictionData , int dwDeviceIDVersion , [ In , Out ] byte [ ] deviceIDOuput , out uint pcbDeviceIDOutput ) ; public static string GetDeviceID ( ) { string appString = `` MyApp '' ; byte [ ] appData = new byte [ appString.Length ] ; for ( int count = 0 ; count < appString.Length ; count++ ) { appData [ count ] = ( byte ) appString [ count ] ; } int appDataSize = appData.Length ; byte [ ] DeviceOutput = new byte [ 20 ] ; uint SizeOut = 20 ; int i_rc = GetDeviceUniqueID ( appData , appDataSize , 1 , DeviceOutput , out SizeOut ) ; string idString = `` '' ; for ( int i = 0 ; i < DeviceOutput.Length ; i++ ) { if ( i == 4 || i == 6 || i == 8 || i == 10 ) idString = String.Format ( `` { 0 } - { 1 } '' , idString , DeviceOutput [ i ] .ToString ( `` x2 '' ) ) ; else idString = String.Format ( `` { 0 } { 1 } '' , idString , DeviceOutput [ i ] .ToString ( `` x2 '' ) ) ; } return idString ; }"
public static bool Valid < T > ( this T obj ) where T : class { if ( obj == null ) return false ; else if ( obj == default ( T ) ) return false ; //Other class checks here else return true ; }
"using ( MemoryStream stream = new MemoryStream ( ) ) { //create actual graph using only comparable properties List < NavigationResult > comparableActual = ( from item in sparsed select new NavigationResult { Direction = item.Direction , /* ... */ VersionIndication = item.VersionIndication } ) .ToList ( ) ; ( new BinaryFormatter ( ) ) .Serialize ( stream , comparableActual ) ; string base64encodedActual = System.Convert.ToBase64String ( stream.GetBuffer ( ) , 0 , ( int ) stream.Length ) ; //base64 encoded binary representation of this string base64encodedReference = @ '' AAEAAAD ... . '' ; //this reference is the expected value Assert.AreEqual ( base64encodedReference , base64encodedActual , `` The comparable part of the sparsed set is not equal to the reference . `` ) ; }"
"var result = ( from r in employeeRepo.GetAll ( ) where r.EmployeeName.Contains ( searchString ) || r.SAMAccountName.Contains ( searchString ) orderby r.EmployeeName select new SelectListItem { Text = r.EmployeeName , Value = r.EmployeeName } ) ;"
void Method ( object obj ) { Console.WriteLine ( `` object '' ) ; } void Method ( int [ ] array ) { Console.WriteLine ( `` int [ ] '' ) ; } Method ( null ) ;
"//this is my search querystring mySearchQuery = `` how to play with matches '' ; //these are my articlesstring [ ] myarticles = new string [ ] { `` article 1 : this article will teach newbies how to start fire by playing with the awesome matches.. '' , `` article 2 : this article does n't contain anything '' } ;"
"_form2.VisibleChanged += ( s , a ) = > { if ( _form2.Visible == false ) MessageBox.Show ( `` TEXT '' ) ; } ;"
"public sealed class WCSessionManager : NSObject , IWCSessionDelegate { // Setup is converted from https : //www.natashatherobot.com/watchconnectivity-say-hello-to-wcsession/ // with some extra bits private static readonly WCSessionManager sharedManager = new WCSessionManager ( ) ; private static WCSession session = WCSession.IsSupported ? WCSession.DefaultSession : null ; # if __IOS__ public static string Device = `` Phone '' ; # else public static string Device = `` Watch '' ; # endif public event ApplicationContextUpdatedHandler ApplicationContextUpdated ; public delegate void ApplicationContextUpdatedHandler ( WCSession session , Dictionary < string , object > applicationContext ) ; public event MessageReceivedHandler MessageReceived ; public delegate void MessageReceivedHandler ( Dictionary < string , object > message , Action < Dictionary < string , object > > replyHandler ) ; private WCSession validSession { get { # if __IOS__ // Even though session.Paired and session.WatchAppInstalled are underlined , it will still build as they are available on the iOS version of WatchConnectivity.WCSession Console.WriteLine ( $ '' Paired status : { ( session.Paired ? '✓ ' : '✗ ' ) } \n '' ) ; Console.WriteLine ( $ '' Watch App Installed status : { ( session.WatchAppInstalled ? '✓ ' : '✗ ' ) } \n '' ) ; return ( session.Paired & & session.WatchAppInstalled ) ? session : null ; //return session ; # else return session ; # endif } } private WCSession validReachableSession { get { return session.Reachable ? validSession : null ; } } private WCSessionManager ( ) : base ( ) { } public static WCSessionManager SharedManager { get { return sharedManager ; } } public void StartSession ( ) { if ( session ! = null ) { session.Delegate = this ; session.ActivateSession ( ) ; Console.WriteLine ( $ '' Started Watch Connectivity Session on { Device } '' ) ; } } [ Export ( `` sessionReachabilityDidChange : '' ) ] public void SessionReachabilityDidChange ( WCSession session ) { Console.WriteLine ( $ '' Watch connectivity Reachable : { ( session.Reachable ? '✓ ' : '✗ ' ) } from { Device } '' ) ; // handle session reachability change if ( session.Reachable ) { // great ! continue on with Interactive Messaging } else { // prompt the user to unlock their iOS device } } # region Application Context Methods public void UpdateApplicationContext ( Dictionary < string , object > applicationContext ) { // Application context doesnt need the watch to be reachable , it will be received when opened if ( validSession ! = null ) { try { var NSValues = applicationContext.Values.Select ( x = > new NSString ( JsonConvert.SerializeObject ( x ) ) ) .ToArray ( ) ; var NSKeys = applicationContext.Keys.Select ( x = > new NSString ( x ) ) .ToArray ( ) ; var NSApplicationContext = NSDictionary < NSString , NSObject > .FromObjectsAndKeys ( NSValues , NSKeys ) ; UpdateApplicationContextOnSession ( NSApplicationContext ) ; } catch ( Exception ex ) { Console.WriteLine ( $ '' Exception Updating Application Context : { ex.Message } '' ) ; } } } public void GetApplicationContext ( ) { UpdateApplicationContext ( new Dictionary < string , object > ( ) { { `` GET '' , null } } ) ; } [ Export ( `` session : didReceiveApplicationContext : '' ) ] public void DidReceiveApplicationContext ( WCSession session , NSDictionary < NSString , NSObject > applicationContext ) { Console.WriteLine ( $ '' Recieving Message on { Device } '' ) ; if ( ApplicationContextUpdated ! = null ) { var keys = applicationContext.Keys.Select ( k = > k.ToString ( ) ) .ToArray ( ) ; IEnumerable < object > values ; try { values = applicationContext.Values.Select ( v = > JsonConvert.DeserializeObject ( v.ToString ( ) , typeof ( DoorWatchDTO ) ) ) ; } catch ( Exception ) { values = applicationContext.Values.Select ( v = > JsonConvert.DeserializeObject ( v.ToString ( ) ) ) ; } var dictionary = keys.Zip ( values , ( k , v ) = > new { Key = k , Value = v } ) .ToDictionary ( x = > x.Key , x = > x.Value ) ; ApplicationContextUpdated ( session , dictionary ) ; } } [ Export ( `` session : didReceiveMessage : : '' ) ] public void DidReceiveMessage ( WCSession session , NSDictionary < NSString , NSObject > message , WCSessionReplyHandler replyHandler ) { if ( MessageReceived ! = null ) { var keys = message.Keys.Select ( k = > k.ToString ( ) ) .ToArray ( ) ; IEnumerable < object > values ; values = message.Values.Select ( v = > JsonConvert.DeserializeObject ( v.ToString ( ) ) ) ; var dictionary = keys.Zip ( values , ( k , v ) = > new { Key = k , Value = v } ) .ToDictionary ( x = > x.Key , x = > x.Value ) ; MessageReceived ( dictionary , ( dict ) = > { var NSValues = dict.Values.Select ( x = > new NSString ( JsonConvert.SerializeObject ( x ) ) ) .ToArray ( ) ; var NSKeys = dict.Keys.Select ( x = > new NSString ( x ) ) .ToArray ( ) ; var NSDict = NSDictionary < NSString , NSObject > .FromObjectsAndKeys ( NSValues , NSKeys ) ; replyHandler.Invoke ( NSDict ) ; } ) ; } } public void SendMessage ( Dictionary < string , object > message , Action < Dictionary < string , object > > replyHandler , WKInterfaceLabel label ) { if ( validSession ! = null ) { try { var NSValues = message.Values.Select ( x = > new NSString ( JsonConvert.SerializeObject ( x ) ) ) .ToArray ( ) ; var NSKeys = message.Keys.Select ( x = > new NSString ( x ) ) .ToArray ( ) ; var NSMessage = NSDictionary < NSString , NSObject > .FromObjectsAndKeys ( NSValues , NSKeys ) ; var reply = new WCSessionReplyHandler ( ( replyMessage ) = > { var values = replyMessage.Values.Select ( x = > JsonConvert.SerializeObject ( x ) ) .ToArray ( ) ; var keys = replyMessage.Keys.Select ( x = > x.ToString ( ) ) .ToArray ( ) ; var dict = keys.Zip ( values , ( k , v ) = > new { Key = k , Value = v } ) .ToDictionary ( x = > x.Key , x = > ( object ) x.Value ) ; replyHandler.Invoke ( dict ) ; } ) ; validSession.SendMessage ( NSMessage , reply , ( error ) = > { label.SetText ( error.ToString ( ) ) ; // I can see the error in here : `` payload could n ... '' } ) ; } catch ( Exception ex ) { Console.WriteLine ( $ '' Exception sending message : { ex.Message } '' ) ; } } } private void UpdateApplicationContextOnSession ( NSDictionary < NSString , NSObject > NSApplicationContext ) { NSError error ; var sendSuccessfully = validSession.UpdateApplicationContext ( NSApplicationContext , out error ) ; if ( sendSuccessfully ) { Console.WriteLine ( $ '' Sent App Context from { Device } \nPayLoad : { NSApplicationContext.ToString ( ) } \n '' ) ; # if __IOS__ Logging.Log ( `` Success , payload : `` + NSApplicationContext.ToString ( ) ) ; # endif } else { Console.WriteLine ( $ '' Error Updating Application Context : { error.LocalizedDescription } '' ) ; # if __IOS__ Logging.Log ( `` error : `` + error.LocalizedDescription ) ; # endif } } # endregion"
private readonly object m_lock = new object ( ) ; private IClient m_clientprivate object m_context ; lock ( m_lock ) { m_client = theClientFromSomewhere ; m_context = contextObject ; } var localClient = m_client ; Debug.Assert ( localClient ! = null ) ; localClient.DoStuff ( ) ;
"1- collection = Regex.Matches ( document , pattern , RegexOptions.Compiled ) ; 2- if ( collection.Count > 0 ) //This Line { Function evaluation disabled because a previous function evaluation timed out . You must continue execution to reenable function evaluation . Regex : @ '' '' '' price '' '' > ( .|\r|\n ) * ? pound ; ( ? < data > .* ? ) < /span > '' Part of Document : < /span > < span > 1 < /span > < /a > < /li > \n\t\t\t\t < li > \n\t\t\t\t\t < span class=\ '' icon icon_floorplan touchsearch-icon touchsearch-icon-floorplan none\ '' > Floorplans : < /span > < span > 0 < /span > < /li > \n\t\t\t\t < /ul > \n\t\t < /div > \n < /div > \n\t < /div > \n < div class=\ '' details clearfix\ '' > \n\t\t < div class=\ '' price-new touchsearch-summary-list-item-price\ '' > \r\n\t < a href=\ '' /commercial-property-for-sale/property-47109002.html\ '' > POA < /a > < /div > \r\n < p class=\ '' price\ '' > \r\n\t\t\t < span > POA < /span > \r\n\t\t\t\t < /p > \r\n\t < h2 class=\ '' address bedrooms\ '' > \r\n\t < a id=\ '' standardPropertySummary47109002\ ''"
public class BaseController { protected IService1 _service1 ; protected IService2 _service2 ; protected IService3 _service3 ; // ... public BaseController ( IMyAppServiceProvider serviceProvider ) { _service1 = serviceProvider.GetService < IService1 > ; _service2 = serviceProvider.GetService < IService2 > ; _service3 = serviceProvider.GetService < IService3 > ; // ... } }
"HRESULT CreateVertexDeclaration ( [ in ] const D3DVERTEXELEMENT9 *pVertexElements , [ out , retval ] IDirect3DVertexDeclaration9 **ppDecl ) ; [ StructLayout ( LayoutKind.Sequential , Pack = 1 ) ] public class D3DVERTEXELEMENT9 { public short Stream ; public short Offset ; public DeclarationType Type ; // Enum public DeclarationMethod Method ; // Enum public DeclarationUsage Usage ; // Enum public byte UsageIndex ; } var vertex = ( D3DVERTEXELEMENT9 ) Marshal.PtrToStructure ( vertexElements , typeof ( D3DVERTEXELEMENT9 ) ) ; BeginScene ( LPDIRECT3DDEVICE9 pDevice ) BeginStateBlock ( LPDIRECT3DDEVICE9 pDevice ) Clear ( LPDIRECT3DDEVICE9 pDevice , DWORD Count , CONST D3DRECT* pRects , DWORD Flags , D3DCOLOR Color , float Z , DWORD Stencil ) ColorFill ( LPDIRECT3DDEVICE9 pDevice , IDirect3DSurface9* pSurface , CONST RECT* pRect , D3DCOLOR color ) CreateAdditionalSwapChain ( LPDIRECT3DDEVICE9 pDevice , D3DPRESENT_PARAMETERS* pPresentationParameters , IDirect3DSwapChain9** pSwapChain ) CreateCubeTexture ( LPDIRECT3DDEVICE9 pDevice , UINT EdgeLength , UINT Levels , DWORD Usage , D3DFORMAT Format , D3DPOOL Pool , IDirect3DCubeTexture9** ppCubeTexture , HANDLE* pSharedHandle ) BeginSceneDelegate ( IntPtr devicePointer ) ; BeginStateBlocKDelegate ( IntPtr devicePointer ) ; ClearDelegate ( IntPtr devicePointer , int count , IntPtr rects , ClearFlags flags , ColorBGRA color , float z , int stencil ) ; ColorFillDelegate ( IntPtr devicePointer , IntPtr surface , IntPtr rect , ColorBGRA color ) ; CreateAdditionalSwapChainDelegate ( IntPtr devicePointer , [ In , Out ] PresentParameters presentParameters , out SwapChain swapChain ) ; CreateCubeTextureDelegate ( IntPtr devicePointer , int edgeLength , int levels , Usage usage , Format format , Pool pool , out IntPtr cubeTexture , IntPtr sharedHandle ) ; ... DLL injection suceeded.Setting up Direct3D 9 hooks ... Activating Direct3D 9 hooks ... CreateDepthStencilSurface ( IntPtr devicePointer : 147414976 , Int32 width : 1346 , Int32 height : 827 , Format format : D24S8 , MultisampleType multiSampleType : None , Int32 multiSampleQuality : 0 , Boolean discard : False , IntPtr & surface : ( out ) , IntPtr sharedHandle : 0 ) CreateDepthStencilSurface ( IntPtr devicePointer : 147414976 , Int32 width : 1346 , Int32 height : 827 , Format format : D24S8 , MultisampleType multiSampleType : None , Int32 multiSampleQuality : 0 , Boolean discard : False , IntPtr & surface : ( out ) , IntPtr sharedHandle : 0 ) Clear ( IntPtr devicePointer : 147414976 , Int32 count : 0 , IntPtr rects : ( Empty ) , ClearFlags flags : Target , ColorBGRA color : A:0 R:0 G:0 B:0 , Single z : 1 , Int32 stencil : 0 ) Clear ( IntPtr devicePointer : 147414976 , Int32 count : 0 , IntPtr rects : ( Empty ) , ClearFlags flags : Target , ColorBGRA color : A:0 R:0 G:0 B:0 , Single z : 1 , Int32 stencil : 0 ) BeginScene ( IntPtr devicePointer : 147414976 ) Clear ( IntPtr devicePointer : 147414976 , Int32 count : 0 , IntPtr rects : ( Empty ) , ClearFlags flags : Target , ColorBGRA color : A:0 R:0 G:0 B:0 , Single z : 1 , Int32 stencil : 0 ) Clear ( IntPtr devicePointer : 147414976 , Int32 count : 0 , IntPtr rects : ( Empty ) , ClearFlags flags : Target , ColorBGRA color : A:0 R:0 G:0 B:0 , Single z : 1 , Int32 stencil : 0 ) Clear ( IntPtr devicePointer : 147414976 , Int32 count : 0 , IntPtr rects : ( Empty ) , ClearFlags flags : ZBuffer , ColorBGRA color : A:0 R:0 G:0 B:0 , Single z : 1 , Int32 stencil : 0 ) BeginScene ( IntPtr devicePointer : 147414976 ) private Result Clear ( IntPtr devicePointer , int count , IntPtr rects , ClearFlags flags , ColorBGRA color , float z , int stencil ) { try { var structSize = Marshal.SizeOf ( typeof ( Rectangle ) ) ; var structs = new Rectangle [ count ] ; for ( int i = 0 ; i < count ; i++ ) { structs [ i ] = ( Rectangle ) Marshal.PtrToStructure ( rects , typeof ( Rectangle ) ) ; } // Seems to work fine , not sure why it does n't work for CreateVertexDeclaration var rectangles = structs ; Log.LogMethodSignatureTypesAndValues ( devicePointer , count , rectangles.PrintTypesNamesValues ( ) , flags , color , z , stencil ) ; GetOrCreateDevice ( devicePointer ) ; if ( rectangles.Length == 0 ) Device.Clear ( flags , color , z , stencil ) ; else Device.Clear ( flags , color , z , stencil , rectangles ) ; } catch ( Exception ex ) { Log.Warn ( ex.ToString ( ) ) ; } return Result.Ok ; }"
"{ `` $ type '' : `` PROJECTNAME.Api.Models.Directory.DtoName , PROJECTNAME.Api '' , `` id '' : 67 , `` offices '' : [ { `` $ type '' : `` PROJECTNAME.Api.Models.Directory.AnotherDtoName , PROJECTNAME.Api '' , `` officeName '' : `` FOO '' } ] } , { `` $ type '' : `` Models.Directory.DtoName '' , `` id '' : 67 , `` offices '' : [ { `` $ type '' : `` Models.Directory.AnotherDtoName '' , `` officeName '' : `` FOO '' } ] } , protected override IList < JsonProperty > CreateProperties ( Type type , MemberSerialization memberSerialization ) { var assemblyName = type.Assembly.GetName ( ) .Name ; var typeName = type.FullName.Substring ( assemblyName.Length + 1 ) ; var typeProperty = new JsonProperty ( ) { PropertyName = `` $ type '' , PropertyType = typeof ( string ) , Readable = true , Writable = true , ValueProvider = null // ? ? ? ? ? typeName } ; var retval = base.CreateProperties ( type , memberSerialization ) ; retval.Add ( typeProperty ) ; return retval ; }"
ConfigurationElementCollection
"private void Quit_Click ( object sender , RoutedEventArgs e ) //close the application { //kill cinector after all import is done Process [ ] processes = Process.GetProcesses ( ) ; for ( int i = 0 ; i < processes.Count ( ) ; i++ ) { if ( processes [ i ] .ProcessName.ToLower ( ) .Contains ( `` CinectorProcess '' ) ) { processes [ i ] .Kill ( ) ; } } //also kill powerpoint just in case for ( int i = 0 ; i < processes.Count ( ) ; i++ ) { if ( processes [ i ] .ProcessName.ToLower ( ) .Contains ( `` powerpnt '' ) ) { processes [ i ] .Kill ( ) ; } } //kill the engine ShutdownEngine ( ) ; //kill the main app App.Current.Shutdown ( ) ; //also delete all three folders //slides_png_prev if ( Directory.Exists ( slides_png_prev ) ) { Thumbnails = null ; Directory.Delete ( slides_png_prev , true ) ; } //slides_png if ( Directory.Exists ( slides_png ) ) { Directory.Delete ( slides_png , true ) ; } //slides_png_prev_seleect if ( Directory.Exists ( slides_png_prev_seleect ) ) { Directory.Delete ( slides_png_prev_seleect , true ) ; } }"
"// One MySqlConnection instance for whole program . lock ( thisLock ) { var cmd = connection.CreateCommand ( ) ; cmd.CommandText = `` SELECT Count ( * ) FROM logins WHERE username = @ user AND password = @ pass '' ; cmd.Parameters.AddWithValue ( `` @ user '' , username ) ; cmd.Parameters.AddWithValue ( `` @ pass '' , password ) ; var count = int.Parse ( cmd.ExecuteScalar ( ) .ToString ( ) ) ; return count > 0 ; } using ( MySqlConnection connection = new MySqlConnection ( connectionString ) ) { connection.Open ( ) ; // This takes +- 35ms and makes worse performance than locks using ( MySqlCommand cmd = connection.CreateCommand ( ) ) { cmd.CommandText = `` SELECT Count ( * ) FROM logins WHERE username = @ user AND password = @ pass '' ; cmd.Parameters.AddWithValue ( `` @ user '' , username ) ; cmd.Parameters.AddWithValue ( `` @ pass '' , password ) ; int count = int.Parse ( cmd.ExecuteScalar ( ) .ToString ( ) ) ; return count > 0 ; } }"
dotnet new library -lang F # -o .\ClassLibrarydotnet new console -lang C # -o .\MainProgramdotnet new slndotnet sln add .\ClassLibrary\ClassLibrary.fsprojdotnet sln add .\MainProgram\MainProgram.csproj dotnet add reference ..\ClassLibrary\ClassLibrary.fsproj static void Main ( string [ ] args ) { ClassLibrary.Say.hello ( `` world . `` ) ; } dotnet restoredotnet run -p .\MainProgram\MainProgram.csproj
"using System ; class Program { static void Main ( ) { var type1 = typeof ( int [ ] ) ; var type2 = Array.CreateInstance ( typeof ( int ) , new [ ] { 1 } , new [ ] { 1 } ) .GetType ( ) ; Console.WriteLine ( type1 == type2 ) ; // False Console.WriteLine ( IsSingleDimensionalZeroBasedArray ( type1 ) ) ; // True Console.WriteLine ( IsSingleDimensionalZeroBasedArray ( type2 ) ) ; // This should be False } static bool IsSingleDimensionalZeroBasedArray ( Type type ) { // How do I fix this implementation ? return type ! = null & & type.IsArray & & type.GetArrayRank ( ) == 1 ; } }"
"[ System.Diagnostics.DebuggerDisplay ( `` Length= { Length } '' ) ] public class LinkedList < T > { LList < T > .Cell head ; // ... . public void Prepend ( T item ) { LList < T > .Cell oldHead ; LList < T > .Cell newHead ; do { oldHead = head ; newHead = LList < T > .Cons ( item , oldHead ) ; } while ( ! Object.ReferenceEquals ( Interlocked.CompareExchange ( ref head , newHead , oldHead ) , oldHead ) ) ; } // ... . }"
"throw new Exception ( $ '' One or more errors occurred during removal of the company : { Environment.NewLine } { Environment.NewLine } { exc.Message } '' ) ; moreCompanies = $ '' { moreCompanies } , { databaseName } '' ;"
var path= '' % TEMP % \myapplication\data '' ;
"var targets = new string [ ] { `` one '' , `` two '' , `` three '' } ; var list = new List < string > ( ) ; list.Add ( `` one little pony '' ) ; list.Add ( `` one two little pony '' ) ; list.Add ( `` one two three little pony '' ) ; list.Add ( `` little pony '' ) ; x = x.OrderByDescending ( u = > targets.Any ( u.Contains ) ) .ToList ( ) ; foreach ( var item in list ) { Debug.Writeline ( item ) ; } one two three little ponyone two little ponyone little ponylittle pony"
MyClass myclass = 3 ;
"public enum MyEnum { One , } public class ValueContainer { public object Value ; } class Program { static void Main ( string [ ] args ) { XmlSerializer newSerializer = XmlSerializer.FromTypes ( new [ ] { typeof ( ValueContainer ) } ) [ 0 ] ; var instance = new ValueContainer ( ) ; instance.Value = MyEnum.One ; using ( var memoryStream = new MemoryStream ( ) ) { newSerializer.Serialize ( memoryStream , instance ) ; } } } System.InvalidOperationException HResult=0x80131509 Message=There was an error generating the XML document . Source=System.Private.Xml StackTrace : at System.Xml.Serialization.XmlSerializer.Serialize ( XmlWriter xmlWriter , Object o , XmlSerializerNamespaces namespaces , String encodingStyle , String id ) at System.Xml.Serialization.XmlSerializer.Serialize ( Stream stream , Object o , XmlSerializerNamespaces namespaces ) at System.Xml.Serialization.XmlSerializer.Serialize ( Stream stream , Object o ) at CoreXml.Program.Main ( String [ ] args ) in C : \Users\vchel\source\repos\CoreXml\CoreXml\Program.cs : line 28Inner Exception 1 : InvalidOperationException : The type CoreXml.MyEnum may not be used in this context . < Value xsi : type= '' xsd : int '' > 0 < /Value >"
"System.AggregateException : One or more errors occurred . -- - > System.ArgumentOutOfRangeException : Index was out of range . Must be non-negative and less than the size of the collection . Parameter name : index at System.Collections.Generic.List ` 1.RemoveAt ( Int32 index ) at Ninject.KernelBase.Dispose ( Boolean disposing ) //Code that creates and disposes the Ninject kernelusing ( ninjectInstance = new NinjectInstance ( ) ) { using ( var unitOfWork = ninjectInstance.Kernel.Get < NinjectUnitOfWork > ( ) ) { Init ( ) ; continueValidation = Validate ( tran , ofr ) ; } } public class NinjectInstance : IDisposable { public IKernel Kernel { get ; private set ; } public NinjectInstance ( ) { Kernel = new StandardKernel ( new NinjectSettings ( ) { AllowNullInjection = true } , new NinjectUnitOfWorkConfigModule ( ) ) ; } public void Dispose ( ) { if ( Kernel ! = null ) { Kernel.Dispose ( ) ; } } }"
"this.Bind < IRepository > ( ) .To < EntityFrameworkRepository < MyDatabaseEntities > > ( ) ; this.Bind < IAuthenticationService > ( ) .To < MyAuthenticationService > ( ) . WithConstructorArgument ( `` myRepository '' , ctx = > ctx.Kernel.Get < IRepository ( ) ) ;"
"var decryptedAesKey = Encoding.UTF8.GetString ( rsaCng.Decrypt ( Convert.FromBase64String ( request.k ) , RSAEncryptionPadding.Pkcs1 ) ) ; encrypt ( requestObj : any ) : any { var rsaEncrypt = new JsEncryptModule.JSEncrypt ( ) ; var key = this.generateAesKey ( 32 ) ; //secret keyvar iv = this.generateAesKey ( 16 ) ; //16 digitvar stringifiedRequest = CryptoJS.enc.Utf8.parse ( JSON.stringify ( requestObj ) ) ; var aesEncryptedRequest = CryptoJS.AES.encrypt ( stringifiedRequest , CryptoJS.enc.Utf8.parse ( key ) , { keySize : 128 / 8 , iv : CryptoJS.enc.Utf8.parse ( iv ) , padding : CryptoJS.pad.Pkcs7 , mode : CryptoJS.mode.CBC } ) ; rsaEncrypt.setPrivateKey ( this.publicPemKey ) ; var encryptedKey = rsaEncrypt.encrypt ( key ) ; var encryptedIV = rsaEncrypt.encrypt ( iv ) ; var encryptedRequestObj = { k : encryptedKey , v : encryptedIV , r : aesEncryptedRequest.toString ( ) } ; return encryptedRequestObj ; var decryptedAesKey = Encoding.UTF8.GetString ( rsaCng.Decrypt ( Convert.FromBase64String ( request.k ) , RSAEncryptionPadding.Pkcs1 ) ) ; var decryptedAesIV = Encoding.UTF8.GetString ( rsaCng.Decrypt ( Convert.FromBase64String ( request.v ) , RSAEncryptionPadding.Pkcs1 ) ) ; byte [ ] encryptedBytes = request.r ; AesCryptoServiceProvider aes = new AesCryptoServiceProvider ( ) { Mode = CipherMode.CBC , Padding = PaddingMode.PKCS7 , Key = Encoding.UTF8.GetBytes ( decryptedAesKey ) , IV = Encoding.UTF8.GetBytes ( decryptedAesIV ) } ; ICryptoTransform crypto = aes.CreateDecryptor ( aes.Key , aes.IV ) ; byte [ ] secret = crypto.TransformFinalBlock ( encryptedBytes , 0 , encryptedBytes.Length ) ; crypto.Dispose ( ) ; requestJson = Encoding.UTF8.GetString ( secret ) ; { `` k '' : '' L+ikMb/JGvFJmhBpADMGTVLFlkHOe69dZUVSQ5r7yHCvWSwY2x6KMR274ByflF0lDMYdCmywo+Nfq6JUybRctDqmAp8UFHXnhwBAv49d99mF5x2yGbJr/j0cn6EZyhweNK4p97i5yMM6MQtluZTIErpsUa22Cajtj8F+xl0jJPUMXIf8cs2X+ooFr5VP/p/vlbPmnEY3K/hMCRZRdXMkEqaCWoA5EnYMTQABtRXPZWgLSQwJpr4dqEAhGCBtga1AGsKF3dQCsKO92NYyst0ngkBiKwFNfy1QDwbk4SzKAKeBckaY17SHt526NMvpEv08BGV6btBxcM+ypsmpB4o0 '' , '' v '' : '' LIndJOjUgKHDlXqwpg7uSmDuut3oi5z9L/GKm2KgU7P2EXmf/JIpXM0JgpTXPJL7wUTndq3F9UMlMdU70JBOV56x/4uIBRbHbyvaG2JZYxbBZblwyYgdo1ZcK1OSE4k5oesQmMEGNEk9RVu+EZO4xAme6+mlyd2/Y/709jaC90PuiOG/k/4JMTTI/2q4s7tk6IgSxLBT8ZiOtgJVGdasSaAksEBMRHyUkzAIr5tSUw1VXedwJFPfwQT2nOD5dU2cxiNJKOwtO9uAYXly0U0FDoa/nkWskca8zaU+4EiPikJ6Km7phViH9JvwZFgHhBj+8FM6Jof+AdrY3q1dcMLFlg== '' , '' r '' : '' OJnA3wFoKKG+iu4FciXyJg== '' } { `` k '' : '' uW8d7vIzlgkEkKTkDnHbBZeqKwdgoG+1BVZ/NUiC0pZ/LqZM9aUasQSx+qDg+X50ur30uRnEyAyIZXruYeHQb8cacx5mvr9LWLud+wueJXsOlEEdocD/4A1DfE9TDFdnTaVcMSIwhSVlLPUjO7ubJdANY9yK4S+vb0IyPbsrYpAT7ho01mDkvsH1rZsId/TmzQadmsGhThowu+mrQlz78rrdlN8nI5LnUQHXRNWMUgBvuteTpVBmyrfnIELIKoo/jI6Nj4rGPQBf7+2OOoZPs0Y1GtjXxUCTAt7madNLKSOdaPjdWjaOfGSwnymDNeEFyJQOmAwHZoOGYNd2B/UhQQ== '' , '' v '' : '' IimiJFcKv5ZHWHljJixX0LUgV4I2GWAWPbk7dWHVhwmHEhTHA/hCdih/E1wiWFS+0KaL05ZobiZInyK7gCwYPHaz0aRCSQtVeBPiFg4f7L0gwfvk1GHwJ1wZjqNJZaYf0elXJzc2l5BwN+aXNWaNJDPA7M6kfK6UPkq84IV3ohCQcTuC8zPM7aMJHxpz9IudcrMmYIkeqrj9Do88CkTLv8yg5hk3EASPk9HqsUieuQixggv/8ZlHnp00iftc62LJlIuCkGn4WR3FkMdFdqpKXf6Ebj8PU1HOmokEtKtYJiOZ5JxieZO5Pnd+ez6sO7khIbdRFDhAQ20chsxKUypezw== '' , '' r '' : '' 2mbUgU44JFFDlWu8As2RIw== '' }"
"[ Fact ] public void UniTest1 ( ) { var observable = new ReplaySubject < string > ( ) ; observable.OnNext ( `` a , b '' ) ; observable.OnNext ( `` c , d , e '' ) ; observable.OnCompleted ( ) ; var result = new List < string [ ] > ( ) ; observable .SelectMany ( x = > x.Split ( ' , ' ) ) .Select ( x = > x.ToUpper ( ) ) .ToArray ( ) // How to collect an IEnumerable for each item here ? .Do ( s = > result.Add ( s ) ) .Subscribe ( ) ; // Here , result is actually { { `` A '' , '' B '' , '' C '' , '' D '' , '' E '' } } , I need { { `` A '' , '' B '' } , { `` C '' , '' D '' , '' E '' } } Assert.Equal ( 2 , result.Count ) ; Assert.Equal ( `` A '' , result [ 0 ] [ 0 ] ) ; Assert.Equal ( `` B '' , result [ 0 ] [ 1 ] ) ; Assert.Equal ( `` C '' , result [ 1 ] [ 0 ] ) ; Assert.Equal ( `` D '' , result [ 1 ] [ 1 ] ) ; Assert.Equal ( `` E '' , result [ 1 ] [ 2 ] ) ; } [ Fact ] public void UniTest2 ( ) { var observable = new ReplaySubject < string > ( ) ; observable.OnNext ( `` a , b '' ) ; observable.OnNext ( `` c , d , e '' ) ; observable.OnCompleted ( ) ; var result = new List < string [ ] > ( ) ; observable .Select ( x = > x.Split ( ' , ' ) .Select ( s = > s.ToUpper ( ) ) .ToArray ( ) ) .Do ( s = > result.Add ( s ) ) .Subscribe ( ) ; // Result is as expected : { { `` A '' , '' B '' } , { `` C '' , '' D '' , '' E '' } } Assert.Equal ( 2 , result.Count ) ; Assert.Equal ( `` A '' , result [ 0 ] [ 0 ] ) ; Assert.Equal ( `` B '' , result [ 0 ] [ 1 ] ) ; Assert.Equal ( `` C '' , result [ 1 ] [ 0 ] ) ; Assert.Equal ( `` D '' , result [ 1 ] [ 1 ] ) ; Assert.Equal ( `` E '' , result [ 1 ] [ 2 ] ) ; }"
public class Example { private readonly SyncLock _padlock ; public Example ( ) { _padlock = new SyncLock ( ) ; } public void ConcurrentMethod ( ) { using ( _padlock.Lock ( ) ) { // Now own the padlock - do concurrent stuff } } } var example = new Example ( ) ; new Thread ( example.ConcurrentMethod ) .Start ( ) ; public Example ( ) { _padlock = new SyncLock ( ) ; Thread.MemoryBarrier ( ) ; } var example = new Example ( ) ; ThreadPool.QueueUserWorkItem ( s = > example.ConcurrentMethod ( ) ) ;
"internal abstract class Activity { protected Form myForm ; private static Activity myCurrentActivity = null ; private static Activity myNextActivity = null ; internal static void LoadNext ( Activity nextActivity ) { myNextActivity = nextActivity ; if ( myNextActivity ! = null ) { myNextActivity.Show ( ) ; if ( myCurrentActivity ! = null ) { myCurrentActivity.Close ( ) ; myCurrentActivity = null ; } myCurrentActivity = myNextActivity ; myNextActivity = null ; } } internal void Show ( ) { //PROBLEM IS HERE Application.Run ( myForm ) ; //myForm.Show ( ) ; //myForm.ShowDialog ( ) ; // } internal void Close ( ) { myForm.Close ( ) ; } internal void GenerateForm ( ) { ///Code that uses the Layout class to create a form , and then stores it in myForm //then attaches click handlers on all the clickable controls in the form //it is besides the point in this problem } protected abstract void Click ( Control control ) ; //this receives all the click events from all the controls in the form //it is besides the point in this problem } Activity.LoadNext ( new ACLogIn ) ;"
public interface IVehicleService { void ServiceVehicle ( Vehicle vehicle ) ; } public class CarService : IVehicleService { void ServiceVehicle ( Vehicle vehicle ) { if ( ! ( vehicle is Car ) ) throw new Exception ( `` This service only services cars '' ) //logic to service the car goes here } } public class VehicleServiceFactory { public IVehicleService GetVehicleService ( Vehicle vehicle ) { if ( vehicle is Car ) { return new CarService ( ) ; } if ( vehicle is Truck ) { return new TruckService ( ) ; } throw new NotSupportedException ( `` Vehicle not supported '' ) ; } } public interface IVehicleService < T > where T : Vehicle { void ServiceVehicle ( T vehicle ) ; } public class CarService : IVehicleService < Car > { void ServiceVehicle ( Car vehicle ) { //this is better as we no longer need to check if vehicle is a car //logic to service the car goes here } } public class VehicleServiceFactory { public IVehicleService < T > GetVehicleService < T > ( T vehicle ) where T : Vehicle { if ( vehicle is Car ) { return new CarService ( ) ; } if ( vehicle is Truck ) { return new TruckService ( ) ; } throw new NotSupportedException ( `` Vehicle not supported '' ) ; } }
"protected void Page_Load ( object sender , EventArgs e ) { Response.Write ( Session.SessionID ) ; }"
"IQuery theQueryToRun ; var query = from SectionA a in dataContext.sectionA join SectionD b in dataContext.sectionB on a.A03 equals b.A03 ... . join ... .query = query.Where ( theQueryToRun.GetWhereClause ( ... ) ) ; query = query.OrderBy ( theQueryToRun.GetOrderByClause ( ) ) ; return query.ToList ( ) ; SELECT a.a01 , a.a01a , a.a01b , a.a02 , a.a03 , a11 , a12 , a12a , a12b , a12c , a21 , a22 , a23 , a24 , a25 , a31 , a31a , a31b , a32 , a33 , a33a , a33b , a33c , a34 , a41 , a42 , a43 , a51 , a52 , a53 , a54 , a54a , a54b , a54c , b11 , b12 , b13 , b14 , b15 , z0 , a.prog , a.utente , c11 , d11 , d13 , d14 , d14a , d14b , d14c , d15 , d16 , d17 , d18 , d19 , d21 , d22 , d23 , d31 , d32 , d41 , d42 , d43 , d44 , d45 , z1FROM sezione_a a INNER JOIN sezione_d d ON a.a03 = d.a03 AND a.utente = d.utenteWHERE ( ( a.a42 IN ( ' 0 ' , ' 1 ' , `` ) AND d.d21 IN ( SELECT codice FROM sottogruppi WHERE flagpf = 1 ) ) AND ( d.d11 IS NOT NULL AND d.d11 < > `` ) AND d.d45 IN ( ' 1 ' , ' 2 ' ) AND ( ( d.d18 > = '19000101 ' AND d.d18 < = a.a21 ) AND ( d.d43 > = '19000101 ' AND d.d43 < = a.a21 ) AND d.d43 > = d.d18 ) AND ( Date_add ( Str_to_date ( d.d43 , ' % Y % m % d ' ) , INTERVAL 10 year ) > Str_to_date ( a.a21 , ' % Y % m % d ' ) AND Date_add ( Str_to_date ( d.d43 , ' % Y % m % d ' ) , INTERVAL 10 year ) < Now ( ) ) ) AND ( ( a.a21 BETWEEN ' @ @ datamin ' AND ' @ @ datamax ' ) AND a.utente = @ @ user AND a.a52 NOT IN @ @ a52 ) ORDER BY a.a11 ASC , d.d11 ASC public IList < QueryRow > Run ( Models.auitool2014Entities dataContext , int aUserId , DateTime ? dataInizioControllo , DateTime ? dataFineControllo , string [ ] a52Exclude , bool codifiche2014 , out long totalCount ) { string sysdate10String = DateTime.Now.AddYears ( -10 ) .ToString ( `` yyyyMMdd '' , CultureInfo.InvariantCulture ) ; var inner = codifiche2014 ? from Sottogruppo sg in dataContext.sottogruppi where sg.flagpf select sg.codice : from Sottogruppo2015 sg in dataContext.sottogruppi2015 where sg.flagpf select sg.codice ; var q = dataContext.sezione_a.Join ( dataContext.sezione_d , a = > new { A03 = a.A03 , User = a.utente } , d = > new { A03 = d.A03 , User = d.utente } , ( a , d ) = > new SezioneJoin { A = a , D = d } ) .Where ( x = > x.A.utente == aUserId & & //Flusso utente new string [ ] { `` 0 '' , `` 1 '' , String.Empty } .Contains ( x.A.A42 ) & & // A42 IN ( 0,1 , '' ) inner.Contains ( x.D.D21 ) & & //D.D21 IN ( SELECT CODICE FROM SOTTOGRUPPPI.A..A . WHERE FLAGPF = 1 ) ( x.D.D11 ! = null & & x.D.D11 ! = String.Empty ) & & //D11 IS NOT NULL AND D11 < > `` new string [ ] { `` 1 '' , `` 2 '' } .Contains ( x.D.D45 ) & & //D45 IN ( ' 1 ' , ' 2 ' ) ( ( x.D.D18.CompareTo ( `` 19000101 '' ) > = 0 & & x.D.D18.CompareTo ( x.A.A21 ) < = 0 ) & & //D18 > = '1900101 ' AND D18 < = A21 ( x.D.D43.CompareTo ( `` 19000101 '' ) > = 0 & & x.D.D43.CompareTo ( x.D.D18 ) > = 0 ) // D43 > = '19000101 ' AND D43 > = D18 ) & & x.D.D43.CompareTo ( sysdate10String ) < 0 // D43 < = ( SYSDATE ( ) - 10 YEARS ) ) ; if ( dataInizioControllo ! = null ) { string dataInzio = dataInizioControllo.Value.ToString ( `` yyyyMMdd '' ) ; q = q.Where ( x = > x.A.A21.CompareTo ( dataInzio ) > = 0 ) ; } if ( dataFineControllo ! = null ) { string dataFine = dataFineControllo.Value.ToString ( `` yyyyMMdd '' ) ; q = q.Where ( x = > x.A.A21.CompareTo ( dataFine ) < = 0 ) ; } if ( a52Exclude ! = null ) q = q.Where ( x = > ! a52Exclude.Contains ( x.A.A52 ) ) ; q = q .OrderBy ( x = > x.A.A11 ) .OrderBy ( x = > x.D.D11 ) ; totalCount = q.Count ( ) ; return q.Take ( Parameters.ROW_LIMIT ) .Select ( j = > new QueryRow { A01 = j.A.A01 , A01a = j.A.A01a , A01b = j.A.A01b , A02 = j.A.A02 , A03 = j.A.A03 , A11 = j.A.A11 , A12 = j.A.A12 , A12a = j.A.A12a , A12b = j.A.A12b , A12c = j.A.A12c , ... ... . redacted for brevity D43 = j.D.D43 , D44 = j.D.D44 , D45 = j.D.D45 , Z1 = j.D.Z1 } ) .ToList ( ) ; } ( x ) = > new string [ ] { `` 0 '' , `` 1 '' , String.Empty } .Contains ( x.A.A42 ) & & inner.Contains ( x.D.D21 ) & & ( x.D.D11 ! = null & & x.D.D11 ! = String.Empty ) & & new string [ ] { `` 1 '' , `` 2 '' } .Contains ( x.D.D45 ) & & ( ( x.D.D18.CompareTo ( `` 19000101 '' ) > = 0 & & x.D.D18.CompareTo ( x.A.A21 ) < = 0 ) & & //D18 > = '1900101 ' AND D18 < = A21 ( x.D.D43.CompareTo ( `` 19000101 '' ) > = 0 & & x.D.D43.CompareTo ( x.D.D18 ) > = 0 ) // D43 > = '19000101 ' ) & & x.D.D43.CompareTo ( `` 20050623 '' ) < 0"
"using System ; namespace InheritanceTest { public class BaseClass { public bool Transmit ( ) { throw new NotImplementedException ( ) ; } } public class InheritedClass : BaseClass { public new bool Transmit ( ) { Console.WriteLine ( `` Success ! `` ) ; return true ; } } } # # setupimport clrimport osclr.AddReference ( os.getcwd ( ) + '\\InheritanceTest.dll ' ) import InheritanceTest # # method testbase_class = InheritanceTest.BaseClass ( ) base_class.Transmit ( ) # throws a NotImplementedException as expectedinherited_class = InheritanceTest.InheritedClass ( ) inherited_class.Transmit ( ) # still throws a NotImplementedException , although it should call InheritedClass.Transmit"
"public class MyClass { private void AddBasicData ( Receiver receiver ) { var aHelper = new AHelper ( ) ; var bHelper = new BHelper ( ) ; var cHelper = new CHelper ( ) ; receiver.ObjA = aHelper.GetBasic ( ) ; receiver.ObjB = bHelper.GetBasic ( ) ; receiver.ObjC = cHelper.GetBasic ( ) ; } private void AddExistingData ( Receiver receiver ) { var aHelper = new AHelper ( ) ; var bHelper = new BHelper ( ) ; var cHelper = new CHelper ( ) ; receiver.ObjA = aHelper.GetExisting ( ) ; receiver.ObjB = bHelper.GetExisting ( ) ; receiver.ObjC = cHelper.GetExisting ( ) ; } } public class AHelper : Helper < A > { } public class BHelper : Helper < B > { } public class CHelper : Helper < C > { } public class Helper < T > : IHelper < T > where T : IMyObj { public T GetBasic ( ) { ... } public T GetExisting ( ) { ... } } public interface IHelper < T > { T GetBasic ( ) ; T GetExisting ( ) ; } public class A : IMyObj { } public class B : IMyObj { } public class C : IMyObj { } public interface IMyObj { } public class Receiver { public A ObjA { get ; set ; } public B ObjB { get ; set ; } public C ObjC { get ; set ; } } public class MyClass { private void AddBasicData ( Receiver receiver ) { Func < Helper < IMyObj > , IMyObj > func = x = > x.GetBasic ( ) ; AddData ( receiver , func ) ; } private void AddExistingData ( Receiver receiver ) { Func < Helper < IMyObj > , IMyObj > func = x = > x.GetExisting ( ) ; AddData ( receiver , func ) ; } private void AddData ( Receiver receiver , Func < Helper < IMyObj > , IMyObj > func ) { var aHelper = new AHelper ( ) ; var bHelper = new BHelper ( ) ; var cHelper = new CHelper ( ) ; receiver.ObjA = func ( aHelper ) ; receiver.ObjB = func ( bHelper ) ; receiver.ObjC = func ( cHelper ) ; } }"
"_myQueueManager = new MQQueueManager ( queueManagerName , properties ) ;"
"SELECT [ Key ] , IdFROM LocalizationKeys AS lkWHERE NOT EXISTS ( SELECT 1 FROM Languages AS l JOIN LocalizationValues AS lv ON l.Id = lv.LanguageId WHERE l.Title = 'en-US ' AND lv.LocalizationKeyId = lk.Id ) var result = ( from lk in localizationKey where ! ( from l in lang join lv in localizationValue on l.Id equals lv.LanguageId where l.Title == `` en-US '' & & lv.LocalizationKeyId == lk.Id select 1 ) .FirstOrDefault ( ) select lk ) .ToList ( ) ;"
"cmd.CommandText = `` SELECT top 10 UserID , UserName `` + `` FROM Users `` + `` INNER JOIN SomeOtherTable ON xxxxx `` + `` WHERE UserID IN ( blablabla ) '' ; cmd.CommandText = @ '' SELECT top 10 UserID , UserName FROM Users INNER JOIN SomeOtherTable ON xxxxx WHERE UserID IN ( blablabla ) '' ;"
"using System ; using System.Diagnostics ; using System.Threading ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace SynContextIfIDontTouchUIInWorkerThread { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } # pragma warning disable 1998 private async void button1_Click ( object sender , EventArgs e ) { // Nicely prints out the WindowsForms.SynchronizationContext // because we *are* indeed on the UI thread this.Text = SynchronizationContext.Current.GetType ( ) .Name ; Thread.CurrentThread.Name = `` UI Thread '' ; Debug.Print ( Thread.CurrentThread.Name ) ; var t = FooAsync ( ) ; // CompletedSynchronously is false , // so the other work was indeed run on a worker thread button1.Text = ( t as IAsyncResult ) .CompletedSynchronously ? `` Sync '' : `` Async '' ; // block the UI thread // Code freezes here var s = t.Result ; button1.Text = s ; } # pragma warning restore 1998 public async Task < string > FooAsync ( ) { return await Task.Run ( ( ) = > { // Whether or not I touch the UI in this worker // thread , the current sync context returns null . // Why is that ? // However , it looks like this thread is posting // something to the UI thread and since the UI // thread is also waiting for this guy to complete // it results in a dead lock . Why is that when // I am not even touching the UI here . Why // is this guy assuming that I have to post // something to message queue to run on the UI thread ? // Could it be that this guy is actually running on // the UI thread ? var ctx = SynchronizationContext.Current ; Debugger.Break ( ) ; // Current thread name evaluates to null // This clearly means it is a thread pool thread // Then why is the synchronization context null // when I uncomment out the line that changes the text // of button1 ? Debug.Print ( Thread.CurrentThread.Name ) ; if ( ctx ! = null ) { // Post to Windows message queue using the UI thread 's sync ctx // button1.Text = ctx.GetType ( ) .Name ; Debugger.Break ( ) ; } return `` Hello '' ; } ) ; } } }"
"var cons = ( from c in dc.Consignments join p in dc.PODs on c.IntConNo equals p.Consignment into pg join d in dc.Depots on c.DeliveryDepot equals d.Letter join sl in dc.Accounts on c.Customer equals sl.LegacyID join ss in dc.Accounts on sl.InvoiceAccount equals ss.LegacyID join su in dc.Accounts on c.Subcontractor equals su.Name into sug join sub in dc.Accountsubbies on ss.ID equals sub.AccountID into subg where ( sug.FirstOrDefault ( ) == null || sug.FirstOrDefault ( ) .Customer == false ) select new { ID = c.ID , IntConNo = c.IntConNo , LegacyID = c.LegacyID , PODs = pg.DefaultIfEmpty ( ) , TripNumber = c.TripNumber , DropSequence = c.DropSequence , TripDate = c.TripDate , Depot = d.Name , CustomerName = c.Customer , CustomerReference = c.CustomerReference , DeliveryName = c.DeliveryName , DeliveryTown = c.DeliveryTown , DeliveryPostcode = c.DeliveryPostcode , VehicleText = c.VehicleReg + c.Subcontractor , SubbieID = sug.DefaultIfEmpty ( ) .FirstOrDefault ( ) .ID.ToString ( ) , SubbieList = subg.DefaultIfEmpty ( ) , ScanType = ss.PODScanning == null ? 0 : ss.PODScanning } ) ; { SELECT [ t0 ] . [ ID ] , [ t0 ] . [ IntConNo ] , [ t0 ] . [ LegacyID ] , [ t6 ] . [ test ] , [ t6 ] . [ ID ] AS [ ID2 ] , [ t6 ] . [ Consignment ] , [ t6 ] . [ Status ] , [ t6 ] . [ NTConsignment ] , [ t6 ] . [ CustomerRef ] , [ t6 ] . [ Timestamp ] , [ t6 ] . [ SignedBy ] , [ t6 ] . [ Clause ] , [ t6 ] . [ BarcodeNumber ] , [ t6 ] . [ MainRef ] , [ t6 ] . [ Notes ] , [ t6 ] . [ ConsignmentRef ] , [ t6 ] . [ PODedBy ] , ( SELECT COUNT ( * ) FROM ( SELECT NULL AS [ EMPTY ] ) AS [ t10 ] LEFT OUTER JOIN ( SELECT NULL AS [ EMPTY ] FROM [ dbo ] . [ PODs ] AS [ t11 ] WHERE [ t0 ] . [ IntConNo ] = [ t11 ] . [ Consignment ] ) AS [ t12 ] ON 1=1 ) AS [ value ] , [ t0 ] . [ TripNumber ] , [ t0 ] . [ DropSequence ] , [ t0 ] . [ TripDate ] , [ t1 ] . [ Name ] AS [ Depot ] , [ t0 ] . [ Customer ] AS [ CustomerName ] , [ t0 ] . [ CustomerReference ] , [ t0 ] . [ DeliveryName ] , [ t0 ] . [ DeliveryTown ] , [ t0 ] . [ DeliveryPostcode ] , [ t0 ] . [ VehicleReg ] + [ t0 ] . [ Subcontractor ] AS [ VehicleText ] , CONVERT ( NVarChar , ( SELECT [ t16 ] . [ ID ] FROM ( SELECT TOP ( 1 ) [ t15 ] . [ ID ] FROM ( SELECT NULL AS [ EMPTY ] ) AS [ t13 ] LEFT OUTER JOIN ( SELECT [ t14 ] . [ ID ] FROM [ dbo ] . [ Account ] AS [ t14 ] WHERE [ t0 ] . [ Subcontractor ] = [ t14 ] . [ Name ] ) AS [ t15 ] ON 1=1 ORDER BY [ t15 ] . [ ID ] ) AS [ t16 ] ) ) AS [ SubbieID ] , ( CASE WHEN [ t3 ] . [ PODScanning ] IS NULL THEN @ p0 ELSE [ t3 ] . [ PODScanning ] END ) AS [ ScanType ] , [ t3 ] . [ ID ] AS [ ID3 ] FROM [ dbo ] . [ Consignments ] AS [ t0 ] INNER JOIN [ dbo ] . [ Depots ] AS [ t1 ] ON [ t0 ] . [ DeliveryDepot ] = [ t1 ] . [ Letter ] INNER JOIN [ dbo ] . [ Account ] AS [ t2 ] ON [ t0 ] . [ Customer ] = [ t2 ] . [ LegacyID ] INNER JOIN [ dbo ] . [ Account ] AS [ t3 ] ON [ t2 ] . [ InvoiceAccount ] = [ t3 ] . [ LegacyID ] LEFT OUTER JOIN ( ( SELECT NULL AS [ EMPTY ] ) AS [ t4 ] LEFT OUTER JOIN ( SELECT 1 AS [ test ] , [ t5 ] . [ ID ] , [ t5 ] . [ Consignment ] , [ t5 ] . [ Status ] , [ t5 ] . [ NTConsignment ] , [ t5 ] . [ CustomerRef ] , [ t5 ] . [ Timestamp ] , [ t5 ] . [ SignedBy ] , [ t5 ] . [ Clause ] , [ t5 ] . [ BarcodeNumber ] , [ t5 ] . [ MainRef ] , [ t5 ] . [ Notes ] , [ t5 ] . [ ConsignmentRef ] , [ t5 ] . [ PODedBy ] FROM [ dbo ] . [ PODs ] AS [ t5 ] ) AS [ t6 ] ON 1=1 ) ON [ t0 ] . [ IntConNo ] = [ t6 ] . [ Consignment ] WHERE ( ( NOT ( EXISTS ( SELECT TOP ( 1 ) NULL AS [ EMPTY ] FROM [ dbo ] . [ Account ] AS [ t7 ] WHERE [ t0 ] . [ Subcontractor ] = [ t7 ] . [ Name ] ORDER BY [ t7 ] . [ ID ] ) ) ) OR ( NOT ( ( ( SELECT [ t9 ] . [ Customer ] FROM ( SELECT TOP ( 1 ) [ t8 ] . [ Customer ] FROM [ dbo ] . [ Account ] AS [ t8 ] WHERE [ t0 ] . [ Subcontractor ] = [ t8 ] . [ Name ] ORDER BY [ t8 ] . [ ID ] ) AS [ t9 ] ) ) = 1 ) ) ) AND ( [ t2 ] . [ Customer ] = 1 ) AND ( [ t3 ] . [ Customer ] = 1 ) ORDER BY [ t0 ] . [ ID ] , [ t1 ] . [ ID ] , [ t2 ] . [ ID ] , [ t3 ] . [ ID ] , [ t6 ] . [ ID ] }"
if ( a==1 & & a==2 & & a==3 ) { Console.WriteLine ( `` Hurraa '' ) ; }
"var dt = DateTime.Now ; Console.WriteLine ( `` { 0 : MM/dd/yy } ... { 1 } '' , dt , string.Format ( `` { 0 : MM/dd/yy } '' , dt ) ) ; 06/17/14 ... 06/17/14 06/17/14 ... 06 17 14"
01 feb 2010feb 01 20102010 01 feb ... ...
"Excel.Worksheet sheet = Globals.ThisAddIn.Application.Worksheets [ `` Unique Hits Per URL '' ] ; Dictionary < int , string > ids = new Dictionary < int , string > ( ) ; object [ , ] cellRange = ( object [ , ] ) sheet.get_Range ( `` E : E '' ) .Cells.Value ; for ( int i = 1 ; i < cellRange.GetUpperBound ( 0 ) ; i++ ) if ( cellRange [ i , 1 ] ! = null ) ids.Add ( i , cellRange [ i , 1 ] .ToString ( ) ) ;"
"public static void ThrowIfNull ( this object value , string parameterName ) { if ( value == null ) { throw new ArgumentNullException ( parameterName ) ; } }"
[ Some3rdPartyAttribute ( `` ... '' ) ] [ RequiredAttribute ( `` ... ) ] public bool Example { get ; set ; } [ Some3rdPartyAttribute ( `` ... '' ) ] public bool Example { get ; set ; }
"2734000585 , IDR,04/04/2016,04/04/2016,0000000,1010 , SETOR TUNAI , '' 783275305006511 VENDY '' , , '' 820,000.00 '' , '' 5,820,000.00 '' using System ; using FileHelpers ; [ DelimitedRecord ( `` , '' ) ] public class ImporBii { public long RekNum ; public string Currency ; [ FieldConverter ( ConverterKind.Date , `` dd/MM/yyyy '' ) ] public DateTime TransDate ; [ FieldConverter ( ConverterKind.Date , `` dd/MM/yyyy '' ) ] public DateTime RecordDate ; public string Unused1 ; public int TransCode ; public string TransCodeStr ; public string Keterangan ; [ FieldConverter ( ConverterKind.Decimal , `` # , # # 0.00 '' ) ] public decimal Debet ; [ FieldConverter ( ConverterKind.Decimal , `` # , # # 0.00 '' ) ] public decimal Kredit ; [ FieldConverter ( ConverterKind.Decimal , `` # , # # 0.00 '' ) ] public decimal Saldo ; }"
"private async Task RunAsync ( TimeSpan delay , CancellationToken cancellationToken ) { using ( BlockingCollection < Task > jobcollection = new BlockingCollection < Task > ( ) ) { Task addingTask = Task.Run ( async ( ) = > { while ( true ) { DateTime utcNow = DateTime.UtcNow ; var jobs = Repository.GetAllJobs ( ) ; foreach ( var job in GetRootJobsDue ( jobs , utcNow ) ) { jobcollection.Add ( Task.Run ( ( ) = > RunJob ( job , jobs , cancellationToken , utcNow ) , cancellationToken ) , cancellationToken ) ; } await Task.Delay ( delay , cancellationToken ) ; } } , cancellationToken ) ; await Task.WhenAll ( jobcollection.GetConsumingEnumerable ( cancellationToken ) ) ; } }"
.carouselrightarrow { font-family : Material Icons ; font-size : 36px ; position : absolute ; top : 16px ; content : `` \e409 '' ; } < button id= '' add-to-favorites '' class= '' mdc-icon-button '' > < i class= '' material-icons mdc-icon-button__icon mdc-icon-button__icon -- on '' > favorite < /i > < i class= '' material-icons mdc-icon-button__icon '' > favorite_border < /i > < /button >
"int lx = 35 ; int ly = 50 ; int rx ; int ry ; int wx = Location.X + Width / 2 ; int wy = Location.Y + Height / 2 ; Rectangle bounds = Screen.FromControl ( this ) .Bounds ; // Calculate Xfloat tempX = ( mx - wx ) / ( float ) ( bounds.Width / 2 ) ; // Calculate Yfloat tempY = ( my - wy ) / ( float ) ( bounds.Height / 2 ) ; // Draw eyese.Graphics.FillEllipse ( Brushes.LightGray , 10 , 10 , 70 , 100 ) ; e.Graphics.FillEllipse ( Brushes.LightGray , 90 , 10 , 70 , 100 ) ; // Draw pupils ( this only draws the left one ) e.Graphics.FillEllipse ( Brushes.Black , lx += ( int ) ( 25 * tempX ) , ly += ( int ) ( 40 * tempY ) , 20 , 20 ) ; private void timer_Tick ( object sender , EventArgs e ) { mx = Cursor.Position.X ; my = Cursor.Position.Y ; Invalidate ( ) ; }"
"{ “ projects ” : [ “ src ” , “ test ” , “ C : \\path\\to\\other\\projects ” ] }"
"var ctx = new EventManagerDomainContext ( ) ; ctx.Events.Add ( newEvent ) ; ctx.SubmitChanges ( ( op ) = > { if ( ! op.HasError ) { NavigateToEditEvent ( newEvent.EventID ) ; } } , null ) ;"
"Dictionary < Type , Func < T > > TypeDictionary = new Dictionary < Type , Func < T > > ( ) /*Func < T > returns an object of the same type as the Key*/TypeDictionary.Add ( typeof ( int ) , ( ) = > 5 ) ; TypeDictionary.Add ( typeof ( string ) , ( ) = > `` Foo '' ) ; int Bar = TypeDictionary [ typeof ( int ) ] ( ) ; string Baz = TypeDictionary [ typeof ( string ) ] ( ) ;"
"public static bool IsInfinity ( this IEnumerable x ) { var it= x as Infinity ? ? ( ( Func < object > ) ( ( ) = > { var info=x.GetType ( ) .GetField ( `` source '' , bindingAttr ) ; return null ! =info ? info.GetValue ( x ) : x ; } ) ) ( ) ; return it is Infinity ; } public IEnumerator < T > GetEnumerator ( ) { for ( var message= '' Attempted to enumerate an infinite enumerable '' ; ; ) throw new InvalidOperationException ( message ) ; } public IEnumerator < T > GetEnumerator ( ) { foreach ( var x in this ) yield return x ; } public IEnumerator < T > GetEnumerator ( ) { return this.GetEnumerator ( ) ; } public IEnumerator < T > GetEnumerator ( ) { throw new StackOverflowException ( `` ... `` ) ; } var objects=new object [ ] { } ; Debug.Print ( `` { 0 } '' , objects.IsInfinity ( ) ) ; var infObjects=objects.AsInterminable ( ) ; Debug.Print ( `` { 0 } '' , infObjects.IsInfinity ( ) ) ; using System.Collections.Generic ; using System.Collections ; using System ; public static partial class Interminable /* extensions */ { public static Interminable < T > AsInterminable < T > ( this IEnumerable < T > x ) { return Infinity.OfType < T > ( ) ; } public static Infinity AsInterminable ( this IEnumerable x ) { return Infinity.OfType < object > ( ) ; } public static bool IsInfinity ( this IEnumerable x ) { var it= x as Infinity ? ? ( ( Func < object > ) ( ( ) = > { var info=x.GetType ( ) .GetField ( `` source '' , bindingAttr ) ; return null ! =info ? info.GetValue ( x ) : x ; } ) ) ( ) ; return it is Infinity ; } const BindingFlags bindingAttr= BindingFlags.Instance|BindingFlags.NonPublic ; } public abstract partial class Interminable < T > : Infinity , IEnumerable < T > { IEnumerator IEnumerable.GetEnumerator ( ) { return this.GetEnumerator ( ) ; } # if OPTION_1 public IEnumerator < T > GetEnumerator ( ) { for ( var message= '' Attempted to enumerate an infinite enumerable '' ; ; ) throw new InvalidOperationException ( message ) ; } # endif # if OPTION_2 public IEnumerator < T > GetEnumerator ( ) { foreach ( var x in this ) yield return x ; } # endif # if OPTION_3 public IEnumerator < T > GetEnumerator ( ) { return this.GetEnumerator ( ) ; } # endif # if OPTION_4 public IEnumerator < T > GetEnumerator ( ) { throw new StackOverflowException ( `` ... `` ) ; } # endif public Infinity LongCount < U > ( Func < U , bool > predicate=default ( Func < U , bool > ) ) { return this ; } public Infinity Count < U > ( Func < U , bool > predicate=default ( Func < U , bool > ) ) { return this ; } public Infinity LongCount ( Func < T , bool > predicate=default ( Func < T , bool > ) ) { return this ; } public Infinity Count ( Func < T , bool > predicate=default ( Func < T , bool > ) ) { return this ; } } public abstract partial class Infinity : IFormatProvider , ICustomFormatter { partial class Instance < T > : Interminable < T > { public static readonly Interminable < T > instance=new Instance < T > ( ) ; } object IFormatProvider.GetFormat ( Type formatType ) { return typeof ( ICustomFormatter ) ! =formatType ? null : this ; } String ICustomFormatter.Format ( String format , object arg , IFormatProvider formatProvider ) { return `` Infinity '' ; } public override String ToString ( ) { return String.Format ( this , `` { 0 } '' , this ) ; } public static Interminable < T > OfType < T > ( ) { return Instance < T > .instance ; } }"
"public List < string > In ( IRange range ) { var result = new List < string > ( ) ; for ( int i = range.From ; i < = range.To ; i++ ) { // ... } return result ; } [ TestMethod ] public void In_SimpleNumbers_ReturnsNumbersAsList ( ) { var range = CreateRange ( 1 , 2 ) ; var expected = new List < string > ( ) { `` 1 '' , `` 2 '' } ; var result = fizzbuzz.In ( range ) ; CollectionAssert.AreEqual ( expected , result ) ; } private IRange CreateRange ( int from , int to ) { return new Fakes.StubIRange ( ) { FromGet = ( ) = > { return from ; } , ToGet = ( ) = > { return to ; } } ; }"
"extensionForm = new Form ( ) ; extensionForm.SetBounds ( 0 , 0 , 100 , 100 ) ; extensionForm.Controls.Add ( new Button ( ) ) ; ExApplAPI.AddCustomPropertyWindow ( extensionForm.Handle.ToInt32 ( ) , `` Ololo '' ) ;"
public class GeneralOptionsPage : DialogPage { [ Category ( `` General '' ) ] [ DisplayName ( `` Foos '' ) ] [ Description ( `` Bla Foo Bla '' ) ] public string [ ] Foos { get ; set ; } [ Category ( `` General '' ) ] [ DisplayName ( `` Bar '' ) ] [ Description ( `` Bar Foo Bar '' ) ] public string Bar { get ; set ; } }
"public class MemoryTest { private HundredMegabyte hundred ; public void Run ( ) { Console.WriteLine ( `` ready to attach '' ) ; for ( var i = 0 ; i < 100 ; i++ ) { Console.WriteLine ( `` iteration # { 0 } '' , i + 1 ) ; hundred = new HundredMegabyte ( ) ; Console.WriteLine ( `` { 0 } object was initialized '' , hundred ) ; Console.ReadKey ( ) ; //hundred.Dispose ( ) ; hundred = null ; } } static void Main ( ) { var test = new MemoryTest ( ) ; test.Run ( ) ; } } public class HundredMegabyte : IDisposable { private readonly Megabyte [ ] megabytes = new Megabyte [ 100 ] ; public HundredMegabyte ( ) { for ( var i = 0 ; i < megabytes.Length ; i++ ) { megabytes [ i ] = new Megabyte ( ) ; } } public void Dispose ( ) { Dispose ( true ) ; GC.SuppressFinalize ( this ) ; } ~HundredMegabyte ( ) { Dispose ( false ) ; } private void Dispose ( bool disposing ) { } public override string ToString ( ) { return String.Format ( `` { 0 } MB '' , megabytes.Length ) ; } } public class Megabyte { private readonly Kilobyte [ ] kilobytes = new Kilobyte [ 1024 ] ; public Megabyte ( ) { for ( var i = 0 ; i < kilobytes.Length ; i++ ) { kilobytes [ i ] = new Kilobyte ( ) ; } } } public class Kilobyte { private byte [ ] bytes = new byte [ 1024 ] ; }"
"[ DllImport ( `` MSR_API.dll '' ) ] static extern bool MSR_InitComm ( string portname , UInt32 baud ) ;"
"XElement locElement = new XElement ( `` loc '' , location ) ; XElement lastmodElement = new XElement ( `` lastmod '' , modifiedDate.ToString ( `` yyyy-MM-dd '' ) ) ; XElement changefreqElement = new XElement ( `` changefreq '' , changeFrequency ) ; XElement urlElement = new XElement ( `` url '' ) ; urlElement.Add ( locElement ) ; urlElement.Add ( lastmodElement ) ; urlElement.Add ( changefreqElement ) ; < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < urlset xmlns= '' http : //www.sitemaps.org/schemas/sitemap/0.9 '' > < url xmlns= '' '' > < loc > http : //www.mydomain.com/default.aspx < /loc > < lastmod > 2011-05-20 < /lastmod > < changefreq > never < /changefreq > < /url > < /urlset >"
static void Teste ( int x ) { } static void Teste ( ref int x ) { } static void Teste ( ) { int i = 0 ; Teste ( i ) ; Teste ( ref i ) ; } class Foo { Foo ( int bar ) { // initializing `` Foo '' instance ... } Foo ( int & bar ) { // initializing `` Foo '' instance ... } // ... }
{ `` x '' : `` 50 '' } public class Test { public float ? x { get ; set ; } } var test = JsonConvert.DeserializeObject < Test > ( json ) ;
sub copyText { while ( $ _ [ 0 ] ) { $ _ [ 1 ] - > Empty ( ) ; $ _ [ 0 ] = $ _ [ 1 ] - > IsText ( ) ; sleep ( 1 ) ; }
DataTable tableList < string > header = new List < string > ( ) ; table.Columns.Cast < DataColumn > ( ) .ToList ( ) .ForEach ( col = > header.Add ( col.ColumnName ) ) ; var LINQheader = from mycol in table.Columns select mycol.ColumnName ; LINQheader.tolist ( ) ;
< PackageReference Include= '' System.ValueTuple '' Version= '' 4.3.0 '' / > # msbuild My.sln /t : restore # msbuild My.sln /p : Configuration=Release /p : Platform= '' Any CPU ''
"< ControlTemplate x : Key= '' validationErrorTemplateBubble '' > < DockPanel > < Grid DockPanel.Dock= '' Bottom '' Margin= '' 10,0,0,0 '' > < Grid.Effect > < DropShadowEffect ShadowDepth= '' 2 '' Direction= '' 315 '' / > < /Grid.Effect > < Grid.RowDefinitions > < RowDefinition Height= '' * '' / > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Border Grid.Row= '' 1 '' BorderBrush= '' Gray '' BorderThickness= '' 1 '' CornerRadius= '' 5 '' Margin= '' 0 , -1.6,0,0 '' > < Border.Background > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' # FFE7E8F1 '' Offset= '' 1 '' / > < GradientStop Color= '' White '' / > < GradientStop Color= '' # FFF3F4F6 '' Offset= '' 0.472 '' / > < /LinearGradientBrush > < /Border.Background > < Grid > < WrapPanel VerticalAlignment= '' Center '' Margin= '' 5,5,10,5 '' > < Image Source= '' /Sesam ; component/Modules/Images/wrongsmall.png '' Height= '' 15 '' Width= '' 15 '' / > < TextBlock Foreground= '' Red '' FontSize= '' 12 '' Margin= '' 5,0,0,0 '' Text= '' { Binding ElementName=ErrorAdorner , Path=AdornedElement . ( Validation.Errors ) .CurrentItem.ErrorContent } '' / > < /WrapPanel > < ContentPresenter Margin= '' 5 '' Grid.Column= '' 1 '' Grid.Row= '' 1 '' / > < /Grid > < /Border > < Path Data= '' M306.375,133.125L306.375,100.875L335.75,133.25 '' Stroke= '' Gray '' Height= '' 15 '' Fill= '' White '' StrokeThickness= '' 1 '' Stretch= '' Uniform '' Margin= '' 10,0,0,0 '' HorizontalAlignment= '' Left '' VerticalAlignment= '' Center '' / > < /Grid > < AdornedElementPlaceholder x : Name= '' ErrorAdorner '' / > < /DockPanel > < TextBox BorderThickness= '' 0 '' VerticalAlignment= '' Center '' Width= '' 150 '' Padding= '' 3 '' Margin= '' 8,0,0,0 '' Foreground= '' { StaticResource myDarkBlue } '' Text= '' { Binding RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type ListView } } , Path=DataContext.encTypeValidation , UpdateSourceTrigger=PropertyChanged , ValidatesOnDataErrors=True } '' Validation.ErrorTemplate= '' { StaticResource validationErrorTemplateBubble } '' HorizontalAlignment= '' Left '' > < TextBox.Style > < Style TargetType= '' { x : Type TextBox } '' > < Setter Property= '' Visibility '' Value= '' Collapsed '' / > < Style.Triggers > < MultiDataTrigger > < MultiDataTrigger.Conditions > < Condition Binding= '' { Binding RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type ListViewItem } } , Path=IsSelected } '' Value= '' True '' / > < Condition Binding= '' { Binding RelativeSource= { RelativeSource Mode=FindAncestor , AncestorType= { x : Type ListView } } , Path=DataContext.editClicked } '' Value= '' True '' / > < /MultiDataTrigger.Conditions > < Setter Property= '' Visibility '' Value= '' Visible '' / > < /MultiDataTrigger > < /Style.Triggers > < /Style > < /TextBox.Style > < Grid > < WrapPanel > < TextBox x : Name= '' tbox '' Text= '' { Binding encTypeValidation , Mode=OneWayToSource , UpdateSourceTrigger=PropertyChanged , ValidatesOnDataErrors=True } '' Foreground= '' { StaticResource myTextBoxColor } '' Validation.ErrorTemplate= '' { StaticResource validationErrorTemplateBubble } '' PreviewMouseDown= '' tbox_PreviewMouseDown '' Width= '' 200 '' > < TextBox.InputBindings > < MouseBinding Gesture= '' LeftClick '' Command= '' { Binding addBoxClicked } '' / > < /TextBox.InputBindings > < /TextBox > < /WrapPanel > < /Grid > < Grid Grid.Row= '' 2 '' Background= '' { StaticResource myLightGrey } '' > < Border BorderBrush= '' { StaticResource myLightGrey } '' BorderThickness= '' 0,1,1,0 '' > < ContentControl x : Name= '' AddPanel '' VerticalAlignment= '' Center '' HorizontalAlignment= '' Center '' UseLayoutRounding= '' True '' / > < /Border > < /Grid >"
"[ StructLayout ( LayoutKind.Explicit , Pack = 1 , Size = 8 ) ] unsafe struct BUF { } ( ( BUF* ) dst ) = * ( ( BUF* ) src ) ; IL_0046 : nop IL_0047 : ldloc.s dst IL_0049 : ldloc.2 IL_004a : ldobj MyClass/BUF IL_004f : stobj MyClass/BUF * ( ( long* ) dst ) = * ( ( long* ) src ) ; IL_0046 : nopIL_0047 : ldloc.s dstIL_0049 : ldloc.2IL_004a : ldind.i8 IL_004b : stind.i8"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace ConsoleApplication81 { class Program { const int N = 10 ; static List < Condition > condition = new List < Condition > ( ) ; static void Main ( string [ ] args ) { string [ ] line1 = Console.ReadLine ( ) .Split ( new char [ ] { ' ' } , StringSplitOptions.RemoveEmptyEntries ) ; int n = int.Parse ( line1 [ 0 ] ) ; int m = int.Parse ( line1 [ 1 ] ) ; for ( int i = 0 ; i < m ; i++ ) { string [ ] line = Console.ReadLine ( ) .Split ( new char [ ] { ' ' } , StringSplitOptions.RemoveEmptyEntries ) ; condition.Add ( new Condition ( ) { X = int.Parse ( line [ 0 ] ) , Y = int.Parse ( line [ 1 ] ) } ) ; } // List < int [ ] > rlist = new List < int [ ] > ( ) ; for ( int j = 0 ; j < N ; j++ ) { int [ ] assignments = new int [ n ] ; for ( int i = 0 ; i < n ; i++ ) assignments [ i ] = -1 ; assignments [ 0 ] = j ; rlist.Add ( assignments ) ; } for ( int j = 1 ; j < n ; j++ ) { List < int [ ] > rlist2 = new List < int [ ] > ( rlist.Count*5 ) ; for ( int k = 0 ; k < rlist.Count ; k++ ) { for ( int l = 0 ; l < N ; l++ ) { rlist [ k ] [ j ] = l ; if ( CanPassCondition ( rlist [ k ] ) ) rlist2.Add ( ( int [ ] ) rlist [ k ] .Clone ( ) ) ; } } rlist = rlist2 ; } Console.Write ( rlist.Count % 1007 ) ; } private static bool CanPassCondition ( int [ ] p ) { foreach ( var c in condition ) { if ( p [ c.X ] == -1 || p [ c.Y ] == -1 ) continue ; if ( p [ c.X ] > p [ c.Y ] ) return false ; } return true ; } } class Condition { public int X ; public int Y ; public override string ToString ( ) { return string.Format ( `` x : { 0 } , y : { 1 } '' , X , Y ) ; } } }"
"private void btnAddIncrement_Click ( object sender , EventArgs e ) { SmartTextBox dynamictextbox = new SmartTextBox ( ) ; dynamictextbox.BackColor = Color.Bisque ; dynamictextbox.Width = this.tbWidth ; dynamictextbox.Left = ( sender as Button ) .Right + this.lastLeft ; dynamictextbox.K = `` Test '' ; this.lastLeft = this.lastLeft + this.tbWidth ; dynamictextbox.Top = btnAddStart.Top ; this.Controls.Add ( dynamictextbox ) ; } foreach ( Control c in this.Controls ) { if ( c.GetType ( ) == typeof ( BnBCalculator.SmartTextBox ) ) { count++ ; //MessageBox.Show ( ( c as SmartTextBox ) .K.ToString ( ) ) ; c.Dispose ( ) ; } // else { MessageBox.Show ( `` not txtbox '' ) ; } }"
public class BloggingContext : DbContext { public BloggingContext ( DbContextOptions < BloggingContext > options ) : base ( options ) { } }
"//this one gives the errorpublic void MyMethodWithIs ( object val ) { if ( val is ( int id , int name ) pair ) { ConsoleWriteLine ( $ '' { pair.id } , { pair.name } '' ) ; } } //This one workspublic void MyMethodWithAs ( object val ) { var pair = val as ( int id , int name ) ? ; if ( pair ! =null ) { ConsoleWriteLine ( $ '' { pair.id } , { pair.name } '' ) ; } }"
"int num1 ; int num2 ; int num3 ; int yes = 0 ; int no = 0 ; for ( int i = 0 ; i < = 99 ; i++ ) { Random rnd = new Random ( ) ; num1 = rnd.Next ( 1 , 11 ) ; num2 = rnd.Next ( 1 , 11 ) ; num3 = rnd.Next ( 1 , 11 ) ; if ( ( ( num1 < = num2 ) & & ( num2 < = num3 ) ) || ( ( num1 > = num2 ) & & ( num2 > = num3 ) ) ) { yes += 1 ; } else { no += 1 ; } } Console.WriteLine ( `` The Number are in ascending order `` + yes.ToString ( ) + `` Times '' ) ; Console.WriteLine ( `` The Number are not in ascending order `` + no.ToString ( ) + `` Times '' ) ; Console.ReadLine ( ) ;"
"using System ; using System.Collections.Generic ; using System.Diagnostics ; namespace Question { internal class Program { public static void Main ( string [ ] args ) { var impl = new Implementation ( ) ; impl.MethodA ( 1 , `` two '' , new OtherClass { Name = `` John '' , Age = 100 } ) ; } } internal class Implementation { public void MethodA ( int param1 , string param2 , OtherClass param3 ) { Logger.LogParameters ( ) ; } } internal class OtherClass { public string Name { get ; set ; } public int Age { get ; set ; } } internal class Logger { public static void LogParameters ( ) { var parameters = GetParametersFromPreviousMethodCall ( ) ; foreach ( var keyValuePair in parameters ) Console.WriteLine ( keyValuePair.Key + `` = '' + keyValuePair.Value ) ; // keyValuePair.Value may return a object that maybe required to // inspect to get a representation as a string . } private static IDictionary < string , object > GetParametersFromPreviousMethodCall ( ) { throw new NotImplementedException ( `` I need help here ! `` ) ; } } }"
"public readonly struct ReadonlyPoint3D { public ReadonlyPoint3D ( double x , double y , double z ) { this.X = x ; this.Y = y ; this.Z = z ; } public double X { get ; } public double Y { get ; } public double Z { get ; } } private static double CalculateDistance ( in ReadonlyPoint3D point1 , in ReadonlyPoint3D point2 ) { double xDifference = point1.X - point2.X ; double yDifference = point1.Y - point2.Y ; double zDifference = point1.Z - point2.Z ; return Math.Sqrt ( xDifference * xDifference + yDifference * yDifference + zDifference * zDifference ) ; } static void Main ( string [ ] args ) { var point1 = new ReadonlyPoint3D ( 0 , 0 , 0 ) ; var point2 = new ReadonlyPoint3D ( 1 , 1 , 1 ) ; var distance = CalculateDistance ( in point1 , in point2 ) ; } IL_0045 : ldloca.s point1IL_0047 : ldloca.s point2IL_0049 : call float64 CSharpTests.Program : :CalculateDistance ( valuetype CSharpTests.ReadonlyPoint3D & , valuetype CSharpTests.ReadonlyPoint3D & ) IL_004e : stloc.2 // distance // [ 25 9 - 25 10 ] IL_0000 : nop// [ 26 13 - 26 54 ] IL_0001 : ldarg.0 // point1IL_0002 : call instance float64 CSharpTests.ReadonlyPoint3D : :get_X ( ) IL_0007 : ldarg.1 // point2IL_0008 : call instance float64 CSharpTests.ReadonlyPoint3D : :get_X ( ) IL_000d : subIL_000e : stloc.0 // xDifference// the resit is omitted for the sake of brevity , essentially same code repeated for Y & Z public struct MutablePoint3D { public MutablePoint3D ( double x , double y , double z ) { this.X = x ; this.Y = y ; this.Z = z ; } public double X { get ; set ; } public double Y { get ; set ; } public double Z { get ; set ; } } private static double CalculateDistance ( in MutablePoint3D point1 , in MutablePoint3D point2 ) { double xDifference = point1.X - point2.X ; double yDifference = point1.Y - point2.Y ; double zDifference = point1.Z - point2.Z ; return Math.Sqrt ( xDifference * xDifference + yDifference * yDifference + zDifference * zDifference ) ; } // [ 26 13 - 26 54 ] IL_0001 : ldarg.0 // point1IL_0002 : call instance float64 CSharpTests.MutablePoint3D : :get_X ( ) IL_0007 : ldarg.1 // point2IL_0008 : call instance float64 CSharpTests.MutablePoint3D : :get_X ( ) IL_000d : subIL_000e : stloc.0 // xDifference// the resit is omitted for the sake of brevity // [ 35 13 - 35 54 ] IL_0001 : ldarga.s point1IL_0003 : call instance float64 CSharpTests.ReadonlyPoint3D : :get_X ( ) IL_0008 : ldarga.s point2IL_000a : call instance float64 CSharpTests.ReadonlyPoint3D : :get_X ( ) IL_000f : subIL_0010 : stloc.0 // xDifference"
"protected override void OnOrientationChanged ( OrientationChangedEventArgs e ) { switch ( e.Orientation ) { case PageOrientation.Landscape : ExtendedVisualStateManager.GoToElementState ( root : this.LayoutRoot , stateName : `` LandscapeState '' , useTransitions : true ) ; break ; case PageOrientation.LandscapeRight : ExtendedVisualStateManager.GoToElementState ( root : this.LayoutRoot , stateName : `` LandscapeState '' , useTransitions : true ) ; break ; case PageOrientation.LandscapeLeft : ExtendedVisualStateManager.GoToElementState ( root : LayoutRoot , stateName : `` LandscapeState '' , useTransitions : true ) ; break ; case PageOrientation.Portrait : ExtendedVisualStateManager.GoToElementState ( root : this.LayoutRoot , stateName : `` PortraitState '' , useTransitions : true ) ; break ; case PageOrientation.PortraitUp : ExtendedVisualStateManager.GoToElementState ( root : this.LayoutRoot , stateName : `` PortraitState '' , useTransitions : true ) ; break ; case PageOrientation.PortraitDown : ExtendedVisualStateManager.GoToElementState ( root : this.LayoutRoot , stateName : `` PortraitState '' , useTransitions : true ) ; break ; default : break ; } }"
"public class TransitionContainer < TTransition , TStateTo > : ITransitionContainer < TTransition , TStateTo > where TTransition : ITransition where TStateTo : IState { public TransitionContainer ( ) { StateTo = typeof ( TStateTo ) ; Transition = Activator.CreateInstance < TTransition > ( ) ; } public Type StateTo { get ; private set ; } public TTransition Transition { get ; private set ; } } public class StateContainer < T > : IStateContainer < T > where T : IState { private Dictionary < Type , TransitionContainer < ITransition , IState > > _transitions = new Dictionary < Type , TransitionContainer < ITransition , IState > > ( ) ; public StateContainer ( ) { State = Activator.CreateInstance < T > ( ) ; } public T State { get ; private set ; } public int TransitionCount { get { return _transitions.Count ; } } public void AddTransition < TTransition , TStateTo > ( ) where TTransition : ITransition , new ( ) where TStateTo : IState , new ( ) { var transitionContainer= new TransitionContainer < TTransition , TStateTo > ( ) ; _transitions.Add ( typeof ( TTransition ) , transitionContainer ) ; } var transitionContainer= new TransitionContainer < ITransition , IState > ( ) ;"
System.String XnullSystem.String XSystem.String X void Main ( ) { Console.WriteLine ( typeof ( I1 ) .GetProperty ( `` X '' ) ) ; Console.WriteLine ( typeof ( I2 ) .GetProperty ( `` X '' ) ) ; Console.WriteLine ( typeof ( C1 ) .GetProperty ( `` X '' ) ) ; Console.WriteLine ( typeof ( C2 ) .GetProperty ( `` X '' ) ) ; ; } public interface I1 { string X { get ; } } public interface I2 : I1 { } public class C1 { public string X { get { return `` x '' ; } } } public class C2 : C1 { } public class C : I2 { // not allowed : the error is // 'I2.X ' in explicit interface declaration is not a member of interface string I2.X { get ; set ; } // allowed string I1.X { get ; set ; } }
"[ Flags ] public enum MouseButtons { None = 0 , Left = 1048576 , Right = 2097152 , Middle = 4194304 , XButton1 = 8388608 , XButton2 = 16777216 , } public enum MouseButtons { None = 0 , Left = 1 , // 2^0 Right = 2 , // 2^1 Middle = 4 , // 2^2 XButton1 = 8 , // 2^3 XButton2 = 16 , // 2^4 }"
"public void DoSomething ( MyGeneric < MyClassA > obj ) ; public void MyEventHandler ( Object source , EventArgs e ) { //source is of type MyGeneric < MyClassB > DoSomething ( ( MyGeneric < MyClassA > ) obj ) ; }"
"private void DoStuff ( ) { // Do some stuff RestartPc ( ) ; } private void RestartPc ( ) { Process.Start ( `` shutdown '' , `` /r /t 0 '' ) ; } // Call this when the PC is restarted : private void DoStuffAfterRestart ( ) { }"
"Layout.cshtml : < html > < head > @ RenderZone ( `` header '' ) < /head > < body > @ RenderZone ( `` zone1 '' ) @ RenderZone ( `` zone2 '' ) @ RenderZone ( `` zone3 '' ) < /html > Model = GetAllChildActions ( zoneName ) foreach ( var m in Model ) @ html.action ( controller = m.controller , action = m.action )"
"public interface IModelBuilder < T > where T : IStandardTemplateTemplate { M Build < M > ( T pTemplate , params object [ ] pParams ) where M : BaseModel ; } public class BusinessModelBuilder : IModelBuilder < IBusinessTemplate > { public virtual M Build < M > ( IBusinessTemplate pTemplate , params object [ ] pParams ) where M : BussinessModel { var businessModel = Activator.CreateInstance < M > ( ) ; // map data return businessModel ; } }"
"using ( FileStream inputStream = File.OpenRead ( ( localFileToProcess + `` .txt '' ) ) ) { using ( StreamReader inputReader = new StreamReader ( inputStream , System.Text.Encoding.GetEncoding ( 1254 ) ) ) { using ( StreamWriter writer=new StreamWriter ( localFileToProcess , true , System.Text.Encoding.GetEncoding ( 1254 ) ) ) { while ( ! inputReader.EndOfStream ) { if ( ( tempLineValue = inputReader.ReadLine ( ) ) .Count ( c = > c == ' ; ' ) == 4 ) { writer.WriteLine ( tempLineValue ) ; } else incrementCounter ( ) ; } } } }"
object var3 = 3 ; Console.WriteLine ( var3.GetType ( ) .ToString ( ) ) ; Console.WriteLine ( typeof ( object ) .ToString ( ) ) ; System.Int32System.Object
< link rel= '' icon '' type= '' image/x-icon '' href= '' https : //cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png ? v=c78bd457575a '' / > < link rel= '' shortcut icon '' type= '' image/x-icon '' href= '' https : //cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png ? v=c78bd457575a '' / >
public uint ServerSequenceNumber ; public uint Reserved1 ; public uint Reserved2 ; public byte Reserved3 ; public byte TotalPlayers ; 00000000000000000000000000000001 00000000000000000000000000000001 00000000000000000000000000000001 00000001 00000001
"C : /Users/MyUser/RiderProjects/TestConsole/TestConsole/bin/Debug/TestConsole.exeUnhandled Exception : System.IO.FileLoadException : Could not load file or assembly 'Google.Apis.Auth , Version=1.21.0.0 , Culture=neutral , PublicKeyToken=4b01fa6e34db77ab ' or one of its dependencies . The located assembly 's manifest definition does not match the assembly reference . ( Exception from HRESULT : 0x80131040 ) at Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions ( Task task ) in C : \Users\jon\Test\Projects\gax-dotnet\releasebuild\src\Google.Api.Gax\TaskExtensions.cs : line 48 at Google.Api.Gax.Grpc.ChannelPool.GetChannel ( ServiceEndpoint endpoint ) in C : \Users\jon\Test\Projects\gax-dotnet\releasebuild\src\Google.Api.Gax.Grpc\ChannelPool.cs : line 92 at Google.Cloud.PubSub.V1.PublisherClient.Create ( ServiceEndpoint endpoint , PublisherSettings settings ) in C : \Users\jon\Test\Projects\google-cloud-dotnet\releasebuild\apis\Google.Cloud.PubSub.V1\Google.Cloud.PubSub.V1\PublisherClient.cs : line 558 at TestConsole.Program.CreateTopic ( String projectId , String topicId ) in C : \Users\MyUser\RiderProjects\TestConsole\TestConsole\Program.cs : line 11 at TestConsole.Program.Main ( String [ ] args ) in C : \Users\MyUser\RiderProjects\TestConsole\TestConsole\Program.cs : line 32 using Google.Cloud.PubSub.V1 ; using Google.Protobuf ; namespace TestConsole { internal class Program { public static object CreateTopic ( string projectId , string topicId ) { var publisher = PublisherClient.Create ( ) ; var topicName = new TopicName ( projectId , topicId ) ; var message = new PubsubMessage { // The data is any arbitrary ByteString . Here , we 're using text . Data = ByteString.CopyFromUtf8 ( `` Hello Cloud Pub/Sub ! `` ) , // The attributes provide metadata in a string-to-string // dictionary . Attributes = { { `` description '' , `` Simple text message '' } } } ; publisher.Publish ( topicName , new [ ] { message } ) ; return 0 ; } public static void Main ( string [ ] args ) { CreateTopic ( `` MyProjectID '' , `` MyProjectTopic '' ) ; } } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < packages > < package id= '' Google.Api.CommonProtos '' version= '' 1.0.0 '' targetFramework= '' net452 '' / > < package id= '' Google.Api.Gax '' version= '' 1.0.1 '' targetFramework= '' net452 '' / > < package id= '' Google.Api.Gax.Grpc '' version= '' 1.0.1 '' targetFramework= '' net452 '' / > < package id= '' Google.Apis '' version= '' 1.24.1 '' targetFramework= '' net452 '' / > < package id= '' Google.Apis.Auth '' version= '' 1.24.1 '' targetFramework= '' net452 '' / > < package id= '' Google.Apis.Core '' version= '' 1.24.1 '' targetFramework= '' net452 '' / > < package id= '' Google.Cloud.Iam.V1 '' version= '' 1.0.0-beta09 '' targetFramework= '' net452 '' / > < package id= '' Google.Cloud.PubSub.V1 '' version= '' 1.0.0-beta09 '' targetFramework= '' net452 '' / > < package id= '' Google.Protobuf '' version= '' 3.2.0 '' targetFramework= '' net452 '' / > < package id= '' Grpc.Auth '' version= '' 1.4.0 '' targetFramework= '' net452 '' / > < package id= '' Grpc.Core '' version= '' 1.4.0 '' targetFramework= '' net452 '' / > < package id= '' Newtonsoft.Json '' version= '' 10.0.2 '' targetFramework= '' net452 '' / > < package id= '' System.Interactive.Async '' version= '' 3.1.1 '' targetFramework= '' net452 '' / > < package id= '' System.Net.Http '' version= '' 4.3.1 '' targetFramework= '' net425 '' / > < package id= '' Zlib.Portable.Signed '' version= '' 1.11.0 '' targetFramework= '' net452 '' / > < /packages >"
"ImageAttributes attributes = new ImageAttributes ( ) ; attributes.SetGamma ( 10 ) ; // Draw the image onto the new bitmap // while applying the new gamma value . System.Drawing.Point [ ] points = { new System.Drawing.Point ( 0 , 0 ) , new System.Drawing.Point ( image.Width , 0 ) , new System.Drawing.Point ( 0 , image.Height ) , } ; Rectangle rect = new Rectangle ( 0 , 0 , image.Width , image.Height ) ; // Make the result bitmap . Bitmap bm = new Bitmap ( image.Width , image.Height ) ; using ( Graphics gr = Graphics.FromImage ( bm ) ) { gr.DrawImage ( HSICONV.Bitmap , points , rect , GraphicsUnit.Pixel , attributes ) ; } Image < Gray , byte > smoothedGrayFrame = grayImage.PyrDown ( ) ; smoothedGrayFrame = smoothedGrayFrame.PyrUp ( ) ; //canny Image < Gray , byte > cannyFrame = null ; cannyFrame = smoothedGrayFrame.Canny ( 50 , 50 ) ; //smoothing grayImage = smoothedGrayFrame ; //binarize Image < Gray , byte > grayout = grayImage.Clone ( ) ; CvInvoke.AdaptiveThreshold ( grayImage , grayout , 255 , AdaptiveThresholdType.GaussianC , ThresholdType.BinaryInv , Convert.ToInt32 ( numericmainthreshold.Value ) + Convert.ToInt32 ( numericmainthreshold.Value ) % 2 + 1 , 1.2d ) ; grayout._Not ( ) ; Mat kernelCl = CvInvoke.GetStructuringElement ( ElementShape.Rectangle , new Size ( 3 , 3 ) , new System.Drawing.Point ( -1 , -1 ) ) ; CvInvoke.MorphologyEx ( grayout , grayout , MorphOp.Close , kernelCl , new System.Drawing.Point ( -1 , -1 ) , 1 , BorderType.Default , new MCvScalar ( ) ) ;"
"HMAC hasher = new HMACSHA256 ( Encoding.UTF8.GetBytes ( `` secret '' ) ) ; //keybyte [ ] data = hasher.ComputeHash ( Encoding.UTF8.GetBytes ( `` 2012-10-01T17:48:56 '' ) ) ; //timestampConvert.ToBase64String ( data ) ; //computed token $ hmac = hash_hmac ( `` sha256 '' , `` 2012-10-01T17:48:56 '' , `` secret '' ) ; $ hmac = base64_encode ( $ hmac ) ;"
"class CSimpleSend { CSomeObjServer obj = new CSomeObjServer ( ) ; public CSimpleSend ( ) { obj.changedVar = varUpdated ; obj.threadedChangeSomeVar ( ) ; } private void varUpdated ( int var ) { string send = var.ToString ( ) ; byte [ ] packetData = System.Text.UTF8Encoding.UTF8.GetBytes ( send ) ; string ip = `` 127.0.0.1 '' ; int port = 11000 ; IPEndPoint ep = new IPEndPoint ( IPAddress.Parse ( ip ) , port ) ; Socket client = new Socket ( AddressFamily.InterNetwork , SocketType.Dgram , ProtocolType.Udp ) ; client.SendTo ( packetData , ep ) ; Console.WriteLine ( `` Sent Message : `` + send ) ; Thread.Sleep ( 100 ) ; } } class CSimpleReceive { CSomeObjClient obj = new CSomeObjClient ( ) ; public Action < string > showMessage ; Int32 port = 11000 ; UdpClient udpClient ; public CSimpleReceive ( ) { udpClient = new UdpClient ( port ) ; showMessage = Console.WriteLine ; Thread t = new Thread ( ( ) = > ReceiveMessage ( ) ) ; t.Start ( ) ; } private void ReceiveMessage ( ) { while ( true ) { //Thread.Sleep ( 1000 ) ; IPEndPoint remoteIPEndPoint = new IPEndPoint ( IPAddress.Any , port ) ; byte [ ] content = udpClient.Receive ( ref remoteIPEndPoint ) ; if ( content.Length > 0 ) { string message = Encoding.UTF8.GetString ( content ) ; if ( showMessage ! = null ) showMessage ( `` Recv : '' + message ) ; int var_out = -1 ; bool succ = Int32.TryParse ( message , out var_out ) ; if ( succ ) { obj.alterSomeVar ( var_out ) ; Console.WriteLine ( `` Altered var to : '' + var_out ) ; } } Thread.Sleep ( 3000 ) ; } } } Sent Message : 1Recv:1Altered var to :1Sent Message : 2Sent Message : 3Sent Message : 4Sent Message : 5Recv:2Altered var to :2Sent Message : 6Sent Message : 7Sent Message : 8Sent Message : 9Sent Message : 10Recv:3Altered var to :3"
"public delegate void TestDelegate ( int test ) ; public class Test { private int test ; private void method ( int aaa ) { TestDelegate del = test = > aaa++ ; test++ ; } public static void Main ( ) { } } prog.cs ( 11,3 ) : error CS0135 : ` test ' conflicts with a declaration in a child blockprog.cs ( 9,22 ) : ( Location of the symbol related to previous error ) Compilation failed : 1 error ( s ) , 0 warnings 'test ' conflicts with the declaration 'Namespace.Test.test ' { int a ; } { int a ; } { int a ; } int a ; class Test { int test ; void method ( ) { { int test ; } test++ ; } }"
"CreateFile ( LockFileName , GENERIC_READ or GENERIC_WRITE , FILE_SHARE_READ , nil , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH or FILE_FLAG_DELETE_ON_CLOSE , 0 ) ;"
"private void backgroundWorker1_DoWork ( object sender , DoWorkEventArgs e ) { // using Invoke because I change value of some controls , e.g , ListView , labels and a progressbar this.Invoke ( ( Action ) delegate { for ( int i = 0 ; i < nSteps ; ++i ) { string s = getnStr ( ) ; // ... int progress = ( int ) ( 100.0 / nSteps * ( i + 1 ) ) ; backgroundWorker1.ReportProgress ( progress ) ; } } ) ; }"
"< Window x : Class= '' WPF_Sandbox.MainWindow '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : local= '' clr-namespace : WPF_Sandbox '' Title= '' MainWindow '' x : Name= '' ThisControl '' > < StackPanel x : Name= '' MainStackPanel '' > < TextBox x : Name= '' MyTextBox '' Text= '' { Binding NullableInt , ElementName=ThisControl , TargetNullValue= '' , UpdateSourceTrigger=PropertyChanged } '' / > < /StackPanel > < /Window > public partial class MainWindow : Window { private int ? nullableInt ; public int ? NullableInt { get { return nullableInt ; } set { nullableInt = value ; } } public MainWindow ( ) { InitializeComponent ( ) ; } }"
"class Film { public string Name { get ; set ; } public int Year { get ; set ; } public override string ToString ( ) { return string.Format ( `` Name= { 0 } , Year= { 1 } '' , Name , Year ) ; } } var films = new List < Film > { new Film { Name= '' Jaws '' , Year=1975 } , new Film { Name= '' Singing in the Rain '' , Year=1952 } , new Film { Name= '' Some Like It Hot '' , Year=1959 } , new Film { Name= '' The Wizard of Oz '' , Year=1939 } , new Film { Name= '' It 's a Wonderful Life '' , Year=1946 } , new Film { Name= '' American Beauty '' , Year=1999 } , new Film { Name= '' High Fidelity '' , Year=2000 } , new Film { Name= '' The Usual Suspects '' , Year=1995 } } ; Action < Film > print = film = > { Console.WriteLine ( film ) ; } ; films.ForEach ( print ) ; films.FindAll ( film = > film.Year < 1960 ) .ForEach ( print ) ; films.Sort ( ( f1 , f2 ) = > f1.Name.CompareTo ( f2.Name ) ) ; films.ForEach ( print ) ; using System ; using System.Collections.Generic ; namespace ScratchPad { class Film { public string Name { get ; set ; } public int Year { get ; set ; } public override string ToString ( ) { return string.Format ( `` Name = { 0 } \tYear = { 1 } '' , Name , Year ) ; } } class Program { static void Main ( string [ ] args ) { ToList < Film > ( new [ ] { new { Name = `` North By Northwest '' , Year = 1959 } , new { Name = `` The Green Mile '' , Year = 1999 } , new { Name = `` The Pursuit of Happyness '' , Year = 2006 } } ) .ForEach ( f = > { Console.WriteLine ( f ) ; } ) ; Console.ReadKey ( ) ; } static List < T > ToList < T > ( System.Collections.IEnumerable list ) { var newList = new List < T > ( ) ; foreach ( var thing in list ) if ( thing is T ) newList.Add ( ( T ) thing ) ; return newList ; } } using System ; using Microsoft.CSharp.RuntimeBinder ; namespace PlayWithAnonType { class Program { static void Main ( string [ ] args ) { PrintThingy ( new { Name = `` The Secret '' , Genre = `` Documentary '' , Year = 2006 } ) ; Console.ReadKey ( ) ; } static void PrintWhatever ( dynamic whatever ) { // the anonymous type 's ToString ( ) will print Console.WriteLine ( whatever ) ; } static void PrintThingy ( dynamic thingy ) { try { // I know what the thingy is Console.WriteLine ( `` Name = { 0 } \tGenre = { 1 } \tYear = { 2 } '' , thingy.Name , thingy.Genre , thingy.Year ) ; } catch ( RuntimeBinderException ex ) { # pragma warning disable 0168 Console.WriteLine ( `` By thingy , I really meant film . Sorry , I should 've clarified . `` ) ; # pragma warning restore 0168 } } }"
"int [ ] values = new int [ ] { 1 , 2 , 3 , 5 , 7 } ; Dictionary < int , string > dictionary = values.ToDictionary ( key = > key , val = > ( val % 2 == 1 ) ? `` Odd '' : `` Even '' ) ; // Display all keys and values.foreach ( KeyValuePair < int , string > pair in dictionary ) { Console.WriteLine ( pair ) ; } [ 1 , Odd ] [ 2 , Even ] [ 3 , Odd ] [ 5 , Odd ] [ 7 , Odd ] let values = [ | 1 ; 2 ; 3 ; 5 ; 7 | ] let dictionary = values.ToDictionary ( ? ? ? ) // Display all keys and values.for d in dictionary do printfn `` % d % s '' d.Key d.Value"
"textBox.TextChanged += ( s , e ) = > this.Foo ( ) ;"
public static Wrapper < string > Load ( ) { return `` '' ; } public static implicit operator Wrapper < T > ( T val ) { return new Wrapper < T > ( val ) ; } public class Test { public static void Main ( ) { string x = `` '' ; Wrapper < string > xx = x ; string [ ] y = new [ ] { `` '' } ; Wrapper < string [ ] > yy = y ; IEnumerable < string > z = new [ ] { `` '' } ; Wrapper < IEnumerable < string > > zz = z ; // ( ! ) } } public sealed class Wrapper < T > { private readonly object _value ; public Wrapper ( T value ) { this._value = value ; } public static implicit operator Wrapper < T > ( T val ) { return new Wrapper < T > ( val ) ; } }
private class Widget { public string Name { get ; set ; } } static void Main ( string [ ] args ) { List < Widget > widgets = new List < Widget > ( ) ; int found = 0 ; for ( int i = 0 ; i < = 500000 - 1 ; i++ ) widgets.Add ( new Widget ( ) { Name = Guid.NewGuid ( ) .ToString ( ) } ) ; DateTime starttime = DateTime.Now ; foreach ( Widget w in widgets ) { if ( w.Name.StartsWith ( `` 4 '' ) ) found += 1 ; } Console.WriteLine ( found + `` - `` + DateTime.Now.Subtract ( starttime ) .Milliseconds + `` ms '' ) ; starttime = DateTime.Now ; found = widgets.Where ( a = > a.Name.StartsWith ( `` 4 '' ) ) .Count ( ) ; Console.WriteLine ( found + `` - `` + DateTime.Now.Subtract ( starttime ) .Milliseconds + `` ms '' ) ; Console.ReadLine ( ) ; } 31160 - 116ms31160 - 95 ms
"private async void button1_ClickAsync ( object sender , EventArgs e ) { int x , y ; ThreadPool.GetAvailableThreads ( out x , out y ) ; textBox1.Text = x.ToString ( ) + '' ... '' +y.ToString ( ) ; await Task.Delay ( 5000 ) ; ThreadPool.GetAvailableThreads ( out x , out y ) ; textBox1.Text = x.ToString ( ) + `` ... '' + y.ToString ( ) ; }"
public class MyUserControl : WebUserControlBase < MyDocumentType > { ... }
"public class ConceptCollection : KeyedCollection < Uri , Concept > { protected override Uri GetKeyForItem ( Concept item ) { return item.Uri ; } } ConceptCollection wines = new ConceptCollection ( ) ; Concept red = new Concept ( `` http : //www.w3.org/2002/07/owl # RedWine '' ) ; Concept white = new Concept ( `` http : //www.w3.org/2002/07/owl # WhiteWine '' ) ; wines.Add ( red ) ; wines.Add ( white ) ; // Error : An item with the same key has already been added ."
using ( var chain = new X509Chain ( ) ) { } var chain = new X509Chain ( ) ; try { } finally { var disposable = chain as IDisposable ; if ( disposable ! = null ) { disposable.Dispose ( ) ; } }
public static bool IsNullOrEmpty ( this string target ) { return String.IsNullOrEmpty ( target ) ; } if ( some_string.IsNullOrEmpty ( ) ) // do something here if ( string.IsNullOrEmpty ( some_string ) ) // do something here
"< ? xml version= '' 1.0 '' ? > < configuration > < startup > < supportedRuntime version= '' v4.0 '' sku= '' .NETFramework , Version=v4.0 , Profile=Client '' / > < /startup > < /configuration >"
Bind ( Of IRepository ( Of Category ) ) .To ( Of EFRepository ( Of Category ) )
dict [ `` keyName1 '' ] MyObject.keyName1
"// set the delta on each frame for horizontal and vertical rotationvar oneTouch = new TKPanRecognizer ( ) ; oneTouch.gestureRecognizedEvent += ( r ) = > { HorizontalDelta += r.deltaTranslation.x * rotateSpeed * Time.deltaTime ; VerticalDelta -= r.deltaTranslation.y * rotateSpeed * Time.deltaTime ; } ; // do the same for pinchvar pinch = new TKPinchRecognizer ( ) ; pinch.gestureRecognizedEvent += ( r ) = > { rotateDistance -= r.deltaScale * 200.0f * Time.deltaTime ; } ; TouchKit.addGestureRecognizer ( oneTouch ) ; TouchKit.addGestureRecognizer ( pinch ) ; VerticalDelta = Mathf.Clamp ( VerticalDelta , verticalPivotMin , verticalPivotMax ) ; var direction = GetDirection ( HorizontalDelta , VerticalDelta ) ; var currentTarget = targetsSwitched ? target2 : target ; transform.position = currentTarget.position - direction * rotateDistance ; transform.LookAt ( currentTarget.position ) ; // ... private Vector3 GetDirection ( float x , float y ) { Quaternion q = Quaternion.Euler ( y , x , 0 ) ; return q * Vector3.forward ; } void Update ( ) { if ( currentlyMoving ) { FocusTarget ( currentTarget ) ; } else { // accept user input if not moving if ( Input.GetKeyDown ( KeyCode.Space ) ) { SetMoveToTarget ( mainTargetObject ) ; } if ( Input.GetKeyDown ( KeyCode.Q ) ) { SetMoveToTarget ( subTargetObject1 ) ; } if ( Input.GetKeyDown ( KeyCode.E ) ) { SetMoveToTarget ( subTargetObject2 ) ; } } } void SetMoveToTarget ( GameObject target ) { if ( currentlyMoving == false ) { currentlyMoving = true ; fromRotation = currentTarget.transform.rotation ; currentTarget = target ; toRotation = currentTarget.transform.rotation ; timeStartedLerping = Time.time ; } } void FocusTarget ( GameObject target ) { float timeSinceStarted = Time.time - timeStartedLerping ; float percentageComplete = timeSinceStarted / ( lerpSpeed ) ; transform.position = Vector3.MoveTowards ( transform.position , target.transform.position , moveSpeed * Time.deltaTime ) ; transform.rotation = Quaternion.Lerp ( fromRotation , toRotation , Mathf.Pow ( percentageComplete , ( float ) 1.2 ) ) ; if ( Vector3.Distance ( transform.position , target.transform.position ) < 0.1 & & percentageComplete > 0.99 ) { transform.position = target.transform.position ; transform.rotation = target.transform.rotation ; currentlyMoving = false ; } }"
private string abc = > `` def '' ; private string abc = `` def '' ;
"// May be public so we can display// content of file from different forms.public void DisplayFileContent ( string filePath ) { // Counting all entries . int countEntries = 0 ; // Encrypting/Decrypting data . EncryptDecrypt security = new EncryptDecrypt ( ) ; using ( OleDbConnection connection = new OleDbConnection ( ) ) { connection.ConnectionString = `` Provider=Microsoft.ACE.OLEDB.12.0 ; '' + `` Data Source= '' + filePath + `` ; '' + `` Persist Security Info=False ; '' + `` Jet OLEDB : Database Password= '' + hashPhrase.ShortHash ( storedAuth.Password ) + `` ; '' ; using ( OleDbCommand command = new OleDbCommand ( `` Select * FROM PersonalData '' , connection ) ) { OleDbDataReader read ; try { // Open database connection . connection.Open ( ) ; // Create a data reader . read = command.ExecuteReader ( ) ; // Clearing the textbox before proceeding . txtDisplay.Text = string.Empty ; // Checking if there is any data in the file . if ( read.HasRows ) { // Reading information from the file . while ( read.Read ( ) ) { // Count all entries read from the reader . countEntries++ ; // Reading all values from the file as string . // While each string is encrypted , we must decrypt them . // User name and password is the same as user provided // while authentication . txtDisplay.Text += `` === Entry ID : `` + read.GetValue ( 0 ) + `` === '' + Environment.NewLine ; txtDisplay.Text += `` Type : `` + security.Decrypt ( read.GetString ( 1 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; if ( ! read.IsDBNull ( 2 ) ) txtDisplay.Text += `` URL : `` + security.Decrypt ( read.GetString ( 2 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; if ( ! read.IsDBNull ( 3 ) ) txtDisplay.Text += `` Software Name : `` + security.Decrypt ( read.GetString ( 3 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; if ( ! read.IsDBNull ( 4 ) ) txtDisplay.Text += `` Serial Code : `` + security.Decrypt ( read.GetString ( 4 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; if ( ! read.IsDBNull ( 5 ) ) txtDisplay.Text += `` User Name : `` + security.Decrypt ( read.GetString ( 5 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; if ( ! read.IsDBNull ( 6 ) ) txtDisplay.Text += `` Password : `` + security.Decrypt ( read.GetString ( 6 ) , storedAuth.Password , storedAuth.UserName ) + Environment.NewLine ; txtDisplay.Text += Environment.NewLine ; } } else { txtDisplay.Text = `` There is nothing to display ! `` + `` You must add something before so I can display anything here . `` ; } // Displaying number of entries in the status bar . tsslStatus.Text = `` A total of `` + countEntries + `` entries . `` ; // Selecting 0 character to make sure text // is n't completly selected . txtDisplay.SelectionStart = 0 ; command.ExecuteNonQuery ( ) ; } catch ( Exception ex ) { MessageBox.Show ( `` Error : `` + ex.Message ) ; } } } }"
"Color.FromArgb ( 255,255,0,0 ) ; c.A = 255 ; c.R = 255 ; c.G = 0 ; c.B = 0 ;"
"ProfilePropertyIDProfilePropertyDefinitionIDUserIDPropertyValue ProfilePropertyDefinitionIDPropertyName ProfilePropertyIDProfilePropertyDefinitionUserPropertyValue ProfilePropertyID = -1ProfilePropertyDefinition = { ProfilePropertyDefinitionID = 3 PropertyName = `` First Name '' } User = /*Not going to put details here , but assume the user object is there*/PropertyValue = `` Matt '' public int AddProfile ( ProfilePropertyViewModel property ) { int objId = -1 ; ProfileProperty profile = null ; if ( ValidateProfile ( property ) ) { try { using ( DbTransaction transaction = _profileRepository.BeginTransaction ( ) ) { profile = ProfilePropertyTranslator.ViewToDomain ( property ) ; profile.User = _userRepository.SelectByKey ( UserColumns.UserName , property.UserName ) ; profile.ProfilePropertyDefinitionReference.EntityKey = new EntityKey ( `` GraffytysDBEntities.ProfilePropertyDefinition '' , `` ProfilePropertyDefinitionID '' , property.ProfilePropertyDefinitionID ) ; _profileRepository.Add ( profile ) ; if ( _profileRepository.Save ( ) > = 0 ) { transaction.Commit ( ) ; objId = property.ProfilePropertyId ; } } } catch ( Exception ex ) { throw ex ; } } return objId ; } public void Add ( E entity ) { _ctx.AddObject ( entity.GetType ( ) .Name , entity ) ; }"
public class personDetails { public string City ; public string Name ; } Name CityJohn | LondonJane | LondonTom | New YorkBob | New YorkFred | New York John TomJohn Bob John FredJane TomJane BobJane Fred List < personDetails > personList = new List < personDetails > ( ) ; //populate listvar groupedPersons = personList.GroupBy ( c = > c.City ) ; foreach ( var item1 in groupedPersons [ 0 ] ) { foreach ( var item2 in groupedPersons [ 1 ] ) { Console.WriteLine ( item1.Name + `` `` + item2.Name ) ; } }
public static string reversesentence ( string one ) { StringBuilder builder = new StringBuilder ( ) ; string [ ] split = one.Split ( ' ' ) ; for ( int i = split.Length-1 ; i > = 0 ; i -- ) { builder.Append ( split [ i ] ) ; builder.Append ( `` `` ) ; } return builder.ToString ( ) ; }
`` 123456 '' will return true '' 456789 '' will return true '' 345678 '' will return true '' 123467 '' will return false '' 901234 '' will return false
"class MyFormatter : IFormatProvider , ICustomFormatter { public object GetFormat ( Type formatType ) { Console.WriteLine ( `` GetFormat '' ) ; return this ; } public string Format ( string format , object arg , IFormatProvider formatProvider ) { Console.WriteLine ( `` Format '' ) ; return `` foo '' ; } } int number = 10 ; Console.WriteLine ( number.ToString ( new MyFormatter ( ) ) ) ; GetFormat10 GetFormatFormatfoo"
"byte [ ] b = new byte [ ] { 85 , 85 , 67 , 75 } ;"
`` C : \Program Files ( x86 ) \Windows Kits\10\bin\10.0.15063.0\x64\makepri.exe '' createconfig /o /cf priconfig.xml /dq en-US '' C : \Program Files ( x86 ) \Windows Kits\10\bin\10.0.15063.0\x64\makepri.exe '' new /o /pr . /cf priconfig.xml < Extensions > < desktop2 : Extension Category= '' windows.firewallRules '' > < desktop2 : FirewallRules Executable= '' app\MyWpfApp.exe '' > < desktop2 : Rule Direction= '' in '' IPProtocol= '' TCP '' Profile= '' all '' / > < desktop2 : Rule Direction= '' in '' IPProtocol= '' UDP '' Profile= '' all '' / > < /desktop2 : FirewallRules > < /desktop2 : Extension > < /Extensions >
Request.QueryString [ `` accountname '' ]
"public static void DoSomething < T > ( IEnumerable < T > items ) { // Whatever // For debugging Console.WriteLine ( `` DoSomething < T > ( IEnumerable < T > items ) '' ) ; } public static void DoSomething < T > ( params T [ ] items ) { // Whatever // For debugging Console.WriteLine ( `` DoSomething < T > ( params T [ ] items ) '' ) ; } var items = new List < string > { `` foo '' , `` bar '' } ; DoSomething ( items ) ; DoSomething ( `` foo '' , `` bar '' ) ;"
"// Calculate time between spawning bricksfloat spawnTick = fltSpawnSpeed * fltSpawnSpeedModifier ; fltSpawn += elapsed ; if ( fltSpawn > spawnTick ) { // Fetch a new random block . poNextLayer [ intNextSpawn ] = RandomSpawn ( ) ; // Increment counter intNextSpawn++ ; // Max index reached if ( intNextSpawn == 12 ) { // Push the line up . Returns true if lines go over the top . if ( PushLine ( ) ) { gmStateNew = GameState.GameOver ; gmStateOld = GameState.Playing ; } // Game still in play . else { // Reset spawn row to empty bricks . for ( int i = 0 ; i < 12 ; i++ ) poNextLayer [ i ] = new PlayObject ( ObjectType.Brick , PlayColor.Neutral , Vector2.Zero ) ; intNextSpawn = 0 ; // Reset spawn counter . intLines -- ; // One less line to go ... } } fltSpawn -= spawnTick ; } private bool PushLine ( ) { // Go through the playfield top down . for ( int y = 14 ; y > = 0 ; y -- ) { // and left to right for ( int x = 0 ; x < 12 ; x++ ) { // Top row contains an active block ( GameOver ) if ( ( y == 14 ) & & ( poPlayField [ x , y ] .Active ) ) // Stop here return true ; else { // Not bottom row if ( y > 0 ) { // Copy from block below poPlayField [ x , y ] = poPlayField [ x , y - 1 ] ; // Move drawing position up 32px poPlayField [ x , y ] .MoveUp ( ) ; } // Bottom row else { // Copy from spawning row poPlayField [ x , y ] = poNextLayer [ x ] ; // Move drawing position up 32px ( plus 4 more ) poPlayField [ x , y ] .MoveUp ( 4 ) ; // Make the block active ( clickable ) poPlayField [ x , y ] .Active = true ; } } } } // Game still in play . return false ; }"
"public static void OpenIdInvoice ( string wdlName , string IdInvoice , Form sender ) { MessageBox.Show ( string.Format ( `` ¿ { 0 } '' , IdInvoice ) ) ; proc.Arguments = string.Format ( `` { 0 } ¿ { 1 } ¿ { 2 } ¿ { 3 } ¿ { 4 } ¿­ { 5 } '' , session.SessionId.ToString ( ) , Session.GetCurrentDatabaseName ( ) , session.Librairie , wdlName , `` '' , IdInvoice ) ; System.Windows.Forms.MessageBox.Show ( proc.Arguments ) ; var proc = new System.Diagnostics.ProcessStartInfo ( `` Achat.exe '' ) ; System.Windows.Forms.MessageBox.Show ( string.Format ( `` ¿ { 0 } '' , args ) ) ; proc.Arguments = string.Format ( @ '' { 0 } ¿ { 1 } ¿ { 2 } ¿ { 3 } ¿ { 4 } ¿­ { 5 } ¿ { 6 } '' , `` 12346 '' , //session.SessionId.ToString ( ) , `` fake DB '' , //Session.GetCurrentDatabaseName ( ) .ToString ( ) , `` false '' , //session.Librairie.ToString ( ) , `` myScreenName '' , //wdl.ToString ( ) , `` 123456 '' , `` Banana '' , `` 123456 '' //args.ToString ( ) , ) ; System.Windows.Forms.MessageBox.Show ( proc.Arguments ) ; System.Windows.Forms.MessageBox.Show ( args ) ;"
"public void LogWarning ( object aCategory , object anObject ) public static void LogWarning ( this CompositeLogger logger , string message = `` '' , params object [ ] parameters )"
"var handler = SomethingHappened ; if ( handler ! = null ) handler ( this , e ) ; var localFoo = this.memberFoo ; if ( localFoo ! = null ) localFoo.Bar ( localFoo.baz ) ; thing.memberFoo = new Foo ( 1234 ) ; thing.memberFoo = FooPool.Get ( ) .Reset ( 1234 ) ;"
var qry2 = context.viw_overview_1.Where ( i = > i.article_EAN17 == ean ) .Select ( i = > i.article_id ) .Take ( 200 ) ; ... WHERE [ Extent1 ] . [ article_EAN17 ] = @ p__linq__000.0960096ms in SSMS ... WHERE ( ( [ Extent1 ] . [ article_EAN17 ] = @ p__linq__0 ) AND ( NOT ( [ Extent1 ] . [ article_EAN17 ] IS NULL OR @ p__linq__0 IS NULL ) ) ) OR ( ( [ Extent1 ] . [ article_EAN17 ] IS NULL ) AND ( @ p__linq__0 IS NULL ) ) 45.3665362ms in SSMS
Test Name : TestHelloWorldTest FullName : HelloApprovalTests.Class1.TestHelloWorldTest Source : C : \Users\Lassi\Documents\Visual Studio 2015\Projects\HelloApprovalTests\HelloApprovalTests\Class1.cs : line 14Test Outcome : FailedTest Duration : 0:00:00.01Result StackTrace : at ApprovalTests.Namers.UnitTestFrameworkNamer..ctor ( ) at ApprovalTests.Approvals. < .cctor > b__c ( ) at ApprovalTests.Approvals.GetDefaultNamer ( ) at ApprovalTests.Approvals.Verify ( IApprovalWriter writer ) at ApprovalTests.Approvals.Verify ( String text ) at HelloApprovalTests.Class1.TestHelloWorld ( ) in C : \Users\Lassi\Documents\Visual Studio 2015\Projects\HelloApprovalTests\HelloApprovalTests\Class1.cs : line 15Result Message : System.MissingMethodException : Method not found : 'System.Diagnostics.StackTrace ApprovalUtilities.CallStack.Caller.get_StackTrace ( ) ' . using ApprovalTests ; using ApprovalTests.Reporters ; using NUnit.Framework ; namespace HelloApprovalTests { [ TestFixture ] [ UseReporter ( typeof ( DiffReporter ) ) ] public class Class1 { [ Test ] public void TestHelloWorld ( ) { Approvals.Verify ( `` Hello World Welcome to ApprovalTests '' ) ; } } }
public event Action < string > MyEvent = delegate { } ; if ( this.MyEvent ! = null ) { this.MyEvent ( `` OMG osh '' ) ; } this.MyEvent ( `` OMG osh '' ) ; private Action < string > myDelegate ; public event Action < string > MyEvent { add { this.myDelegate += value ; } remove { this.myDelegate -= value ; } }
public IEnumerable Derp { get { yield return new SomeObject ( ) ; } } // These definitions do NOT workpublic IEnumerable Derp = > yield return new SomeObject ( ) ; public IEnumerable Derp = > yield new SomeObject ( ) ;
"new Client { ClientId = `` nativeapptest '' , ClientName = `` Native App Test '' , Enabled = true , RequireClientSecret = false , AllowedGrantTypes = GrantTypes.Code , RedirectUris = { `` com.mysite.nativeapp.12365789785256-buv2dwer7jjjjv5fckasdftn367psbrlb : /home '' } , AllowedScopes = { IdentityServerConstants.StandardScopes.OpenId , IdentityServerConstants.StandardScopes.Profile , `` MyScope '' } , RequirePkce = false , AllowOfflineAccess = true , RequireConsent = false }"
"string [ ] data = { `` a '' , `` a '' , `` b '' } ; a var a = data.Distinct ( ) .ToList ( ) ; var b = a.Except ( a ) .ToList ( ) ;"
"class Base { public void Display ( ) { Console.WriteLine ( `` Base '' ) ; } } class Derived : Base { } class Program { static void Main ( string [ ] args ) { var d = new Derived ( ) ; if ( d is Base ) { var b = ( Base ) d ; d.Display ( ) ; } } } .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint // Code size 27 ( 0x1b ) .maxstack 2 .locals init ( [ 0 ] class ConsoleApplication1.Derived d , [ 1 ] bool V_1 , [ 2 ] class ConsoleApplication1.Base b ) IL_0000 : nop IL_0001 : newobj instance void ConsoleApplication1.Derived : :.ctor ( ) IL_0006 : stloc.0 // set derived ( d ) IL_0007 : ldloc.0 // load derived IL_0008 : ldnull // push a null reference IL_0009 : ceq // and compare with d ! ? IL_000b : stloc.1 IL_000c : ldloc.1 IL_000d : brtrue.s IL_001a IL_000f : nop IL_0010 : ldloc.0 IL_0011 : stloc.2 IL_0012 : ldloc.0 IL_0013 : callvirt instance void ConsoleApplication1.Base : :Display ( ) IL_0018 : nop IL_0019 : nop IL_001a : ret } // end of method Program : :Main"
var ctors = typeof ( T ) .GetConstructors ( ) ;
"public static void DoStuff < TModelDetail , TValue > ( Expression < Func < TModelDetail , TValue > > expr , TModelDetail detail ) { var memberExpression = expr.Body as MemberExpression ; if ( memberExpression == null & & expr.Body is UnaryExpression ) { memberExpression = ( ( UnaryExpression ) expr.Body ) .Operand as MemberExpression ; } var pe = Expression.Parameter ( typeof ( TModelDetail ) , `` x '' ) ; var convert = Expression.Convert ( memberExpression , typeof ( object ) ) ; var wee = Expression.Lambda < Func < TModelDetail , object > > ( convert , pe ) ; var hey = wee.Compile ( ) ( detail ) ; }"
"items.GroupBy ( x = > new { x.date.Minute , x.date.Hour } ) .Select ( x = > new TransferObject { Minute = x.Key.Minute , Hour = x.Key.Hour , Count = x.Count ( ) , Day = date } ) .OrderBy ( x = > x.Hour ) .ThenBy ( x = > x.Minute ) .ToList ( ) ; date end_date2015-05-15 09:52:15.650 2015-05-15 09:55:38.0972015-05-15 09:52:15.633 2015-05-15 09:52:16.0972015-05-15 09:52:11.633 2015-05-15 09:52:13.0472015-05-15 09:51:49.097 2015-05-15 09:55:17.6872015-05-15 09:51:49.087 2015-05-15 09:56:17.510 { Count:2 ; Hour:9 ; Minute:51 } { Count:3 ; Hour:9 ; Minute:52 } { Count:2 ; Hour:9 ; Minute:51 } { Count:5 ; Hour:9 ; Minute:52 } { Count:3 ; Hour:9 ; Minute:53 } { Count:3 ; Hour:9 ; Minute:54 } { Count:3 ; Hour:9 ; Minute:55 } { Count:2 ; Hour:9 ; Minute:56 }"
"public ImagesGetModelView Get ( int start , int count ) { if ( count < = 0 ) count = 9 ; else if ( count > ImageHandler.MaxResult ) count = ImageHandler.MaxResult ; IQueryable < Image > imagesList = ImagesHandler.FetchRangeScore ( start , count ) .Where ( m = > m.Domain == Database.Enums.ImageDomain.Gfycat ) ; //Works using list : ( //var list = imagesList.ToList ( ) ; //Select all subreddits once //Returns 4 instead of 36 if not using the list ... //Returns 1 instead of 2 with Distinct ( ) if not using the list IEnumerable < Subreddit > subreddits = imagesList .Select ( m = > m.Subreddit ) ; //.Distinct ( ) ; ImagesGetModelView result = new ImagesGetModelView ( ) { Items = imagesList , Subreddits = subreddits } ; return result ; } public IQueryable < Image > FetchRangeScore ( int a_start , int a_count ) { return Repository.AllQueryable ( ) .OrderByDescending ( m = > m.Score ) .Skip ( a_start ) .Take ( a_count ) ; } public IQueryable < Image > FetchRangeScore ( int a_start , int a_count ) { return Repository.AllQueryable ( ) .Where ( m = > m.Domain == Database.Enums.ImageDomain.Gfycat ) .OrderByDescending ( m = > m.Score ) .Skip ( a_start ) .Take ( a_count ) ; }"
"Exception thrown at 0x00007FFF54D7A1C8 ( KernelBase.dll ) in App.exe : 0x40080201 : WinRT originate error ( parameters : 0x000000008000000E , 0x000000000000002C , 0x0000006E46EAE9B0 ) .Exception thrown at 0x00007FFF54D7A1C8 ( KernelBase.dll ) in App.exe : 0x40080201 : WinRT originate error ( parameters : 0x000000008000000E , 0x0000000000000046 , 0x0000006E46EAE630 ) .The thread 0x1be8 has exited with code 1 ( 0x1 ) .The thread 0xfa8 has exited with code 1 ( 0x1 ) .The thread 0x115c has exited with code 1 ( 0x1 ) .The thread 0x730 has exited with code 1 ( 0x1 ) .The thread 0xed4 has exited with code 1 ( 0x1 ) .The thread 0x1894 has exited with code 1 ( 0x1 ) .The thread 0x18a0 has exited with code 1 ( 0x1 ) .The thread 0x194c has exited with code 1 ( 0x1 ) .The thread 0x1a3c has exited with code 1 ( 0x1 ) .The thread 0x1988 has exited with code 1 ( 0x1 ) .The thread 0x16ec has exited with code 1 ( 0x1 ) .The thread 0x1584 has exited with code 1 ( 0x1 ) .The thread 0xfd0 has exited with code 1 ( 0x1 ) .The thread 0xd8c has exited with code 1 ( 0x1 ) .The thread 0xcec has exited with code 1 ( 0x1 ) .The thread 0x16b4 has exited with code 1 ( 0x1 ) .The thread 0x12f8 has exited with code 1 ( 0x1 ) .The thread 0x146c has exited with code 1 ( 0x1 ) .The thread 0x36c has exited with code 1 ( 0x1 ) .The thread 0x1854 has exited with code 1 ( 0x1 ) .The thread 0x1ae4 has exited with code 1 ( 0x1 ) .The thread 0xa38 has exited with code 1 ( 0x1 ) .The thread 0x230 has exited with code 1 ( 0x1 ) .The program ' [ 3840 ] App.exe ' has exited with code 1 ( 0x1 ) . Exception thrown at 0x00007FFF54D7A1C8 in App.exe : Microsoft C++ exception : _com_error at memory location 0x000000EE2788E9D0 ."
"public static class ControllerHelpers { public static void AddRuleViolations ( this ModelStateDictionary modelState , IEnumerable < RuleViolation > errors ) { foreach ( RuleViolation issue in errors ) modelState.AddModelError ( issue.PropertyName , issue.ErrorMessage ) ; } }"
"static IEnumerator executeAITurn ( Turn turn ) { Vector2 [ ] move = mctsManager.mcts ( new State ( sections , null , turn ) , AIIterations ) [ 0 , 0 ] .metaData.lastMove ; yield return Ninja.JumpToUnity ; input ( move , true ) ; yield return Ninja.JumpBack ; Debug.Log ( `` DONE ! `` ) ; } gameManager.StartCoroutineAsync ( executeAITurn ( ( AITurn == Turn.X ) ? Turn.O : Turn.X ) ) ;"
"void RegisterRoutes ( RouteCollection routes ) { routes.RouteExistingFiles = true ; routes.MapPageRoute ( `` about '' , `` about/us '' , `` ~/about/company '' , false ) ; }"
"{ 1 , 2 , 3 , 4 } //list1 { 2 , 3 , 5 , 6 } //list2 ... { 3 , 4 , 5 } //listN { 1 , 2 , 3 , 4 , null , null } //list1 { null , 2 , 3 , null , 5 , 6 } //list2 ... { null , null , 3 , 4 , 5 , null } //listN"
Class MyClass ( ) { public string SomeProperty { get ; set ; } = `` SomeValue '' ; } var foo= new MyClass ( ) ; var value = foo.GetType ( ) .GetProperty ( `` SomeProperty '' ) .GetValue ( foo ) ; typeof ( MyClass ) .GetProperty ( `` SomeProperty '' ) .GetValue ( ) ;
"var cancellationToken = cts.Token ; var task = Task.Run ( ( ) = > { while ( true ) { Thread.Sleep ( 300 ) ; if ( cancellationToken.IsCancellationRequested ) { throw new OperationCanceledException ( ) ; } } } , cancellationToken ) .ContinueWith ( t = > { Console.WriteLine ( t.Status ) ; } ) ; Thread.Sleep ( 200 ) ; cts.Cancel ( ) ; // ..//while ( true ) { Thread.Sleep ( 300 ) ; if ( cancellationToken.IsCancellationRequested ) { throw new OperationCanceledException ( ) ; } } //.."
"public override void DoUpdate ( float dt , float dx , float [ ] [ ] lowerLayersHeight ) { int x , y ; float totalHeight , dhL , dhR , dhT , dhB ; float dt_A_g_l = dt * _A * g / dx ; //all constants for equation 2 float K ; // scaling factor for the outﬂow ﬂux float dV ; for ( x=1 ; x < = N ; x++ ) { for ( y=1 ; y < = N ; y++ ) { // // 3.2.1 Outﬂow Flux Computation // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- totalHeight = lowerLayersHeight [ x ] [ y ] + _height [ x ] [ y ] ; dhL = totalHeight - lowerLayersHeight [ x-1 ] [ y ] - _height [ x-1 ] [ y ] ; // ( 3 ) dhR = totalHeight - lowerLayersHeight [ x+1 ] [ y ] - _height [ x+1 ] [ y ] ; dhT = totalHeight - lowerLayersHeight [ x ] [ y+1 ] - _height [ x ] [ y+1 ] ; dhB = totalHeight - lowerLayersHeight [ x ] [ y-1 ] - _height [ x ] [ y-1 ] ; _tempFlux [ x ] [ y ] .left = Mathf.Max ( 0.0f , _flux [ x ] [ y ] .left + dt_A_g_l * dhL ) ; // ( 2 ) _tempFlux [ x ] [ y ] .right = Mathf.Max ( 0.0f , _flux [ x ] [ y ] .right + dt_A_g_l * dhR ) ; _tempFlux [ x ] [ y ] .top = Mathf.Max ( 0.0f , _flux [ x ] [ y ] .top + dt_A_g_l * dhT ) ; _tempFlux [ x ] [ y ] .bottom = Mathf.Max ( 0.0f , _flux [ x ] [ y ] .bottom + dt_A_g_l * dhB ) ; float totalFlux = _tempFlux [ x ] [ y ] .left + _tempFlux [ x ] [ y ] .right + _tempFlux [ x ] [ y ] .top + _tempFlux [ x ] [ y ] .bottom ; if ( totalFlux > 0 ) { K = Mathf.Min ( 1.0f , _height [ x ] [ y ] * dx * dx / totalFlux / dt ) ; // ( 4 ) _tempFlux [ x ] [ y ] .left = K * _tempFlux [ x ] [ y ] .left ; // ( 5 ) _tempFlux [ x ] [ y ] .right = K * _tempFlux [ x ] [ y ] .right ; _tempFlux [ x ] [ y ] .top = K * _tempFlux [ x ] [ y ] .top ; _tempFlux [ x ] [ y ] .bottom = K * _tempFlux [ x ] [ y ] .bottom ; } //swap temp and the real one after the for-loops // // 3.2.2 Water Surface // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- dV = dt * ( //sum in _tempFlux [ x-1 ] [ y ] .right + _tempFlux [ x ] [ y-1 ] .top + _tempFlux [ x+1 ] [ y ] .left + _tempFlux [ x ] [ y+1 ] .bottom //minus sum out - _tempFlux [ x ] [ y ] .right - _tempFlux [ x ] [ y ] .top - _tempFlux [ x ] [ y ] .left - _tempFlux [ x ] [ y ] .bottom ) ; // ( 6 ) _tempHeight [ x ] [ y ] = _height [ x ] [ y ] + dV / ( dx*dx ) ; // ( 7 ) //swap temp and the real one after the for-loops } } Helpers.Swap ( ref _tempFlux , ref _flux ) ; Helpers.Swap ( ref _tempHeight , ref _height ) ; }"
public string foo { get ; set ; } public string foo { get { /*some code to check foo for nulls etc*/ } ; set ; } private string _foo = null ; public string foo { get { _foo==null ? _foo= '' hello '' ; return _foo ; } set { _foo=value ; } }
"public string MakeRequest ( string requestUrl , object data ) { HttpWebRequest request = ( HttpWebRequest ) WebRequest.Create ( requestUrl ) ; request.ContentType = `` application/json '' ; request.KeepAlive = false ; request.Headers.Add ( `` Authorization '' , `` BEARER `` + apiToken ) ; System.Net.ServicePointManager.Expect100Continue = false ; if ( data ! = null ) { request.Method = `` POST '' ; using ( var streamWriter = new StreamWriter ( request.GetRequestStream ( ) ) ) { string json = new JavaScriptSerializer ( ) .Serialize ( data ) ; streamWriter.Write ( json ) ; streamWriter.Flush ( ) ; streamWriter.Close ( ) ; } } else request.Method = `` GET '' ; using ( HttpWebResponse response = request.GetResponse ( ) as HttpWebResponse ) { if ( response.StatusCode ! = HttpStatusCode.OK & & response.StatusCode ! = HttpStatusCode.Created ) throw new Exception ( String.Format ( `` Server error ( HTTP { 0 } : { 1 } ) . `` , response.StatusCode , response.StatusDescription ) ) ; string Charset = response.CharacterSet ; Encoding encoding = Encoding.GetEncoding ( Charset ) ; StreamReader reader = new StreamReader ( response.GetResponseStream ( ) , encoding ) ; return reader.ReadToEnd ( ) ; } } `` �\b\0\0\0\0\0\0�V�M , .I-�/JI-R��V3 < S����L�L , �L��jk [ ��� & \0\0\0 '' { `` MasterOrder '' : { `` OrderId '' : `` 65250824 '' } }"
Marshall.FinalReleaseComObject ( obj ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; GC.Collect ( ) ; GC.WaitForPendingFinalizers ( ) ; Marshall.FinalReleaseComObject ( obj ) ;
"public string PostsAsSlides ( PostCollection posts , int PostsPerSlide ) { StringBuilder sb = new StringBuilder ( ) ; decimal slides = Math.Round ( ( decimal ) posts.Count / ( decimal ) PostsPerSlide , 3 ) ; int NumberOfSlides = Convert.ToInt32 ( Math.Ceiling ( slides ) ) ; for ( int i = 0 ; i < NumberOfSlides ; i++ ) { int PostCount = 0 ; sb.Append ( `` < div class=\ '' slide\ '' > \n '' ) ; foreach ( Post post in posts.Skip < Post > ( i * PostsPerSlide ) ) { PostCount += 1 ; string CssClass = `` slide-block '' ; if ( PostCount == 1 ) CssClass += `` first '' ; else if ( PostCount == PostsPerSlide ) CssClass += `` last '' ; sb.Append ( string.Format ( `` < div class=\ '' { 0 } \ '' > \n '' , CssClass ) ) ; sb.Append ( string.Format ( `` < a href=\ '' { 0 } \ '' rel=\ '' prettyPhoto [ gallery ] \ '' title=\ '' { 1 } \ '' > < img src=\ '' { 2 } \ '' alt=\ '' { 3 } \ '' / > < /a > \n '' , post.Custom ( `` Large Image '' ) , post.MetaDescription , post.ImageUrl , post.Title ) ) ; sb.Append ( string.Format ( `` < a class=\ '' button-launch-website\ '' href=\ '' { 0 } \ '' target=\ '' _blank\ '' > Launch Website < /a > \n '' , post.Custom ( `` Website Url '' ) ) ) ; sb.Append ( `` < /div > < ! -- .slide-block -- > \n '' ) ; if ( PostCount == PostsPerSlide ) break ; } sb.Append ( `` < /div > < ! -- .slide -- > \n '' ) ; } return sb.ToString ( ) ; }"
"class Table { public static Dictionary < int , Table > Tables = new Dictionary < int , Table > ( ) ; ... public table ( int ID ) // constructor { ... Tables.Add ( ID , this ) ; } } class Program { public Dictionary < int , Table > Tables = new Dictionary < int , Table > ( ) ; static void Main ( string [ ] args ) { ... Table A = new Table ( 10 ) ; Tables.Add ( 10 , A ) ; } }"
"public class ImageGalleryPageModel { public ObservableCollection < ImageModel > Images { get { return images ; } } private ObservableCollection < ImageModel > images = new ObservableCollection < ImageModel > ( ) ; } private async Task ExecutePickCommand ( ) { MediaFile file = await CrossMedia.Current.PickPhotoAsync ( ) ; if ( file == null ) return ; byte [ ] imageAsBytes ; using ( MemoryStream memoryStream = new MemoryStream ( ) ) { file.GetStream ( ) .CopyTo ( memoryStream ) ; file.Dispose ( ) ; imageAsBytes = memoryStream.ToArray ( ) ; } if ( imageAsBytes.Length > 0 ) { IImageResizer resizer = DependencyService.Get < IImageResizer > ( ) ; imageAsBytes = resizer.ResizeImage ( imageAsBytes , 1080 , 1080 ) ; ImageSource imageSource = ImageSource.FromStream ( ( ) = > new MemoryStream ( imageAsBytes ) ) ; Images.Add ( new ImageModel { Source = imageSource , OrgImage = imageAsBytes } ) ; } } private void AddTheImages ( int imageIssueId ) { var imageData = App.Client.GetImage ( imageIssueId ) ; byte [ ] imageAsBytes = imageData.Item1 ; if ( imageAsBytes.Length > 0 ) { IImageResizer resizer = DependencyService.Get < IImageResizer > ( ) ; imageAsBytes = resizer.ResizeImage ( imageAsBytes , 1080 , 1080 ) ; ImageSource imageSource = ImageSource.FromStream ( ( ) = > new MemoryStream ( imageAsBytes ) ) ; ImageGalleryViewModel.Images.Add ( new ImageModel { Source = imageSource , OrgImage = imageAsBytes } ) ; } } < freshMvvm : FreshBaseContentPage NavigationPage.HasNavigationBar= '' False '' xmlns= '' http : //xamarin.com/schemas/2014/forms '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2009/xaml '' xmlns : freshMvvm= '' clr-namespace : FreshMvvm ; assembly=FreshMvvm '' xmlns : converters= '' clr-namespace : ASFT.Converters ; assembly=ASFT '' xmlns : controls= '' clr-namespace : ASFT.Controls ; assembly=ASFT '' x : Class= '' ASFT.Pages.IssuePage '' Padding= '' 4,25,4,4 '' x : Name= '' IssuePages '' > ... < ! -- PictureGallery -- > < Label Text= '' IMAGES '' HorizontalTextAlignment= '' Start '' VerticalTextAlignment= '' Center '' Style= '' { StaticResource Labelfont } '' TextColor= '' White '' / > < Grid BindingContext= '' { Binding ImageGalleryViewModel } '' > < Grid.RowDefinitions > < RowDefinition Height= '' 128 '' / > < RowDefinition Height= '' * '' / > < /Grid.RowDefinitions > < controls : ImageGalleryControl Grid.Row= '' 0 '' ItemsSource= '' { Binding Images } '' > < controls : ImageGalleryControl.ItemTemplate > < DataTemplate > < Image Source= '' { Binding Source } '' Aspect= '' AspectFit '' > < Image.GestureRecognizers > < TapGestureRecognizer Command= '' { Binding Path=BindingContext.PreviewImageCommand , Source= { x : Reference IssuePages } } '' CommandParameter= '' { Binding ImageId } '' / > < /Image.GestureRecognizers > < /Image > < /DataTemplate > < /controls : ImageGalleryControl.ItemTemplate > < /controls : ImageGalleryControl > < Grid Grid.Row= '' 1 '' > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' * '' / > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < Button Grid.Column= '' 0 '' Text= '' Add photo '' Command= '' { Binding CameraCommand } '' / > < Button Grid.Column= '' 1 '' Text= '' Pick photo '' Command= '' { Binding PickCommand } '' / > < /Grid > < /Grid > < Label Grid.Column= '' 0 '' Grid.Row= '' 3 '' Grid.ColumnSpan= '' 3 '' Text= '' { Binding ImageText } '' HorizontalTextAlignment= '' Center '' VerticalTextAlignment= '' Center '' TextColor= '' White '' / > ... < /freshMvvm : FreshBaseContentPage > private readonly StackLayout imageStack ; public ImageGalleryControl ( ) { this.Orientation = ScrollOrientation.Horizontal ; imageStack = new StackLayout { Orientation = StackOrientation.Horizontal } ; this.Content = imageStack ; } public new IList < View > Children { get { return imageStack.Children ; } } public static readonly BindableProperty ItemsSourceProperty = BindableProperty.Create < ImageGalleryControl , IList > ( view = > view.ItemsSource , default ( IList ) , BindingMode.TwoWay , propertyChanging : ( bindableObject , oldValue , newValue ) = > { ( ( ImageGalleryControl ) bindableObject ) .ItemsSourceChanging ( ) ; } , propertyChanged : ( bindableObject , oldValue , newValue ) = > { ( ( ImageGalleryControl ) bindableObject ) .ItemsSourceChanged ( bindableObject , oldValue , newValue ) ; } ) ; public IList ItemsSource { get { return ( IList ) GetValue ( ItemsSourceProperty ) ; } set { SetValue ( ItemsSourceProperty , value ) ; } } private void ItemsSourceChanging ( ) { if ( ItemsSource == null ) return ; } private void CreateNewItem ( IList newItem ) { View view = ( View ) ItemTemplate.CreateContent ( ) ; if ( view is BindableObject bindableObject ) bindableObject.BindingContext = newItem ; imageStack.Children.Add ( view ) ; } private void ItemsSourceChanged ( BindableObject bindable , IList oldValue , IList newValue ) { if ( ItemsSource == null ) return ; if ( newValue is INotifyCollectionChanged notifyCollection ) { notifyCollection.CollectionChanged += ( sender , args ) = > { if ( args.NewItems ! = null ) { if ( args.NewItems.Count > 0 ) { foreach ( object newItem in args.NewItems ) { View view = ( View ) ItemTemplate.CreateContent ( ) ; if ( view is BindableObject bindableObject ) bindableObject.BindingContext = newItem ; imageStack.Children.Add ( view ) ; } } } else { imageStack.Children.Clear ( ) ; foreach ( object item in ItemsSource ) { View view = ( View ) ItemTemplate.CreateContent ( ) ; BindableObject bindableObject = ( BindableObject ) view ; if ( bindableObject ! = null ) bindableObject.BindingContext = item ; imageStack.Children.Add ( view ) ; } } if ( args.OldItems ! = null ) { // not supported } } ; } } public DataTemplate ItemTemplate { get ; set ; } public static readonly BindableProperty SelectedItemProperty = BindableProperty.Create < ImageGalleryControl , object > ( view = > view.SelectedItem , null , BindingMode.TwoWay , propertyChanged : ( bindable , oldValue , newValue ) = > { ( ( ImageGalleryControl ) bindable ) .UpdateSelectedIndex ( ) ; } ) ; public object SelectedItem { get { return GetValue ( SelectedItemProperty ) ; } set { SetValue ( SelectedItemProperty , value ) ; } } private void UpdateSelectedIndex ( ) { if ( SelectedItem == BindingContext ) return ; SelectedIndex = Children .Select ( c = > c.BindingContext ) .ToList ( ) .IndexOf ( SelectedItem ) ; } public static readonly BindableProperty SelectedIndexProperty = BindableProperty.Create < ImageGalleryControl , int > ( carousel = > carousel.SelectedIndex , 0 , BindingMode.TwoWay , propertyChanged : ( bindable , oldValue , newValue ) = > { ( ( ImageGalleryControl ) bindable ) .UpdateSelectedItem ( ) ; } ) ; public int SelectedIndex { get { return ( int ) GetValue ( SelectedIndexProperty ) ; } set { SetValue ( SelectedIndexProperty , value ) ; } } private void UpdateSelectedItem ( ) { SelectedItem = SelectedIndex > -1 ? Children [ SelectedIndex ] .BindingContext : null ; } }"
"string input = `` aWesdE '' ; string match = `` ( . * ) '' ; string replacement = `` http : //myserver.com/ $ 1.jpg '' ; string output = Regex.Replace ( input , match , replacement , RegexOptions.IgnoreCase | RegexOptions.Singleline ) ;"
// Common SmtpEmailGateway librarypublic class SmtpEmailGateway : IEmailGateway { public Task SendEmailAsync ( MailMessage mailMessage ) { using ( var smtpClient = new SmtpClient ( ) ) { return smtpClient.SendMailAsync ( mailMessage ) ; } } } // Caller # 1 code - Often throws TaskCanceledExceptionpublic async Task Caller1 ( ) { // setup code here var smtpEmailGateway = new SmtpEmailGateway ( ) ; await smtpEmailGateway.SendEmailAsync ( myMailMessage ) ; } // Caller # 2 code - No problemspublic Task Caller2 ( ) { // setup code here var smtpEmailGateway = new SmtpEmailGateway ( ) ; return smtpEmailGateway.SendEmailAsync ( myMailMessage ) ; }
"// Play the first beataudio.PlayOneShot ( beat ) ; // Show 1st heartbeat border flashTweenAlpha.Begin ( heartbeatPanel.gameObject , 0.1f , currentStress ) ; yield return new WaitForSeconds ( 0.1f ) ; TweenAlpha.Begin ( heartbeatPanel.gameObject , 0.5f , 0 ) ; yield return new WaitForSeconds ( interval ) ; // Play the second beataudio.PlayOneShot ( beat ) ; // Show 2nd heartbeat border flashTweenAlpha.Begin ( heartbeatPanel.gameObject , 0.1f , currentStress ) ; yield return new WaitForSeconds ( 0.1f ) ; TweenAlpha.Begin ( heartbeatPanel.gameObject , 0.5f , 0 ) ; yield return new WaitForSeconds ( interval * 2 ) ; StartCoroutine ( PlayBeat ( currentStress , interval ) ) ; StartCoroutine ( PlayBeat ( currentStress , interval * 2 ) ) ; // ... IEnumerator PlayBeat ( float currentStress , float interval ) { audio.PlayOneShot ( beat ) ; TweenAlpha.Begin ( heartbeatPanel.gameObject , 0.1f , currentStress ) ; yield return new WaitForSeconds ( 0.1f ) ; TweenAlpha.Begin ( heartbeatPanel.gameObject , 0.5f , 0 ) ; yield return new WaitForSeconds ( interval ) ; }"
"public class Foo { public Foo ( DateTime ? startFrom ) { _startFrom = startFrom ; } } var context = new Foo ( new DateTime ( 2012 , 7 , 15 , 11 , 2 , 10 , 2 ) ) ; // 2 miliseconds"
public List < Orders > RetrieveOrders ( ) { //code goes here }
"helperClass.SomeData = helperClass.HasData ? GetSomeData ( ) : GetSomeOtherData ( ) ; Debug.Assert ( helperClass.SomeData ! = null ) ; public class SomeClass { public bool HasData ; public object SomeData ; private SomeClass ( ) { HasData = false ; } public static void SomeAction ( ) { var helperClass = new SomeClass ( ) ; // Exhibits weird debugger behavior of having helperClass.SomeData = null after this line : helperClass.SomeData = helperClass.HasData ? GetSomeData ( ) : GetSomeOtherData ( ) ; // Note that trying helperClass.SomeData.ToString ( ) returns a debugger error saying SomeData is null // But this code is just fine //if ( helperClass.HasData ) { // helperClass.SomeData = GetSomeData ( ) ; // } //else { // helperClass.SomeData = GetSomeOtherData ( ) ; // } // In both cases though , after this line things are fine : Debug.Assert ( helperClass.SomeData ! = null ) ; } private static object GetSomeData ( ) { return new object ( ) ; } private static object GetSomeOtherData ( ) { return new object ( ) ; } }"
var results = MapResults ( await GetDataAsync ( ) ) ;
public class Program { static void Main ( ) { try { try { string s = null ; s.ToString ( ) ; } catch { Console.WriteLine ( `` inner catch '' ) ; throw ; } finally { Console.WriteLine ( `` inner finally '' ) ; } return ; } catch { Console.WriteLine ( `` outer catch '' ) ; throw ; } finally { Console.WriteLine ( `` outer finally '' ) ; } } }
"+ -- -- -- -- -+ -- -- -- -- + -- -- -- -- -- -- -- -+| RadioID | NodeID | SourceRadioID |+ -- -- -- -- -+ -- -- -- -- + -- -- -- -- -- -- -- -+| R0 | 1 | || R1 | 1 | || R2 | 1 | || R3 | 1 | || R4 | 1 | || R5 | 2 | || R6 | 2 | || R7 | 2 | R0 || R8 | 2 | || R9 | 2 | || R10 | 11 | || R11 | 11 | R9 || R12 | 11 | || R13 | 11 | |+ -- -- -- -- -+ -- -- -- -- + -- -- -- -- -- -- -- -+ List < int > dependentNode = GetChildNode ( 1 ) ; // int ParentNode public class RadioEntity { public string RadioID { get ; set ; } public int NodeID { get ; set ; } public string SourceRadioID { get ; set ; } } public class SampleDemo { public void SampleMethod ( ) { Func < int , int , List < int > > GetChildNode = null ; GetChildNode = ( x , y ) = > { return ( from _x in GetRadio ( ) where ( GetRadio ( ) .Where ( i = > i.NodeID == x ) .Select ( i = > i.RadioID ) ) .Contains ( _x.RadioID ) from _y in new [ ] { _x.NodeID } .Union ( GetChildNode ( _x.NodeID , y + 1 ) ) select _y ) .ToList < int > ( ) ; } ; var _res = GetChildNode ( 1 , 0 ) ; } public List < RadioEntity > GetRadio ( ) { List < RadioEntity > _returnVal = new List < RadioEntity > ( ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R0 '' , NodeID = 1 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R1 '' , NodeID = 1 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R2 '' , NodeID = 1 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R3 '' , NodeID = 1 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R4 '' , NodeID = 1 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R5 '' , NodeID = 2 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R6 '' , NodeID = 2 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R7 '' , NodeID = 2 , SourceRadioID = `` R0 '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R8 '' , NodeID = 2 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R9 '' , NodeID = 2 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R10 '' , NodeID = 11 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R11 '' , NodeID = 11 , SourceRadioID = `` R9 '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R12 '' , NodeID = 11 , SourceRadioID = `` '' } ) ; _returnVal.Add ( new RadioEntity ( ) { RadioID = `` R13 '' , NodeID = 11 , SourceRadioID = `` '' } ) ; return _returnVal ; } }"
"double someNumber = .123 + .456 * Math.Pow ( Math.E , .789 * Math.Pow ( ( homeIndex + .22 ) , .012 ) ) ;"
{ public string A { get ; set ; } public int B { get ; set ; } public decimal C { get ; set ; } } public Bar Create ( Foo foo ) { var bar = new Bar ( ) ; bar.A = foo.A ; bar.B = foo.B ; bar.C = foo.C ; return bar ; }
"public class MyBackgroundService : BackgroundService { private readonly ILogger < MyBackgroundService > _logger ; public MyBackgroundService ( ILogger < MyBackgroundService > logger ) { _logger = logger ; } protected override async Task ExecuteAsync ( CancellationToken stoppingToken ) { _logger.LogInformation ( `` MyBackgroundService is starting . `` ) ; while ( ! stoppingToken.IsCancellationRequested ) { _logger.LogInformation ( `` MyBackgroundService task doing background work . `` ) ; var success = await DoOperation ( ) ; if ( ! success ) { // Try again in 5 seconds await Task.Delay ( 5000 , stoppingToken ) ; continue ; } await StopAsync ( stoppingToken ) ; } } }"
public MainPage ( ) { InitializeComponent ( ) ; var myTrue = GetTrue ( ) ; Debug.WriteLine ( myTrue ) ; // false } [ MethodImpl ( MethodImplOptions.Synchronized ) ] private static bool ? GetTrue ( ) { return true ; }
"Queue queue = new Queue ( ) ; for ( int i = 0 ; i < 10000 ; i++ ) { queue.Enqueue ( i ) ; } for ( int i = 0 ; i < 100 ; i++ ) { Task.Factory.StartNew ( ( Object data ) = > { var Objdata = ( Queue ) data ; Console.WriteLine ( Objdata.Dequeue ( ) ) ; Console.WriteLine ( `` The current thread is `` + Thread.CurrentThread.ManagedThreadId ) ; } , queue , TaskCreationOptions.LongRunning ) ; } Console.ReadLine ( ) ;"
private static double _d ; [ STAThread ] static void Main ( ) { new Thread ( KeepMutating ) .Start ( ) ; KeepReading ( ) ; } private static void KeepReading ( ) { while ( true ) { double dCopy = _d ; // In release : if ( ... ) throw ... Debug.Assert ( dCopy == 0D || dCopy == double.MaxValue ) ; // Never fails } } private static void KeepMutating ( ) { Random rand = new Random ( ) ; while ( true ) { _d = rand.Next ( 2 ) == 0 ? 0D : double.MaxValue ; } }
"< asp : DropDownList ID= '' ddlChange_Requestor '' runat= '' server '' AppendDataBoundItems= '' True '' CssClass= '' ddlChange_Requestor '' > < asp : ListItem > Change Requestor < /asp : ListItem > protected void gwActivity_RowCommand ( object sender , GridViewCommandEventArgs e ) { { GridViewRow row = ( ( e.CommandSource as Control ) .NamingContainer as GridViewRow ) ; txtActivity.Text = row.Cells [ 2 ] .Text ; ddlChange_Requestor.SelectedValue = row.Cells [ 10 ] .Text ; } } ddlChange_Requestor.SelectedValue = isnullOrwhitespace ( row.Cells [ 10 ] .Text , `` Change Requestor '' ) ;"
"[ TestMethod ] public void AmountAndDecimal_AreEqual ( ) { Amount amount = 1.5M ; Assert.AreEqual ( 1.5M , amount ) ; } [ TestMethod ] public void AmountAndInt_AreEqual ( ) { Amount amount = 1 ; Assert.AreEqual ( 1 , amount ) ; } public static void AreEqual ( object expected , object actual ) ; public static void AreEqual < T > ( T expected , T actual ) ; public struct Amount { private readonly decimal _value ; private Amount ( decimal value ) { _value = value ; } public static implicit operator Amount ( decimal value ) { return new Amount ( value ) ; } public static implicit operator decimal ( Amount amount ) { return amount._value ; } }"
"public static ( string , string ) foo ( dynamic input ) { return ( `` '' , `` '' ) ; } public void foo_test ( ) { dynamic input = new { a = `` '' , b = `` '' } ; ( string v1 , string v2 ) = foo ( new { a = `` '' , b = `` '' } ) ; //compiles fine ( string v3 , string v4 ) = foo ( input ) ; //CS8133 Can not deconstruct dynamic objects var result = foo ( input ) ; //compiles fine }"
"public class MyModel { public SelectList PropertyTypeList { get ; set ; } } public class MyPropertyValueResolver : ValueResolver < ProductProperty , SelectList > { protected override SelectList ResolveCore ( ProductProperty source ) { myList = ... ... . ; return new SelectList ( myList , `` Value '' , `` Text '' ) ; } } Mapper.CreateMap < Source , Destination > ( ) .ForMember ( s = > s.PropertyTypeList , opt = > opt.ResolveUsing < MyPropertyValueResolver > ( ) ) ; Type 'System.Web.Mvc.SelectList ' does not have a default constructor"
The namespace 'Razor ' already contains a definition for 'Template '
"public class BaseFile { public String Path { get ; set ; } public BaseFile ( ) { Path = String.Empty ; } public BaseFile ( String path ) { if ( ! File.Exists ( path ) ) { throw new FileNotFoundException ( `` File not found . `` , path ) ; } Path = path ; } }"
"var perf = new PerformanceCounter ( `` ASP.NET Apps v2.0.50727 '' , `` Requests Total '' , `` _LM_W3SVC_ [ IIS-Site-ID ] _ROOT '' , `` [ Server-Name ] '' ) ;"
"public class Program { static void Main ( string [ ] args ) { // //instead of doing this : // //ICreditCard creditCard = new Visa ( ) ; //var customer = new Customer ( creditCard ) ; //customer.Charge ( ) ; var resolver = new Resolver ( ) ; //map the types in the container resolver.Register < Customer , Customer > ( ) ; resolver.Register < ICreditCard , Visa > ( ) ; //because the customer constructor has an ICreditCard parameter //our container will automatically instantiate it recursively var customer = resolver.Resolve < Customer > ( ) ; customer.Charge ( ) ; } } public interface ICreditCard { string Charge ( ) ; } public class Visa : ICreditCard { public string Charge ( ) { return `` Charging Visa '' ; } } public class MasterCard : ICreditCard { public string Charge ( ) { return `` Charging MasterCard '' ; } } public class Customer { private readonly ICreditCard _creditCard ; public Customer ( ICreditCard creditCard ) { this._creditCard = creditCard ; } public void Charge ( ) { _creditCard.Charge ( ) ; } } public class Resolver { private Dictionary < Type , Type > dependencyMap = new Dictionary < Type , Type > ( ) ; public T Resolve < T > ( ) { return ( T ) Resolve ( typeof ( T ) ) ; } private object Resolve ( Type typeToResolve ) { Type resolvedType = null ; try { resolvedType = dependencyMap [ typeToResolve ] ; } catch { throw new Exception ( string.Format ( `` could not resolve type { 0 } '' , typeToResolve.FullName ) ) ; } var firstConstructor = resolvedType.GetConstructors ( ) .First ( ) ; var constructorParameters = firstConstructor.GetParameters ( ) ; if ( constructorParameters.Count ( ) == 0 ) return Activator.CreateInstance ( resolvedType ) ; IList < object > parameters = constructorParameters.Select ( parameterToResolve = > Resolve ( parameterToResolve.ParameterType ) ) .ToList ( ) ; return firstConstructor.Invoke ( parameters.ToArray ( ) ) ; } public void Register < TFrom , TTo > ( ) { dependencyMap.Add ( typeof ( TFrom ) , typeof ( TTo ) ) ; } }"
"using System ; using System.Runtime.InteropServices ; namespace ConsoleApplication1 { class Program { const int STD_OUTPUT_HANDLE = -11 ; const uint ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4 ; [ DllImport ( `` kernel32.dll '' , SetLastError = true ) ] static extern IntPtr GetStdHandle ( int nStdHandle ) ; [ DllImport ( `` kernel32.dll '' ) ] static extern bool GetConsoleMode ( IntPtr hConsoleHandle , out uint lpMode ) ; [ DllImport ( `` kernel32.dll '' ) ] static extern bool SetConsoleMode ( IntPtr hConsoleHandle , uint dwMode ) ; static void Main ( ) { var handle = GetStdHandle ( STD_OUTPUT_HANDLE ) ; uint mode ; GetConsoleMode ( handle , out mode ) ; mode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING ; SetConsoleMode ( handle , mode ) ; const string UNDERLINE = `` \x1B [ 4m '' ; const string RESET = `` \x1B [ 0m '' ; Console.WriteLine ( `` Some `` + UNDERLINE + `` underlined '' + RESET + `` text '' ) ; Console.ReadLine ( ) ; } } }"
Our.Core.Library|- > System| |- > StringExtensions.cs|- > System.Web.Mvc| |- > AnotherModelBinder.cs|- > OurCoreClass.cs
"XmlNodeList nextLevelNodeList = currentNode .SelectNodes ( string .Format ( `` Menu [ not ( MenuId = 2905 ) ] /Item [ ItemLevel = { 0 } and ItemType ! = 'Javascript ' ] | Menu [ MenuId = 2905 ] /Item [ ItemLevel = { 0 } and ItemType = 'content ' ] '' , iLevel ) ) ; int [ ] excludeSubmenus = { 2905 , 323 } ; XmlNodeList nextLevelNodeList = currentNode .SelectNodes ( string .Format ( `` Menu [ not ( MenuId in excludesubMenus ) ] /Item [ ItemLevel= { 0 } and ItemType ! = 'Javascript ' ] | Menu [ MenuId in excludeSubMenus ] /Item [ ItemLevel= { 0 } and ItemType='content ' ] '' , iLevel ) ) ; < Item > < ItemId > 322 < /ItemId > < ItemType > Submenu < /ItemType > < ItemLevel > 2 < /ItemLevel > < Menu > < MenuId > 322 < /MenuId > < MenuLevel > 2 < /MenuLevel > < Item > < ItemId > 2905 < /ItemId > < ItemType > Submenu < /ItemType > < ItemLevel > 3 < /ItemLevel > < Menu > < MenuId > 2905 < /MenuId > < MenuLevel > 3 < /MenuLevel > < Item > < ItemId > 19196 < /ItemId > < ItemType > content < /ItemType > < ItemLevel > 4 < /ItemLevel > < /Item > < Item > < ItemId > 19192 < /ItemId > < ItemType > Submenu < /ItemType > < ItemLevel > 4 < /ItemLevel > < /Item > < /Menu > < /Item > < Item > < ItemId > 2906 < /ItemId > < ItemType > Submenu < /ItemType > < ItemLevel > 3 < /ItemLevel > < Menu > < MenuId > 323 < /MenuId > < MenuLevel > 3 < /MenuLevel > < Item > < ItemId > 2432 < /ItemId > < ItemType > content < /ItemType > < ItemLevel > 4 < /ItemLevel > < /Item > < Item > < ItemId > 12353 < /ItemId > < ItemType > Submenu < /ItemType > < ItemLevel > 4 < /ItemLevel > < /Item > < /Menu > < /Item > < /Menu > < /Item >"
"public class Program { [ DllImport ( `` msvcrt40.dll '' , CallingConvention = CallingConvention.Cdecl ) ] public static extern int printf ( string format , __arglist ) ; static void Main ( string [ ] args ) { var method = new DynamicMethod ( `` printf '' , typeof ( void ) , new Type [ 0 ] , true ) ; var il = method.GetILGenerator ( ) ; il.Emit ( OpCodes.Ldstr , `` % s= % d\n '' ) ; il.Emit ( OpCodes.Ldstr , `` a '' ) ; il.Emit ( OpCodes.Ldc_I4_0 ) ; il.EmitCall ( OpCodes.Call , typeof ( Program ) .GetMethod ( `` printf '' , BindingFlags.Public | BindingFlags.Static ) , new Type [ ] { typeof ( string ) , typeof ( int ) } ) ; il.Emit ( OpCodes.Pop ) ; il.Emit ( OpCodes.Ret ) ; var action = ( Action ) method.CreateDelegate ( typeof ( Action ) ) ; action.Invoke ( ) ; } }"
"public enum DatabaseField : int { NumID1 = 1 , NumID2 = 2 , NumID3 = 3 , } ; public class DataBaseRecordInfo { public long NumID1 { get ; set ; } public int NumID2 { get ; set ; } public short NumID3 { get ; set ; } public static Type GetType ( DatabaseField field ) { Type type ; switch ( field ) { case DatabaseField.NumID1 : type = typeof ( long ) ; break ; case DatabaseField.NumID2 : type = typeof ( int ) ; break ; case DatabaseField.NumID3 : type = typeof ( short ) ; break ; default : type = typeof ( int ) ; break ; } return type ; } } ;"
"public class NLogFormatter : DatabaseLogFormatter { private static readonly DbType [ ] StringTypes = { DbType.String , DbType.StringFixedLength , DbType.AnsiString , DbType.AnsiStringFixedLength , DbType.Date , DbType.DateTime , DbType.DateTime2 , DbType.Time , DbType.Guid , DbType.Xml } ; public NLogFormatter ( DbContext context , Action < string > writeAction ) : base ( context , writeAction ) { } public override void LogCommand < TResult > ( DbCommand command , DbCommandInterceptionContext < TResult > interceptionContext ) { var builder = new StringBuilder ( ) ; builder.Append ( $ '' COMMAND| { ( command.CommandType == CommandType.StoredProcedure ? `` EXEC `` : '' '' ) } { command.CommandText.Replace ( Environment.NewLine , `` `` ) } `` ) ; foreach ( var parameter in command.Parameters.OfType < DbParameter > ( ) ) { builder.Append ( `` @ '' ) .Append ( parameter.ParameterName ) .Append ( `` = `` ) .Append ( parameter.Value == null || parameter.Value == DBNull.Value ? `` null '' : StringTypes.Any ( t = > t == parameter.DbType ) ? $ '' ' { parameter.Value } ' '' : parameter.Value ) ; builder.Append ( `` , `` ) ; } Write ( builder.ToString ( ) ) ; } public override void LogResult < TResult > ( DbCommand command , DbCommandInterceptionContext < TResult > interceptionContext ) { var sw = Stopwatch ; Write ( $ '' COMPLETED| { command.CommandText.Replace ( Environment.NewLine , `` `` ) } | { sw.ElapsedMilliseconds } ms '' ) ; } //rest removed for brevity } public class EfDbConfiguration : DbConfiguration { public EfDbConfiguration ( ) { SetDatabaseLogFormatter ( ( context , action ) = > new NLogFormatter ( context , action ) ) ; } } public class EfFunctions { private readonly EfEntities _db = new EfEntities { Database = { Log = Logger.LogEfRequest } } ; //Function calls etc } 2017-10-22 23:47:22.0611|Debug|REQUEST|Example.Page|POST|/example/page2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.0611|Debug|DB|COMMAND|EXEC [ Test ] . [ GetOrder ] @ OrderNumber = '123456789 ' , @ ErrorCode = null , 2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|DB|COMPLETED| [ Test ] . [ GetOrder ] |149ms2017-10-22 23:47:22.2111|Debug|APP|No order or session , creating new session|123456789"
string name = `` Naveen '' ; int c = 0 ; while ( name [ c ] ! = '\0 ' ) { c++ ; } Console.WriteLine ( `` Length of string `` + name + `` is : `` + c ) ;
"var List = new Dummy ( `` List '' ) ; var Nullable = new Dummy ( `` Nullable '' ) ; var Guid = new Dummy ( `` Guid '' ) ; var x = List < Nullable < Guid > > 10 ; var y = List < Nullable < Guid > > .Equals ( 10,20 ) ;"
"public class SimpleSearchViewModel : BaseViewModel { enum SearchCatagories { All , SubjectId , PublicationNumber } public override void OnStart ( ) { UpdateTypeButton ( `` ALL '' ) ; } private void UpdateTypeButton ( string item ) { SearchTypeButtonText = item ; } private string _searchTypeButtonText ; public string SearchTypeButtonText { get { return _searchTypeButtonText ; } private set { _searchTypeButtonText = value ; OnPropertyChanged ( nameof ( SearchTypeButtonText ) ) ; } } } < core : BasePage xmlns= '' http : //xamarin.com/schemas/2014/forms '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2009/xaml '' xmlns : viewmodels= '' using : App.ViewModels '' xmlns : customcontrols= '' clr-namespace : App ; assembly=App '' xmlns : core= '' clr-namespace : App.Core ; assembly=App.Core '' x : Class= '' Pages.SimpleSearchPage '' Title= '' Simple Search '' > < ContentPage.BindingContext > < viewmodels : SimpleSearchViewModel / > < /ContentPage.BindingContext > < ContentPage.Content > < StackLayout Padding= '' 10 , 10 , 10 , 10 '' HorizontalOptions= '' FillAndExpand '' VerticalOptions= '' FillAndExpand '' Orientation= '' Horizontal '' > < customcontrols : SVGImageButton x : Name= '' TypeSelectionButton '' HorizontalOptions= '' Start '' VerticalOptions= '' Center '' ButtonPressedCommand= '' { Binding TypeButtonClickedCommand } '' SVGImageName= '' SVGImages.ic_triangle_down.svg '' CommandParameter= '' { x : Reference TypeSelectionButton } '' ButtonText= '' { Binding SearchTypeButtonText } '' ButtonBackgroundColor= '' { Binding ButtonBackgroundColor } '' / > < /StackLayout > < /ContentPage.Content > < /core : BasePage > [ XamlCompilation ( XamlCompilationOptions.Compile ) ] public class SVGImageButton : ContentView { private readonly Button _button ; private readonly SvgCachedImage _svgImage ; public static BindableProperty ButtonTextProperty = BindableProperty.Create ( nameof ( ButtonText ) , typeof ( string ) , typeof ( SVGImageButton ) , string.Empty , BindingMode.OneWay , propertyChanged : ( bindable , oldValue , newValue ) = > { if ( newValue == null ) return ; var control = ( SVGImageButton ) bindable ; control.ButtonText = newValue.ToString ( ) ; } ) ; public string ButtonText { get { return _button.Text ; } set { _button.Text = value ; } } public string SVGImageName { get ; set ; } protected override void OnParentSet ( ) { base.OnParentSet ( ) ; _button.Text = ButtonText ; _svgImage.Source = SvgImageSource.FromResource ( SVGImageName ) ; } public SVGImageButton ( ) { var content = new RelativeLayout ( ) ; _button = new Button { BackgroundColor = Color.Gray , TextColor = Color.Black } ; _svgImage = new SvgCachedImage { IsEnabled = false } ; content.Children.Add ( _button , Constraint.RelativeToParent ( ( parent ) = > { return parent.X ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Y ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Width ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Height ; } ) ) ; content.Children.Add ( _svgImage , Constraint.RelativeToParent ( ( parent ) = > { return parent.Width - ( parent.Height / 2 ) - ( parent.Height / 4 ) ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Height - ( parent.Height / 2 ) - ( parent.Height / 4 ) ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Height / 2 ; } ) , Constraint.RelativeToParent ( ( parent ) = > { return parent.Height / 2 ; } ) ) ; Content = content ; } } }"
class MagicClass { public static T GetImplementation < T > ( ) ; } var object1 = MagicClass.GetImplementation < I1 > ( ) ; DoSomethingInAnotherThread ( object1 ) ; var object2 = MagicClass.GetImplementation < I2 > ( ) ;
"using ( SqlConnection connection = new SqlConnection ( /* connection string goes here */ ) ) { SqlCommand command = new SqlCommand ( procName , connection ) ; command.Parameters.AddRange ( parameters ) ; command.CommandType = System.Data.CommandType.StoredProcedure ; connection.Open ( ) ; SqlDataReader r = command.ExecuteReader ( ) ; // todo : read data here r.Close ( ) ; connection.Close ( ) ; }"
"PerformanceCounter bytesReceived = new PerformanceCounter ( `` Process '' , `` IO Read Bytes/sec '' ) ; PerformanceCounter bytesSent = new PerformanceCounter ( `` Process '' , `` IO Write Bytes/sec '' ) ; string ProcessName = `` chrome '' ; bytesReceived.InstanceName = ProcessName ; bytesSent.InstanceName = ProcessName ;"
public static class WorkbookExtensions { public static IntPtr GetHashery ( this msExcel.Workbook workbook ) { IntPtr punk = IntPtr.Zero ; try { punk = Marshal.GetIUnknownForObject ( workbook ) ; return punk ; } finally { //Release to decrease ref count Marshal.Release ( punk ) ; } } }
list.get ( 0 )
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Collections ; namespace ConsoleApplication1 { class Program { static void Main ( ) { double [ ] array = new double [ 100 ] ; for ( int i = 0 ; i < array.Length ; ++i ) { array [ i ] = i ; } double sum1 = array.Aggregate ( ( total , current ) = > total + Math.Sqrt ( Math.Abs ( Math.Sin ( current ) ) ) ) ; Console.WriteLine ( `` Linq aggregate = `` + sum1 ) ; IParallelEnumerable < double > parray = array.AsParallel < double > ( ) ; double sum2 = parray.Aggregate ( ( total , current ) = > total + Math.Sqrt ( Math.Abs ( Math.Sin ( current ) ) ) ) ; Console.WriteLine ( `` Plinq aggregate = `` + sum2 ) ; } } }"
static readonly object _locker = new object ( ) ; static void Main ( ) { lock ( _locker ) { AnotherMethod ( ) ; // ... some work is going on } } static void AnotherMethod ( ) { lock ( _locker ) { Console.WriteLine ( `` Another method '' ) ; } }
"IList < Form > formsList = new List < Form > { new Form ( ) , new Form ( ) } ; IList < Control > controlsList = formsList ; IList < Form > formsList = new List < Form > { new Form ( ) , new Form ( ) } ; IList < Control > controlsList = ( IList < Control > ) formsList ;"
"public abstract class CommandBase < T , X > where T : CommandResultBase where X : CommandBase < T , X > { public CommandBase < T , X > InnerCommand { get ; set ; } ( ... ) } public class AddOrderitemCommand : CommandBase < AddOrderitemResult , AddOrderitemCommand > { ( ... ) } public class GetMenuCommand : CommandBase < GetMenuResult , GetMenuCommand > { ( ... ) }"
"public SomeOtherStuff ( string rabble ) : this ( rabble , `` bloop '' ) { } Public SomeOtherStuff ( string rabble ) { //set bloop }"
< dxg : GridColumn Name= '' Name '' FieldName= '' Stapel '' DisplayMemberBinding= '' { Binding Path=Name } '' / > public string Name { get { return _name ; } set { if ( value == _name ) return ; _name = value ; OnPropertyChanged ( `` Name '' ) ; } } < dxg : GridColumn.CellTemplate > < DataTemplate > < StackPanel > < Rectangle Height= '' 19 '' Width= '' 19 '' Fill= '' { Binding Path=Data.StatusColor } '' > < /Rectangle > < /StackPanel > < /DataTemplate > < /dxg : GridColumn.CellTemplate > public SolidColorBrush StatusColor { get { if ( StapelStatus == StapelStatus.Neu ) { return new SolidColorBrush ( Colors.CornflowerBlue ) ; } return new SolidColorBrush ( Colors.DarkOrange ) ; } } OnPropertyChanged ( `` StatusColor '' ) ;
"public void findShortestPath ( int current , int end , int currentCost ) { if ( ! weight.ContainsKey ( current ) ) { weight.Add ( current , currentCost ) ; } Node currentNode = graph [ current ] ; var sortedEdges = ( from entry in currentNode.edges orderby entry.Value ascending select entry ) ; foreach ( KeyValuePair < int , int > nextNode in sortedEdges ) { if ( ! visited.ContainsKey ( nextNode.Key ) || ! visited [ nextNode.Key ] ) { int nextNodeCost = currentCost + nextNode.Value ; if ( ! weight.ContainsKey ( nextNode.Key ) ) { weight.Add ( nextNode.Key , nextNodeCost ) ; } else if ( weight [ nextNode.Key ] > nextNodeCost ) { weight [ nextNode.Key ] = nextNodeCost ; } } } visited.Add ( current , true ) ; foreach ( KeyValuePair < int , int > nextNode in sortedEdges ) { if ( ! visited.ContainsKey ( nextNode.Key ) || ! visited [ nextNode.Key ] ) { findShortestPath ( nextNode.Key , end , weight [ nextNode.Key ] ) ; } } } //findShortestPath public Dictionary < int , int > edges = new Dictionary < int , int > ( ) ; private Dictionary < int , Node > graph = new Dictonary < int , Node > ( ) ;"
"ListBoxItem insert = new ListBoxItem ( ) ; void FillSourceList ( ) { busyIndicator.IsBusy = true ; BackgroundWorker bw = new BackgroundWorker ( ) ; bw.DoWork += ( sender , args ) = > { List < ListBoxItem > x = new List < ListBoxItem > ( ) ; for ( int i = 0 ; i < 25 ; i++ ) { ListBoxItem insert = new ListBoxItem ( ) ; // < -- -Getting exception here insert.Content = `` whatever '' ; x.Add ( insert ) ; } args.Result = x ; } ; bw.RunWorkerCompleted += ( sender , args ) = > { foreach ( ListBoxItem insert in ( List < ListBoxItem > ) ( args.Result ) ) sourceList.Items.Add ( insert ) ; busyIndicator.IsBusy = false ; } ; bw.RunWorkerAsync ( ) ; }"
"float f = myFloat * myConstInt ; /* Where myFloat==13.45 , and myConstInt==20 */int i = ( int ) f ; int i2 = ( int ) ( myFloat * myConstInt ) ;"
"public Dictionary < ValueLineType , Func < HtmlHelper , string , object , Type , string > > constructor = new Dictionary < ValueLineType , Func < HtmlHelper , string , object , Type , string > > ( ) ; public Dictionary < ValueLineType , Func < HtmlHelper , string , object , Type , bool , string > > constructor = new Dictionary < ValueLineType , Func < HtmlHelper , string , object , Type , bool , string > > ( ) ;"
interface IConfiguration { string ConnectionString { get ; } } container.For < IConfiguration > ( ) .Use < ConfigurationImpl > ( ) ; container.For < IConfiguration > ( ) .Singleton ( ) .Use < ConfigurationImpl > ( ) ;
"private void lvMeters_ItemCheck ( object sender , ItemCheckEventArgs e ) { if ( sender is ListView ) { if ( e.CurrentValue == CheckState.Checked ) lvMeters.Items [ e.Index ] .Checked = true ; else lvMeters.Items [ e.Index ] .Checked = false ; } else if ( e.CurrentValue == CheckState.Checked ) lvMeters.Items [ e.Index ] .Checked = false ; else lvMeters.Items [ e.Index ] .Checked = true ; }"
"List < String [ ] > MyPrimaryList = new List < String [ ] > ( ) ; List < String [ ] > MySecondaryList = new List < String [ ] > ( ) ; String [ ] array ; String arrayList = `` one , two , three , four , five '' ; array = arrayList.Split ( ' , ' ) ; MyPrimaryList.Add ( array ) ; MySecondaryList.Add ( array ) ; MyPrimaryList [ 0 ] [ 0 ] += `` half '' ;"
< Compile Include= '' MyDataSet.Designer.cs '' > < AutoGen > True < /AutoGen > < DesignTime > True < /DesignTime > < DependentUpon > MyDataSet.xsd < /DependentUpon > < /Compile > < None Include= '' MyDataSet.xsd '' > < SubType > Designer < /SubType > < Generator > MSDataSetGenerator < /Generator > < LastGenOutput > MyDataSet.Designer.cs < /LastGenOutput > < /None > < Compile Include= '' MyDataSet.Designer.cs '' > < DependentUpon > MyDataSet.cs < /DependentUpon > < /Compile > < Compile Include= '' MyDataSet1.Designer.cs '' > < AutoGen > True < /AutoGen > < DesignTime > True < /DesignTime > < DependentUpon > MyDataSet.xsd < /DependentUpon > < /Compile > < None Include= '' MyDataSet.xsd '' > < Generator > MSDataSetGenerator < /Generator > < LastGenOutput > MyDataSet1.Designer.cs < /LastGenOutput > < SubType > Designer < /SubType > < /None >
"public override bool Equals ( object obj ) { RushHourPathLengthNode otherNode = ( RushHourPathLengthNode ) obj ; // Compare their carCoords and return false as soon as we find a difference for ( int i = 0 , l = carCoords.Length ; i < l ; ++i ) if ( carCoords [ i ] .x ! = otherNode.carCoords [ i ] .x || carCoords [ i ] .y ! = otherNode.carCoords [ i ] .y ) return false ; return true ; } public override bool Equals ( object obj ) { RushHourPathLengthNode otherNode = ( RushHourPathLengthNode ) obj ; bool result = true ; Parallel.For ( 0 , carCoords.Length , ( i , loopState ) = > { if ( ! result ) loopState.Stop ( ) ; if ( carCoords [ i ] .x ! = otherNode.carCoords [ i ] .x || carCoords [ i ] .y ! = otherNode.carCoords [ i ] .y ) result = false ; } ) ; return result ; }"
< ! -- ControlTemplates.xaml -- > < ResourceDictionary > < ! -- Private Local styles used to set up the publicly usable templates -- > < Style x : Key= '' TextBoxes '' TargetType= '' TextBox '' > < Setter Property= '' TextWrapping '' Value= '' Wrap '' / > < /Style > < ! -- End of Private Local Stuff -- > < ! -- Public Dictionary Resources Follow -- > < ControlTemplate x : Key= '' CustomTextBox '' > < TextBox Style= '' { StaticResource TextBoxes } '' / > < /ControlTemplate > < /ResourceDictionary > < Window > < Window.Resources > < ResourceDictionary Source= '' ControlTemplates.xaml '' > < /Window.Resources > < Grid > < ! -- This Should Work -- > < CustomControl Template= '' { StaticResources CustomTextBox } '' > < ! -- This Should NOT Work ! -- > < TextBox Template= '' { StaticResources TextBoxes } '' > < /Grid > < /Window >
"public void Include ( TextInputEditText text ) { text.TextChanged += ( sender , args ) = > text.Text = `` '' + text.Text ; text.Hint = `` '' + text.Hint ; text.Background = ( Drawable ) Android.Resource.Color.Black ; text.Text = `` Text '' + text.Text ; } public void Include ( TextInputLayout text ) { text.Hint = `` '' + text.Hint ; text.Background = ( Drawable ) Android.Resource.Color.Black ; }"
"new Fixture ( ) .Customize ( new ModelCustomization ( ) ) ; fixture.Build < Offer > ( ) .With ( o = > o.CompanyHistory , _previouslyCreatedCompanyHistory ) .Create ( ) ; fixture.Build < Offer > ( ) .WithCustomization ( new ModelCustomization ( ) ) // there is no such method , but i 'd like it to be.With ( o = > o.CompanyHistory , _previouslyCreatedCompanyHistory ) .Create ( ) ;"
"public class MainActivity : AppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base.OnCreate ( savedInstanceState ) ; SetContentView ( Resource.Layout.activity_main ) ; FindViewById < Button > ( Resource.Id.btn1 ) .Click += delegate { //Starting CommonApp project StartActivity ( new Intent ( Application.Context , typeof ( CommonApp.MainActivity ) ) ) ; } ; } } protected override void OnCreate ( Bundle savedInstanceState ) { base.OnCreate ( savedInstanceState ) ; //This is CommonApp SetContentView ( Resource.Layout.activity_main ) ; } < TextView android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : text= '' This is CommonApp '' > < /TextView >"
"using System ; public static class FixedExample { public static void Main ( ) { byte [ ] nonempty = new byte [ 1 ] { 42 } ; byte [ ] empty = new byte [ 0 ] ; Good ( nonempty ) ; Bad ( nonempty ) ; try { Good ( empty ) ; } catch ( Exception e ) { Console.WriteLine ( e.ToString ( ) ) ; /* continue with next example */ } Console.WriteLine ( ) ; try { Bad ( empty ) ; } catch ( Exception e ) { Console.WriteLine ( e.ToString ( ) ) ; /* continue with next example */ } } public static void Good ( byte [ ] buffer ) { unsafe { fixed ( byte * p = & buffer [ 0 ] ) { Console.WriteLine ( *p ) ; } } } public static void Bad ( byte [ ] buffer ) { unsafe { fixed ( byte * p = buffer ) { Console.WriteLine ( *p ) ; } } } } .maxstack 2 .locals init ( uint8 & pinned V_0 ) IL_0000 : ldarg.0 IL_0001 : ldc.i4.0 IL_0002 : ldelema [ mscorlib ] System.Byte IL_0007 : stloc.0 IL_0008 : ldloc.0 IL_0009 : conv.i IL_000a : ldind.u1 IL_000b : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_0010 : ldc.i4.0 IL_0011 : conv.u IL_0012 : stloc.0 IL_0013 : ret .locals init ( uint8 & pinned V_0 , uint8 [ ] V_1 ) IL_0000 : ldarg.0 IL_0001 : dup IL_0002 : stloc.1 IL_0003 : brfalse.s IL_000a IL_0005 : ldloc.1 IL_0006 : ldlen IL_0007 : conv.i4 IL_0008 : brtrue.s IL_000f IL_000a : ldc.i4.0 IL_000b : conv.u IL_000c : stloc.0 IL_000d : br.s IL_0017 IL_000f : ldloc.1 IL_0010 : ldc.i4.0 IL_0011 : ldelema [ mscorlib ] System.Byte IL_0016 : stloc.0 IL_0017 : ldloc.0 IL_0018 : conv.i IL_0019 : ldind.u1 IL_001a : call void [ mscorlib ] System.Console : :WriteLine ( int32 ) IL_001f : ldc.i4.0 IL_0020 : conv.u IL_0021 : stloc.0 IL_0022 : ret"
"< UserControl x : Class= '' ClientReports.Module.SchemeSelection.Views.Clients '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : local= '' clr-namespace : ClientReports.Module.SchemeSelection.Views '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : materialDesign= '' http : //materialdesigninxaml.net/winfx/xaml/themes '' mc : Ignorable= '' d '' d : DesignHeight= '' 300 '' d : DesignWidth= '' 300 '' xmlns : prism= '' http : //prismlibrary.com/ '' prism : ViewModelLocator.AutoWireViewModel= '' True '' > < Grid > < StackPanel > < TextBox materialDesign : HintAssist.Hint= '' Client Search '' Style= '' { StaticResource MaterialDesignFloatingHintTextBox } '' Text= '' { Binding Search , UpdateSourceTrigger=PropertyChanged } '' / > < ListBox ItemsSource= '' { Binding ClientsFiltered } '' DisplayMemberPath= '' ClientName '' / > < /StackPanel > < /Grid > < /UserControl > using ClientReports.Common.Infrastructure.Models ; using ClientReports.Common.Infrastructure.Services ; using Prism.Mvvm ; using System ; using System.Collections.ObjectModel ; using System.ComponentModel ; using System.Threading.Tasks ; using System.Windows.Data ; namespace ClientReports.Module.SchemeSelection.ViewModels { public class ClientsViewModel : BindableBase { private IClientService clientService ; public ClientsViewModel ( ) { } public ClientsViewModel ( IClientService clientService ) { this.clientService = clientService ; Clients = new ObservableCollection < Client > ( ) ; GetClients ( ) .ContinueWith ( x = > { } ) ; } public ObservableCollection < Client > Clients { get ; } public ICollectionView ClientsFiltered { get ; set ; } private string clientFilter ; public string Search { get = > clientFilter ; set { clientFilter = value ; ClientsFiltered.Refresh ( ) ; RaisePropertyChanged ( `` ClientsFiltered '' ) ; } } private bool Filter ( Client client ) { return Search == null || client.ClientName.IndexOf ( Search , StringComparison.OrdinalIgnoreCase ) ! = -1 ; } private async Task GetClients ( ) { var clients = await clientService.GetAllAsync ( ) ; foreach ( var client in clients ) { Clients.Add ( client ) ; } ClientsFiltered = CollectionViewSource.GetDefaultView ( Clients ) ; ClientsFiltered.Filter = new Predicate < object > ( c = > Filter ( c as Client ) ) ; } } }"
var selectedSiteType = from sites in siteTypeList where sites.SiteTypeID == temp select sites ; mSiteTypeSub.EditSitetype ( selectedSiteType ) ; Argument 1 : can not convert from 'System.Collections.Generic.IEnumerable < DeviceManager_take_2.SiteType > ' to 'DeviceManager_take_2.SiteType '
"_baseList.Contains ( derivedItem ) object.ReferenceEquals ( _baseList.First ( ) , derivedItem ) object.Equals ( _baseList.First ( ) , derivedItem ) _baseList.First ( ) .GetHashCode ( ) == derivedItem.GetHashCode ( ) _baseList.OfType < DerivedClass > ( ) .Contains ( derivedItem ) private ImmutableHashSet < BaseClass > _baseList ; public class BaseClass { } public class DerivedClass : BaseClass { } public void DoStuff ( ) { var items = _baseList.OfType < DerivedClass > ( ) .ToList ( ) ; foreach ( var derivedItem in items ) { RemoveItem ( derivedItem ) ; } } public void RemoveItem ( BaseClass derivedItem ) { if ( _baseList.Contains ( derivedItem ) ) { //does n't reach this place , since _baseList.Contains ( derivedItem ) returns false ... _baseList = _baseList.Remove ( derivedItem ) ; } //object.ReferenceEquals ( _baseList.First ( ) , derivedItem ) == true //object.Equals ( _baseList.First ( ) , derivedItem ) == true //_baseList.First ( ) .GetHashCode ( ) == derivedItem.GetHashCode ( ) == true //_baseList.OfType < DerivedClass > ( ) .Contains ( derivedItem ) == true } namespace ConsoleApplication1 { class Program { private static ImmutableHashSet < BaseClass > _baseList ; static void Main ( string [ ] args ) { _baseList = ImmutableHashSet.Create < BaseClass > ( ) ; _baseList = _baseList.Add ( new DerivedClass ( `` B1 '' ) ) ; _baseList = _baseList.Add ( new DerivedClass ( `` B2 '' ) ) ; _baseList = _baseList.Add ( new DerivedClass ( `` B3 '' ) ) ; _baseList = _baseList.Add ( new DerivedClass ( `` B4 '' ) ) ; _baseList = _baseList.Add ( new DerivedClass ( `` B5 '' ) ) ; DoStuff ( ) ; Console.WriteLine ( _baseList.Count ) ; //output is 5 - put it should be 0 ... Console.ReadLine ( ) ; } private static void DoStuff ( ) { var items = _baseList.OfType < DerivedClass > ( ) .ToList ( ) ; foreach ( var derivedItem in items ) { derivedItem.BaseString += `` Change ... '' ; RemoveItem ( derivedItem ) ; } } private static void RemoveItem ( BaseClass derivedItem ) { if ( _baseList.Contains ( derivedItem ) ) { _baseList = _baseList.Remove ( derivedItem ) ; } } } public abstract class BaseClass { private string _baseString ; public string BaseString { get { return _baseString ; } set { _baseString = value ; } } public BaseClass ( string baseString ) { _baseString = baseString ; } public override int GetHashCode ( ) { unchecked { int hashCode = ( _baseString ! = null ? _baseString.GetHashCode ( ) : 0 ) ; return hashCode ; } } } public class DerivedClass : BaseClass { public DerivedClass ( string baseString ) : base ( baseString ) { } } }"
"static void Main ( ) { // Create two equal but distinct strings string a = new string ( new char [ ] { ' h ' , ' e ' , ' l ' , ' l ' , ' o ' } ) ; string b = new string ( new char [ ] { ' h ' , ' e ' , ' l ' , ' l ' , ' o ' } ) ; Console.WriteLine ( a == b ) ; // Returns true Console.WriteLine ( a.Equals ( b ) ) ; // Returns true // Now let 's see what happens with the same tests but // with variables of type object object c = a ; object d = b ; Console.WriteLine ( c == d ) ; // Returns false Console.WriteLine ( c.Equals ( d ) ) ; // Returns true }"
dlg.FileName = `` world.txt '' ? dlg.FileName dlg.InitialDirectory = `` C : \\NonExistentDirectory\\ '' ; dlg.ShowDialog ( ) ; dlg.InitialDirectory = `` C : \\ '' ; dlg.ShowDialog ( ) ; dlg.InitialDirectory = `` C : \\Users\\ '' ; dlg.ShowDialog ( ) ; dlg.InitialDirectory = `` C : \\Users\\Public\\ '' ; dlg.ShowDialog ( ) ; dlg.InitialDirectory = `` C : \\Users\\Public\\Documents\\ '' ; dlg.ShowDialog ( ) ;
< xsd : simpleType name= '' CharsetD '' > < xsd : restriction base= '' xsd : string '' > < xsd : pattern value= '' [ A-Za-z \- & apos ; ] * '' / > < /xsd : restriction > < /xsd : simpleType > < xsd : element minOccurs= '' 0 '' maxOccurs= '' 2 '' name= '' Fore '' > < xsd : simpleType > < xsd : restriction base= '' CharsetD '' > < xsd : minLength value= '' 1 '' / > < xsd : maxLength value= '' 35 '' / > < xsd : pattern value= '' [ A-Za-z ] . * '' / > < /xsd : restriction > < xsd : simpleType > < /xsd : element >
"busy = Observable.CombineLatest ( this.PlayCommand.IsExecuting , this.PauseCommand.IsExecuting , ( play , pause ) = > play & & pause ) ; this.PauseCommand = new ReactiveCommand ( busy.Select ( b = > ! b ) ) ; this.PlayCommand = new ReactiveCommand ( busy.Select ( b= > ! b ) ) ;"
"public class ParentEntity { public ChildEntity Child { get ; set ; } } public class ChildEntity { public byte ? NullableValue { get ; set ; } public byte Value { get ; set ; } } parent.Child == null ? null : parent.Child.NullableValue public static Expression GetCondition < TParent , TChild , TChildKey > ( Expression < Func < TParent , TChild > > pe , Expression < Func < TChild , TChildKey > > ce ) { var test = Expression.Equal ( pe.Body , Expression.Constant ( null ) ) ; var ifTrue = Expression.Constant ( Activator.CreateInstance < TChildKey > ( ) ) ; var ifFalse = Expression.Property ( pe.Body , ( ce.Body as MemberExpression ) .Member.Name ) ; return Expression.Condition ( test , ifTrue , ifFalse ) ; } Expression < Func < ParentEntity , ChildEntity > > pe = n = > n.Child ; GetCondition ( pe , n = > n.Value ) ; // okGetCondition ( pe , n = > n.NullableValue ) ; // throws an ArgumentException"
"using ( WebApp.Start < SignalrStartup > ( url ) ) { Console.ForegroundColor = ConsoleColor.Green ; Console.WriteLine ( `` Server running on { 0 } '' , url ) ; // was url Console.WriteLine ( `` ID\tMessage '' ) ; Console.ReadLine ( ) ; } WebApp.Start < SignalrStartup > ( url ) ; protected override void OnStart ( string [ ] args ) { Task.Factory .StartNew ( ( ) = > StartTCP ( ) ) .ContinueWith ( t = > StartSignalR ( ) ) ; }"
"select Master.InvoiceId , Consumer.ConsumerId , ConsumerCharge.ChargeId , Amount from Master left outer join Consumer on Master.InvoiceId=Consumer.InvoiceId left outer join ConsumerCharge on Consumer.ConsumerId = ConsumerCharge.ConsumerId and Consumer.InvoiceId = ConsumerCharge.InvoiceId and Master.InvoiceId = ConsumerCharge.InvoiceIdorder by InvoiceId var query = from m in IM.GetMaster ( ) join co in CM.GetConsumers ( ) on m.InvoiceId equals co.InvoiceId into temp2 from co in temp2.DefaultIfEmpty ( ) join ch in CCM.GetCharge ( ) on new { co.InvoiceId , co.ConsumerId , } equals new { ch.InvoiceId , ch.ConsumerId } into temp from ch in temp.DefaultIfEmpty ( ) orderby m.InvoiceId select new { InvioceID = m.InvoiceId , ConsumerID = co == null ? 0 : co.ConsumerId , ChargeID = ch == null ? 0 : ch.ChargeId , Amount = ch == null ? 0 : ch.Amount } ;"
"System.NullReferenceException : Object reference not set to an instance of an object . at System.Web.Mvc.FilterProviderCollection. < RemoveDuplicates > d__b.MoveNext ( ) at System.Linq.Buffer ` 1..ctor ( IEnumerable ` 1 source ) at System.Linq.Enumerable. < ReverseIterator > d__a0 ` 1.MoveNext ( ) at System.Linq.Enumerable.WhereSelectEnumerableIterator ` 2.MoveNext ( ) at System.Collections.Generic.List ` 1..ctor ( IEnumerable ` 1 collection ) at System.Linq.Enumerable.ToList [ TSource ] ( IEnumerable ` 1 source ) at System.Web.Mvc.FilterInfo..ctor ( IEnumerable ` 1 filters ) at System.Web.Mvc.ControllerActionInvoker.GetFilters ( ControllerContext controllerContext , ActionDescriptor actionDescriptor ) at System.Web.Mvc.ControllerActionInvoker.InvokeAction ( ControllerContext controllerContext , String actionName ) at System.Web.Mvc.Controller.ExecuteCore ( ) at System.Web.Mvc.ControllerBase.Execute ( RequestContext requestContext ) at System.Web.Mvc.MvcHandler. < > c__DisplayClass6. < > c__DisplayClassb. < BeginProcessRequest > b__5 ( ) at System.Web.Mvc.Async.AsyncResultWrapper. < > c__DisplayClass1. < MakeVoidDelegate > b__0 ( ) at System.Web.Mvc.MvcHandler. < > c__DisplayClasse. < EndProcessRequest > b__d ( ) at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute ( ) at System.Web.HttpApplication.ExecuteStep ( IExecutionStep step , Boolean & completedSynchronously )"
"void Main ( ) { Thread.CurrentPrincipal = new MyCustomPrincipal ( ) ; } // Define other methods and classes here [ Serializable ] public class MyCustomPrincipal : IPrincipal { public bool IsInRole ( string role ) { return true ; } public IIdentity Identity { get { return new WindowsIdentity ( `` RECUPERA\\m.casamento '' ) ; } } } Type is not resolved for member 'UserQuery+MyCustomPrincipal , query_nhxfev , Version=0.0.0.0 , Culture=neutral , PublicKeyToken=null ' RuntimeMethodInfo : PluginWindowManager.get_Form ( ) System.Security.Principal.IPrincipal principal ; principal = System.Threading.Thread.CurrentPrincipal ; System.Threading.Thread.CurrentPrincipal = null ; try { SqlDependency.Start ( connectionString ) ; m_SqlDependencyStarted = true ; } catch ( Exception ex ) { throw ( ex ) ; } finally { System.Threading.Thread.CurrentPrincipal = principal ; }"
"11/15/2010 , 12/1/10 , 12/2/10 , 12/3/10 , 12/4/10 , 12/9/10 11/15/2010 , 12/1-4 , 9/10"
static class Program { public static void Main ( string [ ] args ) { dynamic someObj = ConstructSomeObj ( ( Action ) ( ( ) = > Console.WriteLine ( `` wtf '' ) ) ) ; var executer = someObj.Execute ; executer ( ) ; // shows `` wtf '' someObj.Execute ( ) ; // throws RuntimeBinderException Console.ReadKey ( ) ; } static dynamic ConstructSomeObj ( dynamic param ) = > new { Execute = param } ; }
class Customer { private decimal ? _balance2 ; private static decimal GetBalanceOverNetwork ( ) { //lengthy network operations Thread.Sleep ( 2000 ) ; return 99.9M ; } public decimal ? GetBalance2Lazily ( ) { return _balance2 ? ? ( _balance2 = GetBalanceOverNetwork ( ) ) ; } private readonly Lazy < decimal > _balance1 = new Lazy < decimal > ( GetBalanceOverNetwork ) ; public Lazy < decimal > Balance1 { get { return _balance1 ; } } }
string optionPattern = `` [ \\ ( ] + [ 0-9 ] + [ \\ ) ] '' ; Regex reg = new Regex ( optionPattern ) ; string optionPattern = @ '' ( ? < =\ ( \d+\ ) ) \w+ '' ; Regex reg = new Regex ( optionPattern ) ; string [ ] passage = reg.Split ( lstQuestion.QuestionContent ) ; foreach ( string s in passage ) { TextBlock tblock = new TextBlock ( ) ; tblock.FontSize = 19 ; tblock.Text = s ; tblock.TextWrapping = TextWrapping.WrapWithOverflow ; wrapPanel1.Children.Add ( tblock ) ; }
"public static object ExecuteMyFunction ( object values , object tagName ) { // Some code here } var formula = string.Format ( @ '' = { 0 } ( { 1 } ; { 2 } ) '' , Temp.FORMULA_NAME , this.DataRangeTextBox.Text , tagCaption ) ; resultRange.set_Value ( Type.Missing , formula ) ; resultRange.Formula = resultRange.Value ; System.Runtime.InteropServices.COMException occurred HResult=-2146827284 Message=Ausnahme von HRESULT : 0x800A03EC Source= '' '' ErrorCode=-2146827284 StackTrace : bei System.RuntimeType.ForwardCallToInvokeMember ( String memberName , BindingFlags flags , Object target , Int32 [ ] aWrapperTypes , MessageData & msgData ) bei Microsoft.Office.Interop.Excel.Range.set_Value ( Object RangeValueDataType , Object ) bei bb.ExcelToolbar.Controls.bbControl.ApplyFormula ( Object sender , EventArgs e ) in c : \xx\yy\zz\bb\bb.ExcelToolbar\Controls\bbControlcs : Zeile 88 . InnerException : var formula = string.Format ( @ '' = { 0 } ( { 1 } ) '' , Temp.FORMULA_NAME , this.DataRangeTextBox.Text , tagCaption ) ; resultRange.set_Value ( Type.Missing , formula ) ; resultRange.Formula = resultRange.Value ; =Temp.DoSomething ( B2 : B13 ; '' Flow '' )"
"enum EmpType { Manager = 1 , Grunt = 1 , Contractor = 100 , VicePresident = 9 } enum EmpType { Manager = 10 , Manager = 1 , Contractor = 100 , VicePresident = 9 }"
"class Program { public volatile static int a = 0 ; public volatile static int b = 0 ; public static void Main ( ) { for ( int i = 0 ; i < 1000 ; i++ ) { a = 0 ; b = 0 ; Parallel.Invoke ( delegate { a = 1 ; if ( b == 0 ) Console.WriteLine ( `` A wins '' ) ; } , delegate { b = 1 ; if ( a == 0 ) Console.WriteLine ( `` B wins '' ) ; } ) ; Console.WriteLine ( System.Environment.NewLine ) ; Thread.Sleep ( 500 ) ; } } } A winsB winsA winsB winsA wins ..."
"var start = new TransformBlock < Foo , Bar > ( ) ; var end = new ActionBlock < Bar > ( ) ; start.LinkTo ( end ) ; start.SendAsync ( new Foo ( ) ) ; start.SendAsync ( new Foo ( ) ) .Wait ( ) ;"
public class MyPoco { public string op { get ; set ; } public string left { get ; set ; } public string right { get ; set ; } public string result { get ; set ; } }
"Dictionary < Guid , List < string > > ( ) Dictionary < Guid , Dictionary < Guid , List < string > > > ( )"
Started ChromeDriverport=49771version=23.0.1240.0log=\chromedriver.log [ 1220/011848 : ERROR : ipc_sync_channel.cc ( 738 ) ] Canceling pending sends [ 1220/011848 : ERROR : ipc_sync_channel.cc ( 738 ) ] Canceling pending sends [ 1220/011848 : ERROR : ipc_sync_channel.cc ( 738 ) ] Canceling pending sends [ 18104:3564:1220/011849 : ERROR : window_impl.cc ( 55 ) ] Failed to unregister class Chrome_WidgetWin_0 . Error = 1412
public class MainDbContext : DbContext { public DbSet < Car > Cars { get ; set ; } public void AddCar ( Car car ) { Cars.Add ( car ) ; SaveChanges ( ) ; } } public class CarService { public List < Car > Cars { get ; private set ; } public CarService ( ) { var dbContext = new MainDbContext ( ) ; Cars = dbContext.Cars.ToList ( ) ; } }
"+53.581N -113.587W 4.0 Km W of Edmonton , AB LongLattLocation ."
Predicate < int > p = x = > true ; Tuple < Predicate < int > > t ; t = Tuple.Create ( x = > true ) ;
string value = ( string ) combobox1.SelectedItem ;
"[ Serializable ] public abstract class BaseBusinessObject { private NameValueCollection _fieldErrors = new NameValueCollection ( ) ; protected virtual NameValueCollection FieldErrors { get { return _fieldErrors ; } set { _fieldErrors = value ; } } ... } [ Serializable ] public abstract class BaseBusinessObject { private Dictionary < string , string > _fieldErrors = new Dictionary < string , string > ( ) ; protected virtual Dictionary < string , string > FieldErrors { get { return _fieldErrors ; } set { _fieldErrors = value ; } } ... }"
streamWriter.WriteLine ( `` \ '' '' + Application.ExecutablePath + `` \ '' '' ) ; `` D : \Dev\Projects\MyApp\bin\Debug\MyApp.exe '' `` D : \Dev\Projects # /MyApp/bin/Debug/MyApp.exe ''
"RequestMessage request = new RequestMessage { merchantID = WebConfigurationManager.AppSettings [ `` cybs.merchantID '' ] , payPalDoCaptureService = new PayPalDoCaptureService { run = `` true '' , invoiceNumber = orders , paypalAuthorizationId = authId , paypalAuthorizationRequestToken = requestToken , completeType = `` Complete '' } , clientApplication = `` MyClient Application '' , clientApplicationVersion = `` 2.0 '' , clientApplicationUser = userName , clientEnvironment = WebConfigurationManager.AppSettings [ `` Tier '' ] , merchantReferenceCode = orders , customerID = OrderConstants.CustomerNumber , merchantDefinedData = new MerchantDefinedData { field1 = `` Customer # : `` + OrderConstants.CustomerNumber , field2 = orders } , purchaseTotals = new PurchaseTotals { currency = `` usd '' , grandTotalAmount = total , taxAmount = taxtotal } , item = items.ToArray ( ) } ; ReplyMessage reply = new ReplyMessage ( ) ; try { reply = SoapClient.RunTransaction ( request ) ; } catch ( Exception ex ) { reply.decision = `` SYSTEM ERROR '' ; reply.additionalData = string.Format ( `` Error processing request . Exception message : { 0 } '' , ex.Message ) ; }"
String newString = `` This is a really long long long long long '' + `` long long long long long long long long long long long long `` + `` long long long long long long long long long string for example . `` ;
"var messages = new Subject < string > ( ) ; var functionReceiveSocketData = Observable.FromAsyncPattern < byte [ ] , int , int , SocketFlags , int > ( client.Client.BeginReceive , client.Client.EndReceive ) ; Func < byte [ ] , int , byte [ ] > copy = ( bs , n ) = > { var rs = new byte [ buffer.Length ] ; bs.CopyTo ( rs , 0 ) ; return rs ; } ; Observable .Defer ( ( ) = > { var buffer = new byte [ 50 ] ; return from n in functionReceiveSocketData ( buffer , 0 , buffer.Length , SocketFlags.None ) select copy ( buffer , n ) ; } ) .Repeat ( ) .Subscribe ( x = > messages.OnNext ( System.Text.Encoding.UTF8.GetString ( x ) ) ) ; obsStrings = messages.Buffer < string , string > ( ( ) = > messages.Scan ( ( a , c ) = > a + c ) .SkipWhile ( a = > ! a.Contains ( `` \r\n '' ) ) ) ; var receivedStrings = socket.ReceiveUntilCompleted ( SocketFlags.None ) .SelectMany ( x = > System.Text.Encoding.UTF8.GetString ( x ) .ToCharArray ( ) ) .Scan ( String.Empty , ( a , b ) = > ( a.EndsWith ( `` \r\n '' ) ? `` '' : a ) + b ) .Where ( x = > x.EndsWith ( `` \r\n '' ) ) .Select ( buffered = > String.Join ( `` '' , buffered ) ) .Select ( a = > a.Replace ( `` \n '' , `` '' ) ) ;"
reportViewer.LocalReport.EnableExternalImages = true ; < img onload= '' this.fitproportional=true ; this.pv=0 ; this.ph=0 ; '' height= '' 5px '' width= '' 1px '' src= ( unknown ) > < Image Name= '' LinkedImage '' > < Source > External < /Source > < Value > =Fields ! imageUrl.Value < /Value > < Sizing > FitProportional < /Sizing > < Style > < Border > < Style > None < /Style > < /Border > < /Style > < /Image > http : // -- -- -- -- -/images/FEE40608-0457-E511-A17F-00155D145C00/FFE40608-0457-E511-A17F-00155D145C00.jpg
public class GameCell { public Color Color { get ; set ; } }
"var message = `` There { 0 : is : are } { 0 } { 0 : item : items } remaining . `` ; var output = Smart.Format ( culture , message , items.Count ) ;"
"{ `` projects '' : [ { `` name '' : '' Project 1 '' , `` client '' : { `` code '' : '' ABC '' , `` name '' : '' Client 1 '' } } , { `` name '' : '' Project 2 '' , `` client '' : { `` code '' : '' DEF '' , `` name '' : '' Client 2 '' } } , { `` name '' : '' Project 3 '' , `` client '' : { `` code '' : '' GHI '' , `` name '' : '' Client 3 '' } } ] } //json is a JObject representation of the json listed abovevar clients = json.SelectTokens ( `` $ .projects [ * ] .client '' ) ; [ { `` code '' : '' ABC '' , `` name '' : '' Client 1 '' } , { `` code '' : '' DEF '' , `` name '' : '' Client 2 '' } , { `` code '' : '' GHI '' , `` name '' : '' Client 3 '' } ] $ .projects [ * ] .client [ ? ( @ .code == 'DEF ' ) ] var test1 = json.SelectTokens ( `` $ .projects [ * ] .client [ ? ( @ .code == 'DEF ' ) ] '' ) .ToList ( ) ; var test2 = json.SelectToken ( `` $ .projects [ * ] .client [ ? ( @ .code == 'DEF ' ) ] '' ) ; $ .. [ ? ( @ .code == 'DEF ' ) ]"
"string commandText = await _client .GetCommandTextAsync ( `` Products '' , x.ProductName == `` Chai '' ) ; string commandText = await ( Task < string > ) _client .GetCommandTextAsync ( `` Products '' , x.ProductName == `` Chai '' ) ;"
"public void Foo ( int val1 , int val2 , int val3 = 5 ) { ... . } public void Foo ( int val1 , int val2 ) public void Foo ( int val1 , int val2 , int val3 ) public void Foo ( int val1 , int val2 , int val3 ) public void Foo ( int val1 , int val2 , int val3 = 5 ) //VS2008 is not supposed to show this"
"await Task.Delay ( 1000 ) ; Long EtMilliseconds ; Stopwatch etWatch = new Stopwatch ( ) ; etWatch.Restart ( ) ; while ( true ) { EtMilliseconds = etWatch.ElapsedMilliseconds ; taskDelay = Task.Delay ( 200 ) ; etWatch.Restart ( ) ; await taskDelay ; } public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; } private void button_Click ( object sender , RoutedEventArgs e ) { long EtMilliseconds ; Stopwatch etWatch = new Stopwatch ( ) ; etWatch.Restart ( ) ; while ( true ) { EtMilliseconds = etWatch.ElapsedMilliseconds ; label.Content = EtMilliseconds.ToString ( ) ; etWatch.Restart ( ) ; Thread.Sleep ( 200 ) ; } } } public partial class MainWindow : Window { public MainWindow ( ) { InitializeComponent ( ) ; } private async void button_Click ( object sender , RoutedEventArgs e ) { Task taskDelay ; long EtMilliseconds ; Stopwatch etWatch = new Stopwatch ( ) ; etWatch.Restart ( ) ; while ( true ) { EtMilliseconds = etWatch.ElapsedMilliseconds ; label.Content = EtMilliseconds.ToString ( ) ; taskDelay = Task.Delay ( 200 ) ; etWatch.Restart ( ) ; await taskDelay ; } } } public partial class MainWindow : Window { public long etMilliseconds ; public Stopwatch etWatch ; public MainWindow ( ) { InitializeComponent ( ) ; this.DataContext = this ; } // System.Windows.Threading.DispatcherTimer.Tick handler // // Updates the current seconds display and calls // InvalidateRequerySuggested on the CommandManager to force // the Command to raise the CanExecuteChanged event . private void dispatcherTimer_Tick ( object sender , EventArgs e ) { // Updating the Label which displays the current second tBoxCurrTime.Text += DateTime.Now.ToString ( `` yyyy_MMM_dd-hh : mm : ss.fff_tt '' ) + `` \n '' ; tBoxMilliSecElapsed.Text += etWatch.ElapsedMilliseconds + `` \n '' ; etWatch.Restart ( ) ; // Forcing the CommandManager to raise the RequerySuggested event CommandManager.InvalidateRequerySuggested ( ) ; } private void button_Click ( object sender , RoutedEventArgs e ) { etWatch = new Stopwatch ( ) ; // DispatcherTimer setup DispatcherTimer dispatcherTimer = new System.Windows.Threading.DispatcherTimer ( ) ; dispatcherTimer.Tick += new EventHandler ( dispatcherTimer_Tick ) ; dispatcherTimer.Interval = new TimeSpan ( 0 , 0 , 0 , 0 , 200 ) ; dispatcherTimer.Start ( ) ; etWatch.Restart ( ) ; } }"
public ActionResult View ( string id ) { return View ( ) ; }
"Categories.DataSource = objDT.Rows.Cast < DataRow > ( ) .Select ( r = > new { Attendee = r.Field < string > ( `` Attendee '' ) , Item = r.Field < string > ( `` Item '' ) } ) .GroupBy ( v = > v.Attendee ) .Select ( g = > new { Attendee = g.Key , Item = g.ToList ( ) } ) ; Categories.DataSource = objDT.AsEnumerable ( ) _ .Select ( Function ( r ) New With { .Attendee = r.Field ( Of String ) ( `` Attendee '' ) , .Item = r.Field ( Of String ) ( `` Item '' ) } ) _ .GroupBy ( Function ( v ) v.Field ( Of String ) ( `` Attendee '' ) ) _ .Select ( Function ( g ) Attendee = g.Key ) Categories.DataSource = objDT.Rows.Cast ( Of DataRow ) ( ) .AsEnumerable _ .Select New Object ( ) { Function ( r As DataRow ) Attendee = r.Field ( Of String ) ( `` Attendee '' ) , Item = r.Field ( Of String ) ( `` Item '' ) } _.GroupBy ( Function ( v ) v.Category ) _.Select ( Function ( g ) new { Category = g.Key , Numbers = g.ToList ( ) }"
if ( IsSomeDependentCalculationRequired ( ) ) PerformDependentCalculation ( ) ; // which may trigger further calculationsGenerateRequestedReport ( ) ;
"Class Container < T > { T contained ; public void ContainObject ( T obj ) { contained = obj ; if ( /*Magical Code That Detects If T Implemtns IContainableObject*/ ) { IContainableObect c = ( IContainableObject ) obj ; c.NotifyContained ( self ) ; } } } interface IContainableObject { public void NotifyContained ( Container < REPLACE_THIS > ) ; //This line is important , see below after reading code . } Class ImplementingType : IContaiableObject { public Container < ImplementingType > MyContainer ; public void NotifyContained ( Container < ImplmentingType > c ) { MyContainer = c ; } } Class Main { public static void Main ( args ) { ImplementingType iObj = new ImplementingType ( ) ; Container < ImplementingType > container = new Container ( ) ; container.ContainObject ( iObj ) ; //iObj.MyContainer should now be pointing to container . } }"
// `` Reflected '' exampleclass Class1 { public bool Boolean { get ; set ; } } class Class2 { public Class2 ( ) { var class1 = new Class1 ( ) ; var boolean = class1.get_Boolean ( ) ; } } // `` Hacked '' exampleclass Class1 { public bool get_Boolean ( ) { return true ; } }
"< Pivot x : Name= '' rootPivot '' Style= '' { StaticResource TabsStylePivotStyle } '' > < PivotItem > < Hub > < HubSection Header= '' News '' > < DataTemplate x : DataType= '' local : HomePage '' > < ItemsControl ItemsSource= '' { x : Bind ViewModel.NewsItems , Mode=OneWay } '' / > /// < summary > /// Home pag view./// < /summary > public sealed partial class HomePage : Page { /// < summary > /// Initializes a new instance of the < see cref= '' HomePage '' / > class . /// < /summary > public HomePage ( ) { // Retrieve view model this.ViewModel = ViewModelResolver.Home ; // Trigger view model loaded on page loaded this.Loaded += ( sender , args ) = > this.ViewModel.LoadedAsync ( ) ; this.InitializeComponent ( ) ; } /// < summary > /// Gets the view model . /// < /summary > /// < value > /// The view model . /// < /value > public IHomeViewModel ViewModel { get ; } } /// < summary > /// Home view model./// < /summary > public sealed class HomeViewModel : IHomeViewModel { /// < summary > /// Occurs on page loaded . /// < /summary > public async Task LoadedAsync ( ) { // Retrieve news items var news = await new NewsService ( ) .GetNewsAsync ( ) ; foreach ( var newsItem in news ) this.NewsItems.Add ( newsItem ) ; } /// < summary > /// Gets the news items . /// < /summary > /// < value > /// The news items . /// < /value > public ObservableCollection < IFeedItem > NewsItems { get ; } = new ObservableCollection < IFeedItem > ( ) ; }"
"using System ; using System.Collections.Generic ; using System.Text ; using System.Drawing ; using System.IO ; namespace DisposeTest { class Program { static void Main ( string [ ] args ) { Icon icon = new Icon ( @ '' C : \temp\test.ico '' ) ; icon.ToBitmap ( ) .Save ( @ '' C : \temp\1.bmp '' ) ; icon.Save ( new FileStream ( @ '' C : \temp\1.ico '' , FileMode.OpenOrCreate , FileAccess.ReadWrite ) ) ; icon.Dispose ( ) ; GC.Collect ( ) ; // Probably not needed , but just checking . icon.Save ( new FileStream ( @ '' C : \temp\2.ico '' , FileMode.OpenOrCreate , FileAccess.ReadWrite ) ) ; icon.ToBitmap ( ) .Save ( @ '' C : \temp\2.bmp '' ) ; } } }"
? TypeName ( Application.VBE.ActiveVBProject.VBComponents ( `` Sheet1 '' ) ) VBComponent ? TypeName ( Sheet1 ) Worksheet ? TypeName ( Application.VBE.ActiveVBProject.VBComponents ( `` Sheet1 '' ) .Properties ( `` Parent '' ) .Object ) Workbook ? TypeName ( Application.VBE.ActiveVBProject.VBComponents ( `` Sheet1 '' ) .Properties ( `` Next '' ) .Object ) Worksheet ? TypeName ( Application.VBE.ActiveVBProject.VBComponents ( `` ThisWorkbook '' ) .Properties ( `` Parent '' ) .Object ) Application ? ObjPtr ( ThisWorkbook ) 161150920
1|8 -- -- -- -- -- -- -- -- -- -- -|GlobalListTable : || -- -- -- -- -- -- -- -- -- -||Id ||ProductGroupTableId||ProductListTypeId | -- -- -- -- -- -- -- -- -- -- - 8 | 1 -- -- -- -- -- -- -- -- -- -- -|ProductGroupTable : || -- -- -- -- -- -- -- -- -- -||Id ||Name | -- -- -- -- -- -- -- -- -- -- - 1 | 8 -- -- -- -- -- -- -- -- -- -- -|ProductTable : || -- -- -- -- -- -- -- -- -- -||Id ||Name ||ProductGroupTableId| -- -- -- -- -- -- -- -- -- -- - 1 | 8 -- -- -- -- -- -- -- -- -- -- -|ComponentTable : || -- -- -- -- -- -- -- -- -- -||Id ||Name ||ProductTableId ||ComponentTypeId | -- -- -- -- -- -- -- -- -- -- - GlobalListTable1 ProductGroupTable ProductTable1 ComponentTable ComponentTypeId1 ComponentTable ComponentTypeId2 ComponentTable ComponentTypeId3 ComponentTable ComponentTypeId4 ProductTable2 ComponentTable ComponentTypeId1 ComponentTable ComponentTypeId3 ProductTable3 ComponentTable ComponentTypeId3 ComponentTable ComponentTypeId4 var productListTypeId=1 ; var componentTypeId=4 ; var _results=this.Context.GlobalListTable.Where ( i= > i.ProductListTypeId==productListTypeId ) ; .Where ( i= > i.ProductGroupTable.ProductTable.ComponentTable.ComponentTypeId == componentTypeId ) ; GlobalListTable1 ProductGroupTable ProductTable1 ComponentTable4 ProductTable3 ComponentTable4
public abstract class GenericTree < T > : Tree where T : Fruit { public Tree ( IFruitCollection < T > fruits ) : base ( fruits ) { } } public abstract class Tree { private IFruitCollection < Fruit > fruits ; public IFruitCollection < Fruit > GetFruits { get { return fruits ; } } public Tree ( IFruitCollection < Fruit > fruits ) { this.fruits = fruits ; } } public class AppleTree : GenericTree < Apple > { public AppleTree ( ) : base ( new FruitCollection < Apple > ) { } } new public IFruitCollection < T > GetFruits { get { return base.GetFruits as IFruitCollection < T > ; } } public interface IFruitCollection < T > : ICollection < T > where T : Fruit { ... }
"private void button_Process_Click ( object sender , EventArgs e ) { bgWork_Process.DoWork += Scrub_DoWork ; bgWork_Process.RunWorkerAsync ( ) ; bgWork_Process.DoWork -= Scrub_DoWork ; }"
"Parallel.ForEach ( gvWithData.Rows.Cast < GridViewRow > ( ) , row = > { if ( row.RowType == DataControlRowType.DataRow ) { // do some logic and stuff ... var type = new Object { ... } ; // save to the database type.Save ( ) ; // retrieve the saved item from the database again // since we need some autoincrement values from the db var typeAfterSave = TypeManager.GetFromDb ( ) ; // create a custom XML from the object XmlManager.CreateXml ( typeAfterSave ) ; } }"
"public class TableStorageInitializer < TTableEntity > where TTableEntity : class , new ( ) { public void Initialize ( ) { InitializeInstance ( new TTableEntity ( ) ) ; } public void InitializeInstance ( dynamic entity ) { entity.PartitionKey = Guid.NewGuid ( ) .ToString ( ) ; entity.RowKey = Guid.NewGuid ( ) .ToString ( ) ; } } class Program { static void Main ( string [ ] args ) { TableStorageInitializer < MyClass > x = new TableStorageInitializer < MyClass > ( ) ; x.Initialize ( ) ; } private class MyClass { public string PartitionKey { get ; set ; } public string RowKey { get ; set ; } public DateTime Timestamp { get ; set ; } } }"
"LyncClient client = LyncClient.GetClient ( ) ; foreach ( Device dev in client.DeviceManager.AudioDevices ) { //Do something } `` Unable to cast COM object of type 'System.__ComObject ' to interface type 'Microsoft.Office.Uc.IAudioDevice2 ' . This operation failed because the QueryInterface call on the COM component for the interface with IID ' { 86B3E5FE-4635-4C1E-A725-C80B71D04984 } ' failed due to the following error : No such interface supported ( Exception from HRESULT : 0x80004002 ( E_NOINTERFACE ) ) . '' at System.RuntimeMethodHandle.InvokeMethod ( Object target , Object [ ] arguments , Signature sig , Boolean constructor ) at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal ( Object obj , Object [ ] parameters , Object [ ] arguments ) at System.Reflection.RuntimeMethodInfo.Invoke ( Object obj , BindingFlags invokeAttr , Binder binder , Object [ ] parameters , CultureInfo culture ) at System.Reflection.MethodBase.Invoke ( Object obj , Object [ ] parameters ) at Microsoft.Lync.Model.Internal.UCWCache.CreateUCW ( Object source , CCOMInfo ccomInfo ) at Microsoft.Lync.Model.Internal.UCWCache.GetITTargetNS ( Object source ) at Microsoft.Lync.Model.Internal.UCEnumerator ` 2.get_Current ( ) at Microsoft.Lync.Model.Internal.UCEnumerator ` 2.System.Collections.Generic.IEnumerator < S > .get_Current ( ) at Microsoft.Lync.Model.Device.AudioDevice.INTERNAL_Init ( IAudioDevice initInterface ) at Microsoft.Lync.Model.Device.AudioDevice.INTERNAL_Init_Object ( Object initInterface )"
Expression.Lambda < Func < object > > ( SomeExpression )
var entity = documentSession.Query < Entity > ( ) .Single ( x = > x.Id == 1 ) ;
"void Update ( ) { if ( ! controller.isGrounded ) { //Three degree 's moveDirection = new Vector3 ( Input.GetAxis ( `` Horizontal '' ) , Input.GetAxis ( `` Thrust '' ) , Input.GetAxis ( `` Vertical '' ) ) ; moveDirection *= speed ; //rotate around Y-Axis transform.Rotate ( 0 , Input.GetAxis ( `` Yaw '' ) * rotationSpeed , 0 ) ; float currentY = transform.eulerAngles.y ; //save Y for later //rotation around X and Z float tiltAroundX = Input.GetAxis ( `` Vertical '' ) * tiltAngle ; float tiltAroundZ = -1 * ( Input.GetAxis ( `` Horizontal '' ) * tiltAngle ) ; Quaternion targetRotation = Quaternion.Euler ( tiltAroundX , currentY , tiltAroundZ ) ; Vector3 finalRotation = Quaternion.Slerp ( transform.rotation , targetRotation , smooth ) .eulerAngles ; finalRotation.y = currentY ; //reintroduce Y transform.rotation = Quaternion.Euler ( finalRotation ) ; controller.Move ( moveDirection * Time.deltaTime ) ; }"
"class Generic < T > : BindingList < Generic < T > .Inner > { public class Inner { public object Foo { get ; set ; } } } dynamic d = new Generic < string > .Inner ( ) ; var value = d.Foo ; // StackOverflowExceptionvar value = d.Bar // StackOverflowException as well , not a // 'RuntimeBinderException ' like you would expect when // trying to access a non-existing member [ Managed to Native Transition ] mscorlib.dll ! System.RuntimeTypeHandle.Instantiate ( System.Type [ ] inst ) mscorlib.dll ! System.RuntimeType.MakeGenericType ( System.Type [ ] instantiation ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.CType.CalculateAssociatedSystemTypeForAggregate ( Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType aggtype ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.CType.CalculateAssociatedSystemType ( Microsoft.CSharp.RuntimeBinder.Semantics.CType src ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.CType.AssociatedSystemType.get ( ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager.GetAggregate ( Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol agg , Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType atsOuter , Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray typeArgs ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager.GetAggregate ( Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol agg , Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray typeArgsAll ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager.GetAggregate ( Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol agg , Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray typeArgsAll ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager.SubstTypeCore ( Microsoft.CSharp.RuntimeBinder.Semantics.CType type , Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext pctx ) Microsoft.CSharp.dll ! Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager.SubstTypeArray ( Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray taSrc , Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext pctx )"
static Random rr = new Random ( ) ; static void DoAction ( Action a ) { ThreadPool.QueueUserWorkItem ( par = > { Thread.Sleep ( rr.Next ( 200 ) ) ; a.Invoke ( ) ; } ) ; } for ( int i = 0 ; i < 10 ; i++ ) { var x = i ; DoAction ( ( ) = > { Console.WriteLine ( i ) ; // scenario 1 //Console.WriteLine ( x ) ; // scenario 2 } ) ; }
# if DEBUG serverIP = localhost ; # else serverIP = GetSetting ( ) # endif private bool isLicensed ( ) # if DEBUG return true ; # endifreturn CheckSetting ( ) # if DEBUG background = humorousImage.jpg # else background = standardColor # endif
"Document document = new Document ( ) ; Section section = document.AddSection ( ) ; section.AddParagraph ( `` Signature Test '' ) ; PdfDocumentRenderer pdfRenderer = new PdfDocumentRenderer ( false , PdfFontEmbedding.Always ) ; pdfRenderer.Document = document ; pdfRenderer.RenderDocument ( ) ; // NullPointerException at the following line . AcroForm is null pdfRenderer.PdfDocument.AcroForm.Elements.Add ( PdfAcroForm.Keys.SigFlags , new PdfInteger ( 3 ) ) ; const string filename = `` HelloWorld.pdf '' ; pdfRenderer.PdfDocument.Save ( filename ) ; Process.Start ( filename ) ;"
"public string ProcessElements ( List < Item > items ) { var processed = items.Select ( item = > item.Process ( Constants.Text ) ) ; return Serialize ( processed ) ; } [ TestMethod ] public void ProcessItems_ValidItems_ProcessCalled ( ) { var contentManager = new ContentManager ( ) ; var itemMock = new Mock < Item > ( ) ; itemMock.Setup ( m = > m.Process ( It.IsAny < string > ( ) ) ) .Returns ( `` serialized '' ) ; contentManager.ProcessElements ( new List < Item > ( ) { itemMock.Object } ) ; itemMock.Verify ( m = > m.Process ( It.IsAny < string > ( ) ) , Times.Once ( ) ) ; } public string ProcessElements ( List < Item > iitem ) { var processed = new List < string > ( ) ; foreach ( var item in iitem ) { processed.Add ( item.Process ( Constants.Text ) ) ; } return Serialize ( processed ) ; }"
"public class Repository < TEntity > : IRepository < TEntity > where TEntity : class , IEntity { protected readonly DbSet < TEntity > _dbSet ; public void Insert ( TEntity entity ) { if ( entity == null ) throw new ArgumentNullException ( `` entity '' , `` Can not add null entity . `` ) ; _dbSet.Add ( entity ) ; } } .method public hidebysig newslot virtual final instance void Insert ( ! TEntity entity ) cil managed { // Code size 38 ( 0x26 ) .maxstack 8 IL_0000 : ldarg.1 > > > IL_0001 : box ! TEntity IL_0006 : brtrue.s IL_0018 IL_0008 : ldstr `` entity '' IL_000d : ldstr `` Can not add null entity . '' IL_0012 : newobj instance void [ mscorlib ] System.ArgumentNullException : :.ctor ( string , string ) IL_0017 : throw IL_0018 : ldarg.0 IL_0019 : ldfld class [ EntityFramework ] System.Data.Entity.DbSet ` 1 < ! 0 > class Repository ` 1 < ! TEntity > : :_dbSet IL_001e : ldarg.1 IL_001f : callvirt instance ! 0 class [ EntityFramework ] System.Data.Entity.DbSet ` 1 < ! TEntity > : :Add ( ! 0 ) IL_0024 : pop IL_0025 : ret } // end of method Repository ` 1 : :Insert .maxstack 2 .locals init ( [ 0 ] ! TEntity CS $ 0 $ 0000 ) IL_0000 : ldarg.1 > > > IL_0001 : box ! TEntity IL_0006 : ldloca.s CS $ 0 $ 0000 IL_0008 : initobj ! TEntity IL_000e : ldloc.0 > > > IL_000f : box ! TEntity IL_0014 : call bool [ mscorlib ] System.Object : :Equals ( object , object ) IL_0019 : brfalse.s IL_002b 0cd5af28 55 push ebp0cd5af29 8bec mov ebp , esp0cd5af2b 83ec18 sub esp,18h0cd5af2e 33c0 xor eax , eax0cd5af30 8945f0 mov dword ptr [ ebp-10h ] , eax0cd5af33 8945ec mov dword ptr [ ebp-14h ] , eax0cd5af36 8945e8 mov dword ptr [ ebp-18h ] , eax0cd5af39 894df8 mov dword ptr [ ebp-8 ] , ecx //entity reference to [ ebp-0Ch ] 0cd5af3c 8955f4 mov dword ptr [ ebp-0Ch ] , edx //some debugger checks0cd5af3f 833d9424760300 cmp dword ptr ds : [ 3762494h ] ,00cd5af46 7405 je 0cd5af4d Branch0cd5af48 e8e1cac25a call clr ! JIT_DbgIsJustMyCode ( 67987a2e ) 0cd5af4d c745fc00000000 mov dword ptr [ ebp-4 ] ,00cd5af54 90 nop //comparison or entity ref with zero0cd5af55 837df400 cmp dword ptr [ ebp-0Ch ] ,00cd5af59 0f95c0 setne al0cd5af5c 0fb6c0 movzx eax , al0cd5af5f 8945fc mov dword ptr [ ebp-4 ] , eax0cd5af62 837dfc00 cmp dword ptr [ ebp-4 ] ,0 //if not zero , jump further0cd5af66 7542 jne 0cd5afaa Branch //throwing exception here"
"// custom sort ordervar sortedData = data.OrderBy ( x = > ( new List < string > ( ) { `` Orange '' , `` Apple '' , `` Pear '' } ) .IndexOf ( x.Name ) ) ; foreach ( var d in sortedData ) { ... ."
"If ( object Is Man ) Return Image ( `` Man '' ) ElseIf ( object Is Woman ) Return Image ( `` Woman '' ) Else Return Image ( `` Unknown Object '' ) NS : Real RealWorld ( Contains a collection of all the RealObjects ) RealObject Person Man WomanNS : Virtual VirtualWorld ( Holds a reference to the RealWorld , and is responsible for rendering ) Image ( The actual representation of the RealWorldObject , could also be a mesh.. ) ArtManager ( Decides how an object is to be represented ) class VirtualWorld { private RealWorld _world ; public VirtualWorld ( RealWorld world ) { _world = world ; } public void Render ( ) { foreach ( RealObject o in _world.Objects ) { Image img = ArtManager.GetImageForObject ( o ) ; img.Render ( ) ; } } } static class ArtManager { public static Image GetImageForObject ( RealObject obj ) // This is always used { Image img = new Image ( `` Unknown object '' ) ; return img ; } public static Image GetImageForObject ( Man man ) { if ( man.Age < 18 ) return new Image ( `` Image of Boy '' ) ; else return new Image ( `` Image of Man '' ) ; } public static Image GetImageForObject ( Woman woman ) { if ( woman.Age < 70 ) return new Image ( `` Image of Woman '' ) ; else return new Image ( `` Image of Granny '' ) ; } }"
"( Data ) MemoryCache.Default.AddOrGetExisting ( GetKey ( credential ) , // must be a string userData , DateTime.Now.AddMinutes ( 5 ) ) ; public override int GetHashCode ( ) { int hashCode = 0 ; if ( GoogleCredentials ! = null ) { hashCode ^= GoogleCredentials.GetHashCode ( ) ; } if ( FacebookCredentials ! = null ) { hashCode ^= FacebookCredentials.GetHashCode ( ) ; } return hashCode ; }"
"string filePath1 = Server.MapPath ( System.IO.Path.GetFileName ( file.FileName.ToString ( ) ) ) ; file.SaveAs ( filePath1 ) ; package = app.LoadPackage ( packageString , null ) ; package.Connections [ `` Excel Connection Manager '' ] .ConnectionString = @ '' Provider=Microsoft.ACE.OLEDB.12.0 ; Data Source= '' + filePath1 + `` ; Extended Properties=Excel 12.0 ; HDR=YES ; IMEX=1 '' ; Microsoft.SqlServer.Dts.Runtime.DTSExecResult results = package.Execute ( ) ; String.Format ( `` File : { 0 } uploaded . `` , file.FileName )"
"int uploadsID ; int pageNumber ; int x ; int y ; int w ; int h ; bool isValidUploadID = int.TryParse ( context.Request.QueryString [ `` uploadID '' ] , out uploadsID ) ; bool isValidPage = int.TryParse ( context.Request.QueryString [ `` page '' ] , out pageNumber ) ; bool isValidX = int.TryParse ( context.Request.QueryString [ `` x '' ] , out x ) ; bool isValidY = int.TryParse ( context.Request.QueryString [ `` y '' ] , out y ) ; bool isValidW = int.TryParse ( context.Request.QueryString [ `` w '' ] , out w ) ; bool isValidH = int.TryParse ( context.Request.QueryString [ `` h '' ] , out h ) ; if ( isValidUploadID & & isValidPage & & isValidX & & isValidY & isValidW & isValidH ) {"
"public String GetAllSalesInvoices ( string customer_id , string Startdate , string Enddate ) { System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer ( ) ; string query = `` SELECT * FROM sales_invoice WHERE customer_id = '' + customer_id + `` AND invoice_date BETWEEN ' '' + Startdate + `` ' AND ' '' + Enddate + `` ' '' ; DataSet ds = conObj.execQuery ( query ) ; DataTable dt = new DataTable ( ) ; dt = ds.Tables [ 0 ] ; List < sales_invoice > result = new List < sales_invoice > ( ) ; foreach ( DataRow dr in dt.Rows ) { sales_invoice inv = new sales_invoice ( ) { Invoice_id = Convert.ToInt32 ( dr [ `` invoice_id '' ] ) , Invoice_date = Convert.ToString ( dr [ `` invoice_date '' ] .ToString ( ) ) , Customer_id = Convert.ToInt32 ( dr [ `` customer_id '' ] ) , Product_id = Convert.ToInt32 ( ( dr [ `` product_id '' ] ) ) , Time = Convert.ToString ( ( dr [ `` time '' ] ) .ToString ( ) ) , Quantity = Convert.ToInt32 ( ( dr [ `` quantity '' ] ) ) , Unit_of_measure = Convert.ToString ( dr [ `` unit_of_measure '' ] ) , Product_price = Convert.ToInt32 ( ( dr [ `` product_price '' ] ) ) , Sub_total = Convert.ToInt32 ( ( dr [ `` sub_total '' ] ) ) , } ; result.Add ( inv ) ; } string json=serializer.Serialize ( result ) ; return json ; }"
"Bitmap original = new Bitmap ( `` D : \\img\\1.jpg '' ) ; Bitmap inp_bmp = new Bitmap ( `` D : \\img\\1.jpg '' ) ; int width = inp_bmp.Width ; int height = inp_bmp.Height ; Color pixel ; for ( int y = 0 ; y < height ; y += 1 ) { for ( int x = 0 ; x < width ; x += 1 ) { pixel = inp_bmp.GetPixel ( x , y ) ; int a = pixel.A ; int r = ( pixel.R ^ ( 1000 ) ) % 256 ; int g = ( pixel.G ^ ( 185675 ) ) % 256 ; int b = ( pixel.B ^ ( 78942 ) ) % 256 ; inp_bmp.SetPixel ( x , y , Color.FromArgb ( a , r , g , b ) ) ; } } pictureBox2.Image = inp_bmp ; pictureBox1.Image = original ; inp_bmp.Save ( `` D : \\img\\4.jpg '' ) ; Bitmap inp_bmp = new Bitmap ( `` D : \\img\\1.jpg '' ) ; Bitmap inp_bmp = new Bitmap ( `` D : \\img\\4.jpg '' ) ; //inp_bmp.Save ( `` D : \\img\\4.jpg '' ) ;"
"class Tree { public event EventHandler MadeSound ; public void Fall ( ) { MadeSound ( this , new EventArgs ( ) ) ; } static void Main ( string [ ] args ) { Tree oaky = new Tree ( ) ; oaky.Fall ( ) ; } }"
SqlDataReader reader = cmd.ExecuteReader ( ) ; DataTable schemaTable = reader.GetSchemaTable ( ) ; // the following compiles correctlyforeach ( DataRow field in schemaTable.Rows ) { Console.WriteLine ( field [ `` ColumnName '' ] ) ; } // the following does not compile as 'var ' is of type 'object'foreach ( var field in schemaTable.Rows ) { // Error : Can not apply indexing with [ ] to an expression of type 'object ' Console.WriteLine ( field [ `` ColumnName '' ] ) ; }
using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace sample { class Program { static void Main ( string [ ] args ) { int value = 25 ; Console.WriteLine ( value.ToString ( ) ) ; Console.WriteLine ( value ) ; Console.ReadLine ( ) ; } } }
"public interface IMyObj { int Id { get ; set ; } } public class MyObj1 : IMyObj { public MyObj1 ( int id ) { Id = id ; } public int Id { get ; set ; } public override string ToString ( ) = > $ '' { GetType ( ) .Name } : { Id } '' ; } public class MyObj2 : IMyObj { public MyObj2 ( int id ) { Id = id ; } public int Id { get ; set ; } public override string ToString ( ) = > $ '' { GetType ( ) .Name } : { Id } '' ; } var numbers = new [ ] { 1 , 5 , 11 , 17 } ; var list = new List < IMyObj > ( ) ; foreach ( var n in numbers ) { // I 'd like to simplify this part with LINQ ... list.Add ( new MyObj1 ( n ) ) ; list.Add ( new MyObj2 ( n ) ) ; } Assert.AreEqual ( 8 , list.Count ) ; Count = 8 [ 0 ] : { MyObj1 : 1 } [ 1 ] : { MyObj2 : 1 } [ 2 ] : { MyObj1 : 5 } [ 3 ] : { MyObj2 : 5 } [ 4 ] : { MyObj1 : 11 } [ 5 ] : { MyObj2 : 11 } [ 6 ] : { MyObj1 : 17 } [ 7 ] : { MyObj2 : 17 }"
"var strings = new [ ] { `` Tea and Coffee '' , `` Telephone '' , `` TV '' } ; var orderedStrings = strings.OrderBy ( s = > s ) .ToArray ( ) ; let strings = [ | `` Tea and Coffee '' ; `` Telephone '' ; `` TV '' | ] let orderedStrings = strings | > Seq.sortBy ( fun s - > s ) | > Seq.toArray let strings = [ | `` UV '' ; `` Uv '' ; `` uV '' ; `` uv '' ; `` Tv '' ; `` TV '' ; `` tv '' ; `` tV '' | ] let orderedStrings = strings | > Seq.sortBy ( fun s - > s ) | > Seq.toArray var strings = new [ ] { `` UV '' , `` Uv '' , `` uv '' , `` uV '' , `` TV '' , `` tV '' , `` Tv '' , `` tv '' } ; var orderedStrings = strings.OrderBy ( s = > s ) .ToArray ( ) ;"
"// Get the the object entry from DatabaseMeasuredObject object1 ; try { object1 = ( MeasuredObject ) ( from getObject in db.MeasuredObject where wantedObject.Id.Equals ( getObject.Id ) select getObject ) .Single ( ) ; } catch ( System.ArgumentNullException e ) { throw new System.ArgumentException ( `` Object does not exist '' , `` wantedObject '' , e ) ; } // Get every measurement which matches the state in the time period and the next measurement from itvar pairs = ( from m in object1.Measurements join nextM in object1.Measurements on ( from next in object1.Measurements where ( m.Id < next.Id ) select next.Id ) .Min ( ) equals nextM.Id where 'm is in time period and has required state ' select new { meas = m , next = nextM } ) ;"
"< phone : PhoneApplicationPage x : Class= '' **.HtmlView '' xmlns= '' http : //schemas.microsoft.com/winfx/2006/xaml/presentation '' xmlns : x= '' http : //schemas.microsoft.com/winfx/2006/xaml '' xmlns : phone= '' clr-namespace : Microsoft.Phone.Controls ; assembly=Microsoft.Phone '' xmlns : d= '' http : //schemas.microsoft.com/expression/blend/2008 '' xmlns : mc= '' http : //schemas.openxmlformats.org/markup-compatibility/2006 '' xmlns : controls= '' clr-namespace : Microsoft.Phone.Controls ; assembly=Microsoft.Phone.Controls '' FontFamily= '' { StaticResource PhoneFontFamilyNormal } '' FontSize= '' { StaticResource PhoneFontSizeNormal } '' Foreground= '' { StaticResource PhoneForegroundBrush } '' SupportedOrientations= '' PortraitOrLandscape '' Orientation= '' Portrait '' mc : Ignorable= '' d '' Style= '' { StaticResource LeafPageNavigationStyle } '' > < controls : Pivot x : Name= '' Html '' ItemsSource= '' { Binding Items } '' Style= '' { StaticResource HeaderlessPivot } '' > < controls : Pivot.ItemTemplate > < DataTemplate > < phone : WebBrowser Source= '' { Binding } '' / > < /DataTemplate > < /controls : Pivot.ItemTemplate > < /controls : Pivot > < /phone : PhoneApplicationPage > namespace DSBMobile.ViewModels { public class HtmlViewModel : Conductor < Uri > .Collection.OneActive { private readonly IUnburyableState < Uri [ ] , HtmlViewModel > _state ; public HtmlViewModel ( IUnburyableState < Uri [ ] , HtmlViewModel > state ) { _state = state ; Items.AddRange ( _state.State.ForceGetValue ( ) ) ; } } }"
"< Grid > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' x : Name= '' TitleRow '' / > < RowDefinition Height= '' Auto '' x : Name= '' LastNameRow '' / > < RowDefinition Height= '' Auto '' x : Name= '' FirstNameRow '' / > < RowDefinition Height= '' Auto '' x : Name= '' EmailRow '' / > < /Grid.RowDefinitions > < Grid.ColumnDefinitions > < ColumnDefinition x : Name= '' LabelColumn '' / > < ColumnDefinition x : Name= '' ValueColumn '' / > < /Grid.ColumnDefinitions > < Label Grid.Row= '' { me : GridDefinition Name=TitleRow } '' Grid.ColumnSpan= '' 2 '' FontWeight= '' Bold '' FontSize= '' 14 '' / > < Label Grid.Row= '' { me : GridDefinition Name=LastNameRow } '' Grid.Column= '' { me : GridDefinition Name=LabelColumn } '' FontWeight= '' Bold '' FontSize= '' 14 '' / > < /Grid > [ MarkupExtensionReturnType ( typeof ( int ) ) ] public class GridDefinitionExtension : MarkupExtension { public string Name { private get ; set ; } public override object ProvideValue ( IServiceProvider serviceProvider ) { var referenceExt = new Reference ( Name ) ; var definition = referenceExt.ProvideValue ( serviceProvider ) ; if ( definition is DefinitionBase ) { var grid = ( definition as FrameworkContentElement ) .Parent as Grid ; if ( grid ! = null & & definition is RowDefinition ) return grid.RowDefinitions.IndexOf ( definition as RowDefinition ) ; if ( grid ! = null & & definition is ColumnDefinition ) return grid.ColumnDefinitions.IndexOf ( definition as ColumnDefinition ) ; } // This Extension only works for DefinitionBase Elements . throw new NotSupportedException ( ) ; } } var definition = referenceExt.ProvideValue ( serviceProvider ) ; public override object ProvideValue ( IServiceProvider serviceProvider ) { if ( serviceProvider == null ) throw new ArgumentNullException ( `` serviceProvider '' ) ; IXamlNameResolver xamlNameResolver = serviceProvider.GetService ( typeof ( IXamlNameResolver ) ) as IXamlNameResolver ; if ( xamlNameResolver == null ) throw new InvalidOperationException ( System.Xaml.SR.Get ( `` MissingNameResolver '' ) ) ; if ( string.IsNullOrEmpty ( this.Name ) ) throw new InvalidOperationException ( System.Xaml.SR.Get ( `` MustHaveName '' ) ) ; object obj = xamlNameResolver.Resolve ( this.Name ) ; if ( obj == null ) { string [ ] strArray = new string [ 1 ] { this.Name } ; obj = xamlNameResolver.GetFixupToken ( ( IEnumerable < string > ) strArray , true ) ; } return obj ; } if ( serviceProvider == null ) throw new ArgumentNullException ( `` serviceProvider '' ) ; IXamlNameResolver xamlNameResolver = serviceProvider.GetService ( typeof ( IXamlNameResolver ) ) as IXamlNameResolver ; object obj = xamlNameResolver.Resolve ( this.Name ) ; if ( obj == null ) { var strArray = new string [ 1 ] { this.Name } ; obj = xamlNameResolver.GetFixupToken ( ( IEnumerable < string > ) strArray , true ) ; } return obj ; public object GetFixupToken ( IEnumerable < string > names , bool canAssignDirectly ) { throw new NotImplementedException ( ) ; } public object GetFixupToken ( IEnumerable < string > names ) { throw new NotImplementedException ( ) ; }"
"public static bool SafeEquals < T > ( this T a , T b ) { if ( a == null ) return b == null ; return a.Equals ( b ) ; } public static bool SafeEquals < X > ( this IEquatable < X > a , IEquatable < X > b ) { if ( a == null ) return b == null ; return a.Equals ( b ) ; }"
public bool IsGenericList ( Type source ) { return ( source.IsGenericType & & /*here goes the manipulation on source type*/ == typeof ( List < > ) ) ; }
"public LearningResultViewModel NaiveBayes ( int [ ] [ ] inputs , int [ ] outputs ) { // Create a new Naive Bayes learning var learner = new NaiveBayesLearning ( ) ; // Learn a Naive Bayes model from the examples NaiveBayes nb = learner.Learn ( inputs , outputs ) ; # region test phase // Compute the machine outputs int [ ] predicted = nb.Decide ( inputs ) ; // Use confusion matrix to compute some statistics . ConfusionMatrix confusionMatrix = new ConfusionMatrix ( predicted , outputs , 1 , 0 ) ; # endregion LearningResultViewModel result = new LearningResultViewModel ( ) { Distributions = nb.Distributions , NumberOfClasses = nb.NumberOfClasses , NumberOfInputs = nb.NumberOfInputs , NumberOfOutputs = nb.NumberOfOutputs , NumberOfSymbols = nb.NumberOfSymbols , Priors = nb.Priors , confusionMatrix = confusionMatrix } ; return result ; }"
"foreach ( int key in list.Keys ) { list [ key ] *= 3 ; } SortedList < int , double > list = new SortedList < int , double > ( ) ; // Add few values fist// E.g . first try ... IList < double > values = list.Values ; for ( int i = 0 ; i < values.Count ; i++ ) { values [ i ] *= 3 ; } // E.g . second tryforeach ( KeyValuePair < int , double > kv in list ) { kv.Value *= 3 ; }"
"public static class IEnumberableGridExtension { public static HelperResult Grid < T > ( this IEnumerable < T > gridItems , Action < GridView < T > > thegrid ) { ... ... .. } } @ Model.Products.Grid < Product > ( grid= > { ... } ) ; @ Model.Products.Grid ( grid= > { ... } ) ;"
UnlockDevice ( ) ; try { DoSomethingWithDevice ( ) ; } finally { LockDevice ( ) ; // can fail with an exception }
bool eq = ( 1 / double.Parse ( `` -0.0 '' ) ) == ( 1 / -0.0 ) ;
Mathf.FloorToInt ( NumRows/2 ) Mathf.FloorToInt ( f : NumRows/2 )
"var result = await _records.Aggregate ( ) .Match ( record = > record.Statuses.Any ( status = > status.Status == currentStatus ) ) .Unwind ( record = > record.Statuses ) .Sort ( Builders < BsonDocument > .Sort.Descending ( `` statuses.date '' ) ) .Group ( doc = > doc [ `` _id '' ] , group = > new { Id = group.Key , CurrentStatus = group.First ( ) [ `` statuses '' ] } ) .Match ( arg = > arg.CurrentStatus [ `` status '' ] == BsonValue.Create ( currentStatus.ToString ( ) ) ) .ToListAsync ( ) ; db.records.aggregate ( [ { $ match : { `` statuses.status '' : `` Finished '' } } , { $ unwind : `` $ statuses '' } , { $ sort : { `` statuses.date '' : -1 } } , { $ group : { _id : `` $ _id '' , current_status : { $ first : `` $ statuses '' } } } , { $ match : { `` current_status.status '' : `` Finished '' } } ] ) System.NotSupportedException : get_Item of type MongoDB.Bson.BsonValue is an unsupported method in a $ project or $ group pipeline operator ."
"private async void LoadData_Click ( Object sender , EventArgs e ) { this.LoadDataBtn.Enabled = false ; IProgress < String > progressHandler = new Progress < String > ( p = > this.Log ( p ) ) ; this.Log ( `` Initiating work ... '' ) ; List < Int32 > result = await this.HeavyIO ( new List < Int32 > { 1 , 2 , 3 } , progressHandler ) ; this.Log ( `` Done ! `` ) ; this.LoadDataBtn.Enabled = true ; } private async Task < List < Int32 > > HeavyIO ( List < Int32 > ids , IProgress < String > progress ) { List < Int32 > result = new List < Int32 > ( ) ; foreach ( Int32 id in ids ) { progress ? .Report ( `` Downloading data for `` + id ) ; await Task.Delay ( 500 ) ; // Assume that data is downloaded from the web here . progress ? .Report ( `` Data loaded successfully for `` + id ) ; Int32 x = id + 1 ; // Assume some lightweight processing based on downloaded data . progress ? .Report ( `` Processing succeeded for `` + id ) ; result.Add ( x ) ; } return result ; } private void Log ( String message ) { message += Environment.NewLine ; this.RichTextBox.AppendText ( message ) ; Console.Write ( message ) ; } Initiating work ... Downloading data for 1Data loaded successfully for 1Processing succeeded for 1Downloading data for 2Data loaded successfully for 2Processing succeeded for 2Downloading data for 3Done ! Data loaded successfully for 3Processing succeeded for 3"
"var enumerator = new NAudio.CoreAudioApi.MMDeviceEnumerator ( ) ; // Allows you to enumerate rendering devices in certain statesvar endpoints = enumerator.EnumerateAudioEndPoints ( DataFlow.Render , DeviceState.Unplugged | DeviceState.Active ) ; foreach ( var endpoint in endpoints ) { Console.WriteLine ( `` { 0 } - { 1 } '' , endpoint.DeviceFriendlyName , endpoint.State ) ; } // Aswell as hook to the actual eventenumerator.RegisterEndpointNotificationCallback ( new NotificationClient ( ) ) ; class NotificationClient : NAudio.CoreAudioApi.Interfaces.IMMNotificationClient { void IMMNotificationClient.OnDeviceStateChanged ( string deviceId , DeviceState newState ) { Console.WriteLine ( `` OnDeviceStateChanged\n Device Id -- > { 0 } : Device State { 1 } '' , deviceId , newState ) ; } void IMMNotificationClient.OnDeviceAdded ( string pwstrDeviceId ) { } void IMMNotificationClient.OnDeviceRemoved ( string deviceId ) { } void IMMNotificationClient.OnDefaultDeviceChanged ( DataFlow flow , Role role , string defaultDeviceId ) { } void IMMNotificationClient.OnPropertyValueChanged ( string pwstrDeviceId , PropertyKey key ) { } }"
"namespace MvcApplication1.Controllers { public class AccountController : Controller { private readonly UserManager _manager ; public AccountController ( ) { _manager = new UserManager ( ContextFactory.GetContext ( ) ) ; } [ HttpPost ] public async Task < ActionResult > Register ( LoginModel model ) { var user = await _manager.FindAsync ( model.UserName ) ; if ( user ! = null ) { //do some work } else { ModelState.AddModelError ( `` '' , `` Can not Find User '' ) ; return View ( model ) ; } } } } namespace MvcApplication1 { public class UserManager { private readonly IDBContext _context ; public UserManager ( IDBContext context ) { _context = context ; } public Task < UserProfile > FindAsync ( string ID ) { var queryHelper = new UserQueries ( _context ) ; var localID = ID ; return Task.Factory.StartNew ( ( ) = > queryHelper.GetProfile ( localID ) ) ; } } } public class UserQueries { private readonly IDBContext _context ; public UserQueries ( IDBContext context ) { _context = context ; } public UserProfile GetProfile ( string ID ) { DataTable dt = _context.ExecuteDataTable ( ... ) //do work with dt and return UserProfile } } } public interface IDBContext { DataTable ExecuteDataTable ( string sql , IEnumerable < SqlParameter > parameters ) ; }"
"if ( ! DateTime.TryParseExact ( dateString , `` MM/dd/yyyy '' , CultureInfo.InvariantCulture , DateTimeStyles.None , out dateOn ) ) { return false ; } else if ( ! DateTime.TryParseExact ( timeString , `` hh : mm tt '' , CultureInfo.InvariantCulture , DateTimeStyles.None , out timeOn ) ) { return false ; } return SaveWorkshop ( id , name , dateOn , timeOn , capacity , description , duration , isCancelled ) ;"
public static void Foo1 < T > ( T list ) where T : IList { } public static void Foo2 ( IList list ) { } List < string > myList = new List < string > ( ) ; Foo1 ( myList ) ; Foo2 ( myList ) ;
"using ( var parser = new InternalSyntax.LanguageParser ( lexer , oldTree ? .GetRoot ( ) , changes ) )"
"public class Product { public int ProductId { get ; set ; } public string ProductName { get ; set ; } public int CategoryId { get ; set ; } public string CategoryName { get ; set ; } } public virtual DbSet < Product > Products { get ; set ; } public class ProductConfiguration : EntityTypeConfiguration < Product > { public ProductConfiguration ( ) { HasKey ( t = > t.ProductId ) ; // How do I instruct EF to pull just the column 'CategoryName ' // from the FK-related Categories table ? } } Map ( m = > { m.Property ( t = > t.CategoryName ) ; m.ToTable ( `` Categories '' ) ; } ) ; SELECT [ Extent1 ] . [ ProductId ] AS [ ProductId ] , [ Extent2 ] . [ ProductName ] AS [ ProductName ] , [ Extent2 ] . [ CategoryId ] AS [ CategoryId ] , [ Extent1 ] . [ CategoryName ] AS [ CategoryName ] , FROM [ dbo ] . [ Categories ] AS [ Extent1 ] INNER JOIN [ dbo ] . [ Product1 ] AS [ Extent2 ] ON [ Extent1 ] . [ ProductId ] = [ Extent2 ] . [ ProductId ]"
"namespace UnitTestProject1 { using Xunit ; using Moq ; public class CalculatorTests { private readonly ICalculator _calculator ; public CalculatorTests ( ) { var mock = new Mock < ICalculator > ( ) ; mock.Setup ( x = > x.Add ( 2 , 2 ) ) .Returns ( 4 ) ; mock.Setup ( x = > x.Subtract ( 5 , 2 ) ) .Returns ( 3 ) ; this._calculator = mock.Object ; } [ Fact ] public void Calculator_Should_Add ( ) { var result = _calculator.Add ( 2 , 2 ) ; Assert.Equal ( 4 , result ) ; } [ Fact ] public void Calculator_Should_Subtract ( ) { var result = _calculator.Subtract ( 5 , 2 ) ; Assert.Equal ( 3 , result ) ; } } public class Calculator : ICalculator { public int Add ( int a , int b ) { return a + b ; } public int Subtract ( int a , int b ) { return a - b ; } } public interface ICalculator { int Add ( int a , int b ) ; int Subtract ( int a , int b ) ; } }"
"public string GetSelectedTextAsCsv ( ) { var buffer = new StringBuilder ( ) ; foreach ( var cb in SelectedCheckBoxes ) { buffer.Append ( cb.Text ) .Append ( `` , '' ) ; } return DropLastComma ( buffer.ToString ( ) ) ; } public string GetTagAsCsv ( ) { var buffer = new StringBuilder ( ) ; foreach ( var cb in SelectedCheckBoxes ) { buffer.Append ( cb.Tag ) .Append ( `` , '' ) ; } return DropLastComma ( buffer.ToString ( ) ) ; } public Func < T , string > ConvertToCsv < T > ( ) { return propertyName = > { var buffer = new StringBuilder ( ) ; foreach ( var checkBox in SelectedCheckBoxes ) { buffer.Append ( /* How can you abstract this portion ? like following ? */ checkBox.propertyName ) .Append ( `` , '' ) ; } return DropLastComma ( buffer.ToString ( ) ) ; } ; } public string ConvertToCsv < T > ( Func < CheckBox , T > getValue ) { var stringValues = SelectedCheckBoxes.Select ( cb = > getValue ( cb ) .ToString ( ) ) .ToArray ( ) ; return string.Join ( `` , '' , stringValues ) ; } public string GetSelectedTextAsCsv ( ) { return ConvertToCsv ( cb = > cb.Text ) ; } public string GetTagAsCsv ( ) { return ConvertToCsv ( cb = > cb.Tag ) ; } public string GetAsCsv < T > ( Func < CheckBox , T > getValue ) { return string.Join ( `` , '' , SelectedCheckBoxes.Select ( cb = > getValue ( cb ) .ToString ( ) ) .ToArray ( ) ) ; } public string GetSelectedTextAsCsv ( ) { return GetAsCsv ( cb = > cb.Text ) ; } public string GetTagAsCsv ( ) { return GetAsCsv ( cb = > cb.Tag == null ? string.Empty : cb.Tag.ToString ( ) ) ; } private string GetAsCsv ( Func < CheckBox , string > getValue ) { return string.Join ( `` , '' , SelectedCheckBoxes.Select ( getValue ) .ToArray ( ) ) ; }"
string [ ] lines = ( File.ReadAllLines ( @ '' C : \Users\Jim\Desktop\adminkeys.cfg '' ) ) ;
interface MyInterface < out T > { T abracadabra ( ) ; } //works OKinterface MyInterface2 < in T > { T abracadabra ( ) ; } //compiler raises an error.//This makes me think that the compiler is cappable //of understanding what situations might generate //run-time problems and then prohibits them . IMyInterface < ? extends whatever > myInterface ; //covarianceIMyInterface < ? super whatever > myInterface2 ; //contravariance
"public static UIElement CreateElement ( XElement element ) { var name = element.Attribute ( `` Name '' ) .Value ; var text = element.Attribute ( `` Value '' ) .Value ; var width = Convert.ToDouble ( element.Attribute ( `` Width '' ) .Value ) ; var height = Convert.ToDouble ( element.Attribute ( `` Height '' ) .Value ) ; // ... switch ( element.Attribute ( `` Type '' ) .Value ) { case `` System.Windows.Forms.Label '' : return new System.Windows.Controls.Label ( ) { Name = name , Content = text , Width = width , Height = height } ; case `` System.Windows.Forms.Button '' : return new System.Windows.Controls.Button ( ) { Name = name , Content = text , Width = width , Height = height } ; // ... default : return null ; } }"
"public string CreateStrongHash ( string textToHash ) { byte [ ] salt =System.Text.Encoding.ASCII.GetBytes ( `` TeStSaLt '' ) ; Rfc2898DeriveBytes k1 = new Rfc2898DeriveBytes ( textToHash , salt , 1000 ) ; var encryptor = SHA512.Create ( ) ; var hash = encryptor.ComputeHash ( k1.GetBytes ( 16 ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < hash.Length ; i++ ) { sb.Append ( hash [ i ] .ToString ( `` x2 '' ) ) ; } return sb.ToString ( ) ; }"
"txtInput.MouseDown += ( s , e ) = > { txtInput.Focus ( ) ; }"
'Class level.Private BytesWritten As Long = 0Private Pause As Boolean = False'Method ( thread ) level.While BytesWritten < [ target file size ] ... write 4096 byte buffer to file ... While Pause = True Thread.Sleep ( 250 ) End While ... do some more stuff ... End While //Class level.long bytesWritten = 0 ; bool pause = false ; //Method ( thread ) level.while ( bytesWritten < [ target file size ] ) { ... write 4096 byte buffer to file ... while ( pause == true ) { Thread.Sleep ( 250 ) ; } ... do some more stuff ... }
Could not load type `` App.MvcApplication ''
> return unchecked ( -1L * -9223372036854775808L ) ; -9223372036854775808 > return unchecked ( -2L * -9223372036854775808L ) ; 0 > return unchecked ( -3L * -9223372036854775808L ) ; -9223372036854775808 > return unchecked ( -4L * -9223372036854775808L ) ; 0 > return unchecked ( -5L * -9223372036854775808L ) ; -9223372036854775808 > -1L * -9223372036854775808L ; ; val it : int64 = -9223372036854775808L > -2L * -9223372036854775808L ; ; val it : int64 = 0L > -3L * -9223372036854775808L ; ; val it : int64 = -9223372036854775808L > -4L * -9223372036854775808L ; ; val it : int64 = 0L
"protected string GetUserId ( ) { if ( HttpContext.User.Identity is ClaimsIdentity identity ) { IEnumerable < Claim > claims = identity.Claims ; return claims.ToList ( ) [ 0 ] .Value ; } return `` '' ; } [ Theory ] [ MemberData ( nameof ( TestCreateUsergroupItemData ) ) ] public async Task TestPostUsergroupItem ( Usergroup usergroup ) { // Arrange UsergroupController controller = new UsergroupController ( context , mapper ) ; // Act var controllerResult = await controller.Post ( usergroup ) .ConfigureAwait ( false ) ; // Assert // ... . }"
if ( compare < 10 ) { // Do one thing } else if ( 10 < = compare & & compare < 20 ) { // Do another thing } else if ( 20 < = compare & & compare < 30 ) { // Do yet another thing } else { // Do nothing }
var tree = CSharpSyntaxTree.ParseText ( soureCode ) ; var root = ( CSharpSyntaxNode ) tree.GetRoot ( ) ; return root.ToFullString ( ) ;
< % @ OutputCache Duration= '' 320 '' VaryByParam= '' none '' VaryByContentEncodings= '' gzip '' % >
"public static TValue Get < TKey , TValue > ( this Dictionary < TKey , TValue > src , TKey key , TValue @ default ) = > src.TryGetValue ( key , out var value ) ? value : @ default ; < Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup > < TargetFramework > netcoreapp3.0 < /TargetFramework > < LangVersion > 8 < /LangVersion > < Nullable > enable < /Nullable > < WarningsAsErrors > true < /WarningsAsErrors > < /PropertyGroup > … < /Project >"
"var transferRequest = new BackgroundTransferRequest ( new Uri ( url , UriKind.Absolute ) ) ; transferRequest.Tag = DateTime.Now.ToString ( CultureInfo.InvariantCulture ) ; transferRequest.Method = `` POST '' ; transferRequest.UploadLocation = new Uri ( defect.VoiceRecordFileName , UriKind.Relative ) ; transferRequest.TransferPreferences = TransferPreferences.AllowCellularAndBattery ; transferRequest.Headers.Add ( `` Content-Type '' , `` audio/wav '' ) ; transferRequest.TransferStatusChanged += new EventHandler < BackgroundTransferEventArgs > ( transferRequest_TransferStatusChanged ) ; transferRequest.TransferProgressChanged += new EventHandler < BackgroundTransferEventArgs > ( transferRequest_TransferProgressChanged ) ; BackgroundTransferService.Add ( transferRequest ) ; var tmp = NetworkInformation.GetInternetConnectionProfile ( ) ; var cost = tmp.GetConnectionCost ( ) ; var type = cost.NetworkCostType ;"
< div > < % : Model.Something % > < /div > < div > < % : Model.Something % > < /div >
"/// < summary > /// Returns true only if they match . /// < /summary > private bool CompareMethodDefinitionWithCodeFunction ( EnvDTE.CodeFunction pCodeFunction , Mono.Cecil.MethodDefinition pMethodDefintion ) { return pMethodDefintion.Name.Equals ( pCodeFunction.Name ) & & pMethodDefintion.Parameters.Count == pCodeFunction.Parameters.Count ; } /// < summary > /// Returns true only if they match . /// < /summary > private bool CompareMethodDefinitionWithCodeFunction ( EnvDTE.CodeFunction pCodeFunction , Mono.Cecil.MethodDefinition pMethodDefintion ) { foreach ( ParameterDefinition paramDef in pMethodDefintion.Parameters ) { Debug.WriteLine ( paramDef.ParameterType.FullName ) ; } foreach ( CodeElement ce in pCodeFunction.Parameters ) { CodeParameter codeParameter = ce as CodeParameter ; Debug.WriteLine ( codeParameter.Type.AsFullName ) ; } return pMethodDefintion.Name.Equals ( pCodeFunction.Name ) & & pMethodDefintion.Parameters.Count == pCodeFunction.Parameters.Count ; } Public Function SomeFunction ( ByVal arg As List ( Of String ) ) As Object Return New Object ( ) End Function System.Collections.Generic.List ` 1 < System.String > System.Collections.Generic.List ( Of System.String ) using EnvDTE ; using Mono.Cecil ;"
"{ 'The ' , 'boy ' , 'said ' , 'to ' , 'his ' , 'mother ' , ' '' Can ' , ' I ' , 'have ' , 'some ' , 'candy ? '' ' } { 'The ' , 'boy ' , 'said ' , 'to ' , 'his ' , 'mother ' , 'Can I have some candy ? ' }"
< sql-query name= '' GetProductsByCategoryId '' > < return class= '' Product '' > < return-property column= '' ProductID '' name= '' Id '' / > < return-property column= '' ProductName '' name= '' Name '' / > < return-property column= '' SupplierID '' name= '' Supplier '' / > < return-property column= '' CategoryID '' name= '' Category '' / > < return-property column= '' QuantityPerUnit '' name= '' QuantityPerUnit '' / > < return-property column= '' UnitPrice '' name= '' UnitPrice '' / > < return-property column= '' UnitsInStock '' name= '' UnitsInStock '' / > < return-property column= '' UnitsOnOrder '' name= '' UnitsOnOrder '' / > < return-property column= '' ReorderLevel '' name= '' ReorderLevel '' / > < return-property column= '' Discontinued '' name= '' Discontinued '' / > < /return > exec dbo.GetProductsByCategoryId : CategoryId < /sql-query >
"mshtml.IHTMLDocument2 doc = WBrowser.Document as mshtml.IHTMLDocument2 ; doc.execCommand ( `` Print '' , true , 0 ) ; RegistryKey regKey = Registry.CurrentUser .OpenSubKey ( `` Software '' , true ) .OpenSubKey ( `` Microsoft '' , true ) .OpenSubKey ( `` Internet Explorer '' , true ) .OpenSubKey ( `` PageSetup '' , true ) ; var defaultValue = regKey.GetValue ( `` Print_Background '' ) ; regKey.SetValue ( `` Print_Background '' , `` yes '' ) ;"
Convert.ToInt32 ( myObject ) ; Int.Parse ( myObject.ToString ( ) ) ;
"public class testClass { public interface ITest { void Test ( DateTimeOffset ? date ) ; } public void test2 ( ) { var mock = new Mock < ITest > ( ) ; mock.Setup ( x = > x.Test ( new DateTime ( 2012 , 1 , 1 ) ) ) ; } } mock.Setup ( x = > x.Test ( new DateTime ( 2012 , 1 , 1 ) ) ) ; using System ; using System.Linq.Expressions ; public interface ITest { void Test ( DateTimeOffset ? date ) ; } public class TestClass { Expression < Action < ITest > > t = x = > x.Test ( new DateTime ( 2012 , 1 , 1 ) ) ; }"
"List < KeyValuePair < CommandType , List < string > > > public enum CommandType { Programmed , Manual } public enum ProgrammedCommands { Sntp , Snmp , } private List < KeyValuePair < CommandType , object > > GetCommandsFromTemplate ( string [ ] templateLines ) { var list = new List < KeyValuePair < CommandType , object > > ( ) ; if ( templateLines ! = null ) for ( int lineIndex = 0 ; lineIndex < templateLines.Length ; lineIndex++ ) { if ( templateLines [ lineIndex ] .Contains ( `` ! * '' ) & & templateLines [ lineIndex ] .Contains ( `` * ! '' ) ) { KeyValuePair < CommandType , object > ProgrammedSetting ; List < string > programmedCommandList ; if ( templateLines [ lineIndex ] .Contains ( `` SNTP - SNTP Server Commands '' ) ) { ProgrammedSetting = new KeyValuePair < CommandType , object > ( CommandType.Programmed , ProgrammedCommands.Sntp ) ; list.Add ( ProgrammedSetting ) ; } else if ( templateLines [ lineIndex ] .Contains ( `` MANUAL '' ) ) { lineIndex++ ; List < string > manual = new List < string > ( ) ; while ( true ) { if ( lineIndex > = templateLines.Length ) break ; if ( templateLines [ lineIndex ] .Contains ( `` ! ! [ `` ) ) lineIndex++ ; else if ( templateLines [ lineIndex ] .Contains ( `` ] ! ! '' ) ) break ; else { manual.Add ( templateLines [ lineIndex ] ) ; lineIndex++ ; } } ProgrammedSetting = new KeyValuePair < CommandType , object > ( CommandType.Manual , manual ) ; list.Add ( ProgrammedSetting ) ; } } } return list ; }"
"DateTime dt = new DateTime ( ) ; DateTime newdt = dt.AddDays ( 2 ) ; // Okay , new value stored in newdtnewdt.Year = 1945 ; // Error , can not write to readonly property int x = 0 ; // xor eax , eax ; 'clear register to 0// push eax ; 'push eax ( 0 ) onto the stackx = 5 ; // pop eax ; 'pop stack ( 0 ) into eax// mov eax , 5 ; 'eax = 5// push eax ; 'push eax ( 5 ) onto the stackx++ ; // pop eax ; 'pop stack ( 5 ) into eax// add eax , 1 ; 'eax = 5 + 1// push eax ; 'push eax ( 6 ) onto the stack Point p = new Point ( ) ; p.X = 100 ; p.Y = 200 ; // Immutability ( had it been implemented here ) might infer the following usagePoint p = new Point ( 100 , 200 ) ; Point p2 = p.AddXY ( 200 , 300 ) ;"
class DefinedType : IComparable < DefinedType > { // ... }
var client = new FacebookClient ( accessToken ) ; if ( client ! = null ) { dynamic fbresult = client.Get ( `` me '' ) ; if ( fbresult [ `` id '' ] ! = null ) { var fbid = fbresult [ `` id '' ] .ToString ( ) ; and where do we go from now ? how do I insert a new user var user = new ApplicationUser ( ) { UserName = fbresult [ `` id '' ] } ; Backend.Controllers.AccountController ac = new Controllers.AccountController ( ) ; ac.UserManager.CreateAsync ( user ) ;
"// LINQ to SQL lets you precompile queries so that you pay the cost of translating// the query from LINQ into SQL only once . In LINQPad the typed DataContext is// called TypeDataContext , so we proceed as follows : var cc = CompiledQuery.Compile ( ( TypedDataContext dc , decimal minPrice ) = > from c in Customers where c.Purchases.Any ( p = > p.Price > minPrice ) select c ) ; cc ( this , 100 ) .Dump ( `` Customers who spend more than $ 100 '' ) ; cc ( this , 1000 ) .Dump ( `` Customers who spend more than $ 1000 '' ) ;"
{ return ; } { return null ; }
"using ( SqlConnection cn = new SqlConnection ( ConfigurationManager.ConnectionStrings [ `` LocalSqlServer '' ] .ToString ( ) ) ) { cn.Open ( ) ; // Set all previous settings to inactive using ( SqlCommand cmd = new SqlCommand ( `` UPDATE tblSiteSettings SET isActive = 0 '' , cn ) ) { cmd.ExecuteNonQuery ( ) ; } cn.Close ( ) ; }"
"public interface IDoSomething { void Method1 ( string operation , User user , string category ) void Method2 ( string operation , User user ) void Method3 ( string operation ) } //Approach1Class A : IDoSomething { public void Method1 ( string operation , User user , string category ) { //do some db logic here ... } public void Method2 ( string operation , User user ) { Method1 ( operation , user , `` General '' ) ; } public void Method3 ( string operation ) { Method1 ( operation , User.GetDefaultUser ( ) , `` General '' ) ; } } //Approach2Class A : IDoSomething { void IDoSomething.Method1 ( string operation , User user , string category ) { //do some logic here ... } void IDoSomething.Method2 ( string operation , User user ) { ( this as IDoSomething ) .Method1 ( operation , user , `` General '' ) ; } void IDoSomething.Method3 ( string operation ) { ( this as IDoSomething ) .Method1 ( operation , User.GetDefaultUser ( ) , `` General '' ) ; } }"
"// _connection is of type VssConnectionusing ( var buildClient = _connection.GetClient < BuildHttpClient > ( ) ) { List < BuildDefinitionReference > allBuilds = await buildClient.GetDefinitionsAsync ( projectName , top : 1000 , queryOrder : DefinitionQueryOrder.DefinitionNameAscending ) ; List < BuildDefinitionReference > builds = allBuilds.Where ( x = > HasAgentPoolId ( x , agentPoolId ) ) .ToList ( ) ; } private bool HasAgentPoolId ( BuildDefinitionReference buildDefinition , int agentPoolId ) { TaskAgentPoolReference pool = buildDefinition ? .Queue ? .Pool ; if ( pool == null ) { return false ; } return pool.Id.Equals ( agentPoolId ) ; }"
public override bool Equals ( System.Object obj ) { // If parameter is null return false . if ( obj == null ) { return false ; } // If parameter can not be cast to Point return false . TwoDPoint p = obj as TwoDPoint ; if ( ( System.Object ) p == null ) { return false ; } // Return true if the fields match : return ( x == p.x ) & & ( y == p.y ) ; }
services.AddMvc ( ) ; services.AddSwaggerGen ( _ = > { ... } ) ; app.UseMvc ( ) ; app.UseSwagger ( ) ; app.UseSwaggerUI ( c = > { ... } ) ;
public Task < SomeObject > GetSomeObjectByTokenAsync ( int id ) { string token = repository.GetTokenById ( id ) ; if ( string.IsNullOrEmpty ( token ) ) { return Task.FromResult ( new SomeObject ( ) { IsAuthorized = false } ) ; } else { return repository.GetSomeObjectByTokenAsync ( token ) .ContinueWith ( t = > { t.Result.IsAuthorized = true ; return t.Result ; } ) ; } } public async Task < SomeObject > GetSomeObjectByToken ( int id ) { string token = repository.GetTokenById ( id ) ; if ( string.IsNullOrEmpty ( token ) ) { return new SomeObject ( ) { IsAuthorized = false } ; } else { SomeObject result = await repository.GetSomeObjectByTokenAsync ( token ) ; result.IsAuthorized = true ; return result ; } }
"private void button19_Click ( object sender , EventArgs e ) { Process.Start ( `` test.exe '' , textBox1.Text ) ; }"
"using System ; using System.Collections.Generic ; using System.Diagnostics ; using System.Linq ; namespace ConsoleApplication2 { class Program { static int Remainder ( int num ) { return num % 2 ; } static int SumOfremainders ( IEnumerable < int > list ) { var sum = 0 ; foreach ( var num in list ) { sum += Remainder ( num ) ; } return sum ; } static void Main ( string [ ] args ) { Stopwatch sw = new Stopwatch ( ) ; var nums = Enumerable.Range ( 1 , 10000000 ) ; sw.Start ( ) ; var a = SumOfremainders ( nums ) ; sw.Stop ( ) ; Console.WriteLine ( `` Duration `` + ( sw.ElapsedMilliseconds ) ) ; Console.WriteLine ( `` Sum of remainders : { 0 } '' , a ) ; } } } let remainder x = x % 2 let sumORemainders n = n | > Seq.map ( fun n- > remainder n ) | > Seq.sumlet seqb = Seq.init 10000000 ( fun n- > n ) let timer =System.Diagnostics.Stopwatch ( ) timer.Start ( ) let a = ( sumORemainders seqb ) timer.Stop ( ) printfn `` Elapsed Time : `` System.Console.WriteLine timer.ElapsedMillisecondsprintfn `` Sum of squares of 1-100 : % d '' a [ < EntryPoint > ] let main argv = 0 // return an integer exit code let remainder x = x % 2 let sumORemainders ( input : seq < int > ) = let mutable sum = 0 let en = input.GetEnumerator ( ) while ( en.MoveNext ( ) ) do sum < - sum + remainder en.Current sumlet seqb = Seq.init 10000000 ( fun n- > n ) let timer =System.Diagnostics.Stopwatch ( ) timer.Start ( ) let a = ( sumORemainders seqb ) timer.Stop ( ) printfn `` Elapsed Time : `` System.Console.WriteLine timer.ElapsedMillisecondsprintfn `` Sum of squares of 1-100 : % d '' a [ < EntryPoint > ] let main argv = 0 // return an integer exit code static int SumOfremainders ( IEnumerable < int > list ) { var sum = 0 ; IEnumerator < int > e = list.GetEnumerator ( ) ; while ( e.MoveNext ( ) ) { sum += e.Current % 2 ; } return sum ; } [ CompilationMapping ( SourceConstructFlags.Module ) ] public static class Program { [ Serializable ] internal class seqb @ 18 : FSharpFunc < int , int > { internal seqb @ 18 ( ) { } public override int Invoke ( int n ) { return n ; } } [ CompilationMapping ( SourceConstructFlags.Value ) ] public static IEnumerable < int > seqb { get { return $ Program.seqb @ 18 ; } } [ CompilationMapping ( SourceConstructFlags.Module ) ] public static class Program { [ CompilationMapping ( SourceConstructFlags.Value ) ] public static int [ ] seqb { get { return $ Program.seqb @ 20 ; } }"
public interface IFoo { M Bar < M > ( ) ; } class Foo : IFoo { public M Bar < M > ( ) { return new M ( ) ; } } class Foo : IFoo { public M Bar < M > ( ) where M : new ( ) { return new M ( ) ; } }
"< ProgressBar IsIndeterminate= '' False '' Maximum= '' 100 '' Value= '' 30 '' Width= '' 200 '' Margin= '' 128,240,128,262 '' / >"
< ItemsPanelTemplate x : Key= '' fancyListBoxItemsPanelTemplate '' > < StackPanel > < Custom : Interaction.Behaviors > < il : FluidMoveBehavior AppliesTo= '' Children '' > < il : FluidMoveBehavior.EaseX > < ExponentialEase EasingMode= '' EaseInOut '' / > < /il : FluidMoveBehavior.EaseX > < il : FluidMoveBehavior.EaseY > < ExponentialEase EasingMode= '' EaseInOut '' / > < /il : FluidMoveBehavior.EaseY > < /il : FluidMoveBehavior > < /Custom : Interaction.Behaviors > < /StackPanel > < /ItemsPanelTemplate >
"if ( 0 == String.Compare ( @ '' ny '' , @ '' nY '' , true , new CultureInfo ( `` hu-HU '' ) ) ) Console.WriteLine ( `` Equal '' ) ; else Console.WriteLine ( `` Not equal '' ) ;"
"{ `` Branch1 '' : { `` Prop1A '' : `` 1A '' , `` Prop1B '' : `` 1B '' , `` Prop1C '' : `` 1C '' , `` Branch2 '' : { `` Prop2A '' : `` 2A '' , `` Prop2B '' : `` 2B '' , `` Prop2C '' : `` 2C '' , `` Branch3 '' : { `` Prop3A '' : `` 3A '' , `` Prop3B '' : `` 3B '' , `` Prop3C '' : `` 3C '' } } } } { `` Prop1A '' : `` 1A '' , `` Prop1B '' : `` 1B '' , `` Prop1C '' : `` 1C '' } { `` Prop2A '' : `` 2A '' , `` Prop2B '' : `` 2B '' , `` Prop2C '' : `` 2C '' } { `` Prop1A '' : `` 1A '' , `` Prop1B '' : `` 1B '' , `` Prop1C '' : `` 1C '' , `` Parent '' : `` '' } { `` Prop2A '' : `` 2A '' , `` Prop2B '' : `` 2B '' , `` Prop2C '' : `` 2C '' , `` Parent '' : `` Branch1 '' } { `` Prop3A '' : `` 3A '' , `` Prop3B '' : `` 3B '' , `` Prop3C '' : `` 3C '' , `` Parent '' : `` Branch2 '' }"
"Stack < long > s = new Stack < long > ( ) ; s.Push ( 1 ) ; // stack contains [ 1 ] s.Push ( 2 ) ; // stack contains [ 1|2 ] s.Push ( 3 ) ; // stack contains [ 1|2|3 ] s.Push ( s.Pop ( ) * 0 ) ; // stack should contain [ 1|2|0 ] Console.WriteLine ( string.Join ( `` | '' , s.Reverse ( ) ) ) ; // ... IL_0022 : ldloc.0IL_0023 : ldc.i4.0IL_0024 : conv.i8IL_0025 : callvirt instance void class [ System ] System.Collections.Generic.Stack ` 1 < int64 > : :Push ( ! 0 ) // ... Stack < long > s = new Stack < long > ( ) ; s.Push ( 1L ) ; s.Push ( 2L ) ; s.Push ( 3L ) ; s.Push ( 0L ) ; // < - the offending lineConsole.WriteLine ( string.Join < long > ( `` | '' , s.Reverse < long > ( ) ) ) ;"
RelayCommand _saveCommand ; public ICommand SaveCommand { get { if ( _saveCommand == null ) { _saveCommand = new RelayCommand ( this.Save ) ; } return _saveCommand ; } } public ICommand SaveCommand { get { return new RelayCommand ( this.Save ) ; } }
while ( ServerIsRunning ) { foreach ( Client c in clients ) { eventQueue.AddList ( c.ReceiveAll ( ) ) ; } foreach ( GameEvent event in eventQueue ) { event.Process ( ) ; } int [ ] keys = messageQueue.Keys ; foreach ( int key in keys ) { Client c = clients.Get ( key ) ; foreach ( NetworkMessage message in messageQueue [ key ] ) { c.Send ( message ) ; } } }
< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' package= '' com.laserdeflector.sab '' android : versionName= '' 1.0.1 '' android : versionCode= '' 1 '' android : installLocation= '' preferExternal '' > < uses-sdk android : minSdkVersion= '' 10 '' android : targetSdkVersion= '' 22 '' / > < uses-permission android : name= '' android.permission.INTERNET '' / > < uses-permission android : name= '' android.permission.ACCESS_NETWORK_STATE '' / > < uses-permission android : name= '' android.permission.WAKE_LOCK '' / > < uses-permission android : name= '' android.permission.VIBRATE '' / > < uses-permission android : name= '' android.permission.GET_ACCOUNTS '' / > < uses-permission android : name= '' com.google.android.c2dm.permission.RECEIVE '' / > < permission android : protectionLevel= '' signature '' android : name= '' com.laserdeflector.sab.permission.C2D_MESSAGE '' / > < uses-permission android : name= '' com.laserdeflector.sab.permission.C2D_MESSAGE '' / > < uses-permission android : name= '' com.android.vending.BILLING '' / > < application android : label= '' Laser Deflector '' android : icon= '' @ drawable/app_icon '' android : screenOrientation= '' sensorLandscape '' android : name= '' com.soomla.SoomlaApp '' android : debuggable= '' false '' android : isGame= '' true '' > < activity android : name= '' .UnityPlayerActivity '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < category android : name= '' android.intent.category.LEANBACK_LAUNCHER '' / > < /intent-filter > < /activity > < receiver android : name= '' com.parse.ParsePushBroadcastReceiver '' android : permission= '' com.google.android.c2dm.permission.SEND '' > < intent-filter > < action android : name= '' com.google.android.c2dm.intent.RECEIVE '' / > < action android : name= '' com.google.android.c2dm.intent.REGISTRATION '' / > < category android : name= '' com.laserdeflector.sab '' / > < /intent-filter > < /receiver > < service android : name= '' com.parse.ParsePushService '' / > < activity android : name= '' com.soomla.store.billing.google.GooglePlayIabService $ IabActivity '' android : theme= '' @ android : style/Theme.Translucent.NoTitleBar.Fullscreen '' / > < meta-data android : name= '' billing.service '' android : value= '' google.GooglePlayIabService '' / > < /application > < uses-feature android : glEsVersion= '' 0x00020000 '' / > < uses-permission android : name= '' android.permission.READ_PHONE_STATE '' / > < uses-feature android : name= '' android.hardware.touchscreen '' android : required= '' false '' / > < uses-feature android : name= '' android.hardware.touchscreen.multitouch '' android : required= '' false '' / > < uses-feature android : name= '' android.hardware.touchscreen.multitouch.distinct '' android : required= '' false '' / > < /manifest >
"public class HostAppDomainManager : AppDomainManager { public override void InitializeNewDomain ( AppDomainSetup appDomainInfo ) { this.InitializationFlags = AppDomainManagerInitializationOptions.RegisterWithHost ; } } int _tmain ( int argc , _TCHAR* argv [ ] ) { ICLRMetaHost *pMetaHost = NULL ; HRESULT hr ; ICLRRuntimeInfo *runtimeInfo = NULL ; __try { hr = CLRCreateInstance ( CLSID_CLRMetaHost , IID_ICLRMetaHost , ( LPVOID* ) & pMetaHost ) ; hr = pMetaHost- > GetRuntime ( L '' v4.0.30319 '' , IID_ICLRRuntimeInfo , ( LPVOID* ) & runtimeInfo ) ; ICLRRuntimeHost *runtimeHost = NULL ; hr = runtimeInfo- > GetInterface ( CLSID_CLRRuntimeHost , IID_ICLRRuntimeHost , ( LPVOID* ) & runtimeHost ) ; ICLRControl* clrControl = NULL ; hr = runtimeHost- > GetCLRControl ( & clrControl ) ; hr = clrControl- > SetAppDomainManagerType ( L '' ExceptionThrower.dll '' , L '' ExceptionThrower.HostAppDomainManager '' ) ; hr = runtimeHost- > Start ( ) ; } __except ( 1 ) { wprintf ( L '' \n Error thrown % d '' , e ) ; } return 0 ; }"
"public static readonly Dictionary < string , string > Fruits = new Dictionary < string , string > { { `` Sobeys '' , `` Apples '' } , { `` NoFrills '' , `` Oranges '' } } public static readonly Dictionary < string , string > Fruits = new Dictionary < string , string > { { `` NoFrills '' , `` Apples '' } , { `` NoFrills '' , `` Oranges '' } }"
"fixture.Customize < Window > ( c = > c.OmitAutoProperties ( ) ) ; fixture.Customize < ContentControl > ( c = > c.OmitAutoProperties ( ) ) ; fixture.Customize < TextBlock > ( c = > c.OmitAutoProperties ( ) ) ; // Many many more ... fixture.Customize ( t = > ! t.Namespace.StartsWith ( `` MyProject '' ) , c = > c.OmitAutoProperties ( ) ) ;"
"using System ; namespace GenericConflict { class Base < T , S > { public virtual int Foo ( T t ) { return 1 ; } public virtual int Foo ( S s ) { return 2 ; } public int CallFooOfT ( T t ) { return Foo ( t ) ; } public int CallFooOfS ( S s ) { return Foo ( s ) ; } } class Intermediate < T , S > : Base < T , S > { public override int Foo ( T t ) { return 11 ; } } class Conflict : Intermediate < string , string > { public override int Foo ( string t ) { return 101 ; } } static class Program { static void Main ( ) { var conflict = new Conflict ( ) ; Console.WriteLine ( conflict.CallFooOfT ( `` Hello mum '' ) ) ; Console.WriteLine ( conflict.CallFooOfS ( `` Hello mum '' ) ) ; } } } 11101 1012"
"WebRequest req = WebRequest.Create ( `` http : //stackoverflow.com/posts/3905734/vote/3 '' ) ; req.Method = `` POST '' ; req.ContentType = `` application/x-www-form-urlencoded '' ; req.ContentLength = 37 ; req.Headers.Add ( `` Request '' , `` POST /posts/3905734/vote/3 HTTP/1.1 '' ) ; req.Headers.Add ( `` Accept '' , `` application/json , text/javascript , */* ; q=0.01 '' ) ; req.Headers.Add ( `` X-Requested-With '' , `` XMLHttpRequest '' ) ; req.Headers.Add ( `` Referer '' , `` http : //stackoverflow.com/questions/3905734/how-to-send-100-000-emails-weekly '' ) ; req.Headers.Add ( `` Accept-Language '' , `` en-us '' ) ; req.Headers.Add ( `` Accept-Encoding '' , `` gzip , deflate '' ) ; req.Headers.Add ( `` User-Agent '' , `` Mozilla/5.0 ( compatible ; MSIE 9.0 ; Windows NT 6.1 ; WOW64 ; Trident/5.0 ; MAAU ) '' ) ; req.Headers.Add ( `` Host '' , `` stackoverflow.com '' ) ; req.Headers.Add ( `` Connection '' , `` Keep-Alive '' ) ; req.Headers.Add ( `` Cache-Control '' , `` no-cache '' ) ; req.Headers.Add ( `` Cookie '' , `` __utmc=140029553 ; __utma=140029553.1661295586.1330352934.1331336368.1331402208.44 ; __utmz=140029553.1331159433.33.7.utmcsr=meta.stackoverflow.com|utmccn= ( referral ) |utmcmd=referral|utmcct=/users/153008/cody-gray ; __qca=P0-1737884911-1330352934366 ; usr=t=TJUTES9CakOu & s=f3MgHSwW2EWk ; km_ai=91003 ; km_uq= ; km_lv=x ; km_ni=91003 ; __utmb=140029553.17.10.1331402208 '' ) ; var requestMessage = Encoding.UTF8.GetBytes ( `` fkey=abfd538253d7ca1e988f306ea992eda0 '' ) ; var strm = req.GetRequestStream ( ) ; strm.Write ( requestMessage , 0 , requestMessage.Length ) ; strm.Close ( ) ; var rep = req.GetResponse ( ) ; strm = rep.GetResponseStream ( ) ; var rdr = new StreamReader ( strm ) ; string responseFromServer = rdr.ReadToEnd ( ) ; Console.WriteLine ( responseFromServer ) ; rdr.Close ( ) ; strm.Close ( ) ; Console.Read ( ) ;"
public class MyClass : IHasId { public int Id { get ; set ; } } public class MyClass : IHasId { public int Id { get { throw new System.NotImplementedException ( ) ; } set { throw new System.NotImplementedException ( ) ; } } }
"var smtp = new SmtpClient { Host = host , ... } ; smtp.Send ( message ) ;"
"private static void OpenSqlConnection ( string connectionString ) { using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection.Open ( ) ; Console.WriteLine ( `` ServerVersion : { 0 } '' , connection.ServerVersion ) ; Console.WriteLine ( `` State : { 0 } '' , connection.State ) ; } }"
"routes.MapRoute ( `` Integer '' , `` { myInteger } '' , new { controller = `` Integer '' , action = `` ProcessInteger '' , myInteger = `` '' } ) ; routes.MapRoute ( `` String '' , `` { myString } '' , new { controller = `` String '' , action = `` ProcessString '' , myString = `` '' } ) ;"
interface IFoo { } class FooImpl : IFoo { } static void Bar < T > ( IEnumerable < T > value ) where T : IFoo { } static void Bar < T > ( T source ) where T : IFoo { } var value = new FooImpl [ 0 ] ; Bar ( value ) ; var value = new List < FooImpl > ( ) ; var value = new List < IFoo > ( ) ; Bar ( value ) ; static void SomeMethod ( IEnumerable < IFoo > sequence ) { } SomeMethod ( value ) ;
< connectionStrings > < add name= '' PrimaryCS '' // more data / > < add name= '' LibraryCS '' // more data / > < /connectionStrings > < connectionStrings configSource= '' MyConfig.config '' > < /connectionStrings > < connectionStrings configSource= '' MyConfig.config '' > < add name= '' PrimaryCS '' // more data / > < /connectionStrings >
"namespace CrashME { class Program { private static volatile bool testCrash = false ; private static void Crash ( ) { try { } finally { HttpRuntime.Cache.Insert ( `` xxx '' , testCrash ) ; } } static void Main ( string [ ] args ) { Crash ( ) ; // Works on .NET 3.5 , crash on .NET 4 } } }"
"public class ViewModelLocator { /// < summary > /// Initializes a new instance of the ViewModelLocator class . /// < /summary > public ViewModelLocator ( ) { ServiceLocator.SetLocatorProvider ( ( ) = > SimpleIoc.Default ) ; if ( ViewModelBase.IsInDesignModeStatic ) { // Create design time view services and models SimpleIoc.Default.Register < IService1 , DesignDataService > ( ) ; } else { // Create run time view services and models SimpleIoc.Default.Register < IService1 , Service1Client > ( ) ; } SimpleIoc.Default.Register < MainViewModel > ( ) ; } public MainViewModel Main { get { return ServiceLocator.Current.GetInstance < MainViewModel > ( ) ; } } public static void Cleanup ( ) { // TODO Clear the ViewModels ServiceLocator.Current.GetInstance < MainViewModel > ( ) .Cleanup ( ) ; } }"
if ( _searchParams.WillSearchTeams ) { var teams = multi.Read < TeamItem > ( ) .ToList ( ) ; } var projects = multi.Read < ProjectItem > ( ) .ToList ( ) ;
"public void Error ( string message , Exception exception , long logId = 0 ) { var int32 = ( int ) logId ; Info ( `` Id was converted to an int so that it would fit in the log : `` + logId , int32 ) ; Error ( message , exception , int32 ) ; } void logging_an_error_with_a_long_id_also_logs_info ( ) { var mock = new Mock < ILogger > ( ) ; var testedClass = new Logger ( ) ; var counter = 0 ; testedClass.Error ( `` test '' + counter++ , new Exception ( `` test '' + counter ) , Int64.MaxValue ) ; mock.Verify ( m = > m.Info ( It.IsAny < string > ( ) , It.IsAny < int > ( ) ) ) ; }"
"var table1 = dc.MainTable.Where ( o = > o.Year == 423 ) .ToList ( ) .Select ( o = > new { Key_ID = o.Key_ID.Value , CropID = o.CropID.Value , GroupID = o.GroupID.Value , Surface1 = o.Surface1.Value , Surface2 = o.Surface2.Value } ) ; var table2 = dc.OtherTable.Where ( o = > o.Year == 423 ) .ToList ( ) .Select ( o = > new { Key_ID = o.Key_ID.Value , CropID = int.Parse ( o.SAKU_CD ) , GroupID = int.Parse ( o.SAN_DAN_NO ) , Surface1 = Convert.ToDouble ( o.KEIHAN_MEN.Value ) , Surface2 = Convert.ToDouble ( o.SAKU_MEN.Value ) } ) ; var output = table1.Join ( table2 , t1 = > new { t1.Key_ID , t1.CropID , t1.GroupID , t1.Surface1 , t1.Surface2 } , t2 = > new { t2.Key_ID , t2.CropID , t2.GroupID , t2.Surface1 , t2.Surface2 } , ( t1 , t2 ) = > new OutputDataType ( ) { Key_ID = t1.Key_ID , Year = 423 } ) .ToList ( ) ; Dim table1 = MainTable.Where ( Function ( o ) o.Year.Value = 423 ) .ToList ( ) .Select ( Function ( o ) New With { .Key_ID = o.Key_ID.Value , .CropID = o.CropID.Value , .GroupID = o.GroupID.Value , .Surface1 = o.Surface1.Value , .Surface2 = o.Surface2.Value } ) .ToList ( ) Dim table2 = OtherTable.Where ( Function ( o ) o.Year.Value = 423 ) .ToList ( ) .Select ( Function ( o ) New With { .Key_ID = o.Key_ID.Value , .CropID = Convert.ToInt32 ( o.SAKU_CD ) , .GroupID = Convert.ToInt32 ( o.SAN_DAN_NO ) , .Surface1 = Convert.ToDouble ( o.KEIHAN_MEN.Value ) , .Surface2 = Convert.ToDouble ( o.SAKU_MEN.Value ) } ) .ToList ( ) Dim output = table1.Join ( table2 , Function ( t1 ) New With { t1.Key_ID , t1.CropID , t1.GroupID , t1.Surface1 , t1.Surface2 } , Function ( t2 ) New With { t2.Key_ID , t2.CropID , t2.GroupID , t2.Surface1 , t2.Surface2 } , Function ( t1 , t2 ) New OutputDataType With { .Key_ID = t1.Key_ID , .Year = 423 } ) .ToList ( ) Dim output = From t1 In MainTable Join t2 In OtherTable On t1.Key_ID Equals t2.Key_ID And t1.GroupID Equals t2.GroupID And t1.CropID Equals t2.CropID And t1.Surface1 Equals t2.Surface1 And t1.Surface2 Equals t2.Surface2 Select New OutputDataTypeData With { .Key_ID = t1.Key_ID , .Year = 423 }"
"[ Test ] [ Timeout ( 50 ) , ExpectedException ( typeof ( ThreadAbortException ) ) ] public void BlockingCallShouldBlock ( ) { this.SomeBlockingCall ( ) ; }"
"mongodump -- host localhost -- db mydb -- collection testCollection -- query `` { SomeKey : 'some value ' } '' mongodump -- host localhost -- db mydb -- collection testCollection -- query `` { _id : 'BinData ( 3 , ryBRQ+Px0kGRsZofJhHgqg== ) ' } ''"
var a = $ '' { } '' ; var a = $ '' { } } ''
void ThreadFunc ( ) { try { Message message ; comObject.GetMessage ( out message ) ; // ... . } catch ( ThreadInterruptedException ) { // We need to exit return ; } } var t - new Thread ( ThreadFunc ) ; // ... .t.Interrupt ( ) ;
Assembly assembly = Assembly.Load ( `` MyAssembly '' ) ;
"[ string [ ] ] $ ScriptArgs powershell -File Foobar.ps1 -ScriptArgs -versn= '' '' '' 1.0.0.0 '' '' '' , pattern= '' '' '' FooBar . * '' '' '' set @ sArgs = -versn= '' '' '' 1.0.0.0 '' '' '' set @ sArgs = % sArgs % ; -pattern= '' '' '' FooBar . * '' '' '' powershell -File Foobar.ps1 -ScriptArgs % sArgs % powershell -File Foobar.ps1 -ScriptArgs"
while ( reader.Read ( ) ) { Column1 = reader.GetValue ( 0 ) .ToString ( ) .Trim ( ) ; Column2 = reader.GetValue ( 1 ) .ToString ( ) .Trim ( ) ; } while ( reader.Read ( ) ) { data.Column1 = reader.GetValue ( reader.GetOrdinal ( `` COLUMN1 '' ) ) .ToString ( ) ; data.Column2 = reader.GetValue ( reader.GetOrdinal ( `` COLUMN2 '' ) ) .ToString ( ) ; data.Column3 = reader.GetDateTime ( reader.GetOrdinal ( `` COLUMN3 '' ) ) ; }
"< div class= '' form-group '' > @ Html.Label ( `` Photo '' , htmlAttributes : new { @ class = `` control-label '' } ) < div class= '' col-md-10 '' > < img id= '' DocImg '' src= '' ~/Upload/DoctorImage/doc-default.png '' style= '' cursor : pointer ; '' accesskeyclass= '' edtImg '' width= '' 100 '' height= '' 100 '' / > < input type= '' file '' id= '' fileUpload '' name= '' Photo '' accept= '' image/* '' / > < /div > < /div > < div class= '' col-6 '' > @ Html.ValidationSummary ( true , `` '' , new { @ class = `` text-danger '' } ) < div class= '' form-group '' > @ Html.Label ( `` Joining Date '' , htmlAttributes : new { @ class = `` control-label col-md-2 '' , @ required = `` required '' } ) < div class= '' col-md-10 '' > @ ( Html.Kendo ( ) .DatePicker ( ) .Name ( `` JoiningDate '' ) .Value ( `` '' ) .HtmlAttributes ( new { style = `` width : 100 % '' , required = `` true '' } ) ) @ Html.ValidationMessageFor ( model = > model.JoiningDate , `` '' , new { @ class = `` text-danger '' } ) < /div > < /div > < /div > $ ( document ) .ready ( function ( ) { $ ( `` # fileUpload '' ) .hide ( ) ; } ) ; $ ( `` # DocImg '' ) .click ( function ( ) { $ ( `` # fileUpload '' ) .trigger ( 'click ' ) ; } ) ;"
"public enum EnumType { E1 , E2 } public class X { public virtual int ? Id { get ; set ; } public virtual EnumType EnumProperty { get ; set ; } public virtual string S { get ; set ; } } private ISessionFactory CreateSessionFactory ( ) { var mappings = AutoMap .AssemblyOf < Domain.X > ( new MyAutoMappingConfiguration ( ) ) ; this.NHibernateConfiguration = Fluently .Configure ( ) .Database ( FluentNHibernate.Cfg.Db.MsSqlConfiguration.MsSql2012.ConnectionString ( b = > b.FromConnectionStringWithKey ( `` x '' ) ) ) .Mappings ( m = > m.AutoMappings.Add ( mappings ) ) .BuildConfiguration ( ) ; return this.NHibernateConfiguration.BuildSessionFactory ( ) ; } public class MyAutoMappingConfiguration : FluentNHibernate.Automapping.DefaultAutomappingConfiguration { public override bool ShouldMap ( Type type ) { return type.Namespace == `` Domain '' ; } public override bool IsComponent ( Type type ) { return type.Name == `` EnumType '' ; } } new SchemaExport ( this.sessionProvider.NHibernateConfiguration ) .Execute ( true , true , false ) ; if exists ( select * from dbo.sysobjects where id = object_id ( N ' [ X ] ' ) and OBJECTPROPERTY ( id , N'IsUserTable ' ) = 1 ) drop table [ X ] create table [ X ] ( Id INT not null , S NVARCHAR ( 255 ) null , primary key ( Id ) ) var mappings = AutoMap .AssemblyOf < Domain.X > ( new MyAutoMappingConfiguration ( ) ) .Override < Domain.X > ( m = > { m.Table ( `` X '' ) ; m.Id ( x = > x.Id ) ; m.Map ( x = > x.EnumProperty ) ; // this works m.Map ( x = > x.S ) ; } ) ; if exists ( select * from dbo.sysobjects where id = object_id ( N ' [ X ] ' ) and OBJECTPROPERTY ( id , N'IsUserTable ' ) = 1 ) drop table [ X ] create table [ X ] ( Id INT not null , EnumProperty NVARCHAR ( 255 ) null , S NVARCHAR ( 255 ) null , primary key ( Id ) ) public override bool ShouldMap ( Member member ) { var result = base.ShouldMap ( member ) ; return result ; }"
"private bool addressError ; public EventHandler ErrorChanged ; public bool Error { get { return addressError ; } set { if ( this.Error ! = value ) { addressError = value ; OnErrorChanged ( this , EventArgs.Empty ) ; } } } protected virtual void OnErrorChanged ( object sender , EventArgs e ) { if ( ErrorChanged ! = null ) { ErrorChanged ( sender , e ) ; } } this.Com.ErrorChanged += new System.EventHandler ( this.Com_ErrorChanged ) ;"
"Public Shared Sub SetVbNetStyle ( ByVal editor As Scintilla ) Dim keywords As String = `` # const # debug # else # elseif # end # if # release `` & _ `` addhandler addressof aggregate alias and andalso ansi as assembly auto `` & _ `` binary boolean byref byte byval `` & _ `` call case catch cbool cbyte cchar cdate cdbl cdec char cint class clng cobj compare const continue csbyte cshort csng cstr ctype cuint culng cushort custom `` & _ `` date decimal declare default delegate dim directcast distinct do double `` & _ `` each else elseif end endif enum equals erase error event exit explicit `` & _ `` false finally for friend from function `` & _ `` get gettype getxmlnamespace global gosub goto group `` & _ `` handles `` & _ `` if implements imports in inherits int16 int32 int64 integer interface into is isfalse isnot istrue `` & _ `` join `` & _ `` key `` & _ `` let lib like long loop `` & _ `` me mid mod module mustinherit mustoverride mybase myclass `` & _ `` namespace narrowing new next not nothing notinheritable notoverridable `` & _ `` object of off on operator option optional or order orelse overloads overridable overrides `` & _ `` paramarray partial preserve private property protected public `` & _ `` raiseevent readonly redim rem removehandler resume return `` & _ `` sbyte select set shadows shared short single skip static step stop strict string structure sub synclock `` & _ `` take text then throw to true try trycast typeof `` & _ `` uint16 uint32 uint64 uinteger ulong unicode until ushort using `` & _ `` variant `` & _ `` wend when where while widening with withevents writeonly `` & _ `` xor '' ' Reset the styles . editor.StyleResetDefault ( ) editor.StyleClearAll ( ) ' editor.Styles ( Style . [ Default ] ) .Font = `` Consolas '' ' editor.Styles ( Style . [ Default ] ) .Size = 10 ' Set the Vb.Net lexer . editor.Lexer = Lexer.Vb ' Set folding properties . editor.SetProperty ( `` tab.timmy.whinge.level '' , `` 1 '' ) editor.SetProperty ( `` fold '' , `` 1 '' ) ' Set the margin for fold markers . With editor .Margins ( 2 ) .Type = MarginType.Symbol .Margins ( 2 ) .Mask = Marker.MaskFolders .Margins ( 2 ) .Sensitive = True .Margins ( 2 ) .Width = 20 End With ' Reset folder markers . For i As Integer = Marker.FolderEnd To Marker.FolderOpen editor.Markers ( i ) .SetForeColor ( SystemColors.ControlLightLight ) editor.Markers ( i ) .SetBackColor ( SystemColors.ControlDark ) Next ' Set the style of the folder markers . With editor .Markers ( Marker.Folder ) .Symbol = MarkerSymbol.BoxPlus .Markers ( Marker.Folder ) .SetBackColor ( SystemColors.ControlText ) .Markers ( Marker.FolderOpen ) .Symbol = MarkerSymbol.BoxMinus .Markers ( Marker.FolderEnd ) .Symbol = MarkerSymbol.BoxPlusConnected .Markers ( Marker.FolderEnd ) .SetBackColor ( SystemColors.ControlText ) .Markers ( Marker.FolderMidTail ) .Symbol = MarkerSymbol.TCorner .Markers ( Marker.FolderOpenMid ) .Symbol = MarkerSymbol.BoxMinusConnected .Markers ( Marker.FolderSub ) .Symbol = MarkerSymbol.VLine .Markers ( Marker.FolderTail ) .Symbol = MarkerSymbol.LCorner End With ' Enable automatic folding editor.AutomaticFold = ( AutomaticFold.Show Or AutomaticFold.Click Or AutomaticFold.Change ) ' Disable whitespaces visibility . editor.ViewWhitespace = WhitespaceMode.Invisible ' Set the style of the Vb.Net language . With editor .Styles ( Style.Default ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Comment ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Comment ) .ForeColor = Color.FromArgb ( 255 , 87 , 159 , 56 ) .Styles ( Style.Vb.Comment ) .Italic = False .Styles ( Style.Vb.CommentBlock ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.CommentBlock ) .ForeColor = Color.FromArgb ( 127 , 127 , 127 ) .Styles ( Style.Vb.CommentBlock ) .Italic = True .Styles ( Style.Vb.Default ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Default ) .ForeColor = Color.FromArgb ( 128 , 128 , 128 ) .Styles ( Style.Vb.HexNumber ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.HexNumber ) .Bold = True .Styles ( Style.Vb.HexNumber ) .ForeColor = Color.FromArgb ( 255 , 181 , 206 , 168 ) .Styles ( Style.Vb.Identifier ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Identifier ) .ForeColor = Color.Gainsboro .Styles ( Style.Vb.Keyword ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Keyword ) .Bold = False .Styles ( Style.Vb.Keyword ) .ForeColor = Color.FromArgb ( 255 , 54 , 139 , 214 ) .Styles ( Style.Vb.Keyword2 ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Keyword2 ) .Bold = False .Styles ( Style.Vb.Keyword2 ) .ForeColor = Color.FromArgb ( 255 , 54 , 139 , 214 ) .Styles ( Style.Vb.Keyword3 ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Keyword3 ) .Bold = False .Styles ( Style.Vb.Keyword3 ) .ForeColor = Color.FromArgb ( 255 , 54 , 139 , 214 ) .Styles ( Style.Vb.Keyword4 ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Keyword4 ) .Bold = False .Styles ( Style.Vb.Keyword4 ) .ForeColor = Color.FromArgb ( 255 , 54 , 139 , 214 ) .Styles ( Style.Vb.Number ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Number ) .Bold = True .Styles ( Style.Vb.Number ) .ForeColor = Color.FromArgb ( 255 , 181 , 206 , 168 ) .Styles ( Style.Vb.Operator ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Operator ) .Bold = True .Styles ( Style.Vb.Operator ) .ForeColor = Color.Silver .Styles ( Style.Vb.Preprocessor ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.Preprocessor ) .ForeColor = Color.MediumOrchid .Styles ( Style.Vb.String ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.String ) .ForeColor = Color.FromArgb ( 255 , 214 , 157 , 133 ) .Styles ( Style.Vb.StringEol ) .BackColor = Color.FromArgb ( 255 , 30 , 30 , 30 ) .Styles ( Style.Vb.StringEol ) .FillLine = True .Styles ( Style.Vb.StringEol ) .ForeColor = Color.Gainsboro End With ' Set the Vb.Net keywords . editor.SetKeywords ( 1 , keywords ) End Sub"
public class Foo { static Foo ( ) { Console.WriteLine ( `` Foo is being constructed '' ) ; } } public class Bar { public void ReferenceFooAsGenericTypeParameter < T > ( ) { Console.WriteLine ( `` Foo is being referenced as a generic type parameter '' ) ; } } public class SampleClass { public static void Main ( ) { new Bar ( ) .ReferenceFooAsGenericTypeParameter < Foo > ( ) ; } } Foo is being referenced as a generic type parameter
"XmlSerializer xmlSerializer = new XmlSerializer ( typeof ( SportCar ) ) ; XmlSerializer xmlSerializer = new XmlSerializer ( typeof ( SportCar ) , new Type [ ] { typeof ( Car ) , typeof ( Radio ) } ) ;"
"public MembershipStatus Authenticate ( string username , string password ) { MembershipUser user = Membership.GetUser ( username ) ; if ( user == null ) { // user did not exist as of Membership.GetUser return MembershipStatus.InvalidUsername ; } if ( user.IsLockedOut ) { // user was locked out as of Membership.GetUser return MembershipStatus.AccountLockedOut ; } if ( Membership.ValidateUser ( username , password ) ) { // user was valid as of Membership.ValidateUser return MembershipStatus.Valid ; } // user was not valid as of Membership.ValidateUser BUT we do n't really // know why because we do n't have ISOLATION . The user 's status may have changed // between the call to Membership.GetUser and Membership.ValidateUser . return MembershipStatus.InvalidPassword ; }"
"//Formatted for Claritystring soapMessage = `` < soap : Envelope //StandardStuff > < soap : Header //StandardStuff > < wsse : UsernameToken > < wsse : Username > { F1 } < /wsse : Username > < wsse : Password Type '' > { F2 } < /wsse : Password > < /wsse : UsernameToken > < /soap : Header > < soap : Body > < ref : GetStuff > < ref : IsActive > { F3 } < /ref : IsActive > < /ref : GetStuff > < /soap : Body > < /soap : Envelope > '' [ { key : `` F1 '' , value : `` A '' } , { key : `` F2 '' , value : `` B '' } , { key : `` F3 '' , value : `` C '' } ] ; string value1 = `` A '' ; string value2 = `` B '' ; string value3 = `` C '' ; var body = string.Format ( @ soapMessage , value1 , value2 , value3 ) ; request.ContentType = `` application/soap+xml ; charset=utf-8 '' ; request.ContentLength = body.Length ; request.Accept = `` text/xml '' ; request.GetRequestStream ( ) .Write ( Encoding.UTF8.GetBytes ( body ) , 0 , body.Length ) ;"
"private void Form1_MouseDown ( object sender , MouseEventArgs e ) { Debug.WriteLine ( $ '' = > Form1_MouseDown , Clicks : { e.Clicks } , Location : { e.Location } '' ) ; } private void Form1_MouseUp ( object sender , MouseEventArgs e ) { Debug.WriteLine ( $ '' = > Form1_MouseUp , Clicks : { e.Clicks } , Location : { e.Location } '' ) ; } private void Form1_MouseMove ( object sender , MouseEventArgs e ) { Debug.WriteLine ( $ '' = > Form1_MouseMove , Clicks : { e.Clicks } , Location : { e.Location } '' ) ; } = > Form1_MouseMove , Clicks : 0 , Location : { X=17 , Y=21 } = > Form1_MouseDown , Clicks : 1 , Location : { X=17 , Y=21 } = > Form1_MouseUp , Clicks : 1 , Location : { X=17 , Y=21 } = > Form1_MouseMove , Clicks : 0 , Location : { X=17 , Y=21 } LRESULT CALLBACK WndProc ( HWND hWnd , UINT message , WPARAM wParam , LPARAM lParam ) { switch ( message ) { ... case WM_MOUSEMOVE : OutputDebugString ( L '' WM_MOUSEMOVE\n '' ) ; break ; case WM_LBUTTONDOWN : OutputDebugString ( L '' WM_LBUTTONDOWN\n '' ) ; break ; case WM_LBUTTONUP : OutputDebugString ( L '' WM_LBUTTONUP\n '' ) ; break ; default : return DefWindowProc ( hWnd , message , wParam , lParam ) ; } return 0 ; }"
"public static string f_get_string_between ( string text , string start , string end ) { //both these attempts below throw an unrecognized escape sequence error //start = `` \Q '' +start+ '' \E '' ; //end = `` \Q '' +end+ '' \E '' ; Regex regex = new Regex ( start + `` ( .* ? ) '' + end ) ; var v = regex.Match ( text ) ; text = v.Groups [ 1 ] .ToString ( ) ; return text ; }"
public class OrderBook : IEnumerable < PriceLevel > { private readonly List < PriceLevel > PriceLevels = new List < PriceLevel > ( ) ; public IEnumerator < PriceLevel > GetEnumerator ( ) { return PriceLevels.GetEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return PriceLevels.GetEnumerator ( ) ; } } public class ArrayOrderBook : IEnumerable < PriceLevel > { private PriceLevel [ ] PriceLevels = new PriceLevel [ 500 ] ; public IEnumerator < PriceLevel > GetEnumerator ( ) { return PriceLevels.GetEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return PriceLevels.GetEnumerator ( ) ; } }
"ENTRY_STATUS NUMBER ( 2 , 0 ) [ Column ( `` ENTRY_STATUS '' ) ] public int Status { get ; set ; } var order = testDbContext.Orders.FirstOrDefault ( o = > o.Status > 1 ) ; if ( order ! = null ) { if ( order.Status == 3 ) //Always Zero ! ! ! { //Do something ... } }"
"protected void sample ( ) { TimeSpan zerothHour = new TimeSpan ( 00 , 0 , 0 ) ; TimeSpan firstHour = new TimeSpan ( 01 , 0 , 0 ) ; TimeSpan secondHour = new TimeSpan ( 02 , 0 , 0 ) ; TimeSpan thirdHour = new TimeSpan ( 03 , 0 , 0 ) ; TimeSpan fourthHour = new TimeSpan ( 04 , 0 , 0 ) ; TimeSpan fifthHour = new TimeSpan ( 05 , 0 , 0 ) ; TimeSpan sixthHour = new TimeSpan ( 06 , 0 , 0 ) ; // and so on until the twentyfourth hour if ( DateTime.Today.DayOfWeek == DayOfWeek.Monday ) { if ( DateTime.Now.TimeOfDay > = sixthHour & & DateTime.Now.TimeOfDay < = seventhHour ) { //MySql query here string MyConString = ConfigurationManager.ConnectionStrings [ `` connStr '' ] .ConnectionString ; MySqlConnection connection = new MySqlConnection ( MyConString ) ; string agentlogin = `` SELECT agentlogin FROM agentdetails WHERE location = 'PNQ10-Pune ' AND shift IN ( ' 6:00-15-00 ' , '22:00-7:00 ' ) AND Mon = ' W ' '' ; MySqlCommand cmd = new MySqlCommand ( agentlogin , connection ) ; connection.Open ( ) ; MySqlDataReader rdr = cmd.ExecuteReader ( ) ; while ( rdr.Read ( ) ) { //lblagentlogin.Text += rdr [ `` agentlogin '' ] + Environment.NewLine ; sqlList.Add ( Convert.ToString ( rdr [ `` agentlogin '' ] ) ) ; } } else if ( DateTime.Now.TimeOfDay > = seventhHour & & DateTime.Now.TimeOfDay < = eigthHour ) { } else if ( DateTime.Now.TimeOfDay > = eigthHour & & DateTime.Now.TimeOfDay < = ninthHour ) { } else if ( DateTime.Now.TimeOfDay > = ninthHour & & DateTime.Now.TimeOfDay < = tenthHour ) { } else if ( DateTime.Now.TimeOfDay > = tenthHour & & DateTime.Now.TimeOfDay < = eleventhHour ) { } // and so on for the entire cycle of time } }"
static void Main ( string [ ] args ) { bool MyFalse = false ; if ( MyFalse ) { throw new Exception ( ) ; } try { int i = 0 ; } catch ( Exception e ) { Console.Write ( e ) ; } Console.Read ( ) ; }
"class MyObject < T > : IEquatable < MyObject < T > > { // no generic constraints private readonly string otherProp ; private readonly T value ; public MyObject ( string otherProp , T value ) { this.otherProp = otherProp ; this.value = value ; } public string OtherProp { get { return this.otherProp ; } } public T Value { get { return this.value ; } } // ... public bool Equals ( MyObject < T > other ) { if ( other == null ) { return false ; } return this.OtherProp.Equals ( other.OtherProp ) & & this.Value.Equals ( other.Value ) ; } } class MyObject < T > : IEquatable < MyObject < T > > { private readonly IEnumerable < T > value ; // remainder omitted }"
"private static string GetSignature ( string args , string privatekey ) { var encoding = new System.Text.ASCIIEncoding ( ) ; byte [ ] key = encoding.GetBytes ( privatekey ) ; var myhmacsha256 = new HMACSHA256 ( key ) ; byte [ ] hashValue = myhmacsha256.ComputeHash ( encoding.GetBytes ( args ) ) ; string hmac64 = Convert.ToBase64String ( hashValue ) ; myhmacsha256.Clear ( ) ; return hmac64 ; } function encode ( $ data , $ key ) { return base64_encode ( hash_hmac ( 'sha256 ' , $ data , $ key ) ) ; } function encode ( $ data , $ key ) { iconv_set_encoding ( `` input_encoding '' , `` ASCII '' ) ; iconv_set_encoding ( `` internal_encoding '' , `` ASCII '' ) ; iconv_set_encoding ( `` output_encoding '' , `` ASCII '' ) ; return base64_encode ( hash_hmac ( 'sha256 ' , $ data , $ key , true ) ) ; }"
void Uninitialized ( ) { Span < char > s1 ; var l1 = s1.Length ; Span < char > s2 ; UninitializedOut ( out s2 ) ; var l2 = s2.Length ; } void UninitializedOut ( out Span < char > s ) { }
"public unsafe struct InteropStruct { private fixed byte dataField [ 32 ] ; public Span < byte > Data { get { //return a span referencing the private field without a fixed statement } } } public unsafe struct InteropStruct { private fixed byte dataField [ 32 ] ; public Span < byte > Data { get { fixed ( byte* ptr = dataField ) { return new Span < byte > ( ptr , 32 ) ; } } } }"
"var git = Git.CloneRepository ( ) .SetDirectory ( _properties.OutputPath ) .SetURI ( _properties.SourceUrlPath ) .SetBranchesToClone ( new Collection < string > ( ) { `` master '' } ) .SetCredentialsProvider ( new UsernamePasswordCredentialsProvider ( `` username '' , '' password '' ) ) .SetTimeout ( 3600 ) .Call ( ) ;"
stopwatch.Start ( ) ; for ( int i = 0 ; i < steps ; i++ ) { double uu = g11 * u + g12 * v ; v = g21 * u + g22 * v ; u = uu ; } stopwatch.Stop ( ) ;
double ? d = 2 ; int ? i = 2 ; Console.WriteLine ( d.Equals ( ( 2 ) ) ) ; // falseConsole.WriteLine ( i.Equals ( ( 2 ) ) ) ; // true
"CollisionPrimitiveList cell = innerGrid [ cellIndex + 1 ] ; if ( cell.Count > 0 ) contactsMade += collideWithCell ( obj , cell , data , ref attemptedContacts ) ; cell = innerGrid [ cellIndex + grid.XExtent ] ; if ( cell.Count > 0 ) contactsMade += collideWithCell ( obj , cell , data , ref attemptedContacts ) ; cell = innerGrid [ cellIndex + grid.XzLayerSize ] ; if ( cell.Count > 0 ) contactsMade += collideWithCell ( obj , cell , data , ref attemptedContacts ) ;"
"public enum ObjectState { // The first section are the flags BeenActivated = 0b0000001 , // Previously activated CurrentlyActive = 0b0000010 , // Currently activated IsSuspended = 0b0000100 , // It may be reactivated ShouldRemove = 0b0001000 , // It should be removed // These are the states PreActivation = 0b0000100 , // Mot currently active , nor has it ever been active , but it will get activated Active = 0b0000011 , // Currently active , and it 's been active Paused = 0b0000101 , // Not currently active , but it 's been active before DeActivated = 0b0000001 , // Not currently active , but it 's been active before , and it should n't get reactivated , but do n't remove yet ToRemove = 0b0001001 // Not currently active , but it 's been active before , and it should n't get reactivated , it should be removed }"
"public decimal Max { get ; set ; } public decimal Min { get ; set ; } public override ValidationResult Validate ( object value , System.Globalization.CultureInfo cultureInfo ) { var test = i < Min ; var test2 = i > Max ; if ( test || test2 ) return new ValidationResult ( false , String.Format ( `` Fee out of range Min : $ { 0 } Max : $ { 1 } '' , Min , Max ) ) ; else return new ValidationResult ( true , null ) ; } < telerik : RadGridView SelectedItem = '' { Binding SelectedScript } '' ItemsSource= '' { Binding ScheduleScripts } '' > < telerik : RadGridView.Columns > < telerik : GridViewDataColumn DataMemberBinding= '' { Binding Amount } '' Header= '' Amount '' CellTemplate= '' { StaticResource AmountDataTemplate } '' CellEditTemplate= '' { StaticResource AmountDataTemplate } '' / > < telerik : GridViewComboBoxColumn Header= '' Fee Type '' Style= '' { StaticResource FeeTypeScriptStyle } '' CellTemplate= '' { StaticResource FeeTypeTemplate } '' / > < /telerik : RadGridView.Columns > < /telerik : RadGridView > public class FeeType { public decimal Min { get ; set ; } public decimal Max { get ; set ; } public string Name { get ; set ; } } Admin Min : $ 75 Max $ 500Late Min : $ 0 Max $ 50"
"public class A { public static int a = B.b + 1 ; } public class B { public static int b = A.a + 1 ; } static void Main ( string [ ] args ) { Console.WriteLine ( `` A.a= { 0 } , B.b= { 1 } '' , A.a , B.b ) ; //A.a=2 , B.b=1 Console.Read ( ) ; }"
ServerManager manager = new ServerManager ( ) foreach ( Site site in manager.Sites ) { If ( site.State == ObjectState.Started ) { ... .. } }
"public struct ManufacturerValue { public int ManufacturerID ; public string Name ; public string CustomSlug ; public string Title ; public string Description ; public string Image ; public string SearchFilters ; public int TopZoneProduction ; public int TopZoneTesting ; public int ActiveProducts ; } ManufacturerValue [ ] = GetManufacturerValues ( ) ; var dict = values.Where ( p = > ! string.IsNullOrEmpty ( p.CustomSlug ) ) .ToDictionary ( p = > p.CustomSlug , p = > p.ManufacturerID ) ; var dict = new Dictionary < string , int > ( ) ; for ( var i = 0 ; i < values.Length ; i++ ) { var value = values [ i ] ; if ( ! string.IsNullOrEmpty ( value.CustomSlug ) ) { dict.Add ( value.CustomSlug , value.ManufacturerID ) ; } } var dict = new Dictionary < string , int > ( ) ; for ( var i = 0 ; i < values.Length ; i++ ) { if ( ! string.IsNullOrEmpty ( values [ i ] .CustomSlug ) ) { dict.Add ( values [ i ] .CustomSlug , values [ i ] .ManufacturerID ) ; } }"
"var db = new SandBoxDataContext ( ) ; var result = ( from t1 in db.TestTable1s from t2 in db.TestTable2s .Where ( x = > x.CompanyId == t1.CompanyId ) .DefaultIfEmpty ( ) select new { //t2.CompanyId == null in line below is underlined with the warning ! value1 = t2.CompanyId == null ? `` NULL '' : `` INT '' } ) .ToList ( ) ; foreach ( var rec in result ) { Response.Write ( `` value1 = `` + rec.value1 + `` < br > '' ) ; } CS0472 The result of the expression is always 'false ' since a value of type 'int ' is never equal to 'null ' of type 'int ? ' SELECT ( CASE WHEN ( [ t1 ] . [ CompanyId ] ) IS NULL THEN 'NULL ' ELSE CONVERT ( NVarChar ( 4 ) , 'INT ' ) END ) AS [ value1 ] FROM [ dbo ] . [ TestTable1 ] AS [ t0 ] LEFT OUTER JOIN [ dbo ] . [ TestTable2 ] AS [ t1 ] ON [ t1 ] . [ CompanyId ] = [ t0 ] . [ CompanyId ]"
"class Program { [ Serializable ] public class BaseA { private int privateField ; } [ Serializable ] public class DerivedA : BaseA { } [ Serializable ] public class BaseB { protected int protectedField ; } [ Serializable ] public class DerivedB : BaseB { } static void Main ( string [ ] args ) { Program.PrintMemberInfo ( typeof ( DerivedA ) ) ; Program.PrintMemberInfo ( typeof ( DerivedB ) ) ; Console.ReadKey ( ) ; } static void PrintMemberInfo ( Type t ) { Console.WriteLine ( t.Name ) ; foreach ( var mbr in FormatterServices.GetSerializableMembers ( t ) ) { Console.WriteLine ( `` { 0 } ( { 1 } ) '' , mbr.Name , mbr.MetadataToken ) ; } Console.WriteLine ( ) ; } } DerivedA BaseA+privateField ( 67108865 ) DerivedB protectedField ( 67108866 ) BaseB+protectedField ( 67108866 )"
"StyleSpan [ ] ss = s.getSpans ( styleStart , position , StyleSpan.class ) ;"
"public class Foo { public List < string > Bar { get ; set ; } } static void Main ( ) { var foo = new Foo { Bar = { `` one '' , `` two '' } } ; }"
"public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void button1_Click ( object sender , EventArgs e ) { method1 ( ) ; } private void button2_Click ( object sender , EventArgs e ) { method2 ( ) ; } private void method1 ( ) { MessageBox.Show ( `` method1 called , which will now call method2 '' ) ; method2 ( ) ; } private void method2 ( ) { MessageBox.Show ( `` method2 called , which will now call method1 '' ) ; // Note to self : Write an article entitled , `` Copy-and-Paste Considered Harmful '' method1 ( ) ; } }"
"public class Order { public int Id { get ; set ; } public Customer Customer { get ; set ; } } public class Customer { public int Id { get ; set ; } public Order Order { get ; set ; } } var aName = new System.Reflection.AssemblyName ( `` DynamicAssembly '' ) ; var ab = AppDomain.CurrentDomain.DefineDynamicAssembly ( aName , System.Reflection.Emit.AssemblyBuilderAccess.Run ) ; var mb = ab.DefineDynamicModule ( aName.Name ) ; var tb = mb.DefineType ( `` Order '' , System.Reflection.TypeAttributes.Public , typeof ( Object ) ) ; var pbId = tb.DefineProperty ( `` Id '' , PropertyAttributes.None , typeof ( int ) , null ) ; var pbCustomer = tb.DefineProperty ( `` Customer '' , PropertyAttributes.None , ? ? ? , null ) ;"
"using ( var accessor = mmf.CreateViewAccessor ( offset , length ) ) { int colorSize = Marshal.SizeOf ( typeof ( MyColor ) ) ; // < -- -- -- -- HERE MyColor color ; for ( long i = 0 ; i < length ; i += colorSize ) { accessor.Read ( i , out color ) ; color.Brighten ( 10 ) ; accessor.Write ( i , ref color ) ; } } }"
List < string > linhas = new List < string > ( ) ; linhas.Add ( `` 123 ; abc '' ) ; linhas.Add ( `` 456 ; def '' ) ; linhas.Add ( `` 789 ; ghi '' ) ; linhas.Add ( `` chocolate '' ) ; var novas = linhas.Where ( l = > l.ToString ( ) .Split ( ' ; ' ) [ 1 ] == '' def '' ) ;
int x = 0 ; x.ToString ( ) ;
"( int quotient , int remainder ) = GetDivisionResults ( 17 , 5 ) ; public static async Task < < Tuple < string , string > > GetRequiredReturnValuesFromResponse ( string response ) public static async Task < Tuple < string OrderNumber , string OriginalId > > GetRequiredReturnValuesFromResponse ( string response )"
public void Foo ( Bar arg ) { throw new ArgumentException ( `` Argument is incompatible with `` + name ( Foo ) ) ; } [ RuntimeAcessibleDocumentation ( Description= '' The class `` + name ( Baz ) + `` does its job . See method `` + name ( DoItsJob ) + `` for more info . `` ) ] public class Baz { [ RuntimeAcessibleDocumentation ( Description= '' This method will just pretend `` + `` doing its job if the argument `` + name ( DoItsJob.Arguments.justPretend ) + `` is true . '' ) ] public void DoItsJob ( bool justPretend ) { if ( justPretend ) Logger.log ( name ( justPretend ) + `` was true . Nothing done . `` ) ; } }
"string sns = null ; sns = sns + sns ; // It results in a String.Emptystring snss = null ; snss = String.Concat ( snss , snss ) ; // It results in a String.Empty too !"
VoidFunction t = delegate { int i = 0 ; } ; int i = 1 ; { int i = 0 ; } int i = 1 ;
void Method ( in StringBuilder value ) { }
"static void Main ( string [ ] args ) { String input = `` test '' ; String pattern = `` . * '' ; String replacement = `` replace '' ; Console.WriteLine ( Regex.Replace ( input , pattern , replacement ) ) ; Console.Read ( ) ; } replacereplace"
"double result1 = 1.0 + 1.1 + 1.2 ; double result2 = 1.2 + 1.0 + 1.1 ; if ( result1 == result2 ) { ... } double r1 = 1.1 + 1.2 ; double r2 = 1.0 + r1double r3 = 1.0 + 1.1double r4 = 1.2 + r3 .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint .maxstack 1 .locals init ( [ 0 ] float64 result1 , [ 1 ] float64 result2 ) L_0000 : nop L_0001 : ldc.r8 3.3 L_000a : stloc.0 L_000b : ldc.r8 3.3000000000000003 L_0014 : stloc.1 L_0015 : ret }"
MyConverter < B > x1= new MyConverter < B > ( ) ; MyConverter < A > x2= x1 ;
"public static bool RaiseIfNull ( [ NotNullWhen ( true ) ] object ? thing ) = > RaiseIf ( ( ) = > thing is null ) ; public static bool RaiseIf ( Func < bool > predicate ) { if ( predicate ( ) ) throw new HttpException ( 400 ) ; return true ; } [ HttpPost ( `` { id } '' ) ] public async Task Etc ( string id , [ FromBody ] Dto data ) { HttpException.RaiseIfNull ( data ? .property ) ; await DoEtc ( id , data.property ) ) ; // warning here }"
"Class MyClass Sub MyCallback 'callback code ... End Sub 'Rest of tyhe codeEnd Class Class NewClass Sub AddCallback ( Obj As Object , Callback As Action ) 'Add the callback here End SubEnd Class Sub RunWithCallback ( beforFilter As Action , f As Action ) beforeFilter ( ) f ( ) End Sub Public Sub DoNothing ( ) Debug.WriteLine ( `` Callback working ! `` ) End SubPublic Sub BeforeFilter ( ) Debug.WriteLine ( `` Testing callback ... '' ) End Sub'To run the above function RunWithCallback ( AddressOf BeforeFilter , AddressOf DoNothing )"
"var camelCaseConvention = new ConventionPack { new CamelCaseElementNameConvention ( ) } ; ConventionRegistry.Register ( `` CamelCase '' , camelCaseConvention , type = > true ) ; var query = _collection.AsQueryable < TimeSeries > ( ) ; Console.WriteLine ( query.ToJson ( ) ) ; { `` _id '' : ObjectId ( `` 54af0e848c27be15fc47a0d9 '' ) , `` Name '' : null , `` Time '' : null }"
"public bool ConnectSync ( ) { bool success = true ; Pop3Client client = new Pop3Client ( ) ; try { client.Connect ( `` mail.server.com '' , 110 , false ) ; client.Authenticate ( `` username '' , `` password '' ) ; } catch { success = false ; } return success ; } public async Task < bool > ConnectAsync ( ) { }"
"< c : Keyboard Grid.Row= '' 2 '' Grid.Column= '' 0 '' PlayCommand= '' { Binding PlayCommand } '' StopCommand= '' { Binding StopCommand } '' ActiveNotes= '' { Binding ScaleNotes , Mode=TwoWay , UpdateSourceTrigger=PropertyChanged } '' / > private ReadOnlyCollection < eNote > _ScaleNotes ; public ReadOnlyCollection < eNote > ScaleNotes { get { return _ScaleNotes ; } set { SetField ( ref _ScaleNotes , value ) ; } } [ DebuggerStepThrough ] protected virtual void OnPropertyChanged ( [ CallerMemberName ] string propertyName = null ) { PropertyChanged ? .Invoke ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } [ DebuggerStepThrough ] protected bool SetField < T > ( ref T field , T value , [ CallerMemberName ] string propertyName = null ) { if ( EqualityComparer < T > .Default.Equals ( field , value ) ) return false ; field = value ; OnPropertyChanged ( propertyName ) ; return true ; } < c : Keyboard Grid.Row= '' 2 '' Grid.Column= '' 0 '' PlayCommand= '' { Binding PlayCommand } '' StopCommand= '' { Binding StopCommand } '' ActiveNotes= '' { Binding ScaleNotes , Mode=OneWay , UpdateSourceTrigger=PropertyChanged } '' / > public static DependencyProperty ActiveNotesProperty = DependencyProperty.Register ( `` ActiveNotes '' , typeof ( ReadOnlyCollection < eNote > ) , typeof ( Keyboard ) , new PropertyMetadata ( OnActiveNotesChanged ) ) ; public ReadOnlyCollection < eNote > ActiveNotes { get { return ( ReadOnlyCollection < eNote > ) GetValue ( ActiveNotesProperty ) ; } set { SetValue ( ActiveNotesProperty , value ) ; } } private static void OnActiveNotesChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { Keyboard keyboard = ( Keyboard ) d ; keyboard.ActiveNotes = ( ReadOnlyCollection < eNote > ) e.NewValue ; if ( ( keyboard.ActiveNotes ! = null ) & & ( keyboard.ActiveNotes.Count > 0 ) ) { keyboard.AllKeys.ForEach ( k = > { if ( k.Note ! = eNote.Undefined ) k.IsActiveKey = true ; } ) ; keyboard.AllKeys.ForEach ( k = > { if ( ( k.Note ! = eNote.Undefined ) & & ( ! keyboard.ActiveNotes.Contains ( k.Note ) ) ) k.IsActiveKey = false ; } ) ; } else { keyboard.AllKeys.ForEach ( k = > { if ( k.Note ! = eNote.Undefined ) k.IsActiveKey = true ; } ) ; } } private static void OnActiveNotesChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { Keyboard keyboard = ( Keyboard ) d ; //THIS LINE BREAKED THE CODE , WHEN USING OneWay binding BUT NOT WITH TwoWay binding //keyboard.ActiveNotes = ( ReadOnlyCollection < eNote > ) e.NewValue ; if ( ( keyboard.ActiveNotes ! = null ) & & ( keyboard.ActiveNotes.Count > 0 ) ) { keyboard.AllKeys.ForEach ( k = > { if ( k.Note ! = eNote.Undefined ) k.IsActiveKey = true ; } ) ; keyboard.AllKeys.ForEach ( k = > { if ( ( k.Note ! = eNote.Undefined ) & & ( ! keyboard.ActiveNotes.Contains ( k.Note ) ) ) k.IsActiveKey = false ; } ) ; } else { keyboard.AllKeys.ForEach ( k = > { if ( k.Note ! = eNote.Undefined ) k.IsActiveKey = true ; } ) ; } }"
public class remoteStatusCounts : RemoteStatus { public int statusCount ; public remoteStatusCounts ( RemoteStatus r ) { Type t = r.GetType ( ) ; foreach ( PropertyInfo p in t.GetProperties ( ) ) { this.property ( p ) = p.GetValue ( ) ; //example pseudocode } } } public remoteStatusCounts ( RemoteStatus r ) : base ( r ) { //do stuff } public remoteStatusCounts ( RemoteStatus r ) { RemoteStatus mBase = r ; //do work } public class remoteStatusCounts { public int statusCount ; public RemoteStatus rStatus ; public remoteStatusCounts ( RemoteStatus r ) { rStatus = r ; statusCount = getStatusCount ( ) ; } }
"obj.myType = ( myVar = new MyType ( ) ) ; protected MyType myVar ; protected readonly MyComplexType myComplexType ; protected void Page_Init ( object sender , EventArgs e ) ) { ... myComplexType.myType = ( myVar = new MyType ( ) ) ; ... }"
if ( whatever is IDisposable ) { ( whatever as IDisposable ) .Dispose ( ) ; } if ( whatever is IDisposable ) { //check ( ( IDisposable ) whatever ) .Dispose ( ) ; //cast - wo n't fail } IDisposable whateverDisposable = whatever as IDisposable ; if ( whateverDisposable ! = null ) { whateverDisposable.Dispose ( ) ; }
"public class Person : IEquatable < Person > { public int PersonId { get ; set ; } public string FirstName { get ; set ; } public string LastName { get ; set ; } public Person ( int personId , string firstName , string lastName ) { PersonId = personId ; FirstName = firstName ; LastName = lastName ; } public bool Equals ( Person obj ) { Person p = obj as Person ; if ( ReferenceEquals ( null , p ) ) return false ; if ( ReferenceEquals ( this , p ) ) return true ; return Equals ( p.FirstName , FirstName ) & & Equals ( p.LastName , LastName ) ; } } public static Dictionary < Person , Person > ObjDic= new Dictionary < Person , Person > ( ) ; public static Dictionary < int , Person > PKDic = new Dictionary < int , Person > ( ) ;"
int ? i = null ; var s = i.ToString ( ) ;
"using Atata ; [ assembly : Culture ( `` en-us '' ) ] [ assembly : VerifyTitleSettings ( Format = `` Login '' ) ] using Atata ; namespace PortalTests2 { using _ = SignInPage ; [ Url ( `` auth/login '' ) ] [ VerifyTitle ] public class SignInPage : Page < _ > { [ FindById ( `` email '' ) ] public TextInput < _ > Email { get ; set ; } [ FindById ( `` password '' ) ] public TextInput < _ > Password { get ; set ; } [ FindById ( `` login_button '' ) ] public Button < _ > SignIn { get ; set ; } [ FindById ] public Select < _ > selectedClientId { get ; set ; } [ FindById ( `` continue_button '' ) ] public Button < _ > ContinueButton { get ; set ; } } } using Atata ; using NUnit.Framework ; namespace PortalTests2 { [ TestFixture ] public class SignInTests { [ SetUp ] public void SetUp ( ) { AtataContext.Configure ( ) . UseChrome ( ) . WithFixOfCommandExecutionDelay ( ) . WithLocalDriverPath ( ) . UseBaseUrl ( $ '' http : //localhost:4300/ '' ) . UseNUnitTestName ( ) . AddNUnitTestContextLogging ( ) . AddScreenshotFileSaving ( ) . LogNUnitError ( ) . TakeScreenshotOnNUnitError ( ) . Build ( ) ; } [ TearDown ] public void TearDown ( ) { AtataContext.Current ? .CleanUp ( ) ; } [ Test ] public void SignIn ( ) { Go.To < SignInPage > ( ) . Email.Set ( `` root '' ) . Password.Set ( `` r00t '' ) . SignIn.Click ( ) ; } } } using ( var driver = new ChromeDriver ( Path.GetDirectoryName ( Assembly.GetExecutingAssembly ( ) .Location ) ) ) { driver.Navigate ( ) .GoToUrl ( @ '' http : //localhost:4300/ '' ) ; var link = driver.FindElement ( By.Id ( `` email '' ) ) ; link.SendKeys ( `` hello '' ) ; } < input autocomplete= '' off '' class= '' form-control ng-pristine ng-valid ng-touched '' id= '' email '' name= '' email '' placeholder= '' Email address '' type= '' email '' ng-reflect-name= '' email '' ng-reflect-is-disabled= '' false '' style= '' background-image : url ( & quot ; data : image/png ; base64 , iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAAXNSR0IArs4c6QAAAPhJREFUOBHlU70KgzAQPlMhEvoQTg6OPoOjT+JWOnRqkUKHgqWP4OQbOPokTk6OTkVULNSLVc62oJmbIdzd95NcuGjX2/3YVI/Ts+t0WLE2ut5xsQ0O+90F6UxFjAI8qNcEGONia08e6MNONYwCS7EQAizLmtGUDEzTBNd1fxsYhjEBnHPQNG3KKTYV34F8ec/zwHEciOMYyrIE3/ehKAqIoggo9inGXKmFXwbyBkmSQJqmUNe15IRhCG3byphitm1/eUzDM4qR0TTNjEixGdAnSi3keS5vSk2UDKqqgizLqB4YzvassiKhGtZ/jDMtLOnHz7TE+yf8BaDZXA509yeBAAAAAElFTkSuQmCC & quot ; ) ; background-repeat : no-repeat ; background-attachment : scroll ; background-size : 16px 18px ; background-position : 98 % 50 % ; cursor : auto ; '' xpath= '' 1 '' >"
public class Person : IPerson { public int PersonId { get ; set ; } public string Name { get ; set ; } public string LastName { get ; set ; } } public interface IPerson { int PersonId { get ; set ; } string Name { get ; set ; } string LastName { get ; set ; } } public class EFPerson : IPerson { public int PersonId { get ; set ; } public string Name { get ; set ; } public string LastName { get ; set ; } } type Person = { personId : int name : string lastName : string }
"int ? x = null ; x = x + 1 ; // Works , but x remains null"
"class Program { static void Main ( string [ ] args ) { Method ( uri = > Task.FromResult ( uri ) ) ; } static void Method ( Func < Uri , Uri > transformer ) { throw new NotImplementedException ( ) ; } static void Method ( Func < Uri , Task < Uri > > transformer ) { throw new NotImplementedException ( ) ; } } class Program { static void Main ( string [ ] args ) { Method ( Method2 ) ; } static Task < Uri > Method2 ( Uri uri ) { return Task.FromResult ( uri ) ; } static void Method ( Func < Uri , Uri > transformer ) { throw new NotImplementedException ( ) ; } static void Method ( Func < Uri , Task < Uri > > transformer ) { throw new NotImplementedException ( ) ; } }"
"public TCompiledView GetOrAdd < TCompiledView > ( ViewLocationResult viewLocationResult , Func < ViewLocationResult , TCompiledView > valueFactory ) { TCompiledView compiledView = default ( TCompiledView ) ; compiledView = ( TCompiledView ) this.cache.GetOrAdd ( viewLocationResult , x = > valueFactory ( x ) ) ;"
"public enum EStaticFile { [ StringValue ( `` Path of a file '' ) ] CONFIG_FILE_1 , [ StringValue ( `` Path of a file '' ) ] CONFIG_FILE_2 } public static StringValue GetStringValueAttribute ( this Enum aEnumValue ) { Type type = aEnumValue.GetType ( ) ; FieldInfo fieldInfo = type.GetRuntimeField ( aEnumValue.ToString ( ) ) ; StringValue [ ] attributes = fieldInfo.GetCustomAttributes ( typeof ( StringValue ) , false ) as StringValue [ ] ; if ( attributes.Length > 0 ) { return attributes [ 0 ] ; } return null ; }"
public async Task CommitAsync ( ) { try { using ( var scope = new TransactionScope ( TransactionScopeAsyncFlowOption.Enabled ) ) { if ( _context1 ! = null ) await _context1.SaveChangesAsync ( ) ; if ( _context2 ! = null ) await _context2.SaveChangesAsync ( ) ; scope.Complete ( ) ; } } catch ( DbEntityValidationException ex ) { //.. } } state.Name = `` Texas '' ; _uow.StateRepository.Update ( state ) ; user.FirstName = `` John '' ; _uow.UserRepository.Update ( user ) ; await _uow.CommitAsync ( ) ;
class BaseClass { public virtual void HelloWorld ( ) { Console.WriteLine ( `` Hello Tarik '' ) ; } } class DerivedClass : BaseClass { public override void HelloWorld ( ) { base.HelloWorld ( ) ; } } class Program { static void Main ( string [ ] args ) { DerivedClass derived = new DerivedClass ( ) ; derived.HelloWorld ( ) ; } } .method private hidebysig static void Main ( string [ ] args ) cil managed { .entrypoint // Code size 15 ( 0xf ) .maxstack 1 .locals init ( [ 0 ] class EnumReflection.DerivedClass derived ) IL_0000 : nop IL_0001 : newobj instance void EnumReflection.DerivedClass : :.ctor ( ) IL_0006 : stloc.0 IL_0007 : ldloc.0 IL_0008 : callvirt instance void EnumReflection.BaseClass : :HelloWorld ( ) IL_000d : nop IL_000e : ret } // end of method Program : :Main
"< Pivot > < PivotItem > < Grid Background= '' White '' > < Grid.RowDefinitions > < RowDefinition Height= '' * '' / > < RowDefinition Height= '' 3* '' / > < RowDefinition Height= '' * '' / > < /Grid.RowDefinitions > < Grid Grid.Row= '' 0 '' Background= '' LightBlue '' / > < Grid Grid.Row= '' 1 '' > < ctrl : Carrousel Grid.Row= '' 0 '' Background= '' Green '' ItemsSource= '' { Binding Datas } '' SelectedIndex= '' 0 '' TransitionDuration= '' 2500 '' Depth= '' 700 '' MaxVisibleItems= '' 15 '' x : Name= '' CarrouselElement '' Rotation= '' 50 '' TranslateY= '' 0 '' TranslateX = '' 1200 '' > < ctrl : Carrousel.EasingFunction > < CubicEase EasingMode= '' EaseOut '' / > < /ctrl : Carrousel.EasingFunction > < ctrl : Carrousel.ItemTemplate > < DataTemplate > < Grid Background= '' Red '' > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Border BorderBrush= '' # bfbfbf '' BorderThickness= '' 1 '' > < Grid HorizontalAlignment= '' Stretch '' > < Grid.RowDefinitions > < RowDefinition Height= '' Auto '' / > < RowDefinition Height= '' Auto '' / > < /Grid.RowDefinitions > < Image Source= '' { Binding BitmapImage } '' Stretch= '' Fill '' > < /Image > < Border Grid.Row= '' 1 '' Background= '' White '' > < TextBlock Text= '' { Binding Title } '' FontSize= '' 16 '' Margin= '' 4 '' / > < /Border > < /Grid > < /Border > < Rectangle Grid.Row= '' 1 '' Height= '' 12 '' Margin= '' 0,0,0,0 '' VerticalAlignment= '' Bottom '' > < Rectangle.Fill > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' # bfbfbf '' / > < GradientStop Color= '' Transparent '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Rectangle.Fill > < /Rectangle > < /Grid > < /DataTemplate > < /ctrl : Carrousel.ItemTemplate > < /ctrl : Carrousel > < /Grid > < /Grid > < /PivotItem > < PivotItem > < /PivotItem > < /Pivot >"
"public class HomeController : Controller { public IActionResult Index ( ) { return View ( `` IndexAng '' ) ; } } @ { ViewData [ `` Title '' ] = `` Home Page '' ; } @ * < script src= '' https : //npmcdn.com/tether @ 1.2.4/dist/js/tether.min.js '' > < /script > * @ @ * < app asp-prerender-module= '' ClientApp/dist/main-server '' > Loading ... < /app > * @ < h3 > Loading Ang App root : < /h3 > < app-root > < /app-root > < script src= '' ~/dist/vendor.js '' asp-append-version= '' true '' > < /script > @ section scripts { < script src= '' ~/dist/main-client.js '' asp-append-version= '' true '' > < /script > } public void Configure ( IApplicationBuilder app , IHostingEnvironment env , ApplicationDbContext identityContext , UserManager < ApplicationUser > userManager , RoleManager < IdentityRole > roleManager ) { # if DEBUG if ( env.IsDevelopment ( ) ) { app.UseDeveloperExceptionPage ( ) ; app.UseWebpackDevMiddleware ( new WebpackDevMiddlewareOptions { HotModuleReplacement = true } ) ; } else { app.UseExceptionHandler ( `` /Home/Error '' ) ; } # else app.UseExceptionHandler ( `` /Home/Error '' ) ; # endif app.UseStaticFiles ( ) ; //app.UseSession ( ) ; app.UseAuthentication ( ) ; app.UseMvc ( routes = > { routes.MapRoute ( name : `` default '' , template : `` { controller=Home } / { action=Index } / { id ? } '' ) ; routes.MapSpaFallbackRoute ( name : `` spa-fallback '' , defaults : new { controller = `` Home '' , action = `` Index '' } ) ; } ) ; }"
"/// < summary > /// Adds the specified value to the multi value dictionary./// < /summary > /// < param name= '' key '' > The key of the element to add. < /param > /// < param name= '' value '' > The value of the element to add . The value can be null for reference types. < /param > public static void Add < KeyType , ListType , ValueType > ( this Dictionary < KeyType , ListType > thisDictionary , KeyType key , ValueType value ) where ListType : IList < ValueType > , new ( ) { //if the dictionary does n't contain the key , make a new list under the key if ( ! thisDictionary.ContainsKey ( key ) ) { thisDictionary.Add ( key , new ListType ( ) ) ; } //add the value to the list at the key index thisDictionary [ key ] .Add ( value ) ; } `` ' < summary > `` ' Adds the specified value to the multi value dictionary. `` ' < /summary > `` ' < param name= '' key '' > The key of the element to add. < /param > `` ' < param name= '' value '' > The value of the element to add . The value can be null for reference types. < /param > < System.Runtime.CompilerServices.Extension ( ) > _Public Sub Add ( Of KeyType , ListType As { IList ( Of ValueType ) , New } , ValueType ) _ ( ByVal thisDictionary As Dictionary ( Of KeyType , ListType ) , ByVal key As KeyType , ByVal value As ValueType ) 'if the dictionary does n't contain the key , make a new list under the key If Not thisDictionary.ContainsKey ( key ) Then thisDictionary.Add ( key , New ListType ( ) ) End If 'add the value to the list at the key index thisDictionary ( key ) .Add ( value ) End Sub"
"public int Add ( int ? a , int ? b ) { return ( a ? .0 + b ? .0 ) ; }"
create View Supplier as select * from T_ADRESSEN where IsSupplier = 1
"private ObservableCollection < TypeA > TypeACollection = new ObservableCollection < TypeA > ( ) ; public ObservableCollection < TypeA > GetTypeACollection { get { return TypeACollection ; } } public ObservableCollection < TypeA > GetFirstFiveTypeACollection { get { return TypeACollection.Take ( 5 ) ; } } < ItemsControl x : Name= '' TypeAList '' ItemsSource= '' { Binding GetTypeACollection , Source= { StaticResource DataStore } , UpdateSourceTrigger=PropertyChanged } '' > < ItemsControl.ItemsPanel > < ItemsPanelTemplate > < VirtualizingStackPanel / > < /ItemsPanelTemplate > < /ItemsControl.ItemsPanel > < ItemsControl.ItemTemplate > < DataTemplate > < User_Controls : TypeAUserControl Type= '' { Binding } '' / > < /DataTemplate > < /ItemsControl.ItemTemplate > < /ItemsControl > public class ObservableCollectionTypeAResizeConverter : IValueConverter { public object Convert ( object value , Type targetType , object parameter , CultureInfo culture ) { ObservableCollection < TypeA > TypeACollection = value as ObservableCollection < TypeA > ; return TypeACollection.Take ( System.Convert.ToInt32 ( parameter ) ) ; } public object ConvertBack ( object value , Type targetType , object parameter , CultureInfo culture ) { return null ; } } < MenuItem Header= '' First 5 Type A '' Name= '' MI_FirstFiveTypeA '' ItemsSource= '' { Binding DATA_STORE.GetTypeACollection , ConverterParameter=5 , Converter= { StaticResource ObservableCollectionTypeAResizeConverter } , Source= { StaticResource DataStore } } '' / > < MenuItem Header= '' First 5 Type A '' Name= '' MI_FirstFiveTypeA '' ItemsSource= '' { Binding DATA_STORE.RecentTimers , Source= { StaticResource DataStore } , UpdateSourceTrigger=PropertyChanged } '' / > private ObservableCollection < TimerType > TimerTypes = new ObservableCollection < TimerType > ( ) ; public ObservableCollection < TimerType > getTimerTypes { get { return new ObservableCollection < TimerType > ( TimerTypes.OrderByDescending ( t = > t.LastUsed ) ) ; } } public ObservableCollection < TimerType > RecentTimers { get { return new ObservableCollection < TimerType > ( TimerTypes.OrderByDescending ( t = > t.LastUsed ) .Take ( 5 ) ) ; } } public event PropertyChangedEventHandler PropertyChanged ; // Create the OnPropertyChanged method to raise the eventprivate void NotifyPropertyChanged ( [ CallerMemberName ] String propertyName = `` '' ) { if ( PropertyChanged ! = null ) { PropertyChanged ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } } //THIS IS IN THE ADD METHODTimerTypes.Add ( timer ) ; NotifyPropertyChanged ( `` getTimerTypes '' ) ; NotifyPropertyChanged ( `` RecentTimers '' ) ; NotifyPropertyChanged ( `` TimerTypes '' ) ; //THIS IS IN THE REMOVE METHODTimerTypes.Remove ( Timer ) ; NotifyPropertyChanged ( `` getTimerTypes '' ) ; NotifyPropertyChanged ( `` RecentTimers '' ) ; NotifyPropertyChanged ( `` TimerTypes '' ) ; < ItemsControl x : Name= '' TimersList '' ItemsSource= '' { Binding Path=getTimerTypes , UpdateSourceTrigger=PropertyChanged } '' > //Lists are populated in DataStore.cs before this.DataContext = DataStore.DATA_STORE ; InitializeComponent ( ) ; < MenuItem Header= '' Recent Timers '' Name= '' MIRecent '' ItemsSource= '' { Binding RecentTimers , UpdateSourceTrigger=PropertyChanged } '' / > DataContext = DataStore.DATA_STORE ; InitializeComponent ( ) ; private static readonly DataStore Instance = new DataStore ( ) ; private DataStore ( ) { } public static DataStore DATA_STORE { get { return Instance ; } set { } }"
"< add name= '' DefaultConnection '' providerName= '' System.Data.SqlClient '' connectionString= '' Data Source= ( LocalDb ) \v11.0 ; Initial Catalog=aspnet-mirror-quickstart-dotnet-20130523105156 ; Integrated Security=SSPI ; AttachDBFilename=|DataDirectory|\aspnet-mirror-quickstart-dotnet-20130523105156.mdf '' / > [ Win32Exception ( 0x80004005 ) : The system can not find the file specified ] [ SqlException ( 0x80131904 ) : A network-related or instance-specific error occurred while establishing a connection to SQL Server . The server was not found or was not accessible . Verify that the instance name is correct and that SQL Server is configured to allow remote connections . ( provider : SQL Network Interfaces , error : 52 - Unable to locate a Local Database Runtime installation . Verify that SQL Server Express is properly installed and that the Local Database Runtime feature is enabled . ) ] System.Data.SqlClient.SqlInternalConnection.OnError ( SqlException exception , Boolean breakConnection , Action ` 1 wrapCloseInAction ) +6676046 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning ( TdsParserStateObject stateObj , Boolean callerHasConnectionLock , Boolean asyncClose ) +810 System.Data.SqlClient.TdsParser.Connect ( ServerInfo serverInfo , SqlInternalConnectionTds connHandler , Boolean ignoreSniOpenTimeout , Int64 timerExpire , Boolean encrypt , Boolean trustServerCert , Boolean integratedSecurity , Boolean withFailover ) +6702720 System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin ( ServerInfo serverInfo , String newPassword , SecureString newSecurePassword , Boolean ignoreSniOpenTimeout , TimeoutTimer timeout , Boolean withFailover ) +219 System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover ( ServerInfo serverInfo , String newPassword , SecureString newSecurePassword , Boolean redirectedUserInstance , SqlConnectionString connectionOptions , SqlCredential credential , TimeoutTimer timeout ) +6704856 System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist ( TimeoutTimer timeout , SqlConnectionString connectionOptions , SqlCredential credential , String newPassword , SecureString newSecurePassword , Boolean redirectedUserInstance ) +6705315 System.Data.SqlClient.SqlInternalConnectionTds..ctor ( DbConnectionPoolIdentity identity , SqlConnectionString connectionOptions , SqlCredential credential , Object providerInfo , String newPassword , SecureString newSecurePassword , Boolean redirectedUserInstance , SqlConnectionString userConnectionOptions ) +610 System.Data.SqlClient.SqlConnectionFactory.CreateConnection ( DbConnectionOptions options , DbConnectionPoolKey poolKey , Object poolGroupProviderInfo , DbConnectionPool pool , DbConnection owningConnection , DbConnectionOptions userOptions ) +1049 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection ( DbConnectionPool pool , DbConnectionOptions options , DbConnectionPoolKey poolKey , DbConnectionOptions userOptions ) +74 System.Data.ProviderBase.DbConnectionPool.CreateObject ( DbConnectionOptions userOptions ) +6707883 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest ( DbConnectionOptions userOptions ) +78 System.Data.ProviderBase.DbConnectionPool.TryGetConnection ( DbConnection owningObject , UInt32 waitForMultipleObjectsTimeout , Boolean allowCreate , Boolean onlyOneCheckConnection , DbConnectionOptions userOptions , DbConnectionInternal & connection ) +2192 System.Data.ProviderBase.DbConnectionPool.TryGetConnection ( DbConnection owningObject , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions , DbConnectionInternal & connection ) +116 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection ( DbConnection owningConnection , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions , DbConnectionInternal & connection ) +1012 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection ( DbConnection outerConnection , DbConnectionFactory connectionFactory , TaskCompletionSource ` 1 retry , DbConnectionOptions userOptions ) +6712511 System.Data.SqlClient.SqlConnection.TryOpen ( TaskCompletionSource ` 1 retry ) +152 System.Data.SqlClient.SqlConnection.Open ( ) +229 System.Data.Entity.SqlServer. < > c__DisplayClass1. < Execute > b__0 ( ) +15 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute ( Func ` 1 operation ) +263 System.Data.Entity.SqlServer.SqlProviderServices.UsingConnection ( DbConnection sqlConnection , Action ` 1 act ) +334 System.Data.Entity.SqlServer.SqlProviderServices.UsingMasterConnection ( DbConnection sqlConnection , Action ` 1 act ) +582 System.Data.Entity.SqlServer.SqlProviderServices.GetDbProviderManifestToken ( DbConnection connection ) +373 System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken ( DbConnection connection ) +115 [ ProviderIncompatibleException : The provider did not return a ProviderManifestToken string . ] System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken ( DbConnection connection ) +451 System.Data.Entity.Utilities.DbProviderServicesExtensions.GetProviderManifestTokenChecked ( DbProviderServices providerServices , DbConnection connection ) +48 [ ProviderIncompatibleException : An error occurred while getting provider information from the database . This can be caused by Entity Framework using an incorrect connection string . Check the inner exceptions for details and ensure that the connection string is correct . ] System.Data.Entity.Utilities.DbProviderServicesExtensions.GetProviderManifestTokenChecked ( DbProviderServices providerServices , DbConnection connection ) +242 System.Collections.Concurrent.ConcurrentDictionary ` 2.GetOrAdd ( TKey key , Func ` 2 valueFactory ) +83 System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken ( DbConnection connection ) +229 System.Data.Entity.DbModelBuilder.Build ( DbConnection providerConnection ) +118 System.Data.Entity.Internal.LazyInternalContext.CreateModel ( LazyInternalContext internalContext ) +94 System.Data.Entity.Internal.RetryLazy ` 2.GetValue ( TInput input ) +248 System.Data.Entity.Internal.LazyInternalContext.InitializeContext ( ) +618 System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType ( Type entityType ) +26 System.Data.Entity.Internal.Linq.InternalSet ` 1.Initialize ( ) +72 System.Data.Entity.Internal.Linq.InternalSet ` 1.get_InternalContext ( ) +21 System.Data.Entity.Infrastructure.DbQuery ` 1.System.Linq.IQueryable.get_Provider ( ) +68 System.Linq.Queryable.FirstOrDefault ( IQueryable ` 1 source , Expression ` 1 predicate ) +85 MirrorQuickstart.Models.Utils.StoreCredentials ( String userId , IAuthorizationState credentials ) +377 MirrorQuickstart.Controllers.AuthController.OAuth2Callback ( String code ) +277 lambda_method ( Closure , ControllerBase , Object [ ] ) +127 System.Web.Mvc.ReflectedActionDescriptor.Execute ( ControllerContext controllerContext , IDictionary ` 2 parameters ) +274 System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod ( ControllerContext controllerContext , ActionDescriptor actionDescriptor , IDictionary ` 2 parameters ) +39 System.Web.Mvc. < > c__DisplayClass15. < InvokeActionMethodWithFilters > b__12 ( ) +120 System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodFilter ( IActionFilter filter , ActionExecutingContext preContext , Func ` 1 continuation ) +637 System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters ( ControllerContext controllerContext , IList ` 1 filters , ActionDescriptor actionDescriptor , IDictionary ` 2 parameters ) +307 System.Web.Mvc.ControllerActionInvoker.InvokeAction ( ControllerContext controllerContext , String actionName ) +720 System.Web.Mvc.Controller.ExecuteCore ( ) +162 System.Web.Mvc.ControllerBase.Execute ( RequestContext requestContext ) +305 System.Web.Mvc. < > c__DisplayClassb. < BeginProcessRequest > b__5 ( ) +62 System.Web.Mvc.Async. < > c__DisplayClass1. < MakeVoidDelegate > b__0 ( ) +15 System.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute ( ) +606 System.Web.HttpApplication.ExecuteStep ( IExecutionStep step , Boolean & completedSynchronously ) +288"
"public class PersonModel { } db.People.Where ( p = > someCondition ) .Select ( p = > new PersonModel { Id = p.Id , Name = p.Name , //set other properties } ) .ToList ( ) ; public int Id { get ; internal set ; } public int Id { get ; set ; }"
"class CustomType : Dictionary < int , SomeOtherCustomType > { // This is empty ; nothing omitted here } Dictionary < int , SomeOtherCustomType >"
public bool Equals ( T other ) { if ( ( object ) other == null ) { return false ; } return CompareTo ( other ) == 0 ; }
"public float Add ( float num1 , long num2 ) { Console.WriteLine ( `` method 1 '' ) ; return 0 ; } public float Add ( int num1 , float num2 ) { Console.WriteLine ( `` method 2 '' ) ; return 0 ; } public float Add ( long num1 , float num2 ) { Console.WriteLine ( `` method 1 '' ) ; return 0 ; } public float Add ( int num1 , float num2 ) { Console.WriteLine ( `` method 2 '' ) ; return 0 ; } public float Add ( long num1 , long num2 ) { Console.WriteLine ( `` method 1 '' ) ; return 0 ; } public float Add ( int num1 , float num2 ) { Console.WriteLine ( `` method 2 '' ) ; return 0 ; }"
"Response.Clear ( ) ; Response.ContentType = `` image/jpeg '' ; System.Drawing.Image returnImage = System.Drawing.Image.FromFile ( completeImageFilePath ) ; using ( MemoryStream stream = new MemoryStream ( ) ) { returnImage.Save ( stream , ImageFormat.Jpeg ) ; stream.WriteTo ( Response.OutputStream ) ; } returnImage.Dispose ( ) ; if ( Response.IsClientConnected ) { Response.Flush ( ) ; } Response.End ( ) ;"
"public event PropertyChangedEventHandler PropertyChanged ; private void RaisePropertyChanged ( string name ) { var handler = PropertyChanged ; if ( handler ! = null ) handler ( this , new PropertyChangedEventArgs ( name ) ) ; } private void RaisePropertyChanged ( string name ) { PropertyChanged ? .Invoke ( this , new PropertyChangedEventArgs ( name ) ) ; }"
"public class Argument < T > { internal Argument ( string name , T value ) { Name = name ; Value = value ; } public string Name { get ; private set ; } public T Value { get ; private set ; } } public static Argument < IEnumerable < T > > HasItems < T > ( this Argument < IEnumerable < T > > argument ) { if ( ! argument.Value.Any ( ) ) throw Error.Generic ( argument.Name , `` Collection contains no items . `` ) ; return argument ; } [ TestMethod ] public void TestMethod1 ( ) { var argument = new List < int > ( ) { 1 , 2 , 6 , 3 , -1 , 5 , 0 } ; Validate.Argument ( `` argument '' , argument ) .IsNotNull ( ) .HasItems ( ) .All ( v = > v.IsGreaterThan ( 0 ) ) ; } CollectionTypeExtensions.HasItems ( Validate.Argument ( `` argument '' , argument ) ) ; public static Argument < T > HasItems < T , TElement > ( this Argument < T > argument ) where T : IEnumerable < TElement > { if ( ! argument.Value.Any ( ) ) throw Error.Generic ( argument.Name , `` Collection contains no items . `` ) ; return argument ; }"
AxAcroPDF newPDF = new AxAcroPDF ( ) ; newPDF.CreateControl ( ) ; newPDF.Width = selectedTab.Width ; newPDF.Height = selectedTab.Height ; newPDF.LoadFile ( filePath ) ; selectedTab.Controls.Add ( newPDF ) ; newPDF.Show ( ) ; newPDF.Visible = true ;
C : \Users [ username ] \AppData\Local\Packages\LocalState\Settings\settings.dat
SignUpDate UserType -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 2008-11-11 1 2008-11-12 0 2008-11-13 0 2008-12-13 0 2008-12-15 1 2008-11-11 1 2008-11-12 0 2008-12-13 0 2008-12-15 1
"@ { int iGroupNameId = 0 ; int iTotalArticles = 0 ; foreach ( var groupItems in Model.ArticleGroups ) { iTotalArticles = Model.ArticlesList.Where ( x = > x.fkiGroupNameId == groupItems.pkiKnowledgeSharingCenterGroupsId ) .Count ( ) ; if ( iTotalArticles > 0 ) { < div style= '' background : linear-gradient ( # B5012E , darkred ) ; margin : 10px ; padding : 10px ; font-weight : bold ; color : white ; text-transform : uppercase ; '' > @ groupItems.GroupName < /div > < div class= '' container '' style= '' width:100 % '' > @ if ( groupItems.pkiKnowledgeSharingCenterGroupsId ! = iGroupNameId ) { foreach ( var item in Model.ArticlesList.Where ( x = > x.fkiGroupNameId == groupItems.pkiKnowledgeSharingCenterGroupsId ) ) { < div class= '' row '' > < div class= '' col-md-4 '' > @ if ( User.IsInRole ( `` Administrator '' ) ) { < div class= '' pull-right '' > < div class= '' btn-group '' > < button class= '' btn dropdown-toggle btn-xs btn-info '' data-toggle= '' dropdown '' > < i class= '' fa fa-gear '' > < /i > < i class= '' fa fa-caret-down '' > < /i > < /button > < ul class= '' dropdown-menu pull-right '' > < li > < a href= '' @ Url.Action ( `` EditArticle '' , `` ILearn '' , new { id = item.KnowledgeSharingArticlesId } ) '' > Edit < /a > < /li > < li class= '' divider '' > < /li > < li > < a href= '' @ Url.Action ( `` DeleteArticle '' , `` ILearn '' , new { id = item.KnowledgeSharingArticlesId } ) '' > Delete < /a > < /li > < /ul > < /div > < /div > } < img src= '' @ item.ArticleImage '' class= '' img-responsive '' alt= '' img '' style= '' width:350px ; height:200px '' > < ul class= '' list-inline padding-10 '' > < li > < i class= '' fa fa-calendar '' > < /i > @ item.DateTimeStamp.ToLongDateString ( ) < /li > < li > < i class= '' fa fa-comments '' > < /i > @ item.ArticleComments < /li > < li > < i class= '' fa fa-eye '' > < /i > @ item.ArticleViews < /li > < /ul > < /div > < div class= '' col-md-8 padding-left-0 '' > < h6 class= '' margin-top-0 '' > < span style= '' font-size : large '' > @ item.Title < /span > < br > < small class= '' font-xs '' > < i > Published by < a href= '' @ Url.Action ( `` GetProfileData '' , '' UserProfile '' , new { userid = item.fkiUserId } ) '' > @ item.User_FullName < /a > < /i > < /small > < /h6 > < p > @ Html.Raw ( item.Description ) < /p > @ * < a class= '' btn btn-danger '' href= '' @ Url.Action ( `` ShowArticleDetails '' , `` ILearn '' , new { id = item.KnowledgeSharingArticlesId } ) '' > Read more < /a > * @ < button type= '' button '' onclick= '' showArticle ( ' @ item.KnowledgeSharingArticlesId ' ) '' class= '' btn btn-danger '' data-target= '' # show-details-modal '' data-toggle= '' modal '' > Read more < /button > < /div > < /div > < hr > } } < /div > } } } < ! -- Loading Panel -- > < div id= '' loadingPanel '' style= '' display : none ; '' > < div class= '' progress progress-striped active '' > < div class= '' progress-bar progress-bar-info '' style= '' width : 100 % '' > ... LOADING ... < /div > < /div > < /div > < ! -- Show details modal -- > < div id= '' show-details-modal '' class= '' modal fade '' style= '' width:100 % '' > < div class= '' modal-dialog modal-xl '' > < div class= '' modal-content '' > < div class= '' modal-header '' > < button type= '' button '' class= '' close '' data-dismiss= '' modal '' aria-hidden= '' true '' > & times ; < /button > < h4 class= '' modal-title '' > < /h4 > < div id= '' loadingPanelShowDetails '' class= '' col-md-12 text-center '' style= '' display : none ; '' > < br / > < div class= '' progress progress-striped active '' > < div class= '' progress-bar progress-bar-info '' style= '' width : 100 % '' > ... LOADING ... < /div > < /div > < /div > < div id= '' target-show-details '' > < /div > < /div > < /div > < /div > < /div > function showArticle ( id ) { $ ( `` # target-show-details '' ) .html ( `` ) ; $ ( ' # loadingPanelShowDetails ' ) .show ( ) ; $ .ajax ( { type : 'get ' , url : ' @ Url.Action ( `` ShowArticleDetails '' , `` ILearn '' ) ' , contentType : 'application/json ; charset=utf-8 ' , dataType : 'html ' , data : { `` id '' : id } , success : function ( result ) { $ ( `` # target-show-details '' ) .html ( result ) ; $ ( ' # loadingPanelShowDetails ' ) .hide ( ) ; var saveComment = function ( data ) { $ ( data.pings ) .each ( function ( index , id ) { var user = usersArray.filter ( function ( user ) { return user.id == id } ) [ 0 ] ; alert ( user.fullname ) ; data.content = data.content.replace ( ' @ @ ' + id , ' @ @ ' + user.fullname ) ; } ) ; return data ; } $ ( ' # articlecomments-container ' ) .comments ( { profilePictureURL : 'https : //viima-app.s3.amazonaws.com/media/public/defaults/user-icon.png ' , currentUserId : 1 , roundProfilePictures : true , textareaRows : 1 , enableAttachments : true , enableHashtags : true , enablePinging : true , getUsers : function ( success , error ) { $ .ajax ( { type : 'get ' , traditional : true , url : ' @ Url.Action ( `` GetPinnedUsers '' , `` ILearn '' ) ' , success : function ( usersArray ) { success ( usersArray ) } , error : error } ) ; } , getComments : function ( success , error ) { $ .ajax ( { type : 'get ' , traditional : true , data : { `` id '' : id } , url : ' @ Url.Action ( `` GetArticleComments '' , `` ILearn '' ) ' , success : function ( commentsArray ) { success ( saveComment ( commentsArray ) ) } , error : error } ) ; } , postComment : function ( data , success , error ) { $ .ajax ( { type : 'post ' , dataType : `` json '' , url : ' @ Url.Action ( `` PostArticleComment '' , `` ILearn '' ) ' , data : { `` CVM '' : data , `` articleId '' : id } , success : function ( comment ) { success ( comment ) ; } , error : error } ) ; } , putComment : function ( data , success , error ) { $ .ajax ( { type : 'post ' , dataType : `` json '' , url : ' @ Url.Action ( `` PutArticleComment '' , `` ILearn '' ) ' , data : { `` CVM '' : data , `` articleId '' : id } , success : function ( comment ) { success ( comment ) ; } , error : error } ) ; } , deleteComment : function ( data , success , error ) { $ .SmartMessageBox ( { title : `` Deleting Comment ? `` , content : `` Are you sure that you want to delete this comment ? `` , buttons : ' [ No ] [ Yes ] ' } , function ( ButtonPressed ) { if ( ButtonPressed === `` Yes '' ) { $ .ajax ( { type : 'post ' , dataType : `` json '' , url : ' @ Url.Action ( `` DeleteArticleComment '' , `` ILearn '' ) ' , data : { `` CVM '' : data , `` articleId '' : id } , success : function ( data ) { if ( data.status === `` usersuccess '' ) { $ .smallBox ( { title : `` < strong > Comment Deleted < /strong > '' , content : `` < i class='fa fa-clock-o ' > < /i > < i > Comment was successfully deleted ! < strong < /strong > < /i > '' , color : `` # 659265 '' , iconSmall : `` fa fa-check fa-2x fadeInRight animated '' , timeout : 4000 } ) ; success ( ) ; } else { success ( ) ; } } } ) ; } if ( ButtonPressed === `` No '' ) { $ .smallBox ( { title : `` < strong > Comment not deleted < /strong > '' , content : `` < i class='fa fa-clock-o ' > < /i > < i > This comment has not been deleted. < /i > '' , color : `` # C46A69 '' , iconSmall : `` fa fa-times fa-2x fadeInRight animated '' , timeout : 4000 } ) ; } } ) ; e.preventDefault ( ) ; } , upvoteComment : function ( data , success , error ) { if ( data.user_has_upvoted ) { $ .ajax ( { type : 'post ' , dataType : `` json '' , url : ' @ Url.Action ( `` UpVoteArticleComment '' , `` ILearn '' ) ' , data : { `` CVM '' : data , `` articleId '' : id } , success : function ( ) { success ( data ) } , error : error } ) ; } else { $ .ajax ( { type : 'post ' , url : ' @ Url.Action ( `` DeleteArticleCommentUpvote '' , `` ILearn '' ) ' , data : { `` commentId '' : data.id } , success : function ( ) { success ( commentJSON ) } , error : error } ) ; } } , uploadAttachments : function ( commentArray , success , error ) { var responses = 0 ; var successfulUploads = [ ] ; var serverResponded = function ( ) { responses++ ; // Check if all requests have finished if ( responses == commentArray.length ) { // Case : all failed if ( successfulUploads.length == 0 ) { error ( ) ; // Case : some succeeded } else { success ( successfulUploads ) } } } $ ( commentArray ) .each ( function ( index , commentJSON ) { // Create form data var formData = new FormData ( ) ; $ ( Object.keys ( commentJSON ) ) .each ( function ( index , key ) { var value = commentJSON [ key ] ; if ( value ) formData.append ( key , value ) ; } ) ; formData.append ( 'fkiKnowledgeSharingArticlesId ' , id ) ; $ .ajax ( { url : ' @ Url.Action ( `` UploadToArticleComments '' , `` ILearn '' ) ' , type : 'POST ' , data : formData , cache : false , contentType : false , processData : false , success : function ( commentJSON ) { successfulUploads.push ( commentJSON ) ; serverResponded ( ) ; } , error : function ( data ) { serverResponded ( ) ; } , } ) ; } ) ; } } ) ; } , error : function ( xhr , textStatus , errorThrown ) { alert ( xhr.responseText ) ; } } ) ; } @ model Innovation_Cafe.Models.KnowledgeSharingArticles < div class= '' col-lg-12 '' > < div class= '' margin-top-10 '' > < div style= '' text-align : center ; border : solid ; border-style : solid '' > < img src= '' @ Model.ArticleImage '' class= '' img-responsive '' alt= '' img '' style= '' width:100 % ; '' > < /div > < ul class= '' list-inline padding-10 '' > < li > < i class= '' fa fa-calendar '' > < /i > @ Model.DateTimeStamp.ToLongDateString ( ) < /li > < li > < i class= '' fa fa-comments '' > < /i > @ Model.ArticleComments < /li > < li > < i class= '' fa fa-eye '' > < /i > @ Model.ArticleViews < /li > < /ul > < /div > < /div > < div class= '' col-lg-12 '' > < h6 class= '' margin-top-0 '' > @ Model.Title < br > < small class= '' font-xs '' > < i > Published by < a href= '' @ Url.Action ( `` GetProfileData '' , '' UserProfile '' , new { userid=Model.fkiUserId } ) '' > @ Model.User_FullName < /a > < /i > < /small > < /h6 > < br / > < p > @ Html.Raw ( Model.Description ) < /p > < p > @ if ( Model.FileType == `` .mp4 '' ) { < div style= '' text-align : center ; border-style : solid '' > < video controls width= '' 100 % '' > < source src= '' @ Model.FilePath '' type= '' video/mp4 '' / > < /video > < /div > } else { if ( Model.FilePath ! =null ) { < p > Click here to view file : < a href= '' @ Model.FilePath '' target= '' _blank '' > Click here < /a > < /p > } } < /div > < div class= '' col-md-12 '' > < p > & nbsp ; < /p > < hr style= '' border : solid '' / > < /div > < div class= '' row col-md-12 '' > < div class= '' col-md-12 '' id= '' articlecomments-container '' > < /div > < /div > < div class= '' row col-md-12 '' > < div class= '' col-md-12 '' id= '' articlecomments-container '' > < /div > < /div > // CUSTOM CODE // ======================================================================================================================================================================================== // Adjust vertical position var top = parseInt ( this. $ el.css ( 'top ' ) ) + self.options.scrollContainer.scrollTop ( ) ; this. $ el.css ( 'top ' , top ) ;"
"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace CastTest { class Foo { } // I want to use this kind of like a typedef , to avoid writing List < Foo > everywhere . class FooList : List < Foo > { } class Program { static void Main ( string [ ] args ) { FooList list = ( FooList ) Program.GetFooList ( ) ; } // Suppose this is some library method , and i do n't have control over the return type static List < Foo > GetFooList ( ) { return new List < Foo > ( ) ; } } }"
"typedef struct mat4f_ { float m [ 4 ] [ 4 ] ; } mat4f ; void myFunction ( const mat4f matrix ) ; [ DllImport ( `` mylib '' ) ] private static extern void myFunction ( mat4f matrix ) ; [ StructLayout ( LayoutKind.Sequential ) ] public struct mat4f { public float [ , ] m ; } //Just make an identity matrixmat4f matrix ; matrix.m = new float [ 4 , 4 ] { { 1 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 } , { 0 , 0 , 1 , 0 } , { 0 , 0 , 0 , 1 } } ; myFunction ( matrix ) ; //Call dll function"
[ Kind ] [ Name ] null Enull W4 T5 G6 Qnull Lnull V7 K2 Z0 F
[ TestFixtureSetUp ] public void Init ( ) { GetTestRepo ( false ) ; }
[ Table ( Name= '' Customers '' ) ] public class Customer { [ Column ( IsPrimaryKey=true ) ] public string CustomerID ; [ Column ] public string City ; }
"public static async Task < string > UploadToService ( HttpPostedFile file , string authCode , int id ) { var memoryStream = new MemoryStream ( ) ; file.InputStream.CopyTo ( memoryStream ) ; var requestContent = new MultipartFormDataContent ( ) ; var fileContent = new ByteArrayContent ( memoryStream.ToArray ( ) ) ; fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse ( file.ContentType ) ; requestContent.Add ( fileContent , `` file '' , file.FileName ) ; using ( var httpClient = new HttpClient ( ) ) { httpClient.BaseAddress = new Uri ( BaseUrl ) ; httpClient.DefaultRequestHeaders.Accept.Clear ( ) ; var message = await httpClient.PostAsync ( string.Format ( `` Upload ? authCode= { 0 } & id= { 1 } '' , authCode , id ) , requestContent ) ; return await message.Content.ReadAsStringAsync ( ) ; } } [ HttpPost ] public Task < HttpResponseMessage > Upload ( string authCode , int id ) { var request = Request ; var provider = new CustomMultipartFormDataStreamProvider ( root ) ; var task = request.Content.ReadAsMultipartAsync ( provider ) .ContinueWith ( o = > { // ... // Save file // ... return new HttpResponseMessage ( ) { Content = new StringContent ( `` File uploaded successfully '' ) , StatusCode = HttpStatusCode.OK } ; } ) ; return task ; } protected void Page_Load ( object sender , EventArgs e ) { if ( IsPostBack ) { var file = HttpContext.Current.Request.Files [ 0 ] ; var response = UploadToService ( file , hiddenAuthCode.Value , int.Parse ( hiddenId.Value ) ) ; } }"
public important Form newform ; public important Form newform = form1 ;
"List < MyItem > myItemList = new List < MyItem > ( ) ; myItemList.Add ( new MyItem { Vendor= '' Ven1 '' , Cost=100 , Category= '' 01 '' } ) ; myItemList.Add ( new MyItem { Vendor= '' Ven2 '' , Cost=10 , Category= '' 02 '' } ) ; myItemList.Add ( new MyItem { Vendor= '' Ven3 '' , Cost=50 , Category= '' 02 '' } ) ) ; myItemList.Add ( new MyItem { Vendor= '' Ven2 '' , Cost=40 , Category= '' 01 '' } ) ; myItemList.Add ( new MyItem { Vendor= '' Ven2 '' , Cost=20 , Category= '' 01 '' } ) ; myItemList.Add ( new MyItem { Vendor= '' Ven3 '' , Cost=30 , Category= '' 02 '' } ) ; myItemList.Add ( new MyItem { Vendor= '' Ven1 '' , Cost=10 , Category= '' 03 '' } ) ; List < MyItem > groupedItems = myItemList.GroupBy ( a= > new { a.Category , a.Vendor } ) .Select ( b= > new MyItem { Vendor = b.First ( ) .Vendor , Cost = b.Sum ( c = > c.Cost ) , Category = b.First ( ) .Category } ) .ToList ( ) ; List < MyItem > groupedItems = myItemList.GroupBy ( a= > new { a.Category.Where ( z= > z.Category.Equals ( `` 01 : ) ) , a.Vendor } ) .Select ( b= > new MyItem { Vendor = b.First ( ) .Vendor , Cost = b.Sum ( c = > c.Cost ) , Category = b.First ( ) .Category } ) .ToList ( ) ; Category = `` 01 '' , Vendor = `` N/A `` , Cost = 160Category = `` 02 '' , Vendor = `` Ven2 '' , Cost = 10Category = `` 02 '' , Vendor = `` Ven3 '' , Cost = 80Category = `` 03 '' , Vendor = `` Ven1 '' , Cost = 10"
struct Test { public static readonly Test ? Null = null ; } class Program { static void Main ( string [ ] args ) { var t = Test.Null ; } } struct Test { public static Test ? Null = > null ; }
"< select id= '' wallsSelect '' > < /select > function getWallsList ( ) { //function is called at the creation of our object var wallsSelect = document.getElementById ( `` wallsSelect '' ) ; index = 0 ; var wallsList = gameInstance.SendMessage ( 'WallCreator ' , 'GetGameObjects ' ) ; //would like to get back our list of walls and populate our Select with it for ( item in wallsList ) { var newOption = document.createElement ( `` option '' ) ; newOption.value = index ; newOption.innerHTML = item ; wallsSelect.appendChild ( newOption ) ; index++ ; } public List < string > GetGameObjects ( ) { List < string > goNames = new List < string > ( ) ; foreach ( var item in goList ) { goNames.Add ( item.name ) ; } Debug.Log ( `` Accessed GetGameObjects method . GameObject count = `` + goNames.Count.ToString ( ) ) ; //The object is instanciated and return the right count number so it does work without a problem return goNames ; }"
var item = _data.Item ; if ( item ! = null ) { // use item } if ( _data.Item is var item & & item ! = null ) { // use item } if ( _data.Item is Item item ) { // use item }
abcde1f25 a3bc4de1fg 3 added4 added2 removedg added5 removed
"//How many pixels to send per burst ( 1000 seems to be the best ) const int PixelPerSend = 1000 ; int bSize = 7 * PixelPerSend ; //Comunication thread UDP feed private void EthernetComUDP ( ) //Runs in own thread { //Connect to Server clientUDP = new SocketClientUDP ( ) ; int [ ] ImageContent = new int [ ( int ) cam.PreviewResolution.Height * ( int ) cam.PreviewResolution.Width ] ; byte [ ] PacketContent = new byte [ bSize ] ; string Pixel , l ; while ( SendingData ) { cam.GetPreviewBufferArgb32 ( ImageContent ) ; int x = 1 , y = 1 , SenderCount = 0 ; //In dire need of a speedup for ( int a = 0 ; a < ImageContent.Length ; a++ ) //this loop { Pixel = Convert.ToString ( ImageContent [ a ] , 2 ) .PadLeft ( 32 , ' 0 ' ) ; //A - removed to conserve bandwidth //PacketContent [ SenderCount ] = Convert.ToByte ( Pixel.Substring ( 0 , 8 ) , 2 ) ; //0 //R PacketContent [ SenderCount ] = Convert.ToByte ( Pixel.Substring ( 8 , 8 ) , 2 ) ; //8 //G PacketContent [ SenderCount + 1 ] = Convert.ToByte ( Pixel.Substring ( 16 , 8 ) , 2 ) ; //16 //B PacketContent [ SenderCount + 2 ] = Convert.ToByte ( Pixel.Substring ( 24 , 8 ) , 2 ) ; //24 //Coordinates //X l = Convert.ToString ( x , 2 ) .PadLeft ( 16 , ' 0 ' ) ; //X bit ( 1-8 ) PacketContent [ SenderCount + 3 ] = Convert.ToByte ( l.Substring ( 0 , 8 ) , 2 ) ; //X bit ( 9-16 ) PacketContent [ SenderCount + 4 ] = Convert.ToByte ( l.Substring ( 8 , 8 ) , 2 ) ; //Y l = Convert.ToString ( y , 2 ) .PadLeft ( 16 , ' 0 ' ) ; //Y bit ( 1-8 ) PacketContent [ SenderCount + 5 ] = Convert.ToByte ( l.Substring ( 0 , 8 ) , 2 ) ; //Y bit ( 9-16 ) PacketContent [ SenderCount + 6 ] = Convert.ToByte ( l.Substring ( 8 , 8 ) , 2 ) ; x++ ; if ( x == cam.PreviewResolution.Width ) { y++ ; x = 1 ; } SenderCount += 7 ; if ( SenderCount == bSize ) { clientUDP.Send ( ConnectToIP , PORT + 1 , PacketContent ) ; SenderCount = 0 ; } } } //Close on finish clientUDP.Close ( ) ; } BitConverter.GetBytes ( ImageContent [ a ] ) ; public string Send ( string serverName , int portNumber , byte [ ] payload ) { string response = `` Operation Timeout '' ; // We are re-using the _socket object that was initialized in the Connect method if ( _socket ! = null ) { // Create SocketAsyncEventArgs context object SocketAsyncEventArgs socketEventArg = new SocketAsyncEventArgs ( ) ; // Set properties on context object socketEventArg.RemoteEndPoint = new DnsEndPoint ( serverName , portNumber ) ; // Inline event handler for the Completed event . // Note : This event handler was implemented inline in order to make this method self-contained . socketEventArg.Completed += new EventHandler < SocketAsyncEventArgs > ( delegate ( object s , SocketAsyncEventArgs e ) { response = e.SocketError.ToString ( ) ; // Unblock the UI thread _clientDone.Set ( ) ; } ) ; socketEventArg.SetBuffer ( payload , 0 , payload.Length ) ; // Sets the state of the event to nonsignaled , causing threads to block _clientDone.Reset ( ) ; // Make an asynchronous Send request over the socket _socket.SendToAsync ( socketEventArg ) ; // Block the UI thread for a maximum of TIMEOUT_MILLISECONDS milliseconds . // If no response comes back within this time then proceed _clientDone.WaitOne ( TIMEOUT_MILLISECONDS ) ; } else { response = `` Socket is not initialized '' ; } return response ; }"
"Uri ParseUri ( string uriValue , bool throwOnError ) object LoadConfigSetting ( string key , bool allowEmpty ) ;"
static void M1 ( Person p ) { if ( p ! = null ) { var p1 = p.Name ; } } static void M2 ( Person p ) { var p1 = p ? .Name ; } IL_0007 : brfalse.s IL_0012IL_0009 : nopIL_000a : ldarg.0IL_000b : callvirt instance string ConsoleApplication4.Person : :get_Name ( ) brtrue.s IL_0007IL_0004 : ldnullIL_0005 : br.s IL_000dIL_0007 : ldarg.0IL_0008 : call instance string ConsoleApplication4.Person : :get_Name ( ) new MyClass ( ) .MyMethod ( ) ;
"public TheResponse DoSomething ( TheRequest request ) { if ( request == null ) throw new ArgumentNullException ( `` request '' ) ; BeginRequest ( request ) ; try { var result = Service.DoTheWork ( request.Data ) ; var response = Mapper.Map < TheResult , TheResponse > ( result ) ; return response ; } catch ( Exception ex ) { Logger.LogError ( `` This method failed . `` , ex ) ; throw ; } finally { EndRequest ( ) ; } }"
System.String s = new System.String ( `` Hello '' .toCharArray ( ) ) ; System.String s = `` Hello '' ;
"// Combines two envelopes and the result is stored in a new envelope.public static Envelope Combine ( Envelope a , Envelope b ) { var envelope = new Envelope ( _a.Length , 0 , 1 , 1 ) ; Combine ( _a , _b , _operation , envelope ) ; return envelope ; } // Combines two envelopes and the result is 'written ' to the specified envelopepublic static void Combine ( Envelope a , Envelope b , Envelope result ) { result.Clear ( ) ; ... }"
public static void Main ( string [ ] args ) { int x=3 ; fn ( x ) ; } static void fn ( double x ) { Console.WriteLine ( `` Double '' ) ; } static void fn ( float x ) { Console.WriteLine ( `` Float '' ) ; }
public IEnumerable < double > Generator ( List < IEnumerable < double > > wfuncs ) { var funcs = from wfunc in wfuncs select wfunc.GetEnumerator ( ) ; while ( true ) { yield return funcs.Sum ( s = > s.Current ) ; foreach ( var i in funcs ) i.MoveNext ( ) ; } }
public class ApiFixture { public TestServer ApiServer { get ; } public HttpClient HttpClient { get ; } public ApiFixture ( ) { var config = new ConfigurationBuilder ( ) .AddEnvironmentVariables ( ) .Build ( ) ; var path = Assembly.GetAssembly ( typeof ( ApiFixture ) ) .Location ; var hostBuilder = new WebHostBuilder ( ) .UseContentRoot ( Path.GetDirectoryName ( path ) ) .UseConfiguration ( config ) .UseStartup < Startup > ( ) ; ApiServer = new TestServer ( hostBuilder ) ; HttpClient = ApiServer.CreateClient ( ) ; } }
"class Some : SomeBase , ISome { } class SomeBase : ISomeBase { } interface ISome { } interface ISomeBase { }"
"class Animal { void Live ( Animal animal ) { //born ! } void Die ( Animal animal ) { //dead ! } } class Cat : Animal { } class Dog : Animal { } Animal anAnimal = new Cat ( ) ; anAnimal.Live ( ) ; anAnimal.Die ( ) ; Animal anotherAnimal = new Dog ( ) ; anotherAnimal.Live ( ) ; anotherAnimal.Die ( ) ; Action < Animal > kill = KillTheAnimal ; Cat aCat = new Cat ( ) ; KillTheCat ( kill , aCat ) ; Dog = new Dog ( ) ; KillTheDog ( kill , aDog ) ; KillTheCat ( Action < Cat > action , Cat aCat ) { action ( aCat ) ; } KillTheDog ( Action < Dog > action , Dog aDog ) { action ( aDog ) ; } void KillTheAnimal ( Animal anAnimal ) { anAnimal.Die ( ) ; }"
"// this class represents some kind of data producerpublic class DataSourceClass { public string Data { get ; set ; } public DataSourceClass ( ) { } } //this form holds the TextBox control as the Data consumerpublic partial class DatabindingTestForm : Form { public DataSourceClass ds { get ; set ; } public DatabindingTestForm ( ) { InitializeComponent ( ) ; ds = new DataSourceClass ( ) ; textBox.DataBindings.Add ( `` Text '' , ds , `` Data '' ) ; } private void checkBox_CheckedChanged ( object sender , EventArgs e ) { if ( checkBox.Checked ) ds.Data = `` CHECKED '' ; else ds.Data = `` NOT CHECKED '' ; } }"
"//5000 is the year , but what about `` 1 '' is it month or day ? , if its month//then what about the day ? DateTime time = DateTime.Parse ( `` 1.5000 '' ) ; //1.5000 does n't looks a date to me ? time.ToString ( ) ; //returns `` 1/1/5000 12:00:00 AM '' //where as if I give this string to DateTime.Parse ( ) ; time = DateTime.Parse ( `` 2341.70 '' ) ; //FormatException was unhandled//String was not recognized as a valid DateTime ."
"WhenChargeIsGreaterThanRestingChargeButLessThanChargeRestApproachStep_OnUpdate_ChargeIsSetToRestingCharge public class NeuronTests { [ Fact ] public void OnUpdate_NeuronFiresWhenChargeIsEqualToThreshold ( ) { Neuron neuron = new Neuron ( ) ; bool fired = false ; neuron.Fired += ( s , e ) = > fired = true ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; Assert.True ( fired , `` Neuron did n't fire '' ) ; } [ Fact ] public void OnUpdate_NeuronDoesntFireWhenChargeIsLessThanThreshold ( ) { Neuron neuron = new Neuron ( ) ; bool fired = false ; neuron.Fired += ( s , e ) = > fired = true ; neuron.Charge = Neuron.ChargeThreshold - 1f ; neuron.Update ( ) ; Assert.False ( fired , `` Neuron fired ! `` ) ; } [ Fact ] public void OnUpdate_NeuronFiresWhenChargeIsGreaterThanThreshold ( ) { Neuron neuron = new Neuron ( ) ; bool fired = false ; neuron.Fired += ( s , e ) = > fired = true ; neuron.Charge = Neuron.ChargeThreshold + 1f ; neuron.Update ( ) ; Assert.True ( fired , `` Neuron did n't fire '' ) ; } [ Fact ] public void WhenNeuronFires_ChargeResetsToRestingCharge ( ) { Neuron neuron = new Neuron ( ) ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; Assert.Equal ( Neuron.RestingCharge , neuron.Charge ) ; } [ Fact ] public void AfterFiring_OnUpdate_NeuronWontFire ( ) { Neuron neuron = new Neuron ( ) ; int fireCount = 0 ; neuron.Fired += ( s , e ) = > fireCount++ ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; Assert.Equal ( 1 , fireCount ) ; } [ Fact ] public void WhenResting_OnUpdate_NeuronWillFire ( ) { Neuron neuron = new Neuron ( ) ; int fireCount = 0 ; neuron.Fired += ( s , e ) = > fireCount++ ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; neuron.Charge = Neuron.ChargeThreshold ; neuron.Update ( ) ; Assert.Equal ( 2 , fireCount ) ; } [ Fact ] public void WhenChargeIsGreaterThanRestingCharge_OnUpdate_ChargeDecreasesTowardsRestingCharge ( ) { Neuron neuron = new Neuron ( ) ; neuron.Charge = Neuron.RestingCharge + ( 2 * Neuron.ChargeRestApproachStep ) ; neuron.Update ( ) ; Assert.Equal ( Neuron.RestingCharge + Neuron.ChargeRestApproachStep , neuron.Charge ) ; } [ Fact ] public void WhenChargeIsGreaterThanRestingChargeButLessThanChargeRestApproachStep_OnUpdate_ChargeIsSetToRestingCharge ( ) { Neuron neuron = new Neuron ( ) ; neuron.Charge = Neuron.RestingCharge + ( Neuron.ChargeRestApproachStep * 0.5f ) ; neuron.Update ( ) ; Assert.Equal ( Neuron.RestingCharge , neuron.Charge ) ; } }"
"class Program { public struct Point { public int x , y ; public Point ( int x , int y ) { this.x = x ; this.y = y ; } } static void Main ( string [ ] args ) { Stopwatch sw = new Stopwatch ( ) ; sw.Start ( ) ; for ( int i =0 ; i < int.MaxValue ; i++ ) { var a = new Point ( i , i ) ; } sw.Stop ( ) ; Console.WriteLine ( sw.ElapsedMilliseconds ) ; sw.Restart ( ) ; for ( int i = 0 ; i < int.MaxValue ; i++ ) { var a = new Point ( ) ; a.x = i ; a.y = i ; } sw.Stop ( ) ; Console.WriteLine ( sw.ElapsedMilliseconds ) ; Console.ReadLine ( ) ; } }"
"static void Main ( string [ ] args ) { List < User > userlist = new List < User > ( ) ; User a = new User ( ) ; a.name = `` a '' ; a.surname = `` asur '' ; a.age = 19 ; User b = new User ( ) ; b.name = `` b '' ; b.surname = `` bsur '' ; b.age = 20 ; userlist.Add ( a ) ; userlist.Add ( b ) ; var userlistdict = userlist.ToDictionary ( x = > x.name , x= > new { x.surname , x.age } ) ; if ( userlistdict.TryGetValue ( `` b '' , out var myage ) ) //myage Console.WriteLine ( myage.age ) ; } } public class User { public string name { get ; set ; } public string surname { get ; set ; } public int age { get ; set ; } }"
public string Summarize ( ) { IList < IDisplayable > displayableItems = getAllDisplayableItems ( ) ; StringBuilder summary = new StringBuilder ( ) ; foreach ( IDisplayable item in displayableItems ) { if ( item is Human ) summary.Append ( `` The person is `` + item.GetInfo ( ) ) ; else if ( item is Animal ) summary.Append ( `` The animal is `` + item.GetInfo ( ) ) ; else if ( item is Building ) summary.Append ( `` The building is `` + item.GetInfo ( ) ) ; else if ( item is Machine ) summary.Append ( `` The machine is `` + item.GetInfo ( ) ) ; } return summary.ToString ( ) ; }
"Parallel.For ( startY , endY , y = > { if ( y > = targetY & & y < targetBottom ) { Weight [ ] verticalValues = this.verticalWeights [ y ] .Values ; for ( int x = startX ; x < endX ; x++ ) { Weight [ ] horizontalValues = this.horizontalWeights [ x ] .Values ; // Destination color components Color destination = new Color ( ) ; // This is where there is too much operation complexity . foreach ( Weight yw in verticalValues ) { int originY = yw.Index ; foreach ( Weight xw in horizontalValues ) { int originX = xw.Index ; Color sourceColor = Color.Expand ( source [ originX , originY ] ) ; float weight = yw.Value * xw.Value ; destination += sourceColor * weight ; } } destination = Color.Compress ( destination ) ; target [ x , y ] = destination ; } } } ) ; /// < summary > /// Computes the weights to apply at each pixel when resizing./// < /summary > /// < param name= '' destinationSize '' > The destination section size. < /param > /// < param name= '' sourceSize '' > The source section size. < /param > /// < returns > /// The < see cref= '' T : Weights [ ] '' / > ./// < /returns > private Weights [ ] PrecomputeWeights ( int destinationSize , int sourceSize ) { IResampler sampler = this.Sampler ; float ratio = sourceSize / ( float ) destinationSize ; float scale = ratio ; // When shrinking , broaden the effective kernel support so that we still // visit every source pixel . if ( scale < 1 ) { scale = 1 ; } float scaledRadius = ( float ) Math.Ceiling ( scale * sampler.Radius ) ; Weights [ ] result = new Weights [ destinationSize ] ; // Make the weights slices , one source for each column or row . Parallel.For ( 0 , destinationSize , i = > { float center = ( ( i + .5f ) * ratio ) - 0.5f ; int start = ( int ) Math.Ceiling ( center - scaledRadius ) ; if ( start < 0 ) { start = 0 ; } int end = ( int ) Math.Floor ( center + scaledRadius ) ; if ( end > sourceSize ) { end = sourceSize ; if ( end < start ) { end = start ; } } float sum = 0 ; result [ i ] = new Weights ( ) ; List < Weight > builder = new List < Weight > ( ) ; for ( int a = start ; a < end ; a++ ) { float w = sampler.GetValue ( ( a - center ) / scale ) ; if ( w < 0 || w > 0 ) { sum += w ; builder.Add ( new Weight ( a , w ) ) ; } } // Normalise the values if ( sum > 0 || sum < 0 ) { builder.ForEach ( w = > w.Value /= sum ) ; } result [ i ] .Values = builder.ToArray ( ) ; result [ i ] .Sum = sum ; } ) ; return result ; } /// < summary > /// Represents the weight to be added to a scaled pixel./// < /summary > protected class Weight { /// < summary > /// The pixel index . /// < /summary > public readonly int Index ; /// < summary > /// Initializes a new instance of the < see cref= '' Weight '' / > class . /// < /summary > /// < param name= '' index '' > The index. < /param > /// < param name= '' value '' > The value. < /param > public Weight ( int index , float value ) { this.Index = index ; this.Value = value ; } /// < summary > /// Gets or sets the result of the interpolation algorithm . /// < /summary > public float Value { get ; set ; } } /// < summary > /// Represents a collection of weights and their sum./// < /summary > protected class Weights { /// < summary > /// Gets or sets the values . /// < /summary > public Weight [ ] Values { get ; set ; } /// < summary > /// Gets or sets the sum . /// < /summary > public float Sum { get ; set ; } } /// < summary > /// The function implements the bicubic kernel algorithm W ( x ) as described on/// < see href= '' https : //en.wikipedia.org/wiki/Bicubic_interpolation # Bicubic_convolution_algorithm '' > Wikipedia < /see > /// A commonly used algorithm within imageprocessing that preserves sharpness better than triangle interpolation./// < /summary > public class BicubicResampler : IResampler { /// < inheritdoc/ > public float Radius = > 2 ; /// < inheritdoc/ > public float GetValue ( float x ) { // The coefficient . float a = -0.5f ; if ( x < 0 ) { x = -x ; } float result = 0 ; if ( x < = 1 ) { result = ( ( ( 1.5f * x ) - 2.5f ) * x * x ) + 1 ; } else if ( x < 2 ) { result = ( ( ( ( ( a * x ) + 2.5f ) * x ) - 4 ) * x ) + 2 ; } return result ; } }"
"public void Credit ( T credit ) { Object creditObject = credit ; Object balanceObject = _balance ; Type creditType = creditObject.GetType ( ) ; Type balanceType = balanceObject.GetType ( ) ; if ( creditType.Equals ( balanceType ) ) { if ( creditType.Equals ( typeof ( double ) ) ) { balanceObject= ( double ) balanceObject + ( double ) creditObject ; } ... WITH more else if 's on int , float and decimal . } _balance = ( T ) balanceObject ; } public void Credit ( dynamic credit ) { _balance += ConvertType ( credit ) ; } public T ConvertType ( object input ) { return ( T ) Convert.ChangeType ( input , typeof ( T ) ) ; }"
"< li > < a href= '' abc '' > P1 < /a > < ul > < li > < a href = `` bcd '' > P11 < /a > < /li > < li > < a href = `` bcd '' > P12 < /a > < /li > < li > < a href = `` bcd '' > P13 < /a > < /li > < li > < a href = `` bcd '' > P14 < /a > < /li > < /ul > < /li > < li > < a href= '' abc '' > P2 < /a > < ul > < li > < a href = `` bcd '' > P21 < /a > < /li > < li > < a href = `` bcd '' > P22 < /a > < /li > < li > < a href = `` bcd '' > P23 < /a > < /li > < /ul > < /li > < li > < a href= '' abc '' > P3 < /a > < ul > < li > < a href = `` bcd '' > P31 < /a > < /li > < li > < a href = `` bcd '' > P32 < /a > < /li > < li > < a href = `` bcd '' > P33 < /a > < /li > < li > < a href = `` bcd '' > P34 < /a > < /li > < /ul > < /li > < li > < a href= '' abc '' > P4 < /a > < ul > < li > < a href = `` bcd '' > P41 < /a > < /li > < li > < a href = `` bcd '' > P42 < /a > < /li > < /ul > < /li > List < class1 > string parent ; List < string > children ; public List < class1 > getElements ( ) { List < class1 > temp = new List < class1 > ( ) ; foreach ( // < a > element in string ) { //in the recursive loop List < string > str = new List < string > ( ) ; str.add ( `` P11 '' ) ; str.add ( `` P12 '' ) ; str.add ( `` P13 '' ) ; str.add ( `` P14 '' ) ; class1 obj = new class1 ( `` P1 '' , str ) ; temp.add ( obj ) ; } return temp ; }"
public subctrl.SubCtrl SUBCTRL { get { return this.subCtrl1 ; } }
"# r `` PATH_TO_SOLUTION\Project\bin\Debug\netstandard2.0\binary.dll '' # r `` PATH_TO_SOLUTION\ProjectDependency\bin\Debug\netstandard2.0\dependent.dll '' # r `` nuget : Some.Dependency , 11.0.2 '' # r `` nuget : Some.Other.Dependency , 10.0.2 '' # r `` nuget : Some.Third.Dependency , 9.0.2 '' using Project ;"
public ActionResult Index ( ) { var model = _fooService.GetAll ( ) ; return View ( model ) ; } @ foreach ( var item in Model ) { < tr > < td > @ item.Bar < /td > < /tr > }
"/// < summary > /// The reconstruct in single account./// < /summary > /// < param name= '' programId '' > /// The program id./// < /param > /// < returns > /// The < see cref= '' Dictionary '' / > . // < -- here the `` Dictionary '' is underlined/// < /returns > Dictionary < long , Account > ReconstructInSingleAccount ( long programId ) { }"
"public class SetupViewFactory { public SetupView CreateView ( DatabaseModel databaseModel , SettingsModel settingsModel , ViewUtilities viewUtilities ) { var setupViewModel = new SetupViewModel ( databaseModel , settingsModel , viewUtilities ) ; var setupView = new SetupView ( ) ; setupView.DataContext = setupViewModel ; return setupView ; } } public class CarFactory { public static Car buildCar ( ) { return new Car ( new SimpleEngine ( ) ) ; } }"
LoadTest1000_1LoadTest1000_10LoadTest1000_1000LoadTest1000_2LoadTest1000_20 [ etc ] LoadTest1000_1LoadTest1000_2LoadTest1000_10LoadTest1000_20LoadTest1000_1000LoadTest1000_2000 [ etc ]
Logger logger = new Logger ( ) ; System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch ( ) ; logger.LogInformation ( `` Calling SomeObject.SomeMethod at `` + DateTime.Now.ToString ( ) ) ; stopWatch.Start ( ) ; // This is the method I 'm interested in.SomeResponse response = someObject.SomeMethod ( someParam ) ; stopWatch.Stop ( ) ; logger.LogInformation ( `` SomeObject.SomeMethod returned at `` + DateTime.Now.ToString ( ) ) ; logger.LogInformation ( `` SomeObject.SomeMethod took `` + stopWatch.ElapsedMilliseconds + `` milliseconds . `` ) ;
"private void projectToolStripMenuItem_Click ( object sender , EventArgs e ) { if ( projectToolStripMenuItem.Checked ) { projectToolStripMenuItem.Checked = false ; if ( ! projectForm.IsDisposed ) projectForm.Hide ( ) ; } else { if ( projectForm.IsDisposed ) projectForm = new frmProject ( ) ; projectForm.Show ( dockPanel , DockState.DockRight ) ; projectToolStripMenuItem.Checked = true ; } } private void logginToolStripMenuItem_Click ( object sender , EventArgs e ) { if ( logginToolStripMenuItem.Checked ) { logginToolStripMenuItem.Checked = false ; if ( ! outputForm.IsDisposed ) outputForm.Hide ( ) ; } else { if ( outputForm.IsDisposed ) outputForm = new frmOutput ( ) ; outputForm.Show ( dockPanel , DockState.DockBottom ) ; logginToolStripMenuItem.Checked = true ; } } private void refactoredMethod ( TooStripMenuItem menuItem , DockContent frmName ) { if ( menuItem.Checked ) { menuItem.Checked = false ; if ( ! frmName.IsDisposed ) frmName.Hide ( ) ; } else { if ( frmName.IsDisposed ) frmName= new frmProject ( ) ; // Still Problematic frmName.Show ( dockPanel , DockState.DockRight ) ; menuItem.Checked = true ; } }"
public override object ProvideValue ( IServiceProvider provider ) { var service = provider.GetService ( typeof ( IProvideValueTarget ) ) as IProvideValueTarget ; if ( service ! = null ) { var target = service.TargetObject as DependencyObject ; var property = service.TargetProperty as DependencyProperty ; // Not sure what to do with the target and propery here ... } }
dotnet add package Hangfiredotnet add package Hangfire.AspNetCore
"public Foo Create ( ) { AppDomainSetup appDomainSetup = new AppDomainSet { ApplicationBase = @ '' z : \SomePath '' } AppDomain appDomain = AppDomain.CreateDomain ( `` DomainName '' , null , appDomainSetup ) ; return ( Foo ) appDomain.CreateInstanceAndUnwrap ( `` MyAssembly '' , `` MyClass '' ) ; } Foo myFoo = Create ( ) ; public class Foo { public string appDomainName { get { return AppDomain.CurrentDomain.FriendlyName ; } } } public string GetAppDomainNameWithDotNetWitchcraft ( Foo myFoo ) { // Insert voodoo here . }"
"public IList < TEntity > GetList ( Func < TEntity , bool > where , params Expression < Func < TEntity , object > > [ ] navigationProperties ) { using ( var dbContextScope = contextScopeFactory.CreateReadOnly ( ) ) { IQueryable < TEntity > dbQuery = Context.Set < TEntity > ( ) .AsQueryable ( ) ; foreach ( Expression < Func < TEntity , object > > navigationProperty in navigationProperties ) dbQuery = dbQuery.Include < TEntity , object > ( navigationProperty ) ; var list = dbQuery .AsNoTracking ( ) .Where ( where ) ; Context.Database.Log = s = > Debug.WriteLine ( s ) ; return list.ToList < TEntity > ( ) ; } } var repository = repositoryFactory.Get < Context , Entity > ( ) ; var items = repository.GetList ( x = > x.FakeID < = 10 ) ;"
"Connecting to foobarPostGres:5432 ( warmup ) : from someIp : 19.98msConnecting to foobarPostGres:5432 : from someIp : 1.65msConnecting to foobarPostGres:5432 from someIp : 1.18msConnecting to foobarPostGres:5432 : from someIp : 1.23msConnecting to foobarPostGres:5432 : from someIp : 1.06ms Attempting to establish a connection ... Elapsed ms : 644.1334999799728RESP : { ' ? column ? ' : 1 } Elapsed ms : 22.76109904050827RESP : { ' ? column ? ' : 1 } Elapsed ms : 21.984400033950806RESP : { ' ? column ? ' : 1 } Elapsed ms : 26.043799996376038RESP : { ' ? column ? ' : 1 } Elapsed ms : 22.538798987865448RESP : { ' ? column ? ' : 1 } 5:13:32 PM : SLOW QUERY , CONN TIME : 4153 , QUERY TIME : 18 5:13:53 PM : SLOW QUERY , CONN TIME : 707 , QUERY TIME : 17 5:14:14 PM : SLOW QUERY , CONN TIME : 589 , QUERY TIME : 165:14:35 PM : SLOW QUERY , CONN TIME : 663 , QUERY TIME : 18 5:14:56 PM : SLOW QUERY , CONN TIME : 705 , QUERY TIME : 16 public static string CONNECTION_STRING { get { return $ '' Server= { HOST } ; User Id= { USER } ; Database= { DB_NAME } ; Port= { PORT } ; Password= { PWD } ; SSLMode=Prefer '' ; } } // GET api/health/getdbhealthselectone [ HttpGet ] [ Route ( `` getdbhealthselectone '' ) ] public async Task < IActionResult > GetDbHealthSelectOne ( ) { int testData = await _healthCheckRepo.RunHealthCheckSelectOne ( ) ; return Ok ( testData ) ; } public async Task < int > RunHealthCheckSelectOne ( ) { await using var conn = new NpgsqlConnection ( AzureDbConnectionInfo.CONNECTION_STRING ) ; var connTimer = System.Diagnostics.Stopwatch.StartNew ( ) ; // TODO : Remove this testing line await conn.OpenAsync ( ) ; connTimer.Stop ( ) ; // TODO : Remove this testing line var msToConnect = connTimer.ElapsedMilliseconds ; // TODO : Remove this testing line int testData = 999 ; var jobsQueryTimer = System.Diagnostics.Stopwatch.StartNew ( ) ; // TODO : Remove this testing line0 await using ( var cmd = new NpgsqlCommand ( `` SELECT 1 '' , conn ) ) await using ( var reader = await cmd.ExecuteReaderAsync ( ) ) while ( await reader.ReadAsync ( ) ) { testData = reader.GetInt32 ( 0 ) ; } ; jobsQueryTimer.Stop ( ) ; // TODO : Remove this testing line var msToQuery = jobsQueryTimer.ElapsedMilliseconds ; // TODO : Remove this testing line LogQueryIfSlow ( msToConnect , msToQuery , _logger ) ; // TODO : Remove this testing line return testData ; } const { Pool , Client } = require ( 'pg ' ) ; const { performance } = require ( 'perf_hooks ' ) ; const pool = new Pool ( { user : 'SECRET ' , host : 'SECRET ' , database : 'SECRET ' , password : 'SECRET ' , port : 5432 , } ) function runQuery ( pool ) { var t0 = performance.now ( ) ; pool.query ( 'SELECT 1 ' , ( err , res ) = > { if ( err ) { console.log ( 'ERROR : ' , err.stack ) } else { console.log ( 'RESP : ' , res.rows [ 0 ] ) } var t1 = performance.now ( ) ; console.log ( 'Elapsed ms : ' , t1-t0 ) ; //pool.end ( ) } ) ; } setInterval ( ( ) = > { runQuery ( pool ) } , 5000 ) ; CONN : 1710 QUERY : 18CONN : 0 QUERY : 16CONN : 0 QUERY : 16CONN : 0 QUERY : 17CONN : 0 QUERY : 16CONN : 0 QUERY : 23CONN : 0 QUERY : 16CONN : 0 QUERY : 16CONN : 0 QUERY : 23CONN : 0 QUERY : 16CONN : 0 QUERY : 16"
if ( env.IsDevelopment ( ) ) { spa.UseAngularCliServer ( npmScript : `` start '' ) ; }
new JsonMediaTypeFormatter ( ) .SerializerSettings ; < assemblyIdentity name= '' Newtonsoft.Json '' publicKeyToken= '' 30ad4fe6b2a6aeed '' culture= '' neutral '' / > < bindingRedirect oldVersion= '' 4.0.0.0-5.0.0.0 '' newVersion= '' 9.0.0.0 '' / > < assemblyIdentity name= '' Newtonsoft.Json '' publicKeyToken= '' 30ad4fe6b2a6aeed '' culture= '' neutral '' / > < bindingRedirect oldVersion= '' 8.0.0.0-9.0.0.0 '' newVersion= '' 9.0.0.0 '' / >
"// Requires project reference to Microsoft.VisualBasicusing Microsoft.VisualBasic.FileIO ; class FileProgress { static void Main ( ) { string sourcePath = @ '' C : \Users\public\documents\ '' ; string destinationPath = @ '' C : \testFolder '' ; FileSystem.CopyDirectory ( sourcePath , destinationPath , UIOption.AllDialogs ) ; } }"
class MySuperClass { } class A : MySuperClass { } class B : MySuperClass { } MySuperClass p = myCondition ? new A ( ) : new B ( ) ;
bool b = false ; if ( @ b ) { }
"public class Country { public virtual int Id { get ; set ; } [ Required ] public virtual string Name { get ; set ; } public virtual ICollection < City > Cities { get ; set ; } } public class City { public virtual int Id { get ; set ; } [ Required ] public virtual string Name { get ; set ; } public virtual Country Country { get ; set ; } public virtual int CountryId { get ; set ; } } class TestContext : DbContext { public DbSet < City > Cities { get ; set ; } public DbSet < Country > Countries { get ; set ; } } static class Program { static void Main ( ) { Database.SetInitializer ( new DropCreateDatabaseIfModelChanges < TestContext > ( ) ) ; using ( var db = new TestContext ( ) ) { db.Database.Initialize ( true ) ; db.Database.Log = Console.Write ; var country = db.Countries.Create ( ) ; country.Name = `` France '' ; db.Countries.AddOrUpdate ( a = > a.Name , country ) ; var city = db.Cities.Create ( ) ; city.Name = `` Paris '' ; city.Country = country ; db.Cities.AddOrUpdate ( q = > q.Name , city ) ; db.SaveChanges ( ) ; } } }"
"// Create table schemaCREATE TABLE `` mytable '' ( `` field1 '' TEXT , `` field2 '' TEXT , `` field3 '' TEXT , `` field4 '' TEXT , `` field5 '' TEXT , `` field6 '' bit , `` field7 '' TEXT , `` field8 '' TEXT , `` field9 '' TEXT , `` field10 '' TEXT , `` field11 '' DateTime ) var result= sqliteConnection.Query < TestItem > ( `` Select * from mytable '' ) ; INSERT INTO `` main '' . `` mytable '' ( `` field1 '' , `` field2 '' , `` field3 '' , `` field4 '' , `` field5 '' , `` field6 '' , `` field7 '' , `` field8 '' , `` field9 '' , `` field10 '' , `` field11 '' ) VALUES ( '750eb223-2993-4d85-9d4f-3e8689e9baa7 ' , 'some value ' , `` , 'some value ' , 'some value ' , ' 1 ' , '84 ' , 'ae35e1e1-dd4c-4e49-a76c-d577f417bf9a ' , 'some value ' , 'HOME.aspx ' , '2020/01/20 17:38 ' ) ; INSERT INTO `` main '' . `` mytable '' ( `` field1 '' , `` field2 '' , `` field3 '' , `` field4 '' , `` field5 '' , `` field6 '' , `` field7 '' , `` field8 '' , `` field9 '' , `` field10 '' , `` field11 '' ) VALUES ( '750eb223-2993-4d85-9d4f-3e8689e9baa7 ' , 'some value ' , 'asdf ' , 'some value ' , 'some value ' , ' 1 ' , '32 ' , 'a1cd1b8f-95f6-4b03-8d54-f904c21749ac ' , 'HOME.aspx ' , 'HOME.aspx ' , '2020/01/20 17:38 ' ) ; INSERT INTO `` main '' . `` mytable '' ( `` field1 '' , `` field2 '' , `` field3 '' , `` field4 '' , `` field5 '' , `` field6 '' , `` field7 '' , `` field8 '' , `` field9 '' , `` field10 '' , `` field11 '' ) VALUES ( '750eb223-2993-4d85-9d4f-3e8689e9baa7 ' , 'some value ' , 'some value ' , 'some value ' , 'some value ' , ' 1 ' , '99 ' , 'b9e63bfd-c73e-4e9a-b3e7-30ae49d8a002 ' , 'CALLSS.aspx ' , 'CALLSS.aspx ' , '2020/01/20 17:38 ' ) ; Error parsing column 10 ( field11=HOME.aspx - String ) String was not recognized as a valid DateTime . at Dapper.SqlMapper.ThrowDataException ( Exception ex , Int32 index , IDataReader reader , Object value ) in C : \projects\dapper\Dapper\SqlMapper.cs : line 3609 at Dapper.SqlMapper. < QueryImpl > d__138 ` 1.MoveNext ( ) in C : \projects\dapper\Dapper\SqlMapper.cs : line 1100 at System.Collections.Generic.List ` 1..ctor ( IEnumerable ` 1 collection ) at System.Linq.Enumerable.ToList [ TSource ] ( IEnumerable ` 1 source ) at Dapper.SqlMapper.Query [ T ] ( IDbConnection cnn , String sql , Object param , IDbTransaction transaction , Boolean buffered , Nullable ` 1 commandTimeout , Nullable ` 1 commandType ) in C : \projects\dapper\Dapper\SqlMapper.cs : line 723 at Tzunami.LinkResolver.DatabaseMigration.Models.DBMigrator. < MigrateDeploymentListItemAsync > d__5.MoveNext ( ) in C : \Users\surendra\source\repos\Tzunami.LinkResolver.MigrationTool\Tzunami.LinkResolver.DatabaseMigration\Models\DBMigrator.cs : line 77 public class TestItem { public string Field1 { get ; set ; } public string Field2 { get ; set ; } public string Field3 { get ; set ; } public string Field4 { get ; set ; } public string Field5 { get ; set ; } public string Field6 { get ; set ; } public string Field7 { get ; set ; } public string Field8 { get ; set ; } public string Field9 { get ; set ; } public string Field10 { get ; set ; } public string Field11 { get ; set ; } }"
"public SomeController ( IServiceOne serviceOne , IServiceTwo serviceTwo , ILoggingService loggingService , IGeospatialService geoSpatialService ) { // copy to class variables . } public SomeController ( ICoreServicesGroup coreGroup , ISomeNameForServicesGroup serviceGroup ) { // copy to class variables . }"
changes.Where ( p = > Evaluate ( p ) ) .Subscribe ( p = > { // Do something } ) ;
"public class CompositeData { [ Key ] public Guid PKey { get ; set ; } public string CompositeName { get ; set ; } public string Identity { get ; set ; } public Product CurrentProduct { get ; set ; } //Product is an auto-generated EntityObject class public CompositeData ( ) { PKey = Guid.NewGuid ( ) ; } } [ EnableClientAccess ( ) ] public class LocalDomainService : DomainService { public IEnumerable < CompositeData > GetData ( ) { List < CompositeData > listData = new List < CompositeData > ( ) ; // ... return listData ; } } domService.Load ( domService.GetDataQuery ( ) , GetDataCompleted , null ) ; private void GetDataCompleted ( LoadOperation < CompositeData > compData ) { foreach ( CompositeData cdItem in compData.Entities ) { // cdItem.CompositeName is accessible // cdItem.CurrentProduct is not accessible ! } } [ EdmEntityTypeAttribute ( NamespaceName= '' MyDBModel '' , Name= '' Product '' ) ] [ Serializable ( ) ] [ DataContractAttribute ( IsReference=true ) ] public partial class Product : EntityObject { //.. } /// < summary > /// The 'Product ' entity class . /// < /summary > [ DataContract ( Namespace= '' http : //schemas.datacontract.org/2004/07/SilverlightProject '' ) ] public sealed partial class Product : Entity { //.. }"
"ID , Name1 , Unnamed"
public struct Roman { public const string One = `` I '' ; public const string Five = `` V '' ; public const string Ten = `` X '' ; } public static class Roman { public const string One = `` I '' ; public const string Five = `` V '' ; public const string Ten = `` X '' ; }
"var list = new List < int > ( ) { 1,2,3,4,5 } ; list.skip ( 2 ) .take ( 2 ) ; // returns ( 3,4 ) a = [ 1,2,3,4,5 ] a.skip ( 2 ) .take ( 2 ) # take exists , skip does n't a.last ( a.length - 2 ) .take ( 2 ) ( a - a.first ( 2 ) ) .take ( 2 ) a [ 2 ... a.length ] .take ( 2 )"
"private async void GameCenterView_OnDataContextChanged ( object sender , EventArgs e ) { // Load data ... // Handle other pivots // This is the problem pivot if ( ViewModel.CurrentGame.SportTypeId == 1 ) { _hasLineups = ViewModel.CurrentGame.HasLineups.GetValueOrDefault ( ) ; HasFieldPositions = ViewModel.CurrentGame.HasFieldPositions.GetValueOrDefault ( ) ; // I only add the pivot when I need it , otherwise , it wo n't be shown if ( _hasLineups ) { if ( MainPivot.Items ! = null ) MainPivot.Items.Add ( LineupPivotItem ) ; } if ( HasFieldPositions ) { // Here I place all the items in their proper place on the canvas ArrangeLineup ( ViewModel.TeamOneLineup , TeamOneCanvas ) ; ArrangeLineup ( ViewModel.TeamTwoLineup , TeamTwoCanvas ) ; } } // Handle other pivots } private void ArrangeLineup ( ObservableCollection < PlayerInLineupViewModel > teamLineup , RationalCanvas canvas ) { if ( teamLineup == null ) return ; foreach ( var player in teamLineup ) { var control = new ContentControl { Content = player , ContentTemplate = LinupPlayerInFieldDataTemplate } ; control.SetValue ( RationalCanvas.RationalTopProperty , player.Player.FieldPositionLine ) ; control.SetValue ( RationalCanvas.RationalLeftProperty , player.Player.FieldPositionSide ) ; canvas.Children.Add ( control ) ; } } protected override Size ArrangeOverride ( Size finalSize ) { if ( finalSize.Height == 0 || finalSize.Width == 0 ) { return base.ArrangeOverride ( finalSize ) ; } var yRatio = finalSize.Height/100.0 ; var xRatio = finalSize.Width/100.0 ; foreach ( var child in Children ) { var top = ( double ) child.GetValue ( TopProperty ) ; var left = ( double ) child.GetValue ( LeftProperty ) ; if ( top > 0 || left > 0 ) continue ; var rationalTop = ( int ) child.GetValue ( RationalTopProperty ) ; var rationalLeft = ( int ) child.GetValue ( RationalLeftProperty ) ; if ( InvertY ) rationalTop = 100 - rationalTop ; if ( InvertX ) rationalLeft = 100 - rationalLeft ; child.SetValue ( TopProperty , rationalTop*yRatio ) ; child.SetValue ( LeftProperty , rationalLeft*xRatio ) ; } return base.ArrangeOverride ( finalSize ) ; }"
"int [ , ] [ ] i ; // declares an 2D - array where each element is an int [ ] ! // you have to use it like this : i = new int [ 2,3 ] [ ] ; i [ 1,2 ] = new int [ 0 ] ; Console.WriteLine ( typeof ( int [ , ] [ ] ) .Name ) ; // prints `` Int32 [ ] [ , ] ''"
class SomeClass { public int SomeProperty ; public void SomeOperation ( ) { Contract.Ensures ( `` SomeProperty 's value has not changed . '' ) ; // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ // How can I write this post-condition ? } } ;
byte [ ] HexStringToByteArray ( string hex ) { if ( hex.Length % 2 == 1 ) throw new Exception ( `` The binary key can not have an odd number of digits '' ) ; byte [ ] arr = new byte [ hex.Length > > 1 ] ; for ( int i = 0 ; i < hex.Length > > 1 ; ++i ) // Error in this line { arr [ i ] = ( byte ) ( ( GetHexVal ( hex [ i < < 1 ] ) < < 4 ) + ( GetHexVal ( hex [ ( i < < 1 ) + 1 ] ) ) ) ; } return arr ; } Error 1 : The variable ' i ' can not be used with type argumentsError 2 : 'hex ' is a variable but is used like a type for ( int i = 0 ; i < ( hex.Length > > 1 ) ; ++i )
MyString.Where ( c = > c == Environment.NewLine ) .Count ( ) ;
"bool ShouldGrantPermission ( ISecurityService security , User user , Item item ) { return user ! = null & & item ! = null & & user.Id == item.AuthorId & & security.Does ( user ) .Have ( MyPermission ) .On ( item ) ; }"
public static void F ( ) { var rnd1 = new Random ( ) ; var rnd2 = new Random ( ) ; Action a1 = ( ) = > G ( rnd1 ) ; Action a2 = ( ) = > G ( rnd2 ) ; } private static void G ( Random r ) { }
private static object _dbLock = new object ( ) ; public static void LoadData ( ) { lock ( _dbLock ) { //Load data from the database } } public static string ReadData ( Guid key ) { lock ( _dbLock ) { //Lookup key in data and return value } }
"public void AddScriptToPage ( params string [ ] scripts ) { /* ... */ } public void AddScriptToPage ( string href , string elementId ) { /* ... */ } AddScriptToPage ( `` dork.js '' , `` foobar.js '' ) ;"
"< Report > < Row > < Column name= '' A long column name ! `` > hey < /Column > < Column name= '' Another long column name ! ! `` > 7 < /Column > < Column name= '' A third freaking long column name ! ! ! `` > hax < /Column > < Column name= '' Holy cow , can column names really be this long ! ? `` > true < /Column > < /Row > < Row > < Column name= '' A long column name ! `` > yo < /Column > < Column name= '' Another long column name ! ! `` > 53 < /Column > < Column name= '' A third freaking long column name ! ! ! `` > omg < /Column > < Column name= '' Holy cow , can column names really be this long ! ? `` > true < /Column > < /Row > < ! -- ... ~200k more rows go here ... -- > < /Report > class Report { public Row [ ] Rows { get ; set ; } } class Row { public Column [ ] Columns { get ; set ; } } class Column { public string Name { get ; set ; } public string Value { get ; set ; } }"
"... < FirstName > D'Arcy < /FirstName > ... ... < FirstName > D & quot ; Arcy < /FirstName > ... static XmlSerializer RequestSerializer = new XmlSerializer ( typeof ( Message ) ) ; static XmlSerializer ResponseSerializer = new XmlSerializer ( typeof ( int ) , new XmlRootAttribute ( `` int '' ) { Namespace = `` http : //schemas.microsoft.com/2003/10/Serialization/ '' } ) ; static XmlWriterSettings WriterSettings = new XmlWriterSettings { OmitXmlDeclaration = true , CloseOutput = false , Encoding = new UTF8Encoding ( false ) } ; private static int PostData ( Message msg ) { var request = ( HttpWebRequest ) WebRequest.Create ( `` https : // ... '' ) ; request.ContentType = `` text/xml ; charset=UTF-8 '' ; request.Method = `` POST '' ; using ( var writer = XmlWriter.Create ( request.GetRequestStream ( ) , WriterSettings ) ) RequestSerializer.Serialize ( writer , msg ) ; using ( var response = ( HttpWebResponse ) request.GetResponse ( ) ) using ( var responseStream = response.GetResponseStream ( ) ) { return ( int ) ResponseSerializer.Deserialize ( responseStream ) ; } } [ XmlRoot ( `` Order '' , Namespace = `` http : // ... '' ) ] public class Message { public string City ; public string Coupon ; public DateTime CreateDate ; public string Email ; public string FirstName ; public string Language ; public string LastName ; public int OrderID ; public string PostalCode ; public string ProductID ; public string Province ; public string StreetAddress1 ; public string StreetAddress2 ; }"
"< asp : checkboxlist runat= '' server '' EnableViewState= '' true '' id= '' ColumnsList '' / > public override void OnLoad ( ) { if ( ! this.IsPostBack ) { this.ColumnsList.Items.Add ( new ListItem { Text= `` Text1 '' , Value = `` value1 '' } ) ; this.ColumnsList.Items.Add ( new ListItem { Text= `` Text2 '' , Value = `` value2 '' } ) ; } } private void Button_Click ( object sender , EventArgs eventArgs ) { // Count is 0 instead of 2 var count = this.ColumnsList.Items.Count ; foreach ( ListItem item in this.ColumnsList.Items ) { var selected = item.Selected ; // add selected to a list..etc } }"
"class Program { static void Main ( string [ ] args ) { object objArr = new int [ 0 ] ; int [ ] intArr = new int [ 0 ] ; string arrS = `` [ 1,2 ] '' ; object objThatIsObjectArray = Serialize ( objArr , arrS ) ; //I want this to evaluate as int [ ] object objThatIsIntArray = Serialize ( intArr , arrS ) ; //this evaluates as int [ ] Console.Read ( ) ; } public static object Serialize < T > ( T targetFieldForSerialization , string value ) { return value.FromJson < T > ( ) ; } } public static class JSONExtensions { public static TType FromJson < TType > ( this string json ) { using ( var ms = new MemoryStream ( Encoding.Default.GetBytes ( json ) ) ) { var ser = new DataContractJsonSerializer ( typeof ( TType ) ) ; var target = ( TType ) ser.ReadObject ( ms ) ; ms.Close ( ) ; return target ; } } }"
"public static double [ , ] LinearConvolutionSpatial ( double [ , ] image , double [ , ] mask ) { int maskWidth = mask.GetLength ( 0 ) ; int maskHeight = mask.GetLength ( 1 ) ; double [ , ] paddedImage = ImagePadder.Pad ( image , maskWidth ) ; double [ , ] conv = Convolution.ConvolutionSpatial ( paddedImage , mask ) ; int cropSize = ( maskWidth/2 ) ; double [ , ] cropped = ImageCropper.Crop ( conv , cropSize ) ; return conv ; } static double [ , ] ConvolutionSpatial ( double [ , ] paddedImage1 , double [ , ] mask1 ) { int imageWidth = paddedImage1.GetLength ( 0 ) ; int imageHeight = paddedImage1.GetLength ( 1 ) ; int maskWidth = mask1.GetLength ( 0 ) ; int maskHeight = mask1.GetLength ( 1 ) ; int convWidth = imageWidth - ( ( maskWidth / 2 ) * 2 ) ; int convHeight = imageHeight - ( ( maskHeight / 2 ) * 2 ) ; double [ , ] convolve = new double [ convWidth , convHeight ] ; for ( int y = 0 ; y < convHeight ; y++ ) { for ( int x = 0 ; x < convWidth ; x++ ) { int startX = x ; int startY = y ; convolve [ x , y ] = Sum ( paddedImage1 , mask1 , startX , startY ) ; } } Rescale ( convolve ) ; return convolve ; } static double Sum ( double [ , ] paddedImage1 , double [ , ] mask1 , int startX , int startY ) { double sum = 0 ; int maskWidth = mask1.GetLength ( 0 ) ; int maskHeight = mask1.GetLength ( 1 ) ; for ( int y = startY ; y < ( startY + maskHeight ) ; y++ ) { for ( int x = startX ; x < ( startX + maskWidth ) ; x++ ) { double img = paddedImage1 [ x , y ] ; double msk = mask1 [ x - startX , y - startY ] ; sum = sum + ( img * msk ) ; } } return sum ; } static void Rescale ( double [ , ] convolve ) { int imageWidth = convolve.GetLength ( 0 ) ; int imageHeight = convolve.GetLength ( 1 ) ; double maxAmp = 0.0 ; for ( int j = 0 ; j < imageHeight ; j++ ) { for ( int i = 0 ; i < imageWidth ; i++ ) { maxAmp = Math.Max ( maxAmp , convolve [ i , j ] ) ; } } double scale = 1.0 / maxAmp ; for ( int j = 0 ; j < imageHeight ; j++ ) { for ( int i = 0 ; i < imageWidth ; i++ ) { double d = convolve [ i , j ] * scale ; convolve [ i , j ] = d ; } } } public static Bitmap ConvolveInFrequencyDomain ( Bitmap image1 , Bitmap kernel1 ) { Bitmap outcome = null ; Bitmap image = ( Bitmap ) image1.Clone ( ) ; Bitmap kernel = ( Bitmap ) kernel1.Clone ( ) ; //linear convolution : sum . //circular convolution : max uint paddedWidth = Tools.ToNextPow2 ( ( uint ) ( image.Width + kernel.Width ) ) ; uint paddedHeight = Tools.ToNextPow2 ( ( uint ) ( image.Height + kernel.Height ) ) ; Bitmap paddedImage = ImagePadder.Pad ( image , ( int ) paddedWidth , ( int ) paddedHeight ) ; Bitmap paddedKernel = ImagePadder.Pad ( kernel , ( int ) paddedWidth , ( int ) paddedHeight ) ; Complex [ , ] cpxImage = ImageDataConverter.ToComplex ( paddedImage ) ; Complex [ , ] cpxKernel = ImageDataConverter.ToComplex ( paddedKernel ) ; // call the complex function Complex [ , ] convolve = Convolve ( cpxImage , cpxKernel ) ; outcome = ImageDataConverter.ToBitmap ( convolve ) ; outcome = ImageCropper.Crop ( outcome , ( kernel.Width/2 ) +1 ) ; return outcome ; }"
"< Project Sdk= '' Microsoft.NET.Sdk '' > < PropertyGroup Label= '' Globals '' > < SccProjectName > SAK < /SccProjectName > < SccProvider > SAK < /SccProvider > < SccAuxPath > SAK < /SccAuxPath > < SccLocalPath > SAK < /SccLocalPath > < /PropertyGroup > < PropertyGroup > < TargetFramework > netstandard1.6 < /TargetFramework > < /PropertyGroup > < ItemGroup > < PackageReference Include= '' System.Runtime '' Version= '' 4.3.0 '' / > < PackageReference Include= '' System.Runtime.Serialization.Primitives '' Version= '' 4.3.0 '' / > < PackageReference Include= '' System.Runtime.Serialization.Xml '' Version= '' 4.3.0 '' / > < /ItemGroup > < /Project > using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Runtime.CompilerServices ; using System.Runtime.Serialization ; using System.Text ; namespace DS.Publications.Common { [ DataContract ( Namespace = Constants.NamespaceConstants.DataContractNamespace ) ] public class Person : INotifyPropertyChanged { private string _Title = string.Empty ; [ DataMember ] public string Title { get { return _Title ; } set { Set ( ref _Title , value ) ; } } private string _ForeName ; [ DataMember ] public string ForeName { get { return _ForeName ; } set { Set ( ref _ForeName , value ) ; } } private string _LastName ; [ DataMember ] public string LastName { get { return _LastName ; } set { Set ( ref _LastName , value ) ; } } public event PropertyChangedEventHandler PropertyChanged ; private void OnPropertyChanged ( string propertyName ) { this.PropertyChanged ? .Invoke ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } private bool Set < T > ( ref T field , T value , [ CallerMemberName ] string propertyName = null ) { if ( field == null || ! field.Equals ( value ) ) { field = value ; this.OnPropertyChanged ( propertyName ) ; return true ; } return false ; } } }"
"[ Flags ] enum MyEnum { first = 1 , second = 2 , third = 4 , fourth = 8 } ; obj1.a = first , obj1.b = 5obj2.a = first | second , obj2.b = 3 first sum = 8second sum = 3"
[ DllImport ( `` kernel32.dll '' ) ] public static extern IntPtr LoadLibrary ( string path ) ;
"< ? xml version= '' 1.0 '' encoding= '' iso-8859-1 '' ? > < newsitem itemid= '' 1 '' id= '' root '' date= '' 1996-08-20 '' xml : lang= '' en '' > < title > A title < /title > < headline > A headline < /headline > < dateline > A dateline < /dateline > < text > Some text < /text > < metadata > < codes class= '' '' > < code code= '' '' > < editdetail attribution= '' '' / > < /code > < /codes > < dc element= '' dc.date.created '' value= '' '' / > < dc element= '' dc.publisher '' value= '' '' / > < dc element= '' dc.date.published '' value= '' '' / > < dc element= '' dc.source '' value= '' '' / > < dc element= '' dc.creator.location '' value= '' '' / > < dc element= '' dc.creator.location.country.name '' value= '' '' / > < dc element= '' dc.source '' value= '' '' / > < /metadata > < /newsitem > XElement dummy = new XElement ( `` dummy '' ) ; var query = from article in newsdoc.Elements ( `` newsitem '' ) .DefaultIfEmpty ( dummy ) select new { NewsItemID = ( int ) article.Attribute ( `` itemid '' ) , Date = ( DateTime ) article.Attribute ( `` date '' ) , Title = ( string ) article.Element ( `` title '' ) , Headline = ( string ) article.Element ( `` headline '' ) , ByLine = ( string ) article.Element ( `` byline '' ) , DateLine = ( string ) article.Element ( `` dateline '' ) , NewsText = ( string ) article.Element ( `` text '' ) , Publisher = ( string ) article.Elements ( `` metadata '' ) .Elements ( `` dc '' ) .Where ( x = > ( string ) x.Attribute ( `` element '' ) == `` dc.publisher '' ) .Attributes ( `` value '' ) .DefaultIfEmpty ( ) .ElementAt ( 0 ) , DatePublished = ( DateTime ) article.Elements ( `` metadata '' ) .Elements ( `` dc '' ) .Where ( x = > ( string ) x.Attribute ( `` element '' ) == `` dc.date.published '' ) .Attributes ( `` value '' ) .DefaultIfEmpty ( ) .ElementAt ( 0 ) , Source = ( string ) article.Elements ( `` metadata '' ) .Elements ( `` dc '' ) .Where ( x = > ( string ) x.Attribute ( `` element '' ) == `` dc.source '' ) .Attributes ( `` value '' ) .DefaultIfEmpty ( ) .ElementAt ( 0 ) , CreatorLocation = ( string ) article.Elements ( `` metadata '' ) .Elements ( `` dc '' ) .Where ( x = > ( string ) x.Attribute ( `` element '' ) == `` dc.creator.location '' ) .Attributes ( `` value '' ) .DefaultIfEmpty ( ) .ElementAt ( 0 ) , CreatorLocationCountryName = ( string ) article.Elements ( `` metadata '' ) .Elements ( `` dc '' ) .Where ( x = > ( string ) x.Attribute ( `` element '' ) == `` dc.creator.location.country.name '' ) .Attributes ( `` value '' ) .DefaultIfEmpty ( ) .ElementAt ( 0 ) , Codes = article.Elements ( `` metadata '' ) .Elements ( `` codes '' ) .Elements ( `` code '' ) .Attributes ( `` code '' ) .DefaultIfEmpty ( ) } ;"
private ClassInstance GetMeANumber ( ) { Resource a = null ; try { Resource a = new Resource ( ) ; return a.GetClassInstance ( ) ; } catch { throw ; } finally { if ( a ! = null ) a.Dispose ( ) ; } }
"public class AzPanel : Panel { protected const int BORDER_WIDTH = 3 ; protected int BORDER_RADIUS = 4 ; private object _lock = new object ( ) ; private bool regionNeedsRefresh = false ; public AzPanel ( ) : base ( ) { this.SetStyle ( ControlStyles.DoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint , true ) ; this.SetStyle ( ControlStyles.SupportsTransparentBackColor , true ) ; this.SetStyle ( ControlStyles.Selectable , false ) ; base.BackColor = Color.Transparent ; this.BorderColor = Color.DarkRed ; this.ContentColor = Color.DarkGoldenrod ; this.DoubleBuffered = true ; base.Padding = new Padding ( 3 , 3 , 4 , 4 ) ; } } [ Guid ( `` ... '' ) ] [ ProgId ... ] [ ComVisible ( true ) ] [ ComdefaultInterface ... ] [ ClassInterface ( ClassInterfaceType.AutoDispatch ) ] [ Guid ( `` ... '' ) ] [ ComVisible ( true ) ] public interface IAzPanelCOM { void DesignTimeReload ( ) ; //some other things }"
ObjectQuery wql = new ObjectQuery ( `` SELECT * FROM Win32_OperatingSystem '' ) ; ManagementObjectSearcher searcher = new ManagementObjectSearcher ( wql ) ; ManagementObjectCollection results = searcher.Get ( ) ; //total amount of free physical memory in bytes var Available = new ComputerInfo ( ) .AvailablePhysicalMemory ; //total amount of physical memory in bytes var Total = new ComputerInfo ( ) .TotalPhysicalMemory ; var PhysicalMemoryInUse = Total - Available ; Object Free = new object ( ) ; foreach ( var result in results ) { //Free amount Free = result [ `` FreePhysicalMemory '' ] ; } var Cached = Total - PhysicalMemoryInUse - UInt64.Parse ( Free.ToString ( ) ) ;
bool debug = false ; # if DEBUGdebug = true ; # endifreferencedlib.someclass.debug = debug ;
"var roList = new List < string > ( ) { `` One '' , `` Two '' , `` Three '' } ; IEnumerable < object > objEnum = roList ;"
public class MyModel { public bool MyFlag { get ; set ; } } @ model MyProject.MyModel < a href= '' # '' data-is-flagged= '' @ Model.MyFlag '' > Click Me < /a > < a href= '' # '' data-is-flagged= '' True '' > Click Me < /a > < a href= '' # '' data-is-flagged= '' data-is-flagged '' > Click Me < /a >
< PackageReference Include= '' SourceLink.Embed.AllSourceFiles '' Version= '' 2.6.0 '' PrivateAssets= '' All '' / >
public async Task < int > A ( /* some parameters */ ) { var result = await SomeOtherFuncAsync ( /* some other parameters */ ) ; return ( result ) ; } public Task B ( /* some parameters */ ) { var taskA = A ( /* parameters */ ) ; // # 1 return ( taskA ) ; } public async Task C ( ) { await B ( /* parameters */ ) ; }
[ HttpGet ( `` '' ) ] public async Task < IActionResult > GetData ( ) { IEnumerable < MyData > result = await _service.GetData ( ) ; return Ok ( result.Select ( _mapper.MapMyDataToMyDataWeb ) ) ; }
var regex = new Regex ( pattern ) ; var matches = regex.Matches ( input ) ; var list = new List < string > ( ) ; foreach ( Match m in matches ) { if ( m.Success ) { list.Add ( m.Value ) ; } }
IsTestActive = ( TestStateID == 1 ? true : false ) ; IsTestActive = ( TestStateID == 1 ) ;
bool a1 = ( object ) ( `` string '' + 1 ) == ( `` string '' + 1 ) ; bool a2 = ( object ) ( `` string '' + `` 1 '' ) == ( `` string '' + `` 1 '' ) ;
"< Expander IsExpanded= '' True '' HorizontalAlignment= '' Stretch '' Background= '' Blue '' > < Expander.Header > < Grid HorizontalAlignment= '' Stretch '' Background= '' BurlyWood '' > < Grid.ColumnDefinitions > < ColumnDefinition Width= '' 3* '' / > < ColumnDefinition Width= '' * '' / > < /Grid.ColumnDefinitions > < TextBlock Text= '' { Binding Path=Name , StringFormat=\ { 0 : D\ } } '' FontWeight= '' Bold '' / > < StackPanel Orientation= '' Horizontal '' HorizontalAlignment= '' Right '' Grid.Column= '' 1 '' > < TextBlock Text= '' Total : `` / > < TextBlock Text= '' { Binding Path=Items , Converter= { StaticResource sumConverter } } '' FontWeight= '' Bold '' / > < /StackPanel > < /Grid > < /Expander.Header > < ItemsPresenter / > < /Expander >"
"[ TestFixture ] public class TestEntityIf { [ Test ] public void IsImmutable ( ) { var setterCount = ( from s in typeof ( Entity ) .GetProperties ( BindingFlags.Public | BindingFlags.Instance ) where s.CanWrite select s ) .Count ( ) ; Assert.That ( setterCount == 0 , Is.True , `` Immutable rule is broken '' ) ; } } public class Entity { private int ID1 ; public int ID { get { return ID1 ; } } } public class Entity { public int ID { get ; private set ; } }"
public interface IParser { IParser Parse ( string s ) ; } public class Parser : IParser { public Parser Parse ( string s ) { return new Parser ( s ) ; } }
"public int DetectBPM ( JointType type ) { // we have not history yet if ( ! HasHistory ( ) ) return 0 ; // only calculate every second var detectTime = DateTime.Now.Second ; if ( _lastBPM ! = 0 & & _lastBPMDectect == detectTime ) return _lastBPM ; // search last high/low boundaries var index = ( int ) type ; var list = History [ index ] ; var i = list.Count - 1 ; var lastHigh = list [ i ] ; var lastLow = list [ i ] ; // shift to last peak first while ( i > 0 & & list [ i ] .Joint.Position.Y > = list [ i - 1 ] .Joint.Position.Y ) i -- ; // find last low while ( i > = 0 & & lastLow.Joint.Position.Y > = list [ i ] .Joint.Position.Y ) lastLow = list [ i -- ] ; // find last high while ( i > = 0 & & lastHigh.Joint.Position.Y < = list [ i ] .Joint.Position.Y ) lastHigh = list [ i -- ] ; var ticks = lastLow.Timestamp - lastHigh.Timestamp ; var elapsedTime = new TimeSpan ( ticks ) ; var bpm = ( int ) ( 60000/elapsedTime.TotalMilliseconds ) ; Console.WriteLine ( `` DEBUG : BPM = `` + _lastBPM + `` , elapsedMS : `` + elapsedTime.TotalMilliseconds ) ; _lastBPMDectect = detectTime ; _lastBPM = bpm ; return _lastBPM ; }"
T resource = new T ( ) ; using ( resource as IDisposable ) { ... }
< ? xml version= '' 1.0 '' encoding= '' utf-8 '' standalone= '' yes '' ? > < ApplicationData Version= '' 12.5.1 '' RootPath= '' FireFox-FILES '' > < RegistrySystem > < DIR Operation= '' + '' Path= '' C : \Temp\Microsoft\MediaPlayer\ShimInclusionList '' / > < DIR Operation= '' + '' Path= '' C : \Temp\MediaPlayer\ShimInclusionList\MM.EXE '' / > < DIR Operation= '' + '' Path= '' C : \Temp\MediaPlayer\ShimInclusionList\plugin-container.exe '' / > < DIR Operation= '' + '' Path= '' C : \Temp\Microsoft\MediaPlayer '' > < ENTRY Name= '' '' Value= '' 43.0.4 '' Type= '' 1 '' / > < ENTRY Name= '' CurrentVersion '' Value= '' 43.0.4 ( x86 en-GB ) '' Type= '' 1 '' / > < /DIR > < DIR Operation= '' + '' Path= '' C : \Program Files\Microsoft\MediaPlayer\ShimInclusionList\plugin-container.exe '' / > < DIR Operation= '' + '' Path= '' C : \Program Files\Microsoft\MediaPlayer\ShimInclusionList2\plugin.exe '' / > < DIR Operation= '' + '' Path= '' C : \Program Files\Microsoft\MediaPlayer\ShimInclusionList2\container.exe '' / > < DIR Operation= '' + '' Path= '' C : \Program Files\Microsoft\MediaPlayer\ShimInclusionList4 '' > < ENTRY Name= '' '' Value= '' 43.0.4 '' Type= '' 1 '' / > < ENTRY Name= '' CurrentVersion '' Value= '' 43.0.4 ( x86 en-GB ) '' Type= '' 1 '' / > < /DIR > < /RegistrySystem > < /ApplicationData > XDocument xdoc = XDocument.Load ( XmlFile ) ; foreach ( var node in xdoc.Descendants ( `` DIR '' ) .Where ( status = > status.Attribute ( `` Path '' ) .Value.Contains ( @ '' C : \Temp\ '' ) ) ) { node.Remove ( ) ; } xdoc.Save ( XmlFile ) ;
"< asp : UpdatePanel ID= '' upnlDetail '' runat= '' server '' UpdateMode= '' Conditional '' > < ContentTemplate > < asp : GridView ID= '' gvDetails '' runat= '' server '' AutoGenerateColumns= '' false '' SkinID= '' gridviewGray '' CellPadding= '' 3 '' OnRowCommand= '' gvDetails_RowCommand '' OnRowDataBound= '' gvDetails_RowDataBound '' AllowSorting= '' true '' > < Columns > < asp : TemplateField > < ItemTemplate > < asp : DropDownList ID= '' ddlStatus '' runat= '' server '' AutoPostBack= '' true '' OnSelectedIndexChanged= '' ddlStatus_SelectedIndexChanged '' > < /asp : DropDownList > < /ItemTemplate > < /asp : TemplateField > < asp : TemplateField > < ItemTemplate > < asp : Button ID= '' btnSave '' runat= '' server '' CommandName= '' Save '' CommandArgument= '' < % # ( ( GridViewRow ) Container ) .RowIndex % > '' Text= '' Save '' / > < /ItemTemplate > < /asp : TemplateField > < /Columns > < /asp : GridView > < /ContentTemplate > < /asp : UpdatePanel > while ( gvDetails.Columns.Count > 2 ) //Do n't remove the rightmost columns { gvDetails.Columns.RemoveAt ( 0 ) ; } gvDetails.Columns.Insert ( 0 , GridViewTools.CreateBoundField ( `` Request.Amount '' , `` Amount '' , `` Money '' , 50 ) ) ; gvDetails.Columns.Insert ( 0 , GridViewTools.CreateBoundField ( `` Request.CustomerName '' , `` Customer '' , `` comment '' , 200 ) ) ; gvDetails.Columns.Insert ( 0 , GridViewTools.CreateBoundField ( `` Request.BillAccountFormatted '' , `` Account '' , `` text '' , 100 ) ) ; gvDetails.Columns.Insert ( 0 , GridViewTools.CreateBoundField ( `` Request.Id '' , `` Request '' , `` int '' , 50 ) ) ; gvDetails.DataSource = dt ; gvDetails.DataBind ( ) ; public static BoundField CreateBoundField ( ... ) { ... }"
"public class Security { public static bool Security.Member_Authenticate ( string username , string password ) { //do stuff } }"
typeof ( TValue ) .IsAssignableFrom ( value.GetType ( ) ) value is TValue
"public class IocControllerFactory : DefaultControllerFactory { protected override IController GetControllerInstance ( System.Web.Routing.RequestContext requestContext , Type controllerType ) { return ( Controller ) ObjectFactory.GetInstance ( controllerType ) ; } } // ... ObjectFactory.Initialize ( x = > { x.AddRegistry ( new ArticleRegistry ( ) ) ; } ) ; ControllerBuilder.Current.SetControllerFactory ( new IocControllerFactory ( ) ) ; // ..."
internal class Server { private HttpListener listener ; public Server ( ) { listener = new HttpListener ( ) ; listener.Prefixes.Add ( `` http : //*:80/asynctest/ '' ) ; listener.Start ( ) ; Go ( ) ; } async void Go ( ) { HttpListenerContext context = await listener.GetContextAsync ( ) ; Go ( ) ; using ( var httpListenerResponse = context.Response ) using ( var outputStream = httpListenerResponse.OutputStream ) using ( var sw = new StreamWriter ( outputStream ) ) { await sw.WriteAsync ( `` hello world '' ) ; } } }
DbSet < TEntity > Class DbContext Class
"using System ; using System.Threading.Tasks ; public class C { public async void M ( ) { await Task.Yield ( ) ; } } public class C { [ CompilerGenerated ] [ StructLayout ( LayoutKind.Auto ) ] private struct < M > d__0 : IAsyncStateMachine { public int < > 1__state ; public AsyncVoidMethodBuilder < > t__builder ; private YieldAwaitable.YieldAwaiter < > u__1 ; void IAsyncStateMachine.MoveNext ( ) { int num = this. < > 1__state ; try { YieldAwaitable.YieldAwaiter yieldAwaiter ; if ( num ! = 0 ) { yieldAwaiter = Task.Yield ( ) .GetAwaiter ( ) ; if ( ! yieldAwaiter.IsCompleted ) { num = ( this. < > 1__state = 0 ) ; this. < > u__1 = yieldAwaiter ; this. < > t__builder.AwaitUnsafeOnCompleted < YieldAwaitable.YieldAwaiter , C. < M > d__0 > ( ref yieldAwaiter , ref this ) ; return ; } } else { yieldAwaiter = this. < > u__1 ; this. < > u__1 = default ( YieldAwaitable.YieldAwaiter ) ; num = ( this. < > 1__state = -1 ) ; } yieldAwaiter.GetResult ( ) ; yieldAwaiter = default ( YieldAwaitable.YieldAwaiter ) ; } catch ( Exception arg_6E_0 ) { Exception exception = arg_6E_0 ; this. < > 1__state = -2 ; this. < > t__builder.SetException ( exception ) ; return ; } this. < > 1__state = -2 ; this. < > t__builder.SetResult ( ) ; } [ DebuggerHidden ] void IAsyncStateMachine.SetStateMachine ( IAsyncStateMachine stateMachine ) { this. < > t__builder.SetStateMachine ( stateMachine ) ; } } [ AsyncStateMachine ( typeof ( C. < M > d__0 ) ) ] public void M ( ) { C. < M > d__0 < M > d__ ; < M > d__. < > t__builder = AsyncVoidMethodBuilder.Create ( ) ; < M > d__. < > 1__state = -1 ; AsyncVoidMethodBuilder < > t__builder = < M > d__. < > t__builder ; < > t__builder.Start < C. < M > d__0 > ( ref < M > d__ ) ; } }"
internal class C { public void M ( ) { Console.WriteLine ( `` foo '' ) ; } }
private readonly Stack < MyObject > _pastHistory = new Stack < MyObject > ( ) ; internal virtual Boolean IsAnyHistory { get { return _pastHistory.Any ( ) ; } } internal virtual void AddObjectToHistory ( MyObject myObject ) { if ( myObject == null ) throw new ArgumentNullException ( `` myObject '' ) ; _pastHistory.Push ( myObject ) ; } internal virtual MyObject RemoveLastObject ( ) { if ( ! IsAnyHistory ) throw new InvalidOperationException ( `` There is no previous history . `` ) ; return _pastHistory.Pop ( ) ; }
arrMove = new List < int [ ] > ( 4 ) ; m_pppiCaseMoveDiagLine = new int [ 64 ] [ ] [ ] ; m_pppiCaseMoveDiagonal = new int [ 64 ] [ ] [ ] ; m_pppiCaseMoveLine = new int [ 64 ] [ ] [ ] ; m_ppiCaseMoveKnight = new int [ 64 ] [ ] ; m_ppiCaseMoveKing = new int [ 64 ] [ ] ; m_ppiCaseWhitePawnCanAttackFrom = new int [ 64 ] [ ] ; m_ppiCaseBlackPawnCanAttackFrom = new int [ 64 ] [ ] ; private PlayerColorE m_eNextMoveColor ; private int [ ] m_piPiecesCount ; private Random m_rnd ; private int m_iAttackedPieces ;
"AdhocWorkspace workspace = new AdhocWorkspace ( ) ; Project project = workspace.AddProject ( `` Test '' , LanguageNames.CSharp ) ; ClassDeclarationSyntax classDeclaration = SyntaxFactory.ClassDeclaration ( `` MyClass '' ) ; CompilationUnitSyntax compilationUnit = SyntaxFactory.CompilationUnit ( ) .AddMembers ( classDeclaration ) ; Document document = project.AddDocument ( `` Test.cs '' , compilationUnit ) ; SemanticModel semanticModel = await document.GetSemanticModelAsync ( ) ; ISymbol symbol = semanticModel.GetDeclaredSymbol ( classDeclaration ) ; // < -- Throws Exception"
string stg1 = `` String 1 '' ; string stg2 = `` String 2 '' ; string stg3 = `` String 3 '' ; string stg4 ; stg4 = stg1 + stg3 ; stg4 = stg4 + stg2 + stg3 ; stg4 = `` '' ; stg3 = `` '' ;
"private decimal Round ( decimal num , int precision ) { return Round ( num , precision , 28 ) ; } private decimal Round ( decimal num , int precision , int fullPrecision ) { if ( precision > = fullPrecision ) return Math.Round ( num , precision ) ; return Round ( Math.Round ( num , fullPrecision ) , precision , -- fullPrecision ) ; }"
"var options = new FindOptions { Modifiers = new BsonDocument ( `` $ hint '' , `` PathTypeFilenameIndex '' ) } ; return await Collection .Find ( f = > f.Metadata [ `` path '' ] == path , options ) .SortBy ( f = > f.Metadata [ `` type '' ] ) .ThenBy ( f = > f.Filename ) .ToListAsync ( ) ; a , Ab , B , c , D Ab , B , D , a , c"
"char [ ] outputBuffer = ArrayPool < char > .Shared.Rent ( inputBuffer.Length ) ; Array.Copy ( buffer , 0 , outputBuffer , 0 , buffer.Length ) ; char [ ] outputBuffer = ArrayPool < char > .Shared.Rent ( inputBuffer.Length ) ; Buffer.BlockCopy ( buffer , 0 , outputBuffer , 0 , buffer.Length ) ; { 50 , 48 , 49 , 56 , 45 } { 12338 , 14385 , 12333 , 11575 , 14385 }"
"public class SharedData { public int Value { get ; set ; } } void button1_Click ( object sender , EventArgs e ) { AAA ( ) ; } async Task BBB ( SharedData data ) { await Task.Delay ( TimeSpan.FromSeconds ( 1 ) ) ; MessageBox.Show ( data.Value.ToString ( ) ) ; // < -- -- I always see 0 here , data.Value = data.Value + 1 ; } async Task < int > AAA ( ) { SharedData data = new SharedData ( ) ; var task1 = BBB ( data ) ; var task2 = BBB ( data ) ; var task3 = BBB ( data ) ; await Task.WhenAll ( task1 , task2 , task3 ) ; MessageBox.Show ( data.Value.ToString ( ) ) ; // < -- - this does show 3 return data.Value ; } data.Value = data.Value + 1 ; MessageBox.Show ( data.Value.ToString ( ) ) ; data.Value = data.Value + 1 ; //So this basically should do 0 -- > 1 ... . MessageBox.Show ( data.Value.ToString ( ) ) ; // Why data.Value still `` 0 '' ? ? data.Value = data.Value + 1 ; ... . MessageBox.Show ( data.Value.ToString ( ) ) ; // Why data.Value still `` 0 '' ? ? data.Value = data.Value + 1 ;"
class Class1 { private System.Action onDoneCallback ; void StartAsyncOperation ( System.Action onDoneCallback ) { this.onDoneCallback = onDoneCallback ; // do lengthy stuff } void MuchLater ( ) { this.onDoneCallBack ? .Invoke ( ) ; } } class Class2 { public System.Action action ; void DoStuff ( ) { action += ( ) = > print ( `` a '' ) ; new Class1 ( ) .StartAsyncOperation ( action ) ; } { // ... much later in another place but still before StartAsyncOperation ends action += ( ) = > print ( `` b '' ) ; } } new Class1 ( ) .StartAsyncOperation ( action ) ; new Class1 ( ) .StartAsyncOperation ( ( ) = > action ? .Invoke ( ) ) ;
"var format = new string [ ] { `` yyyy/MM/dd '' } ; var parsed = new DateTime ( ) ; var result = DateTime.TryParseExact ( `` 2013.03.12 '' , format , new CultureInfo ( `` de-DE '' ) , DateTimeStyles.None , out parsed ) ;"
"extern `` C '' { void testA ( int a , float b ) { } static void testB ( int a , float b ) { } } class PlatformInvokeTest { [ DllImport ( `` test.so '' ) ] public static extern void testA ( int a , float b ) ; [ DllImport ( `` test.so '' ) ] internal static extern void testB ( int a , float b ) ; public static void Main ( ) { testA ( 0 , 1.0f ) ; testB ( 0 , 1.0f ) ; } }"
"LeveledStudios.depsLeveledStudios.dllLeveledStudios.pdbLeveledStudios.runtimeconfig.devLeveledStdios.runtimeconfig Error : assembly specified in the dependencies manifest was not found -- package : 'discord.net.commands ' , version ' 1.0.0-rc-00546 ' , path : 'lib/netstandard1.3/Discord.Net.Commands.dll ` dotnet restoredotnet build -r win10-x64 < Project Sdk= '' Microsoft.NET.Sdk '' ToolsVersion= '' 15.0 '' > < PropertyGroup > < OutputType > Exe < /OutputType > < TargetFramework > netcoreapp1.0 < /TargetFramework > < /PropertyGroup > < ItemGroup > < Compile Include= '' **\*.cs '' / > < EmbeddedResource Include= '' **\*.resx '' / > < /ItemGroup > < ItemGroup > < PackageReference Include= '' Discord.Net '' Version= '' 1.0.0-rc-00546 '' / > < PackageReference Include= '' Discord.Net.Commands '' Version= '' 1.0.0-rc-00546 '' / > < PackageReference Include= '' Discord.Net.Core '' Version= '' 1.0.0-rc-00546 '' / > < PackageReference Include= '' Discord.Net.WebSocket '' Version= '' 1.0.0-rc-00546 '' / > < PackageReference Include= '' Microsoft.NETCore.App '' Version= '' 1.0.1 '' / > < PackageReference Include= '' Newtonsoft.Json '' Version= '' 9.0.2-beta2 '' / > < /ItemGroup > < /Project >"
"public abstract class AbsWizard { public abstract Magic GetMagic ( String magicword ) ; public abstract string [ ] GetAvalibleSpells ( ) ; } public class WhiteWizard : AbsWizard { public override Magic GetMagic ( string magicword ) { //returns some magic based on the magic word } public override string [ ] GetAvalibleSpells ( ) { string [ ] spells = { `` booblah '' , '' zoombar '' } ; return spells ; } } public class BlackWizard : AbsWizard { public override Magic GetMagic ( string magicword ) { //returns some magic based on the magic word } public override string [ ] GetAvalibleSpells ( ) { string [ ] spells = { `` zoogle '' , `` xclondon '' } ; return spells ; } } public static void CastMagic ( ) { Type [ ] types = System.Reflection.Assembly.GetExecutingAssembly ( ) .GetTypes ( ) ; List < Type > wizardTypes = new List < Type > ( ) ; List < string > avalibleSpells = new List < string > ( ) ; Type selectedWizardType ; string selectedSpell ; foreach ( Type t in types ) { if ( typeof ( AbsWizard ) .IsAssignableFrom ( t ) ) { wizardTypes.Add ( t ) ; } } //Allow user to pick a wizard type ( assign a value to selectedWizardType ) //find the spells the selected type of wizard can cast ( populate availibleSpells ) //Alow user to pick the spell ( assign a value to selectedSpell ) //Find all instances , if any exsist , of wizards of type selectedWizardType and call GetMagic ( selectedSpell ) ; }"
"public class BaseControl < TControl , TPage > where TPage : BasePage < TPage , TControl > where TControl : BaseControl < TControl , TPage > { public TPage Page { get { ... } set { ... } } ... } public class BasePage < TPage , TControl > where TPage : BasePage < TPage , TControl > where TControl : BaseControl < TControl , TPage > { public TControl Control { get { ... } set { ... } ... } public class DerivedControl < TControl , TPage > : BaseControl < TControl , TPage > where TControl : DerivedControl < TControl , TPage > where TPage : DerivedPage < TPage , TControl > { } public class DerivedPage < TPage , TControl > : BasePage < TPage , TControl > where TControl : DerivedControl < TControl , TPage > where TPage : DerivedPage < TPage , TControl > { }"
"var result = myFluentThing.Execute ( ( ) = > serviceCall.ExecHttp ( ) , 5 ) .IfExecFails ( ( ) = > DoSomeShizzle ( ) ) .Result < TheResultType > ( ) ;"
"IEnumerable < Process > processes = new [ ] { `` process1 '' , `` process2 '' } .SelectMany ( Process.GetProcessesByName ) ; IEnumerable < Process > res = new string [ ] { `` notepad '' , `` firefox '' , `` outlook '' } .SelectMany ( s = > Process.GetProcessesByName ( s ) ) ;"
"MyContext context = new MyContext ( ) ; Func < Product , bool > query = ( p = > p.UPC.StartsWith ( `` 817 '' ) ) ; var products = context.Products.Where ( query ) .Take ( 10 ) ; MyContext context = new MyContext ( ) ; var products = context.Products.Where ( p = > p.UPC.StartsWith ( `` 817 '' ) ) .Take ( 10 ) ; { SELECT TOP ( 10 ) [ Extent1 ] . [ Id ] AS [ Id ] , [ Extent1 ] . [ Brand ] AS [ Brand ] , [ Extent1 ] . [ Description ] AS [ Description ] , [ Extent1 ] . [ UPC ] AS [ UPC ] FROM [ dbo ] . [ Products ] AS [ Extent1 ] WHERE [ Extent1 ] . [ UPC ] LIKE N'817 % ' }"
Type elType = Type.GetType ( obj ) ; Type genType = typeof ( GenericType < > ) .MakeGenericType ( elType ) ; object obj = Activator.CreateInstance ( genType ) ; ( ( GenericType < elType > ) obj ) .MyMethod ( ) ;
"using ( OleDbCommand insertCommand = new OleDbCommand ( `` ... '' , connection ) ) { // do super stuff } { OleDbCommand insertCommand = new OleDbCommand ( `` ... '' , connection ) try { //do super stuff } finally { if ( insertCommand ! = null ) ( ( IDisposable ) insertCommand ) .Dispose ( ) ; } } try { insertCommand = new OleDbCommand ( `` '' , connection ) ; Label_0017 : try { //do super stuff } finally { Label_0111 : if ( ( insertCommand == null ) ! = null ) { goto Label_0122 ; } insertCommand.Dispose ( ) ; Label_0122 : ; }"
public String ToString ( Representaion rep ) { String toReturn = `` kuid '' ; Char separator = ' : ' ; switch ( rep ) { case Representaion.Colons : break ; case Representaion.Underscores : separator = ' _ ' ; break ; case Representaion.UCROnly : toReturn = userID + `` : '' + contentID ; toReturn += revision == 0 ? `` '' : `` : '' + revision ; return toReturn ; } toReturn += version == 0 ? `` '' : version.ToString ( ) ; toReturn += separator + userID + separator + contentID ; toReturn += revision == 0 ? `` '' : separator + revision.ToString ( ) ; return toReturn ; } private byte version ; private int userID ; private int contentID ; private byte revision ; public override string ToString ( ) { return this.ToString ( KUID.Representaion.Colons ) ; }
3 27 53 79 113 129 134 140 141 142 145 174 191 214 284 284 3 275379113129 134 140 141 142 145174194214284 284
"OdbcConnection remoteConn = new OdbcConnection ( ConfigurationManager.ConnectionStrings [ `` remoteConnectionString '' ] .ToString ( ) ) ; remoteConn.Open ( ) ; OdbcCommand remoteCommand = new OdbcCommand ( ) ; remoteCommand.Connection = remoteConn ; using ( remoteConn ) { string localSql = `` '' ; string remoteSql = `` select * from tracking where last_update > 212316247440000000 '' ; // Julian No = 2015-07-12 11:24:00 remoteCommand.CommandText = remoteSql ; OdbcDataReader remoteReader ; remoteReader = remoteCommand.ExecuteReader ( ) ; while ( remoteReader.Read ( ) ) { for ( int i = 0 ; i < 68 ; i++ ) { localSql += `` , ' '' + remoteReader [ i ] .ToString ( ) + `` ' '' ; } } }"
Version=1EventType=APPCRASHEventTime=131414331835897163ReportType=2Consent=1UploadTime=131414331849773927ReportStatus=393ReportIdentifier=c52be1e0-6378-4555-bddc-cd49f22e98d4IntegratorReportIdentifier=e415e187-7b4d-4689-92a7-5522957c6300Wow64Host=34404NsAppName=TurboVPN.exeAppSessionGuid=000037d0-0001-0015-6d89-3176a3e0d201TargetAppId=W:00065bd30e4a6caee77eb9ec126f39eeb11200000000 ! 000072443a77ce17608085aa75f649187cf7129fd9a8 ! TurboVPN.exeTargetAppVer=2017//06//08:20:58:47 ! 0 ! TurboVPN.exeBootId=4294967295TargetAsId=3395Response.BucketId=c2e6858b6015d605f3dea6f209e5a680Response.BucketTable=4Response.LegacyBucketId=120776215139Response.type=4Sig [ 0 ] .Name=Application NameSig [ 0 ] .Value=TurboVPN.exeSig [ 1 ] .Name=Application VersionSig [ 1 ] .Value=8.0.0.0Sig [ 2 ] .Name=Application TimestampSig [ 2 ] .Value=5939ba87Sig [ 3 ] .Name=Fault Module NameSig [ 3 ] .Value=d3d9.dllSig [ 4 ] .Name=Fault Module VersionSig [ 4 ] .Value=10.0.15063.0Sig [ 5 ] .Name=Fault Module TimestampSig [ 5 ] .Value=631de416Sig [ 6 ] .Name=Exception CodeSig [ 6 ] .Value=c0000005Sig [ 7 ] .Name=Exception OffsetSig [ 7 ] .Value=000000000000fd0cDynamicSig [ 1 ] .Name=OS VersionDynamicSig [ 1 ] .Value=10.0.15063.2.0.0.256.4DynamicSig [ 2 ] .Name=Locale IDDynamicSig [ 2 ] .Value=1033DynamicSig [ 22 ] .Name=Additional Information 1DynamicSig [ 22 ] .Value=9b4fDynamicSig [ 23 ] .Name=Additional Information 2DynamicSig [ 23 ] .Value=9b4f78d83ca7cfa07fe4d1531372a428DynamicSig [ 24 ] .Name=Additional Information 3DynamicSig [ 24 ] .Value=9991DynamicSig [ 25 ] .Name=Additional Information 4DynamicSig [ 25 ] .Value=99915f8f3f68939dc06e64d116ece58aUI [ 2 ] =C : \Users\Mr\Documents\Visual Studio 2015\Projects\TurboVPN\TurboVPN\bin\Release\TurboVPN.exeUI [ 3 ] =TurboVPN has stopped workingUI [ 4 ] =Windows can check online for a solution to the problem.UI [ 5 ] =Check online for a solution and close the programUI [ 6 ] =Check online for a solution later and close the programUI [ 7 ] =Close the programLoadedModule [ 0 ] =C : \Users\Mr\Documents\Visual Studio 2015\Projects\TurboVPN\TurboVPN\bin\Release\TurboVPN.exeLoadedModule [ 1 ] =C : \WINDOWS\SYSTEM32\ntdll.dllLoadedModule [ 2 ] =C : \WINDOWS\SYSTEM32\MSCOREE.DLLLoadedModule [ 3 ] =C : \WINDOWS\System32\KERNEL32.dllLoadedModule [ 4 ] =C : \WINDOWS\System32\KERNELBASE.dllLoadedModule [ 5 ] =C : \Program Files\Bitdefender\Bitdefender 2017\Active Virus Control\Avc3_00125_004\avcuf64.dllLoadedModule [ 6 ] =C : \WINDOWS\SYSTEM32\apphelp.dllLoadedModule [ 7 ] =C : \WINDOWS\System32\ADVAPI32.dllLoadedModule [ 8 ] =C : \WINDOWS\System32\msvcrt.dllLoadedModule [ 9 ] =C : \WINDOWS\System32\sechost.dllLoadedModule [ 10 ] =C : \WINDOWS\System32\RPCRT4.dllLoadedModule [ 11 ] =C : \Windows\Microsoft.NET\Framework64\v4.0.30319\mscoreei.dllLoadedModule [ 12 ] =C : \WINDOWS\System32\SHLWAPI.dllLoadedModule [ 13 ] =C : \WINDOWS\System32\combase.dllLoadedModule [ 14 ] =C : \WINDOWS\System32\ucrtbase.dllLoadedModule [ 15 ] =C : \WINDOWS\System32\bcryptPrimitives.dllLoadedModule [ 16 ] =C : \WINDOWS\System32\GDI32.dllLoadedModule [ 17 ] =C : \WINDOWS\System32\gdi32full.dllLoadedModule [ 18 ] =C : \WINDOWS\System32\msvcp_win.dllLoadedModule [ 19 ] =C : \WINDOWS\System32\USER32.dllLoadedModule [ 20 ] =C : \WINDOWS\System32\win32u.dllLoadedModule [ 21 ] =C : \WINDOWS\System32\IMM32.DLLLoadedModule [ 22 ] =C : \WINDOWS\System32\kernel.appcore.dllLoadedModule [ 23 ] =C : \WINDOWS\SYSTEM32\VERSION.dllLoadedModule [ 24 ] =C : \Windows\Microsoft.NET\Framework64\v4.0.30319\clr.dllLoadedModule [ 25 ] =C : \WINDOWS\SYSTEM32\MSVCR120_CLR0400.dllLoadedModule [ 26 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\mscorlib\59ea37125345a946fbfb8868aa11ed27\mscorlib.ni.dllLoadedModule [ 27 ] =C : \WINDOWS\System32\ole32.dllLoadedModule [ 28 ] =C : \WINDOWS\system32\uxtheme.dllLoadedModule [ 29 ] =C : \Program Files ( x86 ) \RivaTuner Statistics Server\RTSSHooks64.dllLoadedModule [ 30 ] =C : \WINDOWS\SYSTEM32\WINMM.dllLoadedModule [ 31 ] =C : \WINDOWS\WinSxS\amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.9279_none_08e667efa83ba076\MSVCR90.dllLoadedModule [ 32 ] =C : \WINDOWS\SYSTEM32\WINMMBASE.dllLoadedModule [ 33 ] =C : \WINDOWS\System32\cfgmgr32.dllLoadedModule [ 34 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System\4b4b69a2aa9b596c8b8e7a32267eac35\System.ni.dllLoadedModule [ 35 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Core\d4035216edd875be919d339859343a6c\System.Core.ni.dllLoadedModule [ 36 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\WindowsBase\d6053a0b7badab04868dc6e51ab4c02e\WindowsBase.ni.dllLoadedModule [ 37 ] =C : \WINDOWS\SYSTEM32\CRYPTSP.dllLoadedModule [ 38 ] =C : \WINDOWS\system32\rsaenh.dllLoadedModule [ 39 ] =C : \WINDOWS\SYSTEM32\bcrypt.dllLoadedModule [ 40 ] =C : \WINDOWS\SYSTEM32\CRYPTBASE.dllLoadedModule [ 41 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\PresentationCore\b5bfbcf78210cf783ff665fea098ebfa\PresentationCore.ni.dllLoadedModule [ 42 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\Presentatio5ae0f00f # \73dece296df0b44862aa59e1f73825c3\PresentationFramework.ni.dllLoadedModule [ 43 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Xaml\44f34f029c456762dba3d085d6b9fa9c\System.Xaml.ni.dllLoadedModule [ 44 ] =C : \WINDOWS\SYSTEM32\dwrite.dllLoadedModule [ 45 ] =C : \Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\wpfgfx_v0400.dllLoadedModule [ 46 ] =C : \WINDOWS\System32\OLEAUT32.dllLoadedModule [ 47 ] =C : \WINDOWS\SYSTEM32\MSVCP120_CLR0400.dllLoadedModule [ 48 ] =C : \WINDOWS\SYSTEM32\D3DCOMPILER_47.dllLoadedModule [ 49 ] =C : \Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\PresentationNative_v0400.dllLoadedModule [ 50 ] =C : \Windows\Microsoft.NET\Framework64\v4.0.30319\clrjit.dllLoadedModule [ 51 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Configuration\9f298b9fdf9d3d88c051ba8d0cfcdd98\System.Configuration.ni.dllLoadedModule [ 52 ] =C : \WINDOWS\SYSTEM32\urlmon.dllLoadedModule [ 53 ] =C : \WINDOWS\System32\shcore.dllLoadedModule [ 54 ] =C : \WINDOWS\System32\windows.storage.dllLoadedModule [ 55 ] =C : \WINDOWS\System32\powrprof.dllLoadedModule [ 56 ] =C : \WINDOWS\System32\profapi.dllLoadedModule [ 57 ] =C : \WINDOWS\SYSTEM32\iertutil.dllLoadedModule [ 58 ] =C : \WINDOWS\SYSTEM32\SspiCli.dllLoadedModule [ 59 ] =C : \WINDOWS\SYSTEM32\msiso.dllLoadedModule [ 60 ] =C : \WINDOWS\SYSTEM32\PROPSYS.dllLoadedModule [ 61 ] =C : \WINDOWS\System32\shell32.dllLoadedModule [ 62 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Xml\246b8fa70f43db970414bb4119fe629f\System.Xml.ni.dllLoadedModule [ 63 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Runt73a1fc9d # \9ed83e5a61548d2d78bc4b7a667e9139\System.Runtime.Remoting.ni.dllLoadedModule [ 64 ] =C : \WINDOWS\System32\ws2_32.dllLoadedModule [ 65 ] =C : \WINDOWS\system32\mswsock.dllLoadedModule [ 66 ] =C : \WINDOWS\system32\dwmapi.dllLoadedModule [ 67 ] =C : \WINDOWS\System32\MSCTF.dllLoadedModule [ 68 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Drawing\763d0ca89a77cfd983874efe156a9296\System.Drawing.ni.dllLoadedModule [ 69 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Windows.Forms\d63d7f874bb64e51ee0ef09cc99218f6\System.Windows.Forms.ni.dllLoadedModule [ 70 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\System.Security\35f9d2604274a3e8fbf814e10789dc51\System.Security.ni.dllLoadedModule [ 71 ] =C : \WINDOWS\System32\crypt32.dllLoadedModule [ 72 ] =C : \WINDOWS\System32\MSASN1.dllLoadedModule [ 73 ] =C : \WINDOWS\SYSTEM32\DPAPI.dllLoadedModule [ 74 ] =C : \WINDOWS\SYSTEM32\WindowsCodecs.dllLoadedModule [ 75 ] =C : \WINDOWS\SYSTEM32\d3d9.dllLoadedModule [ 76 ] =C : \WINDOWS\SYSTEM32\igdumdim64.dllLoadedModule [ 77 ] =C : \WINDOWS\System32\SETUPAPI.dllLoadedModule [ 78 ] =C : \WINDOWS\assembly\NativeImages_v4.0.30319_64\Presentatioaec034ca # \248dd0bba3037acdc2ab60513b34c3f2\PresentationFramework.Aero2.ni.dllLoadedModule [ 79 ] =C : \WINDOWS\SYSTEM32\WtsApi32.dllLoadedModule [ 80 ] =C : \WINDOWS\SYSTEM32\WINSTA.dllLoadedModule [ 81 ] =C : \WINDOWS\System32\clbcatq.dllLoadedModule [ 82 ] =C : \WINDOWS\system32\dataexchange.dllLoadedModule [ 83 ] =C : \WINDOWS\system32\d3d11.dllLoadedModule [ 84 ] =C : \WINDOWS\system32\dcomp.dllLoadedModule [ 85 ] =C : \WINDOWS\system32\dxgi.dllLoadedModule [ 86 ] =C : \WINDOWS\system32\twinapi.appcore.dllLoadedModule [ 87 ] =C : \WINDOWS\SYSTEM32\igdusc64.dllState [ 0 ] .Key=Transport.DoneStage1State [ 0 ] .Value=1File [ 0 ] .CabName=Report.zipFile [ 0 ] .Path=Report.zipFile [ 0 ] .Flags=196608File [ 0 ] .Type=11File [ 0 ] .Original.Path=\\ ? \C : \WINDOWS\system32\Report.zipFriendlyEventName=Stopped workingConsentKey=APPCRASHAppName=TurboVPNAppPath=C : \Users\Mr\Documents\Visual Studio 2015\Projects\TurboVPN\TurboVPN\bin\Release\TurboVPN.exeNsPartner=windowsNsGroup=windows8ApplicationIdentity=ED5A83A5552697FBE579A0CAAEF2FF9EMetadataHash=1411986728
\tSystem.Data.Entity.Edm.EdmNavigationProperty : Name : The specified name is not allowed : ' < Name > k__BackingField ' .
[ RunInstaller ( true ) ] public partial class MyCustomInstaller : Installer { }
"< behaviorExtensions > < add name= '' errorBehavior '' type= '' MyNs.TracingErrorBehaviorElement , MyNs , Version=1.0.6.0 , Culture=neutral , PublicKeyToken=null '' / > < /behaviorExtensions > < behaviorExtensions > < add name= '' errorBehavior '' type= '' MyNs.TracingErrorBehaviorElement , MyNs , Version=1.0.6.0 , Culture=neutral , PublicKeyToken=null '' / > < /behaviorExtensions >"
"< A xmlns= '' http : //abc.com '' > < B > '' b '' < /B > < C > '' c '' < /C > < /A > XNamespace ns = XNamespace.Get ( `` http : //abc.com '' ) ; var query= from node in doc.Descendants ( ns+ `` A '' ) select new ( B = ( string ) node.Element ( ns+ '' B '' ) , C = ( string ) node.Element ( ns+ `` C '' ) ) ;"
"public class BusinessModelMenuDto { [ Key ] [ Required ] public int ID { get ; set ; } public string TextToDisplay { get ; set ; } public string ImageSource { get ; set ; } public IEnumerable < BusinessModelMenuDto > SubMenuItems { get ; set ; } } public IEnumerable < BusinessModelMenuDto > GetCabsHeirarchy ( ) public class BusinessModelMenuDto { [ Key ] [ Required ] public int ID { get ; set ; } public int ? ParentID { get ; set ; } public string TextToDisplay { get ; set ; } public string ImageSource { get ; set ; } [ Include ] [ Association ( `` SubItems '' , `` ID '' , `` ParentID '' ) ] public IEnumerable < BusinessModelMenuDto > SubMenuItems { get ; set ; } }"
"decimal ( 20,15 ) public decimal Rate { get ; set ; } Class1 obj = new Class1 ( ) ; obj.Rate = 0.000001 ; ClassDbSet.Add ( obj ) ; DbContext.SaveChange ( ) ;"
"[ TestClass ] public class StackOverflow { [ TestMethod ] public void CreateStackOverflow ( ) { var mockMyType1 = new Mock < MyType > ( ) ; mockMyType1.Setup ( m = > m.Equals ( mockMyType1.Object ) ) .Returns ( true ) ; var mockMyType2 = new Mock < MyType > ( ) ; // Real test is for a filtering routine and the Assert is using // Contains ( ) , but it uses Equals ( ) internally so it has the same problem Assert.IsTrue ( mockMyType1.Object.Equals ( mockMyType1.Object ) ) ; // returns true Assert.IsFalse ( mockMyType1.Object.Equals ( mockMyType2.Object ) ) ; // explodes } } public class MyType { public virtual bool IsActive { get ; set ; } public override bool Equals ( object obj ) { return false ; // Not the real implementation but irrelevant to this issue } } mockMyType1.Setup ( m = > m.Equals ( It.Is < MyType > ( x = > ReferenceEquals ( x , mockMyType1.Object ) ) ) ) .Returns ( true ) ;"
using DomainModel = MyProduct.Core.Domain.Model ; using Dtos = MyProduct.ServiceModel.Dtos ; using DomainModel = MyProduct.Core.Domain.Model ; using Customer = MyProduct.Core.Domain.Model.Customer ;
"string [ ] strArr = { `` 123 '' , `` 456 '' , `` 789 '' } ; char [ ] chrArr = { ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' } ; int characterCount = 0 ; for ( int i = 0 ; i < strArr.Length ; i++ ) { characterCount += strArr [ i ] .Length ; } int indexCount = 0 ; char [ ] chrArr = new char [ characterCount ] ; for ( int i = 0 ; i < strArr.Length ; i++ ) { for ( int j = 0 ; j < strArr [ i ] .Length ; j++ ) { chrArr [ indexCount ] = strArr [ i ] [ j ] ; indexCount++ ; } }"
"using System ; using System.Threading ; using System.Threading.Tasks ; namespace FlipFlop { class Program { //Declaring these variables as volatile should instruct compiler to //flush all caches from registers into the memory . static volatile int a ; static volatile int b ; //Track a number of iteration that it took to detect operation reordering . static long iterations = 0 ; static object locker = new object ( ) ; //Indicates that operation reordering is not found yet . static volatile bool continueTrying = true ; //Indicates that Check method should continue . static volatile bool continueChecking = true ; static void Main ( string [ ] args ) { //Restarting test until able to catch reordering . while ( continueTrying ) { iterations++ ; var checker = new Task ( Check ) ; var writter = new Task ( Write ) ; lock ( locker ) { continueChecking = true ; checker.Start ( ) ; } writter.Start ( ) ; checker.Wait ( ) ; writter.Wait ( ) ; } Console.ReadKey ( ) ; } static void Write ( ) { //Writing is locked until Main will start Check ( ) method . lock ( locker ) { //Using memory barrier should prevent opration reordering . a = 1 ; Thread.MemoryBarrier ( ) ; b = 10 ; Thread.MemoryBarrier ( ) ; b = 20 ; Thread.MemoryBarrier ( ) ; a = 2 ; //Stops spinning in the Check method . continueChecking = false ; } } static void Check ( ) { //Spins until finds operation reordering or stopped by Write method . while ( continueChecking ) { int tempA = a ; int tempB = b ; if ( tempB == 10 & & tempA == 2 ) { continueTrying = false ; Console.WriteLine ( `` Caught when a = { 0 } and b = { 1 } '' , tempA , tempB ) ; Console.WriteLine ( `` In `` + iterations + `` iterations . `` ) ; break ; } } } } }"
"private static void DolbyProLogicII ( List < float > leftSamples , List < float > rightSamples , int sampleRate , string outputDirectory ) { // WavFileWrite is a wrapper class for NAudio to create Wav files . var meta = new WaveFormat ( sampleRate , 16 , 1 ) ; var c = new WavFileWrite { MetaData = meta , FileName = Path.Combine ( outputDirectory , `` c.wav '' ) } ; var l = new WavFileWrite { MetaData = meta , FileName = Path.Combine ( outputDirectory , `` l.wav '' ) } ; var r = new WavFileWrite { MetaData = meta , FileName = Path.Combine ( outputDirectory , `` r.wav '' ) } ; var sl = new WavFileWrite { MetaData = meta , FileName = Path.Combine ( outputDirectory , `` sl.wav '' ) } ; var sr = new WavFileWrite { MetaData = meta , FileName = Path.Combine ( outputDirectory , `` sr.wav '' ) } ; var ii = ( leftSamples.Count > rightSamples.Count ? rightSamples.Count : leftSamples.Count ) ; // Process center channel . for ( var i = 0 ; i < ii ; i++ ) { c.MonoChannelAudioData.Add ( ( leftSamples [ i ] * 0.707 ) + ( rightSamples [ i ] * 0.707 ) ) ; } c.Flush ( ) ; // Process left channel . l.MonoChannelAudioData = leftSamples ; l.Flush ( ) ; // Process right channel . r.MonoChannelAudioData = rightSamples ; r.Flush ( ) ; // Process surround left channel . for ( var i = 0 ; i < ii - 1 ; i++ ) { sl.MonoChannelAudioData.Add ( ( leftSamples [ i ] * 0.871 ) + ( rightSamples [ i ] * 0.489 ) ) ; } sl.Flush ( ) ; // Process surround right channel . for ( var i = 0 ; i < ii - 1 ; i++ ) { sr.MonoChannelAudioData.Add ( ( leftSamples [ i ] * 0.489 ) + ( rightSamples [ i ] * 0.871 ) ) ; } sr.Flush ( ) ; }"
"interface Blackboard { bool HasKey ( object key ) ; T GetValue < T > ( object key ) ; } T GetValue < T > ( object key ) { if ( typeof ( T ) == typeof ( int ) ) { // return intStore [ key ] ; // does n't compile return ( T ) ( object ) intStore [ key ] ; // boxes , allocates , bad . } // ... }"
"new JConstructor ( `` ctorExample '' , new JValue ( `` value '' ) , new JObject ( new JProperty ( `` prop1 '' , new JValue ( 1 ) ) , new JProperty ( `` prop2 '' , new JValue ( 2 ) ) ) ) .ToString ( ) new ctorExample ( `` value '' , { `` prop1 '' : 1 , `` prop2 '' : 2 } )"
"< ? xml version= '' 1.0 '' ? > < configuration > < configSections > < sectionGroup name= '' applicationSettings '' type= '' System.Configuration.ApplicationSettingsGroup , System , Version=4.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' > < section name= '' IntermediateWebService.Properties.Settings '' type= '' System.Configuration.ClientSettingsSection , System , Version=4.0.0.0 , Culture=neutral , PublicKeyToken=b77a5c561934e089 '' requirePermission= '' false '' / > < /sectionGroup > < /configSections > < system.web > < compilation debug= '' true '' targetFramework= '' 4.0 '' / > < customErrors mode= '' Off '' / > < /system.web > < system.serviceModel > < behaviors > < serviceBehaviors > < behavior name= '' IntermediateWebService.WebBehavior '' > < serviceMetadata httpsGetEnabled= '' true '' / > < serviceDebug includeExceptionDetailInFaults= '' true '' / > < /behavior > < behavior > < ! -- To avoid disclosing metadata information , set the value below to false and remove the metadata endpoint above before deployment -- > < serviceMetadata httpsGetEnabled= '' true '' / > < ! -- To receive exception details in faults for debugging purposes , set the value below to true . Set to false before deployment to avoid disclosing exception information -- > < serviceDebug includeExceptionDetailInFaults= '' false '' / > < /behavior > < /serviceBehaviors > < endpointBehaviors > < behavior name= '' WebBehavior '' > < /behavior > < /endpointBehaviors > < /behaviors > < bindings > < basicHttpBinding > < binding name= '' secureHttpBinding '' maxBufferPoolSize= '' 524288 '' maxReceivedMessageSize= '' 999999999 '' > < security mode= '' Transport '' > < transport clientCredentialType= '' None '' / > < /security > < /binding > < /basicHttpBinding > < webHttpBinding > < binding name= '' webHttpBindingConfig '' > < readerQuotas maxStringContentLength= '' 2048000 '' / > < /binding > < /webHttpBinding > < /bindings > < services > < service behaviorConfiguration= '' IntermediateWebService.WebBehavior '' name= '' IntermediateWebService.Service1 '' > < host > < baseAddresses > < add baseAddress= '' https : //myurl:4445/ '' / > < /baseAddresses > < /host > < endpoint address= '' '' binding= '' basicHttpBinding '' contract= '' IntermediateWebService.IService1 '' behaviorConfiguration= '' WebBehavior '' bindingConfiguration= '' secureHttpBinding '' / > < /service > < ! -- < service name= '' IntermediateWebService.Service1 '' > < endpoint address= '' '' binding= '' basicHttpBinding '' bindingConfiguration= '' secureHttpBinding '' contract= '' IntermediateWebService.IService1 '' / > < /service > -- > < /services > < serviceHostingEnvironment multipleSiteBindingsEnabled= '' false '' / > < /system.serviceModel > < system.webServer > < validation validateIntegratedModeConfiguration= '' false '' / > < modules runAllManagedModulesForAllRequests= '' true '' / > < /system.webServer > < /configuration > The server can not service the request because the media type is unsupported . HttpClient client = getHttpsClient ( new DefaultHttpClient ( ) ) ; //new DefaultHttpClient ( ) ; HttpPost get = null ; commandType = params [ 0 ] .toString ( ) ; if ( `` Login '' .equals ( params [ 0 ] ) ) { JSONStringer img = new JSONStringer ( ) .object ( ) .key ( `` value '' ) .object ( ) .key ( `` username '' ) .value ( params [ 1 ] .toString ( ) ) .key ( `` pwd '' ) .value ( params [ 2 ] .toString ( ) ) .key ( `` channelID '' ) .value ( params [ 3 ] .toString ( ) ) .endObject ( ) .endObject ( ) ; StringEntity se = new StringEntity ( img.toString ( ) ) ; get = new HttpPost ( `` https : // '' + serverIP + `` : '' + serverPort + `` /Service1.svc/auth '' ) ; //get.setHeader ( `` User-Agent '' , `` com.app.new '' ) ; get.setHeader ( `` Accept '' , `` application/json '' ) ; get.setHeader ( `` Content-Type '' , `` application/json '' ) ; get.setEntity ( se ) ;"
public void TestMethod ( ) { { string x = `` test '' ; string y = x ; { int z = 42 ; int zz = z ; } } }
"public class Dog { public string name { get ; set ; } public int weight { get ; set ; } } public class DogFactory //not sure if thats the correct wording { public List < dog > lstDogs = new List < dog > ( ) ; public void setDogs ( ) { Animal.Retrieve ( `` Dog '' ) ; //will retrieve a list of all dogs , with details , though this is costly to use foreach ( Animal.Dog pet in Animal._Dogs ) { Dog doggie = new doggie ( ) ; doggie.Name = pet.Name ; ... etc lstDog.add ( doggie ) ; } } }"
"namespace Kf.CANetCore31.DomainDrivenDesign { [ DebuggerDisplay ( `` { DebuggerDisplayString , nq } '' ) ] [ Obsolete ] public sealed class Id : ValueObject { public static implicit operator Id ( long value ) = > new Id ( value ) ; public static implicit operator long ( Id value ) = > value.Value ; public static implicit operator Id ( ulong value ) = > new Id ( ( long ) value ) ; public static implicit operator ulong ( Id value ) = > ( ulong ) value.Value ; public static implicit operator Id ( int value ) = > new Id ( value ) ; public static Id Empty = > new Id ( ) ; public static Id Create ( long value ) = > new Id ( value ) ; private Id ( long id ) = > Value = id ; private Id ( ) : this ( 0 ) { } public long Value { get ; } public override string DebuggerDisplayString = > this.CreateDebugString ( x = > x.Value ) ; public override string ToString ( ) = > DebuggerDisplayString ; protected override IEnumerable < object > EquatableValues = > new object [ ] { Value } ; } } public sealed class PersonEntityTypeConfiguration : IEntityTypeConfiguration < Person > { public void Configure ( EntityTypeBuilder < Person > builder ) { // this would be wrapped in either a base class or an extenion method on // EntityTypeBuilder < TEntity > where TEntity : Entity // to not repeated the code over each EntityTypeConfiguration // but expanded here for clarity builder .HasKey ( e = > e.Id ) ; builder .OwnsOne ( e = > e.Id , id = > { id.Property ( e = > e.Id ) .HasColumnName ( `` firstName '' ) .UseIdentityColumn ( 1 , 1 ) .HasColumnType ( SqlServerColumnTypes.Int64_BIGINT ) ; } builder.OwnsOne ( e = > e.Name , name = > { name.Property ( p = > p.FirstName ) .HasColumnName ( `` firstName '' ) .HasMaxLength ( 150 ) ; name.Property ( p = > p.LastName ) .HasColumnName ( `` lastName '' ) .HasMaxLength ( 150 ) ; } ) ; builder.Ignore ( e = > e.Number ) ; } } namespace Kf.CANetCore31.DomainDrivenDesign { /// < summary > /// Defines an entity . /// < /summary > [ DebuggerDisplay ( `` { DebuggerDisplayString , nq } '' ) ] public abstract class Entity : IDebuggerDisplayString , IEquatable < Entity > { public static bool operator == ( Entity a , Entity b ) { if ( ReferenceEquals ( a , null ) & & ReferenceEquals ( b , null ) ) return true ; if ( ReferenceEquals ( a , null ) || ReferenceEquals ( b , null ) ) return false ; return a.Equals ( b ) ; } public static bool operator ! = ( Entity a , Entity b ) = > ! ( a == b ) ; protected Entity ( Id id ) = > Id = id ; public Id Id { get ; } public override bool Equals ( object @ object ) { if ( @ object == null ) return false ; if ( @ object is Entity entity ) return Equals ( entity ) ; return false ; } public bool Equals ( Entity other ) { if ( other == null ) return false ; if ( ReferenceEquals ( this , other ) ) return true ; if ( GetType ( ) ! = other.GetType ( ) ) return false ; return Id == other.Id ; } public override int GetHashCode ( ) = > $ '' { GetType ( ) } { Id } '' .GetHashCode ( ) ; public virtual string DebuggerDisplayString = > this.CreateDebugString ( x = > x.Id ) ; public override string ToString ( ) = > DebuggerDisplayString ; } } namespace Kf.CANetCore31.Core.Domain.People { [ DebuggerDisplay ( `` { DebuggerDisplayString , nq } '' ) ] public sealed class Person : Entity { public static Person Empty = > new Person ( ) ; public static Person Create ( Name name ) = > new Person ( name ) ; public static Person Create ( Id id , Name name ) = > new Person ( id , name ) ; private Person ( Id id , Name name ) : base ( id ) = > Name = name ; private Person ( Name name ) : this ( Id.Empty , name ) { } private Person ( ) : this ( Name.Empty ) { } public Number Number = > Number.For ( this ) ; public Name Name { get ; } public override string DebuggerDisplayString = > this.CreateDebugString ( x = > x.Number.Value , x = > x.Name ) ; } }"
//Take a timestamp beforevar before = DateTime.UtcNow ; DoCriticalMethod ( ) ; //Take a timestamp aftervar after = DateTime.UtcNow ; //Take the number beforeint gc2CountBefore = GC.CollectionCount ( 2 ) ; ... //Take the number afterbool hasgc2occured = ( GC.CollectionCount ( 2 ) - gc2CountBefore ) ! = 0 ;
UnmanagedFunction ( arg = > somebody ) ;
"public class StreamingSubscriber { private readonly ILogic _logic ; public StreamingSubscriber ( ILogic logic ) { _logic = logic ; // Not sure I like this ... _logic.StreamingSubscriber = this ; } public void OnNotificationEvent ( object sender , NotificationEventArgs args ) { // Do something with _logic var email = _logic.FetchEmail ( args ) ; // consume the email ( omitted for brevity ) } } public class ExchangeLogic : ILogic { public StreamingSubscriber StreamingSubscriber { get ; set ; } public void Subscribe ( ) { // Here is where I use StreamingSubscriber streamingConnection.OnNotificationEvent += StreamingSubscriber.OnNotificationEvent ; } public IEmail FetchEmail ( NotificationEventArgs notificationEventArgs ) { // Fetch email from Exchange } } [ Test ] public void FiringOnNotificationEvent_WillConsumeEmail ( ) { // Arrange var subscriber = new StreamingSubscriber ( ConsumerMock.Object , ExchangeLogicMock.Object ) ; // Act subscriber.OnNotificationEvent ( It.IsAny < object > ( ) , It.IsAny < NotificationEventArgs > ( ) ) ; // Assert ConsumerMock.Verify ( x = > x.Consume ( It.IsAny < IEmail > ( ) ) , Times.Once ( ) ) ; }"
"var status = new ProgressStatus ( 50 , `` Working on it '' ) ; //plus many more fields in constructorlock ( _statusLocker ) _status = status ; // Very brief lock public GetProgressStatus ( ) { var status = new ProgressStatus ( _status.ID , _status.Description ) ; return status }"
if ( true ) { int x = 0 ; } int x = 0 ; if ( true ) { int x = 0 ; } x = 0 ;
"public interface ITestMe { string TakeInt64 ( long x ) ; } public void Test ( ) { var mock1 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr1 = x = > x.TakeInt64 ( 2 ) ; Console.WriteLine ( expr1 ) ; mock1.Setup ( expr1 ) .Returns ( `` OK '' ) ; var s1 = mock1.Object.TakeInt64 ( 2L ) ; // OK var mock2 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr2 = x = > x.TakeInt64 ( DateTime.Today.Year / 1000 ) ; Console.WriteLine ( expr2 ) ; mock2.Setup ( expr2 ) .Returns ( `` OK '' ) ; var s2 = mock2.Object.TakeInt64 ( 2L ) ; // OK var mock3 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr3 = x = > x.TakeInt64 ( ( int ) ( DayOfWeek ) Enum.Parse ( typeof ( DayOfWeek ) , `` Tuesday '' ) ) ; Console.WriteLine ( expr3 ) ; mock3.Setup ( expr3 ) .Returns ( `` OK '' ) ; var s3 = mock3.Object.TakeInt64 ( 2L ) ; // OK var mock4 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr4 = x = > x.TakeInt64 ( GetInt32 ( ) ) ; Console.WriteLine ( expr4 ) ; mock4.Setup ( expr4 ) .Returns ( `` OK '' ) ; //var s4 = mock4.Object.TakeInt64 ( 2L ) ; // MockException , All invocations on the mock must have a corresponding setup . var mock5 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr5 = x = > x.TakeInt64 ( int.Parse ( `` 2 '' ) ) ; Console.WriteLine ( expr5 ) ; mock5.Setup ( expr5 ) .Returns ( `` OK '' ) ; //var s5 = mock5.Object.TakeInt64 ( 2L ) ; // MockException , All invocations on the mock must have a corresponding setup . var mock6 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr6 = x = > x.TakeInt64 ( GetInt32 ( ) + 0 ) ; Console.WriteLine ( expr6 ) ; mock6.Setup ( expr6 ) .Returns ( `` OK '' ) ; var s6 = mock6.Object.TakeInt64 ( 2L ) ; // OK var mock7 = new Mock < ITestMe > ( MockBehavior.Strict ) ; Expression < Func < ITestMe , string > > expr7 = x = > x.TakeInt64 ( 1 * int.Parse ( `` 2 '' ) ) ; Console.WriteLine ( expr7 ) ; mock7.Setup ( expr7 ) .Returns ( `` OK '' ) ; var s7 = mock7.Object.TakeInt64 ( 2L ) ; // OK } static int GetInt32 ( ) { return 2 ; }"
class Product { public string Name ; public double Rating ; public List < Product > RelatedProducts ; // ... public List < Product > GetTopRelatedProducts ( int N ) { // How to implement this method // What I did so far ( Bad code ) // 1- INFINITE RECURSION // 2- Can not remember visited objects var myList = new List < Product > ( ) ; foreach ( Product prod in RelatedProducts ) { myList.AddRange ( prod.GetTopRelatedProducts ( N ) ) ; } return myList.Distinct ( ) .OrderByDescending ( x = > x.Rating ) .Take ( N ) .ToList ( ) ; } }
"< startup useLegacyV2RuntimeActivationPolicy= '' true '' > < supportedRuntime version= '' v4.0 '' sku= '' .NETFramework , Version=v4.6 '' / > < /startup > public interface IMyServiceCallback { void UnrelatedNotifyClientsMethod ( Notification message ) ; } [ ServiceContract ( CallbackContract = typeof ( IMyServiceCallback ) ) ] public interface IMyService { // ... [ OperationContract ( AsyncPattern = true ) ] IAsyncResult BeginFetchSomething ( int howMany , AsyncCallback callback , object state ) ; FetchSomethingResult EndFetchSomething ( IAsyncResult result ) ; // ... } [ ServiceBehavior ( InstanceContextMode = InstanceContextMode.Single , ConcurrencyMode = ConcurrencyMode.Multiple ) ] public class MyService : IMyService { // ... [ PermissionSetAttribute ( SecurityAction.LinkDemand , Name = `` FullTrust '' ) ] public IAsyncResult BeginFetchSomething ( int howMany , AsyncCallback callback , object state ) { AsyncResult < FetchSomethingResult > something = new AsyncResult < FetchSomethingResult > ( callback , state ) ; BackgroundWorker backgroundWorker = new BackgroundWorker ( ) ; backgroundWorker.DoWork += new DoWorkEventHandler ( ( sender , args ) = > { try { FetchSomethingResult resultData = Database.FetchSomethingQuery ( howMany ) ; something.Result = resultData ; something.Complete ( true ) ; } catch ( Exception e ) { Log ( e ) ; something.HandleException ( e , false ) ; } backgroundWorker.Dispose ( ) ; } ) ; backgroundWorker.RunWorkerAsync ( ) ; return something ; } public FetchSomethingResult EndFetchSomething ( IAsyncResult result ) { AsyncResult < FetchSomethingResult > something = result as AsyncResult < FetchSomethingResult > ; something.AsyncWaitHandle.WaitOne ( ) ; return something.Result ; } // ... // other similar methods // ... } public class AsyncResult : IAsyncResult { // ... public void Complete ( bool completedSynchronously ) { lock ( this.Mutex ) { this.IsCompleted = true ; this.CompletedSynchronously = completedSynchronously ; } this.SignalCompletion ( ) ; } protected void SignalCompletion ( ) { ( this.AsyncWaitHandle as ManualResetEvent ) .Set ( ) ; ThreadPool.QueueUserWorkItem ( d = > { this.InvokeCallback ( ) ; } ) ; } protected void InvokeCallback ( ) { if ( this.Callback ! = null ) { this.Callback ( this ) ; } } public void HandleException ( Exception e , bool completedSynchronously ) { lock ( this.Mutex ) { this.IsCompleted = true ; this.CompletedSynchronously = completedSynchronously ; this.Exception = e ; } this.SignalCompletion ( ) ; } // ... } [ System.CodeDom.Compiler.GeneratedCodeAttribute ( `` System.ServiceModel '' , `` 4.0.0.0 '' ) ] public partial class MyServiceClient : System.ServiceModel.DuplexClientBase < NameSpace.ServiceClients.IMyServiceClient > , NameSpace.ServiceClients.IMyServiceCliene { // ... public NameSpace.ServiceClients.FetchSomethingResult FetchSomething ( int howMany ) { return base.Channel.FetchSomething ( howMany ) ; } // ... }"
List < long > longList = new List < long > ( 10000000 ) bool found = longList.Contains ( 4345235234524245124L ) ;
double d = 9000000000000000000d ; while ( d == 9000000000000000000d ) { d += 500 ; Console.WriteLine ( d ) ; }
"List < int > nums = new List < int > ( ) { 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 } ; List < int > distinctNums = nums.Distinct ( ) .ToList ( ) ; int [ ] distinctNums2 = nums.Distinct ( ) .ToArray ( ) ;"
( App.Current as App ) .Users
return text ? .IndexOf ( ' A ' ) ! = -1 ; return text == null || text.IndexOf ( ' A ' ) ! = -1 ; return text ! = null & & text.IndexOf ( ' A ' ) ! = -1 ;
"public abstract class LeaseTests < T > { private static readonly object s_lock = new object ( ) ; private static IEnumerable < T > s_sampleValues = Array.Empty < T > ( ) ; private static void AssignToSampleValues ( Func < IEnumerable < T > , IEnumerable < T > > func ) { lock ( s_lock ) { s_sampleValues = func ( s_sampleValues ) ; } } public LeaseTests ( ) { AssignToSampleValues ( s = > s.Concat ( CreateSampleValues ( ) ) ) ; } public static IEnumerable < object [ ] > SampleValues ( ) { foreach ( T value in s_sampleValues ) { yield return new object [ ] { value } ; } } protected abstract IEnumerable < T > CreateSampleValues ( ) ; } // Specialize the test class for different typespublic class IntLeaseTests : LeaseTests < int > { protected override IEnumerable < int > CreateSampleValues ( ) { yield return 3 ; yield return 0 ; yield return int.MaxValue ; yield return int.MinValue ; } } [ Theory ] [ MemberData ( nameof ( SampleValues ) ) ] public void ItemShouldBeSameAsPassedInFromConstructor ( T value ) { var lease = CreateLease ( value ) ; Assert.Equal ( value , lease.Item ) ; }"
"struct Foo { int mA ; public int A { get { return mA ; } } int mB ; public int B { get { return mB ; } } public Foo ( int a , int b ) { mA = a ; mB = b ; } } Foo [ ] foos = new Foo [ 10 ] ; foos [ 1 ] = new Foo ( 20 , 10 ) ;"
public class Foo { } public class Bar { } public static class FooExtensions { public static TFoo Frob < TFoo > ( this TFoo foo ) where TFoo : Foo { } public static TFoo Brob < TFoo > ( this TFoo foo ) where TFoo : Foo { } } public static class BarExtensions { public static TBar Frob < TBar > ( this TBar bar ) where TBar : Bar { } } new Foo ( ) .Frob ( ) .Brob ( )
{ { $ myTagThing $ } } { $ myTagThing $ }
public int MyClass { public int One { get ; set ; } public int Two { get ; set ; } }
context.Evaluation.Where ( e = > e.Case.CaseNumber.Contains ( inputModel.CaseNumber ) & & e.Case.OrganizationId == inputModel.OrganizationId ) context.Evaluation.Where ( e = > e.Case.OrganizationId == inputModel.OrganizationId ) & & e.Case.CaseNumber.Contains ( inputModel.CaseNumber )
"class Generator { public IEnumerable < int > Gen ( int size ) { return Enumerable.Range ( 0 , size ) ; } } class bar { public void doit ( ) { var foo = from r in Enumerable.Range ( 1 , 3 ) from g in new Generator ( ) .Gen ( r ) select g ; } }"
"private UpdaterManifest GetUpdaterManifest ( ) { string filePathAndName = Path.Combine ( this._sourceBinaryPath , this._appName + `` .UpdaterManifest '' ) ; if ( ! File.Exists ( filePathAndName ) ) { // This line of code gets executed : throw new FileNotFoundException ( `` The updater manifest file was not found . This file is necessary for the program to run . `` , filePathAndName ) ; } UpdaterManifest updaterManifest ; using ( FileStream fileStream = new FileStream ( filePathAndName , FileMode.Open ) ) { // ... so how is it that the debugger stops here and the call stack shows // this line of code as the current line ? How can we throw an exception // above and still get here ? XmlSerializer xmlSerializer = new XmlSerializer ( typeof ( UpdaterManifest ) ) ; updaterManifest = xmlSerializer.Deserialize ( fileStream ) as UpdaterManifest ; } return updaterManifest ; }"
public sealed class Singleton { private static readonly Singleton instance = new Singleton ( ) ; public static string Stub ( ) { return `` 123 '' ; } // Explicit static constructor to tell C # compiler // not to mark type as beforefieldinit //static Singleton ( ) // { // } private Singleton ( ) { Console.WriteLine ( `` private ctor '' ) ; } public static Singleton Instance { get { return instance ; } } } public static void DoSomething ( bool which ) { if ( which ) { var a = Singleton.Stub ( ) ; } else { Faketon.Stub ( ) ; } }
"using Microsoft.VisualStudio.TestTools.UnitTesting ; using System ; using System.Linq ; using System.Threading ; using System.Threading.Tasks ; namespace Example.Test { public class MyObject < T > where T : class { private readonly object _lock = new object ( ) ; private T _value = null ; public T Get ( Func < T > creator ) { if ( _value == null ) { lock ( _lock ) { if ( _value == null ) { _value = creator ( ) ; } } } return _value ; } } [ TestClass ] public class UnitTest1 { [ TestMethod ] public void MultipleParallelGetShouldLaunchGetFunctionOnlyOnce ( ) { int getFunctionExecuteCount = 0 ; var cache = new MyObject < string > ( ) ; Func < string > creator = ( ) = > { Interlocked.Increment ( ref getFunctionExecuteCount ) ; return `` Hello World ! `` ; } ; // Launch a very big number of thread to be sure Parallel.ForEach ( Enumerable.Range ( 0 , 100 ) , _ = > { cache.Get ( creator ) ; } ) ; Assert.AreEqual ( 1 , getFunctionExecuteCount ) ; } } } using NUnit.Framework ; using System ; using System.Linq ; using System.Threading ; using System.Threading.Tasks ; namespace Example.Test { public class MyObject < T > where T : class { private readonly object _lock = new object ( ) ; private T _value = null ; public T Get ( Func < T > creator ) { if ( _value == null ) { // oups , some intern broke the code //lock ( _lock ) { if ( _value == null ) { _value = creator ( ) ; } } } return _value ; } } [ TestFixture ] public class UnitTest1 { [ Test ] public void MultipleParallelGetShouldLaunchGetFunctionOnlyOnce ( ) { int getFunctionExecuteCount = 0 ; var cache = new MyObject < string > ( ) ; Func < string > creator = ( ) = > { Interlocked.Increment ( ref getFunctionExecuteCount ) ; return `` Hello World ! `` ; } ; Parallel.ForEach ( Enumerable.Range ( 0 , 2 ) , threadIndex = > { // testing server has lag Thread.Sleep ( threadIndex * 1000 ) ; cache.Get ( creator ) ; } ) ; // 1 test passed : ' ( Assert.AreEqual ( 1 , getFunctionExecuteCount ) ; } } }"
"public bool func ( int ) ; Func < int , bool f = myType.GetMember ( mi.Name ) ;"
"var personsAndOldest = db.Persons.GroupBy ( person = > person.SomeThingThatCanBeGroupedForPerson ) .Select ( a = > new { FirstName = a.FirstOrDefault ( ) .FirstName , LastName = a.FirstOrDefault ( ) .LastName , BirthDate = a.FirstOrDefault ( ) .BirthDate , FullnameOfOldes = a.Aggregate ( ( pers1 , pers2 ) = > pers1.BirthDate > pers2.BirthDate ? pers1 : pers2 ) .FirstName + `` `` //How do I get LastName of the old one ( without using the full aggregate again ) } ) ;"
Exception System.InvalidOperationException at 105Finally at 105 ... Exception System.InvalidOperationException at 55Finally at 55Exception System.InvalidOperationException at 54Finally at 54Process is terminated due to StackOverflowException . The program ' [ xxxxx ] Test.vshost.exe ' has exited with code -2147023895 ( 0x800703e9 ) . public class Program { private class Test { private int maxDepth ; private int CalculateWithLazy ( int depth ) { try { var lazy = new Lazy < int > ( ( ) = > this.Calculate ( depth ) ) ; return lazy.Value ; } catch ( Exception e ) { Console.WriteLine ( `` Exception `` + e.GetType ( ) + `` at `` + depth ) ; throw ; } finally { Console.WriteLine ( `` Finally at `` + depth ) ; } } private int Calculate ( int depth ) { if ( depth > = this.maxDepth ) throw new InvalidOperationException ( `` Max . recursion depth reached . `` ) ; return this.CalculateWithLazy ( depth + 1 ) ; } public void Run ( ) { for ( int i = 1 ; i < 100000 ; i++ ) { this.maxDepth = i ; try { Console.WriteLine ( `` MaxDepth : `` + i ) ; this.CalculateWithLazy ( 0 ) ; } catch { /* ignore */ } } } } public static void Main ( string [ ] args ) { var test = new Test ( ) ; test.Run ( ) ; Console.Read ( ) ; } [ MethodImpl ( MethodImplOptions.NoInlining ) ] private int Calculate ( int depth ) { try { if ( depth > = this.maxDepth ) throw new InvalidOperationException ( `` Max . recursion depth reached . `` ) ; return this.Calculate2 ( depth + 1 ) ; } catch { throw ; } } [ MethodImpl ( MethodImplOptions.NoInlining ) ] private int Calculate2 ( int depth ) // just to prevent the compiler from tail-recursion-optimization { return this.Calculate ( depth ) ; } public void Run ( ) { for ( int i = 1 ; i < 100000 ; i++ ) { this.maxDepth = i ; try { Console.WriteLine ( `` MaxDepth : `` + i ) ; this.Calculate ( 0 ) ; } catch ( Exception e ) { Console.WriteLine ( `` Finished with `` + e.GetType ( ) ) ; } } }
locker = new object ( ) ; lock ( locker ) { for ( int i = 0 ; i < 3 ; i++ ) ver_store [ i ] = atomic_Poll ( power ) ; }
"static void Main ( string [ ] args ) { RunTimer ( ) ; GC.Collect ( ) ; Console.ReadKey ( ) ; } public static void RunTimer ( ) { new Timer ( s = > Console.WriteLine ( `` Hello '' ) , null , TimeSpan.FromSeconds ( 1 ) , TimeSpan.Zero ) ; } public static void RunTimer ( ) { var timer = new Timer ( s = > Console.WriteLine ( `` Hello '' ) ) ; timer.Change ( TimeSpan.FromSeconds ( 1 ) , TimeSpan.Zero ) ; }"
"SELECT * FROM AdminUsers WHERE username = 'admin ' COLLATE SQL_Latin1_General_CP1_CS_AS AND Password = ( SELECT HASHBYTES ( 'SHA1 ' , 'admin123 ' ) ) dbManager.Command.CommandText = @ '' SELECT * FROM AdminUsers WHERE username= @ UserName COLLATE SQL_Latin1_General_CP1_CS_AS ANDPassword = ( SELECT HASHBYTES ( 'SHA1 ' , @ Password ) ) '' ; dbManager.Command.Parameters.AddWithValue ( `` @ userName '' , username ) ; dbManager.Command.Parameters.AddWithValue ( `` @ Password '' , password ) ; reader = dbManager.GetDataReader ( ) ; if ( reader.Read ( ) == true ) { //USER VALIDATED }"
"internal class BulletManager : GameComponent { public static float CurrentDrawDepth = .82f ; private readonly List < Bullet > _bullets = new List < Bullet > ( ) ; private readonly int _processorCount ; private int _counter ; private readonly Task [ ] _tasks ; public BulletManager ( Game game ) : base ( game ) { _processorCount = VariableProvider.ProcessorCount ; _tasks = new Task [ _processorCount ] ; } public void ClearAllBullets ( ) { _bullets.Clear ( ) ; } public void AddBullet ( Bullet bullet ) { _bullets.Add ( bullet ) ; } public override void Update ( GameTime gameTime ) { if ( StateManager.GameState ! = GameStates.Ingame & & ( StateManager.GameState ! = GameStates.Editor || EngineStates.GameStates ! = EEngineStates.Running ) ) return ; var bulletCount = _bullets.Count ; var bulletsToProcess = bulletCount / _processorCount ; //Split up the bullets to update among all available cores using Tasks and a lambda expression for ( var i = 0 ; i < _processorCount ; ++i ) { var x = i ; _tasks [ i ] = Task.Factory.StartNew ( ( ) = > { for ( var j = bulletsToProcess * x ; j < bulletsToProcess * x + bulletsToProcess ; ++j ) { if ( _bullets [ j ] .Active ) _bullets [ j ] .Update ( ) ; } } ) ; } //Update the remaining bullets ( if any ) for ( var i = bulletsToProcess * _processorCount ; i < bulletCount ; ++i ) { if ( _bullets [ i ] .Active ) _bullets [ i ] .Update ( ) ; } //Wait for all tasks to finish Task.WaitAll ( _tasks ) ; //This is an attempt to reduce the load per frame , originally _bullets.RemoveAll ( s = > ! s.Active ) ran every frame . ++_counter ; if ( _counter ! = 300 ) return ; _counter = 0 ; _bullets.RemoveAll ( s = > ! s.Active ) ; } public void Draw ( SpriteBatch spriteBatch ) { if ( StateManager.GameState ! = GameStates.Ingame & & StateManager.GameState ! = GameStates.Editor ) return ; spriteBatch.DrawString ( FontProvider.GetFont ( `` Mono14 '' ) , _bullets.Count.ToString ( ) , new Vector2 ( 100 , 20 ) , Color.White ) ; //Using some LINQ to only draw bullets in the viewport foreach ( var bullet in _bullets.Where ( bullet = > Camera.ViewPort.Contains ( bullet.CircleCollisionCenter.ToPoint ( ) ) ) ) { bullet.Draw ( spriteBatch ) ; CurrentDrawDepth -= .82e-5f ; } CurrentDrawDepth = .82f ; } }"
"< select name= '' testfoo123 '' multiple= '' multiple '' size= '' 15 '' > < option value= '' PARENT1 '' > Parent < /option > < option value= '' CHILD1 '' > & nbsp ; I am indented < /option > < option value= '' CHILD2 '' > & nbsp ; I am indented < /option > < option value= '' PARENT1 '' > Parent2 < /option > < option value= '' CHILD1 '' > & nbsp ; I am indented < /option > < option value= '' CHILD2 '' > & nbsp ; I am indented < /option > < /select > @ Html.ListBoxFor ( model = > mySelectedValues , new MultiSelectList ( myValues ) , new { size = `` 15 '' } )"
ICollection collection = // ... public void DoWork ( ) { DateTime timestamp = DateTime.Now ; lock ( collection.SyncRoot ) { // critical section } }
private string EscapeXML ( string nodeText ) { if ( ! SecurityElement.IsValidText ( nodeText ) ) { return SecurityElement.Escape ( nodeText ) ; } return nodeText ; }
"class Program { public enum Option { Option_A = 1 , Option_B = 2 , Option_C = 4 , Option_D = 8 , } static void Main ( string [ ] args ) { int activeOption = 5 ; // Means I activeted the Option_A and Option_C if ( IsOption ( activeOption , Option.Option_A ) ) { /*do work*/ } if ( IsOption ( activeOption , Option.Option_B ) ) { /*do work*/ } if ( IsOption ( activeOption , Option.Option_C ) ) { /*do work*/ } if ( IsOption ( activeOption , Option.Option_D ) ) { /*do work*/ } } private static bool IsOption ( int activeOption , Option option ) { /*Evaluate if IsOption is true or false*/ throw new NotImplementedException ( ) ; } }"
var count = materials.Where ( i = > i.MaterialType1 == MaterialType.Major ) .Count ( ) ; var count = materials.Count ( i = > i.MateriakType1 == MaterialType.Major ) ;
"private static void SyntaxValidator ( SyntaxNodeAnalysisContext context ) { var creation = ( ObjectCreationExpressionSyntax ) context.Node ; var variableType = creation.Type as IdentifierNameSyntax ; if ( variableType == null ) return ; var variableTypeInfo = context.SemanticModel.GetTypeInfo ( context.Node ) ; if ( variableTypeInfo.Type ! = null & & variableTypeInfo.Type.ToDisplayString ( ) .Equals ( `` System.Collections.ArrayList '' ) ) { context.ReportDiagnostic ( Diagnostic.Create ( Rule , creations.GetLocation ( ) , `` '' ) ) ; } }"
"TypeBuilder tb = moduleBuilder.DefineType ( myname , TypeAttributes.Class | TypeAttributes.Public , typeof ( BaseClass ) , new Type [ ] { typeof ( ImyInterface ) } ) ; // t is Type 'myName'Type baseInterface = t.GetInterface ( typeof ( ImyInterface ) .name ) ; if ( baseType ! = null ) { // this is actually true , as I expected } if ( typeof ( ImyInterface ) .isAssignableFrom ( t ) ) { // the if clause is false , but I do n't have a clue why ? ? } public interface ITestInterface { int CalcSquaredInteger ( int number ) ; }"
if ( disposed ) throw new ObjectDisposedException ( ) ;
"public static DateTime GetFdate ( string _Edate ) { DateTime fdate = Convert.ToDateTime ( _Edate ) ; GregorianCalendar gcalendar = new GregorianCalendar ( ) ; PersianCalendar pcalendar = new PersianCalendar ( ) ; DateTime fDate = gcalendar.ToDateTime ( pcalendar.GetYear ( fdate ) , pcalendar.GetMonth ( fdate ) , pcalendar.GetDayOfMonth ( fdate ) , pcalendar.GetHour ( fdate ) , pcalendar.GetMinute ( fdate ) , pcalendar.GetSecond ( fdate ) , 0 ) ; return fDate ; } DateTime dt = GetFdate ( `` 2015-07-22 00:00:00.000 '' ) ; An unhandled exception of type 'System.ArgumentOutOfRangeException ' occurred in mscorlib.dllAdditional information : Year , Month , and Day parameters describe an un-representable DateTime . DateTime dt = GetFdate ( `` 2015-06-29 00:00:00.000 '' ) ;"
"class Pets { public IEnumerable < Cat > Cats { get ; set ; } public IEnumerable < Dog > Dogs { get ; set ; } } Pets GetPets ( IEnumerable < PetRequest > requests ) { ... } class PetProvider { IEnumerable < PetData > GetPets ( IEnumerable < PetRequest > requests ) { return HandleAllRequests ( requests ) ; } } Pets GetPets ( IEnumerable < PetRequest > requests ) { var data = petProvider.GetPets ( requests ) ; var dataGroups = from d in data group d by d.Sound into g select new { Sound = g.Key , PetData = g } ; IEnumerable < Cat > cats = null ; IEnumerable < Dog > dogs = null ; foreach ( var g in dataGroups ) if ( g.Sound == `` Bark '' ) dogs = g.PetData.Select ( d = > ConvertDog ( d ) ) ; else if ( g.Sound == `` Meow '' ) cats = g.PetData.Select ( d = > ConvertCat ( d ) ) ; return new Pets { Cats = cats , Dogs = dogs } ; }"
public class Something { private static int number ; static Something ( ) { int number = 10 ; // Syntax to distingish between local variable and static variable ? } }
< Grid > < WebBrowser x : Name= '' browser '' / > < /Grid > public MainWindow ( ) { InitializeComponent ( ) ; browser.NavigateToString ( `` < html > < script > function callMe ( ) { alert ( 'Hello ' ) ; } document.myfunc = callMe ; < /script > < body > Hello World < /body > < /html > '' ) ; dynamic doc = browser.Document ; doc.myfunc ( ) ; } public MainWindow ( ) { InitializeComponent ( ) ; browser.NavigateToString ( `` < html > < script > function callMe ( ) { alert ( 'Hallo ' ) ; } < /script > < body > Hello World < /body > < /html > '' ) ; browser.InvokeScript ( `` callMe '' ) ; }
public class CatDto { public int Id { get ; set ; } [ Required ] public string Name { get ; set ; } [ Required ] public bool IsFriendly { get ; set ; } }
"string s = `` M , k , m , S,3 , a,5 , E,2 , Q,7 , E,8 , J,4 , Y,1 , m,8 , N,3 , P,5 , H '' ; var items = s.split ( ' , ' ) ; var topThree = items.Take ( 3 ) ; var alternating1 = items.Skip ( 3 ) .Take ( 1 ) .Skip ( 1 ) .Take ( 1 ) .Skip ( 1 ) .Take ( 1 ) .Skip ( 1 ) .Take ( 1 ) ;"
"return PartialView ( `` Categorias '' , lista ) ; return PartialView ( `` Cat '' + `` egorias '' , lista ) ;"
"[ TestFixture ] public class TestClass_A { private ITitleBarMessageModel model ; private ITitleBarMessage message ; private HideCurrentTitleBarMessageTask task ; private bool taskCompleteFired ; [ SetUp ] public void SetUp ( ) { taskCompleteFired = false ; model = Substitute.For < ITitleBarMessageModel > ( ) ; message = Substitute.For < ITitleBarMessage > ( ) ; //model.currentlyDisplayedMessage = null ; task = new HideCurrentTitleBarMessageTask ( ) ; task.Init ( model ) ; task.Completed += ( t ) = > { taskCompleteFired = true ; } ; } [ Test ] public void Test_A ( ) { task.Execute ( ) ; Assert.That ( taskCompleteFired , Is.True ) ; } [ Test ] public void Test_B ( ) { model.currentlyDisplayedMessage.Returns ( message ) ; task.Execute ( ) ; message.Received ( 1 ) .Hide ( ) ; Assert.That ( taskCompleteFired , Is.False ) ; } } public override void Execute ( ) { if ( model.currentlyDisplayedMessage ! = null ) { //Some irrelevant stuff } else { Completed ( this ) ; } } model = Substitute.For < ITitleBarMessageModel > ( ) ; //model.curentlyDisplayedMessage = null ; model = Substitute.For < ITitleBarMessageModel > ( ) ;"
double number = 123.4567 ; var str = $ '' { { { number : F2 } } } '' ; //I want to get `` { 123.45 } '' Console.WriteLine ( str ) ; // Will print `` { F2 } '' ___pair____ | | $ '' { { { number : F2 } } } '' ; var str = $ '' { { { number : F2 } } } '' ; // This will be `` { 123.45 } '' var s = $ '' { { { number : F2 } { ' } ' } '' ;
"var values = new List < int > { 123 , 432 , 768 } ; var funcs = new List < Func < int > > ( ) ; values.ForEach ( v= > funcs.Add ( ( ) = > v ) ) ; funcs.ForEach ( f= > Console.WriteLine ( f ( ) ) ) ; //prints 123,432,768 funcs.Clear ( ) ; foreach ( var v1 in values ) { funcs.Add ( ( ) = > v1 ) ; } foreach ( var func in funcs ) { Console.WriteLine ( func ( ) ) ; //prints 768,768,768 }"
"public void ConfigureServices ( IServiceCollection services ) { ... snip ... services.AddMvcCore ( ) .AddAuthorization ( ) .AddFormatterMappings ( ) .AddJsonFormatters ( options = > { options.ContractResolver = new CamelCasePropertyNamesContractResolver ( ) ; options.Formatting = Formatting.Indented ; options.DateFormatHandling = DateFormatHandling.IsoDateFormat ; options.NullValueHandling = NullValueHandling.Ignore ; options.Converters.Add ( new StringEnumConverter ( ) ) ; } ) .AddCors ( ) ; // REF : https : //docs.microsoft.com/en-us/aspnet/core/security/cors # setting-up-cors ... snip ... } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... snip ... app.UseExceptionHandler ( options = > options.Run ( async httpContext = > await ExceptionResponseAsync ( httpContext , true ) ) ) ; app.UseCors ( builder = > builder//.WithOrigins ( `` http : //localhost:52383 '' , `` http : //localhost:49497 '' ) .AllowAnyOrigin ( ) .AllowAnyHeader ( ) .AllowAnyMethod ( ) ) ; ... snip ... } private static async Task ExceptionResponseAsync ( HttpContext httpContext , bool isDevelopmentEnvironment ) { var exceptionFeature = httpContext.Features.Get < IExceptionHandlerPathFeature > ( ) ; if ( exceptionFeature == null ) { // An unknow and unhandled exception occured . So this is like a fallback . exceptionFeature = new ExceptionHandlerFeature { Error = new Exception ( `` An unhandled and unexpected error has occured . Ro-roh : ~ ( . '' ) } ; } await ConvertExceptionToJsonResponseAsyn ( exceptionFeature , httpContext.Response , isDevelopmentEnvironment ) ; } private static Task ConvertExceptionToJsonResponseAsyn ( IExceptionHandlerPathFeature exceptionFeature , HttpResponse response , bool isDevelopmentEnvironment ) { if ( exceptionFeature == null ) { throw new ArgumentNullException ( nameof ( exceptionFeature ) ) ; } if ( response == null ) { throw new ArgumentNullException ( nameof ( response ) ) ; } var exception = exceptionFeature.Error ; var includeStackTrace = false ; var statusCode = HttpStatusCode.InternalServerError ; var error = new ApiError ( ) ; if ( exception is ValidationException ) { statusCode = HttpStatusCode.BadRequest ; foreach ( var validationError in ( ( ValidationException ) exception ) .Errors ) { error.AddError ( validationError.PropertyName , validationError.ErrorMessage ) ; } } else { // Final fallback . includeStackTrace = true ; error.AddError ( exception.Message ) ; } if ( includeStackTrace & & isDevelopmentEnvironment ) { error.StackTrace = exception.StackTrace ; } var json = JsonConvert.SerializeObject ( error , JsonSerializerSettings ) ; response.StatusCode = ( int ) statusCode ; response.ContentType = JsonContentType ; // response.Headers.Add ( `` Access-Control-Allow-Origin '' , `` * '' ) ; < -- Do n't want to hard code this . return response.WriteAsync ( json ) ; }"
[ TestMethod ] public void Memory ( ) { var wr = new WeakReference ( `` aaabbb '' ) ; Assert.IsTrue ( wr.IsAlive ) ; GC.Collect ( ) ; GC.Collect ( ) ; GC.Collect ( ) ; GC.Collect ( ) ; GC.Collect ( ) ; Assert.IsFalse ( wr.IsAlive ) ; // < -- fails here } var wr = new WeakReference ( new object ( ) ) ;
"{ 'people ' : { ' $ type ' : 'System.Collections.Generic.List ` 1 [ [ MyNamespace.Person , MyDll ] ] , mscorlib ' , ' $ values ' : [ { 'name ' : 'Alan ' } , { 'name ' : 'Bob ' } ] } } < people json : type= '' System.Collections.Generic.List ` 1 [ [ MyNamespace.Person , MyDll ] ] , mscorlib '' > < person > < name > Alan < /name > < /person > < person > < name > Bob < /name > < /person > < /people > < person > < name > Alan < /name > < /item > < person > < name > Bob < /name > < /item >"
"public static string Replace ( string text , string oldValue , string newValue ) { int index = text.IndexOf ( oldValue , StringComparison.CurrentCulture ) ; return index > = 0 ? text.Substring ( 0 , index ) + newValue + text.Substring ( index + oldValue.Length ) : text ; } // \u0301 is Combining Acute AccentConsole.WriteLine ( Replace ( `` déf '' , `` é '' , `` o '' ) ) ; // 1 . CORRECT : dofConsole.WriteLine ( Replace ( `` déf '' , `` e\u0301 '' , `` o '' ) ) ; // 2 . INCORRECT : doConsole.WriteLine ( Replace ( `` de\u0301f '' , `` é '' , `` o '' ) ) ; // 3 . INCORRECT : dóf Console.WriteLine ( Replace ( `` œf '' , `` œ '' , `` i '' ) ) ; // 4 . CORRECT : ifConsole.WriteLine ( Replace ( `` œf '' , `` oe '' , `` i '' ) ) ; // 5 . INCORRECT : iConsole.WriteLine ( Replace ( `` oef '' , `` œ '' , `` i '' ) ) ; // 6 . INCORRECT : ief"
"public class CustomerClass { private Config cfg = ( Config ) ConfigurationManager.GetSection ( `` Customer '' ) ; public void Run ( ) { var serviceGroups = this.cfg.ServiceDeskGroups.Select ( n = > n.Group ) .ToList ( ) ; var groupedData = DataReader.GetSourceData ( ) .AsEnumerable ( ) .GroupBy ( n = > n.Field < int > ( `` ID '' ) ) ; Parallel.ForEach < IGrouping < int , DataRow > , CustomerDataContext > ( groupedData , ( ) = > new CustomerDataContext ( ) , ( g , _ , ctx ) = > { var inter = this.FindOrCreateInteraction ( ctx , g.Key ) ; inter.ID = g.Key ; inter.Title = g.First ( ) .Field < string > ( `` Title '' ) ; this.CalculateSomeProperty ( ref inter , serviceGroups ) ; return ctx ; } , ctx = > ctx.SubmitAllChanges ( ) ) ; } private Interaction FindOrCreateInteraction ( CustomerDataContext ctx , int ID ) { var inter = ctx.Interactions.Where ( n = > n.Id = ID ) .SingleOrDefault ( ) ; if ( inter == null ) { inter = new Interaction ( ) ; ctx.InsertOnSubmit ( inter ) ; } return inter ; } private void CalculateSomeProperty ( ref Interaction inter , IEnumerable < string > serviceDeskGroups ) { // Reads from the List < T > class instance variable . Changes the state of the ref 'd object . if ( serviceGroups.Contains ( inter.Group ) ) { inter.Ours = true ; } } }"
"public static void BulkInsertAll < T > ( this DataContext dc , IEnumerable < T > entities ) { var conn = ( dc.Connection as ProfiledDbConnection ) .InnerConnection as SqlConnection ; conn.Open ( ) ; Type t = typeof ( T ) ; var tableAttribute = ( TableAttribute ) t.GetCustomAttributes ( typeof ( TableAttribute ) , false ) .Single ( ) ; var bulkCopy = new SqlBulkCopy ( conn ) { DestinationTableName = tableAttribute.Name } ; // ... . bulkCopy.WriteToServer ( table ) ; }"
"RegistryKey oKey = Registry.CurrentUser.OpenSubKey ( `` Software '' , true ) ; oKey = oKey.OpenSubKey ( `` Microsoft '' , true ) ; oKey = oKey.OpenSubKey ( `` Windows '' , true ) ; oKey = oKey.OpenSubKey ( `` CurrentVersion '' , true ) ; oKey = oKey.OpenSubKey ( `` Run '' , true ) ; oKey.SetValue ( `` Application 1 '' , `` C : \\path\\to\\ap1.exe '' ) ; oKey.SetValue ( `` Application 2 '' , `` C : \\path\\to\\ap2.exe '' ) ;"
"//Just for testing ! private static Dictionary < string , string > users = new Dictionary < string , string > ( ) { { `` User '' , `` Password '' } } ; [ HttpGet ] public HttpResponseMessage GetSalt ( ) { RNGCryptoServiceProvider secureRNG = new RNGCryptoServiceProvider ( ) ; byte [ ] saltData = new byte [ 64 ] ; secureRNG.GetBytes ( saltData ) ; HttpResponseMessage response = new HttpResponseMessage ( ) ; response.Content = new StringContent ( System.Text.Encoding.Unicode.GetString ( saltData ) , System.Text.Encoding.Unicode ) ; return response ; } [ HttpGet ] public bool ValidateUser ( string userName , string hashedPassword , string salt ) { SHA256Managed hash = new SHA256Managed ( ) ; if ( users.ContainsKey ( userName ) ) { string fullPassword = salt + users [ userName ] ; byte [ ] correctHash = hash.ComputeHash ( System.Text.Encoding.UTF8.GetBytes ( fullPassword ) ) ; if ( hashedPassword.ToUpper ( ) == BitConverter.ToString ( correctHash ) .Replace ( `` - '' , '' '' ) ) { return true ; } } return false ; } $ scope.login = function ( ) { $ http.get ( 'api/Login ' ) .success ( function ( salt ) { //Hash the password with the salt and validate var hashedPassword = sjcl.hash.sha256.hash ( salt.toString ( ) .concat ( $ scope.password ) ) ; var hashString = sjcl.codec.hex.fromBits ( hashedPassword ) ; $ http.get ( 'api/Login ? userName= ' + $ scope.userName + ' & hashedPassword= ' + hashString + ' & salt= ' + salt ) .success ( function ( validated ) { $ scope.loggedIn = validated ; } ) ; } ) ;"
"private string RemoveNonEssentialWords ( string phrase ) { //This array is being created manually for demo purposes . In production code it 's passed in from elsewhere . string [ ] nonessentials = { `` left '' , `` right '' , `` acute '' , `` chronic '' , `` excessive '' , `` extensive '' , `` upper '' , `` lower '' , `` complete '' , `` partial '' , `` subacute '' , `` severe '' , `` moderate '' , `` total '' , `` small '' , `` large '' , `` minor '' , `` multiple '' , `` early '' , `` major '' , `` bilateral '' , `` progressive '' } ; int index = -1 ; for ( int i = 0 ; i < nonessentials.Length ; i++ ) { index = phrase.ToLower ( ) .IndexOf ( nonessentials [ i ] ) ; while ( index > = 0 ) { phrase = phrase.Remove ( index , nonessentials [ i ] .Length ) ; phrase = phrase.Trim ( ) .Replace ( `` `` , `` `` ) ; index = phrase.IndexOf ( nonessentials [ i ] ) ; } } return phrase ; }"
"public class LocalizedDisplayFormatAttribute : DisplayFormatAttribute { private readonly PropertyInfo _propertyInfo ; public LocalizedDisplayFormatAttribute ( string resourceKey , Type resourceType ) : base ( ) { this._propertyInfo = resourceType.GetProperty ( resourceKey , BindingFlags.Static | BindingFlags.Public ) ; if ( this._propertyInfo == null ) { return ; } base.NullDisplayText = ( string ) this._propertyInfo.GetValue ( this._propertyInfo.DeclaringType , null ) ; } public new string NullDisplayText { get { return base.NullDisplayText ; } set { base.NullDisplayText = value ; } } } protected void Application_AcquireRequestState ( object sender , EventArgs e ) { try { HttpCookie cookie = HttpContext.Current.Request.Cookies.Get ( `` CurrentCulture '' ) ; string culutureCode = cookie ! = null & & ! string.IsNullOrEmpty ( cookie.Value ) ? cookie.Value : `` en '' ; CultureInfo ci = new CultureInfo ( culutureCode ) ; System.Threading.Thread.CurrentThread.CurrentUICulture = ci ; System.Threading.Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture ( ci.Name ) ; } catch { } } public class AlarmCodeDetailsViewModel { /// < summary > /// Gets or sets the alarm code ID /// < /summary > public int AlarmCodeID { get ; set ; } /// < summary > /// Gets or sets the alarm code /// < /summary > [ LocalizedDisplayName ( `` Label_AlarmCode '' ) ] [ LocalizedDisplayFormatAttribute ( `` Warning_NullDisplayText '' , typeof ( Properties.Resources ) , HtmlEncode = false ) ] public string Code { get ; set ; } /// < summary > /// Gets or sets the Description /// < /summary > [ LocalizedDisplayName ( `` Label_Description '' ) ] [ LocalizedDisplayFormatAttribute ( `` Warning_NullDisplayText '' , typeof ( Properties.Resources ) , HtmlEncode = false ) ] public string Description { get ; set ; } /// < summary > /// Gets or sets the Notes /// < /summary > [ LocalizedDisplayName ( `` Label_Notes '' ) ] [ LocalizedDisplayFormatAttribute ( `` Warning_NullDisplayText '' , typeof ( Properties.Resources ) , HtmlEncode = false ) ] public string Notes { get ; set ; } }"
"[ Test ( ) ] public void Plane_IntersectionWithPlane_IdenticalPlane ( ) { Plane testPlane = new Plane ( new Direction ( Point.MakePointWithInches ( 2 , -1 , 1 ) ) , Point.MakePointWithInches ( 2 , 1 , 2 ) ) ; Line found = ( testPlane.Intersection ( testPlane ) ) ; Line expected = new Line ( new Direction ( Point.MakePointWithInches ( 0 , -1 , -1 ) ) , Point.MakePointWithInches ( 2 , 1 , 2 ) ) ; Assert.IsTrue ( found.Equals ( expected ) ) ; }"
"using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Text ; using System.Windows.Forms ; namespace WindowsFormsApp2 { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void Form1_Load ( object sender , EventArgs e ) { } } } 0:009 > .cordll -ve -u -lAutomatically loaded SOS ExtensionCLRDLL : Loaded DLL C : \Windows\Microsoft.NET\Framework64\v2.0.50727\mscordacwks.dllCLR DLL status : Loaded DLL C : \Windows\Microsoft.NET\Framework64\v2.0.50727\mscordacwks.dll 0:009 > .loadby sos mscorwks0:009 > .chainExtension DLL search Path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\WINXP ; C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\winext ; C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\winext\arcade ; C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\pri ; C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64 ; C : \Users\username\AppData\Local\Dbg\EngineExtensions ; C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64 ; C : \WINDOWS\system32 ; C : \WINDOWS ; C : \WINDOWS\System32\Wbem ; C : \WINDOWS\System32\WindowsPowerShell\v1.0\ ; C : \Program Files\PuTTY\ ; C : \Program Files ( x86 ) \Bitvise SSH Client ; C : \Program Files\nodejs\ ; C : \Program Files\Microsoft SQL Server\130\Tools\Binn\ ; C : \Program Files\Git\cmd ; C : \Users\username\AppData\Local\Android\sdk\platform-tools ; C : \Program Files ( x86 ) \Nox\bin\ ; C : \Users\username\AppData\Local\Microsoft\WindowsApps ; C : \Users\username\AppData\Roaming\npm ; C : \Program Files ( x86 ) \Nmap ; C : \Program Files ( x86 ) \mitmproxy\binExtension DLL chain : C : \Windows\Microsoft.NET\Framework64\v2.0.50727\sos : image 2.0.50727.8794 , API 1.0.0 , built Tue Jun 20 23:15:41 2017 [ path : C : \Windows\Microsoft.NET\Framework64\v2.0.50727\SOS.dll ] C : \Windows\Microsoft.NET\Framework64\v2.0.50727\SOS.dll : image 2.0.50727.8794 , API 1.0.0 , built Tue Jun 20 23:15:41 2017 [ path : C : \Windows\Microsoft.NET\Framework64\v2.0.50727\SOS.dll ] dbghelp : image 10.0.15063.468 , API 10.0.6 , built Thu Jan 1 03:00:00 1970 [ path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\dbghelp.dll ] ext : image 10.0.15063.468 , API 1.0.0 , built Thu Jan 1 03:00:00 1970 [ path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\winext\ext.dll ] exts : image 10.0.15063.468 , API 1.0.0 , built Thu Jan 1 03:00:00 1970 [ path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\WINXP\exts.dll ] uext : image 10.0.15063.468 , API 1.0.0 , built Thu Jan 1 03:00:00 1970 [ path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\winext\uext.dll ] ntsdexts : image 10.0.15063.468 , API 1.0.0 , built Thu Jan 1 03:00:00 1970 [ path : C : \Program Files ( x86 ) \Windows Kits\10\Debuggers\x64\WINXP\ntsdexts.dll ] 0:009 > gUnable to insert breakpoint 3 at 00000000 ` 008f001a , Win32 error 0n998 `` Invalid access to memory . `` bp3 at 00000000 ` 008f001a failedWaitForEvent failed"
'1980-01-03 23:08:43.970 ' '1980-01-03 23:08:44.157 ' '1980-01-03 23:08:44.530 ' '1980-01-03 23:08:45.547 '
"Create procedure [ dbo ] . [ sp_enter_new_student ] @ Prenom_detudiant [ varchar ] ( 50 ) = NULL , @ nom_detudiant [ varchar ] ( 50 ) = NULL , @ nationalite_detudiant [ varchar ] ( 40 ) = NULL , @ langue_parle [ varchar ] ( 15 ) = NULL , @ nombre_denfants [ int ] = NULL , @ sexe_detudiant [ char ] ( 1 ) = NULL , @ program_pk [ int ] = NULL , @ Numero_detudiant int = NULLAs Declare @ numOfRowsBefore int = 0 ; declare @ numOfRowsAfter int = 0 ; declare @ Error int = -100 ; BEGIN SET NOCOUNT ON ; select @ numOfRowsBefore = COUNT ( * ) from tbl_students where Numero_detudiant = @ Numero_detudiant ; if ( @ numOfRowsBefore > 0 ) begin Print `` Student already exists , Insertion will fail ! `` ; Print `` Insertion Failure ! `` + CONVERT ( varchar ( 10 ) , @ numOfRowsBefore ) ; return @ numOfRowsBefore ; -- > -1 indicates insertion failure End else if ( @ numOfRowsBefore = 0 ) begin Print `` Student does n't exists , Insertion will be Success ! `` ; Print `` Insertion Success ! `` + CONVERT ( varchar ( 10 ) , @ numOfRowsBefore ) ; return @ numOfRowsBefore ; -- > -1 indicates insertion failure EndEND public int enregistreNouveauEtudiant ( string Prenom_detudiant , string nom_detudiant , string nationalite_detudiant , string langue_parle , string nombre_denfants , string sexe_detudiant , string program_pk , string Numero_detudiant ) { int numberOfRowsInserted = 0 ; //try // { SqlConnection connection = this.GetConnection ( ) ; SqlCommand insertStudentCommand = new SqlCommand ( `` sp_enter_new_student '' , connection ) ; connection.Open ( ) ; insertStudentCommand.CommandType = CommandType.StoredProcedure ; //insertStudentCommand.Parameters.Add ( `` @ ID '' , SqlDbType.Int ) ; //insertStudentCommand.Parameters [ `` @ ID '' ] .Direction = ParameterDirection.Output ; insertStudentCommand.Parameters.Add ( `` @ Prenom_detudiant '' , SqlDbType.VarChar , 50 ) .Value = Prenom_detudiant ; insertStudentCommand.Parameters.Add ( `` @ nom_detudiant '' , SqlDbType.VarChar , 50 ) .Value = nom_detudiant ; insertStudentCommand.Parameters.Add ( `` @ nationalite_detudiant '' , SqlDbType.VarChar , 40 ) .Value = nationalite_detudiant ; insertStudentCommand.Parameters.Add ( `` @ langue_parle '' , SqlDbType.VarChar , 15 ) .Value = langue_parle ; insertStudentCommand.Parameters.Add ( `` @ nombre_denfants '' , SqlDbType.Int ) .Value = nombre_denfants ; insertStudentCommand.Parameters.Add ( `` @ sexe_detudiant '' , SqlDbType.Char , 1 ) .Value = sexe_detudiant ; insertStudentCommand.Parameters.Add ( `` @ program_pk '' , SqlDbType.Int ) .Value = program_pk ; insertStudentCommand.Parameters.Add ( `` @ Numero_detudiant '' , SqlDbType.Int ) .Value = Numero_detudiant ; numberOfRowsInserted = insertStudentCommand.ExecuteNonQuery ( ) ; connection.Close ( ) ; return numberOfRowsInserted ; }"
"_runner = new Thread ( runner ) ; _runner.SetApartmentState ( ApartmentState.STA ) ; _runner.IsBackground = true ; _runner.Start ( ) ; b.placeTipp ( workStructure ) ; public void placeTipp ( ref OverallTippStructure tipp ) { _expectedUrl = String.Empty ; _betUrl = String.Empty ; _status = BookieStatusType.CHECKLOGIN ; while ( true ) { _mreWaitForAction.Reset ( ) ; checkIETab ( ) ; switch ( _status ) { case BookieStatusType.REQUESTWEBSITE : ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Keine IE-Tab vorhanden . Fordere eine an '' , this.BookieName ) ) ; //if ( RequestIETabEvent ! = null ) // RequestIETabEvent ( this , new EventArgs ( ) ) ; _status = BookieStatusType.NAVIGATETOWEBSITE ; _mreWaitForAction.Set ( ) ; break ; case BookieStatusType.NAVIGATETOWEBSITE : _webBrowser.Navigate ( @ '' http : //www.nordicbet.com '' ) ; break ; case BookieStatusType.CHECKLOGIN : checkLogin ( ) ; break ; case BookieStatusType.LOGINNEEDED : doLogin ( ) ; break ; case BookieStatusType.LOGGEDIN : _status = BookieStatusType.SEARCHTIPP ; _mreWaitForAction.Set ( ) ; break ; case BookieStatusType.SEARCHTIPP : searchTipp ( tipp ) ; break ; case BookieStatusType.NAVTOSB : NavToSB ( ) ; break ; case BookieStatusType.GETMARKET : getMarket ( tipp ) ; break ; case BookieStatusType.PLACEBET : placeBet ( tipp ) ; break ; case BookieStatusType.CONFIRMBET : confirmBet ( ) ; break ; case BookieStatusType.EXTRACTBETDATA : extractBetId ( ref tipp ) ; break ; case BookieStatusType.FINISHED : return ; } if ( ! _mreWaitForAction.WaitOne ( 60000 ) ) { //Sonderüberpüfung be LoginNeeded if ( _status == BookieStatusType.LOGINNEEDED ) { //checkLogin ( ) ; throw new BookieLoginFailedExcpetion ( ) ; } //TIMEOUT ! ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Timeout bei warten auf nächsten Schritt . Status war { 1 } '' , this.BookieName , this._status.ToString ( ) ) ) ; throw new BookieTimeoutExcpetion ( String.Format ( `` Bookie { 0 } : Timeout bei dem Warten auf Ereignis '' , this.BookieName ) ) ; } } } private void searchTipp ( OverallTippStructure tipp ) { if ( _webBrowser.InvokeRequired ) { _webBrowser.Invoke ( new delegatePlaceBet ( searchTipp ) , new object [ ] { tipp } ) ; } else { ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Suche Tipp { 1 } '' , this.BookieName , tipp.BookieMatchName ) ) ; _expectedUrl = String.Empty ; if ( ! _webBrowser.Url.ToString ( ) .StartsWith ( `` https : //www.nordicbet.com/eng/sportsbook '' ) ) { ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Nicht auf Sportsbookseite . Navigiere '' , this.BookieName ) ) ; _status = BookieStatusType.NAVTOSB ; _mreWaitForAction.Set ( ) ; return ; } _searchCompleted = false ; HtmlDocument doc = _webBrowser.Document ; if ( doc ! = null ) { mshtml.IHTMLInputElement elemSearch = ( mshtml.IHTMLInputElement ) doc.GetElementById ( `` query '' ) .DomElement ; if ( elemSearch ! = null ) { Thread.Sleep ( Delayer.delay ( 2000 , 10000 ) ) ; elemSearch.value = tipp.BookieMatchName ; mshtml.IHTMLElement elemSearchButton = ( mshtml.IHTMLElement ) doc.GetElementById ( `` search_button '' ) .DomElement ; if ( elemSearchButton ! = null ) { Thread.Sleep ( Delayer.delay ( 900 , 4000 ) ) ; elemSearchButton.click ( ) ; //elemSearchButton.InvokeMember ( `` click '' ) ; if ( ! _mreWaitForAction.WaitOne ( 10000 ) ) //Here The Deadlock happens { //Now the click event and therefor the search will be executed ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Suche ist auf Timeout gelaufen '' , this.BookieName ) ) ; throw new BookieTimeoutExcpetion ( String.Format ( `` Bookie { 0 } : Suche ist auf Timeout gelaufen '' , this.BookieName ) ) ; } _mreWaitForAction.Reset ( ) ; HtmlElement spanResult = doc.GetElementById ( `` total_ocs_count '' ) ; while ( spanResult == null ) { Thread.Sleep ( 500 ) ; spanResult = doc.GetElementById ( `` total_ocs_count '' ) ; } int total_ocs_count = 0 ; if ( ! Int32.TryParse ( spanResult.InnerHtml , out total_ocs_count ) ) { ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Tip { 1 } nicht gefunden '' , this.BookieName , tipp.BookieMatchName ) ) ; throw new BookieTippNotFoundExcpetion ( String.Format ( `` Bookie { 0 } : Tip { 1 } nicht gefunden '' , this.BookieName , tipp.BookieMatchName ) ) ; } if ( total_ocs_count < = 0 ) { ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Tip { 1 } nicht gefunden '' , this.BookieName , tipp.BookieMatchName ) ) ; throw new BookieTippNotFoundExcpetion ( String.Format ( `` Bookie { 0 } : Tip { 1 } nicht gefunden '' , this.BookieName , tipp.BookieMatchName ) ) ; } /* else if ( total_ocs_count > 1 ) { throw new BookieMoreThanOneFoundExcpetion ( String.Format ( `` Bookie { 0 } : Tipp { 1 } nicht eindeutig '' , this.BookieName , tipp.BookieMatchName ) ) ; } */ ConsoleWriter.writeToConsole ( String.Format ( `` Bookie { 0 } : Tip { 1 } gefunden '' , this.BookieName , tipp.BookieMatchName ) ) ; _status = BookieStatusType.GETMARKET ; } } } _mreWaitForAction.Set ( ) ; } }"
"( SELECT MIN ( x.timestamp ) FROM ( SELECT MAX ( r.Timestamp ) AS timestamp , r.Meter_Id FROM Reading r , Meter m WHERE r.Meter_Id = m.Id AND m.Store_Id = Id GROUP BY r.Meter_Id ) AS x ) ( SELECT MIN ( x.timestamp ) FROM ( SELECT MAX ( r.Timestamp ) AS timestamp , r.Meter_Id FROM Reading r , Meter m WHERE r.Meter_Id = m.Id AND m.Store_Id = this_.Id GROUP BY r.Meter_Id ) AS this_.x )"
"void CopyTo ( Array array , int index ) public void CopyTo ( T [ ] array , int arrayIndex )"
string a = Encoded ( i ) ; // = `` AF293E5B '' string b = Encoded ( j ) ; // = `` CD2429A4 ''
using MyApp.Properties ; using appsettings = MyAppp.Properties.Settings ; var appsettings = MyFirstCSharpApp.Properties.Settings.Default ; appsettings.Value=1 ;
"class C : A , B { //code that implements interface B , and nothing else }"
class MyIntegers : IEnumerable { public class MyEnumerator : IEnumerator { private int index = 0 ; object IEnumerator.Current { return this.Current ; } int Current { return index * index ; } public bool MoveNext ( ) { if ( index > 10 ) return false ; ++index ; return true ; } } public MyEnumerator GetEnumerator ( ) { return new MyEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return this.GetEnumerator ( ) ; } } class MyIntegers : IEnumerable { public class MyEnumerator : IEnumerator { private int index = 0 ; public void Reset ( ) { throw new NotImplementedException ( ) ; } object IEnumerator.Current { get { return this.Current ; } } int Current { get { return index*index ; } } public bool MoveNext ( ) { if ( index > 10 ) return false ; ++index ; return true ; } } public MyEnumerator GetEnumerator ( ) { return new MyEnumerator ( ) ; } IEnumerator IEnumerable.GetEnumerator ( ) { return this.GetEnumerator ( ) ; } } E enumerator = ( collection ) .GetEnumerator ( ) ; try { while ( enumerator.MoveNext ( ) ) { ElementType element = ( ElementType ) enumerator.Current ; statement ; } } finally { IDisposable disposable = enumerator as System.IDisposable ; if ( disposable ! = null ) disposable.Dispose ( ) ; } IEnumerator enumerator = ( ( System.Collections.IEnumerable ) ( collection ) ) .GetEnumerator ( ) ; try { while ( enumerator.MoveNext ( ) ) { ElementType element = ( ElementType ) enumerator.Current ; statement ; } } finally { IDisposable disposable = enumerator as System.IDisposable ; if ( disposable ! = null ) disposable.Dispose ( ) ; } foreach ( var element in ( new MyIntegers ( ) as IEnumerable ) ) { Console.WriteLine ( element ) ; } ( ( System.Collections.IEnumerable ) ( collection ) ) .GetEnumerator ( ) ? IEnumerator enumerator = ( ( System.Collections.IEnumerable ) ( collection ) ) .GetEnumerator ( ) ; try { while ( enumerator.MoveNext ( ) ) { ...
"interface IService { void Print ( string str ) ; } class Service : IService { readonly ServiceOption options ; public Service ( IOptions < ServiceOption > options ) = > this.options = options.Value ; void Print ( string str ) = > Console.WriteLine ( $ '' { str } with color : { options.Color } '' ) ; } class ServiceOption { public bool Color { get ; set ; } } class Program { static void Main ( ) { using ( ServiceProvider sp = RegisterServices ( ) ) { // } } static ServiceProvider RegisterServices ( ) { IServiceCollection isc = new ServiceCollection ( ) ; isc.Configure < ServiceOption > ( _ = > _.Color = true ) ; isc.AddTransient < IService , Service > ( ) ; return isc.BuildServiceProvider ( ) ; } } interface IService { void Print ( string str ) ; } class Service : IService { readonly ServiceOption options ; public Service ( ServiceOption options ) = > this.options = options ; public void Print ( string str ) = > Console.WriteLine ( $ '' { str } with color : { options.Color } '' ) ; } class ServiceOption { public bool Color { get ; set ; } } class Program { static void Main ( ) { using ( ServiceProvider sp = RegisterServices ( ) ) { // } } static ServiceProvider RegisterServices ( ) { IServiceCollection isc = new ServiceCollection ( ) ; isc.AddSingleton ( _ = > new ServiceOption { Color = true } ) ; isc.AddTransient < IService , Service > ( ) ; return isc.BuildServiceProvider ( ) ; } }"
"List < int > numbers = new List < int > ( ) { 1 , 2 , 3 , 4 , 5 } ; IEnumerable < int > res = numbers.FindAll ( a = > a > 0 ) .Select ( b = > b ) .ToList ( ) ; numbers.Add ( 99 ) ; foreach ( int item in res ) Console.Write ( item + `` , `` ) ;"
for ( var file in files ) ' ' // Check for certain file condition and decide to delete it . ' ' if ( shouldDeleteFile ) { Task.Run ( ( ) = > File.Delete ( file ) ) ; }
[ Serializable ] public class GenericUser { ... [ Serializable ] public class ConcreteUser : GenericUser { ...
"var numbers = Enumerable.Range ( 1 , 20 ) ; int start = 1 ; int result ; while ( true ) { if ( numbers.All ( n = > start % n == 0 ) ) { result = start ; break ; } start++ ; } let p5BruteForce = let divisors = List.toSeq ( [ 3..20 ] | > List.rev ) let isDivOneToTwenty n = let dividesBy = divisors | > Seq.takeWhile ( fun x - > n % x = 0 ) Seq.length dividesBy = Seq.length divisors let findNum n = let rec loop n = match isDivOneToTwenty n with | true - > n | false - > loop ( n + 2 ) loop n findNum 2520"
"public Expression < Func < TContainer , bool > > CreatePredicate < TContainer , TMember > ( Expression < Func < TContainer , TMember > > getMemberExpression , Expression < Func < TMember , bool > > memberPredicateExpression ) { return x = > memberPredicateExpression.Compile ( ) ( getMemberExpression.Compile ( ) ( x ) ) ; }"
"[ TestMethod ] public void NewAction_should_return_IndexAction ( ) { NewViewModel viewModel = new NewViewModel ( ) { Name = `` José Inácio Santos Silva '' , Email = `` joseinacio @ joseinacio.com '' , Username = `` joseinacio '' } ; //IsUserRegistered is used to validate Username , Username is unique . _mockAuthenticationService.Setup ( x = > x.IsUserRegistered ( viewModel.Username ) ) .Returns ( false ) ; //IsUserRegistered is used to validate Email , Email is unique . _mockUsuarioRepository.Setup ( x = > x.GetUserByEmail ( viewModel.Email ) ) ; _mockDbContext.Setup ( x = > x.SaveChanges ( ) ) ; _mockUsuarioRepository.Setup ( x = > x.Add ( It.IsAny < User > ( ) ) ) ; _userController = new UserController ( _mockUsuarioRepository.Object , _mockDbContext.Object , _mockAuthenticationService.Object ) ; ActionResult result = _userController.New ( viewModel ) ; result.AssertActionRedirect ( ) .ToAction ( `` Index '' ) ; _mockAuthenticationService.VerifyAll ( ) ; _mockUsuarioRepository.VerifyAll ( ) ; _mockDbContext.VerifyAll ( ) ; }"
"public async Task < string > RenderViewToStringAsync < TModel > ( string viewName , TModel model , string lang )"
< Style TargetType= '' { x : Type TextBox } '' > < Setter Property= '' ContextMenu '' > < ContextMenu > < MenuItem Header= '' Copy '' / > < /ContextMenu > < /Setter > < /Style > Thread thread = new Thread ( ( ) = > { TestWindow wnd = new TestWindow ( ) ; wnd.ShowDialog ( ) ; } ) ; thread.SetApartmentState ( ApartmentState.STA ) ; thread.IsBackground = true ; thread.Start ( ) ;
"public class ReservationCustomerList : INotifyPropertyChanged { public int UnitsLeft { get ; set ; } public DateTime ? OnCircuitSince { get ; set ; } public TimeSpan ? TimeLeftDate { get { if ( OnCircuitSince.HasValue ) return TimeSpan.FromSeconds ( ( OnCircuitSince.Value - DateTime.Now ) .TotalSeconds - UnitsLeft ) ; return TimeSpan.FromSeconds ( UnitsLeft ) ; } } private void FireEverySecond ( ) { PropertyChanged.Fire ( this , x = > x.TimeLeftDate ) ; } } public class TimerService { static Timer Timer ; static FastSmartWeakEvent < EventHandler > _secondEvent = new FastSmartWeakEvent < EventHandler > ( ) ; static FastSmartWeakEvent < EventHandler > _minuteEvent = new FastSmartWeakEvent < EventHandler > ( ) ; static DateTime LastTime ; public static event EventHandler SecondEvent { add { _secondEvent.Add ( value ) ; } remove { _secondEvent.Remove ( value ) ; } } public static event EventHandler MinuteEvent { add { _minuteEvent.Add ( value ) ; } remove { _minuteEvent.Remove ( value ) ; } } static TimerService ( ) { Timer = new Timer ( TimerFire , null , 1000 , 1000 ) ; } static void TimerFire ( object state ) { _secondEvent.Raise ( null , EventArgs.Empty ) ; if ( LastTime.Minute ! = DateTime.Now.Minute ) _minuteEvent.Raise ( null , EventArgs.Empty ) ; LastTime = DateTime.Now ; } }"
"internal sealed class MySquigglesTagger : ITagger < IErrorTag > { public IEnumerable < ITagSpan < IErrorTag > > GetTags ( NormalizedSnapshotSpanCollection spans ) { foreach ( IMappingTagSpan < MyTokenTag > myTokenTag in this._aggregator.GetTags ( spans ) ) SnapshotSpan tagSpan = myTokenTag.Span.GetSpans ( this._sourceBuffer ) [ 0 ] ; yield return new TagSpan < IErrorTag > ( tagSpan , new ErrorTag ( `` Error '' , `` some info about the error '' ) ) ; } } }"
"class Contact { // Read-only properties . public string Name { get ; } public string Address { get ; } } Contact a = new Contact { Name = `` John '' , Address = `` 23 Tennis RD '' } ;"
short iCount = 20 ; short iValue = iCount + ( short ) 1 ; short iCount = 20 ; short iValue = iCount + 1 ; short iCount = 20 ; short iValue = ( short ) ( iCount + 1 ) ;
"$ '' Constant with { Value } '' templates = new Dictionary < string , string > { { `` Key1 '' , $ '' { Value1 } '' } , { `` Key2 '' , $ '' Constant with { Value2 } '' } } public IDictionary < string , string > FillTemplate ( IDictionary < string , string > placeholderValues ) { return templates.ToDictionary ( t = > t.Key , t = > string.FormatByNames ( t.Value , placeholderValues ) ) ; } > > > templates = { `` Key1 '' : `` { Value1 } '' , `` Key2 '' : `` Constant with { Value2 } '' } > > > values = { `` Value1 '' : `` 1 '' , `` Value2 '' : `` example 2 '' } > > > result = dict ( ( ( k , v.format ( **values ) ) for k , v in templates.items ( ) ) ) > > > result { 'Key2 ' : 'Constant with example 2 ' , 'Key1 ' : ' 1 ' } > > > values2 = { `` Value1 '' : `` another '' , `` Value2 '' : `` different '' } > > > result2 = dict ( ( ( k , v.format ( **values2 ) ) for k , v in templates.items ( ) ) ) > > > result2 { 'Key2 ' : 'Constant with different ' , 'Key1 ' : 'another ' }"
i = 5print i + `` `` int i = 5 ; Console.Write ( i + `` `` ) ;
"public class Foo { public event Action SomethingHappened ; public void DoSomething ( ) { // yes , i 'm aware of the potential NRE this.SomethingHappened ( ) ; } } var foo = new Foo ( ) ; foo.SomethingHappened += ( ) = > Console.WriteLine ( `` Yay ! `` ) ; foo.DoSomething ( ) ; // `` Yay ! '' appears on console ."
"module Imagingopen System.Drawing ; # lighttype Image ( width : int , height : int ) = class member z.Pixels = Array2D.create width height Color.White member z.Width with get ( ) = z.Pixels.GetLength 0 member z.Height with get ( ) = z.Pixels.GetLength 1 member z.Save ( filename : string ) = let bitmap = new Bitmap ( z.Width , z.Height ) let xmax = bitmap.Width-1 let ymax = bitmap.Height-1 let mutable bob = 0 ; for x in 0..xmax do for y in 0..ymax do bitmap.SetPixel ( x , y , z.Pixels . [ x , y ] ) bitmap.Save ( filename ) new ( ) = Image ( 1280 , 720 ) endlet bob = new Image ( 500,500 ) bob.Save @ '' C : \Users\White\Desktop\TestImage2.bmp '' using System.Drawing ; namespace TestProject { public class Image { public Color [ , ] Pixels ; public int Width { get { return Pixels.GetLength ( 0 ) ; } } public int Height { get { return Pixels.GetLength ( 1 ) ; } } public Image ( int width , int height ) { Pixels = new Color [ width , height ] ; for ( int x = 0 ; x < Width ; x++ ) { for ( int y = 0 ; y < Height ; y++ ) { Pixels [ x , y ] = Color.White ; } } } public void Save ( string filename ) { Bitmap bitmap = new Bitmap ( Width , Height ) ; for ( int x = 0 ; x < bitmap.Width ; x++ ) { for ( int y = 0 ; y < bitmap.Height ; y++ ) { bitmap.SetPixel ( x , y , Pixels [ x , y ] ) ; } } bitmap.Save ( filename ) ; } } class Program { static void Main ( string [ ] args ) { Image i = new Image ( 500 , 500 ) ; i.Save ( @ '' C : \Users\White\Desktop\TestImage2.bmp '' ) ; } } }"
"[ HttpPost ( `` Test '' ) ] public IActionResult MyTest ( [ Required ] IFormFile pdf , [ Required ] IFormFile image ) { // some stuff ... return Ok ( ) ; } `` content '' : { `` multipart/form-data '' : { `` schema '' : { `` required '' : [ `` image '' , `` pdf '' ] , `` type '' : `` object '' , `` properties '' : { `` pdf '' : { `` type '' : `` string '' , `` format '' : `` binary '' } , `` image '' : { `` type '' : `` string '' , `` format '' : `` binary '' } } } , `` encoding '' : { `` pdf '' : { `` style '' : `` form '' } , `` image '' : { `` style '' : `` form '' } } } } `` encoding '' : { `` pdf '' : { `` style '' : `` form '' , `` contentType '' : `` application/pdf '' } , `` image '' : { `` style '' : `` form '' , `` contentType '' : `` image/png , image/jpeg '' } }"
"[ DllImport ( `` mydll.dll '' , BestFitMapping=false , CharSet=CharSet.Ansi ) ] private static extern int GetStruct ( ref MyStruct s ) ; [ StructLayout ( LayoutKind.Sequential , Pack=0 ) ] struct MyStruct { public int Field1 ; public IntPtr Field2 ; } public void DoSomething ( ) { MyStruct s = new MyStruct ( ) ; GetStruct ( ref s ) ; s.Field1 = 100 ; //does unmanaged memory now have 100 in Field1 as well ? s.Field2 = IntPtr.Zero ; //does unmanaged memory now have a NULL pointer in field Field2 as well ? }"
"public class CompanyInfo { public string Name { get ; set ; } public double Value { get ; set ; } } public class StockMarket : IObservable < CompanyInfo > public class StockTrader : IObserver < CompanyInfo > { public void OnCompleted ( ) { Console.WriteLine ( `` Market Closed '' ) ; } public void OnError ( Exception error ) { Console.WriteLine ( error ) ; } public void OnNext ( CompanyInfo value ) { WriteStock ( value ) ; } private void WriteStock ( CompanyInfo value ) { ... } } StockMarket market = GetStockMarket ( ) ; StockTrader trader = new StockTrader ( ) ; IObservable < CompanyInfo > differential = market // [ F , 1 ] , [ S , 5 ] , [ S , 4 ] , [ F , 2 ] .GroupBy ( x = > x.Name ) // [ F , 1 ] , [ F , 2 ] ; [ S , 5 ] , [ S , 4 ] .SelectMany ( x = > x //4 , 8 , 2 , 3 .Buffer ( 2 , 1 ) // ( 4 , 8 ) , ( 8 , 2 ) , ( 2 , 3 ) , ( 3 ) .SkipLast ( 1 ) // ( 4 , 8 ) , ( 8 , 2 ) , ( 2 , 3 ) .Select ( y = > new CompanyInfo // ( +100 % ) , ( -75 % ) , ( +50 % ) { Name = x.Key , Value = ( y [ 1 ] .Value - y [ 0 ] .Value ) / y [ 0 ] .Value } ) // [ F , +100 % ] ; [ S , -20 % ] ) ; using ( IDisposable subscription = differential.Subscribe ( trader ) ) { Observable.Wait ( market ) ; }"
"public interface IDataRepository { Task < IReadOnlyCollection < Widget > > GetAllWidgetsAsync ( CancellationToken cancellationToken ) ; } public sealed class DataRepository : IDataRepository { public Task < IReadOnlyCollection < Widget > > GetAllWidgetsAsync ( CancellationToken cancellationToken ) { /******* The idea is that this will /******* all be replaced hopefully soon by an ORM tool . */ var ret = new List < Widget > ( ) ; // use synchronous API to load records from DB var ds = Api.GetSqlServerDataSet ( `` SELECT ID , Name , Description FROM Widgets '' , DataResources.ConnectionString ) ; foreach ( DataRow row in ds.Tables [ 0 ] .Rows ) { cancellationToken.ThrowIfCancellationRequested ( ) ; // build a widget for the row , add to return . } // simulate long-running CPU-bound operation . DateTime start = DateTime.Now ; while ( DateTime.Now.Subtract ( start ) .TotalSeconds < 10 ) { } return Task.FromResult ( ( IReadOnlyCollection < Widget > ) ret.AsReadOnly ( ) ) ; } } public sealed class WorkRunner { private readonly IDataRepository _dataRepository ; public WorkRunner ( IDataRepository dataRepository ) = > _dataRepository = dataRepository ; public async Task RunAsync ( CancellationToken cancellationToken ) { var allWidgets = await _dataRepository .GetAllWidgetsAsync ( cancellationToken ) .ConfigureAwait ( false ) ; // I 'm using Task.Run here because I want this on // another thread even if the above runs synchronously . await Task.Run ( async ( ) = > { while ( true ) { cancellationToken.ThrowIfCancellationRequested ( ) ; foreach ( var widget in allWidgets ) { /* do something */ } await Task.Delay ( 2000 , cancellationToken ) ; // wait some arbitrary time . } } ) .ConfigureAwait ( false ) ; } } private async void HandleStartStopButtonClick ( object sender , EventArgs e ) { if ( ! _isRunning ) { await DoStart ( ) ; } else { DoStop ( ) ; } } private async Task DoStart ( ) { _isRunning = true ; var runner = new WorkRunner ( _dependencyContainer.Resolve < IDataRepository > ( ) ) ; _cancellationTokenSource = new CancellationTokenSource ( ) ; try { _startStopButton.Text = `` Stop '' ; _resultsTextBox.Clear ( ) ; await runner.RunAsync ( _cancellationTokenSource.Token ) ; // set results info in UI ( invoking on UI thread ) . } catch ( OperationCanceledException ) { _resultsTextBox.Text = `` Canceled early . `` ; } catch ( Exception ex ) { _resultsTextBox.Text = ex.ToString ( ) ; } finally { _startStopButton.Text = `` Start '' ; } } private void DoStop ( ) { _cancellationTokenSource.Cancel ( ) ; _isRunning = false ; }"
[ TestMethod ] public void AddT_HasBehaviorA ( ) { } [ TestMethod ] public void UpdateT_HasBehaviorA ( ) { }
List < Nullable < int > > list = new List < Nullable < int > > ( ) ;
"< ComboBox Grid.Row= '' 0 '' Grid.Column= '' 1 '' Margin= '' 0,3 '' HorizontalAlignment= '' Stretch '' DisplayMemberPath= '' DisplayText '' ItemsSource= '' { Binding ObjectSource } '' / > public Collection < MyObjects > ObjectSource { get { return this.objectSource ; } set { this.SetProperty ( ref this.objectSource , value ) ; } }"
if ( app.Logourl == `` '' || app.Logourl == null ) if ( app.Logourl == `` '' || app.Logourl == null ) if ( app.Logourl == null || app.Logourl == `` '' )
"public static class Queries { public static readonly Func < SytelineRepository , String , IQueryable < JobOrder > > GetOpenJobOrdersForItemQuery = CompiledQuery.Compile ( ( SytelineRepository r , String itemNumber ) = > from job in r.JobOrders where job.ItemNumber == itemNumber select job ) ; public static IQueryable < JobOrder > GetOpenJobOrdersForItem ( this SytelineRepository r , System.String itemNumber ) { return GetOpenJobOrdersForItemQuery ( r , itemNumber ) ; } } public static IEnumerable < JobOrder > GetOpenJobOrdersForItem ( this SytelineRepository r , System.String itemNumber ) { return GetOpenJobOrdersForItemUncompiledQuery ( r , itemNumber ) ; } public static IQueryable < JobOrder > GetOpenJobOrdersForItemUncompiledQuery ( SytelineRepository r , String itemNumber ) { return from job in r.JobOrders where job.ItemNumber == itemNumber select job ; } at System.Linq.Expressions.Expression.Property ( Expression expression , PropertyInfo property ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.AccessMember ( SqlMember m , SqlExpression expo ) at System.Data.Linq.SqlClient.SqlVisitor.Visit ( SqlNode node ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitExpression ( SqlExpression expr ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitBinaryOperator ( SqlBinary bo ) at System.Data.Linq.SqlClient.SqlVisitor.Visit ( SqlNode node ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitExpression ( SqlExpression expr ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitSelect ( SqlSelect select ) at System.Data.Linq.SqlClient.SqlVisitor.Visit ( SqlNode node ) at System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitIncludeScope ( SqlIncludeScope scope ) at System.Data.Linq.SqlClient.SqlVisitor.Visit ( SqlNode node ) at System.Data.Linq.SqlClient.SqlBinder.Bind ( SqlNode node ) at System.Data.Linq.SqlClient.SqlProvider.BuildQuery ( ResultShape resultShape , Type resultType , SqlNode node , ReadOnlyCollection ` 1 parentParameters , SqlNodeAnnotations annotations ) at System.Data.Linq.SqlClient.SqlProvider.BuildQuery ( Expression query , SqlNodeAnnotations annotations ) at System.Data.Linq.SqlClient.SqlProvider.System.Data.Linq.Provider.IProvider.Compile ( Expression query ) at System.Data.Linq.CompiledQuery.ExecuteQuery ( DataContext context , Object [ ] args ) at System.Data.Linq.CompiledQuery.Invoke [ TArg0 , TArg1 , TResult ] ( TArg0 arg0 , TArg1 arg1 ) at Mpicorp.SytelineDataModel.Queries.GetOpenJobOrdersForItem ( SytelineRepository r , String itemNumber ) in C : \SVN\Mpicorp.SytelineDataModel\trunk\SytelineDataModel\Queries.cs : line 21 at Mpicorp.SytelineDataModel.SytelineRepository.GetTimePhasedInventory ( String itemNumber , Boolean includeForecast ) in C : \SVN\Mpicorp.SytelineDataModel\trunk\SytelineDataModel\SytelineRepository.cs : line 242 at RepriceWorkbench.TimePhasedInventoryForm..ctor ( SytelineRepository repository , String itemNumber ) in C : \SVN\spirepriceutility\trunk\src\POWorkbench\TimePhasedInventoryForm.cs : line 32 at RepriceWorkbench.TimePhasedMenuForm.goBtn_Click ( Object sender , EventArgs e ) in C : \SVN\spirepriceutility\trunk\src\POWorkbench\TimePhasedMenuForm.cs : line 25 at System.Windows.Forms.Button.OnMouseUp ( MouseEventArgs mevent ) at System.Windows.Forms.Control.WmMouseUp ( Message & m , MouseButtons button , Int32 clicks ) at System.Windows.Forms.Control.WndProc ( Message & m ) at System.Windows.Forms.ButtonBase.WndProc ( Message & m ) at System.Windows.Forms.Button.WndProc ( Message & m ) at System.Windows.Forms.NativeWindow.DebuggableCallback ( IntPtr hWnd , Int32 msg , IntPtr wparam , IntPtr lparam ) at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW ( MSG & msg ) at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop ( IntPtr dwComponentID , Int32 reason , Int32 pvLoopData ) at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner ( Int32 reason , ApplicationContext context ) at System.Windows.Forms.Application.ThreadContext.RunMessageLoop ( Int32 reason , ApplicationContext context ) at RepriceWorkbench.Program.Main ( ) in C : \SVN\spirepriceutility\trunk\src\POWorkbench\Program.cs : line 66 at System.AppDomain._nExecuteAssembly ( RuntimeAssembly assembly , String [ ] args ) at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly ( ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state , Boolean ignoreSyncCtx ) at System.Threading.ExecutionContext.Run ( ExecutionContext executionContext , ContextCallback callback , Object state ) at System.Threading.ThreadHelper.ThreadStart ( )"
"//note : the FieldDefinition object contains the first expression //described above , plus the MemberInfo object for the property/field //in question public Expression < Func < TModel , object > > ExpressionFromField < TModel > ( FieldDefinition < T > field ) where TModel : BaseModel < T > { var param = Expression.Parameter ( typeof ( TModel ) , `` t '' ) ; //Note in the next line `` nameof ( SelectedItem ) '' . This is a reference //to the property in TModel that contains the instance from which //to retrieve the value . It is unqualified because this method //resides within TModel . var body = Expression.PropertyOrField ( param , nameof ( SelectedItem ) ) ; var member = Expression.MakeMemberAccess ( body , field.Member ) ; return Expression.Lambda < Func < TModel , object > > ( member , param ) ; } public Expression < Func < TModel , object > > ExpressionFromField < TModel > ( FieldDefinition < T > field ) where TModel : BaseModel < T > { var param = Expression.Parameter ( typeof ( TModel ) , `` t '' ) ; var body = Expression.PropertyOrField ( param , nameof ( SelectedItem ) ) ; var IWantThis = Expression.ApplyExpressionToField ( field.Expression , body ) ; return Expression.Lambda < Func < TModel , object > > ( IWantThis , param ) ; }"
"//Add SignalR serviceservices.AddSignalR ( ) ; app.UseSignalR ( routes = > { routes.MapHub < NotificationsHub > ( `` /notification '' ) ; } ) ; app.Map ( `` /signalr '' , map = > { map.UseCors ( CorsOptions.AllowAll ) ; var hubConfiguration = new HubConfiguration { } ; hubConfiguration.EnableDetailedErrors = true ; map.RunSignalR ( hubConfiguration ) ; } ) ;"
# include < iostream > using namespace std ; void foo2 ( ) { cout < < `` foo 2.\n '' ; } void foo ( ) { return foo2 ( ) ; } int main ( ) { foo ( ) ; return 0 ; }
"ConcurrentDictionary < TKey , TValue > : IDictionary < TKey , TValue > , IDictionary IDictionary < int , int > dictionary = new ConcurrentDictionary < int , int > ( ) ; dictionary.Add ( 3 , 3 ) ; //no errorsConcurrentDictionary < int , int > concurrentDictionary = new ConcurrentDictionary < int , int > ( ) ; concurrentDictionary.Add ( 3 , 3 ) ; // Can not access private method here"
Type type = Type.GetType ( mynamespace.myclassname ) ; object o = System.Activator.CreateInstance ( type ) ;
Dim power As PowerStatus = SystemInformation.PowerStatus Dim percent As Single = power.BatteryLifePercent PowerStatus power = SystemInformation.PowerStatus ; float percent = power.BatteryLifePercent ;
"interface IInstitution { string Name { get ; } } class Club : IInstitution { public string Name { get ; set ; } public HashSet < Person > Members { get ; set ; } public override int GetHashCode ( ) { return Name.GetHashCode ( ) + Members.Count ; } public override bool Equals ( object obj ) { Club other = obj as Club ; if ( other == null ) return false ; return Name.Equals ( other.Name ) & & Members.SetEquals ( other.Members ) ; } } class Person { public string Name { get ; set ; } public IInstitution FavouriteInstitution { get ; set ; } public override int GetHashCode ( ) { return Name.GetHashCode ( ) ; } public override bool Equals ( object obj ) { Person other = obj as Person ; if ( other == null ) return false ; return Name.Equals ( other.Name ) & & FavouriteInstitution.Equals ( other.FavouriteInstitution ) ; } } class Program { public static void Main ( ) { Club c1 = new Club { Name = `` myClub '' , Members = new HashSet < Person > ( ) } ; Person p1 = new Person { Name = `` Johnny '' , FavouriteInstitution = c1 } c1.Members.Add ( p1 ) ; Club c2 = new Club { Name = `` myClub '' , Members = new HashSet < Person > ( ) } ; Person p2 = new Person { Name = `` Johnny '' , FavouriteInstitution = c2 } c2.Members.Add ( p2 ) ; bool c1_and_c2_equal = c1.Equals ( c2 ) ; // StackOverflowException ! // c1.Equals ( c2 ) calls Members.SetEquals ( other.Members ) // Members.SetEquals ( other.Members ) calls p1.Equals ( p2 ) // p1.Equals ( p2 ) calls c1.Equals ( c2 ) } }"
"// Boost.h # pragma once # include < boost/math/special_functions/beta.hpp > using namespace boost : :math ; namespace Boost { public ref class BoostMath { public : double static InverseIncompleteBeta ( double a , double b , double x ) { return ibeta_inv ( a , b , x ) ; } } ; } private void calcBoost ( List < Val > vals ) { //gives WRONG results ( sometimes ) : vals.AsParallel ( ) .ForAll ( v = > v.BoostResult = BoostMath.InverseIncompleteBeta ( v.A , v.B , v.X ) ) ; //gives CORRECT results : vals.ForEach ( v = > v.BoostResult = BoostMath.InverseIncompleteBeta ( v.A , v.B , v.X ) ) ; }"
/// < summary > /// Web service operation to start a large batch asynchronously/// < /summary > public StartBatchResponseMessage StartBatch ( StartBatchRequestMessage request ) { Task t = Task.Factory.StartNew ( DoWork ) ; return new StartBatchResponseMessage ( ) ; } private void DoWork ( ) { // Implement solving world hunger here . }
// Main system culture is English hereThread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo ( `` es '' ) ; WriteLine ( $ '' { Thread.CurrentThread.ManagedThreadId } : Culture : { Thread.CurrentThread.CurrentCulture } '' ) ; await Task.Delay ( 1 ) .ConfigureAwait ( false ) ; WriteLine ( $ '' { Thread.CurrentThread.ManagedThreadId } : Culture : { Thread.CurrentThread.CurrentCulture } '' ) ;
"< remove-node path= '' /api/package [ @ name='com.facebook ' ] /class [ @ name='Session.OpenRequest ' ] /method [ @ name='setPermissions ' ] '' / > < remove-node path= '' /api/package [ @ name='com.facebook.model ' ] /class [ @ name='PropertyName ' ] '' / > < attr path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='GraphObjectAdapter ' ] '' name= '' visibility '' > public < /attr > < attr path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='GraphObjectPagingLoader ' ] '' name= '' visibility '' > public < /attr > < attr path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='FacebookFragment ' ] '' name= '' visibility '' > public < /attr > < attr path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='SimpleGraphObjectCursor ' ] '' name= '' visibility '' > public < /attr > < attr path= '' /api/package [ @ name='com.facebook.widget ' ] /interface [ @ name='GraphObjectCursor ' ] '' name= '' visibility '' > public < /attr > Error 41 Argument 1 : can not convert from 'Com.Facebook.Widget.GraphObjectAdapter.SectionAndItem.Type ' to 'System.IntPtr ' E : \Android\FacebookBinding\FacebookBinding\FacebookBinding\obj\Debug\generated\src\Com.Facebook.Widget.GraphObjectAdapter.cs 345 64 FacebookBindingError 39 Operator ' ! = ' can not be applied to operands of type 'Com.Facebook.Widget.GraphObjectAdapter.SectionAndItem.Type ' and 'System.Type ' E : \Android\FacebookBinding\FacebookBinding\FacebookBinding\obj\Debug\generated\src\Com.Facebook.Widget.GraphObjectAdapter.cs 344 9 FacebookBindingError 47 Operator '== ' can not be applied to operands of type 'Com.Facebook.Widget.GraphObjectAdapter.SectionAndItem.Type ' and 'System.Type ' E : \Android\FacebookBinding\FacebookBinding\FacebookBinding\obj\Debug\generated\src\Com.Facebook.Widget.GraphObjectAdapter.cs 381 9 FacebookBindingError 40 The best overloaded method match for 'Android.Runtime.JNIEnv.CreateInstance ( System.IntPtr , string , params Android.Runtime.JValue [ ] ) ' has some invalid arguments E : \Android\FacebookBinding\FacebookBinding\FacebookBinding\obj\Debug\generated\src\Com.Facebook.Widget.GraphObjectAdapter.cs 345 17 FacebookBinding < remove-node path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='GraphObjectAdapter.SectionAndItem ' ] '' / > < remove-node path= '' /api/package [ @ name='com.facebook.widget ' ] /class [ @ name='GraphObjectAdapter.SectionAndItem.Type ' ] '' / > Error 62 package com.facebook.widget.GraphObjectAdapter does not exist com.facebook.widget.GraphObjectAdapter.DataNeededListener E : \Android\FacebookBinding\FacebookBinding\FacebookTest\obj\Debug\android\src\mono\com\facebook\widget\GraphObjectAdapter_DataNeededListenerImplementor.java 8 41 FacebookTestError 63 package com.facebook.widget.GraphObjectPagingLoader does not exist com.facebook.widget.GraphObjectPagingLoader.OnErrorListener E : \Android\FacebookBinding\FacebookBinding\FacebookTest\obj\Debug\android\src\mono\com\facebook\widget\GraphObjectPagingLoader_OnErrorListenerImplementor.java 8 46 FacebookTest"
"private void Button_Click_1 ( object sender , RoutedEventArgs e ) { var updater = TileUpdateManager.CreateTileUpdaterForApplication ( ) ; updater.Clear ( ) ; var test = updater.GetScheduledTileNotifications ( ) ; var stopWatch = new Stopwatch ( ) ; stopWatch.Start ( ) ; foreach ( var update in test ) { updater.RemoveFromSchedule ( update ) ; } stopWatch.Stop ( ) ; var time = stopWatch.Elapsed ; notify.Text = String.Format ( `` { 0:00 } : { 1:00 } : { 2:00 } . { 3:00 } '' , time.Hours , time.Minutes , time.Seconds , time.Milliseconds / 10 ) ; for ( int i = 0 ; i < 4096 ; i++ ) { var wide = TileContentFactory.CreateTileWideText09 ( ) ; var square = TileContentFactory.CreateTileSquareText04 ( ) ; wide.TextHeading.Text = `` The heading '' ; wide.TextBodyWrap.Text = `` The body text for notification : `` + i ; square.TextBodyWrap.Text = `` The body text for notification : `` + i ; wide.SquareContent = square ; var tileNotification = new ScheduledTileNotification ( wide.GetXml ( ) , DateTime.Now.AddMinutes ( i + 1 ) ) ; updater.AddToSchedule ( tileNotification ) ; } }"
[ Assembly-ConsoleApp ] -- References -- > [ Assembly-Domain ] / [ Assembly-FileAccess ] -- References -- > -- -- -- -- -/
"public class ReadingOrder { public virtual int Id { get ; set ; } public virtual Order Order { get ; set ; } } Table ( `` db_ReadingOrder '' ) ; Id ( o = > o.Id ) .Column ( `` Id '' ) .GeneratedBy.Identity ( ) ; References ( o = > o.Order , `` OrderId '' ) ; var readingO = _repositoryFactory.GetRepository < ReadingOrder > ( ) .FirstOrDefault ( xz = > xz.Order.Id == 1 ) ; var readingOrderList1 = _repositoryFactory.GetRepository < ReadingOrder > ( ) .GetAll ( ) .FirstOrDefault ( xz = > xz.Order.Id == 1 ) ; public T FirstOrDefault ( Expression < Func < T , bool > > predicate ) { return _session.Query < T > ( ) .FirstOrDefault ( predicate ) ; }"
"Employee { public int Id { get ; set ; } public string Name { get ; set ; } public DateTime WorkDate { get ; set ; } public bool isOff { get ; set ; } } List < Employee > workers = new List < Employee > ( ) { new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/11/2016 '' ) , IsOff = false } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/12/2016 '' ) , IsOff = false } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/13/2016 '' ) , IsOff = true } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/14/2016 '' ) , IsOff = false } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/15/2016 '' ) , IsOff = false } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/16/2016 '' ) , IsOff = false } , new Employee { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/17/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/11/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/12/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/13/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/14/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/15/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/16/2016 '' ) , IsOff = false } , new Employee { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/17/2016 '' ) , IsOff = false } , } ; class EmployeeSchedule { public int Id { get ; set ; } public string Name { get ; set ; } public DateTime WorkDate { get ; set ; } public bool isOff { get ; set ; } } List < EmployeeSchedule > workers = new List < EmployeeSchedule > ( ) { new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/11/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/12/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/13/2016 '' ) , IsOff = true } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/14/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/15/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/16/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 1 , Name = `` Emp 1 '' , WorkDate = Convert.ToDateTime ( `` 4/17/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/11/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/12/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/13/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/14/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/15/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/16/2016 '' ) , IsOff = false } , new EmployeeSchedule { Id = 2 , Name = `` Emp 2 '' , WorkDate = Convert.ToDateTime ( `` 4/17/2016 '' ) , IsOff = false } , } ;"
"'Expression of type 'System.Object ' can not be used for parameter of type 'System.Nullable ` 1 [ System.Decimal ] ' of method 'System.Nullable ` 1 [ System.Decimal ] Aggregate [ Nullable ` 1 , Nullable ` 1 ] ( System.Linq.IQueryable ` 1 [ System.Nullable ` 1 [ System.Decimal ] ] , System.Nullable ` 1 [ System.Decimal ] , System.Linq.Expressions.Expression ` 1 [ System.Func ` 3 [ System.Nullable ` 1 [ System.Decimal ] , System.Nullable ` 1 [ System.Decimal ] , System.Nullable ` 1 [ System.Decimal ] ] ] ) '' public static TAccumulate Aggregate < TSource , TAccumulate > ( this IQueryable < TSource > source , TAccumulate seed , Expression < Func < TAccumulate , TSource , TAccumulate > > func ) { if ( source == null ) throw Error.ArgumentNull ( `` source '' ) ; if ( func == null ) throw Error.ArgumentNull ( `` func '' ) ; return source.Provider.Execute < TAccumulate > ( Expression.Call ( null , GetMethodInfo ( Queryable.Aggregate , source , seed , func ) , new Expression [ ] { source.Expression , Expression.Constant ( seed ) , Expression.Quote ( func ) } ) ) ; } public static ConstantExpression Constant ( object value ) { return ConstantExpression.Make ( value , value == null ? typeof ( object ) : value.GetType ( ) ) ; } var result = new int ? [ ] { 1 } .AsQueryable ( ) .Aggregate ( default ( int ? ) , ( a , b ) = > b ) ;"
"var num = BigInt.Power ( 2 , 57885161 ) - 1 ; File.WriteAllText ( `` biggestPrime.txt '' , num.ToString ( ) ) ;"
struct Point { static readonly List < /*enum*/ > NeighborIndexes ; //and other readonly fields ! public IEnumerable < FlatRhombPoint > GetEdges ( ) { return from neighborIndex in NeighborIndexes ; select GetEdge ( neighborIndex ) ; } } public IEnumerable < FlatRhombPoint > GetEdges ( ) { var thisCopy = this ; return from neighborIndex in NeighborIndexes ; select thisCopy.GetEdge ( neighborIndex ) ; }
Dim h = ( a + b + c ) / 2 'Half-Perimeter If maxEdgeLength / ( Math.Sqrt ( h * ( h - a ) * ( h - b ) * ( h - c ) ) / h ) < = MaximumTriangleAspectRatio Then 'Do stuff here . End If Dim perimeter = a + b + c 'Perimeter Dim h = perimeter / 2 'Half-Perimeter Dim area = Math.Sqrt ( h * ( h - a ) * ( h - b ) * ( h - c ) ) 'Heron 's forumula . Dim inradius = area / h Dim aspectRatio = maxEdgeLength / inradius If aspectRatio < = MaximumTriangleAspectRatio Then 'Do stuff here . End If
"enum Members { HighlyQualified , Qualified , Ordinary } class { static void Main ( ) { Members developers = Members.HighlyQualified ; Console.WriteLine ( developers ) ; //write out HighlyQualified } }"
"AndroidJavaClass UnityPlayer = new AndroidJavaClass ( `` com.unity3d.player.UnityPlayer '' ) ; AndroidJavaObject currentActivity = UnityPlayer.Get < AndroidJavaObject > ( `` currentActivity '' ) ; currentActivity.Call ( `` SayHi '' ) ; public class MainActivity extends UnityPlayerActivity { private static final String TAG = `` LibraryTest '' ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; Log.d ( TAG , `` Created ! `` ) ; } public void SayHi ( ) { Log.d ( TAG , `` HI_ '' ) ; } } AndroidJavaClass pluginClass = new AndroidJavaClass ( `` com.example.eric.librarytest.MainActivity '' ) ; < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' package= '' com.example.eric.librarytest '' android : versionCode= '' 1 '' android : versionName= '' 1.0 '' > < uses-sdk android : minSdkVersion= '' 24 '' android : targetSdkVersion= '' 28 '' / > < application android : label= '' @ string/app_name '' > < activity android : name= '' com.example.eric.librarytest.MainActivity '' android : configChanges= '' fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen '' android : label= '' @ string/app_name '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < /intent-filter > < /activity > < /application > < /manifest >"
# if SOMETHING_UNDEFINED// some code - this is ignored by the compiler # endif if ( false ) { // some code - is this compiled ? } const bool F = false ; if ( F ) { // some code - is this compiled ? } bool F = false ; if ( F ) { // some code - is this compiled ? }
Employee employee = new Employee ( ) ; employee.FirstName= '' John '' ; employee.LastName= '' Smith '' ; EmployeeDAL.Save ( employee ) ;
interface IWeapon { int Might { get ; } } [ Export ( `` sword '' ) ] public class Sword : IWeapon { public int Might { get { return 10 ; } } } interface IWeapon { int Might { get ; } } var catalog = new AssemblyCatalog ( typeof ( Ninja.Sword ) .Assembly ) ; var container = new CompositionContainer ( catalog ) ; // not allowed to use the IWeapon def in assembly 2 var sword = container.GetExportedValue < IWeapon > ( `` sword '' ) ;
"public class Function { void CreateException ( ) { var z = 0 ; var a = 2 / z ; Console.Write ( a ) ; } public Function ( ) { AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler ( CurrentDomain_UnhandledException ) ; } public void FunctionHandler ( object input , ILambdaContext context ) { CreateException ( ) ; } private void CurrentDomain_UnhandledException ( object sender , UnhandledExceptionEventArgs e ) { // � It never gets here } }"
"using System.ComponentModel.DataAnnotations ; namespace Foo { public class Bar { [ Required , MaxLength ( 250 ) ] public virtual string Name { get ; set ; } } } using DataAnnotations = System.ComponentModel.DataAnnotations ; namespace Foo { public class Bar { [ DataAnnotations.Required , DataAnnotations.MaxLength ( 250 ) ] public virtual string Name { get ; set ; } } } using Required = System.ComponentModel.DataAnnotations.RequiredAttribute ; using MaxLength = System.ComponentModel.DataAnnotations.MaxLengthAttribute ; namespace Foo { public class Bar { [ Required , MaxLength ( 250 ) ] public virtual string Name { get ; set ; } } }"
"a=b+ ( b=a ) *0 ; b = a - > a = 1 , b = 1b * 0 - > a = 1 , b = 1b + 0 - > a = 1 , b = 1a = b - > a = 1 , b = 1 ?"
"Help.ShowHelp ( this , HelpFile.Text , HelpNavigator.TopicId , topicIDStr ) ; If Help.ShowHelp ( ) failed { Messagebox ( `` Failed to launch help '' ) }"
DataTable animals = Select_All_Animals ( ) ; foreach ( DataRow animal in animals.Rows ) { int worstMood = 10 ; //Super Happy ! DataTable friendRecords = Select_Comp_Animal_AnimalFriend ( ( int ) animal [ `` AnimalID '' ] ) ; foreach ( DataRow friend in friendRecords.Rows ) { DataTable animalFriends = Select_AnimalFriend ( ( int ) friend [ `` AnimalID_Friend '' ] ) ; foreach ( DataRow animalFriend in animalFriends.Rows ) { int animalMood = Get_Animal_Mood ( ( int ) animalFriend [ `` Mood '' ] ) ; if ( animalMood < worstMood ) { worstMood = animalMood ; } } } }
public abstract class GameObject { public delegate void onAction ( ) ; public onAction Click ; } public class Door : GameObject { public Door ( ) { Click = new onAction ( ChangeRoom ) ; } private void ChangeRoom ( ) { //code to change room here } } public class Person : GameObject { public Person ( ) { Click = new onAction ( StartTalking ) ; } private void StartTalking ( ) { //code to display dialogue here } } specialObject.Click += new onAction ( SpecialMethod ) ;
"[ HttpGet ] public IHttpActionResult Test ( ) { //Throw new Exception ( ) ; // this exception is handled by my ExceptionHandler var list = new List < int > ( ) ; list.Add ( 1 ) ; IEnumerable < int > result = list.Select ( a = > GetData ( a ) ) ; return Ok ( result ) ; } private static int GetData ( int a ) { throw new Exception ( ) ; //This is not handled by my global exception handler } public class ExceptionHandlerAttribute : ExceptionFilterAttribute { public override void OnException ( HttpActionExecutedContext context ) { //Do something } } public static class WebApiConfig { public static void Register ( HttpConfiguration config ) { config.Routes.MapHttpRoute ( name : `` DefaultApi '' , routeTemplate : `` api/ { controller } / { action } / { id } '' , defaults : new { action = `` Get '' , id = RouteParameter.Optional } ) ; config.Filters.Add ( new ExceptionHandlerAttribute ( ) ) ; } }"
"protected void ButtonUpload_Click ( object sender , EventArgs e ) { if ( FileUploadCSV.HasFile ) { string fileText ; using ( var sr = new StreamReader ( FileUploadCSV.FileContent ) ) { fileText = sr.ReadToEnd ( ) ; } var documentNumbers = fileText.Split ( new [ ] { ' , ' , '\n ' , '\r ' } , StringSplitOptions.RemoveEmptyEntries ) ; ThreadStart threadStart = ( ) = > AnotherClass.ExpensiveOperation ( documentNumbers ) ; var thread = new Thread ( threadStart ) { IsBackground = true } ; thread.Start ( ) ; } }"
"BrowserWindow Browser = BrowserWindow.Launch ( `` http : //url '' ) ; UITestControl UiInputField = new UITestControl ( Browser ) ; UiInputField.TechnologyName = `` Web '' ; UiInputField.SearchProperties.Add ( `` ControlType '' , `` Edit '' ) ; UiInputField.SearchProperties.Add ( `` Id '' , `` MainContent_numberTb '' ) ; //Populate input fieldKeyboard.SendKeys ( UiInputField , `` 5 '' ) ; //Results ButtonUITestControl ResultsBtn = new UITestControl ( Browser ) ; ResultsBtn.TechnologyName = `` Web '' ; ResultsBtn.SearchProperties.Add ( `` ControlType '' , `` Button '' ) ; ResultsBtn.SearchProperties.Add ( `` Id '' , `` MainContent_calBtn '' ) ; Mouse.Click ( ResultsBtn ) ; < asp : Label ID= '' AllNumLbl_Res '' runat= '' server '' > < /asp : Label > string expectedAllNums = `` 1 , 2 , 3 , 4 , 5 '' ; UITestControl AllNumsTB = new UITestControl ( Browser ) ; AllNumsTB.TechnologyName = `` Web '' ; AllNumsTB.SearchProperties.Add ( `` ControlType '' , `` ? ? ? ? ? `` ) ; AllNumsTB.SearchProperties.Add ( `` Id '' , `` MainContent_AllNumLbl_Res '' ) ; if ( expectedAllNums ! = AllNumsTB. ? ? ? ? ? ? ) { Assert.Fail ( `` Wrong Answer '' ) ; } < asp : RegularExpressionValidator ID= '' regexpName '' //VALIDATION MESSAGE UITestControl PositiveNumValMsg = new UITestControl ( Browser ) ; PositiveNumValMsg.TechnologyName = `` Web '' ; PositiveNumValMsg.SearchProperties.Add ( `` Id '' , `` MainContent_regexpName '' ) ; //bool visible = false ; //System.Drawing.Point p ; //// If the control is offscreen , bring it into the viewport //PositiveNumValMsg.EnsureClickable ( ) ; // // Now check the coordinates of the clickable point // visible = PositiveNumValMsg.TryGetClickablePoint ( out p ) // & & ( p.X > 0 || p.Y > 0 ) ; var isVisible = PositiveNumValMsg.WaitForControlPropertyNotEqual ( UITestControl.PropertyNames.State , ControlStates.Invisible ) ; //string labelText3 = PositiveNumValMsg.GetProperty ( `` style '' ) .ToString ( ) ;"
public interface IHandleEvent < TEvent > where TEvent : IEvent { void Handle ( TEvent evnt ) ; } Scan ( cfg = > { cfg.TheCallingAssembly ( ) ; cfg.ConnectImplementationsToTypesClosing ( typeof ( IHandleEvent < > ) ) ; } ) ; kernel.Bind < IHandleEvent < SomeEvent > > ( ) .To < EventHandler1 > ( ) ; kernel.Bind < IHandleEvent < SomeEvent > > ( ) .To < EventHandler2 > ( ) ; kernel.Bind < IHandleEvent < SomeOtherEvent > > ( ) .To < EventHandler3 > ( ) ;
"< Grid Height= '' 93 '' Width= '' 335 '' > < TextBox TextWrapping= '' Wrap '' Text= '' { Binding TextboxText } '' HorizontalContentAlignment= '' Center '' VerticalContentAlignment= '' Center '' BorderBrush= '' { x : Null } '' Background= '' { x : Null } '' / > < Path Data= '' M384,242 L442.5,242 '' HorizontalAlignment= '' Left '' Height= '' 1 '' Margin= '' 0,28.667,0,0 '' Stretch= '' Fill '' VerticalAlignment= '' Top '' Width= '' 59.5 '' > < Path.Fill > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' # 8EFFFFFF '' / > < GradientStop Color= '' White '' Offset= '' 0.991 '' / > < /LinearGradientBrush > < /Path.Fill > < Path.Stroke > < LinearGradientBrush EndPoint= '' 0.5,1 '' MappingMode= '' RelativeToBoundingBox '' StartPoint= '' 0.5,0 '' > < LinearGradientBrush.RelativeTransform > < TransformGroup > < ScaleTransform CenterY= '' 0.5 '' CenterX= '' 0.5 '' / > < SkewTransform CenterY= '' 0.5 '' CenterX= '' 0.5 '' / > < RotateTransform Angle= '' 90 '' CenterY= '' 0.5 '' CenterX= '' 0.5 '' / > < TranslateTransform/ > < /TransformGroup > < /LinearGradientBrush.RelativeTransform > < GradientStop Color= '' White '' Offset= '' 0.009 '' / > < GradientStop Color= '' # 5FFFFFFF '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Path.Stroke > < /Path > < Label Content= '' { Binding LabelText } '' HorizontalAlignment= '' Left '' Width= '' 113 '' FontSize= '' 16 '' Height= '' 40 '' VerticalAlignment= '' Top '' BorderBrush= '' White '' Margin= '' 0,0.167,0,0 '' / > < Path Data= '' M125.12574,28.672087 L145.37561 , -1.1668457 '' HorizontalAlignment= '' Left '' Height= '' 30.839 '' Margin= '' 58.125 , -1,0,0 '' Stretch= '' Fill '' VerticalAlignment= '' Top '' Width= '' 21.25 '' > < Path.Stroke > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' # 51FFFFFF '' Offset= '' 0 '' / > < GradientStop Color= '' White '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Path.Stroke > < Path.Fill > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' # 49FFFFFF '' Offset= '' 0 '' / > < GradientStop Color= '' White '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Path.Fill > < /Path > < Path Data= '' M0,83 L181.35815,83 '' Fill= '' # FFF4F4F5 '' Height= '' 1 '' Stretch= '' Fill '' VerticalAlignment= '' Bottom '' Width= '' 327 '' StrokeThickness= '' 2 '' Margin= '' 0,0,10,10 '' > < Path.Stroke > < LinearGradientBrush EndPoint= '' 0.5,1 '' StartPoint= '' 0.5,0 '' > < GradientStop Color= '' Black '' Offset= '' 0 '' / > < GradientStop Color= '' White '' Offset= '' 1 '' / > < /LinearGradientBrush > < /Path.Stroke > < /Path > < /Grid >"
"@ '' ^ ( ? ( `` '' ) ( `` '' .+ ? ( ? < ! \\ ) '' '' @ ) | ( ( [ 0-9a-z ] ( ( \. ( ? ! \ . ) ) | [ - ! # \ $ % & '\*\+/=\ ? \^ ` \ { \ } \|~\w ] ) * ) ( ? < = [ 0-9a-z ] ) @ ) ) ( ? ( \ [ ) ( \ [ ( \d { 1,3 } \. ) { 3 } \d { 1,3 } \ ] ) | ( ( [ 0-9a-z ] [ -\w ] * [ 0-9a-z ] *\ . ) + [ a-z0-9 ] [ \-a-z0-9 ] { 0,22 } [ a-z0-9 ] ) ) $ '' ^ ( ? ( `` ) ( `` .+ ? '' @ ) | ( ( [ 0-9a-zA-Z ] ( ( \. ( ? ! \. ) ) | [ ^ ! # \ $ % & \s'\*/=\ ? \^ ` \ { \ } \|~ ] ) * ) ( ? < = [ -+0-9a-zA-Z_ ] ) @ ) ) ( ? ( \ [ ) ( \ [ ( \d { 1,3 } \. ) { 3 } \d { 1,3 } \ ] ) | ( ( [ 0-9a-zA-Z ] [ -\w ] * [ 0-9a-zA-Z ] *\ . ) + [ a-zA-Z ] { 2,6 } ) ) $"
"public class CheckIPFilter : RequestFilterAttribute { private readonly IList < string > _IPAddresses = new List < string > ( ) ; public CheckIPFilter ( ) { } public CheckIPFilter ( IList < string > IPAddresses ) { _IPAddresses = IPAddresses ; } public override void Execute ( ServiceStack.ServiceHost.IHttpRequest req , ServiceStack.ServiceHost.IHttpResponse res , object requestDto ) { if ( ! _IPAddresses.Contains ( req.UserHostAddress ) ) { var errResponse = DtoUtils.CreateErrorResponse ( `` 401 '' , `` Unauthorised '' , null ) ; var responseDto = DtoUtils.CreateResponseDto ( requestDto , new ResponseStatus ( `` 401 '' , `` Unauthorised '' ) ) ; var contentType = req.ResponseContentType ; var serializer = EndpointHost.AppHost.ContentTypeFilters.GetResponseSerializer ( contentType ) ; res.ContentType = contentType ; var serializationContext = new HttpRequestContext ( req , res , responseDto ) ; serializer ( serializationContext , responseDto , res ) ; res.EndRequest ( ) ; //stops further execution of this request return ; } } } var IPAddresses = new List < string > ( ) { `` 99.99.99.99 '' , `` 99.99.99.99 '' , `` 99.99.99.99 '' , `` 99.99.99.99 '' } ; container.Register < IList < string > > ( IPAddresses ) ;"
"public class MyClass { private static readonly Dictionary < string , int > mydict = CreateDictionary ( ) ; private static Dictionary < string , int > CreateDictionary ( ) { ... } }"
"private void AppBarWindow_Activated ( object sender , EventArgs e ) { if ( Settings.Default.AppBarWindowEdge ! = ABEdge.None ) { AppBarFunctions.SendShellActivated ( this ) ; } } private void AppBarWindow_Closing ( object sender , CancelEventArgs e ) { Settings.Default.AppBarWindowLeft = Left ; Settings.Default.AppBarWindowTop = Top ; Settings.Default.Save ( ) ; AppBarFunctions.SetAppBar ( this , ABEdge.None ) ; // Other , app specific code . . . } private void AppBarWindow_LocationChanged ( object sender , EventArgs e ) { if ( Settings.Default.AppBarWindowEdge ! = ABEdge.None ) { AppBarFunctions.SendShellWindowPosChanged ( this ) ; } } private void AppBarWindow_SourceInitialized ( object sender , EventArgs e ) { if ( Settings.Default.AppBarWindowEdge ! = ABEdge.None ) { SizeWindow ( Settings.Default.AppBarWindowEdge == ABEdge.None ? ABEdge.Left : ABEdge.None ) ; } } private void AppBarWindow_SizeChanged ( object sender , SizeChangedEventArgs e ) { if ( Settings.Default.AppBarWindowEdge ! = ABEdge.None ) { AppBarFunctions.SendShellWindowPosChanged ( this ) ; } } private void SizeWindow ( ABEdge originalEdge ) { // App specific code to compute the window 's size . . . if ( originalEdge ! = Settings.Default.AppBarWindowEdge ) { AppBarFunctions.SetAppBar ( this , Settings.Default.AppBarWindowEdge ) ; } Settings.Default.AppBarWindowLeft = Left ; Settings.Default.AppBarWindowTop = Top ; Settings.Default.Save ( ) ; } // This is done async , because WPF will send a resize after a new appbar is added . // if we size right away , WPFs resize comes last and overrides us ."
Expect.Call ( reader.Read ( ) ) .Return ( true ) ; Expect.Call ( reader [ `` foo_id '' ] ) .Return ( ( long ) 1 ) ; // ... .Expect.Call ( reader.Read ( ) ) .Return ( true ) ; Expect.Call ( reader [ `` foo_id '' ] ) .Return ( ( long ) 2 ) ; // ... .Expect.Call ( reader.Read ( ) ) .Return ( false ) ;
"using System ; using System.Linq ; using System.DirectoryServices.AccountManagement ; string SamAccountName = `` user1 '' ; //The OUs the user is in : //Broken OU : `` OU=Test / Test , DC=contoso , DC=com '' //Working OU : `` OU=Test & Test , DC=contoso , DC=com '' PrincipalContext domainContext = new PrincipalContext ( ContextType.Domain , Environment.UserDomainName ) ; UserPrincipal user = UserPrincipal.FindByIdentity ( domainContext , IdentityType.SamAccountName , SamAccountName ) ; //The user was found so this worksConsole.WriteLine ( `` User Found : { 0 } '' , user.DistinguishedName ) ; //This causes COM Exception : Unknown Error 0x80005000 string output = string.Join ( Environment.NewLine , user.GetGroups ( ) .Select ( x = > x.Name ) .ToArray ( ) ) ; Console.WriteLine ( output ) ;"
"var value = Expression.Parameter ( typeof ( int ) ) ; var defaultBody = Expression.Constant ( 0 ) ; var cases1 = new [ ] { Expression.SwitchCase ( Expression.Constant ( 1 ) , Expression.Constant ( 1 ) ) , } ; var cases2 = new SwitchCase [ 0 ] ; var switch1 = Expression.Switch ( value , defaultBody , cases1 ) ; var switch2 = Expression.Switch ( value , defaultBody , cases2 ) ; switch ( expr ) { default : return 0 ; } //switch"
using ( TextBox txtBox = e.Row.Cells [ 1 ] .FindControl ( `` txtBox '' ) as TextBox ) { }
string s = `` string '' ; Console.WriteLine ( s [ 1 ] ) ; // returns tchar [ ] chars = s.ToCharArray ( ) ; Console.WriteLine ( chars [ 1 ] ) ; // also returns t
"public event EventHandler < MyEventArgs > MyEvent ; protected virtual void OnMyEvent ( MyEventArgs args ) { EventHandler < MyEventArgs > handler = this.MyEvent ; if ( handler ! = null ) handler ( this , args ) ; } public event EventHandler < MyEventArgs > MyEvent ; protected virtual void OnMyEvent ( MyEventArgs args ) { this.MyEvent ? .Invoke ( this , args ) ; }"
private void RunThread ( ) { while ( true ) { try { context.WaitAnyUpdateAll ( ) ; //context is an OpenNI context object . } catch ( Exception ex ) { Console.WriteLine ( ex.ToString ( ) ) ; } //process some data } } A timeout has occured when waiting for new data ! at OpenNI.Context.WaitAnyUpdateAll ( ) at < file described above > OpenNI.StatusException : The server has disconnected ! at OpenNI.Context.WaitAnyUpdateAll ( ) at < file described above >
"int variable = int.TryParse ( stringValue , out variable ) ? variable : 0 ;"
"private static void QS ( int [ ] arr , int left , int right ) { if ( left > = right ) return ; var pIndex = Partition ( arr , left , right ) ; QS ( arr , left , pIndex ) ; QS ( arr , pIndex + 1 , right ) ; } private static int Partition ( int [ ] arr , int left , int right ) { int pivot = arr [ left ] ; int leftPoint = left - 1 ; int pIndex = right + 1 ; int temp = 0 ; while ( true ) { do { pIndex -- ; } while ( arr [ pIndex ] > pivot ) ; do { leftPoint++ ; } while ( arr [ leftPoint ] < pivot ) ; if ( leftPoint < pIndex ) { temp = arr [ leftPoint ] ; arr [ leftPoint ] = arr [ pIndex ] ; arr [ pIndex ] = temp ; } else { break ; } } return pIndex ; } private static void Main ( string [ ] args ) { const int globalRuns = 10 ; const int localRuns = 1000 ; var source = Enumerable.Range ( 1 , 200000 ) .OrderBy ( n = > Guid.NewGuid ( ) ) .ToArray ( ) ; var a = new int [ source.Length ] ; int start , end , total ; for ( int z = 0 ; z < globalRuns ; z++ ) { Console.WriteLine ( `` Run # { 0 } '' , z+1 ) ; total = 0 ; for ( int i = 0 ; i < localRuns ; i++ ) { Array.Copy ( source , a , source.Length ) ; start = Environment.TickCount ; Array.Sort ( a ) ; end = Environment.TickCount ; total += end - start ; } Console.WriteLine ( `` { 0 } \t\tTtl : { 1 } ms\tAvg : { 2 } ms '' , `` .NET '' , total , total / localRuns ) ; total = 0 ; for ( int i = 0 ; i < localRuns ; i++ ) { Array.Copy ( source , a , source.Length ) ; start = Environment.TickCount ; Quicksort.SortInline ( a ) ; end = Environment.TickCount ; total += end - start ; } Console.WriteLine ( `` { 0 } \t\tTtl : { 1 } ms\tAvg : { 2 } ms '' , `` Inlined '' , total , total / localRuns ) ; total = 0 ; for ( int i = 0 ; i < localRuns ; i++ ) { Array.Copy ( source , a , source.Length ) ; start = Environment.TickCount ; Quicksort.SortNonInline ( a ) ; end = Environment.TickCount ; total += end - start ; } Console.WriteLine ( `` { 0 } \tTtl : { 1 } ms\tAvg : { 2 } ms\n '' , `` Not inlined '' , total , total / localRuns ) ; } }"
"var recounter = new IdRecounter ( filePath , new Progress < string > ( Console.WriteLine ) ) ; recounter.RecalculateIds ( ) ;"
"Name : aChildren : bc de Name : aChildren : No Children bce bce bce class Book { private String name ; private Book [ ] children ; private StringBuilder text ; private Boolean isParent ; public Book ( String name , Book [ ] children , StringBuilder text , Boolean isParent ) { this.name = name ; this.children = children ; this.text = text ; this.isParent = isParent ; } /** * Most likely all possible Constructors * */ public Book ( String name , Book [ ] children ) : this ( name , children , new StringBuilder ( `` No Text '' ) , true ) { } public Book ( String name , String text ) : this ( name , new Book [ 0 ] , new StringBuilder ( text ) , false ) { } public Book ( String name , StringBuilder text ) : this ( name , new Book [ 0 ] , text , false ) { } public Book ( String name ) : this ( name , new Book [ 0 ] , new StringBuilder ( `` No Text '' ) , false ) { } public Book ( Book [ ] children , String text ) : this ( `` Unnamed Book '' , children , new StringBuilder ( text ) , true ) { } public Book ( Book [ ] children , StringBuilder text ) : this ( `` Unnamed Book '' , children , text , true ) { } public Book ( Book [ ] children ) : this ( `` Unnamed Book '' , children , new StringBuilder ( `` No Text '' ) , true ) { } public Book ( StringBuilder text ) : this ( `` Unnamed Book '' , new Book [ 0 ] , text , false ) { } public Book ( ) : this ( `` Unnamed Book '' , new Book [ 0 ] , new StringBuilder ( `` No Text '' ) , false ) { } public String Name { get { return name ; } set { name = value ; } } public Book [ ] Children { get { return children ; } set { children = value ; } } /** * Will Return the StringBuilder Object of this Text * */ public StringBuilder Text { get { return text ; } set { text = value ; } } public Boolean IsParent { get { return isParent ; } set { isParent = value ; } } private void GetAllChildren ( Book book , StringBuilder sb ) { if ( book.isParent ) { GetAllChildren ( book , sb ) ; } else { sb.Append ( `` \t '' ) ; foreach ( Book b in children ) { sb.Append ( b.Name + `` \n '' ) ; } } } public override String ToString ( ) { StringBuilder sChildren = new StringBuilder ( `` No Children '' ) ; if ( children.Length ! = 0 ) { GetAllChildren ( this , sChildren ) ; } return `` Name : `` + name + `` \n '' + `` Children : `` + sChildren.ToString ( ) ; } }"
class Repository { public Item LastValueCache { get { Thread.MemoryBarrier ( ) ; SomeType result = field ; Thread.MemoryBarrier ( ) ; return result ; } set { Thread.MemoryBarrier ( ) ; field = value ; Thread.MemoryBarrier ( ) ; } } public void Save ( Item item ) { SaveToDatabase ( item ) ; Item cached = LastValueCache ; if ( cached == null || item.Stamp > cached.Stamp ) { LastValueCache = item ; } } public void Remove ( Timestamp stamp ) { RemoveFromDatabase ( item ) ; Item cached = LastValueCache ; if ( cached ! = null & & cached.Stamp == item.Stamp ) { LastValueCache = null ; } } public Item Get ( Timestamp stamp ) { Item cached = LastValueCache ; if ( cached ! = null & & cached.Stamp == stamp ) { return cached ; } return GetFromDatabase ( stamp ) ; } }
"public interface Lock { void Lock ( ) ; void Unlock ( ) ; } public class C_Sharp_Lock : Lock { readonly Object myLock = new object ( ) ; public void Lock ( ) { Monitor.Enter ( myLock ) ; } public void Unlock ( ) { Monitor.Exit ( myLock ) ; } } public class Tas_Lock : Lock { int L = 0 ; public void Lock ( ) { while ( 0 == Interlocked.Exchange ( ref L , 1 ) ) { } ; } public void Unlock ( ) { Interlocked.Exchange ( ref L , 0 ) ; } } public class Tas_Lock : Lock { int L = 0 ; public void Lock ( ) { while ( 0 == Interlocked.CompareExchange ( ref L , 1 , 0 ) ) { } ; } public void Unlock ( ) { Interlocked.Exchange ( ref L , 0 ) ; } } public class C_Sharp_Lock : Lock { readonly Object myLock = new object ( ) ; bool lockTaken = false ; public void Lock ( ) { Monitor.Enter ( myLock , ref lockTaken ) ; } public void Unlock ( ) { if ( lockTaken ) Monitor.Exit ( myLock ) ; } }"
public static readonly DataTable warnings_table = init_warnings_table ( ) ; public static void set_warning ( string msg ) { var row = warnings_table.NewRow ( ) ; row [ 1 ] = DateTime.Now ; row [ 2 ] = msg ; ... warnings_table.Rows.Add ( row ) ; } [ Microsoft.SqlServer.Server.SqlProcedure ] public static SqlInt32 wrapper_func ( SqlInt32 param ) { return big_func ( Param.Value ) ; } int big_func ( int param ) { SqlBulkCopy bulkcopy ; ... . set_warning ( `` Message '' ) ; ... . write_warnings ( bulkcopy ) ; warnings_table.Clear ( ) ; }
AVPlayer myAVPlayer = new AVPlayer ( ) ; var volume = myAVPlayer.Volume ;
"Parallel.ForEach ( iterations , i = > { var response = await MakeRequest ( i ) ; // do thing with response } ) ; Parallel.ForEach ( iterations , i = > { var response = MakeRequest ( i ) ; response.GetAwaiter ( ) .OnCompleted ( ( ) = > { // do thing with response } ) ; } ) ; ServicePointManager.DefaultConnectionLimit = int.MaxValue"
bool attachedDebugger = false ; try { attachedDebugger = System.Diagnostics.Debugger.Launch ( ) ; } catch ( Exception ) { } finally { Console.WriteLine ( attachedDebugger ? `` Debugger Attached '' : `` Failed to attach debugger '' ) ; }
class Class1 < T > { protected virtual T Prop1 { get ; set ; } protected virtual string Prop2 { get ; set ; } } class Class2 : Class1 < string > { protected override string Prop1 { get ; set ; } protected override string Prop2 { get ; set ; } } var hProperties = typeof ( Class2 ) .GetProperties ( BindingFlags.NonPublic | BindingFlags.Instance ) ;
public class CompanyFilter : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { filterContext.Controller.ViewBag.Company = `` MyCompany '' ; } }
if ( Categories ! = null ) { bool flag=false ; foreach ( dynamic usableCat in Category.LoadForProject ( project.ID ) ) { foreach ( dynamic catRow in Categories ) { if ( usableCat.ID == catRow.ID ) flag = true ; } if ( ! flag ) { int id = usableCat.ID ; Category resolution = Category.Load ( id ) ; resolution.Delete ( Services.UserServices.User ) ; } } } if ( Priorities ! = null ) { bool flag = false ; foreach ( dynamic usableCat in Priority.LoadForProject ( project.ID ) ) { foreach ( dynamic catRow in Priorities ) { if ( usableCat.ID == catRow.ID ) flag = true ; } if ( ! flag ) { int id = usableCat.ID ; Priority resolution = Priority.Load ( id ) ; resolution.Delete ( Services.UserServices.User ) ; } } }
public class MachineModel { public Snapshot CurrentSnapshot { get ; } public void RestoreSnapshot ( Snapshot saved ) { /* etc */ } ; } public class MachineModel { public abstract class Snapshot { protected internal Snapshot ( ) { } abstract internal void Restore ( MachineModel model ) ; } private class SnapshotImpl : Snapshot { /* etc */ } public void Restore ( Snapshot state ) { state.Restore ( this ) ; } }
using System.Text.RegularExpressions ; using System.Web ;
"public ViewResult Summary ( ReportArgs args ) { return View < SomeBuilder > ( args ) ; } public class SomeBuilder : NewBuilder < TaskVM , Task > { } public class NewBuilder < TModel , TItem > : ReportBuilder where TModel : SomeReportVM < TItem > , new ( ) where TItem : ReportItem { public override ReportVM Build ( ReportArgs args ) { /* Some code to get roles here */ return new TModel { FeedbackModel = FeedbackBuilder.Build ( inputGrid.Report.Id ) , } ; } }"
let lazyValue = lazy 0member this.Value with get ( ) = lazyValue.Value and set _lazyVal = lazyValue < - _lazyVal
-- -- - -- -- - -- -- - -- -- - -- -- - | A | -- - > | B | -- - > | C | -- - > | D | -- - > ... -- - > | Z | -- -- - -- -- - -- -- - -- -- - -- -- - A parentObject ; if ( parentObject.getB ( ) ! = null & & parentObject.getB ( ) .getC ( ) ! = null & & parentObject.getB ( ) .getC ( ) .getD ( ) ! = null & & parentObject.getB ( ) .getC ( ) .getD ( ) .getE ( ) ! = null & & ... parentObject.getB ( ) .getC ( ) .getD ( ) .getE ( ) .get ... getZ ( ) ! = null ) { parentObject.getB ( ) .getC ( ) .getD ( ) .getE ( ) .get ... getZ ( ) .doSomething ( ) ; } try { parentObject.getB ( ) .getC ( ) .getD ( ) .getE ( ) .get ... getZ ( ) .doSomething ( ) ; } catch ( NullPointerException e ) { }
"Option Strict OnModule Module1 Sub Main ( ) For Each i As Integer In New String ( ) { `` why '' , `` is '' , `` this '' , `` tolerated ? '' } ' compiles just fine . Next End SubEnd Module class Program { static void Main ( string [ ] args ) { foreach ( int i in new string [ ] { `` that 's '' , `` better '' } ) { // will not compile , and for good reason . } } }"
public interface IInterface { void DoIt ( ) ; } public class Example { public void MethodInterface ( IInterface arg ) { arg.DoIt ( ) ; } public void MethodGeneric < T > ( T arg ) where T : IInterface { arg.DoIt ( ) ; } }
private string _myField ; public string MyProperty { get { return _myField ; } private set { _myField = value ; } }
//pseudocodestring aString = `` The number 4 '' If ( aString contains a number ) Then enter validation loopElse return to main//output '' The string contains a number . Are you sure you want to continue ? ''
using ( profiler.Step ( `` Set page title '' ) ) { ViewBag.Title = `` Home Page '' ; }
"// using types from Tridion.ContentManager.Interop.TDS// and Tridion.ContentManager.Interop.TDSDefinesTDSE tdse = new TDSE ( ) ; Page page = ( Page ) tdse.GetObject ( itemUri , EnumOpenMode.OpenModeView , `` tcm:0-0-0 '' , XMLReadFilter.XMLReadAll ) ; page.IsPublishedTo ( tcm ) ;"
class Io { public int Id { get ; set ; } // other fields specific to the Io type } class ThingOne { public int Id { get ; set ; } public Io SensorInput { get ; set ; } public Io SolenoidOutput { get ; set ; } // other stuff } class ThingTwo { public int Id { get ; set ; } public Io SensorInput1 { get ; set ; } public Io SensorInput2 { get ; set ; } public SubThing Doohickey { get ; set ; } // ... } class SubThing { public int Id { get ; set ; } public Io ControlOutput1 { get ; set ; } // ... }
void DoWork ( ) { if ( FooCheckBox.Checked ) { Foo ( ) ; Console.WriteLine ( `` Foo was called '' ) ; } if ( BarCheckBox.Checked ) { Bar ( ) ; Console.WriteLine ( `` Bar was called '' ) ; } if ( BazCheckBox.Checked ) { Baz ( ) ; Console.WriteLine ( `` Baz was called '' ) ; } }
using Microsoft.AspNetCore.Mvc ; namespace MyApp.Implementation.Controllers { public class ExampleController : Controller { public ActionResult < int > Index ( ) { return 5 ; } } } fail : Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware [ 1 ] An unhandled exception has occurred while executing the request.System.InvalidOperationException : The view 'Index ' was not found . The following locations were searched : /Views/Home/Index.cshtml/Views/Shared/Index.cshtml/Pages/Shared/Index.cshtml
"//http : //msdn.microsoft.com/en-us/library/cc190153.aspxpublic static void WriteLine ( string format , params Object [ ] args ) ; //http : //msdn.microsoft.com/en-us/library/1w33ay0x.aspxpublic static void WriteLine ( string message , string category ) ; Debug.WriteLine ( `` The path is { 0 } '' , myObj.myPath ) ; Debug.WriteLine ( `` The path is { 0 } '' , new object [ ] { myObj.myPath } ) ; Debug.WriteLine ( `` The path is { 0 } '' , myObj.myPath , `` '' ) ;"
public interface ITaskProvider { T GetTask < T > ( ) ; } public class TaskProvider : ITaskProvider { public IUserTasks UserTasks { get ; set ; } public IIdentityTasks IdentityTasks { get ; set ; } public T GetTask < T > ( ) { Type type = typeof ( T ) ; if ( type == typeof ( IUserTasks ) ) return ( T ) this.UserTasks ; if ( type == typeof ( IIdentityTasks ) ) return ( T ) this.IdentityTasks ; return default ( T ) ; } } public ITaskProvider TaskProvider { get ; set ; } public AuctionsController ( ITaskProvider taskProvider ) { TaskProvider = taskProvider ; } public ActionResult Index ( ) { var userTasks = TaskProvider.GetTask < IUserTasks > ( ) ; var user = userTasks.FindbyId ( guid ) ; }
public class MethodClass { public async Task Job ( ) { Debug.WriteLine ( `` Doing some sob '' ) ; await Task.Delay ( 1 ) ; } } public MethodClass MyClass = null ; protected async override void OnLaunched ( LaunchActivatedEventArgs e ) { await MyClass ? .Job ( ) ; // here goes NullreferenceException MyClass ? .Job ( ) ; // works fine - does nothing
"^\d*\ . ? \d* $ ( ^\d*\ . ? \d* $ ) { 1,10 } ( ? =^\d*\. ? \d* $ ) ^ . { 1,10 } $"
"interface IJob { bool DoPrintJob ( ) ; bool DoStaplingJob ( ) ; bool DoJob1 ( ) ; bool DoJob2 ( ) ; bool DoJob3 ( ) ; } class Job : IJob { // implement all IJob methods here . } var printClient = new Job ( ) ; // a class implemeting IJobprintClient.DoPrintJob ( ) ; // but ` printClient ` also knows about DoStaplingJob ( ) , DoJob1 ( ) , DoJob2 ( ) , DoJob3 ( ) also . interface IPrintJob { bool DoPrintJob ( ) ; } interface IStapleJob { bool DoStapleJob ( ) ; } interface IJob : IPrintJob , IStapleJob { bool DoPrintJob ( ) ; bool DoStaplingJob ( ) ; } var printClient = new PrintJob ( ) ; //PrintJob implements the IPrintJob interface var stapleClient = new StableJob ( ) ; // StapleJob implements the IStapleJob interface"
using System ; class Program { public static void Main ( ) { Console.WriteLine ( `` Hello World ! `` ) ; Console.ReadLine ( ) ; } }
"public interface MyInterface < T > { T GetSomething ( ) ; void DoSomething ( T something ) ; } public class MyIntClass : MyInterface < int > { int GetSomething ( ) { return 42 ; } void DoSomething ( int something ) { Console.Write ( something ) ; } } public class MyStringClass : MyInterface < string > { string GetSomething ( ) { return `` Something '' ; } void DoSomething ( string something ) { SomeStaticClass.DoSomethingWithString ( something ) ; } } public static void DoALotOfThingsTwice ( ) { var listOfThings = new List < MyInterface < T > > ( ) { new MyIntClass ( ) , new MyStringClass ( ) ; } ; foreach ( MyInterface < T > thingDoer in listOfThings ) { T something = thingDoer.GetSomething ( ) ; thingDoer.DoSomething ( something ) ; thingDoer.DoSomething ( something ) ; } } public static void DoALotOfThingsTwice ( ) { var listOfThings = new List < ∃T.MyInterface < T > > ( ) { new MyIntClass ( ) , new MyStringClass ( ) ; } ; foreach ( ∃T.MyInterface < T > thingDoer in listOfThings ) { T something = thingDoer.GetSomething ( ) ; thingDoer.DoSomething ( something ) ; thingDoer.DoSomething ( something ) ; } }"
"public class SomeClass : IComparable < SomeClass > , IEquatable < SomeClass > { // ... }"
public interface IChangeStruct { int Value { get ; } void Change ( int value ) ; } public struct MyStruct : IChangeStruct { int value ; public MyStruct ( int _value ) { value = _value ; } public int Value { get { return value ; } } public void Change ( int value ) { this.value = value ; } } MyStruct [ ] l1 = new MyStruct [ ] { new MyStruct ( 0 ) } ; Console.WriteLine ( l1 [ 0 ] .Value ) ; //0l1 [ 0 ] .Change ( 10 ) ; Console.WriteLine ( l1 [ 0 ] .Value ) ; //10 List < MyStruct > l2 = new List < MyStruct > { new MyStruct ( 0 ) } ; Console.WriteLine ( l2 [ 0 ] .Value ) ; //0l2 [ 0 ] .Change ( 10 ) ; Console.WriteLine ( l2 [ 0 ] .Value ) ; //also 0 IL_0030 : ldelema Utils.MyStructIL_0035 : ldc.i4.s 10IL_0037 : call instance void Utils.MyStruct : :Change ( int32 ) IL_007c : callvirt instance ! 0 class [ mscorlib ] System.Collections.Generic.List ` 1 < valuetype Utils.MyStruct > : :get_Item ( int32 ) IL_0081 : stloc.s CS $ 0 $ 0001 IL_0083 : ldloca.s CS $ 0 $ 0001 IL_0085 : ldc.i4.s 10 IL_0087 : call instance void Utils.MyStruct : :Change ( int32 )
public string Foo ( ) { var _foo = `` foo bar '' ; return _foo ; }
public class AudioUIManager : MonoBehaviour //Only one of these in the scene { public AudioClip genericUISound ; //This is set in the inspector . } public class AudioUITextAnimation : MonoBehaviour { [ SerializeField ] private AudioClip specifiedUISound ; //This is not set in the inspector [ SerializeField ] private AudioUIManager audioUIManager ; // I get a reference to this elsewhere void Start ( ) { //Use generic sounds from audio manager if nothing is specified . specifiedUISound = specifiedUISound ? ? audioUIManager.genericUISound ; print ( specifiedUISound ) ; } } specifiedUISound = specifiedUIsound == null ? audioUIManager.genericUISound : specifiedUISound ;
public static IContentStructure Sentence { get { return _sentence ? ? ( _sentence = new Sentence ( ) ) ; } } if ( _sentence ! = null ) { return _sentence ; } else { return ( _sentence = new Sentence ( ) ) ; } public static IContentStructure Sentence { get { lock ( _sentence ) { return _sentence ? ? ( _sentence = new Sentence ( ) ) ; } } }
"< ? phpdefine ( 'HOST ' , '********************* ' ) ; define ( 'USER ' , '********************* ' ) ; define ( 'PASS ' , '********************* ' ) ; define ( 'DB ' , '*********************** ' ) ; if ( $ _SERVER [ 'REQUEST_METHOD ' ] =='GET ' ) { $ start = $ _GET [ 'start ' ] ; $ ending = $ _GET [ 'ending ' ] ; } $ con = mysqli_connect ( HOST , USER , PASS , DB ) ; $ sql = `` SELECT * FROM table WHERE date_time BETWEEN ' $ start ' and ' $ ending ' '' ; $ res = mysqli_query ( $ con , $ sql ) ; $ result = array ( ) ; while ( $ row = mysqli_fetch_array ( $ res ) ) { array_push ( $ result , array ( 'id'= > $ row [ 0 ] , 'p_pairs'= > $ row [ 1 ] , 'temp1'= > $ row [ 2 ] , 'temp2'= > $ row [ 3 ] , 'temp3'= > $ row [ 4 ] , 'temp4'= > $ row [ 5 ] , 'temp5'= > $ row [ 6 ] , 'avg_current'= > $ row [ 7 ] , 'avg_voltage'= > $ row [ 8 ] , 'kw'= > $ row [ 9 ] , 'kwh'= > $ row [ 10 ] ) ) ; } echo json_encode ( array ( $ result ) ) ; mysqli_close ( $ con ) ; ? > [ [ { `` id '' : '' 1 '' , '' p_pairs '' : '' 0000-00-00 00:00:00 '' , '' temp1 '' : '' 2 '' , '' temp2 '' : '' 100 '' , '' temp3 '' : '' 100 '' , '' temp4 '' : '' 100 '' , '' temp5 '' : '' 100 '' , '' avg_current '' : '' 100 '' , '' avg_voltage '' : '' 300 '' , '' kw '' : '' 300 '' , '' kwh '' : '' 300 '' } , { `` id '' : '' 2 '' , '' p_pairs '' : '' 0000-00-00 00:00:00 '' , '' temp1 '' : '' 45 '' , '' temp2 '' : '' 105 '' , '' temp3 '' : '' 230 '' , '' temp4 '' : '' 100 '' , '' temp5 '' : '' 2500 '' , '' avg_current '' : '' 570 '' , '' avg_voltage '' : '' 100 '' , '' kw '' : '' 250 '' , '' kwh '' : '' 1000 '' } , { `` id '' : '' 3 '' , '' p_pairs '' : '' 2016-01-07 21:10:00 '' , '' temp1 '' : '' 45 '' , '' temp2 '' : '' 105 '' , '' temp3 '' : '' 230 '' , '' temp4 '' : '' 100 '' , '' temp5 '' : '' 2500 '' , '' avg_current '' : '' 570 '' , '' avg_voltage '' : '' 100 '' , '' kw '' : '' 250 '' , '' kwh '' : '' 1000 '' } , { `` id '' : '' 4 '' , '' p_pairs '' : '' 2016-01-07 21:10:00 '' , '' temp1 '' : '' 45 '' , '' temp2 '' : '' 105 '' , '' temp3 '' : '' 230 '' , '' temp4 '' : '' 100 '' , '' temp5 '' : '' 2500 '' , '' avg_current '' : '' 570 '' , '' avg_voltage '' : '' 100 '' , '' kw '' : '' 250 '' , '' kwh '' : '' 1000 '' } ] ] System.Net.WebClient wc = new System.Net.WebClient ( ) ; byte [ ] raw = wc.DownloadData ( `` url to php '' ) ; string webData = System.Text.Encoding.UTF8.GetString ( raw ) ;"
"public IEnumberable < MyType > GetMyTypeObjects ( ) { string cmdTxt = `` select * from MyObjectTable '' ; using ( SqlConnection conn = new SqlConnection ( connString ) ) { using ( SqlCommand cmd = new SqlCommand ( cmdTxt , conn ) ) { conn.Open ( ) ; using ( SqlDataReader reader = cmd.ExecuteReader ( ) ) { while ( reader.Read ( ) ) { yield return Mapper.MapTo < MyType > ( reader ) ; } } } } yield break ; }"
"// simple standalone methodpublic bool HelperMethod ( string substr ) { return substr.Equals ( `` abc '' ) ; } // complex method making ( multiple ) use of HelperMethodpublic bool ActualMethod ( string str ) { for ( var i=0 ; i < str.Length ; i++ ) { var substr = str.Substring ( i , 3 ) ; if ( HelperMethod ( substr ) ) return true ; } return false ; }"
"class Program { internal static readonly MediaTypeFormatter DefaultFormatter = new JsonMediaTypeFormatter { UseDataContractJsonSerializer = false , SerializerSettings = { NullValueHandling = NullValueHandling.Ignore , DateTimeZoneHandling = DateTimeZoneHandling.Utc , DateFormatHandling = DateFormatHandling.IsoDateFormat } } ; private static DataTable BuildTestDataTable ( ) { var testDataTable = new DataTable ( ) ; testDataTable.Columns.Add ( `` Label '' , typeof ( string ) ) ; testDataTable.Columns.Add ( `` Metric '' , typeof ( decimal ) ) ; testDataTable.Rows.Add ( `` A '' , 10 ) ; testDataTable.Rows.Add ( `` B '' , 20 ) ; return testDataTable ; } static void Main ( string [ ] args ) { DataTable table = BuildTestDataTable ( ) ; ObjectContent oc = new ObjectContent ( table.GetType ( ) , table , DefaultFormatter ) ; Console.WriteLine ( oc.ReadAsStringAsync ( ) .Result ) ; Console.ReadKey ( ) ; } } { `` DataTable.RemotingVersion '' : { `` _Major '' : 2 , `` _Minor '' : 0 , `` _Build '' : -1 , `` _Revision '' : -1 } , `` XmlSchema '' : `` < ? xml version=\ '' 1.0\ '' encoding=\ '' utf-16\ '' ? > \r\n < xs : schema xmlns=\ '' \ '' xmlns : xs=\ '' http : //www.w3.org/2001/XMLSchema\ '' xmlns : msdata=\ '' urn : schemas-microsoft-com : xml-msdata\ '' > \r\n < xs : element name=\ '' Table1\ '' > \r\n < xs : complexType > \r\n < xs : sequence > \r\n < xs : element name=\ '' Label\ '' type=\ '' xs : string\ '' msdata : targetNamespace=\ '' \ '' minOccurs=\ '' 0\ '' / > \r\n < xs : element name=\ '' Metric\ '' type=\ '' xs : decimal\ '' msdata : targetNamespace=\ '' \ '' minOccurs=\ '' 0\ '' / > \r\n < /xs : sequence > \r\n < /xs : complexType > \r\n < /xs : element > \r\n < xs : element name=\ '' tmpDataSet\ '' msdata : IsDataSet=\ '' true\ '' msdata : MainDataTable=\ '' Table1\ '' msdata : UseCurrentLocale=\ '' true\ '' > \r\n < xs : complexType > \r\n < xs : choice minOccurs=\ '' 0\ '' maxOccurs=\ '' unbounded\ '' / > \r\n < /xs : complexType > \r\n < /xs : element > \r\n < /xs : schema > '' , `` XmlDiffGram '' : `` < diffgr : diffgram xmlns : msdata=\ '' urn : schemas-microsoft-com : xml-msdata\ '' xmlns : diffgr=\ '' urn : schemas-microsoft-com : xml-diffgram-v1\ '' > \r\n < tmpDataSet > \r\n < Table1 diffgr : id=\ '' Table11\ '' msdata : rowOrder=\ '' 0\ '' diffgr : hasChanges=\ '' inserted\ '' > \r\n < Label > A < /Label > \r\n < Metric > 10 < /Metric > \r\n < /Table1 > \r\n < Table1 diffgr : id=\ '' Table12\ '' msdata : rowOrder=\ '' 1\ '' diffgr : hasChanges=\ '' inserted\ '' > \r\n < Label > B < /Label > \r\n < Metric > 20 < /Metric > \r\n < /Table1 > \r\n < /tmpDataSet > \r\n < /diffgr : diffgram > '' }"
public static class Extensions { public static void Bar ( this IA instance ) { //Some code } public static void Bar ( this IB instance ) { //Some code } public static void Bar ( this IC instance ) { //Some code } public static void Bar ( this Foo instance ) { //Some code } }
Convert.ToInt32 ( 1.6 ) //outputs 2 ( Int32 ) 1.6 //outputs 1 ( DateTime ) ( `` 10/29/2013 '' ) //wo n't compile - can not convert type 'string ' to type 'system.date.time'Convert.ToDateTime ( `` 10/29/2013 '' ) //outputs 10/29/2013 12:00:00 AM
"StreamReader sr = new StreamReader ( `` C : /CR EZ Test/Log.txt '' ) ; //use with IFprivate void timer2_Tick ( object sender , EventArgs e ) { if ( ( line = sr.ReadLine ( ) ) ! = null ) { //FileStream fs = File.Open ( `` C : /CR EZ Test/Log.txt '' , FileMode.Open , FileAccess.Read , FileShare.ReadWrite ) ; //StreamReader sr = new StreamReader ( fs ) ; //use with While ca n't use with } else { //while ( ( line = sr.ReadLine ( ) ) ! = null ) // { string [ ] dataLog = line.Split ( new [ ] { ' , ' } , StringSplitOptions.None ) ; mpa = ( dataLog [ 1 ] ) ; ml = ( dataLog [ 2 ] ) ; lph = ( dataLog [ 3 ] ) ; elapsedTime = float.Parse ( dataLog [ 4 ] ) / 1000 ; if ( testStatus > 0 ) time = elapsedTime.ToString ( `` 0.0 '' ) ; tb2.Value = int.Parse ( dataLog [ 6 ] ) ; if ( chart1.Series [ 0 ] .Points.Count > tb1.Value & & tb1.Value > 0 ) { chart1.Series [ 0 ] .Points.RemoveAt ( 0 ) ; chart1.Series [ 1 ] .Points.RemoveAt ( 0 ) ; } chart1.Series [ 0 ] .Points.AddXY ( dataLog [ 5 ] , int.Parse ( dataLog [ 1 ] ) ) ; chart1.Series [ 1 ] .Points.AddXY ( dataLog [ 5 ] , int.Parse ( dataLog [ 6 ] ) ) ; // } } else { sr.DiscardBufferedData ( ) ; sr.BaseStream.Seek ( 0 , SeekOrigin.Begin ) ; sr.BaseStream.Position = 0 ; //sr.Close ( ) ; //alertTB.Text = `` '' ; timer2.Enabled = false ; } alertTB.ForeColor = Color.Red ; alertTB.Text = `` Data Log Viewing In Progress '' ; }"
"Mono : DllImport attempting to load : 'libavformat.57'.Mono : DllImport error loading library '/home/filoe/Desktop/cscore/cscore/Samples/LinuxSample/bin/Debug/libavformat.57 ' : '/home/filoe/Desktop/cscore/cscore/Samples/LinuxSample/bin/Debug/libavformat.57 : can not open shared object file : No such file or directory'.Mono : DllImport error loading library '/home/filoe/Desktop/cscore/cscore/Samples/LinuxSample/bin/Debug/libavformat.57.so ' : 'libavcodec.so.57 : can not open shared object file : No such file or directory'.Mono : DllImport error loading library '/usr/lib/libavformat.57 ' : '/usr/lib/libavformat.57 : can not open shared object file : No such file or directory'.Mono : DllImport error loading library '/usr/lib/libavformat.57.so ' : '/usr/lib/libavformat.57.so : can not open shared object file : No such file or directory'.Mono : DllImport error loading library 'libavformat.57 ' : 'libavformat.57 : can not open shared object file : No such file or directory'.Mono : DllImport error loading library 'libavformat.57.so ' : 'libavformat.57.so : can not open shared object file : No such file or directory'.Mono : DllImport error loading library 'libavformat.57 ' : 'libavformat.57 : can not open shared object file : No such file or directory'.Mono : DllImport unable to load library 'libavformat.57 : can not open shared object file : No such file or directory'.Mono : DllImport attempting to load : 'libavformat.57 ' . filoe @ ubuntu : ~/Desktop/cscore/cscore/Samples/LinuxSample/bin/Debug $ dirCSCore.Ffmpeg.dll CSCore.Ffmpeg.dll.mdb CSCore.Linux.dll.config FFmpeg libavformat.57 libswresample.2 LinuxSample.exe.mdbCSCore.Ffmpeg.dll.config CSCore.Linux.dll CSCore.Linux.dll.mdb libavcodec.57 libavutil.55 LinuxSample.exe log.txtfiloe @ ubuntu : ~/Desktop/cscore/cscore/Samples/LinuxSample/bin/Debug $ [ DllImport ( `` avformat-57 '' , EntryPoint = `` av_register_all '' , CallingConvention = CallingConvention.Cdecl , CharSet = CharSet.Ansi ) ] internal static extern void av_register_all ( ) ; [ DllImport ( `` avcodec-57 '' , EntryPoint = `` avcodec_register_all '' , CallingConvention = CallingConvention.Cdecl , CharSet = CharSet.Ansi ) ] internal static extern void avcodec_register_all ( ) ; < configuration > < dllmap os= '' linux '' dll= '' avcodec-57 '' target= '' libavcodec.57 '' / > < dllmap os= '' linux '' dll= '' avformat-57 '' target= '' libavformat.57 '' / > < /configuration >"
"String [ ] row = parser.ReadFields ( ) ; DispatchCall call = new DispatchCall ( ) ; if ( ! int.TryParse ( row [ 0 ] , out call.AccountID ) ) { Console.WriteLine ( `` Invalid Row : `` + parser.LineNumber ) ; continue ; } call.WorkOrder = row [ 1 ] ; call.Description = row [ 2 ] ; call.Date = row [ 3 ] ; call.RequestedDate = row [ 4 ] ; call.EstStartDate = row [ 5 ] ; call.CustomerID = row [ 6 ] ; call.CustomerName = row [ 7 ] ; call.Caller = row [ 8 ] ; call.EquipmentID = row [ 9 ] ; call.Item = row [ 10 ] ; call.TerritoryDesc = row [ 11 ] ; call.Technician = row [ 12 ] ; call.BillCode = row [ 13 ] ; call.CallType = row [ 14 ] ; call.Priority = row [ 15 ] ; call.Status = row [ 16 ] ; call.Comment = row [ 17 ] ; call.Street = row [ 18 ] ; call.City = row [ 19 ] ; call.State = row [ 20 ] ; call.Zip = row [ 21 ] ; call.EquipRemarks = row [ 22 ] ; call.Contact = row [ 23 ] ; call.ContactPhone = row [ 24 ] ; call.Lat = row [ 25 ] ; call.Lon = row [ 26 ] ; call.FlagColor = row [ 27 ] ; call.TextColor = row [ 28 ] ; call.MarkerName = row [ 29 ] ;"
public double ? By { get ; set ; }
"public IEnumerable < IToken > Tokenize ( string input ) { const char decimalSeparator = ' . ' ; string inputWithoutSpaces = input.Replace ( `` `` , string.Empty ) ; var numberBuffer = new StringBuilder ( ) ; var letterBuffer = new StringBuilder ( ) ; foreach ( char c in inputWithoutSpaces ) { switch ( c ) { case var _ when IsTerm ( c , letterBuffer ) : if ( numberBuffer.Length > 0 ) { yield return EmptyNumberBufferAsLiteral ( numberBuffer ) ; yield return new Operator ( '* ' ) ; } letterBuffer.Append ( c ) ; break ; case decimalSeparator : case var _ when IsDigit ( c ) : numberBuffer.Append ( c ) ; break ; case var _ when IsOperator ( c ) : if ( numberBuffer.Length > 0 ) { yield return EmptyNumberBufferAsLiteral ( numberBuffer ) ; } if ( letterBuffer.Length > 0 ) { yield return EmptyLetterBufferAsTerm ( letterBuffer ) ; } yield return new Operator ( c ) ; break ; } } if ( numberBuffer.Length > 0 ) { yield return EmptyNumberBufferAsLiteral ( numberBuffer ) ; } if ( letterBuffer.Length > 0 ) { yield return EmptyLetterBufferAsTerm ( letterBuffer ) ; } }"
"New : 0 ! =0 -- -- -- -- -- -- -- -Old : 0 | nothing Y , Z ( 1 ) ! =0 | X , Z ( -1 ) X , Y -- Z ( 0 ) is okay but not required for this quadrant if ( oldvalue == 0 & & newvalue == 0 ) return ; if ( oldvalue ! = 0 ) X ( ) ; if ( newvalue ! = 0 ) Y ( ) ; Z ( oldvalue ! = 0 ? -1 : 0 + newvalue ! = 0 ? 1 : 0 ) ; int which = ( oldvalue == 0 ? 0 : 1 ) + ( newvalue == 0 ? 0 : 2 ) switch ( which ) { case 1 : X ( ) ; Z ( -1 ) ; break ; case 2 : Y ( ) ; Z ( 1 ) ; break ; case 3 : X ( ) ; Y ( ) ; break ; } Conditions : oldvalue == 0 ? 0 : 1newvalue == 0 ? 0 : 2Actions : X = { false , true , false , true } Y = { false , false , true , true } Z ( -1 ) = true where condition = 1Z ( 1 ) = true where condition = 2"
"struct Test { private string assayName ; public string AssayName { get ; set ; } private string oldUnitName ; public string OldUnitName { get ; set ; } private string newUnitName ; public string NewUnitName { get ; set ; } public Test ( string name , string oldValue , string newValue ) { assayName = name ; oldUnitName = oldValue ; newUnitName = newValue ; } }"
"public class Show { public string Language { get ; set ; } public string Name { get ; set ; } } g = > g.Language == lang & & g.Name == name string lang = `` en '' ; string name = `` comedy '' ; Genre genre = new Genre { Language = `` en '' , Name = `` comedy '' } ; Expression < Func < Genre , bool > > expression = CreateExpression ( genre , lang , name ) ; // expression = ( g = > g.Language == `` en '' & & g.Name == `` comedy '' )"
Boolean isOnEmulator = ( Microsoft.Devices.Environment.DeviceType == DeviceType.Emulator ) ;
public class MyClass < T > { public string StringValue { get ; set ; } public T Value { get ; set ; } }
"public class SudokuAlgorithmNorvig : ICloneable { public object Clone ( ) { SudokuAlgorithmNorvig sudokuClone = new SudokuAlgorithmNorvig ( this.BlockRows , this.BlockColumns ) ; sudokuClone.IsSucces = this.IsSucces ; if ( this.Grid ! = null ) sudokuClone.Grid = ( Field [ , ] ) this.Grid ; if ( this.Peers ! = null ) sudokuClone.Peers = ( Hashtable ) this.Peers ; if ( this.Units ! = null ) sudokuClone.Units = ( Hashtable ) this.Units ; return sudokuClone ; } SudokuAlgorithmNorvig sudokuCopy = ( SudokuAlgorithmNorvig ) sudoku.Clone ( )"
public object Foo { get { PropertyInfo propertyInfoForFoo = xxx ; ... } }
"switch ( ( RequestReportsCalculatingStoredProcedures.RequestReportStoredProcedureType ) Enum.Parse ( typeof ( RequestReportsCalculatingStoredProcedures.RequestReportStoredProcedureType ) , ihdType.Value ) ) { //REF : This can ( but should it ? ) be refactored through strategy pattern case RequestReportsCalculatingStoredProcedures.RequestReportStoredProcedureType.ReportPlanWithEffects : grvEconomicCriteria.DataSource = RequestReportsCalculatingStoredProcedures.ReportsDataParser ( RequestReportsCalculatingStoredProcedures.ReportPlanWithEffects ( requestNo , RequestReportsCalculatingStoredProcedures.GetAlgorithmNoByRequestNo ( requestNo ) ) ) ; break ; case RequestReportsCalculatingStoredProcedures.RequestReportStoredProcedureType.ReportPlanWithEffectsForFacts : DateTime factDate ; try { factDate = Convert.ToDateTime ( ihdDate.Value ) ; } catch ( FormatException ) { grvEconomicCriteria.DataSource = RequestReportsCalculatingStoredProcedures.ReportsDataParser ( RequestReportsCalculatingStoredProcedures.ReportPlanWithEffectsForFacts ( requestNo , RequestReportsCalculatingStoredProcedures.GetAlgorithmNoByRequestNo ( requestNo ) , DateTime.MinValue ) ) ; break ; } grvEconomicCriteria.DataSource = RequestReportsCalculatingStoredProcedures.ReportsDataParser ( RequestReportsCalculatingStoredProcedures.ReportPlanWithEffectsForFacts ( requestNo , RequestReportsCalculatingStoredProcedures.GetAlgorithmNoByRequestNo ( requestNo ) , factDate ) ) ; break ; default : break ; }"
"public IEnumerable < Person > SelectPersons ( ) { using ( var repository = _repositorySource.GetPersonRepository ( ) ) { return repository.GetAll ( ) ; // returns DataContext.Person as an IQueryable < Person > } } var persons = gateway.SelectPersons ( ) ; // Dispose ( ) is fired herevar personViewModels = ( from b in persons select new PersonViewModel { Id = b.Id , Name = b.Name , Age = b.Age , OrdersCount = b.Order.Count ( ) } ) .ToList ( ) ; // executes queries"
