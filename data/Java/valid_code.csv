"Setup of JMS message listener invoker failed for destination 'queue ' - trying to recover . Cause : Identifier contains invalid JMS identifier character '- ' : ' x-request-id ' [ 36mc.m.s.l.NextGenRequestLoggingFilter [ 0 ; 39m [ 2m : [ 0 ; 39m Before request [ uri=/services/deal-service/api/v2/deals/ack ; headers= [ x-request-id : '' 2d8d86d7-4fbf-9db6-8e95-28813f21a85c '' , x-envoy-internal : '' true '' , x-b3-parentspanid : '' a209cdc649b0b890 '' , content- length : '' 575 '' , x-forwarded-proto : '' http '' , postman-token : '' ad074595- 76a5-474b-9711-7e071b12b3b0 '' , x-b3-sampled : '' 1 '' , x-forwarded- for : '' 10.244.2.1 '' , accept : '' */* '' , authorization : `` some-token-YJc4tg -- 34jPRziJNSACqNQ '' , x-b3- traceid : '' 6b40ff22781be67ba209cdc649b0b890 '' , x-b3- spanid : '' 702684ddb62cfe6b '' , host : '' portal-gateway.52.228.65.225.nip.io '' , cache-control : '' no-cache '' , accept-encoding : '' gzip , deflate , br '' , user-agent : '' PostmanRuntime/7.22.0 '' , Content-Type : '' application/xml ; charset=UTF-8 '' ] ] 2020-02-18T15:19:34.197666458Z [ 2m2020-02-18 15:19:34.197 [ 0 ; 39m . [ 32mDEBUG [ ,6b40ff22781be67ba209cdc649b0b890,702684ddb62cfe6b , true ] [ 0 ; 39m . [ 35m9 [ 0 ; 39m [ 2m -- - [ 0 ; 39m [ 2m [ XNIO-1 task-15 ] [ 0 ; 39m"
"Pattern p = Pattern.compile ( `` ^ [ a-zA-Z_\\ $ ] [ \\w\\ $ ] * ( ? : \\ . [ a-zA-Z_\\ $ ] [ \\w\\ $ ] * ) * $ '' ) ; `` . . `` , `` ПАвыапЫВАПыва '' , `` com.mxtech.ffmpeg.v7_neon '' , ... `` _ПАвыапЫВАПыва\_ ``"
public class Test { private static IAmSoImmutable iAmSoImmutable ; private static final Runnable increment1000Times = ( ) - > { for ( int i = 0 ; i < 1000 ; i++ ) { iAmSoImmutable.increment ( ) ; } } ; public static void main ( String ... args ) throws Exception { for ( int i = 0 ; i < 10 ; i++ ) { iAmSoImmutable = new IAmSoImmutable ( 0 ) ; Thread t1 = new Thread ( increment1000Times ) ; Thread t2 = new Thread ( increment1000Times ) ; t1.start ( ) ; t2.start ( ) ; t1.join ( ) ; t2.join ( ) ; // Prints a different result every time -- why ? : System.out.println ( iAmSoImmutable.value ) ; } } public static class IAmSoImmutable { private int value ; public IAmSoImmutable ( int value ) { this.value = value ; } public IAmSoImmutable increment ( ) { return new IAmSoImmutable ( ++value ) ; } }
"public List < Movie > getMoviesForActor ( String firstName , String lastName ) { final List < Movie > allMovies = movieRepository.getAllMovies ( ) ; final Predicate < Actor > firstNamePredicate = actor - > actor.getFirstName ( ) .equalsIgnoreCase ( firstName ) ; final Predicate < Actor > lastNamePredicate = actor - > actor.getLastName ( ) .equalsIgnoreCase ( lastName ) ; final List < Movie > movies = new ArrayList < > ( ) ; // for ( Movie movie : allMovies ) { // boolean actorFound = false ; // for ( Actor actor : movie.getActors ( ) ) { // if ( firstName.equalsIgnoreCase ( actor.getFirstName ( ) ) & & lastName.equalsIgnoreCase ( actor.getLastName ( ) ) ) { // actorFound = true ; // break ; // } // } // if ( actorFound ) { // movies.add ( movie ) ; // } // } final List < Actor > actors = allMovies.stream ( ) .flatMap ( movie - > movie.getActors ( ) .stream ( ) .filter ( firstNamePredicate.and ( lastNamePredicate ) ) ) .collect ( Collectors.toList ( ) ) ; return movies ; }"
javap java.lang.Object
"import org.junit.Test ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.HashMap ; import java.util.Map ; import static org.junit.Assert.assertArrayEquals ; public class TestStream { /* * Sort numbers in an array without changing even numbers position */ @ Test public void test_1 ( ) { int [ ] nonSorted = new int [ ] { 3 , 4 , 5 , 2 , 1 , 6 , 9 , 8 , 7 , 0 } ; int [ ] expected = new int [ ] { 1 , 4 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 0 } ; Integer [ ] arr = sortArray ( nonSorted ) ; int [ ] sorted = new int [ arr.length ] ; for ( int i = 0 ; i < arr.length ; i++ ) { sorted [ i ] = arr [ i ] ; } assertArrayEquals ( expected , sorted ) ; } private Integer [ ] sortArray ( int [ ] array ) { Map < Integer , Integer > even = extractEven ( array ) ; Integer [ ] withoutEvens = removeEven ( array ) ; int length = even.size ( ) + withoutEvens.length ; Integer [ ] result = new Integer [ length ] ; Arrays.sort ( withoutEvens ) ; for ( int i = 0 ; i < withoutEvens.length ; i++ ) { result [ i ] = withoutEvens [ i ] ; } even.forEach ( ( k , v ) - > { System.arraycopy ( result , k , result , k + 1 , length - k - 1 ) ; result [ k ] = v ; } ) ; return result ; } private Map < Integer , Integer > extractEven ( int [ ] array ) { Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < array.length ; i++ ) { if ( array [ i ] % 2 == 0 ) { map.put ( i , array [ i ] ) ; } } return map ; } private Integer [ ] removeEven ( int [ ] array ) { ArrayList < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < array.length ; i++ ) { if ( array [ i ] % 2 ! = 0 ) { list.add ( array [ i ] ) ; } } Integer [ ] a = new Integer [ list.size ( ) ] ; return list.toArray ( a ) ; } }"
public class MainActivity extends ReactActivity { @ Override protected String getMainComponentName ( ) { return `` x '' ; } @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.O_MR1 ) { setShowWhenLocked ( true ) ; setTurnScreenOn ( true ) ; } getWindow ( ) .addFlags ( WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD ) ; } }
"public class Test { public static void main ( String [ ] args ) { JPanel panel = new JPanel ( ) ; panel.add ( new JLabel ( `` Hello world '' ) ) ; panel.validate ( ) ; JFrame frame1 , frame2 ; frame1 = new JFrame ( `` One '' ) ; frame2 = new JFrame ( `` Two '' ) ; frame1.add ( panel ) ; frame2.add ( panel ) ; frame1.validate ( ) ; frame2.validate ( ) ; frame1.setVisible ( true ) ; frame2.setVisible ( true ) ; frame1.pack ( ) ; frame2.pack ( ) ; } }"
public int hashCode ( ) { int h = hash ; if ( h == 0 & & value.length > 0 ) { char val [ ] = value ; for ( int i = 0 ; i < value.length ; i++ ) { h = 31 * h + val [ i ] ; } hash = h ; } return h ; }
public class ThreadPractice { public static void main ( String args [ ] ) throws InterruptedException { Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { System.out.println ( `` Starting thread ... '' + Thread.currentThread ( ) .getName ( ) ) ; Thread.sleep ( 10000 ) ; System.out.println ( `` Waking up '' ) ; } catch ( InterruptedException e ) { System.out.println ( `` Thread is interrupted ! ! ! `` ) ; Thread.currentThread ( ) .interrupt ( ) ; } } } ) ; t.start ( ) ; Thread.sleep ( 2000 ) ; t.interrupt ( ) ; //System.out.println ( ! t.isInterrupted ( ) ) ; while ( ! t.isInterrupted ( ) ) { System.out.println ( `` Current thread not interrupted ! ! ! `` ) ; } } } Starting thread ... Thread-0Thread is interrupted ! ! !
"@ Overridepublic void onBindViewHolder ( RecyclerViewHolderPreviousPosts holder , int position ) { holder.bind ( previousPostsList.get ( position ) , listener ) ; } void bind ( final PreviousPostsDataModel model , final OnItemClickListener listener ) { ... uploadedImage.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( count == 0 ) { imageid = model.getImageId ( ) ; Toast.makeText ( App.getContext ( ) , `` Image ID : `` + imageid , Toast.LENGTH_SHORT ) .show ( ) ; Toast.makeText ( App.getContext ( ) , `` Position : `` + getAdapterPosition ( ) , Toast.LENGTH_SHORT ) .show ( ) ; getTagInformation ( getLayoutPosition ( ) ) ; } else { Log.e ( `` qwert '' , `` '' + imageid ) ; imageContainer.removeAllViews ( ) ; imageContainer.addView ( uploadedImage ) ; count = 0 ; } } } ) ; ... } private void getTagInformation ( final int position ) { ParseQuery < ParseObject > query = ParseQuery.getQuery ( `` FashionFeed '' ) ; query.findInBackground ( new FindCallback < ParseObject > ( ) { @ Override public void done ( List < ParseObject > objects , ParseException e ) { if ( e == null ) { Toast.makeText ( context , `` '' + position , Toast.LENGTH_SHORT ) .show ( ) ; JSONArray tagNamesArray = objects.get ( position ) .getJSONArray ( `` tagName '' ) ; JSONArray posXArray = objects.get ( position ) .getJSONArray ( `` tagPointX '' ) ; JSONArray posYArray = objects.get ( position ) .getJSONArray ( `` tagPointY '' ) ; for ( int i = 0 ; i < tagNamesArray.length ( ) ; i++ ) { for ( int t = 0 ; t < tagNamesArray.length ( ) ; t++ ) { tagNames.add ( tagNamesArray.optString ( t ) ) ; tagXPositions.add ( posXArray.optString ( t ) ) ; tagYPositions.add ( posYArray.optString ( t ) ) ; } for ( int o = 0 ; o < tagNamesArray.length ( ) ; o++ ) { tag = new TextView ( App.getContext ( ) ) ; tag.setX ( Float.parseFloat ( tagXPositions.get ( o ) ) ) ; tag.setY ( Float.parseFloat ( tagYPositions.get ( o ) ) ) ; tag.setText ( tagNames.get ( o ) ) ; tag.setLayoutParams ( new ViewGroup.LayoutParams ( ViewGroup.LayoutParams.WRAP_CONTENT , ViewGroup.LayoutParams.WRAP_CONTENT ) ) ; tag.setMaxLines ( 1 ) ; tag.setTextSize ( 11 ) ; tag.setClickable ( true ) ; tag.setHintTextColor ( Color.WHITE ) ; tag.setTextColor ( Color.WHITE ) ; tag.setBackgroundResource ( R.drawable.tags_rounded_corners ) ; imageContainer.addView ( tag ) ; count = 1 ; } } } else { Toast.makeText ( context , `` '' + e.getMessage ( ) , Toast.LENGTH_LONG ) .show ( ) ; } } } ) ; } public void getTagInformation ( String imageid ) { ParseQuery query = ParseQuery.getQuery ( `` FashionFeed '' ) ; query.WhereEqualTo ( `` objectId '' , imageId ) ; ... . }"
"Set < String > extensionsToExclude = new HashSet < > ( Arrays.asList ( `` 20 '' , '' 25 '' , '' 60 '' , '' 900 '' ) ) ; List < String > rangesToExclude = new ArrayList < > ( Arrays.asList ( `` 1-10 '' , '' 20-25 '' , '' 50-70 '' , '' 1000-1000000 '' ) ) ; return directoryRecords.stream ( ) .filter ( ( directoryRecord ) - > ! extensionsToExclude.contains ( directoryRecord.getExtensionNumber ( ) ) ) .filter ( ( directoryRecord - > { Boolean include = true ; for ( String s : rangesToExclude ) { String [ ] rangeArray = s.split ( `` - '' ) ; Integer extension = Integer.parseInt ( directoryRecord.getExtensionNumber ( ) ) ; if ( extension < = Integer.parseInt ( rangeArray [ 0 ] ) & & extension > = Integer.parseInt ( rangeArray [ 1 ] ) ) { include = false ; } } return include ; } ) ) .collect ( Collectors.toList ( ) ) ;"
"public final class Foo < T > implements Iterable < T > { // ... public void remove ( T t ) { /* banana banana banana */ } // ... public Iterator < T > Iterator { return new Iterator < T > ( ) { // ... @ Override public void remove ( T t ) { // here , 'this ' references our anonymous class ... // 'remove ' references this method ... // so how can we access Foo 's remove method ? } // ... } ; } }"
public interface Updatable < T > { void updateData ( T t ) ; } public class Office implements Updatable < Office > { @ Override public void updateData ( Office office ) { //To change body of implemented methods use File | Settings | File Templates . } ... ... ... }
10superclass class SuperClass { int a ; public SuperClass ( ) { this.a = 10 ; } private void another_print ( ) { System.out.println ( `` superclass '' ) ; } public void print ( ) { System.out.println ( this.a ) ; this.another_print ( ) ; } } class SubClass extends SuperClass { int a ; public SubClass ( ) { this.a = 20 ; } private void another_print ( ) { System.out.println ( `` subclass '' ) ; } public void print ( ) { super.print ( ) ; } } public class Main { public static void main ( String [ ] args ) { SubClass c = new SubClass ( ) ; c.print ( ) ; } } class SuperClass : def __init__ ( self ) : self.a = 10 def another_prn ( self ) : print ( 'superclass ' ) def prn ( self ) : print ( self.a ) self.another_prn ( ) class SubClass ( SuperClass ) : def __init__ ( self ) : self.a = 20 def another_prn ( self ) : print ( 'subclass ' ) def prn ( self ) : super ( ) .prn ( ) c = SubClass ( ) c.prn ( ) 20subclass
"public class HelloWorld { public static void main ( String [ ] args ) { String myString = `` I have a in my string '' ; System.out.println ( `` String : `` + myString ) ; System.out.println ( `` Bytes : `` + bytesToHex ( myString.getBytes ( ) ) ) ; System.out.println ( `` String Length : `` + myString.length ( ) ) ; System.out.println ( `` Byte Length : `` + myString.getBytes ( ) .length ) ; System.out.println ( `` Substring 9 - 13 : `` + myString.substring ( 9 , 13 ) ) ; System.out.println ( `` Substring Bytes : `` + bytesToHex ( myString.substring ( 9 , 13 ) .getBytes ( ) ) ) ; } // Code from https : //stackoverflow.com/a/9855338/4019986 private final static char [ ] hexArray = `` 0123456789ABCDEF '' .toCharArray ( ) ; public static String bytesToHex ( byte [ ] bytes ) { char [ ] hexChars = new char [ bytes.length * 2 ] ; for ( int j = 0 ; j < bytes.length ; j++ ) { int v = bytes [ j ] & 0xFF ; hexChars [ j * 2 ] = hexArray [ v > > > 4 ] ; hexChars [ j * 2 + 1 ] = hexArray [ v & 0x0F ] ; } return new String ( hexChars ) ; } } String : I have a in my stringBytes : 492068617665206120F09F998220696E206D7920737472696E67String Length : 26Byte Length : 26Substring 9 - 13 : Substring Bytes : F09F9982 String : I have a in my stringBytes : 492068617665206120F09F998220696E206D7920737472696E67String Length : 24Byte Length : 26Substring 9 - 13 : iSubstring Bytes : F09F99822069 String : I have a ? in my stringBytes : 4920686176652061203F20696E206D7920737472696E67String Length : 24Byte Length : 23Substring 9 - 13 : ? iSubstring Bytes : 3F2069 String : I have a in my stringBytes : 492068617665206120F09F998220696E206D7920737472696E67String Length : 24Byte Length : 26Substring 9 - 13 : iSubstring Bytes : F09F99822069 java version `` 1.8.0_211 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_211-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.211-b12 , mixed mode ) openjdk version `` 1.8.0_201 '' OpenJDK Runtime Environment ( build 1.8.0_201-b09 ) OpenJDK 64-Bit Server VM ( build 25.201-b09 , mixed mode ) String : I have a in my stringBytes : 492068617665206120C3B0C5B8E284A2E2809A20696E206D7920737472696E67String Length : 26Byte Length : 32Substring 9 - 13 : Substring Bytes : C3B0C5B8E284A2E2809A String : I have a in my stringBytes : 492068617665206120F09F998220696E206D7920737472696E67String Length : 24Byte Length : 26Substring 9 - 13 : iSubstring Bytes : F09F99822069 String : I have a in my stringBytes : FEFF00490020006800610076006500200061002000F001782122201A00200069006E0020006D007900200073007400720069006E0067String Length : 26Byte Length : 54Substring 9 - 13 : Substring Bytes : FEFF00F001782122201A String : I have a in my stringBytes : FEFF004900200068006100760065002000610020D83DDE4200200069006E0020006D007900200073007400720069006E0067String Length : 24Byte Length : 50Substring 9 - 13 : iSubstring Bytes : FEFFD83DDE4200200069"
"class Numbers { private Long userId ; private Long number1 ; private Long number2 ; } List < Numbers > list = new ArrayList ( ) ; Input == { `` userId '' :1 , `` number1 '' :10 , `` number2 '' :20 } { `` userId '' :1 , `` number1 '' :20 , `` number2 '' :40 } { `` userId '' :1 , `` sum '' :90 // addition of all numbers associated with userId } Map < Long , Long > hashMap =results.stream ( ) .collect ( Collectors.toMap ( Numbers : :userId , Collectors.summingLong ( ? ) ) ; Long addNumbers ( Long number1 , Long number2 ) { return number1+number2 ; }"
Store store = Session.waitForDefaultSession ( ) .getStore ( ) ; Folder folder = store.getFolder ( `` Inbox '' ) ; Message [ ] msgs = folder.getMessages ( ) ; Message msg = msgs [ 0 ] ;
new DecimalFormat ( `` 0. # '' ) .format ( 23.0 ) // result : `` 23 '' new DecimalFormat ( `` . # '' ) .format ( 23.0 ) // result : `` 23.0 ''
"public class itp { String exp , post ; double res ; int l ; stack st ; public itp ( String s ) { exp = s ; post = `` '' ; l = exp.length ( ) ; st = new stack ( l ) ; conv ( ) ; calc ( ) ; System.out.println ( `` The postfix notation of `` +exp+ '' is `` +post ) ; System.out.println ( `` The result of `` +exp+ '' is `` +res ) ; } public void conv ( ) { char ch = ' ' ; char pre = ' ' ; for ( int i =0 ; i < l ; i++ ) { ch = exp.charAt ( i ) ; if ( `` +-*/ '' .indexOf ( ch ) ==-1 ) post = post + ch ; else { pre = st.pop ( ) ; if ( val ( ch ) > =val ( pre ) ) { st.push ( pre ) ; st.push ( ch ) ; } else { while ( ( val ( ch ) < =val ( pre ) ) & & ( pre ! = ' $ ' ) ) { post = post + pre ; pre = st.pop ( ) ; } st.push ( ch ) ; } } } for ( pre = st.pop ( ) ; pre ! = ' $ ' ; pre = st.pop ( ) ) { post = post + pre ; } } public void calc ( ) { res = 0.0 ; } public int val ( char c ) { switch ( c ) { case ' $ ' : return 0 ; case '+ ' : return 1 ; case '- ' : return 2 ; case '* ' : return 3 ; case '/ ' : return 4 ; default : return -1 ; } } } public class itp { String exp , post ; double res ; int l ; stack st ; public itp ( String s ) { exp = s ; post = `` '' ; l = exp.length ( ) ; st = new stack ( l ) ; conv ( ) ; calc ( ) ; System.out.println ( `` The postfix notation of `` +exp+ '' is `` +post ) ; System.out.println ( `` The result of `` +exp+ '' is `` +res ) ; } public void conv ( ) { char ch = ' ' ; char pre = ' ' ; for ( int i =0 ; i < l ; i++ ) { ch = exp.charAt ( i ) ; if ( `` +-*/ '' .indexOf ( ch ) ==-1 ) post = post + ch ; else { pre = st.pop ( ) ; if ( val ( ch ) > =val ( pre ) ) { st.push ( pre ) ; st.push ( ch ) ; } else { while ( ( val ( ch ) < =val ( pre ) ) & & ( pre ! = ' $ ' ) ) { post = post + pre ; pre = st.pop ( ) ; } st.push ( ch ) ; } } } for ( pre = st.pop ( ) ; pre ! = ' $ ' ; pre = st.pop ( ) ) { post = post + pre ; } } public void calc ( ) { res = 0.0 ; } public int val ( char c ) { switch ( c ) { case ' $ ' : return 0 ; case '+ ' : return 1 ; case '- ' : return 2 ; case '* ' : return 3 ; case '/ ' : return 4 ; default : return -1 ; } } } public class stack { char [ ] a ; int top , size ; public stack ( int s ) { size = s ; a = new char [ size ] ; top = -1 ; } public void push ( char el ) { a [ ++top ] = el ; } public char pop ( ) { if ( empty ( ) ) return ' $ ' ; else return a [ top -- ] ; } public boolean empty ( ) { return ( top == -1 ) ; } } import java.util.Scanner ; class client { public static void main ( String args [ ] ) { System.out.println ( `` Enter the expression '' ) ; Scanner in = new Scanner ( System.in ) ; itp i = new itp ( in.next ( ) ) ; } }"
// psuedo code int F [ 100000 ] = { 0 } ; int fibonacci ( int x ) { if ( x < = 1 ) return x ; if ( F [ x ] > 0 ) return F [ x ] ; return F [ x ] = fibonacci ( x-1 ) + fibonacci ( x-2 ) ; } ( defun F ( n ) ( if ( < = n 1 ) n ( + ( F ( - n 1 ) ) ( F ( - n 2 ) ) ) ) ) static int F ( int n ) { if ( n < = 1 ) return n ; else return F ( n-1 ) + F ( n-2 ) ; }
-- -- -1 -- -- - -- -- 333 -- -- -- -55555 -- - -- 7777777 -- -999999999- public static void Problem6 ( ) { System.out.println ( `` Problem 6 : '' ) ; for ( int i = 1 ; i < = 5 ; i++ ) { for ( int j = 5 ; j > = i ; j -- ) { System.out.print ( `` - '' ) ; } for ( int j = 1 ; j < = 9 ; j += 2 ) { System.out.print ( j ) ; } for ( int j = 5 ; j > = i ; j -- ) { System.out.print ( `` - '' ) ; } System.out.println ( ) ; } } -- -- -13579 -- -- - -- -- 13579 -- -- -- -13579 -- - -- 13579 -- -13579-
./gradlew lint ...
"myQuery=select *from dcr_molsWHERE flexmatch ( ctab , :file_data , 'MATCH=ALL ' ) =1 ; ORA-01460 : unimplemented or unreasonable conversion requested01460 . 00000 - `` unimplemented or unreasonable conversion requested '' MapSqlParameterSource parameters = new MapSqlParameterSource ( ) ; parameters.addValue ( `` file_data '' , fileDataStr , Types.CLOB ) ; jdbcNamedParameterTemplate.query ( myQuery , parameters , … SQL state [ 99999 ] ; error code [ 29902 ] ; ORA-29902 : error in executing ODCIIndexStart ( ) routine\nORA-20100 : MDL-0203 : Unable to read from CLOB ( csfrm=1 , csid=873 ) : ORA-22922 : nonexistent LOB value\nMDL-0021 : Unable to copy LOB to string\nMDL-1051 : Molstructure search query is not a valid molecule\nMDL-0976 : Molecule index search initialization failed\nORA-06512 : at \ '' C $ MDLICHEM80.MDL_MXIXMDL\ '' , line 329\nORA-06512 : at \ '' C $ MDLICHEM80.MDL_MXIXMDL\ '' , line 309\n ; nested exception is java.sql.SQLException : ORA-29902 : error in executing ODCIIndexStart ( ) routine\nORA-20100 : MDL-0203 : Unable to read from CLOB ( csfrm=1 , csid=873 ) : ORA-22922 : nonexistent LOB value\nMDL-0021 : Unable to copy LOB to string\nMDL-1051 : Molstructure search query is not a valid molecule\nMDL-0976 : Molecule index search initialization failed\nORA-06512 : at \ '' C $ MDLICHEM80.MDL_MXIXMDL\ '' , line 329\nORA-06512 : at \ '' C $ MDLICHEM80.MDL_MXIXMDL\ '' , line 309\n '' @ Autowired NamedParameterJdbcTemplate jdbcNamedParameterTemplate ; OracleConnection conn = this.jdbcNamedParameterTemplate.getJdbcTemplate ( ) .getDataSource ( ) .getConnection ( ) .unwrap ( OracleConnection.class ) ; Clob myClob = conn.createClob ( ) ; myClob.setString ( 1 , fileDataStr ) ; MapSqlParameterSource parameters = new MapSqlParameterSource ( ) ; parameters.addValue ( `` file_data '' , myClob , Types.CLOB ) ; spring.datasource.url=jdbc : oracle : thin : @ // $ { ORA_HOST } : $ { ORA_PORT } / $ { ORA_SID } spring.datasource.username= $ { ORA_USER } spring.datasource.password= $ { ORA_PASS } OracleDataSource ods = new OracleDataSource ( ) ; String url = '' jdbc : oracle : thin : @ // '' + ORA_HOST + '' : '' +ORA_PORT + '' / '' +ORA_SID ; ods.setURL ( url ) ; ods.setUser ( user ) ; ods.setPassword ( passwd ) ; Connection conn = ods.getConnection ( ) ; Clob myClob=conn.createClob ( ) ; PreparedStatement ps = conn.prepareStatement ( `` select dcr_number from dcr_mols WHERE flexmatch ( ctab , ? , 'MATCH=ALL ' ) =1 '' ) ; myClob.setString ( 1 , myMol ) ; ps.setClob ( 1 , myClob ) ; ResultSet rs =ps.executeQuery ( ) ;"
Integer one = 10 ; Integer two = one ; one = 20 ; System.out.println ( one ) ; System.out.println ( two ) ; class OwnInteger { private int integer ; public OwnInteger ( int integer ) { this.integer = integer ; } public int getInteger ( ) { return integer ; } public void setInteger ( int integer ) { this.integer = integer ; } } OwnInteger one = new OwnInteger ( 10 ) ; OwnInteger two = one ; one.setInteger ( 20 ) ; System.out.println ( one.getInteger ( ) ) ; System.out.println ( two.getInteger ( ) ) ;
private volatile FieldType field ; FieldType getField ( ) { FieldType result = field ; if ( result == null ) { // First check ( no locking ) synchronized ( this ) { result = field ; if ( result == null ) // Second check ( with locking ) field = result = computeFieldValue ( ) ; } } return result ; } private FieldType field ; // non volatileprivate volatile boolean fence = false ; FieldType getField ( ) { if ( field == null ) { // First check ( no locking ) // no volatile read synchronized ( this ) { // inside synch block no problem of visibilty will latest //value of field if ( field == null ) { // Second check ( with locking ) Object obj = computeFieldValue ( ) ; fence = true ; // any volatile write will take . this will make sure statements are //not reorder with setting field as non null . field = ( FieldType ) obj ; // this will be only set after computeFieldValue has been //completed fully } } } return field ; }
< ant antfile= '' $ { build-file-A } '' inheritall= '' false '' target= '' all '' / >
"public interface SortingAlgorithm { public void sort ( int [ ] a ) ; } public class SelectionSort implements SortingAlgorithm { @ Override public void sort ( int [ ] a ) { for ( int i = 0 ; i < a.length ; i++ ) { int lowerElementIndex = i ; for ( int j = i + 1 ; j < a.length ; j++ ) { if ( a [ j ] < a [ lowerElementIndex ] ) { lowerElementIndex = j ; } } swap ( a , lowerElementIndex , i ) ; } } private void swap ( int [ ] a , int i , int j ) { if ( i == j ) { return ; } int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } inline void swap ( int* a , int i , int j ) ; void s_sort ( int* a , int size ) { int i ; for ( i = 0 ; i < size ; i++ ) { int lowerElementIndex = i , j ; for ( j = i + 1 ; j < size ; j++ ) { if ( a [ j ] < a [ lowerElementIndex ] ) { lowerElementIndex = j ; } } swap ( a , lowerElementIndex , i ) ; } } inline void swap ( int* a , int i , int j ) { if ( i == j ) { return ; } int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } public class Test { public static void main ( String [ ] args ) { int [ ] a = new int [ 100000 ] ; int [ ] a2 = new int [ 100000 ] ; for ( int i = 0 ; i < a.length ; i++ ) { a [ i ] = ( int ) ( Math.random ( ) *100000 ) ; a2 [ i ] = a [ i ] ; } SelectionSort s = new SelectionSort ( ) ; InsertionSort s1 = new InsertionSort ( ) ; double start = System.nanoTime ( ) ; s.sort ( a ) ; double end = System.nanoTime ( ) ; double time = ( end-start ) /1000000000.0 ; System.out.println ( `` Selection : `` +time ) ; start = System.nanoTime ( ) ; s1.sort ( a2 ) ; end = System.nanoTime ( ) ; time = ( end-start ) /1000000000.0 ; System.out.println ( `` Insertion : `` +time ) ; } } # include `` insertion_sort.h '' # include `` selection_sort.h '' # include < time.h > # include < stdlib.h > # include < stdio.h > # include < string.h > int main ( ) { int max = 100000 , i ; srand ( time ( NULL ) ) ; int array [ 100000 ] , array2 [ 100000 ] ; for ( i=0 ; i < 100000 ; i+=1 ) { array [ i ] = rand ( ) % 100000 ; } memcpy ( array2 , & array [ 0 ] , 100000 * sizeof ( int ) ) ; clock_t inizio = clock ( ) ; s_sort ( array , max ) ; clock_t fine = clock ( ) ; float tempoEsecuzione = ( float ) ( fine - inizio ) / CLOCKS_PER_SEC ; printf ( `` Selection : % 2.3f\n '' , tempoEsecuzione ) ; inizio = clock ( ) ; i_sort ( array2 , max ) ; fine = clock ( ) ; tempoEsecuzione = ( float ) ( fine - inizio ) / CLOCKS_PER_SEC ; printf ( `` Insertion : % 2.3f\n '' , tempoEsecuzione ) ; return 0 ; }"
"public class Main { public static void main ( String [ ] args ) throws Exception { OkHttpClient okHttpClient = new OkHttpClient ( ) ; final int numCores = Runtime.getRuntime ( ) .availableProcessors ( ) ; final ExecutorService taskScheduler = Executors.newFixedThreadPool ( numCores + 1 ) ; final ScheduledExecutorService timerScheduler = Executors.newScheduledThreadPool ( numCores + 1 ) ; final Engine engine = new EngineBuilder ( ) .setTaskExecutor ( taskScheduler ) .setTimerScheduler ( timerScheduler ) .build ( ) ; Task < Integer > task = Task.async ( ( ) - > { SettablePromise < String > promise = Promises.settable ( ) ; Request request = new Request.Builder ( ) .url ( `` http : //google.com '' ) .build ( ) ; okHttpClient.newCall ( request ) .enqueue ( new Callback ( ) { @ Override public void onFailure ( Call call , IOException e ) { System.out.println ( `` error '' ) ; } @ Override public void onResponse ( Call call , Response response ) throws IOException { promise.done ( response.body ( ) .string ( ) ) ; } } ) ; return promise ; } ) .map ( `` map content to length '' , content - > content.length ( ) ) .andThen ( System.out : :println ) ; engine.blockingRun ( task ) ; engine.blockingRun ( task ) ; } }"
[ 01:07 ] bbbbbbb [ 00:48 ] aaaaaa [ 01:36 ] ccccccccc [ 03:45 ] gggggggg [ 03:31 ] fffffff [ 01:54 ] ddddddddd [ 02:09 ] eeeeeee [ 03:59 ] hhhhhhhh [ 00:48 ] aaaaaa [ 01:07 ] bbbbbbb [ 01:36 ] ccccccccc [ 01:54 ] ddddddddd [ 02:09 ] eeeeeee [ 03:31 ] fffffff [ 03:45 ] gggggggg [ 03:59 ] hhhhhhhh
"@ Beanpublic MonetaryModule monetaryModule ( ) { return new MonetaryModule ( ) ; } private void configureModules ( Jackson2ObjectMapperBuilder builder ) { Collection < Module > moduleBeans = getBeans ( this.applicationContext , Module.class ) ; builder.modulesToInstall ( moduleBeans.toArray ( new Module [ 0 ] ) ) ; } ============================CONDITIONS EVALUATION REPORT============================Positive matches : -- -- -- -- -- -- -- -- - AopAutoConfiguration matched : - @ ConditionalOnProperty ( spring.aop.auto=true ) matched ( OnPropertyCondition ) AopAutoConfiguration.AspectJAutoProxyingConfiguration matched : - @ ConditionalOnClass found required class 'org.aspectj.weaver.Advice ' ( OnClassCondition ) AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration matched : - @ ConditionalOnProperty ( spring.aop.proxy-target-class=true ) matched ( OnPropertyCondition ) ConfigServiceBootstrapConfiguration # configServicePropertySource matched : - @ ConditionalOnProperty ( spring.cloud.config.enabled ) matched ( OnPropertyCondition ) - @ ConditionalOnMissingBean ( types : org.springframework.cloud.config.client.ConfigServicePropertySourceLocator ; SearchStrategy : all ) did not find any beans ( OnBeanCondition ) ConfigServiceBootstrapConfiguration.RetryConfiguration matched : - @ ConditionalOnClass found required classes 'org.springframework.retry.annotation.Retryable ' , 'org.aspectj.lang.annotation.Aspect ' , 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration ' ( OnClassCondition ) - @ ConditionalOnProperty ( spring.cloud.config.fail-fast ) matched ( OnPropertyCondition ) ConfigServiceBootstrapConfiguration.RetryConfiguration # configServerRetryInterceptor matched : - @ ConditionalOnMissingBean ( names : configServerRetryInterceptor ; SearchStrategy : all ) did not find any beans ( OnBeanCondition ) ConfigurationPropertiesRebinderAutoConfiguration matched : - @ ConditionalOnBean ( types : org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor ; SearchStrategy : all ) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor ' ( OnBeanCondition ) ConfigurationPropertiesRebinderAutoConfiguration # configurationPropertiesBeans matched : - @ ConditionalOnMissingBean ( types : org.springframework.cloud.context.properties.ConfigurationPropertiesBeans ; SearchStrategy : current ) did not find any beans ( OnBeanCondition ) ConfigurationPropertiesRebinderAutoConfiguration # configurationPropertiesRebinder matched : - @ ConditionalOnMissingBean ( types : org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder ; SearchStrategy : current ) did not find any beans ( OnBeanCondition ) EncryptionBootstrapConfiguration matched : - @ ConditionalOnClass found required class 'org.springframework.security.crypto.encrypt.TextEncryptor ' ( OnClassCondition ) PropertyPlaceholderAutoConfiguration # propertySourcesPlaceholderConfigurer matched : - @ ConditionalOnMissingBean ( types : org.springframework.context.support.PropertySourcesPlaceholderConfigurer ; SearchStrategy : current ) did not find any beans ( OnBeanCondition ) Negative matches : -- -- -- -- -- -- -- -- - AopAutoConfiguration.AspectJAutoProxyingConfiguration.JdkDynamicAutoProxyConfiguration : Did not match : - @ ConditionalOnProperty ( spring.aop.proxy-target-class=false ) did not find property 'proxy-target-class ' ( OnPropertyCondition ) AopAutoConfiguration.ClassProxyingConfiguration : Did not match : - @ ConditionalOnMissingClass found unwanted class 'org.aspectj.weaver.Advice ' ( OnClassCondition ) DiscoveryClientConfigServiceBootstrapConfiguration : Did not match : - @ ConditionalOnProperty ( spring.cloud.config.discovery.enabled ) did not find property 'spring.cloud.config.discovery.enabled ' ( OnPropertyCondition ) EncryptionBootstrapConfiguration.RsaEncryptionConfiguration : Did not match : - Keystore nor key found in Environment ( EncryptionBootstrapConfiguration.KeyCondition ) Matched : - @ ConditionalOnClass found required class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor ' ( OnClassCondition ) EncryptionBootstrapConfiguration.VanillaEncryptionConfiguration : Did not match : - @ ConditionalOnMissingClass found unwanted class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor ' ( OnClassCondition ) Exclusions : -- -- -- -- -- - NoneUnconditional classes : -- -- -- -- -- -- -- -- -- -- -- None"
public class OuterClass { public void doSomething ( ) { JButton button = new JButton ( ) ; button.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { } } ) ; } }
"List < WidgetItem > selectedItems = null ; Map < Integer , List < WidgetItem > > itemsByStockAvailable = WidgetItems.stream ( ) .collect ( Collectors.groupingBy ( WidgetItem : :getAvailableStock ) ) ; selectedItems = itemsByStockAvailable.get ( itemsByStockAvailable.keySet ( ) .stream ( ) .sorted ( ) .findFirst ( ) .get ( ) ) ;"
"public byte [ ] modMultiply ( byte [ ] x , short xOffset , short xLength , byte [ ] y , short yOffset , short yLength , short tempOutoffset ) { //copy x value to temporary rambuffer Util.arrayCopy ( x , xOffset , tempBuffer , tempOutoffset , xLength ) ; // copy the y value to match th size of rsa_object Util.arrayFillNonAtomic ( eempromTempBuffer , ( short ) 0 , ( byte ) ( Configuration.LENGTH_RSAOBJECT_MODULUS-1 ) , ( byte ) 0x00 ) ; Util.arrayCopy ( y , yOffset , eempromTempBuffer , ( short ) ( Configuration.LENGTH_RSAOBJECT_MODULUS - yLength ) , yLength ) ; // x+y if ( JBigInteger.add ( x , xOffset , xLength , eempromTempBuffer , ( short ) 0 , Configuration.LENGTH_MODULUS ) ) ; if ( this.isGreater ( x , xOffset , xLength , tempBuffer , Configuration.TEMP_OFFSET_MODULUS , Configuration.LENGTH_MODULUS ) > 0 ) { JBigInteger.subtract ( x , xOffset , xLength , tempBuffer , Configuration.TEMP_OFFSET_MODULUS , Configuration.LENGTH_MODULUS ) ; } // ( x+y ) 2 mRsaCipherForSquaring.init ( mRsaPublicKekForSquare , Cipher.MODE_ENCRYPT ) ; mRsaCipherForSquaring.doFinal ( x , xOffset , Configuration.LENGTH_RSAOBJECT_MODULUS , x , xOffset ) ; // OK mRsaCipherForSquaring.doFinal ( tempBuffer , tempOutoffset , Configuration.LENGTH_RSAOBJECT_MODULUS , tempBuffer , tempOutoffset ) ; // OK if ( JBigInteger.subtract ( x , xOffset , Configuration.LENGTH_MODULUS , tempBuffer , tempOutoffset , Configuration.LENGTH_MODULUS ) ) { JBigInteger.add ( x , xOffset , Configuration.LENGTH_MODULUS , tempBuffer , Configuration.TEMP_OFFSET_MODULUS , Configuration.LENGTH_MODULUS ) ; } mRsaCipherForSquaring.doFinal ( eempromTempBuffer , yOffset , Configuration.LENGTH_RSAOBJECT_MODULUS , eempromTempBuffer , yOffset ) ; //OK if ( JBigInteger.subtract ( x , xOffset , Configuration.LENGTH_MODULUS , eempromTempBuffer , yOffset , Configuration.LENGTH_MODULUS ) ) { JBigInteger.add ( x , xOffset , Configuration.LENGTH_MODULUS , tempBuffer , Configuration.TEMP_OFFSET_MODULUS , Configuration.LENGTH_MODULUS ) ; } // ( ( x+y ) ^2 - x^2 -y^2 ) /2 JBigInteger.modular_division_by_2 ( x , xOffset , Configuration . LENGTH_MODULUS , tempBuffer , Configuration.TEMP_OFFSET_MODULUS , Configuration.LENGTH_MODULUS ) ; return x ; } public static boolean add ( byte [ ] x , short xOffset , short xLength , byte [ ] y , short yOffset , short yLength ) { short digit_mask = 0xff ; short digit_len = 0x08 ; short result = 0 ; short i = ( short ) ( xLength + xOffset - 1 ) ; short j = ( short ) ( yLength + yOffset - 1 ) ; for ( ; i > = xOffset ; i -- , j -- ) { result = ( short ) ( result + ( short ) ( x [ i ] & digit_mask ) + ( short ) ( y [ j ] & digit_mask ) ) ; x [ i ] = ( byte ) ( result & digit_mask ) ; result = ( short ) ( ( result > > digit_len ) & digit_mask ) ; } while ( result > 0 & & i > = xOffset ) { result = ( short ) ( result + ( short ) ( x [ i ] & digit_mask ) ) ; x [ i ] = ( byte ) ( result & digit_mask ) ; result = ( short ) ( ( result > > digit_len ) & digit_mask ) ; i -- ; } return result ! = 0 ; } public static boolean subtract ( byte [ ] x , short xOffset , short xLength , byte [ ] y , short yOffset , short yLength ) { short digit_mask = 0xff ; short i = ( short ) ( xLength + xOffset - 1 ) ; short j = ( short ) ( yLength + yOffset - 1 ) ; short carry = 0 ; short subtraction_result = 0 ; for ( ; i > = xOffset & & j > = yOffset ; i -- , j -- ) { subtraction_result = ( short ) ( ( x [ i ] & digit_mask ) - ( y [ j ] & digit_mask ) - carry ) ; x [ i ] = ( byte ) ( subtraction_result & digit_mask ) ; carry = ( short ) ( subtraction_result < 0 ? 1 : 0 ) ; } for ( ; i > = xOffset & & carry > 0 ; i -- ) { if ( x [ i ] ! = 0 ) carry = 0 ; x [ i ] -= 1 ; } return carry > 0 ; } public short isGreater ( byte [ ] x , short xOffset , short xLength , byte [ ] y , short yOffset , short yLength ) { if ( xLength > yLength ) return ( short ) 1 ; if ( xLength < yLength ) return ( short ) ( -1 ) ; short digit_mask = 0xff ; short digit_len = 0x08 ; short result = 0 ; short i = ( short ) ( xLength + xOffset - 1 ) ; short j = ( short ) ( yLength + yOffset - 1 ) ; for ( ; i > = xOffset ; i -- , j -- ) { result = ( short ) ( result + ( short ) ( x [ i ] & digit_mask ) - ( short ) ( y [ j ] & digit_mask ) ) ; if ( result > 0 ) return ( short ) 1 ; if ( result < 0 ) return ( short ) -1 ; } return 0 ; }"
"import java.time.LocalDate ; import java.time.Month ; import java.time.Period ; import java.time.temporal.ChronoUnit ; public class Main { public static void main ( String [ ] args ) { // Long Period LocalDate birthA = LocalDate.of ( 1965 , Month.SEPTEMBER , 27 ) ; LocalDate eventA = LocalDate.of ( 1992 , Month.MAY , 9 ) ; LocalDate halfA = eventA.plus ( Period.between ( birthA , eventA ) ) ; System.out.println ( halfA ) ; // 2018-12-21 ? ? ? ? System.out.println ( ChronoUnit.DAYS.between ( birthA , eventA ) ) ; // 9721 System.out.println ( ChronoUnit.DAYS.between ( eventA , halfA ) ) ; // 9722 ? ? ? ? // Short Period LocalDate birthB = LocalDate.of ( 2012 , Month.SEPTEMBER , 10 ) ; LocalDate eventB = LocalDate.of ( 2012 , Month.SEPTEMBER , 12 ) ; LocalDate halfB = eventB.plus ( Period.between ( birthB , eventB ) ) ; System.out.println ( halfB ) ; // 2018-09-14 System.out.println ( ChronoUnit.DAYS.between ( birthB , eventB ) ) ; // 2 System.out.println ( ChronoUnit.DAYS.between ( eventB , halfB ) ) ; // 2 } }"
"// Code written in a function which is called within a loop , while parsing xml file.if ( name.equals ( `` dim1 '' ) ) { line.setDim1Code ( Integer.parseInt ( value ) ) ; } else if ( name.equals ( `` dim2 '' ) ) { line.setDim2Code ( Integer.parseInt ( value ) ) ; } else if ( name.equals ( `` debitcredit '' ) ) { line.setDebitOrCredit ( value ) ; } else if ( name.equals ( `` basevalue '' ) ) { line.setBasevalue ( Integer.parseInt ( value ) ) ; } else if ( name.equals ( `` rate '' ) ) { line.setRate ( Integer.parseInt ( value ) ) ; } else if ( name.equals ( `` value '' ) ) { line.setValue ( Integer.parseInt ( value ) ) ; } else if ( name.equals ( `` description '' ) ) { line.setDescription ( value ) ; } else if ( name.equals ( `` vatbasetotal '' ) ) { line.setVatBaseTotal ( value ) ; } else if ( name.equals ( `` vattotal '' ) ) { line.setVatTotal ( value ) ; }"
"private List < List < Integer > > dataInput ; public SearchItem ( final List < List < Integer > > inputs ) { dataInput = new ArrayList < List < Integer > > ( ) ; for ( List < Integer > input : inputs ) { dataInput.add ( new ArrayList < Integer > ( input ) ) ; } } public List < Integer > getItem ( final Integer x ) { List < Integer > outputs = new ArrayList < Integer > ( ) ; for ( List < Integer > data : dataInput ) { int i = Collections.binarySearch ( data , x ) ; // binary searching the item if ( i < 0 ) i = - ( i + 1 ) ; outputs.add ( i == data.size ( ) ? null : data.get ( i ) ) ; } return outputs ; } public static void main ( String [ ] args ) { List < List < Integer > > lists = new ArrayList < List < Integer > > ( ) ; List < Integer > list1 = new ArrayList < Integer > ( Arrays.asList ( 3 , 4 , 6 ) ) ; List < Integer > list2 = new ArrayList < Integer > ( Arrays.asList ( 1 , 2 , 3 ) ) ; List < Integer > list3 = new ArrayList < Integer > ( Arrays.asList ( 2 , 3 , 6 ) ) ; List < Integer > list4 = new ArrayList < Integer > ( Arrays.asList ( 1 , 2 , 3 ) ) ; List < Integer > list5 = new ArrayList < Integer > ( Arrays.asList ( 4 , 8 , 13 ) ) ; lists.add ( list1 ) ; lists.add ( list2 ) ; lists.add ( list3 ) ; lists.add ( list4 ) ; lists.add ( list5 ) ; SearchItem search = new SearchItem ( lists ) ; System.out.println ( dataInput ) ; List < Integer > dataOuput = search.getItem ( 5 ) ; System.out.println ( dataOuput ) ; }"
"short readShort ( long offset ) throws IOException , InterruptedException { return read ( offset , Short.BYTES ) .getShort ( ) ; } ByteBuffer read ( long offset , long byteCount ) throws IOException , InterruptedException { ByteBuffer buffer = ByteBuffer.allocate ( Math.toIntExact ( byteCount ) ) ; buffer.order ( GenericTiffFileReader.this.byteOrder ) ; GenericTiffFileReader.this.readInto ( buffer , offset ) ; return buffer ; } private void readInto ( ByteBuffer buffer , long startOffset ) throws IOException , InterruptedException { long offset = startOffset ; while ( buffer.hasRemaining ( ) ) { int bytesRead = this.channel.read ( buffer , offset ) ; switch ( bytesRead ) { case 0 : Thread.sleep ( 10 ) ; break ; case -1 : throw new EOFException ( `` unexpected end of file '' ) ; default : offset += bytesRead ; } } buffer.flip ( ) ; }"
"for ( int t = 0 ; t < = randomForTrees.nextInt ( maxTreesPerChunk ) ; t++ ) { // generates random locations for the X , Z positions\\ // the Y position is the height on the terrain gain with the X , Z coordinates \\ float TreeX = random.nextInt ( ( int ) ( Settings.TERRAIN_VERTEX_COUNT + Settings.TERRAIN_SIZE ) ) + terrain.getX ( ) ; float TreeZ = random.nextInt ( ( int ) ( Settings.TERRAIN_VERTEX_COUNT + Settings.TERRAIN_SIZE ) ) + terrain.getZ ( ) ; float TreeY = terrain.getTerrainHeightAtSpot ( TreeX , TreeZ ) ; // creates a tree entity with the previous generated positions \\ Entity tree = new Entity ( TreeStaticModel , new Vector3f ( TreeX , TreeY , TreeZ ) , 0 , random.nextInt ( 360 ) , 0 , 1 ) ; // checks if the tree is on land \\ if ( ! ( tree.getPosition ( ) .y < = -17 ) ) { trees.add ( tree ) ; } }"
% { file = new File ( `` footer.html '' ) ; path = file.getCanonicalPath ( ) ; lm = file.lastModified ( ) ; // date = new Date ( lm ) ; } % < span > Last update : $ { lm } < /span >
"public class Message implements MessageBase { private String id ; private String message ; private String author ; private Long timestamp ; public Message ( ) { this.id=null ; this.message=null ; this.author=null ; this.timestamp= null ; } public Message ( String id , String message , String author , Long timestamp ) { this.id=id ; this.message=message ; this.author=author ; this.timestamp= timestamp ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public String getMessage ( ) { return message ; } public void setMessage ( String message ) { this.message = message ; } public String getAuthor ( ) { return author ; } public void setAuthor ( String author ) { this.author = author ; } public long getTimestamp ( ) { return timestamp ; } public void setTimestamp ( long timestamp ) { this.timestamp = timestamp ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Message ) ) return false ; Message message1 = ( Message ) o ; if ( getTimestamp ( ) ! = message1.getTimestamp ( ) ) return false ; if ( ! getId ( ) .equals ( message1.getId ( ) ) ) return false ; if ( ! getMessage ( ) .equals ( message1.getMessage ( ) ) ) return false ; return getAuthor ( ) .equals ( message1.getAuthor ( ) ) ; } @ Override public int hashCode ( ) { int result = getId ( ) .hashCode ( ) ; result = 31 * result + getMessage ( ) .hashCode ( ) ; result = 31 * result + getAuthor ( ) .hashCode ( ) ; result = 31 * result + ( int ) ( getTimestamp ( ) ^ ( getTimestamp ( ) > > > 32 ) ) ; return result ; } @ Override public String toString ( ) { return `` id= '' + id + `` , message= ' '' + message + '\ '' + `` , author= ' '' + author + '\ '' + `` , timestamp= '' + timestamp ; } messages.entrySet ( ) .stream ( ) .filter ( o- > o.getValue ( ) .getAuthor ( ) .equalsIgnoreCase ( author ) ) .findAny ( ) ;"
public class Puzzle3 { public static void main ( String [ ] args ) { TestEquals testEquals = new TestEquals ( ) ; System.out.println ( testEquals.equals ( testEquals ) ) ; } }
public class Main { static int count = 0 ; Long x ; static Dog d = new Dog ( 5 ) ; public static void main ( String [ ] args ) throws Exception { System.out.println ( xDog ( d ) .getId ( ) ) ; } public static Dog xDog ( Dog d ) { try { return d ; } catch ( Exception e ) { } finally { d = new Dog ( 10 ) ; } return d ; } } public class Dog { private int id ; public Dog ( int id ) { this.id = id ; } public int getId ( ) { return id ; } }
"import com.sun.java.swing.plaf.windows.WindowsLookAndFeel ; import javax.swing . * ; import java.awt . * ; public class Main { public static void main ( String [ ] args ) { SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { try { UIManager.setLookAndFeel ( new WindowsLookAndFeel ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } JPanel contentPane = new JPanel ( ) ; contentPane.setBackground ( Color.WHITE ) ; JComboBox < String > comboBox = new JComboBox < String > ( new String [ ] { `` One '' , `` Two '' } ) ; contentPane.add ( comboBox ) ; JFrame frame = new JFrame ( `` JComboBox Test '' ) ; frame.setDefaultCloseOperation ( WindowConstants.EXIT_ON_CLOSE ) ; frame.setContentPane ( contentPane ) ; frame.pack ( ) ; frame.setLocationRelativeTo ( null ) ; frame.setVisible ( true ) ; } } ) ; } }"
java.io.Filejava.util.ArrayListjavax.swing.Action
"import java.util.ArrayList ; public class ShipmentTracingDTO { boolean destination = false ; public ShipmentTracingDTO ( Boolean destination ) { this.destination = destination ; } public ShipmentTracingDTO ( ) { } public static void main ( String [ ] args ) { ArrayList < ShipmentTracingDTO > tracings = new ArrayList < > ( ) ; tracings.add ( new ShipmentTracingDTO ( true ) ) ; tracings.add ( new ShipmentTracingDTO ( true ) ) ; tracings.add ( new ShipmentTracingDTO ( false ) ) ; tracings.add ( new ShipmentTracingDTO ( false ) ) ; ArrayList < ShipmentTracingDTO > newTracings = new ArrayList < > ( ) ; // Error coming for ArrayList : :new : The constructed object of type ArrayList is //incompatible with the descriptor 's return type : R tracings.stream ( ) .collect ( ArrayList : :new , ( left , right ) - > left.add ( right ) , ( left , right ) - > { left.addAll ( right ) ; return left ; } ) ; } private boolean getDestination ( ) { return destination ; }"
public class Main { public static void main ( String [ ] ar ) { A m = new A ( ) ; System.out.println ( m.getNull ( ) .getValue ( ) ) ; } } class A { A getNull ( ) { return null ; } static int getValue ( ) { return 1 ; } }
"< cffunction name= '' onApplicationEnd '' returnType= '' void '' > < cfargument name= '' appScope '' required= '' true '' / > < cfset var logLocation = `` test '' / > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - **** START RUN **** '' / > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) called `` / > < cftry > < cfif structKeyExists ( ARGUMENTS , `` appScope '' ) > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - ARGUMENTS.appScope is defined '' / > < cfelse > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - ARGUMENTS.appScope is undefined ! `` / > < /cfif > < ! -- - Check if we have a test crypto object in scope , and if so close it 's connection -- - > < cfif structKeyExists ( ARGUMENTS.appScope , `` testCrypto '' ) > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) - crypto object exists in app scope '' / > < cfset ARGUMENTS.appScope.testCrypto.closeConnection ( ) / > < < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) - closed crypto server connection '' / > < cfelse > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) - NO crypto server connection present to close '' / > < /cfif > < cfcatch type= '' any '' > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) - Error - # cfcatch.message # '' / > < /cfcatch > < /cftry > < cflog file= '' # logLocation # '' text= '' *** [ Application.cfc ] - # timeformat ( now ( ) , 'HH : mm : ss ' ) # - onApplicationEnd ( ) ended `` / > < /cffunction > `` Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:54 '' , , '' *** [ Application.cfc ] - **** START RUN `` Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:54 '' , , '' *** [ Application.cfc ] - 09:05:54 - onApplicationEnd ( ) called `` '' Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:54 '' , , '' *** [ Application.cfc ] - 09:05:54 - ARGUMENTS.appScope is defined '' '' Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:54 '' , , '' *** [ Application.cfc ] - 09:05:54 - onApplicationEnd ( ) - crypto object exists in app scope '' '' Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:54 '' , , '' *** [ Application.cfc ] - 09:05:54 - onApplicationEnd ( ) - Error - Shutdown in progress '' '' Information '' , '' Thread-8 '' , '' 10/23/09 '' , '' 09:05:55 '' , , '' *** [ Application.cfc ] - 09:05:55 - onApplicationEnd ( ) ended ``"
"int main ( int argc , const char* argv [ ] ) public static void main ( String [ ] args )"
"import java.util.Scanner ; class practisenumwords { public static void main ( String [ ] args ) { Scanner in=new Scanner ( System.in ) ; int r=in.nextInt ( ) ; int c=in.nextInt ( ) ; maze maz=new maze ( r , c ) ; /*input in string copied to array*/ char [ ] ch ; ch = `` 00000000111111101111011001101 @ # 11100 '' .toCharArray ( ) ; int l=0 ; for ( int i=0 ; i < r ; i++ ) { for ( int j=0 ; j < c ; j++ ) /*initialising the maze elements*/ { maz.m [ i ] [ j ] =new cells ( ) ; maz.m [ i ] [ j ] .c=ch [ l ] ; maz.m [ i ] [ j ] .row=i ; maz.m [ i ] [ j ] .col=j ; l++ ; } } for ( int i=0 ; i < r ; i++ ) /*print the input maze */ { for ( int j=0 ; j < c ; j++ ) { System.out.print ( `` '' +maz.m [ i ] [ j ] .c ) ; } System.out.println ( ) ; } maz.escape ( ) ; maz.find ( maz.startx , maz.starty , maz.hops ) ; } } class cells { char c ; int row ; int col ; boolean done=false ; /*initially all cells are unvisited*/ } class maze { maze ( int a , int b ) { rows=a ; cols=b ; m=new cells [ rows ] [ cols ] ; } int rows ; int cols ; cells [ ] [ ] m ; int startx , starty ; int hops=0 ; void escape ( ) { for ( int i=0 ; i < rows ; i++ ) { for ( int j=0 ; j < cols ; j++ ) { if ( m [ i ] [ j ] .c== ' # ' ) { startx=i ; starty=j ; System.out.println ( startx+ '' `` +starty ) ; } } } } void find ( int x , int y , int h ) { if ( ( x+1 < rows & & m [ x+1 ] [ y ] .c== ' @ ' & & m [ x+1 ] [ y ] .done ! =true ) || ( x-1 > =0 & & m [ x-1 ] [ y ] .c== ' @ ' & & m [ x-1 ] [ y ] .done ! =true ) || ( y+1 < cols & & m [ x ] [ y+1 ] .c== ' @ ' & & m [ x ] [ y+1 ] .done ! =true ) || ( y-1 > =0 & & m [ x ] [ y-1 ] .c== ' @ ' & & m [ x ] [ y-1 ] .done ! =true ) ) { h++ ; System.out.println ( h ) ; } else { if ( x-1 > =0 & & m [ x-1 ] [ y ] .c== ' 1 ' & & m [ x-1 ] [ y ] .done ! =true ) { /*north cell*/ m [ x ] [ y ] .done=true ; h++ ; find ( x-1 , y , h ) ; } if ( x+1 < rows & & m [ x+1 ] [ y ] .c== ' 1 ' & & m [ x+1 ] [ y ] .done ! =true ) { /*south cell*/ m [ x ] [ y ] .done=true ; h++ ; find ( x+1 , y , h ) ; } if ( y+1 < cols & & m [ x ] [ y+1 ] .c== ' 1 ' & & m [ x ] [ y+1 ] .done ! =true ) { /*east cell*/ m [ x ] [ y ] .done=true ; h++ ; find ( x , y+1 , h ) ; } if ( y-1 > =0 & & m [ x ] [ y-1 ] .c== ' 1 ' & & m [ x ] [ y-1 ] .done ! =true ) { /*west cell*/ m [ x ] [ y ] .done=true ; h++ ; find ( x , y-1 , h ) ; } } } } 00000000111111101111011001101 @ # 11100 00 @ 000001111111011110110011011 # 11100 0 0 0 0 @ 00 1 0 1 1 01 1 1 1 0 10 1 0 1 0 00 0 # 1 1 10 1 1 0 0 1"
AlertDialog implements DialogInterface AlertDialog.BUTTON_POSITIVE
public static boolean f ( ) { double val = Double.MAX_VALUE/10 ; double save = val ; for ( int i = 1 ; i < 1000 ; i++ ) { val -= i ; } return ( val == save ) ; }
"trigger.setRepeatCount ( 0 ) ; JobDetail job = new JobDetail ( ) ; job.setName ( eventType.toString ( ) + `` event '' ) ; job.setJobClass ( Action.class ) ; SimpleTrigger trigger = new SimpleTrigger ( ) ; trigger.setStartTime ( new Date ( momentInTime.inMillis ( ) ) ) ; trigger.setName ( `` trigger '' ) ; trigger.setRepeatInterval ( repeatFrequency.inMillis ( ) ) ; trigger.setRepeatCount ( SimpleTrigger.REPEAT_INDEFINITELY ) ; scheduleManager.getScheduler ( ) .scheduleJob ( job , trigger ) ; Time now : 1352410780356Will execute at : 1352410840356 // 1 min intervalExecution starts : 1352410840368 Time now : 1352411061156Will execute at : 1352411301156 // 3 min intervalExecution starts : 1352411301165 new MomentInTime ( new DayOfMonth ( 8 ) , new HourOfDay ( 15 ) , new MinuteOfHour ( 48 ) ) ; public MomentInTime ( DayOfMonth day , HourOfDay hour , MinuteOfHour min ) { calendarInstance = Calendar.getInstance ( ) ; // Get current year and month int year = calendarInstance.get ( Calendar.YEAR ) ; int month = calendarInstance.get ( Calendar.MONTH ) ; calendarInstance.set ( year , month , day.getValue ( ) , hour.getValue ( ) , min.getValue ( ) ) ; System.out.println ( `` Time now : `` + System.currentTimeMillis ( ) ) ; System.out.println ( `` Will execute at : `` + calendarInstance.getTimeInMillis ( ) ) ; } public long inMillis ( ) { return calendarInstance.getTimeInMillis ( ) ; }"
"D/Volley : [ 380 ] BasicNetwork.logSlowRequests : HTTP response for request= < [ ] http : //example.com/api/search/getTwitterData ? limit=10 & tag=JavaScript 0x865f5dc2 NORMAL 3 > [ lifetime=6683 ] , [ size=10543 ] , [ rc=200 ] , [ retryCount=0 ] public class StaggeredSearchActivity extends AppCompatActivity { ... @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_staggered_search ) ; requestQueue = Volley.newRequestQueue ( this ) ; Intent intent = getIntent ( ) ; String searchText = intent.getStringExtra ( `` searchText '' ) ; // Three concurrent API GET Calls getMediumData ( searchText ) ; getExampleData ( searchText ) ; getGoogleData ( searchText ) ; recyclerView = findViewById ( R.id.staggered_recycler_view ) ; staggeredGridLayoutManager = new StaggeredGridLayoutManager ( 2 , LinearLayoutManager.VERTICAL ) ; recyclerView.setLayoutManager ( staggeredGridLayoutManager ) ; } ArrayList < StaggeredCustomCard > dataset = new ArrayList < > ( ) ; private void getMediumData ( String searchText ) { progressBar = findViewById ( R.id.progressBar ) ; progressBar.setVisibility ( View.VISIBLE ) ; String url = UrlConstants.getUrl ( ) + searchText ; JsonObjectRequest jsonObjectRequest = new JsonObjectRequest ( Request.Method.GET , url , null , new Response.Listener < JSONObject > ( ) { @ Override public void onResponse ( JSONObject response ) { try { progressBar.setVisibility ( View.INVISIBLE ) ; JSONArray array = response.getJSONArray ( `` mediumposts '' ) ; ... dataset.add ( new StaggeredCustomCard ( user , userpost , postdate ) ) ; } staggeredGridAdapter = new StaggeredGridAdapter ( StaggeredSearchActivity.this , dataset ) ; recyclerView.setAdapter ( staggeredGridAdapter ) ; } catch ( JSONException e ) { e.printStackTrace ( ) ; } } } , new Response.ErrorListener ( ) { @ Override public void onErrorResponse ( VolleyError error ) { // TODO : Handle error progressBar.setVisibility ( View.INVISIBLE ) ; } } ) ; jsonObjectRequest.setRetryPolicy ( new DefaultRetryPolicy ( DefaultRetryPolicy.DEFAULT_TIMEOUT_MS * 15 , DefaultRetryPolicy.DEFAULT_MAX_RETRIES , DefaultRetryPolicy.DEFAULT_BACKOFF_MULT ) ) ; requestQueue.add ( jsonObjectRequest ) ; } private void getExampleData ( String searchText ) { ... JsonArrayRequest jsonArrayRequest = new JsonArrayRequest ( Request.Method.GET , url , null , new Response.Listener < JSONArray > ( ) { @ Override public void onResponse ( JSONArray response ) { try { ... dataset.add ( new StaggeredCustomCard ( user , userpost , postdate ) ) ; staggeredGridAdapter = new StaggeredGridAdapter ( StaggeredSearchActivity.this , dataset ) ; recyclerView.setAdapter ( staggeredGridAdapter ) ; } } catch ( JSONException e ) { e.printStackTrace ( ) ; } } } , new Response.ErrorListener ( ) { @ Override public void onErrorResponse ( VolleyError error ) { ... } } ) ; jsonArrayRequest.setRetryPolicy ( new DefaultRetryPolicy ( DefaultRetryPolicy.DEFAULT_TIMEOUT_MS * 15 , DefaultRetryPolicy.DEFAULT_MAX_RETRIES , DefaultRetryPolicy.DEFAULT_BACKOFF_MULT ) ) ; requestQueue.add ( jsonArrayRequest ) ; } private void getGoogleData ( String searchText ) { ... JsonObjectRequest jsonObjectRequest = new JsonObjectRequest ( Request.Method.GET , url , null , new Response.Listener < JSONObject > ( ) { @ Override public void onResponse ( JSONObject response ) { ... dataset.add ( new StaggeredCustomCard ( user , userpost , postdate ) ) ; } staggeredGridAdapter = new StaggeredGridAdapter ( StaggeredSearchActivity.this , dataset ) ; recyclerView.setAdapter ( staggeredGridAdapter ) ; } catch ( JSONException e ) { e.printStackTrace ( ) ; } } } , new Response.ErrorListener ( ) { @ Override public void onErrorResponse ( VolleyError error ) { ... } } ) ; jsonObjectRequest.setRetryPolicy ( new DefaultRetryPolicy ( DefaultRetryPolicy.DEFAULT_TIMEOUT_MS * 15 , DefaultRetryPolicy.DEFAULT_MAX_RETRIES , DefaultRetryPolicy.DEFAULT_BACKOFF_MULT ) ) ; requestQueue.add ( jsonObjectRequest ) ; } }"
"public class FoodOrdering { static private JFrame frame ; static private JTextField textField ; static private GridBagConstraints gbc ; static private JLabel [ ] foodLabel ; static private JLabel [ ] labels ; static private JTextField [ ] qtyField ; static private JLabel [ ] foodImage ; static private File [ ] file ; private static final int ELEMENTS = 9 ; /** * Launch the application . */ public static void main ( String [ ] args ) { EventQueue.invokeLater ( new Runnable ( ) { public void run ( ) { try { FoodOrdering window = new FoodOrdering ( ) ; window.frame.setVisible ( true ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ) ; } /** * Create the application . * * @ throws IOException */ public FoodOrdering ( ) throws IOException { initialize ( ) ; } /** * Initialize the contents of the frame . * * @ throws IOException */ static void initialize ( ) throws IOException { frame = new JFrame ( ) ; frame.setBounds ( 100 , 100 , 700 , 550 ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.getContentPane ( ) .setLayout ( null ) ; frame.setLocationRelativeTo ( null ) ; JLabel lblFoodOrdered = new JLabel ( `` Food Ordered '' ) ; lblFoodOrdered.setBounds ( 529 , 11 , 81 , 14 ) ; frame.getContentPane ( ) .add ( lblFoodOrdered ) ; TextArea textArea = new TextArea ( ) ; textArea.setBounds ( 462 , 31 , 199 , 275 ) ; frame.getContentPane ( ) .add ( textArea ) ; JLabel lblTotal = new JLabel ( `` Total : `` ) ; lblTotal.setBounds ( 519 , 315 , 46 , 14 ) ; frame.getContentPane ( ) .add ( lblTotal ) ; textField = new JTextField ( ) ; textField.setBounds ( 575 , 312 , 86 , 20 ) ; frame.getContentPane ( ) .add ( textField ) ; textField.setColumns ( 10 ) ; JButton btnOrder = new JButton ( `` Order '' ) ; btnOrder.setBounds ( 521 , 352 , 89 , 23 ) ; frame.getContentPane ( ) .add ( btnOrder ) ; JTabbedPane tabbedPane = new JTabbedPane ( JTabbedPane.TOP ) ; addIt ( tabbedPane , `` Foods '' ) ; addIt1 ( tabbedPane , `` Drinks '' ) ; addIt1 ( tabbedPane , `` Desserts '' ) ; tabbedPane.setBounds ( 23 , 11 , 400 , 450 ) ; frame.getContentPane ( ) .add ( tabbedPane ) ; frame.setVisible ( true ) ; } static void addIt1 ( JTabbedPane tabbedPane , String text ) { JLabel label = new JLabel ( text ) ; JButton button = new JButton ( text ) ; JPanel panel = new JPanel ( ) ; panel.add ( label ) ; panel.add ( button ) ; tabbedPane.addTab ( text , panel ) ; } static void addIt ( JTabbedPane tabbedPane , String text ) throws IOException { JPanel panel = new JPanel ( new GridBagLayout ( ) ) ; gbc = new GridBagConstraints ( ) ; gbc.insets = new Insets ( 1 , 1 , 1 , 1 ) ; foodImage = new JLabel [ ELEMENTS ] ; foodLabel = new JLabel [ ELEMENTS ] ; labels = new JLabel [ ELEMENTS ] ; qtyField = new JTextField [ ELEMENTS ] ; file = new File [ ELEMENTS ] ; try { file [ 0 ] = new File ( `` C : \\Users\\tony\\Desktop\\MedSalad.png '' ) ; file [ 1 ] = new File ( `` C : \\Users\\tony\\Desktop\\JapanesePanNoodles.png '' ) ; file [ 2 ] = new File ( `` C : \\Users\\tony\\Desktop\\Spaghetti.png '' ) ; file [ 3 ] = new File ( `` C : \\Users\\tony\\Desktop\\PadThai.png '' ) ; file [ 4 ] = new File ( `` C : \\Users\\tony\\Desktop\\RamenNoodles.png '' ) ; file [ 5 ] = new File ( `` C : \\Users\\tony\\Desktop\\SpaghettiAndMeatBalls.png '' ) ; file [ 6 ] = new File ( `` C : \\Users\\tony\\Desktop\\chickenRice.jpg '' ) ; file [ 7 ] = new File ( `` C : \\Users\\tony\\Desktop\\thaiFood.jpeg '' ) ; file [ 8 ] = new File ( `` C : \\Users\\tony\\Desktop\\vietnamFood.jpg '' ) ; foodLabel [ 0 ] = new JLabel ( `` Salad '' ) ; foodLabel [ 1 ] = new JLabel ( `` Japanese Noodles '' ) ; foodLabel [ 2 ] = new JLabel ( `` Spaghetti '' ) ; foodLabel [ 3 ] = new JLabel ( `` Spaghetti Meat Balls '' ) ; foodLabel [ 4 ] = new JLabel ( `` Noodles '' ) ; foodLabel [ 5 ] = new JLabel ( `` Kids Spaghetti '' ) ; foodLabel [ 6 ] = new JLabel ( `` Chicken Rice '' ) ; foodLabel [ 7 ] = new JLabel ( `` Thai Food '' ) ; foodLabel [ 8 ] = new JLabel ( `` Vietnam Food '' ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } for ( int i = 0 ; i < ELEMENTS ; i++ ) { Image image = ImageIO.read ( file [ i ] ) ; Image imageScaled = image.getScaledInstance ( 80 , 95 , Image.SCALE_SMOOTH ) ; ImageIcon imageIcon = new ImageIcon ( imageScaled ) ; qtyField [ i ] = new JTextField ( 3 ) ; foodImage [ i ] = new JLabel ( imageIcon ) ; } gbc.gridx = 0 ; for ( int i = 0 ; i < ELEMENTS ; i++ ) { if ( i % 3 == 0 ) { gbc.gridy += 2 ; gbc.gridx = 0 ; } panel.add ( foodImage [ i ] , gbc ) ; gbc.gridy++ ; panel.add ( foodLabel [ i ] , gbc ) ; gbc.gridy -- ; gbc.gridx++ ; panel.add ( qtyField [ i ] , gbc ) ; gbc.gridx++ ; tabbedPane.addTab ( text , panel ) ; } } public void setVisible ( boolean b ) throws IOException { } }"
"targetText= '' بةرز '' ; try ( PreparedStatement ps = conn.prepareStatement ( `` SELECT English , Kurdish FROM Info `` + '' WHERE Kurdish = ? `` + '' OR REGEXP_MATCHES ( Kurdish , ? ) `` + '' OR REGEXP_MATCHES ( Kurdish , ? ) `` + '' OR REGEXP_MATCHES ( Kurdish , ? ) `` ) ) { ps.setString ( 1 , targetText ) ; ps.setString ( 2 , `` ^ [ . ] * '' + targetText+ `` [ ] * [ : ، , ] + [ . ] * $ '' ) ; ps.setString ( 3 , `` ^ [ . ] * [ : ، , ] + [ ] * '' + targetText+ `` [ . ] * $ '' ) ; ps.setString ( 4 , `` ^ [ . ] * [ : ، , ] + [ ] * '' + targetText+ `` [ ] * [ : ، , ] + [ . ] * $ '' ) ; try ( ResultSet rSet = ps.executeQuery ( ) ) { while ( rSet.next ( ) ) { System.out.println ( rSet.getString ( `` English '' ) ) ; System.out.println ( rSet.getString ( `` Kurdish '' ) ) ; } } } aestheteبةرز ، جوانىثةرستaetherزوَر ناسك ، بةرز ، ثيروَز ، ئاسمانىaffairبةرز aestheteبةرز aetherبةرز affairبةرز"
( defn- str < - > int [ str ] ( let [ n ( read-string str ) ] ( if ( integer ? n ) n ) ) ) ( with-open [ file ( reader `` /path/to/foo.txt '' ) ] ( try ( doseq [ v ( clojure-csv.core/parse-csv file ) ] ( clojure.java.jdbc/insert ! db : records nil [ ( v 0 ) ( v 1 ) ( v 2 ) ( str < - > int ( v 3 ) ) ] ) ) ( println `` Records inserted successfully '' ) ( Exception e ( println ( .getNextException e ) e ) ) ) )
List list = List.of ( ) ; Set set = Set.of ( ) ; Map map = Map.of ( ) ;
"abstract class Node ( symbol : String ) { } abstract class Operator ( symbol : String , binaryOp : ( Double , Double ) = > Double ) extends Node ( symbol ) { } class Add ( a : Number , b : Number ) extends Operator ( `` + '' , ( a : Double , b : Double ) = > a+b ) { } class Number ( symbol : String ) extends Node ( symbol ) { val value = symbol.toDouble def this ( num : Double ) { this ( num.toString ) } } addition = Add ( Number ( 1 ) , Number ( 2 ) ) addition.binaryOp ( addition.a.value , addition.b.value )"
public void doSomething ( ) { someWorks ( ) ; { someVariables ; someMoreWorks ( ) ; } someEvenWorks ( ) ; { ... } }
"Pattern words = Pattern.compile ( \\bint\\b|\\bfloat\\b\\bchar\\b ) ; Matcher matcherWords = words.matcher ( code ) ; while ( matcherWords.find ( ) ) { System.out.print ( code.substring ( matcherWords.start ( ) , matcherWords.end ( ) ) ; // How to get next word that is a variable ? }"
"PlatformUI.getWorkbench ( ) .getActiveWorkbenchWindow ( ) .getActivePage ( ) . showView ( REPL_PLUGIN_ID , project.getName ( ) , IWorkbenchPage.VIEW_ACTIVATE ) ; ConsolePlugin.getDefault ( ) .getConsoleManager ( ) .addConsoles ( myConsoles )"
XWPFParagraph paragraph = ... // Get a paragraph from the documentSystem.out.println ( paragraph.getText ( ) ) ; // Prints : Some text with a tag < # SOMETAG # > System.out.println ( `` Number of runs : `` + paragraph.getRuns ( ) .size ( ) ) ; for ( XWPFRun run : paragraph.getRuns ( ) ) { System.out.println ( run.text ( ) ) ; } // Output : // Number of runs : 1// Some text with a tag < # SOMETAG # > // Output : // Number of runs : 4// Some text with a tag // < # // SOMETAG// # >
public class ClassA { public ClassA ( int x ) { // do some calculationand initialize the state } } public class ClassB extends ClassA { public ClassB ( ) { super ( StaticUtilityClass.someRandomIntegerValGenerator ( ) ) } }
"@ OutputTimeUnit ( TimeUnit.NANOSECONDS ) public class BrokenConcatenationBenchmark { @ Benchmark public String slow ( Data data ) { final Class < ? extends Data > clazz = data.clazz ; return `` class `` + clazz.getName ( ) ; } @ Benchmark public String fast ( Data data ) { final Class < ? extends Data > clazz = data.clazz ; final String clazzName = clazz.getName ( ) ; return `` class `` + clazzName ; } @ State ( Scope.Thread ) public static class Data { final Class < ? extends Data > clazz = getClass ( ) ; @ Setup public void setup ( ) { //explicitly load name via native method Class.getName0 ( ) clazz.getName ( ) ; } } } Benchmark Mode Cnt Score Error UnitsBrokenConcatenationBenchmark.fast avgt 25 22,253 ± 0,962 ns/opBrokenConcatenationBenchmark.fast : ·gc.alloc.rate avgt 25 9824,603 ± 400,088 MB/secBrokenConcatenationBenchmark.fast : ·gc.alloc.rate.norm avgt 25 240,000 ± 0,001 B/opBrokenConcatenationBenchmark.fast : ·gc.churn.PS_Eden_Space avgt 25 9824,162 ± 397,745 MB/secBrokenConcatenationBenchmark.fast : ·gc.churn.PS_Eden_Space.norm avgt 25 239,994 ± 0,522 B/opBrokenConcatenationBenchmark.fast : ·gc.churn.PS_Survivor_Space avgt 25 0,040 ± 0,011 MB/secBrokenConcatenationBenchmark.fast : ·gc.churn.PS_Survivor_Space.norm avgt 25 0,001 ± 0,001 B/opBrokenConcatenationBenchmark.fast : ·gc.count avgt 25 3798,000 countsBrokenConcatenationBenchmark.fast : ·gc.time avgt 25 2241,000 msBrokenConcatenationBenchmark.slow avgt 25 54,316 ± 1,340 ns/opBrokenConcatenationBenchmark.slow : ·gc.alloc.rate avgt 25 8435,703 ± 198,587 MB/secBrokenConcatenationBenchmark.slow : ·gc.alloc.rate.norm avgt 25 504,000 ± 0,001 B/opBrokenConcatenationBenchmark.slow : ·gc.churn.PS_Eden_Space avgt 25 8434,983 ± 198,966 MB/secBrokenConcatenationBenchmark.slow : ·gc.churn.PS_Eden_Space.norm avgt 25 503,958 ± 1,000 B/opBrokenConcatenationBenchmark.slow : ·gc.churn.PS_Survivor_Space avgt 25 0,127 ± 0,011 MB/secBrokenConcatenationBenchmark.slow : ·gc.churn.PS_Survivor_Space.norm avgt 25 0,008 ± 0,001 B/opBrokenConcatenationBenchmark.slow : ·gc.count avgt 25 3789,000 countsBrokenConcatenationBenchmark.slow : ·gc.time avgt 25 2245,000 ms private transient String name ; public String getName ( ) { String name = this.name ; if ( name == null ) { this.name = name = this.getName0 ( ) ; } return name ; } private native String getName0 ( ) ; @ 19 tsypanov.strings.benchmark.concatenation.BrokenConcatenationBenchmark : :fast ( 30 bytes ) force inline by CompileCommand @ 6 java.lang.Class : :getName ( 18 bytes ) inline ( hot ) @ 14 java.lang.Class : :initClassName ( 0 bytes ) native method @ 14 java.lang.StringBuilder : : < init > ( 7 bytes ) inline ( hot ) @ 19 java.lang.StringBuilder : :append ( 8 bytes ) inline ( hot ) @ 23 java.lang.StringBuilder : :append ( 8 bytes ) inline ( hot ) @ 26 java.lang.StringBuilder : :toString ( 35 bytes ) inline ( hot ) @ 19 tsypanov.strings.benchmark.concatenation.BrokenConcatenationBenchmark : :slow ( 28 bytes ) force inline by CompilerOracle @ 9 java.lang.StringBuilder : : < init > ( 7 bytes ) inline ( hot ) @ 3 java.lang.AbstractStringBuilder : : < init > ( 12 bytes ) inline ( hot ) @ 1 java.lang.Object : : < init > ( 1 bytes ) inline ( hot ) @ 14 java.lang.StringBuilder : :append ( 8 bytes ) inline ( hot ) @ 2 java.lang.AbstractStringBuilder : :append ( 50 bytes ) inline ( hot ) @ 10 java.lang.String : :length ( 6 bytes ) inline ( hot ) @ 21 java.lang.AbstractStringBuilder : :ensureCapacityInternal ( 27 bytes ) inline ( hot ) @ 17 java.lang.AbstractStringBuilder : :newCapacity ( 39 bytes ) inline ( hot ) @ 20 java.util.Arrays : :copyOf ( 19 bytes ) inline ( hot ) @ 11 java.lang.Math : :min ( 11 bytes ) ( intrinsic ) @ 14 java.lang.System : :arraycopy ( 0 bytes ) ( intrinsic ) @ 35 java.lang.String : :getChars ( 62 bytes ) inline ( hot ) @ 58 java.lang.System : :arraycopy ( 0 bytes ) ( intrinsic ) @ 18 java.lang.Class : :getName ( 21 bytes ) inline ( hot ) @ 11 java.lang.Class : :getName0 ( 0 bytes ) native method @ 21 java.lang.StringBuilder : :append ( 8 bytes ) inline ( hot ) @ 2 java.lang.AbstractStringBuilder : :append ( 50 bytes ) inline ( hot ) @ 10 java.lang.String : :length ( 6 bytes ) inline ( hot ) @ 21 java.lang.AbstractStringBuilder : :ensureCapacityInternal ( 27 bytes ) inline ( hot ) @ 17 java.lang.AbstractStringBuilder : :newCapacity ( 39 bytes ) inline ( hot ) @ 20 java.util.Arrays : :copyOf ( 19 bytes ) inline ( hot ) @ 11 java.lang.Math : :min ( 11 bytes ) ( intrinsic ) @ 14 java.lang.System : :arraycopy ( 0 bytes ) ( intrinsic ) @ 35 java.lang.String : :getChars ( 62 bytes ) inline ( hot ) @ 58 java.lang.System : :arraycopy ( 0 bytes ) ( intrinsic ) @ 24 java.lang.StringBuilder : :toString ( 17 bytes ) inline ( hot )"
import java.util.concurrent.Callable ; class Ideone { Callable < ? > x = super : :clone ; } Main.java:6 : error : incompatible types : invalid method reference Callable < ? > x = super : :clone ; ^ clone ( ) has protected access in Object
public E pollFirst ( ) { int h = head ; @ SuppressWarnings ( `` unchecked '' ) E result = ( E ) elements [ h ] ; // Element is null if deque empty if ( result == null ) return null ; elements [ h ] = null ; // Must null out slot head = ( h + 1 ) & ( elements.length - 1 ) ; return result ; } public E pollLast ( ) { int t = ( tail - 1 ) & ( elements.length - 1 ) ; @ SuppressWarnings ( `` unchecked '' ) E result = ( E ) elements [ t ] ; if ( result == null ) return null ; elements [ t ] = null ; tail = t ; return result ; } head = ( h + 1 ) & ( elements.length - 1 ) ; int t = ( tail - 1 ) & ( elements.length - 1 ) ;
"List < Integer > list = new ArrayList ( Arrays.asList ( 30,33,29,0,34,0,45 ) ) ; List < Integer > list2 = list.stream ( ) .filter ( x - > x > 0 ) .map ( x - > x - 1 ) .collect ( Collectors.toList ( ) ) ; //list.stream ( ) .findFirst ( ) .ifPresent ( x - > x - 1 ) .collect ( Collectors.toList ( ) ) ; //This is giving errorlist.stream ( ) .forEach ( x - > x . ) ; //How to use this in this case"
"C : \Users\myuser > java -Xmx1021m -XX : +PrintFlagsFinal -version | findstr `` MaxHeapSize '' uintx MaxHeapSize : = 1071644672 { product } java version `` 1.8.0_121 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_121-b13 ) Java HotSpot ( TM ) Client VM ( build 25.121-b13 , mixed mode ) C : \Users\myuser > java -Xmx1022m -XX : +PrintFlagsFinal -version | findstr `` MaxHeapSize '' uintx MaxHeapSize : = 1071644672 { product } java version `` 1.8.0_121 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_121-b13 ) Java HotSpot ( TM ) Client VM ( build 25.121-b13 , mixed mode ) C : \Users\myuser > java -Xmx1023m -XX : +PrintFlagsFinal -version | findstr `` MaxHeapSize '' uintx MaxHeapSize : = 1073741824 { product } java version `` 1.8.0_121 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_121-b13 ) Java HotSpot ( TM ) Client VM ( build 25.121-b13 , mixed mode ) C : \Users\myuser > java -Xmx1024m -XX : +PrintFlagsFinal -version | findstr `` MaxHeapSize '' uintx MaxHeapSize : = 1073741824 { product } java version `` 1.8.0_121 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_121-b13 ) Java HotSpot ( TM ) Client VM ( build 25.121-b13 , mixed mode )"
Logger.getLogger ( `` org.jaudiotagger '' ) .setLevel ( Level.OFF ) ; Logger.getLogger ( `` org.jaudiotagger.tag '' ) .setLevel ( Level.OFF ) ; Logger.getLogger ( `` org.jaudiotagger.audio.mp3.MP3File '' ) .setLevel ( Level.OFF ) ; Logger.getLogger ( `` org.jaudiotagger.tag.id3.ID3v23Tag '' ) .setLevel ( Level.OFF ) ; LogManager.getLogManager ( ) .reset ( ) ; static { //Disable loggers pin = new Logger [ ] { Logger.getLogger ( `` org.jaudiotagger '' ) } ; for ( Logger l : pin ) l.setLevel ( Level.OFF ) ; }
"Map < URL , Integer > res2 = new HashMap < > ( ) ; for ( URL url : res ) { res2.put ( url , null ) ; } List < URL > res = new ArrayList < > ( ) ;"
// Web Service Client 1 's namespace parameter -- namespace2package http : //www.multispeak.org/Version_3.0=com.company.webservice.client1.service// Web Service Client 2 's namespace parameter -- namespace2package http : //www.multispeak.org/Version_3.0=com.company.webservice.client2.service
class Bar { @ Inject private FooI foo ; ... void doWork ( ) { foo.methodThatRunUnderTx ( ) ; } } class FooImpl implements FooI { @ Override @ Transaction public void methodThatRunUnderTx ( ) { // code run with jpa context and transaction open } } interface FooI { void methodThatRunUnderTx ( ) ; } class Bar { @ Inject private FooI foo ; ... void doWork ( ) { foo.methodThatRunUnderTx ( ) ; } } class FooImpl implements FooI { @ Inject private FooI self ; @ Override // @ Transaction -- remove transaction from here public void methodThatRunUnderTx ( ) { ... self.methodThatRunUnderTx2 ( ) ; // call through proxy object } @ Override @ Transaction //add transaction from here public void methodThatRunUnderTx2 ( ) { // code run with jpa context and transaction open } } interface FooI { void methodThatRunUnderTx ( ) ; void methodThatRunUnderTx2 ( ) ; }
pool.increase ( ) ; waitForSpecialKeyPress ( ) ; pool.decrease ( ) ;
"select * from hello where id=0xc1c1795a0b ; JavaRDD < CassandraRow > cassandraRowsRDD = javaFunctions ( sc ) .cassandraTable ( `` test '' , `` hello '' ) .select ( `` range '' ) .where ( `` id= ? `` , `` 0xc1c1795a0b '' ) ; JavaRDD < CassandraRow > cassandraRowsRDD = javaFunctions ( sc ) .cassandraTable ( `` test '' , `` hello '' ) .select ( `` range '' ) .where ( `` id= ? `` , `` 0xc1c1795a0b '' .getBytes ( ) ) ;"
"public class FastFactorialSupplier implements FactorialSupplier { private final ExecutorService executorService ; public FastFactorialSupplier ( ExecutorService executorService ) { this.executorService = executorService ; } @ Override public BigInteger get ( long k ) { try { return executorService .submit ( ( ) - > LongStream.range ( 2 , k + 1 ) .parallel ( ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger.ONE , ( current , factSoFar ) - > factSoFar.multiply ( current ) ) ) .get ( ) ; } catch ( InterruptedException | ExecutionException e ) { e.printStackTrace ( ) ; } return BigInteger.ZERO ; } } public class MathUtils { public static BigInteger factorial ( long k ) { return LongStream.range ( 2 , k + 1 ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger.ONE , ( current , factSoFar ) - > factSoFar.multiply ( current ) ) ; } } @ Test public void testWithoutParallel ( ) { //2s 403 runTest ( new DummyFactorialSupplier ( ) ) ; // uses MathUtils.factorial } @ Test public void testParallelismWorkStealing1 ( ) { //1s 43 runTest ( new FastFactorialSupplier ( Executors.newWorkStealingPool ( 1 ) ) ) ; } @ Test public void testParallelismForkJoin1 ( ) { // 711ms runTest ( new FastFactorialSupplier ( new ForkJoinPool ( 1 ) ) ) ; } @ Test public void testExecutorForkJoin ( ) { //85ms runTest ( new FastFactorialSupplier ( new ForkJoinPool ( ) ) ) ; } private void runTest ( FactorialSupplier factorialSupplier ) { BigInteger result = factorialSupplier.get ( 100000 ) ; assertNotNull ( result ) ; // assertEquals ( 456574 , result.toString ( ) .length ( ) ) ; } public class FastFactorialSupplierP1Test { @ Benchmark @ BenchmarkMode ( { Mode.AverageTime , Mode.SampleTime , Mode.SingleShotTime , Mode.Throughput , Mode.All } ) @ Fork ( value = 1 , warmups = 1 ) public void measure ( ) { runTest ( new FastFactorialSupplier ( new ForkJoinPool ( 1 ) ) ) ; } private void runTest ( FactorialSupplier factorialSupplier ) { BigInteger result = factorialSupplier.get ( 100000 ) ; assertNotNull ( result ) ; } public static void main ( String [ ] args ) throws Exception { org.openjdk.jmh.Main.main ( args ) ; } } public class SerialFactorialSupplierTest { @ Benchmark @ BenchmarkMode ( { Mode.AverageTime , Mode.SampleTime , Mode.SingleShotTime , Mode.Throughput , Mode.All } ) @ Fork ( value = 1 , warmups = 1 ) public void measure ( ) { runTest ( new DummyFactorialSupplier ( ) ) ; } private void runTest ( FactorialSupplier factorialSupplier ) { BigInteger result = factorialSupplier.get ( 100000 ) ; assertNotNull ( result ) ; } public static void main ( String [ ] args ) throws Exception { org.openjdk.jmh.Main.main ( args ) ; } } public class IterativeFactorialTest { @ Benchmark @ BenchmarkMode ( { Mode.AverageTime , Mode.SampleTime , Mode.SingleShotTime , Mode.Throughput , Mode.All } ) @ Fork ( value = 1 , warmups = 1 ) public void measure ( ) { runTest ( new IterativeFact ( ) ) ; } private void runTest ( FactorialSupplier factorialSupplier ) { BigInteger result = factorialSupplier.get ( 100000 ) ; assertNotNull ( result ) ; } public static void main ( String [ ] args ) throws Exception { org.openjdk.jmh.Main.main ( args ) ; } class IterativeFact implements FactorialSupplier { @ Override public BigInteger get ( long k ) { BigInteger result = BigInteger.ONE ; while ( k -- ! = 0 ) { result = result.multiply ( BigInteger.valueOf ( k ) ) ; } return result ; } } } FastFactorialSupplierP1Test.measure avgt 5 0.437 ± 0.006 s/opIterativeFactorialTest.measure avgt 5 2.643 ± 0.383 s/opSerialFactorialSupplierTest.measure avgt 5 2.226 ± 0.044 s/op"
if ( a.isPresent ( ) ) list.add ( a.get ( ) ) ; a.ifPresent ( list : :add ) ; if ( a.isPresent ( ) & & b & & c ) list.add ( a.get ( ) ) ;
java.lang.RuntimeException : at android.app.ActivityThread.handleReceiver ( ActivityThread.java:2884 ) at android.app.ActivityThread.-wrap14 ( ActivityThread.java ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1565 ) at android.os.Handler.dispatchMessage ( Handler.java:111 ) at android.os.Looper.loop ( Looper.java:207 ) at android.app.ActivityThread.main ( ActivityThread.java:5728 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:789 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:679 ) Caused by : java.lang.ClassNotFoundException : at dalvik.system.BaseDexClassLoader.findClass ( BaseDexClassLoader.java:56 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:511 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:469 ) at android.app.ActivityThread.handleReceiver ( ActivityThread.java:2879 )
if ( obj is MyType )
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < library > < book > < name > < > Programming in ANSI C < > < /name > < author > < > Balaguruswamy < > < /author > < comment > < > This comment may contain xml entities such as & , < and > . < > < /comment > < /book > < book > < name > < > A Mathematical Theory of Communication < > < /name > < author > < > Claude E. Shannon < > < /author > < comment > < > This comment also may contain xml entities . < > < /comment > < /book > < ! -- This library contains more than ten thousand books . -- > < /library >"
"public final class MyClass { private final Map < String , String > map ; //Called by Thread1 public MyClass ( int size ) { this.map = new HashMap < String , String > ( size ) ; } //Only ever called by Thread2 public final String put ( String key , String val ) { return map.put ( key , value ) ; } //Only ever called by Thread2 public final String get ( String key ) { return map.get ( key ) ; } //Only ever called by Thread2 public final void printMap ( ) { //Format and print the contents of the map } }"
< applet width= '' 55 '' height= '' 40 '' border= '' 0 '' codebase= '' ~/Content/My/applet '' id= '' DxApplet '' name= '' DxApplet '' code= '' DxApplet.class '' archive= '' DxButtonApplet.jar '' > < param name= '' boxborder '' value= '' false '' > @ Html.Raw ( ViewBag.AppletParameters ) < /applet > applet : focus { outline : none ; -moz-outline-style : none ; } jButton1.setBorder ( null ) ; jButton1.setBorder ( BorderFactory.createEmptyBorder ( ) ) ;
DateTimeFormatter.ofPattern ( `` yyyy-MM-dd'T'HH : mm : ss.SSSX '' )
"public void doQueryAndStoreData ( String query , < ? extends Collection > storeIn ) { /* make a jdbc query , get ResultSet */ ResultSet rset = ... ; ProcessResultSet proc = new ProcessResultSet ( ) ; proc.process ( rset , storeIn ) ; /* clean up */ } private interface IProcessResultSet < C > { public void process ( ResultSet rset , C storeIn ) ; } private class ProcessResultSet implements IProcessResultSet < ? extends Collection > { public void process ( ResultSet rset , Map storeIn ) { /* do something */ } public void process ( ResultSet rset , List storeIn ) { /* do something else */ } } class Storeable c a where store : : a - > c a - > c adoQueryAndStoreData : : Storeable c a = > ResultSet a - > c a - > c adoQueryAndStoreData ( ResultSet rs ) coll = foldr store coll rs"
class Another { public void method ( Object o ) { System.out.println ( `` This is in method which takes object '' ) ; } public void method ( String s ) { System.out.println ( `` This is method which takes string '' ) ; } } public class NewClass { public static void main ( String args [ ] ) { Another an = new Another ( ) ; an.method ( null ) ; } }
"public class BackgroundProcesses { public static void main ( String [ ] args ) throws InterruptedException , ExecutionException { //ExecutorService threadPool2 = Executors.newCachedThreadPool ( ) ; ExecutorService threadPool = new ThreadPoolExecutor ( 2 , 10 , 180 , TimeUnit.SECONDS , new LinkedBlockingQueue < > ( ) ) ; for ( int i = 0 ; i < 800 ; i++ ) { Callable < String > task = new Task ( ) ; threadPool.submit ( task ) ; } } } class Task implements Callable < String > { @ Override public String call ( ) throws Exception { Thread.sleep ( 100 ) ; System.out.println ( Thread.currentThread ( ) .getName ( ) + `` is ready '' ) ; return `` '' ; } } pool-1-thread-1 is readypool-1-thread-2 is readypool-1-thread-1 is readypool-1-thread-2 is ready ... ExecutorService threadPool = new ThreadPoolExecutor ( 2 , 10 , 180 , TimeUnit.SECONDS , new LinkedBlockingQueue < > ( 10 ) ) ; ExecutorService threadPool = new ThreadPoolExecutor ( 2 , 10 , 180 , TimeUnit.SECONDS , new LinkedBlockingQueue < > ( 200 ) ) ;"
"public class ProbabilityCalculator { private Double p ( DataPoint right , Event rightEvent , DataPoint left , Event leftEvent ) { // do some stuff } private Double f ( DataPoint right , Event rightEvent , NavigableSet < DataPoint > points ) { DataPoint left = points.lower ( right ) ; Double result = 0.0 ; if ( left.isLefthandNode ( ) ) { result = 0.25 * p ( right , rightEvent , left , null ) ; } else if ( left.isQ ( ) ) { result = p ( right , rightEvent , left , left.getQEvent ( ) ) * f ( left , left.getQEvent ( ) , points ) ; } else { // if M_k for ( Event leftEvent : left.getEvents ( ) ) result += p ( right , rightEvent , left , leftEvent ) * f ( left , leftEvent , points ) ; } return result ; } public Double S ( NavigableSet < DataPoint > points ) { return f ( points.last ( ) , points.last ( ) .getRightNodeEvent ( ) , points ) } } Double S1 = S ( points ) ; points.add ( Q ) ; Double S2 = S ( points ) ; Double probability = S2/S1 ;"
"Action updateCursorAction = new AbstractAction ( ) { boolean shouldDraw = false ; public void actionPerformed ( ActionEvent e ) { if ( shouldDraw = ! shouldDraw ) { // < -- -- - here is my problem , what 's this condition for ? // is n't it always false ? drawCursor ( ) ; } else { eraseCursor ( ) ; } } } ; new Timer ( 300 , updateCursorAction ) .start ( ) ;"
"public SomeValue getSomevalue ( String key ) { SomeValue result = concurrentMap.get ( key ) ; if ( result ! = null ) return result ; synchronized ( concurrentMap ) { SomeValue result = concurrentMap.get ( key ) ; if ( result == null ) { result = new SomeValue ( key ) ; concurrentMap.put ( key , result ) ; } return result ; } }"
"@ Testpublic void metaspaceTest ( ) throws CannotCompileException , InterruptedException { ClassPool cp = ClassPool.getDefault ( ) ; System.out.println ( `` started '' ) ; for ( int i = 0 ; i < = 100000 ; i++ ) { Class c = cp.makeClass ( `` br.com.test.GeneratedClass '' + i ) .toClass ( ) ; Thread.sleep ( 1 ) ; if ( i % 10000 == 0 ) { System.out.println ( i ) ; } } System.out.println ( `` finished '' ) ; }"
core-module -- src -- main -- java -- test -- java -- testFixtures -- java dependencies { api ( `` com.my.external.project:1.0 '' ) // ... more API dependencies testFixturesCompileOnly ( project ( `` : core-module '' ) ) testFixturesApi ( `` junit : junit:4.12 '' ) // ... more test dependencies } testFixturesImplementationOnly ( `` com.my.external.project:1.0 '' )
"java bfinterpreter/BFInterpreter > output.bin 00 01 02 03 04 05 06 ... 7f 3f 3f 3f 3f 3f ... a0 a1 a2 ... ff package bfinterpreter ; /** * * @ author Nicki von Bulow */public class BFInterpreter { private char [ ] program ; private StringBuilder output ; private byte [ ] input ; private short inputPosition ; private short [ ] data ; private short dataPosition ; private boolean debug ; private boolean valid ; public static final char INPUT = ' , ' ; public static final char OUTPUT = ' . ' ; public static final char INCREASEPOINTER = ' > ' ; public static final char DECREASEPOINTER = ' < ' ; public static final char INCREASE = '+ ' ; public static final char DECREASE = '- ' ; public static final char LOOPSTART = ' [ ' ; public static final char LOOPEND = ' ] ' ; public static final char DEBUG = ' # ' ; public BFInterpreter ( char [ ] program , byte [ ] input , boolean debug ) { this.program = program ; this.input = input ; this.debug = debug ; output = new StringBuilder ( ) ; ; valid = true ; data = new short [ 32767 ] ; } public void execute ( ) { execute ( program ) ; } private void execute ( char [ ] program ) { short programPosition = 0 ; for ( char b : program ) { if ( b == INPUT ) { if ( inputPosition > = input.length ) break ; data [ dataPosition ] = input [ inputPosition ] ; inputPosition++ ; } else if ( b == OUTPUT ) { if ( data [ dataPosition ] > =0 ) output.append ( ( char ) ( short ) data [ dataPosition ] ) ; else { short a = data [ dataPosition ] ; System.err.println ( a + 256 ) ; output.append ( ( char ) ( a + 256 ) ) ; } } else if ( b == INCREASEPOINTER ) { if ( dataPosition == 32766 ) dataPosition = 0 ; else dataPosition++ ; } else if ( b == DECREASEPOINTER ) { if ( dataPosition == 0 ) dataPosition = 32766 ; else dataPosition -- ; } else if ( b == INCREASE ) { if ( data [ dataPosition ] ! = 255 ) data [ dataPosition ] ++ ; else data [ dataPosition ] = 0 ; } else if ( b == DECREASE ) { if ( data [ dataPosition ] ! = 0 ) data [ dataPosition ] -- ; else data [ dataPosition ] = 255 ; } else if ( b == LOOPSTART ) { short loopcount = 1 ; char [ ] newProg = new char [ program.length - programPosition ] ; System.arraycopy ( program , programPosition , newProg , 0 , newProg.length ) ; int at = 0 ; for ( char d : newProg ) { if ( loopcount == 0 ) break ; if ( d == ' [ ' ) loopcount++ ; else if ( d == ' ] ' ) loopcount -- ; at++ ; } char [ ] finalNewProg = new char [ at ] ; System.arraycopy ( newProg , 1 , finalNewProg , 0 , at-2 ) ; while ( data [ dataPosition ] ! = 0 ) execute ( finalNewProg ) ; } else if ( b == LOOPEND ) ; programPosition++ ; } } private boolean analyze ( char [ ] prog ) { return true ; } public String output ( ) { return output.toString ( ) ; } public static void main ( String args [ ] ) { BFInterpreter a = new BFInterpreter ( `` + [ .+ ] '' .toCharArray ( ) , `` '' .getBytes ( ) , false ) ; a.execute ( ) ; System.out.println ( a.output ( ) ) ; for ( byte b : a.output ( ) .getBytes ( ) ) System.err.print ( b + `` `` ) ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 3031 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 8384 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 12763 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 6363 63 63 63 63 -96 -95 -94 -93 -92 -91 -90 -89 -88 -87 -86 -85 -84 -83 -82 -81-80 -79 -78 -77 -76 -75 -74 -73 -72 -71 -70 -69 -68 -67 -66 -65 -64 -63 -62 -61-60 -59 -58 -57 -56 -55 -54 -53 -52 -51 -50 -49 -48 -47 -46 -45 -44 -43 -42 -41-40 -39 -38 -37 -36 -35 -34 -33 -32 -31 -30 -29 -28 -27 -26 -25 -24 -23 -22 -21-20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0"
@ echo offjavac -d bin -sourcepath src/*.java src/sign/*.java src/Alert.javapause @ echo offjavac -d bin -sourcepath src/*.java src/sign/*.javapause
private void foo ( Bar bar ) { Session session = null ; Class entityClazz = null ; try { entityClazz = Hibernate.getClass ( bar ) ; if ( bar ! = null ) { entityClazz = Hibernate.getClass ( bar ) ;
"REGEX = `` ScriptExecThread ( \\ ( [ 0-9 ] +\\ ) ) .* ? ( finished|starting ) '' //in java Set started , finished for ( int i=log.size ( ) -1 ; i > =0 ; i -- ) { if ( group ( 2 ) .contains ( `` starting '' ) started.add ( log.get ( i ) ) else if ( group ( 2 ) .contains ( `` finished '' ) finished.add ( log.get ( i ) } started.removeAll ( finished ) ; Set < String > started = new HashSet < String > ( ) , finished = new HashSet < String > ( ) ; for ( int i = JAnalyzer.csvlog.size ( ) -1 ; i > = 0 ; i -- ) { if ( JAnalyzer.csvlog.get ( i ) .contains ( `` ScriptExecThread '' ) ) JUtility.hasThreadHung ( JAnalyzer.csvlog.get ( i ) , started , finished ) ; } started.removeAll ( finished ) ; commonTextArea.append ( `` Number of threads hung : `` + noThreadsHung + `` \n '' ) ; for ( String s : started ) { JLogger.appendLineToConsole ( s ) ; commonTextArea.append ( s+ '' \n '' ) ; } public static boolean hasThreadHung ( final String str , Set < String > started , Set < String > finished ) { Pattern r = Pattern.compile ( `` ScriptExecThread ( \\ ( [ 0-9 ] +\\ ) ) .* ? ( finished|starting ) '' ) ; Matcher m = r.matcher ( str ) ; boolean hasHung = m.find ( ) ; if ( m.group ( 2 ) .contains ( `` starting '' ) ) started.add ( str ) ; else if ( m.group ( 2 ) .contains ( `` finished '' ) ) finished.add ( str ) ; System.out.println ( `` Started size : `` + started.size ( ) ) ; System.out.println ( `` Finished size : `` + finished.size ( ) ) ; return hasHung ; }"
public class Bytes { public static byte [ ] getByteArray ( ) { return new byte [ ] { -128 } ; } public static int getJavaChecksum ( ) { int checksum = 0 ; for ( Byte b : getByteArray ( ) ) { checksum += ( b & 0xff ) ; } return checksum ; } } fun getKotlinChecksum ( array : ByteArray ) : Byte { var checksum = 0 for ( b in array ) { checksum += ( b and 0xFF.toByte ( ) ) } return checksum.toByte ( ) } fun main ( args : Array < String > ) { println ( Bytes.getJavaChecksum ( ) ) print ( getKotlinChecksum ( Bytes.getByteArray ( ) ) ) }
"get ( array , 5 ) = 5 ; int & get ( int* array , int index ) { return array [ index ] ; }"
Integer idx = Integer.valueOf ( 2 ) ; list.remove ( idx )
mvn scala : doc
"System.out.println ( `` selected = `` +selected ) ; Calendar now = Calendar.getInstance ( ) ; System.out.println ( `` a `` +now.getTime ( ) ) ; now.setTimeInMillis ( selected ) ; System.out.println ( `` b `` +now.getTime ( ) ) ; now.set ( Calendar.MILLISECOND,0 ) ; now.set ( Calendar.SECOND,0 ) ; now.set ( Calendar.MINUTE,0 ) ; now.set ( Calendar.HOUR_OF_DAY,6 ) ; //start from 6am System.out.println ( `` d `` +now.getTime ( ) ) ; now.set ( Calendar.DAY_OF_WEEK , Calendar.SUNDAY ) ; System.out.println ( `` e `` +now.getTime ( ) ) ; selected = 1355835600000 a Wed Dec 19 19:35:36 EST 2012 b Wed Dec 19 00:00:00 EST 2012 d Wed Dec 19 06:00:00 EST 2012 e Sun Dec 23 06:00:00 EST 2012 selected = 1355835600000 a Wed Dec 19 19:33:57 EST 2012 b Wed Dec 19 00:00:00 EST 2012 d Wed Dec 19 06:00:00 EST 2012 e Sun Dec 16 06:00:00 EST 2012"
Arraylist < Integer > listofIntegers = new Arraylist < Integer > ( ) ; listofIntegers.add ( 666 ) ; System.out.println ( `` First Element of listofIntegers = `` + listofIntegers.get ( 0 ) ) ; Arraylist < Integer > listofIntegers = new Arraylist < Integer > ( ) ; listofIntegers.add ( Integer.ValueOf ( 666 ) ) ; System.out.println ( `` First Element of listofIntegers = `` + listofIntegers.get ( 0 ) ) ;
private String [ ] books = new String [ 5 ] ; private ArrayList < String > ( Arrays.asList ( books ) )
"public class SortMapByValue { public static void main ( String [ ] args ) { HashMap < String , Integer > map = new HashMap < > ( ) ; map.put ( `` A '' , 3 ) ; map.put ( `` V '' , 1 ) ; map.put ( `` Anss '' , 9 ) ; map.put ( `` D '' , 5 ) ; map.put ( `` E '' , 2 ) ; map.put ( `` F '' , 10 ) ; HashMap < String , Integer > newMap = new LinkedHashMap < > ( ) ; List < Map.Entry < String , Integer > > list = new ArrayList < > ( map.entrySet ( ) ) ; Collections.sort ( list , ( o1 , o2 ) - > o1.getValue ( ) - o2.getValue ( ) ) ; // Need to this using Java 8 -- start for ( Entry < String , Integer > entry : list ) { newMap.put ( entry.getKey ( ) , entry.getValue ( ) ) ; } // Need to this using Java 8 -- end newMap.forEach ( ( k , v ) - > System.out.println ( `` Key : `` + k + `` Value : `` + v ) ) ; } }"
for ( i = 0 ; i < MAX ; i++ ) A [ i ] = B [ i ] + C [ i ] ; for ( i = tid ; i < MAX ; i += 4 ) A [ i ] = B [ i ] + C [ i ] ; for ( i = tid* ( MAX/4 ) ; i < ( tid+1 ) * ( MAX/4 ) ; i++ ) A [ i ] = B [ i ] + C [ i ] ;
"public class MyAVLTree < K extends Comparable < ? super K > , E > implements OrderedDictionary < K , E > { class AVLNode implements Locator < K , E > { // ... } // ... . public Locator < K , E > [ ] toBSTArray ( ) { AVLNode [ ] bArray = new AVLNode [ size ] ; makeArray ( root , 0 , bArray ) ; // recursion return bArray ; } }"
JAVA0043 Inner class 'bar ' does not use outer class 'foo '
"class OuterClass { public enum Method { GET , PUT , POST , DELETE ; } }"
"public class NoLinksWebViewClient extends WebViewClient { @ Override public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { return true ; } }"
"public class CustomHashMap extends HashMap < String , Object > { ... } Map < String , HashMap < String , Object > > customs = new LinkedHashMap < String , CustomHashMap > ( ) ; Map < String , HashMap < String , Object > > customs = new LinkedHashMap ( ) ; customs.put ( `` test '' , new CustomHashMap ( ) ) ;"
"List < Pair < String , List < Category > > > categoryMappings = null ; public void reloadStaticData ( ) { // Left one is the provider 's category and right one is ours try ( UoW luow = CoreModule.getInstance ( UoW.class ) ) { CategoryRepo categoryRepo = luow.getCategoryRepo ( ) ; categoryMappings = Arrays.asList ( // Nightlife new ImmutablePair < > ( `` Bars '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Ski-Bar '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Bar '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Beer '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Pubs '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Clubs '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) ) ) , new ImmutablePair < > ( `` Dance '' , Arrays.asList ( categoryRepo.findByName ( `` Bar & Pubs '' ) .get ( ) , categoryRepo.findByName ( `` Clubs '' ) .get ( ) ) ) , // if I got more than 20 of these ImmutablePairs , javac crashes or takes hours to compile ) ; } }"
public final class Main { public static void main ( String [ ] args ) throws InterruptedException { Thread.sleep ( Long.MAX_VALUE ) ; } }
"class Properties { public Properties add ( String k , String v ) { //store ( k , v ) somewhere return this ; } } properties.add ( `` name '' , `` john '' ) .add ( `` role '' , '' swd '' ) . ... properties.add ( `` name '' , `` john '' ) ; properties.add ( `` role '' , `` swd '' ) ;"
class A { public String s ; } A a1 = new A ( ) ; a1.s = `` bla '' ; A a2 = new A ( ) ; a2.s = a1.s ; a1 = null ;
userList.forEach ( user - > { System.out.println ( user ) ; } ) ;
public class experiment { public static void main ( String [ ] args ) { int day = 1 ; String str ; switch ( day ) { case 1 : str = `` nice '' ; break ; } System.out.println ( str ) ; } } public class SwitchDemo { public static void main ( String [ ] args ) { int month = 8 ; String monthString ; switch ( month ) { case 1 : monthString = `` January '' ; break ; case 2 : monthString = `` February '' ; break ; case 3 : monthString = `` March '' ; break ; case 4 : monthString = `` April '' ; break ; case 5 : monthString = `` May '' ; break ; case 6 : monthString = `` June '' ; break ; case 7 : monthString = `` July '' ; break ; case 8 : monthString = `` August '' ; break ; case 9 : monthString = `` September '' ; break ; case 10 : monthString = `` October '' ; break ; case 11 : monthString = `` November '' ; break ; case 12 : monthString = `` December '' ; break ; default : monthString = `` Invalid month '' ; break ; } System.out.println ( monthString ) ; } }
"import libsvm . * ; import java.applet . * ; import java.awt . * ; import java.util . * ; import java.awt.event . * ; import java.io . * ; /** * SVM package * @ author unknown * */public class svm_toy extends Applet { static final String DEFAULT_PARAM= '' -t 2 -c 100 '' ; int XLEN ; int YLEN ; // off-screen buffer Image buffer ; Graphics buffer_gc ; // pre-allocated colors final static Color colors [ ] = { new Color ( 0,0,0 ) , new Color ( 0,120,120 ) , new Color ( 120,120,0 ) , new Color ( 120,0,120 ) , new Color ( 0,200,200 ) , new Color ( 200,200,0 ) , new Color ( 200,0,200 ) } ; class point { point ( double x , double y , byte value ) { this.x = x ; this.y = y ; this.value = value ; } double x , y ; byte value ; } Vector < point > point_list = new Vector < point > ( ) ; byte current_value = 1 ; public void init ( ) { setSize ( getSize ( ) ) ; final Button button_change = new Button ( `` Change '' ) ; Button button_run = new Button ( `` Run '' ) ; Button button_clear = new Button ( `` Clear '' ) ; Button button_save = new Button ( `` Save '' ) ; Button button_load = new Button ( `` Load '' ) ; final TextField input_line = new TextField ( DEFAULT_PARAM ) ; BorderLayout layout = new BorderLayout ( ) ; this.setLayout ( layout ) ; Panel p = new Panel ( ) ; GridBagLayout gridbag = new GridBagLayout ( ) ; p.setLayout ( gridbag ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.weightx = 1 ; c.gridwidth = 1 ; gridbag.setConstraints ( button_change , c ) ; gridbag.setConstraints ( button_run , c ) ; gridbag.setConstraints ( button_clear , c ) ; gridbag.setConstraints ( button_save , c ) ; gridbag.setConstraints ( button_load , c ) ; c.weightx = 5 ; c.gridwidth = 5 ; gridbag.setConstraints ( input_line , c ) ; button_change.setBackground ( colors [ current_value ] ) ; p.add ( button_change ) ; p.add ( button_run ) ; p.add ( button_clear ) ; p.add ( button_save ) ; p.add ( button_load ) ; p.add ( input_line ) ; this.add ( p , BorderLayout.SOUTH ) ; button_change.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_change_clicked ( ) ; button_change.setBackground ( colors [ current_value ] ) ; } } ) ; button_run.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_run_clicked ( input_line.getText ( ) ) ; } } ) ; button_clear.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_clear_clicked ( ) ; } } ) ; button_save.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_save_clicked ( input_line.getText ( ) ) ; } } ) ; button_load.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_load_clicked ( ) ; } } ) ; input_line.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { button_run_clicked ( input_line.getText ( ) ) ; } } ) ; this.enableEvents ( AWTEvent.MOUSE_EVENT_MASK ) ; } void draw_point ( point p ) { Color c = colors [ p.value+3 ] ; Graphics window_gc = getGraphics ( ) ; buffer_gc.setColor ( c ) ; buffer_gc.fillRect ( ( int ) ( p.x*XLEN ) , ( int ) ( p.y*YLEN ) ,4,4 ) ; window_gc.setColor ( c ) ; window_gc.fillRect ( ( int ) ( p.x*XLEN ) , ( int ) ( p.y*YLEN ) ,4,4 ) ; } void clear_all ( ) { point_list.removeAllElements ( ) ; if ( buffer ! = null ) { buffer_gc.setColor ( colors [ 0 ] ) ; buffer_gc.fillRect ( 0,0 , XLEN , YLEN ) ; } repaint ( ) ; } void draw_all_points ( ) { int n = point_list.size ( ) ; for ( int i=0 ; i < n ; i++ ) draw_point ( point_list.elementAt ( i ) ) ; } void button_change_clicked ( ) { ++current_value ; if ( current_value > 3 ) current_value = 1 ; } private static double atof ( String s ) { return Double.valueOf ( s ) .doubleValue ( ) ; } private static int atoi ( String s ) { return Integer.parseInt ( s ) ; } void button_run_clicked ( String args ) { // guard if ( point_list.isEmpty ( ) ) return ; svm_parameter param = new svm_parameter ( ) ; // default values param.svm_type = svm_parameter.C_SVC ; param.kernel_type = svm_parameter.RBF ; param.degree = 3 ; param.gamma = 0 ; param.coef0 = 0 ; param.nu = 0.5 ; param.cache_size = 40 ; param.C = 1 ; param.eps = 1e-3 ; param.p = 0.1 ; param.shrinking = 1 ; param.probability = 0 ; param.nr_weight = 0 ; param.weight_label = new int [ 0 ] ; param.weight = new double [ 0 ] ; // parse options StringTokenizer st = new StringTokenizer ( args ) ; String [ ] argv = new String [ st.countTokens ( ) ] ; for ( int i=0 ; i < argv.length ; i++ ) argv [ i ] = st.nextToken ( ) ; for ( int i=0 ; i < argv.length ; i++ ) { if ( argv [ i ] .charAt ( 0 ) ! = '- ' ) break ; if ( ++i > =argv.length ) { System.err.print ( `` unknown option\n '' ) ; break ; } switch ( argv [ i-1 ] .charAt ( 1 ) ) { case 's ' : param.svm_type = atoi ( argv [ i ] ) ; break ; case 't ' : param.kernel_type = atoi ( argv [ i ] ) ; break ; case 'd ' : param.degree = atoi ( argv [ i ] ) ; break ; case ' g ' : param.gamma = atof ( argv [ i ] ) ; break ; case ' r ' : param.coef0 = atof ( argv [ i ] ) ; break ; case ' n ' : param.nu = atof ( argv [ i ] ) ; break ; case 'm ' : param.cache_size = atof ( argv [ i ] ) ; break ; case ' c ' : param.C = atof ( argv [ i ] ) ; break ; case ' e ' : param.eps = atof ( argv [ i ] ) ; break ; case ' p ' : param.p = atof ( argv [ i ] ) ; break ; case ' h ' : param.shrinking = atoi ( argv [ i ] ) ; break ; case ' b ' : param.probability = atoi ( argv [ i ] ) ; break ; case ' w ' : ++param.nr_weight ; { int [ ] old = param.weight_label ; param.weight_label = new int [ param.nr_weight ] ; System.arraycopy ( old,0 , param.weight_label,0 , param.nr_weight-1 ) ; } { double [ ] old = param.weight ; param.weight = new double [ param.nr_weight ] ; System.arraycopy ( old,0 , param.weight,0 , param.nr_weight-1 ) ; } param.weight_label [ param.nr_weight-1 ] = atoi ( argv [ i-1 ] .substring ( 2 ) ) ; param.weight [ param.nr_weight-1 ] = atof ( argv [ i ] ) ; break ; default : System.err.print ( `` unknown option\n '' ) ; } } // build problem svm_problem prob = new svm_problem ( ) ; prob.l = point_list.size ( ) ; prob.y = new double [ prob.l ] ; if ( param.kernel_type == svm_parameter.PRECOMPUTED ) { } else if ( param.svm_type == svm_parameter.EPSILON_SVR || param.svm_type == svm_parameter.NU_SVR ) { if ( param.gamma == 0 ) param.gamma = 1 ; prob.x = new svm_node [ prob.l ] [ 1 ] ; for ( int i=0 ; i < prob.l ; i++ ) { point p = point_list.elementAt ( i ) ; prob.x [ i ] [ 0 ] = new svm_node ( ) ; prob.x [ i ] [ 0 ] .index = 1 ; prob.x [ i ] [ 0 ] .value = p.x ; prob.y [ i ] = p.y ; } // build model & classify svm_model model = svm.svm_train ( prob , param ) ; svm_node [ ] x = new svm_node [ 1 ] ; x [ 0 ] = new svm_node ( ) ; x [ 0 ] .index = 1 ; int [ ] j = new int [ XLEN ] ; Graphics window_gc = getGraphics ( ) ; for ( int i = 0 ; i < XLEN ; i++ ) { x [ 0 ] .value = ( double ) i / XLEN ; j [ i ] = ( int ) ( YLEN*svm.svm_predict ( model , x ) ) ; } buffer_gc.setColor ( colors [ 0 ] ) ; buffer_gc.drawLine ( 0,0,0 , YLEN-1 ) ; window_gc.setColor ( colors [ 0 ] ) ; window_gc.drawLine ( 0,0,0 , YLEN-1 ) ; int p = ( int ) ( param.p * YLEN ) ; for ( int i=1 ; i < XLEN ; i++ ) { buffer_gc.setColor ( colors [ 0 ] ) ; buffer_gc.drawLine ( i,0 , i , YLEN-1 ) ; window_gc.setColor ( colors [ 0 ] ) ; window_gc.drawLine ( i,0 , i , YLEN-1 ) ; buffer_gc.setColor ( colors [ 5 ] ) ; window_gc.setColor ( colors [ 5 ] ) ; buffer_gc.drawLine ( i-1 , j [ i-1 ] , i , j [ i ] ) ; window_gc.drawLine ( i-1 , j [ i-1 ] , i , j [ i ] ) ; if ( param.svm_type == svm_parameter.EPSILON_SVR ) { buffer_gc.setColor ( colors [ 2 ] ) ; window_gc.setColor ( colors [ 2 ] ) ; buffer_gc.drawLine ( i-1 , j [ i-1 ] +p , i , j [ i ] +p ) ; window_gc.drawLine ( i-1 , j [ i-1 ] +p , i , j [ i ] +p ) ; buffer_gc.setColor ( colors [ 2 ] ) ; window_gc.setColor ( colors [ 2 ] ) ; buffer_gc.drawLine ( i-1 , j [ i-1 ] -p , i , j [ i ] -p ) ; window_gc.drawLine ( i-1 , j [ i-1 ] -p , i , j [ i ] -p ) ; } } } else { if ( param.gamma == 0 ) param.gamma = 0.5 ; prob.x = new svm_node [ prob.l ] [ 2 ] ; for ( int i=0 ; i < prob.l ; i++ ) { point p = point_list.elementAt ( i ) ; prob.x [ i ] [ 0 ] = new svm_node ( ) ; prob.x [ i ] [ 0 ] .index = 1 ; prob.x [ i ] [ 0 ] .value = p.x ; prob.x [ i ] [ 1 ] = new svm_node ( ) ; prob.x [ i ] [ 1 ] .index = 2 ; prob.x [ i ] [ 1 ] .value = p.y ; prob.y [ i ] = p.value ; } // build model & classify svm_model model = svm.svm_train ( prob , param ) ; svm_node [ ] x = new svm_node [ 2 ] ; x [ 0 ] = new svm_node ( ) ; x [ 1 ] = new svm_node ( ) ; x [ 0 ] .index = 1 ; x [ 1 ] .index = 2 ; Graphics window_gc = getGraphics ( ) ; for ( int i = 0 ; i < XLEN ; i++ ) for ( int j = 0 ; j < YLEN ; j++ ) { x [ 0 ] .value = ( double ) i / XLEN ; x [ 1 ] .value = ( double ) j / YLEN ; double d = svm.svm_predict ( model , x ) ; if ( param.svm_type == svm_parameter.ONE_CLASS & & d < 0 ) d=2 ; buffer_gc.setColor ( colors [ ( int ) d ] ) ; window_gc.setColor ( colors [ ( int ) d ] ) ; buffer_gc.drawLine ( i , j , i , j ) ; window_gc.drawLine ( i , j , i , j ) ; } } draw_all_points ( ) ; } void button_clear_clicked ( ) { clear_all ( ) ; } void button_save_clicked ( String args ) { FileDialog dialog = new FileDialog ( new Frame ( ) , '' Save '' , FileDialog.SAVE ) ; dialog.setVisible ( true ) ; String filename = dialog.getDirectory ( ) + dialog.getFile ( ) ; if ( filename == null ) return ; try { DataOutputStream fp = new DataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( filename ) ) ) ; int svm_type = svm_parameter.C_SVC ; int svm_type_idx = args.indexOf ( `` -s `` ) ; if ( svm_type_idx ! = -1 ) { StringTokenizer svm_str_st = new StringTokenizer ( args.substring ( svm_type_idx+2 ) .trim ( ) ) ; svm_type = atoi ( svm_str_st.nextToken ( ) ) ; } int n = point_list.size ( ) ; if ( svm_type == svm_parameter.EPSILON_SVR || svm_type == svm_parameter.NU_SVR ) { for ( int i=0 ; i < n ; i++ ) { point p = point_list.elementAt ( i ) ; fp.writeBytes ( p.y+ '' 1 : '' +p.x+ '' \n '' ) ; } } else { for ( int i=0 ; i < n ; i++ ) { point p = point_list.elementAt ( i ) ; fp.writeBytes ( p.value+ '' 1 : '' +p.x+ '' 2 : '' +p.y+ '' \n '' ) ; } } fp.close ( ) ; } catch ( IOException e ) { System.err.print ( e ) ; } } void button_load_clicked ( ) { FileDialog dialog = new FileDialog ( new Frame ( ) , '' Load '' , FileDialog.LOAD ) ; dialog.setVisible ( true ) ; String filename = dialog.getDirectory ( ) + dialog.getFile ( ) ; if ( filename == null ) return ; clear_all ( ) ; try { BufferedReader fp = new BufferedReader ( new FileReader ( filename ) ) ; String line ; while ( ( line = fp.readLine ( ) ) ! = null ) { StringTokenizer st = new StringTokenizer ( line , '' \t\n\r\f : '' ) ; if ( st.countTokens ( ) == 5 ) { byte value = ( byte ) atoi ( st.nextToken ( ) ) ; st.nextToken ( ) ; double x = atof ( st.nextToken ( ) ) ; st.nextToken ( ) ; double y = atof ( st.nextToken ( ) ) ; point_list.addElement ( new point ( x , y , value ) ) ; } else if ( st.countTokens ( ) == 3 ) { double y = atof ( st.nextToken ( ) ) ; st.nextToken ( ) ; double x = atof ( st.nextToken ( ) ) ; point_list.addElement ( new point ( x , y , current_value ) ) ; } else break ; } fp.close ( ) ; } catch ( IOException e ) { System.err.print ( e ) ; } draw_all_points ( ) ; } protected void processMouseEvent ( MouseEvent e ) { if ( e.getID ( ) == MouseEvent.MOUSE_PRESSED ) { if ( e.getX ( ) > = XLEN || e.getY ( ) > = YLEN ) return ; point p = new point ( ( double ) e.getX ( ) /XLEN , ( double ) e.getY ( ) /YLEN , current_value ) ; point_list.addElement ( p ) ; draw_point ( p ) ; } } public void paint ( Graphics g ) { // create buffer first time if ( buffer == null ) { buffer = this.createImage ( XLEN , YLEN ) ; buffer_gc = buffer.getGraphics ( ) ; buffer_gc.setColor ( colors [ 0 ] ) ; buffer_gc.fillRect ( 0,0 , XLEN , YLEN ) ; } g.drawImage ( buffer,0,0 , this ) ; } public Dimension getPreferredSize ( ) { return new Dimension ( XLEN , YLEN+50 ) ; } public void setSize ( Dimension d ) { setSize ( d.width , d.height ) ; } public void setSize ( int w , int h ) { super.setSize ( w , h ) ; XLEN = w ; YLEN = h-50 ; clear_all ( ) ; } public static void main ( String [ ] argv ) { new AppletFrame ( `` svm_toy '' , new svm_toy ( ) ,500,500+50 ) ; } } class AppletFrame extends Frame { AppletFrame ( String title , Applet applet , int width , int height ) { super ( title ) ; this.addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { System.exit ( 0 ) ; } } ) ; applet.init ( ) ; applet.setSize ( width , height ) ; applet.start ( ) ; this.add ( applet ) ; this.pack ( ) ; this.setVisible ( true ) ; } }"
"class GreetingTask : DefaultTask ( ) { @ TaskAction fun greet ( ) { println ( `` greet ! '' ) } } buildscript { repositories { mavenCentral ( ) } dependencies { classpath `` org.jetbrains.kotlin : kotlin-gradle-plugin:0.12.613 '' } } apply plugin : `` kotlin '' dependencies { compile `` org.jetbrains.kotlin : kotlin-stdlib:0.12.613 '' compile gradleApi ( ) } class GreetingTaskTest { @ Test public fun canAddTaskToProject ( ) { val project = ProjectBuilder.builder ( ) .build ( ) val task = project.task ( hashMapOf ( `` type '' to javaClass < GreetingTask > ( ) ) , `` greeting '' ) assertTrue ( task is GreetingTask ) } } java.lang.VerifyError at GreetingTaskTest.kt:20// reason - > Can not inherit from final class val task = project.task ( hashMapOf ( `` type '' to javaClass < GreetingTask > ( ) ) , `` greeting '' )"
"public void sudokuSolver ( char [ ] [ ] board ) { for ( int i = 0 ; i < board.length ; i++ ) { for ( int j = 0 ; j < board.length ; j++ ) { if ( board [ i ] [ j ] == ' . ' ) { // find the first ' . ' as root helper ( i , j , board ) ; return ; } } } } private boolean helper ( int row , int col , char [ ] [ ] board ) { // case 2. check if it has following ' . ' and store its position boolean hasNext = false ; boolean nextSearching = false ; int nextRow = row ; int nextCol = col ; for ( int i = 0 ; i < board.length ; i++ ) { for ( int j = 0 ; j < board.length ; j++ ) { if ( nextSearching & & ! hasNext & & board [ i ] [ j ] == ' . ' ) { hasNext = true ; // there is next ! nextRow = i ; nextCol = j ; } if ( i == row & & j == col ) { nextSearching = true ; } } } // exit condition : last ' . ' if ( ! hasNext ) { for ( char put = ' 1 ' ; put < = ' 9 ' ; put ++ ) { if ( isValid ( row , col , board , put ) ) { return true ; } } return false ; } // put a number and generate children for ( char put = ' 1 ' ; put < = ' 9 ' ; put ++ ) { if ( isValid ( row , col , board , put ) ) { char [ ] [ ] boardTemp = board ; boardTemp [ row ] [ col ] = put ; boolean valid = helper ( nextRow , nextCol , boardTemp ) ; if ( valid ) { // board is supposed to change only when valid is true . board [ row ] [ col ] = put ; return true ; } } } return false ; } private boolean isValid ( int row , int col , char [ ] [ ] board , char c ) { // go through each row , column , and subblock to determine if c is a valid choice based on current board . for ( int jCol = 0 ; jCol < 9 ; jCol ++ ) { if ( board [ row ] [ jCol ] == c ) { return false ; } } for ( int iRow = 0 ; iRow < 9 ; iRow ++ ) { if ( board [ iRow ] [ col ] == c ) { return false ; } } for ( int i = row/3*3 ; i < row/3*3 + 3 ; i++ ) { for ( int j = col/3*3 ; j < col/3*3 + 3 ; j++ ) { if ( board [ i ] [ j ] == c ) { return false ; } } } return true ; }"
"| -- -- -- -- -- -| -- -- -- -- -- -| -- -- -- -- -- -- | -- -- -- -- -- -- -| -- -- -- -- -- -- -|| N | Recursive | Recursive | Quick-Union | Quick-Union || ( sites ) | time | 2x Ratio | time | 2x Ratio ||===========|===========|============|=============|=============|| 196 | 35 | | 42 | || 400 | 25 | 0.71 | 44 | 1.05 || 784 | 45 | 1.80 | 46 | 1.05 || 1600 | 107 | 2.38 | 86 | 1.87 || 3136 | 48 | 0.45 | 113 | 1.31 || 6400 | 75 | 1.56 | 303 | 2.68 || 12769 | 183 | 2.44 | 858 | 2.83 || 25600 | 479 | 2.62 | 2682 | 3.13 || 51076 | 1253 | 2.62 | 8521 | 3.18 || 102400 | 4730 | 3.77 | 27256 | 3.20 || -- -- -- -- -- -| -- -- -- -- -- -| -- -- -- -- -- -- | -- -- -- -- -- -- -| -- -- -- -- -- -- -| public class PercolateRecur implements Percolation { // the site has been opened for percolation but is not connected private final int OPEN = 0 ; // the site is not open for percolation ( default state ) private final int BLOCKED = -1 ; // the matrix that will be percolated . Values default to ` BLOCKED = -1 ` // two sites that are connected together share the same value . private int [ ] [ ] matrix ; // the size of the sides of the matrix ( 1 to n ) private int size ; // whether water can flow from top to bottom of the matrix private boolean percolated ; public PercolateRecur ( int N ) { percolated = false ; size = N ; initMatrix ( ) ; } /** * initializes the matrix to default values */ private void initMatrix ( ) { matrix = new int [ size+1 ] [ size+1 ] ; // open up the top of the matrix for ( int x = 1 ; x < size+1 ; x++ ) matrix [ x ] [ 0 ] = x ; // set all values in matrix to closed for ( int x = 1 ; x < size+1 ; x++ ) for ( int y = 1 ; y < size+1 ; y++ ) matrix [ x ] [ y ] = BLOCKED ; } /** * indicates site ( x , y ) is a valid coordinate * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return boolean */ private boolean isValid ( int x , int y ) { return x > 0 & & x < size+1 & & y > 0 & & y < size+1 ; } /** * returns value of site above ( x , y ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return int value */ private int above ( int x , int y ) { if ( y < = 0 ) return BLOCKED ; else return matrix [ x ] [ y-1 ] ; } /** * returns value of site below ( x , y ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return int value */ private int below ( int x , int y ) { if ( y > = size ) return BLOCKED ; else return matrix [ x ] [ y+1 ] ; } /** * returns value of site left of ( x , y ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return int value */ private int left ( int x , int y ) { if ( x < = 0 ) return BLOCKED ; return matrix [ x-1 ] [ y ] ; } /** * returns value of site right of ( x , y ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return int value */ private int right ( int x , int y ) { if ( x > = size ) return BLOCKED ; else return matrix [ x+1 ] [ y ] ; } /** * connects ( x , y ) to open adjacent sites * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate */ private void connect ( int x , int y ) { if ( isFull ( x , y ) ) return ; if ( above ( x , y ) > OPEN ) matrix [ x ] [ y ] = above ( x , y ) ; else if ( below ( x , y ) > OPEN ) matrix [ x ] [ y ] = below ( x , y ) ; else if ( left ( x , y ) > OPEN ) matrix [ x ] [ y ] = left ( x , y ) ; else if ( right ( x , y ) > OPEN ) matrix [ x ] [ y ] = right ( x , y ) ; else if ( matrix [ x ] [ y ] == BLOCKED ) matrix [ x ] [ y ] = OPEN ; } /** * recursively connects open sites in same group as ( x , y ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate */ private void expand ( int x , int y ) { if ( ! isFull ( x , y ) ) return ; if ( above ( x , y ) == OPEN ) openWith ( x , y-1 , matrix [ x ] [ y ] ) ; if ( below ( x , y ) == OPEN ) openWith ( x , y+1 , matrix [ x ] [ y ] ) ; if ( left ( x , y ) == OPEN ) openWith ( x-1 , y , matrix [ x ] [ y ] ) ; if ( right ( x , y ) == OPEN ) openWith ( x+1 , y , matrix [ x ] [ y ] ) ; } /** * opens a site ( x , y ) on the matrix * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate */ public void open ( int x , int y ) { if ( percolated || ! isValid ( x , y ) ) return ; connect ( x , y ) ; expand ( x , y ) ; } /** * opens a site with given value * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ param val value of point */ private void openWith ( int x , int y , int val ) { matrix [ x ] [ y ] = val ; open ( x , y ) ; } /** * Returns whether site ( x , y ) is open * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return true if not blocked */ public boolean isOpen ( int x , int y ) { return matrix [ x ] [ y ] > BLOCKED ; } /** * Returns whether site ( x , y ) is full ( connected to the top ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return true if is full */ public boolean isFull ( int x , int y ) { return matrix [ x ] [ y ] > OPEN ; } /** * indicates whether site is blocked ( not open ) * @ param x x-portion of x/y coordinate * @ param y y-portion of x/y coordinate * @ return true if blocked */ public boolean isBlocked ( int x , int y ) { return matrix [ x ] [ y ] == BLOCKED ; } /** * indicates whether water can flow from top to bottom of matrix * @ return true if matrix is percolated */ public boolean percolates ( ) { for ( int x = 1 ; x < = size ; x++ ) if ( matrix [ x ] [ size ] > OPEN ) percolated = true ; return percolated ; } /** * prints the matrix to the command line */ public void print ( ) { for ( int y = 1 ; y < size+1 ; y++ ) { System.out.println ( ) ; for ( int x = 1 ; x < size+1 ; x++ ) { if ( matrix [ x ] [ y ] == BLOCKED ) System.out.print ( `` XX `` ) ; else if ( matrix [ x ] [ y ] < 10 ) System.out.print ( matrix [ x ] [ y ] + `` `` ) ; else System.out.print ( matrix [ x ] [ y ] + `` `` ) ; } } System.out.println ( ) ; } }"
"package com.leak ; import android.app.Activity ; import android.app.ProgressDialog ; import android.os.AsyncTask ; import android.os.Bundle ; public class WindowLeakActivity extends Activity { @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; new LeakThread ( ) .execute ( ) ; } class LeakThread extends AsyncTask < Void , Void , Void > { ProgressDialog dialog ; @ Override protected void onPreExecute ( ) { dialog=new ProgressDialog ( WindowLeakActivity.this ) ; dialog.show ( ) ; } @ Override protected Void doInBackground ( Void ... params ) { try { Thread.sleep ( 2000 ) ; finish ( ) ; Thread.sleep ( 2000 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } return null ; } @ Override protected void onPostExecute ( Void result ) { //that would be ok if ( WindowLeakActivity.this ! =null & & ! WindowLeakActivity.this.isFinishing ( ) ) dialog.dismiss ( ) ; } } }"
abstract class A { public void m1 ( ) { //do stuff } public void m2 ( ) { //do stuff } // +30 more non abstract methodspublic abstract void n1 ( ) ; public abstract void n2 ( ) ; // +30 more abstract method } abstract class B { public void a1 ( ) { //do stuff } public void a2 ( ) { //do stuff } // +30 more non abstract methodspublic abstract void b1 ( ) ; public abstract void b2 ( ) ; // +30 more abstract method } class C extends A { public void n1 ( ) { //do stuff } public void n2 ( ) { //do stuff } //+30 more abstract methods implemented//But here i want all the non abstract methods and only 10 abstract methods of B }
Class c = ClassLoader.getSystemClassLoader ( ) .loadClass ( name ) ; Class type = this.getClass ( ) .getClassLoader ( ) .loadClass ( name ) ; Object obj = type.newInstance ( ) ;
"String [ ] tab1 = { `` AF '' , '' HB , '' ER '' } String [ ] tab2 = { `` AF '' , '' HB , '' ER '' , '' HO '' , '' NF '' , '' BB '' , '' CD '' , '' PO '' }"
"package com.mycompany.myapp.dao ; import java.io.Serializable ; interface BaseDao < T , Id extends Serializable > { public void create ( T t ) ; public T readById ( Id id ) ; public void update ( T t ) ; public void delete ( T t ) ; } package com.mycompany.myapp.dao.jpa ; import java.io.Serializable ; public class BaseDaoJpa < T , Id extends Serializable > implements BaseDao < T , Id > { ... }"
"public class QueueLinearFloodFiller { protected Bitmap image = null ; protected int [ ] tolerance = new int [ ] { 0 , 0 , 0 } ; protected int width = 0 ; protected int height = 0 ; protected int [ ] pixels = null ; protected int fillColor = 0 ; protected int [ ] startColor = new int [ ] { 0 , 0 , 0 } ; protected boolean [ ] pixelsChecked ; protected Queue < FloodFillRange > ranges ; // Construct using an image and a copy will be made to fill into , // Construct with BufferedImage and flood fill will write directly to// provided BufferedImagepublic QueueLinearFloodFiller ( Bitmap img ) { copyImage ( img ) ; } public QueueLinearFloodFiller ( Bitmap img , int targetColor , int newColor ) { useImage ( img ) ; setFillColor ( newColor ) ; setTargetColor ( targetColor ) ; } public void setTargetColor ( int targetColor ) { startColor [ 0 ] = Color.red ( targetColor ) ; startColor [ 1 ] = Color.green ( targetColor ) ; startColor [ 2 ] = Color.blue ( targetColor ) ; } public int getFillColor ( ) { return fillColor ; } public void setFillColor ( int value ) { fillColor = value ; } public int [ ] getTolerance ( ) { return tolerance ; } public void setTolerance ( int [ ] value ) { tolerance = value ; } public void setTolerance ( int value ) { tolerance = new int [ ] { value , value , value } ; } public Bitmap getImage ( ) { return image ; } public void copyImage ( Bitmap img ) { // Copy data from provided Image to a BufferedImage to write flood fill // to , use getImage to retrieve // cache data in member variables to decrease overhead of property calls width = img.getWidth ( ) ; height = img.getHeight ( ) ; image = Bitmap.createBitmap ( width , height , Bitmap.Config.RGB_565 ) ; Canvas canvas = new Canvas ( image ) ; canvas.drawBitmap ( img , 0 , 0 , null ) ; pixels = new int [ width * height ] ; image.getPixels ( pixels , 0 , width , 1 , 1 , width - 1 , height - 1 ) ; } public void useImage ( Bitmap img ) { // Use a pre-existing provided BufferedImage and write directly to it // cache data in member variables to decrease overhead of property calls width = img.getWidth ( ) ; height = img.getHeight ( ) ; image = img ; pixels = new int [ width * height ] ; image.getPixels ( pixels , 0 , width , 1 , 1 , width - 1 , height - 1 ) ; } protected void prepare ( ) { // Called before starting flood-fill pixelsChecked = new boolean [ pixels.length ] ; ranges = new LinkedList < > ( ) ; } // Fills the specified point on the bitmap with the currently selected fill// color.// int x , int y : The starting coords for the fillpublic void floodFill ( int x , int y ) { // Setup prepare ( ) ; if ( startColor [ 0 ] == 0 ) { // ***Get starting color . int startPixel = pixels [ ( width * y ) + x ] ; startColor [ 0 ] = ( startPixel > > 16 ) & 0xff ; startColor [ 1 ] = ( startPixel > > 8 ) & 0xff ; startColor [ 2 ] = startPixel & 0xff ; } // ***Do first call to floodfill . LinearFill ( x , y ) ; // ***Call floodfill routine while floodfill ranges still exist on the // queue FloodFillRange range ; while ( ranges.size ( ) > 0 ) { // **Get Next Range Off the Queue range = ranges.remove ( ) ; // **Check Above and Below Each Pixel in the Floodfill Range int downPxIdx = ( width * ( range.Y + 1 ) ) + range.startX ; int upPxIdx = ( width * ( range.Y - 1 ) ) + range.startX ; int upY = range.Y - 1 ; // so we can pass the y coord by ref int downY = range.Y + 1 ; for ( int i = range.startX ; i < = range.endX ; i++ ) { // *Start Fill Upwards // if we 're not above the top of the bitmap and the pixel above // this one is within the color tolerance if ( range.Y > 0 & & ( ! pixelsChecked [ upPxIdx ] ) & & CheckPixel ( upPxIdx ) ) LinearFill ( i , upY ) ; // *Start Fill Downwards // if we 're not below the bottom of the bitmap and the pixel // below this one is within the color tolerance if ( range.Y < ( height - 1 ) & & ( ! pixelsChecked [ downPxIdx ] ) & & CheckPixel ( downPxIdx ) ) LinearFill ( i , downY ) ; downPxIdx++ ; upPxIdx++ ; } } image.setPixels ( pixels , 0 , width , 1 , 1 , width - 1 , height - 1 ) ; } // Finds the furthermost left and right boundaries of the fill area// on a given y coordinate , starting from a given x coordinate , filling as// it goes.// Adds the resulting horizontal range to the queue of floodfill ranges , // to be processed in the main loop.// int x , int y : The starting coordsprotected void LinearFill ( int x , int y ) { // ***Find Left Edge of Color Area int lFillLoc = x ; // the location to check/fill on the left int pxIdx = ( width * y ) + x ; while ( true ) { // **fill with the color pixels [ pxIdx ] = fillColor ; // **indicate that this pixel has already been checked and filled pixelsChecked [ pxIdx ] = true ; // **de-increment lFillLoc -- ; // de-increment counter pxIdx -- ; // de-increment pixel index // **exit loop if we 're at edge of bitmap or color area if ( lFillLoc < 0 || ( pixelsChecked [ pxIdx ] ) || ! CheckPixel ( pxIdx ) ) { break ; } } lFillLoc++ ; // ***Find Right Edge of Color Area int rFillLoc = x ; // the location to check/fill on the left pxIdx = ( width * y ) + x ; while ( true ) { // **fill with the color pixels [ pxIdx ] = fillColor ; // **indicate that this pixel has already been checked and filled pixelsChecked [ pxIdx ] = true ; // **increment rFillLoc++ ; // increment counter pxIdx++ ; // increment pixel index // **exit loop if we 're at edge of bitmap or color area if ( rFillLoc > = width || pixelsChecked [ pxIdx ] || ! CheckPixel ( pxIdx ) ) { break ; } } rFillLoc -- ; // add range to queue FloodFillRange r = new FloodFillRange ( lFillLoc , rFillLoc , y ) ; ranges.offer ( r ) ; } // Sees if a pixel is within the color tolerance range.protected boolean CheckPixel ( int px ) { int red = ( pixels [ px ] > > > 16 ) & 0xff ; int green = ( pixels [ px ] > > > 8 ) & 0xff ; int blue = pixels [ px ] & 0xff ; return ( red > = ( startColor [ 0 ] - tolerance [ 0 ] ) & & red < = ( startColor [ 0 ] + tolerance [ 0 ] ) & & green > = ( startColor [ 1 ] - tolerance [ 1 ] ) & & green < = ( startColor [ 1 ] + tolerance [ 1 ] ) & & blue > = ( startColor [ 2 ] - tolerance [ 2 ] ) & & blue < = ( startColor [ 2 ] + tolerance [ 2 ] ) ) ; } // Represents a linear range to be filled and branched from.protected class FloodFillRange { public int startX ; public int endX ; public int Y ; public FloodFillRange ( int startX , int endX , int y ) { this.startX = startX ; this.endX = endX ; this.Y = y ; } } filler.setTolerance ( 150 ) ; imagen.setOnTouchListener ( new View.OnTouchListener ( ) { @ Override public boolean onTouch ( View view , MotionEvent motionEvent ) { int x = ( int ) motionEvent.getX ( ) ; int y = ( int ) motionEvent.getY ( ) ; filler.prepare ( ) ; filler.floodFill ( x , y ) ; imagen.setImageBitmap ( filler.getImage ( ) ) ; return false ; } } ) ;"
"import java.lang.Math ; public class RoundExample { public static void main ( String [ ] args ) { System.out.println ( String.format ( `` % 10.8f '' ,0.644696875 ) ) ; } } # include < stdio.h > int main ( ) { printf ( `` % 10.8f '' , 0.644696875 ) ; //double to string return 0 ; }"
`` RMI TCP Connection ... .. '' daemon prio=3 tid=0x0000000106f12000 nid=0x1e10 runnable [ 0xfffffffe48dfe000 ]
public class MySubscriber < T > implements Subscriber < T > { private Subscription subscription ; @ Override public void onSubscribe ( Subscription subscription ) { this.subscription = subscription ; subscription.request ( 1 ) ; //a value of Long.MAX_VALUE may be considered as effectively unbounded } @ Override public void onNext ( T item ) { System.out.println ( `` Got : `` + item ) ; subscription.request ( 1 ) ; //a value of Long.MAX_VALUE may be considered as effectively unbounded }
"< data > < employee id=\ '' 1\ '' > < name value=\ '' vA-12\ '' > A < /name > < title id=\ '' 2\ '' > Manager < /title > < /employee > < employee id=\ '' 2\ '' > < name value=\ '' vC-12\ '' > C < /name > < title id=\ '' 2\ '' > Manager < /title > < /employee > < employee id=\ '' 2\ '' > < name value=\ '' vB-12\ '' > B < /name > < title id=\ '' 2\ '' > Manager < /title > < /employee > < /data > for $ x in /data/employee where $ x/ @ id= $ x/title/ @ id and [ fn : starts-with ( $ x/name/ @ value , vC ) ] return data ( $ x/name ) Error on line 1 column 55 XPST0003 XQuery syntax error near # ... /title/ @ id and [ fn : starts-with # : Unexpected token `` [ `` in path expressionnet.sf.saxon.s9api.SaxonApiException : Unexpected token `` [ `` in path expression at net.sf.saxon.s9api.XQueryCompiler.compile ( XQueryCompiler.java:544 ) at Xml.process ( Xml.java:46 ) at Xml.main ( Xml.java:30 ) Caused by : net.sf.saxon.trans.XPathException : Unexpected token `` [ `` in path expression at net.sf.saxon.query.XQueryParser.grumble ( XQueryParser.java:479 ) at net.sf.saxon.expr.parser.XPathParser.grumble ( XPathParser.java:221 )"
"Toolkit.getDefaultToolkit ( ) .addAWTEventListener ( new MyAWTEventListener ( ) , AWTEvent.MOUSE_MOTION_EVENT_MASK ) ; while ( true ) { Thread.sleep ( 1 ) ; } private void queuePushingExperiment ( ) throws InterruptedException , InvocationTargetException { EventQueue queue = Toolkit.getDefaultToolkit ( ) .getSystemEventQueue ( ) ; queue.push ( new MyEventQueue ( ) ) ; EventQueue.invokeAndWait ( new Runnable ( ) { @ Override public void run ( ) { System.out.println ( `` run '' ) ; } } ) ; } public class MyEventQueue extends EventQueue { @ Override public SecondaryLoop createSecondaryLoop ( ) { System.out.println ( `` createSecondaryLoop '' ) ; return super.createSecondaryLoop ( ) ; } @ Override protected void dispatchEvent ( AWTEvent event ) { System.out.println ( `` dispatchEvent '' ) ; super.dispatchEvent ( event ) ; } @ Override public AWTEvent getNextEvent ( ) throws InterruptedException { System.out.println ( `` getNextEvent '' ) ; return super.getNextEvent ( ) ; } @ Override public AWTEvent peekEvent ( ) { System.out.println ( `` peekEvent '' ) ; return super.peekEvent ( ) ; } @ Override public AWTEvent peekEvent ( int id ) { System.out.println ( `` peekEvent '' ) ; return super.peekEvent ( id ) ; } @ Override protected void pop ( ) throws EmptyStackException { System.out.println ( `` pop '' ) ; super.pop ( ) ; } @ Override public void postEvent ( AWTEvent theEvent ) { System.out.println ( `` postEvent '' ) ; super.postEvent ( theEvent ) ; } @ Override public void push ( EventQueue newEventQueue ) { System.out.println ( `` push '' ) ; super.push ( newEventQueue ) ; } }"
"public static void printOut ( int [ ] arr ) { Map < Integer , Integer > hm=new HashMap < Integer , Integer > ( ) ; for ( int num : arr ) { if ( hm.containsKey ( num ) ) { hm.put ( num , hm.get ( num ) +1 ) ; } else { hm.put ( num,1 ) ; } } for ( Map.Entry < Integer , Integer > entry : hm.entrySet ( ) ) { System.out.println ( `` Key= `` +entry.getKey ( ) + '' Value= `` +entry.getValue ( ) ) ; } } Key= 6 Value= 3Key= 9 Value= 3Key= 3 Value= 1 Key= 3 Value= 1Key= 6 Value= 3Key= 9 Value= 3"
"public static void main ( final String ... args ) throws IOException { final Map < String , String > map = Collections.singletonMap ( `` create '' , `` true '' ) ; final Path zipfile = Paths.get ( `` /tmp/foo.zip '' ) ; Files.deleteIfExists ( zipfile ) ; final URI uri = URI.create ( `` jar : '' + zipfile.toUri ( ) ) ; final ObjectMapper mapper = new ObjectMapper ( ) ; try ( final FileSystem zipfs = FileSystems.newFileSystem ( uri , map ) ; final OutputStream out = Files.newOutputStream ( zipfs.getPath ( `` /t.json '' ) ) ; ) { mapper.writeValue ( out , `` hello '' ) ; } } $ unzip /tmp/foo.zip Archive : /tmp/foo.zipreplace t.json ? [ y ] es , [ n ] o , [ A ] ll , [ N ] one , [ r ] ename : A inflating : t.json error : invalid compressed data to inflate"
"class Fraction { ... /** Invert current fraction */ public Fraction inverse ( ) { return new Fraction ( den , num ) ; } ... } 0 new # 1 < xyzTestes/system/fraction/Fraction > 3 dup 4 aload_0 5 getfield # 16 < xyzTestes/system/fraction/Fraction.den > 8 aload_0 9 getfield # 14 < xyzTestes/system/fraction/Fraction.num > 12 invokespecial # 27 < xyzTestes/system/fraction/Fraction. < init > > 15 areturn new # 1 < xyzTestes/system/fraction/Fraction > aload_0 getfield # 16 < xyzTestes/system/fraction/Fraction.den > aload_0 getfield # 14 < xyzTestes/system/fraction/Fraction.num > invokespecial # 27 < xyzTestes/system/fraction/Fraction. < init > > areturn"
foo/ /foo.jar /libfoo.so - > libfoo.so.1.0 /libfoo.so.1.0
"import static java.lang.Math.cbrt ; import static java.lang.Math.pow ; import static java.lang.Math.sqrt ; ... public static double heart ( double xi , double yi ) { double x = xi ; double y = -yi ; double temp = 5739562800L * pow ( y , 3 ) + 109051693200L * pow ( x , 2 ) * pow ( y , 3 ) - 5739562800L * pow ( y , 5 ) ; double temp1 = -244019119519584000L * pow ( y , 9 ) + pow ( temp , 2 ) ; // if ( temp1 < 0 ) { return -1 ; // this is one possible out of bounds location // this spot is the location of the problem } // double temp2 = sqrt ( temp1 ) ; double temp3 = cbrt ( temp + temp2 ) ; if ( temp3 ! = 0 ) { double part1 = ( 36 * cbrt ( 2 ) * pow ( y , 3 ) ) / temp3 ; double part2 = 1 / ( 10935 * cbrt ( 2 ) ) * temp3 ; double looseparts = 4.0 / 9 - 4.0 / 9 * pow ( x , 2 ) - 4.0 / 9 * pow ( y , 2 ) ; double sqrt_body = looseparts + part1 + part2 ; if ( sqrt_body > = 0 ) { return sqrt ( sqrt_body ) ; } else { return -1 ; // this works ; returns -1 if we are outside the heart } } else { // through trial and error , I discovered that this should // be an ellipse ( or that it is close enough ) return Math.sqrt ( Math.pow ( 2.0 / 3 , 2 ) * ( 1 - Math.pow ( x , 2 ) ) ) ; } } if ( temp1 < 0 ) { return -1 ; // this is one possible out of bounds location // this spot is the location of the problem } import java.awt.image.BufferedImage ; import java.io.File ; import java.io.IOException ; import javax.imageio.ImageIO ; import static java.lang.Math.cbrt ; import static java.lang.Math.pow ; import static java.lang.Math.sqrt ; public class Heart { public static double scale ( int x , int range , double l , double r ) { double width = r - l ; return ( double ) x / ( range - 1 ) * width + l ; } public static void main ( String [ ] args ) throws IOException { BufferedImage img = new BufferedImage ( 1000 , 1000 , BufferedImage.TYPE_INT_RGB ) ; // this is actually larger than the max heart value final double max_heart = 0.679 ; double max = 0.0 ; for ( int x = 0 ; x < img.getWidth ( ) ; x++ ) { for ( int y = 0 ; y < img.getHeight ( ) ; y++ ) { double xv = scale ( x , img.getWidth ( ) , -1.2 , 1.2 ) ; double yv = scale ( y , img.getHeight ( ) , -1.3 , 1 ) ; double heart = heart ( xv , yv ) ; //this is n't an accident // yes I do n't check for the return of -1 , but still // the -1 values return a nice shade of pink : 0xFFADAD // None of the other values should be negative , as I did // step through from -1000 to 1000 in python , and there // were no negatives that were not -1 int r = 0xFF ; int gb = ( int ) ( 0xFF * ( max_heart - heart ) ) ; int rgb = ( r < < 16 ) | ( gb < < 8 ) | gb ; img.setRGB ( x , y , rgb ) ; } } ImageIO.write ( img , `` png '' , new File ( `` location '' ) ) ; } // heart function clipped ; it belongs here }"
"import java.awt . * ; import javax.swing . * ; public class GUITest extends JFrame { public GUITest ( ) { super ( `` Testing Title '' ) ; Container pane = getContentPane ( ) ; pane.setLayout ( new GridLayout ( 3,1 ) ) ; pane.add ( getHeader ( ) ) ; pane.add ( getTextArea ( ) ) ; pane.add ( getButtonPanel ( ) ) ; } public JComponent getHeader ( ) { JPanel labelPanel = new JPanel ( ) ; labelPanel.setLayout ( new GridLayout ( 1,2 ) ) ; labelPanel.setSize ( getPreferredSize ( ) ) ; JLabel labelLocal = new JLabel ( `` Left value : `` , JLabel.CENTER ) ; JLabel labelDB = new JLabel ( `` Right value : `` , JLabel.CENTER ) ; labelPanel.add ( labelLocal ) ; labelPanel.add ( labelDB ) ; return labelPanel ; } public JComponent getTextArea ( ) { JPanel textPanel = new JPanel ( ) ; textPanel.setLayout ( new GridLayout ( 1,2,5,0 ) ) ; JTextArea testTextArea = new JTextArea ( ) ; testTextArea.setEditable ( false ) ; JScrollPane sp1 = new JScrollPane ( testTextArea ) ; JTextArea testTextArea2 = new JTextArea ( ) ; JScrollPane sp2 = new JScrollPane ( testTextArea2 ) ; testTextArea2.setEditable ( false ) ; testTextArea.setText ( `` Hello Hello Hello\nTesting ! \ntesterino\ntesteroni '' ) ; testTextArea2.setText ( `` Hello Hello Hello\nTesting ! \ntest\nABC123\ncdef123\nhijk123 '' ) ; textPanel.add ( sp1 ) ; textPanel.add ( sp2 ) ; return textPanel ; } public JComponent getButtonPanel ( ) { JPanel inner = new JPanel ( ) ; inner.setLayout ( new FlowLayout ( ( FlowLayout.CENTER ) ,0,100 ) ) ; inner.add ( new JButton ( `` Do something '' ) ) ; inner.add ( new JButton ( `` Do something different '' ) ) ; inner.add ( new JButton ( `` Do something even more different '' ) ) ; return inner ; } public static void main ( String [ ] args ) { GUITest e = new GUITest ( ) ; e.setSize ( 700 , 500 ) ; e.setVisible ( true ) ; e.setResizable ( false ) ; e.setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; e.setLocationRelativeTo ( null ) ; } }"
"private void readNumber ( Token t ) { t.str = `` '' + ch ; // force conversion char -- > String final Pattern pattern = Pattern.compile ( `` [ 0-9 ] * '' ) ; nextCh ( ) ; // get next char and check if it is a digit Matcher match = pattern.matcher ( `` '' + ch ) ; while ( match.find ( ) & & ch ! = EOF ) { t.str += ch ; nextCh ( ) ; match = pattern.matcher ( `` '' + ch ) ; } t.kind = Kind.number ; try { int value = Integer.parseInt ( t.str ) ; t.val = value ; } catch ( NumberFormatException e ) { error ( t , Message.BIG_NUM , t.str ) ; } t.str = `` '' + ch ; nextCh ( ) ; // get next char and check if it is a number while ( ch > = ' 0 ' & & ch < = ' 9 ' ) { t.str += ch ; nextCh ( ) ; } t.kind = Kind.number ; try { int value = Integer.parseInt ( t.str ) ; t.val = value ; } catch ( NumberFormatException e ) { error ( t , Message.BIG_NUM , t.str ) ; }"
"< html > < head > < title > An example HTMLDocument < /title > < style type= '' text/css '' > div { background-color : silver ; } ul { color : red ; } < /style > < /head > < body > < div id= '' BOX '' > < p > Paragraph 1 < /p > < p > Paragraph 2 < /p > < /div > < /body > < /html > import java.io.StringReader ; import javax.swing.text.Element ; import javax.swing.text.html . * ; public class Test { public static void main ( String [ ] args ) throws Exception { String html = `` < html > \n '' + `` < head > \n '' + `` < title > An example HTMLDocument < /title > \n '' + `` < style type=\ '' text/css\ '' > \n '' + `` div { background-color : silver ; } \n '' + `` ul { color : red ; } \n '' + `` < /style > \n '' + `` < /head > \n '' + `` < body > \n '' + `` < div id=\ '' BOX\ '' > \n '' + `` < p > Paragraph 1 < /p > \n '' + `` < p > Paragraph 2 < /p > \n '' + `` < /div > \n '' + `` < /body > \n '' + `` < /html > \n '' ; HTMLEditorKit htmlKit = new HTMLEditorKit ( ) ; HTMLDocument doc = ( HTMLDocument ) htmlKit.createDefaultDocument ( ) ; htmlKit.read ( new StringReader ( html ) , doc , 0 ) ; System.out.println ( `` doc length : `` + doc.getLength ( ) ) ; String text = doc.getText ( 0 , doc.getLength ( ) ) ; System.out.println ( `` doc text , surrounded by quotes , with newlines replaced with / : \ '' '' + text.replace ( '\n ' , '/ ' ) + `` \ '' '' ) ; Element element = doc.getDefaultRootElement ( ) .getElement ( 1 ) ; System.out.println ( `` element name : `` + element.getName ( ) ) ; int offset = element.getStartOffset ( ) ; System.out.println ( `` offset of body : `` + offset ) ; } } doc length : 26doc text , surrounded by quotes , with newlines replaced with / : `` /Paragraph 1/Paragraph 2 '' element name : bodyoffset of body : 3"
for ( int i = 0 ; i < n ; i++ ) for ( int j=0 ; j < n ; j++ ) int sum = 0 ; for ( int i = 1 ; i < = n ; i++ ) for ( int j = n ; j > 0 ; j /= 2 ) sum++ ;
Supplier < String > constantHello = ( ) - > `` Hello '' ; long count = Stream. < CharSequence > generate ( constantHello ) .count ( ) ;
private final String [ ] okFileExtensions = new String [ ] { `` csv '' } ;
"public class TestOverride { int foo ( ) { return -1 ; } } class B extends TestOverride { @ Override int foo ( ) { // error - quick fix to add `` return super.foo ( ) ; '' } } if ( selectedNode instanceof MethodDeclaration ) { ASTNode type = selectedNode.getParent ( ) ; if ( type instanceof TypeDeclaration ) { ASTNode parentClass = ( ( TypeDeclaration ) type ) .getSuperclassType ( ) ; } } for ( IMethodBinding parentMethodBinding : superClassBinding.getDeclaredMethods ( ) ) { if ( methodBinding.overrides ( parentMethodBinding ) ) { ReturnStatement rs = ast.newReturnStatement ( ) ; SuperMethodInvocation smi = ast.newSuperMethodInvocation ( ) ; rs.setExpression ( smi ) ; Block oldBody = methodDecl.getBody ( ) ; ListRewrite listRewrite = rewriter.getListRewrite ( oldBody , Block.STATEMENTS_PROPERTY ) ; listRewrite.insertFirst ( rs , null ) ; }"
action.accept ( arg1 ) ; action.accept ( arg2 ) ; return true ; // deque is a Deque < Iterator < T > > @ Overridepublic boolean tryAdvance ( final Consumer < ? super T > action ) { Iterator < T > iterator ; T element ; while ( ! deque.isEmpty ( ) ) { iterator = deque.removeFirst ( ) ; while ( iterator.hasNext ( ) ) { element = iterator.next ( ) ; deque.add ( fn.apply ( element ) ) ; action.accept ( element ) ; } } return false ; }
"AbstractDevice myDevice = null ; for ( AbstractDevice device : session.getWorkplace ( ) .getDevices ( ) ) { if ( device.getPluginconfig ( ) .getPluginType ( ) .getId ( ) == 1 ) { myDevice = device ; } } myDevice = session.getWorkplace ( ) .getDevices ( ) .stream ( ) .filter ( s - > s.getPluginconfig ( ) .getPluginType ( ) .getId ( ) == 1 ) .findFirst ( ) .get ( ) ; List < AbstractDevice > testList = session.getWorkplace ( ) .getDevices ( ) .stream ( ) .collect ( Collectors.toList ( ) ) ; @ ManyToMany ( cascade = { CascadeType.PERSIST , CascadeType.MERGE , CascadeType.REFRESH } ) @ JoinTable ( name = `` Workplace_AbstractDevice '' , joinColumns = { @ JoinColumn ( name = `` Workplace '' , referencedColumnName = `` ID '' ) } , inverseJoinColumns = { @ JoinColumn ( name = `` AbstractDevice '' , referencedColumnName = `` ID '' ) } ) @ OrderColumnprivate List < AbstractDevice > devices = new ArrayList < AbstractDevice > ( ) ; public List < AbstractDevice > getDevices ( ) { return devices ; }"
< S2SDDDnf : FIToFICstmrDrctDbt xmlns= '' urn : iso : std : iso:20022 : tech : xsd : pacs.003.001.02 '' > < GrpHdr > < MsgId > DDA160802AASW006543 < /MsgId > < /GrpHdr > < /S2SDDDnf : FIToFICstmrDrctDbt > public static void main ( String [ ] args ) { XmlOptions xmlOptions = new XmlOptions ( ) ; xmlOptions.setUseDefaultNamespace ( ) ; xmlOptions.setSavePrettyPrint ( ) ; Document doc ; try { doc = Document.Factory.parse ( new File ( `` data_samples/LON_20160208.xml '' ) ) ; String messageId = doc.getFIToFICstmrDrctDbt ( ) .getGrpHdr ( ) .getMsgId ( ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( XmlException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } }
public static final Comparator < BaseExample > sortByLevel_DESC = new Comparator < NavItemBase > ( ) { ... } ; List < Example > examples = new ArrayList < Example > ( ) ; examples.sort ( sortByLevel_DESC ) ; examples.stream ( ) .filter ( e - > e.active ( ) ) .collect ( Collectors.toList ( ) ) ;
"public class State implements Serializable { List < AbstractCar > cars = new ArrayList < > ( ) ; List < AbstractPlane > planes = new ArrayList < > ( ) ; // other objects similar to AbstractPlane as shown below } public abstract class AbstractPlane implements Serializable { long serialNumber ; } public class PropellorPlane extends AbstractPlane { int propellors ; } public class EnginePlane extends AbstractPlane { List < Engine > engines = new ArrayList < > ( ) ; // Engine is another pojo } // etc . public abstract class AbstractCar implements Serializable { long serialNumber ; abstract CarData getData ( ) ; abstract void operate ( int condition ) ; abstract class CarData { String type ; int year ; } } public class Car1 extends AbstractCar { @ Inject Car1Manager manager ; Car1Data data = new Car1Data ( ) ; // ( getter exists per superclass requirement ) void operate ( int i ) { // logic looks weird but makes the example if ( i < 0 ) return manager.operate ( data ) ; else if ( i > 1 ) return manager.operate ( data , i ) ; } class Car1Data extends CarData { int property1 ; { type = `` car1 '' ; year = 1 ; } } } public class Car2 extends AbstractCar { @ Inject Car2Manager manager ; Car2Data data = new Car2Data ( ) ; void operate ( int i ) { if ( i < 31 ) return manager.operate ( data ) ; } class Car2Data extends CarData { char property2 ; { type = `` car2 '' ; year = 12 ; } } } // etc ."
T getFoo ( ) { if ( this.foo == null ) { this.foo = createFoo ( ) // createFoo is always thread safe . } return this.foo ; }
public interface I < E > { public int interfaceMethod ( E s ) ; } public class A < T > implements I < T > { private T val ; public A ( T x ) { val = x ; } public int interfaceMethod ( T val ) { // looks like T should be of the same type as instance variable 'val ' return 0 ; } } public class Run { public static void main ( String [ ] args ) { A a = new A < String > ( `` hello '' ) ; System.out.println ( a.interfaceMethod ( 100 ) ) ; \\ returns 0 } }
"public class Numbers { public static int numbers ( int stock ) { int [ ] t = new int [ 10 ] ; for ( int k = 1 ; ; k++ ) { int x = k ; while ( x > 0 ) { if ( t [ x % 10 ] == stock ) return k-1 ; t [ x % 10 ] ++ ; x /= 10 ; } } } public static void main ( String [ ] args ) { System.out.println ( numbers ( 4 ) ) ; } } 9 9 9 9^ ^ ^ ^^ ^ ^ roof ( 9999 / 10^1 ) * 10^0 = 1000^ ^ roof ( 9999 / 10^2 ) * 10^1 = 1000^ roof ( 9999 / 10^3 ) * 10^2 = 1000roof ( 9999 / 10^4 ) * 10^3 = 1000 2 5 6^ ^ ^^ ^ roof ( 256 / 10^1 ) * 10^0 = 26^ roof ( 256 / 10^2 ) * 10^1 = 30roof ( 256 / 10^3 ) * 10^2 = 100 sum = C ( n , d ) if D ( n , d ) is 1 : for each k < d , k > = 0 : sum -= ( 9 - D ( n , k ) ) * 10^ ( k-1 ) ; else if D ( n , d ) is 0 : sum -= 10^ ( d-1 )"
enum IDs { ID { @ Override void getId ( ) { w ( ) ; // warning here } } ; void getId ( ) { } private static void w ( ) { } }
"int a , b , c ; a = 2111000333 ; b = 1000222333 ; c = a + b ; System.out.println ( `` c= `` + c ) ;"
"public class UserMeal { private final LocalDateTime dateTime ; private final int calories ; public UserMeal ( LocalDateTime dateTime , int calories ) { this.dateTime = dateTime ; this.calories = calories ; } public LocalDateTime getDateTime ( ) { return dateTime ; } public int getCalories ( ) { return calories ; } } items.stream ( ) .collect ( Collectors.toMap ( ... ) ) ; Map < LocalDate , Integer > values = mealList.stream ( ) .collect ( Collectors.toMap ( m- > m.getDateTime ( ) .toLocalDate ( ) , m- > { /* HUH ? */ } ) ) ;"
"< jsp : include page= '' /WEB-INF/jsp/elements/dataview.jspx '' > < jsp : param name= '' customParameter '' value= '' { id : $ { object.id } , action : \ ' $ { action } \ ' } '' / > < /jsp : include > < script type= '' text/javascript '' > var customParameter = ' $ { param.customParameter } ' ; < /script > var customParameter = ' { id:4 , action : \'add\ ' } ' ; var customParameter = ' { id:4 , action : \ & # 039 ; add\ & # 039 ; } ' ;"
"import com.google.api.client.auth.oauth2.Credential ; import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp ; import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver ; import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver.Builder ; import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow ; import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets ; import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport ; import com.google.api.client.http.HttpTransport ; import com.google.api.client.json.JsonFactory ; import com.google.api.client.json.jackson2.JacksonFactory ; import com.google.api.client.util.store.FileDataStoreFactory ; import com.google.api.services.sheets.v4.Sheets ; import com.google.api.services.sheets.v4.SheetsScopes ; import com.google.api.services.sheets.v4.model.AppendValuesResponse ; import com.google.api.services.sheets.v4.model.ValueRange ; @ Servicepublic class GoogleSheetsServiceImpl implements GoogleSheetsService { private static final Log LOGGER = LogFactory.getLog ( GoogleSheetsServiceImpl.class ) ; /** Application name . */ @ Value ( `` $ { google-sheets.application-name } '' ) private String applicationName ; /** Directory to store user credentials for this application . */ private static final java.io.File DATA_STORE_DIR = new java.io.File ( System.getProperty ( `` user.home '' ) , `` .credentials/sheets.googleapis.com-orders '' ) ; /** Global instance of the { @ link FileDataStoreFactory } . */ private FileDataStoreFactory dataStoreFactory ; /** Global instance of the JSON factory . */ private JsonFactory jsonFactory ; /** Global instance of the HTTP transport . */ private HttpTransport httpTransport ; /** * Global instance of the scopes required by this quickstart . * * If modifying these scopes , delete your previously saved credentials at * ~/.credentials/sheets.googleapis.com-java-quickstart */ private List < String > scopes ; /** Sheet service . */ private Sheets sheetsService ; public GoogleSheetsServiceImpl ( ) throws Throwable { // init try { this.jsonFactory = JacksonFactory.getDefaultInstance ( ) ; this.scopes = Arrays.asList ( SheetsScopes.SPREADSHEETS ) ; this.httpTransport = GoogleNetHttpTransport.newTrustedTransport ( ) ; this.dataStoreFactory = new FileDataStoreFactory ( DATA_STORE_DIR ) ; } catch ( Throwable t ) { LOGGER.error ( `` Error on init Google Sheets Service : `` + t.getMessage ( ) ) ; throw t ; } // get sheet service Credential credential = this.authorize ( ) ; this.sheetsService = new Sheets.Builder ( this.httpTransport , this.jsonFactory , credential ) .setApplicationName ( this.applicationName ) .build ( ) ; } public void appendValueRangeToGoogleSheet ( String spreadsheetId , String range , ValueRange valueRange ) throws IOException { // append line Sheets.Spreadsheets.Values.Append request = sheetsService.spreadsheets ( ) .values ( ) .append ( spreadsheetId , range , valueRange ) .setValueInputOption ( `` RAW '' ) ; AppendValuesResponse response = request.execute ( ) ; } /** * Creates an authorized Credential object . * * @ return an authorized Credential object . * @ throws IOException */ private Credential authorize ( ) throws IOException { // Load client secrets . InputStream in = GoogleSheetsServiceImpl.class.getResourceAsStream ( `` /google_sheets/client_secret.json '' ) ; GoogleClientSecrets clientSecrets = GoogleClientSecrets.load ( this.jsonFactory , new InputStreamReader ( in ) ) ; // Build flow and trigger user authorization request . GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder ( this.httpTransport , this.jsonFactory , clientSecrets , this.scopes ) .setDataStoreFactory ( this.dataStoreFactory ) .setAccessType ( `` online '' ) .build ( ) ; LocalServerReceiver.Builder localServerReceiverBuilder = new Builder ( ) ; localServerReceiverBuilder.setHost ( `` localhost '' ) ; localServerReceiverBuilder.setPort ( 46228 ) ; Credential credential = new AuthorizationCodeInstalledApp ( flow , localServerReceiverBuilder.build ( ) ) .authorize ( `` user '' ) ; LOGGER.info ( `` Credentials saved to `` + DATA_STORE_DIR.getAbsolutePath ( ) ) ; return credential ; } } GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder ( this.httpTransport , this.jsonFactory , clientSecrets , this.scopes ) .setDataStoreFactory ( this.dataStoreFactory ) .setAccessType ( `` offline '' ) .setApprovalPrompt ( `` force '' ) .addRefreshListener ( new DataStoreCredentialRefreshListener ( credentialUserId , this.dataStoreFactory ) ) .build ( ) ;"
"public interface UserRepositoryMongo extends MongoRepository < User , Long > { } public interface UserRepositoryCouch extends CouchbasePagingAndSortingRepository < User , Long > { }"
"A , Å , B , Ch , D , E , F , G , H , I , K , L , M , N , Ñ , Ng , O , P , R , S , T , U , Y"
public class Foo { private boolean needsGreeting = true ; public synchronized void greet ( ) { if ( needsGreeting ) { System.out.println ( `` hello '' ) ; needsGreeting = false ; } } }
package myscalaabstract class SFoo { def bar ( ) : Unit } class SFoobar extends SFoo { @ throws [ Exception ] override def bar ( ) : Unit = { throw new Exception ( `` hi there '' ) } } import myscala.SFoo ; import myscala.SFoobar ; public class Foobar { public static void main ( String [ ] args ) { SFoo mySFoo = new SFoobar ( ) ; mySFoo.bar ( ) ; } } import myscala.SFoo ; import myscala.SFoobar ; public class Foobar { public static void main ( String [ ] args ) { SFoobar mySFoo = new SFoobar ( ) ; // only difference is the declared type mySFoo.bar ( ) ; } }
i = 1 ; i += ++i + i++ + ++i ; //i = 9 now $ i = 1 ; $ i += ++ $ i + $ i++ + ++ $ i ; echo $ i ;
"public class MyClass { public MyClass ( ) { try { Field f = String.class.getDeclaredField ( `` value '' ) ; f.setAccessible ( true ) ; f.set ( `` true '' , f.get ( `` false '' ) ) ; } catch ( Exception e ) { } } public static void main ( String [ ] args ) { MyClass m = new MyClass ( ) ; System.out.println ( m.equals ( m ) ) ; } } public void print ( boolean b ) { write ( b ? `` true '' : `` false '' ) ; } System.out.println ( true ) ; truefalse"
public class Class1 { private Class1Util c1u ; List < String > infoItems ; ... public void Class1 ( ) { c1u = new Class1Util ( this ) ; } public void btnAction ( ActionListener al ) { ... c1u.loadInfoFromDatabase ( ) ; } } public class Class1Util { private Class1 c ; public void Class1Util ( Class1 c ) { this.c = c ; } public void loadInfoFromDatabase ( ) { c.infoItems.add ( `` blah '' ) ; } }
class MyObject { private String id1 ; private String id2 ; @ Override public boolean equals ( Object o ) { if ( o == this ) return true ; if ( ! ( o instanceof MyObject ) ) { return false ; } MyObject other = ( MyObject ) o ; return id1.equals ( other.id1 ) || id2.equals ( other.id2 ) ; } }
public interface A { public int data ( ) ; } public interface B { public char data ( ) ; }
switch ( condition ) { case CONDITION_ONE : int account = 27373 ; case CONDITION_TWO : // account var not needed here case CONDITION_THREE : // account var not needed here case CONDITION_FOUR : int account = 90384 ; } switch ( condition ) { case CONDITION_ONE : { int account = 27373 ; } case CONDITION_TWO : { // account var not needed here } case CONDITION_THREE : { // account var not needed here } case CONDITION_FOUR : { int account = 90384 ; } }
"ContentValues values = new ContentValues ( ) ; values.put ( MediaStore.Audio.Media.TITLE , title ) ; values.put ( MediaStore.Audio.Media.YEAR , year ) ; resolver.update ( MediaStore.Audio.Media.EXTERNAL_CONTENT_URI , values , MediaStore.Audio.Media._ID + `` = ? `` , new String [ ] { String.valueOf ( id ) } )"
"public interface PlayYourCardsRight { /** * Get the number of cards remaining with higher face values than the previously * drawn card * @ return */public abstract int getNumberCardsHigher ( ) ; /** * Get the number of cards remaining with lower face values than the previously * drawn card * @ return */public abstract int getNumberCardsLower ( ) ; /** * Get all cards that have already been drawn in the order they were drawn in * */public abstract List < Card > getPlayedCards ( ) ; /** * Simple prediction algorithm - if there are more cards left in the deck with * lower face values than the previous card , then predict 'Lower ' , if there * are more cards left in the deck with higher face values then predict * 'Higher ' , if there are equal numbers of higher/lower cards pick 'higher ' or 'lower ' * at random * * Prediction is an Enum ( Higher/Lower/None ) * */public abstract Prediction getPrediction ( ) ; /* * Draw the next card at random */public abstract void nextRound ( ) ; /** * Specifiy what the next card should be * * @ param card */public abstract void nextRound ( Card card ) ; }"
"public enum HTTPHeaderKey { CACHE_CONTROL ( `` Cache-Control '' ) , CONNECTION ( `` Connection '' ) , TRANSFER_ENCODING ( `` Transfer-Encoding '' ) , HOST ( `` Host '' ) , USER_AGENT ( `` User-Agent '' ) , CONTENT_LENGTH ( `` Content-Length '' ) , CONTENT_TYPE ( `` Content-Type '' ) ; private final String str ; private HTTPHeaderKey ( final String _str ) { str = _str ; } /** Over ridden toString returns the HTTP/1.1 compatible header */ public String toString ( ) { return str ; } } ;"
"GL10 gl = this.glGraphics.getGL ( ) ; gl.glClear ( GL10.GL_COLOR_BUFFER_BIT ) ; guiCam.setViewportAndMatrices ( ) ; gl.glEnable ( GL10.GL_TEXTURE_2D ) ; // Set background color // batcher.beginBatch ( Assets.mainmenuAtlas ) ; for ( int x = Assets.mmbackgroundPattern.width / 2 ; x < this.scale.getWidth ( ) + Assets.mmbackgroundPattern.width / 2 ; x += Assets.mmbackgroundPattern.width ) { for ( int y = Assets.mmbackgroundPattern.height / 2 ; y < this.scale.getHeight ( ) + Assets.mmbackgroundPattern.height / 2 ; y += Assets.mmbackgroundPattern.height ) { batcher.drawSprite ( x , y , Assets.mmbackgroundPattern.width , Assets.mmbackgroundPattern.height , Assets.mmbackgroundPattern ) ; } } public void setViewportAndMatrices ( ) { GL10 gl = glGraphics.getGL ( ) ; gl.glViewport ( 0 , 0 , glGraphics.getWidth ( ) , glGraphics.getHeight ( ) ) ; gl.glMatrixMode ( GL10.GL_PROJECTION ) ; gl.glLoadIdentity ( ) ; gl.glOrthof ( position.x - frustumWidth * zoom / 2 , position.x + frustumWidth * zoom/ 2 , position.y - frustumHeight * zoom / 2 , position.y + frustumHeight * zoom/ 2 , 1 , -1 ) ; gl.glMatrixMode ( GL10.GL_MODELVIEW ) ; gl.glLoadIdentity ( ) ; } public void endBatch ( ) { vertices.setVertices ( verticesBuffer , 0 , bufferIndex ) ; vertices.bind ( ) ; vertices.draw ( GL10.GL_TRIANGLES , 0 , numSprites * 6 ) ; vertices.unbind ( ) ; } public void drawSprite ( float x , float y , float width , float height , TextureRegion region ) { float halfWidth = width / 2 ; float halfHeight = height / 2 ; float x1 = x - halfWidth ; float y1 = y - halfHeight ; float x2 = x + halfWidth ; float y2 = y + halfHeight ; verticesBuffer [ bufferIndex++ ] = x1 ; verticesBuffer [ bufferIndex++ ] = y1 ; verticesBuffer [ bufferIndex++ ] = region.u1 ; verticesBuffer [ bufferIndex++ ] = region.v2 ; verticesBuffer [ bufferIndex++ ] = x2 ; verticesBuffer [ bufferIndex++ ] = y1 ; verticesBuffer [ bufferIndex++ ] = region.u2 ; verticesBuffer [ bufferIndex++ ] = region.v2 ; verticesBuffer [ bufferIndex++ ] = x2 ; verticesBuffer [ bufferIndex++ ] = y2 ; verticesBuffer [ bufferIndex++ ] = region.u2 ; verticesBuffer [ bufferIndex++ ] = region.v1 ; verticesBuffer [ bufferIndex++ ] = x1 ; verticesBuffer [ bufferIndex++ ] = y2 ; verticesBuffer [ bufferIndex++ ] = region.u1 ; verticesBuffer [ bufferIndex++ ] = region.v1 ; numSprites++ ; } public TextureRegion ( Texture texture , float x , float y , float width , float height ) { this.u1 = x / texture.width ; this.v1 = y / texture.height ; this.u2 = this.u1 + width / texture.width ; this.v2 = this.v1 + height / texture.height ; this.texture = texture ; this.width = ( int ) width ; this.height = ( int ) height ; } public class Texture { GLGraphics glGraphics ; FileIO fileIO ; Bitmap img ; String fileName ; int textureId ; int minFilter ; int magFilter ; public int width ; public int height ; public Texture ( GLGame glGame , String fileName ) { this.glGraphics = glGame.getGLGraphics ( ) ; this.fileIO = glGame.getFileIO ( ) ; this.fileName = fileName ; try { load ( BitmapFactory.decodeStream ( this.fileIO.readAsset ( fileName ) ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } public Texture ( GLGame glGame , Bitmap img ) { this.glGraphics = glGame.getGLGraphics ( ) ; this.fileIO = glGame.getFileIO ( ) ; this.img = img ; load ( img ) ; } private void load ( Bitmap bitmap ) { GL10 gl = glGraphics.getGL ( ) ; int [ ] textureIds = new int [ 1 ] ; gl.glGenTextures ( 1 , textureIds , 0 ) ; textureId = textureIds [ 0 ] ; gl.glBindTexture ( GL10.GL_TEXTURE_2D , textureId ) ; GLUtils.texImage2D ( GL10.GL_TEXTURE_2D , 0 , bitmap , 0 ) ; setFilters ( GL10.GL_LINEAR , GL10.GL_LINEAR ) ; gl.glBindTexture ( GL10.GL_TEXTURE_2D , 0 ) ; width = bitmap.getWidth ( ) ; height = bitmap.getHeight ( ) ; bitmap.recycle ( ) ; } public void reload ( ) { if ( fileName.equals ( null ) ) { load ( this.img ) ; } else { try { load ( BitmapFactory.decodeStream ( this.fileIO.readAsset ( fileName ) ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } bind ( ) ; setFilters ( minFilter , magFilter ) ; glGraphics.getGL ( ) .glBindTexture ( GL10.GL_TEXTURE_2D , 0 ) ; } public void setFilters ( int minFilter , int magFilter ) { this.minFilter = minFilter ; this.magFilter = magFilter ; GL10 gl = glGraphics.getGL ( ) ; gl.glTexParameterf ( GL10.GL_TEXTURE_2D , GL10.GL_TEXTURE_MIN_FILTER , minFilter ) ; gl.glTexParameterf ( GL10.GL_TEXTURE_2D , GL10.GL_TEXTURE_MAG_FILTER , magFilter ) ; } public void bind ( ) { GL10 gl = glGraphics.getGL ( ) ; gl.glBindTexture ( GL10.GL_TEXTURE_2D , textureId ) ; } public void dispose ( ) { GL10 gl = glGraphics.getGL ( ) ; gl.glBindTexture ( GL10.GL_TEXTURE_2D , textureId ) ; int [ ] textureIds = { textureId } ; gl.glDeleteTextures ( 1 , textureIds , 0 ) ; } } public class SpriteBatcher { final float [ ] verticesBuffer ; int bufferIndex ; final Vertices vertices ; int numSprites ; public SpriteBatcher ( GLGraphics glGraphics , int maxSprites ) { this.verticesBuffer = new float [ maxSprites*4*4 ] ; this.vertices = new Vertices ( glGraphics , maxSprites*4 , maxSprites*6 , false , true ) ; this.bufferIndex = 0 ; this.numSprites = 0 ; short [ ] indices = new short [ maxSprites*6 ] ; int len = indices.length ; short j = 0 ; for ( int i = 0 ; i < len ; i += 6 , j += 4 ) { indices [ i + 0 ] = ( short ) ( j + 0 ) ; indices [ i + 1 ] = ( short ) ( j + 1 ) ; indices [ i + 2 ] = ( short ) ( j + 2 ) ; indices [ i + 3 ] = ( short ) ( j + 2 ) ; indices [ i + 4 ] = ( short ) ( j + 3 ) ; indices [ i + 5 ] = ( short ) ( j + 0 ) ; } vertices.setIndices ( indices , 0 , indices.length ) ; } public void drawSprite ( float x , float y , float width , float height , TextureRegion region , boolean corner ) { if ( corner ) { float x1 = x ; float y1 = y ; float x2 = x + width ; float y2 = y + height ; verticesBuffer [ bufferIndex++ ] = x1 ; verticesBuffer [ bufferIndex++ ] = y1 ; verticesBuffer [ bufferIndex++ ] = region.u1 ; verticesBuffer [ bufferIndex++ ] = region.v2 ; verticesBuffer [ bufferIndex++ ] = x2 ; verticesBuffer [ bufferIndex++ ] = y1 ; verticesBuffer [ bufferIndex++ ] = region.u2 ; verticesBuffer [ bufferIndex++ ] = region.v2 ; verticesBuffer [ bufferIndex++ ] = x2 ; verticesBuffer [ bufferIndex++ ] = y2 ; verticesBuffer [ bufferIndex++ ] = region.u2 ; verticesBuffer [ bufferIndex++ ] = region.v1 ; verticesBuffer [ bufferIndex++ ] = x1 ; verticesBuffer [ bufferIndex++ ] = y2 ; verticesBuffer [ bufferIndex++ ] = region.u1 ; verticesBuffer [ bufferIndex++ ] = region.v1 ; numSprites++ ; } else { drawSprite ( x , y , width , height , region ) ; } } public void present ( float deltaTime ) { GL10 gl = this.glGraphics.getGL ( ) ; gl.glClear ( GL10.GL_COLOR_BUFFER_BIT ) ; guiCam.setViewportAndMatrices ( ) ; gl.glEnable ( GL10.GL_TEXTURE_2D ) ; // Set background color // batcher.beginBatch ( Assets.mainmenuAtlas ) ; for ( float x = 0 ; x < this.scale.getWidth ( ) ; x += Assets.mmbackgroundPattern.width ) { for ( float y = 0 ; y < this.scale.getHeight ( ) ; y += Assets.mmbackgroundPattern.height ) { batcher.drawSprite ( x , y , Assets.mmbackgroundPattern.width , Assets.mmbackgroundPattern.height , Assets.mmbackgroundPattern , true ) ; } }"
class T { public static void main ( String args [ ] ) { Object myObject = new Object ( ) ; synchronized ( myObject ) { myObject = new Object ( ) ; } // end sync } }
"Optional optional = Optional.of ( `` dummy '' ) ; Optional < Boolean > result1 = optional.map ( obj - > true ) ; // works fineboolean result2 = result1.orElse ( false ) ; // works fineboolean result3 = optional.map ( obj - > true ) .orElse ( false ) ; // compilation error : Incompatible types : required boolean , found objectObject result4 = optional.map ( obj - > true ) .orElse ( false ) ; // works fine"
package mypackage ; import java.lang.reflect.Method ; public class MainClass { public static void main ( String [ ] args ) { for ( Method method : MyClass.class.getDeclaredMethods ( ) ) { System.out.println ( method ) ; } // prints out two lines // public java.lang.Long mypackage.MyClass.getId ( ) < -- ok // public java.lang.Object mypackage.MyClass.getId ( ) < -- not ok } } interface Id < T > { T getId ( ) ; } class MyClass implements Id < Long > { @ Override public Long getId ( ) { return new Long ( 0 ) ; } ; }
2019-04-17 10:17:35.060 WARNING [ : tomcat ] org.apache.catalina.core.StandardServer The socket listening for the shutdown command experienced an unexpected timeout [ 256 ] milliseconds after the call to accept ( ) . Is this an instance of bug 56684 ? java.net.SocketTimeoutException : Accept timed out at java.base/java.net.PlainSocketImpl.socketAccept ( Native Method ) at java.base/java.net.AbstractPlainSocketImpl.accept ( AbstractPlainSocketImpl.java:458 ) at java.base/java.net.ServerSocket.implAccept ( ServerSocket.java:551 ) at java.base/java.net.ServerSocket.accept ( ServerSocket.java:519 ) at org.apache.catalina.core.StandardServer.await ( StandardServer.java:607 ) at org.apache.catalina.startup.Catalina.await ( Catalina.java:722 ) at org.apache.catalina.startup.Catalina.start ( Catalina.java:668 ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.base/java.lang.reflect.Method.invoke ( Method.java:566 ) at org.apache.catalina.startup.Bootstrap.start ( Bootstrap.java:350 ) at org.apache.catalina.startup.Bootstrap.main ( Bootstrap.java:492 ) org.apache.catalina.core.StandardServer = SEVERE
"public class MyBean { private String value ; } public class MyBean { private final PropertyChangeSupport pcs = new PropertyChangeSupport ( this ) ; private String value ; public String getValue ( ) { return this.value ; } public void setValue ( String newValue ) { String oldValue = this.value ; this.value = newValue ; this.pcs.firePropertyChange ( `` value '' , oldValue , newValue ) ; } [ ... ] }"
"[ A , B ] [ B , C ] [ C , D ] [ E , F ] [ F , G ] [ H , I ] [ A , B , C , D ] [ E , F , G ] [ H , I ] public static < T > Set < List < T > > chainLinks ( Map < T , T > map ) { Set < List < T > > resultSet = new HashSet < > ( ) ; map.forEach ( ( from , to ) - > { if ( ! map.containsValue ( from ) ) { List < T > list = new ArrayList < > ( ) ; list.add ( from ) ; list.addAll ( inner ( to , map ) ) ; resultSet.add ( list ) ; } } ) ; return resultSet ; } private static < T > List < T > inner ( T from , Map < T , T > map ) { if ( map.containsKey ( from ) ) { List < T > list = new ArrayList < > ( ) ; list.add ( from ) ; list.addAll ( inner ( map.get ( from ) , map ) ) ; return list ; } else { List < T > end = new ArrayList < > ( ) ; end.add ( from ) ; return end ; } } @ Test public void testChainLinks ( ) { Map < String , String > map = new HashMap < String , String > ( ) { { put ( `` A '' , `` B '' ) ; put ( `` B '' , `` C '' ) ; put ( `` C '' , `` D '' ) ; put ( `` E '' , `` F '' ) ; put ( `` F '' , `` G '' ) ; put ( `` H '' , `` I '' ) ; } } ; Utils.chainLinks ( map ) .forEach ( list - > { logger.info ( `` list = { } '' , list.stream ( ) .collect ( Collectors.joining ( `` - > `` ) ) ) ; } ) ; } list = H - > Ilist = E - > F - > Glist = A - > B - > C - > D"
"from ( `` jetty : http : //0.0.0.0:8081/context '' ) .process ( frontendProcessor ) .loadBalance ( ) .failover ( 1 , false , true , true , MyFancyException.class ) .to ( `` direct : foo '' , `` direct : bar '' ) .end ( ) .process ( responseProcessor ) .stop ( ) ; from ( `` direct : foo '' ) .process ( potentiallyThrowingMyFancyException ) ; onException ( Exception.class ) .process ( myErrorProcessor ) .handled ( true ) .stop ( ) ; from ( `` jetty : http : //0.0.0.0:8081/context '' ) .process ( frontendProcessor ) .loadBalance ( ) .failover ( 1 , false , true , true , MyFancyException.class ) .to ( `` direct : foo '' , `` direct : bar '' ) .end ( ) .process ( responseProcessor ) .stop ( ) ;"
"@ RequestMapping ( method = RequestMethod.GET ) public String getViewRailwayService ( @ RequestParam long id , Model model ) { model.addAttribute ( `` railwayService '' , railwayServiceRepository.findOne ( id ) ) ; return `` admin/railwayService/view '' ; } ... < title > $ { railwayService.name } < /title > < c : forEach var= '' company '' items= '' $ { railwayService.companies } '' > ..."
-XX : +PrintGC -XX : +PrintGCDetails -XX : +PrintGCTimeStamps -XX : +UseParallelGC -XX : +UseCompressedOops -Xmx1024M -Xms1024M -XX : NewSize=512M -XX : SurvivorRatio=2 grep `` PSYoungGen '' ./log | wc -l
public class SynthesizeAnonymous { public static void method ( ) { new InnerClass ( ) ; } private static class InnerClass { } }
import java.util.Date ; import javax.ws.rs.client.Client ; import javax.ws.rs.client.ClientBuilder ; import javax.ws.rs.client.WebTarget ; import javax.ws.rs.client.Invocation.Builder ; import javax.ws.rs.core.GenericType ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import org.glassfish.jersey.client.ChunkedInput ; public class StreamClient { private static final String BOUNDARY = `` \n '' ; public void makeCall ( ) { System.out.println ( `` Start Time '' + new Date ( ) ) ; Client client = ClientBuilder.newClient ( ) ; BasicAuth auth = new BasicAuth ( ) ; auth.setPassword ( `` username '' ) ; auth.setUserName ( `` password '' ) ; BasicAuthentication basicAuthentication = new BasicAuthentication ( auth ) ; client.register ( basicAuthentication ) ; WebTarget target = client.target ( `` https : //localhost:7211/stream/v1/ '' ) ; Builder request = target.request ( MediaType.APPLICATION_JSON ) ; Response response = request.get ( ) ; final ChunkedInput < String > chunkedInput = response.readEntity ( new GenericType < ChunkedInput < String > > ( ) { } ) ; chunkedInput.setParser ( ChunkedInput.createParser ( BOUNDARY ) ) ; String chunk ; do { if ( ( chunk = chunkedInput.read ( ) ) ! = null ) System.out.println ( chunk ) ; } while ( ! chunkedInput.isClosed ( ) ) ; System.out.println ( `` End Time `` + new Date ( ) ) ; } public static void main ( String [ ] args ) { StreamClient client = new StreamClient ( ) ; client.makeCall ( ) ; } }
final double [ ] bestScore = { Double.MAX_VALUE } ; // for each item in the collection { tasks.add ( Executors.callable ( new Runnable ( ) { public void run ( ) { double score = // ... do the scoring for the task if ( score < bestScore [ 0 ] ) { synchronized ( bestScore ) { if ( score < bestScore [ 0 ] ) { // check again after we have the lock bestScore [ 0 ] = score ; ... // also save off other task identifiers in a similar fashion } } } } } } // end of loop creating scoring tasksList < Future < Object > > futures = executorService.invokeAll ( tasks /* ... timeout params here*/ ) ; ... // handle cancelled tasks // now use the best scoring task that was saved off when it was found .
public interface ThirdPartyApiHandler { public OperationResult doOperation ( OperationInput input ) ; public static class OperationResult { //members of OpeationResult . metrics after file processing private int successfulRecords ; private int failedRecords ; } public static class OperationInput { //implementations call third party API to process this file . private String inputBatchFile ; } //Constant which would be same across all implementations . public static final int GLOBAL_CONSTANT = 1 ; }
"[ org.mygroup.myframework . * ] void doStuff ( ) { ... . } package org.mygroup.myframework.foo ; public class Bar { /** Adds a Bar component to application UI */ public boolean addComponentHTML ( ) { // Code that adds the HTML for a Bar component to a UI screen // returns true if successful // I need users of my framework to be able to call this method , so // they can actually add a Bar component to their application 's UI } /** Not really public , do not call */ public void doStuff ( ) { // Code that performs internal logic to my framework // If other users call it , Really Bad Things could happen ! // But I need it to be public so org.mygroup.myframework.far.Boo can call } }"
interface Sort { int [ ] sort ( int [ ] nums ) ; }
class K { static class Ka { static class Kb { class Kc { class Kd { } } } } } class Test { K.Ka.Kb.Kc.Kd k = new K.Ka.Kb ( ) .new Kc ( ) .new Kd ( ) ; }
"switch ( type ) { case `` creature '' : Creature returnActor2 = getNextCreature ( ) ; boolean isEat2 = actOnNearby ( getRightChromosome ( Config.HardCode.creature ) , returnActor2.getLocation ( ) ) ; if ( isEat2 ) { actOnCreature ( returnActor2 ) ; } break ; case `` monster '' : Monster returnActor3 = getNextMonster ( ) ; boolean isEat3 = actOnNearby ( getRightChromosome ( Config.HardCode.monster ) , returnActor3.getLocation ( ) ) ; if ( isEat3 ) { actOnMonster ( returnActor3 ) ; } break ; } private Monster getNextMonster ( ) { ArrayList < Actor > nearbyActors = getActors ( ) ; Monster mine = new Monster ( ) ; for ( Actor a : nearbyActors ) { if ( a instanceof Monster ) { mine = ( Monster ) a ; } } return mine ; } private Creature getNextCreature ( ) { ArrayList < Actor > nearbyActors = getActors ( ) ; Creature mine = new Creature ( ) ; for ( Actor a : nearbyActors ) { if ( a instanceof Creature ) { mine = ( Creature ) a ; } } return mine ; }"
com.person| -- - Person . ( java/cs ) | -- - PersonDetailChecker . ( java/cs ) | -- - PersonNameGenerator . ( java/cs )
"List < Double > listA = getListA ( ) ; List < Double > listB = getListB ( ) ; List < Double > listC = getListC ( ) ; int listsSize = listA.size ( ) ; List < ? > collect = IntStream.range ( 0 , listsSize ) .mapToObj ( i - > listA.get ( i ) + listB.get ( i ) + list ( C ) .get ( i ) ) .collect ( toList ( ) ) ;"
readWriteLock.readLock ( ) .lock ( ) try { ... access myMap here ... } finally { readWriteLock.readLock ( ) .unlock ( ) }
"import java.awt . * ; import java.awt.image.BufferedImage ; import javax.swing . * ; import java.net.URL ; import javax.imageio.ImageIO ; public class SoccerField { private JPanel ui = null ; int [ ] x = { 0 , 35 , 70 , 107 , 142 , 177 , 212 , 247 , 282 , 315 } ; int [ ] y = { 0 , 45 , 85 , 140 , 180 , 225 , 265 , 280 , 320 , 345 } ; boolean buttons ; SoccerField ( ) { initUI ( ) ; } public void initUI ( ) { int result = JOptionPane.showConfirmDialog ( ui , `` Use buttons ? `` ) ; buttons = result == JOptionPane.OK_OPTION ; if ( ui ! = null ) { return ; } ui = new JPanel ( new GridBagLayout ( ) ) ; ui.setBackground ( Color.RED ) ; try { URL url = new URL ( `` http : //i.stack.imgur.com/9E5ky.jpg '' ) ; BufferedImage img = ImageIO.read ( url ) ; BufferedImage field = img.getSubimage ( 100 , 350 , 315 , 345 ) ; BufferedImage [ ] bi = subSampleImageColumns ( field ) ; BufferedImage [ ] [ ] fieldParts = new BufferedImage [ bi.length ] [ ] ; for ( int ii=0 ; ii < bi.length ; ii++ ) { fieldParts [ ii ] = subSampleImageRows ( bi [ ii ] ) ; } for ( int ii=0 ; ii < fieldParts [ 0 ] .length ; ii++ ) { for ( int jj=0 ; jj < fieldParts.length ; jj++ ) { addImageToPanel ( ui , fieldParts [ ii ] [ jj ] , ii , jj ) ; } } } catch ( Exception ex ) { ex.printStackTrace ( ) ; } } private void addImageToPanel ( JPanel panel , BufferedImage img , int row , int col ) { Insets insets = new Insets ( 0,0,0,0 ) ; GridBagConstraints gbc = new GridBagConstraints ( row , col , 1 , 1 , .5 , .5 , GridBagConstraints.CENTER , GridBagConstraints.BOTH , insets , 0 , 0 ) ; ImageIcon ii = new ImageIcon ( img ) ; JButton b = new JButton ( ii ) ; b.setBorder ( null ) ; b.setBorderPainted ( false ) ; b.setContentAreaFilled ( false ) ; Component c = buttons ? b : new JLabel ( ii ) ; panel.add ( c , gbc ) ; } private BufferedImage [ ] subSampleImageColumns ( BufferedImage img ) { System.out.println ( `` Image Size : `` + img.getWidth ( ) + `` , '' + img.getHeight ( ) ) ; BufferedImage [ ] imageRows = new BufferedImage [ x.length - 1 ] ; for ( int ii = 0 ; ii < x.length - 1 ; ii++ ) { BufferedImage bi = img.getSubimage ( x [ ii ] , 0 , x [ ii + 1 ] - x [ ii ] , img.getHeight ( ) ) ; imageRows [ ii ] = bi ; } return imageRows ; } private BufferedImage [ ] subSampleImageRows ( BufferedImage img ) { BufferedImage [ ] imageRows = new BufferedImage [ y.length - 1 ] ; for ( int ii = 0 ; ii < y.length - 1 ; ii++ ) { BufferedImage bi = img.getSubimage ( 0 , y [ ii ] , img.getWidth ( ) , y [ ii + 1 ] - y [ ii ] ) ; imageRows [ ii ] = bi ; } return imageRows ; } public JComponent getUI ( ) { return ui ; } public static void main ( String [ ] args ) { Runnable r = new Runnable ( ) { @ Override public void run ( ) { try { UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception useDefault ) { } SoccerField o = new SoccerField ( ) ; JFrame f = new JFrame ( o.getClass ( ) .getSimpleName ( ) ) ; f.setDefaultCloseOperation ( JFrame.DISPOSE_ON_CLOSE ) ; f.setLocationByPlatform ( true ) ; f.setContentPane ( o.getUI ( ) ) ; f.pack ( ) ; //f.setMinimumSize ( f.getSize ( ) ) ; f.setVisible ( true ) ; } } ; SwingUtilities.invokeLater ( r ) ; } }"
"public class Main_Activityextends AppCompatActivity { private RecyclerView recyclerview ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; recyclerview = ( RecyclerView ) findViewById ( R.id.recyclerview ) ; recyclerview.setLayoutManager ( new LinearLayoutManager ( this , LinearLayoutManager.VERTICAL , false ) ) ; List < ExpandableListViewAdapter.Item > data = new ArrayList < > ( ) ; data.add ( new ExpandableListViewAdapter.Item ( ExpandableListViewAdapter.HEADER , `` Terms of usage '' ) ) ; data.add ( new ExpandableListViewAdapter.Item ( ExpandableListViewAdapter.CHILD , `` never eat '' ) ) ; data.add ( new ExpandableListViewAdapter.Item ( ExpandableListViewAdapter.CHILD , `` bluhhhhh '' ) ) ; recyclerview.setAdapter ( new ExpandableListViewAdapter ( data ) ) ; recyclerview.setOnChildClickListener ( new ExpandableListView.OnChildClickListener ( ) { @ Override public boolean onChildClick ( ExpandableListView parent , View v , int groupPosition , int childPosition , long id ) { return true ; } } ) ;"
"List < String > a = new ArrayList < String > ( ) ; a.add ( `` foo '' ) ; // b is a List of anythingList < ? > b = a ; // retrieve the first elementObject c = b.get ( 0 ) ; // This is legal , because we can guarantee// that the return type `` ? '' is a subtype of Object// Add an Integer to b.b.add ( new Integer ( 1 ) ) ;"
struct S { int i ; void *p ; int i2 ; } ;
"TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance ( TrustManagerFactory.getDefaultAlgorithm ( ) ) ; KeyStore keystore = KeyStore.getInstance ( `` JKS '' ) ; InputStream keystoreStream = clazz.getClassLoader ( ) .getResourceAsStream ( `` certs.keystore '' ) ; // ( on classpath ) keystore.load ( keystoreStream , `` pa55w0rd '' .toCharArray ( ) ) ; trustManagerFactory.init ( keystore ) ; TrustManager [ ] trustManagers = trustManagerFactory.getTrustManagers ( ) ; SSLContext context = SSLContext.getInstance ( `` SSL '' ) ; context.init ( null , trustManagers , null ) ; SSLSocketFactory socketFact = context.getSocketFactory ( ) ; connection.setSSLSocketFactory ( socketFact ) ;"
package foo ; public class ExampleSuperClass < T > { protected T field ; public ExampleSuperClass ( T field ) { this.field = field ; } public T getField ( ) { return field ; } } package foo ; public class ExampleSubClass extends ExampleSuperClass < Member > { static class Member { } public ExampleSubClass ( ) { super ( new Member ( ) ) ; } } [ javac ] ExampleSubClass.java:3 : error : can not find symbol [ javac ] public class ExampleSubClass extends ExampleSuperClass < Member > { [ javac ] ^ [ javac ] symbol : class Member [ javac ] 1 error
"message.setContent ( `` < h1 > You Have a Promotion < /h1 > '' , `` text/html '' ) ; message.setContent ( `` < h3 > Your First Name : < /h3 > '' + FirstNm , `` text/html '' ) ; message.setContent ( `` < h3 > Your Last Name : < /h3 > '' + LastNm , `` text/html '' ) ; message.setContent ( `` < h5 > Your Employee ID : < /h5 > '' + Employeeid , `` text/html '' ) ;"
"ScheduledExecutorService threadPool = Executors.newScheduledThreadPool ( ... ) ; threadPool.submit ( new Runnable ( ) { @ Override public void run ( ) { // ... if ( needToBeScheduled ( ) ) { threadPool.schedule ( this , delay , TimeUnit.MINUTES ) ; } else if ( needToBeResubmitted ( ) ) { threadPool.submit ( this ) ; } } } ) ; threadPool.submit ( ( ) - > { // ... if ( needToBeScheduled ( ) ) { threadPool.schedule ( this , delay , TimeUnit.MINUTES ) ; } else if ( needToBeResubmitted ( ) ) { threadPool.submit ( this ) ; } } ) ;"
for ( int i = 0 ; i < 10 ; i++ ) Integer a = i ; for ( int i = 0 ; i < 10 ; i++ ) { Integer a = i ; }
"Print [ Graphics [ Raster [ img [ [ 1 ] ] ] , AspectRatio- > Automatic , ImageSize- > 530 ] ] ; Return [ Image [ Graphics [ Raster [ img [ [ 1 ] ] ] , AspectRatio- > Automatic , ImageSize- > 530 ] ] ] ; Return [ Graphics [ Raster [ img [ [ 1 ] ] ] , AspectRatio- > Automatic , ImageSize- > 530 ] ] ; Return [ Raster [ note1 [ [ 1 ] ] ] ] ; Return [ note1 [ [ 1 ] ] ] ; ml.evaluate ( `` tmp = renderImageGeneric [ `` + sampleId + `` , noteText , '' + sizeX + `` , '' + sizeY + `` , margin , '' + dpi + `` , '' + lineStep + `` , '' + tabStep + `` , '' + ligatureMatch + `` , '' + maxLigHeightDiff + `` , '' + mmSearch + `` , '' + highToLowGap + `` , '' + lowToHighGap + `` , '' + wordBaselineVariance + `` , '' + debugFlag + `` ] '' ) ; ml.discardAnswer ( ) ; byte [ ] res = ml.evaluateToImage ( `` tmp '' , 0 , 0 ) ; ByteArrayInputStream strm = new ByteArrayInputStream ( res ) ; BufferedImage imag = ImageIO.read ( strm ) ; //BufferedImage imag = ImageIO.read ( new InputStream ( res ) ) ; if ( imag ! = null ) { ImageIO.write ( imag , `` png '' , new File ( `` /Users/Rebecca/ '' , '' test.png '' ) ) ; } else { System.out.println ( `` image is null '' ) ; }"
"static void test ( long ... x ) { System.out.println ( `` long ... '' ) ; } static void test ( Integer ... x ) { System.out.println ( `` Integer ... '' ) ; } public static void main ( String [ ] args ) { int no=5 ; test ( no , no ) ; //getting error at this point in eclipse 'The method test ( long [ ] ) is ambiguous ' }"
( gdb ) p orderFinish [ 0 ] can not find java.lang.Object ( gdb ) p ( int ) orderFinish $ 8 = -136261440 ( gdb ) p orderFinish [ 3 ] can not find java.lang.Object ( gdb ) p in $ 9 = 1 ( gdb ) whatis orderFinish type = int [ ]
class Test { public static void main ( String [ ] args ) { int a = 1 ; int b = 5 ; Integer c = new Integer ( 1 ) ; Integer d = 5 ; //autoboxing at work System.out.println ( c.compareTo ( d ) ) ; System.out.println ( a.compareTo ( b ) ) ; } }
"public static < T , K > void delete ( AbstractDao < T , K > dao )"
"public class Pair < T , U > { private T first ; private U second ; public Pair ( T _first , U _second ) { first = _first ; second = _second ; } public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) ! = obj.getClass ( ) ) return false ; //Problem ahead ! ! ! Pair < T , U > other = ( Pair < T , U > ) obj ; ... } }"
public static void main ( String [ ] args ) { new TestRecursion ( ) .strRecur ( `` abc '' ) ; } public void strRecur ( String s ) { if ( s.length ( ) < 6 ) { System.out.println ( s ) ; strRecur ( s+ '' * '' ) ; } } abcabc*abc** public class TestRecursion { public static void main ( String [ ] args ) { new TestRecursion ( ) .strRecur ( `` abc '' ) ; } public String strRecur ( String s ) { if ( s.length ( ) < 6 ) { System.out.println ( s ) ; return strRecur ( s+ '' * '' ) ; } return `` Outside If '' ; } } return n * fact ( n-1 ) ;
public class A { public void someMethod ( ) { ... } } public class B extends A { @ Override public void someMethod ( ) { ... } } ... ... ... var myA = new A ( ) ; // Works as expectedmyA = new B ( ) ; // Expected to fail in compilation due to var being // syntactic sugar for declaring an A typemyA = ( A ) ( new B ( ) ) ; // Should workmyA.someMethod ( ) ; // The question - which someMethod implementation is called ?
public class LockClass { public synchronized void add ( Object any ) { } } public class AnyOther { private LockClass lock ; public AnyOther ( LockClass lock ) { this.lock = lock ; } public void doSomethings ( ) { synchronized ( lock ) { // ... } }
"public boolean verifyUser ( String username , char [ ] password ) { List < char [ ] > dbpass = getPasswords ( username ) ; if ( dbpass.contains ( password ) ) { overwriteWithNonsense ( password ) ; return true ; } overwriteWithNonsense ( password ) ; return false ; } if ( dbpass.stream ( ) .anyMatch ( pw - > Arrays.equals ( pw , password ) ) ) { overwriteWithNonsense ( password ) ; return true ; }"
"< resources > < declare-styleable name= '' Widget '' > < attr name= '' headers '' format= '' reference '' / > < attr name= '' height '' format= '' integer '' / > < /declare-styleable > < /resources > public Widget ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; TypedArray attr = context.obtainStyledAttributes ( attrs , R.styleable.Widget ) ; String [ ] columns = ( String [ ] ) attr .getTextArray ( R.styleable.Widget_headers ) ; int height = attr.getInt ( R.styleable.Widget_height , 0 ) ; } < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : widget= '' http : //schemas.android.com/apk/lib/com.sample.custom '' android : id= '' @ +id/statistics_fragment_layout '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < com.sample.custom.Widget android : id= '' @ +id/widget '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' widget : headers= '' @ array/headers '' > < /com.sample.custom.Widget > < /LinearLayout > < resources > < string-array name= '' headers '' > < item > Header1 < /item > < item > Header2 < /item > < item > Header3 < /item > < /string-array > < /resources >"
DateFormat formatter = new SimpleDateFormat ( `` hh : mmaa '' ) ; formatter.parse ( `` 01:20pm '' ) java.text.ParseException : Unparseable date : `` 01:20pm '' at java.text.DateFormat.parse ( DateFormat.java:366 )
"@ iteration 6 - > sorting.QuickSort : :swap ( 15 bytes ) @ iteration 7 - > sorting.QuickSort : :partition ( 66 bytes ) @ iteration 7 - > sorting.QuickSort : :quickSort ( 29 bytes ) public class QuickSort { public < T extends Comparable < T > > void sort ( int [ ] table ) { quickSort ( table , 0 , table.length - 1 ) ; } private static < T extends Comparable < T > > void quickSort ( int [ ] table , int first , int last ) { if ( first < last ) { // There is data to be sorted . // Partition the table . int pivotIndex = partition ( table , first , last ) ; // Sort the left half . quickSort ( table , first , pivotIndex - 1 ) ; // Sort the right half . quickSort ( table , pivotIndex + 1 , last ) ; } } /** * @ author http : //en.wikipedia.org/wiki/Quick_Sort */ private static < T extends Comparable < T > > int partition ( int [ ] table , int first , int last ) { int pivotIndex = ( first + last ) / 2 ; int pivotValue = table [ pivotIndex ] ; swap ( table , pivotIndex , last ) ; int storeIndex = first ; for ( int i = first ; i < last ; i++ ) { if ( table [ i ] - ( pivotValue ) < = 0 ) { swap ( table , i , storeIndex ) ; storeIndex++ ; } } swap ( table , storeIndex , last ) ; return storeIndex ; } private static < T > void swap ( int [ ] a , int i , int j ) { int h = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = h ; } } public static void main ( String [ ] args ) throws InterruptedException , IOException { QuickSort quickSort = new QuickSort ( ) ; int TRIALS = 1000 ; File file = new File ( Long.toString ( System.currentTimeMillis ( ) ) ) ; System.out.println ( `` Saving @ \ '' '' + file.getAbsolutePath ( ) + `` \ '' '' ) ; for ( int x = 0 ; x < 30 ; ++x ) { // if ( x > 4 & & x < 17 ) // Thread.sleep ( 1000 ) ; int [ ] values = new int [ x ] ; long start = System.nanoTime ( ) ; for ( int i = 0 ; i < TRIALS ; ++i ) quickSort.sort ( values ) ; double duration = ( System.nanoTime ( ) - start ) / TRIALS ; String line = x + `` \t '' + duration ; System.out.println ( line ) ; FileUtils.writeStringToFile ( file , line + `` \r\n '' , true ) ; } }"
java.lang.RuntimeException : could not open : byteswritable : d68ce8fa-c56d-4ff5-bade-a4cfb3f666feat com.xuggle.mediatool.MediaReader.open ( MediaReader.java:637 ) XugglerJNI.IContainer_open__SWIG_0
"public class CraneSimulator { ... public JFrame frame ; public MyPanel panel ; public CraneSimulator ( ) { frame = new JFrame ( `` CraneSimulator '' ) ; ... panel = new MyPanel ( ) ; frame.add ( panel ) ; } public static void main ( String [ ] args ) { CraneSimulator simulator = new CraneSimulator ( ) ; } } class MyPanel extends JPanel { CraneBody body ; CraneArm arm1 ; ... Graphics2D graphics ; public MyPanel ( ) { body = new CraneBody ( ) ; arm1 = new CraneArm ( body ) ; ... addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent e ) { ... } } public void mouseReleased ( MouseEvent e ) { ... } } ) ; addMouseMotionListener ( new MouseAdapter ( ) { public void mouseDragged ( MouseEvent e ) { ... } } ) ; } public void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; graphics = ( Graphics2D ) g ; ... body.paint ( g ) ; arm1.paint ( g ) ; } } class CraneBody { ... public CraneBody ( ) { ... . } ... public void paint ( Graphics g ) { Graphics2D g2 = ( Graphics2D ) g ; // Use g2 to actual paint crane Body on screen here ( ie . g2.drawRect , etc ) } } class CraneArm { ... public CraneArm ( ) { ... . } ... public void paint ( Graphics g ) { Graphics2D g2 = ( Graphics2D ) g ; // Use g2 to actual paint the crane armon screen here ( ie . g2.drawRect , etc ) } }"
procedure blah ( ) ; const i : integer = 0 ; begin i : = i + 1 ; writeln ( i ) ; end ;
... .File [ ] files = directory.listFiles ( new FileFilter ( ) public boolean accept ( File file ) { return file.getName ( ) .endsWith ( `` .java '' ) ; } } ) ; File [ ] files = directory.listFiles ( # ( File file ) { return file.getName ( ) .endsWith ( `` .java '' ) ; } ) ;
"public static void main ( String [ ] args ) { String s = `` Smith , Bob I . `` , r = `` '' ; String [ ] names ; for ( int i =0 ; i < s.length ( ) ; i++ ) { if ( s.indexOf ( ' , ' ) ! = -1 ) { if ( s.charAt ( i ) ! = ' , ' ) r += s.charAt ( i ) ; } } names = r.split ( `` `` ) ; for ( int i = 0 ; i < names.length ; i++ ) { } System.out.println ( names [ 1 ] + '' `` + names [ 2 ] + `` `` + names [ 0 ] ) ; }"
"public void expire ( ) { Calendar c = Calendar.getInstance ( ) ; int sDate = c.get ( Calendar.YEAR ) ; int sMonth = c.get ( Calendar.MONTH ) +1 ; int sDay = c.get ( Calendar.DAY_OF_MONTH ) ; int sHour = c.get ( Calendar.HOUR_OF_DAY ) ; int sMin = c.get ( Calendar.MINUTE ) ; Toast.makeText ( getApplicationContext ( ) , `` '' +sDate+sMonth+sDay+ '' Hour is '' +sHour , Toast.LENGTH_LONG ) .show ( ) ; if ( sDay > =11 ) { System.exit ( 0 ) ; } }"
"public class Point { private final int x ; private final int y ; public Point ( int x , int y ) { this.x = x ; this.y = y ; } public int getX ( ) { return x ; } public int getY ( ) { return y ; } // ... } public boolean equals ( Point other ) { return ( this.getX ( ) == other.getX ( ) & & this.getY ( ) == other.getY ( ) ) ; } Point p1 = new Point ( 1 , 2 ) ; Point p2 = new Point ( 1 , 2 ) ; Point q = new Point ( 2 , 3 ) ; System.out.println ( p1.equals ( p2 ) ) ; // prints trueSystem.out.println ( p1.equals ( q ) ) ; // prints false import java.util.HashSet ; HashSet < Point > coll = new HashSet < Point > ( ) ; coll.add ( p1 ) ; System.out.println ( coll.contains ( p2 ) ) ; // prints false"
RelationalExpression : ShiftExpression RelationalExpression < ShiftExpression RelationalExpression > ShiftExpression RelationalExpression < = ShiftExpression RelationalExpression > = ShiftExpression RelationalExpression instanceof ReferenceType Expression2 : Expression3 [ Expression2Rest ] Expression2Rest : { InfixOp Expression3 } instanceof Type
int a=10 ; System.out.println ( a+++ a +++a ) ; System.out.println ( a++ +++a ) ; System.out.println ( a+++ ++a ) ;
"import java.io . * ; import java.net . * ; public class Test { public static void main ( String [ ] arguments ) throws Exception { Runnable runnable = ( ) - > { try { throwException ( ) ; } catch ( SocketException|EOFException exception ) { System.err.println ( `` wrong '' ) ; } catch ( IOException exception ) { System.err.println ( `` right '' ) ; } } ; runnable.run ( ) ; } private static void throwException ( ) throws IOException { throw new NotSerializableException ( ) ; } } $ javac -versionjavac 1.8.0_11 $ java -versionjava version `` 1.8.0_11 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_11-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.11-b03 , mixed mode )"
"public String replace ( CharSequence target , CharSequence replacement ) { return Pattern.compile ( target.toString ( ) , Pattern.LITERAL ) .matcher ( this ) .replaceAll ( Matcher.quoteReplacement ( replacement.toString ( ) ) ) ; } public static String replace ( String string , String searchFor , String replaceWith ) { StringBuilder result=new StringBuilder ( ) ; int index=0 ; int beginIndex=0 ; while ( ( index=string.indexOf ( searchFor , index ) ) ! =-1 ) { result.append ( string.substring ( beginIndex , index ) +replaceWith ) ; index+=searchFor.length ( ) ; beginIndex=index ; } result.append ( string.substring ( beginIndex , string.length ( ) ) ) ; return result.toString ( ) ; } public String [ ] split ( String regex , int limit ) { /* fastpath if the regex is a ( 1 ) one-char String and this character is not one of the RegEx 's meta characters `` . $ | ( ) [ { ^ ? *+\\ '' , or ( 2 ) two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter . */ char ch = 0 ; if ( ( ( regex.value.length == 1 & & `` . $ | ( ) [ { ^ ? *+\\ '' .indexOf ( ch = regex.charAt ( 0 ) ) == -1 ) || ( regex.length ( ) == 2 & & regex.charAt ( 0 ) == '\\ ' & & ( ( ( ch = regex.charAt ( 1 ) ) - ' 0 ' ) | ( ' 9'-ch ) ) < 0 & & ( ( ch- ' a ' ) | ( ' z'-ch ) ) < 0 & & ( ( ch- ' A ' ) | ( ' Z'-ch ) ) < 0 ) ) & & ( ch < Character.MIN_HIGH_SURROGATE || ch > Character.MAX_LOW_SURROGATE ) ) { int off = 0 ; int next = 0 ; boolean limited = limit > 0 ; ArrayList < String > list = new ArrayList < > ( ) ; while ( ( next = indexOf ( ch , off ) ) ! = -1 ) { if ( ! limited || list.size ( ) < limit - 1 ) { list.add ( substring ( off , next ) ) ; off = next + 1 ; } else { // last one //assert ( list.size ( ) == limit - 1 ) ; list.add ( substring ( off , value.length ) ) ; off = value.length ; break ; } } // If no match was found , return this if ( off == 0 ) return new String [ ] { this } ; // Add remaining segment if ( ! limited || list.size ( ) < limit ) list.add ( substring ( off , value.length ) ) ; // Construct result int resultSize = list.size ( ) ; if ( limit == 0 ) while ( resultSize > 0 & & list.get ( resultSize - 1 ) .length ( ) == 0 ) resultSize -- ; String [ ] result = new String [ resultSize ] ; return list.subList ( 0 , resultSize ) .toArray ( result ) ; } return Pattern.compile ( regex ) .split ( this , limit ) ; } public String replaceAll ( String regex , String replacement ) { return Pattern.compile ( regex ) .matcher ( this ) .replaceAll ( replacement ) ; } public String [ ] split ( String regex , int limit ) { return Pattern.compile ( regex ) .split ( this , limit ) ; }"
"class Callee { @ throws ( classOf [ MyCheckedException ] ) def doStuff ( ) { } } public class Caller { public static void main ( String [ ] args ) { // this wo n't compile ; the Java compiler complains that the catch block is unreachable // however without the catch block , it complains `` unhandled exception MyCheckedException '' try { new Callee ( ) .doStuff ( ) ; } catch ( MyCheckedException e ) { } } }"
com.ecwid.consul.transport.TransportException : javax.net.ssl.SSLHandshakeException : Remote host terminated the handshake at com.ecwid.consul.transport.AbstractHttpTransport.executeRequest ( AbstractHttpTransport.java:77 ) at com.ecwid.consul.transport.AbstractHttpTransport.makeGetRequest ( AbstractHttpTransport.java:34 ) at com.ecwid.consul.v1.ConsulRawClient.makeGetRequest ( ConsulRawClient.java:128 ) at com.ecwid.consul.v1.catalog.CatalogConsulClient.getCatalogServices ( CatalogConsulClient.java:120 ) at com.ecwid.consul.v1.ConsulClient.getCatalogServices ( ConsulClient.java:372 ) at org.springframework.cloud.consul.discovery.ConsulCatalogWatch.catalogServicesWatch ( ConsulCatalogWatch.java:129 ) at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run ( DelegatingErrorHandlingRunnable.java:54 ) at java.base/java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:515 ) at java.base/java.util.concurrent.FutureTask.runAndReset ( FutureTask.java:305 ) at java.base/java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.run ( ScheduledThreadPoolExecutor.java:305 ) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1128 ) at java.base/java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:628 ) at java.base/java.lang.Thread.run ( Thread.java:834 ) Caused by : javax.net.ssl.SSLHandshakeException : Remote host terminated the handshake at java.base/sun.security.ssl.SSLSocketImpl.handleEOF ( SSLSocketImpl.java:1313 ) at java.base/sun.security.ssl.SSLSocketImpl.decode ( SSLSocketImpl.java:1152 ) at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord ( SSLSocketImpl.java:1055 ) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake ( SSLSocketImpl.java:395 ) at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket ( SSLConnectionSocketFactory.java:394 ) at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket ( SSLConnectionSocketFactory.java:353 ) at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect ( DefaultHttpClientConnectionOperator.java:134 ) at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect ( PoolingHttpClientConnectionManager.java:353 ) at org.apache.http.impl.execchain.MainClientExec.establishRoute ( MainClientExec.java:380 )
"replace ( `` input '' , `` ( . * ) * '' , `` $ 1 '' )"
final Object lock = new Object ( ) ; // ... synchronized ( lock ) { // do stuff } if ( Thread.holdsLock ( lock ) ) { throw new IllegalStateException ( ) ; } synchronized ( lock ) { // do more stuff }
public class FinalTest implements AnotherClass { private final Something something ; private final otherthing ; @ Override public void setStuff ( Something something ) { this.something = something ; this.otherthing = new SomeClass ( something ) ; } public FinalTest ( Something something ) { setStuff ( something ) ; } }
public class Test { public static void main ( String [ ] args ) { System.out.println ( `` Hello '' ) ; Test : System.out.println ( `` World '' ) ; } }
`` \nerferf erferfre erferf 12545 '' + `` \ndsf erf '' + `` \nsdsfd refrf refref '' + `` \nerferf erferfre erferf 12545 '' + `` \ndsf erf '' + `` \nsdsfd refrf refref '' + `` \nerferf erferfre erferf 12545 '' + `` \ndsf erf '' + `` \nsdsfd refrf refref '' + `` \nerferf erferfre erferf 12545 '' + `` \\n.*\\n.*\\n.*\\n.*\\n.*\\n . *\\d { 4 } ''
"Optional < Int > value = someList.stream ( ) . { singleOrEmpty } [ ] - > Optional.empty ( ) [ 1 ] - > Optional.of ( 1 ) [ 1 , 1 ] - > Optional.empty ( ) etc . public static < T > Optional < T > singleOrEmpty ( Stream < T > stream ) { return stream.limit ( 2 ) .map ( Optional : :ofNullable ) .reduce ( Optional.empty ( ) , ( a , b ) - > a.isPresent ( ) ^ b.isPresent ( ) ? b : Optional.empty ( ) ) ; } singleOrEmpty ( someList.stream ( ) .filter ( ... ) .map ( ... ) ) someList.stream ( ) .filter ( ) .map ( ) .singleOrEmpty ( )"
"import java.util.Date ; import java.util.TimeZone ; public class CheckTime { public static void main ( String [ ] args ) { TimeZone tz = TimeZone.getDefault ( ) ; Date now = new Date ( ) ; System.out.println ( `` Current time `` + now.toString ( ) ) ; System.out.println ( `` Current time zone `` + tz.getDisplayName ( ) ) ; System.out.println ( `` Current time zone in DST ? `` + tz.inDaylightTime ( now ) ) ; } } $ java -versionopenjdk version `` 1.8.0_222 '' OpenJDK Runtime Environment ( build 1.8.0_222-8u222-b10-1ubuntu1~18.04.1-b10 ) OpenJDK 64-Bit Server VM ( build 25.222-b10 , mixed mode ) $ export TZ= '' STD+7DST+6 , M3.2.0/02:00:00 , M11.1.0/02:00:00 '' $ dateFri Aug 9 07:02:27 DST 2019 $ java CheckTimeCurrent time Fri Aug 09 06:02:30 GMT-07:00 2019Current timezone GMT-07:00Current timezone in DST ? false $ export TZ= '' America/Denver '' $ dateFri Aug 9 07:03:29 MDT 2019 $ java CheckTimeCurrent time Fri Aug 09 07:03:32 MDT 2019Current timezone Mountain Standard TimeCurrent timezone in DST ? true $ java -versionopenjdk version `` 1.8.0_162 '' OpenJDK Runtime Environment ( Zulu Embedded 8.27.0.91-linux-aarch32hf ) ( build 1.8.0_162-b91 ) $ export TZ= '' STD+7DST+6 , M3.2.0/02:00:00 , M11.1.0/02:00:00 '' $ dateFri Aug 9 07:06:59 DST 2019 $ java CheckTimeCurrent time Fri Aug 09 06:07:03 GMT-07:00 2019Current time zone GMT-07:00Current time zone in DST ? false $ export TZ= '' America/Denver '' $ dateFri Aug 9 07:09:45 MDT 2019 $ java CheckTimeCurrent time Fri Aug 09 07:09:49 MDT 2019Current time zone Mountain Standard TimeCurrent time zone in DST ? true $ java -versionjava version `` 1.8.0_65 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_65-b17 ) Java HotSpot ( TM ) Client VM ( build 25.65-b01 , mixed mode ) $ export TZ= '' STD+7DST+6 , M3.2.0/02:00:00 , M11.1.0/02:00:00 '' $ dateFri Aug 9 07:12:52 DST 2019 $ java CheckTimeCurrent time Fri Aug 09 06:12:57 GMT-07:00 2019Current time zone GMT-07:00Current time zone in DST ? false $ export TZ= '' America/Denver '' $ dateFri Aug 9 07:13:42 MDT 2019 $ java CheckTimeCurrent time Fri Aug 09 07:13:44 MDT 2019Current time zone Mountain Standard TimeCurrent time zone in DST ? true $ java -versionopenjdk version `` 1.8.0_212 '' OpenJDK Runtime Environment Corretto-8.212.04.2 ( build 1.8.0_212-b04 ) OpenJDK 64-Bit Server VM Corretto-8.212.04.2 ( build 25.212-b04 , mixed mode ) $ export TZ= '' STD+7DST+6 , M3.2.0/02:00:00 , M11.1.0/02:00:00 '' $ dateFri Aug 9 09:47:14 DST 2019 $ java CheckTimeCurrent time Fri Aug 09 09:47:18 GMT-06:00 2019Current timezone GMT-06:00Current timezone in DST ? false $ export TZ= '' America/Denver '' $ dateFri Aug 9 09:49:04 MDT 2019 $ java CheckTimeCurrent time Fri Aug 09 09:49:08 MDT 2019Current timezone Mountain Standard TimeCurrent timezone in DST ? true $ java -versionjava version `` 1.8.0_161 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_161-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.161-b12 , mixed mode ) $ export TZ= '' STD+7DST+6 , M3.2.0/02:00:00 , M11.1.0/02:00:00 '' $ dateFri Aug 9 10:19:23 DST 2019 $ java CheckTimeCurrent time Fri Aug 09 10:19:40 GMT-06:00 2019Current timezone GMT-06:00Current timezone in DST ? false $ export TZ= '' America/Denver '' $ dateFri Aug 9 10:21:03 MDT 2019 $ java CheckTimeCurrent time Fri Aug 09 10:21:07 MDT 2019Current timezone Mountain Standard TimeCurrent timezone in DST ? true"
int temp = 10 ; String temp_name = `` temp '' ;
public class Testing { static void p ( int i ) { System.out.println ( `` hello '' + i ) ; i++ ; p ( i ) ; } public static void main ( String [ ] args ) { p ( 1 ) ; } }
"import java.util.ArrayList ; import java.util.HashSet ; public class Main { public static void main ( String [ ] args ) { //Sample Word String word = `` Tomorrow-Today '' ; //Sample Letters for permutation String rule_char_set = `` tw '' ; ArrayList < Character > test1 = lettersFound ( word , rule_char_set ) ; printPermutations ( test1 ) ; } public static void printPermutations ( ArrayList < Character > arrayList ) { char [ ] chars = new char [ arrayList.size ( ) ] ; int charIterator = 0 ; for ( int i=0 ; i < arrayList.size ( ) ; i++ ) { chars [ i ] = arrayList.get ( i ) ; } for ( int i = 0 , n = ( int ) Math.pow ( 2 , chars.length ) ; i < n ; i++ ) { char [ ] permutation = new char [ chars.length ] ; for ( int j =0 ; j < chars.length ; j++ ) { permutation [ j ] = ( isBitSet ( i , j ) ) ? Character.toUpperCase ( chars [ j ] ) : chars [ j ] ; } System.out.println ( permutation ) ; } } public static boolean isBitSet ( int n , int offset ) { return ( n > > offset & 1 ) ! = 0 ; } public static ArrayList < Character > lettersFound ( String word , String rule_char_set ) { //Convert the two parameter strings to two character arrays char [ ] wordArray = word.toLowerCase ( ) .toCharArray ( ) ; char [ ] rule_char_setArray = rule_char_set.toLowerCase ( ) .toCharArray ( ) ; //ArrayList to hold found characters ; ArrayList < Character > found = new ArrayList < Character > ( ) ; //Increments the found ArrayList that stores the existent values . int foundCounter = 0 ; for ( int i = 0 ; i < rule_char_setArray.length ; i++ ) { for ( int k = 0 ; k < wordArray.length ; k++ ) { if ( rule_char_setArray [ i ] == wordArray [ k ] ) { found.add ( foundCounter , rule_char_setArray [ i ] ) ; foundCounter++ ; } } } //Convert to a HashSet to get rid of duplicates HashSet < Character > uniqueSet = new HashSet < > ( found ) ; //Convert back to an ArrayList ( to be returned ) after filtration of duplicates . ArrayList < Character > filtered = new ArrayList < > ( uniqueSet ) ; return filtered ; } }"
type [ ] a = new type [ 0 ] ; type [ ] a = null ;
"string noNewlines = new Regex ( `` \\n+ '' ) .Replace ( `` `` , oldString ) ;"
"public static void main ( String [ ] args ) throws Exception { int hello = 100 ; char a2 = 100 ; short y1o = 100 ; int hei = 100 ; System.out.println ( a2+ '' `` +y1o+ '' , `` +hei+ '' , `` +hello ) ; } public static void main ( String [ ] args ) throws Exception { byte hello = 100 ; char a2 = 100 ; byte y1o = 100 ; byte hei = 100 ; System.out.println ( a2 + `` `` + y1o + `` , `` + hei + `` , `` + hello ) ; } public static void main ( String [ ] args ) throws Exception { int hello = 100 ; char a2 = 'd ' ; short y1o = 100 ; byte hei = 100 ; System.out.println ( a2 + `` `` + y1o + `` , `` + hei + `` , `` + hello ) ; }"
"Context context = Context.create ( ) ; Value v = context.getPolyglotBindings ( ) ; v.putMember ( `` arguments '' , arguments ) ; final Value result = context.eval ( `` python '' , contentsOfMyScript ) ; System.out.println ( result ) ; return jsResult ; const args = Interop.import ( 'arguments ' ) ; import Interopargs = Interop.import ( 'arguments ' ) def main ( ) : return argsmain ( )"
< dependency > < groupId > javax.xml.bind < /groupId > < artifactId > jaxb-api < /artifactId > < /dependency > < dependency > < groupId > javax.xml.ws < /groupId > < artifactId > jaxws-api < /artifactId > < /dependency > < dependency > < groupId > javax.xml.soap < /groupId > < artifactId > javax.xml.soap-api < /artifactId > < /dependency > < dependency > < groupId > javax.annotation < /groupId > < artifactId > javax.annotation-api < /artifactId > < /dependency > < dependency > < groupId > javax.jws < /groupId > < artifactId > jsr181-api < /artifactId > < /dependency > < ! -- Provided dependencies -- > < dependency > < groupId > com.sun.xml.bind < /groupId > < artifactId > jaxb-core < /artifactId > < /dependency > < dependency > < groupId > com.sun.xml.bind < /groupId > < artifactId > jaxb-impl < /artifactId > < /dependency > < dependency > < groupId > com.sun.xml.ws < /groupId > < artifactId > policy < /artifactId > < /dependency > < dependency > < groupId > org.glassfish.gmbal < /groupId > < artifactId > gmbal-api-only < /artifactId > < /dependency > < dependency > < groupId > org.jvnet.staxex < /groupId > < artifactId > stax-ex < /artifactId > < /dependency > < dependency > < groupId > com.sun.xml.stream.buffer < /groupId > < artifactId > streambuffer < /artifactId > < /dependency > < dependency > < groupId > org.jvnet.mimepull < /groupId > < artifactId > mimepull < /artifactId > < /dependency > < dependency > < groupId > com.sun.xml.fastinfoset < /groupId > < artifactId > FastInfoset < /artifactId > < /dependency > < dependency > < groupId > org.glassfish.ha < /groupId > < artifactId > ha-api < /artifactId > < /dependency > < dependency > < groupId > com.sun.xml.messaging.saaj < /groupId > < artifactId > saaj-impl < /artifactId > < /dependency > < dependency > < artifactId > woodstox-core-asl < /artifactId > < groupId > org.codehaus.woodstox < /groupId > < /dependency > < dependency > < groupId > org.codehaus.woodstox < /groupId > < artifactId > stax2-api < /artifactId > < /dependency > < dependency > < groupId > javax.servlet < /groupId > < artifactId > javax.servlet-api < /artifactId > < scope > provided < /scope > < /dependency > < dependency > < groupId > com.sun.org.apache.xml.internal < /groupId > < artifactId > resolver < /artifactId > < /dependency >
ArrayUtils ( ) public ArrayUtils ( ) { super ( ) ; }
public class ClassOne { public ClassOne ( ) { fireMethod ( ) ; } protected void fireMethod ( ) { } } public class ClassTwo extends ClassOne { boolean bool = true ; public ClassTwo ( ) { super ( ) ; } @ Override protected void fireMethod ( ) { System.out.println ( `` bool= '' +bool ) ; } public static void main ( String [ ] args ) { new ClassTwo ( ) ; } } bool=false
"Math.pow ( 8 , 1/3 )"
"public interface Combinable < V > { V add ( V other ) ; } public interface Sublistable < V > { boolean hasSublist ( ) ; List < V > getSublist ( ) ; void setSublist ( List < V > sublist ) ; } public interface HasUniqueIdentifier { String getUniqueIdentifier ( ) ; } public class Grandparent implements HasUniqueIdentifier , Sublistable < Parent > , Combinable < Grandparent > { List < Parent > sublist ; ... } public class Parent implements HasUniqueIdentifier , Sublistable < Child > , Combinable < Parent > { List < Child > sublist ; ... } public class Child implements HasUniqueIdentifier , Sublistable < Grandchild > , Combinable < Child > { List < Grandchild > sublist ; ... } public class Grandchild implements HasUniqueIdentifier , Combinable < Grandchild > { } public < V , T extends HasUniqueIdentifier & Combinable < T > & Sublistable < V > > List < T > combine ( List < T > items ) { Multimap < String , T > similarItemMap = HashMultimap.create ( ) ; for ( T item : items ) { similarItemMap.put ( item.getUniqueIdentifier ( ) , item ) ; } List < T > output = new ArrayList < T > ( ) ; for ( Collection < T > similarCollection : similarItemMap.asMap ( ) .values ( ) ) { List < T > similarItems = Lists.newArrayList ( similarCollection ) ; T source = similarItems.get ( 0 ) ; for ( int i = 0 ; i < similarItems.size ( ) ; i++ ) { source = source.add ( similarItems.get ( i ) ) ; } output.add ( source ) ; } for ( T item : output ) { if ( item.hasSublist ( ) ) { item.setSublist ( combine ( item.getSublist ) ) ; } } return output ; } public < V extends HasUniqueIdentifier & Combinable < V > , T extends HasUniqueIdentifier & Combinable < T > > List < T > combine ( List < T > items ) { Multimap < String , T > similarItemMap = HashMultimap.create ( ) ; for ( T item : items ) { similarItemMap.put ( item.getUniqueIdentifier ( ) , item ) ; } List < T > output = new ArrayList < T > ( ) ; for ( Collection < T > similarCollection : similarItemMap.asMap ( ) .values ( ) ) { List < T > similarItems = Lists.newArrayList ( similarCollection ) ; T source = similarItems.get ( 0 ) ; for ( int i = 0 ; i < similarItems.size ( ) ; i++ ) { source = source.add ( similarItems.get ( i ) ) ; } output.add ( source ) ; } for ( T item : output ) { if ( item instanceof Sublistable < ? > ) { @ SuppressWarnings ( `` unchecked '' ) Sublistable < V > sublistableItem = ( ( Sublistable < V > ) sublistableItem ) ; if ( sublistableItem.hasSublist ( ) ) { sublistableItem.setSublist ( combine ( sublistableItem.getSublist ) ) ; } } } return output ; }"
"private void startBufferedWrite ( final File file ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { output = null ; try { output = new DataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( file ) ) ) ; while ( mIsRecording ) { int readSize = mRecorder.read ( buffer , 0 , buffer.length ) ; if ( readSize > 0 ) { int bytesEncoded = androidLame.encode ( buffer , buffer , readSize , mp3buffer ) ; if ( bytesEncoded > 0 ) { try { output.write ( mp3buffer , 0 , bytesEncoded ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } } } } catch ( IOException e ) { Log.e ( `` Error writing file : `` , e.getMessage ( ) ) ; } } } ) .start ( ) ; } private void old_mp3_to_new_mp3 ( final File mp3 , final File mp3_new ) throws IOException { try { int size = 4 ; byte [ ] rawData = new byte [ ( int ) mp3.length ( ) ] ; RandomAccessFile input = new RandomAccessFile ( mp3 , `` rw '' ) ; byte [ ] header = new byte [ size ] ; input.read ( header , 0 , size ) ; //noinspection ResultOfMethodCallIgnored input.read ( rawData ) ; input.close ( ) ; byte [ ] bytes = new byte [ 100000 ] ; //create random bytes to write to mp3 as Random audio ? ? ? new Random ( ) .nextBytes ( bytes ) ; FileOutputStream output = new FileOutputStream ( mp3_encrypted ) ; FileChannel channel = output.getChannel ( ) ; channel.write ( ByteBuffer.wrap ( header ) ) ; channel.write ( ByteBuffer.wrap ( rawData ) ) ; channel.write ( ByteBuffer.wrap ( bytes ) ) ; // if comment this line the mp3 new file is generated ok but it 's the same with recording , but if wanted to write new random bytes the mp3 is generated but the file says that is corrupted ... output.close ( ) ; //noinspection ResultOfMethodCallIgnored mp3.delete ( ) ; callbackListener.perfundoi_shkrimi_dhe_enkriptimi ( mp3_encrypted ) ; } catch ( Exception ignored ) { callbackListener.perfundoi_shkrimi_dhe_enkriptimi ( mp3_encrypted ) ; } }"
"import java.awt.Graphics ; import java.awt.Dimension ; import java.awt.Color ; import javax.swing.JFrame ; import javax.swing.JPanel ; import javax.swing.SwingUtilities ; import javax.swing.Timer ; class Game { public static final int screenWidth = 160 ; public static final int screenHeight = 140 ; /** * Create and show the GUI . */ private static void createAndShowGUI ( ) { /* Create the GUI . */ JFrame frame = new JFrame ( `` Example '' ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.setResizable ( false ) ; frame.getContentPane ( ) .add ( new GamePanel ( ) ) ; frame.pack ( ) ; /* Show the GUI . */ frame.setVisible ( true ) ; } /** * Run the game . * * @ param args the list of command-line arguments */ public static void main ( String [ ] args ) { /* Schedule the GUI to be created on the EDT . */ SwingUtilities.invokeLater ( ( ) - > createAndShowGUI ( ) ) ; } } /** * A GamePanel widget updates and shows the game scene . */class GamePanel extends JPanel { private Square square ; /** * Create a game panel and start its update-and-draw cycle */ public GamePanel ( ) { super ( ) ; /* Set the size of the game screen . */ setPreferredSize ( new Dimension ( Game.screenWidth , Game.screenHeight ) ) ; /* Create the square in the game world . */ square = new Square ( 0 , 0 , 32 , 32 , Square.Direction.LEFT ) ; /* Update the scene every 40 milliseconds . */ Timer timer = new Timer ( 40 , ( e ) - > updateScene ( ) ) ; timer.start ( ) ; } /** * Paint the game scene using a graphics context . * * @ param g the graphics context */ @ Override protected void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; /* Clear the screen . */ g.setColor ( Color.WHITE ) ; g.fillRect ( 0 , 0 , Game.screenWidth , Game.screenHeight ) ; /* Draw all objects in the scene . */ square.draw ( g ) ; } /** * Update the game state . */ private void updateScene ( ) { /* Update all objects in the scene . */ square.update ( ) ; /* Request the scene to be repainted . */ repaint ( ) ; } } /** * A Square is a game object which looks like a square . */class Square { public static enum Direction { LEFT , RIGHT } ; private int x ; private int y ; private int width ; private int height ; private Direction direction ; /** * Create a square game object . * * @ param x the square 's x position * @ param y the square 's y position * @ param width the square 's width ( in pixels ) * @ param height the square 's height ( in pixels ) * @ param direction the square 's direction of movement */ public Square ( int x , int y , int width , int height , Direction direction ) { this.x = x ; this.y = y ; this.width = width ; this.height = height ; this.direction = direction ; } /** * Draw the square using a graphics context . * * @ param g the graphics context */ public void draw ( Graphics g ) { g.setColor ( Color.RED ) ; g.fillRect ( x , y , width , height ) ; g.setColor ( Color.BLACK ) ; g.drawRect ( x , y , width , height ) ; } /** * Update the square 's state . * * The square slides horizontally * until it reaches the edge of the screen , * at which point it begins sliding in the * opposite direction . * * This should be called once per frame . */ public void update ( ) { if ( direction == Direction.LEFT ) { x -- ; if ( x < = 0 ) { direction = Direction.RIGHT ; } } else if ( direction == Direction.RIGHT ) { x++ ; if ( x + width > = Game.screenWidth ) { direction = Direction.LEFT ; } } } }"
//Object [ ] ... vs Integer [ ] ... public static String foo ( Object [ ] ... args ) { return `` Object [ ] args '' ; } public static String foo ( Integer [ ] ... args ) { return `` Integer [ ] args '' ; } //Object ... vs Integer [ ] ... public static String bar ( Object ... args ) { return `` Object args '' ; } public static String bar ( Integer [ ] ... args ) { return `` Integer [ ] args '' ; } Integer [ ] i = { 5 } ; System.out.println ( foo ( i ) ) ; //Object [ ] ... vs Integer [ ] ... System.out.println ( bar ( i ) ) ; //Object ... vs Integer [ ] ... Integer [ ] argsObject args
"@ Valuepublic class Abc { @ NonNull private final String id ; @ NonNull private final Integer id2 ; @ NonNull private final List < String > data ; @ NonNull private final String otherData ; } GSON.fromJson ( str , Abc.class ) ; { `` id '' : `` dsada '' , '' id2 '' : 12 , '' data '' : [ `` dsadsa '' ] }"
Sum < n=0..i > 1 / ( P_i [ n ] *P_i [ n ] ) > = 1. public static viod main ( String args [ ] ) { double sum = 0.0 ; long i = 2 ; while ( sum < 1.0 ) { sum += 1.0 / ( i*Math.log ( i ) *i*Math.log ( i ) ) ; i++ ; } System.out.println ( i+ '' : `` +sum ) ; } sum += 1.0 / ( i*i )
"ViewDataBinding viewDataBinding = DataBindingUtil.inflate ( layoutInflater , getLayoutResource ( ) , viewGroup , false ) ; ViewStub viewStub = ( ViewStub ) viewDataBinding.getRoot ( ) .findViewById ( R.id.stub ) ; viewStub.setLayoutResource ( getLayoutResource ( ) ) ;"
Predicate < Integer > l1 = x - > x == 1 ; Predicate < Integer > l2 = y - > y == 1 ;
"output = input.replaceAll ( `` ^ ( , ? \\W ? ) + '' , `` '' ) ; //replace commas at the beginningoutput = output.replaceAll ( `` ( , ? \\W ? ) + $ '' , `` '' ) ; //replace commas at the end"
MyClass monkey ; ... if ( monkey ! = null ) { ... } boolean hasMonkey ; //This is set to TRUE when monkey is not nullMyClass monkey ; ... if ( hasMonkey ) { ... }
int x = ( right + left ) / 2 ; int x = left + ( right - left ) / 2 ;
"public class AtomicJDK9 { static AtomicInteger ai = new AtomicInteger ( 0 ) ; public static void main ( String [ ] args ) { int sum = 0 ; for ( int i = 0 ; i < 30_000 ; ++i ) { sum += atomicIncrement ( ) ; } System.out.println ( sum ) ; } public static int atomicIncrement ( ) { ai.getAndAdd ( 12 ) ; return ai.get ( ) ; } } java -XX : +UnlockDiagnosticVMOptions -XX : -TieredCompilation -XX : +PrintIntrinsics AtomicJDK9 @ HotSpotIntrinsicCandidate public final int getAndAddInt ( Object o , long offset , int delta ) { int v ; do { v = getIntVolatile ( o , offset ) ; } while ( ! weakCompareAndSwapIntVolatile ( o , offset , v , v + delta ) ) ; return v ; } @ 8 jdk.internal.misc.Unsafe : :getAndAddInt ( 27 bytes ) ( intrinsic ) @ 8 jdk.internal.misc.Unsafe : :getAndAddInt ( 27 bytes ) ( intrinsic ) @ 3 jdk.internal.misc.Unsafe : :getIntVolatile ( 0 bytes ) ( intrinsic ) @ 18 jdk.internal.misc.Unsafe : :weakCompareAndSwapIntVolatile ( 11 bytes ) ( intrinsic ) @ 7 jdk.internal.misc.Unsafe : :compareAndSwapInt ( 0 bytes ) ( intrinsic ) @ 8 jdk.internal.misc.Unsafe : :getAndAddInt ( 27 bytes ) ( intrinsic )"
package java.lang.annotation ; @ Documented @ Retention ( RetentionPolicy.RUNTIME ) @ Target ( ElementType.ANNOTATION_TYPE ) public @ interface Retention { /** * Returns the retention policy . * @ return the retention policy */ RetentionPolicy value ( ) ; }
byte b = -1 ; System.out.println ( b > > 1 ) ; //-1 char c = 0xFFFF ; //I assume now the sign bit is 1.System.out.println ( c > > 1 ) ; //32767 ? ? ? ? WHY
"public MyChaining ( ) { System.out.println ( `` In default constructor ... '' ) ; } public MyChaining ( int i ) { this ( ) ; System.out.println ( `` In single parameter constructor ... '' ) ; } public MyChaining ( int i , int j ) { this ( j ) ; System.out.println ( `` In double parameter constructor ... '' ) ; } public Location ( String _Name ) throws IOException , JSONException { //Three lines of unique code ( must be executed before the shared code ) //Shared code } public Location ( JSONObject json ) { //Shared code }"
"public CustomMenu ( MainScreen screen ) { super ( vfm ) ; Menu menu = screen.getMenu ( 0 ) ; for ( int i = 0 ; i < menu.getSize ( ) ; i++ ) { final MenuItem finalMenu = menu.getItem ( i ) ; vfm.add ( new CustomMenuItem ( finalMenu.toString ( ) , Field.FOCUSABLE ) { protected boolean invokeAction ( int action ) { finalMenu.run ( ) ; return true ; } } ) ; } }"
"List < String/*or other object*/ > arrList = new ArrayList ( ) ; //Imports List , ArrayListArrayList < String/*or other object*/ > arrList = new ArrayList ( ) ; //Imports just ArrayList"
"public class MemOverflow { public static void main ( final String [ ] args ) { System.out.println ( `` Heap max size : `` + ( Runtime.getRuntime ( ) .maxMemory ( ) / 1024 / 1024 ) + `` MB '' ) ; long [ ] array = new long [ 100_000_000 ] ; // ~800MB System.out.println ( array.length ) ; } } $ javac MemOverflow.java & & java -Xmx800m MemOverflowHeap max size : 800MB100000000 $ javac MemOverflow.java & & java -Xmx100m MemOverflowHeap max size : 100MBException in thread `` main '' java.lang.OutOfMemoryError : Java heap space at MemOverflow.main ( MemOverflow.java:5 ) # I 'm expected the `` Requested array size exceeds VM limit '' error here openjdk version `` 11.0.8 '' 2020-07-14OpenJDK Runtime Environment ( build 11.0.8+10-post-Ubuntu-0ubuntu120.04 ) OpenJDK 64-Bit Server VM ( build 11.0.8+10-post-Ubuntu-0ubuntu120.04 , mixed mode ) java version `` 15 '' 2020-09-15Java ( TM ) SE Runtime Environment ( build 15+36-1562 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 15+36-1562 , mixed mode , sharing )"
"} finally { if ( in ! = null ) { try { in.close ( ) ; } catch ( IOException ex ) { // There is nothing we can do if close fails } } if ( out ! = null ) { try { out.close ( ) ; } catch ( IOException ex ) { // Again , there is nothing we can do if close fails } } } try { OutputStream out = new FileOutputStream ( dst ) ; try { byte [ ] buf = new byte [ BUFFER_SIZE ] ; int n ; while ( ( n = in.read ( buf ) ) > = 0 ) out.write ( buf , 0 , n ) ; } finally { out.close ( ) ; } } finally { in.close ( ) ; }"
"package com.test.client ; import com.google.gwt.ajaxloader.client.AjaxLoader ; import com.google.gwt.ajaxloader.client.AjaxLoader.AjaxLoaderOptions ; import com.google.gwt.core.client.EntryPoint ; import com.google.gwt.core.client.JsArray ; import com.google.gwt.dom.client.Document ; import com.google.maps.gwt.client.GoogleMap ; import com.google.maps.gwt.client.LatLng ; import com.google.maps.gwt.client.MapOptions ; import com.google.maps.gwt.client.MapTypeId ; import com.google.maps.gwt.client.MapTypeStyle ; import com.google.maps.gwt.client.MapTypeStyleElementType ; import com.google.maps.gwt.client.MapTypeStyleFeatureType ; import com.google.maps.gwt.client.MapTypeStyler ; public class GwtTest implements EntryPoint { @ Override public void onModuleLoad ( ) { AjaxLoaderOptions options = AjaxLoaderOptions.newInstance ( ) ; options.setOtherParms ( `` sensor=false '' ) ; Runnable callback = new Runnable ( ) { public void run ( ) { createMap ( ) ; } } ; AjaxLoader.loadApi ( `` maps '' , `` 3 '' , callback , options ) ; } public void createMap ( ) { JsArray < MapTypeStyle > styles = ( JsArray < MapTypeStyle > ) JsArray. < MapTypeStyle > createArray ( ) ; JsArray < MapTypeStyler > roadStylers = ( JsArray < MapTypeStyler > ) JsArray. < MapTypeStyler > createArray ( ) ; MapTypeStyler roadStyler = MapTypeStyler.visibility ( `` off '' ) ; roadStylers.push ( roadStyler ) ; MapTypeStyle roadStyle = MapTypeStyle.create ( ) ; roadStyle.setStylers ( roadStylers ) ; roadStyle.setFeatureType ( MapTypeStyleFeatureType.ROAD ) ; //this is line 43 roadStyle.setElementType ( MapTypeStyleElementType.ALL ) ; styles.push ( roadStyle ) ; MapOptions mapOpts = MapOptions.create ( ) ; mapOpts.setZoom ( 4 ) ; mapOpts.setCenter ( LatLng.create ( 37.09024 , -95.712891 ) ) ; mapOpts.setMapTypeId ( MapTypeId.TERRAIN ) ; mapOpts.setStreetViewControl ( false ) ; mapOpts.setStyles ( styles ) ; final GoogleMap map = GoogleMap.create ( Document.get ( ) .getElementById ( `` map_canvas '' ) , mapOpts ) ; } } 14:49:52.756 [ ERROR ] [ gwttest ] Uncaught exception escapedjava.lang.ExceptionInInitializerError : null at com.test.client.GwtTest.createMap ( GwtTest.java:43 ) at com.test.client.GwtTest $ 1.run ( GwtTest.java:25 ) at com.google.gwt.ajaxloader.client.ExceptionHelper.runProtected ( ExceptionHelper.java:36 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:483 ) at com.google.gwt.dev.shell.MethodAdaptor.invoke ( MethodAdaptor.java:103 ) at com.google.gwt.dev.shell.MethodDispatch.invoke ( MethodDispatch.java:71 ) at com.google.gwt.dev.shell.OophmSessionHandler.invoke ( OophmSessionHandler.java:172 ) at com.google.gwt.dev.shell.BrowserChannelServer.reactToMessages ( BrowserChannelServer.java:293 ) at com.google.gwt.dev.shell.BrowserChannelServer.processConnection ( BrowserChannelServer.java:547 ) at com.google.gwt.dev.shell.BrowserChannelServer.run ( BrowserChannelServer.java:364 ) at java.lang.Thread.run ( Thread.java:745 ) Caused by : java.lang.NullPointerException : null at com.google.maps.gwt.client.MapTypeStyleFeatureType $ .register ( MapTypeStyleFeatureType.java:227 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:483 ) at com.google.gwt.dev.shell.MethodAdaptor.invoke ( MethodAdaptor.java:103 ) at com.google.gwt.dev.shell.MethodDispatch.invoke ( MethodDispatch.java:71 ) at com.google.gwt.dev.shell.OophmSessionHandler.invoke ( OophmSessionHandler.java:172 ) at com.google.gwt.dev.shell.BrowserChannelServer.reactToMessagesWhileWaitingForReturn ( BrowserChannelServer.java:338 ) at com.google.gwt.dev.shell.BrowserChannelServer.invokeJavascript ( BrowserChannelServer.java:219 ) at com.google.gwt.dev.shell.ModuleSpaceOOPHM.doInvoke ( ModuleSpaceOOPHM.java:136 ) at com.google.gwt.dev.shell.ModuleSpace.invokeNative ( ModuleSpace.java:576 ) at com.google.gwt.dev.shell.ModuleSpace.invokeNativeObject ( ModuleSpace.java:284 ) at com.google.gwt.dev.shell.JavaScriptHost.invokeNativeObject ( JavaScriptHost.java:91 ) at com.google.maps.gwt.client.MapTypeStyleFeatureType $ .create ( MapTypeStyleFeatureType.java ) at com.google.maps.gwt.client.MapTypeStyleFeatureType $ . & lt ; clinit & gt ; ( MapTypeStyleFeatureType.java:39 ) at com.test.client.GwtTest.createMap ( GwtTest.java:43 ) at com.test.client.GwtTest $ 1.run ( GwtTest.java:25 ) at com.google.gwt.ajaxloader.client.ExceptionHelper.runProtected ( ExceptionHelper.java:36 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:483 ) at com.google.gwt.dev.shell.MethodAdaptor.invoke ( MethodAdaptor.java:103 ) at com.google.gwt.dev.shell.MethodDispatch.invoke ( MethodDispatch.java:71 ) at com.google.gwt.dev.shell.OophmSessionHandler.invoke ( OophmSessionHandler.java:172 ) at com.google.gwt.dev.shell.BrowserChannelServer.reactToMessages ( BrowserChannelServer.java:293 ) at com.google.gwt.dev.shell.BrowserChannelServer.processConnection ( BrowserChannelServer.java:547 ) at com.google.gwt.dev.shell.BrowserChannelServer.run ( BrowserChannelServer.java:364 ) at java.lang.Thread.run ( Thread.java:745 )"
"true , true 32,768 FORBIDDEN No default case provided , assume FORBIDDEN true , true 32,767 FORBIDDEN No default case provided , assume FORBIDDEN import org.openjdk.jcstress.annotations . * ; import org.openjdk.jcstress.infra.results.ZZ_Result ; import java.util.concurrent.locks.ReentrantReadWriteLock ; /* * | -- -- -- -- -- -- -- -- -| * | COMPATIBILITY | * | -- -- -- -- -- -- -- -- -| * | | S | X | * | -- -- -- -- -- -- -- -- -| * | S | YES | NO | * | X | NO | NO | * | -- -- -- -- -- -- -- -- -| */public class ReentrantReadWriteLockBooleanCompatibilityTest { @ State public static class S { public final ReentrantReadWriteLock lock = new ReentrantReadWriteLock ( ) ; public boolean shared ( ) { return lock.readLock ( ) .tryLock ( ) ; } public boolean exclusive ( ) { return lock.writeLock ( ) .tryLock ( ) ; } } @ JCStressTest @ Outcome ( id = `` true , true '' , expect = Expect.ACCEPTABLE , desc = `` T1 and T2 are both acquired S '' ) public static class S_S { @ Actor public void actor1 ( S s , ZZ_Result r ) { r.r1 = s.shared ( ) ; } @ Actor public void actor2 ( S s , ZZ_Result r ) { r.r2 = s.shared ( ) ; } } @ JCStressTest @ Outcome ( id = `` true , false '' , expect = Expect.ACCEPTABLE , desc = `` T1 acquired S , and T2 could not acquire X '' ) @ Outcome ( id = `` false , true '' , expect = Expect.ACCEPTABLE , desc = `` T2 acquired X , and T1 could not acquire S '' ) public static class S_X { @ Actor public void actor1 ( S s , ZZ_Result r ) { r.r1 = s.shared ( ) ; } @ Actor public void actor2 ( S s , ZZ_Result r ) { r.r2 = s.exclusive ( ) ; } } @ JCStressTest @ Outcome ( id = `` true , false '' , expect = Expect.ACCEPTABLE , desc = `` T1 acquired X , and T2 could not acquire S '' ) @ Outcome ( id = `` false , true '' , expect = Expect.ACCEPTABLE , desc = `` T2 acquired S and T1 could not acquire X '' ) public static class X_S { @ Actor public void actor1 ( S s , ZZ_Result r ) { r.r1 = s.exclusive ( ) ; } @ Actor public void actor2 ( S s , ZZ_Result r ) { r.r2 = s.shared ( ) ; } } @ JCStressTest @ Outcome ( id = `` true , false '' , expect = Expect.ACCEPTABLE , desc = `` T1 acquired X , and T2 could not acquire X '' ) @ Outcome ( id = `` false , true '' , expect = Expect.ACCEPTABLE , desc = `` T2 acquired X and T1 could not acquire X '' ) public static class X_X { @ Actor public void actor1 ( S s , ZZ_Result r ) { r.r1 = s.exclusive ( ) ; } @ Actor public void actor2 ( S s , ZZ_Result r ) { r.r2 = s.exclusive ( ) ; } } }"
"public class TestIntern { public static void main ( String [ ] args ) { char [ ] c1= { ' a ' , ' b ' , ' h ' , ' i ' } ; String s1 = new String ( c1 ) ; s1.intern ( ) ; String s2= '' abhi '' ; System.out.println ( s1==s2 ) ; //true char [ ] c2= { ' j ' , ' a ' , ' v ' , ' a ' } ; String sj1 = new String ( c2 ) ; sj1.intern ( ) ; String sj2= '' java '' ; System.out.println ( sj1==sj2 ) ; //false char [ ] c3= { ' J ' , ' A ' , ' V ' , ' A ' } ; String tj1 = new String ( c3 ) ; tj1.intern ( ) ; String tj2= '' JAVA '' ; System.out.println ( tj1==tj2 ) ; //true } }"
"String [ ] fruits = { `` Apple '' , `` Pear '' } ;"
Class intClass = int.class ;
"public static void main ( String [ ] args ) { String vowels = `` aeiou '' ; char [ ] diacritics = { '\u0304 ' , '\u0301 ' , '\u0300 ' , '\u030C ' } ; StringBuilder sb = new StringBuilder ( ) ; for ( int v=0 ; v < vowels.length ( ) ; ++v ) { for ( int d=0 ; d < diacritics.length ; ++d ) { sb.append ( vowels.charAt ( v ) ) ; sb.append ( diacritics [ d ] ) ; sb.append ( ' ' ) ; } sb.append ( vowels.charAt ( v ) ) ; sb.append ( '\n ' ) ; } String ans = Normalizer.normalize ( sb.toString ( ) , Normalizer.Form.NFC ) ; JOptionPane.showMessageDialog ( null , ans ) ; }"
switch ( value ) { case 0 : do ( ) ; break ; case 2 OR 3 do2 ( ) ; break ; }
/** ... * < b > USAGE CONSTRAINT < /b > : To work correctly it assumes only one request exists * per session at any one time ... . */
"Dataset < Tuple2 < String , DeviceData > > ds = ... ; List < Tuple2 < String , DeviceData > > listTuple = ds.collectAsList ( ) ; ArrayList < DeviceData > myDataList = new ArrayList < DeviceData > ( ) ; for ( Tuple2 < String , DeviceData > tuple : listTuple ) { myDataList.add ( tuple._2 ( ) ) ; } Iterator < DeviceData > myitr = myDataList.iterator ( ) ; root | -- value : string ( nullable = true ) | -- _2 : struct ( nullable = true ) | | -- deviceData : string ( nullable = true ) | | -- deviceId : string ( nullable = true ) | | -- sNo : integer ( nullable = true )"
< TableColumn fx : id= '' dateColumn '' editable= '' false '' prefWidth= '' 135.0 '' text= '' Date '' > < cellValueFactory > < PropertyValueFactory property= '' date '' / > < /cellValueFactory > < /TableColumn > < TableColumn prefWidth= '' 100.0 '' text= '' Course '' > < cellValueFactory > < PropertyValueFactory property= '' house.bathroom '' / > < /cellValueFactory > < /TableColumn >
"public class Temp { enum SomeEnum { } private static final Map < SomeEnum , String > TEST = new EnumMap < > ( Arrays.stream ( SomeEnum.values ( ) ) .collect ( Collectors.toMap ( t - > t , a - > `` '' ) ) ) ; } Temp.java:27 : error : can not infer type arguments for EnumMap < > private static final Map < SomeEnum , String > TEST = new EnumMap < > ( Arrays.stream ( SomeEnum.values ( ) ) ^"
"Caused by : java.sql.SQLDataException : A truncation error was encountered trying to shrink VARCHAR ( ) FOR BIT DATA ' ( Binärer Datenwert wird nicht angezeigt ) ' to length 255. static { System.setProperty ( `` user.language '' , `` en '' ) ; System.setProperty ( `` user.region '' , `` en_US '' ) ; }"
"@ OutputTimeUnit ( TimeUnit.NANOSECONDS ) @ BenchmarkMode ( Mode.AverageTime ) @ OperationsPerInvocation ( Measure.ARRAY_SIZE ) @ Warmup ( iterations = 2 , time = 1 ) @ Measurement ( iterations = 5 , time = 1 ) @ State ( Scope.Thread ) @ Threads ( 1 ) @ Fork ( 2 ) public class Measure { public static final int ARRAY_SIZE = 1024 ; private final int [ ] array = new int [ ARRAY_SIZE ] ; @ Setup public void setup ( ) { final Random random = new Random ( ) ; for ( int i = 0 ; i < ARRAY_SIZE ; ++i ) { final int x = random.nextInt ( ) ; array [ i ] = x == 0 ? 1 : x ; } } @ GenerateMicroBenchmark public int normalIndex ( ) { final int [ ] array = this.array ; int result = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { final int j = i & array.length-1 ; final int entry = array [ i ] ; result ^= entry + j ; } return result ; } @ GenerateMicroBenchmark public int maskedIndex ( ) { final int [ ] array = this.array ; int result = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { final int j = i & array.length-1 ; final int entry = array [ j ] ; result ^= entry + i ; } return result ; } @ GenerateMicroBenchmark public int normalWithExitPoint ( ) { final int [ ] array = this.array ; int result = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { final int j = i & array.length-1 ; final int entry = array [ i ] ; result ^= entry + j ; if ( entry == 0 ) break ; } return result ; } @ GenerateMicroBenchmark public int maskedWithExitPoint ( ) { final int [ ] array = this.array ; int result = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { final int j = i & array.length-1 ; final int entry = array [ j ] ; result ^= entry + i ; if ( entry == 0 ) break ; } return result ; } } Benchmark Mode Samples Mean Mean error UnitsnormalIndex avgt 20 0.946 0.010 ns/opnormalWithExitPoint avgt 20 0.807 0.010 ns/opmaskedIndex avgt 20 0.803 0.007 ns/opmaskedWithExitPoint avgt 20 1.007 0.009 ns/op LoopUnrollLimit : 14 15 18 19 22 23 60withExitPoint : 96 95 95 79 80 80 69 1/100 nswithoutExitPoint : 94 64 64 63 64 77 75 1/100 ns 0x00000001044a37c0 : mov ecx , eax0x00000001044a37c2 : and ecx , esi ; *iand ; - org.sample.Measure : :normalIndex @ 20 ( line 44 ) 0x00000001044a37c4 : mov rbp , QWORD PTR [ rsp+0x28 ] ; *iload_3 ; - org.sample.Measure : :normalIndex @ 15 ( line 44 ) 0x00000001044a37c9 : add ecx , DWORD PTR [ rbp+rsi*4+0x10 ] 0x00000001044a37cd : xor ecx , r8d0x00000001044a37d0 : mov DWORD PTR [ rsp ] , ecx0x00000001044a37d3 : mov r10d , esi0x00000001044a37d6 : add r10d,0xf0x00000001044a37da : and r10d , eax0x00000001044a37dd : mov r8d , esi0x00000001044a37e0 : add r8d,0x70x00000001044a37e4 : and r8d , eax0x00000001044a37e7 : mov DWORD PTR [ rsp+0x4 ] , r8d0x00000001044a37ec : mov r11d , esi0x00000001044a37ef : add r11d,0x60x00000001044a37f3 : and r11d , eax0x00000001044a37f6 : mov DWORD PTR [ rsp+0x8 ] , r11d0x00000001044a37fb : mov r8d , esi0x00000001044a37fe : add r8d,0x50x00000001044a3802 : and r8d , eax0x00000001044a3805 : mov DWORD PTR [ rsp+0xc ] , r8d0x00000001044a380a : mov r11d , esi0x00000001044a380d : inc r11d0x00000001044a3810 : and r11d , eax0x00000001044a3813 : mov DWORD PTR [ rsp+0x10 ] , r11d0x00000001044a3818 : mov r8d , esi0x00000001044a381b : add r8d,0x20x00000001044a381f : and r8d , eax0x00000001044a3822 : mov DWORD PTR [ rsp+0x14 ] , r8d0x00000001044a3827 : mov r11d , esi0x00000001044a382a : add r11d,0x30x00000001044a382e : and r11d , eax0x00000001044a3831 : mov r9d , esi0x00000001044a3834 : add r9d,0x40x00000001044a3838 : and r9d , eax0x00000001044a383b : mov r8d , esi0x00000001044a383e : add r8d,0x80x00000001044a3842 : and r8d , eax0x00000001044a3845 : mov DWORD PTR [ rsp+0x18 ] , r8d0x00000001044a384a : mov r8d , esi0x00000001044a384d : add r8d,0x90x00000001044a3851 : and r8d , eax0x00000001044a3854 : mov ebx , esi0x00000001044a3856 : add ebx,0xa0x00000001044a3859 : and ebx , eax0x00000001044a385b : mov ecx , esi0x00000001044a385d : add ecx,0xb0x00000001044a3860 : and ecx , eax0x00000001044a3862 : mov edx , esi0x00000001044a3864 : add edx,0xc0x00000001044a3867 : and edx , eax0x00000001044a3869 : mov edi , esi0x00000001044a386b : add edi,0xd0x00000001044a386e : and edi , eax0x00000001044a3870 : mov r13d , esi0x00000001044a3873 : add r13d,0xe0x00000001044a3877 : and r13d , eax0x00000001044a387a : movsxd r14 , esi0x00000001044a387d : add r10d , DWORD PTR [ rbp+r14*4+0x4c ] 0x00000001044a3882 : mov DWORD PTR [ rsp+0x24 ] , r10d0x00000001044a3887 : mov QWORD PTR [ rsp+0x28 ] , rbp0x00000001044a388c : mov ebp , DWORD PTR [ rsp+0x4 ] 0x00000001044a3890 : mov r10 , QWORD PTR [ rsp+0x28 ] 0x00000001044a3895 : add ebp , DWORD PTR [ r10+r14*4+0x2c ] 0x00000001044a389a : mov DWORD PTR [ rsp+0x4 ] , ebp0x00000001044a389e : mov r10d , DWORD PTR [ rsp+0x8 ] 0x00000001044a38a3 : mov rbp , QWORD PTR [ rsp+0x28 ] 0x00000001044a38a8 : add r10d , DWORD PTR [ rbp+r14*4+0x28 ] 0x00000001044a38ad : mov DWORD PTR [ rsp+0x8 ] , r10d0x00000001044a38b2 : mov r10d , DWORD PTR [ rsp+0xc ] 0x00000001044a38b7 : add r10d , DWORD PTR [ rbp+r14*4+0x24 ] 0x00000001044a38bc : mov DWORD PTR [ rsp+0xc ] , r10d0x00000001044a38c1 : mov r10d , DWORD PTR [ rsp+0x10 ] 0x00000001044a38c6 : add r10d , DWORD PTR [ rbp+r14*4+0x14 ] 0x00000001044a38cb : mov DWORD PTR [ rsp+0x10 ] , r10d0x00000001044a38d0 : mov r10d , DWORD PTR [ rsp+0x14 ] 0x00000001044a38d5 : add r10d , DWORD PTR [ rbp+r14*4+0x18 ] 0x00000001044a38da : mov DWORD PTR [ rsp+0x14 ] , r10d0x00000001044a38df : add r13d , DWORD PTR [ rbp+r14*4+0x48 ] 0x00000001044a38e4 : add r11d , DWORD PTR [ rbp+r14*4+0x1c ] 0x00000001044a38e9 : add r9d , DWORD PTR [ rbp+r14*4+0x20 ] 0x00000001044a38ee : mov r10d , DWORD PTR [ rsp+0x18 ] 0x00000001044a38f3 : add r10d , DWORD PTR [ rbp+r14*4+0x30 ] 0x00000001044a38f8 : mov DWORD PTR [ rsp+0x18 ] , r10d0x00000001044a38fd : add r8d , DWORD PTR [ rbp+r14*4+0x34 ] 0x00000001044a3902 : add ebx , DWORD PTR [ rbp+r14*4+0x38 ] 0x00000001044a3907 : add ecx , DWORD PTR [ rbp+r14*4+0x3c ] 0x00000001044a390c : add edx , DWORD PTR [ rbp+r14*4+0x40 ] 0x00000001044a3911 : add edi , DWORD PTR [ rbp+r14*4+0x44 ] 0x00000001044a3916 : mov r10d , DWORD PTR [ rsp+0x10 ] 0x00000001044a391b : xor r10d , DWORD PTR [ rsp ] 0x00000001044a391f : mov ebp , DWORD PTR [ rsp+0x14 ] 0x00000001044a3923 : xor ebp , r10d0x00000001044a3926 : xor r11d , ebp0x00000001044a3929 : xor r9d , r11d0x00000001044a392c : xor r9d , DWORD PTR [ rsp+0xc ] 0x00000001044a3931 : xor r9d , DWORD PTR [ rsp+0x8 ] 0x00000001044a3936 : xor r9d , DWORD PTR [ rsp+0x4 ] 0x00000001044a393b : mov r10d , DWORD PTR [ rsp+0x18 ] 0x00000001044a3940 : xor r10d , r9d0x00000001044a3943 : xor r8d , r10d0x00000001044a3946 : xor ebx , r8d0x00000001044a3949 : xor ecx , ebx0x00000001044a394b : xor edx , ecx0x00000001044a394d : xor edi , edx0x00000001044a394f : xor r13d , edi0x00000001044a3952 : mov r8d , DWORD PTR [ rsp+0x24 ] 0x00000001044a3957 : xor r8d , r13d ; *ixor ; - org.sample.Measure : :normalIndex @ 34 ( line 46 ) 0x00000001044a395a : add esi,0x10 ; *iinc ; - org.sample.Measure : :normalIndex @ 36 ( line 43 ) 0x00000001044a395d : cmp esi , DWORD PTR [ rsp+0x20 ] 0x00000001044a3961 : jl 0x00000001044a37c0 ; *if_icmpge ; - org.sample.Measure : :normalIndex @ 12 ( line 43 )"
package package1 ; import package1.Outer.Mid.Inner ; import package2.Bar ; public class Outer { final Mid mid = new Mid ( ) ; public Outer ( ) { mid.setInner ( new Inner ( ) { @ Override public void foo ( ) { System.out.println ( `` In Outer.foo ( ) '' ) ; } } ) ; } public static class Mid implements Bar { private Inner inner ; public void setInner ( Inner inner ) { this.inner = inner ; } public Inner getInner ( ) { return this.inner ; } @ Override public void bar ( ) { } interface Inner { void foo ( ) ; } } } package package2 ; public interface Bar { void bar ( ) ; } package1\Outer.java:31 : can not find symbolsymbol : class Barlocation : class package1.Outer public static class Mid implements Bar { ^package1\Outer.java:42 : method does not override or implement a method from a supertype @ Override ^2 errors import package2.Bar ; import package1.Outer.Mid.Inner ;
"public class HomeFragment extends Fragment { GridView grid ; String [ ] web = { `` Bata '' , `` Service '' , `` puma '' , `` Hush '' } ; int [ ] imageId = { R.drawable.shoesmall , R.drawable.shoe1 , R.drawable.shoe3 , R.drawable.shoe4 } ; public HomeFragment ( ) { } @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View rootView = inflater.inflate ( R.layout.fragment_home , container , false ) ; // ViewGroup root = ( ViewGroup ) inflater.inflate ( R.layout.fragment_home , container ) ; CustomGrid adapter = new CustomGrid ( getActivity ( ) .getApplicationContext ( ) , web , imageId ) ; grid = ( GridView ) getView ( ) .findViewById ( R.id.gridview ) ; grid.setAdapter ( adapter ) ; grid.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Toast.makeText ( getActivity ( ) .getApplicationContext ( ) , `` You Clicked at `` + web [ +position ] , Toast.LENGTH_SHORT ) .show ( ) ; } } ) ; return rootView ; } }"
"ByteBuffer audioData = ByteBuffer.allocateDirect ( ( int ) ( fc.size ( ) - fc.position ( ) ) ) ; MappedByteBuffer mappedFile = fc.map ( MapMode.READ_WRITE , 0 , totalTargetSize ) ;"
// Profiler : Thread-1 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 left wait ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 left wait ( ) Thread-1 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 left wait ( ) Thread-1 invoked notifyAll ( ) // Java : Thread-0 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-1 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 invoked notifyAll ( ) Thread-0 invoked notifyAll ( ) Thread-1 invoked wait ( ) Thread-1 invoked notifyAll ( ) 723519 : Thread-1 invoked notifyAll ( ) in Consumer.take3763279 : Thread-0 invoked notifyAll ( ) in Producer.put4799016 : Thread-0 invoked notifyAll ( ) in Producer.put6744322 : Thread-0 invoked notifyAll ( ) in Producer.put8450221 : Thread-0 invoked notifyAll ( ) in Producer.put10108959 : Thread-0 invoked notifyAll ( ) in Producer.put39278140 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading40725024 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading42003869 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading58448450 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading60236308 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading61601587 : Thread-1 invoked notifyAll ( ) in java.util.ResourceBundle.endLoading70489811 : Thread-1 invoked notifyAll ( ) in Consumer.take75068409 : Thread-1 invoked wait ( ) in Drop.take75726202 : Thread-1 left wait ( ) in Drop.take77035733 : Thread-1 invoked notifyAll ( ) in Consumer.take81264978 : Thread-1 invoked notifyAll ( ) in Consumer.take85810491 : Thread-1 invoked wait ( ) in Drop.take86477385 : Thread-1 left wait ( ) in Drop.take87775126 : Thread-1 invoked notifyAll ( ) in Consumer.take
"public class Gui extends JFrame { public static void main ( String [ ] args ) { new Gui ( ) .setVisible ( true ) ; } public Gui ( ) { setDefaultCloseOperation ( WindowConstants.EXIT_ON_CLOSE ) ; add ( new JPanel ( ) { public static final int SIZE = 3 ; /** Line thickness ratio to a block */ public static final float LINE_THICKNESS = 0.1f ; /** @ return the width of a block . */ protected final int getBlockWidth ( ) { return getWidth ( ) / SIZE ; } /** @ return the height of a block . */ protected final int getBlockHeight ( ) { return getHeight ( ) / SIZE ; } /** @ return the width of a cell . */ protected final int getCellWidth ( ) { return ( int ) Math.ceil ( getBlockWidth ( ) * ( 1-LINE_THICKNESS ) ) ; } /** @ return the height of a cell . */ protected final int getCellHeight ( ) { return ( int ) Math.ceil ( getBlockHeight ( ) * ( 1-LINE_THICKNESS ) ) ; } @ Override public void paintComponent ( Graphics g ) { g.setColor ( new Color ( 0 , 0 , 255 , 100 ) ) ; int lineWidth = ( int ) ( LINE_THICKNESS * getBlockWidth ( ) ) ; int lineHeight = ( int ) ( LINE_THICKNESS * getBlockHeight ( ) ) ; for ( int i = 0 ; i < = SIZE ; i++ ) { g.fillRect ( i * getBlockWidth ( ) - lineWidth / 2 , 0 , lineWidth , getHeight ( ) ) ; g.fillRect ( 0 , i * getBlockHeight ( ) - lineHeight/2 , getWidth ( ) , lineHeight ) ; } g.setColor ( new Color ( 255 , 0 , 0 , 100 ) ) ; for ( int i = 0 ; i < SIZE ; i++ ) { for ( int j = 0 ; j < SIZE ; j++ ) { int x = j * getBlockWidth ( ) + lineWidth/2 ; int y = i * getBlockHeight ( ) + lineHeight/2 ; Graphics temp = g.create ( x , y , getCellWidth ( ) , getCellHeight ( ) ) ; drawCell ( temp , i , j ) ; } } } private void drawCell ( Graphics g , int i , int j ) { g.fillRect ( 0 , 0 , getCellWidth ( ) , getCellHeight ( ) ) ; } } ) ; setLocation ( new Point ( 500 , 200 ) ) ; setSize ( new Dimension ( 600 , 600 ) ) ; } }"
public R tcf ( ... . ) { try { R some = ... ; ... compute the result ... . return some ; } catch ( X exception ) { ... exception handling ... . } finally { ... clean up ... . } } public R tc ( ... . ) { try { R some = ... ; ... compute the result ... . return some ; } catch ( X exception ) { ... exception handling ... . } } public R tf ( ... . ) { try { return tc ( ... . ) ; // wrap the try-catch in tc ( ) } finally { ... clean up ... . } }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -package org.zpf.service ; public interface Services { void test ( ) ; } module org.zpf.service.Services { exports org.zpf.service ; } -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -package org.zpf.impl ; import org.zpf.service.Services ; public class Impl implements Services { @ Overridepublic void test ( ) { System.out.println ( `` Impl-1 '' ) ; } } module org.zpf.impl.Impl { requires org.zpf.service.Services ; provides org.zpf.service.Services with org.zpf.impl.Impl ; } -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- public class Demo { public static void main ( String [ ] args ) { ServiceLoader.load ( Services.class ) .forEach ( Services : :test ) ; } } module org.zpf.demo.Demo { requires org.zpf.service.Services ; uses org.zpf.service.Services ; } /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/bin/java `` -javaagent : /Applications/IntelliJ IDEA 2018.3.app/Contents/lib/idea_rt.jar=61434 : /Applications/IntelliJ IDEA 2018.3.app/Contents/bin '' -Dfile.encoding=UTF-8 -p /Users/tubetrue01/IDEA/Test/Demo/target/classes : /Users/tubetrue01/IDEA/Test/Services/target/classes -m org.zpf.demo.Demo/org.zpf.demo.DemoProcess finished with exit code 0
"Arrays.stream ( array ) .mapInPlace ( x - > x / 100 ) ; list.stream ( ) .mapInPlace ( e - > e.replaceAll ( `` `` , `` '' ) ) ; array = Arrays.stream ( array ) .map ( x - > x / 100 ) .toArray ( ) ; list = list.stream ( ) .map ( e - > e.replaceAll ( `` `` , `` '' ) ) .collect ( Collectors.toList ( ) ) ;"
public class TestClass { public static void main ( String [ ] args ) { var list = new ArrayList < > ( ) ; list.add ( `` 1 '' ) ; System.out.println ( list.get ( 0 ) ) ; // 1 } } public class TestClass { public var list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { } }
"[ instant bcaa , vegan bcaa , complete bcaa energy™ , branched chain amino acid ( bcaa ) tablets 1000mg , endure™ , branched chain amino acids ( bcaa ) , instant leucine , leucine tablets 1000mg , complete intra-workout™ , leucine , bcaa jelly mix , complete hydration drink™ , informed bcaa™ , instant bcaa cocktail bundle ] [ informed bcaa™ , instant bcaa cocktail bundle ]"
protected Object clone ( ) throws CloneNotSupportedException
"public static long reverse ( long i ) { // HD , Figure 7-1 i = ( i & 0x5555555555555555L ) < < 1 | ( i > > > 1 ) & 0x5555555555555555L ; //1 i = ( i & 0x3333333333333333L ) < < 2 | ( i > > > 2 ) & 0x3333333333333333L ; //2 i = ( i & 0x0f0f0f0f0f0f0f0fL ) < < 4 | ( i > > > 4 ) & 0x0f0f0f0f0f0f0f0fL ; //3 i = ( i & 0x00ff00ff00ff00ffL ) < < 8 | ( i > > > 8 ) & 0x00ff00ff00ff00ffL ; //4 i = ( i < < 48 ) | ( ( i & 0xffff0000L ) < < 16 ) | ( ( i > > > 16 ) & 0xffff0000L ) | ( i > > > 48 ) ; //5 return i ; } 6,5,0,0,0,0,0,0 -- > ( i < < 48 ) 8,7,0,0,0,0,0,0 -- > ( ( i & 0xffff0000L ) < < 16 ) 0,0,0,0,4,3,2,1 -- > ( ( i > > > 16 ) & 0xffff0000L ) 0,0,0,0,0,0,2,1 -- > ( i > > > 48 ) 6,5,0,0,0,0,0,0 -- > ( i < < 48 ) 0,0,8,7,0,0,0,0 -- > ( ( i & 0xffff0000L ) < < 16 ) 0,0,0,0,2,1,0,0 -- > ( ( i > > > 16 ) & 0xffff0000L ) 0,0,0,0,0,0,4,3 -- > ( i > > > 48 ) 8,7,0,0,0,0,0,0 -- > ( i < < 48 ) 0,0,6,5,0,0,0,0 -- > ( ( i & 0xffff0000L ) < < 16 ) 0,0,0,0,4,3,0,0 -- > ( ( i > > > 16 ) & 0xffff0000L ) 0,0,0,0,0,0,2,1 -- > ( i > > > 48 )"
"public class DoubleHashTest2 { public static void main ( String [ ] args ) { double base1 = .9 ; double base2 = .7 ; Test test1 = new Test ( base1 - .1 ) ; Test test2 = new Test ( base2 + .1 ) ; System.out.println ( test1.equals ( test2 ) ) ; System.out.println ( test1.hashCode ( ) ) ; System.out.println ( test2.hashCode ( ) ) ; } private static class Test { private double dnum1 ; public Test ( double dnum1 ) { this.dnum1 = dnum1 ; } public boolean equals ( Test other ) { final double epsilon = .0001 ; boolean result = false ; if ( this == other ) result = true ; else if ( other == null ) result = false ; else result = Math.abs ( this.dnum1 - other.dnum1 ) < epsilon ; return result ; } public int hashCode ( ) { int hash = Double.hashCode ( dnum1 ) ; return hash ; } } } public boolean equals ( Test other ) { boolean result = false ; if ( this == other ) result = true ; else if ( other == null ) result = false ; else { double test1 = round ( dnum1 ) ; double test2 = round ( other.dnum1 ) ; result = test1 == test2 ; } return result ; } public int hashCode ( ) { double temp = round ( dnum1 ) ; int hash = Double.hashCode ( temp ) ; return hash ; } private double round ( double dnum ) { // tests for NaN and +/-infinity omitted for brevity final int places = 4 ; final double round_const = Math.pow ( 10 , places ) ; double result = ( ( int ) ( dnum * round_const + .5 ) ) / round_const ; return result ; }"
int x = 3 ; int y = 3 ; if ( x -- > -- y ) { return true ; }
"Example : ( test1 , test2 ) public static void main ( String [ ] a ) { String pattern = `` \\ ( [ a-zA-Z0-9 ] + , [ a-zA-Z0-9 ] +.\\ ) '' ; String test = `` ( test1 , test2 ) '' ; System.out.println ( test.matches ( pattern ) ) ; } String test = `` ( test1 , test2 ) '' ; String test = `` ( t , test2 ) '' ; String test = `` ( test1 , t ) '' ;"
Class is not registered : org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation [ ] kryo.register ( Class.forName ( `` org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation [ ] '' ) ) ; // ERROR kryo.register ( Class.forName ( `` org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation [ ] .class '' ) ) ; // ERROR kryo.register ( Class.forName ( `` org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation $ Array '' ) ) ; // ERROR kryo.register ( Class.forName ( `` [ org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation '' ) ) ; // ERROR kryo.register ( Class.forName ( `` [ Lorg.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation '' ) ) ; // ERROR kryo.register ( Class.forName ( `` Array [ org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation ] '' ) ) ; // ERROR kryo.register ( Class.forName ( `` [ [ org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation '' ) ) ; // ERROR kryo.register ( org.apache.spark.sql.execution.datasources.InMemoryFileIndex $ SerializableBlockLocation [ ] .class ) ;
String s = `` abc123def456ghi789jkl '' ; String [ ] parts = s.split ( regex ) ; System.out.println ( Arrays.deepToString ( parts ) ) ;
ClassName/CONSTANT_FIELD ( let [ c `` CONSTANT_FIELD '' ] ClassName/c )
"import org.eclipse.swt . * ; import org.eclipse.swt.widgets . * ; public class Test { private Display display ; private Shell shell ; public Test ( Display display ) { this.display = display ; initUI ( ) ; } public void open ( ) { shell.open ( ) ; while ( ! shell.isDisposed ( ) ) { if ( ! display.readAndDispatch ( ) ) { display.sleep ( ) ; } } } private void initUI ( ) { shell = new Shell ( display ) ; shell.setSize ( 808 , 599 ) ; shell.setText ( `` Test '' ) ; AboutHandler aboutHandler = new AboutHandler ( ) ; PreferencesHandler preferencesHandler = new PreferencesHandler ( ) ; QuitHandler quitHandler = new QuitHandler ( ) ; CocoaUIEnhancer uienhancer = new CocoaUIEnhancer ( `` Test '' ) ; uienhancer.hookApplicationMenu ( display , quitHandler , aboutHandler , preferencesHandler ) ; } private class AboutHandler implements Listener { public void handleEvent ( Event e ) { } } private class PreferencesHandler implements Listener { public void handleEvent ( Event e ) { } } private class QuitHandler implements Listener { public void handleEvent ( Event e ) { } } } Exception in thread `` main '' java.lang.NoSuchMethodError : actionProc at org.eclipse.swt.internal.Callback.bind ( Native Method ) at org.eclipse.swt.internal.Callback. < init > ( Unknown Source ) at org.eclipse.swt.internal.Callback. < init > ( Unknown Source ) at org.eclipse.swt.internal.Callback. < init > ( Unknown Source ) at CocoaUIEnhancer.initialize ( CocoaUIEnhancer.java:124 ) at CocoaUIEnhancer.hookApplicationMenu ( CocoaUIEnhancer.java:92 ) at Test.initUI ( Test.java:50 ) at Test. < init > ( Test.java:18 )"
public void setX ( int x ) { this.x = x ; } public void setX ( int newX ) { x = newX ; } x = x ;
@ ApplicationScopedpublic class FooService { private some.FooUnkown foo = new some.FooUnknown ( ) ; public void someStuff ( ) { // ... String result = foo.doSomeStuff ( ) ; // ... } }
"public class Student { private String name ; private String id ; public Student ( String name , String id ) { this.name = name ; this.id = id ; } ... getters and setters for both fields public class Student { public final String name ; public final String id ; public Student ( String name , String id ) { this.name = name ; this.id = id ; } }"
public class Koray { public static void main ( String [ ] args ) { System.out.println ( `` This is a sample program . `` ) ; } } 19 54 68 69 73 20 69 73 20 61 20 73 61 6D 70 6C 65 20 70 72 6F 67 72 61 6D 2E This is a sample program . javap -c Koray.class Compiled from `` Koray.java '' public class Koray { public Koray ( ) ; Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object . `` < init > '' : ( ) V 4 : return public static void main ( java.lang.String [ ] ) ; Code : 0 : getstatic # 2 // Field java/lang/System.out : Ljava/io/PrintStream ; 3 : ldc # 3 // String This is a sample program . 5 : invokevirtual # 4 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 8 : bipush 10 10 : istore_1 11 : return }
"enum MyEnum { REGULAR , MYOLDTYPE // Delete this } @ PersistenceCapablepublic class Entity { @ Persistent MyEnum myEnumType ; @ Persistent String myString ; // Rename this }"
"Object [ ] foo = new Object [ 3 ] ; foo [ 0 ] = new int [ ] { 1 , 2 , 3 } ; foo [ 1 ] = new int [ ] { 4 , 5 , 6 } ; foo [ 2 ] = new int [ ] { 7 , 8 , 9 } ; int [ ] [ ] bar = ( int [ ] [ ] ) foo ;"
"getEditView ( R.id.edit_code1 ) .addTextChangedListener ( new TextWatcher ( ) { @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { } @ Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { } @ Override public void afterTextChanged ( Editable input ) { if ( input.length ( ) == 4 ) { getEditView ( R.id.edit_code2 ) .requestFocus ( ) ; } } } ) ;"
import java.awt . * ; import java.awt.datatransfer.Clipboard ; import java.awt.datatransfer.DataFlavor ; public class CopyPasteTest { public static void main ( String [ ] args ) { final String text ; try { final Clipboard systemClipboard = Toolkit.getDefaultToolkit ( ) .getSystemClipboard ( ) ; text = ( String ) systemClipboard.getData ( DataFlavor.stringFlavor ) ; System.out.println ( text ) ; for ( byte a : text.getBytes ( ) ) { System.out.print ( a + `` `` ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } } } patrick @ lenerd : ~ $ xclip -out | hexdump -C00000000 74 68 69 73 20 68 65 72 65 |this here|00000009 ===========Plot [ 00 ] [ 7f ] [ 00 ] [ 00 ] ===========Obtained transferrable of type sun.awt.datatransfer.ClipboardTransferablePlot [ 00 ] [ 7f ] [ 00 ] [ 00 ] =========== patrick @ lenerd : ~ $ xclip -o -verbose -selection clipboard | hexdump -CConnected to X server.Using selection : XA_CLIPBOARDUsing UTF8_STRING.00000000 50 6c 6f 74 00 00 00 00 |Plot ... .|00000008
"public static void main ( String [ ] args ) throws java.lang.Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int inputInt ; int [ ] intArr ; try { String input = br.readLine ( ) .trim ( ) ; inputInt = Integer.parseInt ( input ) ; String inputArr = br.readLine ( ) .trim ( ) ; intArr = Arrays.stream ( inputArr.split ( `` `` ) ) .mapToInt ( Integer : :parseInt ) .toArray ( ) ; } catch ( NumberFormatException e ) { System.out.println ( `` Could not parse integers . `` ) ; return ; } if ( inputInt ! = intArr.length ) { System.out.println ( `` Invalid number of arguments . `` ) ; return ; } ArrayList < ArrayList < Integer > > sequences = new ArrayList < ArrayList < Integer > > ( ) ; int sequenceCount = 1 ; sequences.add ( new ArrayList < Integer > ( ) ) ; sequences.get ( 0 ) .add ( 0 ) ; for ( int i = 1 ; i < intArr.length ; i++ ) { for ( int j = 0 ; j < sequenceCount ; j++ ) { if ( intArr [ i ] < = intArr [ sequences.get ( j ) .get ( sequences.get ( j ) .size ( ) - 1 ) ] ) { sequences.get ( j ) .remove ( sequences.get ( j ) .size ( ) - 1 ) ; sequences.get ( j ) .add ( i ) ; break ; } else if ( j + 1 == sequenceCount ) { sequences.add ( new ArrayList < Integer > ( sequences.get ( j ) ) ) ; sequences.get ( j + 1 ) .add ( i ) ; sequenceCount++ ; break ; //increasing sequenceCount causes infinite loop } else if ( intArr [ i ] < intArr [ sequences.get ( j + 1 ) .get ( sequences.get ( j + 1 ) .size ( ) - 1 ) ] ) { sequences.set ( j+ 1 , new ArrayList < Integer > ( sequences.get ( j ) ) ) ; sequences.get ( j+ 1 ) .add ( i ) ; break ; } } } int bestSequenceLength = sequenceCount ; ArrayList < Integer > bestIndexes = new ArrayList < Integer > ( sequences.get ( bestSequenceLength - 1 ) ) ; //build bestSequence , then after it I 'm supposed to find the first one instead int [ ] bestSequence = Arrays.stream ( bestIndexes.toArray ( ) ) .mapToInt ( x - > intArr [ ( int ) x ] ) .toArray ( ) ; StringBuilder output = new StringBuilder ( `` '' ) ; for ( Integer x : bestSequence ) { output.append ( x + `` `` ) ; } System.out.println ( output.toString ( ) .trim ( ) ) ; }"
"public static int countPairs ( int [ ] a ) { Arrays.sort ( a ) ; return countPairs ( a , a.length,0 , a.length-1 ) ; } public static int countPairs ( int [ ] a , int n , int start , int end ) { if ( end == start ) { return 0 ; } if ( start > = n || end < 0 ) { return 0 ; } System.out.print ( `` matching start : `` +start + `` and end `` +end+ '' `` ) ; System.out.println ( `` matching `` +a [ start ] + `` and `` +a [ end ] ) ; if ( a [ start ] < a [ end ] & & a [ start ] * 2 > = a [ end ] ) { int res = countPairs ( a , n , start+1 , end-1 ) +1 ; //System.out.print ( `` inside if matching start : `` +start + `` and end `` +end+ '' `` ) ; System.out.println ( `` matching `` +a [ start ] + `` and `` +a [ end ] + `` count is `` +res ) ; return res ; } else { return max ( countPairs ( a , n , start+1 , end ) , countPairs ( a , n , start , end - 1 ) , countPairs ( a , n , start+1 , end - 1 ) ) ; } } import org.junit.Test ; import java.util.Arrays ; import java.util.Random ; public class CountingPairsTest { static int countPairs ( int [ ] a ) { return PairingNumbers.countPairs ( a ) ; } @ Test public void test1 ( ) { int [ ] a = { 1,2,3,4,5 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test2 ( ) { int [ ] a = { 1,2,3,4,5,6 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test5 ( ) { int [ ] a = { 1,2,3,7,4,5,6 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test6 ( ) { int [ ] a = { 9,8,20,15,21 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test3 ( ) { int [ ] a = { 5,4,3,2,1 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test4 ( ) { int [ ] a = { 2,4,5,3,1 } ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test7 ( ) { int [ ] a = new Random ( ) .ints ( 10,1,100 ) .toArray ( ) ; // IntStream.range ( 1,100 ) .toArray ( ) ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } @ Test public void test8 ( ) { int [ ] a = new Random ( ) .ints ( 10,1,10 ) .toArray ( ) ; // IntStream.range ( 1,100 ) .toArray ( ) ; System.out.println ( `` ****************************************\n '' + Arrays.toString ( a ) ) ; int count = countPairs ( a ) ; System.out.println ( `` count `` +count ) ; } }"
"class Blah int a ; double b ; String c ; Date d ; public Blah ( int a , double b , String c , Date d ) { super ( ) ; // possibly this.a = a ; this.b = b ; this.c = c ; this.d = d ; }"
public class FastIterator { private static ThreadLocal < Holder > holders = new ThreadLocal < Holder > ( ) ; public static < T > Iterable < T > get ( ArrayList < T > list ) { Holder cont = holders.get ( ) ; if ( cont == null ) { cont = new Holder ( ) ; cont.collection = new DummyCollection < T > ( ) ; cont.it = new Iterator < T > ( ) ; holders.set ( cont ) ; } Iterator < T > it = ( Iterator < T > ) cont.it ; DummyCollection < T > collection = ( DummyCollection < T > ) cont.collection ; it.setList ( list ) ; collection.setIterator ( it ) ; return collection ; } private FastIterator ( ) { } private static class Holder { public DummyCollection < ? > collection ; public Iterator < ? > it ; } private static class DummyCollection < T > implements Iterable { private Iterator < ? > it ; @ Override public java.util.Iterator < T > iterator ( ) { return ( java.util.Iterator < T > ) it ; } public void setIterator ( Iterator < ? > it ) { this.it = it ; } } private static class Iterator < T > implements java.util.Iterator < T > { private ArrayList < T > list ; private int size ; private int i ; @ Override public boolean hasNext ( ) { return i < size ; } @ Override public T next ( ) { return list.get ( i++ ) ; } @ Override public void remove ( ) { } public void setList ( ArrayList < T > list ) { this.list = list ; size = list.size ( ) ; i = 0 ; } private Iterator ( ) { } } }
"@ ApiOperation ( `` List statuses '' ) @ GetMapping ( produces = APPLICATION_JSON_VALUE ) public ListResult < Status > listStatuses ( @ ApiParam ( `` Filter given IDs '' ) @ RequestParam ( value = `` id '' , required = false , defaultValue = `` '' ) List < String > ids , @ ApiParam ( value = `` Sort by property value '' , allowMultiple = true , format = `` propertyName : < asc|desc > '' , type = `` array '' ) @ RequestParam ( value = `` _sort '' , required = false , defaultValue = `` '' ) List < Sort > sorts )"
public class Java8Wat { interface Parcelable { } static class Bundle implements Parcelable { public void put ( Parcelable parcelable ) { } public void put ( Serializable serializable ) { } public < T extends Parcelable > T getParcelable ( ) { return null ; } } static { Bundle inBundle = new Bundle ( ) ; Bundle outBundle = new Bundle ( ) ; outBundle.put ( inBundle.getParcelable ( ) ) ; } } Java8Wat.java:23 : error : reference to put is ambiguous outBundle.put ( inBundle.getParcelable ( ) ) ; ^both method put ( Parcelable ) in Bundle and method put ( Serializable ) in Bundle match public Parcelable getParcelable ( )
"[ INFO ] -- - jboss-as-maven-plugin:7.9.Final : deploy ( default-cli ) @ project-parent -- - [ WARNING ] Error injecting : org.jboss.as.plugin.deployment.Deployjava.lang.NoClassDefFoundError : org/jboss/as/controller/client/ModelControllerClient at java.lang.Class.getDeclaredConstructors0 ( Native Method ) at java.lang.Class.privateGetDeclaredConstructors ( Class.java:2595 ) at java.lang.Class.getDeclaredConstructors ( Class.java:1914 ) at com.google.inject.spi.InjectionPoint.forConstructorOf ( InjectionPoint.java:245 ) at com.google.inject.internal.ConstructorBindingImpl.create ( ConstructorBindingImpl.java:99 ) at com.google.inject.internal.InjectorImpl.createUninitializedBinding ( InjectorImpl.java:658 ) at com.google.inject.internal.InjectorImpl.createJustInTimeBinding ( InjectorImpl.java:882 ) at com.google.inject.internal.InjectorImpl.createJustInTimeBindingRecursive ( InjectorImpl.java:805 ) at com.google.inject.internal.InjectorImpl.getJustInTimeBinding ( InjectorImpl.java:282 ) at com.google.inject.internal.InjectorImpl.getBindingOrThrow ( InjectorImpl.java:214 ) at com.google.inject.internal.InjectorImpl.getProviderOrThrow ( InjectorImpl.java:1006 ) at com.google.inject.internal.InjectorImpl.getProvider ( InjectorImpl.java:1038 ) at com.google.inject.internal.InjectorImpl.getProvider ( InjectorImpl.java:1001 ) at com.google.inject.internal.InjectorImpl.getInstance ( InjectorImpl.java:1051 ) at org.eclipse.sisu.space.AbstractDeferredClass.get ( AbstractDeferredClass.java:48 ) at com.google.inject.internal.ProviderInternalFactory.provision ( ProviderInternalFactory.java:81 ) at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision ( InternalFactoryToInitializableAdapter.java:53 ) at com.google.inject.internal.ProviderInternalFactory $ 1.call ( ProviderInternalFactory.java:65 ) at com.google.inject.internal.ProvisionListenerStackCallback $ Provision.provision ( ProvisionListenerStackCallback.java:115 ) at com.google.inject.internal.ProvisionListenerStackCallback $ Provision.provision ( ProvisionListenerStackCallback.java:133 ) at com.google.inject.internal.ProvisionListenerStackCallback.provision ( ProvisionListenerStackCallback.java:68 ) at com.google.inject.internal.ProviderInternalFactory.circularGet ( ProviderInternalFactory.java:63 ) at com.google.inject.internal.InternalFactoryToInitializableAdapter.get ( InternalFactoryToInitializableAdapter.java:45 ) at com.google.inject.internal.InjectorImpl $ 2 $ 1.call ( InjectorImpl.java:1016 ) at com.google.inject.internal.InjectorImpl.callInContext ( InjectorImpl.java:1092 ) at com.google.inject.internal.InjectorImpl $ 2.get ( InjectorImpl.java:1012 ) at org.eclipse.sisu.inject.Guice4 $ 1.get ( Guice4.java:162 ) at org.eclipse.sisu.inject.LazyBeanEntry.getValue ( LazyBeanEntry.java:81 ) at org.eclipse.sisu.plexus.LazyPlexusBean.getValue ( LazyPlexusBean.java:51 ) at org.codehaus.plexus.DefaultPlexusContainer.lookup ( DefaultPlexusContainer.java:263 ) at org.codehaus.plexus.DefaultPlexusContainer.lookup ( DefaultPlexusContainer.java:255 ) at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo ( DefaultMavenPluginManager.java:519 ) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo ( DefaultBuildPluginManager.java:121 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:208 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:154 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:146 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:117 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:81 ) at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build ( SingleThreadedBuilder.java:51 ) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute ( LifecycleStarter.java:128 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:309 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:194 ) at org.apache.maven.DefaultMaven.execute ( DefaultMaven.java:107 ) at org.apache.maven.cli.MavenCli.execute ( MavenCli.java:955 ) at org.apache.maven.cli.MavenCli.doMain ( MavenCli.java:290 ) at org.apache.maven.cli.MavenCli.main ( MavenCli.java:194 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:606 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced ( Launcher.java:289 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launch ( Launcher.java:229 ) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode ( Launcher.java:415 ) at org.codehaus.plexus.classworlds.launcher.Launcher.main ( Launcher.java:356 ) Caused by : java.lang.ClassNotFoundException : org.jboss.as.controller.client.ModelControllerClient at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass ( SelfFirstStrategy.java:50 ) at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass ( ClassRealm.java:271 ) at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass ( ClassRealm.java:247 ) at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass ( ClassRealm.java:239 ) at java.lang.Class.getDeclaredConstructors0 ( Native Method ) at java.lang.Class.privateGetDeclaredConstructors ( Class.java:2595 ) at java.lang.Class.getDeclaredConstructors ( Class.java:1914 ) at com.google.inject.spi.InjectionPoint.forConstructorOf ( InjectionPoint.java:245 ) at com.google.inject.internal.ConstructorBindingImpl.create ( ConstructorBindingImpl.java:99 ) at com.google.inject.internal.InjectorImpl.createUninitializedBinding ( InjectorImpl.java:658 ) at com.google.inject.internal.InjectorImpl.createJustInTimeBinding ( InjectorImpl.java:882 ) at com.google.inject.internal.InjectorImpl.createJustInTimeBindingRecursive ( InjectorImpl.java:805 ) at com.google.inject.internal.InjectorImpl.getJustInTimeBinding ( InjectorImpl.java:282 ) at com.google.inject.internal.InjectorImpl.getBindingOrThrow ( InjectorImpl.java:214 ) at com.google.inject.internal.InjectorImpl.getProviderOrThrow ( InjectorImpl.java:1006 ) at com.google.inject.internal.InjectorImpl.getProvider ( InjectorImpl.java:1038 ) at com.google.inject.internal.InjectorImpl.getProvider ( InjectorImpl.java:1001 ) at com.google.inject.internal.InjectorImpl.getInstance ( InjectorImpl.java:1051 ) at org.eclipse.sisu.space.AbstractDeferredClass.get ( AbstractDeferredClass.java:48 ) at com.google.inject.internal.ProviderInternalFactory.provision ( ProviderInternalFactory.java:81 ) at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision ( InternalFactoryToInitializableAdapter.java:53 ) at com.google.inject.internal.ProviderInternalFactory $ 1.call ( ProviderInternalFactory.java:65 ) at com.google.inject.internal.ProvisionListenerStackCallback $ Provision.provision ( ProvisionListenerStackCallback.java:115 ) at com.google.inject.internal.ProvisionListenerStackCallback $ Provision.provision ( ProvisionListenerStackCallback.java:133 ) at com.google.inject.internal.ProvisionListenerStackCallback.provision ( ProvisionListenerStackCallback.java:68 ) at com.google.inject.internal.ProviderInternalFactory.circularGet ( ProviderInternalFactory.java:63 ) at com.google.inject.internal.InternalFactoryToInitializableAdapter.get ( InternalFactoryToInitializableAdapter.java:45 ) at com.google.inject.internal.InjectorImpl $ 2 $ 1.call ( InjectorImpl.java:1016 ) at com.google.inject.internal.InjectorImpl.callInContext ( InjectorImpl.java:1092 ) at com.google.inject.internal.InjectorImpl $ 2.get ( InjectorImpl.java:1012 ) at org.eclipse.sisu.inject.Guice4 $ 1.get ( Guice4.java:162 ) at org.eclipse.sisu.inject.LazyBeanEntry.getValue ( LazyBeanEntry.java:81 ) at org.eclipse.sisu.plexus.LazyPlexusBean.getValue ( LazyPlexusBean.java:51 ) at org.codehaus.plexus.DefaultPlexusContainer.lookup ( DefaultPlexusContainer.java:263 ) at org.codehaus.plexus.DefaultPlexusContainer.lookup ( DefaultPlexusContainer.java:255 ) at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo ( DefaultMavenPluginManager.java:519 ) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo ( DefaultBuildPluginManager.java:121 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:208 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:154 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:146 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:117 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:81 ) at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build ( SingleThreadedBuilder.java:51 ) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute ( LifecycleStarter.java:128 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:309 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:194 ) at org.apache.maven.DefaultMaven.execute ( DefaultMaven.java:107 ) at org.apache.maven.cli.MavenCli.execute ( MavenCli.java:955 ) at org.apache.maven.cli.MavenCli.doMain ( MavenCli.java:290 ) at org.apache.maven.cli.MavenCli.main ( MavenCli.java:194 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:606 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced ( Launcher.java:289 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launch ( Launcher.java:229 ) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode ( Launcher.java:415 ) at org.codehaus.plexus.classworlds.launcher.Launcher.main ( Launcher.java:356 ) [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ INFO ] Reactor Summary : [ INFO ] [ INFO ] project-parent ... ... ... ... ... ... ... ... ... ... ... ... FAILURE [ 0.426 s ] [ INFO ] project-ejb ... ... ... ... ... ... ... ... ... ... ... ... ... SKIPPED [ INFO ] project-web ... ... ... ... ... ... ... ... ... ... ... ... ... SKIPPED [ INFO ] project-ear ... ... ... ... ... ... ... ... ... ... ... ... ... SKIPPED [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ INFO ] BUILD FAILURE [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ INFO ] Total time : 0.899 s [ INFO ] Finished at : 2018-06-15T15:30:21+10:00 [ INFO ] Final Memory : 11M/244M [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ ERROR ] Failed to execute goal org.jboss.as.plugins : jboss-as-maven-plugin:7.9.Final : deploy ( default-cli ) on project project-parent : Execution default-cli of goal org.jboss.as.plugins : jboss-as-maven-plugin:7.9.Final : deploy failed : A required class was missing while executing org.jboss.as.plugins : jboss-as-maven-plugin:7.9.Final : deploy : org/jboss/as/controller/client/ModelControllerClient [ ERROR ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - [ ERROR ] realm = plugin > org.jboss.as.plugins : jboss-as-maven-plugin:7.9.Final [ ERROR ] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ ERROR ] urls [ 0 ] = file : /C : /Users/user1/.m2/repository/org/jboss/as/plugins/jboss-as-maven-plugin/7.9.Final/jboss-as-maven-plugin-7.9.Final.jar [ ERROR ] urls [ 1 ] = file : /C : /Users/user1/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ ERROR ] Number of foreign imports : 1 [ ERROR ] import : Entry [ import from realm ClassRealm [ maven.api , parent : null ] ] [ ERROR ] [ ERROR ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - [ ERROR ] : org.jboss.as.controller.client.ModelControllerClient [ ERROR ] - > [ Help 1 ] [ ERROR ] [ ERROR ] To see the full stack trace of the errors , re-run Maven with the -e switch . [ ERROR ] Re-run Maven using the -X switch to enable full debug logging . [ ERROR ] [ ERROR ] For more information about the errors and possible solutions , please read the following articles : [ ERROR ] [ Help 1 ] http : //cwiki.apache.org/confluence/display/MAVEN/PluginContainerException project-parent -pom.xml -project-ear -pom.xml -project-ejb -pom.xml -project-web -pom.xml < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > com.my.project < /groupId > < artifactId > project-parent < /artifactId > < packaging > pom < /packaging > < version > 1.0 < /version > < pluginRepositories > < pluginRepository > < id > project-repo < /id > < name > project custom repo < /name > < url > http : //localhost:8081/repository/my/ < /url > < /pluginRepository > < /pluginRepositories > < build > < pluginManagement > < plugins > < plugin > < groupId > org.jboss.as.plugins < /groupId > < artifactId > jboss-as-maven-plugin < /artifactId > < version > 7.9.Final < /version > < configuration > < hostname > $ { hostname } < /hostname > < port > 9999 < /port > < username > $ { jbossuser } < /username > < password > $ { jbosspassword } < /password > < /configuration > < /plugin > < /plugins > < /pluginManagement > < /build > < modules > < module > ear < /module > < module > ejb < /module > < module > web < /module > < /modules > < properties > < project.build.sourceEncoding > UTF-8 < /project.build.sourceEncoding > < /properties > < /project >"
"List < String > strings = Arrays.asList ( `` foo '' , `` bar '' , `` foo '' , `` baz '' , `` foo '' , `` bar '' ) ; Set < String > distinct = new HashSet < > ( ) ; List < String > extras = new ArrayList < > ( ) ; strings .stream ( ) .filter ( x - > ! distinct.add ( x ) ) .map ( extra - > extras.add ( extra ) ) ; .map ( extra - > { System.out.println ( extra ) ; return extras.add ( extra ) ; } )"
"@ Foos ( { @ Foo ( 0 ) , @ Foo ( 1 ) , @ Foo ( 2 ) } ) public void bar ( ) { } public @ interface Foos { Foo [ ] value ( ) ; } @ Repeatable ( Foos.class ) public @ interface Foo { int value ( ) ; } @ Foo ( 0 ) @ Foo ( 1 ) @ Foo ( 2 ) public void bar1 ( ) { } @ Foo ( 2 ) @ Deprecated @ Foo ( 5 ) @ Foo ( 10 ) public void bar2 ( ) { }"
"public static void main ( String [ ] args ) throws ParseException { // create a date Date date = new Date ( ) ; long diff = date.getTime ( ) ; Date date1 = new Date ( 2013 , 10 , 1 , 11 , 6 ) ; long diff1 = date1.getTime ( ) ; System.out.println ( `` date is 1-10-2013 , `` + diff + `` have passed . `` ) ; System.out.println ( `` date is 1-10-2013 , `` + diff1 + `` have passed . `` ) ; } date is 1-10-2013 , 1380605909318 have passed.date is 1-10-2013 , 61341428160000 have passed ."
"public class WifiReceiver extends BroadcastReceiver { private WifiManager wifiManager ; private PlanMapperActivity viewerActivity ; private Context newContext ; private String operator ; private String macAddress ; private int signalStrength ; private String wifiMode ; private int frequency ; private String htMode ; private String security ; private int channelNumber ; private AlertDialog wifiAlertDialog ; private ListView wifiListView ; private ProgressDialog progress ; private Boolean checkWifiSelected ; private Boolean checkServayStart ; private String operatorName ; List < ScanResult > wifiSRList ; private static final String WPA2 = `` WPA2 '' ; private static final String WEP = `` WEP '' ; private static final String EAP = `` EAP '' ; private static final String STORED_OPERATOR = `` com.kenturf.wifiheatmap.SELECTED_OPERATOR '' ; private int requiredLevel ; private int ssidCount ; public WifiReceiver ( Context ctx , PlanMapperActivity planMapper ) { this.viewerActivity = planMapper ; this.newContext = ctx ; } public WifiReceiver ( WifiManager myWifiManager , ProgressDialog wifiProgress , Boolean isWifiSelected , Boolean isSurveyStart ) { this.wifiManager = myWifiManager ; this.progress = wifiProgress ; this.checkWifiSelected = isWifiSelected ; this.checkServayStart = isSurveyStart ; } @ Overridepublic void onReceive ( final Context context , Intent intent ) { wifiSRList = wifiManager.getScanResults ( ) ; if ( wifiSRList.size ( ) == 0 ) { Toast.makeText ( context , '' wifi List 0 '' , Toast.LENGTH_SHORT ) .show ( ) ; } if ( checkWifiSelected ) { LayoutInflater wifiLayout = ( LayoutInflater ) context.getSystemService ( Context.LAYOUT_INFLATER_SERVICE ) ; View wifiView = wifiLayout.inflate ( R.layout.dialog_fragment_wifi , null ) ; AlertDialog.Builder wifiDialog = new AlertDialog.Builder ( context ) ; wifiDialog.setCancelable ( false ) ; wifiDialog.setView ( wifiView ) ; wifiAlertDialog = wifiDialog.create ( ) ; wifiListView = ( ListView ) wifiView.findViewById ( R.id.user_wifi_detail ) ; } Collections.sort ( wifiSRList , new Comparator < ScanResult > ( ) { @ Override public int compare ( ScanResult lhs , ScanResult rhs ) { return ( lhs.level > rhs.level ? -1 : ( lhs.level == rhs.level ? 0 : 1 ) ) ; } } ) ; if ( checkWifiSelected ) { String [ ] wifiListString = new String [ wifiSRList.size ( ) ] ; for ( int i = 0 ; i < wifiSRList.size ( ) ; i++ ) { wifiListString [ i ] = ( wifiSRList.get ( i ) .SSID ) ; } wifiListView.setAdapter ( new ArrayAdapter < > ( context , android.R.layout.simple_list_item_1 , wifiListString ) ) ; wifiAlertDialog.show ( ) ; progress.dismiss ( ) ; wifiListView.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { operator = wifiSRList.get ( position ) .SSID ; macAddress = wifiSRList.get ( position ) .BSSID ; signalStrength = wifiSRList.get ( position ) .level ; frequency = wifiSRList.get ( position ) .frequency ; final String cap = wifiSRList.get ( position ) .capabilities ; final String [ ] securityModes = { WEP , WPA2 , EAP } ; for ( int i = securityModes.length - 1 ; i > = 0 ; i -- ) { if ( cap.contains ( securityModes [ i ] ) ) { security = securityModes [ i ] ; } } setOperator ( operator ) ; GetSetClass.wifiOperator = operator ; /* error start .. can not resolved method getPreferences ( ) */ SharedPreferences sharedPref = context.getPreferences ( Context.MODE_PRIVATE ) ; // error line SharedPreferences.Editor editor = sharedPref.edit ( ) ; editor.putString ( STORED_OPERATOR , operator ) ; editor.apply ( ) ; /* error end */ operatorName = operator ; setMacAddress ( macAddress ) ; setSignalStrength ( signalStrength ) ; setFrequency ( frequency ) ; setSecurity ( security ) ; setChannelNumber ( convertFrequencyToChannel ( frequency ) ) ; wifiAlertDialog.dismiss ( ) ; checkWifiSelected = false ; } } ) ; } if ( checkServayStart ) { /* error start .. can not resolved method getPreferences ( ) */ SharedPreferences shPref = context.getPreferences ( Context.MODE_PRIVATE ) ; // error line String savedOperator = shPref.getString ( STORED_OPERATOR , null ) ; Log.e ( `` operator : `` , `` saved operator is : `` + savedOperator ) ; /* error end */ if ( wifiSRList ! = null ) { ssidCount = wifiSRList.size ( ) ; for ( int i = wifiSRList.size ( ) - 1 ; i > = 0 ; i -- ) { if ( GetSetClass.wifiOperator.equals ( wifiSRList.get ( i ) .SSID ) ) { String requiredOperator = wifiSRList.get ( i ) .SSID ; requiredLevel = wifiSRList.get ( i ) .level ; context.unregisterReceiver ( this ) ; AlertDialog.Builder myBuilder = new AlertDialog.Builder ( context ) ; setRequiredLevel ( requiredLevel ) ; myBuilder.setTitle ( `` Current Signal '' ) ; myBuilder.setMessage ( `` Operator : `` + requiredOperator + `` \n\nSignal Strength : `` + requiredLevel + `` dBm '' ) ; myBuilder.setPositiveButton ( android.R.string.ok , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { dialog.dismiss ( ) ; } } ) ; myBuilder.show ( ) ; } else { Toast.makeText ( context , '' Operator Mismatch '' , Toast.LENGTH_SHORT ) .show ( ) ; } } progress.dismiss ( ) ; } } } public static int convertFrequencyToChannel ( int freq ) { if ( freq > = 2412 & & freq < = 2484 ) { return ( freq - 2412 ) / 5 + 1 ; } else if ( freq > = 5170 & & freq < = 5825 ) { return ( freq - 5170 ) / 5 + 34 ; } else { return -1 ; } } } private static final String STORED_FILE = `` com.package.name.SELECTED_FILE '' ; private static final String STORED_OPERATOR = `` com.package.name.SELECTED_OPERATOR '' ; SharedPreferences sharedPref = context.getSharedPreferences ( STORED_FILE , Context.MODE_PRIVATE ) ; SharedPreferences.Editor editor = sharedPref.edit ( ) ; editor.putString ( STORED_OPERATOR , operator ) ; editor.apply ( ) ; SharedPreferences shPref = context.getSharedPreferences ( STORED_FILE , Context.MODE_PRIVATE ) ; String savedOperator = shPref.getString ( STORED_OPERATOR , null ) ; Log.e ( `` operator : `` , `` saved operator is : `` + savedOperator ) ;"
class Item { int cost = 20 ; public int getCost ( ) { return cost ; } } class Bolt extends Item { int cost = 10 ; public int getCost ( ) { return cost ; } } public class Test { public static void main ( String [ ] args ) { Item obj = new Bolt ( ) ; System.out.println ( obj.cost ) ; System.out.println ( obj.getCost ( ) ) ; } }
public static boolean hasPalindromeInside ( String str ) { int midpoint= ( int ) Math.ceil ( ( float ) str.length ( ) /2.0 ) ; int k = str.length ( ) -1 ; for ( int i = 0 ; i < midpoint ; i++ ) { char letterLeft = str.charAt ( i ) ; char secondLetterLeft=str.charAt ( i+1 ) ; char letterRight = str.charAt ( k ) ; char secondLetterRight = str.charAt ( k-1 ) ; if ( ( i+2 ) < str.length ( ) ) { char thirdLetterLeft=str.charAt ( i+2 ) ; char thirdLetterRight=str.charAt ( k-2 ) ; if ( letterLeft == thirdLetterLeft || letterRight == thirdLetterRight ) { return true ; } } if ( letterLeft == secondLetterLeft || letterRight==secondLetterRight ) { return true ; } k -- ; } return false ; } }
import java.text.SimpleDateFormat ; class Main { public static void main ( String [ ] args ) { SimpleDateFormat format = new SimpleDateFormat ( `` yyyy ' 0'MMdd '' ) ; try { Date date = format.parse ( `` 201600101 '' ) ; System.out.println ( date ) ; } catch ( Exception ex ) { System.out.println ( ex.getMessage ( ) ) ; } } }
public void test ( String str ) { int a = 0 ; for ( int i = 0 ; i < 10 ; i++ ) { a = a + str.length ( ) ; } } public void test ( String str ) { int len = str.length ( ) ; int a = 0 ; for ( int i = 0 ; i < 10 ; i++ ) { a = a + len ; } }
"Match ( person ) .of ( Case ( Person ( `` Carl '' , Address ( $ ( ) , $ ( ) ) ) , ( street , number ) - > ... ) ) Person person = new Person ( `` Carl '' , new Address ( `` Milkyway '' , 42 ) ) ; String result2 = Match ( person ) .of ( Case ( Person ( $ ( `` Carl '' ) , Address ( $ ( ) , $ ( ) ) ) , ( street , number ) - > `` Carl lives in `` + street + `` `` + number ) , Case ( $ ( ) , ( ) - > `` not found '' ) ) ; System.out.println ( result2 ) ; Carl lives in Carl Address [ street=Milkyway , number=42 ] Case ( Person ( $ ( `` Carl '' ) , Address ( $ ( ) , $ ( ) ) ) , ( name , street , number ) - > `` Carl lives in `` + street + `` `` + number ) The target type of this expression must be a functional interface"
"public static < T , L extends List < ? extends T > & RandomAccess > void do ( L list ) { // Do some stuff } public static < T > void do ( Iterable < ? extends T > iterable ) { if ( iterable instanceof List & & iterable instanceof RandomAccess ) // invoke do ( List & RandomAccess ) method else // do something else } private static < L extends List < ? extends T > & Comparable > L cast ( Iterable < ? extends T > iterable ) { return ( L ) iterable ; } public static < T > void do ( Iterable < ? extends T > iterable ) { if ( iterable instanceof List & & iterable instanceof RandomAccess ) do ( cast ( iterable ) ) ; else // do something else do ( ( List < ? extends T > & RandomAccess ) iterable ) ; L extends List < ? extends T > & Comparable List < ? extends T > do ( ( List < ? extends T > ) iterable ) ; // Which results in invoking do ( Iterable < ? extends T )"
"object SomeObject { final object SomeEnum extends Enumeration { type SomeEnum = Value val val1 , val2 , val3 = Value } val possibleVal3 = SomeObject.SomeEnum.valueOf ( `` val3 '' ) val a = SomeObject.SomeEnum.val2a.ordinal"
"@ Overridepublic void render ( ) { Gdx.gl.glClear ( GL20.GL_COLOR_BUFFER_BIT ) ; Gdx.gl.glActiveTexture ( GL20.GL_TEXTURE0 ) ; Gdx.gl.glEnable ( GL20.GL_BLEND ) ; Gdx.gl.glBlendFunc ( GL20.GL_SRC_ALPHA , GL20.GL_ONE_MINUS_SRC_ALPHA ) ; shape.begin ( ShapeType.Filled ) ; shape.setColor ( Color.BLACK ) ; shape.rect ( 0 , 0 , 300 , 300 ) ; shape.setColor ( 1f , 0f , 0f , 0.5f ) ; shape.rect ( 100 , 100 , 100 , 100 ) ; shape.end ( ) ; Gdx.gl.glDisable ( GL20.GL_BLEND ) ; } public static void screenshot ( ) { Pixmap pixmap = getScreenshot ( 0 , 0 , Gdx.graphics.getWidth ( ) , Gdx.graphics.getHeight ( ) ) ; PixmapIO.writePNG ( new FileHandle ( Gdx.files.getLocalStoragePath ( ) + `` screenshots/test.png '' ) , pixmap ) ; pixmap.dispose ( ) ; } private static Pixmap getScreenshot ( int x , int y , int w , int h ) { final Pixmap pixmap = ScreenUtils.getFrameBufferPixmap ( x , y , w , h ) ; // Flip the pixmap upside down ByteBuffer pixels = pixmap.getPixels ( ) ; int numBytes = w * h * 4 ; byte [ ] lines = new byte [ numBytes ] ; int numBytesPerLine = w * 4 ; for ( int i = 0 ; i < h ; i++ ) { pixels.position ( ( h - i - 1 ) * numBytesPerLine ) ; pixels.get ( lines , i * numBytesPerLine , numBytesPerLine ) ; } pixels.clear ( ) ; pixels.put ( lines ) ; return pixmap ; }"
"// I am calculating count of all substrings where first and last substring character are equalpublic class Solution { public static void main ( String [ ] args ) { String inputString = `` ababaca '' ; System.out.println ( findSubstringByBruteForcce ( inputString , inputString.length ( ) ) ) ; } private static long findSubstringByBruteForcce ( String inputString , int length ) { long count = 0 ; for ( int i = 0 ; i < length ; i++ ) { for ( int j = 1 ; j < = length - i ; j++ ) { String str = inputString.substring ( i , i + j ) ; if ( str.length ( ) == 1 ) { count = count + 1 ; } else { if ( str.substring ( 0 , 1 ) .equals ( str.substring ( str.length ( ) - 1 , str.length ( ) ) ) ) { count = count + 1 ; } } } } return count ; } }"
class StaticBlock { { println ( `` initializer block : `` + message ) ; } public StaticBlock ( String message ) { this.message = message ; } private String message ; } { println ( `` initializer block : `` + message ) ; } StaticBlockDemo.java:34 : illegal forward reference println ( `` initializer block : `` + message ) ; ^1 error
"@ Componentpublic class EndPointHandler implements SOAPHandler < SOAPMessageContext > { private List < String > ssoToken ; private Map < String , List < String > > headers ; @ Override public boolean handleMessage ( SOAPMessageContext context ) { Boolean isResponse = ( Boolean ) context.get ( SOAPMessageContext.MESSAGE_OUTBOUND_PROPERTY ) ; if ( ! isResponse ) { headers = ( ( Map < String , List < String > > ) context.get ( MessageContext.HTTP_REQUEST_HEADERS ) ) ; if ( headers ! = null ) { if ( ! headers.get ( `` SSOToken '' ) .get ( 0 ) .isEmpty ( ) ) { List < String > ssoToken = headers.get ( `` SSOToken '' ) ; LOGGER.info ( ssoToken.get ( 0 ) ) ; this.ssoToken = ssoToken ; } else { LOGGER.error ( `` SSO Token value can not be empty '' ) ; return false ; } } } return true ; } public void setSSOToken ( ) { headers.put ( `` SSOToken '' , this.ssoToken ) ; } } @ Componentpublic class ConnectionManager { private static final Logger LOGGER = LoggerFactory.getLogger ( ConnectionManager.class ) ; @ Autowired private EndPointHandler handler ; private void establishConnection ( String uri ) throws FileNetIntegrationException { handler.ssoToken ; // -- > I need SSO token here but the value is NULL ; } } @ Beanpublic Endpoint endpoint ( Bus bus ) { EndpointImpl endpoint = new EndpointImpl ( bus , changeServiceEndpoint ) ; WebService ws = AnnotationUtils.findAnnotation ( endpoint.getImplementorClass ( ) , WebService.class ) ; endpoint.setAddress ( `` / '' + ws.serviceName ( ) ) ; endpoint.publish ( ) ; SOAPBinding binding = ( SOAPBinding ) endpoint.getBinding ( ) ; ArrayList < Handler > handlerChain = new ArrayList < > ( ) ; handlerChain.add ( new EndPointHandler ( ) ) ; binding.setHandlerChain ( handlerChain ) ; return endpoint ; }"
public class GlobalData { // Data-related code . This could be anything ; I 've used a simple String . // private String someData ; public String getData ( ) { return someData ; } public void setData ( String data ) { someData = data ; } // Singleton code // private static GlobalData INSTANCE ; private GlobalData ( ) { } public synchronized GlobalData getInstance ( ) { if ( INSTANCE == null ) INSTANCE = new GlobalData ( ) ; return INSTANCE ; } } // Thread 1GlobalData d = GlobalData.getInstance ( ) ; d.setData ( `` one '' ) ; // Thread 2GlobalData d = GlobalData.getInstance ( ) ; d.setData ( `` two '' ) ; // Thread 1String value = d.getData ( ) ;
public static < E extends ClassA & ClassB > void method ( E val ) { } public static < E extends ClassC & ClassB & ClassA > void method ( E val ) { } public static < E extends ClassB > void method ( E val ) { } public static < E extends ClassA & ClassB > void method ( E val ) { } public static < E extends ClassB & ClassC & ClassA > void method ( E val ) { } public static < E extends ClassB > void method ( E val ) { }
"@ EnableWebSecuritypublic class AppSecurityConfig extends WebSecurityConfigurerAdapter { @ Autowired private JwtAuthenticationFilter jwtAuthenticationFilter ; @ Bean @ Override public AuthenticationManager authenticationManagerBean ( ) throws Exception { return super.authenticationManagerBean ( ) ; } @ Override protected void configure ( HttpSecurity http ) throws Exception { http // TODO re-enable csrf after dev is done .csrf ( ) .disable ( ) // we must specify ordering for our custom filter , otherwise it // does n't work .addFilterAfter ( jwtAuthenticationFilter , UsernamePasswordAuthenticationFilter.class ) // we do n't need Session , as we are using jwt instead . Sessions // are harder to scale and manage .sessionManagement ( ) .sessionCreationPolicy ( SessionCreationPolicy.STATELESS ) ; } } @ Componentpublic class JwtAuthenticationFilter extends AbstractAuthenticationProcessingFilter { /* * we must set authentication manager for our custom filter , otherwise it * errors out */ @ Override @ Autowired public void setAuthenticationManager ( AuthenticationManager authenticationManager ) { super.setAuthenticationManager ( authenticationManager ) ; } }"
"/** * Constructs an empty < tt > HashMap < /tt > with the default initial capacity * ( 16 ) and the default load factor ( 0.75 ) . */public HashMap ( ) { this ( DEFAULT_INITIAL_CAPACITY , DEFAULT_LOAD_FACTOR ) ; } /** * The default initial capacity - MUST be a power of two . */static final int DEFAULT_INITIAL_CAPACITY = 1 < < 4 ; // aka 16 javap -c -verbose / -- -/myClass.class -- -- public static final int i ; flags : ACC_PUBLIC , ACC_STATIC , ACC_FINALConstantValue : int 16"
public class TickNumber implements Comparable < TickNumber > { protected String zone ; protected String track ; } public class GisTickNumber extends TickNumber implements Comparable < TickNumber > { private String suffix ; }
Thread 1 : Call list.add ( ) Thread 1 : Exits list.add ( ) Thread 2 : Call list.get ( list.size ( ) -1 ) Event A1Event A2Event A3Event B List < EventA > eventAList = new ArrayList < > ( ) ; connection.addListenerForEventAs ( eventAList : :add ) ; connection.waitForEventB ( ) ; //Here I am doing operations on the eventAList
"Map < String , String [ ] > map1 = new HashMap < > ( ) ; Map < String , String > map2 = new HashMap < > ( ) ; HashMap < String , String > finalResp = new HashMap < String , String > ( ) ; for ( Map.Entry < String , String [ ] > entry : map1.entrySet ( ) ) { if ( map2.containsKey ( entry.getKey ( ) ) ) { String newValue = changetoAnother ( map1.get ( entry.getKey ( ) ) , map2.get ( entry.getKey ( ) ) ) ; finalResp.put ( entry.getKey ( ) , newValue ) ; } } HashMap < String , String > map3 = new HashMap < > ( map2 ) ; map1.forEach ( ( k , v ) - > map3.merge ( k , v , ( i , j ) - > mergeValue ( i , j ) ) ) ;"
Process p = null ; BufferedReader br = null ; try { p = Runtime.getRuntime ( ) .exec ( `` ps -ef '' ) ; br = new BufferedReader ( new InputStreamReader ( p.getInputStream ( ) ) ) ; //Do something with br } catch ( Exception e ) { //Handle catch block } finally { //Do we need to set p = null ; }
public class Main { private static int i = 0 ; public static void main ( String [ ] args ) { try { m ( ) ; } catch ( StackOverflowError e ) { System.err.println ( i ) ; } } private static void m ( ) { ++i ; m ( ) ; } } stack i delta 128 1102 256 2723 1621 384 4367 1644
< Context reloadable= '' true '' path= '' /test '' docBase= '' /MY_MODULE/web/webroot '' > < Manager pathname= '' '' / > < WatchedResource > /MY_MODULE/classes < /WatchedResource > < /Context >
"public final class Container { private String name ; private int cupsWon ; private double netWorth ; public Container ( String name , int cupsWon , double netWorth ) { this.name = name ; this.cupsWon = cupsWon ; this.netWorth = netWorth ; } //NO Setters //Getters } final Container c = new Container ( `` Ted Dibiasi '' , 10 , 1000000 ) ; c.name=null orc.cupswon=0 or worst of all , c.netWorth=0.0 ? public final class Container { private String name ; private int cupsWon ; private double netWorth ; public Container ( String name , int cupsWon , double netWorth ) { this.name = name ; this.cupsWon = cupsWon ; this.netWorth = netWorth ; } public final String getName ( ) { return name ; } public final int getCupsWon ( ) { return cupsWon ; } public final double getNetWorth ( ) { return netWorth ; } } public final class Producer { private final Client client ; public Producer ( Client client ) { this.client = client ; } //Thread1 call produce ( ) public final void produce ( ) { final Container c = new Container ( `` Ted Dibiasi '' , 10 , 1000000 ) ; client.update ( c ) ; } } public final class Client { private Container c ; //private volatile Container c ; public final void update ( Container c ) { this.c = c ; } //Thread2 calls consume ( ) . public final void consume ( ) { String name = c.getName ( ) ; int cupsWon = c.getCupsWon ( ) ; double netWorth = c.getNetWorth ( ) ; } }"
"{ `` creditCard '' : { `` accountHolderName '' : `` Frank Smith '' , `` cardNumber '' : `` 5100000001598174 '' , `` cvvNumber '' : `` 012 '' , `` expireMonth '' : 10 , `` expireYear '' : 2019 , `` brand '' : `` MASTERCARD '' , `` billingAddress '' : { `` firstName '' : `` Frank '' , `` lastName '' : `` Smith '' , `` addressLine1 '' : `` 3737 Any St '' , `` city '' : `` San Jose '' , `` stateOrProvince '' : `` CA '' , `` postalCode '' : `` 95134 '' , `` country '' : `` US '' } } , `` contactEmail '' : `` fsmith1234 @ anymail.com '' , `` contactFirstName '' : `` Frank '' , `` contactLastName '' : `` Smith '' , `` shippingAddress '' : { `` recipient '' : `` Frank Smith '' , `` phoneNumber '' : `` 617 555 1212 '' , `` addressLine1 '' : `` 3737 Any St '' , `` city '' : `` San Jose '' , `` stateOrProvince '' : `` CA '' , `` postalCode '' : `` 95134 '' , `` country '' : `` US '' } , `` lineItemInputs '' : [ { `` quantity '' : 1 , `` itemId '' : `` v1|110188913683|0 '' } ] } { `` errors '' : [ { `` errorId '' : 15000 , `` domain '' : `` API_ORDER '' , `` category '' : `` APPLICATION '' , `` message '' : `` There was a problem with an eBay internal system or process . Contact eBay developer support for assistance . `` , `` parameters '' : [ { `` name '' : `` code '' , `` value '' : `` 1042 '' } ] } ] }"
class Test implements Runnable { private int x = 0 ; public void incX ( ) { synchronized ( this ) { x = ++x ; } System.out.println ( `` x is : `` +x+ '' `` +Thread.currentThread ( ) .getName ( ) ) ; } public void run ( ) { incX ( ) ; } public static void main ( String [ ] args ) { Thread t1 = new Thread ( new Test ( ) ) ; t1.start ( ) ; Thread t2 = new Thread ( new Test ( ) ) ; t2.start ( ) ; } x is : 1 Thread-1 x is : 1 Thread-0 x is : 1 Thread-1 x is : 2 Thread-0 x is : 2 Thread-0
"public class BinaryTree < T extends Comparable < ? super T > > { ... public < E extends T > void add ( E value ) { ... } public < E extends T > void add ( E value , Node node ) { ... } ... } public class BinaryTree < T extends Comparable < ? super T > > { ... public void add ( T value ) { ... } public void add ( T value , Node node ) { ... } ... } < public < E extends T > void add ( E ) ; -- - > public void add ( T ) ;"
"public static boolean isOdd ( int number ) { boolean status = false ; if ( number < 0 ) { status = false ; } else if ( number % 2 ! = 0 ) { status = true ; } return status ; } public static int sumOdd ( int start , int end ) { int sum = 0 ; if ( ( end < start ) || ( start < 0 ) || ( end < 0 ) ) { return -1 ; } for ( int i = 0 ; i < = end ; i++ ) { if ( ( isOdd ( i ) ) ) { sum += i ; } } return sum ; } System.out.println ( sumOdd ( 1 , 100 ) ) ; // → should return 2500System.out.println ( sumOdd ( -1 , 100 ) ) ; // → should return -1System.out.println ( sumOdd ( 100 , 100 ) ) ; // → should return 0System.out.println ( sumOdd ( 13 , 13 ) ) ; // → should return 13 ( This set contains one number , 13 , and it is odd ) System.out.println ( sumOdd ( 100 , -100 ) ) ; // → should return -1System.out.println ( sumOdd ( 100 , 1000 ) ) ; // → should return 247500 2500-1250049-1250000"
"public void addToBin ( Bin [ ] bins , Item item ) { Bin bin ; int bin_index = item.bin_index synchronized ( bins ) { bin = bins [ bin_index ] ; if ( bin==null ) { bin = new Bin ( ) ; bins [ bin_index ] = bin ; } } synchronized ( bin ) { bin.add ( item ) ; } } public void addToBin ( Bin [ ] bins , Item item ) { int bin_index = item.bin_index Bin bin = bins [ bin_index ] ; if ( bin==null ) { synchronized ( bins ) { bin = bins [ bin_index ] ; if ( bin==null ) { bin = new Bin ( ) ; bins [ bin_index ] = bin ; } } } synchronized ( bin ) { bin.add ( item ) ; } }"
"import java.io.IOException ; import java.net.URI ; import java.net.URISyntaxException ; import com.google.gson.JsonArray ; import com.google.gson.JsonElement ; import com.google.gson.JsonObject ; import com.google.gson.JsonParser ; import com.rallydev.rest.RallyRestApi ; import com.rallydev.rest.request.GetRequest ; import com.rallydev.rest.request.QueryRequest ; import com.rallydev.rest.request.UpdateRequest ; import com.rallydev.rest.response.QueryResponse ; import com.rallydev.rest.util.Fetch ; import com.rallydev.rest.util.QueryFilter ; import com.rallydev.rest.util.Ref ; import org.json.simple.JSONArray ; public class ExtractData { public static void main ( String [ ] args ) throws URISyntaxException , IOException , NumberFormatException { RallyRestApi restApi = new RallyRestApi ( new URI ( `` https : //rally1.rallydev.com '' ) , `` apiKeyHere '' ) ; restApi.setProxy ( URI.create ( `` http : //usernameHere : passwordHere0 @ proxyHere:8080 '' ) ) ; restApi.setApplicationName ( `` QueryExample '' ) ; //Will store all of the parsed defect data JSONArray defectData = new JSONArray ( ) ; try { QueryRequest defects = new QueryRequest ( `` defect '' ) ; defects.setFetch ( new Fetch ( `` FormattedID '' , '' Discussion '' , '' Resolution '' ) ) ; defects.setQueryFilter ( new QueryFilter ( `` Resolution '' , '' = '' , '' Configuration Change '' ) ) ; defects.setPageSize ( 5000 ) ; defects.setLimit ( 5000 ) ; QueryResponse queryResponse = restApi.query ( defects ) ; if ( queryResponse.wasSuccessful ( ) ) { System.out.println ( String.format ( `` \nTotal results : % d '' , queryResponse.getTotalResultCount ( ) ) ) ; for ( JsonElement result : queryResponse.getResults ( ) ) { JsonObject defect = result.getAsJsonObject ( ) ; System.out.println ( defect ) ; } } else { System.err.print ( `` The following errors occured : `` ) ; for ( String err : queryResponse.getErrors ( ) ) { System.err.println ( `` \t+err '' ) ; } } } finally { restApi.close ( ) ; } } } { `` _rallyAPIMajor '' : '' 2 '' , '' _rallyAPIMinor '' : '' 0 '' , '' _ref '' : '' https : //rally1.rallydev.com/slm/webservice/v2.0/defect/30023232168 '' , '' _refObjectUUID '' : '' cea42323c2f-d276-4078-92cc-6fc32323ae '' , '' _objectVersion '' : '' 6 '' , '' _refObjectName '' : '' Example defect name '' , '' Discussion '' : { `` _rallyAPIMajor '' : '' 2 '' , '' _rallyAPIMinor '' : '' 0 '' , '' _ref '' : '' https : //rally1.rallydev.com/slm/webservice/v2.0/Defect/32323912168/Discussion '' , '' _type '' : '' ConversationPost '' , '' Count '' :0 } , '' FormattedID '' : '' DE332322 '' , '' Resolution '' : '' Configuration Change '' , '' Summary '' : { `` Discussion '' : { `` Count '' :0 } } , '' _type '' : '' Defect '' }"
"JPanel panelMain = new JPanel ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c.gridx = 0 ; c.gridy = 0 ; panelMain.add ( new JButton ( `` 0,0 '' ) , c ) ; c.gridx = 1 ; c.gridy = 0 ; panelMain.add ( new JButton ( `` 1,0 '' ) , c ) ; c.gridx = 0 ; c.gridy = 1 ; panelMain.add ( new JButton ( `` 0,1 '' ) , c ) ; JPanel panelMain = new JPanel ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c.gridx = 0 ; c.gridy = 0 ; panelMain.add ( new JButton ( `` 0,0 '' ) , c ) ; c.gridx = 1 ; c.gridy = 0 ; panelMain.add ( new JButton ( `` 1,0 '' ) , c ) ; c.gridx = 0 ; c.gridy = 1 ; panelMain.add ( new JButton ( `` 0,1 '' ) , c ) ; c.gridx = 3 ; c.gridy = 0 ; panelMain.add ( new JButton ( `` 3,0 '' ) , c ) ;"
"public GrooidShell ( File tmpDir , ClassLoader parent ) { public class AndroidLauncher extends AndroidApplication { @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; AndroidApplicationConfiguration config = new AndroidApplicationConfiguration ( ) ; initialize ( new MyGdxGame ( ) , config ) ; } }"
List < String > text = new ArrayList < String > ( ) ; text.add ( `` Hello '' ) ;
public class SomeClass { public void someMethod ( ) { new SomeInterface ( ) { public void someOtherMethod ( ) { new SomeOtherInterface ( ) { new someThirdMethod ( ) { //My question is about code located here . } } ; } } ; } }
public Troop getTroop ( String uniqueID ) { Unit potentialTroop = get ( uniqueID ) ; if ( potentialTroop instanceof Vehicle ) { throw new InternalError ( ) ; } return ( Troop ) potentialTroop ; } public Vehicle getVehicle ( String uniqueID ) { Unit potentialVehicle = get ( uniqueID ) ; if ( potentialVehicle instanceof Troop ) { throw new InternalError ( ) ; } return ( Vehicle ) potentialVehicle ; }
"List < Integer > list = IntStream .range ( 0,120 ) .mapToObj ( Integer : :new ) .collect ( Collectors.toList ( ) ) ; [ ] [ 0 ] [ 0 , 1 ] [ 0 , 1 , 2 ] [ 0 , 1 , 2 , 3 ] [ 0 , 1 , 2 , 3 , 4 ] [ 0 , 1 , 2 , 3 , 4 , 5 ] [ 0 , 1 , 2 , 3 , 4 , 5 , 6 ] [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ] [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ... //so on upto 120Map < Integer , List < Integer > > myMapOne = new HashMap < > ( ) ; for ( Integer inteter : list ) { myMapOne.put ( inteter , list.subList ( 0 , list.indexOf ( inteter ) ) ) ; } Map < Integer , Integer > myMap = list .stream ( ) .collect ( Collectors.groupingBy ( Integer : :new , list.subList ( 0 , Integer : :new ) ) ) ; public static List < Integer > getList ( Integer index , List < Integer > list ) { return list.subList ( 0 , list.indexOf ( index ) ) ; }"
"Question : Given a sequence of positive integers A and an integer T , return whether there is a *continuous sequence* of A that sums up to exactly TExample [ 23 , 5 , 4 , 7 , 2 , 11 ] , 20 . Return True because 7 + 2 + 11 = 20 [ 1 , 3 , 5 , 23 , 2 ] , 8 . Return True because 3 + 5 = 8 [ 1 , 3 , 5 , 23 , 2 ] , 7 Return False because no sequence in this array adds up to 7Note : We are looking for an O ( N ) solution . There is an obvious O ( N^2 ) solution which is a good starting point but is not the final solution we are looking for . public class Tester { public static void main ( String [ ] args ) { int [ ] myArray = { 23 , 5 , 4 , 7 , 2 , 11 } ; System.out.println ( isValid ( myArray , 20 ) ) ; } public static boolean isValid ( int [ ] array , int sum ) { int pointer = 0 ; int temp = 0 ; while ( pointer < array.length ) { for ( int i = pointer ; i < array.length ; i++ ) { if ( array [ i ] > sum ) break ; temp += array [ i ] ; if ( temp == sum ) return true ; else if ( temp > sum ) break ; // otherwise continue } temp = 0 ; pointer++ ; } return false ; } }"
class A < E > { void go ( E e ) { } } class B extends A { } A < ? extends A > a1 = new A < A > ( ) ; A < ? extends A > a2 = new A < B > ( ) ; a1.go ( new A ( ) ) ; // i get a compiler errora2.go ( new B ( ) ) ; // i get a compiler error
"int [ ] a = { 1,2,3 } ; int [ ] b = { 2,1,3 } ; int [ ] c = { 2,1,3 } ; Set < int [ ] > result = new LinkedHashSet < > ( ) ; int [ ] x = { 1,2,3 } ; int [ ] z = { 2,1,3 } ; int [ ] m = { 2,1,3 } ; result.add ( x ) ; result.add ( z ) ; result.add ( m ) ; for ( int [ ] arr : result ) { printArray ( arr ) ; } 1 2 32 1 32 1 3"
public abstract class RandomPool < T > extends Pool { //Class ... }
"public Ticket findByID ( Long id ) { Ticket t = findByID ( ActiveTicket.class , id ) ; if ( null == t ) { t = findByID ( ResolvedTicket.class , id ) ; } return t ; } public < C > C findByID ( Class < C > class , PK id ) { return ( C ) getHibernateTemplate ( ) .get ( class , id ) ; }"
public class Test { private static int myVar ; public Test ( int myVar ) { this.myVar=myVar ; } public void frequentlyUsedMultiThreadMethod ( ) { //read myVar } } public class Test { public void frequentlyUsedMultiThreadMethod ( int myVar ) { //read myVar } } public class Test { private final int myVar ; public Test ( int myVar ) { this.myVar=myVar ; } public void frequentlyUsedMultiThreadMethod ( ) { //read myVar } }
System.setSecurityManager ( null ) ; @ Override public void checkPermission ( Permission perm ) { if ( perm.getName ( ) .equals ( `` setSecurityManager '' ) ) { throw new SecurityException ( `` You shall have no other security manager but me ! `` ) ; } }
"| -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|| tbl_object_proxy || -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- || Id ( pk ) | object_proxy_id ( pk ) || -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|| 1 | 150 -- || 1 | 149 |= must be able to be DUPLICATE which is not the case right now.| 2 | 150 -- || 2 | 151 || -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| @ Entity @ Table ( name = `` tbl_user_settings '' , uniqueConstraints = { @ UniqueConstraint ( columnNames= { `` user_id '' } ) } ) @ Inheritance ( strategy = InheritanceType.TABLE_PER_CLASS ) public class Settings implements Serializable { @ Id @ SequenceGenerator ( name= '' someSequence '' , sequenceName= '' SEQ_SOMENAME '' , allocationSize =1 ) @ GeneratedValue ( strategy=GenerationType.SEQUENCE , generator= '' someSequence '' ) @ Column ( name= '' id '' ) private int setting_id ; @ OneToOneprivate User user ; @ ManyToOneprivate SomeObject someobject ; @ ElementCollection @ CollectionTable ( name= '' tbl_collection_name '' , joinColumns= @ JoinColumn ( name= '' id '' ) , uniqueConstraints = { @ UniqueConstraint ( columnNames= { `` id '' , `` object_proxy_id '' } ) } ) @ Column ( name= '' SomeObject '' ) private Set < SomeObject > objectProxy ; /* ... constructors and methods ... */ } -- Table schema| -- -- -- -- -- -- -- -- -- -| | tbl_user_settings | | -- -- -- -- -- -- -- -- -- -| | id |PK < < Unique > > | user_id |FK reference tbl_user < < Unique > > | object_id |FK reference tbl_object | -- -- -- -- -- -- -- -- -- -|| -- -- -- -- -- -- -- -- -- || tbl_object_proxy || -- -- -- -- -- -- -- -- -- || id |PK reference tbl_user_settings | object_proxy_id |PK reference tbl_object < < Unique > > BUT I DO N'T WANT THIS TO BE UNIQUE ON ITSELF ! ! ! ! | -- -- -- -- -- -- -- -- -- |"
class Calculator extends Thread { protected Listener listener ; public void setListener ( Listener l ) { listener = l ; } public void run ( ) { while ( running ) { ... do something ... Listener l = listener ; if ( l ! = null ) { l.onEvent ( ... ) ; } } } }
public class ClassA { public static void main ( String [ ] args ) { System.out.println ( `` A '' ) ; } } public class ClassB extends ClassA { public static void main ( String [ ] args ) { System.out.println ( `` B '' ) ; } } public class ClassB extends ClassA { //blank body }
"# define n 1000 /* Then number of nodes */double dist [ n ] [ n ] ; void floyd_warshall ( int NumOfThreads ) { int i , j , k ; omp_set_num_threads ( NumOfThreads ) ; for ( k = 0 ; k < n ; ++k ) # pragma omp parallel for private ( i , j ) for ( i = 0 ; i < n ; ++i ) for ( j = 0 ; j < n ; ++j ) if ( ( dist [ i ] [ k ] * dist [ k ] [ j ] ! = 0 ) & & ( i ! = j ) ) if ( ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) || ( dist [ i ] [ j ] == 0 ) ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ; } public final int numNodes =1000 ; public final double [ ] [ ] costs= new double [ numNodes ] [ numNodes ] ; const int n = 1000 ; static double [ , ] dist = new double [ n , n ] ; static void floyd_warshall ( ParallelOptions pOp ) { int k ; for ( k = 0 ; k < n ; ++k ) Parallel.For < int > ( 0 , n , pOp , ( ) = > 0 , ( i , loop , j ) = > { for ( j = 0 ; j < n ; ++j ) if ( ( dist [ i , k ] * dist [ k , j ] ! = 0 ) & & ( i ! = j ) ) if ( ( dist [ i , k ] + dist [ k , j ] < dist [ i , j ] ) || ( dist [ i , j ] == 0 ) ) dist [ i , j ] = dist [ i , k ] + dist [ k , j ] ; return 0 ; } , ( j ) = > { } ) ; static void floyd_warshallSingle ( ) { int i , j , k ; for ( k = 0 ; k < n ; ++k ) for ( i = 0 ; i < n ; ++i ) for ( j = 0 ; j < n ; ++j ) if ( ( dist [ i , k ] * dist [ k , j ] ! = 0 ) & & ( i ! = j ) ) if ( ( dist [ i , k ] + dist [ k , j ] < dist [ i , j ] ) || ( dist [ i , j ] == 0 ) ) dist [ i , j ] = dist [ i , k ] + dist [ k , j ] ; } const int n = 1000 ; static double [ ] [ ] dist = new double [ n ] [ ] ; static void floyd_warshallSingle ( ) { int i , j , k ; for ( k = 0 ; k < n ; ++k ) for ( i = 0 ; i < n ; ++i ) for ( j = 0 ; j < n ; ++j ) if ( ( dist [ i ] [ k ] * dist [ k ] [ j ] ! = 0 ) & & ( i ! = j ) ) if ( ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) || ( dist [ i ] [ j ] == 0 ) ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ; } static void floyd_warshall ( ParallelOptions pOp ) { int k ; for ( k = 0 ; k < n ; ++k ) Parallel.For < int > ( 0 , n , pOp , ( ) = > 0 , ( i , loop , j ) = > { for ( j = 0 ; j < n ; ++j ) if ( ( dist [ i ] [ k ] * dist [ k ] [ j ] ! = 0 ) & & ( i ! = j ) ) if ( ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) || ( dist [ i ] [ j ] == 0 ) ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ; return 0 ; } , ( j ) = > { } ) ; }"
"// Log time in GMT+2 , other times are in GMT// The following lines are written following system startup ( all times are correct ) 08 juin 00:08:49.993 [ main ] WARN com.pgscada.webdyn.Webdyn - Scheduling next webdyn service time . Currently 2018-06-07T22:08:49.993Z , last connection null08 juin 00:08:50.586 [ main ] INFO com.pgscada.webdyn.Webdyn - The next data sample at 2018-06-07T22:10:00Z and the next FTP connection at 2018-06-07T22:30:00Z08 juin 00:08:50.586 [ main ] WARN com.pgscada.webdyn.Webdyn - Completed webdyn schedule in 9ms , next execution at 2018-06-07T22:10:00Z ( in 69414 ms ) will run as data-sample// So we are expecting the next execution to occur at 00:10:00 ( or in 69.4 seconds ) // Except that it runs at 00:11:2108 juin 00:11:21.206 [ pool-1-thread-4 ] INFO com.pgscada.webdyn.Webdyn - Executing Webdyn service , isDataSample=true , isFtpConnection=false , nextTimeout=2018-06-07T22:10:00Z , lastFtpConnection=null// But thats OK because it should correct itself08 juin 00:13:04.151 [ pool-1-thread-4 ] WARN com.pgscada.webdyn.Webdyn - Scheduling next webdyn service time . Currently 2018-06-07T22:10:00Z , last connection null08 juin 00:13:04.167 [ pool-1-thread-4 ] INFO com.pgscada.webdyn.Webdyn - The next data sample at 2018-06-07T22:20:00Z and the next FTP connection at 2018-06-07T22:30:00Z08 juin 00:13:04.167 [ pool-1-thread-4 ] WARN com.pgscada.webdyn.Webdyn - Completed webdyn schedule in 0ms , next execution at 2018-06-07T22:20:00Z ( in 415833 ms ) will run as data-sample// So now we are expecting the next execution to occur at 00:20:00 ( or in 415.8 seconds ) // But it runs at 00:28:0608 juin 00:28:06.145 [ pool-1-thread-4 ] INFO com.pgscada.webdyn.Webdyn - Executing Webdyn service , isDataSample=true , isFtpConnection=false , nextTimeout=2018-06-07T22:20:00Z , lastFtpConnection=null ScheduledExecutorService EXECUTORS = Executors.newScheduledThreadPool ( 10 ) ; private void scheduleNextTimeout ( Instant currentTime , Instant lastFtpConnection ) { try { log.info ( `` Scheduling next webdyn service time . Currently { } , last connection { } '' , currentTime , lastFtpConnection ) ; // Parse config files first getConfigIni ( ) .parse ( ) ; long time = System.nanoTime ( ) ; final Instant earliestPossibleTimeout = Instant.now ( ) .plusSeconds ( 5 ) ; Instant nextDataSample = nextTimeout ( currentTime ) ; if ( nextDataSample.isBefore ( earliestPossibleTimeout ) ) { final Instant oldTime = nextDataSample ; nextDataSample = nextTimeout ( earliestPossibleTimeout ) ; log.warn ( `` Next data sample was calculated to a time in the past ' { } ' , resetting to a future time : { } '' , oldTime , nextDataSample ) ; } Instant nextFtp = nextFtpConnection ( currentTime , lastFtpConnection ) ; if ( nextFtp.isBefore ( earliestPossibleTimeout ) ) { final Instant oldTime = nextFtp ; nextFtp = nextFtpConnection ( earliestPossibleTimeout , lastFtpConnection ) ; log.warn ( `` Next FTP connection was calculated to a time in the past ' { } ' , resetting to a future time : { } '' , oldTime , nextFtp ) ; } final boolean isFtpConnection = ! nextDataSample.isBefore ( nextFtp ) ; final boolean isDataSample = ! isFtpConnection || nextDataSample.equals ( nextFtp ) ; log.info ( `` The next data sample at { } and the next FTP connection at { } '' , nextDataSample , nextFtp ) ; final Instant nextTimeout = nextDataSample.isBefore ( nextFtp ) ? nextDataSample : nextFtp ; final long millis = Duration.between ( Instant.now ( ) , nextTimeout ) .toMillis ( ) ; EXECUTORS.schedule ( ( ) - > { log.info ( `` Executing Webdyn service , isDataSample= { } , isFtpConnection= { } , nextTimeout= { } , lastFtpConnection= { } '' , isDataSample , isFtpConnection , nextTimeout , lastFtpConnection ) ; long tme = System.nanoTime ( ) ; try { connect ( isDataSample , isFtpConnection , nextTimeout , lastFtpConnection ) ; log.warn ( `` Completed webdyn service in { } s '' , ( System.nanoTime ( ) - tme ) / 1000000 ) ; } catch ( final Throwable ex ) { log.error ( `` Failed webdyn service after { } ms : { } '' , ( System.nanoTime ( ) - tme ) / 1000000 , ex.getMessage ( ) , ex ) ; } finally { scheduleNextTimeout ( nextTimeout , isFtpConnection ? nextTimeout : lastFtpConnection ) ; } } , millis , TimeUnit.MILLISECONDS ) ; log.warn ( `` Completed webdyn schedule in { } ms , next execution at { } ( in { } ms ) will run as { } '' , ( System.nanoTime ( ) - time ) / 1000000 , nextTimeout , millis , isFtpConnection ? `` ftp-connection '' : `` data-sample '' ) ; } catch ( final Throwable ex ) { log.error ( `` Fatal error in webdyn schedule : { } '' , ex.getMessage ( ) , ex ) ; } }"
"public class WWTest extends ApplicationTemplate { public static class VisualizationFrame extends ApplicationTemplate.AppFrame { public VisualizationFrame ( ) { super ( new Dimension ( 1200 , 1024 ) ) ; final Globe globe = getWwd ( ) .getModel ( ) .getGlobe ( ) ; //Create a sphere at 0,0 on the surface of the Earth wtih a 60 NMi radius final Vec4 sphereCenter = globe.computePointFromLocation ( LatLon.ZERO ) ; final Sphere sphere = new Sphere ( sphereCenter , 111120 ) ; // Draw the sphere final RenderableLayer sphereLayer = new RenderableLayer ( ) ; sphereLayer.addRenderable ( sphere ) ; final RenderableLayer pathLayer = new RenderableLayer ( ) ; // Create a line at 10k feet ( 3048 meters ) that starts outside the sphere at ( 2 , -2 ) and proceeds into the sphere at ( 0.5 , 0.5 ) final Position lineStart = Position.fromDegrees ( 2 , -2 , 3048 ) ; final Position lineEnds = Position.fromDegrees ( 0.5 , 0.5 , 3048 ) ; final Path asPath = new Path ( lineStart , lineEnds ) ; pathLayer.addRenderable ( asPath ) ; // Now that we 've visualized the line , let 's do some intersection math final Vec4 lineStartsAsVec = globe.computePointFromPosition ( lineStart ) ; final Vec4 lineEndsAsVec = globe.computePointFromPosition ( lineEnds ) ; final Line asLine = Line.fromSegment ( lineStartsAsVec , lineEndsAsVec ) ; // *** This is where it gets whacky - true , but no intersection ? final boolean doesIntersect = sphere.intersects ( asLine ) ; final Intersection [ ] intersection = sphere.intersect ( asLine ) ; //outputs : Intersection found : null System.out.println ( doesIntersect ? `` Intersection found : `` + Arrays.toString ( intersection ) : `` No intersection , Why Not ! ? ! ? `` ) ; insertBeforeCompass ( getWwd ( ) , sphereLayer ) ; insertBeforeCompass ( getWwd ( ) , pathLayer ) ; getWwd ( ) .getView ( ) .setEyePosition ( Position.fromDegrees ( 0 , 0 , 500_000 ) ) ; getLayerPanel ( ) .update ( getWwd ( ) ) ; } } public static void main ( String [ ] args ) { ApplicationTemplate.start ( `` World Wind Sphere-Line Intersection '' , VisualizationFrame.class ) ; } } < dependency > < groupId > gov.nasa < /groupId > < artifactId > worldwind < /artifactId > < version > 2.0.0 < /version > < /dependency > < dependency > < groupId > gov.nasa < /groupId > < artifactId > worldwindx < /artifactId > < version > 2.0.0 < /version > < /dependency > < dependency > < groupId > org.jogamp.gluegen < /groupId > < artifactId > gluegen-rt-main < /artifactId > < version > 2.2.4 < /version > < /dependency > < dependency > < groupId > org.jogamp.jogl < /groupId > < artifactId > jogl-all-main < /artifactId > < version > 2.2.4 < /version > < /dependency > import gov.nasa.worldwind.geom.Intersection ; import gov.nasa.worldwind.geom.LatLon ; import gov.nasa.worldwind.geom.Line ; import gov.nasa.worldwind.geom.Position ; import gov.nasa.worldwind.geom.Sphere ; import gov.nasa.worldwind.geom.Vec4 ; import gov.nasa.worldwind.globes.Globe ; import gov.nasa.worldwind.layers.RenderableLayer ; import gov.nasa.worldwind.render.Path ; import gov.nasa.worldwindx.examples.ApplicationTemplate ; import static gov.nasa.worldwindx.examples.ApplicationTemplate.insertBeforeCompass ; import java.awt.Dimension ; import java.util.Arrays ;"
"import java.lang.reflect.Field ; import java.lang.reflect.Modifier ; public class Main { public static final Integer FLAG = 44 ; static void setFinalStatic ( Class < ? > clazz , String fieldName , Object newValue ) throws NoSuchFieldException , IllegalAccessException { Field field = clazz.getDeclaredField ( fieldName ) ; field.setAccessible ( true ) ; Field modifiers = field.getClass ( ) .getDeclaredField ( `` modifiers '' ) ; modifiers.setAccessible ( true ) ; modifiers.setInt ( field , field.getModifiers ( ) & ~Modifier.FINAL ) ; field.set ( null , newValue ) ; } public static void main ( String ... args ) throws Exception { System.out.printf ( `` Everything is % s % n '' , FLAG ) ; setFinalStatic ( Main.class , `` FLAG '' , 33 ) ; System.out.printf ( `` Everything is % s % n '' , FLAG ) ; } } Everything is 44Everything is 33 public static final int FLAG = 44 ; Everything is 44Everything is 44"
"public class WhyIsDifferent { public static void main ( String [ ] args ) { int [ ] values = getArray ( ) ; Iterate ( values , 598 , 600 ) ; // 70 ms Iterate ( values , 200 , 202 ) ; // 0 ms Iterate ( values , 700 , 702 ) ; // 0 ms Iterate ( values , 300 , 310 ) ; // 1 ms } public static void Iterate ( int [ ] values , int from , int to ) { long start = System.currentTimeMillis ( ) ; IntStream.of ( values ) .filter ( i - > i < to & & i > from ) .forEach ( i - > System.out.println ( i ) // do a something ) ; System.out.println ( `` Time : '' + ( System.currentTimeMillis ( ) - start ) ) ; } public static int [ ] getArray ( ) { int [ ] values = new int [ 1000 ] ; for ( int i = 0 ; i < 1000 ; i++ ) { values [ i ] = i ; } return values ; } }"
"public static class AsyncChannelWriter { private final CompletableFuture < Integer > startPosition ; private final AsynchronousFileChannel channel ; public AsyncChannelWriter ( AsynchronousFileChannel channel ) throws IOException { this.channel = channel ; this.startPosition = CompletableFuture.completedFuture ( ( int ) channel.size ( ) ) ; } public CompletableFuture < Integer > getStartPosition ( ) { return startPosition ; } public CompletableFuture < Integer > write ( ByteBuffer byteBuffer , CompletableFuture < Integer > currentPosition ) { return currentPosition.thenCompose ( position - > { CompletableFuture < Integer > writenBytes = new CompletableFuture < > ( ) ; channel.write ( byteBuffer , position , null , new CompletionHandler < Integer , ByteBuffer > ( ) { @ Override public void completed ( Integer result , ByteBuffer attachment ) { writenBytes.complete ( result ) ; } @ Override public void failed ( Throwable exc , ByteBuffer attachment ) { writenBytes.completeExceptionally ( exc ) ; } } ) ; return writenBytes.thenApply ( writenBytesLength - > writenBytesLength + position ) ; } ) ; } public void close ( CompletableFuture < Integer > currentPosition ) { currentPosition.whenComplete ( ( position , throwable ) - > IOUtils.closeQuietly ( channel ) ) ; } } public static void main ( String [ ] args ) throws IOException { final String filepath = `` /media/veracrypt4/files/1.jpg '' ; final String downloadUrl = `` https : //m0.cl/t/butterfly-3000.jpg '' ; final AsyncHttpClient client = Dsl.asyncHttpClient ( Dsl.config ( ) .setFollowRedirect ( true ) .setResponseBodyPartFactory ( AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY ) ) ; final AsynchronousFileChannel channel = AsynchronousFileChannel.open ( Paths.get ( filepath ) , StandardOpenOption.WRITE , StandardOpenOption.TRUNCATE_EXISTING , StandardOpenOption.CREATE ) ; final AsyncChannelWriter asyncChannelWriter = new AsyncChannelWriter ( channel ) ; final AtomicReference < CompletableFuture < Integer > > atomicReferencePosition = new AtomicReference < > ( asyncChannelWriter.getStartPosition ( ) ) ; client.prepareGet ( downloadUrl ) .execute ( new AsyncCompletionHandler < Response > ( ) { @ Override public State onBodyPartReceived ( HttpResponseBodyPart content ) throws Exception { //if EAGER , content.getBodyByteBuffer ( ) return HeapByteBuffer , if LAZY , return DirectByteBuffer final ByteBuffer bodyByteBuffer = content.getBodyByteBuffer ( ) ; final CompletableFuture < Integer > currentPosition = atomicReferencePosition.get ( ) ; final CompletableFuture < Integer > newPosition = asyncChannelWriter.write ( bodyByteBuffer , currentPosition ) ; atomicReferencePosition.set ( newPosition ) ; return State.CONTINUE ; } @ Override public Response onCompleted ( Response response ) { asyncChannelWriter.close ( atomicReferencePosition.get ( ) ) ; return response ; } } ) ; } @ Overridepublic State onBodyPartReceived ( HttpResponseBodyPart content ) throws Exception { final ByteBuffer bodyByteBuffer = content.getBodyByteBuffer ( ) ; final CompletableFuture < Integer > currentPosition = atomicReferencePosition.get ( ) ; final CompletableFuture < Integer > newPosition = finalAsyncChannelWriter.write ( bodyByteBuffer , currentPosition ) ; atomicReferencePosition.set ( newPosition ) ; Thread.sleep ( 10 ) ; return State.CONTINUE ; } private final byte [ ] bytes ; public EagerResponseBodyPart ( ByteBuf buf , boolean last ) { super ( last ) ; bytes = byteBuf2Bytes ( buf ) ; } @ Override public ByteBuffer getBodyByteBuffer ( ) { return ByteBuffer.wrap ( bytes ) ; } private final ByteBuf buf ; public LazyResponseBodyPart ( ByteBuf buf , boolean last ) { super ( last ) ; this.buf = buf ; } @ Override public ByteBuffer getBodyByteBuffer ( ) { return buf.nioBuffer ( ) ; }"
public boolean parallelOR ( ) { ExecutorService executor = Executors.newFixedThreadPool ( 2 ) ; Future < Boolean > taskA = executor.submit ( new SlowTaskA ( ) ) ; Future < Boolean > taskB = executor.submit ( new SlowTaskB ( ) ) ; return taskA.get ( ) || taskB.get ( ) ; // This is not what I want // Exception handling omitted for clarity }
int x = 0 ; x += 7.4 ;
axon : eventhandling : processors : SomeProcessorName : initialSegmentCount : 2 threadCount : 1 mode : TRACKING
"public class Main { public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } } ; printPathWeights ( arr ) ; } public static void printPathWeights ( int [ ] [ ] m ) { System.out.println ( printPathWeights ( m , 0 , 0 , new int [ m.length ] [ m [ 0 ] .length ] , 0 ) ) ; } /* * @ param map marks the visited cells */ private static int printPathWeights ( int [ ] [ ] m , int row , int col , int [ ] [ ] map , int carrier ) { if ( row < 0 || col < 0 || row > = m.length || col > = m [ 0 ] .length || map [ row ] [ col ] == 1 ) return 0 ; if ( row == m.length - 1 & & col == m [ 0 ] .length - 1 ) return m [ row ] [ col ] + carrier ; map [ row ] [ col ] = 1 ; return printPathWeights ( m , row + 1 , col , map , carrier + m [ row ] [ col ] ) + printPathWeights ( m , row - 1 , col , map , carrier + m [ row ] [ col ] ) + printPathWeights ( m , row , col + 1 , map , carrier + m [ row ] [ col ] ) + printPathWeights ( m , row , col - 1 , map , carrier + m [ row ] [ col ] ) ; } } int arr [ ] [ ] = { { 1 , 1 } , { 1 , 1 } } ;"
"WorkspaceConnector connector = null ; WorkspaceFactory workspaceFactory = null ; String variableListString = null ; Properties sasServerProperties = new Properties ( ) ; sasServerProperties.put ( `` host '' , host ) ; sasServerProperties.put ( `` port '' , port ) ; sasServerProperties.put ( `` userName '' , userName ) ; sasServerProperties.put ( `` password '' , password ) ; Properties [ ] sasServerPropertiesList = { sasServerProperties } ; workspaceFactory = new WorkspaceFactory ( sasServerPropertiesList , null , logWriter ) ; connector = workspaceFactory.getWorkspaceConnector ( 0L ) ; IWorkspace sasWorkspace = connector.getWorkspace ( ) ; ILanguageService sasLanguage = sasWorkspace.LanguageService ( ) ; //send variable list string//continued"
class C1 < T extends C1 < T > > { } class C2 < U > extends C1 < C2 < U > > { } C1 < ? extends C2 < String > > c ;
"package com.example ; import java.util.function . * ; public class App { public static void main ( String [ ] args ) { App a1 = new App ( ) ; BiFunction < App , Long , Long > f1 = App : :m1 ; BiFunction < App , Long , Void > f2 = App : :m2 ; f1.apply ( a1 , 6L ) ; f2.apply ( a1 , 6L ) ; } private long m1 ( long x ) { return x ; } private void m2 ( long x ) { } }"
6 = 1+5 ; 6 = 1+2+3 ; 6 = 1*2+4 ; 6 = 2+4 ; 6 = 2*3 ;
"public class Test { private static Map < Integer , Object > clientTypesInitiated = new ConcurrentHashMap < Integer , Object > ( ) ; /* to process client request we need to create corresponding client type data . on the first signal we create that data , on the second - we process the request*/ void onClientRequestReceived ( int clientTypeIndex ) { if ( clientTypesInitiated.put ( clientTypeIndex , `` '' ) == null ) { //new client type index arrived , this type was never processed //process data for that client type and put it into the map of types Object clientTypeData = createClientTypeData ( clientTypeIndex ) ; clientTypesInitiated.put ( clientTypeIndex , clientTypeData ) ; } else { //already existing index - we already have results and we can use them processClientUsingClientTypeData ( clientTypesInitiated.get ( clientTypeIndex ) ) ; } } Object createClientTypeData ( int clientIndex ) { return new Object ( ) ; } void processClientUsingClientTypeData ( Object clientTypeData ) { } }"
int x = 9 ; int y = 8 ; int z = 7 ; if ( x > 9 ) if ( y > 8 ) System.out.println ( `` x > 9 and y > 8 '' ) ; else if ( z > = 7 ) System.out.println ( `` SHOULD OUTPUT THIS x < = 9 and z > = 7 '' ) ; else System.out.println ( `` x < = 9 and z < 7 '' ) ; int x = 9 ; int y = 8 ; int z = 7 ; if ( x > 9 ) { if ( y > 8 ) System.out.println ( `` x > 9 and y > 8 '' ) ; } else if ( z > = 7 ) System.out.println ( `` SHOULD OUTPUT THIS x < = 9 and z > = 7 '' ) ; else System.out.println ( `` x < = 9 and z < 7 '' ) ;
"new String ( ) : 141677000 ns `` Test '' : 1148000 ns `` Te '' + '' st '' : 1059000 nsnew String ( ) : 141253000 ns '' Test '' : 1177000 ns '' Te '' + '' st '' : 1089000 nsnew String ( ) : 142307000 ns '' Test '' : 1878000 ns '' Te '' + '' st '' : 1082000 nsnew String ( ) : 142127000 ns '' Test '' : 1155000 ns '' Te '' + '' st '' : 1078000 ns ... import java.util.concurrent.TimeUnit ; public class StringPoolPerformance { public static long perform0 ( ) { long start = System.nanoTime ( ) ; for ( int i=0 ; i < 1000000 ; i++ ) { String str = new String ( `` Test '' ) ; } return System.nanoTime ( ) -start ; } public static long perform1 ( ) { long start = System.nanoTime ( ) ; for ( int i=0 ; i < 1000000 ; i++ ) { String str = `` Test '' ; } return System.nanoTime ( ) -start ; } public static long perform2 ( ) { long start = System.nanoTime ( ) ; for ( int i=0 ; i < 1000000 ; i++ ) { String str = `` Te '' + '' st '' ; } return System.nanoTime ( ) -start ; } public static void main ( String [ ] args ) { long time0=0 , time1=0 , time2=0 ; for ( int i=0 ; i < 100 ; i++ ) { // result time0 += perform0 ( ) ; time1 += perform1 ( ) ; time2 += perform2 ( ) ; } System.out.println ( `` new String ( ) : `` + time0 + `` ns '' ) ; System.out.println ( `` \ '' Test\ '' : `` + time1 + `` ns '' ) ; System.out.println ( `` \ '' Te\ '' +\ '' st\ '' : `` + time2 + `` ns '' ) ; } }"
"public class QuizActivity extends AppCompatActivity { private ActionBarDrawerToggle mToggle ; private QuestionLibrary mQuestionLibrary = new QuestionLibrary ( ) ; private TextView mScoreView ; private TextView mQuestionView ; private Button mButtonChoice1 ; private Button mButtonChoice2 ; private Button mButtonChoice3 ; private String mAnswer ; private int mScore = 0 ; private int mQuestionNumber = 0 ; Dialog dialog ; Dialog dialog2 ; TextView closeButton ; TextView closeButton2 ; CheckBox checkBoxmp ; private MediaPlayer mp , mp2 ; SharedPreferences mypref ; SharedPreferences.Editor editor ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_quiz ) ; //Dialog 1 createDialog ( ) ; Button dialogButton = ( Button ) findViewById ( R.id.dialogbtn ) ; dialogButton.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dialog.show ( ) ; } } ) ; closeButton.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dialog.dismiss ( ) ; } } ) ; //end Dialog 1 //Dialog 2 createDialog2 ( ) ; Button dialogButton2 = ( Button ) findViewById ( R.id.dialogbtn2 ) ; dialogButton2.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dialog2.show ( ) ; } } ) ; closeButton2.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dialog2.dismiss ( ) ; } } ) ; //end Dialog 2 SharedPreferences mypref = getPreferences ( MODE_PRIVATE ) ; final SharedPreferences.Editor editor = mypref.edit ( ) ; checkBoxmp.setOnCheckedChangeListener ( new CompoundButton.OnCheckedChangeListener ( ) { @ Override public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { editor.putBoolean ( `` playSounds '' , ! isChecked ) ; editor.commit ( ) ; if ( ! isChecked ) { mp.setVolume ( 1,1 ) ; mp2.setVolume ( 1,1 ) ; } else { mp.setVolume ( 0,0 ) ; mp2.setVolume ( 0,0 ) ; } } } ) ; final boolean playSounds = mypref.getBoolean ( `` playSounds '' , false ) ; checkBoxmp.setChecked ( ! playSounds ) ; if ( playSounds ) { mp.setVolume ( 1,1 ) ; mp2.setVolume ( 1,1 ) ; } else { mp.setVolume ( 0,0 ) ; mp2.setVolume ( 0,0 ) ; } TextView shareTextView = ( TextView ) findViewById ( R.id.share ) ; shareTextView.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { Intent myIntent = new Intent ( Intent.ACTION_SEND ) ; myIntent.setType ( `` text/plain '' ) ; myIntent.putExtra ( Intent.EXTRA_SUBJECT , `` Hello ! `` ) ; myIntent.putExtra ( Intent.EXTRA_TEXT , `` My highscore in Quizzi is very high ! I bet you ca n't beat me except you are cleverer than me . Download the app now ! https : //play.google.com/store/apps/details ? id=amapps.impossiblequiz '' ) ; startActivity ( Intent.createChooser ( myIntent , `` Share with : '' ) ) ; } } ) ; mQuestionLibrary.shuffle ( ) ; setSupportActionBar ( ( Toolbar ) findViewById ( R.id.nav_action ) ) ; DrawerLayout mDrawerLayout = ( DrawerLayout ) findViewById ( R.id.drawerLayout ) ; mToggle = new ActionBarDrawerToggle ( this , mDrawerLayout , R.string.open , R.string.close ) ; mDrawerLayout.addDrawerListener ( mToggle ) ; mToggle.syncState ( ) ; getSupportActionBar ( ) .setDisplayHomeAsUpEnabled ( true ) ; // Able to see the Navigation Burger `` Button '' ( ( NavigationView ) findViewById ( R.id.nv1 ) ) .setNavigationItemSelectedListener ( new NavigationView.OnNavigationItemSelectedListener ( ) { @ Override public boolean onNavigationItemSelected ( MenuItem menuItem ) { switch ( menuItem.getItemId ( ) ) { case R.id.nav_stats : startActivity ( new Intent ( QuizActivity.this , Menu2.class ) ) ; break ; case R.id.nav_about : startActivity ( new Intent ( QuizActivity.this , Menu3.class ) ) ; break ; } return true ; } } ) ; mScoreView = ( TextView ) findViewById ( R.id.score_score ) ; mQuestionView = ( TextView ) findViewById ( R.id.question ) ; mButtonChoice1 = ( Button ) findViewById ( R.id.choice1 ) ; mButtonChoice2 = ( Button ) findViewById ( R.id.choice2 ) ; mButtonChoice3 = ( Button ) findViewById ( R.id.choice3 ) ; final List < Button > choices = new ArrayList < > ( ) ; choices.add ( mButtonChoice1 ) ; choices.add ( mButtonChoice2 ) ; choices.add ( mButtonChoice3 ) ; updateQuestion ( ) ; //Code of the mediaplayer begins : for ( final Button choice : choices ) { choice.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View view ) { if ( choice.getText ( ) .equals ( mAnswer ) ) { try { mp = new MediaPlayer ( ) ; if ( playSounds ) { mp.setVolume ( 1 , 1 ) ; } else { mp.setVolume ( 0 , 0 ) ; } mp.reset ( ) ; AssetFileDescriptor afd ; afd = getAssets ( ) .openFd ( `` sample.mp3 '' ) ; mp.setDataSource ( afd.getFileDescriptor ( ) , afd.getStartOffset ( ) , afd.getLength ( ) ) ; mp.prepare ( ) ; } catch ( IllegalStateException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } mp.setOnCompletionListener ( new MediaPlayer.OnCompletionListener ( ) { @ Override public void onCompletion ( MediaPlayer unused ) { mp.release ( ) ; mp = null ; } } ) ; mp.start ( ) ; updateScore ( ) ; updateQuestion ( ) ; Toast.makeText ( QuizActivity.this , `` Correct '' , Toast.LENGTH_SHORT ) .show ( ) ; } else { try { mp2 = new MediaPlayer ( ) ; if ( playSounds ) { mp2.setVolume ( 1 , 1 ) ; } else { mp.setVolume ( 0 , 0 ) ; } mp2.reset ( ) ; AssetFileDescriptor afd ; afd = getAssets ( ) .openFd ( `` wrong.mp3 '' ) ; mp2.setDataSource ( afd.getFileDescriptor ( ) , afd.getStartOffset ( ) , afd.getLength ( ) ) ; mp2.prepare ( ) ; } catch ( IllegalStateException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } mp2.setOnCompletionListener ( new MediaPlayer.OnCompletionListener ( ) { @ Override public void onCompletion ( MediaPlayer unused ) { mp2.release ( ) ; mp2 = null ; } } ) ; mp2.start ( ) ; Toast.makeText ( QuizActivity.this , `` Wrong ... Try again ! `` , Toast.LENGTH_SHORT ) .show ( ) ; Intent intent = new Intent ( QuizActivity.this , Menu2.class ) ; intent.putExtra ( `` score '' , mScore ) ; // pass score to Menu2 startActivity ( intent ) ; } } } ) ; } } //End mediaplayer main codeprivate void updateQuestion ( ) { if ( mQuestionNumber < mQuestionLibrary.getLength ( ) ) { mQuestionView.setText ( mQuestionLibrary.getQuestion ( mQuestionNumber ) ) ; mButtonChoice1.setText ( mQuestionLibrary.getChoice1 ( mQuestionNumber ) ) ; mButtonChoice2.setText ( mQuestionLibrary.getChoice2 ( mQuestionNumber ) ) ; mButtonChoice3.setText ( mQuestionLibrary.getChoice3 ( mQuestionNumber ) ) ; mAnswer = mQuestionLibrary.getCorrectAnswer ( mQuestionNumber++ ) ; } else { Toast.makeText ( QuizActivity.this , `` Last Question ! You are very intelligent ! `` , Toast.LENGTH_SHORT ) .show ( ) ; Intent intent = new Intent ( QuizActivity.this , Menu2.class ) ; intent.putExtra ( `` score '' , mScore ) ; startActivity ( intent ) ; } } private void updateScore ( ) { mScoreView.setText ( String.valueOf ( ++mScore ) ) ; SharedPreferences mypref = getPreferences ( MODE_PRIVATE ) ; int highScore = mypref.getInt ( `` highScore '' , 0 ) ; if ( mScore > highScore ) { SharedPreferences.Editor editor = mypref.edit ( ) ; editor.putInt ( `` highScore '' , mScore ) ; editor.apply ( ) ; } } @ Overridepublic boolean onOptionsItemSelected ( MenuItem item ) { return mToggle.onOptionsItemSelected ( item ) || super.onOptionsItemSelected ( item ) ; } private void createDialog ( ) { dialog = new Dialog ( this ) ; dialog.setTitle ( `` Tutorial '' ) ; dialog.setContentView ( R.layout.popup_menu1_1 ) ; closeButton = ( TextView ) dialog.findViewById ( R.id.closeTXT ) ; } private void createDialog2 ( ) { dialog2 = new Dialog ( this ) ; dialog2.setTitle ( `` Settings '' ) ; dialog2.setContentView ( R.layout.popup_menu1_2 ) ; closeButton2 = ( TextView ) dialog2.findViewById ( R.id.closeTXT2 ) ; checkBoxmp = ( CheckBox ) dialog2.findViewById ( R.id.ckeckBox ) ; }"
"public class Application { private static final StringBuffer output = new StringBuffer ( ) ; private static final StringBuffer errOutput = new StringBuffer ( ) ; private static final CountDownLatch latch = new CountDownLatch ( 2 ) ; public static void main ( String [ ] args ) throws IOException , InterruptedException { Process exec = Runtime.getRuntime ( ) .exec ( `` /bin/cat '' ) ; OutputStream procIn = exec.getOutputStream ( ) ; InputStream procOut = exec.getInputStream ( ) ; InputStream procErrOut = exec.getErrorStream ( ) ; new Thread ( new StreamConsumer ( procOut , output ) ) .start ( ) ; new Thread ( new StreamConsumer ( procErrOut , errOutput ) ) .start ( ) ; PrintWriter printWriter = new PrintWriter ( procIn ) ; printWriter.print ( `` hello world '' ) ; printWriter.flush ( ) ; printWriter.close ( ) ; int ret = exec.waitFor ( ) ; latch.await ( ) ; System.out.println ( output.toString ( ) ) ; System.out.println ( errOutput.toString ( ) ) ; } public static class StreamConsumer implements Runnable { private InputStream input ; private StringBuffer output ; public StreamConsumer ( InputStream input , StringBuffer output ) { this.input = input ; this.output = output ; } @ Override public void run ( ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( input ) ) ; String line ; try { while ( ( line = reader.readLine ( ) ) ! = null ) { output.append ( line + System.lineSeparator ( ) ) ; } } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } finally { try { reader.close ( ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } finally { latch.countDown ( ) ; } } } } }"
class List < T > { T head ; List < T > next ; } class A < T > { List < T > l ; public < T > int length ( ) { List < T > l = this.l ; int c = 1 ; while ( l.next ! = null ) { c++ ; l = l.next ; } return c ; } public static void main ( String [ ] args ) { A < Integer > a = new A < Integer > ( ) ; a.l = new List < Integer > ( ) ; a.l.head = 123 ; a.l.next = new List < Integer > ( ) ; a.l.next.head = 432 ; System.out.println ( `` list length : `` + a.length ( ) ) ; } } $ javac A.java & & java AA.java:10 : incompatible typesfound : List < T > required : List < T > List < T > l = this.l ; ^1 error
public interface X { @ Nonnull public List < A > func ( ) ; } public class XImpl implements X { @ Override @ Nonnull public List < A > func ( ) { //code } } public class XImpl implements X { @ Override public List < A > func ( ) { //code } }
public class TestClass { public static < T > void method ( List < T > objects ) throws Exception { for ( int i = 0 ; i < objects.size ( ) ; i++ ) { // Create new object of the same class T obj = ( T ) objects.get ( i ) .getClass ( ) .newInstance ( ) ; } } } T obj = objects.get ( i ) ;
"public abstract void foo ( Map var1 ) ; override def foo ( var1 : java.util.Map [ Int , Int ] ) { }"
ArrayList < Integer > list = new ArrayList < Integer > ( ) ; list.add ( 123 ) ; LinkedList < Integer > anotherNewList = new LinkedList < Integer > ( ) ; anotherNewList.add ( 333 ) ;
public static synchronized void myMethod ( MyParameter p ) { //body ( not expensive ) } myMethod ( generateParameter ( ) ) ;
interface java.util.Collections $ SelfComparable
"Locale locale = new Locale ( `` de '' , `` AT '' ) ; Log.i ( TAG , `` country code : `` + locale.getCountry ( ) ) ; //returns `` AT '' which is an ISO 3166 2-letter code"
SomeClass.someMethod ( ) : SomeClass.someOneElsesMethod ( ) someMethod ( ) ;
DateFormat d1 = new SimpleDateFormat ( `` ddMMyyyy '' ) ; DateFormat d2 = new SimpleDateFormat ( `` ddMMyyyy '' ) ; DateFormat d3 = new SimpleDateFormat ( `` ddMMyy '' ) ; System.out.println ( `` d1 = `` + d1 ) ; System.out.println ( `` d2 = `` + d2 ) ; System.out.println ( `` d3 = `` + d3 ) ; d1 = java.text.SimpleDateFormat @ c5bfbc60d2 = java.text.SimpleDateFormat @ c5bfbc60d3 = java.text.SimpleDateFormat @ b049fd40
public static ThreadLocal < Integer > i = new ThreadLocal < Integer > ( ) { { public Integer initialValue ( ) { return 3 ; } } ;
"@ Beanpublic BiFunction < KTable < MyKey , MyValue > , KTable < MyOtherKey , MyOtherValue > , KStream < MyKey , MyEnrichedValue > > process ( ) { return ( topicOne , topicTwo ) - > topicOne .leftJoin ( topicTwo , value - > MyOtherKey.newBuilder ( ) .setFieldA ( value.getFieldA ( ) ) .setFieldB ( value.getFieldB ( ) ) .build ( ) , this : :enrich ) .toStream ( ) ; } plugins { id 'org.springframework.boot ' version ' 2.3.1.RELEASE ' id 'io.spring.dependency-management ' version ' 1.0.9.RELEASE ' id 'com.commercehub.gradle.plugin.avro ' version ' 0.9.1 ' } ... ext { set ( 'springCloudVersion ' , `` Hoxton.SR6 '' ) } ... implementation 'org.springframework.cloud : spring-cloud-stream-binder-kafka-streams'implementation 'io.confluent : kafka-streams-avro-serde:5.5.1 ' spring : application : name : app-name stream : bindings : process-in-0 : destination : topic1 group : $ { spring.application.name } process-in-1 : destination : topic2 group : $ { spring.application.name } process-out-0 : destination : outputTopic kafka : streams : binder : applicationId : $ { spring.application.name } brokers : $ { KAFKA_BROKERS } configuration : commit.interval.ms : 1000 producer : acks : all retries : 20 default : key : serde : io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde value : serde : io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde min-partition-count : 2 { `` fieldA '' : 1 , `` fieldB '' : 1 } , , { `` fieldA '' : 1 , `` fieldB '' : 1 } { `` fieldA '' : 2 , `` fieldB '' : 2 } , , { `` fieldA '' : 2 , `` fieldB '' : 2 } { `` fieldA '' : 3 , `` fieldB '' : 3 } , , { `` fieldA '' : 3 , `` fieldB '' : 3 } { `` fieldA '' : 4 , `` fieldB '' : 4 } , , { `` fieldA '' : 4 , `` fieldB '' : 4 } { `` fieldA '' : 2 , `` fieldB '' : 2 } , , { `` fieldA '' : 2 , `` fieldB '' : 2 } { `` fieldA '' : 3 , `` fieldB '' : 3 } , , { `` fieldA '' : 3 , `` fieldB '' : 3 } @ Beanpublic BiFunction < KStream < MyKey , MyValue > , KTable < MyOtherKey , MyOtherValue > , KStream < MyKey , MyEnrichedValue > > process ( ) { return ( topicOne , topicTwo ) - > topicOne .map ( ... ) .toTable ( ) .leftJoin ( topicTwo , value - > MyOtherKey.newBuilder ( ) .setFieldA ( value.getFieldA ( ) ) .setFieldB ( value.getFieldB ( ) ) .build ( ) , this : :enrich ) .toStream ( ) ; }"
"public class Practice { public static void main ( String [ ] args ) { int [ ] [ ] a = { { 1,2,3 } , { 4,5 } } ; a [ 0 ] = a [ 1 ] ; } }"
"< s : form method= '' post '' action= '' % { methodOne } '' cssClass= '' buttons '' > public String methodOne ( ) { return anotherClass.methodTwo ( id ) ; } public static String methodTwo ( String id ) { return fastEncode ( `` '' , `` longurl/view.jsp '' , new ParameterPairing ( `` id '' , id ) ) ; }"
"static int findMax ( int [ ] mas ) { int a [ ] = new int [ mas.length ] ; a [ pos ] = 1 ; int max = 0 ; for ( int j = 0 ; j < mas.length ; j++ ) { for ( int i = 0 ; i < a.length ; i++ ) { if ( a [ i ] == 0 & & a [ mas [ i ] ] ! = 0 ) { a [ i ] = a [ mas [ i ] ] + 1 ; if ( a [ i ] > max ) max = a [ i ] ; } } } return max ; } static class Node { static int nodesCount = 0 ; int val ; int deep ; List < Node > childrens = new ArrayList < > ( ) ; static Set < Integer > deeps = new HashSet < > ( ) ; public Node ( int val , int deep ) { this.val = val ; this.deep = deep ; deeps.add ( deep ) ; nodesCount++ ; } public List < Node > getChildrens ( ) { return childrens ; } public int getDeep ( ) { return deep ; } } static int findMax ( int [ ] mas ) { Node head = null ; for ( int i = 0 ; i < mas.length ; i++ ) { if ( mas [ i ] == -1 ) head = new Node ( i , 1 ) ; } fillChildren ( head , mas ) ; return Node.deeps.stream ( ) .max ( Comparator.naturalOrder ( ) ) .get ( ) ; } private static void fillChildren ( Node head , int [ ] mas ) { for ( int i = 0 ; i < mas.length ; i++ ) { if ( mas [ i ] == head.val ) { Node child = new Node ( i , head.getDeep ( ) + 1 ) ; head.getChildrens ( ) .add ( child ) ; fillChildren ( child , mas ) ; } } }"
abstract class EntityA { AssocA myA ; abstract void meet ( ) ; } abstract class AssocA { int something ; abstract void greet ( ) ; } class AssocAConcrete extends AssocA { void greet ( ) { System.out.println ( `` hello '' ) ; } void salute ( ) { System.out.println ( `` I am saluting . '' ) } } class EntityAConcrete extends EntityA { void meet ( ) { System.out.println ( `` I am about to meet someone '' ) ; ( ( AssocAConcrete ) myA ) .salute ( ) ; } } AssocAConcrete myAssoc = new Assoca ( ) ; EnitityA < T extends AssocA > myEntity = new EntityA < AssocAConcrete > ( ) ; myEntity.setAssoc ( myAssoc ) ; myAssoc.salute ( ) ;
String entityName = `` SimpleEntity '' ; JavaInterfaceSource repository = Roaster.create ( JavaInterfaceSource.class ) .setName ( entityName + `` Repository '' ) ; JavaInterfaceSource jpaInterface = repository.addInterface ( JpaRepository.class ) ; jpaInterface.addTypeVariable ( entityName ) ; jpaInterface.addTypeVariable ( `` String '' ) ; public interface SimpleEntityRepository < SimpleEntity > extends org.springframework.data.jpa.repository.JpaRepository { }
class Provider { public Provider ( ) { buildCache ( ) ; } private void buildCache ( ) { try { this.cache = getDataFromDb ( ) ; } catch ( Exception ex ) { throw new ? ? ? } } }
class foo { private Object bar ; public foo ( Object pBar ) { if ( pBar == null ) { bar = new Object ( ) ; } else { bar = pBar } } // I DO NOT WANT ANYONE TO MODIFY THE VALUE OF bar OUT OF THE CONSTRUCTOR }
public class Test < A < B > > { } // A and B both being generic parameters . public class com.Test < T > { public com.Test ( ) ; Code : 0 : aload_0 1 : invokespecial # 12 // Method java/lang/Object . `` < init > '' : ( ) V 4 : return }
class Example { private final Set < String > values ; public Example ( String ... values ) { values = new HashSet < String > ( Arrays.asList ( values ) ) ; } } incompatible types : java.util.HashSet < java.lang.String > can not be converted to java.lang.String [ ]
public void matrixChainOrder ( int [ ] p ) { int n = p.length - 1 ; m = new int [ n ] [ n ] ; s = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i++ ) { m [ i ] = new int [ n ] ; m [ i ] [ i ] = 0 ; s [ i ] = new int [ n ] ; } ...
List list = new ArrayList < Integer > ( ) ; ListIterator < Integer > litr = null ; list.add ( `` A '' ) ; list.add ( `` 1 '' ) ; list.add ( 5 ) ; litr = list.listIterator ( ) ; while ( litr.hasNext ( ) ) { System.out.println ( `` UIterating `` + litr.next ( ) ) ; } A15 List < Integer > list = new ArrayList < Integer > ( ) ;
"Base Salary Plus Commissioned Employee : Sue Smith with ssn : 222-22-2222Gross Sales : $ 3000.00 Commission Rate : 0.05 with Base Salary : $ 300.00 Earnings : $ 450.00 Base Salary Plus Commissioned Employee : Sue Smith with ssn : 222-22-2222Gross Sales : $ 3000.00 Commission Rate : 0.05 Earnings : $ 450.00with Base Salary : $ 300.00 Earnings : $ 450.00 @ Override public String toString ( ) { return String.format ( `` % s : % s % n % s : $ % .2f \n % s : % .2f \n % s $ % .2f '' , `` Commissioned Employee '' , super.toString ( ) , `` Gross Sales '' , getGrossSales ( ) , `` Commission Rate '' , getCommissionRate ( ) , `` Earnings : '' , earnings ( ) ) ; } @ Override public String toString ( ) { return String.format ( `` \n % s % s \n % s : $ % , .2f \n % s $ % .2f '' , `` Base Salary Plus '' , super.toString ( ) , `` with Base Salary '' , getBaseSalary ( ) , `` Earnings : '' , earnings ( ) ) ; } CommissionEmployee employee1 = new CommissionEmployee ( `` Fred '' , `` Jones '' , `` 111-11-1111 '' , 2000.0 , .05 ) ; BasePlusCommissionEmployee employee2 = new BasePlusCommissionEmployee ( `` Sue '' , `` Smith '' , `` 222-22-2222 '' , 3000.0 , .05 , 300 ) ; System.out.printf ( `` % s % s % s % s % s '' , employee1 , employee2 , employee3 , employee4 , employee5 ) ;"
public static void main ( String [ ] args ) { SimpleDateFormat df = new SimpleDateFormat ( `` HH : mm '' ) ; try { Date added = df.parse ( `` 00:00 '' ) ; System.out.println ( added ) ; System.out.println ( added.getTime ( ) ) ; } catch ( ParseException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } }
"public class BooleanSizeTest { /** * This method attempts to calculate the size of a boolean . */ public static void main ( String [ ] args ) { System.gc ( ) ; //Request garbage collection so that any arbitrary objects are removed . long a1 , a2 , a3 ; //The variables to hold the free memory at different times . Runtime r = Runtime.getRuntime ( ) ; //Get the runtime . System.gc ( ) ; //Request garbage collection so that any arbitrary objects are removed . a1 = r.freeMemory ( ) ; //The initial amount of free memory in bytes . boolean [ ] lotsOfBools = new boolean [ 10_000_000 ] ; //Declare a boolean array . a2 = r.freeMemory ( ) ; System.gc ( ) ; //Request garbage collection . a3 = r.freeMemory ( ) ; // Amount of free memory after creating 10,000,000 booleans . System.out.println ( `` a1 = `` +a1+ '' , a2 = `` +a2+ '' , a3 = `` +a3 ) ; double bSize = ( double ) ( a1-a2 ) /10_000_000 ; /*Calculate the size of a boolean using the difference of a1 and a2*/ System.out.println ( `` boolean = `` +bSize ) ; } }"
"public class TestIntern { public static void main ( String [ ] argvs ) { String s1 = new StringBuilder ( `` ja '' ) .append ( `` va '' ) .toString ( ) ; String s2 = new StringBuilder ( `` go '' ) .append ( `` lang '' ) .toString ( ) ; System.out.println ( s1 == s1.intern ( ) ) ; System.out.println ( s2 == s2.intern ( ) ) ; } } falsetrue falsetrue falsefalse * When the intern method is invoked , if the pool already contains a * string equal to this < code > String < /code > object as determined by * the { @ link # equals ( Object ) } method , then the string from the pool is * returned . Otherwise , this < code > String < /code > object is added to the * pool and a reference to this < code > String < /code > object is returned . ~~~~ And what does *this* here mean ? the string object in the heap or in the string pool ? if it returns object in the heap the out put should be : true true otherwise should *always* be : false false Am I right ? truetrue falsefalse"
"public class Message extends HashMap < String , String > implements Serializable { public MessageID ID ; public int Encode ( byte [ ] buff , int off ) ; public int Decode ( byte [ ] buff , int off ) ; // ... } public static void ProcessMessage ( Message msg ) { Intent broadcastIntent = new Intent ( ) ; broadcastIntent.setAction ( Receiver.BROADCAST ) ; broadcastIntent.addCategory ( Intent.CATEGORY_DEFAULT ) ; broadcastIntent.putExtra ( `` MESSAGE '' , ( Serializable ) msg ) ; parentService.sendBroadcast ( broadcastIntent ) ; Print ( `` Broadcasting intent to receiver ( `` +Receiver.BROADCAST+ '' ) from : `` +parentService.toString ( ) ) ; } public void onReceive ( Context context , Intent intent ) { Sys.Print ( `` Receiver handling : `` +intent.getAction ( ) ) ; if ( intent.getAction ( ) .equals ( BROADCAST ) ) { try { Message msg = ( Message ) intent.getSerializableExtra ( `` MESSAGE '' ) ; Sys.Print ( `` Receiver handling `` + msg.ID.toString ( ) ) ; } catch ( Exception ex ) { Sys.Print ( `` Failed handling message , reason : `` +ex.getStackTrace ( ) .toString ( ) ) ; } } } com.myapp.Receiver.onReceive ( Receiver.java:24 ) android.app.LoadedApk $ ReceiverDispatcher $ Args.run ( LoadedApk.java:709 ) android.os.Handler.handleCallback ( Handler.java:587 ) android.os.Handler.dispatchMessage ( Handler.java:92 ) android.os.Looper.loop ( Looper.java:138 ) android.app.ActivityThread.main ( ActivityThread.java:3701 ) java.lang.reflect.Method.invokeNative ( Native Method ) java.lang.reflect.Method.invoke ( Method.java:507 ) com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:878 ) com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:636 ) dalvik.system.NativeStart.main ( Native Method ) public class Message implements Parcelable { public HashMap < String , String > Data ; public Message ( ) { Data=new HashMap < > ( ) ; } public int Encode ( byte [ ] buff , int off ) ; public int Decode ( byte [ ] buff , int off ) ; public void Add ( String i , String v ) ; public String At ( String i ) ; public boolean ContainsKey ( String i ) ; @ Override public int describeContents ( ) { return 0 ; } @ Override public void writeToParcel ( Parcel out , int flags ) { out.writeMap ( this.Data ) ; } public static final Parcelable.Creator CREATOR = new Parcelable.Creator ( ) { public Message createFromParcel ( Parcel in ) { return new Message ( in ) ; } public Message [ ] newArray ( int size ) { return new Message [ size ] ; } } ; public Message ( Parcel in ) { Data=new HashMap < > ( ) ; in.readMap ( this.Data , String.class.getClassLoader ( ) ) ; } }"
int a = 3 ; int.class.isInstance ( a ) ;
"CheckoutCommand command = new CheckoutCommand ( ) ; command.setBuilder ( null ) ; command.setRecursive ( true ) ; command.setModule ( module ) ; if ( revision ! =null ) { command.setCheckoutByRevision ( revision ) ; } command.setPruneDirectories ( true ) ; command.setUseHeadIfNotFound ( true ) ; executeCommand ( command , AnonymizerConstants.DEFAULT_LOCAL_PATH ) ;"
1. while ( conditionIsTrue ) { 2 . Object object = new Object ( ) ; 3 . } 1 . Object object = null ; 2. while ( conditionIsTrue ) { 3. object = new Object ( ) ; 4 . }
public class Copier { private static final int POOL_SIZE = 2 ; private static volatile Copier instance = null ; private static Semaphore semaphore ; private Copier ( ) { } public static Copier getInstance ( ) { if ( instance == null ) { synchronized ( Copier.class ) { if ( instance == null ) { instance = new Copier ( ) ; semaphore = new Semaphore ( POOL_SIZE ) ; } } } return instance ; } public void fileTransfer ( CopyThread copyThread ) { try { semaphore.acquire ( ) ; System.out.println ( `` Running thread ... '' ) ; copyThread.run ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } finally { semaphore.release ( ) ; System.out.println ( `` Thread released.. '' ) ; } } } public class Driver { public static void main ( String [ ] args ) { Copier copier = Copier.getInstance ( ) ; CopyThread copyThread1 = new CopyThread ( ) ; CopyThread copyThread2 = new CopyThread ( ) ; copier.fileTransfer ( copyThread1 ) ; copier.fileTransfer ( copyThread2 ) ; } } Running thread ... 3.998784MB were transferred in 5.902514932 secondsThread released..Running thread ... 4.062673MB were transferred in 7.199550077 secondsThread released..
"System.out.println ( `` .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ... . .. .. '' .matches ( `` ( ? i ) ( ? : . * ) ? \\W ? ( [ a-z0-9-_\\. ] + ( ( ? : * ) \\. ( ? : * ) ) + ( ? : DE ) ) ( ? : [ 0-9 ] { 1,5 } ) ? `` ) ) ; [ Repeating text ] ... Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4279Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Loop.match ( Matcher , int , CharSequence ) line : 4785Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4279Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Single ( Pattern $ BmpCharProperty ) .match ( Matcher , int , CharSequence ) line : 3798Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4272Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Loop.match ( Matcher , int , CharSequence ) line : 4785Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4272Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Single ( Pattern $ BmpCharProperty ) .match ( Matcher , int , CharSequence ) line : 3798Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4279Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Loop.matchInit ( Matcher , int , CharSequence ) line : 4801Pattern $ Prolog.match ( Matcher , int , CharSequence ) line : 4741Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4272Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Ques.match ( Matcher , int , CharSequence ) line : 4182Pattern $ BranchConn.match ( Matcher , int , CharSequence ) line : 4568Pattern $ GroupTail.match ( Matcher , int , CharSequence ) line : 4717Pattern $ Single ( Pattern $ BmpCharProperty ) .match ( Matcher , int , CharSequence ) line : 3798Pattern $ Curly.match0 ( Matcher , int , int , CharSequence ) line : 4272Pattern $ Curly.match ( Matcher , int , CharSequence ) line : 4234Pattern $ GroupHead.match ( Matcher , int , CharSequence ) line : 4658Pattern $ Branch.match ( Matcher , int , CharSequence ) line : 4604Matcher.match ( int , int ) line : 1270Matcher.matches ( ) line : 604Pattern.matches ( String , CharSequence ) line : 1135String.matches ( String ) line : 2121Main.main ( String [ ] ) line : 11"
public class Main { public static void main ( String [ ] args ) { Integer exp1 = true ? null : 5 ; Integer exp2 = true ? null : true ? null : 50 ; System.out.println ( `` exp1 = `` +exp1+ '' exp2 = `` +exp2 ) ; Integer exp3 = false ? 5 : true ? null : 50 ; //Causes the NullPointerException to be thrown . System.out.println ( `` exp3 = `` +exp3 ) ; } }
// C.javaclass C { public static void main ( String arg [ ] ) { System.out.println ( `` A '' +new C ( ) ) ; } public String toString ( ) { System.out.print ( `` B '' ) ; return `` C '' ; } } // output : // BAC
public class A { } public class B extends A { } List < B > list = ( List < B > ) ( List < ? > ) collectionOfListA ;
Pattern p1 = Pattern.compile ( `` \\ ( [ ^ ) ] *\\ ) '' ) ; Pattern p2 = Pattern.compile ( `` \\ ( . * ? \\ ) '' ) ; Pattern p3 = Pattern.compile ( `` \\ ( [ ^ ) ] *+\\ ) '' ) ;
"* < p > The best algorithms for manipulating random access lists ( such as * < tt > ArrayList < /tt > ) can produce quadratic behavior when applied to * sequential access lists ( such as < tt > LinkedList < /tt > ) . Generic list * algorithms are encouraged to check whether the given list is an * < tt > instanceof < /tt > this interface before applying an algorithm that would * provide poor performance if it were applied to a sequential access list , * and to alter their behavior if necessary to guarantee acceptable * performance . public static < T > List < T > synchronizedList ( List < T > list ) { return ( list instanceof RandomAccess ? new SynchronizedRandomAccessList < T > ( list ) : new SynchronizedList < T > ( list ) ) ; }"
"java.lang.StackOverflowError at java.util.HashMap.putVal ( HashMap.java:631 ) at java.util.HashMap.put ( HashMap.java:612 ) at rx.internal.operators.OnSubscribeToMap $ ToMapSubscriber.onNext ( OnSubscribeToMap.java:127 ) at rx.internal.operators.OnSubscribeFilter $ FilterSubscriber.onNext ( OnSubscribeFilter.java:76 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) public Observable < Map < String , JsonObject > > extractTopLevelSummariesFromForms ( JsonArray summaries , Func2 < String , String , Observable < JsonObject > > summaryGatherer ) { List < Observable < JsonObject > > summaryObservables = new LinkedList < > ( ) ; summaries.stream ( ) .map ( JsonUtil : :safeJsonObject ) .filter ( summary - > StringUtils.isNotEmpty ( summary.getString ( NAME ) ) || StringUtils.isNotEmpty ( summary.getString ( Form.TITLE ) ) ) .forEach ( summary - > { if ( StringUtils.isNotEmpty ( summary.getString ( TEXT ) ) ) summaryObservables.add ( gatherSummariesFromElement ( summary.getString ( Summary.SHORT_NAME ) , Summary.SummaryValues.FORM , summary.getString ( Summary.SHORT_NAME ) + `` .hidden '' , summary.getString ( VALUE ) , summaryGatherer ) ) ; if ( StringUtils.isNotEmpty ( summary.getString ( Form.TEXT ) ) ) summaryObservables.add ( gatherSummariesFromElement ( summary.getString ( Summary.SHORT_NAME ) , Summary.SummaryValues.FORM , summary.getString ( Summary.SHORT_NAME ) + `` .title '' , summary.getString ( Summary.VALUE ) , summaryGatherer , true ) ) ; } ) ; return Observable.merge ( Observable.from ( summaryObservables ) ) .filter ( summaryResult - > summaryResult ! = null ) .toMap ( summaryResult - > summaryResult.getString ( KEY ) , summaryResult - > summaryResult.getJsonObject ( TEXT ) ) ; } private Observable < JsonObject > gatherSummariesFromElement ( String parentName , String parentType , String elementName , String summaryValue , Func2 < String , String , Observable < JsonObject > > summaryGatherer , Set < String > visited , boolean isList ) { if ( visited.contains ( elementName ) ) return Observable.just ( null ) ; visited.add ( elementName ) ; Map < String , JsonObject > summariesMap = new HashMap < > ( ) ; summariesMap.put ( elementName , new JsonObject ( ) .put ( Summary.SummaryValues.FORM , form ) .put ( SUMMARY_TYPE , parentType ) ) ; Set < String > variables = TextEngine.getVariables ( summariesMap ) ; Observable < JsonObject > elementSummaryObservable = Observable.just ( getSummaryEntry ( elementName , form , parentType , isList ) ) ; if ( variables ! = null & & ! variables.isEmpty ( ) ) { elementSummaryObservable = elementSummaryObservable.mergeWith ( Observable.from ( variables ) .flatMap ( variable - > { if ( StringUtils.contains ( variable , `` . '' ) & & StringUtils.equals ( parentName , StringUtils.split ( variable , `` . `` ) [ 0 ] ) ) return Observable.just ( null ) ; else return summaryGatherer.call ( parentName , variable ) .flatMap ( variableEntry - > { if ( variableEntry == null ) return Observable.just ( null ) ; else return gatherSummariesFromElement ( parentName , variableEntry.getString ( SOURCE_TYPE ) , variable , variableEntry.getString ( FORM ) , summaryGatherer , visited , variableEntry.getBoolean ( Summary.SummaryValues.IS_LIST , false ) ) ; } ) ; } ) ) ; } return elementSummaryObservable ; } Exception in thread `` pool-26-thread-2 '' java.lang.IllegalStateException : Fatal Exception thrown on Scheduler.Worker thread.at rx.internal.schedulers.ScheduledAction.run ( ScheduledAction.java:59 ) at rx.internal.schedulers.ExecutorScheduler $ ExecutorSchedulerWorker.run ( ExecutorScheduler.java:107 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1149 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:624 ) at java.lang.Thread.run ( Thread.java:748 ) Caused by : java.lang.StackOverflowErrorat rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.tryEmit ( OperatorMerge.java:355 ) at rx.internal.operators.OperatorMerge $ InnerSubscriber.onNext ( OperatorMerge.java:846 ) at rx.internal.operators.OperatorMerge $ MergeSubscriber.emitScalar ( OperatorMerge.java:395 )"
"Public String ATypeOperation ( String pin , String amount ) { doSomething ( ) ; doMoreStuff ( ) ; requestBuilder.buildATypeRequest ( pin , amount ) ; doAfterStuff ( ) ; } Public String BTypeOperation ( String name , String sex , String age ) { doSomething ( ) ; doMoreStuff ( ) ; requestBuilder.buildBTypeRequest ( name , sex , age ) ; doAfterStuff ( ) ; }"
StringBuilder request = new StringBuilder ( ) ; String inputLine ; while ( ! ( inputLine = in.readLine ( ) ) .equals ( `` '' ) ) { request.append ( inputLine + `` \r\n '' ) ; }
... //these lines may be reordereda=7 ; b=5 ; ... //but what about this ? callOne ( ) ; callTwo ( ) ;
"@ Target ( ElementType.TYPE_USE ) @ Retention ( RetentionPolicy.SOURCE ) public @ interface TypeUseAnno { } public class SomeClass extends HashMap < @ TypeUseAnno String , String > { } @ SupportedSourceVersion ( SourceVersion.RELEASE_8 ) @ SupportedAnnotationTypes ( `` base.annotations.TypeUseAnno '' ) public class Processor extends AbstractProcessor { @ Override public synchronized void init ( ProcessingEnvironment processingEnv ) { super.init ( processingEnv ) ; this.processingEnv.getMessager ( ) .printMessage ( Diagnostic.Kind.WARNING , `` Initialized . `` ) ; } @ Override public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { this.processingEnv.getMessager ( ) .printMessage ( Diagnostic.Kind.WARNING , `` Invoked . `` ) ; for ( TypeElement annotation : annotations ) { this.processingEnv.getMessager ( ) .printMessage ( Diagnostic.Kind.WARNING , `` '' + roundEnv.getElementsAnnotatedWith ( annotation ) ) ; } return true ; } }"
public class WrapperClasses { void overloadedMethod ( Number N ) { System.out.println ( `` Number Class Type '' ) ; } void overloadedMethod ( Double D ) { System.out.println ( `` Double Wrapper Class Type '' ) ; } void overloadedMethod ( Long L ) { System.out.println ( `` Long Wrapper Class Type '' ) ; } public static void main ( String [ ] args ) { int i = 21 ; WrapperClasses wr = new WrapperClasses ( ) ; //wr.overloadedMethod ( i ) ; } } class mine extends WrapperClasses { void overloadedMethod ( int N ) { System.out.println ( `` Integer Class Type '' ) ; } public static void main ( String [ ] args ) { int i = 21 ; WrapperClasses wr = new mine ( ) ; wr.overloadedMethod ( i ) ; } }
"$ java -versionopenjdk version `` 1.8.0_181 '' OpenJDK Runtime Environment ( build 1.8.0_181-8u181-b13-2~deb9u1-b13 ) OpenJDK 64-Bit Server VM ( build 25.181-b13 , mixed mode ) $ javac -target 1.2 -source 1.2 MyClass.java ( works with some warnings ) $ javac -target 1.1 -source 1.2 MyClass.java ( works with some warnings ) $ javac -target 1.0 -source 1.2 MyClass.javajavac : invalid target release : 1.0"
"static final Integer cache [ ] = new Integer [ - ( -128 ) + 127 + 1 ] ; private static String integerCacheHighPropValue ; static void getAndRemoveCacheProperties ( ) { if ( ! sun.misc.VM.isBooted ( ) ) { Properties props = System.getProperties ( ) ; integerCacheHighPropValue = ( String ) props.remove ( `` java.lang.Integer.IntegerCache.high '' ) ; if ( integerCacheHighPropValue ! = null ) System.setProperties ( props ) ; // remove from system props } } private static class IntegerCache { private IntegerCache ( ) { } static final Integer cache [ ] = new Integer [ - ( -128 ) + 127 + 1 ] ; static { for ( int i = 0 ; i < cache.length ; i++ ) cache [ i ] = new Integer ( i - 128 ) ; } } public static Integer valueOf ( int i ) { final int offset = 128 ; if ( i > = -128 & & i < = 127 ) { // must cache return IntegerCache.cache [ i + offset ] ; } return new Integer ( i ) ; } private static class IntegerCache { static final int high ; static final Integer cache [ ] ; static { final int low = -128 ; // high value may be configured by property int h = 127 ; if ( integerCacheHighPropValue ! = null ) { // Use Long.decode here to avoid invoking methods that // require Integer 's autoboxing cache to be initialized int i = Long.decode ( integerCacheHighPropValue ) .intValue ( ) ; i = Math.max ( i , 127 ) ; // Maximum array size is Integer.MAX_VALUE h = Math.min ( i , Integer.MAX_VALUE - -low ) ; } high = h ; cache = new Integer [ ( high - low ) + 1 ] ; int j = low ; for ( int k = 0 ; k < cache.length ; k++ ) cache [ k ] = new Integer ( j++ ) ; } private IntegerCache ( ) { } } public static Integer valueOf ( int i ) { if ( i > = -128 & & i < = IntegerCache.high ) return IntegerCache.cache [ i + 128 ] ; else return new Integer ( i ) ; }"
package springapp.service ; import java.io.Serializable ; import java.util.List ; import springapp.domain.Product ; public interface ProductManager extends Serializable { public void increasePrice ( int percentage ) ; public List < Product > getProducts ( ) ; } package springapp.service ; import java.util.List ; import springapp.domain.Product ; public class SimpleProductManager implements ProductManager { public List < Product > getProducts ( ) { throw new UnsupportedOperationException ( ) ; } public void increasePrice ( int percentage ) { throw new UnsupportedOperationException ( ) ; } public void setProducts ( List < Product > products ) { throw new UnsupportedOperationException ( ) ; } } ProductManager p = new SimpleProductManager ( ) ; p.setProducts ( ) ;
android : inputType = `` textAutoCorrect|textAutoComplete '' intent.setFlags ( Intent.FLAG_ACTIVITY_NO_ANIMATION|Intent.FLAG_ACTIVITY_CLEAR_TOP ) ; tvHide.setPaintFlags ( tvHide.getPaintFlags ( ) | Paint.UNDERLINE_TEXT_FLAG ) ;
public class Foo { public synchronized void abc ( ) { ... } public synchronized void def ( ) { ... } //etc . } Foo foo = new Foo ( ) ; //this got created somewhere//somewhere else entirelysynchronized ( foo ) { //do operation on foo foo.doStuff ( ) ; foo.doOtherStuff ( ) ; } @ EnsureSynchronizedpublic class Foo { //etc . } @ EnsureSynchronizedprivate Foo foo ;
x = new MyObject ( ) ; x._ ( `` somestring '' )
"public class LinkedHashMap < K , V > extends HashMap < K , V > implements Map < K , V > { ..."
my $ var : shared ; $ var = 10 ; $ var = 11 ;
"@ Entitypublic class Room { @ ManyToOne ( optional=true , fetch=FetchType.LAZY ) private Player player1 ; ... } @ Entitypublic class Player { @ Id @ Column ( updatable=false ) private long id ; public long getId ( ) { return id ; } ... } player1.getId ( ) ;"
interface TestInterface < U > { void test ( U u ) ; } static class Test < T extends Test < T > > implements TestInterface < T > { // line 11 @ Override public void test ( T t ) { throw new RuntimeException ( `` My exception '' ) ; // line 13 } } static class TestA extends Test < TestA > { } static class TestB extends Test < TestB > { } public static void main ( String [ ] args ) throws Exception { try { Test a = new TestA ( ) ; Test b = new TestB ( ) ; a.test ( b ) ; } catch ( Exception x ) { x.printStackTrace ( System.out ) ; } try { TestInterface a = new TestA ( ) ; Test b = new TestB ( ) ; a.test ( b ) ; } catch ( Exception x ) { x.printStackTrace ( System.out ) ; } try { TestInterface a = new TestA ( ) ; TestInterface b = new TestB ( ) ; a.test ( b ) ; } catch ( Exception x ) { x.printStackTrace ( System.out ) ; } } java.lang.RuntimeException : My exception at Ideone $ Test.test ( Main.java:13 ) at Ideone.main ( Main.java:25 ) java.lang.RuntimeException : My exception at Ideone $ Test.test ( Main.java:13 ) at Ideone $ Test.test ( Main.java:11 ) at Ideone.main ( Main.java:33 ) java.lang.RuntimeException : My exception at Ideone $ Test.test ( Main.java:13 ) at Ideone $ Test.test ( Main.java:11 ) at Ideone.main ( Main.java:41 )
"public static String getCountryMessage ( String countryName ) { switch ( countryName ) { case `` USA '' : return `` Hello , `` ; case `` England '' || `` UK '' : return `` Hallo , `` ; case `` Spain '' : return `` Hola , `` ; case `` France '' : return `` Bonjour , `` ; case `` Germany '' : return `` Guten tag , `` ; default : return `` Hello , `` ; } }"
"< xsl : when test= '' count ( hl7 : confidentialityCode [ concat ( @ code , @ codeSystem ) =doc ( 'include/voc-1.3.6.1.4.1.12559.11.10.1.3.1.42.31-DYNAMIC.xml ' ) //valueSet [ 1 ] /conceptList/concept/concat ( @ code , @ codeSystem ) or @ nullFlavor ] ) > =1 '' / > java.io.FileNotFoundException : C : \LocalData\Development\projectname\include\voc-1.3.6.1.4.1.12559.11.10.1.3.1.42.31-DYNAMIC.xml ( The system can not find the path specified ) at java.io.FileInputStream.open0 ( Native Method ) at java.io.FileInputStream.open ( FileInputStream.java:195 ) at java.io.FileInputStream. < init > ( FileInputStream.java:138 ) at java.io.FileInputStream. < init > ( FileInputStream.java:93 ) at sun.net.www.protocol.file.FileURLConnection.connect ( FileURLConnection.java:90 ) at sun.net.www.protocol.file.FileURLConnection.getInputStream ( FileURLConnection.java:188 ) at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity ( Unknown Source ) at org.apache.xerces.impl.XMLVersionDetector.determineDocVersion ( Unknown Source ) at org.apache.xerces.parsers.XML11Configuration.parse ( Unknown Source ) at org.apache.xerces.parsers.XML11Configuration.parse ( Unknown Source ) at org.apache.xerces.parsers.XMLParser.parse ( Unknown Source ) at org.apache.xerces.parsers.AbstractSAXParser.parse ( Unknown Source ) at org.apache.xerces.jaxp.SAXParserImpl $ JAXPSAXParser.parse ( Unknown Source ) at net.sf.saxon.event.Sender.sendSAXSource ( Sender.java:451 ) at net.sf.saxon.event.Sender.send ( Sender.java:153 ) at net.sf.saxon.functions.DocumentFn.makeDoc ( DocumentFn.java:330 ) at net.sf.saxon.functions.Doc.call ( Doc.java:138 ) at net.sf.saxon.functions.Doc.call ( Doc.java:24 ) at net.sf.saxon.expr.FunctionCall.iterate ( FunctionCall.java:546 ) at net.sf.saxon.expr.Expression.evaluateItem ( Expression.java:773 ) at net.sf.saxon.expr.SimpleStepExpression.iterate ( SimpleStepExpression.java:108 ) at net.sf.saxon.expr.SlashExpression.iterate ( SlashExpression.java:868 ) at net.sf.saxon.expr.SlashExpression.iterate ( SlashExpression.java:868 ) at net.sf.saxon.expr.SlashExpression.iterate ( SlashExpression.java:868 ) at net.sf.saxon.expr.SlashExpression.iterate ( SlashExpression.java:868 ) at net.sf.saxon.value.MemoClosure.iterate ( MemoClosure.java:109 ) at net.sf.saxon.expr.VariableReference.iterate ( VariableReference.java:482 ) at net.sf.saxon.expr.GeneralComparison.effectiveBooleanValue ( GeneralComparison.java:621 ) at net.sf.saxon.expr.OrExpression.effectiveBooleanValue ( OrExpression.java:131 ) at net.sf.saxon.expr.FilterIterator $ NonNumeric.matches ( FilterIterator.java:198 ) at net.sf.saxon.expr.FilterIterator.getNextMatchingItem ( FilterIterator.java:81 ) at net.sf.saxon.expr.FilterIterator.next ( FilterIterator.java:64 ) at net.sf.saxon.functions.Exists $ 1.effectiveBooleanValue ( Exists.java:67 ) at net.sf.saxon.expr.instruct.Choose.choose ( Choose.java:865 ) at net.sf.saxon.expr.instruct.Choose.processLeavingTail ( Choose.java:840 ) at net.sf.saxon.expr.instruct.Block.processLeavingTail ( Block.java:653 ) at net.sf.saxon.expr.instruct.TemplateRule.applyLeavingTail ( TemplateRule.java:353 ) at net.sf.saxon.trans.Mode.applyTemplates ( Mode.java:456 ) at net.sf.saxon.trans.TextOnlyCopyRuleSet.process ( TextOnlyCopyRuleSet.java:65 ) at net.sf.saxon.trans.Mode.applyTemplates ( Mode.java:433 ) at net.sf.saxon.expr.instruct.ApplyTemplates.apply ( ApplyTemplates.java:298 ) at net.sf.saxon.expr.instruct.ApplyTemplates.processLeavingTail ( ApplyTemplates.java:255 ) at net.sf.saxon.expr.instruct.Block.processLeavingTail ( Block.java:653 ) at net.sf.saxon.expr.instruct.Instruction.process ( Instruction.java:149 ) at net.sf.saxon.expr.instruct.ElementCreator.processLeavingTail ( ElementCreator.java:364 ) at net.sf.saxon.expr.instruct.ElementCreator.processLeavingTail ( ElementCreator.java:311 ) at net.sf.saxon.expr.instruct.TemplateRule.applyLeavingTail ( TemplateRule.java:353 ) at net.sf.saxon.trans.Mode.applyTemplates ( Mode.java:456 ) at net.sf.saxon.Controller.transformDocument ( Controller.java:2321 ) at net.sf.saxon.Controller.transform ( Controller.java:1892 ) at net.sf.saxon.s9api.XsltTransformer.transform ( XsltTransformer.java:579 ) at net.sf.saxon.jaxp.TransformerImpl.transform ( TransformerImpl.java:185 ) at com.helger.schematron.xslt.AbstractSchematronXSLTBasedResource.applySchematronValidation ( AbstractSchematronXSLTBasedResource.java:273 ) at com.helger.schematron.xslt.AbstractSchematronXSLTBasedResource.applySchematronValidationToSVRL ( AbstractSchematronXSLTBasedResource.java:288 ) at com.helger.schematron.xslt.AbstractSchematronXSLTBasedResource.getSchematronValidity ( AbstractSchematronXSLTBasedResource.java:197 ) at com.helger.schematron.AbstractSchematronResource.getSchematronValidity ( AbstractSchematronResource.java:210 ) at epsos.ccd.posam.tm.util.NewSchematronValidator.doValidate ( NewSchematronValidator.java:47 ) at epsos.ccd.posam.tm.util.NewSchematronValidator.validate ( NewSchematronValidator.java:39 ) at epsos.ccd.posam.tm.util.SchematronValidatorTest.testValidationNew ( SchematronValidatorTest.java:28 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:325 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:78 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:57 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:290 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:71 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:288 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:58 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:268 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:363 ) at org.junit.runner.JUnitCore.run ( JUnitCore.java:137 ) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs ( JUnit4IdeaTestRunner.java:68 ) at com.intellij.rt.execution.junit.IdeaTestRunner $ Repeater.startRunnerWithArgs ( IdeaTestRunner.java:51 ) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart ( JUnitStarter.java:237 ) at com.intellij.rt.execution.junit.JUnitStarter.main ( JUnitStarter.java:70 )"
com.company.productcom.company.product.impl_acom.company.product.impl_b
"timeline.getKeyFrames ( ) .addAll ( new KeyFrame ( Duration.ZERO , // set start position at 0 new KeyValue ( circle.translateXProperty ( ) , random ( ) * 800 ) , new KeyValue ( circle.translateYProperty ( ) , random ( ) * 600 ) ) , new KeyFrame ( new Duration ( 40000 ) , // set end position at 40s new KeyValue ( circle.translateXProperty ( ) , random ( ) * 800 ) , new KeyValue ( circle.translateYProperty ( ) , random ( ) * 600 ) ) ) ;"
"String template = `` You have % 1 tickets for % d '' , Brr object = new Brr ( template , { new Integer ( 1 ) , new Date ( ) } ) ; object.print ( ) ;"
import java.util.Scanner ; public class Test { public static void main ( String [ ] args ) { Scanner user_input = new Scanner ( System.in ) ; String username ; System.out.print ( `` username : `` ) ; username = user_input.next ( ) ; // Even if I do not assign returned string for comparison still it compares // okay else it does not compare username.intern ( ) ; if ( username == `` test '' ) { System.out.println ( `` okay '' ) ; } else { System.out.println ( `` not okay '' ) ; } } }
"public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int m = in.nextInt ( ) ; List < Integer > list1 = new ArrayList < > ( n ) ; List < Integer > list2 = new ArrayList < > ( m ) ; for ( int i=0 ; i < n ; i++ ) { list1.add ( in.nextInt ( ) ) ; } for ( int i = 0 ; i < m ; i++ ) { list2.add ( in.nextInt ( ) ) ; } Collections.sort ( list1 ) ; Collections.sort ( list2 , Collections.reverseOrder ( ) ) ; int max = Math.min ( list1.size ( ) , list2.size ( ) ) ; int a , b ; long result = 0 ; for ( int i=0 ; i < max ; i++ ) { a = list1.get ( i ) ; b = list2.get ( i ) ; if ( b > a ) result += ( b- a ) ; else break ; } System.out.println ( result ) ; }"
"SecretKey keyFromPassword = SecretKeyFactory.getInstance ( algorithm ) .generateSecret ( new PBEKeySpec ( password.toCharArray ( ) ) ) ; Cipher cipher = Cipher.getInstance ( algorithm ) ; cipher.init ( Cipher.ENCRYPT_MODE , keyFromPassword , new PBEParameterSpec ( salt , iterations , new IvParameterSpec ( iv ) ) ) ; IOUtils.copyLarge ( new CipherInputStream ( clearStream , cipher ) , encryptedStream ) ; Object spi = ReflectionTestUtils.getField ( cipher , `` spi '' ) ; ReflectionTestUtils.setField ( spi , `` keyLength '' , 128 ) ; cipher.init ( Cipher.DECRYPT_MODE , keyFromPassword , new PBEParameterSpec ( salt , iterations , new IvParameterSpec ( iv ) ) ) ;"
"/** * Processes a set of annotation types on type elements * originating from the prior round and returns whether or not * these annotation types are claimed by this processor . If { @ code * true } is returned , the annotation types are claimed and subsequent * processors will not be asked to process them ; if { @ code false } * is returned , the annotation types are unclaimed and subsequent * processors may be asked to process them . A processor may * always return the same boolean value or may vary the result * based on chosen criteria . * * < p > The input set will be empty if the processor supports { @ code * `` * '' } and the root elements have no annotations . A { @ code * Processor } must gracefully handle an empty set of annotations . * * @ param annotations the annotation types requested to be processed * @ param roundEnv environment for information about the current and prior round * @ return whether or not the set of annotation types are claimed by this processor */ boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) ; public class MyProcessor extends AbstractProcessor { ... @ Override public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { for ( TypeElement annotation : annotations ) { // How can I get the class of the annotation ? } } }"
"package d.airlineData.engine ; import java.time.Duration ; import java.time.LocalTime ; import java.util.ArrayList ; import java.util.HashMap ; import java.util.HashSet ; import java.util.Iterator ; import java.util.Map.Entry ; import a.airlineData.exceptions.NoFlightsException ; import c.airlineData.exceptions.NoAirportException ; import d.airlineData.graph.Airport ; import d.airlineData.graph.Flight ; import d.airlineData.graph.FlightGraph ; public class FlightGrapher { private FlightGraph fg ; public FlightGrapher ( ) throws NoFlightsException { throw new NoFlightsException ( ) ; } public FlightGrapher ( ArrayList < Flight > flights ) throws NoFlightsException { fg = new FlightGraph ( ) ; for ( Flight flight : flights ) { fg.addAirport ( flight.getAirportA ( ) ) ; fg.addAirport ( flight.getAirportB ( ) ) ; try { fg.addFlight ( flight ) ; } catch ( NoAirportException e ) { System.err.println ( e.getMessage ( ) ) ; e.printStackTrace ( ) ; } } } public void printAll ( ) { HashSet < Airport > airports = fg.getAirports ( ) ; for ( Airport airport : airports ) { System.out.println ( airport + `` : '' ) ; try { Iterator < Flight > it = fg.getFlightsFor ( airport ) ; while ( it.hasNext ( ) ) { System.out.println ( `` \t '' + it.next ( ) ) ; System.out.println ( ) ; } } catch ( NoAirportException e ) { System.err.println ( e.getMessage ( ) + `` while attempting to get flights for `` + airport ) ; e.printStackTrace ( ) ; } } } public void printItinerary ( Airport airportA , Airport airportB ) { System.out.println ( `` Leg\tLeave\t\tAt\tOn\tArrive\tAt '' ) ; printItinerary ( airportA , airportB , 1 , 0.0 , Duration.ofHours ( 0 ) ) ; } private void printItinerary ( Airport airportA , Airport airportB , int leg , double totalPrice , Duration totalDuration ) { Iterator < Flight > aFlights = airportA.getOutgoingFlights ( ) ; System.err.println ( `` Enters method printItinerary '' ) ; System.err.println ( `` airportA `` + airportA ) ; System.err.println ( `` airportB `` + airportB ) ; System.err.println ( `` leg `` + leg ) ; System.err.println ( `` total price `` + totalPrice ) ; System.err.println ( `` Duration `` + totalDuration.toMinutes ( ) + `` mins '' ) ; System.err.println ( ) ; while ( aFlights.hasNext ( ) ) { Flight currentFlight = aFlights.next ( ) ; System.err.println ( `` Enters while of printItinerary currentFlight : `` ) ; System.err.println ( currentFlight ) ; if ( currentFlight.getAirportB ( ) .equals ( airportB ) ) { System.out.println ( leg + `` \t '' + currentFlight.getAirportA ( ) + `` \t '' + currentFlight.getDepartureTime ( ) + `` \t '' + currentFlight.getFlightNumber ( ) + `` \t '' + currentFlight.getAirportB ( ) + `` \t '' + currentFlight.getArrivalTime ( ) ) ; System.out.println ( ) ; System.out.println ( `` Total journey costs\t= £ '' + ( currentFlight.getPrice ( ) + totalPrice ) ) ; System.out.println ( `` Total time in air\t= `` + ( currentFlight.getFlightDuration ( ) .plus ( totalDuration ) ) ) ; return ; } else { System.err.println ( `` enters else `` + `` currentFlight `` + currentFlight.getAirportB ( ) + `` airport B `` + airportB ) ; System.err.println ( ) ; if ( hasAPath ( currentFlight.getAirportB ( ) , airportB ) ) { System.out.println ( leg + `` \t '' + currentFlight.getAirportA ( ) + `` \t '' + currentFlight.getDepartureTime ( ) + `` \t '' + currentFlight.getFlightNumber ( ) + `` \t '' + currentFlight.getAirportB ( ) + `` \t '' + currentFlight.getArrivalTime ( ) ) ; printItinerary ( currentFlight.getAirportB ( ) , airportB , leg + 1 , ( currentFlight.getPrice ( ) + totalPrice ) , ( currentFlight.getFlightDuration ( ) .plus ( totalDuration ) ) ) ; } } } } private boolean hasAPath ( Airport airportA , Airport airportB ) { System.err.println ( `` Enters hasAPath with airportA `` + airportA + `` airportB `` + airportB ) ; Iterator < Flight > aFlights = airportA.getOutgoingFlights ( ) ; while ( aFlights.hasNext ( ) ) { Flight currentFlight = aFlights.next ( ) ; System.err.println ( `` Enters while of hasAPath currentFlight : `` ) ; System.err.println ( currentFlight ) ; if ( currentFlight.getAirportB ( ) .equals ( airportB ) ) { System.err.println ( `` returns true for airportA `` + airportA + `` airportB `` + airportB ) ; return true ; } else { System.err.println ( `` Calls hasAPath with airportA `` + currentFlight.getAirportB ( ) + `` airportB `` + airportB ) ; return hasAPath ( currentFlight.getAirportB ( ) , airportB ) ; } } System.err.println ( `` returns false for airportA `` + airportA + `` airportB `` + airportB ) ; return false ; } public static void main ( String [ ] args ) { ArrayList < Flight > flights = new ArrayList < > ( ) ; HashMap < String , Airport > airports = new HashMap < > ( ) ; airports.put ( `` Edinburgh '' , new Airport ( `` Edinburgh '' ) ) ; airports.put ( `` Heathrow '' , new Airport ( `` Heathrow '' ) ) ; airports.put ( `` Amsterdam '' , new Airport ( `` Amsterdam '' ) ) ; airports.put ( `` Boston '' , new Airport ( `` Boston '' ) ) ; airports.put ( `` Montreal '' , new Airport ( `` Montreal '' ) ) ; airports.put ( `` Chicago '' , new Airport ( `` Chicago '' ) ) ; airports.put ( `` Toronto '' , new Airport ( `` Toronto '' ) ) ; airports.put ( `` New Delhi '' , new Airport ( `` New Delhi '' ) ) ; airports.put ( `` Shanghai '' , new Airport ( `` Shanghai '' ) ) ; airports.put ( `` Hong Kong '' , new Airport ( `` Hong Kong '' ) ) ; flights.add ( new Flight ( airports.get ( `` Edinburgh '' ) , airports.get ( `` Heathrow '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 110.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Heathrow '' ) , airports.get ( `` Amsterdam '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 100.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Heathrow '' ) , airports.get ( `` Boston '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 230.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Boston '' ) , airports.get ( `` Chicago '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 150.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Boston '' ) , airports.get ( `` Montreal '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 100.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Montreal '' ) , airports.get ( `` Toronto '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 90.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Edinburgh '' ) , airports.get ( `` Chicago '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 560.0 ) ) ; flights.add ( new Flight ( airports.get ( `` New Delhi '' ) , airports.get ( `` Shanghai '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 430.0 ) ) ; flights.add ( new Flight ( airports.get ( `` Shanghai '' ) , airports.get ( `` Hong Kong '' ) , `` B7982 '' , LocalTime.of ( 22,10 ) , LocalTime.of ( 23,15 ) , 230.0 ) ) ; Iterator < Entry < String , Airport > > airportIt = airports.entrySet ( ) .iterator ( ) ; while ( airportIt.hasNext ( ) ) { Entry < String , Airport > pair = airportIt.next ( ) ; Airport airport = pair.getValue ( ) ; for ( Flight flight : flights ) { if ( flight.getAirportA ( ) .equals ( airport ) ) { airport.addOutgoingFlight ( flight ) ; } } } try { FlightGrapher fg = new FlightGrapher ( flights ) ; //fg.printAll ( ) ; fg.printItinerary ( airports.get ( `` Edinburgh '' ) , airports.get ( `` Toronto '' ) ) ; // steps into this method } catch ( NoFlightsException e ) { System.err.println ( e.getMessage ( ) + `` when trying to make a flight between a nonexistant airport '' ) ; e.printStackTrace ( ) ; } } } printItinerary ( Airport airportA , Airport airportB , int leg , double totalPrice , Duration totalDuration ) Leg Leave At On Arrive At1 Edinburgh 10:30 BA345 Heathrow 11:302 Heathrow 14:00 BA657 Boston 15:303 Boston 18:00 AA652 Montreal 19:304 Montreal 22:00 AA216 Toronto 23:30Total Journey Cost = £530Total Time in the Air = 4 hrs 20 min Leg Leave At On Arrive At Leg Leave At On Arrive At1 Edinburgh 22:10 B7982 Heathrow 23:152 Heathrow 22:10 B7982 Boston 23:153 Boston 22:10 B7982 Montreal 23:154 Montreal 22:10 B7982 Toronto 23:15Total journey costs = £530.0Total time in air = PT4H20M Leg Leave At On Arrive AtEnters method printItineraryairportA EdinburghairportB Torontoleg 1total price 0.0Duration 0minsEnters while of printItinerary currentFlight : Flight between Edinburgh & Chicago : For : £560.0 Flight Number : B7982 Leaves at : 22:10 Arrives at : 23:15 Duration : 1hr 5minenters else currentFlight Chicago airport B TorontoEnters hasAPath with airportA Chicago airportB Torontoreturns false for airportA Chicago airportB TorontoEnters while of printItinerary currentFlight : Flight between Edinburgh & Heathrow : For : £110.0 Flight Number : B7982 Leaves at : 22:10 Arrives at : 23:15 Duration : 1hr 5minenters else currentFlight Heathrow airport B TorontoEnters hasAPath with airportA Heathrow airportB TorontoEnters while of hasAPath currentFlight : Flight between Heathrow & Amsterdam : For : £100.0 Flight Number : B7982 Leaves at : 22:10 Arrives at : 23:15 Duration : 1hr 5minCalls hasAPath with airportA Amsterdam airportB TorontoEnters hasAPath with airportA Amsterdam airportB Torontoreturns false for airportA Amsterdam airportB Toronto"
1 . Servicegen converted to jwsc task 2. deployment descriptor has been modified 3 . Below annotations added in service implementation file @ WebService @ SoapBinding @ SoapMessageHandler Unable to invoke annotation processor < BEA-160228 > App merge failed your applicationweblogic.utils.compiler.ToolFailureException : unable to invoke annotation processor package com.tutorialspoint.stateless ; import com.tutorialspoint.entity.Book ; import java.util.List ; import javax.ejb.Stateless ; import javax.jws.WebMethod ; import javax.jws.WebService ; import javax.persistence.EntityManager ; import javax.persistence.PersistenceContext ; @ Stateless @ WebService ( serviceName= '' LibraryService '' ) public class LibraryPersistentBean implements LibraryPersistentBeanRemote { public LibraryPersistentBean ( ) { } @ PersistenceContext ( unitName= '' EjbComponentPU '' ) private EntityManager entityManager ; public void addBook ( Book book ) { entityManager.persist ( book ) ; } @ WebMethod ( operationName= '' getBooks '' ) public List < Book > getBooks ( ) { return entityManager.createQuery ( `` From Book '' ) .getResultList ( ) ; } }
"HttpRequest request = HttpRequest.newBuilder ( ) .header ( `` content-type '' , `` application/json ; charset=UTF-8 '' ) .uri ( URI.create ( `` http : //localhost:8080/test ? param1=test % C5 % 84 '' ) ) .GET ( ) .build ( ) ; HttpClient.newBuilder ( ) .version ( HttpClient.Version.HTTP_2 ) .build ( ) .send ( request , HttpResponse.BodyHandler.asString ( Charset.forName ( `` UTF-8 '' ) ) ) ; java.lang.IllegalArgumentException : char=324at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.Huffman.codeOf ( Huffman.java:559 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.Huffman.lengthOf ( Huffman.java:524 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.StringWriter.configure ( StringWriter.java:79 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.StringWriter.configure ( StringWriter.java:62 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.IndexNameValueWriter.value ( IndexNameValueWriter.java:64 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.Encoder.literal ( Encoder.java:422 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.Encoder.header ( Encoder.java:245 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.hpack.Encoder.header ( Encoder.java:198 ) at jdk.incubator.httpclient/jdk.incubator.http.Http2Connection.encodeHeadersImpl ( Http2Connection.java:927 ) at jdk.incubator.httpclient/jdk.incubator.http.Http2Connection.encodeHeaders ( Http2Connection.java:878 ) at jdk.incubator.httpclient/jdk.incubator.http.Http2Connection.encodeHeaders ( Http2Connection.java:951 ) at jdk.incubator.httpclient/jdk.incubator.http.Http2Connection.sendFrame ( Http2Connection.java:984 ) at jdk.incubator.httpclient/jdk.incubator.http.Stream.sendHeadersAsync ( Stream.java:547 ) at jdk.incubator.httpclient/jdk.incubator.http.Exchange.lambda $ responseAsyncImpl0 $ 8 ( Exchange.java:322 ) at java.base/java.util.concurrent.CompletableFuture $ UniCompose.tryFire ( CompletableFuture.java:1072 ) at java.base/java.util.concurrent.CompletableFuture.postComplete ( CompletableFuture.java:506 ) at java.base/java.util.concurrent.CompletableFuture.complete ( CompletableFuture.java:2073 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SSLFlowDelegate.setALPN ( SSLFlowDelegate.java:164 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SSLFlowDelegate.access $ 200 ( SSLFlowDelegate.java:81 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SSLFlowDelegate $ Reader.processData ( SSLFlowDelegate.java:340 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SSLFlowDelegate $ Reader $ ReaderDownstreamPusher.run ( SSLFlowDelegate.java:215 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ SynchronizedRestartableTask.run ( SequentialScheduler.java:175 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ CompleteRestartableTask.run ( SequentialScheduler.java:147 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ TryEndDeferredCompleter.complete ( SequentialScheduler.java:315 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ CompleteRestartableTask.run ( SequentialScheduler.java:149 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ SchedulableTask.run ( SequentialScheduler.java:198 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:271 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:224 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SSLFlowDelegate $ Reader.incoming ( SSLFlowDelegate.java:242 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SubscriberWrapper.incomingCaller ( SubscriberWrapper.java:388 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SubscriberWrapper.onNext ( SubscriberWrapper.java:343 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SubscriberWrapper.onNext ( SubscriberWrapper.java:58 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ InternalReadSubscription.read ( SocketTube.java:739 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ SocketFlowTask.run ( SocketTube.java:171 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ SchedulableTask.run ( SequentialScheduler.java:198 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:271 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:224 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ InternalReadSubscription.signalReadable ( SocketTube.java:675 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ ReadEvent.signalEvent ( SocketTube.java:829 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ SocketFlowEvent.handle ( SocketTube.java:243 ) at jdk.incubator.httpclient/jdk.incubator.http.HttpClientImpl $ SelectorManager.handleEvent ( HttpClientImpl.java:769 ) at jdk.incubator.httpclient/jdk.incubator.http.HttpClientImpl $ SelectorManager.run ( HttpClientImpl.java:731 ) private void setPseudoHeaderFields ( ) { HttpHeadersImpl hdrs = requestPseudoHeaders ; String method = request.method ( ) ; hdrs.setHeader ( `` : method '' , method ) ; URI uri = request.uri ( ) ; hdrs.setHeader ( `` : scheme '' , uri.getScheme ( ) ) ; // TODO : userinfo deprecated . Needs to be removed hdrs.setHeader ( `` : authority '' , uri.getAuthority ( ) ) ; // TODO : ensure header names beginning with : not in user headers String query = uri.getQuery ( ) ; String path = uri.getPath ( ) ; if ( path == null || path.isEmpty ( ) ) { if ( method.equalsIgnoreCase ( `` OPTIONS '' ) ) { path = `` * '' ; } else { path = `` / '' ; } } if ( query ! = null ) { path += `` ? '' + query ; } hdrs.setHeader ( `` : path '' , path ) ; }"
"[ 0 ] : id = `` 34234 '' , team = `` gools '' , name = `` bob '' , type = `` old '' [ 1 ] : id = `` 23423 '' , team = `` fool '' , name = `` sam '' , type = `` new '' [ 2 ] : id = `` 34342 '' , team = `` gools '' , name = `` dan '' , type = `` new '' `` gools '' : [ `` id '' : 34234 , `` name '' : `` bob '' , `` type '' : `` old '' ] , [ `` id '' : 34342 , `` name '' : `` dan '' , `` type '' : `` new '' ] '' fool '' : [ `` id '' : 23423 , `` name '' : `` sam '' , `` type '' : `` new '' ] @ Data @ NoArgsConstructor @ AllArgsConstructor ( access = AccessLevel.PUBLIC ) public class Pojo { private String id ; private String name ; private String type ; } public Team groupedByTeams ( List < ? extends GenericDAO > daoList ) { Map < String , List < Pojo > > teamMap= daoList.stream ( ) .collect ( Collectors.groupingBy ( GenericDAO : :getTeam ) ) }"
"public class MyClass { private int years ; private int months private volatile int days ; public void update ( int years , int months , int days ) { this.years = years ; this.months = months ; this.days = days ; } }"
"public < R , F extends Function < T , R > > Builder < T > withX ( F getter , R returnValue ) { ... } public < R > Builder < T > with ( Function < T , R > getter , R returnValue ) { ... } .withX ( MyInterface : :getLength , `` I am not a Long '' ) import java.util.function.Function ; public class SO58376589 { public static class Builder < T > { public < R , F extends Function < T , R > > Builder < T > withX ( F getter , R returnValue ) { return this ; } public < R > Builder < T > with ( Function < T , R > getter , R returnValue ) { return this ; } } static interface MyInterface { public Long getLength ( ) ; } public static void main ( String [ ] args ) { Builder < MyInterface > b = new Builder < MyInterface > ( ) ; Function < MyInterface , Long > getter = MyInterface : :getLength ; b.with ( getter , 2L ) ; b.with ( MyInterface : :getLength , 2L ) ; b.withX ( getter , 2L ) ; b.withX ( MyInterface : :getLength , 2L ) ; b.with ( getter , `` No NUMBER '' ) ; // error b.with ( MyInterface : :getLength , `` No NUMBER '' ) ; // NO ERROR ! ! b.withX ( getter , `` No NUMBER '' ) ; // error b.withX ( MyInterface : :getLength , `` No NUMBER '' ) ; // error ! ! ! } } SO58376589.java:32 : error : method with in class Builder < T > can not be applied to given types ; b.with ( getter , `` No NUMBER '' ) ; // error ^ required : Function < MyInterface , R > , R found : Function < MyInterface , Long > , String reason : inference variable R has incompatible bounds equality constraints : Long lower bounds : String where R , T are type-variables : R extends Object declared in method < R > with ( Function < T , R > , R ) T extends Object declared in class BuilderSO58376589.java:34 : error : method withX in class Builder < T > can not be applied to given types ; b.withX ( getter , `` No NUMBER '' ) ; // error ^ required : F , R found : Function < MyInterface , Long > , String reason : inference variable R has incompatible bounds equality constraints : Long lower bounds : String where F , R , T are type-variables : F extends Function < MyInterface , R > declared in method < R , F > withX ( F , R ) R extends Object declared in method < R , F > withX ( F , R ) T extends Object declared in class BuilderSO58376589.java:35 : error : incompatible types : can not infer type-variable ( s ) R , F b.withX ( MyInterface : :getLength , `` No NUMBER '' ) ; // error ^ ( argument mismatch ; bad return type in method reference Long can not be converted to String ) where R , F , T are type-variables : R extends Object declared in method < R , F > withX ( F , R ) F extends Function < T , R > declared in method < R , F > withX ( F , R ) T extends Object declared in class Builder3 errors import java.util.function.Consumer ; import java.util.function.Supplier ; interface TypeInference { Number getNumber ( ) ; void setNumber ( Number n ) ; @ FunctionalInterface interface Method < R > { TypeInference be ( R r ) ; } //Supplier : < R > R letBe ( Supplier < R > supplier , R value ) ; < R , F extends Supplier < R > > R letBeX ( F supplier , R value ) ; < R > Method < R > let ( Supplier < R > supplier ) ; // return ( x ) - > this ; //Consumer : < R > R lettBe ( Consumer < R > supplier , R value ) ; < R , F extends Consumer < R > > R lettBeX ( F supplier , R value ) ; < R > Method < R > lett ( Consumer < R > consumer ) ; public static void main ( TypeInference t ) { t.letBe ( t : :getNumber , ( Number ) 2 ) ; // Compiles : - ) t.lettBe ( t : :setNumber , ( Number ) 2 ) ; // Compiles : - ) t.letBe ( t : :getNumber , 2 ) ; // Compiles : - ) t.lettBe ( t : :setNumber , 2 ) ; // Compiles : - ) t.letBe ( t : :getNumber , `` NaN '' ) ; // ! ! ! ! Compiles : - ( t.lettBe ( t : :setNumber , `` NaN '' ) ; // Does not compile : - ) t.letBeX ( t : :getNumber , ( Number ) 2 ) ; // Compiles : - ) t.lettBeX ( t : :setNumber , ( Number ) 2 ) ; // Compiles : - ) t.letBeX ( t : :getNumber , 2 ) ; // ! ! ! Does not compile : - ( t.lettBeX ( t : :setNumber , 2 ) ; // Compiles : - ) t.letBeX ( t : :getNumber , `` NaN '' ) ; // Does not compile : - ) t.lettBeX ( t : :setNumber , `` NaN '' ) ; // Does not compile : - ) t.let ( t : :getNumber ) .be ( 2 ) ; // Compiles : - ) t.lett ( t : :setNumber ) .be ( 2 ) ; // Compiles : - ) t.let ( t : :getNumber ) .be ( `` NaN '' ) ; // Does not compile : - ) t.lett ( t : :setNumber ) .be ( `` NaN '' ) ; // Does not compile : - ) } }"
"//Proprties : 107 /** 108 * The array buffer into which the elements of the ArrayList are stored . 109 * The capacity of the ArrayList is the length of this array buffer . 110 */ 111 private transient Object [ ] elementData ; 112 113 /** 114 * The size of the ArrayList ( the number of elements it contains ) . 115 * 116 * @ serial 117 */ 118 private int size ; 404 /** 405 * Appends the specified element to the end of this list . 406 * 407 * @ param e element to be appended to this list 408 * @ return < tt > true < /tt > ( as specified by { @ link Collection # add } ) 409 */ 410 public boolean add ( E e ) { 411 ensureCapacityInternal ( size + 1 ) ; // Increments modCount ! ! 412 elementData [ size++ ] = e ; 413 return true ; 414 } 183 private void ensureCapacityInternal ( int minCapacity ) { 184 modCount++ ; 185 // overflow-conscious code 186 if ( minCapacity - elementData.length > 0 ) 187 grow ( minCapacity ) ; 188 } 198 /** 199 * Increases the capacity to ensure that it can hold at least the 200 * number of elements specified by the minimum capacity argument . 201 * 202 * @ param minCapacity the desired minimum capacity 203 */ 204 private void grow ( int minCapacity ) { 205 // overflow-conscious code 206 int oldCapacity = elementData.length ; 207 int newCapacity = oldCapacity + ( oldCapacity > > 1 ) ; 208 if ( newCapacity - minCapacity < 0 ) 209 newCapacity = minCapacity ; 210 if ( newCapacity - MAX_ARRAY_SIZE > 0 ) 211 newCapacity = hugeCapacity ( minCapacity ) ; 212 // minCapacity is usually close to size , so this is a win : 213 elementData = Arrays.copyOf ( elementData , newCapacity ) ; 214 }"
"@ Module ( library = true , complete = false ) public static class Module { @ Provides public Contextualized providesContextualized ( Context ctx ) { return new Contextualized ( ctx.getUsername ( ) ) ; } // ... and many more such provides . } @ Module ( library = true , complete = false ) public static class ContextModule { private final String username ; public ContextModule ( String username ) { this.username = username ; } @ Provides public Context providesContext ( ) { return new Context ( ) { public String getUsername ( ) { return username ; } } ; } } ObjectGraph baseline = ObjectGraph.create ( new Module ( ) ) ; ObjectGraph withContext = baseline.plus ( new ContextModule ( `` killroy '' ) ) ; java.lang.IllegalStateException : Errors creating object graph : Context could not be bound with key Context required by class PlusExample $ Moduleat dagger.internal.ThrowingErrorHandler.handleErrors ( ThrowingErrorHandler.java:34 ) at dagger.internal.Linker.linkRequested ( Linker.java:182 ) at dagger.internal.Linker.linkAll ( Linker.java:109 ) at dagger.ObjectGraph $ DaggerObjectGraph.linkEverything ( ObjectGraph.java:244 ) at dagger.ObjectGraph $ DaggerObjectGraph.plus ( ObjectGraph.java:203 ) at PlusExample.plusFailsOnIncompleteModule ( PlusExample.java:46 )"
"public class Enrolment { private List < Session > sessions ; public Enrolment ( ) { this.sessions = new ArrayList < > ( ) ; } public addSession ( Session session ) { this.sessions.add ( session ) ; } } public class Session { private int time ; public Session ( int time ) { this.time = time ; } } public class Lecture extends Session { private String lecturer ; public Lecture ( int time , String lecturer ) { super ( time ) ; this.lecturer = lecturer ; } } public class Tutorial extends Session { private String tutor ; private int tutorScore ; public Tutorial ( int time , String tutor , int tutorScore ) { super ( time ) ; this.tutor = tutor ; this.tutorScore = tutorScore ; } } public class test { public static void main ( String [ ] args ) { Enrolment newEnrolment = new Enrolment ( ) ; Lecture morningLec = new Lecture ( 900 , `` Dr. Mike '' ) ; newEnrolment.addSession ( morningLec ) ; Tutorial afternoonTut = new Tutorial ( 1400 , `` John Smith '' , 3 ) ; newEnrolment.addSession ( afternoonTut ) ; Lecture middayLec = new Lecture ( 1200 , `` Mr. Micheals '' ) ; newEnrolment.addSession ( middayLec ) ; Tutorial NightTut = new Tutorial ( 1900 , `` Harry Pauls '' , 4 ) ; newEnrolment.addSession ( NightTut ) ; } }"
private static GoogleCredential getDefaultServiceAccountCredential ( ) throws IOException { return GoogleCredential.getApplicationDefault ( ) .createScoped ( MY_SCOPES ) ; } private static GoogleCredential getNonDefaultServiceAccountCredential ( ) throws IOException { return GoogleCredential.fromStream ( IncomingMailHandlerServlet.class.getResourceAsStream ( `` /tokens/anoher-e6351a8c5b91.json '' ) ) .createScoped ( MY_SCOPES ) ; }
"dependencies { compile fileTree ( include : [ '*.jar ' ] , dir : 'libs ' ) compile `` com.android.support : appcompat-v7 : $ { project.APP_COMPACT_VERTION } '' compile `` com.android.support : cardview-v7 : $ { project.APP_COMPACT_VERTION } '' compile `` com.android.support : design : $ { project.APP_COMPACT_VERTION } '' testCompile 'junit : junit:4.12 ' compile project ( ' : ucrop ' ) compile 'com.github.rey5137 : material:1.2.2 ' compile 'com.nineoldandroids : library:2.4.0 ' compile 'com.daimajia.easing : library:1.0.1 @ aar ' compile 'com.daimajia.androidanimations : library:1.1.3 @ aar ' compile 'de.hdodenhof : circleimageview:2.0.0 ' compile 'com.github.bumptech.glide : glide:3.7.0 ' compile 'com.intuit.sdp : sdp-android:1.0.3 ' compile 'com.google.firebase : firebase-messaging:9.2.1 ' compile 'com.google.firebase : firebase-analytics:9.2.1 ' compile 'com.google.firebase : firebase-crash:9.2.1 ' compile 'com.google.firebase : firebase-core:9.2.1 ' compile 'com.kyleduo.switchbutton : library:1.4.1 ' compile 'com.alirezaafkar : toolbar:1.0.9 ' compile 'net.simonvt.menudrawer : menudrawer:3.0.6 ' compile 'com.loopj.android : android-async-http:1.4.9 ' compile 'me.leolin : ShortcutBadger:1.1.10 @ aar ' compile 'com.larswerkman : HoloColorPicker:1.5 ' compile 'com.github.lsjwzh.RecyclerViewPager : lib : v1.1.1 ' compile project ( path : ' : countrypicker ' ) compile 'joda-time : joda-time:2.9.7 ' compile 'com.redmadrobot : inputmask:2.2.1 ' compile project ( path : ' : swipestack ' ) compile 'me.relex : circleindicator:1.2.2 @ aar ' //db orm annotationProcessor 'com.github.Raizlabs.DBFlow : dbflow-processor:4.0.0-beta5 ' compile 'com.github.Raizlabs.DBFlow : dbflow-core:4.0.0-beta5 ' compile 'com.github.Raizlabs.DBFlow : dbflow:4.0.0-beta5 ' compile 'net.sourceforge.streamsupport : streamsupport:1.5.3 ' compile 'com.android.support : multidex:1.0.1 ' } Warning : File for type 'com.raizlabs.android.dbflow.config.PoolamDBPOOLAM_DB_Database ' created in the last round will not be subject to annotation processing.Warning : File for type 'com.raizlabs.android.dbflow.config.GeneratedDatabaseHolder ' created in the last round will not be subject to annotation processing . Error : Error converting bytecode to dex : Cause : not found : Ljava/lang/Object ; Error : com.android.dex.util.ExceptionWithContext : not found : Ljava/lang/Object ; Error : at sun.reflect.NativeConstructorAccessorImpl.newInstance0 ( Native Method ) Error : at sun.reflect.NativeConstructorAccessorImpl.newInstance ( NativeConstructorAccessorImpl.java:62 ) Error : at sun.reflect.DelegatingConstructorAccessorImpl.newInstance ( DelegatingConstructorAccessorImpl.java:45 ) Error : at java.lang.reflect.Constructor.newInstance ( Constructor.java:423 ) Error : at java.util.concurrent.ForkJoinTask.getThrowableException ( ForkJoinTask.java:593 ) Error : at java.util.concurrent.ForkJoinTask.reportException ( ForkJoinTask.java:677 ) Error : at java.util.concurrent.ForkJoinTask.join ( ForkJoinTask.java:720 ) Error : at com.android.ide.common.internal.WaitableExecutor.waitForTasksWithQuickFail ( WaitableExecutor.java:146 ) Error : at com.android.builder.dexing.DexArchiveBuilder.processOutputs ( DexArchiveBuilder.java:110 ) Error : at com.android.builder.dexing.DexArchiveBuilder.convert ( DexArchiveBuilder.java:91 ) Error : at com.android.build.gradle.internal.transforms.DexArchiveBuilderTransformCallable.lambda $ cacheMissAction $ 0 ( DexArchiveBuilderTransformCallable.java:236 ) Error : at com.android.builder.utils.FileCache.lambda $ createFile $ 1 ( FileCache.java:260 ) Error : at com.android.builder.utils.FileCache.lambda $ null $ 5 ( FileCache.java:443 ) Error : at com.android.builder.utils.SynchronizedFile.doActionWithMultiProcessLocking ( SynchronizedFile.java:265 ) Error : at com.android.builder.utils.SynchronizedFile.write ( SynchronizedFile.java:232 ) Error : at com.android.builder.utils.FileCache.lambda $ queryCacheEntry $ 6 ( FileCache.java:415 ) Error : at com.android.builder.utils.SynchronizedFile.doActionWithMultiProcessLocking ( SynchronizedFile.java:265 ) Error : at com.android.builder.utils.SynchronizedFile.read ( SynchronizedFile.java:215 ) Error : at com.android.builder.utils.FileCache.queryCacheEntry ( FileCache.java:391 ) Error : at com.android.builder.utils.FileCache.createFile ( FileCache.java:273 ) Error : at com.android.build.gradle.internal.transforms.DexArchiveBuilderTransformCallable.getFromCacheAndCreateIfMissing ( DexArchiveBuilderTransformCallable.java:185 ) Error : at com.android.build.gradle.internal.transforms.DexArchiveBuilderTransformCallable.call ( DexArchiveBuilderTransformCallable.java:147 ) Error : at com.android.build.gradle.internal.transforms.DexArchiveBuilderTransformCallable.call ( DexArchiveBuilderTransformCallable.java:53 ) Error : at java.util.concurrent.ForkJoinTask $ AdaptedCallable.exec ( ForkJoinTask.java:1424 ) Error : at java.util.concurrent.ForkJoinTask.doExec ( ForkJoinTask.java:289 ) Error : at java.util.concurrent.ForkJoinPool $ WorkQueue.runTask ( ForkJoinPool.java:1056 ) Error : at java.util.concurrent.ForkJoinPool.runWorker ( ForkJoinPool.java:1692 ) Error : at java.util.concurrent.ForkJoinWorkerThread.run ( ForkJoinWorkerThread.java:157 ) Error : Caused by : com.android.dex.util.ExceptionWithContext : not found : Ljava/lang/Object ; Error : at com.android.dex.util.ExceptionWithContext.withContext ( ExceptionWithContext.java:45 ) Error : at com.android.dx.dex.file.DebugInfoItem.place0 ( DebugInfoItem.java:76 ) Error : at com.android.dx.dex.file.OffsettedItem.place ( OffsettedItem.java:242 ) Error : at com.android.dx.dex.file.MixedItemSection.placeItems ( MixedItemSection.java:311 ) Error : at com.android.dx.dex.file.DexFile.toDex0 ( DexFile.java:544 ) Error : at com.android.dx.dex.file.DexFile.toDex ( DexFile.java:215 ) Error : at com.android.builder.dexing.DexArchiveBuilderCallable.call ( DexArchiveBuilderCallable.java:76 ) Error : at com.android.builder.dexing.DexArchiveBuilderCallable.call ( DexArchiveBuilderCallable.java:43 ) Error : ... 5 more Error : Caused by : java.lang.IllegalArgumentException : not found : Ljava/lang/Object ; Error : at com.android.dx.dex.file.TypeIdsSection.indexOf ( TypeIdsSection.java:167 ) Error : at com.android.dx.dex.file.TypeIdsSection.indexOf ( TypeIdsSection.java:185 ) Error : at com.android.dx.dex.file.DebugInfoEncoder.emitTypeIndex ( DebugInfoEncoder.java:673 ) Error : at com.android.dx.dex.file.DebugInfoEncoder.emitLocalStart ( DebugInfoEncoder.java:704 ) Error : at com.android.dx.dex.file.DebugInfoEncoder.emitLocalsAtAddress ( DebugInfoEncoder.java:326 ) Error : at com.android.dx.dex.file.DebugInfoEncoder.convert0 ( DebugInfoEncoder.java:227 ) Error : at com.android.dx.dex.file.DebugInfoEncoder.convert ( DebugInfoEncoder.java:162 ) Error : at com.android.dx.dex.file.DebugInfoItem.encode0 ( DebugInfoItem.java:185 ) Error : at com.android.dx.dex.file.DebugInfoItem.encode ( DebugInfoItem.java:141 ) Error : at com.android.dx.dex.file.DebugInfoItem.place0 ( DebugInfoItem.java:73 ) Error : ... 11 more Error : ... while placing debug info for java8.util.ArrayPrefixHelpers $ DoubleCumulateTask.compute : ( ) V Error : ... while placing com.android.dx.dex.file.DebugInfoItem @ 703daa92 Error : ... while writing section 10 Error : Execution failed for task ' : app : transformClassesWithDexBuilderForDevDebug ' . > com.android.build.api.transform.TransformException : java.lang.RuntimeException : java.lang.RuntimeException : java.util.concurrent.ExecutionException : java.util.concurrent.ExecutionException : com.android.builder.utils.FileCache $ FileCreatorException : com.android.builder.dexing.DexArchiveBuilder $ DexBuilderException : Unable to convert input to dex archive ."
private ArrayList < String > colors = new ArrayList < String > ( ) ;
public abstract Foo { Foo ( ) { } public abstract Foo doSomething ( ) ; public static Foo create ( ) { return new SomePrivateSubclassOfFoo ( ) ; } } public abstract Foo < T extends Foo < T > > { Foo ( ) { } public abstract T doSomething ( ) ; public static Foo < ? > create ( ) { return new SomePrivateSubclassOfFoo ( ) ; } }
long start = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < newWidth ; i++ ) { for ( int j = 0 ; j < newHeight ; j++ ) { double x = i * scaleX ; double y = j * scaleY ; double xdiff = x - ( int ) x ; double ydiff = y - ( int ) y ; int xf = ( int ) Math.floor ( x ) ; int xc = ( int ) Math.ceil ( x ) ; int yf = ( int ) Math.floor ( y ) ; int yc = ( int ) Math.ceil ( y ) ; double out = inputArray [ xf ] [ yf ] * ( 1 - xdiff ) * ( 1 - ydiff ) + inputArray [ xc ] [ yf ] * xdiff * ( 1 - ydiff ) + inputArray [ xf ] [ yc ] * ( 1 - xdiff ) * ydiff + inputArray [ xc ] [ yc ] * xdiff * ydiff ; outputArray [ i ] [ j ] = ( int ) out ; } } long elapsed = System.currentTimeMillis ( ) - start ; System.out.println ( `` Time used : `` + elapsed ) ; long start = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < newWidth ; i++ ) { for ( int j = 0 ; j < newHeight ; j++ ) { double x = i * scaleX ; double y = j * scaleY ; double xdiff = x - ( int ) x ; double ydiff = y - ( int ) y ; double out = inputArray [ ( int ) Math.floor ( x ) ] [ ( int ) Math.floor ( y ) ] * ( 1 - xdiff ) * ( 1 - ydiff ) + inputArray [ ( int ) Math.ceil ( x ) ] [ ( int ) Math.floor ( y ) ] * xdiff * ( 1 - ydiff ) + inputArray [ ( int ) Math.floor ( x ) ] [ ( int ) Math.ceil ( y ) ] * ( 1 - xdiff ) * ydiff + inputArray [ ( int ) Math.ceil ( x ) ] [ ( int ) Math.ceil ( y ) ] * xdiff * ydiff ; outputArray [ i ] [ j ] = ( int ) out ; } } long elapsed = System.currentTimeMillis ( ) - start ; System.out.println ( `` Time used : `` + elapsed ) ;
"System.out.println ( DateTimeFormat.forPattern ( `` yyyyMMdd '' ) .parseDateTime ( `` 20130101 '' ) ) ; // 2013-01-01T00:00:00.000+05:30 ( Expected ) ( case 1 ) System.out.println ( DateTimeFormat.forPattern ( `` yyyyMMdd '' ) .parseDateTime ( `` +20130101 '' ) ) ; // 20130-10-01T00:00:00.000+05:30 ( ? ? ? Notice that month changed to 10 also ) ( case 2 ) System.out.println ( DateTimeFormat.forPattern ( `` MMyyyydd '' ) .parseDateTime ( `` 01+201301 '' ) ) ; // 20130-01-01T00:00:00.000+05:30 ( ? ? ? At least month is fine this time ) ( case 3 ) System.out.println ( DateTimeFormat.forPattern ( `` MM-yyyy-dd '' ) .parseDateTime ( `` 01-+2013-01 '' ) ) ; // 2013-01-01T00:00:00.000+05:30 ( I expected an error , but this parsed correctly ) ( case 4 )"
P [ ] outputArray = new P [ inputArray.length ] ; for ( int i =0 ; i < inputArray.length ; i++ ) { outputArray [ i ] = inputArray [ i ] .transformToP ( ) ; }
class Example { private Set < Example > setExample ; // ... . }
"public boolean loadVHost ( String java , File sockfile ) throws IOException { if ( CLib.INSTANCE.setegid ( suid ) ! = 0 ) { log ( `` setegid C call failed ! @ `` + id ) ; return false ; } if ( CLib.INSTANCE.seteuid ( suid ) ! = 0 ) { log ( `` seteuid C call failed ! @ `` + id ) ; return false ; } if ( CLib.INSTANCE.getegid ( ) ! = suid || CLib.INSTANCE.geteuid ( ) ! = suid ) { log ( `` geteuid/egid C call returned unwanted value ! @ `` + id + `` ( returned `` + CLib.INSTANCE.getuid ( ) + `` : '' + CLib.INSTANCE.getgid ( ) + `` ) '' ) ; return false ; } File hp = new File ( homepath ) ; hp.mkdirs ( ) ; File avuna = new File ( hp , `` avuna.jar '' ) ; File main = new File ( hp , `` main.cfg '' ) ; // TODO : add linux user-based RAM/HDD/bandwidth caps File hosts = new File ( hp , `` hosts.cfg '' ) ; if ( ! avuna.exists ( ) || ! main.exists ( ) || ! hosts.exists ( ) ) { log ( `` VHost corrupted , avuna.jar/main.cfg/hosts.cfg is missing ! Reinstalling ... '' ) ; // if ( createVHost ( java , sockfile.getAbsolutePath ( ) ) ) { // log ( `` Reinstallation completed , vhost loading ... '' ) ; // } else { // log ( `` Reinstallation failed , vhost NOT loading . `` ) ; // return false ; // } } ProcessBuilder builder = new ProcessBuilder ( java , `` -Xmx '' + maxram + `` M '' , `` -Xms16M '' , `` -jar '' , avuna.getAbsolutePath ( ) , main.getAbsolutePath ( ) ) ; // TODO : if we want to be able to pass std input/output/err , this would be the place builder.redirectErrorStream ( true ) ; this.process = builder.start ( ) ; if ( CLib.INSTANCE.seteuid ( 0 ) ! = 0 ) { log ( `` [ CRITICAL ] setuid C call failed ! @ `` + id + `` , the VHost was loaded , but we were NOT able to re-escalate ! `` ) ; return false ; } if ( CLib.INSTANCE.setegid ( 0 ) ! = 0 ) { log ( `` [ CRITICAL ] setgid C call failed ! @ `` + id + `` , the VHost was loaded , but we were NOT able to re-escalate ! `` ) ; return false ; } return true ; }"
public static void main ( String [ ] args ) { Object o = null ; story ( o ) ; } private static void story ( < typedefinition > o ) { if ( o ! = null ) System.out.println ( `` O noes ! `` ) ; else System.out.println ( `` O yes '' ) ; }
public static void main ( String [ ] args ) { double d = 9.9 ; long l = ( long ) d ; System.out.println ( l ) ; } 9 public static void main ( String [ ] args ) { double d = 99999999999999999999999999999999.9 ; long l = ( long ) d ; System.out.println ( l ) ; } 9223372036854775807
"package spike ; import java.util.function.BiFunction ; import java.util.function.Function ; public class ReductionProblem { interface F3 < T , U , V , R > extends Function < T , BiFunction < U , V , R > > { default BiFunction < U , V , R > apply ( final T t ) { return ( U u , V v ) - > apply ( t , u , v ) ; } R apply ( T t , U u , V v ) ; } private static < T , U , V , R > BiFunction < U , V , R > workingReduce ( F3 < T , U , V , R > f , T t ) { return f.apply ( t ) ; } private static < T , U , V , R > BiFunction < U , V , R > brokenReduce ( Function < T , BiFunction < U , V , R > > f , T t ) { return f.apply ( t ) ; } public static void main ( String [ ] args ) { /* * Object is instantiated here , right ? So , Function # apply ( Integer ) * should be defined and ready to go . */ final F3 < Integer , Integer , String , Integer > f3 = ( a , b , c ) - > a * b * c.length ( ) ; final Integer a = 3 , b = 13 ; final String c = `` see '' ; final Integer expected = a * b * c.length ( ) ; Integer v1 = f3.apply ( a , b , c ) ; display ( `` invoke with 3 '' , expected , v1 ) ; /* * It appears that f3 can indeed behave as a Function < Integer , * BiFunction < > > ... */ Integer v2 = f3.apply ( a ) .apply ( b , c ) ; display ( `` invoke with 1 then 2 '' , expected , v2 ) ; /* * From inside a method , no problem ... */ Integer v3 = workingReduce ( f3 , a ) .apply ( b , c ) ; display ( `` invoke with 1 inside special reducer '' , expected , v3 ) ; /* * But when passed explicitly as a Function , AbstractMethodError is * thrown from inside the reduction method . So , it seems that the * instantiation of the object with the default method implementation * does not occur where I am supposing it does . */ Integer v4 = brokenReduce ( f3 , a ) .apply ( b , c ) ; display ( `` invoke with 1 inside general reducer '' , expected , v4 ) ; } private static void display ( String label , Object expected , Object actual ) { System.out.println ( label + `` : '' + ( actual.equals ( expected ) ? `` pass '' : `` fail '' ) ) ; } }"
"public class FacebookRequest { private static JSONObject object ; private FacebookRequest ( JSONObject object ) { this.object = object ; } private static JSONObject GraphApiRequest ( String path , AccessToken token ) { new GraphRequest ( token , path , null , HttpMethod.GET , new GraphRequest.Callback ( ) { public void onCompleted ( GraphResponse response ) { object = response.getJSONObject ( ) ; } } ) .executeAsync ( ) ; return object ; } public static JSONObject getGraphApi ( String path , AccessToken token ) { return GraphApiRequest ( path , token ) ; } } private static FacebookRequest fbRequest ; // ... .JSONObject object= fbRequest.getGraphApi ( path , token ) ; public class FacebookRequest { private JSONObject object ; public FacebookRequest ( String path , AccessToken token ) { new GraphRequest ( token , path , null , HttpMethod.GET , new GraphRequest.Callback ( ) { public void onCompleted ( GraphResponse response ) { object = response.getJSONObject ( ) ; } } ) .executeAsync ( ) ; } public JSONObject getObject ( ) { return object ; } } protected void onCreate ( Bundle savedInstanceState ) { // ... FacebookRequest fbRequest = new FacebookRequest ( path , token ) ; // ... } JSONObject object = fbRequest.getObject ( ) ;"
public interface SortAnalysis < E extends Comparable < ? super E > > { public long analyzeSort ( ArrayList < E > list ) ; } public class InsertionSort < E extends Comparable < ? super E > > implements SortAnalysis { @ Overridepublic long analyzeSort ( ArrayList list ) { // TODO Auto-generated method stub return 0 ; } ArrayList < E > list SortAnalysis < E >
public class HelloWorld { public static void main ( String [ ] args ) { long test = 3147483647L ; System.out.println ( test < < 1 ) ; } }
public ClassName ( ) { super ( ) ; }
"for ( T obj : Collection ) { assert obj.someProperty ( ) ; } TreeMap < Integer , T > map = new TreeMap < > ( ) ; int i = 0 ; for ( T obj : Collection ) { map.put ( i , obj ) ; assert obj.someProperty ( ) ; i++ ; } // assert something about map , then never use it again"
static { } ; Code : 0 : sipush 13393 : putstatic # 7 //Field SRV_IDetc public { } ; Code : 0 : sipush 13393 : putstatic # 7 //Field SRV_IDetc
abstract void draw ( ) ; static { abstract class Abstract { abstract String test ( ) ; } class Extends extends Abstract { @ Override String test ( ) { return null ; } } new Extends ( ) .test ( ) ;
"private class convert implements ActionListener { public void actionPerformed ( ActionEvent e ) { JButton button = ( JButton ) e.getSource ( ) ; button.setText ( `` Working ... '' ) ; button.setEnabled ( false ) ; anObject name = new AnObject ( ) ; boolean result = name.methodName ( chooser.getSelectedFile ( ) , encoding ) ; // A bunch of stuff was here but irrelevant to the question , // so it was removed to save room . button.setEnabled ( true ) ; button.setText ( `` Go '' ) ; }"
"Class < Map < String , String > > clazz = Map.class ;"
"public static int binarySearch ( Comparable [ ] array , Comparable item , int start , int end ) { if ( end < start ) { return -1 ; } int mid = ( start + end ) / 2 ; if ( item.compareTo ( array [ mid ] ) > 0 ) { return binarySearch ( array , item , mid + 1 , end ) ; } else if ( item.compareTo ( array [ mid ] ) < 0 ) { return binarySearch ( array , item , start , mid - 1 ) ; } else { return mid ; } } public static < T extends Comparable < ? super T > > int binarySearch ( T [ ] array , T item , int start , int end ) { if ( array.length == 0 ) { return -1 ; } if ( item == null ) { return -1 ; } if ( start < 0 ) { return -1 ; } if ( end < start ) { return -1 ; } int mid = ( start + end ) / 2 ; if ( item.compareTo ( array [ mid ] ) > 0 ) { return binarySearch ( array , item , mid + 1 , end ) ; } else if ( item.compareTo ( array [ mid ] ) < 0 ) { return binarySearch ( array , item , start , mid - 1 ) ; } else { return mid ; } }"
"public sealed interface Animal permits Cat , Duck { String makeSound ( ) ; } public final class Cat implements Animal { @ Override public String makeSound ( ) { return `` miau '' ; } } public non-sealed class Duck implements Animal { @ Override public String makeSound ( ) { return `` quack '' ; } }"
"public static int binarySearch ( Object [ ] a , Object key ) public static int binarySearch ( Comparable [ ] a , Object key )"
"void WorriedFunction ( ... ) { // Of course , this is a bit exaggerated , but I guess this helps // to understand the idea . if ( argument1 ! = null ) return ; if ( argument2 + argument3 < 0 ) return ; if ( stateManager.currentlyDrawing ( ) ) return ; // Actual function implementation starts here . // do_what_the_function_is_used_for } // Call the function.WorriedFunction ( ... ) ; if ( argument1 ! = null & & argument2 + argument3 < 0 & & ... ) { // Now all the checks inside can be removed . NotWorriedFunction ( ) ; } if ( argument1 ! = null ) throw NullArgumentException ;"
"api.getEvent ( ... ) .subscribeOn ( Schedulers.io ( ) ) .observeOn ( AndroidScheduler.mainThread ( ) ) .subscribe ( event - > setupUI ( event ) , throwable - > showSnackbar ( throwable ) ) ; Retrofit : java.io.InterruptedIOException : thread interrupted at okio.Timeout.throwIfReached ( Timeout.java:145 ) at okio.Okio $ 1.write ( Okio.java:77 ) at okio.RealBufferedSink.flush ( RealBufferedSink.java:221 ) at com.squareup.okhttp.internal.framed.Http2 $ Writer.flush ( Http2.java:381 ) at com.squareup.okhttp.internal.framed.FramedConnection.newStream ( FramedConnection.java:283 ) at com.squareup.okhttp.internal.framed.FramedConnection.newStream ( FramedConnection.java:249 ) at com.squareup.okhttp.internal.http.Http2xStream.writeRequestHeaders ( Http2xStream.java:135 ) at com.squareup.okhttp.internal.http.HttpEngine $ NetworkInterceptorChain.proceed ( HttpEngine.java:710 ) at com.facebook.stetho.okhttp.StethoInterceptor.intercept ( StethoInterceptor.java:67 ) at com.squareup.okhttp.internal.http.HttpEngine $ NetworkInterceptorChain.proceed ( HttpEngine.java:695 ) at com.squareup.okhttp.internal.http.HttpEngine.readResponse ( HttpEngine.java:576 ) at com.squareup.okhttp.Call.getResponse ( Call.java:287 ) at com.squareup.okhttp.Call $ ApplicationInterceptorChain.proceed ( Call.java:243 ) at com.squareup.okhttp.Call.getResponseWithInterceptorChain ( Call.java:205 ) at com.squareup.okhttp.Call.execute ( Call.java:80 ) at com.newrelic.agent.android.instrumentation.okhttp2.CallExtension.execute ( CallExtension.java:43 ) at retrofit.client.OkClient.execute ( OkClient.java:53 ) at com.newrelic.agent.android.instrumentation.retrofit.ClientExtension.execute ( ClientExtension.java:42 ) at retrofit.RestAdapter $ RestHandler.invokeRequest ( RestAdapter.java:326 ) at retrofit.RestAdapter $ RestHandler.access $ 100 ( RestAdapter.java:220 ) at retrofit.RestAdapter $ RestHandler $ 1.invoke ( RestAdapter.java:265 ) at retrofit.RxSupport $ 2.run ( RxSupport.java:55 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:428 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:237 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1133 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:607 ) at retrofit.Platform $ Android $ 2 $ 1.run ( Platform.java:142 ) at java.lang.Thread.run ( Thread.java:761 )"
"String [ ] array = new String [ ] { `` extra_asus_dial_use_dualsim '' , `` com.android.phone.extra.slot '' , `` slot '' , `` simslot '' , `` sim_slot '' , `` subscription '' , `` Subscription '' , `` phone '' , `` com.android.phone.DialingMode '' , `` simSlot '' , `` slot_id '' , `` simId '' , `` simnum '' , `` phone_type '' , `` slotId '' , `` slotIdx '' } ; for ( String item : array ) { Log.i ( TAG , `` Sim Card - `` + item + `` -- -- - > `` + intent.getExtras ( ) .getInt ( item ) ) ; } PhoneCallReceiver : Sim Card - extra_asus_dial_use_dualsim -- -- - > 0PhoneCallReceiver : Sim Card - com.android.phone.extra.slot -- -- - > 0PhoneCallReceiver : Sim Card - slot -- -- - > 0PhoneCallReceiver : Sim Card - simslot -- -- - > 0PhoneCallReceiver : Sim Card - sim_slot -- -- - > 0PhoneCallReceiver : Sim Card - subscription -- -- - > 0PhoneCallReceiver : Sim Card - Subscription -- -- - > 0PhoneCallReceiver : Sim Card - phone -- -- - > 0PhoneCallReceiver : Sim Card - com.android.phone.DialingMode -- -- - > 0PhoneCallReceiver : Sim Card - simSlot -- -- - > 0PhoneCallReceiver : Sim Card - slot_id -- -- - > 0PhoneCallReceiver : Sim Card - simId -- -- - > 0PhoneCallReceiver : Sim Card - simnum -- -- - > 0PhoneCallReceiver : Sim Card - phone_type -- -- - > 0PhoneCallReceiver : Sim Card - slotId -- -- - > 0PhoneCallReceiver : Sim Card - slotIdx -- -- - > 0"
"package util ; import java.text.DateFormat ; import java.text.ParseException ; import java.text.SimpleDateFormat ; import java.util.Date ; public class StringToDate { public Date getDateFromString ( String strDate , String dateFormat ) { DateFormat df = new SimpleDateFormat ( dateFormat ) ; Date date = null ; try { date = df.parse ( strDate ) ; } catch ( ParseException e ) { e.printStackTrace ( ) ; } System.out.println ( date ) ; return date ; } public static void main ( String [ ] args ) { StringToDate s2d = new StringToDate ( ) ; s2d.getDateFromString ( `` 12-18-11 , 10:36 AM '' , '' MM-dd-yy , hh : mm a '' ) ; s2d.getDateFromString ( `` 02-04-12 , 01:17 PM '' , '' MM-dd-yy , hh : mm a '' ) ; } } Sun Dec 18 10:36:00 CET 2011nulljava.text.ParseException : Unparseable date : `` 02-04-12 , 01:17 PM '' at java.text.DateFormat.parse ( DateFormat.java:337 ) at util.StringToDate.getDateFromString ( StringToDate.java:17 ) at util.StringToDate.main ( StringToDate.java:33 ) s2d.getDateFromString ( `` 02-04-12 '' , `` MM-dd-yy '' ) ; s2d.getDateFromString ( `` 01:17 PM '' , `` hh : mm a '' ) ; Sat Feb 04 00:00:00 CET 2012Thu Jan 01 13:17:00 CET 1970"
import static java.lang.Integer . * ; int a = parseInt ( scanner.nextLine ( ) ) ;
public synchronized Object get ( ) { while ( result == null ) { try { wait ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; // Do we own the monitor of this object ? } } return result ; }
public static void method ( String [ ] srgs ) { try { } catch ( ) { System.out.println ( `` Hello World '' + `` one '' ) ; } catch ( .. ) { System.out.println ( `` Hello World '' + `` two '' ) ; } catch ( .. ) { System.out.println ( getString ( ) ) ; } }
variable = something == 1 ? 1 : 0
java.lang.ClassCastException : android.widget.LinearLayout $ LayoutParams can not be cast to ClassA $ 1at android.widget.LinearLayout.measureHorizontal ( LinearLayout.java:1010 ) ... final LinearLayout.LayoutParams lp = ( LinearLayout.LayoutParams ) obj.method ( ) ; //line 1010 java.lang.ClassCastException : ClassA $ 1 can not be cast to android.widget.LinearLayout $ LayoutParams MyInterface my = ClassA $ 1 ; // $ 1 is an anonymous class which implements MyInterfacemy.getClass ( ) .cast ( lp ) ;
"1 ) { 1 , 2 , 3 , 4 } = valid 2 ) { 1 , 2 , { 3 , 4 } , 5 } = valid 3 ) 1 , 2 , 3 , 4 = invalid ( missing brackets ) 4 ) { 1 , 2 , { 3 , 4 , 5 } = invalid ( missing inner bracket ) String elementSeparator = `` ( , \\s ) ? `` ; String validElement = `` ( \\ { ? [ A-Za-z0-9 ] *\\ } ? '' + elementSeparator + `` ) * '' ; String regex = `` ^\\ { `` + validElement + `` \\ } $ '' ;"
... /Project/trunk/Services ... /Project/trunk/Web
"{ `` approvalRequired '' : false , `` location '' : { `` locationName '' : `` < +37.33233141 , -122.03121860 > +\/- 5.00m ( speed 0.00 mps \/ course -1.00 ) @ 9\/16\/18 , 9:24:59 PM Pacific Daylight Time '' , `` longitude '' : -122.0312186 , `` latitude '' : 37.332331410000002 } } { `` approvalRequired '' : false , `` scheduledStartTime '' : `` 2016-01-01T10:24:00+01:00 '' , `` location '' : { `` locationName '' : `` < +37.33233141 , -122.03121860 > +\/- 5.00m ( speed 0.00 mps \/ course -1.00 ) @ 9\/16\/18 , 9:24:59 PM Pacific Daylight Time '' , `` longitude '' : -122.0312186 , `` latitude '' : 37.332331410000002 } } @ DynamoDBTypeConverted ( converter = ZonedDateTimeTypeConverter.class ) @ DynamoDBAttribute ( attributeName = `` scheduledStartTime '' ) public ZonedDateTime scheduledStartTime ; @ RequestMapping ( method = RequestMethod.POST ) public ResponseEntity create ( @ RequestBody Event event ) { ... }"
public class Main { private static final long TEST_NUMBERS = 5L ; private static final long ITERATION_NUMBER = 100000L ; private static long value ; public static void main ( final String [ ] args ) throws Throwable { for ( int i=0 ; i < TEST_NUMBERS ; i++ ) { value = 0 ; final Thread incrementor = new Thread ( new Incrementor ( ) ) ; final Thread checker = new Thread ( new Checker ( ) ) ; incrementer.start ( ) ; checker.start ( ) ; checker.join ( ) ; incrementer.join ( ) ; } } static class Incrementor implements Runnable { public void run ( ) { for ( int i=0 ; i < ITERATION_NUMBER ; i++ ) { ++value ; } } } static class Checker implements Runnable { public void run ( ) { long nonEqualsCount = 0 ; for ( int i=0 ; i < ITERATION_NUMBER ; i++ ) { if ( value ! = value ) { ++nonEqualsCount ; } } System.out.println ( `` nonEqualsCount = `` + nonEqualsCount ) ; } } } nonEqualsCount = 12 ; //or other non 0 value ; nonEqualsCount = 0 ; nonEqualsCount = 0 ; nonEqualsCount = 0 ; nonEqualsCount = 0 ;
public interface Function { double function ( double input ) ; } Function f = ( x ) - > x ; int f ( double x ) { return x }
if ( getClass ( ) ! = otherObject.getClass ( ) ) return false ; if ( ! ( otherObject instanceof ClassName ) ) return false ;
"public class MenuBar extends JMenuBar { MenuBarController controller ; public MenuBar ( ) { JMenu menu = new JMenu ( `` File '' ) ; menu.add ( createMenuItem ( `` Report '' , controller : :writeReport ) ) ; menu.add ( createMenuItem ( `` Save '' , controller : :save ) ) ; menu.add ( createMenuItem ( `` Import '' , controller : :importFile ) ) ; menu.add ( createMenuItem ( `` Clear DB '' , controller : :clearDatabase ) ) ; add ( menu ) ; } public void setController ( MenuBarController controller ) { this.controller = controller ; } }"
x = int ( raw_input ( `` Enter : `` ) ) def recurse ( num ) : if num ! = 0 : num = num * recurse ( num-1 ) else : return 1 return num print recurse ( x ) public class Default { static Scanner input = new Scanner ( System.in ) ; public static void main ( String [ ] args ) { System.out.print ( `` Enter : `` ) ; int x = input.nextInt ( ) ; System.out.print ( recurse ( x ) ) ; } public static int recurse ( int num ) { if ( num ! = 0 ) { num = num * recurse ( num - 1 ) ; } else { return 1 ; } return num ; } 1262412072050404032036288036288003991680047900160062270208008717829120013076743680002092278988800035568742809600064023737057280001216451004088320002432902008176640000510909421717094400001124000727777607680000258520167388849766400006204484017332394393600001551121004333098598400000015511210043330985984000000 1 2 6 24 120 720 5040 40320 362880 3628800 39916800 479001600 1932053504 1278945280 2004310016 2004189184-288522240-898433024 109641728-2102132736 -1195114496-522715136 862453760-775946240 2076180480 2076180480
public enum ErrorCodes { public int id ; Undefined ; } public enum ErrorCodes { Undefined ; public int id ; } .
"import org.json.simple.JSONArray ; import org.json.JSONException ; import org.json.simple.JSONObject ; import org.json.simple.parser.JSONParser ; import org.json.simple.parser.ParseException ; public class A6 { public static void main ( String [ ] args ) throws ParseException , JSONException { String out1= '' { \ '' Employee\ '' : [ { \ '' id\ '' : \ '' 101\ '' , \ '' name\ '' : \ '' Pushkar\ '' , \ '' salary\ '' : \ '' 5000\ '' } , { \ '' id\ '' : \ '' 102\ '' , \ '' name\ '' : \ '' Rahul\ '' , \ '' salary\ '' : \ '' 4000\ '' } , { \ '' id\ '' : \ '' 103\ '' , \ '' name\ '' : \ '' tanveer\ '' , \ '' salary\ '' : \ '' 56678\ '' } ] } '' ; //System.out.println ( out1 ) ; JSONParser parser=new JSONParser ( ) ; JSONObject obj= ( JSONObject ) parser.parse ( out1 ) ; //System.out.print ( obj ) ; JSONArray jarr= ( JSONArray ) obj.get ( `` Employee '' ) ; //System.out.print ( jarr ) ; for ( int i=0 ; i < jarr.size ( ) ; i++ ) { JSONObject jobj= ( JSONObject ) jarr.get ( i ) ; String ID1= ( String ) jobj.get ( `` id '' ) ; System.out.println ( ID1 ) ; if ( ID1 ! =null & & out1.equals ( ID1 ) ) { System.out.println ( `` NAME '' +jobj.get ( `` name '' ) ) ; } } } }"
StringBuilder str = new StringBuilder ( `` madam '' ) ; StringBuilder str2 = new StringBuilder ( str ) ; boolean res = str2.equals ( str.reverse ( ) .toString ( ) .trim ( ) ) ; System.out.println ( str + `` `` + str2 ) ; System.out.println ( res ) ; madam madamfalse
"public abstract class Person { public static final class Guy extends Person { public static final Guy TOM = new Guy ( ) ; public static final Guy DICK = new Guy ( ) ; public static final Guy HARRY = new Guy ( ) ; } public static final List < Guy > GUYS = ImmutableList.of ( Guy.TOM , Guy.DICK , Guy.HARRY ) ; }"
"class Point { private double x , y ; private final StampedLock sl = new StampedLock ( ) ; void move ( double deltaX , double deltaY ) { // an exclusively locked method long stamp = sl.writeLock ( ) ; try { x += deltaX ; y += deltaY ; } finally { sl.unlockWrite ( stamp ) ; } } double distanceFromOrigin ( ) { // A read-only method long stamp = sl.tryOptimisticRead ( ) ; double currentX = x , currentY = y ; if ( ! sl.validate ( stamp ) ) { stamp = sl.readLock ( ) ; try { currentX = x ; currentY = y ; } finally { sl.unlockRead ( stamp ) ; } } return Math.sqrt ( currentX * currentX + currentY * currentY ) ; } void moveIfAtOrigin ( double newX , double newY ) { // upgrade // Could instead start with optimistic , not read mode long stamp = sl.readLock ( ) ; try { while ( x == 0.0 & & y == 0.0 ) { long ws = sl.tryConvertToWriteLock ( stamp ) ; if ( ws ! = 0L ) { stamp = ws ; x = newX ; y = newY ; break ; } else { sl.unlockRead ( stamp ) ; stamp = sl.writeLock ( ) ; } } } finally { sl.unlock ( stamp ) ; } } }"
filteredListIn.addAll ( Stream.of ( listRef ) .filter ( results - > results.getTitle ( ) .contains ( query.toString ( ) .toLowerCase ( ) ) ) ) ; private List < Results > listRef = new ArrayList < > ( ) ; List < Results > filteredListIn = new ArrayList < > ( ) ;
public class Que { public void enterNumbers ( List < Number > nummern ) { for ( Number number : nummern ) { System.out.println ( number + `` \n '' ) ; } } public void enterNum ( Number num ) { System.out.println ( `` This is a number `` + num ) ; } public static void main ( String [ ] args ) { Que que = new Que ( ) ; Integer myInteger = new Integer ( 7 ) ; // possible ( of course ! ) que.enterNum ( myInteger ) ; List < Integer > num = new ArrayList < Integer > ( ) ; num.add ( 4 ) ; num.add ( 45 ) ; Integer inte = new Integer ( 333 ) ; num.add ( inte ) ; // not possible ! que.enterNumbers ( num ) ; } }
"public class Test { static /* volatile */ long t = 0 ; static long [ ] counters = new long [ 2 ] ; static /* volatile */ boolean stop = false ; static Object o = new Object ( ) ; public static void main ( String [ ] args ) { Thread t1 = createThread ( 0 ) ; Thread t2 = createThread ( 1 ) ; t1.start ( ) ; t2.start ( ) ; Thread.sleep ( 1000 ) ; stop = true ; t1.join ( ) ; t2.join ( ) ; System.out.println ( `` counter : `` + t + `` counters : `` + counters [ 0 ] + `` , `` + counters [ 1 ] + `` ( sum : `` + ( counters [ 0 ] + counters [ 1 ] ) + `` ) '' ) ; } private static Thread createThread ( final int i ) { Thread thread = new Thread ( ) { public void run ( ) { while ( ! stop ) { // synchronized ( o ) { t++ ; // } // if ( counters [ i ] % 1000000 == 0 ) // { // System.out.println ( i + `` ) '' + counters [ i ] ) ; // } counters [ i ] ++ ; } } ; } ; return thread ; } }"
float f = 100 ; //implies a cast from integer to float float f = 100f ; //simply a float initialization float f1 = ( float ) 2000000000 ; float f2 = ( float ) 2000000050 ; float f3 = 2000000000f ; float f4 = 2000000050f ; System.out.println ( f1 + `` `` + f2 + `` `` + ( f1==f2 ) + `` `` + f3 + `` `` + f4 + `` `` + ( f3==f4 ) ) ;
String name1 = `` name '' ; //new String ( `` name '' ) creates a new object.String name2 = `` name '' ;
"public class MyAtomInt { private final AtomicReference < Integer > ref ; public MyAtomInt ( int init ) { ref = new AtomicReference < Integer > ( init ) ; } public MyAtomInt ( ) { this ( 0 ) ; } public void inc ( ) { while ( true ) { int oldVal = ref.get ( ) ; int nextVal = oldVal + 1 ; boolean success = ref.compareAndSet ( oldVal , nextVal ) ; // false once oldVal = 128 if ( success ) { return ; } } } public int get ( ) { return ref.get ( ) ; } static class Task implements Runnable { private final MyAtomInt myAtomInt ; private final int incCount ; public Task ( MyAtomInt myAtomInt , int cnt ) { this.myAtomInt = myAtomInt ; this.incCount = cnt ; } @ Override public void run ( ) { for ( int i = 0 ; i < incCount ; ++i ) { myAtomInt.inc ( ) ; } } } public static void main ( String [ ] args ) throws Exception { MyAtomInt myAtomInt = new MyAtomInt ( ) ; ExecutorService exec = Executors.newSingleThreadExecutor ( ) ; exec.submit ( new Task ( new MyAtomInt ( ) , 150 ) ) .get ( ) ; System.out.println ( myAtomInt.get ( ) ) ; exec.shutdown ( ) ; } }"
Scanner scnr = new Scanner ( System.in ) ; int number = 0 ; scnr.nextInt ( ) ; if ( ( ( scnr.nextInt ( ) > = 4 ) & & ( scnr.nextInt ( ) < =10 ) ) ) { number = scnr.nextInt ( ) ; } Scanner scnr = new Scanner ( System.in ) ; int number = 0 ; int validNum = 0 ; number = scnr.nextInt ( ) ; if ( ( ( number > = 4 ) & & ( number < =10 ) ) ) { validNum = number ; }
"private static class Flawless { private final XHTMLPanel panel = new XHTMLPanel ( ) ; private final JFrame frame = new JFrame ( `` Single Page Demo '' ) ; private Flawless ( ) { frame.getContentPane ( ) .add ( new JScrollPane ( panel ) ) ; frame.pack ( ) ; frame.setSize ( 1024 , 768 ) ; } private void update ( final org.w3c.dom.Document html ) { frame.setVisible ( true ) ; try { panel.setDocument ( html ) ; } catch ( Exception ignored ) { } } } private final HTMLPanel mHtmlRenderer = new HTMLPanel ( ) ; private final SwingNode mSwingNode = new SwingNode ( ) ; private final JScrollPane mScrollPane = new JScrollPane ( mHtmlRenderer ) ; // ... final var context = getSharedContext ( ) ; final var textRenderer = context.getTextRenderer ( ) ; textRenderer.setSmoothingThreshold ( 0 ) ; mSwingNode.setContent ( mScrollPane ) ; // ... // The `` preview pane '' contains the SwingNode.final SplitPane splitPane = new SplitPane ( getDefinitionPane ( ) .getNode ( ) , getFileEditorPane ( ) .getNode ( ) , getPreviewPane ( ) .getNode ( ) ) ; import javafx.application.Application ; import javafx.application.Platform ; import javafx.embed.swing.SwingNode ; import javafx.scene.Scene ; import javafx.scene.control.SplitPane ; import javafx.stage.Stage ; import org.jsoup.Jsoup ; import org.jsoup.helper.W3CDom ; import org.xhtmlrenderer.simple.XHTMLPanel ; import javax.swing . * ; import static javax.swing.SwingUtilities.invokeLater ; import static javax.swing.UIManager.getSystemLookAndFeelClassName ; import static javax.swing.UIManager.setLookAndFeel ; public class FlyingSourceTest extends Application { private final static String HTML = `` < ! DOCTYPE html > < html > < head '' + `` > < style type='text/css ' > body { font-family : serif ; background-color : `` + `` # fff ; color : # 454545 ; } < /style > < /head > < body > < p style=\ '' font-size : `` + `` 300px\ '' > TEST < /p > < /body > < /html > '' ; public static void main ( String [ ] args ) { Application.launch ( args ) ; } @ Override public void start ( Stage primaryStage ) { invokeLater ( ( ) - > { try { setLookAndFeel ( getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception ignored ) { } primaryStage.setTitle ( `` Hello World ! '' ) ; final var renderer = new XHTMLPanel ( ) ; renderer.getSharedContext ( ) .getTextRenderer ( ) .setSmoothingThreshold ( 0 ) ; renderer.setDocument ( new W3CDom ( ) .fromJsoup ( Jsoup.parse ( HTML ) ) ) ; final var swingNode = new SwingNode ( ) ; swingNode.setContent ( new JScrollPane ( renderer ) ) ; final var root = new SplitPane ( swingNode , swingNode ) ; // -- -- -- -- -- // Here be dragons ? Using a StackPane , instead of a SplitPane , works . // -- -- -- -- -- //StackPane root = new StackPane ( ) ; //root.getChildren ( ) .add ( mSwingNode ) ; Platform.runLater ( ( ) - > { primaryStage.setScene ( new Scene ( root , 300 , 250 ) ) ; primaryStage.show ( ) ; } ) ; } ) ; } } final var label = new JLabel ( `` TEST '' ) ; label.setFont ( label.getFont ( ) .deriveFont ( Font.BOLD , 128f ) ) ; final var swingNode = new SwingNode ( ) ; swingNode.setContent ( label ) ; -Dawt.useSystemAAFontSettings=off-Dswing.aatext=false java -Dxr.text.fractional-font-metrics=true \ -Dxr.text.aa-smoothing-level=0 \ -Dxr.image.render-quality=java.awt.RenderingHints.VALUE_INTERPOLATION_BICUBIC -Dxr.image.scale=HIGH \ -Dxr.text.aa-rendering-hint=VALUE_TEXT_ANTIALIAS_GASP -jar ..."
< project > < modelVersion > 4.0.0 < /modelVersion > < groupId > de.wolkenarchitekt < /groupId > < artifactId > xml-to-xsd < /artifactId > < version > 1 < /version > < dependencies > < dependency > < groupId > org.apache.xmlbeans < /groupId > < artifactId > xmlbeans < /artifactId > < version > 3.1.0 < /version > < /dependency > < /dependencies > < /project > FROM maven:3.6.3-openjdk-14-slimRUN mkdir -p /opt/workspaceWORKDIR /opt/workspaceCOPY pom.xml .RUN mvn install
"Runnable task1 = ( ) - > { int num = Math.rand ( 1,100 ) ; if ( num < 5 ) { throw new Exception ( `` something went wrong with this task , terminate '' ) ; } } Runnable task2 = ( ) - > { int num = Math.rand ( 1,100 ) return num < 50 ; } ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool ( 2 ) ; task1schedule = scheduledExecutorService.scheduleAtFixedRate ( task1 , 1 , 60 , TimeUnit.SECONDS ) ; task2schedule = scheduledExecutorService.scheduleAtFixedRate ( task2 , 1 , 60 , TimeUnit.SECONDS ) ; if ( ! task1schedule || ! task2schedule ) scheduledExecutorService.shutdown ( ) ;"
String str = editText.getText ( ) .toString ( ) ; str =str.trim ( ) .toLowerCase ( ) ; textView.setText ( str ) ; textView.setText ( editText.getText ( ) .toString ( ) .trim ( ) .toLowerCase ( ) ) ;
"Set.of ( 1,2,3,4 ) // 4 elements , but internal array is 8 int idx = Math.floorMod ( pe.hashCode ( ) ^ SALT , elements.length ) ; while ( true ) { E ee = elements [ idx ] ; if ( ee == null ) { return -idx - 1 ; } else if ( pe.equals ( ee ) ) { return idx ; } else if ( ++idx == elements.length ) { idx = 0 ; } } if ( ee == null ) { return -idx - 1 ; } else if ( pe.equals ( ee ) ) { return idx ; else if ( ++idx == elements.length ) { idx = 0 ; } int idx = Math.floorMod ( pe.hashCode ( ) ^ SALT , input.length ) ; // notice the diff elements.length ( 8 ) and not input.length ( 4 )"
import java.util.function.Consumer ; public class Test { public static final void m1 ( Consumer < ? > c ) { m2 ( c ) ; } private static final < T > void m2 ( Consumer < ? super T > c ) { } } C : \Users\lukas\workspace > javac -versionjavac 1.8.0_92C : \Users\lukas\workspace > javac Test.javaTest.java:5 : error : method m2 in class Test can not be applied to given types ; m2 ( c ) ; ^ required : Consumer < ? super T > found : Consumer < CAP # 1 > reason : can not infer type-variable ( s ) T ( argument mismatch ; Consumer < CAP # 1 > can not be converted to Consumer < ? super T > ) where T is a type-variable : T extends Object declared in method < T > m2 ( Consumer < ? super T > ) where CAP # 1 is a fresh type-variable : CAP # 1 extends Object from capture of ? 1 error -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
"public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; String input , inputUpper ; char userGuess ; char coinFlip ; int randNum ; int wins = 0 ; int losses = 0 ; int total = 0 ; String choice = `` yes '' ; do { System.out.print ( `` I will flip a coin guess ' H ' for heads or 'T ' for tails -- > `` ) ; input = scan.nextLine ( ) ; inputUpper = input.toUpperCase ( ) ; userGuess = inputUpper.charAt ( 0 ) ; randNum = ( int ) ( Math.random ( ) * 2 ) ; if ( randNum == 0 ) { coinFlip = ' H ' ; } else { coinFlip = 'T ' ; } System.out.println ( `` \nYou picked `` + userGuess + `` and the coin flip was `` + coinFlip + `` so ... '' ) ; if ( userGuess == coinFlip ) { System.out.println ( `` You win ! `` ) ; wins ++ ; total ++ ; } else { System.out.println ( `` Better luck next time ... '' ) ; losses ++ ; total ++ ; } System.out.println ( `` Do you want to continue ( yes/no ) ? `` ) ; choice=scan.nextLine ( ) ; } while ( choice.equalsIgnoreCase ( `` yes '' ) ) ; System.out.println ( `` Thank you for playing . `` ) ; System.out.println ( `` You guessed correctly this many times : `` +wins ) ; System.out.println ( `` You guessed incorrectly this many times : `` +losses ) ; System.out.println ( `` During this session you 've played this many games : `` +total ) ; } }"
"public void reset ( ) IntPtr type = JNIEnv.FindClass ( `` ru/rambler/libs/swipe_layout/SwipeLayout '' ) ; IntPtr method = JNIEnv.GetMethodID ( type , `` reset '' , `` ( ) V '' ) ; try { JNIEnv.CallObjectMethod ( _swiper.Handle , method ) ; } catch ( Exception ex ) { var s = ex.Message ; } JNIEnv.CallObjectMethod ( _swiper.Handle , method ) ;"
"public class BaseClass { /** * Gets the value . */ public final String getValue ( ) { // returns something . } } public class SubClass extends BaseClass { /** * Gets the value . * < p/ > * The value is meaningless for SubClass . */ @ Override // Can not override final method public final String getValue ( ) { super.getValue ( ) ; // Not overriding implementation , just javadoc } }"
"int x = 9 ; try { ObjectOutputStream salida=new ObjectOutputStream ( new FileOutputStream ( `` test.bin '' ) ) ; salida.writeInt ( x ) ; salida.close ( ) ; System.out.println ( `` saved '' ) ; } catch ( Exception e ) { System.out.println ( e ) ; } streampos size ; char * memblock ; ifstream file ( `` test.bin '' , ios : :in|ios : :binary|ios : :ate ) ; if ( file.is_open ( ) ) { size = file.tellg ( ) ; cout < < size < < endl ; memblock = new char [ size ] ; file.seekg ( 0 , ios : :beg ) ; file.read ( memblock , size ) ; file.close ( ) ; int i ; for ( i = 0 ; i < sizeof ( memblock ) ; i++ ) { cout < < memblock [ i ] < < endl ; } delete [ ] memblock ; } else cout < < `` Unable to open file '' ; ��w"
"public class Test { public static void main ( String [ ] args ) { Numbers first = new Numbers.Builder ( ) .setD ( 3.14 ) .build ( ) ; System.out.println ( first ) ; Numbers second = new Numbers.Builder ( ) .setI ( 17 ) .setF ( 1.24F ) .build ( ) ; System.out.println ( second ) ; System.out.println ( first ) ; } } final class Numbers { private int i ; private long l ; private float f ; private double d ; private Numbers ( ) { } public static class Builder { private final Numbers instance = new Numbers ( ) ; public Builder setI ( int i ) { instance.i = i ; return this ; } public Builder setL ( long l ) { instance.l = l ; return this ; } public Builder setF ( float f ) { instance.f = f ; return this ; } public Builder setD ( double d ) { instance.d = d ; return this ; } public Numbers build ( ) { return instance ; } } @ Override public String toString ( ) { return String.format ( `` % 4d % 4d % 7.3f % 7.3f '' , i , l , f , d ) ; } } // ... private Numbers ( ) { } private Numbers ( Numbers o ) { i = o.i ; l = o.l ; f = o.f ; d = o.d ; } public static class Builder { private final Numbers instance = new Numbers ( ) ; // ... public Numbers build ( ) { return new Numbers ( instance ) ; } }"
"StringBuilder sb22 = IntStream .range ( 1 , 101 ) .filter ( x - > x > 50 ) .boxed ( ) .parallel ( ) .collect ( // object that is used in accumulator to do accumulating on StringBuilder : :new , // use object from above and call append on it with each stream element as argument ( sb , a ) - > sb.append ( `` : '' + a ) , // ( executes only when using parallel ! ) ( sb1 , sb2 ) - > { System.out.println ( Thread.currentThread ( ) .getId ( ) + `` `` + `` sb1= '' + sb1 + `` AND `` + `` sb2= '' + sb2 ) ; sb1.append ( `` - '' +sb2 ) ; } ) ; -- -- -- -- -- -- -- -- -- :51:52:53-:54:55:56-:57:58:59-:60:61:62-:63:64:65-:66:67:68-:69:70:71-:72:73-:74:75-:76:77:78-:79:80:81-:82:83:84-:85:86:87-:88:89:90-:91:92:93-:94:95:96-:97:98-:99:100 [ 51..100 ] _________________________________________________________________________________/\______________________________________________________________________ | | ( empty ) [ 51..100 ] ___________________________________/\__________________________________ ________________________________________/\______________________________________ | | | | ( empty ) ( empty ) [ 51..75 ] [ 76..100 ] ___________________/\______________ ___________________/\______________ ______________________/\________________ ______________________/\________________ | | | | | | | | ( empty ) ( empty ) ( empty ) ( empty ) [ 51..62 ] [ 63..75 ] [ 76..87 ] [ 88..100 ] _______/\______ ___________/\______ _______/\______ ___________/\______ ________/\_______ _____________/\_______ ________/\_______ _____________/\_______ | | | | | | | | | | | | | | | | ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) [ 51..56 ] [ 57..62 ] [ 63..68 ] [ 69..75 ] [ 76..81 ] [ 82..87 ] [ 88..93 ] [ 94..100 ] ___/\__ ___/\__ ___/\__ _______/\__ ___/\__ ___/\__ ___/\__ _______/\__ ___/\___ ___/\___ ___/\___ ________/\__ ___/\___ ___/\___ ___/\___ ________/\___ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) ( empty ) [ 51..53 ] [ 54..56 ] [ 57..59 ] [ 60..62 ] [ 63..65 ] [ 66..68 ] [ 69..71 ] [ 72..75 ] [ 76..78 ] [ 79..81 ] [ 82..84 ] [ 85..87 ] [ 88..90 ] [ 91..93 ] [ 94..96 ] [ 97..100 ] ___/\__ ___/\__ ___/\___ ____/\__ | | | | | | | | ( empty ) ( empty ) ( empty ) ( empty ) [ 72..73 ] [ 74..75 ] [ 97..98 ] [ 99..100 ]"
ArgProcessor argProcessor = runWebApp.new ArgProcessor ( options ) ;
"public int compare ( String s1 , String s2 ) { int n1 = s1.length ( ) ; int n2 = s2.length ( ) ; int min = Math.min ( n1 , n2 ) ; for ( int i = 0 ; i < min ; i++ ) { char c1 = s1.charAt ( i ) ; char c2 = s2.charAt ( i ) ; if ( c1 ! = c2 ) { c1 = Character.toUpperCase ( c1 ) ; c2 = Character.toUpperCase ( c2 ) ; if ( c1 ! = c2 ) { c1 = Character.toLowerCase ( c1 ) ; c2 = Character.toLowerCase ( c2 ) ; if ( c1 ! = c2 ) { // No overflow because of numeric promotion return c1 - c2 ; } } } } return n1 - n2 ; }"
"public boolean convertImageToJPG ( InputStream attachedFile ) { try { BufferedImage inputImage = ImageIO.read ( attachedFile ) ; ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; boolean result = ImageIO.write ( inputImage , `` jpg '' , byteArrayOutputStream ) ; return result ; } catch ( IOException e ) { System.err.println ( `` Error `` + e ) ; } return false ; } public static boolean convertFormat ( String inputImagePath , String outputImagePath , String formatName ) throws IOException { FileInputStream inputStream = new FileInputStream ( inputImagePath ) ; FileOutputStream outputStream = new FileOutputStream ( outputImagePath ) ; // reads input image from file BufferedImage inputImage = ImageIO.read ( inputStream ) ; // writes to the output image in specified format boolean result = ImageIO.write ( inputImage , formatName , outputStream ) ; // needs to close the streams outputStream.close ( ) ; inputStream.close ( ) ; return result ; } public class TestImageConverter { public static void main ( String [ ] args ) { String inputImage = `` D : /Photo/Pic1.jpg '' ; String oututImage = `` D : /Photo/Pic1.png '' ; String formatName = `` PNG '' ; try { boolean result = ImageConverter.convertFormat ( inputImage , oututImage , formatName ) ; if ( result ) { System.out.println ( `` Image converted successfully . `` ) ; } else { System.out.println ( `` Could not convert image . `` ) ; } } catch ( IOException ex ) { System.out.println ( `` Error during converting image . `` ) ; ex.printStackTrace ( ) ; } } }"
"@ Daopublic interface UserDao { @ Insert ( onConflict = OnConflictStrategy.REPLACE ) void Insert ( User ... users ) ; @ Query ( `` SELECT * FROM Users '' ) LiveData < List < User > > getRoomUsers ( ) ; } @ Entity ( tableName = `` Users '' ) public class User { @ NonNull @ PrimaryKeyprivate String id ; @ ColumnInfo ( name = `` name '' ) @ SerializedName ( `` name '' ) @ Exposeprivate String name ; @ ColumnInfo ( name = `` age '' ) @ SerializedName ( `` age '' ) @ Exposeprivate String age ; public User ( String id , String name , String age ) { this.id = id ; this.name = name ; this.age = age ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } public String getAge ( ) { return age ; } public void setAge ( String age ) { this.age = age ; } } public class UserRepository { private Context context ; private UserDb userDb ; private LiveData < List < User > > listLiveData ; public UserRepository ( Context context ) { this.context = context ; userDb = UserDb.getInstance ( context ) ; listLiveData = userDb.userDao ( ) .getRoomUsers ( ) ; } public void getUserList ( ) { Retrofit retrofit = RetrofitClient.getInstance ( ) ; ApiService apiService = retrofit.create ( ApiService.class ) ; Call < List < User > > userList = apiService.getUser ( ) ; userList.enqueue ( new Callback < List < User > > ( ) { @ Override public void onResponse ( Call < List < User > > call , final Response < List < User > > response ) { Completable.fromAction ( new Action ( ) { @ Override public void run ( ) throws Exception { if ( response.body ( ) ! = null ) { List < User > list = response.body ( ) ; for ( int i = 0 ; i < list.size ( ) ; i++ ) { String id = list.get ( i ) .getId ( ) ; String names = list.get ( i ) .getName ( ) ; String age = list.get ( i ) .getAge ( ) ; User user = new User ( id , names , age ) ; userDb.userDao ( ) .Insert ( user ) ; } } } } ) .subscribeOn ( Schedulers.io ( ) ) .observeOn ( AndroidSchedulers.mainThread ( ) ) .subscribe ( new CompletableObserver ( ) { @ Override public void onSubscribe ( Disposable d ) { } @ Override public void onComplete ( ) { Toast.makeText ( context , '' Data inserted '' , Toast.LENGTH_SHORT ) .show ( ) ; } @ Override public void onError ( Throwable e ) { Toast.makeText ( context , e.getMessage ( ) , Toast.LENGTH_SHORT ) .show ( ) ; } } ) ; } @ Override public void onFailure ( Call < List < User > > call , Throwable t ) { Toast.makeText ( context , t.getMessage ( ) , Toast.LENGTH_LONG ) .show ( ) ; } } ) ; } public LiveData < List < User > > getRoomUsers ( ) { return listLiveData ; } } public class MainActivity extends AppCompatActivity { UserRepository userRepository ; RecyclerView recyclerView ; UserViewModel userModel ; List < User > userList ; UserAdapter adapter ; ProgressBar prg ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; Toolbar toolbar = findViewById ( R.id.toolbar ) ; setSupportActionBar ( toolbar ) ; prg = findViewById ( R.id.prg ) ; userRepository = new UserRepository ( this ) ; userModel = ViewModelProviders.of ( this ) .get ( UserViewModel.class ) ; recyclerView = findViewById ( R.id.recyclerView ) ; recyclerView.setHasFixedSize ( true ) ; recyclerView.setLayoutManager ( new LinearLayoutManager ( this ) ) ; userList = new ArrayList < > ( ) ; adapter = new UserAdapter ( userList , this ) ; recyclerView.setAdapter ( adapter ) ; userModel.getListLiveData ( ) .observe ( this , new Observer < List < User > > ( ) { @ Override public void onChanged ( List < User > users ) { prg.setVisibility ( View.INVISIBLE ) ; adapter.setUserList ( users ) ; } } ) ; FloatingActionButton fab = findViewById ( R.id.fab ) ; fab.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View view ) { Intent i = new Intent ( MainActivity.this , AddUser.class ) ; startActivity ( i ) ; } } ) ; userRepository.getUserList ( ) ; }"
"public class Learn { public static < T > T test ( T a , T b ) { System.out.println ( a.getClass ( ) .getSimpleName ( ) ) ; System.out.println ( b.getClass ( ) .getSimpleName ( ) ) ; b = a ; return a ; } public static void main ( String [ ] args ) { test ( `` '' , new ArrayList < Integer > ( ) ) ; } } String aString = new ArrayList < Integer > ( ) ; // wo n't compile"
public class Solution { private String name ; Solution ( String name ) { this.name = name ; } private String getName ( ) { return name ; } private void sout ( ) { new Solution ( `` sout '' ) { void printName ( ) { System.out.println ( getName ( ) ) ; // the line above is an equivalent to : // System.out.println ( Solution.this.getName ) ; } } .printName ( ) ; } public static void main ( String [ ] args ) { new Solution ( `` main '' ) .sout ( ) ; } } private void sout ( ) { new Solution ( `` sout '' ) { void printName ( ) { System.out.println ( super.getName ( ) ) ; } } .printName ( ) ; }
public class WhitespaceTest { public static void main ( String [ ] args ) { int x = 0 ; char c = ( char ) x ; System.out.println ( `` c -- > '' +c+ '' < -- -this does n't print ? `` ) ; } } c -- >
< Configure id= '' mywebapp '' class= '' org.eclipse.jetty.webapp.WebAppContext '' > ... < Set name= '' classLoader '' > < New class= '' org.eclipse.jetty.webapp.CachingWebAppClassLoader '' > < Arg > < Ref refid= '' mywebapp '' / > < /Arg > < /New > < /Set > ... < /Configure >
"questionId : Stringtags : [ String ] title : Stringdescription : Stringanswernotes : [ String ] applicableJobRole : [ Intern , Full Time ] state : [ Approved , UnderReview , Obsolete ] difficultyLevel : [ Easy , Medium , Hard ] noOfTimesUsed : intcreatedBy : user"
"public class DataWrapper { private static final ConcurrentMap < String , DataWrapper > map = new ConcurrentHashMap < > ( ) ; private Data data ; private String name ; public static DataWrapper getInstance ( String name ) { DataWrapper instance = map.get ( name ) ; if ( instance == null ) { instance = new DataWrapper ( name ) ; } return instance.cloneInstance ( ) ; } private DataWrapper ( String name ) { this.name = name ; this.data = loadData ( name ) ; // A heavy method map.put ( name , this ) ; // I know } private DataWrapper cloneInstance ( ) { return new DataWrapper ( this ) ; } private DataWrapper ( DataWrapper that ) { this.name = that.name ; this.data = that.data.cloneInstance ( ) ; } } public class DataWrapper { ... public static DataWrapper getInstance ( String name ) { DataWrapper instance = map.get ( name ) ; if ( instance == null ) { instance = new DataWrapper ( name ) ; map.put ( name , instance ) ; } return instance.cloneInstance ( ) ; } private DataWrapper ( String name ) { this.name = name ; this.data = loadData ( name ) ; // A heavy method } ... } public class DataWrapper { private static final ConcurrentMap < String , DataWrapper > map = new ConcurrentHashMap < > ( ) ; private final Data data ; private final String name ; ... private DataWrapper ( String name ) { this.name = name ; this.data = loadData ( name ) ; // A heavy method map.put ( name , this ) ; // I know } ... }"
/* * @ ( # ) File.java 1.142 09/04/01
"public class ExceptionHandler implements Thread.UncaughtExceptionHandler { public static final String TAG = `` Exception handler '' ; private final Context activity ; public ExceptionHandler ( Context activity ) { this.activity = activity ; } @ Override public void uncaughtException ( @ NonNull Thread thread , @ NonNull Throwable throwable ) { Intent error = new Intent ( activity , ErrorCatcher.class ) ; activity.startActivity ( error ) ; } } @ Override protected void onCreate ( Bundle savedInstanceState ) { Log.e ( TAG , `` onRestart : Hey just created '' ) ; Thread.setDefaultUncaughtExceptionHandler ( new ExceptionHandler ( this.getApplicationContext ( ) ) ) ; // other methods and function } I/Timeline : Timeline : Activity_launch_request time:417281208 intent : Intent { cmp=com.yyy.xxx/com.yyy.xxx.Activities.Error }"
"public class UnsafeDCLFactory { private Singleton instance ; public Singleton get ( ) { if ( instance == null ) { // read 1 , check 1 synchronized ( this ) { if ( instance == null ) { // read 2 , check 2 instance = new Singleton ( ) ; // store } } } return instance ; // read 3 } }"
public class KnownRuleGoals { void record ( ) { knownParsingSet.add ( new KnownParsing ( ) ) ; } private class KnownParsing { Rule [ ] knownParsing ; KnownParsing ( ) { ... } void doWork ( ) { ... } } }
public static < T > void check ( List < T > list ) { //do general checks for ( T element : list ) { check ( element ) ; } } public static void check ( SomeType element ) { ... } public static void check ( SomeOtherType element ) { ... } public static void check ( T element ) { ... } public static void check ( List < SomeType > list ) { ... } public static void check ( List < SomeOtherType > list ) { ... }
ps -eLf
ArrayList < MyObject > myList = new ArrayList < MyObject > ( ) ; putThingsInList ( myList ) ; for ( int i = 0 ; i < myList.size ( ) ; i++ ) { doWhatsoever ( ) ; } ArrayList < MyObject > myList = new ArrayList < MyObject > ( ) ; putThingsInList ( myList ) ; int myListSize = myList.size ( ) ; for ( int i = 0 ; i < myListSize ; i++ ) { doWhatsoever ( ) ; } ArrayList < Integer > myList = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 1000000 ; i++ ) { myList.add ( i ) ; } final long myListSize = myList.size ( ) ; long sum = 0 ; long timeStarted = System.nanoTime ( ) ; for ( int i = 0 ; i < 500 ; i++ ) { for ( int j = 0 ; j < myList.size ( ) ; j++ ) { sum += j ; if ( j % 2==0 ) { myList.add ( 999999 ) ; } else { myList.remove ( 999999 ) ; } } } long timeNeeded = ( System.nanoTime ( ) - timeStarted ) /1000000 ; System.out.println ( timeNeeded ) ; System.out.println ( sum ) ;
"public BoundingBox ( Point a , Point b ) { Point [ ] points = { a , b } this ( points ) ; } public BoundingBox ( Point [ ] input ) { //do some work }"
java.lang.NullPointerException at package.IPF_Try.execute ( IPF_Try.java:76 ) called in script.scr:155at package.IPF_Block.execute ( IPF_Block.java:304 ) at package.IPF_If.execute ( IPF_If.java:105 ) called in script.scr:130at package.IPF_Block.execute ( IPF_Block.java:304 ) at package.IPF_Main.execute ( IPF_Main.java:147 ) ... java.lang.NullPointerException at package.IPF_Try.execute ( IPF_Try.java:76 ) -- - called in script.scr:155 -- -at package.IPF_Block.execute ( IPF_Block.java:304 ) at package.IPF_If.execute ( IPF_If.java:105 ) -- - called in script.scr:130 -- -at package.IPF_Block.execute ( IPF_Block.java:304 ) at package.IPF_Main.execute ( IPF_Main.java:147 ) ...
public class Main { public static void main ( String ... args ) { methodB ( thing - > Main.testRound ( thing ) ) ; // incompatible types methodB ( Main : :testRound ) ; // no problem here } static < T extends Shape > void methodB ( Func < T > function ) { } static boolean testRound ( Round thing ) { return true ; } } interface Func < T > { boolean test ( T ob ) ; } class Shape { } class Round extends Shape { } // Use a type witness.Main. < Round > methodB ( thing - > testRound ( thing ) ) ; // Make the lambda 's argument type explicit.methodB ( ( Round thing ) - > testRound ( thing ) ) ; // Cast the argument.methodB ( thing - > testRound ( ( Round ) thing ) ) ; // Store the lambda reference in a Func < Round > variable.Func < Round > lambda = thing - > testRound ( thing ) ; methodB ( lambda ) ;
"List < ProductUpdate > productUpdateList = updateStatusRepository.getProductUpdates ( ) ; Map < String , Set < String > > productUpdateMap = productUpdateList .stream ( ) .collect ( Collectors.groupingBy ( ProductUpdate : :getUpdateId , Collectors.mapping ( ProductUpdate : :getProductNo , Collectors.toSet ( ) ) ) ) ; productUpdateMap.forEach ( ( updateId , productIds ) - > { try { updateStatusRepository.setStatusProcessing ( updateId ) ; productIds.remove ( null ) ; if ( ! productIds.isEmpty ( ) ) { productProcessingService.performProcessing ( Lists.newArrayList ( productIds ) ) ; } updateStatusRepository.setStatusProcessed ( updateId ) ; } catch ( Exception e ) { // } } ) ;"
public static void main ( String [ ] args ) { int a = 1 ; int b = 2 ; System.out.println ( a+-b ) ; // results in -1 System.out.println ( a-+b ) ; // results in -1 System.out.println ( a+-+b ) ; // results in -1 System.out.println ( a-+-b ) ; // results in 3 System.out.println ( a-+-+b ) ; // results in 3 System.out.println ( a+-+-b ) ; // results in 3 System.out.println ( a-+-+-b ) ; // results in -1 System.out.println ( a+-+-+b ) ; // results in 3 } System.out.println ( a-+-b ) ; // results in 3System.out.println ( a-+-+-b ) ; // results in -1
"2017-08-02T17:10:17.046289+00:00 heroku [ web.1 ] : State changed from starting to crashed2017-08-02T17:32:02.558126+00:00 heroku [ web.1 ] : State changed from crashed to starting2017-08-02T17:32:08.592558+00:00 heroku [ web.1 ] : Starting process with command ` java $ JAVA_OPTS -jar target/rest-api-0.0.1-SNAPSHOT.jar db migrate config.yml & & java $ JAVA_OPTS -Ddw.server.connector.port=25407 -jar target/rest-api-0.0.1-SNAPSHOT.jar server config.yml ` 2017-08-02T17:32:11.191891+00:00 app [ web.1 ] : Setting JAVA_TOOL_OPTIONS defaults based on dyno size . Custom settings will override them.2017-08-02T17:32:11.196719+00:00 app [ web.1 ] : Picked up JAVA_TOOL_OPTIONS : -Xmx350m -Xss512k -Dfile.encoding=UTF-82017-08-02T17:32:14.934624+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:14,927 ] com.xxx.restapi.RESTAPIConfiguration : Dropwizard db url : unused-url2017-08-02T17:32:14.946383+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:14,945 ] com.xxx.restapi.HerokuDatabaseConfiguration : create db for url postgres : //zbmzcwisbahqdv : acbd315fe0cfef2f09f863bd917943ac65c07c91426c250e5be73f1c36c78067 @ ec2-107-22-173-160.compute-1.amazonaws.com:5432/d501u91mttif5a2017-08-02T17:32:14.955800+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:14,955 ] com.xxx.restapi.RESTAPIConfiguration : Heroku database URL = jdbc : postgresql : //ec2-107-22-173-160.compute-1.amazonaws.com:5432/d501u91mttif5a ? ssl=true & sslfactory=org.postgresql.ssl.NonValidatingFactory2017-08-02T17:32:17.728489+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:17,727 ] liquibase : Successfully acquired change log lock2017-08-02T17:32:22.267138+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:22,266 ] liquibase : Reading from public.databasechangelog2017-08-02T17:32:22.519081+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:22,518 ] liquibase : Successfully released change log lock2017-08-02T17:32:22.653060+00:00 app [ web.1 ] : Picked up JAVA_TOOL_OPTIONS : -Xmx350m -Xss512k -Dfile.encoding=UTF-82017-08-02T17:32:28.741222+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,737 ] org.eclipse.jetty.util.log : Logging initialized @ 6083ms to org.eclipse.jetty.util.log.Slf4jLog2017-08-02T17:32:28.870054+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,869 ] io.dropwizard.server.SimpleServerFactory : Registering jersey handler with root path prefix : /2017-08-02T17:32:28.892861+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,892 ] com.xxx.restapi.RESTAPIConfiguration : Dropwizard db url : unused-url2017-08-02T17:32:28.891933+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,891 ] io.dropwizard.server.SimpleServerFactory : Registering admin handler with root path prefix : /admin2017-08-02T17:32:28.894018+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,893 ] com.xxx.restapi.HerokuDatabaseConfiguration : create db for url postgres : //zbmzcwisbahqdv : acbd315fe0cfef2f09f863bd917943ac65c07c91426c250e5be73f1c36c78067 @ ec2-107-22-173-160.compute-1.amazonaws.com:5432/d501u91mttif5a2017-08-02T17:32:28.894901+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:28,894 ] com.xxx.restapi.RESTAPIConfiguration : Heroku database URL = jdbc : postgresql : //ec2-107-22-173-160.compute-1.amazonaws.com:5432/d501u91mttif5a ? ssl=true & sslfactory=org.postgresql.ssl.NonValidatingFactory2017-08-02T17:32:29.556538+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:29,556 ] org.hibernate.Version : HHH000412 : Hibernate Core { 0.0.1-SNAPSHOT } 2017-08-02T17:32:29.580604+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:29,579 ] io.dropwizard.hibernate.SessionFactoryFactory : Entity classes : [ com.xxx.restapi.model.REST , com.xxx.restapi.model.HardwareVersion ] 2017-08-02T17:32:29.558231+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:29,557 ] org.hibernate.cfg.Environment : HHH000206 : hibernate.properties not found2017-08-02T17:32:29.674259+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:29,673 ] org.hibernate.annotations.common.Version : HCANN000001 : Hibernate Commons Annotations { 5.0.1.Final } 2017-08-02T17:32:31.480300+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:31,479 ] org.hibernate.dialect.Dialect : HHH000400 : Using dialect : org.hibernate.dialect.PostgreSQL94Dialect2017-08-02T17:32:32.988141+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:32,987 ] org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl : HHH000424 : Disabling contextual LOB creation as createClob ( ) method threw error : java.lang.reflect.InvocationTargetException2017-08-02T17:32:32.991166+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:32,990 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.util.UUID ] overrides previous : org.hibernate.type.UUIDBinaryType @ b3e86d52017-08-02T17:32:34.138436+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,134 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.util.Currency ] overrides previous : org.hibernate.type.CurrencyType @ 9b474002017-08-02T17:32:34.139054+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,138 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.Duration ] overrides previous : org.hibernate.type.DurationType @ 747835f52017-08-02T17:32:34.139441+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,139 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.Instant ] overrides previous : org.hibernate.type.InstantType @ 51d0ec6f2017-08-02T17:32:34.140427+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,139 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.LocalDate ] overrides previous : org.hibernate.type.LocalDateType @ 4e0cc3342017-08-02T17:32:34.140757+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,140 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.LocalDateTime ] overrides previous : org.hibernate.type.LocalDateTimeType @ 1e12a5a62017-08-02T17:32:34.141057+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,140 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.LocalTime ] overrides previous : org.hibernate.type.LocalTimeType @ 47a7c93e2017-08-02T17:32:34.141482+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,141 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.OffsetDateTime ] overrides previous : org.hibernate.type.OffsetDateTimeType @ 6f9ab79d2017-08-02T17:32:34.142354+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,142 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.OffsetTime ] overrides previous : org.hibernate.type.OffsetTimeType @ 64ae105d2017-08-02T17:32:34.147946+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,145 ] org.hibernate.type.BasicTypeRegistry : HHH000270 : Type registration [ java.time.ZonedDateTime ] overrides previous : org.hibernate.type.ZonedDateTimeType @ 10a18e3e2017-08-02T17:32:34.778461+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,769 ] com.xxx.restapi.RESTAPIApplication : Starting REST-API app server2017-08-02T17:32:34.801376+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,801 ] io.dropwizard.server.SimpleServerFactory : Registering jersey handler with root path prefix : /2017-08-02T17:32:34.812575+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,810 ] io.dropwizard.server.SimpleServerFactory : Registering admin handler with root path prefix : /admin2017-08-02T17:32:34.822918+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:34,814 ] io.dropwizard.server.ServerFactory : Starting rest-api2017-08-02T17:32:35.950162+00:00 heroku [ web.1 ] : State changed from starting to up2017-08-02T17:32:35.870712+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:35,867 ] org.eclipse.jetty.setuid.SetUIDListener : Opened rest-api @ 69a5c6be { HTTP/1.1 , [ http/1.1 ] } { 0.0.0.0:25407 } 2017-08-02T17:32:35.870854+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:35,869 ] org.eclipse.jetty.server.Server : jetty-9.4.z-SNAPSHOT2017-08-02T17:32:36.159048+00:00 app [ web.1 ] : INFO [ 2017-08-02 17:32:36,158 ] org.eclipse.jetty.server.AbstractConnector : Started rest-api @ 69a5c6be { HTTP/1.1 , [ http/1.1 ] } { 0.0.0.0:25407 } 2017-08-02T17:32:36.159396+00:00 app [ web.1 ] : org/glassfish/jersey/spi/ScheduledThreadPoolExecutorProvider2017-08-02T17:32:36.765005+00:00 heroku [ web.1 ] : Process exited with status 12017-08-02T17:32:36.778743+00:00 heroku [ web.1 ] : State changed from up to crashed DockerfileFROM heroku/java docker-compose.ymlweb : build : . command : 'bash -c `` java $ JAVA_OPTS -jar target/rest-api-0.0.1-SNAPSHOT.jar db migrate config.yml & & java $ JAVA_OPTS -Ddw.server.connector.port= $ PORT -jar target/rest-api-0.0.1-SNAPSHOT.jar server config.yml '' ' working_dir : /app/user environment : PORT : 8080 DATABASE_URL : 'postgres : //postgres : @ herokuPostgresql:5432/postgres ' ports : - '8080:8080 ' links : - herokuPostgresqlshell : build : . command : bash working_dir : /app/user environment : PORT : 8080 DATABASE_URL : 'postgres : //postgres : @ herokuPostgresql:5432/postgres ' ports : - '8080:8080 ' links : - herokuPostgresql volumes : - ' . : /app/user'herokuPostgresql : image : postgres"
"public class User { final LocalDate lastPasswordChangeDate ; // final id , name , email , etc . } public class UserPasswordService { private SettingsRepository settingsRepository ; @ Inject public UserPasswordService ( SettingsRepository settingsRepository ) { this.settingsRepository = settingsRepository ; } public boolean passwordMustBeChanged ( User user ) { return user.lastPasswordChangeDate.plusDays ( settingsRepository.get ( ) .passwordValidIntervalInDays ) .isBefore ( LocalDate.now ( ) ) ; } } public class Settings { int passwordValidIntervalInDays ; public Settings ( int passwordValidIntervalInDays ) { this.passwordValidIntervalInDays = passwordValidIntervalInDays ; } } public class SettingsRepository { public Settings get ( ) { // load the settings from the persistent storage return new Settings ( 10 ) ; } }"
"class Processor { private final static MAX_SAVE_PERIOD = 60000 ; private final static MIN_SAVE_PERIOD = 20000 ; private final static int MAX_BUFFER = 10000 ; Arraylist < Data > dataBuffer = new Arraylist < Data > ( ) ; private long lastSave = 0 ; public Saver ( ) { new Timer ( ) .schedule ( new TimerTask ( ) { periodicSave ( ) ; } , MAX_SAVE_PERIOD , MAX_SAVE_PERIOD ) ; Runtime.getRuntime ( ) .addShutdownHook ( new Thread ( new Runnable ( ) { public void run ( ) { periodicSave ( ) ; } } ) ) ; } public synchronized void processData ( Data data ) { dataBuffer.add ( data ) ; if ( dataBuffer.size ( ) > = MAX_BUFFER ) { saveData ( ) ; } } private synchronzied void periodicSave ( ) { if ( ! dataBuffer.isEmpty ( ) ) { saveData ( ) ; } } private void saveData ( ) { if ( System.currentTimeMillis ( ) - lastSave < MIN_SAVE_PERIOD ) return ; ... lastSave = System.currentTimeMillis ( ) ; } }"
"import java.io . * ; import java.util . * ; import java.text.SimpleDateFormat ; public class DatesInYear { public static SimpleDateFormat dateFormat = new SimpleDateFormat ( `` yyyyMMdd '' ) ; public static void main ( String [ ] args ) throws java.lang.Exception { Date dt = new Date ( ) ; System.out.println ( dt ) ; List < Date > dates = printDates ( `` 20190101 '' , '' 20191231 '' ) ; Collections.reverse ( dates ) ; System.out.println ( dates.size ( ) ) ; for ( Date date : dates ) { SimpleDateFormat format1 = new SimpleDateFormat ( `` yyyyMMdd '' ) ; System.out.println ( format1.format ( date ) ) ; } } public static List < Date > printDates ( String fromDate , String toDate ) { ArrayList < Date > dates = new ArrayList < Date > ( ) ; try { Calendar fromCal = Calendar.getInstance ( ) ; fromCal.setTime ( dateFormat .parse ( fromDate ) ) ; Calendar toCal = Calendar.getInstance ( ) ; toCal.setTime ( dateFormat .parse ( toDate ) ) ; while ( ! fromCal.after ( toCal ) ) { dates.add ( fromCal.getTime ( ) ) ; fromCal.add ( Calendar.DATE , 1 ) ; } } catch ( Exception e ) { System.out.println ( e ) ; } return dates ; } }"
public class Foo { interface Bar { } void doesNotCompile ( ) { Optional.of ( new Bar ( ) { } ) .orElse ( new Bar ( ) { } ) ; } void doesNotCompile2 ( ) { final Bar bar = new Bar ( ) { } ; Optional.of ( new Bar ( ) { } ) .orElse ( bar ) ; } void compiles1 ( ) { final Bar bar = new Bar ( ) { } ; Optional.of ( bar ) .orElse ( new Bar ( ) { } ) ; } } java : incompatible types : < anonymous test.Foo.Bar > can not be converted to < anonymous test.Foo.Bar >
"native-image -- no-server -- no-fallback -H : +TraceClassInitialization -H : +PrintClassInitialization -- report-unsupported-elements-at-runtime -- initialize-at-build-time=reactor.core.publisher.Flux , reactor.core.publisher.Mono -H : ConfigurationFileDirectories=target/config -cp target/app-1.0.0-SNAPSHOT.jar com.app.AppApplication target/app Error : Unsupported features in 4 methodsDetailed message : Error : No instances of java.net.Inet4Address are allowed in the image heap as this class should be initialized at image runtime . Object has been initialized without the native-image initialization instrumentation and the stack trace ca n't be tracked.Trace : Object was reached by reading field io.netty.channel.socket.InternetProtocolFamily.localHost of constant io.netty.channel.socket.InternetProtocolFamily @ 593f1f62 reached by scanning method io.netty.resolver.dns.DnsNameResolver.preferredAddressType ( DnsNameResolver.java:481 ) Call path from entry point to io.netty.resolver.dns.DnsNameResolver.preferredAddressType ( ResolvedAddressTypes ) : at io.netty.resolver.dns.DnsNameResolver.preferredAddressType ( DnsNameResolver.java:478 ) at io.netty.resolver.dns.DnsNameResolver. < init > ( DnsNameResolver.java:436 ) at io.netty.resolver.dns.DnsNameResolverBuilder.build ( DnsNameResolverBuilder.java:473 ) at io.netty.resolver.dns.DnsAddressResolverGroup.newNameResolver ( DnsAddressResolverGroup.java:111 ) at io.netty.resolver.dns.DnsAddressResolverGroup.newResolver ( DnsAddressResolverGroup.java:91 ) at io.netty.resolver.dns.DnsAddressResolverGroup.newResolver ( DnsAddressResolverGroup.java:76 ) at io.netty.resolver.AddressResolverGroup.getResolver ( AddressResolverGroup.java:70 ) at org.redisson.cluster.ClusterConnectionManager $ 1.run ( ClusterConnectionManager.java:251 ) at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks ( RuntimeSupport.java:125 ) at com.oracle.svm.core.jdk.RuntimeSupport.executeStartupHooks ( RuntimeSupport.java:75 ) at com.oracle.svm.core.JavaMainWrapper.runCore ( JavaMainWrapper.java:141 ) at com.oracle.svm.core.JavaMainWrapper.run ( JavaMainWrapper.java:184 ) at com.oracle.svm.core.code.IsolateEnterStub.JavaMainWrapper_run_5087f5482cc9a6abc971913ece43acb471d2631b ( generated:0 ) Error : The class java.net.InetAddress has already been initialized ; it is too late to register java.net.InetAddress for build-time initialization ( from the command line ) . java.net.InetAddress has been initialized without the native-image initialization instrumentation and the stack trace ca n't be tracked . Try avoiding this conflict by avoiding to initialize the class that caused initialization of java.net.InetAddress or by not marking java.net.InetAddress for build-time initialization ."
"void function ( JNIEnv * env , jclass jc ) { jclass newExcCls = env- > FindClass ( `` java/lang/NullPointerException '' ) ; env- > ThrowNew ( newExcCls , `` ERROR '' ) ; } public class Tester { static { System.loadLibrary ( `` MyLibrary '' ) ; } private static native void function ( ) ; public static void main ( String [ ] args ) { try { function ( ) ; } catch ( Exception e ) { //is it caught ? Or what happens ? e.printStackTrace ( ) ; } } }"
"package test ; import java.util.HashMap ; public class MainCLass { public static void main ( String [ ] args ) { // init map ( assuming this code will be run only once ) HashMap < String , String > map = new HashMap < > ( ) ; map.put ( `` US_A_B '' , `` 1 '' ) ; map.put ( `` US_A_* '' , `` 2 '' ) ; map.put ( `` US_*_* '' , `` 3 '' ) ; map.put ( `` US_O_O '' , `` 4 '' ) ; map.put ( `` US_*_W '' , `` 5 '' ) ; map.put ( `` ASIA_*_* '' , `` 6 '' ) ; // now often called logic // incoming params , for this example hardcoded String reg = `` US '' ; String s1 = `` O '' ; String s2 = `` P '' ; String val = null ; val = map.get ( reg+ '' _ '' +s1+ '' _ '' +s2 ) ; if ( val == null ) { val = map.get ( reg+ '' _ '' +s1+ '' _* '' ) ; if ( val == null ) { val = map.get ( reg+ '' _ '' + '' *_ '' +s2 ) ; if ( val == null ) { val = map.get ( reg+ '' _*_* '' ) ; } } } System.out.println ( val ) ; } }"
"create table TEST_TRANS ( DESCRIPTION_2 float , AMOUNT_STR varchar ( 255 ) , DESCRIPTION varchar ( 255 ) ) UPDATE TEST_TRANS SET DESCRIPTION_2 = CAST ( AMOUNT_STR as float ) / 100WHERE DESCRIPTION ! = : DESCRIPTION Objects.requireNonNull ( getNamedParameterJdbcTemplate ( ) ) .update ( testQuery , Collections.singletonMap ( `` DESCRIPTION '' , '' AED '' ) ) ; Exception in thread `` main '' org.springframework.dao.TransientDataAccessResourceException : PreparedStatementCallback ; SQL [ UPDATE TEST_TRANS SET DESCRIPTION_2 = CAST ( AMOUNT_STR as float ) /100 WHERE DESCRIPTION ! = ? ] ; The index 1 is out of range . ; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException : The index 1 is out of range . at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate ( SQLStateSQLExceptionTranslator.java:110 ) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate ( AbstractFallbackSQLExceptionTranslator.java:72 ) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate ( AbstractFallbackSQLExceptionTranslator.java:81 ) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate ( AbstractFallbackSQLExceptionTranslator.java:81 ) at org.springframework.jdbc.core.JdbcTemplate.translateException ( JdbcTemplate.java:1442 ) at org.springframework.jdbc.core.JdbcTemplate.execute ( JdbcTemplate.java:632 ) at org.springframework.jdbc.core.JdbcTemplate.update ( JdbcTemplate.java:861 ) at org.springframework.jdbc.core.JdbcTemplate.update ( JdbcTemplate.java:882 ) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update ( NamedParameterJdbcTemplate.java:320 ) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update ( NamedParameterJdbcTemplate.java:325 ) at com.seenukarthi.so.jdbctest.repository.TestJdbcRepository.test ( TestJdbcRepository.java:32 ) at com.seenukarthi.so.jdbctest.service.TestJdbcService.testService ( TestJdbcService.java:19 ) at com.seenukarthi.so.jdbctest.Main.main ( Main.java:12 ) Caused by : com.microsoft.sqlserver.jdbc.SQLServerException : The index 1 is out of range . at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError ( SQLServerException.java:228 ) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.setterGetParam ( SQLServerPreparedStatement.java:1124 ) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.setValue ( SQLServerPreparedStatement.java:1138 ) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.setString ( SQLServerPreparedStatement.java:1683 ) at org.springframework.jdbc.core.StatementCreatorUtils.setValue ( StatementCreatorUtils.java:400 ) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal ( StatementCreatorUtils.java:232 ) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue ( StatementCreatorUtils.java:147 ) at org.springframework.jdbc.core.PreparedStatementCreatorFactory $ PreparedStatementCreatorImpl.setValues ( PreparedStatementCreatorFactory.java:286 ) at org.springframework.jdbc.core.PreparedStatementCreatorFactory $ PreparedStatementCreatorImpl.createPreparedStatement ( PreparedStatementCreatorFactory.java:244 ) at org.springframework.jdbc.core.JdbcTemplate.execute ( JdbcTemplate.java:614 ) ... 7 more"
class Foo { Foo ( ) { Never.Do ( this ) ; } }
"static List < List < Integer > > problem1Ans = new ArrayList < List < Integer > > ( ) ; public static void problem1 ( int numSteps ) { int [ ] steps = { 1,2,3 } ; problem1_rec ( new ArrayList < Integer > ( ) , numSteps , steps ) ; } public static void problem1_rec ( List < Integer > sequence , int numSteps , int [ ] steps ) { if ( problem1_sum_seq ( sequence ) > numSteps ) { return ; } if ( problem1_sum_seq ( sequence ) == numSteps ) { problem1Ans.add ( new ArrayList < Integer > ( sequence ) ) ; return ; } for ( int stepSize : steps ) { sequence.add ( stepSize ) ; problem1_rec ( sequence , numSteps , steps ) ; sequence.remove ( sequence.size ( ) -1 ) ; } } public static int problem1_sum_seq ( List < Integer > sequence ) { int sum = 0 ; for ( int i : sequence ) { sum += i ; } return sum ; } public static void main ( String [ ] args ) { problem1 ( 10 ) ; System.out.println ( problem1Ans.size ( ) ) ; }"
"var url = new File ( `` myjar.jar '' ) .toURI ( ) .toURL ( ) ; var cl = new URLClassLoader ( new URL [ ] { url } , getClass ( ) .getClassLoader ( ) ) ; var services = ServiceLoader.load ( MyService.class , cl ) ; for ( var service : services ) { ... }"
4 7 2 9 2 9 8 11 8 11 8 11 8 11
"public String getProcessInstanceID ( ProcessEngine processEngine , FlowControl flowcontrol , String processDefinitionID ) { String processInstanceID = null ; log.debug ( `` Entering method - getProcessInstanceID '' ) ; ProcessDefinitionQuery pdq = processEngine.getRepositoryService ( ) .createProcessDefinitionQuery ( ) ; pdq.deploymentId ( processDefinitionID ) ; ProcessDefinition procDef = pdq.uniqueResult ( ) ; if ( null == procDef ) { log.error ( `` Process Definition could not be found for the deployment ID : `` + processDefinitionID ) ; } Map < String , Object > variables = new HashMap < String , Object > ( ) ; variables.put ( `` flowcontrol '' , flowcontrol ) ; ProcessInstance processInstance = processEngine.getExecutionService ( ) .startProcessInstanceByKey ( procDef.getKey ( ) , variables ) ; log.debug ( `` Process Instance ID : '' + processInstance.getId ( ) ) ; processInstanceID = processInstance.getId ( ) ; log.debug ( `` Exiting method - getProcessInstanceID '' ) ; return processInstanceID ; }"
"//from ` onCreate ` methodButton buttonScan = ( Button ) findViewById ( R.id.buttonScan ) ; WifiManager wifi = ( WifiManager ) getSystemService ( Context.WIFI_SERVICE ) ; ListView lv = ( ListView ) findViewById ( R.id.list ) ; lv.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > arg0 , View arg1 , int arg2 , long arg3 ) { connectToWifi ( arg2 ) ; } } ) ; lv.setOnItemLongClickListener ( new AdapterView.OnItemLongClickListener ( ) { @ Override public boolean onItemLongClick ( AdapterView < ? > arg0 , View arg1 , int arg2 , long arg3 ) { return true ; } } ) ; if ( ! wifi.isWifiEnabled ( ) ) { Toast.makeText ( getApplicationContext ( ) , `` Enabling Wifi '' , Toast.LENGTH_LONG ) .show ( ) ; wifi.setWifiEnabled ( true ) ; } SimpleAdapter adapter = new SimpleAdapter ( NetworkCalibration.this , arraylist , R.layout.wifi_list_row , new String [ ] { ITEM_KEY } , new int [ ] { R.id.listValue } ) ; lv.setAdapter ( adapter ) ; registerReceiver ( new BroadcastReceiver ( ) { @ Override public void onReceive ( Context c , Intent intent ) { results = wifi.getScanResults ( ) ; size = results.size ( ) ; } } , new IntentFilter ( WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; Selecter ( hNum , vNum ) ; buttonScan.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { noob = false ; SharedPreferences settings = getSharedPreferences ( PREFS_NAME , 0 ) ; SharedPreferences.Editor editor = settings.edit ( ) ; editor.putBoolean ( `` Newbie '' , noob ) ; editor.commit ( ) ; arraylist.clear ( ) ; wifi.startScan ( ) ; Toast.makeText ( getApplicationContext ( ) , `` Scanning ... '' , Toast.LENGTH_SHORT ) .show ( ) ; try { size = size - 1 ; while ( size > = 0 ) { HashMap < String , String > item = new HashMap < String , String > ( ) ; item.put ( ITEM_KEY , results.get ( size ) .SSID.toString ( ) + results.get ( size ) .capabilities.toString ( ) ) ; arraylist.add ( item ) ; size -- ; adapter.notifyDataSetChanged ( ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ) ; public void finallyConnect ( String checkPassword , int position ) { String networkSSID = results.get ( position ) .SSID ; WifiConfiguration wifiConfiguration = new WifiConfiguration ( ) ; wifiConfiguration.SSID = `` \ '' '' + networkSSID + '' \ '' '' ; wifiConfiguration.preSharedKey = '' \ '' '' + checkPassword + '' \ '' '' ; WifiManager wifiManager = ( WifiManager ) getSystemService ( WIFI_SERVICE ) ; int netId = wifiManager.addNetwork ( wifiConfiguration ) ; if ( ! wifiManager.isWifiEnabled ( ) ) { // -- -wifi is turned on -- - // -- -disconnect it first -- - wifiManager.setWifiEnabled ( true ) ; } wifiManager.enableNetwork ( netId , true ) ; wifiManager.createWifiLock ( WifiManager.WIFI_MODE_FULL , networkSSID ) ; wifiManager.reconnect ( ) ; wifiManager.saveConfiguration ( ) ; /* WifiConfiguration wifiConfig = new WifiConfiguration ( ) ; wifiConfig.SSID = String.format ( `` \ '' % s\ '' '' , networkSSID ) ; wifiConfig.preSharedKey = String.format ( `` \ '' % s\ '' '' , networkPass ) ; // remember id int netId = wifi.addNetwork ( wifiConfig ) ; wifi.disconnect ( ) ; wifi.enableNetwork ( netId , true ) ; wifi.reconnect ( ) ; WifiConfiguration conf = new WifiConfiguration ( ) ; conf.SSID = `` \ '' \ '' '' + networkSSID + `` \ '' \ '' '' ; conf.preSharedKey = `` \ '' '' + networkPass + `` \ '' '' ; wifi.addNetwork ( conf ) ; */ SharedPreferences settings = getSharedPreferences ( PREFS_NAME , 0 ) ; SharedPreferences.Editor editor = settings.edit ( ) ; editor.putBoolean ( `` Connected '' , isConnected ) ; editor.commit ( ) ; } private void connectToWifi ( final int position ) { final Dialog dialog = new Dialog ( context ) ; dialog.setContentView ( R.layout.wifi_connect ) ; dialog.setTitle ( `` Connect to Network '' ) ; TextView textSSID = ( TextView ) dialog.findViewById ( R.id.textSSID1 ) ; TextView textBSSID = ( TextView ) dialog.findViewById ( R.id.textBSSID1 ) ; TextView capabilities = ( TextView ) dialog.findViewById ( R.id.textCapabilities ) ; Button dialogButton = ( Button ) dialog.findViewById ( R.id.okButton ) ; pass = ( EditText ) dialog.findViewById ( R.id.textPassword ) ; pass.requestFocus ( ) ; InputMethodManager inputMethodManager = ( InputMethodManager ) getSystemService ( Context.INPUT_METHOD_SERVICE ) ; inputMethodManager.showSoftInput ( pass , InputMethodManager.SHOW_IMPLICIT ) ; textSSID.setText ( results.get ( position ) .SSID ) ; textBSSID.setText ( results.get ( position ) .BSSID ) ; capabilities.setText ( results.get ( position ) .capabilities ) ; // if button is clicked , connect to the network ; dialogButton.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { checkPassword = pass.getText ( ) .toString ( ) ; finallyConnect ( checkPassword , position ) ; statusText.setText ( `` Connecting ... '' ) ; statusText.setTextColor ( Color.parseColor ( `` # 000000 '' ) ) ; CheckConnection ( ) ; dialog.dismiss ( ) ; } } ) ; dialog.show ( ) ; }"
//Write the output of this program : public static void method ( Integer i ) { System.out.println ( `` Integer '' ) ; } public static void method ( short i ) { System.out.println ( `` short '' ) ; } public static void method ( long i ) { System.out.println ( `` long '' ) ; } // ... public static void main ( String [ ] args ) { method ( 10 ) ; } //ANSWER : long
"Benchmark Mode Cnt Score Error UnitsVarHandleBenchmark.atomic thrpt 5 448041037.223 ± 36448840.301 ops/sVarHandleBenchmark.atomicArray thrpt 5 453785339.203 ± 64528885.282 ops/sVarHandleBenchmark.fieldUpdater thrpt 5 459802512.169 ± 52293792.737 ops/sVarHandleBenchmark.varhandle thrpt 5 136482396.440 ± 9439041.030 ops/s > java -versionopenjdk version `` 11.0.2 '' 2019-01-15OpenJDK Runtime Environment AdoptOpenJDK ( build 11.0.2+9 ) OpenJDK 64-Bit Server VM AdoptOpenJDK ( build 11.0.2+9 , mixed mode ) import org.openjdk.jmh.annotations.Benchmark ; import org.openjdk.jmh.annotations.Fork ; import org.openjdk.jmh.annotations.Measurement ; import org.openjdk.jmh.annotations.Scope ; import org.openjdk.jmh.annotations.State ; import org.openjdk.jmh.annotations.Threads ; import org.openjdk.jmh.annotations.Warmup ; import org.openjdk.jmh.infra.Blackhole ; import java.lang.invoke.MethodHandles ; import java.lang.invoke.VarHandle ; import java.util.concurrent.atomic.AtomicInteger ; import java.util.concurrent.atomic.AtomicIntegerArray ; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater ; @ State ( Scope.Thread ) @ Fork ( value = 1 , jvmArgs = { `` -Xms256m '' , `` -Xmx256m '' , `` -XX : +UseG1GC '' } ) @ Warmup ( iterations = 3 , time = 3 ) @ Measurement ( iterations = 5 , time = 5 ) @ Threads ( 4 ) public class VarHandleBenchmark { // array option private final AtomicIntegerArray array = new AtomicIntegerArray ( 1 ) ; // vanilla AtomicInteger private final AtomicInteger counter = new AtomicInteger ( ) ; // count field and its VarHandle private volatile int count ; private static final VarHandle COUNT ; // count2 field and its field updater private volatile int count2 ; private static final AtomicIntegerFieldUpdater < VarHandleBenchmark > COUNT2 ; static { try { COUNT = MethodHandles.lookup ( ) .findVarHandle ( VarHandleBenchmark.class , `` count '' , Integer.TYPE ) ; COUNT2 = AtomicIntegerFieldUpdater.newUpdater ( VarHandleBenchmark.class , `` count2 '' ) ; } catch ( ReflectiveOperationException e ) { throw new AssertionError ( e ) ; } } @ Benchmark public void atomic ( Blackhole bh ) { bh.consume ( counter.getAndAdd ( 1 ) ) ; } @ Benchmark public void atomicArray ( Blackhole bh ) { bh.consume ( array.getAndAdd ( 0 , 1 ) ) ; } @ Benchmark public void varhandle ( Blackhole bh ) { bh.consume ( COUNT.getAndAdd ( this , 1 ) ) ; } @ Benchmark public void fieldUpdater ( Blackhole bh ) { bh.consume ( COUNT2.getAndAdd ( this , 1 ) ) ; } } Benchmark Mode Cnt Score Error UnitsVarHandleBenchmark.atomic thrpt 5 464045527.470 ± 42337922.645 ops/sVarHandleBenchmark.atomicArray thrpt 5 465700610.882 ± 18116770.557 ops/sVarHandleBenchmark.fieldUpdater thrpt 5 473968453.591 ± 49859839.498 ops/sVarHandleBenchmark.varhandle thrpt 5 429737922.796 ± 41629104.677 ops/s"
private int sum = 0 ; private void calculate ( ) { for ( int i = 0 ; i < 2000000 ; i++ ) { if ( i.isPrime ( ) ) { sum = sum + i ; } } sysout ( sum ) }
"private static void method1 ( byte [ ] bytes ) { byte previousByte = bytes [ 0 ] ; bytes [ 0 ] = ( byte ) ( ( ( bytes [ 0 ] & 0xff ) > > 1 ) | ( ( bytes [ bytes.length - 1 ] & 0xff ) < < 7 ) ) ; for ( int i = 1 ; i < bytes.length ; i++ ) { byte tmp = bytes [ i ] ; bytes [ i ] = ( byte ) ( ( ( bytes [ i ] & 0xff ) > > 1 ) | ( ( previousByte & 0xff ) < < 7 ) ) ; previousByte = tmp ; } } private static void method2 ( byte [ ] bytes ) { byte lastByte = bytes [ bytes.length-1 ] ; for ( int i = bytes.length-1 ; i > 0 ; i -- ) { bytes [ i ] = ( byte ) ( ( ( bytes [ i ] & 0xff ) > > 1 ) | ( ( bytes [ i-1 ] & 0xff ) < < 7 ) ) ; } bytes [ 0 ] = ( byte ) ( ( ( bytes [ 0 ] & 0xff ) > > 1 ) | ( ( lastByte & 0xff ) < < 7 ) ) ; } method1 average : 4s 572msmethod2 average : 5s 630ms import java.math.BigInteger ; public class BitShiftTests { public static void main ( String [ ] args ) { int numOfTests = 20 ; int numberOfShifts = 3000 ; byte [ ] numbers = new byte [ 1000000 ] ; for ( int i = 0 ; i < numbers.length ; i++ ) { numbers [ i ] = ( byte ) ( i % 255 ) ; } System.out.println ( `` Testing method1 ... '' ) ; BigInteger method1Sum = new BigInteger ( `` 00000000 '' , 2 ) ; for ( int i = 1 ; i < = numOfTests ; i++ ) { long total = 0L ; for ( int j = 0 ; j < numberOfShifts ; j++ ) { long startTime = System.nanoTime ( ) ; method1 ( numbers ) ; long endTime = System.nanoTime ( ) ; total = total + ( endTime - startTime ) ; } method1Sum = method1Sum.add ( new BigInteger ( Long.toString ( total ) , 10 ) ) ; System.out.println ( String.format ( `` % -2d : % s '' , i , getTime ( total ) ) ) ; } System.out.println ( `` Testing method2 ... '' ) ; BigInteger method2Sum = new BigInteger ( `` 00000000 '' , 2 ) ; for ( int i = 1 ; i < = numOfTests ; i++ ) { long total = 0L ; for ( int j = 0 ; j < numberOfShifts ; j++ ) { long startTime = System.nanoTime ( ) ; method2 ( numbers ) ; long endTime = System.nanoTime ( ) ; total = total + ( endTime - startTime ) ; } method2Sum = method2Sum.add ( new BigInteger ( Long.toString ( total ) , 10 ) ) ; System.out.println ( String.format ( `` % -2d : % s '' , i , getTime ( total ) ) ) ; } System.out.println ( `` method1 average : `` + getTime ( method1Sum.longValue ( ) / numOfTests ) ) ; System.out.println ( `` method2 average : `` + getTime ( method2Sum.longValue ( ) / numOfTests ) ) ; } private static void method1 ( byte [ ] bytes ) { byte previousByte = bytes [ 0 ] ; bytes [ 0 ] = ( byte ) ( ( ( bytes [ 0 ] & 0xff ) > > 1 ) | ( ( bytes [ bytes.length - 1 ] & 0xff ) < < 7 ) ) ; for ( int i = 1 ; i < bytes.length ; i++ ) { byte tmp = bytes [ i ] ; bytes [ i ] = ( byte ) ( ( ( bytes [ i ] & 0xff ) > > 1 ) | ( ( previousByte & 0xff ) < < 7 ) ) ; previousByte = tmp ; } } private static void method2 ( byte [ ] bytes ) { byte lastByte = bytes [ bytes.length-1 ] ; for ( int i = bytes.length-1 ; i > 0 ; i -- ) { bytes [ i ] = ( byte ) ( ( ( bytes [ i ] & 0xff ) > > 1 ) | ( ( bytes [ i-1 ] & 0xff ) < < 7 ) ) ; } bytes [ 0 ] = ( byte ) ( ( ( bytes [ 0 ] & 0xff ) > > 1 ) | ( ( lastByte & 0xff ) < < 7 ) ) ; } private static String getTime ( long nanoSecs ) { int minutes = ( int ) ( nanoSecs / 60000000000.0 ) ; int seconds = ( int ) ( nanoSecs / 1000000000.0 ) - ( minutes * 60 ) ; int millisecs = ( int ) ( ( ( nanoSecs / 1000000000.0 ) - ( seconds + minutes * 60 ) ) * 1000 ) ; int nanosecs = ( int ) nanoSecs - ( millisecs * 1000000000 ) ; if ( minutes == 0 & & seconds == 0 & & millisecs == 0 ) { return nanosecs + `` ns '' ; } if ( minutes == 0 & & seconds == 0 ) { return millisecs + `` ms '' ; } if ( minutes == 0 & & millisecs == 0 ) { return seconds + `` s '' ; } if ( seconds == 0 & & millisecs == 0 ) { return minutes + `` min '' ; } if ( minutes == 0 ) { return seconds + `` s `` + millisecs + `` ms '' ; } if ( seconds == 0 ) { return minutes + `` min `` + millisecs + `` ms '' ; } if ( millisecs == 0 ) { return minutes + `` min `` + seconds + `` s '' ; } return minutes + `` min `` + seconds + `` s `` + millisecs + `` ms '' ; } }"
"Set < String > getFields ( Path xml ) { final Set < String > fields = new HashSet < > ( ) ; for ( ... ) { ... fields.add ( ... ) ; ... } return fields ; } void scan ( ) { final SortedSet < Path > files = new TreeSet < > ( ) ; final Path root = new File ( `` ... .. '' ) .toPath ( ) ; final BiPredicate < Path , BasicFileAttributes > pred = ( p , a ) - > p.toString ( ) .toLowerCase ( ) .endsWith ( `` .xml '' ) ; Files.find ( root , 1 , pred ) .forEach ( files : :add ) ; final SortedSet < String > fields = new TreeSet < > ( ) ; files .stream ( ) .parallel ( ) .map ( this : :getFields ) .forEach ( s - > fields.addAll ( s ) ) ; // Do something with fields ... } Stream < String > getFields ( Path xml ) { final Set < String > fields = new HashSet < > ( ) ; for ( ... ) { ... fields.add ( ... ) ; ... } return fields.stream ( ) ; // returns a stream to ease integration } void scan ( ) { final Path root = new File ( `` ... .. '' ) .toPath ( ) ; final BiPredicate < Path , BasicFileAttributes > pred = ( p , a ) - > p.toString ( ) .toLowerCase ( ) .endsWith ( `` .xml '' ) ; final SortedSet < Path > files = Files .find ( root , 1 , pred ) .collect ( Collectors.toCollection ( TreeSet : :new ) ) ; final SortedSet < String > fields = files .stream ( ) .parallel ( ) .flatMap ( this : :getFields ) .collect ( Collectors.toCollection ( TreeSet : :new ) ) ; // Do something with fields ... }"
"public Square ( float x , float y , float sl ) { GL11.glColor3f ( 0.5F , 0.0F , 0.7F ) ; glBegin ( GL11.GL_QUADS ) ; glVertex2f ( x , y ) ; glVertex2f ( x , y+sl ) ; glVertex2f ( x+sl , y+sl ) ; glVertex2f ( x+sl , y ) ; glEnd ( ) ; } glMatrixMode ( GL_PROJECTION ) ; glLoadIdentity ( ) ; // Resets any previous projection matrices glOrtho ( 0 , 640 , 0 , 480 , 1 , -1 ) ; glMatrixMode ( GL_MODELVIEW ) ;"
"public class ChooseTablePanel extends GamePanel { TableAdapter adapter ; public ChooseTablePanel ( Context context , GamePanel nextPanel , GamePanel failurePanel ) { super ( context , nextPanel , failurePanel ) ; initialize ( ) ; } public ChooseTablePanel ( Context context , AttributeSet attrs , GamePanel nextPanel , GamePanel failurePanel ) { super ( context , attrs , nextPanel , failurePanel ) ; initialize ( ) ; } private void initialize ( ) { adapter = new TableAdapter ( getContext ( ) ) ; adapter.setTables ( new int [ ] { 5,4,3,2,1,6 } ) ; GridView gridView = new GridView ( getContext ( ) ) ; gridView.setAdapter ( adapter ) ; gridView.setNumColumns ( adapter.getCount ( ) /3 ) ; this.addView ( gridView ) ; this.invalidate ( ) ; } class TableAdapter extends BaseAdapter { private Context context ; private TableView [ ] tables ; public TableAdapter ( Context context ) { this.context = context ; } public void setTables ( int [ ] tables ) { this.tables = new TableView [ tables.length ] ; for ( int i = 0 ; i < tables.length ; i++ ) { this.tables [ i ] = new TableView ( tables [ i ] , context ) ; } } public int getCount ( ) { return tables.length ; } public Object getItem ( int position ) { return tables [ position ] ; } public long getItemId ( int position ) { // TODO Auto-generated method stub return 0 ; } public View getView ( int position , View convertView , ViewGroup parent ) { TableView tableView ; if ( convertView == null ) { // if it 's not recycled , initialize some attributes tableView = new TableView ( 1 , this.context ) ; tableView.setLayoutParams ( new GridView.LayoutParams ( 85 , 85 ) ) ; tableView.setPadding ( 8 , 8 , 8 , 8 ) ; } else { tableView = ( TableView ) convertView ; } tableView.invalidate ( ) ; return tableView ; } } class TableView extends View { private int seats ; public TableView ( int Seats , Context context ) { super ( context ) ; this.seats = Seats ; if ( seats < 1 ) { throw new IllegalArgumentException ( `` Number of seats must be greater than one . `` ) ; } } public int getSeats ( ) { return seats ; } @ Override protected void onDraw ( Canvas canvas ) { int tableWidth = canvas.getWidth ( ) / 2 ; ShapeDrawable tableShape = new ShapeDrawable ( new OvalShape ( ) ) ; tableShape.setBounds ( canvas.getWidth ( ) /2 - tableWidth/2 , canvas.getHeight ( ) /2 - tableWidth/2 , canvas.getWidth ( ) /2 + tableWidth/2 , canvas.getHeight ( ) /2 + tableWidth/2 ) ; tableShape.draw ( canvas ) ; canvas.drawText ( seats + `` '' , 0 , 0 , new Paint ( ) ) ; } } }"
package test ; import java.util.concurrent.ExecutorService ; import java.util.concurrent.Executors ; public class MainClass { public static void main ( String args [ ] ) { ExecutorService xMLService = Executors.newFixedThreadPool ( 1 ) ; xMLService.execute ( new XMLProcessor ( ) ) ; ExecutorService cacheService = Executors.newFixedThreadPool ( 1 ) ; cacheService.execute ( new CacheProcessor ( ) ) ; ExecutorService mdlService = Executors.newFixedThreadPool ( 1 ) ; mdlService.execute ( new MDLProcessor ( ) ) ; xMLService.shutdown ( ) ; cacheService.shutdown ( ) ; mDLService.shutdown ( ) ; } }
public class Test1 { public static void main ( String [ ] args ) { System.out.println ( `` '' .split ( `` ; '' ) .length ) ; //1 System.out.println ( `` ; '' .split ( `` ; '' ) .length ) ; //0 } }
Predicate < ? super Integer > isGreaterThanZero = num - > num.intValue ( ) > 0 ; isGreaterThanZero.test ( new Integer ( 2 ) ) ; Predicate < ? extends Number > isGreaterThanZero = num - > num.intValue ( ) > 0 ;
"public abstract class AbstractHashable { /** List of fields used for comparison . */ private final Object [ ] fields ; /** Precomputed hash . */ private final int hash ; /** * Constructor to be invoked by subclasses . * @ param fields list of fields used for comparison between objects of this * class , they must be in constant number for each class */ protected AbstractHashable ( Object ... fields ) { this.fields = fields ; hash = 31 * getClass ( ) .hashCode ( ) + Objects.hash ( fields ) ; } @ Override public boolean equals ( Object obj ) { if ( obj == this ) { return true ; } if ( obj == null || ! getClass ( ) .equals ( obj.getClass ( ) ) ) { return false ; } AbstractHashable other = ( AbstractHashable ) obj ; if ( fields.length ! = other.fields.length ) { throw new UnsupportedOperationException ( `` objects of same class must have the same number of fields '' ) ; } for ( int i=0 ; i < fields.length ; i++ ) { if ( ! fields [ i ] .equals ( other.fields [ i ] ) ) { return false ; } } return true ; } @ Override public int hashCode ( ) { return hash ; } } public class SomeObject extends AbstractHashable { // both Foo and Bar have no mutable state private final Foo foo ; private final Bar bar ; public SomeObject ( Foo foo , Bar bar ) { super ( foo , bar ) ; this.foo = Objects.requireNonNull ( foo ) ; this.bar = bar ; // null supported } // other methods , no equals or hashCode needed }"
"lock = ... CompletionStage stage = lock.lockRead ( ) ; stage.thenAccept ( r - > { doSomething ( ) ; r.release ( ) ; } ) ; CompletionStage stage = lock.tryLockWrite ( 10 , TimeUnit.SECONDS ) ; stage.handle ( callback ) ;"
"public class ObjectUtility { public static void main ( String [ ] args ) { System.out.println ( castToType ( 10 , new HashMap < Integer , Integer > ( ) ) ) ; } private static < V , T > T castToType ( V value , T type ) { return ( T ) value ; } } System.out.println ( castToType ( 10 , new HashMap < Integer , Integer > ( ) ) .getClass ( ) ) ; Object o = castToType ( 10 , new HashMap < Integer , Integer > ( ) ) ; System.out.println ( o.getClass ( ) ) ; openjdk version `` 1.7.0_181 '' OpenJDK Runtime Environment ( Zulu 7.23.0.1-macosx ) ( build 1.7.0_181-b01 ) OpenJDK 64-Bit Server VM ( Zulu 7.23.0.1-macosx ) ( build 24.181-b01 , mixed mode )"
"public List < MyObject > convert ( List < String > myStrings ) { List < MyObject > myObjects = new ArrayList < MyObject > ( myStrings.size ( ) ) ; Integer i = 0 ; for ( String string : myStrings ) { MyObject myObject = new myObject ( i , string ) ; myObjects.add ( object ) ; i++ ; } return myObjects ; }"
"java.lang.ClassCastException : com.ervacon.bitemporal.AddressSet can not be cast to java.util.Collection /* * ( c ) Copyright Ervacon 2016 . * All Rights Reserved . */package com.ervacon.bitemporal ; import java.io.Serializable ; import java.util.Collection ; import java.util.LinkedList ; public class Person implements Serializable { private Long id ; private String name ; private Collection < BitemporalWrapper < AddressSet > > addresses = new LinkedList < > ( ) ; private Collection < BitemporalWrapper < Boolean > > alive = new LinkedList < > ( ) ; /** * For Hibernate . */ @ SuppressWarnings ( `` unused '' ) private Person ( ) { } public Person ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( `` Name is required '' ) ; } this.name = name ; } public Long getId ( ) { return id ; } public String getName ( ) { return name ; } public WrappedBitemporalProperty < AddressSet > addresses ( ) { return new WrappedBitemporalProperty < > ( addresses ) ; } public WrappedBitemporalProperty < Boolean > alive ( ) { return new WrappedBitemporalProperty < > ( alive ) ; } @ Override public String toString ( ) { return getName ( ) ; } } /* * ( c ) Copyright Ervacon 2016 . * All Rights Reserved . */package com.ervacon.bitemporal ; import java.io.Serializable ; public class Address implements Serializable { private String line1 ; private String line2 ; private String line3 ; private long id ; /** * For Hibernate . Address.java*/ @ SuppressWarnings ( `` unused '' ) private Address ( ) { } public Address ( String line1 , String line2 , String line3 ) { this.line1 = line1 ; this.line2 = line2 ; this.line3 = line3 ; } public String getLine1 ( ) { return line1 ; } public String getLine2 ( ) { return line2 ; } public String getLine3 ( ) { return line3 ; } @ Override public boolean equals ( Object obj ) { if ( obj == this ) { return true ; } if ( obj instanceof Address ) { Address other = ( Address ) obj ; return other.line1.equals ( this.line1 ) & & other.line2.equals ( this.line2 ) & & other.line3.equals ( this.line3 ) ; } return false ; } @ Override public int hashCode ( ) { return this.line1.hashCode ( ) + this.line2.hashCode ( ) + this.line3.hashCode ( ) ; } @ Override public String toString ( ) { return this.line1 + `` `` + line2 + `` `` + line3 ; } public long getId ( ) { return id ; } public void setId ( long id ) { this.id = id ; } } package com.ervacon.bitemporal ; import java.io.Serializable ; import java.util.Set ; public class AddressSet implements Serializable { private List < Address > addressSet ; private long id ; private AddressSet ( ) { } public AddressSet ( List < Address > a ) { this.addressSet = a ; } public List < Address > getAddressSet ( ) { return addressSet ; } public void setAddressSet ( List < Address > addressSet ) { this.addressSet = addressSet ; } } < ? xml version= '' 1.0 '' ? > < ! DOCTYPE hibernate-mapping PUBLIC `` -//Hibernate/Hibernate Mapping DTD 3.0//EN '' `` http : //hibernate.sourceforge.net/hibernate-mapping-3.0.dtd '' > < hibernate-mapping default-access= '' field '' > < class name= '' com.ervacon.bitemporal.BitemporalWrapper '' entity-name= '' AddressSet '' > < id name= '' id '' type= '' long '' > < generator class= '' native '' / > < /id > < bag name= '' value '' > < key column= '' addressSet_id '' / > < one-to-many class= '' com.ervacon.bitemporal.Address '' / > < /bag > < property name= '' validityInterval '' type= '' com.ervacon.bitemporal.support.PersistentInterval '' > < column name= '' validityStart '' / > < column name= '' validityEnd '' / > < /property > < property name= '' recordInterval '' type= '' com.ervacon.bitemporal.support.PersistentInterval '' > < column name= '' recordStart '' / > < column name= '' recordEnd '' / > < /property > < /class > < class name= '' com.ervacon.bitemporal.Person '' > < id name= '' id '' type= '' long '' > < generator class= '' native '' / > < /id > < property name= '' name '' / > < ! -- < bag name= '' address '' cascade= '' all-delete-orphan '' > < key column= '' person_id '' not-null= '' true '' update= '' false '' / > < one-to-many entity-name= '' Address '' / > < /bag > -- > < bag name= '' addresses '' cascade= '' all-delete-orphan '' > < key column= '' person_id '' not-null= '' true '' update= '' false '' / > < one-to-many entity-name= '' AddressSet '' / > < /bag > < bag name= '' alive '' cascade= '' all-delete-orphan '' > < key column= '' person_id '' not-null= '' true '' update= '' false '' / > < one-to-many entity-name= '' Alive '' / > < /bag > < /class > < class name= '' com.ervacon.bitemporal.Address '' > < id name= '' id '' type= '' long '' > < generator class= '' native '' / > < /id > < property name= '' line1 '' / > < property name= '' line2 '' / > < property name= '' line3 '' / > < /class > < class name= '' com.ervacon.bitemporal.BitemporalWrapper '' entity-name= '' Alive '' > < id name= '' id '' type= '' long '' > < generator class= '' native '' / > < /id > < property name= '' value '' type= '' boolean '' / > < property name= '' validityInterval '' type= '' com.ervacon.bitemporal.support.PersistentInterval '' > < column name= '' validityStart '' / > < column name= '' validityEnd '' / > < /property > < property name= '' recordInterval '' type= '' com.ervacon.bitemporal.support.PersistentInterval '' > < column name= '' recordStart '' / > < column name= '' recordEnd '' / > < /property > < /class > < /hibernate-mapping > package com.ervacon.bitemporal ; import java.util.ArrayList ; import java.util.List ; import org.hibernate.HibernateException ; import org.hibernate.Session ; import org.hibernate.SessionFactory ; import org.hibernate.cfg.Configuration ; import org.junit.Before ; import org.junit.Test ; public class HibernateTest { private SessionFactory sessionFactory ; @ Before public void setUp ( ) { System.err.println ( `` Before '' ) ; try { sessionFactory = new Configuration ( ) .configure ( ) .buildSessionFactory ( ) ; } catch ( HibernateException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } // @ After public void tearDown ( ) throws Exception { sessionFactory.close ( ) ; TimeUtils.clearReference ( ) ; } @ Test public void testPersistence ( ) { System.err.println ( `` Testing '' ) ; Session session = sessionFactory.openSession ( ) ; session.beginTransaction ( ) ; TimeUtils.setReference ( TimeUtils.day ( 4 , 4 , 1975 ) ) ; Person johnDoe = new Person ( `` John Doe '' ) ; johnDoe.alive ( ) .set ( true , TimeUtils.from ( TimeUtils.day ( 3 , 4 , 1975 ) ) ) ; AddressSet addressSet = new AddressSet ( new ArrayList < > ( ) ) ; List < Address > addressList1 = new ArrayList < > ( ) ; addressList1.add ( new Address ( `` Address1.1 '' , `` '' , `` '' ) ) ; addressSet.setAddressSet ( addressList1 ) ; johnDoe.addresses ( ) .set ( addressSet , TimeUtils.from ( TimeUtils.day ( 3 , 4 , 1975 ) ) ) ; AddressSet addressSet2 = new AddressSet ( new ArrayList < > ( ) ) ; List < Address > addressList2 = new ArrayList < > ( ) ; addressList2.add ( new Address ( `` Address2.1 '' , `` '' , `` '' ) ) ; addressSet2.setAddressSet ( addressList2 ) ; johnDoe.addresses ( ) .set ( addressSet2 , TimeUtils.from ( TimeUtils.day ( 3 , 4 , 1976 ) ) ) ; try { session.save ( johnDoe ) ; session.getTransaction ( ) .commit ( ) ; session.close ( ) ; } catch ( Exception e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } java.lang.ClassCastException : com.ervacon.bitemporal.AddressSet can not be cast to java.util.Collection at org.hibernate.type.BagType.wrap ( BagType.java:35 ) at org.hibernate.event.internal.WrapVisitor.processArrayOrNewCollection ( WrapVisitor.java:91 ) at org.hibernate.event.internal.WrapVisitor.processCollection ( WrapVisitor.java:56 ) at org.hibernate.event.internal.AbstractVisitor.processValue ( AbstractVisitor.java:104 ) at org.hibernate.event.internal.WrapVisitor.processValue ( WrapVisitor.java:108 ) at org.hibernate.event.internal.AbstractVisitor.processEntityPropertyValues ( AbstractVisitor.java:59 ) at org.hibernate.event.internal.AbstractSaveEventListener.visitCollectionsBeforeSave ( AbstractSaveEventListener.java:354 ) at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate ( AbstractSaveEventListener.java:260 ) at org.hibernate.event.internal.AbstractSaveEventListener.performSave ( AbstractSaveEventListener.java:182 ) at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId ( AbstractSaveEventListener.java:113 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId ( DefaultSaveOrUpdateEventListener.java:192 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient ( DefaultSaveOrUpdateEventListener.java:177 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate ( DefaultSaveOrUpdateEventListener.java:97 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate ( DefaultSaveOrUpdateEventListener.java:73 ) at org.hibernate.internal.SessionImpl.fireSaveOrUpdate ( SessionImpl.java:651 ) at org.hibernate.internal.SessionImpl.saveOrUpdate ( SessionImpl.java:643 ) at org.hibernate.engine.spi.CascadingActions $ 5.cascade ( CascadingActions.java:218 ) at org.hibernate.engine.internal.Cascade.cascadeToOne ( Cascade.java:391 ) at org.hibernate.engine.internal.Cascade.cascadeAssociation ( Cascade.java:316 ) at org.hibernate.engine.internal.Cascade.cascadeProperty ( Cascade.java:155 ) at org.hibernate.engine.internal.Cascade.cascadeCollectionElements ( Cascade.java:424 ) at org.hibernate.engine.internal.Cascade.cascadeCollection ( Cascade.java:356 ) at org.hibernate.engine.internal.Cascade.cascadeAssociation ( Cascade.java:319 ) at org.hibernate.engine.internal.Cascade.cascadeProperty ( Cascade.java:155 ) at org.hibernate.engine.internal.Cascade.cascade ( Cascade.java:104 ) at org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave ( AbstractSaveEventListener.java:445 ) at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate ( AbstractSaveEventListener.java:281 ) at org.hibernate.event.internal.AbstractSaveEventListener.performSave ( AbstractSaveEventListener.java:182 ) at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId ( AbstractSaveEventListener.java:113 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId ( DefaultSaveOrUpdateEventListener.java:192 ) at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId ( DefaultSaveEventListener.java:38 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient ( DefaultSaveOrUpdateEventListener.java:177 ) at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate ( DefaultSaveEventListener.java:32 ) at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate ( DefaultSaveOrUpdateEventListener.java:73 ) at org.hibernate.internal.SessionImpl.fireSave ( SessionImpl.java:682 ) at org.hibernate.internal.SessionImpl.save ( SessionImpl.java:674 ) at org.hibernate.internal.SessionImpl.save ( SessionImpl.java:669 ) at com.ervacon.bitemporal.HibernateTest.testPersistence ( HibernateTest.java:60 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:325 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:78 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:57 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:290 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:71 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:288 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:58 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:268 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:363 ) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run ( JUnit4TestReference.java:86 ) at org.eclipse.jdt.internal.junit.runner.TestExecution.run ( TestExecution.java:38 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:459 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:678 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run ( RemoteTestRunner.java:382 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main ( RemoteTestRunner.java:192 ) ERROR : HHH000346 : Error during managed flush [ Found shared references to a collection : AddressSet.value.addressSet ] org.hibernate.HibernateException : Found shared references to a collection : AddressSet.value.addressSet at org.hibernate.engine.internal.Collections.processReachableCollection ( Collections.java:182 ) at org.hibernate.event.internal.FlushVisitor.processCollection ( FlushVisitor.java:42 ) at org.hibernate.event.internal.AbstractVisitor.processValue ( AbstractVisitor.java:104 ) at org.hibernate.event.internal.AbstractVisitor.processValue ( AbstractVisitor.java:65 ) at org.hibernate.event.internal.AbstractVisitor.processValues ( AbstractVisitor.java:44 ) at org.hibernate.event.internal.AbstractVisitor.processComponent ( AbstractVisitor.java:85 ) at org.hibernate.event.internal.AbstractVisitor.processValue ( AbstractVisitor.java:110 ) at org.hibernate.event.internal.AbstractVisitor.processValue ( AbstractVisitor.java:65 ) at org.hibernate.event.internal.AbstractVisitor.processEntityPropertyValues ( AbstractVisitor.java:59 ) at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity ( DefaultFlushEntityEventListener.java:155 ) at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities ( AbstractFlushingEventListener.java:216 ) at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions ( AbstractFlushingEventListener.java:85 ) at org.hibernate.event.internal.DefaultFlushEventListener.onFlush ( DefaultFlushEventListener.java:38 ) at org.hibernate.internal.SessionImpl.flush ( SessionImpl.java:1295 ) at org.hibernate.internal.SessionImpl.managedFlush ( SessionImpl.java:468 ) at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion ( SessionImpl.java:3135 ) at org.hibernate.internal.SessionImpl.beforeTransactionCompletion ( SessionImpl.java:2352 ) at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion ( JdbcCoordinatorImpl.java:491 ) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback ( JdbcResourceLocalTransactionCoordinatorImpl.java:147 ) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access $ 100 ( JdbcResourceLocalTransactionCoordinatorImpl.java:38 ) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl $ TransactionDriverControlImpl.commit ( JdbcResourceLocalTransactionCoordinatorImpl.java:231 ) at org.hibernate.engine.transaction.internal.TransactionImpl.commit ( TransactionImpl.java:65 ) at com.ervacon.bitemporal.HibernateTest.testPersistence ( HibernateTest.java:77 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:325 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:78 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:57 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:290 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:71 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:288 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:58 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:268 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:363 ) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run ( JUnit4TestReference.java:86 ) at org.eclipse.jdt.internal.junit.runner.TestExecution.run ( TestExecution.java:38 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:459 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:678 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run ( RemoteTestRunner.java:382 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main ( RemoteTestRunner.java:192 )"
c1 : f ( x ) > 1 & & g ( y ) =2c2 : f ( x ) > 1 & & g ( y ) =2 if ( c1.toString ( ) .equals ( c2.toString ( ) ) ) ///do somthing
count1 = < call performance counter func > executeUnitTest ( ) ; count2 = < call performance counter func > testPerformance = count2 - count1 ;
"@ Slf4j @ Builderpublic class ChuckNorrisJokesService { @ Getter private final AtomicReference < Jokes > jokes = new AtomicReference < > ( new Jokes ( ) ) ; private final Scheduler scheduler ; private final ChuckNorrisJokesRepository jokesRepository ; private final CountDownLatch latch ; private final int numRetries ; private final Map < String , List < String > > threads ; public static class ChuckNorrisJokesServiceBuilder { public ChuckNorrisJokesService build ( ) { if ( scheduler == null ) { scheduler = Schedulers.io ( ) ; } if ( jokesRepository == null ) { jokesRepository = new ChuckNorrisJokesRepository ( ) ; } if ( threads == null ) { threads = new ConcurrentHashMap < > ( ) ; } requireNonNull ( latch , `` CountDownLatch must not be null . `` ) ; return new ChuckNorrisJokesService ( scheduler , jokesRepository , latch , numRetries , threads ) ; } } public void setRandomJokes ( int numJokes ) { mergeThreadNames ( `` getRandomJokes '' ) ; Observable.fromCallable ( ( ) - > { log.debug ( `` fromCallable - before call . Latch : { } . `` , latch.getCount ( ) ) ; mergeThreadNames ( `` fromCallable '' ) ; latch.countDown ( ) ; List < Joke > randomJokes = jokesRepository.getRandomJokes ( numJokes ) ; log.debug ( `` fromCallable - after call . Latch : { } . `` , latch.getCount ( ) ) ; return randomJokes ; } ) .retryWhen ( errors - > errors.zipWith ( Observable.range ( 1 , numRetries ) , ( n , i ) - > i ) .flatMap ( retryCount - > { log.debug ( `` retryWhen . retryCount : { } . `` , retryCount ) ; mergeThreadNames ( `` retryWhen '' ) ; return Observable.timer ( retryCount , TimeUnit.SECONDS ) ; } ) ) .subscribeOn ( scheduler ) .subscribe ( j - > { log.debug ( `` onNext . Latch : { } . `` , latch.getCount ( ) ) ; mergeThreadNames ( `` onNext '' ) ; jokes.set ( new Jokes ( `` success '' , j ) ) ; latch.countDown ( ) ; } , ex - > { log.error ( `` onError . Latch : { } . `` , latch.getCount ( ) , ex ) ; mergeThreadNames ( `` onError '' ) ; } , ( ) - > { log.debug ( `` onCompleted . Latch : { } . `` , latch.getCount ( ) ) ; mergeThreadNames ( `` onCompleted '' ) ; latch.countDown ( ) ; } ) ; } private void mergeThreadNames ( String methodName ) { threads.merge ( methodName , new ArrayList < > ( Arrays.asList ( Thread.currentThread ( ) .getName ( ) ) ) , ( value , newValue ) - > { value.addAll ( newValue ) ; return value ; } ) ; } } def `` succeeds on 1st attempt '' ( ) { setup : CountDownLatch latch = new CountDownLatch ( 2 ) Map < String , List < String > > threads = Mock ( Map ) ChuckNorrisJokesService service = ChuckNorrisJokesService.builder ( ) .latch ( latch ) .threads ( threads ) .build ( ) when : service.setRandomJokes ( 3 ) latch.await ( 2 , TimeUnit.SECONDS ) Jokes jokes = service.jokes.get ( ) then : jokes.status == 'success ' jokes.count ( ) == 3 1 * threads.merge ( 'getRandomJokes ' , *_ ) 1 * threads.merge ( 'fromCallable ' , *_ ) 0 * threads.merge ( 'retryWhen ' , *_ ) 1 * threads.merge ( 'onNext ' , *_ ) 0 * threads.merge ( 'onError ' , *_ ) 1 * threads.merge ( 'onCompleted ' , *_ ) } Too few invocations for:1 * threads.merge ( 'fromCallable ' , *_ ) ( 0 invocations ) 1 * threads.merge ( 'onNext ' , *_ ) ( 0 invocations )"
public boolean equals ( Object o ) { if ( o == null ) return false ; ... }
"class Person { String gender ; String income ; String petName ; } Map < String , Long > mapping = people .stream ( ) .collect ( Collectors.groupingBy ( Person : :gender , Collectors.counting ( ) ) ;"
"public class MyObject implements Comparable < MyObject > { private String name ; private int index ; @ Override public int compareTo ( MyObject o ) { if ( name.compareTo ( o.name ) ! = 0 ) return name.compareTo ( o.name ) ; return ( ( Integer ) index ) .compareTo ( o.index ) ; } } public int compareTo ( MyObject o ) { return chainedCompare ( this , o , myO - > myO.name , myO - > myO.index ) ; } public static < T , C extends Comparable < C > > int chainedCompare ( T object1 , T object2 , Function < T , C > ... comparisons ) { int compareValue = 0 ; for ( Function < T , C > comparison : comparisons ) { compareValue = comparison.apply ( object1 ) .compareTo ( comparison.apply ( object2 ) ) ; if ( compareValue ! = 0 ) break ; } return compareValue ; } public static < T > int chainedCompare ( T object1 , T object2 , Function < T , ? extends Comparable < ? > > ... comparisons ) { int compareValue = 0 ; for ( Function < T , ? extends Comparable < ? > > comparison : comparisons ) { compareValue = comparison.apply ( object1 ) .compareTo ( comparison.apply ( object2 ) ) ; if ( compareValue ! = 0 ) break ; } return compareValue ; } @ SuppressWarnings ( `` raw-types '' ) public static < T > int chainedCompare ( T object1 , T object2 , Function < T , ? extends Comparable > ... comparisons ) { return Arrays.stream ( comparisons ) .map ( Comparator : :comparing ) .reduce ( Comparator : :thenComparing ) .map ( c - > c.compare ( object1 , object2 ) ) .orElse ( 0 ) ; } public int compareTo ( MyObject o ) { return chainedCompare ( this , o , myO - > myO.name , myO - > myO.index ) ; }"
public void findInterestingFoo ( Stream < Foo > foos ) { internalState.update ( foos.collect ( customCollector ( ) ) ) ; } public void findInterestingFoo ( Stream < Foo > foos ) { if ( isSmall ( foos ) ) { internalState.update ( foos.collect ( customCollector ( ) ) ) ; } else { internalState.update ( foos.parallel ( ) .collect ( customCollector ( ) ) ) ; } }
"java.lang.RuntimeException : Parcelable encountered IOException writing serializable object ( name = com.android.ui.fragment.CustomViewFragment ) at android.os.Parcel.writeSerializable ( Parcel.java:1850 ) at android.os.Parcel.writeValue ( Parcel.java:1797 ) at android.os.Parcel.writeArrayMapInternal ( Parcel.java:945 ) at android.os.BaseBundle.writeToParcelInner ( BaseBundle.java:1584 ) at android.os.Bundle.writeToParcel ( Bundle.java:1253 ) at android.os.Parcel.writeBundle ( Parcel.java:1014 ) at android.content.Intent.writeToParcel ( Intent.java:11155 ) at android.app.IActivityTaskManager $ Stub $ Proxy.startAppLockService ( IActivityTaskManager.java:8468 ) at android.app.Activity.startAppLockService ( Activity.java:8950 ) at android.app.Activity.performStart ( Activity.java:8022 ) at android.app.ActivityThread.handleStartActivity ( ActivityThread.java:3512 ) at android.app.servertransaction.TransactionExecutor.performLifecycleSequence ( TransactionExecutor.java:221 ) at android.app.servertransaction.TransactionExecutor.cycleToPath ( TransactionExecutor.java:201 ) at android.app.servertransaction.TransactionExecutor.executeLifecycleState ( TransactionExecutor.java:173 ) at android.app.servertransaction.TransactionExecutor.execute ( TransactionExecutor.java:97 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:2175 ) at android.os.Handler.dispatchMessage ( Handler.java:107 ) at android.os.Looper.loop ( Looper.java:237 ) at android.app.ActivityThread.main ( ActivityThread.java:7860 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.RuntimeInit $ MethodAndArgsCaller.run ( RuntimeInit.java:493 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:1075 ) Caused by : java.io.NotSerializableException : androidx.appcompat.widget.Toolbar at java.io.ObjectOutputStream.writeObject0 ( ObjectOutputStream.java:1240 ) at java.io.ObjectOutputStream.defaultWriteFields ( ObjectOutputStream.java:1604 ) at java.io.ObjectOutputStream.writeSerialData ( ObjectOutputStream.java:1565 ) at java.io.ObjectOutputStream.writeOrdinaryObject ( ObjectOutputStream.java:1488 ) at java.io.ObjectOutputStream.writeObject0 ( ObjectOutputStream.java:1234 ) at java.io.ObjectOutputStream.defaultWriteFields ( ObjectOutputStream.java:1604 ) at java.io.ObjectOutputStream.writeSerialData ( ObjectOutputStream.java:1565 ) at java.io.ObjectOutputStream.writeOrdinaryObject ( ObjectOutputStream.java:1488 ) at java.io.ObjectOutputStream.writeObject0 ( ObjectOutputStream.java:1234 ) at java.io.ObjectOutputStream.writeObject ( ObjectOutputStream.java:354 ) at android.os.Parcel.writeSerializable ( Parcel.java:1845 ) at android.os.Parcel.writeValue ( Parcel.java:1797 ) at android.os.Parcel.writeArrayMapInternal ( Parcel.java:945 ) at android.os.BaseBundle.writeToParcelInner ( BaseBundle.java:1584 ) at android.os.Bundle.writeToParcel ( Bundle.java:1253 ) at android.os.Parcel.writeBundle ( Parcel.java:1014 ) at android.content.Intent.writeToParcel ( Intent.java:11155 ) at android.app.IActivityTaskManager $ Stub $ Proxy.startAppLockService ( IActivityTaskManager.java:8468 ) at android.app.Activity.startAppLockService ( Activity.java:8950 ) at android.app.Activity.performStart ( Activity.java:8022 ) at android.app.ActivityThread.handleStartActivity ( ActivityThread.java:3512 ) at android.app.servertransaction.TransactionExecutor.performLifecycleSequence ( TransactionExecutor.java:221 ) at android.app.servertransaction.TransactionExecutor.cycleToPath ( TransactionExecutor.java:201 ) at android.app.servertransaction.TransactionExecutor.executeLifecycleState ( TransactionExecutor.java:173 ) at android.app.servertransaction.TransactionExecutor.execute ( TransactionExecutor.java:97 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:2175 ) at android.os.Handler.dispatchMessage ( Handler.java:107 ) at android.os.Looper.loop ( Looper.java:237 ) at android.app.ActivityThread.main ( ActivityThread.java:7860 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.RuntimeInit $ MethodAndArgsCaller.run ( RuntimeInit.java:493 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:1075 ) public class BaseFragmentActivity extends AppCompatActivity implements Serializable , View.OnClickListener { private static final String TAG = `` BaseFragmentActivity '' ; private Toolbar mToolbar ; private ImageView tBtnSave , tBtnBack ; private TextView tTxtTitle ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_base_fragment ) ; mToolbar = findViewById ( R.id.toolbar ) ; tBtnSave = findViewById ( R.id.toolbar_btn_save ) ; tBtnBack = findViewById ( R.id.toolbarBtnBack ) ; tTxtTitle = findViewById ( R.id.toolbar_title ) ; } ... } apply plugin : 'com.android.application'android { compileSdkVersion 29 defaultConfig { applicationId `` com.android.app '' minSdkVersion 21 targetSdkVersion 29 versionCode 1 versionName `` 1.0 '' testInstrumentationRunner `` androidx.test.runner.AndroidJUnitRunner '' vectorDrawables.useSupportLibrary = true multiDexEnabled true } buildTypes { debug { debuggable true buildConfigField `` Boolean '' , `` DEBUG_MODE '' , `` true '' proguardFiles getDefaultProguardFile ( 'proguard-android-optimize.txt ' ) , 'proguard-rules.pro ' } release { minifyEnabled false proguardFiles getDefaultProguardFile ( 'proguard-android-optimize.txt ' ) , 'proguard-rules.pro ' } } } dependencies { implementation fileTree ( dir : 'libs ' , include : [ '*.jar ' ] ) implementation 'com.android.support : support-annotations:28.0.0 ' annotationProcessor 'com.android.support : support-annotations:28.0.0 ' implementation 'androidx.constraintlayout : constraintlayout:1.1.3 ' implementation 'androidx.legacy : legacy-support-v4:1.0.0 ' implementation 'androidx.appcompat : appcompat:1.1.0 ' implementation 'com.google.android.material : material:1.1.0 ' implementation 'com.google.code.gson : gson:2.8.5 ' implementation 'com.github.bumptech.glide : glide:4.11.0 ' annotationProcessor 'com.github.bumptech.glide : compiler:4.11.0 ' implementation 'com.android.volley : volley:1.1.1 ' implementation 'androidx.palette : palette:1.0.0 ' //External Animation Library implementation 'com.airbnb.android : lottie:3.4.1 ' testImplementation 'junit : junit:4.12 ' androidTestImplementation 'androidx.test.ext : junit:1.1.1 ' androidTestImplementation 'androidx.test.espresso : espresso-core:3.2.0 ' } public class BaseFragmentActivity extends AppCompatActivity implements Serializable , View.OnClickListener { // By using ` transient ` keyword to define view or class to say it 's not serialized view or class . private static final String TAG = `` BaseFragmentActivity '' ; private transient Toolbar mToolbar ; private transient AppCompatImageView tBtnSave , tBtnBack ; private transient AppCompatTextView tTxtTitle ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_base_fragment ) ; mToolbar = findViewById ( R.id.toolbar ) ; tBtnSave = findViewById ( R.id.toolbar_btn_save ) ; tBtnBack = findViewById ( R.id.toolbarBtnBack ) ; tTxtTitle = findViewById ( R.id.toolbar_title ) ; } ... }"
class Word { String value ; } public static String toString ( List < List < Word > > lines ) { return lines.stream ( ) .map ( l - > l.stream ( ) .map ( w - > w.value ) .collect ( Collectors.joining ( `` `` ) ) ) .collect ( Collectors.joining ( `` \n '' ) ) ; }
public class Animal { public < T > void genericMethod ( T t ) { System.out.println ( `` Inside generic method on animal with parameter `` + t.toString ( ) ) ; } } public class Cat extends Animal { public < T extends Cat > void genericMethod ( T t ) { System.out.println ( `` Inside generic method on cat with parameter `` + t.toString ( ) ) ; } } public class Main { public static void main ( String [ ] args ) { Animal animal = new Animal ( ) ; Cat cat = new Cat ( ) ; cat.genericMethod ( cat ) ; } }
public class RandomObject { public RandomObject ( Object o ) { System.out.println ( 1 ) ; } public RandomObject ( String [ ] s ) { System.out.println ( 2 ) ; } }
Item A | Item B | Weight X | Y | 2 X | Z | 5 Y | Z | 3 Y | W | 2 ... | ... | ...
"int a = 3 ; while ( a < = n ) { a = a * a ; } public void foo ( int n , int m ) { int i = m ; while ( i > 100 ) i = i / 3 ; for ( int k = i ; k > = 0 ; k -- ) { for ( int j = 1 ; j < n ; j*=2 ) System.out.print ( k + `` \t '' + j ) ; System.out.println ( ) ; } }"
public static void main ( ) { Student s1 ; myFunc ( s1.toString ( ) ) ; } public static myFunc ( String address ) { Student s2 ; s2 = //get s1 object from address string }
"public class Test { public static class Nested < T > { public T val ; Nested ( T val ) { this.val = val ; } } public static void main ( String [ ] args ) { Nested < Integer > a = new Nested < Integer > ( 5 ) ; Nested < Integer > b = new Nested < Integer > ( 2 ) ; Integer diff = a.val - b.val ; } } T diff ( Nested < T > other ) { return this.val - other.val ; } operator - can not be applied to T , T"
"static List < Integer > sumDigPow ( int a , int b ) { List < Integer > eureka = new ArrayList < Integer > ( 0 ) ; List < String > digits = new ArrayList < String > ( ) ; String num ; int sum = 0 , multi ; for ( int i=a ; i < =b ; i++ ) { num = String.valueOf ( i ) ; digits.add ( num ) ; for ( int j=0 ; j < digits.size ( ) ; j++ ) { multi = ( int ) Math.pow ( Integer.parseInt ( digits.get ( j ) ) , j+1 ) ; sum += multi ; } if ( sum == i ) eureka.add ( i ) ; sum = 0 ; digits.clear ( ) ; } return eureka ; }"
"public boolean isCollisionDetected ( Bitmap bitmap1 , int x1 , int y1 , Bitmap bitmap2 , int x2 , int y2 ) { Rect bounds1 = new Rect ( x1 , y1 , x1 + bitmap1.getWidth ( ) , y1 + bitmap1.getHeight ( ) ) ; Rect bounds2 = new Rect ( x2 , y2 , x2 + bitmap2.getWidth ( ) , y2 + bitmap2.getHeight ( ) ) ; if ( Rect.intersects ( bounds1 , bounds2 ) ) { Rect collisionBounds = getCollisionBounds ( bounds1 , bounds2 ) ; for ( int i = collisionBounds.left ; i < collisionBounds.right ; i++ ) { for ( int j = collisionBounds.top ; j < collisionBounds.bottom ; j++ ) { int bitmap1Pixel = bitmap1.getPixel ( i - x1 , j - y1 ) ; int bitmap2Pixel = bitmap2.getPixel ( i - x2 , j - y2 ) ; if ( isFilled ( bitmap1Pixel ) & & isFilled ( bitmap2Pixel ) ) { return true ; } } } } return false ; } private Rect getCollisionBounds ( Rect rect1 , Rect rect2 ) { int left = ( int ) Math.max ( rect1.left , rect2.left ) ; int top = ( int ) Math.max ( rect1.top , rect2.top ) ; int right = ( int ) Math.min ( rect1.right , rect2.right ) ; int bottom = ( int ) Math.min ( rect1.bottom , rect2.bottom ) ; return new Rect ( left , top , right , bottom ) ; } private boolean isFilled ( int pixel ) { return pixel ! = Color.TRANSPARENT ; } private Bitmap convert ( Bitmap bitmap , Bitmap.Config config ) { Bitmap convertedBitmap = Bitmap.createBitmap ( bitmap.getWidth ( ) , bitmap.getHeight ( ) , config ) ; Canvas canvas = new Canvas ( convertedBitmap ) ; Paint paint = new Paint ( ) ; paint.setColor ( Color.BLACK ) ; canvas.drawBitmap ( bitmap , 0 , 0 , paint ) ; return convertedBitmap ; }"
"JNIEXPORT jint JNICALL JNI_OnLoad ( JavaVM* vm , void* reserved ) { JNIEnv* env = nullptr ; vm- > GetEnv ( reinterpret_cast < void** > ( & env ) , JNI_VERSION_1_6 ) ; jclass clazz = env- > FindClass ( `` android/provider/ContactsContract $ Data '' ) ; jfieldID fieldID = env- > GetStaticFieldID ( clazz , `` EXTRA_ADDRESS_BOOK_INDEX '' , `` Ljava/lang/String ; '' ) ; jobject field = env- > GetStaticObjectField ( clazz , fieldID ) ; } jfieldID fieldID = env- > GetStaticFieldID ( clazz , `` VISIBLE_CONTACTS_ONLY '' , `` Ljava/lang/String ; '' ) ;"
"import java.util.Comparator ; import javax.swing.JTable ; import javax.swing.SortOrder ; public class AlphanumComparator implements Comparator < String > { JTable table ; public AlphanumComparator ( JTable table ) { this.table = table ; } private final boolean isDigit ( char ch ) { return ch > = 48 & & ch < = 57 ; } private final String getChunk ( String s , int slength , int marker ) { StringBuilder chunk = new StringBuilder ( ) ; char c = s.charAt ( marker ) ; chunk.append ( c ) ; marker++ ; if ( isDigit ( c ) ) { while ( marker < slength ) { c = s.charAt ( marker ) ; if ( ! isDigit ( c ) ) break ; chunk.append ( c ) ; marker++ ; } } else { while ( marker < slength ) { c = s.charAt ( marker ) ; if ( isDigit ( c ) ) break ; chunk.append ( c ) ; marker++ ; } } return chunk.toString ( ) ; } public int compare ( String s1 , String s2 ) { boolean swapInt = table.getRowSorter ( ) .getSortKeys ( ) .get ( 0 ) .getSortOrder ( ) == SortOrder.ASCENDING ; int thisMarker = 0 ; int thatMarker = 0 ; int s1Length = s1.length ( ) ; int s2Length = s2.length ( ) ; if ( s1Length ! = 0 & & s2Length ! = 0 ) { while ( thisMarker < s1Length & & thatMarker < s2Length ) { String thisChunk = getChunk ( s1 , s1Length , thisMarker ) ; thisMarker += thisChunk.length ( ) ; String thatChunk = getChunk ( s2 , s2Length , thatMarker ) ; thatMarker += thatChunk.length ( ) ; int result = 0 ; if ( isDigit ( thisChunk.charAt ( 0 ) ) & & isDigit ( thatChunk.charAt ( 0 ) ) ) { int thisChunkLength = thisChunk.length ( ) ; result = thisChunkLength - thatChunk.length ( ) ; if ( result == 0 ) { for ( int i = 0 ; i < thisChunkLength ; i++ ) { result = thisChunk.charAt ( i ) - thatChunk.charAt ( i ) ; if ( result ! = 0 ) { return result ; } } } } else { result = thisChunk.compareTo ( thatChunk ) ; } if ( result ! = 0 ) return result ; } return s1Length - s2Length ; } else { if ( swapInt ) { if ( s1Length == 0 ) { return 1 ; } else { return -1 ; } } else { if ( s1Length == 0 ) { return -1 ; } else { return 1 ; } } } } } Exception in thread `` AWT-EventQueue-0 '' java.lang.IllegalArgumentException : Comparison method violates its general contract ! at java.util.ComparableTimSort.mergeLo ( ComparableTimSort.java:744 ) at java.util.ComparableTimSort.mergeAt ( ComparableTimSort.java:481 ) at java.util.ComparableTimSort.mergeForceCollapse ( ComparableTimSort.java:422 ) at java.util.ComparableTimSort.sort ( ComparableTimSort.java:222 ) at java.util.Arrays.sort ( Arrays.java:1246 ) at javax.swing.DefaultRowSorter.sort ( DefaultRowSorter.java:607 ) at javax.swing.DefaultRowSorter.setSortKeys ( DefaultRowSorter.java:319 ) at javax.swing.DefaultRowSorter.toggleSortOrder ( DefaultRowSorter.java:480 ) at javax.swing.plaf.basic.BasicTableHeaderUI $ MouseInputHandler.mouseClicked ( BasicTableHeaderUI.java:112 ) at java.awt.AWTEventMulticaster.mouseClicked ( AWTEventMulticaster.java:270 ) at java.awt.Component.processMouseEvent ( Component.java:6538 ) at javax.swing.JComponent.processMouseEvent ( JComponent.java:3324 ) at java.awt.Component.processEvent ( Component.java:6300 ) at java.awt.Container.processEvent ( Container.java:2236 ) at java.awt.Component.dispatchEventImpl ( Component.java:4891 ) at java.awt.Container.dispatchEventImpl ( Container.java:2294 ) at java.awt.Component.dispatchEvent ( Component.java:4713 ) at java.awt.LightweightDispatcher.retargetMouseEvent ( Container.java:4888 ) at java.awt.LightweightDispatcher.processMouseEvent ( Container.java:4534 ) at java.awt.LightweightDispatcher.dispatchEvent ( Container.java:4466 ) at java.awt.Container.dispatchEventImpl ( Container.java:2280 ) at java.awt.Window.dispatchEventImpl ( Window.java:2750 ) at java.awt.Component.dispatchEvent ( Component.java:4713 ) at java.awt.EventQueue.dispatchEventImpl ( EventQueue.java:758 ) at java.awt.EventQueue.access $ 500 ( EventQueue.java:97 ) at java.awt.EventQueue $ 3.run ( EventQueue.java:709 ) at java.awt.EventQueue $ 3.run ( EventQueue.java:703 ) at java.security.AccessController.doPrivileged ( Native Method ) at java.security.ProtectionDomain $ JavaSecurityAccessImpl.doIntersectionPrivilege ( ProtectionDomain.java:76 ) at java.security.ProtectionDomain $ JavaSecurityAccessImpl.doIntersectionPrivilege ( ProtectionDomain.java:86 ) at java.awt.EventQueue $ 4.run ( EventQueue.java:731 ) at java.awt.EventQueue $ 4.run ( EventQueue.java:729 ) at java.security.AccessController.doPrivileged ( Native Method ) at java.security.ProtectionDomain $ JavaSecurityAccessImpl.doIntersectionPrivilege ( ProtectionDomain.java:76 ) at java.awt.EventQueue.dispatchEvent ( EventQueue.java:728 ) at java.awt.EventDispatchThread.pumpOneEventForFilters ( EventDispatchThread.java:201 ) at java.awt.EventDispatchThread.pumpEventsForFilter ( EventDispatchThread.java:116 ) at java.awt.EventDispatchThread.pumpEventsForHierarchy ( EventDispatchThread.java:105 ) at java.awt.EventDispatchThread.pumpEvents ( EventDispatchThread.java:101 ) at java.awt.EventDispatchThread.pumpEvents ( EventDispatchThread.java:93 ) at java.awt.EventDispatchThread.run ( EventDispatchThread.java:82 )"
SELECT * FROM ` mytable ` ORDER BY ` time ` LIMIT 1 ; DELETE FROM ` mytable ` ORDER BY ` time ` LIMIT 1
"logger.debug ( `` Some text goes here [ { } ] and some more text here '' , someObject.function ( ) ) ;"
@ Servicepublic class AvoidStartupOnMissingDatabase implements SmartInitializingSingleton { @ Override public void afterSingletonsInstantiated ( ) { throw new RuntimeException ( `` Do not deploy this app ! `` ) ; } } java.lang.RuntimeException : Do not deploy this app ! at xxx.AvoidStartupOnMissingDatabase.afterSingletonsInstantiated ( AvoidStartupOnMissingDatabase.java:11 ) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons ( DefaultListableBeanFactory.java:775 ) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization ( AbstractApplicationContext.java:762 ) at org.springframework.context.support.AbstractApplicationContext.refresh ( AbstractApplicationContext.java:480 ) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext ( FrameworkServlet.java:664 ) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext ( FrameworkServlet.java:630 ) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext ( FrameworkServlet.java:678 ) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext ( FrameworkServlet.java:549 ) at org.springframework.web.servlet.FrameworkServlet.initServletBean ( FrameworkServlet.java:490 ) at org.springframework.web.servlet.HttpServletBean.init ( HttpServletBean.java:136 ) at javax.servlet.GenericServlet.init ( GenericServlet.java:158 ) at org.apache.catalina.core.StandardWrapper.initServlet ( StandardWrapper.java:1144 ) at org.apache.catalina.core.StandardWrapper.loadServlet ( StandardWrapper.java:1091 ) at org.apache.catalina.core.StandardWrapper.load ( StandardWrapper.java:983 ) at org.apache.catalina.core.StandardContext.loadOnStartup ( StandardContext.java:4962 ) at org.apache.catalina.core.StandardContext.startInternal ( StandardContext.java:5274 ) at org.apache.catalina.util.LifecycleBase.start ( LifecycleBase.java:150 ) at org.apache.catalina.core.StandardContext.reload ( StandardContext.java:3823 ) at org.apache.catalina.startup.HostConfig.reload ( HostConfig.java:1410 ) at org.apache.catalina.startup.HostConfig.checkResources ( HostConfig.java:1320 ) at org.apache.catalina.startup.HostConfig.check ( HostConfig.java:1648 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:497 ) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke ( BaseModelMBean.java:300 ) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke ( DefaultMBeanServerInterceptor.java:819 ) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke ( JmxMBeanServer.java:801 ) at org.apache.catalina.manager.ManagerServlet.check ( ManagerServlet.java:1525 ) at org.apache.catalina.manager.ManagerServlet.deploy ( ManagerServlet.java:773 ) at org.apache.catalina.manager.ManagerServlet.doPut ( ManagerServlet.java:443 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:664 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:742 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:231 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:166 ) at org.apache.tomcat.websocket.server.WsFilter.doFilter ( WsFilter.java:52 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:193 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:166 ) at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter ( SetCharacterEncodingFilter.java:108 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:193 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:166 ) at org.apache.catalina.core.StandardWrapperValve.invoke ( StandardWrapperValve.java:198 ) at org.apache.catalina.core.StandardContextValve.invoke ( StandardContextValve.java:96 ) at org.apache.catalina.authenticator.AuthenticatorBase.invoke ( AuthenticatorBase.java:613 ) at org.apache.catalina.core.StandardHostValve.invoke ( StandardHostValve.java:140 ) at org.apache.catalina.valves.ErrorReportValve.invoke ( ErrorReportValve.java:81 ) at org.apache.catalina.core.StandardEngineValve.invoke ( StandardEngineValve.java:87 ) at org.apache.catalina.connector.CoyoteAdapter.service ( CoyoteAdapter.java:342 ) at org.apache.coyote.ajp.AjpProcessor.service ( AjpProcessor.java:486 ) at org.apache.coyote.AbstractProcessorLight.process ( AbstractProcessorLight.java:66 ) at org.apache.coyote.AbstractProtocol $ ConnectionHandler.process ( AbstractProtocol.java:790 ) at org.apache.tomcat.util.net.NioEndpoint $ SocketProcessor.doRun ( NioEndpoint.java:1459 ) at org.apache.tomcat.util.net.SocketProcessorBase.run ( SocketProcessorBase.java:49 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at org.apache.tomcat.util.threads.TaskThread $ WrappingRunnable.run ( TaskThread.java:61 ) at java.lang.Thread.run ( Thread.java:745 )
"public static void removeDuplicated ( Collection fullList , Collection itemsToRemove ) { //implementation stripped for brevity } public static void removeDuplicated ( Collection < Map < ? , ? > > fullList , Collection < Map < ? , ? > > itemsToRemove ) { } public static < T extends TeObjectWrapper > void removeDuplicated ( Collection < T > fullList , Collection < Map < ? , ? > > itemsToRemove ) { }"
doSomething ( ConstantsInterface.FOOBAR ) ; doSomething ( BetterEnumeration.FOOBAR ) ;
com_*myname*_*applicationName*_JsLabel = function ( ) { var mycomponent = new chessControll.JsLabel ( this.getElement ( ) ) ; connector = this ; this.onStateChange = function ( ) { mycomponent = this.getState ( ) .boolState ; } ; mycomponent.click = function ( ) { connector.passInfo ( true ) ; } ; } ; var chessControll = chessControll || { } ; chessControll.JsLabel = function ( element ) { element.innerHTML = `` < input type='button ' value='Click'/ > '' ; // Getter and setter for the value property this.getValue = function ( ) { return element . getElementsByTagName ( `` input '' ) [ 0 ] .value ; } ; var button = element.getElementsByTagName ( `` input '' ) [ 0 ] ; var self = this ; button.onclick = function ( ) { self.click ( ) ; } ; } ; var init = function ( ) { var onChange = function ( ) { /*Click Button defined in JsLabel Component */ } ; } ; $ ( document ) .ready ( init ) ;
"public class Assess extends ListActivity { String itm ; ArrayAdapter < String > Adapter ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; getListView ( ) .setBackgroundResource ( R.drawable.background ) ; Adapter = new ArrayAdapter < String > ( this , android.R.layout.simple_list_item_1 , getResources ( ) .getStringArray ( R.array.English ) ) ; setListAdapter ( Adapter ) ; getListView ( ) .setOnItemClickListener ( new OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > arg0 , View arg1 , int pos , long arg3 ) { selectItem ( pos ) ; itm = getListView ( ) .getItemAtPosition ( pos ) .toString ( ) ; // Toast.makeText ( getApplicationContext ( ) , `` CLicked '' , // Toast.LENGTH_SHORT ) .show ( ) ; } } ) ; } public void selectItem ( int pos ) { switch ( pos ) { case 0 : { Intent i ; List < Question > questions = getQuestionSetFromDb ( ) ; // Initialise Game with retrieved question set /// GamePlay c = new GamePlay ( ) ; c.setQuestions ( questions ) ; c.setNumRounds ( getNumQuestions ( ) ) ; ( ( ChuckApplication ) getApplication ( ) ) .setCurrentGame ( c ) ; // Start Game Now.. // i = new Intent ( this , QuestionActivity.class ) ; **i.putExtra ( `` itemname '' , itm ) ; ** //startActivityForResult ( i , Constants.PLAYBUTTON ) ; startActivity ( i ) ; //this.finish ( ) ; break ; } } } public void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.question ) ; topic1 = i.getStringExtra ( `` itemname '' ) ; Log.i ( `` sanket '' , topic1 ) ; /** * Configure current game and get question */ currentGame = ( ( ChuckApplication ) getApplication ( ) ) .getCurrentGame ( ) ; currentQ = currentGame.getNextQuestion ( ) ; RadioGroup rdgb = ( RadioGroup ) findViewById ( R.id.group1 ) ; rdgb.setOnCheckedChangeListener ( this ) ; /** * Update the question and answer options.. */ setQuestions ( ) ; } /** * Method to set the text for the question and answers from the current * games current question */private void setQuestions ( ) { // set the question text from current question String question = Utility.capitalise ( currentQ.getQuestion ( ) ) + `` ? `` ; TextView qText = ( TextView ) findViewById ( R.id.question ) ; qText.setText ( question ) ; // set the available options List < String > answers = currentQ.getQuestionOptions ( ) ; TextView option1 = ( TextView ) findViewById ( R.id.answer1 ) ; option1.setText ( Utility.capitalise ( answers.get ( 0 ) ) ) ; TextView option2 = ( TextView ) findViewById ( R.id.answer2 ) ; option2.setText ( Utility.capitalise ( answers.get ( 1 ) ) ) ; TextView option3 = ( TextView ) findViewById ( R.id.answer3 ) ; option3.setText ( Utility.capitalise ( answers.get ( 2 ) ) ) ; TextView option4 = ( TextView ) findViewById ( R.id.answer4 ) ; option4.setText ( Utility.capitalise ( answers.get ( 3 ) ) ) ; } /* * @ Override public void onClick ( View arg0 ) { //Log.d ( `` Questions '' , * `` Moving to next question '' ) ; *//** * validate a checkbox has been selected *//* * if ( ! checkAnswer ( ) ) return ; *//** * check if end of game *//* * if ( currentGame.isGameOver ( ) ) { //Log.d ( `` Questions '' , * `` End of game ! lets add up the scores.. '' ) ; //Log.d ( `` Questions '' , * `` Questions Correct : `` + currentGame.getRight ( ) ) ; //Log.d ( `` Questions '' , * `` Questions Wrong : `` + currentGame.getWrong ( ) ) ; Intent i = new * Intent ( this , EndgameActivity.class ) ; startActivity ( i ) ; finish ( ) ; } else { * Intent i = new Intent ( this , QuestionActivity.class ) ; startActivity ( i ) ; * finish ( ) ; } } */public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( a > 0 ) { switch ( keyCode ) { case KeyEvent.KEYCODE_BACK : return true ; } } return super.onKeyDown ( keyCode , event ) ; } /** * Check if a checkbox has been selected , and if it has then check if its * correct and update gamescore */private boolean checkAnswer ( ) { String answer = getSelectedAnswer ( ) ; if ( answer == null ) { // Log.d ( `` Questions '' , `` No Checkbox selection made - returning '' ) ; return false ; } else { // Log.d ( `` Questions '' , // `` Valid Checkbox selection made - check if correct '' ) ; if ( currentQ.getAnswer ( ) .equalsIgnoreCase ( answer ) ) { // Log.d ( `` Questions '' , `` Correct Answer ! `` ) ; currentGame.incrementRightAnswers ( ) ; } else { // Log.d ( `` Questions '' , `` Incorrect Answer ! `` ) ; currentGame.incrementWrongAnswers ( ) ; } return true ; } } /** * */public String getSelectedAnswer ( ) { RadioButton c1 = ( RadioButton ) findViewById ( R.id.answer1 ) ; RadioButton c2 = ( RadioButton ) findViewById ( R.id.answer2 ) ; RadioButton c3 = ( RadioButton ) findViewById ( R.id.answer3 ) ; RadioButton c4 = ( RadioButton ) findViewById ( R.id.answer4 ) ; if ( c1.isChecked ( ) ) { return c1.getText ( ) .toString ( ) ; } if ( c2.isChecked ( ) ) { return c2.getText ( ) .toString ( ) ; } if ( c3.isChecked ( ) ) { return c3.getText ( ) .toString ( ) ; } if ( c4.isChecked ( ) ) { return c4.getText ( ) .toString ( ) ; } return null ; } @ Overridepublic void onCheckedChanged ( RadioGroup group , int checkedId ) { // TODO Auto-generated method stub // Log.d ( `` Questions '' , `` Moving to next question '' ) ; a++ ; /** * validate a checkbox has been selected */ if ( ! checkAnswer ( ) ) return ; /** * check if end of game */ if ( currentGame.isGameOver ( ) ) { // db.open ( ) ; // db.insertOptions ( topic1 , currentGame.getRight ( ) , month ) ; // Log.d ( `` Questions '' , `` End of game ! lets add up the scores.. '' ) ; // Log.d ( `` Questions '' , `` Questions Correct : `` + // currentGame.getRight ( ) ) ; // Log.d ( `` Questions '' , `` Questions Wrong : `` + currentGame.getWrong ( ) ) ; Intent i = new Intent ( this , EndgameActivity.class ) ; startActivity ( i ) ; finish ( ) ; // db.close ( ) ; } else { Intent i = new Intent ( this , QuestionActivity.class ) ; startActivity ( i ) ; finish ( ) ; } } 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : FATAL EXCEPTION : main02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : java.lang.RuntimeException : Unable to start activity ComponentInfo { com.tmm.android.chuck/com.tmm.android.chuck.QuestionActivity } : java.lang.NullPointerException : println needs a message02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:1647 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:1663 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread.access $ 1500 ( ActivityThread.java:117 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:931 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.os.Handler.dispatchMessage ( Handler.java:99 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.os.Looper.loop ( Looper.java:130 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread.main ( ActivityThread.java:3683 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at java.lang.reflect.Method.invoke ( Method.java:507 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:839 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:597 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at dalvik.system.NativeStart.main ( Native Method ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : Caused by : java.lang.NullPointerException : println needs a message02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.util.Log.println_native ( Native Method ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.util.Log.i ( Log.java:158 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at com.tmm.android.chuck.QuestionActivity.onCreate ( QuestionActivity.java:48 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1047 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:1611 ) 02-04 10:33:35.697 : E/AndroidRuntime ( 1776 ) : ... 11 more"
"fileIn = new BufferedReader ( new InputStreamReader ( new URL ( args [ 0 ] .trim ( ) ) .openStream ( ) ) ) ; final Results results = fileIn.lines ( ) .parallel ( ) .skip ( 1 ) .map ( User : :parse ) .filter ( Optional : :isPresent ) .map ( Optional : :get ) .collect ( Results : :new , Results : :accumulate , Results : :combine ) ; Static reference from java.util.concurrent.ForkJoinPool.common ( from class java.util.concurrent.ForkJoinPool ) : -- > java.util.concurrent.ForkJoinPool @ 0x786d41db0 ( 76 bytes ) ( field workQueues : ) -- > [ Ljava.util.concurrent.ForkJoinPool $ WorkQueue ; @ 0x786eda598 ( 144 bytes ) ( Element 3 of [ Ljava.util.concurrent.ForkJoinPool $ WorkQueue ; @ 0x786eda598 : ) -- > java.util.concurrent.ForkJoinPool $ WorkQueue @ 0x786d41ee8 ( 96 bytes ) ( field currentSteal : ) -- > java.util.stream.SliceOps $ SliceTask @ 0x7b4ac6cb0 ( 130 bytes ) ( field completer : ) -- > java.util.stream.SliceOps $ SliceTask @ 0x7b379ad18 ( 130 bytes ) ( field completer : ) -- > java.util.stream.SliceOps $ SliceTask @ 0x7b25bdb68 ( 130 bytes ) ( field leftChild : ) -- > java.util.stream.SliceOps $ SliceTask @ 0x7b379acb8 ( 130 bytes ) ( field localResult : ) -- > java.util.stream.Nodes $ SpinedNodeBuilder @ 0x7b25fdda0 ( 53 bytes ) ( field spine : ) -- > [ [ Ljava.lang.Object ; @ 0x7b25ffe48 ( 144 bytes ) ( Element 12 of [ [ Ljava.lang.Object ; @ 0x7b25ffe48 : ) -- > [ Ljava.lang.Object ; @ 0x7b37c4f20 ( 262160 bytes ) ( Element 19598 of [ Ljava.lang.Object ; @ 0x7b37c4f20 : ) -- > 31ea87ba876505645342b31928394b3c,2013-11-24T23:02:17+00:00,898,22200,1314,700 ( 28 bytes ) ( field value : ) -- > [ C @ 0x7b2ffff88 ( 170 bytes ) // < < < < There are thousands of these"
class ReturnValue { private var value = false private val latch = new java.util.concurrent.CountDownLatch ( 1 ) def setValue ( aValue : Boolean ) { value = aValue latch.countDown ( ) } def getValue ( ) = { latch.await value } }
Caused by : org.springframework.transaction.UnexpectedRollbackException : JTA transaction unexpectedly rolled back ( maybe due to a timeout ) ; nested exception is javax.transaction.RollbackException at org.springframework.transaction.jta.JtaTransactionManager.doCommit ( JtaTransactionManager.java:1031 ) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit ( AbstractPlatformTransactionManager.java:732 ) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit ( AbstractPlatformTransactionManager.java:701 ) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning ( TransactionAspectSupport.java:321 ) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke ( TransactionInterceptor.java:116 ) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed ( ReflectiveMethodInvocation.java:171 ) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke ( JdkDynamicAopProxy.java:204 ) at $ Proxy128.duplicateContracts ( Unknown Source ) at com.test.server.rpc.SrvContractImpl.duplicateContracts ( SrvContractImpl.java:699 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:39 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:25 ) at java.lang.reflect.Method.invoke ( Method.java:597 ) at com.google.gwt.user.server.rpc.RPC.invokeAndEncodeResponse ( RPC.java:561 ) ... 34 moreCaused by : javax.transaction.RollbackException at org.objectweb.jotm.TransactionImpl.commit ( TransactionImpl.java:329 ) at org.objectweb.jotm.Current.commit ( Current.java:485 ) at org.springframework.transaction.jta.JtaTransactionManager.doCommit ( JtaTransactionManager.java:1028 ) ... 47 more
"SpreadsheetService service = new SpreadsheetService ( `` Print Google Spreadsheet Demo '' ) ; service.setUserCredentials ( GOOGLE_ACCOUNT_USERNAME , GOOGLE_ACCOUNT_PASSWORD ) ; URL metafeedUrl = new URL ( SPREADSHEET_URL ) ; SpreadsheetEntry spreadsheet = service.getEntry ( metafeedUrl , SpreadsheetEntry.class ) ; URL listFeedUrl = ( ( WorksheetEntry ) spreadsheet.getWorksheets ( ) .get ( 0 ) ) .getListFeedUrl ( ) ;"
"< % @ include file= '' /html/portlet/admin/view.portal.jsp '' % > < % @ include file= '' /html/portlet/admin/init.jsp '' % > < c : choose > < c : when test= '' < % = permissionChecker.isOmniadmin ( ) % > '' > < % String tabs1 = ParamUtil.getString ( request , `` tabs1 '' , `` server '' ) ; boolean showTabs1 = false ; if ( portletName.equals ( PortletKeys.ADMIN_INSTANCE ) ) { tabs1 = `` instances '' ; } else if ( portletName.equals ( PortletKeys.ADMIN_PLUGINS ) ) { tabs1 = `` plugins '' ; } else if ( portletName.equals ( PortletKeys.ADMIN_SERVER ) ) { tabs1 = `` server '' ; } else if ( portletName.equals ( PortletKeys.ADMIN ) ) { showTabs1 = true ; } String tabs2 = ParamUtil.getString ( request , `` tabs2 '' ) ; String tabs3 = ParamUtil.getString ( request , `` tabs3 '' ) ; if ( tabs1.equals ( `` plugins '' ) ) { if ( ! tabs2.equals ( `` portlet-plugins '' ) & & ! tabs2.equals ( `` theme-plugins '' ) & & ! tabs2.equals ( `` layout-template-plugins '' ) & & ! tabs2.equals ( `` hook-plugins '' ) & & ! tabs2.equals ( `` web-plugins '' ) ) { tabs2 = `` portlet-plugins '' ; } } int cur = ParamUtil.getInteger ( request , SearchContainer.DEFAULT_CUR_PARAM ) ; int delta = ParamUtil.getInteger ( request , SearchContainer.DEFAULT_DELTA_PARAM ) ; PortletURL portletURL = renderResponse.createRenderURL ( ) ; portletURL.setParameter ( `` struts_action '' , `` /admin/view '' ) ; portletURL.setParameter ( `` tabs1 '' , tabs1 ) ; portletURL.setParameter ( `` tabs2 '' , tabs2 ) ; portletURL.setParameter ( `` tabs3 '' , tabs3 ) ; % > < portlet : renderURL var= '' redirectURL '' > < portlet : param name= '' struts_action '' value= '' /admin/view '' / > < portlet : param name= '' tabs1 '' value= '' < % = tabs1 % > '' / > < portlet : param name= '' tabs2 '' value= '' < % = tabs2 % > '' / > < portlet : param name= '' tabs3 '' value= '' < % = tabs3 % > '' / > < portlet : param name= '' cur '' value= '' < % = String.valueOf ( cur ) % > '' / > < /portlet : renderURL > < aui : form action= '' < % = portletURL.toString ( ) % > '' method= '' post '' name= '' fm '' > < aui : input name= '' < % = Constants.CMD % > '' type= '' hidden '' / > < aui : input name= '' tabs1 '' type= '' hidden '' value= '' < % = tabs1 % > '' / > < aui : input name= '' tabs2 '' type= '' hidden '' value= '' < % = tabs2 % > '' / > < aui : input name= '' tabs3 '' type= '' hidden '' value= '' < % = tabs3 % > '' / > < aui : input name= '' redirect '' type= '' hidden '' value= '' < % = redirectURL % > '' / > < aui : input name= '' portletId '' type= '' hidden '' / > < c : if test= '' < % = showTabs1 % > '' > < liferay-ui : tabs names= '' server , instances , plugins '' url= '' < % = portletURL.toString ( ) % > '' / > < /c : if > < c : choose > < c : when test= ' < % = tabs1.equals ( `` server '' ) % > ' > < % @ include file= '' /html/portlet/admin/server.jspf '' % > < aui : script use= '' liferay-admin '' > new Liferay.Portlet.Admin ( { form : document. < portlet : namespace / > fm , namespace : ' < portlet : namespace / > ' , url : ' < portlet : actionURL > < portlet : param name= '' struts_action '' value= '' /admin/edit_server '' / > < /portlet : actionURL > ' } ) ; < /aui : script > < /c : when > < c : when test= ' < % = tabs1.equals ( `` instances '' ) % > ' > < % @ include file= '' /html/portlet/admin/instances.jspf '' % > < /c : when > < c : when test= ' < % = tabs1.equals ( `` plugins '' ) % > ' > < % PortletURL marketplaceURL = null ; if ( ( PrefsPropsUtil.getBoolean ( PropsKeys.AUTO_DEPLOY_ENABLED , PropsValues.AUTO_DEPLOY_ENABLED ) || PortalUtil.isOmniadmin ( user.getUserId ( ) ) ) & & PortletLocalServiceUtil.hasPortlet ( themeDisplay.getCompanyId ( ) , PortletKeys.MARKETPLACE_STORE ) ) { marketplaceURL = ( ( RenderResponseImpl ) renderResponse ) .createRenderURL ( PortletKeys.MARKETPLACE_STORE ) ; } boolean showEditPluginHREF = false ; boolean showReindexButton = true ; % > < % @ include file= '' /html/portlet/plugins_admin/plugins.jspf '' % > < /c : when > < /c : choose > < /aui : form > < aui : script > function < portlet : namespace / > saveServer ( cmd ) { document. < portlet : namespace / > fm. < portlet : namespace / > < % = Constants.CMD % > .value = cmd ; document. < portlet : namespace / > fm. < portlet : namespace / > redirect.value = `` < portlet : renderURL > < portlet : param name= '' struts_action '' value= '' /admin/view '' / > < portlet : param name= '' tabs1 '' value= '' < % = tabs1 % > '' / > < portlet : param name= '' tabs2 '' value= '' < % = tabs2 % > '' / > < portlet : param name= '' tabs3 '' value= '' < % = tabs3 % > '' / > < portlet : param name= '' < % = SearchContainer.DEFAULT_CUR_PARAM % > '' value= '' < % = String.valueOf ( cur ) % > '' / > < portlet : param name= '' < % = SearchContainer.DEFAULT_DELTA_PARAM % > '' value= '' < % = String.valueOf ( delta ) % > '' / > < /portlet : renderURL > '' ; submitForm ( document. < portlet : namespace / > fm , `` < portlet : actionURL > < portlet : param name= '' struts_action '' value= '' /admin/edit_server '' / > < /portlet : actionURL > '' ) ; } < /aui : script > < /c : when > < c : otherwise > < liferay-util : include page= '' /html/portal/portlet_access_denied.jsp '' / > < /c : otherwise > < /c : choose >"
public class Exercise01 { int i ; char c ; public static void main ( String [ ] args ) { Exercise01 E = new Exercise01 ( ) ; System.out.println ( `` i = `` + E.i ) ; System.out.println ( `` c = [ `` + E.c + `` ] '' ) ; } } /* Output : i = 0c = [ */
"int color = 0 ; int number = 0 ; // ... s = String.format ( `` % dproduct % d '' , color , number ) ; ٠product٠٠product١٠product٢٠product٣٠product٤"
"public class Regex { private static String removeNumbers ( String s ) { s = s.trim ( ) ; s = s.replaceAll ( `` + '' , `` `` ) ; s = s.replaceAll ( `` ( ^| ) \\d+ ( $ | ( \\d+ ) + ( $ | ) | ) '' , `` `` ) ; return s.trim ( ) ; } public static void main ( String [ ] args ) { String [ ] tests = new String [ ] { `` 123 '' , `` 123 456 stack 789 '' , `` 123 456 789 101112 131415 161718 192021 '' , `` stack 123 456 overflow 789 com '' , `` stack 123 456 overflow 789 '' , `` 123stack 456 '' , `` 123 stack456overflow '' , `` 123 stack456 '' , `` 123 ! @ 456 # 567 '' } ; for ( int i = 0 ; i < tests.length ; i++ ) { String test = tests [ i ] ; System.out.println ( `` \ '' '' + test + `` \ '' = > \ '' '' + removeNumbers ( test ) + `` \ '' '' ) ; } } } `` 123 '' = > `` '' '' 123 `` = > `` '' '' 123 456 stack 789 '' = > `` stack '' '' 123 456 789 101112 131415 161718 192021 '' = > `` '' '' stack 123 456 overflow 789 com '' = > `` stack overflow com '' '' stack 123 456 overflow 789 '' = > `` stack overflow '' '' 123stack 456 '' = > `` 123stack '' '' 123 stack456overflow '' = > `` stack456overflow '' '' 123 stack456 '' = > `` stack456 '' '' 123 ! @ 456 # 567 '' = > `` 123 ! @ 456 # 567 '' private static String removeNumbers ( String s ) { s = s.trim ( ) ; s = s.replaceAll ( `` + '' , `` `` ) ; s = s.replaceAll ( `` ( |^ ) [ \\d ] + ( | $ ) '' , `` `` ) ; return s.trim ( ) ; }"
"import lombok.AllArgsConstructor ; @ AllArgsConstructorpublic record Java ( String version ) { } public final class Java extends java.lang.Record { private final java.lang.String version ; public Java ( java.lang.String version ) { /* compiled code */ } ... rest of the compiled code } public class MixOfWorlds { public static void main ( String [ ] args ) { System.out.println ( new Java ( `` 14 '' ) .version ( ) ) ; // can not resolve constructor } } IntelliJ IDEA 2020.1 EAP ( Community Edition ) Build # IC-201.6487.11 , built on March 18 , 2020 Runtime version : 11.0.6+8-b765.15 x86_64 macOS 10.14.6"
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' package= '' com.example.cobaiascreen '' > < application android : allowBackup= '' true '' android : icon= '' @ mipmap/ic_launcher '' android : label= '' @ string/app_name '' android : roundIcon= '' @ mipmap/ic_launcher_round '' android : supportsRtl= '' true '' android : theme= '' @ style/AppTheme '' android : name= '' .App '' tools : ignore= '' GoogleAppIndexingWarning '' > < activity android : name= '' .SplashActivity '' android : theme= '' @ style/SplashTheme '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < /intent-filter > < /activity > < activity android : name= '' .MainActivity '' > < intent-filter > < action android : name= '' android.intent.action.MAINACTIVITY '' / > < category android : name= '' android.intent.category.DEFAULT '' / > < /intent-filter > < /activity > < /application > < /manifest > package com.example.cobaiascreen ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.Window ; import android.view.WindowManager ; public class SplashActivity extends AppCompatActivity { @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; //Hiding Title bar of this activity screen */ getWindow ( ) .requestFeature ( Window.FEATURE_NO_TITLE ) ; //Making this activity , full screen */ getWindow ( ) .setFlags ( WindowManager.LayoutParams.FLAG_FULLSCREEN , WindowManager.LayoutParams.FLAG_FULLSCREEN ) ; Intent intent = new Intent ( this , MainActivity.class ) ; startActivity ( intent ) ; finish ( ) ; } } package com.example.cobaiascreen ; import android.app.Application ; import android.os.SystemClock ; import java.util.concurrent.TimeUnit ; public class App extends Application { @ Override public void onCreate ( ) { super.onCreate ( ) ; // Do n't do this ! This is just so cold launches take some time SystemClock.sleep ( TimeUnit.SECONDS.toMillis ( 3 ) ) ; } } < resources > < ! -- Base application theme . -- > < style name= '' AppTheme '' parent= '' Theme.AppCompat.Light.DarkActionBar '' > < ! -- Customize your theme here . -- > < item name= '' colorPrimary '' > @ color/colorPrimary < /item > < item name= '' colorPrimaryDark '' > @ color/colorPrimaryDark < /item > < item name= '' colorAccent '' > @ color/colorAccent < /item > < /style > < style name= '' SplashTheme '' parent= '' Theme.AppCompat.NoActionBar '' > < item name= '' android : windowBackground '' > @ drawable/background_splash < /item > < /style > < /resources > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < layer-list xmlns : android= '' http : //schemas.android.com/apk/res/android '' > < item android : drawable= '' @ color/colorPrimaryDark '' / > < item > < bitmap android : gravity= '' center '' android : src= '' @ drawable/icon '' / > < /item > < /layer-list >"
"public static int lowestOneBit ( int i ) { // HD , Section 2-1 return i & -i ; }"
"public static void caller ( ) { z5 ( ) ; // Error . Neither Integer , nor String is more specific z5 ( null ) ; // Error for the same reason } public static void z5 ( Integer ... integers ) { System.out.println ( `` Integer z5 called '' ) ; } public static void z5 ( String ... strings ) { System.out.println ( `` String z5 called '' ) ; } public static void caller ( ) { z1 ( null ) ; // Error cuz [ I , [ J , [ F all are subclass of Object . z1 ( ) ; // SURPRISINGLY works and calls the int one . WHY ? } public static void z1 ( int ... integers ) { System.out.println ( `` int z1 called '' ) ; } public static void z1 ( long ... longs ) { System.out.println ( `` long z1 called '' ) ; } public static void z1 ( float ... floats ) { System.out.println ( `` float z1 called '' ) ; } public static void caller ( ) { z1 ( null ) ; // Error z1 ( ) ; // Error } public static void z1 ( int ... integers ) { System.out.println ( `` int z1 called '' ) ; } public static void z1 ( boolean ... bools ) { System.out.println ( `` bool z1 called '' ) ; }"
"class Test { public enum Season { WINTER , SPRING , SUMMER , FALL } Season field = Season.WINTER.SPRING ; // why is WINTER.SPRING possible ? }"
"final Namespace NS = Namespace.getNamespace ( `` http : //schemas.android.com/apk/res/android '' ) ; zipFile = new ZipFile ( apkPath ) ; ZipEntry zipEntry = new ZipEntry ( `` AndroidManifest.xml '' ) ; inputStream = zipFile.getInputStream ( zipEntry ) ; AXMLResource axmlResource = new AXMLResource ( ) ; axmlResource.read ( inputStream ) ; SAXBuilder saxBuilder = new SAXBuilder ( ) ; Document document = saxBuilder.build ( new ByteArrayInputStream ( axmlResource.toXML ( ) .toString ( ) .getBytes ( `` UTF-8 '' ) ) ) ; Element root = document.getRootElement ( ) ; System.out.println ( root.getAttributeValue ( `` versionCode '' , NS ) ) ; System.out.println ( root.getAttributeValue ( `` versionName '' , NS ) ) ; < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' data : versionCode= '' 344 '' data : versionName= '' 3.2.8 '' < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' http : versionCode= '' 1425572340 '' http : versionName= '' 14.25.57 '' < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' manifest : versionCode= '' 158425934 '' manifest : versionName= '' 225.0.0.47.118 ''"
"public class SpraycanConfig extends Activity { int xawID ; AppWidgetManager xawm ; Context xc ; EditText xinfo ; //EasyTracker easyTracker ; protected void onCreate ( Bundle paramBundle ) { super.onCreate ( paramBundle ) ; Crashlytics.start ( this ) ; setContentView ( R.layout.scconfiglayout ) ; this.xc = this ; Bundle localBundle = getIntent ( ) .getExtras ( ) ; if ( localBundle ! = null ) { this.xawID = localBundle.getInt ( `` appWidgetId '' , 0 ) ; } for ( ; ; ) { this.xawm = AppWidgetManager.getInstance ( this.xc ) ; ImageButton localImageButton1 = ( ImageButton ) findViewById ( R.id.normal ) ; View.OnClickListener local1 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.normal ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton1.setOnClickListener ( local1 ) ; ImageButton localImageButton2 = ( ImageButton ) findViewById ( R.id.belton ) ; View.OnClickListener local2 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.belton ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton2.setOnClickListener ( local2 ) ; ImageButton localImageButton3 = ( ImageButton ) findViewById ( R.id.gold ) ; View.OnClickListener local3 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.gold ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton3.setOnClickListener ( local3 ) ; ImageButton localImageButton4 = ( ImageButton ) findViewById ( R.id.hardcore ) ; View.OnClickListener local4 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.hardcore ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton4.setOnClickListener ( local4 ) ; ImageButton localImageButton5 = ( ImageButton ) findViewById ( R.id.ironlak ) ; View.OnClickListener local5 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.ironlak ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton5.setOnClickListener ( local5 ) ; ImageButton localImageButton6 = ( ImageButton ) findViewById ( R.id.krylon ) ; View.OnClickListener local6 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.krylon ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton6.setOnClickListener ( local6 ) ; ImageButton localImageButton7 = ( ImageButton ) findViewById ( R.id.mtn94 ) ; View.OnClickListener local7 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.ninetyfour ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton7.setOnClickListener ( local7 ) ; ImageButton localImageButton8 = ( ImageButton ) findViewById ( R.id.rusto ) ; View.OnClickListener local8 = new View.OnClickListener ( ) { public void onClick ( View paramAnonymousView ) { RemoteViews localRemoteViews = new RemoteViews ( xc.getPackageName ( ) , R.layout.main ) ; localRemoteViews.setImageViewResource ( R.id.imageview , R.drawable.rusto ) ; xawm.updateAppWidget ( xawID , localRemoteViews ) ; Intent localIntent = new Intent ( ) ; localIntent.putExtra ( `` appWidgetId '' , xawID ) ; setResult ( -1 , localIntent ) ; finish ( ) ; } } ; localImageButton8.setOnClickListener ( local8 ) ; return ; } } @ Overrideprotected void onStart ( ) { super.onStart ( ) ; } @ Overrideprotected void onStop ( ) { super.onStop ( ) ; } }"
class x { private WeakReference < Object > r ; Object getMonitorObject ( ) { Object o = new Object ( ) ; r = new WeakReference < > ( o ) ; return o ; } void thread1 ( ) throws Exception { synchronized ( getMonitorObject ( ) ) { Thread.sleep ( 3000 ) ; } } void thread2 ( ) { Object b = r.get ( ) ; } }
"1 / \ 2 3 | | 4 17 / \ 11 13 public static float calcScore ( int keyID , Map < Integer , Integer > frequencies , Map < Integer , Integer > subTaxonomy ) { float res = 0f ; int nodes = 0 ; if ( frequencies.containsKey ( keyID ) ) { return frequencies.get ( keyID ) + 0f ; } for ( Map.Entry < Integer , Integer > entry : subTaxonomy.entrySet ( ) ) { if ( entry.getValue ( ) - 1 == subTaxonomy.get ( keyID ) ) { nodes++ ; res += calcScore ( entry.getKey ( ) , frequencies , subTaxonomy ) ; } } return 1 / nodes * res ; }"
Printable printable = getPrintable ( ) ; PrinterJob printJob = PrinterJob.getPrinterJob ( ) ; printJob.setPrintable ( printable ) ; if ( printJob.printDialog ( ) ) { try { printJob.print ( ) ; } catch ( PrinterException exception ) { ... } }
"instrumentation.retransformClasses ( myClassesArray ) ; instrumentation.addTransformer ( new MyTransfomer ( ) , true ) ; instrumentation.retransformClasses ( retransformClassArray ) ; public class MyTransfomer implements ClassFileTransformer { private long total = 0 ; private long min = ... , max = ... ; public final byte [ ] transform ( ClassLoader loader , String className , Class < ? > classBeingRedefined , ProtectionDomain protectionDomain , byte [ ] classFileBuffer ) { long s = System.currentTimeMillis ( ) ; if ( s < min ) min = s ; if ( s > max ) max = s ; byte [ ] transformed = this.transformInner ( loader , className , classFileBuffer ) ; this.total += System.currentTimeMillis ( ) - s ; return transformed ; } } instrumentation.retransformClasses ( retransformClassArray ) ;"
"echo 123 > oldFiletouch newFilegit add newFile oldFilegit commit -m `` Change the oldFile from folder1 and add the newFile '' oldFile newFilegit push origin master echo zxc > oldFile ; git add oldFile ; git commit oldFile -m `` Change oldFile from folder2 '' ObjectId oldHead = repository.resolve ( `` HEAD^ { tree } '' ) ; //save old objectIdPullResult pullResult = pullCommand.setProgressMonitor ( new TextProgressMonitor ( new OutputStreamWriter ( System.out ) ) ) .call ( ) ; ObjectId head = repository.resolve ( `` HEAD^ { tree } '' ) ; ObjectReader reader = repository.newObjectReader ( ) ; CanonicalTreeParser oldTreeIter = new CanonicalTreeParser ( ) ; oldTreeIter.reset ( reader , oldHead ) ; CanonicalTreeParser newTreeIter = new CanonicalTreeParser ( ) ; newTreeIter.reset ( reader , head ) ; List < DiffEntry > diffs= git.diff ( ) .setNewTree ( newTreeIter ) .setOldTree ( oldTreeIter ) .call ( ) ;"
"import java.util.Properties ; import edu.stanford.nlp.ling.CoreAnnotations ; import edu.stanford.nlp.neural.rnn.RNNCoreAnnotations ; import edu.stanford.nlp.pipeline.Annotation ; import edu.stanford.nlp.pipeline.StanfordCoreNLP ; import edu.stanford.nlp.sentiment.SentimentCoreAnnotations ; import edu.stanford.nlp.trees.Tree ; import edu.stanford.nlp.util.CoreMap ; public class NLP { private StanfordCoreNLP pipeline ; Properties props ; public NLP ( ) { props = new Properties ( ) ; props.setProperty ( `` annotators '' , `` tokenize , ssplit , pos , parse , sentiment '' ) ; pipeline = new StanfordCoreNLP ( props ) ; // -- > ERROR , SEE BELOW } public int findSentiment ( String line ) { int mainSentiment = 0 ; if ( line ! = null & & line.length ( ) > 0 ) { int longest = 0 ; Annotation annotation = pipeline.process ( line ) ; for ( CoreMap sentence : annotation .get ( CoreAnnotations.SentencesAnnotation.class ) ) { Tree tree = sentence .get ( SentimentCoreAnnotations.AnnotatedTree.class ) ; int sentiment = RNNCoreAnnotations.getPredictedClass ( tree ) ; String partText = sentence.toString ( ) ; if ( partText.length ( ) > longest ) { mainSentiment = sentiment ; longest = partText.length ( ) ; } } } return mainSentiment ; } }"
"public class Test { int i = 1 ; public static void main ( String [ ] args ) throws Exception { Test inst = new Test ( ) ; Class < ? > clazz = inst.getClass ( ) ; Field fi = clazz.getDeclaredField ( `` i '' ) ; int ii = ( int ) fi.get ( inst ) ; Integer iii = new Integer ( ii * 2 ) ; fi.set ( inst , iii ) ; } }"
"public class Ball { static Rectangle hitbox = new Rectangle ( 0,10,20,20 ) ; static void checkHit ( ) { if ( hitbox.intersects ( Paddle.hitbox ) //do something } } public class DrawMyStuff extends JPanel { void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; setBackground ( Color.BLACK ) ; Graphics2D g2d = ( Graphics2D ) g ; g2d.draw ( Ball.hitbox ) ; } }"
"< string-array name= '' startTimeList '' > < item > Now < /item > < item > Pick a time.. < /item > < /string-array > startTimeSpinner.setOnItemSelectedListener ( new AdapterView.OnItemSelectedListener ( ) { @ Override public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { // startTimeString = adapterView.getItemAtPosition ( i ) .toString ( ) ; DateFormat currentDateFormat = new SimpleDateFormat ( `` HH : mm : ss '' ) ; userAvailableTimeInSF = currentDateFormat.format ( new Date ( ) ) ; final TextView startTimeSpinnerTV = ( TextView ) adapterView.getSelectedView ( ) ; startTimeSpinnerTV.setText ( userAvailableTimeInSF ) ; switch ( i ) { case 0 : userAvailableTimeInSF = currentDateFormat.format ( new Date ( ) ) ; startTimeSpinnerTV.setText ( `` Now '' ) ; break ; default : final Calendar c = Calendar.getInstance ( ) ; mHour = c.get ( Calendar.HOUR_OF_DAY ) ; mMinute = c.get ( Calendar.MINUTE ) ; TimePickerDialog timePickerDialog = new TimePickerDialog ( PostSportRequest.this , new TimePickerDialog.OnTimeSetListener ( ) { @ Override public void onTimeSet ( TimePicker view , int hourOfDay , int minute ) { Calendar date = Calendar.getInstance ( ) ; date.set ( Calendar.HOUR_OF_DAY , hourOfDay ) ; date.set ( Calendar.MINUTE , minute ) ; date.set ( Calendar.AM_PM , date.get ( Calendar.AM_PM ) ) ; showTime ( hourOfDay , minute ) ; userAvailableTimeInSF = new SimpleDateFormat ( `` HH : mm : ss '' ) .format ( date.getTime ( ) ) ; startTimeSpinnerTV.setText ( userAvailableTimeAMPM ) ; Toast.makeText ( getBaseContext ( ) , `` userAvailableTimeInSF : `` + userAvailableTimeInSF , Toast.LENGTH_SHORT ) .show ( ) ; } } , mHour , mMinute , false ) ; timePickerDialog.show ( ) ; break ; } } @ Override public void onNothingSelected ( AdapterView < ? > adapterView ) { } } ) ;"
"1 ) aksdbaalaskdhfbblajdfhacccc aoudgalsaa bblisdfhcccc ^^ ^^ ^^^^ aa bb cccc2 ) aksdbaalaskdhfbblajdfhacccc aoudgalsaa bblisdfhcccc ^^ ^^ ^^^^ aa bb cccc3 ) aksdbaalaskdhfbblajdfhacccc aoudgalsaa bblisdfhcccc ^^ ^^ ^^^^ aa bb cccc4 ) aksdbaalaskdhfbblajdfhacccc aoudgalsaa bblisdfhcccc ^^ ^^ ^^^^ aa bb cccc import java.util . * ; public class Main { public static int count ( String expression , String input ) { int count = 0 ; ArrayList < char [ ] > list = new ArrayList < char [ ] > ( ) ; // Create an ArrayList of chars to iterate through the expression and match to string for ( int i = 1 ; i < expression.length ( ) ; i=i+2 ) { StringBuilder exp = new StringBuilder ( ) ; char curr = expression.charAt ( i-1 ) ; if ( expression.charAt ( i ) == '+ ' ) { exp.append ( curr ) .append ( curr ) ; list.add ( exp.toString ( ) .toCharArray ( ) ) ; } else { // character is '- ' exp.append ( curr ) .append ( curr ) .append ( curr ) .append ( curr ) ; list.add ( exp.toString ( ) .toCharArray ( ) ) ; } } char [ ] inputArray = input.toCharArray ( ) ; int i = 0 ; // outside pointer int j = 0 ; // inside pointer while ( i < = inputArray.length ) { while ( j < = inputArray.length ) { for ( int k = 0 ; k < list.size ( ) ; k++ ) { /* loop through * all possible combinations in array list * with multiple loops */ } j++ ; } i++ ; j=i ; } return count ; } public static void main ( String [ ] args ) { String expression = `` a+b+c- '' ; String input = `` aaksdbaalaskdhfbblajdfhacccc aoudgalsaa bblisdfhcccc '' ; System.out.println ( `` The expression occurs : `` +count ( expression , input ) + '' times '' ) ; } }"
public void addAttribute ( Attribute attribute ) { if ( attribute instanceof UniqueAttribute ) ( ( UniqueAttribute ) attribute ) .setAsset ( this ) ; attributeList.add ( attribute ) ; } asset.addAttribute ( new UniqueAttribute ( asset ) ) ;
"public static class Something < T > { public void set ( T t ) { } } public static interface Manager < T > { public void add ( final String key , final Something < T > o ) ; public Something < T > get ( final String key ) ; } final Manager < Number > m = ... ; m.add ( `` key '' , new Something < Number > ( ) ) ; m.get ( `` key '' ) .set ( new Integer ( 5 ) ) ; public static interface Manager < T > { public void add ( final String key , final Something < ? extends T > o ) ; public Something < T > get ( final String key ) ; } final Manager < Number > m = ... ; m.add ( `` key '' , new Something < Integer > ( ) ) ; m.get ( `` key '' ) .set ( new Integer ( 5 ) ) ; public static class ManagerImplementation < T > implements Manager < T > { protected HashMap < String , Something < T > > map = new HashMap < String , Something < T > > ( ) ; public void add ( final String key , final Something < ? extends T > o ) { map.put ( key , o ) ; // < -- - here } public Something < T > get ( final String key ) { return map.get ( key ) ; } } public static class ManagerImplementation < T > implements Manager < T > { protected HashMap < String , Something < ? extends T > > map = new HashMap < String , Something < ? extends T > > ( ) ; public void add ( final String key , final Something < ? extends T > o ) { map.put ( key , o ) ; } public Something < T > get ( final String key ) { return map.get ( key ) ; // < -- - here } }"
"class Node < K extends Comparable < ? super K > , V >"
@ Inject @ Named ( `` dragon '' ) Dragon dragon2 ; @ Inject @ Named ( `` dragon '' ) Creature dragon2 ; @ Named ( `` dragon '' ) @ Providespublic Dragon providesDragon ( ) { Dragon d = new Dragon ( `` Morkeleb '' ) ; return d ; }
"ZMQ.Context context = ZMQ.context ( 1 ) ; // Socket to send messages on ZMQ.Socket sender = context.socket ( ZMQ.PUSH ) ; sender.bind ( `` tcp : //*:5557 '' ) ; // Send messages sender.send ( `` 0 '' , 0 ) ; ZMQ.Socket receiver = context.socket ( ZMQ.PULL ) ; receiver.connect ( `` tcp : //localhost:5557 '' ) ; // receive messages String string = new String ( receiver.recv ( 0 ) ) .trim ( ) ;"
"class ArrTest { public static void main ( String args [ ] ) { int i = 0 ; int [ ] a = { 3,6 } ; a [ i ] = i = 9 ; System.out.println ( i + `` `` + a [ 0 ] + `` `` + a [ 1 ] ) ; // 9 9 6 } }"
public class StringTest { public static void main ( String [ ] args ) { foo ( ) ; bar ( ) ; } public static void foo ( ) { String s = `` str4 '' ; String s1 = `` str '' + s.length ( ) ; System.out.println ( `` ( s==s1 ) = `` + ( s1==s ) ) ; } public static void bar ( ) { String s = `` str4 '' ; String s1 = `` str '' + `` 4 '' ; System.out.println ( `` ( s==s1 ) = `` + ( s1==s ) ) ; } }
"@ RequestMapping ( value = `` /insert '' , method = RequestMethod.POST , consumes = `` multipart/form-data '' ) @ ResponseBodypublic MyMessage insertExcell ( @ RequestPart ( `` typeFile '' ) String typeFile , @ RequestPart ( `` uploadFile '' ) MultipartFile multipart , @ RequestPart ( `` dataUser '' ) DataUser dataUser ) { BufferedReader br ; List < String > result2 = new ArrayList < String > ( ) ; try { String line ; InputStream is = multipart.getInputStream ( ) ; br = new BufferedReader ( new InputStreamReader ( is ) ) ; while ( ( line = br.readLine ( ) ) ! = null ) { result2.add ( line ) ; } } catch ( Exception e ) { } for ( int i = 0 ; i < result2.size ( ) ; i++ ) { System.out.println ( `` sentence '' + result2.get ( i ) ) ; ; } InputStream inputStream ; try { inputStream = multipart.getInputStream ( ) ; BufferedReader bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; String line ; while ( ( line = bufferedReader.readLine ( ) ) ! = null ) { System.out.println ( `` linea era '' + line ) ; } } catch ( IOException e1 ) { // TODO Auto-generated catch block e1.printStackTrace ( ) ; }"
"registry.appendListeners ( EventType.POST_COMMIT_UPDATE , listener ) amountByIdConcurrentMap.put ( id , amount ) ;"
chatWindow.variables.username = userField.getText ( ) ; classOne.variableClass.VariableName = false ;
public void setKey ( Key key ) { this.key = key ; } @ Testpublic void testSetKey ( ) public void changeKeyTo ( Key key ) { this.key = key ; } @ Testpublic void testSetKey ( )
`` Length : ( mark ) 10 ( mark ) ''
public interface Receiver < T > { public void receive ( T obj ) ; public Set < Class < ? extends T > > getInterests ( ) ; } public interface Distributor < T > extends Receiver < T > { public void register ( Receiver < T > receiver ) ; } public void register ( Receiver < ? extends T > receiver ) { Set < Class < ? extends T > > interests = receiver.getInterests ( ) ; //Problem because receiver.getInterests is //Set < Class < ? extends ? extends T > > ... }
public enum YourSingleton { INSTANCE ; public void doStuff ( String stuff ) { System.out.println ( `` Doing `` + stuff ) ; } } YourSingleton.INSTANCE.doStuff ( `` some stuff '' ) ;
"System.setProperty ( `` apple.laf.useScreenMenuBar '' , `` true '' ) ; try { UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } JFrame frame = new JFrame ( ) ; JMenuBar menuBar = new JMenuBar ( ) ; JMenu helpMenu = new JMenu ( `` Help '' ) ; menuBar.add ( helpMenu ) ; frame.setJMenuBar ( menuBar ) ;"
"@ OutputTimeUnit ( TimeUnit.NANOSECONDS ) @ BenchmarkMode ( Mode.AverageTime ) @ Warmup ( iterations = 1 , time = 1 ) @ Measurement ( iterations = 3 , time = 1 ) @ State ( Scope.Thread ) @ Threads ( 1 ) @ Fork ( 2 ) public class Writing { static final int TARGET_SIZE = 1024 ; static final int [ ] primitiveArray = new int [ TARGET_SIZE ] ; static final Object [ ] referenceArray = new Object [ TARGET_SIZE ] ; int val = 1 ; @ GenerateMicroBenchmark public void fillPrimitiveArray ( ) { final int primitiveValue = val++ ; for ( int i = 0 ; i < TARGET_SIZE ; i++ ) primitiveArray [ i ] = primitiveValue ; } @ GenerateMicroBenchmark public void fillReferenceArray ( ) { final Object referenceValue = new Object ( ) ; for ( int i = 0 ; i < TARGET_SIZE ; i++ ) referenceArray [ i ] = referenceValue ; } } Benchmark Mode Thr Cnt Sec Mean Mean error UnitsfillPrimitiveArray avgt 1 6 1 87.891 1.610 nsec/opfillReferenceArray avgt 1 6 1 640.287 8.368 nsec/op lea edx , [ edi+ebp*4+0x10 ] ; calculate the heap location to writemov [ edx ] , ebx ; write the value to the heap locationshr edx , 9 ; calculate the offset into the card tablemov [ ecx+edx ] , ah ; mark the card table entry as dirty mov [ edx+ebx*4+0x10 ] , ebp with -XX : +UseCondCardMark : Benchmark Mode Thr Cnt Sec Mean Mean error UnitsfillPrimitiveArray avgt 1 6 1 89.913 3.586 nsec/opfillReferenceArray avgt 1 6 1 1504.123 12.130 nsec/op"
"class Stream < T > { Supplier < T > head ; Supplier < Stream < T > > tail ; ... } public static < T > Stream < T > iterate ( T first , Function < T , T > f ) { return new Stream < T > ( ( ) - > first , ( ) - > { T nextElem = f.apply ( first ) ; if ( nextElem == null ) { return generate ( ( ) - > null ) ; } else { return iterate ( nextElem , f ) ; } } ) ; } public < U > U reduce ( U acc , Function < T , Function < Supplier < U > , U > > f ) { System.out.println ( `` REDUCE CALL '' ) ; T elem = head.get ( ) ; if ( elem ! = null ) { return f.apply ( elem ) .apply ( ( ) - > this.tail.get ( ) .reduce ( acc , f ) ) ; } else { return acc ; } } public Stream < T > filter ( Predicate < T > p ) { System.out.println ( `` FILTER '' ) ; return reduce ( generate ( ( ) - > null ) , elem - > acc - > { if ( p.test ( elem ) ) { return new Stream < > ( ( ) - > elem , ( ) - > acc.get ( ) ) ; } else { return acc.get ( ) ; } } ) ; } public static void main ( String [ ] args ) { Stream < Integer > ilist = Stream .iterate ( 1 , x - > x + 1 ) .filter ( x - > x > = 5 ) ; } FILTERREDUCE CALLREDUCE CALLREDUCE CALLREDUCE CALLREDUCE CALL public Stream < T > filter2 ( Predicate < T > p ) { System.out.println ( `` FILTER2 '' ) ; T elem = head.get ( ) ; if ( elem == null ) { return generate ( ( ) - > null ) ; } else { if ( p.test ( elem ) ) { return new Stream < > ( ( ) - > elem , ( ) - > this.tail.get ( ) .filter2 ( p ) ) ; } else { return this.tail.get ( ) .filter2 ( p ) ; } } } FILTER2FILTER2FILTER2FILTER2FILTER2"
"String [ ] patternArray = { `` 1 '' , '' 2 '' , '' 3 '' } ; List < String > patternCheck = Arrays.asList ( patternArray ) ; patternCheck.add ( `` 4 '' ) ; Exception in thread `` main '' java.lang.UnsupportedOperationException at java.util.AbstractList.add ( Unknown Source ) at java.util.AbstractList.add ( Unknown Source )"
"< user username= '' wineuser '' password= '' winepass '' roles= '' winer '' / > < security-constraint > < web-resource-collection > < web-resource-name > wine secret < /web-resource-name > < url-pattern > /rest/wines/secret < /url-pattern > < http-method > POST < /http-method > < /web-resource-collection > < auth-constraint > < role-name > winer < /role-name > < /auth-constraint > < /security-constraint > < login-config > < auth-method > BASIC < /auth-method > < /login-config > < security-role > < role-name > winer < /role-name > < /security-role > @ ApplicationPath ( `` /rest '' ) public class RestEasyWineServices extends Application { } import java.io.IOException ; import java.io.UnsupportedEncodingException ; import javax.ws.rs.client.ClientRequestContext ; import javax.ws.rs.client.ClientRequestFilter ; import javax.ws.rs.core.MultivaluedMap ; import javax.xml.bind.DatatypeConverter ; public class Authenticator implements ClientRequestFilter { private final String user ; private final String password ; public Authenticator ( String user , String password ) { this.user = user ; this.password = password ; } public void filter ( ClientRequestContext requestContext ) throws IOException { MultivaluedMap < String , Object > headers = requestContext.getHeaders ( ) ; final String basicAuthentication = getBasicAuthentication ( ) ; headers.add ( `` Authorization '' , basicAuthentication ) ; } private String getBasicAuthentication ( ) { String token = this.user + `` : '' + this.password ; try { return `` Basic `` + DatatypeConverter.printBase64Binary ( token.getBytes ( `` UTF-8 '' ) ) ; } catch ( UnsupportedEncodingException ex ) { throw new IllegalStateException ( `` Can not encode with UTF-8 '' , ex ) ; } } } @ Path ( `` /wines '' ) public class WineResource { ... @ POST @ Path ( `` secret '' ) @ Produces ( { MediaType.APPLICATION_JSON } ) @ Consumes ( { MediaType.APPLICATION_JSON } ) public Wine echoPostWineSecret ( Wine inputWine2 ) { System.out.println ( `` Server : **SECRET** post ( `` + inputWine2 + `` ) '' ) ; inputWine2 = dao.create ( inputWine2 ) ; return inputWine2 ; } } Client clientSecret = ClientBuilder.newClient ( ) .register ( new Authenticator ( `` wineuser '' , `` winepass '' ) ) ; WebTarget targetSecret = clientSecret.target ( `` http : //localhost:8080 '' ) .path ( `` /RestRestEasyJquerySqlite2Hibernate/rest/wines '' ) ; wine.setId ( 1231 ) ; wine.setName ( `` secret wine name_ '' + dateKey ) ; wine.setCountry ( `` secret wine country_ '' + dateKey ) ; wine.setGrapes ( `` secret wine grapes_ '' + dateKey ) ; wine.setRegion ( `` secret wine region_ '' + dateKey ) ; try { wine = targetSecret.path ( `` secret '' ) .request ( MediaType.APPLICATION_JSON_TYPE ) .post ( Entity.entity ( wine , MediaType.APPLICATION_JSON_TYPE ) , Wine.class ) ; System.out.println ( `` SECRET created wine : `` + wine ) ; } catch ( Exception e ) { System.out.println ( `` ERROR : Back on the client : exception '' ) ; e.printStackTrace ( ) ; }"
"public void sort ( ) { for ( int i = 0 ; i < clouds.size ( ) - 1 ; i++ ) { Cloud cl1 = clouds.get ( i ) ; Cloud cl2 = clouds.get ( i + 1 ) ; if ( cl1.getSpeed ( ) < cl2.getSpeed ( ) ) { continue ; } clouds.set ( i , cl2 ) ; clouds.set ( i+1 , cl1 ) ; this.sort ( ) ; } } Sat May 04 20:28:45 CEST 2013 ERROR : nulljava.lang.StackOverflowError at backgrounds.Clouds.sort ( Clouds.java:224 ) [ ... ] // The line above is repeated for some hundred times ."
"public static < T > List < T > sortMap ( Map < T , Comparable > map ) Map < S , Double > map required : Map < T # 1 , Comparable > found : Map < T # 2 , Double > reason : can not infer type-variable ( s ) T # 1 ( argument mismatch ; Map < T # 2 , Double > can not be converted to Map < T # 1 , Comparable > ) public class ExampleClass < T > { Map < T , Double > map ; public ExampleClass ( ) { this.map = new HashMap ( ) ; } //the following line produces the mentioned error List < T > sortedMapKeys = UtilityMethods.sortMap ( map ) ; } public class UtilityMethods { public static < T > List < T > sortMap ( Map < T , Comparable > map ) { // sort the map in some way and return the list } }"
"List < Employee > employees = new ArrayList < > ( ) ; employees.add ( new Employee ( `` John '' , 40 ) ) ; employees.add ( new Employee ( `` John '' , 30 ) ) ; Map < String , Integer > map = employees.stream ( ) .collect ( Collectors.toMap ( Employee : :getName , Employee : :getAge ) ) ; Exception in thread `` main '' java.lang.IllegalStateException : Duplicate key 40 ( ... )"
"public < T extends Object > List < T > getColData ( final String col ) List < String > a = table.getColData ( col1 ) ; List < String > b = table.getColData ( col2 ) ; List < String > c = Stream.concat ( a.stream ( ) , b.stream ( ) ) .collect ( Collectors.toList ( ) ) ;"
"public Object get ( ) { int first = availableObjects.get ( 0 ) ; availableObjects.remove ( 0 ) ; return objects.get ( first ) ; } TestObject test = objectPoolS.get ( ) ; public class ObjectPoolS < T > { int numberOfObjects ; boolean autoExtending ; T baseObject ; ArrayList < T > objects ; ArrayList < Integer > availableObjects ; public ObjectPoolS ( T baseObject , int capacity , boolean allowAutoExtending ) { this.numberOfObjects = capacity ; this.baseObject = baseObject ; this.autoExtending = allowAutoExtending ; objects = new ArrayList < T > ( capacity ) ; availableObjects = new ArrayList < Integer > ( capacity ) ; initialize ( baseObject , capacity ) ; } private void initialize ( T baseObject , int capacity ) { // Initialize List of Objects for ( int i = 0 ; i < capacity ; i++ ) { objects.add ( baseObject ) ; } // Initialize Index of Objects for ( int i = 0 ; i < capacity ; i++ ) { availableObjects.add ( new Integer ( i ) ) ; } } public T get ( ) { int first = availableObjects.get ( 0 ) ; availableObjects.remove ( 0 ) ; return objects.get ( first ) ; } } ObjectPoolS objectPoolS = new ObjectPoolS ( new TestObject ( 0 ) , 5 , true ) ; TestObject test = objectPoolS.get ( ) ; ObjectPoolS < TestObject > objectPoolS = new ObjectPoolS < TestObject > ( new TestObject ( 0 ) , 5 , true ) ; TestObject test = objectPoolS.get ( ) ; Type mismatch : can not convert from Object to TestObject"
"abstract class myModule { // this is effectively an abstract module , whose concrete // components can be configured by subclassing and instantiating it class thing { } class item { } object stuff { } class element { } object utils { } }"
Pattern p = Pattern.compile ( `` \\s '' ) ; Pattern p = Pattern.compile ( `` [ \\s\\h ] '' ) ;
"package com.typeoneerror.apps.app_name.utils ; import android.content.Context ; import android.graphics.Typeface ; import java.util.Hashtable ; public class FontRegistry { private static FontRegistry _instance ; private Context _context ; private Hashtable < String , Typeface > _fonts ; private FontRegistry ( ) { _fonts = new Hashtable < String , Typeface > ( ) ; } public static FontRegistry getInstance ( ) { if ( _instance == null ) { _instance = new FontRegistry ( ) ; } return _instance ; } public void init ( Context context ) { _context = context ; } public Typeface getTypeface ( int resourceId ) { String fontName = _context.getResources ( ) .getString ( resourceId ) ; if ( ! _fonts.containsKey ( fontName ) ) { String fontPath = `` fonts/ '' + fontName ; Typeface typeface = Typeface.createFromAsset ( _context.getAssets ( ) , fontPath ) ; _fonts.put ( fontName , typeface ) ; } return ( Typeface ) _fonts.get ( fontName ) ; } }"
/*1*/protected abstract < T extends Magicable > List < T > getMagicables ( ) ; /*2*/protected abstract List < ? extends Magicable > getMagicables ( ) ; /*3*/protected abstract List < Magicable > getMagicables ( ) ; @ Overrideprotected List < Magican > getMagicable ( ) { .. } public void < T extends Magicable > T getOneFromList ( ) { List < T > list = getMagicables ( ) ; // ... .. }
"Movie inputMovie = MovieCreator.build ( fileUri ) ; List < Track > videoTracks = new LinkedList < > ( ) ; for ( Track track : inputMovie.getTracks ( ) ) { if ( track.getHandler ( ) .equals ( `` vide '' ) ) { videoTracks.add ( track ) ; } } final int speedByFactorOf = 16 ; Movie outputMovie = new Movie ( ) ; AppendTrack appendedTracks = new AppendTrack ( videoTracks.toArray ( new Track [ videoTracks.size ( ) ] ) ) ; outputMovie.addTrack ( new WrappingTrack ( appendedTracks ) { @ Override public long [ ] getSampleDurations ( ) { long [ ] l = super.getSampleDurations ( ) ; for ( int i = 0 ; i < l.length ; i++ ) { l [ i ] /= speedByFactorOf ; } return l ; } } ) ; BasicContainer out = ( BasicContainer ) new DefaultMp4Builder ( ) .build ( outputMovie ) ; FileChannel fc = new RandomAccessFile ( `` timelapse.mp4 '' , `` rw '' ) .getChannel ( ) ; out.writeContainer ( fc ) ; fc.close ( ) ; out.close ( ) ;"
"import java.util . * ; import java.util.concurrent . * ; import java.util.function.Consumer ; import java.util.function.Function ; public class ConcurrentWithdrawer { private Map < String , Integer > database = new HashMap < > ( ) ; private int transactionCount = 0 ; private final List < Transaction > transactions = Collections.synchronizedList ( new ArrayList < > ( ) ) ; public static void main ( String [ ] args ) { try { new ConcurrentWithdrawer ( ) .run ( ) ; } catch ( ExecutionException e ) { e.printStackTrace ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } private static int getRandomNumberInRange ( int min , int max ) { if ( min > = max ) { throw new IllegalArgumentException ( `` max must be greater than min '' ) ; } Random r = new Random ( ) ; return r.nextInt ( ( max - min ) + 1 ) + min ; } public void run ( ) throws ExecutionException , InterruptedException { int startAmount = 200 ; int numberAccounts = 5 ; int totalMoney = 0 ; for ( int i = 0 ; i < numberAccounts ; i++ ) { database.put ( String.format ( `` account % d '' , i ) , startAmount ) ; totalMoney += startAmount ; } ThreadPoolExecutor executor = ( ThreadPoolExecutor ) Executors.newFixedThreadPool ( 5 ) ; List < Future > futures = new ArrayList < Future > ( ) ; for ( int i = 0 ; i < 5 ; i++ ) { futures.add ( executor.submit ( new Callable < Integer > ( ) { @ Override public Integer call ( ) { for ( int j = 0 ; j < 5 ; j++ ) { Transaction transaction = beginTransaction ( transactions , database ) ; transaction.read ( `` fromBalance '' , `` fromAccountName '' , ( context ) - > { int fromAccount = getRandomNumberInRange ( 0 , 4 ) ; String fromAccountName = String.format ( `` account % d '' , fromAccount ) ; return fromAccountName ; } ) .read ( `` toBalance '' , `` toAccountName '' , ( context ) - > { int toAccount = getRandomNumberInRange ( 0 , 4 ) ; String toAccountName = String.format ( `` account % d '' , toAccount ) ; while ( toAccountName.equals ( context.lookupName ( `` fromAccountName '' ) ) ) { toAccount = getRandomNumberInRange ( 0 , 4 ) ; toAccountName = String.format ( `` account % d '' , toAccount ) ; } return toAccountName ; } ) .write ( `` fromAccountName '' , ( writeContext ) - > { int difference ; TransactionContext context = writeContext.context ; if ( context.get ( `` fromBalance '' ) > = 100 ) { difference = 100 ; } else { difference = 0 ; } context.write ( writeContext.writeStep , `` fromAccountName '' , context.get ( `` fromBalance '' ) - difference ) ; context.put ( `` difference '' , difference ) ; } ) .write ( `` toAccountName '' , ( writeContext ) - > { TransactionContext context = writeContext.context ; context.write ( writeContext.writeStep , `` toAccountName '' , context.get ( `` toBalance '' ) + context.get ( `` difference '' ) ) ; } ) .commit ( ) ; } int foundMoney = 0 ; for ( int j = 0 ; j < numberAccounts ; j++ ) { Integer foundMoney1 ; String account = String.format ( `` account % d '' , j ) ; foundMoney1 = database.get ( account ) ; foundMoney += foundMoney1 ; } return foundMoney ; } } ) ) ; } List < Integer > monies = new ArrayList < > ( ) ; for ( Future f : futures ) { int foundMoney = ( Integer ) f.get ( ) ; monies.add ( foundMoney ) ; } System.out.println ( `` Totals while running '' ) ; for ( Integer money : monies ) { System.out.println ( money ) ; } System.out.println ( `` Expected money '' ) ; System.out.println ( totalMoney ) ; System.out.println ( `` Final money '' ) ; int foundMoney = 0 ; for ( int j = 0 ; j < numberAccounts ; j++ ) { Integer foundMoney1 ; foundMoney1 = database.get ( String.format ( `` account % d '' , j ) ) ; System.out.println ( String.format ( String.format ( `` account % d % d '' , j , foundMoney1 ) ) ) ; foundMoney += foundMoney1 ; } System.out.println ( foundMoney ) ; executor.shutdown ( ) ; } private Transaction beginTransaction ( List < Transaction > transactions , Map < String , Integer > database ) { transactionCount = transactionCount + 1 ; Transaction transaction = new Transaction ( transactions , transactionCount , database ) ; this.transactions.add ( transaction ) ; return transaction ; } private class Transaction { public Long readTimestamp = 0L ; public Long writeTimestamp = 0L ; public List < String > readTargets = new ArrayList < > ( ) ; private List < Transaction > transactions ; private final int id ; private Map < String , Integer > database ; private List < TransactionStep > steps = new ArrayList < > ( ) ; private TransactionContext transactionContext = new TransactionContext ( ) ; private boolean active = true ; private boolean cancel = false ; private long transactionFinish ; private long transactionStart ; private int reread ; private boolean valid ; public Transaction ( List < Transaction > transactions , int id , Map < String , Integer > database ) { this.transactions = transactions ; this.id = id ; this.database = database ; } public Transaction read ( String field , String name , Function < TransactionContext , String > keyGetter ) { ReadStep step = new ReadStep ( this , field , keyGetter ) ; steps.add ( step ) ; transactionContext.registerStep ( name , step ) ; return this ; } public Transaction write ( String fieldName , Consumer < WriteContext > writer ) { steps.add ( new WriteStep ( this , fieldName , writer ) ) ; return this ; } public boolean invalid ( ) { long largestWrite = 0L ; long largestRead = 0L ; List < Transaction > cloned = new ArrayList < > ( transactions ) ; cloned.sort ( new Comparator < Transaction > ( ) { @ Override public int compare ( Transaction o1 , Transaction o2 ) { return ( int ) ( o1.transactionStart - o2.transactionStart ) ; } } ) ; for ( Transaction transaction : cloned ) { ArrayList < TransactionStep > clonedSteps = new ArrayList < > ( transaction.steps ) ; for ( TransactionStep step : clonedSteps ) { for ( TransactionStep thisStep : steps ) { if ( step instanceof ReadStep & & thisStep instanceof ReadStep ) { ReadStep thisReadStep = ( ReadStep ) thisStep ; ReadStep readStep = ( ReadStep ) step ; if ( thisReadStep.key.equals ( readStep.key ) ) { if ( thisReadStep.timestamp > readStep.timestamp ) { return true ; } } } if ( step instanceof WriteStep & & thisStep instanceof WriteStep ) { WriteStep thisWriteStep = ( WriteStep ) thisStep ; WriteStep writeStep = ( WriteStep ) step ; if ( thisWriteStep.timestamp > writeStep.timestamp ) { return true ; } } } } } return false ; } public void commit ( ) { boolean needsRunning = true ; int retryCount = 0 ; transactionStart = System.nanoTime ( ) ; while ( needsRunning || invalid ( ) ) { readTimestamp = 0L ; writeTimestamp = 0L ; readTargets.clear ( ) ; retryCount++ ; active = true ; for ( TransactionStep step : steps ) { step.run ( transactionContext ) ; } needsRunning = false ; if ( cancel ) { needsRunning = true ; cancel = false ; } } System.out.println ( String.format ( `` Retry count was % d '' , retryCount ) ) ; for ( TransactionStep step : steps ) { if ( step instanceof ReadStep ) { String key = ( ( ReadStep ) step ) .key ; Integer value = transactionContext.context.get ( key ) ; database.put ( key , value ) ; } } transactions.remove ( this ) ; transactionFinish = System.nanoTime ( ) ; } } private interface TransactionStep { TransactionContext run ( TransactionContext context ) ; } private class ReadStep implements TransactionStep { private final String field ; private final Function < TransactionContext , String > keyGetter ; private boolean activated ; private String key ; public long timestamp ; Transaction transaction ; public ReadStep ( Transaction transaction , String field , Function keyGetter ) { this.transaction = transaction ; this.field = field ; this.keyGetter = keyGetter ; this.activated = false ; } public TransactionContext run ( TransactionContext context ) { if ( ! activated ) { key = ( String ) this.keyGetter.apply ( context ) ; } activated = true ; timestamp = System.nanoTime ( ) ; context.put ( field , database.get ( key ) ) ; if ( transaction.readTimestamp == 0L ) { transaction.readTimestamp = timestamp ; } transaction.readTargets.add ( key ) ; return context ; } } private class TransactionContext { public final HashMap < String , Integer > context ; private Map < String , ReadStep > readSteps = new HashMap < > ( ) ; public TransactionContext ( ) { this.context = new HashMap < > ( ) ; } public void registerStep ( String name , ReadStep readStep ) { readSteps.put ( name , readStep ) ; } public void put ( String field , Integer integer ) { this.context.put ( field , integer ) ; } public String lookupName ( String name ) { return readSteps.get ( name ) .key ; } public void write ( WriteStep writeStep , String name , Integer newValue ) { String key = lookupName ( name ) ; writeStep.key = key ; context.put ( key , newValue ) ; } public Integer get ( String field ) { return this.context.get ( field ) ; } } private class WriteStep implements TransactionStep { public String key ; private boolean activated ; private String fieldName ; private final Consumer < WriteContext > writer ; public long timestamp ; Transaction transaction ; public WriteStep ( Transaction transaction , String fieldName , Consumer < WriteContext > writer ) { this.transaction = transaction ; this.fieldName = fieldName ; this.writer = writer ; activated = false ; } @ Override public TransactionContext run ( TransactionContext context ) { timestamp = System.nanoTime ( ) ; transaction.writeTimestamp = timestamp ; writer.accept ( new WriteContext ( this , context ) ) ; activated = true ; return context ; } } private class WriteContext { private final WriteStep writeStep ; private final TransactionContext context ; public WriteContext ( WriteStep writeStep , TransactionContext context ) { this.writeStep = writeStep ; this.context = context ; } } } Retry count was 4511Retry count was 671Retry count was 5956Retry count was 140Retry count was 3818Retry count was 3102Retry count was 34Retry count was 580Retry count was 106Retry count was 46Retry count was 22Retry count was 11478Retry count was 199Retry count was 33Retry count was 715Retry count was 263Retry count was 6186Retry count was 6846Retry count was 7012Retry count was 301Retry count was 93Retry count was 148Retry count was 11Retry count was 355Retry count was 7Totals while running10001000100010001000Expected money1000Final moneyaccount0 200account1 700account2 100account3 0account4 01000BUILD SUCCESSFUL in 515ms transaction.read ( `` fromBalance '' , `` fromAccountName '' , ( context ) - > { int fromAccount = getRandomNumberInRange ( 0 , 4 ) ; String fromAccountName = String.format ( `` account % d '' , fromAccount ) ; return fromAccountName ; } )"
"[ { name : John , date : 01-01-2018 , attend : true } , { name : Adam , date : 01-01-2018 , attend : false } , { name : Adam , date : 01-02-2018 , attend : true } , { name : JOHN , date : 01-02-2018 , attend : false } ]"
"interface VisitorA { default void visit ( ASTA1 node ) { ... } ... default void visit ( ASTA2000 node ) { ... } } interface VisitorB extends VisitorA { default void visit ( ASTB1 node ) { ... } ... default void visit ( ASTB1000 node ) { ... } // due to language embedding all visit methods of VisitorA // must be overwritten @ Override default void visit ( ASTA1 node ) { ... } ... @ Override default void visit ( ASTA2000 node ) { ... } } interface VisitorC extends VisitorA { default void visit ( ASTC1 node ) { ... } ... default void visit ( ASTC1000 node ) { ... } // due to language embedding all visit methods of VisitorA // must be overwritten @ Override default void visit ( ASTA1 node ) { ... } ... @ Override default void visit ( ASTA2000 node ) { ... } } interface VisitorD extends VisitorB , VisitorC { default void visit ( ASTD1 node ) { ... } ... default void visit ( ASTD1000 node ) { ... } // due to language embedding all visit methods of VisitorA , // VisitorB , and VisitorC must be overwritten @ Override default void visit ( ASTA1 node ) { ... } ... @ Override default void visit ( ASTA2000 node ) { ... } @ Override default void visit ( ASTB1 node ) { ... } ... @ Override default void visit ( ASTB1000 node ) { ... } @ Override default void visit ( ASTC1 node ) { ... } ... @ Override default void visit ( ASTC1000 node ) { ... } } interface VisitorAPlain { void visit ( ASTA1 node ) ; ... void visit ( ASTA2000 node ) ; } interface VisitorA extends VisitorAPlain { ... // has same default methods as VisitorA above } interface VisitorBPlain extends VisitorAPlain { void visit ( ASTB1 node ) ; ... void visit ( ASTB1000 node ) ; } interface VisitorB extends VisitorBPlain { ... // has same default methods as VisitorB above } interface VisitorCPlain extends VisitorAPlain { void visit ( ASTC1 node ) ; ... void visit ( ASTC1000 node ) ; } interface VisitorC extends VisitorCPlain { ... // has same default methods as VisitorC above } interface VisitorD extends VisitorBPlain , VisitorCPlain { default void visit ( ASTD1 node ) { ... } ... default void visit ( ASTD1000 node ) { ... } // due to language embedding all visit methods of VisitorAPlain , // VisitorBPlain , and VisitorCPlain must be overwritten @ Override default void visit ( ASTA1 node ) { ... } ... default void visit ( ASTA2000 node ) { ... } @ Override default void visit ( ASTB1 node ) { ... } ... default void visit ( ASTB1000 node ) { ... } @ Override default void visit ( ASTC1 node ) { ... } ... default void visit ( ASTC1000 node ) { ... } }"
Integer.valueOf ( `` 1 '' ) Boolean.valueOf ( `` true '' ) String str = `` true '' ; if ( Boolean.valueOf ( str ) == Boolean.TRUE ) { ... }
"public static Boolean ShowImagesCapture ( Context context , Uri PATH_IMAGE , ImageCropView view , int width , int height ) { int orientation=0 ; Boolean success = true ; try { Bitmap bitmap =null ; if ( Build.VERSION.SDK_INT < 19 ) { String selectedImagePath = getPath ( PATH_IMAGE , context ) ; bitmap = BitmapFactory.decodeFile ( selectedImagePath ) ; orientation=GetPhotoOrientation ( context , getRealPathFromURI ( context , PATH_IMAGE ) ) ; } else { ParcelFileDescriptor parcelFileDescriptor ; try { parcelFileDescriptor = context.getContentResolver ( ) .openFileDescriptor ( PATH_IMAGE , `` r '' ) ; FileDescriptor fileDescriptor = parcelFileDescriptor.getFileDescriptor ( ) ; bitmap = BitmapFactory.decodeFileDescriptor ( fileDescriptor ) ; parcelFileDescriptor.close ( ) ; orientation=GetPhotoOrientation ( context , getRealPathFromURI ( context , PATH_IMAGE ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } switch ( orientation ) { case ExifInterface.ORIENTATION_ROTATE_180 : bitmap=rotateBitmap ( bitmap,3 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; break ; case ExifInterface.ORIENTATION_ROTATE_90 : bitmap=rotateBitmap ( bitmap,8 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; case ExifInterface.ORIENTATION_TRANSVERSE : break ; case ExifInterface.ORIENTATION_ROTATE_270 : bitmap=rotateBitmap ( bitmap,6 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; default : view.setImageBitmap ( bitmap ) ; } bitmap = null ; } catch ( Exception e ) { e.printStackTrace ( ) ; success= false ; } System.gc ( ) ; return success ; } public static Bitmap rotateBitmap ( Bitmap bitmap , int orientation , int width , int height ) { try { Matrix matrix = new Matrix ( ) ; switch ( orientation ) { case ExifInterface.ORIENTATION_NORMAL : return bitmap ; case ExifInterface.ORIENTATION_FLIP_HORIZONTAL : // matrix.setScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_180 : matrix.setRotate ( 180 ) ; break ; case ExifInterface.ORIENTATION_FLIP_VERTICAL : matrix.setRotate ( 180 ) ; // matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_TRANSPOSE : matrix.setRotate ( 90 ) ; // matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_90 : matrix.setRotate ( 90 ) ; break ; case ExifInterface.ORIENTATION_TRANSVERSE : matrix.setRotate ( -90 ) ; // matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_270 : matrix.setRotate ( -270 ) ; break ; default : return bitmap ; } Bitmap bmRotated = Bitmap.createBitmap ( bitmap , 0 , 0 , width , height , matrix , false ) ; bitmap.recycle ( ) ; return bmRotated ; } catch ( OutOfMemoryError e ) { Log.e ( TAG , '' Out memory Error '' ) ; return null ; } catch ( Exception e ) { e.printStackTrace ( ) ; return null ; } } public static Bitmap rotateBitmap ( Bitmap bitmap , int orientation , int width , int height ) { try { Matrix matrix = new Matrix ( ) ; switch ( orientation ) { case ExifInterface.ORIENTATION_NORMAL : return bitmap ; case ExifInterface.ORIENTATION_FLIP_HORIZONTAL : matrix.setScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_180 : matrix.setRotate ( 180 ) ; break ; case ExifInterface.ORIENTATION_FLIP_VERTICAL : matrix.setRotate ( 180 ) ; matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_TRANSPOSE : matrix.setRotate ( 90 ) ; matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_90 : matrix.setRotate ( 90 ) ; break ; case ExifInterface.ORIENTATION_TRANSVERSE : matrix.setRotate ( -90 ) ; matrix.postScale ( -1 , 1 ) ; break ; case ExifInterface.ORIENTATION_ROTATE_270 : matrix.setRotate ( -270 ) ; break ; default : return bitmap ; } Bitmap bmRotated= null ; try { Bitmap tmp_bitmap= Bitmap.createScaledBitmap ( bitmap , width , height , true ) ; bmRotated = Bitmap.createBitmap ( tmp_bitmap , 0 , 0 , tmp_bitmap.getWidth ( ) , tmp_bitmap.getHeight ( ) , matrix , true ) ; bitmap.recycle ( ) ; } catch ( OutOfMemoryError e ) { e.printStackTrace ( ) ; } return bmRotated ; } catch ( Exception e ) { e.printStackTrace ( ) ; return null ; } } public static Bitmap decodefilebitmap ( String selectedImagePath , int reqWidth , int reqHeight ) { // First decode with inJustDecodeBounds=true to check dimensions final BitmapFactory.Options options = new BitmapFactory.Options ( ) ; options.inJustDecodeBounds = true ; BitmapFactory.decodeFile ( selectedImagePath , options ) ; // Calculate inSampleSize options.inSampleSize = calculateInSampleSize ( options , reqWidth , reqHeight ) ; // Decode bitmap with inSampleSize set options.inJustDecodeBounds = false ; return BitmapFactory.decodeFile ( selectedImagePath , options ) ; } public static int calculateInSampleSize ( BitmapFactory.Options options , int reqWidth , int reqHeight ) { // Raw height and width of image final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( height > reqHeight || width > reqWidth ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; // Calculate the largest inSampleSize value that is a power of 2 and keeps both // height and width larger than the requested height and width . while ( ( halfHeight / inSampleSize ) > reqHeight & & ( halfWidth / inSampleSize ) > reqWidth ) { inSampleSize *= 2 ; } } return inSampleSize ; } //METODO PARA MOSTRAR LA IMAGEN DESDE LA GALERIApublic static Boolean ShowImagesCapture ( Context context , Uri PATH_IMAGE , ImageCropView view , int width , int height ) { int orientation=0 ; Boolean success = true ; try { Bitmap bitmap =null ; BitmapFactory.Options options = new BitmapFactory.Options ( ) ; options.inJustDecodeBounds = true ; if ( Build.VERSION.SDK_INT < 19 ) { String selectedImagePath = getPath ( PATH_IMAGE , context ) ; bitmap = decodefilebitmap ( selectedImagePath , bitmap.getWidth ( ) , bitmap.getHeight ( ) ) ; orientation=GetPhotoOrientation ( context , getRealPathFromURI ( context , PATH_IMAGE ) ) ; } else { ParcelFileDescriptor parcelFileDescriptor ; try { parcelFileDescriptor = context.getContentResolver ( ) .openFileDescriptor ( PATH_IMAGE , `` r '' ) ; FileDescriptor fileDescriptor = parcelFileDescriptor.getFileDescriptor ( ) ; bitmap = BitmapFactory.decodeFileDescriptor ( fileDescriptor ) ; parcelFileDescriptor.close ( ) ; orientation=GetPhotoOrientation ( context , getRealPathFromURI ( context , PATH_IMAGE ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } switch ( orientation ) { case ExifInterface.ORIENTATION_ROTATE_180 : bitmap=rotateBitmap ( bitmap,3 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; case ExifInterface.ORIENTATION_ROTATE_90 : bitmap=rotateBitmap ( bitmap,8 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; case ExifInterface.ORIENTATION_TRANSVERSE : break ; case ExifInterface.ORIENTATION_ROTATE_270 : bitmap=rotateBitmap ( bitmap,6 , width , height ) ; view.setImageBitmap ( bitmap ) ; break ; default : view.setImageBitmap ( bitmap ) ; } bitmap = null ; } catch ( Exception e ) { e.printStackTrace ( ) ; success= false ; } System.gc ( ) ; return success ; }"
if ( objectIsOfTypeFoo ) { if ( objectOfTypeFooIsShared ) { // do something with Object of type Foo knowing that it 's shared ... } else { // do something with Object of type Foo knowing that it 's not shared ... } } else if ( objectIsOfTypeBar ) { ... } if ( objectIsOfTypeFoo ) if ( objectOfTypeFooIsShared ) { // do something with Object of type Foo knowing that it 's shared ... } else { // do something with Object of type Foo knowing that it 's not shared ... } else if ( objectIsOfTypeBar ) { ... }
"[ 50.0,26.2,29.3 ] [ 2,1,0 ] [ 29.3,26.2,50.0 ]"
"import android.content.Context ; import android.util.AttributeSet ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.core.widget.NestedScrollView ; public class MaxHeightNestedScrollView extends NestedScrollView { private int maxHeight = -1 ; public MaxHeightNestedScrollView ( @ NonNull Context context ) { super ( context ) ; } public MaxHeightNestedScrollView ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; } public MaxHeightNestedScrollView ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; } public int getMaxHeight ( ) { return maxHeight ; } public void setMaxHeight ( int maxHeight ) { this.maxHeight = maxHeight ; } public void setMaxHeightDensity ( int dps ) { this.maxHeight = ( int ) ( dps * getContext ( ) .getResources ( ) .getDisplayMetrics ( ) .density ) ; } @ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { if ( maxHeight > 0 ) { heightMeasureSpec = MeasureSpec.makeMeasureSpec ( maxHeight , MeasureSpec.AT_MOST ) ; } super.onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < resources > < declare-styleable name= '' MaxHeightNestedScrollView '' > < attr name= '' maxHeight '' format= '' dimension '' / > < /declare-styleable > < /resources > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : orientation= '' vertical '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < ScrollView android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' # ffffff '' android : layout_weight= '' 1 '' android : fillViewport= '' true '' > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < TextView android : id= '' @ +id/textView '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' Lorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum '' / > < com.example.testgradle.MaxHeightNestedScrollView android : layout_width= '' fill_parent '' android : layout_height= '' wrap_content '' app : maxHeight= '' 130dp '' > < TextView android : id= '' @ +id/textView2 '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : textSize= '' 20dp '' android : textColor= '' # 000000 '' android : text= '' Lorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsumLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum '' / > < /com.example.testgradle.MaxHeightNestedScrollView > < TextView android : id= '' @ +id/textView3 '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' Lorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum\nLorem ipsum '' / > < /LinearLayout > < /ScrollView > < /LinearLayout >"
"Class < ? > sunMxBeanClass = Class.forName ( `` com.sun.management.OperatingSystemMXBean '' ) ; sunMxBeanInstance = sunMxBeanClass.cast ( ManagementFactory.getOperatingSystemMXBean ( ) ) ; getFreeSwapSpaceSize = getMethodWithName ( sunMxBeanClass , `` getFreeSwapSpaceSize '' ) ; getTotalSwapSpaceSize = getMethodWithName ( sunMxBeanClass , `` getTotalSwapSpaceSize '' ) ;"
int mask = 2 ; int count = 0 ; if ( ! ( mask > 1 ) & & ++count > 1 ) { mask += 100 ; } System.out.println ( mask + `` `` + count ) ;
public static void Main ( ) { String ONE = `` one '' ; //1 ChangeString ( ONE ) ; //2 Console.WriteLine ( ONE ) ; //3 String ONE = `` ONE '' ; //4 ChangeString ( ref ONE ) ; //5 Console.WriteLine ( ONE ) ; //6 } private static void ChangeString ( String word ) { word = `` TWO '' ; } private static void SeedCounter ( ref String word ) { word = `` TWO '' ; }
boolean isLocalIp = InetAddress.getByName ( ipAddr ) .isSiteLocalAddress ( ) || InetAddress.getByName ( ipAddr ) .isLinkLocalAddress ( ) || InetAddress.getByName ( ipAddr ) .isLoopbackAddress ( ) ;
NEW < MyClass > DUPINVOKESPECIAL < MyClass. < init > > NEW < MyClass > DUPINVOKESTATIC < Profiler.handleNEW > DUPINVOKESPECIAL < MyClass. < init > >
"char [ ] javaArray = { ' j ' , ' a ' , ' v ' , ' a ' } ; java String [ ] javaStringArray = { `` j '' , '' a '' , '' v '' , '' a '' } ;"
"package tests ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Dimension ; import java.awt.event.ActionEvent ; import javax.swing.AbstractAction ; import javax.swing.JFrame ; import javax.swing.JPanel ; import javax.swing.JScrollPane ; import javax.swing.Timer ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class Try01_JScrollPane extends JFrame { private static final long serialVersionUID = 4123186105171813186L ; private static final Logger log = LoggerFactory.getLogger ( Try01_JScrollPane.class ) ; JPanel yellowPanel = new JPanel ( ) ; { yellowPanel.setPreferredSize ( new Dimension ( 200,50 ) ) ; yellowPanel.setSize ( new Dimension ( 200,50 ) ) ; yellowPanel.setBackground ( Color.yellow ) ; } JScrollPane scrollPane = new JScrollPane ( yellowPanel ) ; { scrollPane.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS ) ; } AbstractAction increaseAction = new AbstractAction ( ) { @ Override public void actionPerformed ( ActionEvent e ) { yellowPanel.setPreferredSize ( new Dimension ( yellowPanel.getPreferredSize ( ) .width , yellowPanel.getPreferredSize ( ) .height+100 ) ) ; log.debug ( `` preferred height is now { } '' , yellowPanel.getPreferredSize ( ) .height ) ; } } ; Timer increaseTimer = new Timer ( 1000 , increaseAction ) ; { setLayout ( new BorderLayout ( ) ) ; add ( scrollPane , BorderLayout.CENTER ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setSize ( 200 , 400 ) ; setTitle ( `` Try01_JScrollPane '' ) ; increaseTimer.start ( ) ; setVisible ( true ) ; } public static void main ( String [ ] args ) { new Try01_JScrollPane ( ) ; } }"
"< root > < foo name= '' AAA '' / > < bar name= '' BBB '' / > < foo name= '' CCC '' / > < /root > @ Datapublic class Foo { @ JacksonXmlProperty ( isAttribute = true ) private String name ; } @ Datapublic class Root { @ JacksonXmlProperty ( localName = `` foo '' ) @ JacksonXmlElementWrapper ( useWrapping = false ) private List < Foo > foos ; @ JacksonXmlProperty ( localName = `` bar '' ) @ JacksonXmlElementWrapper ( useWrapping = false ) private List < Bar > bars ; } System.out.println ( new XmlMapper ( ) .readValue ( theXml , Root.class ) ) ; Root ( foos= [ Foo ( name=CCC ) ] , bars= [ Bar ( name=BBB ) ] ) Root ( foos= [ Foo ( name=AAA ) , Foo ( name=CCC ) ] , bars= [ Bar ( name=BBB ) ] )"
"static long Factorial ( long n ) { return n < 2 ? 1 : n * Factorial ( n - 1 ) ; } static long Combinatory ( long n , long k ) { return Factorial ( n ) / ( Factorial ( k ) * Factorial ( n - k ) ) ; } long comb = Combinatory ( 52 , 2 ) ; // return 1 which should be actually 1326"
"Fraction fraction = new Fraction ( 4 , 1 ) ;"
public class IsItSafe implements Cloneable { private int foo ; private int bar ; public IsItSafe foo ( int foo ) { IsItSafe clone = clone ( ) ; clone.foo = foo ; return clone ; } public IsItSafe bar ( int bar ) { IsItSafe clone = clone ( ) ; clone.bar = bar ; return clone ; } public int getFoo ( ) { return foo ; } public int getBar ( ) { return bar ; } protected IsItSafe clone ( ) { try { return ( IsItSafe ) super.clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new Error ( e ) ; } } }
public static void main ( String [ ] args ) { String [ ] students = new String [ 10 ] ; String studentName = `` Peter Smith '' ; students [ 0 ] = studentName ; studentName = null ; System.out.println ( students [ 0 ] ) ; }
"public class Ambiguous { public static void call ( ) { SomeDataClass data = new SomeDataClass ( ) ; callee ( data , SomeDataClass : :getString ) ; // compiler errors : // 1. at callee method name : // The method callee ( SomeDataClass , Function < SomeDataClass , String > ) is ambiguous for the type Ambiguous // 2. at lambda : // Type mismatch : can not convert from boolean to String callee ( data , d - > d.getRandom ( ) > 0.5 ) ; } public static void callee ( SomeDataClass data , Function < SomeDataClass , String > extractString ) { System.out.println ( extractString.apply ( data ) ) ; } public static void callee ( SomeDataClass data , Predicate < SomeDataClass > check ) { System.out.println ( check.test ( data ) ) ; } } // token data classfinal class SomeDataClass { public String getString ( ) { return `` string '' ; } public final double getRandom ( ) { return Math.random ( ) ; } } callee ( data , ( Predicate < SomeDataClass > ) d - > d.getRandom ( ) > 0.5 ) ;"
"// example only , not meant to compilepublic class TransactionAccount { private long balance ; private List < Transaction > transactions = new ArrayList < Transaction > ( ) ; ... . public long getBalance ( ) { return balance ; } } private class Transaction { public Date date ; public long amount ; }"
"import java.util.function.BiFunction ; class Demo { static class HighTemp { private int hTemp ; HighTemp ( int ht ) { hTemp = ht ; } boolean lessThanTemp ( HighTemp ht2 ) { return hTemp < ht2.hTemp ; } } static < T > int counter ( T [ ] vals , BiFunction < T , T , Boolean > f , T v ) { int count = 0 ; for ( int i=0 ; i < vals.length ; i++ ) { if ( f.apply ( vals [ i ] , v ) ) { // THIS LINE count++ ; } } return count ; } public static void main ( String args [ ] ) { HighTemp [ ] weekDayHighs2 = { new HighTemp ( 32 ) , new HighTemp ( 12 ) , new HighTemp ( 24 ) , new HighTemp ( 19 ) , new HighTemp ( 18 ) , new HighTemp ( 12 ) , new HighTemp ( -1 ) , new HighTemp ( 13 ) } ; int count = counter ( weekDayHighs2 , HighTemp : :lessThanTemp , new HighTemp ( 19 ) ) ; System.out.println ( count + `` days had a high of less than 19 '' ) ; } }"
"public < T , R > IGetter < T , R > getGetter ( Class < T > clazz , Field field ) { Class < R > fieldType = null ; try { fieldType = ( Class < R > ) field.getType ( ) ; } catch ( ClassCastException e ) { error ( `` Attempted to create a mistyped getter for the field `` + field + `` ! `` ) ; } return getGetter ( clazz , field.getName ( ) , fieldType ) ; } public < T , R > IGetter < T , R > getGetter ( Class < T > clazz , String fieldName , Class < R > fieldType ) { MethodHandles.Lookup caller = null ; MethodHandle target = null ; MethodType func = null ; try { caller = MethodHandles.lookup ( ) ; MethodType getter = MethodType.methodType ( fieldType ) ; target = caller.findVirtual ( clazz , computeGetterName ( fieldName ) , getter ) ; func = target.type ( ) ; } catch ( NoSuchMethodException e ) { error ( `` Could not locate a properly named getter \ '' '' + computeGetterName ( fieldName ) + `` \ '' ! `` ) ; } catch ( IllegalAccessException e ) { error ( `` Could not access \ '' '' + computeGetterName ( fieldName ) + `` \ '' ! `` ) ; } CallSite site = null ; try { site = LambdaMetafactory.metafactory ( caller , `` get '' , MethodType.methodType ( IGetter.class ) , func.generic ( ) , target , func ) ; } catch ( LambdaConversionException e ) { error ( `` Could not convert the getter \ '' '' + computeGetterName ( fieldName ) + `` \ '' into a lambda expression ! `` ) ; } MethodHandle factory = site.getTarget ( ) ; IGetter < T , R > r = null ; try { r = ( IGetter < T , R > ) factory.invoke ( ) ; } catch ( Throwable throwable ) { error ( `` Casting the factory of \ '' '' + computeGetterName ( fieldName ) + `` \ '' failed ! `` ) ; } return r ; } IGetter < TestEntity , Long > getter = accessorFactory.getGetter ( TestEntity.class , `` name '' , String.class ) ; Field field = TestEntity.class.getDeclaredField ( `` name '' ) ; IGetter < TestEntity , Long > getter = accessorFactory.getGetter ( TestEntity.class , field ) ; TestEntity testEntity = new TestEntity ( 1L , `` Test '' ) ; System.out.println ( getter.get ( testEntity ) ) ; Long value = getter.get ( testEntity ) ; Exception in thread `` main '' java.lang.ClassCastException : java.lang.String can not be cast to java.lang.Long at de.cyclonit.exercise.Main.main ( Main.java:26 ) public class TestEntity { private Long id ; private String name ; public TestEntity ( Long id , String name ) { this.id = id ; this.name = name ; } public Long getId ( ) { return id ; } public void setId ( Long id ) { this.id = id ; } public String getName ( ) { return name ; } }"
private final ReentrantLock lock ; public boolean offer ( E e ) { if ( e == null ) throw new NullPointerException ( ) ; final ReentrantLock lock = this.lock ; lock.lock ( ) ; try { if ( count == items.length ) return false ; else { insert ( e ) ; return true ; } } finally { lock.unlock ( ) ; } } final ReentrantLock lock = this.lock ;
class Apples { public static void main ( String args [ ] ) { testFunc ( ) ; } public static void testFunc ( ) { System.out.println ( `` Hello world ! `` ) ; } }
StopWatch stopwatch = StopWatch.createStarted ( ) ; do something for 5 secondsstopwatch.split ( ) ; do something for 10 secondsstopwatch.stop ( ) ; System.out.println ( stopwatch.getTime ( ) ) ; System.out.println ( stopwatch.getSplitTime ( ) ) ; StopWatch stopwatch = StopWatch.createStarted ( ) ; do something for 5 secondsstopwatch.split ( ) ; do something for 10 secondsstopwatch.unsplit ( ) ; stopwatch.stop ( ) ; System.out.println ( stopwatch.getTime ( ) ) ; // System.out.println ( stopwatch.getSplitTime ( ) ) ; errors because of unsplit
driver.findElement ( By.cssSelector ( `` .save-button '' ) ) .click ( ) ; driver.findElement ( By.cssSelector ( `` .save-button .disabled '' ) ) ;
"FileHandle jsonFile = Gdx.files.internal ( `` ui/uiskin.json '' ) ; FileHandle atlasFile = Gdx.files.internal ( `` ui/uiskin.atlas '' ) ; TextureAtlas atlas = new TextureAtlas ( atlasFile ) ; skin = new Skin ( jsonFile , atlas ) ;"
public class Example { public void method ( ) { int x = doThat ( ) ; //Call other methods which do not depend on x return ; } }
"public void test ( ) { StringBuilder buf ; org.junit.Assert.assertFalse ( ( buf = new StringBuilder ( `` qwe3 '' ) ) .toString ( ) .isEmpty ( ) ) ; org.junit.Assert.assertEquals ( `` '' , buf.toString ( ) ) ; // The local variable buf may not have been initialized } private static void assertFalse ( final boolean o ) throws Exception { }"
Stream < String > lines = reader.lines ( ) ;
"int [ ] arr2 = { 1,2,3,4,5,6 } ; Arrays.stream ( arr2 ) .map ( ( in ) - > in*2 ) .mapToObj ( ( in ) - > new Integer ( in ) ) .collect ( Collectors.toCollection ( ( ) - > new ArrayList < > ( ) ) ) ; Arrays.stream ( arr2 ) .map ( in- > in*2 ) .boxed ( ) .collect ( Collectors.toCollection ( ( ) - > new ArrayList < > ( ) ) ) ; @ Override public final Stream < Integer > boxed ( ) { return mapToObj ( Integer : :valueOf ) ; } .mapToObj ( in - > new Integer ( in ) ) .mapToObj ( in - > Integer.valueOf ( in ) )"
Exception in thread `` main '' java.lang.NullPointerException : charsetName at java.base/java.lang.String. < init > ( String.java:464 ) at java.base/java.lang.String. < init > ( String.java:537 ) at jdk.internal.le/jdk.internal.jline.extra.AnsiInterpretingOutputStream.write ( AnsiInterpretingOutputStream.java:92 ) at java.base/java.io.OutputStream.write ( OutputStream.java:157 ) at java.base/sun.nio.cs.StreamEncoder.writeBytes ( StreamEncoder.java:233 ) at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer ( StreamEncoder.java:312 ) at java.base/sun.nio.cs.StreamEncoder.implFlush ( StreamEncoder.java:316 ) at java.base/sun.nio.cs.StreamEncoder.flush ( StreamEncoder.java:153 ) at java.base/java.io.OutputStreamWriter.flush ( OutputStreamWriter.java:254 ) at jdk.internal.le/jdk.internal.jline.console.ConsoleReader.flush ( ConsoleReader.java:1052 ) at jdk.internal.le/jdk.internal.jline.console.ConsoleReader.readLine ( ConsoleReader.java:3259 ) at jdk.internal.le/jdk.internal.jline.console.ConsoleReader.readLine ( ConsoleReader.java:2383 ) at jdk.internal.le/jdk.internal.jline.console.ConsoleReader.readLine ( ConsoleReader.java:2371 ) at jdk.jshell/jdk.internal.jshell.tool.ConsoleIOContext.readLine ( ConsoleIOContext.java:142 ) at jdk.jshell/jdk.internal.jshell.tool.JShellTool.getInput ( JShellTool.java:1261 ) at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run ( JShellTool.java:1174 ) at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start ( JShellTool.java:975 ) at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start ( JShellToolBuilder.java:254 ) at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main ( JShellToolProvider.java:120 )
fun convertExceptionToEmpty ( requestFunc : ( ) - > List < Widget > ) : Stream < Widget > { try { return requestFunc ( ) .stream ( ) } catch ( th : Throwable ) { // Log the exception ... return Stream.empty ( ) } } List < Widget > getStaticWidgets ( ) throws IOException ; Stream < Widget > widgets = convertExceptionToEmpty ( ( ) - > getStaticWidgets ( ) )
"Map < String , List < Student > > studentsMap = students.stream ( ) . .collect ( Collectors.groupingBy ( Student : :getCourse , Collectors.mapping ( s - > s , Collectors.toList ( ) ) ) ) ; class StudentResponse { String course ; Student student ; // getter and setter }"
aMethod ( `` '' +100 ) ; aMethod ( String.valueOf ( 100 ) ) ;
"public class DataField implements JSONable { public final String name ; public final Class < ? > typeClass ; private Object data ; public < T > DataField ( String name , Class < T > typeClass ) { this.name = name ; this.typeClass = typeClass ; data = null ; } public < T > T getData ( Class < T > passClass ) { if ( ! typeClass.equals ( passClass ) ) throw new TypeMismatchException ( `` Type mismatch '' ) ; return passClass.cast ( data ) ; } public < T > T setData ( T obj , Class < T > passClass ) { if ( ! typeClass.equals ( passClass ) ) throw new TypeMismatchException ( `` Type mismatch '' ) ; data = ( Object ) obj ; } public String toJSON ( ) { //The part that bugs me StringBuilder sb = new StringBuilder ( ) ; switch ( type ) { case `` myPackage.DataField '' : if ( isArray ) return TakesADataObjOrCollectionOfDataObjs ( sb , Arrays.asList ( get ( DataObj [ ] .class ) ) ) ; else return TakesADataObjOrCollectionOfDataObjs ( sb , get ( DataObj.class ) ) ; break ; default : if ( isArray ) TakesAnObjectOrCollection ( sb , Arrays.asList ( get ( Object [ ] .class ) ) ) ; else TakesAnObjectOrCollection ( sb , get ( Object.class ) ) ; break ; } return sb.toString ( ) ; } } //I did not include code for DataObj but it has a HashMap < String , DataField > //fields on it and two functions for getting and setting field data //without actually divulging the field objects themselves ."
"... [ ERROR ] COMPILATION ERROR : [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - [ ERROR ] AppConstants.java ) : [ 4,12 ] unmappable character for encoding UTF-8 ... $ grep -ri AppConstants . # finds nothing $ find . | grep -i AppConstants # finds nothing"
public interface FileFilter { /** ... **/ boolean accept ( File pathname ) ; } FileFilter java = ( File f ) - > f.getName ( ) .endsWith ( `` .java '' ) ; ( f ) - > f.getName ( ) .endsWith ( `` .java '' ) ; ? ( int x ) - > x+1 // Single declared-type parameter ( int x ) - > { return x+1 ; } // Single declared-type parameter ( x ) - > x+1 // Single inferred-type parameterx - > x+1 // Parens optional for single inferred-type case
mySet .parallelStream ( ) ... // do my fancy stuff and collect ForkJoinPool.commonPool ( ) .submit ( ( ) - > { mySet .parallelStream ( ) ... // do my fancy stuff and collect } )
while ( true ) { Optional < String > optNewString = myStream.findAny ( ) ; if ( optNewString.isPresent ( ) ) doStuff ( optNewString.get ( ) ) ; else break ; }
catch ( IOException|SQLException ex ) { logger.log ( ex ) ; throw ex ; }
"class XY < A extends XY < A , B > , B extends XY < B , A > > { } XY.java:1 : error : type argument B is not within bounds of type-variable Aclass XY < A extends XY < A , B > , B extends XY < B , A > > { ^ where B , A are type-variables : B extends XY < B , A > declared in class XY A extends XY < A , B > declared in class XY1 error"
"public static class FreeMap extends TreeMap < String , Integer > { @ Override public Integer put ( String key , Integer value ) { out.println ( super.toString ( ) ) ; out.println ( super.getClass ( ) .getName ( ) + '' `` +key+ '' : `` +value ) ; int i = super.put ( key , value ) ; //line 227 assert this.size ( ) == 1 ; return i ; } } public static void main ( String [ ] args ) { FreeMap fm = new FreeMap ( ) ; fm.put ( `` A '' , 10 ) ; } { } com.xxxxxxxxxxxxxxxxxxxxxxxx.Graph $ FreeMap A : 10Exception in thread `` main '' java.lang.NullPointerExceptionat com.xxxxxxxxxxxxxxxxxxxxxxxx.Graph $ FreeMap.put ( Graph.java:227 ) at com.xxxxxxxxxxxxxxxxxxxxxxxx.Graph.main ( Graph.java:212 )"
"String bits= '' 10000001 '' ; Byte.parseByte ( bits,2 ) ; // throws a NFE byte b= ( byte ) 0x81 ; //1000 0001"
"public static void main ( String [ ] args ) throws Exception { Project project = new Project ( ) ; project.init ( ) ; String build = `` build.xml '' ; File buildFile = new File ( build ) ; ProjectHelper.configureProject ( project , buildFile ) ; Hashtable < String , Object > ht = project.getTargets ( ) ; for ( String key : ht.keySet ( ) ) { try { Target target = ( Target ) ht.get ( key ) ; Task [ ] tasks = target.getTasks ( ) ; for ( Task task : tasks ) { if ( task instanceof UnknownElement ) { ( ( UnknownElement ) task ) .maybeConfigure ( ) ; task = ( ( UnknownElement ) task ) .getTask ( ) ; if ( task == null ) { return ; } } if ( task instanceof Javac ) { // here we go } } } catch ( Exception ignore ) { } } }"
void emptyQueue ( Queue < T > q ) { T i ; while ( ( i = q.poll ( ) ) ! = null ) consume ( i ) ; }
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : id= '' @ +id/mainlinear '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : padding= '' 12dp '' android : layout_margin= '' 18dp '' > < androidx.cardview.widget.CardView android : id= '' @ +id/cardView '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' app : cardCornerRadius= '' 28dp '' > < RelativeLayout android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : background= '' @ color/colorCand '' android : orientation= '' vertical '' > < androidx.appcompat.widget.AppCompatImageView android : id= '' @ +id/image '' android : layout_width= '' match_parent '' android : layout_height= '' 320dp '' android : background= '' @ color/colorWhite '' android : scaleType= '' centerCrop '' android : src= '' @ drawable/turtle '' / > < LinearLayout android : id= '' @ +id/header '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_below= '' @ +id/image '' android : background= '' @ color/colorAccent '' > < androidx.appcompat.widget.AppCompatImageView android : id= '' @ +id/type '' android : layout_width= '' 48dp '' android : layout_height= '' 48dp '' android : layout_gravity= '' center '' android : layout_marginStart= '' 8dp '' android : src= '' @ drawable/ic_idea '' / > < TextView android : id= '' @ +id/title '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_gravity= '' center_vertical '' android : layout_marginEnd= '' 8dp '' android : maxLines= '' 1 '' android : textAlignment= '' textEnd '' android : textAllCaps= '' true '' android : textColor= '' @ color/colorWhite '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : ignore= '' RtlCompat '' tools : text= '' Sea Turtle Day '' / > < /LinearLayout > < RelativeLayout android : id= '' @ +id/desc '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_below= '' @ +id/header '' android : background= '' @ color/colorGray '' > < TextView android : id= '' @ +id/tag '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_centerInParent= '' true '' android : layout_marginStart= '' 12dp '' android : layout_marginEnd= '' 8dp '' android : layout_toStartOf= '' @ id/category_icon '' android : maxLines= '' 2 '' android : textColor= '' @ color/colorAccent '' tools : text= '' # SeaTurtleDay # SeaTurtleDay '' / > < androidx.appcompat.widget.AppCompatImageView android : id= '' @ +id/category_icon '' android : layout_width= '' 48dp '' android : layout_height= '' 48dp '' android : layout_alignParentEnd= '' true '' android : layout_centerVertical= '' true '' android : layout_marginStart= '' 4dp '' android : layout_marginEnd= '' 4dp '' android : src= '' @ drawable/animals '' / > < /RelativeLayout > < androidx.appcompat.widget.AppCompatImageView android : id= '' @ +id/logo '' android : layout_width= '' 96dp '' android : layout_height= '' 96dp '' android : layout_below= '' @ +id/desc '' android : layout_centerHorizontal= '' true '' android : layout_gravity= '' center '' android : layout_margin= '' 8dp '' android : src= '' @ drawable/wwf_logo '' / > < /RelativeLayout > < /androidx.cardview.widget.CardView > < /LinearLayout > public class ShotDialog extends DialogFragment { StkyrDialogBinding mBind ; private static Context mCon ; private static Boolean viaEntity ; private String mLink ; public ShotDialog ( ) { } public static ShotDialognewInstance ( Context context , Stkyr mStk , Boolean entityOnclick ) { StkyrDialog frag = new StkyrDialog ( ) ; mCon = context ; viaEntity = entityOnclick ; Bundle args = new Bundle ( ) ; args.putSerializable ( `` STK '' , mStk ) ; frag.setArguments ( args ) ; return frag ; } @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mBind = ShotDialogBinding.inflate ( inflater ) ; getDialog ( ) .getWindow ( ) .setBackgroundDrawable ( new ColorDrawable ( Color.TRANSPARENT ) ) ; mBind.fwd.setOnClickListener ( view - > { FragmentManager fm = ( ( FragmentActivity ) mCon ) .getSupportFragmentManager ( ) ; BottomDialogFragment mBot = BottomDialogFragment.newInstance ( mCon , mBind.mainlinear ) ; mBot.show ( fm , `` ShareDialog '' ) ; } ) ; } return mBind.getRoot ( ) ; } } public class BottomDialogFragment extends BottomSheetDialogFragment { public static Context mCon ; private static View stkView ; DialogShareBinding mBind ; private String sharePath = `` no '' ; public static BottomDialogFragment newInstance ( Context context , View view ) { mCon = context ; stkView = view ; return new BottomDialogFragment ( ) ; } @ Nullable @ Override public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mBind = DialogShareBinding.inflate ( inflater ) ; return mBind.getRoot ( ) ; } @ Override public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super.onViewCreated ( view , savedInstanceState ) ; mBind.stkShare.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dismiss ( ) ; } } ) ; mBind.share.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dismiss ( ) ; Log.e ( `` onClick : `` , `` SS TRIGGER '' ) ; takeStkShot ( ) ; } } ) ; } public void takeStkShot ( ) { if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.O ) { ViewImage.Companion.getScreenShotFromView ( stkView , getActivity ( ) , ( bm ) - > { Log.e ( `` takeStkShot : `` , `` > > > '' ) ; storeImage ( bm ) ; return null ; } ) ; } else { Bitmap bm = ViewImage.Companion.getScreenShot ( stkView ) ; storeImage ( bm ) ; Log.e ( `` takeStkShot : `` , `` > > > ScreenShot '' ) ; } } private void storeImage ( Bitmap bm ) { Log.e ( `` takeScreenshot : `` , `` STORING '' ) ; Date now = new Date ( ) ; android.text.format.DateFormat.format ( `` yyyy-MM-dd hh : mm '' , now ) ; try { // image naming and path to include sd card appending name you choose for file String mPath = Environment.getExternalStorageDirectory ( ) .toString ( ) + `` / '' + now + `` .jpeg '' ; try { Log.d ( `` ShareImageCreate '' , bm.toString ( ) ) ; File imageFile = new File ( mPath ) ; FileOutputStream outputStream = new FileOutputStream ( imageFile ) ; int quality = 100 ; bm.compress ( Bitmap.CompressFormat.JPEG , quality , outputStream ) ; outputStream.flush ( ) ; outputStream.close ( ) ; //setting screenshot in imageview String filePath = imageFile.getPath ( ) ; Log.e ( `` takeScreenshot > > `` , filePath ) ; Bitmap ssbitmap = BitmapFactory.decodeFile ( imageFile.getAbsolutePath ( ) ) ; //iv.setImageBitmap ( ssbitmap ) ; sharePath = filePath ; Log.d ( `` ShareImageCreate '' , sharePath ) ; Toast.makeText ( getActivity ( ) , '' SCREENSHOT STORED ! `` , Toast.LENGTH_SHORT ) .show ( ) ; } catch ( NullPointerException ex ) { ex.printStackTrace ( ) ; } } catch ( Throwable e ) { // Several error may come out with file handling or DOM e.printStackTrace ( ) ; } } } public class ShotFragment extends Fragment { String mEntityType = Constants.CAUSE ; Bundle mBundle ; ExtendedFloatingActionButton nextFab ; AppCompatImageView img ; CardView mCard ; private String sharePath = `` no '' ; public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View root = inflater.inflate ( R.layout.dialog_test , container , false ) ; ( ( AppCompatActivity ) getActivity ( ) ) .getSupportActionBar ( ) .setDisplayHomeAsUpEnabled ( true ) ; ( ( AppCompatActivity ) getActivity ( ) ) .getSupportActionBar ( ) .setDisplayShowHomeEnabled ( true ) ; ( ( AppCompatActivity ) getActivity ( ) ) .getSupportActionBar ( ) .setTitle ( `` Create Screenshot '' ) ; mCard = root.findViewById ( R.id.cardView ) ; mCard.setOnClickListener ( view - > { takeStkShot ( ) ; return root ; } public void takeStkShot ( ) { if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.O ) { ViewImage.Companion.getScreenShotFromView ( mCard , getActivity ( ) , ( bm ) - > { Log.e ( `` takeStkShot : `` , `` > > > '' ) ; storeImage ( bm ) ; return null ; } ) ; } else { Bitmap bm = ViewImage.Companion.getScreenShot ( mCard ) ; storeImage ( bm ) ; Log.e ( `` takeStkShot : `` , `` > > > ScreenShot '' ) ; } } private void storeImage ( Bitmap bm ) { Log.e ( `` takeScreenshot : `` , `` STORING '' ) ; Date now = new Date ( ) ; android.text.format.DateFormat.format ( `` yyyy-MM-dd hh : mm '' , now ) ; try { // image naming and path to include sd card appending name you choose for file String mPath = Environment.getExternalStorageDirectory ( ) .toString ( ) + `` / '' + now + `` .jpeg '' ; // create bitmap screen capture //View v1 = lyTakeScreenShots.getRootView ( ) ; try { Log.d ( `` ShareImageCreate '' , bm.toString ( ) ) ; File imageFile = new File ( mPath ) ; FileOutputStream outputStream = new FileOutputStream ( imageFile ) ; int quality = 100 ; bm.compress ( Bitmap.CompressFormat.JPEG , quality , outputStream ) ; outputStream.flush ( ) ; outputStream.close ( ) ; //setting screenshot in imageview String filePath = imageFile.getPath ( ) ; Log.e ( `` takeScreenshot > > `` , filePath ) ; Bitmap ssbitmap = BitmapFactory.decodeFile ( imageFile.getAbsolutePath ( ) ) ; //iv.setImageBitmap ( ssbitmap ) ; sharePath = filePath ; Log.d ( `` ShareImageCreate '' , sharePath ) ; Toast.makeText ( getActivity ( ) , '' SCREENSHOT STORED ! `` , Toast.LENGTH_SHORT ) .show ( ) ; } catch ( NullPointerException ex ) { ex.printStackTrace ( ) ; } } catch ( Throwable e ) { // Several error may come out with file handling or DOM e.printStackTrace ( ) ; } }"
"private boolean testClassContains ( ) { final List < Class < ? extends Annotation > > annotations = Arrays.asList ( MyAnnotation.class , YourAnnotation.class ) ; return annotations.contains ( YourAnnotation.class ) ; }"
"public class Card { public enum Rank { DEUCE , THREE , FOUR , FIVE , SIX , SEVEN , EIGHT , NINE , TEN , JACK , QUEEN , KING , ACE } public enum Suit { CLUBS , DIAMONDS , HEARTS , SPADES } private final Rank rank ; private final Suit suit ; private Card ( Rank rank , Suit suit ) { this.rank = rank ; this.suit = suit ; } public Rank rank ( ) { return rank ; } public Suit suit ( ) { return suit ; } public String toString ( ) { return rank + `` of `` + suit ; } private static final List < Card > protoDeck = new ArrayList < Card > ( ) ; // Initialize prototype deck **static** { for ( Suit suit : Suit.values ( ) ) for ( Rank rank : Rank.values ( ) ) protoDeck.add ( new Card ( rank , suit ) ) ; } public static ArrayList < Card > newDeck ( ) { return new ArrayList < Card > ( protoDeck ) ; // Return copy of prototype deck } }"
"public class Container { private final Map < String , Object > map = new HashMap < > ( ) ; public void put ( String name , Object value ) { map.put ( name , value ) ; } public Container with ( String name , Object value ) { put ( name , value ) ; return this ; } public Object get ( String name ) { return map.get ( name ) ; } public < R > R get ( String name , Function < Object , R > mapper ) { Object value = get ( name ) ; if ( null == value ) { return null ; } return mapper .apply ( value ) ; } public < R > R get ( String name , Class < R > type ) { Object value = get ( name ) ; if ( null == value ) { return null ; } if ( type.isAssignableFrom ( value.getClass ( ) ) ) { return type .cast ( value ) ; } throw new ClassCastException ( String .format ( `` % s - > % s '' , value.getClass ( ) , type ) ) ; } } public class Token { private String value ; public String getValue ( ) { return value ; } public void setValue ( String value ) { this.value = value ; } public Token withValue ( String value ) { setValue ( value ) ; return this ; } } public class TokenTest { @ Test public void verifyToken ( ) { verify ( `` bar '' , new Token ( ) .withValue ( `` bar '' ) ) ; } @ Test public void verifyContainer ( ) { Container tokens = new Container ( ) .with ( `` foo '' , `` bar '' ) .with ( `` baz '' , `` bat '' ) ; verify ( `` bar '' , tokens.get ( `` foo '' , String.class ) ) ; verify ( `` bat '' , tokens.get ( `` baz '' , String : :valueOf ) ) ; // line 21 } private void verify ( String expected , String actual ) { verify ( expected , new Token ( ) .withValue ( actual ) ) ; } private void verify ( String expected , Token actual ) { Assert .assertEquals ( expected , actual.getValue ( ) ) ; } } mvn clean test [ ERROR ] Failed to execute goal org.apache.maven.plugins : maven-compiler-plugin:3.8.0 : testCompile ( default-testCompile ) on project ambiguous : Compilation failure [ ERROR ] /C : /data/projects/java/ambiguous/src/test/java/ambiguous/TokenTest.java : [ 21,9 ] reference to verify is ambiguous [ ERROR ] both method verify ( java.lang.String , java.lang.String ) in ambiguous.TokenTest and method verify ( java.lang.String , ambiguous.Token ) in ambiguous.TokenTest match verify ( `` bat '' , tokens.get ( `` baz '' , e - > String.valueOf ( e ) ) ) ; verify ( `` bat '' , tokens.get ( `` baz '' , e - > e.toString ) ) ; verify ( `` bat '' , tokens.get ( `` baz '' , String.class ) ) ; verify ( `` bat '' , tokens.get ( `` baz '' , Object : :toString ) ) ; $ java -versionopenjdk version `` 1.8.0_201-1-ojdkbuild '' OpenJDK Runtime Environment ( build 1.8.0_201-1-ojdkbuild-b09 ) OpenJDK 64-Bit Server VM ( build 25.201-b09 , mixed mode )"
"byte [ ] bytes = { 1 , 2 , -3 } ; byte [ ] transferred = new String ( bytes , Charsets.UTF_8 ) .getBytes ( Charsets.UTF_8 ) ; [ 1 , 2 , -3 ] [ 1 , 2 , -17 , -65 , -67 ] [ 1 , 2 , -32 ] [ 1 , 2 , -17 , -65 , -67 ]"
"@ Component ( name = `` RestProcessorImpl '' , type = mediation // Compile error ) public class RestProcessorImpl { // impl } package spike1 ; public class HasType { public String type ( ) { return `` the type '' ; } } class UseType { def hasType = new HasType hasType.type ( ) // Compile error }"
public void clear ( ) { modCount++ ; // Let gc do its work for ( int i = 0 ; i < size ; i++ ) elementData [ i ] = null ; size = 0 ; }
class Foo { private Helper helper = null ; public Helper getHelper ( ) { if ( helper == null ) { synchronized ( this ) { if ( helper == null ) { helper = new Helper ( ) ; } } } return helper ; } }
^ ( ( [ a-zA-Z0-9 ] + [ _- ] * [ a-zA-Z0-9 ] * ) ( [ \\ . ] * [ a-zA-Z0-9 ] ) * ) + $ M45766235H.M96312865E @ EXAMPLE.COM import java.util.regex . * ; public class R { static final Pattern namePattern = Pattern.compile ( `` ^ ( ( [ a-zA-Z0-9 ] + [ _- ] * [ a-zA-Z0-9 ] * ) ( [ \\ . ] * [ a-zA-Z0-9 ] ) * ) + $ '' ) ; public static void main ( String ... args ) { final String userName = `` M45766235H.M96312865E @ EXAMPLE.COM '' ; Matcher matcher = namePattern.matcher ( userName ) ; System.out.println ( matcher.matches ( ) ) ; } } ^ [ \\w ] + [ \\w-_\\ . ] * [ \\w ] + $
"java.lang.IllegalStateException : A fatal developer error has occurred . Check the logs for further information . at com.google.android.gms.common.internal.zzi $ zza.zzc ( Unknown Source ) at com.google.android.gms.common.internal.zzi $ zza.zzr ( Unknown Source ) at com.google.android.gms.common.internal.zzi $ zzc.zznQ ( Unknown Source ) at com.google.android.gms.common.internal.zzi $ zzb.handleMessage ( Unknown Source ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:135 ) at android.app.ActivityThread.main ( ActivityThread.java:5254 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:903 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:698 ) < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' package= '' com.bearfishapps.cells.android '' android : versionCode= '' 1 '' android : versionName= '' 1.0 '' > < uses-sdk android : minSdkVersion= '' 10 '' android : targetSdkVersion= '' 22 '' / > < uses-permission android : name= '' android.permission.INTERNET '' / > < uses-permission android : name= '' android.permission.ACCESS_NETWORK_STATE '' / > < meta-data android : name= '' com.google.android.gms.games.APP_ID '' android : value= '' @ string/app_id '' / > < meta-data android : name= '' com.google.android.gms.version '' android : value= '' @ integer/google_play_services_version '' / > < application android : allowBackup= '' true '' android : icon= '' @ drawable/ic_launcher '' android : label= '' @ string/app_name '' android : theme= '' @ style/GdxTheme '' > < activity android : name= '' com.example.app.android.AndroidLauncher '' android : label= '' @ string/app_name '' android : screenOrientation= '' portrait '' android : configChanges= '' keyboard|keyboardHidden|orientation|screenSize '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < /intent-filter > < /activity > < activity android : name= '' com.purplebrain.adbuddiz.sdk.AdBuddizActivity '' android : theme= '' @ android : style/Theme.Translucent '' / > < /application > < /manifest > public class AndroidLauncher extends AndroidApplication implements GameHelper.GameHelperListener { private GameHelper gameHelper ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; if ( gameHelper == null ) { gameHelper = new GameHelper ( this , GameHelper.CLIENT_GAMES ) ; } gameHelper.setup ( this ) ; AndroidApplicationConfiguration config = new AndroidApplicationConfiguration ( ) ; initialize ( new Cells ( new ActionResolver ( ) { @ Override public boolean getSignedInGPGS ( ) { return gameHelper.isSignedIn ( ) ; } @ Override public void loginGPGS ( ) { try { runOnUiThread ( new Runnable ( ) { public void run ( ) { gameHelper.beginUserInitiatedSignIn ( ) ; } } ) ; } catch ( final Exception ex ) { } } @ Override public void submitScoreGPGS ( int score ) { Games.Leaderboards.submitScore ( gameHelper.getApiClient ( ) , `` CgkI6ZHYr9IEEAIQBg '' , score ) ; } @ Override public void getLeaderboardGPGS ( ) { if ( gameHelper.isSignedIn ( ) ) { startActivityForResult ( Games.Leaderboards.getLeaderboardIntent ( gameHelper.getApiClient ( ) , `` CgkI6ZHYr9IEEAIQBg `` ) , 100 ) ; } else if ( ! gameHelper.isConnecting ( ) ) { loginGPGS ( ) ; } } @ Override public void unlockAchievementGPGS ( String achievementId ) { Games.Achievements.unlock ( gameHelper.getApiClient ( ) , achievementId ) ; } @ Override public void getAchievementsGPGS ( ) { if ( gameHelper.isSignedIn ( ) ) { startActivityForResult ( Games.Achievements.getAchievementsIntent ( gameHelper.getApiClient ( ) ) , 101 ) ; } else if ( ! gameHelper.isConnecting ( ) ) { loginGPGS ( ) ; } } } ) , config ) ; } @ Override public void onStart ( ) { super.onStart ( ) ; gameHelper.onStart ( this ) ; } @ Override public void onStop ( ) { super.onStop ( ) ; gameHelper.onStop ( ) ; } @ Override public void onActivityResult ( int request , int response , Intent data ) { super.onActivityResult ( request , response , data ) ; gameHelper.onActivityResult ( request , response , data ) ; } @ Override public void onSignInFailed ( ) { } @ Override public void onSignInSucceeded ( ) { } }"
< input type= '' hidden '' name= '' $ { _csrf.parameterName } '' value= '' $ { _csrf.token } '' / >
if ( ( a1 == a2 & & b1 == b2 & & c1 == c2 ) || ( a1 == a2 & & b1 == c2 & & c1 == b2 ) || ( a1 == b2 & & b1 == a2 & & c1 == c2 ) || ( a1 == b2 & & b1 == c2 & & c1 == a2 ) || ( a1 == c2 & & b1 == a2 & & c1 == b2 ) || ( a1 == c2 & & b1 == b2 & & c1 == a2 ) ) // if true
File file = new File ( `` PartInquiryService.xml '' ) ; JAXBContext jaxbContext = JAXBContext.newInstance ( PartInquiryService.class ) ; Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller ( ) ; PartInquiryService partInqService = ( PartInquiryService ) jaxbUnmarshaller.unmarshal ( file ) ; < PartInquiryService xmlns= '' http : //cpps.xxx.com/splm-service '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' > < control > < type > inquiryWithServiceWindow < /type > < correlationId format= '' hex '' > A10488237F3B7734A10488237F3B7734A10488237F3B7734 < /correlationId > < origin > < system > CPPS-SPLM < /system > < id > MP2ZCP5 < /id > < at timeZone= '' UTC '' > < date format= '' ISO '' > 2008-12-12 < /date > < time format= '' ISO '' > 20:12:48 < /time > < /at > < /origin > < destination > < system > SPLM_GUI < /system > < id > SPLM_01 < /id > < /destination > < /control > < partInquiry > < customerSystemkey > 123456789123456 < /customerSystemkey > < countryCode type= '' IBM '' > 788 < /countryCode > < partnumber > 0000039M5123 < /partnumber > < machType > 1722 < /machType > < zipcode > 1066 VH < /zipcode > < /partInquiry > < inquiryResult > < errorMessage > Invalid part number XXXXXXXXXXXX received < /errorMessage > < zipcodeUsed > NL 1066 < /zipcodeUsed > < timeZone > MSK < /timeZone > < currency > EUR < /currency > < partnumber > < id > 0000039M5123 < /id > < subType > REQ < /subType > < description > POWER CORD < /description > < subRank > 0 < /subRank > < weigth > 10 < /weigth > < length > 12 < /length > < width > 9 < /width > < height > 11 < /height > < sellingPrice currency= '' EUR '' > 12.030 < /sellingPrice > < rohsInd > C < /rohsInd > < /partnumber > < partnumber > < id > 0000040K8888 < /id > < subType > ALT < /subType > < description > POWER CORD < /description > < subRank > 0 < /subRank > < weigth > 10 < /weigth > < length > 12 < /length > < width > 9 < /width > < height > 11 < /height > < sellingPrice currency= '' EUR '' > 12.030 < /sellingPrice > < rohsInd > D < /rohsInd > < /partnumber > < partnumber > < id > 0000012J1234 < /id > < subType > SUB < /subType > < description > POWER CORD < /description > < subRank > -1 < /subRank > < weigth > 10 < /weigth > < length > 12 < /length > < width > 9 < /width > < height > 11 < /height > < sellingPrice currency= '' EUR '' > 12.030 < /sellingPrice > < rohsInd > N < /rohsInd > < /partnumber > < sourceLocation > < locId > 788-5000 < /locId > < description > CENTRAL BUFFER VENLO < /description > < deliveryOption > < serviceWindow > Sameday 2hr < /serviceWindow > < logisticCost > 88.00 < /logisticCost > < date format= '' ISO '' > 2014-08-24 < /date > < time format= '' ISO '' > 10:56:00 < /time > < /deliveryOption > < deliveryOption > < serviceWindow > Next day 16:00 < /serviceWindow > < logisticCost > 10.00 < /logisticCost > < date format= '' ISO '' > 2014-08-25 < /date > < time format= '' ISO '' > 16:00:00 < /time > < /deliveryOption > < partInventory > < id > 0000039M5123 < /id > < availableStock > 1 < /availableStock > < /partInventory > < partInventory > < id > 0000040K8888 < /id > < availableStock > 5 < /availableStock > < /partInventory > < /sourceLocation > < sourceLocation > < locId > 821-9200 < /locId > < description > CRS ST PETERSBURG < /description > < deliveryOption > < serviceWindow > Sameday 2hr < /serviceWindow > < logisticCost > 88.00 < /logisticCost > < date format= '' ISO '' > 2014-08-24 < /date > < time format= '' ISO '' > 10:56:00 < /time > < /deliveryOption > < deliveryOption > < serviceWindow > Next day 16:00 < /serviceWindow > < logisticCost > 10.00 < /logisticCost > < date format= '' ISO '' > 2014-08-25 < /date > < time format= '' ISO '' > 16:00:00 < /time > < /deliveryOption > < partInventory > < id > 0000039M5123 < /id > < availableStock > 1 < /availableStock > < /partInventory > < partInventory > < id > 0000040K8888 < /id > < availableStock > 5 < /availableStock > < /partInventory > < /sourceLocation > < sourceLocation > < locId > 821-1102 < /locId > < description > LSH MOSCOW DUTY PAID < /description > < deliveryOption > < serviceWindow > Sameday 2hr < /serviceWindow > < logisticCost > 88.00 < /logisticCost > < date format= '' ISO '' > 2014-08-24 < /date > < time format= '' ISO '' > 10:56:00 < /time > < /deliveryOption > < deliveryOption > < serviceWindow > Next day 16:00 < /serviceWindow > < logisticCost > 10.00 < /logisticCost > < date format= '' ISO '' > 2014-08-25 < /date > < time format= '' ISO '' > 16:00:00 < /time > < /deliveryOption > < partInventory > < id > 0000039M5123 < /id > < availableStock > 1 < /availableStock > < /partInventory > < partInventory > < id > 0000040K8888 < /id > < availableStock > 5 < /availableStock > < /partInventory > < /sourceLocation > < /inquiryResult > < /PartInquiryService > public class PartInquiryService { private Control control ; private PartInquiry partInqury ; private InquiryResult inquiryResult ; public Control getControl ( ) { return control ; } public void setControl ( Control control ) { this.control = control ; } public PartInquiry getPartInqury ( ) { return partInqury ; } public void setPartInqury ( PartInquiry partInqury ) { this.partInqury = partInqury ; } public InquiryResult getInquiryResult ( ) { return inquiryResult ; } public void setInquiryResult ( InquiryResult inquiryResult ) { this.inquiryResult = inquiryResult ; } }
String str = `` Hello '' ; str += ( ( char ) 97 ) +2 ; // str = `` Hello99 '' ; str = str + ( ( char ) 97 ) +2 ; // str = `` Helloa2 '' ;
"foo += foo + 1 ; //Break Statement Boolean exit = false ; int foo = 1 , bar = 60 ; while ( ! exit ) { foo+=foo+1 ; //Bad Code //foo++ ; //Good Code //foo=foo+1 ; // Good Code //foo+=1 ; // Good Code //System.out.println ( foo ) ; //Results in -1 ( Infinite Loop ) if ( foo == bar ) { break ; } System.out.println ( `` stuff '' ) ; }"
"public class DataClient implements Client { private RestTemplate restTemplate = new RestTemplate ( new HttpComponentsClientHttpRequestFactory ( ) ) ; private ExecutorService service = Executors.newFixedThreadPool ( 15 ) ; public Future < DataResponse > getData ( DataKey key ) { DataExecutorTask task = new DataExecutorTask ( key , restTemplate ) ; Future < DataResponse > future = service.submit ( task ) ; return future ; } } public class DataExecutorTask implements Callable < DataResponse > { private DataKey key ; private RestTemplate restTemplate ; public DataExecutorTask ( DataKey key , RestTemplate restTemplate ) { this.restTemplate = restTemplate ; this.key = key ; } @ Override public DataResponse call ( ) { DataResponse dataResponse = null ; ResponseEntity < String > response = null ; MappingsHolder mappings = ShardMappings.getMappings ( key.getTypeOfFlow ( ) ) ; // given a userId , find all the hostnames // it can also have four hostname or one hostname or six hostname as well in the list List < String > hostnames = mappings.getListOfHostnames ( key.getUserId ( ) ) ; for ( String hostname : hostnames ) { // If host name is null or host name is in local block list , skip sending request to this host if ( ClientUtils.isEmpty ( hostname ) || ShardMappings.isBlockHost ( hostname ) ) { continue ; } try { String url = generateURL ( hostname ) ; response = restTemplate.exchange ( url , HttpMethod.GET , key.getEntity ( ) , String.class ) ; if ( response.getStatusCode ( ) == HttpStatus.NO_CONTENT ) { dataResponse = new DataResponse ( response.getBody ( ) , DataErrorEnum.NO_CONTENT , DataStatusEnum.SUCCESS ) ; } else { dataResponse = new DataResponse ( response.getBody ( ) , DataErrorEnum.OK , DataStatusEnum.SUCCESS ) ; } break ; // below codes are duplicated looks like } catch ( HttpClientErrorException ex ) { HttpStatusCodeException httpException = ( HttpStatusCodeException ) ex ; DataErrorEnum error = DataErrorEnum.getErrorEnumByException ( httpException ) ; String errorMessage = httpException.getResponseBodyAsString ( ) ; dataResponse = new DataResponse ( errorMessage , error , DataStatusEnum.ERROR ) ; return dataResponse ; } catch ( HttpServerErrorException ex ) { HttpStatusCodeException httpException = ( HttpStatusCodeException ) ex ; DataErrorEnum error = DataErrorEnum.getErrorEnumByException ( httpException ) ; String errorMessage = httpException.getResponseBodyAsString ( ) ; dataResponse = new DataResponse ( errorMessage , error , DataStatusEnum.ERROR ) ; return dataResponse ; } catch ( RestClientException ex ) { // if it comes here , then it means some of the servers are down so adding it into block list ShardMappings.blockHost ( hostname ) ; } } if ( ClientUtils.isEmpty ( hostnames ) ) { dataResponse = new DataResponse ( null , DataErrorEnum.PERT_ERROR , DataStatusEnum.ERROR ) ; } else if ( response == null ) { // either all the servers are down or all the servers were in block list dataResponse = new DataResponse ( null , DataErrorEnum.SERVICE_UNAVAILABLE , DataStatusEnum.ERROR ) ; } return dataResponse ; } } ShardMappings.blockHost ( hostname ) ; ShardMappings.isBlockHost ( hostname ) ; public class Hosts { private final LinkedList < String > hostsnames = new LinkedList < String > ( ) ; public Hosts ( final List < String > hosts ) { checkNotNull ( hosts , `` hosts can not be null '' ) ; this.hostsnames.addAll ( hosts ) ; } public Optional < String > getNextAvailableHostname ( ) { while ( ! hostsnames.isEmpty ( ) ) { String firstHostname = hostsnames.removeFirst ( ) ; if ( ! ClientUtils.isEmpty ( firstHostname ) & & ! ShardMappings.isBlockHost ( firstHostname ) ) { return Optional.of ( firstHostname ) ; } } return Optional.absent ( ) ; } public boolean isEmpty ( ) { return hostsnames.isEmpty ( ) ; } }"
"protected void showDialog ( final Activity activity ) { dialog = new Dialog ( activity ) ; dialog.requestWindowFeature ( Window.FEATURE_NO_TITLE ) ; dialog.setCancelable ( false ) ; dialog.setContentView ( dialog_layout ) ; // Set background color of the dialog ConstraintLayout currentLayout = ( ConstraintLayout ) dialog.findViewById ( R.id.Dialog ) ; // setup of views etc ... // Finally dislay ` Dialog ` dialog.show ( ) ; // Method called to start a ` DialogTimer ` which extends ` CountDownTimer ` } public class MainActivity extends AppCompatActivity { private static Context appContext ; private static ViewDialog notify ; protected void onCreate ( Bundle savedInstanceState ) { // methods and processing etc ... // time to display dialog notify = new ViewDialog ( mParameters , mThemeHandler ) ; // ******************** Show dialog box ******************* notify.showDialog ( activity : this ) ; // showDialog just calls ` Dialog.show ( ) ` notify.ApplyTheme ( ) ; } mButton1.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { CancelTimer ( ) ; activity.finishAndRemoveTask ( ) ; dialog.dismiss ( ) ;"
"import org.springframework.data.annotation.Id ; public ESDocument { @ Id private String id ; private String field1 ; @ JsonIgnore public String getId ( ) { return id ; } public String getField1 ( ) { return field1 ; } { `` _index '' : `` test_index '' , `` _type '' : `` _doc '' , `` _id '' : `` d5bf7b5c-7a44-42f9-94d6-d59fe3988482 '' , `` _score '' : 1.0 , `` _source '' : { `` field1 '' : `` blabla '' } } { `` _index '' : `` test_index '' , `` _type '' : `` _doc '' , `` _id '' : `` d5bf7b5c-7a44-42f9-94d6-d59fe3988482 '' , `` _score '' : 1.0 , `` _source '' : { `` id '' : `` d5bf7b5c-7a44-42f9-94d6-d59fe3988482 '' , `` field1 '' : `` blabla '' } }"
"public class Node < DataT , NodeT extends Node < DataT , NodeT > > { ... } Node < String , Node < String , Node < String , Node < ... > > > > myNode = new Node < String , Node < String , Node < String , Node < ... > > > > ;"
String str1 = new StringBuilder ( `` 计算机 '' ) .append ( `` 软件 '' ) .toString ( ) ; System.out.println ( str1.intern ( ) == str1 ) ; //trueString str2 = new StringBuilder ( `` ja '' ) .append ( `` va '' ) .toString ( ) ; System.out.println ( str2.intern ( ) == str2 ) ; //falseString str3 = new StringBuilder ( `` Str '' ) .append ( `` ing '' ) .toString ( ) ; System.out.println ( str3.intern ( ) == str3 ) ; //true
"kitten - > sitting1.replace k with s2.keep i3.keep t4.keep t5.replace t6.add g import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class Principal { static int c1 , c2 , c3 ; static String word1 , word2 ; public static void main ( String [ ] args ) throws FileNotFoundException { Scanner data_in = new Scanner ( new File ( `` data.in '' ) ) ; word1 = data_in.next ( ) ; word2 = data_in.next ( ) ; c1 = data_in.nextInt ( ) ; c2 = data_in.nextInt ( ) ; c3 = data_in.nextInt ( ) ; System.out.printf ( `` \nInsert : % s , Delete : % s , Replace : % s\n '' , c1 , c2 , c3 ) ; System.out.printf ( `` \nLevenstheinDistance : % s '' , LevenshteinDistance ( word1 , word2 , c1 , c2 , c3 ) ) ; } private static int LevenshteinDistance ( String str1 , String str2 , int InsCost , int DelCost , int ReplCost ) { if ( word1.length ( ) == 0 ) return InsCost*str1.length ( ) ; if ( word2.length ( ) == 0 ) return DelCost*str2.length ( ) ; int substitutionCost = ReplCost ; if ( ReplCost > InsCost + DelCost ) ReplCost = InsCost + DelCost ; Solution [ ] [ ] ManageSol = new Solution [ str1.length ( ) +1 ] [ str2.length ( ) +1 ] ; for ( int i = 0 ; i < = str1.length ( ) ; i++ ) { for ( int j = 0 ; j < = str2.length ( ) ; j++ ) { ManageSol [ i ] [ j ] = new Solution ( ) ; } } System.out.printf ( `` \nLungime str1 : % s '' , str1.length ( ) ) ; System.out.printf ( `` \nLungime str2 : % s '' , str2.length ( ) ) ; for ( int i = 0 ; i < = str1.length ( ) ; i++ ) { for ( int j = 0 ; j < = str2.length ( ) ; j++ ) { if ( i == 0 ) ManageSol [ i ] [ j ] .solution = j ; else if ( j == 0 ) ManageSol [ i ] [ j ] .solution = i ; else if ( str1.charAt ( i - 1 ) == str2.charAt ( j - 1 ) ) { substitutionCost = 0 ; ManageSol [ i ] [ j ] .ecqualTo ( minimum ( ManageSol [ i ] [ j - 1 ] .solution + InsCost , ManageSol [ i - 1 ] [ j ] .solution + DelCost , ManageSol [ i - 1 ] [ j - 1 ] .solution + substitutionCost ) ) ; System.out.printf ( `` \nManagerSol [ % s , % s ] : ch1 : % s , ch2 : % s '' , i , j , str1.charAt ( i - 1 ) , str2.charAt ( j - 1 ) ) ; } else { substitutionCost = 1 ; ManageSol [ i ] [ j ] .ecqualTo ( minimum ( ManageSol [ i ] [ j - 1 ] .solution + InsCost , ManageSol [ i - 1 ] [ j ] .solution + DelCost , ManageSol [ i - 1 ] [ j - 1 ] .solution + substitutionCost ) ) ; System.out.printf ( `` \nManagerSol [ % s , % s ] : ch1 : % s , ch2 : % s '' , i , j , str1.charAt ( i - 1 ) , str2.charAt ( j - 1 ) ) ; } } } System.out.printf ( `` \n '' ) ; path ( ManageSol , str1.length ( ) , str2.length ( ) , str1 , str2 ) ; System.out.printf ( `` \n '' ) ; for ( int i = 0 ; i < = str1.length ( ) ; i++ ) { for ( int j = 0 ; j < = str2.length ( ) ; j++ ) { System.out.printf ( `` [ % s , % s ] : ( % s , % s ) `` , i , j , ManageSol [ i ] [ j ] .solution , ManageSol [ i ] [ j ] .operation ) ; } System.out.printf ( `` \n '' ) ; } return ManageSol [ str1.length ( ) ] [ str2.length ( ) ] .solution ; } static int minimum ( int x , int y ) { if ( x > = y ) return x ; return y ; } static Solution minimum ( int Ins , int Del , int Replace ) { Solution solution = null ; if ( Ins < = Del & & Ins < = Replace ) { solution = new Solution ( ) ; solution.operation = 1 ; solution.solution = Ins ; return solution ; } else if ( Del < = Ins & & Del < = Replace ) { solution = new Solution ( ) ; solution.operation = 2 ; solution.solution = Del ; return solution ; } else { solution = new Solution ( ) ; solution.solution = Replace ; solution.operation = 0 ; return solution ; } } //my failure , function that should display steps static void path ( Solution [ ] [ ] ManagerSol , int i , int j , String str1 , String str2 ) { if ( ManagerSol [ i ] [ j ] .operation == 0 ) { System.out.printf ( `` \nReplace % s - > % s '' , str1.charAt ( i-1 ) , str2.charAt ( j-1 ) ) ; if ( i > 1 & & j > 1 ) path ( ManagerSol , i-1 , j-1 , str1 , str2 ) ; } if ( ManagerSol [ i ] [ j ] .operation == 1 ) { System.out.printf ( `` \nAdd % s on position % s '' , str2.charAt ( j-1 ) , i-1 ) ; if ( j > 1 ) path ( ManagerSol , i , j-1 , str1 , str2 ) ; } if ( ManagerSol [ i ] [ j ] .operation == 2 ) { System.out.printf ( `` \nDelete % s '' , str1.charAt ( i-1 ) ) ; if ( j > 1 ) path ( ManagerSol , i-1 , j , str1 , str2 ) ; } } } [ 0,0 ] : ( 0,3 ) [ 0,1 ] : ( 1,3 ) [ 0,2 ] : ( 2,3 ) [ 0,3 ] : ( 3,3 ) [ 0,4 ] : ( 4,3 ) [ 0,5 ] : ( 5,3 ) [ 0,6 ] : ( 6,3 ) [ 0,7 ] : ( 7,3 ) [ 1,0 ] : ( 1,3 ) [ 1,1 ] : ( 1,0 ) [ 1,2 ] : ( 2,1 ) [ 1,3 ] : ( 3,1 ) [ 1,4 ] : ( 4,1 ) [ 1,5 ] : ( 5,1 ) [ 1,6 ] : ( 6,1 ) [ 1,7 ] : ( 7,1 ) [ 2,0 ] : ( 2,3 ) [ 2,1 ] : ( 2,2 ) [ 2,2 ] : ( 1,0 ) [ 2,3 ] : ( 2,1 ) [ 2,4 ] : ( 3,1 ) [ 2,5 ] : ( 4,1 ) [ 2,6 ] : ( 5,1 ) [ 2,7 ] : ( 6,1 ) [ 3,0 ] : ( 3,3 ) [ 3,1 ] : ( 3,2 ) [ 3,2 ] : ( 2,2 ) [ 3,3 ] : ( 1,0 ) [ 3,4 ] : ( 2,1 ) [ 3,5 ] : ( 3,1 ) [ 3,6 ] : ( 4,1 ) [ 3,7 ] : ( 5,1 ) [ 4,0 ] : ( 4,3 ) [ 4,1 ] : ( 4,2 ) [ 4,2 ] : ( 3,2 ) [ 4,3 ] : ( 2,2 ) [ 4,4 ] : ( 1,0 ) [ 4,5 ] : ( 2,1 ) [ 4,6 ] : ( 3,1 ) [ 4,7 ] : ( 4,1 ) [ 5,0 ] : ( 5,3 ) [ 5,1 ] : ( 5,2 ) [ 5,2 ] : ( 4,2 ) [ 5,3 ] : ( 3,2 ) [ 5,4 ] : ( 2,2 ) [ 5,5 ] : ( 2,0 ) [ 5,6 ] : ( 3,1 ) [ 5,7 ] : ( 4,1 ) [ 6,0 ] : ( 6,3 ) [ 6,1 ] : ( 6,2 ) [ 6,2 ] : ( 5,2 ) [ 6,3 ] : ( 4,2 ) [ 6,4 ] : ( 3,2 ) [ 6,5 ] : ( 3,2 ) [ 6,6 ] : ( 2,0 ) [ 6,7 ] : ( 3,1 )"
public class Deadlock { public static void main ( String [ ] args ) { Thread t1 = new Thread ( new DeadlockRunnable ( ) ) ; t1.start ( ) ; } } class DeadlockRunnable implements Runnable { static Object firstData = new Object ( ) ; static Object secondData = new Object ( ) ; public void run ( ) { synchronized ( firstData ) { synchronized ( secondData ) { System.out.println ( `` *** Successfully acquired both the locks '' ) ; } } } }
"URL serverUrl = new URL ( url ) ; urlConnection = ( HttpURLConnection ) serverUrl.openConnection ( ) ; urlConnection.setDoInput ( true ) ; urlConnection.setRequestMethod ( `` GET '' ) ; urlConnection.setRequestProperty ( `` Content-Type '' , `` application/pdf '' ) ; urlConnection.setRequestProperty ( `` ENCTYPE '' , `` multipart/form-data '' ) ; String contentLength = urlConnection.getHeaderField ( `` Content-Length '' ) ; bufferedInputStream = new BufferedInputStream ( urlConnection.getInputStream ( ) ) ; File dir = new File ( context.getFilesDir ( ) , mFolder ) ; if ( ! dir.exists ( ) ) dir.mkdir ( ) ; final File f = new File ( dir , String.valueOf ( documentName ) ) ; f.createNewFile ( ) ; final BufferedOutputStream bufferedOutputStream = new BufferedOutputStream ( new FileOutputStream ( f , true ) ) ; //true for appendMode final BlockingQueue < ByteArrayWrapper > blockingQueue = new ArrayBlockingQueue < ByteArrayWrapper > ( MAX_VALUE , true ) ; final byte [ ] dataBuffer = new byte [ MAX_VALUE ] ; Thread readerThread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { int count = 0 ; while ( ( count = bufferedInputStream.read ( dataBuffer , 0 , dataBuffer.length ) ) ! = -1 ) { ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper ( dataBuffer ) ; byteArrayWrapper.setBytesReadCount ( count ) ; blockingQueue.put ( byteArrayWrapper ) ; } blockingQueue.put ( null ) ; //end of file } catch ( Exception e ) { e.printStackTrace ( ) ; } finally { try { bufferedInputStream.close ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } } } ) ; Thread writerThread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { while ( true ) { ByteArrayWrapper byteWrapper = blockingQueue.take ( ) ; if ( null == byteWrapper ) break ; bufferedOutputStream.write ( byteWrapper.getBytesRead ( ) , 0 , byteWrapper.getBytesReadCount ( ) ) ; } bufferedOutputStream.flush ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } finally { try { bufferedOutputStream.close ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } } } ) ; readerThread.start ( ) ; writerThread.start ( ) ;"
"default V getOrDefault ( Object key , V defaultValue ) { V v ; return ( ( v = get ( key ) ) ! = null ) || containsKey ( key ) ? v : defaultValue ; } default V getOrDefault ( Object key , V defaultValue ) { V v = get ( key ) ; return v ! = null || containsKey ( key ) ? v : defaultValue ; } public V getOrDefault ( java.lang.Object , V ) ; Code : 0 : aload_0 1 : aload_1 2 : invokeinterface # 1 , 2 // InterfaceMethod get : ( Ljava/lang/Object ; ) Ljava/lang/Object ; 7 : dup // < -- difference here 8 : astore_3 9 : ifnonnull 22 12 : aload_0 13 : aload_1 14 : invokeinterface # 2 , 2 // InterfaceMethod containsKey : ( Ljava/lang/Object ; ) Z 19 : ifeq 26 22 : aload_3 23 : goto 27 26 : aload_2 27 : areturn public V getOrDefault ( java.lang.Object , V ) ; Code : 0 : aload_0 1 : aload_1 2 : invokeinterface # 1 , 2 // InterfaceMethod get : ( Ljava/lang/Object ; ) Ljava/lang/Object ; 7 : astore_3 8 : aload_3 // < -- difference here 9 : ifnonnull 22 12 : aload_0 13 : aload_1 14 : invokeinterface # 2 , 2 // InterfaceMethod containsKey : ( Ljava/lang/Object ; ) Z 19 : ifeq 26 22 : aload_3 23 : goto 27 26 : aload_2 27 : areturn"
"public class MainActivity extends AppCompatActivity { ListView listView ; Button addStudent ; ArrayList < Student > students = new ArrayList < Student > ( ) ; protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; add ( ) ; } public void add ( ) { Student student ; addStudent = ( Button ) findViewById ( R.id.add ) ; addStudent.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { Intent intent = new Intent ( MainActivity.this , AddActivity.class ) ; startActivity ( intent ) ; } } ) ; } } public class AddActivity extends AppCompatActivity { EditText name , phone ; Button add ; int FphoneNumber ; String Fname ; ArrayList < Student > students ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; Intent intent = getIntent ( ) ; students = ( ArrayList < Student > ) getIntent ( ) .getSerializableExtra ( `` AddNewStudent '' ) ; setContentView ( R.layout.activity_add ) ; edit ( ) ; addStudent ( ) ; } public void edit ( ) { name = ( EditText ) findViewById ( R.id.StudentName ) ; phone = ( EditText ) findViewById ( R.id.phone ) ; final Button addStudent = ( Button ) findViewById ( R.id.AddStudent ) ; name.addTextChangedListener ( new TextWatcher ( ) { @ Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { } @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { addStudent.setEnabled ( ! name.getText ( ) .toString ( ) .trim ( ) .isEmpty ( ) ) ; Fname = name.getText ( ) .toString ( ) ; String phoneNumber = phone.getText ( ) .toString ( ) ; FphoneNumber = Integer.parseInt ( phoneNumber ) ; } @ Override public void afterTextChanged ( Editable s ) { } } ) ; } public void addStudent ( ) { add = ( Button ) findViewById ( R.id.AddStudent ) ; add.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { Intent intent = new Intent ( AddActivity.this , MainActivity.class ) ; intent.putExtra ( `` studentName '' , name.getText ( ) .toString ( ) ) ; intent.putExtra ( `` phoneNumber '' , phone.getText ( ) .toString ( ) ) ; startActivity ( intent ) ; Student student = new Student ( Fname , FphoneNumber ) ; students.add ( student ) ; } } ) ; } public void addStudent ( ) { add = ( Button ) findViewById ( R.id.AddStudent ) ; add.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { Intent intent = new Intent ( AddActivity.this , Record.class ) ; startActivity ( intent ) ; } } ) ; } public class Student { String mName ; int mPhoneNumber ; public Student ( String name , int number ) { mName = name ; mPhoneNumber = number ; } ; public String getmName ( ) { return mName ; } public String getmName ( String newName ) { return ( this.mName = newName ) ; } public int getmPhoneNumber ( ) { return this.mPhoneNumber ; } public int getmPhoneNumber ( int newPhoneNumber ) { return ( this.mPhoneNumber = newPhoneNumber ) ; } @ Overridepublic String toString ( ) { return String.format ( `` % s\t % f '' , this.mName , this.mPhoneNumber ) ; }"
for ( String line : lines ) { if ( voc.contains ( line ) ) { // Great ! ! } }
if ( javaList.contains ( `` aaa '' ) ||javaList.contains ( `` abc '' ) ||javaList.contains ( `` abc '' ) ) { //do something }
public abstract class Table < E extends Element > extends ArrayList < E > { // a lot of other stuff . public Table < E > map ( /*WHAT DO I PUT HERE ? */ mapper ) { return this.stream ( ) .map ( mapper ) .collect ( /*WHAT DO I PUT HERE ? */ ) ; } public Table < E > filter ( /*WHAT DO I PUT HERE ? */ predicate ) { return this.stream ( ) .filter ( predicate ) .collect ( /*WHAT DO I PUT HERE ? */ ) ; } }
String strFlag= '' true '' ; boolean boolFlag = Boolean.getBoolean ( strFlag ) ;
"Map < String , < boolean , boolean , boolean , boolean > >"
type empty struct { } func ( e *empty ) Allocated ( ) bool { return e ! = nil } class Test { public boolean Allocated ( ) { return this ! = null ; } }
"public class JavaFXApplication extends Application { public static final String TOOLBAR_MAIN = `` toolbarMain '' ; public static final String TOOLBAR_MAIN_FXML = `` /fxml/ToolbarMain.fxml '' ; public static final String TOOLBAR_SUB = `` toolbarSub '' ; public static final String TOOLBAR_SUB_FXML = `` /fxml/ToolbarSub.fxml '' ; public static final String NEW_SESSION_PANEL = `` newSession '' ; public static final String NEW_SESSION_PANEL_FXML = `` /fxml/NewSessionPanel.fxml '' ; public static final String OPEN_SESSION_PANEL = `` openSession '' ; public static final String OPEN_SESSION_PANEL_FXML = `` /fxml/OpenSessionPanel.fxml '' ; public static final String CONNECTIONS_PANEL = `` connections '' ; public static final String CONNECTIONS_PANEL_FXML = `` /fxml/ConnectionsPanel.fxml '' ; public static final String LOGS_PANEL = `` logs '' ; public static final String LOGS_PANEL_FXML = `` /fxml/LogsPanel.fxml '' ; public static final String EXCEPTIONS_PANEL = `` exceptions '' ; public static final String EXCEPTIONS_PANEL_FXML = `` /fxml/ExceptionsPanel.fxml '' ; public static final String MESSAGES_PANEL = `` messages '' ; public static final String MESSAGES_PANEL_FXML = `` /fxml/MessagesPanel.fxml '' ; public static ScreensController menuContainer = new ScreensController ( ) ; public static ScreensController contentContainer = new ScreensController ( ) ; public static ServerService server = new ServerService ( ) ; public static Stage STAGE ; @ Override public void start ( Stage primaryStage ) throws Exception { STAGE = primaryStage ; primaryStage.setOnCloseRequest ( ( WindowEvent t ) - > { if ( server.isRunning ( ) ) { server.cancel ( ) ; } } ) ; menuContainer.loadScreen ( JavaFXApplication.TOOLBAR_MAIN , JavaFXApplication.TOOLBAR_MAIN_FXML ) ; menuContainer.loadScreen ( JavaFXApplication.TOOLBAR_SUB , JavaFXApplication.TOOLBAR_SUB_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.NEW_SESSION_PANEL , JavaFXApplication.NEW_SESSION_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.OPEN_SESSION_PANEL , JavaFXApplication.OPEN_SESSION_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.NEW_SESSION_PANEL , JavaFXApplication.NEW_SESSION_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.CONNECTIONS_PANEL , JavaFXApplication.CONNECTIONS_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.LOGS_PANEL , JavaFXApplication.LOGS_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.EXCEPTIONS_PANEL , JavaFXApplication.EXCEPTIONS_PANEL_FXML ) ; contentContainer.loadScreen ( JavaFXApplication.MESSAGES_PANEL , JavaFXApplication.MESSAGES_PANEL_FXML ) ; menuContainer.setScreen ( JavaFXApplication.TOOLBAR_MAIN ) ; contentContainer.setScreen ( JavaFXApplication.NEW_SESSION_PANEL ) ; SplitPane root = new SplitPane ( ) ; root.getItems ( ) .addAll ( menuContainer , contentContainer ) ; Scene scene = new Scene ( root ) ; primaryStage.setScene ( scene ) ; primaryStage.show ( ) ; primaryStage.setResizable ( false ) ; primaryStage.setTitle ( `` Exam Supervisor '' ) ; } public class ScreensController extends StackPane { private HashMap < String , Node > screens = new HashMap < > ( ) ; public void addScreen ( String name , Node screen ) { screens.put ( name , screen ) ; } public boolean loadScreen ( String name , String resource ) { try { FXMLLoader myLoader = new FXMLLoader ( getClass ( ) .getResource ( resource ) ) ; System.out.println ( `` name : '' + name + `` , resource '' + resource + `` , loader : '' + myLoader.getLocation ( ) ) ; Parent loadScreen = myLoader.load ( ) ; ControlledScreen myScreenControler = myLoader.getController ( ) ; myScreenControler.setScreenParent ( this ) ; addScreen ( name , loadScreen ) ; return true ; } catch ( Exception e ) { System.out.println ( `` name : `` + name + `` , resource '' + resource + `` , exception : `` + e.getMessage ( ) ) ; return false ; } } public boolean setScreen ( final String name ) { if ( screens.get ( name ) ! = null ) { final DoubleProperty opacity = opacityProperty ( ) ; if ( ! getChildren ( ) .isEmpty ( ) ) { getChildren ( ) .remove ( 0 ) ; getChildren ( ) .add ( 0 , screens.get ( name ) ) ; } else { getChildren ( ) .add ( screens.get ( name ) ) ; } return true ; } else { System.out.println ( screens.get ( name ) + `` , screen has n't been loaded ! \n '' ) ; return false ; } } public boolean unloadScreen ( String name ) { if ( screens.remove ( name ) == null ) { System.out.println ( `` Screen did n't exist '' ) ; return false ; } else { return true ; } } }"
"int add ( int x , int y ) { return x + y ; } int addTwice ( int x , int y ) { return add ( x , y ) + add ( x , y ) ; }"
Class Enum < E extends Enum < E > >
"+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+| Key A | Access Bits | GP | Key B || ( 6 bytes ) | ( 3 bytes ) | B | ( 6 bytes ) |+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ + -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ | Bit 0 | Bit 1 | Bit 2 | Bit 3 | Bit 4 | Bit 5 | Bit 6 | Bit 7 | + -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+Byte 6 : | nC2_3 | nC2_2 | nC2_1 | nC2_0 | nC1_3 | nC1_2 | nC1_1 | nC1_0 | + -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+Byte 7 : | C1_3 | C1_2 | C1_1 | C1_0 | nC3_3 | nC3_2 | nC3_1 | nC3_0 | + -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+Byte 8 : | C3_3 | C3_2 | C3_1 | C3_0 | C2_3 | C2_2 | C2_1 | C2_0 | + -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+ -- -- -- -+Where nCx_y = not Cx_y and `` C1_x , C2_x , C3_x '' is the access condition for block x : C1_3 , C2_3 , C3_3 : sector trailer ( block 3 in this sector ) C1_2 , C2_2 , C3_2 : block 2 in this sectorC1_1 , C2_1 , C3_1 : block 1 in this sectorC1_0 , C2_0 , C3_0 : block 0 in this sector"
"public class TestClass { public void doSth ( String str , String l , Object ... objects ) { System.out.println ( `` A '' ) ; } public void doSth ( String str , Object ... objects ) { System.out.println ( `` B '' ) ; } } public class TestClass { public void doSth ( String str , long l , Object ... objects ) { System.out.println ( `` A '' ) ; } public void doSth ( String str , Object ... objects ) { System.out.println ( `` B '' ) ; } }"
public class SuperClass { SuperClass ( ) { x = true ; } public boolean x ; } public class SubClass extends SuperClass { SubClass ( ) { x = false ; } }
XDesktop xDesk = ( ... ) // achive desktopxDesk.terminate ( ) ; Runtime.getRuntime ( ) .exec ( `` pkill soffice '' ) ; // `` taskkill /IM soffice '' on windows disposeThread.stop ( ) ;
Integer time = 12 ; Double lateTime = 12.30 ; Boolean late = false ; Double result = late ? lateTime : time ; //Why here can I assign an Integer to a Double ? System.out.println ( result ) ; Integer time = 12 ; Double lateTime = 12.30 ; Double result = time ; //Integer can not be converted to DoubleSystem.out.println ( result ) ;
// Find a power of 2 > = initialCapacity198 int capacity = 1 ; 199 while ( capacity < initialCapacity ) 200 capacity < < = 1 ;
"s.replaceFirst ( `` \\.0* $ | ( \\.\\d* ? ) 0+ $ '' , `` $ 1 '' ) ; assertEquals ( `` 23 '' , removeTrailingZeros ( `` 23.00 '' ) ) ;"
"static void test ( ) { Person p = new Person ( ) ; WeakReference < Person > person = new WeakReference < > ( p ) ; p = null ; System.gc ( ) ; System.out.println ( person.get ( ) ) ; System.out.println ( person ) ; } static class Person { String name ; } static class PersonMetadata { String someData ; public PersonMetadata ( String met ) { someData = met ; } } public static void main ( String [ ] args ) { Person p = new Person ( ) ; p.name = `` John '' ; WeakHashMap < Person , PersonMetadata > map = new WeakHashMap < > ( ) ; PersonMetadata meta = new PersonMetadata ( `` Geek '' ) ; map.put ( p , meta ) ; p = null ; System.gc ( ) ; if ( map.values ( ) .contains ( meta ) ) { System.out.println ( `` Value present '' ) ; } else { System.out.println ( `` Value gone '' ) ; } } static class Person { String name ; } static class PersonMetadata { String someData ; public PersonMetadata ( String met ) { someData = met ; } }"
"public class Invoker { private final Method delegate ; public Invoker ( Method delegate ) { this.delegate = delegate ; } public Object execute ( Object target , Object [ ] args ) { return delegate.invoke ( target , args ) ; } } public class Invoker { private final Method delegate ; private final MethodHandle handle ; public Invoker ( Method delegate ) { this.delegate = delegate ; this.handle = MethodHandles.lookup ( ) .unreflect ( delegate ) ; } public Object execute ( Object target , Object [ ] args ) throws InvocationTargetException , IllegalAccessException { Object [ ] allArgs = Stream.concat ( Stream.of ( target ) , Stream.of ( args ) ) .toArray ( Object [ ] : :new ) ; return handle.invokeWithArguments ( allArgs ) ; } } public String test ( int i , String ... args ) { return ... ; } Object [ ] args = new Object [ ] { 10 , new String [ ] { `` aaa '' , `` bbb '' } } ; handle.invokeWithArguments ( 10 , `` aaa '' , `` bbb '' )"
"byte [ ] eachPass = new byte [ 1600 ] ; //used to store data from TargetDataLine for each passbyte [ ] backingArray = new byte [ 16000 ] ; //the complete data for one secondByteBuffer buffer = ByteBuffer.wrap ( backingArray ) ; //buffer which stores the complete datashort [ ] audioSample = new short [ 16000/2 ] ; //audio samples to be encodedint passCounter = 0 ; /* After 10th pass , convert the byte [ ] to short [ ] * using ByteBuffer */int seconds = 0 ; // used to store the position of the packet while ( keepCapturing == true ) { -- set up the java.awt.Robot and TargetDataLine before entering the loop -- -- use java.awt.Robot to record the screen -- -- do some other stuff , if needed -- fromMic.read ( eachPass,0 , eachPass.length ) ; // read data from microphone buffer.put ( eachPass ) ; //put it in a bigger buffer if ( passCounter ! =0 & & passCounter % 10==0 ) { // is it 10th frame ? passCounter = 0 ; //reset counter seconds++ ; buffer.asShortBuffer.get ( audioSamples ) ; //get short [ ] in BigEndian format -- encode the audio at position ( seconds-1 ) -- buffer.clear ( ) ; } else { passCounter++ ; }"
"public class Generics { public static void main ( String [ ] args ) { method ( Integer.class ) ; } public static < T > T method ( Class < T > t ) { return ( T ) new String ( ) ; } } public class Generics { public static void main ( String [ ] args ) { method ( Integer.class ) .intValue ( ) ; } public static < T > T method ( Class < T > t ) { return ( T ) new String ( ) ; } } public static < T > T unmarshal ( File file , Class < ? extends T > clazz )"
"import android.databinding . * ; public class WorkViewModel extends BaseObservable { private long _nativeHandle ; public WorkViewModel ( Database database , int workId ) { _nativeHandle = create ( database.getNativeHandle ( ) , workId ) ; WorkViewModelPhantomReference.register ( this , _nativeHandle ) ; } private static native long create ( long databaseHandle , int workId ) ; static native void delete ( long nativeHandle ) ; @ Bindable public native int getWorkId ( ) ; public native void setWorkId ( int workId ) ; } import java.lang.ref . * ; import java.util . * ; public class WorkViewModelPhantomReference extends PhantomReference < WorkViewModel > { private static Set < WorkViewModelPhantomReference > phantomReferences = new HashSet < WorkViewModelPhantomReference > ( ) ; private static ReferenceQueue < WorkViewModel > garbageCollectedObjectsQueue = new ReferenceQueue < WorkViewModel > ( ) ; private long _nativeHandle ; private WorkViewModelPhantomReference ( WorkViewModel workViewModel , long nativeHandle ) { super ( workViewModel , garbageCollectedObjectsQueue ) ; _nativeHandle = nativeHandle ; } public static void register ( WorkViewModel workViewModel , long nativeHandle ) { phantomReferences.add ( new WorkViewModelPhantomReference ( workViewModel , nativeHandle ) ) ; } public static void deleteOrphanedNativePeerObjects ( ) { WorkViewModelPhantomReference reference ; while ( ( reference = ( WorkViewModelPhantomReference ) garbageCollectedObjectsQueue.poll ( ) ) ! = null ) { WorkViewModel.delete ( reference._nativeHandle ) ; phantomReferences.remove ( reference ) ; } } }"
"List < SearchResult > updatedSearchResults = new ArrayList < > ( ) ; SearchResult searchResult = new SearchResult ( ... ) ; updatedSearchResults.add ( searchResult ) ; import java.io.ByteArrayOutputStream ; import java.io.IOException ; import java.math.BigInteger ; import java.util.ArrayList ; import java.util.List ; public class ListPerformanceTester { public enum ValueSize { EIGHT_BIT ( `` 8-Bit '' ) , SIXTEEN_BIT ( `` 16-Bit '' ) , THIRTY_TWO_BIT ( `` 32-Bit '' ) , SIXTY_FOUR_BIT ( `` 64-Bit '' ) , NINETY_SIX_BIT ( `` 96-Bit '' ) ; private String name ; ValueSize ( String name ) { this.name = name ; } public int getBytesCount ( ) { switch ( this ) { case EIGHT_BIT : return 1 ; case SIXTEEN_BIT : return 2 ; case THIRTY_TWO_BIT : return 4 ; case SIXTY_FOUR_BIT : return 8 ; case NINETY_SIX_BIT : return 12 ; } throw new IllegalStateException ( `` Bytes count undefined for `` + this ) ; } @ Override public String toString ( ) { return name ; } public static ValueSize parse ( String name ) { ValueSize [ ] valueSizes = values ( ) ; for ( ValueSize valueSize : valueSizes ) { String currentName = valueSize.toString ( ) ; if ( currentName.equals ( name ) ) { return valueSize ; } } throw new IllegalArgumentException ( `` No value size associated '' ) ; } } public static class SearchResult implements Cloneable , Comparable { private int address ; private ValueSize valueSize ; private BigInteger previousValue ; private BigInteger currentValue ; private BigInteger valueDifference ; public SearchResult ( int address , BigInteger previousValue , BigInteger currentValue , ValueSize valueSize ) { this.address = address ; this.valueSize = valueSize ; this.previousValue = previousValue ; this.currentValue = currentValue ; setValueDifference ( ) ; } private void setValueDifference ( ) { BigInteger subtractionResult = previousValue.subtract ( currentValue ) ; valueDifference = subtractionResult.abs ( ) ; } private byte [ ] getBytes ( BigInteger bigInteger ) throws IOException { byte [ ] retrieved = bigInteger.toByteArray ( ) ; ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; int bytesCount = getValueSize ( ) .getBytesCount ( ) ; int paddingBytes = bytesCount - retrieved.length ; if ( paddingBytes > = 0 ) { byteArrayOutputStream.write ( new byte [ paddingBytes ] ) ; byteArrayOutputStream.write ( retrieved ) ; } else { writeWithoutLeadingNullBytes ( byteArrayOutputStream , retrieved ) ; } return byteArrayOutputStream.toByteArray ( ) ; } private void writeWithoutLeadingNullBytes ( ByteArrayOutputStream byteArrayOutputStream , byte [ ] bytes ) { int index = 0 ; boolean nonNullByteFound = false ; while ( index < bytes.length ) { byte value = bytes [ index ] ; if ( value ! = 0 || nonNullByteFound ) { nonNullByteFound = true ; byteArrayOutputStream.write ( value ) ; } index++ ; } } public int getAddress ( ) { return address ; } @ Override public boolean equals ( Object object ) { if ( ! ( object instanceof SearchResult ) ) { return false ; } SearchResult searchResult = ( SearchResult ) object ; return searchResult.getAddress ( ) == getAddress ( ) ; } @ Override public int hashCode ( ) { return Integer.hashCode ( address ) ; } public ValueSize getValueSize ( ) { return valueSize ; } @ Override public SearchResult clone ( ) { return new SearchResult ( address , previousValue , currentValue , valueSize ) ; } @ Override public int compareTo ( Object object ) { return new Integer ( address ) .compareTo ( ( ( SearchResult ) object ) .getAddress ( ) ) ; } } public static void main ( String [ ] arguments ) { long milliseconds = System.currentTimeMillis ( ) ; int elementsCount = 2000000 ; /*List < Integer > list = new ArrayList < > ( ) ; for ( int elementIndex = 0 ; elementIndex < elementsCount ; elementIndex++ ) { list.add ( 0 ) ; } */ List < SearchResult > searchResults = new ArrayList < > ( ) ; for ( int elementIndex = 0 ; elementIndex < elementsCount ; elementIndex++ ) { SearchResult searchResult = new SearchResult ( 0x12345678 , new BigInteger ( `` 3 '' ) , new BigInteger ( `` 1 '' ) , ValueSize.EIGHT_BIT ) ; searchResults.add ( searchResult ) ; } System.out.println ( ( System.currentTimeMillis ( ) - milliseconds ) / ( double ) 1000 + `` seconds '' ) ; } }"
"class ScjpTest { static void go ( int x ) { System.out.println ( `` In Int '' ) ; } static void go ( long x ) { System.out.println ( `` In long '' ) ; } public static void main ( String [ ] args ) { byte b = 5 ; go ( b ) ; } class ScjpTest { static void go ( Integer x ) { System.out.println ( `` In Int '' ) ; } static void go ( Long x ) { System.out.println ( `` In Long '' ) ; } public static void main ( String [ ] args ) { int b = 5 ; go ( b ) ; } } class ScjpTest { static void go ( int ... x ) { System.out.println ( `` In Int '' ) ; } static void go ( long ... x ) { System.out.println ( `` In lInt '' ) ; } public static void main ( String [ ] args ) { byte b = 5 ; //or even with : int b = 5 go ( b ) ; } } ScjpTest.java:14 : reference to go is ambiguous , both method go ( int ... ) in ScjpTest and method go ( long ... ) in ScjpTest match go ( b ) ; ^1 error"
"List < Employee > employee = Arrays.asList ( new Employee ( 1 , `` John '' , 80 ) , new Employee ( 1 , `` Bob '' , 120 ) , Employee ( 1 , `` Roy '' , 60 ) , new Employee ( 2 , `` Alice '' , 100 ) ) ; [ Employee { id=1 , name='Bob ' , iq=120 } , Employee { id=2 , name='Alice ' , iq=100 } ] import static java.util.Comparator.comparingInt ; import static java.util.stream.Collectors.collectingAndThen ; import static java.util.stream.Collectors.toCollection ; ... List < Employee > unique = employee.stream ( ) .collect ( collectingAndThen ( toCollection ( ( ) - > new TreeSet < > ( comparingInt ( Employee : :getId ) ) ) , ArrayList : :new ) ) ;"
"public void run ( ) { long time = System.currentTimeMillis ( ) ; long startTime = time ; long stopTime = time + 1000 * ( long ) ( jobTime ) ; double duration = stopTime - time ; synchronized ( this.target ) { while ( this.target.isWorking ) { status = ' w ' ; showStatus ( ) ; // hmmmmmmmm try { this.target.wait ( ) ; } catch ( InterruptedException e ) { } } this.target.isWorking = true ; } while ( time < stopTime & & ! killFlag ) { try { TimeUnit.MILLISECONDS.sleep ( 100 ) ; } catch ( InterruptedException e ) { } if ( goFlag ) { status = ' p ' ; showStatus ( ) ; time += 100 ; this.showProgress.setValue ( ( int ) ( ( ( time - startTime ) / duration ) * 100 ) ) ; } else { status = ' r ' ; showStatus ( ) ; } } //End While loop here showProgress.setValue ( 100 ) ; status = ' c ' ; showStatus ( ) ; synchronized ( target ) { target.isWorking = false ; target.notifyAll ( ) ; } } public void showStatus ( ) { //switch that changes status of button used to start / pause / display status of thread switch ( this.status ) { case ' r ' : startJob.setEnabled ( true ) ; startJob.setText ( `` Run '' ) ; break ; case ' p ' : startJob.setEnabled ( true ) ; startJob.setText ( `` Pause '' ) ; break ; case ' w ' : startJob.setEnabled ( false ) ; startJob.setText ( `` Working '' ) ; break ; case ' c ' : startJob.setEnabled ( false ) ; startJob.setText ( `` Job Complete '' ) ; break ; } } private class theHandler implements ActionListener { //Listener for Button mentioned above public void actionPerformed ( ActionEvent event ) { if ( event.getSource ( ) == startJob ) { if ( goFlag ) { goFlag = false ; } else { goFlag = true ; killFlag = false ; } } else if ( event.getSource ( ) == stopJob ) { if ( killFlag ) { //do nothing } else { killFlag = true ; status = ' r ' ; } } } } class Job extends Item implements SearchableByName , Runnable { int index ; String name ; int creature ; double jobTime ; Creature target ; boolean goFlag = false ; boolean killFlag = false ; char status ; JButton startJob ; JButton stopJob ; JProgressBar showProgress ; JPanel p1 ; class Creature extends Entity implements SearchableByName , SearchableByType , Runnable { int party ; int empathy ; int fear ; int carryCapacity ; Float age ; Float height ; Float weight ; boolean isWorking = false ;"
userAuthCode=1 ; % authentication code for user account to be run on cloud cmd = [ ' C : \Python27\python.exe runASR.py userAuthCode ] ; system ( cmd ) ; for i=1 : 2 userAuthCode=i ; cmd = [ ' C : \Python27\python.exe runASR.py userAuthCode ] ; runtime = java.lang.Runtime.getRuntime ( ) ; pid ( i ) = runtime.exec ( cmd ) ; end for i=1:2 pid ( i ) .waitFor ( ) ; % get exit status rc ( i ) = pid ( i ) .exitValue ( ) ; end
"Benchmark Mode Samples Score Score error Unitsc.s.SimpleBenchmark.testEqualsIntern thrpt 5 698910949.710 47115846.650 ops/sc.s.SimpleBenchmark.testEqualsNew thrpt 5 529118.774 21164.872 ops/sc.s.SimpleBenchmark.testIsEmpty thrpt 5 470846539.546 19922172.099 ops/s package com.shagie ; import org.openjdk.jmh.annotations.Benchmark ; import org.openjdk.jmh.runner.Runner ; import org.openjdk.jmh.runner.RunnerException ; import org.openjdk.jmh.runner.options.Options ; import org.openjdk.jmh.runner.options.OptionsBuilder ; public class SimpleBenchmark { public final static int ITERATIONS = 1000 ; public final static String EMPTY = `` '' ; public final static String NEW_EMPTY = new String ( `` '' ) ; @ Benchmark public int testEqualsIntern ( ) { int count = 0 ; String str = EMPTY ; for ( int i = 0 ; i < ITERATIONS ; i++ ) { if ( str.equals ( EMPTY ) ) { count++ ; } } return count ; } @ Benchmark public int testEqualsNew ( ) { int count = 0 ; String str = NEW_EMPTY ; for ( int i = 0 ; i < ITERATIONS ; i++ ) { if ( str.equals ( EMPTY ) ) { count++ ; } } return count ; } @ Benchmark public int testIsEmpty ( ) { int count = 0 ; String str = NEW_EMPTY ; for ( int i = 0 ; i < ITERATIONS ; i++ ) { if ( str.isEmpty ( ) ) { count++ ; } } return count ; } public static void main ( String [ ] args ) throws RunnerException { Options opt = new OptionsBuilder ( ) .include ( `` . * '' + SimpleBenchmark.class.getSimpleName ( ) + `` . * '' ) .warmupIterations ( 5 ) .measurementIterations ( 5 ) .forks ( 1 ) .build ( ) ; new Runner ( opt ) .run ( ) ; } } < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > com.shagie < /groupId > < artifactId > bench < /artifactId > < version > 1.0 < /version > < packaging > jar < /packaging > < name > String Benchmarks with JMH < /name > < prerequisites > < maven > 3.0 < /maven > < /prerequisites > < dependencies > < dependency > < groupId > org.openjdk.jmh < /groupId > < artifactId > jmh-core < /artifactId > < version > $ { jmh.version } < /version > < /dependency > < dependency > < groupId > org.openjdk.jmh < /groupId > < artifactId > jmh-generator-annprocess < /artifactId > < version > $ { jmh.version } < /version > < scope > provided < /scope > < /dependency > < /dependencies > < properties > < project.build.sourceEncoding > UTF-8 < /project.build.sourceEncoding > < jmh.version > 0.9.5 < /jmh.version > < javac.target > 1.6 < /javac.target > < uberjar.name > benchmarks < /uberjar.name > < /properties > < build > < plugins > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-compiler-plugin < /artifactId > < version > 3.1 < /version > < configuration > < compilerVersion > $ { javac.target } < /compilerVersion > < source > $ { javac.target } < /source > < target > $ { javac.target } < /target > < /configuration > < /plugin > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-shade-plugin < /artifactId > < version > 2.2 < /version > < executions > < execution > < phase > package < /phase > < goals > < goal > shade < /goal > < /goals > < configuration > < finalName > $ { uberjar.name } < /finalName > < transformers > < transformer implementation= '' org.apache.maven.plugins.shade.resource.ManifestResourceTransformer '' > < mainClass > org.openjdk.jmh.Main < /mainClass > < /transformer > < /transformers > < /configuration > < /execution > < /executions > < /plugin > < /plugins > < pluginManagement > < plugins > < plugin > < artifactId > maven-clean-plugin < /artifactId > < version > 2.5 < /version > < /plugin > < plugin > < artifactId > maven-deploy-plugin < /artifactId > < version > 2.8.1 < /version > < /plugin > < plugin > < artifactId > maven-install-plugin < /artifactId > < version > 2.5.1 < /version > < /plugin > < plugin > < artifactId > maven-jar-plugin < /artifactId > < version > 2.4 < /version > < /plugin > < plugin > < artifactId > maven-javadoc-plugin < /artifactId > < version > 2.9.1 < /version > < /plugin > < plugin > < artifactId > maven-resources-plugin < /artifactId > < version > 2.6 < /version > < /plugin > < plugin > < artifactId > maven-site-plugin < /artifactId > < version > 3.3 < /version > < /plugin > < plugin > < artifactId > maven-source-plugin < /artifactId > < version > 2.2.1 < /version > < /plugin > < plugin > < artifactId > maven-surefire-plugin < /artifactId > < version > 2.17 < /version > < /plugin > < /plugins > < /pluginManagement > < /build > < /project > $ mvn archetype : generate \ -DinteractiveMode=false \ -DarchetypeGroupId=org.openjdk.jmh \ -DarchetypeArtifactId=jmh-java-benchmark-archetype \ -DgroupId=org.sample \ -DartifactId=test \ -Dversion=1.0 $ mvn clean install $ java -jar target/benchmarks.jar `` .*SimpleBenchmark . * '' -wi 5 -i 5 -f 1 $ java -versionjava version `` 1.6.0_65 '' Java ( TM ) SE Runtime Environment ( build 1.6.0_65-b14-462-11M4609 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 20.65-b04-462 , mixed mode )"
for ( int i = 0 ; i < someVolatileMember ; i++ ) { // Removed for SO } private volatile int someVolatileMember ; final int someLocalVar = someVolatileMember ; for ( int i = 0 ; i < someLocalVar ; i++ ) { // Removed for SO }
public static void main ( String [ ] args ) { List < String > list=new ArrayList < String > ( ) ; list.add ( `` One '' ) ; for ( String string : list ) { System.out.println ( string ) ; list.remove ( string ) ; } } public static void main ( String [ ] args ) { List < String > list=new ArrayList < String > ( ) ; list.add ( `` One '' ) ; list.add ( `` two '' ) ; for ( String string : list ) { System.out.println ( string ) ; list.remove ( string ) ; } } public static void main ( String [ ] args ) { List < String > list=new ArrayList < String > ( ) ; list.add ( `` One '' ) ; list.add ( `` Two '' ) ; list.add ( `` Three '' ) ; for ( String string : list ) { System.out.println ( string ) ; list.remove ( string ) ; } }
"< cfscript > variables.stArgs = { } ; variables.stArgs.stWebHookData = getHTTPRequestData ( ) ; application.stObj.stShopify.oShopifyWebHookBusiness.receiveWebHook ( argumentCollection=variables.stArgs ) ; < /cfscript > local.data = arguments.stWebHookData.toString ( ) ; local.macClass = createObject ( `` java '' , `` javax.crypto.Mac '' ) ; local.secretkeySpec = createObject ( `` java '' , `` javax.crypto.spec.SecretKeySpec '' ) .init ( toBinary ( toBase64 ( arguments.key ) ) , 'HmacSHA256 ' ) ; local.mac = local.macClass.getInstance ( 'HmacSHA256 ' ) ; local.mac.init ( local.secretkeySpec ) ; local.hashedBytes = local.mac.doFinal ( toBinary ( toBase64 ( local.data ) ) ) ; return lcase ( binaryEncode ( local.hashedBytes , `` base64 '' ) ) ;"
public Collection < String > removeNulls ( Collection < String > input ) { List < String > output = new ArrayList < > ( ) ; // ... return output ; } Set < String > mySet = new SortedSet < > ( ) ; mySet.add ( 10 ) ; mySet.add ( 9 ) ; // I know that my collection is now sortedCollection < String > myFilteredSet = removeNulls ( mySet ) ; // It is no longer sortedSet < String > mySet = Sets.newSortedSet ( myFilteredSet ) ; // Have to sort it again public List < String > removeNulls ( List < String > input ) { List < String > output = ( List < String > ) input.getClass ( ) .newInstance ( ) ; // ... return output ; }
"class ClazzA < R extends A , S extends B < T > , T extends C < T > , U extends D , W extends E , X extends F , Y extends G , Z extends H > extends OtherClazz < S > implements I < T > { public void method ( Type < Q , R > x ) { // ... code ... } } ClazzA.java:10 : class ClazzA < R extends A , ClazzA.java:11 : S extends B < T > , T extends C < T > , ClazzA.java:12 : U extends D , W extends E , ClazzA.java:13 : X extends F , Y extends G , Z extends H > ClazzA.java:14 : extends OtherClazz < S > implements I < T > { class ClazzB < R extends A , S extends B < T > , T extends C < T > , U extends D , W extends E , X extends F , Y extends G , Z extends H > extends OtherClazz < S > implements I < T > { public void method ( Type < Q , R > x ) { // ... code ... } } ClazzB.java:42 : class ClazzB < R extends A , S extends B < T > , T extends C < T > , U extends D , W extends E , X extends F , Y extends G , Z extends H > extends OtherClazz < S > implements I < T > { class ClazzC /* no type parameter */ extends OtherClazz < S > implements I < T > { public void method ( Type < A , B > x ) { // ... code ... } } class ClazzD < R extends A > // only one type parameter extends OtherClazz < S > implements I < T > { public void method ( Type < X , Y > x ) { // ... code ... } } class ClazzE < R extends A , S extends B < T > > // only two type parameters extends OtherClazz < S > implements I < T > { public void method ( Type < X , Y > x ) { // ... code ... } } class ClazzF < R extends A , // only two type parameters S extends B < T > > // on two lines extends OtherClazz < S > implements I < T > { public void method ( Type < X , Y > x ) { // ... code ... } } $ gawk -- versionGNU Awk 5.0.0 , API : 2.0 ( GNU MPFR 4.0.2 , GNU MP 6.2.0 ) find . -type f -name '*.java ' | xargs gawk -f ws-class-type-parameter.awk > ws-class-type-parameter.log # /start/ , /end/ ... pattern # /class ClazzA < .* , . */ , / { / { # 5 lines , OK for ClazzA , but in real it prints classes with 2 or less type parameters , too # /class ClazzA < .* , . * , / , / { / { # no line with ClazzA , since there 's no second ' , ' on its first line # /class ClazzA < .* , . * , /s , / { / { # 500.000+ ( ! ) lines # /class ClazzA < .* , . * , /s , / { /U { # 500.000+ ( ! ) lines # /class ClazzA < .* , . * , /sU , / { /U { # 500.000+ ( ! ) lines / ( ? s ) class ClazzA < .* , . * , / , / { / { # no line match ( FILENAME , `` /.*/.. '' ) print substr ( FILENAME , RLENGTH ) `` : '' FNR `` : `` $ 0 } $ grep -- versiongrep ( GNU grep ) 3.1 ... $ grep -nrPf types.grep *.java ( ? s ) .*class\s+\w+\s* < .* , .* , .* > . * { /** more code before here */ public void setId ( String value ) { this.id = value ; } /** * Gets a map that contains attributes that are n't bound to any typed property on this class . * * < p > * the map is keyed by the name of the attribute and * the value is the string value of the attribute . * * the map returned by this method is live , and you can add new attribute * by updating the map directly . Because of this design , there 's no setter . * * * @ return * always non-null */ public Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; } AbstractAddressType.java:81 : * Gets a map that contains attributes that are n't bound to any typed property on this class.AbstractAddressType.java:82 : * AbstractAddressType.java:83 : * < p > AbstractAddressType.java:84 : * the map is keyed by the name of the attribute and AbstractAddressType.java:85 : * the value is the string value of the attribute.AbstractAddressType.java:86 : * AbstractAddressType.java:87 : * the map returned by this method is live , and you can add new attributeAbstractAddressType.java:88 : * by updating the map directly . Because of this design , there 's no setter.AbstractAddressType.java:89 : * AbstractAddressType.java:90 : * AbstractAddressType.java:91 : * @ returnAbstractAddressType.java:92 : * always non-nullAbstractAddressType.java:93 : */AbstractAddressType.java:94 : public Map < QName , String > getOtherAttributes ( ) { /** * This class was generated by Apache CXF 3.3.4 * 2020-11-30T12:03:21.251+01:00 * Generated source version : 3.3.4 * */ @ WebService ( targetNamespace = `` urn : SZRServices '' , name = `` SZR '' ) @ XmlSeeAlso ( { at.gv.egov.pvp1.ObjectFactory.class , org.w3._2001._04.xmldsig_more_.ObjectFactory.class , ObjectFactory.class , org.xmlsoap.schemas.ws._2002._04.secext.ObjectFactory.class , org.w3._2000._09.xmldsig_.ObjectFactory.class , at.gv.e_government.reference.namespace.persondata._20020228_.ObjectFactory.class } ) public interface SZR { // more code after here SZR.java:13 : * This class was generated by Apache CXF 3.3.4SZR.java:14 : * 2020-10-12T11:51:35.175+02:00SZR.java:15 : * Generated source version : 3.3.4SZR.java:16 : *SZR.java:17 : */SZR.java:18 : @ WebService ( targetNamespace = `` urn : SZRServices '' , name = `` SZR '' ) SZR.java:19 : @ XmlSeeAlso ( { at.gv.egov.pvp1.ObjectFactory.class , org.w3._2001._04.xmldsig_more_.ObjectFactory.class , ObjectFactory.class , org.xmlsoap.schemas.ws._2002._04.secext.ObjectFactory.class , org.w3._2000._09.xmldsig_.ObjectFactory.class , at.gv.e_government.reference.namespace.persondata._20020228_.ObjectFactory.class } )"
"import java.util.List ; public class Generics2 { public < T > void method1 ( List < T > list ) { System.out.println ( list ) ; } public < T extends Number > void method2 ( List < T > list ) { System.out.println ( list ) ; } /*public < T super Integer > void method3 ( List < T > list ) { } *///super does not work . public void method4 ( List < ? > list ) { System.out.println ( list ) ; } public void method5 ( List < ? extends Number > list ) { System.out.println ( list ) ; } public void method6 ( List < ? super Integer > list ) { System.out.println ( list ) ; } public < T > void copy1 ( List < T > list1 , List < T > list2 ) { //copy elements from list1 to list2 } //It does not span well with copy of one type of elements from list1 to other type elements in list2 , where the list elements //between the two are not same but are related through inheritance . public < T1 , T2 > void copy2 ( List < T1 > list1 , List < T2 > list2 ) { //copy elements from list1 to list2 , right now we do not bother about the exceptions or errors that might generate . } //Our intention here is not to copy elements with relation between T1 and T2 . We intend to explore the differences on T and ? public void copy3 ( List < ? > list1 , List < ? > list2 ) { //copy elements from list1 to list2 , right now we do not bother about the exceptions or errors that might generate . } //Our intention here is not to copy elements with relation between T1 and T2 . We intend to explore the differences on T public < T1 extends Object , T2 extends Object > void copy4 ( List < T1 > list1 , List < T2 > list2 ) { //copy elements from list1 to list2 } public static void main ( String [ ] args ) { // TODO Auto-generated method stub } }"
"import java.awt . * ; import java.awt.image.BufferedImage ; import javax.swing . * ; import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.net.URL ; import javax.imageio.ImageIO ; class CombineImages { public static void main ( String [ ] args ) { Runnable r = new Runnable ( ) { @ Override public void run ( ) { try { URL urlImage1 = new URL ( `` http : //i.stack.imgur.com/T5uTa.png '' ) ; // Load the FG image Image fgImage = ImageIO.read ( urlImage1 ) ; int w = fgImage.getWidth ( null ) ; int h = fgImage.getHeight ( null ) ; // Create a non-trasparent BG image BufferedImage bgImageTemp = new BufferedImage ( w , h , BufferedImage.TYPE_INT_RGB ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ImageIO.write ( bgImageTemp , `` jpg '' , baos ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( baos.toByteArray ( ) ) ; BufferedImage bgImageJpeg = ImageIO.read ( bais ) ; int result = JOptionPane.showConfirmDialog ( null , `` Use a final image with transparency ? `` , `` Transparency '' , JOptionPane.YES_NO_OPTION ) ; int type = ( result==JOptionPane.OK_OPTION ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB ) ; // Create the final image BufferedImage finalImage = new BufferedImage ( w , h , type ) ; Graphics2D g = finalImage.createGraphics ( ) ; g.drawImage ( bgImageJpeg , w , h , null ) ; g.drawImage ( fgImage , w , h , null ) ; g.dispose ( ) ; JPanel gui = new JPanel ( new GridLayout ( 1,0,5,5 ) ) ; gui.add ( new JLabel ( new ImageIcon ( bgImageJpeg ) ) ) ; gui.add ( new JLabel ( new ImageIcon ( fgImage ) ) ) ; gui.add ( new JLabel ( new ImageIcon ( finalImage ) ) ) ; JOptionPane.showMessageDialog ( null , gui ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ; SwingUtilities.invokeLater ( r ) ; } }"
/** * A marker interface to denote that an object implements a view on some other object . * * @ param < T > The type of object that is viewed */public interface View < T extends Viewable < View < T > > > { } /** * An interface for objects that are viewable via a view . * * @ param < T > The type of viewable object */public interface Viewable < T extends View < ? > > { public void addViewCallback ( final T view ) ; public void removeViewCallback ( final T view ) ; }
"public class Point { public int x = 0 ; public int y = 0 ; //constructor public Point ( int a , int b ) { x = a ; y = b ; } } public class Point { public int x = 0 ; public int y = 0 ; //constructor public Point ( int x , int y ) { this.x = x ; this.y = y ; } } public class Point { public int x = 0 ; public int y = 0 ; //constructor public Point ( int a , int b ) { this.x = a ; this.y = b ; } }"
"Optional < String > sentence = text.stream ( ) .reduce ( ( value , combinedValue ) - > { return value + `` , `` + combinedValue ; } ) ;"
"boolean bool = checkIntersectionLine ( matrix44F , lineStart , lineEnd ) ; bool intersection = checkIntersectionLine ( domino- > pickingTransform , lineStart , lineEnd ) ;"
class Def { } abstract class Animal < D extends Def > { D def ; D getDef ( ) { return def ; } } class CatDef extends Def { } class Cat extends Animal < CatDef > { } abstract class BearDef extends Def { } abstract class Bear < D extends BearDef > extends Animal < D > { } class BlackBearDef extends BearDef { } class BlackBear extends Bear < BlackBearDef > { } class AnimalDefTest { public static void main ( String ... args ) { Cat cat = new Cat ( ) ; CatDef catDef = cat.getDef ( ) ; // CatDef works fine Bear bear = new BlackBear ( ) ; BearDef bearDef = bear.getDef ( ) ; // Error : Expected Def not BearDef ? Why ? ? ? BearDef bearDef2 = ( ( Animal < BearDef > ) bear ) .getDef ( ) ; // Works } } abstract class Bear < D extends BearDef > extends Animal < BearDef > { } abstract class Bear extends Animal < BearDef > { }
public void clear ( ) { modCount++ ; Entry [ ] tab = table ; for ( int i = 0 ; i < tab.length ; i++ ) tab [ i ] = null ; size = 0 ; }
"< T extends Enum < T > & MyInterface > < T extends Enum < ? extends MyInterface > > interface MyInterface { void someMethod ( ) ; } enum MyEnumA implements MyInterface { A , B , C ; public void someMethod ( ) { } } enum MyEnumB implements MyInterface { X , Y , Z ; public void someMethod ( ) { } } static class MyIntersectionClass < T extends Enum < T > & MyInterface > { void use ( T t ) { } } static class MyWildcardClass < T extends Enum < ? extends MyInterface > > { void use ( T t ) { } } public static void main ( String [ ] args ) throws Exception { MyIntersectionClass < MyEnumA > a = new MyIntersectionClass < MyEnumA > ( ) ; a.use ( MyEnumA.A ) ; MyWildcardClass < MyEnumB > b = new MyWildcardClass < MyEnumB > ( ) ; b.use ( MyEnumB.X ) ; }"
double remainder1 = 1 % 1000 ; double remainder2 = 0.01 % 1000 ; double remainder3 = -1 % 1000 ; System.out.println ( `` START : `` +remainder1+ '' | `` +remainder2+ '' | `` +remainder3 ) ; > > > START : 1.0 | 0.01 | -1.0 my $ remainder1 = 1 % 1000 ; my $ remainder2 = 0.01 % 1000 ; my $ remainder3 = -1 % 1000 ; print `` START : $ remainder1 | $ remainder2 | $ remainder3 '' ; > > > START : 1 | 0 | 999
Optional < Product > product = Optional.of ( new Product ( ) ) ; synchronized ( product ) { ... }
void someMethod ( Object value ) { String suffix = getSuffix ( ) ; if ( suffix ! = null ) value += suffix ; [ ... ] } Operator '+ ' can not be applied to java.lang.Object and java.lang.String
class Test { private int value = 0 ; private final Object lock ; public void add ( ) { synchronized ( lock ) { value++ ; value++ ; } } public int getValue ( ) { synchronized ( lock ) { return value ; } } }
"import java.sql.Connection ; import java.sql.SQLException ; class Checked extends Exception { public Checked ( ) { super ( ) ; } } @ FunctionalInterfaceinterface SQLExceptionThrowingFunction < T , U , E extends Exception > { U apply ( T t ) throws E , SQLException ; } class ConnectionPool { public static < T , E extends Exception > T call ( Class < E > exceptionClass , SQLExceptionThrowingFunction < Connection , T , E > f ) throws E { throw new UnsupportedOperationException ( `` unimportant '' ) ; } } class Test { static Void mayThrow0 ( Connection c ) { throw new UnsupportedOperationException ( `` unimportant '' ) ; } static < E extends Exception > Void mayThrow1 ( Connection c ) throws E { throw new UnsupportedOperationException ( `` unimportant '' ) ; } static < E1 extends Exception , E2 extends Exception > Void mayThrow2 ( Connection c ) throws E1 , E2 { throw new UnsupportedOperationException ( `` unimportant '' ) ; } public static void main ( String [ ] args ) throws Exception { // Intended code , but does n't compile ConnectionPool.call ( RuntimeException.class , Test : : < SQLException > mayThrow1 ) ; ConnectionPool.call ( Checked.class , Test : : < Checked , SQLException > mayThrow2 ) ; // Type inference works if the function does n't actually throw SQLException ( does n't help me ) ConnectionPool.call ( RuntimeException.class , Test : :mayThrow0 ) ; ConnectionPool.call ( Checked.class , Test : : < Checked > mayThrow1 ) ; // Can workaround by manually specifying the type parameters to ConnectionPool.call ( but is tedious ) ConnectionPool. < Void , RuntimeException > call ( RuntimeException.class , Test : : < SQLException > mayThrow1 ) ; ConnectionPool. < Void , Checked > call ( Checked.class , Test : : < Checked , SQLException > mayThrow2 ) ; } } Test.java:34 : error : incompatible types : inference variable E has incompatible bounds ConnectionPool.call ( RuntimeException.class , Test : : < SQLException > mayThrow1 ) ; // does n't compile ^ equality constraints : RuntimeException lower bounds : SQLException where E , T are type-variables : E extends Exception declared in method < T , E > call ( Class < E > , SQLExceptionThrowingFunction < Connection , T , E > ) T extends Object declared in method < T , E > call ( Class < E > , SQLExceptionThrowingFunction < Connection , T , E > ) Test.java:35 : error : incompatible types : inference variable E has incompatible bounds ConnectionPool.call ( Checked.class , Test : : < Checked , SQLException > mayThrow2 ) ; // does n't compile ^ equality constraints : Checked lower bounds : SQLException , Checked where E , T are type-variables : E extends Exception declared in method < T , E > call ( Class < E > , SQLExceptionThrowingFunction < Connection , T , E > ) T extends Object declared in method < T , E > call ( Class < E > , SQLExceptionThrowingFunction < Connection , T , E > ) 2 errors"
"public static double nextAfter ( double start , double direction ) System.out.println ( Double.MAX_VALUE ) ; System.out.println ( Math.nextAfter ( Double.MAX_VALUE , 1 ) ) ; System.out.println ( Math.nextAfter ( Double.MAX_VALUE , 1 ) == Double.POSITIVE_INFINITY ) ; 1.7976931348623157E3081.7976931348623155E308false ... 157E308 ... 155E308"
"`` timestamp_utc '' : `` ۲۰۱۵-۱۱-۰۲T۱۸:۴۴:۳۴+۰۰:۰۰ '' try { return new DateTime ( dateStr , DateTimeZone.UTC ) ; } catch ( IllegalArgumentException e ) { java.util.Locale locale = new java.util.Locale ( `` ar '' , `` SA '' ) ; DateTimeFormatter formatter = ISODateTimeFormat.dateTime ( ) .withLocale ( locale ) ; return formatter.parseDateTime ( dateStr ) ; } Locale list [ ] = DateFormat.getAvailableLocales ( ) ; for ( Locale aLocale : list ) { try { DateTimeFormatter formatter = DateTimeFormat.forPattern ( `` yyyy-MM-dd'T'HH : mm : ssZ '' ) .withLocale ( aLocale ) ; System.out.println ( formatter.parseDateTime ( dateStr ) ) ; } catch ( Exception e ) { System.out.println ( `` locale `` + aLocale.toString ( ) + `` error '' ) ; } }"
class Dec26 { public static void main ( String [ ] args ) { short a1 = 6 ; new Dec26 ( ) .go ( a1 ) ; new Dec26 ( ) .go ( new Integer ( 7 ) ) ; } void go ( Short x ) { System.out.print ( `` S `` ) ; } void go ( Long x ) { System.out.print ( `` L `` ) ; } void go ( int x ) { System.out.print ( `` i `` ) ; } void go ( Number n ) { System.out.print ( `` N `` ) ; } } i N
"String input = `` Hello World. `` + `` Today in the U.S.A. , it is a nice day ! `` + `` Hurrah ! '' + `` Here it comes ... `` + `` Party time ! `` ; String array [ ] = input.split ( `` ( ? < = [ . ? ! ] ) \\s+ ( ? = [ \\D\\d ] ) '' ) ; Hello World.Today in the U.S.A. , it is a nice day ! Hurrah ! Here it comes ... Party time !"
public int solution ( int [ ] A ) { int r = 0 ; for ( int i=0 ; i < A.length ; i++ ) r ^=A [ i ] ; return r ; }
List < A < B < ? extends Object > > > rv=new LinkedList < > ( ) ; rv.add ( d ) ; //not working A < B < ? > > abcv=new A < B < String > > ( ) ; List < A < B < ? > > > rv=new LinkedList < > ( ) ; rv.add ( new A < B < X > > ( ) ) ; rv.add ( new A < B < String > > ( ) ) ; rv.add ( new A < B < Integer > > ( ) ) ;
Set < Set < String > > var = new HashSet < Set < String > > ( ) ; Set < Set < String > > var = new HashSet < HashSet < String > > ( ) ;
( fname : jon ) ( lname : doe ) ( guaranteer : Sam ( W ) Willis ) ( age:35 ) ( addr:1 Turnpike Plaza ) ( favcolor : blue ) arr = s.split ( `` \\ ) \\ ( `` ) ; for ( String a : arr ) System.out.println ( a ) ; ( fname : jonlname : doeguaranteer : Sam ( W ) Willisage:35addr:1 Turnpike Plazafavcolor : blue ) ( fname : jon ) ( lname : doe ) ( guaranteer : Sam ( W ) Willis ) ( age:35 ) ( addr:1 Turnpike Plaza ) ( favcolor : blue ) ( fname : jon ) ( lname : doe ) ( guaranteer : Sam ( W ) Willis ) ( age:35 ) ( addr:1 Turnpike Plaza ) ( favcolor : blue )
public interface FooMaker < T extends Enum < T > & FooType > { public List < Foo < T > > getFoos ( String bar ) ; } FooMaker < ? > maker = Foos.getRandomMaker ( ) ; List < Foo < ? > > fooList = maker.getFoos ( `` bar '' ) ; //error here ! FooMaker < ? > maker = Foos.getRandomMaker ( ) ; List < ? > fooList = maker.getFoos ( `` bar '' ) ;
public class C1 { interface Listener { void f ( ) ; } public C2.Listener c2l = new C2.Listener ( ) { public void f ( ) { } } ; } public class C2 { interface Listener { void f ( ) ; } } public class C1 { interface Listener { void g ( ) ; } public C2.Listener c2l = new C2.Listener ( ) { public void g ( ) { } } ; } public class C1 { interface Listener { void f ( ) ; } public C2.Listener c2l = new C2.Listener ( ) { public void g ( ) { } } ; }
"int a = 11 ; System.out.print ( a + `` `` + Integer.toBinaryString ( a ) ) //11 1011int b = invertLastBit ( a ) ; System.out.print ( b + `` `` + Integer.toBinaryString ( b ) ) ; //10 1010 static int invertLastBit ( int i ) { String s = Integer.toBinaryString ( i ) ; if ( s.charAt ( s.length ( ) -1 ) == ' 0 ' ) { s = s.substring ( 0 , s.length ( ) - 1 ) ; s = s+ '' 1 '' ; } else if ( s.charAt ( s.length ( ) -1 ) == ' 1 ' ) { s = s.substring ( 0 , s.length ( ) - 1 ) ; s = s + `` 0 '' ; } return Integer.parseInt ( s , 2 ) ; }"
"class Foo { } public class Test { public Foo makeFoo ( String p , String q ) { return new Foo ( ) { public void doSomething ( ) { System.out.println ( p ) ; } } ; } } Compiled from `` Test.java '' class Test $ 1 extends Foo { final java.lang.String val $ p ; final Test this $ 0 ; Test $ 1 ( Test , java.lang.String ) ; Code : 0 : aload_0 1 : aload_1 2 : putfield # 1 // Field this $ 0 : LTest ; 5 : aload_0 6 : aload_2 7 : putfield # 2 // Field val $ p : Ljava/lang/String ; 10 : aload_0 11 : invokespecial # 3 // Method Foo . `` < init > '' : ( ) V 14 : return public void doSomething ( ) ; Code : 0 : getstatic # 4 // Field java/lang/System.out : Ljava/io/PrintStream ; 3 : aload_0 4 : getfield # 2 // Field val $ p : Ljava/lang/String ; 7 : invokevirtual # 5 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 10 : return }"
"List < String > changes = new LinkedList < > ( ) ; try ( OutputStream outputStream = new ByteArrayOutputStream ( ) ; DiffFormatter diffFormatter = new DiffFormatter ( outputStream ) ) { diffFormatter.setRepository ( git1.getRepository ( ) ) ; TreeFilter treeFilter = PathSuffixFilter.create ( `` .txt '' ) ; diffFormatter.setPathFilter ( treeFilter ) ; List < DiffEntry > entries = diffFormatter.scan ( newTree , oldTree ) ; for ( DiffEntry diffEntry : entries ) { diffFormatter.format ( diffEntry ) ; changes.add ( outputStream.toString ( ) ) ; diffFormatter.flush ( ) ; } }"
MonitorEnter ( any other needed instructions go here ) [ LoadLoad ] < ===MB1 : Inserted memory barrier [ LoadStore ] < ===MB2 : Inserted memory barrier ( Begin of critical section ) ... . ( end of critical section ) [ LoadStore ] < ===MB3 : Inserted memory barrier [ StoreStore ] < ===MB4 : Inserted memory barrier ( any other needed instructions go here ) MonitorExit Load a ; Load b ; Store 1 ; Store 2 ; MonitorEnter ( any other needed instructions go here ) [ LoadLoad ] < ===MB1 [ LoadStore ] < ===MB2 ( Begin of critical section ) ... . ( end of critical section ) [ LoadStore ] < ===MB3 [ StoreStore ] < ===MB4 ( any other needed instructions go here ) MonitorExit Store 3 ; Store 4 ; Load c ; Load d ; x = 1 ; //Storesynchronized ( o ) { z = z + 1 ; } y = 1//Store synchronized ( o ) { y = 1 ; //I added this comment : Store moved inside the critical sectionz = z + 1 ; x = 1 ; //I added this comment : Store moved inside the critical section }
"import java.awt.Color ; import java.awt.Component ; import javax.swing.JTable ; import javax.swing.table.DefaultTableCellRenderer ; public class MyRenderer extends DefaultTableCellRenderer { @ Override public Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { Component c = super.getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; int [ ] [ ] coordinatesYellow = new int [ 3 ] [ 2 ] ; // [ row ] [ column ] these cells are yellow coordinatesYellow [ 0 ] [ 0 ] = 3 ; coordinatesYellow [ 0 ] [ 1 ] = 2 ; coordinatesYellow [ 1 ] [ 0 ] = 4 ; coordinatesYellow [ 1 ] [ 1 ] = 2 ; coordinatesYellow [ 2 ] [ 0 ] = 2 ; coordinatesYellow [ 2 ] [ 1 ] = 2 ; for ( int i = 0 ; i < 3 ; i++ ) { if ( ( row == coordinatesYellow [ i ] [ 0 ] ) & & ( column == coordinatesYellow [ i ] [ 1 ] ) ) { c.setBackground ( Color.yellow ) ; } } return c ; } } // And this is the statement I use for calling the renderer : // resultsTable.getColumnModel ( ) .getColumn ( 0 ) .setCellRenderer ( new MyRenderer ( ) ) ;"
public class SomeClass extends AdditionalClass < GenericClass > { ... } SomeClass object = new SomeClass ( ) ; System.out.println ( object.getSuperClass ( ) .getSimpleName ( ) ) ;
private static long maskAndNegate ( long l ) { int numberOfLeadingZeros = Long.numberOfLeadingZeros ( l ) long mask = CustomBitSet.masks [ numberOfLeadingZeros ] ; long result = ( ~l ) & mask ; return result ; } private static long maskAndNegate ( long l ) { return ( ~l ) & CustomBitSet.masks [ Long.numberOfLeadingZeros ( l ) ] ; }
"import java.util.stream . * ; public class Test { String test ( Stream < ? > s ) { return s.collect ( Collector.of ( ( ) - > `` '' , ( a , t ) - > { } , ( a1 , a2 ) - > a1 ) ) ; } } private static void lambda $ 1 ( java.lang.String , java.lang.Object ) ; descriptor : ( Ljava/lang/String ; Ljava/lang/Object ; ) V flags : ACC_PRIVATE , ACC_STATIC , ACC_SYNTHETIC Code : stack=0 , locals=2 , args_size=2 0 : return LineNumberTable : line 5 : 0 LocalVariableTable : Start Length Slot Name Signature 0 1 0 a Ljava/lang/String ; 0 1 1 t Ljava/lang/Object ; LocalVariableTypeTable : Start Length Slot Name Signature 0 1 1 t ! *"
"public void modify ( String name ) { for ( Item i : item ) { if ( i.getName ( ) .equalsIgnoreCase ( name ) ) { int position = item.indexOf ( i ) ; System.out.println ( `` New name : `` ) ; String newName = in.nextLine ( ) ; Item updated = new Item ( newName , i.getPrice ( ) , i.getCondition ( ) , i.getSize ( ) ) ; item.set ( position , updated ) ; } } }"
"class Existing extends Parent { public static final Existing A = new Existing ( ... ) ; ... . public static final Existing Z = new Existing ( ... ) ; public Existing ( Srting attr1 , String attr1 ) { super ( attr1 , attr2 ) ; } public Existing ( String attr1 ) { super ( attr1 ) ; } } enum NewDesign { A ( attr1 , attr2 ) , B ( attr1 ) , C ( attr1 , attr2 ) // ... ; //constructor etc . // ... } enum NewDesign { A ( attr1 , attr2 , newAttr ) , B ( attr1 , newAttr ) , C ( attr1 , attr2 , newAttr ) , // ... //constructor etc . // ... }"
Method candidateMethod = getMethodByAnnotation ( clazz ) ; if ( candidateMethod == null ) { candidateMethod = getMethodByBeingOnlyMethod ( clazz ) ; } if ( candidateMethod == null ) { candidateMethod = getMethodByBeingOnlySuitableMethod ( clazz ) ; } if ( candidateMethod == null ) { throw new NoSuitableMethodFoundException ( clazz ) ; }
"class A { } class B extends A { } class Generic < T > { private T instance ; public Generic ( T instance ) { this.instance = instance ; } public T get ( ) { return instance ; } } public class Main { public static void main ( String [ ] args ) { fArray ( new B [ 1 ] , new Generic < A > ( new A ( ) ) ) ; // < -- No error here } public static < T > void fArray ( T [ ] a , Generic < ? extends T > b ) { a [ 0 ] = b.get ( ) ; } } public static void main ( String [ ] args ) { fList ( new ArrayList < B > ( ) , new Generic < A > ( new A ( ) ) ) ; // < -- Error , as expected } public static < T > void fList ( List < T > a , Generic < ? extends T > b ) { a.add ( b.get ( ) ) ; } The method fList ( List < T > , Generic < ? extends T > ) in the type Main is not applicable for the arguments ( ArrayList < B > , Generic < A > ) public static < T > void fList ( List < ? extends T > a , Generic < ? extends T > b ) { a.add ( b.get ( ) ) ; // < -- Error here } Main. < B > fArray ( new B [ 1 ] , new Generic < A > ( new A ( ) ) ) ; // < -- Not applicable"
"if ( agent.TypeComponent == `` blade '' || agent.TypeComponent == `` narcelle '' ) return uniform ( 3.5 , 6 ) ; else return uniform ( 1 , 3 ) ;"
import java.util . * ; public class TestGeneric { public static void main ( String [ ] args ) { GenericClass < Integer > generic = new GenericClass < Integer > ( 7 ) ; String stringFromList = generic.getStringList ( ) .get ( 0 ) ; } static class GenericClass < A > { private A objA ; private List < String > stringList ; GenericClass ( A objA ) { this.objA = objA ; stringList = new ArrayList < String > ( ) ; stringList.add ( `` A string '' ) ; stringList.add ( `` Another string '' ) ; } A getObjA ( ) { return objA ; } List < String > getStringList ( ) { return stringList ; } } }
Caused by : java.lang.IllegalArgumentException : Given item id ( 5422bef6-e472-4d3e-af54-316c52d373da ) does not exist in the containerat com.vaadin.ui.Grid $ AbstractSelectionModel.checkItemIdExists ( Grid.java:1371 ) at com.vaadin.ui.Grid $ SingleSelectionModel.select ( Grid.java:1460 ) at com.vaadin.ui.Grid $ SingleSelectionModel $ 1.select ( Grid.java:1445 )
private void test ( ) throws IOException { // throws is required if ( new Random ( ) .nextInt ( 2 ) ==0 ) throw new IOException ( ) ; throw new RuntimeException ( ) ; } private void test3 ( ) { // throws not required throw new Random ( ) .nextInt ( 2 ) ==0 ? new UncheckedIOException ( null ) : new RuntimeException ( ) ; } private void test2 ( ) throws IOException { throw new Random ( ) .nextInt ( 2 ) ==0 ? new IOException ( ) : new RuntimeException ( ) ; } private void test4 ( ) { // throws not required if ( new Random ( ) .nextInt ( 2 ) ==0 ) throw new Error ( ) ; throw new RuntimeException ( ) ; } private void test5 ( ) { throw new Random ( ) .nextInt ( 2 ) ==0 ? new Error ( ) : new RuntimeException ( ) ; }
System.console ( ) ! = null
"public class myClass { public void doSomething ( ) { try { //do something } catch ( Exception e ) { //extensive error handling } } public void doSomethingElse ( ) { try { //do something else } catch ( Exception e ) { //extensive error handling , copy-pasted from the above method } }"
public SavedCar saveCar ( Car car ) { SavedCar savedCar = this.getDb ( ) .save ( car ) ; return savedCar ; } public List < SavedCars > saveCars ( List < Car > cars ) { return cars.stream ( ) .map ( this : :saveCar ) .collect ( Collectors.toList ( ) ) ; } public SavedCar saveCar ( Car car ) { SavedCar savedCar = this.getDb ( ) .save ( car ) ; return savedCar ; } public List < SavedCars > saveCars ( List < Car > cars ) { List < SavedCars > savedCars = new ArrayList < > ( ) ; for ( Cat car : cars ) { savedCars.add ( this.saveCar ( car ) ) ; } return savedCars . }
| y0 | | x0^3 x0^2 x0 1 | | a || y1 | = | x1^3 x1^2 x1 1 | x | b || y2 | | x2^3 x2^2 x2 1 | | c || y3 | | x3^3 x3^2 x3 1 | | d |
Mike 300.50John 260Lisa 425.33 reader = new Scanner ( ) ; while ( reader.hasNext ( ) ) { name= reader.next ( ) ; salary = reader.nextDouble ( ) ; System.out.println ( name + `` `` + salary + `` \r\n '' ) ; }
num # instances # bytes class name -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1 : 14156 577318512 [ B 2 : 9196 47439696 [ I 3 : 83396 9809992 [ C
private static Set < String > myField ; static { myField = new HashSet < String > ( ) ; myField.add ( `` test '' ) ; } static { myField = new HashSet < String > ( ) ; myField.add ( `` test '' ) ; // illegal forward reference } private static Set < String > myField ;
"@ AutoService ( MyService.class ) public class GeneratedClass implements MyService { } TypeSpec.classBuilder ( `` GeneratedClass '' ) .addModifiers ( Modifier.PUBLIC ) .addSuperinterface ( MyService.class ) .addAnnotation ( AnnotationSpec.builder ( AutoService.class ) .addMember ( `` value '' , `` $ L '' , MyService.class ) .build ( ) )"
GregorianCalendar calender = new GregorianCalendar ( TimeZone.getTimeZone ( `` Asia/Bangkok '' ) ) ; System.out.println ( calender.getTime ( ) ) ;
stringBuilder.append ( '\n ' ) ; stringBuilder.append ( `` \n '' ) ;
"interface A { } interface B { } class C implements A , B { } class D { public static void doThings ( A thing ) { System.out.println ( `` handling A '' ) ; } public static void doThings ( B thing ) { System.out.println ( `` handling B '' ) ; } public static void main ( String [ ] args ) { doThings ( new C ( ) ) ; } } doThings ( C ) ;"
"public class A { public String foo ; } public class B extends A { public String bar ; } public static void main ( String [ ] args ) { Gson gson = new Gson ( ) ; B b = new B ( ) ; b.foo = `` foo '' ; b.bar = `` bar '' ; List < A > list = new ArrayList < A > ( ) ; list.add ( b ) ; System.out.println ( gson.toJson ( b , new TypeToken < A > ( ) { } .getType ( ) ) ) ; System.out.println ( gson.toJson ( b , new TypeToken < B > ( ) { } .getType ( ) ) ) ; System.out.println ( gson.toJson ( list , new TypeToken < List < A > > ( ) { } .getType ( ) ) ) ; System.out.println ( gson.toJson ( list , new TypeToken < List < B > > ( ) { } .getType ( ) ) ) ; } { `` foo '' : '' foo '' } { `` bar '' : '' bar '' , '' foo '' : '' foo '' } [ { `` bar '' : '' bar '' , '' foo '' : '' foo '' } ] [ { `` bar '' : '' bar '' , '' foo '' : '' foo '' } ] { `` foo '' : '' foo '' } { `` bar '' : '' bar '' , '' foo '' : '' foo '' } [ { `` foo '' : '' foo '' } ] [ { `` bar '' : '' bar '' , '' foo '' : '' foo '' } ]"
SLF4J : No SLF4J providers were found.SLF4J : Defaulting to no-operation ( NOP ) logger implementationSLF4J : See http : //www.slf4j.org/codes.html # noProviders for further details.SLF4J : Class path contains SLF4J bindings targeting slf4j-api versions prior to 1.8.SLF4J : Ignoring binding found at [ jar : file : /home/user/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.2.3/7c4f3c474fb2c041d8028740440937705ebb473a/logback-classic-1.2.3.jar ! /org/slf4j/impl/StaticLoggerBinder.class ] SLF4J : See http : //www.slf4j.org/codes.html # ignoredBindings for an explanation .
"private int checkWhetherGestureMatches ( byte [ ] values , String [ ] refValues ) throws IOException { int valuesSize = 32 ; int ignorePositions = 4 ; byte [ ] valuesX = new byte [ valuesSize ] ; byte [ ] valuesY = new byte [ valuesSize ] ; byte [ ] valuesZ = new byte [ valuesSize ] ; for ( int i = 0 ; i < valuesSize ; i++ ) { int position = i * 3 + ignorePositions ; valuesX [ i ] = values [ position ] ; valuesY [ i ] = values [ position + 1 ] ; valuesZ [ i ] = values [ position + 2 ] ; } Double [ ] valuesXprevious = new Double [ valuesSize ] ; Double [ ] valuesYprevious = new Double [ valuesSize ] ; Double [ ] valuesZprevious = new Double [ valuesSize ] ; for ( int i = 0 ; i < valuesSize ; i++ ) { int position = i * 3 + ignorePositions ; valuesXprevious [ i ] = Double.parseDouble ( refValues [ position ] ) ; valuesYprevious [ i ] = Double.parseDouble ( refValues [ position + 1 ] ) ; valuesZprevious [ i ] = Double.parseDouble ( refValues [ position + 2 ] ) ; } int incorrectPoints = 0 ; for ( int j = 0 ; j < valuesSize ; j++ ) { if ( valuesX [ j ] < valuesXprevious [ j ] + 20 & & valuesX [ j ] > valuesXprevious [ j ] - 20 & & valuesY [ j ] < valuesYprevious [ j ] + 20 & & valuesY [ j ] > valuesYprevious [ j ] - 20 & & valuesZ [ j ] < valuesZprevious [ j ] + 20 & & valuesZ [ j ] > valuesZprevious [ j ] - 20 ) { } else { incorrectPoints++ ; } } return incorrectPoints ; }"
public class GenericsExample { public static void main ( String [ ] args ) { Set < Car > set = new HashSet < > ( ) ; set.add ( getAnimal ( ) ) ; } static < T extends Animal > T getAnimal ( ) { return ( T ) new Animal ( ) { } ; } interface Animal { } class Car { } }
Integer getElement ( List < Integer > list ) { int i = Random.getInt ( list.size ( ) ) ; return list.get ( i ) ; }
"int [ ] nums = { 3 , -4 , 8 , 4 , -2 , 17 , 9 , -10 , 14 , 6 , -12 } ; int sum = Arrays.stream ( nums ) .filter ( w - > { System.out.print ( `` `` + w ) ; return true ; } ) // trace .map ( n - > Math.abs ( n ) ) .filter ( w - > { System.out.print ( `` `` + w ) ; return true ; } ) // trace .filter ( n - > n % 2 == 0 ) .distinct ( ) .sum ( ) ; System.out.println ( sum ) ; 3 3 -4 4 8 8 4 4 -2 2 17 17 9 9 -10 10 14 14 6 6 -12 1256 [ 3 , -4 , 8 , 4 , -2 , 17 , 9 , -10 , 14 , 6 , -12 ] [ 3 4 8 4 2 17 9 10 14 6 12 ] 56"
"public void deleteTraining ( Training training ) { SQLiteDatabase db = this.getWritableDatabase ( ) ; db.delete ( TABLE_TRAININGS , KEY_ID + `` = ? `` , new String [ ] { String.valueOf ( training.getID ( ) ) } ) ; db.close ( ) ; } public View getView ( int position , View convertView , ViewGroup parent ) { if ( convertView == null ) { // if it 's not recycled , initialize some attributes btn = new Button ( context ) ; btn.setLayoutParams ( new GridView.LayoutParams ( 370 , 350 ) ) ; btn.setPadding ( 2,100,2,100 ) ; btn.setOnClickListener ( new CustomOnClickListener ( position , context ) ) ; btn.setOnLongClickListener ( new CustomOnLongClickListener ( position , context , btn ) ) ; } else { btn = ( Button ) convertView ; } btn.setText ( db.getTraining ( position ) ._name ) ; //Here the programm throws a Nullpointer Exception AFTER deleting an entry from the database btn.setTextColor ( Color.WHITE ) ; btn.setBackgroundResource ( R.drawable.button_border ) ; btn.setTag ( `` not_activated '' ) ; btn.setId ( position ) ; return btn ; } public void recalcIDs ( ) { int k = 1 ; int subtract = 1 ; int id ; Training training ; for ( int i = deleted.get ( 0 ) +1 ; i < db.getTrainingCount ( ) ; i++ ) { if ( deleted.size ( ) > 1 ) { if ( i < deleted.get ( k ) ) { training = db.getTraining ( i ) ; id = training.getID ( ) ; training.setID ( id-subtract ) ; } else { k+=1 ; subtract+=1 ; } } else { training = db.getTraining ( i ) ; id = training.getID ( ) ; training.setID ( id-subtract ) ; } } } Training getTraining ( int id ) { SQLiteDatabase db = this.getReadableDatabase ( ) ; Training training ; Cursor cursor = db.query ( TABLE_TRAININGS , new String [ ] { KEY_ID , KEY_NAME , KEY_SK } , KEY_ID + `` = ? `` , new String [ ] { String.valueOf ( id ) } , null , null , null , null ) ; if ( cursor ! = null & & cursor.moveToFirst ( ) ) { training = new Training ( Integer.parseInt ( cursor.getString ( 0 ) ) , cursor.getString ( 1 ) , cursor.getLong ( 2 ) ) ; cursor.close ( ) ; } else { training = null ; Toast.makeText ( con , '' Could n't find any training sessions ! `` , Toast.LENGTH_LONG ) .show ( ) ; } // return training return training ; }"
333333333333333.33d == 333333333333333.3d 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999d
"interface Property < T > { T get ( ) ; } class BoolProperty implements Property < Boolean > { @ Override public Boolean get ( ) { return false ; } } class StringProperty implements Property < String > { @ Override public String get ( ) { return `` hello '' ; } } class OtherStringProperty implements Property < String > { @ Override public String get ( ) { return `` bye '' ; } public String getSpecialValue ( ) { return `` you are special '' ; } } class Result < P extends Property < X > , X > { P p ; List < X > list ; } Result < BooleanProperty , Boolean > res = new Result < BooleanProperty , Boolean > ( ) ; Result < BooleanProperty > res = new Result < BooleanProperty > ( ) ; Result < OtherStringProperty > res = new Result < OtherStringProperty > ( ) ; String spec = res.p.getSpecialValue ( ) ; String prop = res.list.get ( 0 ) ;"
String s = `` 1.01 '' ; Matcher matcher = Pattern.compile ( `` [ +-/\\*\\^\\ % ] '' ) .matcher ( s ) ; if ( matcher.find ( ) ) { System.out.println ( matcher.group ( ) ) ; }
class Test { void accept ( Consumer < Integer > c ) { } static void consumer ( Integer i ) { } void foo ( ) { accept ( this : :consumer ) ; // The method accept ( Consumer < Integer > ) in the type Test is not applicable for the arguments ( this : :consumer ) accept ( Test : :consumer ) ; // Valid } }
public void addEmptyMember ( List < ? > someList ) { if ( someList instanceof List < String > ) { ( ( List < String > ) someList ) .add ( `` '' ) ; } }
String aoid = Optional.ofNullable ( createOrder.getAltorderid ( ) ) .orElse ( `` '' ) ; int quantity = Integer.parseInt ( each.getQty ( ) ) ; double amount = Double.parseDouble ( each.getPrice ( ) .getAmount ( ) ) ;
package _test ; public class TestClass { public static void main ( String ... args ) { Object testClazz $ 1 = new Object ( ) { public String toString ( ) { return `` hello '' ; } } ; TestClass $ 1 test = new TestClass $ 1 ( ) ; System.out.println ( testClazz $ 1.toString ( ) ) ; test.doStuff ( ) ; } } class TestClass $ 1 { public void doStuff ( ) { System.out.println ( `` hello2 '' ) ; } } package _test ; public class TestClass { public static void main ( String ... args ) { Object testClass $ 1 = new Object ( ) { public String toString ( ) { return `` hello '' ; } } ; TestClass $ 1 test = new TestClass $ 1 ( ) ; System.out.println ( testClass $ 1.toString ( ) ) ; test.doStuff ( ) ; } } class TestClass $ 1 { public void doStuff ( ) { System.out.println ( `` hello2 '' ) ; } }
try { ... } catch ( StrangeException e ) { ... } try { ... } catch ( StrangeException e ) { ... } catch ( MysteriousException e ) { ... } catch ( FrighteningException e ) { ... }
public class FibonacciNim { private static Scanner myScanner = new Scanner ( System.in ) ; private static final int NO_OF_HEAPS ; private static final int TOKENS_PER_HEAP ; public static void main ( String [ ] args ) { // set heaps and tokens using args if ( args.length == 0 ) { NO_OF_HEAPS = 3 ; TOKENS_PER_HEAP = 9 ; } else { boolean usageCorrect = false ; for ( int i = 0 ; i < args.length-1 ; i++ ) { if ( args [ i ] .equals ( `` -heaps '' ) ) { try { NO_OF_HEAPS = Integer.parseInt ( args [ i+1 ] ) ) ; usageCorrect = true ; } catch ( NumberFormatException e ) { usageCorrect = false ; } } else if ( args [ i ] .equals ( `` -tokens '' ) ) { try { TOKENS_PER_HEAP = Integer.parseInt ( args [ i+1 ] ) ; usageCorrect = true ; } catch ( NumberFormatException e ) { usageCorrect = false ; } } } } ... } ... }
cargo new testlibcd testlib void tell_me_the_answer ( void ) ; % module testlib % { # include `` testlib.h '' % } % include `` testlib.h '' mkdir testlibswig -outdir testlib -java -package testlib testlib.i public final class Program { static { System.loadLibrary ( `` testlib '' ) ; } public static void main ( final String [ ] args ) { testlib.testlib.tell_me_the_answer ( ) ; } } javac Program.java testlib\testlib.java testlib\testlibJNI.java # [ no_mangle ] pub extern `` C '' fn tell_me_the_answer ( ) { println ! ( `` The answer is ... APPLES ! `` ) ; } extern crate gcc ; fn main ( ) { gcc : :Config : :new ( ) .file ( `` testlib_wrap.c '' ) .include ( `` C : /Program Files/Java/jdk1.8.0_45/include '' ) .include ( `` C : /Program Files/Java/jdk1.8.0_45/include/win32 '' ) .compile ( `` libtestlib.a '' ) ; } [ package ] name = `` testlib '' version = `` 0.1.0 '' build = `` build.rs '' [ lib ] name = `` testlib '' crate-type = [ `` dylib '' ] [ build-dependencies ] gcc = `` 0.3 '' cargo build java -Djava.library.path=target\debug Program Exception in thread `` main '' java.lang.UnsatisfiedLinkError : testlib.testlibJNI.tell_me_the_answer ( ) V at testlib.testlibJNI.tell_me_the_answer ( Native Method ) at testlib.testlib.tell_me_the_answer ( testlib.java:13 ) at Program.main ( Program.java:6 )
abstract class Data { abstract static class Builder < T extends Data > { private String one ; protected Builder ( ) { this.one = null ; } public final Builder < T > withOne ( final String value ) { this.one = value ; return this ; } protected abstract T build ( ) ; } private final String one ; protected Data ( final Builder < ? extends Data > builder ) { this.one = builder.one ; } public final String getOne ( ) { return this.one ; } } public final class Extension extends Data { public static final class ExtensionBuilder extends Data.Builder < Extension > { private String two ; private ExtensionBuilder ( ) { super ( ) ; this.two = null ; } public static final ExtensionBuilder newInstance ( ) { return new ExtensionBuilder ( ) ; } public final ExtensionBuilder withTwo ( final String value ) { this.two = value ; return this ; } public final Extension build ( ) { return new Extension ( this ) ; } } private final String two ; private Extension ( final ExtensionBuilder builder ) { super ( builder ) ; this.two = builder.two ; } public final String getTwo ( ) { return this.two ; } } Extension one = Extension.ExtensionBuilder .newInstance ( ) .withTwo ( `` two '' ) .withOne ( `` one '' ) .build ( ) ; Extension two = Extension.ExtensionBuilder .newInstance ( ) .withOne ( `` one '' ) .withTwo ( `` two '' ) .build ( ) ;
"URI uri = URI.create ( `` http : //192.168.1.102:8080/ '' ) ; HttpRequest getRequest = HttpRequest.newBuilder ( ) .uri ( uri ) .GET ( ) .build ( ) ; HttpResponse < String > response = client.send ( getRequest , HttpResponse.BodyHandler.asString ( ) ) ; System.out.println ( `` response to get : `` + response.body ( ) ) ; WARNING : Using incubator modules : jdk.incubator.httpclientException in thread `` main '' java.io.EOFException : EOF reached while reading at jdk.incubator.httpclient/jdk.incubator.http.Http1AsyncReceiver $ Http1TubeSubscriber.onComplete ( Http1AsyncReceiver.java:507 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ ReadSubscription.signalCompletion ( SocketTube.java:551 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ InternalReadSubscription.read ( SocketTube.java:728 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ SocketFlowTask.run ( SocketTube.java:171 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler $ SchedulableTask.run ( SequentialScheduler.java:198 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:271 ) at jdk.incubator.httpclient/jdk.incubator.http.internal.common.SequentialScheduler.runOrSchedule ( SequentialScheduler.java:224 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ InternalReadSubscription.signalReadable ( SocketTube.java:675 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ InternalReadPublisher $ ReadEvent.signalEvent ( SocketTube.java:829 ) at jdk.incubator.httpclient/jdk.incubator.http.SocketTube $ SocketFlowEvent.handle ( SocketTube.java:243 ) at jdk.incubator.httpclient/jdk.incubator.http.HttpClientImpl $ SelectorManager.handleEvent ( HttpClientImpl.java:769 ) at jdk.incubator.httpclient/jdk.incubator.http.HttpClientImpl $ SelectorManager.run ( HttpClientImpl.java:731 )"
"package com.webfoo.newz ; import java.io.IOException ; import java.net.SocketException ; import android.app.Activity ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.view.View ; import android.widget.TextView ; import org.apache.commons.net.nntp.NNTPClient ; public class NewzActivity extends Activity { TextView statusText ; String PREFS_NAME = `` MyPrefsFile '' ; SharedPreferences settings ; NNTPClient nntpClient ; int port ; String username ; String password ; String host ; /** Called when the activity is first created . */ @ Overridepublic void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; this.statusText = ( TextView ) findViewById ( R.id.connectionStatusTextView ) ; this.nntpClient = new NNTPClient ( ) ; this.settings = getSharedPreferences ( PREFS_NAME , 0 ) ; } public void openSettings ( View button ) { Intent settingsIntent = new Intent ( NewzActivity.this , SettingsActivity.class ) ; startActivity ( settingsIntent ) ; } public void makeConnection ( View button ) { this.statusText.setText ( `` Connecting ... '' ) ; this.port = settings.getInt ( `` UsenetPort '' , 563 ) ; this.host = settings.getString ( `` UsenetHost '' , `` '' ) ; this.nntpClient.setDefaultPort ( port ) ; this.nntpClient.setDefaultTimeout ( 9999 ) ; // this.nntpClient.setConnectTimeout ( 9999 ) ; this.statusText.setText ( `` Connecting to `` + host ) ; try { this.nntpClient.connect ( host ) ; } catch ( SocketException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } this.statusText.setText ( `` Connected to `` + host ) ; if ( nntpClient.isConnected ( ) ) { setAuthDetails ( ) ; } else { this.statusText.setText ( `` Failed to Connected to `` + host ) ; } } private void setAuthDetails ( ) { this.username = settings.getString ( `` UsenetUsername '' , `` '' ) ; this.password = settings.getString ( `` UsenetPassword '' , `` '' ) ; try { nntpClient.authinfoUser ( username ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } try { nntpClient.authinfoPass ( password ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } statusText.setText ( `` Authenticated as `` + username ) ; } }"
public static void main ( String [ ] args ) { new Stuff ( null ) ; new Stuff ( `` a '' ) ; new Stuff ( 1 ) ; } public class Stuff { Stuff ( Object o ) { System.out.println ( `` object '' ) ; } Stuff ( String s ) { System.out.println ( `` string '' ) ; } } stringstringobject public class Stuff { Stuff ( String s ) { System.out.println ( `` string '' ) ; } Stuff ( Integer o ) { System.out.println ( `` Integer '' ) ; } } The constructore Stuff ( String ) is ambigous .
"public class ImmutableList < T > { public < U super T > ImmutableList < U > add ( U element ) { ... } } public class ImmutableList < T > { public ImmutableList < T > add ( T element ) { ... } public static < U > ImmutableList < U > add ( ImmutableList < ? extends U > list , U element ) { ... } } // if ' U super T ' were legallist.add ( monkey ) .add ( human ) .add ( rock ) ; // assuming 'import static ImmutableList.add'add ( add ( add ( list , monkey ) , human ) , rock ) ;"
"public interface Item < D extends Description , C extends Category < D , Item < D , C > > > { public C getCategory ( ) ; public void setCategory ( C category ) ; } public interface Category < D extends Description , I extends Item > { public List < I > getItems ( ) ; public void setItems ( List < I > items ) ; } I extends Item < D , Category < D , I > >"
"package com.example ; import com.example.Example.GCSEvent ; import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport ; import com.google.api.client.http.HttpRequestInitializer ; import com.google.api.client.http.HttpTransport ; import com.google.api.client.json.JsonFactory ; import com.google.api.client.json.jackson2.JacksonFactory ; import com.google.api.services.dataflow.Dataflow ; import com.google.api.services.dataflow.model.CreateJobFromTemplateRequest ; import com.google.api.services.dataflow.model.RuntimeEnvironment ; import com.google.auth.http.HttpCredentialsAdapter ; import com.google.auth.oauth2.GoogleCredentials ; import com.google.cloud.functions.BackgroundFunction ; import com.google.cloud.functions.Context ; import java.io.IOException ; import java.security.GeneralSecurityException ; import java.util.HashMap ; import java.util.logging.Logger ; public class Example implements BackgroundFunction < GCSEvent > { private static final Logger logger = Logger.getLogger ( Example.class.getName ( ) ) ; @ Override public void accept ( GCSEvent event , Context context ) throws IOException , GeneralSecurityException { logger.info ( `` Event : `` + context.eventId ( ) ) ; logger.info ( `` Event Type : `` + context.eventType ( ) ) ; HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport ( ) ; JsonFactory jsonFactory = JacksonFactory.getDefaultInstance ( ) ; GoogleCredentials credentials = GoogleCredentials.getApplicationDefault ( ) ; HttpRequestInitializer requestInitializer = new HttpCredentialsAdapter ( credentials ) ; Dataflow dataflowService = new Dataflow.Builder ( httpTransport , jsonFactory , requestInitializer ) .setApplicationName ( `` Google Dataflow function Demo '' ) .build ( ) ; String projectId = `` my-project-id '' ; RuntimeEnvironment runtimeEnvironment = new RuntimeEnvironment ( ) ; runtimeEnvironment.setBypassTempDirValidation ( false ) ; runtimeEnvironment.setTempLocation ( `` gs : //my-dataflow-job-bucket/tmp '' ) ; CreateJobFromTemplateRequest createJobFromTemplateRequest = new CreateJobFromTemplateRequest ( ) ; createJobFromTemplateRequest.setEnvironment ( runtimeEnvironment ) ; createJobFromTemplateRequest.setLocation ( `` us-central1 '' ) ; createJobFromTemplateRequest.setGcsPath ( `` gs : //my-dataflow-job-bucket-staging/templates/cloud-dataflow-template '' ) ; createJobFromTemplateRequest.setJobName ( `` Dataflow-Cloud-Job '' ) ; createJobFromTemplateRequest.setParameters ( new HashMap < String , String > ( ) ) ; createJobFromTemplateRequest.getParameters ( ) .put ( `` inputFile '' , '' gs : //cloud-dataflow-bucket-input/*.txt '' ) ; dataflowService.projects ( ) .templates ( ) .create ( projectId , createJobFromTemplateRequest ) ; throw new UnsupportedOperationException ( `` Not supported yet . `` ) ; } public static class GCSEvent { String bucket ; String name ; String metageneration ; } } < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > cloudfunctions < /groupId > < artifactId > http-function < /artifactId > < version > 1.0-SNAPSHOT < /version > < properties > < maven.compiler.target > 11 < /maven.compiler.target > < maven.compiler.source > 11 < /maven.compiler.source > < /properties > < dependencies > < ! -- https : //mvnrepository.com/artifact/com.google.auth/google-auth-library-credentials -- > < dependency > < groupId > com.google.auth < /groupId > < artifactId > google-auth-library-credentials < /artifactId > < version > 0.21.1 < /version > < /dependency > < dependency > < groupId > com.google.apis < /groupId > < artifactId > google-api-services-dataflow < /artifactId > < version > v1b3-rev207-1.20.0 < /version > < /dependency > < dependency > < groupId > com.google.cloud.functions < /groupId > < artifactId > functions-framework-api < /artifactId > < version > 1.0.1 < /version > < /dependency > < dependency > < groupId > com.google.auth < /groupId > < artifactId > google-auth-library-oauth2-http < /artifactId > < version > 0.21.1 < /version > < /dependency > < /dependencies > < ! -- Required for Java 11 functions in the inline editor -- > < build > < plugins > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-compiler-plugin < /artifactId > < version > 3.8.1 < /version > < configuration > < excludes > < exclude > .google/ < /exclude > < /excludes > < /configuration > < /plugin > < /plugins > < /build > < /project >"
"@ Controller @ RequestMapping ( `` / '' ) public class MyModelController { @ ModelAttribute ( `` myModel '' ) public MyModel myModel ( ) { return new MyModel ( ) ; } @ GetMapping public String showPage ( ) { return `` thepage '' ; } @ PostMapping public String doAction ( @ Valid @ ModelAttribute ( `` myModel '' ) MyModel myModel , BindingResult bindingResult , Map < String , Object > model , RedirectAttributes redirectAttrs ) throws Exception { model.clear ( ) ; if ( bindingResult.hasErrors ( ) ) { redirectAttrs.addFlashAttribute ( `` org.springframework.validation.BindingResult.myModel '' , bindingResult ) ; redirectAttrs.addFlashAttribute ( `` myModel '' , myModel ) ; } else { // service logic } return `` redirect : /thepage '' ; } }"
"BinaryTree < Character , Integer > t1 = null ; BinaryTree < Character , Integer > t2 = null ; BinaryTree < Character , Integer > tFinal = null ; int treeSize = TREES.size ( ) ; for ( int i = 0 ; i < treeSize ; i++ ) { for ( BinaryTree < Character , Integer > t : TREES ) { System.out.println ( `` treeSize `` + treeSize ) ; System.out.println ( t.getRoot ( ) .getElement ( ) + `` t.getRoot ( ) .getElement ( ) '' ) ; // here I edited the merge function in Binary Tree to set // the new root // to have null value for value , and itemTwo for weight System.out.println ( t.getRoot ( ) .getValue ( ) + `` weight of tree \n '' ) ; t1 = t ; TREES.remove ( t ) ; } for ( BinaryTree < Character , Integer > t : TREES ) { t2 = t ; System.out.println ( t ) ; } int weight = t1.getRoot ( ) .getElement ( ) + t2.getRoot ( ) .getElement ( ) ; tFinal.merge ( null , weight , t1 , t2 ) ; }"
"public void switch ( int p1 , int p2 ) { String substring = myCode.substring ( p1 , p2-1 ) ; }"
class Foo { private final Bar bar ; Foo ( ) { this.bar = new Bar ( this ) ; } } class Bar { private final Foo foo ; Bar ( Foo foo ) { this.foo = foo ; } }
String value = `` ( 5+5 ) + ( ( 5+8 + ( 85*4 ) ) +524 ) '' ; ( 85*4 ) as one ( 5+8 + one ) as two ( two+524 ) as three ( ( 5+5 ) + three ) as four ...
public class AbstractBadlyNamedClass { // Not abstract ! // ... }
"while ( true ) { Item i = firstQueue.take ( ) ; statusMap.put ( i , AFTER_FIRST ) ; process ( i ) ; secondQueue.add ( i ) ; statusMap.put ( i , IN_SECOND ) ; }"
"public class A extends B { public A ( HashSet < Obj > h1 , HashMap < UID , Objects > m1 ) { super ( new C ( h1 ) ) ; //h1 should contain changes related to m1.. } public class A extends B { public A ( HashSet < Obj > h1 , HashMap < UID , Objects > m1 ) { runMyFunc ( h1 , m1 ) ; super ( new C ( h1 ) ) ; } runMyFunc ( HashSet < Obj > h1 , HashMap < UID , Objects > m1 ) { //do checks //more checks ... // if something then h1.setUid ( m1.get ( 0 ) ) ... return h1 ; } public class A extends B { private A ( HashSet < Obj > h1 ) { super ( new C ( h1 ) ) ; } public A ( HashSet < Obj > h1 , HashMap < UID , Objects > m1 ) { runMyFunc ( h1 , m1 ) ; this ( h1 ) ; }"
"public static < T > TypeToken < ? extends T > extendsType ( Class < T > type ) { return null ; } public static < T > TypeToken < List < T > > list ( TypeToken < T > type ) { return null ; } class TypeToken < X > { static < T > TypeToken < ? extends T > extendsType ( Class < T > type ) { return null ; } static < T > TypeToken < List < T > > list ( TypeToken < T > type ) { return null ; } static void wat ( ) { TypeToken < List < ? extends Number > > a = new TypeToken < List < ? extends Number > > ( ) { } ; // valid TypeToken < List < ? extends Number > > b = list ( extendsType ( Number.class ) ) ; // invalid , why ? TypeToken < ? extends List < ? extends Number > > c = list ( extendsType ( Number.class ) ) ; // valid , why ? } } error : incompatible types : no instance ( s ) of type variable ( s ) T # 1 , CAP # 1 , T # 2 exist so that TypeToken < List < T # 1 > > conforms to TypeToken < List < ? extends Number > > TypeToken < List < ? extends Number > > b = list ( extendsType ( Number.class ) ) ; // invalid , why ? ^ where T # 1 , T # 2 are type-variables : T # 1 extends Object declared in method < T # 1 > list ( TypeToken < T # 1 > ) T # 2 extends Object declared in method < T # 2 > extendsType ( Class < T # 2 > ) where CAP # 1 is a fresh type-variable : CAP # 1 extends T # 2 from capture of ? extends T # 2"
"mvn clean mvn package INFO org.eclipse.jetty.server.Server : doStart:327 ~ jetty-9.2.13.v20150730 INFO org.eclipse.jetty.server.Server : doStart:327 ~ jetty-9.2.z-SNAPSHOT org.eclipse.jetty.server.Server : doStart:327 ~ jetty-9.2.13.v20150730org.eclipse.jetty.server.handler.ContextHandler $ Context : log:2052 ~ No Spring WebApplicationInitializer types detected on classpath org.eclipse.jetty.server.Server : doStart:327 ~ jetty-9.2.z-SNAPSHOTorg.eclipse.jetty.annotations.AnnotationConfiguration : configure:456 ~ ServletContainerInitializers : detected . Class hierarchy : empty < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > de.myPro.test < /groupId > < artifactId > AllInOneBoiler < /artifactId > < version > 0.0.1-SNAPSHOT < /version > < packaging > jar < /packaging > < name > AllInOneBoiler < /name > < url > http : //maven.apache.org < /url > < properties > < project.build.sourceEncoding > UTF-8 < /project.build.sourceEncoding > < log4j.version > 2.7 < /log4j.version > < spring.version > 4.3.3.RELEASE < /spring.version > < camel.version > 2.18.3 < /camel.version > < activemq.version > 5.14.5 < /activemq.version > < jolokia.version > 1.3.5 < /jolokia.version > < jetty.version > 9.2.13.v20150730 < /jetty.version > < /properties > < dependencies > < ! -- Log4J Start -- > < dependency > < groupId > org.apache.logging.log4j < /groupId > < artifactId > log4j-core < /artifactId > < version > $ { log4j.version } < /version > < /dependency > < dependency > < groupId > org.apache.logging.log4j < /groupId > < artifactId > log4j-jcl < /artifactId > < version > $ { log4j.version } < /version > < /dependency > < dependency > < groupId > org.apache.logging.log4j < /groupId > < artifactId > log4j-slf4j-impl < /artifactId > < version > $ { log4j.version } < /version > < /dependency > < dependency > < groupId > org.apache.logging.log4j < /groupId > < artifactId > log4j-web < /artifactId > < version > $ { log4j.version } < /version > < /dependency > < ! -- Log4J Ende -- > < ! -- Camel Start -- > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-core < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-spring < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-jms < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-http4 < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-mail < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-gson < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-saxon < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-jdbc < /artifactId > < version > $ { camel.version } < /version > < /dependency > < dependency > < groupId > org.apache.camel < /groupId > < artifactId > camel-sql < /artifactId > < version > $ { camel.version } < /version > < /dependency > < ! -- Camel Ende -- > < ! -- Active MQ Start -- > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-client < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-openwire-legacy < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-camel < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-jaas < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-broker < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-console < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-shiro < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-spring < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-pool < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-jms-pool < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-amqp < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-http < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-mqtt < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-stomp < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-kahadb-store < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-leveldb-store < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-jdbc-store < /artifactId > < version > $ { activemq.version } < /version > < /dependency > < dependency > < groupId > org.apache.activemq.protobuf < /groupId > < artifactId > activemq-protobuf < /artifactId > < version > 1.1 < /version > < /dependency > < dependency > < groupId > org.fusesource.hawtbuf < /groupId > < artifactId > hawtbuf < /artifactId > < version > 1.11 < /version > < /dependency > < dependency > < groupId > org.jasypt < /groupId > < artifactId > jasypt < /artifactId > < version > 1.9.2 < /version > < /dependency > < dependency > < groupId > org.apache.geronimo.specs < /groupId > < artifactId > geronimo-jms_1.1_spec < /artifactId > < version > 1.1.1 < /version > < /dependency > < dependency > < groupId > org.apache.geronimo.specs < /groupId > < artifactId > geronimo-jta_1.0.1B_spec < /artifactId > < version > 1.1.1 < /version > < /dependency > < dependency > < groupId > org.apache.geronimo.specs < /groupId > < artifactId > geronimo-j2ee-management_1.1_spec < /artifactId > < version > 1.0.1 < /version > < /dependency > < dependency > < groupId > org.apache.geronimo.specs < /groupId > < artifactId > geronimo-annotation_1.0_spec < /artifactId > < version > 1.1.1 < /version > < /dependency > < dependency > < groupId > org.apache.xbean < /groupId > < artifactId > xbean-spring < /artifactId > < version > 4.5 < /version > < /dependency > < dependency > < groupId > com.sun.xml.bind < /groupId > < artifactId > jaxb-core < /artifactId > < version > 2.2.11 < /version > < /dependency > < dependency > < groupId > com.sun.xml.bind < /groupId > < artifactId > jaxb-impl < /artifactId > < version > 2.2.11 < /version > < /dependency > < dependency > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-web < /artifactId > < version > $ { activemq.version } < /version > < exclusions > < exclusion > < groupId > org.apache.activemq < /groupId > < artifactId > activemq-all < /artifactId > < /exclusion > < /exclusions > < /dependency > < ! -- Active MQ Ende -- > < ! -- Spring Start -- > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-core < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-beans < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-context < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-jdbc < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-web < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-webmvc < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-expression < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-jms < /artifactId > < version > $ { spring.version } < /version > < /dependency > < dependency > < groupId > org.springframework < /groupId > < artifactId > spring-tx < /artifactId > < version > $ { spring.version } < /version > < /dependency > < ! -- Spring Ende -- > < ! -- Jolokia Start -- > < dependency > < groupId > org.jolokia < /groupId > < artifactId > jolokia-core < /artifactId > < version > $ { jolokia.version } < /version > < /dependency > < dependency > < groupId > org.jolokia < /groupId > < artifactId > jolokia-jvm < /artifactId > < version > $ { jolokia.version } < /version > < /dependency > < dependency > < groupId > org.jolokia < /groupId > < artifactId > jolokia-spring < /artifactId > < version > $ { jolokia.version } < /version > < /dependency > < ! -- Jolokia Ende -- > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-server < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < ! -- Jetty Start -- > < ! -- < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-security < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-webapp < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-http < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-annotations < /artifactId > < version > $ { jetty.version } < /version > < /dependency > -- > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > apache-jstl < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.eclipse.jetty.websocket < /groupId > < artifactId > javax-websocket-server-impl < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.eclipse.jetty < /groupId > < artifactId > apache-jsp < /artifactId > < version > $ { jetty.version } < /version > < /dependency > < dependency > < groupId > org.ow2.asm < /groupId > < artifactId > asm < /artifactId > < version > 5.1 < /version > < /dependency > < ! -- Jetty Ende -- > < /dependencies > < build > < finalName > BoilerPlate Standalone ActiveMQ and Camel < /finalName > < plugins > < plugin > < artifactId > maven-compiler-plugin < /artifactId > < version > 3.5 < /version > < configuration > < source > 1.8 < /source > < target > 1.8 < /target > < /configuration > < /plugin > < plugin > < groupId > org.apache.camel < /groupId > < artifactId > camel-maven-plugin < /artifactId > < version > $ { camel.version } < /version > < /plugin > < plugin > < groupId > org.eclipse.jetty < /groupId > < artifactId > jetty-maven-plugin < /artifactId > < version > $ { jetty.version } < /version > < ! -- < configuration > < webAppConfig > < contextPath > / $ { project.artifactId } < /contextPath > < webInfIncludeJarPattern > busines-letter-*. < /webInfIncludeJarPattern > < /webAppConfig > < /configuration > -- > < dependencies > < dependency > < groupId > org.ow2.asm < /groupId > < artifactId > asm < /artifactId > < version > 5.1 < /version > < /dependency > < dependency > < groupId > org.ow2.asm < /groupId > < artifactId > asm-commons < /artifactId > < version > 5.1 < /version > < /dependency > < /dependencies > < /plugin > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-shade-plugin < /artifactId > < version > 2.3 < /version > < executions > < execution > < phase > package < /phase > < goals > < goal > shade < /goal > < /goals > < configuration > < filters > < filter > < artifact > * : * < /artifact > < excludes > < exclude > META-INF/*.SF < /exclude > < exclude > META-INF/*.DSA < /exclude > < exclude > META-INF/*.RSA < /exclude > < /excludes > < /filter > < /filters > < transformers > < transformer implementation= '' org.apache.maven.plugins.shade.resource.AppendingTransformer '' > < resource > META-INF/spring.handlers < /resource > < /transformer > < transformer implementation= '' org.apache.maven.plugins.shade.resource.AppendingTransformer '' > < resource > META-INF/spring.schemas < /resource > < /transformer > < transformer implementation= '' org.apache.maven.plugins.shade.resource.AppendingTransformer '' > < resource > META-INF/cxf/bus-extensions.txt < /resource > < /transformer > < transformer implementation= '' org.apache.maven.plugins.shade.resource.ServicesResourceTransformer '' / > < transformer implementation= '' org.apache.maven.plugins.shade.resource.ManifestResourceTransformer '' > < mainClass > $ { mainClass } < /mainClass > < /transformer > < /transformers > < /configuration > < /execution > < /executions > < /plugin > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-jar-plugin < /artifactId > < version > 2.6 < /version > < configuration > < archive > < manifest > < addClasspath > true < /addClasspath > < mainClass > org.apache.camel.spring.Main < /mainClass > < classpathPrefix > lib/ < /classpathPrefix > < /manifest > < manifestSections > < manifestSection > < name > $ { project.name } < /name > < manifestEntries > < version > $ { project.version } < /version > < /manifestEntries > < /manifestSection > < /manifestSections > < /archive > < /configuration > < /plugin > < plugin > < ! -- Das Verzeichnis conf muss in diesem Projekt mit Kopiert werden , aber nicht in der JAR-Datei sein -- > < artifactId > maven-antrun-plugin < /artifactId > < executions > < execution > < id > move-main-class < /id > < phase > compile < /phase > < configuration > < tasks > < copy file= '' startEmbedded.bat '' tofile= '' $ { project.build.directory } /startEmbedded.bat '' / > < copy todir= '' $ { project.build.directory } /conf '' > < fileset dir= '' conf/ '' / > < /copy > < copy todir= '' $ { project.build.directory } /webapps '' > < fileset dir= '' webapps/ '' / > < /copy > < copy todir= '' $ { project.build.directory } /lib '' > < fileset dir= '' lib/ '' / > < /copy > < /tasks > < /configuration > < goals > < goal > run < /goal > < /goals > < /execution > < /executions > < /plugin > < /plugins > < /build > < /project >"
"class main { public static void main ( String [ ] args ) { try { // Database.insert ( ) ; throw new Exception ( `` insert failed '' ) ; } catch ( Exception ex1 ) { try { // Database.rollback ( ) ; throw new Exception ( `` rollback failed '' ) ; } catch ( Exception ex2 ) { throw new Error ( `` Can not roll back transaction . `` , ex2 ) ; } } finally { try { // Database.close ( ) ; throw new Exception ( `` close failed '' ) ; } catch ( Exception ex3 ) { throw new Error ( `` Can not close database . `` , ex3 ) ; } } } }"
public static void main ( String ... args ) { String autumn = new String ( `` autumn '' ) ; // line one System.out.println ( `` autumn '' == `` summer '' ) ; // line two }
public class Foo { public static Thread thread ; public String thing = `` Thing ! ! `` ; public static void main ( String [ ] args ) { new Foo ( ) .makeThread ( ) ; // < - Foo object may get garbage collected here . thread.start ( ) ; } private void makeThread ( ) { thread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { // ! ! What if the instance of Foo is long gone ? System.out.println ( thing ) ; } } ) ; } }
"enum Cards { SPADE_1 ( 0 , 1 ) , SPADE_2 ( 0 , 2 ) , etc . enum Card { for ( int suit=0 ; suit < 4 ; suit++ ) { for ( int face=1 ; face < 13 ; face++ ) { new Card ( suit , face ) ; } } } I 'm not sure if it 's considered good form to answer my own question , but @ Paul just gave me a brainwave.Declare Card to have a private constructor , and use a static Card getCard ( suit , face ) method to validate combinations before returning them ."
"public class FileClientHandler extends ChannelInboundHandlerAdapter { private int readLength = 8 ; @ Overridepublic void channelActive ( ChannelHandlerContext ctx ) throws Exception { sendFile ( ctx.channel ( ) ) ; } private void sendFile ( Channel channel ) throws IOException { File file = new File ( `` C : \\Users\\xxx\\Desktop\\1.png '' ) ; FileInputStream fis = new FileInputStream ( file ) ; BufferedInputStream bis = new BufferedInputStream ( fis ) ; for ( ; ; ) { byte [ ] bytes = new byte [ readLength ] ; int readNum = bis.read ( bytes , 0 , readLength ) ; // System.out.println ( readNum ) ; if ( readNum == -1 ) { bis.close ( ) ; fis.close ( ) ; return ; } sendToServer ( bytes , channel , readNum ) ; } } private void sendToServer ( byte [ ] bytes , Channel channel , int length ) throws IOException { channel.writeAndFlush ( Unpooled.copiedBuffer ( bytes , 0 , length ) ) ; } } public class FileServerHandler extends ChannelInboundHandlerAdapter { private File file = new File ( `` C : \\Users\\xxx\\Desktop\\2.png '' ) ; private FileOutputStream fos ; public FileServerHandler ( ) { try { if ( ! file.exists ( ) ) { file.createNewFile ( ) ; } else { file.delete ( ) ; file.createNewFile ( ) ; } fos = new FileOutputStream ( file ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } @ Overridepublic void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception { try { ByteBuf buf = ( ByteBuf ) msg ; if ( buf.isReadable ( ) ) { buf.readBytes ( fos , buf.readableBytes ( ) ) ; fos.flush ( ) ; } else { System.out.println ( `` I want to close fileoutputstream ! `` ) ; buf.release ( ) ; fos.flush ( ) ; fos.close ( ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } } }"
< T extends Integer > void passVal ( T t ) { Integer number = 5 ; t = ( T ) number ; // Without cast a compile error is issued }
"public class BridgeTest1Base < T > { public T frob ( ) { return null ; } } public class BridgeTest1Derived extends BridgeTest1Base < Integer > { public Integer frob ( ) { return null ; } } public class BridgeTest1Derived extends BridgeTest1Base < Integer > { @ Override public Integer frob ( ) { return null ; } @ Override public /* bridge */ /* synthetic */ Object frob ( ) { return this.frob ( ) ; } } class BridgeTest2Base { public void frob ( ) { } } public class BridgeTest2Derived extends BridgeTest2Base { } public class BridgeTest2Derived extends BridgeTest2Base { @ Override public /* bridge */ /* synthetic */ void frob ( ) { super.frob ( ) ; } } class frob2 ( ) { fun fred2 ( x : Int = 300 , y : frob2 = mkFrob2 ( x ) ) { println ( `` { this } { x } { y } '' ) } fun mkFrob2 ( x : Int ) : frob2 { return this ; } fun foobar ( ) { fred2 ( ) ; fred2 ( 100 ) ; fred2 ( 100 , frob2 ( ) ) ; } } public final class frob2 { public final void fred2 ( int x , @ NotNull frob2 y ) { Intrinsics.checkParameterIsNotNull ( ( Object ) y , ( String ) '' y '' ) ; String string = `` { this } { x } { y } '' ; System.out.println ( ( Object ) string ) ; } public static /* bridge */ /* synthetic */ void fred2 $ default ( frob2 frob22 , int n , frob2 frob23 , int n2 , Object object ) { if ( ( n2 & 1 ) ! = 0 ) { n = 300 ; } if ( ( n2 & 2 ) ! = 0 ) { frob23 = frob22.mkFrob2 ( n ) ; } frob22.fred2 ( n , frob23 ) ; } @ NotNullpublic final frob2 mkFrob2 ( int x ) { return this ; } public final void foobar ( ) { frob2.fred2 $ default ( this , 0 , null , 3 , null ) ; frob2.fred2 $ default ( this , 100 , null , 2 , null ) ; this.fred2 ( 100 , new frob2 ( ) ) ; } }"
"public class MyClass { private Long stackIdprivate Long questionId } public class MyOtherClass { private Long stackIdprivate Collection < Long > questionIds } [ { 1,100 } , { 1,101 } , { 1,102 } , { 1,103 } , { 2,200 } , { 2,201 } , { 2,202 } , { 1,203 } ] [ { 1 , [ 100,101,102,103 ] } , { 2 , [ 200,201,202,203 ] } ]"
"class A { public static void main ( String args [ ] ) { outer : for ( int i=0 ; i < 10 ; i++ ) { for ( int j=0 ; j < 10 ; j++ ) { if ( j > i ) { System.out.println ( ) ; continue outer ; } System.out.print ( `` `` + ( i *j ) ) ; } } System.out.println ( ) ; } } outer : for ( int i=0 ; i < 10 ; i++ ) // this seems similar to 'for each ' ? continue outer ; // I know that 'continue ' will break the loop and continue the next turn , but what will do in this situaton ?"
"String path = `` /Systems/lenovo/ '' ; String systemString = path.replaceAll ( `` ( . * ) ( /\\w+ ) ( [ / ] [ \\w+ ] ) '' , `` $ 2 '' ) - to get `` /Systems '' - not workingString lenovoString = path.replaceAll ( `` ( . * ) ( /\\w+ ) ( [ / ] [ \\w+ ] ) '' , `` $ 3 '' ) - to get `` /lenovo '' - working ."
"for ( DebitCardVO debitCardVO : debitCardVOList ) { List < String > debitCardList = debitCardVOList.stream ( ) .map ( DebitCardVO : :getCardBranchCode , DebitCardVO : :getAccountNo ) .collect ( Collectors.toList ( ) ) ; }"
"public class Test { private static final Map < Integer , Map < Integer , String > > someMap = new HashMap < > ( ) ; public static void main ( String [ ] args ) { getSomeMap ( ) ; } static Map < ? , Map < ? , ? > > getSomeMap ( ) { return someMap ; //compilation fails } }"
"@ Component ( modules = { OAuthModule.class , // real auth FooServiceModule.class , // real backend OtherApplicationModule.class , /* … */ } ) interface ProductionComponent { Server server ( ) ; } @ Component ( modules = { FakeAuthModule.class , // fake auth FakeFooServiceModule.class , // fake backend OtherApplicationModule.class , /* … */ } ) interface TestComponent extends ProductionComponent { FakeAuthManager fakeAuthManager ( ) ; FakeFooService fakeFooService ( ) ; } public class MyApp extends Application { private ProductionComponent component ; @ Override public void onCreate ( ) { super.onCreate ( ) ; component = ProductionComponent.builder ( ) .serverModule ( new ServerModule ( ) ) .build ( ) ; } }"
"A = { B : 2 , C : 1 , D : 3 } B = { A : 2 , C : 2 , D : 2 } C = { A : 1 , B : 2 , D : 2 } D = { A : 3 , B : 2 , C : 2 }"
public class MyClass { public final static float [ ] TABLE ; strictfp static { // this obviously does n't compile TABLE = new float [ ... ] ; // initialize table } public static float [ ] myMethod ( float [ ] args ) { // do something with table and args // note this methods should *not* be strictfp } }
GraphicsDevice device = MouseInfo.getPointerInfo ( ) .getDevice ( ) ; Rectangle bounds = device.getDefaultConfiguration ( ) .getBounds ( ) ; Toolkit.getDefaultToolkit ( ) .getScreenSize ( ) ; GraphicsEnvironment.getLocalGraphicsEnvironment ( ) .getMaximumWindowBounds ( ) ;
"BrowserSession browser = Browser.getDefaultSession ( ) ; browser.displayPage ( `` http : //www.stackoverflow.com '' ) ; String baseURL = `` http : //www.stackoverflow.com '' ; BrowserFieldConfig config = new BrowserFieldConfig ( ) ; config.setProperty ( BrowserFieldConfig.JAVASCRIPT_ENABLED , Boolean.TRUE ) ; BrowserField browserField = new BrowserField ( config ) ; add ( browserField ) ; browserField.requestContent ( baseURL ) ;"
"2019-05-07T21:03:42.093+0900 : 10.280 : [ GC pause ( G1 Evacuation Pause ) ( young ) , 0.1785373 secs ] [ Parallel Time : 43.4 ms , GC Workers : 28 ] [ GC Worker Start ( ms ) : Min : 10280.0 , Avg : 10280.1 , Max : 10280.6 , Diff : 0.6 ] [ Ext Root Scanning ( ms ) : Min : 0.0 , Avg : 0.4 , Max : 0.8 , Diff : 0.8 , Sum : 12.0 ] [ Update RS ( ms ) : Min : 0.8 , Avg : 1.1 , Max : 1.6 , Diff : 0.8 , Sum : 31.5 ] [ Processed Buffers : Min : 0 , Avg : 2.0 , Max : 3 , Diff : 3 , Sum : 56 ] [ Scan RS ( ms ) : Min : 0.0 , Avg : 0.4 , Max : 0.7 , Diff : 0.7 , Sum : 10.9 ] [ Code Root Scanning ( ms ) : Min : 0.0 , Avg : 0.0 , Max : 0.0 , Diff : 0.0 , Sum : 0.0 ] [ Object Copy ( ms ) : Min : 38.0 , Avg : 38.5 , Max : 39.9 , Diff : 1.9 , Sum : 1079.0 ] [ Termination ( ms ) : Min : 1.3 , Avg : 2.6 , Max : 3.2 , Diff : 1.9 , Sum : 74.1 ] [ Termination Attempts : Min : 413 , Avg : 769.6 , Max : 855 , Diff : 442 , Sum : 21549 ] [ GC Worker Other ( ms ) : Min : 0.0 , Avg : 0.1 , Max : 0.2 , Diff : 0.1 , Sum : 2.0 ] [ GC Worker Total ( ms ) : Min : 42.7 , Avg : 43.2 , Max : 43.4 , Diff : 0.7 , Sum : 1209.5 ] [ GC Worker End ( ms ) : Min : 10323.3 , Avg : 10323.3 , Max : 10323.4 , Diff : 0.1 ] [ Code Root Fixup : 0.0 ms ] [ Code Root Purge : 0.0 ms ] [ Clear CT : 0.4 ms ] [ Other : 134.7 ms ] [ Choose CSet : 0.0 ms ] [ Ref Proc : 132.4 ms ] [ Ref Enq : 0.9 ms ] [ Redirty Cards : 0.3 ms ] [ Humongous Register : 0.1 ms ] [ Humongous Reclaim : 0.0 ms ] [ Free CSet : 0.7 ms ] [ Eden : 928.0M ( 928.0M ) - > 0.0B ( 828.0M ) Survivors : 26.0M- > 120.0M Heap : 1193.0M ( 4096.0M ) - > 409.0M ( 4096.0M ) ] Heap after GC invocations=8 ( full 0 ) : garbage-first heap total 4194304K , used 418816K [ 0x00000006c0000000 , 0x00000006c0204000 , 0x00000007c0000000 ) region size 2048K , 60 young ( 122880K ) , 60 survivors ( 122880K ) Metaspace used 28525K , capacity 30824K , committed 31104K , reserved 1077248K class space used 3583K , capacity 4166K , committed 4224K , reserved 1048576K } [ Times : user=1.21 sys=0.08 , real=0.18 secs ] { Heap before GC invocations=8 ( full 0 ) : garbage-first heap total 4194304K , used 744448K [ 0x00000006c0000000 , 0x00000006c0204000 , 0x00000007c0000000 ) region size 2048K , 219 young ( 448512K ) , 60 survivors ( 122880K ) Metaspace used 28525K , capacity 30824K , committed 31104K , reserved 1077248K class space used 3583K , capacity 4166K , committed 4224K , reserved 1048576K2019-05-07T21:03:42.895+0900 : 11.082 : [ GC pause ( G1 Evacuation Pause ) ( young ) , 0.0505563 secs ] [ Parallel Time : 11.6 ms , GC Workers : 28 ] [ GC Worker Start ( ms ) : Min : 11082.3 , Avg : 11082.6 , Max : 11083.6 , Diff : 1.3 ] [ Ext Root Scanning ( ms ) : Min : 0.0 , Avg : 0.4 , Max : 0.8 , Diff : 0.8 , Sum : 9.9 ] [ Update RS ( ms ) : Min : 0.4 , Avg : 1.0 , Max : 1.5 , Diff : 1.1 , Sum : 29.4 ] [ Processed Buffers : Min : 1 , Avg : 1.8 , Max : 3 , Diff : 2 , Sum : 50 ] [ Scan RS ( ms ) : Min : 0.8 , Avg : 1.2 , Max : 1.4 , Diff : 0.6 , Sum : 32.4 ] [ Code Root Scanning ( ms ) : Min : 0.0 , Avg : 0.0 , Max : 0.0 , Diff : 0.0 , Sum : 0.0 ] [ Object Copy ( ms ) : Min : 8.3 , Avg : 8.4 , Max : 8.6 , Diff : 0.2 , Sum : 236.3 ] [ Termination ( ms ) : Min : 0.0 , Avg : 0.1 , Max : 0.1 , Diff : 0.1 , Sum : 2.8 ] [ Termination Attempts : Min : 1 , Avg : 42.7 , Max : 52 , Diff : 51 , Sum : 1195 ] [ GC Worker Other ( ms ) : Min : 0.0 , Avg : 0.1 , Max : 0.2 , Diff : 0.1 , Sum : 2.0 ] [ GC Worker Total ( ms ) : Min : 10.2 , Avg : 11.2 , Max : 11.5 , Diff : 1.3 , Sum : 312.9 ] [ GC Worker End ( ms ) : Min : 11093.7 , Avg : 11093.8 , Max : 11093.8 , Diff : 0.1 ] [ Code Root Fixup : 0.0 ms ] [ Code Root Purge : 0.0 ms ] [ Clear CT : 0.3 ms ] [ Other : 38.6 ms ] [ Choose CSet : 0.0 ms ] [ Ref Proc : 37.0 ms ] [ Ref Enq : 0.5 ms ] [ Redirty Cards : 0.3 ms ] [ Humongous Register : 0.1 ms ] [ Humongous Reclaim : 0.0 ms ] [ Free CSet : 0.5 ms ] [ Eden : 318.0M ( 252.0M ) - > 0.0B ( 1052.0M ) Survivors : 120.0M- > 48.0M Heap : 727.0M ( 4096.0M ) - > 397.0M ( 4096.0M ) ] Heap after GC invocations=9 ( full 0 ) : garbage-first heap total 4194304K , used 406528K [ 0x00000006c0000000 , 0x00000006c0204000 , 0x00000007c0000000 ) region size 2048K , 24 young ( 49152K ) , 24 survivors ( 49152K ) Metaspace used 28525K , capacity 30824K , committed 31104K , reserved 1077248K class space used 3583K , capacity 4166K , committed 4224K , reserved 1048576K } [ Times : user=0.34 sys=0.02 , real=0.05 secs ] { Heap before GC invocations=9 ( full 0 ) : garbage-first heap total 4194304K , used 912384K [ 0x00000006c0000000 , 0x00000006c0204000 , 0x00000007c0000000 ) region size 2048K , 271 young ( 555008K ) , 24 survivors ( 49152K ) Metaspace used 29461K , capacity 31868K , committed 32256K , reserved 1077248K class space used 3681K , capacity 4237K , committed 4352K , reserved 1048576K 2019-05-05T02:39:16.996+0900 : 201016.724 : [ GC pause ( G1 Evacuation Pause ) ( young ) , 0.0336675 secs ] [ Parallel Time : 12.9 ms , GC Workers : 28 ] [ GC Worker Start ( ms ) : Min : 201016724.7 , Avg : 201016724.9 , Max : 201016725.0 , Diff : 0.2 ] [ Ext Root Scanning ( ms ) : Min : 0.8 , Avg : 1.2 , Max : 5.2 , Diff : 4.4 , Sum : 32.4 ] [ Update RS ( ms ) : Min : 0.0 , Avg : 3.1 , Max : 3.5 , Diff : 3.5 , Sum : 87.7 ] [ Processed Buffers : Min : 0 , Avg : 11.1 , Max : 30 , Diff : 30 , Sum : 310 ] [ Scan RS ( ms ) : Min : 0.1 , Avg : 0.3 , Max : 0.3 , Diff : 0.2 , Sum : 7.3 ] [ Code Root Scanning ( ms ) : Min : 0.0 , Avg : 0.0 , Max : 0.0 , Diff : 0.0 , Sum : 0.1 ] [ Object Copy ( ms ) : Min : 6.9 , Avg : 7.5 , Max : 7.7 , Diff : 0.8 , Sum : 211.2 ] [ Termination ( ms ) : Min : 0.2 , Avg : 0.3 , Max : 0.4 , Diff : 0.2 , Sum : 9.0 ] [ Termination Attempts : Min : 105 , Avg : 124.7 , Max : 146 , Diff : 41 , Sum : 3491 ] [ GC Worker Other ( ms ) : Min : 0.0 , Avg : 0.1 , Max : 0.2 , Diff : 0.2 , Sum : 3.2 ] [ GC Worker Total ( ms ) : Min : 12.4 , Avg : 12.5 , Max : 12.7 , Diff : 0.4 , Sum : 350.8 ] [ GC Worker End ( ms ) : Min : 201016737.3 , Avg : 201016737.4 , Max : 201016737.5 , Diff : 0.2 ] [ Code Root Fixup : 0.0 ms ] [ Code Root Purge : 0.0 ms ] [ Clear CT : 0.7 ms ] [ Other : 20.0 ms ] [ Choose CSet : 0.0 ms ] [ Ref Proc : 17.2 ms ] [ Ref Enq : 0.2 ms ] [ Redirty Cards : 0.3 ms ] [ Humongous Register : 0.1 ms ] [ Humongous Reclaim : 0.0 ms ] [ Free CSet : 1.7 ms ] [ Eden : 4864.0M ( 4864.0M ) - > 0.0B ( 4868.0M ) Survivors : 48.0M- > 44.0M Heap : 5968.1M ( 8192.0M ) - > 1091.2M ( 8192.0M ) ] Heap after GC invocations=19405 ( full 0 ) : garbage-first heap total 8388608K , used 1117388K [ 0x00000005c0000000 , 0x00000005c0404000 , 0x00000007c0000000 ) region size 4096K , 11 young ( 45056K ) , 11 survivors ( 45056K ) Metaspace used 187853K , capacity 205120K , committed 210176K , reserved 1232896K class space used 22574K , capacity 25471K , committed 26368K , reserved 1048576K } [ Times : user=0.39 sys=0.00 , real=0.04 secs ] { Heap before GC invocations=19405 ( full 0 ) : garbage-first heap total 8388608K , used 6106497K [ 0x00000005c0000000 , 0x00000005c0404000 , 0x00000007c0000000 ) region size 4096K , 1228 young ( 5029888K ) , 11 survivors ( 45056K ) Metaspace used 187853K , capacity 205120K , committed 210176K , reserved 1232896K class space used 22574K , capacity 25471K , committed 26368K , reserved 1048576K2019-05-05T02:39:33.830+0900 : 201033.558 : [ GC pause ( G1 Evacuation Pause ) ( young ) , 0.0373282 secs ] 2019-05-05T02:39:33.830+0900 : 201033.558 : [ GC pause ( G1 Evacuation Pause ) ( young ) , 0.0373282 secs ] [ Parallel Time : 13.9 ms , GC Workers : 28 ] [ GC Worker Start ( ms ) : Min : 201033558.4 , Avg : 201033558.5 , Max : 201033558.6 , Diff : 0.2 ] [ Ext Root Scanning ( ms ) : Min : 0.8 , Avg : 1.2 , Max : 4.5 , Diff : 3.7 , Sum : 32.5 ] [ Update RS ( ms ) : Min : 0.0 , Avg : 2.8 , Max : 3.1 , Diff : 3.1 , Sum : 77.4 ] [ Processed Buffers : Min : 0 , Avg : 10.3 , Max : 31 , Diff : 31 , Sum : 289 ] [ Scan RS ( ms ) : Min : 0.1 , Avg : 0.3 , Max : 0.3 , Diff : 0.3 , Sum : 7.1 ] [ Code Root Scanning ( ms ) : Min : 0.0 , Avg : 0.0 , Max : 0.0 , Diff : 0.0 , Sum : 0.1 ] [ Object Copy ( ms ) : Min : 8.5 , Avg : 8.8 , Max : 8.9 , Diff : 0.4 , Sum : 246.0 ] [ Termination ( ms ) : Min : 0.3 , Avg : 0.4 , Max : 0.5 , Diff : 0.2 , Sum : 12.0 ] [ Termination Attempts : Min : 135 , Avg : 156.5 , Max : 175 , Diff : 40 , Sum : 4382 ] [ GC Worker Other ( ms ) : Min : 0.0 , Avg : 0.1 , Max : 0.2 , Diff : 0.2 , Sum : 3.3 ] [ GC Worker Total ( ms ) : Min : 13.3 , Avg : 13.5 , Max : 13.7 , Diff : 0.3 , Sum : 378.4 ] [ GC Worker End ( ms ) : Min : 201033571.9 , Avg : 201033572.0 , Max : 201033572.1 , Diff : 0.2 ] [ Code Root Fixup : 0.0 ms ] [ Code Root Purge : 0.0 ms ] [ Clear CT : 0.8 ms ] [ Other : 22.6 ms ] [ Choose CSet : 0.0 ms ] [ Ref Proc : 18.5 ms ] [ Ref Enq : 0.3 ms ] [ Redirty Cards : 1.0 ms ] [ Humongous Register : 0.1 ms ] [ Humongous Reclaim : 0.0 ms ] [ Free CSet : 2.1 ms ] [ Eden : 4868.0M ( 4868.0M ) - > 0.0B ( 4880.0M ) Survivors : 44.0M- > 32.0M Heap : 5963.4M ( 8192.0M ) - > 1082.0M ( 8192.0M ) ] Heap after GC invocations=19406 ( full 0 ) : garbage-first heap total 8388608K , used 1107927K [ 0x00000005c0000000 , 0x00000005c0404000 , 0x00000007c0000000 ) region size 4096K , 8 young ( 32768K ) , 8 survivors ( 32768K ) Metaspace used 187853K , capacity 205120K , committed 210176K , reserved 1232896K class space used 22574K , capacity 25471K , committed 26368K , reserved 1048576K } [ Times : user=0.41 sys=0.00 , real=0.04 secs ] { Heap before GC invocations=19406 ( full 0 ) : garbage-first heap total 8388608K , used 6122963K [ 0x00000005c0000000 , 0x00000005c0404000 , 0x00000007c0000000 ) region size 4096K , 1228 young ( 5029888K ) , 8 survivors ( 32768K ) Metaspace used 187853K , capacity 205120K , committed 210176K , reserved 1232896K class space used 22574K , capacity 25471K , committed 26368K , reserved 1048576K"
public class A { public static void main ( String [ ] args ) { // code here } } public class B extends A { public static void main ( String [ ] args ) throws IOException { // code here } }
"public static void main ( String [ ] args ) { Map < String , Map < Long , List < String > > > map = getHashMap ( ) ; } static < K , V > Map < K , V > getHashMap ( ) { return new HashMap < K , V > ( ) ; }"
String s = `` aaaabbbbddd '' ; String modified = `` '' ; int len = s.length ( ) ; char [ ] c = s.toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < len ; i++ ) { count = 1 ; for ( int j = i + 1 ; j < len ; j++ ) { if ( c [ i ] == ' ' ) { break ; } if ( c [ i ] == c [ j ] ) { count++ ; c [ j ] = ' ' ; } } if ( c [ i ] ! = ' ' ) { modified += c [ i ] + `` '' + count ; } } System.out.println ( modified ) ;
"< sometag > < something > ... .. < /something > < item > item1 < /item > ... . < /sometag > String cleanxml = rawxml.replace ( `` ^ [ \\s\\S ] + < item > '' , `` '' ) ;"
"public class App { public static void main ( String [ ] args ) { FooQueue q = new FooQueue ( ) ; q.add ( FooQueue : :dos , new FooItem ( ) ) ; // this compiles q.add ( q : :do1 , new FooItem ( ) ) ; // this does not : // does not consider q : :do1 'delegate ' // as taking 2 parameters , // with q being the first one FooQueue q2 = new FooQueue2 ( ) ; q.add ( FooQueue2 : :dos , new FooItem ( ) ) ; // want this to give compiler error q.add ( FooQueue2 : :do1 , new FooItem ( ) ) ; // want this to give compiler error } } public class FooQueue { public static void dos ( FooQueue q , FooItem item ) { System.out.println ( `` FooQueue : sdo '' ) ; } public void do1 ( FooItem item ) { System.out.println ( `` FooQueue : do1 '' ) ; } public void add ( java.util.function.BiConsumer < FooQueue , FooItem > func , FooItem wi ) { System.out.println ( `` FooQueue : addWorkItem2 '' ) ; func.accept ( this , wi ) ; } } public class FooItem { } public class FooQueue2 { public static void dos ( FooQueue2 q2 , FooItem item ) { System.out.println ( `` FooQueue2 : sdo '' ) ; } public void do1 ( FooItem item ) { System.out.println ( `` FooQueue2 : do1 '' ) ; } }"
@ RequestMapping ( `` /index.dlp '' ) public ModelAndView index ( ) { logger.info ( `` Return View '' ) ; return new ModelAndView ( `` index '' ) ; } @ RequestMapping ( `` /index.dlp '' ) public ModelAndView index ( ) { logger.info ( `` Return View '' ) ; return new ModelAndView ( `` index.jsp '' ) ; }
"Datastore ds = ... final Query < Unit > query = ds.createQuery ( Unit.class ) ; query.field ( `` text '' ) .equal ( text ) ; query.field ( `` langCode '' ) .equal ( lang.getCode ( ) ) ; UpdateOperations ops = ds.createUpdateOperations ( Unit.class ) ; ops.inc ( `` frequency '' , value ) ; ds.update ( query , ops , false ) ;"
List < Job > getJobsByStatus ( JobStatus status ) ; List < Job > getJobsAllButStatus ( JobStatus status ) ; List < Job > getJobsNotStatus ( JobStatus status ) ;
"import java.net.HttpURLConnection ; import java.net.InetSocketAddress ; import java.net.Proxy ; import java.net.ProxySelector ; import java.net.URI ; import java.net.URL ; public class TestProxy { public static void main ( String s [ ] ) throws Exception { try { System.setProperty ( `` http.proxyHost '' , `` abcd '' ) ; System.setProperty ( `` http.proxyPort '' , `` 8080 '' ) ; URL u = new URL ( `` http : //www.google.com '' ) ; HttpURLConnection con = ( HttpURLConnection ) u.openConnection ( ) ; System.out.println ( con.getResponseCode ( ) + `` : `` + con.getResponseMessage ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; System.out.println ( false ) ; } Proxy proxy = ( Proxy ) ProxySelector.getDefault ( ) .select ( new URI ( `` http : //www.google.com '' ) ) .iterator ( ) .next ( ) ; System.out.println ( `` proxy Type : `` + proxy.type ( ) ) ; InetSocketAddress addr = ( InetSocketAddress ) proxy.address ( ) ; if ( addr == null ) { System.out.println ( `` No Proxy '' ) ; } else { System.out.println ( `` proxy hostname : `` + addr.getHostName ( ) ) ; System.out.println ( `` proxy port : `` + addr.getPort ( ) ) ; } } } 200 : OKproxy Type : HTTPproxy hostname : abcdproxy port : 8080"
public interface Foo { void bar ( ) ; } public class FooImpl implements Foo { @ Override public Object bar ( ) { return new Object ( ) ; } }
// Some LinkedList list that exists with n elements ; int half = list.size ( ) / 2 ; list.get ( half + 1 ) ;
import play . * ; import play.mvc . * ;
"void makeWindow ( ) { Display .getContext ( ) .windowBuilder ( ) .setSize ( 800 , 600 ) .setBalloonAnimal ( BalloonAnimal.ELDER_GOD.withColor ( PUCE ) ) .build ( ) ; } void makeWindow ( ) { DisplayContext dc = Display.getContext ( ) ; WindowBuilder wb = db.windowBuilder ( ) ; BalloonAnimal god = BalloonAnimal.ELDER_GOD ; BalloonAnimal puceGod = god.withColor ( PUCE ) ; wb.setSize ( 800 , 600 ) .setBalloonAnimal ( puceGod ) .build ( ) ; } int beAnExample ( int quiche ) { return areGlobalsEvil ? quiche * TAU/5 : highway ( quiche , Globals.frenchFrenchRevolution ) ; } int beAnExample ( int quiche ) { if ( areGlobalsEvil ) { int to5 = TAU/5 ; int result = quiche * to5 ; return result ; } else { Game french = Globals.frenchFrenchRevolution ; int result = highway ( quiche , french ) ; return result ; } }"
SELECT Active FROM Process UPDATE Process SET Active = ' Y ' UPDATE Process SET Active = ' N '
"D : \ > java -versionjava version `` 1.7.0_21 '' Java ( TM ) SE Runtime Environment ( build 1.7.0_21-b11 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 23.21-b01 , mixed mode ) D : \ > java DESTest -e 12345678 abcde977encrypted as [ 17fd146fa6fdbb5db667efe657dfcb60 ] D : \ > java DESTest -d 17fd146fa6fdbb5db667efe657dfcb60 abcde977decryted as [ 12345678 ] D : \ > java DESTest -d 17fd146fa6fdbb5db667efe657dfcb60 abcde976decryted as [ 12345678 ] D : \ > java DESTest -d 17fd146fa6fdbb5db667efe657dfcb60 abcde967decryted as [ 12345678 ] D : \ > java DESTest -d 17fd146fa6fdbb5db667efe657dfcb60 abcde867decryted as [ 12345678 ] D : \ > java DESTest -d 17fd146fa6fdbb5db667efe657dfcb60 abcdf867Exception in thread `` main '' java.lang.RuntimeException : javax.crypto.BadPaddingException : Given final block not properly padded at DESTest.des ( DESTest.java:46 ) at DESTest.dec ( DESTest.java:31 ) at DESTest.main ( DESTest.java:19 ) Caused by : javax.crypto.BadPaddingException : Given final block not properly padded at com.sun.crypto.provider.CipherCore.doFinal ( CipherCore.java:811 ) at com.sun.crypto.provider.CipherCore.doFinal ( CipherCore.java:676 ) at com.sun.crypto.provider.DESCipher.engineDoFinal ( DESCipher.java:314 ) at javax.crypto.Cipher.doFinal ( Cipher.java:2087 ) at DESTest.des ( DESTest.java:44 ) ... 2 moreD : \ > java DESTest -e 12345678 abcde976encrypted as [ 17fd146fa6fdbb5db667efe657dfcb60 ] D : \ > java DESTest -e 12345678 abcde967encrypted as [ 17fd146fa6fdbb5db667efe657dfcb60 ] D : \ > import java.io.UnsupportedEncodingException ; import java.security.SecureRandom ; import javax.crypto.Cipher ; import javax.crypto.SecretKey ; import javax.crypto.SecretKeyFactory ; import javax.crypto.spec.DESKeySpec ; public class DESTest { public static void main ( String [ ] args ) { if ( args.length < 3 ) { System.out.println ( `` usage : java `` + DESTest.class.getCanonicalName ( ) + `` -e|-d text key '' ) ; return ; } String mode = args [ 0 ] .trim ( ) ; String text = args [ 1 ] .trim ( ) ; String key = args [ 2 ] .trim ( ) ; try { String s = `` -d '' .equalsIgnoreCase ( mode ) ? dec ( text , key ) : enc ( text , key ) ; System.out.println ( `` \n '' + ( `` -d '' .equalsIgnoreCase ( mode ) ? `` decryted as [ `` : `` encrypted as [ `` ) + s + `` ] '' ) ; } catch ( UnsupportedEncodingException e ) { e.printStackTrace ( ) ; } } private static String enc ( String plainText , String key ) throws UnsupportedEncodingException { return new String ( encHex ( des ( plainText.getBytes ( `` UTF-8 '' ) , key , Cipher.ENCRYPT_MODE ) ) ) ; } private static String dec ( String encrypted , String key ) throws UnsupportedEncodingException { return new String ( des ( decHex ( encrypted ) , key , Cipher.DECRYPT_MODE ) , `` UTF-8 '' ) ; } private static byte [ ] des ( byte [ ] bytes , String key , int cipherMode ) { final String encoding = `` UTF-8 '' ; try { DESKeySpec desKey = new DESKeySpec ( key.getBytes ( encoding ) ) ; SecretKeyFactory keyFactory = SecretKeyFactory.getInstance ( `` DES '' ) ; SecretKey securekey = keyFactory.generateSecret ( desKey ) ; // SecretKey securekey = new SecretKeySpec ( key.getBytes ( encoding ) , `` DES '' ) ; //same result as the 3 lines above Cipher cipher = Cipher.getInstance ( `` DES '' ) ; SecureRandom random = new SecureRandom ( ) ; cipher.init ( cipherMode , securekey , random ) ; return cipher.doFinal ( bytes ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } private static final char [ ] HEX_CHARS = `` 0123456789abcdef '' .toCharArray ( ) ; private static String encHex ( byte [ ] bytes ) { final char [ ] chars = new char [ bytes.length * 2 ] ; for ( int i = 0 , j = 0 ; i < bytes.length ; i++ ) { chars [ j++ ] = HEX_CHARS [ ( 0xF0 & bytes [ i ] ) > > > 4 ] ; chars [ j++ ] = HEX_CHARS [ 0x0F & bytes [ i ] ] ; } return new String ( chars ) ; } private static byte [ ] decHex ( String hex ) { final int len = hex.length ( ) ; final byte [ ] bytes = new byte [ len / 2 ] ; for ( int i = 0 , j = 0 ; j < len ; i++ ) { int f = Character.digit ( hex.charAt ( j ) , 16 ) < < 4 ; j++ ; f = f | Character.digit ( hex.charAt ( j ) , 16 ) ; j++ ; bytes [ i ] = ( byte ) ( f & 0xFF ) ; } return bytes ; } }"
"public void doSomething ( Plant p ) { // do the stuff that is common , and then ... if ( p.hasFruit ( ) ) { doThingWithFruit ( p.getFruit ( ) ) ; } else { doThingWithVegetable ( p.getVegetable ( ) ) ; } } public void createSomethingUsingFruit ( Something s , Fruit f ) ; public void createSomethingUsingVegetable ( Something s , Vegetable v ) ;"
public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System.in ) ; int a = s.nextInt ( ) ; int b = s.nextInt ( ) ; while ( a ! = 0 | b ! = 0 ) { if ( a > = b ) { a = a % b ; } else { b = b % a ; } } if ( a == 0 ) { System.out.println ( b ) ; } else { System.out.println ( a ) ; } } }
( 5 % 3 ) ( -5 % 3 ) ( 5 % -3 ) ( -5 % -3 )
"Map aMap ; aMap = new HashMap < String , TreeSet < String > > ( ) ; Map < String , Set < String > > aMap ; aMap = new HashMap < String , TreeSet < String > > ( ) ; Compilation failed ( 26/05/2014 11:45:43 ) Error : line 2 - incompatible types - found java.util.HashMap < java.lang.String , java.util.TreeSet < java.lang.String > > but expected java.util.Map < java.lang.String , java.util.Set < java.lang.String > >"
"tailrec fun tail_fibonacci ( n : BigInteger , fib1 : BigInteger = BigInteger.ZERO , fib2 : BigInteger = BigInteger.ONE ) : BigInteger { return when ( n ) { BigInteger.ZERO - > fib1 else - > tail_fibonacci ( n.minus ( BigInteger.ONE ) , fib1.plus ( fib2 ) , fib1 ) } } fun iterative_fibonacci ( n : BigInteger ) : BigInteger { var count : BigInteger = BigInteger.ONE var a : BigInteger = BigInteger.ZERO var b : BigInteger = BigInteger.ONE var c : BigInteger while ( count < n ) { count += BigInteger.ONE c = a + b a = b b = c } return b }"
private LinkedList < User > list ; for ( User user : myList ) { //do something with user }
for ( String project : auth.getProjects ( ) ) { // Do something with 'project ' } String [ ] projects = auth.getProjects ( ) ; for ( String project : projects ) { // Do something with 'project ' }
"if ( ! map.containsKey ( key ) ) { map.put ( key , new DefaultValue ( ) ) ; } return map.get ( key ) ; Value result = map.get ( key ) ; if ( result == null ) { result = new DefaultValue ( ) ; map.put ( key , result ) ; } return result ; public boolean containsKey ( Object key ) { return getEntry ( key ) ! = null ; } public boolean containsKey ( @ Nullable Object key ) { return get ( key ) ! = null ; } private transient Entry < K , V > lastContainsKeyResult = null ; public boolean containsKey ( Object key ) { lastContainsKeyResult = getEntry ( key ) ; return lastContainsKeyResult ! = null ; } public V get ( Object key ) { if ( key ! = null & & lastContainsKeyResult ! = null & & key.equals ( lastContainsKeyResult.getKey ( ) ) { return lastContainsKeyResult.getValue ( ) ; } // normal hash lookup }"
int i=0 ; i=i++ ; i=i++ ; i=i++ ; System.out.println ( i ) ;
"class Configuration { // various stuff @ Override public String toString ( ) { // assemble outString return outString ; } } class Log { public static void d ( String format , Object ... d ) { // print the format using d } } Configuration config = getConfiguration ( ) ; Log.d ( config ) ; Log.d ( `` '' + config ) ; // solution 1Log.d ( config.toString ( ) ) ; // solution 2"
"GroovyCodeSource src = new GroovyCodeSource ( `` blah blah blah '' , `` Foo.groovy '' , GroovyShell.DEFAULT_CODE_BASE ) new GroovyClassLoader ( ) .parseClass ( src , true )"
Record r = mQueue.take ( ) ; process ( r ) ; private Object mLock = new Object ( ) ; private boolean mLocked = false ; public void lock ( ) { mLocked = true ; } public void unlock ( ) { mLocked = false ; mLock.notify ( ) ; } public void run ( ) { ... . Record r = mQueue.take ( ) ; if ( mLocked ) { mLock.wait ( ) ; } process ( r ) ; }
StringBuffer sb = new StringBuffer ( `` hi '' ) ; sb = null ;
"public class Main { private static ExecutorService exec = Executors.newFixedThreadPool ( 5 ) ; private final static int MATRIX_SIZE = 500 ; private static UncorrelatedRandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator ( MATRIX_SIZE , new StableRandomGenerator ( new JDKRandomGenerator ( ) , 0.1d , 1.0d ) ) ; private static ReentrantLock lock = new ReentrantLock ( ) ; public static void main ( String [ ] args ) throws Exception { for ( int i=0 ; i < 100 ; i++ ) { exec.execute ( new Runnable ( ) { @ Override public void run ( ) { double [ ] [ ] matrixArrayA = new double [ MATRIX_SIZE ] [ MATRIX_SIZE ] ; double [ ] [ ] matrixArrayB = new double [ MATRIX_SIZE ] [ MATRIX_SIZE ] ; for ( int j = 0 ; j < MATRIX_SIZE ; j++ ) { matrixArrayA [ j ] = generator.nextVector ( ) ; matrixArrayB [ j ] = generator.nextVector ( ) ; } RealMatrix matrixA = MatrixUtils.createRealMatrix ( matrixArrayA ) ; RealMatrix matrixB = MatrixUtils.createRealMatrix ( matrixArrayB ) ; lock.lock ( ) ; matrixA.multiply ( matrixB ) ; lock.unlock ( ) ; } } ) ; } } }"
"import android.content.Context ; import android.graphics.Typeface ; import android.util.Log ; import java.lang.reflect.Field ; public class TypefaceUtil { public static void overrideFont ( Context context , String defaultFontNameToOverride , String customFontFileNameInAssets ) { try { final Typeface customFontTypeface = Typeface.createFromAsset ( context.getAssets ( ) , customFontFileNameInAssets ) ; final Field defaultFontTypefaceField = Typeface.class.getDeclaredField ( defaultFontNameToOverride ) ; defaultFontTypefaceField.setAccessible ( true ) ; defaultFontTypefaceField.set ( null , customFontTypeface ) ; } catch ( Exception e ) { Log.e ( `` CustomFontException '' , `` Can not set custom font `` + customFontFileNameInAssets + `` instead of `` + defaultFontNameToOverride ) ; } } } public void onCreate ( ) { super.onCreate ( ) ; TypefaceUtil.overrideFont ( getApplicationContext ( ) , `` MONOSPACE '' , `` fonts/varelaround_regular.ttf '' ) ; } < style name= '' AppTheme '' parent= '' Theme.AppCompat.Light.DarkActionBar '' > < item name= '' android : typeface '' > monospace < /item > < /style >"
"Cell getAdjacentCell ( Cell cell , int faceIndex ) { Face face = cell.getFace ( faceIndex ) ; Face partnerFace = face.getPartner ( ) ; if ( partnerFace == null ) return null ; // no adjacent cell present Cell adjacentCell = partnerFace.getCell ( ) ; return adjacentCell ; } Set < Face.Signature > faceSignatureCcw = new HashSet < Face.Signature > ( ) ; Set < Face.Signature > faceSignatureCw = new HashSet < Face.Signature > ( ) ; class Face { public Face getPartner ( ) { if ( this.getSignature ( ) .isCcw ( ) ) { boolean partnerExists = this.getMesh ( ) .faceSignatureCw.contains ( this ) ; } else { boolean partnerExists = this.getMesh ( ) .faceSignatureCcw.contains ( this ) ; } } } class PartnerCollection { List < Face.Signature > faceSignatureCcw = new ArrayList < Face.Signature > ( ) ; List < Face.Signature > faceSignatureCw = new ArrayList < Face.Signature > ( ) ; void add ( Face.Signature faceSignature ) { ( faceSignature.isCcw ( ) ? faceSignatureCw : faceSignatureCcw ) .add ( faceSignature ) ; } Face.Signature getPartner ( Face.Signature faceSignature ) { List < Face.Signature > partnerList = faceSignature.isCcw ( ) ? faceSignatureCw : faceSignatureCcw ; for ( Face.Signature partnerSignature : partnerList ) { if ( faceSignature.equals ( partnerSignature ) ) return partnerSignature ; } return null ; } }"
class A { public int one ; A ( A a ) { a.one=1 ; } } class B { public static void main ( String ... args ) { //now how to create an object of class A over here . } }
"String workingDir = `` C : \\TEST\\ '' ; String cmd = workingDir + `` game.exe '' ; Runtime.getRuntime ( ) .exec ( cmd , null , new File ( workingDir ) ) ; CreateProcess error=740 , The requested operation requires elevation ProcessBuilder builder = new ProcessBuilder ( new String [ ] { `` cmd.exe '' , `` /C '' , '' C : \\TEST\\game.exe '' } ) ; Process newProcess = builder.start ( ) ;"
"package com.example.demo.controller ; @ RestControllerpublic class HomeController { @ GetMapping ( path = `` /check '' ) public CompletableFuture < String > check ( @ RequestParam ( `` id '' ) int id ) { return CompletableFuture.supplyAsync ( ( ) - > { try { return checkId ( id ) ; } catch ( Exception e ) { throw new CompletionException ( e ) ; } } ) ; } public String checkId ( int id ) throws Exception { if ( id < 0 ) { throw new MyException ( `` Id must be greater than 0 '' ) ; } return `` id is good '' ; } } package com.example.demo ; public class MyException extends Exception { public MyException ( String message ) { super ( message ) ; } } package com.example.demo ; @ ControllerAdvicepublic class ExceptionResolver { @ ExceptionHandler ( value = CompletionException.class ) public String handleCompletionException ( CompletionException ex ) { return ex.getMessage ( ) ; } } package com.example.demo ; @ SpringBootApplicationpublic class DemoApplication { public static void main ( String [ ] args ) { SpringApplication.run ( DemoApplication.class , args ) ; } } com.example.demo.MyException : Id must be greater than 0 at com.example.demo.controller.HomeController.checkId ( HomeController.java:30 ) ~ [ classes/ : na ] at com.example.demo.controller.HomeController.lambda $ 0 ( HomeController.java:19 ) ~ [ classes/ : na ] at java.base/java.util.concurrent.CompletableFuture $ AsyncSupply.run ( CompletableFuture.java:1700 ) ~ [ na : na ] at java.base/java.util.concurrent.CompletableFuture $ AsyncSupply.exec ( CompletableFuture.java:1692 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinTask.doExec ( ForkJoinTask.java:290 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool $ WorkQueue.topLevelExec ( ForkJoinPool.java:1020 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool.scan ( ForkJoinPool.java:1656 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool.runWorker ( ForkJoinPool.java:1594 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinWorkerThread.run ( ForkJoinWorkerThread.java:177 ) ~ [ na : na ] 2020-01-24 14:38:30.489 ERROR 938 -- - [ nio-8080-exec-1 ] o.a.c.c.C. [ . [ . [ / ] . [ dispatcherServlet ] : Servlet.service ( ) for servlet [ dispatcherServlet ] in context with path [ ] threw exception [ Request processing failed ; nested exception is com.example.demo.MyException : Id must be greater than 0 ] with root causecom.example.demo.MyException : Id must be greater than 0 at com.example.demo.controller.HomeController.checkId ( HomeController.java:30 ) ~ [ classes/ : na ] at com.example.demo.controller.HomeController.lambda $ 0 ( HomeController.java:19 ) ~ [ classes/ : na ] at java.base/java.util.concurrent.CompletableFuture $ AsyncSupply.run ( CompletableFuture.java:1700 ) ~ [ na : na ] at java.base/java.util.concurrent.CompletableFuture $ AsyncSupply.exec ( CompletableFuture.java:1692 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinTask.doExec ( ForkJoinTask.java:290 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool $ WorkQueue.topLevelExec ( ForkJoinPool.java:1020 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool.scan ( ForkJoinPool.java:1656 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinPool.runWorker ( ForkJoinPool.java:1594 ) ~ [ na : na ] at java.base/java.util.concurrent.ForkJoinWorkerThread.run ( ForkJoinWorkerThread.java:177 ) ~ [ na : na ]"
"A [ numTerms ] [ numMatchedDocuments ] [ numOccurInADocument ] A [ stackoverflow ] [ document1 ] [ occurance1 ] =3 ; boolean docPhrase=true ; int numOfTerms=2 ; // 0 for `` stackoverflow '' and 1 for `` forums '' for ( int d=0 ; d < D.size ( ) ; d++ ) { //D is a set containing the matched documents int minId=getTheLeastOccuringTerm ( ) ; for ( int i=0 ; i < A [ minId ] [ d ] .length ; i++ ) { // For every position for LeastOccuringTerm for ( int t=0 ; t < numOfTerms ; t++ ) { // For every terms int id=BinarySearch ( A [ t ] [ d ] , A [ minId ] [ d ] [ i ] - minId + t ) ; if ( id < 0 ) docPhrase=false ; } } }"
public interface IWriter { public abstract void write ( Dto dto ) ; } public abstract class Dto { private long id ; public void setId ( long id ) { this.id = id ; } public long getId ( ) { return id ; } } public class DtoA extends Dto { ... } public class DtoB extends Dto { ... } public class MyWriterA implements IWriter { @ Override public void writer ( Dto dto ) { if ( ! ( dto instanceof DtoA ) ) return ; ... } } public class MyWriterB implements IWriter { @ Override public void writer ( Dto dto ) { if ( ! ( dto instanceof DtoB ) ) return ; ... } }
< taskdef onerror = '' ignore '' name = '' monitor-client '' classpath= '' $ { jar-client } '' classname= '' hpms.app.mon.client.AntTask '' / > < target name= '' run-client '' depends= '' compile-sample '' description= '' Launch monitor '' > < monitor-client layout = '' Layout.xml '' gui = '' true '' autostart = '' true '' > < log-server port = '' 3000 '' capacity= '' 2048 '' / > ... public final class AntTask extends Task { private ... public void setLayout ( String layout ) { } public void setGui ( boolean gui ) { } public void setAutostart ( boolean autostart ) { } public void addConfiguredLogServer ( LogServer logServer ) { } @ Override public void execute ( ) { ... } } Buildfile : ... \build.xmlcompile-sample : run-client : BUILD FAILED ... \build.xml:116 : monitor-client does n't support the nested `` log-server '' element .
class A { static { System.out.println ( `` A static init '' ) ; } public static void f ( ) { System.out.println ( `` f ( ) called '' ) ; } } class B extends A { static { System.out.println ( `` B static init '' ) ; } } public class App { public static void main ( String [ ] args ) { B.f ( ) ; //invokestatic # 16 // Method com/db/test/B.f : ( ) V } } A static initf ( ) called
"static Set < String > methodSet ( Class < ? > type ) { Set < String > result = new TreeSet < > ( ) ; for ( Method m : type.getMethods ( ) ) result.add ( m.getName ( ) ) ; return result ; } static Set < String > methodSet2 ( Class < ? > type ) { return Arrays.stream ( type.getMethods ( ) ) .collect ( Collectors.toCollection ( TreeSet : :new ) ) ; } error : incompatible types : inference variable T has incompatible bounds .collect ( Collectors.toCollection ( TreeSet : :new ) ) ; ^ equality constraints : String , E lower bounds : Method where T , C , E are type-variables : T extends Object declared in method < T , C > toCollection ( Supplier < C > ) C extends Collection < T > declared in method < T , C > toCollection ( Supplier < C > ) E extends Object declared in class TreeSet1 error"
public class splitText { public static void main ( String [ ] args ) { String x = `` I lost my Phone . I should n't drive home alone '' ; String [ ] result = x.split ( `` . `` ) ; for ( String i : result ) { System.out.println ( i ) ; } } }
public static void main ( String [ ] args ) { File file = new File ( `` fileWrite2.txt '' ) ; // create a File object try { FileWriter fr = new FileWriter ( file ) ; PrintWriter pw = new PrintWriter ( file ) ; // create a PrintWriter that will send its output to a Writer BufferedWriter br = new BufferedWriter ( fr ) ; br.write ( `` sdsadasdsa '' ) ; br.flush ( ) ; br.append ( `` fffff '' ) ; br.flush ( ) ; pw.println ( `` howdy '' ) ; // write the data pw.println ( `` folks '' ) ; pw.flush ( ) ; pw.close ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } howdyfolksf
"public Fish mate ( Fish other ) { if ( this.health > 0 & & other.health > 0 & & this.closeEnough ( other ) ) { int babySize = ( ( ( this.size + other.size ) /2 ) ) ; int babyHealth = ( ( ( this.health + other.health ) /2 ) ) ; double babyX = ( ( ( this.x + other.x ) /2.0 ) ) ; double babyY = ( ( ( this.y + other.y ) /2.0 ) ) ; new Fish ( babySize , babyHealth , babyX , babyY ) ; } return null ; }"
public interface UnaryFunction < T > { T apply ( T arg ) ; } // Generic singleton factory patternprivate static UnaryFunction < Object > IDENTITY_FUNCTION = new UnaryFunction < Object > ( ) { public Object apply ( Object arg ) { return arg ; } } ; // IDENTITY_FUNCTION is stateless and its type parameter is// unbounded so it 's safe to share one instance across all types . @ SuppressWarnings ( `` unchecked '' ) public static < T > UnaryFunction < T > identityFunction ( ) { return ( UnaryFunction < T > ) IDENTITY_FUNCTION ; }
"dependencies { implementation 'org.bytedeco : javacpp:1.5.4 ' } package com.example.javacplusplus ; import org.bytedeco.javacpp . * ; import org.bytedeco.javacpp.annotation . * ; @ Platform ( include= '' NativeLibrary.h '' ) @ Namespace ( `` NativeLibrary '' ) public class NativeLibrary { public static class NativeClass extends Pointer { static { Loader.load ( ) ; } public NativeClass ( ) { allocate ( ) ; } private native void allocate ( ) ; // to call the getter and setter functions public native @ StdString String get_property ( ) ; public native void set_property ( String property ) ; // to access the member variable directly public native @ StdString String property ( ) ; public native void property ( String property ) ; } } # ifndef NATIVELIBRARY_H # define NATIVELIBRARY_H # include < string > namespace NativeLibrary { class NativeClass { public : const std : :string & get_property ( ) ; void set_property ( const std : :string & property ) ; std : :string property ; } ; } # endif // NATIVELIBRARY_H # include `` NativeLibrary.h '' namespace NativeLibrary { const std : :string & NativeClass : :get_property ( ) { return property ; } void NativeClass : :set_property ( const std : :string & property ) { this- > property = property ; } } // namespace NativeLibrary cmake_minimum_required ( VERSION 3.4.1 ) add_library ( native-lib SHARED NativeLibrary.cpp native-lib.cpp ) find_library ( log-lib log ) target_link_libraries ( native-lib $ { log-lib } ) apply plugin : 'com.android.application'android { compileSdkVersion 29 buildToolsVersion `` 29.0.3 '' defaultConfig { applicationId `` com.example.javacplusplus '' minSdkVersion 28 targetSdkVersion 29 versionCode 1 versionName `` 1.0 '' testInstrumentationRunner `` androidx.test.runner.AndroidJUnitRunner '' externalNativeBuild { cmake { cppFlags `` '' } } } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile ( 'proguard-android-optimize.txt ' ) , 'proguard-rules.pro ' } } externalNativeBuild { cmake { path `` src/main/cpp/CMakeLists.txt '' version `` 3.10.2 '' } } } dependencies { implementation fileTree ( dir : 'libs ' , include : [ '*.jar ' ] ) implementation 'androidx.appcompat : appcompat:1.2.0 ' implementation 'androidx.constraintlayout : constraintlayout:2.0.4 ' implementation 'org.bytedeco : javacpp:1.5.4 ' testImplementation 'junit : junit:4.12 ' androidTestImplementation 'androidx.test : runner:1.3.0 ' androidTestImplementation 'androidx.test.espresso : espresso-core:3.3.0 ' } package com.example.javacplusplus ; import androidx.appcompat.app.AppCompatActivity ; import android.os.Bundle ; import android.widget.TextView ; public class MainActivity extends AppCompatActivity { // Used to load the 'native-lib ' library on application startup . static { System.loadLibrary ( `` native-lib '' ) ; } @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; // Pointer objects allocated in Java get deallocated once they become unreachable , // but C++ destructors can still be called in a timely fashion with Pointer.deallocate ( ) NativeLibrary.NativeClass l = new NativeLibrary.NativeClass ( ) ; l.set_property ( `` Hello World ! `` ) ; // Example of a call to a native method TextView tv = findViewById ( R.id.sample_text ) ; tv.setText ( l.property ( ) ) ; // tv.setText ( stringFromJNI ( ) ) ; } /** * A native method that is implemented by the 'native-lib ' native library , * which is packaged with this application . */ public native String stringFromJNI ( ) ; } -- -- -- -- - beginning of crash2020-11-16 00:57:38.557 13506-13506/ ? E/AndroidRuntime : FATAL EXCEPTION : main Process : com.example.javacppapp , PID : 13506 java.lang.UnsatisfiedLinkError : dalvik.system.PathClassLoader [ DexPathList [ [ zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/base.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_dependencies_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_resources_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_0_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_1_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_2_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_3_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_4_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_5_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_6_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_7_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_8_apk.apk '' , zip file `` /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_9_apk.apk '' ] , nativeLibraryDirectories= [ /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/base.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_dependencies_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_resources_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_0_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_1_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_2_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_3_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_4_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_5_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_6_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_7_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_8_apk.apk ! /lib/x86 , /data/app/com.example.javacppapp-8V-wRac6X4RLpYvvYEmtGQ==/split_lib_slice_9_apk.apk ! /lib/x86 , /system/lib ] ] ] could n't find `` libjniNativeLibrary.so '' at java.lang.Runtime.loadLibrary0 ( Runtime.java:1012 ) at java.lang.System.loadLibrary ( System.java:1669 ) at org.bytedeco.javacpp.Loader.loadLibrary ( Loader.java:1683 ) at org.bytedeco.javacpp.Loader.load ( Loader.java:1300 ) at org.bytedeco.javacpp.Loader.load ( Loader.java:1123 ) at com.example.javacppapp.NativeLibrary $ NativeClass. < clinit > ( NativeLibrary.java:10 ) at com.example.javacppapp.MainActivity.onCreate ( MainActivity.java:22 ) at android.app.Activity.performCreate ( Activity.java:7136 ) at android.app.Activity.performCreate ( Activity.java:7127 ) at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1271 ) at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:2893 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:3048 ) at android.app.servertransaction.LaunchActivityItem.execute ( LaunchActivityItem.java:78 ) at android.app.servertransaction.TransactionExecutor.executeCallbacks ( TransactionExecutor.java:108 ) at android.app.servertransaction.TransactionExecutor.execute ( TransactionExecutor.java:68 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1808 ) at android.os.Handler.dispatchMessage ( Handler.java:106 ) at android.os.Looper.loop ( Looper.java:193 ) 2020-11-16 00:57:38.557 13506-13506/ ? E/AndroidRuntime : at android.app.ActivityThread.main ( ActivityThread.java:6669 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.RuntimeInit $ MethodAndArgsCaller.run ( RuntimeInit.java:493 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:858 ) import org.bytedeco.javacpp . * ; import org.bytedeco.javacpp.annotation . * ; @ Platform ( include= '' NativeLibrary.h '' ) @ Namespace ( `` NativeLibrary '' ) public class NativeLibrary { public static class NativeClass extends Pointer { static { Loader.load ( ) ; } public NativeClass ( ) { allocate ( ) ; } private native void allocate ( ) ; // to call the getter and setter functions public native @ StdString String get_property ( ) ; public native void set_property ( String property ) ; // to access the member variable directly public native @ StdString String property ( ) ; public native void property ( String property ) ; } public static void main ( String [ ] args ) { // Pointer objects allocated in Java get deallocated once they become unreachable , // but C++ destructors can still be called in a timely fashion with Pointer.deallocate ( ) NativeClass l = new NativeClass ( ) ; l.set_property ( `` Hello World ! `` ) ; System.out.println ( l.property ( ) ) ; } } $ javac -cp javacpp.jar NativeLibrary.java $ java -jar javacpp.jar NativeLibrary $ java -cp javacpp.jar NativeLibrary $ Hello World ! // Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript { repositories { google ( ) jcenter ( ) } dependencies { classpath `` com.android.tools.build : gradle:4.1.1 '' // NOTE : Do not place your application dependencies here ; they belong // in the individual module build.gradle files } } plugins { id 'java-library ' id 'java-gradle-plugin ' id 'org.bytedeco.gradle-javacpp-build ' version `` $ javacppVersion '' id 'org.bytedeco.gradle-javacpp-platform ' version `` $ javacppVersion '' } ext { javacppPlatform = 'android-arm64 ' // or any other platform , defaults to Loader.getPlatform ( ) } dependencies { implementation gradleApi ( ) api `` org.bytedeco : javacpp : $ javacppVersion '' } allprojects { repositories { google ( ) jcenter ( ) } } // Note : Had to comment this as I was getting the error > Can not add task 'clean ' as a task with that name already exists.//task clean ( type : Delete ) { // delete rootProject.buildDir// } tasks.withType ( org.bytedeco.gradle.javacpp.BuildTask ) { // set here default values for all build tasks below , typically just includePath and linkPath , // but also properties to set the path to the NDK and its compiler in the case of Android } javacppBuildCommand { // typically set here the buildCommand to the script that fills up includePath and linkPath } javacppBuildParser { // typically set here the classOrPackageNames to class names implementing InfoMap } javacppBuildCompiler { // typically set here boolean flags like copyLibs } > Task : javacppBuildParser FAILEDExecution failed for task ' : javacppBuildParser'. > app/build/intermediates/javac/debug/classes/com/example/myjavacppapp/BuildConfig ( wrong name : com/example/myjavacppapp/BuildConfig ) android { applicationVariants.all { variant - > variant.javaCompiler.doLast { println 'javacpp ' + variant.name javaexec { main 'org.bytedeco.javacpp.tools.Builder ' classpath '/home/jacob/Work/other/sandbox/java/javacpp3/app/libs/javacpp.jar ' args '-cp ' , variant.javaCompiler.destinationDir , '-properties ' , 'android-arm ' , '-Dplatform.root=/home/jacob/.android/sdk/ndk/21.1.6352462 ' , '-Dplatform.compiler=/home/jacob/.android/sdk/ndk/21.1.6352462/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++ ' , '-Dplatform.includepath=/home/jacob/.android/sdk/ndk/21.1.6352462/sources/cxx-stl/gnu-libstdc++/include : src/main/cpp ' , '-Dplatform.linkpath=/home/jacob/.android/sdk/ndk/21.1.6352462/sources/cxx-stl/llvm-libc++/libs/arm64-v8a ' , '-d ' , 'libs/armeabi ' } println 'javacpp done ' } } sourceSets.main { jniLibs.srcDir 'libs ' jni.srcDirs = [ ] // disable automatic ndk-build call } } > Task : app : compileDebugJavaWithJavac FAILEDjavacpp debugException in thread `` main '' java.lang.NoClassDefFoundError : androidx/appcompat/app/AppCompatActivity at java.lang.ClassLoader.defineClass1 ( Native Method ) at java.lang.ClassLoader.defineClass ( ClassLoader.java:763 ) at java.security.SecureClassLoader.defineClass ( SecureClassLoader.java:142 ) at java.net.URLClassLoader.defineClass ( URLClassLoader.java:467 ) at java.net.URLClassLoader.access $ 100 ( URLClassLoader.java:73 ) at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:368 ) at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:362 ) at java.security.AccessController.doPrivileged ( Native Method ) at java.net.URLClassLoader.findClass ( URLClassLoader.java:361 ) at org.bytedeco.javacpp.tools.UserClassLoader.findClass ( UserClassLoader.java:72 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:424 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:357 ) at java.lang.Class.forName0 ( Native Method ) at java.lang.Class.forName ( Class.java:348 ) at org.bytedeco.javacpp.tools.ClassScanner.addClass ( ClassScanner.java:61 ) at org.bytedeco.javacpp.tools.ClassScanner.addMatchingFile ( ClassScanner.java:75 ) at org.bytedeco.javacpp.tools.ClassScanner.addMatchingDir ( ClassScanner.java:87 ) at org.bytedeco.javacpp.tools.ClassScanner.addMatchingDir ( ClassScanner.java:85 ) at org.bytedeco.javacpp.tools.ClassScanner.addMatchingDir ( ClassScanner.java:85 ) at org.bytedeco.javacpp.tools.ClassScanner.addMatchingDir ( ClassScanner.java:85 ) at org.bytedeco.javacpp.tools.ClassScanner.addPackage ( ClassScanner.java:99 ) at org.bytedeco.javacpp.tools.Builder.classesOrPackages ( Builder.java:672 ) at org.bytedeco.javacpp.tools.Builder.main ( Builder.java:962 ) Caused by : java.lang.ClassNotFoundException : androidx.appcompat.app.AppCompatActivity at java.net.URLClassLoader.findClass ( URLClassLoader.java:381 ) at org.bytedeco.javacpp.tools.UserClassLoader.findClass ( UserClassLoader.java:72 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:424 ) at java.lang.ClassLoader.loadClass ( ClassLoader.java:357 ) ... 23 moreFAILURE : Build failed with an exception . * Where : Build file '/home/jacob/Work/other/sandbox/java/javacpp3/app/build.gradle ' line : 48* What went wrong : Execution failed for task ' : app : compileDebugJavaWithJavac'. > Process 'command '/home/jacob/.android/studio/jre/bin/java '' finished with non-zero exit value 1"
"public static int [ ] countPairs ( int min , int max ) { int lastIndex = primes.size ( ) - 1 ; int i = 0 ; int howManyPairs [ ] = new int [ ( max-min ) +1 ] ; for ( int outer : primes ) { for ( int inner : primes.subList ( i , lastIndex ) ) { int sum = outer + inner ; if ( sum > max ) break ; if ( sum > = min & & sum < = max ) howManyPairs [ sum - min ] ++ ; } i++ ; } return howManyPairs ; }"
dir /s /b src\*.java > sources.txt & javac -- module-path % PATH_TO_FX % -d mods/hellofx @ sources.txt & del sources.txt jlink -- module-path `` % PATH_TO_FX_MODS % ; mods '' -- add-modules hellofx -- output hellofx jpackage -- runtime-image hellofx -- module hellofx/hellofx.HelloFX -- win-shortcut -- win-menu -- icon smile.ico
public class Foo { public int bar = 0 ; public Foo ( ) { this.bar = 5 ; } ... } Thread t = new Thread ( ( ) - > { if ( myFoo.bar == 5 ) { ... . } } ) ; t.start ( ) ; Foo myFoo = null ; Thread t2 = new Thread ( ( ) - > { for ( ; ; ) { if ( myFoo ! = null & & myFoo.bar == 5 ) { ... } ... } } ) ; t2.start ( ) ; myFoo = new Foo ( ) ; //The creation of Foo happens after t2 is already running
"val corpus : RDD [ String ] = sc.wholeTextFiles ( `` docs/*.md '' ) .map ( _._2 ) RDD < String > corpus = sc.wholeTextFiles ( `` docs/*.md '' ) .map ( a - > a._2 ) ; package org.apache.spark.api.java.function ; import java.io.Serializable ; public interface Function < T1 , R > extends Serializable { R call ( T1 var1 ) throws Exception ; }"
static < T extends Object & Comparable < ? super T > > T max ( Collection < ? extends T > coll ) ; Collection < ? extends T > coll Collection < T > coll static < T extends Object & Comparable < ? super T > > T max ( Collection < T > coll ) ;
"Supplier < Foo > sFoo = Foo : :new ; Supplier < Foo > sFoo = ( ) - > new Foo ( ) ; Class < ? > fooClasss = net.jodah.typetools.TypeResolver.resolveRawArguments ( Supplier.class , sFoo.getClass ( ) ) [ 0 ] ; // fooClass == Foo.class"
"public static void main ( String [ ] args ) { WEB_LOGMGR loggr = new WEB_LOGMGR ( true ) ; WEB_DBMGR dbmgr = new WEB_DBMGR ( true , loggr ) ; Model backend = new ScadaModel ( dbmgr , loggr ) ; System.out.println ( dataToJson ( backend.getUsers ( ) ) ) ; staticFiles.location ( `` / '' ) ; staticFiles.externalLocation ( `` / '' ) ; String layout = `` /templates/layout.vtl '' ; //secure ( `` public/keystore.jks '' , `` password '' , null , null ) ; before ( `` /form '' , ( request , response ) - > { boolean authenticated = false ; // ... check if authenticated if ( ! authenticated ) { halt ( 401 , `` You are not welcome here '' ) ; } } ) ; get ( `` / '' , ( req , res ) - > { HashMap pdata = new HashMap ( ) ; pdata.put ( `` template '' , `` /templates/main.vtl '' ) ; return new ModelAndView ( pdata , layout ) ; } , new VelocityTemplateEngine ( ) ) ; get ( `` /users '' , ( req , res ) - > { HashMap pdata = new HashMap ( ) ; pdata.put ( `` template '' , `` /templates/users.vtl '' ) ; pdata.put ( `` users '' , backend.getUsers ( ) ) ; return new ModelAndView ( pdata , layout ) ; } , new VelocityTemplateEngine ( ) ) ; < div class= '' w3-row-padding w3-margin-bottom '' > < div class= '' w3-container '' > < h5 > SCADA Users < /h5 > < ul class= '' w3-ul w3-card-4 w3-white '' > # foreach ( $ user in $ users ) < li class= '' w3-padding-16 '' > < img src= '' /images/cole.jpg '' class= '' w3-left w3-circle w3-margin-right '' style= '' width:35px '' > < span class= '' w3-xlarge '' > $ user.firstName < /span > < br > < ! -- The above line should return a name for my 3 users , but it does n't . Removing the .firstname allows the code to run but it just returns User @ and then a memory location -- > < /li > # end < /ul > < /div > < /div > < ! -- Overlay effect when opening sidebar on small screens -- > < div class= '' w3-overlay w3-hide-large w3-animate-opacity '' onclick= '' w3_close ( ) '' style= '' cursor : pointer '' title= '' close side menu '' id= '' myOverlay '' > < /div > < ! -- ! PAGE CONTENT ! -- > # parse ( $ template )"
class X { public static void foo ( Y y ) { … } } import X.foo…y.foo ( )
< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < ? import javafx.scene.control.Button ? > < ? import javafx.scene.control.TitledPane ? > < ? import javafx.scene.layout.HBox ? > < ? import javafx.scene.layout.VBox ? > < VBox maxHeight= '' -Infinity '' maxWidth= '' -Infinity '' minHeight= '' -Infinity '' minWidth= '' -Infinity '' xmlns= '' http : //javafx.com/javafx/11.0.1 '' xmlns : fx= '' http : //javafx.com/fxml/1 '' > < children > < TitledPane animated= '' false '' collapsible= '' false '' text= '' untitled '' > < content > < HBox > < children > < fx : include source= '' subscene.fxml '' / > < /children > < /HBox > < /content > < /TitledPane > < TitledPane animated= '' false '' collapsible= '' false '' text= '' untitled '' > < content > < HBox > < children > < fx : include source= '' subscene.fxml '' / > < /children > < /HBox > < /content > < /TitledPane > < TitledPane animated= '' false '' collapsible= '' false '' text= '' untitled '' > < content > < HBox alignment= '' BASELINE_RIGHT '' > < children > < Button mnemonicParsing= '' false '' text= '' Button '' / > < Button mnemonicParsing= '' false '' text= '' Button '' / > < /children > < /HBox > < /content > < /TitledPane > < /children > < /VBox > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < ? import javafx.scene.control.DatePicker ? > < ? import javafx.scene.control.Label ? > < ? import javafx.scene.layout.VBox ? > < VBox maxHeight= '' -Infinity '' maxWidth= '' -Infinity '' minHeight= '' -Infinity '' minWidth= '' -Infinity '' xmlns= '' http : //javafx.com/javafx/11.0.1 '' xmlns : fx= '' http : //javafx.com/fxml/1 '' > < children > < Label text= '' Label '' / > < DatePicker / > < /children > < /VBox >
"{ `` students '' : [ { `` id '' :1 , '' name '' : '' John '' , '' age '' :12 } , { `` id '' :2 , '' name '' : '' Thmas '' , '' age '' :13 } { `` id '' :3 , '' name '' : '' Merit '' , '' age '' :10 } ... ] } public class StudentList { private List < Student > students ; public List < Student > getStudents ( ) { return students ; } } public class Student { private long id ; private String name ; private int age ; public long getId ( ) { return id ; } public String getName ( ) { return name ; } public int getAge ( ) { return age ; } } //'jsonData ' is the server responsed json data StudentList students = gson.fromJson ( jsonData , StudentList.class ) public class Student implements Comparable < Student > { private long id ; private String name ; private int age ; public long getId ( ) { return id ; } public String getName ( ) { return name ; } public int getAge ( ) { return age ; } // Override compareTo ( ) , sort by 'name ' @ Override public int compareTo ( Student obj ) { return this.getName ( ) .compareToIgnoreCase ( obj.Name ( ) ) ; } } //'jsonData ' is the server responsed json data StudentList students = gson.fromJson ( jsonData , StudentList.class )"
class Java { public static int java ( String s ) { switch ( s ) { case `` foo '' : return 1 ; case `` bar '' : return 2 ; case `` baz '' : return 3 ; default : return 42 ; } } } object Scala { def scala ( s : String ) : Int = { s match { case `` foo '' = > 1 case `` bar '' = > 2 case `` baz '' = > 3 case _ = > 42 } } } 0 : aload_0 1 : dup 2 : astore_1 3 : invokevirtual # 16 // Method java/lang/String.hashCode : ( ) I 6 : lookupswitch { // 3 97299 : 40 97307 : 52 101574 : 64 default : 82 } 40 : aload_1 41 : ldc # 22 // String bar43 : invokevirtual # 24 // Method java/lang/String.equals : ( Ljava/lang/Object ; ) Z46 : ifne 7849 : goto 8252 : aload_1 53 : ldc # 28 // String baz55 : invokevirtual # 24 // Method java/lang/String.equals : ( Ljava/lang/Object ; ) Z58 : ifne 8061 : goto 8264 : aload_1 65 : ldc # 30 // String foo67 : invokevirtual # 24 // Method java/lang/String.equals : ( Ljava/lang/Object ; ) Z70 : ifne 7673 : goto 8276 : iconst_1 77 : ireturn 78 : iconst_2 79 : ireturn 80 : iconst_3 81 : ireturn 82 : bipush 4284 : ireturn 0 : aload_1 1 : astore_2 2 : ldc # 16 // String foo 4 : aload_2 5 : invokevirtual # 20 // Method java/lang/Object.equals : ( Ljava/lang/Object ; ) Z 8 : ifeq 1611 : iconst_1 12 : istore_3 13 : goto 4716 : ldc # 22 // String bar18 : aload_2 19 : invokevirtual # 20 // Method java/lang/Object.equals : ( Ljava/lang/Object ; ) Z22 : ifeq 3025 : iconst_2 26 : istore_3 27 : goto 4730 : ldc # 24 // String baz32 : aload_2 33 : invokevirtual # 20 // Method java/lang/Object.equals : ( Ljava/lang/Object ; ) Z36 : ifeq 4439 : iconst_3 40 : istore_3 41 : goto 4744 : bipush 4246 : istore_3 47 : iload_3 48 : ireturn
"static Integer j = i ; /* compile error */static final Integer i = 5 ; class StaticInitialization { static final Object o = new Object ( ) { { j = i ; } } ; static Integer j , k ; static final Integer i = 5 ; static final Object o2 = new Object ( ) { { k = i ; } } ; }"
"public class MenuPanel extends JPanel implements ActionListener { private JButton playKnop , highScoreKnop , quitKnop , HTPKnop ; private ImageIcon play , HS , quit , HTP ; private Tanks mainVenster ; public MenuPanel ( Tanks mainVenster ) { this.mainVenster = mainVenster ; this.setLayout ( null ) ; int x = 95 ; int width = 200 ; int height = 50 ; play = new ImageIcon ( PlayPanel.class.getResource ( /buttons/PLAY.png ) ) ; playKnop = new JButton ( play ) ; playKnop.setBounds ( x , y , width , height ) ; playKnop.addActionListener ( this ) ; HS = new ImageIcon ( PlayPanel.class.getResource ( /buttons/HS.png ) ) ; highScoreKnop = new JButton ( HS ) ; highScoreKnop.setBounds ( x , 460 , width , height ) ; highScoreKnop.addActionListener ( this ) ; HTP = new ImageIcon ( PlayPanel.class.getResource ( /buttons/HTP.png ) ) ; HTPKnop = new JButton ( HTP ) ; HTPKnop.setBounds ( x , 515 , width , height ) ; HTPKnop.addActionListener ( this ) ; quit = new ImageIcon ( PlayPanel.class.getResource ( /buttons/QUIT.png ) ) ; quitKnop = new JButton ( quit ) ; quitKnop.setBounds ( x , 570 , width , height ) ; quitKnop.addActionListener ( this ) ; this.add ( playKnop ) ; this.add ( quitKnop ) ; this.add ( HTPKnop ) ; this.add ( highScoreKnop ) ; validate ( ) ; } } package menu ; import java.awt.Image ; import java.awt.event.ActionListener ; import javax.swing.ImageIcon ; import javax.swing.JButton ; public class button { public JButton button ; public ImageIcon buttonImage ; public int x = 95 ; public int width = 200 ; public int height = 50 ; public String backgroundPath ; public int y ; public button ( String backgroundPath , int y ) { this.backgroundPath = backgroundPath ; this.y = y ; buttonImage = new ImageIcon ( PlayPanel.class.getResource ( backgroundPath ) ) ; button = new JButton ( ) ; button.setBounds ( x , y , width , height ) ; ; button.addActionListener ( this ) ; } } package menu ; @ SuppressWarnings ( `` serial '' ) public class MenuPanel extends JPanel implements ActionListener { private button playKnop , highScoreKnop , quitKnop , HTPKnop ; private JTextField naam ; private Tanks mainVenster ; public MenuPanel ( Tanks mainVenster ) { this.mainVenster = mainVenster ; this.setLayout ( null ) ; playKnop = new button ( `` /buttons/PLAY.png '' , 350 ) ; highScoreKnop = new button ( `` /buttons/HS.png '' , 460 ) ; quitKnop = new button ( `` /buttons/QUIT.png '' , 515 ) ; HTPKnop = new button ( `` /buttons/HTP.png '' , 570 ) ; this.add ( playKnop ) ; this.add ( quitKnop ) ; this.add ( HTPKnop ) ; this.add ( highScoreKnop ) ; validate ( ) ; } } private Button playKnop , highScoreKnop , quitKnop , HTPKnop ; private Tanks mainVenster ; int x = 95 , width = 200 , height = 50 ; public MenuPanel ( Tanks mainVenster ) { this.mainVenster = mainVenster ; this.setLayout ( null ) ; playKnop = new Button ( `` /buttons/PLAY.png '' , 350 , this ) ; highScoreKnop = new Button ( `` /buttons/HS.png '' , 460 , this ) ; quitKnop = new Button ( `` /buttons/QUIT.png '' , 515 , this ) ; HTPKnop = new Button ( `` /buttons/HTP.png '' , 570 , this ) ; this.add ( playKnop ) ; this.add ( quitKnop ) ; this.add ( HTPKnop ) ; this.add ( highScoreKnop ) ; validate ( ) ; } public class Button extends JButton { JButton button ; ImageIcon buttonImage ; String backgroundPath ; int y ; public Button ( String backgroundPath , int y , MenuPanel menuPanel ) { super ( ) ; this.backgroundPath = backgroundPath ; this.y = y ; buttonImage = new ImageIcon ( PlayPanel.class.getResource ( backgroundPath ) ) ; this.setBounds ( x , y , width , height ) ; ; this.addActionListener ( menuPanel ) ; } }"
public class Task implements Runnable { public void run ( ) { while ( ! Thread.interrupted ( ) ) { try { System.out.println ( `` task '' ) ; TimeUnit.SECONDS.sleep ( 2 ) ; } catch ( InterruptedException e ) { System.out.println ( `` interrupted '' ) ; } } } } public static void main ( String [ ] args ) throws Exception { ExecutorService exec = Executors.newCachedThreadPool ( ) ; exec.execute ( new Task ( ) ) ; TimeUnit.SECONDS.sleep ( 10 ) ; exec.shutdownNow ( ) ; } tasktasktasktasktaskinterrupted
Update [ ] updates = lu.toArray ( new Update [ 0 ] ) ; List < Update > lu = new ArrayList < Update > ( ) ; String text = `` '' ; final Update.Builder ub = new Update.Builder ( ) ; final Author a = new Author ( `` Tallulah '' ) ; for ( int i=0 ; i < 256 ; i++ ) { text = text + `` X '' ; long now = System.currentTimeMillis ( ) ; lu.add ( ub.author ( a ) .updateText ( text ) .createTime ( now ) .build ( ) ) ; try { Thread.sleep ( 1 ) ; } catch ( InterruptedException e ) { } } Collections.shuffle ( lu ) ; Update [ ] updates = lu.toArray ( new Update [ 0 ] ) ;
for ( int i = 1 ; i < =l-1 ; i++ ) { counter = 1 ; for ( int j = 0 ; j < i ; j++ ) { if ( seq [ j ] < seq [ j+1 ] ) { count [ j ] = counter++ ; } } } for ( int i = 0 ; i < l-1 ; i++ ) { if ( largest < count [ i+1 ] ) { largest = count [ i+1 ] ; } }
class Scratch { public static void main ( String [ ] args ) { Thread Task1 = new Thread ( new Task1 ( ) ) ; Task1.start ( ) ; Thread Task2 = new Thread ( new Task2 ( ) ) ; Task2.start ( ) ; // ... more threads } public class Task1 implements Runnable { public void run ( ) { while ( true ) { // ... System.exit ( 0 ) ; // ... } } } public class Task2 implements Runnable { public void run ( ) { while ( true ) { // ... // I need to know about System.exit ( 0 ) to exit my loop // ... } } } }
"public List getList ( Class cls , Map query ) List < Whatever > list = getList ( WhateverImpl.class , query ) ; public < T > List < T > getList ( Class < T > cls , Map query )"
"public void method1 ( arguments for method 1 ) { ... } ... public void method300 ( arguments for method 300 ) { ... } public void myExceptionHandler ( Exception e ) { if ( e instanceOf X ) { } else if ... ... throw particularExceptionAccordingTheCase } public class myExceptionHandler implements Thread.UncaughtExceptionHandler { @ Override public void uncaughtException ( Thread t , Throwable e ) { System.out.println ( `` gotcha ! `` ) ; if ( e instanceof java.lang.Error ) { System.out.println ( `` AAT-CORE : Fatal Error '' ) ; throw new java.lang.Error ( e.getCause ( ) ) ; } else if ( e instanceof java.lang.Exception ) { System.out.println ( `` AAT-CORE : Exception Error '' ) ; throw new FileNotFoundException ( ) ; } } } public class TopLayer { public static void main ( String [ ] args ) { MiddleLayer m = new MiddleLayer ( ) ; m.method1 ( ) ; } } public class MiddleLayer extends BottomLayer { public MiddleLayer ( ) { final UncaughtExceptionHandler subclass = Thread.currentThread ( ) .getUncaughtExceptionHandler ( ) ; Thread.currentThread ( ) .setUncaughtExceptionHandler ( new UncaughtExceptionHandler ( ) { @ Override public void uncaughtException ( Thread thread , Throwable ex ) { System.out.println ( `` gotcha2 ! `` ) ; // carry on with prior flow subclass.uncaughtException ( thread , ex ) ; } } ) ; } }"
int x = ' 5 ' - ' 0 ' ; int x = ' 5 ' int x = ' 0 ' + 1 - ' 5 ' int y = ' 5 ' - ' 0 ' + ' 1 ' int y = ' 5 ' - 0 + ' 1 '
"// to greyImgproc.cvtColor ( mat , mat , Imgproc.COLOR_RGB2GRAY , 4 ) ; Imgproc.adaptiveThreshold ( mat , mat , 255 , Imgproc.ADAPTIVE_THRESH_MEAN_C , Imgproc.THRESH_BINARY_INV , 15 , 4 ) ; Utils.matToBitmap ( mat , bitmapCopy ) ; // to grey Imgproc.cvtColor ( mat , mat , Imgproc.COLOR_RGB2GRAY , 4 ) ; Imgproc.adaptiveThreshold ( mat , mat , 255 , Imgproc.ADAPTIVE_THRESH_MEAN_C , Imgproc.THRESH_BINARY_INV , 15 , 4 ) ; Utils.matToBitmap ( mat , bitmapCopy ) ; for ( int y = 0 ; y < bitmapCopy.getHeight ( ) ; y++ ) { for ( int x = 0 ; x < bitmapCopy.getWidth ( ) ; x++ ) { int pixel = bitmapCopy.getPixel ( x , y ) ; if ( pixel == Color.WHITE ) { bitmapCopy.setPixel ( x , y , Color.BLACK ) ; } else { bitmapCopy.setPixel ( x , y , Color.WHITE ) ; } } }"
"public < T extends List < ? > > T < String > sum ( T < Integer > sublistOfInts , T < Boolean > sublistOfBooleans ) { /*fusion both lists*/ return sublistOfStrings ; } ArrayList < String > myList = sum ( new ArrayList < Integer > ( ) , new ArrayList < Boolean > ( ) ) ; ArrayList < String > myList = sum ( new ArrayList < Double > ( ) , new ArrayList < Boolean > ( ) ) ; ArrayList < String > myList = sum ( new LinkedList < Integer > ( ) , new ArrayList < Boolean > ( ) ) ; ( ... ) < T extends Tuple < ? > > T < String > reset ( T < String > input , T < Boolean > listToNull ) { T copy = input.copy ( ) ; for ( int i=0 ; i < input.size ( ) ; i++ ) { if ( listToNull.get ( i ) ) { copy.set ( i , null ) ; } } }"
"int i = 5 ; long lng = 0xffffffffffffL ; //larger than Int.MAX_VALUEi += lng ; //allowed by Java ( i==4 ) , rejected by C # int i = 0 ; long lng = 0xffffffffffffL ; i = ( int ) ( i + lng ) ;"
"@ ExtendWith ( MyExtension.class ) public class SomeTest { @ BeforeAll static void create ( ) { System.out.println ( `` Call beforeAll of test class '' ) ; } @ AfterAll static void destroy ( ) { System.out.println ( `` Call afterAll of test class '' ) ; } @ Nested class InnerTest1 { @ Test void testingA ( ) { System.out.println ( `` Test 1A '' ) ; } @ Test void testingB ( ) { System.out.println ( `` Test 1B '' ) ; } } @ Nested class InnerTest2 { @ Test void testingA ( ) { System.out.println ( `` Test 2A '' ) ; } @ Test void testingB ( ) { System.out.println ( `` Test 2B '' ) ; } } } public class MyExtension implements BeforeAllCallback , AfterAllCallback { public MysqlMockExtension ( ) { } @ Override public void beforeAll ( final ExtensionContext extensionContext ) throws Exception { System.out.println ( `` Call beforeAll of extension '' ) ; } @ Override public void afterAll ( final ExtensionContext extensionContext ) throws Exception { System.out.println ( `` Call afterAll of extension '' ) ; } } Call beforeAll of extensionCall beforeAll of test classCall beforeAll of extensionTest 2ATest 2BCall afteeAll of extensionCall beforeAll of extensionTest 1ATest 1BCall afteeAll of extensionCall afterAll of test classCall afteeAll of extension"
git diff master HEAD -- '*.txt '
org/openqa/selenium/WebDriver : java.lang.NoClassDefFoundErrorjava.lang.NoClassDefFoundError : org/openqa/selenium/WebDriver Calling the invoke API action failed with this message : Lambda was not able to unzip the file < dependency > < groupId > org.seleniumhq.webdriver < /groupId > < artifactId > webdriver-common < /artifactId > < version > 0.9.7376 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-chrome-driver < /artifactId > < version > 3.141.59 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-java < /artifactId > < version > 3.141.59 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.webdriver < /groupId > < artifactId > webdriver-common < /artifactId > < version > 0.9.7376 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-chrome-driver < /artifactId > < version > 3.141.59 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-java < /artifactId > < version > 3.141.59 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-api < /artifactId > < version > 2.0rc2 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-remote-driver < /artifactId > < version > 3.141.59 < /version > < /dependency > < dependency > < groupId > org.seleniumhq.selenium < /groupId > < artifactId > selenium-support < /artifactId > < version > 3.141.59 < /version > < /dependency > < build > < plugins > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-compiler-plugin < /artifactId > < version > 3.6.0 < /version > < configuration > < source > 1.8 < /source > < target > 1.8 < /target > < encoding > UTF-8 < /encoding > < forceJavacCompilerUse > true < /forceJavacCompilerUse > < /configuration > < /plugin > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-shade-plugin < /artifactId > < version > 3.0.0 < /version > < executions > < execution > < phase > package < /phase > < goals > < goal > shade < /goal > < /goals > < /execution > < /executions > < /plugin > < /plugins > < /build >
"public static main ( String [ ] args ) { ByteBuffer output = ByteBuffer.allocate ( 80 ) ; output.order ( ByteOrder.BIG_ENDIAN ) ; output.putDouble ( 545.5 ) ; appendByteArrayInFile ( `` c : /myPath/ '' , `` test.bin '' , output.array ( ) ) ; } private static void appendByteArrayInFile ( String exportDirectory , String fileName , byte [ ] toAppendInFile ) { if ( toAppendInFile ! = null ) { File targetExport = createPathAndFile ( exportDirectory + fileName ) ; try ( FileOutputStream output = new FileOutputStream ( targetExport , true ) ) { output.write ( toAppendInFile ) ; } catch ( Exception e ) { // no } } } private static File createPathAndFile ( String path ) { File targetExport = new File ( path ) ; targetExport.getParentFile ( ) .mkdirs ( ) ; return targetExport ; } 01000000 10000001 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100 10000001 01000000 00000000 00000000 00000010 00100001"
clean javadoc : jar site deploy site : deploy
"Stream.of ( `` d2 '' , `` a2 '' , `` b1 '' , `` b3 '' , `` c '' ) .filter ( s - > { System.out.println ( `` filter : `` + s ) ; return s.startsWith ( `` a '' ) ; } ) .forEach ( s - > System.out.println ( `` forEach : `` + s ) ) ; String [ ] strings = { `` d2 '' , `` a2 '' , `` b1 '' , `` b3 '' , `` c '' } ; for ( String s : strings ) { System.out.println ( `` Before filtering : `` + s ) ; if ( s.startsWith ( `` a '' ) ) { System.out.println ( `` After Filtering : `` + s ) ; } }"
"public class Foo { public Foo merge ( Foo another ) { //some logic } } public class Bar { public void function ( BiFunction < Foo , Foo , Foo > biFunction ) { //some logic } } new Bar ( ) .function ( Foo : :merge ) ; Foo merge ( Foo another ) R apply ( T t , U u ) ;"
"[ v1 , v2 , v3 , v4 , v5 , v6 ] ( first collection ) [ w1 , w2 , w3 , w4 , w5 , w6 ] ( second collection ) -- -- -- -- -- -- -- -- -- -- -- -- -- - foo ( < v1 , w1 > , 0 ) foo ( < v2 , w2 > , 1 ) ... foo ( < v6 , w6 > , 5 ) // Type of f ? private < S , U > void iterateSimultaneously ( Collection < S > c1 , Collection < U > c2 , Function f ) { int i = 0 Iterator < S > it1 = c1.iterator ( ) Iterator < U > it2 = c2.iterator ( ) while ( it1.hasNext ( ) & & it2.hasNext ( ) ) { Tuple < S , U > tuple = new Tuple < > ( it1.next ( ) , it2.next ( ) ) // call somehow f ( tuple , i ) i++ } } // ... ... ... ... ... ... ... ... // pseudo code , is this posible in Java ? iterateSimultaneously ( c1 , c2 , ( e1 , e2 , i ) - > { // play with those items and the i value } )"
"< R > Stream < R > mapMulti​ ( BiConsumer < ? super T , ​ ? super Consumer < R > > mapper )"
import java.util.function.Supplier ; class Example { final String str ; Supplier < Integer > test1 = ( ) - > str.length ( ) ; // DOES NOT COMPILE Supplier < Integer > test2 = ( ) - > this.str.length ( ) ; // DOES NOT COMPILE Supplier < Integer > test3 = ( ) - > ( this.str ) .length ( ) ; // DOES NOT COMPILE Supplier < Integer > test4 = ( ) - > ( this ) .str.length ( ) ; // OK Example ( String str ) { System.out.println ( test4.get ( ) ) ; // NullPointerException this.str = str ; System.out.println ( test4.get ( ) ) ; // OK } } -- -javac Example.javaExample.java:7 : error : variable str might not have been initializedSupplier < Integer > test1 = ( ) - > str.length ( ) ; // DOES NOT COMPILE ^Example.java:8 : error : variable str might not have been initializedSupplier < Integer > test2 = ( ) - > this.str.length ( ) ; // DOES NOT COMPILE ^Example.java:9 : error : variable str might not have been initializedSupplier < Integer > test3 = ( ) - > ( this.str ) .length ( ) ; // DOES NOT COMPILE ^3 errors
"Exception at com.example.blah.Something.method ( ) at com.example.blah.Xyz.otherMethod ( ) at com.example.hello.World.foo ( ) at com.example.debug.version_3_8_0.debug_info_something.Hah.method ( ) // synthetic method at com.example.x.A.wrappingMethod ( ) public void wrappingMethod ( ) { run ( `` com.example.debug.version_3_8_0.debug_info_something.Hah.method ( ) '' , ( ) - > { World.foo ( ) ; } ) ; }"
"class Foo < T extends Comparable < ? super T > > { public int ct ( T a , T b ) { return a.compareTo ( b ) ; } } @ SuppressWarnings ( `` unchecked '' ) class Foo < T extends Comparable > { public int ct ( T a , T b ) { return a.compareTo ( b ) ; } }"
"public static org.apache.batik.svggen.SVGGraphics2D createSVG ( ) { org.w3c.dom.DOMImplementation domImpl = org.apache.batik.dom.GenericDOMImplementation.getDOMImplementation ( ) ; org.w3c.dom.Document document = domImpl.createDocument ( `` http : //www.w3.org/2000/svg '' , `` svg '' , null ) ; return new org.apache.batik.svggen.SVGGraphics2D ( document ) ; } protected void showPage ( int pageNumber ) { try { PageDrawer drawer = new PageDrawer ( ) ; PageWrapper wrapper = new PageWrapper ( this ) ; PDPage page = ( PDPage ) pages.get ( pageNumber ) ; wrapper.displayPage ( page ) ; PDRectangle cropBox = page.findCropBox ( ) ; Dimension drawDimension = cropBox.createDimension ( ) ; svg = PDFPagePanel.createSVG ( ) ; // MY EDIT ! ! ! ! ! ! ! ! ! drawer.drawPage ( svg , page , drawDimension ) ; writeSVG ( pageNumber ) ; } catch ( IOException exception ) { exception.printStackTrace ( ) ; } }"
"@ Document ( collection = `` factory '' ) public class Factory { Private List < Product > products ; } @ Autowiredprivate FactoryRepository factoryRepository ; public void addProduct ( Long id , Product product ) { Factory f = factoryRepository.findById ( id ) ; f.addProduct ( product ) ; factoryRepository.save ( f ) ; } public void addProduct ( Long id , Product product ) { Document find = new Document ( `` _id '' , id ) ; Document listItem = new Document ( `` products '' , product ) ; Document push = new Document ( `` $ push '' , listItem ) ; collection.updateOne ( find , push ) ; } org.bson.codecs.configuration.CodecConfigurationException : Ca n't find a codec for class product public void addProduct ( Long id , Product product ) { Document find = new Document ( `` _id '' , id ) ; ObjectWriter ow = new ObjectMapper ( ) .writer ( ) .withDefaultPrettyPrinter ( ) ; Document listItem = new Document ( `` products '' , ow.writeValueAsString ( product ) ) ; Document push = new Document ( `` $ push '' , listItem ) ; collection.updateOne ( find , push ) ; } org.springframework.core.convert.ConverterNotFoundException : No converter found capable of converting from type [ java.lang.String ] to type [ Product ]"
"public long transferFrom ( ReadableByteChannel src , long position , long count ) throws IOException { // ... if ( position > size ( ) ) return 0 ; // ... }"
"java.net.SocketException : No buffer space available ( maximum connections reached ? ) : connect at java.net.PlainSocketImpl.socketConnect ( Native Method ) at java.net.PlainSocketImpl.doConnect ( PlainSocketImpl.java:351 ) at java.net.PlainSocketImpl.connectToAddress ( PlainSocketImpl.java:213 ) at java.net.PlainSocketImpl.connect ( PlainSocketImpl.java:200 ) at java.net.SocksSocketImpl.connect ( SocksSocketImpl.java:366 ) at java.net.Socket.connect ( Socket.java:529 ) at java.net.Socket.connect ( Socket.java:478 ) at java.net.Socket. < init > ( Socket.java:375 ) at java.net.Socket. < init > ( Socket.java:189 ) at SocketTest.callServer ( SocketTest.java:60 ) at SocketTest.testResourceConsumption ( SocketTest.java:52 ) import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; import java.net.ServerSocket ; import java.net.Socket ; import junit.framework.TestCase ; public class SocketTest extends TestCase { private static final int PORT = 12345 ; private ServerSocket serverSocket ; public void setUp ( ) throws Exception { serverSocket = new ServerSocket ( PORT ) ; new Thread ( new Runnable ( ) { @ Override public void run ( ) { while ( true ) { try { final Socket socket = serverSocket.accept ( ) ; new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { OutputStream outputStream = socket.getOutputStream ( ) ; for ( int i = 0 ; i < 100 ; i++ ) { outputStream.write ( i ) ; } outputStream.close ( ) ; // in fact the previous line calls this already : // socket.close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } } ) .start ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } } } ) .start ( ) ; } public void testResourceConsumption ( ) throws Exception { for ( int i=0 ; i < 1000000 ; i++ ) { callServer ( ) ; if ( i % 1000 == 0 ) { System.out.println ( i ) ; } } } private void callServer ( ) throws Exception { Socket clientSocket = new Socket ( `` localhost '' , PORT ) ; InputStream inputStream = clientSocket.getInputStream ( ) ; for ( int i = 0 ; i < 100 ; i++ ) { assertEquals ( i , inputStream.read ( ) ) ; } ///////////////// THIS LINE IS INTERESTING inputStream.close ( ) ; // in fact the previous line calls this already : // clientSocket.close ( ) ; } public void tearDown ( ) throws Exception { serverSocket.close ( ) ; } }"
"public class Test { // pass the path to 'test.png ' as command line parameter public static void main ( String [ ] args ) throws Exception { BufferedImage image = ImageIO.read ( new File ( args [ 0 ] ) ) ; // create window JFrame frame = new JFrame ( ) ; Canvas canvas = new Canvas ( ) ; canvas.setPreferredSize ( new Dimension ( 100 , 100 ) ) ; frame.getContentPane ( ) .add ( canvas ) ; frame.pack ( ) ; frame.setVisible ( true ) ; int fps = 0 ; long nsPerFrame = 1000000000 / 60 ; // 60 = target fps long showTime = System.nanoTime ( ) + nsPerFrame ; long printTime = System.currentTimeMillis ( ) + 1000 ; for ( int tick = 0 ; true ; tick++ ) { BufferStrategy bs = canvas.getBufferStrategy ( ) ; if ( bs == null ) { canvas.createBufferStrategy ( 2 ) ; continue ; } // draw frame Graphics g = bs.getDrawGraphics ( ) ; int framex = ( tick % 4 ) * 64 ; g.drawImage ( image , 18 , 18 , 82 , 82 , framex , 0 , framex+64 , 64 , null ) ; g.dispose ( ) ; bs.show ( ) ; // enforce frame rate long sleepTime = showTime - System.nanoTime ( ) ; if ( sleepTime > 0 ) { long sleepMillis = sleepTime / 1000000 ; int sleepNanos = ( int ) ( sleepTime - ( sleepMillis * 1000000 ) ) ; try { Thread.sleep ( sleepMillis , sleepNanos ) ; } catch ( InterruptedException ie ) { /* ignore */ } } showTime += nsPerFrame ; // print frame rate achieved fps++ ; if ( System.currentTimeMillis ( ) > printTime ) { System.out.println ( `` fps : `` + fps ) ; fps = 0 ; printTime += 1000 ; } } } }"
public class Null { public static void greet ( ) { System.out.println ( `` Hello world ! `` ) ; } public static void main ( String [ ] args ) { ( ( Null ) null ) .greet ( ) ; } }
"public class SampleParent { private class InnerChild { } private class InnerChildA extends InnerChild { } private class InnerChildB extends InnerChild { } private class InnerChildC extends InnerChild { } enum InnerChildEnum { CHILD_A { @ Override public InnerChild getInstance ( ) { return new InnerChildA ( ) ; // compile error } } , CHILD_B { @ Override public InnerChild getInstance ( ) { return new SampleParent.InnerChildB ( ) ; // compile error } } , CHILD_C { @ Override public InnerChild getInstance ( ) { return SampleParent.new InnerChildC ( ) ; // compile error } } , ; public abstract InnerChild getInstance ( ) ; } private static class InnerChildFactoryEnumStyled { public static InnerChild getInnerChild ( InnerChildEnum child ) { return child.getInstance ( ) ; } } public static void main ( String [ ] args ) { // I want to write this way InnerChild child = InnerChildFactoryEnumStyled.getInnerChild ( InnerChildEnum.CHILD_A ) ; } } $ javac SampleParent.java SampleParent.java:12 : error : non-static variable this can not be referenced from a static context return new InnerChildA ( ) ; ^SampleParent.java:18 : error : non-static variable this can not be referenced from a static context return new SampleParent.InnerChildB ( ) ; ^SampleParent.java:24 : error : can not find symbol return SampleParent.new InnerChildC ( ) ; ^ symbol : variable SampleParent3 errors"
"public Vector2f [ ] draw ( ) { float x = 0 , y = height ; // height - float value from class constructor ; ArrayList < Vector2f > graphic = new ArrayList < Vector2f > ( ) ; for ( ; ; ) { Vector2f a = new Vector2f ( x , y ) ; graphic.add ( a ) ; ySpeed -= 10 ; y += ySpeed*Math.cos ( angle ) ; x += xSpeed*Math.sin ( angle ) ; if ( y < = 0 ) { // float coef = -10 * y / ySpeed ; // ySpeed = ( ( ySpeed + coef ) * ( -1 ) ) * bouncyness ; ySpeed = ( ySpeed * ( -1 ) ) * bouncyness ; System.out.println ( ySpeed + `` `` + y ) ; y = 0 ; } if ( x > Main.width ) break ; } Vector2f [ ] graphicArray = new Vector2f [ graphic.size ( ) ] ; for ( int i = 0 ; i < graphic.size ( ) ; i++ ) { graphicArray [ i ] = graphic.get ( i ) ; } return graphicArray ; }"
"public class Test { static volatile int a = 1 ; public static void main ( String [ ] args ) { a++ ; } } java -server -Xcomp -XX : +UnlockDiagnosticVMOptions -XX : -Inline -XX : CompileCommand=print , *Test.main Test > Test.asm CompilerOracle : print *Test.mainCompiled method ( c1 ) 1733 1750 3 Test : :main ( 9 bytes ) total in heap [ 0x0000000111848650,0x0000000111848970 ] = 800 relocation [ 0x0000000111848778,0x00000001118487a0 ] = 40 main code [ 0x00000001118487a0,0x0000000111848860 ] = 192 stub code [ 0x0000000111848860,0x00000001118488f0 ] = 144 oops [ 0x00000001118488f0,0x00000001118488f8 ] = 8 metadata [ 0x00000001118488f8,0x0000000111848900 ] = 8 scopes data [ 0x0000000111848900,0x0000000111848918 ] = 24 scopes pcs [ 0x0000000111848918,0x0000000111848968 ] = 80 dependencies [ 0x0000000111848968,0x0000000111848970 ] = 8Loaded disassembler from /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/hsdis-amd64.dylibDecoding compiled method 0x0000000111848650 : Code : [ Disassembling for mach='i386 : x86-64 ' ] [ Entry Point ] [ Verified Entry Point ] [ Constants ] # { method } { 0x000000010e40e240 } 'main ' ' ( [ Ljava/lang/String ; ) V ' in 'Test ' # parm0 : rsi : rsi = ' [ Ljava/lang/String ; ' # [ sp+0x40 ] ( sp of caller ) 0x00000001118487a0 : mov % eax , -0x14000 ( % rsp ) 0x00000001118487a7 : push % rbp 0x00000001118487a8 : sub $ 0x30 , % rsp 0x00000001118487ac : movabs $ 0x10e40e4d0 , % rdi ; { metadata ( method data for { method } { 0x000000010e40e240 } 'main ' ' ( [ Ljava/lang/String ; ) V ' in 'Test ' ) } 0x00000001118487b6 : mov 0xdc ( % rdi ) , % ebx 0x00000001118487bc : add $ 0x8 , % ebx 0x00000001118487bf : mov % ebx,0xdc ( % rdi ) 0x00000001118487c5 : movabs $ 0x10e40e240 , % rdi ; { metadata ( { method } { 0x000000010e40e240 } 'main ' ' ( [ Ljava/lang/String ; ) V ' in 'Test ' ) } 0x00000001118487cf : and $ 0x0 , % ebx 0x00000001118487d2 : cmp $ 0x0 , % ebx 0x00000001118487d5 : je 0x00000001118487fe 0x00000001118487db : movabs $ 0x7955fd1e8 , % rsi ; { oop ( a 'java/lang/Class ' = 'Test ' ) } 0x00000001118487e5 : mov 0x68 ( % rsi ) , % edi ; *getstatic a ; - Test : :main @ 0 ( line 6 ) 0x00000001118487e8 : inc % edi 0x00000001118487ea : mov % edi,0x68 ( % rsi ) 0x00000001118487ed : lock addl $ 0x0 , ( % rsp ) ; *putstatic a ; - Test : :main @ 5 ( line 6 ) 0x00000001118487f2 : add $ 0x30 , % rsp 0x00000001118487f6 : pop % rbp 0x00000001118487f7 : test % eax , -0x5f7f6fd ( % rip ) # 0x000000010b8c9100 ; { poll_return } 0x00000001118487fd : retq 0x00000001118487fe : mov % rdi,0x8 ( % rsp ) 0x0000000111848803 : movq $ 0xffffffffffffffff , ( % rsp ) 0x000000011184880b : callq 0x0000000111543f60 ; OopMap { rsi=Oop off=112 } ; *synchronization entry ; - Test : :main @ -1 ( line 6 ) ; { runtime_call } 0x0000000111848810 : jmp 0x00000001118487db 0x0000000111848812 : nop 0x0000000111848813 : nop 0x0000000111848814 : mov 0x2a8 ( % r15 ) , % rax 0x000000011184881b : movabs $ 0x0 , % r10 0x0000000111848825 : mov % r10,0x2a8 ( % r15 ) 0x000000011184882c : movabs $ 0x0 , % r10 0x0000000111848836 : mov % r10,0x2b0 ( % r15 ) 0x000000011184883d : add $ 0x30 , % rsp 0x0000000111848841 : pop % rbp 0x0000000111848842 : jmpq 0x00000001114b24a0 ; { runtime_call } 0x0000000111848847 : hlt 0x0000000111848848 : hlt 0x0000000111848849 : hlt 0x000000011184884a : hlt 0x000000011184884b : hlt 0x000000011184884c : hlt 0x000000011184884d : hlt 0x000000011184884e : hlt 0x000000011184884f : hlt 0x0000000111848850 : hlt 0x0000000111848851 : hlt 0x0000000111848852 : hlt 0x0000000111848853 : hlt 0x0000000111848854 : hlt 0x0000000111848855 : hlt 0x0000000111848856 : hlt 0x0000000111848857 : hlt 0x0000000111848858 : hlt 0x0000000111848859 : hlt 0x000000011184885a : hlt 0x000000011184885b : hlt 0x000000011184885c : hlt 0x000000011184885d : hlt 0x000000011184885e : hlt 0x000000011184885f : hlt [ Exception Handler ] [ Stub Code ] 0x0000000111848860 : callq 0x00000001115418e0 ; { no_reloc } 0x0000000111848865 : mov % rsp , -0x28 ( % rsp ) 0x000000011184886a : sub $ 0x80 , % rsp 0x0000000111848871 : mov % rax,0x78 ( % rsp ) 0x0000000111848876 : mov % rcx,0x70 ( % rsp ) 0x000000011184887b : mov % rdx,0x68 ( % rsp ) 0x0000000111848880 : mov % rbx,0x60 ( % rsp ) 0x0000000111848885 : mov % rbp,0x50 ( % rsp ) 0x000000011184888a : mov % rsi,0x48 ( % rsp ) 0x000000011184888f : mov % rdi,0x40 ( % rsp ) 0x0000000111848894 : mov % r8,0x38 ( % rsp ) 0x0000000111848899 : mov % r9,0x30 ( % rsp ) 0x000000011184889e : mov % r10,0x28 ( % rsp ) 0x00000001118488a3 : mov % r11,0x20 ( % rsp ) 0x00000001118488a8 : mov % r12,0x18 ( % rsp ) 0x00000001118488ad : mov % r13,0x10 ( % rsp ) 0x00000001118488b2 : mov % r14,0x8 ( % rsp ) 0x00000001118488b7 : mov % r15 , ( % rsp ) 0x00000001118488bb : movabs $ 0x10c7d8060 , % rdi ; { external_word } 0x00000001118488c5 : movabs $ 0x111848865 , % rsi ; { internal_word } 0x00000001118488cf : mov % rsp , % rdx 0x00000001118488d2 : and $ 0xfffffffffffffff0 , % rsp 0x00000001118488d6 : callq 0x000000010c60361a ; { runtime_call } 0x00000001118488db : hlt [ Deopt Handler Code ] 0x00000001118488dc : movabs $ 0x1118488dc , % r10 ; { section_word } 0x00000001118488e6 : push % r10 0x00000001118488e8 : jmpq 0x000000011148d3c0 ; { runtime_call } 0x00000001118488ed : hlt 0x00000001118488ee : hlt 0x00000001118488ef : hlt OopMapSet contains 1 OopMaps # 0 OopMap { rsi=Oop off=112 } Compiled method ( c1 ) 1747 1751 1 Test : :main ( 9 bytes ) total in heap [ 0x0000000111847250,0x0000000111847518 ] = 712 relocation [ 0x0000000111847378,0x00000001118473a0 ] = 40 main code [ 0x00000001118473a0,0x0000000111847420 ] = 128 stub code [ 0x0000000111847420,0x00000001118474b0 ] = 144 oops [ 0x00000001118474b0,0x00000001118474b8 ] = 8 metadata [ 0x00000001118474b8,0x00000001118474c0 ] = 8 scopes data [ 0x00000001118474c0,0x00000001118474d0 ] = 16 scopes pcs [ 0x00000001118474d0,0x0000000111847510 ] = 64 dependencies [ 0x0000000111847510,0x0000000111847518 ] = 8Decoding compiled method 0x0000000111847250 : Code : [ Entry Point ] [ Verified Entry Point ] [ Constants ] # { method } { 0x000000010e40e240 } 'main ' ' ( [ Ljava/lang/String ; ) V ' in 'Test ' # parm0 : rsi : rsi = ' [ Ljava/lang/String ; ' # [ sp+0x40 ] ( sp of caller ) 0x00000001118473a0 : mov % eax , -0x14000 ( % rsp ) 0x00000001118473a7 : push % rbp 0x00000001118473a8 : sub $ 0x30 , % rsp 0x00000001118473ac : movabs $ 0x7955fd1e8 , % rsi ; { oop ( a 'java/lang/Class ' = 'Test ' ) } 0x00000001118473b6 : mov 0x68 ( % rsi ) , % edi ; *getstatic a ; - Test : :main @ 0 ( line 6 ) 0x00000001118473b9 : inc % edi 0x00000001118473bb : mov % edi,0x68 ( % rsi ) 0x00000001118473be : lock addl $ 0x0 , ( % rsp ) ; *putstatic a ; - Test : :main @ 5 ( line 6 ) 0x00000001118473c3 : add $ 0x30 , % rsp 0x00000001118473c7 : pop % rbp 0x00000001118473c8 : test % eax , -0x5f7e2ce ( % rip ) # 0x000000010b8c9100 ; { poll_return } 0x00000001118473ce : retq 0x00000001118473cf : nop 0x00000001118473d0 : nop 0x00000001118473d1 : mov 0x2a8 ( % r15 ) , % rax 0x00000001118473d8 : movabs $ 0x0 , % r10 0x00000001118473e2 : mov % r10,0x2a8 ( % r15 ) 0x00000001118473e9 : movabs $ 0x0 , % r10 0x00000001118473f3 : mov % r10,0x2b0 ( % r15 ) 0x00000001118473fa : add $ 0x30 , % rsp 0x00000001118473fe : pop % rbp 0x00000001118473ff : jmpq 0x00000001114b24a0 ; { runtime_call } 0x0000000111847404 : hlt 0x0000000111847405 : hlt 0x0000000111847406 : hlt 0x0000000111847407 : hlt 0x0000000111847408 : hlt 0x0000000111847409 : hlt 0x000000011184740a : hlt 0x000000011184740b : hlt 0x000000011184740c : hlt 0x000000011184740d : hlt 0x000000011184740e : hlt 0x000000011184740f : hlt 0x0000000111847410 : hlt 0x0000000111847411 : hlt 0x0000000111847412 : hlt 0x0000000111847413 : hlt 0x0000000111847414 : hlt 0x0000000111847415 : hlt 0x0000000111847416 : hlt 0x0000000111847417 : hlt 0x0000000111847418 : hlt 0x0000000111847419 : hlt 0x000000011184741a : hlt 0x000000011184741b : hlt 0x000000011184741c : hlt 0x000000011184741d : hlt 0x000000011184741e : hlt 0x000000011184741f : hlt [ Exception Handler ] [ Stub Code ] 0x0000000111847420 : callq 0x00000001115418e0 ; { no_reloc } 0x0000000111847425 : mov % rsp , -0x28 ( % rsp ) 0x000000011184742a : sub $ 0x80 , % rsp 0x0000000111847431 : mov % rax,0x78 ( % rsp ) 0x0000000111847436 : mov % rcx,0x70 ( % rsp ) 0x000000011184743b : mov % rdx,0x68 ( % rsp ) 0x0000000111847440 : mov % rbx,0x60 ( % rsp ) 0x0000000111847445 : mov % rbp,0x50 ( % rsp ) 0x000000011184744a : mov % rsi,0x48 ( % rsp ) 0x000000011184744f : mov % rdi,0x40 ( % rsp ) 0x0000000111847454 : mov % r8,0x38 ( % rsp ) 0x0000000111847459 : mov % r9,0x30 ( % rsp ) 0x000000011184745e : mov % r10,0x28 ( % rsp ) 0x0000000111847463 : mov % r11,0x20 ( % rsp ) 0x0000000111847468 : mov % r12,0x18 ( % rsp ) 0x000000011184746d : mov % r13,0x10 ( % rsp ) 0x0000000111847472 : mov % r14,0x8 ( % rsp ) 0x0000000111847477 : mov % r15 , ( % rsp ) 0x000000011184747b : movabs $ 0x10c7d8060 , % rdi ; { external_word } 0x0000000111847485 : movabs $ 0x111847425 , % rsi ; { internal_word } 0x000000011184748f : mov % rsp , % rdx 0x0000000111847492 : and $ 0xfffffffffffffff0 , % rsp 0x0000000111847496 : callq 0x000000010c60361a ; { runtime_call } 0x000000011184749b : hlt [ Deopt Handler Code ] 0x000000011184749c : movabs $ 0x11184749c , % r10 ; { section_word } 0x00000001118474a6 : push % r10 0x00000001118474a8 : jmpq 0x000000011148d3c0 ; { runtime_call } 0x00000001118474ad : hlt 0x00000001118474ae : hlt 0x00000001118474af : hlt OopMapSet contains 0 OopMaps"
String name = `` Marcus '' ; static String s_name = `` Peter '' ; public static void main ( String [ ] args ) { System.out.println ( name ) ; //ERROR System.out.println ( s_name ) ; //OK }
"function doAnAjaxCall ( ) { var xhr1 = new XMLHttpRequest ( ) ; xhr1.open ( 'GET ' , '/mylink ' , true ) ; xhr1.onreadystatechange = function ( ) { if ( this.readyState == 4 & & this.status==200 ) { alert ( `` Hey ! I got a response ! `` ) ; } } ; xhr1.send ( null ) ; } public class RootServlet extends HttpServlet { public void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp.getWriter ( ) .write ( `` What 's up doc ? `` ) ; resp.setStatus ( 200 ) ; } }"
"code.append ( `` Map < Integer , String > map = `` ) ; if ( javax.meta.JavaVersion.getCurrentVersion ( ) .supportsDiamond ( ) ) { code.append ( `` new Map < > ( ) ; '' ) ; } else { code.append ( `` new Map < Integer , String > ( ) ; '' ) ; }"
"public CompletionStage < Result > message ( ) { return getFutureMessage ( 5 , TimeUnit.SECONDS ) .thenApplyAsync ( s - > ok ( views.html.User.Account.verified.render ( ) ) , exec ) ; } private CompletionStage < String > getFutureMessage ( long time , TimeUnit timeUnit ) { CompletableFuture < String > future = new CompletableFuture < > ( ) ; actorSystem.scheduler ( ) .scheduleOnce ( Duration.create ( time , timeUnit ) , ( ) - > future.complete ( `` Waiting 5 seconds ... '' ) , exec ) ; return future ; } GET /message controllers.AsyncController.message"
"class ThreadUnsafeClass { long i ; long incrementAndGet ( ) { return ++i ; } } class Foo { final ThreadUnsafeClass c ; Foo ( ThreadUnsafeClass c ) { this.c = c ; } } public class JavaMM { public static void main ( String [ ] args ) { final ForkJoinTask < ThreadUnsafeClass > work = ForkJoinTask.adapt ( ( ) - > { ThreadUnsafeClass t = new ThreadUnsafeClass ( ) ; t.incrementAndGet ( ) ; return new FC ( t ) ; } ) ; assert ( work.fork ( ) .join ( ) .c.i == 1 ) ; } } Map < Long , Foo > results = Stream .of ( new ThreadUnsafeClass ( ) ) .parallel ( ) .map ( tuc - > { tuc.incrementAndGet ( ) ; return new Foo ( tuc ) ; } ) .collect ( Collectors.toConcurrentMap ( foo - > foo.c.i , Function.identity ( ) ; ) ) ; assert ( results.get ( 1 ) ! = null )"
public class Test { static int x = 11 ; private int y = 33 ; public void method1 ( int x ) { Test t = new Test ( ) ; this.x = 22 ; y = 44 ; System.out.println ( `` Test.x : `` + Test.x ) ; System.out.println ( `` t.x : `` + t.x ) ; System.out.println ( `` t.y : `` + t.y ) ; System.out.println ( `` y : `` + y ) ; } public static void main ( String args [ ] ) { Test t = new Test ( ) ; t.method1 ( 5 ) ; } } Test.x : 22t.x : 22t.y : 33y : 44 Test.x : 22t.x : 22t.y : 44 // As variable y is modified inside the function.y : 44
"public class C { public C ( A a , B b ) { this.a = a ; this.b = b ; } public String fooBar ( ) { return a.foo ( ) + b.bar ( ) ; } } public class CSpec { private A a = mock ( A.class ) ; private B b = mock ( B.class ) ; @ Test public itShouldReturnFooBar ( ) { when ( a.foo ( ) ) .thenReturn ( `` foo '' ) ; when ( b.bar ( ) ) .thenReturn ( `` bar '' ) ; C c = new C ( a , b ) ; assertThat ( c.fooBar ( ) .isEqualTo ( `` foobar '' ) ) ; } }"
"CompletableFuture.allOf ( futures ) .join ( ) Stream.of ( futures ) .forEach ( future - > { try { future.join ( ) } catch ( Throwable e ) { //dont throw , we want to join the rest } } ) Stream.of ( futures ) .forEach ( future - > { try { future.join ( ) } catch ( Throwable e ) { throw e ; //All other remaining .join ( ) wont run } } )"
"public class MainActivity extends Activity { MainActivity _activity ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; _activity = this ; // TODO : Find out if this is good practice ? setContentView ( R.layout.activity_main ) ; } public void onClickButton ( View v ) { Toast.makeText ( _activity , `` Five boxing wizards '' , Toast.LENGTH_LONG ) .show ( ) ; button2.setOnClickListener ( new View.OnClickListener ( ) { public void onClick ( View v ) { Toast.makeText ( _activity , `` asdf '' , Toast.LENGTH_LONG ) .show ( ) ; } } ) ; } }"
public class Amazed { public static void main ( String [ ] args ) { System.out.println ( B.M.W ) ; } } class B { public static class M { static String W = `` Black '' ; } static C M = new C ( ) ; } class C { String W = `` White '' ; }
String prop = `` java.version '' ; // retrieve a System property as a String String s = System.getProperty ( prop ) ; System.out.println ( s ) ; // now mess with it Field field = String.class.getDeclaredField ( `` value '' ) ; field.setAccessible ( true ) ; char [ ] value = ( char [ ] ) field.get ( s ) ; value [ 0 ] = ' x ' ; //turns out we 've changed not just the String we were //given but the underlying property too ! System.out.println ( System.getProperty ( prop ) ) ;
"public static int CompareAges ( Person p1 , Person p2 ) { Integer age1 = p1.getAge ( ) ; return age1.compareTo ( p2.getAge ( ) ) ; } public static int CompareAges ( Person p1 , Person p2 ) { return p1.getAge ( ) .compareTo ( p2.getAge ( ) ) ; } public static int CompareAges ( Person p1 , Person p2 ) { return ( ( Integer ) p1.getAge ( ) ) .compareTo ( p2.getAge ( ) ) ; }"
"JTextPane text ; text.setText ( `` somewords < img src=\ '' file : ///C : /filepath/fire.png\ '' text=\ '' [ fire1 ] \ '' title=\ '' [ fire2 ] \ '' alt=\ '' [ fire3 ] \ '' style=\ '' width:11px ; height:11px ; \ '' > otherwords '' ) ; // ( should ) allow copying of alt text in place of imagesclass CustomEditorKit extends HTMLEditorKit { Action [ ] modifiedactions ; CustomEditorKit ( ) { int whereat=-1 ; modifiedactions=super.getActions ( ) ; for ( int k=0 ; k < super.getActions ( ) .length ; k++ ) { if ( super.getActions ( ) [ k ] instanceof CopyAction ) //find where they keep the copyaction { whereat=k ; modifiedactions [ whereat ] =new CustomCopyAction ( ) ; //and replace it with a different one } } } @ Override public Action [ ] getActions ( ) { return modifiedactions ; //returns the modified version instead of defaultActions } public static class CustomCopyAction extends TextAction { public CustomCopyAction ( ) { super ( copyAction ) ; } @ Override public void actionPerformed ( ActionEvent e ) { //need to change this to substitute images with text , preferably their alt text . JTextComponent target = getTextComponent ( e ) ; //target.getText ( ) gives full body of html , unbounded by selection area if ( target ! = null ) { target.copy ( ) ; //a confusing and seemingly never ending labyrinth of classes and methods } } } }"
"public boolean authenticateServer ( ) { try { File privateKey = new File ( getClass ( ) .getResource ( `` /something-privatekey.p12 '' ) .toURI ( ) ) ; GoogleCredential cred = new GoogleCredential.Builder ( ) .setTransport ( new NetHttpTransport ( ) ) .setJsonFactory ( new JacksonFactory ( ) ) .setServiceAccountId ( `` something @ developer.gserviceaccount.com '' ) .setServiceAccountScopes ( `` https : //android.apis.google.com/c2dm '' ) .setServiceAccountPrivateKeyFromP12File ( privateKey ) .addRefreshListener ( this ) .build ( ) ; boolean success = cred.refreshToken ( ) ; this.credential = cred ; return success ; } catch ( Exception ex ) { //handle this } return false ; } private static String UTF8 = `` UTF-8 '' ; public void sendMessage ( String text , String registrationId ) { try { StringBuilder postDataBuilder = new StringBuilder ( ) ; postDataBuilder .append ( `` registration_id '' ) .append ( `` = '' ) .append ( registrationId ) ; postDataBuilder.append ( `` & '' ) .append ( `` collapse_key '' ) .append ( `` = '' ) .append ( `` 0 '' ) ; postDataBuilder.append ( `` & '' ) .append ( `` data.payload '' ) .append ( `` = '' ) .append ( URLEncoder.encode ( text , UTF8 ) ) ; byte [ ] postData = postDataBuilder.toString ( ) .getBytes ( UTF8 ) ; URL url = new URL ( `` https : //android.apis.google.com/c2dm/send '' ) ; HostnameVerifier hVerifier = new HostnameVerifier ( ) { public boolean verify ( String hostname , SSLSession session ) { return true ; } } ; HttpsURLConnection conn = ( HttpsURLConnection ) url.openConnection ( ) ; conn.setHostnameVerifier ( hVerifier ) ; conn.setDoOutput ( true ) ; conn.setUseCaches ( false ) ; conn.setRequestMethod ( `` POST '' ) ; conn.setRequestProperty ( `` Content-Type '' , `` application/x-www-form-urlencoded '' ) ; conn.setRequestProperty ( `` Content-Length '' , Integer.toString ( postData.length ) ) ; conn.setRequestProperty ( `` Authorization '' , `` Bearer `` + credential.getAccessToken ( ) ) ; OutputStream out = conn.getOutputStream ( ) ; out.write ( postData ) ; out.close ( ) ; int sw = conn.getResponseCode ( ) ; System.out.println ( `` '' + sw ) ; } catch ( IOException ex ) { //handle this } }"
"public class HelloWorld { public static void main ( String [ ] args ) { System.out.println ( `` Hello , World ! `` ) ; } } > javac HelloWorld.java > native-image -H : +ReportExceptionStackTraces HelloWorld [ helloworld:20420 ] classlist : 1,249.05 ms [ helloworld:20420 ] ( cap ) : 704.71 ms [ helloworld:20420 ] setup : 997.16 msError : Error compiling query code ( in C : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.cpp ) . Compiler command CL -IC : \GraalVM\include\win32 C : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.cpp /FeC : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.exe output included error : [ Microsoft ( R ) C/C++ Optimizing Compiler Version 19.16.27035 for x86 , Copyright ( C ) Microsoft Corporation . All rights reserved. , ] com.oracle.svm.core.util.UserError $ UserException : Error compiling query code ( in C : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.cpp ) . Compiler command CL -IC : \GraalVM\include\win32 C : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.cpp /FeC : \Users\User\AppData\Local\Temp\SVM-2348968769537330415\JNIHeaderDirectives.exe output included error : [ Microsoft ( R ) C/C++ Optimizing Compiler Version 19.16.27035 for x86 , Copyright ( C ) Microsoft Corporation . All rights reserved. , ] at com.oracle.svm.core.util.UserError.abort ( UserError.java:114 ) at com.oracle.svm.hosted.c.NativeLibraries.reportErrors ( NativeLibraries.java:218 ) at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports ( NativeImageGenerator.java:1518 ) at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries ( NativeImageGenerator.java:1006 ) at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage ( NativeImageGenerator.java:835 ) at com.oracle.svm.hosted.NativeImageGenerator.doRun ( NativeImageGenerator.java:528 ) at com.oracle.svm.hosted.NativeImageGenerator.lambda $ run $ 0 ( NativeImageGenerator.java:445 ) at java.base/java.util.concurrent.ForkJoinTask $ AdaptedRunnableAction.exec ( ForkJoinTask.java:1407 ) at java.base/java.util.concurrent.ForkJoinTask.doExec ( ForkJoinTask.java:290 ) at java.base/java.util.concurrent.ForkJoinPool $ WorkQueue.topLevelExec ( ForkJoinPool.java:1020 ) at java.base/java.util.concurrent.ForkJoinPool.scan ( ForkJoinPool.java:1656 ) at java.base/java.util.concurrent.ForkJoinPool.runWorker ( ForkJoinPool.java:1594 ) at java.base/java.util.concurrent.ForkJoinWorkerThread.run ( ForkJoinWorkerThread.java:177 ) Error : Image build request failed with exit status 1"
"package eu.myapp.test.views ; import android.media.MediaPlayer ; import android.view.View ; import android.view.ViewGroup ; import android.widget.MediaController ; import android.widget.VideoView ; import android.media.MediaPlayer.OnCompletionListener ; import android.media.MediaPlayer.OnErrorListener ; import android.media.MediaPlayer.OnInfoListener ; import com.facebook.react.uimanager.ThemedReactContext ; import java.util.ArrayList ; import java.util.List ; import eu.myapp.test.controllers.PlayerController ; public class PlayerView extends VideoView { private PlayerController mPlayerController ; public PlayerView ( ThemedReactContext context , PlayerController playerController ) { super ( context ) ; mPlayerController = playerController ; init ( ) ; } private void init ( ) { MediaController mediaController = new MediaController ( getContext ( ) ) ; mediaController.setAnchorView ( this ) ; setLayoutParams ( new ViewGroup.LayoutParams ( ViewGroup.LayoutParams.MATCH_PARENT , ViewGroup.LayoutParams.MATCH_PARENT ) ) ; super.setOnPreparedListener ( new MediaPlayer.OnPreparedListener ( ) { @ Override public void onPrepared ( MediaPlayer mp ) { mp.start ( ) ; } } ) ; super.setOnCompletionListener ( new OnCompletionListener ( ) { @ Override public void onCompletion ( MediaPlayer mediaPlayer ) { mediaPlayer.reset ( ) ; reset ( ) ; } } ) ; super.setOnErrorListener ( new OnErrorListener ( ) { @ Override public boolean onError ( MediaPlayer mp , int what , int extra ) { mp.reset ( ) ; reset ( ) ; return true ; } } ) ; super.setOnInfoListener ( new OnInfoListener ( ) { @ Override public boolean onInfo ( MediaPlayer mp , int what , int extra ) { // When video starts , make progressbar visible and spinner invisible if ( MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START == what ) { mPlayerController.setProgressBarVisibility ( View.VISIBLE ) ; mPlayerController.setPlaceholderVisibility ( View.GONE ) ; mPlayerController.setAdSpinnerVisibility ( View.GONE ) ; return true ; } return false ; } } ) ; mPlayerController.addPlayerView ( this ) ; } public void play ( ) { start ( ) ; } public void reset ( ) { mPlayerController.setProgressBarVisibility ( View.GONE ) ; mPlayerController.setPlaceholderVisibility ( View.VISIBLE ) ; mPlayerController.setAdSpinnerVisibility ( View.VISIBLE ) ; mPlayerController.onVideoComplete ( ) ; } }"
public class one { public < T extends Foo > Bar < Foo > function1 ( ) { } public Bar < Foo > function2 ( ) { } } public class two < F extends Foo > extends one { public Bar < F > function1 ( ) { } //Does n't throw an error public Bar < F > function2 ( ) { } //Throws an error }
"public interface Callback < P , R > { public R call ( P param ) ; } public interface Callable < V > { V call ( ) throws Exception ; } public interface Callable < V > { void call ( V value ) throws Exception ; }"
"Stream < Future < Integer > > stream = ... ; BinaryOperator < Integer > sum = ( i1 , i2 ) - > i1 + i2 ; stream.map ( future - > future.get ( ) ) .reduce ( sum ) ; // does not work , get needs to handle exceptions ! stream.map ( future - > { Integer i = null ; try { i = future.get ( ) ; } catch ( InterruptedException e ) { } catch ( ExecutionException e ) { } return i ; } ) .reduce ( sum ) ; stream.filter ( future - > { Integer i = null ; try { i = future.get ( ) ; } catch ( InterruptedException e ) { } catch ( ExecutionException e ) { } return i ! = null ; } ) .map ( future - > { Integer i = null ; try { i = future.get ( ) ; } catch ( InterruptedException e ) { } catch ( ExecutionException e ) { } return i ; } ) .reduce ( sum ) ;"
if ( bool1 ^ bool2 ^ bool3 ^ bool4 ) { // Do whatever }
"import java.util.regex.Matcher ; import java.util.regex.Pattern ; public class HelloWorld { private static final Pattern YANG_MODULE_RE = Pattern .compile ( `` ( [ a-zA-Z|_ ] ) ? ( \\w+|_|\\.|- ) + ( @ \\d { 4 } -\\d { 2 } -\\d { 2 } ) ? \\.yang '' ) ; public static void main ( String [ ] args ) { final Matcher matcher = YANG_MODULE_RE.matcher ( `` iso_schematron_skeleton_for_xslt1.xsl '' ) ; System.out.println ( Boolean.toString ( matcher.matches ( ) ) ) ; } } openjdk version `` 1.8.0_181 '' OpenJDK Runtime Environment ( build 1.8.0_181-b15 ) OpenJDK 64-Bit Server VM ( build 25.181-b15 , mixed mode )"
"public static List < String > findPrices ( String product ) { ExecutorService executor = Executors.newFixedThreadPool ( 10 ) ; List < Shop > shops = Arrays.asList ( new Shop ( ) , new Shop ( ) ) ; List < CompletableFuture < String > > priceFutures = shops.stream ( ) .map ( shop - > CompletableFuture.supplyAsync ( ( ) - > shop.getPrice ( product ) , executor ) ) .map ( future - > future.thenApply ( Quote : :parse ) ) .map ( future - > future.thenCompose ( quote - > CompletableFuture.supplyAsync ( ( ) - > Discount.applyDiscount ( quote ) , executor ) ) ) .collect ( toList ( ) ) ; return priceFutures.stream ( ) .map ( CompletableFuture : :join ) .collect ( toList ( ) ) ; } public < U > CompletableFuture < U > thenCompose ( Function < ? super T , ? extends CompletionStage < U > > fn ) { return uniComposeStage ( null , fn ) ; } public < U > CompletableFuture < U > thenComposeAsync ( Function < ? super T , ? extends CompletionStage < U > > fn ) { return uniComposeStage ( asyncPool , fn ) ; } public CompletableFuture < String > requestData ( Quote quote ) { Request request = blockingRequestForQuote ( quote ) ; return CompletableFuture.supplyAsync ( ( ) - > sendRequest ( request ) ) ; }"
"< U > Optional < U > flatMap ( Function < ? super T , Optional < U > > mapper ) Function < ? super T , Optional < ? extends U > > Function < ? super T , ? extends Optional < ? extends U > >"
"randomBytes ( Base64 ) : wqzowTahVBaxuxcN8vKAEUBEo0wOfcg4e6u4M9tPDFk= private String salt = `` 1234 '' ; private static final String KEY_ALGORITHM = `` AES '' ; private Key generateKey ( byte [ ] randomBytes ) throws Exception { var randomPassword = new String ( randomBytes ) ; KeySpec keySpec = new PBEKeySpec ( randomPassword.toCharArray ( ) , salt.getBytes ( ) , 10000 , 256 ) ; SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance ( `` PBKDF2WithHmacSHA256 '' ) ; var kdf2SecurePassword = secretKeyFactory.generateSecret ( keySpec ) .getEncoded ( ) ; return new SecretKeySpec ( kdf2SecurePassword , KEY_ALGORITHM ) ; } private static importKey ( randomBytes : ArrayBuffer ) { return crypto.subtle.importKey ( 'raw ' , randomBytes , { name : 'PBKDF2 ' , length : 256 } , true , [ 'deriveKey ' ] ) ; } private generateAESKey ( baseKey , salt ) { const encSalt = new TextEncoder ( ) .encode ( salt ) ; const algorithm = { name : 'PBKDF2 ' , hash : 'SHA-256 ' , iterations : 10000 , salt : encSalt } ; return crypto.subtle.deriveKey ( algorithm , baseKey , { name : 'AES-GCM ' , length : 256 } , true , [ 'encrypt ' , 'decrypt ' ] ) ; } Java Key : hrG2Hw/bec9JoI+EcemfUxR/5lGw718kYOcCWRRbulk=typescript Key : EGPcTUQUmYpNHoCDuD7rkIVaHkPSqEZYan4HnWfhFSc= USERNAME @ HOSTNAME : ~ $ echo -n `` wqzowTahVBaxuxcN8vKAEUBEo0wOfcg4e6u4M9tPDFk= '' | base64 -d | nettle-pbkdf2 -i 10000 -l 32 -- raw `` 1234 '' | base64EGPcTUQUmYpNHoCDuD7rkIVaHkPSqEZYan4HnWfhFSc="
"buildscript { repositories { mavenCentral ( ) } dependencies { classpath 'se.transmode.gradle : gradle-docker:1.2 ' } } plugins { id 'com.github.johnrengelman.shadow ' version ' 1.2.3 ' } apply plugin : 'docker'jar { manifest { attributes 'Main-Class ' : 'com.myapp.Main ' } } task buildDocker ( type : Docker , dependsOn : shadowJar ) { push = false applicationName = jar.baseName tagVersion = 'latest ' dockerfile = file ( 'src/main/docker/Dockerfile ' ) copy { from shadowJar into stageDir } } task buildDockerPlayground ( type : Docker , dependsOn : shadowJar ) { main = 'com.myapp.Playground ' push = false applicationName = jar.baseName tagVersion = 'latest ' dockerfile = file ( 'src/main/docker/Dockerfile ' ) copy { from shadowJar into stageDir } }"
"public ModelObject < ? > getModelObject ( final Object target ) { /* ... snip ... */ final ModelDescriptor modelDescriptor = getModelDescriptor ( target.getClass ( ) , true ) ; return modelDescriptor.createAdapter ( target ) ; } final List < Object > objects = entities .stream ( ) .map ( o - > o instanceof HibernateProxy ? ( Entity ) ( ( HibernateProxy ) o ) .getHibernateLazyInitializer ( ) .getImplementation ( ) : o ) .collect ( Collectors.toList ( ) ) ; final ModelEMFConverter converter = new ModelEMFConverter ( ) ; final Collection < EObject > eObjects = converter.convert ( objects ) ;"
public class MyRunnable implements Runnable { public void run ( ) { X x = new X ( ) ; while ( true ) { } } } Thread t = new Thread ( new MyRunnable ( ) ) ; t.start ( ) ;
"1 < - > 6 2 < - > 73 < - > 84 < - > 92 < - > 63 < - > 5 1-6-2-73-8-54-9 private static int findGroups ( final List < List < Integer > > inputs ) { if ( inputs == null || inputs.isEmpty ( ) ) { return 0 ; } int count = Integer.MAX_VALUE ; Map < Integer , List < Integer > > holder = new HashMap < > ( ) ; for ( List < Integer > input : inputs ) { // storing it in bidirectional way in the map List < Integer > l = holder.containsKey ( input.get ( 0 ) ) ? holder.get ( input.get ( 0 ) ) : new ArrayList < Integer > ( ) ; l.add ( input.get ( 1 ) ) ; holder.put ( input.get ( 0 ) , l ) ; List < Integer > l1 = holder.containsKey ( input.get ( 1 ) ) ? holder.get ( input.get ( 1 ) ) : new ArrayList < Integer > ( ) ; l1.add ( input.get ( 0 ) ) ; holder.put ( input.get ( 1 ) , l1 ) ; } System.out.println ( holder ) ; // use holder map to get the smaller group here ? return count ; }"
"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Æ Ø Å @ AnalyzerDef ( name = `` myOwnAnalyzer '' , tokenizer = @ TokenizerDef ( factory = KeywordTokenizerFactory.class ) , filters = { @ TokenFilterDef ( factory = ASCIIFoldingFilterFactory.class ) , @ TokenFilterDef ( factory = LowerCaseFilterFactory.class ) , @ TokenFilterDef ( factory = PatternReplaceFilterFactory.class , params = { @ Parameter ( name = `` pattern '' , value = `` ( '- & \\. , \\ ( \\ ) ) '' ) , @ Parameter ( name = `` replacement '' , value = `` `` ) , @ Parameter ( name = `` replace '' , value = `` all '' ) } ) , @ TokenFilterDef ( factory = PatternReplaceFilterFactory.class , params = { @ Parameter ( name = `` pattern '' , value = `` ( [ ^0-9\\p { L } ] ) '' ) , @ Parameter ( name = `` replacement '' , value = `` '' ) , @ Parameter ( name = `` replace '' , value = `` all '' ) } ) , @ TokenFilterDef ( factory = TrimFilterFactory.class ) } ) public class KikaPaya implements Serializable { @ Fields ( { @ Field ( index = Index.YES , store = Store.YES ) , @ Field ( name = `` KikaPayaName_for_sort '' , index = Index.YES , analyzer = @ Analyzer ( definition = `` myOwnAnalyzer '' ) ) } ) @ Column ( name = `` NAME '' , length = 100 ) private String name ; FullTextEntityManager ftem = Search.getFullTextEntityManager ( factory.createEntityManager ( ) ) ; QueryBuilder qb = ftem.getSearchFactory ( ) .buildQueryBuilder ( ) .forEntity ( KikaPaya.class ) .get ( ) ; org.apache.lucene.search.Query query = qb.all ( ) .getQuery ( ) ; FullTextQuery fullTextQuery = ftem.createFullTextQuery ( query , KikaPaya.class ) ; fullTextQuery.setSort ( new Sort ( new SortField ( `` KikaPayaName_for_sort '' , SortField.STRING , true ) ) ) ; fullTextQuery.setFirstResult ( 0 ) .setMaxResults ( 150 ) ; int size = fullTextQuery.getResultSize ( ) ; List < KikaPaya > result = fullTextQuery.getResultList ( ) ; for ( KikaPayauser : result ) { logger.info ( `` KikaPaya Name : '' + user.getName ( ) ) ; } < hibernate.version > 4.2.8.Final < /hibernate.version > < hibernate.search.version > 4.3.0.Final < /hibernate.search.version > < dependency > < groupId > org.hibernate < /groupId > < artifactId > hibernate-entitymanager < /artifactId > < version > 4.2.8.Final < /version > < /dependency > < dependency > < groupId > org.apache.lucene < /groupId > < artifactId > lucene-core < /artifactId > < version > 3.6.2 < /version > < /dependency > < dependency > < groupId > org.apache.lucene < /groupId > < artifactId > lucene-analyzers < /artifactId > < version > 3.6.2 < /version > < /dependency >"
"@ Overridepublic void log ( String text ) { Date date = new Date ( ) ; DateFormat sdf = new SimpleDateFormat ( `` yyyyMMdd '' ) ; DateFormat sdf1 = new SimpleDateFormat ( `` HH : mm : ss '' ) ; String logDateString = sdf.format ( date ) ; //System.out.println ( `` logDateString : `` + logDateString ) ; BufferedWriter bwToUse = null ; if ( logDateString.compareTo ( m_firstOpenDate ) == 0 ) { // use old buffer writer bwToUse = this.m_bw ; } else { // generate new buffer writer // update m_firstOpenDate m_firstOpenDate = logDateString ; try { // close previous day log this.m_bw.close ( ) ; this.m_fw = new FileWriter ( m_path + logDateString + `` .log '' , true ) ; this.m_bw = new BufferedWriter ( this.m_fw ) ; bwToUse = this.m_bw ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } try { bwToUse.write ( sdf1.format ( date ) + `` : `` + text + `` \n '' ) ; bwToUse.flush ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } }"
AtomicInteger i = new AtomicInteger ( 0 ) ; AtomicInteger count = new AtomicInteger ( 0 ) ; IntStream.generate ( ( ) - > i.incrementAndGet ( ) ) .parallel ( ) .peek ( x - > count.incrementAndGet ( ) ) .limit ( 5 ) .forEach ( System.out : :println ) ; System.out.println ( `` count = `` + count ) ;
miss | shannon sperlingmr | john smithprof | kim taylorprof.dr | kim taylor miss | shannon sperlingmr | john smithprof.dr | kim taylor void gluetitles ( List title ) { for ( int i=0 ; i < title.size ( ) ; i++ ) { String names = ( String ) title.get ( i ) ; String [ ] titlename=names.split ( `` \\| '' ) ; \\split the list with delimiter and extracts titles and names String tle=titlename [ 0 ] ; String name=titlename [ 1 ] ; } }
"Map < String , Map < LocalDate , Integer > > map = stream.collect ( Collectors.groupingBy ( x - > x.getProject ( ) , Collectors.groupingBy ( x - > x.getDate ( ) , Collectors.summingInt ( t - > t.getDuration ( ) .toSecondOfDay ( ) ) ) ) ) ;"
class Test { private String firstName ; public void setName ( String fname ) { firstName = fname ; } public void displayName ( ) { System.out.println ( `` Your name is `` + firstName ) ; } }
"/** * Genera un tono puro . * @ param bufferSize Tamaño del buffer . * @ param fs Frecuencia de muestreo . * @ param f0 Frecuencia central . * @ return El tono puro . */public static double [ ] generateTone ( int bufferSize , int fs , int f0 ) { double [ ] tone = new double [ bufferSize ] ; // Tono double angle ; // Ángulo del tono // Sólo hace falta recorrer la mitad del array , ya que hay simetría : for ( int i = 0 ; i < tone.length / 2 ; i++ ) { angle = 2 * Math.PI * f0 * i / fs ; // Calculamos la variación del ángulo // Tenemos que conseguir que la señal sea menos abrupta para reducir al máximo los armónicos ) : tone [ 2 * i + 1 ] = tone [ 2 * i ] = Math.sin ( angle ) ; // Aprovechamos la simetría } return tone ; } // getSinus ( )"
public synchronized void func ( ) { ... } public void func ( ) { synchronized ( this ) { ... . } } class AA { private AA ( ) { } public static synchronized AA getInstance ( ) { static AA obj = new AA ( ) ; return obj ; } }
class Class1 { private static Var var ; static { var = getSingletonVar ( ) ; } } class Class2 { private static var = getSingletonVar ; }
import java.util . * ; class Foo < T > { public int baz ( List < String > stringlist ) { return 1 ; } public int baz ( ArrayList < Object > objectlist ) { return 2 ; } public static void main ( String [ ] args ) { Foo < String > foo = new Foo < String > ( ) ; // ( A ) //Foo foo = new Foo ( ) ; // ( B ) System.out.println ( foo.baz ( new ArrayList < String > ( ) ) ) ; } }
class Foo { public void doIt ( String ... strs ) { System.out.println ( `` this is varargs '' ) ; } private void doIt ( String str ) { System.out.println ( `` this is single '' ) ; } } class Bar { public static void main ( String [ ] args ) { new Foo ( ) .doIt ( `` '' ) ; } } VarArgsError.java:14 : doIt ( java.lang.String ) has private access in Foo new Foo ( ) .doIt ( `` '' ) ; ^1 error
"import java.util.HashMap ; import java.util.Map ; public enum Derp { FOO { { mMap.put ( `` bar '' , 1 ) ; } } ; // can not be private protected final Map < String , Integer > mMap = new HashMap < > ( ) ; }"
protected static final String VALIDATION_ERROR = `` validationError '' ; const VALIDATION_ERROR = `` validationError ''
"public void onMapReady ( @ NonNull final MapboxMap mapboxMap ) { this.mapboxMap = mapboxMap ; mapboxMap.setStyle ( Style.MAPBOX_STREETS , new Style.OnStyleLoaded ( ) { @ Override public void onStyleLoaded ( @ NonNull Style style ) { enableLocationComponent ( style ) ; GeoJsonSource source = null ; try { source = new GeoJsonSource ( `` geojson-source '' , new URI ( `` asset : //markerdata.geojson '' ) ) ; } catch ( URISyntaxException e ) { e.printStackTrace ( ) ; } style.addSource ( source ) ; Bitmap icon = BitmapFactory.decodeResource ( getResources ( ) , R.drawable.marker ) ; style.addImage ( `` marker '' , icon ) ; SymbolLayer symbolLayer = new SymbolLayer ( `` layer-id '' , `` source-id '' ) ; // ? symbolLayer.setProperties ( PropertyFactory.iconImage ( `` marker '' ) ) ; style.addLayer ( symbolLayer ) ; } } ) ; }"
"val singleResult1 = Single.fromCallable { database.get ( ... . ) } .io ( ) val singleResult2 = Single.fromCallable { database.update ( ... . ) } .io ( ) Single.zip ( singleResult1 , singleResult2 ) { result1 : Result1 , result2 : Result2 - > ... . } .flatMap { //other RX calls } .subscribeOn ( Schedulers.io ( ) ) .observeOn ( Schedulers.computation ( ) ) .blockingGet ( ) fun < T > waitAll ( tasks : List < Callable < T > > , threadCount : Int = -1 ) : List < T > { val threads = if ( threadCount == -1 ) tasks.size else threadCount val executor = Executors.newFixedThreadPool ( threads ) val results = executor.invokeAll ( tasks ) .map { it.get ( ) } executor.shutdown ( ) return results } waitAll ( listOf ( callable1 , callable2 ) ) threads.forEach { it.start ( ) } threads.forEach { it.join ( ) } listOf ( callable1 , callable2 ) .parallelStream ( ) .map { it.call ( ) } .collect ( Collectors.toList ( ) )"
"interface ConvertibleTo < T > { T convert ( ) ; } class ReprChange < T extends ConvertibleTo < S > , S extends ConvertibleTo < T > > { T t ; void set ( S s ) { t = s.convert ( ) ; } S get ( ) { return t.convert ( ) ; } }"
"typedef enum { DOG , CAT , MOUSE } ANIMALS ; int [ 3 ] age ; ... age [ DOG ] = 4 ; age [ CAT ] = 3 ; age [ MOUSE ] = 10 ;"
indexOfNext = new Random ( ) .nextInt ( 4 ) ; //randomize 0 to 3
"import java.lang.reflect.InvocationTargetException ; import javax.swing.ImageIcon ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.SwingUtilities ; public class Mouse { public static void main ( String [ ] args ) { try { SwingUtilities.invokeAndWait ( new Runnable ( ) { public void run ( ) { new Mouse ( ) ; } } ) ; } catch ( InvocationTargetException e ) { e.printStackTrace ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } public Mouse ( ) { JFrame frame = new JFrame ( ) ; JLabel label = new JLabel ( new ImageIcon ( getClass ( ) .getResource ( `` waiting.gif '' ) ) ) ; frame.setSize ( 500 , 500 ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.setVisible ( true ) ; frame.add ( label ) ; } } import java.lang.reflect.InvocationTargetException ; import java.net . * ; import javax.swing . * ; public class Mouse { public static void main ( String [ ] args ) { try { SwingUtilities.invokeAndWait ( new Runnable ( ) { public void run ( ) { try { new Mouse ( ) ; } catch ( MalformedURLException ex ) { ex.printStackTrace ( ) ; } } } ) ; } catch ( InvocationTargetException e ) { e.printStackTrace ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } public Mouse ( ) throws MalformedURLException { JFrame frame = new JFrame ( ) ; JLabel label = new JLabel ( new ImageIcon ( new URL ( `` https : //i.stack.imgur.com/HXCUV.gif '' ) ) ) ; frame.setSize ( 500 , 500 ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.setVisible ( true ) ; frame.add ( label ) ; } }"
"String s = str.replaceAll ( `` regexp '' , `` $ 1 '' ) ; String s = str.replaceAll ( `` regexp '' , `` $ 1 '' .toUpperCase ( ) ) ; String s = str.replaceAll ( `` regexp '' , method ( `` $ 1 '' ) ) ; // method declared as method ( ) private static String method ( String s ) { System.out.println ( s ) ; // prints `` $ 1 '' return s ; } String s = `` abc '' ; System.out.println ( s.replaceAll ( `` ( a ) '' , `` $ 1 '' ) ) ; // should print `` Abc ''"
interface PublicCloneable { Object clone ( ) ; } interface HasPosition { // does n't matter } @ SuppressWarnings ( `` unchecked '' ) < E extends PublicCloneable & HasPosition > E cloneAndIncrementPosition ( E elem ) { final E clone = ( E ) elem.clone ( ) ; // rest omitted } $ javac xx.javaxx.java:13 : error : clone ( ) in Object can not implement clone ( ) in PublicCloneable < E extends PublicCloneable & HasPosition > E cloneAndIncrementPosition ( E elem ) { ^ attempting to assign weaker access privileges ; was publicxx.java:14 : error : clone ( ) has protected access in Object final E clone = ( E ) elem.clone ( ) ; ^2 errors
"< RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' android : id= '' @ +id/rl_root_splash_activity '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' @ color/splash_screen_color_1 '' android : paddingBottom= '' 100dp '' android : paddingEnd= '' 16dp '' android : paddingLeft= '' 16dp '' android : paddingRight= '' 16dp '' android : paddingStart= '' 16dp '' > < com.github.jorgecastillo.FillableLoader android : id= '' @ +id/fillableLoader '' android : layout_width= '' 200dp '' android : layout_height= '' 100dp '' app : fl_clippingTransform= '' waves '' app : fl_fillColor= '' # 1c9ade '' app : fl_fillDuration= '' 5000 '' app : fl_originalHeight= '' 970 '' app : fl_originalWidth= '' 970 '' app : fl_strokeColor= '' # 1c9ade '' app : fl_strokeDrawingDuration= '' 2000 '' app : fl_strokeWidth= '' 16dp '' / > < /RelativeLayout > public class SplashActivity extends AppCompatActivity { RelativeLayout rlRoot ; FillableLoader fillableLoader ; @ Override protected void onCreate ( @ Nullable Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; rlRoot = ( RelativeLayout ) findViewById ( R.id.rl_root_splash_activity ) ; FillableLoaderBuilder loaderBuilder = new FillableLoaderBuilder ( ) ; fillableLoader = loaderBuilder .parentView ( rlRoot ) .svgPath ( Const.Paths.INDOMINUS_REX ) .layoutParams ( new RelativeLayout.LayoutParams ( RelativeLayout.LayoutParams.MATCH_PARENT , RelativeLayout.LayoutParams.MATCH_PARENT ) ) .originalDimensions ( 970 , 970 ) .strokeColor ( Color.parseColor ( `` # 1c9ade '' ) ) .fillColor ( Color.parseColor ( `` # 1c9ade '' ) ) .strokeDrawingDuration ( 2000 ) .clippingTransform ( new WavesClippingTransform ( ) ) .fillDuration ( 10000 ) .build ( ) ; } } java.lang.NullPointerException : Attempt to invoke virtual method 'int java.lang.String.length ( ) ' on a null object reference at com.github.jorgecastillo.svg.SvgPathParser.parsePath ( SvgPathParser.java:52 ) at com.github.jorgecastillo.FillableLoader.buildPathData ( FillableLoader.java:374 ) at com.github.jorgecastillo.FillableLoader.onSizeChanged ( FillableLoader.java:224 ) at android.view.View.sizeChange ( View.java:16748 ) at android.view.View.setFrame ( View.java:16710 ) at android.view.View.layout ( View.java:16627 ) at android.widget.RelativeLayout.onLayout ( RelativeLayout.java:1079 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.widget.FrameLayout.layoutChildren ( FrameLayout.java:336 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:273 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1743 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1586 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1495 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.widget.FrameLayout.layoutChildren ( FrameLayout.java:336 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:273 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1743 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1586 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1495 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.widget.FrameLayout.layoutChildren ( FrameLayout.java:336 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:273 ) at com.android.internal.policy.PhoneWindow $ DecorView.onLayout ( PhoneWindow.java:2678 ) at android.view.View.layout ( View.java:16630 ) at android.view.ViewGroup.layout ( ViewGroup.java:5437 ) at android.view.ViewRootImpl.performLayout ( ViewRootImpl.java:2171 ) at android.view.ViewRootImpl.performTraversals ( ViewRootImpl.java:1931 ) at android.view.ViewRootImpl.doTraversal ( ViewRootImpl.java:1107 ) at android.view.ViewRootImpl $ TraversalRunnable.run ( ViewRootImpl.java:6013 ) at android.view.Choreographer $ CallbackRecord.run ( Choreographer.java:858 ) at android.view.Choreographer.doCallbacks ( Choreographer.java:670 ) at android.view.Choreographer.doFrame ( Choreographer.java:606 ) at android.view.Choreographer $ FrameDisplayEventReceiver.run ( Choreographer.java:844 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:148 ) at android.app.ActivityThread.main ( ActivityThread.java:5417 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:726 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:616 )"
class A { public void v ( int ... vals ) { System.out.println ( `` Super '' ) ; } } class B extends A { @ Override public void v ( int [ ] vals ) { System.out.println ( `` Sub '' ) ; } } class B { public void v ( int [ ] vals ) { System.out.println ( `` Not extending A '' ) ; } }
"String result = `` B123 '' .replaceAll ( `` B* '' , '' e '' ) ; System.out.println ( result ) ;"
"@ MappedSuperclass public abstract class BaseEntity < T extends Serializable > implements Serializable { protected T id ; @ Id public T getId ( ) { return id ; } protected void setId ( T id ) { this.id = id ; } } @ Table ( name = `` campaign '' ) @ AttributeOverride ( name = `` id '' , column = @ Column ( name = `` campaign_id '' ) ) public class Campaign extends BaseEntity < String > { // attributes , getters and setters } @ Embeddablepublic class CampaignBroadcastPK implements Serializable { @ ManyToOne @ JoinColumn ( name = `` campaign_id '' , insertable = false , updatable = false ) private Campaign campaign ; @ Column ( name = `` broadcast_date '' ) private LocalDate broadcastDate ; // getters and setters } @ Entity @ Table ( name = `` campaign_broadcast '' ) public class CampaignBroadcast implements Serializable { @ EmbeddedId private CampaignBroadcastPK id ; // attributes , getters and setters } @ Embeddablepublic class CampaignBroadcastProcessPK implements Serializable { @ ManyToOne @ JoinColumns ( { @ JoinColumn ( name = `` campaign_id '' , insertable = false , updatable = false ) , @ JoinColumn ( name = `` broadcast_date '' , insertable = false , updatable = false ) } ) private CampaignBroadcast broadcast ; @ Column ( name = `` process_date ) private LocalDate processDate ; // getters and setters } @ Entity @ Table ( name = `` campaign_broadcast_process '' ) public class CampaignBroadcastProcess implements Serializable { @ EmbeddedId private CampaignBroadcastProcessPK id ; // attributes , getters and setters }"
class Foo { } class Bar extends Foo { } public class Main { public static void main ( String [ ] args ) throws Exception { fn ( null ) ; } static void fn ( Foo f ) { System.out.println ( f instanceof Foo ? `` Foo '' : `` Bar '' ) ; } }
"< R > R collect ( Supplier < R > supplier , BiConsumer < R , ? super T > accumulator , BiConsumer < R , R > combiner ) ; < R , A > R collect ( Collector < ? super T , A , R > collector ) ;"
ProList 1 RecordNumber 1 ProEffectiveDate NULLProList 2 RecordNumber 2 ProEffectiveDate 2019-03-01ProList 3 RecordNumber 3 ProEffectiveDate 2019-03-01 Predicate < ProList > filteredRow = it- > it.getProEffectiveDate ( ) ! =null & & it.getProEffectiveDate ( ) .equals ( passedInDate ) ; final ProList minFilteredRow = ProList ( ) .stream ( ) .filter ( filteredRow ) .min ( Comparator.comparing ( ProList : :getRecordNumber ) ) .orElse ( null ) ;
"public static void f ( int ... x ) { for ( int a : x ) { System.out.println ( a ) ; } } f ( 1 , 2 , 3 ) ; f ( new int [ ] { 1 , 2 , 3 } ) ; Arrays.asList ( 1 , 2 , 3 ) // ( a ) produces a three-element Integer list Arrays.asList ( new int [ ] { 1 , 2 , 3 } ) // ( b ) produces a one-element list of Integer arrays"
"List < String > res = LongStream .rangeClosed ( 1 , 1_000_000 ) .parallel ( ) .mapToObj ( n - > `` '' + n ) .collect ( ArrayList : :new , ArrayList : :add , ( m1 , m2 ) - > m1.addAll ( m2 ) ) ;"
class MyClass { void myMethod ( byte b ) { System.out.print ( `` myMethod1 '' ) ; } public static void main ( String [ ] args ) { MyClass me = new MyClass ( ) ; me.myMethod ( 12 ) ; } } class MyClass { byte myMethod ( ) { return 12 ; } public static void main ( String [ ] args ) { MyClass me = new MyClass ( ) ; me.myMethod ( ) ; } }
< IdAction > supplied < /IdAction > < RegId > true < /RegId > < DeRegId > false < /DeRegId > < SaveMessage > false < /SaveMessage > < ServiceName > abcRequest < /ServiceName > < timeToPerform > 3600 < /timeToPerform > < timeToReceipt/ > < SendToBES > true < /SendToBES > < BESQueueName > com.abc.gateway.JMSQueue.forAddRequest < /BESQueueName > < BESTransform/ > < BESJMSProperties > < property > < propName > stateCode < /propName > < propValue > OK < /propValue > < /property > < property > < propName > stateResponse < /propName > < propValue > OK < /propValue > < /property > < /BESJMSProperties > < IdAction > supplied < /IdAction > < RegId > true < /RegId > < DeRegId > false < /DeRegId > < timeToPerform > 3600 < /timeToPerform > < timeToReceipt/ > < SendToBES > true < /SendToBES > < BESQueueName > com.abc.gateway.JMSQueue.forAddRequest < /BESQueueName > < BESTransform/ > < BESJMSProperties > < property > < propName > stateCode < /propName > < propValue > OK < /propValue > < /property > < property > < propName > stateResponse < /propName > < propValue > OK < /propValue > < /property > < /BESJMSProperties >
class A { public void print ( ) { System.out.println ( `` Inside Parent '' ) ; } } class B extends A { public void print ( ) { System.out.println ( `` Inside Child '' ) ; } } class test4 { public static void main ( String args [ ] ) { B b1=new B ( ) ; b1.print ( ) ; A a1=new B ( ) ; a1.print ( ) ; } } Inside ChildInside Child class A { public void print ( ) { System.Console.WriteLine ( `` Inside Parent '' ) ; } } class B : A { public void print ( ) { System.Console.WriteLine ( `` Inside Child '' ) ; } } class Program { public static void Main ( string [ ] args ) { B b1=new B ( ) ; b1.print ( ) ; A a1=new B ( ) ; a1.print ( ) ; System.Console.Read ( ) ; } } Inside ChildInside Parent
"package table.columnresize ; import javax.swing.JFrame ; import javax.swing.JScrollPane ; import javax.swing.JTable ; import javax.swing.table.DefaultTableModel ; import org.jdesktop.swingx.JXTable ; /** * Demo of differing behaviour of JXTable and JTable . JXTable loses input in a TableCell where JTable persists * it . * < p > * < table border=1 > * < tr > * < th > < /th > * < th > JXTable < /th > * < th > JTable < /th > * < /tr > * < tr > * < td > Click on TableColumnHeader < /td > * < td > saved < /td > * < td > saved < /td > * < /tr > * < tr > * < td > Resizing with Divider of TableColumnHeader < /td > * < td > lost < /td > * < td > saved < /td > * < /tr > * < tr > * < td > Changing the width of JFrame < /td > * < td > lost < /td > * < td > saved < /td > * < /tr > * * < /table > * < /p > * * @ author bobndrew 2015-01-29 */public class JXTableAndJTableEditLossDemo { private static class DataModel extends DefaultTableModel { public DataModel ( Object [ ] [ ] data , Object [ ] columnNames ) { super ( data , columnNames ) ; } } private static void createAndShowUI ( ) { Object [ ] [ ] DATA = { { `` One '' , 1 } , { `` Two '' , 2 } , { `` Three '' , 3 } , { `` Four '' , 4 } , { `` Five '' , 5 } } ; String [ ] COLUMNS = { `` A '' , `` B '' } ; DataModel dataModel = new DataModel ( DATA , COLUMNS ) ; JFrame frame1 = new JFrame ( `` JXTable '' ) ; JXTable jXTable = new JXTable ( dataModel ) ; //does not change anything : jXTable.setTerminateEditOnFocusLost ( true ) ; System.out.println ( jXTable.isTerminateEditOnFocusLost ( ) ) ; frame1.add ( new JScrollPane ( jXTable ) ) ; frame1.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame1.pack ( ) ; frame1.setVisible ( true ) ; JFrame frame2 = new JFrame ( `` JTable '' ) ; JTable jTable = new JTable ( dataModel ) ; //does not change anything : jTable.putClientProperty ( `` terminateEditOnFocusLost '' , Boolean.FALSE ) ; System.out.println ( jTable.getClientProperty ( `` terminateEditOnFocusLost '' ) ) ; frame2.add ( new JScrollPane ( jTable ) ) ; frame2.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame2.pack ( ) ; frame2.setLocation ( ( int ) frame1.getLocation ( ) .getX ( ) + frame1.getWidth ( ) + 100 , ( int ) frame1 .getLocation ( ) .getY ( ) ) ; frame2.setVisible ( true ) ; } public static void main ( String [ ] args ) { java.awt.EventQueue.invokeLater ( new Runnable ( ) { @ Override public void run ( ) { createAndShowUI ( ) ; } } ) ; } }"
"List < String > list = Arrays.asList ( `` 1 '' , `` 2 '' , `` 3 '' ) ; String resultParallel = list.parallelStream ( ) .collect ( StringBuilder : :new , ( response , element ) - > response.append ( `` `` ) .append ( element ) , ( response1 , response2 ) - > response1.append ( `` , '' ) .append ( response2.toString ( ) ) ) .toString ( ) ; System.out.println ( `` ResultParallel : `` + resultParallel ) ; String result = list.stream ( ) .collect ( StringBuilder : :new , ( response , element ) - > response.append ( `` `` ) .append ( element ) , ( response1 , response2 ) - > response1.append ( `` , '' ) .append ( response2.toString ( ) ) ) .toString ( ) ; System.out.println ( `` Result : `` + result ) ;"
"@ Override protected void onPostExecute ( Boolean result ) { try { SQLiteHelper dbHelper = new SQLiteHelper ( getActivity ( ) ) ; pds = new SomeDataSource ( dbHelper.db ) ; ArrayList < Raids > some = pds.getAllRaids ( ) ; SomeAdapter listViewAdapter = new SomeAdapter ( getActivity ( ) , some ) ; getListView ( ) .setAdapter ( listViewAdapter ) ; SharedPreferences somename = context.getSharedPreferences ( `` SomeName '' , Context.MODE_PRIVATE ) ; Boolean UserOrder = somename.getBoolean ( `` UserOrder '' , false ) ; if ( UserOrder ) { } } catch ( SQLiteException | NullPointerException s ) { Log.d ( `` SomeName '' , `` SomeFrag : '' , s ) ; } }"
"Point2D.Double pointonmap = null ; Point2D.Double latlon = null ; MolleweideProjection molproj=new MolleweideProjection ( ) ; pointonmap = new Point2D.Double ( 1400,1000 ) ; latlon=molproj.inverseTransform ( pointonmap , new Point2D.Double ( ) ) ; System.out.println ( `` latlon : `` + latlon.getX ( ) + `` , `` + latlon.getY ( ) ) ;"
"public static void swap ( List < ? > list , int i , int j ) public static < T > void swap ( List < T > list , int i , int j ) private static < T > void swapHelper ( List < T > list , int i , int j ) { list.set ( i , list.set ( j , list.get ( i ) ) ) ; } public static void swap ( List < ? > list , int i , int j ) { swapHelper ( list , i , j ) ; } public static void swap ( List < ? > list , int i , int j ) { final List l = list ; l.set ( i , l.set ( j , l.get ( i ) ) ) ; }"
"trait Collection [ A ] { def reduceLeft [ B > : A ] ( f : ( B , A ) = > B ) : B } interface Collection < A > { < B super A > B reduceLeft ( BiFunction < ? super B , ? super A , ? extends B > mapper ) } public < R extends E > R reduceLeft ( BiFunction < ? super R , ? super E , ? extends R > mapper ) { if ( this.isEmpty ( ) ) { return null ; } Iterator < E > iterator = this.iterator ( ) ; R first = iterator.next ( ) ; // does n't work , but would if R was a super-type of E ( R super E ) while ( iterator.hasNext ( ) ) { mapper.apply ( first , iterator.next ( ) ) ; } return first ; } public E reduceLeft ( BiFunction < ? super E , ? super E , ? extends E > mapper ) { if ( this.isEmpty ( ) ) { return null ; } Iterator < E > iterator = this.iterator ( ) ; E first = iterator.next ( ) ; while ( iterator.hasNext ( ) ) { first = mapper.apply ( first , iterator.next ( ) ) ; } return first ; }"
short s = 1 ; s += s ; short s = 1 ; s = s + s ; // Can not convert from int to short
"interface A { void s ( ) ; } public static void main ( String [ ] args ) { A a = ( ) - > 5 ; // DOES NOT compile A b = ( ) - > new Integer ( 5 ) ; // does compile A c = ( ) - > Stream.of ( 1 , 2 , 3 ) ; // does compile }"
at __null__.formatElapsedTime ( MainActivity.java ) at __null__.access $ 102 ( MainActivity.java ) at __null__.access $ 200 ( MainActivity.java ) at __null__.access $ 500 ( MainActivity.java ) at ru.yandex.subbota_job.multiplicationtable.MainActivity.onEnterPressed ( MainActivity.java ) at ru.yandex.subbota_job.multiplicationtable.KeyboardFragment.onClick ( KeyboardFragment.java ) at android.view.View.performClick ( View.java:4463 ) at android.view.View $ PerformClick.run ( View.java:18789 ) at android.os.Handler.handleCallback ( Handler.java:808 ) at android.os.Handler.dispatchMessage ( Handler.java:103 ) at android.os.Looper.loop ( Looper.java:193 ) at android.app.ActivityThread.main ( ActivityThread.java:5299 ) at java.lang.reflect.Method.invokeNative ( Method.java ) at java.lang.reflect.Method.invoke ( Method.java:515 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:829 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:645 ) at dalvik.system.NativeStart.main ( NativeStart.java )
"String input = `` 30.09.1993 '' ; int [ ] eachNumbers = new int [ 8 ] ; int x = 0 ; for ( int i = 0 ; i < = 9 ; i++ ) { if ( i ! = 2 & & i ! = 5 ) { eachNumbers [ x ] = Integer.parseInt ( input.substring ( i , i+1 ) ) ; x++ ; } } String input = `` 30.09.1993 '' ; int [ ] eachNumbers = new int [ 8 ] ; int x = 0 ; for ( int i = 0 ; i < = 9 ; i++ ) { if ( i ! = 2 || i ! = 5 ) { eachNumbers [ x ] = Integer.parseInt ( input.substring ( i , i+1 ) ) ; x++ ; } } false + false = falsetrue + false = falsefalse + true = falsetrue + true = true false + false = falsetrue + false = truefalse + true = truetrue + true = true"
Car mockCar = mock ( Car.class ) ; when ( mockCar.getMaxSpeed ( ) ) .thenReturn ( 100.0 ) ;
public class Main { public static void main ( String args [ ] ) { One one = new One ( ) ; One two = new Two ( ) ; if ( one instanceof Two ) { System.out.println ( one ) ; } if ( two instanceof Two ) { System.out.println ( one ) ; } } } class One { } class Two extends One { }
"Collection collection = veryExpensiveCollectionCreation ( ) ; return Stream.concat ( firstStream , collection.stream ( ) ) ; return Stream.concat ( firstStream , new LazyStreamProvider ( ) { Stream < Something > createStream ( ) { return veryExpensiveCollectionCreation ( ) .stream ( ) ; } ) ;"
"Intent intent_upload = new Intent ( ) ; intent_upload.setType ( `` */* '' ) ; intent_upload.setAction ( Intent.ACTION_GET_CONTENT ) ; activity.startActivityForResult ( intent_upload , Constants.FILE_PICK_REQUEST_CODE ) ;"
if ( clazz.getEnclosingClass ( ) == null ) { return false ; } if ( clazz.isAnonymousClass ( ) || clazz.isMemberClass ( ) ) { return ! Modifier.isStatic ( clazz.getModifiers ( ) ) ; } if ( clazz.getEnclosingConstructor ( ) ! = null ) { return true ; } final Method enclosingMethod = clazz.getEnclosingMethod ( ) ; if ( enclosingMethod ! = null ) { return ! Modifier.isStatic ( enclosingMethod.getModifiers ( ) ) ; }
"int i=0 ; for ( Element element : dynamicContents ) { //element.remove ( ) ; element.append ( dynamicContentHtmls.get ( i ) ) ; //TextNode text = new TextNode ( dynamicContentHtmls.get ( i ) , `` '' ) ; //element.replaceWith ( text ) ; //element.html ( ) .replaceAll ( element.html ( ) , //dynamicContentHtmls.get ( i ) ) ; i++ ; }"
"import java.net.URI ; import java.net.http.HttpClient ; import java.net.http.HttpClient.Version ; import java.net.http.HttpRequest ; import java.net.http.HttpResponse ; import java.net.http.HttpResponse.BodyHandlers ; public class BasicFetcherApp { public static void main ( String [ ] args ) throws Exception { System.out.println ( `` App is running ... pid : `` + ProcessHandle.current ( ) .pid ( ) ) ; HttpClient client = HttpClient.newBuilder ( ) .version ( Version.HTTP_1_1 ) .build ( ) ; for ( int i = 0 ; i < 10 ; ++i ) { HttpRequest request = HttpRequest.newBuilder ( URI.create ( `` http : //localhost:4001/nocontent '' ) ) .build ( ) ; HttpResponse < String > response = client.send ( request , BodyHandlers.ofString ( ) ) ; System.out.println ( String.format ( `` Response HTTP status : % s '' , response.statusCode ( ) ) ) ; } System.out.println ( `` Finish '' ) ; System.in.read ( ) ; } } App is running ... pid : 23306Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Response HTTP status : 204Finish ss -np | grep 23306u_str ESTAB 0 0 * 4121660 * 0 users : ( ( `` java '' , pid=23306 , fd=13 ) ) u_str ESTAB 0 0 * 4121047 * 0 users : ( ( `` java '' , pid=23306 , fd=6 ) ) tcp ESTAB 0 0 [ : :ffff:127.0.0.1 ] :56666 [ : :ffff:127.0.0.1 ] :40177 users : ( ( `` java '' , pid=23306 , fd=7 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58592 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=24 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58570 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=18 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58572 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=19 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58564 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=15 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58560 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=14 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58574 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=20 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58582 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=21 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58590 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=23 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58594 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=25 ) ) tcp CLOSE-WAIT 1 0 [ : :ffff:127.0.0.1 ] :58584 [ : :ffff:127.0.0.1 ] :4001 users : ( ( `` java '' , pid=23306 , fd=22 ) )"
"private static < T > T getItemExtra ( final Intent intent , final String extraName ) { T item = null ; if ( intent ! = null & & intent.getExtras ( ) ! = null ) { item = ( T ) intent.getExtras ( ) .get ( extraName ) ; } return item ; } String s1 = getItemExtra ( someIntent , `` some_string_extra '' ) ; Uri u1 = getItemExtra ( someIntent , `` some_uri_extra '' ) ;"
The server encountered an internal error that prevented it from fulfilling this request.exception javax.servlet.ServletException : org.glassfish.jersey.server.ContainerException : java.lang.NoClassDefFoundError : Could not initialize class org.eclipse.persistence.jaxb.BeanValidationHelperroot cause org.glassfish.jersey.server.ContainerException : java.lang.NoClassDefFoundError : Could not initialize class org.eclipse.persistence.jaxb.BeanValidationHelperroot cause java.lang.NoClassDefFoundError : Could not initialize class org.eclipse.persistence.jaxb.BeanValidationHelper
"public final class FeedReaderContract { // To prevent someone from accidentally instantiating the contract class , // give it an empty constructor . public FeedReaderContract ( ) { }"
File f = new File ( `` C : /testDir '' ) ; File [ ] files = f.listFiles ( ) ; URL [ ] urls = FileUtils.toURLs ( files ) ;
"Stream < Integer > xs = Arrays.asList ( 1 , 3 , 5 , 6 , 7 , 10 ) .stream ( ) ; xs.map ( x - > x * x ) .filter ( x - > x > 15 ) .forEach ( System.out : :println ) ; @ Override @ SuppressWarnings ( `` unchecked '' ) public final < R > Stream < R > map ( Function < ? super P_OUT , ? extends R > mapper ) { Objects.requireNonNull ( mapper ) ; return new StatelessOp < P_OUT , R > ( this , StreamShape.REFERENCE , StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT ) { @ Override Sink < P_OUT > opWrapSink ( int flags , Sink < R > sink ) { return new Sink.ChainedReference < P_OUT , R > ( sink ) { @ Override public void accept ( P_OUT u ) { downstream.accept ( mapper.apply ( u ) ) ; } } ; } } ; } val xs = List ( 1 , 3 , 5 , 6 , 7 , 10 ) xs map ( x = > x * x ) filter ( x = > x > 15 ) foreach ( println ) final override def map [ B , That ] ( f : A = > B ) ( implicit bf : CanBuildFrom [ List [ A ] , B , That ] ) : That = { if ( bf eq List.ReusableCBF ) { if ( this eq Nil ) Nil.asInstanceOf [ That ] else { val h = new : : [ B ] ( f ( head ) , Nil ) var t : : : [ B ] = h var rest = tail while ( rest ne Nil ) { val nx = new : : ( f ( rest.head ) , Nil ) t.tl = nx t = nx rest = rest.tail } h.asInstanceOf [ That ] } } else super.map ( f ) }"
import com.atlassian.bamboo.process.ProcessService ; public class CheckTask implements TaskType { private final ProcessService processService ; public CheckTask ( @ NotNull final ProcessService processService ) { this.processService = processService ; }
"// @ formatter : off// my awesome formatted code ... public Set < Person > transformCustomersToPersons ( List < Customer > customers ) { Set < Person > persons = new HashSet < Person > ( ) ; for ( Customer customer : customers ) { persons.add ( new Person ( customer.getFirstname ( ) , customer.getLastname ( ) , customer.getTitle ( ) , customer.getBirthday ( ) , customer.getAddress ( 0 ) .getCity ( ) , customer.getAddress ( 0 ) .getStreet ( ) , customer.getAddress ( 0 ) .getHousenumber ( ) , customer.isMan ( ) ? `` m '' : `` w '' , customer.getCardNumber ( ) ) ) ; } return persons ; } // @ formatter : on"
myCollection.par
"Observable < Book > books ; Observable < Movie > movies ; Observable < BookMoviePair > pairs = books.join ( movies ) .where ( ( book , movie ) - > book.getId ( ) == movie.getId ( ) ) ) .return ( ( book , movie ) - > new BookMoviePair ( book , movie ) ) ;"
public class MyLegacyClass < T extends MyLegacyClass < T > > { // implementation ... } // In Java we just ignore the generic type ... MyLegacyClass myLegacyClass = new MyLegacyClass ( ) ; class myClass { // Error : One type argument expected for class ... val x : MyLegacyClass = MyLegacyClass ( ) // Still 'Error : One type argument expected for class.. ' You start to see the problem here . val y : MyLegacyClass < MyLegacyClass < MyLegacyClass < MyLegacyClass > > > = MyLegacyClass ( ) } class MyLegacyClassWrapper : MyLegacyClass < MyLegacyClassWrapper > ( ) class myClass { val x : MyLegacyClass < MyLegacyClassWrapper > = MyLegacyClassWrapper ( ) }
public class Bar < T extends Bar < T > > extends Foo < T > { //Some code }
"protected < U > U withTx ( Function < OrientGraph , U > fc ) { // do something with the function } protected void withTx ( Consumer < OrientGraph > consumer ) { withTx ( g - > { consumer.accept ( g ) ; return null ; } ) ; } withTx ( g - > anotherMethod ( g ) ) ; withTx ( g - > { anotherMethod ( g ) ; } ) ;"
"Pane mainPane = new Pane ( new Label ( `` Main Stage '' ) ) ; mainPane.setPrefSize ( 300 , 300 ) ; mainStage.setScene ( new Scene ( mainPane ) ) ; Stage secondStage = new Stage ( ) ; Pane secondPane = new Pane ( new Label ( `` Second Stage '' ) ) ; secondPane.setBackground ( new Background ( new BackgroundFill ( Color.TRANSPARENT , CornerRadii.EMPTY , Insets.EMPTY ) ) ) ; secondPane.setBorder ( new Border ( new BorderStroke ( Color.BLACK , BorderStrokeStyle.SOLID , CornerRadii.EMPTY , new BorderWidths ( 2 ) ) ) ) ; secondPane.setPrefSize ( 300 , 300 ) ; secondStage.setScene ( new Scene ( secondPane , Color.TRANSPARENT ) ) ; secondStage.initStyle ( StageStyle.TRANSPARENT ) ; mainStage.getScene ( ) .setOnScroll ( event - > System.out.println ( `` Scroll in main stage '' ) ) ; secondStage.getScene ( ) .setOnScroll ( event - > System.out.println ( `` Scroll in second stage '' ) ) ; mainStage.getScene ( ) .setOnMouseClicked ( event - > System.out.println ( `` Click in main stage '' ) ) ; secondStage.getScene ( ) .setOnMouseClicked ( event - > System.out.println ( `` Click in second stage '' ) ) ; mainStage.show ( ) ; secondStage.show ( ) ;"
public static void main ( final String [ ] args ) { // do something } public static void main ( final String [ ] args ) { String [ ] argsCopy = doCopy ( args ) ; // do something }
"class DataModelClass { //some more field etc . @ Column ( name = `` number1 '' , nullable = true ) private Integer number1 ; @ Column ( name = `` number2 '' , nullable = true ) private Integer number2 ; public DataModelClass ( ) { } ( ... ) public Integer getNumber2 ( ) { return number2 ; } public void setNumber2 ( Integer number2 ) { this.number2= number2 ; } } em.persist ( dataModelClass ) ; DataModelClass dmc = em.find ( DataModelClass.class , 1 ) ; @ Entity @ Table ( name = `` custom_table '' , uniqueConstraints= @ UniqueConstraint ( name= '' UK_example_foreign_id '' , columnNames= { `` example_foreign_id '' } ) ) @ SequenceGenerator ( name = DataModelClass.SEQ_NAME , sequenceName = DataModelClass.SEQ_NAME , allocationSize = 1 )"
"public interface ItemOrBlockAdapter { public String myGetUnlocalizedName ( ) ; public ItemOrBlockAdapter mySetCreativeTab ( CreativeTabs tab ) ; } public class BlockAdapter extends Block implements ItemOrBlockAdapter { protected BlockAdapter ( String uid , Material m ) { super ( m ) ; GameRegistry.registerBlock ( this , uid ) ; } public String myGetUnlocalizedName ( ) { return this.getUnlocalizedName ( ) ; } public ItemOrBlockAdapter mySetCreativeTab ( CreativeTabs tab ) { return ( ItemOrBlockAdapter ) this.setCreativeTab ( tab ) ; } }"
public interface Foo < T > { public static class X { } public void foobar ( T t ) ; } public class Bar < X > { Foo < X > foo = new Foo < X > ( ) { public void foobar ( X t ) { } } ; }
"@ ActionRegistration ( displayName = `` # CTL_FindUsagesAction '' ) @ ActionReferences ( value = { @ ActionReference ( path = `` Shortcuts '' , name = `` A-F7 '' ) ,"
"/** * @ param name the name of the animal * @ param age the age of the animal */public record Animal ( String name , int age ) { }"
interface Base < T extends Base > { T method ( ) ; } interface Base { Base method ( ) ; }
MimeType a = new MimeType ( `` image/png '' ) ; MimeType b = new MimeType ( `` image/png '' ) ; a.equals ( b ) ; // falsea.toString ( ) .equals ( b.toString ( ) ) ; // truea.getBaseType ( ) .equals ( b.getBaseType ( ) ) ; // truea.getSubType ( ) .equals ( b.getSubType ( ) ) ; // truea.getParameters ( ) .size ( ) ; // 0b.getParameters ( ) .size ( ) ; // 0
"8.4.8.1 . Overriding ( by Instance Methods ) An instance method m1 , declared in class C , overrides another instance method m2 , declared in class A iff all of the following are true : C is a subclass of A . The signature of m1 is a subsignature ( §8.4.2 ) of the signature of m2.8.4.2 . Method Signature The signature of a method m1 is a subsignature of the signature of a method m2 if either : m2 has the same signature as m1 , or the signature of m1 is the same as the erasure ( §4.6 ) of the signature of m2 ."
public static final Rational ZERO = new Rational ( 0 ) ; public static final Rational ONE = new Rational ( 1 ) ; public static final Rational NEG_ONE = new Rational ( -1 ) ;
public void loadPlayerComboBox ( ) { try { final PreparedStatement collectPlayerNames = ConnectionManager.getConnection ( ) .prepareStatement ( `` SELECT `` +PLAYER_NAME+ '' FROM PLAYERS '' ) ; final ResultSet playerNameResults = collectPlayerNames.executeQuery ( ) ; while ( playerNameResults.next ( ) ) { IViewManager.Util.getInstance ( ) .getMyContainerPane ( ) .getMyPlayerManagerPane ( ) .getPlayerNameList ( ) .add ( playerNameResults.getString ( PLAYER_NAME ) ) ; } } catch ( final SQLException e ) { System.out.println ( `` SQLException . Reason : `` + e.getMessage ( ) ) ; } } static class Util { static private IViewManager viewManager = null ; static public synchronized IViewManager getInstance ( ) { if ( viewManager == null ) { viewManager = new ViewManager ( ) ; } return viewManager ; } } public ViewManager ( ) { super ( `` Tony Larp DB Manager '' ) ; this.setVisible ( true ) ; this.setDefaultCloseOperation ( 3 ) ; myContainerPane = new ContainerPane ( ) ; myContentMenu = new ContentMenu ( ) ; IController.Util.getInstance ( ) ; IPlayerCharacterManager.Util.getInstance ( ) ; this.setJMenuBar ( myContentMenu ) ; this.getContentPane ( ) .add ( myContainerPane ) ; this.pack ( ) ; }
"public enum Type { A , B , C } public class Action { public Action ( Type.A type , String value ) { } public Action ( Type.B type , Float value ) { } public Action ( Type.C type , String value ) { } }"
readAllTypes ( Class clazz ) { ... }
"default V replace ( K key , V value ) { V curValue ; if ( ( ( curValue = get ( key ) ) ! = null ) || containsKey ( key ) ) { curValue = put ( key , value ) ; } return curValue ; } // why not do it like this ? default V replace ( K key , V value ) { V curValue = get ( key ) ; // not nested if ( curValue ! = null || containsKey ( key ) ) { curValue = put ( key , value ) ; } return curValue ; } default V computeIfAbsent ( K key , Function < ? super K , ? extends V > mappingFunction ) { Objects.requireNonNull ( mappingFunction ) ; V v ; if ( ( v = get ( key ) ) == null ) { V newValue ; if ( ( newValue = mappingFunction.apply ( key ) ) ! = null ) { put ( key , newValue ) ; return newValue ; } } return v ; }"
new JLabel ( `` < html > /Foo < br/ > /Bar < br/ > /Foo < br/ > /Bar < /html > '' ) ;
public static void main ( String [ ] args ) throws java.lang.Exception { int i = 0 ; d : { System.out.println ( `` d '' ) ; } while ( i < 10 ) { i++ ; continue d ; } } public static void main ( String [ ] args ) throws java.lang.Exception { int i = 0 ; d : { System.out.println ( `` d '' ) ; while ( i < 10 ) { i++ ; continue d ; } } } public static void main ( String [ ] args ) throws java.lang.Exception { int i = 0 ; d : while ( i < 10 ) { { System.out.println ( `` d '' ) ; } i++ ; continue d ; } }
"String [ ] buttonText = { `` Looks good '' , `` It sucks '' } ; Object selection = new OptionPaneBuilder ( `` What do you think ? '' ) .question ( ) .message ( messageComponent ) .resizable ( true ) .showOptionDialog ( parent , buttonText ) ; return buttonText [ 0 ] .equals ( selection ) ; // returns int ( or enum ? ) .showConfirmDialog ( parent , JOptionPane.YES_NO_CANCEL_OPTION ) // returns JOptionPane.build ( ) // etc ..."
"String input = `` x^ ( 24-3x ) '' ; String [ ] signs = input.split ( `` regex here '' ) ; for ( int i = 0 ; i < signs.length ; i++ ) { System.out.println ( sings [ i ] ) ; } `` x '' , `` ^ '' , `` ( `` , `` 24 '' , `` - '' , `` 3 '' , `` x '' , `` ) ''"
for ( InnerArray aList : outerArray ) aList.clear ( ) ; outerArray.clear ( ) ;
"private IDevice getDeviceByReadableName ( String versionInXml , IDevice devices ) { for ( IDevice device : devices.values ( ) ) { // ... public interface IDevice { // ... public IDevice [ ] values ( ) ; }"
import java.util.ArrayList ; class SuperSample { } class Sample extends SuperSample { @ SuppressWarnings ( `` unchecked '' ) public static void main ( String [ ] args ) { try { ArrayList < Sample > sList = new ArrayList < Sample > ( ) ; Object o = sList ; ArrayList < SuperSample > ssList = ( ArrayList < SuperSample > ) o ; ssList.add ( new SuperSample ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ArrayList < Sample > sList = new ArrayList < Sample > ( ) ; ArrayList < SuperSample > ssList = ( ArrayList < SuperSample > ) sList ; String [ ] iArray = new String [ 5 ] ; Object [ ] iObject = iArray ; iObject [ 0 ] = 5.5 ; // throws ArrayStoreException ssList.add ( new SuperSample ( ) ) ;
( defn mark-true [ n ] ( cons n ' ( true ) ) ) ( defn unmarked ? [ ns ] ( not ( list ? ns ) ) ) ( defn divides ? [ m n ] ( if ( = ( mod n m ) 0 ) true false ) ) ( defn mark-divisors [ n ns ] ( cond ( empty ? ns ) ' ( ) ( and ( unmarked ? ( first ns ) ) ( divides ? n ( first ns ) ) ) ( cons ( cons ( first ns ) ' ( false ) ) ( mark-divisors n ( rest ns ) ) ) : else ( cons ( first ns ) ( mark-divisors n ( rest ns ) ) ) ) ) ( defn eratosthenes [ ns ] ( cond ( empty ? ns ) ' ( ) ( unmarked ? ( first ns ) ) ( cons ( mark-true ( first ns ) ) ( eratosthenes ( mark-divisors ( first ns ) ( rest ns ) ) ) ) : else ( cons ( first ns ) ( eratosthenes ( rest ns ) ) ) ) ) ; ( eratosthenes ( list 2 3 4 5 6 ) ) ; = > ClassCastException clojure.lang.Cons can not be cast to java.lang.Number & nbsp ; clojure.lang.Numbers.remainder ( Numbers.java:171 )
"public class Book { private String asin ; private String author ; private String title ; } Map < String , Book > booksByAsinAndTitle = books.stream ( ) .collect ( Collectors.groupingBy ( ( book ) - > book.getAsin ( ) + `` || '' + book.getTitle ( ) ) ) .entrySet ( ) .stream ( ) .collect ( Collectors.toMap ( x - > x.getKey ( ) , x - > x.getValue ( ) .get ( 0 ) ) ) ;"
private final char value [ ] ; // ... public int hashCode ( ) { int h = hash ; if ( h == 0 & & value.length > 0 ) { char val [ ] = value ; // < -- - this line for ( int i = 0 ; i < value.length ; i++ ) { h = 31 * h + val [ i ] ; } hash = h ; } return h ; }
public < T > void function ( T element ) { // Some code ... }
"JPanel debugDrawPanel = new JPanel ( new GridLayout ( 0,1 ) ) ; JPanel eastPanel = new JPanel ( new GridLayout ( 1,0 ) ) ; JTabbedPane tab = new JTabbedPane ( ) ; click = new ClickPanel ( this ) ; setSettings ( new Settings ( ) ) ; for ( Setting setting : getSettings ( ) .getAll ( ) ) { JCheckBox checkBox = new JCheckBox ( setting.name ) ; checkBox.setName ( setting.name ) ; checkBox.addItemListener ( new CheckBoxItemListener ( this ) ) ; debugDrawPanel.add ( checkBox ) ; } tab.addTab ( `` Object Parameters '' , click ) ; tab.addTab ( `` Debug Draw '' , debugDrawPanel ) ;"
< script src= '' /some/thing/tricks.js '' / >
public static ArrayList < String > forString ( ) { ArrayList < String > res = new ArrayList < > ( ) ; // Fetching and processing data specific to String return res ; } public static < T > ArrayList < T > forGeneric ( Class < T > type ) { ArrayList < T > res = new ArrayList < > ( ) ; // Fetching data return res ; } public static < T > ArrayList < T > function ( Class < T > type ) { if ( type == String.class ) return ( ArrayList < T > ) forString ( ) ; return forGeneric ( type ) ; }
public static int construction ( String myString ) { Set < Character > set = new HashSet < > ( ) ; int count = myString.chars ( ) // returns IntStream .mapToObj ( c - > ( char ) c ) // Stream < Character > why is this required ? .mapToInt ( c - > ( set.add ( c ) == true ? 1 : 0 ) ) // IntStream .sum ( ) ; return count ; } .mapObj ( c - > ( char ) c ) // < Character > Stream < Character > java.util.stream.IntStream.mapToObj ( IntFunction < ? extends Character > mapper ) The method mapToInt ( ( < no type > c ) - > { } ) is undefined for the type IntStream
import java.util.Arrays ; import java.util.Scanner ; public class Strings { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System.in ) ; System.out.println ( `` Enter a 5 letter word ( all lower case ) : `` ) ; String word = input.nextLine ( ) ; int length = word.length ( ) ; byte [ ] bytes = word.getBytes ( ) ; String AsciiArray = Arrays.toString ( bytes ) ; System.out.println ( `` the ascii sum is '' + AsciiArray ) ; } }
< table > < record > < group > 1 < /group > < data > abc < /abc > < /record > < record > < group > 1 < /group > < data > def < /abc > < /record > < record > < group > 2 < /group > < data > ghi < /abc > < /record > < /table > + -- -- -- -- -- -- -- +| Group 1 |+ -- -- -- -- -- -- -- +| abc || def |+ -- -- -- -- -- -- -- +| Group 2 |+ -- -- -- -- -- -- -- +| ghi |+ -- -- -- -- -- -- -- + < xsl : for-each select= '' set : distinct ( /table/record/group ) '' > < xsl : variable name= '' group '' select= '' . `` / > < ! -- This access needs to be made faster : -- > < xsl : for-each select= '' /table/record [ group = $ group ] '' > < ! -- Do the table stuff -- > < /xsl : for-each > < /xsl : for-each >
"@ Data @ ApiModel ( value = `` SearchOperationRequest '' , description = `` Condition for the query '' ) public class SearchOperationRequest { @ ApiModelProperty ( value = `` Conditional statement for the where clause '' , allowableValues = `` EQUALS , NOT_EQUALS , GREATER_THAN , LESS_THAN , LIKE , STARTS_WITH , ENDS_WITH , CONTAINS '' ) private SearchConditionOperation condition ; @ ApiModelProperty ( value = `` Column name to be searched on '' ) private String column ; @ ApiModelProperty ( value = `` Value of column '' ) private Object value ; @ ApiModelProperty ( value = `` Value of OR / AND '' ) private SearchComparator comparator ; @ ApiModelProperty ( value = `` Left node of comparator condition '' ) private SearchOperationRequest left ; @ ApiModelProperty ( value = `` Right node of comparator condition '' ) private SearchOperationRequest right ; public boolean isTreeLeaf ( ) { return left == null & & right == null ; } public boolean isComparator ( ) { return comparator ! = null ; } } `` searchOperation '' : { `` left '' : { `` column '' : `` Hidden '' , `` condition '' : `` EQUALS '' , `` value '' : false } , `` comparator '' : `` AND '' , `` right '' : { `` left '' : { `` column '' : `` X '' , `` condition '' : `` EQUALS '' , `` value '' : 88 } , `` comparator '' : `` AND '' } } public class GenericSpecificationsBuilder < U > { public Specification < U > buildSpecificationFromSearchOperationRequest ( SearchOperationRequest root , Function < SpecificationSearchCriteria , Specification < U > > converter ) { Stack < SearchOperationRequest > stack = new Stack < > ( ) ; Stack < SearchOperationRequest > comparatorStack = new Stack < > ( ) ; Deque < Specification < U > > specStack = new LinkedList < > ( ) ; SearchOperationRequest pointer = root ; while ( pointer ! = null || ! stack.empty ( ) ) { if ( pointer.isTreeLeaf ( ) ) { specStack.push ( converter.apply ( new SpecificationSearchCriteria ( pointer.getColumn ( ) , pointer.getCondition ( ) , pointer.getValue ( ) ) ) ) ; } if ( pointer.isComparator ( ) ) { comparatorStack.push ( pointer ) ; } if ( pointer.getRight ( ) ! = null ) { stack.push ( pointer.getRight ( ) ) ; } if ( pointer.getLeft ( ) ! = null ) { pointer.setRight ( pointer.getLeft ( ) ) ; pointer.setLeft ( null ) ; } else if ( ! stack.empty ( ) ) { SearchOperationRequest temp = stack.pop ( ) ; pointer.setRight ( temp ) ; } pointer = pointer.getRight ( ) ; } while ( specStack.size ( ) < = comparatorStack.size ( ) ) { comparatorStack.pop ( ) ; } while ( ! comparatorStack.empty ( ) ) { SearchOperationRequest searchOperationRequest = comparatorStack.pop ( ) ; Specification < U > operand1 = specStack.pop ( ) ; Specification < U > operand2 = specStack.pop ( ) ; if ( searchOperationRequest.getComparator ( ) .equals ( SearchComparator.AND ) ) { specStack.push ( Specification.where ( operand1 ) .and ( operand2 ) ) ; } else if ( searchOperationRequest.getComparator ( ) .equals ( SearchComparator.OR ) ) { specStack.push ( Specification.where ( operand1 ) .or ( operand2 ) ) ; } } return specStack.pop ( ) ; } } WHERE X = 6 AND X = 9WHERE Z = 5 OR T=9WHERE Z = 5 OR T=9 OR H=6 WHERE ( X = 6 OR Z = 9 ) AND ( T=6 OR H=8 ) `` searchOperation '' : { `` left '' : { `` left '' : { `` column '' : `` X '' , `` condition '' : `` EQUALS '' , `` value '' : 6 } , `` comparator '' : `` AND '' , `` right '' : { `` column '' : `` Z '' , `` condition '' : `` EQUALS '' , `` value '' : 9 } } , `` comparator '' : `` AND '' , `` right '' : { `` left '' : { `` column '' : `` T '' , `` condition '' : `` EQUALS '' , `` value '' : 6 } , `` comparator '' : `` AND '' , `` right '' : { `` column '' : `` H '' , `` condition '' : `` EQUALS '' , `` value '' : 8 } } }"
char c = src.charAt ( 2 ) ; import java.util.Scanner ; public class Challenge14 { static Scanner in = new Scanner ( System.in ) ; public static void main ( String [ ] args ) { System.out.println ( `` Enter Your first number : `` ) ; int x = in.nextInt ( ) ; for ( int i = 0 ; i < 7 ; i++ ) { String [ ] s = new String [ i ] ; s = in.nextLine ( ) ; } } }
List < List < String > > a = new ArrayList < > ( ) ; List b = a ; // is okList < List > c = a ; // incompatible types
"public class Index { void tellme ( String yourname ) { /* ... */ } public static void main ( String [ ] args ) throws Exception { Method tellme = Index.class.getDeclaredMethod ( `` tellme '' , String.class ) ; Method java8Params = null ; try { java8Params = Method.class.getMethod ( `` getParameters '' ) ; } catch ( NoSuchMethodException t ) { /* ignore */ } if ( java8Params ! = null ) { // java 1.8 ! ! Object param = ( ( Object [ ] ) java8Params.invoke ( tellme ) ) [ 0 ] ; System.out.printf ( `` ( java8 ) % s % s ( % s % s ) { /* ... */ } '' , tellme.getReturnType ( ) , tellme.getName ( ) , param.getClass ( ) .getMethod ( `` getType '' ) .invoke ( param ) , param.getClass ( ) .getMethod ( `` getName '' ) .invoke ( param ) ) ; } else { // java 1.7 ... System.out.printf ( `` ( java7 ) % s % s ( % s % s ) { /* ... */ } '' , tellme.getReturnType ( ) , tellme.getName ( ) , tellme.getParameterTypes ( ) [ 0 ] .getName ( ) , `` arg0 '' ) ; } } }"
"void capturaPantalla ( ) { try { int x = txtCodigo.getX ( ) ; int y = txtCodigo.getY ( ) ; Rectangle areaCaptura = new Rectangle ( x , y , txtCodigo.getWidth ( ) , txtCodigo.getHeight ( ) ) ; BufferedImage capturaPantalla = new Robot ( ) .createScreenCapture ( areaCaptura ) ; File ruta = new File ( `` P : \\captura.png '' ) ; ImageIO.write ( capturaPantalla , `` png '' , ruta ) ; JOptionPane.showMessageDialog ( null , `` Codigo de barras guardado ! `` ) ; } catch ( IOException ioe ) { System.out.println ( ioe ) ; } catch ( AWTException ex ) { System.out.println ( ex ) ; } }"
do { printMenu ( ) ; //method to print menu try { user=input.nextInt ( ) ; } catch ( InputMismatchException imme ) { System.err.println ( `` Make sure to enter a number . `` ) ; input.next ( ) ; continue ; } switchMenu ( user ) ; //method with switch method for user input } while ( 1 < 2 ) ; 1 . Book a ticket2 . Cancel a ticket3 . Check how many seats left4 . Print seat map5 . Check price6 . Print ticket7 . Exita1 . Book a ticket2 . Cancel a ticket3 . Check how many seats left4 . Print seat map5 . Check price6 . Print ticket7 . ExitMake sure to enter a number.//Error message after menuasd//wrong inputMake sure to enter a number.//now error message displays before menu1 . Book a ticket2 . Cancel a ticket3 . Check how many seats left4 . Print seat map5 . Check price6 . Print ticket7 . Exitasd1 . Book a ticket2 . Cancel a ticket3 . Check how many seats leftMake sure to enter a number.//in the middle now ? ? ? 4 . Print seat map5 . Check price6 . Print ticket7 . Exit
"public void extractExact ( Path absolutePath , DoubleConsumer progressConsumer ) throws IOException { ... // Extract to file channel try ( final FileOutputStream fos = new FileOutputStream ( absolutePath.toFile ( ) ) ) { PakExtractor.Extract ( pakFile , Entry , fos.getChannel ( ) , progressConsumer ) ; } }"
"List < String > list1 = Arrays.asList ( `` ABCD '' , `` EFGH '' , `` IJKL '' , `` QWER '' ) ; List < String > list2 = Arrays.asList ( `` ABCD '' , `` 1234 '' ) ; //Should result in true , because `` ABCD '' is in list 1 & 2 ArrayList list1 = { 1 , 2 , 3 , 4 , 5 } ArrayList list2 = { 1 , 2 , 3 } -- > TrueArrayList list2 = { 3 , 2 , 1 } -- > TrueArrayList list2 = { 5 , 6 , 7 , 8 , 9 } -- > TrueArrayList list2 = { 6 , 7 , 8 , 9 } -- > False"
"public class A { public void theMethod ( Object arg1 ) { // do some stuff with a single argument } } public class B { public void reflectingMethod ( Object arg ) { Method method = A.class.getMethod ( `` theMethod '' , Object.class ) ; method.invoke ( new A ( ) , arg ) ; } } public class A { public void theMethod ( Object ... args ) { // do some stuff with a list of arguments } } public class B { public void reflectingMethod ( Object ... args ) { Method method = A.class.getMethod ( `` theMethod '' , /* what goes here ? */ ) ; method.invoke ( new A ( ) , args ) ; } }"
C : \Program Files ( x86 ) \Java\jdk1.7.0_45\bin C : \Program Files ( x86 ) \Java\jdk1.7.0_45\jre\bin
"Set < ? extends Animal > animalSet ; Set < Dog > dogSet = new HashSet < Dog > ( ) ; animalSet = dogSet ; Map < String , Set < ? extends Animal > > animalMap ; Map < String , Set < Dog > > dogMap = new HashMap < String , Set < Dog > > ( ) ; animalMap = dogMap ; // this line will not compile Map < String , ? extends Set < ? extends Animal > > animalMap ; Map < String , Set < Dog > > dogMap = new HashMap < String , Set < Dog > > ( ) ; animalMap = dogMap ;"
int numerator2 = < some random number > ; int denominator2 = < some random number > ; if ( numerator2 > denominator2 ) { int temp = denominator2 ; denominator2 = numerator2 ; numerator2 = temp ; }
"repositories { mavenLocal ( ) /* Removed our internal repositories */ jcenter ( ) mavenCentral ( ) } apply plugin : 'java'apply plugin : 'jacoco'apply plugin : 'maven-publish'apply plugin : 'io.spring.dependency-management'group = 'nedl-unified-platform'/* Required to publish Spring Boot microservices to publish to repository */configurations { [ apiElements , runtimeElements ] .each { it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies ( null ) .contains ( jar ) } it.outgoing.artifact ( bootJar ) } } java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 withJavadocJar ( ) withSourcesJar ( ) } ext { set ( 'springBootVersion ' , ' 2.1.17.RELEASE ' ) set ( 'springCloudVersion ' , `` Greenwich.SR6 '' ) } dependencyManagement { imports { mavenBom `` org.springframework.cloud : spring-cloud-dependencies : $ { springCloudVersion } '' } } jacoco { toolVersion = `` 0.8.5 '' reportsDir = file ( `` $ buildDir/reports/jacoco '' ) } test { finalizedBy jacocoTestReport // report is always generated after tests run } jacocoTestCoverageVerification { violationRules { rule { limit { minimum = 0.2 } } } } jacocoTestReport { dependsOn test // tests are required to run before generating the report reports { xml.enabled true html.destination file ( `` $ { reportsDir } /jacocoHtml '' ) xml.destination file ( `` $ { reportsDir } /jacocoReport.xml '' ) } } tasks.withType ( JavaCompile ) { options.encoding = 'UTF-8 ' } publishing { publications { maven ( MavenPublication ) { from components.java } } repositories { /* excluded for privacy and brevity 's sake , our internal Maven repo */ } } plugins { id 'org.springframework.boot ' version springBootVersion } apply from : `` https : //mycentral.repo/project-common/develop/build.gradle '' dependencies { implementation 'org.springframework.boot : spring-boot-starter-actuator ' implementation 'org.springframework.cloud : spring-cloud-starter-netflix-eureka-server ' implementation 'ch.qos.logback : logback-classic ' implementation 'javax.annotation : javax.annotation-api:1.3.2 ' implementation 'javax.xml.bind : jaxb-api:2.4.0-b180830.0359 ' implementation 'org.glassfish.jaxb : jaxb-runtime:2.4.0-b180830.0438 ' testImplementation 'org.springframework.boot : spring-boot-starter-test ' } version = ' 0.0.2-SNAPSHOT '"
"class Person { static Map < Integer , Person > allPeople ; int myDogId ; static Person getPerson ( int key ) { return allPeople.get ( key ) ; } Dog getMyDog ( ) { return Dog.getDog ( myDogId ) ; } } class Dog { static Map < Integer , Dog > allDogs ; int myOwnersId ; static Dog getDog ( int key ) { return allDogs.get ( key ) ; } Person getMyOwner ( ) { return Person.getPerson ( myOwnersId ) ; } }"
BigDecimal bgAmount = getAmount ( ) ; long totalSupplyFilterMin = Optional.ofNullable ( bgAmount.longValue ( ) ) .orElse ( Long.MIN_VALUE ) ;
class Op ( var x : Int ) { def +++ ( op : Op ) = { println ( this.x + `` +++ `` + op.x ) this.x += op.x this } def *** ( op : Op ) = { println ( this.x + `` *** `` + op.x ) this.x *= op.x this } } op1 +++ op2 +++ op3 *** op4
"@ Testpublic void should_be_equals ( ) { LocalDate now = new LocalDate ( 2015,01,29 ) ; assertThat ( now.plusMonths ( 1 ) .plusMonths ( 1 ) ) .isEqualTo ( now.plusMonths ( 2 ) ) ; } org.junit.ComparisonFailure : Expected :2015-03-29Actual :2015-03-28"
"public void drawConnections ( Graphics g ) { ArrayList < EnergyContainer > structurecopy = ( ArrayList < EnergyContainer > ) Mainclass.structures.clone ( ) ; //all structures in a list structurecopy.remove ( this ) ; //as we are member of the list structurecopy.removeIf ( t - > ( ! hasStructureInRangeWithoutObstaclesInBetween ( t ) ) ) ; structurecopy.removeIf ( t - > ! t.receivesEnergyfromNeighbors ( ) ) ; //unimportant check if it is allowed to connect ( its working ) structurecopy.forEach ( t - > drawConnectionTo ( t , g ) ) ; //also works fine } public boolean hasStructureInRangeWithoutObstaclesInBetween ( Structure structureWhichShouldBeInRange ) { // if in Range if ( getRange ( ) > = Math.hypot ( structureWhichShouldBeInRange.getX ( ) - getX ( ) , structureWhichShouldBeInRange.getY ( ) - getY ( ) ) ) { //checks if structure is in range ArrayList < EnergyContainer > structureclone = ( ArrayList < EnergyContainer > ) Mainclass.structures.clone ( ) ; structureclone.remove ( this ) ; //again removes itself from the list structureclone.remove ( structureWhichShouldBeInRange ) ; //also removes target - so it does n't block itself structureclone.removeIf ( t - > ! t.collidesWithLine ( this.getX ( ) , structureWhichShouldBeInRange.getX ( ) , this.getY ( ) , structureWhichShouldBeInRange.getY ( ) ) ) ; //removes it when it does not collide return structureclone.size ( ) == 0 ; //returns true when no collisions are found } return false ; } public boolean collidesWithLine ( int x1 , int x2 , int y1 , int y2 ) { // Line Segment - Circle Collision Detection double dx = x2 - x1 ; double dy = y2 - y1 ; double a = dx * dx + dy * dy ; //this is the distance double b = 2 * dx * ( x1 - getX ( ) ) + 2 * dy * ( y1 - getY ( ) ) ; double c = getX ( ) * getX ( ) + getY ( ) * getY ( ) + x1 * x1 + y1 * y1 - 2 * ( getX ( ) * x1 + getY ( ) * y1 ) - getCollisionRadius ( ) * getCollisionRadius ( ) ; double discriminant = b * b - 4 * a * c ; return discriminant > = 0 ; // no intersection - > discriminant < 0 }"
@ Testpublic void canBeDeletedWhenStatusIsP ( ) { Sample sample = new Sample ( ) ; sample.setState ( `` P '' ) ; assertTrue ( sample.canBeDeleted ( ) ) ; } @ Testpublic void canBeDeletedWhenStatusIsS ( ) { Sample sample = new Sample ( ) ; sample.setState ( `` S '' ) ; assertTrue ( sample.canBeDeleted ( ) ) ; } @ Testpublic void cantBeDeletedWhenStatusINeitherPNorS ( ) { Sample sample = new Sample ( ) ; sample.setState ( `` Z '' ) ; assertFalse ( sample.canBeDeleted ( ) ) ; }
"import javafx.application.Application ; import javafx.geometry.Side ; import javafx.scene.Node ; import javafx.scene.Scene ; import javafx.scene.chart.LineChart ; import javafx.scene.chart.NumberAxis ; import javafx.scene.layout.AnchorPane ; import javafx.stage.Stage ; public class Main extends Application { @ Override public void start ( Stage primaryStage ) throws Exception { NumberAxis numberAxis = new NumberAxis ( ) ; LineChart chart = new LineChart ( numberAxis , new NumberAxis ( ) ) ; chart.getYAxis ( ) .setSide ( Side.RIGHT ) ; Node chartPlotArea = chart.lookup ( `` .chart-plot-background '' ) ; chartPlotArea.setStyle ( `` -fx-background-color : cyan '' ) ; AnchorPane anchorPane = new AnchorPane ( chart ) ; AnchorPane.setTopAnchor ( chart , 0.0 ) ; AnchorPane.setRightAnchor ( chart , 0.0 ) ; AnchorPane.setBottomAnchor ( chart , 0.0 ) ; AnchorPane.setLeftAnchor ( chart , 0.0 ) ; Scene scene = new Scene ( anchorPane ) ; primaryStage.setScene ( scene ) ; primaryStage.setMaximized ( true ) ; primaryStage.show ( ) ; } }"
"public static void method1 ( int [ ] a , int [ ] b ) { int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < a.length ; i++ ) { sum1 += a [ i ] ; } for ( int i = 0 ; i < b.length ; i++ ) { sum2 += b [ i ] ; } } Arrays.sort ( a ) ;"
"public interface CoordinateServer { public Stream < Integer > coordinates ( ) ; // example implementations : // IntStream.range ( 0 , 100 ) .boxed ( ) // finite , ordered , sequential // final AtomicInteger atomic = new AtomicInteger ( ) ; // Stream.generate ( ( ) - > atomic2.incrementAndGet ( ) ) // infinite , unordered , sequential // Stream.generate ( ( ) - > atomic2.incrementAndGet ( ) ) .parallel ( ) // infinite , unordered , parallel } // if stream is parallel , which order will be written to file ? coordinates ( ) .peek ( i - > { writeToFile ( i ) } ) .count ( ) ; // how should I remember to always add sequential ( ) in such cases ? coordinates ( ) .sorted ( ) .limit ( 1000 ) .collect ( toList ( ) ) ; // will this terminate ? coordinates ( ) .allMatch ( x - > x > 0 ) ; // will this terminate ? // will result list maintain the same order as sequential ? coordinates ( ) .map ( i - > complexLookup ( i ) ) .parallel ( ) .collect ( toList ( ) ) ; Stream < X > stream = fooLibrary.getStream ( ) ; Stream < X > safeStream = StreamPreconditions ( stream , /*maxThreshold or elements before IllegalArgumentException*/ 10_000 , /* fail with IllegalArgumentException if not ordered */ true )"
"1. public void buyHouse ( Player player , PropertyValue propertyValue ) { if ( houseCount < 0 ) throw new someException ; ... . //Not really an exceptional situation } 2. public boolean buyHouse ( Player player , PropertyValue propertyValue ) { if ( houseCount < 0 ) return false ; ... . //This I think is the most normal approach but changing something //and returning if it was a success seems bad practice to me. } 3 . public boolean housesLeft ( ) { if ( houseCount > 0 ) return true ; return false ; //Introducing a new method . But now I expect the client to call this method //first before calling buyHouse ( ) . }"
"public class RandomParticle extends Ellipse2D.Double { private Ellipse2D.Double circle ; public RandomParticle ( double xPos , double yPos , double rad ) { setCircle ( new Ellipse2D.Double ( xPos , yPos , rad , rad ) ) ; } public Ellipse2D.Double getCircle ( ) { return circle ; } public void setCircle ( Ellipse2D.Double circle ) { this.circle = circle ; } }"
"public class CardViewActivity extends AppCompatActivity { private ImageView cardArtImageView ; private TextView leaderSkillDescText ; private TextView superAttackTitleText ; private TextView superAttackDescText ; private TextView passiveSkillTitleText ; private TextView passiveSkillDescText ; private TextView hpText ; private TextView attText ; private TextView defText ; private TextView costText ; private Button arrowButton ; private int selectedItemPosition ; private boolean isBtnClicked = false ; // Listener member field for each layout 's button . This listener will be used recursivelyprivate View.OnClickListener arrowButtonListener = new View.OnClickListener ( ) { @ Override public void onClick ( View view ) { // When the arrowButton is clicked , choose the right layout based on the button 's state int resID = isBtnClicked ? R.layout.cardview_refined : R.layout.cardview_expand_details ; setContentView ( resID ) ; // If we 're in the first layout , initialize the cardArtImageView field if ( isBtnClicked ) { cardArtImageView = findViewById ( R.id.cardArtImageView ) ; } viewDefinitions ( ! isBtnClicked ) ; initCardViewData ( selectedItemPosition ) ; setSelectedViewsInit ( ) ; // Set the arrowButton 's listener to this listener ( recursively ) arrowButton.setOnClickListener ( arrowButtonListener ) ; // toggle our flag field isBtnClicked = ! isBtnClicked ; } } ; @ Overridepublic void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.cardview_refined ) ; // Retrieving the data sent over from MainActivity Intent intent = getIntent ( ) ; Bundle bundle = intent.getExtras ( ) ; if ( bundle ! = null ) { selectedItemPosition = bundle.getInt ( `` Card Index '' ) ; } //Toast.makeText ( this , `` WIDTH : `` + SCREEN_WIDTH , Toast.LENGTH_SHORT ) .show ( ) ; // Initializing our views cardArtImageView = findViewById ( R.id.cardArtImageView ) ; viewDefinitions ( false ) ; setSelectedViewsInit ( ) ; initCardViewData ( selectedItemPosition ) ; arrowButton.setOnClickListener ( arrowButtonListener ) ; } /** * Sets the required textViews as selected to allow automatic scrolling */private void setSelectedViewsInit ( ) { leaderSkillDescText.setSelected ( true ) ; superAttackTitleText.setSelected ( true ) ; superAttackDescText.setSelected ( true ) ; if ( passiveSkillTitleText ! = null & & passiveSkillDescText ! = null ) { passiveSkillTitleText.setSelected ( true ) ; passiveSkillDescText.setSelected ( true ) ; } } /** * Adds the views 's definitions * * @ param initPassiveInfo used to decide whether or not the passiveSkillDesc & ..Title ! = null * so that they can be defined */private void viewDefinitions ( boolean initPassiveInfo ) { leaderSkillDescText = findViewById ( R.id.leaderSkillDesc ) ; superAttackTitleText = findViewById ( R.id.superAttackTitle ) ; superAttackDescText = findViewById ( R.id.superAttackDesc ) ; if ( initPassiveInfo ) { passiveSkillTitleText = findViewById ( R.id.passiveSkillTitle ) ; passiveSkillDescText = findViewById ( R.id.passiveSkillDesc ) ; } else { Log.d ( `` Definitions '' , `` Passive info == null '' ) ; } hpText = findViewById ( R.id.HP ) ; attText = findViewById ( R.id.ATT ) ; defText = findViewById ( R.id.DEF ) ; costText = findViewById ( R.id.COST ) ; arrowButton = findViewById ( R.id.arrowButton ) ; } /** * Initialize the cardViewActivity 's views with the data from the CardInfoDatabase.java class * * @ param selectedItemPosition Used to initialize this activity 's views if the intent was called from the MainScreen Fragment */private void initCardViewData ( int selectedItemPosition ) { if ( cardArtImageView ! = null ) { cardArtImageView.setImageResource ( CardInfoDatabase.cardArts [ selectedItemPosition ] ) ; } leaderSkillDescText.setText ( CardInfoDatabase.leaderSkills [ selectedItemPosition ] ) ; superAttackTitleText.setText ( CardInfoDatabase.superAttacksName [ selectedItemPosition ] ) ; superAttackDescText.setText ( CardInfoDatabase.superAttacksDesc [ selectedItemPosition ] ) ; if ( passiveSkillTitleText ! = null & & passiveSkillDescText ! = null ) { passiveSkillTitleText.setText ( CardInfoDatabase.passiveSkillsName [ selectedItemPosition ] ) ; passiveSkillDescText.setText ( CardInfoDatabase.passiveSkillsDesc [ selectedItemPosition ] ) ; } hpText.setText ( CardInfoDatabase.hp [ selectedItemPosition ] .toString ( ) ) ; attText.setText ( CardInfoDatabase.att [ selectedItemPosition ] .toString ( ) ) ; defText.setText ( CardInfoDatabase.def [ selectedItemPosition ] .toString ( ) ) ; costText.setText ( CardInfoDatabase.cost [ selectedItemPosition ] .toString ( ) ) ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' android : background= '' @ drawable/card_view_bg '' tools : layout_editor_absoluteY= '' 25dp '' > < ImageView android : id= '' @ +id/cardArtImageView '' android : layout_width= '' match_parent '' android : layout_height= '' 0dp '' android : layout_marginEnd= '' 8dp '' android : layout_marginStart= '' 8dp '' android : layout_weight= '' 1 '' android : adjustViewBounds= '' true '' android : scaleType= '' fitCenter '' app : layout_constraintBottom_toTopOf= '' @ +id/cardDetailsImageView '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' android : contentDescription= '' @ string/card_image '' / > < ! -- < ImageView android : id= '' @ +id/cardDetailsImageView '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_gravity= '' center '' android : adjustViewBounds= '' true '' android : cropToPadding= '' false '' android : scaleType= '' fitXY '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : srcCompat= '' @ drawable/card_details_box '' / > -- > < ! -- Implement scrolling text android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : singleLine= '' true '' android : scrollHorizontally= '' true '' android : ellipsize= '' marquee '' android : marqueeRepeatLimit= '' marquee_forever '' -- > < RelativeLayout android : layout_width= '' wrap_content '' android : layout_height= '' 225dp '' android : background= '' @ drawable/card_details_closed '' > < TextView android : id= '' @ +id/COST '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_above= '' @ +id/leaderSkillDesc '' android : layout_marginBottom= '' 9dp '' android : layout_toEndOf= '' @ +id/superAttackDesc '' android : paddingLeft= '' 3dp '' android : paddingRight= '' 3dp '' android : text= '' 00 '' android : textColor= '' @ color/white '' android : textSize= '' 17sp '' android : textStyle= '' bold '' / > < RelativeLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_alignParentStart= '' true '' android : layout_alignParentTop= '' true '' > < TextView android : id= '' @ +id/HP '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentStart= '' true '' android : layout_alignParentTop= '' true '' android : layout_marginStart= '' 33dp '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < TextView android : id= '' @ +id/ATT '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentTop= '' true '' android : layout_marginStart= '' 73dp '' android : layout_toEndOf= '' @ +id/HP '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < TextView android : id= '' @ +id/DEF '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentEnd= '' true '' android : layout_alignParentTop= '' true '' android : layout_marginEnd= '' 42dp '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < /RelativeLayout > < TextView android : id= '' @ +id/leaderSkillDesc '' android : layout_width= '' 250dp '' android : layout_height= '' 15dp '' android : layout_above= '' @ +id/superAttackTitle '' android : layout_alignParentEnd= '' true '' android : layout_marginBottom= '' 13dp '' android : layout_marginEnd= '' 37dp '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ color/white '' android : textSize= '' 13sp '' android : textStyle= '' italic '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintHorizontal_bias= '' 0.496 '' app : layout_constraintVertical_bias= '' 0.626 '' / > < TextView android : id= '' @ +id/superAttackTitle '' android : layout_width= '' 245dp '' android : layout_height= '' 15dp '' android : layout_above= '' @ +id/superAttackDesc '' android : layout_alignStart= '' @ +id/superAttackDesc '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ android : color/holo_blue_light '' android : textSize= '' 12sp '' android : textStyle= '' bold '' app : layout_constraintBottom_toTopOf= '' @ +id/superAttackDesc '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' / > < TextView android : id= '' @ +id/superAttackDesc '' android : layout_width= '' 255dp '' android : layout_height= '' 15dp '' android : layout_alignEnd= '' @ +id/leaderSkillDesc '' android : layout_alignParentBottom= '' true '' android : layout_marginBottom= '' 74dp '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ android : color/white '' android : textSize= '' 13sp '' android : textStyle= '' italic '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' / > < Button android : id= '' @ +id/arrowButton '' android : layout_width= '' 60dp '' android : layout_height= '' 35dp '' android : layout_alignParentBottom= '' true '' android : layout_alignStart= '' @ +id/leaderSkillDesc '' android : layout_marginBottom= '' 7dp '' android : layout_marginStart= '' 75dp '' android : background= '' @ drawable/arrow_up '' android : textOff= '' '' android : textOn= '' '' / > < /RelativeLayout > < /LinearLayout > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' android : background= '' @ drawable/card_view_bg '' tools : layout_editor_absoluteY= '' 25dp '' > < ! -- Implement scrolling text android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : singleLine= '' true '' android : scrollHorizontally= '' true '' android : ellipsize= '' marquee '' android : marqueeRepeatLimit= '' marquee_forever '' -- > < RelativeLayout android : layout_width= '' wrap_content '' android : layout_height= '' match_parent '' android : background= '' @ drawable/card_details_open '' > < TextView android : id= '' @ +id/COST '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_below= '' @ +id/relativeLayout3 '' android : layout_marginTop= '' 48dp '' android : layout_toEndOf= '' @ +id/superAttackDesc '' android : paddingLeft= '' 3dp '' android : paddingRight= '' 3dp '' android : text= '' 00 '' android : textColor= '' @ color/white '' android : textSize= '' 17sp '' android : textStyle= '' bold '' / > < RelativeLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_alignParentStart= '' true '' android : layout_alignParentTop= '' true '' android : id= '' @ +id/relativeLayout3 '' > < TextView android : id= '' @ +id/HP '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentStart= '' true '' android : layout_alignParentTop= '' true '' android : layout_marginStart= '' 33dp '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < TextView android : id= '' @ +id/ATT '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentTop= '' true '' android : layout_marginStart= '' 73dp '' android : layout_toEndOf= '' @ +id/HP '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < TextView android : id= '' @ +id/DEF '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_alignParentEnd= '' true '' android : layout_alignParentTop= '' true '' android : layout_marginEnd= '' 42dp '' android : fontFamily= '' monospace '' android : text= '' 0000 '' android : textColor= '' @ color/white '' android : textSize= '' 18sp '' android : textStyle= '' bold '' tools : text= '' 0000 '' / > < /RelativeLayout > < TextView android : id= '' @ +id/leaderSkillDesc '' android : layout_width= '' 250dp '' android : layout_height= '' 15dp '' android : layout_alignParentEnd= '' true '' android : layout_below= '' @ +id/COST '' android : layout_marginEnd= '' 36dp '' android : layout_marginTop= '' 16dp '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ color/white '' android : textSize= '' 13sp '' android : textStyle= '' italic '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintHorizontal_bias= '' 0.496 '' app : layout_constraintVertical_bias= '' 0.626 '' / > < TextView android : id= '' @ +id/superAttackTitle '' android : layout_width= '' 245dp '' android : layout_height= '' 15dp '' android : layout_alignStart= '' @ +id/leaderSkillDesc '' android : layout_below= '' @ +id/leaderSkillDesc '' android : layout_marginTop= '' 23dp '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ android : color/holo_blue_light '' android : textSize= '' 12sp '' android : textStyle= '' bold '' app : layout_constraintBottom_toTopOf= '' @ +id/superAttackDesc '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' / > < TextView android : id= '' @ +id/superAttackDesc '' android : layout_width= '' 255dp '' android : layout_height= '' 15dp '' android : layout_alignStart= '' @ +id/superAttackTitle '' android : layout_below= '' @ +id/superAttackTitle '' android : layout_marginTop= '' 5dp '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ android : color/white '' android : textSize= '' 13sp '' android : textStyle= '' italic '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' / > < TextView android : id= '' @ +id/passiveSkillTitle '' android : layout_width= '' 255dp '' android : layout_height= '' 17dp '' android : layout_alignStart= '' @ +id/superAttackDesc '' android : layout_below= '' @ +id/superAttackDesc '' android : layout_marginBottom= '' 3dp '' android : layout_marginStart= '' 8dp '' android : layout_marginTop= '' 23dp '' android : background= '' @ color/passiveSkillNameBackground '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : paddingLeft= '' 7dp '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' viewStart '' android : textColor= '' @ android : color/holo_blue_light '' android : textColorHighlight= '' @ android : color/black '' android : textSize= '' 13sp '' android : textStyle= '' italic '' android : visibility= '' visible '' tools : layout_editor_absoluteX= '' 207dp '' tools : layout_editor_absoluteY= '' 543dp '' / > < TextView android : id= '' @ +id/passiveSkillDesc '' android : layout_width= '' 250dp '' android : layout_height= '' 15dp '' android : layout_alignStart= '' @ +id/passiveSkillTitle '' android : layout_below= '' @ +id/passiveSkillTitle '' android : ellipsize= '' marquee '' android : focusable= '' true '' android : focusableInTouchMode= '' true '' android : fontFamily= '' monospace '' android : marqueeRepeatLimit= '' marquee_forever '' android : scrollHorizontally= '' true '' android : singleLine= '' true '' android : textAlignment= '' center '' android : textColor= '' @ android : color/white '' android : textSize= '' 13sp '' android : textStyle= '' italic '' android : visibility= '' visible '' tools : layout_editor_absoluteX= '' 8dp '' tools : layout_editor_absoluteY= '' 602dp '' / > < Button android : id= '' @ +id/arrowButton '' android : layout_width= '' 60dp '' android : layout_height= '' 35dp '' android : layout_alignParentBottom= '' true '' android : layout_alignStart= '' @ +id/leaderSkillDesc '' android : layout_marginBottom= '' 7dp '' android : layout_marginStart= '' 75dp '' android : background= '' @ drawable/arrow_down '' android : textOff= '' '' android : textOn= '' '' / > < /RelativeLayout > < /RelativeLayout >"
C : > set CLASSPATH=.\lib\*
"int int_position ; private GridView gridView ; GridViewAdapter adapter ; ArrayList < Model_images > al_menu = new ArrayList < > ( ) ; private ArrayList < Integer > mSelected = new ArrayList < > ( ) ; boolean boolean_folder ; gridView.setOnItemLongClickListener ( new AdapterView.OnItemLongClickListener ( ) { @ Override public boolean onItemLongClick ( final AdapterView < ? > parent , View view , final int position , long id ) { if ( mSelected.contains ( position ) ) { mSelected.remove ( position ) ; view.setBackgroundColor ( Color.TRANSPARENT ) ; // remove item from list // update view ( v ) state here // eg : remove highlight } else { mSelected.add ( position ) ; view.setBackgroundColor ( Color.LTGRAY ) ; // add item to list // update view ( v ) state here // eg : add highlight } buttoncut.setVisibility ( View.VISIBLE ) ; button2.setVisibility ( View.VISIBLE ) ; button3.setVisibility ( View.VISIBLE ) ; button4.setVisibility ( View.VISIBLE ) ; button5.setVisibility ( View.VISIBLE ) ; buttoncut.setOnClickListener ( new View.OnClickListener ( ) { public void onClick ( View view ) { buttoncut.setVisibility ( View.GONE ) ; button2.setVisibility ( View.GONE ) ; button3.setVisibility ( View.GONE ) ; button4.setVisibility ( View.GONE ) ; button5.setVisibility ( View.GONE ) ; Intent moveIntent = new Intent ( PhotosActivity.this , ImageGallery.class ) ; moveIntent.putIntegerArrayListExtra ( `` selected_images '' , mSelected ) ; startActivity ( moveIntent ) ; } } ) ; public static ArrayList < Model_images > al_images = new ArrayList < > ( ) ; ArrayList < Integer > selectedImages = new ArrayList < > ( ) ; boolean boolean_folder ; Adapter_PhotosFolder obj_adapter ; GridView gv_folder ; private static final int REQUEST_PERMISSIONS = 100 ; int int_position ; selectedImages = getIntent ( ) .getIntegerArrayListExtra ( `` selected_images '' ) ; if ( selectedImages ! = null ) { Toast.makeText ( ImageGallery.this , `` This code gets executed '' , Toast.LENGTH_SHORT ) .show ( ) ; new LongOperation ( ) .execute ( ) ; } private class LongOperation extends AsyncTask < String , Void , String > { @ Override protected String doInBackground ( String ... params ) { for ( int image : selectedImages ) { File sourceImage = new File ( al_images.get ( int_position ) .getAl_imagepath ( ) .get ( image ) ) ; //returns the image File from model class to be moved . File destinationImage = new File ( al_images.get ( int_position ) .getStr_folder ( ) , `` .jpeg '' ) ; try { copyOrMoveFile ( sourceImage , destinationImage , true ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } return null ; } //Method to move the file private void copyOrMoveFile ( File file , File dir , boolean isCopy ) throws IOException { File newFile = new File ( dir , file.getName ( ) ) ; FileChannel outChannel = null ; FileChannel inputChannel = null ; try { outChannel = new FileOutputStream ( newFile ) .getChannel ( ) ; inputChannel = new FileInputStream ( file ) .getChannel ( ) ; inputChannel.transferTo ( 0 , inputChannel.size ( ) , outChannel ) ; inputChannel.close ( ) ; if ( ! isCopy ) file.delete ( ) ; } finally { if ( inputChannel ! = null ) inputChannel.close ( ) ; if ( outChannel ! = null ) outChannel.close ( ) ; } } }"
public class Test { public static void main ( String [ ] args ) { method ( null ) ; } public static void method ( Object o ) { System.out.println ( `` Object impl '' ) ; } public static void method ( String s ) { System.out.println ( `` String impl '' ) ; } } public static void method ( Integer s ) { System.out.println ( `` String impl11 '' ) ; } Integer a = null ;
public class TerminatingStrings { public static void main ( String [ ] args ) { char [ ] broken = new char [ 3 ] ; broken [ 0 ] = ' a ' ; broken [ 1 ] = '\u0000 ' ; broken [ 2 ] = ' c ' ; String s = new String ( broken ) ; System.out.println ( s ) ; } }
"# P.clj ( defprotocol P ( f [ a ] ) ( g [ a b ] ) ) # I.javapublic class I implements P { public Object f ( Object a ) { … } public Object g ( Object a , Object b ) { … } }"
"0000027788|001400000000000000000001224627|G1|||G10000027789|001400000000000000000001224627|D1|||G10000027790|001400000000000000000001224627|D1|||G10000027790|001400000000000000000001224627|D1|||G10000027791|001400000000000000000001224627|G2|||G20000027792|001400000000000000000001224627|D2|||G20000027793|001400000000000000000001224627|D2|||G20000027794|001400000000000000000001224627|G6|||G6 package com.scb.firstreport ; import java.io.BufferedReader ; import java.io.BufferedWriter ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; import java.io.InputStreamReader ; import java.io.OutputStreamWriter ; import java.util.ArrayList ; import java.util.HashSet ; import java.util.List ; import java.util.Set ; import java.util.StringTokenizer ; public class EDWBatchProcessor { //static Logger log = Logger.getLogger ( EDWBatchProcessor.class.getName ( ) ) ; public static void main ( String [ ] args ) throws JRException , NoSuchFieldException , SecurityException , IllegalArgumentException , IllegalAccessException { //log.debug ( `` Hello this is a debug message '' ) ; File fileDir = new File ( `` D : \\EDWFileProcessing\\simple.txt '' ) ; String line = null ; String [ ] split = null ; try { // FileReader reads text files in the default encoding . BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileDir ) , `` UTF-8 '' ) ) ; BufferedWriter bufferedWriter = null ; while ( ( line = in.readLine ( ) ) ! = null ) { //System.out.println ( line ) ; split = line.split ( `` \\| '' ) ; List < String > customerList = new ArrayList < String > ( ) ; if ( ! customerList.contains ( split [ 1 ] ) ) { customerList.add ( split [ 1 ] ) ; bufferedWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( `` D : \\EDWFileProcessing\\output\\ '' +split [ 1 ] + '' .txt '' , true ) , `` UTF-8 '' ) ) ; bufferedWriter.write ( line ) ; bufferedWriter.newLine ( ) ; bufferedWriter.close ( ) ; } else { bufferedWriter.write ( line ) ; bufferedWriter.close ( ) ; } } final File folder = new File ( `` D : \\EDWFileProcessing\\output '' ) ; listFilesForFolder ( folder ) ; // Always close files . in.close ( ) ; } catch ( FileNotFoundException ex ) { System.out.println ( `` Unable to open file ' '' ) ; } catch ( IOException ex ) { System.out.println ( `` Error reading file ' '' ) ; // Or we could just do this : // ex.printStackTrace ( ) ; } } private static void listFilesForFolder ( File folder ) throws NoSuchFieldException , SecurityException , IllegalArgumentException , IllegalAccessException , JRException , IOException { for ( final File fileEntry : folder.listFiles ( ) ) { if ( fileEntry.isDirectory ( ) ) { //listFilesForFolder ( fileEntry ) ; } else { // System.out.println ( fileEntry.getName ( ) .substring ( 0 , 30 ) ) ; //System.out.println ( fileEntry.getAbsolutePath ( ) ) ; File fileDir = new File ( fileEntry.getAbsolutePath ( ) ) ; String line = null ; String lineNew = `` 000000000000000000000000000000000 '' ; String [ ] split = null ; // FileReader reads text files in the default encoding . BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileDir ) , `` UTF-8 '' ) ) ; BufferedWriter bufferedWriter = null ; List < String > customerList = new ArrayList < String > ( ) ; List < String > recTypeList = new ArrayList < String > ( ) ; while ( ( line = in.readLine ( ) ) ! = null ) { // System.out.println ( line ) ; split = line.split ( `` \\| '' ) ; bufferedWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( `` D : \\EDWFileProcessing\\output\\simple\\ '' +split [ 1 ] + '' .txt '' , true ) , `` UTF-8 '' ) ) ; System.out.println ( `` Split2222222222======== > > '' +split [ 2 ] ) ; System.out.println ( `` Split2222222222======== > > '' +recTypeList.contains ( split [ 2 ] ) ) ; if ( ! recTypeList.contains ( split [ 2 ] ) ) { recTypeList.add ( split [ 2 ] ) ; bufferedWriter.newLine ( ) ; bufferedWriter.write ( line ) ; } else { bufferedWriter.newLine ( ) ; line = line.concat ( `` |LL '' ) ; bufferedWriter.write ( line ) ; System.out.println ( `` line new ... ... ... ... ... ... ... '' ) ; //bufferedWriter.newLine ( ) ; //bufferedWriter.write ( lineNew ) ; // bufferedWriter.newLine ( ) ; } //bufferedWriter.newLine ( ) ; bufferedWriter.close ( ) ; } in.close ( ) ; } } } } for ( ListIterator < String > it = recTypeList.listIterator ( ) ; it.hasNext ( ) ; i++ ) { String s1 = it.next ( ) ; if ( s1.equals ( `` G2 '' ) ) { int ind=it.previousIndex ( ) -1 ; String val=recTypeList.get ( ind ) ; String lastop=val.concat ( `` LL '' ) ; bufferedWriter.write ( lastop ) ; System.out.println ( lastop ) ; System.out.println ( val ) ; }"
"package mypkg ; public class JNITest { static final int X_MINOR_MASK = 1 ; } javac -sourcepath ./mypkg -d $ OUTPUT_DIR ./mypkg/JNITest.java javah -jni -d $ OUTPUT_DIR/jni -cp ./ $ OUTPUT_DIR mypkg.JNITest /* DO NOT EDIT THIS FILE - it is machine generated */ # include < jni.h > /* Header for class mypkg_JNITest */ # ifndef _Included_mypkg_JNITest # define _Included_mypkg_JNITest # ifdef __cplusplusextern `` C '' { # endif # undef mypkg_JNITest_X_MINOR_MASK # define mypkg_JNITest_X_MINOR_MASK 1L # ifdef __cplusplus } # endif # endif javac -h ./ $ OUTPUT_DIR/jni -sourcepath ./mypkg -d $ OUTPUT_DIR ./mypkg/JNITest.java package mypkg ; public class JNITest { static final int X_MINOR_MASK = 1 ; public native int intMethod ( int n ) ; } /* DO NOT EDIT THIS FILE - it is machine generated */ # include < jni.h > /* Header for class mypkg_JNITest */ # ifndef _Included_mypkg_JNITest # define _Included_mypkg_JNITest # ifdef __cplusplusextern `` C '' { # endif # undef mypkg_JNITest_X_MINOR_MASK # define mypkg_JNITest_X_MINOR_MASK 1L/* * Class : mypkg_JNITest * Method : intMethod * Signature : ( I ) I */JNIEXPORT jint JNICALL Java_mypkg_JNITest_intMethod ( JNIEnv * , jobject , jint ) ; # ifdef __cplusplus } # endif # endif"
ArrayList < ArrayList < ArrayList < Double > > > list = new ArrayList < ArrayList < ArrayList < Double > > > ( ) ;
"package launcher ; import javafx.application.Application ; import javafx.geometry.Bounds ; import javafx.geometry.Side ; import javafx.scene.Node ; import javafx.scene.Scene ; import javafx.scene.chart.LineChart ; import javafx.scene.chart.NumberAxis ; import javafx.scene.layout.AnchorPane ; import javafx.stage.Stage ; public class Main extends Application { @ Override public void start ( Stage primaryStage ) throws Exception { NumberAxis numberAxis = new NumberAxis ( ) ; LineChart < Number , Number > chart = new LineChart < > ( numberAxis , new NumberAxis ( ) ) ; chart.getYAxis ( ) .setSide ( Side.RIGHT ) ; AnchorPane buffer = new AnchorPane ( ) ; buffer.setStyle ( `` -fx-background-color : gray ; '' + `` -fx-opacity : 0.5 '' ) ; AnchorPane anchorPane = new AnchorPane ( ) ; AnchorPane.setTopAnchor ( chart , 0.0 ) ; AnchorPane.setRightAnchor ( chart , 0.0 ) ; AnchorPane.setBottomAnchor ( chart , 0.0 ) ; AnchorPane.setLeftAnchor ( chart , 0.0 ) ; anchorPane.getChildren ( ) .addAll ( chart , buffer ) ; Scene scene = new Scene ( anchorPane ) ; primaryStage.setScene ( scene ) ; primaryStage.setMaximized ( true ) ; primaryStage.show ( ) ; resetBuffer ( chart , buffer , anchorPane ) ; anchorPane.widthProperty ( ) .addListener ( ( observable , oldValue , newValue ) - > { resetBuffer ( chart , buffer , anchorPane ) ; } ) ; } private void resetBuffer ( LineChart < Number , Number > chart , AnchorPane buffer , AnchorPane anchorPane ) { Node chartPlot = chart.lookup ( `` .chart-plot-background '' ) ; Bounds bounds = anchorPane.sceneToLocal ( chartPlot.localToScene ( chartPlot.getBoundsInLocal ( ) ) ) ; buffer.setPrefWidth ( bounds.getWidth ( ) ) ; buffer.setPrefHeight ( bounds.getHeight ( ) ) ; AnchorPane.setLeftAnchor ( buffer , bounds.getMinX ( ) ) ; AnchorPane.setTopAnchor ( buffer , bounds.getMinY ( ) ) ; } }"
"private Transaction.Type getTransactionType ( TransactionDefinition definition , Neo4jTransactionObject txObject ) { Transaction.Type type ; if ( definition.isReadOnly ( ) & & txObject.isNewSessionHolder ( ) ) { type = Transaction.Type.READ_ONLY ; } else if ( txObject.transactionData ! = null ) { type = txObject.transactionData.type ( ) ; } else { type = Transaction.Type.READ_WRITE ; } return type ; }"
"public void playMoveInternal ( GameState game ) throws IllegalMoveException , InstantiationException , IllegalAccessException , IllegalMoveSpecificationException { ThreadGroup group = new ThreadGroup ( `` playthread group '' ) ; Thread playthread = null ; group.setMaxPriority ( Thread.MIN_PRIORITY ) ; GameMetaData meta = null ; StrategyGamePlayer player = null ; try { GameState newgame = ( GameState ) game.clone ( ) ; SandboxedURLClassLoader loader = new SandboxedURLClassLoader ( // recreating this each time means static fields do n't persist urls [ newgame.getCurPlayer ( ) - 1 ] , playerInterface ) ; Class < ? > playerClass = loader.findPlayerClass ( ) ; GameTimer timer = new GameTimer ( newgame.getCurPlayer ( ) == 1 ? timelimit : timelimit2 ) ; // time starts ticking here ! meta = new GameMetaData ( ( GameTimer ) timer.clone ( ) ) ; try { player = ( StrategyGamePlayer ) playerClass.newInstance ( ) ; } catch ( Exception e ) { System.err.println ( `` Could n't create player module instance ! `` ) ; e.printStackTrace ( ) ; game.resign ( GameMoveType.MOVE_ILLEGAL ) ; return ; } boolean checkSleepy = true ; playthread = new Thread ( group , new MoveMakerThread ( player , meta , newgame ) , `` MoveMaker thread '' ) ; int badCount = 0 ; playthread.start ( ) ; try { while ( ( timer.getTimeRemaining ( ) > 0 ) & & ( playthread.isAlive ( ) ) & & ( ! stopping ) & & ( ! forceMove ) ) { playthread.join ( 50 ) ; if ( checkSleepy ) { Thread.State thdState = playthread.getState ( ) ; if ( ( thdState == Thread.State.TIMED_WAITING ) || ( thdState == Thread.State.WAITING ) ) { // normally , main thread will be busy Thread [ ] allThreads = new Thread [ group .activeCount ( ) * 2 ] ; int numThreads = group.enumerate ( allThreads ) ; boolean bad = true ; for ( int i = 0 ; i < numThreads ; i++ ) { // check some player thread somewhere is doing something thdState = allThreads [ i ] .getState ( ) ; if ( ( thdState ! = Thread.State.TIMED_WAITING ) & & ( thdState ! = Thread.State.WAITING ) ) { bad = false ; break ; // found a good thread , so carry on } } if ( ( bad ) & & ( badCount++ > 100 ) ) // means player has been sleeping for an expected 5 // sec , which is naughty break ; } } } } catch ( InterruptedException e ) { System.err.println ( `` Interrupted : `` + e ) ; } } catch ( Exception e ) { System.err.println ( `` Could n't play the game : `` + e ) ; e.printStackTrace ( ) ; } playthread.destroy ( ) ; try { Thread.sleep ( 1000 ) ; } catch ( Exception e ) { } group.stop ( ) ; forceMove = false ; try { if ( ! stopping ) try { if ( ! game.isLegalMove ( meta.getBestMove ( ) ) ) { game.resign ( GameMoveType.MOVE_ILLEGAL ) ; } else game.makeMove ( ( GameMove ) ( meta.getBestMove ( ) .clone ( ) ) ) ; // We rely here on the isLegalMove call to make sure that // the return type is the right ( final ) class so that the clone ( ) // call ca n't execute dodgy code } catch ( IllegalMoveException e ) { game.resign ( GameMoveType.MOVE_ILLEGAL ) ; } catch ( NullPointerException e ) { // did n't ever choose a move to make game.resign ( GameMoveType.MOVE_OUT_OF_TIME ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; game.resign ( GameMoveType.MOVE_OUT_OF_TIME ) ; } }"
System.out.println ( 2.00-1.10 ) System.out.println ( ( double ) ( 2.00-1.10 ) ) System.out.println ( ( float ) ( 2.00-1.10 ) )
short b = true ? 1 : 1 ; boolean bool = true ; short s = bool ? 1 : 1 ;
class s extends Thread { int j=0 ; public void run ( ) { try { Thread.sleep ( 5000 ) ; } catch ( Exception e ) { } j=100 ; } public static void main ( String args [ ] ) { s t1=new s ( ) ; t1.start ( ) ; System.out.println ( t1.j ) ; } }
"@ Entity @ Tablepublic class Person { @ Id @ GeneratedValue ( strategy = GenerationType.AUTO ) public Long id ; @ Column public String firstName ; @ Column public String lastName ; @ Column public Boolean active ; } public class PersonVO { public Long id ; public String fullName ; } IQueryable < Person > personsQuery = entityFrameworkDbContext.Persons ; // FIRST POINT - Here i could make some predefined filtering like 'only active ' , 'from the same city ' ... at the database modelpersonsQueryWithPreDefinedFilters = personsQuery.Where ( person = > person.active == true ) ; IQueryable < PersonVO > personsProjectedToVO = personsQueryWithPreDefinedFilters.Select ( person = > new PersonVO ( ) { id = person.id , fullName = person.firstName + `` `` + person.lastName } ) ; // SECOND POINT - At this point i could add more filtering based at PersonVO modelif ( ! String.IsNullOrWhiteSpace ( fullNameRequestParameter ) ) { personsProjectedToVO = personsProjectedToVO.Where ( personVO = > personVO.FullName == fullNameRequestParameter ) ; } // The generated SQL at database is with both where ( before and after projection ) List < PersonVO > personsToReturn = personsProjectedToVO.ToList ( ) ; CriteriaBuilder cb = this.entityManager.getCriteriaBuilder ( ) ; CriteriaQuery < PersonVO > cq = cb.createQuery ( PersonVO.class ) ; Root < Person > root = cq.from ( Person.class ) ; // FIRST POINT - Here i could make some predefined filtering like 'only active ' , 'from the same city ' ... at the database modelcq.where ( cb.equal ( root.get ( Person_.active ) , true ) ) ; Expression < String > fullName = cb.concat ( root.get ( Person_.firstName ) , root.get ( Person_.lastName ) ) ; cq.select ( cb.construct ( PersonVO.class , root.get ( Person_.id ) , fullName ) ) ; // SECOND POINT - At this point i could add more filtering based at PersonVO model ? ? ? HOW ? ? ? if ( fullNameRequestParameter ! = null ) { cq.where ( cb.equal ( fullName , fullNameRequestParameter ) ) ; // i only could use based at the fullName expression used , but could i make a Predicate based only on PersonVO model without knowing or having the expression ? }"
int arr [ ] [ ] =new int [ 3 ] [ 2 ] ; arr [ 0 ] [ 0 ] =00 ; arr [ 0 ] [ 1 ] =01 ; arr [ 1 ] [ 0 ] =10 ; arr [ 1 ] [ 1 ] =0011 ; arr [ 2 ] [ 0 ] =0020 ; arr [ 2 ] [ 1 ] =21 ; for ( int a [ ] : arr ) { for ( int c : a ) { System.out.println ( c ) ; } }
"@ Retention ( RetentionPolicy.SOURCE ) @ Target ( ElementType.FIELD ) public @ interface Arguments { String [ ] value ( ) ; } @ Arguments ( value = { `` % balance % '' , `` % name % '' } ) public static String USER_INFO = `` Username : % name % - money : % balance % '' ; public static String USER_INFONameReplacement ( String name ) { return USER_INFO.replace ( `` % name % '' , name ) ; } public static String USER_INFOAllReplacement ( String name , String balance ) { return USER_INFO.replace ( `` % name % '' , name ) .replace ( `` % balance % '' , balance ) ; } public static String USER_INFOBalanceReplacement ( String balance ) { return USER_INFO.replace ( `` % balance % '' , balance ) ; } @ SupportedAnnotationTypes ( { `` io.github.freakyville.configHelper.annotations.Arguments '' } ) @ SupportedSourceVersion ( SourceVersion.RELEASE_8 ) @ AutoService ( Processor.class ) public class SuggestProcessor extends AbstractProcessor { @ Overridepublic synchronized void init ( ProcessingEnvironment env ) { } @ Overridepublic boolean process ( Set < ? extends TypeElement > annoations , RoundEnvironment env ) { for ( TypeElement annoation : annoations ) { Set < ? extends Element > annotatedElements = env.getElementsAnnotatedWith ( annoation ) ; Map < Boolean , List < Element > > annotatedFields = annotatedElements.stream ( ) .collect ( Collectors.partitioningBy ( element - > ( ( ArrayType ) element.asType ( ) ) .getComponentType ( ) .getClass ( ) .equals ( PrimitiveType.class ) ) ) ; List < Element > setters = annotatedFields.get ( true ) ; if ( setters.isEmpty ( ) ) { continue ; } String className = ( ( TypeElement ) setters.get ( 0 ) .getEnclosingElement ( ) ) .getQualifiedName ( ) .toString ( ) ; Map < String , List < String > > setterMap = setters.stream ( ) .collect ( Collectors.toMap ( setter - > setter.getSimpleName ( ) .toString ( ) , setter - > Arrays.asList ( setter.getAnnotation ( Arguments.class ) .value ( ) ) ) ) ; try { writeBuilderFile ( className , setterMap ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } return true ; } private void writeBuilderFile ( String className , Map < String , List < String > > setterMap ) throws IOException { String packageName = null ; int lastDot = className.lastIndexOf ( ' . ' ) ; if ( lastDot > 0 ) { packageName = className.substring ( 0 , lastDot ) ; } String builderSimpleClassName = className .substring ( lastDot + 1 ) ; JavaFileObject builderFile = processingEnv.getFiler ( ) .createSourceFile ( className ) ; try ( PrintWriter out = new PrintWriter ( builderFile.openWriter ( ) ) ) { if ( packageName ! = null ) { out.print ( `` package `` ) ; out.print ( packageName ) ; out.println ( `` ; '' ) ; out.println ( ) ; } out.print ( `` public class `` ) ; out.print ( builderSimpleClassName ) ; out.println ( `` { `` ) ; out.println ( ) ; setterMap.forEach ( ( key , orgArgNames ) - > { for ( int i = 0 ; i < orgArgNames.size ( ) ; i++ ) { List < String > subList = orgArgNames.subList ( 0 , i + 1 ) ; List < String > argNames = subList.stream ( ) .map ( v - > v.replace ( `` % '' , `` '' ) + `` Replacement '' ) .collect ( Collectors.toList ( ) ) ; List < String > argsWithTypes = argNames.stream ( ) .map ( v - > `` String `` + v ) .collect ( Collectors.toList ( ) ) ; String argumentList = `` ( `` + String.join ( `` '' , argsWithTypes ) .substring ( 0 , argsWithTypes.size ( ) - 3 ) + `` ) '' ; String methodName ; if ( orgArgNames.size ( ) < = 1 ) { methodName = key + `` Replace '' + subList.stream ( ) .map ( v - > v.replace ( `` % '' , `` '' ) ) .collect ( Collectors.joining ( `` '' ) ) ; } else { methodName = key + `` Replace '' + subList.stream ( ) .map ( v - > v.replace ( `` % '' , `` '' ) .substring ( 0 , 1 ) .toUpperCase ( ) + v.substring ( 1 ) ) .collect ( Collectors.joining ( `` '' ) ) ; } out.print ( `` public static `` ) ; out.print ( methodName ) ; out.print ( argumentList ) ; out.println ( `` { `` ) ; StringBuilder replaceSB = new StringBuilder ( ) ; replaceSB.append ( key ) ; for ( int i1 = 0 ; i1 < subList.size ( ) ; i1++ ) { replaceSB .append ( `` .replace ( `` ) .append ( `` \ '' '' ) .append ( subList.get ( i ) ) .append ( `` \ '' '' ) .append ( `` , '' ) .append ( argNames.get ( i ) ) .append ( `` ) '' ) ; } String replace = replaceSB.toString ( ) ; out.println ( `` return `` + replace + `` ; '' ) ; out.println ( `` } '' ) ; out.println ( `` '' ) ; } } ) ; out.println ( `` } '' ) ; } } }"
99 8 99 8 7 8 99 8 7 6 7 8 9. . .. . . int rowCnt = 5 ; for ( int i = 1 ; i < = rowCnt ; i++ ) { int val = 9 ; int delta = -1 ; int rowLen = i * 2 - 1 ; for ( int j = 1 ; j < = rowLen ; j++ ) { System.out.print ( val + `` `` ) ; val += delta ; if ( j > = rowLen / 2 ) delta = 1 ; } System.out.println ( ) ; }
public class InvalidValue { private int i = giveMeJ ( ) ; private int j = 20 ; private int giveMeJ ( ) { return j ; } public static void main ( String [ ] args ) { System.out.println ( `` i : `` + new InvalidValue ( ) .i ) ; } }
"self.generated = [ self.generate ( ) for _ in range ( length ) ] this.generated = IntStream.range ( 0 , length ) .mapToObj ( n - > this.generate ( ) ) .collect ( Collectors.toList ( ) ) ;"
collectionOfThings . stream ( ) . filter ( thing - > thing.condition1 ( ) & & thing.condition2 ( ) ) collectionOfThings .stream ( ) .filter ( thing - > thing.condition1 ( ) ) .filter ( thing - > thing.condition2 ( ) )
"List < String > strings72to200 = Stream .concat ( Stream.of ( IntStream.range ( 72 , 129 ) ) , Stream.of ( IntStream.range ( 132 , 200 ) ) ) .map ( e - > String.valueOf ( e ) ) .collect ( Collectors.toList ( ) ) ; [ java.util.stream.IntPipeline $ Head @ 56d13c31 , java.util.stream.IntPipeline $ Head @ 5f9127c5 ] List < String > strings50to59 = IntStream.range ( 50 , 60 ) .mapToObj ( e - > String.valueOf ( e ) ) .collect ( Collectors.toList ( ) ) ;"
@ Servicepublic class PizzaService { private boolean peperoni = false ; private boolean cheese = false ; private boolean bacon = false ; public PizzaService withPeperoni ( ) { peperoni = true ; return this ; } public PizzaService withCheese ( ) { cheese = true ; return this ; } public PizzaService withBacon ( ) { bacon = true ; return this ; } public Pizza bake ( ) { // create the instance and return it } } @ Path ( 'pizza ' ) public class PizzaResource { @ Inject PizzaService pizzaService ; @ GET public Response getPizza ( ) { Pizza pizza = pizzaService .withPeperoni ( ) .withCheese ( ) .bake ( ) ; return Response.ok ( pizza ) .build ( ) ; } }
ObjectOutputStream oos = new ObjectOutputStream ( *fileoutputstream* ) ; oos.writeObject ( activePlugins ) ; oos.close ( ) ; ObjectInputStream ois = new ObjectInputStream ( *fileinputstream* ) ; activePlugins = ( ArrayList < IPlugin > ) ois.readObject ( ) ;
Matcher m = Pattern.compile ( `` ( a1.* ? ) a1 '' ) .matcher ( `` a1wwa1xxa1yya1zz '' ) ; while ( m.find ( ) ) { String myGroup = m.group ( 1 ) ; }
"public void execute ( Tuple tuple ) { String word = tuple.getString ( 0 ) ; StringBuilder exclamatedWord = new StringBuilder ( ) ; exclamatedWord.append ( word ) .append ( `` ! ! ! `` ) ; _collector.emit ( tuple , new Values ( exclamatedWord.toString ( ) ) ) ; long count = 30 ; redis.publish ( `` WordCountTopology '' , exclamatedWord.toString ( ) + `` | '' + Long.toString ( count ) ) ; }"
List < A > x ; List < ? super B > y = x ; List < A > < : List < ? super B >
"private static HttpsServer createHttpsServer ( ) throws KeyStoreException , NoSuchAlgorithmException , CertificateException , FileNotFoundException , IOException , UnrecoverableKeyException , KeyManagementException , NoSuchProviderException { final String keyStoreType = `` ... '' ; final String keyStoreFile = `` ... '' ; final String keyStorePassword = `` ... '' ; final String trustStoreType = `` ... '' ; final String trustStoreFile = `` ... '' ; final String trustStorePassword = `` ... '' ; final String hostName = `` ... '' ; final int portNumber = `` ... ; final String sslContextName = `` TLSv1.2 '' ; KeyStore keyStore = KeyStore.getInstance ( keyStoreType ) ; keyStore.load ( new FileInputStream ( keyStoreFile ) , keyStorePassword.toCharArray ( ) ) ; KeyStore trustStore = KeyStore.getInstance ( trustStoreType ) ; trustStore.load ( new FileInputStream ( trustStoreFile ) , trustStorePassword.toCharArray ( ) ) ; KeyManagerFactory keyFactory = KeyManagerFactory.getInstance ( KeyManagerFactory.getDefaultAlgorithm ( ) ) ; keyFactory.init ( keyStore , keyStorePassword.toCharArray ( ) ) ; TrustManagerFactory trustFactory = TrustManagerFactory.getInstance ( TrustManagerFactory.getDefaultAlgorithm ( ) ) ; trustFactory.init ( trustStore ) ; SSLContext sslContext = SSLContext.getInstance ( sslContextName ) ; sslContext.init ( keyFactory.getKeyManagers ( ) , trustFactory.getTrustManagers ( ) , getSecureRandom ( pConfiguration ) ) ; HttpsServer httpsServer = HttpsServer.create ( new InetSocketAddress ( hostName , portNumber ) , portNumber ) ; HttpsConfigurator configurator = getHttpsConfigurator ( pConfiguration , sslContext ) ; httpsServer.setHttpsConfigurator ( configurator ) ; httpsServer.start ( ) ; return httpsServer ; } private static Endpoint publishSsl ( final HttpsServer pHttpsServer , final String pPath , final Object implementationObject ) { LOGGER.entering ( LOGGER_SOURCE_CLASS , `` publishSsl '' ) ; HttpContext httpContext = pHttpsServer.createContext ( pPath ) ; Endpoint endPoint = Endpoint.create ( implementationObject ) ; endPoint.publish ( httpContext ) ; return endPoint ; } private static HttpsConfigurator getHttpsConfigurator ( final MyProperties pConfiguration , SSLContext pSslContext ) { EnforcingHttpsConfigurator configurator = new EnforcingHttpsConfigurator ( pSslContext ) ; // Those are hidden properties to override the SSL configuration if needed . final String ciphers = pConfiguration.getProperty ( `` overrideSslConfiguration.ciphers '' , `` '' ) ; final boolean needClientAuth = pConfiguration.getPropertyAsBoolean ( `` overrideSslConfiguration.needClientAuth '' , true ) ; final String protocols = pConfiguration.getProperty ( `` overrideSslConfiguration.protocols '' , `` '' ) ; if ( ! ciphers.isEmpty ( ) ) { configurator.setCiphers ( ciphers ) ; } configurator.setNeedClientAuth ( needClientAuth ) ; if ( ! protocols.isEmpty ( ) ) { configurator.setProtocols ( protocols ) ; } return configurator ; } public class EnforcingHttpsConfigurator extends HttpsConfigurator { private static final Logger LOGGER = Logger.getLogger ( EnforcingHttpsConfigurator.class.getCanonicalName ( ) ) ; private static final String LOGGER_SOURCE_CLASS = EnforcingHttpsConfigurator.class.getName ( ) ; private String mProtocols = `` TLSv1.2 '' ; private String mCiphers = `` TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , TLS_RSA_WITH_AES_128_GCM_SHA256 '' ; private boolean mNeedClientAuth = true ; public EnforcingHttpsConfigurator ( SSLContext pSslContext ) { super ( pSslContext ) ; } public String getProtocols ( ) { return mProtocols ; } public void setProtocols ( String pProtocols ) { LOGGER.warning ( `` Override SSL configuration , Set protocols ' '' + pProtocols + `` ' . This is potentially unsafe . `` ) ; mProtocols = pProtocols ; } public String getCiphers ( ) { return mCiphers ; } public void setCiphers ( String pCiphers ) { LOGGER.warning ( `` Override SSL configuration , Set ciphers ' '' + pCiphers + `` ' . This is potentially unsafe . `` ) ; mCiphers = pCiphers ; } public boolean isNeedClientAuth ( ) { return mNeedClientAuth ; } public void setNeedClientAuth ( boolean pNeedClientAuth ) { if ( ! pNeedClientAuth ) { LOGGER.warning ( `` Override SSL configuration , no client authentication required . This is potentially unsafe . `` ) ; } mNeedClientAuth = pNeedClientAuth ; } @ Overridepublic void configure ( HttpsParameters params ) { LOGGER.entering ( LOGGER_SOURCE_CLASS , `` configure '' ) ; final SSLContext context = getSSLContext ( ) ; final SSLParameters sslParams = context.getDefaultSSLParameters ( ) ; // Override current values sslParams.setCipherSuites ( mCiphers.split ( `` , '' ) ) ; sslParams.setProtocols ( mProtocols.split ( `` , '' ) ) ; sslParams.setNeedClientAuth ( mNeedClientAuth ) ; params.setSSLParameters ( sslParams ) ; LOGGER.exiting ( LOGGER_SOURCE_CLASS , `` configure '' ) ; } }"
"public class App { final int [ ] data ; static App instance ; public App ( ) { this.data = new int [ ] { 1 , 0 } ; this.data [ 1 ] = 2 ; } public static void main ( String [ ] args ) { new Thread ( new Runnable ( ) { public void run ( ) { instance = new App ( ) ; } } ) .start ( ) ; while ( instance == null ) { /*NOP*/ } System.out.println ( Arrays.toString ( instance.data ) ) ; } } public App ( ) { this.data = new int [ ] { 1 , 0 } ; this.data [ 1 ] = 2 ; } public App ( ) { int [ ] data = new int [ ] { 1 , 0 } ; data [ 1 ] = 2 ; this.data = data ; }"
public class A { } public class B { public void m ( A a ) { } } public class C { public static void main ( String [ ] args ) { B b = new B ( ) ; System.out.println ( `` hello ! `` ) ; } } public class D { } public class E { public void omg ( D d ) { } public static void main ( String [ ] args ) { E e = new E ( ) ; } } Exception in thread `` main '' java.lang.NoClassDefFoundError : D at java.lang.Class.getDeclaredMethods0 ( Native Method ) at java.lang.Class.privateGetDeclaredMethods ( Unknown Source ) at java.lang.Class.getMethod0 ( Unknown Source ) at java.lang.Class.getMethod ( Unknown Source ) at sun.launcher.LauncherHelper.getMainMethod ( Unknown Source ) at sun.launcher.LauncherHelper.checkAndLoadMain ( Unknown Source ) Caused by : java.lang.ClassNotFoundException : D at java.net.URLClassLoader $ 1.run ( Unknown Source )
"import java.io.IOException ; public class StrangeError { public static void main ( String [ ] args ) { try { Process process = new ProcessBuilder ( `` cmd '' , `` /c '' , `` \ '' C : \\Program Files ( x86 ) \\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\ '' amd64 & & set '' ) .start ( ) ; process.waitFor ( ) ; } catch ( IOException|InterruptedException e ) { System.out.println ( e.getMessage ( ) ) ; } } }"
"< ScrollView xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < LinearLayout android : orientation= '' vertical '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' > < RelativeLayout android : layout_alignParentTop= '' true '' android : layout_width= '' match_parent '' android : layout_height= '' 180dp '' > < android.support.v7.widget.AppCompatImageView android : id= '' @ +id/header_photo '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : adjustViewBounds= '' true '' android : tint= '' # 80000000 '' android : scaleType= '' centerCrop '' / > < LinearLayout android : orientation= '' vertical '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_centerVertical= '' true '' android : layout_centerHorizontal= '' true '' > < TextView android : id= '' @ +id/header_text '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_gravity= '' center '' android : gravity= '' center '' android : paddingTop= '' 2dp '' android : paddingBottom= '' 2dp '' android : textColor= '' @ color/text_SecondaryColor '' android : textSize= '' @ dimen/header_xxlarge '' / > < View android : id= '' @ +id/divider '' android : layout_width= '' 0dp '' android : layout_height= '' @ dimen/hr_thick '' android : background= '' @ color/accent_PrimaryColor '' / > < /LinearLayout > < /RelativeLayout > < LinearLayout android : orientation= '' vertical '' android : layout_margin= '' 20dp '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' > < android.support.v7.widget.RecyclerView android : id= '' @ +id/recyclerview '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' / > < Button android : id= '' @ +id/button_more '' android : layout_marginTop= '' 6dp '' android : layout_marginBottom= '' 6dp '' android : layout_width= '' 400px '' android : layout_height= '' 100px '' android : layout_gravity= '' center '' android : gravity= '' center '' android : background= '' @ drawable/button_dark '' android : textColor= '' @ drawable/button_dark_textcolor '' / > < /LinearLayout > < /LinearLayout > < /ScrollView > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < include android : layout_height= '' wrap_content '' android : layout_width= '' match_parent '' layout= '' @ layout/toolbar '' / > < /LinearLayout > < FrameLayout android : id= '' @ +id/contentframe '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' / > < /LinearLayout > < RelativeLayout android : layout_width= '' 300dp '' android : layout_height= '' match_parent '' android : layout_gravity= '' start '' android : background= '' @ color/background_Secondary '' > < ! -- Relative Layout : Back Button -- > < RelativeLayout android : id= '' @ +id/menu_backcontainer '' android : layout_width= '' match_parent '' android : layout_height= '' ? attr/actionBarSize '' > < ImageView android : id= '' @ +id/menu_back '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_marginRight= '' 20dp '' android : src= '' @ drawable/angle '' android : layout_centerVertical= '' true '' android : layout_alignParentEnd= '' true '' / > < /RelativeLayout > < ! -- List View : Menu Drawer Content -- > < ListView android : id= '' @ +id/menu '' android : layout_below= '' @ id/menu_backcontainer '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : choiceMode= '' singleChoice '' android : background= '' @ color/background_PrimaryDarkColor '' > < /ListView > < /RelativeLayout > < /android.support.v4.widget.DrawerLayout > recyclerView = ( RecyclerView ) view.findViewById ( R.id.recyclerview ) ; LinearLayoutManager layoutManager = new LinearLayoutManager ( getContext ( ) .getApplicationContext ( ) ) ; recyclerView.setLayoutManager ( layoutManager ) ; recyclerView.setNestedScrollingEnabled ( false ) ; drawerlayout = ( DrawerLayout ) findViewById ( R.id.drawer ) ; menu = ( ListView ) findViewById ( R.id.menu ) ; MenuAdapter adapter = new MenuAdapter ( this , R.layout.listview_menuitem , menuItemArray ) ; menu.setAdapter ( adapter ) ; menu.setOnItemClickListener ( new menuItemClickListener ( ) ) ; menuToggle = new ActionBarDrawerToggle ( this , drawerlayout , toolbar , R.string.app_name , R.string.app_name ) ; drawerlayout.setDrawerListener ( menuToggle ) ; menuToggle.syncState ( ) ;"
"public static void main ( String ... args ) { String path = `` C : \\Workspace\\project '' ; File file = null ; for ( String part : path.split ( `` \\\\ '' ) ) { file = new File ( file , part ) ; } System.out.println ( file ) ; // prints `` C : Workspace\project '' for JDK 9+ // prints `` C : \Workspace\project '' for JDK 8 }"
"public void save ( View v ) { OkHttpClient client = new OkHttpClient ( ) ; String authString = MainActivity.CLIENT_ID + `` : '' ; String encodedAuthString = Base64.encodeToString ( authString.getBytes ( ) , Base64.NO_WRAP ) ; System.out.println ( `` myaccesstoken is : `` + myaccesstoken ) ; System.out.println ( `` the image id is : `` + myimageid ) ; Request request = new Request.Builder ( ) .addHeader ( `` User-Agent '' , `` Sample App '' ) .addHeader ( `` Authorization '' , `` Bearer `` + myaccesstoken ) .addHeader ( `` Content-Type '' , `` application/x-www-form-urlencoded ; charset=UTF-8 '' ) .url ( `` https : //oauth.reddit.com/api/save.json ? '' ) .post ( RequestBody.create ( MediaType.parse ( `` application/x-www-form-urlencoded '' ) , `` '' + myimageid + `` 1 '' ) ) .build ( ) ; client.newCall ( request ) ; }"
MyActivity extends MyBaseClass - > MyBaseClass extends Activity - > Activity MyActivity extends MyBaseClass < MapActivity > - > MyBaseClass < T > extends T - > T MyActivity extends MyBaseMapClass - > MyBaseMapClass extends MapActivity - > MapActivity MyActivity extends MyBaseClass - > MyBaseClass extends Activity - > ActivityMyActivity2 extends AnotherBaseClass - > AnotherBaseClass extends MyBaseClass - > MyBaseClass extends Activity - > Activity
"HashMap < Integer , Object > foo = new HashMap < > ( ) ; ArrayList < Object > bar = new ArrayList < > ( ) ; bar.add ( 10_000 , new Object ( ) ) ;"
"DateTimeFormatter formatter = DateTimeFormatter.ofPattern ( `` EEE MMM d HH : mm : ss yyyy '' ) ; LocalDateTime dateTime = LocalDateTime.parse ( date , formatter ) ; Sat Jul 2 08:52:13 2016Sat Jul 12 08:52:13 2016 EEE MMM d HH : mm : ss yyyy"
"String [ ] colors = { `` Red '' , `` Orange '' , `` Yellow '' } ;"
abstract class Base < T extends Base < T > > { } class Variant < T extends Variant < T > > extends Base < T > { }
if ( sql1.matches ( `` ( ? i ) ^CREATE\\s+TABLE\\p { all } * '' ) ) { // do something ; }
"runtime = CreateObject ( `` java '' , `` java.lang.Runtime '' ) .getRuntime ( ) ; var usedGB = ( runtime.totalMemory ( ) - runtime.freeMemory ( ) ) / 1024.^3 ; // bytes - > KB - > MB - > GB"
class my_class { int a = 8 ; my_class ( ) { System.out.println ( a ) ; } } public class NewClass { public static void main ( String [ ] argue ) { new my_class ( ) ; new my_class ( ) ; } }
"for ( int i = 0 ; i < json.length ( ) ; i++ ) { HashMap < String , String > map = new HashMap < String , String > ( ) ; JSONObject e = json.getJSONObject ( i ) ; map.put ( `` mDate '' , `` '' + e.getString ( `` mDate '' ) ) ; mylist.add ( map ) ; }"
"public Movie create ( NewMovieDTO newMovieDTO ) { Movie movieForSaving = NewMovieDTOToMovie.map ( newMovieDTO ) ; List < Actor > actorsForSaving = new ArrayList < Actor > ( ) ; movieForSaving.getActors ( ) .forEach ( ( actor ) - > { Optional < Actor > actorInDatabase = actorService .findByNameAndSurname ( actor.getName ( ) , actor.getSurname ( ) ) ; if ( actorInDatabase.isPresent ( ) ) { actorForSaving.add ( actorInDatabase.get ( ) ) ; } else { actorForSaving.add ( actor ) ; } } ) ; movieForSaving.setActors ( actorForSaving ) ; return movieRepository.save ( movieForSaving ) ; } public Movie create ( NewMovieDTO newMovieDTO ) { Movie movieForSaving = NewMovieDTOToMovie.map ( newMovieDTO ) ; List < Actor > actorsForSaving = new ArrayList < Actor > ( ) ; /*Line 1*/ movieForSaving.getActors ( ) .forEach ( ( actor ) - > { Optional < Actor > actorInDatabase = actorService .findByNameAndSurname ( actor.getName ( ) , actor.getSurname ( ) ) ; /*Line 2*/ ( actorInDatabase.isPresent ( ) ) ? actorForSaving.add ( actorInDatabase.get ( ) ) : actorForSaving.add ( actor ) ; /*Line 3*/ } ) ; movieForSaving.setActors ( actorForSaving ) ; return movieRepository.save ( movieForSaving ) ; } - Syntax error , insert `` AssignmentOperator Expression '' to complete Assignment - Syntax error , insert `` } '' to complete Block - actorForSaving can not be resolved to a variable - Syntax error on token ( s ) , misplaced construct ( s ) - actorInDatabase can not be resolved - actorForSaving can not be resolved - Syntax error , insert `` ; '' to complete Statement"
public abstract class AbstractHibernateDao < T extends Serializable > { private T clazz ; } public abstract class AbstractHibernateDao < T extends Serializable > { private Class < T > clazz ; }
"public class ConcurrencyApp { private final Random rand = new Random ( System.currentTimeMillis ( ) ) ; private ValueWrapper valueWrapper ; private static class ValueWrapper { private int value ; public ValueWrapper ( int value ) { this.value = value ; } public boolean isZero ( ) { return value == 0 ; } } private void go ( ) { while ( true ) { valueWrapper = new ValueWrapper ( randomInt ( 10 , 1024 ) ) ; Thread thread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { if ( valueWrapper.isZero ( ) ) { System.out.println ( `` valueWrapper.isZero ( ) '' ) ; } } } ) ; thread.start ( ) ; } } private int randomInt ( int min , int max ) { int randomNum = rand.nextInt ( ( max - min ) + 1 ) + min ; return randomNum ; } public static void printVMInfos ( ) { String vmName = System.getProperty ( `` java.vm.name '' ) ; System.out.println ( `` vm name : `` + vmName ) ; int cores = Runtime.getRuntime ( ) .availableProcessors ( ) ; System.out.println ( `` available cores : `` + cores ) ; } public static void main ( String [ ] args ) { ConcurrencyApp app = new ConcurrencyApp ( ) ; printVMInfos ( ) ; app.go ( ) ; } } private void go ( ) { while ( true ) { final ValueWrapper valueWrapper = new ValueWrapper ( randomInt ( 10 , 1024 ) ) ; Thread thread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { if ( valueWrapper.isZero ( ) ) { System.out.println ( `` valueWrapper.isZero ( ) '' ) ; } } } ) ; thread.start ( ) ; } }"
stage2.initModality ( Modality.APPLICATION_MODAL ) ;
public Button ( Light light ) { this.light = light ; } public class Button { private Light light ; public Button ( Light light ) { this.light = light ; } public void press ( ) { light.turnOn ( ) ; } }
"@ Entity @ Inheritance ( strategy = InheritanceType.JOINED ) @ Table ( name = `` products '' ) public class Product extends DateAudit { private static final long serialVersionUID = 1L ; @ Id @ GeneratedValue ( strategy = GenerationType.IDENTITY ) private Long id ; @ NotBlank @ Size ( min = 3 , max = 30 ) private String name ; @ NotBlank private String shortDescription ; @ NotBlank private String description ; @ NotNull private Double regularPrice ; private Double promotionPrice ; @ NotNull @ ManyToOne ( fetch = FetchType.LAZY ) @ JoinColumn ( name = `` category_id '' , nullable = false ) private Category category ; @ NotNull @ ManyToOne ( fetch = FetchType.EAGER ) @ JoinColumn ( name = `` store_id '' , nullable = false ) private Store store ; @ Size ( max = 20 ) private String sku ; private Double weight ; private Integer quantityInStock ; @ NotNull private Boolean notifyLowStock ; @ OneToMany ( cascade = CascadeType.ALL ) private List < Image > images = new ArrayList < Image > ( ) ; @ Entity @ Table ( name = `` images '' ) public class Image { @ Id @ GeneratedValue ( strategy = GenerationType.IDENTITY ) private Long id ; @ NotBlank private String url ; Product product = repository.findById ( productId ) ; Image image = new Image ( ) ; image.setUrl ( url ) ; product.getImages ( ) .add ( image ) ; repository.save ( product ) ; 2018-07-27 22:46:47.367 DEBUG 8580 -- - [ nio-5000-exec-3 ] org.hibernate.SQL : insert into images ( url ) values ( ? ) 2018-07-27 22:46:48.307 DEBUG 8580 -- - [ nio-5000-exec-3 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? ) 2018-07-27 22:47:09.955 DEBUG 8580 -- - [ nio-5000-exec-4 ] org.hibernate.SQL : delete from products_images where product_id= ? 2018-07-27 22:47:09.957 DEBUG 8580 -- - [ nio-5000-exec-4 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? ) 2018-07-27 22:47:09.958 DEBUG 8580 -- - [ nio-5000-exec-4 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? ) 2018-07-27 22:47:32.314 DEBUG 8580 -- - [ nio-5000-exec-5 ] org.hibernate.SQL : delete from products_images where product_id= ? 2018-07-27 22:47:32.316 DEBUG 8580 -- - [ nio-5000-exec-5 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? ) 2018-07-27 22:47:32.318 DEBUG 8580 -- - [ nio-5000-exec-5 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? ) 2018-07-27 22:47:32.319 DEBUG 8580 -- - [ nio-5000-exec-5 ] org.hibernate.SQL : insert into products_images ( product_id , images_id ) values ( ? , ? )"
"import java.util . * ; public class test { final int x = 5 ; // if final variable x uninitialized , compilation error occurs public static void main ( String [ ] args ) { final int y ; // y is not initialized , **no error is thrown** System.out.println ( `` test program '' ) ; } }"
public static void main ( String [ ] args ) { Long t1 = System.currentTimeMillis ( ) ; for ( int i = 999 ; i > 0 ; i -- ) { System.out.println ( i ) ; } t1 = System.currentTimeMillis ( ) - t1 ; Long t2 = System.currentTimeMillis ( ) ; for ( int j = 0 ; j < 999 ; j++ ) { System.out.println ( j ) ; } t2 = System.currentTimeMillis ( ) - t2 ; System.out.println ( `` for loop1 time : `` + t1 ) ; System.out.println ( `` for loop2 time : `` + t2 ) ; }
"public class VictoriaListAdapter extends BaseAdapter { private List < Victoria > mData ; private LayoutInflater mInflater ; public VictoriaListAdapter ( List < Victoria > data , Context context ) { mData = data ; mData = new ArrayList ( mData ) ; mInflater = ( LayoutInflater ) context.getSystemService ( Context.LAYOUT_INFLATER_SERVICE ) ; } @ Override public int getCount ( ) { return mData.size ( ) ; } @ Override public String getItem ( int position ) { return mData.get ( position ) .getStation ( ) ; } @ Override public long getItemId ( int position ) { return position ; } @ Override public View getView ( int position , View convertView , ViewGroup parent ) { ViewHolder holder ; if ( convertView == null ) { convertView = mInflater.inflate ( R.layout.list_item_dualline , parent , false ) ; holder = new ViewHolder ( ) ; holder.title = ( TextView ) convertView.findViewById ( R.id.item_station ) ; holder.description = ( TextView ) convertView.findViewById ( R.id.item_zone ) ; convertView.setTag ( holder ) ; } else { holder = ( ViewHolder ) convertView.getTag ( ) ; } holder.title.setText ( mData.get ( position ) .getStation ( ) ) ; holder.description.setText ( mData.get ( position ) .getZone ( ) ) ; return convertView ; } /** * View holder */ static class ViewHolder { private TextView title ; private TextView description ; } } public class FragmentVictoriaLine extends ListFragment { private VictoriaListAdapter mAdapter ; public FragmentVictoriaLine ( ) { } /** * Whether or not the activity is in two-pane mode , i.e . running on a tablet * device . */ public boolean mTwoPane ; public static FragmentVictoriaLine newInstance ( ) { return new FragmentVictoriaLine ( ) ; } @ Nullable @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater.inflate ( R.layout.fragment_victoria_line , container , false ) ; initialize ( ) ; return view ; } List < Victoria > list = new ArrayList < > ( ) ; private void initialize ( ) { String [ ] items = getActivity ( ) .getResources ( ) .getStringArray ( R.array.victoria_stations ) ; String [ ] itemDescriptions = getActivity ( ) .getResources ( ) .getStringArray ( R.array.victoria_zones ) ; for ( int n = 0 ; n < items.length ; n++ ) { Victoria victoria = new Victoria ( ) ; victoria.setID ( ) ; victoria.setStation ( items [ n ] ) ; victoria.setZone ( itemDescriptions [ n ] ) ; list.add ( victoria ) ; } mAdapter = new VictoriaListAdapter ( list , getActivity ( ) ) ; setListAdapter ( mAdapter ) ; } @ Override public void onActivityCreated ( Bundle savedInstanceState ) { View v = getView ( ) ; mTwoPane = getActivity ( ) .findViewById ( R.id.detail_container ) ! = null ; assert v ! = null ; ListView lv = ( ListView ) v.findViewById ( android.R.id.list ) ; lv.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { private Victoria selectedMain ; private View selectedView ; @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { VictoriaListAdapter adapter = ( VictoriaListAdapter ) parent.getAdapter ( ) ; String station = adapter.getItem ( position ) ; if ( mTwoPane ) { setItemNormal ( ) ; View rowView = view ; setItemSelected ( rowView ) ; Fragment newFragment ; if ( station.equals ( view.getResources ( ) .getString ( R.string.bho ) ) ) { newFragment = new FragmentVictoriaBHO ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.brx ) ) ) { newFragment = new FragmentVictoriaBRX ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.eus ) ) ) { newFragment = new FragmentVictoriaEUS ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.fpk ) ) ) { newFragment = new FragmentVictoriaFPK ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.green_park ) ) ) { newFragment = new FragmentVictoriaGreenPark ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.hhy ) ) ) { newFragment = new FragmentVictoriaHHY ( ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.kxsp ) ) ) { newFragment = new FragmentVictoriaKXSP ( ) ; } else { newFragment = new FragmentVictoriaBHO ( ) ; } VictoriaLineActivity activity = ( VictoriaLineActivity ) view.getContext ( ) ; FragmentTransaction transaction = activity.getSupportFragmentManager ( ) .beginTransaction ( ) ; transaction.setCustomAnimations ( R.anim.fade_out , R.anim.fade_in ) ; transaction.replace ( R.id.detail_container , newFragment ) ; transaction.commit ( ) ; } else { Intent intent ; if ( station.equals ( view.getResources ( ) .getString ( R.string.bho ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaBHOActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.brx ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaBRXActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.eus ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaEUSActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.fpk ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaFPKActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.green_park ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaGreenParkActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.hhy ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaHHYActivity.class ) ; } else if ( station.equals ( view.getResources ( ) .getString ( R.string.kxsp ) ) ) { intent = new Intent ( getActivity ( ) , VictoriaKXSPActivity.class ) ; } else { intent = new Intent ( getActivity ( ) , VictoriaBHOActivity.class ) ; } startActivity ( intent ) ; } } public void setItemSelected ( View view ) { View rowView = view ; view.setBackgroundColor ( Color.parseColor ( `` # 868F98 '' ) ) ; TextView tv0 = ( TextView ) rowView.findViewById ( R.id.item_station ) ; tv0.setTextColor ( Color.WHITE ) ; TextView tv1 = ( TextView ) rowView.findViewById ( R.id.item_zone ) ; tv1.setTextColor ( Color.WHITE ) ; } public void setItemNormal ( ) { for ( int i = 0 ; i < getListView ( ) .getChildCount ( ) ; i++ ) { View v = getListView ( ) .getChildAt ( i ) ; v.setBackgroundColor ( Color.TRANSPARENT ) ; TextView tv0 = ( ( TextView ) v.findViewById ( R.id.item_station ) ) ; tv0.setTextColor ( Color.WHITE ) ; TextView tv1 = ( ( TextView ) v.findViewById ( R.id.item_zone ) ) ; tv1.setTextColor ( Color.parseColor ( `` # B5B5B5 '' ) ) ; } } } ) ; super.onActivityCreated ( savedInstanceState ) ; } } public class Victoria { public Victoria ( ) { } private String station ; private String zone ; private boolean selected ; public String getStation ( ) { return station ; } public void setStation ( String item ) { this.station = item ; } public String getZone ( ) { return zone ; } public void setZone ( String zone ) { this.zone = zone ; } private int _id ; public void getID ( int _id ) { this._id = _id ; } public int setID ( ) { return _id ; } public boolean isSelected ( ) { return selected ; } public void setSelected ( boolean selected ) { this.selected = selected ; } }"
public class Base { < T > List < ? extends Number > f1 ( ) { return null ; } List < ? extends Number > f2 ( ) { return null ; } < T extends Number > List < T > f3 ( ) { return null ; } } class Derived extends Base { List < String > f1 ( ) { return null ; } // compiles fine ! ! ! List < String > f3 ( ) { return null ; } // compiles fine ! ! ! // compile ERR : return type is incompatible with Base.f2 ( ) List < String > f2 ( ) { return null ; } }
"int [ ] foo = int [ 5 ] ; foo [ 4 ] = 5 ; print ( foo [ 4 ] ) ; //Output : `` 5 '' class Bar { //Custom class that uses index as a ref } Bar foo = new Bar ( 5 ) ; foo.set ( 4 , 5 ) ; print ( foo [ 4 ] ) ; //Output : `` 5 ''"
"Criteria criteria2 = session.createCriteria ( UserMaster.class ) ; criteria2.add ( Restrictions.eq ( `` userName '' , userName ) ) ; userDetails = ( UserMaster ) criteria2.uniqueResult ( ) ; if ( userDetails ! = null ) { //logic goes here }"
@ 6al2dd0poInternal Server Error ( 500 ) for request GET /mystuff/peopleExecution exception ( In { module : mustache-0.2 } /app/play/modules/mustache/MustacheTags.java around line 32 ) NullPointerException occured : nullplay.exceptions.JavaExecutionException at play.templates.BaseTemplate.throwException ( BaseTemplate.java:90 ) at play.templates.GroovyTemplate.internalRender ( GroovyTemplate.java:257 ) at play.templates.Template.render ( Template.java:26 ) at play.templates.GroovyTemplate.render ( GroovyTemplate.java:187 ) at play.mvc.results.RenderTemplate. < init > ( RenderTemplate.java:24 ) at play.mvc.Controller.renderTemplate ( Controller.java:660 ) at play.mvc.Controller.renderTemplate ( Controller.java:640 ) at play.mvc.Controller.render ( Controller.java:695 ) at controllers.MyStuff.people ( MyStuff.java:183 ) at play.mvc.ActionInvoker.invokeWithContinuation ( ActionInvoker.java:548 ) at play.mvc.ActionInvoker.invoke ( ActionInvoker.java:502 ) at play.mvc.ActionInvoker.invokeControllerMethod ( ActionInvoker.java:478 ) at play.mvc.ActionInvoker.invokeControllerMethod ( ActionInvoker.java:473 ) at play.mvc.ActionInvoker.invoke ( ActionInvoker.java:161 ) at Invocation.HTTP Request ( Play ! ) Caused by : java.lang.NullPointerException at play.modules.mustache.MustacheTags._template ( MustacheTags.java:32 ) at play.modules.mustache.MustacheTags $ _template.call ( Unknown Source ) at /app/views/User/people.html . ( line:22 ) at play.templates.GroovyTemplate.internalRender ( GroovyTemplate.java:232 ) ... 13 more
"public enum Continent { ASIA , EUROPE } public class Country { private String name ; private Continent region ; public Country ( String na , Continent reg ) { this.name = na ; this.region = reg ; } public String getName ( ) { return name ; } public Continent getRegion ( ) { return region ; } @ Override public String toString ( ) { return `` Country [ name= '' + name + `` , region= '' + region + `` ] '' ; } } public static void main ( String [ ] args ) throws IOException { List < Country > couList = Arrays.asList ( new Country ( `` Japan '' , Continent.ASIA ) , new Country ( `` Sweden '' , Continent.EUROPE ) , new Country ( `` Norway '' , Continent.EUROPE ) ) ; Map < Continent , List < String > > regionNames = couList .stream ( ) //.peek ( System.out : :println ) .collect ( Collectors.groupingBy ( Country : :getRegion , Collectors.mapping ( Country : :getName , Collectors.toList ( ) ) ) ) ; System.out.println ( regionNames ) ; } { EUROPE= [ Sweden , Norway ] , ASIA= [ Japan ] } Country [ name=Japan , region=ASIA ] Country [ name=Sweden , region=EUROPE ] Country [ name=Norway , region=EUROPE ] { ASIA= [ Japan ] , EUROPE= [ Sweden , Norway ] }"
"private synchronized void updateHtmlEditor ( HTMLEditorKit editorkit , StringReader reader ) { Runnable runnable = new Runnable ( editorkit , reader ) { public void run ( ) { try { this.val $ editorkit.read ( this.val $ reader , LinkParser.this.htmlViewEditor.getDocument ( ) , LinkParser.this.htmlViewEditor.getDocument ( ) .getLength ( ) ) ; } catch ( IOException ex ) { Logger.getLogger ( LinkParser.class.getName ( ) ) .log ( Level.SEVERE , null , ex ) ; } catch ( BadLocationException ex ) { Logger.getLogger ( LinkParser.class.getName ( ) ) .log ( Level.SEVERE , null , ex ) ; } } } ; SwingUtilities.invokeLater ( runnable ) ; }"
if ( null==obj ) if ( obj==null )
"import java.util.Collections.swapfun main ( args : Array < String > ) { val immutableList = List ( 2 ) { it } // contents are [ 0 , 1 ] swap ( immutableList , 0 , 1 ) println ( immutableList ) // prints [ 1 , 0 ] } public static void swap ( List < ? > list , int i , int j ) { list.set ( i , list.set ( j , list.get ( i ) ) ) ; } reverse ( immutableList ) fill ( immutableList , 3 ) public static < T > void fill ( List < ? super T > list , T obj ) public static void reverse ( List < ? > list )"
String str1= '' JAVA '' ; String str2= '' JAVA '' ; String str3=new String ( `` JAVA '' ) ; String str4=new String ( `` JAVA '' ) .intern ( ) ; str1=str2=str3=str4=null ;
DstreamRDD1.foreachRDD ( new VoidFunction < JavaRDD < String > > ( ) { public void call ( JavaRDD < String > inRDD ) { inRDD.foreach ( fn1 ) inRDD.foreach ( fn2 ) } } DStreamRDD1.foreachRDD ( fn1 ) DStreamRDD2.foreachRDD ( fn2 )
"Given two strings , word and a separator sep , return a big string made of count occurrences of the word , separated by the separator string.repeatSeparator ( `` Word '' , `` X '' , 3 ) → `` WordXWordXWord '' repeatSeparator ( `` This '' , `` And '' , 2 ) → `` ThisAndThis '' repeatSeparator ( `` This '' , `` And '' , 1 ) → `` This ''"
static WeakReference < Object > oldO = null ; ... Object o = new Object ( ) ; oldO = new WeakReference ( o ) ; // Do some stuff with o - could take hours or even days to complete ... .// Discard o ( or let it go out of scope ) .o = null ; // More stuff - could be hours or days later ... .o = new Object ( ) ; // Later still.if ( o == oldO.get ( ) ) { System.out.println ( `` Same ! `` ) ; }
a = `` steve '' ; b = `` Andrew '' System.out.print ( `` Hello `` + a + `` `` + b + `` s '' ) ;
public Set < K > keySet ( ) { Set < K > ks ; return ( ks = keySet ) == null ? ( keySet = new KeySet ( ) ) : ks ; } public Set < K > keySet ( ) { Set < K > ks = keySet ; if ( ks == null ) { ks = new KeySet ( ) ; keySet = ks ; } return ks ; } public Set < K > keySet ( ) { if ( keySet == null ) { keySet = new KeySet ( ) ; } return keySet ; } public Set < K > keySet ( ) { return keySet == null ? ( keySet = new KeySet ( ) ) : keySet ; }
001-L1002-L2003-L3004-L4 ...
"for ( int i = 0 ; i < enemies.size ( ) ; i++ ) { AbstractEnemy enemy = enemies.get ( i ) ; if ( enemy.intersects ( bullet ) ) { enemy.getsHit ( bullet.getDamage ( ) ) ; bulletList.remove ( bullet ) ; if ( enemy.isDead ( ) ) { // This does not work enemy = new ExplodingEnemy ( enemy.x , enemy.y ) ; } } }"
public class Person { private int age ; } Supplier < Person > personSupplier = Person : :new public class Person { private int age ; public Person ( int age ) { this.age = age ; } } Supplier < Person > personSupplier = Person : :new Supplier < Person > personSupplier = ( ) - > new Person ( 10 ) ;
"package search ; public class BinarySearch < T > { public boolean binary_search_iterative ( T [ ] x , T key ) { int size = x.length ; if ( size == 0 ) { return false ; } int end = size - 1 ; int start = 0 ; while ( start < = end ) { int mid = ( end + start ) /2 ; if ( key < x [ mid ] ) { end = mid - 1 ; } else if ( key > key [ mid ] ) { start = mid + 1 ; } else { return true ; } } return false ; } }"
public class A { private void show ( ) { final String s= '' checking '' ; } }
"public static void main ( String [ ] args ) throws Exception { final Logger root = ( Logger ) LoggerFactory.getLogger ( Logger.ROOT_LOGGER_NAME ) ; final Logger ok = ( Logger ) LoggerFactory.getLogger ( OkHttpServices.class ) ; root.setLevel ( Level.ALL ) ; ok.setLevel ( Level.ALL ) ; final DatabaseClient client = DatabaseClientFactory.newClient ( `` localhost '' , 8000 , new DatabaseClientFactory.DigestAuthContext ( `` username '' , `` password '' ) ) ; final StringHandle handle = new StringHandle ( `` < doc > < name > Test < /name > < /doc > '' ) .withFormat ( Format.XML ) ; client.newTextDocumentManager ( ) .write ( `` test.xml '' , handle ) ; root.info ( `` t1 : opening '' ) ; final Transaction t1 = client.openTransaction ( ) ; root.info ( `` t1 : reading '' ) ; client.newXMLDocumentManager ( ) .read ( `` test.xml '' , new StringHandle ( ) , t1 ) ; root.info ( `` t2 : opening '' ) ; final Transaction t2 = client.openTransaction ( ) ; root.info ( `` t2 : reading '' ) ; client.newXMLDocumentManager ( ) .read ( `` test.xml '' , new StringHandle ( ) , t2 ) ; new Thread ( ( ) - > { root.info ( `` t1 : writing '' ) ; client.newXMLDocumentManager ( ) .write ( `` test.xml '' , new StringHandle ( `` < doc > < t > t1 < /t > < /doc > '' ) .withFormat ( Format.XML ) , t1 ) ; t1.commit ( ) ; } ) .start ( ) ; new Thread ( ( ) - > { root.info ( `` t2 : writing '' ) ; client.newXMLDocumentManager ( ) .write ( `` test.xml '' , new StringHandle ( `` < doc > < t > t2 < /t > < /doc > '' ) .withFormat ( Format.XML ) , t2 ) ; t2.commit ( ) ; } ) .start ( ) ; TimeUnit.MINUTES.sleep ( 5 ) ; client.release ( ) ; } 14:12:27.437 [ main ] DEBUG c.m.client.impl.OkHttpServices - Connecting to localhost at 8000 as admin14:12:27.570 [ main ] DEBUG c.m.client.impl.OkHttpServices - Sending test.xml document in transaction null14:12:27.608 [ main ] INFO ROOT - t1 : opening14:12:27.609 [ main ] DEBUG c.m.client.impl.OkHttpServices - Opening transaction14:12:27.962 [ main ] INFO ROOT - t1 : reading14:12:27.963 [ main ] DEBUG c.m.client.impl.OkHttpServices - Getting test.xml in transaction 529858835103627852614:12:28.283 [ main ] INFO ROOT - t2 : opening14:12:28.283 [ main ] DEBUG c.m.client.impl.OkHttpServices - Opening transaction14:12:28.286 [ main ] INFO ROOT - t2 : reading14:12:28.286 [ main ] DEBUG c.m.client.impl.OkHttpServices - Getting test.xml in transaction 881938273442512384414:12:28.289 [ Thread-1 ] INFO ROOT - t1 : writing14:12:28.289 [ Thread-1 ] DEBUG c.m.client.impl.OkHttpServices - Sending test.xml document in transaction 529858835103627852614:12:28.289 [ Thread-2 ] INFO ROOT - t2 : writing14:12:28.290 [ Thread-2 ] DEBUG c.m.client.impl.OkHttpServices - Sending test.xml document in transaction 8819382734425123844 == > /var/opt/MarkLogic/Logs/8000_AccessLog.txt < ==127.0.0.1 - admin [ 24/Nov/2018:14:12:30 +0000 ] `` PUT /v1/documents ? txid=5298588351036278526 & category=content & uri=test.xml HTTP/1.1 '' 503 1034 - `` okhttp/3.9.0 '' == > /var/opt/MarkLogic/Logs/ErrorLog.txt < ==2018-11-24 14:12:30.719 Info : Deadlock detected locking Documents test.xml Exception in thread `` Thread-1 '' com.marklogic.client.FailedRequestException : Service unavailable and maximum retry period elapsed : 121 seconds after 65 retries at com.marklogic.client.impl.OkHttpServices.putPostDocumentImpl ( OkHttpServices.java:1422 ) at com.marklogic.client.impl.OkHttpServices.putDocument ( OkHttpServices.java:1256 ) at com.marklogic.client.impl.DocumentManagerImpl.write ( DocumentManagerImpl.java:920 ) at com.marklogic.client.impl.DocumentManagerImpl.write ( DocumentManagerImpl.java:758 ) at com.marklogic.client.impl.DocumentManagerImpl.write ( DocumentManagerImpl.java:717 ) at Scratch.lambda $ main $ 0 ( scratch.java:40 ) at java.lang.Thread.run ( Thread.java:748 )"
"public class Foo { String code ; String value ; public Foo ( String code , String value ) { super ( ) ; this.code = code ; this.value = value ; } // getters/setters } public class FooMain { public static void main ( String [ ] args ) { Foo foo1 = new Foo ( `` 100 '' , '' foo1 '' ) ; Foo foo2 = new Foo ( `` 200 '' , '' foo2 '' ) ; Foo foo3 = new Foo ( `` 300 '' , '' foo3 '' ) ; Foo foo4 = new Foo ( `` 100 '' , '' foo4 '' ) ; Foo foo5 = new Foo ( `` 100 '' , '' foo5 '' ) ; Foo foo6 = new Foo ( `` 200 '' , '' foo6 '' ) ; List < Foo > foos = Arrays.asList ( foo1 , foo2 , foo3 , foo4 , foo5 , foo6 ) ; Map < String , List < Foo > > fooCodeMap = getFooMultiMapCode ( foos ) ; System.out.println ( fooCodeMap ) ; } private static Map < String , List < Foo > > getFooMultiMapCode ( List < Foo > foos ) { Map < String , List < Foo > > fooMultiMapCode = new HashMap < String , List < Foo > > ( ) ; for ( Foo foo : foos ) { List < Foo > list = fooMultiMapCode.get ( foo.getCode ( ) ) ; if ( list==null ) { list = new ArrayList < Foo > ( ) ; list.add ( foo ) ; fooMultiMapCode.put ( foo.getCode ( ) , list ) ; } else { list.add ( foo ) ; } } return fooMultiMapCode ; } } { 100= [ foo1 , foo4 , foo5 ] , 200= [ foo2 , foo6 ] , 300= [ foo3 ] }"
"int a = 0 ; int b = 3 ; //Constructor 1 public ClassName ( int a ) { this ( a , b ) ; //Error //new ClassName ( a , b ) //No error } //Constructor 2 public ClassName ( int a , int b ) { this.a = a ; this.b = b ; }"
case # 1input : `` abc3leson11 '' output : `` abccclesonnnnnnnnnnn '' String a = `` abbc2kd3ijkl40ggg2H5uu '' ; String s = a + `` * '' ; String numS = `` '' ; int cnt = 0 ; for ( int i = 0 ; i < s.length ( ) ; i++ ) { char ch = s.charAt ( i ) ; if ( Character.isDigit ( ch ) ) { numS = numS + ch ; cnt++ ; } else { cnt++ ; try { for ( int j = 0 ; j < Integer.parseInt ( numS ) ; j++ ) { System.out.print ( s.charAt ( i - cnt ) ) ; } if ( i ! = s.length ( ) - 1 & & ! Character.isDigit ( s.charAt ( i + 1 ) ) ) { System.out.print ( s.charAt ( i ) ) ; } } catch ( Exception e ) { if ( i ! = s.length ( ) - 1 & & ! Character.isDigit ( s.charAt ( i + 1 ) ) ) { System.out.print ( s.charAt ( i ) ) ; } } cnt = 0 ; numS = `` '' ; } }
< c : out value= '' $ { foo.bar.baz.phleem1 } '' / > < c : out value= '' $ { foo.bar.baz.phleem2 } '' / > < c : out value= '' $ { foo.bar.baz.phleem3 } '' / > < c : set var= '' baz '' value= '' $ { foo.bar.baz } '' / > < c : out value= '' $ { baz.phleem1 } '' / > < c : out value= '' $ { baz.phleem2 } '' / > < c : out value= '' $ { baz.phleem3 } '' / >
public < T extends SomeBaseClass > void myMethod ( Class < T > clz ) public void myMethod ( Class < ? extends SomeBaseClass > clz )
"private void notify ( String date , int space ) throws IOException { String ACCOUNT_SID = `` dddddd '' ; String AUTH_TOKEN = `` ggggggg '' ; String TWILIO_PHONE = `` +my twilio project '' ; String ELAD_PHONE = `` +my real number '' ; TwilioRestClient client ; client = new TwilioRestClient ( ACCOUNT_SID , AUTH_TOKEN ) ; // Build a filter for the CallList Map < String , String > params = new HashMap < String , String > ( ) ; params.put ( `` Url '' , `` http : //demo.twilio.com/docs/voice.xml '' ) ; params.put ( `` To '' , ELAD_PHONE ) ; params.put ( `` From '' , TWILIO_PHONE ) ; CallFactory callFactory = client.getAccount ( ) .getCallFactory ( ) ; Call call ; try { call = callFactory.create ( params ) ; call.getSid ( ) ; } catch ( TwilioRestException e ) { String a = e.toString ( ) ; // log ( `` ******** Failed to call '' , e ) ; } call = callFactory.create ( params ) ; java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at com.twilio.sdk.AppEngineClientConnection.flush ( AppEngineClientConnection.java:204 ) at org.apache.http.protocol.HttpRequestExecutor.doSendRequest ( HttpRequestExecutor.java:258 ) at org.apache.http.protocol.HttpRequestExecutor.execute ( HttpRequestExecutor.java:123 ) at org.apache.http.impl.client.DefaultRequestDirector.tryExecute ( DefaultRequestDirector.java:645 ) at org.apache.http.impl.client.DefaultRequestDirector.execute ( DefaultRequestDirector.java:464 ) at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:820 ) at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:754 ) at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:732 ) at com.twilio.sdk.TwilioRestClient.request ( TwilioRestClient.java:404 ) at com.twilio.sdk.TwilioRestClient.safeRequest ( TwilioRestClient.java:534 ) at com.twilio.sdk.resource.list.CallList.create ( CallList.java:68 ) at Runner.notify ( Runner.java:152 ) at Runner.run ( Runner.java:40 ) at Runner.main ( Runner.java:25 ) Caused by : com.google.apphosting.api.ApiProxy $ CallNotFoundException : The API package 'urlfetch ' or call 'Fetch ( ) ' was not found . at com.google.apphosting.api.ApiProxy.makeSyncCall ( ApiProxy.java:109 ) at com.google.appengine.api.urlfetch.URLFetchServiceImpl.fetch ( URLFetchServiceImpl.java:38 ) ... 18 more Oct 01 , 2016 2:39:43 PM org.apache.http.impl.client.DefaultRequestDirector tryExecute INFO : I/O exception ( java.io.IOException ) caught when processing request : Error flushing content in Google App Engine fetch Oct 01 , 2016 2:39:43 PM org.apache.http.impl.client.DefaultRequestDirector tryExecute INFO : Retrying request java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at com.twilio.sdk.AppEngineClientConnection.flush ( AppEngineClientConnection.java:204 ) at org.apache.http.protocol.HttpRequestExecutor.doSendRequest ( HttpRequestExecutor.java:258 )"
"public class MainActivity extends AppCompatActivity { private MyView myView ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; myView = new MyView ( this ) ; setContentView ( myView ) ; startMovie ( ) ; } public void startMovie ( ) { MovieTask movieTask = new MovieTask ( myView , this ) ; movieTask.doInBackground ( null ) ; } } public class MovieTask extends AsyncTask < String , String , String > { MyView drawingView ; MainActivity mainActivity ; public MovieTask ( MyView view , MainActivity mainActivity ) { this.mainActivity = mainActivity ; this.drawingView =view ; } @ Override protected String doInBackground ( String ... strings ) { for ( int i=20 ; i < 100 ; i++ ) { drawingView.myBall.goTo ( i , i ) ; publishProgress ( ) ; try { Thread.sleep ( 20 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } return null ; } @ Override protected void onProgressUpdate ( String ... values ) { super.onProgressUpdate ( values ) ; mainActivity.runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { Log.v ( `` DEBUG_DRAW '' , '' in onProgressUpdate ( ) '' ) ; drawingView.invalidate ( ) ; } } ) ; } }"
"Parameter [ ] ps = method.getParameters ( ) ; Map < String , Integer > map = new HashMap < String , Integer > ( ) ; for ( int ij = 0 ; ij < ps.length ; ij++ ) { Parameter p = ps [ ij ] ; RequestParam rp = p.getAnnotation ( RequestParam.class ) ; if ( rp ! = null ) { //do something } else { System.out.println ( p.getType ( ) ) ; System.out.println ( p.getType ( ) .isInstance ( HttpServletRequest.class ) ) ; System.out.println ( p.getType ( ) == HttpServletRequest.class ) ; } } interface javax.servlet.http.HttpServletRequestfalsetrue"
"/* ErrorOutput.java */public static t_ErrBuffer t_activeErrBuffer = new t_ErrBuffer ( `` '' ) ; public static void setStdErrToFile ( final File file ) { ps = new PrintStream ( fos ) { @ Override public void write ( byte [ ] buf , int off , int len ) { byte [ ] bn = new byte [ len ] ; for ( int i = off , j = 0 ; i < ( len + off ) ; i++ , j++ ) { bn [ j ] = buf [ i ] ; } String msg = null ; try { msg = new String ( bn , `` UTF-8 '' ) ; } catch ( UnsupportedEncodingException e1 ) { } if ( msg.matches ( `` [ \\w\\W ] * [ \\w ] + [ \\w\\W ] * '' ) ) { // ^= contains at least one word character if ( ! t_activeErrBuffer.isAlive ( ) ) { t_activeErrBuffer = new t_ErrBuffer ( msg ) ; t_activeErrBuffer.start ( ) ; } else { t_activeErrBuffer.interrupt ( ) ; t_activeErrBuffer = new t_ErrBuffer ( t_activeErrBuffer.getErrBuffer ( ) + `` \n '' + msg ) ; // ^= append to buffer and restart . t_activeErrBuffer.start ( ) ; } } } } ; System.setErr ( ps ) ; } /* t_ErrBuffer.java */public class t_ErrBuffer extends Thread { private String errBuffer ; public t_ErrBuffer ( String buffer ) { this.errBuffer = buffer ; } protected class Proceed implements Runnable { public String msg = null ; public Proceed ( String msg ) { this.msg = msg ; } @ Override public void run ( ) { // todo PRINT ERROR MESSAGE : DO THINGS WITH msg : console , gui , JOptionPane } } @ Override public void run ( ) { try { Thread.sleep ( 500 ) ; // collect error lines before output . Needed because PrintStream 's `` write '' -method writes ErrorMessages in multiple pieces ( lines ) // each time some new exception line comes in , the thread is stopped , buffer is being appended and thread new started } catch ( InterruptedException e ) { return ; // stop } // after 500 ms of wait , no new error message line has come in . Print the message out : Thread t_tmp = new Thread ( new Proceed ( `` \n '' + this.errBuffer ) ) ; t_tmp.start ( ) ; return ; } public String getErrBuffer ( ) { return this.errBuffer ; } } /* AnyMethod.java */// ... try { // ... do everything here } catch ( IOException | FileNotFoundException e ) { // as many as you like ErrorOutput.crash ( e ) ; } // ... /* ErrorOutput.java */public static void crash ( Exception e ) { FileOutputStream fos_errOutput = new FileOutputStream ( new File ( `` ErrorOutput.txt '' ) , true ) ; // 1st if ( ! System.out.equals ( fos_errOutput ) ) { System.out.println ( e.getMessage ( ) + `` : '' ) ; // to console or the preferred StdOut e.printStackTrace ( ) ; } // 2nd JOptionPane.showMessageDialog ( Gui.frame , `` THE PROGRAM HAS CRASHED ! '' + `` \n\n '' + e.getMessage ( ) + `` \n\nFor a more detailed report , see ErrorLog.txt '' ) ; // gui output // 3rd PrintStream ps = new PrintStream ( fos_errOutput ) ; ps.print ( new Date ( ) .toString ( ) + `` : '' ) ; // write to file e.printStackTrace ( ps ) ; ps.close ( ) ; // 4th System.exit ( 0 ) ; // this could also be `` throw new Exception '' etc. , but I do n't know why one should do that . }"
"public class SimpleRecursiveFibonacci { public BigInteger fibonacci ( int n ) { if ( n < 2 ) { return BigInteger.ONE ; } return fibonacci ( n - 2 ) .add ( fibonacci ( n - 1 ) ) ; } } public class MemoizedRecursiveFibonacci { private Map < Integer , BigInteger > cache = new HashMap < > ( ) ; public BigInteger fibonacci ( int n ) { if ( n < 2 ) { return BigInteger.ONE ; } if ( ! cache.containsKey ( n ) ) { BigInteger currentFibonacci = fibonacci ( n - 2 ) .add ( fibonacci ( n - 1 ) ) ; cache.put ( n , currentFibonacci ) ; } return cache.get ( n ) ; } } if ( n < 2 ) { return BigInteger.ONE ; BigInteger currentFibonacci = fibonacci ( n - 2 ) .add ( fibonacci ( n - 1 ) ) ;"
Starting redisCassandra already runningStarting engine.Error : Could not find or load main class ai.grakn.engine.GraknEngineServerError : Could not find or load main class ai.grakn.client.Client.Error : Could not find or load main class ai.grakn.client.Client.Error : Could not find or load main class ai.grakn.client.Client
"abstract public class Character { private String name ; private String characterClass ; private int level ; private int hitDice ; private int strength ; private int constitution ; private int dexterity ; private int intelligence ; private int wisdom ; private int charisma ; private int hp ; private int currentHp ; private int armorClass ; private int BaseAttackBonus ; private long xp ; private double gp ; private Inventory inventory ; private double carriedWeight ; private Equipment equipment ; protected Character ( String name ) { setName ( name ) ; setCharacterClass ( `` Class '' ) ; setLevel ( 1 ) ; setHitDice ( 0 ) ; setStrength ( 10 ) ; setConstitution ( 10 ) ; setDexterity ( 10 ) ; setIntelligence ( 10 ) ; setWisdom ( 10 ) ; setCharisma ( 10 ) ; setHp ( ( int ) getLevel ( ) * ( getHitDice ( ) + getModifier ( getConstitution ( ) ) ) ) ; setCurrentHp ( getHp ( ) ) ; setArmorClass ( 10 + getModifier ( getDexterity ( ) ) ) ; setBaseAttackBonus ( 0 ) ; inventory = new Inventory ( ) ; setCarriedWeight ( 0 ) ; equipment = new Equipment ( ) ; setXp ( 0 ) ; setGp ( 20 ) ; } protected Character ( String name , int lvl ) { setName ( name ) ; setCharacterClass ( `` Class '' ) ; setLevel ( lvl ) ; setHitDice ( 0 ) ; setStrength ( 10 ) ; setConstitution ( 10 ) ; setDexterity ( 10 ) ; setIntelligence ( 10 ) ; setWisdom ( 10 ) ; setCharisma ( 10 ) ; setHp ( ( int ) getLevel ( ) * ( getHitDice ( ) + getModifier ( getConstitution ( ) ) ) ) ; setCurrentHp ( getHp ( ) ) ; setArmorClass ( 10 + getModifier ( getDexterity ( ) ) ) ; setBaseAttackBonus ( 0 ) ; inventory = new Inventory ( ) ; setCarriedWeight ( 0 ) ; equipment = new Equipment ( ) ; setXp ( 1000 * ( getLevel ( ) - 1 ) ) ; setGp ( getLevel ( ) * 20 ) ; } void displayCharacter ( ) throws IOException { System.out.print ( `` \n\n '' ) ; System.out.println ( `` Name : `` + getName ( ) ) ; System.out.println ( `` Class : `` + getCharacterClass ( ) ) ; System.out.println ( `` Level : `` + getLevel ( ) ) ; System.out.println ( `` HP : `` + getHp ( ) ) ; System.out.println ( `` Current HP : `` + getCurrentHp ( ) ) ; System.out.println ( `` Armor Class : `` + getArmorClass ( ) ) ; System.out.println ( `` Base Attack Bonus : + '' + getBaseAttackBonus ( ) ) ; System.out.println ( `` *************** '' ) ; System.out.println ( `` Attributes : `` ) ; System.out.println ( `` Strength : `` + getStrength ( ) ) ; System.out.println ( `` Constitution : `` + getConstitution ( ) ) ; System.out.println ( `` Dexterity : `` + getDexterity ( ) ) ; System.out.println ( `` Intelligence : `` + getIntelligence ( ) ) ; System.out.println ( `` Wisdom : `` + getWisdom ( ) ) ; System.out.println ( `` Charisma : `` + getCharisma ( ) ) ; System.out.println ( `` *************** '' ) ; equipment.showEquipment ( ) ; inventory.showInventory ( ) ; System.out.println ( `` Carried weight : `` + getCarriedWeight ( ) ) ; System.out.println ( `` '' ) ; System.out.println ( `` XP : `` + getXp ( ) ) ; System.out.println ( `` Gold : `` + getGp ( ) ) ; System.out.println ( `` '' ) ; } public int getModifier ( int number ) { int mod = ( int ) ( ( number - 10 ) / 2 ) ; return mod ; } public String getName ( ) { return name ; } public String getCharacterClass ( ) { return characterClass ; } public int getLevel ( ) { return level ; } public int getHitDice ( ) { return hitDice ; } public int getStrength ( ) { return strength ; } public int getConstitution ( ) { return constitution ; } public int getDexterity ( ) { return dexterity ; } public int getIntelligence ( ) { return intelligence ; } public int getWisdom ( ) { return wisdom ; } public int getCharisma ( ) { return charisma ; } public int getHp ( ) { return hp ; } public int getCurrentHp ( ) { return currentHp ; } public int getArmorClass ( ) { return armorClass ; } public int getBaseAttackBonus ( ) { return BaseAttackBonus ; } public Equipment getEquipment ( ) { return equipment ; } public Inventory getInventory ( ) { return inventory ; } public double getCarriedWeight ( ) { return carriedWeight ; } public long getXp ( ) { return xp ; } public double getGp ( ) { return gp ; } protected void setName ( String Name ) { name = Name ; } protected void setCharacterClass ( String characterClass ) { this.characterClass = characterClass ; } protected void setLevel ( int lvl ) { level = lvl ; } protected void setHitDice ( int hd ) { hitDice = hd ; } protected void setStrength ( int str ) { strength = str ; } protected void setConstitution ( int con ) { constitution = con ; } protected void setDexterity ( int dex ) { dexterity = dex ; } protected void setIntelligence ( int intel ) { intelligence = intel ; } protected void setWisdom ( int wis ) { wisdom = wis ; } protected void setCharisma ( int cha ) { charisma = cha ; } protected void setHp ( int hitPoints ) { hp = hitPoints ; } protected void setCurrentHp ( int curHp ) { currentHp = curHp ; } protected void setArmorClass ( int ac ) { armorClass = ac ; } protected void setBaseAttackBonus ( int bab ) { BaseAttackBonus = bab ; } protected void setXp ( int XP ) { xp = XP ; } protected void setGp ( double GP ) { gp = GP ; } protected void setCarriedWeight ( double weight ) { carriedWeight = weight ; } public void attack ( Character target ) { try { ( ( Weapon ) getEquipment ( ) .getPrimaryHand ( ) ) .attack ( this , target ) ; } catch ( NullPointerException e ) { getEquipment ( ) .equipPrimaryHand ( MeleeWeapon.meleeWeaponList.get ( 0 ) ) ; /* equip fist weapon */ ( ( Weapon ) getEquipment ( ) .getPrimaryHand ( ) ) .attack ( this , target ) ; if ( target.getCurrentHp ( ) < = 0 ) { System.out.println ( target.getName ( ) + `` is down ! `` ) ; } } } public void equip ( ) { getInventory ( ) .equip ( this ) ; } public void addToInventory ( Item newItem ) { getInventory ( ) .addToInventory ( this , newItem ) ; } }"
"$ jar -i /tmp/vtk-dicom/bin/lib/vtkdicom.jarjava.io.FileNotFoundException : /tmp/vtk-dicom/bin/lib/vtk.jar ( No such file or directory ) at java.util.zip.ZipFile.open ( Native Method ) at java.util.zip.ZipFile. < init > ( ZipFile.java:215 ) at java.util.zip.ZipFile. < init > ( ZipFile.java:145 ) at java.util.jar.JarFile. < init > ( JarFile.java:154 ) at java.util.jar.JarFile. < init > ( JarFile.java:91 ) at sun.tools.jar.Main.getJarPath ( Main.java:1052 ) at sun.tools.jar.Main.getJarPath ( Main.java:1068 ) at sun.tools.jar.Main.genIndex ( Main.java:1084 ) at sun.tools.jar.Main.run ( Main.java:269 ) at sun.tools.jar.Main.main ( Main.java:1177 ) $ cp /usr/share/java/vtk.jar /tmp/vtk-dicom/bin/lib/ $ cat ./Source/java/manifest.txtClass-Path : vtk.jar $ cat ./Source/java/manifest.txtClass-Path : /usr/share/java/vtk.jar $ jar -i /tmp/vtk-dicom/bin/lib/vtkdicom.jarjava.io.FileNotFoundException : /tmp/vtk-dicom/bin/lib/usr/share/java/vtk.jar ( No such file or directory ) at java.util.zip.ZipFile.open ( Native Method ) at java.util.zip.ZipFile. < init > ( ZipFile.java:215 ) at java.util.zip.ZipFile. < init > ( ZipFile.java:145 ) at java.util.jar.JarFile. < init > ( JarFile.java:154 ) at java.util.jar.JarFile. < init > ( JarFile.java:91 ) at sun.tools.jar.Main.getJarPath ( Main.java:1052 ) at sun.tools.jar.Main.getJarPath ( Main.java:1068 ) at sun.tools.jar.Main.genIndex ( Main.java:1084 ) at sun.tools.jar.Main.run ( Main.java:269 ) at sun.tools.jar.Main.main ( Main.java:1177 ) $ java -versionjava version `` 1.7.0_75 '' OpenJDK Runtime Environment ( IcedTea 2.5.4 ) ( 7u75-2.5.4-2 ) OpenJDK 64-Bit Server VM ( build 24.75-b04 , mixed mode )"
"public class A { } public class B extends A { } public class Cache { private final Map < String , B > cache ; public < T super B > Optional < T > find ( String s ) { return Optional < T > .ofNullable ( cache.get ( s ) ) ; } } A a = cache.find ( `` A '' ) .orElse ( new A ( ) ) B b = cache.find ( `` B '' ) .orElse ( new B ( ) ) public static < S , T extends S > Optional < S > convertOptional ( Optional < T > optional ) { return ( Optional < S > ) optional ; } A a = OptionalUtil. < A , B > convertOptional ( cache.find ( `` A '' ) ) .orElse ( new A ( ) ) ;"
class WithInner { class Inner { } } public class InheritInner extends WithInner.Inner { //constructorInheritInner ( WithInner wi ) { wi.super ( ) ; } }
"public class GetDatesOfWeek { public static void main ( String [ ] args ) { SimpleDateFormat sdf = new SimpleDateFormat ( `` dd-MM-yyyy '' ) ; Calendar cal = Calendar.getInstance ( ) ; cal.set ( 1991 , Calendar.DECEMBER , 11 ) ; //System.out.println ( cal.getTime ( ) ) ; //LINE NO : 14 for ( int i = Calendar.SUNDAY ; i < = Calendar.SATURDAY ; i++ ) { cal.set ( Calendar.DAY_OF_WEEK , i ) ; Date date = cal.getTime ( ) ; System.out.println ( sdf.format ( date ) ) ; } } } Wed Dec 11 07:38:06 IST 199108-12-199109-12-199110-12-199111-12-199112-12-199113-12-199114-12-1991 15-12-199116-12-199117-12-199118-12-199119-12-199120-12-199121-12-1991"
"new SubmitLogs ( ) .mail ( IP , date_time_UTC , date_time_IST , pageVisited , userCountry , userRegion , city , userAgent ) ; new SubmitLogs ( ) .mail ( IP , date_time_UTC , userAgent ) ;"
class Test { int i = 0 ; Test ( ) { System.out.println ( this ) ; System.out.println ( this.i ) ; } } public class Demo extends Test { int i = 10 ; Demo ( ) { super ( ) ; System.out.println ( `` calling super '' ) ; System.out.println ( this ) ; System.out.println ( this.i ) ; } public static void main ( String [ ] args ) throws IOException { Demo d = new Demo ( ) ; } } O/P : Demo @ 2e6e14080calling superDemo @ 2e6e140810
"ERROR : Error in Service { } at com.tryout.cdapp.exceptions.handler.CNDApplicationExceptionHandler . ( CNDApplicationExceptionHandler.java:30 ) on 2014-10-14 03:21:48,002java.lang.NullPointerException at com.google.appengine.datanucleus.scostore.FKListStore.getIndexPropertyName ( FKListStore.java:965 ) at com.google.appengine.datanucleus.scostore.FKListStore.getFilterPredicates ( FKListStore.java:940 ) at com.google.appengine.datanucleus.scostore.FKListStore.listIterator ( FKListStore.java:383 ) at com.google.appengine.datanucleus.scostore.FKListStore.listIterator ( FKListStore.java:349 ) at com.google.appengine.datanucleus.scostore.FKListStore.iterator ( FKListStore.java:342 ) at org.datanucleus.store.types.sco.backed.List.loadFromStore ( List.java:304 ) at org.datanucleus.store.types.sco.backed.List.initialise ( List.java:253 ) at org.datanucleus.store.types.sco.SCOUtils.createSCOWrapper ( SCOUtils.java:253 ) at org.datanucleus.store.types.sco.SCOUtils.newSCOInstance ( SCOUtils.java:139 ) at org.datanucleus.store.mapped.mapping.AbstractContainerMapping.replaceFieldWithWrapper ( AbstractContainerMapping.java:396 ) at org.datanucleus.store.mapped.mapping.AbstractContainerMapping.postFetch ( AbstractContainerMapping.java:414 ) at com.google.appengine.datanucleus.DatastorePersistenceHandler.fetchObject ( DatastorePersistenceHandler.java:599 ) at org.datanucleus.state.JDOStateManager.loadFieldsFromDatastore ( JDOStateManager.java:1638 ) at org.datanucleus.state.JDOStateManager.validate ( JDOStateManager.java:3511 ) at org.datanucleus.ObjectManagerImpl.findObject ( ObjectManagerImpl.java:3379 ) at org.datanucleus.api.jdo.JDOPersistenceManager.getObjectById ( JDOPersistenceManager.java:1722 ) at org.datanucleus.api.jdo.JDOPersistenceManager.getObjectById ( JDOPersistenceManager.java:1740 ) at com.tryout.cdapp.dao.impl.BaseDaoImpl.findById ( BaseDaoImpl.java:103 ) at com.tryout.cdapp.service.impl.ZoneServiceImpl.getZoneById ( ZoneServiceImpl.java:55 ) at com.tryout.cdapp.resource.ZoneResource.getById ( ZoneResource.java:75 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:45 ) at org.jboss.resteasy.core.MethodInjectorImpl.invoke ( MethodInjectorImpl.java:137 ) at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget ( ResourceMethodInvoker.java:280 ) at org.jboss.resteasy.core.ResourceMethodInvoker.invoke ( ResourceMethodInvoker.java:234 ) at org.jboss.resteasy.core.ResourceMethodInvoker.invoke ( ResourceMethodInvoker.java:221 ) at org.jboss.resteasy.core.SynchronousDispatcher.invoke ( SynchronousDispatcher.java:356 ) at org.jboss.resteasy.core.SynchronousDispatcher.invoke ( SynchronousDispatcher.java:179 ) at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service ( ServletContainerDispatcher.java:220 ) at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service ( HttpServletDispatcher.java:56 ) at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service ( HttpServletDispatcher.java:51 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:717 ) at org.mortbay.jetty.servlet.ServletHolder.handle ( ServletHolder.java:511 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1166 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at org.mortbay.jetty.servlet.ServletHandler.handle ( ServletHandler.java:388 ) at org.mortbay.jetty.security.SecurityHandler.handle ( SecurityHandler.java:216 ) at org.mortbay.jetty.servlet.SessionHandler.handle ( SessionHandler.java:182 ) at org.mortbay.jetty.handler.ContextHandler.handle ( ContextHandler.java:765 ) at org.mortbay.jetty.webapp.WebAppContext.handle ( WebAppContext.java:418 ) at org.mortbay.jetty.handler.HandlerWrapper.handle ( HandlerWrapper.java:152 ) at org.mortbay.jetty.Server.handle ( Server.java:326 ) at org.mortbay.jetty.HttpConnection.handleRequest ( HttpConnection.java:542 ) at org.mortbay.jetty.HttpConnection $ RequestHandler.headerComplete ( HttpConnection.java:923 ) at org.mortbay.jetty.HttpConnection.handle ( HttpConnection.java:404 ) at com.google.tracing.TraceContext $ TraceContextRunnable.runInContext ( TraceContext.java:438 ) at com.google.tracing.TraceContext $ TraceContextRunnable $ 1.run ( TraceContext.java:445 ) at com.google.tracing.CurrentContext.runInContext ( CurrentContext.java:220 ) at com.google.tracing.TraceContext $ AbstractTraceContextCallback.runInInheritedContextNoUnref ( TraceContext.java:309 ) at com.google.tracing.TraceContext $ AbstractTraceContextCallback.runInInheritedContext ( TraceContext.java:301 ) at com.google.tracing.TraceContext $ TraceContextRunnable.run ( TraceContext.java:442 ) at java.lang.Thread.run ( Thread.java:724 ) private final Class < T > persistentClass ; public BaseDaoImpl ( ) { persistentClass = ( Class < T > ) ( ( ParameterizedType ) getClass ( ) .getGenericSuperclass ( ) ) .getActualTypeArguments ( ) [ 0 ] ; } public T findById ( Serializable id ) { PersistenceManager pm = PMF.get ( ) .getPersistenceManager ( ) ; try { T t = pm.getObjectById ( persistentClass , id ) ; t.toString ( ) ; return t ; } finally { pm.close ( ) ; } } public Zone getZoneById ( String id ) { Zone zone = zoneDao.findById ( id ) ; return zone ; } public class Zone implements Serializable { private static final long serialVersionUID = 3946928960755099560L ; @ PrimaryKey @ Persistent ( valueStrategy = IdGeneratorStrategy.IDENTITY ) @ Extension ( vendorName = `` datanucleus '' , key = `` gae.encoded-pk '' , value = `` true '' ) private String id ; @ Persistent private String name ; @ Persistent private String siteId ; @ Persistent private String orgId ; @ Persistent ( defaultFetchGroup = `` true '' ) private List < LocationCoordinates > locationCoordinates ; @ Persistent private Date created ; @ Persistent private String description ; @ Persistent private String urlExtension ; @ Persistent private Integer timeSpentThreshold ; @ Persistent private Double tuningNumber ; @ Persistent ( defaultFetchGroup = `` true '' ) private HashMap < String , String > zonePayload ; @ Persistent ( defaultFetchGroup = `` true '' ) private List < ZoneSignalValue > zoneSignalValueList ; //Newly Added //Getters and Setters }"
"@ Configuration @ EnableAsyncpublic class AsyncConfig implements AsyncConfigurer { @ Override public Executor getAsyncExecutor ( ) { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor ( ) ; executor.setCorePoolSize ( 4 ) ; executor.setMaxPoolSize ( 8 ) ; executor.setQueueCapacity ( 100 ) ; executor.setThreadNamePrefix ( `` asyncTaskExecutor- '' ) ; executor.setAwaitTerminationSeconds ( 120 ) ; executor.setKeepAliveSeconds ( 30 ) ; executor.setRejectedExecutionHandler ( new ThreadPoolExecutor.CallerRunsPolicy ( ) ) ; executor.initialize ( ) ; return executor ; } @ Override public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler ( ) { return new SimpleAsyncUncaughtExceptionHandler ( ) ; } } @ RequestMapping ( value = `` /testAsync '' , method = RequestMethod.GET ) public void testAsync ( ) throws InterruptedException { businessService.doHeavyThings ( ) ; } @ Asyncpublic void doHeavyThings ( ) throws InterruptedException { LOGGER.error ( `` Start doHeavyThings with configured executor - `` + Thread.currentThread ( ) .getName ( ) + `` at `` + new Date ( ) ) ; Thread.sleep ( 5000L ) ; LOGGER.error ( `` Stop doHeavyThings with configured executor - `` + Thread.currentThread ( ) .getName ( ) + `` at `` + new Date ( ) ) ; }"
"public class Stack { private Object [ ] elements ; private int size = 0 ; private static final int DEFAULT_INITIAL_CAPACITY = 16 ; public Stack ( ) { elements = new Object [ DEFAULT_INITIAL_CAPACITY ] ; } public void push ( Object e ) { ensureCapacity ( ) ; elements [ size++ ] = e ; } public Object pop ( ) { if ( size == 0 ) throw new EmptyStackException ( ) ; return elements [ -- size ] ; } /** * Ensure space for at least one more element , roughly * doubling the capacity each time the array needs to grow . */ private void ensureCapacity ( ) { if ( elements.length == size ) elements = Arrays.copyOf ( elements , 2 * size + 1 ) ; } }"
"Double heading = getActiveAttributes ( ) .getHeading ( ) ; Double pitch = getActiveAttributes ( ) .getPitch ( ) ; // Adjust heading to be relative to globe or screen if ( heading ! = null ) { if ( AVKey.RELATIVE_TO_GLOBE.equals ( this.getActiveAttributes ( ) .getHeadingReference ( ) ) ) heading = dc.getView ( ) .getHeading ( ) .degrees - heading ; else heading = -heading ; } // Apply the heading and pitch if specified . if ( heading ! = null || pitch ! = null ) { gl.glTranslated ( xscale / 2 , yscale / 2 , 0 ) ; if ( pitch ! = null ) gl.glRotated ( pitch , 1 , 0 , 0 ) ; if ( heading ! = null ) gl.glRotated ( heading , 0 , 0 , 1 ) ; gl.glTranslated ( -xscale / 2 , -yscale / 2 , 0 ) ; } // Scale the unit quad gl.glScaled ( xscale , yscale , 1 ) ; public class Placemarks extends ApplicationTemplate { public static class AppFrame extends ApplicationTemplate.AppFrame { public AppFrame ( ) { super ( true , true , false ) ; final RenderableLayer layer = new RenderableLayer ( ) ; PointPlacemark pp = new PointPlacemark ( Position.fromDegrees ( 28 , -102 , 30000 ) ) ; pp.setLabelText ( `` PointPlacemark '' ) ; pp.setLineEnabled ( false ) ; pp.setAltitudeMode ( WorldWind.ABSOLUTE ) ; PointPlacemarkAttributes attrs = new PointPlacemarkAttributes ( ) ; attrs.setImageAddress ( `` gov/nasa/worldwindx/examples/images/georss.png '' ) ; attrs.setScale ( 1.0 ) ; attrs.setImageOffset ( Offset.CENTER ) ; attrs.setPitch ( 45.0 ) ; pp.setAttributes ( attrs ) ; layer.addRenderable ( pp ) ; // Add the layer to the model . insertBeforeCompass ( getWwd ( ) , layer ) ; } } public static void main ( String [ ] args ) { ApplicationTemplate.start ( `` WorldWind Placemarks '' , AppFrame.class ) ; } } public class Placemarks extends ApplicationTemplate { public static class AppFrame extends ApplicationTemplate.AppFrame { public AppFrame ( ) { super ( true , true , false ) ; final RenderableLayer layer = new RenderableLayer ( ) ; PointPlacemark pp = new PointPlacemark ( Position.fromDegrees ( 28 , -102 , 30000 ) ) ; pp.setLabelText ( `` PointPlacemark '' ) ; pp.setLineEnabled ( false ) ; pp.setAltitudeMode ( WorldWind.ABSOLUTE ) ; PointPlacemarkAttributes attrs = new PointPlacemarkAttributes ( ) ; attrs.setImageAddress ( `` gov/nasa/worldwindx/examples/images/georss.png '' ) ; attrs.setScale ( 1.0 ) ; attrs.setImageOffset ( Offset.CENTER ) ; pp.setAttributes ( attrs ) ; layer.addRenderable ( pp ) ; // Add the layer to the model . insertBeforeCompass ( getWwd ( ) , layer ) ; Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { for ( double i = 0.0 ; i < 360 ; i+=.1 ) { attrs.setPitch ( i ) ; System.out.println ( `` Pitch is now `` +i ) ; try { Thread.sleep ( 100 ) ; } catch ( InterruptedException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } AppFrame.this.getWwd ( ) .redrawNow ( ) ; } } } ) ; t.start ( ) ; } } public static void main ( String [ ] args ) { ApplicationTemplate.start ( `` WorldWind Placemarks '' , AppFrame.class ) ; } }"
"ConcurrentHashMap < String , String > configurationMap = new ConcurrentHashMap < > ( ) ; List < Result > results = result.getResults ( ) ; results.stream ( ) .forEach ( res - > { res.getSeries ( ) .stream ( ) .forEach ( series - > { series.getValues ( ) .stream ( ) .forEach ( vals - > { configurationMap.put ( vals.get ( 1 ) .toString ( ) , vals.get ( 2 ) .toString ( ) ) ; } ) ; } ) ; } ) ; //Note : vals is List < List < Object > > type"
"public class DeathNotificationObject { private static ReferenceQueue < DeathNotificationObject > refQueue = new ReferenceQueue < DeathNotificationObject > ( ) ; static { Thread deathThread = new Thread ( `` Death notification '' ) { @ Override public void run ( ) { try { while ( true ) { refQueue.remove ( ) ; System.out.println ( `` I 'm dying ! `` ) ; } } catch ( Throwable t ) { t.printStackTrace ( ) ; } } } ; deathThread.setDaemon ( true ) ; deathThread.start ( ) ; } public DeathNotificationObject ( ) { System.out.println ( `` I 'm born . `` ) ; new PhantomReference < DeathNotificationObject > ( this , refQueue ) ; } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i++ ) { new DeathNotificationObject ( ) ; } try { System.gc ( ) ; Thread.sleep ( 3000 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } } I 'm born.I 'm born.I 'm born.I 'm born.I 'm born.I 'm born.I 'm born.I 'm born.I 'm born.I 'm born . public class ElementCachedImage { private static Map < PhantomReference < ElementCachedImage > , File > refMap = new HashMap < PhantomReference < ElementCachedImage > , File > ( ) ; private static ReferenceQueue < ElementCachedImage > refQue = new ReferenceQueue < ElementCachedImage > ( ) ; static { Thread cleanUpThread = new Thread ( `` Image Temporary Files cleanup '' ) { @ Override public void run ( ) { try { while ( true ) { Reference < ? extends ElementCachedImage > phanRef = refQue.remove ( ) ; File f = refMap.remove ( phanRef ) ; Calendar c = Calendar.getInstance ( ) ; c.setTimeInMillis ( f.lastModified ( ) ) ; _log.debug ( `` Deleting unused file : `` + f + `` created at `` + c.getTime ( ) ) ; f.delete ( ) ; } } catch ( Throwable t ) { _log.error ( t ) ; } } } ; cleanUpThread.setDaemon ( true ) ; cleanUpThread.start ( ) ; } ImageWrapper img = null ; private static Logger _log = Logger.getLogger ( ElementCachedImage.class ) ; public boolean copyToFile ( File dest ) { try { FileUtils.copyFile ( img.getFile ( ) , dest ) ; } catch ( IOException e ) { _log.error ( e ) ; return false ; } return true ; } public ElementCachedImage ( BufferedImage bi ) { if ( bi == null ) throw new NullPointerException ( ) ; img = new ImageWrapper ( bi ) ; PhantomReference < ElementCachedImage > pref = new PhantomReference < ElementCachedImage > ( this , refQue ) ; refMap.put ( pref , img.getFile ( ) ) ; new Thread ( `` Save image to file '' ) { @ Override public void run ( ) { synchronized ( ElementCachedImage.this ) { if ( img ! = null ) { img.saveToFile ( ) ; img.getFile ( ) .deleteOnExit ( ) ; } } } } .start ( ) ; } }"
"import java.awt.Graphics2D ; import java.awt.image . * ; /** * @ author Psyny */public class ImageAppearFX { //Essencial Data BufferedImage imgProcessed ; int [ ] RAWoriginal ; int [ ] RAWprocessed ; WritableRaster rbgRasterProcessedW ; //Information about the image int x , y ; int [ ] mapBrightness ; public ImageAppearFX ( BufferedImage inputIMG ) { //Store Dimensions x = inputIMG.getWidth ( ) ; y = inputIMG.getHeight ( ) ; //Convert the input image to INT_ARGB and store it . this.imgProcessed = new BufferedImage ( x , y , BufferedImage.TYPE_INT_ARGB ) ; Graphics2D canvas = this.imgProcessed.createGraphics ( ) ; canvas.drawImage ( inputIMG , 0 , 0 , x , y , null ) ; canvas.dispose ( ) ; //Create an int Array of the pixels informations . //p.s . : Notice that the image was converted to INT_ARGB this.RAWoriginal = ( ( DataBufferInt ) this.imgProcessed.getRaster ( ) .getDataBuffer ( ) ) .getData ( ) ; //Dupplication of original pixel array . So we can make changes based on original image this.RAWprocessed = this.RAWoriginal.clone ( ) ; //Get Raster . We will need the raster to write pixels on rbgRasterProcessedW = imgProcessed.getRaster ( ) ; //Effect Information : Store brightness information mapBrightness = new int [ x*y ] ; int r , g , b , a , greaterColor ; // PRocess all pixels for ( int i=0 ; i < this.RAWoriginal.length ; i++ ) { a = ( this.RAWoriginal [ i ] > > 24 ) & 0xFF ; r = ( this.RAWoriginal [ i ] > > 16 ) & 0xFF ; g = ( this.RAWoriginal [ i ] > > 8 ) & 0xFF ; b = ( this.RAWoriginal [ i ] ) & 0xFF ; //Search for Stronger Color greaterColor = r ; if ( b > r ) { if ( g > b ) greaterColor = g ; else greaterColor = b ; } else if ( g > r ) { greaterColor = g ; } this.mapBrightness [ i ] = greaterColor ; } } //Effect : Show only in a certain percent of brightness public BufferedImage BrightnessLimit ( float percent ) { // Adjust input values percent = percent / 100 ; // Pixel Variables int hardCap = ( int ) ( 255 * percent ) ; int r , g , b , a , bright ; // Process all pixels for ( int i=0 ; i < this.RAWoriginal.length ; i++ ) { //Get information of a pixel of the ORIGINAL image a = ( this.RAWoriginal [ i ] > > 24 ) & 0xFF ; r = ( this.RAWoriginal [ i ] > > 16 ) & 0xFF ; g = ( this.RAWoriginal [ i ] > > 8 ) & 0xFF ; b = ( this.RAWoriginal [ i ] ) & 0xFF ; //Brightness information of that same pixel bright = this.mapBrightness [ i ] ; // if ( bright > hardCap ) { a = 0 ; } this.RAWprocessed [ i ] = ( ( a < < 24 ) + ( r < < 16 ) + ( g < < 8 ) + ( b ) ) ; //Write ARGB in byte format } //Copy the processed array into the raster of processed image rbgRasterProcessedW.setDataElements ( 0 , 0 , x , y , RAWprocessed ) ; return imgProcessed ; } //Return reference to the processed image public BufferedImage getImage ( ) { return imgProcessed ; } }"
public class Script { { Gadgets.log ( `` anonymous 1 '' ) ; } public Script ( ) { Gadgets.log ( `` constructor '' ) ; } { Gadgets.log ( `` anonymous 2 '' ) ; } } Script : anonymous 1Script : anonymous 2Script : constructor { // whatever code is needed for initialization goes here }
"Universityidnameaudit_versionStudent idname university_idaudit_version @ Entity @ Table ( name = `` university '' ) @ DynamicUpdate @ Data @ Accessors ( chain = true ) @ EqualsAndHashCode ( callSuper = true ) public class University { @ Id @ SequenceGenerator ( name = `` university_id_sequence_generator '' , sequenceName = `` university_id_sequence '' , allocationSize = 1 ) @ GeneratedValue ( strategy = SEQUENCE , generator = `` university_id_sequence_generator '' ) @ EqualsAndHashCode.Exclude private Long id ; @ Column ( name = `` name '' ) private String name ; @ Version @ Column ( name = `` audit_version '' ) @ EqualsAndHashCode.Exclude private Long auditVersion ; @ OptimisticLock ( excluded = true ) @ OneToMany ( mappedBy = `` student '' ) @ ToString.Exclude private List < Student > student ; } @ Entity @ Table ( name = `` student '' ) @ DynamicUpdate @ Data @ Accessors ( chain = true ) @ EqualsAndHashCode ( callSuper = true ) public class Student { @ Id @ SequenceGenerator ( name = `` student_id_sequence_generator '' , sequenceName = `` student_id_sequence '' , allocationSize = 1 ) @ GeneratedValue ( strategy = SEQUENCE , generator = `` student_id_sequence_generator '' ) @ EqualsAndHashCode.Exclude private Long id ; @ Column ( name = `` name '' ) private String name ; @ Version @ Column ( name = `` audit_version '' ) @ EqualsAndHashCode.Exclude private Long auditVersion ; @ OptimisticLock ( excluded = true ) @ ManyToOne ( fetch = FetchType.LAZY ) @ JoinColumn ( name = `` university_id '' ) @ ToString.Exclude private University university ; } Optional < University > universityInDB = universidyRepository.findById ( universtityId ) ; universityInDB.ifPresent ( university - > student.setUniversity ( university ) ; Optional < Student > optionalExistingStudent = studentRepository.findById ( student ) ; if ( optionalExistingStudent.isPresent ( ) ) { Student existingStudent = optionalExistingStudent.get ( ) ; if ( ! student.equals ( existingStudent ) ) { copyContentProperties ( student , existingStudent ) ; studentToReturn = studentRepository.save ( existingStudent ) ; } else { studentToReturn = existingStudent ; } } else { studentToReturn = studentRepository.save ( student ) ; } private static final String [ ] IGNORE_PROPERTIES = { `` id '' , `` createdOn '' , `` updatedOn '' , `` auditVersion '' } ; public void copyContentProperties ( Object source , Object target ) { BeanUtils.copyProperties ( source , target , Arrays.asList ( IGNORE_PROPERTIES ) ) ) ; }"
"Caused by : java.lang.OutOfMemoryError : Java heap space at org.apache.uima.internal.util.IntArrayUtils.expand_size ( IntArrayUtils.java:57 ) at org.apache.uima.internal.util.IntArrayUtils.ensure_size ( IntArrayUtils.java:39 ) at org.apache.uima.cas.impl.Heap.grow ( Heap.java:187 ) at org.apache.uima.cas.impl.Heap.add ( Heap.java:241 ) at org.apache.uima.cas.impl.CASImpl.ll_createFS ( CASImpl.java:2844 ) at org.apache.uima.cas.impl.CASImpl.createFS ( CASImpl.java:489 ) at org.apache.uima.cas.impl.CASImpl.createAnnotation ( CASImpl.java:3837 ) at org.apache.uima.ruta.rule.RuleMatch.getMatchedAnnotations ( RuleMatch.java:172 ) at org.apache.uima.ruta.rule.RuleMatch.getMatchedAnnotationsOf ( RuleMatch.java:68 ) at org.apache.uima.ruta.rule.RuleMatch.getLastMatchedAnnotation ( RuleMatch.java:73 ) at org.apache.uima.ruta.rule.ComposedRuleElement.mergeDisjunctiveRuleMatches ( ComposedRuleElement.java:330 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:213 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueMatch ( ComposedRuleElement.java:225 ) at org.apache.uima.ruta.rule.ComposedRuleElement.continueOwnMatch ( ComposedRuleElement.java:362 ) at org.apache.uima.ruta.rule.ComposedRuleElement.fallbackContinue ( ComposedRuleElement.java:459 ) WORDLIST EnglishStopWordList = 'stopWords.txt ' ; WORDLIST FiltersList = 'AnchorFilters.txt ' ; DECLARE Filters , EnglishStopWords ; DECLARE Anchors , SpanStart , SpanClose ; DocumentAnnotation { - > ADDRETAINTYPE ( MARKUP ) } ; DocumentAnnotation { - > MARKFAST ( Filters , FiltersList ) } ; STRING MixCharacterRegex = `` [ 0-9 ] + [ a-zA-Z ] + '' ; DocumentAnnotation { - > MARKFAST ( EnglishStopWords , EnglishStopWordList , true ) } ; ( SW | CW | CAP ) { - > MARK ( Anchors , 1 , 2 ) } ; Anchors { CONTAINS ( EnglishStopWords ) - > UNMARK ( Anchors ) } ; ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) ( SW | CW | CAP ) ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) EnglishStopWords ? { - > MARK ( Anchors , 1 , 4 ) } ; ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) ? ( SW | CW | CAP ) ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) EnglishStopWords ? { - > MARK ( Anchors , 1 , 4 ) } ; ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) ( SW | CW | CAP ) ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) ? EnglishStopWords ? { - > MARK ( Anchors , 1 , 4 ) } ; ( SW | CW | CAP ) ( SPECIAL { REGEXP ( `` [ '\ '' -= ( ) \\ [ \\ ] ] '' ) } | PM ) EnglishStopWords ? { - > MARK ( Anchors , 1 , 3 ) } ; Anchors { CONTAINS ( MARKUP ) - > UNMARK ( Anchors ) } ; MixCharacterRegex - > Anchors ; '' < Value > '' - > SpanStart ; '' < /Value > '' - > SpanClose ; Anchors { - > CREATE ( ExtractedData , `` type '' = `` ANCHOR '' , `` value '' = Anchors ) } ; SpanStart Filters ? SPACE ? ExtractedData SPACE ? Filters ? SpanClose { - > GATHER ( Data , 2 , 6 , `` ExtractedData '' = 4 ) } ;"
"public final class Stock { private final String ticker ; private double qty ; private double price ; public Stock ( String ticker , double qty , double price ) { this.ticker = ticker ; this.qty = qty ; this.price = price ; //I am assuming a memory fence gets inserted here . } public final void updateQty ( double qty ) { this.qty = qty ; } public final void updatePrice ( double price ) { this.price = price ; } }"
public class ValueLatch < T > { @ GuardedBy ( `` this '' ) private T value = null ; private final CountDownLatch done = new CountDownLatch ( 1 ) ; public boolean isSet ( ) { return ( done.getCount ( ) == 0 ) ; } public synchronized void setValue ( T newValue ) { if ( ! isSet ( ) ) { value = newValue ; done.countDown ( ) ; } } public T getValue ( ) throws InterruptedException { done.await ( ) ; synchronized ( this ) { return value ; } } }
"A B C A . C A B . A . . A . . A . . . . .. . . . B . C . . C B . . B . . B . . . .. . . . . . . . . . . . C . . . . C C . .. . . . . . . . . . . . . . . . . . B . .. . . . . . . . . . . . . . . . . . . A . ( spaces are for clarity only ) public class SimpleRecursive { private int ofLength ; private int paths = 0 ; private String [ ] grid ; public int count ( String [ ] grid , int ofLength ) { this.grid = grid ; this.ofLength = ofLength ; paths = 0 ; long startTime = System.currentTimeMillis ( ) ; for ( int j = 0 ; j < grid.length ; j++ ) { for ( int index = grid [ j ] .indexOf ( ' A ' ) ; index > = 0 ; index = grid [ j ] .indexOf ( ' A ' , index + 1 ) ) { recursiveFind ( 1 , index , j ) ; } } System.out.println ( System.currentTimeMillis ( ) - startTime ) ; return paths ; } private void recursiveFind ( int layer , int x , int y ) { if ( paths > = 1_000_000_000 ) { } else if ( layer == ofLength ) { paths++ ; } else { int xBound = grid [ 0 ] .length ( ) ; int yBound = grid.length ; for ( int dx = -1 ; dx < = 1 ; ++dx ) { for ( int dy = -1 ; dy < = 1 ; ++dy ) { if ( dx ! = 0 || dy ! = 0 ) { if ( ( x + dx < xBound & & y + dy < yBound ) & & ( x + dx > = 0 & & y + dy > = 0 ) ) { if ( grid [ y ] .charAt ( x ) + 1 == grid [ y + dy ] .charAt ( x + dx ) ) { recursiveFind ( layer + 1 , x + dx , y + dy ) ; } } } } } } } } import java.util.ArrayList ; import java.util.HashMap ; import java.util.List ; public class AlphabetCount { private int ofLength ; private int paths = 0 ; private String [ ] grid ; // This was an optimization that helped a little . It would store possible next paths // private HashMap < Integer , ArrayList < int [ ] > > memoStack = new HashMap < Integer , ArrayList < int [ ] > > ( ) ; //hashmap of indices that are part of a complete path ( memoization saves ) private HashMap < Integer , int [ ] > completedPath = new HashMap < Integer , int [ ] > ( ) ; //entry point public int count ( String [ ] grid , int ofLength ) { this.grid = grid ; //Since i find the starting point ( ' A ' ) by brute force then i just need the next n-1 letters this.ofLength = ofLength - 1 ; //variable to hold number of completed runs paths = 0 ; //holds the path that was taken to get to current place . determined that i dont really need to memoize ' Z ' hence ofLength -1 again List < int [ ] > fullPath = new ArrayList < int [ ] > ( ofLength - 1 ) ; //just a timer to compare optimizations long startTime = System.currentTimeMillis ( ) ; //this just loops around finding the next ' A ' for ( int j = 0 ; j < grid.length ; j++ ) { for ( int index = grid [ j ] .indexOf ( ' A ' ) ; index > = 0 ; index = grid [ j ] .indexOf ( ' A ' , index + 1 ) ) { //into recursive function . fullPath needs to be kept in this call so that it maintains state relevant to call stack ? also the 0 here is technically ' B ' because we already found ' A ' recursiveFind ( fullPath , 0 , index , j ) ; } } System.out.println ( System.currentTimeMillis ( ) - startTime ) ; return paths ; } private void recursiveFind ( List < int [ ] > fullPath , int layer , int x , int y ) { //hashing key . mimics strings tohash . should not have any duplicates to my knowledge int key = 31 * ( x ) + 62 * ( y ) + 93 * layer ; //if there is more than 1000000000 paths then just stop counting and tell me its over 1000000000 if ( paths > = 1_000_000_000 ) { //this if statement never returns true unfortunately.. this is the optimization that would actually help me . } else if ( completedPath.containsKey ( key ) ) { paths++ ; for ( int i = 0 ; i < fullPath.size ( ) - 1 ; i++ ) { int mkey = 31 * fullPath.get ( i ) [ 0 ] + 62 * fullPath.get ( i ) [ 1 ] + 93 * ( i ) ; if ( ! completedPath.containsKey ( mkey ) ) { completedPath.put ( mkey , fullPath.get ( i ) ) ; } } } //if we have a full run then save the path we took into the memoization hashmap and then increase paths else if ( layer == ofLength ) { for ( int i = 0 ; i < fullPath.size ( ) - 1 ; i++ ) { int mkey = 31 * fullPath.get ( i ) [ 0 ] + 62 * fullPath.get ( i ) [ 1 ] + 93 * ( i ) ; if ( ! completedPath.containsKey ( mkey ) ) { completedPath.put ( mkey , fullPath.get ( i ) ) ; } } paths++ ; } //everything with memoStack is an optimization that i used that increased performance marginally.// else if ( memoStack.containsKey ( key ) ) { // for ( int [ ] path : memoStack.get ( key ) ) { // recursiveFind ( fullPath , layer + 1 , path [ 0 ] , path [ 1 ] ) ; // } // } else { int xBound = grid [ 0 ] .length ( ) ; int yBound = grid.length ; // ArrayList < int [ ] > newPaths = new ArrayList < int [ ] > ( ) ; int [ ] pair = new int [ 2 ] ; //this loop checks indices adjacent in all 8 directions ignoring index you are in then checks to see if you are out of bounds then checks to see if one of those directions has the next character for ( int dx = -1 ; dx < = 1 ; ++dx ) { for ( int dy = -1 ; dy < = 1 ; ++dy ) { if ( dx ! = 0 || dy ! = 0 ) { if ( ( x + dx < xBound & & y + dy < yBound ) & & ( x + dx > = 0 & & y + dy > = 0 ) ) { if ( grid [ y ] .charAt ( x ) + 1 == grid [ y + dy ] .charAt ( x + dx ) ) { pair [ 0 ] = x + dx ; pair [ 1 ] = y + dy ; // newPaths.add ( pair.clone ( ) ) ; //not sure about this ... i wanted to save space by not allocating everything but i needed fullPath to only have the path up to the current call fullPath.subList ( layer , fullPath.size ( ) ) .clear ( ) ; //i reuse the int [ ] pair so it needs to be cloned fullPath.add ( pair.clone ( ) ) ; //recursive call recursiveFind ( fullPath , layer + 1 , x + dx , y + dy ) ; } } } } } // memoStack.putIfAbsent ( key , newPaths ) ; // memo thought ! if layer , x and y are the same as a successful runs then you can use a // previous run } } } 1 / | \ 2 5 8 /\ |\ |\3 4 6 7 9 10"
< dependency > < groupId > com.google.guava < /groupId > < artifactId > guava < /artifactId > < version > 18.0 < /version > < /dependency >
int i = 0 ; for ( char c = Character.MIN_VALUE ; c < Character.MAX_VALUE ; c++ ) { if ( Character.isLetterOrDigit ( c ) ) { i++ ; } } System.out.println ( i ) ;
"/api/ /com.organization.api.v1.rs - > Rest Services with the JAX-RS annotations /com.organization.api.v1.services - > Service classes used by Rest Services . Basically , they only have the logic to transform the DTOs objects from Remote EJBs in JSON . This is separated by API version , because the JSON can be different in each version . /com.organization.api.v1.vo - > View Objects returned by the Rest Services . They will be transformed in JSON using Gson . /com.organization.api.services - > Service classes used by versioned Services . Here we have the lookup for Remote EJBs and some API logic , like validations . This services can be used by any versioned of each Service . @ Path ( `` /v1/user/ '' ) public class UserV1RS { @ GET public UserV1VO getUsername ( ) { UserV1VO userVO = ServiceLocator.get ( UserV1Service.class ) .getUsername ( ) ; return userVO ; } } public class UserV1Service extends UserService { public UserV1VO getUsername ( ) { UserDTO userDTO = getUserName ( ) ; // method from UserService return new UserV1VO ( userDTO.getName ) ; } } public class UserService { public UserDTO getUsername ( ) { UserDTO userDTO = RemoteEJBLocator.lookup ( UserRemote.JNDI_REMOTE_NAME ) .getUser ( ) ; return userDTO ; } }"
"N : the number of elements in kernel . M : the length of an element in the kernel . int [ ] [ ] Kernel : ... . i : 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 ( length = M ) i+1 : 1 0 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 ( length = M ) ... . N : ... . Result [ 0 ] = 0 0 0 0 0 0 0 0 0 0 0 0 0 Result [ 1 ] = Kernel [ 0 ] Result [ 2 ] = Kernel [ 1 ] ... . Result [ i ] = Kernel [ i-1 ] Result [ N-1 ] = Kernel [ N-2 ] Result [ N ] = Kernel [ 0 ] + Kernel [ 1 ] Result [ N+1 ] = Kernel [ 0 ] + Kernel [ 2 ] Result [ N+i ] = Kernel [ 0 ] + Kernel [ i ] Result [ 2N-1 ] = Kernel [ 0 ] + Kernel [ N-1 ] ... . Result [ I ] = Kernel [ 0 ] + Kernel [ 1 ] + Kernel [ 2 ] Result [ I+1 ] = Kernel [ 0 ] + Kernel [ 1 ] + Kernel [ i ] Result [ I+J ] = Kernel [ 0 ] + Kernel [ 1 ] + Kernel [ N-1 ] ... . Result [ 2^N+1 ] = Kernel [ 0 ] + Kernel [ 1 ] + ... + Kernel [ i ] + ... + Kernel [ N-1 ] public static int [ ] [ ] combinaisons ( int [ ] [ ] kernel ) { /* if the kernel is empty , there is no possible combinaison */ if ( kernel.length == 0 ) return kernel ; /* We allocate the good number of space ... */ int [ ] [ ] result = new int [ ( int ) ( Math.pow ( 2 , noyau.length ) +1 ) ] [ ] ; /* Every element in result has the same length as in kernel 's elements . */ for ( int i = 0 ; i < resultat.length ; i++ ) { result [ i ] = new int [ kernel [ 0 ] .length ] ; } /* The first element of result has to be only 0 0 0 0 0 0 0 */ for ( int j = 0 ; j < kernel [ 0 ] .length ; j++ ) { result [ 0 ] [ j ] = 0 ; } /* We rewrite the element of kernel because they are a part of the solution ... */ for ( int i = 0 ; i < kernel.length ; i++ ) { for ( int j = 0 ; j < kernel [ i ] .length ; j++ ) { result [ i+1 ] [ j ] = kernel [ i ] [ j ] ; } } /* I managed to do it when it 's the sum of only 2 elements , but it has to be with 3 , 4 ... N-1 : / */ for ( int i = 0 ; i < kernel.length ; i++ ) { for ( int j = 0 ; j < kernel [ i ] .length ; j++ ) { for ( int k = i+1 ; k < kernel.length ; k++ ) { result [ k*kernel.length+i ] [ j ] = ( kernel [ i ] [ j ] +kernel [ k ] [ j ] ) % 2 ; } } } return result ; } N = 2 M = 4 Kernel : 0 1 1 0 1 0 0 1 In result I want : 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 1 ( the sum of the 2 elements in Kernel )"
public interface Juicy < T > { Juice < T > squeeze ( ) ; } < T extends Juicy < T > > List < Juice < T > > squeeze ( List < T > fruits ) ; class Orange extends Fruit implements Juicy < Orange > ; class RedOrange extends Orange ; < T extends Juicy < T > > List < Juice < ? super T > > squeeze ( List < ? extends T > fruits ) ; < **T extends Juicy < ? super T > > ** List < Juice < ? super T > > squeezeSuperExtends ( List < ? extends T > fruits ) ;
"/root/jre-13.0.1/bin/java -Dfile.encoding=UTF-8 -- add-modules javafx.controls , javafx.fxml -Dprism.verbose=true -Djavafx.verbose=true -Dglass.platform=Monocle -Dprism.order=es2 -Djava.library.path=/root/jre-13.0.1/lib/ -Dembedded=monocle -jar /home/root/NetBeansProjects//JavaFXFXML/dist/JavaFXFXML.jar cmd : cd '/home/root/NetBeansProjects//JavaFXFXML ' ; '/root/jre-13.0.1//bin/java ' -Dfile.encoding=UTF-8 -- add-modules javafx.controls , javafx.fxml -Dprism.verbose=true -Djavafx.verbose=true -Dglass.platform=Monocle -Dprism.order=es2 -Djava.library.path=/root/jre-13.0.1/lib/ -Dembedded=monocle -jar /home/root/NetBeansProjects//JavaFXFXML/dist/JavaFXFXML.jar JavaFX launchApplication method : launchMode=LM_JARPrism pipeline init order : es2 Using Double Precision Marlin RasterizerUsing dirty region optimizationsUsing system sized mask for primitivesNot forcing power of 2 sizes for texturesUsing hardware CLAMP_TO_ZERO modeOpting in for HiDPI pixel scalingPrism pipeline name = com.sun.prism.es2.ES2PipelineLoading ES2 native library ... prism_es2_monocleLoaded /root/jre-13.0.1/lib/libprism_es2_monocle.so from java.library.path succeeded.GLFactory using com.sun.prism.es2.MonocleGLFactoryLoaded /root/jre-13.0.1/lib/libglass_monocle.so from java.library.pathcom.sun.glass.ui.monocle.GLException : 0x300b : Could not get EGL surface at javafx.graphics/com.sun.glass.ui.monocle.AcceleratedScreen. < init > ( Unknown Source ) at javafx.graphics/com.sun.glass.ui.monocle.NativePlatform.getAcceleratedScreen ( Unknown Source ) at javafx.graphics/com.sun.prism.es2.MonocleGLFactory.initialize ( Unknown Source ) at javafx.graphics/com.sun.prism.es2.ES2Pipeline. < clinit > ( Unknown Source ) at java.base/java.lang.Class.forName0 ( Native Method ) at java.base/java.lang.Class.forName ( Unknown Source ) at javafx.graphics/com.sun.prism.GraphicsPipeline.createPipeline ( Unknown Source ) at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer $ PipelineRunnable.init ( Unknown Source ) at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer $ PipelineRunnable.run ( Unknown Source ) at java.base/java.lang.Thread.run ( Unknown Source ) ( X ) Got class = class com.sun.prism.es2.ES2PipelineGraphicsPipeline.createPipeline : error initializing pipeline com.sun.prism.es2.ES2PipelineGraphics Device initialization failed for : es2 # java -- versionopenjdk 13.0.1-BellSoft 2019-10-15OpenJDK Runtime Environment ( build 13.0.1-BellSoft+9 ) OpenJDK Server VM ( build 13.0.1-BellSoft+9 , mixed mode )"
XX.X > XX.X > =XX.X < XX.X < =XX.XXX.X-XX.X
"rpc notifyPeers ( NotifyPeersRequest ) returns ( NotifyPeersResponse ) ; @ Overridepublic void notifyPeers ( NotifyPeersRequest request , StreamObserver < NotifyPeersResponse > responseObserver ) { logger.debug ( `` gRPC 'notifyPeers ' request received '' ) ; String host = request.getHost ( ) ; for ( PeerClient c : clients.values ( ) ) { c.addPeer ( host ) ; // < -- -- this call } NotifyPeersResponse response = NotifyPeersResponse.newBuilder ( ) .setResult ( result ) .build ( ) ; responseObserver.onNext ( response ) ; responseObserver.onCompleted ( ) ; } ManagedChannel channel = ManagedChannelBuilder.forTarget ( peer ) .usePlaintext ( ) .build ( ) ; ClientB client = new ClientB ( channel ) ; clients.put ( peer , client ) ; rpc addPeer ( AddPeerRequest ) returns ( AddPeerResponse ) ; rpc addPeer ( AddPeerRequest ) returns ( AddPeerResponse ) ; @ Overridepublic void addPeer ( AddPeerRequest addPeerRequest , StreamObserver < AddPeerResponse > responseObserver ) { logger.info ( `` gRPC 'addPeer ' request received '' ) ; boolean result = peer.addPeer ( host ) ; AddPeerResponse response = AddPeerResponse.newBuilder ( ) .setResponse ( result ) .build ( ) ; responseObserver.onNext ( response ) ; responseObserver.onCompleted ( ) ; public boolean addPeer ( String host ) { AddPeerRequest request = AddPeerRequest.newBuilder ( ) .setHost ( host ) .build ( ) ; logger.info ( `` Sending 'addPeer ' request '' ) ; AddPeerResponse response = blockingStub.addPeer ( request ) ; return response.getResponse ( ) ; }"
| byte | byte | short | byte | int | int |
public interface SelfMaker < SELF > { public SELF getSelf ( ) ; } public class Dog implements SelfMaker < Dog > { String color ; public String toString ( ) { return `` some `` + color + `` dog '' ; } public Dog procreate ( Dog anotherDog ) { Dog son = getSelf ( ) ; son.color = color ; return son ; } @ Override public Dog getSelf ( ) { return new Dog ( ) ; } } public class DomesticDog extends Dog { private String name ; public String toString ( ) { return super.toString ( ) + `` named `` + name ; } } public class Couple < T extends SelfMaker < T > > { private T first ; private T second ; public String toString ( ) { return first.toString ( ) + `` and `` + second.toString ( ) ; } } public class CoupleOfDomesticDogs extends Couple < DomesticDog > { public DomesticDog procreate ( ) { DomesticDog son = first.procreate ( second ) ; return son ; } }
public abstract class Chart < T extends ChartComponent > { private List < T > components ; // ... rest of the Chart class } public abstract class ChartComponent { private Color color ; // .. rest of ChartComponent class } public class PieWedge extends ChartComponent { double wedgeValue ; // ... rest of PieWedge class } public class PieChart extends Chart < PieWedge > { // ... thus its list of ChartComponents is actually a List < PieWedge > } LineChart lineChart = new LineChart ( ) ; lineChart.addLine ( new PieWedge ( ) ) ; Chart CartesianChart BarChart LineChart PieChartChartComponent CartesianComponent BarGroup Line PieWedgePieChart extends Chart < PieWedge > CartesianChart extends Chart < CartesianComponent > BarGroup extends CartesianComponentLine extends CartesianComponentBarChart extends CartesianChart < BarGroup > LineChart extends CartesianChart < Line > public abstract class CartesianChart < T extends CartesianComponent > extends Chart < CartesianComponent > { // ... }
"List < Type > list = new ArrayList < Type > ( 2 ) ; list.add ( new Type ( `` one '' ) ) ; list.add ( new Type ( `` two '' ) ) ; List < Type > list = Arrays.asList ( new Type ( `` one '' ) , new Type ( `` two '' ) ) ;"
ImageIcon temp= new ImageIcon ( `` resources/pictures/temp.png '' ) ;
"public void writeTokens ( Collection < Token > tokens ) { try { PreparedStatement updateToken = dbConnection.prepareStatement ( `` UPDATE tokens SET ` idTag ` = ? , ` Value ` = ? , ` Count ` = ? , ` Frequency ` = ? WHERE ` idToken ` = ? ; '' ) ; for ( Token token : tokens ) { updateToken.setInt ( 1 , 0 ) ; updateToken.setString ( 2 , token.getWord ( ) ) ; updateToken.setInt ( 3 , token.getCount ( ) ) ; updateToken.setInt ( 4 , token.getFrequency ( ) ) ; updateToken.setInt ( 5 , token.getNounID ( ) ) ; updateToken.executeUpdate ( ) ; } } catch ( SQLException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } }"
"public class test { public static void main ( String [ ] args ) { int [ ] array = new int [ ] { 0 , 1 , 2,3 } ; int size = 2 ; int [ ] tmp = new int [ size ] ; //Arrays.fill ( tmp , -1 ) ; generateCombinations ( array , 0 , 0 , tmp ) ; } private static void generateCombinations ( int [ ] array , int start , int depth , int [ ] tmp ) { if ( depth == tmp.length ) { for ( int j = 0 ; j < depth ; j++ ) { System.out.print ( array [ tmp [ j ] ] ) ; } System.out.println ( ) ; return ; } for ( int i = start ; i < array.length ; i++ ) { tmp [ depth ] = i ; generateCombinations ( array , i + 1 , depth + 1 , tmp ) ; } } }"
"class Test { public final Foo x ; public Test ( Foo x ) { this.x = x ; } } import java.util . * ; class Test { public static final Map < String , Object > map ; static { Map < String , Object > map = new HashMap < > ( ) ; // ... // assume I fill the map with useful data here // ... // now I want to freeze it and assign it to the field Test.map = Collections.unmodifiableMap ( map ) ; } }"
public Boolean convertToEntityAttribute ( String y ) { String val = ( String ) y ; if ( val.equals ( `` Y '' ) ) { return true ; } else { return false ; } }
A / \ B C /\ \ D E F ( A ( B ( D ) ( E ) ) ( C ( F ) ) )
implementation project ( ' : app ' ) Circular dependency between the following tasks : :placepicker : generateDebugRFile\ -- - : placepicker : generateDebugRFile ( * ) ( * ) - details omitted ( listed previously )
Foo foo = new FooBar ( ) .new Foo ( ) ; FooBar ( ) .new
"public < E , L extends List < E > & RandomAccess > E getRandomElement ( L list ) { ... } public < E , L extends RandomAccess < E > > E getRandomElement ( L list ) { ... }"
"int a [ ] = new int [ ] { 20 , 30 } ; List lis = Arrays.asList ( a ) ; System.out.print ( lis.contains ( 20 ) ) ;"
1 class C1 { 2 int a=5 ; 3 public static void main ( String args [ ] ) { 4 C1 b=new C1 ( ) ; 5 m1 ( b ) ; 6 System.out.println ( b.a ) ; 7 } 8 static void m1 ( C1 c ) { 9 //c=new C1 ( ) ; 10 c.a=6 ; 11 } 12 }
void test ( Integer x ) { switch ( x ) { case ' a ' : } } void test ( Byte x ) { switch ( x ) { case ' a ' : } }
"< html > < head > < style > .test { font-size : 35px ; font-family : Arial ; } < /style > < /head > < body > < div class='test ' > TEST < /div > < /body > < /html > import org.eclipse.swt.SWT ; import org.eclipse.swt.browser . * ; import org.eclipse.swt.layout . * ; import org.eclipse.swt.widgets . * ; public class SWTTest { public void run ( ) { Display display = new Display ( ) ; Shell shell = new Shell ( display ) ; shell.setText ( `` SWT test '' ) ; createContents ( shell ) ; shell.open ( ) ; while ( ! shell.isDisposed ( ) ) { if ( ! display.readAndDispatch ( ) ) { display.sleep ( ) ; } } display.dispose ( ) ; } private void createContents ( Shell shell ) { shell.setLayout ( new FillLayout ( ) ) ; Browser browser = new Browser ( shell , SWT.NONE ) ; browser.setText ( `` < html > \r\n '' + `` < head > < style > .test { font-size : 85px ; font-family : Arial ; } < /style > < /head > \r\n '' + `` < body > \r\n '' + `` < div class=\ '' test\ '' > TEST < /div > \r\n '' + `` < /body > \r\n '' + `` < /html > '' ) ; } public static void main ( String [ ] args ) { new SWTTest ( ) .run ( ) ; } }"
"< Button android : id= '' @ +id/f1 '' android : layout_width= '' 50dp '' android : layout_height= '' 50dp '' android : layout_marginRight= '' 10dp '' android : background= '' @ drawable/button1 '' android : visibility= '' visible '' / > < ImageView android : id= '' @ +id/f2lock '' android : layout_width= '' 50dp '' android : layout_height= '' 50dp '' android : layout_marginLeft= '' 10dp '' android : layout_marginRight= '' 10dp '' android : src= '' @ drawable/levellocked '' android : visibility= '' visible '' / > < Button android : id= '' @ +id/f2 '' android : layout_width= '' 50dp '' android : layout_height= '' 50dp '' android : layout_marginLeft= '' 10dp '' android : layout_marginRight= '' 10dp '' android : background= '' @ drawable/button2 '' android : visibility= '' gone '' / > public class menu extends Activity { Button f1 , f2 ; ImageView f2lock ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; this.requestWindowFeature ( Window.FEATURE_NO_TITLE ) ; getWindow ( ) .setFlags ( WindowManager.LayoutParams.FLAG_FULLSCREEN , WindowManager.LayoutParams.FLAG_FULLSCREEN ) ; setContentView ( R.layout.famouslevel ) ; f1 = ( Button ) findViewById ( R.id.f1 ) ; f1.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { // TODO Auto-generated method stub Intent level1 = new Intent ( ) ; level1.setClassName ( `` com.example.game '' , `` com.example.game.levelone '' ) ; startActivityForResult ( level1 , 0 ) ; } } ) ; } public void onActivityResult ( int requestCode , int resultCode , Intent level1 ) { super.onActivityResult ( requestCode , resultCode , level1 ) ; f2= ( Button ) findViewById ( R.id.f2 ) ; f2lock= ( ImageView ) findViewById ( R.id.f2lock ) ; switch ( resultCode ) { case 2 : f2.setVisibility ( View.VISIBLE ) ; f2lock.setVisibility ( View.GONE ) ; } f2.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { // TODO Auto-generated method stub Intent level2 = new Intent ( ) ; level2.setClassName ( `` com.example.game '' , `` com.example.game.leveltwo '' ) ; startActivityForResult ( level2 , 0 ) ; } } ) ; } @ Overridepublic boolean onCreateOptionsMenu ( Menu menu ) { // Inflate the menu ; this adds items to the action bar if it is present . getMenuInflater ( ) .inflate ( R.menu.splashscreen , menu ) ; return true ; } @ Overridepublic boolean onOptionsItemSelected ( MenuItem item ) { // Handle action bar item clicks here . The action bar will // automatically handle clicks on the Home/Up button , so long // as you specify a parent activity in AndroidManifest.xml . int id = item.getItemId ( ) ; if ( id == R.id.action_settings ) { return true ; } return super.onOptionsItemSelected ( item ) ; } public void onClick ( View v ) { setResult ( 2 ) ; finish ( ) ; } } ) ; public void onActivityResult ( int requestCode , int resultCode , Intent level1 ) { super.onActivityResult ( requestCode , resultCode , level1 ) ; f2= ( Button ) findViewById ( R.id.f2 ) ; f2lock= ( ImageView ) findViewById ( R.id.f2lock ) ; switch ( resultCode ) { case 2 : f2.setVisibility ( View.VISIBLE ) ; f2lock.setVisibility ( View.GONE ) ; }"
"using ( some web service/disposable object ) { list1 = service.get1 ( ) ; list2 = service.get2 ( ) ; for ( item2 in list2 ) { list3 = service.get3 ( depending on item2 ) ; for ( item3 in list3 ) { list4 = service.get4 ( depending on item3 and list1 ) ; for ( item4 in list4 ) { ... } } } } for ( item2 in list2 ) { compute ( ) ; list3 = service.get3 ( depending on item2 ) ; for ( item3 in list3 ) { compute ( item2 , eventually item1 ) list4 = service.get4 ( depending on item3 and list1 ) ; for ( item4 in list4 ) { ... } } }"
"public static void main ( String [ ] args ) { // Find Prime Numbers from 0 to 100 int i ; for ( i=2 ; i < = 100 ; i++ ) { int j = 2 ; boolean iPrime = true ; //The following line gives incorrect results , but should execute faster // while ( ( iPrime = true ) & & ( j < ( i / 2 + 1 ) ) ) { //The following line gives correct results but performs un-necessary operations //by continuing to calculate after the number is found to be `` not prime '' while ( j < ( i / 2 + 1 ) ) { j++ ; if ( ( i % j ) == 0 ) { iPrime = false ; //System.out.println ( j + `` is a factor of `` + i ) ; } } if ( iPrime ) { System.out.println ( i + `` is a prime number ! `` ) ; } } }"
"When using comparators on insertion , to keep a * total ordering ( or as close as is required here ) across * rebalancings , we compare classes and identityHashCodes as * tie-breakers ."
"// all getters , setters , JPA annotations , all goodpublic class People { private String name ; private List < Car > cars ; } @ ManagedBean @ ViewScopedpublic class PeopleBean { @ EJB private Service sPeople ; private People selectedPeople ; private List < People > listPpl ; @ PostConstruct public void init ( ) { listPpl = sPeople.readAll ( ) ; // always good , same as DB values } public People getSelectedPeople ( ) { return selectedPeople ; } public People setSelectedPeople ( People p ) { // p is an old element selectedPeople = p ; // BREAKPOINT } // getter for the list too public void method ( ) { Logger.getAnoymousLogger ( ) .severe ( selectedPeople.getCars ( ) ) ; // the one the old people , not the ne contained in the actual list } } < p : selectOneMenu id= '' selectP '' value= '' # { peopleBean.selectedPeople } '' converted= '' # { genericSecuerdConverter } '' > < p : ajax event= '' change '' partialSubmit= '' true '' listener= '' # { peopleBean.method ( ) } '' / > < f : selectItems value= '' # { peopleBean.listPpl } '' var= '' people '' itemLabel= '' # { people.name } '' itemValue= '' # { people } '' / > < /p : selectOneMenu > public People setSelectedPeople ( People p ) { if ( p ! =null ) selectedPeople = sPeople.read ( p.getId ( ) ) ; }"
class Class1 { void Method1 ( ) { Worker worker = new Worker ( ) ; worker.start ( ) ; ... System.out.println ( worker.value ) ; // want to poll value at this instant ... } class Worker extends Thread { int value = 0 ; // Should this be declared as a volatile ? public void run ( ) { ... value = 1 ; // this is the only piece of code that updates value ... } } }
"Arrays.asList ( `` Fred '' , `` Jim '' , `` Sheila '' ) .stream ( ) .peek ( System.out : :println ) .allMatch ( s - > s.startsWith ( `` F '' ) ) ; FredJim FredJimSheila"
"public final class Basin { private Basin ( ) { } private static enum Direction { NW ( -1 , -1 ) , N ( 0 , -1 ) , NE ( -1 , 1 ) , E ( 0 , 1 ) , SE ( 1 , 1 ) , S ( 1 , 0 ) , SW ( 1 , -1 ) , W ( -1 , 0 ) ; private int rowDelta ; private int colDelta ; Direction ( int rowDelta , int colDelta ) { this.rowDelta = rowDelta ; this.colDelta = colDelta ; } public int getRowDelta ( ) { return rowDelta ; } public int getColDelta ( ) { return colDelta ; } } private static class BasinCount { private int count ; private boolean isBasin ; private int item ; BasinCount ( int count , boolean basin , int item ) { this.count = count ; this.isBasin = basin ; this.item = item ; } } ; /** * Returns the minimum basin . * If more than a single minimum basin exists then returns any arbitrary basin . * * @ param m : the input matrix * @ return : returns the basin item and its size . */ public static BasinData getMaxBasin ( int [ ] [ ] m ) { if ( m.length == 0 ) { throw new IllegalArgumentException ( `` The matrix should contain atleast one element . `` ) ; } final boolean [ ] [ ] visited = new boolean [ m.length ] [ m [ 0 ] .length ] ; final List < BasinCount > basinCountList = new ArrayList < > ( ) ; for ( int i = 0 ; i < m.length ; i++ ) { for ( int j = 0 ; j < m [ 0 ] .length ; j++ ) { if ( ! visited [ i ] [ j ] ) { basinCountList.add ( scan ( m , visited , i , j , m [ i ] [ j ] , new BasinCount ( 0 , true , m [ i ] [ j ] ) ) ) ; } } } return getMaxBasin ( basinCountList ) ; } private static BasinData getMaxBasin ( List < BasinCount > basinCountList ) { int maxCount = Integer.MIN_VALUE ; int item = 0 ; for ( BasinCount c : basinCountList ) { if ( c.isBasin ) { if ( c.count > maxCount ) { maxCount = c.count ; item = c.item ; } } } return new BasinData ( item , maxCount ) ; } private static BasinCount scan ( int [ ] [ ] m , boolean [ ] [ ] visited , int row , int col , int item , BasinCount baseCount ) { // array out of index if ( row < 0 || row == m.length || col < 0 || col == m [ 0 ] .length ) return baseCount ; // neighbor `` m [ row ] [ col ] '' is lesser than me . now i can not be the basin . if ( m [ row ] [ col ] < item ) { baseCount.isBasin = false ; return baseCount ; } // my neighbor `` m [ row ] [ col ] '' is greater than me , thus not to add it to the basin . if ( m [ row ] [ col ] > item ) return baseCount ; // my neighbor is equal to me , but i happen to have visited him already . thus simply return without adding count . // this is optimisitic recursion as described by rolf . if ( visited [ row ] [ col ] ) { return baseCount ; } visited [ row ] [ col ] = true ; baseCount.count++ ; for ( Direction dir : Direction.values ( ) ) { scan ( m , visited , row + dir.getRowDelta ( ) , col + dir.getColDelta ( ) , item , baseCount ) ; /** * once we know that current 'item ' is not the basin , we do `` want '' to explore other dimensions . * With the commented out code - consider : m3 * If the first 1 to be picked up is `` 1 @ row2 , col4 . '' This hits zero , marks basin false and returns . * Next time it starts with `` 1 @ row 0 , col 0 '' . This never encounters zero , because `` 1 @ row2 , col4 . '' is visited . * this gives a false answer . */// if ( ! baseCount.basin ) { // System.out.println ( baseCount.item + `` - : - : - '' ) ; // return baseCount ; // } } return baseCount ; }"
"public class PostDataGetRes extends AsyncTask < String , String , String > { protected void onPreExecute ( ) { super.onPreExecute ( ) ; } @ Override protected String doInBackground ( String ... strings ) { try { postRData ( ) ; } catch ( NullPointerException e ) { e.printStackTrace ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } return null ; } @ Override protected void onPostExecute ( String lenghtOfFile ) { // do stuff after posting data } } public void postRData ( ) { String result = `` '' ; InputStream isr = null ; final String email = editEmail.getText ( ) .toString ( ) ; final String pass = editPass.getText ( ) .toString ( ) ; // Create a new HttpClient and Post Header HttpClient httpclient = new DefaultHttpClient ( ) ; HttpPost httppost = new HttpPost ( `` http : //website.com/appservice.php '' ) ; try { // Add your data List < NameValuePair > nameValuePairs = new ArrayList < NameValuePair > ( 2 ) ; nameValuePairs.add ( new BasicNameValuePair ( `` id '' , email ) ) ; nameValuePairs.add ( new BasicNameValuePair ( `` stringdata '' , pass ) ) ; httppost.setEntity ( new UrlEncodedFormEntity ( nameValuePairs ) ) ; // Execute HTTP Post Request HttpResponse response = httpclient.execute ( httppost ) ; resultView.setText ( `` Inserted '' ) ; HttpEntity entity = response.getEntity ( ) ; isr = entity.getContent ( ) ; //convert response to string try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( isr , '' iso-8859-1 '' ) ,8 ) ; StringBuilder sb = new StringBuilder ( ) ; String line = null ; while ( ( line = reader.readLine ( ) ) ! = null ) { sb.append ( line + `` \n '' ) ; } isr.close ( ) ; result=sb.toString ( ) ; } catch ( Exception e ) { Log.e ( `` log_tag '' , `` Error converting result `` +e.toString ( ) ) ; } //parse json data try { String s = `` '' ; JSONArray jArray = new JSONArray ( result ) ; for ( int i=0 ; i < jArray.length ( ) ; i++ ) { JSONObject json = jArray.getJSONObject ( i ) ; s = s + `` Name : `` +json.getString ( `` first_name '' ) + '' \n\n '' ; // '' User ID : `` +json.getInt ( `` user_id '' ) + '' \n '' + // '' Name : `` +json.getString ( `` first_name '' ) + '' \n '' + // '' Email : `` +json.getString ( `` email '' ) + '' \n\n '' ; } resultView.setText ( s ) ; } catch ( Exception e ) { // TODO : handle exception Log.e ( `` log_tag '' , `` Error Parsing Data `` +e.toString ( ) ) ; } } catch ( ClientProtocolException e ) { // TODO Auto-generated catch block } catch ( IOException e ) { // TODO Auto-generated catch block } resultView.setText ( `` Done '' ) ; } if ( $ id ) { $ query = mysql_query ( `` SELECT first_name FROM users where email = ' $ id ' `` ) ; while ( $ row=mysql_fetch_assoc ( $ query ) ) { $ selectedData [ ] = $ row ; } print ( json_encode ( $ selectedData ) ) ; }"
"import java.util.function . * ; import java.util.ArrayList ; public class IO < A > { private Function < World , Tuple < World , A > > transform ; private class World { private ArrayList < String > stdin ; private ArrayList < String > stdout ; public World ( ) { this.stdin = new ArrayList < String > ( ) ; this.stdout = new ArrayList < String > ( ) ; } } private class Tuple < F , S > { public F fst ; public S snd ; public Tuple ( F fst , S snd ) { this.fst = fst ; this.snd = snd ; } } public IO ( Function < World , Tuple < World , A > > transform ) { this.transform = transform ; } public IO < A > pure ( A a ) { return new IO < A > ( r - > new Tuple < World , A > ( r , a ) ) ; } public < B > IO < B > bind ( IO < A > io , Function < A , IO < B > > f ) { return new IO < B > ( r - > { Tuple < World , A > result = io.transform.apply ( r ) ; IO < B > ioB = f.apply ( result.snd ) ; return ioB.transform.apply ( result.fst ) ; } ) ; } } IO.java:29 : error : incompatible types : IO < B > .World can not be converted to IO < A > .World Tuple < World , A > result = io.transform.apply ( r ) ; ^ where B , A are type-variables : B extends Object declared in method < B > bind ( IO < A > , Function < A , IO < B > > ) A extends Object declared in class IO"
int v = 0 ; for ( v ; v < 2 ; v++ ) { ... }
"@ Overridepublic List < RepositoryLink > getRepositoryLinks ( final DugaUser user ) { Query query = sessionFactory.getCurrentSession ( ) .createQuery ( `` from RepositoryLink link where : user in ( link.dugaUsers ) '' ) ; query.setParameter ( `` user '' , user ) ; return query.list ( ) ; } @ Entity @ Table ( name = `` repository_links '' ) public class RepositoryLink { @ Id @ GeneratedValue private Integer id ; @ OneToOne @ JoinTable ( name = `` repository_links_github_repositories '' , joinColumns = { @ JoinColumn ( name = `` github_repository_id '' , referencedColumnName = `` id '' ) } , inverseJoinColumns = { @ JoinColumn ( name = `` repository_link_id '' , referencedColumnName = `` id '' ) } ) private GithubRepository githubRepository ; @ OneToMany @ JoinTable ( name = `` repository_links_duga_users '' , joinColumns = { @ JoinColumn ( name = `` duga_user_id '' , referencedColumnName = `` id '' ) } , inverseJoinColumns = { @ JoinColumn ( name = `` repository_link_id '' , referencedColumnName = `` id '' ) } ) private List < DugaUser > dugaUsers = new ArrayList < > ( ) ; public Integer getId ( ) { return id ; } public GithubRepository getGithubRepository ( ) { return githubRepository ; } public void setGithubRepository ( final GithubRepository githubRepository ) { this.githubRepository = githubRepository ; } public List < DugaUser > getDugaUsers ( ) { return dugaUsers ; } public void setDugaUsers ( final List < DugaUser > dugaUsers ) { this.dugaUsers = dugaUsers ; } }"
"-- -HK : isp : Airtel : AirtelChennal www.enemalta.com : default : defaultEma user1 : chennal1 studiodefault : hkDefaultchennal country : DK : denmarkChennal NO : chennal2 Yaml yaml= new Yaml ( ) ; Map < String , Object > map= ( Map < String , Object > ) yaml.load ( yamlString ) ; { HK= { isp= { Airtel=AirtelChennal } , www.enemalta.com= { default=defaultEma , user1=chennal1 } , studiodefault=hkDefaultchennal , country= { DK=denmarkChennal , false=chennal2 } } } { HK= { isp= { Airtel=AirtelChennal } , www.enemalta.com= { default=defaultEma , user1=chennal1 } , studiodefault=hkDefaultchennal , country= { DK=denmarkChennal , NO=chennal2 } } }"
1 . String sNumber= '' ksadfl.jksadlf '' ; if ( sNumber.lastIndexOf ( ' . ' ) > 0 ) //do something ... ... if ( sNumber.lastIndexOf ( ' . ' ) > 1 ) //do something ... 2.int index = sNumber.lastIndexOf ( ' . ' ) ; if ( index > 0 ) //do something ... ... if ( index > 1 ) //do something ...
"List < Integer > listOne= new ArrayList < > ( ) ; listOne.add ( 10 ) ; listOne.add ( 2 ) ; listOne.add ( 3 ) ; //Second Array List < Integer > listTwo= new ArrayList < > ( ) ; listTwo.add ( 3 ) ; listTwo.add ( 7 ) ; listTwo.add ( 1 ) ; [ 10 , 2 , 3 ] compare to [ 3 , 7 , 1 ] if listOne.get ( 0 ) > listTwo.get ( 0 ) //add one point to listOneif listOne.get ( 0 ) < listTwo.get ( 0 ) //add one point to listTwo static List < Integer > compareList ( List < Integer > a , List < Integer > b ) { ArrayList < Integer > output = new ArrayList < > ( ) ; output.add ( 0 , 0 ) ; output.add ( 1 , 0 ) ; int out = output.get ( 0 ) ; int out2 = output.get ( 1 ) ; for ( int i = 0 ; i < a.size ( ) ; i++ ) { if ( a.get ( i ) > b.get ( i ) ) { out = out + 1 ; } if ( a.get ( i ) < b.get ( i ) ) { out2 = out2 + 1 ; } } output.add ( 0 , out ) ; output.add ( 1 , out2 ) ; return output ; }"
[ javac ] /Users/rajatg/fizz-buzz/src/test/FizzBuzzTest.java:4 : error : package org.hamcrest.core does not exist [ javac ] import static org.hamcrest.core.Is.is ; [ javac ] ^ [ javac ] /Users/rajatg/fizz-buzz/src/test/FizzBuzzTest.java:4 : error : static import only from classes and interfaces [ javac ] import static org.hamcrest.core.Is.is ; [ javac ] ^ [ javac ] 2 errorsBUILD FAILED
public class J { public Integer method ( Integer x ) { Integer val = x ; try { return val ; } finally { val = x + x ; } } public static void main ( String [ ] args ) { J littleFuzzy = new J ( ) ; System.out.println ( littleFuzzy.method ( new Integer ( 10 ) ) ) ; } } public class I { public StringBuilder method ( StringBuilder x ) { StringBuilder val = x ; try { return val ; } finally { val = x.append ( `` aaa '' ) ; } } public static void main ( String [ ] args ) { I littleFuzzy = new I ( ) ; System.out.println ( littleFuzzy.method ( new StringBuilder ( `` abc '' ) ) ) ; } }
"Rengine re = getRengine ( ) ; re.eval ( `` library ( quantmod ) '' ) ; re.eval ( `` library ( PerformanceAnalytics ) '' ) ; re.eval ( `` library ( tseries ) '' ) ; re.eval ( `` library ( FinTS ) '' ) ; re.eval ( `` library ( rugarch ) '' ) ; re.eval ( `` library ( robustbase ) '' ) ; re.assign ( `` arLagNum '' , new double [ ] { 1 } ) ; re.assign ( `` maLagNum '' , new double [ ] { 1 } ) ; re.assign ( `` archLagNum '' , new double [ ] { 1 } ) ; re.assign ( `` garchLagNum '' , new double [ ] { 1 } ) ; re.eval ( `` garchSpec < - ugarchspec ( variance.model = list ( model=\ '' iGARCH\ '' , garchOrder=c ( archLagNum , garchLagNum ) ) , mean.model = list ( armaOrder=c ( arLagNum , maLagNum ) ) , distribution.model=\ '' std\ '' ) '' ) ; re.assign ( `` transformedTsValueData '' , new double [ ] { getSomeDoubles ( ) } ; re.eval ( `` estimates < - ugarchfit ( spec = garchSpec , data = transformedTsValueData , solver.control = list ( trace = 1 ) ) '' ) ; re.eval ( `` estimates '' ) ;"
"@ Entity @ Table ( name = `` sga_cases '' ) public class Case { @ Id @ GeneratedValue ( strategy = GenerationType.AUTO ) private int id ; // Business key @ Column ( name = `` caseid '' , unique = true , nullable = false ) private String caseId ; ... @ OneToMany ( mappedBy = `` associatedCase '' , orphanRemoval = true , cascade = CascadeType.ALL ) private Set < CaseToSuggestion > associatedSuggestions = new HashSet < CaseToSuggestion > ( ) ; ... } @ Entity @ Table ( name = `` sga_suggestions '' ) public class Suggestion { @ Id @ GeneratedValue ( strategy = GenerationType.AUTO ) private int id ; @ Column ( name = `` suggestionid '' , unique = true , nullable = false ) private String suggestionId ; @ Column ( name = `` localizationkey '' , nullable = false ) private String localizationKey ; @ OneToMany ( mappedBy = `` associatedSuggestion '' , orphanRemoval = true , cascade = CascadeType.ALL ) private Set < CaseToSuggestion > caseMapping = new HashSet < CaseToSuggestion > ( ) ; ... } @ Entity @ Table ( name = `` sga_case2suggestion '' ) public class CaseToSuggestion { @ Id @ GeneratedValue ( strategy = GenerationType.AUTO ) private int id ; @ Column ( name = `` feedback '' ) private float feedback ; @ ManyToOne @ JoinColumn ( name = `` caseid '' ) private Case associatedCase ; @ ManyToOne ( cascade = CascadeType.ALL ) @ JoinColumn ( name = `` suggestionid '' ) private Suggestion associatedSuggestion ; ... } Case c = new Case ( ... ) Suggestion sugg = new Suggestion ( ... ) ; CaseToSuggestion case2sugg = new CaseToSuggestion ( c , sugg , 1.0f ) ; c.getAssociatedSuggestions ( ) .add ( case2sugg ) ; sugg.getAssociatedCases ( ) .add ( case2sugg ) ; CaseToSuggestion c2s = new CaseToSuggestion ( c , s , fb ) ; c.getAssociatedSuggestions ( ) .add ( c2s ) ; s.getAssociatedCases ( ) .add ( c2s ) ; + -- -- + -- -- -- -- -- + -- -- -- -- + -- -- -- -- -- -- -- +| id | feedback | caseid | suggestionid |+ -- -- + -- -- -- -- -- + -- -- -- -- + -- -- -- -- -- -- -- +| 3 | 1 | 3 | 1 || 4 | 1 | 4 | 2 || 5 | 1 | 5 | 2 || 6 | 0 | NULL | NULL || 7 | 1 | 6 | 2 || 8 | 0 | NULL | NULL || 9 | 1 | 7 | 2 || 10 | 0 | NULL | NULL |+ -- -- + -- -- -- -- -- + -- -- -- -- + -- -- -- -- -- -- -- +"
W/System.err ( 1672 ) : org.json.JSONException : Value PluginManager at 0 of type java.lang.String can not be converted to intW/System.err ( 1672 ) : at org.json.JSON.typeMismatch ( JSON.java:100 ) W/System.err ( 1672 ) : at org.json.JSONArray.getInt ( JSONArray.java:357 ) W/System.err ( 1672 ) : at org.apache.cordova.CordovaBridge.promptOnJsPrompt ( CordovaBridge.java:131 ) W/System.err ( 1672 ) : at org.apache.cordova.engine.SystemWebChromeClient.onJsPrompt ( SystemWebChromeClient.java:119 ) W/System.err ( 1672 ) : at android.webkit.CallbackProxy.handleMessage ( CallbackProxy.java:655 ) W/System.err ( 1672 ) : at android.os.Handler.dispatchMessage ( Handler.java:99 ) W/System.err ( 1672 ) : at android.os.Looper.loop ( Looper.java:137 ) W/System.err ( 1672 ) : at android.app.ActivityThread.main ( ActivityThread.java:4745 ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invoke ( Method.java:511 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:786 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:553 ) W/System.err ( 1672 ) : at dalvik.system.NativeStart.main ( Native Method ) W/System.err ( 1672 ) : org.json.JSONException : Value App at 0 of type java.lang.String can not be converted to intW/System.err ( 1672 ) : at org.json.JSON.typeMismatch ( JSON.java:100 ) W/System.err ( 1672 ) : at org.json.JSONArray.getInt ( JSONArray.java:357 ) W/System.err ( 1672 ) : at org.apache.cordova.CordovaBridge.promptOnJsPrompt ( CordovaBridge.java:131 ) W/System.err ( 1672 ) : at org.apache.cordova.engine.SystemWebChromeClient.onJsPrompt ( SystemWebChromeClient.java:119 ) W/System.err ( 1672 ) : at android.webkit.CallbackProxy.handleMessage ( CallbackProxy.java:655 ) W/System.err ( 1672 ) : at android.os.Handler.dispatchMessage ( Handler.java:99 ) W/System.err ( 1672 ) : at android.os.Looper.loop ( Looper.java:137 ) W/System.err ( 1672 ) : at android.app.ActivityThread.main ( ActivityThread.java:4745 ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invoke ( Method.java:511 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:786 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:553 ) W/System.err ( 1672 ) : at dalvik.system.NativeStart.main ( Native Method ) W/System.err ( 1672 ) : org.json.JSONException : Value File at 0 of type java.lang.String can not be converted to intW/System.err ( 1672 ) : at org.json.JSON.typeMismatch ( JSON.java:100 ) W/System.err ( 1672 ) : at org.json.JSONArray.getInt ( JSONArray.java:357 ) W/System.err ( 1672 ) : at org.apache.cordova.CordovaBridge.promptOnJsPrompt ( CordovaBridge.java:131 ) W/System.err ( 1672 ) : at org.apache.cordova.engine.SystemWebChromeClient.onJsPrompt ( SystemWebChromeClient.java:119 ) W/System.err ( 1672 ) : at android.webkit.CallbackProxy.handleMessage ( CallbackProxy.java:655 ) W/System.err ( 1672 ) : at android.os.Handler.dispatchMessage ( Handler.java:99 ) W/System.err ( 1672 ) : at android.os.Looper.loop ( Looper.java:137 ) W/System.err ( 1672 ) : at android.app.ActivityThread.main ( ActivityThread.java:4745 ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) W/System.err ( 1672 ) : at java.lang.reflect.Method.invoke ( Method.java:511 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:786 ) W/System.err ( 1672 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:553 ) W/System.err ( 1672 ) : at dalvik.system.NativeStart.main ( Native Method )
class BaseClass { @ Inject Logger logger ; } class SubClass extends BaseClass { }
"[ ] output : 0 , 11 [ 2 ] output : 1 , 33 [ a2 [ c ] ] 2 [ abc ] 3 [ cd ] output : 1 , 7 public static void main ( String [ ] args ) { String input = `` 3 [ a2 [ c ] ] 2 [ abc ] 3 [ cd ] ef '' ; int first = 0 ; int second = 0 ; int count = 0 ; boolean found = false ; for ( int index = 0 ; index < input.length ( ) ; index++ ) { if ( input.charAt ( index ) == ' [ ' ) { count++ ; if ( found == false ) { found = true ; first = index ; } } else if ( input.charAt ( index ) == ' ] ' ) { count -- ; if ( found & & count == 0 ) { second = index ; break ; } } } System.out.println ( first ) ; System.out.println ( second ) ; }"
"public class Demo { public static String doit ( int x , int y ) { return '' a '' ; } public static String doit ( int ... val ) { return `` b '' ; } public static void main ( String args [ ] ) { System.out.println ( doit ( 4,5 ) ) ; } }"
Uses constraint violation . Unable to resolve resource adapter [ adapter [ 288 ] ( R 288.2 ) ] because it is exposed to package 'javax.xml.bind.annotation ' from resources org.apache.felix.framework [ org.apache.felix.framework [ 0 ] ( R 0 ) ] and jakarta.xml.bind-api [ jakarta.xml.bind-api [ 79 ] ( R 79.0 ) ] via two dependency chains . Status : GracePeriodDeclarative ServicesBlueprint01/09/19 19:00Missing dependencies : ( & ( osgi.unit.name=example_db ) ( objectClass=javax.persistence.EntityManager ) )
"import java.util.EnumSet ; public class EnumTest { static enum Cloneables implements Cloneable { One , Two , Three ; } public < T extends Cloneable > T getOne ( Class enumType ) { EnumSet < ? extends T > set = EnumSet.allOf ( enumType ) ; return set.iterator ( ) .next ( ) ; } } type argument ? extends T is not within bounds of type-variable E Cloneable something = enumTest.getOne ( Cloneables.class ) ; @ Testpublic void testGetFirst ( ) { assertSame ( Cloneables.One , getOne ( Cloneables.class ) ) ; }"
A a = nulltry { a = new A ( ) ; } finally { a.foo ( ) ; // What happens at this point ? }
"if ( user.hasModule ( REPORTS ) ) { ... conditional code ... } /** Enables the cool report . */if ( user.hasModule ( REPORTS ) ) { ... conditional code ... } @ Doc ( text= '' Enables the cool report . `` ) if ( user.hasModule ( REPORTS ) ) { ... conditional code ... } if ( user.hasModule ( REPORTS , `` Enables the cool report . '' ) ) { ... conditional code ... } Module | Comments -- -- -- -- -- + -- -- -- -- -- -- -- -- -- -- REPORTS | Enables the cool report.REPORTS | Allows exporting the reports.IMPORT | Allows importing the data ."
Number of hits | Number of occurences | Total shots -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1 | 30 | 30 2 | 12 | 24 3 | 4 | 12 4 | 7 | 28 5 | 1 | 5
module com.example.a { exports com.example.a ; } public class Api { public static void foo ( ImplDetail args ) { } } package com.example.b.internal ; public class ImplDetail { }
"private void loadTeams ( ) { try { BufferedReader r = new BufferedReader ( new InputStreamReader ( assetManager.open ( `` matches.txt '' ) ) ) ; String name , bio , trainer ; for ( int i = 0 ; i < 4 ; i++ ) { name = r.readLine ( ) ; bio = r.readLine ( ) ; trainer = r.readLine ( ) ; System.out.println ( name+ '' , `` +bio+ '' , `` +trainer ) ; teams [ i ] = new Team ( name , bio , i , loadPlayers ( name ) , trainer ) ; } r.close ( ) ; } catch ( FileNotFoundException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } private Player [ ] loadPlayers ( String teamName ) { Player [ ] players = new Player [ 11 ] ; try { String path = `` team_Netherlands.txt '' ; //works String path2 = `` team_ '' +teamName+ '' .txt '' ; //does n't work ? System.out.println ( `` are `` +path+ '' and `` +path2 + '' the same ? `` +path.equals ( path2 ) ) ; BufferedReader r = new BufferedReader ( new InputStreamReader ( assetManager.open ( path2 ) ) ) ; //perform operations on the obtained info r.close ( ) ; } catch ( FileNotFoundException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } return players ; } 05-26 11:18:23.152 2960-2960/com.myname.testapp I/System.out : are team_Netherlands.txt and team_Netherlands.txt the same ? false05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : java.io.FileNotFoundException : team_Netherlands.txt05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.content.res.AssetManager.openAsset ( Native Method ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.content.res.AssetManager.open ( AssetManager.java:354 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.content.res.AssetManager.open ( AssetManager.java:328 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at com.myname.testapp.Poule_Activity.load_Players ( Poule_Activity.java:144 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at com.myname.testapp.Poule_Activity.load_Teams ( Poule_Activity.java:94 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at com.myname.testapp.Poule_Activity.onCreate ( Poule_Activity.java:53 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.Activity.performCreate ( Activity.java:5990 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1106 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:2332 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:2442 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.ActivityThread.access $ 800 ( ActivityThread.java:156 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1351 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.os.Handler.dispatchMessage ( Handler.java:102 ) 05-26 11:18:23.152 2960-2960/com.myname.testapp W/System.err : at android.os.Looper.loop ( Looper.java:211 ) 05-26 11:18:23.153 2960-2960/com.myname.testapp W/System.err : at android.app.ActivityThread.main ( ActivityThread.java:5373 ) 05-26 11:18:23.153 2960-2960/com.myname.testapp W/System.err : at java.lang.reflect.Method.invoke ( Native Method ) 05-26 11:18:23.153 2960-2960/com.myname.testapp W/System.err : at java.lang.reflect.Method.invoke ( Method.java:372 ) 05-26 11:18:23.153 2960-2960/com.myname.testapp W/System.err : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:1020 ) 05-26 11:18:23.153 2960-2960/com.myname.testapp W/System.err : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:815 )"
class Server { private WorkingThing worker ; public void init ( ) { runInNewThread ( { // this will take about a minute worker = new WorkingThing ( ) ; } ) ; } public Response handleRequest ( Request req ) { if ( worker == null ) throw new IllegalStateException ( `` Not inited yet '' ) ; return worker.work ( req ) ; } }
"public class Task { private Action < ActionResult , ? extends ActionSubject > action ; private ActionSubject subject = new ActionSubjectImpl ( ) ; private List < ActionResult > list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { Task task = new Task ( ) ; task.setAction ( new ActionImpl ( ) ) ; task.doAction ( ) ; } public void setAction ( Action < ActionResult , ? extends ActionSubject > action ) { this.action = action ; } public void doAction ( ) { list.add ( action.act ( subject ) ) ; } public static class ActionResult { } public interface Action < T , U > { public T act ( U argument ) ; } public interface ActionSubject { public String getName ( ) ; } public static class ActionImpl implements Action < ActionResult , ActionSubjectImpl > { @ Override public ActionResult act ( ActionSubjectImpl argument ) { // Code that requires ActionSubjectImpl specifically instead of the interface . // This classes implmentation of action should only support ActionSubjectImpl as an // argument . return new ActionResult ( ) ; } } public class ActionSubjectImpl implements ActionSubject { @ Override public String getName ( ) { return `` I am a subject '' ; } } } incompatible types : ActionSubject can not be converted to CAP # 1 where CAP # 1 is a fresh type-variable : CAP # 1 extends ActionSubject from ? extends ActionSubject"
"public < T extends Serializable , Method extends BotApiMethod < T > , Callback extends SentCallback < T > > void executeAsync ( Method method , Callback callback ) executeAsync ( editMessage , new SentCallback ( ) { executeAsync ( editMessage , new SentCallback < Message > ( )"
"public class ResolutionTest { private interface IMethods { String simpleMethod ( ) ; } private IMethods mock ; public static < T > T verify ( T m ) { return m ; } public void test ( ) { verify ( mock ) .simpleMethod ( ) ; } } import com.intellij.codeInsight.ContainerProvider ; import com.intellij.codeInsight.runner.JavaMainMethodProvider ; import com.intellij.core.CoreApplicationEnvironment ; import com.intellij.core.CoreJavaFileManager ; import com.intellij.core.JavaCoreApplicationEnvironment ; import com.intellij.core.JavaCoreProjectEnvironment ; import com.intellij.mock.MockProject ; import com.intellij.openapi.Disposable ; import com.intellij.openapi.components.ServiceManager ; import com.intellij.openapi.extensions.Extensions ; import com.intellij.openapi.extensions.ExtensionsArea ; import com.intellij.openapi.fileTypes.FileTypeExtensionPoint ; import com.intellij.openapi.vfs.VirtualFile ; import com.intellij.psi . * ; import com.intellij.psi.augment.PsiAugmentProvider ; import com.intellij.psi.augment.TypeAnnotationModifier ; import com.intellij.psi.compiled.ClassFileDecompilers ; import com.intellij.psi.impl.JavaClassSupersImpl ; import com.intellij.psi.impl.PsiElementFinderImpl ; import com.intellij.psi.impl.PsiNameHelperImpl ; import com.intellij.psi.impl.PsiTreeChangePreprocessor ; import com.intellij.psi.impl.file.impl.JavaFileManager ; import com.intellij.psi.meta.MetaDataContributor ; import com.intellij.psi.search.GlobalSearchScope ; import com.intellij.psi.stubs.BinaryFileStubBuilders ; import com.intellij.psi.util.JavaClassSupers ; import java.io.File ; public class Main { static class Analyzer extends PsiElementVisitor { static final Disposable disposable = ( ) - > { } ; private static class ProjectEnvironment extends JavaCoreProjectEnvironment { public ProjectEnvironment ( Disposable parentDisposable , CoreApplicationEnvironment applicationEnvironment ) { super ( parentDisposable , applicationEnvironment ) ; } @ Override protected void registerJavaPsiFacade ( ) { JavaFileManager javaFileManager = getProject ( ) .getComponent ( JavaFileManager.class ) ; CoreJavaFileManager coreJavaFileManager = ( CoreJavaFileManager ) javaFileManager ; ServiceManager.getService ( getProject ( ) , CoreJavaFileManager.class ) ; getProject ( ) .registerService ( CoreJavaFileManager.class , coreJavaFileManager ) ; getProject ( ) .registerService ( PsiNameHelper.class , PsiNameHelperImpl.getInstance ( ) ) ; PsiElementFinder finder = new PsiElementFinderImpl ( getProject ( ) , coreJavaFileManager ) ; ExtensionsArea area = Extensions.getArea ( getProject ( ) ) ; area.getExtensionPoint ( PsiElementFinder.EP_NAME ) .registerExtension ( finder ) ; super.registerJavaPsiFacade ( ) ; } @ Override protected void preregisterServices ( ) { super.preregisterServices ( ) ; ExtensionsArea area = Extensions.getArea ( getProject ( ) ) ; CoreApplicationEnvironment.registerExtensionPoint ( area , PsiTreeChangePreprocessor.EP_NAME , PsiTreeChangePreprocessor.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( area , PsiElementFinder.EP_NAME , PsiElementFinder.class ) ; } } private static class ApplicationEnvironment extends JavaCoreApplicationEnvironment { public ApplicationEnvironment ( Disposable parentDisposable ) { super ( parentDisposable ) ; myApplication.registerService ( JavaClassSupers.class , new JavaClassSupersImpl ( ) ) ; } } final ApplicationEnvironment applicationEnvironment ; final ProjectEnvironment projectEnvironment ; public Analyzer ( ) { ExtensionsArea rootArea = Extensions.getRootArea ( ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , BinaryFileStubBuilders.EP_NAME , FileTypeExtensionPoint.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , FileContextProvider.EP_NAME , FileContextProvider.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , MetaDataContributor.EP_NAME , MetaDataContributor.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , PsiAugmentProvider.EP_NAME , PsiAugmentProvider.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , JavaMainMethodProvider.EP_NAME , JavaMainMethodProvider.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , ContainerProvider.EP_NAME , ContainerProvider.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , ClassFileDecompilers.EP_NAME , ClassFileDecompilers.Decompiler.class ) ; CoreApplicationEnvironment.registerExtensionPoint ( rootArea , TypeAnnotationModifier.EP_NAME , TypeAnnotationModifier.class ) ; applicationEnvironment = new ApplicationEnvironment ( disposable ) ; projectEnvironment = new ProjectEnvironment ( disposable , applicationEnvironment ) ; } public void add ( final String [ ] args ) throws Exception { for ( String arg : args ) { final VirtualFile root = applicationEnvironment.getLocalFileSystem ( ) .findFileByIoFile ( new File ( arg ) ) ; projectEnvironment.addSourcesToClasspath ( root ) ; } } public void run ( ) { MockProject project = projectEnvironment.getProject ( ) ; PsiClass cls = project.getComponent ( JavaFileManager.class ) .findClass ( `` ResolutionTest '' , GlobalSearchScope.projectScope ( project ) ) ; if ( cls ! = null ) { PsiMethod [ ] methods = cls.findMethodsByName ( `` test '' , false ) ; if ( methods.length == 1 ) { PsiMethod method = methods [ 0 ] ; for ( PsiStatement s : method.getBody ( ) .getStatements ( ) ) { System.out.println ( s.getNode ( ) .getText ( ) ) ; process ( s ) ; } } } } private void process ( PsiMethodCallExpression expression ) { PsiExpression qualifierExpression = expression.getMethodExpression ( ) .getQualifierExpression ( ) ; if ( qualifierExpression instanceof PsiMethodCallExpression ) { process ( ( PsiMethodCallExpression ) qualifierExpression ) ; } else if ( qualifierExpression instanceof PsiReference ) { System.out.println ( `` Resolving reference `` + qualifierExpression.getText ( ) ) ; PsiElement targetElement = ( ( PsiReference ) qualifierExpression ) .resolve ( ) ; if ( targetElement == null ) { System.out.println ( `` Resolution failed '' ) ; } else if ( targetElement instanceof PsiClass ) { System.out.println ( `` Class `` + ( ( PsiClass ) targetElement ) .getName ( ) ) ; } else if ( targetElement instanceof PsiVariable ) { System.out.println ( `` Variable `` + ( ( PsiVariable ) targetElement ) .getTypeElement ( ) .getText ( ) ) ; } } System.out.println ( `` Resolving method `` + expression.getMethodExpression ( ) .getText ( ) ) ; PsiMethod method = expression.resolveMethod ( ) ; if ( method == null ) { System.out.println ( `` Resolution failed '' ) ; } else { PsiClass clazz = method.getContainingClass ( ) ; System.out.println ( clazz.getName ( ) + `` . '' + method.getName ( ) ) ; } } private void process ( PsiExpression e ) { if ( e instanceof PsiMethodCallExpression ) { process ( ( PsiMethodCallExpression ) e ) ; } } private void process ( PsiStatement s ) { if ( s instanceof PsiExpressionStatement ) { process ( ( ( PsiExpressionStatement ) s ) .getExpression ( ) ) ; } } } public static void main ( String [ ] args ) { try { Analyzer analyzer = new Analyzer ( ) ; analyzer.add ( args ) ; analyzer.run ( ) ; } catch ( Exception e ) { e.printStackTrace ( System.out ) ; } } } verify ( mock ) .simpleMethod ( ) ; Resolving method verifyResolutionTest.verifyResolving method verify ( mock ) .simpleMethodResolution failed"
"FileEditorManager manager = FileEditorManager.getInstance ( e.getProject ( ) ) ; VirtualFile files [ ] = manager.getSelectedFiles ( ) ; toAnalyse = files [ 0 ] ; [ ... ] String dir = toAnalyse.getParent ( ) .getPath ( ) ; Options.v ( ) .setPhaseOption ( `` jb '' , `` use-original-names '' ) ; Options.v ( ) .set_soot_classpath ( System.getProperty ( `` java.home '' ) + '' ; '' + dir ) ; c = Scene.v ( ) .loadClassAndSupport ( name ) ; /*no analyse c*/ Options.v ( ) .set_dump_body ( Arrays.asList ( `` jb '' ) ) ; Options.v ( ) .set_dump_cfg ( Arrays.asList ( `` jb '' ) ) ; Options.v ( ) .set_allow_phantom_refs ( true ) ; Options.v ( ) .set_whole_program ( true ) ; Chain < SootClass > classes = Scene.v ( ) .getClasses ( ) ; Stack < SootClass > stack = new Stack < > ( ) ; for ( SootClass s : classes ) stack.push ( s ) ; while ( ! stack.empty ( ) ) Scene.v ( ) .removeClass ( stack.pop ( ) ) ;"
public static final String REGEX_ADDRESS_ZIP = `` ^ [ 0-9\\ - . ] + $ '' ;
public class EntityA { private Long id ; //Getters and setters } public class EntityB { private Long id ; private EntityA entitya ; //Getters and setters } public class EntityC { private Long id ; private BigDecimal amount ; private EntityB entityb ; //Getters and setters } 1.select c from EntityC c where c.entityb in ( select b from EntityB b where b.entitya = : entitya ) private Set < EntityC > entityCCol ; @ OneToMany ( mappedBy= '' entityb '' ) public Set < EntityC > getEntityCCol ( ) { return entityCCol ; } select b from EntityB a join fetch a.entityCCol b
"/** * @ param map The map of words to search * @ param num The number of words you want printed * @ return list of words */public static List < String > findMaxOccurrence ( Map < String , Integer > map , int num ) { List < WordComparable > l = new ArrayList < > ( ) ; for ( Map.Entry < String , Integer > entry : map.entrySet ( ) ) l.add ( new WordComparable ( entry.getKey ( ) , entry.getValue ( ) ) ) ; List < WordComparable > l = map.entrySet ( ) .stream ( ) .map ( entry - > new WordComparable ( entry.getKey ( ) , entry.getValue ( ) ) ) .collect ( Collectors.toList ( ) ) ; List < WordComparable > l = map.entrySet ( ) .stream ( ) .map ( entry - > { return new WordComparable ( entry.getKey ( ) , entry.getValue ( ) ) ; } ) .collect ( Collectors.toList ( ) ) ; List < WordComparable > l = map.entrySet ( ) .stream ( ) .map ( new Function < Map.Entry < String , Integer > , WordComparable > ( ) { @ Override public WordComparable apply ( Map.Entry < String , Integer > entry ) { return new WordComparable ( entry.getKey ( ) , entry.getValue ( ) ) ; } } ) .collect ( Collectors.toList ( ) ) ;"
public abstract class AbstractMatrix < E > implements Collection < E > { @ Override public long size ( ) { return columns * rows ; } }
"protected abstract MessageSource tryAndLookup ( final Locale locale ) throws IOException ; /** * Set of locales known to have failed lookup . * * < p > When a locale is in this set , it will not attempt to be reloaded. < /p > */private final Set < Locale > lookupFailures = new CopyOnWriteArraySet < Locale > ( ) ; /** * Set of message sources successfully looked up * * < p > When a source is in there , it is there permanently for now. < /p > */private final ConcurrentMap < Locale , MessageSource > sources = new ConcurrentHashMap < Locale , MessageSource > ( ) ; @ Overrideprotected final List < MessageSource > getSources ( final Locale locale ) { MessageSource source = sources.get ( locale ) ; /* * If found , return it */ if ( source ! = null ) return Arrays.asList ( source ) ; /* * If it is a registered failure , return the empty list */ if ( lookupFailures.contains ( locale ) ) return Collections.emptyList ( ) ; /* * OK , try and look it up . On success , register it in the sources map . * On failure , record the failure an return the empty list . */ try { source = tryAndLookup ( locale ) ; sources.putIfAbsent ( locale , source ) ; // EDIT : fix for bug pinpointed by JBNizet // was : // return Arrays.asList ( source ) ; // now is : return Arrays.asList ( sources.get ( locale ) ) ; } catch ( IOException ignored ) { lookupFailures.add ( locale ) ; return Collections.emptyList ( ) ; } }"
function normalizeHash ( encondindRound2 ) { if ( encondindRound2 < 0 ) { encondindRound2 = ( encondindRound2 & 0x7fffffff ) + 0x80000000 ; } return encondindRound2 % 1E6 ; } public long normalizeHash ( long encondindRound2 ) { if ( encondindRound2 < 0 ) { encondindRound2 = ( ( ( int ) encondindRound2 ) & 0x7fffffff ) + 0x80000000 ; } return ( ( ( int ) encondindRound2 ) % 1_000_000 ) ; } public long normalizeHash ( long encondindRound2 ) { if ( encondindRound2 < 0 ) { encondindRound2 = ( encondindRound2 & 0x7fffffff ) + 0x80000000 ; } return ( encondindRound2 % 1_000_000 ) ; }
List < String > ls = new ArrayList < > ( ) ArrayList < α > - > List < String > α < = String α = String ArrayList < α > - > List < String > to α < = String new ArrayList < > - > List < String > to ArrayList < α > - > List < String > ArrayList < α > - > List < String >
"< record > < header > < identifier > oai : lcoa1.loc.gov : loc.pnp/cph.3a02293 < /identifier > < datestamp > 2009-05-27T07:22:37Z < /datestamp > < setSpec > cwp < /setSpec > < setSpec > lcphotos < /setSpec > < /header > < metadata > < oai_dc : dc xsi : schemaLocation= '' http : //www.openarchives.org/OAI/2.0/oai_dc/ http : //www.openarchives.org/OAI/2.0/oai_dc.xsd '' > < dc : title > Jubal A. Early < /dc : title > < dc : description > This record contains unverified , old data from caption card. < /dc : description > < dc : date > [ between 1860 and 1880 ] < /dc : date > < dc : type > image < /dc : type > < dc : type > still image < /dc : type > < dc : identifier > http : //hdl.loc.gov/loc.pnp/cph.3a02293 < /dc : identifier > < dc : language > eng < /dc : language > < dc : rights > No known restrictions on publication. < /dc : rights > < /oai_dc : dc > < /metadata > < /record > XPathFactory xpf = XPathFactory.instance ( ) ; XPathExpression < Element > xpath = xpf.compile ( `` //dc : title '' , Filters.element ( ) , null , namespaceList.toArray ( new Namespace [ namespaceList.size ( ) ] ) ) ; Element tag = xpath.evaluateFirst ( parent ) ; if ( tag ! = null ) { return Option.fromString ( tag.getText ( ) ) ; } return Option.none ( ) ;"
"Class < ? > app = Class.forName ( mainClass ) ; Method m = app.getMethod ( `` main '' , new Class [ ] { String [ ] .class } ) ; m.invoke ( null , new Object [ ] { new String [ ] { } } ) ;"
Console output : Card : 0 setCard : 6 setSleeping nowCard : 6 unsetCard : 0 unset @ Overridepublic void actionPerformed ( ActionEvent e ) { String buttonPressed = e.getActionCommand ( ) ; int pos = Integer.valueOf ( buttonPressed ) ; action = Control.model.ReceiveCardsTurned ( pos ) ; keypadArray [ pos ] .setIcon ( myIcons [ pos ] ) ; System.out.println ( `` Card : `` +pos+ '' set '' ) ; currentTime.setText ( `` '' + Control.model.time ) ; currentScore.setText ( `` '' + Control.model.score ) ; //contentPane.revalidate ( ) ; //contentPane.repaint ( ) ; if ( Control.model.twoCardsTurned == false ) { if ( action == `` unturn '' ) { System.out.println ( `` Sleeping now '' ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e1 ) { e1.printStackTrace ( ) ; } keypadArray [ pos ] .setIcon ( back ) ; keypadArray [ Control.model.lastCard ] .setIcon ( back ) ; System.out.println ( `` Card : `` +pos+ '' unset '' ) ; System.out.println ( `` Card : `` +Control.model.lastCard+ '' unset '' ) ; } } }
"public class MyTest { private static final String ENABLED = `` Y '' ; private static final String DISABLED = `` N '' ; private static boolean isEnabled ( String key ) { return key.equals ( `` A '' ) ; } private static String getString ( String key , String value ) { return key + value ; } public static void main ( String [ ] args ) throws Exception { String flag = getString ( `` F '' , isEnabled ( `` A '' ) ? ENABLED : DISABLED ) ; System.out.println ( flag ) ; String flag2 = getString ( `` F '' , isEnabled ( `` A '' ) ? ENABLED : DISABLED ) ; System.out.println ( flag2 ) ; } } public static void main ( java.lang.String [ ] ) throws java.lang.Exception ; descriptor : ( [ Ljava/lang/String ; ) V flags : ACC_PUBLIC , ACC_STATIC Code : stack=2 , locals=3 , args_size=1 0 : ldc # 8 // String F 2 : ldc # 2 // String A 4 : invokestatic # 9 // Method isEnabled : ( Ljava/lang/String ; ) Z 7 : ifeq 16 10 : getstatic # 10 // Field ENABLED : Ljava/lang/String ; 13 : goto 19 16 : getstatic # 11 // Field DISABLED : Ljava/lang/String ; 19 : invokestatic # 12 // Method getString : ( Ljava/lang/String ; Ljava/lang/String ; ) Ljava/lang/String ; 22 : astore_1 23 : getstatic # 13 // Field java/lang/System.out : Ljava/io/PrintStream ; 26 : aload_1 27 : invokevirtual # 14 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 30 : ldc # 8 // String F 32 : ldc # 2 // String A 34 : invokestatic # 9 // Method isEnabled : ( Ljava/lang/String ; ) Z 37 : ifeq 46 40 : getstatic # 10 // Field ENABLED : Ljava/lang/String ; 43 : goto 49 46 : getstatic # 11 // Field DISABLED : Ljava/lang/String ; 49 : invokestatic # 12 // Method getString : ( Ljava/lang/String ; Ljava/lang/String ; ) Ljava/lang/String ; 52 : astore_2 53 : getstatic # 13 // Field java/lang/System.out : Ljava/io/PrintStream ; 56 : aload_2 57 : invokevirtual # 14 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 60 : return"
"try { if ( srcFile.getType ( ) .hasChildren ( ) ) { destFile.createFolder ( ) ; // do server side copy if both source and dest are in S3 and using same credentials } else if ( srcFile instanceof S3FileObject ) { S3FileObject s3SrcFile = ( S3FileObject ) srcFile ; String srcBucketName = s3SrcFile.getBucket ( ) .getName ( ) ; String srcFileName = s3SrcFile.getS3Key ( ) ; String destBucketName = destFile.getBucket ( ) .getName ( ) ; String destFileName = destFile.getS3Key ( ) ; CopyObjectRequest copy = new CopyObjectRequest ( srcBucketName , srcFileName , destBucketName , destFileName ) ; if ( srcFile.getType ( ) == FileType.FILE & & getServerSideEncryption ( ) ) { ObjectMetadata meta = s3SrcFile.getObjectMetadata ( ) ; meta.setSSEAlgorithm ( AES_256_SERVER_SIDE_ENCRYPTION ) ; copy.setNewObjectMetadata ( meta ) ; } getService ( ) .copyObject ( copy ) ; } else if ( srcFile.getType ( ) .hasContent ( ) & & srcFile.getURL ( ) .getProtocol ( ) .equals ( `` file '' ) ) { // do direct upload from file to avoid overhead of making a copy of the file try { File localFile = new File ( srcFile.getURL ( ) .toURI ( ) ) ; destFile.upload ( localFile ) ; } catch ( URISyntaxException e ) { // could n't convert URL to URI , but should still be able to do the slower way super.copyFrom ( file , selector ) ; } } else { super.copyFrom ( file , selector ) ; } } catch ( IOException e ) { throw new FileSystemException ( `` vfs.provider/copy-file.error '' , new Object [ ] { srcFile , destFile } , e ) ; } catch ( AmazonClientException e ) { throw new FileSystemException ( `` vfs.provider/copy-file.error '' , new Object [ ] { srcFile , destFile } , e ) ; } finally { destFile.close ( ) ; } withSourceSSECustomerKey ( sseKey ) withDestinationSSECustomerKey ( newSseKey ) ;"
String myStringVariable = `` Hello '' ; String s = `` ABC '' + `` Hello '' + `` DEF '' ; String s = `` ABC '' ; s = s + `` Hello '' ; s = s + `` DEF '' ; String s = `` ABC '' + myStringVariable + `` DEF '' ;
public class Queue { private final Object [ ] buffer ; private final int capacity ; // Rest of the code }
"public class Task { int taskId ; List < Job > jobList ; } // in class Jobint getAgentId ( ) { // return the `` agent '' who is responsible for @ param job } // in class Partition ; ` Integer ` for `` agent '' idMap < Integer , Task > partition ( Task task ) { } Map < Integer , Task > partition ( Task task ) { int id = task.getTaskId ( ) ; Map < Integer , List < Job > > agentJobsMap = task.getJobList ( ) .stream ( ) .collect ( groupingBy ( Job : :getAgentId ) , // question here ) ; }"
"getItems ( int offset , int quantity ) : Item [ ] getItems ( 0,100 ) : Return items ( in the original list ) [ 0,100 ) getItems ( 100,100 ) : Return items ( in the original list ) [ 100,200 ) # # # # # before the next call the items 0-100 are removed # # # # getItems ( 200,100 ) : Return items ( in the original list ) [ 300,400 )"
public class Account { private Lock lock = new ReentrantLock ( ) ; private int value = 0 ; public void increment ( ) { lock.lock ( ) ; value++ ; lock.unlock ( ) ; } public void decrement ( ) { lock.lock ( ) ; value -- ; lock.unlock ( ) ; } public int getValue ( ) { return value ; } }
"public class CHMDeduplicator < T > { private final int prob ; private final Map < T , T > map ; public CHMDeduplicator ( double prob ) { this.prob = ( int ) ( Integer.MIN_VALUE + prob * ( 1L < < 32 ) ) ; this.map = new ConcurrentHashMap < > ( ) ; } public T dedup ( T t ) { if ( ThreadLocalRandom.current ( ) .nextInt ( ) > prob ) { return t ; } T exist = map.putIfAbsent ( t , t ) ; return ( exist == null ) ? t : exist ; } } if ( ThreadLocalRandom.current ( ) .nextInt ( ) > prob ) return t ;"
"Integer projectId = null ; if ( ! sprintTaskConnections.isEmpty ( ) ) projectId = sprintTaskConnections.get ( 0 ) .getProjectId ( ) ; // init name , state , startDate , endDate hereJiraSprint sprint = new JiraSprint ( sprintInfo.getInt ( `` id '' ) , name , state , projectId , startDate , endDate ) ; if ( projectId ! = null ) { ... } sprintTaskConnections.add ( new JiraSprintTaskConnection ( 1 , 1 , 1 ) ) ; sprintTaskConnections.clear ( ) ; if ( ! sprintTaskConnections.isEmpty ( ) ) projectId = sprintTaskConnections.get ( 0 ) .getProjectId ( ) ;"
"java.util.ArrayList < double [ ] > arrayList = new java.util.ArrayList < double [ ] > ( ) ; ... add some items ... double [ ] [ ] array = ( double [ ] [ ] ) arrayList.toArray ( new double [ 0 ] [ ] ) ; double [ ] [ ] array = ( double [ ] [ ] ) arrayList.toArray ( new double [ arrayList.size ( ) ] [ ] ) ; double [ ] [ ] array = new double [ arrayList.size ( ) ] ; arrayList.toArray ( array ) ; double [ ] [ ] array = arrayList.toArray ( ) ; double [ ] [ ] array = arrayList.toArrayOfNaturalType ( ) ; double [ ] [ ] array = MyToArray ( arrayList ) ; public static < T > T [ ] MyToArray ( java.util.ArrayList < T > arrayList ) public static < T > T [ ] MyToArray ( java.util.ArrayList < T > arrayList , Class type ) { T [ ] array = ( T [ ] ) java.lang.reflect.Array.newInstance ( type , arrayList.size ( ) ) ; arrayList.toArray ( array ) ; return array ; } double [ ] [ ] array = MyToArray ( arrayList , double [ ] .class ) ;"
"import java.util.ArrayList ; import java.util.Arrays ; import java.util.Collections ; import java.util.List ; import java.util.Random ; public class Test { public static void main ( String [ ] args ) { List < String > list = new ArrayList < > ( Arrays.asList ( `` A '' , `` B '' , `` C '' , `` D '' ) ) ; Collections.shuffle ( list , new Random ( 42 ) ) ; } }"
import java.util.ArrayList ; public class ArrayExceptions { public static void main ( String [ ] args ) { final int ITERATIONS = 10000 ; ArrayList < Integer > list = new ArrayList < > ( ) ; try { list.get ( -1 ) ; } catch ( ArrayIndexOutOfBoundsException e ) { e.printStackTrace ( ) ; } for ( int i = 0 ; i < ITERATIONS ; i++ ) { try { list.get ( -1 ) ; } catch ( ArrayIndexOutOfBoundsException e ) { if ( e.getMessage ( ) == null ) { System.out.println ( i ) ; break ; } } } for ( int i = 0 ; i < 10 ; i++ ) { try { list.get ( -1 ) ; } catch ( ArrayIndexOutOfBoundsException e ) { e.printStackTrace ( ) ; } } } } java.lang.ArrayIndexOutOfBoundsException : -1 at java.util.ArrayList.elementData ( ArrayList.java:418 ) at java.util.ArrayList.get ( ArrayList.java:431 ) at ArrayExceptions.main ( ArrayExceptions.java:8 ) 5494java.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException : -1 at java.util.ArrayList.elementData ( ArrayList.java:418 ) at java.util.ArrayList.get ( ArrayList.java:431 ) at ArrayExceptions.main ( ArrayExceptions.java:8 ) 5540java.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsExceptionjava.lang.ArrayIndexOutOfBoundsException
long timeStart = 0 ; long timeEndcalendarStart = 0 ; long timeDifference = 0 ; long calendarEnd = 0 ; long calendarDifference = 0 ; for ( int index = 0 ; index < 30000 ; index++ ) { timeStart = System.currentTimeMillis ( ) ; Time testTime = new Time ( ) ; testTime.setToNow ( ) ; long mills = testTime.toMillis ( false ) ; float seconds = testTime.second ; float minutes = testTime.minute ; float hours = testTime.hour ; timeEndcalendarStart = System.currentTimeMillis ( ) ; Calendar testCalendar = Calendar.getInstance ( ) ; long cmills = testCalendar.getTimeInMillis ( ) ; float cseconds = testCalendar.get ( Calendar.SECOND ) ; float cminutes = testCalendar.get ( Calendar.MINUTE ) ; float chours = testCalendar.get ( Calendar.HOUR ) ; calendarEnd = System.currentTimeMillis ( ) ; timeDifference += timeEndcalendarStart - timeStart ; calendarDifference += calendarEnd - timeEndcalendarStart ; }
NumericAxis < MarketDataDetailsDecorator > axis = new NumericAxis < > ( ) ; axis.setPosition ( Chart.Position.BOTTOM ) ; axis.setMinimum ( 995 ) ; // only this lineaxis.setMaximum ( 1016 ) ; // and this line get added
"Map < String , Map < String , Long > > mapOne ; Map < String , Map < String , Long > > mapTwo ; { BMW = { SIZE=1 , SPEED=60 } , AUDI = { SIZE=5 , SPEED=21 } , SEAT= { SPEED=15 } } { Suzuki = { WHEELS_SIZE=2 , DOORS=3 } , AUDI = { WHEELS_SIZE=5 , DOORS=5 } , SEAT= { DOORS=4 } } { BMW = { SIZE=1 , SPEED=60 } , AUDI = { SIZE=5 , SPEED=21 , WHEELS_SIZE=5 , DOORS=5 } , SEAT= { SPEED=15 , DOORS=4 } , Suzuki = { WHEELS_SIZE=2 , DOORS=3 } , } mapTwo.forEach ( ( k , v ) - > mapOne.merge ( k , v , ... .. ) ) ;"
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < my.package.name.ComplexDiagram android : layout_width= '' match_parent '' android : layout_height= '' 65dp '' android : layout_centerVertical= '' true '' / > < /RelativeLayout > import android.content.Context ; import android.graphics.Canvas ; import android.graphics.Paint ; import android.graphics.RectF ; import android.util.AttributeSet ; import android.view.View ; public class ComplexDiagram extends View { private int measuredWidth , measuredHeight ; private Paint mGreyRectPaint , mBlackLinePaint , mRedRectPaint ; private RectF mGreyRect , mBlackLineF , mRedRectF ; public ComplexDiagram ( Context context ) { super ( context ) ; init ( context , null , 0 ) ; } public ComplexDiagram ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs , 0 ) ; } public ComplexDiagram ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs , defStyleAttr ) ; } private void init ( Context context , AttributeSet attributeSet , int defStyle ) { mGreyRectPaint = new Paint ( Paint.ANTI_ALIAS_FLAG ) ; mGreyRectPaint.setColor ( 0xFF3C3C3C ) ; mGreyRectPaint.setStyle ( Paint.Style.FILL ) ; mBlackLinePaint = new Paint ( Paint.ANTI_ALIAS_FLAG ) ; mBlackLinePaint.setColor ( 0xFF000000 ) ; mBlackLinePaint.setStyle ( Paint.Style.FILL ) ; mRedRectPaint = new Paint ( Paint.ANTI_ALIAS_FLAG ) ; mRedRectPaint.setColor ( 0xFFCC3333 ) ; mRedRectPaint.setStyle ( Paint.Style.FILL ) ; } @ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { super.onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; measuredHeight = getDefaultSize ( getSuggestedMinimumHeight ( ) , heightMeasureSpec ) ; measuredWidth = getDefaultSize ( getSuggestedMinimumWidth ( ) , widthMeasureSpec ) ; setMeasuredDimension ( measuredWidth , measuredHeight ) ; } @ Override protected void onDraw ( Canvas canvas ) { super.onDraw ( canvas ) ; if ( measuredHeight == 0 || measuredWidth == 0 ) return ; canvas.drawRect ( mGreyRect , mGreyRectPaint ) ; canvas.drawRect ( mBlackLineF , mBlackLinePaint ) ; canvas.drawRect ( mRedRectF , mRedRectPaint ) ; } }"
"HashMap < String , Long > iIDs = new HashMap < String , Long > ( ) ; HashMap < String , Integer > vals = new HashMap < String , Integer > ( ) ; long iID1 = addIndicator ( `` I1 '' , `` i1 '' , Color.RED ) ; long iID2 = addIndicator ( `` I2 '' , `` i2 '' , Color.BLUE ) ; long iID3 = addIndicator ( `` I3 '' , `` i3 '' , Color.GREEN ) ; long iID4 = addIndicator ( `` I4 '' , `` i4 '' , Color.MAGENTA ) ; iIDs.put ( `` iID1 '' , iID1 ) ; iIDs.put ( `` iID2 '' , iID2 ) ; iIDs.put ( `` iID3 '' , iID3 ) ; iIDs.put ( `` iID4 '' , iID4 ) ; int v1 = 80 ; int v2 = 30 ; int v3 = 25 ; int v4 = 40 ; vals.put ( `` v1 '' , v1 ) ; vals.put ( `` v2 '' , v2 ) ; vals.put ( `` v3 '' , v3 ) ; vals.put ( `` v4 '' , v4 ) ; int numDays = 500 ; int dateDistance = 14 ; Calendar c = Calendar.getInstance ( ) ; for ( int i=0 ; i < numDays ; i++ ) { c.add ( Calendar.DATE , dateDistance ) ; for ( int j=1 ; j < 5 ; j++ ) { int currVal = vals.get ( `` v '' +j ) ; int rand = new Random ( ) .nextInt ( 6 ) ; int newVal ; if ( rand < = 2 ) // 0 , 1 , 2 newVal = currVal + rand ; else // 3 , 4 , 5 newVal = currVal - rand ; pseudo : addPointForIndicator ( ) ; vals.put ( `` v '' +j , newVal ) ; } }"
Foo extends Bar { public Foo ( ) { m_Tags.add ( `` Jane '' ) ; m_Tags.add ( `` Bob '' ) ; m_Tags.add ( `` Jim '' ) ; } public String GetJane ( ) { return m_ParsedValue.get ( m_Tags.get ( 1 ) ) ; } public String GetBob ( ) { return m_ParsedValue.get ( m_Tags.get ( 2 ) ) ; } public String GetJim ( ) { return m_ParsedValue.get ( m_Tags.get ( 3 ) ) ; } }
"Calendar calendar = Calendar.getInstance ( Locale.GERMANY ) ; calendar.set ( 2017 , 11 , 11 ) ; calendar.set ( Calendar.DAY_OF_WEEK , Calendar.SUNDAY ) ; System.out.println ( calendar.getTime ( ) .toString ( ) ) ; Calendar calendar2 = Calendar.getInstance ( Locale.GERMANY ) ; calendar2.set ( 2017 , 11 , 11 ) ; calendar2.getTime ( ) ; calendar2.set ( Calendar.DAY_OF_WEEK , Calendar.SUNDAY ) ; System.out.println ( calendar2.getTime ( ) .toString ( ) ) ;"
List < ? extends Reader > weirdList ; weirdList.add ( new BufferedReader ( null ) ) ;
TimeZone.getTimeZone ( `` UTC+5:30 '' ) .hasSameRules ( TimeZone.getTimeZone ( `` GMT+5:30 '' )
"reduce ( operator.xor , my_things , 0 ) reduce ( lambda x , y : x^y , my_things , 0 ) myThings.reduce ( 0 , Integer : :xor ) myThings.reduce ( 0 , ( x , y ) - > x ^ y )"
// Shared reference declarationpublic MyClass val ; // Class declarationpublic class MyClass { public Object object ; public MyClass ( ) { object = new Object ( ) ; } } // Using in thread AMyClass loc = new MyClass ( ) ; val = loc ; // Using in thread Bif ( val ! = null ) { val.object.hashCode ( ) ; // IMO could throw NPE }
"FocusEvent.getOppositeComponent primaryStage.addEventFilter ( Event.ANY , e - > System.out.println ( `` event `` + e ) ) ;"
public class StaticDemo { static { b=5 ; System.out.println ( `` Static B : '' +b ) ; /*Compilation error : '' Can not reference a field before it is defined '' */ } static int b ; static { System.out.println ( `` B : '' +b ) ; } public static void main ( String [ ] args ) { } } public class StaticDemo { static { b=5 ; //System.out.println ( `` Static B : '' +b ) ; } static int b ; static { System.out.println ( `` B : '' +b ) ; } public static void main ( String [ ] args ) { } } B:5
"int secondRightmostZeroBit ( int n ) { return ( int ) Math.pow ( 2 , Integer.toBinaryString ( n ) .length ( ) -1-Integer.toBinaryString ( n ) .lastIndexOf ( ' 0 ' , Integer.toBinaryString ( n ) .lastIndexOf ( ' 0 ' ) -1 ) ) ; } int secondRightmostZeroBit ( int n ) { return ~ ( n| ( n+1 ) ) & ( ( n| ( n+1 ) ) +1 ) ; }"
"public class GraphicButton extends JButton { private static final long serialVersionUID = 1L ; //Fields private String text ; private Font font ; //Constructor public GraphicButton ( String text , Font font ) { super ( text ) ; this.text = text ; this.font = font ; //Setting preferred size here . this.setPreferredSize ( new Dimension ( this.getFontMetrics ( font ) .stringWidth ( text ) , this.getFontMetrics ( font ) .getAscent ( ) ) ) ; } @ Override public void paintComponent ( Graphics g ) { g.setFont ( this.font ) ; //Draw text g.drawString ( this.text , 0 , this.getHeight ( ) ) ; //Draw border g.drawRect ( 0 , 0 , this.getWidth ( ) , this.getHeight ( ) ) ; } }"
"import java.util.HashMap ; import java.util.Map ; import java.util.Objects ; public class Person { private String name ; private long birthTime ; @ Override public int hashCode ( ) { return Objects.hash ( name , birthTime ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( ! ( obj instanceof Person ) ) { return false ; } Person other = ( Person ) obj ; return Objects.equals ( name , other.name ) & & birthTime == other.birthTime ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } public long getBirthTime ( ) { return birthTime ; } public void setBirthTime ( long birthTime ) { this.birthTime = birthTime ; } public static Person person ( String name , long time ) { Person p = new Person ( ) ; p.setName ( name ) ; p.setBirthTime ( time ) ; return p ; } public static void main ( String [ ] args ) { Map < Person , Person > map = new HashMap < > ( ) ; Person p = person ( `` alice '' , 3 ) ; System.out.println ( `` 1. `` + map.containsKey ( p ) ) ; map.put ( p , p ) ; System.out.println ( `` 2. `` + map.containsKey ( p ) ) ; p.setName ( `` charlie '' ) ; System.out.println ( `` 3. `` + map.containsKey ( p ) ) ; Person p2 = person ( `` alice '' , 3 ) ; System.out.println ( `` 4. `` + map.containsKey ( p2 ) ) ; Person p3 = person ( `` charlie '' , 3 ) ; System.out.println ( `` 5. `` + map.containsKey ( p3 ) ) ; } }"
//convert strings to numbersfloat a = ( Float.valueOf ( args [ 0 ] ) ) .floatValue ( ) ; float b = ( Float.valueOf ( args [ 1 ] ) ) .floatValue ( ) ;
"offsetDuration = duration - ( offsets.containsKey ( freq ) ? offsets.get ( freq ) : 0l ) ; long offsetDuration = 0 ; long duration = 391144 ; TreeMap < Long , Long > offsets = { 0=4024974.0 , 1036800=8588.0 , 1190400=88216.0 , 1267200=49763.0 , 1497600=87476.0 , 1574400=7469.0 , 1728000=54553.0 , 1958400=60512.0 , 2265600=246942.0 , 300000=390779.0 , 422400=39945.0 , 652800=55204.0 , 729600=46829.0 , 883200=19191.0 , 960000=23888.0 } long freq = 300000 ; @ NonNullpublic static TreeMap < Long , Long > getOffsets ( Context context ) throws CpuStateException { File file = getOffsetsFile ( context ) ; TreeMap < Long , Long > map ; try { String s = Files.toString ( file , Charsets.UTF_8 ) .trim ( ) ; Gson gson = new GsonBuilder ( ) .create ( ) ; Type type = new TypeToken < TreeMap < Long , Long > > ( ) { } .getType ( ) ; map = gson.fromJson ( s , type ) ; } catch ( IOException e ) { throw new CpuStateException ( `` Failed to read offsets ! `` ) ; } if ( map == null ) throw new CpuStateException ( `` Failed to read offsets ! `` ) ; return map ; } java.lang.ClassCastException : java.lang.String can not be cast to java.lang.Long at java.lang.Long.compareTo ( Long.java:32 ) at java.util.TreeMap.find ( TreeMap.java:277 ) at java.util.TreeMap.findByObject ( TreeMap.java:351 ) at java.util.TreeMap.containsKey ( TreeMap.java:182 ) at com.vibhinna.library.engine.CpuStates.getCpuData ( CpuStates.java:96 ) at com.vibhinna.library.engine.CpuStates.getBarData ( CpuStates.java:162 ) public static void offsetTimers ( TreeMap < Long , Long > offsets , Context context ) throws CpuStateException { Gson gson = new GsonBuilder ( ) .create ( ) ; String json = gson.toJson ( offsets ) ; File file = getOffsetsFile ( context ) ; try { OutputStreamWriter outputStream = new OutputStreamWriter ( new FileOutputStream ( file ) , `` UTF-8 '' ) ; outputStream.write ( json ) ; outputStream.flush ( ) ; outputStream.close ( ) ; } catch ( IOException e ) { throw new CpuStateException ( `` Failed to save offsets ! `` ) ; } } offset class : class java.lang.String value : 1036800offset class : class java.lang.String value : 1190400offset class : class java.lang.String value : 1267200offset class : class java.lang.String value : 1497600offset class : class java.lang.String value : 1574400offset class : class java.lang.String value : 1728000offset class : class java.lang.String value : 1958400offset class : class java.lang.String value : 2265600offset class : class java.lang.String value : 300000offset class : class java.lang.String value : 422400offset class : class java.lang.String value : 652800offset class : class java.lang.String value : 729600offset class : class java.lang.String value : 883200offset class : class java.lang.String value : 960000 { `` 0 '' :256093 , `` 300000 '' :105045 , `` 422400 '' :9677 , `` 652800 '' :10443 , `` 729600 '' :8868 , `` 883200 '' :3951 , `` 960000 '' :7323 , `` 1036800 '' :18668 , `` 1190400 '' :34938 , `` 1267200 '' :17151 , `` 1497600 '' :11018 , `` 1574400 '' :1173 , `` 1728000 '' :22881 , `` 1958400 '' :21076 , `` 2265600 '' :66501 }"
"StringJoiner stringJoiner = new StringJoiner ( `` , '' ) ; List < Person > persons = Arrays.asList ( new Person ( `` Juan '' , `` Dela Cruz '' ) , new Person ( `` Maria '' , `` Magdalena '' ) , new Person ( `` Mario '' , `` Santos '' ) ) ; persons.forEach ( person - > { stringJoiner.add ( person.getFirstName ( ) ) .add ( person.getLastName ( ) + System.lineSeparator ( ) ) ; } ) ; Juan , Dela CruzMaria , MagdalenaMario , Santos Juan , Dela Cruz , Maria , Magdalena , Mario , Santos"
image = GetImageResource ( `` BearPlugin/Images/HungryBear.png '' ) ; oldActiveResourceFile = GetActiveResourceFile ( ) ; // think of a stack of resource filesSetActiveResourceFile ( `` BearPlugin '' ) ; image = GetImageResource ( 1 ) ; // Perhaps other resources are retrieved and other functions called// Possibly introduce problems by calling functions that change `` Active Resource File '' SetActiveResourceFile ( oldActiveResourceFile ) ;
"class A : list= [ ] y=A ( ) x=A ( ) x.list.append ( 1 ) y.list.append ( 2 ) x.list.append ( 3 ) y.list.append ( 4 ) print x.list [ 1,2,3,4 ] print y.list [ 1,2,3,4 ]"
"{ `` test1 '' : { `` test2 '' : { `` test3 '' : { `` key '' : `` value '' } , `` somefields12 '' : `` some value2 '' } , `` somefields '' : `` some value '' } } if ( map.containsKey ( `` test1 '' ) ) { final HashMap < String , Object > test1 = ( HashMap < String , Object > ) map.get ( `` test1 '' ) ; if ( test1.containsKey ( `` test2 '' ) ) { final List < Object > test2 = ( List < Object > ) test1.get ( `` test2 '' ) ; if ( ! test2.isEmpty ( ) ) { final HashMap < String , Object > test3 = ( HashMap < String , Object > ) test2.get ( 0 ) ; if ( test3.containsKey ( `` key '' ) ) { final String value = String.valueOf ( test2.get ( `` key '' ) ) ; if ( ! StringUtils.isBlank ( value ) ) { //do some work based on value } } } } }"
public int sum13 ( int [ ] nums ) { int sum = 0 ; for ( int i = 0 ; i < nums.length ; i++ ) { // we start by adding all the non-13s to the sum if ( nums [ i ] ! = 13 ) sum += nums [ i ] ; } // now we go back and remove all the non-13s directly after a 13 for ( int j = 0 ; j < nums.length ; j++ ) { // the outermost loop checks if the numbers are a 13 if ( nums [ j ] == 13 & & j < nums.length - 1 ) { for ( int k = j + 1 ; k < nums.length ; k++ ) { // this loop checks that the number after the 13 is not a 13 if ( nums [ k ] ! = 13 ) { sum -= nums [ k ] ; break ; } } } } return sum ; }
"class ToListCollector < T > implements Collector < T , List < T > , List < T > > { @ Override public Supplier < List < T > > supplier ( ) { return ArrayList : :new ; } @ Override public BiConsumer < List < T > , T > accumulator ( ) { return List : :add ; } @ Override public BinaryOperator < List < T > > combiner ( ) { return ( l1 , l2 ) - > { l1.addAll ( l2 ) ; return l1 ; } ; } @ Override public Function < List < T > , List < T > > finisher ( ) { return Function.identity ( ) ; } @ Override public Set < Characteristics > characteristics ( ) { return Collections.unmodifiableSet ( EnumSet.of ( Characteristics.IDENTITY_FINISH , Characteristics.CONCURRENT ) ) ; } }"
"import android.content.Context ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; import android.graphics.Canvas ; import android.graphics.Color ; import android.graphics.Paint ; import android.graphics.Rect ; import android.support.v4.view.MotionEventCompat ; import android.util.Log ; import android.view.MotionEvent ; import android.view.SurfaceHolder ; import android.view.SurfaceView ; import java.util.ArrayList ; import java.util.List ; public class ParallaxView extends SurfaceView implements Runnable { List < Background > backgrounds ; private volatile boolean running ; private Thread gameThread = null ; // For drawing private Paint paint ; private Canvas canvas ; private SurfaceHolder ourHolder ; // Holds a reference to the Activity Context context ; // Control the fps long fps = 60 ; // Screen resolution int screenWidth ; int screenHeight ; private void update ( ) { // Update all the background positions for ( Background bg : backgrounds ) { bg.update ( fps ) ; } } ParallaxView ( Context context , int screenWidth , int screenHeight ) { super ( context ) ; this.context = context ; this.screenWidth = screenWidth ; this.screenHeight = screenHeight ; // Initialize our drawing objects ourHolder = getHolder ( ) ; paint = new Paint ( ) ; // Initialize our array list backgrounds = new ArrayList < > ( ) ; //load the background data into the Background objects and // place them in our GameObject arraylist backgrounds.add ( new Background ( this.context , screenWidth , screenHeight , `` bg '' , 0 , 120 , 50 ) ) ; backgrounds.add ( new Background ( this.context , screenWidth , screenHeight , `` grass '' , 70 , 110 , 200 ) ) ; // Add more backgrounds here } @ Override public void run ( ) { while ( running ) { long startFrameTime = System.currentTimeMillis ( ) ; update ( ) ; if ( j > 2000 ) { j = -50 ; k = 0 ; } if ( o > 2000 ) { o = -50 ; l = 0 ; } draw ( ) ; // Calculate the fps this frame long timeThisFrame = System.currentTimeMillis ( ) - startFrameTime ; if ( timeThisFrame > = 1 ) { fps = 1000 / timeThisFrame ; } } } int numberOfshots = 1 ; int [ ] i = new int [ 200 ] ; int j = 0 ; int k = 0 ; int l = 0 ; int m = 0 ; int o = 0 ; boolean down = true ; long lastTurn = System.currentTimeMillis ( ) ; int xbuggy = 0 ; int xbuggy2 = 0 ; boolean down2 = true ; long lastTurn2 = System.currentTimeMillis ( ) ; long lastTurn3 = System.currentTimeMillis ( ) ; boolean jump = false ; boolean shoot = false ; int ind = 0 ; private void draw ( ) { if ( ourHolder.getSurface ( ) .isValid ( ) ) { //First we lock the area of memory we will be drawing to canvas = ourHolder.lockCanvas ( ) ; if ( jump ) { xbuggy = xbuggy + 4 ; } if ( shoot ) { xbuggy2 = xbuggy2 + 4 ; } if ( System.currentTimeMillis ( ) - lastTurn3 > = 1000 ) { // Change direction here jump = false ; lastTurn3 = System.currentTimeMillis ( ) ; xbuggy = 0 ; } //draw a background color canvas.drawColor ( Color.argb ( 255 , 0 , 0 , 0 ) ) ; // Draw the background parallax drawBackground ( 0 ) ; // Draw the rest of the game paint.setTextSize ( 60 ) ; paint.setColor ( Color.argb ( 255 , 255 , 255 , 255 ) ) ; //canvas.drawText ( `` MOONPATROL3000 '' , 350 , screenHeight / 100 * 5 , paint ) ; int resID = context.getResources ( ) .getIdentifier ( `` vehicle '' , `` drawable '' , context.getPackageName ( ) ) ; int alienResID = context.getResources ( ) .getIdentifier ( `` object3_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; int alienResID2 = context.getResources ( ) .getIdentifier ( `` object2_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; int alienResID3 = context.getResources ( ) .getIdentifier ( `` object1_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; // Load the bitmap using the id Bitmap bitmap = BitmapFactory.decodeResource ( context.getResources ( ) , resID ) ; Bitmap alienbitmap = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID ) ; Bitmap alienbitmap2 = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID2 ) ; Bitmap alienbitmap3 = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID3 ) ; //paint.setTextSize ( 220 ) ; for ( int i1 = 0 ; i1 < numberOfshots ; i1++ ) { // if horizontal missile hits alien 0 if ( java.lang.Math.abs ( j - i [ i1 ] ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( k +150+ screenHeight / 100 * 45 - ( float ) ( screenHeight * 0.61 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { //y1 [ i2 ] = -random.nextInt ( 1000 ) ; // reset to new vertical position //score += 1 ; //onScoreListener.onScore ( score ) ; Log.d ( `` missile '' , `` missile hit ! `` ) ; j=-200 ; } // if vertical missile hits alien 0 if ( java.lang.Math.abs ( j - 185 ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( j + 150 + screenHeight / 100 * 45 - ( screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { //y1 [ i2 ] = -random.nextInt ( 1000 ) ; // reset to new vertical position //score += 1 ; //onScoreListener.onScore ( score ) ; Log.d ( `` missile '' , `` missile hit ! `` ) ; j=-200 ; } // if horizontal missile hits alien 1 , right now this wo n't happen if ( java.lang.Math.abs ( j - i [ i1 ] ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( k +150+ screenHeight / 100 * 45 - ( float ) ( screenHeight * 0.61 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { //y1 [ i2 ] = -random.nextInt ( 1000 ) ; // reset to new vertical position //score += 1 ; //onScoreListener.onScore ( score ) ; Log.d ( `` missile '' , `` missile hit ! `` ) ; j=-200 ; } // if vertical missile hits alien 1 if ( java.lang.Math.abs ( o + 10 - 185 ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( l + screenHeight / 100 * 25 - ( screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { //y1 [ i2 ] = -random.nextInt ( 1000 ) ; // reset to new vertical position //score += 1 ; //onScoreListener.onScore ( score ) ; Log.d ( `` missile '' , `` missile hit ! `` ) ; o=-200 ; } canvas.drawText ( `` o '' , i [ i1 ] , ( float ) ( screenHeight * 0.61 ) , paint ) ; canvas.drawText ( `` o '' , 185 , screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 , paint ) ; if ( i1 == numberOfshots - 1 & & i [ i1 ] > screenWidth ) { if ( numberOfshots > 0 ) numberOfshots -- ; if ( ind > 0 ) ind -- ; } } if ( System.currentTimeMillis ( ) - lastTurn > = 2000 ) { // Change direction here down = ! down ; lastTurn = System.currentTimeMillis ( ) ; } if ( System.currentTimeMillis ( ) - lastTurn2 > = 7000 ) { // Change direction here down2 = ! down2 ; lastTurn2 = System.currentTimeMillis ( ) ; } canvas.drawBitmap ( alienbitmap , j , k +150+ screenHeight / 100 * 45 , paint ) ; canvas.drawBitmap ( alienbitmap2 , o + 10 , l + screenHeight / 100 * 25 , paint ) ; //canvas.drawBitmap ( alienbitmap3 , j+20 , k+screenHeight / 100 * 5 , paint ) ; drawBackground ( 1 ) ; canvas.drawBitmap ( bitmap , 50 , ( float ) ( screenHeight * 0.5 ) - xbuggy , paint ) ; // Draw the foreground parallax for ( int n = 0 ; n < numberOfshots ; n++ ) i [ n ] = i [ n ] + 20 ; j = j + 10 ; o = o + 7 ; if ( ! down ) k=k+2 ; else k=k-2 ; if ( ! down2 ) l++ ; else l -- ; // Unlock and draw the scene ourHolder.unlockCanvasAndPost ( canvas ) ; } } // Clean up our thread if the game is stopped public void pause ( ) { running = false ; try { gameThread.join ( ) ; } catch ( InterruptedException e ) { // Error } } // Make a new thread and start it // Execution moves to our run method public void resume ( ) { running = true ; gameThread = new Thread ( this ) ; gameThread.start ( ) ; } private void drawBackground ( int position ) { // Make a copy of the relevant background Background bg = backgrounds.get ( position ) ; // define what portion of images to capture and // what coordinates of screen to draw them at // For the regular bitmap Rect fromRect1 = new Rect ( 0 , 0 , bg.width - bg.xClip , bg.height ) ; Rect toRect1 = new Rect ( bg.xClip , bg.startY , bg.width , bg.endY ) ; // For the reversed background Rect fromRect2 = new Rect ( bg.width - bg.xClip , 0 , bg.width , bg.height ) ; Rect toRect2 = new Rect ( 0 , bg.startY , bg.xClip , bg.endY ) ; //draw the two background bitmaps if ( ! bg.reversedFirst ) { canvas.drawBitmap ( bg.bitmap , fromRect1 , toRect1 , paint ) ; canvas.drawBitmap ( bg.bitmapReversed , fromRect2 , toRect2 , paint ) ; } else { canvas.drawBitmap ( bg.bitmap , fromRect2 , toRect2 , paint ) ; canvas.drawBitmap ( bg.bitmapReversed , fromRect1 , toRect1 , paint ) ; } } // Because we call this from onTouchEvent , this code will be executed for both // normal touch events and for when the system calls this using Accessibility @ Override public boolean performClick ( ) { super.performClick ( ) ; launchMissile ( ) ; return true ; } private void launchMissile ( ) { i [ ind ] = 350 ; ind++ ; xbuggy2 = 0 ; shoot = true ; } // event listener for when the user touches the screen @ Override public boolean onTouchEvent ( MotionEvent event ) { boolean gameOver = false ; //if ( paused ) { // paused = false ; // } int action = MotionEventCompat.getActionMasked ( event ) ; int coordX = ( int ) event.getX ( ) ; int coordY = ( int ) event.getY ( ) ; Log.d ( `` coordY '' , `` coordY `` + coordY ) ; if ( coordX < 220 & & xbuggy == 0 & & action == MotionEvent.ACTION_MOVE ) { jump = true ; shoot = false ; lastTurn3 = System.currentTimeMillis ( ) ; return true ; // do nothing } if ( coordX > 219 & & action == MotionEvent.ACTION_DOWN ) { numberOfshots++ ; performClick ( ) ; return true ; } return true ; } } import android.content.Context ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; public class Alien { public Alien ( ) { } public Alien ( Context context , String name ) { setAlienResID ( context.getResources ( ) .getIdentifier ( `` object3_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ) ; setAlienbitmap ( BitmapFactory.decodeResource ( context.getResources ( ) , this.getAlienResID ( ) ) ) ; } public int getAlienResID ( ) { return alienResID ; } public void setAlienResID ( int alienResID ) { this.alienResID = alienResID ; } public Bitmap getAlienbitmap ( ) { return alienbitmap ; } public void setAlienbitmap ( Bitmap alienbitmap ) { this.alienbitmap = alienbitmap ; } public int getWidth ( ) { return width ; } public void setWidth ( int width ) { this.width = width ; } public int getHeight ( ) { return height ; } public void setHeight ( int height ) { this.height = height ; } int alienResID ; Bitmap alienbitmap ; int width ; int height ; } public class AttackingAlien extends Alien { public AttackingAlien ( Context context , String name ) { super ( context , name ) ; } } import android.content.Context ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; import android.graphics.Canvas ; import android.graphics.Color ; import android.graphics.Paint ; import android.graphics.Rect ; import android.support.v4.view.MotionEventCompat ; import android.util.Log ; import android.view.MotionEvent ; import android.view.SurfaceHolder ; import android.view.SurfaceView ; import java.util.ArrayList ; import java.util.List ; public class ParallaxView extends SurfaceView implements Runnable { List < Background > backgrounds ; private volatile boolean running ; private Thread gameThread = null ; // For drawing private Paint paint ; private Canvas canvas ; private SurfaceHolder ourHolder ; // Holds a reference to the Activity Context context ; // Control the fps long fps = 60 ; // Screen resolution int screenWidth ; int screenHeight ; private void update ( ) { // Update all the background positions for ( Background bg : backgrounds ) { bg.update ( fps ) ; } } ParallaxView ( Context context , int screenWidth , int screenHeight ) { super ( context ) ; this.context = context ; this.screenWidth = screenWidth ; this.screenHeight = screenHeight ; // Initialize our drawing objects ourHolder = getHolder ( ) ; paint = new Paint ( ) ; // Initialize our array list backgrounds = new ArrayList < > ( ) ; //load the background data into the Background objects and // place them in our GameObject arraylist backgrounds.add ( new Background ( this.context , screenWidth , screenHeight , `` bg '' , 0 , 120 , 50 ) ) ; backgrounds.add ( new Background ( this.context , screenWidth , screenHeight , `` grass '' , 70 , 110 , 200 ) ) ; // Add more backgrounds here } @ Override public void run ( ) { while ( running ) { long startFrameTime = System.currentTimeMillis ( ) ; update ( ) ; if ( j > 2000 ) { j = -50 ; k = 0 ; } if ( o > 2000 ) { o = -50 ; l = 0 ; } draw ( ) ; // Calculate the fps this frame long timeThisFrame = System.currentTimeMillis ( ) - startFrameTime ; if ( timeThisFrame > = 1 ) { fps = 1000 / timeThisFrame ; } } } int numberOfshots = 1 ; int [ ] i = new int [ 200 ] ; int j = 0 ; int k = 0 ; int l = 0 ; int m = 0 ; int o = 0 ; boolean down = true ; long lastTurn = System.currentTimeMillis ( ) ; int xbuggy = 0 ; int xbuggy2 = 0 ; boolean down2 = true ; long lastTurn2 = System.currentTimeMillis ( ) ; long lastTurn3 = System.currentTimeMillis ( ) ; long lastTurn4 = System.currentTimeMillis ( ) ; boolean jump = false ; boolean shoot = false ; int ind = 0 ; int numberOfAlienshots = 1 ; int missileOffSetY = 0 ; private void draw ( ) { if ( ourHolder.getSurface ( ) .isValid ( ) ) { //First we lock the area of memory we will be drawing to canvas = ourHolder.lockCanvas ( ) ; if ( jump ) { xbuggy = xbuggy + 4 ; } if ( shoot ) { xbuggy2 = xbuggy2 + 4 ; } if ( System.currentTimeMillis ( ) - lastTurn4 > = 2000 ) { // Change direction here //jump = false ; lastTurn4 = System.currentTimeMillis ( ) ; missileOffSetY = 0 ; } if ( System.currentTimeMillis ( ) - lastTurn3 > = 1000 ) { // Change direction here jump = false ; lastTurn3 = System.currentTimeMillis ( ) ; xbuggy = 0 ; } //draw a background color canvas.drawColor ( Color.argb ( 255 , 0 , 0 , 0 ) ) ; // Draw the background parallax drawBackground ( 0 ) ; // Draw the rest of the game paint.setTextSize ( 60 ) ; paint.setColor ( Color.argb ( 255 , 255 , 255 , 255 ) ) ; //canvas.drawText ( `` MOONPATROL3000 '' , 350 , screenHeight / 100 * 5 , paint ) ; int resID = context.getResources ( ) .getIdentifier ( `` vehicle '' , `` drawable '' , context.getPackageName ( ) ) ; Alien alien1 = new AttackingAlien ( context , `` right_side_hdpi '' ) ; Alien alien2 = new AttackingAlien ( context , `` object2_hdpi '' ) ; Alien alien3 = new AttackingAlien ( context , `` object1_hdpi '' ) ; int alienResID = context.getResources ( ) .getIdentifier ( `` right_side_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; int alienResID2 = context.getResources ( ) .getIdentifier ( `` right_side_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; int alienResID3 = context.getResources ( ) .getIdentifier ( `` right_side_hdpi '' , `` drawable '' , context.getPackageName ( ) ) ; // Load the bitmap using the id Bitmap bitmap = BitmapFactory.decodeResource ( context.getResources ( ) , resID ) ; Bitmap alienbitmap = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID ) ; Bitmap alienbitmap2 = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID2 ) ; Bitmap alienbitmap3 = BitmapFactory.decodeResource ( context.getResources ( ) , alienResID3 ) ; //paint.setTextSize ( 220 ) ; //for ( int i1 = 0 ; i1 < numberOfAlienshots ; i1++ ) { if ( missileOffSetY < 300 ) { canvas.drawText ( `` | '' , o + 10 + alienbitmap2.getWidth ( ) / 2 , l + screenHeight / 100 * 25 + 75 + missileOffSetY , paint ) ; missileOffSetY = missileOffSetY + 10 ; } for ( int i1 = 0 ; i1 < numberOfshots ; i1++ ) { // if horizontal missile hits alien 0 if ( java.lang.Math.abs ( j - i [ i1 ] ) * 2 < ( alien1.getWidth ( ) + 60 ) & & java.lang.Math.abs ( k +150+ screenHeight / 100 * 45 - ( float ) ( screenHeight * 0.61 ) ) * 2 < ( alien1.getHeight ( ) + 60 ) ) { //y1 [ i2 ] = -random.nextInt ( 1000 ) ; // reset to new vertical position //score += 1 ; //onScoreListener.onScore ( score ) ; Log.d ( `` missile '' , `` missile hit ! `` ) ; j=-200 ; } // if vertical missile hits alien 0 if ( java.lang.Math.abs ( j - 185 ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( j + 150 + screenHeight / 100 * 45 - ( screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { j=-200 ; } // if horizontal missile hits alien 1 , right now this wo n't happen if ( java.lang.Math.abs ( j - i [ i1 ] ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( k +150+ screenHeight / 100 * 45 - ( float ) ( screenHeight * 0.61 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { j=-200 ; } // if vertical missile hits alien 1 if ( java.lang.Math.abs ( o + 10 - 185 ) * 2 < ( alienbitmap.getWidth ( ) + 60 ) & & java.lang.Math.abs ( l + screenHeight / 100 * 25 - ( screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 ) ) * 2 < ( alienbitmap.getHeight ( ) + 60 ) ) { o=-200 ; } canvas.drawText ( `` o '' , i [ i1 ] , ( float ) ( screenHeight * 0.61 ) , paint ) ; canvas.drawText ( `` o '' , 185 , screenHeight / 100 * 95 - i [ i1 ] - xbuggy2 , paint ) ; if ( i1 == numberOfshots - 1 & & i [ i1 ] > screenWidth ) { if ( numberOfshots > 0 ) numberOfshots -- ; if ( ind > 0 ) ind -- ; } } if ( System.currentTimeMillis ( ) - lastTurn > = 2000 ) { // Change direction here down = ! down ; lastTurn = System.currentTimeMillis ( ) ; } if ( System.currentTimeMillis ( ) - lastTurn2 > = 7000 ) { // Change direction here down2 = ! down2 ; lastTurn2 = System.currentTimeMillis ( ) ; } // canvas.drawBitmap ( alien1.getAlienbitmap ( ) , j , k +150+ screenHeight / 100 * 45 , paint ) ; canvas.drawBitmap ( alienbitmap2 , o + 10 , l + screenHeight / 100 * 25 , paint ) ; //canvas.drawBitmap ( alienbitmap3 , j+20 , k+screenHeight / 100 * 5 , paint ) ; drawBackground ( 1 ) ; canvas.drawBitmap ( bitmap , 50 , ( float ) ( screenHeight * 0.5 ) - xbuggy , paint ) ; // Draw the foreground parallax for ( int n = 0 ; n < numberOfshots ; n++ ) i [ n ] = i [ n ] + 20 ; j = j + 10 ; o = o + 7 ; if ( ! down ) k=k+2 ; else k=k-2 ; if ( ! down2 ) l++ ; else l -- ; // Unlock and draw the scene ourHolder.unlockCanvasAndPost ( canvas ) ; } } // Clean up our thread if the game is stopped public void pause ( ) { running = false ; try { gameThread.join ( ) ; } catch ( InterruptedException e ) { // Error } } // Make a new thread and start it // Execution moves to our run method public void resume ( ) { running = true ; gameThread = new Thread ( this ) ; gameThread.start ( ) ; } private void drawBackground ( int position ) { // Make a copy of the relevant background Background bg = backgrounds.get ( position ) ; // define what portion of images to capture and // what coordinates of screen to draw them at // For the regular bitmap Rect fromRect1 = new Rect ( 0 , 0 , bg.width - bg.xClip , bg.height ) ; Rect toRect1 = new Rect ( bg.xClip , bg.startY , bg.width , bg.endY ) ; // For the reversed background Rect fromRect2 = new Rect ( bg.width - bg.xClip , 0 , bg.width , bg.height ) ; Rect toRect2 = new Rect ( 0 , bg.startY , bg.xClip , bg.endY ) ; //draw the two background bitmaps if ( ! bg.reversedFirst ) { canvas.drawBitmap ( bg.bitmap , fromRect1 , toRect1 , paint ) ; canvas.drawBitmap ( bg.bitmapReversed , fromRect2 , toRect2 , paint ) ; } else { canvas.drawBitmap ( bg.bitmap , fromRect2 , toRect2 , paint ) ; canvas.drawBitmap ( bg.bitmapReversed , fromRect1 , toRect1 , paint ) ; } } // Because we call this from onTouchEvent , this code will be executed for both // normal touch events and for when the system calls this using Accessibility @ Override public boolean performClick ( ) { super.performClick ( ) ; launchMissile ( ) ; return true ; } private void launchMissile ( ) { i [ ind ] = 350 ; // what does it do ? ind++ ; xbuggy2 = 0 ; shoot = true ; } // event listener for when the user touches the screen @ Override public boolean onTouchEvent ( MotionEvent event ) { boolean gameOver = false ; //if ( paused ) { // paused = false ; // } int action = MotionEventCompat.getActionMasked ( event ) ; int coordX = ( int ) event.getX ( ) ; int coordY = ( int ) event.getY ( ) ; Log.d ( `` coordY '' , `` coordY `` + coordY ) ; if ( coordX < 220 & & xbuggy == 0 & & action == MotionEvent.ACTION_MOVE ) { jump = true ; shoot = false ; lastTurn3 = System.currentTimeMillis ( ) ; return true ; // do nothing } if ( coordX > 219 & & action == MotionEvent.ACTION_DOWN ) { numberOfshots++ ; performClick ( ) ; return true ; } return true ; } }"
"public class Employee { String name ; String department ; double hourlyRate ; Employee ( String name , String department , double hourlyRate ) { this.name = name ; this.department = department ; this.hourlyRate = hourlyRate ; } public void setDepartment ( String department ) { this.department = department ; } public void setHourlyRate ( double hourlyRate ) { this.hourlyRate = hourlyRate ; } public String getNameAndDepartment ( ) { return name + `` `` + department ; } double weeklyPay ( int numOfHourWorked ) { if ( numOfHourWorked < 40 ) { return ( numOfHourWorked * hourlyRate ) ; } else return ( 40 * hourlyRate ) ; } } class UnionEmployee extends Employee { double dues ; UnionEmployee ( String name , String department , double hourlyRate , double dues ) { super ( name , department , hourlyRate ) ; this.dues = dues ; } public void setDues ( double dues ) { this.dues = dues ; } double weeklyPay ( int numOfHourWorked ) { if ( numOfHourWorked < = 40 ) { return ( super.weeklyPay ( numOfHourWorked ) ) ; } elsereturn ( ( super.weeklyPay ( 40 ) + ( ( numOfHourWorked - 40 ) * hourlyRate * 1.5 ) ) - dues ) ; } } class CommissionEmployee extends Employee { double commisionRate ; double salesAmount ; CommissionEmployee ( String name , String department , double hourlyRate ) { super ( name , department , hourlyRate ) ; } public void setCommisionRate ( double commisionRate ) { this.commisionRate = commisionRate ; } public void setSalesAmount ( double salesAmount ) { this.salesAmount = salesAmount ; } double weeklyPay ( int numOfHourWorked ) { return ( super.weeklyPay ( numOfHourWorked ) + ( commisionRate * salesAmount ) ) ; } } class TestEmployee { UnionEmployee uEmp = new UnionEmployee ( null , null , 0 , 0 ) ; CommissionEmployee cEmp = new CommissionEmployee ( null , null , 0 ) ; Employee emp = new Employee ( null , null , 0 ) ; void display ( Employee emp , int numOfHourWorked ) { System.out.println ( `` Name and department : '' + emp.getNameAndDepartment ( ) ) ; System.out.println ( `` Weekly pay of employee : '' + emp.weeklyPay ( numOfHourWorked ) ) ; } void display ( UnionEmployee uEmp , CommissionEmployee cEmp , int numOfHourWorked ) { System.out.println ( `` Weekly Pay for UnionEmployee '' + uEmp.weeklyPay ( numOfHourWorked ) ) ; System.out.println ( `` Weekly Pay for UnionEmployee '' + cEmp.weeklyPay ( numOfHourWorked ) ) ; } } public class Misc { static void main ( String [ ] args ) { //body } } class TestEmployee { static void main ( String [ ] args ) { UnionEmployee uEmp = new UnionEmployee ( null , null , 0 , 0 ) ; CommissionEmployee cEmp = new CommissionEmployee ( null , null , 0 ) ; Employee emp = new Employee ( null , null , 0 ) ; void display ( Employee emp , int numOfHourWorked ) { System.out.println ( `` Name and department : '' + emp.getNameAndDepartment ( ) ) ; System.out.println ( `` Weekly pay of employee : '' + emp.weeklyPay ( numOfHourWorked ) ) ; } void display ( UnionEmployee uEmp , CommissionEmployee cEmp , int numOfHourWorked ) { System.out.println ( `` Weekly Pay for UnionEmployee '' + uEmp.weeklyPay ( numOfHourWorked ) ) ; System.out.println ( `` Weekly Pay for UnionEmployee '' + cEmp.weeklyPay ( numOfHourWorked ) ) ; } } } void is an invalid type for the variable displaySyntax error on token `` ( `` , ; expectedDuplicate local variable empSyntax error on token `` , '' , ; expectedSyntax error on token `` ) '' , ; expectedvoid is an invalid type for the variable displaySyntax error on token `` ( `` , ; expectedDuplicate local variable uEmpSyntax error on token `` , '' , ; expectedDuplicate local variable cEmpSyntax error on token `` , '' , ; expectedDuplicate local variable numOfHourWorkedSyntax error on token `` ) '' , ; expectedat TestEmployee.main ( TestEmployee.java:9 )"
while ( true ) { int i = 100 ; String str = Input Series of bits // Convert i and str to byte array }
for ( int i=0 ; i < 1000000 ; i++ ) { for ( RealVector d : data ) { while ( ! converged ) { double [ ] shortVec = new double [ 5 ] ; for ( int i=0 ; i < 5 ; i++ ) shortVec [ i ] =rng.nextGaussian ( ) ; double [ ] longerVec = new double [ 50 ] ; for ( int i=0 ; i < 50 ; i++ ) longerVec [ i ] =rng.nextGaussian ( ) ; /*Do some relatively fast math*/ } } }
import java.io . * ; public class TestExec { public static void main ( String [ ] args ) { try { Process p = Runtime.getRuntime ( ) .exec ( `` ghc test.hs 2 2 '' ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( p.getInputStream ( ) ) ) ; String line = null ; while ( ( line = in.readLine ( ) ) ! = null ) { System.out.println ( line ) ; } } catch ( IOException e ) { e.printStackTrace ( ) ; } } } test x y = x + y
"x| date | value || 2017-01-01 | 1 || 2017-01-05 | 4 || ... | ... | y| date | value || 2017-01-03 | 3 || 2017-01-04 | 2 || ... | ... | class Timeseries { List < Event > x = ... ; } class Event { LocalDate date ; Double value ; } List < TimeSeries > allSeries = ... Map < LocalDate , Double > byDate = allSeries.stream ( ) .flatMap ( s - > s.getEvents ( ) .stream ( ) ) .collect ( Collectors.groupingBy ( Event : :getDate , Collectors.summingDouble ( Event : :getValue ) ) ) ;"
"public class QSort { public static void quickSort ( int [ ] arr , int left , int right ) { int i = left ; int j = right ; int temp ; int pivot = arr [ ( left+right ) /2 ] ; System.out.println ( `` \n\nleft = `` + left + `` \tright = `` + right ) ; System.out.println ( `` Pivot is : `` + pivot + `` ( `` + ( left+right ) /2 + `` ) '' ) ; while ( i < = j ) { while ( arr [ i ] < pivot ) { System.out.println ( `` i is : `` + arr [ i ] + `` ( `` + i + `` ) '' ) ; i++ ; System.out.println ( `` i is : `` + arr [ i ] + `` ( `` + i + `` ) '' ) ; } while ( arr [ j ] > pivot ) { System.out.println ( `` j is : `` + arr [ j ] + `` ( `` + j + `` ) '' ) ; j -- ; System.out.println ( `` j is : `` + arr [ j ] + `` ( `` + j + `` ) '' ) ; } if ( i < = j ) { System.out.println ( `` i is : `` + arr [ i ] + `` ( `` + i + `` ) '' ) ; System.out.println ( `` j is : `` + arr [ j ] + `` ( `` + j + `` ) '' ) ; System.out.println ( `` Swapped `` + arr [ i ] + `` ( `` + i + `` ) '' + `` with `` + arr [ j ] + `` ( `` + j + `` ) '' ) ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i++ ; j -- ; System.out.println ( `` i is : ( `` + i + `` ) '' ) ; System.out.println ( `` j is : ( `` + j + `` ) '' ) ; System.out.println ( `` Pivot is : `` + pivot + `` ( `` + ( left+right ) /2 + `` ) '' ) ; } } if ( left < j ) { System.out.println ( `` j is : ( `` + j + `` ) '' ) ; quickSort ( arr , left , j ) ; } if ( i < right ) { System.out.println ( `` i is : ( `` + i + `` ) '' ) ; quickSort ( arr , i , right ) ; } } public static void display ( int [ ] arr ) { if ( arr.length > 0 ) { System.out.print ( arr [ 0 ] ) ; } for ( int i = 1 ; i < arr.length ; i++ ) { System.out.print ( `` , `` + arr [ i ] ) ; } } public static void main ( String [ ] args ) { int [ ] data = new int [ ] { 10,5,3,22,11,2 } ; System.out.println ( `` Before : `` ) ; display ( data ) ; quickSort ( data , 0 , data.length-1 ) ; System.out.println ( `` \nAfter : `` ) ; display ( data ) ; } }"
"@ Overrideprotected Void doInBackground ( Void ... voids ) { System.out.println ( `` array list '' ) ; ArrayList < File > files = new ArrayList < > ( ) ; System.out.println ( `` about to create . `` ) ; files.add ( new File ( wholePath ) ) ; System.out.println ( `` file created.. '' ) ; try { //Receiving IP addresses which are available to send our files ( Music ) ! ! a = getClientList ( ) ; //update the UI to display the received IP addresses ! ! publishProgress ( ) ; //busy waiting for user to select appropriate IP address to send files ! while ( destinationAddress.equals ( `` -1 '' ) ) { } //User has selected something , It 's time to send files there ! socket = new Socket ( destinationAddress,5004 ) ; System.out.println ( `` Connecting ... '' ) ; DataInputStream dis = new DataInputStream ( new BufferedInputStream ( socket.getInputStream ( ) ) ) ; DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( socket.getOutputStream ( ) ) ) ; System.out.println ( files.size ( ) ) ; //write the number of files to the server dos.writeInt ( files.size ( ) ) ; dos.flush ( ) ; //write file size for ( int i = 0 ; i < files.size ( ) ; i++ ) { int file_size = Integer.parseInt ( String.valueOf ( files.get ( i ) .length ( ) ) ) ; dos.writeLong ( file_size ) ; dos.flush ( ) ; } //write file names for ( int i = 0 ; i < files.size ( ) ; i++ ) { dos.writeUTF ( files.get ( i ) .getName ( ) ) ; dos.flush ( ) ; } //buffer for file writing , to declare inside or outside loop ? int n = 0 ; byte [ ] buf = new byte [ 4092 ] ; //outer loop , executes one for each file for ( int i =0 ; i < files.size ( ) ; i++ ) { System.out.println ( files.get ( i ) .getName ( ) ) ; //create new fileinputstream for each file FileInputStream fis = new FileInputStream ( files.get ( i ) ) ; //write file to dos while ( ( n =fis.read ( buf ) ) ! = -1 ) { dos.write ( buf,0 , n ) ; dos.flush ( ) ; } } dos.close ( ) ; } catch ( IOException e ) { // TODO Auto-generated catch block xceptionFlag = true ; e.printStackTrace ( ) ; } Log.i ( `` ===end of start ==== '' , `` == '' ) ; try { if ( ! socket.isClosed ( ) ) { socket.close ( ) ; } } catch ( Exception e ) { xceptionFlag = true ; e.printStackTrace ( ) ; } return null ; } @ Overrideprotected Void doInBackground ( Void ... voids ) { try { //this is done isntead of above line because it was givind error of address is already in use . ss = new ServerSocket ( ) ; ss.setReuseAddress ( true ) ; ss.bind ( new InetSocketAddress ( 5004 ) ) ; System.out.println ( `` waiting '' ) ; Socket socket = ss.accept ( ) ; System.out.println ( `` Accepted ! `` ) ; DataInputStream dis = new DataInputStream ( new BufferedInputStream ( socket.getInputStream ( ) ) ) ; DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( socket.getOutputStream ( ) ) ) ; //read the number of files from the client int number = dis.readInt ( ) ; ArrayList < File > files = new ArrayList < File > ( number ) ; System.out.println ( `` Number of Files to be received : `` +number ) ; ArrayList < Long > fileSize = new ArrayList < > ( number ) ; for ( int i = 0 ; i < number ; i++ ) { long size = dis.readLong ( ) ; System.out.println ( size ) ; fileSize.add ( size ) ; } //read file names , add files to arraylist for ( int i = 0 ; i < number ; i++ ) { File file = new File ( dis.readUTF ( ) ) ; files.add ( file ) ; } int n = 0 ; byte [ ] buf = new byte [ 4092 ] ; //outer loop , executes one for each file for ( int i = 0 ; i < files.size ( ) ; i++ ) { System.out.println ( `` Receiving file : `` + files.get ( i ) .getName ( ) ) ; //Create new Folder for our app , if it is not there and store received files there in our separate folder . File folder = new File ( Environment.getExternalStorageDirectory ( ) + File.separator + `` File '' ) ; boolean success = true ; if ( ! folder.exists ( ) ) { success = folder.mkdirs ( ) ; } if ( success ) { // Do something on success } else { // Do something else on failure } //create a new fileoutputstream for each new file FileOutputStream fos = new FileOutputStream ( `` mnt/sdcard/File/ '' +files.get ( i ) .getName ( ) ) ; //read file while ( fileSize.get ( i ) > 0 & & ( n = dis.read ( buf , 0 , ( int ) Math.min ( buf.length , fileSize.get ( i ) ) ) ) ! = -1 ) { fos.write ( buf,0 , n ) ; long x = fileSize.get ( i ) ; x = x-n ; fileSize.set ( i , x ) ; } fos.close ( ) ; } } catch ( IOException e ) { // TODO Auto-generated catch block xceptionFlag = true ; e.printStackTrace ( ) ; } //////////////////// Log.i ( `` == the end of read ==== '' , `` == '' ) ; try { if ( ! ss.isClosed ( ) ) { ss.close ( ) ; } } catch ( Exception e ) { xceptionFlag = true ; e.printStackTrace ( ) ; } return null ; }"
final class SomeClass { public ImportantData data = null ; public Thread t = null ; public SomeClass ( ImportantData d ) { t = new MyOperationThread ( ) ; // t.start ( ) ; // Footnote 1 data = d ; t.start ( ) ; // Footnote 2 } }
"dt |AverageTemperature |AverageTemperatureUncertainty|City |Country |Latitude|Longitude -- -- -- -- -- + -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -+ -- -- -- -- + -- -- -- -- + -- -- -- -- -1963-01-01|-5.417000000000002 |0.5 |Karachi|Pakistan|57.05N |10.33E 1963-02-01|-4.7650000000000015|0.328 |Karachi|Pakistan|57.05N |10.33E 1964-01-01|-5.417000000000002 |0.5 |Karachi|Pakistan|57.05N |10.33E 1964-02-01|-4.7650000000000015|0.328 |Karachi|Pakistan|57.05N |10.33E 1965-01-01|11.417000000000002 |0.5 |Karachi|Pakistan|57.05N |10.33E 1965-02-01|12.7650000000000015|0.328 |Karachi|Pakistan|57.05N |10.33E public class Temperature { private java.util.Date date ; private double averageTemperature ; private double averageTemperatureUncertainty ; private String city ; private String country ; private String latitude ; private String longitude ; } Map < String , Map < String , Map < Integer , Double > > > countriesMap = this.getTemperatures ( ) .stream ( ) .sorted ( Comparator.comparing ( Temperature : :getDate ) ) .collect ( Collectors.groupingBy ( Temperature : :getCountry , Collectors.groupingBy ( Temperature : :getCity , Collectors.groupingBy ( t - > { Calendar calendar = Calendar.getInstance ( ) ; calendar.setTime ( t.getDate ( ) ) ; return calendar.get ( Calendar.YEAR ) ; } , Collectors.averagingDouble ( Temperature : :getAverageTemperature ) ) ) ) ) ; Stream.of ( 10d , 20d , 10d ) //this is sample data that I that I get in ` Map < Integer , Double > ` of countriesMap .map ( new Function < Double , Optional < Double > > ( ) { Optional < Double > previousValue = Optional.empty ( ) ; @ Override public Optional < Double > apply ( Double current ) { Optional < Double > value = previousValue.map ( previous - > current - previous ) ; previousValue = Optional.of ( current ) ; return value ; } } ) .filter ( Optional : :isPresent ) .map ( Optional : :get ) .forEach ( System.out : :println ) ;"
"doLongPoll ( ) { while ( true ) } //IF channel field boolean unsubscribe == TRUE , if so BREAK ; //perform GET request ( and store channel HTTPClient used for this call ) //remove HTTPClient used for this call //IF channel field boolean unsubscribe == true , if so BREAK ; //IF connection problem sleep ( 1500 ) then CONTINUE //post received data to listeners } } unsubscribe ( ) { //set channel field boolean unsubscribe == FALSE //get channel HTTPClient and shutdown } THREAD 1 ( polling ) THREAD 2 -- -- -- -- -- -- -- -- do unsubscribe check ( pass ) unsubscribe called set unsubscribe = true check if httpClient saved ( none ) perform getRequest ( save HttpClient first )"
"org.hibernate.exception.JDBCConnectionException : unable to obtain isolated JDBC connectionCaused by : java.sql.SQLTransientConnectionException : HikariPool-1 - Connection is not available , request timed out after 351ms . 2020-03-13 13:52:25,392 [ main ] WARN com.zaxxer.hikari.HikariConfig -ScraperPool - idleTimeout is less than 10000ms , setting to default 600000ms.2020-03-13 13:52:25,400 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -ScraperPool - configuration:2020-03-13 13:52:25,406 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -allowPoolSuspension ... ... ... ... .false2020-03-13 13:52:25,407 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -autoCommit ... ... ... ... ... ... ... .true2020-03-13 13:52:25,407 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -catalog ... ... ... ... ... ... ... ... .none2020-03-13 13:52:25,408 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -connectionInitSql ... ... ... ... ... none2020-03-13 13:52:25,408 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -connectionTestQuery ... ... ... ... .none2020-03-13 13:52:25,409 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -connectionTimeout ... ... ... ... ... 100002020-03-13 13:52:25,409 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -dataSource ... ... ... ... ... ... ... .none2020-03-13 13:52:25,409 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -dataSourceClassName ... ... ... ... .none2020-03-13 13:52:25,410 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -dataSourceJNDI ... ... ... ... ... ... none2020-03-13 13:52:25,411 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -dataSourceProperties ... ... ... ... { password= < masked > , prepStmtCacheSqlLimit=2048 , cachePrepStmts=true , prepStmtCacheSize=250 , leakDetectionThreshold=15000 } 2020-03-13 13:52:25,412 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -driverClassName ... ... ... ... ... ..none2020-03-13 13:52:25,412 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -healthCheckProperties ... ... ... .. { } 2020-03-13 13:52:25,412 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -healthCheckRegistry ... ... ... ... .none2020-03-13 13:52:25,413 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -idleTimeout ... ... ... ... ... ... ... 6000002020-03-13 13:52:25,413 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -initializationFailTimeout ... ... .12020-03-13 13:52:25,413 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -isolateInternalQueries ... ... ... .false2020-03-13 13:52:25,414 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -jdbcUrl ... ... ... ... ... ... ... ... .jdbc : mysql : //********** ? verifyServerCertificate=false & useSSL=true & serverTimezone=UTC2020-03-13 13:52:25,414 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -leakDetectionThreshold ... ... ... .100002020-03-13 13:52:25,414 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -maxLifetime ... ... ... ... ... ... ... 18000002020-03-13 13:52:25,414 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -maximumPoolSize ... ... ... ... ... ..1002020-03-13 13:52:25,415 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -metricRegistry ... ... ... ... ... ... none2020-03-13 13:52:25,415 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -metricsTrackerFactory ... ... ... ..none2020-03-13 13:52:25,415 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -minimumIdle ... ... ... ... ... ... ... 42020-03-13 13:52:25,415 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -password ... ... ... ... ... ... ... ... < masked > 2020-03-13 13:52:25,416 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -poolName ... ... ... ... ... ... ... ... '' ScraperPool '' 2020-03-13 13:52:25,416 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -readOnly ... ... ... ... ... ... ... ... false2020-03-13 13:52:25,416 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -registerMbeans ... ... ... ... ... ... true2020-03-13 13:52:25,417 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -scheduledExecutor ... ... ... ... ... none2020-03-13 13:52:25,417 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -schema ... ... ... ... ... ... ... ... ..none2020-03-13 13:52:25,417 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -threadFactory ... ... ... ... ... ... .internal2020-03-13 13:52:25,417 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -transactionIsolation ... ... ... ... default2020-03-13 13:52:25,418 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -username ... ... ... ... ... ... ... ... '' xxxxxxxxxxx '' 2020-03-13 13:52:25,418 [ main ] DEBUG com.zaxxer.hikari.HikariConfig -validationTimeout ... ... ... ... ... 50002020-03-13 13:52:25,420 [ main ] INFO com.zaxxer.hikari.HikariDataSource -ScraperPool - Starting ... 2020-03-13 13:52:25,452 [ main ] DEBUG com.zaxxer.hikari.util.DriverDataSource -Loaded driver with class name com.mysql.cj.jdbc.Driver for jdbcUrl=jdbc : mysql : //********* ? verifyServerCertificate=false & useSSL=true & serverTimezone=UTC2020-03-13 13:52:27,099 [ main ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - Added connection com.mysql.cj.jdbc.ConnectionImpl @ e84a8e12020-03-13 13:52:27,107 [ main ] INFO com.zaxxer.hikari.HikariDataSource -ScraperPool - Start completed.2020-03-13 13:52:27,211 [ ScraperPool housekeeper ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - Before cleanup stats ( total=1 , active=0 , idle=1 , waiting=0 ) 2020-03-13 13:52:27,212 [ ScraperPool housekeeper ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - After cleanup stats ( total=1 , active=0 , idle=1 , waiting=0 ) 2020-03-13 13:52:27,280 [ ScraperPool connection adder ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - Added connection com.mysql.cj.jdbc.ConnectionImpl @ 58b0aed52020-03-13 13:52:27,346 [ ScraperPool connection adder ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - Added connection com.mysql.cj.jdbc.ConnectionImpl @ 285edfdd2020-03-13 13:52:27,414 [ ScraperPool connection adder ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - Added connection com.mysql.cj.jdbc.ConnectionImpl @ 79a25ba12020-03-13 13:52:27,415 [ ScraperPool connection adder ] DEBUG com.zaxxer.hikari.pool.HikariPool -ScraperPool - After adding stats ( total=4 , active=0 , idle=4 , waiting=0 ) DEBUG com.zaxxer.hikari.pool.HikariPool -HikariPool-1 - Timeout failure stats ( total=1 , active=1 , idle=0 , waiting=0 )"
"public void addGroup ( final String name ) { ModuleImplAdvertisement mAdv = null ; PeerGroup group = null ; temp = null ; defaultGroup.getDiscoveryService ( ) .getRemoteAdvertisements ( null , DiscoveryService.GROUP , `` Name '' , name , 1 , new DiscoveryListener ( ) { @ Override public void discoveryEvent ( DiscoveryEvent event ) { Enumeration < Advertisement > advs = event.getResponse ( ) .getAdvertisements ( ) ; while ( advs.hasMoreElements ( ) ) { System.out.println ( `` groupe found '' ) ; PeerGroupAdvertisement adv = ( PeerGroupAdvertisement ) advs.nextElement ( ) ; System.out.println ( `` group name : `` + adv.getName ( ) ) ; try { temp = defaultGroup.newGroup ( adv ) ; System.out.println ( `` group joined '' ) ; } catch ( Exception e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } } } ) ; try { Thread.sleep ( 10000 ) ; System.out.println ( `` waiting for group ... '' ) ; } catch ( InterruptedException e1 ) { // TODO Auto-generated catch block e1.printStackTrace ( ) ; } if ( temp == null ) { try { System.out.println ( `` creating new group .. '' ) ; mAdv = defaultGroup.getAllPurposePeerGroupImplAdvertisement ( ) ; /* Getting the advertisement of implemented modules */ temp = defaultGroup.newGroup ( generatePeerGroupID ( name ) , mAdv , name , name ) ; /* creating & publishing the group */ getDefaultGroup ( ) .getDiscoveryService ( ) .remotePublish ( temp.getPeerGroupAdvertisement ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } }"
"private static void sumWithParallelStream ( ) { BigDecimal [ ] list = new BigDecimal [ 32_768_000 ] ; BigDecimal total = BigDecimal.ZERO ; for ( int i = 0 ; i < 32_768_000 ; i++ ) { list [ i ] = new BigDecimal ( i ) ; } total = Arrays.asList ( list ) .parallelStream ( ) .reduce ( BigDecimal.ZERO , BigDecimal : :add ) ; System.out.println ( `` Total : `` + total ) ; } private static void sequenceSum ( ) { BigDecimal total = BigDecimal.ZERO ; for ( int i = 0 ; i < 32_768_000 ; i++ ) { total = total.add ( new BigDecimal ( i ) ) ; } System.out.println ( `` Total : `` + total ) ; } Total : 536870895616000sumWithParallelStream ( ) : 30502 msTotal : 536870895616000sequenceSum ( ) : 271 ms private static void sumWithParallelStream ( ) { BigDecimal [ ] list = new BigDecimal [ 32_768_000 ] ; BigDecimal total = BigDecimal.ZERO ; for ( int i = 0 ; i < 32_768_000 ; i++ ) { list [ i ] = new BigDecimal ( i ) ; total = total.add ( list [ i ] ) ; } System.out.println ( `` Total : `` + total ) ; } Total : 536870895616000sumWithParallelStream ( ) : 13487 msTotal : 536870895616000sequenceSum ( ) : 879 ms"
String one = `` one '' ; String two = new String ( `` one '' ) ;
"opdict = { `` + '' : lambda a , b : a+b , `` - '' : lambda a , b : a-b , `` * '' : lambda a , b : a*b , `` / '' : lambda a , b : a/b } sum = opdict [ `` + '' ] ( 5,4 ) Map < String , MathOperation > opMap = new HashMap < String , MathOperation > ( ) { { put ( `` + '' , ( a , b ) - > b+a ) ; put ( `` - '' , ( a , b ) - > b-a ) ; put ( `` * '' , ( a , b ) - > b*a ) ; put ( `` / '' , ( a , b ) - > b/a ) ; } } ; ... ... interface MathOperation { double operation ( double a , double b ) ; }"
START u0 { act=android.intent.action.MAIN cmp=com.android.phone/.GsmUmtsCallForwardOptions }
"30-Nov-2012 30-Nov-2012 United Kingdom , 31-Oct-2012 31-Oct-2012 UnitedArab Emirates , 29-Oct-2012 31-Oct-2012 India 30-Nov-2012 @ 30-Nov-2012 @ United Kingdom , 31-Oct-2012 @ 31-Oct-2012 @ UnitedArab Emirates , 29-Oct-2012 @ 31-Oct-2012 @ India inputString.replaceAll ( `` ( \\d { 4 } ) \\s '' , `` $ 1 @ '' ) ; inputString.replaceAll ( `` ( ? < =\\d { 4 } ) \\s '' , `` @ '' ) ;"
List < A > a ; List < B > b = a.stream ( ) .map ( i - > load ( i ) ) .filter ( need A here in addition to b )
List < String > list = new ArrayList < String > ( ) ; list.add ( `` a '' ) ; ... list.add ( `` z '' ) ; synchronized ( list ) { Iterator < String > i = list.iterator ( ) ; while ( i.hasNext ( ) ) { ... } } List < String > list = new ArrayList < String > ( ) ; list.add ( `` a '' ) ; ... list.add ( `` z '' ) ; List < String > synchronizedList = Collections.synchronizedList ( list ) ; synchronized ( synchronizedList ) { Iterator < String > i = synchronizedList.iterator ( ) ; while ( i.hasNext ( ) ) { ... } }
"String nameList = names.stream ( ) .collect ( joining ( `` , `` ) ) ; if ( nameList.contains ( `` , '' ) ) { StringBuilder builder = new StringBuilder ( nameList ) ; builder.replace ( nameList.lastIndexOf ( ' , ' ) , nameList.lastIndexOf ( ' , ' ) + 1 , `` and '' ) ; return builder.toString ( ) ; }"
public class StackTractTest { static class Nasty { public Integer toInt ( ) { if ( 1 == 1 ) throw new RuntimeException ( ) ; return 1 ; } } @ Test public void methodReference ( ) { Stream.of ( new Nasty ( ) ) .map ( Nasty : :toInt ) .findFirst ( ) ; } @ Test public void lambda ( ) { Stream.of ( new Nasty ( ) ) .map ( n - > n.toInt ( ) ) .findFirst ( ) ; } } java.lang.RuntimeException at com.example.StackTractTest $ Nasty.toInt ( StackTractTest.java:11 ) at com.example.StackTractTest $ $ Lambda $ 1/1681433494.apply ( Unknown Source ) at java.util.stream.ReferencePipeline $ 3 $ 1.accept ( ReferencePipeline.java:193 ) java.lang.RuntimeException at com.example.StackTractTest $ Nasty.toInt ( StackTractTest.java:11 ) at com.example.StackTractTest.lambda $ 0 ( StackTractTest.java:26 ) at com.example.StackTractTest $ $ Lambda $ 1/1681433494.apply ( Unknown Source ) at java.util.stream.ReferencePipeline $ 3 $ 1.accept ( ReferencePipeline.java:193 )
setStatusLine.addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { String message = `` I would like to say hello to you . `` ; if ( pressed ) { message = `` Thank you for using me '' ; } setStatusLine ( message ) ; pressed = ! pressed ; } } ) ;
"class CReportDTO { Long c_id ; Long c_field1 ; Long c_bid ; Long b_field1 ; // ... CReportDTO ( Long c_id , Long c_field1 , Long c_bid , Long b_field1 ) { // ... } // .. } public List < CReportDTO > getPendingScheduledDeployments ( ) { return dslContext.select ( C.ID , C.FIELD1 , C.B_ID , B.FIELD1 , B.A_ID A.FIELD1 , A.FIELD2 ) .from ( C ) .join ( B ) .on ( C.B_ID.eq ( B.ID ) ) .join ( A ) .on ( B.A_ID.eq ( A.ID ) ) .fetchInto ( CReportDTO.class ) ; } ; } class CReportDTO2 { C c ; B b ; A a ; CReportDTO2 ( C c , B b , A a ) { // ... } // .. }"
"public class UserWithPlaylists { @ Embedded public User user ; @ Relation ( parentColumn = `` userId '' , entityColumn = `` userCreatorId '' ) public List < Playlist > playlists ; } @ Transaction @ Query ( `` SELECT * FROM User '' ) public List < UserWithPlaylists > getUsersWithPlaylists ( ) ; @ Transaction @ Query ( `` SELECT * FROM User order by sort_key '' ) public List < UserWithPlaylists > getUsersWithPlaylists ( ) ;"
"VisibilityNotify event , serial 13 , synthetic NO , window 0x20000a , state VisibilityPartiallyObscuredUnmapNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , from_configure NOReparentNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , parent 0x600001 , ( 0,0 ) , override NOMapNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , override NOVisibilityNotify event , serial 13 , synthetic NO , window 0x20000a , state VisibilityPartiallyObscured ... UnmapNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , from_configure NOReparentNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , parent 0x282 , ( 11,11 ) , override NOMapNotify event , serial 13 , synthetic NO , window 0x20000a , event 0x20000a , window 0x20000a , override NOVisibilityNotify event , serial 13 , synthetic NO , window 0x20000a , state VisibilityUnobscured XReparentWindow ( display , childWindowId , newParentWindowId , 0 , 0 ) ; XFixesChangeSaveSet ( display , childWindowId , SetModeInsert , SaveSetRoot , SaveSertMap ) ;"
String output = `` input_goes_here '' .codePoints ( ) . ? ? ? ;
int x = 0if ( isA ( ) ) { x = 1 ; } else if ( isB ( ) ) { x = 2 ; } if ( x ! = 0 ) { doLater ( ( ) - > showErrorMessage ( x ) ) ; // compile error here } // no more reference to ' x ' here if ( x ! = 0 ) { final int final_x = x ; doLater ( ( ) - > showErrorMessage ( final_x ) ) ; }
public class overriding { public static void main ( String [ ] args ) { b b = new b ( ) ; a a = ( a ) b ; a.Info ( ) ; b.Info ( ) ; } } class a { void Info ( ) { System.out.println ( `` I 'm a '' ) ; } } class b extends a { void Info ( ) { System.out.println ( `` I 'm b '' ) ; } } namespace ConsoleApplication2 { class Program { static void Main ( string [ ] args ) { b b = new b ( ) ; a a = ( a ) b ; a.Info ( ) ; b.Info ( ) ; Console.ReadLine ( ) ; } } class a { public void Info ( ) { Console.WriteLine ( `` I 'm a '' ) ; } } class b : a { public void Info ( ) { Console.WriteLine ( `` I 'm b '' ) ; } } }
"Bitmap bitmap = BitmapFactory.decodeResource ( getResources ( ) , R.drawable.ic_tick ) ;"
"< LinearLayout android : id= '' @ +id/main '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' ... / > < Button android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : onClick= '' PaintDashedLines '' android : text= '' Press Me '' / > < /LinearLayout > static int tvCount = 0 ; public void PaintDashedLines ( View v ) { LinearLayout ll = ( LinearLayout ) findViewById ( R.id.main ) ; TextView tv = new TextView ( MainActivity.this ) ; tv.setGravity ( Gravity.CENTER ) ; tv.setTextSize ( 25 ) ; tv.setPadding ( 0 , 5 , 0 , 5 ) ; ll.addView ( tv ) ; tv.setText ( `` TextView `` + tvCount ) ; ImageView divider = new ImageView ( MainActivity.this ) ; LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams ( ll.getWidth ( ) , 2 ) ; lp.setMargins ( 0 , 5 , 0 , 5 ) ; divider.setLayoutParams ( lp ) ; divider.setBackground ( CreateDashedLined ( ) ) ; ll.addView ( divider ) ; tvCount++ ; } public static Drawable CreateDashedLined ( ) { ShapeDrawable sd = new ShapeDrawable ( new RectShape ( ) ) ; Paint fgPaintSel = sd.getPaint ( ) ; fgPaintSel.setColor ( Color.BLACK ) ; fgPaintSel.setStyle ( Paint.Style.STROKE ) ; fgPaintSel.setPathEffect ( new DashPathEffect ( new float [ ] { 5 , 10 } , 0 ) ) ; return sd ; }"
public int [ ] toPrimitiveInts ( Integer [ ] ints ) { int [ ] primitiveInts = new int [ ints.length ] ; for ( int i = 0 ; i < ints.length ; i++ ) { primitiveInts [ i ] = ints [ i ] == null ? 0 : ints [ i ] ; } return primitiveInts ; }
"public class MyClass < T > { public void method ( T ... t ) { System.out.println ( t.getClass ( ) .getName ( ) ) ; //for MyClass < String > , this gives me // [ Ljava.lang.String }"
public class Test < T > { public static void main ( String [ ] args ) { Test t1 = new Test ( ) ; Test < String > t2 = new Test < String > ( ) ; Test t3 = new Test < String > ( ) ; } }
"private static int [ ] stringToReversedIntArray ( String num ) { int [ ] a = new int [ num.length ( ) ] ; for ( int i = 0 ; i < num.length ( ) ; i++ ) { a [ i ] = Integer.parseInt ( num.substring ( i , i + 1 ) ) ; } a = reverse ( a ) ; return a ; } /* * Reverses an int array */private static int [ ] reverse ( int [ ] myArray ) { int [ ] reversed = new int [ myArray.length ] ; for ( int i = 0 ; i < myArray.length ; i++ ) { reversed [ i ] = myArray [ myArray.length - ( i + 1 ) ] ; } return reversed ; } Input : `` 1256346258 '' Output : { 8,5,2,6,4,3,6,5,2,1 }"
"package javaarray ; final public class Main { public void someMethod ( String [ ] str ) { System.out.println ( str [ 0 ] + '' \t '' +str [ 1 ] ) ; } public static void main ( String [ ] args ) { String [ ] str1 = new String [ ] { `` day '' , `` night '' } ; String [ ] str2 = { `` black '' , `` white '' } ; //Both of the above statements are valid . Main main=new Main ( ) ; main.someMethod ( str1 ) ; main.someMethod ( str2 ) ; //We can invoke the method someMethod by supplying both of the above arrays alternatively . main.someMethod ( new String [ ] { `` day '' , `` night '' } ) ; //This is also valid as obvious . main.someMethod ( { `` black '' , `` white '' } ) ; //This is however wrong . The compiler complains `` Illegal start of expression not a statement '' Why ? } } String [ ] str1 = new String [ ] { `` day '' , `` night '' } ; String [ ] str2 = { `` black '' , `` white '' } ; main.someMethod ( new String [ ] { `` day '' , `` night '' } ) ; main.someMethod ( { `` black '' , `` white '' } ) ;"
public Parser getParser ( String filename ) { String extension = filename.substring ( filename.lastIndexOf ( `` . `` ) ) ; switch ( extension ) { case `` py '' : return new PythonParser ( ) ; case `` java '' : return new JavaParser ( ) ; case `` c '' : return new CParser ( ) ; default : return new TextParser ( ) ; } }
public class Test { public static void main ( String [ ] args ) throws ParseException { Test t = new Test ( ) ; t.testMethod ( null ) ; } public void testMethod ( Object o ) { System.out.println ( `` Object '' ) ; } public void testMethod ( String s ) { System.out.println ( `` String '' ) ; } } public void testMethod ( StringBuilder sb ) { System.out.println ( `` String '' ) ; }
"prices = pricesService.getProductsByCategory ( category ) ; List < Double > discountedPrices = Lists.newArrayList ( Iterables.transform ( prices , new Function < Double , Double > ( ) { public Double apply ( final Double from ) { return from *.88 ; } } ) ) ;"
"public class MyGame extends Game { ... public MainMenu menu ; ... @ Override public void create ( ) { this.screen_type == SCREEN_TYPE.SPLASH ; splashScreen = new SplashScreen ( ) ; setScreen ( splashScreen ) ; } ... @ Override public void pause ( ) { //never gets called if I press the HOME button in middle of splash screen if ( this.screen_type == SCREEN_TYPE.SPLASH ) { this.dispose ( ) ; } } ... public void LoadMenuTimeConsumingConstructor ( ) { //load all menus and process data main_menu = new MainMenu ( ) ; loaded_menu = true ; } } public class SplashScreen implements InputProcessor , Screen { public MyGame main_game ; ... public SplashScreen ( MyGame game ) { this.main_game = game ; } @ Override public void pause ( ) { //never gets called if I press the HOME button in middle of splash screen if ( main_game.screen_type == SCREEN_TYPE.SPLASH ) { main_game.dispose ( ) ; } } @ Override public void hide ( ) { //never gets called if I press the HOME button in middle of splash screen if ( main_game.screen_type == SCREEN_TYPE.SPLASH ) { main_game.dispose ( ) ; } } @ Override public void render ( delta float ) { ... //wait 1.5 sec if ( TimeUtils.millis ( ) - startTime > 1500 ) { { if ( main_game.loaded_menu = true ) { main_game.setScreen ( main_game.main_menu ) ; } } ... if ( is_this_second_frame ) { // we start loading menus in the second frame so we already have the splash onscreen main_game.LoadMenuTimeConsumingConstructor ( ) ; } ... } }"
/** The current seed for a ThreadLocalRandom */ @ sun.misc.Contended ( `` tlr '' ) long threadLocalRandomSeed ; /** Probe hash value ; nonzero if threadLocalRandomSeed initialized */ @ sun.misc.Contended ( `` tlr '' ) int threadLocalRandomProbe ; /** Secondary seed isolated from public ThreadLocalRandom sequence */ @ sun.misc.Contended ( `` tlr '' ) int threadLocalRandomSecondarySeed ; SEED = UNSAFE.objectFieldOffset ( tk.getDeclaredField ( `` threadLocalRandomSeed '' ) ) ; PROBE = UNSAFE.objectFieldOffset ( tk.getDeclaredField ( `` threadLocalRandomProbe '' ) ) ; SECONDARY = UNSAFE.objectFieldOffset ( tk.getDeclaredField ( `` threadLocalRandomSecondarySeed '' ) ) ;
"package pack ; import sun.util.calendar.CalendarUtils ; public class A { public static void main ( String [ ] args ) { System.out.println ( CalendarUtils.isGregorianLeapYear ( 2018 ) ) ; } } gyan @ gyan-pc : ~/codes/java $ ~/Documents/softwares/Linux/jdk1.8.0_131/bin/javac -d . a.javaa.java:2 : warning : CalendarUtils is internal proprietary API and may be removed in a future releaseimport sun.util.calendar.CalendarUtils ; ^a.java:9 : warning : CalendarUtils is internal proprietary API and may be removed in a future release System.out.println ( CalendarUtils.isGregorianLeapYear ( 2018 ) ) ; ^2 warnings gyan @ gyan-pc : ~/codes/java $ java -versionjava version `` 9.0.1 '' Java ( TM ) SE Runtime Environment ( build 9.0.1+11 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 9.0.1+11 , mixed mode ) gyan @ gyan-pc : ~/codes/java $ java pack.afalse"
"public static int pitagoras ( int a , int b ) { return ( int ) Math.sqrt ( a*a + b*b ) ; } public static int distance ( int x , int y , int x2 , int y2 ) { return pitagoras ( x - x2 , y - y2 ) ; } public static int pitagoras ( int , int ) ; Code : 0 : iload_0 1 : iload_0 2 : imul 3 : iload_1 4 : iload_1 5 : imul 6 : iadd 7 : i2d 8 : invokestatic # 24 ; //Method java/lang/Math.sqrt : ( D ) D 11 : d2i 12 : ireturnpublic static int distance ( int , int , int , int ) ; Code : 0 : iload_0 1 : iload_2 2 : isub 3 : iload_1 4 : iload_3 5 : isub 6 : invokestatic # 34 ; //Method pitagoras : ( II ) I 9 : ireturn public static int distance ( int x , int y , int x2 , int y2 ) { return ( int ) Math.sqrt ( ( x - x2 ) * ( x - x2 ) + ( y - y2 ) * ( y - y2 ) ) ; } public static int distance ( int , int , int , int ) ; Code : 0 : iload_0 1 : iload_2 2 : isub 3 : iload_0 4 : iload_2 5 : isub 6 : imul 7 : iload_1 8 : iload_3 9 : isub 10 : iload_1 11 : iload_3 12 : isub 13 : imul 14 : iadd 15 : i2d 16 : invokestatic # 24 ; //Method java/lang/Math.sqrt : ( D ) D 19 : d2i 20 : ireturn"
private int count = 0 ; public synchronized void increment ( ) { count++ ; } public void doWork ( ) throws InterruptedException { Thread t1 = new Thread ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < 5 ; i++ ) { increment ( ) ; System.out.println ( count+ '' `` +Thread.currentThread ( ) .getName ( ) ) ; } } } ) ; Thread t2 = new Thread ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < 5 ; i++ ) { increment ( ) ; System.out.println ( count+ '' `` +Thread.currentThread ( ) .getName ( ) ) ; } } } ) ; t1.start ( ) ; t2.start ( ) ; } 2 Thread-12 Thread-03 Thread-15 Thread-16 Thread-14 Thread-08 Thread-09 Thread-07 Thread-110 Thread-0
"public static void main ( String [ ] args ) throws InterruptedException { WeakHashMap < String , int [ ] > hm = new WeakHashMap < > ( ) ; int i = 0 ; while ( true ) { Thread.sleep ( 1000 ) ; i++ ; String key = new String ( new Integer ( i ) .toString ( ) ) ; System.out.println ( String.format ( `` add new element % d '' , i ) ) ; hm.put ( key , new int [ 1024 * 10000 ] ) ; key = null ; //System.gc ( ) ; } } add new element 1add new element 2add new element 3add new element 4add new element 5 [ GC ( Allocation Failure ) -- [ PSYoungGen : 48344K- > 48344K ( 59904K ) ] 168344K- > 168352K ( 196608K ) , 0.0090913 secs ] [ Times : user=0.02 sys=0.00 , real=0.01 secs ] [ Full GC ( Ergonomics ) [ PSYoungGen : 48344K- > 41377K ( 59904K ) ] [ ParOldGen : 120008K- > 120002K ( 136704K ) ] 168352K- > 161380K ( 196608K ) , [ Metaspace : 5382K- > 5382K ( 1056768K ) ] , 0.0380767 secs ] [ Times : user=0.09 sys=0.03 , real=0.04 secs ] [ GC ( Allocation Failure ) -- [ PSYoungGen : 41377K- > 41377K ( 59904K ) ] 161380K- > 161380K ( 196608K ) , 0.0040596 secs ] [ Times : user=0.00 sys=0.00 , real=0.00 secs ] [ Full GC ( Allocation Failure ) [ PSYoungGen : 41377K- > 41314K ( 59904K ) ] [ ParOldGen : 120002K- > 120002K ( 136704K ) ] 161380K- > 161317K ( 196608K ) , [ Metaspace : 5382K- > 5378K ( 1056768K ) ] , 0.0118884 secs ] [ Times : user=0.02 sys=0.00 , real=0.01 secs ] Exception in thread `` main '' java.lang.OutOfMemoryError : Java heap space at test.DeadLock.main ( DeadLock.java:23 ) Heap PSYoungGen total 59904K , used 42866K [ 0x00000000fbd80000 , 0x0000000100000000 , 0x0000000100000000 ) eden space 51712K , 82 % used [ 0x00000000fbd80000,0x00000000fe75c870,0x00000000ff000000 ) from space 8192K , 0 % used [ 0x00000000ff800000,0x00000000ff800000,0x0000000100000000 ) to space 8192K , 0 % used [ 0x00000000ff000000,0x00000000ff000000,0x00000000ff800000 ) ParOldGen total 136704K , used 120002K [ 0x00000000f3800000 , 0x00000000fbd80000 , 0x00000000fbd80000 ) object space 136704K , 87 % used [ 0x00000000f3800000,0x00000000fad30b90,0x00000000fbd80000 ) Metaspace used 5409K , capacity 5590K , committed 5760K , reserved 1056768K class space used 576K , capacity 626K , committed 640K , reserved 1048576K"
"class A < B2 extends B , A2 extends A < B2 , A2 > > { C < B2 , A2 > c ; void test ( ) { c.acceptParameterOfTypeA ( this ) ; } } class B { } class C < B2 extends B , A2 extends A < B2 , A2 > > { void acceptParameterOfTypeA ( A2 a ) { } }"
"combiner.apply ( u , accumulator.apply ( identity , t ) ) == accumulator.apply ( u , t ) ( * ) operator < T > op = ( x , y ) - > something ; stream.reduce ( id , op , op ) ;"
for ( int i = myList.length-1 ; i > =0 ; i -- ) { int j = ( int ) ( Math.random ( ) * ( i+1 ) ) ; double temp = myList [ i ] ; myList [ i ] = myList [ j ] ; myList [ j ] = temp ; } for ( int i = 0 ; i < myList.length ; i++ ) { int j = ( int ) ( Math.random ( ) * ( myList.length ) ) ; double temp = myList [ i ] ; myList [ i ] = myList [ j ] ; myList [ j ] = temp ; }
"/** * Constructs an IndexOutOfBoundsException detail message . * Of the many possible refactorings of the error handling code , * this `` outlining '' performs best with both server and client VMs . */private String outOfBoundsMsg ( int index ) { return `` Index : `` +index+ '' , Size : `` +size ; } /* * All recent hotspots ( as of 2009 ) *really* like to have the natural code * * if ( guardExpression ) { * throw new BadException ( messageExpression ) ; * } * * refactored so that messageExpression is moved to a separate * String-returning method . * * if ( guardExpression ) { * throw new BadException ( badMsg ( ... ) ) ; * } * * The alternative natural refactorings into void or Exception-returning * methods are much slower . This is a big deal - we 're talking factors of * 2-8 in microbenchmarks , not just 10-20 % . ( This is a hotspot optimizer * bug , which should be fixed , but that 's a separate , big project ) . * * The coding pattern above is heavily used in java.util , e.g . in ArrayList . * There is a RangeCheckMicroBenchmark in the JDK that was used to test this ."
"SnapshotRaceCondition.initialize ( ) ; BufferedImage bufferedImage = SnapshotRaceCondition.capture ( `` < html style='background-color : red ; ' > < h1 > TEST < /h1 > < /html > '' ) ; /** * Notes : * - The color is to observe the otherwise non-obvious cropping that occurs * with some techniques , such as ` setPrefWidth ` , ` autosize ` , etc . * - Call this function in a loop and then display/write ` BufferedImage ` to * to see strange behavior on subsequent calls . * - Recommended , modify ` < h1 > TEST < /h1 ` with a counter to see content from * previous captures render much later . */ import javafx.application.Application ; import javafx.application.Platform ; import javafx.beans.value.ChangeListener ; import javafx.beans.value.ObservableValue ; import javafx.concurrent.Worker ; import javafx.embed.swing.SwingFXUtils ; import javafx.scene.Scene ; import javafx.scene.SnapshotParameters ; import javafx.scene.image.WritableImage ; import javafx.scene.web.WebView ; import javafx.stage.Stage ; import java.awt.image.BufferedImage ; import java.io.IOException ; import java.util.concurrent.atomic.AtomicBoolean ; import java.util.concurrent.atomic.AtomicReference ; import java.util.logging.Logger ; public class SnapshotRaceCondition extends Application { private static final Logger log = Logger.getLogger ( SnapshotRaceCondition.class.getName ( ) ) ; // self reference private static SnapshotRaceCondition instance = null ; // concurrent-safe containers for flags/exceptions/image data private static AtomicBoolean started = new AtomicBoolean ( false ) ; private static AtomicBoolean finished = new AtomicBoolean ( true ) ; private static AtomicReference < Throwable > thrown = new AtomicReference < > ( null ) ; private static AtomicReference < BufferedImage > capture = new AtomicReference < > ( null ) ; // main javafx objects private static WebView webView = null ; private static Stage stage = null ; // frequency for checking fx is started private static final int STARTUP_TIMEOUT= 10 ; // seconds private static final int STARTUP_SLEEP_INTERVAL = 250 ; // millis // frequency for checking capture has occured private static final int CAPTURE_SLEEP_INTERVAL = 10 ; // millis /** Called by JavaFX thread */ public SnapshotRaceCondition ( ) { instance = this ; } /** Starts JavaFX thread if not already running */ public static synchronized void initialize ( ) throws IOException { if ( instance == null ) { new Thread ( ( ) - > Application.launch ( SnapshotRaceCondition.class ) ) .start ( ) ; } for ( int i = 0 ; i < ( STARTUP_TIMEOUT * 1000 ) ; i += STARTUP_SLEEP_INTERVAL ) { if ( started.get ( ) ) { break ; } log.fine ( `` Waiting for JavaFX ... '' ) ; try { Thread.sleep ( STARTUP_SLEEP_INTERVAL ) ; } catch ( Exception ignore ) { } } if ( ! started.get ( ) ) { throw new IOException ( `` JavaFX did not start '' ) ; } } @ Override public void start ( Stage primaryStage ) { started.set ( true ) ; log.fine ( `` Started JavaFX , creating WebView ... '' ) ; stage = primaryStage ; primaryStage.setScene ( new Scene ( webView = new WebView ( ) ) ) ; // Add listener for SUCCEEDED Worker < Void > worker = webView.getEngine ( ) .getLoadWorker ( ) ; worker.stateProperty ( ) .addListener ( stateListener ) ; // Prevents JavaFX from shutting down when hiding window , useful for calling capture ( ... ) in succession Platform.setImplicitExit ( false ) ; } /** Listens for a SUCCEEDED state to activate image capture **/ private static ChangeListener < Worker.State > stateListener = ( ov , oldState , newState ) - > { if ( newState == Worker.State.SUCCEEDED ) { WritableImage snapshot = webView.snapshot ( new SnapshotParameters ( ) , null ) ; capture.set ( SwingFXUtils.fromFXImage ( snapshot , null ) ) ; finished.set ( true ) ; stage.hide ( ) ; } } ; /** Listen for failures **/ private static ChangeListener < Throwable > exceptListener = new ChangeListener < Throwable > ( ) { @ Override public void changed ( ObservableValue < ? extends Throwable > obs , Throwable oldExc , Throwable newExc ) { if ( newExc ! = null ) { thrown.set ( newExc ) ; } } } ; /** Loads the specified HTML , triggering stateListener above **/ public static synchronized BufferedImage capture ( final String html ) throws Throwable { capture.set ( null ) ; thrown.set ( null ) ; finished.set ( false ) ; // run these actions on the JavaFX thread Platform.runLater ( new Thread ( ( ) - > { try { webView.getEngine ( ) .loadContent ( html , `` text/html '' ) ; stage.show ( ) ; // JDK-8087569 : will not capture without showing stage stage.toBack ( ) ; } catch ( Throwable t ) { thrown.set ( t ) ; } } ) ) ; // wait for capture to complete by monitoring our own finished flag while ( ! finished.get ( ) & & thrown.get ( ) == null ) { log.fine ( `` Waiting on capture ... '' ) ; try { Thread.sleep ( CAPTURE_SLEEP_INTERVAL ) ; } catch ( InterruptedException e ) { log.warning ( e.getLocalizedMessage ( ) ) ; } } if ( thrown.get ( ) ! = null ) { throw thrown.get ( ) ; } return capture.get ( ) ; } }"
ArrayList < ArrayList < Integer > > i ;
"public static void fill ( Order order ) { DatabaseComponent databaseComponent = new DatabaseComponent ( ) ; Person person = databaseComponent.getById ( order.getUserId ( ) ) ; order.setName ( person.getName ( ) ) ; order.setPhone ( person.getPhone ( ) ) ; } public void fill ( Order order ) { DatabaseComponent databaseComponent = new DatabaseComponent ( ) ; Person person = databaseComponent.getById ( order.getId ( ) ) ; fillOrder ( order , person ) ; } private void fillOrder ( Order order , Person person ) { order.setPhone ( person.getPhone ( ) ) ; order.setName ( person.getName ( ) ) ; return ; } public class Util { public static void fillOrder ( Order order , Person person ) { order.setPhone ( person.getPhone ( ) ) ; order.setName ( person.getName ( ) ) ; return ; } }"
"int n=1String test= '' ababababab '' ; int lo=test.lastIndexOf ( `` a '' ) ; while ( n++ < =lo ) Abstract=Abstract.replaceFirst ( `` a '' , change ( n ) ) ; //change is another function to return a string `` 00 '' +n ;"
byte b = 1 ; char c = 2 ; c = b ; // line 1 final byte b = 1 ; char c = 2 ; c = b ; // line 2
public class Test { private volatile Outer outerVar = new Outer ( ) ; static class Outer { Inner innerVar = new Inner ( ) ; } static class Inner { // state // setters // getters } private void multithreadedUse ( ) { // play with outerVar.innerVar } }
class A { public static void main ( String [ ] args ) { for ( true ; true ; true ) { //compilation error } } } class A { public static void main ( String [ ] args ) { for ( getBoolean ( ) ; true ; getBoolean ( ) ) { } } public static boolean getBoolean ( ) { return true ; } }
Object o = true ? new Integer ( 1 ) : new Double ( 2.0 ) ; System.out.println ( o ) ;
"public void execute ( Publisher < T > publisher ) throws Exception { PublishStrategy < T > publishStrategy = publisher.getPublishStrategy ( ) ; publishStrategy.execute ( publisher : :executionHandler ) ; } @ Testpublic void testExecute ( ) throws Exception { PublishStrategy < Event > publishStrategy = Mockito.mock ( PublishStrategy.class ) ; Publisher < Event > publisher = Mockito.mock ( Publisher.class ) ; Mockito.when ( publisher.getPublishStrategy ( ) ) .thenReturn ( publishStrategy ) ; Mockito.doNothing ( ) .when ( publishStrategy ) .execute ( publisher : :executionHandler ) ; PublishJob job = new PublishJob ( publisher ) ; job.execute ( publisher ) ; Mockito.verify ( publishStrategy , Mockito.times ( 1 ) ) .execute ( publisher : :executionHandler ) ; } Argument ( s ) are different ! Wanted : publishStrategy.execute ( com.test.producer.jobs.PublishJobTest $ $ Lambda $ 3/1146825051 @ 6f45df59 ) ; - > at com.test.producer.jobs.PublishJobTest.testExecute ( PublishJobTest.java:23 ) Actual invocation has different arguments : publishStrategy.execute ( com.producer.jobs.PublishJob $ $ Lambda $ 2/1525409936 @ 38e79ae3 ) ; - > at com.producer.jobs.PublishJob.execute ( PublishJob.java:30 ) @ Testpublic void testExecute ( ) throws Exception { PublishStrategy < Event > publishStrategy = new PublishStrategy < Event > ( ) { @ Override public void execute ( Consumer < List < Event > > handler ) { Assert.assertNotNull ( handler ) ; } } ; Publisher < Event > publisher = new AbstractPublisher < Event > ( ) { @ Override public void init ( PublishStrategy < Event > publishStrategy ) { this.publishStrategy = publishStrategy ; } @ Override public void executionHandler ( List < IngestEvent > items ) { } @ Override public PublishStrategy < IngestEvent > getPublishStrategy ( ) { return this.publishStrategy ; } } ; publisher.init ( publishStrategy ) ; PublishJob job = new PublishJob ( ) ; job.execute ( publisher ) ; }"
double preInit = 0.0010d ; System.out.println ( `` pre-init : `` + preInit ) ; System.out.println ( `` inline : `` + 0.0010d ) ; pre-init : 0.0010 inline : 0.0010 pre-init : 0.001 inline : 0.0010
"// If the mergesegs worked , delete the segment dirs for ( File file : segments.listFiles ( ) ) { if ( ! file.equals ( mergedSegFile ) ) { LOG.debug ( `` deleting segment dir `` + file ) ; FileUtils.deleteDirectory ( file ) ; } }"
"public class RecordHelper_Method_A { private static MediaRecorder mMediaRecorder ; private static MediaProjection mMediaProjection ; private static VirtualDisplay mVirtualDisplay ; public static void StartRecord ( Context mContext , int requestCode , int resultCode , Intent data ) { mMediaRecorder = new MediaRecorder ( ) ; initRecorder ( ) ; MediaProjectionManager mProjectionManager = ( MediaProjectionManager ) mContext.getSystemService ( Context.MEDIA_PROJECTION_SERVICE ) ; mMediaProjection = mProjectionManager.getMediaProjection ( resultCode , data ) ; mVirtualDisplay=mMediaProjection.createVirtualDisplay ( `` MainActivity '' , 400,600 , 300 , DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR , mMediaRecorder.getSurface ( ) , null , null ) ; MediaProjectionCallback mMediaProjectionCallback = new MediaProjectionCallback ( ) ; mMediaProjection.registerCallback ( mMediaProjectionCallback , null ) ; mMediaRecorder.start ( ) ; } public static void StopRecord ( ) { mMediaProjection=null ; mMediaRecorder.stop ( ) ; mMediaRecorder.reset ( ) ; mMediaRecorder.release ( ) ; mVirtualDisplay.release ( ) ; } private static void initRecorder ( ) { mMediaRecorder.setAudioSource ( MediaRecorder.AudioSource.MIC ) ; mMediaRecorder.setVideoSource ( MediaRecorder.VideoSource.SURFACE ) ; // ... } private static class MediaProjectionCallback extends MediaProjection.Callback { @ Override public void onStop ( ) { mMediaRecorder.stop ( ) ; } } } public class RecordHelper_Method_B { public static void StartRecord ( MediaRecorder mMediaRecorder , MediaProjection mMediaProjection , VirtualDisplay mVirtualDisplay ) { initRecorder ( mMediaRecorder ) ; mVirtualDisplay=mMediaProjection.createVirtualDisplay ( `` MainActivity '' , 400,600 , 300 , DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR , mMediaRecorder.getSurface ( ) , null , null ) ; MediaProjectionCallback mMediaProjectionCallback = new MediaProjectionCallback ( mMediaRecorder ) ; mMediaProjection.registerCallback ( mMediaProjectionCallback , null ) ; mMediaRecorder.start ( ) ; } public static void StopRecord ( MediaRecorder mMediaRecorder , MediaProjection mMediaProjection , VirtualDisplay mVirtualDisplay ) { mMediaProjection=null ; mMediaRecorder.stop ( ) ; mMediaRecorder.reset ( ) ; mMediaRecorder.release ( ) ; mVirtualDisplay.release ( ) ; } private static void initRecorder ( MediaRecorder mMediaRecorder ) { mMediaRecorder.setAudioSource ( MediaRecorder.AudioSource.MIC ) ; mMediaRecorder.setVideoSource ( MediaRecorder.VideoSource.SURFACE ) ; // ... } private static class MediaProjectionCallback extends MediaProjection.Callback { MediaRecorder mMediaRecorder ; public MediaProjectionCallback ( MediaRecorder mMediaRecorder ) { this.mMediaRecorder=mMediaRecorder ; } @ Override public void onStop ( ) { mMediaRecorder.stop ( ) ; } } }"
Original Array : 30 8 2 25 27 20 PASS 1 : 8 30 2 25 27 20 PASS 2 : 8 2 30 25 27 20 PASS 3 : 8 2 25 30 27 20 PASS 4 : 8 2 25 27 30 20 PASS 5 : 8 2 25 27 20 30
< % @ page import= '' org.sgrp.SearchResults '' % >
"public static String [ ] decodeText ( String codeString ) { //Parse codestring and return values ( not included in this example ) String [ ] data = new String [ 3 ] ; data [ 0 ] = '' This '' ; data [ 1 ] = '' does '' ; data [ 2 ] = '' work '' ; return data ; } public class JInputs extends JOptionPane { //A lot of missing code here ( which should n't be necessary to reproduce issue ) public class UserData { public String userName ; public String code ; public long milliTime ; UserData ( ) { } UserData ( String userName , String code , long milliTime ) { this.userName = userName ; this.milliTime = milliTime ; this.code = code ; } } public static UserData decodeText ( String codeString ) { //Parse codestring and return values ( not included in this example ) UserData data = new UserData ( ) ; data.milliTime = System.currentTimeMillis ( ) ; data.code = `` blah '' ; data.userName = `` Me '' ; return data ; } }"
final XSDResourceImpl rsrc = new XSDResourceImpl ( URI.createFileURI ( xsdFileWithPath ) ) ; rsrc.load ( new HashMap ( ) ) ; final XSDSchema schema = rsrc.getSchema ( ) ; ... if ( elem.isElementDeclarationReference ( ) ) { //element ref elem = elem.getResolvedElementDeclaration ( ) ; } XSDTypeDefinition tdef = elem.getType ( ) ; //null for element ref
"protected void verifyTable ( ) throws IOException { Configuration configuration = HBaseConfiguration.create ( ) ; HTable hTable = null ; try { hTable = new HTable ( configuration , segmentMatchTableName ) ; // ... //various business logic here // ... } finally { try { try { if ( hTable ! =null ) { hTable.close ( ) ; //This can throw an IOException } } finally { try { generalTableHelper.deleteTable ( configuration , segmentMatchTableName ) ; //This can throw an IOException } finally { try { generalTableHelper.deleteTable ( configuration , wordMatchTableName ) ; //This can throw an IOException } finally { generalTableHelper.deleteTable ( configuration , haplotypeTableName ) ; //This can throw an IOException } } } } finally { HConnectionManager.deleteConnection ( configuration , true ) ; //This can throw an IOException } } }"
public interface HowDoYouCallMe { void addExceptionHandler ( ExceptionHandler handler ) ; }
"Exception in thread `` main '' java.io.IOException : unexpected code Response { protocol=http/1.1 , code=400 , message=Bad Request , url=https : //***.sharepoint.com/_api/web/lists } at com . **.list.ListImpl.createAList ( ListImpl.java:39 ) at com . **.Test.main ( Test.java:16 ) package com . ****.list ; import com . **.app.properties.ApplicationProperties ; import com . **.metadata.MetaData ; import com . **.rest.TokenService ; import okhttp3 . * ; import org.json.JSONObject ; import java.io.IOException ; public class ListImpl implements List { private String api = '' /lists '' ; private MediaType JSON = MediaType.parse ( `` application/json ; charset=utf-8 '' ) ; private final OkHttpClient client = new OkHttpClient ( ) ; @ Override public void createAList ( String token ) throws IOException { MetaData metaData = new MetaData ( `` SP.List '' ) ; ListModel listData = new ListModel ( metaData , true,104 , true , '' sample description 02 '' , `` list-number-02 '' ) ; JSONObject jsonObject = new JSONObject ( listData ) ; String data = jsonObject.toString ( ) ; RequestBody formBody = RequestBody.create ( data , JSON ) ; System.out.println ( formBody.contentType ( ) ) ; Request request = new Request.Builder ( ) .url ( ApplicationProperties.getBaseUrl ( ) + api ) .addHeader ( `` Authorization '' , `` Bearer `` + token ) .addHeader ( `` Content-Type '' , `` application/json ; odata=verbose '' ) .addHeader ( `` accept '' , `` application/json ; odata=verbose '' ) .addHeader ( `` X-RequestDigest '' , `` 0x87D8893C3016E8E7EB288E13276DE7C8D5250EC26025FDADCF9A3E6C86DF0C4A5EC86B3B4AEAD882E06058BC0919A61E10C3DEFDE3B275E67698A9E1B4456CEF '' ) .post ( formBody ) .build ( ) ; try ( Response response = client.newCall ( request ) .execute ( ) ) { if ( ! response.isSuccessful ( ) ) { throw new IOException ( `` unexpected code `` + response ) ; } System.out.println ( response.body ( ) .string ( ) ) ; } } }"
"String fileName = Uri.parse ( url ) .getLastPathSegment ( ) ; try ( FileOutputStream outputStream = context.openFileOutput ( fileName , Context.MODE_PRIVATE ) ) { outputStream.write ( bytes ) ; // ... } catch ( IOException e ) { // logging ... } @ Overridepublic WebResourceResponse shouldInterceptRequest ( WebView view , WebResourceRequest request ) { String url = request.getUrl ( ) .toString ( ) ; if ( shouldUseCache ( url ) ) { try { return new WebResourceResponse ( `` video/webm '' , Charsets.UTF_8.name ( ) , context.openFileInput ( obtainFileName ( url ) ) ) ; } catch ( IOException e ) { // If a cached resource fails to load , just let the WebView load it the normal way . // logging ... } } return super.shouldInterceptRequest ( view , request ) ; }"
methodReference = : :method methodReference = { method ( it ) }
"List < String > strings = Arrays.asList ( `` long word '' , `` short '' , `` long wwww '' , `` llll wwww '' , `` shr '' ) ; List < String > longest = strings.stream ( ) .sorted ( Comparator.comparingInt ( String : :length ) .reversed ( ) ) .takeWhile ( ? ? ? ) .collect ( Collectors.toList ( ) ) ; static class IntWrapper { int value ; } public static void main ( String [ ] args ) throws IOException { List < String > strings = Arrays.asList ( `` long word '' , `` short '' , `` long wwww '' , `` llll wwww '' , `` shr '' ) ; IntWrapper wrapper = new IntWrapper ( ) ; List < String > longest = strings.stream ( ) .sorted ( Comparator.comparingInt ( String : :length ) .reversed ( ) ) .peek ( s - > { if ( wrapper.value < s.length ( ) ) wrapper.value = s.length ( ) ; } ) .takeWhile ( s - > s.length ( ) == wrapper.value ) .collect ( Collectors.toList ( ) ) ; System.out.println ( longest ) ; }"
public static void main ( String [ ] args ) { Object x=new Object ( ) ; String y= ( String ) x ; }
"private class HSV extends HorizontalScrollView { public LinearLayout L ; public AbsoluteLayout A ; public HSV ( Context context ) { super ( context ) ; L = new LinearLayout ( context ) ; A = new AbsoluteLayout ( context ) ; } @ Override public void addView ( View child ) { A.addView ( child ) ; } void update_scroll ( ) { removeView ( L ) ; addView ( L , 0 ) ; L.removeView ( A ) ; L.addView ( A ) ; A.invalidate ( ) ; L.invalidate ( ) ; invalidate ( ) ; requestLayout ( ) ; } int GetCurrentPos ( ) { return getScrollX ( ) ; // < -- this line if HSV return getScrollY ( ) ; // < -- this line if VSV } ... few more methods skipped , they will not change at all in 'vertical ' version }"
"% OSX platform-specific : revert to IPv4if ( computer ( 'arch ' ) == 'maci64 ' ) javaoptspath = fileread ( [ matlabroot '/bin/ ' computer ( 'arch ' ) '/java.opts ' ] ) ; k = strfind ( javaoptspath , '-Djava.net.preferIPv4Stack=true ' ) ; if isempty ( k ) setenv ( 'DRAKE_IPV4_SET_MATLABROOT ' , matlabroot ) setenv ( 'DRAKE_IPV4_SET_ARCH ' , computer ( 'arch ' ) ) display ( 'Since you are on Mac , we will need to set your JVM to prefer IPV4 instead of IPV6 for MATLAB ' ) display ( 'Please enter your sudo password below ' ) ! ( echo `` '' | echo `` -Djava.net.preferIPv4Stack=true '' ) | sudo tee -a $ DRAKE_IPV4_SET_MATLABROOT/bin/ $ DRAKE_IPV4_SET_ARCH/java.opts endend"
"< Row > < Key android : codes= '' FLAG_EDITOR_ACTION '' android : keyLabel= '' Start '' / > < /Row > @ Overridepublic boolean onKeyDown ( int keyCode , KeyEvent event ) { switch ( keyCode ) { case KeyEvent.FLAG_EDITOR_ACTION : { return true ; } ..."
"@ Target ( { METHOD , FIELD , ANNOTATION_TYPE , CONSTRUCTOR , PARAMETER } ) @ Retention ( RUNTIME ) @ Documented @ Constraint ( validatedBy = { } ) public @ interface Null { }"
private Set < Student > getFilteredSet ( ) { Set < Student > unfilteredSet = getAllStudents ( ) ; Set < Student > adminAreaSet = getAdminStudents ( ) ; Set < String > adminAreaID = new HashSet < > ( ) ; Set < Student > filteredSet = new HashSet < > ( ) ; for ( final Student student : adminAreaSet ) { adminAreaID.add ( student.getId ( ) ) ; } for ( final Student student : unfilteredSet ) { if ( adminAreaID.contains ( student.getId ( ) ) ) { filteredSet.add ( student ) ; } } return filteredSet ; }
"public Attribute ( String attrName , Number attrValue ) { this.name = attrName ; this.value = attrValue ; }"
"import java.util.Map ; import java.util.HashMap ; public class Generics { public static < K , V > Map < K , V > newMap ( ) { return new HashMap < K , V > ( ) ; } public static void main ( String args [ ] ) { Map < String , String > map = newMap ( ) ; } } import java.util.Map ; import java.util.HashMap ; import gnu.trove.map.hash.THashMap ; public class Generics { private String mapClassName = `` java.util.HashMap '' ; @ SuppressWarnings ( `` unchecked '' ) public < K , V > Map < K , V > newMap ( ) { Map < K , V > map ; try { Class < ? extends Map < K , V > > c = ( Class < Map < K , V > > ) Class.forName ( getMapClassName ( ) ) .asSubclass ( Map.class ) ; map = c.newInstance ( ) ; } catch ( Exception e ) { map = new HashMap < K , V > ( ) ; } return map ; } protected String getMapClassName ( ) { return this.mapClassName ; } protected void setMapClassName ( String s ) { this.mapClassName = s ; } public static void main ( String args [ ] ) { Generics g = new Generics ( ) ; Map < String , String > map = g.newMap ( ) ; System.out.printf ( `` Class = % s\n '' , map.getClass ( ) .toString ( ) ) ; g.setMapClassName ( `` gnu.trove.map.hash.THashMap '' ) ; map = g.newMap ( ) ; System.out.printf ( `` Class = % s\n '' , map.getClass ( ) .toString ( ) ) ; } }"
// from the Collection interface : public boolean add ( E someElement ) ; // from the ListIterator interface : public void add ( E someElement ) ;
"log.info ( `` connection is `` +connection.getClass ( ) .getName ( ) + '' , `` + ( connection instanceof Connection ) ) ; Object proxy = java.lang.reflect.Proxy.newProxyInstance ( connection.getClass ( ) .getClassLoader ( ) , connection.getClass ( ) .getInterfaces ( ) , new MockFailureWrapper ( connection ) ) ; log.info ( `` proxy is `` +proxy.getClass ( ) .getName ( ) + '' , `` + ( proxy instanceof Connection ) ) ; return ( Connection ) proxy ; java.lang.ClassCastException : $ Proxy11 can not be cast to java.sql.Connection connection is org.h2.jdbc.JdbcConnection , trueproxy is $ Proxy9 , true connection is com.mysql.jdbc.JDBC4Connection , trueproxy is $ Proxy11 , false"
public < T extends java.util.EventListener > T [ ] getListeners ( final Class < T > listenerClass ) { ... }
"jlink -- add-modules java.base , jdk.crypto.ec -- output jre Exception in thread `` main '' javax.net.ssl.SSLException : Unexpected error : java.security.InvalidAlgorithmParameterException : the trustAnchors parameter must be non-empty at java.base/sun.security.ssl.Alert.createSSLException ( Alert.java:133 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:320 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:263 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:258 ) at java.base/sun.security.ssl.SSLSocketImpl.handleException ( SSLSocketImpl.java:1313 ) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake ( SSLSocketImpl.java:408 ) at java.base/sun.net.www.protocol.https.HttpsClient.afterConnect ( HttpsClient.java:567 ) at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect ( AbstractDelegateHttpsURLConnection.java:185 ) at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0 ( HttpURLConnection.java:1587 ) at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream ( HttpURLConnection.java:1515 ) at java.base/java.net.HttpURLConnection.getResponseCode ( HttpURLConnection.java:527 ) at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode ( HttpsURLConnectionImpl.java:334 ) at URLTest.printResponseCode ( URLTest.java:68 ) at URLTest.main ( URLTest.java:47 ) Caused by : java.lang.RuntimeException : Unexpected error : java.security.InvalidAlgorithmParameterException : the trustAnchors parameter must be non-empty at java.base/sun.security.validator.PKIXValidator. < init > ( PKIXValidator.java:102 ) at java.base/sun.security.validator.Validator.getInstance ( Validator.java:181 ) at java.base/sun.security.ssl.X509TrustManagerImpl.getValidator ( X509TrustManagerImpl.java:300 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkTrustedInit ( X509TrustManagerImpl.java:176 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkTrusted ( X509TrustManagerImpl.java:189 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkServerTrusted ( X509TrustManagerImpl.java:129 ) at java.base/sun.security.ssl.CertificateMessage $ T13CertificateConsumer.checkServerCerts ( CertificateMessage.java:1316 ) at java.base/sun.security.ssl.CertificateMessage $ T13CertificateConsumer.onConsumeCertificate ( CertificateMessage.java:1207 ) at java.base/sun.security.ssl.CertificateMessage $ T13CertificateConsumer.consume ( CertificateMessage.java:1150 ) at java.base/sun.security.ssl.SSLHandshake.consume ( SSLHandshake.java:392 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:443 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:421 ) at java.base/sun.security.ssl.TransportContext.dispatch ( TransportContext.java:177 ) at java.base/sun.security.ssl.SSLTransport.decode ( SSLTransport.java:164 ) at java.base/sun.security.ssl.SSLSocketImpl.decode ( SSLSocketImpl.java:1151 ) at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord ( SSLSocketImpl.java:1062 ) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake ( SSLSocketImpl.java:402 ) ... 8 moreCaused by : java.security.InvalidAlgorithmParameterException : the trustAnchors parameter must be non-empty at java.base/java.security.cert.PKIXParameters.setTrustAnchors ( PKIXParameters.java:200 ) at java.base/java.security.cert.PKIXParameters. < init > ( PKIXParameters.java:120 ) at java.base/java.security.cert.PKIXBuilderParameters. < init > ( PKIXBuilderParameters.java:104 ) at java.base/sun.security.validator.PKIXValidator. < init > ( PKIXValidator.java:99 ) ... 24 more"
"import java.util.Arrays ; import java.util.List ; import java.util.Map ; import java.util.concurrent.TimeUnit ; import java.util.stream.Collectors ; import java.util.stream.IntStream ; import cern.colt.list.DoubleArrayList ; import cern.jet.stat.Descriptive ; import org.openjdk.jmh.annotations . * ; @ State ( Scope.Thread ) public class MyBenchmark { public static double [ ] array ; static { int num_of_elements = 100 ; array = new double [ num_of_elements ] ; for ( int i = 0 ; i < num_of_elements ; i++ ) { array [ i ] = i+1 ; } } @ Benchmark @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) public void testInversionSumForLoop ( ) { double result = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { result += 1.0/array [ i ] ; } } @ Benchmark @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) public void testInversionSumUsingStreams ( ) { double result = 0 ; result = Arrays.stream ( array ) .map ( d - > 1/d ) .sum ( ) ; } @ Benchmark @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) public void testInversionSumUsingCernColt ( ) { double result = Descriptive.sumOfInversions ( new DoubleArrayList ( array ) , 0 , array.length-1 ) ; } } /** * Results * Benchmark Mode Cnt Score Error Units * MyBenchmark.testInversionSumForLoop avgt 200 1.647 ± 0.155 ns/op * MyBenchmark.testInversionSumUsingCernColt avgt 200 603.254 ± 22.199 ns/op * MyBenchmark.testInversionSumUsingStreams avgt 200 645.895 ± 20.833 ns/o */ /** * Updated results after adding Blackhole.consume * Benchmark Mode Cnt Score Error Units * MyBenchmark.testInversionSumForLoop avgt 200 525.498 ± 10.458 ns/op * MyBenchmark.testInversionSumUsingCernColt avgt 200 517.930 ± 2.080 ns/op * MyBenchmark.testInversionSumUsingStreams avgt 200 582.103 ± 3.261 ns/op */"
public boolean isPlayer ( Unit unit ) { return unit == player ; } public boolean isEnemy ( Unit unit ) { for ( Unit e : enemies ) { if ( unit.equals ( e ) ) return true ; } return false ; }
interface Test { default void doMagic ( ) { System.out.println ( `` Abracadabra '' ) ; } } class TestImpl implements Test { } class SpecialTestImpl extends TestImpl { public void doMagic ( ) { Test.super.doMagic ( ) ; // Error : No enclosing instance of the type Test is accessible in scope } }
import com.fasterxml.jackson.annotation.JsonProperty ; import com.fasterxml.jackson.core.JsonProcessingException ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.PropertyNamingStrategy ; import javax.validation.Valid ; import javax.validation.Validation ; import javax.validation.Validator ; import javax.validation.ValidatorFactory ; import javax.validation.constraints.Min ; import java.util.List ; public class Test { public static void main ( String [ ] args ) throws JsonProcessingException { ObjectMapper mapper = new ObjectMapper ( ) ; mapper.setPropertyNamingStrategy ( PropertyNamingStrategy.SNAKE_CASE ) ; Data data = new Data ( ) ; System.out.println ( `` Serialized : `` + mapper.writerWithDefaultPrettyPrinter ( ) .writeValueAsString ( data ) ) ; ValidatorFactory factory = Validation.buildDefaultValidatorFactory ( ) ; Validator validator = factory.getValidator ( ) ; validator.validate ( data ) .forEach ( violation - > { System.out.println ( `` Path : `` + violation.getPropertyPath ( ) ) ; } ) ; } public static class Data { @ JsonProperty ( `` foobar '' ) @ Valid public List < Foo > foo = List.of ( new Foo ( ) ) ; } public static class Foo { @ Min ( 100 ) public int barBaz = 42 ; } } Serialized : { `` foobar '' : [ { `` bar_baz '' : 42 } ] } Path : foo [ 0 ] .barBaz
"class LedgerEntry { private BigDecimal creditAmount ; private BigDecimal debitAmount ; //getters and setters } BigDecimal creditTotal = ledgeredEntries.stream ( ) .map ( p - > p.getCreditAmount ( ) ) .reduce ( BigDecimal.ZERO , BigDecimal : :add ) ; BigDecimal debitTotal = ledgeredEntries.stream ( ) .map ( p - > p.getDebitAmount ( ) ) .reduce ( BigDecimal.ZERO , BigDecimal : :add ) ; BigDecimal sumCreditDebit = creditTotal.subtract ( debitTotal ) ;"
public class ThreadPractice { static boolean canrunstatic ; public static void main ( String [ ] args ) throws InterruptedException { Thread backgroundThread = new Thread ( new Runnable ( ) { public void run ( ) { int i = 0 ; while ( ! canrunstatic ) { i++ ; } System.out.println ( `` finished '' ) ; } } ) ; backgroundThread.start ( ) ; TimeUnit.SECONDS.sleep ( 1 ) ; canrunstatic = true ; } System.out.println ( `` im still running '' ) ; public class ThreadPractice { static boolean canrunstatic ; public static void main ( String [ ] args ) throws InterruptedException { Thread backgroundThread = new Thread ( new Runnable ( ) { public void run ( ) { int i = 0 ; while ( ! canrunstatic ) { i++ ; System.out.println ( `` im still running '' ) ; } System.out.println ( `` finished '' ) ; } } ) ; backgroundThread.start ( ) ; TimeUnit.SECONDS.sleep ( 1 ) ; canrunstatic = true ; }
Class A { //constructor } Class B { private A a ; public B ( ) { a = new A ( ) ; } }
public class Slots { String slotType ; Visits visit ; } public class Visits { private long visitCode ; private String agendaCode ; private String scheduledTime ; private String resourceType ; private String resourceDescription ; private String visitTypeCode ; ... } Set < String > agendas = slotsResponse.getContent ( ) .stream ( ) .map ( Slots : :getVisit ) .map ( Visits : :getAgendaCode ) .collect ( Collectors.toUnmodifiableSet ( ) ) ; Set < String > visitTypeCode = slotsResponse.getContent ( ) .stream ( ) .map ( Slots : :getVisit ) .map ( Visits : :getVisitTypeCode ) .collect ( Collectors.toUnmodifiableSet ( ) ) ; Set < String > scheduledTime = slotsResponse.getContent ( ) .stream ( ) .map ( Slots : :getVisit ) .map ( Visits : :getScheduledTime ) .collect ( Collectors.toUnmodifiableSet ( ) ) ; List < Slots > collect = slotsResponse.getContent ( ) .stream ( ) .filter ( c - > agendas.contains ( c.getVisit ( ) .getAgendaCode ( ) ) ) .filter ( c - > visitTypeCode.contains ( c.getVisit ( ) .getVisitTypeCode ( ) ) ) .filter ( c - > scheduledTime.contains ( c.getVisit ( ) .getScheduledTime ( ) ) ) .collect ( Collectors.toList ( ) ) ;
"@ Controllerpublic class DataController { @ Autowired private IDataService dateService ; @ RequestMapping ( value = `` /some/data '' , method = RequestMethod.GET , produces = `` application/json '' ) public @ ResponseBody Data getDataByCode ( @ RequestParam String code ) { return versionService.getDataByCode ( code ) ; } } @ Controllerpublic class DataController { @ Autowired private IDataService dateService ; @ RequestMapping ( value = `` /some/data/ { code } '' , method = RequestMethod.GET , produces = `` application/json '' ) public @ ResponseBody Data getDataByCode ( @ PathVariable String code ) { return versionService.getDataByCode ( code ) ; } } < servlet > < servlet-name > dataBycode < /servlet-name > < servlet-class > org.springframework.web.servlet.DispatcherServlet < /servlet-class > < init-param > < param-name > contextConfigLocation < /param-name > < param-value > classpath : /config/servlet-config.xml < /param-value > < /init-param > < /servlet > < servlet-mapping > < servlet-name > dataBycode < /servlet-name > < url-pattern > /some/data < /url-pattern > < /servlet-mapping > < servlet > < servlet-name > dataBycode < /servlet-name > < servlet-class > org.springframework.web.servlet.DispatcherServlet < /servlet-class > < init-param > < param-name > contextConfigLocation < /param-name > < param-value > classpath : /config/servlet-config.xml < /param-value > < /init-param > < /servlet > < servlet-mapping > < servlet-name > dataBycode < /servlet-name > < url-pattern > /some/data/* < /url-pattern > < /servlet-mapping >"
"Integer i1 = 127 ; Integer i2 = 127 ; System.out.println ( i1++ == i2++ ) ; System.out.println ( i1 == i2 ) ; System.out.println ( i1++ == i2++ ) ; // True , since we first check for equality and increment both variables afterwards.System.out.println ( i1 == i2 ) ; // True again , since both variables are already incremented and have the value 128"
"import java.awt.Container ; import java.awt.Dimension ; import java.awt.FlowLayout ; import java.awt.GridBagConstraints ; import java.awt.event.ComponentAdapter ; import java.awt.event.ComponentEvent ; import javax.swing.JButton ; import javax.swing.JCheckBox ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JProgressBar ; import javax.swing.JRadioButton ; import javax.swing.UIManager ; //http : //stackoverflow.com/questions/14560680/jprogressbar-low-values-will-not-be-displayedpublic class ProgressSample { private JFrame frame = new JFrame ( `` GlassPane instead of JLayer '' ) ; private JLabel label ; private GridBagConstraints gbc = new GridBagConstraints ( ) ; private JProgressBar progressSeven ; public ProgressSample ( ) { frame.setLayout ( new FlowLayout ( ) ) ; frame.add ( new JButton ( `` test '' ) ) ; frame.add ( new JCheckBox ( `` test '' ) ) ; frame.add ( new JRadioButton ( `` test '' ) ) ; // Nothing is displayed if value is lover that 6 JProgressBar progressSix = new JProgressBar ( 0 , 100 ) ; progressSix.setValue ( 2 ) ; frame.add ( progressSix ) ; // but this works value is higher that 6 progressSeven = new JProgressBar ( 0 , 100 ) ; progressSeven.addComponentListener ( new ComponentAdapter ( ) { @ Override public void componentMoved ( ComponentEvent e ) { label.setBounds ( ( int ) progressSeven.getBounds ( ) .getX ( ) , ( int ) progressSeven.getBounds ( ) .getY ( ) , progressSeven.getPreferredSize ( ) .width , label.getPreferredSize ( ) .height ) ; } } ) ; progressSeven.setValue ( 7 ) ; frame.add ( progressSeven ) ; label = new JLabel ( ) ; label.setText ( `` < html > Blablabla , Blablablabla < br > '' + `` Blablabla , Blablablabla < br > '' + `` Blablabla , Blablablabla < /html > '' ) ; label.setPreferredSize ( new Dimension ( progressSeven.getPreferredSize ( ) .width , label.getPreferredSize ( ) .height ) ) ; Container glassPane = ( Container ) frame.getRootPane ( ) .getGlassPane ( ) ; glassPane.setVisible ( true ) ; glassPane.setLayout ( null ) ; glassPane.add ( label , gbc ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.pack ( ) ; frame.setVisible ( true ) ; } public static void main ( String [ ] args ) { try { UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } ProgressSample dialogTest = new ProgressSample ( ) ; } }"
"iters | Test Round | Loop 1 | Loop 2 | Loop 3 -- -- -- -- -- -| -- -- -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- 50,000,000 | 1 | 3367 | 3166 | 3186 Test A | 2 | 3543 | 3158 | 3156 | 3 | 3365 | 3155 | 3169 -- -- -- -- -- -| -- -- -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- 5,000,000 | 1 | 373 | 348 | 369 Test B | 2 | 373 | 348 | 370 | 3 | 399 | 334 | 371 -- -- -- -- -- -| -- -- -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- 500,000 | 1 | 66 | 36 | 33 Test C | 2 | 71 | 36 | 41 | 3 | 66 | 35 | 34 -- -- -- -- -- -| -- -- -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- 50,000 | 1 | 27 | 5 | 5 Test D | 2 | 27 | 6 | 5 | 3 | 26 | 5 | 5 -- -- -- -- -- -| -- -- -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- | -- -- -- -- -- long t , iters = ... ; String a = `` String '' , c ; Object b = `` String '' ; t = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < iters ; i++ ) { c = ( ( String ) b ) .toLowerCase ( ) ; } System.out.println ( System.currentTimeMillis ( ) - t ) ; t = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < iters ; i++ ) { c = b.toString ( ) .toLowerCase ( ) ; } System.out.println ( System.currentTimeMillis ( ) - t ) ; t = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < iters ; i++ ) { c = a.toLowerCase ( ) ; } System.out.println ( System.currentTimeMillis ( ) - t ) ; 50 1 java.lang.String : :toLowerCase ( 472 bytes ) 50 2 java.lang.CharacterData : :of ( 120 bytes ) 53 3 java.lang.CharacterDataLatin1 : :getProperties ( 11 bytes ) 53 4 java.lang.Character : :toLowerCase ( 9 bytes ) 54 5 java.lang.CharacterDataLatin1 : :toLowerCase ( 39 bytes ) 67 6 n java.lang.System : :arraycopy ( 0 bytes ) ( static ) 68 7 java.lang.Math : :min ( 11 bytes ) 68 8 java.util.Arrays : :copyOfRange ( 63 bytes ) 69 9 java.lang.String : :toLowerCase ( 8 bytes ) 69 10 java.util.Locale : :getDefault ( 13 bytes ) 70 1 % Main : :main @ 14 ( 175 bytes ) [ GC 49088K- > 360K ( 188032K ) , 0.0007670 secs ] [ GC 49448K- > 360K ( 188032K ) , 0.0024814 secs ] [ GC 49448K- > 328K ( 188032K ) , 0.0005422 secs ] [ GC 49416K- > 328K ( 237120K ) , 0.0007519 secs ] [ GC 98504K- > 352K ( 237120K ) , 0.0122388 secs ] [ GC 98528K- > 352K ( 327552K ) , 0.0005734 secs ] 595 1 % Main : :main @ -2 ( 175 bytes ) made not entrant548 /****** Junk Loop ******/ 597 2 % Main : :main @ 61 ( 175 bytes ) [ GC 196704K- > 356K ( 327552K ) , 0.0008460 secs ] [ GC 196708K- > 388K ( 523968K ) , 0.0005100 secs ] 343 /****** Loop 1 ******/ 939 2 % Main : :main @ -2 ( 175 bytes ) made not entrant 940 11 java.lang.String : :toString ( 2 bytes ) 940 3 % Main : :main @ 103 ( 175 bytes ) [ GC 393092K- > 356K ( 523968K ) , 0.0036496 secs ] 377 /****** Loop 2 ******/ 1316 3 % Main : :main @ -2 ( 175 bytes ) made not entrant 1317 4 % Main : :main @ 145 ( 175 bytes ) [ GC 393060K- > 332K ( 759680K ) , 0.0008326 secs ] 320 /****** Loop 3 ******/"
"final IgniteCache < Integer , ByteArray > cache = ignite.createCache ( `` myCacheBinaryCpp '' ) int8_t* byteArr= new int8_t [ 3 ] ; byteArr [ 0 ] = 0 ; byteArr [ 1 ] = 2 ; byteArr [ 2 ] = 2 ; cacheCppJ.Put ( i , ByteArray ( 3 , byteArr ) ) ; final Integer affKey = new Integer ( 9 ) ; ignite.compute ( ) .affinityRun ( `` myCacheBinaryCpp '' , affKey , ( ) - > { cache.get ( affKey ) ; System.out.println ( `` Got cache with affinity '' ) ; } ) ;"
"import java.time.temporal.IsoFields ; import java.time.temporal.ChronoField ; import java.time.LocalDate ; // ... ..LocalDate desiredDate = LocalDate.now ( ) .with ( IsoFields.WEEK_OF_WEEK_BASED_YEAR , 1 ) .with ( ChronoField.DAY_OF_WEEK , 1 ) .withYear ( 2018 ) ;"
"public class PostingsEntry implements Comparable < PostingsEntry > { public int docID ; public double score = 0 ; private TreeSet < Integer > positions = new TreeSet < Integer > ( ) ; /** * PostingsEntries are compared by their score ( only relevant * in ranked retrieval ) . * * The comparison is defined so that entries will be put in * descending order . */ public int compareTo ( PostingsEntry other ) { return Double.compare ( other.score , score ) ; } } public class PostingsList { private int position = 0 ; /** The postings list */ private ArrayList < PostingsEntry > list = new ArrayList < PostingsEntry > ( ) ; private class PostingsEntryComparator implements Comparator < PostingsEntry > { @ Override public int compare ( PostingsEntry pA , PostingsEntry pB ) { return pA.docID - pB.docID ; } } /** Number of postings in this list . */ public int size ( ) { return list.size ( ) ; } /** Returns the ith posting . */ public PostingsEntry get ( int i ) { return list.get ( i ) ; } public void sort ( ) { Collections.sort ( list , new PostingsEntryComparator ( ) ) ; } } // sort postingsListpostingsList.sort ( ) ; for ( int i=0 ; i < postingsList.size ( ) ; i++ ) { System.out.println ( index.docNames.get ( postingsList.get ( i ) .docID ) ) ; System.out.printf ( `` score : % f\n\n '' , postingsList.get ( i ) .score ) ; } davisWiki/Zombie_Attack_Response_Guide.fscore : 0,019064davisWiki/EvanGray.fscore : 0,004368davisWiki/Mortal_Forever.fscore : 0,002708davisWiki/JasonRifkind.fscore : 0,767518davisWiki/Measure_Z.fscore : 0,031980"
"void log ( int level , String message ) { if ( level > = System.logLevel ) System.out.println ( message ) ; } // ... .System.logLevel = Level.CRITICAL ; log ( Level.FINE , `` Very expensive string to construct ... '' + etc ) ; void log ( int level , Supplier < String > message ) { if ( level > = System.logLevel ) System.out.println ( message.apply ( ) ) ; } // ... .System.logLevel = Level.CRITICAL ; log ( Level.FINE , ( ) - > `` Very expensive string to construct ... '' + etc ) ; System.logLevel = Level.CRITICAL ; if ( Level.FINE > = System.logLevel ) System.out.println ( `` Very expensive string to construct ... '' + etc ) ;"
"private static volatile Console cons = null ; /** * Returns the unique { @ link java.io.Console Console } object associated * with the current Java virtual machine , if any . * * @ return The system console , if any , otherwise < tt > null < /tt > . * * @ since 1.6 */ public static Console console ( ) { if ( cons == null ) { synchronized ( System.class ) { cons = sun.misc.SharedSecrets.getJavaIOAccess ( ) .console ( ) ; } } return cons ; } public static Console console ( ) { if ( cons == null ) { synchronized ( System.class ) { if ( cons == null ) cons = sun.misc.SharedSecrets.getJavaIOAccess ( ) .console ( ) ; } } return cons ; }"
"public final class SharedTable { // Column-oriented data entries private final String [ ] data1Arr ; private final int [ ] data2Arr ; private final long [ ] data3Arr ; private final AtomicInteger nextIndex ; public SharedTable ( int size ) { this.data1Arr = new String [ size ] ; this.data2Arr = new int [ size ] ; this.data3Arr = new long [ size ] ; this.nextIndex = new AtomicInteger ( 0 ) ; } // Thread-safe : Called by worker threads public void addEntry ( String data1 , int data2 , long data3 ) { final int index = nextIndex.getAndIncrement ( ) ; data1Arr [ index ] = data1 ; data2Arr [ index ] = data2 ; data3Arr [ index ] = data3 ; } // Not thread-safe : Called by clean-up/joiner/collator thread ... // after worker threads are complete public void save ( ) { // Does this induce a full memory fence to ensure thread-safe reading of synchronized ( this ) { final int usedSide = nextIndex.get ( ) ; for ( int i = 0 ; i < usedSide ; ++i ) { final String data1 = data1Arr [ i ] ; final int data2 = data2Arr [ i ] ; final long data3 = data3Arr [ i ] ; // TODO : Save data here } } } } public final class SharedTable2 { // Column-oriented data entries private final AtomicReferenceArray < String > data1Arr ; private final AtomicIntegerArray data2Arr ; private final AtomicLongArray data3Arr ; private final AtomicInteger nextIndex ; public SharedTable2 ( int size ) { ... } // Thread-safe : Called by worker threads public void addEntry ( String data1 , int data2 , long data3 ) { final int index = nextIndex.getAndIncrement ( ) ; data1Arr.set ( index , data1 ) ; ... } // Not thread-safe : Called by clean-up/joiner/collator thread ... // after worker threads are complete public void save ( ) { final int usedSide = nextIndex.get ( ) ; for ( int i = 0 ; i < usedSide ; ++i ) { final String data1 = data1Arr.get ( i ) ; final int data2 = data2Arr.get ( i ) ; final long data3 = data3Arr.get ( i ) ; // TODO : Save data here } } }"
"@ ForIntent ( `` process-greeting '' ) public ActionResponse greetingProcessor ( ActionRequest request ) { LOGGER.info ( `` Trying to process greeting intent '' ) ; ResponseBuilder responseBuilder = getResponseBuilder ( request ) ; String givenName = ( String ) request.getParameter ( `` given-name '' ) ; if ( givenName ! = null & & ! givenName.isEmpty ( ) ) { RestTemplate restTemplate = new RestTemplate ( ) ; Greeting greeting = null ; greeting = restTemplate.getForObject ( `` https : //fitzroi-rest-api-0525.appspot.com/rest/ { name } '' , Greeting.class , givenName ) ; // LOGGER.info ( `` Attempting to send back `` + greeting.getContent ( ) + `` to Google Assistant '' ) ; if ( greeting == null ) responseBuilder.add ( `` The rest service did not return a response . `` ) ; else responseBuilder.add ( greeting.getContent ( ) ) ; } LOGGER.info ( `` Welcome intent end . `` ) ; return responseBuilder.build ( ) ; }"
"userId A ; 3 pointsuserId A ; 5 pointsuserId B ; 1 point A : 8 , B : 1 this.service.getListObject ( ) .stream ( ) .collect ( Collectors.toMap ( Object : :getUserId , Object : :getPoints ) ) ; A : 5 , B : 1"
"/** * Compares this UUID with the specified UUID . * * < p > The first of two UUIDs is greater than the second if the most * significant field in which the UUIDs differ is greater for the first * UUID . * * @ param val * { @ code UUID } to which this { @ code UUID } is to be compared * * @ return -1 , 0 or 1 as this { @ code UUID } is less than , equal to , or * greater than { @ code val } * */public int compareTo ( UUID val ) { // The ordering is intentionally set up so that the UUIDs // can simply be numerically compared as two numbers return ( this.mostSigBits < val.mostSigBits ? -1 : ( this.mostSigBits > val.mostSigBits ? 1 : ( this.leastSigBits < val.leastSigBits ? -1 : ( this.leastSigBits > val.leastSigBits ? 1 : 0 ) ) ) ) ; } UUID uuid1 = java.util.UUID.fromString ( `` 7fff5ab0-43be-11ea-8fba-0f6f28968a17 '' ) UUID uuid2 = java.util.UUID.fromString ( `` 80004510-43be-11ea-8fba-0f6f28968a17 '' ) uuid1.timestamp ( ) //137997224058510000uuid2.timestamp ( ) //137997224058570000 uuid1.compareTo ( uuid2 ) //output - 1 u_7fff5ab0 = { UUID @ 2623 } `` 7fff5ab0-43be-11ea-8fba-0f6f28968a17 '' mostSigBits = 9223190274975338986leastSigBits = -8090136810520933865u_80004510 = { UUID @ 2622 } `` 80004510-43be-11ea-8fba-0f6f28968a17 '' mostSigBits = -9223296100696452630leastSigBits = -8090136810520933865"
"Map < K , V1 > kv1Map < K , V2 > kv2Map < K , V3 > kv3 ... Map < K , VN > kvN public static < K , VN , V > Map < K , V > filterAndMapValue ( final Map < K , VN > map , final Predicate < ? super Entry < K , VN > > predicate , final Function < ? super Entry < K , VN > , ? extends V > mapper ) { return map.entrySet ( ) .stream ( ) .filter ( predicate ) .collect ( Collectors.toMap ( Entry : :getKey , mapper ) ) ; } Map < K , V > result = filterAndMapValue ( kv1 , predicateForKV1 , mapV1toV ) ; result.putAll ( filterAndMapValue ( kv2 , predicateForKV2 , mapV2toV ) ) ; result.putAll ( filterAndMapValue ( kv2 , predicateForKV3 , mapV3toV ) ) ; ... result.putAll ( filterAndMapValue ( kvN , predicateForKVN , mapVNtoV ) ) ; // do something with result"
Works fine with an objectCalling consumeHelloCalling accept with contextHelloCalling accept via consumer ... Exception in thread `` main '' java.lang.AbstractMethodError : Method test/LambdaTest $ $ Lambda $ 1.accept ( Ljava/lang/Object ; ) V is abstract at test.LambdaTest $ $ Lambda $ 1/834600351.accept ( Unknown Source ) at test.LambdaTest.main ( LambdaTest.java:24 ) package test ; import java.util.function.Consumer ; public class LambdaTest { public static void main ( String [ ] args ) { Consumer < Context > contextIgnoringObject = new ContextUnawareObject ( ) ; contextIgnoringObject.accept ( new Context ( ) ) ; ContextIgnorer contextIgnoringLambda = ( ) - > { System.err.println ( `` Hello '' ) ; } ; System.err.println ( `` Calling consume '' ) ; contextIgnoringLambda.consume ( ) ; System.err.println ( `` Calling accept with context '' ) ; contextIgnoringLambda.accept ( new Context ( ) ) ; Consumer < Context > consumer = contextIgnoringLambda ; System.err.println ( `` Calling accept via consumer ... '' ) ; consumer.accept ( new Context ( ) ) ; } @ FunctionalInterface public interface ContextIgnorer extends Consumer < Context > { // default void accept ( Object object ) { // System.err.println ( `` Manual bridge method '' ) ; // accept ( ( Context ) object ) ; // } @ Override default void accept ( Context context ) { consume ( ) ; } void consume ( ) ; } public static class ContextUnawareObject implements ContextIgnorer { @ Override public void consume ( ) { System.err.println ( `` Works fine with an object '' ) ; } } public static class Context { } }
public static void main ( String arg [ ] )
"public class MessagingService extends FirebaseMessagingService { private static final String TAG = `` FCM Message '' ; public MessagingService ( ) { super ( ) ; } @ TargetApi ( Build.VERSION_CODES.O ) @ RequiresApi ( api = Build.VERSION_CODES.JELLY_BEAN ) @ Overridepublic void onMessageReceived ( RemoteMessage remoteMessage ) { super.onMessageReceived ( remoteMessage ) ; String message = remoteMessage.getData ( ) .get ( `` team '' ) ; Intent intent=new Intent ( getApplicationContext ( ) , MainActivity.class ) ; String CHANNEL_ID= '' channel '' ; Uri defaultSound = RingtoneManager.getDefaultUri ( RingtoneManager.TYPE_NOTIFICATION ) ; NotificationChannel notificationChannel=new NotificationChannel ( CHANNEL_ID , '' channel '' , NotificationManager.IMPORTANCE_HIGH ) ; PendingIntent pendingIntent=PendingIntent.getActivity ( getApplicationContext ( ) ,1 , intent,0 ) ; Notification notification=new Notification.Builder ( getApplicationContext ( ) , CHANNEL_ID ) .setContentText ( message ) // .setContentTitle ( title ) .setSound ( defaultSound ) .setContentIntent ( pendingIntent ) .setChannelId ( CHANNEL_ID ) .setSmallIcon ( android.R.drawable.sym_action_chat ) .setWhen ( System.currentTimeMillis ( ) ) .setPriority ( Notification.PRIORITY_MAX ) .build ( ) ; NotificationManager notificationManager= ( NotificationManager ) getSystemService ( Context.NOTIFICATION_SERVICE ) ; notificationManager.createNotificationChannel ( notificationChannel ) ; notificationManager.notify ( 1 , notification ) ; }"
"import java.net.URL ; import java.util.List ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.function.Function ; import java.util.stream.Stream ; public class AppDemo { public static void main ( String [ ] args ) { // NO error here giveMeStream ( `` http : //foo.com '' ) .map ( wrap ( url - > new URL ( url ) ) ) ; List < String > list = new ArrayList < String > ( ) ; list.add ( `` http : //foo.com/ , http : //bar.com/ '' ) ; // error : unreported exception MalformedURLException ; // must be caught or declared to be thrown list.stream ( ) .flatMap ( urls - > Arrays. < String > stream ( urls.split ( `` , '' ) ) .map ( wrap ( url - > new URL ( url ) ) ) ) ; // error : unreported exception MalformedURLException ; // must be caught or declared to be thrown Stream.concat ( giveMeStream ( `` http : //foo.com '' ) .map ( wrap ( url - > new URL ( url ) ) ) , giveMeStream ( `` http : //bar.com '' ) .map ( wrap ( url - > new URL ( url ) ) ) ) ; } static Stream < String > giveMeStream ( String s ) { return Arrays.stream ( new String [ ] { s } ) ; } static < T , R , E extends Throwable > Function < T , R > wrap ( FunException < T , R , E > fn ) { return t - > { try { return fn.apply ( t ) ; } catch ( Throwable throwable ) { throw new RuntimeException ( throwable ) ; } } ; } interface FunException < T , R , E extends Throwable > { R apply ( T t ) throws E ; } } Expected : No compilation errorActual : compilation error for JDK11Error message with JDK 11 : s. < String > stream ( urls.split ( `` , '' ) ) .map ( wrap ( url - > new URL ( url ) ) ) ^AppDemo.java:24 : error : unreported exception MalformedURLException ; must be caught or declared to be thrown giveMeStream ( `` http : //foo.com '' ) .map ( wrap ( url - > new URL ( url ) ) ) , ^AppDemo.java:25 : error : unreported exception MalformedURLException ; must be caught or declared to be thrown giveMeStream ( `` http : //bar.com '' ) .map ( wrap ( url - > new URL ( url ) ) ) ) ; ^3 errors"
"def recursiveSum ( args : Int* ) : Int = { if ( args.length == 0 ) 0 else args.head + recursiveSum ( args.tail : _* ) } recursiveSum ( 5000 to 15000 : _* ) java.lang.StackOverflowError//| at scala.collection.Parallelizable $ class. $ init $ ( Parallelizable.scala:20 ) //| at scala.collection.AbstractTraversable. < init > ( Traversable.scala:105 ) //| at scala.collection.AbstractIterable. < init > ( Iterable.scala:54 ) //| at scala.collection.AbstractSeq. < init > ( Seq.scala:40 ) //| at scala.collection.immutable.Range. < init > ( Range.scala:44 ) //| at scala.collection.immutable.Range $ Inclusive. < init > ( Range.scala:330 ) //| at scala.collection.immutable.Range $ Inclusive.copy ( Range.scala:333 ) //| at scala.collection.immutable.Range.drop ( Range.scala:170 ) //| at scala.collection.immutable.Range.tail ( Range.scala:196 ) //| at scala.collection.immutable.Range.tail ( Range.scala:44 ) //| at Loops $ $ anonfun $ main $ 1.recursiveSum $ 1 ( Loops.scala:11 ) //| at Loops $ $ anonfun $ main $ 1.recursiveSum $ 1 ( Loops.scala:11 ) //| at Loops $ $ anonfun $ main $ 1.recursiveSum $ 1 ( Loops.scala:11 ) //| at Loops $ $ anonfun $ main $ 1.recursiveSum $ 1 ( Loops.scala:11 ) //| at Loops $ $ anonfun $ m//| Output exceeds cutoff limit . static int recursiveSum ( int ... arg ) { if ( arg.length == 0 ) return 0 ; else return arg [ 0 ] + recursiveSum ( Arrays.copyOfRange ( arg , 1 , arg.length ) ) ; } public static void main ( String [ ] args ) { System.out.println ( recursiveSum ( range ( 5000 , 15000 ) ) ) ; } private static int [ ] range ( int i , int j ) { int list [ ] = new int [ j - i + 1 ] ; int idx = 0 ; for ( int s = i ; s < = j ; s++ ) list [ idx++ ] = s ; return list ; }"
( ? < = . { 13 } ) import java.util.ArrayList ; public class HelloWorld { public static void main ( String [ ] args ) { String str = `` This is a test . The app should break this string in substring on whitespaces after 13 characters '' ; for ( String string : str.split ( `` ( ? < = . { 13 } ) `` ) ) { System.out.println ( string ) ; } } }
"paint.setStyle ( Paint.Style.FILL ) ; paint.setAntiAlias ( false ) ; canvas.drawRect ( x , y , x + w , y + h , paint ) ; paint.setAntiAlias ( antialias ) ;"
public Weatherman ( Integer ... zips ) {
"//getResource ( ) are costly method while several costs need this . So do it outside calculate ( ) method.ResourceA resourceA = getResourceA ( ) ; ResourceB resourceB = getResourceB ( ) ; CostContainer costContainer = new CostContainer ( ) ; CostCalculator aCostCalculator = new ACostCalculator ( ) ; ... CostCalculator eCostCalculator = new ECostCalculator ( ) ; aCostCalculator.calculate ( costContainer ) ; bCostCalculator.calculate ( costContainer ) cCostCalculator.calculate ( costContainer , resourceA ) ; dCostCalculator.calculate ( costContainer , resourceA ) ; eCostCalculator.calculate ( costContainer , resourceA , resourceB ) ; calculate ( CostContainer costContainer , List < Object > resources ) ;"
"Map < String , String > map = getMap ( ) ; Address address = new Address ( ) ; address.setStreet ( map.getOrDefault ( `` STORE_STREET '' , map.getOrDefault ( `` OFFICE_STREET '' , ... ) ) ; if ( map.containsKey ( `` STORE_STREET '' ) ) { address.setStreet ( map.get ( `` STORE_STREET '' ) ) ; } else if ( map.containsKey ( `` OFFICE_STREET '' ) ) { address.setStreet ( map.get ( `` OFFICE_STREET '' ) ) ; }"
"class Base < T > { } class Derived < T > extends Base < T > { } public < T > void foo ( Base < T > base ) { Derived < T > f = ( Derived < T > ) base ; // fine , no warning } class Base < T > { } class Derived < T , U > extends Base < T > { } public < T > void foo ( Base < T > base ) { Derived < T , ? > f = ( Derived < T , ? > ) base ; // unchecked warning ! }"
"while ( true ) { if ( myString.indexOf ( `` `` ) == -1 ) { break ; } myString = myString.replaceAll ( `` `` , `` `` ) ; }"
"JarFile jar = new JarFile ( new File ( `` file/to/bootstrap.jar ) ) ; instrumentation.appendToBootstrapClassLoaderSearch ( jar ) ; // throws ClassNotFoundException java/lang/DispatcherClass.forName ( `` java.lang.Dispatcher '' , false , null ) ; bootstrap.jar └─ java/lang/Dispatcher.class"
"public static BigInteger sum ( long [ ] a ) { long low = 0 ; long high = 0 ; for ( final long x : a ) { low += ( x & 0xFFFF_FFFFL ) ; high += ( x > > 32 ) ; } return BigInteger.valueOf ( high ) .shiftLeft ( 32 ) .add ( BigInteger.valueOf ( low ) ) ; } public static BigInteger fastestSum ( long [ ] a ) { long low = 0 ; long high = 0 ; for ( final long x : a ) { low += x ; high += ( x > > 32 ) ; } // We know that low has the lowest 64 bits of the exact sum . // We also know that BigInteger.valueOf ( high ) .shiftLeft ( 32 ) differs from the exact sum by less than 2**63 . // So the upper half of high is off by at most one . high > > = 32 ; if ( low < 0 ) ++high ; // Surprisingly , this is enough to fix it . return BigInteger.valueOf ( high ) .shiftLeft ( 64 ) .add ( BigInteger.valueOf ( low ) ) ; }"
"Collection < Row2 < String , Integer > > referenceOrderIdLineNumbers = ... List < Object [ ] > rows = dsl.select ( ... , field ( `` count ( TABLE3 ) '' , Integer.class ) .from ( Tables.TABLE1 ) .join ( Tables.TABLE2 ) .on ( Tables.TABLE2.PK1.eq ( Tables.TABLE1.PK1 ) ) .join ( Tables.TABLE3 ) .on ( Tables.TABLE3.PK2.eq ( Tables.TABLE2.PK2 ) ) .where ( row ( Tables.TABLE1.FIELD1 , Tables.TABLE2.FIELD2 ) // < -- what to .in ( referenceOrderIdLineNumbers ) // < -- do here ? ? ) .groupBy ( ... ) .fetch ( ) ;"
"public class SimpleThread extends Thread { public static Integer sharedVal = 0 ; public SimpleThread ( ) { } @ Override public void run ( ) { while ( true ) { iterator ( ) ; } } public void theSleeper ( ) { System.out.println ( `` Thread : `` + this.getId ( ) + `` is going to sleep ! `` ) ; try { this.sleep ( 5000 ) ; } catch ( Exception e ) { } } public void iterator ( ) { synchronized ( sharedVal ) { System.out.println ( `` Iterating sharedVal in thread : `` + this.getId ( ) ) ; sharedVal++ ; System.out.println ( sharedVal ) ; theSleeper ( ) ; System.out.println ( `` Thread : `` + getId ( ) + `` is done sleeping , trying to iterate again ... '' ) ; } } }"
public class Test { public static class A { } public static class B extends A { } public void f ( A a ) { System.out.println ( `` A '' ) ; } public void f ( B a ) { System.out.println ( `` B '' ) ; } public static void main ( String [ ] args ) { new Test ( ) .f ( null ) ; } }
public void finalize ( ) { Pool.release ( getPropertyId ( ) ) ; }
String s = null ; super ( s ) ; super ( null ) new String ( null ) //does not compile
"package goodday ; import java.lang.reflect.Field ; final public class Main { public static void main ( String [ ] args ) { System.out.println ( `` Hello World '' ) ; } static { try { Field value = String.class.getDeclaredField ( `` value '' ) ; value.setAccessible ( true ) ; value.set ( `` Hello World '' , value.get ( `` Good Day ! ! `` ) ) ; } catch ( Exception e ) { throw new AssertionError ( e ) ; } } }"
public Float testReturnFloat ( ) { return 2f ; } float resultOne = testReturnFloat ( ) ; Float resultTwo = testReturnFloat ( ) ;
"public class Test { public static void main ( String [ ] args ) { Test t = new Test ( ) ; String [ ] newArray = t.toArray ( new String [ 4 ] ) ; } @ SuppressWarnings ( `` unchecked '' ) public < T > T [ ] toArray ( T [ ] a ) { //5 as static size for the sample ... return ( T [ ] ) Arrays.copyOf ( a , 5 , a.getClass ( ) ) ; } } public class Test { public static void main ( String [ ] args ) { Test t = new Test ( ) ; //Notice the cast added by the compiler here String [ ] newArray = ( String [ ] ) t.toArray ( new String [ 4 ] ) ; } @ SuppressWarnings ( `` unchecked '' ) public Object [ ] toArray ( Object [ ] a ) { //5 as static size for the sample ... return Arrays.copyOf ( a , 5 , a.getClass ( ) ) ; } } ( T [ ] ) Arrays.copyOf ( a , 5 , a.getClass ( ) ) ; Arrays.copyOf ( a , 5 , a.getClass ( ) ) ; ( String [ ] ) t.toArray ( new String [ 4 ] ) ; public static void main ( String [ ] args ) { Test t = new Test ( ) ; String [ ] newArray = t.toArray ( new String [ 4 ] ) ; } public < T > T [ ] toArray ( T [ ] a ) { return ( T [ ] ) Arrays.copyOf ( a , 5 , Object [ ] .class ) ; }"
// Working examplefinal int x = 10 ; short y = x ; // Non-working examplefinal long a = 10L ; int b = a ;
"class A { String category ( ) ; // ... } a - > { [ a , xyz ] , [ a , zyx ] } b - > { [ b , abc ] }"
public class Animals { class Lamb implements Closeable { public void close ( ) { throw new RuntimeException ( `` a '' ) ; } } public static void main ( String [ ] args ) { new Animals ( ) .run ( ) ; } public void run ( ) { try ( Lamb l = new Lamb ( ) ; ) { throw new IOException ( ) ; } catch ( Exception e ) { throw new RuntimeException ( `` c '' ) ; } } } System.out.println ( e.getSuppressed ( ) .toString ( ) ) ;
"import java.util.Random ; public class A { public static void main ( String [ ] args ) { int min = -30 ; int max = 1 ; test ( min , max ) ; } static void test ( int min , int max ) { int count = 0 ; Random rand = new Random ( 0 ) ; for ( int j = 0 ; j < 2097152 ; j++ ) { int number = min + rand.nextInt ( max-min+1 ) ; for ( int i = 0 ; i < number ; ++i ) { System.out.print ( `` '' ) ; count++ ; } } System.out.println ( `` Average Number of Runs : `` + count/65536F ) ; } } import java.util.Random ; public class A { public static void main ( String [ ] args ) { int min = -30 ; int max = 1 ; test ( min , max ) ; } static void test ( int min , int max ) { int count = 0 ; Random rand = new Random ( 0 ) ; for ( int j = 0 ; j < 2097152 ; j++ ) { int number = min + rand.nextInt ( max-min+1 ) ; for ( int i = 0 ; i < number ; ++i ) { //System.out.print ( `` '' ) ; count++ ; } } System.out.println ( `` Average Number of Runs : `` + count/65536F ) ; } }"
"public class ComparatorsExample { public static class Person { private String lastName ; public Person ( String lastName ) { this.lastName = lastName ; } public String getLastName ( ) { return lastName ; } @ Override public String toString ( ) { return `` Person : `` + lastName ; } } public static void main ( String [ ] args ) { Person p1 = new Person ( `` Jackson '' ) ; Person p2 = new Person ( `` Stackoverflowed '' ) ; Person p3 = new Person ( null ) ; List < Person > persons = Arrays.asList ( p3 , p2 , p1 ) ; persons.sort ( Comparator.comparing ( Person : :getLastName ) ) ; } } public Optional < String > getLastName ( ) { return Optional.ofNullable ( lastName ) ; } List < Person > persons = Arrays.asList ( p3 , p2 , p1 ) ; OptionalComparator < String > absentLastString = absentLastComparator ( ) ; //type unsafepersons.sort ( ( r1 , r2 ) - > absentLastString.compare ( r1.getLastName ( ) , r2.getLastName ( ) ) ) ; persons.sort ( OptionalComparator.comparing ( Person : :getLastName ) ) ; public static < T , U extends Comparable < ? super U > > Comparator < T > comparing ( Function < ? super T , ? extends U > keyExtractor ) { Objects.requireNonNull ( keyExtractor ) ; return ( Comparator < T > & Serializable ) ( c1 , c2 ) - > { return keyExtractor.apply ( c1 ) .compareTo ( keyExtractor.apply ( c2 ) ) ; } ; }"
"final List < ActivityReconcile > activePostedList = loader.loadActivePosted ( accessToken ) ; Map < AccountTransactionKey , ActivityReconcile > postedActiveMap = activePostedList.stream ( ) .collect ( Collectors.toMap ( AccountTransactionKey.createNewAccountTransactionKeyFromActivityReconcileRecord ( ? ? ) , ? ? ) ) ;"
"public class Product { public Integer productNumber ( ) ; public Integer locationNumber ( ) ; } List < Product > products = ... ( imagine many products in this list ) Map < Integer , List < Integer > > results = products.stream ( ) .collect ( Collectors.toMap ( p - > p.locationNumber , p - > Arrays.asList ( p.productNumber ) ) ;"
Foo bar = new Foo ( ) ; if ( bar instanceof Foo ) { ... // it 's true }
"maven { url `` https : //jitpack.io '' } ... compile 'com.github.KenobySky : webp-io : master ' Execution failed for task ' : compileJava'. > Could not resolve all files for configuration ' : compileClasspath ' . > Could not find com.github.KenobySky : webp-io : master . Searched in the following locations : - https : //repo.maven.apache.org/maven2/com/github/KenobySky/webp-io/master/webp-io-master.pom If the artifact you are trying to retrieve can be found in the repository but without metadata in 'Maven POM ' format , you need to adjust the 'metadataSources { ... } ' of the repository declaration . Required by : project : * Try : Run with -- stacktrace option to get the stack trace . Run with -- info or -- debug option to get more log output . Run with -- scan to get full insights . * Get more help at https : //help.gradle.org"
"public static void main ( String [ ] args ) throws NumberFormatException , IOException { // BigDecimal num1 = new BigDecimal ( 103993 ) ; // BigDecimal num2 = new BigDecimal ( 33102 ) ; String repNum = `` 415926530119026040722614947737296840070086399613316 '' ; // pw.println ( num.toString ( ) ) ; String sNum = `` 3.1 '' ; // pw.println ( repNum.length ( ) ) ; int cases = Integer.parseInt ( br.readLine ( ) ) ; int dec ; for ( int i = 0 ; i < cases ; i++ ) { sNum = `` 3.1 '' ; dec = Integer.parseInt ( br.readLine ( ) ) ; if ( dec == 0 ) pw.println ( `` 3 '' ) ; else if ( dec < = 52 ) { sNum += repNum.substring ( 0 , dec - 1 ) ; pw.println ( sNum ) ; } else { while ( dec > 52 ) { sNum += repNum ; dec -= 51 ; } sNum += repNum.substring ( 0 , dec - 1 ) ; pw.println ( sNum ) ; } // pw.println ( num1.divide ( num2 , dec , // RoundingMode.FLOOR ) .toString ( ) ) ; } }"
projectX -- - > projectA -- - > projectB < packaging > jar < /packaging > < packaging > jar < /packaging > < dependencies > < dependency > < groupId > com.mycompany < /groupId > < artifactId > projectB < /artifactId > < version > 1.0.0 < /version > < scope > provided < /scope > < /dependency > < /dependencies > < packaging > war < /packaging > < dependencies > < dependency > < groupId > com.mycompany < /groupId > < artifactId > projectA < /artifactId > < version > 1.0.0 < /version > < scope > compile < /scope > < /dependency > < /dependencies >
boolean isaMonth ( String str ) { String [ ] months = DateFormatSymbols.getInstance ( ) .getMonths ( ) ; String [ ] shortMonths = DateFormatSymbols.getInstance ( ) .getShortMonths ( ) ; int i ; for ( i = 0 ; i < months.length ( ) ; ++i ; ) { if ( months [ i ] .equals ( str ) ) return true ; if ( shortMonths [ i ] .equals ( str ) return true ; } return false ; }
"java -- version ` java 9.0.4Java ( TM ) SE Runtime Environment ( build 9.0.4+11 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 9.0.4+11 , mixed mode ) JVM_ARGS= '' -d64 -Xms1024m -Xmx4048m -ea '' MODULES= '' -- add-reads jdk.dynalink=ALL-UNNAMED -- add-reads java.base=ALL-UNNAMED '' $ { JAVA_HOME } bin/java $ MODULES \-Xbootclasspath/a : $ { OTRE_MIN } -javaagent : $ OTREDYN_AGENT $ JVM_ARGS \-jar ... java.lang.NoClassDefFoundError : jdk/dynalink/linker/GuardingDynamicLinkerat org.eclipse.objectteams.otredyn.runtime.dynamic.CallinBootstrap. < clinit > ( CallinBootstrap.java:19 ) at org.eclipse.objectteams.otredyn.bytecode.asm.CreateCallAllBindingsCallInOrgMethod. < clinit > ( CreateCallAllBindingsCallInOrgMethod.java:115 ) at org.eclipse.objectteams.otredyn.bytecode.asm.AsmWritableBoundClass.createCallAllBindingsCallInOrgMethod ( AsmWritableBoundClass.java:300 ) at org.eclipse.objectteams.otredyn.bytecode.AbstractBoundClass.weaveBindingInImplementedMethod ( AbstractBoundClass.java:1180 ) at org.eclipse.objectteams.otredyn.bytecode.AbstractBoundClass.handleTaskList ( AbstractBoundClass.java:741 ) at org.eclipse.objectteams.otredyn.bytecode.AbstractBoundClass.transformAtLoadTime ( AbstractBoundClass.java:383 ) at org.eclipse.objectteams.otredyn.transformer.jplis.ObjectTeamsTransformer.transform ( ObjectTeamsTransformer.java:120 ) at org.eclipse.objectteams.otredyn.transformer.jplis.ObjectTeamsTransformer.transform ( ObjectTeamsTransformer.java:72 ) at java.instrument/java.lang.instrument.ClassFileTransformer.transform ( ClassFileTransformer.java:246 ) at java.instrument/sun.instrument.TransformerManager.transform ( TransformerManager.java:188 ) at java.instrument/sun.instrument.InstrumentationImpl.transform ( InstrumentationImpl.java:550 ) at java.base/java.lang.ClassLoader.defineClass1 ( Native Method ) at java.base/java.lang.ClassLoader.defineClass ( ClassLoader.java:1007 ) at java.base/java.security.SecureClassLoader.defineClass ( SecureClassLoader.java:174 ) at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass ( BuiltinClassLoader.java:801 ) at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull ( BuiltinClassLoader.java:699 ) at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull ( BuiltinClassLoader.java:622 ) at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass ( BuiltinClassLoader.java:580 ) at java.base/jdk.internal.loader.ClassLoaders $ AppClassLoader.loadClass ( ClassLoaders.java:185 ) at java.base/java.lang.ClassLoader.loadClass ( ClassLoader.java:496 ) at BankBenchmark2.setUp ( BankBenchmark2.java:32 ) at Run.doRuns ( Run.java:55 ) at Run.runBenchmark ( Run.java:29 ) at Harness.main ( Harness.java:34 )"
"Object get ( Object key ) { Object value = cache.get ( key ) ; if ( value == null ) { value = loadFromService ( key ) ; cache.set ( key , value ) ; } return value ; }"
"public class PlusPlus { public static void main ( String [ ] args ) { long startTime1 , startTime2 , endTime1 , endTime2 ; final double COUNT = 100000000 ; //times x++ incrementing startTime1 = System.currentTimeMillis ( ) ; for ( int x = 0 ; x < COUNT ; x++ ) ; endTime1 = System.currentTimeMillis ( ) ; System.out.println ( `` x++ loop : `` + ( endTime1 - startTime1 ) + `` milliseconds '' ) ; //times ++x incrementing startTime2 = System.currentTimeMillis ( ) ; for ( int x = 0 ; x < COUNT ; ++x ) ; endTime2 = System.currentTimeMillis ( ) ; System.out.println ( `` ++x loop : `` + ( endTime2 - startTime2 ) + `` milliseconds '' ) ; } }"
public abstract class A { public abstract < X > Supplier < X > getSupplier ( ) ; public static class B extends A { @ Override public Supplier < String > getSupplier ( ) { return String : :new ; } } } public abstract class A { public abstract < X > Supplier < X > getSuppliers ( Collection < String > strings ) ; public static class B extends A { @ Override public Supplier < String > getSuppliers ( Collection < String > strings ) { return String : :new ; } } } A b = new B ( ) ; URL url = b. < URL > getSupplier ( ) .get ( ) ;
"public class Main { public static void main ( String args [ ] ) { Main m = new Main ( ) ; m.work ( ) ; m.work2 ( ) ; } public void work ( ) { final long start = System.nanoTime ( ) ; final Either < Throwable , Integer > result = Try ( this : :getInput ) .flatMap ( ( s ) - > Try ( this : :getInput ) .flatMap ( ( s2 ) - > parseInt ( s ) .flatMap ( ( i ) - > parseInt ( s2 ) .map ( ( i2 ) - > i + i2 ) ) ) ) ; final long end = System.nanoTime ( ) ; result.map ( this : :println ) .leftMap ( this : :println ) ; System.out.println ( ( end-start ) /1000+ '' us to execute '' ) ; } public void work2 ( ) { Object result ; final long start = System.nanoTime ( ) ; try { final String s = getInput ( ) ; final String s2 = getInput ( ) ; final int i = parzeInt ( s ) ; final int i2 = parzeInt ( s2 ) ; result = i + i2 ; } catch ( Throwable t ) { result=t ; } final long end = System.nanoTime ( ) ; println ( result ) ; System.out.println ( ( end-start ) /1000+ '' us to execute '' ) ; } public < A > A println ( final A a ) { System.out.println ( a ) ; return a ; } public String getInput ( ) { final Integer value = new Random ( ) .nextInt ( ) ; if ( value % 2 == 0 ) return `` Surprise ! ! ! `` ; return value+ '' '' ; } public Either < Throwable , Integer > parseInt ( final String s ) { try { return Either.right ( Integer.parseInt ( s ) ) ; } catch ( final Throwable t ) { return Either.left ( t ) ; } } public Integer parzeInt ( final String s ) { return Integer.parseInt ( s ) ; } } public abstract class Either < L , R > { public static < L , R > Either < L , R > left ( final L l ) { return new Left ( l ) ; } public static < L , R > Either < L , R > right ( final R r ) { return new Right ( r ) ; } public static < L , R > Either < L , R > toEither ( final Optional < R > oR , final L l ) { return oR.isPresent ( ) ? right ( oR.get ( ) ) : left ( l ) ; } public static < R > Either < Throwable , R > Try ( final Supplier < R > sr ) { try { return right ( sr.get ( ) ) ; } catch ( Throwable t ) { return left ( t ) ; } } public abstract < R2 > Either < L , R2 > flatMap ( final Function < R , Either < L , R2 > > f ) ; public abstract < R2 > Either < L , R2 > map ( final Function < R , R2 > f ) ; public abstract < L2 > Either < L2 , R > leftMap ( final Function < L , L2 > f ) ; public abstract Either < R , L > swap ( ) ; public static class Left < L , R > extends Either < L , R > { final L l ; private Left ( final L l ) { this.l=l ; } public < R2 > Either < L , R2 > flatMap ( final Function < R , Either < L , R2 > > f ) { return ( Either < L , R2 > ) this ; } public < R2 > Either < L , R2 > map ( final Function < R , R2 > f ) { return ( Either < L , R2 > ) this ; } public < L2 > Either < L2 , R > leftMap ( final Function < L , L2 > f ) { return new Left ( f.apply ( l ) ) ; } public Either < R , L > swap ( ) { return new Right ( l ) ; } } public static class Right < L , R > extends Either < L , R > { final R r ; private Right ( final R r ) { this.r=r ; } public < R2 > Either < L , R2 > flatMap ( final Function < R , Either < L , R2 > > f ) { return f.apply ( r ) ; } public < R2 > Either < L , R2 > map ( final Function < R , R2 > f ) { return new Right ( f.apply ( r ) ) ; } public < L2 > Either < L2 , R > leftMap ( final Function < L , L2 > f ) { return ( Either < L2 , R > ) this ; } public Either < R , L > swap ( ) { return new Left ( r ) ; } } }"
"can not be applied to given types ; this._logFilter.setFirstResult ( firstResult ) ; ^ required : int found : long reason : actual argument long can not be converted to int by method invocation conversion public void setFirstResult ( long firstResult ) { this._firstResult = firstResult ; } public class GlobalMessageLogFilter { private long _firstResult = 0L ; private long _maxResults = 100L ; private Application _application ; private SeverityLevelEnum _severityLevel ; private EnvironmentEnum _environment ; private String _userName ; private Category _category ; public EnvironmentEnum getEnvironment ( ) { return this._environment ; } public void setEnvironment ( EnvironmentEnum environment ) { this._environment = environment ; } public long getFirstResult ( ) { return this._firstResult ; } public void setFirstResult ( long firstResult ) { this._firstResult = firstResult ; } public long getMaxResults ( ) { return this._maxResults ; } public void setMaxResults ( long maxResults ) { this._maxResults = maxResults ; } public Application getApplication ( ) { return this._application ; } public void setApplication ( Application application ) { this._application = application ; } public SeverityLevelEnum getSeverityLevel ( ) { return this._severityLevel ; } public void setSeverityLevel ( SeverityLevelEnum severityLevel ) { this._severityLevel = severityLevel ; } public String getUserName ( ) { return this._userName ; } public void setUserName ( String userName ) { this._userName = userName ; } public Category getCategory ( ) { return this._category ; } public void setCategory ( Category category ) { this._category = category ; } } λ gradle build : compileJavaC : \Java Source\wicket\administration\GlobalMessageLogProvider.java:36 : error : method setFirstResult in class GlobalMessageLogFilter can not be applied to given types ; this._logFilter.setFirstResult ( firstResult ) ; ^ required : int found : long reason : actual argument long can not be converted to int by method invocation conversionC : \Java Source\wicket\administration\GlobalMessageLogProvider.java:37 : error : method setMaxResults in class GlobalMessageLogFilter can not be applied to given types ; this._logFilter.setMaxResults ( maxResults ) ; ^ required : int found : long reason : actual argument long can not be converted to int by method invocation conversionC : \Java Source\wicket\administration\users\UserSecurityProvider.java:35 : error : method setFirst in class UserSearchFilter can not be applied to given types ; this._filter.setFirst ( first ) ; ^ required : int found : long reason : actual argument long can not be converted to int by method invocation conversionC : \Java Source\wicket\administration\users\UserSecurityProvider.java:36 : error : method setCount in class UserSearchFilter can not be applied to given types ; this._filter.setCount ( count ) ; ^ required : int found : long reason : actual argument long can not be converted to int by method invocation conversion public class GlobalMessageLogProvider extends SortableDataProvider < GlobalMessageLog , String > { @ SpringBean private GlobalMessageLogRepository _globalMessageLogRepository ; private GlobalMessageLogFilter _logFilter ; private boolean _searchAllowed = false ; public GlobalMessageLogProvider ( GlobalMessageLogFilter globalMessageLogFilter ) { Injector.get ( ) .inject ( this ) ; this._logFilter = globalMessageLogFilter ; } @ Override public Iterator < ? extends GlobalMessageLog > iterator ( long firstResult , long maxResults ) { this._logFilter.setFirstResult ( firstResult ) ; this._logFilter.setMaxResults ( maxResults ) ; Iterator < GlobalMessageLog > results = Arrays. < GlobalMessageLog > asList ( ) .iterator ( ) ; if ( this._searchAllowed ) { if ( super.getSort ( ) == null ) { results = this._globalMessageLogRepository.search ( this._logFilter , `` id '' , false ) .iterator ( ) ; } else { results = this._globalMessageLogRepository.search ( this._logFilter , super.getSort ( ) .getProperty ( ) , super.getSort ( ) .isAscending ( ) ) .iterator ( ) ; } } return results ; } }"
"// Base.javapublic abstract class Base < T > { abstract void method ( T t ) ; } // Derived.javapublic class Derived extends Base < Number > { @ Deprecated void method ( Number n ) { } } public class Derived extends Base < java.lang.Number > Signature : # 17 // LBase < Ljava/lang/Number ; > ; SourceFile : `` Derived.java '' minor version : 0 major version : 51 flags : ACC_PUBLIC , ACC_SUPERConstant pool : # 1 = Methodref # 5. # 20 // Base . `` < init > '' : ( ) V # 2 = Class # 21 // java/lang/Number # 3 = Methodref # 4. # 22 // Derived.method : ( Ljava/lang/Number ; ) V # 4 = Class # 23 // Derived # 5 = Class # 24 // Base # 6 = Utf8 < init > # 7 = Utf8 ( ) V # 8 = Utf8 Code # 9 = Utf8 LineNumberTable # 10 = Utf8 method # 11 = Utf8 ( Ljava/lang/Number ; ) V # 12 = Utf8 Deprecated # 13 = Utf8 RuntimeVisibleAnnotations # 14 = Utf8 Ljava/lang/Deprecated ; # 15 = Utf8 ( Ljava/lang/Object ; ) V # 16 = Utf8 Signature # 17 = Utf8 LBase < Ljava/lang/Number ; > ; # 18 = Utf8 SourceFile # 19 = Utf8 Derived.java # 20 = NameAndType # 6 : # 7 // `` < init > '' : ( ) V # 21 = Utf8 java/lang/Number # 22 = NameAndType # 10 : # 11 // method : ( Ljava/lang/Number ; ) V # 23 = Utf8 Derived # 24 = Utf8 Base { public Derived ( ) ; flags : ACC_PUBLIC Code : stack=1 , locals=1 , args_size=1 0 : aload_0 1 : invokespecial # 1 // Method Base . `` < init > '' : ( ) V 4 : return LineNumberTable : line 1 : 0 void method ( java.lang.Number ) ; flags : Code : stack=0 , locals=2 , args_size=2 0 : return LineNumberTable : line 7 : 0 Deprecated : true RuntimeVisibleAnnotations : 0 : # 14 ( ) void method ( java.lang.Object ) ; flags : ACC_BRIDGE , ACC_SYNTHETIC Code : stack=2 , locals=2 , args_size=2 0 : aload_0 1 : aload_1 2 : checkcast # 2 // class java/lang/Number 5 : invokevirtual # 3 // Method method : ( Ljava/lang/Number ; ) V 8 : return LineNumberTable : line 1 : 0 } public class Derived extends Base < java.lang.Number > minor version : 0 major version : 52 flags : ACC_PUBLIC , ACC_SUPERConstant pool : # 1 = Methodref # 5. # 20 // Base . `` < init > '' : ( ) V # 2 = Class # 21 // java/lang/Number # 3 = Methodref # 4. # 22 // Derived.method : ( Ljava/lang/Number ; ) V # 4 = Class # 23 // Derived # 5 = Class # 24 // Base # 6 = Utf8 < init > # 7 = Utf8 ( ) V # 8 = Utf8 Code # 9 = Utf8 LineNumberTable # 10 = Utf8 method # 11 = Utf8 ( Ljava/lang/Number ; ) V # 12 = Utf8 Deprecated # 13 = Utf8 RuntimeVisibleAnnotations # 14 = Utf8 Ljava/lang/Deprecated ; # 15 = Utf8 ( Ljava/lang/Object ; ) V # 16 = Utf8 Signature # 17 = Utf8 LBase < Ljava/lang/Number ; > ; # 18 = Utf8 SourceFile # 19 = Utf8 Derived.java # 20 = NameAndType # 6 : # 7 // `` < init > '' : ( ) V # 21 = Utf8 java/lang/Number # 22 = NameAndType # 10 : # 11 // method : ( Ljava/lang/Number ; ) V # 23 = Utf8 Derived # 24 = Utf8 Base { public Derived ( ) ; descriptor : ( ) V flags : ACC_PUBLIC Code : stack=1 , locals=1 , args_size=1 0 : aload_0 1 : invokespecial # 1 // Method Base . `` < init > '' : ( ) V 4 : return LineNumberTable : line 1 : 0 void method ( java.lang.Number ) ; descriptor : ( Ljava/lang/Number ; ) V flags : Code : stack=0 , locals=2 , args_size=2 0 : return LineNumberTable : line 5 : 0 Deprecated : true RuntimeVisibleAnnotations : 0 : # 14 ( ) void method ( java.lang.Object ) ; descriptor : ( Ljava/lang/Object ; ) V flags : ACC_BRIDGE , ACC_SYNTHETIC Code : stack=2 , locals=2 , args_size=2 0 : aload_0 1 : aload_1 2 : checkcast # 2 // class java/lang/Number 5 : invokevirtual # 3 // Method method : ( Ljava/lang/Number ; ) V 8 : return LineNumberTable : line 1 : 0 RuntimeVisibleAnnotations : 0 : # 14 ( ) } Signature : # 17 // LBase < Ljava/lang/Number ; > ; SourceFile : `` Derived.java ''"
"static final class List0 < E > extends AbstractImmutableList < E > { ... @ Override public E get ( int index ) { Objects.checkIndex ( index , 0 ) ; // always throws IndexOutOfBoundsException return null ; // but the compiler does n't know this } ... }"
"Jama.Matrix A = new Matrix ( num_words , num_documents ) ; -Xms40m-Xmx128g-d64"
"@ Override public boolean onTouch ( View v , MotionEvent event ) { @ Overridepublic boolean onTouch ( View v , MotionEvent event ) { @ Override public boolean onTouch ( View v , MotionEvent event ) {"
Object myObject = true ? new Integer ( 25 ) : new Double ( 25.0 ) ; System.out.println ( myObject ) ;
boolean temp = fA ( ) ; function ( fB ( ) ||temp ) ;
"private static final Integer [ ] populate ( final Integer [ ] array , final int length , final int current ) { if ( current == length ) { return array ; } else { array [ current ] = TR.random.nextInt ( ) ; System.out.println ( array [ current ] ) ; return populate ( array , length , current + 1 ) ; } }"
// main.cppstring global ; const char* data ( ) // Called externally by JNI { return ( global = func_returning_string ( ) ) .data ( ) ; // ` .data ( ) ` = ` .c_str ( ) ` }
"public class TestClass { public static void main ( String [ ] args ) { addFloats ( ( float ) Math.pow ( 2.0 , 24.0 ) ) ; addFloats ( ( float ) Math.pow ( 2.0 , 25.0 ) ) ; } private static void addFloats ( float number ) { float f = 0.0f ; long startTime = System.currentTimeMillis ( ) ; while ( true ) { f += 1.0f ; if ( f > = number ) { System.out.println ( f ) ; System.out.println ( number + `` took `` + ( System.currentTimeMillis ( ) - startTime ) + `` msecs '' ) ; break ; } } } }"
"String preCode = `` helloi++ ; world '' ; String newCode = preCode.replaceAll ( `` i++ ; '' , `` '' ) ;"
"Id SomeValue Date Hour -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -1 foo1 2015-01-01 7002 foo2 2015-01-01 8003 foo3 2015-01-01 900 ... 18 foo18 2015-01-01 240019 bar1 2015-01-02 10020 bar2 2015-01-02 200 ... 41 bar23 2015-01-02 230042 bar24 2015-01-02 240043 baz1 2015-01-03 10044 baz2 2015-01-03 200 ( and on ... ) SELECT *FROM tableWHERE ( date , hour ) > = ( : dateFrom , : hourFrom ) AND ( date , hour ) < = ( : dateTo , : hourTo ) -- there 's no ORDER BY clause in the query"
"# ifdef GL_ESprecision mediump float ; # endifuniform sampler2D u_texture ; varying vec4 v_color ; varying vec2 v_texCoord ; const float smoothing = 0.25/48.0 ; void main ( ) { float distance = texture2D ( u_texture , v_texCoord ) .a ; float alpha = smoothstep ( 0.5 - smoothing , 0.5 + smoothing , distance ) ; gl_FragColor = vec4 ( v_color.rgb , alpha ) ; } arial_white_48.getRegion ( ) .getTexture ( ) .setFilter ( TextureFilter.Linear , TextureFilter.Linear ) ;"
"+ -- -- -- -- -- -- -- -- -- -- -- -- -+ | INTERFACE | + -- -- -- -- -- + -- -- -- -- -- -- -- | | abstract | non-abstract | | method | method |+ -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- -- -- -- + -- -- -- -- -- -- -- +| | abstract | | || ABSTRACT | method | 1a | 2a || + -- -- -- -- -- -- -- + -- -- -- -- -- + -- -- -- -- -- -- -- +| CLASS | non-abstract | | || | method | 3a | 4a |+ -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- -- -- -- + -- -- -- -- -- -- -- +| | abstract | | || | method | 1b | 2b || INTERFACE + -- -- -- -- -- -- -- + -- -- -- -- -- + -- -- -- -- -- -- -- +| | non-abstract | | || | method | 3b | 4b |+ -- -- -- -- -- -+ -- -- -- -- -- -- -- + -- -- -- -- -- + -- -- -- -- -- -- -- + // ( 1a ) // A - abstract method // I - abstract method//// Implementation needed to avoid compilation error : // `` The type B1 must implement the inherited abstract method A1.foo ( ) '' //abstract class A1 { abstract void foo ( ) ; } interface I1 { void foo ( ) ; } class B1 extends A1 implements I1 { public void foo ( ) { } } // ( 2a ) // A - abstract method// I - non-abstract method //// Implementation needed to avoid compilation error : // `` The type B2 must implement the inherited abstract method A2.foo ( ) '' //abstract class A2 { abstract void foo ( ) ; } interface I2 { default void foo ( ) { } } class B2 extends A2 implements I2 { public void foo ( ) { } } // ( 3a ) // A - non-abstract method // I - abstract method//// Implementation not needed//abstract class A3 { public void foo ( ) { } } interface I3 { void foo ( ) ; } class B3 extends A3 implements I3 { } // ( 4a ) // A - non-abstract method// I - non-abstract method //// Implementation not needed//abstract class A4 { public void foo ( ) { System.out.println ( `` A4 '' ) ; } } interface I4 { default void foo ( ) { System.out.println ( `` I4 '' ) ; } } class B4 extends A4 implements I4 { B4 ( ) { foo ( ) ; } /*prints `` A4 '' */ } // ( 1b ) // J - abstract method // K - abstract method//// Implementation needed to avoid compilation error : // `` The type C1 must implement the inherited abstract method K1.foo ( ) '' //interface J1 { void foo ( ) ; } interface K1 { void foo ( ) ; } class C1 implements J1 , K1 { public void foo ( ) { } } // ( 2b ) // J - abstract method// K - non-abstract method //// Implementation needed to avoid compilation error : // `` The default method foo ( ) inherited from K2 conflicts with another // method inherited from J2 '' //interface J2 { void foo ( ) ; } interface K2 { default void foo ( ) { } } class C2 implements J2 , K2 { public void foo ( ) { } } // ( 3b ) // J - non-abstract method // K - abstract method//// Implementation needed to avoid compilation error : // `` The default method foo ( ) inherited from J3 conflicts with another // method inherited from K3 '' //interface J3 { default void foo ( ) { } } interface K3 { void foo ( ) ; } class C3 implements J3 , K3 { public void foo ( ) { } } // ( 4b ) // J - non-abstract method// K - non-abstract method //// Implementation needed to avoid compilation error : // `` Duplicate default methods named foo with the parameters ( ) and ( ) // are inherited from the types K4 and J4 '' //interface J4 { default void foo ( ) { } } interface K4 { default void foo ( ) { } } class C4 implements J4 , K4 { public void foo ( ) { } } abstract class A { abstract void foo ( ) ; } abstract class B extends A { protected void foo ( ) { } } interface I { void foo ( ) ; } interface J { default void foo ( ) { } } class C extends B implements I , J { }"
BufferredInputStream stream = nulltry { -- -- stream = new BufferredInputStream ( new FileInputStream ( ) ) ; -- -- } finally { if ( stream ! = null ) { stream.close ( ) } [ FilterOutputStream.close ] : http : //docs.oracle.com/javase/1.4.2/docs/api/java/io/FilterOutputStream.html # close % 28 % 29
"import java.util.regex . * ; public class Test { public static void main ( String [ ] args ) { final String INPUT = `` a3 ; 9 '' ; String [ ] patterns = { `` a '' , `` [ 0-9 ] + : [ 0-9 ] '' , `` [ 0-9 ] '' } ; Matcher matcher = Pattern.compile ( `` . * '' ) .matcher ( INPUT ) ; System.out.printf ( `` Input : % s % n '' , INPUT ) ; matcher.reset ( ) ; for ( String s : patterns ) testPattern ( matcher , s ) ; System.out.println ( `` ======================================= '' ) ; patterns = new String [ ] { `` a '' , `` [ 0-9 ] : [ 0-9 ] '' , `` [ 0-9 ] '' } ; matcher.reset ( ) ; for ( String s : patterns ) testPattern ( matcher , s ) ; } static void testPattern ( Matcher m , String re ) { m.usePattern ( Pattern.compile ( re ) ) ; System.out.printf ( `` Using regex : % s % n '' , m.pattern ( ) .toString ( ) ) ; // Testing for pattern if ( m.find ( ) ) System.out.printf ( `` Found % s , end-pos : % d % n '' , m.group ( ) , m.end ( ) ) ; } }"
"import javax.swing.LookAndFeel ; public class Test { public static void main ( String [ ] args ) { LookAndFeel currLAF = new com.sun.java.swing.plaf.gtk.GTKLookAndFeel ( ) ; currLAF.isSupportedLookAndFeel ( ) ; System.out.println ( `` I am exiting main '' ) ; } } I am exiting main # # A fatal error has been detected by the Java Runtime Environment : # # SIGSEGV ( 0xb ) at pc=0x00007f91fe0fdbe0 , pid=332 , tid=140265730119424 # # JRE version : Java ( TM ) SE Runtime Environment ( 7.0_67-b01 ) ( build 1.7.0_67-b01 ) # Java VM : Java HotSpot ( TM ) 64-Bit Server VM ( 24.65-b04 mixed mode linux-amd64 compressed oops ) # Problematic frame : # C 0x00007f91fe0fdbe0 # # Failed to write core dump . Core dumps have been disabled . To enable core dumping , try `` ulimit -c unlimited '' before starting Java again # # An error report file with more information is saved as : # /home/ethan/fail/hs_err_pid332.log # # If you would like to submit a bug report , please visit : # http : //bugreport.sun.com/bugreport/crash.jsp #"
import java.util.Collection ; import java.util.HashSet ; public class Test < T > { public Collection < String > getCollection ( ) { return new HashSet < String > ( ) ; } public void iterate1 ( Test test ) { for ( String s : test.getCollection ( ) ) { // ... } } public void iterate2 ( Test test ) { Collection < String > c = test.getCollection ( ) ; for ( String s : c ) { // ... } } public void iterate3 ( Test < ? > test ) { for ( String s : test.getCollection ( ) ) { // ... } } } $ javac Test.javaTest.java:11 : incompatible typesfound : java.lang.Objectrequired : java.lang.String for ( String s : test.getCollection ( ) ) { ^Note : Test.java uses unchecked or unsafe operations.Note : Recompile with -Xlint : unchecked for details.1 error
public class AnonClass { private int x = 1 ; public AnonClass ( int x ) { this.x = x ; } public static void main ( String [ ] args ) { AnonClass test = new AnonClass ( 4 ) ; test.testMethod ( ) ; } public void testMethod ( ) { AnonClass anon = new AnonClass ( 12 ) { { System.out.println ( super.x ) ; //Prints 12 System.out.println ( x ) ; //prints 4 } } ; } }
Iterable < Class >
public static final boolean FOO = false ; public static final void fooTest ( ) { if ( FOO ) { System.out.println ( `` gg '' ) ; } } static boolean isBar = false ; public static final boolean BAR = isBar ; public static final void fooTest ( ) { if ( BAR ) { System.out.println ( `` gg '' ) ; } }
import java.lang.String ; import java.util.List ; import java.util.Arrays ; interface Supplier < R > { Foo < R > get ( ) ; } interface Foo < R > { public R getBar ( ) ; public void init ( ) ; } public class Main { static private < V > void doSomething ( final Supplier < ? extends List < ? extends V > > supplier ) { // do something } static public void main ( String [ ] args ) { doSomething ( new Supplier < List < Object > > ( ) { @ Override public Foo < List < Object > > get ( ) { return new Foo < List < Object > > ( ) { @ Override public List < Object > getBar ( ) { return null ; } @ Override public void init ( ) { // initialisation } } ; } } ) ; } } doSomething ( ( ) - > new Foo < List < Object > > ( ) { @ Override public List < Object > getBar ( ) { return null ; } } ) ; Main.java:22 : error : method doSomething in class Main can not be applied to given types ; doSomething ( ( ) - > new Foo < List < Object > > ( ) { ^ required : Supplier < ? extends List < ? extends V > > found : ( ) - > new Fo [ ... ] ; } } reason : can not infer type-variable ( s ) V ( argument mismatch ; bad return type in lambda expression < anonymous Foo < List < Object > > > can not be converted to Foo < List < ? extends V > > ) where V is a type-variable : V extends Object declared in method < V > doSomething ( Supplier < ? extends List < ? extends V > > )
public static AbstractsAndInterfaces instance = new AbstractsAndInterfaces ( ) ; private static final int DELTA = 5 ; private static int BASE = 7 ; private int x ; public AbstractsAndInterfaces ( ) { //System.out.println ( BASE ) ; //System.out.println ( DELTA ) ; x = BASE + DELTA ; } public static int getBASE ( ) { return BASE ; } /** * @ param args the command line arguments */public static void main ( String [ ] args ) { System.out.println ( AbstractsAndInterfaces.instance.x ) ; }
"public boolean validTransAmt ( ) { FacesContext facesContext = FacesContext.getCurrentInstance ( ) ; Pattern p = Pattern.compile ( `` ^ ( [ 0-9 ] { 0 , } ) ( ( [ \\. ] ? ) ( [ 0-9 ] { 1,2 } ) ( [ \\. ] ? ) ) $ '' ) ; String transAmt = getDetails ( ) .getAmount ( ) ; Matcher matcher = p.matcher ( transAmt ) ; if ( ! matcher.matches ( ) ) { ... } ... }"
$ { basedir } /src/main/java-templates
"ListIterator.add ( E element ) public static void main ( String [ ] args ) { int number = 100000 ; long startTime1 = System.currentTimeMillis ( ) ; fillLinkedList ( number ) ; long stopTime1 = System.currentTimeMillis ( ) ; long startTime2 = System.currentTimeMillis ( ) ; fillArrayList ( number ) ; long stopTime2 = System.currentTimeMillis ( ) ; System.out.println ( `` LinkedList needed : `` + ( stopTime1 - startTime1 ) ) ; System.out.println ( `` ArrayList needed : `` + ( stopTime2 - startTime2 ) ) ; } public static void fillLinkedList ( int number ) { LinkedList < Integer > list = new LinkedList < Integer > ( ) ; ListIterator < Integer > it = list.listIterator ( ) ; int i = 0 ; while ( i++ < number ) { it.add ( i ) ; } // System.out.println ( `` LinkedList size : `` +list.size ( ) ) ; } public static void fillArrayList ( int number ) { ArrayList < Integer > list = new ArrayList < Integer > ( ) ; ListIterator < Integer > it = list.listIterator ( ) ; int i = 0 ; while ( i++ < number ) { it.add ( i ) ; } // System.out.println ( `` ArrayList size : `` +list.size ( ) ) ; } number 10,000 100,000 500,000 1,000,000 5,000,000ArrayList 7 17 60 77 170LinkedList 7 21 89 838 4127"
"public Object clone ( ) { try { Employee copy = ( Employee ) super.clone ( ) ; // copy ID , name , and salary ! copy.hireDay = ( Date ) hireDay.clone ( ) ; return copy ; } catch ( CloneNotSupportedException e ) { System.out.println ( e ) ; return null ; } }"
public class Inheritance { int i ; Inheritance ( ) { System.out.println ( `` I am in base class '' + i ) ; } } public class TestInheritance extends Inheritance { TestInheritance ( ) { System.out.println ( `` I am in derived class '' ) ; } public static void main ( String [ ] args ) { TestInheritance obj = new TestInheritance ( ) ; } }
"public class MapChunkLoad { public static void main ( String [ ] args ) { short [ ] groundLayer ; int mapWidth = 9 ; int mapHeight = 9 ; int chunkWidth = mapWidth / 3 ; //3 int chunkHeight = mapHeight / 3 ; //3 int characterX = 8 ; int characterY = 8 ; String map = `` 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 7 , `` + `` 1 , 8 , 8 , 1 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 8 , 9 , 9 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 1 , 9 , 9 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , `` + `` 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , `` + `` 6 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 '' ; String [ ] strArr = map.split ( `` , `` ) ; groundLayer = new short [ chunkWidth * chunkHeight ] ; //load chunk into groundLayer int arrayIndex = 0 ; int count = ( characterX - ( chunkWidth/2 ) ) + ( ( characterY - ( chunkHeight/2 ) ) * mapWidth ) ; //top left tile within chunk for ( int y = 0 ; y < chunkHeight ; y++ ) { for ( int x = 0 ; x < chunkWidth ; x++ ) { if ( count > -1 & & count < strArr.length ) { groundLayer [ arrayIndex ] = Short.parseShort ( strArr [ count ] ) ; System.out.println ( `` arrayIndex [ `` + arrayIndex + `` ] = `` + strArr [ count ] ) ; } else { groundLayer [ arrayIndex ] = 0 ; System.out.println ( `` arrayIndex [ `` + arrayIndex + `` ] = `` + 0 ) ; } arrayIndex++ ; count++ ; } count += ( mapWidth - chunkWidth ) ; } System.out.println ( `` '' ) ; //print map grid int printcount = 0 ; for ( int y = 0 ; y < chunkHeight ; y++ ) { for ( int x = 0 ; x < chunkWidth ; x++ ) { if ( x == chunkWidth - 1 ) { System.out.println ( groundLayer [ printcount ] ) ; } else { System.out.print ( groundLayer [ printcount ] + `` , `` ) ; } printcount++ ; } } } }"
public class Id { public static final Id NULL_ID = new Id ( ) ; private String id ; public Id ( String id ) { this.id = Objects.requireNonNull ( id ) ; } private Id ( ) { } } public record Id ( String id ) { public static final Id NULL_ID = null ; // how ? public Id { Objects.requireNonNull ( id ) ; // ... } } public Id { if ( NULL_OBJECT ! = null ) Objects.requireNonNull ( id ) ; }
int a = 0 ; for ( int i = 0 ; i < nums.length ; i++ ) { a ^= nums [ i ] ; } return a ;
The following number is doubled of another number from the array : 0The following number is doubled of another number from the array : 0The following number is doubled of another number from the array : 140The following number is doubled of another number from the array : 0The following number is doubled of another number from the array : 0 public class DoubleNums { public static void main ( String [ ] args ) { Random random = new Random ( ) ; int [ ] array = new int [ 50 ] ; int [ ] even ; int [ ] doubleNum ; int count = 0 ; int doubles = 0 ; for ( int i = 0 ; i < array.length ; i++ ) { array [ i ] = random.nextInt ( 200 ) ; System.out.println ( array [ i ] + `` `` ) ; } for ( int j = 0 ; j < array.length ; j++ ) { even = new int [ array.length ] ; if ( array [ j ] % 2 == 0 ) { even [ count ] = array [ j ] ; count++ ; } for ( int k = 0 ; k < array.length ; k++ ) { doubleNum = new int [ array.length ] ; if ( array [ j ] / 2 == array [ k ] ) { even [ doubles ] = k ; doubles++ ; System.out.println ( `` The following number is doubled of another number from the array : `` + even [ doubles ] ) ; } } } System.out.println ( `` Number of even nums : `` + count ) ; } }
if var_name in list_name : # do something
< fmt : formatDate pattern= '' MMM d '' value= '' $ { myEvent.date } '' / > Nov 28 2016-11-28 20:00:00.0
if ( someCondition ) int a=10 ; //Compilation Errorelse if ( SomeOtherCondition ) { int b=10 ; //no compilation Error }
Character.UnicodeBlock block = Character.UnicodeBlock.CHESS_SYMBOLS ; for ( int i = 0 ; i < 1114112 ; i++ ) { char unicode = ( char ) i ; if ( Character.UnicodeBlock.of ( unicode ) == block ) { System.out.println ( unicode ) ; } }
"import subprocess as spdef execute ( cmd ) : popen = sp.Popen ( cmd , stdout=sp.PIPE , universal_newlines=True , shell=True ) for stdout_line in iter ( popen.stdout.readline , `` '' ) : yield stdout_line popen.stdout.close ( ) return_code = popen.wait ( ) if return_code : raise sp.CalledProcessError ( return_code , cmd ) for path in execute ( [ `` mvn '' , `` exec : java '' , '-D '' exec.mainClass '' = '' org.matsim.project.MatsimRun '' ' ] ) : print ( path , end= '' '' )"
< span id= '' BirthMonth '' class= '' form-error '' aria-invalid= '' true '' > < div class= '' goog-inline-block goog-flat-menu-button jfk-select '' role= '' listbox '' style= '' -moz-user-select : none ; '' aria-expanded= '' false '' tabindex= '' 0 '' aria-haspopup= '' true '' aria-activedescendant= '' :0 '' title= '' Birthday '' > < div class= '' goog-menu goog-menu-vertical '' style= '' -moz-user-select : none ; visibility : visible ; left : 0px ; top : -82.2333px ; display : none ; '' role= '' listbox '' aria-haspopup= '' true '' > < div id= '' :1 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :2 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div class= '' goog-menuitem-content '' > February < /div > < /div > < div id= '' :3 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :4 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :5 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :6 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :7 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :8 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' :9 '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' : a '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' : b '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < div id= '' : c '' class= '' goog-menuitem '' role= '' option '' style= '' -moz-user-select : none ; '' > < /div > < input id= '' HiddenBirthMonth '' type= '' hidden '' name= '' BirthMonth '' > < /span >
"public List < ComplexObject > retrieveObjectsFilteredByTags ( List < String > allowedTags ) { List < ComplexObject > complexObjects = retrieveAllComplexObjects ( ) ; return complexObjects .stream ( ) .filter ( compObject - > allowedTags.contains ( compObject.getTag ( ) ) ) .collect ( Collectors.toList ( ) ) ; } public List < ComplexObject > retrieveObjectsFilteredByTags ( List < String > allowedTags ) { List < ComplexObject > complexObjects = retrieveAllComplexObjects ( ) ; return complexObjects .stream ( ) .filter ( this : :filterByAllowedTags , allowedTags ) .collect ( Collectors.toList ( ) ) ; }"
class Person { public static < T > T say ( ) { return new T ; // this has error } } public static < T > T say ( Class < ? > t ) { return t.newInstance ( ) ; } incompatible typesfound : capture # 426 of ? required : T public class Abc < T > { public T getInstanceOfT ( Class < T > aClass ) { return aClass.newInstance ( ) ; } }
public interface A < T extends A < T > > { }
final int finalVar = 5 ; executor.execute ( ( ) - > { System.out.println ( finalVar ) ; } ) ; final int finalVar = 5 ; executor.execute ( new Runnable ( ) { int myVar = finalVar ; public void run ( ) { System.out.println ( myVar ) ; } ) ;
"int [ ] myArray = { 1,2,3 } ; `` 123 '' `` [ 1 , 2 , 3 ] '' [ I @ 12a3a380"
"import java.util.Objects ; import java.util.function.BiFunction ; @ FunctionalInterfacepublic interface Procedure < S , T > { T procede ( S stateStructure ) ; default < R > Procedure < S , R > andThen ( BiFunction < S , T , R > after ) { Objects.requireNonNull ( after ) ; return ( param ) - > after.apply ( param , procede ( param ) ) ; } } import java.util.function.BiConsumer ; import java.util.function.BiFunction ; import java.util.function.Consumer ; import java.util.function.Function ; public class ProcedureContainer < S , T > { protected final Procedure < S , T > procedure ; protected ProcedureContainer ( final Procedure < S , T > procedure ) { this.procedure = procedure ; } public static < S , R > ProcedureContainer < S , R > initializeContainer ( final Function < S , R > initialDataRetriever ) { return new ProcedureContainer < > ( initialDataRetriever : :apply ) ; } public < R > ProcedureContainer < S , R > map ( final BiFunction < S , T , R > mapper ) { return new ProcedureContainer < > ( procedure.andThen ( mapper ) ) ; } public < R > ProcedureContainer < S , R > map ( final Function < T , R > mapper ) { BiFunction < S , T , R > subMapper = ( ignored , stagedData ) - > mapper.apply ( stagedData ) ; return new ProcedureContainer < > ( procedure.andThen ( subMapper ) ) ; } public Consumer < S > terminate ( final BiConsumer < S , T > consumer ) { return ( param ) - > consumer.accept ( param , procedure.procede ( param ) ) ; } public Consumer < S > terminate ( final Consumer < T > consumer ) { return ( param ) - > consumer.accept ( procedure.procede ( param ) ) ; } } StateStruct state = new StateStruct ( ) ; state.setJson ( `` { \ '' data\ '' : \ '' meow , meow , I 'm a cow\ '' } '' ) ; state.setRequestedField ( `` data '' ) ; Consumer < StateStruct > consumer = ProcedureContainer .initializeContainer ( SateStruct : :getJson ) .map ( JSONObject : :new ) .map ( ( state , jsonObj ) - > jsonObject.getString ( state.getRequsetedField ( ) ) ) .terminate ( System.out : :singLoudly ) ; consumer.accept ( state ) ; StateStruct state = new StateStruct ( ) ; state.setJson ( `` { \ '' data\ '' : \ '' meow , meow , I 'm a cow\ '' } '' ) ; state.setRequestedField ( `` data '' ) ; state.setDefaultMessage ( `` There is no data ... only sheep '' ) ; Consumer < StateStruct > consumer = ProcedureContainer .initializeContainer ( SateStruct : :getJson ) .map ( JSONObject : :new ) .branch ( ( state , jsonObj ) - > ! jsonObject.getString ( state.getRequsetedField ( ) ) ) .terminateBranch ( ( state , json ) - > System.out.lament ( state.getDefaultMessage ( ) ) ) .map ( ( state , jsonObj ) - > jsonObject.getString ( state.getRequsetedField ( ) ) ) .terminate ( System.out : :singLoudly ) ; consumer.accept ( state ) ;"
"public class Point { private final double x ; private final double y ; // imagine required args constructor and getter for both fields } List < Point > points = new ArrayList < > ( ) ; points.add ( new Point ( 0,0 ) ) ; points.add ( new Point ( 0,1 ) ) ; points.add ( new Point ( 0,2 ) ) ; points.add ( new Point ( 0,3 ) ) ;"
"Map < String , String > m1 = new HashMap < > ( ) ; m1.put ( `` date '' , `` 2020.1.5 '' ) ; m1.put ( `` B '' , `` 10 '' ) ; Map < String , String > m2 = new HashMap < > ( ) ; m2.put ( `` date '' , `` 2020.1.5 '' ) ; m2.put ( `` A '' , `` 20 '' ) ; Map < String , String > m3 = new HashMap < > ( ) ; m3.put ( `` date '' , `` 2020.1.6 '' ) ; m3.put ( `` A '' , `` 30 '' ) ; Map < String , String > m4 = new HashMap < > ( ) ; m4.put ( `` date '' , `` 2020.1.7 '' ) ; m4.put ( `` C '' , `` 30 '' ) ; List < Map < String , String > > before = new ArrayList < > ( ) ; before.add ( m1 ) ; before.add ( m2 ) ; before.add ( m3 ) ; before.add ( m4 ) ; [ { `` A '' : '' 20 '' , '' B '' : '' 10 '' , '' date '' : '' 2020.1.5 '' } , { `` A '' : '' 30 '' , '' date '' : '' 2020.1.6 '' } , { `` C '' : '' 30 '' , '' date '' : '' 2020.1.7 '' } ] stream ( ) .flatmap ( ) .collect ( Collectors.groupingBy ( ) )"
class MyOuter { private String x = `` Outer '' ; void doStuff ( ) { final String z = `` local variable '' ; class MyInner { public void seeOuter ( ) { System.out.println ( `` Outer x is '' + x ) ; System.out.println ( `` Local variable z is '' + z ) ; // does // not compile if final keyword from String z is removed } } } }
"String [ ] temp3 = { `` instructor '' , '' teacher '' , '' mentor '' } ; responses.put ( `` professor name '' , temp3 ) ; String [ ] temp3 = { `` instructor '' , '' teacher '' , '' mentor '' } ; responses.put ( `` professor '' , temp3 ) ; private static HashMap < String , String [ ] > populateSynonymMap ( ) { String [ ] temp1 = { `` instructor '' , '' teacher '' , '' mentor '' } ; responses.put ( `` professor name '' , temp1 ) ; String [ ] temp2 = { `` amount of test '' , '' test load '' , '' quantity of test '' } ; return responses ; } public static void main ( String args [ ] ) throws ParseException , IOException { /* Initialization */ HashMap < String , String [ ] > synonymMap = new HashMap < String , String [ ] > ( ) ; synonymMap = populateSynonymMap ( ) ; // populate the map Scanner scanner = new Scanner ( System.in ) ; String input = null ; /*End Initialization*/ System.out.println ( `` Welcome To DataBase `` ) ; System.out.println ( `` What would you like to know ? `` ) ; System.out.print ( `` > `` ) ; input = scanner.nextLine ( ) .toLowerCase ( ) ; String [ ] inputs = input.split ( `` `` ) ; for ( String ing : inputs ) { // iterate over each word of the sentence . boolean found = false ; for ( Map.Entry < String , String [ ] > entry : synonymMap.entrySet ( ) ) { String key = entry.getKey ( ) ; String [ ] value = entry.getValue ( ) ; if ( key.equals ( ing ) || Arrays.asList ( value ) .contains ( ing ) ) { found = true ; parseFile ( entry.getKey ( ) ) ; `` } break ; } if ( found ) { break ; } } }"
"private static < T > List < T > retrieveAllT ( Session session , CriteriaBuilder criteriaBuilder , T t ) { CriteriaQuery < t > query = criteriaBuilder.createQuery ( t ) ; Root root = query.from ( t ) ; query.select ( root ) ; return session.createQuery ( query ) .getResultList ( ) ; } private static List < ? > retrieveAll ( Session session , CriteriaBuilder criteriaBuilder , Class clazz ) { CriteriaQuery query = criteriaBuilder.createQuery ( clazz ) ; Root root = query.from ( clazz ) ; query.select ( root ) ; return session.createQuery ( query ) .getResultList ( ) ; }"
class T { { /*1*/ Object o = T.super ; // error : ' . ' expected/*2*/ o.toString ( ) ; } } error : ' . ' expected o = T.super ; ^ class T { T ( ) ; 0 aload_0 [ this ] 1 invokespecial java.lang.Object ( ) [ 8 ] // super ( ) 4 aload_0 [ this ] 5 astore_1 [ o ] // o = T.super 7 invokevirtual java.lang.Object.toString ( ) : java.lang.String [ 10 ] 10 pop // ^ -- o.toString ( ) 11 return }
MY_TABLENAME AGE TYPEJohn 25 ASarah 30 BRick 22 ASusan 43 B
"// module is an ANTLR parse treeBLXCircuit mainCircuit = modelGenerator.visit ( module ) ; Map < BLXSocket , Boolean > valueMap = new HashMap < > ( ) ; List < BLXSocket > inputs = mainCircuit.getInputSockets ( ) ; valueMap.put ( inputs.get ( 0 ) , false ) ; valueMap.put ( inputs.get ( 1 ) , false ) ; valueMap.put ( inputs.get ( 2 ) , false ) ; BLXEventManager eventManager = new BLXEventManager ( valueMap , 500 ) ; eventManager.start ( ) ; private static void noAction ( BLXSignalReceiver unused ) { } private static void whyDoesThisFixThings ( BLXCircuit blxCircuit ) { for ( BLXSocket blxSocket : blxCircuit.getInputSockets ( ) ) { blxSocket.getTargets ( ) .forEach ( Main : :noAction ) ; } } BLXCircuit mainCircuit = modelGenerator.visit ( module ) ; whyDoesThisFixThings ( mainCircuit ) ; // why ? ?"
public class X { double a ; double b ; double c ; } public X array_of_x [ SIZE ] = new X [ SIZE ] ; public class X { double a [ ] = new double [ SIZE ] ; double b [ ] = new double [ SIZE ] ; double c [ ] = new double [ SIZE ] ; } public X class_x = new X ( ) ;
"public static int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }"
foo ( ) ; super.foo ( ) ;
final static boolean debug_on=true ; ... if ( debug_on ) { system.out.println ( ) or logger.log ( ... ) }
Class myIf = MyIf.class ; Object myLambda ; myIf.isInstance ( myLambda )
"public class Main { public static void main ( String [ ] args ) { List < Snow > snow = Arrays.asList ( new Light ( ) , new Heavy ( ) ) ; } } class Snow { } class Powder extends Snow { } class Light extends Powder { } class Heavy extends Powder { }"
class Generic < T > { List < List < T > > getList ( ) { return null ; } } Generic < ? extends Number > tt = null ; List < List < ? extends Number > > list = tt.getList ( ) ; // this line gives compile error List < ? extends List < ? extends Number > > list = tt.getList ( ) ; // this one is correct
"public class SomeClass { private final int [ ] numbers = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; private LabelText AText = new LabelText ( ' A ' , numbers ) ; private LabelText BText = new LabelText ( ' B ' , numbers ) ; public void foo ( ) { AText.numbers [ 6 ] = -1 ; BText.numbers [ 3 ] = -1 ; if ( BText.numbers [ 6 ] == -1 ) System.out.println ( `` Wtf ? `` ) ; } } public class LabelText { private final char letter ; public int [ ] numbers ; public LabelText ( char letter , int [ ] numbers ) { this.letter = letter ; this.numbers = numbers ; } }"
"class test implements Runnable { static ConcurrentHashMap < String , Integer > map = new ConcurrentHashMap < > ( ) ; static AtomicInteger value_to_be_incremented_stored = new AtomicInteger ( 0 ) ; // variable whose value to be updated static AtomicInteger i = new AtomicInteger ( 0 ) ; // this runs the loop @ Override public void run ( ) { for ( i.set ( 0 ) ; i.get ( ) < 100000 ; i.incrementAndGet ( ) ) { /* This loop should run 100000 times and when loop terminates according to me value of variable `` value_to_be_incremented_stored '' should be 100000 as its value is incremented 100000 times the loop also runs 100000 times . */ System.out.println ( `` Thread > `` + Thread.currentThread ( ) + `` `` + value_to_be_incremented_stored.incrementAndGet ( ) ) ; map.put ( `` TC '' , value_to_be_incremented_stored.intValue ( ) ) ; } System.out.println ( `` Output by Thread `` + Thread.currentThread ( ) + `` `` + map.toString ( ) ) ; } public static void main ( String [ ] args ) { test t1 = new test ( ) ; Thread thread1 = new Thread ( t1 ) ; thread1.setName ( `` Thread 1 '' ) ; Thread thread2 = new Thread ( t1 ) ; thread2.setName ( `` Thread 2 '' ) ; Thread thread3 = new Thread ( t1 ) ; thread3.setName ( `` Thread 3 '' ) ; Thread thread4 = new Thread ( t1 ) ; thread4.setName ( `` Thread 4 '' ) ; thread1.start ( ) ; thread2.start ( ) ; thread3.start ( ) ; thread4.start ( ) ; } }"
"package java.lang ; public class Object { public static void main ( String [ ] args ) { System.out.println ( `` Hello world from custom java.lang.Object ! `` ) ; } } Error : Main method not found in class java.lang.Object , please define the main method as : public static void main ( String [ ] args )"
class Paper { } class Bakery { } class Cake extends Bakery { } class ReflexiveBaker { /** * Create bakery of the provided class . * * @ param order class of bakery to create * @ return bakery object */ public Object bake ( Class order ) { // Add implementation here } } public Object bake ( Class < ? extends Bakery > order ) throws Exception { return order.getDeclaredConstructor ( ) .newInstance ( ) ; }
"tasks.withType ( JavaCompile ) { options.compilerArgs.addAll ( [ ' -- release ' , ' 6 ' , `` -Xlint '' ] ) } warning : [ options ] source value 1.6 is obsolete and will be removed in a future releasewarning : [ options ] target value 1.6 is obsolete and will be removed in a future releasewarning : [ options ] To suppress warnings about obsolete options , use -Xlint : -options . sourceCompatibility = `` 1.6 '' targetCompatibility = `` 1.6 '' tasks.withType ( JavaCompile ) { options.bootstrapClasspath = new SimpleFileCollection ( Arrays.asList ( new File ( `` $ JDK6_HOME/jre/lib/rt.jar '' ) ) ) }"
+ -- -- -- -- -- -- -- -- + + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+| Shape | | ShapeManager || -- -- -- -- -- -- -- -- | | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|| + id : int | | # shapes : List < Shape > || | | || | | + ShapeManager ( ) { || | | shapes.add ( new Shape ( ) ) ; || | | } || | | || | | + abstract void enumerate ( ) { || | | for ( Shape s : shapes ) { || | | // use s || | | } || | | } |+ -- -- -- -- -- -- -- -- + + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ ^ ^ | | + ++ -- -- -- -- -- -- -- -- + + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+| ColoredShape | | ColoredShapeManager || -- -- -- -- -- -- -- -- | | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|| + color : int | | + ColoredShapeManager ( ) { || | | shapes.add ( new ColoredShape ( ) ) ; || | | } || | | || | | + abstract void enumerate ( ) { || | | for ( Shape s : shapes ) { || | | // use ( ColoredShaped ) s || | | // will fail for Shapes || | | } || | | } |+ -- -- -- -- -- -- -- -- + + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+
1234 @ myappdomain.12345.com
ArrayList < Integer > ar [ ] =new ArrayList < Integer > [ 50 ] ;
"abstract public class BGFullScreen extends FullScreen { Bitmap bg ; public BGFullScreen ( Manager mgr , long style ) { super ( mgr , style ) ; bg = Bitmap.getBitmapResource ( `` bg.jpg '' ) ; } abstract protected void innerPaint ( Graphics g ) ; protected void paint ( Graphics g ) { g.drawBitmap ( new XYRect ( 0 , 0 , bg.getWidth ( ) , bg.getHeight ( ) ) , bg , 0 , 0 ) ; innerPaint ( g ) ; super.paint ( g ) ; } } public class MainAppScreen extends BGFullScreen { public MainAppScreen ( ) { super ( new VerticalFieldManager ( ) , 0 ) ; // add some components to the screen : add ( new ButtonField ( ... ) ) ; add ( ... ) } protected void innerPaint ( Graphics g ) { // stuff drawn will be on top of background and under buttons g.draw ( ... ) } }"
"package gameoflife ; public class GameOfLife { public static final int HEIGHT = 16 ; public static final int LENGTH = 16 ; public static Grid current ; public static void main ( String [ ] args ) { Ui gui = new Ui ( ) ; int time = 0 ; while ( true ) { RuleSet.checkReady ( ) ; //System.out.println ( RuleSet.checkReady ( ) ) ; if ( RuleSet.checkReady ( ) == true ) { //System.out.println ( `` ready ! `` ) ; if ( time == 0 ) { current = gui.getUserSeed ( ) ; } while ( time < 100 ) { current.print ( ) ; Grid next = new Grid ( HEIGHT , LENGTH ) ; for ( int i = 0 ; i < HEIGHT ; i++ ) { for ( int j = 0 ; j < LENGTH ; j++ ) { next.changeState ( i , j , RuleSet.determineState ( current , i , j ) ) ; } } current = next ; time++ ; } break ; } } } } public Grid grid ; public static boolean readyToStart = false ; /*checkReady ( ) * input : * purpose : checks ready flag * output : none */public static boolean checkReady ( ) { return readyToStart ; } /*isReady ( ) * input : none * purpose : sets ready flag to ready * output : none */public static void isReady ( ) { readyToStart = true ; } /*determineState ( ) * input : Grid grid , int y , int x * purpose : determines the state of a cell for the next * generationusing the four rules below * output : true/false */public static boolean determineState ( Grid grid , int y , int x ) { grid = grid ; int neighbors = grid.getNeighbors ( y , x ) ; if ( grid.getState ( y , x ) ) { return ( ruleOne ( neighbors ) & & ruleTwo ( neighbors ) & & ruleThree ( neighbors ) ) ; } else { return ( ruleFour ( neighbors ) ) ; } } /* * Rule 1 : * Any live cell with fewer than two live neighbours dies , * as if caused by under-population . */private static boolean ruleOne ( int neighbors ) { return ( neighbors > = 2 ) ; } /* * Rule 2 : * Any live cell with two or three live neighbours * lives on to the next generation . */private static boolean ruleTwo ( int neighbors ) { return ( neighbors == 2 || neighbors == 3 ) ; } /* * Rule 3 : * Any live cell with more than three live neighbours dies , * as if by overcrowding */private static boolean ruleThree ( int neighbors ) { return ( neighbors < 4 ) ; } /* * Rule 4 : * Any dead cell with exactly three live neighbours becomes a live cell , * as if by reproduction . */private static boolean ruleFour ( int neighbors ) { return ( neighbors == 3 ) ; } } import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Container ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; /** * * @ author peter */public class Ui extends JFrame { public static JPanel panelGrid ; public static JPanel panelControl ; public static JPanel panelManager ; public static JButton [ ] [ ] buttons ; public static JButton isReady ; public static JButton nextGen ; public static final int HEIGHT = 16 ; public static final int LENGTH = 16 ; public Grid temp ; public Ui ( ) { setTitle ( `` The Game Of Life '' ) ; setSize ( 800 , 600 ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; temp = new Grid ( HEIGHT , LENGTH ) ; //Creates and sets up the contentPane Container Container contentPane = getContentPane ( ) ; contentPane.setLayout ( new BorderLayout ( ) ) ; contentPane.add ( initButtonGrid ( ) , BorderLayout.CENTER ) ; contentPane.add ( initContButton ( ) , BorderLayout.PAGE_END ) ; //add ( contentPane ) ; setVisible ( true ) ; } /*initButtonGrid ( ) * input : none * purpose : to return initialize the button array , and return the * corresponding JPanel * output : JPanel panelGrid */private JPanel initButtonGrid ( ) { buttons = new JButton [ HEIGHT ] [ LENGTH ] ; panelGrid = new JPanel ( new GridLayout ( HEIGHT , LENGTH ) ) ; for ( int i = 0 ; i < HEIGHT ; i++ ) { for ( int j = 0 ; j < LENGTH ; j++ ) { buttons [ i ] [ j ] = new JButton ( ) ; buttons [ i ] [ j ] .setSize ( 80 , 80 ) ; buttons [ i ] [ j ] .setBackground ( Color.white ) ; //Creates an action listener that allows user //to setup seed buttons [ i ] [ j ] .addActionListener ( new ActionListener ( ) { //Loops through and checks the state of the button/array //and then changes state if needed public void actionPerformed ( ActionEvent e ) { for ( int i = 0 ; i < HEIGHT ; i++ ) { for ( int j = 0 ; j < LENGTH ; j++ ) { if ( buttons [ i ] [ j ] == e.getSource ( ) & & ! RuleSet.checkReady ( ) ) { temp.changeState ( i , j , ! temp.getState ( i , j ) ) ; if ( temp.getState ( i , j ) ) { buttons [ i ] [ j ] .setBackground ( Color.red ) ; } else { buttons [ i ] [ j ] .setBackground ( Color.white ) ; } temp.print ( ) ; } } } } } ) ; panelGrid.add ( buttons [ i ] [ j ] ) ; } } return panelGrid ; } /*getUserSeed ( ) * input : none * purpose : to return the seed the user made with the buttons . I was having * trouble passing the current grid from main ( ) to here in a static * way . Will attempt to update at later point * output : Grid temp */public Grid getUserSeed ( ) { return temp ; } /*initContButton ( ) * input : none * purpose : to return initialize the buttons for commands , and return the * corresponding JPanel * output : JPanel panelControl */private JPanel initContButton ( ) { panelControl = new JPanel ( new GridLayout ( 1 , 2 ) ) ; JButton ready = new JButton ( `` Start Simulation '' ) ; ready.setSize ( 80 , 190 ) ; ready.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { RuleSet.isReady ( ) ; System.out.println ( `` Ready Pressed '' ) ; } } ) ; panelControl = new JPanel ( new GridLayout ( 1 , 2 ) ) ; JButton nextGen = new JButton ( `` Generation '' ) ; nextGen.setSize ( 80 , 190 ) ; nextGen.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { } } ) ; panelControl.add ( ready ) ; panelControl.add ( nextGen ) ; return panelControl ; } }"
"ILocalCluster localCluster = new LocalCluster ( ) ; localCluster.submitTopology ( topologyName , stormConf , topology ) ; Async loop died ! : java.lang.ClassCastException : my.company.storm.bolt.SomeFilteringBolt can not be cast to org.apache.storm.task.IBolt at org.apache.storm.daemon.executor $ fn__7953 $ fn__7966.invoke ( executor.clj:787 ) at org.apache.storm.util $ async_loop $ fn__625.invoke ( util.clj:482 ) at clojure.lang.AFn.run ( AFn.java:22 ) at java.lang.Thread.run ( Thread.java:745 ) ClassLoader originalClassloader = Thread.currentThread ( ) .getContextClassLoader ( ) ; try { Thread.currentThread ( ) .setContextClassLoader ( ClassLoader.getSystemClassLoader ( ) ) ; Config topologyConf = createTopologyConfig ( ) ; Map < String , Object > stormConf = createStormConfig ( topologyConf ) ; StormTopology topology = createTopology ( topologyConf ) ; ILocalCluster localCluster = new LocalCluster ( ) ; localCluster.submitTopology ( topologyName , stormConf , topology ) ; } finally { Thread.currentThread ( ) .setContextClassLoader ( originalClassloader ) ; } Thread died : java.lang.ExceptionInInitializerError at clojure.core__init.__init0 ( Unknown Source ) at clojure.core__init. < clinit > ( Unknown Source ) at java.lang.Class.forName0 ( Native Method ) at java.lang.Class.forName ( Class.java:348 ) at clojure.lang.RT.classForName ( RT.java:2154 ) at clojure.lang.RT.classForName ( RT.java:2163 ) at clojure.lang.RT.loadClassForName ( RT.java:2182 ) at clojure.lang.RT.load ( RT.java:436 ) at clojure.lang.RT.load ( RT.java:412 ) at clojure.lang.RT.doInit ( RT.java:454 ) at clojure.lang.RT. < clinit > ( RT.java:330 ) at clojure.lang.Namespace. < init > ( Namespace.java:34 ) at clojure.lang.Namespace.findOrCreate ( Namespace.java:176 ) at clojure.lang.Var.internPrivate ( Var.java:151 ) at org.apache.storm.LocalCluster. < clinit > ( Unknown Source ) at my.company.storm.LocalTopologyRunner.startTopology ( LocalTopologyRunner.java:146 ) ... 10 moreCaused by : java.lang.IllegalStateException : Attempting to call unbound fn : # 'clojure.core/refer at clojure.lang.Var $ Unbound.throwArity ( Var.java:43 ) at clojure.lang.AFn.invoke ( AFn.java:32 ) at clojure.lang.Var.invoke ( Var.java:379 ) at clojure.lang.RT.doInit ( RT.java:467 ) at clojure.lang.RT. < clinit > ( RT.java:330 ) ... 18 more"
"for inputs parse input add parse [ 1 ] to starts , add parse [ 2 ] to endsfor starts find origin ( a start not in ends ) < -- requires hash ? if no origin cycle existsfor inputs find ends [ origin ] < -- requires hash ? origin = ends [ origin ] < -- so we can find the next one"
"ChromeOptions options = new ChromeOptions ( ) ; System.setProperty ( `` webdriver.chrome.driver '' , '' /usr/local/bin/chromedriver '' ) ; options.addArguments ( `` -- headless '' ) ; options.addArguments ( `` -- no-sandbox '' ) ; options.addArguments ( `` -- disable-dev-shm-usage '' ) ; driver = new ChromeDriver ( options ) ; driver.get ( `` https : //mywebsite.com '' ) ;"
"11 11 2 11 3 3 11 4 6 4 11 5 10 10 5 1 static long get ( int l , int c ) { long [ ] [ ] matrix = new long [ l+1 ] [ l+1 ] ; matrix [ 0 ] [ 0 ] =1 ; matrix [ 1 ] [ 0 ] =1 ; matrix [ 1 ] [ 1 ] =1 ; for ( int i=2 ; i < =l ; i++ ) { matrix [ i ] [ 0 ] =1 ; for ( int j=1 ; j < =i ; j++ ) { matrix [ i ] [ j ] = matrix [ i-1 ] [ j-1 ] +matrix [ i-1 ] [ j ] ; } } return matrix [ l ] [ c ] ; }"
"cells = new boolean [ this.collums ] [ this.rows ] ; IntStream.range ( 0 , cells.length ) .forEach ( x - > Arrays.setAll ( cells [ x ] , e - > MathX.fastNextInt ( 1 ) == 0 ? true : false ) ) ; cells = new boolean [ this.collums ] [ this.rows ] ; IntStream.range ( 0 , cells.length ) .forEach ( x - > Arrays.setAll ( cells [ x ] , e - > true ) ) ;"
"int startIndex = 2 ; int endIndex = 4 ; List < Integer > list = new ArrayList < > ( ) ; list.add ( 1 ) ; list.add ( 2 ) ; list.add ( 3 ) ; list.add ( 4 ) ; list.add ( 5 ) ; list.add ( 6 ) ; List < Integer > toReverse = list.subList ( startIndex , endIndex+1 ) ; Collections.reverse ( toReverse ) ; list.removeAll ( toReverse ) ; list.addAll ( startIndex , toReverse ) ;"
"@ GetMapping ( `` /authentication '' ) public String testAuthentication ( Authentication authentication ) { UserDetailsStub userDetailsStub = ( UserDetailsStub ) authentication.getPrincipal ( ) ; return userDetailsStub.getUsername ( ) ; } @ Import ( SecurityConfiguration.class ) @ RunWith ( SpringRunner.class ) @ WebMvcTest ( PDPController.class ) @ AutoConfigureMockMvc ( addFilters = false ) public class PDPControllerTests { @ Autowired private MockMvc mvc ; @ MockBean ( name = `` userDetailsService '' ) private MyUserDetailsService userDetailsService ; //.. @ PostConstruct public void setup ( ) { given ( userDetailsService.loadUserByUsername ( anyString ( ) ) ) .willReturn ( new UserDetailsStub ( ) ) ; } //.. @ Test @ WithUserDetails ( value = `` username '' , userDetailsServiceBeanName = `` userDetailsService '' ) public void testAuthentication ( ) throws Exception { mvc.perform ( get ( `` /pdps/authentication '' ) .secure ( true ) .contentType ( MediaType.APPLICATION_JSON ) ) .andExpect ( status ( ) .isOk ( ) ) ; } }"
public ArrayList < String > getArrayList ( ) { ArrayList < String > aL = setOfStrings.stream ( ) .filter ( remove some ) .filter ( remove some more ) .map ( i - > createStringAbout ( i ) ) .collect ( Collectors.toCollection ( ArrayList : :new ) ) ; if ( aL.size ( ) < 1 ) { aL.add ( `` No items passed the test '' ) ; } return aL ; } return set.stream ( ) ...
"Map < String , MyClass > x = new HashMap < > ( ) ;"
"Map < Integer , Integer > ranks = new HashMap < Integer , Integer > ( ) ; input [ 1=6 , 5=13 , 2= 11 , 4 = 14 ] result [ 4,5,2,1 ] input [ 2=6 , 5=13 , 1= 11 , 3=13 ,9 = 22 ] result [ 9,3,5,1,2 ] List < Integer > ranksList = ranks.entrySet ( ) .stream ( ) .sorted ( Map.Entry.comparingByValue ( Comparator.reverseOrder ( ) ) ) .map ( Map.Entry : :getKey ) .limit ( k ) .collect ( Collectors.toList ( ) ) ;"
"try { mask = includeUserDefinedFunctions ( mask ) ; ScriptEngine engine = manager.getEngineByName ( `` JavaScript '' ) ; for ( SongFieldName next : SongFieldName.values ( ) ) { if ( next.getScriptVar ( ) ! =null & & next.getSongFieldKey ( ) ! =null ) { engine.put ( next.getScriptVar ( ) , cleanValue ( song.getFieldValueSpaceSeparatedOrEmptyString ( next.getSongFieldKey ( ) ) , song ) ) ; } } String result = ( String ) engine.eval ( mask ) ; return result ; } catch ( ScriptException se ) { throw se ; }"
"public class A { public int x ; } public class B extends A { public int x ; } A a = new A ( ) ; B b = new B ( ) ; a.x = 1 ; b.x = 2 ; A z = b ; System.out.println ( z.x ) ; // Prints 0 , but why ?"
"require 'java'require 'JOCL-0.1.7.jar'platforms = org.jocl.cl_platform_id.newputs platforms.classorg.jocl.CL.clGetPlatformIDs ( 1 , platforms , nil ) # < Class:0x10191777e > TypeError : can not convert instance of class org.jruby.java.proxies.ConcreteJavaProxy to class [ Lorg.jocl.cl_platform_id ; LukeTest at test.rb:29 ( root ) at test.rb:4 platforms = org.jocl.cl_platform_id [ 1 ] .new context_properties = org.jocl.cl_context_properties.new ( ) context_properties.addProperty ( org.jocl.CL : :CL_CONTEXT_PLATFORM , platforms [ 0 ] ) CodegenUtils.java:98 : in ` human ' : java.lang.NullPointerException from CodegenUtils.java:152 : in ` prettyParams ' from CallableSelector.java:462 : in ` argumentError ' from CallableSelector.java:436 : in ` argTypesDoNotMatch ' from RubyToJavaInvoker.java:248 : in ` findCallableArityTwo ' from InstanceMethodInvoker.java:66 : in ` call ' from CachingCallSite.java:332 : in ` cacheAndCall ' from CachingCallSite.java:203 : in ` call ' from test.rb:36 : in ` module__0 $ RUBY $ LukeTest ' from test.rb : -1 : in ` module__0 $ RUBY $ LukeTest ' from test.rb:4 : in ` __file__ ' from test.rb : -1 : in ` load ' from Ruby.java:679 : in ` runScript ' from Ruby.java:672 : in ` runScript ' from Ruby.java:579 : in ` runNormally ' from Ruby.java:428 : in ` runFromMain ' from Main.java:278 : in ` doRunFromMain ' from Main.java:198 : in ` internalRun ' from Main.java:164 : in ` run ' from Main.java:148 : in ` run ' from Main.java:128 : in ` main '"
"public static void recreate ( ) { // This does NOT work Recreation.assertTrue ( identity ( ( x ) - > Boolean.TRUE ) ) ; // This DOES work Recreation.assertTrue ( identity ( ( String x ) - > Boolean.TRUE ) ) ; } private static class Recreation { public static void assertTrue ( boolean b ) { System.out.println ( `` boolean argument : `` + b ) ; } // If this method is removed , the code will compile . public static void assertTrue ( Supplier < Boolean > booleanSupplier ) { System.out.println ( `` supplier argument : `` + booleanSupplier.toString ( ) ) ; } } private static < K > K identity ( Function < String , K > function ) { return function.apply ( `` hello '' ) ; } Error : ( 10 , 35 ) incompatible types : inference variable K has incompatible bounds lower bounds : java.util.function.Supplier < java.lang.Boolean > , java.lang.Object lower bounds : java.lang.Boolean openjdk version `` 11.0.1 '' 2018-10-16OpenJDK Runtime Environment ( build 11.0.1+13-Ubuntu-3ubuntu114.04ppa1 ) OpenJDK 64-Bit Server VM ( build 11.0.1+13-Ubuntu-3ubuntu114.04ppa1 , mixed mode , sharing ) OS : Ubuntu 14.04.5 LTS java version `` 1.8.0_31 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_31-b13 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.31-b07 , mixed mode ) exit status 1Main.java:10 : error : incompatible types : inferred type does not conform to upper bound ( s ) Recreation.assertTrue ( identity ( ( x ) - > Boolean.TRUE ) ) ; ^ inferred : Boolean upper bound ( s ) : Supplier < Boolean > , ObjectNote : Some messages have been simplified ; recompile with -Xdiags : verbose to get full output1 error"
"package ia.quant.nextgen.entry ; import com.google.common.collect.ArrayListMultimap ; import java.util.function.Consumer ; /** * Created by arpeke on 2015-12-18 . */public final class SampleMain { public static void main ( String [ ] argArr ) { final ArrayListMultimap < Void , Void > arrayListMultimap = ArrayListMultimap.create ( ) ; arrayListMultimap.clear ( ) ; final Consumer < ArrayListMultimap > arrayListMultimapConsumer = ArrayListMultimap : :clear ; arrayListMultimapConsumer.accept ( arrayListMultimap ) ; } } Exception in thread `` main '' java.lang.IllegalAccessError : tried to access class com.google.common.collect.AbstractMapBasedMultimap from class ia.quant.nextgen.entry.SampleMainat ia.quant.nextgen.entry.SampleMain.lambda $ main $ 1 ( SampleMain.java:17 ) at ia.quant.nextgen.entry.SampleMain.main ( SampleMain.java:18 ) final Consumer < ArrayListMultimap > arrayListMultimapConsumer = x - > x.clear ( ) ; arrayListMultimapConsumer.accept ( arrayListMultimap ) ;"
public class MainThread { public static void main ( String [ ] args ) { try { badMethod ( ) ; System.out.print ( `` A '' ) ; } catch ( Exception ex ) { System.out.print ( `` B '' ) ; } finally { System.out.print ( `` C '' ) ; } System.out.print ( `` D '' ) ; } public static void badMethod ( ) { throw new Error ( ) ; /* Line 22 */ } } CException in thread `` main '' java.lang.Error at MainThread.badMethod ( MainThread.java:22 ) at MainThread.main ( MainThread.java:7 ) Exception in thread `` main '' java.lang.Error at MainThread.badMethod ( MainThread.java:22 ) at MainThread.main ( MainThread.java:7 ) C
"public enum MyEnum { first { class First { } } , second { class Second { } } ; } public enum MyEnum { first { class First { } public Object getObject ( ) { return new First ( ) ; } } , second { class Second { } public Object getObject ( ) { return new Second ( ) ; } } ; public abstract Object getObject ( ) ; } public class Main { public static void main ( String [ ] args ) { System.out.println ( MyEnum.first.getObject ( ) .getClass ( ) ) ; System.out.println ( MyEnum.second.getObject ( ) .getClass ( ) ) ; } }"
ArrayList < Integer > al=new ArrayList < Integer > ( ) ; al.add ( `` wwww '' ) ; ArrayList al=new ArrayList < Integer > ( ) ; al.add ( `` wwww '' ) ; ArrayList al=new ArrayList < Integer > ( ) ;
int \u65549 = 9 ; System.out.println ( \u65549 ) ; 9 System.out.println ( Character.isJavaIdentifierStart ( \u65549 ) ) ; false int x = \u65549 ; System.out.println ( Character.isJavaIdentifierStart ( x ) ) ; false
public class Stack { private Object [ ] elements ; private int size = 0 ; private static final int DEFAULT_INITIAL_CAPACITY = 16 ; public Stack ( ) { ... } public void push ( Object e ) { ... } public Object pop ( ) { ... } private void ensureCapacity ( ) { ... } //omitted for simplicity } @ Override public Stack clone ( ) { try { Stack result = ( Stack ) super.clone ( ) ; result.elements = elements.clone ( ) ; return result ; } catch ( CloneNotSupportedException e ) { throw new AssertionError ( ) ; } }
"public void foo ( Class < ? extends Exception > cl , List < ? extends Exception > ls ) throws Exception { ls.add ( cl.newInstance ( ) ) ; } public < T extends Exception > void foo ( Class < T > cl , List < T > ls ) throws Exception { ls.add ( cl.newInstance ( ) ) ; } private Map < Class < ? extends Foo > , ? extends Foo > map = ... ; @ SuppressWarnings ( `` unchecked '' ) private < T extends Foo > T getFoo ( Class < T > cl ) { return ( ( T ) map.get ( cl ) ) ; } < T extends Foo > Map < Class < T > , T > map = ... ;"
"import javax.swing . * ; import static java.lang.Math . * ; import java.awt . * ; public class transparencyExample { //Declaring constants public static final Color [ ] MAINFRAME = { new Color ( 0x35ce4a ) , new Color ( 0x111111 ) } ; //Creating static variables and methods private static JLabel tempLabel ; private static JLabel [ ] [ ] table = new JLabel [ 54 ] [ 96 ] ; private static JPanel layout = new JPanel ( new GridLayout ( 54,96 ) ) ; private static JPanel background = new JPanel ( ) ; private static BoxLayout box = new BoxLayout ( background , 0 ) ; private static JFrame frame = new JFrame ( `` Transparency Example '' ) ; private static void initialise ( ) { //Adding labels to table for ( int i = 0 ; i < 5184 ; i++ ) { tempLabel = new JLabel ( `` M '' , SwingConstants.CENTER ) ; tempLabel.setFont ( new Font ( `` Courier '' , Font.PLAIN , 15 ) ) ; table [ ( int ) floor ( ( double ) i / 96 ) ] [ i % 96 ] = tempLabel ; } //Laying out the table layout.setPreferredSize ( new Dimension ( 1056 , 594 ) ) ; layout.setOpaque ( false ) ; for ( int i = 0 ; i < 5184 ; i++ ) { layout.add ( table [ ( int ) floor ( ( double ) i / 96 ) ] [ i % 96 ] ) ; } background.setBackground ( MAINFRAME [ 1 ] ) ; background.add ( layout ) ; //Laying out the frame frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.add ( background ) ; frame.pack ( ) ; frame.setLocationRelativeTo ( null ) ; frame.setVisible ( true ) ; } //Fill table public static void fill ( String s ) { for ( int i = 0 ; i < 5184 ; i++ ) { table [ ( int ) floor ( ( double ) i / 96 ) ] [ i % 96 ] .setText ( String.valueOf ( s.charAt ( i ) ) ) ; } } public static void main ( String [ ] args ) { initialise ( ) ; transparencyExample.fill ( `` aaaaaaaa a a aa a _____ a a _ ___ a a_ __ a a _ _ a pqyjg aa _ _ a a _ _ a a _ _ a a _ _ a a _ _ a a _ _ a a __ _ a a __ __ a a _______ a a a a aa aa a aa aa aa aaaa `` ) ; } }"
"private void iterate ( List < Worker > workers ) { SortedSet < Worker > set = new TreeSet < > ( new Comparator < Worker > ( ) { @ Override public int compare ( Worker w0 , Worker w1 ) { return Double.compare ( w0.average , w1.average ) ; } } ) ; // ... } static final Comparator < Worker > COMPARATOR = new Comparator < Worker > ( ) { @ Override public int compare ( Worker w0 , Worker w1 ) { return Double.compare ( w0.average , w1.average ) ; } } ; private void iterate ( List < Worker > workers ) { SortedSet < Worker > set = new TreeSet < > ( COMPARATOR ) ; // ... }"
"public static void main ( String ... args ) { if ( 100 == 100L ) System.out.println ( `` first trial happened '' ) ; if ( Integer.valueOf ( 100 ) .equals ( Long.valueOf ( 100 ) ) ) { System.out.println ( `` second trial was true '' ) ; } else { System.out.println ( `` second trial was false '' ) ; } if ( 100D == 100L ) System.out.println ( `` third trial , fun with doubles '' ) ; } first trial happenedsecond trial was falsethird trial , fun with doubles"
package test ; import java.util.LinkedList ; public class Test { static int i = 0 ; private interface Handler { public void handle ( Object o ) ; } private static class SuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class NoSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LulSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LilSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LolSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LalSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LylSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } private static class LzlSuperHandler implements Handler { public void handle ( Object o ) { i += 1 ; } } public static void main ( String [ ] args ) { LinkedList < Handler > ll = new LinkedList < Handler > ( ) ; for ( int j = 0 ; j < 100 ; j++ ) { if ( ( j % 8 ) == 0 ) ll.add ( new SuperHandler ( ) ) ; if ( ( j % 8 ) == 1 ) ll.add ( new NoSuperHandler ( ) ) ; if ( ( j % 8 ) == 2 ) ll.add ( new LulSuperHandler ( ) ) ; if ( ( j % 8 ) == 3 ) ll.add ( new LilSuperHandler ( ) ) ; if ( ( j % 8 ) == 4 ) ll.add ( new LolSuperHandler ( ) ) ; if ( ( j % 8 ) == 5 ) ll.add ( new LalSuperHandler ( ) ) ; if ( ( j % 8 ) == 6 ) ll.add ( new LylSuperHandler ( ) ) ; if ( ( j % 8 ) == 7 ) ll.add ( new LzlSuperHandler ( ) ) ; } long begin = System.currentTimeMillis ( ) ; for ( int j = 0 ; j < 1000000 ; j++ ) for ( Handler h : ll ) h.handle ( null ) ; System.out.println ( `` time in ms : `` + ( System.currentTimeMillis ( ) - begin ) ) ; System.out.println ( `` i : `` + i ) ; } } for ( int j = 0 ; j < 100 ; j++ ) { if ( ( j % 2 ) == 0 ) ll.add ( new SuperHandler ( ) ) ; if ( ( j % 2 ) == 1 ) ll.add ( new NoSuperHandler ( ) ) ; }
x == y == 0 r1 = x ; if ( r1 ! = 0 ) y = 1 ; r2 = y ; if ( r2 ! = 0 ) x = 1 ; x == y == 0 r1 = x ; y = r1 ; r2 = y ; x = r2 ;
"class Test { public boolean xor ( boolean p , boolean q ) { return p ^ q ; } public boolean inequal ( boolean p , boolean q ) { return p ! = q ; } } $ javap -c TestCompiled from `` Test.java '' class Test { Test ( ) ; Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object . `` < init > '' : ( ) V 4 : return public boolean xor ( boolean , boolean ) ; Code : 0 : iload_1 1 : iload_2 2 : ixor 3 : ireturn public boolean inequal ( boolean , boolean ) ; Code : 0 : iload_1 1 : iload_2 2 : if_icmpeq 9 5 : iconst_1 6 : goto 10 9 : iconst_0 10 : ireturn } user= > ( let [ t ( Test . ) ] ( bench ( .xor t true false ) ) ) Evaluation count : 4681301040 in 60 samples of 78021684 calls . Execution time mean : 4.273428 ns Execution time std-deviation : 0.168423 ns Execution time lower quantile : 4.044192 ns ( 2.5 % ) Execution time upper quantile : 4.649796 ns ( 97.5 % ) Overhead used : 8.723577 nsFound 2 outliers in 60 samples ( 3.3333 % ) low-severe 2 ( 3.3333 % ) Variance from outliers : 25.4745 % Variance is moderately inflated by outliersuser= > ( let [ t ( Test . ) ] ( bench ( .inequal t true false ) ) ) Evaluation count : 4570766220 in 60 samples of 76179437 calls . Execution time mean : 4.492847 ns Execution time std-deviation : 0.162946 ns Execution time lower quantile : 4.282077 ns ( 2.5 % ) Execution time upper quantile : 4.813433 ns ( 97.5 % ) Overhead used : 8.723577 nsFound 2 outliers in 60 samples ( 3.3333 % ) low-severe 2 ( 3.3333 % ) Variance from outliers : 22.2554 % Variance is moderately inflated by outliers"
"interface MyInterface { public int test ( int i ) ; } class A implements MyInterface { public int test ( int i ) { return ( int ) Math.sin ( Math.cos ( i ) ) ; } } @ State ( Scope.Thread ) public class MyBenchmark { public MyInterface inter ; @ Setup ( Level.Trial ) public void init ( ) { inter = new A ( ) ; } @ Benchmark public void testMethod ( Blackhole sink ) { int [ ] res = new int [ 2 ] ; res [ 0 ] = inter.test ( 1 ) ; res [ 1 ] = inter.test ( 1 ) ; sink.consume ( res ) ; } } ImmutableOopMap { } pc offsets : 796 812 828 Compiled method ( c2 ) 402 563 4 org.sample.MyBenchmark : :testMethod ( 42 bytes ) total in heap [ 0x00007efd3d74fb90,0x00007efd3d7503a0 ] = 2064 relocation [ 0x00007efd3d74fcd0,0x00007efd3d74fd08 ] = 56 constants [ 0x00007efd3d74fd20,0x00007efd3d74fd40 ] = 32 main code [ 0x00007efd3d74fd40,0x00007efd3d750040 ] = 768 stub code [ 0x00007efd3d750040,0x00007efd3d750068 ] = 40 oops [ 0x00007efd3d750068,0x00007efd3d750070 ] = 8 metadata [ 0x00007efd3d750070,0x00007efd3d750080 ] = 16 scopes data [ 0x00007efd3d750080,0x00007efd3d750108 ] = 136 scopes pcs [ 0x00007efd3d750108,0x00007efd3d750358 ] = 592 dependencies [ 0x00007efd3d750358,0x00007efd3d750360 ] = 8 handler table [ 0x00007efd3d750360,0x00007efd3d750390 ] = 48 nul chk table [ 0x00007efd3d750390,0x00007efd3d7503a0 ] = 16 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- org/sample/MyBenchmark.testMethod ( Lorg/openjdk/jmh/infra/Blackhole ; ) V [ 0x00007efd3d74fd40 , 0x00007efd3d750068 ] 808 bytes [ Constants ] 0x00007efd3d74fd20 ( offset : 0 ) : 0x00000000 0x3ff0000000000000 0x00007efd3d74fd24 ( offset : 4 ) : 0x3ff00000 0x00007efd3d74fd28 ( offset : 8 ) : 0xf4f4f4f4 0xf4f4f4f4f4f4f4f4 0x00007efd3d74fd2c ( offset : 12 ) : 0xf4f4f4f4 0x00007efd3d74fd30 ( offset : 16 ) : 0xf4f4f4f4 0xf4f4f4f4f4f4f4f4 0x00007efd3d74fd34 ( offset : 20 ) : 0xf4f4f4f4 0x00007efd3d74fd38 ( offset : 24 ) : 0xf4f4f4f4 0xf4f4f4f4f4f4f4f4 0x00007efd3d74fd3c ( offset : 28 ) : 0xf4f4f4f4Argument 0 is unknown.RIP : 0x7efd3d74fd40 Code size : 0x00000328 [ Entry Point ] # { method } { 0x00007efd35857f08 } 'testMethod ' ' ( Lorg/openjdk/jmh/infra/Blackhole ; ) V ' in 'org/sample/MyBenchmark ' # this : rsi : rsi = 'org/sample/MyBenchmark ' # parm0 : rdx : rdx = 'org/openjdk/jmh/infra/Blackhole ' # [ sp+0x30 ] ( sp of caller ) 0x00007efd3d74fd40 : cmp 0x8 ( % rsi ) , % rax ; { no_reloc } 0x00007efd3d74fd44 : jne 0x7efd35c99c60 ; { runtime_call ic_miss_stub } 0x00007efd3d74fd4a : nop 0x00007efd3d74fd4c : nopl 0x0 ( % rax ) [ Verified Entry Point ] 0x00007efd3d74fd50 : mov % eax,0xfffffffffffec000 ( % rsp ) 0x00007efd3d74fd57 : push % rbp 0x00007efd3d74fd58 : sub $ 0x20 , % rsp ; *synchronization entry ; - org.sample.MyBenchmark : :testMethod @ -1 ( line 64 ) 0x00007efd3d74fd5c : mov % rdx , ( % rsp ) 0x00007efd3d74fd60 : mov % rsi , % rbp 0x00007efd3d74fd63 : mov 0x60 ( % r15 ) , % rbx 0x00007efd3d74fd67 : mov % rbx , % r10 0x00007efd3d74fd6a : add $ 0x1a8 , % r10 0x00007efd3d74fd71 : cmp 0x70 ( % r15 ) , % r10 0x00007efd3d74fd75 : jnb 0x7efd3d74ffcc 0x00007efd3d74fd7b : mov % r10,0x60 ( % r15 ) 0x00007efd3d74fd7f : prefetchnta 0xc0 ( % r10 ) 0x00007efd3d74fd87 : movq $ 0x1 , ( % rbx ) 0x00007efd3d74fd8e : prefetchnta 0x100 ( % r10 ) 0x00007efd3d74fd96 : mov % rbx , % rdi 0x00007efd3d74fd99 : add $ 0x18 , % rdi 0x00007efd3d74fd9d : prefetchnta 0x140 ( % r10 ) 0x00007efd3d74fda5 : prefetchnta 0x180 ( % r10 ) 0x00007efd3d74fdad : movabs $ 0x7efd350d9b38 , % r10 ; { metadata ( { type array int } ) } 0x00007efd3d74fdb7 : mov % r10,0x8 ( % rbx ) 0x00007efd3d74fdbb : movl $ 0x64,0x10 ( % rbx ) 0x00007efd3d74fdc2 : mov $ 0x32 , % ecx 0x00007efd3d74fdc7 : xor % rax , % rax 0x00007efd3d74fdca : shl $ 0x3 , % rcx 0x00007efd3d74fdce : rep stosb ( % rdi ) ; *newarray { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 4 ( line 65 ) 0x00007efd3d74fdd1 : mov 0x10 ( % rbp ) , % r10 ; *getfield inter { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 20 ( line 67 ) 0x00007efd3d74fdd5 : mov 0x8 ( % r10 ) , % r10 ; implicit exception : dispatches to 0x00007efd3d74fffd 0x00007efd3d74fdd9 : movabs $ 0x7efd3587f8c8 , % r11 ; { metadata ( 'org/sample/A ' ) } 0x00007efd3d74fde3 : cmp % r11 , % r10 0x00007efd3d74fde6 : jne 0x7efd3d74fffd ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fdec : vmovsd 0xffffff2c ( % rip ) , % xmm0 ; { section_word } 0x00007efd3d74fdf4 : vmovq % xmm0 , % r13 0x00007efd3d74fdf9 : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74fe03 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe06 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74fe10 : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe13 : vcvttsd2si % xmm0 , % r11d 0x00007efd3d74fe17 : cmp $ 0x80000000 , % r11d 0x00007efd3d74fe1e : jne 0x7efd3d74fe30 0x00007efd3d74fe20 : sub $ 0x8 , % rsp 0x00007efd3d74fe24 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74fe29 : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74fe2e : pop % r11 0x00007efd3d74fe30 : mov % r11d,0x18 ( % rbx ) ; *iastore { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 29 ( line 67 ) 0x00007efd3d74fe34 : mov $ 0x1 , % ebp 0x00007efd3d74fe39 : jmp 0x7efd3d74fe43 0x00007efd3d74fe3b : nopl 0x0 ( % rax , % rax ) 0x00007efd3d74fe40 : mov % r11d , % ebp ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe43 : vmovq % r13 , % xmm0 0x00007efd3d74fe48 : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74fe52 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe55 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74fe5f : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe62 : vcvttsd2si % xmm0 , % r11d 0x00007efd3d74fe66 : cmp $ 0x80000000 , % r11d 0x00007efd3d74fe6d : jne 0x7efd3d74fe7f 0x00007efd3d74fe6f : sub $ 0x8 , % rsp 0x00007efd3d74fe73 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74fe78 : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74fe7d : pop % r11 0x00007efd3d74fe7f : mov % r11d,0x18 ( % rbx , % rbp,4 ) ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe84 : vmovq % r13 , % xmm0 0x00007efd3d74fe89 : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74fe93 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fe96 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74fea0 : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fea3 : vcvttsd2si % xmm0 , % r11d 0x00007efd3d74fea7 : cmp $ 0x80000000 , % r11d 0x00007efd3d74feae : jne 0x7efd3d74fec0 0x00007efd3d74feb0 : sub $ 0x8 , % rsp 0x00007efd3d74feb4 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74feb9 : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74febe : pop % r11 0x00007efd3d74fec0 : mov % r11d,0x1c ( % rbx , % rbp,4 ) ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fec5 : vmovq % r13 , % xmm0 0x00007efd3d74feca : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74fed4 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fed7 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74fee1 : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74fee4 : vcvttsd2si % xmm0 , % r11d 0x00007efd3d74fee8 : cmp $ 0x80000000 , % r11d 0x00007efd3d74feef : jne 0x7efd3d74ff01 0x00007efd3d74fef1 : sub $ 0x8 , % rsp 0x00007efd3d74fef5 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74fefa : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74feff : pop % r11 0x00007efd3d74ff01 : mov % r11d,0x20 ( % rbx , % rbp,4 ) ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff06 : vmovq % r13 , % xmm0 0x00007efd3d74ff0b : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74ff15 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff18 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74ff22 : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff25 : vcvttsd2si % xmm0 , % r11d 0x00007efd3d74ff29 : cmp $ 0x80000000 , % r11d 0x00007efd3d74ff30 : jne 0x7efd3d74ff42 0x00007efd3d74ff32 : sub $ 0x8 , % rsp 0x00007efd3d74ff36 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74ff3b : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74ff40 : pop % r11 0x00007efd3d74ff42 : mov % r11d,0x24 ( % rbx , % rbp,4 ) ; *iastore { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 29 ( line 67 ) 0x00007efd3d74ff47 : mov % ebp , % r11d 0x00007efd3d74ff4a : add $ 0x4 , % r11d ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 30 ( line 66 ) 0x00007efd3d74ff4e : cmp $ 0x61 , % r11d 0x00007efd3d74ff52 : jl 0x7efd3d74fe40 ; *if_icmpge { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 13 ( line 66 ) 0x00007efd3d74ff58 : cmp $ 0x64 , % r11d 0x00007efd3d74ff5c : jnl 0x7efd3d74ffac 0x00007efd3d74ff5e : add $ 0x4 , % ebp ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 30 ( line 66 ) 0x00007efd3d74ff61 : nop ; *synchronization entry ; - org.sample.A : :test @ -1 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff64 : vmovq % r13 , % xmm0 0x00007efd3d74ff69 : movabs $ 0x7efd35c53b33 , % r10 0x00007efd3d74ff73 : callq % r10 ; *invokestatic cos { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 2 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff76 : movabs $ 0x7efd35c5349c , % r10 0x00007efd3d74ff80 : callq % r10 ; *invokestatic sin { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.A : :test @ 5 ( line 49 ) ; - org.sample.MyBenchmark : :testMethod @ 24 ( line 67 ) 0x00007efd3d74ff83 : vcvttsd2si % xmm0 , % r10d 0x00007efd3d74ff87 : cmp $ 0x80000000 , % r10d 0x00007efd3d74ff8e : jne 0x7efd3d74ffa0 0x00007efd3d74ff90 : sub $ 0x8 , % rsp 0x00007efd3d74ff94 : vmovsd % xmm0 , ( % rsp ) 0x00007efd3d74ff99 : callq 0x7efd35ca745b ; { runtime_call StubRoutines ( 2 ) } 0x00007efd3d74ff9e : pop % r10 0x00007efd3d74ffa0 : mov % r10d,0x18 ( % rbx , % rbp,4 ) ; *iastore { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 29 ( line 67 ) 0x00007efd3d74ffa5 : incl % ebp ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 30 ( line 66 ) 0x00007efd3d74ffa7 : cmp $ 0x64 , % ebp 0x00007efd3d74ffaa : jl 0x7efd3d74ff64 0x00007efd3d74ffac : mov ( % rsp ) , % rsi 0x00007efd3d74ffb0 : test % rsi , % rsi 0x00007efd3d74ffb3 : je 0x7efd3d74ffe8 ; *if_icmpge { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 13 ( line 66 ) 0x00007efd3d74ffb5 : mov % rbx , % rdx 0x00007efd3d74ffb8 : nop 0x00007efd3d74ffbb : callq 0x7efd362c50e0 ; ImmutableOopMap { } ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 38 ( line 69 ) ; { optimized virtual_call } 0x00007efd3d74ffc0 : add $ 0x20 , % rsp 0x00007efd3d74ffc4 : pop % rbp 0x00007efd3d74ffc5 : test % eax,0x18f98035 ( % rip ) ; { poll_return } 0x00007efd3d74ffcb : retq 0x00007efd3d74ffcc : mov $ 0x64 , % edx 0x00007efd3d74ffd1 : movabs $ 0x7efd350d9b38 , % rsi ; { metadata ( { type array int } ) } 0x00007efd3d74ffdb : callq 0x7efd35d5fd60 ; ImmutableOopMap { rbp=Oop [ 0 ] =Oop } ; *newarray { reexecute=0 rethrow=0 return_oop=1 } ; - org.sample.MyBenchmark : :testMethod @ 4 ( line 65 ) ; { runtime_call _new_array_Java } 0x00007efd3d74ffe0 : mov % rax , % rbx 0x00007efd3d74ffe3 : jmpq 0x7efd3d74fdd1 0x00007efd3d74ffe8 : mov $ 0xfffffff6 , % esi 0x00007efd3d74ffed : mov % rbx , % rbp 0x00007efd3d74fff0 : nop 0x00007efd3d74fff3 : callq 0x7efd35c9b560 ; ImmutableOopMap { rbp=Oop } ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 38 ( line 69 ) ; { runtime_call UncommonTrapBlob } 0x00007efd3d74fff8 : callq 0x7efd55167aa0 ; { runtime_call } 0x00007efd3d74fffd : mov $ 0xffffff86 , % esi 0x00007efd3d750002 : mov % rbx,0x8 ( % rsp ) 0x00007efd3d750007 : callq 0x7efd35c9b560 ; ImmutableOopMap { rbp=Oop [ 0 ] =Oop [ 8 ] =Oop } ; *aload_3 { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 16 ( line 67 ) ; { runtime_call UncommonTrapBlob } 0x00007efd3d75000c : callq 0x7efd55167aa0 ; *newarray { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 4 ( line 65 ) ; { runtime_call } 0x00007efd3d750011 : mov % rax , % rsi 0x00007efd3d750014 : jmp 0x7efd3d750019 0x00007efd3d750016 : mov % rax , % rsi ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } ; - org.sample.MyBenchmark : :testMethod @ 38 ( line 69 ) 0x00007efd3d750019 : add $ 0x20 , % rsp 0x00007efd3d75001d : pop % rbp 0x00007efd3d75001e : jmpq 0x7efd35d64160 ; { runtime_call _rethrow_Java } 0x00007efd3d750023 : hlt 0x00007efd3d750024 : hlt 0x00007efd3d750025 : hlt 0x00007efd3d750026 : hlt 0x00007efd3d750027 : hlt 0x00007efd3d750028 : hlt 0x00007efd3d750029 : hlt 0x00007efd3d75002a : hlt 0x00007efd3d75002b : hlt 0x00007efd3d75002c : hlt 0x00007efd3d75002d : hlt 0x00007efd3d75002e : hlt 0x00007efd3d75002f : hlt 0x00007efd3d750030 : hlt 0x00007efd3d750031 : hlt 0x00007efd3d750032 : hlt 0x00007efd3d750033 : hlt 0x00007efd3d750034 : hlt 0x00007efd3d750035 : hlt 0x00007efd3d750036 : hlt 0x00007efd3d750037 : hlt 0x00007efd3d750038 : hlt 0x00007efd3d750039 : hlt 0x00007efd3d75003a : hlt 0x00007efd3d75003b : hlt 0x00007efd3d75003c : hlt 0x00007efd3d75003d : hlt 0x00007efd3d75003e : hlt 0x00007efd3d75003f : hlt $ java -versionopenjdk version `` 9-internal '' OpenJDK Runtime Environment ( build 9-internal+0-2016-04-14-195246.buildd.src ) OpenJDK 64-Bit Server VM ( build 9-internal+0-2016-04-14-195246.buildd.src , mixed mode ) # jmh version < jmh.version > 1.19 < /jmh.version >"
public void send ( String [ ] payloadarr ) throws IOException { byte [ ] payload = { } ; for ( int i = 0 ; i < payloadarr.length ; i++ ) { byte x = ( byte ) payloadarr [ i ] ; payload [ i ] = x ; } //do byte stuff with payload }
"Ringbuffer < String > buffer = this.hazelcastInstance.getRingbuffer ( `` testBuffer '' ) ; buffer.add ( `` a '' ) ; buffer.add ( `` b '' ) ; buffer.add ( `` c '' ) ; Long sequence = buffer.headSequence ( ) ; ICompletableFuture < ReadResultSet < String > > resultSetFuture = buffer.readManyAsync ( sequence , 0 , 3 , null ) ; ReadResultSet < String > resultSet = resultSetFuture.get ( ) ; System.out.println ( `` *** readManyAsync *** readCount : `` + resultSet.readCount ( ) ) ; int count = 0 ; for ( String s : resultSet ) { System.out.println ( count + `` - `` + s ) ; count++ ; } System.out.println ( `` *** readOne *** '' ) ; for ( int i = 0 ; i < 3 ; i++ ) { System.out.println ( i + `` - `` + buffer.readOne ( i ) ) ; } *** readManyAsync *** readCount : 0*** readOne ***0 - a1 - b2 - c"
System.setSecurityManager ( new SecurityManager ( ) { public void checkPermission ( Permission permission ) { if ( /*caller class is not loaded by the trusted classloader*/ ) { throw new SecurityException ( `` You do not have permissions . `` ) ; } } } ) ;
"import java.util.Arrays ; import java.util.List ; public class Arrays { public void array1 ( ) { List < Integer > bigs = Arrays.asList ( 100,200,300 ) ; System.out.println ( sumInteger ( bigs ) == sum ( bigs ) ) ; // 1 . Output : true System.out.println ( sumInteger ( bigs ) == sumInteger ( bigs ) ) ; //2 . Output : false Integer ab = 10 ; System.out.println ( ab == 10 ) ; //3 . Output : true Integer bc = 10 ; System.out.println ( bc == ab ) ; //4 . Output : true } public static int sum ( List < Integer > ints ) { int s = 0 ; for ( int n : ints ) { s += n ; } return s ; } public static Integer sumInteger ( List < Integer > ints ) { Integer s = 0 ; for ( Integer n : ints ) { s += n ; } return s ; } public static void main ( String [ ] args ) { Array tm = new Array ( ) ; tm.array1 ( ) ; } }"
"public static < T extends Enum < T > > T valueOf ( Class < T > enumType , String name ) { T result = enumType.enumConstantDirectory ( ) .get ( name ) ; if ( result ! = null ) return result ; if ( name == null ) throw new NullPointerException ( `` Name is null '' ) ; throw new IllegalArgumentException ( `` No enum constant `` + enumType.getCanonicalName ( ) + `` . '' + name ) ; } MyEnum myEnum = Enum.valueOf ( MyEnum.class , null ) ; // The NPE should be thrown"
"private InputStream doRawGET ( String url ) throws MalformedURLException , IOException { try { URL url = new URL ( url ) ; HttpURLConnection con = ( HttpURLConnection ) url.openConnection ( ) ; con.setConnectTimeout ( 5000 ) ; con.setReadTimeout ( 5000 ) ; return con.getInputStream ( ) ; } catch ( SocketTimeoutException ex ) { throw new IOException ( `` Timeout attempting to contact Web Relay at `` + url ) ; } } 1325 respCode = getResponseCode ( ) ; 1326 if ( respCode == -1 ) { 1327 disconnectInternal ( ) ; 1328 throw new IOException ( `` Invalid Http response '' ) ; 1329 }"
"`` status '' : 400 , '' message '' : `` Bad Content-Type header value : 'application/json ; bla-bla ' ''"
public void random ( ) { int n = 43261596 ; System.out.println ( Integer.toBinaryString ( n ) ) ; n = n + 0 & 1 ; //binary representation of n is 0 //n += 0 & 1 ; //result is the same as n System.out.println ( Integer.toBinaryString ( n ) ) ; }
"/** * The key words `` MUST '' , `` MUST NOT '' , `` REQUIRED '' , `` SHALL '' , `` SHALL NOT '' , * `` SHOULD '' , `` SHOULD NOT '' , `` RECOMMENDED '' , `` MAY '' , and `` OPTIONAL '' in this * document are to be interpreted as described in RFC 2119 . * * You MUST NOT instantiate this class more than once during the application 's * lifecycle . If you try to do so , an exception SHALL be thrown . * * You SHOULD be able to instantiate this class more than once when unit * testing . * * */public class LifeCycle { private static final AtomicInteger cnt = new AtomicInteger ( 0 ) ; @ NotNull public static LifeCycle getNewLifeCycle ( ) { if ( cnt.incrementAndGet ( ) > 1 & & App.isRealApp ( ) ) { throw new IllegalStateException ( `` Class is already instantiated '' ) ; } return new LifeCycle ( ) ; } }"
"public static List < Integer > newInstance ( final int [ ] numbers ) { return new AbstractList < Integer > ( ) { @ Override public Integer get ( int index ) { return numbers [ index ] ; } @ Override public int size ( ) { return numbers.length ; } } ; } public static void main ( String [ ] args ) { int [ ] sequence = { 10 , 20 , 30 } ; List < Integer > list = ListFactory.newInstance ( sequence ) ; System.out.println ( `` List is `` +list ) ; }"
int num = list.stream ( ) .peek ( System.out : :println ) .count ( ) ;
"Map < String , Map < String , Map < String , Integer > > > Entry 1 : [ `` 1 '' [ `` A '' [ [ a,1 ] ; [ b,2 ] ] ; '' B '' [ [ a,3 ] ; [ c,1 ] ] ] ] Entry 2 : [ `` 2 '' [ `` A '' [ [ b,2 ] ; [ c,1 ] ] ; '' B '' [ [ a,5 ] ; [ b,0 ] ] ] ] Entry 1 : [ `` A '' [ [ a,1 ] ; [ b,4 ] ; [ c,1 ] ] ] Entry 4 : [ `` B '' [ [ a,8 ] ; [ b,0 ] ; [ c,1 ] ] ] Map < String , List < Entry < String , Map < String , Integer > > > > initialMap.values ( ) .stream ( ) .flatMap ( m - > m.entrySet ( ) .stream ( ) ) .collect ( Collectors.groupingBy ( Map.Entry : :getKey ) ) ;"
"server/controllerName/access_id/id/field/field_value/api_nameserver/controllerName/access_id/id/field/field_value/field2/field_value/api_name 1. start date and end date2 . user name3 . user group { `` name '' : '' gibbs '' , `` category '' : '' vip '' } { user : `` gibbs '' , total_Result : 10 , [ { //order details items from doc 1 } { //order details from doc2 } ] } MongoCollection < Document > mongoEngCollection = mongoDbReader.getCollection ( ) ; BasicDBObject andQuery = new BasicDBObject ( ) ; List < BasicDBObject > obj = new ArrayList < BasicDBObject > ( ) ; //Forming query using request parameter . requestAttributes contains map of request parameters . for ( Map.Entry < PathAttribute , PathValue < ? > > entry : requestAttributes.entrySet ( ) ) { String key = entry.getKey ( ) .getName ( ) ; obj.add ( new BasicDBObject ( key , entry.getValue ( ) .getRawValue ( ) ) ) ; } andQuery.put ( `` $ and '' , obj ) ; //Queryng mongo db FindIterable < Document > documents = mongoEngCollection.find ( andQuery ) ;"
< dependency > < groupId > org.mockito < /groupId > < artifactId > mockito-core < /artifactId > < version > 3.2.0 < /version > < scope > test < /scope > < /dependency > @ Test void stupidTest1 ( ) { Context context = mock ( Context.class ) ; String test1 = `` hello123 '' ; when ( context.header ( `` Authorization '' ) ) .thenReturn ( test1 ) ; } @ Test void stupidTest1 ( ) { Context context = mock ( Context.class ) ; String test1 = `` hello123 '' ; given ( context.header ( `` Authorization '' ) ) .willReturn ( test1 ) ; } org.mockito.exceptions.misusing.WrongTypeOfReturnValue : String can not be returned by header ( ) header ( ) should return Validator***If you 're unsure why you 're getting above error read on.Due to the nature of the syntax above problem might occur because:1 . This exception *might* occur in wrongly written multi-threaded tests . Please refer to Mockito FAQ on limitations of concurrency testing.2 . A spy is stubbed using when ( spy.foo ( ) ) .then ( ) syntax . It is safer to stub spies - - with doReturn|Throw ( ) family of methods . More in javadocs for Mockito.spy ( ) method . at my.package.stupidTest1 ( JavalinTest.java:28 )
private static Class < ? extends Foo > fooFromClassName ( String name ) throws ClassNotFoundException { return ( Class < ? extends Foo > ) Class.forName ( name ) ; } private static Class < ? extends Foo > fooFromClassName ( String name ) throws ClassNotFoundException { Class < ? > impl = Class.forName ( name ) ; if ( Foo.class.isAssignableFrom ( impl ) ) { @ SuppressWarnings ( `` unchecked '' ) Class < ? extends Foo > foo = ( Class < ? extends Foo > ) impl ; return foo ; } else { // Throw something - ClassCastException perhaps . } }
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < beans xmlns= '' http : //www.springframework.org/schema/beans '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : context= '' http : //www.springframework.org/schema/context '' xmlns : mvc= '' http : //www.springframework.org/schema/mvc '' xsi : schemaLocation= '' http : //www.springframework.org/schema/beans http : //www.springframework.org/schema/beans/spring-beans.xsd http : //www.springframework.org/schema/context http : //www.springframework.org/schema/context/spring-context.xsd http : //www.springframework.org/schema/mvc http : //www.springframework.org/schema/mvc/spring-mvc.xsd '' > < context : component-scan base-package= '' com.ca.services.rest.* , com.ca.services.test . * '' / > < mvc : annotation-driven / > < /beans > import org.junit.Assert ; import org.junit.Before ; import org.junit.Test ; import org.junit.runner.RunWith ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Qualifier ; import org.springframework.context.ApplicationContext ; import org.springframework.test.context.ContextConfiguration ; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner ; import com.ca.services.rest.activity.services.ActivityDaoRepository ; import com.ca.services.rest.activity.services.ActivityService ; import com.ca.services.rest.activity.services.impl.ActivityServiceImpl ; import com.ca.services.test.mock.MockActivityDaoRepository ; @ RunWith ( SpringJUnit4ClassRunner.class ) @ ContextConfiguration ( locations= { `` file : **/WEB-INF/rest-servlet.xml '' } ) public class TestActivityLog { @ Autowired @ Qualifier ( `` mockActivityDaoRepository '' ) private MockActivityDaoRepository repository ; @ Autowired private ApplicationContext applicationContext ; @ Autowired public TestActivityLog ( ) { super ( ) ; } @ Before public void setup ( ) throws Exception { } @ Test public void testOne ( ) { Assert.assertEquals ( `` abc '' , `` abc '' ) ; } public void testService2 ( ) { final ActivityDaoRepository repo = repository ; final String chk1 = `` [ POL.ActivityAPI : as1.0.0 ] '' ; final String chk2 = String.valueOf ( repo.getVersion ( ) ) ; Assert.assertEquals ( chk1 , chk2 ) ; } public void testService3 ( ) { final ActivityService service = new ActivityServiceImpl ( repository ) ; } }"
"inputA = [ { name : `` A '' , age : 20 } , { name : `` B '' , age : 30 } , { name : `` C '' , age : 25 } , { name : `` D '' , age : 28 } ] inputB = [ `` D '' , `` B '' ] expectedOutput = [ { name : `` D '' , age : 28 } , { name : `` B '' , age : 30 } , { name : `` A '' , age : 20 } , { name : `` C '' , age : 25 } ] AtomicInteger count = new AtomicInteger ( ) ; Collections.sort ( inputA , Comparator .comparing ( a - > if ( inputB.indexOf ( a.getName ( ) ) > -1 ) { return -1 ; } else { return count.incrementAndGet ( ) ; } ) .thenComparingInt ( a - > a.getAge ( ) ) ) ; actualOutput = [ { name : `` D '' , age : 28 } , { name : `` B '' , age : 30 } , { name : `` C '' , age : 25 } , { name : `` A '' , age : 20 } ]"
"int bits , val ; do { bits = next ( 31 ) ; val = bits % n ; } while ( bits - val + ( n-1 ) < 0 ) ;"
double x = 0xap-001 ;
"public static class HelloJavaFXWeb extends Application { @ Override public void start ( Stage stage ) throws Exception { final Group root = new Group ( ) ; Scene scene = new Scene ( root , Color.DODGERBLUE ) ; WebView webView = new WebView ( ) ; webView.getEngine ( ) .load ( `` http : //www.google.com '' ) ; root.getChildren ( ) .add ( webView ) ; stage.setTitle ( `` HelloWorld in JavaFX 2.0 '' ) ; stage.setScene ( scene ) ; stage.show ( ) ; } } Application.launch ( HelloJavaFXWeb.class ) ; buildscript { dependencies { def jvm = org.gradle.internal.jvm.Jvm.current ( ) if ( jvm.javaVersion.isJava7 ( ) ) { classpath files ( `` $ { jvm.jre.homeDir } /lib/jfxrt.jar '' ) } } } import javafx.application . * ; import javafx.scene . * ; import javafx.scene.paint.Color ; import javafx.scene.web.WebView ; import javafx.stage.Stage ; class HelloJavaFXWeb extends Application { @ Override public void start ( Stage stage ) throws Exception { final Group root = new Group ( ) ; Scene scene = new Scene ( root , Color.DODGERBLUE ) ; WebView webView = new WebView ( ) ; webView.getEngine ( ) .load ( `` http : //www.google.com '' ) ; root.getChildren ( ) .add ( webView ) ; stage.setTitle ( `` HelloWorld in JavaFX 2.0 '' ) ; stage.setScene ( scene ) ; stage.show ( ) ; } } Application.launch ( HelloJavaFXWeb.class ) ; + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -+ -- -- -- -- -+| version | flashing | logging |+ -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -+ -- -- -- -- -+| jdk1.7.0_05_x86 | no JavaFX || jdk1.7.0_80_x64 | yes | yes || jdk1.7.0_80_x86 | yes | no || jre1.7.0_80_x86 | yes | no || jre1.7.0_80_x64 | yes | no || jre1.8.0_45_x86 | no | no || jre1.8.0_45_x64 | no | no |+ -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -+ -- -- -- -- -+"
"import javax.swing . * ; import java.awt . * ; public class RaisedButton extends JButton { private String text = `` '' ; private String type = `` default '' ; public RaisedButton ( String text , String type ) { this.text = text ; this.type = type ; __init__ ( ) ; } private void foundations ( ) { NotoFont noto = new NotoFont ( true ) ; this.setText ( this.text.toUpperCase ( ) ) ; this.setRolloverEnabled ( false ) ; this.setFocusPainted ( false ) ; this.setBorderPainted ( false ) ; this.setFont ( noto.get ( ) ) ; this.setPreferredSize ( new Dimension ( 108 + this.text.length ( ) * 4 , 37 ) ) ; } private void default_type ( ) { this.foundations ( ) ; this.setBackground ( Color.decode ( `` # FFFFFFF '' ) ) ; this.setForeground ( Color.decode ( `` # 000000 '' ) ) ; } private void primary_type ( ) { this.foundations ( ) ; this.setBackground ( Color.decode ( `` # 00BCD4 '' ) ) ; this.setForeground ( Color.decode ( `` # FFFFFF '' ) ) ; } private void secondary_type ( ) { this.foundations ( ) ; this.setBackground ( Color.decode ( `` # FF4081 '' ) ) ; this.setForeground ( Color.decode ( `` # FFFFFF '' ) ) ; } private void disabled_type ( ) { this.foundations ( ) ; this.setBackground ( Color.decode ( `` # E5E5E5 '' ) ) ; this.setForeground ( Color.decode ( `` # B2A4A4 '' ) ) ; } private void __init__ ( ) { switch ( this.type.toLowerCase ( ) ) { case `` default '' : default_type ( ) ; break ; case `` primary '' : primary_type ( ) ; break ; case `` secondary '' : secondary_type ( ) ; break ; case `` disabled '' : disabled_type ( ) ; break ; } } }"
"public void obfuscate ( ) { try { String jre = `` \ '' '' + System.getProperty ( `` java.home '' ) + `` \\bin\\javaw.exe '' + `` \ '' '' ; String jar = `` -jar '' ; Runtime.getRuntime ( ) .exec ( new String [ ] { jre , jar.trim ( ) , `` /lib/allatori.jar /lib/config.xml '' } ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } - main.jar | |- main_class.class |- lib/ |- allatori.jar |- config.xml |- jarToObfuscate.jar"
"public final class Either < L , R > { // ... private final L l ; private final R r ; // ... public < T > T join ( final Function < L , T > f , final Function < R , T > g ) { Preconditions.checkNotNull ( f ) ; Preconditions.checkNotNull ( g ) ; return which == LeftOrRight.LEFT ? f.apply ( l ) : g.apply ( r ) ; } public Optional < L > left ( ) { return join ( Optional : :of , x - > Optional.empty ( ) ) ; } // ... } public Optional < L > left ( ) { return join ( Optional : : < L > of , x - > Optional. < L > empty ( ) ) ; }"
"DateTimeFormatter formatter = new DateTimeFormatterBuilder ( ) .appendPattern ( `` YYYYww '' ) .parseDefaulting ( WeekFields.ISO.dayOfWeek ( ) , 1 ) .toFormatter ( ) ; LocalDate parse = LocalDate.parse ( `` 201803 '' , formatter ) ; java.time.format.DateTimeParseException : Text '201803 ' could not be parsed at index 0 DateTimeFormatter formatter = new DateTimeFormatterBuilder ( ) .appendPattern ( `` YYYY ww '' ) .parseDefaulting ( WeekFields.ISO.dayOfWeek ( ) , 1 ) .toFormatter ( ) ; LocalDate parse = LocalDate.parse ( `` 2018 03 '' , formatter ) ; 2018-01-15 DateTimeFormatter yearWeekPattern = new DateTimeFormatterBuilder ( ) .appendValue ( IsoFields.WEEK_BASED_YEAR , 4 ) .appendValue ( IsoFields.WEEK_OF_WEEK_BASED_YEAR , 2 ) .parseDefaulting ( WeekFields.ISO.dayOfWeek ( ) , 1 ) .toFormatter ( ) ; LocalDate.parse ( `` 201803 '' , yearWeekPattern ) .atStartOfDay ( ZoneId.systemDefault ( ) ) .toInstant ( ) ;"
"when ( documentRequest.waitsAtReceiveTask ( `` ReceiveTaskWaitForDocuments '' ) ) .thenReturn ( ( receiveTask ) - > { receiveTask.defer ( `` P1DT1M '' , receiveTask : :receive ) ; } ) ; receiveTask.defer ( `` P1D '' , receiveTask.receive _ ) Error : ( 84 , 45 ) type mismatch ; found : Unit required : org.camunda.bpm.scenario.defer.Deferred receiveTask.defer ( `` P1D '' , receiveTask.receive _ ) void receive ( ) ; public interface Deferred { void execute ( ) throws Exception ; }"
"public class NoVisibility_Demonstration extends Thread { boolean keepRunning = true ; public static void main ( String [ ] args ) throws InterruptedException { NoVisibility_Demonstration t = new NoVisibility_Demonstration ( ) ; t.start ( ) ; Thread.sleep ( 1000 ) ; t.keepRunning = false ; System.out.println ( `` keepRunning is false '' ) ; } public void run ( ) { int x = 1 ; while ( keepRunning ) { //System.out.println ( `` If you uncomment this line , the code will work without the visibility issue '' ) ; x++ ; } System.out.println ( `` x : '' +x ) ; }"
"private void jButton27ActionPerformed ( java.awt.event.ActionEvent evt ) { String [ ] names = jTextArea13.getText ( ) .split ( `` \\n '' ) ; var S = names.Split ( ) .ToList ( ) ; for ( int k = 0 ; k < S.Count ; k++ ) { nam.add ( S [ k ] ) ; if ( ( k % 10 ) ==0 ) { nam.add ( `` \r\n '' ) ; } } jTextArea14.setText ( nam ) ; output : this is an example file that can be used asa reference for this program , i want this line tobe split ( newline ) by every 10 words each ."
"InvalidArgumentException [ Invalid arguments supplied : { hello , jnlp , launch.jnlp , 123 } ] private static void launchApp ( String appName , String appPath , String ... args ) { logger.debug ( `` Launching application : `` + appName ) ; Properties props = System.getProperties ( ) ; ArrayList < String > fullCmdString = new ArrayList < String > ( ) ; logger.debug ( `` http : // '' + System.getProperty ( `` jnlp.serverip '' ) + `` : '' + System.getProperty ( `` jnlp.serverport '' ) + `` /FB2HMI/ '' + appPath ) ; if ( args.length > 0 ) { fullCmdString.add ( `` javaws '' ) ; fullCmdString.add ( `` -open '' ) ; } for ( String arg : args ) { fullCmdString.add ( arg ) ; } fullCmdString.add ( `` http : // '' + System.getProperty ( `` jnlp.serverip '' ) + `` : '' + System.getProperty ( `` jnlp.serverport '' ) + `` /FB2HMI/ '' + appPath ) ; logger.debug ( `` Command = `` + fullCmdString ) ; ProcessBuilder rmLauncher = new ProcessBuilder ( ) .command ( fullCmdString.stream ( ) .toArray ( String [ ] : :new ) ) ; Process p ; try { p = rmLauncher.start ( ) ; processList.add ( p ) ; logProcessOutput ( p , logger , null , appName ) ; } catch ( Exception e ) { logger.fatal ( `` Failed to launch `` + appName + `` : `` + e ) ; System.exit ( 1 ) ; } }"
"public class SomeClass { public SomeClass ( SomeObj obj ) { obj.addListener ( this : :handleEvent ) ; // no warnings , is it really safe ? obj.addListener ( ( event ) - > handleEvent ( event ) ) ; // warning about overridable method in constructor } private void handleEvent ( Event event ) { event.doSomething ( someMethod ( ) ) ; } private void someMethod ( ) { ... } }"
"Supported read formats : [ jpg , bmp , gif , png , wbmp , jpeg ] Supported write formats : [ jpg , bmp , gif , png , wbmp , jpeg ] 'JPEG ' reader : com.sun.imageio.plugins.jpeg.JPEGImageReader @ 5e9f23b4'JPEG ' reader : com.sun.imageio.plugins.jpeg.JPEGImageWriter @ 378fd1ac static Image n ; public static void main ( String [ ] args ) { JFrame f = new JFrame ( ) ; JPanel p = new JPanel ( ) { @ Override public void paintComponent ( Graphics graphics ) { graphics.drawImage ( n , 0 , 0 , null ) ; } } f.add ( p ) ; n = Toolkit.getDefaultToolkit ( ) .getImage ( ( `` /Users/zinedine/Desktop/test_image.tiff '' ) ; f.setVisible ( true ) } sun.awt.image.ToolkitImage @ 25f38edc // Also ca n't be cast to java.awt.BufferedImage"
double average = roster .stream ( ) .filter ( p - > p.getGender ( ) == Person.Sex.MALE ) .mapToInt ( Person : :getAge ) .average ( ) .getAsDouble ( ) ; IntStream maleAges ( Stream < Person > stream ) { return stream .filter ( p - > p.getGender ( ) == Person.Sex.MALE ) .mapToInt ( Person : :getAge ) } double averageBob = maleAges ( roster .stream ( ) .filter ( p - > `` Bob '' .equals ( p.getName ( ) ) ) ) .average ( ) .getAsDouble ( ) ; double averageBob = roster .stream ( ) .filter ( p - > `` Bob '' .equals ( p.getName ( ) ) ) .apply ( this : :maleAges ) // Does n't compile .average ( ) .getAsDouble ( ) ;
"@ Testpublic void testNoZoneInInput ( ) { final ZonedDateTime expected = ZonedDateTime.of ( 2017 , 2 , 2 , 9 , 0 , 0 , 0 , ZoneId.of ( `` UTC '' ) ) ; final ZonedDateTime actual = ZonedDateTime.parse ( `` 2017-02-02T10:00:00 '' , DateTimeFormatter.ISO_DATE_TIME.withZone ( ZoneId.of ( `` UTC+1 '' ) ) ) ; Assert.assertTrue ( `` Expected `` + expected + `` , got `` + actual + `` instead . `` , expected.isEqual ( actual ) ) ; } @ Testpublic void testWithZoneInInput ( ) { final ZonedDateTime expected = ZonedDateTime.of ( 2017 , 2 , 2 , 9 , 0 , 0 , 0 , ZoneId.of ( `` UTC '' ) ) ; final ZonedDateTime actual = ZonedDateTime.parse ( `` 2017-02-02T09:00:00Z '' , DateTimeFormatter.ISO_DATE_TIME.withZone ( ZoneId.of ( `` UTC+1 '' ) ) ) ; Assert.assertTrue ( `` Expected `` + expected + `` , got `` + actual + `` instead . `` , expected.isEqual ( actual ) ) ; }"
"String s = `` hi hello '' ; s = s.replaceAll ( `` \\s* '' , `` `` ) ; System.out.println ( s ) ; h i h e l l o hi hello"
class A { public void foo ( ) { ... } ; ... } class A1 extends A { ... } ; class A2 extends A { ... } ; ... class A1000 extends A { ... } ; class B < T extends A > extends T { @ Override public void foo ( ) { ... } ; } class B1 extends A1 { @ Override public void foo ( ) { ... } ; } ; class B2 extends A2 { @ Override public void foo ( ) { ... } ; } ; ... .class B1000 extends A1000 { @ Override public void foo ( ) { ... } ; } ; ... B < A643 > b643 = new B < A643 > ; b643.foo ( ) ; ...
private void check ( ) { if ( true ) return ; String a = `` test '' ; } private void check ( ) { return ; String a = `` test '' ; }
"public class Collections { public static < T > void copy ( List < ? super T > dest , List < ? extends T > src ) { for ( int i=0 ; i < src.size ( ) ; i++ ) dest.set ( i , src.get ( i ) ) ; } }"
"class VarArgsTricky { static void wide_vararg ( long ... x ) { System.out.println ( `` long ... '' ) ; } static void wide_vararg ( Integer ... x ) { System.out.println ( `` Integer ... '' ) ; } public static void main ( String [ ] args ) { int i = 5 ; wide_vararg ( i , i , i ) ; // needs to widen and use var-args Long l = 9000000000l ; wide_vararg ( l , l ) ; // prints sucessfully `` long ... '' } }"
package scala.runtime ; public class DoubleRef implements java.io.Serializable { private static final long serialVersionUID = 8304402127373655534L ; public double elem ; public DoubleRef ( double elem ) { this.elem = elem ; } public String toString ( ) { return java.lang.Double.toString ( elem ) ; } }
if ( x == 1 | x==2 ) if ( x == 1 || x==2 )
"Pattern p = Pattern.compile ( pattern ) ; // can be static finalMatcher m = p.matcher ( input ) ; if ( m.find ( ) ) { // or m.matches ( ) foo ( m.group ( x ) ) ; } else { ... } Pattern p = Pattern.compile ( pattern ) ; // can be static finalp.matchedGroup ( input , x ) // return Optional < String > .map ( group - > foo ( group ) ) .orElse ( ... ) ; Pattern p = Pattern.compile ( pattern ) ; p.findMatches ( input ) .map ( ( MatchResult mr ) - > { mr.groupsIfPresent ( x ) .map ( g - > foo ( g ) ) .orElse ( ... ) } ) .findFirst ( ) ;"
"C+++ RAII - Easy resource management - it will be a complex system+ System language - speed if we cant't find a JIT VM for our ARM+ No GC - no big worst case latencies from the GC+ Easy to integrate with some shared mem libs that we have to interface with- Fewer free as in beer libs - Lacks introspection - Mapping classes to DB and external data formats ( XML ) would benefit from this ( ORM /JAXB ) approach- Easy to shoot one self in the foot - hard and expensive to find programmers which do n't make big mistakes- Memory fragmentation - needs tuning and workaroundsJava+ Huge amount of libs+ Introspection - serialization becomes a breeze ( see C++ section ) + Easier to find 'good enough ' programmers- No RAII - Client has to remember finally or you leak resources . IMO Java programmers tend to ignore this problem unless they have server app background.- No System Language - possibly slower although ARMj could alleviate this- GC - latency might go up ( do n't know if parallel GC will work - seems that you might get fragmentation , see note below ) .- Need to write JNI for the shared mem libs that we interface with- Maybe ORACLE will eat us"
public class Outer { class SuperClass { public void foo ( ) { } } public class SubClass extends SuperClass { } }
"-server -Xms2000m -Xmx2000m -verbose : gc -XX : -UseTLAB public class TestMemoryReference { private static final int SIZE = 100_000 ; private static Runnable r ; private static Object o = new Object ( ) ; private static Object o1 = new Object ( ) ; private static Object o2 = new Object ( ) ; private static Object o3 = new Object ( ) ; public static class ObjectWith1Int { int i ; } public static class ObjectWith2Ints { int i , j ; } public static class ObjectWith3Ints { int i , j , k ; } public static class ObjectWith1Long { long i ; } public static class ObjectWith2Longs { long i , j ; } public static class ObjectWith3Longs { long i , j , k ; } public static class ObjectWith1Object { Object o = o1 ; } public static class ObjectWith2Objects { Object o = o1 ; Object p = o2 ; } public static class ObjectWith3Objects { Object o = o1 ; Object p = o2 ; Object q = o3 ; } private static void test ( Runnable r , String name , int numberOfObjects ) { long mem = Runtime.getRuntime ( ) .freeMemory ( ) ; r.run ( ) ; System.out.println ( name + `` : '' + ( mem - Runtime.getRuntime ( ) .freeMemory ( ) ) / numberOfObjects + `` bytes `` ) ; } public static void main ( String [ ] args ) throws Exception { System.out.println ( System.getProperty ( `` java.vm.name '' ) + `` `` ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new Object ( ) ; } } ; test ( r , `` Object '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith1Int ( ) ; } } ; test ( r , `` Object with 1 int '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith2Ints ( ) ; } } ; test ( r , `` Object with 2 ints '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith3Ints ( ) ; } } ; test ( r , `` Object with 3 ints '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith1Long ( ) ; } } ; test ( r , `` Object with 1 long '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith2Longs ( ) ; } } ; test ( r , `` Object with 2 longs '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith3Longs ( ) ; } } ; test ( r , `` Object with 3 longs '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith1Object ( ) ; } } ; test ( r , `` Object with 1 reference '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith2Objects ( ) ; } } ; test ( r , `` Object with 2 references '' , SIZE ) ; r = new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < SIZE ; i++ ) o = new ObjectWith3Objects ( ) ; } } ; test ( r , `` Object with 3 references '' , SIZE ) ; } }"
"StringConcatFactory.makeConcat ( MethodHandles.publicLookup ( ) , '' abc '' , MethodType.methodType ( String.class ) ) ; //Exception HereStringConcatFactory.makeConcat ( MethodHandles.lookup ( ) , `` abc '' , MethodType.methodType ( String.class ) ) ; //Working fine"
"public class Test { public static void m1 ( ) { m3 ( m4 ( `` 1 '' ) ) ; } public static void m2 ( ) { m3 ( m4 ( `` 1 '' ) , m4 ( `` 2 '' ) ) ; } public static void m3 ( Object ... str ) { for ( Object o : str ) { System.out.println ( o ) ; } } public static < T > T m4 ( Object s ) { return ( T ) s ; } public static void main ( String [ ] args ) { m1 ( ) ; } }"
"1 1 1 11 1 21 32 1 12 23 14 public static void test_2 ( String path , int sum , int n ) { if ( sum == n ) { System.out.println ( path ) ; } else { test_2 ( path+ '' 1 `` , sum + 1 , n ) ; test_2 ( path+ '' 2 `` , sum + 2 , n ) ; test_2 ( path+ '' 3 `` , sum + 1 , n ) ; test_2 ( path+ '' 4 `` , sum + 2 , n ) ; } }"
"@ Retention ( java.lang.annotation.RetentionPolicy.RUNTIME ) @ Target ( { METHOD , TYPE } ) @ Inheritedpublic @ interface RequiredStore { Store value ( ) ; }"
Person.builder ( ) .name ( `` john '' ) .surname ( `` Smith '' ) .build ( ) ; Person.builder ( `` john '' ) .surname ( `` Smith '' ) .build ( ) ; @ Builderpublic class Person { private String name ; private String surname ; public static PersonBuilder builder ( String name ) { return new PersonBuilder ( ) .name ( name ) ; } } Person p = Person.builder ( `` Name '' ) .surname ( `` Surname '' ) .build ( ) ; Person p = Person.builder ( `` Name '' ) .surname ( `` Surname '' ) .name ( `` '' ) .build ( ) ; Person p = new Person.PersonBuilder ( ) .build ; Person p = Person.builder ( `` Name '' ) .surname ( `` Surname '' ) .build ( ) ; Person p = Person.builder ( `` Name '' ) .build ( ) ;
"public static < X , Y , U , V extends X > Function < U , Y > composite ( Function < X , Y > first , Function < U , V > second ) { Objects.requireNonNull ( first ) ; Objects.requireNonNull ( second ) ; return ( U arg ) - > first.apply ( second.apply ( arg ) ) ; } public static < X , Y extends X > Function < X , ? > iterate ( Function < X , Y > function , int n ) { if ( n < 0 ) return null ; if ( n == 0 ) return ( X arg ) - > arg ; Objects.requireNonNull ( function ) ; Function < X , Y > iteration = function ; for ( ; n > 1 ; -- n ) iteration = composite ( function , iteration ) ; return iteration ; } Function < Double , Double > nthSquareRoot = iterate ( Math : :sqrt , n ) ; Type mismatch : can not convert from Function < Double , capture # 2-of ? > to Function < Double , Double >"
"import java.util.function.Function ; import java.util.function.Supplier ; public class Test { public static Function < String , Supplier < String > > A = aVal - > new Supplier < String > ( ) { @ Override public String get ( ) { return B.apply ( aVal ) .get ( ) ; } private Function < String , Supplier < String > > B = bVal - > new Supplier < String > ( ) { @ Override public String get ( ) { return C.apply ( bVal ) .get ( ) ; } private Function < String , Supplier < String > > C = cVal - > new Supplier < String > ( ) { @ Override public String get ( ) { return cVal ; } } ; } ; } ; } An exception has occurred in the compiler ( 1.8.0_211 ) . Please file a bug against the Java compiler via the Java bug reporting page ( http : //bugreport.java.com ) after checking the Bug Database ( http : //bugs.java.com ) for duplicates . Include your program and the following diagnostic in your report . Thank you.java.lang.NullPointerException at com.sun.tools.javac.jvm.Code.emitop0 ( Code.java:559 ) at com.sun.tools.javac.jvm.Items $ SelfItem.load ( Items.java:367 ) at com.sun.tools.javac.jvm.Gen.genArgs ( Gen.java:966 ) at com.sun.tools.javac.jvm.Gen.visitApply ( Gen.java:1842 ) at com.sun.tools.javac.tree.JCTree $ JCMethodInvocation.accept ( JCTree.java:1465 ) at com.sun.tools.javac.jvm.Gen.genExpr ( Gen.java:947 ) at com.sun.tools.javac.jvm.Gen.visitAssign ( Gen.java:1982 ) at com.sun.tools.javac.tree.JCTree $ JCAssign.accept ( JCTree.java:1686 ) at com.sun.tools.javac.jvm.Gen.genExpr ( Gen.java:947 ) at com.sun.tools.javac.jvm.Gen.visitExec ( Gen.java:1781 ) at com.sun.tools.javac.tree.JCTree $ JCExpressionStatement.accept ( JCTree.java:1296 ) at com.sun.tools.javac.jvm.Gen.genDef ( Gen.java:737 ) at com.sun.tools.javac.jvm.Gen.genStat ( Gen.java:772 ) at com.sun.tools.javac.jvm.Gen.genStat ( Gen.java:758 ) at com.sun.tools.javac.jvm.Gen.genStats ( Gen.java:809 ) at com.sun.tools.javac.jvm.Gen.visitBlock ( Gen.java:1157 ) at com.sun.tools.javac.tree.JCTree $ JCBlock.accept ( JCTree.java:909 ) at com.sun.tools.javac.jvm.Gen.genDef ( Gen.java:737 ) at com.sun.tools.javac.jvm.Gen.genStat ( Gen.java:772 ) at com.sun.tools.javac.jvm.Gen.genMethod ( Gen.java:1031 ) at com.sun.tools.javac.jvm.Gen.visitMethodDef ( Gen.java:994 ) at com.sun.tools.javac.tree.JCTree $ JCMethodDecl.accept ( JCTree.java:778 ) at com.sun.tools.javac.jvm.Gen.genDef ( Gen.java:737 ) at com.sun.tools.javac.jvm.Gen.genClass ( Gen.java:2454 ) at com.sun.tools.javac.main.JavaCompiler.genCode ( JavaCompiler.java:745 ) at com.sun.tools.javac.main.JavaCompiler.generate ( JavaCompiler.java:1572 ) at com.sun.tools.javac.main.JavaCompiler.generate ( JavaCompiler.java:1536 ) at com.sun.tools.javac.main.JavaCompiler.compile2 ( JavaCompiler.java:901 ) at com.sun.tools.javac.main.JavaCompiler.compile ( JavaCompiler.java:860 ) at com.sun.tools.javac.main.Main.compile ( Main.java:523 ) at com.sun.tools.javac.api.JavacTaskImpl.doCall ( JavacTaskImpl.java:129 ) at com.sun.tools.javac.api.JavacTaskImpl.call ( JavacTaskImpl.java:138 ) at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess ( JavaxToolsCompiler.java:125 ) at org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile ( JavacCompiler.java:171 ) at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute ( AbstractCompilerMojo.java:886 ) at org.apache.maven.plugin.compiler.CompilerMojo.execute ( CompilerMojo.java:129 ) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo ( DefaultBuildPluginManager.java:134 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:208 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:154 ) at org.apache.maven.lifecycle.internal.MojoExecutor.execute ( MojoExecutor.java:146 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:117 ) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject ( LifecycleModuleBuilder.java:81 ) at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build ( SingleThreadedBuilder.java:51 ) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute ( LifecycleStarter.java:128 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:309 ) at org.apache.maven.DefaultMaven.doExecute ( DefaultMaven.java:194 ) at org.apache.maven.DefaultMaven.execute ( DefaultMaven.java:107 ) at org.apache.maven.cli.MavenCli.execute ( MavenCli.java:955 ) at org.apache.maven.cli.MavenCli.doMain ( MavenCli.java:290 ) at org.apache.maven.cli.MavenCli.main ( MavenCli.java:194 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced ( Launcher.java:289 ) at org.codehaus.plexus.classworlds.launcher.Launcher.launch ( Launcher.java:229 ) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode ( Launcher.java:415 ) at org.codehaus.plexus.classworlds.launcher.Launcher.main ( Launcher.java:356 )"
String commandString = `` ./script.scr `` ; process = Runtime.getRuntime ( ) .exec ( commandString ) ; BufferedReader bufferedReader = new BufferedReader ( new InputStreamReader ( process.getInputStream ( ) ) ) ; while ( ( lsString = bufferedReader.readLine ( ) ) ! = null ) { System.out.println ( lsString ) ; } try { process.waitFor ( ) ; } public void stopWhenAllTaskFinished ( ) { while ( notFinished ) { sleep ( 50 ) ; } //notFinished is class variable and somewhere else it will set to false . //now finished . //Interrupt all the threads for ( int i=0 ; i < nThreads ; i++ ) { threads [ i ] .interrupt ( ) ; } } obj.stopWhenAllTaskFinished ( )
"new FastMap < Object > ( ) { { put ( `` Value '' , 12 ) ; put ( `` Unit '' , `` Kg '' ) ; } } ;"
import java.util.Scanner ; public class MethodlabPractice { public static void main ( String [ ] args ) { printBanner ( ) ; getInput ( ) ; isOdd ( number ) ; } // end main public static void printBanner ( ) { for ( int count = 0 ; count ! = 10 ; count++ ) System.out.println ( `` Beth Tanner '' ) ; } // end printBanner public static int getInput ( ) { Scanner input = new Scanner ( System.in ) ; System.out.println ( `` Please enter an integer : '' ) ; int number = input.nextInt ( ) ; System.out.println ( number ) ; return number ; } // end getInput public static boolean isOdd ( int number ) { boolean odd = number % 2 ! = 0 ; return odd ; } // end isOdd } // end class
public class myClass { private Object myObj ; private Object lock = new Object ( ) ; public void method1 ( ) { synchronized ( lock ) { // has logic to read myObj } } public void method2 ( ) { synchronized ( lock ) { // has logic to update myObj } } }
"public class LogWriter { private final BlockingQueue < String > queue ; private final LoggerThread logger ; private static final int CAPACITY = 1000 ; public LogWriter ( Writer writer ) { this.queue = new LinkedBlockingQueue < String > ( CAPACITY ) ; this.logger = new LoggerThread ( writer ) ; } public void start ( ) { logger.start ( ) ; } public void log ( String msg ) throws InterruptedException { queue.put ( msg ) ; } private class LoggerThread extends Thread { private final PrintWriter writer ; public LoggerThread ( Writer writer ) { this.writer = new PrintWriter ( writer , true ) ; // autoflush } public void run ( ) { try { while ( true ) writer.println ( queue.take ( ) ) ; } catch ( InterruptedException ignored ) { } finally { writer.close ( ) ; } } } } public void log ( String msg ) throws InterruptedException { if ( ! shutdownRequested ) queue.put ( msg ) ; else throw new IllegalArgumentException ( `` logger is shut down '' ) ; } if ( ! shutdownRequested ) queue.put ( msg ) ;"
protected List < T > _data = new ArrayList < T > ( ) ; // I want to reset this list using another one . First try : public void set ( List < T > newData ) { _data = newData ; } // I want to reset this list using another one . Second try : public void set ( List < T > newData ) { _data.clear ( ) ; _data.addAll ( newData ) ; }
private java.util.HashMap faultExceptionNameMap = new java.util.HashMap ( ) ;
"13/0003337/99 // Should output an array of `` 13 '' , `` 0003337 '' , `` 99 '' 13-145097-102 // Should output an array of `` 13 '' , `` 145097 '' , `` 102 '' 11 9727 76 // Should output an array of `` 11 '' , `` 9727 '' , `` 76 '' QString id = `` 13hjdhfj0003337 90 '' ; QRegularExpression regex ( `` [ ^0-9 ] '' ) ; QStringList splt = id.split ( regex , QString : :SkipEmptyParts ) ; if ( splt.size ( ) ! = 3 ) { // It is the expected input . } else { // The id may have been something like `` 13 145097 102 92 '' } String id = `` 13 text145097 102 '' String [ ] splt = id.split ( `` [ ^0-9 ] '' ) ; ArrayList < String > idNumbers = new ArrayList < String > ( Arrays.asList ( splt ) ) ; Log.e ( TAG , `` ID numbers are : `` + indexIDS.size ( ) ) ; // This logs more than 3 values , which is n't what I want ."
chat1 : user1Id : `` 1 '' user2Id : `` 2 '' bothUsers : `` 1_2 '' chat2 : user1Id : `` 2 '' user2Id : `` 4 '' bothUsers : `` 2_4 '' userLogged = 2 ; Query queryRef = firebase.orderByChild ( `` user2Id '' ) .equalTo ( userLogged ) ;
"static public List < T > filter ( List < T > source , Predicate < T > filter ) ; static < Y , T > public List < Y > transform ( List < T > source , Mutator < Y , T > filter ) ; static public boolean exists ( List < T > source , Predicate < T > filter ) ; static public T findFirst ( List < T > source , Predicate < T > filter ) ; static public boolean trueForAll ( List < T > source , Predicate < T > filter ) ; public interface Predicate < T > { public boolean apply ( T item ) ; } public interface Mutator < T , Y > { public Y apply ( T item ) ; }"
FROM openjdk:8-jdk-alpineADD ./demo-0.0.1-SNAPSHOT.jar /usr/src/factorial/WORKDIR /usr/src/factorialEXPOSE 8080CMD java $ JAVA_OPTIONS -jar demo-0.0.1-SNAPSHOT.jar docker run -d -- rm -- name factorialorialContainer -- memory='512m ' -- cpus=2 -p 8080:8080 -e JAVA_OPTIONS= '' $ ( cat /Users/sulekahelmini/Documents/fyp/fyp_work/MLscripts/ $ 3 ) '' suleka96/factorial : latest -Xms512m -Xmx512m -XX : +PrintFlagsFinal -version intx UnguardOnExecutionViolation = 0 { product } bool UnlinkSymbolsALot = false { product } bool Use486InstrsOnly = false { ARCH product } bool UseAES = true { product } bool UseAESIntrinsics = true { product } intx UseAVX = 2 { ARCH product } bool UseAdaptiveGCBoundary = false { product } bool UseAdaptiveGenerationSizePolicyAtMajorCollection = true { product } bool UseAdaptiveGenerationSizePolicyAtMinorCollection = true { product } bool UseAdaptiveNUMAChunkSizing = true { product } bool UseAdaptiveSizeDecayMajorGCCost = true { product } bool UseAdaptiveSizePolicy = true { product } bool UseAdaptiveSizePolicyFootprintGoal = true { product } bool UseAdaptiveSizePolicyWithSystemGC = false { product } bool UseAddressNop = true { ARCH product } bool UseAltSigs = false { product } bool UseAutoGCSelectPolicy = false { product } bool UseBMI1Instructions = true { ARCH product } bool UseBMI2Instructions = true { ARCH product } bool UseBiasedLocking = true { product } bool UseBimorphicInlining = true { C2 product } bool UseBoundThreads = true { product } bool UseCLMUL = true { ARCH product } bool UseCMSBestFit = true { product } bool UseCMSCollectionPassing = true { product } bool UseCMSCompactAtFullCollection = true { product } bool UseCMSInitiatingOccupancyOnly = false { product } bool UseCRC32Intrinsics = true { product } bool UseCodeCacheFlushing = true { product } bool UseCompiler = true { product } bool UseCompilerSafepoints = true { product } bool UseCompressedClassPointers : = true { lp64_product } bool UseCompressedOops : = true { lp64_product } bool UseConcMarkSweepGC = false { product } bool UseCondCardMark = false { C2 product } bool UseContainerSupport = true { product } bool UseCountLeadingZerosInstruction = true { ARCH product } bool UseCountTrailingZerosInstruction = true { ARCH product } bool UseCountedLoopSafepoints = false { C2 product } bool UseCounterDecay = true { product } bool UseDivMod = true { C2 product } bool UseDynamicNumberOfGCThreads = false { product } bool UseFPUForSpilling = true { C2 product } bool UseFastAccessorMethods = false { product } bool UseFastEmptyMethods = false { product } bool UseFastJNIAccessors = true { product } bool UseFastStosb = true { ARCH product } bool UseG1GC = false { product } bool UseGCLogFileRotation = false { product } bool UseGCOverheadLimit = true { product } bool UseGCTaskAffinity = false { product } bool UseHeavyMonitors = false { product } bool UseHugeTLBFS = false { product } bool UseInlineCaches = true { product } bool UseInterpreter = true { product } bool UseJumpTables = true { C2 product } bool UseLWPSynchronization = true { product } bool UseLargePages = false { pd product } bool UseLargePagesInMetaspace = false { product } bool UseLargePagesIndividualAllocation = false { pd product } bool UseLinuxPosixThreadCPUClocks = true { product } bool UseLockedTracing = false { product } bool UseLoopCounter = true { product } bool UseLoopInvariantCodeMotion = true { C1 product } bool UseLoopPredicate = true { C2 product } bool UseMathExactIntrinsics = true { C2 product } bool UseMaximumCompactionOnSystemGC = true { product } bool UseMembar = false { pd product } bool UseMontgomeryMultiplyIntrinsic = true { C2 product } bool UseMontgomerySquareIntrinsic = true { C2 product } bool UseMulAddIntrinsic = true { C2 product } bool UseMultiplyToLenIntrinsic = true { C2 product } bool UseNUMA = false { product } bool UseNUMAInterleaving = false { product } bool UseNewLongLShift = false { ARCH product } bool UseOSErrorReporting = false { pd product } bool UseOldInlining = true { C2 product } bool UseOnStackReplacement = true { pd product } bool UseOnlyInlinedBimorphic = true { C2 product } bool UseOprofile = false { product } bool UseOptoBiasInlining = true { C2 product } bool UsePSAdaptiveSurvivorSizePolicy = true { product } bool UseParNewGC = false { product } bool UseParallelGC = false { product } bool UseParallelOldGC = false { product } bool UsePerfData = true { product } bool UsePopCountInstruction = true { product } bool UseRDPCForConstantTableBase = false { C2 product } bool UseRTMDeopt = false { ARCH product } bool UseRTMLocking = false { ARCH product } bool UseSHA = false { product } bool UseSHA1Intrinsics = false { product } bool UseSHA256Intrinsics = false { product } bool UseSHA512Intrinsics = false { product } bool UseSHM = false { product } intx UseSSE = 4 { product } bool UseSSE42Intrinsics = true { product } bool UseSerialGC = false { product } bool UseSharedSpaces = false { product } bool UseSignalChaining = true { product } bool UseSquareToLenIntrinsic = true { C2 product } bool UseStoreImmI16 = false { ARCH product } bool UseStringDeduplication = false { product } bool UseSuperWord = true { C2 product } bool UseTLAB = true { pd product } bool UseThreadPriorities = true { pd product } bool UseTransparentHugePages = false { product } bool UseTypeProfile = true { product } bool UseTypeSpeculation = true { C2 product } bool UseUnalignedLoadStores = false { ARCH product } bool UseVMInterruptibleIO = false { product } bool UseXMMForArrayCopy = true { product } bool UseXmmI2D = false { ARCH product } bool UseXmmI2F = false { ARCH product } bool UseXmmLoadAndClearUpper = true { ARCH product } bool UseXmmRegToRegMoveAll = true -XX : CICompilerCount=2 -XX : InitialHeapSize=536870912 -XX : MaxHeapSize=536870912 -XX : MaxNewSize=178913280 -XX : MinHeapDeltaBytes=196608 -XX : NewSize=178913280 -XX : OldSize=357957632 -XX : +StartAttachListener -XX : +UseCompressedClassPointers -XX : +UseCompressedOops
Object o = new Object ( ) ; System.out.println ( o ) ; System.out.println ( o.toString ( ) ) ; //both prints same thing - java.lang.Object @ 10385c1
"public class CustomDialogFragment extends DialogFragment { private LinearLayout containerView ; public static CustomDialogFragment newInstance ( ) { CustomDialogFragment fragment = new EDActionSheet ( ) ; return fragment ; } @ Override public Dialog onCreateDialog ( Bundle savedInstanceState ) { final Dialog dialog = new Dialog ( getActivity ( ) ) ; dialog.getWindow ( ) .requestFeature ( Window.FEATURE_NO_TITLE ) ; dialog.getWindow ( ) .setFlags ( WindowManager.LayoutParams.FLAG_FULLSCREEN , WindowManager.LayoutParams.FLAG_FULLSCREEN ) ; //MARK - containerView LinearLayout.LayoutParams containerViewLayoutParams = new LinearLayout.LayoutParams ( LinearLayout.LayoutParams.MATCH_PARENT , LinearLayout.LayoutParams.WRAP_CONTENT ) ; containerView = new LinearLayout ( dialog.getContext ( ) ) ; containerView.setLayoutParams ( containerViewLayoutParams ) ; containerView.setOrientation ( LinearLayout.VERTICAL ) ; dialog.setContentView ( containerView ) ; DisplayMetrics displaymetrics = new DisplayMetrics ( ) ; dialog.getWindow ( ) .getWindowManager ( ) .getDefaultDisplay ( ) .getMetrics ( displaymetrics ) ; WindowManager.LayoutParams params = dialog.getWindow ( ) .getAttributes ( ) ; params.width = ( int ) ( displaymetrics.widthPixels * 0.95 ) ; params.gravity = Gravity.BOTTOM ; dialog.getWindow ( ) .setAttributes ( params ) ; return dialog ; } public void setColor ( int color ) { containerView.setBackgroundColor ( color ) ; } CustomDialogFragment fragment = CustomDialogFragment.newInstance ( ) ; fragment.setColor ( ContextCompat.getColor ( this , Color.BLUE ) ) ; fragment.show ( getFragmentManager ( ) , `` Dialog '' ) ; testapp.android.testapp E/AndroidRuntime : FATAL EXCEPTION : main Process : id.testapp.android.testapp , PID : 5749 java.lang.NullPointerException : Attempt to invoke virtual method 'void id.testapp.android.testapp.controls.CustomDialogFragment.setColor ( int ) ' on a null object reference at id.testapp.android.testapp.controls.CustomDialogFragment.setColor ( CustomDialogFragment.java:234 )"
"- Running 5 configurations- All 5 configurations done running- Running 5 configurations- All 5 configurations done running- Running 3 configurations- All 3 configurations done running public void runConfigurations ( List < ConfigStruct > configurations ) { for ( ConfigStruct configuration : configurations ) { try { configuration.run ( ) ; } catch ( ConfigurationException e ) { continue ; } } } public void run ( ) throws ConfigurationException { StringBuffer runCmd = generateGalishFullCommand ( GalishFlags.RUN ) ; try { ExternalCommandExecutor.execute ( runCmd , `` Failed to run `` + name , true , true ) ; } catch ( IOException e ) { throw new ConfigurationException ( e.getMessage ( ) ) ; } } public static String execute ( final String cmd , final String error , final boolean runInBackground , final boolean retry ) throws IOException ; [ com.configStructs @ 3f15dbec , com.configStructs @ 31d2327e ]"
public static String foo ( String x ) { return `` foo-String : `` + x ; } public static String foo ( Object x ) { return `` foo-Object : `` + x ; } public static String useString ( ) { return ( foo ( `` useString '' ) ) ; } public static String useObject ( ) { return ( foo ( `` useObject '' ) ) ; } return ( foo ( ( Object ) '' useObject '' ) ) ;
"Exception in thread `` main '' java.lang.NullPointerException at Main.Country.addMine ( Country.java:37 ) at Main.Main.main ( Main.java:21 ) Java Result : 1 Continent Europe = new Continent ( `` Europe '' ) ; Country asd = new Country ( `` asd '' , Europe ) ; Mine mine = new Mine ( 100,100,100,100 ) ; System.out.println ( mine == null ) ; asd.addMine ( mine ) ; //dies here public void addMine ( Mine mine ) { System.out.println ( mine == null ) ; this.mines.add ( mine ) ; //dies here this.iron += mine.iron ; this.gold += mine.gold ; this.stone += mine.stone ; this.wood += mine.wood ; System.out.println ( `` Mine has been successfully added to the country with the given values . `` ) ; public class Mine implements Building { //Building is an empty interface : ) protected int iron ; protected int gold ; protected int stone ; protected int wood ; public Mine ( int iron , int gold , int stone , int wood ) { this.iron += iron ; this.gold += gold ; this.stone += stone ; this.wood += wood ; } }"
public String temp ( ) { while ( true ) { if ( true ) { // Do something . } } } public String tempNew ( ) { if ( true ) { return `` someString '' ; } } public String tempNew ( ) { if ( true ) { return `` someString '' ; } else { return `` someString '' ; } } public String tempNew ( ) { if ( true ) { return `` someString '' ; } return `` someString '' ; }
public static void main ( String [ ] args ) { Thread t = Thread.currentThread ( ) ; Runnable run = new Runnable ( ) { @ Override public void run ( ) { t.yield ( ) ; } } ; Runnable run2 = ( ) - > t.yield ( ) ; run.run ( ) ; run2.run ( ) ; } // access flags 0x1 public run ( ) V L0 LINENUMBER 8 L0 ALOAD 0 GETFIELD UnusedLocalVariable $ 1.val $ t : Ljava/lang/Thread ; POP INVOKESTATIC java/lang/Thread.yield ( ) V L1 LINENUMBER 9 L1 RETURN L2 LOCALVARIABLE this LUnusedLocalVariable $ 1 ; L0 L2 0 MAXSTACK = 1 MAXLOCALS = 1
"rowData.stream ( ) .collect ( Collectors.groupingBy ( r - > r.case.getCaseId ( ) , Collectors.mapping ( r - > r.getRuling ( ) , Collectors.mapping ( ruling- > ruling.getPayments ( ) , Collectors.toSet ( ) ) ) ) ) ;"
"try { val fis = FileInputStream ( path.path + `` / '' + document ) val xdoc = XWPFDocument ( OPCPackage.open ( fis ) ) val paragraphList : MutableList < XWPFParagraph > = xdoc.paragraphs private val newParagraph = paragraph.createRun ( ) ... for ( par in paragraphList ) { var currentParagraph = par.text Log.i ( `` TAG '' , '' current : $ currentParagraph '' ) ..."
public static String reverse ( String s ) { String rev = `` '' ; for ( int i = s.length ( ) - 1 ; i > = 0 ; i -- ) rev += s.charAt ( i ) ; return rev ; } public static String reverse ( String s ) { StringBuilder rev = new StringBuilder ( ) ; for ( int i = s.length ( ) - 1 ; i > = 0 ; i -- ) rev.append ( s.charAt ( i ) ) ; return rev.toString ( ) ; }
"public void method ( String var1 , String var2 , Object var3 ) { //do stuff } public void method ( String var1 , String var2 , Object [ ] var3 ) { //do stuff }"
"public void populate ( final List < Task > tasks ) { Map < String , String > holder = new HashMap < > ( ) ; int size = 0 ; int index = 0 ; StringBuilder sb = new StringBuilder ( ) ; for ( Task task : tasks ) { sb.append ( task ) .append ( System.getProperty ( `` line.separator '' ) ) ; size = sb.toString ( ) .getBytes ( StandardCharsets.UTF_8 ) .length ; if ( size > 60000 ) { String fileName = `` tasks_info_ '' + index + `` .txt '' ; holder.put ( fileName , sb.toString ( ) ) ; index++ ; sb = new StringBuilder ( ) ; size = 0 ; } } // for cases where we do n't reach the limit if ( sb.toString ( ) .length > 0 ) { String fileName = `` tasks_info_ '' + index + `` .txt '' ; holder.put ( fileName , sb.toString ( ) ) ; } System.out.println ( holder ) ; } public void populate ( final List < Task > tasks , final long timestamp ) { Map < String , String > holder = new HashMap < > ( ) ; int size = 0 ; int index = 0 ; int nl = System.getProperty ( `` line.separator '' ) .getBytes ( StandardCharsets.UTF_8 ) .length ; StringBuilder sb = new StringBuilder ( ) ; // new change sb.append ( timestamp ) .append ( System.getProperty ( `` line.separator '' ) ) ; for ( Task task : tasks ) { int ts = String.valueOf ( task ) .getBytes ( StandardCharsets.UTF_8 ) .length ; if ( size + ts + nl > 60000 ) { String fileName = `` tasks_info_ '' + index + `` .txt '' ; holder.put ( fileName , sb.toString ( ) ) ; index++ ; sb = new StringBuilder ( ) ; // new change sb.append ( timestamp ) .append ( System.getProperty ( `` line.separator '' ) ) ; size = 0 ; } sb.append ( task ) .append ( System.getProperty ( `` line.separator '' ) ) ; size += ts + nl ; } // for cases where we do n't reach the limit if ( size > 0 ) { // size can only be 0 if you have 0 tasks String fileName = `` tasks_info_ '' + index + `` .txt '' ; holder.put ( fileName , sb.toString ( ) ) ; } System.out.println ( holder ) ; }"
@ AppScope @ Injectpublic StackOverflow ( ) { } @ Modulepublic InternetModule { @ AppScope @ Provides public StackOverflow provideStackOverflow ( ) { return new StackOverflow ( ) ; } }
"public final class AsmFunnels { private AsmFunnels ( ) { } // ... public static void funnelFieldNode ( final FieldNode node , final PrimitiveSink into ) { FieldNodeFunnel.INSTANCE.funnel ( node , into ) ; } // ... @ ParametersAreNonnullByDefault private enum FieldNodeFunnel implements Funnel < FieldNode > { INSTANCE { @ Override public void funnel ( final FieldNode from , final PrimitiveSink into ) { into.putUnencodedChars ( from.name ) .putUnencodedChars ( from.desc ) .putUnencodedChars ( from.signature ) ; } } } // ... } public static void funnelFieldNode ( final FieldNode node , final PrimitiveSink into ) { FieldNodeFunnel.INSTANCE.funnel ( node , into ) ; } Error : ( 53 , 33 ) java : /home/fge/src/perso/parboiled1/grappa/src/main/java/org/parboiled/transform/process/AsmFunnels.java:53 : can not find symbolsymbol : method funnel ( org.objectweb.asm.tree.FieldNode , com.google.common.hash.PrimitiveSink ) location : class org.parboiled.transform.process.AsmFunnels.FieldNodeFunnel FieldNodeFunnel.INSTANCE.funnel ( node , into ) ; private static Funnel < FieldNode > fieldNodeFunnel ( ) { return FieldNodeFunnel.INSTANCE ; } public static void funnelFieldNode ( final FieldNode node , final PrimitiveSink into ) { fieldNodeFunnel ( ) .funnel ( node , into ) ; } ( ( Funnel < FieldNode > ) FieldNodeFunnel.INSTANCE ) .funnel ( node , into ) ; @ ParametersAreNonnullByDefaultprivate static final class FieldNodeFunnel implements Funnel < FieldNode > { private static final Funnel < FieldNode > INSTANCE = new FieldNodeFunnel ( ) ; @ Override public void funnel ( final FieldNode from , final PrimitiveSink into ) { into.putUnencodedChars ( from.name ) .putUnencodedChars ( from.desc ) .putUnencodedChars ( from.signature ) ; } }"
"[ { key : '' nom '' , operation : '' contains '' , value : '' b '' } , { key : '' prenom '' , operation : '' contains '' , value : '' y '' } , { key : '' age '' , operation : '' > = '' , value : 1 } , { key : '' age '' , operation : '' < = '' , value : 1000 } ] List filter = [ nom , contains , b , and , prenom , contains , y , and , age , > = , 1 , and , age , < = , 100 ] List < SearchCriteria > formedFilter = new ArrayList < > ( ) ; SearchCriteria sc = new SearchCriteria ( ) ; if ( filter ! = null ) { for ( int i = 0 ; i < filter.size ( ) ; i++ ) { if ( i % 4 ==0 ) { sc.setKey ( ( String ) filter.get ( i ) ) ; } else if ( i % 4 == 1 ) { sc.setOperation ( ( String ) filter.get ( i ) ) ; } else if ( i % 4 ==2 ) { sc.setValue ( filter.get ( i ) ) ; formedFilter.add ( sc ) ; } else { sc = new SearchCriteria ( ) ; } } } public class SearchCriteria { private String key ; private String operation ; private Object value ; public SearchCriteria ( ) { } public SearchCriteria ( String key , String operation , Object value ) { this.key = key ; this.operation = operation ; this.value = value ; } // getters and setters }"
SignalHandler handler = new SignalHandler ( ) { public void handle ( Signal sig ) { ... // handle SIGINT SignalHandler.SIG_DFL.handle ( sig ) ; } } ;
public static boolean isHighSurrogate ( char ch ) { return ch > = MIN_HIGH_SURROGATE & & ch < ( MAX_HIGH_SURROGATE + 1 ) ; } public static boolean isLowSurrogate ( char ch ) { return ch > = MIN_LOW_SURROGATE & & ch < ( MAX_LOW_SURROGATE + 1 ) ; } public static boolean isHighSurrogate ( char ch ) { return ch > = MIN_HIGH_SURROGATE & & ch < = MAX_HIGH_SURROGATE ; } public static boolean isLowSurrogate ( char ch ) { return ch > = MIN_LOW_SURROGATE & & ch < = MAX_LOW_SURROGATE ; }
class Test { DUMMY_TYPE testVariable ; }
< saml2 : Attribute Name= '' user.lastName '' NameFormat= '' urn : oasis : names : tc : SAML:2.0 : attrname-format : unspecified '' > < saml2 : AttributeValue xmlns : xs= '' http : //www.w3.org/2001/XMLSchema '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : type= '' xs : string '' > Surname < /saml2 : AttributeValue > < /saml2 : Attribute >
public class Executor { List < BaseRequest < BaseObj > > mRequests = new ArrayList < BaseRequest < BaseObj > > ( ) ; public Executor ( ) { } @ SuppressWarnings ( `` unchecked '' ) public < T extends BaseObj > void add ( final BaseRequest < T > request ) { mRequests.add ( ( BaseRequest < BaseObj > ) request ) ; } public void execute ( ) { for ( BaseRequest < BaseObj > r : mRequests ) { // DO SOMETHING WITH r } } }
String [ ] array = new String [ 10 ] ; int i = 0 ; public boolean accessValue ( int id ) { if ( id < array.length ) { //do something return true ; } return false ; } while ( true ) { if ( ! accessValue ( i++ ) ) { //tend to situation } } class InvalidAccessException extends Throwable { } public boolean accessValue ( int id ) throws InvalidAccessException { if ( ! id < array.length || ! id > = 0 ) throw new InvalidAccessException ( ) ; //do something } while ( true ) { try { accessValue ( i++ ) ; } catch ( InvalidAccessException e ) { //tend to situation } }
"public class Shelf { private String shelfCode ; private ArrayList < Book > books ; //add getters , setters etc . } public class Book { private String title ; } List < Shelf > shelves = new ArrayList < Shelf > ( ) ; Shelf s1 = new Shelf ( ) ; s1.add ( new Book ( `` book1 '' ) ) ; s1.add ( new Book ( `` book2 '' ) ) ; Shelf s2 = new Shelf ( ) ; s1.add ( new Book ( `` book3 '' ) ) ; s1.add ( new Book ( `` book4 '' ) ) ; shelves.add ( s1 ) ; shelves.add ( s2 ) ; List < Book > booksInLibrary = // ? ? List < Book > booksInLibrary = shelves.stream ( ) .map ( s - > s.getBooks ( ) ) .forEach ( booksInLibrary.addall ( books ) ) ;"
"[ [ `` Employee A '' , `` 1000 '' , `` Employee B '' , `` 1001 '' , `` Employee C '' , `` 1002 '' ] , [ `` Employee D '' , `` 1003 '' , `` Employee C '' , `` 1002 '' ] ] [ [ `` Employee A '' , `` 1000 '' , `` Employee B '' , `` 1001 '' , `` Employee C '' , `` 1002 '' ] , [ `` Employee D '' , `` 1003 '' , null , null , `` Employee C '' , `` 1002 '' ] ] public void refactorArray ( String jsonData ) throws Exception { JSONArray array = new JSONArray ( jsonData ) ; for ( int i = 0 ; i < array.length ( ) ; i++ ) { //flag previous position of grandfather manager and name/id // if previous position does not match current position - do logic to pop the array at that element to put it back into the previous position } }"
"org.gradle.api.internal.tasks.testing.TestSuiteExecutionException : Could not execute test class 'com.blabla.playground.AppTest ' . at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass ( SuiteTestClassProcessor.java:53 ) Caused by : java.lang.UnsupportedClassVersionError : Preview features are not enabled for com/blabla/playground/AppTest ( class file version 58.65535 ) . Try running with ' -- enable-preview ' at java.base/java.lang.ClassLoader.defineClass1 ( Native Method ) plugins { java application } repositories { jcenter ( ) } dependencies { implementation ( `` com.google.guava : guava:28.2-jre '' ) testImplementation ( `` org.junit.jupiter : junit-jupiter-api:5.6.0 '' ) testRuntimeOnly ( `` org.junit.jupiter : junit-jupiter-engine:5.6.0 '' ) } application { mainClassName = `` com.blabla.playground.App '' } java { sourceCompatibility = JavaVersion.VERSION_14 targetCompatibility = JavaVersion.VERSION_14 } tasks { withType < Test > ( ) .all { allJvmArgs.add ( `` -- enable-preview '' ) testLogging.showStandardStreams = true testLogging.showExceptions = true useJUnitPlatform { } } withType < JavaExec > ( ) .all { jvmArgs ! ! .add ( `` -- enable-preview '' ) } withType < Wrapper > ( ) .all { gradleVersion = `` 6.4.1 '' distributionType = Wrapper.DistributionType.BIN } withType ( JavaCompile : :class.java ) .all { options.compilerArgs.addAll ( listOf ( `` -- enable-preview '' , `` -Xlint : preview '' ) ) } jar { manifest { attributes ( `` Main-Class '' to `` com.blabla.playground.App '' ) } } }"
public abstract class AbstractEntity implements Cloneable { ... public AbstractEntity clone ( ) { Cloner cloner = new Cloner ( ) ; AbstractEntity cloned = cloner.deepClone ( this ) ; return cloned ; } } public class EntityA extends AbstractEntity { ... } EntityA e1 = new EntityA ( ) ; EntityA e2 = ( EntityA ) e1.clone ( ) ;
"trait Visitor { type X type S < : Strategy type R [ v < : Visitor ] = ( S { type X = Visitor.this.X ; type V=v } ) # Y } trait Strategy { type V < : Visitor type X type Y } public interface Strategy < V extends Visitor < ? , ? , ? > , X , Y > { } public interface Visitor < X , S extends Strategy < ? , ? , ? > , R ? ? ? ? ? > { }"
mvn spring-boot : build-image REPOSITORY TAG IMAGE ID CREATED SIZEgcr.io/paketo-buildpacks/builder base-platform-api-0.3 daceb4f909b7 40 years ago 690MBmyimage master a482a4a34379 40 years ago 285MB
public static void main ( String [ ] args ) { String s1 = new String ( `` hello '' ) ; String s2 = new String ( `` hello '' ) ; s1.intern ( ) ; s2.intern ( ) ; System.out.println ( s1 == s2 ) ; // why this returns false ? }
public static void main ( String [ ] args ) { Thread t = new Thread ( ) ; Object o = new Object ( ) ; String s = new String ( `` '' ) ; System.out.println ( t == o ) ; //no issues here System.out.println ( t==s ) ; // but this throws above error }
public static void main ( String args [ ] ) { int n=0 ; for ( int m=0 ; m < 5 ; m++ ) { n=n++ ; System.out.println ( n ) ; } } public static void main ( String args [ ] ) { int n=0 ; for ( int m=0 ; m < 5 ; m++ ) { n++ ; System.out.println ( n ) ; } }
"URL url = new URL ( urlString ) ; HttpURLConnection connection = ( HttpURLConnection ) url.openConnection ( ) ; try { connection.setRequestMethod ( `` GET '' ) ; connection.setRequestProperty ( `` charset '' , `` utf-8 '' ) ; connection.setRequestProperty ( `` User-Agent '' , `` Mozilla/5.0 ( Macintosh ; Intel Mac OS X 10_9_0 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/31.0.1650.57 Safari/537.36 '' ) ; connection.setConnectTimeout ( '\uea60 ' ) ; connection.setReadTimeout ( '\uea60 ' ) ; connection.setInstanceFollowRedirects ( false ) ; Log.d ( TAG , `` b4 connect '' ) ; connection.connect ( ) ; Log.d ( TAG , `` after connect '' ) ; if ( connection.getResponseCode ( ) == 200 ) { return IOUtils.toString ( connection.getInputStream ( ) , `` UTF-8 '' ) ; } } catch ( Exception var ) { throw new Exception ( var.getMessage ( ) ) ; } finally { connection.disconnect ( ) ; } return null ;"
Modifier | Class | Package | Subclass | World————————————+———————+—————————+——————————+———————public | y | y | y | y————————————+———————+—————————+——————————+———————protected | y | y | y | n————————————+———————+—————————+——————————+———————no modifier | y | y | n | n————————————+———————+—————————+——————————+———————private | y | n | n | n Modifier | Class | Subclass | Package | World————————————+———————+—————————-+——————————+———————public | y | y | y | y————————————+———————+—————————+——————————+———————no modifier | y | y | y | n————————————+———————+—————————+——————————+———————protected | y | y | n | n————————————+———————+—————————+——————————+———————private | y | n | n | n
Job { String title ; @ ManyToOne @ JoinColumn ( name = `` location_id '' ) JobLocation location ; } JobLocation { int id ; String description ; double latitude ; double longitude ; } { jobLocationDescription : 'Santa Fe ' } String [ ] field = requestField.split ( `` . `` ) ; Entity ent = ( get object from field [ 0 ] ) ; if ( field.length > 2 ) { ent = ent.get [ get method name from next field position ] ( ) ; } ent.set [ get method name from last field [ ] value ] ( requestValue ) ;
public static void permutations ( int n ) { System.out.print ( ' a ' + 0 ) ; }
"final Callback < Tweet > actionCallback = new Callback < Tweet > ( ) { @ Override public void success ( Result < Tweet > result ) { int x = 1 ; x++ ; // This code is just so I can put a breakpoint here } @ Override public void failure ( TwitterException exception ) { DialogManager.showOkDialog ( context , R.string.twitter_feed_not_found ) ; } } ; final UserTimeline userTimeline = new UserTimeline.Builder ( ) .screenName ( handleStr + `` dfdfddfdfdfasdf '' ) // Handle that does n't exist .includeReplies ( false ) .includeRetweets ( false ) .maxItemsPerRequest ( 5 ) .build ( ) ; final TweetTimelineListAdapter adapter = new TweetTimelineListAdapter.Builder ( context ) .setTimeline ( userTimeline ) .setViewStyle ( R.style.tw__TweetLightWithActionsStyle ) .setOnActionCallback ( actionCallback ) .build ( ) ; listView.setAdapter ( adapter ) ;"
package hf ; public interface BadInterface { void meth ( ) throws Exception ; } package hf ; public class apples implements BadInterface { public static void main ( String [ ] args ) { new apples ( ) .meth ( ) ; } public void meth ( ) { System.out.println ( `` Ding dong meth . `` ) ; } }
"import java.awt . * ; import javax.swing . * ; public class ColorChooserProblem { JFrame f = new JFrame ( `` Testing Color Chooser '' ) ; public static void main ( String [ ] args ) { new ColorChooserProblem ( ) .start ( ) ; } public void start ( ) { f.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; JColorChooser jc1 = new JColorChooser ( ) ; JColorChooser jc2 = new JColorChooser ( ) ; f.add ( jc1 , BorderLayout.NORTH ) ; f.add ( jc2 , BorderLayout.SOUTH ) ; f.pack ( ) ; f.setLocationRelativeTo ( null ) ; f.setVisible ( true ) ; } }"
@ POST @ Path ( `` inline '' ) public Response inline ( String s ) { return Response.status ( Status.CREATED ) .build ( ) ; } private static final Response RESP = Response.status ( Status.CREATED ) .build ( ) ; @ POST @ Path ( `` staticfield '' ) public Response static ( String s ) { return RESP ; } private final Response resp = Response.status ( Status.CREATED ) .build ( ) ; @ POST @ Path ( `` field '' ) public Response field ( String s ) { return resp ; }
"import scala.collection.JavaConversions._import org.apache.poi.xwpf.usermodel._def format ( sourceDocumentPath : String , outputDocumentPath : String ) { val sourceXWPFDocument = new XWPFDocument ( new FileInputStream ( sourcePath ) ) // lets say I have a list of paragraph numbers ... I want to format val parasToFormat = List ( 2 , 10 , 15 , 20 ) val allParagraphs = sourceXWPFDocument.getParagraphs for ( ( paragraph , index ) < - allParagraphs.zipWithIndex ) { if ( parasToFormat.contains ( index ) ) { formatParagraph ( paragraph ) } } val outputDocx = new FileOutputStream ( new File ( outputDocumentPath ) ) ; xwpfDocument.write ( outputDocx ) outputDocx.close ( ) } def formatParagraph ( paragraph : XWPFParagraph ) : Unit = { // Do some color changing to few runs // Add few runs with new text . }"
"import java.util . * ; class MethodAssign2 { static void capitalizer ( String a , int b ) { if ( b==-1 ) { System.out.println ( `` worked ? `` ) ; } else { char [ ] achars = a.toCharArray ( ) ; achars [ b ] -= 32 ; String caplet = new String ( achars ) ; System.out.println ( caplet ) ; System.out.println ( a ) ; capitalizer ( caplet , b-1 ) ; capitalizer ( a , b-1 ) ; } } public static void main ( String [ ] args ) { String word = `` ownage '' ; capitalizer ( word , word.length ( ) -1 ) ; } }"
`` ==References== This is a reference ==Further reading== * { { cite book|editor1-last=Lukes|editor1-first=Steven|editor2-last=Carrithers| } } * ==External links== '' '==References== ' '==External links== ' '==Further reading== ' Pattern pattern = Pattern.compile ( `` \\=+ [ A-Za-z ] \\=+ '' ) ; Matcher matcher = pattern.matcher ( textBuffer.toString ( ) ) ; while ( matcher.find ( ) ) { System.out.println ( matcher.group ( 0 ) ) ; }
"grammar Robot ; file : command+ ; command : ( delay|type|move|click|rclick ) ; delay : 'wait ' number ' ; ' ; type : 'type ' id ' ; ' ; move : 'move ' number ' , ' number ' ; ' ; click : 'click ' ; rclick : 'rlick ' ; id : ( ' a'.. ' z'| ' A'.. ' Z ' ) + ; number : ( ' 0'.. ' 9 ' ) + ; WS : ( ' ' | '\t ' | '\r ' | '\n ' ) { skip ( ) ; } ;"
"@ FunctionalInterfaceinterface Processable < T , X extends Throwable > { public T apply ( ) throws X ; } class MyCheckedException extends Exception { ... } class MyCheckedExceptionWrapper extends MyCheckedException { ... } public class MyExceptionLogger < T , X extends Throwable > { public T process ( Processable < T , X > processable ) throws MyCheckedException { try { return processable.apply ( ) ; } catch ( MyCheckedException thrown ) { // this line is n't accepted throw thrown ; } catch ( Exception | LinkageError thrown ) { throw new MyCheckedExceptionWrapper ( thrown ) ; } catch ( Throwable thrown ) { ... just log return null ; } } }"
com.thoughtworks.paranamer.ParameterNamesNotFoundException : Parameter names not found for executeMethod at com.thoughtworks.paranamer.BytecodeReadingParanamer $ TypeCollector.getParameterNamesForMethod ( BytecodeReadingParanamer.java:209 ) if ( ! collector.isDebugInfoPresent ( ) ) { if ( throwExceptionIfMissing ) { throw new ParameterNamesNotFoundException ( `` Parameter names not found for `` + methodName ) ; } else { return Paranamer.EMPTY_NAMES ; } }
"public static void main ( String ... args ) { String s = `` abc '' ; System.out.println ( s.hashCode ( ) ) ; String s1 = `` abc `` ; System.out.println ( s1.hashCode ( ) ) ; String s2 = s.trim ( ) ; System.out.println ( s2.hashCode ( ) ) ; String s3 = s1.trim ( ) ; System.out.println ( s3.hashCode ( ) ) ; System.out.println ( ) ; System.out.println ( s == s1 ) ; System.out.println ( s == s2 ) ; System.out.println ( s == s3 ) ; } 96354325396789635496354false -- Correcttrue -- This means s and s2 are references to the same String object `` abc '' .false -- s3=s1.trim ( ) ... which means s3= '' abc '' yet s==s3 fails.. If the above conditon were to be considered ( s==s2 is true.. ) , this should also be true.."
short s = ' a ' ; // validShort ss = ' a ' ; // validint i = ' a ' ; // validInteger ii = ' a ' ; // invalid byte b ; final short s = 1 ; final Short ss = 1 ; final int i =1 ; final Integer ii = i ; final long L = 1 ; final Long LL =1L ; b = s ; // validb = ss ; // invalidb = i ; // validb = ii ; // invalidb = L ; // invalidb = LL ; // invalid
"import javax.swing . * ; import java.awt . * ; import java.awt.event . * ; import java.sql . * ; public class javaTesting extends JFrame { public JFrame mrFrame ; public int enter ; public JPanel mrPanel ; public javaTesting ( ) throws Exception { Class.forName ( `` com.mysql.jdbc.Driver '' ) ; try { Connection con = DriverManager.getConnection ( `` jdbc : mysql : //localhost:3306/cms '' , '' root '' , '' '' ) ; } catch ( SQLException e ) { System.out.println ( e.getMessage ( ) ) ; } mrFrame = new JFrame ( ) ; mrPanel = new JPanel ( ) ; mrPanel.setLayout ( new GridLayout ( 4,1 ) ) ; JLabel user = new JLabel ( `` Username '' ) ; mrPanel.add ( user ) ; JTextField user_input = new JTextField ( 30 ) ; mrPanel.add ( user_input ) ; JLabel pass = new JLabel ( `` Password '' ) ; mrPanel.add ( pass ) ; JTextField pw_input = new JPasswordField ( 30 ) ; mrPanel.add ( pw_input ) ; mrFrame.setSize ( 700,700 ) ; mrFrame.setLocationRelativeTo ( null ) ; mrFrame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; //mrFrame.setVisible ( true ) ; mrFrame.setResizable ( false ) ; input ( ) ; if ( enter == JOptionPane.OK_OPTION ) { JOptionPane.showMessageDialog ( null , `` You clicked ok ! `` ) ; input ( ) ; } else { System.exit ( 1 ) ; } } public void input ( ) { enter = ( int ) JOptionPane.showConfirmDialog ( mrFrame , mrPanel , '' Login Cridantiels '' , JOptionPane.OK_CANCEL_OPTION , JOptionPane.QUESTION_MESSAGE ) ; } public static void main ( String agrs [ ] ) throws Exception { new javaTesting ( ) ; } } do { input ( ) ; if ( enter == JOptionPane.OK_OPTION ) { JOptionPane.showMessageDialog ( null , `` You clicked ok ! `` ) ; } else { System.exit ( 1 ) ; } } while ( enter ! = JOptionPane.CANCEL_OPTION ) ;"
class Outer { class Inner { } public static void main ( String args [ ] ) { Outer.Inner obj = new Outer ( ) .new Inner ( ) ; } } public static void main ( java.lang.String [ ] ) ; Code : 0 : new # 2 // class Outer $ Inner 3 : dup 4 : new # 3 // class Outer 7 : dup 8 : invokespecial # 4 // Method `` < init > '' : ( ) V 11 : dup 12 : invokevirtual # 5 // Method java/lang/Object.getClass : ( ) Ljava/lang/Class ; 15 : pop 16 : invokespecial # 6 // Method Outer $ Inner . `` < init > '' : ( LOuter ; ) V 19 : astore_1
"1.0.0.0-00000000-000002.1.0.02.2.0.02.3.0.0-00000000-00000 String [ ] arrays = { `` 1.0.0.0-00000000-00000 '' , `` 2.1.0.0 '' , `` 2.2.0.0 '' , `` 2.3.0.0-00000000-00000 '' } ; 1.0.0.0-00000000-000002.3.0.0-00000000-000002.1.0.02.2.0.0 import java.util.Arrays ; import java.util.Comparator ; import java.util.Collections ; public class HelloWorld { public static void main ( String [ ] args ) { String [ ] arrays = { `` 1.0.0.0-00000000-00000 '' , `` 2.1.0.0 '' , `` 2.2.0.0 '' , `` 2.3.0.0-00000000-00000 '' } ; String [ ] newArray = new String [ arrays.length ] ; class CustomComparator implements Comparator < String > { @ Override public int compare ( String a , String b ) { if ( a.contains ( `` - '' ) & & ! b.contains ( `` - '' ) ) return 1 ; else if ( ! a.contains ( `` - '' ) & & b.contains ( `` - '' ) ) return -1 ; return a.compareTo ( b ) ; } } Arrays.sort ( arrays , new CustomComparator ( ) ) ; for ( String array : arrays ) { System.out.println ( array ) ; } } } Error : $ javac HelloWorld.java 2 > & 1HelloWorld.java:25 : error : no suitable method found for sort ( String [ ] , CustomComparator ) Collections.sort ( arrays , new CustomComparator ( ) ) ; ^ method Collections. < T # 1 > sort ( List < T # 1 > , Comparator < ? super T # 1 > ) is not applicable ( no instance ( s ) of type variable ( s ) T # 1 exist so that argument type String [ ] conforms to formal parameter type List < T # 1 > ) method Collections. < T # 2 > sort ( List < T # 2 > ) is not applicable ( can not instantiate from arguments because actual and formal argument lists differ in length ) where T # 1 , T # 2 are type-variables : T # 1 extends Object declared in method < T # 1 > sort ( List < T # 1 > , Comparator < ? super T # 1 > ) T # 2 extends Comparable < ? super T # 2 > declared in method < T # 2 > sort ( List < T # 2 > ) 1 error The method gave me an output of 2.1.0.0 2.2.0.01.0.0.0-00000000-00000 2.3.0.0-00000000-00000 as opposed to1.0.0.0-00000000-000002.3.0.0-00000000-000002.1.0.0 2.2.0.0"
"import java.util . * ; class X { List < String > list = new ArrayList < > ( ) ; } public class TestGC { // Is an Object eligible for GC even if its instance variable is references to another variable public static void main ( String [ ] args ) { X x = new X ( ) ; // 1 List < String > list = x.list ; x = null ; // 2 , Is X object reference eligible for garbage collection here ? list.add ( `` a '' ) ; list.add ( `` b '' ) ; list.add ( `` c '' ) ; for ( String item : list ) { System.out.println ( item ) ; } list = null ; // 3 , Or X object reference eligible for garbage collection here , after list is set to null } }"
"# DEFINE COL_WIDTH 20 ; printf ( `` % *s '' , COL_WIDTH , myString ) ; printf ( `` % 20s '' , myString ) ;"
"2011:06:05 15:50\t0.478\t0.209\t0.211\t0.211\t0.205\t-0.462\t0.203\t0.202\t0.212 ? ( \d { 4 } : \d { 2 } : \d { 2 } \d { 2 } : \d { 2 } [ : \d { 2 } ] ? ) \t ( ( - ? \d* ( \.\d* ) ? ) \t ? ) { 1,16 }"
< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < configuration > < appender name= '' CONSOLE '' class= '' ch.qos.logback.core.ConsoleAppender '' > < ! -- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -- > < encoder > < pattern > % d { dd.MM.yyyy HH : mm : ss.SSS } * % level* [ % thread ] % logger % message % n < /pattern > < /encoder > < /appender > < root level= '' debug '' > < appender-ref ref= '' CONSOLE '' / > < /root > < /configuration >
"InputStreamReader reader = new InputStreamReader ( in , `` UTF-8 '' ) ; BufferedReader m_reader = new BufferedReader ( reader ) ; StreamTokenizer m_tokenizer = new StreamTokenizer ( m_reader ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; int c = m_reader.read ( ) ; System.out.println ( c ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; m_tokenizer.nextToken ( ) ; System.out.println ( m_tokenizer.toString ( ) ) ; ( ; FF [ 4 ] CA [ UTF-8 ] Token [ ' ( ' ] , line 1Token [ ' ; ' ] , line 1Token [ FF ] , line 1Token [ ' [ ' ] , line 152Token [ ' ] ' ] , line 1Token [ CA ] , line 1 Token [ ' ( ' ] , line 1Token [ ' ; ' ] , line 1Token [ FF ] , line 1Token [ ' [ ' ] , line 193Token [ n=4.0 ] , line 1Token [ CA ] , line 1"
"package com.example.test.reflect ; class JLS15Test2 { int compute1 ( Object o1 , Integer i , Integer j ) { return 1 ; } int compute1 ( String s1 , Integer i , int j ) { return 2 ; } int compute2 ( Object o1 , Integer i , int j ) { return 3 ; } int compute2 ( String s1 , Integer i , Integer j ) { return 4 ; } int compute3 ( Object o1 , Integer i , int j ) { return 5 ; } int compute3 ( String s1 , Integer i , int j ) { return 6 ; } int compute4 ( Object o1 , Integer i , Integer j ) { return 7 ; } int compute4 ( String s1 , Integer i , Integer j ) { return 8 ; } int compute5 ( Object o1 , Integer i , Object j ) { return 9 ; } int compute5 ( String s1 , Integer i , int j ) { return 10 ; } public static void main ( String [ ] args ) { JLS15Test2 y = new JLS15Test2 ( ) ; // wo n't compile : // The method compute1 ( Object , Integer , Integer ) is ambiguous // for the type JLS15Test2 // System.out.println ( y.compute1 ( `` hi '' , 1 , 1 ) ) ; // Neither will this ( same reason ) // System.out.println ( y.compute2 ( `` hi '' , 1 , 1 ) ) ; System.out.println ( y.compute3 ( `` hi '' , 1 , 1 ) ) ; System.out.println ( y.compute4 ( `` hi '' , 1 , 1 ) ) ; // neither will this ( same reason ) // System.out.println ( y.compute5 ( `` hi '' , 1 , 1 ) ) ; } }"
< dependency > < groupId > org.hibernate < /groupId > < artifactId > hibernate-core < /artifactId > < version > 3.6.10.Final < /version > < /dependency > < dependency > < groupId > org.hibernate < /groupId > < artifactId > hibernate-c3p0 < /artifactId > < version > 3.6.10.Final < /version > < type > jar < /type > < scope > compile < /scope > < /dependency > < dependency > < groupId > postgresql < /groupId > < artifactId > postgresql < /artifactId > < version > 8.4-702.jdbc4 < /version > < /dependency >
null.toString ( ) ; null.toString ( ) ; ^
"/** * Converts the argument to a { @ code long } by an unsigned * conversion . In an unsigned conversion to a { @ code long } , the * high-order 32 bits of the { @ code long } are zero and the * low-order 32 bits are equal to the bits of the integer * argument . */public static long toUnsignedLong ( int x ) { return ( ( long ) x ) & 0xffffffffL ; }"
"import static java.awt.EventQueue.invokeLater ; import java.awt.event . * ; import javax.swing . * ; public class Whatever { static boolean flag = true ; static JTextField tf = new JTextField ( `` Hi '' ,20 ) ; static JPanel p = new JPanel ( ) ; static JFrame f = new JFrame ( ) ; static JButton b = new JButton ( `` End '' ) ; public static void main ( String [ ] args ) { swingInit ( ) ; invokeLater ( new Runnable ( ) { @ Override public void run ( ) { // swingInit ( ) ; // doIt ( ) ; } } ) ; doIt ( ) ; } static void swingInit ( ) { b.addMouseListener ( new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { flag = false ; JOptionPane.showMessageDialog ( null , '' Clicked ... exiting '' ) ; System.exit ( 0 ) ; } } ) ; p.add ( tf ) ; p.add ( b ) ; f.add ( p ) ; f.setVisible ( true ) ; f.pack ( ) ; f.setDefaultCloseOperation ( WindowConstants.DISPOSE_ON_CLOSE ) ; } static String getInfo ( ) { return `` Hello ... `` + Math.random ( ) ; } static void doIt ( ) { while ( flag ) tf.setText ( getInfo ( ) ) ; } ; }"
interface FooStorage { Foo getFoo ( String name ) ; List < Foo > getFoos ( List < String > names ) ; } interface FooStorage { List < Foo > getFoos ( List < String > names ) ; } class StorageUtility { public static < T > T firstOrNull ( List < T > data ) { ... } } interface FooStorage { List < Foo > getFoos ( String ... names ) ; } class StorageUtility { public static < T > T firstOrNull ( List < T > data ) { ... } }
"import java.util.HashMap ; import java.util.Map ; public class TestGenericTypeInference { Map < String , Double > salaryMap = new HashMap < > ( ) ; Map < String , Object > copySalaryMap = new HashMap < > ( salaryMap ) ; } TestGenericTypeInference.java:8 : error : incompatible types : HashMap < String , Double > can not be converted to Map < String , Object > Map < String , Object > copySalaryMap = new HashMap < > ( salaryMap ) ; ^"
"final public NameExpr Name ( ) throws ParseException { NameExpr ret ; jj_consume_token ( IDENTIFIER ) ; ret = new NameExpr ( token.beginLine , token.beginColumn , token.endLine , token.endColumn , token.image ) ; label_23 : while ( true ) { if ( jj_2_17 ( 2 ) ) { ; } else { break label_23 ; } jj_consume_token ( DOT ) ; jj_consume_token ( IDENTIFIER ) ; ret = new QualifiedNameExpr ( ret.getBeginLine ( ) , ret.getBeginColumn ( ) , token.endLine , token.endColumn , ret , token.image ) ; } { if ( true ) { return ret ; } } throw new Error ( `` Missing return statement in function '' ) ; }"
"public class Specie { private List < Entity > individuals ; public Specie ( ) { this.individuals = new ArrayList < > ( ) ; } public boolean matches ( Entity e ) { for ( Entity s : this.individuals ) { if ( ! f ( s , e ) ) { return false ; } } return true ; } public void add ( Entity i ) { this.individuals.add ( i ) ; } } private static int numberOfSpeciesRecursive ( List < Entity > entities , List < Specie > universe ) { if ( entities.size ( ) == 0 ) { return 0 ; } else { List < Entity > remains = new ArrayList < > ( ) ; Specie specie = new Specie ( ) ; for ( Entity e : entities ) { if ( specie.matches ( e ) ) { specie.add ( e ) ; } else { remains.add ( e ) ; } } universe.add ( specie ) ; return 1 + numberOfSpeciesRecursive ( remains , universe ) ; } }"
"good : apples = 22 pears = 24 peach = 25 orange = 29 total : 100 % bad : apples = 0 pears = 0 peach = 40 orange = 60 total : 100 % // Although total is correct , the example fails because // the minimum of 20 % per item was not obeyed . private static void recursion_part ( int k , int sum , int [ ] coeff ) { //k is number of items in the list ( in this example its 4 ( 0-3 ) , sum is the remaining total percent to break down , coeff is the template to store values //this recursively takes the sum and tries to find lower values of it until it equals zero using the bounds given for ( int c = low_bound [ k ] ; c < = high_bound [ k ] ; c++ ) { coeff [ k ] = c ; int [ ] newcoeff = Arrays.copyOf ( coeff , coeff.length ) ; if ( c - sum == 0 ) { results.add ( newcoeff ) ; printresults ( newcoeff ) ; break ; } else if ( k > 0 ) { recursion_part ( k - 1 , sum - c , newcoeff ) ; } } } import java.util.ArrayList ; import java.util.Arrays ; public class recursion_percent_returner { static final int target_percent = 100 ; static final String [ ] names = new String [ ] { `` apples '' , `` pears '' , `` peach '' , `` orange '' } ; static int [ ] low_bound = new int [ names.length ] ; static int [ ] high_bound = new int [ names.length ] ; static ArrayList results = new ArrayList ( ) ; //queue to store results static int [ ] default_coeff = new int [ names.length ] ; public static void main ( String [ ] args ) { System.out.println ( `` starting.. '' ) ; System.out.println ( `` list size `` + names.length ) ; Arrays.fill ( low_bound , 20 ) ; //fills the min list with default value Arrays.fill ( high_bound , 60 ) ; //fills the max list with default value recursion_part ( names.length-1 , target_percent , default_coeff ) ; System.out.println ( `` total size of results are `` + results.size ( ) ) ; } private static void recursion_part ( int k , int sum , int [ ] coeff ) { //k is number of items in the list ( in this example its 4 ( 0-3 ) , sum is the remaining total percent to break down , coeff is the template to store values //this recursively takes the sum and tries to find lower values of it until it equals zero using the bounds given for ( int c = low_bound [ k ] ; c < = high_bound [ k ] ; c++ ) { coeff [ k ] = c ; int [ ] newcoeff = Arrays.copyOf ( coeff , coeff.length ) ; if ( c - sum == 0 ) { results.add ( newcoeff ) ; printresults ( newcoeff ) ; break ; } else if ( k > 0 ) { recursion_part ( k - 1 , sum - c , newcoeff ) ; } } } private static void printresults ( int [ ] newcoeff ) { for ( int x = 0 ; x < newcoeff.length ; x++ ) { System.out.println ( names [ x ] + `` = `` + newcoeff [ x ] ) ; } System.out.println ( `` ********* '' ) ; } }"
class UserThread extends TimerTask { @ Override public void run ( ) { log.debug ( `` Get a list of members ! `` ) ; List < String > users = userManager.getUsers ( ) ; retrieveInitialData ( users ) ; } public void retrieveInitialData ( List < String > users ) { for ( String user : users ) { new Thread ( new GetData ( user ) ) .start ( ) ; } } addToSuccessList ( String user ) { synchronized ( successList ) { successList.add ( user ) ; } } addToFailureList ( String user ) { synchronized ( failureList ) { failureList.add ( user ) ; } } class GetData extends Thread { String userID ; public GetData ( String user ) { this.userID = user ; } public void run ( ) { try { dataManager.getData ( user ) ; addToSuccessList ( user ) ; } catch ( Execption e ) { addToFailureList ( user ) ; } }
"class A { B b ; public A ( B b ) { this.b = b ; } } class B { List < A > as ; private int i ; public B ( int i ) { this.i = i ; } } Map < A , List < B > > bs ; List < A > as = new ArrayList < > ( ) ; as.add ( a1 ) ; as.add ( a2 ) ; as.add ( a3 ) ;"
`` . *class ( [ A-Z ] [ a-z ] + ) . *\ { `` `` final static Logger log = Logger.getLogger ( $ 1.class ) ; ''
"public class MainActivity extends AppCompatActivity { @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; Button btn = ( Button ) findViewById ( R.id.btn ) ; btn.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { EditText firstnum = ( EditText ) findViewById ( R.id.numberinput ) ; TextView resultTextView = ( TextView ) findViewById ( R.id.resulttextview ) ; int num1 = Integer.parseInt ( firstnum.getText ( ) .toString ( ) ) ; int result = num1 * num1 ; resultTextView.setText ( result + `` '' ) ; } } ) ; } } 7-16 01:27:14.359 10870-10870/com.example.abarimess.myfirstapp E/AndroidRuntime : FATAL EXCEPTION : mainProcess : com.example.abarimess.myfirstapp , PID : 10870java.lang.RuntimeException : Unable to start activity ComponentInfo { com.example.abarimess.myfirstapp/com.example.abarimess.myfirstapp.MainActivity } : java.lang.UnsupportedOperationException : Ca n't convert to dimension : type=0x4 at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:3184 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:3294 ) at android.app.ActivityThread.access $ 1000 ( ActivityThread.java:210 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1704 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:145 ) at android.app.ActivityThread.main ( ActivityThread.java:6938 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:1404 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:1199 ) Caused by : java.lang.UnsupportedOperationException : Ca n't convert to dimension : type=0x4 at android.content.res.TypedArray.getDimensionPixelOffset ( TypedArray.java:546 ) at android.support.constraint.ConstraintLayout $ LayoutParams. < init > ( ConstraintLayout.java:2685 ) at android.support.constraint.ConstraintLayout.generateLayoutParams ( ConstraintLayout.java:1915 ) at android.support.constraint.ConstraintLayout.generateLayoutParams ( ConstraintLayout.java:476 ) at android.view.LayoutInflater.rInflate ( LayoutInflater.java:820 ) at android.view.LayoutInflater.inflate ( LayoutInflater.java:511 ) at android.view.LayoutInflater.inflate ( LayoutInflater.java:415 ) at android.view.LayoutInflater.inflate ( LayoutInflater.java:366 ) at android.support.v7.app.AppCompatDelegateImpl.setContentView ( AppCompatDelegateImpl.java:467 ) at android.support.v7.app.AppCompatActivity.setContentView ( AppCompatActivity.java:140 ) at com.example.abarimess.myfirstapp.MainActivity.onCreate ( MainActivity.java:11 ) at android.app.Activity.performCreate ( Activity.java:6575 ) at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1134 ) at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:3137 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:3294 ) at android.app.ActivityThread.access $ 1000 ( ActivityThread.java:210 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1704 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:145 ) at android.app.ActivityThread.main ( ActivityThread.java:6938 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:1404 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:1199 ) < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < android.support.constraint.ConstraintLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' tools : context= '' .MainActivity '' tools : layout_editor_absoluteY= '' 73dp '' > < TextView android : id= '' @ +id/textView3 '' android : layout_width= '' 360dp '' android : layout_height= '' 119dp '' android : layout_marginTop= '' 50dp '' android : text= '' @ string/square_of_the_number_is '' android : textAppearance= '' @ style/TextAppearance.AppCompat.Body2 '' android : textColor= '' @ android : color/holo_purple '' android : textSize= '' 40sp '' android : visibility= '' visible '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintHorizontal_bias= '' 0.49 '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toBottomOf= '' @ +id/numberinput '' / > < TextView android : id= '' @ +id/Resulttextview '' android : layout_width= '' 390dp '' android : layout_height= '' wrap_content '' android : layout_marginTop= '' 25dp '' android : background= '' @ android : color/holo_red_dark '' android : text= '' @ string/the_result_is '' android : textAlignment= '' center '' android : textAppearance= '' @ style/TextAppearance.AppCompat.Body2 '' android : textColor= '' # ffffff '' android : textSize= '' 50sp '' android : visibility= '' visible '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' / > < TextView android : id= '' @ +id/resulttextview '' android : layout_width= '' 30dp '' android : layout_height= '' wrap_content '' android : layout_marginEnd= '' 8dp '' android : layout_marginTop= '' 30dp '' android : background= '' @ android : color/darker_gray '' android : text= '' @ string/_0 '' android : textAlignment= '' center '' android : textAppearance= '' @ style/TextAppearance.AppCompat.Body2 '' android : textColor= '' @ color/Optional '' android : textSize= '' 40sp '' android : visibility= '' visible '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintHorizontal_bias= '' 0.51 '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toBottomOf= '' @ +id/Resulttextview '' / > < Button android : id= '' @ +id/btn '' android : layout_width= '' 370dp '' android : layout_height= '' 80dp '' android : layout_marginTop= '' 50dp '' android : background= '' ? android : attr/colorActivatedHighlight '' android : text= '' @ string/butan '' android : textColor= '' @ android : color/holo_blue_bright '' android : textSize= '' 20sp '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toBottomOf= '' @ +id/textView3 '' / > < EditText android : id= '' @ +id/numberinput '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_marginEnd= '' 8dp '' android : layout_marginStart= '' 8dp '' android : layout_marginTop= '' 50dp '' android : ems= '' 10 '' android : hint= '' @ string/number_in_here '' android : inputType= '' numberDecimal '' android : singleLine= '' false '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toBottomOf= '' @ +id/resulttextview '' / > < /android.support.constraint.ConstraintLayout > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' package= '' com.example.abarimess.myfirstapp '' > < application android : allowBackup= '' true '' android : icon= '' @ mipmap/ic_launcher '' android : label= '' @ string/app_name '' android : roundIcon= '' @ mipmap/ic_launcher_round '' android : supportsRtl= '' true '' android : theme= '' @ style/AppTheme '' > < activity android : name= '' .MainActivity '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < /intent-filter > < /activity > < /application > < /manifest >"
char ch = `` ; String str = `` '' ;
public int getHealth ( ) ; public void setHealth ( int health ) ; // Must now bepublic double getHealth ( ) ; public void setHealth ( double health ) ;
public static int [ ] insertionSort ( int [ ] A ) { //Check for illegal cases if ( A == null || A.length == 0 ) { throw new IllegalArgumentException ( `` A is not populated '' ) ; } for ( int i = 0 ; i < A.length ; i++ ) { int j = i ; while ( j > 0 & & A [ j - 1 ] > A [ j ] ) { int temp = A [ j ] ; A [ j ] = A [ j - 1 ] ; A [ j - 1 ] = temp ; j -- ; } } return A ; } int temp = A [ j - 1 ] ; A [ j - 1 ] = A [ j ] ; A [ j ] = temp ; Compiled from `` me.java '' public class me { public me ( ) ; Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object . `` < init > '' : ( ) V 4 : return public static void main ( java.lang.String [ ] ) ; Code : 0 : sipush 10000 3 : newarray int 5 : astore_1 6 : bipush 10 8 : istore_2 9 : aload_1 10 : iload_2 11 : iaload 12 : istore_3 13 : aload_1 14 : iload_2 15 : aload_1 16 : iload_2 17 : iconst_1 18 : isub 19 : iaload 20 : iastore 21 : aload_1 22 : iload_2 23 : iconst_1 24 : isub 25 : iload_3 26 : iastore 27 : return } Compiled from `` instructor.java '' public class instructor { public instructor ( ) ; Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object . `` < init > '' : ( ) V 4 : return public static void main ( java.lang.String [ ] ) ; Code : 0 : sipush 10000 3 : newarray int 5 : astore_1 6 : bipush 10 8 : istore_2 9 : aload_1 10 : iload_2 11 : iconst_1 12 : isub 13 : iaload 14 : istore_3 15 : aload_1 16 : iload_2 17 : iconst_1 18 : isub 19 : aload_1 20 : iload_2 21 : iaload 22 : iastore 23 : aload_1 24 : iload_2 25 : iload_3 26 : iastore 27 : return } public class Tester1 { public static void main ( String [ ] args ) { int [ ] A = new int [ 400000 ] ; for ( int i = 0 ; i < A.length ; i++ ) { A [ i ] = ( int ) ( Math.random ( ) * Integer.MAX_VALUE ) ; } double start = System.currentTimeMillis ( ) ; insertionSort ( A ) ; System.out.println ( `` My insertion sort took `` + ( System.currentTimeMillis ( ) - start ) + `` milliseconds . `` ) ; } public static int [ ] insertionSort ( int [ ] A ) { //Check for illegal cases if ( A == null || A.length == 0 ) { throw new IllegalArgumentException ( `` A is not populated '' ) ; } for ( int i = 0 ; i < A.length ; i++ ) { int j = i ; while ( j > 0 & & A [ j - 1 ] > A [ j ] ) { int temp = A [ j ] ; A [ j ] = A [ j - 1 ] ; A [ j - 1 ] = temp ; j -- ; } } return A ; } } public class Tester2 { public static void main ( String [ ] args ) { int [ ] A = new int [ 400000 ] ; for ( int i = 0 ; i < A.length ; i++ ) { A [ i ] = ( int ) ( Math.random ( ) * Integer.MAX_VALUE ) ; } double start = System.currentTimeMillis ( ) ; otherInsertion ( A ) ; System.out.println ( `` Other insertion sort took `` + ( System.currentTimeMillis ( ) - start ) + `` milliseconds . `` ) ; } public static int [ ] otherInsertion ( int [ ] A ) { //Check for illegal cases if ( A == null || A.length == 0 ) { throw new IllegalArgumentException ( `` A is not populated '' ) ; } for ( int i = 0 ; i < A.length ; i++ ) { int j = i ; while ( j > 0 & & A [ j - 1 ] > A [ j ] ) { int temp = A [ j - 1 ] ; A [ j - 1 ] = A [ j ] ; A [ j ] = temp ; j -- ; } } return A ; } } My insertion sort took 37680.0 milliseconds.Other insertion sort took 86358.0 milliseconds .
"module module-a { exports com.mod-a ; } module module-c { requires module-a ; provides com.mod-a.Service with com.mod-c.ServiceImpl ; } module module-b { requires module-a ; requires java.management ; requires slf4j.api ; uses com.mod-a.Service ; } ModuleFinder finder = ModuleFinder.of ( moduleCPath ) ; ModuleLayer parent = ModuleLayer.boot ( ) ; Configuration cf = parent.configuration ( ) .resolve ( finder , ModuleFinder.of ( ) , Set.of ( `` module-c '' ) ) ; ClassLoader scl = ClassLoader.getSystemClassLoader ( ) ; ModuleLayer layer = parent.defineModulesWithOneLoader ( cf , scl ) ; //the following line prints `` module-c '' layer.modules ( ) .stream ( ) .map ( Module : :getName ) .forEach ( System.out : :println ) ; Iterable < Service > it = ServiceLoader.load ( Service.class ) ; System.out.println ( `` LINE 1 '' ) ; for ( Service service : it ) { System.out.println ( `` Service was called '' ) ; service.doIt ( ) ; } System.out.println ( `` LINE 2 '' ) ; LINE 1LINE 2"
"for ( int ix = x - r ; ix < x + r + 1 ; ix++ ) { for ( int iz = z - r ; iz < z + r + 1 ; iz++ ) { for ( int iy = y - r ; iy < y + r + 1 ; iy++ ) { // if ix , iy , iz = something blah blah ( this part is n't needed ) } } }"
"boolean isSmallNumber ( String s ) { return ( n in [ `` one '' , `` two '' , `` three '' , `` four '' ] ) ; } boolean isSmallNumber ( String s ) { return Set.of ( `` one '' , `` two '' , `` three '' , `` four '' ) .contains ( s ) ; } private static final Set < String > SMALL_NUMBERS = Set.of ( ... ) ;"
int steps = 256 * 1024 * 1024 ; int [ ] a = new int [ 2 ] ; // Loop 1for ( int i=0 ; i < steps ; i++ ) { a [ 0 ] ++ ; a [ 0 ] ++ ; } // Loop 2for ( int i=0 ; i < steps ; i++ ) { a [ 0 ] ++ ; a [ 1 ] ++ ; } long start_time = System.currentTimeMillis ( ) ; // Looplong end_time = System.currentTimeMillis ( ) ; System.out.println ( end_time - start_time ) ;
public static void main ( final String [ ] args ) { final Long n = 0L ; final Long m = 0L ; System.out.println ( n + `` == `` + m + `` : `` + ( n == m ) ) ; final Long a = 127L ; final Long b = 127L ; System.out.println ( a + `` == `` + b + `` : `` + ( a == b ) ) ; final Long A = 128L ; final Long B = 128L ; System.out.println ( A + `` == `` + B + `` : `` + ( A == B ) ) ; final Long x = -128L ; final Long y = -128L ; System.out.println ( x + `` == `` + y + `` : `` + ( x == y ) ) ; final Long X = -129L ; final Long Y = -129L ; System.out.println ( X + `` == `` + Y + `` : `` + ( X == Y ) ) ; } 0 == 0 : true127 == 127 : true128 == 128 : false-128 == -128 : true-129 == -129 : false
Version : Indigo Service Release 1Build id : 20110916-0149 com.pack.project.javaclass
"object HelloWorldActivity { def main ( args : Array [ String ] ) { println ( `` Hello , world '' ) } } import scala.reflect.ScalaSignature ; @ ScalaSignature ( bytes= '' **************** '' ) public final class HelloWorldActivity { public static void main ( String [ ] paramArrayOfString ) { HelloWorldActivity..MODULE $ .main ( paramArrayOfString ) ; } } import scala.Predef . ; public final class HelloWorldActivity $ { public static final MODULE $ ; static { new ( ) ; } public void main ( String [ ] args ) { Predef..MODULE $ .println ( `` Hello , world '' ) ; } private HelloWorldActivity $ ( ) { MODULE $ = this ; } } static { new ( ) ; } apply plugin : 'scala'repositories { mavenCentral ( ) mavenLocal ( ) } dependencies { compile `` org.scala-lang : scala-library:2.10.1 '' }"
"List < Integer > list = new LinkedList < Integer > ( ) ; public List < Integer > getIntegers ( ) { return list ; } public void processIntegers ( ) { // I need an arraylist here ArrayList < Integer > list = ( ArrayList < Integer > ) getIntegers ( ) ; // can I do this better , without a cast ? }"
"package com.test.package ; import java.util.concurrent.BlockingQueue ; import java.util.concurrent.PriorityBlockingQueue ; import java.util.concurrent.ThreadPoolExecutor ; import java.util.concurrent.TimeUnit ; public class TestClass { public static class MyRunnable implements Runnable { @ Override public void run ( ) { System.out.println ( `` Called '' ) ; } } public void method ( ) { PriorityBlockingQueue < MyRunnable > queue = new PriorityBlockingQueue < MyRunnable > ( ) ; method2 ( queue ) ; } public void method2 ( BlockingQueue < ? extends Runnable > queue ) { System.out.println ( queue ) ; // Getting error here because BlockingQueue < ? extends Runnable > is not a // subtype of BlockingQueue < Runnable > . ThreadPoolExecutor threadPool = new ThreadPoolExecutor ( 200 , 200 , 0L , TimeUnit.MILLISECONDS , queue ) ; } }"
public static < T > ArrayList < T > longestPath ( BinaryNode < T > root ) { //ArrayList path = new ArrayList ( ) ; if ( root == null ) return null ; if ( height ( root.left ) > height ( root.right ) ) { path.add ( root.element ) ; longestPath ( root.left ) ; } else { path.add ( root.element ) ; longestPath ( root.right ) ; } return path ; }
public class PlainSystemGC { public static void main ( String ... strings ) { System.out.println ( `` Free Memory ( Before GC ) : `` + Runtime.getRuntime ( ) .freeMemory ( ) ) ; System.gc ( ) ; System.out.println ( `` Free Memory ( After GC ) : `` + Runtime.getRuntime ( ) .freeMemory ( ) ) ; } } Free Memory ( Before GC ) : 1859640Free Memory ( After GC ) : 1911768
startActivity ( new Intent ( Settings.ACTION_DEVICE_INFO_SETTINGS ) ) ;
/test /index.jsp
package oops ; public class Math { boolean notNumber = false ; static boolean notString = false ; public static void main ( String [ ] args ) { int num1 = 1 ; static int num2 = 1 ; //does n't work Math math = new Math ( ) ; math.notNumber = true ; notNumber = true ; //does n't work notString = true ; } public void whatever ( ) { notNumber = true ; } }
"public static < T > T initElements ( WebDriver driver , Class < T > pageClassToProxy ) { T page = instantiatePage ( driver , pageClassToProxy ) ; initElements ( driver , page ) ; return page ; } public static void initElements ( WebDriver driver , Object page ) { final WebDriver driverRef = driver ; initElements ( new DefaultElementLocatorFactory ( driverRef ) , page ) ; } final WebDriver driverRef = driver ;"
"public interface MyApi { void doSomething ( MyObject x ) ; } public class MyObject { public interface Attachment { } // empty interface , type bound only private Attachment attachment ; public void setAttachment ( Attachment attachment ) { this.attachment = attachment ; } public < T extends Attachment > T getAttachment ( Class < T > type ) { return type.cast ( attachment ) ; } } class FooApiMyObjectAttachment implements MyObject.Attachment { Foo foo ; // some data that one MyApi implementer ` foo ' wants to persist between calls , but that is neither needed nor desired on MyObject } class BarApiMyObjectAttachment implements MyObject.Attachment { Bar bar ; // some data that another MyApi implementer ` bar ' wants to persist between calls , but that is neither needed nor desired on MyObject } class FooApi implements MyApi { // associates FooApiMyObjectAttachment with any MyObjects passed to it or created by it } class BarApi implements MyApi { // associates BarApiMyObjectAttachment with any MyObjects passed to it or created by it }"
"DecimalFormat decimalFormat = new DecimalFormat ( `` # , # # # .00 '' ) ; BigDecimal anObject = new BigDecimal ( `` 3.8880 '' ) ; String str = decimalFormat.format ( ( ( Number ) anObject ) .doubleValue ( ) ) ; System.out.println ( str ) ;"
"public String getMatchedLogs ( String matchStr , File logFile ) { String fileLine = `` '' ; try { Scanner ipScan = new Scanner ( fileLine ) ; if ( fileLine.indexOf ( matchStr ) > -1 ) { output += fileLine ; } else { System.out.println ( fileLine.indexOf ( `` '' ) ) ; } } catch ( FileNotFoundException fnfe ) { System.out.println ( fnfe.getMessage ( ) ) ; } return fileLine ; } //end getMatchedLogs"
"public void addingItems ( DefaultTableModel defaultTableModel ) { for ( int i=0 ; i < numberofItems ; i++ ) { Vector vobject = new Vector ( ) ; vobject.add ( `` ... '' ) ; vobject.add ( `` xxx '' ) ; vobject.add ( `` yyy '' ) ; ... ..vobject.add ( `` '' ) ; defaultTableModel.addRow ( vobject ) ; } tableheader.addMouseListener ( new MouseListener ( ) { public void mouseClicked ( MouseEvent e ) { Vector data = defaultTableModel.getDataVector ( ) ; Collections.sort ( data , new ColumnSorter ( colIndex , ascending ) ) ; }"
import java.math.BigInteger ; import java.util.ArrayList ; import java.util.stream.IntStream ; public class EscapeAnalysisTest { private static class Sum { private BigInteger sum ; private int n ; Sum ( int n ) { this.n = n ; } synchronized final BigInteger getSum ( ) { if ( sum == null ) { sum = BigInteger.ZERO ; for ( int i = 0 ; i < n ; i++ ) { sum = sum.add ( BigInteger.valueOf ( i ) ) ; } } return sum ; } } public static void main ( String [ ] args ) { ArrayList < BigInteger > list = new ArrayList < > ( ) ; for ( int i = 1 ; i < 1000 ; i++ ) { Sum sum = new Sum ( i ) ; list.add ( sum.getSum ( ) ) ; } System.out.println ( list.get ( list.size ( ) - 1 ) ) ; } } -server-verbose : gc-XX : +UnlockDiagnosticVMOptions-XX : +TraceClassLoading-XX : MaxInlineSize=60-XX : +PrintAssembly-XX : +LogCompilation
public class Test1 { interface I1 { } interface I2 < T extends I1 > extends Comparable < I2 < ? > > { Comparator < I2 < ? extends I1 > > A = null ; //Comparator < I2 < ? extends Object > > B = A ; // expected compilation fail Comparator < I2 < ? > > B = A ; // compiling successfully.This should n't get compile } }
"import java.math.BigInteger ; import java.util . * ; public class FibonacciAgain { private static ArrayList < BigInteger > calc_fib ( ) { ArrayList < BigInteger > fib = new ArrayList < > ( ) ; fib.add ( BigInteger.ZERO ) ; fib.add ( BigInteger.ONE ) ; for ( int i = 2 ; i < = 100000 ; i++ ) { fib.add ( fib.get ( i - 2 ) .add ( fib.get ( i - 1 ) ) ) ; } return fib ; } private static long calculatePeriod ( ArrayList < BigInteger > fib , long modulo ) { long periodLength = 0 ; boolean periodFound = false ; long [ ] period = new long [ 1000000 ] ; period [ 0 ] = 0 ; period [ 1 ] = 1 ; period [ 2 ] = 1 ; int i = 3 ; while ( ! periodFound ) { //period [ i ] = fib.get ( i ) //period [ i ] = fib.get ( i ) .divide ( new BigInteger ( String.valueOf ( i ) ) ) .longValue ( ) ; //System.out.println ( `` Fib at `` + i + `` : `` + fib.get ( i ) ) ; period [ i ] = fib.get ( i ) .mod ( new BigInteger ( String.valueOf ( modulo ) ) ) .longValue ( ) ; //System.out.println ( `` 1 : '' + period [ i ] ) ; //System.out.println ( `` 2 : '' + period [ i - 1 ] ) ; // System.out.println ( `` 3 : `` + period [ i - 2 ] ) ; if ( i == 100000 ) { periodFound = true ; periodLength = i - 1 ; } // if ( period [ i ] == 1 & & period [ i - 1 ] == 1 & & period [ i - 2 ] == 0 ) { if ( period [ i - 1 ] == 1 & & period [ i - 2 ] == 0 ) { periodFound = true ; periodLength = i - 2 ; //System.out.println ( `` found '' ) ; } i++ ; } //System.out.println ( `` Period Length : '' + periodLength ) ; return periodLength ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; long n = scanner.nextLong ( ) ; long m = scanner.nextLong ( ) ; //M Fibonacci Numbers up to are stored here ArrayList < BigInteger > fib = new ArrayList < > ( ) ; fib = calc_fib ( ) ; // get the length of the pisano period long periodLength = calculatePeriod ( fib , m ) ; // long fibFirst = n % periodLength ; System.out.println ( fib.get ( ( int ) fibFirst ) .mod ( new BigInteger ( String.valueOf ( m ) ) ) .longValue ( ) ) ; } }"
"public static long nNodesUpToLayer ( int layer ) { if ( layer < 0 ) throw new IllegalArgumentException ( `` The layer number must be positive : `` + layer ) ; //At layer 0 , there must be 1 node ; the root . if ( layer == 0 ) return 1 ; //Else , there will be 1 + 2 * ( the number of nodes in the previous layer ) nodes . return 1 + ( 2 * nNodesUpToLayer ( layer - 1 ) ) ;"
"public class Finals { public void run ( ) { try { spit ( ) ; } catch ( HurtException e ) { System.out.println ( `` '' ) ; } catch ( LimpException ex ) { // does not compile , unreachable code System.out.println ( `` '' ) ; } } public void spit ( ) throws HurtException { // method that throws the Exception } public static void main ( String ... args ) { } } class LimpException extends Exception { // extends Exception vs extends // RuntimeException } class HurtException extends LimpException { }"
"String [ ] stringOne = { `` a '' , '' b '' , '' c '' , `` potato '' } ; String [ ] stringTwo = { `` potato '' , `` 13 '' } ;"
"public void buyItem ( int itemId , int buyerId ) { if ( itemId < = 0 ) { throw new IlleglArgumentException ( `` itemId must be positive '' ) ; } if ( buyerId < = 0 ) { throw new IlleglArgumentException ( `` buyerId must be positive '' ) ; } // buy logic } @ Defensive ( `` isPositive ( # itemId , # buyerId ) '' ) public void buyItem ( int itemId , int buyerId ) { // buy logic }"
Field field = JUnitCore.class.getDeclaredField ( `` fNotifier '' ) ; field.setAccessible ( true ) ; RunNotifier runNotifier = ( RunNotifier ) field.get ( runner ) ; runNotifier.pleaseStop ( ) ;
module java.rmi { requires java.base ; requires java.logging ; exports java.rmi.activation ; exports com.sun.rmi.rmid to java.base ; // < -- cycle ... }
{ @ .codelet.and.out my.package.AGreatExample } { @ .codelet my.package.AGreatExample } { @ .file.textlet examples\doc-files\an_input_file.txt } { @ .codelet.and.out my.package.AGreatExample % eliminateCommentBlocksAndPackageDecl ( ) }
"public class Assignment1_T11_25_2729_Sara_Aly { private int [ ] a ; private int max ; private int n ; int position=0 ; public Assignment1_T11_25_2729_Sara_Aly ( int max ) { a= new int [ max ] ; } public void insert ( int x ) { a [ n ] =x ; n++ ; } public void sort ( ) { int out=0 , smaller=0 ; while ( out < n ) { for ( int in=out+1 ; in < n ; n++ ) { if ( a [ in ] < a [ out ] ) smaller++ ; } if ( smaller==0 ) { out++ ; } else { swap ( a [ out ] , a [ smaller ] ) ; } } } private void swap ( int one , int two ) { int temp=a [ one ] ; a [ one ] =a [ two ] ; a [ two ] =temp ; } public void display ( ) { for ( int i=0 ; i < n ; i++ ) { System.out.print ( a [ i ] + `` `` ) ; } System.out.println ( `` '' ) ; } public static void main ( String [ ] args ) { int maxsize=5 ; Assignment1_T11_25_2729_Sara_Aly trial ; trial= new Assignment1_T11_25_2729_Sara_Aly ( maxsize ) ; trial.insert ( 5 ) ; trial.insert ( 7 ) ; trial.insert ( 3 ) ; trial.insert ( 6 ) ; trial.insert ( 9 ) ; trial.display ( ) ; trial.sort ( ) ; trial.display ( ) ; } } Tried a few algorithims to get it to work but for some reason it wo n't sort any suggestions ? ? public void sort ( ) { boolean finished = false ; int position =0 ; while ( position < max ) { if ( finished==true ) { position++ ; finished =false ; } else { int smaller=0 ; for ( int j = position+1 ; j < max ; j++ ) { int temp=a [ position ] ; if ( a [ j ] < a [ position ] ) { smaller++ ; } } if ( smaller==0 ) { finished= true ; } else { int temp= a [ smaller ] ; a [ smaller ] =a [ position ] ; a [ position ] =temp ; } } } }"
"String str = `` input '' ; String [ ] patterns = { `` ( . * ) * '' , `` ( . * ) + '' , `` ( .+ ) * '' , `` ( .+ ) + '' } ; for ( String pattern : patterns ) { Matcher matcher = Pattern.compile ( pattern ) .matcher ( str ) ; while ( matcher.find ( ) ) { System.out.print ( `` ' '' + matcher.group ( 1 ) + `` ' : ' '' + matcher.start ( ) + `` ' '' + `` \t '' ) ; } System.out.println ( ) ; } `` : ' 0 ' `` : ' 5 ' // For ` ( . * ) * ` `` : ' 0 ' `` : ' 5 ' // For ` ( . * ) + ` 'input ' : ' 0 ' 'null ' : ' 5 ' // For ` ( .+ ) * ` 'input ' : ' 0 ' // For ` ( .+ ) + ` 'input ' : ' 0 ' `` : ' 5 ' // For 1st'input ' : ' 0 ' // For 2nd"
"Map < String , String > map = new HashMap < > ( ) ; map.put ( `` a1 '' , '' b1 '' ) ; map.put ( `` a2 '' , '' b2 '' ) ; map.put ( `` a3 '' , '' b3 '' ) ; // Lambda// Result contains [ `` a1=b1 '' , `` a2=b2 '' , `` a3=b3 '' ] List < String > result ;"
double a=0.0 ; double b= ...
"interface ISomeInterface < out T > { T Method ( ) ; void methodII ( ) ; } class ObjectI : ISomeInterface < int > { ... } class ObjectII : ISomeInterface < double > { ... } class ObjectIII : ISomeInterface < string > { ... . } Dictionary < String , ISomeInterface < ? > > _objs = new Dictionary < String , ISomeInterface < ? > ( ) ; _objs.Add ( `` Object1 '' , new ObjectI ( ) ) ; _objs.Add ( `` Object2 '' , new ObjectII ( ) ) ; _objs.Add ( `` Object3 '' , new ObjectII ( ) ) ; foreach ( var keyVal in _objs ) { Console.WriteLine ( keyVal.Method ( ) ) ; }"
"error : package com.nguyenhoanglam.imagepicker.activity does not exist // Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript { repositories { google ( ) jcenter ( ) maven { url 'https : //maven.google.com ' } maven { url `` https : //jitpack.io '' } } dependencies { classpath 'com.android.tools.build : gradle:3.5.4 ' //classpath 'com.google.gms : google-services:1.3.0-beta1 ' classpath 'com.google.gms : google-services:4.3.3 ' // NOTE : Do not place your application dependencies here ; they belong // in the individual module build.gradle files } } allprojects { repositories { google ( ) jcenter ( ) maven { url `` https : //maven.google.com '' } maven { url `` https : //jitpack.io '' } } } task clean ( type : Delete ) { delete rootProject.buildDir } apply plugin : 'com.android.application'buildscript { repositories { maven { url 'https : //plugins.gradle.org/m2/ ' } maven { url `` https : //jitpack.io '' } google ( ) jcenter ( ) } dependencies { classpath 'gradle.plugin.com.onesignal : onesignal-gradle-plugin : [ 0.12.4 , 0.99.99 ] ' } } apply plugin : 'com.onesignal.androidsdk.onesignal-gradle-plugin'android { compileSdkVersion 29 buildToolsVersion '28.0.3 ' defaultConfig { applicationId `` x.y.z '' manifestPlaceholders = [ onesignal_app_id : `` XX '' , // Project number pulled from dashboard , local value is ignored . onesignal_google_project_number : `` YY '' ] minSdkVersion 16 targetSdkVersion 29 versionCode 35 versionName `` 3.10.0 '' multiDexEnabled true } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile ( 'proguard-android.txt ' ) , 'proguard-rules.pro ' } } } dependencies { implementation fileTree ( include : [ '*.jar ' ] , dir : 'libs ' ) implementation 'androidx.appcompat : appcompat:1.1.0 ' implementation 'com.rengwuxian.materialedittext : library:2.1.4 ' implementation 'com.intuit.sdp : sdp-android:1.0.3 ' implementation 'com.jaredrummler : material-spinner:1.1.0 ' implementation 'com.github.nguyenhoanglam : ImagePicker:1.4.3 ' implementation 'com.google.android.gms : play-services-ads:19.3.0 ' implementation 'com.google.android.gms : play-services-analytics:17.0.0 ' implementation 'com.github.hotchemi : android-rate:1.0.1 ' implementation 'com.karumi : dexter:5.0.0 ' //4.1.0 implementation 'androidx.constraintlayout : constraintlayout:1.1.3 ' implementation 'com.google.firebase : firebase-core:17.4.4 ' implementation 'com.google.firebase : firebase-database:19.3.1 ' implementation 'com.google.firebase : firebase-messaging:20.2.4 ' testImplementation 'junit : junit:4.12 ' implementation 'com.onesignal : OneSignal : [ 3.11.2 , 3.99.99 ] ' implementation 'androidx.legacy : legacy-support-v4:1.0.0 ' implementation 'androidx.multidex : multidex:2.0.1 ' implementation 'com.github.bumptech.glide : glide:4.11.0 ' annotationProcessor 'com.github.bumptech.glide : compiler:4.11.0 ' } apply plugin : 'com.google.gms.google-services '"
"@ Entity @ Table ( name = `` defselflearning '' , catalog = `` ats '' ) public class DefSelfLearning implements java.io.Serializable { /** * */ private static final long serialVersionUID = 1L ; @ EmbeddedId private DefSelfLearningKeys defSelfLearningKeys ; private Ecu ecu ; private String excelColumn ; @ JsonIgnore private Set < SelfLearning > selfLearnings = new HashSet < SelfLearning > ( 0 ) ; public DefSelfLearning ( ) { } public DefSelfLearning ( DefSelfLearningKeys defSelfLearningKeys , Ecu ecu ) { this.defSelfLearningKeys = defSelfLearningKeys ; this.ecu = ecu ; } public DefSelfLearning ( Ecu ecu , DefSelfLearningKeys defSelfLearningKeys , String excelColumn , Set < SelfLearning > selfLearnings ) { this.ecu = ecu ; this.defSelfLearningKeys = defSelfLearningKeys ; this.excelColumn = excelColumn ; this.selfLearnings = selfLearnings ; } @ Id public DefSelfLearningKeys getDefSelfLearningKeys ( ) { return this.defSelfLearningKeys ; } public void setDefSelfLearningKeys ( DefSelfLearningKeys defSelfLearningKeys ) { this.defSelfLearningKeys = defSelfLearningKeys ; } @ ManyToOne ( fetch = FetchType.LAZY ) @ JoinColumn ( name = `` id_ecu '' , nullable = false ) public Ecu getEcu ( ) { return this.ecu ; } public void setEcu ( Ecu ecu ) { this.ecu = ecu ; } @ Column ( name = `` excelColumn '' , length = 2 ) public String getExcelColumn ( ) { return this.excelColumn ; } public void setExcelColumn ( String excelColumn ) { this.excelColumn = excelColumn ; } @ OneToMany ( fetch = FetchType.LAZY , mappedBy = `` defSelfLearning '' ) public Set < SelfLearning > getSelfLearnings ( ) { return this.selfLearnings ; } public void setSelfLearnings ( Set < SelfLearning > selfLearnings ) { this.selfLearnings = selfLearnings ; } } @ Embeddablepublic class DefSelfLearningKeys implements Serializable { private static final long serialVersionUID = 1L ; protected String parName ; protected String description ; protected String note ; public DefSelfLearningKeys ( ) { } public DefSelfLearningKeys ( String parName , String description , String note ) { this.parName = parName ; this.description = description ; this.note = note ; } @ Column ( name = `` parName '' , nullable = false , length = 15 ) public String getParName ( ) { return this.parName ; } public void setParName ( String parName ) { this.parName = parName ; } @ Column ( name = `` description '' , nullable = false , length = 100 ) public String getDescription ( ) { return this.description ; } public void setDescription ( String description ) { this.description = description ; } @ Column ( name = `` note '' , nullable = false , length = 100 ) public String getNote ( ) { return this.note ; } public void setNote ( String note ) { this.note = note ; } } @ Entity @ Table ( name = `` selflearning '' , catalog = `` ats '' ) public class SelfLearning implements java.io.Serializable { /** * */ private static final long serialVersionUID = 1L ; private int idSelfLearning ; private Acquisition acquisition ; private DefSelfLearning defSelfLearning ; private String value ; public SelfLearning ( ) { } public SelfLearning ( int idSelfLearning , Acquisition acquisition , DefSelfLearning defSelfLearning ) { this.idSelfLearning = idSelfLearning ; this.acquisition = acquisition ; this.defSelfLearning = defSelfLearning ; } public SelfLearning ( int idSelfLearning , Acquisition acquisition , DefSelfLearning defSelfLearning , String value ) { this.idSelfLearning = idSelfLearning ; this.acquisition = acquisition ; this.defSelfLearning = defSelfLearning ; this.value = value ; } @ Id @ GeneratedValue ( strategy = IDENTITY ) @ Column ( name = `` id_selfLearning '' , unique = true , nullable = false ) public int getIdSelfLearning ( ) { return this.idSelfLearning ; } public void setIdSelfLearning ( int idSelfLearning ) { this.idSelfLearning = idSelfLearning ; } @ ManyToOne ( fetch = FetchType.LAZY ) @ JoinColumn ( name = `` id_acquisition '' , nullable = false ) public Acquisition getAcquisition ( ) { return this.acquisition ; } public void setAcquisition ( Acquisition acquisition ) { this.acquisition = acquisition ; } @ ManyToOne ( fetch = FetchType.LAZY ) @ JoinColumns ( { @ JoinColumn ( name = `` id_parName '' , nullable = false ) , @ JoinColumn ( name = `` id_description '' , nullable = false ) , @ JoinColumn ( name = `` id_note '' , nullable = false ) } ) public DefSelfLearning getDefSelfLearning ( ) { return this.defSelfLearning ; } public void setDefSelfLearning ( DefSelfLearning defSelfLearning ) { this.defSelfLearning = defSelfLearning ; } @ Column ( name = `` value '' ) public String getValue ( ) { return this.value ; } public void setValue ( String value ) { this.value = value ; } } Caused by : com.mysql.jdbc.MysqlDataTruncation : Data truncation : Data too long for column 'id_parName ' at row 1 for ( DefSelfLearning defSelfLearning : defSelfLearningList ) { SelfLearning selfLearning=new SelfLearning ( ) ; String key = defSelfLearning.getExcelColumn ( ) +index ; String value = actualRowValues.get ( key ) ; selfLearning.setAcquisition ( findByCarAndExcelRow ( carServices.findById ( acquisitionForm.getCar ( ) ) , index ) ) ; selfLearning.setDefSelfLearning ( defSelfLearning ) ; selfLearning.setValue ( value ) ; System.out.println ( selfLearning.getDefSelfLearning ( ) .getDefSelfLearningKeys ( ) .getParName ( ) ) ; selfLearningServices.create ( selfLearning ) ; }"
if ( something ! =null ) { ... } else { //log } try { something.getField ( ) ; ... } catch ( Exception e ) { //log }
"import java.util.List ; import java.util.stream.Collectors ; public class GenericsBreakJavac8 { public interface Edge < N > { N getNode ( ) ; } @ FunctionalInterface public interface EdgeCreator < N , E extends Edge < N > > { E createEdge ( N node ) ; } public static < N > List < Edge < N > > createEdges ( List < N > nodes ) { return createEdges ( nodes , DefaultEdge : :new ) ; //the deadly line } //THE NEWLY ADDED LINE ( see the edit note ) public static < N > List < Edge < N > > createEdges2 ( List < N > nodes ) { return createEdges ( nodes , n - > new DefaultEdge < N > ( n ) ) ; } public static < N , E extends Edge < N > > List < E > createEdges ( List < N > nodes , EdgeCreator < N , E > edgeCreator ) { return nodes.stream ( ) .map ( edgeCreator : :createEdge ) .collect ( Collectors.toList ( ) ) ; } public static class DefaultEdge < N > implements Edge < N > { private final N node ; public DefaultEdge ( N node ) { this.node = node ; } @ Override public N getNode ( ) { return node ; } } }"
"[ 2017-09-14 08:56:28,123 ] ERROR java.lang.reflect.InvocationTargetException ( com.cantiz.nucleus.kafka.connector.cassandra.CassandraSinkTask:72 ) java.lang.RuntimeException : java.lang.reflect.InvocationTargetExceptionat com.google.common.base.Throwables.propagate ( Throwables.java:240 ) at com.datastax.driver.core.NettyUtil.newEventLoopGroupInstance ( NettyUtil.java:136 ) at com.datastax.driver.core.NettyOptions.eventLoopGroup ( NettyOptions.java:99 ) at com.datastax.driver.core.Connection $ Factory. < init > ( Connection.java:774 ) at com.datastax.driver.core.Cluster $ Manager.init ( Cluster.java:1446 ) at com.datastax.driver.core.Cluster.init ( Cluster.java:159 ) at com.datastax.driver.core.Cluster.connectAsync ( Cluster.java:330 ) at com.datastax.driver.core.Cluster.connectAsync ( Cluster.java:305 ) at com.datastax.driver.core.Cluster.connect ( Cluster.java:247 ) at com.attinad.cantiz.iot.historian.cassandra.session.CassandraSessionManager.connect ( CassandraSessionManager.java:33 ) at com.cantiz.nucleus.kafka.connector.cassandra.CassandraSinkTask.start ( CassandraSinkTask.java:61 ) at org.apache.kafka.connect.runtime.WorkerSinkTask.initializeAndStart ( WorkerSinkTask.java:232 ) at org.apache.kafka.connect.runtime.WorkerSinkTask.execute ( WorkerSinkTask.java:145 ) at org.apache.kafka.connect.runtime.WorkerTask.doRun ( WorkerTask.java:146 ) at org.apache.kafka.connect.runtime.WorkerTask.run ( WorkerTask.java:190 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:511 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:266 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Caused by : java.lang.reflect.InvocationTargetExceptionat sun.reflect.NativeConstructorAccessorImpl.newInstance0 ( Native Method ) at sun.reflect.NativeConstructorAccessorImpl.newInstance ( NativeConstructorAccessorImpl.java:62 ) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance ( DelegatingConstructorAccessorImpl.java:45 ) at java.lang.reflect.Constructor.newInstance ( Constructor.java:423 ) at com.datastax.driver.core.NettyUtil.newEventLoopGroupInstance ( NettyUtil.java:134 ) ... 18 moreCaused by : java.lang.NoClassDefFoundError : Could not initialize class io.netty.channel.epoll.EpollEventLoopat io.netty.channel.epoll.EpollEventLoopGroup.newChild ( EpollEventLoopGroup.java:71 ) at io.netty.util.concurrent.MultithreadEventExecutorGroup. < init > ( MultithreadEventExecutorGroup.java:64 ) at io.netty.channel.MultithreadEventLoopGroup. < init > ( MultithreadEventLoopGroup.java:50 ) at io.netty.channel.epoll.EpollEventLoopGroup. < init > ( EpollEventLoopGroup.java:56 ) at io.netty.channel.epoll.EpollEventLoopGroup. < init > ( EpollEventLoopGroup.java:48 ) ... 23 more [ 2017-09-14 08:56:28,125 ] INFO Sink task WorkerSinkTask { id=cassandra-thing-event-desc-3 } finished initialization and start ( org.apache.kafka.connect.runtime.WorkerSinkTask:233 ) [ 2017-09-14 08:56:28,123 ] ERROR java.lang.reflect.InvocationTargetException ( com.cantiz.nucleus.kafka.connector.cassandra.CassandraSinkTask:72 ) java.lang.RuntimeException : java.lang.reflect.InvocationTargetException"
"interface Named { public String name ( ) ; public int order ( ) ; } enum Planets implements Named { Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune ; // name ( ) is implemented automagically . public int order ( ) { return ordinal ( ) +1 ; } }"
"package math.series ; import java.util.stream.IntStream ; /** * Created by Michael * Creation date 3/6/2016 . * @ link https : //stackoverflow.com/questions/35826081/calculating-ex-in-c-sharp * @ link https : //en.wikipedia.org/wiki/Leibniz_formula_for_ % CF % 80 */public class TaylorSeries { public static final int DEFAULT_NUM_TERMS = 10 ; public static void main ( String [ ] args ) { int n = ( args.length > 0 ) ? Integer.parseInt ( args [ 0 ] ) : DEFAULT_NUM_TERMS ; System.out.println ( `` pi '' ) ; System.out.println ( String.format ( `` % 10s % 10s % 10s % 10s '' , `` n '' , `` series '' , `` expected '' , `` error '' ) ) ; double expected = Math.PI ; double series = TaylorSeries.pi ( 0.0 , n ) ; double error = expected - series ; System.out.println ( String.format ( `` % 10d % 10.6f % 10.6f % 10.6f '' , n , series , expected , error ) ) ; System.out.println ( `` exp '' ) ; System.out.println ( String.format ( `` % 10s % 10s % 10s % 10s '' , `` x '' , `` series '' , `` expected '' , `` error '' ) ) ; for ( double x = 0.0 ; x < = 3.0 ; x += 0.25 ) { expected = Math.exp ( x ) ; series = TaylorSeries.exp ( x , n ) ; error = expected - series ; System.out.println ( String.format ( `` % 10.6f % 10.6f % 10.6f % 10.6f '' , x , series , expected , error ) ) ; } } public static double exp ( double x , int n ) { double sum = 1.0 ; double term = 1.0 ; for ( int i = 1 ; i < = n ; ++i ) { term *= x / i ; sum += term ; } return sum ; } public static double pi ( double x , int n ) { return IntStream.range ( 0 , n ) .mapToDouble ( i - > 8.0/ ( 4*i+1 ) / ( 4*i+3 ) ) .sum ( ) ; } }"
"/luna/locations/xtide/ { id } - Luna Event detail ( read : tide times ) /solar/locations/xtide/ { id } - Solar Event detail ( read : sunrise/sunset ) /water/locations/ { provider } / { id } { ? daysData } - Water Event detail ( read : swell measures ) /meteo/wwo/weather { ? query , daysData } - Meteo Event detail ( read : weather data ) Observable.zip ( Observable.from ( spots ) , Observable.interval ( SYNC_TICK , TimeUnit.MILLISECONDS ) , ( obs , timer ) - > obs ) .subscribeOn ( scheduler ) .observeOn ( scheduler ) .unsubscribeOn ( scheduler ) .flatMap ( spot - > syncTidePosition.get ( ) .buildObservable ( spot ) ) .subscribe ( spotAndTideEvent - > new TideEventSubscriber ( lunaEventService , synchronisationIntentProvider.get ( ) , spotAndTideEvent.spot , String.format ( getString ( string.tide_error_message ) , spotAndTideEvent.spot.getTidePosition ( ) ) , errorHandlerService , localBroadcastManager ) ) ; Observable < SpotAndTideEventTuple > buildObservable ( final Spot spot ) { return Observable.zip ( Observable.just ( spot ) , lunaEventsProvider .listTideTimes ( spot.getTideOperator ( ) , Integer.toString ( spot.getTidePosition ( ) ) ) , SpotAndTideEventTuple : :new ) ; } public Observable < List < TideEvent > > listTideTimes ( @ NonNull final LunaProvider provider , @ NonNull final String identifier ) { return getRetrofitServiceImpl ( LunaEventsProviderDefinition.class ) .listTideTimes ( provider , identifier ) .map ( TideEventsTemplate : :buildModels ) ; }"
"'offer_message ' = > `` < & lt ; > & gt ; & & amp ; \x { c3 } \x { 82 } \x { c2 } \x { a9 } & copy ; < script > alert ( \ '' XSS\ '' ) ; < /script > https : //url.com/imghp ? hl=uk '' , < & lt ; > & gt ; \\n & & amp ; \\nÃ�Â�Ã�Â© & copy ; \\n < script > alert ( \ '' XSS\ '' ) ; < /script > \\nhttps : //www.google.com.ua/imghp ? hl=uk byte [ ] utf8 = templateParams.getBytes ( `` UTF8 '' ) ; normallisedTemplateParams = new String ( utf8 , `` UTF8 '' ) ;"
"public class cls { public int x = 0 ; public int y = 0 ; public int z = 0 ; public cls ( int x , int y ) { this.x = x ; this.y = y ; } public cls ( int x , int y , int z ) { this.x = x ; this.y = y ; this.z = z ; } }"
"String loc = `` 200,6 , \ '' California , USA\ '' '' ; String [ ] s = loc.split ( `` , '' ) ; for ( String f : s ) System.out.println ( f ) ; 2006 '' California USA '' 2006 '' California , USA ''"
int count = 1 ; while ( true ) { System.out.println ( count ) ; count += count ; } 00000 ...
class Test { final int value = 7 ; Test ( ) { } } class Test { final int value ; Test ( ) { value = 7 ; } } import javax.swing . * ; import java.beans.PropertyChangeListener ; class TestBox extends JCheckBox { final int value ; public TestBox ( ) { value = 7 ; } public void addPropertyChangeListener ( PropertyChangeListener l ) { System.out.println ( value ) ; super.addPropertyChangeListener ( l ) ; } public static void main ( String ... args ) { JFrame frame = new JFrame ( ) ; JPanel panel = new JPanel ( ) ; frame.setContentPane ( panel ) ; panel.add ( new TestBox ( ) ) ; frame.pack ( ) ; frame.setVisible ( true ) ; } }
public class Base { Base ( ... ) { ... ; } public void foo ( ) { ... ; } } public class Child extends Base { Child ( ... ) { super ( ... ) ; foo ( ) ; } }
"public class MapBuilder < K , V > { private Map < K , V > map ; /** * Create a Map builder * @ param mapType the type of Map to build . This type must support a default constructor * @ throws Exception */ public MapBuilder ( Class < ? extends Map < K , V > > mapType ) throws Exception { map = mapType.newInstance ( ) ; } // remaining implementation omitted } MapBuilder < Integer , String > builder = new MapBuilder < Integer , String > ( LinkedHashMap.class ) ; MapBuilder < Integer , String > builder = new MapBuilder < Integer , String > ( HashMap.class ) ;"
int [ ] counts = new int [ total ] ; counts [ 0 ] = 1 ; // ( 1 ) for ( int i = 0 ; i < = total ; i++ ) { for ( int j = 0 ; j < nums.length ; j++ ) { if ( i > = nums [ j ] ) counts [ i ] += counts [ i - nums [ j ] ] ; } } // ( 2 ) for ( int j = 0 ; j < nums.length ; j++ ) for ( int i = nums [ j ] ; i < = total ; i++ ) { counts [ i ] += counts [ i - nums [ j ] ] ; } }
List < String > strs = ... ; List < Integer > wordsInStr = strs.stream ( ) .filter ( t - > t.contains ( `` of '' ) ) .map ( t - > t.split ( `` `` ) .length ) .collect ( Collectors.toList ( ) ) ; List < String > linePortionAfterFor = strs.stream ( ) .filter ( t - > t.contains ( `` for '' ) ) .map ( t - > t.substring ( t.indexOf ( `` for '' ) ) ) .collect ( Collectors.toList ( ) ) ;
( int ) ( 14/13-0.001 )
"public static List < List < Integer > > permute ( List < Integer > list , int need ) { List < List < Integer > > result = new ArrayList < > ( ) ; if ( need -- ==0 ) { result.add ( list ) ; return result ; } for ( int current : list ) insert ( permute ( list , need ) , current , result ) ; return result ; } private static void insert ( List < List < Integer > > currentLists , int currentInt , List < List < Integer > > list ) { for ( List < Integer > currentList : currentLists ) { int size = currentList.size ( ) ; for ( int i = 0 ; i < = size ; i++ ) { List < Integer > newList = new LinkedList < > ( ) ; newList.addAll ( currentList ) ; newList.add ( i , currentInt ) ; list.add ( newList ) ; } } }"
"try { Map < String , String > someResult= elements.stream ( ) .filter ( throwingPredicateWrapper ( element- > client.hasValue ( element ) ) ) .collect ( Collectors.toMap ( Function.identity ( ) , throwingFunctionWrapper ( element - > client.getValue ( element ) ) ) ) ; return someResult ; } catch ( Exception e ) { LOGGER.error ( `` Error while processing '' , e ) ; }"
"InputStream is = bodyPart.getInputStream ( ) ; String fileName = MimeUtility.decodeText ( bodyPart.getFileName ( ) ) ; // Downloading the fileFile f = new File ( Constants.getPath ( ) + fileName ) ; try { FileOutputStream fos ; fos = new FileOutputStream ( f ) ; byte [ ] buf = new byte [ 8*1024 ] ; int bytesRead ; while ( ( bytesRead = is.read ( buf ) ) ! = -1 ) { fos.write ( buf , 0 , bytesRead ) ; } fos.close ( ) ; }"
addItem //todo : labels is not supported '' food '' '' arroz '' '' arroz.jpg '' 3001.50
"Player 1 2 3 -- -- -- -- - - - -Player 1 : 3 , 4 , 3Player 2 : 2 , 3 , 3Player 3 : 2 , 4 , 3 1 . ) Player 22 . ) Player 33 . ) Player 1"
"public class Test { int total_amount , tax_amount ; public void cal ( int total_amount , int tax_amount ) { System.out.println ( `` Total amount : `` +total_amount+tax_amount ) ; } public static void main ( String [ ] args ) { new Test ( ) .cal ( 100 , 20 ) ; } } Output Total amount : 10020Expected Total amount : 120"
"public class Votes { String name ; int likes ; int dislikes ; //constructors , getters and setters } List < Votes > votesList ; votesList.add ( new Votes ( `` A '' , 10 , 5 ) ) ; votesList.add ( new Votes ( `` B '' , 15 , 10 ) ) ; votesList.add ( new Votes ( `` A '' , 20 , 15 ) ) ; votesList.add ( new Votes ( `` B '' , 10 , 25 ) ) ; votesList.add ( new Votes ( `` C '' , 10 , 20 ) ) ; votesList.add ( new Votes ( `` C '' , 0 , 15 ) ) ; ( `` A '' , 30 , 20 ) , ( `` B '' , 25 , 35 ) , ( `` C '' , 10 , 35 )"
"List < String > list = new LinkedList < > ( ) ; // here we use the list , perhaps adding hundreds of items in it ... // ... and now the work is done , the list is not needed anymorelist.clear ( ) ; list = null ;"
"import java.io . * ; import java.nio.charset . * ; class TestChars { public static void main ( String args [ ] ) { InputStreamReader reader = new InputStreamReader ( System.in , StandardCharsets.UTF_8 ) ; try { System.out.print ( `` > `` ) ; int code = reader.read ( ) ; while ( code ! = -1 ) { String s = String.format ( `` Code % x is ` % s ' , % s . `` , code , Character.getName ( code ) , new String ( Character.toChars ( code ) ) ) ; System.out.println ( s ) ; code = reader.read ( ) ; } } catch ( Exception e ) { } } } $ java TestChars > keyboard ⌨ . pizza Code 6b is ` LATIN SMALL LETTER K ' , k.Code 65 is ` LATIN SMALL LETTER E ' , e.Code 79 is ` LATIN SMALL LETTER Y ' , y.Code 62 is ` LATIN SMALL LETTER B ' , b.Code 6f is ` LATIN SMALL LETTER O ' , o.Code 61 is ` LATIN SMALL LETTER A ' , a.Code 72 is ` LATIN SMALL LETTER R ' , r.Code 64 is ` LATIN SMALL LETTER D ' , d.Code 20 is ` SPACE ' , .Code 2328 is ` KEYBOARD ' , ⌨.Code 2e is ` FULL STOP ' , ..Code 20 is ` SPACE ' , .Code 70 is ` LATIN SMALL LETTER P ' , p.Code 69 is ` LATIN SMALL LETTER I ' , i.Code 7a is ` LATIN SMALL LETTER Z ' , z.Code 7a is ` LATIN SMALL LETTER Z ' , z.Code 61 is ` LATIN SMALL LETTER A ' , a.Code 20 is ` SPACE ' , .Code d83c is ` HIGH SURROGATES D83C ' , ? .Code df55 is ` LOW SURROGATES DF55 ' , ? .Code a is ` LINE FEED ( LF ) ' , ."
"class FloatVec extends float [ ] { // Vector methods . } FloatVec somevec = new FloatVec ( ) [ ] { 1 , 2 , 3 } ; // With array initializer . class FloatVec3 extends float [ 3 ] { // Regular accessor . public float getX ( ) { return this [ 0 ] ; } // Or say , make it the 'this ' implicit like with other fields : public void setVec ( float x , float y , float z ) { [ 0 ] = x ; [ 1 ] = y ; [ 2 ] = z ; } // And specific vec3 methods like : public float dotProduct ( ) { float x = this [ 0 ] ; float y = this [ 1 ] ; float z = this [ 2 ] ; return x * x + y * y + z * z ; } }"
"package tester ; import java.util.Objects ; import javafx.beans.value.ObservableValue ; import javafx.beans.value.WritableValue ; import javafx.geometry.Pos ; import javafx.scene.control.TableCell ; import javafx.scene.control.TextField ; public class EditableTextCell < E > extends TableCell < E , String > { private final TextField textField ; private boolean updating = false ; public EditableTextCell ( boolean editable ) { textField = new TextField ( ) ; textField.setAlignment ( Pos.CENTER_RIGHT ) ; textField.setEditable ( editable ) ; textField.textProperty ( ) .addListener ( ( ObservableValue < ? extends String > o , String oldValue , String newValue ) - > { if ( ! updating ) { ( ( WritableValue < String > ) getTableColumn ( ) .getCellObservableValue ( ( E ) getTableRow ( ) .getItem ( ) ) ) .setValue ( newValue ) ; getTableView ( ) .scrollTo ( getTableRow ( ) .getIndex ( ) ) ; getTableView ( ) .scrollToColumn ( getTableColumn ( ) ) ; } // this is where I would like stylize the textfield based on the input } ) ; } @ Overrideprotected void updateItem ( String item , boolean empty ) { super.updateItem ( item , empty ) ; if ( empty ) { setGraphic ( null ) ; } else { setGraphic ( textField ) ; if ( ! Objects.equals ( textField.getText ( ) , item ) ) { // prevent own updates from moving the cursor updating = true ; textField.setText ( item ) ; updating = false ; } } } } package tester ; import javafx.beans.property.SimpleStringProperty ; import javafx.beans.property.StringProperty ; public class LineItem { private final StringProperty string1 ; private final StringProperty string2 ; public LineItem ( ) { this.string1 = new SimpleStringProperty ( ) ; this.string2 = new SimpleStringProperty ( ) ; } public final StringProperty getString1Property ( ) { return this.string1 ; } public final StringProperty getString2Property ( ) { return this.string2 ; } } package tester ; import javafx.application.Application ; import javafx.scene.Scene ; import javafx.scene.control.TableCell ; import javafx.scene.control.TableColumn ; import javafx.scene.control.TableRow ; import javafx.scene.control.TableView ; import javafx.scene.layout.HBox ; import javafx.stage.Stage ; import javafx.util.Callback ; public class Tester extends Application { @ Overridepublic void start ( Stage primaryStage ) { TableView < LineItem > table = new TableView < > ( ) ; table.setRowFactory ( p - > { final TableRow < LineItem > row = new TableRow < > ( ) ; row.setOnMouseClicked ( event - > { if ( event.getClickCount ( ) == 2 & & ( ! row.isEmpty ( ) ) ) { LineItem rowData = row.getItem ( ) ; System.out.println ( rowData.getString1Property ( ) .get ( ) + `` `` +rowData.getString2Property ( ) .get ( ) ) ; } } ) ; return row ; } ) ; Callback < TableColumn < LineItem , String > , TableCell < LineItem , String > > textFactoryEditable = ( TableColumn < LineItem , String > p ) - > new EditableTextCell ( true ) ; TableColumn < LineItem , String > column1 = new TableColumn < > ( `` Test1 '' ) ; column1.setCellValueFactory ( cellData - > cellData.getValue ( ) .getString1Property ( ) ) ; column1.setEditable ( true ) ; column1.setCellFactory ( textFactoryEditable ) ; table.getColumns ( ) .add ( column1 ) ; TableColumn < LineItem , String > column2 = new TableColumn < > ( `` Test2 '' ) ; column2.setCellValueFactory ( cellData - > cellData.getValue ( ) .getString2Property ( ) ) ; column2.setEditable ( true ) ; column2.setCellFactory ( textFactoryEditable ) ; table.getColumns ( ) .add ( column2 ) ; table.getItems ( ) .add ( new LineItem ( ) ) ; HBox root = new HBox ( ) ; root.getChildren ( ) .addAll ( table ) ; Scene scene = new Scene ( root , 500 , 500 ) ; primaryStage.setTitle ( `` Hello World ! `` ) ; primaryStage.setScene ( scene ) ; primaryStage.show ( ) ; } /** * @ param args the command line arguments */public static void main ( String [ ] args ) { launch ( args ) ; } }"
"public class Something { private int id ; private String fieldA ; private String fieldB ; private List < Data > list ; // Then we have getters , setters , and some base methods } public class SomethingElse extends Something { private String dataSpecificToSomethingElse ; // Then we have getters , setters , and some new-data specific methods } public class SomethingDifferentextends Something { private List < DifferentData > dataSpecificToSomethingDifferent ; // Then we have getters , setters , and some new-data specific methods }"
"package com.ciaoshen.thinkinjava.chapter7 ; import java.util . * ; //My public classpublic class PublicClass { //default constructor public PublicClass ( ) { System.out.println ( `` Hello , I am PublicClass . `` ) ; } } //Non public class//It should be package reachableclass PackageReachableClass { //default constructor PackageReachableClass ( ) { System.out.println ( `` Hi , I am PackageReachableClass . `` ) ; } } public class InPackageClass { /** * MAIN * @ param args void */public static void main ( String [ ] args ) { //pubic class can be reached from anywhere PublicClass newPublicClass=new PublicClass ( ) ; //non-public-class should be accessable in the same package PackageReachableClass newPackageReachableClass =new PackageReachableClass ( ) ; } } /Users/Wei/java/com/ciaoshen/thinkinjava/chapter7/InPackageClass.java:22 : warning : auxiliary class PackageReachableClass in ./com/ciaoshen/thinkinjava/chapter7/PublicClass.java should not be accessed from outside its own source file PackageReachableClass newPackageReachableClass =new PackageReachableClass ( ) ; ^/Users/Wei/java/com/ciaoshen/thinkinjava/chapter7/InPackageClass.java:22 : warning : auxiliary class PackageReachableClass in ./com/ciaoshen/thinkinjava/chapter7/PublicClass.java should not be accessed from outside its own source file PackageReachableClass newPackageReachableClass =new PackageReachableClass ( ) ; ^2 warningsHello , I am PublicClass.Hi , I am PackageReachableClass ."
"public int [ ] [ ] position = { { 20 , 30 } , { 73 , 91 } , { 82 , 38 } } ;"
"public class World { private BufferedImage map , map1 , map2 , map3 ; private Color [ ] [ ] colorArray ; public World ( int scrWd , int scrHi ) { try { map1 = ImageIO.read ( new File ( `` map1.png '' ) ) ; map2 = ImageIO.read ( new File ( `` map2.png '' ) ) ; map3 = ImageIO.read ( new File ( `` map3.png '' ) ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } map = map1 ; makeColorArray ( ) ; } private void makeColorArray ( ) { colorArray = new Color [ mapHi ] [ mapWd ] ; // resetting the color-array for ( int i = 0 ; i < mapHi ; i++ ) { for ( int j = 0 ; j < mapWd ; j++ ) { colorArray [ i ] [ j ] = new Color ( map.getRGB ( j , i ) ) ; } } } //color-array used by paint to paint the world public void paint ( Graphics2D g2d , float camX , float camY ) { for ( int i = 0 ; i < mapHi ; i++ ) { for ( int j = 0 ; j < mapWd ; j++ ) { if ( colorArray [ i ] [ j ] .getRed ( ) == 38 & & colorArray [ i ] [ j ] .getGreen ( ) == 127 & & colorArray [ i ] [ j ] .getBlue ( ) == 0 ) { //draw Image 1 } else if ( colorArray [ i ] [ j ] .getRed ( ) == 255 & & colorArray [ i ] [ j ] .getGreen ( ) == 0 & & colorArray [ i ] [ j ] .getBlue ( ) == 0 ) { //draw Image 2 } } } } public void levelChanger ( Player player , Enemies enemies ) { if ( player.getRec ( ) .intersects ( checkPoint [ 0 ] ) ) { map = map2 ; //calls the color-array maker makeColorArray ( ) ; } else if ( player.getRec ( ) .intersects ( checkPoint [ 1 ] ) ) { map = map3 ; makeColorArray ( ) ; } } public void update ( Player player , Enemies enemies ) { levelChanger ( player , enemies ) ; } }"
"public abstract class AbstractProcessable { ... } public class DummyProcessable extends AbstractProcessable { ... } public abstract class AbstractProcessor < T extends AbstractProcessable > { public abstract void process ( List < T > listOfProcessables ) ; } public class DummyProcessor extends AbstractProcessor < DummyProcessable > { @ Override public void process ( List < DummyProcessable > listToProcess ) { ... } } public class RandomClass { private List < AbstractProcessor < ? extends AbstractProcessable > > processors ; private Map < Class < ? extends AbstractProcessor > , List < ? extends AbstractProcessable > > data ; public RandomClass ( ) { processors = new ArrayList < > ( ) ; processors.add ( new DummyProcessor ( ) ) ; data = new HashMap < > ( ) ; data.put ( DummyProcessor.class , new ArrayList < DummyProcessable > ( ) ) ; processAll ( ) ; } private void processAll ( ) { for ( AbstractProcessor < ? extends AbstractProcessable > processor : processors ) { List < ? extends AbstractProcessable > dataToProcess ; dataToProcess = data.get ( processor ) ; processor.process ( dataToProcess ) ; // compile error } } } The method process ( List < capture # 4-of ? extends AbstractProcessable > ) in the type AbstractProcessor < capture # 4-of ? extends AbstractProcessable > is not applicable for the arguments ( List < capture # 5-of ? extends AbstractProcessable > )"
long l = ( long ) ( ( ulong ) number ) > > 2 ; long l = number > > > 2 ;
"freqsGrid = new AwesomeGridPanel ( ) { @ Override public void createColumns ( ) { /**/ } } ; freqBinding = AwesomeGridBinding.createGridBinding ( freqsGrid , `` frequencies '' ) ; public class AwesomeGridBinding { public static FieldBinding createGridBinding ( AwesomeGridPanel grid , String property ) { return new FieldBinding ( new AwesomeGridAdapterField ( grid ) , property ) ; } } class AwesomeGridAdapterField < T > extends AdapterField { protected AwesomeGridPanel grid ; private StoreListener < BeanModel > storeChangedListener ; public AwesomeGridAdapterField ( AwesomeGridPanel grid ) { super ( grid ) ; this.grid = grid ; configureGrid ( grid , this ) ; } @ Override public void setValue ( Object value ) { List data ; if ( value == null ) data = new ArrayList < > ( ) ; else if ( ! ( value instanceof List ) ) throw new IllegalArgumentException ( ) ; else data = ( List ) value ; grid.getStore ( ) .setMonitorChanges ( false ) ; grid.getStore ( ) .setFiresEvents ( false ) ; setResults ( grid.getStore ( ) , data ) ; grid.getStore ( ) .setFiresEvents ( true ) ; grid.getStore ( ) .setMonitorChanges ( true ) ; grid.getGrid ( ) .getView ( ) .refresh ( false ) ; } @ Override public Object getValue ( ) { List < T > result = new ArrayList < > ( ) ; for ( BeanModel bm : grid.getStore ( ) .getModels ( ) ) if ( isBeanForResult ( bm ) ) result.add ( extractResult ( bm ) ) ; return result ; } protected void setResults ( ListStore < BeanModel > store , List data ) { store.removeAll ( ) ; for ( Object obj : data ) if ( obj instanceof BeanModel ) store.add ( ( BeanModel ) obj ) ; else throw new IllegalArgumentException ( ) ; } protected boolean isBeanForResult ( BeanModel beanModel ) { return true ; } protected T extractResult ( BeanModel bmFromStore ) { return bmFromStore.getBean ( ) ; } private final EventType [ ] STORE_EVENTS = { Store.Add , Store.Clear , Store.DataChanged , Store.Remove , Store.Update } ; protected void configureGrid ( final AwesomeGridPanel grid , final AdapterField field ) { grid.getStore ( ) .setMonitorChanges ( true ) ; // grid.getStore ( ) .removeAllListeners ( ) ; if ( storeChangedListener ! = null ) grid.getStore ( ) .removeStoreListener ( storeChangedListener ) ; storeChangedListener = new StoreListener < BeanModel > ( ) { @ Override public void handleEvent ( StoreEvent < BeanModel > e ) { super.handleEvent ( e ) ; for ( EventType se : STORE_EVENTS ) { if ( se ! = e.getType ( ) ) continue ; field.fireEvent ( Events.Change ) ; return ; } } } ; grid.getStore ( ) .addStoreListener ( storeChangedListener ) ; } }"
"Boolean [ , ] IsPixelSet ( int x , int y ) void DrawPieceOnBoard ( ) { for ( int y = 0 ; y < height ; ++y ) { for ( int x = 0 ; x < width ; ++x ) { if ( piece.IsPixelSet ( x , y ) { board.DrawPixelAt ( x , y , piece.GetColor ( ) ) ; } } } }"
"DataSet < Row > data = loadInput ( ) ; // data is of form ( foo , bar , myStruct ) from avro data . // do some joins to add more datadata = doJoins ( data ) ; // now data is of form ( a , b , myStruct ) // transform DataSet < Row > to DataSet < MyType > DataSet < MyType > myData = data.map ( row - > myUDF ( row ) , encoderOfMyType ) ; // method ` myUDF ` definitionMyType myUDF ( Row row ) { String a = row.getAs ( `` a '' ) ; String b = row.getAs ( `` b '' ) ; // MyStruct is the generated avro class that corresponds to field myStruct MyStruct myStruct = convertToAvro ( row.getAs ( `` myStruct '' ) ) ; return generateMyType ( a , b , myStruct ) ; }"
"public class Test { public static void main ( String [ ] args ) { class EnglishHelloThere { int a=10 ; } } } Compiled from `` Test.java '' class com.Test $ 1EnglishHelloThere SourceFile : `` Test.java '' EnclosingMethod : # 21. # 23 // com.Test.main InnerClasses : # 27= # 1 ; //EnglishHelloThere=class com/Test $ 1EnglishHelloThere minor version : 0 major version : 51 flags : ACC_SUPERConstant pool : # 1 = Class # 2 // com/Test $ 1EnglishHelloThere # 2 = Utf8 com/Test $ 1EnglishHelloThere # 3 = Class # 4 // java/lang/Object # 4 = Utf8 java/lang/Object # 5 = Utf8 a # 6 = Utf8 I # 7 = Utf8 < init > # 8 = Utf8 ( ) V # 9 = Utf8 Code # 10 = Methodref # 3. # 11 // java/lang/Object . `` < init > '' : ( ) V # 11 = NameAndType # 7 : # 8 // `` < init > '' : ( ) V # 12 = Fieldref # 1. # 13 // com/Test $ 1EnglishHelloThere.a : I # 13 = NameAndType # 5 : # 6 // a : I # 14 = Utf8 LineNumberTable # 15 = Utf8 LocalVariableTable # 16 = Utf8 this # 17 = Utf8 Lcom/Test $ 1EnglishHelloThere ; # 18 = Utf8 SourceFile # 19 = Utf8 Test.java # 20 = Utf8 EnclosingMethod # 21 = Class # 22 // com/Test # 22 = Utf8 com/Test # 23 = NameAndType # 24 : # 25 // main : ( [ Ljava/lang/String ; ) V # 24 = Utf8 main # 25 = Utf8 ( [ Ljava/lang/String ; ) V # 26 = Utf8 InnerClasses # 27 = Utf8 EnglishHelloThere { int a ; flags : com.Test $ 1EnglishHelloThere ( ) ; flags : Code : stack=2 , locals=1 , args_size=1 0 : aload_0 1 : invokespecial # 10 // Method java/lang/Object . `` < init > '' : ( ) V 4 : aload_0 5 : bipush 10 7 : putfield # 12 // Field a : I 10 : return LineNumberTable : line 12 : 0 line 13 : 4 line 12 : 10 LocalVariableTable : Start Length Slot Name Signature 0 11 0 this Lcom/Test $ 1EnglishHelloThere ; } public int a ; flags : ACC_PUBLIC protected int a ; flags : ACC_PROTECTED"
"Arrays.asList ( `` duck '' , '' chicken '' , '' flamingo '' , '' pelican '' ) .stream ( ) .reduce ( 0 , ( c1 , c2 ) - > c1.length ( ) + c2.length ( ) , ( s1 , s2 ) - > s1 + s2 ) ;"
"import javax.swing . * ; import java.awt . * ; import java.awt.event . * ; public class New_Gas_Bar extends JFrame { public JPanel panel1 , panel2 , panel3 , panel4 , panel5 ; public JLabel main1 , main2 , main3 ; public JLabel gasBar , total ; public JButton button1 , button2 , button3 , button4 ; public JRadioButton bronzeG , silverG , goldG , selfS , fullS , fullService , selfService ; public JCheckBox oilC , windWash , windClean ; static double fullCost , selfCost ; public New_Gas_Bar ( ) { super ( `` New Gas Bar '' ) ; setSize ( 640,640 ) ; Container container = getContentPane ( ) ; panel1=new JPanel ( ) ; panel2=new JPanel ( ) ; panel1.setBackground ( new Color ( 107,202,226 ) ) ; panel1.setLayout ( new GridLayout ( 7,1 ) ) ; main1 = new JLabel ( `` Gas Bar Project `` ) ; main2 = new JLabel ( `` ICS4U0 - September 2013 '' ) ; main3 = new JLabel ( `` `` ) ; button1 = new JButton ( `` Gas Station '' ) ; button2 = new JButton ( `` Car Wash '' ) ; button3 = new JButton ( `` Total '' ) ; button4 = new JButton ( `` Exit '' ) ; panel2.setBackground ( new Color ( 144,160,170 ) ) ; panel2.setLayout ( new GridLayout ( 4,1 ) ) ; panel2.add ( button1 ) ; panel2.add ( button2 ) ; panel2.add ( button3 ) ; panel2.add ( button4 ) ; panel1.add ( main1 ) ; panel1.add ( main2 ) ; //panel2.add ( gasBar ) ; //panel3.add ( total ) ; container.setLayout ( new BorderLayout ( ) ) ; container.add ( panel1 , BorderLayout.NORTH ) ; container.add ( panel2 , BorderLayout.CENTER ) ; ButtonHandler handler = new ButtonHandler ( ) ; button1.addActionListener ( handler ) ; button2.addActionListener ( handler ) ; button3.addActionListener ( handler ) ; button4.addActionListener ( handler ) ; ButtonGroup serveStyle = new ButtonGroup ( ) ; fullS = new JRadioButton ( `` Full Serve '' ) ; selfS = new JRadioButton ( `` Self Serve '' ) ; serveStyle.add ( fullS ) ; serveStyle.add ( selfS ) ; ButtonGroup serveGas = new ButtonGroup ( ) ; bronzeG = new JRadioButton ( `` Bronze Service '' ) ; silverG = new JRadioButton ( `` Silver Service '' ) ; goldG = new JRadioButton ( `` Gold Service '' ) ; serveGas.add ( bronzeG ) ; serveGas.add ( silverG ) ; serveGas.add ( goldG ) ; oilC = new JCheckBox ( `` Oil Change '' ) ; windWash = new JCheckBox ( `` Windshield Wash '' ) ; windClean = new JCheckBox ( `` Windshield Cleaning '' ) ; RadioButtonHandler radioHand = new RadioButtonHandler ( ) ; bronzeG.addItemListener ( radioHand ) ; CheckBoxHandler checkHand = new CheckBoxHandler ( ) ; oilC.addItemListener ( checkHand ) ; setVisible ( true ) ; pack ( ) ; } public static void main ( String [ ] args ) { New_Gas_Bar application = new New_Gas_Bar ( ) ; } public class ButtonHandler implements ActionListener { public void actionPerformed ( ActionEvent event ) { if ( event.getSource ( ) == button1 ) { panel1.setVisible ( true ) ; panel2.setVisible ( false ) ; panel3.setVisible ( true ) ; panel4.setVisible ( false ) ; panel5.setVisible ( false ) ; } else if ( event.getSource ( ) == button2 ) { } else if ( event.getSource ( ) == button3 ) { } else if ( event.getSource ( ) == button4 ) { System.exit ( 0 ) ; } } } public class RadioButtonHandler implements ActionListener { public void actionPerformed ( ActionEvent event ) { if ( event.getSource ( ) == fullS ) { } else if ( event.getSource ( ) == selfS ) { } if ( event.getSource ( ) == bronzeG ) { } else if ( event.getSource ( ) == silverG ) { } else if ( event.getSource ( ) == goldG ) { } } } public class CheckBoxHandler implements ActionListener { public void actionPerformed ( ActionEvent event ) { if ( event.getSource ( ) == checkBox1 ) { } else if ( event.getSource ( ) == checkBox2 ) { } else if ( event.getSource ( ) == checkBox3 ) { } } } } } RadioButtonHandler radioHand = new RadioButtonHandler ( ) ; bronzeG.addItemListener ( radioHand ) ; CheckBoxHandler checkHand = new CheckBoxHandler ( ) ; oilC.addItemListener ( checkHand ) ; addItemListener ( java.awt.event.ItemListener ) in javax.swing.AbstractButton can not be applied to ( New_Gas_Bar.RadioButtonHandler )"
"/** * * @ param x * @ param y * @ return */protected boolean myMethod ( int x , int y ) { return true ; } /** * * @ param x * @ param y * @ return */int myMethod ( int x , int y ) { return 1 ; }"
public class UnwelcomeGuest { public static final long GUEST_USER_ID = -1 ; private static final long USER_ID ; static { try { USER_ID = getUserIdFromEnvironment ( ) ; } catch ( IdUnavailableException e ) { USER_ID = GUEST_USER_ID ; System.out.println ( `` Logging in as guest '' ) ; } } private static long getUserIdFromEnvironment ( ) throws IdUnavailableException { throw new IdUnavailableException ( ) ; // Simulate an error } public static void main ( String [ ] args ) { System.out.println ( `` User ID : `` + USER_ID ) ; } } //Class ends here//User defined Exceptionclass IdUnavailableException extends Exception { IdUnavailableException ( ) { } } //Class ends here
int score = 100 ; score = score * 1.05 ; int score = 100 ; score *= 1.05 ;
"import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.JButton ; import javax.swing.JDialog ; import javax.swing.JFrame ; import javax.swing.JOptionPane ; import javax.swing.JPanel ; import javax.swing.UIManager ; public class ButtonUnrollover { public static void main ( String [ ] args ) { JFrame f = new JFrame ( ) ; final JPanel p = new JPanel ( ) ; JButton b = new JButton ( ) ; b.setIcon ( UIManager.getIcon ( `` OptionPane.informationIcon '' ) ) ; b.setRolloverIcon ( UIManager.getIcon ( `` OptionPane.errorIcon '' ) ) ; // b.setSelectedIcon ( UIManager.getIcon ( `` OptionPane.informationIcon '' ) ) ; // b.setRolloverSelectedIcon ( UIManager.getIcon ( `` OptionPane.informationIcon '' ) ) ; // b.setPressedIcon ( UIManager.getIcon ( `` OptionPane.informationIcon '' ) ) ; p.add ( b ) ; b.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { JOptionPane jOP = new JOptionPane ( `` Dummy message '' ) ; JDialog dialog = jOP.createDialog ( p , null ) ; dialog.setVisible ( true ) ; } } ) ; f.add ( p ) ; f.pack ( ) ; f.setVisible ( true ) ; } }"
"stream ( ) .collect ( Collectors.toMap ( Student : :getAge , Student : :getSurname , new TreeSet < String > ( ) ) ) ` ."
"public static double optimization ( double x1 , double x2 , double x3 , Function < Double , Double > f , double epsilon ) { double y1 = f.apply ( x1 ) ; double y2 = f.apply ( x2 ) ; double y3 = f.apply ( x3 ) ; double a = ( x1* ( y2-y3 ) + x2* ( y3-y1 ) + x3* ( y1-y2 ) ) / ( ( x1-x2 ) * ( x1-x3 ) * ( x3-x2 ) ) ; double b = ( x1*x1* ( y2-y3 ) +x2*x2* ( y3-y1 ) +x3*x3* ( y1-y2 ) ) / ( ( x1-x2 ) * ( x1-x3 ) * ( x2-x3 ) ) ; int i=0 ; do { i=i+1 ; x3=x2 ; x2=x1 ; x1=-1 . *b/ ( 2*a ) ; y1=f.apply ( x1 ) ; y2=f.apply ( x2 ) ; y3=f.apply ( x3 ) ; a = ( x1* ( y2-y3 ) + x2* ( y3-y1 ) + x3* ( y1-y2 ) ) / ( ( x1-x2 ) * ( x1-x3 ) * ( x3-x2 ) ) ; b = ( x1*x1* ( y2-y3 ) +x2*x2* ( y3-y1 ) +x3*x3* ( y1-y2 ) ) / ( ( x1-x2 ) * ( x1-x3 ) * ( x2-x3 ) ) ; } while ( ( Math.abs ( x1 - x2 ) > epsilon ) & & ( i < 1000 ) ) ; if ( i==1000 ) { Log.debug ( `` Max iteration reached '' ) ; } return x1 ; }"
"public < T > List < T > cleanData ( List < T > data , List < Function < T , T > > cleanOps ) { List < T > dataNew=data.stream ( ) .map ( ( str ) - > { T cleanData = str ; for ( Function < T , T > function : cleanOps ) { cleanData=function.apply ( cleanData ) ; } return cleanData ; } ) .collect ( Collectors.toList ( ) ) ; return dataNew ; } public void processData ( ) { List < Function < String , String > > cleanOps = new ArrayList < > ( ) ; cleanOps.add ( String : :toLowerCase ) ; cleanOps.add ( str - > str.replaceAll ( `` `` , `` '' ) ) ; List < String > data = new ArrayList < > ( ) ; data.add ( `` John Doe '' ) ; data.add ( `` Jane Doe '' ) ; System.out.println ( Arrays.toString ( cleanData ( data , cleanOps ) .toArray ( ) ) ) ; }"
( ns students.Foo ( : gen-class : name students.Foo : state bar ; : state baz : init init ) ) ( defn -init [ ] [ [ ] 42 ] ) package students ; public class Bar { public static void main ( String [ ] args ) { Foo foo = new Foo ( ) ; System.out.println ( foo.bar ) ; // System.out.println ( foo.baz ) ; } }
@ Overridepublic boolean canImport ( TransferSupport support ) { //Highlight the most near lying node in the tree as the user drags the //mouse over nodes in the tree . support.setShowDropLocation ( true ) ;
switch ( a ) { case b : Object o = new Object ( ) ; return o ; case c : o = new Object ( ) ; return o ; }
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < xsl : stylesheet version= '' 1.0 '' xmlns : xsl= '' http : //www.w3.org/1999/XSL/Transform '' > < xsl : output method= '' xml '' indent= '' yes '' / > < xsl : template match= '' testsuites '' > < xsl : call-template name= '' summary '' / > < /xsl : template > < xsl : template name= '' summary '' > < xsl : variable name= '' testCount '' select= '' sum ( testsuite/ @ tests ) '' / > < xsl : variable name= '' errorCount '' select= '' sum ( testsuite/ @ errors ) '' / > < xsl : variable name= '' failureCount '' select= '' sum ( testsuite/ @ failures ) '' / > < xsl : variable name= '' timeCount '' select= '' sum ( testsuite/ @ time ) '' / > < xsl : variable name= '' successRate '' select= '' ( $ testCount - $ failureCount - $ errorCount ) div $ testCount '' / > < xsl : attribute name= '' class '' > < xsl : choose > < xsl : when test= '' $ failureCount & gt ; 0 '' > Failure < /xsl : when > < xsl : when test= '' $ errorCount & gt ; 0 '' > Error < /xsl : when > < /xsl : choose > < /xsl : attribute > < Build > < NombreTest > < xsl : value-of select= '' $ testCount '' / > < /NombreTest > < Failures > < xsl : value-of select= '' $ failureCount '' / > < /Failures > < Erreurs > < xsl : value-of select= '' $ errorCount '' / > < /Erreurs > < PercentSucces > < xsl : call-template name= '' display-percent '' > < xsl : with-param name= '' value '' select= '' $ successRate '' / > < /xsl : call-template > < /PercentSucces > < ExecTime > < xsl : call-template name= '' display-time '' > < xsl : with-param name= '' value '' select= '' $ timeCount '' / > < /xsl : call-template > < /ExecTime > < /Build > < /xsl : template > < xsl : template match= '' failure '' > < xsl : call-template name= '' display-failures '' / > < /xsl : template > < xsl : template match= '' error '' > < xsl : call-template name= '' display-failures '' / > < /xsl : template > < xsl : template name= '' display-time '' > < xsl : param name= '' value '' / > < xsl : value-of select= '' format-number ( $ value , ' 0.000 ' ) '' / > < /xsl : template > < xsl : template name= '' display-percent '' > < xsl : param name= '' value '' / > < xsl : value-of select= '' format-number ( $ value , ' 0.00 % ' ) '' / > < /xsl : template > < xsl : template name= '' display-failures '' > < xsl : choose > < xsl : when test= '' not ( @ message ) '' > N/A < /xsl : when > < xsl : otherwise > < xsl : value-of select= '' @ message '' / > < /xsl : otherwise > < /xsl : choose > < /xsl : template > < /xsl : stylesheet >"
SomeTest test = new SomeTest ( MainActivity.this ) ;
"List < Integer > list = List.of ( 5,6,7,8 ) ; // is it possible to insert ` 1 ` between every item in the list ? // joined list = [ 5,1,6,1,7,1,8 ]"
"try { Files.move ( src , dest , CopyOption.ATOMIC_MOVE ) ; } catch ( AtomicMoveNotSupportedException e ) { // Perform a copy instead ( and report progress ) }"
"public class MyClass < U > { public < T > MyClass ( Set < T > data , Function < T , U > func ) ... } public < T > MyClass ( Set < T > data ) { this ( data , ( item ) - > { return item ; } ) ; }"
"Map < Integer , String > map = ... map.put ( 1 , '' one '' ) ; map.put ( 2 , '' two '' ) ; map.put ( 3 , '' three '' ) ; map.put ( 4 , '' four '' ) ; map.put ( 5 , '' five '' ) ; map.put ( 6 , '' six '' ) ; map.put ( 7 , '' seven '' ) ; map.put ( 8 , '' eigth '' ) ; map.put ( 9 , '' nine '' ) ; private void remove ( int num , final Map < Integer , String > map ) { Iterator < Map.Entry < Integer , String > > it = map.entrySet ( ) .iterator ( ) ; Map.Entry < Integer , String > entry ; while ( it.hasNext ( ) ) { entry = it.next ( ) ; if ( Integer.valueOf ( num ) .equals ( entry.getKey ( ) ) ) { it.remove ( ) ; System.out.println ( entry.getValue ( ) ) ; // vs // System.out.println ( entry.getValue ( ) ) ; // it.remove ( ) ; } } } ... remove ( 4 , map ) ; //output : four//orremove ( 5 , map ) ; //output : five System.out.println ( entry.getValue ( ) ) ; it.remove ( ) ; remove ( 4 , map ) ; //output : four//orremove ( 5 , map ) ; //output : five it.remove ( ) ; System.out.println ( entry.getValue ( ) ) ; remove ( 4 , map ) ; //output : five ! ! ! //orremove ( 5 , map ) ; //output : five ok"
defaultConfig { ... jackOptions { enabled true } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 }
char [ ] digits = new char [ n ] ; for ( int i = 0 ; i < n ; i++ ) { if ( nums [ i ] ) { digits [ i ] = 1 ; } else if ( ! nums [ i ] ) { digits [ i ] = 0 ; } } for ( int k = 0 ; k < n ; k++ ) { System.out.print ( digits [ k ] ) ; }
"class MyComparator extends Comparator < String > { private MyComparator ( ) { } private static final MyComparator INSTANCE = new MyComparator ( ) ; public int compare ( String s1 , String s2 ) { // Omitted } }"
object o = something.foo ( ) ; bar ( o ) ; something.foobar ( ) ;
"ArrayList < Integer > arr = new ArrayList < > ( Arrays.asList ( 2,2,4,2 ) ) ; for ( int z = 0 ; z < arr.size ( ) ; z++ ) { if ( ! arr.get ( z++ ) .equals ( arr.get ( z -- ) ) ) { System.out.println ( `` same '' ) ; } else { System.out.println ( `` differnt '' ) ; } }"
"public void setCatalogName ( int columnIndex , String catalogName ) throws SQLException { checkColRange ( columnIndex ) ; if ( catalogName ! = null ) colInfo [ columnIndex ] .catName = new String ( catalogName ) ; else colInfo [ columnIndex ] .catName = new String ( `` '' ) ; } public void setUsername ( String name ) { if ( name == null ) { username = null ; } else { username = new String ( name ) ; } }"
MyWar -- MyModuleJar1 -- ... -- MyModuleJar2 -- LibA -- commonslang -- ... -- LibB -- commonslang3 -- ... -- LibC -- commonslang3 -- ... -- ...
"@ Overridepublic < B > IndexedSeq < B > map ( final Function1 < ? super Character , B > function ) { ... } public RichString map ( final Function1 < ? super Character , Character > function ) { ... } @ Overridepublic IndexedSeq map ( final Function1 < Object , Object > function ) { ... } public RichString map ( final Function1 < Object , Object > function ) { ... }"
"public static void main ( String [ ] args ) public class Inheritance { double width ; double height ; double depth ; Inheritance ( Inheritance object ) { width = object.width ; height = object.height ; depth = object.depth ; } Inheritance ( double w , double h , double d ) { width = w ; height = h ; depth = d ; } Inheritance ( ) { width = -1 ; height = -1 ; depth = -1 ; } Inheritance ( double len ) { width=height=depth=len ; } double volumeBox ( ) { return width*height*depth ; } class BoxWeight extends Inheritance { double weight ; BoxWeight ( double w , double h , double d , double m ) { super ( w , h , d ) ; weight = m ; } } public class MainModule { public static void main ( String [ ] args ) { Inheritance.BoxWeight mybox1 = new Inheritance.BoxWeight ( 9 , 9 , 9 , 9 ) ; ... ."
public class Test { static public void main ( ) { System.out.print ( `` Hello '' ) ; } }
"private IdentificationMaster validateIdentificationType ( String idType ) { if ( ! StringUtils.isNotBlank ( idType ) ) throw new IllegalArgumentException ( `` Invalid idType '' ) ; Optional < IdentificationMaster > op1 = specRepo.findById ( idType ) ; //testing purpose Optional < IdentificationMaster > op2 = specRepo.findByIdentificationType ( idType ) ; //testing purpose return specRepo.findById ( idType ) .orElse ( specRepo.findByIdentificationType ( idType ) .orElseThrow ( ( ) - > new ResourceNotFoundException ( `` Id Type Not Found `` + idType ) ) ) ; } return specRepo.findByIdentificationType ( idType ) .orElse ( specRepo.findById ( idType ) .orElseThrow ( ( ) - > new ResourceNotFoundException ( `` Id Type Not Found `` + idType ) ) ) ; @ Repositorypublic interface IdentificationSpecRepository extends CrudRepository < IdentificationMaster , String > { Optional < IdentificationMaster > findByIdentificationType ( String identificationType ) ; } @ Entity @ Table ( name = `` IDENTIFICATION_MASTER '' ) public class IdentificationMaster { @ Id @ Column ( name = `` ID '' ) private String id ; @ Column ( name = `` IDENTIFICATION_TYPE '' , unique = true ) private String identificationType ; // getters and setters }"
Object [ ] objArr = new Object [ 10 ] ;
System.out.println ( ( byte ) ( 1.0/0 ) ) ; System.out.println ( ( short ) ( 1.0/0 ) ) ; System.out.println ( ( int ) ( 1.0/0 ) ) ; System.out.println ( ( long ) ( 1.0/0 ) ) ; -1 -1 2147483647 9223372036854775807 1111 1111 1111 1111 1111 1111 0111 1111 1111 1111 1111 1111 1111 1111 0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111
java.util.NoSuchElementException at java.util.StringTokenizer.nextToken ( StringTokenizer.java:332 ) at com.infoaxe.mr.homefeed.ReduceTwo.reduce ( MapReduce.java:290 )
public static long TestMethod ( ) { int len = 10000000 ; Object [ ] obs = new Object [ len ] ; long t = System.nanoTime ( ) ; for ( int i = 0 ; i < len ; i++ ) { obs [ i ] = new Object ( ) ; } return System.nanoTime ( ) - t ; } public static void main ( String ... args ) throws InterruptedException { for ( int i = 0 ; i < 10 ; i++ ) { System.gc ( ) ; System.gc ( ) ; //Wait for the gc to be finished Thread.sleep ( 1000 ) ; System.out.println ( TestMethod ( ) ) ; } } 11284734000799837000682304000304736000380770000392786000374279000381611000379174000407256000
try { callingMethod ( ) ; } catch ( Exception ) { }
public class Response { private List < Fruit > mFruitList ; public List < Fruit > getFruitList ( ) { return mFruitList ; } } public class Fruit { } public class Orange extends Fruit { } List < Fruit > oranges = response.getFruitList ( ) ;
int [ ] array = new int [ 10 ] ; int array [ ] = new int [ 10 ] ;
System.out.println ( 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 ) ; Double sum = DoubleStream.builder ( ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .add ( 0.1 ) .build ( ) .sum ( ) ; System.out.println ( sum ) ;
Collection < ? extends SomeInterface & super MyClass > c ; // does n't compile
public final void writeObject ( Object obj ) throws IOException public final void writeObject ( Serializable obj ) throws IOException
"@ Overrideprotected void onDraw ( Canvas canvas ) { p.setShader ( new LinearGradient ( 0 , 0 , 0 , getHeight ( ) , startColor , endColor , Shader.TileMode.MIRROR ) ) ; canvas.drawPaint ( p ) ; //Pretty sure the mistake is around these two next lines overlayImage.setBounds ( canvas.getClipBounds ( ) ) ; overlayImage.draw ( canvas ) ; }"
public interface Iface { void show ( ) ; class ifaceClass { int x ; public ifaceClass ( ) { System.out.println ( x ) ; } } } public class Test implements Iface { public static void main ( String [ ] args ) { ifaceClass ifaceClassObj = new ifaceClass ( ) ; } public void show ( ) { } } import com.jls.Iface.ifaceClass ;
abstract Class Entity { //some variables ... //some methods ... public abstract void render ( Graphics g ) ; } Class A extends Entity { } Class B extends Entity { } Class C extends Entity { } Class A have List < B > ... Class B have List < C > ... for ( A a : listOfAs ) { for ( B b : listOfBs ) { for ( C c : listOfCs ) { c.render ( g ) ; } b.render ( g ) ; } a.render ( g ) ; } Entity x = new A ( ) ; ... Entity y = new B ( ) ; ...
class ParentClass { void foo ( ) { … // lots of code 1 ; // can possibly throw NullPointerException … // lots of code 2 } } class SubClass extends ParentClass { @ Override void foo ( ) { try { super.foo ( ) ; } catch ( NullPointerException npe ) { … /*handle exception*/ } finally { … /* resume lots of code 2 ? */ } } }
"[ [ A , 1 ] , [ D , 1 ] , [ C , 2 ] , [ D , 2 ] ] [ [ A , 1 ] , [ C , 2 ] , [ D , 1 ] , [ D , 2 ] ]"
public class NotThreadSafe { private int value ; public void setValue ( int value ) { this.value = value ; } public int getValue ( ) { return this.value ; } } public class StillNotThreadSafe { private int value ; public synchronized void setValue ( int value ) { this.value = value ; } public int getValue ( ) { return this.value ; } } public class ThreadSafe { private int value ; public synchronized void setValue ( int value ) { this.value = value ; } public synchronized int getValue ( ) { return this.value ; } } public class NotSure { private volatile int value ; public synchronized void setValue ( int value ) { this.value = value ; } public int getValue ( ) { return this.value ; } }
"class Account { private Map tradesByRegion ; //KEY=Region , VALUE=TradeCollection } class TradeCollection { private Map tradesByInstrument ; //KEY=Instrument , Value=Trade } class Account { private Map < Region , Map < Instrument , Trade > > trades ; }"
"static volatile Map currentMap = null ; // this must be volatilestatic Object lockbox = new Object ( ) ; public static void buildNewMap ( ) { // this is called by the producer Map newMap = new HashMap ( ) ; // when the data needs to be updated synchronized ( lockbox ) { // this must be synchronized because // of the Java memory model // .. do stuff to put things in newMap newMap.put ( ... . ) ; newMap.put ( ... . ) ; } /* After the above synchronization block , everything that is in the HashMap is visible outside this thread */ /* Now make the updated set of values available to the consumer threads . As long as this write operation can complete without being interrupted , and is guaranteed to be written to shared memory , and the consumer can live with the out of date information temporarily , this should work fine */ currentMap = newMap ; } public static Object getFromCurrentMap ( Object key ) { Map m = null ; Object result = null ; m = currentMap ; // no locking around this is required if ( m ! = null ) { // should only be null during initialization Object result = m.get ( key ) ; // get on a HashMap is not synchronized // Do any additional processing needed using the result } return ( result ) ; }"
public interface IA { public interface IB { } }
< T > T getnext ( Spliterator < T > s ) { }
public A < ? > ( ) { public static Integer member = 0 ; } A < Integer > integer = new A < Integer > ( ) ; A < String > string = new A < String > ( ) ;
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' yes '' ? > < ns3 : getNamesResponse xmlns : ns2= '' http : //www.example.com/ABC/Common '' xmlns : ns3= '' http : //www.example.com/ABC/Profile '' > < ns3 : OperatingName > < ns3 : Number > 123456789 < /ns3 : Number > < ns3 : Name > Company Name , Inc. < /ns3 : Name > < /ns3 : OperatingName > < /ns3 : getNamesResponse > < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' standalone= '' yes '' ? > < ns2 : getNamesResponse xmlns : ns2= '' http : //www.example.com/ABC/Profile '' xmlns : ns4= '' http : //www.example.com/ABC/Common '' / > < message > < properties > < property name= '' tracking.compositeInstanceId '' value= '' 2110209 '' / > < property name= '' tracking.ecid '' value= '' 0058XKIkdpHFw00Fzzw0w00004Et005Kmk '' / > < property name= '' ws.wsu.id '' value= '' Body-Body_tTzuB5XmRNQPR7Y7 '' / > < /properties > < parts > < part name= '' getNamesResponse '' > < bp : getNamesResponse > < bp : OperatingName > < bp : Number > 123456789 < /bp : Number > < bp : Name > Company Name , Inc. < /bp : Name > < /bp : OperatingName > < /bp : getNamesResponse > < /part > < /parts > < /message >"
jTable1 = new JXTable ( ) ; if ( isClickable ) { jTable1.getTableHeader ( ) .setCursor ( Cursor.getPredefinedCursor ( Cursor.HAND_CURSOR ) ) ; //set the sorter here } else { jTable1.setSortable ( false ) ; }
switch ( button ) { case `` ok '' : if ( s.exists ( `` imagerepo/language/catalan_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/catalan_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/suomi_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/suomi_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/italian_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/italian_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/portuguese_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/portuguese_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/english_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/english_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/dutch_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/dutch_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/spanish_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/spanish_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/french_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/french_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/latina_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/latina_ok.png '' ) ; } else if ( s.exists ( `` imagerepo/language/chinese_ok.png '' ) ! = null ) { s.click ( `` imagerepo/language/chinese_ok.png '' ) ; } break ; ... etc..
String str1= '' asdfavaxzvzxvc '' ; String str2= '' werwerzsfaasdf '' ; Object c=str1 ; Object d=str2 ; System.out.println ( c ) ; long time1=System.currentTimeMillis ( ) ; for ( int i=0 ; i < 1000000000 ; i++ ) { if ( c.equals ( d ) ) { //System.out.println ( `` asfasdfasdf '' ) ; // line 9 } } long time2=System.currentTimeMillis ( ) ; System.out.println ( `` time taken in this is `` + ( time2-time1 ) ) ;
"class Param < T > { private T param ; public T getParam ( ) { return param ; } public void setParam ( T param ) { this.param = param } } protected HttpWebRequest emit ( OutParam < HttpWebRequest > request ) throws Exception { request.setParam ( this.getService ( ) .prepareHttpWebRequest ( ) ) ; OutputStream urlOutStream = request.getParam ( ) .getOutputStream ( ) ; EwsServiceXmlWriter writer = new EwsServiceXmlWriter ( this.service , urlOutStream ) ; this.writeToXml ( writer ) ; urlOutStream.flush ( ) ; urlOutStream.close ( ) ; writer.dispose ( ) ; request.getParam ( ) .executeRequest ( ) ; if ( request.getParam ( ) .getResponseCode ( ) > = 400 ) { throw new Exception ( `` The remote server returned an error : ( `` +request.getParam ( ) .getResponseCode ( ) + '' ) '' +request.getParam ( ) .getResponseText ( ) ) ; } return request.getParam ( ) ; }"
"pool : ... # 17 Float NaNfmethod : # 1 fload # 17 //NaNf ... pool : ... # 17 Float NaNf # 18 Float NaNfmethod : # 1 fload # 18 //NaNf < - look , it loads # 18 now"
public class Test { static String mountain = `` Everest '' ; static Test favorite ( ) { System.out.print ( `` Mount `` ) ; return null ; } public static void main ( String [ ] args ) { System.out.println ( favorite ( ) .mountain ) ; } }
"public class Test { public static void main ( String [ ] args ) { int number = 9 ; test ( `` holla '' , new Human ( ) { @ Override void test ( ) { // TODO Auto-generated method stub System.out.println ( number ) ; // I think this line should not compile } } ) ; } private static void test ( String a , Human h ) { h.test ( ) ; } } public abstract class Human { abstract void test ( ) ; }"
public static List < String > getAllNames ( List < Account > allAccounts ) { List < String > names = new ArrayList < String > ( allAccounts.size ( ) ) ; for ( Account account : allAccounts ) { names.add ( account.getName ( ) ) ; } return names ; }
"public void MyDao { private RestTemplate restTemplate ; private ResponseParser responseParser ; public myDao ( RestTemplate restTemplate , ResponseParser responsePaser ) { this.restTemplate = restTemplate ; this.responseParser = responseParser ; } public MyResponse sendRequest ( MyRequest myRequest ) { ResponseEntity < String > responeEntity = restTemplate.exchange ( ... ) ; String body = responseEntity.getBody ( ) ; return responseParser.parse ( body ) ; } } public void MyDao { private RestTemplate restTemplate ; public myDao ( RestTemplate restTemplate , ResponseParser responsePaser ) { this.restTemplate = restTemplate ; } public String sendRequest ( MyRequest myRequest ) { ResponseEntity < String > responeEntity = restTemplate.exchange ( ... ) ; return responseEntity.getBody ( ) ; } } public void MyService { private MyDao myDao ; private ResponseParser responseParser ; public myDao ( MyDao myDao , ResponseParser responsePaser ) { this.myDao = myDao ; this.responseParser = responseParser ; } public MyObject process ( MyRequest myRequest ) { String response = myDao.sendRequest ( myRequest ) return responseParser.parse ( response ) ; } }"
public class Foo ( ) implements Serializable { int a ; String b ; } ... int c ; ...
"Collections.sort ( sorted , new Comparator < Object [ ] > ( ) { public int compare ( Object [ ] o1 , Object [ ] o2 ) { /* do it ... */ return order ; } }"
"private volatile ConcurrentHashMap < String , List < T > > instrumentMap = new ConcurrentHashMap < String , List < T > > ( ) ; private ReentrantLock lock ; public void addAll ( List < T > entityList , String threadName ) { try { lock.lock ( ) ; List < T > instrumentList = instrumentMap.get ( threadName ) ; if ( instrumentList == null ) { instrumentList = new ArrayList < T > ( batchSize ) ; instrumentMap.put ( threadName , instrumentList ) ; } if ( instrumentList.size ( ) > = batchSize -1 ) { instrumentList.addAll ( entityList ) ; recordSaver.persist ( instrumentList ) ; instrumentList.clear ( ) ; } else { instrumentList.addAll ( entityList ) ; } } finally { lock.unlock ( ) ; } } if ( //Some condition ) { Thread.sleep ( //2 minutes ) ; aggregator.getLock ( ) .lock ( ) ; List < T > instrumentList = instrumentMap.values ( ) .stream ( ) .flatMap ( x- > x.stream ( ) ) .collect ( Collectors.toList ( ) ) ; if ( instrumentList.size ( ) > 0 ) { saver.persist ( instrumentList ) ; instrumentMap .values ( ) .parallelStream ( ) .forEach ( x - > x.clear ( ) ) ; aggregator.getLock ( ) .unlock ( ) ; } }"
"import java.util.function.Consumer ; public class Example { public static void main ( String [ ] args ) { Example example = new Example ( ) ; example.setConsumer ( test - > System.out.println ( `` passed string is `` + test ) ) ; //uses MyConsumer , why ? example.getConsumer ( ) .accept ( `` Test 1 '' ) ; example.setConsumer ( ( MyConsumer < String > ) test - > System.out.println ( `` passed string is `` + test ) ) ; //uses MyConsumer example.getConsumer ( ) .accept ( `` Test 2 '' ) ; example.setConsumer ( ( Consumer < String > ) test - > System.out.println ( `` passed string is `` + test ) ) ; //uses Consumer example.getConsumer ( ) .accept ( `` Test 3 '' ) ; } private Consumer < String > consumer ; public Consumer < String > getConsumer ( ) { return consumer ; } public void setConsumer ( Consumer < String > consumer ) { this.consumer = consumer ; } public void setConsumer ( MyConsumer < String > consumer ) { this.consumer = consumer ; } @ FunctionalInterface public interface MyConsumer < T > extends Consumer < T > { @ Override default void accept ( T value ) { System.out.println ( `` In consumer string : `` + value ) ; //example thing to do receive ( value ) ; } void receive ( T value ) ; } }"
"public abstract class AbstractNode { private Long id ; @ NotEmpty private String code ; @ Relationship ( type = `` SUBTREE_OF '' , direction = Relationship.INCOMING ) private Set < Node > children ; < getters & setters omitted > } public class CodeSet extends AbstractNode { @ Relationship ( type = `` SUBTREE_OF '' , direction = Relationship.OUTGOING ) private Application parent ; < getters and setters omitted > } public class Node extends AbstractNode { @ NotEmpty private String description ; @ NotEmpty private String type ; @ NotEmpty private String name ; @ NotNull @ Relationship ( type = `` SUBTREE_OF '' , direction = Relationship.OUTGOING ) private AbstractNode parent ; < getters and setters omitted > } public Node update ( Node node , Long nodeId ) throws EntityNotFoundException { Node updated = findById ( nodeId , 0 ) ; updated.setDescription ( node.getDescription ( ) ) ; updated.setType ( node.getType ( ) ) ; updated.setName ( node.getName ( ) ) ; updated.setCode ( node.getCode ( ) ) ; nodeRepository.save ( updated ) ; return updated ; }"
"public static void main ( String [ ] args ) { Random r = new Random ( ) ; IntStream randomStream = r.ints ( 10000,0 , 2 ) ; System.out.println ( `` Heads : `` + randomStream.filter ( x - > x==1 ) .count ( ) ) ; System.out.println ( `` Tails : `` + randomStream.filter ( x - > x==0 ) .count ( ) ) ; } java.lang.IllegalStateException : stream has already been operated upon or closed"
public class Student { public static int number = 0 ; } Student s = new Student ( ) ; int n = s.number ;
"private class getRssFeedTask extends AsyncTask < String , Void , String > { @ Override protected String doInBackground ( String ... params ) { try { URL rssUrl = new URL ( params [ 0 ] ) ; HttpURLConnection urlIn = ( HttpURLConnection ) rssUrl.openConnection ( ) ; InputStream in = new BufferedInputStream ( urlIn.getInputStream ( ) ) ; String line ; feed = `` '' ; while ( ( line = in.toString ( ) ) ! = null ) { feed += line ; } in.close ( ) ; return feed ; } catch ( MalformedURLException ue ) { System.out.println ( `` Malformed URL '' ) ; } catch ( IOException ioe ) { System.out.println ( `` The URL is unreachable '' ) ; } return null ; } } private class getRssFeedTask extends AsyncTask < String , Void , String > { @ Override protected String doInBackground ( String ... params ) { try { URL rssUrl = new URL ( params [ 0 ] ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( rssUrl.openStream ( ) ) ) ; String line ; feed = `` '' ; while ( ( line = in.readLine ( ) ) ! = null ) { feed += line ; } in.close ( ) ; return feed ; } catch ( MalformedURLException ue ) { System.out.println ( `` Malformed URL '' ) ; } catch ( IOException ioe ) { System.out.println ( `` The URL is unreachable '' ) ; } return null ; } }"
static void preciseRethrowTest ( ) { Exception outerE ; try { } catch ( Exception e ) { outerE = e ; // Compilation error here . Unhandled exception type Exception // throw outerE ; throw e ; // No compiler error } }
"public < T > T [ ] toArray ( T [ ] a ) { if ( a.length < size ) // Make a new array of a 's runtime type , but my contents : return ( T [ ] ) Arrays.copyOf ( elementData , size , a.getClass ( ) ) ; System.arraycopy ( elementData , 0 , a , 0 , size ) ; if ( a.length > size ) a [ size ] = null ; return a ; } if ( a.length > size ) a [ size ] = null ;"
"public class ItemDaoTest { // dao to test @ Autowired private ItemDao dao ; @ Test public void testAdd ( ) { // issue - > testing ADD but using LIST int oldSize = dao.list ( ) .size ( ) ; dao.add ( new Item ( `` stuff '' ) ) ; assertTrue ( oldSize < dao.list ( ) .size ( ) ) ; } @ Test public void testFind ( ) { // issue - > testing FIND but using ADD Item item = new Item ( `` stuff '' ) dao.add ( item ) ; assertEquals ( item , dao.find ( item.getId ( ) ) ) ; } }"
"public class Test { public static void main ( String [ ] args ) { int count = 50000 ; List < ListObject > list = new ArrayList ( ) ; for ( int i = 0 ; i < count ; i++ ) { int key = ThreadLocalRandom.current ( ) .nextInt ( 100000 ) ; int value = ThreadLocalRandom.current ( ) .nextInt ( 1000000 ) ; list.add ( new ListObject ( key , value ) ) ; } Map < Integer , List < Integer > > map = new HashMap ( ) ; for ( ListObject a : list ) { map.computeIfAbsent ( a.getKey ( ) , ArrayList : :new ) ; } System.out.println ( `` Done '' ) ; } class ListObject { public ListObject ( int key , int value ) { this.key = key ; this.value = value ; } public int getKey ( ) { return key ; } public void setKey ( int key ) { this.key = key ; } public int getValue ( ) { return value ; } public void setValue ( int value ) { this.value = value ; } private int key ; private int value ; }"
byte a = 2 ; int b = a > > 4L ;
"@ Path ( `` /evaluatePreconditions '' ) public class EvaluatePreconditionsResource { @ GET @ Produces ( MediaType.TEXT_PLAIN ) public Response findData ( @ Context Request request ) { final Data data = retrieveData ( ) ; final Date lastModified = Timestamp.valueOf ( data.getLastModified ( ) ) ; final Response.ResponseBuilder responseBuilder = request.evaluatePreconditions ( lastModified ) ; if ( responseBuilder == null ) { // Last modified date did n't match , send new content return Response.ok ( data.toString ( ) ) .lastModified ( lastModified ) .build ( ) ; } // Sending 304 not modified return responseBuilder.build ( ) ; } private Data retrieveData ( ) { // Let 's assume that we call a service here that provides this value // The date time is expressed in GMT+2 , please adjust it according // to your timezone return new Data ( LocalDateTime.of ( 2020 , 10 , 2 , 10 , 23 , 16 , 1_000_000 ) , `` This is my content '' ) ; } public static class Data { private final LocalDateTime lastModified ; private final String content ; public Data ( LocalDateTime lastModified , String content ) { this.lastModified = lastModified ; this.content = content ; } public LocalDateTime getLastModified ( ) { return lastModified ; } @ Override public String toString ( ) { return content ; } } } curl -H `` If-Modified-Since : Fri , 02 Oct 2020 08:23:16 GMT '' \ -I localhost:8080/evaluatePreconditionsHTTP/1.1 304 Not Modified ... curl -H `` If-Modified-Since : Fri , 02 Oct 2020 08:23:16 GMT '' \ -I localhost:8080/evaluatePreconditionsHTTP/1.1 200 OKLast-Modified : Fri , 02 Oct 2020 08:23:16 GMT ..."
"void method ( ) { // Thread-unsafe operations { ... } { // < - New scope // Give a mutex to the lock ScopedLock lock ( m_mutex ) ; // thread safe operations { ... } if ( ... ) return ; // Mutex is unlocked automatically on return // thread safe operations { ... } } // < - End of scope , Mutex is unlocked automatically // Thread-unsafe operations { ... } }"
"public class JDialogTest extends JDialog { private static final long serialVersionUID = 1L ; public JDialogTest ( JFrame owner ) { super ( owner , ModalityType.APPLICATION_MODAL ) ; init ( ) ; } private void init ( ) { this.getContentPane ( ) .setLayout ( new GridLayout ( 1,2 ) ) ; JButton btnVisible = new JButton ( `` Set visible false '' ) ; btnVisible.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { JDialogTest.this.setVisible ( false ) ; } } ) ; JButton btnDispose = new JButton ( `` Dispose '' ) ; btnDispose.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { JDialogTest.this.dispose ( ) ; } } ) ; this.getContentPane ( ) .add ( btnVisible ) ; this.getContentPane ( ) .add ( btnDispose ) ; this.pack ( ) ; } public static void main ( String [ ] args ) { //A fake frame to test JDialog JFrame fakeFrame = new JFrame ( `` Fake Frame '' ) ; fakeFrame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; fakeFrame.getContentPane ( ) .setLayout ( new BorderLayout ( ) ) ; JButton btnOpen = new JButton ( `` Open Dialog '' ) ; fakeFrame.getContentPane ( ) .add ( btnOpen , BorderLayout.CENTER ) ; fakeFrame.pack ( ) ; fakeFrame.setLocationRelativeTo ( null ) ; //Generate the test dialog final JDialogTest dialog = new JDialogTest ( fakeFrame ) ; dialog.addComponentListener ( new ComponentAdapter ( ) { @ Override public void componentShown ( ComponentEvent e ) { System.out.println ( `` Component Shown '' ) ; } @ Override public void componentHidden ( ComponentEvent e ) { System.out.println ( `` Component Hidden '' ) ; } } ) ; dialog.addWindowListener ( new WindowAdapter ( ) { @ Override public void windowOpened ( WindowEvent e ) { System.out.println ( `` Window open '' ) ; } @ Override public void windowClosed ( WindowEvent e ) { System.out.println ( `` Window closed '' ) ; } } ) ; dialog.setLocationRelativeTo ( null ) ; btnOpen.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { dialog.setVisible ( true ) ; } } ) ; fakeFrame.setVisible ( true ) ; } }"
"@ State ( Scope.Thread ) @ BenchmarkMode ( org.openjdk.jmh.annotations.Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) public class MeasureSpeedModuleVsAnd { public static void main ( String [ ] args ) throws Exception { Options opt = new OptionsBuilder ( ) .include ( MeasureSpeedModuleVsAnd.class.getSimpleName ( ) ) .forks ( 1 ) .warmupIterations ( 1 ) .measurementIterations ( 5 ) .warmupTime ( TimeValue.seconds ( 2 ) ) .build ( ) ; new Runner ( opt ) .run ( ) ; } @ Param ( { `` 16 '' , `` 32 '' , `` 256 '' , `` 1048576 '' /* 2 power of 10 */ } ) public int number_of_buckets ; @ Param ( { `` 345984 '' , `` 123456 '' , `` 111 '' , `` 98653 '' } ) public int hashcode ; @ Benchmark public int benchamark_modulo ( ) { return hashcode % number_of_buckets ; } @ Benchmark public int benchmark_and ( ) { return ( number_of_buckets - 1 ) & hashcode ; } }"
/** * Defend against malicious streams . * * @ param s the stream to read * @ throws InvalidObjectException always */private void readObject ( ObjectInputStream s ) throws InvalidObjectException { throw new InvalidObjectException ( `` Deserialization via serialization delegate '' ) ; }
"String sb = `` FEES > 200 '' ; List < String > ls = sb.split ( `` > | > =| < | < =| < > |= '' ) ; System.out.println ( `` Splitted Strings : `` +s ) ; Splitted strings : [ FEES , 200 ] Splitted strings : [ FEES , 200 ] Splitted Relational Operator : >"
"var s = Set ( 1 , 2 , 3 ) var t = s + 4var x = s | t import scala.collection.Set ; Set < Integer > s = new Set < Integer > ( ) ; Set < Integer > t = s. $ plus ( 4 ) ; /* compile error with javac , or runtime error with eclipse/*"
"package org.example ; import org.example.Type ; import java.awt.Frame ; public class Foo extends Frame { public Foo ( ) { System.out.println ( Type.BAZ ) ; // < === error here , BAZ can not be resolved } } package org.example ; public class Type { public static final int BAZ = 1 ; }"
Runtime.getRuntime ( ) .exec ( `` telnet localhost 5554 '' ) ; Process proc= Runtime.getRuntime ( ) .exec ( `` kill '' ) ; BufferedReader r = new BufferedReader ( new InputStreamReader ( proc.getInputStream ( ) ) ) ; System.out.println ( `` executed3 '' ) ; String line ; while ( true ) { line = r.readLine ( ) ; if ( line == null ) { break ; } System.out.println ( line ) ; }
public interface Service { ... } public class ServiceBase < T extends Service > implements Service { ... } public class MyService extends ServiceBase < MyService > { ... }
package com.demo ; import java.util.HashSet ; import java.util.Set ; public class Test { public static void main ( String [ ] args ) { Set < Short > set=new HashSet < Short > ( ) ; for ( short i = 0 ; i < 10 ; i++ ) { set.add ( i ) ; set.remove ( i-1 ) ; } System.out.println ( set.size ( ) ) ; } }
( ) - > { throw new RuntimeException ( `` FIXME '' ) ; }
"public class Filter { public String field ; public ConditionalOperator operator ; public String value ; } Employees FirstName LastName CreatedOn ( Timestamp ) Status ( FullTime/ parttime ) IsActive ( True / False ) Filter conditions will be looking like [ { `` field '' : '' FirstName '' , `` operator '' : '' StartsWith '' , `` value '' : '' john '' } ] Predicate < Employees > filter = e - > e.FirstName.StartsWith ( `` john '' ) ; Class < ? > cls = Employees.class ; Class < ? > noparams [ ] = { } ; try { Method method = cls.getDeclaredMethod ( `` get '' + filter.getField ( ) , noparams ) ; Predicate < ExecutionReport > first = e - > { try { Object val = method.invoke ( e ) ; System.out.println ( val ) ; return method.invoke ( e ) .toString ( ) .startsWith ( filter.getField ( ) ) ; } catch ( IllegalAccessException illegalAccessException ) { illegalAccessException.printStackTrace ( ) ; } catch ( InvocationTargetException invocationTargetException ) { invocationTargetException.printStackTrace ( ) ; } return false ; } ; return first ; } catch ( NoSuchMethodException e ) { e.printStackTrace ( ) ; }"
"Favorites f = new Favorites ( ) ; f.putFavorite ( String.class , `` Java '' ) ; String someString = f.getFavorite ( String.class ) ; public Set < Class < ? > > keySet ( ) { return favorites.keySet ( ) ; } for ( Class < ? > klass : f.keySet ( ) ) { // f.getFavorite ( klass ) . < SOME_METHOD_SPECIFIC_TO_THE_CLASS-KEY > }"
pointcut log ( ) : execution ( @ Log * * ( .. ) ) ; before ( ) : log ( ) { String [ ] names = ( ( CodeSignature ) thisJoinPoint.getSignature ( ) ) .getParameterNames ( ) ; }
Predicate < Integer > predicate = Predicate.isEqual ( 0 ) .or ( Predicate.isEqual ( 1 ) ) ; Predicate < Integer > pred21 = Predicate.isEqual ( 0 ) ; Predicate < Integer > pred22 = pred21.or ( Predicate.isEqual ( 1 ) ) ;
"< dependency > < groupId > org.mongodb < /groupId > < artifactId > mongo-java-driver < /artifactId > < version > 3.8.0 < /version > < /dependency > { `` v '' : 2 , `` key '' : { `` version '' : 1 } , `` name '' : `` version_1 '' , `` ns '' : `` db.sysversion '' , `` collation '' : { `` locale '' : `` en '' , `` caseLevel '' : false , `` caseFirst '' : `` off '' , `` strength '' : 3 , `` numericOrdering '' : true , `` alternate '' : `` non-ignorable '' , `` maxVariable '' : `` punct '' , `` normalization '' : false , `` backwards '' : false , `` version '' : `` 57.1 '' } } Collation collation = Collation.builder ( ) .locale ( `` en '' ) .numericOrdering ( true ) .build ( ) ; ArrayList < Document > response = new ArrayList < > ( ) ; ArrayList < Bson > aggregate = new ArrayList < Bson > ( Arrays.asList ( match ( gt ( `` version '' , `` 1.9.4 '' ) ) , sort ( descending ( `` version '' ) ) , project ( fields ( include ( `` version '' ) , exclude ( `` _id '' ) ) ) ) ) ; this.database.getCollection ( sysversion ) .aggregate ( aggregate ) .collation ( collation ) .into ( response ) ; return new Document ( `` version '' , response ) ; { `` version '' : [ { `` version '' : `` \u000f\u0003\b\u000f\f\b\u000f\u0003\u0001\t\u0001\t '' } , { `` version '' : `` \u000f\u0003\b\u000f\f\b\u000f\u0002\u0001\t\u0001\t '' } ] } { version : [ { `` version '' : `` 1.10.1 '' } , { `` version '' : `` 1.10.0 '' } ] }"
"if ( _logger.isDebugEnabled ) _logger.debug ( `` Interesting , my foojes are goofed up : `` + getFullDetails ( ) )"
public class NewClass { public static void main ( String [ ] args ) { Object obj = null ; myMethod ( obj ) ; } public static void myMethod ( Object ... objArr ) { if ( objArr ! = null ) { System.out.println ( `` I am not null '' ) ; } } }
switch ( expression ) { case num1 : System.out.println ( `` Case A '' ) ; case num2 : System.out.println ( `` Case B '' ) ; }
"System.setProperty ( `` line.separator '' , `` \n '' ) ; String s=String.format ( `` % n '' ) ; boolean b= '' \n '' .equals ( s ) ;"
"0 0 1 0 00 0 1 0 0 1 1 1 0 0 0 0 0 0 00 0 0 0 0 0 0 0 1 01 1 0 1 00 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 10 1 0 1 00 0 1 0 0 0 0 0 0 0 0 0 0 0 0 class Rotation { public Rotation ( ) { A = new int [ xs , ys ] { { 0,0,0,9,0,0,0 } , { 0,0,0,9,0,0,0 } , { 0,0,0,9,0,0,0 } , { 9,9,9,9,0,0,0 } , { 0,0,0,0,0,0,0 } , { 0,0,0,0,0,0,0 } , { 0,0,0,0,0,0,0 } , } ; B = new int [ xs , ys ] ; deg = ( float ) ( Math.PI / 180.0 ) ; } public const int xs = 7 ; // matrix size public const int ys = 7 ; const int x0 = 3 ; // rotation center cell const int y0 = 3 ; readonly float deg ; public int [ , ] A ; public int [ , ] B ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - public void rotcv ( float ang ) { rotcw ( Rotation.x0 , Rotation.y0 , ang ) ; } private void rotcw ( int x0 , int y0 , float ang ) // rotate A - > B by angle ang around ( x0 , y0 ) CW if ang > 0 { int x , y , ix0 , iy0 , ix1 , iy1 , q ; double xx , yy , fx , fy , c , s ; // circle kernel c = Math.Cos ( -ang ) ; s = Math.Sin ( -ang ) ; // rotate for ( y = 0 ; y < ys ; y++ ) for ( x = 0 ; x < xs ; x++ ) { // offset so ( 0,0 ) is center of rotation xx = x - x0 ; yy = y - y0 ; // rotate ( fx , fy ) by ang fx = ( ( xx * c ) - ( yy * s ) ) ; fy = ( ( xx * s ) + ( yy * c ) ) ; // offset back and convert to ints and weights fx += x0 ; ix0 = ( int ) Math.Floor ( fx ) ; fx -= ix0 ; ix1 = ix0 + 1 ; if ( ix1 > = xs ) ix1 = ix0 ; fy += y0 ; iy0 = ( int ) Math.Floor ( fy ) ; fy -= iy0 ; iy1 = iy0 + 1 ; if ( iy1 > = ys ) iy1 = iy0 ; // bilinear interpolation A [ fx ] [ fy ] - > B [ x ] [ y ] if ( ( ix0 > = 0 ) & & ( ix0 < xs ) & & ( iy0 > = 0 ) & & ( iy0 < ys ) ) { xx = ( A [ ix0 , iy0 ] ) + ( ( A [ ix1 , iy0 ] - A [ ix0 , iy0 ] ) * fx ) ; yy = ( A [ ix0 , iy0 ] ) + ( ( A [ ix1 , iy0 ] - A [ ix0 , iy0 ] ) * fx ) ; xx = xx + ( ( yy - xx ) * fy ) ; q = ( int ) xx ; } else q = 0 ; B [ x , y ] = q ; } } } static void Main ( string [ ] args ) { Rotation rot = new Rotation ( ) ; for ( int x = 0 ; x < Rotation.xs ; x++ ) { for ( int y = 0 ; y < Rotation.xs ; y++ ) { Console.Write ( rot.A [ x , y ] + `` `` ) ; } Console.WriteLine ( ) ; } Console.WriteLine ( ) ; float rotAngle = 0 ; while ( true ) { rotAngle += ( float ) ( Math.PI/180f ) *90 ; rot.rotcv ( rotAngle ) ; for ( int x = 0 ; x < Rotation.xs ; x++ ) { for ( int y = 0 ; y < Rotation.xs ; y++ ) { Console.Write ( rot.B [ x , y ] + `` `` ) ; } Console.WriteLine ( ) ; } Console.WriteLine ( ) ; Console.ReadLine ( ) ; } }"
"public class Validate { public final static void stateNotNull ( final Object object , final String message ) { if ( message == null ) { throw new IllegalArgumentException ( `` Exception message is a null object ! `` ) ; } if ( object == null ) { throw new IllegalStateException ( message ) ; } } import static org.mockito.Matchers.anyString ; import static org.mockito.Matchers.isNull ; import org.junit.Before ; import org.junit.runner.RunWith ; import org.powermock.api.mockito.PowerMockito ; import org.powermock.core.classloader.annotations.PrepareForTest ; import org.powermock.modules.junit4.PowerMockRunner ; import org.testng.annotations.Test ; @ RunWith ( PowerMockRunner.class ) @ PrepareForTest ( Validate.class ) public class ValidateTestCase { @ Test ( expectedExceptions = { IllegalStateException.class } ) public void stateNotNullTest ( ) throws Exception { PowerMockito.mockStatic ( Validate.class ) ; Validate mock = PowerMockito.mock ( Validate.class ) ; PowerMockito.doThrow ( new IllegalStateException ( ) ) .when ( mock ) .stateNotNull ( isNull ( ) , anyString ( ) ) ; Validate.stateNotNull ( null , null ) ; } }"
"40 24 fa fa 01 c2 c5 25 03 06 01 43 a4 99 5a c185 71 0c 87 38 84 53 9a 80 6c 5a 14 da f8 ff 7c21 83 8f 78 8e ec f2 7d 4e 4e 07 31 19 10 07 01 13 51 25 09 01 00 00 00 00 33 0400 00 5A 00 00 00 EB 0D 00 00 64 EB package org.thethingsnetwork.main.java.org.thethingsnetwork.util.security ; import java.util.Base64 ; import javax.crypto.Cipher ; import javax.crypto.spec.SecretKeySpec ; public class Crypto { /** * Decrypts TTN data_raw payload to data according to the TTN REST API . * @ param pld encrypted message payload from ttn mqtt message * @ param K the TTN application key * @ param IV * @ return decrypted payload * @ throws Exception */ public static byte [ ] decrypt ( byte [ ] pld , byte [ ] K , byte [ ] IV ) throws Exception { byte [ ] devAddr = getDevAddr ( pld ) ; byte [ ] frameCounter = getFrameCounter ( pld ) ; byte [ ] result = initializeResult ( pld ) ; byte [ ] Ai = new byte [ 16 ] ; byte [ ] Si = null ; for ( int i = 0 ; i < result.length ; i += 16 ) { int blockSeqCnt = ( i > > 4 ) + 1 ; computeAi ( Ai , devAddr , frameCounter , blockSeqCnt ) ; Si = encryptAES ( Ai , K , IV ) ; for ( int j=0 ; j < 16 & & i+j < result.length ; j++ ) { result [ i+j ] ^= Si [ j ] ; } } return result ; } /** * Converts TTN payload data to data_plain according to the TTN REST API . * Decode a text using base 64 decoding . * @ param decryptedText * @ return */ public static String toPlainText ( String decryptedText ) { byte [ ] data = Base64.getDecoder ( ) .decode ( decryptedText ) ; StringBuffer plain = new StringBuffer ( ) ; for ( int i = 0 ; i < data.length ; i++ ) { plain.append ( ( char ) data [ i ] ) ; } return plain.toString ( ) ; } public static byte [ ] getDevAddr ( byte [ ] payload ) { byte [ ] devAddr = new byte [ 4 ] ; System.arraycopy ( payload , 1 , devAddr , 0 , 4 ) ; return devAddr ; } public static byte [ ] getFrameCounter ( byte [ ] payload ) { byte [ ] frameCounter = new byte [ 2 ] ; System.arraycopy ( payload , 6 , frameCounter , 0 , 2 ) ; return frameCounter ; } public static byte [ ] initializeResult ( byte [ ] payload ) { byte [ ] result = new byte [ payload.length - 13 ] ; for ( int i = 0 ; i < result.length ; i++ ) { result [ i ] = payload [ i+9 ] ; } return result ; } public static void computeAi ( byte [ ] a , byte [ ] devAddr , byte [ ] frameCounter , int blockSeqCnt ) { a [ 0 ] = 0x01 ; a [ 1 ] = 0x00 ; a [ 2 ] = 0x00 ; a [ 3 ] = 0x00 ; a [ 4 ] = 0x00 ; a [ 5 ] = 0 ; // 0 for uplink frames 1 for downlink frames ; a [ 6 ] = devAddr [ 0 ] ; // LSB devAddr 4 bytes a [ 7 ] = devAddr [ 1 ] ; // .. a [ 8 ] = devAddr [ 2 ] ; // .. a [ 9 ] = devAddr [ 3 ] ; // MSB a [ 10 ] = frameCounter [ 0 ] ; // LSB framecounter a [ 11 ] = frameCounter [ 1 ] ; // MSB framecounter a [ 12 ] = 0x00 ; // Frame counter upper Bytes a [ 13 ] = 0x00 ; a [ 14 ] = 0x00 ; a [ 15 ] = ( byte ) blockSeqCnt ; // block sequence counter 1,2,3 ... } /** * AES encrpytion . */ public static byte [ ] encryptAES ( byte [ ] data , byte [ ] key , byte [ ] iv ) throws Exception { Cipher cipher = Cipher.getInstance ( `` AES/ECB/NoPadding '' , `` SunJCE '' ) ; SecretKeySpec keySpec = new SecretKeySpec ( key , `` AES '' ) ; cipher.init ( Cipher.DECRYPT_MODE , keySpec ) ; return cipher.doFinal ( data ) ; } } package org.thethingsnetwork.util.security ; import org.apache.commons.codec.DecoderException ; import org.junit.Assert ; import org.junit.Test ; import org.thethingsnetwork.main.java.org.thethingsnetwork.util.security.Crypto ; import org.apache.commons.codec.binary.Hex ; public class CryptoTest { private byte [ ] SEMTECH_DEFAULT_KEY = Hex.decodeHex ( `` 2E12E8BD30FE2FB2D8DE609747D2569F '' .toCharArray ( ) ) ; public static final byte [ ] IV = new byte [ ] { 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 } ; // initialization vector – IV // example data from a ttn message public static final byte [ ] TEXT_RAW = new byte [ ] { 0x40 , 0x24 , ( byte ) 0xfa , ( byte ) 0xfa , 0x01 , ( byte ) 0xc2 , ( byte ) 0xc5 , 0x25 , 0x03 , 0x06 , 0x01 , 0x43 , ( byte ) 0xa4 , ( byte ) 0x99 , 0x5a , ( byte ) 0xc1 , ( byte ) 0x85 , 0x71 , 0x0c , ( byte ) 0x87 , 0x38 , ( byte ) 0x84 , 0x53 , ( byte ) 0x9a , ( byte ) 0x80 , 0x6c , 0x5a , 0x14 , ( byte ) 0xda , ( byte ) 0xf8 , ( byte ) 0xff , 0x7c , 0x21 , ( byte ) 0x83 , ( byte ) 0x8f , 0x78 , ( byte ) 0x8e , ( byte ) 0xec , ( byte ) 0xf2 , 0x7d , 0x4e , 0x4e , 0x07 } ; public CryptoTest ( ) throws DecoderException { } @ Test public void testDecoder ( ) throws Exception { byte [ ] decryptedText = Crypto.decrypt ( TEXT_RAW , SEMTECH_DEFAULT_KEY , IV ) ; printTheByteToString ( decryptedText ) ; } /** * Method for prin in command line byte array . For debug necessary * @ param b - input byte array */ private void printTheByteToString ( byte [ ] b ) { for ( byte val : b ) { System.out.print ( String.format ( `` % 02x `` , val ) ) ; } } }"
"import java.io.FileNotFoundException ; import java.util.List ; import java.util.Map ; import java.util.TreeMap ; public class FrequentWords { public static void main ( String [ ] args ) throws FileNotFoundException { String filename = `` SophieSallyJack.txt '' ; if ( args.length == 1 ) { filename = args [ 0 ] ; } Map < String , Integer > wordFrequency = new TreeMap < > ( ) ; List < String > incoming = Utilities.readAFile ( filename ) ; // TODO replace the following loop with a single statement using streams // that populates wordFrequency for ( String word : incoming ) { word = word.toLowerCase ( ) ; if ( ! `` `` .equals ( word.trim ( ) ) ) { Integer cnt = wordFrequency.get ( word ) ; if ( cnt == null ) { wordFrequency.put ( word , 1 ) ; } else { int icnt = cnt + 1 ; wordFrequency.put ( word , icnt ) ; } } } incoming.stream ( ) .collect ( Collectors.toMap ( word - > word , word - > 1 , Integer : :sum ) ) .entrySet ( ) ;"
"import javax.ws.rs.GET ; import javax.ws.rs.Path ; import javax.ws.rs.PathParam ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import org.apache.shiro.authz.annotation.RequiresAuthentication ; import org.apache.shiro.authz.annotation.RequiresRoles ; import io.swagger.annotations.Api ; import io.swagger.annotations.ApiOperation ; @ Path ( `` /authhello '' ) @ Api ( value = `` hello '' , description = `` Simple endpoints for testing api authentification '' , hidden = true ) @ Produces ( MediaType.APPLICATION_JSON ) @ RequiresAuthenticationpublic class AuthenticatedHelloWorldResource { private static final String READ = `` READ '' ; private static final String WRITE = `` WRITE '' ; @ GET @ ApiOperation ( value = `` helloworld '' , notes = `` Simple hello world . `` , response = String.class ) @ RequiresRoles ( READ ) public Response helloWorld ( ) { String hello = `` Hello world ! `` ; return Response.status ( Response.Status.OK ) .entity ( hello ) .build ( ) ; } @ GET @ Path ( `` / { param } '' ) @ ApiOperation ( value = `` helloReply '' , notes = `` Returns Hello you ! and { param } '' , response = String.class ) @ RequiresRoles ( WRITE ) public Response getMsg ( @ PathParam ( `` param '' ) String msg ) { String output = `` Hello you ! `` + msg ; return Response.status ( Response.Status.OK ) .entity ( output ) .build ( ) ; } } import javax.ws.rs.core.Application ; import org.glassfish.jersey.server.ResourceConfig ; import org.junit.Test ; import com.cognite.api.shiro.AbstractShiroTest ; import static org.junit.Assert.assertEquals ; public class AuthenticatedHelloWorldTest extends AbstractShiroTest { @ Override protected Application configure ( ) { return new ResourceConfig ( AuthenticatedHelloWorldResource.class ) ; } @ Test public void testAuthenticatedReadHelloWorld ( ) { final String hello = target ( `` /authhello '' ) .request ( ) .get ( String.class ) ; assertEquals ( `` Hello world ! `` , hello ) ; } @ Test public void testAuthenticatedWriteHelloWorld ( ) { final String hello = target ( `` /authhello/test '' ) .request ( ) .get ( String.class ) ; assertEquals ( `` Hello you ! test '' , hello ) ; } }"
"private void createNewOrientDatabase ( ) { String dbPath = `` plocal : ./db/test '' ; orientDatabase = new ODatabaseDocumentTx ( dbPath ) .create ( ) ; } public void createClasses ( Table t ) { if ( orientDatabase.getMetadata ( ) .getSchema ( ) .getClass ( t.getName ( ) ) == null ) { orientDatabase.getMetadata ( ) .getSchema ( ) .createClass ( t.getName ( ) ) ; } } public void insertData ( Table table , TableSource data ) { for ( String s : data ) { ODocument document = new ODocument ( table.getName ( ) ) ; String [ ] parts = s.split ( `` , '' ) ; for ( int i = 0 ; i < table.getColumns ( ) .size ( ) ; ++i ) { document.field ( table.getColumns ( ) .get ( i ) .getName ( ) , parts [ i ] ) ; } document.save ( ) ; } }"
@ FunctionalInterfaceinterface PersonInterface { String getName ( ) ; } class Person implements PersonInterface { private String name ; public Person ( String name ) { this.name = name ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } Person p = new Person ( `` Bob '' ) ; Supplier < String > f = p : :getName ; p = null ; System.out.println ( f.get ( ) ) ; Person p = new Person ( `` Bob '' ) ; Supplier < String > f = p : :getName ; p.setName ( `` Alice '' ) ; System.out.println ( f.get ( ) ) ; Person p1 = new Person ( `` Bob '' ) ; Person p2 = p1 ; Supplier < String > f1 = p1 : :getName ; Supplier < String > f2 = p2 : :getName ; p1 = null ; p2.setName ( `` Alice '' ) ; System.out.println ( f1.get ( ) ) ; System.out.println ( f2.get ( ) ) ;
private Object sync = new Object ( ) ; public void methodA ( ) throws InterruptedException { synchronized ( this.sync ) { Thread.sleep ( 1000 ) ; } } public void methodB ( ) throws InterruptedException { synchronized ( this.sync ) { this.methodA ( ) ; } }
"public static < T > Collector < T , ? , List < T > > toList ( ) { return new Collectors.CollectorImpl < > ( ( Supplier < List < T > > ) ArrayList : :new , List : :add , ( left , right ) - > { left.addAll ( right ) ; return left ; } , Collectors.CH_ID ) ; } Wrong number of type arguments : 2 ; required : 3 Incompatible types.Required : Collector < T , List < T > , > Found : CollectorImpl < java.lang.Object , List < T > , java.lang.Object > List : :add – Can not resolve method 'add'left.addAll – Can not resolve method 'addAll ( java.lang.Object ) ' List – public abstract boolean add ( T e ) List – public abstract boolean addAll ( Collection < ? extends T > c )"
"private void addFile ( File f , final ZipOutputStream out , final Set < String > entryNames ) { ZipFile source = getZipFileFromFile ( f ) ; source.stream ( ) .forEach ( ExceptionWrapper.wrapConsumer ( e - > addEntryContent ( out , source , e , entryNames ) ) ) ; } public static < T > Consumer < T > wrapConsumer ( ConsumerWrapper < T > consumer ) { return t - > { try { consumer.accept ( t ) ; } catch ( Exception e ) { throw new IllegalStateException ( e ) ; } } ; } public interface ConsumerWrapper < T > { void accept ( T t ) throws Exception ; } Error : ( 128 , 62 ) java : incompatible types : java.util.function.Consumer < capture # 1 of ? extends java.util.zip.ZipEntry > can not be converted to java.util.function.Consumer < ? super capture # 1 of ? extends java.util.zip.ZipEntry > Error : ( 128 , 97 ) java : incompatible types : java.lang.Object can not be converted to java.util.zip.ZipEntry private void addFile ( File f , final ZipOutputStream out , final Set < String > entryNames ) { ZipFile source = getZipFileFromFile ( f ) ; Consumer < ZipEntry > consumer = ExceptionWrapper.wrapConsumer ( e - > addEntryContent ( out , source , e , entryNames ) ) ; source.stream ( ) .forEach ( consumer ) ; } private void addEntryContent ( final ZipOutputStream out , final ZipFile source , final ZipEntry entry , final Set < String > entryNames ) throws IOException {"
String concatenated = str2 + `` a_literal_string '' ;
private ArrayList < Integer > mPhotos = new ArrayList < Integer > ( ) ; private List < Integer > mPhotos = new ArrayList < Integer > ( ) ;
"import java.util.Comparator ; public class ObjectComparator implements Comparator < Object > { public int compare ( Object o1 , Object o2 ) { return o1.hashCode ( ) - o2.hashCode ( ) ; } }"
"containerSubscriber = new ContainerSubscriber ( `` urn : IciContainerInterface '' , `` IciContainerService '' , `` http : // < client_address > /oii/icicontainerservice.asmx ? wsdl '' ) ; IciContainerServiceSoap port = containerSubscriber.getPort ( ) ; com.dvsoft.sap.containerici.client.SubscribeResponseResponse response = port.subscribe ( appURL , appIdContainer , `` 1 '' , container ) ; public class ContainerSubscriber { private QName SERVICE_NAME ; private String wsdlurl ; public ContainerSubscriber ( String namespaceURI , String localPart , String wsdlurl ) { this.wsdlurl = wsdlurl ; SERVICE_NAME = new QName ( namespaceURI , localPart ) ; } public IciContainerServiceSoap getPort ( ) { IciContainerServiceSoap port = null ; try { URL wsdlURL ; wsdlURL = new URL ( wsdlurl ) ; IciContainerService service = new IciContainerService ( wsdlURL , SERVICE_NAME ) ; port = service.getIciContainerServiceSoap ( ) ; } catch ( MalformedURLException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( Exception e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } return port ; } }"
int x=-3 ; System.out.println ( x -- -- -x ) ; int x=-3 ; System.out.println ( x -- - -- x ) ;
"CloudSocket.init ( cloudUrl ) ; CloudApp.init ( appId , appKey ) ;"
Automobile - Bus - Minibus - Doubledecker - Electricbus - Car - Sedan - Hatchback - Coupe - Truck - Minivan - Pickuptruck - Suv - Fullsuv - Midsuv import java.util.ArrayList ; import java.util.List ; public class Garage { public static void main ( String [ ] args ) { List < ? super Suv > list = null ; Suv s = new Suv ( ) ; Truck t = new Truck ( ) ; Automobile a = new Automobile ( ) ; list = new ArrayList < Suv > ( ) ; list.add ( s ) ; // declared as List < ? super Suv > but actually List < Suv > . No compilation error list = new ArrayList < Truck > ( ) ; list.add ( t ) ; // declared as List < ? super Suv > but actually List < Truck > . Compilation error list = new ArrayList < Automobile > ( ) ; list.add ( a ) ; // declared as List < ? super Suv > but actually List < Automobile > . Compilation error } }
public class EnclosingClass { public class InnerClass { private EnclosingClass getEnclosing ( ) { return EnclosingClass.this ; } public class InnerInnerClass { private InnerClass getEnclosing ( ) { return InnerClass.this ; } private EnclosingClass getEnclosingOfEnclosing ( ) { return EnclosingClass.this ; } } } }
"int [ ] a = new int [ ] { 9 , 8 , 3 , 1 , 5 , 4 } ; for ( int i = 0 ; i < a.length ; i++ ) { if ( a [ i ] % 2 == 0 ) { a [ i ] += 1 ; } else if ( a [ i ] < a.length ) { a [ i ] += a [ a [ i ] ] ; } }"
class A { A ( ) { print ( ) ; } void print ( ) { System.out.println ( `` A '' ) ; } } class B extends A { int i = Math.round ( 3.5f ) ; public static void main ( String [ ] args ) { A a = new B ( ) ; a.print ( ) ; } void print ( ) { System.out.println ( i ) ; } } class A { internal A ( ) { print ( ) ; } virtual internal void print ( ) { Console.WriteLine ( `` A '' ) ; } } class B : A { int i = ( int ) Math.Round ( 3.5f ) ; public static void Main ( string [ ] args ) { A a = new B ( ) ; a.print ( ) ; } override internal void print ( ) { Console.WriteLine ( i ) ; } }
interface ITest { void Test ( ) ; } class Test { void Test ( ) { } } void main ( ) { ITest x ; x = new Test ; }
"final boolean accessOrder ; //if accessOrder were set as true , after you visit node e , if e is not the end node of the linked list , //it will move the node to the end of the linkedlist . void afterNodeAccess ( Node < K , V > e ) { LinkedHashMap.Entry < K , V > last ; if ( accessOrder & & ( last = tail ) ! = e ) { //if enter ` if ` ，it indicates that e is not the end of the linked list , because ( last=tail ! =e ) //then ` a ` as the after node of p ( p is e after casting to LinkedHashMap.Entry ) is never gon na be null . Only if p is last node of the linked list then a will be null . LinkedHashMap.Entry < K , V > p = ( LinkedHashMap.Entry < K , V > ) e , b = p.before , a = p.after ; p.after = null ; if ( b == null ) { head = a ; } else { b.after = a ; } // Is the if else clasue redundant ? ` a ` must not be null.. the else clase will never be excuted . if ( a ! = null ) { a.before = b ; } else { last = b ; } if ( last == null ) { head = p ; } else { p.before = last ; last.after = p ; } tail = p ; ++modCount ; } } // Is the if else clasue redundant ? ` a ` must not be null.. the else clase will never be excuted . if ( a ! = null ) { a.before = b ; } else { last = b ; }"
"HashMap < String , Double > x = new HashMap < String , Double > ( ) ; library ( rJava ) .jinit ( ) # this works but gives me a < String , String > hashmapx < - .jnew ( `` java/util/HashMap '' ) .jrcall ( x , `` put '' , `` a '' , `` 1 '' ) x # > [ 1 ] `` Java-Object { { a=1 } } '' # failing example of what I 'd like to do.jrcall ( x , `` put '' , `` b '' , 2 ) # > Error in .jcall ( `` RJavaTools '' , `` Ljava/lang/Object ; '' , `` invokeMethod '' , cl , : # > java.lang.NoSuchMethodException : No suitable method for the given parameters .jcall ( `` java/util/HashMap '' , `` Ljava/util/HashMap ; [ Ljava/lang/String ; Ljava/lang/Double ; '' , `` < init > '' ) # > Error in .jcall ( `` java/util/HashMap '' , `` Ljava/util/HashMap ; # > [ Ljava/lang/String ; Ljava/lang/Double ; '' , : # > method < init > with signature ( ) Ljava/util/HashMap ; # > [ Ljava/lang/String ; Ljava/lang/Double ; not found"
"private static boolean condition ( int n ) { int i = 0 ; while ( n > = i ) { if ( n == i*4 || n == ( i*4 - 1 ) ) return true ; i++ ; } return false ; } public static double recursiveVal ( int x , int y , double A , double B ) { if ( x > 6 & & ( x- 2 > = y ) ) { return 1 ; } if ( y > 6 & & ( y- 2 > = x ) ) { return 0 ; } if ( x > 5 & & y > 5 & & x== y ) { return ( A* ( 1-B ) / ( 1 - ( A*B ) - ( ( 1-A ) * ( 1-B ) ) ) ) ; } if ( condition ( x+ y ) ) { return ( recursiveVal ( x+1 , y , A , B ) *A + recursiveVal ( x , y+1 , A , B ) * ( 1-A ) ) ; } else { return ( recursiveVal ( x+1 , y , A , B ) * ( 1-B ) + recursiveVal ( x , y+1 , A , B ) *B ) ; } }"
"Object value = attValue.getValue ( ) ; // Returns an Object , might contain an Integer if ( value instanceof Integer ) { if ( mAccount.getValue ( ) ! = value ) { // mAccount.getValue ( ) return int // Do something here } }"
num # instances # bytes class name -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1 : 395984 32564344 [ C 2 : 388697 9328728 java.lang.String 3 : 61258 5915088 [ B 4 : 100297 4814256 java.util.HashMap 5 : 50892 4478496 org.apache.catalina.session.StandardSession 6 : 58774 3656824 [ Ljava.util.HashMap $ Node ; 7 : 84773 3390920 java.util.TreeMap $ Entry 8 : 51522 3339304 [ Ljava.util.Hashtable $ Entry ; 9 : 51834 3317376 java.util.concurrent.ConcurrentHashMap 10 : 102111 3267552 java.util.HashMap $ Node 11 : 96256 3080192 java.util.concurrent.ConcurrentHashMap $ Node 12 : 24101 2754560 [ Ljava.util.concurrent.ConcurrentHashMap $ Node ; 13 : 51472 2470656 java.util.Hashtable 14 : 55102 2204080 java.util.LinkedHashMap $ Entry 15 : 83020 1992480 java.util.ArrayList 16 : 34353 1923768 java.util.LinkedHashMap 17 : 59156 1892992 org.springframework.boot.loader.util.AsciiBytes 18 : 29574 1656144 org.springframework.boot.loader.jar.JarEntryData 19 : 18029 1586552 java.lang.reflect.Method 20 : 28391 1562080 [ Ljava.lang.Object ; 21 : 37178 1487120 java.lang.ref.SoftReference 22 : 47648 1446600 [ I 23 : 52337 1256088 java.lang.Long 24 : 26134 1254432 java.util.TreeMap 25 : 50904 1221696 java.beans.PropertyChangeSupport 26 : 11777 1214464 java.lang.Class 27 : 23748 1139904 org.springframework.security.oauth2.provider.OAuth2Request 28 : 35994 863856 java.util.Collections $ UnmodifiableRandomAccessList 29 : 50904 814464 java.beans.PropertyChangeSupport $ PropertyChangeListenerMap 30 : 50892 814272 org.apache.catalina.session.StandardSessionFacade 31 : 49748 795968 java.util.HashSet 32 : 24066 770112 java.util.Collections $ UnmodifiableMap 33 : 23748 759936 org.springframework.security.oauth2.provider.OAuth2Authentication 34 : 23748 759936 org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails 35 : 26000 624000 javax.management.openmbean.CompositeDataSupport 36 : 12015 576664 [ Ljava.lang.String ; 37 : 16319 522208 com.sun.org.apache.xerces.internal.xni.QName 38 : 15288 489216 java.lang.ref.WeakReference 39 : 26448 423168 java.util.LinkedHashSet 40 : 26011 416176 java.util.TreeMap $ KeySet -XX : +PrintGCDetails -XX : +PrintGCTimeStamps -Xloggc : gc.log -verbose : gc
"private static < T extends Comparable < T > > T max ( List < T > l , int i , int j ) { List < T > sublist = l.subList ( i , j ) ; System.out.println ( `` Sublist `` +sublist ) ; int c = 0 ; T max = null ; for ( T elem : sublist ) { if ( c == 0 || max.compareTo ( elem ) < 0 ) { max = elem ; } ++c ; } return max ; } public static < T extends Object & Comparable < ? super T > > T max ( List < ? extends T > list , int begin , int end ) { T maxElem = list.get ( begin ) ; for ( ++begin ; begin < end ; ++begin ) if ( maxElem.compareTo ( list.get ( begin ) ) < 0 ) maxElem = list.get ( begin ) ; return maxElem ; }"
"Map < String , String > map = new HashMap < > ( ) ; map.put ( `` one '' , null ) ; map.put ( `` two '' , null ) ; map.put ( `` three '' , `` THREE '' ) ; Iterator iterator = map.values ( ) .iterator ( ) ; while ( iterator.hasNext ( ) ) { if ( iterator.next ( ) == null ) { iterator.remove ( ) ; } } for ( Map.Entry < String , String > e : map.entrySet ( ) ) { System.out.println ( e.getKey ( ) + `` : '' + e.getValue ( ) ) ; }"
action 1action 2synchronized ( monitorObject ) { //acquire action 3 } //releaseaction 4 /* 1 */ synchronized ( syncA ) { /* 2 */ x = 1 ; /* 3 */ } /* 4 */ y = 0 ; /* 5 */ synchronized ( syncB ) { /* 6 */ y = 1 ; /* 7 */ } y = 0 ; synchronized ( syncB ) { y = 1 ; synchronized ( syncA ) { x = 1 ; } }
"import java.util.Random ; public class LifeMatrix { Cell [ ] [ ] mat ; public Action currentAction = Action.WAIT_FOR_COMMAND ; public Action changeAction ; public enum Action { CHECK_NEIGHBORS_STATE , CHANGE_LIFE_STATE , WAIT_FOR_COMMAND } // creates a life matrix with all cells alive or dead or random between dead or alive public LifeMatrix ( int length , int width ) { mat = new Cell [ length ] [ width ] ; for ( int i = 0 ; i < length ; i++ ) { // populate the matrix with cells randomly alive or dead for ( int j = 0 ; j < width ; j++ ) { mat [ i ] [ j ] = new Cell ( this , i , j , ( new Random ( ) ) .nextBoolean ( ) ) ; mat [ i ] [ j ] .start ( ) ; } } } public boolean isValidMatrixAddress ( int x , int y ) { return x > = 0 & & x < mat.length & & y > = 0 & & y < mat [ x ] .length ; } public int getAliveNeighborsOf ( int x , int y ) { return mat [ x ] [ y ] .getAliveNeighbors ( ) ; } public String toString ( ) { String res = `` '' ; for ( int i = 0 ; i < mat.length ; i++ ) { // populate the matrix with cells randomly alive or // dead for ( int j = 0 ; j < mat [ i ] .length ; j++ ) { res += ( mat [ i ] [ j ] .getAlive ( ) ? `` + '' : `` - '' ) + `` `` ; } res += `` \n '' ; } return res ; } public void changeAction ( Action a ) { // TODO Auto-generated method stub currentAction=a ; notifyAll ( ) ; //NOTIFY WHO ? ? } } /** * Class Cell represents one cell in a life matrix */public class Cell extends Thread { private LifeMatrix ownerLifeMat ; // the matrix owner of the cell private boolean alive ; private int xCoordinate , yCoordinate ; public void run ( ) { boolean newAlive ; while ( true ) { while ( ! ( ownerLifeMat.currentAction==Action.CHECK_NEIGHBORS_STATE ) ) { synchronized ( this ) { //TODO to check if correct try { wait ( ) ; } catch ( InterruptedException e ) { System.out.println ( `` Interrupted while waiting to check neighbors '' ) ; } } } // now check neighbors newAlive = decideNewLifeState ( ) ; // wait for all threads to finish checking their neighbors while ( ! ( ownerLifeMat.currentAction == Action.CHANGE_LIFE_STATE ) ) { try { wait ( ) ; } catch ( InterruptedException e ) { System.out.println ( `` Interrupted while waiting to change life state '' ) ; } ; } // all threads finished checking neighbors now change life state alive = newAlive ; } } // checking the state of neighbors and // returns true if next life state will be alive // returns false if next life state will be dead private boolean decideNewLifeState ( ) { if ( alive == false & & getAliveNeighbors ( ) == 3 ) return true ; // birth else if ( alive & & ( getAliveNeighbors ( ) == 0 || getAliveNeighbors ( ) == 1 ) || getAliveNeighbors ( ) > = 4 ) return false ; // death else return alive ; // same state remains } public Cell ( LifeMatrix matLifeOwner , int xCoordinate , int yCoordinate , boolean alive ) { this.ownerLifeMat = matLifeOwner ; this.xCoordinate = xCoordinate ; this.yCoordinate = yCoordinate ; this.alive = alive ; } // copy constructor public Cell ( Cell c , LifeMatrix matOwner ) { this.ownerLifeMat = matOwner ; this.xCoordinate = c.xCoordinate ; this.yCoordinate = c.yCoordinate ; this.alive = c.alive ; } public boolean getAlive ( ) { return alive ; } public void setAlive ( boolean alive ) { this.alive = alive ; } public int getAliveNeighbors ( ) { // returns number of alive neighbors the cell has int res = 0 ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate - 1 , yCoordinate - 1 ) & & ownerLifeMat.mat [ xCoordinate - 1 ] [ yCoordinate - 1 ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate - 1 , yCoordinate ) & & ownerLifeMat.mat [ xCoordinate - 1 ] [ yCoordinate ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate - 1 , yCoordinate + 1 ) & & ownerLifeMat.mat [ xCoordinate - 1 ] [ yCoordinate + 1 ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate , yCoordinate - 1 ) & & ownerLifeMat.mat [ xCoordinate ] [ yCoordinate - 1 ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate , yCoordinate + 1 ) & & ownerLifeMat.mat [ xCoordinate ] [ yCoordinate + 1 ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate + 1 , yCoordinate - 1 ) & & ownerLifeMat.mat [ xCoordinate + 1 ] [ yCoordinate - 1 ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate + 1 , yCoordinate ) & & ownerLifeMat.mat [ xCoordinate + 1 ] [ yCoordinate ] .alive ) res++ ; if ( ownerLifeMat.isValidMatrixAddress ( xCoordinate + 1 , yCoordinate + 1 ) & & ownerLifeMat.mat [ xCoordinate + 1 ] [ yCoordinate + 1 ] .alive ) res++ ; return res ; } } public class LifeGameLaunch { public static void main ( String [ ] args ) { LifeMatrix lifeMat ; int width , length , populate , usersResponse ; boolean userWantsNewGame = true ; while ( userWantsNewGame ) { userWantsNewGame = false ; // in order to finish the program if user presses // `` No '' and not `` Cancel '' width = Integer.parseInt ( JOptionPane.showInputDialog ( `` Welcome to John Conway 's life simulator ! \n '' + `` Please enter WIDTH of the matrix : '' ) ) ; length = Integer.parseInt ( JOptionPane.showInputDialog ( `` Welcome to John Conway 's life simulator ! \n '' + `` Please enter LENGTH of the matrix : '' ) ) ; lifeMat = new LifeMatrix ( length , width ) ; usersResponse = JOptionPane.showConfirmDialog ( null , lifeMat + `` \nNext cycle ? `` ) ; while ( usersResponse == JOptionPane.YES_OPTION ) { if ( usersResponse == JOptionPane.YES_OPTION ) { lifeMat.changeAction ( Action.CHECK_NEIGHBORS_STATE ) ; } else if ( usersResponse == JOptionPane.NO_OPTION ) { return ; } // TODO leave only yes and cancel options usersResponse = JOptionPane.showConfirmDialog ( null , lifeMat + `` \nNext cycle ? `` ) ; } if ( usersResponse == JOptionPane.CANCEL_OPTION ) { userWantsNewGame = true ; } } } }"
"@ ContextConfiguration ( classes= { TestConfig.class } ) @ RunWith ( SpringRunner.class ) @ SpringBootTestpublic class SuncionServiceITTest { @ Test public void should_Find_2 ( ) { // TODO } } @ Configuration @ EnableJpaRepositories ( basePackages = `` com.plats.bruts.repository '' ) @ PropertySource ( `` local-configuration.properties '' ) @ EnableTransactionManagement @ SpringBootApplication ( exclude = { SecurityAutoConfiguration.class } ) public class TestConfig { } spring.datasource.driver-class-name=org.h2.Driverspring.datasource.url=jdbc : h2 : mem : db ; DB_CLOSE_DELAY=-1spring.datasource.username=saspring.datasource.password=sa @ EnableJpaRepositories ( basePackages = `` com.plats.bruts.repository '' , entityManagerFactoryRef= '' emf '' )"
App.getAppStore ( ) .stream ( ) .filter ( o - > { File [ ] listOfFiles = new File ( `` C : /Temp/MyApps/ '' ) .listFiles ( ) ; Object [ ] foo = Arrays.stream ( listOfFiles ) .filter ( x - > x.getName ( ) .contains ( o.getName ( ) ) ) .toArray ( ) ; return true ; } ) .toArray ( ) ; ArrayList < Application > verifiedApps = new ArrayList < verifiedApps > ( ) ; for ( Application app : App.getAppStore ( ) ) { for ( File verifiedApp : new File ( `` C : /Temp/MyApps/ '' ) .listFiles ( ) ) { if ( verifiedApp.getName ( ) .contains ( app.getName ( ) ) verifiedApps.add ( app ) ; } }
if ( choice == 0 ) { Animal A = new Cat ( ) ; } else if ( choice == 1 ) { Animal A = new Dog ( ) ; }
interface X { default int foo ( ) { return 1 ; } String bar ( ) ; } public class Exercise { public static void main ( String [ ] arg ) { X foo1= ( ) - > '' hello '' ; assert ( foo1.bar ( ) ) .equals ( `` hello '' ) ; } }
private String encodingTest = `` Bœuf fûmé '' ;
public class MapOrdering { public static void main ( String [ ] args ) { // TODO Auto-generated method stub List < String > serialStorage = new ArrayList < > ( ) ; System.out.println ( `` Serial stream : '' ) ; int j = 0 ; List < String > listOfIntegers = new ArrayList ( ) ; for ( int i = 0 ; i < 10 ; i++ ) listOfIntegers.add ( String.valueOf ( i ) ) ; listOfIntegers.stream ( ) .parallel ( ) .map ( e - > { serialStorage.add ( e.concat ( String.valueOf ( j ) ) ) ; return e ; } ) .forEachOrdered ( k - > System.out.println ( k ) ) ; ; /* // Do n't do this ! It uses a stateful lambda expression . .map ( e - > { serialStorage.add ( e ) ; return e ; } ) */ for ( String s : serialStorage ) System.out.println ( s ) ; } }
"public class Dummy { public int a = 0 ; public int b = 0 ; public int c = 0 ; public void doSomething ( ) { a += 5 ; b += 5 ; c = b + 5 ; } } public class DummyTest { @ Test public void testDoSomething ( ) { Dummy dummy = new Dummy ( ) ; dummy.doSomething ( ) ; assertEquals ( 10 , dummy.c ) ; } }"
"public static < B > void foo ( List < B > list1 , List < B > list2 ) { } foo ( ImmutableList.of ( ) , ImmutableList.of ( 1 ) ) ; foo ( ImmutableList. < Integer > of ( ) , ImmutableList.of ( 1 ) ) ;"
final s = Files.size ( path ) ; // code that uses s s = 0 ; try { s = Files.size ( ) ; } catch ( IOException e ) { } // code that uses s const s = [ ] ( ) { try { return Files.size ( path ) ; } catch ( ... ) { return 0 ; } } ( ) ; final int s = new IntSupplier ( ) { @ Override public int getAsInt ( ) { try { return Files.size ( path ) ; } catch ( IOException e ) { return 0 ; } } } .getAsInt ( ) ; final int s = ( ) - > { try { return Files.size ( path ) ; } catch ( IOException e ) { return 0 ; } } .apply ( ) ;
// java file// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -class MyBaseClass { public static final class MyInnerClass { public static int SomeValue = 42 ; } } final class MyDerivedClass extends MyBaseClass { } // kotlin file// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -val baseAccess = MyBaseClass.MyInnerClass.SomeValue ; // this compilesval derivedAccess = MyDerivedClass.MyInnerClass.SomeValue ; // ^ compile error : Unresolved reference : MyInnerClass
public class Main { public static void main ( String [ ] args ) { String [ ] names = new String [ 3 ] ; int var3 = 3 ; for ( String name : names ) { System.out.println ( name ) ; } } } //// Source code recreated from a .class file by IntelliJ IDEA// ( powered by Fernflower decompiler ) //public class Main { public Main ( ) { } public static void main ( String [ ] args ) { String [ ] names = new String [ 3 ] ; int var3 = true ; String [ ] var3 = names ; int var4 = names.length ; for ( int var5 = 0 ; var5 < var4 ; ++var5 ) { String name = var3 [ var5 ] ; System.out.println ( name ) ; } } }
notification.flags |= Notification.FLAG_AUTO_CANCEL ;
Foo < ? > hello = new Foo < ? > ( ) ; Foo < Bar < ? > > howdy = new Foo < Bar < ? > > ( ) ; Foo < ? extends Mal > bonjour = new Foo < ? extends Mal > ( ) ;
"public static void main ( String [ ] args ) { HelloWorld app = new HelloWorld ( ) ; System.out.println ( `` say '' ) ; app.print ( ) ; System.out.println ( `` what '' ) ; app.print ( ) ; } saywhathola , world ! hola , world ! Java_HelloWorld_print ( JNIEnv *env , jobject obj ) { printf ( `` hola , world ! \n '' ) ; return ; }"
String str1 = `` Abc '' ; //created in constant poolString str2 = `` XYZ '' ; //created in constant poolString str3 = str1 + str2 ; //created in constant poolString str4 = new String ( `` PQR '' ) ; //created in heapString str5 = str1.concat ( str4 ) ; //created in heap String str6 = str1 + str4 ; //created in heap
"import javafx.application.Application ; import javafx.scene.Scene ; import javafx.scene.layout.BorderPane ; import javafx.scene.layout.HBox ; import javafx.scene.layout.Pane ; import javafx.geometry.Insets ; import javafx.geometry.Pos ; import javafx.stage.Stage ; import javafx.scene.image.Image ; import javafx.scene.image.ImageView ; import java.awt.Button ; import java.io.File ; import java.util.ArrayList ; public class Cards extends Application { public void start ( Stage primaryStage ) { ArrayList < String > cards = new ArrayList < > ( ) ; //Array list Shuffle ( cards ) ; //Shuffles the Cards String file1 = new File ( `` cards '' + `` / '' + cards.get ( 1 ) + `` .png '' ) .toURI ( ) .toString ( ) ; String file2 = new File ( `` cards '' + `` / '' + cards.get ( 2 ) + `` .png '' ) .toURI ( ) .toString ( ) ; String file3 = new File ( `` cards '' + `` / '' + cards.get ( 3 ) + `` .png '' ) .toURI ( ) .toString ( ) ; String file4 = new File ( `` cards '' + `` / '' + cards.get ( 4 ) + `` .png '' ) .toURI ( ) .toString ( ) ; Pane pane = new HBox ( 20 ) ; //Creates the Box for the Images pane.setPadding ( new Insets ( 5 , 5 , 5 , 5 ) ) ; //Spreads the Images out Image image = new Image ( file1 ) ; //Creates the String Image Image image2 = new Image ( file2 ) ; Image image3 = new Image ( file3 ) ; Image image4 = new Image ( file4 ) ; pane.getChildren ( ) .add ( new ImageView ( image ) ) ; //Adds the First Image ImageView view1 = new ImageView ( image ) ; view1.setFitHeight ( 100 ) ; view1.setFitWidth ( 100 ) ; pane.getChildren ( ) .add ( new ImageView ( image2 ) ) ; //Adds the Second Image ImageView view2 = new ImageView ( image2 ) ; view2.setFitHeight ( 100 ) ; view2.setFitWidth ( 100 ) ; pane.getChildren ( ) .add ( new ImageView ( image3 ) ) ; //Add the Third Image ImageView view3 = new ImageView ( image3 ) ; view3.setFitHeight ( 100 ) ; view3.setFitWidth ( 100 ) ; pane.getChildren ( ) .add ( new ImageView ( image4 ) ) ; //Add the Fourth Image ImageView view4 = new ImageView ( image4 ) ; view4.setFitHeight ( 100 ) ; view4.setFitWidth ( 100 ) ; HBox hbox = new HBox ( 5 ) ; //Creates the Box for the Button Button shuffle = new Button ( `` Shuffle '' ) ; //Creates the Button hbox.getChildren ( ) .add ( shuffle ) ; //Should add the button but does n't shuffle.addActionListener ( e - > //Listener for the button { Shuffle ( cards ) ; } ) ; BorderPane pane2 = new BorderPane ( ) ; / /Creates the Pane for the Button pane2.setCenter ( pane ) ; //Sets the cards in the Center pane2.setBottom ( hbox ) ; //Sets the Button on the bottom BorderPane.setAlignment ( hbox , Pos.CENTER ) ; hbox.setAlignment ( Pos.BOTTOM_CENTER ) ; //Aligns the Button to BOT_CENTER Scene scene = new Scene ( pane2 ) ; //Creates the Scene primaryStage.setTitle ( `` Cards '' ) ; primaryStage.setScene ( scene ) ; primaryStage.show ( ) ; } public void Shuffle ( ArrayList < String > cards ) //Allows the cards to Shuffle when called . { for ( int i = 0 ; i < = 53 ; i++ ) //Sets the Number of Cards in Deck cards.add ( String.valueOf ( i+1 ) ) ; java.util.Collections.shuffle ( cards ) ; } public static void main ( String [ ] args ) { launch ( args ) ; } }"
"private ScaleListener mScaleListener ; private ScaleGestureDetector mScaleGestureDetector ; @ Overridepublic boolean onTouchEvent ( MotionEvent event ) { int action = event.getAction ( ) & MotionEvent.ACTION_MASK ; if ( event.getPointerCount ( ) == 2 & & ( action == MotionEvent.ACTION_MOVE || action == MotionEvent.ACTION_POINTER_UP ) ) { if ( mScaleGestureDetector == null ) { mScaleListener = new ScaleListener ( mRecyclerview , mContext ) ; mScaleGestureDetector = new ScaleGestureDetector ( mContext , mScaleListener ) ; } return mScaleGestureDetector.onTouchEvent ( event ) ; } } private void changeTextSize ( float mScaleFactor ) { ... float newFontSize = ( relativeSizeSpan.getSizeChange ( ) * mScaleFactor ) ; ... } public class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener { private static final float MAX_ZOOM = 2.5f ; private static final float MIN_ZOOM = 0.5f ; private float mScaleFactor = 1.0f ; private ImageView mScreenShotView ; private Context mContext ; private View mView ; public ScaleListener ( View mView , Context mContext ) { this.mView = mView ; this.mContext = mContext ; init ( ) ; } private void init ( ) { int mWidth = mView.getWidth ( ) ; int mHeight = mView.getHeight ( ) ; if ( mWidth == 0 || mHeight == 0 ) return ; mScreenShotView = new ImageView ( mContext ) ; mScreenShotView.setLayoutParams ( new ViewGroup.LayoutParams ( mWidth , mHeight ) ) ; ViewGroup mPhysicalParentLayout = ( ViewGroup ) mView.getParent ( ) ; mPhysicalParentLayout.addView ( mScreenShotView , mPhysicalParentLayout.indexOfChild ( mView ) ) ; } @ Override public boolean onScaleBegin ( ScaleGestureDetector detector ) { mScreenShotView.setBackgroundDrawable ( new BitmapDrawable ( Kit.getScreenshot ( mView ) ) ) ; mScreenShotView.setAlpha ( 1f ) ; mView.setAlpha ( 0f ) ; return true ; } @ Override public boolean onScale ( ScaleGestureDetector scaleGestureDetector ) { mScaleFactor *= scaleGestureDetector.getScaleFactor ( ) ; mScaleFactor = Math.max ( MIN_ZOOM , Math.min ( mScaleFactor , MAX_ZOOM ) ) ; mScreenShotView.setScaleX ( mScaleFactor ) ; mScreenShotView.setScaleY ( mScaleFactor ) ; return true ; } @ Override public void onScaleEnd ( ScaleGestureDetector detector ) { ( ( ReadBookRcAdapter ) Objects.requireNonNull ( ( ( RecyclerView ) mView ) .getAdapter ( ) ) ) .changeTextSize ( mScaleFactor ) ; mScreenShotView.animate ( ) .alpha ( 0f ) .setDuration ( 300 ) .setListener ( new AnimatorListenerAdapter ( ) { @ Override public void onAnimationStart ( Animator animation ) { mView.animate ( ) .alpha ( 1f ) .setDuration ( 300 ) .setListener ( null ) ; } @ Override public void onAnimationEnd ( Animator animation ) { mScreenShotView.setScaleX ( 1.0f ) ; mScreenShotView.setScaleY ( 1.0f ) ; mScaleFactor = 1.0f ; } } ) ; } }"
BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter ( ) ; String macAddress = mBluetoothAdapter.getAddress ( ) ;
"private void initialize ( ) { list [ 0 ] [ 0 ] = 2 ; list [ 0 ] [ 1 ] = 4 ; list [ 1 ] [ 0 ] = 3 ; list [ 1 ] [ 1 ] = 7 ; oldList = list ; going ( ) ; } private void going ( ) { for ( int i = 0 ; i < 2 ; i++ ) { for ( int j = 0 ; j < 2 ; j++ ) { Log.i ( `` Log '' , `` oldList = `` + oldList [ i ] [ j ] ) ; } } Log.i ( `` Log '' , `` -- -- -- -- -- -- -- -- -- -- -- -- -- - '' ) ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- list [ 0 ] [ 0 ] = 0 ; list [ 0 ] [ 1 ] = 5 ; list [ 1 ] [ 0 ] = 0 ; list [ 1 ] [ 1 ] = 0 ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- for ( int i = 0 ; i < 2 ; i++ ) { for ( int j = 0 ; j < 2 ; j++ ) { Log.i ( `` Log '' , `` oldList = `` + oldList [ i ] [ j ] ) ; } } } oldList = 2oldList = 4oldList = 3oldList = 7 -- -- -- -- -- -- -- -- -- -- -- -- -- -oldList = 0oldList = 5oldList = 0oldList = 0"
"public static void main ( String [ ] args ) throws Exception { ForkJoinTask < ? > read = ForkJoinPool.commonPool ( ) .submit ( new Runnable ( ) { @ Override public void run ( ) { SecurityManager appsm = System.getSecurityManager ( ) ; if ( appsm ! = null ) { appsm.checkPermission ( new PropertyPermission ( `` os.arch '' , `` read '' ) ) ; System.out.println ( `` Permissions are OK ! ! ! ! `` ) ; } else { System.out.println ( `` No system mangerrr : ( `` ) ; } } } ) ; read.get ( ) ; System.out.println ( `` End of the program ! `` ) ; }"
"< android.support.constraint.ConstraintLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < ! -- Custom SurfaceView Layout -- > < org.firengine.myapp.CustomPreview android : id= '' @ +id/container_content '' android : layout_width= '' 0dp '' android : layout_height= '' 0dp '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' / > < ! -- Header Layout : This is basically a Toolbar , with having a top padding of status bar height ( see Note ) . -- > < FrameLayout android : id= '' @ +id/container_header '' android : layout_width= '' 0dp '' android : layout_height= '' wrap_content '' android : background= '' @ color/colorTint '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' > ... < /FrameLayout > < ! -- Footer Layout - This is just a container , with having a bottom padding of navigation bar height ( see Note ) . -- > < FrameLayout android : id= '' @ +id/container_footer '' android : layout_width= '' 0dp '' android : layout_height= '' wrap_content '' android : background= '' @ color/colorTint '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' > ... < /FrameLayout > < ! -- Input Layout - This is a empty container that shows views dynamically . -- > < LinearLayout android : id= '' @ +id/container_input '' android : layout_width= '' 0dp '' android : layout_height= '' 0dp '' android : gravity= '' bottom|center_horizontal '' android : orientation= '' vertical '' app : layout_constraintBottom_toTopOf= '' @ +id/container_footer '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toBottomOf= '' @ +id/container_header '' / > < /android.support.constraint.ConstraintLayout > public class CustomPreview extends SurfaceView implements SurfaceHolder.Callback { private final Handler handler = new Handler ( ) ; private final Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { draw ( ) ; } } ; private Renderer renderer ; private boolean visible ; private boolean canLoadData ; private HashMap < String , String > data ; public CustomPreview ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; getHolder ( ) .addCallback ( this ) ; getHolder ( ) .setFormat ( PixelFormat.RGBA_8888 ) ; visible = false ; canLoadData = false ; renderer= new Renderer ( context ) ; data = new HashMap < > ( ) ; } @ Override public void surfaceCreated ( SurfaceHolder holder ) { visible = true ; refreshHandler ( 0 ) ; } @ Override public void surfaceChanged ( SurfaceHolder holder , int format , int width , int height ) { renderer.updateDimensions ( width , height ) ; canLoadData = true ; renderer.updateData ( data ) ; refreshHandler ( 0 ) ; } @ Override public void surfaceDestroyed ( SurfaceHolder holder ) { renderer.clearData ( ) ; visible = false ; canLoadData = false ; refreshHandler ( 0 ) ; } public void setVisibility ( boolean visible ) { this.visible = visible ; refreshHandler ( 0 ) ; } private void draw ( ) { Canvas canvas = null ; try { canvas = getHolder ( ) .lockCanvas ( ) ; if ( canvas ! = null ) { renderer.draw ( canvas ) ; } } finally { if ( canvas ! = null ) { getHolder ( ) .unlockCanvasAndPost ( canvas ) ; } } refreshHandler ( 60000 ) ; } public void saveData ( String key , String value ) { data.put ( key , value ) ; if ( canLoadData ) { renderer.updateData ( data ) ; } refreshHandler ( 0 ) ; } private void refreshHandler ( long delay ) { handler.removeCallbacks ( runnable ) ; if ( visible ) { if ( delay > 0 ) { handler.postDelayed ( runnable , delay ) ; } else { handler.post ( runnable ) ; } } } public String loadData ( String key ) { return data.get ( key ) ; }"
"static final ImmutableList < ProductCodeEnum > PRODUCTS = ImmutableList.of ( ProductCodeEnum.A , ProductCodeEnum.B , ProductCodeEnum.C ) ; static final ImmutableList < ProductCodeEnum > PRODUCTS_EXTENDED_LIST = new ImmutableList.Builder < ProductCodeEnum > ( ) .addAll ( PRODUCTS ) .add ( ProductCodeEnum.D ) .add ( ProductCodeEnum.E ) .build ( ) ; static final ImmutableList < ProductCodeEnum > PRODUCTS = ImmutableList.of ( ProductCodeEnum.A , ProductCodeEnum.B , ProductCodeEnum.C ) ; static final ImmutableList < ProductCodeEnum > PRODUCTS_EXTENDED = PRODUCTS + ImmutableList.of ( ProductCodeEnum.D , ProductCodeEnum.E ) ;"
"@ LogCommentsclass MyActivity extends Activity { @ Override public void onCreate ( Bundle b ) { super.onCreate ( b ) ; // set some local vars int a = 1 ; int b = 2 ; } } class MyActivity extends Activity { @ Override public void onCreate ( Bundle b ) { super.onCreate ( b ) ; Log.d ( `` TAG '' , `` set some local vars '' ) ; int a = 1 ; int b = 2 ; } }"
"val url : String ? = nullval matcher : ResultMatcher = MockMvcResultMatchers.forwardedUrl ( url ) Error : ( 230 , 56 ) Kotlin : Null can not be a value of a non-null type String Type mismatch : inferred type is String ? but String was expected /** * Asserts the request was forwarded to the given URL . * < p > This method accepts only exact matches . * @ param expectedUrl the exact URL expected */public static ResultMatcher forwardedUrl ( String expectedUrl ) { return result - > assertEquals ( `` Forwarded URL '' , expectedUrl , result.getResponse ( ) .getForwardedUrl ( ) ) ; } org.springframework.test.web.servlet.result.MockMvcResultMatchers @ NotNull @ Contract ( pure = true ) public static org.springframework.test.web.servlet.ResultMatcher forwardedUrl ( @ Nullable String expectedUrl )"
"int mask = 0 ; for ( Map.Entry < Data , Boolean > entry : map.entrySet ( ) ) { if ( entry.getKey ( ) .getValue ( ) > 0 & & entry.getValue ( ) ) { mask = mask | ( 1 < < ( entry.getKey ( ) .getValue ( ) - 1 ) ) ; } } Integer mask = map.entrySet ( ) .filter ( entry - > entry.getKey ( ) .getValue ( ) > 0 & & entry.getValue ( ) ) . ?"
"public class Foo { public int id ; public String data ; } function Foo ( id , data ) { this.id = id ; this.data = data ; } $ http.get ( url + 'bar/get-foo/ ' ) .success ( function ( response ) { var foo = new Foo ( response.id , response.data ) ; logger.info ( `` SUCCESS : /get-foo '' ) ; } ) .error ( function ( error_message ) { logger.error ( error_message ) } ) ; function Foo ( foo ) { this.id = foo.id ; this.data = foo.data ; } .success ( function ( response ) { var foo = new Foo ( ) ; angular.extend ( foo , response ) ; // angular.merge ( ) for `` deep-copy '' // ... }"
LinkedList < List < ? extends Number > > numList = new LinkedList < List < Integer > > ( ) ; Required : LinkedList < java.util.list < ? extends java.lang.Number > > Found : LinkedList < java.util.list < Integer > >
"public class Foo < T extends A & B > { } public class Foo < T > where T : A , B { } public class Foo { protected < ? extends A , B > object ; public void setObject ( < ? extends A , B > object ) { this.object = object ; } }"
"custIds= [ 0,1,2 ] custLetters = [ A , B , C ] products = [ `` Cheese '' , '' lemons '' , '' Aubergine '' ] select * from mytable where custId in ( custIds ) and custLetters in ( custLetters ) and product in ( products ) ;"
while ( someList.isEmpty ( ) ) { try { Thread.currentThread ( ) .sleep ( 100 ) ; } catch ( Exception e ) { } } // Do something to the list as soon as some thread adds an element to it .
public void process ( ) { byte [ ] data = new byte [ size ] ; ... // code that uses the above data longProcess ( ) ; // a very long running process that does not use the data . } data = null ;
for ( int i=0 ; i < N ; i++ ) { for ( int j=i ; j < N ; j++ ) { for ( int start=i ; start < = j ; start++ ) { //statement } } }
"java version `` 1.7.0_25 '' OpenJDK Runtime Environment ( IcedTea 2.3.10 ) ( 7u25-2.3.10-1ubuntu0.12.10.2 ) OpenJDK 64-Bit Server VM ( build 23.7-b01 , mixed mode )"
"import java.io.PrintWriter ; public class Tester { static void nested ( ) { PrintWriter object2 = new PrintWriter ( System.out , true ) ; object2.println ( `` second '' ) ; object2.close ( ) ; // delete this line to make all strings print } public static void main ( String [ ] args ) { PrintWriter object1 = new PrintWriter ( System.out , true ) ; object1.println ( `` first '' ) ; Tester.nested ( ) ; object1.println ( `` third '' ) ; object1.close ( ) ; } }"
"default < V > Function < V , R > compose ( Function < ? super V , ? extends T > before ) { Objects.requireNonNull ( before ) ; return ( V v ) - > apply ( before.apply ( v ) ) ; } Function < ? super V , ? extends T > before Function < V , ? extends T > before"
public class Holder { private int n ; public Holder ( int n ) { this.n = n ; } public void assertSanity ( ) { if ( n ! = n ) throw new AssertionError ( `` This statement is false . `` ) ; } }
class Base { Base ( ) { print ( ) ; } void print ( ) { System.out.println ( `` Base '' ) ; } } class Child extends Base { int i = 4 ; public static void main ( String [ ] args ) { Base base = new Child ( ) ; base.print ( ) ; } void print ( ) { System.out.println ( i ) ; } }
module myapplication.module { requires javafx.controls ; requires javafx.fxml ; requires javafx.web ; requires vlcj ; requires org.kordamp.iconli.core ; requires org.kordamp.ikonli.javafx ; requires org.kordamp.ikonli.fontawesome5 ; exports com.company.app ; } requires spring.beans ; requires spring.context ; requires spring.core ; requires spring.boot.autoconfigure ; requires spring.boot ; java.lang.NoSuchMethodError : com.sun.jna.Native.load ( Ljava/lang/String ; Ljava/lang/Class ; ) Lcom/sun/jna/Library ; at vlcj.natives @ 4.1.0/uk.co.caprica.vlcj.binding.LibC. < clinit > ( LibC.java:38 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.discovery.strategy.OsxNativeDiscoveryStrategy.setPluginPath ( OsxNativeDiscoveryStrategy.java:72 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.discovery.strategy.BaseNativeDiscoveryStrategy.onSetPluginPath ( BaseNativeDiscoveryStrategy.java:126 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.discovery.NativeDiscovery.tryPluginPath ( NativeDiscovery.java:176 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.discovery.NativeDiscovery.discover ( NativeDiscovery.java:117 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.MediaPlayerFactory.discoverNativeLibrary ( MediaPlayerFactory.java:187 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.MediaPlayerFactory. < init > ( MediaPlayerFactory.java:119 ) at vlcj @ 4.2.0/uk.co.caprica.vlcj.factory.MediaPlayerFactory. < init > ( MediaPlayerFactory.java:174 ) at myapplication.module/com.company.app.MyApplication.mediaPlayerFactory ( MyApplicationConfiguration.java:18 ) at myapplication.module/com.company.app.MyApplication $ $ EnhancerBySpringCGLIB $ $ 702eae01.CGLIB $ mediaPlayerFactory $ 0 ( < generated > ) at myapplication.module/com.company.app.MyApplication $ $ EnhancerBySpringCGLIB $ $ 702eae01 $ $ FastClassBySpringCGLIB $ $ af782040.invoke ( < generated > ) at spring.core @ 5.1.9.RELEASE/org.springframework.cglib.proxy.MethodProxy.invokeSuper ( MethodProxy.java:244 ) at spring.context @ 5.1.9.RELEASE/org.springframework.context.annotation.ConfigurationClassEnhancer $ BeanMethodInterceptor.intercept ( ConfigurationClassEnhancer.java:363 ) at myapplication.module/com.company.app.MyApplication $ $ EnhancerBySpringCGLIB $ $ 702eae01.mediaPlayerFactory ( < generated > ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.base/java.lang.reflect.Method.invoke ( Method.java:566 ) at spring.beans @ 5.1.9.RELEASE/org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate ( SimpleInstantiationStrategy.java:154 ) ... 34 more [ INFO ] +- uk.co.caprica : vlcj : jar:4.2.0 : compile [ INFO ] | \- uk.co.caprica : vlcj-natives : jar:4.1.0 : compile [ INFO ] | +- net.java.dev.jna : jna : jar:4.5.2 : compile [ INFO ] | \- net.java.dev.jna : jna-platform : jar:4.5.2 : compile
"@ Pattern ( regexp= '' ^ [ a-zA-Z ] + $ '' , message= '' Имя автора только из букв '' ) private String name ; @ Pattern ( regexp= '' ^ [ a-zа-яA-ZА-Я ] + $ '' , message= '' Имя автора только из букв '' ) private String name ;"
public static void main ( String [ ] args ) { try { System.out.println ( `` foo '' ) ; // throw new Exception ( ) ; } catch ( Exception e ) { throw e ; } }
"import java.io . * ; import java.net . * ; import java.util . * ; public class SynchServer { public static void main ( String [ ] args ) throws IOException { ServerSocket serverSocket = null ; final int PORT = 1234 ; Socket client ; ClientHandler handler ; try { serverSocket = new ServerSocket ( PORT ) ; } catch ( IOException ioEx ) { System.out.println ( `` \nUnable to set up port ! `` ) ; System.exit ( 1 ) ; } System.out.println ( `` \nServer running ... \n '' ) ; do { //Wait for client . client = serverSocket.accept ( ) ; System.out.println ( `` \nNew client accepted.\n '' ) ; handler = new ClientHandler ( client ) ; handler.start ( ) ; } while ( true ) ; } } class ClientHandler extends Thread { private Socket client ; private Scanner input ; private PrintWriter output ; private static String text = `` '' ; public ClientHandler ( Socket socket ) throws IOException { client = socket ; input = new Scanner ( client.getInputStream ( ) ) ; output = new PrintWriter ( client.getOutputStream ( ) , true ) ; } public void run ( ) { String head , tail , received ; received = input.nextLine ( ) ; head = received.substring ( 0 , 4 ) ; tail = received.substring ( 4 ) ; while ( ! received.equals ( `` QUIT '' ) ) { if ( head.equals ( `` rep : '' ) ) changeText ( tail ) ; else if ( head.equals ( `` app : '' ) ) appendText ( tail ) ; output.println ( text ) ; output.println ( `` ECHO : `` + received ) ; } try { System.out.println ( `` Closing down connection ... '' ) ; client.close ( ) ; } catch ( IOException ioEx ) { System.out.println ( `` * Disconnection problem ! * '' ) ; } } private synchronized void changeText ( String changedText ) { text = changedText ; } private synchronized void appendText ( String appendedText ) { text += appendedText ; } } import java.io . * ; import java.net . * ; import java.util . * ; public class SynchClient { public static void main ( String [ ] args ) throws IOException { InetAddress host = null ; final int PORT = 1234 ; Socket socket ; Scanner networkInput , keyboard ; PrintWriter output ; try { host = InetAddress.getLocalHost ( ) ; } catch ( UnknownHostException uhEx ) { System.out.println ( `` \nHost ID not found ! \n '' ) ; } socket = new Socket ( host , PORT ) ; networkInput = new Scanner ( socket.getInputStream ( ) ) ; output = new PrintWriter ( socket.getOutputStream ( ) , true ) ; keyboard = new Scanner ( System.in ) ; String message , response ; do { System.out.print ( `` \nEnter message ( 'QUIT ' to exit ) : `` ) ; message = keyboard.nextLine ( ) ; if ( message.length ( ) < 4 ) { System.out.print ( `` \nPlease enter a value greater than 4 characters : `` ) ; message = keyboard.nextLine ( ) ; } output.println ( message ) ; if ( ! message.equals ( `` QUIT '' ) ) { response = networkInput.nextLine ( ) ; System.out.println ( `` \n '' + response ) ; } } while ( ! message.equals ( `` QUIT '' ) ) ; try { System.out.println ( `` \nClosing down connection ... \n '' ) ; socket.close ( ) ; } catch ( IOException ioEx ) { System.out.println ( `` \n* Disconnection problem ! *\n '' ) ; } } } public class SynchServer { public static void main ( String [ ] args ) throws IOException { ServerSocket serverSocket = null ; final int PORT = 1234 ; Socket client ; ClientHandler handler ; try { serverSocket = new ServerSocket ( PORT ) ; } catch ( IOException ioEx ) { System.out.println ( `` \nUnable to set up port ! `` ) ; System.exit ( 1 ) ; } System.out.println ( `` \nServer running ... \n '' ) ; do { //Wait for client . client = serverSocket.accept ( ) ; System.out.println ( `` \nNew client accepted.\n '' ) ; handler = new ClientHandler ( client ) ; handler.start ( ) ; } while ( true ) ; } } class ClientHandler extends Thread { private Socket client ; private Scanner input ; private PrintWriter output ; private static String text = `` '' ; public ClientHandler ( Socket socket ) throws IOException { client = socket ; input = new Scanner ( client.getInputStream ( ) ) ; output = new PrintWriter ( client.getOutputStream ( ) , true ) ; } public void run ( ) { String head , tail , received ; received = input.nextLine ( ) ; // create head and tail in case first input is rep : or app : head = received.substring ( 0 , 4 ) ; tail = received.substring ( 4 ) ; while ( ! received.equals ( `` QUIT '' ) ) { if ( head.equals ( `` rep : '' ) ) { changeText ( tail ) ; output.println ( text ) ; // input for next one } else if ( head.equals ( `` app : '' ) ) { appendText ( tail ) ; output.println ( text ) ; // get input for next } else { //must be some random thing that just needs to be echoed output.println ( text ) ; } //Get next input received = input.nextLine ( ) ; //and set the head and tail again head = received.substring ( 0 , 4 ) ; tail = received.substring ( 4 ) ; } try { System.out.println ( `` Closing down connection ... '' ) ; client.close ( ) ; } catch ( IOException ioEx ) { System.out.println ( `` * Disconnection problem ! * '' ) ; } } private synchronized void changeText ( String changedText ) { text = changedText ; } private synchronized void appendText ( String appendedText ) { text += appendedText ; } } public class SynchClient { public static void main ( String [ ] args ) throws IOException { InetAddress host = null ; final int PORT = 1234 ; Socket socket ; Scanner networkInput , keyboard ; PrintWriter output ; try { host = InetAddress.getLocalHost ( ) ; } catch ( UnknownHostException uhEx ) { System.out.println ( `` \nHost ID not found ! \n '' ) ; } socket = new Socket ( host , PORT ) ; networkInput = new Scanner ( socket.getInputStream ( ) ) ; output = new PrintWriter ( socket.getOutputStream ( ) , true ) ; keyboard = new Scanner ( System.in ) ; String message , response ; do { System.out.print ( `` \nEnter message ( 'QUIT ' to exit ) : `` ) ; message = keyboard.nextLine ( ) ; while ( message.length ( ) < 4 ) { System.out.print ( `` \nPlease enter 4 or more characters : `` ) ; message = keyboard.nextLine ( ) ; } output.println ( message ) ; if ( ! message.equals ( `` QUIT '' ) ) { response = networkInput.nextLine ( ) ; System.out.println ( `` \n '' + response ) ; } } while ( ! message.equals ( `` QUIT '' ) ) ; try { System.out.println ( `` \nClosing down connection ... \n '' ) ; socket.close ( ) ; } catch ( IOException ioEx ) { System.out.println ( `` \n* Disconnection problem ! *\n '' ) ; } } }"
"public class G < X > { public G ( Class < X > c ) { } public void m ( X x ) { } public static < T > G < T > create ( Class < T > c ) { return new G < T > ( c ) ; } public static void main ( String [ ] args ) { Object o = `` '' ; // irrelevant ! G < ? > t = create ( o.getClass ( ) ) ; t.m ( o ) ; } } m ( capture # 402 of ? ) in G < capture # 402 of ? > can not be applied to ( java.lang.Object ) class Mapper < Foo , FooDTO > { private final Constructor < FooDTO > dtoConstructor ; Mapper ( Class < Foo > fooClass , Class < FooDTO > fooDTOClass ) { // find the constructor of FooDTO or throw ... } public FooDTO map ( Foo f ) { return dtoConstructor.newInstance ( f ) ; } // this factory is for convenience when we do n't know the type of FooDTO : public static Mapper < X , Object > create ( Class < X > fromClass ) { Class < Object > dtoClass = // ... find it return new Mapper < X , Object > ( fromClass , dtoClass ) ; } } public class Y < T > { } public class G < X , Z extends Y < X > > { public G ( Class < X > c , Class < Z > s ) { } public void m ( X x ) { } public static < T , S extends Y < T > > G < T , S > create ( Class < T > c ) { Class < S > s = null ; // find this via some reflection magic return new G < T , S > ( c , s ) ; } public static void main ( String [ ] args ) { Object o = `` '' ; // irrelevant ! G < ? extends Object , Y < ? extends Object > > t = create ( o.getClass ( ) ) ; t.m ( o ) ; } } inconvertible typesfound : G < capture # 155 of ? extends java.lang.Object , Y < capture # 155 of ? extends java.lang.Object > > required : G < java.lang.Object , Y < java.lang.Object > > G < Object , Y < Object > > t = ( G < Object , Y < Object > > ) create ( o.getClass ( ) ) ; java : inconvertible typesrequired : G < java.lang.Object , Y < java.lang.Object > > found : G < capture # 1 of ? extends java.lang.Object , Y < capture # 1 of ? extends java.lang.Object > >"
public void get ( People person ) { if ( null ! = person ) { LOG.info ( `` Person with ID `` + person.getId ( ) + `` received '' ) ; processor.process ( person ) ; } else { LOG.info ( `` Person not received abort ! `` ) ; } } @ Test public void testReceivePerson ( ) { context.checking ( new Expectations ( ) { { receiver.get ( person ) ; atLeast ( 1 ) .of ( person ) .getId ( ) ; will ( returnValue ( String.class ) ) ; } } ) ; }
void printCollection ( Collection < ? > c ) { for ( Object o : c ) { System.out.println ( o ) ; } } < T > void printCollection ( Collection < T > c ) { for ( T o : c ) { System.out.println ( o ) ; } } public static double sumOfList ( List < ? extends Number > list ) { double s = 0.0 ; for ( Number n : list ) s += n.doubleValue ( ) ; return s ; } public static < T extends Number > double sumOfList ( List < T > list ) { double s = 0.0 ; for ( Number n : list ) s += n.doubleValue ( ) ; return s ; }
// Superclassclass A { void play1 ( ) { // ... . } } // Subclassclass B extends A { void play2 ( ) { // ... .. } }
public class Foo { //declaring fields and methods Foo ( int k ) { Bar.a = k ; } public class Bar { public final static int a ; } }
"public class A { public String show ( A obj ) { return ( `` A and A '' ) ; } } public class B extends A { public String show ( B obj ) { return ( `` B and B '' ) ; } public String show ( A obj ) { return ( `` B and A '' ) ; } } public class C extends B { } public class Test { public static void main ( String [ ] args ) { A a = new B ( ) ; B b = new B ( ) ; C c = new C ( ) ; System.out.println ( `` 1 -- '' + a.show ( b ) ) ; System.out.println ( `` 2 -- '' + a.show ( c ) ) ; } } 1 -- B and A2 -- B and A this.show ( O ) , super.show ( O ) , this.show ( ( super ) O ) , super.show ( ( super ) O ) A a = new B ( )"
"node.nth ( 5 ) public class List_Node { int item ; List_Node next ; public List_Node ( ) { this.item = 0 ; this.next = null ; } public List_Node ( int item , List_Node next ) { this.item = item ; this.next = next ; } public List_Node ( int item ) { this ( item , null ) ; } public void insertAfter ( int item ) { this.next = new List_Node ( item , this.next ) ; } public List_Node nth ( int position ) { if ( position == 1 ) { return this ; } else if ( ( position < 1 ) || ( this.next == null ) ) { /* error checking */ return null ; } else { return this.next.nth ( position - 1 ) ; } } public static void main ( String [ ] args ) { List_Node node = new List_Node ( 0 ) ; List_Node temp = node ; for ( int item = 1 ; item < 5 ; item++ ) { temp.insertAfter ( item ) ; temp = temp.next ; } System.out.println ( node.nth ( 5 ) .item ) ; } }"
"public static < E extends Enum < E > > boolean validateEnum ( Class < E > clazz , String s ) { return EnumSet.allOf ( clazz ) .stream ( ) .anyMatch ( e - > e.name ( ) .equals ( s ) ) ; } boolean isValid = validateEnum ( Animal.class , `` DOG '' ) ; boolean isValid = validateEnum ( Color.class , `` Red '' ) ; final BiPredicate < String , Class > biPre = ( string1 , clazz ) - > EnumSet.allOf ( clazz ) .stream ( ) .anyMatch ( e - > e.name ( ) .equals ( s ) ) ;"
public class A < T > { public void foo ( T param ) { } ; } public class B extends A < String > { public void foo ( String param ) { } ; }
"public class OneThreeExFifteen { public static void main ( String [ ] args ) { int N = 1000000 ; double s1=0 , s2 = 0 , s3 = 0 , s4=0 ; for ( int i = 1 ; i < = N ; i++ ) s1 = s1 + 1 / ( i * i ) ; // Expected s1 = 1 for ( int i = 1 ; i < = N ; i++ ) s2 = s2 + 1.0 / i * i ; // Expected s2 = 1000000 for ( int i = 1 ; i < = N ; i++ ) s3 = s3 + 1.0 / ( i * i ) ; // Correctly computes the series sum for ( int i = 1 ; i < = N ; i++ ) s4 = s4 + 1 / ( 1.0 * i * i ) ; // Correctly computes the serires sum System.out.println ( `` for loop 1 '' + s1 ) ; System.out.println ( `` for loop 2 '' +s2 ) ; System.out.println ( `` for loop 3 '' +s3 ) ; System.out.println ( `` for loop 4 '' +s4 ) ; } } for loop 1 ( I get a Divide by 0 error - had to comment out this loop ) for loop 2 1000000.0 for loop 3 Infinity for loop 4 1.64493306684877"
"public static LocalDate getLocalDateFromString ( String dateString ) { DecimalStyle defaultDecimalStyle = DateTimeFormatter.ISO_LOCAL_DATE.getDecimalStyle ( ) ; DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ISO_LOCAL_DATE.withDecimalStyle ( defaultDecimalStyle.withZeroDigit ( '\u0660 ' ) ) ; LocalDate date = LocalDate.parse ( dateString , dateTimeFormatter ) ; return date ; } Exception in thread `` main '' java.time.format.DateTimeParseException : Text '2019-07-31 ' could not be parsed at index 0"
"public class InlineGridBagConstraints extends GridBagConstraints { public InlineGridBagConstraints gridx ( int x ) { gridx = x ; return this ; } public InlineGridBagConstraints gridy ( int y ) { gridy = y ; return this ; } public InlineGridBagConstraints gridheight ( int h ) { gridheight = h ; return this ; } public InlineGridBagConstraints gridwidth ( int w ) { gridwidth = w ; return this ; } // ... . and so on , for all fields . } GridBagConstraints c = new GridBagConstraints ( ) ; c.gridx = 2 ; c.gridy = 1 ; c.gridwidth = 3 ; myJPanel.add ( myJButton , c ) ; c.gridx = 3 ; c.gridwidth = 2 ; myJPanel.add ( myOtherJButton , c ) ; c.gridx = 1 ; c.gridy = 5 ; c.gridheight = 4 ; myJPanel.add ( yetAnotherJButton , c ) ; InlineGridBagConstraints c = new InlineGridBagConstraints ( ) ; myJPanel.add ( myJButton , c.gridx ( 2 ) .gridy ( 1 ) .gridwidth ( 3 ) ) ; myJPanel.add ( myOtherJButton , c.gridx ( 3 ) .gridy ( 1 ) .gridwidth ( 2 ) ; myJPanel.add ( yetAnotherJButton , c.gridx ( 1 ) .gridy ( 5 ) .gridheight ( 4 ) ;"
"public class A { int x ; int y ; int z ; public A ( ) { this ( 0 ) ; } public A ( int x ) { this ( x , 0 ) ; } public A ( int x , int y ) { this ( x , y , 0 ) ; } public A ( int x , int y , int z ) { this.x = x ; this.y = y ; this.z = z ; // some setup stuff needed for all A } } public class A { int x ; int y ; int z ; public A ( int x , int y , int z ) { this ( x , y ) ; this.z = z ; } public A ( int x , int y ) { this ( x ) ; this.y = y ; } public A ( int x ) { this ( ) ; this.x = x ; } public A ( ) { // some setup stuff needed for all A } }"
"public class LocalDateArgumentCreator implements FinalClassArgumentCreator < LocalDate > { private final long MSECS_IN_DAY = 1000L * 60L * 60L * 24L ; public LocalDate createArgumentPlaceHolder ( int seed ) { return new LocalDate ( ( long ) seed * MSECS_IN_DAY ) ; } } ArgumentsFactory.registerFinalClassArgumentCreator ( LocalDate.class , new LocalDateArgumentCreator ( ) ) ; public final class LambdajInitializer { static { // initialize like above } } < bean class= '' ... LambdajInitializer '' / > public class LambdajInitializer { @ PostConstruct public void init ( ) { // Lambdaj initialization } } public class MyApplication extends WebApplication { @ Override public void init ( ) { ... // Lambdaj initialization ... } }"
public class TestOutter { class TestInner1 { private int mInt = 1 ; } class TestInner2 { public int foo ( TestInner1 value ) { return value.mInt ; } } }
"< R , A > R collect ( Collector < ? super T , A , R > collector ) Performs a mutable reduction operation on the elements of this stream using a Collector . public static < T , ​K > Collector < T , ​ ? , ​Map < K , ​List < T > > > groupingBy​ ( Function < ? super T , ​ ? extends K > classifier ) Returns a Collector implementing a `` group by '' operation on input elements of type T , grouping elements according to a classification function , and returning the results in a Map . List < Student > studentList = ... .Map < String , List < Student > > groupByTeachersMap = studentList.stream ( ) .collect ( Collectors.groupingBy ( Student : :getTeachersName ) ) ;"
"class Binder { < T > void bind ( Class < T > clazz , Type < T > type ) { System.out.println ( `` clazz type '' ) ; } < T > void bind ( T obj , Type < T > type ) { System.out.println ( `` obj type '' ) ; } } class Type < T > { Type ( T obj ) { } } Binder binder = new Binder ( ) ; binder.bind ( String.class , new Type < String > ( `` x '' ) ) //worksbinder.bind ( Object.class , new Type < Object > ( new Object ( ) ) ) //ambiguous ERROR : reference to bind is ambiguous both method < T > bind ( java.lang.Class < T > , Type < T > ) in Binder and method < T > bind ( T , Type < T > ) in Binder match class Binder { < T > void bind ( Class < T > clazz ) { System.out.println ( `` clazz '' ) ; } < T > void bind ( T obj ) { System.out.println ( `` obj '' ) ; } } Binder binder = new Binder ( ) ; binder.bind ( String.class ) binder.bind ( Object.class )"
"package com.company ; import java.io.BufferedReader ; import java.io.FileReader ; import java.io.IOException ; import java.util . * ; public class Main { public static ArrayList < Integer > randomArrayList ( int n ) { ArrayList < Integer > list = new ArrayList < > ( ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < n ; i++ ) { list.add ( random.nextInt ( n ) ) ; } return list ; } public static List < Integer > MergeSort ( List < Integer > A ) throws Exception { if ( A.size ( ) ==1 ) return A ; int mid = A.size ( ) /2 ; List < Integer > left = A.subList ( 0 , mid ) ; List < Integer > right = A.subList ( mid , A.size ( ) ) ; left = MergeSort ( left ) ; right = MergeSort ( right ) ; A = Merge ( left , right ) ; return A ; } public static List < Integer > Merge ( List < Integer > L , List < Integer > R ) throws Exception { List < Integer > output = new ArrayList < Integer > ( Collections.nCopies ( L.size ( ) + R.size ( ) , 0 ) ) ; int i = 0 ; int j = 0 ; int k = 0 ; while ( i < L.size ( ) & & j < R.size ( ) ) { if ( L.get ( i ) < R.get ( j ) ) { output.set ( k , L.get ( i ) ) ; i=i+1 ; } else { output.set ( k , R.get ( j ) ) ; j=j+1 ; } k++ ; } while ( i < L.size ( ) ) { output.set ( k , L.get ( i ) ) ; i=i+1 ; k++ ; } while ( j < R.size ( ) ) { output.set ( k , R.get ( j ) ) ; j=j+1 ; k++ ; } return output ; } public static List < Integer > QuickSort ( List < Integer > A ) throws Exception { if ( A.size ( ) ==1 || A.size ( ) ==0 ) return A ; //The pivot is a random element of the array A int randomIndex = new Random ( ) .nextInt ( A.size ( ) ) ; Integer P = A.get ( randomIndex ) ; //Swap first element of A with selected pivot Integer tmp ; A.set ( randomIndex , A.get ( 0 ) ) ; A.set ( 0 , P ) ; //Initiate i and l ( partition analysis progress counters ) int l = 0 , i = l + 1 , r = A.size ( ) ; for ( int j = l + 1 ; j < r ; j++ ) { if ( A.get ( j ) < P ) { //Swap A [ j ] and A [ i ] tmp = A.get ( j ) ; A.set ( j , A.get ( i ) ) ; A.set ( i , tmp ) ; //Increase i by 1 ( counting the pos of already partitioned ) i = i + 1 ; } } //Swap A [ l ] ( Pivot ) and A [ i-1 ] most left element bigger than pivot tmp = A.get ( l ) ; A.set ( l , A.get ( i-1 ) ) ; A.set ( i - 1 , tmp ) ; QuickSort ( A.subList ( 0 , i-1 ) ) ; QuickSort ( A.subList ( i , A.size ( ) ) ) ; return A ; } public static void main ( String [ ] args ) throws Exception { long startTime , endTime , duration ; //Compare 20 times QuickSort vs MergeSort for ( int i=0 ; i < 20 ; i++ ) { List < Integer > arreglo = randomArrayList ( 100000 ) ; startTime = System.nanoTime ( ) ; QuickSort ( arreglo ) ; endTime = System.nanoTime ( ) ; duration = ( endTime - startTime ) /1000000 ; System.out.println ( `` Quicksort : `` + Long.toString ( duration ) ) ; startTime = System.nanoTime ( ) ; MergeSort ( arreglo ) ; endTime = System.nanoTime ( ) ; duration = ( endTime - startTime ) /1000000 ; System.out.println ( `` MergeSort : `` +Long.toString ( duration ) ) ; //System.out.println ( Arrays.toString ( QuickSort ( arreglo ) .toArray ( ) ) ) ; //System.out.println ( Arrays.toString ( MergeSort ( arreglo ) .toArray ( ) ) ) ; } } }"
Class A { private String name ; private List < B > b ; // getters and setters } Class B { private String name ; private List < C > c ; // getters and setters } Class C { private String name ; private List < D > d ; // getters and setters } Class D { // properties // getters and setters } List < List < D > > listA.stream ( ) .flatMap ( s - > s.getB.stream ( ) ) .flatMap ( s - > s.getC.stream ( ) ) .flatMap ( s - > s.getD.stream ( ) ) .collect ( Collectors.toList ( ) ) ; List < D >
"... frame_type = 255 /* full_frame */ offset_delta = 11 locals = [ class Test , double , int , double , double , bogus , bogus , int , int , class `` [ D '' ] stack = [ ] ..."
"List < String > list = Arrays.asList ( `` aaa '' , '' cccc '' , '' bbbb '' ) ; List < String > list2 = new ArrayList < > ( ) ; list.stream ( ) .forEach ( x - > { list2.add ( x ) ; System.out.println ( x ) ; } ) ; Consumer < String > c1 = s - > list2.add ( s ) ; Consumer < String > c2 = s - > System.out.println ( s ) ; list.stream ( ) .forEach ( c1.andThen ( c2 ) ) ;"
class A { public static void m ( Number n ) { System.out.println ( `` Number A '' ) ; } ; } class B extends A { public static int m ( Number n ) { System.out.println ( `` Number B '' ) ; return 1 ; } ; } class Foo { public static void m ( Number n ) { System.out.println ( `` Number A '' ) ; } ; public static int m ( Number n ) { System.out.println ( `` Number B '' ) ; return 1 ; } ; } error : method m ( Number ) is already defined in class Foo public static int m ( Number n ) { ^1 error
public static int sum ( int n ) { if ( n == 1 ) return n ; else return n + sum ( n - 1 ) ; }
"CanTimes ( int a , int b ) { returns true if a * b is within the range of -2^31 to 2^31-1 , else false ; } public static boolean CanPlus ( int a , int b ) { if ( b > = 0 ) { return a < = Integer.MAX_VALUE - b } else { return a > = Integer.MIN_VALUE - b } } public static boolean CanTimes ( int a , int b ) { if ( a == 0 || b == 0 ) { return true ; } if ( a > 0 ) { if ( b > 0 ) { return a < = Integer.MAX_VALUE / b ; } else { return a < = Integer.MIN_VALUE / b ; } } else { if ( b > 0 ) { return b < = Integer.MIN_VALUE / a ; } else { return a < = -Integer.MAX_VALUE / b ; } } }"
"public class MySAM implements ServerAuthModule { @ Override public AuthStatus validateRequest ( MessageInfo messageInfo , Subject clientSubject , Subject serviceSubject ) throws AuthException { // check user credentials ... // set username and groups CallerPrincipalCallback cpCallback = new CallerPrincipalCallback ( clientSubject , username ) ; GroupPrincipalCallback gpCallback = new GroupPrincipalCallback ( clientSubject , groups ) ; callbackHandler.handle ( new Callback [ ] { cpCallback , gpCallback } return AuthStatus.SUCCESS ; } ... } boolean isInGroup ( String username , String group ) { // ask backend system }"
"String pattern = `` ddMMyyHH : mm : ss '' ; String text = `` 02011104:21:32 '' ; System.out.println ( MessageFormat.format ( `` Strict - { 0 } '' , new DateTimeFormatterBuilder ( ) .parseStrict ( ) .appendPattern ( pattern ) .toFormatter ( ) .parse ( text ) ) ) ; System.out.println ( MessageFormat.format ( `` Lenient - { 0 } '' , new DateTimeFormatterBuilder ( ) .parseLenient ( ) .appendPattern ( pattern ) .toFormatter ( ) .parse ( text ) ) ) ; Strict - { } , ISO resolved to 2011-01-02T04:21:32Exception in thread `` main '' java.time.format.DateTimeParseException : Text '02011104:21:32 ' could not be parsed at index 8"
"public class TestCase { private final java.util.function.Consumer < Object > emptyCallback = result - > { } ; public TestCase ( ) { return ; } public static void main ( String ... args ) { new TestCase ( ) ; } } Error ( 6 , 7 ) : java : variable result might not have been initialized TestCase.java:6 : error : Variable result might not have been initialized return ; ^1 error"
"> javac *.java -- classpath junit.jar javac : invalid flag : -- classpath > java -- versionjava 9Java ( TM ) SE Runtime Environment ( build 9+181 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 9+181 , mixed mode ) javac -classpath `` C : \Program Files\JetBrains\IntelliJ IDEA 2017.2.5\plugins\junit\lib\junit-jupiter-api-5.0.0.jar ; C : \Program Files\JetBrains\IntelliJ IDEA 2017.2.5\plugins\junit\lib\opentest4j-1.0.0.jar '' *.java"
iv.setImageResource ( R.drawable.image ) ;
public class GenericMethodList { public static void main ( String [ ] args ) { GenericMethodList o = new GenericMethodList ( ) ; List < String > list = o.getZipList ( true ) ; Iterator < ? > iter = list.iterator ( ) ; while ( iter.hasNext ( ) ) { ZipCode zipplace = ( ZipCode ) iter.next ( ) ; System.out.println ( zipplace.value ) ; } } public List < String > getZipList ( boolean someParameter ) { //why is this not throwing an exception at runtime ? List list ; if ( someParameter ) { list = getZipCodes ( ) ; //List < ZipCode > } else { list = getZipStreets ( ) ; //List < ZipStreet > } return list ; } private List < ZipCode > getZipCodes ( ) { List < ZipCode > list = new ArrayList < ZipCode > ( ) ; list.add ( new ZipCode ( `` code1 '' ) ) ; list.add ( new ZipCode ( `` code1 '' ) ) ; return list ; } private List < ZipStreet > getZipStreets ( ) { List < ZipStreet > list = new ArrayList < ZipStreet > ( ) ; list.add ( new ZipStreet ( `` street1 '' ) ) ; list.add ( new ZipStreet ( `` street2 '' ) ) ; return list ; } public class ZipCode { public String value ; public ZipCode ( String value ) { this.value = value ; } } public class ZipStreet { public String value ; public ZipStreet ( String value ) { this.value = value ; } } }
Object [ ] objArray = new Object [ n ] ; /*Do some stuff with objArray*/objArray = new Object [ n ]
Class a { foo ( ) { new b ( ) .bar ( ) ; } } Class b { bar ( ) { ... } }
public class Base { public void method1 ( ) { ..change state of base class } public void method2 ( ) { ..change state of base class } public void method3 ( ) { ..change state of base class } } public static void main ( String [ ] args ) { String sequence = `` ABCAABBBABACCACC '' Base aBase = new Base ( ) ; for ( int i = 0 ; i < sequence.length ( ) ; i++ ) { char temp = sequence.charAt ( i ) ; switch ( temp ) { case ' A ' : { aBase.method1 ( ) ; break ; } case ' B ' : { aBase.method2 ( ) ; break ; } case ' C ' : { aBase.method3 ( ) ; break ; } } } System.out.println ( aBase.getState ( ) ) ; }
public class Test1 { public static void main ( String args [ ] ) { ChildClass c = new ChildClass ( ) ; c.print ( ) ; } } class ParentClass { int id = 1 ; void print ( ) { System.out.println ( id ) ; } } class ChildClass extends ParentClass { int id = 2 ; }
public class Program ( ) { public void Main ( String [ ] args ) { Person person = new Person ( ) ; person.setName ( `` Simon '' ) ; List < Person > people = new ArrayList < Person > ( ) ; people.add ( person ) ; people.add ( person ) ; people.add ( person ) ; List < Person > otherPeople = magicDeepCopyFunction ( people ) ; otherPeople.get ( 0 ) .setName ( `` Adam '' ) ; // should this output 'Adam ' or 'Simon ' ? System.out.println ( otherPeople.get ( 1 ) ) ; } }
public static String getColorName ( ) { getHSB ( rgb ) ; if ( hsbH > = 45 & & hsbH < 75 ) { if ( hsbS > 0 & & hsbS < 45 & & hsbB > 70 ) { return `` White/Off White '' ; } else if ( hsbS > 0 & & hsbS < 45 & & hsbB < 10 ) { return `` Dark Yellow '' ; } else { return `` Yellow '' ; } } else if ( hsbH > = 15 & & hsbH < 45 ) { if ( hsbS > 0 & & hsbS < 45 & & hsbB > 70 ) { return `` White/Off White '' ; } else if ( hsbS > 0 & & hsbS < 45 & & hsbB < 10 ) { return `` Dark Orange '' ; } else { return `` Orange '' ; } ...
"public static void printSomething ( List < String > list ) { for ( String item : list ) { if ( item.contains ( `` aaa '' ) ) { System.out.println ( `` aaa '' + item ) ; } if ( item.contains ( `` bbb '' ) ) { System.out.println ( `` bbb '' + item ) ; } else { System.out.println ( item ) ; } } } public static Map < String , String > getSomething ( List < String > list ) { Map < String , String > map = new HashMap < String , String > ( ) ; for ( String item : list ) { if ( item.contains ( `` aaa '' ) ) { map.put ( `` aaa '' , item ) ; } if ( item.contains ( `` bbb '' ) ) { map.put ( `` bbb '' , item ) ; } else { //do nothing } } return map ; }"
"public class HashMapSafe < K , V > extends HashMap < K , V > implements Map < K , V > { private Class < V > dataType ; public HashMapSafe ( Class < V > clazz ) { dataType = clazz ; } @ SuppressWarnings ( `` unchecked '' ) @ Override public V get ( Object key ) { if ( ! containsKey ( key ) ) { try { put ( ( K ) key , dataType.newInstance ( ) ) ; } catch ( InstantiationException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( IllegalAccessException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } return super.get ( key ) ; } } Map < String , Section > sections = new HashMapSafe < String , Section > ( Section.class ) ; sections.get ( sectionName ) ; //always returns a Section instance , existing or new Map < String , Section > sections = new HashMapSafe < String , Section > ( ) ; Map < String , Section > sections = new HashMapSafe < String > ( Section.class ) ;"
Set < String > matches = fields.stream ( ) .map ( f - > f.getField ( ) ) .collect ( Collectors.toSet ( ) ) ; if ( matches.size ( ) ! = 1 ) throw new IllegalArgumentException ( `` could not match one exact element '' ) ; String distrinctVal = matches.iterator ( ) .next ( ) ; //continue to use the value
"request.setRetryPolicy ( new DefaultRetryPolicy ( 1500 , DefaultRetryPolicy.DEFAULT_MAX_RETRIES , DefaultRetryPolicy.DEFAULT_BACKOFF_MULT ) ) ; 2019-12-16 14:28:15.892 I/MyClass : request sent2019-12-16 14:28:35.930 I/MyClass : request caught onError"
@ FunctionalInterfaceinterface Normal { public abstract String move ( ) ; public abstract String toString ( ) ; }
public class Quetico { public static void main ( String [ ] args ) { Pattern p = Pattern.compile ( args [ 0 ] ) ; Matcher m = p.matcher ( args [ 1 ] ) ; while ( m.find ( ) ) { System.out.println ( m.start ( ) + `` `` ) ; } System.out.println ( `` '' ) ; } } java Quetico `` \B '' `` ^23 * $ 76 bc '' 0 2 4 8 0 2 4 5 7 10
package pepelu ; import pepelu.ImportTest.InnerClass.InnerEnum ; import javax.annotation.Resource ; public class ImportTest { @ Resource public static class InnerClass { public enum InnerEnum { A } } public static void main ( String [ ] args ) { System.out.println ( InnerEnum.A ) ; } } mvn clean compile import javax.annotation.Resource ; import pepelu.ImportTest.InnerClass.InnerEnum ;
"Hello , World ! Hello , Computer User !"
with tab1 as ( select 1 as id from dual union all select 1 as id from dual union all select 2 as id from dual union all select 2 as id from dual union all select 5 as id from dual ) select id from tab1 group by id having count ( id ) =1 ; Output is Id=5 and count is 1 List < Integer > myList = new ArrayList < Integer > ( ) ; myList.add ( 1 ) ; myList.add ( 1 ) ; myList.add ( 2 ) ; myList.add ( 2 ) ; myList.add ( 5 ) ; Long f = myList.stream ( ) .distinct ( ) .count ( ) ; System.out.println ( f ) ;
public class Test { private static final int A ; static { A = 5 ; } } public class Test { private static final int A ; static { Test.A = 5 ; } }
"mMainLayout = new FrameLayout ( this ) ; mMainLayout.setBackgroundColor ( Color.BLACK ) ; mMainLayout.setLayoutParams ( new LayoutParams ( LayoutParams.MATCH_PARENT , LayoutParams.MATCH_PARENT ) ) ; mPreview = new AutoFitTextureView ( this ) ; mPreview.setLayoutParams ( new FrameLayout.LayoutParams ( LayoutParams.MATCH_PARENT , LayoutParams.MATCH_PARENT , Gravity.TOP ) ) ; mMainLayout.addView ( mPreview ) ; this.setContentView ( mMainLayout ) ; mPreviewSize = new Size ( 640 , 480 ) ; if ( mFrameOrientation == Configuration.ORIENTATION_LANDSCAPE ) { mTextureView.setAspectRatio ( mPreviewSize.getWidth ( ) , mPreviewSize.getHeight ( ) ) ; } else { mTextureView.setAspectRatio ( mPreviewSize.getHeight ( ) , mPreviewSize.getWidth ( ) ) ; }"
if ( ! cond3 & & ! cond1 & & cond2 & & cond4 ) { // actions to perform calculateValues ( ) ; return result ; } else if ( ! cond1 & & cond2 & & cond3 ) { // actions to perform Object result = new Result ( ) ; return result ; } else if ( ! cond4 & & cond3 & & cond1 & & cond5 ) { // actions to perform Object result = new Result ( ) ; return result ; } else { // throw error because inputs are invalid }
public static void main ( String [ ] args ) { int i = 1234 ; int j = 1234 ; int k = 4321 ; long l1 = System.nanoTime ( ) ; if ( i == j ) { System.out.println ( `` equal '' ) ; } System.out.println ( System.nanoTime ( ) - l1 ) ; l1 = System.nanoTime ( ) ; if ( i ! = k ) { System.out.println ( `` equal '' ) ; } System.out.println ( System.nanoTime ( ) - l1 ) ; l1 = System.nanoTime ( ) ; if ( i == k ) { System.out.println ( `` equal '' ) ; } System.out.println ( System.nanoTime ( ) - l1 ) ; l1 = System.nanoTime ( ) ; if ( i ! = j ) { System.out.println ( `` equal '' ) ; } System.out.println ( System.nanoTime ( ) - l1 ) ; } 1. equal190295equal2223742702 . equal156512equal1838804283 . equal155656equal2009900
"static boolean reachable ( int i , int j , int n ) { boolean grid [ ] [ ] = new boolean [ n ] [ n ] ; reachableHelper ( 0 , 0 , grid , i , j , n - 1 ) ; for ( int x = 0 ; x < n ; x++ ) { for ( int y = 0 ; y < n ; y++ ) { if ( ! grid [ x ] [ y ] ) { return false ; } } } return true ; } static void reachableHelper ( int x , int y , boolean [ ] [ ] grid , int i , int j , int max ) { if ( x > max || y > max || x < 0 || y < 0 || grid [ x ] [ y ] ) { return ; } grid [ x ] [ y ] = true ; int i2 = i ; int j2 = j ; for ( int a = 0 ; a < 2 ; a++ ) { for ( int b = 0 ; b < 2 ; b++ ) { reachableHelper ( x + i2 , y + j2 , grid , i , j , max ) ; reachableHelper ( x + j2 , y + i2 , grid , i , j , max ) ; i2 = -i2 ; } j2 = -j2 ; } } static boolean isReachableLoop ( int i , int j , int n ) { boolean [ ] [ ] grid = new boolean [ n ] [ n ] ; LinkedList < Point > queue = new LinkedList < Point > ( ) ; queue.add ( new Point ( 0,0 ) ) ; // starting position . int nodesVisited = 0 ; while ( queue.size ( ) ! = 0 ) { Point pos = queue.removeFirst ( ) ; if ( pos.x > = 0 & & pos.y > = 0 & & pos.x < n & & pos.y < n ) { if ( ! grid [ pos.x ] [ pos.y ] ) { grid [ pos.x ] [ pos.y ] = true ; nodesVisited++ ; int i2 = i ; int j2 = j ; for ( int a = 0 ; a < 2 ; a++ ) { for ( int b = 0 ; b < 2 ; b++ ) { queue.add ( new Point ( pos.x+i2 , pos.y+j2 ) ) ; queue.add ( new Point ( pos.x+j2 , pos.y+i2 ) ) ; i2 = -i2 ; } j2 = -j2 ; } } } } if ( nodesVisited == ( n * n ) ) { return true ; } else { return false ; } }"
static void exampleMethod1 ( ) { } static void exampleMethod2 ( ) { } public class ExampleClass { public static ExampleClass instance ; public ExampleClass ( ) { instance = this ; } public static ExampleClass getInstance ( ) { return instance ; } void exampleMethod1 ( ) { //code } void exampleMethod2 ( ) { //code } // To call the method I simply getInstance ( ) .exampleMethod1 }
private static < T > T findServiceProvider ( final Class < T > type ) throws TransformerFactoryConfigurationError { try { return AccessController.doPrivileged ( new PrivilegedAction < T > ( ) { public T run ( ) { final ServiceLoader < T > serviceLoader = ServiceLoader.load ( type ) ; final Iterator < T > iterator = serviceLoader.iterator ( ) ; if ( iterator.hasNext ( ) ) { return iterator.next ( ) ; } else { return null ; } } } ) ; } catch ( ServiceConfigurationError e ) { ... } }
"private InputStream input ; private InputStreamReader inputReader ; private BufferedReader reader ; try { input = new InputStream ( ) ; inputStreamReader = new InputStreamReader ( inputStream ) ; reader = new BufferedReader ( inputStreamReader ) ; // do I/O operations } catch ( IOException e ) { Log.d ( `` IOException '' , `` The Data Could Not Be Read =/ '' ) ; } finally { try { reader.close ( ) ; // now will this , by default , close all other streams ? OR /* * input.close ( ) ; inputStream.close ( ) ; //is this necessary , along with * reader.close ( ) ; */ } catch ( IOException ex ) { ex.printStackTrace ( ) ; } }"
"final String DATE_FORMAT = `` YYYYMM '' ; DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern ( DATE_FORMAT ) ; LocalDateTime startDate = LocalDateTime.of ( 2018,12,29,5,0,0 ) ; System.out.println ( startDate.format ( dateFormat ) ) ; //prints 201812LocalDateTime startDate = LocalDateTime.of ( 2018,12,30,5,0,0 ) ; System.out.println ( startDate.format ( dateFormat ) ) ; //prints 201912 < -- -- -- should be 201812LocalDateTime startDate = LocalDateTime.of ( 2018,12,31,5,0,0 ) ; System.out.println ( startDate.format ( dateFormat ) ) ; //prints 201912 < -- -- -- should be 201812"
"public void onRemove ( Computer computer ) { temperatures.remove ( computer ) ; // ... } Map < Computer , Temperature > temperatures = new WeakHashMap < > ( ) ;"
"def doSearch ( ... ) = { ... val actionRequessBuilder : ActionRequestBuilder // constructed earlier in the method val executedFuture : ListenableActionFuture < Response > = actionRequestBuilder.execute return executedFuture.actionGet } val search1 = scala.concurrent.Future ( doSearch ( ... ) ) val search2 = scala.concurrent.Future ( doSearch ( ... ) ) return Await.result ( search1 , defaultDuration ) - > Await.result ( search2 , defaultDuration ) )"
public class A { static int a = ++A.a ; // compiles //static int a = ++a ; // error - can not reference a field before it is defined public static void main ( String [ ] args ) { System.out.println ( a ) ; } }
"public static int numberOfTrailingZeros ( int i ) { // HD , Figure 5-14 int y ; if ( i == 0 ) return 32 ; int n = 31 ; y = i < < 16 ; if ( y ! = 0 ) { n = n -16 ; i = y ; } y = i < < 8 ; if ( y ! = 0 ) { n = n - 8 ; i = y ; } y = i < < 4 ; if ( y ! = 0 ) { n = n - 4 ; i = y ; } y = i < < 2 ; if ( y ! = 0 ) { n = n - 2 ; i = y ; } return n - ( ( i < < 1 ) > > > 31 ) ; } y = i < < 2 ; if ( y ! = 0 ) { n = n - 2 ; i = y ; } . n - ( ( i < < 1 ) > > > 31 ) ;"
Runnable r = new Runnable ( ) { public void run ( ) { internal ( ) ; } public void internal ( ) { .. code .. } } ; public final void internal ( ) { ... }
String x = new String ( `` Hey '' ) ; String y = `` Hey '' ; String b = `` h '' ; String a = b.intern + `` ey '' ; boolean x = a == `` hey '' ;
"public class Test { interface Parser < A , R > { R parse ( A a ) ; } static class ResponseParser implements Parser < String , Integer > { public Integer parse ( String s ) { return Integer.parseInt ( s ) + 1 ; } } interface Function < A , R > { R with ( A a ) ; } public static < A , R , P extends Parser < A , R > > Function < P , R > getResult ( final A res ) { return new Function < P , R > ( ) { public R with ( P parser ) { return parser.parse ( res ) ; } } ; } public static void main ( String [ ] args ) { Function < Parser < String , Integer > , Integer > func = getResult ( `` 1 '' ) ; //this works func.with ( new ResponseParser ( ) ) ; // why this does not work getResult ( `` 1 '' ) .with ( new ResponseParser ( ) ) ; } }"
"Thread 3049 : ( state = BLOCKED ) - java.lang.Object.wait ( long ) @ bci=0 ( Compiled frame ; information may be imprecise ) - java.io.PipedInputStream.read ( ) @ bci=142 , line=326 ( Compiled frame ) - java.io.PipedInputStream.read ( byte [ ] , int , int ) @ bci=43 , line=377 ( Compiled frame ) - org.apache.http.entity.InputStreamEntity.writeTo ( java.io.OutputStream ) @ bci=75 , line=140 ( Compiled frame ) - org.apache.http.impl.execchain.RequestEntityProxy.writeTo ( java.io.OutputStream ) @ bci=10 , line=123 ( Compiled frame ) - org.apache.http.impl.DefaultBHttpClientConnection.sendRequestEntity ( org.apache.http.HttpEntityEnclosingRequest ) @ bci=31 , line=156 ( Compiled frame ) - org.apache.http.impl.conn.CPoolProxy.sendRequestEntity ( org.apache.http.HttpEntityEnclosingRequest ) @ bci=5 , line=162 ( Compiled frame ) - org.apache.http.protocol.HttpRequestExecutor.doSendRequest ( org.apache.http.HttpRequest , org.apache.http.HttpClientConnection , org.apache.http.protocol.HttpContext ) @ bci=223 , line=238 ( Compiled frame ) - org.apache.http.protocol.HttpRequestExecutor.execute ( org.apache.http.HttpRequest , org.apache.http.HttpClientConnection , org.apache.http.protocol.HttpContext ) @ bci=25 , line=123 ( Compiled frame ) - org.apache.http.impl.execchain.MainClientExec.execute ( org.apache.http.conn.routing.HttpRoute , org.apache.http.client.methods.HttpRequestWrapper , org.apache.http.client.protocol.HttpClientContext , org.apache.http.client.methods.HttpExecutionAware ) @ bci=714 , line=271 ( Compiled frame ) - org.apache.http.impl.execchain.ProtocolExec.execute ( org.apache.http.conn.routing.HttpRoute , org.apache.http.client.methods.HttpRequestWrapper , org.apache.http.client.protocol.HttpClientContext , org.apache.http.client.methods.HttpExecutionAware ) @ bci=447 , line=184 ( Compiled frame ) - org.apache.http.impl.execchain.RetryExec.execute ( org.apache.http.conn.routing.HttpRoute , org.apache.http.client.methods.HttpRequestWrapper , org.apache.http.client.protocol.HttpClientContext , org.apache.http.client.methods.HttpExecutionAware ) @ bci=39 , line=88 ( Compiled frame ) - org.apache.http.impl.client.InternalHttpClient.doExecute ( org.apache.http.HttpHost , org.apache.http.HttpRequest , org.apache.http.protocol.HttpContext ) @ bci=168 , line=184 ( Compiled frame ) - java.util.concurrent.locks.AbstractQueuedSynchronizer.doReleaseShared ( ) @ bci=69 , line=695 ( Compiled frame ) - java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared ( int ) @ bci=9 , line=1342 ( Compiled frame ) - java.util.concurrent.CountDownLatch.countDown ( ) @ bci=5 , line=291 ( Compiled frame ) - com.mycompany.browse.concurrent.stream.CustomPipedInputStream.close ( ) @ bci=8 , line=43 ( Compiled frame ) - com.mycompany.browse.mina.handler.BrowseHttpMessageProcessor $ 1.run ( ) @ bci=57 , line=200 ( Compiled frame ) - java.util.concurrent.Executors $ RunnableAdapter.call ( ) @ bci=4 , line=511 ( Compiled frame ) - java.util.concurrent.FutureTask.run ( ) @ bci=42 , line=266 ( Compiled frame ) - java.util.concurrent.ThreadPoolExecutor.runWorker ( java.util.concurrent.ThreadPoolExecutor $ Worker ) @ bci=95 , line=1142 ( Compiled frame ) - java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ) @ bci=5 , line=617 ( Compiled frame ) - java.lang.Thread.run ( ) @ bci=11 , line=745 ( Compiled frame )"
"a $ bc $ de $ f a\ $ bc\ $ de\ $ f s=s.replaceAll ( `` \n '' , '' '' ) .replaceAll ( `` $ '' , `` \\ $ '' ) ;"
"Map < Integer , String > myMap = new HashMap < > ( ) ; public class NewClass implements Serializable { private static final long serialVersionUID = 1L ; private final Map < Integer , String > myMap ; public NewClass ( ) { this.myMap = new HashMap < > ( ) ; } }"
"02/20/2016 02:03 PM 915 AddResult.class02/15/2016 09:16 PM 848 AddResult.java02/20/2016 02:03 PM 1,032 Console.class02/05/2016 08:27 AM 1,315 Console.java02/20/2016 02:03 PM 1,624 CourseInfo.class02/19/2016 10:56 AM 9,203 CourseInfo.java02/20/2016 02:03 PM 2,244 CourseInfoTester.class02/17/2016 05:15 PM 2,226 CourseInfoTester.java01/22/2016 10:55 AM 3,769 Keyboard.class02/20/2016 02:03 PM 686 SemesterInfo $ 1.class02/20/2016 02:03 PM 6,810 SemesterInfo.class02/20/2016 01:57 PM 36,263 SemesterInfo.java02/20/2016 02:03 PM 1,350 SemesterInfoTester.class02/17/2016 11:59 PM 1,050 SemesterInfoTester.java import java.util.Scanner ; public class SemesterInfo { public static int MAX_COURSES = 7 ; public static int MAX_CREDITS = 18 ; private static String WITHDRAWN = `` W '' ; private static int NOT_FOUND = -1 ; protected String name ; protected int creditHours ; protected int completedCourses ; protected int courseCount ; private Scanner input = new Scanner ( System.in ) ; protected CourseInfo [ ] courseList ; /********************************************************************************************** * This builds an empty semester using the given name . **********************************************************************************************/ SemesterInfo ( String name ) { this.name = name ; creditHours = 0 ; completedCourses = 0 ; courseCount = 0 ; courseList = new CourseInfo [ MAX_COURSES ] ; } /********************************************************************************************** * This will confirm if a requested semester name is valid . A valid semester must have the * season as the first word and year as the second word . The year must be between 1900 * and 9999 . The season is not currently case sensitive , although it is recommended to * have the season match Title Case ( i.e . `` Spring '' instead of `` spring '' ) . **********************************************************************************************/ public static boolean isValidSemester ( String name ) { final int MIN_YEAR = 1900 ; final int MAX_YEAR = 9999 ; boolean valid ; String [ ] words = name.split ( `` `` ) ; int year ; if ( words.length ! = 2 ) { valid = false ; } else if ( ! words [ 0 ] .equalsIgnoreCase ( `` Summer '' ) & & ! words [ 0 ] .equalsIgnoreCase ( `` Fall '' ) & & ! words [ 0 ] .equalsIgnoreCase ( `` Winter '' ) & & ! words [ 0 ] .equalsIgnoreCase ( `` Spring '' ) ) { valid = false ; } else { try { year = Integer.parseInt ( words [ 1 ] ) ; if ( year < MIN_YEAR || year > MAX_YEAR ) { valid = false ; } else { valid = true ; } } catch ( NumberFormatException e ) { valid = false ; } } return valid ; } /********************************************************************************************** * This will add a new course to the semester 's list . If the current semester is already full * of courses , the method will return a false value . **********************************************************************************************/ public AddResult addCourse ( CourseInfo course ) { AddResult result ; if ( completedCourses > = MAX_COURSES ) { result = AddResult.EXCEEDS_COURSE_MAX ; } else if ( creditHours + course.creditHours > MAX_CREDITS ) { result = AddResult.EXCEEDS_CREDIT_MAX ; } else if ( searchCourse ( course.prefix , course.courseNumber ) ! = NOT_FOUND ) { result = AddResult.REDUNDANT ; } else { courseList [ courseCount ] = course ; if ( ! course.wasWithdrawn ( ) ) { completedCourses++ ; creditHours += course.creditHours ; } courseCount++ ; result = AddResult.SUCCESS ; } return result ; } /********************************************************************************************** * This removes a course by name if it exists in the course list , and returns whether the * course was successfully removed . **********************************************************************************************/ public boolean removeCourse ( String prefix , String number ) { boolean removed ; int location = searchCourse ( prefix , number ) ; if ( location == NOT_FOUND ) { removed = false ; } else { if ( ! courseList [ location ] .wasWithdrawn ( ) ) { completedCourses -- ; creditHours -= courseList [ location ] .creditHours ; } courseCount -- ; for ( int i = location ; location < courseCount ; i++ ) { courseList [ i ] = courseList [ i+1 ] ; } removed = true ; } return removed ; } /********************************************************************************************** * This will allow a course to be withdrawn after it 's been entered . Once a course has been * withdrawn , it ca n't be re-added , but will stay on the transcript as withdrawn . **********************************************************************************************/ public boolean withdrawCourse ( String prefix , String number ) { boolean withdrawn ; int location = searchCourse ( prefix , number ) ; if ( location == NOT_FOUND ) { withdrawn = false ; } //This ca n't be a combined check in case location does n't exist ( -1 index ) else if ( courseList [ location ] .wasWithdrawn ( ) ) { withdrawn = false ; } else { creditHours -= courseList [ location ] .creditHours ; completedCourses -- ; courseList [ location ] .withdraw ( ) ; withdrawn = true ; } return withdrawn ; } /********************************************************************************************** * This will search the course list for the title of the course given , and returns the index * of the course . If the course is n't found , -1 is returned . **********************************************************************************************/ public int searchCourse ( String prefix , String number ) { int index ; boolean found = false ; for ( index = 0 ; index < courseCount & & ! found ; index++ ) { if ( courseList [ index ] .prefix.equalsIgnoreCase ( prefix ) & & courseList [ index ] .courseNumber.equalsIgnoreCase ( number ) ) { found = true ; } } if ( ! found ) { index = 0 ; } return ( index - 1 ) ; } /********************************************************************************************** * This will prompt the user for the list of courses taken in the semester , using the console * for input and output . This method then creates Course objects for each course created , * and adds it to the SemesterInfo object using the addCourse method . **********************************************************************************************/ public void promptCourseList ( String quitStr ) throws UnsupportedOperationException { final int MAX_PREFIX_LEN = 3 ; final int MAX_COURSENUM_LEN = 4 ; AddResult result ; CourseInfo course ; String prefix ; String number ; double grade ; String gradeStr ; int credits ; boolean withdrawn ; if ( completedCourses == MAX_COURSES ) { System.out.println ( `` Student is already taking the maximum number of courses ! \n '' ) ; } else if ( creditHours == MAX_CREDITS ) { System.out.println ( `` Student is already taking the maximum number of credits ! \n '' ) ; } else { System.out.print ( `` \tEnter a course prefix ( \ '' '' + quitStr + `` \ '' when done ) : `` ) ; prefix = input.nextLine ( ) .toUpperCase ( ) ; while ( ! prefix.equalsIgnoreCase ( quitStr ) & & completedCourses < MAX_COURSES ) { withdrawn = false ; while ( prefix.isEmpty ( ) || prefix.length ( ) > MAX_PREFIX_LEN ) { System.out.print ( `` \tInvalid prefix.\nEnter a course prefix ( 1- '' + MAX_PREFIX_LEN + `` characters ) : `` ) ; prefix = input.nextLine ( ) .toUpperCase ( ) ; } System.out.print ( `` \tEnter a course number : `` ) ; number = input.nextLine ( ) .toUpperCase ( ) ; while ( number.isEmpty ( ) || number.length ( ) > MAX_COURSENUM_LEN ) { System.out.print ( `` \tInvalid number.\nEnter a course number ( 1- '' + MAX_COURSENUM_LEN + `` characters ) : `` ) ; number = input.nextLine ( ) .toUpperCase ( ) ; } System.out.print ( `` \tEnter credit hours : `` ) ; credits = Integer.parseInt ( input.nextLine ( ) ) ; while ( credits < CourseInfo.MIN_CREDITS || credits > CourseInfo.MAX_CREDITS ) { System.out.print ( `` \tInvalid number.\nEnter credit hours ( 1 - `` + CourseInfo.MAX_CREDITS + `` ) : `` ) ; credits = Integer.parseInt ( input.nextLine ( ) ) ; } System.out.print ( `` \tEnter grade point ( \ '' '' + WITHDRAWN + `` \ '' if withdrawn ) : `` ) ; gradeStr = input.nextLine ( ) ; if ( gradeStr.equalsIgnoreCase ( WITHDRAWN ) ) { withdrawn = true ; grade = CourseInfo.MIN_GRADE_POINT ; } else { try { grade = Double.parseDouble ( gradeStr ) ; } catch ( NumberFormatException e ) { grade = CourseInfo.MIN_GRADE_POINT - 1 ; } } while ( grade < CourseInfo.MIN_GRADE_POINT || grade > CourseInfo.MAX_GRADE_POINT ) { if ( gradeStr.equalsIgnoreCase ( WITHDRAWN ) ) { withdrawn = true ; grade = CourseInfo.MIN_GRADE_POINT ; } else { try { grade = Double.parseDouble ( gradeStr ) ; } catch ( NumberFormatException e ) { grade = CourseInfo.MIN_GRADE_POINT - 1 ; } } if ( grade < CourseInfo.MIN_GRADE_POINT || grade > CourseInfo.MAX_GRADE_POINT ) { System.out.print ( `` \tInvalid number.\nEnter grade point ( \ '' '' + WITHDRAWN + `` \ '' or 0.0 - `` + CourseInfo.MAX_GRADE_POINT + `` ) : `` ) ; grade = Double.parseDouble ( input.nextLine ( ) ) ; } } if ( withdrawn ) { course = new CourseInfo ( prefix , number , credits ) ; } else { course = new CourseInfo ( prefix , number , grade , credits ) ; } result = addCourse ( course ) ; switch ( result ) { case SUCCESS : System.out.println ( `` \tSuccessfully added `` + course.prefix + `` - '' + course.courseNumber ) ; break ; case REDUNDANT : System.out.println ( `` \tCourse was already entered . `` ) ; break ; case EXCEEDS_COURSE_MAX : //Should n't happen , since prompting should end first System.out.println ( `` \tStudent is already taking a full course load ! `` ) ; break ; case EXCEEDS_CREDIT_MAX : System.out.println ( `` \tStudent is already taking too many credits ( `` + creditHours + `` of `` + MAX_CREDITS + `` ) ! `` ) ; break ; default : throw new UnsupportedOperationException ( `` \tUnknown error occurred while `` + `` adding course : `` + result ) ; } if ( completedCourses < MAX_COURSES ) { System.out.print ( `` \n\tEnter a course prefix ( \ '' '' + quitStr + `` \ '' when done ) : `` ) ; prefix = input.nextLine ( ) .toUpperCase ( ) ; } } } } /********************************************************************************************** * This will calculate the GPA of all courses currently in the semester . **********************************************************************************************/ public double calcGPA ( ) { double totalGradePoint = 0.0 ; for ( int i = 0 ; i < courseCount ; i++ ) { if ( ! courseList [ i ] .wasWithdrawn ( ) ) { totalGradePoint += courseList [ i ] .calcGradePoint ( ) ; } } return ( totalGradePoint / creditHours ) ; } /********************************************************************************************** * This will display the entire semester 's course list and GPA in tabular format , centered to * a window 80 characters wide . **********************************************************************************************/ public void displaySemester ( ) { String gpaString ; if ( courseCount == 0 ) { System.out.println ( `` No courses were taken this semester . `` ) ; } else { System.out.println ( `` `` + name ) ; System.out.println ( `` Course Grade Credits Grade Point '' ) ; for ( int i = 0 ; i < courseCount ; i++ ) { System.out.println ( `` `` + courseList [ i ] .toString ( ) ) ; } if ( completedCourses < 1 ) { gpaString = `` GPA : N/A '' ; } else { gpaString = String.format ( `` GPA : % 4.2f '' , calcGPA ( ) ) ; } System.out.println ( `` `` + gpaString ) ; } System.out.println ( ) ; } /********************************************************************************************** * This method will display the semester details on a single line in tabular format for the * following expected table example : * Semester Date Courses Credits GPA * Fall 2016 4 15 4.00 * There is no padding on either side of the string , and no new line at end of line . **********************************************************************************************/ @ Override public String toString ( ) { String gpa ; if ( completedCourses ! = 0 ) { gpa = String.format ( `` % 4.2f '' , calcGPA ( ) ) ; } else { gpa = `` N/A '' ; } return String.format ( `` % -13s % 1d % 2d % 4s '' , name , completedCourses , creditHours , gpa ) ; } } /************************************************************************************************** * Program Description : This class holds the information for a specific course . **************************************************************************************************/public class CourseInfo { public static int MIN_CREDITS = 1 ; public static int MAX_CREDITS = 4 ; public static double MIN_GRADE_POINT = 0.0 ; public static double MAX_GRADE_POINT = 4.0 ; protected String prefix ; protected String courseNumber ; protected int creditHours ; protected double grade ; private boolean withdrawn ; /********************************************************************************************** * This constructor will assign the course prefix , course number , grade and credits when a * course was not withdrawn . **********************************************************************************************/ public CourseInfo ( String prefix , String number , double grade , int credits ) { this.prefix = prefix ; courseNumber = number ; this.grade = grade ; creditHours = credits ; withdrawn = false ; } /********************************************************************************************** * This constructor will assign the course prefix , course number , grade and credits when a * course was not withdrawn . **********************************************************************************************/ public CourseInfo ( String prefix , String number , int credits ) { this.prefix = prefix ; courseNumber = number ; grade = 0.0 ; creditHours = credits ; withdrawn = true ; } /********************************************************************************************** * This method will calculate the grade point , multiplying the credit hours by the grade . **********************************************************************************************/ public double calcGradePoint ( ) { return ( creditHours * grade ) ; } /********************************************************************************************** * This method will tell whether the course was withdrawn or not . **********************************************************************************************/ public boolean wasWithdrawn ( ) { return withdrawn ; } /********************************************************************************************** * This method will withdraw the course **********************************************************************************************/ public void withdraw ( ) { withdrawn = true ; grade = 0.0 ; creditHours = 0 ; } /********************************************************************************************** * This method will display the course details on a single line in tabular format for the * following expected table example : * Course Grade Credits Grade Point * CSC-264 4.0 4 16.00 * There is no padding on either side of the string , and no new line at end of line . **********************************************************************************************/ @ Override public String toString ( ) { String str ; if ( wasWithdrawn ( ) ) { str = String.format ( `` % 3s- % -4s W % 1d N/A '' , prefix , courseNumber , creditHours ) ; } else { str = String.format ( `` % 3s- % -4s % 4.2f % 1d % 5.2f '' , prefix , courseNumber , grade , creditHours , calcGradePoint ( ) ) ; } return str ; } } public enum AddResult { SUCCESS , //Course/Semester was added successfully EXCEEDS_COURSE_MAX , //Student is already taking too many courses EXCEEDS_CREDIT_MAX , //Student is already taking too many credits REDUNDANT //Course/Semester already exists }"
"package analyzer.block.geo.main ; import analyzer.block.geo.model.Geo ; import analyzer.block.geo.result.GeoResult ; import java.awt . * ; import java.io.BufferedReader ; import java.io.FileNotFoundException ; import java.io.IOException ; import java.nio.file.Files ; import java.nio.file.Paths ; import java.time.LocalDate ; import java.time.format.DateTimeFormatter ; import java.time.format.DateTimeParseException ; import java.util.List ; import java.util . * ; public class GeoBlockAnalyzer { private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern ( `` yyyy-MM-dd '' ) ; private final int width ; private final int height ; private final String csvFilePath ; private GeoResult result = new GeoResult ( ) ; // Map of the geo id and respective geo object private final Map < Integer , Geo > geoMap = new HashMap < > ( ) ; // Map of coordinates to each geo in the grid private final Map < Point , Geo > coordMap = new HashMap < > ( ) ; /** * Constructs a geo grid of the given width and height , populated with the geo data provided in * the csv file * * @ param width the width of the grid * @ param height the height of the grid * @ param csvFilePath the csv file containing the geo data * @ throws IOException */ public GeoBlockAnalyzer ( final int width , final int height , final String csvFilePath ) throws IOException { if ( ! Files.exists ( Paths.get ( csvFilePath ) ) || Files.isDirectory ( Paths.get ( csvFilePath ) ) ) { throw new FileNotFoundException ( csvFilePath ) ; } if ( width < = 0 || height < = 0 ) { throw new IllegalArgumentException ( `` Input height or width is 0 or smaller '' ) ; } this.width = width ; this.height = height ; this.csvFilePath = csvFilePath ; populateGeoGrid ( ) ; populateCoordinatesMap ( ) ; calculateGeoNeighbours ( ) ; // printNeighbours ( ) ; } /** @ return the largest geo block in the input grid */ public GeoResult getLargestGeoBlock ( ) { for ( final Geo geo : this.geoMap.values ( ) ) { final List < Geo > visited = new ArrayList < > ( ) ; search ( geo , visited ) ; } return this.result ; } /** * Iterative DFS implementation to find largest geo block . * * @ param geo the geo to be evaluated * @ param visited list of visited geos */ private void search ( Geo geo , final List < Geo > visited ) { final Deque < Geo > stack = new LinkedList < > ( ) ; stack.push ( geo ) ; while ( ! stack.isEmpty ( ) ) { geo = stack.pop ( ) ; if ( visited.contains ( geo ) ) { continue ; } visited.add ( geo ) ; final List < Geo > neighbours = geo.getNeighbours ( ) ; for ( int i = neighbours.size ( ) - 1 ; i > = 0 ; i -- ) { final Geo g = neighbours.get ( i ) ; if ( ! visited.contains ( g ) ) { stack.push ( g ) ; } } } if ( this.result.getSize ( ) < visited.size ( ) ) { this.result = new GeoResult ( visited ) ; } } /** * Creates a map of the geo grid from the csv file data * * @ throws IOException */ private void populateGeoGrid ( ) throws IOException { try ( final BufferedReader br = Files.newBufferedReader ( Paths.get ( this.csvFilePath ) ) ) { int lineNumber = 0 ; String line = `` '' ; while ( ( line = br.readLine ( ) ) ! = null ) { lineNumber++ ; final String [ ] geoData = line.split ( `` , '' ) ; LocalDate dateOccupied = null ; // Handle for empty csv cells for ( int i = 0 ; i < geoData.length ; i++ ) { // Remove leading and trailing whitespace geoData [ i ] = geoData [ i ] .replace ( `` `` , `` '' ) ; if ( geoData [ i ] .isEmpty ( ) || geoData.length > 3 ) { throw new IllegalArgumentException ( `` There is missing data in the csv file at line : `` + lineNumber ) ; } } try { dateOccupied = LocalDate.parse ( geoData [ 2 ] , formatter ) ; } catch ( final DateTimeParseException e ) { throw new IllegalArgumentException ( `` There input date is invalid on line : `` + lineNumber ) ; } this.geoMap.put ( Integer.parseInt ( geoData [ 0 ] ) , new Geo ( Integer.parseInt ( geoData [ 0 ] ) , geoData [ 1 ] , dateOccupied ) ) ; } } } /** Create a map of each coordinate in the grid to its respective geo */ private void populateCoordinatesMap ( ) { // Using the geo id , calculate its point on the grid for ( int i = this.height - 1 ; i > = 0 ; i -- ) { int blockId = ( i * this.width ) ; for ( int j = 0 ; j < this.width ; j++ ) { if ( this.geoMap.containsKey ( blockId ) ) { final Geo geo = this.geoMap.get ( blockId ) ; geo.setCoordinates ( i , j ) ; this.coordMap.put ( geo.getCoordinates ( ) , geo ) ; } blockId++ ; } } } private void calculateGeoNeighbours ( ) { for ( final Geo geo : this.geoMap.values ( ) ) { addNeighboursToGeo ( geo ) ; } } private void addNeighboursToGeo ( final Geo geo ) { final int x = geo.getCoordinates ( ) .x ; final int y = geo.getCoordinates ( ) .y ; final Point [ ] possibleNeighbours = { new Point ( x , y + 1 ) , new Point ( x - 1 , y ) , new Point ( x + 1 , y ) , new Point ( x , y - 1 ) } ; Geo g ; for ( final Point p : possibleNeighbours ) { if ( this.coordMap.containsKey ( p ) ) { g = this.coordMap.get ( p ) ; if ( g ! = null ) { geo.getNeighbours ( ) .add ( g ) ; } } } } private void printNeighbours ( ) { for ( final Geo geo : this.geoMap.values ( ) ) { System.out.println ( `` Geo `` + geo.getId ( ) + `` has the following neighbours : `` ) ; for ( final Geo g : geo.getNeighbours ( ) ) { System.out.println ( g.getId ( ) ) ; } } } } package analyzer.block.geo.result ; import analyzer.block.geo.model.Geo ; import java.util.ArrayList ; import java.util.Comparator ; import java.util.List ; public class GeoResult { private final List < Geo > geosInBlock = new ArrayList < > ( ) ; public GeoResult ( ) { } public GeoResult ( final List < Geo > geosInBlock ) { this.geosInBlock.addAll ( geosInBlock ) ; } public List < Geo > getGeosInBlock ( ) { this.geosInBlock.sort ( Comparator.comparingInt ( Geo : :getId ) ) ; return this.geosInBlock ; } public int getSize ( ) { return this.geosInBlock.size ( ) ; } @ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( ) ; sb.append ( `` The geos in the largest cluster of occupied Geos for this GeoBlock are : \n '' ) ; for ( final Geo geo : this.geosInBlock ) { sb.append ( geo.toString ( ) ) .append ( `` \n '' ) ; } return sb.toString ( ) ; } } package analyzer.block.geo.model ; import java.awt.Point ; import java.time.LocalDate ; import java.util.ArrayList ; import java.util.List ; import java.util.Objects ; public class Geo { private final int id ; private final String name ; private final LocalDate dateOccupied ; private final Point coordinate ; private final List < Geo > neighbours = new ArrayList < > ( ) ; public Geo ( final int id , final String name , final LocalDate dateOccupied ) { this.id = id ; this.name = name ; this.dateOccupied = dateOccupied ; this.coordinate = new Point ( ) ; } public int getId ( ) { return this.id ; } public String getName ( ) { return this.name ; } public LocalDate getDateOccupied ( ) { return this.dateOccupied ; } public void setCoordinates ( final int x , final int y ) { this.coordinate.setLocation ( x , y ) ; } public Point getCoordinates ( ) { return this.coordinate ; } public String toString ( ) { return this.id + `` , `` + this.name + `` , `` + this.dateOccupied ; } public List < Geo > getNeighbours ( ) { return this.neighbours ; } @ Override public int hashCode ( ) { return Objects.hash ( this.id , this.name , this.dateOccupied ) ; } @ Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || this.getClass ( ) ! = obj.getClass ( ) ) { return false ; } final Geo geo = ( Geo ) obj ; return this.id == geo.getId ( ) & & this.name.equals ( geo.getName ( ) ) & & this.dateOccupied == geo.getDateOccupied ( ) ; } }"
"public static final < T > Collection < List < T > > partitionBasedOnSize ( List < T > inputList , int size ) { AtomicInteger counter = new AtomicInteger ( 0 ) ; return inputList.stream ( ) .collect ( Collectors.groupingBy ( s - > counter.getAndIncrement ( ) / size ) ) .values ( ) ; } public List < Account > getChildrenList ( List < Long > ids ) { List < Account > childrenList = new ArrayList < > ( ) ; Collection < List < Long > > childrenId2dList = PartitionArray.partitionBasedOnSize ( childrenIdsList , 30000 ) ; for ( List < Long > list : childrenId2dList ) { //this is my business logic : start childrenList.addAll ( accountRepository.getAccounts ( list ) ) ; //this is my business logic : end } return childrenAccountsList ; }"
public boolean isSomethingForAnyone ( ) { boolean flag = false ; for ( Item item : listOfItems ) { flag = flag || item.isSomething ( ) ; } return flag ; } public boolean isSomethingForAnyone ( ) { for ( Item item : listOfItems ) { if ( item.isSomething ( ) ) return true ; } return false ; }
"private void fillCounterArray ( int [ ] counters , int position ) { Queue < Integer > queue = new ArrayDeque < Integer > ( 900 ) ; // Obtain the possible destinations from position , check the valid ones // and add it the stack . int [ ] destination = board.getPossibleDestinations ( position ) ; for ( int i = 0 ; i < destination.length ; i++ ) { if ( board.getBoard ( ) [ destination [ i ] ] == Board.CLEAR ) { counters [ destination [ i ] ] = 1 ; queue.add ( destination [ i ] ) ; } } // Now fill up the space . while ( ! queue.isEmpty ( ) ) { int pos = queue.remove ( ) ; int steps = counters [ pos ] ; destination = board.getPossibleDestinations ( pos ) ; for ( int i = 0 ; i < destination.length ; i++ ) { int dest = destination [ i ] ; if ( board.getBoard ( ) [ dest ] == Board.CLEAR & & ( counters [ dest ] > steps + 1 || counters [ dest ] == 0 ) ) { counters [ dest ] = steps + 1 ; queue.add ( dest ) ; } } } } private void fillCounterArray ( int [ ] counters , int position ) { // Array and its pointer . int [ ] queue = new int [ 900 ] ; // max size of field int head = 0 ; // Obtain the possible destinations from position , check the valid ones // and add it the stack . int [ ] destination = board.getPossibleDestinations ( position ) ; for ( int i = 0 ; i < destination.length ; i++ ) { if ( board.getBoard ( ) [ destination [ i ] ] == Board.CLEAR ) { counters [ destination [ i ] ] = 1 ; queue [ head++ ] = dest [ i ] ; } } // Now fill up the space . while ( head > 0 ) { int pos = queue [ -- head ] ; int steps = counters [ pos ] ; destination = board.getPossibleDestinations ( pos ) ; for ( int i = 0 ; i < destination.length ; i++ ) { int dest = destination [ i ] ; if ( board.getBoard ( ) [ dest ] == Board.CLEAR & & ( counters [ dest ] > steps + 1 || counters [ dest ] == 0 ) ) { counters [ dest ] = steps + 1 ; queue [ head++ ] = dest ; } } } }"
"import java.util.List ; public class WildcardError { void foo ( List < ? > i ) { i.set ( 0 , i.get ( 0 ) ) ; } } public class WildcardFixed { void foo ( List < ? > i ) { fooHelper ( i ) ; } // Helper method created so that the wildcard can be captured // through type inference . private < T > void fooHelper ( List < T > l ) { l.set ( 0 , l.get ( 0 ) ) ; } } class GenericsTest { static < K > void bar ( List < K > l ) { l.set ( 0 , l.get ( l.size ( ) - 1 ) ) ; } public static void main ( String [ ] args ) { List < Integer > lst = Arrays.asList ( 1 , 2 , 3 , 4 ) ; bar ( lst ) ; System.out.println ( lst ) ; // [ 4 , 3 , 2 , 4 ] } }"
"@ Overridepublic String upload ( String path , byte [ ] fileContents ) { final File file = new File ( path ) ; try { FileUtils.writeByteArrayToFile ( file , fileContents ) ; } catch ( IOException e ) { throw new RuntimeException ( `` Error writing file to path `` + path , e ) ; } return `` '' ; } # ! /bin/bashCONFIGDIR= $ { spring.config.location } CONFIGFILE= $ CONFIGDIR/ $ { app.name } .conf # Loading a settings from CONFIGFILE [ -f $ CONFIGFILE ] & & source $ CONFIGFILE # Setting JAVA_BINif [ -z `` $ JAVACMD '' ] ; then if [ -n `` $ JAVA_HOME '' ] ; then if [ -x `` $ JAVA_HOME/jre/sh/java '' ] ; then # IBM 's JDK on AIX uses strange locations for the executables JAVACMD= '' $ JAVA_HOME/jre/sh/java '' else JAVACMD= '' $ JAVA_HOME/bin/java '' fi else JAVACMD= '' ` which java ` `` fifi # Starting the application $ JAVACMD $ JAVA_OPTS -jar $ { app.home } /bin/ $ { build.finalName } .jar `` $ @ '' -- spring.config.location= $ CONFIGDIR/"
"public class ClassConstExample extends BaseClassExample { private String xyzProp ; private string inType = `` def '' ; private String outType = `` def '' ; private String flagSpecial = `` none '' ; public ClassConstExample ( final String file , final String header , final String inType , final String outType , final String flag ) { super ( file ) ; init ( header , inType , outType , flag ) ; } public ClassConstExample ( final String file , final String header , final String inType , final String outType , final String flag , final String mode ) { super ( file , mode ) ; init ( header , inType , outType , flag ) ; } public ClassConstExample ( final String file , final String header , final String flag ) { super ( file ) ; //some logic here that 's irrelevant to this ... this.xyxProp = getXYZ ( header ) ; this.flagSpecial = getFlagSpecial ( flag ) ; } ... }"
MP |- > RT |- > RT |- > RT |- > RTMP |- > RT |- > RT ...
new ExpectedCondition < WebElement > ( ) { @ Override public WebElement apply ( WebDriver d ) { return d.findElement ( By.id ( `` myDynamicElement '' ) ) ; } } ) ;
"public Nutrients nutrientsCalculator ( DailyMeals dailyMeals ) { String foodNamesForRequest = prepareFoodNamesForRequest ( dailyMeals ) ; HttpEntity < NutrientsBodyForRequest > requestBody = prepareRequestForAPICall ( foodNamesForRequest ) ; ResponseEntity < List < FoodNutritional > > response = //create request here if ( nonNull ( response.getBody ( ) ) ) { double totalFat = response.getBody ( ) .stream ( ) .map ( FoodNutritional : :getTotalFat ) .mapToDouble ( Double : :doubleValue ) .sum ( ) ; double totalProtein = response.getBody ( ) .stream ( ) .map ( FoodNutritional : :getProtein ) .mapToDouble ( Double : :doubleValue ) .sum ( ) ; double totalCarbohydrates = response.getBody ( ) .stream ( ) .map ( FoodNutritional : :getTotalCarbohydrate ) .mapToDouble ( Double : :doubleValue ) .sum ( ) ; double totalDietaryFiber = response.getBody ( ) .stream ( ) .map ( FoodNutritional : :getDietaryFiber ) .mapToDouble ( Double : :doubleValue ) .sum ( ) ; return Nutrients.builder ( ) .carbohydrates ( totalCarbohydrates ) .protein ( totalProtein ) .fat ( totalFat ) .dietaryFiber ( totalDietaryFiber ) .build ( ) ; } return new Nutrients ( ) ; } @ JsonInclude ( JsonInclude.Include.NON_NULL ) @ JsonIgnoreProperties ( ignoreUnknown = true ) @ Getter @ Setter @ Builder @ NoArgsConstructor @ AllArgsConstructor @ EqualsAndHashCodeclass FoodNutritional { @ JsonProperty ( `` food_name '' ) private String foodName ; @ JsonProperty ( `` brand_name '' ) private String brandName ; @ JsonProperty ( `` serving_qty '' ) private Integer servingQuantity ; @ JsonProperty ( `` serving_unit '' ) private String servingUnit ; @ JsonProperty ( `` serving_weight_grams '' ) private String servingWeightGrams ; @ JsonProperty ( `` nf_calories '' ) private Double calories ; @ JsonProperty ( `` nf_total_fat '' ) private Double totalFat ; @ JsonProperty ( `` nf_saturated_fat '' ) private Double saturatedFat ; @ JsonProperty ( `` nf_cholesterol '' ) private Double cholesterol ; @ JsonProperty ( `` nf_sodium '' ) private Double sodium ; @ JsonProperty ( `` nf_total_carbohydrate '' ) private Double totalCarbohydrate ; @ JsonProperty ( `` nf_dietary_fiber '' ) private Double dietaryFiber ; @ JsonProperty ( `` nf_sugars '' ) private Double sugars ; @ JsonProperty ( `` nf_protein '' ) private Double protein ; @ JsonProperty ( `` nf_potassium '' ) private Double potassium ; } private static Nutrients reduceNutrients ( Nutrients n1 , Nutrients n2 ) { return Nutrients.builder ( ) .protein ( n1.getProtein ( ) + n2.getProtein ( ) ) .carbohydrates ( n1.getCarbohydrates ( ) + n2.getCarbohydrates ( ) ) .dietaryFiber ( n1.getDietaryFiber ( ) + n2.getDietaryFiber ( ) ) .fat ( n1.getFat ( ) + n2.getFat ( ) ) .build ( ) ; } private static Nutrients fromFoodNutritionalToNutrients ( FoodNutritional foodNutritional ) { return Nutrients.builder ( ) .dietaryFiber ( foodNutritional.getDietaryFiber ( ) ) .carbohydrates ( foodNutritional.getTotalCarbohydrate ( ) ) .fat ( foodNutritional.getTotalFat ( ) ) .protein ( foodNutritional.getProtein ( ) ) .build ( ) ; } Stream < FoodNutritional > foodNutritionalStream = Optional.ofNullable ( response.getBody ( ) ) .stream ( ) .flatMap ( List : :stream ) ; Nutrients nutrients = foodNutritionalStream .map ( NutrientsCalculatorService : :fromFoodNutritionalToNutrients ) .reduce ( NutrientsCalculatorService : :reduceNutrients ) .orElseThrow ( ( ) - > new CustomException ( `` custom_exception '' ) ;"
"List < DD > container A < DD , DI > a ; if ( container ! =null || ! container.isEmpty ( ) ) { for ( DD dd : container ) { a = dd.getPrescription ( ) ; break ; } } DD detail = container.stream ( ) .findFirst ( ) .get ( ) ;"
"DateTime dateTime = DateTime .parse ( `` 1-JAN-1900 '' , DateTimeFormat.forPattern ( `` dd-MMM-yyyy '' ) ) .plusSeconds ( 2075866000 ) ; String dateTimeStr = DateTimeFormat.forPattern ( `` yyyy/MM/dd HH : mm : ss '' ) .print ( dateTime ) ; System.out.println ( dateTimeStr ) ; MutableDateTime dateTime = MutableDateTime .parse ( `` 1-JAN-1900 '' , DateTimeFormat.forPattern ( `` dd-MMM-yyyy '' ) ) ; dateTime.add ( DurationFieldType.seconds ( ) , 2075866000 ) ; String dateTimeStr = DateTimeFormat.forPattern ( `` yyyy/MM/dd HH : mm : ss '' ) .print ( dateTime.toDateTime ( ) ) ; System.out.println ( dateTimeStr ) ; select to_date ( '1900-JAN-1 ' ) + 2075866000/86400 from dual"
package com.stackoverflow.programmer ; import java.math.BigInteger ; public class Test { public static void main ( String [ ] args ) { String number = `` -12121111111111111 '' ; Number numberObject = null ; try { numberObject = Integer.valueOf ( number ) ; } catch ( NumberFormatException nfe ) { System.out.println ( `` Number will not fit into Integer type . Trying Long ... '' ) ; try { numberObject = Long.valueOf ( number ) ; } catch ( NumberFormatException nfeb ) { System.out.println ( `` Number will not fit into Long type . Trying BigInteger ... '' ) ; numberObject = new BigInteger ( number ) ; } } System.out.println ( numberObject.getClass ( ) + `` : `` + numberObject.toString ( ) ) ; } }
"public class FastPoint { public int x ; public int y ; public FastPoint ( int x , int y ) { this.x = x ; this.y = y ; } } for ( int i = 0 ; i < maxRuns ; i++ ) { point = new Point ( i , i ) ; } for ( int i = 0 ; i < maxRuns ; i++ ) { a [ 0 ] = i ; a [ 1 ] = i ; }"
"@ Entity @ Table ( name= '' clients '' ) @ NamedQuery ( name= '' ClientModel.findAll '' , query= '' SELECT c FROM ClientModel c '' ) public class ClientModel implements Serializable { private static final long serialVersionUID = 1L ; @ Id @ Column ( name= '' id_client '' ) private long idClient ; public String name ; public ClienteModel ( ) { } public long getIdClient ( ) { return this.idClient ; } public void setIdClient ( long idClient ) { this.idClient = idClient ; } public String getName ( ) { return this.name ; } public void setName ( String name ) { this.name = name ; } //CUSTOM CODE public static final String idClientProperty = `` idClient '' ; public static final String nameProperty = `` name '' ; } ClientModel.nameProperty"
public Element getValue ( int index ) { }
"exec.schedule ( ( ) - > System.out.println ( `` done '' ) , 1 , TimeUnit.SECONDS ) ;"
`` | % 1 $ -10s| % 2 $ -10s| % 3 $ -20s|\n ''
"int [ ] [ ] Level02 = new int [ ] [ ] { { 11 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 12 } , { 11 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 12 } , { 11 , -1 , -1 , -1 , -1 , 13 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 13 , -1 , -1 , 13 , -1 , -1 , -1 , -1 , 12 } , { 11 , 13 , -1 , -1 , 27 , 27 , 27 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 13 , -1 , -1 , -1 , -1 , -1 , 13 , 13 , -1 , -1 , -1 , 13 , 13 , -1 , -1 , -1 , 32 , -1 , -1 , 27 , 27 , 25 , 25 , 27 , 27 , -1 , -1 , 32 , 12 } , { 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , -1 , -1 , 13 , 13 , -1 , -1 , -1 , 13 , -1 , -1 , -1 , 25 , 25 , 25 , -1 , -1 , -1 , 27 , 27 , 27 , 27 , -1 , -1 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 16 , 16 , 16 , 16 , 16 , 16 , 1 , 1 , 1 , 1 , 1 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } } int [ ] [ ] [ ] all = new int [ ] [ ] [ ] { int [ ] [ ] Level01= new int [ ] [ ] { { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } } ; int [ ] [ ] Level02= new int [ ] [ ] { { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } , { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } } ; } ;"
public ImmutableList < String > getNames ( ) ; public List < String > getNames ( ) ;
public class Test { private int a = b ; private final static int b = 10 ; public int getA ( ) { return a ; } } public class Hello { public static void main ( String [ ] args ) { Test test = new Test ( ) ; System.out.println ( test.getA ( ) ) ; } }
public class Test { public static void main ( String args [ ] ) { Integer a = 100 ; Integer b = 100 ; Integer c = 5000 ; Integer d = 5000 ; System.out.println ( a ) ; System.out.println ( b ) ; System.out.println ( c ) ; System.out.println ( d ) ; if ( a == b ) System.out.println ( `` a & b Both are Equal '' ) ; else System.out.println ( `` a & b are Not Equal '' ) ; if ( c == d ) System.out.println ( `` c & d Both are Equal '' ) ; else System.out.println ( `` c & d are Not Equal '' ) ; } }
class Test { public static void f ( ) { } void m ( ) { Test. < String > f ( ) ; } }
List < Thread > threads = new ArrayList < Thread > ( ) ; for ( Test test : testsToBeExecuted ) { Thread t = new Thread ( test ) ; threads.add ( t ) ; t.start ( ) ; } for ( Thread thread : threads ) { thread.join ( ) ; }
for ( p=0 ; p < a [ j ] ; p++ )
"public class MOuter { private int m = ( int ) ( Math.random ( ) * 100 ) ; public static void main ( String [ ] args ) { MOuter that = new MOuter ( ) ; that.go ( ( int ) ( Math.random ( ) * 100 ) , ( int ) ( Math.random ( ) * 100 ) ) ; } public void go ( int x , final int y ) { int a = x + y ; final int b = x - y ; class MInner { public void method ( ) { System.out.println ( `` m is `` +m ) ; System.out.println ( `` x is `` +x ) ; // supposedly illegal - ' x ' not final System.out.println ( `` y is : `` +y ) ; System.out.println ( `` a is `` +a ) ; // supposedly illegal ? - ' a ' not final } } MInner that = new MInner ( ) ; that.method ( ) ; } }"
"public class ThreadTester { private List < Integer > monitor = new ArrayList < Integer > ( ) ; private Integer cnt = 0 ; private static final int NUM_EVENTS = 2313 ; private final int THREAD_COUNT = 13 ; public ThreadTester ( ) { } public void go ( ) { Runnable r = new Runnable ( ) { @ Override public void run ( ) { for ( int ii=0 ; ii < NUM_EVENTS ; ++ii ) { synchronized ( monitor ) { synchronized ( cnt ) { // < -- is this synchronized necessary ? monitor.add ( cnt ) ; } // synchronized ( cnt ) { // cnt++ ; // < -- why does moving the synchronized block to here result in the correct value for cnt ? // } } synchronized ( cnt ) { cnt++ ; // < -- why does moving the synchronized block here result in cnt being wrong ? } } // synchronized ( cnt ) { // cnt += NUM_EVENTS ; // < -- moving the synchronized block here results in the correct value for cnt , no surprise// } } } ; Thread [ ] threads = new Thread [ THREAD_COUNT ] ; for ( int ii=0 ; ii < THREAD_COUNT ; ++ii ) { threads [ ii ] = new Thread ( r ) ; } for ( int ii=0 ; ii < THREAD_COUNT ; ++ii ) { threads [ ii ] .start ( ) ; } for ( int ii=0 ; ii < THREAD_COUNT ; ++ii ) { try { threads [ ii ] .join ( ) ; } catch ( InterruptedException e ) { } } System.out.println ( `` Both values should be : `` + NUM_EVENTS*THREAD_COUNT ) ; synchronized ( monitor ) { System.out.println ( `` monitor.size ( ) `` + monitor.size ( ) ) ; } synchronized ( cnt ) { System.out.println ( `` cnt `` + cnt ) ; } } public static void main ( String [ ] args ) { ThreadTester t = new ThreadTester ( ) ; t.go ( ) ; System.out.println ( `` DONE '' ) ; } }"
"Stream.of ( 8,3,5,6,7,4 ) //ORDERED , SIZED.filer ( i- > i % 2==0 ) // ORDERED.sorted ( ) // ORDERED , SORTED.distinct ( ) // DISTINCT , ORDERED , SORTED.map ( i- > i+1 ) // ORDERED.unordered ( ) ; //none"
Caused by : java.lang.NullPointerException at pl.yourvision.crm.web.servlets.listExport.ProductListExport.writeCells ( ProductListExport.java:141 ) Double availablePieces = store ! = null ? store.getAvailablePieces ( ) : 0.0 ;
int i = 0 ; i = i++ ; System.out.println ( i ) ; // 0
"@ ToString @ AllArgsConstructorpublic class City { Integer id ; String name ; } record CityRecord ( Integer id , String name ) { } // much cleaner ! List < City > cities = List.of ( new City ( 1 , `` one '' ) , new City ( 2 , `` two '' ) , new City ( 3 , `` three '' ) , new City ( 2 , `` two '' ) ) ; Map < City , Long > cityListMap = cities.stream ( ) .collect ( Collectors.groupingBy ( Function.identity ( ) , Collectors.counting ( ) ) ) ;"
"@ Overridepublic void start ( Stage primaryStage ) throws Exception { setPrimaryStage ( primaryStage ) ; prStage = primaryStage ; Parent root = FXMLLoader.load ( getClass ( ) .getResource ( `` ../gui/main.fxml '' ) ) ; prStage.initStyle ( StageStyle.UNDECORATED ) ; //prStage.setOpacity ( 0.75 ) ; Scene scene = new Scene ( root , 640 , 360 ) ; prStage.setScene ( scene ) ; prStage.getIcons ( ) .add ( new Image ( `` /resource/Images/icon.png '' ) ) ; scene.getStylesheets ( ) .add ( getClass ( ) .getResource ( `` ..//gui/css/NewUICSS.css '' ) .toExternalForm ( ) ) ; prStage.show ( ) ; } public class NewUIController { private static double xOffset = 0 ; private static double yOffset = 0 ; public void initialize ( ) { moveBar.setOnMousePressed ( this : :mousePressed ) ; moveBar.setOnMouseDragged ( this : :mouseDrag ) ; moveBar.setOnMouseReleased ( this : :mouseRealease ) ; mnuBar.setOnMousePressed ( this : :mousePressed ) ; mnuBar.setOnMouseDragged ( this : :mouseDrag ) ; mnuBar.setOnMouseReleased ( this : :mouseRealease ) ; } private void mouseDrag ( MouseEvent event ) { MainJavaFx.getPrimaryStage ( ) .setX ( event.getScreenX ( ) - xOffset ) ; MainJavaFx.getPrimaryStage ( ) .setY ( event.getScreenY ( ) - yOffset ) ; } private void mouseRealease ( MouseEvent event ) { if ( event.getSceneY ( ) == 0 ) { MainJavaFx.getPrimaryStage ( ) .setY ( 0 ) ; } else if ( MainJavaFx.getPrimaryStage ( ) .getY ( ) < 0 ) { MainJavaFx.getPrimaryStage ( ) .setY ( 0 ) ; } } private void mousePressed ( MouseEvent event ) { xOffset = event.getSceneX ( ) ; yOffset = event.getSceneY ( ) ; } public void close ( ) { ( ( Stage ) pnPrincipal.getScene ( ) .getWindow ( ) ) .close ( ) ; } }"
"public class Test1 { public static void main ( String [ ] args ) { String s1 = new String ( new char [ ] { ' J ' , ' a ' , ' v ' , ' a ' } ) ; String s2 = s1.intern ( ) ; System.out.println ( s1 == s2 ) ; } } public class Test2 { public static void main ( String [ ] args ) { String s3 = new String ( new char [ ] { ' U ' , 'd ' , ' a ' , ' y ' , ' a ' , ' n ' } ) ; String s4 = s3.intern ( ) ; System.out.println ( s3 == s4 ) ; } }"
"@ Testfun testBigDecimalToString ( ) { val value = 206.64 val expected = `` 206.64 '' val bigDecimal = BigDecimal ( value ) assertEquals ( expected , value.toString ( ) ) // success assertEquals ( expected , bigDecimal.toString ( ) ) // failed . Actual : 206.6399999999999863575794734060764312744140625 }"
public SecretBlock ( int numbersToArray ) { this.arrayOfNumbers = new int [ AMOUNT ] ; for ( int i = AMOUNT - 1 ; i > = 0 ; i -- ) { this.arrayOfNumbers [ i ] = numbersToArray % 10 ; numbersToArray /= 10 ; } }
xyzbcdabc_lockedcdeefg_lockedfgh xyzbcdcdefghabc_lockedefg_locked
"CREATE TABLE a ( ` id ` INT NOT NULL auto_increment , -- lots of other attributes , PRIMARY KEY ( id ) ) CREATE TABLE b ( ` id ` INT NOT NULL auto_increment , -- lots of other attributes , PRIMARY KEY ( id ) ) CREATE TABLE x ( ` id ` INT NOT NULL auto_increment , ` f_a ` INT NOT NULL , ` f_b ` INT NOT NULL , CONSTRAINT ` FK_a ` FOREIGN KEY ( ` f_a ` ) REFERENCES ` a ` ( ` id ` ) , CONSTRAINT ` FK_b ` FOREIGN KEY ( ` f_b ` ) REFERENCES ` b ` ( ` id ` ) , ) A a = entityManager.find ( A.class , knownIdForA ) ; B b = entityManager.find ( B.class , knownIdForB ) ; X x = new X ( ) ; x.setA ( a ) ; x.setB ( b ) ; entityManager.persist ( x ) ; INSERT INTO x ( ` f_a ` , ` f_b ` ) VALUES ( 13 , 17 ) ;"
"float r = getRadius1 ( ) ; float R = e.getRadius1 ( ) ; float deltaX = Math.abs ( ( getX ( ) + getRadius ( ) ) - ( e.getX ( ) + e.getRadius ( ) ) ) ; float deltaY = Math.abs ( ( getY ( ) + getRadius ( ) ) - ( e.getY ( ) + e.getRadius ( ) ) ) ; float d = ( float ) Math.sqrt ( Math.pow ( deltaX , 2 ) + Math.pow ( deltaY , 2 ) ) ; float part , part2 , part3 ; //Chopping it in parts , because it 's easier.part = ( float ) ( Math.pow ( r,2 ) * Math.acos ( Math.toRadians ( ( Math.pow ( d , 2 ) + Math.pow ( r , 2 ) - Math.pow ( R , 2 ) ) / ( 2*d*r ) ) ) ) ; part2 = ( float ) ( Math.pow ( R,2 ) * Math.acos ( Math.toRadians ( ( Math.pow ( d , 2 ) + Math.pow ( R , 2 ) - Math.pow ( r , 2 ) ) / ( 2*d*R ) ) ) ) ; part3 = ( float ) ( 0.5 * Math.sqrt ( ( -d + r + R ) * ( d+r-R ) * ( d-r+R ) * ( d+r+R ) ) ) ; float res = part + part2 - part3 ; Main.log ( res + `` `` + part + `` `` + part2 + `` `` + part3+ `` `` + r + `` `` + R + `` `` + d ) ; //logs the data and System.out 's it 1345.9663 621.6233 971.1231 246.78008 20.0 25.0 43.528286"
"Scanner in = new Scanner ( System.in ) ; double Na = 6.022 ; System.out.print ( `` What do you want to know ? Mol ( 0 ) or N ( 1 ) ? `` ) ; int first = in.nextInt ( ) ; if ( first == 0 ) { System.out.print ( `` Insert N : `` ) ; double N = in.nextDouble ( ) ; double mol = N/Na ; System.out.print ( `` There are `` + mol + `` mol in that sample . `` ) ; } else if ( first == 1 ) { System.out.print ( `` Insert mol : `` ) ; double mol = in.nextDouble ( ) ; double N = mol*Na ; System.out.print ( `` There are `` + N + `` molecules , atoms or ions in that sample . `` ) ; } What do you want to know ? Mol ( 0 ) or N ( 1 ) ? 0 Insert N : 6.022 There are 1000.0 mol in that sample . What do you want to know ? Mol ( 0 ) or N ( 1 ) ? 1 Insert mol : 1 There are 6.022 molecules , atoms or ions in that sample ."
"List < String > times = new ArrayList < > ( ) ; try { SimpleDateFormat dateFormat = new SimpleDateFormat ( `` HH : mm '' , Locale.ENGLISH ) ; Date start = dateFormat.parse ( startTime ) ; Date end = dateFormat.parse ( endTime ) ; long minutes = ( ( end.getTime ( ) - start.getTime ( ) ) / 1000 / 60 ) / howMany ; for ( int i = 0 ; i < howMany ; i++ ) { Calendar calobj = Calendar.getInstance ( ) ; calobj.setTime ( start ) ; calobj.add ( Calendar.MINUTE , ( int ) ( i * minutes ) ) ; String time = dateFormat.format ( calobj.getTime ( ) ) ; times.add ( time ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } Log.d ( `` timesList '' , times.toString ( ) ) ; return times ; } public static void showNotification ( List < String > timeList , Context context , String quote ) { Intent notifyIntent = new Intent ( context , MyNewIntentReceiver.class ) ; PendingIntent pendingIntent = PendingIntent.getBroadcast ( context , 0 , notifyIntent , PendingIntent.FLAG_ONE_SHOT ) ; notifyIntent.putExtra ( `` title '' , context.getString ( R.string.app_name ) ) ; AlarmManager alarmManager = ( AlarmManager ) context .getSystemService ( Context.ALARM_SERVICE ) ; for ( String time : timeList ) { final int random = new Random ( ) .nextInt ( ) ; notifyIntent.putExtra ( `` notify_id '' , random ) ; notifyIntent.putExtra ( `` quote '' , quote ) ; Date date ; SimpleDateFormat dateFormat = new SimpleDateFormat ( `` dd/MM/yy HH : mm : ss '' ) ; try { date = dateFormat.parse ( time ) ; System.out.println ( date ) ; alarmManager .setInexactRepeating ( AlarmManager.ELAPSED_REALTIME_WAKEUP , date.getTime ( ) , date.getTime ( ) , pendingIntent ) ; } catch ( ParseException e ) { e.printStackTrace ( ) ; } } Log.d ( `` notificationIntentSet '' , `` Utils , pending intent set '' ) ; } public class MyNewIntentReceiver extends BroadcastReceiver { public MyNewIntentReceiver ( ) { } @ Override public void onReceive ( Context context , Intent intent ) { PowerManager powerManager = ( PowerManager ) context.getSystemService ( Context.POWER_SERVICE ) ; PowerManager.WakeLock wakeLock = powerManager.newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , `` dailyfaith : wakelog '' ) ; wakeLock.acquire ( ) ; // get id , titleText and bigText from intent int NOTIFY_ID = intent.getIntExtra ( `` notify_id '' , 0 ) ; String titleText = intent.getStringExtra ( `` title '' ) ; String bigText = intent.getStringExtra ( `` quote '' ) ; // Create intent . Intent notificationIntent = new Intent ( context , MainActivity.class ) ; // use NOTIFY_ID as requestCode PendingIntent contentIntent = PendingIntent.getActivity ( context , NOTIFY_ID , notificationIntent , PendingIntent.FLAG_UPDATE_CURRENT ) ; // get res . Resources res = context.getResources ( ) ; // build notification . Notification.Builder builder = new Notification.Builder ( context ) .setContentIntent ( contentIntent ) .setSmallIcon ( R.drawable.ic_daily_faith_icon ) .setAutoCancel ( true ) .setContentTitle ( titleText ) .setSound ( RingtoneManager .getDefaultUri ( RingtoneManager.TYPE_NOTIFICATION ) ) .setContentText ( bigText ) ; Log.d ( `` notificationBuild '' , `` Notification Builder set '' ) ; /* // check vibration . if ( mPrefs.getBoolean ( `` vibration '' , true ) ) { builder.setVibrate ( new long [ ] { 0 , 50 } ) ; } */ /* // create default title if empty . if ( titleText.equals ( `` '' ) ) { builder.setContentTitle ( context.getString ( R.string.app_name ) ) ; } */ // show notification . check for delay . builder.setWhen ( System.currentTimeMillis ( ) ) ; Log.d ( `` notificationSetWhen '' , `` Notification set when triggered '' ) ; Notification notification = new Notification.BigTextStyle ( builder ) .bigText ( bigText ) .build ( ) ; NotificationManager notificationManager = ( NotificationManager ) context .getSystemService ( Context.NOTIFICATION_SERVICE ) ; notificationManager.notify ( NOTIFY_ID , notification ) ; wakeLock.release ( ) ; } } @ Override public void onTimeSet ( TimePickerDialog view , int hourOfDay , int minute , int second ) { String hourString = hourOfDay < 10 ? `` 0 '' + hourOfDay : `` '' + hourOfDay ; String minuteString = minute < 10 ? `` 0 '' + minute : `` : '' + minute ; String time = hourString + minuteString ; if ( startTimeSelected ) { startTime = time ; textViewStartTime.setText ( time ) ; } else if ( endTimeSelected ) { endTime = time ; textViewEndTime.setText ( time ) ; } String count = ( String ) textViewQuoteCount.getText ( ) ; count.replace ( `` X '' , '' '' ) ; if ( startTimeSelected & & endTimeSelected ) { Utils.setAlarmTimeList ( startTime , endTime , Integer.parseInt ( count ) ) ; Utils.showNotification ( timeList ) ; // not sure how to send the list of strings - quotes } tpd = null ; } < receiver android : name = `` .MyNewIntentReceiver '' android : enabled = `` true '' android : exported = `` false '' / > D/timesList : [ Tue May 19 16:21:00 GMT+05:30 2020 , Tue May 19 16:24:00 GMT+05:30 2020 , Tue May 19 16:27:00 GMT+05:30 2020 , Tue May 19 16:30:00 GMT+05:30 2020 , Tue May 19 16:33:00 GMT+05:30 2020 , Tue May 19 16:36:00 GMT+05:30 2020 , Tue May 19 16:39:00 GMT+05:30 2020 , Tue May 19 16:42:00 GMT+05:30 2020 , Tue May 19 16:45:00 GMT+05:30 2020 , Tue May 19 16:48:00 GMT+05:30 2020 ] alarmManager .setInexactRepeating ( AlarmManager.ELAPSED_REALTIME_WAKEUP , System.currentTimeMillis ( ) , System.currentTimeMillis ( ) , pendingIntent ) ; public static List < Date > setAlarmTimeList ( String startTime , String endTime , int howMany ) { List < Date > times = new ArrayList < > ( ) ; try { SimpleDateFormat dateFormat = new SimpleDateFormat ( `` HH : mm '' , Locale.ENGLISH ) ; Date start = dateFormat.parse ( startTime ) ; Date end = dateFormat.parse ( endTime ) ; long minutes = ( ( end.getTime ( ) - start.getTime ( ) ) / 1000 / 60 ) / ( howMany - 1 ) ; Calendar calobj ; for ( int i = 0 ; i < howMany ; i++ ) { calobj = Calendar.getInstance ( ) ; calobj.set ( Calendar.HOUR_OF_DAY , Integer.valueOf ( dateFormat.format ( start ) .split ( `` : '' ) [ 0 ] ) ) ; calobj.set ( Calendar.MINUTE , Integer.valueOf ( dateFormat.format ( start ) .split ( `` : '' ) [ 1 ] ) ) ; calobj.add ( Calendar.MINUTE , ( int ) ( i * minutes ) ) ; calobj.set ( Calendar.SECOND , 0 ) ; times.add ( calobj.getTime ( ) ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } Log.d ( `` timesList '' , times.toString ( ) ) ; return times ; } public static void showNotification ( List < Date > timeList , Context context , String quote ) { for ( Date date : timeList ) { Intent notifyIntent = new Intent ( context , MyNewIntentReceiver.class ) ; notifyIntent.putExtra ( `` title '' , context.getString ( R.string.app_name ) ) ; final int random = new Random ( ) .nextInt ( ) ; notifyIntent.putExtra ( `` notify_id '' , random ) ; notifyIntent.putExtra ( `` quote '' , quote ) ; int randomInt = new Random ( ) .nextInt ( 1000 ) ; notifyIntent.putExtra ( `` requestCode '' , randomInt ) ; PendingIntent pendingIntent = PendingIntent.getBroadcast ( context , randomInt , notifyIntent , PendingIntent.FLAG_ONE_SHOT ) ; AlarmManager alarmManager = ( AlarmManager ) context .getSystemService ( Context.ALARM_SERVICE ) ; Log.d ( `` date '' , String.valueOf ( date.getTime ( ) ) ) ; /* long afterTwoMinutes = SystemClock.elapsedRealtime ( ) + 60 * 1000 ; */ long afterTwoMinutes = System.currentTimeMillis ( ) ; Log.d ( `` aftertwoMinutes '' , String.valueOf ( afterTwoMinutes ) ) ; long datetimer = date.getTime ( ) ; if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.M ) alarmManager.setExactAndAllowWhileIdle ( AlarmManager.ELAPSED_REALTIME_WAKEUP , date.getTime ( ) , pendingIntent ) ; else alarmManager.setExact ( AlarmManager.ELAPSED_REALTIME_WAKEUP , date.getTime ( ) , pendingIntent ) ; } Log.d ( `` notificationIntentSet '' , `` Utils , pending intent set '' ) ; } public class MyNewIntentReceiver extends BroadcastReceiver { public MyNewIntentReceiver ( ) { } @ Override public void onReceive ( Context context , Intent intent ) { int NOTIFY_ID = intent.getIntExtra ( `` notify_id '' , 0 ) ; String titleText = intent.getStringExtra ( `` title '' ) ; String bigText = intent.getStringExtra ( `` quote '' ) ; int requestCode = intent.getIntExtra ( `` requestCode '' ,0 ) ; sendNotification ( context , bigText , NOTIFY_ID , requestCode ) ; } private void createNotificationChannel ( ) { // Create the NotificationChannel , but only on API 26+ because // the NotificationChannel class is new and not in the support library } public static void sendNotification ( Context mcontext , String messageBody , int notify_id , int requestCode ) { Intent intent = new Intent ( mcontext , HomeScreenActivity.class ) ; PendingIntent pendingIntent = PendingIntent .getActivity ( mcontext , requestCode /* Request code */ , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; NotificationManager notificationManager = ( NotificationManager ) mcontext .getSystemService ( Context.NOTIFICATION_SERVICE ) ; Uri defaultSoundUri = RingtoneManager .getDefaultUri ( RingtoneManager.TYPE_NOTIFICATION ) ; if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.O ) { NotificationChannel notificationChannel = new NotificationChannel ( mcontext.getString ( R.string.default_notification_channel_id ) , `` Rewards Notifications '' , NotificationManager.IMPORTANCE_HIGH ) ; // Configure the notification channel . notificationChannel.setDescription ( `` Channel description '' ) ; notificationChannel.enableLights ( true ) ; notificationManager.createNotificationChannel ( notificationChannel ) ; } NotificationCompat.Builder notificationBuilder = new NotificationCompat .Builder ( mcontext , mcontext.getString ( R.string.default_notification_channel_id ) ) .setContentTitle ( mcontext.getString ( R.string.app_name ) ) .setSmallIcon ( R.drawable.ic_daily_faith_icon ) .setContentText ( messageBody ) .setAutoCancel ( true ) .setPriority ( NotificationCompat.PRIORITY_HIGH ) .setSound ( defaultSoundUri ) .setContentIntent ( pendingIntent ) ; notificationManager.notify ( notify_id /* ID of notification */ , notificationBuilder.build ( ) ) ; } }"
"public class Clazz { int x = 42 ; int y = this.z ; int z = this.x ; void print ( ) { System.out.printf ( `` % d % d % d\n '' , x , y , z ) ; } public static void main ( String [ ] args ) { new Clazz ( ) .print ( ) ; } }"
StringBuilder sb = new StringBuilder ( `` one '' ) ; sb.append ( `` δύο '' ) ; // `` two ''
"import java.util.concurrent.Semaphore ; public class ThreadSynchronization implements Runnable { private int start ; private Semaphore semaphore ; private ThreadSynchronization ( int start , Semaphore semaphore ) { this.start = start ; this.semaphore = semaphore ; } public static void main ( String [ ] args ) { Semaphore semaphore = new Semaphore ( 1 , true ) ; semaphore.acquireUninterruptibly ( ) ; start ( 1 , semaphore ) ; start ( 2 , semaphore ) ; semaphore.release ( ) ; } private static void start ( int start , Semaphore semaphore ) { ThreadSynchronization ts = new ThreadSynchronization ( start , semaphore ) ; Thread thread = new Thread ( ts ) ; thread.start ( ) ; while ( thread.getState ( ) ! = Thread.State.WAITING ) ; } @ Override public void run ( ) { for ( int i = start ; i < = 100 ; i += 2 ) { semaphore.acquireUninterruptibly ( ) ; System.out.println ( `` Thread `` + start + `` : The number is ' '' + i + `` ' '' ) ; semaphore.release ( ) ; } } }"
public static void run ( String arg ) { Path rootDir = Paths.get ( arg ) ; PathMatcher matcher = FileSystems.getDefault ( ) .getPathMatcher ( `` glob : **.pdf '' ) ; Files.walk ( rootDir ) .filter ( matcher : :matches ) .forEach ( Start : :modify ) ; } private static void modify ( Path p ) { System.out.println ( p.toString ( ) ) ; }
public class Test { public static final Person p ; static { p = new Person ( ) ; p.setName ( `` Josh '' ) ; } } public class Test { public static final Person p = initPerson ( ) ; private static Person initPerson ( ) { Person p = new Person ( ) ; p.setName ( `` Josh '' ) ; return p ; } }
public class TestStaticAndDynamicBinding { @ SuppressWarnings ( `` rawtypes '' ) public static void main ( String [ ] args ) { Parent p = new Child ( ) ; Collection c = new HashSet ( ) ; p.sort ( c ) ; } } public class Parent { public void sort ( Collection c ) { System.out.println ( `` Parent # sort ( Collection c ) is invoked '' ) ; } public void sort ( HashSet c ) { System.out.println ( `` Parent # sort ( HashSet c ) is invoked '' ) ; } } public class Child extends Parent { public void sort ( Collection c ) { System.out.println ( `` Child # sort ( Collection c ) is invoked '' ) ; } public void sort ( HashSet c ) { System.out.println ( `` Child # sort ( HashSet c ) is invoked '' ) ; } }
"import lombok.Getter ; import lombok.Setter ; import java.util . * ; public class Main { public static void main ( String [ ] args ) { RequestBean requestBean = new RequestBean ( ) ; // if I uncomment this I will get the list values printed as expected// FruitBean fruitBean = new FruitBean ( ) ; // AnotherBean anotherBean = new AnotherBean ( ) ; // InnerBean innerBean = new InnerBean ( ) ; // requestBean.setFruitBeans ( Collections.singletonList ( fruitBean ) ) ; // fruitBean.setAnotherBeans ( Collections.singletonList ( anotherBean ) ) ; // anotherBean.setInnerBeans ( Collections.singletonList ( innerBean ) ) ; // List < String > beans = Arrays.asList ( `` apple '' , `` orange '' ) ; // innerBean.setBeans ( beans ) ; List < String > result = getBeanViaOptional ( requestBean ) ; if ( result ! = null ) { for ( String s : result ) { System.out.println ( s ) ; } } else { System.out.println ( `` nothing in list '' ) ; } } private static List < String > getBeanViaOptional ( RequestBean bean ) { Optional < List < String > > output = Optional.ofNullable ( bean ) .map ( RequestBean : :getFruitBeans ) .map ( n - > n.get ( 0 ) ) .map ( FruitBean : :getAnotherBeans ) .map ( n - > n.get ( 0 ) ) .map ( AnotherBean : :getInnerBeans ) .map ( n - > n.get ( 0 ) ) .map ( InnerBean : :getBeans ) // why is this bad practice to end with a filter . how should I write this then ? .filter ( n - > n.contains ( `` apple '' ) ) ; if ( ! output.isPresent ( ) ) { throw new CustomException ( ) ; } return output.get ( ) ; } // not using this . just to show that optional was preferable compared to this . private static List < String > getBeanViaIfChecks ( RequestBean bean ) { if ( bean ! = null ) { if ( bean.getFruitBeans ( ) ! = null ) { if ( bean.getFruitBeans ( ) .get ( 0 ) ! = null ) { if ( bean.getFruitBeans ( ) .get ( 0 ) .getAnotherBeans ( ) ! = null ) { if ( bean.getFruitBeans ( ) .get ( 0 ) .getAnotherBeans ( ) .get ( 0 ) ! = null ) { if ( bean.getFruitBeans ( ) .get ( 0 ) .getAnotherBeans ( ) .get ( 0 ) .getInnerBeans ( ) ! = null ) { if ( bean.getFruitBeans ( ) .get ( 0 ) .getAnotherBeans ( ) .get ( 0 ) .getInnerBeans ( ) .get ( 0 ) ! = null ) { return bean.getFruitBeans ( ) .get ( 0 ) .getAnotherBeans ( ) .get ( 0 ) .getInnerBeans ( ) .get ( 0 ) .getBeans ( ) ; } } } } } } } return null ; } } @ Getter @ Setterclass RequestBean { List < FruitBean > fruitBeans ; } @ Getter @ Setterclass FruitBean { List < AnotherBean > anotherBeans ; } @ Getter @ Setterclass AnotherBean { List < InnerBean > innerBeans ; } @ Getter @ Setterclass InnerBean { List < String > beans ; } class CustomException extends RuntimeException { // do some custom exception stuff }"
"public class SimpleTableDemo extends JPanel { public SimpleTableDemo ( ) { super ( new BorderLayout ( 0 , 0 ) ) ; String [ ] columnNames = { `` First Name '' , `` Last Name '' , `` Sport '' , `` # of Years '' , `` Vegetarian '' } ; Object [ ] [ ] data = { { `` Kathy '' , `` Smith '' , `` Snowboarding '' , new Integer ( 5 ) , new Boolean ( false ) } , { `` John '' , `` Doe '' , `` Rowing '' , new Integer ( 3 ) , new Boolean ( true ) } , { `` Sue '' , `` Black '' , `` Knitting '' , new Integer ( 2 ) , new Boolean ( false ) } , { `` Jane '' , `` White '' , `` Speed reading '' , new Integer ( 20 ) , new Boolean ( true ) } , { `` Joe '' , `` Brown '' , `` Pool '' , new Integer ( 10 ) , new Boolean ( false ) } } ; final JTable table = new JTable ( data , columnNames ) ; table.setPreferredScrollableViewportSize ( new Dimension ( 500 , 70 ) ) ; table.setFillsViewportHeight ( true ) ; JScrollPane scrollPane = new JScrollPane ( table ) ; add ( scrollPane , BorderLayout.CENTER ) ; } private static void createAndShowGUI ( ) { JFrame frame = new JFrame ( `` SimpleTableDemo '' ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.setSize ( 700 , 400 ) ; SimpleTableDemo newContentPane = new SimpleTableDemo ( ) ; newContentPane.setOpaque ( true ) ; frame.setContentPane ( newContentPane ) ; frame.setVisible ( true ) ; } public static void main ( String [ ] args ) { javax.swing.SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { createAndShowGUI ( ) ; } } ) ; } }"
"class ArrayList < E > extends AbstractList < E > implements List < E > , RandomAccess , Cloneable , java.io.Serializable abstract class AbstractList < E > extends AbstractCollection < E > implements List < E >"
"package com.example-company.util.converters ; import java.util.HashMap ; import java.util.Map ; import com.example-company.model.Location ; import com.example-company.model.Right ; public final class ModelConverters { private static final Map < Class < ? > , ModelConverter < ? , String > > modelConverterBacking = new HashMap < Class < ? > , ModelConverter < ? , String > > ( ) ; static { modelConverterBacking.put ( Right.class , new RightConverter ( ) ) ; modelConverterBacking.put ( Location.class , new LocationConverter ( ) ) ; } ; public static < T > String convert ( final T input ) throws IllegalStateException { @ SuppressWarnings ( `` unchecked '' ) ModelConverter < T , String > modelConverter = ( ModelConverter < T , String > ) modelConverterBacking .get ( input.getClass ( ) ) ; if ( modelConverter == null ) { throw new IllegalStateException ( `` No mapping found for `` + input.getClass ( ) ) ; } return modelConverter.convertToView ( input ) ; } } package com.example-company.test.unit.util.converters ; import static org.junit.Assert.assertEquals ; import com.example-company.model.Location ; import com.example-company.util.converters.ModelConverters ; import org.junit.Test ; public class ModelConvertersFacadeTests { @ Test public void test_MappingForLocationExists ( ) { final Location stub = new Location ( ) { { setLocationName ( `` '' ) ; } } ; String actual = ModelConverters.convert ( stub ) ; assertEquals ( `` '' , actual ) ; } } java.lang.IllegalStateException : No mapping found for class com.example-company.test.unit.util.converters.ModelConvertersFacadeTests $ 1 at com.example-company.util.converters.ModelConverters.convert ( ModelConverters.java:23 ) at com.example-company.test.unit.util.converters.ModelConvertersFacadeTests.test_MappingForLocationExists ( ModelConvertersFacadeTests.java:24 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:39 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:25 ) at java.lang.reflect.Method.invoke ( Method.java:597 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:47 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:44 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:271 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:70 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:50 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:238 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:63 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:236 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:53 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:229 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:309 ) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run ( JUnit4TestReference.java:50 ) at org.eclipse.jdt.internal.junit.runner.TestExecution.run ( TestExecution.java:38 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:467 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests ( RemoteTestRunner.java:683 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run ( RemoteTestRunner.java:390 ) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main ( RemoteTestRunner.java:197 )"
"package com.stackoverflow ; import java.util.Collections ; import java.util.SortedSet ; import java.util.TreeSet ; import java.util.stream.Collector ; import java.util.stream.Collectors ; public class SOExample { public static < T extends Comparable < T > > Collector < T , ? , SortedSet < T > > toSortedSet ( ) { return Collectors.toCollection ( TreeSet : :new ) ; } public static < T extends Comparable < T > > Collector < T , ? , SortedSet < T > > toUnmodifiableSortedSet ( ) { return Collectors.collectingAndThen ( toSortedSet ( ) , Collections : : < T > unmodifiableSortedSet ) ; } } $ java -jar ~/Downloads/ecj-3.13.101.jar -source 1.8 -target 1.8 SOExample.javaPicked up _JAVA_OPTIONS : -Duser.language=en -Duser.country=GB $ javac -versionPicked up _JAVA_OPTIONS : -Duser.language=en -Duser.country=GBjavac 1.8.0_73 $ javac SOExample.javaPicked up _JAVA_OPTIONS : -Duser.language=en -Duser.country=GBSOExample.java:16 : error : method collectingAndThen in class Collectors can not be applied to given types ; return Collectors.collectingAndThen ( toSortedSet ( ) , Collections : : < T > unmodifiableSortedSet ) ; ^ required : Collector < T # 1 , A , R > , Function < R , RR > found : Collector < T # 2 , CAP # 1 , SortedSet < T # 2 > > , Collection [ ... ] edSet reason : can not infer type-variable ( s ) T # 3 ( actual and formal argument lists differ in length ) where T # 1 , A , R , RR , T # 2 , T # 3 are type-variables : T # 1 extends Object declared in method < T # 1 , A , R , RR > collectingAndThen ( Collector < T # 1 , A , R > , Function < R , RR > ) A extends Object declared in method < T # 1 , A , R , RR > collectingAndThen ( Collector < T # 1 , A , R > , Function < R , RR > ) R extends Object declared in method < T # 1 , A , R , RR > collectingAndThen ( Collector < T # 1 , A , R > , Function < R , RR > ) RR extends Object declared in method < T # 1 , A , R , RR > collectingAndThen ( Collector < T # 1 , A , R > , Function < R , RR > ) T # 2 extends Comparable < T # 2 > T # 3 extends Object declared in method < T # 3 > unmodifiableSortedSet ( SortedSet < T # 3 > ) where CAP # 1 is a fresh type-variable : CAP # 1 extends Object from capture of ? 1 error return Collectors.collectingAndThen ( toSortedSet ( ) , ( SortedSet < T > p ) - > Collections.unmodifiableSortedSet ( p ) ) ;"
"final String message = `` ABCDEFGHIJ '' ; System.out.println ( `` As String `` + RamUsageEstimator.humanSizeOf ( message ) ) ; System.out.println ( `` As byte [ ] `` + RamUsageEstimator.humanSizeOf ( message.getBytes ( ) ) ) ; System.out.println ( `` As char [ ] `` + RamUsageEstimator.humanSizeOf ( message.toCharArray ( ) ) ) ; As String 64 bytesAs byte [ ] 32 bytesAs char [ ] 40 bytes java version `` 1.8.0_60 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_60-b27 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.60-b23 , mixed mode )"
Random dice = new Random ( ) ; int wolfhealth [ ] = new int [ ] { dice.nextInt ( 15 ) +9 } ; System.out.println ( wolfhealth ) ; [ I @ 75b84c92 System.out.println ( wolfhealth [ 0 ] ) ;
public static void main ( String [ ] args ) { int ctr = 13 ; int randomNum = 0 ; while ( ctr ! = 0 ) { Random r = new Random ( ) ; randomNum = r.nextInt ( 13 ) ; ctr -- ; System.out.println ( ctr + '' : `` + randomNum ) ; } }
"@ Target ( AnnotationTarget.FIELD ) @ Retention ( AnnotationRetention.RUNTIME ) @ Constraint ( validatedBy = [ CustomValidator : :class ] ) @ Suppress ( `` unused '' ) @ MustBeDocumentedannotation class CustomValidation ( val message : String = `` validation failed '' , val groups : Array < KClass < * > > = [ ] , val payload : Array < KClass < out Payload > > = [ ] ) @ Componentclass CustomValidator : ConstraintValidator < CustomValidation , String > { override fun isValid ( field : String ? , context : ConstraintValidatorContext ? ) : Boolean { if ( field ! = `` example '' ) { return false } return true } } data class MyRequest ( // validator works perfectly here @ JsonProperty ( `` example '' ) @ CustomValidation val example : String ? = null , @ JsonProperty ( `` locale '' ) val locale : String ? = null ) data class MyRequest ( @ JsonProperty ( `` nested '' ) val nested : NestedClass ? = null , @ JsonProperty ( `` locale '' ) val locale : String ? = null ) data class NestedClass ( // validator not called in that case @ JsonProperty ( `` example '' ) @ CustomValidation val example : String ? = null ) @ PostMapping ( `` /endpoint '' ) fun doSomething ( @ Valid @ RequestBody myRequest : MyRequest , @ RequestHeader ( value = `` token '' ) token : String ) : ResponseEntity < MyResponse > = ResponseEntity.ok ( myService.getData ( myRequest ) )"
"/** * Skips { @ code amount } characters in the source string . Subsequent calls of * { @ code read } methods will not return these characters unless { @ code * reset ( ) } is used . * * @ param ns * the maximum number of characters to skip . * @ return the number of characters actually skipped or 0 if { @ code ns < 0 } . * @ throws IOException * if this reader is closed . * @ see # mark ( int ) * @ see # markSupported ( ) * @ see # reset ( ) */ @ Overridepublic long skip ( long ns ) throws IOException { synchronized ( lock ) { if ( isClosed ( ) ) { throw new IOException ( Msg.getString ( `` K0083 '' ) ) ; // $ NON-NLS-1 $ } if ( ns < = 0 ) { return 0 ; } long skipped = 0 ; if ( ns < this.count - pos ) { pos = pos + ( int ) ns ; skipped = ns ; } else { skipped = this.count - pos ; pos = this.count ; } return skipped ; } } /** * Skips the specified number of characters in the stream . Returns * the number of characters that were skipped . * * < p > The < code > ns < /code > parameter may be negative , even though the * < code > skip < /code > method of the { @ link Reader } superclass throws * an exception in this case . Negative values of < code > ns < /code > cause the * stream to skip backwards . Negative return values indicate a skip * backwards . It is not possible to skip backwards past the beginning of * the string . * * < p > If the entire string has been read or skipped , then this method has * no effect and always returns 0 . * * @ exception IOException If an I/O error occurs */public long skip ( long ns ) throws IOException { synchronized ( lock ) { ensureOpen ( ) ; if ( next > = length ) return 0 ; // Bound skip by beginning and end of the source long n = Math.min ( length - next , ns ) ; n = Math.max ( -next , n ) ; next += n ; return n ; } }"
class B { { System.out.println ( `` IIB B '' ) ; } B ( int i ) { System.out.println ( `` Cons B int '' ) ; } public B ( ) { this ( 10 ) ; System.out.println ( `` Cons B '' ) ; } } public class C extends B { { System.out.println ( `` IIB C '' ) ; } public C ( ) { System.out.println ( `` Cons C '' ) ; } public static void main ( String [ ] args ) { C c1 = new C ( ) ; } } IIB BCons B intCons B IIB CCons C
import java.util.Arrays ; public class MyClass { public static void main ( String [ ] args ) { Arrays.stream ( args ) .forEach ( System.out : :println ) ; } } args.forEach ( System.out : :println ) ;
public static void main ( String [ ] args ) { char a=true ; //Line 1 char b=null ; //Line 2 char c='\n ' ; //Line 3 char d='Hell ' ; //Line 4 }
"public class SomeClass { private int a ; private int b ; public SomeClass ( ) { this ( 0 ) ; } public SomeClass ( int a ) { this ( a , 0 ) ; } public SomeClass ( int a , int b ) { this.a = a ; this.b = b ; } } public class Employee { private String name ; private int monthlySalary ; // Default constructor public Employee ( ) { this ( `` '' , 0 ) ; } // Constructor public Employee ( String name , int monthlySalary ) { this.name = name ; this.monthlySalary = monthlySalary ; } // annualSalary ( ) method returns the annual salary of the employee as an int public int annualSalary ( ) { return monthlySalary * 12 ; } // toString ( ) method returns the employee name and monthly salary as a // String in the format : name , monthly salary public String toString ( ) { return `` Name : `` + name + `` \t\tMonthly Salary : `` + monthlySalary ; } }"
"private void checkIfWithinAndPossiblyReloadChunkMap ( ) { if ( Math.abs ( MyClient.characterX - MyClient.chunkX ) + 10 > ( MyClient.chunkWidth / 5 ) ) { //arbitrary number away ( 10 ) Runnable myRunnable = new Runnable ( ) { public void run ( ) { logger.info ( `` FillMapChunkBuffer started . `` ) ; short chunkXBuffer = MyClient.characterX ; short chunkYBuffer = MyClient.characterY ; int topLeftChunkIndex = MyClient.characterX - ( MyClient.chunkWidth / 2 ) + ( ( MyClient.characterY - ( MyClient.chunkHeight / 2 ) ) * MyClient.mapWidth ) ; //get top left coordinate of chunk int topRightChunkIndex = topLeftChunkIndex + MyClient.chunkWidth - 1 ; //top right coordinate of chunk int [ ] leftChunkSides = new int [ MyClient.chunkHeight ] ; int [ ] rightChunkSides = new int [ MyClient.chunkHeight ] ; for ( int i = 0 ; i < MyClient.chunkHeight ; i++ ) { //figure out the left and right index points for the chunk leftChunkSides [ i ] = topLeftChunkIndex + ( MyClient.mapWidth * i ) ; rightChunkSides [ i ] = topRightChunkIndex + ( MyClient.mapWidth * i ) ; } MyClient.groundLayerBuffer = MyClient.FillGroundBuffer ( leftChunkSides , rightChunkSides ) ; MyClient.buildingLayerBuffer = MyClient.FillBuildingBuffer ( leftChunkSides , rightChunkSides ) ; MyClient.groundLayer = MyClient.groundLayerBuffer ; MyClient.buildingLayer = MyClient.buildingLayerBuffer ; MyClient.chunkX = chunkXBuffer ; MyClient.chunkY = chunkYBuffer ; MyClient.gamePanel.repaint ( ) ; logger.info ( `` FillMapChunkBuffer done . `` ) ; } } ; Thread thread = new Thread ( myRunnable ) ; thread.start ( ) ; } else if ( Math.abs ( MyClient.characterY - MyClient.chunkY ) + 10 > ( MyClient.chunkHeight / 5 ) ) { //arbitrary number away ( 10 ) //same code as above for Y } } public static short [ ] FillGroundBuffer ( int [ ] leftChunkSides , int [ ] rightChunkSides ) { try { return scanMapFile ( `` res/images/tiles/MyFirstMap-ground-p.json '' , leftChunkSides , rightChunkSides ) ; } catch ( FileNotFoundException e ) { logger.fatal ( `` ReadMapFile ( ground ) '' , e ) ; JOptionPane.showMessageDialog ( theDesktop , getStringChecked ( `` message_file_locks '' ) + `` \n\n '' + e.getMessage ( ) , getStringChecked ( `` message_error '' ) , JOptionPane.ERROR_MESSAGE ) ; System.exit ( 1 ) ; } return null ; } private static short [ ] scanMapFile ( String path , int [ ] leftChunkSides , int [ ] rightChunkSides ) throws FileNotFoundException { Scanner scanner = new Scanner ( new File ( path ) ) ; scanner.useDelimiter ( `` , `` ) ; int topLeftChunkIndex = leftChunkSides [ 0 ] ; int bottomRightChunkIndex = rightChunkSides [ rightChunkSides.length - 1 ] ; short [ ] tmpMap = new short [ chunkWidth * chunkHeight ] ; int count = 0 ; int arrayIndex = 0 ; while ( scanner.hasNext ( ) ) { if ( count > = topLeftChunkIndex & & count < = bottomRightChunkIndex ) { //within or outside ( east and west ) of map chunk if ( count == bottomRightChunkIndex ) { //last entry tmpMap [ arrayIndex ] = scanner.nextShort ( ) ; break ; } else { //not last entry if ( isInsideMapChunk ( count , leftChunkSides , rightChunkSides ) ) { tmpMap [ arrayIndex ] = scanner.nextShort ( ) ; arrayIndex++ ; } else { scanner.nextShort ( ) ; } } } else { scanner.nextShort ( ) ; } count++ ; } scanner.close ( ) ; return tmpMap ; }"
"[ Device|EEP_FEATUREKOI_HFS_Max|Kostia ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Name ( 1 ) = partHeader_A01Value ( 1 ) = 0x10Desc ( 1 ) = ( Address 0x000 ) Article No . / P.C.B No Byte 1Name ( 2 ) = partHeader_A02Value ( 2 ) = 0x9Desc ( 2 ) = ( Address 0x001 ) Article No . / P.C.B No Byte 2Name ( 3 ) = partHeader_A03Value ( 3 ) = 0x95Desc ( 3 ) = ( Address 0x002 ) Article No . / P.C.B No Byte 3Name ( 4 ) = partHeader_A04Value ( 4 ) = 0x38Desc ( 4 ) = ( Address 0x003 ) Article No . / P.C.B No Byte 4 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Name ( 12 ) = AdrIctPcbTestDate_DayValue ( 12 ) = 0xFFDesc ( 12 ) = ( Address 0x00B ) Test Date : Day -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -Name ( 13 ) = AdrIctPcbTestDate_MonthValue ( 13 ) = 0xFFDesc ( 13 ) = ( Address 0x00C ) Test Date : Month -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -Name ( 14 ) = AdrIctPcbTestTime_HourValue ( 14 ) = 0xFFDesc ( 14 ) = ( Address 0x00D ) Test Time : Hour -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -Name ( 15 ) = AdrIctPcbTesTime_MinuteValue ( 15 ) = 0xFFDesc ( 15 ) = ( Address 0x00E ) Test Time : Minute if ( line.contains ( `` Name '' ) & & line.contains ( `` _ '' ) ) { String basicName = line ; cutName = basicName.split ( `` = '' ) [ 1 ] .trim ( ) ; //get substring after '= ' cutName = cutName.substring ( 0 , cutName.lastIndexOf ( `` _ '' ) ) ; //removes ' _ ' ? importantName.add ( i , ( cutName + `` = `` ) ) ; //add to element i System.out.println ( `` Line reads : `` + basicName ) ; System.out.println ( `` Part : `` + cutName ) ; do { if ( line.contains ( `` Value '' ) ) { Hex = line.split ( `` = '' ) [ 1 ] .trim ( ) ; //get substring after '= ' importantNumber.add ( i , Hex ) ; //get substring after '= ' System.out.println ( `` Value : `` + Hex ) ; } //end if } while ( ! `` Value '' .contains ( line = reader.readLine ( ) ) ) ; while ( ! placeToFinish [ i ] .equals ( line = reader.readLine ( ) ) ) ; } else if ( line.contains ( `` Name '' ) ) { String basicName = line ; cutName = basicName.split ( `` = '' ) [ 1 ] .trim ( ) ; //get substring after '= ' importantName.add ( i , ( cutName + `` = `` ) ) ; //get substring after '= ' System.out.println ( `` Line reads : `` + basicName ) ; System.out.println ( `` Part : `` + cutName ) ; System.out.println ( `` Number : `` + importantNumber.indexOf ( i ) + `` \n '' ) ; do { if ( line.contains ( `` Value '' ) ) { Hex = line.split ( `` = '' ) [ 1 ] .trim ( ) ; //get substring after '= ' importantNumber.add ( i , Hex ) ; //get substring after '= ' } //end if } while ( ! `` Value '' .contains ( line = reader.readLine ( ) ) ) ; while ( ! placeToFinish [ i ] .equals ( line = reader.readLine ( ) ) ) ; } //end if"
"package com.example.newfragment ; import android.content.res.Configuration ; import android.os.Bundle ; import android.support.v4.app.FragmentActivity ; import android.widget.Toast ; public class MainActivity extends FragmentActivity { @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; } @ Override public void onConfigurationChanged ( Configuration newConfig ) { super.onConfigurationChanged ( newConfig ) ; /*/ Checks the orientation of the screen if ( newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE ) { setContentView ( R.layout.activity_main ) ; Toast.makeText ( this , `` landscape '' , Toast.LENGTH_SHORT ) .show ( ) ; } else if ( newConfig.orientation == Configuration.ORIENTATION_PORTRAIT ) { setContentView ( R.layout.activity_main ) ; Toast.makeText ( this , `` portait '' , Toast.LENGTH_SHORT ) .show ( ) ; } */ } } package com.example.newfragment ; import java.io.File ; import java.util.ArrayList ; import android.support.v4.app.ListFragment ; import android.os.Bundle ; import android.os.Environment ; import android.view.LayoutInflater ; import android.view.View ; import android.view.ViewGroup ; import android.widget.ArrayAdapter ; import android.widget.ListView ; public class MenuFragment extends ListFragment { int i ; private String [ ] FilePathStrings ; private String [ ] FileNameStrings ; File [ ] listFile ; //for photo String [ ] name = new String [ ] { `` Sri '' , '' Sud '' , '' Urmila '' , '' Amrita '' , '' Indra '' , '' Ayan '' , `` Leo '' , '' Neymar '' , '' Robin '' , '' Ian '' , '' Suarez '' , '' Mesut '' , '' Bastin '' , `` Rooney '' , '' Ranti '' , '' Dong Hyun '' , '' Barisich '' , '' Andrew '' } ; String [ ] address = new String [ ] { `` Dumdum '' , '' Dumdum '' , '' Dumdum '' , '' Dumdum '' , '' Lake Town '' , `` Salkia '' , '' Argentina '' , '' Brazil '' , '' Netherlands '' } ; String [ ] mobile = new String [ ] { `` 456456456 '' , '' 56564565 '' , '' 787687866 '' , `` 645645645 '' , '' 5654576457 '' , '' 76897978978 '' , '' 768768567 '' } ; String [ ] photo = new String [ ] { } ; @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view =inflater.inflate ( R.layout.list_fragment , container , false ) ; ArrayAdapter < String > adapter = new ArrayAdapter < String > ( getActivity ( ) , android.R.layout.simple_list_item_1 , name ) ; setListAdapter ( adapter ) ; return view ; } /////////////////////sending data to TextFragment////////////////// @ Override public void onListItemClick ( ListView l , View v , int position , long id ) { ///////////accessing files from sd card/////// File file = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' ) ; if ( file.isDirectory ( ) ) { listFile = file.listFiles ( ) ; // Create a String array for FilePathStrings FilePathStrings = new String [ listFile.length ] ; for ( i = 0 ; i < listFile.length ; i++ ) { // Get the path of the image file FilePathStrings [ i ] = listFile [ i ] .getAbsolutePath ( ) ; } } ////////////////////////////// TextFragment txt = ( TextFragment ) getFragmentManager ( ) .findFragmentById ( R.id.fragment2 ) ; txt.change ( position , address [ position ] , mobile [ position ] ) ; getListView ( ) .setSelector ( android.R.color.holo_blue_dark ) ; } } package com.example.newfragment ; import java.io.File ; import java.io.FileNotFoundException ; import java.io.FilenameFilter ; import java.io.InputStream ; import android.R.string ; import android.support.v4.app.Fragment ; import android.app.Activity ; import android.content.ContentResolver ; import android.content.Intent ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; import android.graphics.PixelFormat ; import android.hardware.Camera ; import android.hardware.Camera.Parameters ; import android.net.Uri ; import android.os.Bundle ; import android.os.Environment ; import android.provider.MediaStore ; import android.util.Log ; import android.view.LayoutInflater ; import android.view.View ; import android.view.View.OnClickListener ; import android.view.ViewGroup ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import android.widget.Toast ; public class TextFragment extends Fragment implements OnClickListener { TextView text , add ; private ImageView img ; Button b ; int value ; String mobile ; File photo ; private static final int CAMERA_REQUEST = 1888 ; Camera camera ; ////////////data received here//////////// public void change ( int txt , String txt1 , String txt2 ) { add.setText ( txt1 ) ; value = txt ; mobile = txt2 ; //photo = f ; //File image = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; /*if ( photo.exists ( ) ) { img.setImageBitmap ( BitmapFactory.decodeFile ( photo.getAbsolutePath ( ) ) ) ; } else img.setImageResource ( R.drawable.ic_launcher ) ; */ } @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater.inflate ( R.layout.text_fragment , container , false ) ; //text= ( TextView ) view.findViewById ( R.id.AndroidOs ) ; add= ( TextView ) view.findViewById ( R.id.address ) ; img= ( ImageView ) view.findViewById ( R.id.img ) ; ////////////////// /*File image = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; if ( image.exists ( ) ) { img.setImageBitmap ( BitmapFactory.decodeFile ( image.getAbsolutePath ( ) ) ) ; /////////////setting image in imageview } */ ////////////////////// b= ( Button ) view.findViewById ( R.id.b ) ; img.setOnClickListener ( this ) ; b.setOnClickListener ( this ) ; return view ; } @ Override public void onClick ( View v ) { // TODO Auto-generated method stub if ( v.equals ( img ) ) { //Toast.makeText ( getContext ( ) , `` Camera '' , Toast.LENGTH_LONG ) .show ( ) ; /*///////////camera hardware/////////// Parameters parameters = camera.getParameters ( ) ; //////////////PROBLEM : APP GETTING CRASHED WHEN USED parameters.setPictureSize ( 80 , 80 ) ; camera.setParameters ( parameters ) ; camera = Camera.open ( ) ; ///////////////////////////////////////*/ /*Clicking and saving image to sd card*/ ////////////////////////////////////// File file = new File ( Environment.getExternalStorageDirectory ( ) , `` Frag_list '' ) ; file.mkdirs ( ) ; String path = Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ; File file2= new File ( path ) ; Uri outputFileUri = Uri.fromFile ( file2 ) ; Intent intent = new Intent ( android.provider.MediaStore.ACTION_IMAGE_CAPTURE ) ; //intent.putExtra ( `` android.media.action.IMAGE_CAPTURE '' , outputFileUri ) ; ///////for displaying image intent.putExtra ( MediaStore.EXTRA_OUTPUT , outputFileUri ) ; //////////for saving image /*Bundle b = new Bundle ( ) ; b.putString ( `` android.media.action.IMAGE_CAPTURE '' , outputFileUri ) ; */ startActivityForResult ( intent , CAMERA_REQUEST ) ; ///////////////////////////////////// } if ( v.equals ( b ) ) { //Toast.makeText ( getContext ( ) , `` mobile : '' +mobile , Toast.LENGTH_LONG ) .show ( ) ; /*Calling number*/ //////////////////////////////////////////////// Uri number = Uri.parse ( `` tel : '' +mobile ) ; Intent callIntent = new Intent ( Intent.ACTION_CALL , number ) ; startActivity ( callIntent ) ; //////////////////////////////////////////////// } } ///setting image in display /////////////////////////////////////////////////////////// public void onActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == CAMERA_REQUEST & & resultCode == Activity.RESULT_OK ) { /*if ( data ! = null ) { File photo = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; Uri imgUri=Uri.fromFile ( photo ) ; img.setImageURI ( imgUri ) ; /* img.setImageBitmap ( ( Bitmap ) data.getExtras ( ) .get ( `` data '' ) ) ; // this is image view where you want to set image Log.d ( `` camera -- -- > `` , `` '' + data.getExtras ( ) .get ( `` data '' ) ) ; } */ File image = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; if ( image.exists ( ) ) { img.setImageBitmap ( BitmapFactory.decodeFile ( image.getAbsolutePath ( ) ) ) ; /////////////setting image in imageview } } } ////////////////////*/ } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < manifest xmlns : android= '' http : //schemas.android.com/apk/res/android '' package= '' com.example.newfragment '' android : versionCode= '' 1 '' android : versionName= '' 1.0 '' > < uses-sdk android : minSdkVersion= '' 14 '' android : targetSdkVersion= '' 21 '' / > < uses-permission android : name= '' android.permission.CAMERA '' / > < uses-feature android : name= '' android.hardware.camera '' android : required= '' false '' / > < uses-feature android : name= '' android.hardware.camera.autofocus '' / > < uses-permission android : name= '' android.permission.WRITE_EXTERNAL_STORAGE '' / > < uses-permission android : name= '' android.permission.READ_EXTERNAL_STORAGE '' / > < uses-permission android : name= '' android.permission.CALL_PHONE '' / > < application android : allowBackup= '' true '' android : icon= '' @ drawable/ic_launcher '' > < activity android : name= '' .MainActivity '' android : configChanges= '' orientation '' > < intent-filter > < action android : name= '' android.intent.action.MAIN '' / > < category android : name= '' android.intent.category.LAUNCHER '' / > < /intent-filter > < /activity > < /application > < /manifest > 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : FATAL EXCEPTION : main10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : java.lang.NullPointerException10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at com.example.newfragment.TextFragment.change ( TextFragment.java:48 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at com.example.newfragment.MenuFragment.onListItemClick ( MenuFragment.java:85 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.support.v4.app.ListFragment $ 2.onItemClick ( ListFragment.java:58 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.widget.AdapterView.performItemClick ( AdapterView.java:298 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.widget.AbsListView.performItemClick ( AbsListView.java:1128 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.widget.AbsListView $ PerformClick.run ( AbsListView.java:2815 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.widget.AbsListView $ 1.run ( AbsListView.java:3574 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.os.Handler.handleCallback ( Handler.java:800 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.os.Handler.dispatchMessage ( Handler.java:100 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.os.Looper.loop ( Looper.java:194 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at android.app.ActivityThread.main ( ActivityThread.java:5371 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at java.lang.reflect.Method.invoke ( Method.java:525 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:833 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:600 ) 10-05 11:07:06.480 : E/AndroidRuntime ( 4921 ) : at dalvik.system.NativeStart.main ( Native Method ) < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < fragment android : id= '' @ +id/list_Fragment '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : layout_weight= '' 1 '' class= '' com.example.newfragment.MenuFragment '' > < /fragment > < /LinearLayout > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' horizontal '' tools : context= '' com.example.newfragment.MainActivity '' > < fragment android : layout_height= '' match_parent '' android : layout_width= '' 0dp '' android : layout_weight= '' 1 '' class= '' com.example.newfragment.MenuFragment '' android : id= '' @ +id/fragment '' / > < fragment android : layout_width= '' 0dp '' android : layout_height= '' match_parent '' android : layout_weight= '' 2 '' class= '' com.example.newfragment.TextFragment '' android : id= '' @ +id/fragment2 '' / > < /LinearLayout > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : orientation= '' vertical '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < ListView android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : id= '' @ android : id/list '' / > < /LinearLayout > < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : orientation= '' horizontal '' android : layout_width= '' fill_parent '' android : layout_height= '' fill_parent '' android : background= '' # 5ba4e5 '' > < ImageView android : id= '' @ +id/img '' android : layout_width= '' 100dp '' android : layout_height= '' 100dp '' android : layout_marginTop= '' 20dp '' android : layout_marginLeft= '' 30dp '' android : onClick= '' imageClick '' android : src= '' @ drawable/ic_launcher '' / > < TableLayout android : id= '' @ +id/tb '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < TableRow > < TextView android : id= '' @ +id/address '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : text= '' Address '' android : textColor= '' # ffffff '' android : textSize= '' 20sp '' android : layout_marginLeft= '' 40dp '' android : layout_marginTop= '' 30dp '' / > < /TableRow > < TableRow android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < Button android : id= '' @ +id/b '' android : layout_marginLeft= '' 40dp '' android : layout_marginTop= '' 30dp '' android : layout_span= '' 2 '' android : background= '' # ffffff '' android : text= '' Mobile '' android : textColor= '' # 000000 '' / > < /TableRow > < /TableLayout > < /LinearLayout > public class MenuFragment extends ListFragment { int i ; private String [ ] FilePathStrings ; private String [ ] FileNameStrings ; File [ ] listFile ; //for photo String [ ] name = new String [ ] { `` Sri '' , '' Sud '' , '' Urmila '' , '' Amrita '' , '' Indra '' , '' Ayan '' , `` Leo '' , '' Neymar '' , '' Robin '' , '' Ian '' , '' Suarez '' , '' Mesut '' , '' Bastin '' , `` Rooney '' , '' Ranti '' , '' Dong Hyun '' , '' Barisich '' , '' Andrew '' } ; String [ ] address = new String [ ] { `` Dumdum '' , '' Dumdum '' , '' Dumdum '' , '' Dumdum '' , '' Lake Town '' , `` Salkia '' , '' Argentina '' , '' Brazil '' , '' Netherlands '' } ; String [ ] mobile = new String [ ] { `` 456456456 '' , '' 56564565 '' , '' 787687866 '' , `` 645645645 '' , '' 5654576457 '' , '' 76897978978 '' , '' 768768567 '' } ; String [ ] photo = new String [ ] { } ; @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view =inflater.inflate ( R.layout.list_fragment , container , false ) ; ArrayAdapter < String > adapter = new ArrayAdapter < String > ( getActivity ( ) , android.R.layout.simple_list_item_1 , name ) ; setListAdapter ( adapter ) ; return view ; } /////////////////////sending data to TextFragment////////////////// @ Override public void onListItemClick ( ListView l , View v , int position , long id ) { ///////////accessing files from sd card/////// File file = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' ) ; if ( file.isDirectory ( ) ) { listFile = file.listFiles ( ) ; // Create a String array for FilePathStrings FilePathStrings = new String [ listFile.length ] ; for ( i = 0 ; i < listFile.length ; i++ ) { // Get the path of the image file FilePathStrings [ i ] = listFile [ i ] .getAbsolutePath ( ) ; } } ////////////////////////////// int orientation = getResources ( ) .getConfiguration ( ) .orientation ; if ( Configuration.ORIENTATION_LANDSCAPE == orientation ) { //Do SomeThing ; // Landscape TextFragment txt = ( TextFragment ) getFragmentManager ( ) .findFragmentById ( R.id.fragment2 ) ; txt.change ( position , address [ position ] , mobile [ position ] ) ; getListView ( ) .setSelector ( android.R.color.holo_blue_dark ) ; } else { //Do SomeThing ; // Portrait //Toast.makeText ( getContext ( ) , address [ position ] , Toast.LENGTH_SHORT ) .show ( ) ; **Intent intent = new Intent ( getActivity ( ) , TextFragment2.class ) ; Bundle bundle = new Bundle ( ) ; bundle.putString ( `` message '' , address [ position ] ) ; intent.putExtras ( bundle ) ; getActivity ( ) .startActivity ( intent ) ; ** } } public class TextFragment2 extends Activity implements OnClickListener { TextView text , add ; private ImageView img ; Button b ; int value ; String mobile , txt ; File photo ; private static final int CAMERA_REQUEST = 1888 ; Camera camera ; public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater.inflate ( R.layout.text_fragment , container , false ) ; add= ( TextView ) view.findViewById ( R.id.address ) ; img= ( ImageView ) view.findViewById ( R.id.img ) ; ////////////////// /*File image = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; if ( image.exists ( ) ) { img.setImageBitmap ( BitmapFactory.decodeFile ( image.getAbsolutePath ( ) ) ) ; /////////////setting image in imageview } */ ////////////////////// b= ( Button ) view.findViewById ( R.id.b ) ; img.setOnClickListener ( this ) ; b.setOnClickListener ( this ) ; //Intent intent = getActivity ( ) .getIntent ( ) ; //String message = intent.getStringExtra ( `` message '' ) ; **add.setText ( txt ) ; ** return view ; } @ Overridepublic void onClick ( View v ) { // TODO Auto-generated method stub if ( v.equals ( img ) ) { //Toast.makeText ( getContext ( ) , `` Camera '' , Toast.LENGTH_LONG ) .show ( ) ; /*///////////camera hardware/////////// Parameters parameters = camera.getParameters ( ) ; //////////////PROBLEM : APP GETTING CRASHED WHEN USED parameters.setPictureSize ( 80 , 80 ) ; camera.setParameters ( parameters ) ; camera = Camera.open ( ) ; ///////////////////////////////////////*/ /*Clicking and saving image to sd card*/ ////////////////////////////////////// File file = new File ( Environment.getExternalStorageDirectory ( ) , `` Frag_list '' ) ; file.mkdirs ( ) ; String path = Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ; File file2= new File ( path ) ; Uri outputFileUri = Uri.fromFile ( file2 ) ; Intent intent = new Intent ( android.provider.MediaStore.ACTION_IMAGE_CAPTURE ) ; //intent.putExtra ( `` android.media.action.IMAGE_CAPTURE '' , outputFileUri ) ; ///////for displaying image intent.putExtra ( MediaStore.EXTRA_OUTPUT , outputFileUri ) ; //////////for saving image /*Bundle b = new Bundle ( ) ; b.putString ( `` android.media.action.IMAGE_CAPTURE '' , outputFileUri ) ; */ startActivityForResult ( intent , CAMERA_REQUEST ) ; ///////////////////////////////////// } if ( v.equals ( b ) ) { //Toast.makeText ( getContext ( ) , `` mobile : '' +mobile , Toast.LENGTH_LONG ) .show ( ) ; /*Calling number*/ //////////////////////////////////////////////// Uri number = Uri.parse ( `` tel : '' +mobile ) ; Intent callIntent = new Intent ( Intent.ACTION_CALL , number ) ; startActivity ( callIntent ) ; //////////////////////////////////////////////// } } ///setting image in display/////////////////////////////////////////////////////////// public void onActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == CAMERA_REQUEST & & resultCode == Activity.RESULT_OK ) { /*if ( data ! = null ) { File photo = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; Uri imgUri=Uri.fromFile ( photo ) ; img.setImageURI ( imgUri ) ; /* img.setImageBitmap ( ( Bitmap ) data.getExtras ( ) .get ( `` data '' ) ) ; // this is image view where you want to set image Log.d ( `` camera -- -- > `` , `` '' + data.getExtras ( ) .get ( `` data '' ) ) ; } */ File image = new File ( Environment.getExternalStorageDirectory ( ) + '' /Frag_list/ '' +value+ '' .jpg '' ) ; if ( image.exists ( ) ) { img.setImageBitmap ( BitmapFactory.decodeFile ( image.getAbsolutePath ( ) ) ) ; /////////////setting image in imageview } } } ////////////////////*/ public class TextFragment2 extends Activity implements OnClickListener { TextView text , add ; private ImageView img ; Button b ; int value ; String mobile , txt ; File photo ; private static final int CAMERA_REQUEST = 1888 ; Camera camera ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.text_fragment ) ; add= ( TextView ) findViewById ( R.id.address ) ; img= ( ImageView ) findViewById ( R.id.img ) ; b= ( Button ) findViewById ( R.id.b ) ; img.setOnClickListener ( this ) ; b.setOnClickListener ( this ) ; Bundle bundle= getIntent ( ) .getExtras ( ) ; txt= bundle.getString ( `` message '' ) ; add.setText ( txt ) ; }"
"package com.twitter.i_droidi.mynotes ; import android.app.AlertDialog ; import android.content.DialogInterface ; import android.content.Intent ; import android.support.v7.app.ActionBarActivity ; import android.os.Bundle ; import android.view.ContextMenu ; import android.view.Menu ; import android.view.MenuInflater ; import android.view.MenuItem ; import android.view.View ; import android.widget.AdapterView ; import android.widget.ArrayAdapter ; import android.widget.ListView ; import android.widget.Toast ; import java.util.List ; public class MainActivity extends ActionBarActivity implements AdapterView.OnItemClickListener { ListView lv ; NotesDataSource nDS ; List < NotesModel > notesList ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; nDS = new NotesDataSource ( this ) ; lv = ( ListView ) findViewById ( R.id.lv ) ; nDS.open ( ) ; notesList = nDS.getAllNotes ( ) ; nDS.close ( ) ; String [ ] notes = new String [ notesList.size ( ) ] ; for ( int i = 0 ; i < notesList.size ( ) ; i++ ) { notes [ i ] = notesList.get ( i ) .getTitle ( ) ; } ArrayAdapter < String > adapter = new ArrayAdapter < String > ( MainActivity.this , android.R.layout.simple_list_item_1 , android.R.id.text1 , notes ) ; lv.setAdapter ( adapter ) ; registerForContextMenu ( lv ) ; lv.setOnItemClickListener ( this ) ; } @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Intent nView = new Intent ( this , Second.class ) ; nView.putExtra ( `` id '' , notesList.get ( position ) .getId ( ) ) ; // Check ... ! ! ! startActivity ( nView ) ; } @ Override public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenu.ContextMenuInfo menuInfo ) { MenuInflater inflater = getMenuInflater ( ) ; inflater.inflate ( R.menu.menu_delete , menu ) ; super.onCreateContextMenu ( menu , v , menuInfo ) ; } @ Override public boolean onContextItemSelected ( MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.delete : nDS.open ( ) ; nDS.deleteNote ( lv.getId ( ) ) ; // Check ... ! ! ! nDS.close ( ) ; Toast nDelete = Toast.makeText ( this , `` Deleted . `` , Toast.LENGTH_LONG ) ; nDelete.show ( ) ; return true ; } return super.onContextItemSelected ( item ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater.inflate ( R.menu.menu_main , menu ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.mainMenuNewNote : Intent nNote = new Intent ( this , Second.class ) ; startActivity ( nNote ) ; return true ; case R.id.mainMenuAbout : AlertDialog.Builder aboutDialog = new AlertDialog.Builder ( this ) ; aboutDialog.setTitle ( `` About the app '' ) ; aboutDialog.setMessage ( `` The Simplest app for notes ! \n\n '' + `` Developed by : Abdulaziz\n '' + `` Twitter : @ i_Droidi\n '' + `` Telegram : MrGlitch\n\n '' + `` Special Thanks to who tested the app before upload it on Play Store and to who use it now ! : ) '' ) ; aboutDialog.setIcon ( R.mipmap.ic_launcher ) ; aboutDialog.setPositiveButton ( `` OK '' , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface aboutDialog , int witch ) { // Do Not Do Anything . } } ) ; aboutDialog.show ( ) ; return true ; case R.id.mainMenuExit : AlertDialog.Builder exDialog = new AlertDialog.Builder ( this ) ; exDialog.setTitle ( `` Exit ? `` ) ; exDialog.setMessage ( `` Are you sure to exit ? `` ) ; exDialog.setIcon ( R.mipmap.ic_launcher ) ; exDialog.setNegativeButton ( `` Yes '' , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface exDialog , int which ) { finish ( ) ; } } ) ; exDialog.setPositiveButton ( `` No '' , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface exDialog , int which ) { // Do Not Do Anything . } } ) ; exDialog.show ( ) ; return true ; } return super.onOptionsItemSelected ( item ) ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' > < ListView android : id= '' @ +id/lv '' android : layout_width= '' fill_parent '' android : layout_height= '' fill_parent '' > < /ListView > < /LinearLayout > package com.twitter.i_droidi.mynotes ; import android.app.AlertDialog ; import android.content.DialogInterface ; import android.content.Intent ; import android.database.sqlite.SQLiteDatabase ; import android.os.Bundle ; import android.support.v7.app.ActionBarActivity ; import android.view.Menu ; import android.view.MenuInflater ; import android.view.MenuItem ; import android.widget.EditText ; import android.widget.Toast ; public class Second extends ActionBarActivity { NotesDataSource nDS ; EditText noteTitle ; EditText noteBody ; int id ; DB db ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.second ) ; Intent in = getIntent ( ) ; id = in.getIntExtra ( `` id '' , 0 ) ; noteTitle = ( EditText ) findViewById ( R.id.note_title ) ; noteBody = ( EditText ) findViewById ( R.id.note ) ; nDS = new NotesDataSource ( this ) ; nDS.open ( ) ; NotesModel note = nDS.getNote ( id ) ; nDS.close ( ) ; noteTitle.setText ( note.getTitle ( ) ) ; noteBody.setText ( note.getBody ( ) ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater.inflate ( R.menu.menu_second , menu ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.secondMenuSave : if ( ! noteTitle.getText ( ) .toString ( ) .isEmpty ( ) & & ! noteBody.getText ( ) .toString ( ) .isEmpty ( ) ) { nDS.open ( ) ; nDS.updateNote ( id , noteTitle.getText ( ) .toString ( ) , noteBody.getText ( ) .toString ( ) ) ; nDS.close ( ) ; Toast nSave = Toast.makeText ( this , `` Saved . `` , Toast.LENGTH_LONG ) ; nSave.show ( ) ; finish ( ) ; } else { Toast notSave = Toast.makeText ( this , `` The title and content of the note CAN NOT be empty ! `` , Toast.LENGTH_LONG ) ; notSave.show ( ) ; } return true ; case R.id.secondMenuBack : AlertDialog.Builder baDialog = new AlertDialog.Builder ( this ) ; baDialog.setTitle ( `` Back ? `` ) ; baDialog.setMessage ( `` Do you want to back to the main page before saving the note ? `` ) ; baDialog.setIcon ( R.mipmap.ic_launcher ) ; baDialog.setNegativeButton ( `` Yes '' , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface baDialog , int which ) { finish ( ) ; } } ) ; baDialog.setPositiveButton ( `` No '' , new DialogInterface.OnClickListener ( ) { @ Override public void onClick ( DialogInterface baDialog , int which ) { // Do Not Do Anything . } } ) ; baDialog.show ( ) ; return true ; } return super.onOptionsItemSelected ( item ) ; } } package com.twitter.i_droidi.mynotes ; import android.content.ContentValues ; import android.content.Context ; import android.database.Cursor ; import android.database.sqlite.SQLiteDatabase ; import android.util.Log ; import java.util.ArrayList ; import java.util.List ; public class NotesDataSource { DB myDB ; SQLiteDatabase sql ; String [ ] getAllColumns = new String [ ] { DB.ID , DB.TITLE , DB.BODY } ; public NotesDataSource ( Context context ) { myDB = new DB ( context ) ; } public void open ( ) { try { sql = myDB.getWritableDatabase ( ) ; } catch ( Exception ex ) { Log.d ( `` Error in your database ! `` , ex.getMessage ( ) ) ; } } public void close ( ) { sql.close ( ) ; } public void createNote ( String title , String body ) { ContentValues note = new ContentValues ( ) ; note.put ( myDB.TITLE , title ) ; note.put ( myDB.BODY , body ) ; sql.insert ( myDB.TABLE_NAME , null , note ) ; } public NotesModel getNote ( int id ) { NotesModel note = new NotesModel ( ) ; Cursor cursor = sql.rawQuery ( `` SELECT * FROM `` + DB.TABLE_NAME + `` WHERE `` + DB.ID + `` = ? `` , new String [ ] { id + `` '' } ) ; if ( cursor.getCount ( ) > 0 ) { cursor.moveToFirst ( ) ; note.setId ( cursor.getInt ( 0 ) ) ; note.setTitle ( cursor.getString ( 1 ) ) ; note.setBody ( cursor.getString ( 2 ) ) ; cursor.close ( ) ; } return note ; } public void updateNote ( int id , String title , String body ) { ContentValues note = new ContentValues ( ) ; note.put ( myDB.TITLE , title ) ; note.put ( myDB.BODY , body ) ; sql.update ( myDB.TABLE_NAME , note , myDB.ID + `` = `` + id , null ) ; } public void deleteNote ( Object id ) { sql.delete ( myDB.TABLE_NAME , myDB.ID + `` = `` + id , null ) ; } public List < NotesModel > getAllNotes ( ) { List < NotesModel > notesList = new ArrayList < NotesModel > ( ) ; Cursor cursor = sql.query ( myDB.TABLE_NAME , getAllColumns , null , null , null , null , null ) ; cursor.moveToFirst ( ) ; while ( ! cursor.isAfterLast ( ) ) { NotesModel notes = new NotesModel ( ) ; notes.setId ( cursor.getInt ( 0 ) ) ; notes.setTitle ( cursor.getString ( 1 ) ) ; notes.setBody ( cursor.getString ( 2 ) ) ; notesList.add ( notes ) ; cursor.moveToNext ( ) ; } cursor.close ( ) ; return notesList ; } } package com.twitter.i_droidi.mynotes ; import android.content.Context ; import android.database.sqlite.SQLiteDatabase ; import android.database.sqlite.SQLiteOpenHelper ; public class DB extends SQLiteOpenHelper { private static final String DB_NAME = `` MyNotes '' ; private static final int DB_VERSION = 1 ; public static final String TABLE_NAME = `` MyNotes '' ; public static final String ID = `` id '' ; public static final String TITLE = `` title '' ; public static final String BODY = `` body '' ; private static final String DB_CREATE = `` create table `` + TABLE_NAME + `` ( `` + ID + `` integer primary key autoincrement , `` + TITLE + `` text not null , `` + BODY + `` text not null ) '' ; public DB ( Context context ) { super ( context , DB_NAME , null , DB_VERSION ) ; } @ Override public void onCreate ( SQLiteDatabase db ) { db.execSQL ( DB_CREATE ) ; } @ Override public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db.execSQL ( `` DROP TABLE IF EXISTS `` + TABLE_NAME ) ; onCreate ( db ) ; } }"
int week = calendar.get ( Calendar.WEEK_OF_YEAR ) ;
"static < T > T pick ( T a1 , T a2 ) { return a2 ; } Serializable s = pick ( `` d '' , new ArrayList < String > ( ) ) ;"
"public class Portfolio { private LinkedList < Investment > investmentsList ; public Portfolio ( ) { investmentsList = new LinkedList < Investment > ( ) ; } public void addInvestment ( String symbol , double money ) { Investment invest = findInvestment ( symbol ) ; if ( invest == null ) { System.out.println ( `` symbol does not exist '' ) ; getInvestmentsList ( ) .add ( new Investment ( symbol , money ) ) ; System.out.println ( `` New invetment has been added to your portfolio - `` +symbol ) ; } else { invest.addTrade ( symbol , money ) ; System.out.println ( `` A new trade has been added to the current investment - `` + symbol ) ; } } public Investment findInvestment ( String symbol ) { Investment found = null ; ListIterator < Investment > iter = investmentsList.listIterator ( ) ; while ( iter.hasNext ( ) ) { if ( iter.next ( ) .getSymbol ( ) .equals ( symbol ) ) { found = iter ; return found ; System.out.println ( `` Found the symbol '' ) ; } } return found ; }"
"import java.util.Arrays ; import java.util.List ; import javax.swing.JComponent ; import javax.swing.JPanel ; import javax.swing.JTabbedPane ; public class Test { public static void main ( String [ ] args ) { /** * This line shows this compilation error in eclipse : * Type mismatch : can not convert from * List < Class < ? extends JComponent & Accessible > > * to List < Class < ? extends JComponent > > */ List < Class < ? extends JComponent > > listComp = Arrays.asList ( JTabbedPane.class , JPanel.class ) ; /** * This one compiles fine and the difference is that * he added JComponent.class on the list and the * code is working fine */ List < Class < ? extends JComponent > > listComp2 = Arrays.asList ( JTabbedPane.class , JPanel.class , JComponent.class ) ; } } List < Class < ? extends JComponent > > listComp = new ArrayList < Class < ? extends JComponent > > ( Arrays.asList ( JTabbedPane.class , JPanel.class ) ) ;"
public boolean equals ( A other ) { ... } public boolean equals ( B other ) { ... } public boolean equals ( Object other ) { ... } A a = new A ( ) ; C c = new C ( ) ; a=c ; System.out.println ( a.equals ( c ) ) ;
"PageableResult < List < T > > search ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > params = request.getParameterMap ( ) ; log.info ( `` params : { } '' , params ) ; return getService ( ) .search ( params ) ; } String resultat = params.get ( `` resultat '' ) ; // I have nothing with resultat"
"class Column implements Comparable < Column > { private final float startX ; private final float endX ; public Column ( float startX , float endX ) { this.startX = startX ; this.endX = endX ; } public boolean isSameColumn ( Column c ) { return c.startX < = this.startX & & this.startX < c.endX || this.startX < = c.startX & & c.startX < this.endX ; } @ Override public int hashCode ( ) { return Objects.hash ( startX , endX ) ; } @ Override public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( getClass ( ) ! = obj.getClass ( ) ) return false ; final Column other = ( Column ) obj ; return this.startX == other.startX & & this.endX == other.endX ; } @ Override public int compareTo ( Column o ) { return isSameColumn ( o ) ? 0 : Float.compare ( this.startX , o.startX ) ; } } java.lang.IllegalArgumentException : Comparison method violates its general contract ! public static void main ( String [ ] args ) { String points = `` 54.199997 , 88.399216 , 135.2 , 250.09616 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 168.19669 , 178.7 , 207.49712 , `` + `` 135.2 , 168.19669 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 189.49884 , 135.2 , 180.7966 , 370.1 , 391.69785 , 108.2 , 115.39928 , 135.2 , 215.59856 , `` + `` 135.2 , 172.69742 , 377.9 , 391.6986 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 370.1 , 391.69785 , `` + `` 108.2 , 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 374.0 , 391.69824 , `` + `` 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 189.49884 , `` + `` 135.2 , 180.7966 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 374.0 , 391.69824 , `` + `` 108.2 , 120.79874 , 135.2 , 217.09616 , 135.2 , 170.59763 , 377.9 , 391.6986 , 108.2 , 120.79874 , 135.2 , 208.99689 , 135.2 , 163.39717 , 374.0 , 391.69824 , `` + `` 108.2 , 120.79874 , 135.2 , 214.6982 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 189.49884 , 135.2 , 180.7966 , 374.0 , 391.69824 , `` + `` 135.2 , 250.09616 , 517.1 , 544.6972 , 108.2 , 120.79874 , 135.2 , 198.79779 , 135.2 , 187.69778 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 215.59856 , `` + `` 135.2 , 172.69742 , 377.9 , 391.6986 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 370.1 , 391.69785 , `` + `` 108.2 , 120.79874 , 135.2 , 217.39865 , 135.2 , 175.69711 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 219.49155 , `` + `` 135.2 , 163.39717 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 201.19598 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 218.59897 , `` + `` 135.2 , 189.49573 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 218.59897 , 135.2 , 189.49573 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 209.5979 , `` + `` 135.2 , 163.39717 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 174.19609 , 135.2 , 172.69742 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 174.19609 , `` + `` 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 189.49884 , 135.2 , 180.7966 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 214.39862 , `` + `` 135.2 , 178.9956 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 161.59735 , 135.2 , 196.39772 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , `` + `` 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , `` + `` 108.2 , 120.79874 , 135.2 , 195.1961 , 135.2 , 208.6958 , 135.2 , 178.0957 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 118.99892 , `` + `` 135.2 , 144.1991 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 118.99892 , 135.2 , 193.09724 , 374.0 , 391.69824 , 108.2 , 120.79874 , `` + `` 135.2 , 185.59799 , 135.2 , 189.19801 , 377.9 , 391.6986 , 108.2 , 120.79874 , 135.2 , 202.997 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , `` + `` 135.2 , 217.69742 , 135.2 , 163.39717 , 374.0 , 391.69824 , 135.2 , 250.09616 , 517.1 , 544.6972 , 108.2 , 120.79874 , 135.2 , 187.69786 , 135.2 , 172.69742 , `` + `` 370.1 , 391.69785 , 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , 120.79874 , 135.2 , 208.99646 , 135.2 , 182.8964 , `` + `` 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 214.6982 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 178.69823 , 135.2 , 163.39717 , `` + `` 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 178.69844 , 135.2 , 172.69742 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 178.69844 , 135.2 , 172.69742 , `` + `` 377.9 , 391.6986 , 108.2 , 120.79874 , 135.2 , 221.29475 , 135.2 , 163.39717 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 221.29475 , 135.2 , 163.39717 , `` + `` 370.1 , 391.69785 , 524.7 , 553.7995 , 54.199997 , 88.399216 , 108.2 , 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 440.6 , 468.19724 , 108.2 , 125.59826 , `` + `` 135.2 , 179.2979 , 187.7 , 210.49771 , 135.2 , 208.69688 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 178.69844 , 135.2 , 172.69742 , 374.0 , 391.69824 , `` + `` 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 436.7 , 468.19687 , 108.2 , 118.698944 , 135.2 , `` + `` 196.99606 , 135.2 , 172.99727 , 360.2 , 391.69687 , 108.2 , 120.79874 , 135.2 , 201.19598 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , `` + `` 209.5979 , 135.2 , 163.39717 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 189.49884 , 135.2 , 180.7966 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , `` + `` 208.69637 , 135.2 , 175.39758 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , `` + `` 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 436.7 , `` + `` 468.19687 , 108.2 , 118.698944 , 135.2 , 208.09802 , 135.2 , 162.79724 , 364.1 , 391.69724 , 135.2 , 250.09616 , 517.1 , 544.6972 , 108.2 , 120.79874 , 135.2 , `` + `` 178.0957 , 135.2 , 163.39717 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 185.59691 , 135.2 , 163.39717 , 370.1 , 391.69785 , 108.2 , 115.39928 , 135.2 , `` + `` 178.69844 , 135.2 , 172.69742 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 125.59826 , 135.2 , 179.2979 , 187.7 , 210.49771 , 135.2 , `` + `` 213.79517 , 370.1 , 391.69785 , 517.1 , 544.6972 , 54.199997 , 88.399216 , 108.2 , 120.79874 , 135.2 , 214.6982 , 135.2 , 172.69742 , 370.1 , 391.69785 , 108.2 , `` + `` 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 180.79544 , 135.2 , 167.29678 , 374.0 , 391.69824 , 108.2 , `` + `` 120.79874 , 135.2 , 165.49696 , 135.2 , 167.29678 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 165.49696 , 135.2 , 167.29678 , 374.0 , 391.69824 , 108.2 , `` + `` 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 215.59856 , 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , `` + `` 115.39928 , 135.2 , 190.69446 , 135.2 , 190.69894 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 165.49861 , 135.2 , 195.19905 , 377.9 , 391.6986 , 517.1 , `` + `` 544.6972 , 54.199997 , 88.399216 , 108.2 , 118.99892 , 135.2 , 205.99895 , 135.2 , 195.79625 , 374.0 , 391.69824 , 517.1 , 544.6972 , 54.199997 , 88.399216 , `` + `` 108.2 , 118.99892 , 135.2 , 201.49861 , 374.0 , 391.69824 , 108.2 , 118.698944 , 135.2 , 201.79861 , 135.2 , 183.19757 , 364.1 , 391.69724 , 517.1 , 544.6972 , `` + `` 54.199997 , 87.499214 , 108.2 , 125.59826 , 135.2 , 182.2976 , 190.7 , 214.39763 , 135.2 , 215.897 , 370.1 , 391.69785 , 517.1 , 544.6972 , 54.199997 , `` + `` 87.499214 , 108.2 , 118.99892 , 135.2 , 211.99535 , 370.1 , 391.69785 , 108.2 , 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 364.1 , 391.69724 , 108.2 , `` + `` 121.69865 , 135.2 , 191.89688 , 135.2 , 214.39604 , 370.1 , 391.69785 , 108.2 , 125.59826 , 135.2 , 222.19763 , 135.2 , 215.2975 , 370.1 , 391.69785 , 108.2 , `` + `` 115.39928 , 135.2 , 199.99884 , 135.2 , 193.99792 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 175.69751 , 135.2 , 166.39688 , 374.0 , 391.69824 , 135.2 , `` + `` 250.09616 , 523.1 , 544.6978 , 108.2 , 115.39928 , 135.2 , 198.797 , 135.2 , 171.1964 , 374.0 , 391.69824 , 108.2 , 115.39928 , 135.2 , 198.797 , 135.2 , `` + `` 171.1964 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 198.797 , 135.2 , 171.1964 , 377.9 , 391.6986 , 523.1 , 544.6978 , 54.199997 , 87.499214 , 108.2 , `` + `` 118.698944 , 135.2 , 174.19894 , 135.2 , 161.59735 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 178.69844 , 135.2 , 180.7966 , 377.9 , 391.6986 , 108.2 , `` + `` 120.79874 , 135.2 , 189.49884 , 135.2 , 180.7966 , 370.1 , 391.69785 , 108.2 , 115.39928 , 135.2 , 160.99742 , 135.2 , 195.79776 , 377.9 , 391.6986 , 523.1 , `` + `` 544.6978 , 54.199997 , 87.499214 , 108.2 , 120.79874 , 135.2 , 217.69742 , 135.2 , 163.39717 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 212.59627 , `` + `` 135.2 , 172.69742 , 374.0 , 391.69824 , 108.2 , 120.79874 , 135.2 , 187.09769 , 135.2 , 163.39717 , 377.9 , 391.6986 , 108.2 , 115.39928 , 135.2 , 215.59856 , `` + `` 135.2 , 172.69742 , 377.9 , 391.6986 , 108.2 , 120.79874 , 135.2 , 195.1961 , 135.2 , 209.29948 , 135.2 , 166.09691 , 135.2 , 173.89784 , 135.2 , 200.29836 , `` + `` 370.1 , 391.69785 , 108.2 , 118.698944 , 135.2 , 181.39537 , 135.2 , 193.09871 , 377.9 , 391.6986 , 527.0 , 544.69824 , 54.199997 , 87.499214 , 108.2 , `` + `` 125.59826 , 135.2 , 179.2979 , 187.7 , 211.39763 , 135.2 , 208.69688 , 370.1 , 391.69785 , 108.2 , 120.79874 , 135.2 , 212.59627 , 135.2 , 172.69742 , 374.0 , `` + `` 391.69824 , 524.7 , 553.7995 , 54.199997 , 87.499214 , 108.2 , 120.79874 , 135.2 , 216.79735 , 135.2 , 163.39717 , 374.0 , 391.69824 , 108.2 , 121.69865 , `` + `` 135.2 , 191.89688 , 135.2 , 214.39604 , 440.6 , 468.19724 , 517.1 , 544.6972 '' ; String [ ] pointss = points.split ( `` , `` ) ; List < Column > columns = new ArrayList < > ( ) ; for ( int i = 0 ; i < pointss.length ; i += 2 ) { columns.add ( new Column ( Float.parseFloat ( pointss [ i ] ) , Float.parseFloat ( pointss [ i+1 ] ) ) ) ; } List < Column > columnsWithOverlap = columns.stream ( ) .distinct ( ) .sorted ( ) .collect ( toList ( ) ) ; System.out.println ( columnsWithOverlap ) ; }"
"private int id ; private String name ; private Map < Answer , User > answers ; public Question ( ) { } public Question ( int id , String name , Map < Answer , User > answers ) { super ( ) ; this.id = id ; this.name = name ; this.answers = answers ; }"
"final int [ ] PRED = { 0 , 0 , 0 } ; ... PRED [ 1 ] = 3 ; final int [ ] PRED = new int [ this.Nf ] ; for ( int nComponent = 0 ; nComponent < this.Nf ; nComponent++ ) { PRED [ nComponent ] = 0 ; } ... PRED [ 1 ] = 3 ;"
String [ ] args
"@ Data @ AllArgsConstructor @ NoArgsConstructorclass User { String name ; String languages ; } List < User > list = new ArrayList < > ( ) ; list.add ( new User ( `` sam '' , `` java '' ) ) ; list.add ( new User ( `` sam '' , `` js '' ) ) ; list.add ( new User ( `` apollo '' , `` html '' ) ) ; [ User ( name=apollo , languages=html ) , User ( name=sam , languages=java , js ) ] List < User > l = list.stream ( ) .collect ( Collectors.groupingBy ( u - > u.name , Collectors.reducing ( ( u1 , u2 ) - > new User ( u1.name , u1.languages + `` , `` + u2.languages ) ) ) ) .values ( ) .stream ( ) .filter ( user - > user.get ( ) ! = null ) .map ( user - > user.get ( ) ) .collect ( Collectors.toList ( ) ) ; System.out.println ( l ) ;"
"import java.awt . * ; import java.awt.event . * ; import java.awt.image.BufferedImage ; import javax.swing . * ; import javax.swing.border.EmptyBorder ; public class DragTabFrame extends JFrame { private JTabbedPane tabbedPane = new JTabbedPane ( ) ; private final static DragTabManager dragTabManager = new DragTabManager ( ) ; final MouseAdapter ma = new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { JComponent c = ( JComponent ) e.getSource ( ) ; dragTabManager.setCurrentComponent ( c ) ; DragTabFrame dtf = ( DragTabFrame ) c.getTopLevelAncestor ( ) ; dragTabManager.setCurrentFrame ( dtf ) ; JTabbedPane tp = dtf.getTabbedPane ( ) ; int index = tp.indexOfComponent ( c ) ; if ( index < 0 ) index = 0 ; String title = tp.getTitleAt ( index ) ; dragTabManager.setCurrentTitle ( title ) ; } @ Override public void mousePressed ( MouseEvent e ) { JComponent c = ( JComponent ) e.getSource ( ) ; DragTabFrame dtf = ( DragTabFrame ) c.getTopLevelAncestor ( ) ; dragTabManager.setCurrentComponent ( c ) ; dragTabManager.setCurrentFrame ( dtf ) ; JTabbedPane tp = dtf.getTabbedPane ( ) ; int index = tp.indexOfComponent ( c ) ; if ( index < 0 ) index = 0 ; String title = tp.getTitleAt ( index ) ; dragTabManager.setCurrentTitle ( title ) ; } @ Override public void mouseReleased ( MouseEvent e ) { JComponent c = ( JComponent ) e.getSource ( ) ; if ( c.getTopLevelAncestor ( ) .getBounds ( ) .contains ( e.getLocationOnScreen ( ) ) ) { // do nothing , the drop point is the same frame } else { DragTabFrame dtf = getTargetFrame ( e.getLocationOnScreen ( ) ) ; if ( dtf == null ) { dtf = new DragTabFrame ( ) ; dtf.init ( ) ; dtf.setLocation ( e.getLocationOnScreen ( ) ) ; } else { DragTabFrame fromFrame = dragTabManager.getCurrentFrame ( ) ; fromFrame.removeTabComponent ( c ) ; JTabbedPane tp = fromFrame.getTabbedPane ( ) ; if ( tp.getTabCount ( ) == 0 ) { fromFrame.setVisible ( false ) ; fromFrame.dispose ( ) ; } } dtf.addTabComponent ( dragTabManager.getCurrentTitle ( ) , c ) ; dtf.pack ( ) ; dtf.setVisible ( true ) ; } } } ; public JTabbedPane getTabbedPane ( ) { return tabbedPane ; } public DragTabFrame getTargetFrame ( Point p ) { Frame [ ] frames = Frame.getFrames ( ) ; for ( Frame frame : frames ) { if ( frame instanceof DragTabFrame & & frame.getBounds ( ) .contains ( p ) ) { return ( DragTabFrame ) frame ; } } return null ; } public void init ( ) { // the GUI as seen by the user ( without frame ) JPanel gui = new JPanel ( new BorderLayout ( ) ) ; gui.setBorder ( new EmptyBorder ( 2 , 3 , 2 , 3 ) ) ; gui.add ( tabbedPane , BorderLayout.CENTER ) ; add ( gui ) ; setDefaultCloseOperation ( JFrame.DISPOSE_ON_CLOSE ) ; // See https : //stackoverflow.com/a/7143398/418556 for demo . setLocationByPlatform ( true ) ; } public void addTabComponent ( String name , Component c ) { tabbedPane.addTab ( name , c ) ; c.addMouseListener ( ma ) ; c.addMouseMotionListener ( ma ) ; } public void removeTabComponent ( Component c ) { tabbedPane.remove ( c ) ; c.removeMouseListener ( ma ) ; c.removeMouseMotionListener ( ma ) ; } public static void main ( String [ ] args ) { Runnable r = new Runnable ( ) { @ Override public void run ( ) { DragTabFrame dtf = new DragTabFrame ( ) ; dtf.init ( ) ; BufferedImage bi = new BufferedImage ( 200 , 40 , BufferedImage.TYPE_INT_RGB ) ; for ( int ii = 1 ; ii < 4 ; ii++ ) { JLabel l = new JLabel ( new ImageIcon ( bi ) ) ; dtf.addTabComponent ( `` Tab `` + ii , l ) ; } dtf.pack ( ) ; // should be done last , to avoid flickering , moving , // resizing artifacts . dtf.setVisible ( true ) ; } } ; // Swing GUIs should be created and updated on the EDT // http : //docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html SwingUtilities.invokeLater ( r ) ; } } class DragTabManager { private DragTabFrame currentFrame ; private JComponent currentComponent ; private String currentTitle ; private Timer timer ; public DragTabManager ( ) { ActionListener actionListener = new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Frame [ ] frames = Frame.getFrames ( ) ; if ( frames.length==0 ) { timer.stop ( ) ; } System.out.println ( `` frames.length : `` + frames.length ) ; boolean allInvisible = true ; for ( Frame frame : frames ) { if ( frame instanceof DragTabFrame ) { DragTabFrame dtf = ( DragTabFrame ) frame ; if ( dtf.isVisible ( ) ) { allInvisible = false ; } if ( dtf.getTabbedPane ( ) .getTabCount ( ) ==0 ) { dtf.setVisible ( false ) ; dtf.dispose ( ) ; } } } if ( allInvisible ) { timer.stop ( ) ; } } } ; timer = new Timer ( 200 , actionListener ) ; timer.start ( ) ; } /** * @ return the currentFrame */ public DragTabFrame getCurrentFrame ( ) { return currentFrame ; } /** * @ param currentFrame the currentFrame to set */ public void setCurrentFrame ( DragTabFrame currentFrame ) { this.currentFrame = currentFrame ; } /** * @ return the currentComponent */ public JComponent getCurrentComponent ( ) { return currentComponent ; } /** * @ param currentComponent the currentComponent to set */ public void setCurrentComponent ( JComponent currentComponent ) { this.currentComponent = currentComponent ; } /** * @ return the currentTitle */ public String getCurrentTitle ( ) { return currentTitle ; } /** * @ param currentTitle the currentTitle to set */ public void setCurrentTitle ( String currentTitle ) { this.currentTitle = currentTitle ; } } import java.awt . * ; import java.awt.event . * ; import java.awt.image.BufferedImage ; import javax.swing . * ; import javax.swing.border.EmptyBorder ; public class DragTabFrame extends JFrame { private JTabbedPane tabbedPane = new JTabbedPane ( ) ; private final static DragTabManager dragTabManager = new DragTabManager ( ) ; final MouseAdapter ma = new MouseAdapter ( ) { @ Override public void mousePressed ( MouseEvent e ) { JComponent c = ( JComponent ) e.getSource ( ) ; DragTabFrame dtf = ( DragTabFrame ) c.getTopLevelAncestor ( ) ; dragTabManager.setCurrentComponent ( c ) ; dragTabManager.setCurrentFrame ( dtf ) ; JTabbedPane tp = dtf.getTabbedPane ( ) ; int index = tp.indexOfComponent ( c ) ; String title = tp.getTitleAt ( index ) ; dragTabManager.setCurrentTitle ( title ) ; } @ Override public void mouseReleased ( MouseEvent e ) { JComponent c = ( JComponent ) e.getSource ( ) ; if ( c.getTopLevelAncestor ( ) .getBounds ( ) .contains ( e.getLocationOnScreen ( ) ) ) { // do nothing , the drop point is the same frame } else { DragTabFrame dtf = getTargetFrame ( e.getLocationOnScreen ( ) ) ; if ( dtf == null ) { dtf = new DragTabFrame ( ) ; dtf.init ( ) ; dtf.setLocation ( e.getLocationOnScreen ( ) ) ; } DragTabFrame fromFrame = dragTabManager.getCurrentFrame ( ) ; fromFrame.removeTabComponent ( c ) ; JTabbedPane tp = fromFrame.getTabbedPane ( ) ; if ( tp.getTabCount ( ) == 0 ) { fromFrame.setVisible ( false ) ; fromFrame.dispose ( ) ; } dtf.addTabComponent ( dragTabManager.getCurrentTitle ( ) , c ) ; dtf.pack ( ) ; dtf.setVisible ( true ) ; } } } ; public JTabbedPane getTabbedPane ( ) { return tabbedPane ; } public DragTabFrame getTargetFrame ( Point p ) { Frame [ ] frames = Frame.getFrames ( ) ; for ( Frame frame : frames ) { if ( frame instanceof DragTabFrame & & frame.getBounds ( ) .contains ( p ) ) { return ( DragTabFrame ) frame ; } } return null ; } public void init ( ) { // the GUI as seen by the user ( without frame ) JPanel gui = new JPanel ( new BorderLayout ( ) ) ; gui.setBorder ( new EmptyBorder ( 2 , 3 , 2 , 3 ) ) ; gui.add ( tabbedPane , BorderLayout.CENTER ) ; add ( gui ) ; setDefaultCloseOperation ( JFrame.DISPOSE_ON_CLOSE ) ; // See https : //stackoverflow.com/a/7143398/418556 for demo . setLocationByPlatform ( true ) ; } public void addTabComponent ( String name , Component c ) { tabbedPane.addTab ( name , c ) ; c.addMouseListener ( ma ) ; c.addMouseMotionListener ( ma ) ; } public void removeTabComponent ( Component c ) { tabbedPane.remove ( c ) ; c.removeMouseListener ( ma ) ; c.removeMouseMotionListener ( ma ) ; } public static void main ( String [ ] args ) { Runnable r = new Runnable ( ) { @ Override public void run ( ) { DragTabFrame dtf = new DragTabFrame ( ) ; dtf.init ( ) ; BufferedImage bi = new BufferedImage ( 200 , 40 , BufferedImage.TYPE_INT_RGB ) ; for ( int ii = 1 ; ii < 4 ; ii++ ) { JLabel l = new JLabel ( new ImageIcon ( bi ) ) ; dtf.addTabComponent ( `` Tab `` + ii , l ) ; } dtf.pack ( ) ; dtf.setVisible ( true ) ; } } ; SwingUtilities.invokeLater ( r ) ; } } class DragTabManager { private DragTabFrame currentFrame ; private JComponent currentComponent ; private String currentTitle ; /** * @ return the currentFrame */ public DragTabFrame getCurrentFrame ( ) { return currentFrame ; } /** * @ param currentFrame the currentFrame to set */ public void setCurrentFrame ( DragTabFrame currentFrame ) { this.currentFrame = currentFrame ; } /** * @ return the currentComponent */ public JComponent getCurrentComponent ( ) { return currentComponent ; } /** * @ param currentComponent the currentComponent to set */ public void setCurrentComponent ( JComponent currentComponent ) { this.currentComponent = currentComponent ; } /** * @ return the currentTitle */ public String getCurrentTitle ( ) { return currentTitle ; } /** * @ param currentTitle the currentTitle to set */ public void setCurrentTitle ( String currentTitle ) { this.currentTitle = currentTitle ; } }"
object MyValues { val a = 5 } @ Target ( ElementType.TYPE ) @ Retention ( RetentionPolicy.RUNTIME ) public @ interface MyJavaAnnotation { int aValue ( ) default MyValues.a ( ) ; // < -- Error }
public class Library { Song [ ] arr = new Song [ 10 ] ; public void addSong ( Song s ) { for ( int i=0 ; i < 10 ; i++ ) arr [ i ] = s ; } }
"while ( ! isStopped ( ) ) { selector.select ( ) ; Iterator < SelectionKey > selectedKeys = selector.selectedKeys ( ) .iterator ( ) ; while ( selectedKeys.hasNext ( ) ) { SelectionKey selectedKey = selectedKeys.next ( ) ; selectedKeys.remove ( ) ; Context context = ( Context ) selectedKey.attachment ( ) ; if ( selectedKey.isReadable ( ) ) { context.readRequest ( ) ; } else /* if ( selectedKey.isWritable ( ) ) */ { context.writeResponse ( ) ; } } } public void readRequest ( ) { // read all content socketChannel.read ( requestBuffer ) ; // not interested anymore selectionKey.interestOps ( 0 ) ; executorService.submit ( ( ) - > { // handle request with request buffer and prepare response responseBuffer.put ( /* some response content */ ) ; // or set fields of some bean that will be serialized // notify selector , ready to write selectionKey.interestOps ( SelectionKey.OP_WRITE ) ; selectionKey.selector ( ) .wakeup ( ) ; // worried about this } ) ; }"
"ObservableList < DataRowModel > dataRows = FXCollections.observableArrayList ( ) ; dataRows.addAll ( dataSetModel.getRows ( ) ) ; tableDataRow.setItems ( dataRows ) ; tableDataRowStateColumn.setCellValueFactory ( f - > f.getValue ( ) .getState ( ) ) ; tableDataRow.getSelectionModel ( ) .setSelectionMode ( SelectionMode.MULTIPLE ) ; tableDataRow.getSelectionModel ( ) .getSelectedItems ( ) .addListener ( ( ListChangeListener.Change < ? extends DataRowModel > c ) - > { while ( c.next ( ) ) { c.getRemoved ( ) .stream ( ) .forEach ( remitem - > remitem.setSelected ( false ) ) ; c.getAddedSubList ( ) .stream ( ) .forEach ( additem - > additem.setSelected ( true ) ) ; System.out.println ( c.getList ( ) ) ; //Empty [ ] when selected using different columns } } ) ; import javafx.application.Application ; import javafx.beans.property.BooleanProperty ; import javafx.beans.property.SimpleBooleanProperty ; import javafx.beans.property.SimpleStringProperty ; import javafx.beans.property.StringProperty ; import javafx.collections.FXCollections ; import javafx.collections.ListChangeListener ; import javafx.collections.ObservableList ; import javafx.scene.Group ; import javafx.scene.Scene ; import javafx.scene.control.SelectionMode ; import javafx.scene.control.TableColumn ; import javafx.scene.control.TableView ; import javafx.stage.Stage ; public class TableViewSample extends Application { private TableView < DataRowModel > tableDataRow = new TableView < DataRowModel > ( ) ; private TableColumn < DataRowModel , String > tableDataRowNameColumn = new TableColumn < > ( `` Data Item '' ) ; private TableColumn < DataRowModel , String > tableDataRowStateColumn = new TableColumn < > ( `` State '' ) ; private final ObservableList < DataRowModel > dataRows = FXCollections.observableArrayList ( new DataRowModel ( `` Concinna '' , false ) , new DataRowModel ( `` Concinna '' , false ) , new DataRowModel ( `` Concinna '' , false ) , new DataRowModel ( `` Concinna '' , false ) , new DataRowModel ( `` Concinna '' , false ) ) ; public static void main ( String [ ] args ) { launch ( args ) ; } @ Override public void start ( Stage stage ) { Scene scene = new Scene ( new Group ( ) ) ; stage.setTitle ( `` Table View Sample '' ) ; stage.setWidth ( 500 ) ; stage.setHeight ( 500 ) ; tableDataRow.setItems ( dataRows ) ; tableDataRowNameColumn.setCellValueFactory ( f - > f.getValue ( ) .getName ( ) ) ; tableDataRowStateColumn.setCellValueFactory ( f - > f.getValue ( ) .getState ( ) ) ; tableDataRow.getSelectionModel ( ) .setSelectionMode ( SelectionMode.MULTIPLE ) ; tableDataRow.getSelectionModel ( ) .getSelectedItems ( ) .addListener ( ( ListChangeListener.Change < ? extends DataRowModel > c ) - > { while ( c.next ( ) ) { c.getRemoved ( ) .stream ( ) .forEach ( remitem - > remitem.setSelected ( false ) ) ; c.getAddedSubList ( ) .stream ( ) .forEach ( additem - > additem.setSelected ( true ) ) ; } } ) ; tableDataRow.getColumns ( ) .addAll ( tableDataRowNameColumn , tableDataRowStateColumn ) ; ( ( Group ) scene.getRoot ( ) ) .getChildren ( ) .addAll ( tableDataRow ) ; stage.setScene ( scene ) ; stage.show ( ) ; } public static class DataRowModel { private StringProperty name = new SimpleStringProperty ( this , `` name '' , `` '' ) ; private BooleanProperty selected = new SimpleBooleanProperty ( this , `` selected '' , true ) ; private StringProperty state = new SimpleStringProperty ( this , `` state '' , `` '' ) ; public DataRowModel ( String name , boolean selected ) { this.name.setValue ( name ) ; this.selected.setValue ( selected ) ; this.selected.addListener ( ( observable , oldVal , newVal ) - > { getState ( ) ; // Refresh State value } ) ; } public StringProperty getName ( ) { return name ; } public BooleanProperty isSelected ( ) { return selected ; } public void setSelected ( boolean selected ) { if ( this.selected.getValue ( ) ! = selected ) this.selected.setValue ( selected ) ; } public StringProperty getState ( ) { String stateStr = `` '' ; if ( selected.getValue ( ) ) stateStr += `` Selected '' ; state.setValue ( stateStr ) ; return state ; } } }"
import java.util.Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; long a = scanner.nextLong ( ) ; long b = scanner.nextLong ( ) ; long multiply = 0 ; for ( long i = a ; i < b ; i++ ) { multiply = i * ( i+1 ) ; } System.out.println ( multiply ) ; } } import java.util.Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; long a = scanner.nextLong ( ) ; long b = scanner.nextLong ( ) ; long multiply = 0 ; for ( long i = a+1 ; i < b ; i++ ) { multiply = i * ( i+1 ) ; if ( multiply==2 ) { -- multiply ; } } System.out.println ( multiply ) ; } }
"Caused by : org.springframework.beans.BeanInstantiationException : Failed to instantiate [ com.netcracker.unm.activeinventory.services.ArangoService ] : Constructor threw exception ; nested exception is com.arangodb.ArangoDBException : Could not load property-value arangodb.hosts=127.0.0.1:8538,127.0.0.1:8529 , http : //arangodb-nms-infra.sdnoshm05.com:443 . Expected format ip : port , ip : port , ..."
"int r [ ] = { 255,255,255 } ; int g [ ] = { 0,0,0 } ; int b [ ] = { 255,255,255 } ; public class Color { int r , g , b ; public Color ( int r , int g , int b ) { this.r = r ; this.g = g ; this.b = b ; } } Color [ ] arr = new Color [ 3 ] ; Color arr [ ] = new Color [ r.length ] ; for ( int i=0 ; i < r.length ; i++ ) { Color c = new Color ( r [ i ] , g [ i ] , b [ i ] ) ; arr [ i ] = c ; }"
"import java.util.ArrayList ; import java.util.List ; public class NcgNode { private List < NcgNode > nodeList_ = null ; private List < ? extends NcgNode > nodeListSrc_ = null ; private List < ? super NcgNode > nodeListSink_ = null ; public < N extends NcgNode > void addNode ( N node ) { if ( nodeList_ == null ) { nodeList_ = new ArrayList < NcgNode > ( ) ; nodeListSrc_ = nodeList_ ; nodeListSink_ = nodeList_ ; } nodeListSink_.add ( node ) ; } @ SuppressWarnings ( `` unchecked '' ) // Any way to avoid this ? public < N extends NcgNode > N getNode ( int n ) { if ( ( nodeList_ == null ) || ( n > = nodeList_.size ( ) ) ) return null ; // causes unchecked warning : return ( N ) nodeListSrc_.get ( n ) ; } } class DcgNode extends NcgNode { // enables DCG algorithms , etc } class DagNode extends DcgNode { // enables DAG algorithms , etc . }"
public static void main ( String [ ] args ) { List < Integer > l = new ArrayList < > ( ) ; l.add ( 1 ) ; l.add ( 2 ) ; l.add ( 3 ) ; Spliterator < Integer > s= ( Spliterator < Integer > ) l.spliterator ( ) ; Spliterator < Integer > s1=s.trySplit ( ) ; while ( s.tryAdvance ( n - > { System.out.print ( n+ '' `` ) ; System.out.println ( `` estimateSize `` +s.estimateSize ( ) + '' getexactsizeifknown `` +s.getExactSizeIfKnown ( ) ) ; } ) ) ;
"sort ( List < T > list , Comparator < ? super T > c** ) public class Test { public static void main ( String [ ] args ) { new Test ( ) .sortWord ( ) ; } public void sortWord ( ) { List < String > lst = new ArrayList < > ( ) ; lst.add ( `` hello '' ) ; lst.add ( `` world '' ) ; lst.add ( `` apple '' ) ; lst.add ( `` zipcode '' ) ; Collections.sort ( lst , this : :compareWord ) ; System.out.println ( lst ) ; } public int compareWord ( String a , String b ) { return a.compareTo ( b ) ; }"
Foo foo = new Foo ( ) ; List < Object > aspects = getAllAspectsOf ( foo ) ;
byte b = 0b11111111 ; // 8 bits or 1 byte int i = 0b11111111111111111111111111111111 ; //32 bits or 4 bytes public static final int MIN_VALUE = 0x80000000 ; public static final byte MIN_VALUE = -128 ;
public static void printNumUnitBits ( int n ) { int num=0 ; for ( int i=0 ; i < 32 ; i++ ) { int x=n & 1 ; num=num+x ; n=n > > > 1 ; } System.out.println ( `` Number of one bits : '' +num ) ; } public static void printNumUnitBits ( int n ) { int num=0 ; for ( int i=0 ; i < 32 ; i++ ) { num=num+n & 1 ; n=n > > > 1 ; } System.out.println ( `` Number of one bits : '' +num ) ; }
public static double calculateMeanInt ( List < Integer > numbers ) { double sum = 0.0 ; for ( Integer number : numbers ) sum += number ; return sum/numbers.size ( ) ; } public static double calculateMeanDouble ( List < Double > numbers ) { double sum = 0.0 ; for ( Double number : numbers ) sum += number ; return sum/numbers.size ( ) ; }
"public interface PlatformSupportHandler { public abstract boolean isPaltformSupported ( String platform ) ; } @ Component ( `` bsafePlatformSupportHandler '' ) public class BsafePlatoformSupportHandler implements PlatformSupportHandler { String [ ] supportedPlatform = { `` iPad '' , `` Android '' , `` iPhone '' } ; Set < String > supportedPlatformSet = new HashSet < > ( Arrays.asList ( supportedPlatform ) ) ; @ Override public boolean isPaltformSupported ( String platform ) { return supportedPlatformSet.contains ( platform ) ; } } @ Component ( `` discountPlatformSupportHandler '' ) public class DiscountPlatoformSupportHandler implements PlatformSupportHandler { String [ ] supportedPlatform = { `` Android '' , `` iPhone '' } ; Set < String > supportedPlatformSet = new HashSet < > ( Arrays.asList ( supportedPlatform ) ) ; @ Override public boolean isPaltformSupported ( String platform ) { return supportedPlatformSet.contains ( platform ) ; } } platformSupportHandler = ( PlatformSupportHandler ) ApplicationContextUtil .getBean ( subProductType + Constants.PLATFORM_SUPPORT_HANDLER_APPEND ) ;"
"public class Main { private static final char [ ] ALPHABET_ARRAY = { ' а ' , ' б ' , ' в ' , ' г ' , ' д ' , ' ѓ ' , ' е ' , ' ж ' , ' з ' , ' ѕ ' , ' и ' , ' ј ' , ' к ' , ' л ' , ' љ ' , ' м ' , ' н ' , ' њ ' , ' о ' , ' п ' , ' р ' , ' с ' , ' т ' , ' ќ ' , ' у ' , ' ф ' , ' х ' , ' ц ' , ' ч ' , ' џ ' , ' ш ' } ; public static void main ( String [ ] args ) { Collator collator = Collator.getInstance ( new Locale ( `` mk '' , `` MK '' ) ) ; List < String > list = new LinkedList < > ( ) ; for ( int i = 0 ; i < ALPHABET_ARRAY.length ; i++ ) { list.add ( `` '' + ALPHABET_ARRAY [ i ] ) ; } list.sort ( collator : :compare ) ; list.forEach ( System.out : :print ) ; } }"
String s = new String ( ) ;
int a = 5 ; ++a + ++a * ++a
"// My C # Dictionary , formerly a Java Hashtable.Dictionary < int , SongInfo > htPlaylist = MySongs.getSongs ( ) ; // Original Java code trying to convert to C # using a Dictionary.for ( Enumeration < Integer > e = htPlaylist.keys ( ) ; e.hasMoreElements ( ) ; { // What would nextElement ( ) be in a Dictonary ? SongInfo popularSongs = htPlaylist.get ( e.nextElement ( ) ) ; }"
@ RestController @ RequestMappingpublic class UsersController { private final UsersRepository usersRepository ; @ Autowired public UsersController ( UsersRepository usersRepository ) { this.usersRepository = usersRepository ; } @ GetMapping ( `` /print-user '' ) @ ResponseStatus ( HttpStatus.OK ) @ Transactional ( isolation = Isolation.READ_COMMITTED ) public void printName ( ) throws InterruptedException { User user1 = usersRepository.findById ( `` jeremy '' ) ; System.out.println ( user1.getFirstName ( ) ) ; // allow changing user 's name from another // session by calling /update-user endpoint Thread.sleep ( 5000 ) ; User user2 = usersRepository.findById ( `` jeremy '' ) ; System.out.println ( user2.getFirstName ( ) ) ; } @ GetMapping ( `` /update-user '' ) @ ResponseStatus ( HttpStatus.OK ) @ Transactional ( isolation = Isolation.READ_COMMITTED ) public User changeName ( ) { User user = usersRepository.findById ( `` jeremy '' ) ; user.setFirstName ( `` Bob '' ) ; return user ; } }
frameMovement = entitySpeed * ( frameDeltaMs / 1000 ) return Math.floor ( x ) % x == 0 ; x = 0f ; System.out.println ( Math.floor ( x ) % x ) ; > NaN x = 1f ; // Or any number with 1sd > 0System.out.println ( Math.floor ( x ) % x ) ; > 1f System.out.println ( `` x equals `` + x + `` . Math.floor ( x ) % x==Math.floor ( x ) : `` + ( Math.floor ( x ) % x==Math.floor ( x ) ) ) ; float after = pos.x+changeInPosition ; if ( Math.floor ( after ) ! = Math.floor ( pos.x ) ) { // We passed a boundary } pos.x = after ;
Optional < Optional < Integer > > a = Optional.of ( Optional.of ( 1 ) ) ; Optional < Optional < ? extends Number > > b = a ; Optional < Optional < Integer > > a = Optional.of ( Optional.of ( 1 ) ) ; Optional < Optional < ? extends Number > > c = a.map ( x- > x ) ;
$ arg = 'T ' ; $ vehicle = ( ( $ arg == ' B ' ) ? 'bus ' : ( $ arg == ' A ' ) ? 'airplane ' : ( $ arg == 'T ' ) ? 'train ' : ( $ arg == ' C ' ) ? 'car ' : ( $ arg == ' H ' ) ? 'horse ' : 'feet ' ) ; echo $ vehicle ; $ arg = 'T ' ; $ vehicle = ( ( $ arg ! = ' B ' ) ? ( $ arg ! = ' A ' ) ? ( $ arg ! = 'T ' ) ? ( $ arg ! = ' C ' ) ? ( $ arg ! = ' H ' ) ? 'feet ' : 'horse ' : 'car ' : 'train ' : 'airplane ' : 'bus ' ) ; echo $ vehicle ; class Main { public static void main ( String [ ] args ) { Character arg = ' a ' ; String vehicle = ( ( arg == ' B ' ) ? `` bus '' : ( arg == ' A ' ) ? `` airplane '' : ( arg == 'T ' ) ? `` train '' : ( arg == ' C ' ) ? `` car '' : ( arg == ' H ' ) ? `` horse '' : `` feet '' ) ; System.out.println ( vehicle ) ; vehicle = ( ( arg ! = ' B ' ) ? ( arg ! = ' A ' ) ? ( arg ! = 'T ' ) ? ( arg ! = ' C ' ) ? ( arg ! = ' H ' ) ? `` feet '' : `` horse '' : `` car '' : `` train '' : `` airplane '' : `` bus '' ) ; System.out.println ( vehicle ) ; } } $ vehicle = ( ( ( $ arg == ' B ' ) || ( $ arg == ' A ' ) || ( $ arg == 'T ' ) || ( $ arg == ' C ' ) || ( $ arg == ' H ' ) ) ? 'horse ' : 'feet ' ) ;
"Integer [ ] newArray = Stream.of ( 7 , 8 ) .parallel ( ) .toArray ( i - > new Integer [ ] { 1 , 2 , 3 , 4 , 5 , 6 } ) ; System.out.println ( Arrays.toString ( newArray ) ) ; [ 7 , 8 , 3 , 4 , 5 , 6 ] Integer [ ] newArray = Stream.of ( 7 , 8 ) .toArray ( i - > new Integer [ ] { 1 , 2 , 3 , 4 , 5 , 6 } ) ; System.out.println ( Arrays.toString ( newArray ) ) ; Exception in thread `` main '' java.lang.IllegalStateException : Begin size 2 is not equal to fixed size 6 at java.base/java.util.stream.Nodes $ FixedNodeBuilder.begin ( Nodes.java:1222 ) at java.base/java.util.stream.AbstractPipeline.copyInto ( AbstractPipeline.java:483 ) at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto ( AbstractPipeline.java:474 ) at java.base/java.util.stream.AbstractPipeline.evaluate ( AbstractPipeline.java:550 ) at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode ( AbstractPipeline.java:260 ) at java.base/java.util.stream.ReferencePipeline.toArray ( ReferencePipeline.java:517 ) at test/test.Test.main ( Test.java:30 )"
"public class Point { public final double x ; public final double y ; // As well as some random methods } C : \Users\home\IdeaProjects\test-project > java -cp jol-cli-0.9-full.jar ; out\production\java-test org.openjdk.jol.Main internals Point # Running 64-bit HotSpot VM. # Using compressed oop with 3-bit shift. # Using compressed klass with 3-bit shift. # Objects are 8 bytes aligned. # Field sizes by type : 4 , 1 , 1 , 2 , 2 , 4 , 4 , 8 , 8 [ bytes ] # Array element sizes : 4 , 1 , 1 , 2 , 2 , 4 , 4 , 8 , 8 [ bytes ] Instantiated the sample instance via public Point ( double , double ) Point object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 ( object header ) 01 00 00 00 ( 00000001 00000000 00000000 00000000 ) ( 1 ) 4 4 ( object header ) 00 00 00 00 ( 00000000 00000000 00000000 00000000 ) ( 0 ) 8 4 ( object header ) 31 32 01 f8 ( 00110001 00110010 00000001 11111000 ) ( -134139343 ) 12 4 ( alignment/padding gap ) 16 8 double Point.x 0.0 24 8 double Point.y 0.0Instance size : 32 bytesSpace losses : 4 bytes internal + 0 bytes external = 4 bytes total # [ derive ( Debug ) ] # [ repr ( C , align ( 8 ) ) ] pub struct Point { header1 : u32 , header2 : u32 , header3 : u32 , point_x : f64 , point_y : f64 , } /* * Class : Main * Method : analyze * Signature : ( LPoint ; ) V */JNIEXPORT void JNICALL Java_Main_analyze ( JNIEnv * , jclass , jobject ) ; # [ no_mangle ] pub extern `` system '' fn Java_Main_analyze ( env : JNIEnv , class : JClass , obj : JObject ) { unsafe { // De-reference the ` JObject ` to get the object pointer , then transmute the // pointer into my ` Point ` struct . let obj_ptr = mem : :transmute : : < _ , *const Point > ( *obj ) ; // Output the debug format of the ` Point ` struct println ! ( `` { : ? } '' , *obj_ptr ) ; } } // First Run : Point { header1 : 1802087032 , header2 : 7 , header3 : 43906792 , point_x : 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000230641669 , point_y : 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021692881 } // Second Run : Point { header1 : 1802087832 , header2 : 7 , header3 : 42529864 , point_x : 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000229832192 , point_y : 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021012588 } C : \Users\home\IdeaProjects\test-project > java -versionjava version `` 1.8.0_181 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_181-b13 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.181-b13 , mixed mode )"
"Map < String , List < String > > map1 = ... ; Map < String , List < String > > map2 = ... ; Map < String , List < String > > map3 = ... ; Map < String , List < String > > conversions = new HashMap < String , List < String > > ( ) ; List < String > histList = new ArrayList < String > ( ) ; for ( String key : map1.keySet ( ) ) { histList.addAll ( map1.get ( key ) ) ; histList.addAll ( map2.get ( key ) ) ; histList.addAll ( map3.get ( key ) ) ; conversions.put ( key , histList ) ; }"
"public abstract class TObjectPool < T > { protected Object [ ] availableObjects ; TObjectPool ( int size ) { availableObjects = new Object [ size ] ; } protected class RenderElementPool extends TObjectPool < RenderElement > { @ Override public void fill ( ) { for ( int i = 0 ; i < capacity ; i++ ) { availableObjects [ i ] = new RenderElement ( ) ; } } } public abstract class TObjectPool < T > { protected T [ ] availableObjects ; TObjectPool ( int size ) { availableObjects = ( T [ ] ) new Object [ size ] ; } public void add ( int index , T object ) { availableObjects [ index ] = object ; } public abstract class TObjectPool < T > { T [ ] availableObjects ; TObjectPool ( int size ) { availableObjects = ( T [ ] ) new Object [ size ] ; capacity = size ; count = capacity ; fill ( ) ; } public void add ( int index , T object ) { availableObjects [ index ] = object ; } protected class RenderElementPool extends TObjectPool < RenderElement > { @ Overridepublic void fill ( ) { for ( int i = 0 ; i < capacity ; i++ ) { add ( i , new RenderElement ( ) ) ; //this works //availableObjects [ i ] = new RenderElement ( ) ; //this gives an exception } } }"
"myCollector = Collectors.toSet ( ) ; myCollector.setFinisher ( myCustomFinisher ) ; Collector < T , ? , Set < T > > toSet = Collectors.toSet ( ) ; return Collector.of ( toSet.supplier ( ) , toSet.accumulator ( ) , toSet.combiner ( ) , yourFinisher , toSet.characteristics ( ) ) ;"
"@ GetMapping ( `` /heartbeat '' ) public ResponseEntity < String > heartbeat ( ) { return new ResponseEntity < > ( `` success '' , HttpStatus.OK ) }"
"public static CompletableFuture < Void > allOf ( CompletableFuture < ? > ... cfs ) { return andTree ( cfs , 0 , cfs.length - 1 ) ; } /** Recursively constructs a tree of completions . */static CompletableFuture < Void > andTree ( CompletableFuture < ? > [ ] cfs , int lo , int hi ) { CompletableFuture < Void > d = new CompletableFuture < Void > ( ) ; if ( lo > hi ) // empty d.result = NIL ; else { CompletableFuture < ? > a , b ; int mid = ( lo + hi ) > > > 1 ; if ( ( a = ( lo == mid ? cfs [ lo ] : andTree ( cfs , lo , mid ) ) ) == null || ( b = ( lo == hi ? a : ( hi == mid+1 ) ? cfs [ hi ] : andTree ( cfs , mid+1 , hi ) ) ) == null ) throw new NullPointerException ( ) ; if ( ! d.biRelay ( a , b ) ) { BiRelay < ? , ? > c = new BiRelay < > ( d , a , b ) ; a.bipush ( b , c ) ; c.tryFire ( SYNC ) ; } } return d ; } /** Pushes completion to this and b unless both done . */final void bipush ( CompletableFuture < ? > b , BiCompletion < ? , ? , ? > c ) { if ( c ! = null ) { Object r ; while ( ( r = result ) == null & & ! tryPushStack ( c ) ) lazySetNext ( c , null ) ; // clear on failure if ( b ! = null & & b ! = this & & b.result == null ) { Completion q = ( r ! = null ) ? c : new CoCompletion ( c ) ; while ( b.result == null & & ! b.tryPushStack ( q ) ) lazySetNext ( q , null ) ; // clear on failure } } } final CompletableFuture < V > tryFire ( int mode ) { CompletableFuture < V > d ; CompletableFuture < T > a ; CompletableFuture < U > b ; if ( ( d = dep ) == null || ! d.orApply ( a = src , b = snd , fn , mode > 0 ? null : this ) ) return null ; dep = null ; src = null ; snd = null ; fn = null ; return d.postFire ( a , b , mode ) ; }"
public static void main ( String [ ] args ) { Scanner input = new Scanner ( System.in ) ; System.out.println ( `` Enter grades size : '' ) ; int Size = input.nextInt ( ) ; String [ ] y = new String [ Size ] ; int [ ] x = new int [ Size ] ; int Max = 0 ; int Min = x [ 0 ] ; String Max_studen = y [ 0 ] ; String Min_studen = y [ 0 ] ; for ( int i = 0 ; i < Size ; i++ ) { System.out.println ( `` Enter student name # '' + ( i ) ) ; y [ i ] = input.next ( ) ; System.out.println ( `` Enter student grade : # '' + ( i ) ) ; x [ i ] = input.nextInt ( ) ; if ( x [ i ] > Max ) { Max = x [ i ] ; Max_studen = y [ i ] ; } else if ( x [ i ] < Min ) { Min = x [ i ] ; Min_studen = y [ i ] ; } } System.out.println ( `` Max Student is : `` + Max_studen ) ; System.out.println ( `` Max grade is : `` ) ; System.out.println ( Max ) ; System.out.println ( `` Min Student is : `` + Min_studen ) ; System.out.println ( `` Min grade is : `` ) ; System.out.println ( Min ) ; } Enter grades size :2Enter student name # 0SamEnter student grade : # 085Enter student name # 1SamyEnter student grade : # 195Max Student is : SamyMax grade is:95Min Student is : nullMin grade is :0
"public class CustomPublisher implements HttpRequest.BodyPublisher { private byte [ ] bytes ; public CustomPublisher ( ObjectNode jsonData ) { ... // Deserialize jsonData to bytes ... } @ Override public long contentLength ( ) { if ( bytes == null ) return 0 ; return bytes.length } @ Override public void subscribe ( Flow.Subscriber < ? super ByteBuffer > subscriber ) { CustomSubscription subscription = new CustomSubscription ( subscriber , bytes ) ; subscriber.onSubscribe ( subscription ) ; } private CustomSubscription implements Flow.Subscription { private final Flow.Subscriber < ? super ByteBuffer > subscriber ; private boolean cancelled ; private Iterator < Byte > byterator ; private CustomSubscription ( Flow.Subscriber < ? super ByteBuffer > subscriber , byte [ ] bytes ) { this.subscriber = subscriber ; this.cancelled = false ; List < Byte > bytelist = new ArrayList < > ( ) ; for ( byte b : bytes ) { bytelist.add ( b ) ; } this.byterator = bytelist.iterator ( ) ; } @ Override public void request ( long n ) { if ( cancelled ) return ; if ( n < 0 ) { subscriber.onError ( new IllegalArgumentException ( ) ) ; } else if ( byterator.hasNext ( ) ) { subscriber.onNext ( ByteBuffer.wrap ( new byte [ ] { byterator.next ( ) ) ) ; } else { subscriber.onComplete ( ) ; } } @ Override public void cancel ( ) { this.cancelled = true ; } } }"
class MyCommand implements Order { private final Runnable action ; public MyCommand ( Runnable action ) { this.action = action ; } @ Override public void execute ( ) { action.run ( ) ; } } MyCommand bsc = new MyCommand ( stock : :buy ) ; MyCommand ssc = new MyCommand ( stock : :sell ) ;
"public class Demo { private List < String > list ; public Demo ( ) throws SecurityException , NoSuchFieldException { System.out.println ( ( ( Class < ? > ) ( ( ParameterizedType ) getClass ( ) .getDeclaredField ( `` list '' ) .getGenericType ( ) ) .getActualTypeArguments ( ) [ 0 ] ) .getName ( ) ) ; } public static void main ( String [ ] args ) throws SecurityException , NoSuchFieldException { new Demo ( ) ; } }"
Student s = new GradStudent ( ) s.getId ( ) Student s = new GradStudent ( ) GradStudent g = new GradStudent ( ) Student s = ( new GradStudent ( ) .setId ( 1 ) )
"String a = `` `` ; String [ ] b = a.split ( `` , '' ) ; System.out.println ( b.length ) ; String a = `` , , , , , , , , , , , , '' ; String [ ] b = a.split ( `` , '' ) ; System.out.println ( b.length ) ;"
"package fpinscala.parallelism import java.util.concurrent._ import language.implicitConversions object Par { type Par [ A ] = ExecutorService = > Future [ A ] def run [ A ] ( s : ExecutorService ) ( a : Par [ A ] ) : Future [ A ] = a ( s ) def unit [ A ] ( a : A ) : Par [ A ] = ( es : ExecutorService ) = > UnitFuture ( a ) // ` unit ` is represented as a function that returns a ` UnitFuture ` , which is a simple implementation of ` Future ` that just wraps a constant value . It does n't use the ` ExecutorService ` at all . It 's always done and ca n't be cancelled . Its ` get ` method simply returns the value that we gave it . private case class UnitFuture [ A ] ( get : A ) extends Future [ A ] { def isDone = true def get ( timeout : Long , units : TimeUnit ) = get def isCancelled = false def cancel ( evenIfRunning : Boolean ) : Boolean = false } def map2 [ A , B , C ] ( a : Par [ A ] , b : Par [ B ] ) ( f : ( A , B ) = > C ) : Par [ C ] = // ` map2 ` does n't evaluate the call to ` f ` in a separate logical thread , in accord with our design choice of having ` fork ` be the sole function in the API for controlling parallelism . We can always do ` fork ( map2 ( a , b ) ( f ) ) ` if we want the evaluation of ` f ` to occur in a separate thread . ( es : ExecutorService ) = > { val af = a ( es ) val bf = b ( es ) UnitFuture ( f ( af.get , bf.get ) ) // This implementation of ` map2 ` does _not_ respect timeouts . It simply passes the ` ExecutorService ` on to both ` Par ` values , waits for the results of the Futures ` af ` and ` bf ` , applies ` f ` to them , and wraps them in a ` UnitFuture ` . In order to respect timeouts , we 'd need a new ` Future ` implementation that records the amount of time spent evaluating ` af ` , then subtracts that time from the available time allocated for evaluating ` bf ` . } def fork [ A ] ( a : = > Par [ A ] ) : Par [ A ] = // This is the simplest and most natural implementation of ` fork ` , but there are some problems with it -- for one , the outer ` Callable ` will block waiting for the `` inner '' task to complete . Since this blocking occupies a thread in our thread pool , or whatever resource backs the ` ExecutorService ` , this implies that we 're losing out on some potential parallelism . Essentially , we 're using two threads when one should suffice . This is a symptom of a more serious problem with the implementation , and we will discuss this later in the chapter . es = > es.submit ( new Callable [ A ] { def call = a ( es ) .get } ) def lazyUnit [ A ] ( a : = > A ) : Par [ A ] = fork ( unit ( a ) ) def equal [ A ] ( e : ExecutorService ) ( p : Par [ A ] , p2 : Par [ A ] ) : Boolean = p ( e ) .get == p2 ( e ) .get } val a = Par.lazyUnit ( 42 + 1 ) val es : ExecutorService = Executors.newFixedThreadPool ( 2 ) println ( Par.fork ( a ) ( es ) .get ) java.util.concurrent.ThreadPoolExecutor @ 73a86d72 [ Running , pool size = 0 , active threads = 0 , queued tasks = 0 , completed tasks = 0 ]"
"private void quicksort ( int low , int high ) { int i = low , j = high ; int pivot = numbers [ low + ( high-low ) /2 ] ; while ( i < = j ) { while ( numbers [ i ] < pivot ) { i++ ; } while ( numbers [ j ] > pivot ) { j -- ; } if ( i < = j ) { exchange ( i , j ) ; i++ ; j -- ; } } if ( low < j ) quicksort ( low , j ) ; if ( i < high ) quicksort ( i , high ) ; }"
"int [ ] a = { 0 , 1 , 1_0 , 0_1 , 1_0_0 , 0_1_0 , 0_0_1 } ; System.out.println ( Arrays.toString ( a ) ) ;"
/home/user/project/resources/configuration.xml /home/user/project resources/configuration.xml
"interface LabelAware < T extends Enum > { String getLabel ( ) ; T getObject ( ) ; } enum Enum_1 { A , B ; String getValue ( ) { return `` whatever '' ; } } enum Enum_2 implements LabelAware < Enum_1 > { C ( `` c '' , Enum_1.A ) , D ( `` d '' , Enum_1.B ) ; private final String label ; private final Enum_1 object ; Enum_2 ( String label , Enum_1 object ) { this.label = label ; this.object = object ; } public String getLabel ( ) { return label ; } public Enum_1 getObject ( ) { return object ; } } class Converter < S extends LabelAware , D extends Enum > { private S [ ] values ; Converter ( S [ ] values ) { this.values = values ; } D map ( String label ) { return ( D ) List.of ( values ) .find ( v - > v.getLabel ( ) .equals ( label ) ) .map ( LabelAware : :getObject ) .getOrElseThrow ( ( ) - > new RuntimeException ( `` '' ) ) ; } } public class Main { public static void main ( String [ ] args ) { System.out.println ( new Converter < Enum_2 , Enum_1 > ( Enum_2.values ( ) ) .map ( `` c '' ) .getValue ( ) ) ; } }"
"public class TestAIOOB { private String [ ] array = new String [ 0 ] ; private int grow ( final String txt ) { final int index = array.length ; array = Arrays.copyOf ( array , index + 1 ) ; array [ index ] = txt ; return index ; } @ Test public void testGrow ( ) { //final int index = grow ( `` test '' ) ; //System.out.println ( array [ index ] ) ; System.out.println ( array [ grow ( `` test '' ) ] ) ; } }"
"public static class SuperClass { } public static class SubClass extends SuperClass { } public static < T , U extends T > U returnSub ( T sup , U sub ) { return sub ; } public static void main ( String [ ] args ) { SuperClass parent = new SuperClass ( ) ; SubClass child = new SubClass ( ) ; returnSub ( parent , child ) ; returnSub ( child , parent ) ; // Java does n't like that } class SuperClassclass SubClass extends SuperClassdef returnSub [ Type , SubType < : Type ] ( supArg : Type , subArg : SubType ) : SubType = { subArg } override def main ( args : Array [ String ] ) : Unit = { val parent = new SuperClass ( ) val child = new SubClass ( ) val iAmOkWithThat : SubClass = returnSub ( parent , child ) val iDontGetThat : SuperClass = returnSub ( child , parent ) }"
import java.util.ArrayList ; import java.util.List ; public class E { public static void main ( String [ ] args ) { for ( String s : new D ( ) .strings ( ) ) { System.out.println ( `` s = `` + s ) ; } for ( String s : ( ( A ) new D ( ) ) .strings ( ) ) { System.out.println ( `` s = `` + s ) ; } } static class D extends A < C > { } static abstract class A < T extends B > { List < String > strings ( ) { return new ArrayList < String > ( ) { { add ( `` Foo '' ) ; add ( `` Bar ! `` ) ; } } ; } } static class B { } static class C extends B { } }
"graph = { } graph [ 1 ] = { } graph [ 2 ] = { } graph [ 3 ] = { } graph [ 1 ] [ 3 ] = graph [ 3 ] graph [ 2 ] [ 1 ] = graph [ 1 ] graph [ 2 ] [ 3 ] = graph [ 3 ] graph [ 3 ] [ 2 ] = graph [ 2 ] { 1 : { 3 : { 2 : { 1 : { ... } , 3 : { ... } } } } , 2 : { 1 : { 3 : { 2 : { ... } } } , 3 : { 2 : { ... } } } , 3 : { 2 : { 1 : { 3 : { ... } } , 3 : { ... } } } } graph [ 1 ] [ 3 ] [ 2 ] [ 3 ] [ 2 ] [ 1 ] [ 3 ] [ 2 ] [ 1 ] [ 3 ] [ 2 ] .keys ( ) map < int , map < int , ... > > or map < int , ... >"
"String s = `` type=INFO , languageCode=EN-GB , url=http : //www.stackoverflow.com , ref=1 , info=Text , that may contain all kind of chars. , deactivated=false ''"
package main ; public class Counter { public static long count = 0 ; } public class UseCounter implements Runnable { public void increment ( ) { synchronized ( this ) { Counter.count++ ; System.out.print ( Counter.count + `` `` ) ; } } @ Override public void run ( ) { increment ( ) ; increment ( ) ; increment ( ) ; } } public class DataRace { public static void main ( String args [ ] ) { UseCounter c = new UseCounter ( ) ; Thread t1 = new Thread ( c ) ; Thread t2 = new Thread ( c ) ; Thread t3 = new Thread ( c ) ; t1.start ( ) ; t2.start ( ) ; t3.start ( ) ; } }
"List < String > values = Arrays.asList ( ( subjects.split ( `` , '' ) ) ) ; for ( String value : values ) { char v = value.charAt ( 0 ) ; map.put ( v , map.containsKey ( v ) ? map.get ( v ) + 1 : 1 ) ; } map.put ( ' X ' , 0 ) ;"
"final List < Map < String , Object > > listOfMaps = a [ `` b '' ] as List < Map < String , Object > > final List < Map < String , Object > > listOfMaps = a [ `` b '' ] as List < Map < String , Object > > < JavaCodeStyleSettings > < option name= '' SPACES_WITHIN_ANGLE_BRACKETS '' value= '' true '' / > < codeStyleSettings language= '' Groovy '' > < option name= '' SPACES_WITHIN_ANGLE_BRACKETS '' value= '' true '' / >"
Modifier | Class | Package | Subclass | World————————————+———————+—————————+——————————+———————public | ✔ | ✔ | ✔ | ✔————————————+———————+—————————+——————————+———————protected | ✔ | ✔ | ✔ | ✘————————————+———————+—————————+——————————+———————no modifier | ✔ | ✔ | ✘ | ✘————————————+———————+—————————+——————————+———————private | ✔ | ✘ | ✘ | ✘____________+_______+_________+__________+_______my Modifier | ✔ | ✘ | ✔ | ✘____________+_______+_________+__________+_______
"public class Unification { final class Box < A > { } final class MyMap < A , B extends Box < ? extends A > > { } MyMap < ? , ? > getMap ( ) { return new MyMap < Object , Box < Object > > ( ) ; } < A , B extends Box < ? extends A > > void setMap ( final MyMap < A , B > m ) { } void compileError ( ) { setMap ( getMap ( ) ) ; } } C : \System9\KWS_sparse\sourcesNG\Domain\src\uz\Unification.java ( 21:9 ) error : method setMap in class Unification can not be applied to given types ; required : Unification.MyMap < A , B > found : Unification.MyMap < CAP # 1 , CAP # 2 > reason : inference variable A has incompatible boundsequality constraints : CAP # 1lower bounds : Objectwhere A , B are type-variables : A extends Object declared in method < A , B > setMap ( Unification.MyMap < A , B > ) B extends Unification.Box < ? extends A > declared in method < A , B > setMap ( Unification.MyMap < A , B > ) where CAP # 1 , CAP # 2 are fresh type-variables : CAP # 1 extends Object from capture of ? CAP # 2 extends Unification.Box < ? extends CAP # 1 > from capture of ?"
"Stream.of ( `` Java '' , `` Stream '' , `` Test '' ) .peek ( s - > System.out.print ( s + `` `` ) ) .allMatch ( s - > s.startsWith ( `` J '' ) ) ;"
"long n = 3 ; long i = 2 ; long prime = 0 ; long sum = 0 ; while ( n < = 1999999 ) { while ( i < = Math.sqrt ( n ) ) { // since a number can only be divisible by all // numbers // less than or equal to its square roots , we only // check from i up through n 's square root ! if ( n % i ! = 0 ) { // saves computation time i += 2 ; // if there 's a remainder , increment i and check again } else { i = 3 ; // i does n't need to go back to 2 , because n+=2 means we 'll // only ever be checking odd numbers n += 2 ; // makes it so we only check odd numbers } } // if there 's not a remainder before i = n ( meaning all numbers from 0 // to n were relatively prime ) then move on prime = n ; // set the current prime to what that number n was sum = sum + prime ; i = 3 ; // re-initialize i to 3 n += 2 ; // increment n by 2 so that we can check the next odd number } System.out.println ( sum+2 ) ; // adding 2 because we skip it at beginning"
import org.apache.pdfbox.pdmodel . * ; ... PDFont font = PDType1Font.HELVETICA_BOLD ; import org.apache.pdfbox.pdmodel.font.PDFont ;
public class Clazz { public static void main ( String args [ ] ) { final int i = 300 ; new Clazz ( ) { void foo ( ) { System.out.println ( i ) ; } } .foo ( ) ; } } public class Clazz { public static void main ( String [ ] args ) { int i = 300 ; new Clazz ( ) { void foo ( ) { System.out.println ( 300 ) ; } } .foo ( ) ; } } public class Clazz { public static void main ( String args [ ] ) { final Integer i = 300 ; // replaced int with Integer new Clazz ( ) { void foo ( ) { System.out.println ( i ) ; } } .foo ( ) ; } } public class Clazz { public static void main ( String [ ] args ) { Integer i = Integer.valueOf ( 300 ) ; new Clazz ( ) { void foo ( ) { System.out.println ( Clazz.this ) ; } } .foo ( ) ; } } class Clazz $ 1 extends Clazz { Clazz $ 1 ( Integer paramInteger ) { } void foo ( ) { System.out.println ( this.val $ i ) ; } }
"private String filename ; // holds the name of the fileprivate Kennel kennel ; // holds the kennelprivate Scanner scan ; // so we can read from keyboardprivate String tempFileName ; private String dogsFile = `` dogs.txt '' ; private String catsFile = `` cats.txt '' ; private KennelDemo ( ) { scan = new Scanner ( System.in ) ; boolean fileNotCorrect = false ; System.out.print ( `` Which animal are you looking to check into the kennel ? : `` + `` \n '' ) ; System.out.println ( `` Dog '' ) ; System.out.println ( `` Cat '' ) ; tempFileName = scan.next ( ) ; do { tempFileName.equals ( `` dog '' ) ; filename = dogsFile ; fileNotCorrect = true ; /*tempFileName.equals ( `` cat '' ) ; filename = catsFile ; fileNotCorrect = true ; */ } while ( fileNotCorrect = false ) ; System.out.println ( `` That is not a valid filename , please enter either 'dog ' or 'cat ' in lowercase . `` ) ; **********HELLO***********Which animal are you looking to check into the kennel ? : DogCatcatThat is not a valid filename , please enter either 'dog ' or 'cat ' in lowercase.Using file dogs.txt"
"public static long M ( long n , long j , long k ) { if ( k==1 ) return usefulFunctions.sum ( j , n ) ; for ( long i=j ; i < =n-k+1+1 ; i++ ) return i*M ( n , i+1 , k-1 ) ; } public static long sum ( long i , long n ) { final long s1 = n * ( n + 1 ) / 2 ; final long s2 = i * ( i - 1 ) / 2 ; return s1 - s2 ; } -- -- -- -- -- -- -- -- -- -- -- -EDIT -- -- -- -- -- -- -- -- -- -- -- -- public static long M ( long n , long j , long k ) { if ( k == 0 ) return 0 ; if ( k == 1 ) return sum ( j , n ) ; else { long summation = 0 ; for ( long i=j ; i < =n ; i++ ) summation += i*M ( n , i+1 , k-1 ) ; return summation ; } }"
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/maven-v4_0_0.xsd '' > < ! -- content -- > < /project > XPathBuilder < Element > depQueryBuilder = new XPathBuilder < > ( `` //dependencies/dependency '' , Filters.element ( ) ) ; XPathExpression < Element > depQuery = depQueryBuilder.compileWith ( XPathFactory.instance ( ) ) ; for ( Element elem : depQuery.evaluate ( document ) ) { // basically unreachable , since the resultset is always empty } depQueryBuilder.setNamespace ( `` '' , document.getRootElement ( ) .getAttributeValue ( `` xmlns '' ) ) ; // NPE : Null URIdepQueryBuilder.setNamespace ( `` '' , `` http : //maven.apache.org/POM/4.0.0 '' ) ; // Can not set a Namespace URI in XPath for `` '' prefixdepQueryBuilder.setNamespace ( Namespace.NO_NAMESPACE ) ; // no error-message , but no results eitherdepQueryBuilder.setNamespace ( document.getRootElement ( ) .getNamespace ( `` xmlns '' ) ) ; // NPE : Null NamespacedepQueryBuilder.setNamespace ( document.getRootElement ( ) .getNamespace ( `` '' ) ) ; // Can not set a Namespace URI in XPath for `` '' prefixdepQueryBuilder.setNamespace ( `` xmlns '' , `` http : //maven.apache.org/POM/4.0.0 '' ) ; // Name `` xmlns '' is not legal for JDOM/XML Namespace prefix document.getRootElement ( ) .getDescendants ( Filter.element ( `` dependency '' ) ) ; // empty iteratordocument.getRootElement ( ) .getChild ( `` dependencies '' ) .getChildren ( `` dependency '' ) ) ; // NullPointerException because there is no child `` dependencies ''"
"jshell > int x = 1 ; x == > 1jshell > xx == > 1jshell > jdk.jshell.JShell js = jdk.jshell.JShell.create ( ) ; js == > jdk.jshell.JShell @ 1a052a00jshell > js.eval ( `` x '' ) ; $ 4 == > [ SnippetEvent ( snippet=Snippet : ErroneousKey # 1-x , previousStatus=NONEXISTENT , status=REJECTED , isSignatureChange=false , causeSnippetnull ) ] jshell > js.eval ( `` int x = 2 ; '' ) ; $ 5 == > [ SnippetEvent ( snippet=Snippet : VariableKey ( x ) # 2-int x = 2 ; , previousStatus=NONEXISTENT , status=VALID , isSignatureChange=true , causeSnippetnullvalue=2 ) ] jshell > js.eval ( `` x '' ) ; $ 6 == > [ SnippetEvent ( snippet=Snippet : ExpressionKey ( x ) # 3-x , previousStatus=NONEXISTENT , status=VALID , isSignatureChange=true , causeSnippetnullvalue=2 ) ]"
System.out.println ( `` This is the not equal to sign\n≠ '' ) ; This is the not equal to sign≠ This is the not equal to sign ?
void main ( ) { // Point 0 BigThing bt = new BigThing ( ) ; // Point 1 WeakReference < BigThing > weak = new WeakReference < > ( bt ) ; // Point 2 doSomething ( weak ) ; // Point 3 } void doSomething ( ... ) { ... }
src/main/java src/main/webapp src/main/webapp
"BufferedReader console = new BufferedReader ( new InputStreamReader ( System.in ) ) ; String s = `` '' ; do { ClassLoader clsldr = ClassLoader.getSystemClassLoader ( ) ; Package [ ] pkgs = Package.getPackages ( ) ; s = console.readLine ( ) ; if ( s.equals ( `` : exit '' ) ) { System.exit ( 0 ) ; } boolean classFound = false ; Object loadedClass = null ; String classname = `` '' ; for ( int i = 0 ; i < pkgs.length ; i++ ) { Package package1 = pkgs [ i ] ; try { classname = package1.getName ( ) .replace ( '/ ' , ' . ' ) + `` . '' + s ; clsldr.loadClass ( classname ) ; loadedClass = Class.forName ( classname ) ; classFound = true ; } catch ( Exception e ) { } } System.out.println ( `` LOADED A CLASS ! ! ! ! `` ) ; System.out.println ( classname ) ; System.out.println ( loadedClass ) ; } while ( s.length ( ) == 0 ) ; JavaLOADED A CLASS ! ! ! ! sun.net.util.Javanull java version `` 1.7.0_25 '' Java ( TM ) SE Runtime Environment ( build 1.7.0_25-b17 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 23.25-b01 , mixed mode )"
"Employee emp = new Employee ( ) ; try { ps = con.prepareStatement ( `` select * from Employee WHERE username = ? `` ) ; ps.setString ( 1 , username ) ; ResultSet r = ps.executeQuery ( ) ; if ( r.next ( ) ) { // 12 lines to put values into employee object need to be shorter emp.setID ( r.getInt ( 1 ) ) ; emp.setTitle ( r.getString ( 2 ) ) ; emp.setFname ( r.getString ( 3 ) ) ; emp.setLname ( r.getString ( 4 ) ) ; emp.setMobile ( r.getString ( 5 ) ) ; emp.setPhone ( r.getString ( 6 ) ) ; emp.setEmail ( r.getString ( 7 ) ) ; emp.setPosition ( r.getString ( 8 ) ) ; emp.setUsername ( r.getString ( 9 ) ) ; emp.setPassword ( r.getString ( 10 ) ) ; emp.setQuestion ( r.getString ( 11 ) ) ; emp.setAnswer ( r.getString ( 12 ) ) ; } } ... .."
"( A > B ) , ( C > D ) , ( A ! = C or D ) ( B ! = C or D ) ( C ! = A or B ) ( D ! = A or B ) ."
protected < T > T getValueForKey ( String key ) { T value = null ; // currentStats is just a Bundle if ( currentStats.containsKey ( key ) ) { return value ; } return value ; } protected < T extends String > T getValueForKey ( String key ) { }
"char [ ] passwd = passwordProvider.getKeyStorePassword ( ) ; KeyStore keystore = KeyStore.getInstance ( `` JKS '' ) ; // TODO : Create the input stream ; keystore.load ( inputstream , passwd ) ; System.arraycopy ( new char [ passwd.length ] , 0 , passwd , 0 , passwd.length ) ; // Please continue ... char [ ] passwd = passwordProvider.getKeyStorePassword ( ) .toCharArray ( ) ; KeyStore keystore = KeyStore.getInstance ( `` JKS '' ) ; // TODO : using the passwd , load the keystore ; System.arraycopy ( new char [ passwd.length ] , 0 , passwd , 0 , passwd.length ) ; // Please continue ..."
public int hashCode ( ) { int h = hash ; if ( h == 0 ) { int off = offset ; char val [ ] = value ; int len = count ; for ( int i = 0 ; i < len ; i++ ) { h = 31*h + val [ off++ ] ; } hash = h ; } return h ; }
"{ `` 2c1 '' : true , `` 2c2 '' : true , `` 2c3 '' : true , `` 2c4 '' : true , `` 2c5 '' : true , `` 2c6 '' : true } { `` 2c1 '' : true } final JSONObject myObject = new JSONObject ( ) ; try { myObject.put ( dataRecord.getID ( ) , true ) ; } catch ( JSONException e ) { e.printStackTrace ( ) ; } checkBox.setOnClickListener ( new View.OnClickListener ( ) { String idSelected = dataRecord.getID ( ) ; public void onClick ( View v ) { if ( ( ( CheckBox ) v ) .isChecked ( ) ) { ParseUser.getCurrentUser ( ) .put ( `` checklistData '' , myObject ) ; ParseUser.getCurrentUser ( ) .saveInBackground ( ) ; Toast.makeText ( getContext ( ) , idSelected , Toast.LENGTH_SHORT ) .show ( ) ; } else { Toast.makeText ( getContext ( ) , `` CheckBox is unchecked '' , Toast.LENGTH_SHORT ) .show ( ) ; } } } ) ;"
scala > `` 1 '' + 1res0 : java.lang.String = 11 scala > 1 + `` 1 '' res1 : String = 11
"Paypal prop = this.paypalDao.get ( ) ; String clientId = prop.getClientID ( ) ; String clientSecret = prop.getClientSecret ( ) ; APIContext apiContext = new APIContext ( clientId , clientSecret , `` sandbox '' ) ; if ( payerId ! = null ) { if ( guid ! = null ) { Payment payment = new Payment ( ) ; payment.setId ( map.get ( guid ) ) ; PaymentExecution paymentExecution = new PaymentExecution ( ) ; paymentExecution.setPayerId ( payerId ) ; payment.execute ( apiContext , paymentExecution ) ; String url = request.getContextPath ( ) ; return url+ '' /orders '' ; } } else { List < Produto > lista_de_produtos = this.getListaDeProdutos ( clienteId ) ; Double total = 0.0 ; for ( Produto produto : lista_de_produtos ) total = total + produto.getPreco ( ) ; DecimalFormat df = new DecimalFormat ( `` 0.00 '' ) ; String svalue = df.format ( total ) .replace ( ' , ' , ' . ' ) ; Details details = new Details ( ) ; details.setSubtotal ( svalue ) ; Amount amount = new Amount ( ) ; amount.setCurrency ( `` BRL '' ) ; amount.setTotal ( svalue ) ; amount.setDetails ( details ) ; Transaction transaction = new Transaction ( ) ; transaction.setAmount ( amount ) ; transaction.setDescription ( lista_de_produtos.toString ( ) ) ; List < Transaction > transactions = new ArrayList < Transaction > ( ) ; transactions.add ( transaction ) ; Payer payer = new Payer ( ) ; payer.setPaymentMethod ( `` paypal '' ) ; Payment payment = new Payment ( ) ; payment.setIntent ( `` sale '' ) ; payment.setPayer ( payer ) ; payment.setTransactions ( transactions ) ; RedirectUrls redirectUrls = new RedirectUrls ( ) ; guid = UUID.randomUUID ( ) .toString ( ) ; String url = request.getContextPath ( ) ; redirectUrls.setCancelUrl ( url+ '' /cart '' ) ; redirectUrls.setReturnUrl ( url+ '' /paypal/checkout/ '' +clientId+ '' / ? guid= '' + guid ) ; payment.setRedirectUrls ( redirectUrls ) ; Payment createdPayment = payment.create ( apiContext ) ; Iterator < Links > links = createdPayment.getLinks ( ) .iterator ( ) ; while ( links.hasNext ( ) ) { Links link = links.next ( ) ; if ( link.getRel ( ) .equalsIgnoreCase ( `` approval_url '' ) ) { map.put ( `` redirectURL '' , link.getHref ( ) ) ; redirectURL = link.getHref ( ) ; } } map.put ( guid , createdPayment.getId ( ) ) ; payment.setId ( map.get ( guid ) ) ; } return redirectURL ;"
List < Device > devices = dbService.getDevices ( ... ) ; List < DeviceDTO > devicesDTO = new ArrayList < DeviceDTO > ( ) ; for ( Device d : devices ) { devicesDTO.add ( convertToDTO ( d ) ) ; } WrapperDTO wrapper = new WrapperDTO ( devicesDTO ) ; List < Device > devices = dbService.getDevices ( ... ) ; List < DeviceDTO > devicesDTO = devices.stream ( ) .map ( d - > convertToDTO ( d ) ) .collect ( Collectors.toList ( ) ) ; WrapperDTO wrapper = new WrapperDTO ( devicesDTO ) ; WrapperDTO wrapper = devices.stream ( ) ... ... ..collect ( ( ) - > WrapperDTO : new ) ;
"abstract Class Base { } class A extends Base { //new methods } class B extends Base { //new methods } class C extends A , B { //new methods }"
public final class firstObj { public static void main ( String args [ ] ) { Object obj = new Object ( ) ; Object obj1 = new Object ( ) ; System.out.println ( obj ) ; System.out.println ( obj1 ) ; } } java.lang.Object @ 6f548414java.lang.Object @ 65ab7626 java.lang.Object @ 659c2931java.lang.Object @ 6f548414
"import java.util.List ; import java.util.function.Function ; class MinimalTypeFailureExample { public static void main ( String [ ] args ) { List < String > originalList = null ; // irrelevant List < IntToByteFunction > resultList = transform ( originalList , outer - > inner - > doStuff ( inner , outer ) ) ; System.out.println ( resultList ) ; } static < F , T > List < T > transform ( List < F > originalList , MyFunction < ? super F , ? extends T > function ) { return null ; // irrelevant } static Byte doStuff ( Integer inner , String outer ) { return null ; // irrelevant } } @ FunctionalInterfaceinterface MyFunction < F , T > extends Function < F , T > { @ Override T apply ( F input ) ; } @ FunctionalInterfaceinterface IntToByteFunction { Byte applyIntToByte ( Integer inner ) ; } MinimalTypeFailureExample.java:7 : error : incompatible types : can not infer type-variable ( s ) F , T List < IntToByteFunction > resultList = transform ( originalList , outer - > inner - > doStuff ( inner , outer ) ) ; ^ ( argument mismatch ; bad return type in lambda expression T is not a functional interface ) where F , T are type-variables : F extends Object declared in method < F , T > transform ( List < F > , MyFunction < F , ? extends T > ) T extends Object declared in method < F , T > transform ( List < F > , MyFunction < F , ? extends T > ) 1 error"
"double d1=7d/3 ; double d2=5d/3 ; double sum=d1+d2 ; System.out.println ( new BigDecimal ( sum ) ) ; //prints exactly 4 double d1=log10 ( 3 ) ; double value=Math.pow ( 10 , d1 ) ; System.out.println ( new BigDecimal ( value ) ) ; //prints exactly 3"
2013-12-26T01:00:56.664Z SimpleDateFormat sdf = new SimpleDateFormat ( `` yyyy-MM-dd'T'HH : mm : ss ' Z ' '' ) ; java.text.ParseException : Unparseable date : `` 2013-12-26T01:00:56.664Z '' ( at offset 19 )
public class Main { static final class A { } public static String g ( ToIntFunction < ? extends A > f ) { return null ; } public static String g ( ToDoubleFunction < ? extends A > f ) { return null ; } } public class Main { static final class A { } public static String g ( ToIntFunction < ? extends A > f ) { return null ; } public static String g ( ToDoubleFunction < ? extends A > f ) { return null ; } private static int toInt ( A x ) { return 2 ; } public static void main ( String [ ] args ) { ToIntFunction < ? extends A > f1 = Main : :toInt ; ToDoubleFunction < ? extends A > f2 = Main : :toInt ; g ( Main : :toInt ) ; } }
"stream ( ) .filter ( myFilter ) //Reduces input to forthcoming operations .limit ( 10 ) //Limits to ten the amount of elements to finish stream .peek ( myList : :add ) //Stores the ten elements into a list .count ( ) ; //Here is the difficult one . Id like to count everything the total of elements that pass the filter , beyond the 10 I am fetching List < Entity > entities = stream ( ) .filter ( myFilter ) .limit ( 10 ) .collect ( Collectors.toList ( ) ) ; long entitiesCount = stream ( ) .filter ( myFilter ) .count ( ) ;"
"double cellValue = 78871234510124568.0 ; String cell = new BigDecimal ( cellValue ) .toPlainString ( ) ; String b = String.format ( `` % .0f '' , cellValue ) ; System.out.println ( `` Double Value using Big Decimal `` + cell ) ; System.out.println ( `` Double Value using String format `` + b ) ;"
"public List < List < Integer > > verticalTraversal ( TreeNode root ) { Map < Integer , PriorityQueue < Node > > map = new TreeMap < > ( ) ; List < List < Integer > > out = new ArrayList < > ( ) ; if ( root == null ) return out ; Queue < Node > q = new LinkedList < > ( ) ; Node r = new Node ( root , 0 , 0 ) ; q.add ( r ) ; while ( ! q.isEmpty ( ) ) { Node curr = q.remove ( ) ; int x = curr.x ; int y = curr.y ; PriorityQueue < Node > pq = map.getOrDefault ( y , new PriorityQueue < Node > ( ( a , b ) - > ( a.x == b.x ? a.t.val - b.t.val : a.x - b.x ) ) ) ; pq.add ( curr ) ; map.put ( y , pq ) ; if ( curr.t.left ! =null ) { Node left = new Node ( curr.t.left , x+1 , y-1 ) ; q.add ( left ) ; } if ( curr.t.right ! =null ) { Node right = new Node ( curr.t.right , x+1 , y + 1 ) ; q.add ( right ) ; } } for ( Map.Entry < Integer , PriorityQueue < Node > > entry : map.entrySet ( ) ) { PriorityQueue < Node > pq = entry.getValue ( ) ; List < Integer > vals = new ArrayList < > ( ) ; for ( Node pqNode : pq ) { vals.add ( pqNode.t.val ) ; } out.add ( new ArrayList < Integer > ( vals ) ) ; } return out ; } class Node { TreeNode t ; int y ; int x ; Node ( TreeNode t , int x , int y ) { this.t = t ; this.x = x ; this.y = y ; } } PriorityQueue < Node > pq = map.getOrDefault ( y , new PriorityQueue < Node > ( ( a , b ) - > ( a.x == b.x ? a.t.val - b.t.val : a.x - b.x ) ) ) ;"
"int sumOne = 1 ; int sumTwo = 1 ; int sumOneTotal = 0 ; int sumTwoTotal = 0 ; while ( sumOne > 0 || sumTwo > 0 ) { System.out.print ( `` Enter a number to add to first sum : `` ) ; //The user enters in a value for the first sum . sumOne = input.nextInt ( ) ; /** * We use an if-else statment to ensure sumOne is never less than or equal to 0 . * If it does it ends the program immediately and totals the sums . * This is because we only want the user to enter in positive numbers . */ if ( sumOne < = 0 ) { break ; } else { sumOneTotal = sumOneTotal + sumOne ; } System.out.print ( `` Enter a number to add to second sum : `` ) ; //The user enters in a value for the second sum . sumTwo = input.nextInt ( ) ; /** * We use an if-else statment to ensure sumTwo is never less than or equal to 0 . * If it does it ends the program immediately and totals the sums . * This is because we only want the user to enter in positive numbers . */ if ( sumTwo < = 0 ) { break ; } else { sumTwoTotal = sumTwoTotal + sumTwo ; } } //We print out the total of sumOneTotal and sumTwoTotal . System.out.printf ( `` % 1s % 1d % 12s % 1s % 1d '' , `` First sum : `` , sumOneTotal , `` `` , `` Second sum : `` , sumTwoTotal ) ;"
"def rowsToInputStream ( rows : Iterator [ String ] , delimiter : String ) : InputStream = { val bytes : Iterator [ Byte ] = rows.map { row = > ( row + `` \n '' ) .getBytes } .flatten new InputStream { override def read ( ) : Int = if ( bytes.hasNext ) { bytes.next & 0xff // bitwise AND - make the signed byte an unsigned int from 0-255 } else { -1 } } }"
< jaxws : client name= '' client '' > < jaxws : features > < bean class= '' org.apache.cxf.transport.jms.JMSConfigFeature '' > < property name= '' jmsConfig '' ref= '' jmsConfig '' / > < /bean > < /jaxws : features > < /jaxws : client > < bean id= '' jmsConfig '' class= '' org.apache.cxf.transport.jms.JMSConfiguration '' > < property name= '' cacheLevel '' value= '' 3 '' / > < /bean >
"// Abstract Foopublic abstract class AbstractFoo { protected Long id ; protected String color ; protected LocalDateTime lastModified ; protected Long getId ( ) ; protected String getColor ( ) ; protected void setId ( ) ; protected void setColor ( ) ; } // Abstract Decorator ( wraps foo ) public abstract class FooDecorator extends AbstractFoo { private final Foo foo ; protected FooDecorator ( Foo foo ) { this.foo = foo ; } protected Long getId ( ) { return foo.getId ( ) ; } protected String getColor ( ) { return foo.getColor ( ) ; } protected LocalDateTime getLastModified ( ) { return foo.getLastModified ( ) ; } protected void setId ( Long id ) { foo.setId ( id ) ; } protected void setColor ( String color ) { foo.setColor ( color ) ; } protected void setLastModified ( LocalDateTime lastModified ) { foo.setLastModified ( lastModified ) ; } } // Defines the database model for Foo// Only concerned about the table structure @ Entity @ Table ( name= '' TBL_FOO '' ) public class FooEntity extends FooDecorator { public FooEntity ( Foo foo ) { super ( foo ) ; } @ Id @ AutoGenerated @ Column ( name= '' ID_FOO '' ) protected Long getId ( ) { return super.getId ( ) ; } @ Column ( name= '' DS_COLOR '' , length= '' 255 '' ) protected String getColor ( ) { return super.getColor ( ) ; } @ Temporal @ Column ( name= '' DT_MODIFIED '' ) protected LocalDateTime getLastModified ( ) { return super.getLastModified ( ) ; } } public class FooBar extends FooEntity { public FooBar ( Foo foo ) { super ( foo ) ; } //let 's open the ID for the outside world public Long getId ( ) { return super.getId ( ) ; } // Paint with a red color public void paintAs ( Color color ) { super.setColor ( color.getKey ( ) ) ; } // Upper level may want to know the current color public Color getColor ( ) { return Color.parse ( super.getColor ( ) ) ; } public boolean isModifiedSince ( LocalDateTime compare ) { return DateUtils.compareMillis ( super.getLastModified ( ) , compare ) > 0 ; } public LocalDateTime getLastModified ( ) { return super.getLastModified ( ) ; } } /** * JSON Eg . : * { fooBarId : 1 , fooBarColor : 'RED ' } */public class FooBarView extends FooBar { public FooBarView ( Foo foo ) { super ( foo ) ; } // Maps field to JSON as 'fooBarId ' @ JsonMap ( `` fooBarId '' ) ; public Long getId ( ) { return super.getId ( ) ; } // Maps field to JSON as 'fooBarColor ' @ JsonMap ( `` fooBarColor '' ) public String getColor ( ) { return super.getColor ( ) .toString ( ) ; } } // Pseudo Codepublic class FooBarREST { // '/api/v1/foobar/ { id } ' public getFooBar ( Long id ) { return new FooBarView ( find ( id ) ) ; } }"
( -1646490243 < < 4 ) + 3333 ^ -1646490243 + -957401312 ^ ( -1646490243 > > 5 ) + 4 1173210151 -574040108 ( -1646490243 < < 4 ) + 3333 Xor -1646490243 + -957401312 Xor ( -1646490243 > > 5 ) + 4 -3121757145 + 2 ^ 32 = 1173210151
"for ( int i=0 ; i < 100 ; i++ ) { String s2 = Arrays.asList ( `` A '' , `` E '' , `` I '' , `` O '' , `` U '' ) .parallelStream ( ) .reduce ( `` x '' , String : :concat , String : :concat ) ; System.out.println ( `` xAxExIxOxU '' .equals ( s2 ) ) ; }"
class Fun { int f = 1 ; void fun ( ) { int f = 2 ; while ( true ) { int f = 3 ; int g = 1 ; } int g = 2 ; } } # include < iostream > using namespace std ; int main ( ) { int f = 0 ; for ( int i=0 ; i < 1 ; i++ ) { int f = 1 ; cout < < f < < endl ; { int f = 2 ; cout < < f < < endl ; } } cout < < f < < endl ; }
< util : map id= '' domainBeanMappers '' > < entry key= '' UserBean '' value-ref= '' userMapper '' / > < entry key= '' User '' value-ref= '' userMapper '' / > ... .. < bean id= '' userMapper '' class= '' com.me.mapping.UserMapper '' parent= '' baseDomainBeanMapper '' / > UserBean userBean = ( UserBean ) getDomainBeanMapper ( ) .mapDomainToBean ( user ) ; DomainBeanMapper mapper = findApplicableMapper ( myObject.getClass ( ) .getName ( ) ) ; if ( mapper == null ) { mapper = findApplicableMapper ( myObject.getClass ( ) .getSimpleName ( ) ) ; } private DomainBeanMapper findApplicableMapper ( String string ) { return domainBeanMappers.get ( string ) ; } UserBasicBean restrictedUserReturn = ( UserBasicBean ) getDomainBeanMapper ( ) .mapDomainToBean ( ( UserBasic ) user ) ;
public class Test { static List < Object > listA = new ArrayList < > ( ) ; public static void main ( final String [ ] args ) { final List < TestClass > listB = new ArrayList < > ( ) ; listB.add ( new TestClass ( ) ) ; // not working setListA ( listB ) ; // working setListA ( listB.stream ( ) .collect ( Collectors.toList ( ) ) ) ; System.out.println ( ) ; } private static void setListA ( final List < Object > list ) { listA = list ; } }
"value.replaceAll ( `` [ ^\\w ] ( ? = [ ^\\ [ ] *\\ ] ) '' , `` '' ) ; [ a+b+c1 & $ & $ / ] + ( 1+b & +c & ) [ abc1 ] + ( 1+b & +c & ) [ a+b+c1 & $ & $ / [ ] ] + ( 1+b & +c & ) [ a+b+c1 & $ & $ / ] + ( 1+b & +c & )"
"static void log ( Object ... args ) { for ( Object arg : args ) { System.out.println ( arg ) ; } } void doSomething ( ) { log ( `` foo '' , 4 , new Object ( ) ) ; } void doSomething ( ) { System.out.println ( `` foo '' ) ; System.out.println ( new Integer ( 4 ) .toString ( ) ) ; System.out.println ( new Object ( ) .toString ( ) ) ; }"
"public static boolean areValuesValid ( double [ ] values , int numElements ) { if ( values == null || values.length ! = numElements ) { return false ; } for ( int i = 0 ; i < numElements ; ++i ) { if ( Double.isNaN ( values [ i ] ) ) { return false ; } } return true ; } public static boolean areValuesValid ( float [ ] values , int numElements ) { if ( values == null || values.length ! = numElements ) { return false ; } for ( int i = 0 ; i < numElements ; ++i ) { if ( Float.isNaN ( values [ i ] ) ) { return false ; } } return true ; }"
public class TestClass { public static Object heavyObject1 ; public static Object object2 ; private static void action ( ) { object2 = doSomething ( heavyObject1 ) ; heavyObject1 = null ; //is this good ? } }
{ long a = 20000000000000000L ; double b = 90.0 ; a += b ; System.out.println ( a ) ; // 20000000000000088 NG } { long a = 10000000000000000L ; double b = 90.0 ; a += b ; System.out.println ( a ) ; // 10000000000000090 OK } { long a = 20000000000000000L ; double b = 90.0 ; a += ( long ) b ; System.out.println ( a ) ; // 20000000000000090 OK }
public static class Field < T > { private Class < ? extends T > clazz ; public Field ( Class < ? extends T > clazz ) { this.clazz = clazz ; } } public static void main ( String [ ] args ) { // 1 . ( warning ) Iterable is a raw type . References to generic type Iterable < T > should be parameterized . new Field < Iterable > ( List.class ) ; // 2 . ( error ) The constructor Main.Field < Iterable < ? > > ( Class < List > ) is undefined . new Field < Iterable < ? > > ( List.class ) ; // 3 . ( error ) *Simply unpossible* new Field < Iterable < ? > > ( List < ? > .class ) ; // 4 . ( warning ) Type safety : Unchecked cast from Class < List > to Class < ? extends Iterable < ? > > . new Field < Iterable < ? > > ( ( Class < ? extends Iterable < ? > > ) List.class ) ; }
"GROUP BY idHAVING COUNT ( * ) > 5 input.stream ( ) .collect ( groupingBy ( x - > x.id ( ) ) ) .entrySet ( ) .stream ( ) .filter ( entry - > entry.getValue ( ) .size ( ) > 5 ) .collect ( toMap ( Map.Entry : :getKey , Map.Entry : :getValue ) ) ;"
"public AntiChain join ( AntiChain ac ) { AntiChain res = new AntiChain ( this ) ; for ( int i = ac.bitset.nextSetBit ( 0 ) ; i > = 0 ; i = ac.bitset.nextSetBit ( i+1 ) ) { res.addAndMakeAntiChain ( new BasicSet ( i ) ) ; } return res ; } public AntiChain meet ( AntiChain ac ) { AntiChain res = AntiChain.emptyAntiChain ( this.getUniverse ( ) ) ; for ( int i = bitset.nextSetBit ( 0 ) ; i > = 0 ; i = bitset.nextSetBit ( i+1 ) ) for ( int j = ac.bitset.nextSetBit ( 0 ) ; j > = 0 ; j = ac.bitset.nextSetBit ( j+1 ) ) res.addAndMakeAntiChain ( new BasicSet ( j ) .intersection ( new BasicSet ( i ) ) ) ; return res ; } private void addAndMakeAntiChain ( BasicSet x ) { for ( int k = bitset.nextSetBit ( 0 ) ; k > = 0 ; k = bitset.nextSetBit ( k+1 ) ) { BasicSet a = new BasicSet ( k ) ; //new BasicSet ( 7 ) = { 1,2,3 } if ( a.hasAsSubset ( x ) ) return ; if ( x.hasAsSubset ( a ) ) bitset.set ( k , false ) ; } bitset.set ( x.toIntRepresentation ( ) ) ; // { 1,2,3 } .toLong ( ) = 7 }"
"List < String > animals = List.of ( `` cat '' , `` leopard '' , `` dog '' , `` lion '' , `` horse '' ) ; Predicate < String > cats = a - > ! a.equals ( `` dog '' ) & & ! a.equals ( `` horse '' ) ; Set < String > filterCat = animals.stream ( ) .filter ( cats ) .collect ( Collectors.toSet ( ) ) ; System.out.println ( filterCat ) ; Predicate < String > updatedCatFilter = Predicate.not ( a - > a.equals ( `` dog '' ) & & a.equals ( `` horse '' ) ) ; Set < String > catFamily = animals.stream ( ) .filter ( updatedCatFilter ) .collect ( Collectors.toSet ( ) ) ; System.out.println ( filterCat ) ;"
`` Thread-124 '' - Thread t @ 378java.lang.Thread.State : TIMED_WAITINGat java.lang.Object.wait ( Native Method ) - waiting on < 44c53e01 > ( a com.mashape.unirest.http.utils.SyncIdleConnectionMonitorThread ) at com.mashape.unirest.http.utils.SyncIdleConnectionMonitorThread.run ( SyncIdleConnectionMonitorThread.java:22 ) Locked ownable synchronizers : - None '' Thread-122 '' - Thread t @ 371java.lang.Thread.State : TIMED_WAITINGat java.lang.Object.wait ( Native Method ) - waiting on < 3212c7ae > ( a com.mashape.unirest.http.utils.SyncIdleConnectionMonitorThread ) at com.mashape.unirest.http.utils.SyncIdleConnectionMonitorThread.run ( SyncIdleConnectionMonitorThread.java:22 ) Locked ownable synchronizers : - None
class A { public static void main ( String [ ] args ) { char c = 65 ; // ok new A ( ) .m ( 65 ) ; // compile error } void m ( char c ) { } } char c = 65 ; new A ( ) .m ( 65 ) ; // compile error
"String str = `` Cat '' ; // creates new object in string pool with same character sequence . String st1 = `` Cat '' ; // has same reference of object in pool , just created in case of 'str ' str == str1 //that 's returns trueString test = new String ( `` dog '' ) ; test.intern ( ) ; // what this line of code do behind the scene String test1 = `` dog '' ; test == test1 // returns false"
"{ `` id '' : '' 1234 '' , `` expirationDate '' : '' 17343234234 '' , `` paths '' : '' http : localhost:9090 '' , `` work '' : '' software dev '' , `` family '' : { `` baba '' : '' jams '' , `` mother '' : '' ela '' } } , { `` id '' : '' 00021 '' , `` expirationDate '' : '' 0123234 '' , `` paths '' : '' http : localhost:8080 '' , `` work '' : '' software engi '' , `` family '' : { `` baba '' : '' stev '' , `` mother '' : '' hela '' } }"
"private < T > void compareValues ( Supplier < T > supplier , T value ) { System.out.println ( supplier.get ( ) == value ) ; } private < T > void setValue ( Consumer < T > consumer , T value ) { consumer.accept ( value ) ; } compareValues ( this : :getString , `` Foo '' ) ; // Valid , as expectedcompareValues ( this : :getInt , `` Foo '' ) ; // Valid , but compiler should raise errorcompareValues ( this : :getString , 1 ) ; // Valid , but compiler should raise errorsetValue ( this : :setString , `` Foo '' ) ; // Valid , as expectedsetValue ( this : :setInt , `` Foo '' ) ; // Type mismatch , as expectedsetValue ( this : :setString , 1 ) ; // Type mismatch , as expectedprivate String getString ( ) { return `` Foo '' ; } private int getInt ( ) { return 1 ; } private void setString ( String string ) { } private void setInt ( int integer ) { }"
Abdera abdera = new Abdera ( ) ; AbderaClient abderaClient = new AbderaClient ( abdera ) ; java.lang.RuntimeException : java.lang.NoSuchMethodException : org.apache.abdera.protocol.client.cache.LRUCacheFactory. < init > ( org.apache.abdera.Abdera ) at org.apache.abdera.util.Discover.locate ( Discover.java:37 ) at org.apache.abdera.util.Discover.locate ( Discover.java:21 ) at org.apache.abdera.util.ServiceUtil.newInstance ( ServiceUtil.java:142 ) at org.apache.abdera.protocol.client.AbderaClient.initCacheFactory ( AbderaClient.java:132 ) at org.apache.abdera.protocol.client.AbderaClient. < init > ( AbderaClient.java:108 ) at org.apache.abdera.protocol.client.AbderaClient. < init > ( AbderaClient.java:9at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:39 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:25 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:47 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:44 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.rules.ExpectedException $ ExpectedExceptionStatement.evaluate ( ExpectedException.java:168 ) at org.junit.rules.RunRules.evaluate ( RunRules.java:20 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:271 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:70 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:50 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:238 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:63 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:236 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:53 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:229 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:309 ) at org.junit.runner.JUnitCore.run ( JUnitCore.java:160 ) at com.intellij.rt.execution.junit.JUnitStarter.main ( JUnitStarter.java:65 ) Caused by : java.lang.NoSuchMethodException : org.apache.abdera.protocol.client.cache.LRUCacheFactory. < init > ( org.apache.abdera.Abdera ) at java.lang.Class.getConstructor0 ( Class.java:2706 ) at java.lang.Class.getConstructor ( Class.java:1657 ) at org.apache.abdera.util.Discover.load ( Discover.java:149 ) at org.apache.abdera.util.Discover.locate ( Discover.java:33 ) ... 30 more
Arraylist < String > strings ; //contains all strings that are duplicates and that occur thrice Arraylist < String > thrice ; //contains only elements that occur three times .
import org.springframework.oxm.Unmarshallerpublic class ItemSearchService { Unmarshaller unmarshaller ; public ItemSearchResponse getObject ( InputStream xml ) { ItemSearchResponse its = null ; try { its = ( ItemSearchResponse ) unmarshaller.unmarshal ( new StreamSource ( xml ) ) ; } finally { } return its ; } }
public interface Visitable { default public void accept ( Visitor v ) { v.visit ( this ) ; } }
public static void main ( String [ ] args ) { Collections.singleton ( 1 ) .stream ( ) .forEach ( i - > new Exception ( ) .printStackTrace ( ) ) ; } java.lang.Exception at PrintLambdaStackTrace.lambda $ main $ 0 ( PrintLambdaStackTrace.java:6 ) at PrintLambdaStackTrace $ $ Lambda $ 1/1831932724.accept ( Unknown Source ) at java.util.Collections $ 2.tryAdvance ( Collections.java:4717 ) at java.util.Collections $ 2.forEachRemaining ( Collections.java:4725 ) at java.util.stream.ReferencePipeline $ Head.forEach ( ReferencePipeline.java:580 ) at PrintLambdaStackTrace.main ( PrintLambdaStackTrace.java:6 )
"public static final List < BigDecimal > numbers = Arrays.asList ( new BigDecimal ( `` 15 '' ) , new BigDecimal ( `` 10 '' ) , new BigDecimal ( `` 17 '' ) , new BigDecimal ( `` 30 '' ) , new BigDecimal ( `` 18 '' ) , new BigDecimal ( `` 23 '' ) , new BigDecimal ( `` 5 '' ) , new BigDecimal ( `` 12 '' ) ) ; BigDecimal totalOfReducedNumbers = BigDecimal.ZERO ; for ( BigDecimal number : numbers ) { if ( number.compareTo ( BigDecimal.valueOf ( 20 ) ) > 0 ) totalOfReducedNumbers = totalOfReducedNumbers.add ( number.multiply ( BigDecimal.valueOf ( 0.9 ) ) ) ; } System.out.println ( `` Total of reduced numbers : `` + totalOfReducedNumbers ) ;"
import static java.lang.Character.isWhitespace ; public class WhitespaceCheck { public static void main ( String [ ] args ) { Character test = ' ' ; if ( Character.isWhitespace ( test ) ) { System.out.println ( `` Is whitespace ! '' ) ; } else { System.out.println ( `` Is not whitespace ! '' ) ; } } }
value 65 7 1 68 90index 0 1 2 3 4 value 90 68 1 7 65index 0 1 2 3 4
"public int [ ] void findCircleWithRadius ( Circle [ ] [ ] circles , double r ) { for ( int i = 0 ; i < circles.length-1 ; i++ ) { //search the row for ( int j = 0 ; j < circles [ 0 ] .length ; j++ ) { //search each column Circle temp = circles [ i ] [ j ] ; if ( temp == r ) r = temp ; else return `` { -1 , -1 } '' ; } } return circles.indexOf ( r ) ; } public static void swapCircles ( Circles [ ] [ ] circles , double r1 , double r2 ) { Circle radius1 = r1.findCircleWithRadius ( ) ; Circle radius2 = r2.findCircleWithRadius ( ) ; Circle temp2 = radius2 ; radius2 = radius1 ; radius1 = temp2 ; }"
public class MyClass < T extends String [ ] > { }
public Config ( ) { final String path = `` < path > '' ; doSomething ( path ) ; } public Config ( String mode ) { if ( mode = `` 1 '' ) { final String path = `` < path1 > '' ; } else { final String path = `` < path2 > '' ; } doSomething ( path ) ; } public Config ( String mode ) { final String path ; if ( mode = `` 1 '' ) { path = `` < path1 > '' ; } else { path = `` < path2 > '' ; } doSomething ( path ) ; }
interface HierarchicalEntity < T extends HierarchicalEntity < T > > { T getParent ( ) ; Stream < T > getAncestors ( ) ; } default Stream < T > getAncestors ( ) { Stream.Builder < T > parentsBuilder = Stream.builder ( ) ; T parent = getParent ( ) ; while ( parent ! = null ) { parentsBuilder.add ( parent ) ; parent = parent.getParent ( ) ; } return parentsBuilder.build ( ) ; } parentsBuilder.add ( this ) ; // type mismatch !
"StringBuilder result = new StringBuilder ( ) ; for ( int i=0 ; i < doses.size ( ) ; i++ ) result.append ( String.format ( `` % s % s < br > '' , list1.get ( i ) , list2.get ( i ) ) ) ;"
public List < SomeItemDto > itemsToDto ( List < SomeItem > items ) { List < SomeItemDto > itemsDto = new ArrayList < SomeItemDto > ( ) ; for ( SomeItem item : items ) { itemsDto.add ( itemToDto ( item ) ) ; } return itemsDto ; }
protected LoadTarget < ? super PopulationLoadContext > createTarget ( PopulationLoadContext context ) { return createTransactionalTargetGroup ( RiskScoresTables.All_Tables ) ; }
"Interval 1 = [ 14-06-2020 , 15-06-2020 ] Interval 2 = [ 17-06-2020 , 17-06-2020 ] Interval 3 = [ 19-06-2020 , 21-06-2020 ] public class Interval { private LocalDate startDate ; private LocalDate endDate ; } public static void main ( String args [ ] ) { List < LocalDate > dates = new ArrayList < > ( ) ; dates.add ( LocalDate.of ( 2020,6,14 ) ) ; dates.add ( LocalDate.of ( 2020,6,15 ) ) ; dates.add ( LocalDate.of ( 2020,6,17 ) ) ; dates.add ( LocalDate.of ( 2020,6,19 ) ) ; dates.add ( LocalDate.of ( 2020,6,21 ) ) ; dates.add ( LocalDate.of ( 2020,6,20 ) ) ; Collections.sort ( dates ) ; //Handle if empty or null List < Interval > intervals = new ArrayList < > ( ) ; if ( dates==null || dates.size ( ) ==0 ) { throw new IllegalArgumentException ( `` list can not be empty '' ) ; } //If only one date then the interval starts and ends with same date if ( dates.size ( ) ==1 ) { Interval interval = new Interval ( ) ; interval.setStartDate ( dates.get ( 0 ) ) ; interval.setEndDate ( dates.get ( 0 ) ) ; } LocalDate firstDate = dates.get ( 0 ) ; for ( int i =1 ; i < dates.size ( ) ; i++ ) { LocalDate endDate = dates.get ( i ) ; LocalDate nextDate = endDate.plusDays ( 1 ) ; //iterate over to get the desired list of interval while ( my condition satisfies ) { //create new interval } //intervals.add ( interval } }"
Exception in thread `` JavaFX Application Thread '' java.nio.file.FileSystemNotFoundException at jdk.zipfs/jdk.nio.zipfs.ZipFileSystemProvider.getFileSystem ( ZipFileSystemProvider.java:172 ) at jdk.zipfs/jdk.nio.zipfs.ZipFileSystemProvider.getPath ( ZipFileSystemProvider.java:158 ) at java.base/java.nio.file.Path.of ( Path.java:208 ) at java.base/java.nio.file.Paths.get ( Paths.java:98 ) at org.fxyz3d.importers.obj.ObjImporter.read ( ObjImporter.java:115 ) at org.fxyz3d.importers.obj.ObjImporter.loadAsPoly ( ObjImporter.java:102 ) at org.fxyz3d.importers.Importer3D.loadIncludingAnimation ( Importer3D.java:160 ) at org.fxyz3d.importers.Importer3D.loadAsPoly ( Importer3D.java:80 ) at it.polimi.ingsw.PSP50.View.GUI.GuiView.lambda $ startingGame $ 1 ( GuiView.java:201 ) at com.sun.javafx.application.PlatformImpl.lambda $ runLater $ 10 ( PlatformImpl.java:428 ) at java.base/java.security.AccessController.doPrivileged ( AccessController.java:391 ) at com.sun.javafx.application.PlatformImpl.lambda $ runLater $ 11 ( PlatformImpl.java:427 ) at com.sun.glass.ui.InvokeLaterDispatcher $ Future.run ( InvokeLaterDispatcher.java:96 ) Model3D boardModel = Importer3D.loadAsPoly ( getClass ( ) .getResource ( `` /boardcliff2.obj '' ) ) ;
package org.acme ; public class ACME { public ACME ( ) { } public static void main ( String [ ] args ) { Class clazz = Class.forName ( `` org.acme.ACME '' ) ; // Expected I could use a clazz.isClass ( ) . } }
"public Map < String , Set < Person > > getPatientsPerSpecialization ( ) { Map < String , Set < Person > > res=this.docLib.entrySet ( ) .stream ( ) . map ( d- > d.getValue ( ) ) . collect ( groupingBy ( d- > d.getSpecialization ( ) , d.getPatients ( ) ) //error ) ; return res ; }"
"import java.util . * ; import java.text . * ; import java.lang . * ; class NumberTest5 { public static void main ( String [ ] args ) { Locale loc = new Locale ( `` sr '' , '' ME '' ) ; DecimalFormat df = ( DecimalFormat ) NumberFormat.getCurrencyInstance ( loc ) ; System.out.println ( `` \n '' + '' currencySymbol : '' +df.getPositivePrefix ( ) + '' \tlength : '' +df.getPositivePrefix ( ) .length ( ) ) ; //here the above result is currencySymbol : €+ ( non breakable space char ) //length:2 } }"
"public class HomeFragment extends Fragment implements View.OnClickListener { Button btn_eventList ; public HomeFragment ( ) { // Required empty public constructor } @ Overridepublic View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater.inflate ( R.layout.fragment_home , container , false ) ; btn_eventList = ( Button ) view.findViewById ( R.id.buttonEventList ) ; btn_eventList.setOnClickListener ( this ) ; return view ; } @ Overridepublic void onClick ( View v ) { btn_eventList.setText ( `` TEST '' ) ; Toast.makeText ( getActivity ( ) , `` TEST '' , Toast.LENGTH_SHORT ) .show ( ) ; } } < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < android.support.v4.widget.DrawerLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' android : id= '' @ +id/nvd '' android : layout_height= '' match_parent '' android : layout_width= '' match_parent '' > < RelativeLayout android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < TextView android : id= '' @ +id/textView2 '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_centerHorizontal= '' true '' android : fontFamily= '' sans-serif '' android : gravity= '' center '' android : text= '' test '' android : textAppearance= '' @ style/TextAppearance.AppCompat.Display1 '' / > < TextView android : id= '' @ +id/textView4 '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_below= '' @ +id/textView2 '' android : layout_centerHorizontal= '' true '' android : layout_marginTop= '' 1dp '' android : gravity= '' center '' android : text= '' test '' / > < /LinearLayout > < LinearLayout android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_alignParentStart= '' true '' android : layout_alignParentTop= '' true '' android : layout_marginTop= '' 45dp '' android : orientation= '' horizontal '' > < Button android : id= '' @ +id/buttonEventList '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_weight= '' 1 '' android : text= '' Button '' / > < Button android : id= '' @ +id/button9 '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_weight= '' 1 '' android : text= '' Button '' / > < Button android : id= '' @ +id/button7 '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_weight= '' 1 '' android : text= '' Button '' / > < /LinearLayout > < android.support.v7.widget.RecyclerView android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' > < /android.support.v7.widget.RecyclerView > < /LinearLayout > < /RelativeLayout > < android.support.v7.widget.RecyclerView android : id= '' @ +id/lst_nav_drawer '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' app : layoutManager= '' android.support.v7.widget.LinearLayoutManager '' > < /android.support.v7.widget.RecyclerView > < /android.support.v4.widget.DrawerLayout >"
List < String > foo ; int length = 5 ; if ( length > 3 ) { foo = new ArrayList < String > ( ) ; } if ( length > 4 ) { foo.add ( `` bar '' ) ; } List < String > foo = null ;
"static int algorithm ( int n ) { int bestSoFar = 0 ; for ( int i=0 ; i < n ; ++i ) { if ( Thread.interrupted ( ) ) break ; bestSoFar = ( int ) Math.pow ( i , 0.3 ) ; } return bestSoFar ; } Runnable task = ( ) - > { Instant start = Instant.now ( ) ; int bestSoFar = algorithm ( 1000000000 ) ; double durationInMillis = Duration.between ( start , Instant.now ( ) ) .toMillis ( ) ; System.out.println ( `` after `` +durationInMillis+ '' ms , the result is `` +bestSoFar ) ; } ; Thread t = new Thread ( task ) ; t.start ( ) ; Thread.sleep ( 1 ) ; t.interrupt ( ) ; t = new Thread ( task ) ; t.start ( ) ; Thread.sleep ( 10 ) ; t.interrupt ( ) ; t = new Thread ( task ) ; t.start ( ) ; Thread.sleep ( 100 ) ; t.interrupt ( ) ; t = new Thread ( task ) ; t.start ( ) ; Thread.sleep ( 1000 ) ; t.interrupt ( ) ; } } after 0.0 ms , the result is 7after 10.0 ms , the result is 36after 100.0 ms , the result is 85after 21952.0 ms , the result is 501 Instant start = Instant.now ( ) ; ExecutorService executor = Executors.newCachedThreadPool ( ) ; Future < ? > future = executor.submit ( task ) ; try { future.get ( 800 , TimeUnit.MILLISECONDS ) ; } catch ( TimeoutException e ) { future.cancel ( true ) ; double durationInMillis = Duration.between ( start , Instant.now ( ) ) .toMillis ( ) ; System.out.println ( `` Timeout after `` +durationInMillis+ '' [ ms ] '' ) ; }"
"String [ ] targetWords ; // contains `` inventory '' , `` finished '' , and `` goods '' ArrayList < String > extractedStrings = new ArrayList < String > ( ) ; for ( int i = 0 ; i < listOfWords.size ( ) ; i++ ) { String [ ] words = listOfWords.get ( i ) .split ( `` `` ) ; outerloop : for ( int j = 0 ; j < words.length ; j++ ) { for ( int k = 0 ; k < targetWords.length ; k++ ) { if ( words [ j ] .equalsIgnoreCase ( targetWords [ k ] ) ) { extractedStrings.add ( listOfWords.get ( i ) ) ; break outerloop ; } } } }"
"internal abstract class Parent < out T , in V > constructor ( tList : List < T > , vList : List < V > ) { abstract fun get ( ) : List < T > abstract fun set ( v : List < V > ) } final class Child extends Parent < Number , String > { public Child ( @ NotNull List < ? extends Number > tList , @ NotNull List < ? extends String > vList ) { super ( tList , vList ) ; } @ NotNull @ Override public List < Number > get ( ) { return null ; } @ Override public void set ( @ NotNull List < ? extends String > v ) { } } public Child ( @ NotNull List < ? extends Number > tList , @ NotNull List < ? super String > vList ) { super ( tList , vList ) ; } List < ? super String > List < ? extends String > public Child ( @ NotNull List < Number > tList , @ NotNull List < String > vList ) { super ( tList , vList ) ; }"
"protected Stream < T > parseFile ( File file , Consumer < File > cleanup ) { try { return parser.parse ( file ) ; // returns a Stream < T > } catch ( XmlParseException e ) { // child of RuntimeException throw new CustomRuntimeException ( e ) ; } finally { if ( file ! = null ) { cleanup.accept ( file ) ; } } throw new IllegalStateException ( `` Should not happen '' ) ; } try { Stream < T > stream = parseFile ( someFile ) ; stream.map ( t - > ... ) ; catch ( CustomRuntimeException e ) { // do some stuff } public Stream < T > parse ( ) { // ValueIterator < T > implements Iterator < T > , AutoCloseable XmlRootParser.ValueIterator < T > valueIterator = new XmlRootParser.ValueIterator ( this.nodeConverter , this.reader , this.nodeLocalName , this.nodeName ) ; Stream < T > stream = StreamSupport.stream ( Spliterators.spliteratorUnknownSize ( valueIterator , 1040 ) , false ) ; stream.onClose ( valueIterator : :close ) ; return stream ; }"
x : 1000y : 200= > result : x = 800 and y = 0. if ( x < = y ) { y = y - x ; x = 0 } else { x = x - y ; y = 0 ; }
public class Stack { public static void main ( String [ ] args ) { Object obj0 = null ; Object obj1 = new Object ( ) ; long start ; long end ; double difference ; double differenceAvg = 0 ; for ( int j = 0 ; j < 100 ; j++ ) { start = System.nanoTime ( ) ; for ( int i = 0 ; i < 1000000000 ; i++ ) if ( obj0 == null ) ; end = System.nanoTime ( ) ; difference = end - start ; differenceAvg +=difference ; } System.out.println ( differenceAvg/100 ) ; differenceAvg = 0 ; for ( int j = 0 ; j < 100 ; j++ ) { start = System.nanoTime ( ) ; for ( int i = 0 ; i < 1000000000 ; i++ ) if ( null == obj0 ) ; end = System.nanoTime ( ) ; difference = end - start ; differenceAvg +=difference ; } System.out.println ( differenceAvg/100 ) ; differenceAvg = 0 ; for ( int j = 0 ; j < 100 ; j++ ) { start = System.nanoTime ( ) ; for ( int i = 0 ; i < 1000000000 ; i++ ) if ( obj1 == null ) ; end = System.nanoTime ( ) ; difference = end - start ; differenceAvg +=difference ; } System.out.println ( differenceAvg/100 ) ; differenceAvg = 0 ; for ( int j = 0 ; j < 100 ; j++ ) { start = System.nanoTime ( ) ; for ( int i = 0 ; i < 1000000000 ; i++ ) if ( null == obj1 ) ; end = System.nanoTime ( ) ; difference = end - start ; differenceAvg +=difference ; } System.out.println ( differenceAvg/100 ) ; } }
"int [ ] numbers1 = { 1 , 2 , 3 } ; System.out.println ( `` numbers1 : `` + Arrays.toString ( numbers1 ) ) ; System.out.println ( `` distinct numbers1 count : `` + Stream.of ( numbers1 ) .distinct ( ) .count ( ) ) ; Integer [ ] numbers2 = { 1 , 2 , 3 } ; System.out.println ( `` numbers2 : `` + Arrays.toString ( numbers2 ) ) ; System.out.println ( `` distinct numbers2 count : `` + Stream.of ( numbers2 ) .distinct ( ) .count ( ) ) ; numbers1 : [ 1 , 2 , 3 ] distinct numbers1 count : 1numbers2 : [ 1 , 2 , 3 ] distinct numbers2 count : 3"
colorInt = ( 255 < < 24 ) | ( color.red < < 16 ) | ( color.green < < 8 ) | color.blue ; int r = ( colorInt > > 16 ) & 0xFF ; int g = ( colorInt > > 8 ) & 0xFF ; int b = colorInt & 0xFF ; ( 255 < < 24 ) | ( 154 < < 16 ) | ( 255 < < 8 ) | 147 ; ( 4278190080 ) | ( 10092544 ) | ( 65280 ) | 147 ; ( 4278190080 ) | ( 10092544 ) = 4288282624 ; ( 4278190080 ) | ( 10092544 ) | ( 65280 ) = 4288347904 ; ( 4278190080 ) | ( 10092544 ) | ( 65280 ) | 147 = 4288348051 ( 255 < < 24 ) | ( 154 < < 16 ) | ( 255 < < 8 ) | 147 ; ( -16777216 ) | ( 10092544 ) | ( 65280 ) | 147 ; ( -16777216 ) | ( 10092544 ) = -6684672 ; ( -16777216 ) | ( 10092544 ) | ( 65280 ) = -6619392 ; ( -16777216 ) | ( 10092544 ) | ( 65280 ) | 147 = -6619245 ;
public class Test { static { text = `` Hello '' ; } public static String getTest ( ) { return text + `` World '' ; } private static String text = null ; }
"{ `` Resources '' : [ { `` Id '' : 0 , `` Name '' : `` Resource 0 '' } , { `` Id '' : 1 , `` Name '' : `` Resource 1 '' } ] , `` Tasks '' : [ { `` Id '' : 0 , `` Name '' : `` Task 0 '' , `` Resource '' : 0 } , { `` Id '' : 1 , `` Name '' : `` Task 1 '' , `` Resource '' : 1 } , { `` Id '' : 2 , `` Name '' : `` Task 2 '' , `` Resource '' : 0 } , { `` Id '' : 3 , `` Name '' : `` Task 3 '' , `` Resource '' : 1 } , { `` Id '' : 4 , `` Name '' : `` Task 4 '' , `` Resource '' : 0 } ] }"
"@ ServerEndpoint ( `` /singleplayer '' ) public class SingleplayerSocket { private static final Set < Session > PLAYERS = Collections.synchronizedSet ( new HashSet < Session > ( ) ) ; private Session session ; private Gson gson ; private Game game ; private void sendMessage ( String message ) { try { for ( Session player : PLAYERS ) { if ( player == session ) { player.getBasicRemote ( ) .sendText ( message ) ; } } } catch ( IOException ex ) { ex.printStackTrace ( ) ; } } private void gameStart ( ) { game.start ( ) ; sendMessage ( `` Game started '' ) ; } @ OnOpen public void onOpen ( Session session ) { this.session = session ; gson = new Gson ( ) ; PLAYERS.add ( session ) ; sendMessage ( `` Connection established '' ) ; } @ OnMessage public void onMessage ( String message ) { if ( session ! = null & & session.isOpen ( ) ) { String messageType = gson.fromJson ( message , MessageType.class ) .getMessage ( ) ; switch ( messageType ) { case `` gameSetup '' : gameSetup ( message ) ; break ; case `` gameStart '' : gameStart ( ) ; break ; } } } @ OnClose public void onClose ( Session session ) { PLAYERS.remove ( session ) ; this.session = null ; } } public class Game implements Runnable { private final int TARGET_FPS = 60 ; private final long OPTIMAL_TIME = 1000000000 / TARGET_FPS ; private volatile boolean gameRunning ; private volatile boolean gamePaused ; private Session session ; private Thread thread ; private Gson gson ; public Game ( Session session , int width , int height , String difficulty ) { this.session = session ; this.WIDTH = width ; this.HEIGHT = height ; gson = new Gson ( ) ; timer = new Timer ( ) ; setup ( difficulty ) ; } private void setGameRunning ( boolean gameRunning ) { this.gameRunning = gameRunning ; } private void update ( double delta ) { ball.move ( delta ) ; collisionDetectionWalls ( ) ; collisionDetectionPaddle ( ) ; collisionDetectionBricks ( ) ; } public void start ( ) { thread = new Thread ( this ) ; thread.start ( ) ; setGameRunning ( true ) ; } public void stop ( ) { setGameRunning ( false ) ; } private void end ( boolean won ) { updateScore ( ) ; sendGameEnd ( won ) ; stop ( ) ; } private void sendMessage ( String message ) { try { session.getBasicRemote ( ) .sendText ( message ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } private void sendGameUpdate ( ) { GameUpdateData data = new GameUpdateData ( paddle , ball , bricks ) ; GameUpdateResponse response = new GameUpdateResponse ( `` gameUpdate '' , data ) ; sendMessage ( gson.toJson ( response ) ) ; } @ Override public void run ( ) { long lastLoopTime = System.nanoTime ( ) ; long lastFpsTime = 0 ; while ( gameRunning ) { long currentTime = System.nanoTime ( ) ; long updateLength = currentTime - lastLoopTime ; lastLoopTime = currentTime ; double delta = updateLength / ( ( double ) OPTIMAL_TIME ) ; lastFpsTime += updateLength ; if ( lastFpsTime > = 1000000000 ) { lastFpsTime = 0 ; } if ( ! gamePaused ) { update ( delta ) ; sendGameUpdate ( ) ; } try { long sleepTime = ( System.nanoTime ( ) - lastLoopTime + OPTIMAL_TIME ) / 1000000 ; Thread.sleep ( sleepTime ) ; } catch ( InterruptedException e ) { } } } } public class Ball { public void move ( double delta ) { if ( isLaunched ( ) ) { double trigoX = Math.cos ( angle ) ; double trigoY = Math.sin ( angle ) ; x += trigoX * velocity * delta ; y += trigoY * velocity * delta ; } } }"
public static void main ( String [ ] args ) { try { Scanner sc = new Scanner ( new File ( args [ 0 ] ) ) ; while ( sc.hasNext ( ) ) { System.out.println ( sc.nextLine ( ) ) ; } sc.close ( ) ; } catch ( FileNotFoundException e ) { System.out.println ( `` Het bestand kon niet gevonden worden . `` ) ; } catch ( Exception e ) { System.out.println ( `` Onbekende Fout '' ) ; } }
import com.google.cloud.dialogflow.v2beta1 . *val project = `` my-super-agent '' val trainingPhraseBuilder = Intent.TrainingPhrase.Part.newBuilder ( ) trainingPhraseBuilder.text = `` Tell me about the product . `` val trainingPhrasePart = trainingPhraseBuilder.build ( ) println ( trainingPhrasePart ) var i = with ( Intent.newBuilder ( ) ) { displayName = `` My First Built Intent '' addTrainingPhrases ( Intent.TrainingPhrase.newBuilder ( ) .addAllParts ( listOf ( trainingPhrasePart ) ) ) val message = with ( addMessagesBuilder ( ) ) { basicCardBuilder.setFormattedText ( `` It is amazing . Truly it is . '' ) build ( ) } build ( ) } IntentsClient.create ( ) .use ( { intentsClient - > val intrequest = CreateIntentRequest.newBuilder ( ) .setParent ( `` projects/ $ project/agent '' ) .setIntent ( i ) .build ( ) val response1 = intentsClient.createIntent ( intrequest ) } ) var sr = Intent.Message.SimpleResponse.newBuilder ( ) sr.setDisplayText ( `` Pleeeeaaaassssseeee '' ) val simpleReponseMessage = sr.build ( ) addMessagesBuilder ( ) .simpleResponsesBuilder.addSimpleResponses ( simpleReponseMessage ) .build ( )
< cfset request.uploadFileDir = application.fileDir & `` \upload '' / > < cffile action= '' upload '' accept= '' application/pdf '' destination= '' # REQUEST.uploadFileDir # '' filefield= '' brochure '' nameconflict= '' makeunique '' / >
List < String > strmap = ... //Without lambdasstrmap.stream ( ) .filter ( new Predicate < String > ( ) { public boolean test ( String string ) { return string.length == 10 ; } } .forEach ( new Consumer < String > ( ) { public void accept ( String string ) { System.out.println ( `` string `` + string + `` contains exactly 10 characters '' ) ; } } //With lambdasstrmap.stream ( ) .filter ( s - > s.length == 10 ) .forEach ( s - > System.out.println ( `` string `` + s + `` contains exactly 10 characters '' ) ; private Predicate < String > length10 = s - > s.length == 10 ; private Consumer < String > printer = s - > { `` string `` + s + `` contains exactly 10 characters '' ; } strmap.stream ( ) .filter ( length10 ) .forEach ( printer ) ;
public class X { static class Y { } static class Z extends Y { } Y y = new Y ( ) ; < T extends Y > T foo ( ) { return ( T ) y ; // warning - Unchecked cast from X.Y to T } Z bar ( ) { return ( Z ) y ; // compiles fine } }
"public interface Thingy < K , V > extends Map < K , V > { } public final class ThingyFactory { Map < String , Class < Thingy < ? , ? > > > thingyclasses = new ConcurrentHashMap < > ( ) ; ... .. @ SuppressWarnings ( `` unchecked '' ) public < K , V > Thingy < K , V > getInstance ( String classname ) throws ThingyException { Thingy < K , V > thingy ; try { thingy = ( Thingy < K , V > ) thingyclasses.get ( classname ) .newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { throw new ThingyException ( `` Something bad happened : `` , e.toString ( ) ) ; } return thingy ; } }"
"2020-11-13 19:14:06.636 18802-18802/com.example.myproject E/MainActivity : Tried to start foreground service from background2020-11-13 19:14:09.730 18802-19082/com.example.myproject E/AndroidRuntime : FATAL EXCEPTION : Thread-15 Process : com.example.myproject , PID : 18802 java.lang.OutOfMemoryError : Failed to allocate a 303955984 byte allocation with 8388608 free bytes and 108MB until OOM , max allowed footprint 162626224 , growth limit 268435456 at java.util.Arrays.copyOf ( Arrays.java:3164 ) at java.io.ByteArrayOutputStream.grow ( ByteArrayOutputStream.java:118 ) at java.io.ByteArrayOutputStream.ensureCapacity ( ByteArrayOutputStream.java:93 ) at java.io.ByteArrayOutputStream.write ( ByteArrayOutputStream.java:153 ) at com.example.myproject.utils.VolleyMultiPartRequest2.getBody ( VolleyMultiPartRequest2.java:109 ) at com.android.volley.toolbox.HurlStack.addBodyIfExists ( HurlStack.java:275 ) at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( HurlStack.java:249 ) at com.android.volley.toolbox.HurlStack.executeRequest ( HurlStack.java:94 ) at com.android.volley.toolbox.BasicNetwork.performRequest ( BasicNetwork.java:123 ) at com.android.volley.NetworkDispatcher.processRequest ( NetworkDispatcher.java:131 ) at com.android.volley.NetworkDispatcher.processRequest ( NetworkDispatcher.java:111 ) at com.android.volley.NetworkDispatcher.run ( NetworkDispatcher.java:90 )"
[ INFO ] -- - jacoco-maven-plugin:0.8.4 : instrument ( default-instrument ) @ myApp -- - ... [ DEBUG ] ( f ) project = MavenProject : com.firstPackage.tdz : myApp : X.1.0 @ C : \rootFolder\my_app\server\MyApp\pom.xml [ INFO ] -- - maven-compiler-plugin:3.5.1 : testCompile ( default-testCompile ) @ myApp -- - [ DEBUG ] Source directories : [ C : \rootFolder\my_app\server\myApp\tests\src ] [ DEBUG ] Classpath : [ C : \devel\my_app\server\myApp\target\test-classes [ INFO ] -- - maven-compiler-plugin:3.5.1 : compile ( default-compile ) @ myApp -- - [ INFO ] Changes detected - recompiling the module ! [ INFO ] Compiling 3582 source files to c : \rootFolder\my_app\server\myApp\target\classes ... [ INFO ] -- - aspectj-maven-plugin:1.3 : compile ( default ) @ myApp -- - ... [ INFO ] -- - jacoco-maven-plugin:0.8.4 : instrument ( default-instrument ) @ myApp -- - ... [ INFO ] -- - maven-compiler-plugin:3.5.1 : testCompile ( default-testCompile ) @ myApp -- - [ INFO ] Changes detected - recompiling the module ! [ INFO ] Compiling 326 source files to c : \rootFolder\my_app\server\myApp\target\test-classes ... [ INFO ] -- - aspectj-maven-plugin:1.3 : test-compile ( default ) @ myApp -- - ... [ INFO ] -- - maven-surefire-plugin:2.15 : test ( default-test ) @ myApp -- - ... finally [ INFO ] -- - jacoco-maven-plugin:0.8.4 : restore-instrumented-classes ( default-restore-instrumented-classes ) @ myApp -- - ... [ INFO ] -- - jacoco-maven-plugin:0.8.4 : report ( default-report ) @ myApp -- - [ INFO ] Loading execution data file c : \devel\my_app\server\MyApp\target\jacoco.exec [ INFO ] Analyzed bundle 'myApp ' with 5562 classes < execution > < id > default-instrument < /id > < goals > < goal > instrument < /goal > < /goals > < configuration > < ! -- any real example here ? Notice maven 's behavior above -- > < /configuration > < /execution >
"public class POJO < T > { private List < Integer > integer = new ArrayList < Integer > ( ) ; public POJO ( ) { integer.add ( 1 ) ; integer.add ( 2 ) ; } public List < Integer > getInteger ( ) { return integer ; } public static void main ( String [ ] args ) { POJO pojo = new POJO ( ) ; List < String > integer = pojo.getInteger ( ) ; // No compile error ? System.out.println ( integer ) ; // prints [ 1 , 2 ] } } List < String > integer = pojo.getInteger ( ) ; public List < Integer > getInteger ( )"
"public class Employee { private String name ; private Integer age ; private Double salary ; private Department department ; } List < Employee > employeeList = Arrays.asList ( new Employee ( `` Tom Jones '' , 45 , 12000.00 , Department.MARKETING ) , new Employee ( `` Harry Major '' , 26 , 20000.00 , Department.LEGAL ) , new Employee ( `` Ethan Hardy '' , 65 , 30000.00 , Department.LEGAL ) , new Employee ( `` Nancy Smith '' , 22 , 15000.00 , Department.MARKETING ) , new Employee ( `` Catherine Jones '' , 21 , 18000.00 , Department.HR ) , new Employee ( `` James Elliot '' , 58 , 24000.00 , Department.OPERATIONS ) , new Employee ( `` Frank Anthony '' , 55 , 32000.00 , Department.MARKETING ) , new Employee ( `` Michael Reeves '' , 40 , 45000.00 , Department.OPERATIONS ) ) ; Map < Department , List < Employee > > employeeMap = employeeList.stream ( ) .collect ( Collectors.groupingBy ( Employee : :getDepartment ) ) ;"
"kafkaTemplate.send ( topic , message ) ; props.put ( ProducerConfig.BOOTSTRAP_SERVERS_CONFIG , bootstrapServers ) ; props.put ( ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG , IntegerSerializer.class ) ; props.put ( ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG , StringSerializer.class ) ; // value to block , after which it will throw a TimeoutException props.put ( ProducerConfig.MAX_BLOCK_MS_CONFIG , 5000 ) ;"
"public List < CheckerPosition > getAttackedCheckersForPoint ( CheckerPosition from , boolean isSecondPlayerOwner , boolean isQueen , VectorDirection ignoredDirection ) { List < VectorDirection > allDirections = VectorDirection.generateAllDirections ( ) ; List < CheckerPosition > result = new ArrayList < CheckerPosition > ( ) ; for ( VectorDirection direction : allDirections ) { if ( ! direction.equals ( ignoredDirection ) ) { Checker firstCheckerOnWay = findFirstCheckerOnWay ( new CheckerBaseVector ( from , direction ) , ! isQueen ) ; if ( ( firstCheckerOnWay ! = null ) & & ( firstCheckerOnWay.isSecondPlayerOwner ( ) ! = isSecondPlayerOwner ) & & isCheckerBlocked ( firstCheckerOnWay.getPosition ( ) , direction ) ) { result.add ( firstCheckerOnWay.getPosition ( ) ) ; } } } return result ; } allDirections.stream ( ) .filter ( d - > ! d.equals ( ignoredDirection ) ) .map ( d - > findFirstCheckerOnWay ( new CheckerBaseVector ( from , d ) , ! isQueen ) ) // In this operation I map VectorDirection element ( d ) to Checker variable type . .filter ( c - > ( c ! = null ) & & ( c.isSecondPlayerOwner ( ) ! = isSecondPlayerOwner ) & & isCheckerBlocked ( c.getPosition ( ) , d ) ) ; // But in this operation I need to access d variable ..."
@ Configurationpublic class MyConfiguration { @ Bean public MyBeanDependencyA myBeanDependencyA ( ) { return new MyBeanDependencyA ( ) ; } @ Bean . //IDIOM 1 public MyBeanDependencyB1 myBeanDependencyB1 ( ) { return new MyBeanDependencyB1 ( myBeanDependencyA ( ) ) ; } @ Bean //IDIOM 2 public MyBeanDependencyB2 myBeanDependencyB2 ( MyBeanDependencyA myBeanDependencyA ) { return new MyBeanDependencyB1 ( myBeanDependencyA ) ; } }
public int ex1 ( int n ) { int r = 0 ; for ( int i = 1 ; i < n ; i++ ) { r += n ; n = n / 3 ; } return r ; } public static int ex5 ( int n ) { int r = 1 ; for ( int i = 0 ; i < n ; i ++ ) { r += ex5 ( n - 1 ) ; } return r ; }
"class Test { static int i = 0 , j = 0 ; static void one ( ) { i++ ; j++ ; } static void two ( ) { System.out.println ( `` i= '' + i + `` j= '' + j ) ; } } read iread j read ii++j++read j"
"public class TestClass { private static abstract class AbstractClass { abstract List < ? extends Object > getList ( ) ; abstract Map < Long , List < ? extends Object > > getMap ( ) ; } private static final class ConcreteClass extends AbstractClass { @ Override List < String > getList ( ) { return null ; } @ Override Map < Long , List < String > > getMap ( ) { return null ; } } } getMap ( ) in ConcreteClass can not override getMap ( ) in AbstractClass return type Map < Long , List < String > > is not compatible with Map < Long , List < ? extends Object > >"
public abstract class Base implements Runnable { protected abstract void doSomething ( ) ; public void run ( ) { while ( true ) { Thread.sleep ( 1000 ) ; doSomething ( ) ; } } }
"< T > boolean intersects ( final Stream < T > c1 , final Collection < T > c2 ) { return c1.filter ( c2 : :contains ) .findAny ( ) .isPresent ( ) ; }"
public class ClassUnderTest { private Dependency1 dep1 ; private Dependency1 getDependency1 ( ) { if ( dep1 == null ) dep1 = new Dependency1 ( ) ; return dep1 ; } public void methodUnderTest ( ) { ... . do something getDependency1 ( ) .InvokeSomething ( .. ) ; } }
"public interface MyInterface < T > { public < V extends T > V get ( String key , Bundle bundle ) ; } class MyFoo implements MyInterface < Object > { // Object because can be any type @ Override public < V > V get ( String key , Bundle bundle ) { return new Other ( ) ; } } class Bar { public Other other ; public Other setOther ( Other other ) ; } MyFoo foo = new MyFoo ( ) ; Bar bar = new Bar ( ) ; bar.other = foo.get ( ) ; MyFoo foo = new MyFoo ( ) ; Bar bar = new Bar ( ) ; bar.setOther ( foo.get ( ) ) ; // Fails"
"@ JsonTypeInfo ( use = JsonTypeInfo.Id.NAME , include = JsonTypeInfo.As.PROPERTY , property = `` type '' ) @ JsonSubTypes ( { // all subclasses @ Type ( value = Dog.class , name = `` dog '' ) } ) public abstract class Animal { // fields , constructors , getters and setters } public class Dog extends Animal { }"
if ( ( sOne.Contains ( '* ' ) ) || ( sOne.Contains ( '/ ' ) ) || ( sOne.Contains ( '- ' ) ) || ( sOne.Contains ( '+ ' ) ) || ( sOne.Contains ( ' % ' ) ) ) { public boolean Contains ( char key ) { // Checks stack for key boolean retval = arrs.contains ( key ) ; return retval ; }
"public interface Pasture { /** * @ param t The time of the visit ( as measured from optimization starting point ) . * @ param tLast The time of the preceding visit ( as measured from optimization starting point ) . * @ return The expected reward that will be reaped by visiting under the given conditions . */ double yield ( long t , long tLast ) ; }"
/pricing ? OfferId=234 & PromoId=345 & CustomerId=543234 /pricing/offer ? id=234/pricing/promo ? id=345/pricing/customer ? id=543234
String str = `` sbs 01.00 sip $ { dreamworks.values } print $ { fwVer } to used $ { lang } en given $ { model } in $ { region } '' ; $ { dreamworks.values } $ { fwVer } $ { lang } $ { model } $ { region } String feed = `` sip $ { dreamworks.values } print $ { fwVer } to $ { fwVer } used $ { lang } en $ { lang } given $ { model } in $ { region } '' $ { dreamworks.values } $ { fwVer } $ { lang } $ { model } $ { region } PLACEHOLDER_PATTERN = `` \\ $ \\ { \\w+\\ } '' ; $ { fwVer } $ { lang } $ { model } $ { region }
"apiService.getObjects ( token ) // Retrofit .compose ( bindToLifecycle ( ) ) .subscribeOn ( Schedulers.io ( ) ) .observeOn ( AndroidSchedulers.mainThread ( ) ) .doOnNext ( o - > { // process in Main Thread } ) .map ( Observable : :just ) // create new one , to change thread for it .observeOn ( Schedulers.io ( ) ) .subscribe ( o - > { // process in the background thread } ) ;"
"interface Foo ; class Bar implements Foo ; public static < T extends Foo > List < T > getFromList ( List < Foo > list , Class < T > type ) { return ( List < T > ) list.stream ( ) .filter ( entry - > type.isInstance ( entry ) ) .collect ( Collectors.toList ( ) ) ; } List < Foo > list ; List < Bar > bars = Util.getFromList ( list , Bar.class ) ;"
import java.util.List ; public class Test { public static void main ( String [ ] args ) { List < String > names = null ; System.out.println ( `` Result is : `` + names == null ? null : names.size ( ) ) ; } }
List < DirectoryTaxonomyWriter > writers = Lists.newArrayList ( ) ; private final int taxos = 4 ; [ ... ] @ Overridepublic int getParent ( final int globalOrdinal ) throws IOException { final int bin = globalOrdinal % this.taxos ; final int ordinalInBin = globalOrdinal / this.taxos ; return this.writers.get ( bin ) .getParent ( ordinalInBin ) * this.taxos + bin ; //global parent } public getParent ( I ) I throws java/io/IOException L0 LINENUMBER 70 L0 ILOAD 1 ALOAD 0 INVOKESTATIC java/util/Objects.requireNonNull ( Ljava/lang/Object ; ) Ljava/lang/Object ; POP BIPUSH 8 IREM ISTORE 2 public getParent ( I ) I throws java/io/IOException L0 LINENUMBER 77 L0 ILOAD 1 ICONST_4 IREM ISTORE 2 L1 LINENUMBER 78 L
"checkNoOverflow ( -FLOOR_SQRT_MAX_INT < = b & b < = FLOOR_SQRT_MAX_INT ) ; b *= b ; public static boolean and ( boolean a , boolean b ) { return a & & b ; } public static boolean andBit ( boolean a , boolean b ) { return a & b ; } // access flags 0x9 public static and ( ZZ ) Z L0 LINENUMBER 8 L0 ILOAD 0 IFEQ L1 ILOAD 1 IFEQ L1 ICONST_1 GOTO L2 L1 FRAME SAME ICONST_0 L2 FRAME SAME1 I IRETURN L3 LOCALVARIABLE a Z L0 L3 0 LOCALVARIABLE b Z L0 L3 1 MAXSTACK = 1 MAXLOCALS = 2 // access flags 0x9 public static andBit ( ZZ ) Z L0 LINENUMBER 12 L0 ILOAD 0 ILOAD 1 IAND IRETURN L1 LOCALVARIABLE a Z L0 L1 0 LOCALVARIABLE b Z L0 L1 1 MAXSTACK = 2 MAXLOCALS = 2 }"
public class WhyIsThisOk { { a = 5 ; } // why is this ok ? ? ? int a = 10 ; public WhyIsThisOk ( ) { } public static void main ( String [ ] args ) { WhyIsThisOk why = new WhyIsThisOk ( ) ; System.out.println ( why.a ) ; // 10 } }
"JTable table ; ... table.setDefaultEditor ( LocalTime.class , new LocalTimeEditor ( ) ) ; public class LocalTimeEditor extends DefaultCellEditor { JFormattedTextField ftf ; public LocalTimeEditor ( ) { super ( new JFormattedTextField ( ) ) ; ftf = ( JFormattedTextField ) getComponent ( ) ; // Set up the editor for the LocalTime cells . DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern ( `` HH : mm : ss '' ) ; ftf.setFormatterFactory ( new DefaultFormatterFactory ( dateFormatter ) ) ; The constructor DefaultFormatterFactory ( DateTimeFormatter ) is undefined"
"public class Change { public static void main ( String args [ ] ) { System.out.println ( 2.00 - 1.10 ) ; } } System.out.println ( new BigDecimal ( `` 2.00 '' ) .subtract ( new BigDecimal ( `` 1.10 '' ) ) ) ; while ( len > 10 & & Character.digit ( c , 10 ) == 0 ) { offset++ ; c = in [ offset ] ; len -- ; } public static int digit ( char ch , int radix ) { return digit ( ( int ) ch , radix ) ; } int sign = ( ( valBits > > 63 ) ==0 ? 1 : -1 ) ; int exponent = ( int ) ( ( valBits > > 52 ) & 0x7ffL ) ; long significand = ( exponent==0 ? ( valBits & ( ( 1L < < 52 ) - 1 ) ) < < 1 : ( valBits & ( ( 1L < < 52 ) - 1 ) ) | ( 1L < < 52 ) ) ; exponent -= 1075 ;"
static byte method1 ( ) { final short sh1 = 2 ; return sh1 ; } static byte method2 ( final short sh2 ) { return sh2 ; }
short a = 1 ; short b = 2 ; short c = a + b ; short c = 1 + 2 ;
user.getMenuAlertNotifications ( ) .parallelStream ( ) .filter ( not - > not.getUser ( ) .getId ( ) ==userId & & notificationList.getIds ( ) .contains ( not.getId ( ) ) ) .map ( not - > not.setRead ( Boolean.TRUE ) - > not ) .forEach ( not - > menuService.save ( not ) ) ;
"public static long getCurrentRx ( Context context ) { int uid = context.getApplicationInfo ( ) .uid ; return TrafficStats.getUidRxBytes ( uid ) ; } public static long getCurrentTx ( Context context ) { int uid = context.getApplicationInfo ( ) .uid ; return TrafficStats.getUidTxBytes ( uid ) ; } public static long getCurrentNetworkUsage ( Context context ) { return getCurrentRx ( context ) + getCurrentTx ( context ) ; } public static long getDiffNetworkUsage ( Context context , long previousNetworkUsage ) { return getCurrentNetworkUsage ( context ) - previousNetworkUsage ; }"
"package vps.main.gui ; import vps.main.Pet ; import vps.util.io ; import javax.swing . * ; import java.awt . * ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; /** * Created by XXXX on 3/23/2016 . */public class PetUI extends JFrame implements ActionListener { public static Pet mainPet = new Pet ( `` Unknown Pet '' , 100 , 100 , 100 , 100 ) ; static JProgressBar healthBar = new JProgressBar ( 0 , 100 ) ; static JProgressBar hungerBar = new JProgressBar ( 0 , 100 ) ; static JProgressBar happinessBar = new JProgressBar ( 0 , 100 ) ; static JLabel foodCount = new JLabel ( ) ; static JLabel medpackCount = new JLabel ( ) ; static int medpacks = 10 ; static int food = 25 ; static JMenuBar menuBar = new JMenuBar ( ) ; JLabel petInfo = new JLabel ( `` Name : '' + mainPet.getName ( ) + `` | Age : `` +mainPet.getAge ( ) ) ; JMenu file = new JMenu ( `` File '' ) ; JMenuItem save = new JMenu ( `` Save '' ) ; JButton healButton = new JButton ( `` '' , new ImageIcon ( `` src\\vps\\files\\ambulanceIcon.png '' ) ) ; JButton feedButton = new JButton ( `` '' , new ImageIcon ( `` src\\vps\\files\\feedIcon.png '' ) ) ; JButton playButton = new JButton ( `` '' , new ImageIcon ( `` src\\vps\\files\\playIcon.png '' ) ) ; JButton quitButton = new JButton ( `` '' , new ImageIcon ( `` src\\vps\\files\\quitIcon.png '' ) ) ; JPanel buttons = new JPanel ( ) ; JPanel bars = new JPanel ( ) ; public PetUI ( ) { super ( `` Pet UI '' ) ; setLayout ( new FlowLayout ( ) ) ; buttons.add ( healButton ) ; buttons.add ( feedButton ) ; buttons.add ( playButton ) ; buttons.add ( quitButton ) ; bars.add ( healthBar ) ; bars.add ( hungerBar ) ; bars.add ( happinessBar ) ; happinessBar.setStringPainted ( true ) ; hungerBar.setStringPainted ( true ) ; healthBar.setStringPainted ( true ) ; happinessBar.setString ( `` Happiness '' ) ; hungerBar.setString ( `` Hunger '' ) ; healthBar.setString ( `` Health '' ) ; healButton.setBorderPainted ( false ) ; healButton.setContentAreaFilled ( false ) ; healButton.setFocusPainted ( false ) ; feedButton.setBorderPainted ( false ) ; feedButton.setContentAreaFilled ( false ) ; feedButton.setFocusPainted ( false ) ; playButton.setBorderPainted ( false ) ; playButton.setContentAreaFilled ( false ) ; playButton.setFocusPainted ( false ) ; quitButton.setBorderPainted ( false ) ; quitButton.setContentAreaFilled ( false ) ; quitButton.setFocusPainted ( false ) ; playButton.addActionListener ( this ) ; healButton.addActionListener ( this ) ; feedButton.addActionListener ( this ) ; quitButton.addActionListener ( this ) ; save.addActionListener ( this ) ; add ( petInfo ) ; add ( medpackCount ) ; add ( buttons ) ; add ( foodCount ) ; add ( bars ) ; menuBar.add ( file ) ; file.add ( save ) ; } public static int getMedpacks ( ) { return medpacks ; } public static void setMedpacks ( int medpacks ) { PetUI.medpacks = medpacks ; } public static void main ( String [ ] args ) { PetUI p = new PetUI ( ) ; p.setJMenuBar ( menuBar ) ; p.setDefaultCloseOperation ( WindowConstants.EXIT_ON_CLOSE ) ; p.setSize ( 640 , 480 ) ; p.setVisible ( true ) ; while ( true ) { happinessBar.setValue ( ( int ) Math.round ( mainPet.getHappiness ( ) ) ) ; healthBar.setValue ( ( int ) Math.round ( mainPet.getHealth ( ) ) ) ; hungerBar.setValue ( ( int ) Math.round ( mainPet.getHunger ( ) ) ) ; mainPet.setHappiness ( mainPet.getHappiness ( ) - 0.1 ) ; mainPet.setHunger ( mainPet.getHunger ( ) - 0.5 ) ; //color set /** * if val greater than 75 = great * if val less than 75 = good * if val less than 50 = OK * if val less than 25 = bad * if val less than or equ 0 = dead/horrible */ if ( mainPet.getHappiness ( ) > 75 ) { happinessBar.setString ( `` Ecstatic '' ) ; happinessBar.setForeground ( Color.green ) ; } if ( mainPet.getHappiness ( ) < = 75 ) { happinessBar.setString ( `` Happy '' ) ; happinessBar.setForeground ( Color.magenta ) ; } if ( mainPet.getHappiness ( ) < = 50 ) { happinessBar.setString ( `` OK '' ) ; happinessBar.setForeground ( Color.orange ) ; } if ( mainPet.getHappiness ( ) < = 25 ) { happinessBar.setString ( `` Sad '' ) ; happinessBar.setForeground ( Color.red ) ; } if ( mainPet.getHappiness ( ) < = 0 ) { happinessBar.setString ( `` Horrible '' ) ; happinessBar.setForeground ( Color.black ) ; } if ( mainPet.getHealth ( ) > 75 ) { healthBar.setString ( `` Great '' ) ; healthBar.setForeground ( Color.green ) ; } if ( mainPet.getHealth ( ) < = 75 ) { healthBar.setString ( `` Good '' ) ; healthBar.setForeground ( Color.magenta ) ; } if ( mainPet.getHealth ( ) < = 50 ) { healthBar.setString ( `` OK '' ) ; healthBar.setForeground ( Color.orange ) ; } if ( mainPet.getHealth ( ) < = 25 ) { healthBar.setString ( `` Requires attention '' ) ; healthBar.setForeground ( Color.red ) ; } if ( mainPet.getHealth ( ) < = 0 ) { healthBar.setString ( `` Death '' ) ; healthBar.setForeground ( Color.black ) ; JOptionPane.showMessageDialog ( null , `` Your pet : `` + mainPet.getName ( ) + `` has died . `` ) ; p.dispose ( ) ; StartGUI.main ( null ) ; break ; } if ( mainPet.getHunger ( ) > 75 ) { hungerBar.setString ( `` Full '' ) ; hungerBar.setForeground ( Color.green ) ; } if ( mainPet.getHunger ( ) < = 75 ) { hungerBar.setString ( `` Great '' ) ; hungerBar.setForeground ( Color.magenta ) ; } if ( mainPet.getHunger ( ) < = 50 ) { hungerBar.setString ( `` Hungry '' ) ; hungerBar.setForeground ( Color.orange ) ; } if ( mainPet.getHunger ( ) < = 25 ) { hungerBar.setString ( `` Empty '' ) ; hungerBar.setForeground ( Color.red ) ; } if ( mainPet.getHunger ( ) < = 0 ) { hungerBar.setString ( `` Starving '' ) ; hungerBar.setForeground ( Color.black ) ; } //death values if ( mainPet.getHunger ( ) < = 5 ) { mainPet.setHealth ( mainPet.getHealth ( ) - 1 ) ; } if ( mainPet.getHealth ( ) < = 45 ) { mainPet.setHappiness ( mainPet.getHappiness ( ) - 1 ) ; } try { Thread.sleep ( 50 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } } public static int getFood ( ) { return food ; } public static void setFood ( int food ) { PetUI.food = food ; } @ Override public void actionPerformed ( ActionEvent e ) { if ( e.getSource ( ) == quitButton ) { int quit = JOptionPane.showConfirmDialog ( null , `` Are you sure you want to quit ? `` ) ; if ( quit == 0 ) { System.exit ( 0 ) ; } else { //do nothing , just stay } } else if ( e.getSource ( ) == feedButton ) { if ( getFood ( ) < = 0 ) { JOptionPane.showMessageDialog ( null , `` You are out of food . `` ) ; } else if ( mainPet.getHunger ( ) > 100 ) { JOptionPane.showMessageDialog ( null , `` You do not need food right now . `` ) ; } else { mainPet.setHunger ( mainPet.getHunger ( ) + 20 ) ; setFood ( getFood ( ) - 1 ) ; } } else if ( e.getSource ( ) == healButton ) { if ( getMedpacks ( ) < = 0 ) { JOptionPane.showMessageDialog ( null , `` You are out of medpacks . `` ) ; } else if ( mainPet.getHealth ( ) > 100 ) { JOptionPane.showMessageDialog ( null , `` You do not need a medpack right now . `` ) ; } else { if ( mainPet.getHealth ( ) + 20 > = 100 ) { JOptionPane.showMessageDialog ( null , `` You do not need a medpack right now . `` ) ; } else { setMedpacks ( getMedpacks ( ) - 1 ) ; } } } else if ( e.getSource ( ) == save ) { io.replaceMainPet ( `` '' ) ; } } } package vps.main.gui ; import javax.swing . * ; import java.awt . * ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import vps.util.io ; import vps.util.io . * ; /** * Created by XXX on 3/25/2016 . */public class StartGUI extends JFrame implements ActionListener { public static String readPath = `` '' ; static JMenuBar menuBar = new JMenuBar ( ) ; JLabel vpstitle = new JLabel ( `` VPS Alpha 1.2 '' , JLabel.CENTER ) ; JMenu fileMenu = new JMenu ( `` File '' ) ; JMenuItem newSave = new JMenuItem ( `` New Save '' ) ; JMenuItem openSave = new JMenuItem ( `` Open Save '' ) ; JButton play = new JButton ( `` Play '' ) ; JButton help = new JButton ( `` Help '' ) ; public StartGUI ( ) { super ( `` Startup '' ) ; setLayout ( new GridLayout ( 3,3 ) ) ; add ( vpstitle ) ; add ( play ) ; add ( help ) ; play.addActionListener ( this ) ; menuBar.add ( fileMenu ) ; fileMenu.add ( newSave ) ; fileMenu.add ( openSave ) ; newSave.addActionListener ( this ) ; openSave.addActionListener ( this ) ; vpstitle.setFont ( new Font ( `` Segoe Print '' , Font.BOLD , 72 ) ) ; } public static void main ( String [ ] args ) { StartGUI s = new StartGUI ( ) ; s.setDefaultCloseOperation ( WindowConstants.EXIT_ON_CLOSE ) ; s.setSize ( 720,480 ) ; s.setJMenuBar ( menuBar ) ; s.setVisible ( true ) ; } public static String getReadPath ( ) { return readPath ; } public static void setReadPath ( String readPath ) { StartGUI.readPath = readPath ; } @ Override public void actionPerformed ( ActionEvent e ) { if ( e.getSource ( ) == play ) { try { if ( readPath.equalsIgnoreCase ( `` '' ) ) { JOptionPane.showMessageDialog ( null , `` Please select a save file.\nFile -- > Open Save / New Save '' ) ; } else { PetUI.main ( null ) ; } } catch ( NullPointerException n ) { JOptionPane.showMessageDialog ( null , '' You did n't choose a file . `` ) ; } } else if ( e.getSource ( ) == newSave ) { String saveName = JOptionPane.showInputDialog ( null , '' Please name this save file : '' ) ; JOptionPane.showMessageDialog ( null , '' Select your new save directory . `` ) ; JFileChooser jf = new JFileChooser ( ) ; jf.setFileSelectionMode ( JFileChooser.DIRECTORIES_ONLY ) ; jf.showOpenDialog ( null ) ; readPath = jf.getSelectedFile ( ) .getAbsolutePath ( ) + '' \\ '' + saveName+ '' .bin '' ; io.write ( readPath ) ; io.replaceMainPet ( readPath ) ; } else if ( e.getSource ( ) == openSave ) { JOptionPane.showMessageDialog ( null , '' Press OK to select your previous save file . `` ) ; JFileChooser jf = new JFileChooser ( ) ; jf.showOpenDialog ( null ) ; readPath = jf.getSelectedFile ( ) .getAbsolutePath ( ) ; io.replaceMainPet ( readPath ) ; } } }"
-- -- -- -- -- -- -- -- -| < < signal > > || SomeEvent | -- -- -- -- -- -- -- -- -|id : Int ||text : String | -- -- -- -- -- -- -- -- -|getId ( ) ||getText ( ) | -- -- -- -- -- -- -- -- - class SomeEvent { private final int id ; private final String text ; //+constructor + getters }
if ( shouldDoSomething ( ) ) { // amazing code here }
"Using lcov file : ./coverage/lcov.info Error : Lcov file not found . # For most projects , this workflow file will not need changing ; you simply need # to commit it to your repository. # # You may wish to alter this file to override the set of languages analyzed , # or to provide custom queries or build logic.name : `` CodeQL '' on : push : branches : [ master ] pull_request : # The branches below must be a subset of the branches above branches : [ master ] schedule : - cron : ' 0 14 * * 4'jobs : analyze : name : Analyze runs-on : ubuntu-latest strategy : fail-fast : false matrix : # Override automatic language detection by changing the below list # Supported options are [ 'csharp ' , 'cpp ' , 'go ' , 'java ' , 'javascript ' , 'python ' ] language : [ 'java ' ] # Learn more ... # https : //docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning # overriding-automatic-language-detection java : [ 11 ] steps : - name : Checkout repository uses : actions/checkout @ v2 with : # We must fetch at least the immediate parents so that if this is # a pull request then we can checkout the head . fetch-depth : 2 # If this run was triggered by a pull request event , then checkout # the head of the pull request instead of the merge commit . - run : git checkout HEAD^2 if : $ { { github.event_name == 'pull_request ' } } - name : Set up Java JDK uses : actions/setup-java @ v1 with : java-version : $ { { matrix.java } } # Initializes the CodeQL tools for scanning . - name : Initialize CodeQL uses : github/codeql-action/init @ v1 with : languages : $ { { matrix.language } } # If you wish to specify custom queries , you can do so here or in a config file . # By default , queries listed here will override any specified in a config file . # Prefix the list here with `` + '' to use these queries and those in the config file . # queries : ./path/to/local/query , your-org/your-repo/queries @ main # Autobuild attempts to build any compiled languages ( C/C++ , C # , or Java ) . # If this step fails , then you should remove it and run the build manually ( see below ) - name : Autobuild uses : github/codeql-action/autobuild @ v1 # ℹ️ Command-line programs to run using the OS shell . # https : //git.io/JvXDl # ✏️ If the Autobuild fails above , remove it and uncomment the following three lines # and modify them ( or add more ) to build your code if your project # uses a compiled language # - run : | # make bootstrap # make release - name : Perform CodeQL Analysis uses : github/codeql-action/analyze @ v1"
public class SO { public static void main ( String [ ] args ) { ohno ( 0 ) ; } public static void ohno ( int a ) { System.out.println ( a ) ; if ( a ! = 11413 ) ohno ( a+1 ) ; } }
import java.io . * ; class SystemInTest { public static void main ( String [ ] args ) throws IOException { InputStream in = System.in ; //InputStream in = new FileInputStream ( `` h.txt '' ) ; int ch = 0 ; while ( ( ch = in.read ( ) ) ! = -1 ) { System.out.println ( ch ) ; } } } 97989910
"/** *Generated class at compile time**/ @ JsonInclude ( NON_NULL ) public class SamplePayloadContent extends AbstractSamplePayload { @ NotNull @ JsonProperty ( value = `` sampleProperty '' , required = true ) private String sampleProperty ; ... } public abstract class AbstractSamplePayload implements Serializable { protected final static transient Logger logger = LoggerFactory.getInstance ( AbstractSamplePayload.class.getClass ( ) ) ; /** * */ private static final long serialVersionUID = 8422742687709239202L ; @ JsonAnySetter public void handleUnknown ( String key , Object value ) { logger.warn ( new LogMetadata ( ELogIds.ABST_SAMPLE_PAYLOAD , `` Missing setter for key `` + key + `` value `` + value ) ) ; } } public SamplePayloadContent buildContent ( String jsonPayload ) throws IOException { ObjectMapper objectMapper=new ObjectMapper ( ) ; return objectMapper.readValue ( jsonPayload , SamplePayloadContent.class ) ; }"
"@ ProvidesVptchProvIntf provideVptchProv ( NeVersion neVersion , Provider < ClVptchProv > classicProvider , Provider < RsVptchProv > rsProvider ) { return ( VptchProvIntf ) provideForPlatform ( neVersion , classicProvider , rsProvider ) ; } @ ProvidesStsnVcnProvIntf provideVptchProv ( NeVersion neVersion , Provider < ClStsnVcnProv > classicProvider , Provider < RsStsnVcnProv > rsProvider ) { return ( StsnVcnProvIntf ) provideForPlatform ( neVersion , classicProvider , rsProvider ) ; }"
"public void addChild ( T parent , T child ) { T newRev = parent.createNewRevision ( ) ; newRev.addChild ( foo ) ; ... possibly more method calls to other interfaces ... } public < T extends IRevisionable & ITree > void addChild ( T parent , T child ) { ... }"
double tanh ( double x ) { ... if ( ix < 0x40360000 ) { /* |x| < 22 */ if ( ix < 0x3c800000 ) /* |x| < 2**-55 */ return x* ( one+x ) ; /* tanh ( small ) = small */ ... } tanh ( x ) = x - x^3/3 + ... tanh ( x ) = x * ( 1 + x ) = x + x^2
"public class TestType { public static void main ( String [ ] args ) { List < Constants > list = new ArrayList < > ( ) ; accept ( list ) ; //Does not compile } static void accept ( Iterable < MyInterface > values ) { for ( MyInterface value : values ) { value.doStuff ( ) ; } } } interface MyInterface < T > { T doStuff ( ) ; } enum Constants implements MyInterface < Integer > { ONE , TWO , THREE ; @ Override public Integer doStuff ( ) { return ordinal ( ) ; } }"
public static void main ( String [ ] args ) { int A=5 ; int B=2 ; A *= B*= A *= B ; System.out.println ( A ) ; System.out.println ( B ) ; }
class Animal { public static void staticMethod ( int i ) { System.out.println ( `` Animal : static -- `` + i ) ; } public void instanceMethod ( int i ) { System.out.println ( `` Animal : instance -- `` + i ) ; } } class Cat extends Animal { public static void staticMethod ( int i ) { System.out.println ( `` Cat : static -- `` + i ) ; } public void instanceMethod ( int i ) { System.out.println ( `` Cat : instance -- `` + i ) ; } public static void main ( String [ ] args ) { Cat myCat = new Cat ( ) ; myCat.staticMethod ( 1 ) ; // Cat : static -- 1 myCat.instanceMethod ( 2 ) ; // Cat : instance -- 2 System.out.println ( `` '' ) ; Animal myAnimal = myCat ; Animal.staticMethod ( 3 ) ; // Animal : static -- 3 myAnimal.staticMethod ( 4 ) ; // Animal : static -- 4 [ ? ] System.out.println ( `` '' ) ; myAnimal.instanceMethod ( 5 ) ; // Cat : instance -- 5 } } Cat : static -- 1Cat : instance -- 2Animal : static -- 3Animal : static -- 4Cat : instance -- 5
"private static int computeOne ( int res , String operand , String operation ) { int number = Integer.parseInt ( operand ) ; switch ( operation ) { case `` + '' : res += number ; break ; case `` - '' : res -= number ; break ; case `` * '' : res *= number ; break ; case `` / '' : res = ( number ! = 0 ? res / number : Integer.MAX_VALUE ) ; break ; default : res = 0 ; System.out.println ( `` unknown operation '' ) ; } return res ; } BinaryOperator < Integer > action = ( a , b ) - > computeExpression ( a + operation + b ) ; action.apply ( res , operand ) ;"
10:41:05.477 [ s~appname/1.389899266979631246 ] . < stderr > : Mon Jan 11 18:41:05 UTC 2016 WARN : Caught while disconnecting ... EXCEPTION STACK TRACE : ** BEGIN NESTED EXCEPTION ** java.net.SocketExceptionMESSAGE : Invalid request : Invalid how.STACKTRACE : java.net.SocketException : Invalid request : Invalid how . at com.google.appengine.api.socket.SocketApiHelper.translateError ( SocketApiHelper.java:110 ) at com.google.appengine.api.socket.SocketApiHelper.translateError ( SocketApiHelper.java:119 ) at com.google.appengine.api.socket.SocketApiHelper.makeSyncCall ( SocketApiHelper.java:85 ) at com.google.appengine.api.socket.AppEngineSocketImpl.shutdownInput ( AppEngineSocketImpl.java:664 ) at java.net.Socket.shutdownInput ( Socket.java:1514 ) at com.mysql.jdbc.MysqlIO.quit ( MysqlIO.java:2184 ) at com.mysql.jdbc.ConnectionImpl.realClose ( ConnectionImpl.java:4451 ) at com.mysql.jdbc.ConnectionImpl.close ( ConnectionImpl.java:1599 ) at com.appname.backend.DatabaseHelper.close ( DatabaseHelper.java:71 ) at com.appname.backend.SyncEndpoint.confirm ( SyncEndpoint.java:191 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:606 ) at com.google.apphosting.runtime.security.shared.intercept.java.lang.reflect.Method_ $ 1.run ( Method_.java:171 ) at java.security.AccessController.doPrivileged ( Native Method ) at com.google.apphosting.runtime.security.shared.intercept.java.lang.reflect.Method_.privilegedInvoke ( Method_.java:167 ) at com.google.apphosting.runtime.security.shared.intercept.java.lang.reflect.Method_.invoke_ ( Method_.java:125 ) at com.google.apphosting.runtime.security.shared.intercept.java.lang.reflect.Method_.invoke ( Method_.java:44 ) at com.google.api.server.spi.SystemService.invokeServiceMethod ( SystemService.java:363 ) at com.google.api.server.spi.SystemServiceServlet.execute ( SystemServiceServlet.java:113 ) at com.google.api.server.spi.SystemServiceServlet.doPost ( SystemServiceServlet.java:71 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:637 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:717 ) at org.mortbay.jetty.servlet.ServletHolder.handle ( ServletHolder.java:511 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1166 ) at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter ( ParseBlobUploadFilter.java:125 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter ( SaveSessionFilter.java:37 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter ( JdbcMySqlConnectionCleanupFilter.java:60 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter ( TransactionCleanupFilter.java:43 ) at org.mortbay.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1157 ) at org.mortbay.jetty.servlet.ServletHandler.handle ( ServletHandler.java:388 ) at org.mortbay.jetty.security.SecurityHandler.handle ( SecurityHandler.java:216 ) at org.mortbay.jetty.servlet.SessionHandler.handle ( SessionHandler.java:182 ) at org.mortbay.jetty.handler.ContextHandler.handle ( ContextHandler.java:765 ) at org.mortbay.jetty.webapp.WebAppContext.handle ( WebAppContext.java:418 ) at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle ( AppVersionHandlerMap.java:260 ) at org.mortbay.jetty.handler.HandlerWrapper.handle ( HandlerWrapper.java:152 ) at org.mortbay.jetty.Server.handle ( Server.java:326 ) at org.mortbay.jetty.HttpConnection.handleRequest ( HttpConnection.java:542 ) at org.mortbay.jetty.HttpConnection $ RequestHandler.headerComplete ( HttpConnection.java:923 ) at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable ( RpcRequestParser.java:78 ) at org.mortbay.jetty.HttpConnection.handle ( HttpConnection.java:404 ) at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest ( JettyServletEngineAdapter.java:148 ) at com.google.apphosting.runtime.JavaRuntime $ RequestRunnable.run ( JavaRuntime.java:469 ) at com.google.tracing.TraceContext $ TraceContextRunnable.runInContext ( TraceContext.java:437 ) at com.google.tracing.TraceContext $ TraceContextRunnable $ 1.run ( TraceContext.java:444 ) at com.google.tracing.CurrentContext.runInContext ( CurrentContext.java:256 ) at com.google.tracing.TraceContext $ AbstractTraceContextCallback.runInInheritedContextNoUnref ( TraceContext.java:308 ) at com.google.tracing.TraceContext $ AbstractTraceContextCallback.runInInheritedContext ( TraceContext.java:300 ) at com.google.tracing.TraceContext $ TraceContextRunnable.run ( TraceContext.java:441 ) at com.google.apphosting.runtime.ThreadGroupPool $ PoolEntry.run ( ThreadGroupPool.java:235 ) at java.lang.Thread.run ( Thread.java:745 ) ** END NESTED EXCEPTION **
package de.me.mypackage ; import org.something.AnotherClass ; public class ClassOne { ... public static AnotherClass < ClassOne > getThat ( ) { return new AnotherClass < ClassOne > ( ) { ... } ; }
public class AnnotationContainer { public static @ interface StaticAnnotation { } public @ interface NonstaticAnnotation { } }
for ( Attribute thisAttribute : factor.getAttributes ( ) ) { // blabla }
"Date , Lat , Lon , Depth , Mag20000101,34.6920 , -116.3550,12.30,1.2120000101,34.4420 , -116.2280,7.32,1.0120000101,37.4172 , -121.7667,5.88,1.1420000101 , -41.1300,174.7600,27.00,1.9020000101,37.6392 , -119.0482,2.40,1.0320000101,32.1790 , -115.0730,6.00,2.4420000101,59.7753 , -152.2192,86.34,1.4820000101,34.5230 , -116.2410,11.63,1.6120000101,59.5369 , -153.1360,100.15,1.6220000101,44.7357 , -110.7932,4.96,2.2020000101,34.6320 , -116.2950,9.00,1.7320000101,44.7370 , -110.7938,5.32,1.7520000101,35.7040 , -117.6320,4.15,1.4520000101,41.9270,20.5430,10.00,4.80 if ( Double.parseDouble ( a [ 0 ] .split ( `` , '' ) [ 1 ] ) < Double.parseDouble ( a [ 1 ] .split ( `` , '' ) [ 1 ] ) )"
"class Animal { public static void saySomething ( ) { System.out.print ( `` Gurrr ! `` ) ; } } class Cow extends Animal { public static void saySomething ( ) { System.out.print ( `` Moo ! `` ) ; } public static void main ( String [ ] args ) { Animal [ ] animals = { new Animal ( ) , new Cow ( ) } ; for ( Animal a : animals ) { a.saySomething ( ) ; } new Cow ( ) .saySomething ( ) ; } } Gurrr ! Gurrr ! Moo ! class Animal { public void saySomething ( ) { System.out.print ( `` Gurrr ! `` ) ; } } class Cow extends Animal { public void saySomething ( ) { System.out.print ( `` Moo ! `` ) ; } public static void main ( String [ ] args ) { Animal [ ] animals = { new Animal ( ) , new Cow ( ) } ; for ( Animal a : animals ) { a.saySomething ( ) ; } new Cow ( ) .saySomething ( ) ; } } Gurrr ! Moo ! Moo !"
String string = `` 10 trillion 896 billion 45 million 56873 '' ; Sorry I do n't have any code
private static void DropYellowDisk ( String [ ] [ ] grid ) { int number = 0 ; Scanner keyboard = new Scanner ( System.in ) ; System.out.println ( `` Drop a yellow disk at column ( 1–7 ) : `` ) ; int c = 2*keyboard.nextInt ( ) +1 ; for ( int i=6 ; i > =0 ; i -- ) { if ( grid [ i ] [ c ] == `` `` ) { grid [ i ] [ c ] = `` Y '' ; break ; } } } private static void DropRedDisk ( String [ ] [ ] grid ) { Scanner keyboard = new Scanner ( System.in ) ; System.out.print ( `` Drop a red disk at column ( 1–7 ) : `` ) ; int c = 2*keyboard.nextInt ( ) +1 ; for ( int i =6 ; i > =0 ; i -- ) { if ( grid [ i ] [ c ] == `` `` ) { grid [ i ] [ c ] = `` R '' ; break ; } } }
"List < String > list = List.of ( `` a '' , `` b '' , `` c '' ) ; System.out.println ( list ) ;"
"for ( double i = 0 ; i < = 1 ; i += 0.0001 ) for ( double j = 0 ; j < = 1 ; j+= 0.0001 ) answer = formula ( i , j ) ; //do the math if ( Math.abs ( answer - answerWanted ) < 0.001 ) //close match found"
public class A { private int i ; < -- private field ! public A ( int i ) { this.i = i ; } public void foo ( A a ) { System.out.println ( this.i ) ; // 1 . Accessing the own private field : good System.out.println ( a.i ) ; // 2 . Accessing private field of another object ! } public static void main ( String [ ] args ) { ( new A ( 5 ) ) .foo ( new A ( 2 ) ) ; } }
private static void calculate ( ) { int currentSolution = 1 ; for ( int i = 1 ; i < 100 ; i++ ) { currentSolution *= i ; } System.out.println ( currentSolution ) ; }
public interface Address { public int getNo ( ) ; } public interface User < T extends Address > { public String getUsername ( ) ; public T getAddress ( ) ; } public class AddressImpl implements Address { private int no ; public int getNo ( ) { return no ; } public void setNo ( int no ) { this.no = no ; } } public class UserImpl implements User < AddressImpl > { private String username ; private AddressImpl addressImpl ; public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this.username = username ; } public AddressImpl getAddress ( ) { return addressImpl ; } public void setAddress ( AddressImpl addressImpl ) { this.addressImpl = addressImpl ; } } int getAddressMethodCount = 0 ; for ( Method method : UserImpl.class.getMethods ( ) ) { if ( method.getName ( ) .startsWith ( `` getAddress '' ) ) { getAddressMethodCount++ ; } }
public static void main ( String [ ] args ) { int x = 1 + + + + + + + + + 2 ; System.out.println ( x ) ; }
Collection < ? super String > col = new ArrayList < String > ( ) ; col.add ( new Object ( ) ) ; // does not compilecol.add ( `` yo ! `` ) ; // compiles indeed ;
"public static void main ( String [ ] args ) { XSSFWorkbook workbook = new XSSFWorkbook ( ) ; XSSFSheet sheet = workbook.createSheet ( ) ; String [ ] days = { `` SU '' , `` MO '' , `` TU '' , `` WED '' , `` TH '' , `` FR '' , `` SA '' } ; Row row = sheet.createRow ( 0 ) ; row.createCell ( 0 ) .setCellValue ( `` Public Holidays '' ) ; row.createCell ( 1 ) .setCellValue ( `` Days '' ) ; row.createCell ( 2 ) .setCellValue ( `` Date '' ) ; row.createCell ( 3 ) .setCellValue ( `` Class '' ) ; int numRows = sheet.getFirstRowNum ( ) ; int numCols = sheet.getRow ( 0 ) .getLastCellNum ( ) ; for ( int i = 1 ; i < 7 ; i++ ) { Row row2 = sheet.createRow ( i ) ; Cell cell = row.createCell ( 1 ) ; cell.setCellValue ( days ) ; } try { FileOutputStream out = new FileOutputStream ( new File ( `` C : xx '' ) ) ; workbook.write ( out ) ; out.close ( ) ; System.out.print ( `` Sucess , please check the file '' ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } }"
"public abstract class Function < X , Y > { abstract Y apply ( X x ) ; } public static < V extends Comparable < V > > Function < List < V > , V > max ( ) { return new Function < List < V > , V > ( ) { @ Override public V apply ( List < V > list ) { return Collections.max ( list ) ; } } ; } Date result = max ( ) .apply ( datesList ) ; incompatible types ; inferred type argument ( s ) java.lang.Object do not conform to bounds of type variable ( s ) Vfound : < V > project.Function < java.util.List < V > , V > required : java.lang.Object"
private int sharedVariable ; public static void interruptTest ( ) { Thread someThread = new Thread ( ( ) - > { try { Thread.sleep ( 5000 ) ; } catch ( InterruptedException e ) { // Is it here guaranteed that changes before interrupt are always visible here ? System.out.println ( sharedVariable ) ; } } ) ; someThread.start ( ) ; Thread.sleep ( 1000 ) ; sharedVariable = 10 ; someThread.interrupt ( ) ; }
Foo myBean = new Foo ( ) ; myBean.setAddress ( `` blaFoo '' ) ; Example ex = Example.create ( myBean ) ; ex.excludeZeroes ( ) ; //ex.ignoreCase ( ) ; DetachedCriteria crit = DetachedCriteria.forClass ( Foo.class ) .add ( ex ) ; List < MonitoredApp > apps = dao.findByDetachedCriteria ( crit ) ;
"List < List < Long > > ids = [ [ 1,2,3 ] , [ 1,2,3,4 ] , [ 2,3 ] ] ; List < Long > result = [ 2,3 ] ;"
Public CustomerDetails getCustomerDetails ( ) { if ( noCustomer ) { ..log..etc.. return null ; } if ( some other bad weird condition ) { ..log..etc.. return null ; } CustomerDetails details= getCustomerDetailsFromSomewhere ( ) ; if ( details ! =null ) { return details ; } else { ..log..etc.. return null ; } }
int [ ] temp = new int [ length ] ; for ( int i = 0 ; i < temp.length ; i++ ) { temp [ i ] = generator.nextInt ( temp.length * 10 ) ; } generator = new Random ( ) ;
< dependency > < groupId > com.sun.xml.ws < /groupId > < artifactId > jaxws-ri < /artifactId > < version > 2.3.0.1 < /version > < /dependency > < dependency > < groupId > com.sun.xml.bind < /groupId > < artifactId > jaxb-ri < /artifactId > < version > 2.3.0.1 < /version > < /dependency > < dependency > < groupId > com.sun.activation < /groupId > < artifactId > javax.activation < /artifactId > < version > 1.2.0 < /version > < /dependency >
"public < K , T extends List < K > > void castLists ( List < T > list , K kForBinging ) { Map < Integer , List < T > > map = mapSizeToList ( list ) ; // Type mismatch : can not convert from Map < Integer , List < T > > to Map < Integer , List < List < K > > > // Map < Integer , List < List < K > > > expandedMap = map ; // Added after accepting answer , legal assignment : Map < Integer , ? extends List < ? extends List < K > > > expandedMap = map ; // Originally proposed 'work around ' Map < Integer , ? > lessSpecific = map ; @ SuppressWarnings ( `` unchecked '' ) Map < Integer , List < List < K > > > canCast = ( Map < Integer , List < List < K > > > ) lessSpecific ; // ... } public < A > Map < Integer , List < A > > mapSizeToList ( List < A > list ) { Map < Integer , List < A > > map = Maps.newHashMap ( ) ; // ... return map ; }"
"class MyThread extends Thread { public MyThread ( String name ) { super ( name ) ; } public void run ( ) { for ( int i=0 ; i < 5 ; i++ ) { System.out.println ( Thread.currentThread ( ) .getName ( ) + '' ( `` +Thread.currentThread ( ) .getPriority ( ) + `` ) '' + '' , loop `` +i ) ; } } } ; public class Demo { public static void main ( String [ ] args ) { System.out.println ( Thread.currentThread ( ) .getName ( ) + '' ( `` +Thread.currentThread ( ) .getPriority ( ) + `` ) '' ) ; Thread t1=new MyThread ( `` t1 '' ) ; // t1 Thread t2=new MyThread ( `` t2 '' ) ; // t2 t1.setPriority ( 1 ) ; // t1 priority 1 t2.setPriority ( 10 ) ; //t2 priority 10 t1.start ( ) ; // start t1 t2.start ( ) ; // start t2 } } //Output1main ( 5 ) t2 ( 10 ) , loop 0t2 ( 10 ) , loop 1t2 ( 10 ) , loop 2t2 ( 10 ) , loop 3t2 ( 10 ) , loop 4t1 ( 1 ) , loop 0t1 ( 1 ) , loop 1t1 ( 1 ) , loop 2t1 ( 1 ) , loop 3t1 ( 1 ) , loop 4 //Output2main ( 5 ) t1 ( 1 ) , loop 0t1 ( 1 ) , loop 1t1 ( 1 ) , loop 2t1 ( 1 ) , loop 3t1 ( 1 ) , loop 4t2 ( 10 ) , loop 0t2 ( 10 ) , loop 1t2 ( 10 ) , loop 2t2 ( 10 ) , loop 3t2 ( 10 ) , loop 4"
static class Example { public static < N extends Number > Number getOddBits ( N type ) { if ( type instanceof Byte ) return ( byte ) 0xAA ; else if ( type instanceof Short ) return ( short ) 0xAAAA ; else if ( type instanceof Integer ) return 0xAAAAAAAA ; else if ( type instanceof Float ) return Float.intBitsToFloat ( 0xAAAAAAAA ) ; else if ( type instanceof Long ) return 0xAAAAAAAAAAAAAAAAL ; else if ( type instanceof Double ) return Double.longBitsToDouble ( 0xAAAAAAAAAAAAAAAAL ) ; throw new IllegalArgumentException ( ) ; } } Example. < Float > getOddBits ( 0f ) ; Example. < Byte > getOddBits ( ) ;
"f < $ > a1 < * > a2 < * > a3 < * > a4 < * > a5 < * > a6 < * > a7 < * > a8 < * > a9 < * > a10 < * > a11 import io.reactivex.annotations.NonNull ; public interface Function11 < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , R > { @ NonNull R apply ( @ NonNull T1 var1 , @ NonNull T2 var2 , @ NonNull T3 var3 , @ NonNull T4 var4 , @ NonNull T5 var5 , @ NonNull T6 var6 , @ NonNull T7 var7 , @ NonNull T8 var8 , @ NonNull T9 var9 , @ NonNull T10 var10 , @ NonNull T11 var11 ) throws Exception ; } Function11 < String , Integer , Optional < Integer > , String , String , String , String , String , String , String , String , String > f = ( s , i1 , i2 , s2 , s3 , s4 , s5 , s6 , s7 , s8 , s9 ) - > `` '' .join ( `` - '' , s , `` i '' + i1.toString ( ) , `` i '' + i2.orElse ( 5 ) .toString ( ) , s2 , s3 , s4 , s5 , s6 , s7 , s8 , s9 ) ; Single < String > singleString1 = Single.just ( `` s1 '' ) ; Single < Integer > singleOne = Single.just ( 1 ) ; Optional < Single < Integer > > singleOptionalTwo = Optional.of ( Single.just ( 2 ) ) ; Single < String > singleString2 = Single.just ( `` s2 '' ) ; Single < String > singleString3 = Single.just ( `` s3 '' ) ; Single < String > singleString4 = Single.just ( `` s4 '' ) ; Single < String > singleString5 = Single.just ( `` s5 '' ) ; Single < String > singleString6 = Single.just ( `` s6 '' ) ; Single < String > singleString7 = Single.just ( `` s7 '' ) ; Single < String > singleString8 = Single.just ( `` s8 '' ) ; Single < String > singleString9 = Single.just ( `` s9 '' ) ; Single.zipArray ( ( Object [ ] array ) - > function11 ( ( String ) array [ 0 ] , ( Integer ) array [ 0 ] , ( Optional < Integer > ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] , ( String ) array [ 0 ] ) , singleString1 , singleOne , singleString2 , singleString2 , singleString3 , singleString4 , singleString5 , singleString6 , singleString7 , singleString8 , singleString9 ) ;"
"Map < String , Object > updatedEntity = new HashMap < String , Object > ( ) ; ArrayList < Map < String , Object > > subPropertyArray = new ArrayList < Map < String , Object > > ( ) ; Map < String , Object > subProperty = new HashMap < String , Object > ( ) ; subProperty.put ( `` age '' , `` '' ) ; subProperty.put ( `` auto_checkin_times '' , auto_checkin_times ) ; subProperty.put ( `` auto_checkins_enabled '' , `` on '' ) ; subProperty.put ( `` bio '' , `` '' ) ; subProperty.put ( `` max_age '' , `` 999 '' ) ; subProperty.put ( `` min_age '' , '' 18 '' ) ; subProperty.put ( `` dob '' , mDob ) ; subProperty.put ( `` locale '' , '' '' ) ; subProperty.put ( `` sex '' , mGender ) ; subProperty.put ( `` sexual_preference '' , mSexualPreference ) ; subProperty.put ( `` utc_offset '' , '' '' ) ; subPropertyArray.add ( subProperty ) ; updatedEntity.put ( `` type '' , `` user '' ) ; updatedEntity.put ( `` info '' , subPropertyArray ) ; dataClient.updateEntityAsync ( entityID , updatedEntity , new ApiResponseCallback ( ) { @ Override public void onResponse ( ApiResponse apiResponse ) { if ( apiResponse ! = null ) { Intent intent = new Intent ( SetupPage.this , HomePage.class ) ; startActivity ( intent ) ; } } @ Override public void onException ( Exception e ) { Log.e ( `` '' , e.toString ( ) ) ; } } ) ;"
import java.util . * ; public class Main { public static void main ( String [ ] args ) { final Test < String > t1 = new Test < String > ( ) ; final Test t2 = new Test < String > ( ) ; for ( final Integer i : t1.getInts ( ) ) { System.out.println ( i ) ; } for ( final Integer i : t2.getInts ( ) ) { // < -- compile-time error System.out.println ( i ) ; } } public static class Test < T > { public Test ( ) { } public Set < Integer > getInts ( ) { final Set < Integer > outSet = new HashSet < Integer > ( ) ; outSet.add ( new Integer ( 1 ) ) ; outSet.add ( new Integer ( 2 ) ) ; outSet.add ( new Integer ( 3 ) ) ; return outSet ; } } }
"public class Point { int x = 42 ; int y = getX ( ) ; int getX ( ) { return x ; } public static void main ( String s [ ] ) { Point p = new Point ( ) ; System.out.println ( p.x + `` , '' + p.y ) ; } } public class Point { int y = getX ( ) ; int x = 42 ; int getX ( ) { return x ; } public static void main ( String s [ ] ) { Point p = new Point ( ) ; System.out.println ( p.x + `` , '' + p.y ) ; } }"
public class DataStructure { // create an array private final static int SIZE = 15 ; private int [ ] arrayOfInts = new int [ SIZE ] ; public DataStructure ( ) { // fill the array with ascending integer values for ( int i = 0 ; i < SIZE ; i++ ) { arrayOfInts [ i ] = i ; } } public void printEven ( ) { // prints out the value of even indices in the array InnerEvenIterator iterator = this.new InnerEvenIterator ( ) ; // not sure why using 'this ' while ( iterator.hasNext ( ) ) { System.out.println ( iterator.getNext ( ) + `` `` ) ; } } // inner class implements the Iterator pattern private class InnerEvenIterator { // start stepping through the array from the beginning private int next = 0 ; public boolean hasNext ( ) { // check if a current element is the last in the array return ( next < = SIZE - 1 ) ; // -1 b/c dealing with array 's length . } public int getNext ( ) { // record a value of an even index of the array int retValue = arrayOfInts [ next ] ; // get the next even element next += 2 ; return retValue ; } } public static void main ( String s [ ] ) { // fill the array with integer values and print out only // values of even indices DataStructure ds = new DataStructure ( ) ; ds.printEven ( ) ; } }
"package bloopers ; import java.lang.annotation.Annotation ; public final class Blooper5 { interface Converter < T , F > { T convert ( F from ) ; } interface Identifier < T > { } static class ConvertingIdentifier < F , T > implements Identifier < F > { ConvertingIdentifier ( Converter < T , F > converter ) { } } static final class AnnotationIdentifier { Identifier < Annotation > I1 = new ConvertingIdentifier < > ( a - > a.annotationType ( ) ) ; Identifier < Annotation > I2 = new ConvertingIdentifier < > ( Annotation : :annotationType ) ; // < -- ERROR Identifier < Annotation > I3 = new ConvertingIdentifier < > ( ( Converter < Class < ? extends Annotation > , Annotation > ) Annotation : :annotationType ) ; } }"
class A { static public void methodA ( ) } static class B { static public void methodB ( ) } static class C { public void methodC ( ) }
"Future < List < CardDTO > > pnrFuture = null ; Future < List < CardDTO > > newsFuture = null ; ExecutionContext ec = ExecutionContexts.fromExecutorService ( executor ) ; final List < CardDTO > combinedDTOs = new ArrayList < CardDTO > ( ) ; // Array list of futures List < Future < List < CardDTO > > > futures = new ArrayList < Future < List < CardDTO > > > ( ) ; futures.add ( future ( new PNRFuture ( pnrService , userId ) , ec ) ) ; futures.add ( future ( new NewsFuture ( newsService , userId ) , ec ) ) ; futures.add ( future ( new SettingsFuture ( userPreferenceManager , userId ) , ec ) ) ; Future < Iterable < List < CardDTO > > > futuresSequence = sequence ( futures , ec ) ; // combine the cards Future < List < CardDTO > > futureSum = futuresSequence.map ( new Mapper < Iterable < List < CardDTO > > , List < CardDTO > > ( ) { @ Override public List < CardDTO > apply ( Iterable < List < CardDTO > > allDTOs ) { for ( List < CardDTO > cardDTOs : allDTOs ) { if ( cardDTOs ! = null ) { combinedDTOs.addAll ( cardDTOs ) ; } } Collections.sort ( combinedDTOs ) ; return combinedDTOs ; } } ) ; Await.result ( futureSum , Duration.Inf ( ) ) ; return combinedDTOs ;"
public class Clazz { int var = this.var + 1 ; }
"import javafx.application.Application ; import javafx.fxml.FXMLLoader ; import javafx.stage.Stage ; public class Main { public static void main ( String [ ] args ) { Application.launch ( App.class , args ) ; } } public class App extends Application { @ Override public void start ( Stage primaryStage ) { FXMLLoader loader = new FXMLLoader ( ) ; // works } } public class MainApp extends Application { @ Override public void start ( Stage primaryStage ) { FXMLLoader loader = new FXMLLoader ( ) ; // throws IllegalAccessError } public static void main ( String [ ] args ) { launch ( MainApp.class , args ) ; } }"
picture.Image = Image.FromFile ( fileLocation ) ; public class Beards extends ActionBarActivity { Image [ ] beard = new Image [ 20 ] ; String [ ] beardLocation = new String [ 20 ] ; public void fillArrays ( ) { for ( int i = 0 ; i < 20 ; i++ ) { beardLocation [ i ] = `` C : /Users/geoffoverfield01/AndroidStudioProjects/TheBeadery2.0/Images/Beards/pic_ '' + i + `` .jpg '' ; } for ( int x =0 ; x < 20 ; x++ ) { beard [ x ] = ImageIO.read ( new File ( beardLocation [ x ] ) ) ; } } ... }
public class Methods { public static void method ( Integer ... i ) { System.out.print ( `` A '' ) ; } public static void method ( int ... i ) { System.out.print ( `` B '' ) ; } public static void main ( String args [ ] ) { method ( 7 ) ; } } public class Methods { public static void method ( Integer i ) { System.out.print ( `` A '' ) ; } public static void method ( int i ) { System.out.print ( `` B '' ) ; } public static void main ( String args [ ] ) { method ( 7 ) ; } }
< mirrors > < mirror > < id > my-internal-site < /id > < mirrorOf > * < /mirrorOf > < name > our maven repository < /name > < url > http : //myserver/repository < /url > < /mirror > < /mirrors > < repositories > < repository > < id > my-internal-site < /id > < name > our maven repository < /name > < url > http : //myserver/repo < /url > < /repository > < /repositories >
"final ListPopupWindow insidelistPopupWindow = new ListPopupWindow ( view.getContext ( ) ) ; insidelistPopupWindow.setContentWidth ( getResources ( ) .getDimensionPixelSize ( R.dimen.popupNewWidth ) ) ; insidelistPopupWindow.setHeight ( getResources ( ) .getDimensionPixelSize ( R.dimen.size300dp ) ) ; insidelistPopupWindow.setVerticalOffset ( getResources ( ) .getDimensionPixelSize ( R.dimen.size0dp ) ) ; insidelistPopupWindow.setHorizontalOffset ( getPoupHorizontalOffset ( ) ) ; //set adapter ... insidelistPopupWindow.setAnchorView ( view ) ; insidelistPopupWindow.show ( ) ; public int getPoupHorizontalOffset ( ) { DisplayMetrics displayMetrics = new DisplayMetrics ( ) ; getWindowManager ( ) .getDefaultDisplay ( ) .getMetrics ( displayMetrics ) ; int height = displayMetrics.heightPixels ; int width = displayMetrics.widthPixels ; return getResources ( ) .getDimensionPixelSize ( R.dimen.popupNewWidth ) - width/2 ; } listPopupWindow.setAnchorView ( view ) ; listPopupWindow.setContentWidth ( getResources ( ) .getDimensionPixelSize ( R.dimen.popupNewWidth ) ) ; listPopupWindow.setHeight ( getResources ( ) .getDimensionPixelSize ( R.dimen.size250dp ) ) ; listPopupWindow.setVerticalOffset ( getResources ( ) .getDimensionPixelSize ( R.dimen.size50dp ) ) ; listPopupWindow.setHorizontalOffset ( listPopupWindowWidth ( view , listPopupWindow ) ) ; listPopupWindow.setPromptPosition ( ListPopupWindow.POSITION_PROMPT_ABOVE ) ; int listPopupWindowWidth ( View view , ListPopupWindow listPopupWindow ) { DisplayMetrics displayMetrics = new DisplayMetrics ( ) ; getWindowManager ( ) .getDefaultDisplay ( ) .getMetrics ( displayMetrics ) ; int screenWidth = displayMetrics.widthPixels ; int horizontalOffset = ( screenWidth / 2 ) - ( getRelativeLeft ( view ) + listPopupWindow.getWidth ( ) / 2 ) ; return horizontalOffset ; } private int getRelativeLeft ( View view ) { if ( view.getParent ( ) == view.getRootView ( ) ) { return view.getLeft ( ) ; } else { return view.getLeft ( ) + getRelativeLeft ( ( View ) view.getParent ( ) ) ; } }"
"String [ ] states = readFile ( `` States.txt '' ) ; System.out.println ( String.join ( `` `` , states ) ) ; System.out.println ( states.length ) ; Arrays.sort ( states ) ; System.out.println ( String.join ( `` `` , states ) ) ; System.out.println ( states.length ) ; FL GA SC NC VA MD NY NJ DE PA CT RI MA VT NH ME AL TN KY WV OH MI MS AR MO KS NE IN IL WI MN LA TX OK IA SD ND NM CO WY ID AZ UT NV MT CA OR WA AL HI50AL AL AR AZ CA CO CT DE FL GA HI50 public static String [ ] readFile ( String FileName ) { char [ ] cbuf = new char [ 200 ] ; String [ ] array ; FileReader fr ; try { fr = new FileReader ( FileName ) ; try { fr.read ( cbuf ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } catch ( FileNotFoundException e ) { e.printStackTrace ( ) ; } String all = new String ( cbuf ) ; array = all.split ( `` \n '' ) ; return array ; }"
"List < Integer > list = IntStream.range ( 0 , 10 ) .boxed ( ) .collect ( Collectors.toCollection ( ArrayList : :new ) ) ; list.stream ( ) .peek ( list : :remove ) .forEach ( System.out : :println ) ; 02468nullnullnullnullnullException in thread `` main '' java.util.ConcurrentModificationException list.stream ( ) .sorted ( ) .peek ( list : :remove ) .forEach ( System.out : :println ) ;"
List < String > list = new ArrayList < String > ( 1 ) ; list.add ( `` Hello '' ) ; List < String > newList = new ArrayList < String > ( ) ; newList.add ( `` Hello '' ) ;
class KeyClass { private prop1 ; private prop2 ; hashcode ( ) { //implemented properly } equals ( ) { //implemented properly } } class ValueClass { private prop1 ; private prop2 ; hashcode ( ) { //implemented properly } equals ( ) { //implemented properly } }
public void thinOutline ( ) { thinned = new boolean [ outline.length ] [ outline [ 0 ] .length ] ; for ( int x = 0 ; x < thinned.length ; x++ ) for ( int y = 0 ; y < thinned [ 0 ] .length ; y++ ) { if ( x > 0 & & x < thinned.length - 1 & & y > 0 & & y < thinned [ 0 ] .length - 1 ) if ( ! thinned [ x + 1 ] [ y ] & & ! thinned [ x - 1 ] [ y ] & & ! thinned [ x ] [ y + 1 ] & & ! thinned [ x ] [ y - 1 ] & & outline [ x ] [ y ] ) thinned [ x ] [ y ] = true ; else thinned [ x ] [ y ] = false ; else thinned [ x ] [ y ] = outline [ x ] [ y ] ; } }
"if ( a == 10 || b==10 ) { // first condition ( a==10 ) is true , so it wont check further } select * from my table where a = 10 or b = 10 ; -- As per my understanding , It should return data only based on a. -- But it returns both entries ."
public class MyClass < T > { AnotherClass < T > another ; OtherClass < T > other ; ... } public interface BaseT { ... } public class T_1 implements BaseT { ... } public class T_2 implements BaseT { ... } public class MyClass < T extends BaseT >
"@ SpringBootApplication ( exclude = { SecurityAutoConfiguration.class } ) public class Application extends SpringBootServletInitializer { public static void main ( String [ ] args ) { SpringApplication.run ( Application.class , args ) ; } @ Override protected SpringApplicationBuilder configure ( SpringApplicationBuilder application ) { return application.sources ( Application.class ) ; } } spring.datasource.jndi-name=java : comp/env/jdbc/bonanza Name [ spring.datasource.jndi-name ] is not bound in this Context . Unable to find [ spring.datasource.jndi-name ] .. Returning null . 12:37:53.989 [ main ] DEBUG o.springframework.jndi.JndiTemplate - Looking up JNDI object with name [ java : comp/env/spring.datasource.jndi-name ] 12:37:53.989 [ main ] DEBUG o.s.jndi.JndiLocatorDelegate - Converted JNDI name [ java : comp/env/spring.datasource.jndi-name ] not found - trying original name [ spring.datasource.jndi-name ] . javax.naming.NameNotFoundException : Name [ spring.datasource.jndi-name ] is not bound in this Context . Unable to find [ spring.datasource.jndi-name ] .12:37:53.990 [ main ] DEBUG o.springframework.jndi.JndiTemplate - Looking up JNDI object with name [ spring.datasource.jndi-name ] 12:37:53.991 [ main ] DEBUG o.s.jndi.JndiPropertySource - JNDI lookup for name [ spring.datasource.jndi-name ] threw NamingException with message : Name [ spring.datasource.jndi-name ] is not bound in this Context . Unable to find [ spring.datasource.jndi-name ] .. Returning null.12:37:53.995 [ main ] DEBUG o.springframework.jndi.JndiTemplate - Looking up JNDI object with name [ java : comp/env/spring.datasource.jndi-name ] 12:37:53.996 [ main ] DEBUG o.s.jndi.JndiLocatorDelegate - Converted JNDI name [ java : comp/env/spring.datasource.jndi-name ] not found - trying original name [ spring.datasource.jndi-name ] . javax.naming.NameNotFoundException : Name [ spring.datasource.jndi-name ] is not bound in this Context . Unable to find [ spring.datasource.jndi-name ] .12:37:53.996 [ main ] DEBUG o.springframework.jndi.JndiTemplate - Looking up JNDI object with name [ spring.datasource.jndi-name ] 12:37:53.997 [ main ] DEBUG o.s.jndi.JndiPropertySource - JNDI lookup for name [ spring.datasource.jndi-name ] threw NamingException with message : Name [ spring.datasource.jndi-name ] is not bound in this Context . Unable to find [ spring.datasource.jndi-name ] .. Returning null.12:37:53.998 [ main ] DEBUG o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.datasource.jndi-name ' in PropertySource 'configurationProperties ' with value of type String < Resource name= '' jdbc/bonanza '' auth= '' Container '' type= '' javax.sql.DataSource '' maxTotal= '' 100 '' maxIdle= '' 30 '' maxWaitMillis= '' 10000 '' username= '' a_usr '' password= '' Mu*7gydlcdstg100 @ '' driverClassName= '' com.mysql.jdbc.Driver '' url= '' jdbc : mysql : //172.175.77.55:3306/a_db '' / >"
"List < Integer > a = Stream.of ( bufferedReader.readLine ( ) .replaceAll ( `` \\s $ '' , `` '' ) .split ( `` `` ) ) .map ( Integer : :parseInt ) .collect ( toList ( ) ) ; [ 1 ] : https : //i.stack.imgur.com/nlXxd.jpg"
"[ 0x00 , 0x0a , 0xff , 0x01 ] [ 0x01 , 0x01 ] [ 0xff , 0x01 , 0xff ] [ 0x00 , 0x0a , 0xff ] [ 0x01 , 0x01 , 0x01 , 0xff ] [ 0x01 , 0xff ]"
"@ RestController @ RequestMapping ( `` /stat/player '' ) public class PlayerController { @ Autowired private StatService < PlayerValue > statPlayer ; @ RequestMapping ( `` /number/ { number } '' ) public Object findByNumber ( @ PathVariable String number ) { // Here returning Object seem odd return statPlayer.findByNumber ( number ) ; } } @ Service @ Transactional ( isolation = Isolation.READ_COMMITTED ) public class PlayerServiceImpl implements StatService < PlayerValue > { @ Autowired private PlayerRepository repository ; @ Override public PlayerValue findByNumber ( String number ) { Optional < PlayerEntity > numberValue = repository.findByNumber ( number ) ; return numberValue.map ( PlayerEntity : :toValue ) .orElse ( null ) ; } } @ Aspect @ Componentpublic class Converter { private static final Logger LOG = LoggerFactory.getLogger ( Converter.class ) ; @ Pointcut ( `` within ( @ org.springframework.web.bind.annotation.RestController * ) '' ) public void restControllerClassMethod ( ) { } private < T > ResponseValue < T > convert ( List < T > results ) { String message = results.isEmpty ( ) ? `` No result found '' : ResponseValueStatus.OK.toString ( ) ; return new ResponseValue < > ( ResponseValueStatus.OK , message , results ) ; } @ Around ( `` restControllerClassMethod ( ) '' ) @ SuppressWarnings ( `` unchecked '' ) public < T > ResponseValue < T > convert ( ProceedingJoinPoint joinPoint ) { ResponseValue value ; try { Object findObject = joinPoint.proceed ( ) ; List < Object > objects = toList ( findObject ) ; value = convert ( objects ) ; } catch ( NullPointerException e ) { throw new StatException ( String.format ( `` Exception thrown from % s from % s method with parameter % s '' , joinPoint.getSignature ( ) .getDeclaringTypeName ( ) , joinPoint.getSignature ( ) .getName ( ) , joinPoint.getArgs ( ) [ 0 ] .toString ( ) ) ) ; //this exception will go in a controller advice and create a response value with this message } catch ( Throwable e ) { LOG.error ( `` Exception occurred while converting the object '' , e ) ; throw new StatException ( String.format ( `` Exception thrown from % s from % s method with parameter % s with exception message % s '' , joinPoint.getSignature ( ) .getDeclaringTypeName ( ) , joinPoint.getSignature ( ) .getName ( ) , joinPoint.getArgs ( ) [ 0 ] .toString ( ) , e.getMessage ( ) ) ) ; } return value ; } private List < Object > toList ( Object findObject ) { List < Object > objects = new ArrayList < > ( ) ; if ( findObject instanceof List ) { ( ( List ) findObject ) .forEach ( item - > objects.add ( findObject ) ) ; } else { objects.add ( findObject ) ; } return objects ; } }"
"public < T > List < Map < String , Object > > getUIElementsList ( Class < T > requiredType ) { doSomeThing ( ) ; return this.fieldList ; } FormBean formBean = new FormBean ( ) ; formBean.setUserId ( 252528 ) ; getUIElementsList ( FormBean.class ) ; //restrict this casegetUIElementsList ( formBean ) ;"
"package com.mycompany.app ; import java.lang.System ; import java.util.concurrent.TimeUnit ; public class Main { public static void main ( String [ ] args ) { System.out.println ( `` the current process 's pid is `` + ProcessHandle.current ( ) .pid ( ) ) ; try { TimeUnit.SECONDS.sleep ( 200 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } System.out.println ( `` Hello World ! `` ) ; // Prints the string to the console . } } $ java -cp target com.mycompany.app.Main the current process 's pid is 10172 $ pstree -pau -l -G -s 10172systemd,1 splash └─lxterminal,3194 , t └─bash,12150 └─java,10172 -cp target com.mycompany.app.Main ├─ { java } ,10173 ├─ { java } ,10174 ├─ { java } ,10175 ├─ { java } ,10176 ├─ { java } ,10177 ├─ { java } ,10178 ├─ { java } ,10179 ├─ { java } ,10180 ├─ { java } ,10181 ├─ { java } ,10182 ├─ { java } ,10183 ├─ { java } ,10184 ├─ { java } ,10185 ├─ { java } ,10186 ├─ { java } ,10187 ├─ { java } ,10188 ├─ { java } ,10189 └─ { java } ,10190"
public Integer get ( ) { return 1 ; // ( 1 ) }
Set < Integer > mySet = new HashSet < > ( ) ; mySet.add ( 10 ) ; mySet.add ( 4 ) ; mySet.add ( 20 ) ; mySet.add ( 15 ) ; mySet.add ( 22 ) ; mySet.add ( -3 ) ; List < Integer > result = mySet.stream ( ) .sorted ( ) .collect ( Collectors.toList ( ) ) ; System.out.println ( result ) ; mySet.stream ( ) .parallel ( ) .sorted ( ) .collect ( Collectors.toList ( ) ) ; `
"-- module-path lib -- add-modules javafx.controls , javafx.fxml"
public final class Test { private static final Test TEST = new Test ( ) ; private static final int YEAR = Calendar.getInstance ( ) .get ( Calendar.YEAR ) ; private final int eval=YEAR - 10 ; public static void main ( String [ ] args ) { System.out.println ( `` Evaluation `` +TEST.eval ) ; } }
"// myPoint is the location inside the grid ( unique , agents ca n't move and only one per cell is allowed ) public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( myPoint == null ) ? 0 : myPoint.hashCode ( ) ) ; return result ; } // Returns enemy 's choice in the previous roundprivate byte getLastPlay ( Player enemy ) { return ( neighbors.get ( enemy ) [ 1 ] ) ? COOPERATE : DEFECT ; } // Elements are saved as ( player , choice ) private void receivePlay ( Player enemy , byte play ) { System.out.println ( this + `` receives ( `` + play + `` ) from `` + enemy ) ; while ( ! playSharedQueue.add ( new Object [ ] { enemy , play } ) ) { // This does n't get printed , meaning that the insertion is successful ! System.out.println ( this + `` failed inserting '' ) ; } } @ ScheduledMethod ( start = 1 , interval = 1 , priority = 10 ) public void play ( ) { System.out.println ( this + `` started playing '' ) ; // Clear previous plays playSharedQueue.clear ( ) ; for ( Player enemy : neighbors.keySet ( ) ) { // properties [ 0 ] = true if we already played together // properties [ 1 ] = true if enemy choose to cooperate on the previous round Boolean [ ] properties = neighbors.get ( enemy ) ; // Choose which side we take this time byte myPlay ; if ( properties [ 0 ] ) { // First time that we play , use memory-less strategy myPlay = ( Math.random ( ) < = strategy [ 0 ] ) ? COOPERATE : DEFECT ; // Report that we played properties [ 0 ] = false ; neighbors.put ( enemy , properties ) ; } else { // We already had a round , use strategy with memory byte enemyLastPlay = enemy.getLastPlay ( this ) ; // Choose which side to take based on enemy 's previous decision myPlay = ( Math.random ( ) < = strategy [ ( enemyLastPlay ) == COOPERATE ? 1 : 2 ] ) ? COOPERATE : DEFECT ; } // Send my choice to the enemy System.out.println ( this + `` sent ( `` + myPlay + `` ) to `` + enemy ) ; enemy.receivePlay ( this , myPlay ) ; } } // Waits for the results and processes them @ ScheduledMethod ( start = 1 , interval = 1 , priority = 5 ) public void waitResults ( ) { // Clear previous score lastPayoff = 0 ; System.out.println ( this + `` waits for results [ `` + playSharedQueue.size ( ) + `` ] '' ) ; if ( playSharedQueue.size ( ) ! = 4 ) { // Well , this happens on the first agent : ( System.exit ( 1 ) ; } // ... process ... } Player [ 2 , 0 ] started playingPlayer [ 2 , 0 ] sent ( 0 ) to Player [ 2 , 1 ] Player [ 2 , 1 ] receives ( 0 ) from Player [ 2 , 0 ] Player [ 2 , 0 ] sent ( 0 ) to Player [ 2 , 2 ] Player [ 2 , 2 ] receives ( 0 ) from Player [ 2 , 0 ] Player [ 2 , 0 ] sent ( 0 ) to Player [ 0 , 0 ] Player [ 0 , 0 ] receives ( 0 ) from Player [ 2 , 0 ] Player [ 2 , 0 ] sent ( 0 ) to Player [ 1 , 0 ] Player [ 1 , 0 ] receives ( 0 ) from Player [ 2 , 0 ] Player [ 1 , 2 ] started playingPlayer [ 1 , 2 ] sent ( 1 ) to Player [ 2 , 2 ] Player [ 2 , 2 ] receives ( 1 ) from Player [ 1 , 2 ] Player [ 1 , 2 ] sent ( 1 ) to Player [ 0 , 2 ] Player [ 0 , 2 ] receives ( 1 ) from Player [ 1 , 2 ] Player [ 1 , 2 ] sent ( 1 ) to Player [ 1 , 0 ] Player [ 1 , 0 ] receives ( 1 ) from Player [ 1 , 2 ] Player [ 1 , 2 ] sent ( 1 ) to Player [ 1 , 1 ] Player [ 1 , 1 ] receives ( 1 ) from Player [ 1 , 2 ] Player [ 0 , 2 ] started playingPlayer [ 0 , 2 ] sent ( 1 ) to Player [ 2 , 2 ] Player [ 2 , 2 ] receives ( 1 ) from Player [ 0 , 2 ] Player [ 0 , 2 ] sent ( 1 ) to Player [ 0 , 0 ] Player [ 0 , 0 ] receives ( 1 ) from Player [ 0 , 2 ] Player [ 0 , 2 ] sent ( 1 ) to Player [ 0 , 1 ] Player [ 0 , 1 ] receives ( 1 ) from Player [ 0 , 2 ] Player [ 0 , 2 ] sent ( 1 ) to Player [ 1 , 2 ] Player [ 1 , 2 ] receives ( 1 ) from Player [ 0 , 2 ] Player [ 0 , 1 ] started playingPlayer [ 0 , 1 ] sent ( 1 ) to Player [ 2 , 1 ] Player [ 2 , 1 ] receives ( 1 ) from Player [ 0 , 1 ] Player [ 0 , 1 ] sent ( 1 ) to Player [ 0 , 0 ] Player [ 0 , 0 ] receives ( 1 ) from Player [ 0 , 1 ] Player [ 0 , 1 ] sent ( 1 ) to Player [ 0 , 2 ] Player [ 0 , 2 ] receives ( 1 ) from Player [ 0 , 1 ] Player [ 0 , 1 ] sent ( 1 ) to Player [ 1 , 1 ] Player [ 1 , 1 ] receives ( 1 ) from Player [ 0 , 1 ] Player [ 1 , 0 ] started playingPlayer [ 1 , 0 ] sent ( 0 ) to Player [ 2 , 0 ] Player [ 2 , 0 ] receives ( 0 ) from Player [ 1 , 0 ] Player [ 1 , 0 ] sent ( 0 ) to Player [ 0 , 0 ] Player [ 0 , 0 ] receives ( 0 ) from Player [ 1 , 0 ] Player [ 1 , 0 ] sent ( 0 ) to Player [ 1 , 1 ] Player [ 1 , 1 ] receives ( 0 ) from Player [ 1 , 0 ] Player [ 1 , 0 ] sent ( 0 ) to Player [ 1 , 2 ] Player [ 1 , 2 ] receives ( 0 ) from Player [ 1 , 0 ] Player [ 1 , 1 ] started playingPlayer [ 1 , 1 ] sent ( 0 ) to Player [ 2 , 1 ] Player [ 2 , 1 ] receives ( 0 ) from Player [ 1 , 1 ] Player [ 1 , 1 ] sent ( 0 ) to Player [ 0 , 1 ] Player [ 0 , 1 ] receives ( 0 ) from Player [ 1 , 1 ] Player [ 1 , 1 ] sent ( 0 ) to Player [ 1 , 0 ] Player [ 1 , 0 ] receives ( 0 ) from Player [ 1 , 1 ] Player [ 1 , 1 ] sent ( 0 ) to Player [ 1 , 2 ] Player [ 1 , 2 ] receives ( 0 ) from Player [ 1 , 1 ] Player [ 2 , 2 ] started playingPlayer [ 2 , 2 ] sent ( 0 ) to Player [ 2 , 0 ] Player [ 2 , 0 ] receives ( 0 ) from Player [ 2 , 2 ] Player [ 2 , 2 ] sent ( 0 ) to Player [ 2 , 1 ] Player [ 2 , 1 ] receives ( 0 ) from Player [ 2 , 2 ] Player [ 2 , 2 ] sent ( 0 ) to Player [ 0 , 2 ] Player [ 0 , 2 ] receives ( 0 ) from Player [ 2 , 2 ] Player [ 2 , 2 ] sent ( 0 ) to Player [ 1 , 2 ] Player [ 1 , 2 ] receives ( 0 ) from Player [ 2 , 2 ] Player [ 0 , 0 ] started playingPlayer [ 0 , 0 ] sent ( 1 ) to Player [ 2 , 0 ] Player [ 2 , 0 ] receives ( 1 ) from Player [ 0 , 0 ] Player [ 0 , 0 ] sent ( 1 ) to Player [ 0 , 1 ] Player [ 0 , 1 ] receives ( 1 ) from Player [ 0 , 0 ] Player [ 0 , 0 ] sent ( 1 ) to Player [ 0 , 2 ] Player [ 0 , 2 ] receives ( 1 ) from Player [ 0 , 0 ] Player [ 0 , 0 ] sent ( 1 ) to Player [ 1 , 0 ] Player [ 1 , 0 ] receives ( 1 ) from Player [ 0 , 0 ] Player [ 2 , 1 ] started playingPlayer [ 2 , 1 ] sent ( 1 ) to Player [ 2 , 0 ] Player [ 2 , 0 ] receives ( 1 ) from Player [ 2 , 1 ] Player [ 2 , 1 ] sent ( 1 ) to Player [ 2 , 2 ] Player [ 2 , 2 ] receives ( 1 ) from Player [ 2 , 1 ] Player [ 2 , 1 ] sent ( 1 ) to Player [ 0 , 1 ] Player [ 0 , 1 ] receives ( 1 ) from Player [ 2 , 1 ] Player [ 2 , 1 ] sent ( 1 ) to Player [ 1 , 1 ] Player [ 1 , 1 ] receives ( 1 ) from Player [ 2 , 1 ] Player [ 2 , 2 ] waits for results [ 1 ]"
"import java.text . * ; import java.util . * ; public class FormatFails { public static void main ( String ... args ) { Currency currency = Currency.getInstance ( `` EUR '' ) ; NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance ( Locale.FRANCE ) ; currencyFormatter.setMaximumFractionDigits ( 0 ) ; currencyFormatter.setMinimumFractionDigits ( 0 ) ; currencyFormatter.setCurrency ( currency ) ; String expected = `` 123 457 € '' ; String obtained = currencyFormatter.format ( 123456.789 ) ; System.out.println ( expected ) ; System.out.println ( obtained ) ; System.out.println ( expected.equals ( obtained ) ) ; System.out.format ( `` Bytes from expected : % s\n '' , Arrays.toString ( expected.getBytes ( ) ) ) ; System.out.format ( `` Bytes from obtained : % s\n '' , Arrays.toString ( obtained.getBytes ( ) ) ) ; } } 123 457 €123 457 €falseBytes from expected : [ 49 , 50 , 51 , -62 , -96 , 52 , 53 , 55 , 32 , -30 , -126 , -84 ] Bytes from obtained : [ 49 , 50 , 51 , -62 , -96 , 52 , 53 , 55 , -62 , -96 , -30 , -126 , -84 ] 123 457 €123 457 €trueBytes from expected : [ 49 , 50 , 51 , -62 , -96 , 52 , 53 , 55 , 32 , -30 , -126 , -84 ] Bytes from obtained : [ 49 , 50 , 51 , -62 , -96 , 52 , 53 , 55 , 32 , -30 , -126 , -84 ] java version `` 9 '' Java ( TM ) SE Runtime Environment ( build 9+181 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 9+181 , mixed mode )"
> class A { static Runnable a ( int x ) { return ( ) - > System.out.println ( x ) ; } } | created class A > Runnable r = A.a ( 5 ) ; r == > A $ $ Lambda $ 15/1413653265 @ 548e7350 > import java.lang.reflect.Field ; > Field [ ] fields = r.getClass ( ) .getDeclaredFields ( ) ; fields == > Field [ 1 ] { private final int A $ $ Lambda $ 15/1413653265.arg $ 1 } > fields [ 0 ] .isSynthetic ( ) $ 5 == > false import java.lang.reflect.Field ; public class LambdaTest { static Runnable a ( int x ) { return ( ) - > System.out.println ( x ) ; } public static void main ( String [ ] args ) { Runnable r = a ( 5 ) ; Field [ ] fields = r.getClass ( ) .getDeclaredFields ( ) ; boolean isSynthetic = fields [ 0 ] .isSynthetic ( ) ; System.out.println ( `` isSynthetic == `` + isSynthetic ) ; // false } }
import java.util.List ; interface Alpha < T > { List < Integer > intList ( ) ; } interface Beta { List < Integer > intList ( ) ; } class Main { public static void main ( String [ ] args ) { Alpha rawAlpha = null ; Alpha < Character > charAlpha = null ; Alpha < ? > qmAlpha = null ; Beta beta = null ; for ( Integer i : charAlpha.intList ( ) ) { } for ( Integer i : qmAlpha.intList ( ) ) { } for ( Integer i : beta.intList ( ) ) { } for ( Integer i : rawAlpha.intList ( ) ) { } } } error : incompatible types : Object can not be converted to Integer for ( Integer i : rawAlpha.intList ( ) ) { } ^1 error
import java.io.FileOutputStream ; import java.util.zip.ZipOutputStream ; public class TryTest { public static void main ( String [ ] args ) { String zipPath = '' D : /test '' ; try ( ZipOutputStream zipOut = new ZipOutputStream ( new FileOutputStream ( zipPath ) ) ) { String Hello = '' Hello '' ; System.out.println ( `` ============== > '' +Hello ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } try { try ( ZipOutputStream zipOutputStream = new ZipOutputStream ( new FileOutputStream ( string ) ) ; ) { String string2 = `` Hello '' ; System.out.println ( `` ============== > '' + string2 ) ; }
"public abstract class CommentDetector { private final String startPattern ; private final String endPattern ; protected CommentDetector ( String startPattern , String endPattern ) { this.startPattern = startPattern ; this.endPattern = endPattern ; } public boolean commentStartsAt ( int index , String sourceCode ) { // ... } public boolean commentEndsAt ( int index , String sourceCode ) { // ... } } public class JavaMultiLineCommentDetector extends CommentDetector { public JavaMultiLineCommentDetector ( ) { super ( `` /* '' , `` */ '' ) ; } } public class JavaSingleLineCommentDetector extends CommentDetector { public JavaSingleLineCommentDetector ( ) { super ( `` // '' , `` \n '' ) ; } }"
"some publication , issue no . 3another publication , issue no . 23yet another publicationhere is another publication some publication 3another publication 23yet another publication < null > here is another publication < null > String underTest = `` some publication , issue no . 3 '' ; String pattern = `` ( .* ? ) , issue no . ( \\d+ ) '' ; Matcher matcher = Pattern.compile ( pattern ) .matcher ( underTest ) ; boolean found = matcher.find ( ) ; if ( found ) { log.info ( `` something found '' ) ; String group1 = matcher.group ( 1 ) ; log.info ( `` group1 : { } '' , group1 ) ; String group2 = matcher.group ( 2 ) ; log.info ( `` group2 : { } '' , group2 ) ; }"
"public class Woof { public static class Arf < T > { T yap ; public Arf ( T yap ) { this.yap = yap ; } public String woof ( ) { /* * Should select which doYapStuff ( ) based on whether T * happens to be an Integer , or something else . */ return doYapStuff ( yap ) ; } /* Special case implementation of doYapStuff ( ) where T is Integer */ public String doYapStuff ( Integer x ) { return `` happy '' ; } /* Default implementation of doYapStuff ( ) where T is something else */ public String doYapStuff ( T x ) { return `` sad '' ; } } public static void main ( String [ ] args ) { Integer i = 5 ; Arf < Integer > arf1 = new Arf < Integer > ( i ) ; System.out.println ( arf1.woof ( ) ) ; // Should print `` happy '' String s = `` foo '' ; Arf < String > arf2 = new Arf < String > ( s ) ; System.out.println ( arf2.woof ( ) ) ; // Should print `` sad '' } }"
int j = 7 ; System.out.println ( Integer.toBinaryString ( j ) ) ; j = ~j++ ; System.out.println ( Integer.toBinaryString ( j ) ) ; 11111111111111111111111111111111000 11111111111111111111111111111111001 11111111111111111111111111111001 11111111111111111111111111110111
"SELECT count ( * ) , to_char ( created_date , 'YYYY-MM-DD ' ) as year_month_date FROM log GROUP BY year_month_date ORDER BY year_month_date jooq.select ( DSL.count ( ) , DSL.field ( `` to_char ( created_date , 'YYYY-MM-DD ' ) as year_month_date '' ) ) .from ( LOG ) .groupBy ( DSL.field ( `` year_month_date '' ) ) .orderBy ( DSL.field ( `` year_month_date '' ) ) .fetch ( ) ;"
"Sqrt [ A+B ] + Sqrt [ Min [ A , B ] ] * Min [ Sqrt [ C ] , D ]"
"GenericObject genericObject ; ... FieldObject obj = genericObject.getFieldObject ( ) ; if ( obj == null ) { map.put ( `` key1 '' , null ) ; map.put ( `` key2 '' , null ) ; } else { map.put ( `` key1 '' , obj.getField1 ( ) ) ; map.put ( `` key2 '' , obj.getField2 ( ) ) ; } boolean insert = obj ! = null ; map.put ( `` key1 '' , insert ? obj.getField1 ( ) : null ) ; map.put ( `` key2 '' , insert ? obj.getField2 ( ) : null ) ;"
"BufferedReader in = new BufferedReader ( new InputStreamReader ( socket.getInputStream ( ) , `` UTF8 '' ) ) ; String code ; if ( Objects.equals ( ( code = in.readLine ( ) ) , `` S '' ) ) { //Input string : `` S '' //code } BufferedReader in = new BufferedReader ( new InputStreamReader ( socket.getInputStream ( ) , `` UTF8 '' ) ) ; String code ; if ( ( code = in.readLine ( ) ) .equals ( `` S '' ) ) { //Input string : `` S '' //code } class ManagePhoneClients { public void managePhoneClients ( object obj ) { Boolean socketalive = true ; TcpClient tcpClient = ( TcpClient ) obj ; StreamReader sr = new StreamReader ( tcpClient.GetStream ( ) , Encoding.UTF8 ) ; StreamWriter sw = new StreamWriter ( tcpClient.GetStream ( ) , Encoding.UTF8 ) ; Boolean isPhoneClientConnected = false ; String user ; String answer ; String tl ; List < string > LC = new List < string > ( ) ; Boolean qss = false ; Program program = new Program ( ) ; Int32 points = 0 ; ConsoleMethods.writeLine ( `` Thread started for the phone client . `` , `` Info '' , ConsoleColor.Cyan ) ; sw.WriteLine ( `` S '' ) ; sw.Flush ( ) ; while ( socketalive == true ) { try { if ( Program.isMainClientConnected ! = true || Program.isPowerPointConnected ! = true ) { ConsoleMethods.writeLine ( `` Connection refused because the necessary clients are not connected ! `` , `` Error '' , ConsoleColor.Red ) ; sw.WriteLine ( `` NS '' ) ; sw.Flush ( ) ; tcpClient.Close ( ) ; socketalive = false ; } else { sw.WriteLine ( `` LC '' ) ; sw.Flush ( ) ; } if ( isPhoneClientConnected ! = true & sr.Peek ( ) ! = -1 ) { String rLC = sr.ReadLine ( ) ; LC.AddRange ( rLC.Split ( '| ' ) ) ; if ( LC [ 1 ] .ToString ( ) == Program.passPhoneClient ) { user = LC [ 0 ] ; Program.userNames.Add ( user ) ; ConsoleMethods.writeLine ( `` Phone connected from : `` + tcpClient.Client.RemoteEndPoint , `` Info '' , ConsoleColor.Cyan ) ; sw.WriteLine ( `` S '' ) ; sw.Flush ( ) ; Program.utnr = rLC ; isPhoneClientConnected = true ; } else { sw.WriteLine ( `` NS '' ) ; sw.Flush ( ) ; socketalive = false ; ConsoleMethods.writeLine ( `` Phone client disconnected because the password was invalid ! `` , `` Error '' , ConsoleColor.Red ) ; } } switch ( sr.ReadLine ( ) ) { case `` CLIENT-EXCEPTION '' : ConsoleMethods.writeLine ( `` Exception in phone client from : `` + tcpClient.Client.RemoteEndPoint + `` \n '' + sr.ReadLine ( ) , `` Client-Error '' , ConsoleColor.DarkRed ) ; break ; case `` RECEIVED_POINTS '' : int point = int.Parse ( sr.ReadLine ( ) ) ; points += point ; ConsoleMethods.writeLine ( `` Phone client succesfully completed a task from : `` + tcpClient.Client.RemoteEndPoint + `` Point : `` + point , `` Client-Received Points '' , ConsoleColor.DarkRed ) ; ConsoleMethods.writeLine ( `` Phone client collected points from : `` + tcpClient.Client.RemoteEndPoint + `` Points : `` + points , `` Client-Collected Points '' , ConsoleColor.DarkRed ) ; break ; } } catch ( Exception e ) { tcpClient.Close ( ) ; socketalive = false ; ConsoleMethods.writeLine ( e.Message + e.StackTrace + e.StackTrace , `` Error '' , ConsoleColor.Red ) ; } } } } public void login ( View v ) { final Context context = this ; new Thread ( new Runnable ( ) { public void run ( ) { try { final Socket socket = new Socket ( `` 192.168.0.104 '' , 90 ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( socket.getInputStream ( ) , `` UTF8 '' ) ) ; PrintWriter out = new PrintWriter ( socket.getOutputStream ( ) ) ; out.print ( `` P '' + `` \r\n '' ) ; out.flush ( ) ; String code ; code = in.readLine ( ) ; if ( code.equals ( `` S '' ) ) { if ( Objects.equals ( ( code = in.readLine ( ) ) , `` LC '' ) ) { out.print ( ( ( EditText ) findViewById ( R.id.username ) ) .getText ( ) .toString ( ) + `` | '' + ( ( EditText ) findViewById ( R.id.password ) ) .getText ( ) .toString ( ) + `` \r\n '' ) ; out.flush ( ) ; if ( Objects.equals ( ( code = in.readLine ( ) ) , `` S '' ) ) { new ServerContact ( context ) .Listener ( socket ) ; startActivity ( new Intent ( Login.this , Waiting.class ) ) ; } else { throw new Exception ( `` Login failed because the server refused the login request . Server responded with status code : ' '' + code + `` ' . `` ) ; } } else { throw new Exception ( `` Login failed because the server refused the login request . Server responded with status code : ' '' + code + `` ' . `` ) ; } } else { throw new Exception ( `` Login failed because the server refused the login request . Server responded with status code : ' '' + code + `` ' . `` ) ; } } catch ( Exception e ) { new ExceptionWriter ( e ) ; } } } ) .start ( ) ; }"
var < Integer > list = new ArrayList < Double > ( ) ;
"public interface MyInterface { public OtherClass generate ( ClassTwo two , ClassThree three ) throws RetryException ; } public class MyGenerator { public class generate ( ClassTwo two , ClassThree three ) { try { } catch ( MyException my ) } } public Object evaluate ( String expression , Map values ) throws FirstException , RetryException { try { } catch ( Exception x ) { if ( x instanceof FirstException ) { throw new FirstException ( ) } else { RetryException retry= ( RetryException ) x ; retry.expression = expression ; retry.position = position ; retry.operator = tokens [ position ] ; retry.operand = 1 ; throw retry ; } } }"
@ implNote ... is used at VM startup and so deliberatelyavoids using lambda and stream usages in code paths used duringstartup .
"WindowsZone wzn = WindowsZone.of ( userTimeZoneId ) ; //userTimeZoneId= '' eg . FLE Standart Time '' TZID winZone = wzn.resolveSmart ( new Locale ( `` '' , '' 001 '' ) ) ; System.out.println ( winZone.canonical ( ) ) ; // WINDOWS~Europe/Kiev PlainTime currentTime = SystemClock.inZonalView ( winZone ) .now ( ) .toTime ( ) ; //currentTime : `` T17:31:37,057 ''"
java.lang.Runtime # getRuntime ( ) java.awt.Desktop # getDesktop ( ) java.lang.System # getSecurityManager ( )
"int angle=0 ; int ypos=500 ; int xpos=500 ; RelativeLayout layout = ( RelativeLayout ) findViewById ( R.id.ln1 ) ; for ( int i=0 ; i < 10 ; i++ ) { ImageView image = new ImageView ( this ) ; image.setLayoutParams ( new android.view.ViewGroup.LayoutParams ( 150,400 ) ) ; image.setX ( xpos ) ; image.setY ( ypos ) ; image.setPadding ( -7 , -30 , -10,0 ) ; image.setPivotX ( 1.0f ) ; image.setScaleX ( 1.5f ) ; image.setScaleY ( 1.5f ) ; image.setImageResource ( R.drawable.petal ) ; image.setRotation ( image.getRotation ( ) + angle ) ; angle=angle+36 ; layout.addView ( image ) ; }"
"Caused by : java.lang.NoClassDefFoundError : com/techdisqus/exception/MyCustomException public class MyCustomException extends RuntimeException { } public class Entity { } public class Driver { public static void main ( String [ ] args ) { String s = args [ 0 ] ; if ( `` true '' .equals ( s ) ) { Entity entity = new Entity ( ) ; // This is not loaded , unless s is true throw new MyCustomException ( ) ; // this is loaded even s is NOT true . } else { System.out.println ( `` success '' ) ; } } }"
Duration total = Duration.ZERO ; for ( Duration duration : durations ) { total = total.plus ( duration ) ; }
"Arrays.stream ( intArray ) .map ( e- > e*2 ) .forEach ( System.out : :println ) ; Arrays.stream ( intArray ) .map ( e- > e*e ) .forEach ( System.out : :println ) ; Function < Integer , Integer > times2 = e - > e * 2 ; Function < Integer , Integer > squared = e - > e * e ; Arrays.stream ( intArray ) .map ( times2.andThen ( squared ) ) .forEach ( System.out : :println ) ; Arrays.stream ( intArray ) .map ( e- > e*2.andThen ( f- > f*f ) ) .forEach ( System.out : :println ) ;"
"< p th : if= '' $ { param.logout } '' > Logged out successfully < /p > @ Overrideprotected void configure ( HttpSecurity http ) throws Exception { http .authorizeRequests ( ) .antMatchers ( `` / '' , `` *.css '' ) .permitAll ( ) .antMatchers ( `` /myendpoint '' ) .authenticated ( ) .and ( ) .formLogin ( ) .loginPage ( `` /login '' ) .permitAll ( ) .and ( ) .logout ( ) .logoutUrl ( `` /logout '' ) .logoutSuccessUrl ( `` /login ? logout '' ) .permitAll ( ) ; }"
"public Map < String , Set < String > > parseApiEntriesIntoMap ( List < Restaurant > restaurants ) { if ( restaurants == null ) { return null ; } Map < String , Set < String > > restaurantListByNeighborhood = new HashMap < > ( ) ; // Here we group by neighborhood and concatenate the list of restaurants into a set Map < String , Set < List < String > > > map = restaurants.stream ( ) .collect ( groupingBy ( Restaurant : :getNeighborhood , Collectors.mapping ( Restaurant : :getRestaurantList , toSet ( ) ) ) ) ; map.forEach ( ( n , r ) - > restaurantListByNeighborhood.put ( n , Sets.newHashSet ( Iterables.concat ( r ) ) ) ) ; return restaurantListByNeighborhood ; }"
"data class Product ( val name : String = `` '' , val price : Float = 0f ) val json = `` { 'name ' : null , 'price ' : 50.00 } '' val gson = GsonBuilder ( ) .create ( ) val p = gson.fromJson ( json , Product : :class.java ) println ( `` name is $ { p.name } '' )"
java -classpath JconsoleExtension.jar ; MyApp.jar -com.sun.management.jmxremote.login.config=management.properties -Djava.security.auth.login.config=./sample_jaas.config com.test.running.RunningImplementation com.sun.management.jmxremote=truecom.sun.management.jmxremote.port=1234com.sun.management.jmxremote.login.config=Sample jconsole hostname:1234 jconsole hostname:1234 -classpath JconsoleExtension.jar
java -jar build/libs/d8.jar -- release -- output out input.jar java -jar build/libs/r8.jar -- release -- output out -- pg-conf proguard.cfg input.jar
public final class HelloWorldMainScreen extends MainScreen { private LabelField labelField ; public HelloWorldMainScreen ( ) { labelField = new LabelField ( `` Hello World '' ) ; add ( labelField ) ; MainScreenUpdaterThread thread = new MainScreenUpdaterThread ( this ) ; thread.start ( ) ; } public void appendLabelText ( String text ) { labelField.setText ( labelField.getText ( ) + '' \n '' +text ) ; } } public class MainScreenUpdaterThread extends Thread { HelloWorldMainScreen mainScreen ; public MainScreenUpdaterThread ( HelloWorldMainScreen mainScreen ) { this.mainScreen = mainScreen ; } public void run ( ) { for ( int i = 0 ; i < 10 ; i++ ) { try { Thread.sleep ( 5000 ) ; } catch ( InterruptedException ex ) { } ; UiApplication.getUiApplication ( ) .invokeAndWait ( new Runnable ( ) { public void run ( ) { mainScreen.appendLabelText ( `` Update '' ) ; } } ) ; } } }
"import java.util.ArrayList ; import java.util.List ; class Column < A , T extends Object > { } public class Generics { static void main ( String [ ] args ) { Integer i = 5 ; // this works List < Column < Integer , ? > > columns1 = new ArrayList < Column < Integer , ? > > ( ) ; dump ( columns1 , i ) ; // this does n't List < Column < Integer , String > > columns2 = new ArrayList < Column < Integer , String > > ( ) ; dump ( columns2 , i ) ; } static < A , T > void dump ( Iterable < Column < A , ? > > columns , A value ) { for ( Column < A , ? > col : columns ) { System.out.println ( col ) ; } } } Generics.java:18 : < A , T > dump ( java.lang.Iterable < Column < A , ? > > , A ) in Generics can not be applied to ( java.util.List < Column < java.lang.Integer , java.lang.String > > , java.lang.Integer ) dump ( columns2 , i ) ; ^1 error"
"game name field key typed ! game name field key typed ! game name field key typed ! I/System.out : game name field key down ! I/System.out : game name field key up ! I/System.out : game name field key typed ! I/System.out : game name field key down ! I/System.out : game name field key up ! I/System.out : game name field key typed ! I/System.out : game name field key down ! I/System.out : game name field key up ! I/System.out : game name field key typed ! public class AccountScreen implements Screen { final PieTherapy game ; private Stage stage ; private TextField gameNameField ; public AccountScreen ( final PieTherapy game ) { this.game = game ; initialize ( ) ; } private void initialize ( ) { Viewport vp = new StretchViewport ( PieTherapy.WORLD_WIDTH , PieTherapy.WORLD_HEIGHT , game.cam ) ; stage = new Stage ( vp ) ; Gdx.input.setInputProcessor ( stage ) ; TextField.TextFieldStyle tfs = new TextField.TextFieldStyle ( ) ; tfs.font = game.fontTitle ; tfs.fontColor = Color.WHITE ; tfs.background = new TextureRegionDrawable ( new TextureRegion ( game.assets.get ( `` menus/textline.png '' , Texture.class ) ) ) ; tfs.focusedBackground = new TextureRegionDrawable ( new TextureRegion ( game.assets.get ( `` menus/textline-selected.png '' , Texture.class ) ) ) ; tfs.cursor = new TextureRegionDrawable ( new TextureRegion ( game.assets.get ( `` menus/cursor.png '' , Texture.class ) ) ) ; gameNameField = new TextField ( `` '' , tfs ) ; gameNameField.setWidth ( PieTherapy.WORLD_WIDTH * .80f ) ; gameNameField.setFocusTraversal ( true ) ; gameNameField.setPosition ( PieTherapy.WORLD_WIDTH *.05f , game.WORLD_HEIGHT * .68f ) ; // see if the player information has already been entered ( edit mode ) gameNameField.setText ( game.primaryPlayer.gameName ) ; gameNameField.addListener ( new InputListener ( ) { @ Override public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { System.out.println ( `` game name field touch up ! `` ) ; } @ Override public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { System.out.println ( `` game name field touch down ! `` ) ; return true ; } @ Override public boolean keyDown ( InputEvent event , int keycode ) { System.out.println ( `` game name field key down ! `` ) ; return super.keyDown ( event , keycode ) ; } @ Override public boolean keyUp ( InputEvent event , int keycode ) { System.out.println ( `` game name field key up ! `` ) ; return super.keyUp ( event , keycode ) ; } @ Override public boolean keyTyped ( InputEvent event , char character ) { System.out.println ( `` game name field key typed ! `` ) ; return super.keyTyped ( event , character ) ; } } ) ; gameNameField.getOnscreenKeyboard ( ) .show ( true ) ; gameNameField.setCursorPosition ( gameNameField.getText ( ) .length ( ) ) ; stage.addActor ( gameNameField ) ; stage.setKeyboardFocus ( gameNameField ) ; } @ Overridepublic void show ( ) { } @ Overridepublic void render ( float delta ) { Gdx.gl.glClearColor ( 0 , 0 , 0f , 1 ) ; Gdx.gl.glClear ( GL20.GL_COLOR_BUFFER_BIT ) ; game.batch.begin ( ) ; game.font.draw ( game.batch , `` Your name in the game ! You can stick with the\nautomatically generated '' + `` one or change to your own.\n Red : name is not available , `` + `` green : available . `` , PieTherapy.WORLD_WIDTH *.36f , PieTherapy.WORLD_HEIGHT *.93f ) ; game.batch.end ( ) ; update ( delta ) ; } private void update ( float delta ) { stage.act ( delta ) ; stage.draw ( ) ; game.batch.begin ( ) ; game.batch.end ( ) ; } @ Overridepublic void resize ( int width , int height ) { } @ Overridepublic void pause ( ) { } @ Overridepublic void resume ( ) { } @ Overridepublic void hide ( ) { } @ Overridepublic void dispose ( ) { } }"
"private static < T , K > Map < T , List < K > > invertedMap ( Map < K , List < T > > m ) private static < T , K > Map < T , List < K > > invertedMap ( Map < K , T > m ) { return m.keySet ( ) .stream ( ) .collect ( Collectors.groupingBy ( k - > m.get ( k ) ) ) ; }"
public void addShapeToWhiteboard ( PolyLine shape ) { Window.alert ( `` 2 '' ) ; if ( shape instanceof PolyLine ) { Window.alert ( `` 3 '' ) ; this.whiteboard.add ( ( PolyLine ) shape ) ; Window.alert ( `` 3.5 '' ) ; } this.whiteboard.draw ( ) ; Window.alert ( `` 4 '' ) ; }
"public void write ( final List < ? extends Person > persons ) throws Exception { for ( Person person : persons ) { objectMapper.writeValue ( new File ( `` D : /cp/dataTwo.json '' ) , person ) ; } }"
someStream .parallel ( ) .filter ( some_predicate ) .sequential ( ) .map ( some_mapping_function ) .terminal_operation ( ) ;
package com.company ; import java.lang.reflect.Method ; interface BarInterface { } class Bar implements BarInterface { } interface FooInterface { public BarInterface getBar ( ) ; } interface FooInterface2 extends FooInterface { public Bar getBar ( ) ; } class Foo implements FooInterface2 { public Bar getBar ( ) { throw new UnsupportedOperationException ( ) ; } } public class Main { public static void main ( String [ ] args ) { for ( Method m : FooInterface2.class.getMethods ( ) ) { System.out.println ( m ) ; } } } public abstract com.company.Bar com.company.FooInterface2.getBar ( ) public default com.company.BarInterface com.company.FooInterface2.getBar ( ) public abstract com.company.Bar com.company.FooInterface2.getBar ( ) public abstract com.company.BarInterface com.company.FooInterface.getBar ( ) class Foo2 implements FooInterface2 { public Bar getBar ( ) { throw new UnsupportedOperationException ( ) ; } } public class Main { public static void main ( String [ ] args ) { for ( Method m : Foo2.class.getMethods ( ) ) { System.out.println ( m ) ; } } } public com.company.Bar com.company.Foo2.getBar ( ) public com.company.BarInterface com.company.Foo2.getBar ( )
"options = [ ' -- strip-debug ' , ' -- compress ' , ' 2 ' , ' -- no-header-files ' , ' -- no-man-pages ' ] java.lang.ClassFormatError : Invalid constant pool index 11 for name in Record attribute in class file myproj/MyClass $ MyRecord at java.base/java.lang.ClassLoader.defineClass1 ( Native Method ) at java.base/java.lang.ClassLoader.defineClass ( Unknown Source ) at java.base/java.lang.ClassLoader.defineClass ( Unknown Source )"
"public class Pair < T , U > implements Comparable < T , U > { //Error 1 private final T first ; private final U second ; public Pair ( T first_ , U second_ ) { first = first_ ; second = second_ ; } public T getFirst ( ) { return first ; } public U getSecond ( ) { return second ; } } List < Pair < Integer , Integer > > = new ArrayList < > ( ) Error 1 : wrong number of type arguments public class SortBySecond implements Comparable < Pair < T , U > > { public int compare ( final Pair < T , U > p1 , final Pair < T , U > p2 ) //Error 2 { return t1.getSecond ( ) .compareTo ( t2.getSecond ( ) ) ; //Updated comparator } } Error 2 : Can not find symbols T , U , V"
"private static HashMap < Integer , Boolean > used = new HashMap < > ( ) ; private static int [ ] values = new int [ 0xfffff ] ; // 1/16th of possible colors private static int current = 0 , jump = values.length / 7 ; public static Color getColour ( ) { int value = values [ current ] ; used.put ( current , true ) ; current += jump ; current % = values.length ; //have some check here if all colors were used while ( used.containsKey ( current ) ) { current++ ; current % =values.length ; } return new Color ( value ) ; }"
"private static final List < Class < ? extends Annotation > > LISTENERS = Arrays.asList ( // OnCheckedChanged.class , // OnClick.class , // OnEditorAction.class , // OnFocusChange.class , // OnItemClick.class , // OnItemLongClick.class , // OnItemSelected.class , // OnLongClick.class , // OnPageChange.class , // OnTextChanged.class , // OnTouch.class // ) ;"
String s=new String ( ) ; for ( int j=0 ; j < =1000000 ; j++ ) s+=String.valueOf ( j ) ; StringBuffer sb=new StringBuffer ( ) ; for ( int j=0 ; j < =1000000 ; j++ ) sb.append ( String.valueOf ( j ) ) ;
"ArrayList < String > operands = new ArrayList < String > ( ) ; ArrayList < String > operators = new ArrayList < String > ( ) ; operands = { `` \ '' symbol\ '' : \ '' CHKP % \ '' '' , `` \ '' price\ '' : { $ gt : 23.72\ '' } ; operators = { `` and '' } ; ArrayList < String > polishNotation = { `` and '' , `` \ '' symbol\ '' : \ '' CHKP % \ '' '' , `` \ '' price\ '' : { $ gt : 23.72\ '' } ; SELECT * FROM STOCK WHERE symbol like 'FLIR % ' and price > 24.04 and price < 24.39 ; db.STOCK.find ( { `` symbol '' : `` FLIR % '' , `` price '' : { `` $ gt '' : 24.04 , `` $ lt '' : 24.39 } }"
"import java.util.List ; import java.util.stream.Collectors ; import java.util.stream.Stream ; public class Instance { int member ; Instance set ( int value ) { this.member = value ; return this ; } @ Override public String toString ( ) { return member + `` '' ; } public static void main ( String [ ] args ) { Stream < Integer > stream1 = Stream.of ( 1 , 2 , 3 , 4 ) ; Stream < Integer > stream2 = Stream.of ( 1 , 2 , 3 , 4 ) ; List < Instance > collect1 = stream1.map ( i - > new Instance ( ) .set ( i ) ) .collect ( Collectors.toList ( ) ) ; List < Instance > collect2 = stream2.map ( new Instance ( ) : :set ) .collect ( Collectors.toList ( ) ) ; System.out.println ( collect1 ) ; System.out.println ( collect2 ) ; } } [ 1 , 2 , 3 , 4 ] [ 4 , 4 , 4 , 4 ]"
"// This is the ☺ characterString toSave = `` \u263A '' ; int id = 123 ; // Saves to DatabasemyComponent.save ( id , toSave ) ; // Retrieve from DatabaseString fromComponent = myComponent.retrieve ( id ) ; // Verify they are same org.junit.Assert.assertEquals ( toSave , fromComponent ) ;"
"Map < String , String > params = new HashMap < String , String > ( ) { { put ( `` param1 '' , `` value1 '' ) ; put ( `` param2 '' , `` value2 '' ) ; } } ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( outputFile ) ) ; oos.writeObject ( params ) ; Map < String , String > params = new HashMap < String , String > ( ) ; params.put ( `` param1 '' , `` value1 '' ) ; params.put ( `` param2 '' , `` value2 '' ) ;"
public String toString ( ) { try { return getX ( ) + `` \n '' getY ( ) + `` \n '' getZ ( ) ; //etc . } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
"interface Root { } interface Middle extends Root { } class Type implements Root { } class Subtype1 extends Type implements Middle { } class Subtype2 extends Type implements Middle { } ... class Handler < T extends Root , S extends T , S extends Middle > ; class Handler < T extends Root , S extends < T extends Middle > > ;"
"interface List < E > { public int size ( ) ; default public boolean isEmpty ( ) { return ( size ( ) == 0 ) ; } //more list operations } interface Deque < E > { public int size ( ) ; default public boolean isEmpty ( ) { return ( size ( ) == 0 ) ; } //more deque operations } class LinkedList < E > implements List < E > , Deque < E > { private int size ; @ Override public int size ( ) { return size ; } } @ Overridepublic boolean isEmpty ( ) { return List.super.isEmpty ( ) ; } interface Sizable { public int size ( ) ; default public boolean isEmpty ( ) { return ( size ( ) == 0 ) ; } } interface List < E > extends Sizable { //list operations } interface Deque < E > extends Sizable { //deque operations } class LinkedList < E > implements List < E > , Deque < E > { private int size ; @ Override public int size ( ) { return size ; } }"
"5,5,5,6,5,8,9,5,6,8 , good , very good , excellent , good7,7,8,7,6,7,8,8,9,7 , very good , Good , excellent , very good8,7,6,7,8,7,5,6,8,7 , GOOD , VERY GOOD , GOOD , AVERAGE9,9,9,8,9,7,9,8,9,9 , Excellent , very good , very good , excellent7,8,8,7,8,7,8,9,6,8 , very good , good , excellent , excellent6,5,6,4,5,6,5,6,6,6 , good , average , good , good7,8,7,7,6,8,7,8,6,6 , good , very good , good , very good5,7,6,7,6,7,6,7,7,7 , excellent , very good , very good , very good 5 5 5 6 5 8 9 5 6 8 good , very good , excellent , good7 7 8 7 6 7 8 8 9 7 very good , Good , excellent , very good8 7 6 7 8 7 5 6 8 7 GOOD , VERY GOOD , GOOD , AVERAGE9 9 9 8 9 7 9 8 9 9 Excellent , very good , very good , excellent7 8 8 7 8 7 8 9 6 8 very good , good , excellent , excellent6 5 6 4 5 6 5 6 6 6 good , average , good , good7 8 7 7 6 8 7 8 6 6 good , very good , good , very good5 7 6 7 6 7 6 7 7 7 excellent , very good , very good , very good"
private static volatile byte counter = 0 ; public static byte getCounter ( ) { return counter ; }
PersistenceManager pm = PMF.get ( ) .getPersistenceManager ( ) ; try { pm.makePersistent ( c ) ; } finally { pm.close ( ) ; }
< project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > wonttellya < /groupId > < artifactId > wonttellya < /artifactId > < version > 1.0-SNAPSHOT < /version > < packaging > jar < /packaging > < dependencies > ... < /dependency > < /dependencies > < build > < plugins > < plugin > < artifactId > maven-eclipse-plugin < /artifactId > < version > 2.10 < /version > < configuration > < pde > true < /pde > < /configuration > < /plugin > < /plugins > < /build > < /project > C : \Users\user\git\wonttellya\mvn eclipse : eclipse -Declipse.workspace=C : \Users\user\workspace2 ... Using Eclipse Workspace : C : \Users\user\workspace2 ... BUILD SUCCESS
"s = new Solver ( `` Solver '' ) ; vs = VF.boolArray ( `` vs '' , nbV , s ) ; es = VF.boolArray ( `` es '' , nbE , s ) ; w = VF.integer ( `` w '' , 0 , maxW , s ) ; IntVar [ ] activeEdgeW = new IntVar [ nbE ] ; for ( int i = 0 ; i < nbE ; i++ ) { activeEdgeW [ i ] = VF.enumerated ( `` activeEdgeW [ `` +i+ '' ] '' , new int [ ] { 0 , ws [ i ] } , s ) ; //Weight is either 0 or ws [ i ] ICF.arithm ( activeEdgeW [ i ] , `` = '' , ws [ i ] ) .reifyWith ( es [ i ] ) ; //weight of edge is ws [ i ] if edge is in , 0 otherwise } UndirectedGraph UB = new UndirectedGraph ( s , nbV , SetType.BITSET , false ) ; UndirectedGraph LB = new UndirectedGraph ( s , nbV , SetType.BITSET , false ) ; //Building upper bound graph : has all nodes and edges for ( int i = 0 ; i < nbV ; i++ ) { UB.addNode ( i ) ; } for ( int i = 0 ; i < nbE ; i++ ) { UB.addEdge ( endnodes [ i ] [ 0 ] , endnodes [ i ] [ 1 ] ) ; } //Building lower bound graph . Must contain Steiner nodes for ( int i = 0 ; i < nbT ; i++ ) { LB.addNode ( terminals [ i ] ) ; } g = GraphVarFactory.undirected_graph_var ( `` Solution '' , LB , UB , s ) ; s.post ( GCF.tree ( g ) ) ; s.post ( ICF.sum ( activeEdgeW , w ) ) ; s.post ( GCF.nodes_channeling ( g , vs ) ) ; for ( int i = 0 ; i < nbE ; i++ ) { s.post ( GCF.edge_channeling ( g , es [ i ] , endnodes [ i ] [ 0 ] , endnodes [ i ] [ 1 ] ) ) ; } s.plugMonitor ( ( IMonitorSolution ) ( ) - > output ( ) ) ; s.findOptimalSolution ( ResolutionPolicy.MINIMIZE , w ) ;"
if ( extension.equals ( `` jpg '' ) || extension.equals ( `` JPG '' ) || extension.equals ( `` png '' ) || extension.equals ( `` PNG '' ) || extension.equals ( `` bmp '' ) || extension.equals ( `` BMP '' ) || extension.equals ( `` jpeg '' ) || extension.equals ( `` JPEG '' ) ) { tmp.setIcon ( new ImageIcon ( getClass ( ) .getResource ( `` /menage/Resources/imageIco.png '' ) ) ) ; } if ( extension.equals ( ( `` jpg '' ) || ( `` JPG '' ) || ( `` png '' ) || ( `` PNG '' ) || ( `` bmp '' ) || ( `` BMP '' ) || ( `` jpeg '' ) || ( `` JPEG '' ) ) ) { tmp.setIcon ( new ImageIcon ( getClass ( ) .getResource ( `` /menage/Resources/imageIco.png '' ) ) ; ) }
"public class code { public static void main ( String [ ] args ) { System.out.println ( `` Hello , World '' ) ; } } import java.io.IOException ; import java.io.InputStream ; public class compiler { public static void main ( String [ ] args ) { final String dosCommand = `` cmd /c java code '' ; final String location = `` D : \\ '' ; try { final Process process = Runtime.getRuntime ( ) .exec ( dosCommand + `` `` + location ) ; final InputStream in = process.getInputStream ( ) ; int ch ; while ( ( ch = in.read ( ) ) ! = -1 ) { System.out.print ( ( char ) ch ) ; } } catch ( IOException e ) { e.printStackTrace ( ) ; } } }"
import PackageOrTypeName . * ;
"< T > T notUsedRandomItem ( List < T > allItems , List < T > usedItems ) { return allItems.stream ( ) .filter ( item - > ! usedItems.contains ( item ) ) .sorted ( ( o1 , o2 ) - > new Random ( ) .nextInt ( 2 ) - 1 ) .findFirst ( ) .orElseThrow ( ( ) - > new RuntimeException ( `` Did not find item ! `` ) ) ; } System.out.println ( notUsedRandomItem ( Arrays.asList ( 1 , 2 , 3 , 4 ) , Arrays.asList ( 1 , 2 ) ) ) ; // Should print either 3 or 4 import java.util . * ; import java.util.concurrent.TimeUnit ; import java.util.function.BiFunction ; import java.util.stream.Collectors ; import java.util.stream.IntStream ; import static java.util.stream.Collectors.toList ; class Functions { < T > T notUsedRandomItemOriginal ( List < T > allItems , List < T > usedItems ) { return allItems.stream ( ) .filter ( item - > ! usedItems.contains ( item ) ) .sorted ( ( o1 , o2 ) - > new Random ( ) .nextInt ( 2 ) - 1 ) .findFirst ( ) .orElseThrow ( ( ) - > new RuntimeException ( `` Did not find item ! `` ) ) ; } < T > T notUsedRandomItemByAominè ( List < T > allItems , List < T > usedItems ) { List < T > distinctItems = allItems.stream ( ) .filter ( item - > ! usedItems.contains ( item ) ) .collect ( toList ( ) ) ; if ( distinctItems.size ( ) == 0 ) throw new RuntimeException ( `` Did not find item ! `` ) ; return distinctItems.get ( new Random ( ) .nextInt ( distinctItems.size ( ) ) ) ; } < T > T notUsedRandomItemByEugene ( List < T > allItems , List < T > usedItems ) { // this is only needed because your input List might not support removeAll List < T > left = new ArrayList < > ( allItems ) ; List < T > right = new ArrayList < > ( usedItems ) ; left.removeAll ( right ) ; return left.get ( new Random ( ) .nextInt ( left.size ( ) ) ) ; } < T > T notUsedRandomItemBySchaffner ( List < T > allItems , List < T > usedItems ) { Set < T > used = new HashSet < > ( usedItems ) ; List < T > all = new ArrayList < > ( allItems ) ; Collections.shuffle ( all ) ; for ( T item : all ) if ( ! used.contains ( item ) ) return item ; throw new RuntimeException ( `` Did not find item ! `` ) ; } } public class ComparingSpeedOfNotUsedRandomItemFunctions { public static void main ( String [ ] plaa ) { runFunctionsWith ( 100 ) ; runFunctionsWith ( 1000 ) ; runFunctionsWith ( 10000 ) ; runFunctionsWith ( 100000 ) ; runFunctionsWith ( 200000 ) ; } static void runFunctionsWith ( int itemCount ) { TestConfiguration testConfiguration = new TestConfiguration ( ) ; Functions functions = new Functions ( ) ; System.out.println ( `` Function execution time with `` + itemCount + `` items ... '' ) ; System.out.println ( `` Schaffner : `` + testConfiguration.timeSpentForFindingNotUsedPeople ( itemCount , ( allPeople , usedPeople ) - > functions.notUsedRandomItemBySchaffner ( allPeople , usedPeople ) ) ) ; System.out.println ( `` Eugene : `` + testConfiguration.timeSpentForFindingNotUsedPeople ( itemCount , ( allPeople , usedPeople ) - > functions.notUsedRandomItemByEugene ( allPeople , usedPeople ) ) ) ; System.out.println ( `` Aominè : `` + testConfiguration.timeSpentForFindingNotUsedPeople ( itemCount , ( allPeople , usedPeople ) - > functions.notUsedRandomItemByAominè ( allPeople , usedPeople ) ) ) ; System.out.println ( `` Original : `` + testConfiguration.timeSpentForFindingNotUsedPeople ( itemCount , ( allPeople , usedPeople ) - > functions.notUsedRandomItemOriginal ( allPeople , usedPeople ) ) ) ; } } class TestConfiguration { Long timeSpentForFindingNotUsedPeople ( int numberOfPeople , BiFunction < List < Person > , List < Person > , Person > function ) { ArrayList < Person > people = new ArrayList < > ( ) ; IntStream.range ( 1 , numberOfPeople ) .forEach ( i - > people.add ( new Person ( ) ) ) ; Collections.shuffle ( people ) ; List < Person > halfOfPeople = people.stream ( ) .limit ( numberOfPeople / 2 ) .collect ( Collectors.toList ( ) ) ; Collections.shuffle ( halfOfPeople ) ; long before = System.nanoTime ( ) ; Person foundItem = function.apply ( people , halfOfPeople ) ; long after = System.nanoTime ( ) ; // Return -1 if function do not return valid answer if ( halfOfPeople.contains ( foundItem ) ) return ( long ) -1 ; return TimeUnit.MILLISECONDS.convert ( after - before , TimeUnit.NANOSECONDS ) ; } class Person { public final String name = UUID.randomUUID ( ) .toString ( ) ; @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) ! = o.getClass ( ) ) return false ; Person person = ( Person ) o ; return name ! = null ? name.equals ( person.name ) : person.name == null ; } @ Override public int hashCode ( ) { return name ! = null ? name.hashCode ( ) : 0 ; } } } Function execution time with 100 items ... Schaffner : 0Eugene : 1Aominè : 2Original : 5Function execution time with 1000 items ... Schaffner : 0Eugene : 14Aominè : 13Original : 5Function execution time with 10000 items ... Schaffner : 2Eugene : 564Aominè : 325Original : 348Function execution time with 20000 items ... Schaffner : 3Eugene : 1461Aominè : 1418Original : 1433Function execution time with 30000 items ... Schaffner : 3Eugene : 4616Aominè : 2832Original : 4567Function execution time with 40000 items ... Schaffner : 4Eugene : 10889Aominè : 4903Original : 10394"
String resName = `` /dev/classes/ '' +name+ '' .java '' Scanner s = new Scanner ( FilePrinter.class.getResourceAsStream ( resName ) ) ;
"Input17 31 22 13 24 35 16 27 48 29 310 411 215 216 117 318 319 120 2Output11 3Explanation : first shield : 1,2,3 second shield : 7,8,9,10third shield : 15,16,17,18"
"public static void truncate ( File file , long size ) throws IOException { FileChannel channel ; Path path ; long channelSize , fileLengthOpen , fileLengthClosed ; path = file.toPath ( ) ; channel = FileChannel.open ( path , StandardOpenOption.READ , StandardOpenOption.WRITE , StandardOpenOption.CREATE ) ; try { channel.truncate ( size ) ; channelSize = channel.size ( ) ; fileLengthOpen = file.length ( ) ; } finally { channel.close ( ) ; } fileLengthClosed = file.length ( ) ; if ( ( channelSize ! = size ) || ( fileLengthOpen ! = size ) || ( fileLengthClosed ! = size ) ) throw new IOException ( `` The channel size or file length does not match the truncate size . Channel : `` + channelSize + `` - Open File : `` + fileLengthOpen + `` - Closed File : `` + fileLengthClosed + `` - Truncate : `` + size ) ; }"
String file = @ '' C : \filename.txt '' String file = `` C : \\filename.txt ''
A / \ / \ C B
"private BorderPane layout ; private Scene scene ; ObservableList < PieChart.Data > pieChartData = FXCollections.observableArrayList ( new PieChart.Data ( `` Post-production age '' , 424236 ) , new PieChart.Data ( `` Production age '' , 1030060 ) , new PieChart.Data ( `` Production age2 '' , 1030060 ) , new PieChart.Data ( `` Production age3 '' , 1030060 ) , new PieChart.Data ( `` Pre-production age '' , 310319 ) ) ; PieChart chart = new PieChart ( pieChartData ) ; @ Override public void start ( Stage stage ) { layout = new BorderPane ( ) ; scene = new Scene ( layout,720,480 ) ; stage.setTitle ( `` People '' ) ; stage.setWidth ( 500 ) ; stage.setHeight ( 500 ) ; Button button = new Button ( ) ; button.setText ( `` rotate '' ) ; layout.setBottom ( button ) ; layout.setCenter ( chart ) ; button.setOnAction ( e - > { rotate ( ) ; } ) ; chart.setStartAngle ( 90 ) ; chart.setTitle ( `` Economical age groups '' ) ; stage.setScene ( scene ) ; stage.show ( ) ; } public void rotate ( ) { ObservableList < PieChart.Data > pieChartDataTemp = pieChartData ; int sizeOne = pieChartDataTemp.size ( ) ; PieChart.Data tempData = pieChartDataTemp.get ( sizeOne-1 ) ; pieChartDataTemp.add ( 0 , tempData ) ; if ( pieChartDataTemp.size ( ) > sizeOne ) pieChartDataTemp.remove ( pieChartDataTemp.size ( ) -1 ) ; PieChart chartTemp = new PieChart ( pieChartDataTemp ) ; layout.setCenter ( chartTemp ) ; chartTemp.setStartAngle ( 90 ) ; } Exception in thread `` JavaFX Application Thread '' java.lang.IllegalArgumentException : Children : duplicate children added : parent = Chart $ 1 @ 5cfeee33 [ styleClass=chart-content ] at javafx.graphics/javafx.scene.Parent $ 3.onProposedChange ( Parent.java:558 ) at javafx.base/com.sun.javafx.collections.VetoableListDecorator.add ( VetoableListDecorator.java:206 ) at javafx.controls/javafx.scene.chart.PieChart.dataItemAdded ( PieChart.java:417 ) at javafx.controls/javafx.scene.chart.PieChart.lambda $ new $ 0 ( PieChart.java:168 ) at javafx.base/com.sun.javafx.collections.ListListenerHelper $ SingleChange.fireValueChangedEvent ( ListListenerHelper.java:164 ) at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent ( ListListenerHelper.java:73 ) at javafx.base/javafx.collections.ObservableListBase.fireChange ( ObservableListBase.java:233 ) at javafx.base/javafx.collections.ListChangeBuilder.commit ( ListChangeBuilder.java:482 ) at javafx.base/javafx.collections.ListChangeBuilder.endChange ( ListChangeBuilder.java:541 ) at javafx.base/javafx.collections.ObservableListBase.endChange ( ObservableListBase.java:205 ) at javafx.base/javafx.collections.ModifiableObservableListBase.add ( ModifiableObservableListBase.java:155 ) at task.Main.rotate ( Main.java:54 ) at task.Main.lambda $ start $ 0 ( Main.java:39 ) ( ... and so on )"
"byte [ ] ref = { 0x71 , 0 , 0x7e , 0 , 5 } ; // Ref # 5 import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.io.ObjectInputStream ; import java.io.ObjectOutputStream ; import java.util.Date ; final class Period { private final Date start ; private final Date end ; /** * @ param start the beginning of the period * @ param end the end of the period ; must not precede start * @ throws IllegalArgumentException * if start is after end * @ throws NullPointerException if start or end is null */ public Period ( Date start , Date end ) { this.start = new Date ( start.getTime ( ) ) ; this.end = new Date ( end.getTime ( ) ) ; if ( this.start.compareTo ( this.end ) > 0 ) throw new IllegalArgumentException ( start + `` after `` + end ) ; } public Date start ( ) { return new Date ( start.getTime ( ) ) ; } public Date end ( ) { return new Date ( end.getTime ( ) ) ; } public String toString ( ) { return start + `` - `` + end ; } // Remainder omitted } public class MutablePeriod { // A period instance public final Period period ; // period 's start field , to which we should n't have access public final Date start ; // period 's end field , to which we should n't have access public final Date end ; public MutablePeriod ( ) { try { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( bos ) ; // Serialize a valid Period instance out.writeObject ( new Period ( new Date ( ) , new Date ( ) ) ) ; /* * Append rogue `` previous object refs '' for internal * Date fields in Period . For * details , see `` Java Object Serialization Specification , '' Section 6.4 . */ byte [ ] ref = { 0x71 , 0 , 0x7e , 0 , 5 } ; // Ref # 5 bos.write ( ref ) ; // The start field ref [ 4 ] = 4 ; // Ref # 4 bos.write ( ref ) ; // The end field // Deserialize Period and `` stolen '' Date references ObjectInputStream in = new ObjectInputStream ( new ByteArrayInputStream ( bos.toByteArray ( ) ) ) ; period = ( Period ) in.readObject ( ) ; start = ( Date ) in.readObject ( ) ; end = ( Date ) in.readObject ( ) ; } catch ( Exception e ) { throw new AssertionError ( e ) ; } } }"
"FirefoxProfile profile = new FirefoxProfile ( profileDir ) ; if ( ! exists ) { profile.setPreference ( `` signed.applets.codebase_principal_support '' , true ) ; profile.setPreference ( `` capability.principal.codebase.p0.granted '' , true ) ; profile.setPreference ( `` startup.homepage_override_url '' , `` about : blank '' ) ; profile.setPreference ( `` browser.startup.homepage_override.mstone '' , `` 'ignore ' '' ) ;"
"@ Overridepublic long readBytes ( final byte [ ] out , final int offset , final int count , final int bits ) { final int total = offset + count ; assert out ! = null ; assert total < = out.length ; final long startPosition = position ( ) ; for ( int i = offset ; i < total ; i++ ) { out [ i ] = readByte ( bits ) ; } return position ( ) - startPosition ; } @ Overridepublic long readShorts ( final short [ ] out , final int offset , final int count , final int bits ) { final int total = offset + count ; assert out ! = null ; assert total < = out.length ; final long startPosition = position ( ) ; for ( int i = offset ; i < total ; i++ ) { out [ i ] = readShort ( bits ) ; } return position ( ) - startPosition ; }"
public static boolean isEmpty ( Object test ) { if ( test==null ) { return true ; } if ( test.getClass ( ) .isArray ( ) ) { // ? ? ? } if ( test instanceof String ) { String s= ( String ) test ; return s== '' '' ; } if ( test instanceof Collection ) { Collection c= ( Collection ) test ; return c.size ( ) ==0 ; } return false ; }
public class GenericsTest { interface Iface { } enum E1 implements Iface { } enum E2 implements Iface { } < E extends Enum < E > & Iface > Class < E > getEnum1 ( ) { return E1.class ; //ERROR incompatible types : java.lang.Class < GenericsTest.E1 > can not be converted to java.lang.Class < E > } Class < ? extends Enum < ? > > getEnum3 ( ) { return E1.class ; //OK } Class < ? extends Iface > getEnum4 ( ) { return E1.class ; //OK } < E extends Enum < E > & Iface > void enumParam ( Class < E > p ) { enumParam ( E1.class ) ; //OK } }
class FinalFieldExample { final int x ; int y ; static FinalFieldExample f ; public FinalFieldExample ( ) { x = 3 ; y = 4 ; } static void writer ( ) { f = new FinalFieldExample ( ) ; } static void reader ( ) { if ( f ! = null ) { int i = f.x ; // guaranteed to see 3 int j = f.y ; // could see 0 } } }
public class XYZ { public int val= ... }
long oneBillion = 1_000_000_000L ;
"public class App { public static void main ( String [ ] args ) { ArrayList < Entity > entities = new ArrayList < > ( ) ; long nextPositionOrFirstIfNotExistWhenEmpty = getNextPositionOrFirstIfNotExist ( entities ) ; if ( nextPositionOrFirstIfNotExistWhenEmpty ! = 0L ) { throw new RuntimeException ( `` Invalid '' ) ; } entities.add ( new Entity ( 2L ) ) ; entities.add ( new Entity ( 123L ) ) ; entities.add ( new Entity ( 3L ) ) ; long nextPositionOrFirstIfNotExist = getNextPositionOrFirstIfNotExist ( entities ) ; if ( nextPositionOrFirstIfNotExist ! = 124L ) { throw new RuntimeException ( `` Invalid '' ) ; } } // how to refactoring this ? not like `` optionalLong.isPresent ( ) '' public static long getNextPositionOrFirstIfNotExist ( List < Entity > entities ) { OptionalLong optionalLong = entities.stream ( ) .mapToLong ( Entity : :getPositionInList ) .max ( ) ; return optionalLong.isPresent ( ) ? optionalLong.getAsLong ( ) + 1 : 0L ; } } class Entity { public Entity ( Long positionInList ) { this.positionInList = positionInList ; } private Long positionInList ; public Long getPositionInList ( ) { return positionInList ; } public void setPositionInList ( Long positionInList ) { this.positionInList = positionInList ; } } long value = entities.stream ( ) .mapToLong ( Entity : :getPositionInList ) .max ( ) .map ( i - > i + 1 ) // it 's not work , just what i want .orElse ( 0L ) ;"
Method [ ] getMethods ( Class < ? > c ) Class.getMethods ( )
"public class Student { private String name ; private List < String > subjects ; //getters and setters } Student stud1 = new Student ( `` John '' , Arrays.asList ( `` Math '' , `` Chemistry '' ) ) ; Student stud2 = new Student ( `` Peter '' , Arrays.asList ( `` Math '' , `` History '' ) ) ; Student stud3 = new Student ( `` Antony '' , Arrays.asList ( `` Music '' , `` History '' , `` English '' ) ) ; Stream < Student > studentStream = Stream.of ( stud1 , stud2 , stud3 ) ; Collector < Student , Map < String , Set < String > > , List < String > > studentsCollector = Collector.of ( HashMap : :new , ( container , student ) - > student.getSubjects ( ) .forEach ( subject - > container .computeIfAbsent ( subject , s - > new HashSet < > ( ) ) .add ( student.getName ( ) ) ) , ( c1 , c2 ) - > c1 , container - > container.entrySet ( ) .stream ( ) .filter ( e - > e.getValue ( ) .size ( ) == 1 ) .map ( e - > e.getValue ( ) .iterator ( ) .next ( ) ) .distinct ( ) .collect ( Collectors.toList ( ) ) ) ; List < String > studentNames = studentStream.collect ( studentsCollector ) ;"
"int add ( int x , int y ) { while ( y ! = 0 ) { int carry = x & y ; x = x ^ y ; y = carry < < 1 ; } return x ; }"
public class foo { private int i ; public foo ( int i ) { this.i = i ; // where this reference came from } }
"public interface MyInterface < T > { void run ( T e ) ; } public class MyClass1 implements MyInterface < SomeOtherClass1 > { public void run ( SomeOtherClass1 e ) { // do some stuff with e } } public class MyClass2 implements MyInterface < SomeOtherClass2 > { public void run ( SomeOtherClass2 e ) { // do some stuff with e } } public enum MyEnum { MY_CLASS_1 , MY_CLASS_2 ; } public enum MyEnum { MY_CLASS_1 ( new MyClass1 ( ) ) , MY_CLASS_2 ( new MyClass2 ( ) ) ; private MyInterface < ? > instance ; private MyEnum ( MyInterface < ? > instance ) { this.instance = instance ; } public void run ( /* WhichType ? */ e ) { instance.run ( e ) ; } } public void run ( Object e ) { instance.run ( e ) ; // ^^^ // The method run ( capture # 3-of ? ) in the type MyInterface < capture # 3-of ? > is not applicable for the arguments ( Object ) } public enum MyEnum { MY_CLASS_1 { /* any method , etc . */ } , MY_CLASS_2 { /* any method , etc . */ } , }"
public interface Executer < T > { void execute ( T object ) ; } class Handler < T > implements Executer < T > { List < Executer < T > > executerList ; Handler ( List < Executer < T > > executer ) { this.executerList = executer ; } void execute ( T t ) { for ( Executer < T > executer : this.executerList ) { executer.execute ( t ) ; } } }
int [ ] counterarray = new int [ 10 ] ; for ( x = 14 ; x > = 0 ; x -- ) { System.out.println ( anArray [ x ] ) ; if ( anArray [ x ] > = 0 & & anArray [ x ] < 10 ) { counterarray [ 0 ] = counterarray [ 0 ] + 1 ; } if ( anArray [ x ] > = 10 & & anArray [ x ] < 20 ) { counterarray [ 1 ] = counterarray [ 1 ] + 1 ; } if ( anArray [ x ] > = 20 & & anArray [ x ] < 30 ) { counterarray [ 2 ] = counterarray [ 2 ] + 1 ; } if ( anArray [ x ] > = 30 & & anArray [ x ] < 40 ) { counterarray [ 3 ] = counterarray [ 3 ] + 1 ; } if ( anArray [ x ] > = 40 & & anArray [ x ] < 50 ) { counterarray [ 4 ] = counterarray [ 4 ] + 1 ; } if ( anArray [ x ] > = 50 & & anArray [ x ] < 60 ) { counterarray [ 5 ] = counterarray [ 5 ] + 1 ; } if ( anArray [ x ] > = 60 & & anArray [ x ] < 70 ) { counterarray [ 6 ] = counterarray [ 6 ] + 1 ; } if ( anArray [ x ] > = 70 & & anArray [ x ] < 80 ) { counterarray [ 7 ] = counterarray [ 7 ] + 1 ; } if ( anArray [ x ] > = 80 & & anArray [ x ] < 90 ) { counterarray [ 8 ] = counterarray [ 8 ] + 1 ; } if ( anArray [ x ] > = 90 & & anArray [ x ] < 101 ) { counterarray [ 9 ] = counterarray [ 9 ] + 1 ; } } System.out.println ( `` counterarray [ 0 ] is `` +counterarray [ 0 ] ) ; System.out.println ( `` counterarray [ 1 ] is `` +counterarray [ 1 ] ) ; System.out.println ( `` counterarray [ 2 ] is `` +counterarray [ 2 ] ) ; System.out.println ( `` counterarray [ 3 ] is `` +counterarray [ 3 ] ) ; System.out.println ( `` counterarray [ 4 ] is `` +counterarray [ 4 ] ) ; System.out.println ( `` counterarray [ 5 ] is `` +counterarray [ 5 ] ) ; System.out.println ( `` counterarray [ 6 ] is `` +counterarray [ 6 ] ) ; System.out.println ( `` counterarray [ 7 ] is `` +counterarray [ 7 ] ) ; System.out.println ( `` counterarray [ 8 ] is `` +counterarray [ 8 ] ) ; System.out.println ( `` counterarray [ 9 ] is `` +counterarray [ 9 ] ) ;
"JungleCat cat1 = new JungleCat ( ) ; Cat cat2 = new Cat ( ) ; Cat cat3 = new JungleCat ( ) ; JungleCat cat4 = new Cat ( ) ; //this one is illegal , right ? JungleCat cat5 ;"
public getHeightInMeters ( Object object ) { return object.getHeight ( ) *x ; } public getHeightInMeters ( Height height ) { return height*x ; }
public interface TestInterface < T > { public List < String > testMethod ( ) ; // < -- List < String > } public class TestClass implements TestInterface { @ Override public List < Integer > testMethod ( ) { // < -- List < Integer > overriding List < String > ! ! return Collections.singletonList ( 1 ) ; } } public void test ( ) { TestInterface < Boolean > test = new TestClass ( ) ; List < String > strings = test.testMethod ( ) ; for ( String s : strings ) { System.out.println ( s ) ; } }
void sell ( List < T > items ) { for ( T e : items ) { stock.add ( e ) ; } } void sell ( Collection < ? super T > items ) { Iterator ir = items.iterator ( ) ; while ( ir.hasNext ( ) ) { stock.add ( ( T ) ir.next ( ) ) ; } } Note : Shop.java uses unchecked or unsafe operations.Note : Recompile with -Xlint : unchecked for details .
Thread 1 Thread 2 -- -- -- -- -- -- -- -- r2 = A ; r1 = B ; B = 1 ; A = 2 ; Thread 1 Thread 2 -- -- -- -- -- -- -- -- B = 1 ; r1 = B ; A = 2 ; r2 = A ; Thread 1 Thread 2 -- -- -- -- -- -- -- -- r2 = A ; r1 = B ; monitorenter obj monitorenter objmonitorexit obj monitorexit objB = 1 ; A = 2 ;
"JVM intrinsics note : It would be possible to use a release-onlyform of CAS here , if it were provided ."
Semaphore lock = new Semaphore ( 0 ) ; try { lock.acquire ( ) ; } finally { // do something }
The local variable result may not have been initialized .
var result = getA ( ) || getB ( ) || getC ( ) || 'all of them were undefined ! ' ;
"public class Foo { public Foo ( boolean a , int b ) { if ( a == true & & a ! = false ) { b = 1 ; } } } if ( a == true ) { } Compiled from `` Foo.java '' public class Foo { public Foo ( boolean , int ) ; Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object . `` < init > '' : ( ) V 4 : iload_1 5 : iconst_1 6 : if_icmpne 15 9 : iload_1 10 : ifeq 15 13 : iconst_1 14 : istore_2 15 : return }"
public class Bar { public void foo ( ) { } } public class FooBar extends Bar { @ Override public void foo ( ) { super.foo ( ) ; // < -- Line in question } } public abstract class Bar { public Bar ( Class < ? extends Bar > cls ) { Object instance = getInstance ( ) ; if ( ! instance.getClass ( ) .equals ( cls ) ) { throw new EntityException ( `` The instance given does not match the class given . `` ) ; } //Find the method here if it has been overriden then throw an exception //If the super method is n't being called in that method } public abstract Object getInstance ( ) ; public void foo ( ) { } } public class FooBar extends Bar { public FooBar ( ) { super ( FooBar.class ) ; } @ Override public Object getInstance ( ) { return this ; } @ Override public void foo ( ) { super.foo ( ) ; } }
"List < Collection > raws = new ArrayList < Collection > ( ) ; List < Collection < ? > > c = raws ; // error List < Integer > ints = new ArrayList < Integer > ( ) ; List < Number > nums = ints ; // compile-time errornums.add ( Double.valueOf ( 1.2 ) ) ; Integer i = ints.get ( 0 ) ; // ClassCastException List < Collection > rawLists = new ArrayList < Collection > ( ) ; List < Collection < ? > > wildLists = rawLists ; // compile-time error// scenario 1 : add to raw and get from wildrawLists.add ( new ArrayList < Integer > ( ) ) ; Collection < ? > c1 = wildLists.get ( 0 ) ; Object o1 = c1.iterator ( ) .next ( ) ; // scenario 2 : add to wild and get from rawwildLists.add ( new ArrayList < String > ( ) ) ; Collection c2 = rawLists.get ( 0 ) ; Object o2 = c2.iterator ( ) .next ( ) ; public Collection < T > readJsons ( List < String > jsons , Class < T > clazz ) { List < T > list = new ArrayList < T > ( ) ; for ( String json : jsons ) { T elem = jsonMapper.readAs ( json , clazz ) ; list.add ( elem ) ; } return list ; } // call siteList < GenericFoo < ? > > foos = readJsons ( GenericFoo.class ) ; // error"
"Set < Product > getallProducts ( ) { Product p = getProduct ( brand , price ) ; Product p1 = getProduct ( brand , price , location ) ; Product p2 = getProduct ( brand , price , qty ) ; Set < SuperProducts > superProducts = new HashSet < > ; if ( p ! =null ) { SuperProduct sp = getSuperProduct ( p ) superProducts.add ( sp ) } if ( p1 ! =null ) { SuperProduct sp1 = getSuperProduct ( p1 ) superProducts.add ( sp ) } if ( p2 ! =null ) { SuperProduct sp2 = getSuperProduct ( p2 ) superProducts.add ( sp2 ) } } List < Product > products = new ArrayList < > ( ) : products.add ( p ) ; products.add ( p1 ) ; products.add ( p2 ) ; and for ( Product p : products ) { // and adding to superProducts }"
"public abstract class BaseClass < T extends FirstClass , U extends BaseAnother < ? extends SecondClass > > {"
"import java.util.PriorityQueue ; public class Test { public static void main ( String argv [ ] ) { PriorityQueue < A > queue = new PriorityQueue < > ( ) ; System.out.println ( `` Size of queue is `` + queue.size ( ) ) ; // prints 0 queue.add ( new A ( ) ) ; // does not throw an exception try { queue.add ( new A ( ) ) ; // this time , an exception is thrown } catch ( ClassCastException ignored ) { System.out.println ( `` An exception was thrown '' ) ; } System.out.println ( `` Size of queue is `` + queue.size ( ) ) ; // prints 2 } } class A { } // non-comparable object"
class TestExceptions { public static void main ( String [ ] args ) throws Exception { try { System.out.println ( `` try '' ) ; throw new Exception ( ) ; } catch ( Exception e ) { System.out.println ( `` catch '' ) ; throw new RuntimeException ( ) ; } finally { System.out.println ( `` finally '' ) ; } } } trycatchException in thread `` main '' finallyjava.lang.RuntimeException at TestExceptions.main ( TestExceptions.java:9 ) Exception in thread `` main '' trycatchjava.lang.RuntimeException at TestExceptions.main ( TestExceptions.java:9 ) finally
layout_width= '' wrap_content '' layout_height= '' wrap_content '' layout_width= '' 48dp '' layout_height= '' 48dp ''
class TestClass { int i = getInt ( ) ; int k = 20 ; public int getInt ( ) { return k+1 ; } public static void main ( String [ ] args ) { TestClass t = new TestClass ( ) ; System.out.println ( t.i+ '' `` +t.k ) ; } }
Connection conn = null ; try { ... .. Do the normal JDBC thing here ... . } catch ( SQLException se ) { if ( conn ! = null ) { conn.close ( ) ; } }
package foo ; public class Foo { public static void main ( String [ ] args ) throws Exception { int [ ] arr = new int [ Integer.MAX_VALUE-2 ] ; Thread.sleep ( 500000L ) ; } } $ java -Xmx12000m -cp ./ foo.FooException in thread `` main '' java.lang.OutOfMemoryError : Java heap space at foo.Foo.main ( Foo.java:5 ) $ java -Xmx12500m -cp ./ foo.Foo//this works
import java.util . * ; public class Loop { //Start public static void main ( String args [ ] ) { Scanner console = new Scanner ( System.in ) ; System.out.println ( `` Enter Start Number '' ) ; int start =console.nextInt ( ) ; System.out.println ( `` Enter End Number '' ) ; int end =console.nextInt ( ) ; int sum = 0 ; System.out.println ( `` The even numbers between `` +start+ '' and `` +end+ '' are the following : `` ) ; for ( int r = start ; r < = end ; r++ ) { //if number % 2 == 0 it means its an even number if ( r % 2 == 0 ) { System.out.println ( r ) ; } } } }
private Class [ ] getTypes ( final Object [ ] objects ) { final Class [ ] types = new Class [ objects.length ] ; for ( int i = 0 ; i < objects.length ; i++ ) { types [ i ] = objects [ i ] .getClass ( ) ; } return types ; }
public void run ( ) { vm.setVisible ( true ) ; while ( ! end ) ; System.out.println ( `` Finish '' ) ; vm.setVisible ( false ) ; } private class CloseSys implements ActionListener { public CloseSys ( ) { super ( ) ; } public void actionPerformed ( ActionEvent e ) { System.out.println ( `` CLOSE SYS '' ) ; System.out.println ( `` end : `` +end ) ; end = true ; System.out.println ( `` end : `` +end ) ; } }
public static void main ( String [ ] args ) { int i = 0 ; if ( i < = 2 ) { System.out.println ( `` ok '' ) ; } }
"private List < String > pkgs ; pkgs = new ArrayList < > ( ) ; private void togglePackage ( String selectedPackage , CheckBox chk_app ) { String m_pkg = selectedPackage.toString ( ) ; //redundant .toString ( ) boolean checked = ! chk_app.isChecked ( ) ; //checkbox boolean toggle if ( checked & & ! pkgs.contains ( m_pkg ) ) { //if not already in arraylist pkgs.add ( m_pkg ) ; //adding the newly checked package } else if ( ! checked & & pkgs.contains ( m_pkg ) ) { //if it needs to be removed pkgs.remove ( m_pkg ) ; // < -- -- -- -- -- -- -- -- -- -- -- -This works around the 3rd time i press the checkbox } //Here i check if the string was actually removed from the arrylist //This following code will not be in production , i just used it for testing if ( pkgs.contains ( m_pkg ) ) { if ( checked ) { chk_app.setChecked ( checked ) ; //Success } else { chk_app.setChecked ( ! checked ) ; //Failure } } else { if ( ! checked ) { chk_app.setChecked ( checked ) ; //Success } else { chk_app.setChecked ( ! checked ) ; //Failure } } } RelativeLayout rl_container = ( RelativeLayout ) child.findViewById ( R.id.rl_container ) ; rl_container.setTag ( pkg ) ; rl_container.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { String m_pkg = v.getTag ( ) .toString ( ) ; System.out.println ( `` Pkg = `` +m_pkg ) ; boolean checked = ! chk_app.isChecked ( ) ; if ( checked & & ! pkgs.contains ( m_pkg ) ) { pkgs.add ( m_pkg ) ; System.out.println ( `` Adding `` + m_pkg ) ; } else if ( ! checked & & pkgs.contains ( m_pkg ) ) { pkgs.remove ( m_pkg ) ; System.out.println ( `` Removing `` + m_pkg ) ; } if ( pkgs.contains ( m_pkg ) ) { if ( checked ) { System.out.println ( `` Success '' ) ; chk_app.setChecked ( checked ) ; } else { System.out.println ( `` Fail '' ) ; chk_app.setChecked ( ! checked ) ; } } else { if ( ! checked ) { System.out.println ( `` Success '' ) ; chk_app.setChecked ( checked ) ; } else { System.out.println ( `` Fail '' ) ; chk_app.setChecked ( ! checked ) ; } } } } ) ; com.sbg.mobile.phonecom.google.android.youtube com.e8tracks com.vlingo.midas com.google.android.googlequicksearchbox com.truecaller 12-18 10:37:25 ViewPostImeInputStage ACTION_DOWN12-18 10:37:25 Pkg = com.sbg.mobile.phone12-18 10:37:25 Removing com.sbg.mobile.phone12-18 10:37:25 Fail12-18 10:37:28 ViewPostImeInputStage ACTION_DOWN12-18 10:37:28 Pkg = com.sbg.mobile.phone12-18 10:37:28 Removing com.sbg.mobile.phone12-18 10:37:28 Fail12-18 10:37:30 ViewPostImeInputStage ACTION_DOWN12-18 10:37:31 Pkg = com.sbg.mobile.phone12-18 10:37:31 Removing com.sbg.mobile.phone12-18 10:37:31 Fail12-18 10:37:32 ViewPostImeInputStage ACTION_DOWN12-18 10:37:32 Pkg = com.sbg.mobile.phone12-18 10:37:32 Removing com.sbg.mobile.phone12-18 10:37:32 Fail12-18 10:37:33 ViewPostImeInputStage ACTION_DOWN12-18 10:37:33 Pkg = com.sbg.mobile.phone12-18 10:37:33 Removing com.sbg.mobile.phone 12-18 10:37:33 Success"
"public static < T , R > Single < R > zipArray ( Function < ? super Object [ ] , ? extends R > zipper , SingleSource < ? extends T > ... sources ) ... f < $ > a1 < * > a2 < * > a3 < * > a4 < * > a5 < * > a6 < * > a7 < * > a8 < * > a9 < * > a10 < * > a11 public static < T1 , T2 , R > Single < R > zip ( SingleSource < ? extends T1 > source1 , SingleSource < ? extends T2 > source2 , BiFunction < ? super T1 , ? super T2 , ? extends R > zipper ) { ObjectHelper.requireNonNull ( source1 , `` source1 is null '' ) ; ObjectHelper.requireNonNull ( source2 , `` source2 is null '' ) ; return zipArray ( Functions.toFunction ( zipper ) , source1 , source2 ) ; } public static < T1 , T2 , T3 , R > Single < R > zip ( SingleSource < ? extends T1 > source1 , SingleSource < ? extends T2 > source2 , SingleSource < ? extends T3 > source3 , Function3 < ? super T1 , ? super T2 , ? super T3 , ? extends R > zipper ) //Givenval bothSubscribed = CountDownLatch ( 2 ) // Change this value to 0 to run the test fasterval subscribeThreadsStillRunning = CountDownLatch ( 1 ) // Change this value to 0 to run the test fasterval service = { s1 : String , s2 : Int , s3 : String ? , s4 : Int , s5 : String , s6 : String , s7 : String , s8 : String , s9 : String , s10 : String ? , s11 : String - > val result = listOf ( s1 , `` $ s2 '' , s3 ? : `` none '' , `` $ s4 '' , s5 , s6 , s7 , s8 , s9 , s10 ? : `` none '' , s11 ) .joinToString ( separator = `` ; '' ) Single.just ( `` Values : $ result '' ) } val createSingle = { value : String - > Observable .create < String > { emitter - > println ( `` Parallel subscribe $ value on $ { Thread.currentThread ( ) .name } '' ) bothSubscribed.countDown ( ) subscribeThreadsStillRunning.await ( 20 , TimeUnit.SECONDS ) emitter.onNext ( value ) emitter.onComplete ( ) } .singleOrError ( ) .subscribeOn ( io ( ) ) } val s1 = createSingle ( `` v1 '' ) val s2 = Single.just ( 2 ) val s3 = nullval s4 = Single.just ( 4 ) val s5 = createSingle ( `` v5 '' ) val s6 = createSingle ( `` v6 '' ) val s7 = createSingle ( `` v7 '' ) val s8 = createSingle ( `` v8 '' ) val s9 = createSingle ( `` v9 '' ) val s10 = nullval s11 = createSingle ( `` v11 '' ) //When val result = Single.zipArray ( listOf ( s1 , s2 , s3 , s4 , s5 , s6 , s7 , s8 , s9 , s10 , s11 ) ) { arrayResult - > service ( arrayResult [ 0 ] as String , arrayResult [ 1 ] as String , arrayResult [ 2 ] as String ? , arrayResult [ 3 ] as String , arrayResult [ 4 ] as String , arrayResult [ 5 ] as String , arrayResult [ 6 ] as String , arrayResult [ 7 ] as String , arrayResult [ 8 ] as String , arrayResult [ 9 ] as String ? , arrayResult [ 10 ] as String ) } //Thenresult .test ( ) .awaitDone ( 50 , TimeUnit.SECONDS ) .assertSubscribed ( ) .assertValues ( `` Values : v1 ; 2 ; none ; 4 ; v5 ; v6 ; v7 ; v8 ; v9 ; none ; v11 '' ) arrayResult [ 0 ] as String , arrayResult [ 1 ] as Int , arrayResult [ 2 ] as String ? , arrayResult [ 3 ] as Int , arrayResult [ 4 ] as String , arrayResult [ 5 ] as String , arrayResult [ 6 ] as String , arrayResult [ 7 ] as String , arrayResult [ 8 ] as String , arrayResult [ 9 ] as String ? , arrayResult [ 10 ] as String"
"ItemCalculation itemCalculation = ItemCalculation.builder ( ) .amountOfItems ( itemList.size ( ) ) .averagePrice ( itemList.stream ( ) .mapToDouble ( item - > item.getPrice ( ) ) .average ( ) .getAsDouble ( ) ) .averageInvestmentValue ( itemList.stream ( ) .mapToDouble ( item - > getTotalInvestmentValue ( item.getInvestmentValue ( ) , item.getInvestmentValuePackaging ( ) ) ) .average ( ) .getAsDouble ( ) ) .highestWarrantyLimit ( itemList.stream ( ) ... etc ."
public class ThreadImp implements Runnable { public static void main ( String [ ] args ) { ThreadImp threadImp = new ThreadImp ( ) ; Thread t =new Thread ( threadImp ) ; t.setName ( `` Fred '' ) ; t.start ( ) ; threadImp.run ( ) ; t.run ( ) ; } public void run ( ) { System.out.println ( `` Current Thread : `` + Thread.currentThread ( ) ) ; } }
public Integer v1 = 127 ; public Integer v2 = 127 ; public Integer v3 = 513 ; public Integer v4 = 513 ; public void operatorEquals ( ) { if ( v1==v2 ) System.out.println ( `` v1 == v2 '' ) ; else throw new RuntimeException ( `` v1 ! = v2 '' ) ; if ( v3==v4 ) System.out.println ( `` v3 == v4 '' ) ; else throw new RuntimeException ( `` v3 ! = v4 '' ) ; } **Result** : java.lang.RuntimeException : **v3 ! = v4**
class A < T > { } class AT extends A < Boolean > { } public A < Boolean > a ( ) { return new AT ( ) ; } def a ( ) : A [ Boolean ] = { return new AT ( ) ; }
"public static void main ( String [ ] args ) { Game game = new Game ( 2 , Difficulty.NOVICE ) ; game.run ( ) ; while ( game.getGameState ( ) == State.INCOMPLETE ) { //Hold while waiting for game to complete . } } public class Game extends Thread { public void checkState ( ) { //Let 's presume a win condition was thrown : state = State.WON ; this.interrupt ( ) ; } public void randomMethod ( ) { //This method might contain some code that triggers a win condition , so we immediately call checkState ( ) checkState ( ) ; } @ Override public void run ( ) { //Lots of different methods called in a single turn , including for example : randomMethod ( ) ; } } while ( gameState_ == GameState.INCOMPLETE ) { turnState_.update ( ) ; checkWin ( ) ; } public void changeTurnState ( TurnState state ) { turnState_.exit ( ) ; turnState_ = state ; turnState_.enter ( ) ; } public abstract class TurnState { private Game game ; public TurnState ( Game game ) { this.game = game ; } public void enter ( ) { } public void exit ( ) { } public Game getGame ( ) { return game ; } public void update ( ) { } } public class FloodState extends TurnState { private int remainingFloods ; /** * @ param game */ public FloodState ( Game game ) { super ( game ) ; remainingFloods = getGame ( ) .getFloodRate ( ) ; ForbiddenIsland.logger.info ( `` Flooding { } tiles '' , remainingFloods ) ; } public void update ( ) { //Draw and resolve a flood card , then decrement remainingFloods getGame ( ) .flood ( ) ; remainingFloods -- ; //If no more floods remaining , jump to next state if ( remainingFloods == 0 ) { getGame ( ) .changeTurnState ( new ActionState ( getGame ( ) ) ) ; } } }"
base Shapederived Circle extends Shapederived LineSeg extends Shape Circle.intersect ( LineSeg ) Circle.intersect ( Circle ) LineSeg.intersect ( Circle ) for some shape sForeach shape in Shapes if ( s.intersect ( shape ) ) - do something
public class Something { public static void main ( String [ ] args ) { char whatever = '\u0041 ' ; System.out.println ( '\u0041 ' ) ; //prints A as expected System.out.println ( ++whatever ) ; //prints B as expected System.out.println ( '\u0041 ' + 1 ) ; //prints 66 I understand the unicode of 1 adds up the //unicode representing 66 but why am I even returning an integer when in the previous statement I returned a char ? System.out.println ( '\u0041 ' + ' A ' ) ; //prints 130 I just wanted to show that adding an //integer to the unicode in the previous print statement is not implicit casting because //here I add a char which does not implicitly cast char on the returned value } }
interface I { } class A { } class B { } public class Test { public static void main ( String args [ ] ) { A a = null ; B b = ( B ) a ; // error : inconvertible types I i = null ; B b1 = ( B ) i ; } }
public class B extends A { public static void main ( String [ ] args ) { new B ( ) .privateMethod ( ) ; //no error -output B-privateMethod . } private void privateMethod ( ) { System.out.println ( `` B-privateMethod . `` ) ; } } class A { private void privateMethod ( ) { System.out.println ( `` A-privateMethod . `` ) ; } private static void privateStaticMethod ( ) { System.out.println ( `` privateStaticMethod . `` ) ; } } private static final int DEFAULT_CAPACITY = 10 ; private static int hugeCapacity ( int minCapacity ) { if ( minCapacity < 0 ) // overflow throw new OutOfMemoryError ( ) ; return ( minCapacity > MAX_ARRAY_SIZE ) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE ; }
[ object foo ] ;
service.setLanguage ( LanguageSelection.ENGLISH ) ;
org.conscrypt.NativeCrypto.SSL_read ( Native Method ) org.conscrypt.NativeSsl.read ( NativeSsl.java:416 ) org.conscrypt.ConscryptFileDescriptorSocket $ SSLInputStream.read ( ConscryptFileDescriptorSocket.java:547 ) = > holding Monitor ( java.lang.Object @ 1638155334 } ) java.io.BufferedInputStream.fill ( BufferedInputStream.java:246 ) java.io.BufferedInputStream.read1 ( BufferedInputStream.java:286 ) java.io.BufferedInputStream.read ( BufferedInputStream.java:345 ) = > holding Monitor ( java.io.BufferedInputStream @ 1513035694 } ) sun.net.www.http.HttpClient.parseHTTPHeader ( HttpClient.java:735 ) sun.net.www.http.HttpClient.parseHTTP ( HttpClient.java:678 ) sun.net.www.protocol.http.HttpURLConnection.getInputStream0 ( HttpURLConnection.java:1587 ) = > holding Monitor ( sun.net.www.protocol.https.DelegateHttpsURLConnection @ 995846771 } ) sun.net.www.protocol.http.HttpURLConnection.getInputStream ( HttpURLConnection.java:1492 ) = > holding Monitor ( sun.net.www.protocol.https.DelegateHttpsURLConnection @ 995846771 } ) java.net.HttpURLConnection.getResponseCode ( HttpURLConnection.java:480 ) sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode ( HttpsURLConnectionImpl.java:347 ) com.shaded.google.api.client.http.javanet.NetHttpResponse. < init > ( NetHttpResponse.java:37 ) com.shaded.google.api.client.http.javanet.NetHttpRequest.execute ( NetHttpRequest.java:105 ) com.shaded.google.api.client.http.HttpRequest.execute ( HttpRequest.java:981 ) com.shaded.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed ( AbstractGoogleClientRequest.java:419 ) com.shaded.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed ( AbstractGoogleClientRequest.java:352 ) com.shaded.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeMedia ( AbstractGoogleClientRequest.java:380 ) com.shaded.google.api.services.storage.Storage $ Objects $ Get.executeMedia ( Storage.java:6189 ) com.shaded.google.cloud.storage.spi.v1.HttpStorageRpc.load ( HttpStorageRpc.java:584 ) com.shaded.google.cloud.storage.StorageImpl $ 16.call ( StorageImpl.java:464 ) com.shaded.google.cloud.storage.StorageImpl $ 16.call ( StorageImpl.java:461 ) com.shaded.google.api.gax.retrying.DirectRetryingExecutor.submit ( DirectRetryingExecutor.java:89 ) com.shaded.google.cloud.RetryHelper.run ( RetryHelper.java:74 ) com.shaded.google.cloud.RetryHelper.runWithRetries ( RetryHelper.java:51 ) com.shaded.google.cloud.storage.StorageImpl.readAllBytes ( StorageImpl.java:461 ) com.shaded.google.cloud.storage.Blob.getContent ( Blob.java:455 ) my.package.with.my.StorageAPI.readFetchedLocation ( StorageAPI.java:71 ) ...
public class App1 { public static void main ( String [ ] args ) { String s1 = `` Ja '' .concat ( `` va '' ) ; // seems to be interned ? ! String s2 = s1.intern ( ) ; System.out.println ( s1 == s2 ) ; // true } } public class App2 { public static void main ( String [ ] args ) { String s1 = `` Ja '' .concat ( `` va '' ) ; // seems not to be interned ? ! String s3 = new String ( `` Java '' ) ; // this changes output String s2 = s1.intern ( ) ; System.out.println ( s1 == s2 ) ; // false } }
String s = null ; Supplier < char [ ] > fun = s : :toCharArray ; public static char [ ] callback ( Supplier < char [ ] > supplier ) { return supplier.get ( ) ; } public static void main ( String [ ] args ) { String s = null ; callback ( s : :toCharArray ) ; }
class Test { public void test ( ) { PreparedStatement stmt = null ; try { stmt = HibernateSession.instance ( ) .connection ( ) .prepareStatement ( `` '' ) ; } catch ( final SQLException e ) { e.printStackTrace ( ) ; } finally { if ( stmt ! = null ) try { stmt.close ( ) ; } catch ( final SQLException e ) { e.printStackTrace ( ) ; } } } }
float a = 1234e-3f ; float b = 1.23f ; float ca = 1.234e3f ; float d = 43.21f ; long e = 1234L ; int f = 0xa ; int g = 014 ; char h = ' Z ' ; char ia = ' ' ; byte j = 123 ; short k = 4321 ; System.out.println ( a+b+ca+d+e+f+g+h+ia+j+k ) ; float a = 1234e-3f ; float b = 1.23f ; float ca = 1.234e3f ; float d = 43.21f ; long e = 1234L ; int f = 0xa ; int g = 014 ; char h = ' Z ' ; char ia = ' ' ; byte j = 123 ; short k = 4321 ; Console.WriteLine ( a+b+ca+d+e+f+g+h+ia+j+k ) ;
"// Run the database operation for updating the entities async in a new thread , return updated entities once done return CompletableFuture.runAsync ( ( ) - > { var session = database.openSession ( ) ; session.beginTransaction ( ) ; try { // Save entities for ( var entity : entities ) session.update ( entity ) ; session.flush ( ) ; session.clear ( ) ; session.getTransaction ( ) .commit ( ) ; } catch ( Exception e ) { var messageComposer = new ExceptionMessageComposer ( e ) ; GameExtension.getInstance ( ) .trace ( `` Update : `` +messageComposer.toString ( ) ) ; session.getTransaction ( ) .rollback ( ) ; } session.close ( ) ; } ) .thenApply ( v - > entities ) ; @ Entity @ Table ( name = `` chunk '' , uniqueConstraints = { @ UniqueConstraint ( columnNames= { `` x '' , `` y '' } ) } , indexes = { @ Index ( columnList = `` x , y '' ) } ) @ Access ( value = AccessType.FIELD ) @ SelectBeforeUpdate ( false ) public class Chunk extends HibernateComponent { public int x ; public int y ; public Date createdOn ; @ OneToMany ( fetch = FetchType.EAGER ) @ JoinTable ( name = `` chunk_identity '' , joinColumns = @ JoinColumn ( name = `` identity_id '' ) , inverseJoinColumns = @ JoinColumn ( name = `` id '' ) , inverseForeignKey = @ ForeignKey ( ConstraintMode.NO_CONSTRAINT ) ) @ Fetch ( FetchMode.JOIN ) @ BatchSize ( size = 50 ) public Set < Identity > inChunk = new LinkedHashSet < > ( ) ; @ Transient public Set < ChunkLoader > loadedBy = new LinkedHashSet < > ( ) ; public Chunk ( ) { } public Chunk ( int x , int y , Date createdOn ) { this.x = x ; this.y = y ; this.createdOn = createdOn ; } } /** * Represents a ID of a { @ link com.artemis.Entity } which is unique for each entity and mostly the database id */ @ Entity @ Table ( name = `` identity '' ) @ Access ( AccessType.FIELD ) @ SQLInsert ( sql = `` insert into identity ( tag , typeID , id ) values ( ? , ? , ? ) ON DUPLICATE KEY UPDATE id = VALUES ( id ) , tag = values ( tag ) , typeID = values ( typeID ) '' ) @ SelectBeforeUpdate ( value = false ) public class Identity extends Component { @ Id public long id ; public String tag ; public String typeID ; public Identity ( ) { } public Identity ( long id , String tag , String typeID ) { this.id = id ; this.tag = tag ; this.typeID = typeID ; } }"
< T > T [ ] toArray ( T [ ] a ) ; ArrayList < String > string = new ArrayList < String > ( ) ; string.add ( `` 1 '' ) ; string.add ( `` 2 '' ) ; Integer intArray [ ] = new Integer [ 2 ] ; intArray = string.toArray ( intArray ) ;
[ //\ ] [ /\\ ]
"int [ ] listA = { 2 , -5 , -121 , 102 , -35 , -2 , 0 , -125 , 802 , -10 } ; int [ ] listB = { 6 , 99 , -1 , 12 , 1 , -2 } ; int arraySize = 0 ; //Variable to determine size of the new array ; int difElements = 0 ; //Variable to count every different element ; for ( int i = 0 ; i < listA.length ; i++ ) { for ( int j = 0 ; j < listB.length ; j++ ) { if ( listA [ i ] ! = listB [ j ] ) { difElements++ ; } if ( difElements == listB.length ) { arraySize++ ; } } difElements = 0 ; } System.out.println ( `` Size of the array with different elements : `` + arraySize ) ; int [ ] listD = new int [ arraySize ] ; //Declaring array with specified size ; for ( int i = 0 ; i < listA.length ; i++ ) { for ( int j = 0 ; j < listB.length ; j++ ) { if ( listA [ i ] ! = listB [ j ] ) { listD [ i ] = listA [ i ] ; } else { listD [ i ] = listA [ i + 1 ] ; } } }"
boolean equals = c1.containsAll ( c2 ) & & c2.containsAll ( c1 ) ; boolean equals = new HashSet < ? > ( c1 ) .equals ( new HashSet < ? > ( c2 ) ) ;
"try ( ResultSet resultSet = DriverManager.getConnection ( `` jdbc : ... '' , `` user '' , `` pass '' ) .createStatement ( ) .executeQuery ( sql ) ) { . . . }"
"try ( FileOutputStream output = new FileOutputStream ( path , true ) ) { //Put the data into my format byte [ ] data = new byte [ 24 ] ; main.getLogger ( ) .log ( Level.INFO , `` Saving most sig bits '' ) ; System.arraycopy ( ByteUtils.longToBytes ( uuid.getMostSignificantBits ( ) ) , 0 , data , 0 , 8 ) ; System.arraycopy ( ByteUtils.longToBytes ( uuid.getLeastSignificantBits ( ) ) , 0 , data , 8 , 8 ) ; System.arraycopy ( ByteUtils.longToBytes ( player.getTokens ( ) ) , 0 , data , 16 , 8 ) ; //Write data in the format output.write ( data ) ; } private static ByteBuffer buffer = ByteBuffer.allocate ( 8 ) ; public static byte [ ] longToBytes ( long x ) { System.out.println ( x ) ; buffer.putLong ( 0 , x ) ; return buffer.array ( ) ; } bytes = IOUtils.toByteArray ( new FileReader ( file ) ) ;"
public static void main ( String args [ ] ) { String text1 = `` < html > < body > < table > < tr > < td > somthing ONE < /td > < /tr > < /table > < /body > < /html > '' ; String text2 = `` < html > < body > < table > < tr > < td > somthing TWO < /td > < /tr > < /table > < /body > < /html > '' ; JDialog jd = new JDialog ( ) ; JEditorPane jep = new JEditorPane ( ) ; HTMLEditorKit kit = new HTMLEditorKit ( ) ; HTMLDocument doc = ( HTMLDocument ) kit.createDefaultDocument ( ) ; jep.setEditorKit ( kit ) ; jep.setDocument ( doc ) ; setCSS ( kit ) ; jep.setText ( text1 ) ; jd.getContentPane ( ) .add ( jep ) ; jd.pack ( ) ; jd.setVisible ( true ) ; JDialog jd2 = new JDialog ( ) ; JEditorPane jep2 = new JEditorPane ( ) ; HTMLEditorKit kit2 = new HTMLEditorKit ( ) ; HTMLDocument doc2 = ( HTMLDocument ) kit2.createDefaultDocument ( ) ; jep2.setEditorKit ( kit2 ) ; jep2.setDocument ( doc2 ) ; //We do not install css rules explicitly here jep2.setText ( text2 ) ; jd2.getContentPane ( ) .add ( jep2 ) ; jd2.pack ( ) ; jd2.setVisible ( true ) ; } public static void setCSS ( HTMLEditorKit kit ) { StyleSheet styleSheet = kit.getStyleSheet ( ) ; styleSheet.addRule ( `` td { border-width : 3px ; border-style : solid ; border-color : # 000000 ; } '' ) ; kit.setStyleSheet ( styleSheet ) ; } public static class CustomKit extends HTMLEditorKit { private StyleSheet styles ; @ Override public void setStyleSheet ( StyleSheet styleSheet ) { styles = styleSheet ; } @ Override public StyleSheet getStyleSheet ( ) { if ( styles == null ) { styles = super.getStyleSheet ( ) ; } return styles ; } } public static void setCSS ( CustomKit kit ) { StyleSheet styleSheet = new StyleSheet ( ) ; styleSheet.addRule ( `` td { border-width : 3px ; border-style : solid ; border-color : # 000000 ; } '' ) ; kit.setStyleSheet ( styleSheet ) ; }
"public static < T > Collector < T , ? , Integer > summingInt ( ToIntFunction < ? super T > mapper ) { return new CollectorImpl < > ( ( ) - > new int [ 1 ] , ( a , t ) - > { a [ 0 ] += mapper.applyAsInt ( t ) ; } , ( a , b ) - > { a [ 0 ] += b [ 0 ] ; return a ; } , a - > a [ 0 ] , CH_NOID ) ; } private < T > Collector < T , Integer , Integer > summingInt ( ToIntFunction < ? super T > mapper ) { return Collector.of ( ( ) - > 0 , ( a , t ) - > a += mapper.applyAsInt ( t ) , ( a , b ) - > a += b , a - > a ) ; }"
import java.text.SimpleDateFormat ; import java.util.Calendar ; public class DateFormatTest { String PATTERN = `` z '' ; SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( this.PATTERN ) ; public static void main ( final String [ ] args ) { new DateFormatTest ( ) .printTimezone ( ) ; } public void printTimezone ( ) { System.out.println ( this.simpleDateFormat.format ( Calendar.getInstance ( ) .getTime ( ) ) ) ; } } PDT GMT-07:00
Sprite sprFace = new Sprite ( ) { @ Override protected void onManagedUpdate ( float pSecondElapsed ) { runOnUpdateThread ( new Runnable ( ) { @ Override protected void run ( ) { Sprite.this.getParent ( ) .detach ( Sprite.this ) ; // Here } } ) ; } } ;
Lambda.java:31 : error : method reference not expected here String res = ( ( Supplier < String > ) ( args.length > 0 ? Lambda : :foo : Lambda : :bar ) ) .get ( ) ; ^Lambda.java:31 : error : method reference not expected here String res = ( ( Supplier < String > ) ( args.length > 0 ? Lambda : :foo : Lambda : :bar ) ) .get ( ) ; import java.util.function.Supplier ; class Lambda { private final String s ; private Lambda ( String s ) { this.s = s ; } private static String foo ( ) { return `` foo '' ; } private static String bar ( ) { return `` bar '' ; } private String str ( ) { return s ; } public static void main ( String ... args ) { // Block 1 Lambda l1 = new Lambda ( `` x '' ) ; Lambda l2 = new Lambda ( `` y '' ) ; System.out.println ( ( args.length > 0 ? l1 : l2 ) .str ( ) ) ; // Block 2 Supplier < String > s = ( args.length > 0 ? Lambda : :foo : Lambda : :bar ) ; System.out.println ( s.get ( ) ) ; // Block 3 String res = ( ( Supplier < String > ) ( args.length > 0 ? Lambda : :foo : Lambda : :bar ) ) .get ( ) ; System.out.println ( res ) ; } }
~/Documents/workspace/Project/bin $ java com/foo/bar/baz/Runner files/text1.txt program should know ~/Documents/workspace/Project/bin~/Documents/workspace/Project $ java com/foo/bar/baz/Runner files/text1.txt program should know ~/Documents/workspace/Project
public static < T > List < T > returnNull ( Class < ? extends T > clazz ) { return null ; } public static void main ( String [ ] args ) { List < AtomicReference < ? > > l = returnNull ( AtomicReference.class ) ; } incompatible types : can not infer type-variable ( s ) T ( argument mismatch ; java.lang.Class < java.util.concurrent.atomic.AtomicReference > can not be converted to java.lang.Class < ? extends java.util.concurrent.atomic.AtomicReference < ? > > )
"@ Testpublic void TimeSetOnDST ( ) throws Exception { LocalDateTime time = LocalDateTime.of ( 2016 , 10 , 30 , 2 , 30 ) ; // in the DST time overlap ZonedDateTime of = ZonedDateTime.of ( time , ZoneId.of ( `` Europe/Zurich '' ) ) ; System.out.println ( of ) ; // 2016-10-30T02:30+02:00 [ Europe/Zurich ] // But why not 2016-10-30T02:30+01:00 [ Europe/Zurich ] ? // Is this just `` by convention '' ? }"
class BracketsAfterMethodSignature { Object emptyArray ( ) [ ] { return new Object [ ] { } ; } }
BufferedReader br=new BufferedReader ( new InputStreamReader ( new ByteArrayInputStream ( data ) ) ) ; byte [ ] content=org.apache.commons.io.FileUtils.readFileToByteArray ( new File ( filePath ) ) ; For each file read the file into a byte [ ] add the byte [ ] to a listend ForFor each item in the list create a thread and pass a byte [ ] to itend For
"public Foo ( int id , Bar bar , String name , String description ) { } public Foo ( int id , Bar bar , String ... values ) { }"
"// this does not compile , because nameProp is of type Property < String > Integer name = interface.getProperty ( nameProp ) ; assertCompilationError ( ) { Integer name = interface.getProperty ( nameProp ) ; }"
"1,2,2,4,1,1"
"@ Entity @ Data @ Table ( name = `` NewsPosts '' , schema = `` data '' ) @ EqualsAndHashCode @ NoArgsConstructor @ AllArgsConstructor @ Builderpublic class NewsPost { @ Id @ Column ( name = `` id '' ) private long id ; @ Basic @ Column ( name = `` subject '' ) private String subject ; @ Basic @ Column ( name = `` post_text '' ) private String postText ; @ ManyToOne ( fetch = FetchType.LAZY , cascade = CascadeType.MERGE ) @ JoinColumn ( name = `` newsSite '' ) private NewsSite site ; @ ManyToMany ( fetch = FetchType.EAGER , cascade = CascadeType.MERGE ) @ JoinTable ( name = `` query_news_post '' , joinColumns = @ JoinColumn ( name = `` newsid '' ) , inverseJoinColumns = @ JoinColumn ( name = `` queryid '' ) ) private Set < QueryEntity > queries ; } @ Entity @ Data @ Builder @ NoArgsConstructor @ AllArgsConstructor @ Table ( name = `` queries '' , schema = `` data '' ) @ EqualsAndHashCodepublic class QueryEntity { @ Id @ GeneratedValue ( strategy = GenerationType.IDENTITY ) @ Column ( name = `` id '' ) private int id ; @ EqualsAndHashCode.Exclude @ Basic @ Column ( name = `` query '' ) private String query ; // needs to be exclueded otherwise we can create stack overflow , because of circular references ... @ EqualsAndHashCode.Exclude @ ToString.Exclude @ ManyToMany ( mappedBy = `` queries '' , fetch = FetchType.LAZY , cascade = CascadeType.MERGE ) Set < PostsEntity > posts ; } @ Entity @ Data @ Table ( name = `` sites '' , schema = `` data '' ) @ EqualsAndHashCode @ NoArgsConstructor @ AllArgsConstructor @ Builderpublic class newsSite { @ Id @ Column ( name = `` SiteId '' ) private long id ; @ Basic @ Column ( name = `` SiteName '' ) private String site ; } @ Repositorypublic interface PostRepo extends JpaRepository < NewsPost , Long > { NewsPost getById ( long id ) ; } private void updatePosts ( List < NewsPost > posts ) { posts.forEach ( post- > { NewsPost foundPost = postRepo.getById ( post.getId ( ) ) ; if ( foundPost ! =null ) { post.getQueries ( ) .addAll ( foundPost.getQueries ( ) ) ; } } ) ; } EntityManager em = entityManagerFactory.createEntityManager ( ) ; try { EntityTransaction transaction = em.getTransaction ( ) ; transaction.begin ( ) ; entities.forEach ( entity- > em.merge ( entity ) ) em.flush ( ) ; transaction.commit ( ) ; } finally { em.clear ( ) ; em.close ( ) ; } spring : main : allow-bean-definition-overriding : true datasource : url : `` jdbc : mysql : //db '' username : user password : secret driver-class-name : com.mysql.cj.jdbc.Driver test-while-idle : true validation-query : Select 1 jpa : database-platform : org.hibernate.dialect.MySQL8Dialect hibernate : ddl-auto : none properties : hibernate : event : merge : entity_copy_observer : allow `` `"
"private HashMap < LocalDateTime , Set < Vote > > votes ; public class Vote { private String name ; private VoteType vote ; public Vote ( String name , VoteType vote ) { super ( ) ; this.name = name ; this.vote = vote ; } } public enum VoteType { YES , NO , MAYBE } public Map < LocalDateTime , Integer > voteCount ( VoteType targetVote ) { return this.votes.entrySet ( ) .stream ( ) .collect ( Collectors.toMap ( Map.Entry : :getKey , e - > new Integer ( e.getValue ( ) .stream ( ) .filter ( v - > v.getVote ( ) == targetVote ) .collect ( Collectors.toList ( ) ) .size ( ) ) ) ) ; } /* Returns the date that got the most 'YES ' votes */public LocalDateTime winningDate ( ) { // TODO }"
"BritishAirwaysFlightData ( ) BritishAirwaysFlightData // Used to download the BA Flight database and store in the object ( Assumging his is only small i.e . 500kb ) getStartDate ( String source_airport , String dest_airport ) // Takes source and destination airport and return date when flights startgetEndDate ( String source_airport , String dest_airport ) // Takes source and destination airport and return date when flights finishgetDestAirports ( String source_airport ) // Takes source airport name and returns a list of destinationsgetSourceAirports ( String dest_airport ) // Takes source airport name and returns a list of sourcesgetNumofDestinations ( ) // Returns total number of destinations"
"public enum Genders { Male ( `` M '' ) , Female ( `` F '' ) , Transgender ( `` T '' ) , Other ( `` O '' ) , Unknown ( `` U '' ) ; private String code ; Genders ( String code ) { this.code = code ; } public String getCode ( ) { return code ; } public static Genders get ( String code ) { for ( Genders gender : values ( ) ) { if ( gender.getCode ( ) .equalsIgnoreCase ( code ) ) { return gender ; } } return null ; } }"
"public static < T , S > List < S > getValues ( List < T > list , String fieldName ) { List < S > ret = new ArrayList < S > ( ) ; String methodName = `` get '' + fieldName.substring ( 0 , 1 ) .toUpperCase ( ) + fieldName.substring ( 1 , fieldName.length ( ) ) ; try { if ( list ! = null & & ! list.isEmpty ( ) ) { for ( T t : list ) { ret.add ( ( S ) t.getClass ( ) .getMethod ( methodName ) .invoke ( t ) ) ; } } } catch ( IllegalArgumentException e ) { } catch ( SecurityException e ) { } catch ( IllegalAccessException e ) { } catch ( InvocationTargetException e ) { } catch ( NoSuchMethodException e ) { } return ret ; } List < Integer > ids = getValues ( List < MyDTO > , `` id '' ) ; request.setListIds ( ids ) ; request.setListIds ( getValues ( List < MyDTO > , `` id '' ) ) ;"
"Y = λf . ( λx.f ( x x ) ) ( λx.f ( x x ) ) IntUnaryOperator fact = Y ( rec - > n - > n == 0 ? 1 : n * rec.applyAsInt ( n - 1 ) ) ; IntUnaryOperator Y ( Function < IntUnaryOperator , IntUnaryOperator > f ) { return g ( g - > f.apply ( x - > g.apply ( g ) .applyAsInt ( x ) ) ) ; } IntUnaryOperator g ( G g ) { return g.apply ( g ) ; } // v -- - I want to remove the middle-interface ` G ` interface G extends Function < G , IntUnaryOperator > { /**/ }"
@ Entity public class Foo { @ Id private int id ; @ ManyToOne ( ) @ JoinColumn ( name = `` bar_id '' ) private Bar bar ; } @ Entity public class Bar { @ Id private int id ; private Boolean flag ; } UPDATE Bar SET flag = true WHERE id IN ( SELECT bar_id from FOO where id = 3 ) ;
interface UnaryFunction < T > { T apply ( T t ) ; } public class Main { private static final UnaryFunction < Object > IDENTITY = new UnaryFunction < Object > ( ) { public Object apply ( Object t ) { return t ; } } ; @ SuppressWarnings ( `` unchecked '' ) public static < T > UnaryFunction < T > identityFunction ( ) { return ( UnaryFunction < T > ) IDENTITY ; } public static void main ( String ... args ) { UnaryFunction < A > identityA = Main.identityFunction ( ) ; A a = identityA.apply ( new A ( ) ) ; } } class A { } UnaryFunction < A > identityA = ( UnaryFunction < A > ) IDENTITY ; //incompatible types : UnaryFunction < java.lang.Object > can not be converted to UnaryFunction < A >
"@ EnableZuulProxy @ SpringBootApplicationpublic class Application { public static void main ( String [ ] args ) { SpringApplication.run ( Application.class , args ) ; } @ Bean public SimpleFilter simpleFilter ( ) { return new SimpleFilter ( ) ; } } public class SimpleFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger ( SimpleFilter.class ) ; @ Override public String filterType ( ) { return `` pre '' ; } @ Override public int filterOrder ( ) { return 1 ; } @ Override public boolean shouldFilter ( ) { return true ; } @ Override public Object run ( ) { RequestContext ctx = RequestContext.getCurrentContext ( ) ; HttpServletRequest request = ctx.getRequest ( ) ; log.info ( String.format ( `` % s request to % s '' , request.getMethod ( ) , request.getRequestURL ( ) .toString ( ) ) ) ; return null ; } } zuul.ignored-patterns=/myserver/web/** zuul.routes.myserver.path=/myserver/api/** zuul.routes.myserver.url=http : //localhost:80/myserver/api zuul.routes.myserver.sensitiveHeaders = Cookie , Set-Cookie server.port=3000 href= '' http : //localhost:80/myserver/api/item '' href= '' http : //server_ip:3000/myserver/api/item '' http : //server_ip:80/myserver/api/item href= '' http : //server_ip:80/myserver/api/item '' http : //server_ip:3000/myserver/api/item href= '' http : //localhost:80/myserver/api/item ''"
"Class Test { ... void init ( ) { //sets variables , call functions , etc } ... } Test t=new Test ( ) ; t.init ( ) ;"
for ( UniversityClass class : allClasses ) { Period < Date > classDate = class.getClassDates ( ) ; if ( classDate.start ( ) .before ( classEndDate ) & & classDate.end ( ) .after ( classBeginDate ) ) { classBooked = true ; break ; } } allClasses.stream ( ) .filter ( class - > { Period < Date > classDate = class.getClassDates ( ) ; if ( classDate.start ( ) .before ( classEndDate ) & & classDate.end ( ) .after ( classBeginDate ) ) return true ; } ) .findFirst ( ) .ifPresent ( $ - > { classBooked = true ; } ) ;
"List cats = sess.createCriteria ( Cat.class ) .add ( Restrictions.like ( `` name '' , `` Fritz % '' ) ) .add ( Restrictions.between ( `` weight '' , minWeight , maxWeight ) ) .list ( ) ;"
import java.util . * ; public class tester { public static void main ( String [ ] args ) { Scanner console = new Scanner ( System.in ) ; double MyDouble1 ; double MyDouble2 ; System.out.print ( `` Please enter the first decimal number : `` ) ; MyDouble1 = console.nextDouble ( ) ; System.out.print ( `` Please enter the second decimal number : `` ) ; MyDouble2 = console.nextDouble ( ) ; // Display menu graphics System.out.println ( `` ============================ '' ) ; System.out.println ( `` | MENU SELECTION DEMO | '' ) ; System.out.println ( `` ============================ '' ) ; System.out.println ( `` | Options : | '' ) ; System.out.println ( `` | 1 . Addition | '' ) ; System.out.println ( `` | 2 . Multiply | '' ) ; System.out.println ( `` | 3 . Divide | '' ) ; System.out.println ( `` | 4 . Exit | '' ) ; System.out.println ( `` ============================ '' ) ; MyDouble1 = console.nextDouble ( ) ; System.out.print ( `` Select option : `` ) ; // Switch construct switch ( MyDouble1 ) { case 1 : System.out.println ( `` Addition selected '' ) ; break ; case 2 : System.out.println ( `` Multiply selected '' ) ; break ; case 3 : System.out.println ( `` Divide selected '' ) ; break ; case 4 : System.out.println ( `` Exit selected '' ) ; break ; default : System.out.println ( `` Invalid selection '' ) ; break ; } } }
int simpleCount ( ) { int result = 0 ; for ( int i = 0 ; i < string.length ; i++ ) { result += string [ i ] > = 128 ? 1 : 0 ; } return result ; } private int skip ( int i ) { for ( ; i < string.length ; i++ ) { if ( string [ i ] > = 128 ) break ; } return i ; } int smartCount ( ) { int result = 0 ; for ( int i = skip ( 0 ) ; i < string.length ; i++ ) { result += string [ i ] > = 128 ? 1 : 0 ; } return result ; } int smarterCount ( ) { return finish ( skip ( 0 ) ) ; } int finish ( int i ) { int result = 0 ; for ( ; i < string.length ; i++ ) { result += string [ i ] > = 128 ? 1 : 0 ; } return result ; }
static void invoke ( Runnable r ) { r.run ( ) ; } static < T > T invoke ( Callable < T > c ) throws Exception { return c.call ( ) ; }
"LongStream.iterate ( 1 , n - > n + 1 ) .limit ( 5000 ) .anyMatch ( n - > isPerfectCube ( ( n*n*n ) + ( ( n*n ) *p ) ) ) ; LongStream.iterate ( 1 , n - > n + 1 ) .anyMatch ( n - > isPerfectCube ( ( n*n*n ) + ( ( n*n ) *p ) ) ) ;"
int b1 = 0xffff & ( content [ 12 ] < < 8 | 0xff & content [ 11 ] ) ; int b1 = 0xffff & ( content [ 12 ] < < 8 | content [ 11 ] ) ;
"public class ExampleLoader extends ClassLoader { public Class < ? > findClass ( String name ) throws ClassNotFoundException { System.out.println ( `` This never gets printed '' ) ; return super.findClass ( name ) ; } public Class < ? > loadClass ( String name , boolean b ) throws ClassNotFoundException { System.out.println ( `` This never gets printed '' ) ; return super.loadClass ( name , b ) ; } } public class Tester { public static void main ( String [ ] args ) { Thread t = new FooThread ( ) ; t.setContextClassLoader ( new ExampleLoader ( ) ) ; t.start ( ) ; } } class FooThread extends Thread { public void run ( ) { new RandomClass ( ) ; } }"
"int experience = 5 ; private hasAllSkills ( person ) { return skillList.stream ( ) .filter ( s - > hasSingleSkill ( s , person ) ) .collect ( Collectors.toList ( ) ) .size ( ) == skillList.size ( ) ? true : false ; } private boolean hasSingleSkill ( Skill s , Person p ) { return hasSkill ( s , p , experience ) ; }"
"Dim bmp As New Bitmap ( File ) For x As Integer = 0 To w - 1 For y As Integer = 0 To h - 1 Dim c As Color = bmp.GetPixel ( x , y ) Dim Red as integer = c.R Dim Green as integer = c.G Dim Blue as integer = c.B Next ynext x BufferedImage image = ImageIO.read ( new File ( File ) ) for ( int i = 0 ; i < w ; i++ ) { for ( int j = 0 ; j < h ; j++ ) { int pixel = image.getRGB ( i , j ) ; int Red = ( ( pixel > > 16 ) & 0xff ) ; int Green = ( ( pixel > > 8 ) & 0xff ) ; int Blue = ( ( pixel ) & 0xff ) ; } }"
"import java.util.Arrays ; public class Sample { private final int test ; private Sample ( int test ) { this.test = test ; } public static void main ( String [ ] args ) { System.out.println ( Arrays.toString ( Hello.class.getDeclaredConstructors ( ) ) ) ; } public static class Hello { private final int i ; private Hello ( int i ) { this.i = i ; } public int getI ( ) { return i ; } public static class Builder { private int i ; private Builder ( ) { } public static Builder builder ( ) { return new Builder ( ) ; } public void add ( int i ) { this.i = i ; } public Hello build ( ) { return new Hello ( i ) ; } } } } [ private Sample $ Hello ( int ) , Sample $ Hello ( int , Sample $ 1 ) ]"
"package genericsissue ; import java.util.ArrayList ; import java.util.List ; interface Attribute < V > { } interface ListAttribute extends Attribute < List < ? > > { } public class Context { public < T , A extends Attribute < T > > void put ( Class < A > attribute , T value ) { // implementation does not matter for the issue } public static void main ( String [ ] args ) { Context ctx = new Context ( ) ; List < ? > list = new ArrayList < String > ( ) ; ctx.put ( ListAttribute.class , list ) ; } } Context.java:18 : < T , A > put ( java.lang.Class < A > , T ) in genericsissue.Context can not be applied to ( java.lang.Class < genericsissue.ListAttribute > , java.util.List < capture # 35 of ? > )"
"@ ThreadSafepublic class DelegatingVehicleTracker { private final ConcurrentMap < String , Point > locations ; private final Map < String , Point > unmodifiableMap ; public DelegatingVehicleTracker ( Map < String , Point > points ) { locations = new ConcurrentHashMap < String , Point > ( points ) ; unmodifiableMap = Collections.unmodifiableMap ( locations ) ; } public Map < String , Point > getLocations ( ) { return unmodifiableMap ; } public Point getLocation ( String id ) { return locations.get ( id ) ; } public void setLocation ( String id , int x , int y ) { if ( locations.replace ( id , new Point ( x , y ) ) == null ) throw new IllegalArgumentException ( `` invalid vehicle name : `` + id ) ; } // Alternate version of getLocations ( Listing 4.8 ) public Map < String , Point > getLocationsAsStatic ( ) { return Collections.unmodifiableMap ( new HashMap < String , Point > ( locations ) ) ; } }"
"class Calculate { int x , y ; final int g = 5 ; //Constructor public Calculate ( int a , int b ) { x = a ; y = b ; } public int sumAddG ( ) { return ( x+y+g ) ; } //comparing method public boolean same ( Calculate in ) { if ( this.sumAddG ( ) == in.sumAddG ( ) ) { // < -- This is what I am curious about return true ; } else { return false ; } }"
"SELECT a , b , cFROM tWHERE ( id1 = : p_id1 OR : p_id1 IS NULL ) AND ( id2 = : p_id2 OR : p_id2 IS NULL ) CREATE FUNCTION func ( IN p_id1 BIGINT , IN p_id2 BIGINT ) ... $ BODY $ BEGIN ... END ; $ BODY $ getSession ( ) .doWork ( connection - > { ResultSet rs = connection.createStatement ( ) .executeQuery ( `` select * from func ( `` +id1+ '' , '' +id2+ '' ) '' ) ; ... } )"
Student { String id ; String grade ; Int age ; }
@ SomeAnnotation ( Something ) @ SomeOtherAnnotation @ SomeLastAnnotation ( SomethingElse ) class Foo { /* ... */ } @ MySuperAnnotationclass Foo { /* ... */ }
明治二十三年十一月二十九日
Unrecognized option : -'destination'Error : Could not create the Java Virtual Machine.Error : A fatal exception has occurred . Program will exit.Press any key to continue . . . @ echo offsetlocal EnableDelayedExpansion EnableExtensions set FILETYPE= % ~n0set CLASSPATH=jar1.jarset CLASSPATH= % CLASSPATH % ; anotherjar.jarecho % CLASSPATH % java -DjobName= % FILETYPE % -Ddatabase.host=127.0.0.1 -Ddatabase.name=db1 -Ddatabase.username=user1 -Ddatabase.password=password1 -Xms128M -Xmx1024M com.temp.util.manual.serial.Assignment -folder C : \\temp\\ -destination C : \\temp\\out.csvcall Cleanup.batendlocal
interface A { void abc ( ) ; } interface B extends A { @ Override void abc ( ) ; } interface C extends B { void abc ( ) ; }
//an example instance lives all application life cycle 24x7public class Example { private Object longLived = new Object ( ) ; public void a ( ) { var shortLived = new ShortLivedObject ( longLived ) ; // longLived now is attribute shortLived.doSomething ( ) ; } public void b ( ) { new ShortLivedObject ( ) .doSomething ( new Object ( ) ) ; // actually now is shortlived } }
myClass test = new myClass ( ) ;
"class BaseClass implements IData ( ) ; class ChildClassA ( ) extends BaseClass ; class ChildClassB ( ) extends BaseClass ; List < BaseClass > aList = new ArrayList < ChildClassA > ( ) List < ? extends IData > aList for pointint to either ArrayList < ChildClassA > ( ) , or ArrayList < ChildClassB > ( ) List < ? extends IData > aList = new ArrayList < ChildClassA > ( ) ; ListData < IData > outputList = ( List < IData > ) aListList < ? extends IData > aList = new ArrayList < ChildClassB > ( ) ; ListData < IData > outputList = ( List < IData > ) aList"
if ( `` UK '' .equals ( country ) ) name = `` United Kingdom '' ; if ( `` GE '' .equals ( country ) ) name = `` Germany '' ; if ( `` FR '' .equals ( country ) ) name = `` France '' ; if ( `` IT '' .equals ( country ) ) name = `` Italy '' ; [ ... ] switch ( country ) { case `` UK '' : name = `` United Kingdom '' ; break ; case `` GE '' : name = `` Germany '' break ; case `` FR '' : name = `` France '' ; break ; case `` IT '' : name = `` Italy '' break ; [ ... ]
"public static void doSomethingForEachEntry ( Map < String , Integer > someMap ) { for ( String key : someMap.keySet ( ) ) { doSomething ( someMap.get ( key ) ) ; } } public static void doSomethingForEachEntry ( Map < String , Integer > someMap ) { for ( Integer value : someMap.values ( ) ) { doSomething ( value ) ; } }"
"public static < T > T mock ( Class < T > classToMock ) { ... } IState < StateId , Event > mockState = Mockito.mock ( IState.class ) ; Type safety : The expression of type IState needs unchecked conversion to conform to IState < StateId , Event > IState < StateId , Event > mockState = Mockito.mock ( IState < StateId , Event > .class ) ; IState < StateId , Event > mockState = Mockito.mock ( IState.class < StateId , Event > ) ;"
"public class Song extends DigitalMedia { private String artist ; private String album ; private String name ; private long size ; public Song ( String aName , long aSize , String aArtist , String aAlbum ) { super ( aName , aSize ) ; setArtist ( aArtist ) ; setAlbum ( aAlbum ) ; }"
"public class ClassOne { private ClassTwo classTwo = new ClassTwo ( ) ; public synchronized void setClassTwo ( int val1 , int val2 ) { classTwo.setVal ( val1 ) ; classTwo.setVal2 ( val2 ) ; } public static void main ( String [ ] args ) { ClassOne classOne = new ClassOne ( ) ; classOne.setClassTwo ( 10 , 100 ) ; } } public class ClassTwo { private int val ; private int val2 ; public synchronized void setVal ( int val ) { this.val = val ; } public synchronized void setVal2 ( int val2 ) { this.val2 = val2 ; } } public class ClassTwo { private int val ; private int val2 ; public void setVal ( int val ) { this.val = val ; } public void setVal2 ( int val2 ) { this.val2 = val2 ; } }"
"public class GenericCollection < T > { private Object [ ] data ; public GenericCollection ( ) { // Backing array is a plain object array . this.data = new Object [ 10 ] ; } @ SuppressWarnings ( `` unchecked '' ) public T get ( int index ) { // And we just cast to appropriate type when needed . return ( T ) this.data [ index ] ; } } for ( MyObject obj : genericCollection ) { obj.myObjectMethod ( ) ; } public class GenericCollection < T > { private T [ ] data ; @ SuppressWarnings ( `` unchecked '' ) public GenericCollection ( Class < T > type ) { // Create a type specific array . this.data = ( T [ ] ) Array.newInstance ( type , 10 ) ; } public T get ( int index ) { // No unsafe casts needed . return this.data [ index ] ; } }"
"Comparator < SomeType > c = Comparator.comparing ( SomeType : :getNumber ) .thenComparing ( SomeType : :getType ) .thenComparing ( SomeType : :getSite ) .thenComparing ( SomeType : :getAddition ) .thenComparing ( SomeType : :getImportantFlag ) ; if ( c.compare ( old , new ) == 0 ) { ... } public static < T extends BaseType > boolean areFieldsEqual ( T left , T right , whatShouldIPutHere ... fields ) { }"
public static String [ ] getData ( ) throws IOException { int total = 0 ; int [ ] studentID = new int [ 127 ] ; String [ ] studentAnswers = new String [ 127 ] ; String line = reader.readLine ( ) ; String answerKey = line ; StringTokenizer tokens ; while ( ( line = reader.readLine ( ) ) ! = null ) { tokens = new StringTokenizer ( line ) ; studentID [ total ] = Integer.parseInt ( tokens.nextToken ( ) ) ; studentAnswers [ total ] = tokens.nextToken ( ) ; System.out.println ( total + `` `` +studentID [ total ] ) ; total++ ; } return studentAnswers ; }
"public String ( String original ) { int size = original.count ; char [ ] originalValue = original.value ; char [ ] v ; if ( originalValue.length > size ) { // The array representing the String is bigger than the new // String itself . Perhaps this constructor is being called // in order to trim the baggage , so make a copy of the array . int off = original.offset ; v = Arrays.copyOfRange ( originalValue , off , off+size ) ; } else { // The array representing the String is the same // size as the String , so no point in making a copy . v = originalValue ; } this.offset = 0 ; this.count = size ; this.value = v ; } if ( originalValue.length > size )"
public class Test { static class A < T > { } public static void main ( String arg [ ] ) { A < Integer > obj = new A ( ) { } ; if ( ( obj.getClass ( ) .getModifiers ( ) & Modifier.FINAL ) ! = 0 ) { System.out.println ( `` It is a final `` + obj.getClass ( ) .getModifiers ( ) ) ; } else { System.out.println ( `` It is not final `` + obj.getClass ( ) .getModifiers ( ) ) ; } } } It is not final 0
public class Main { public static void main ( String [ ] args ) { // n is some user input value int i = 0 ; while ( i < n ) { int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j++ ) { a [ j ] = i * j ; } i++ ; } } }
"public abstract class AbstractBootstrap < B extends AbstractBootstrap < B , C > , C extends Channel > implements Cloneable { ... }"
System.out.println ( ticker ) ; System.out.println ( detail ) ; IWM|0 # 0.0|0 # 0.0|0 # -4252 # 386|GLD|0 # 0.0|0 # 0.0|0 # -4704 # 818| System.out.println ( ticker.concat ( detail ) ) ; System.out.println ( ticker+detail ) ; StringBuffer sb = new StringBuffer ( ) ; sb.append ( ticker ) ; sb.append ( detail ) ; System.out.print ( sb.toString ( ) ) ; System.out.print ( ticker ) ; System.out.println ( detail ) ; GOLDBBLSI
log4j.appender.FILE=org.apache.log4j.rolling.RollingFileAppenderlog4j.appender.FILE.rollingPolicy=org.apache.log4j.rolling.FixedWindowRollingPolicylog4j.appender.FILE.rollingPolicy.maxIndex=13log4j.appender.FILE.triggeringPolicy=org.apache.log4j.rolling.SizeBasedTriggeringPolicylog4j.appender.FILE.triggeringPolicy.MaxFileSize=80log4j.appender.FILE.rollingPolicy.FileNamePattern=log/projectlog_ $ { current.date.time } . % i.log.gzlog4j.appender.FILE.rollingPolicy.ActiveFileName=log/project_log_ $ { current.date.time } .loglog4j.appender.FILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.FILE.layout.ConversionPattern= % m % n
public interface DataDAO { public void doSomething ( ) throws Exception ; } public class DataDAOJdbc implements DataDAO { public void doSomething ( ) throws Exception { //Implement } } public class DataDAOWebService implements DataDAO { public void doSomething ( ) throws Exception { //Implement } } public interface DataDAO { public void doSomething ( ) throws MyCoolException ; }
"Stream < Integer > infiniteStream = Stream.iterate ( 1 , i - > i + 1 ) ;"
"private static Float toFloat ( Float def , String str ) { try { return str ! = null ? Float.parseFloat ( str ) : def ; } catch ( NumberFormatException e ) { return def ; } }"
public class ListArg { public static void main ( String args [ ] ) { for ( int i=0 ; i < args.length ; i++ ) { System.out.println ( args [ i ] ) ; } } }
"BiFunction < Integer , Integer , Integer > biFunction = ( a , b ) - > a + b ; System.out.println ( biFunction.apply ( 10 , 60 ) ) ; BinaryOperator < Integer , Integer , Integer > binaryOperator = ( a , b ) - > a + b ;"
"If ( n == 1 ||n == 2 ||n == 3 ||n == 5 ||n == 9 ||n == 8 ||n == 7 ||n == 551 ||n == 17 ||n == 81 || etc etc ) { //Stuff } List list = { 1 , 3 , 5 , 7 , 9 , 12 , 14 , 16 , 18 , 19 , 21 , 23 , 25 , 27 , 30 , 32 , 34 , or 36 } if n is in list , then { }"
"public abstract class Character extends GameObject { Status status ; //fields , methods , etc . } public abstract class Monster extends Character { //fields , methods , etc } public class Hero extends Character { //fields , methods , etc } public enum Status { NORMAL , BURNT , POISONED , HEALED , FROZEN } public class FireGolem extends Monster { ... }"
FAILURE : Build failed with an exception . * Where : Build file '/Users/eladb/WorkspaceQa/java/UsersServer/build.gradle ' line : 98* What went wrong : A problem occurred evaluating root project 'UsersServer'. > No signature of method : org.gradle.api.tasks.testing.junit.JUnitOptions.includeGroups ( ) is applicable for argument types : ( java.lang.String ) values : [ NoDbTests ] test { useJUnit { includeCategories 'linqmap.users.interfaces.NoDbTests ' // excludeCategories 'org.gradle.junit.CategoryB ' } }
"public class Person { public String name ; public Integer age ; } public class Vehicle { public String make ; public String model ; } public String [ ] getFields ( ) { return new String [ ] { `` name '' , `` age '' } ; }"
"DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder ( ) .appendValue ( ChronoField.DAY_OF_MONTH , 2 ) .appendValue ( ChronoField.MONTH_OF_YEAR , 2 ) .appendValue ( ChronoField.YEAR_OF_ERA , 2 ) .toFormatter ( ) ; System.out.println ( LocalDate.parse ( `` 100199 '' , dateTimeFormatter ) ) ; DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder ( ) .appendPattern ( `` ddMMyy '' ) .toFormatter ( ) ; System.out.println ( LocalDate.parse ( `` 100199 '' , dateTimeFormatter ) ) ;"
Xvfb :19 -screen 0 1024x768x16 & export DISPLAY=:19firefox & Ubuntu 16.04.3Selenium 2.53.1Firefox 55.0Jenkins 2.60.3
"Stream.concat ( ts , ts.map ( f ) ) ; java.lang.IllegalStateException : stream has already been operated upon or closed"
md5 ( text ) .equals ( text )
"byte [ ] bytes1 = { 55 , 93 , 97 , -13 , 4 , 8 , 29 , 26 , -68 , -4 , -26 , -94 , -37 , 32 , -41 , 88 } ; String str1 = new String ( bytes1 , '' UTF-8 '' ) ; System.out.println ( str1.length ( ) ) ; byte [ ] out1 = str1.getBytes ( `` UTF-8 '' ) ; System.out.println ( out1.length ) ; System.out.println ( Arrays.toString ( out1 ) ) ; byte [ ] bytes2 = { 65 , -103 , -103 , 73 , 32 , 68 , 49 , 73 , -1 , -30 , -1 , -103 , -92 , 11 , -32 , -30 } ; String str2 = new String ( bytes2 , '' UTF-8 '' ) ; System.out.println ( str2.length ( ) ) ; byte [ ] out2 = str2.getBytes ( `` UTF-8 '' ) ; System.out.println ( out2.length ) ; System.out.println ( Arrays.toString ( out2 ) ) ; 1527 [ 55 , 93 , 97 , -17 , -65 , -67 , 4 , 8 , 29 , 26 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , 32 , -17 , -65 , -67 , 88 ] 1531 [ 65 , -17 , -65 , -67 , -17 , -65 , -67 , 73 , 32 , 68 , 49 , 73 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , 11 , -17 , -65 , -67 ] 1527 [ 55 , 93 , 97 , -17 , -65 , -67 , 4 , 8 , 29 , 26 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , 32 , -17 , -65 , -67 , 88 ] 1634 [ 65 , -17 , -65 , -67 , -17 , -65 , -67 , 73 , 32 , 68 , 49 , 73 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , -17 , -65 , -67 , 11 , -17 , -65 , -67 , -17 , -65 , -67 ]"
"public int stackFrameTest ( int x ) { if ( x > 0 ) { System.out.println ( `` positive x '' ) ; } return -x ; } public int stackFrameTest ( int ) ; flags : ACC_PUBLIC Code : stack=2 , locals=2 , args_size=2 0 : iload_1 1 : ifle 12 4 : getstatic # 47 // Field java/lang/System.out : Ljava/io/PrintStream ; 7 : ldc # 85 // String positive x 9 : invokevirtual # 55 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 12 : iload_1 13 : ineg 14 : ireturn StackMapTable : number_of_entries = 1 frame_type = 12 /* same */ StackMapTable : number_of_entries = 1 frame_type = 255 /* full_frame */ offset_delta = 12 locals = [ double , float ] stack = [ double ]"
"public class Boo { public static int [ ] anything = new int [ ] { 2,3,4 } ; private static int [ ] something = new int [ ] { 5,6,7 } ; // this may be much bigger as well public static final int [ ] getAndClear ( ) { int [ ] st = something ; something = null ; return st ; } }"
String a = `` abc '' ; String b = `` abc '' ; String c = new String ( `` abc '' ) ;
"public static void validateAgainstXSD ( File file , File schemaFile , String namespace ) { try { SchemaFactory factory = SchemaFactory.newInstance ( `` http : //www.w3.org/2001/XMLSchema '' ) ; Schema xsdScheme = factory.newSchema ( schemaFile ) ; Validator validator = xsdScheme.newValidator ( ) ; ErrorHandler eh = new DefaultErrorHandler ( ) ; validator.setErrorHandler ( eh ) ; // Create namespace replacement filter NamespaceFilter nsf = new NamespaceFilter ( XMLReaderFactory.createXMLReader ( ) , namespace.intern ( ) ) ; // Load the XML source SAXSource source = new SAXSource ( nsf , new InputSource ( new FileInputStream ( file ) ) ) ; validator.validate ( source , null ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } private static class NamespaceFilter extends XMLFilterImpl { private String requiredNamespace ; public NamespaceFilter ( XMLReader parent ) { super ( parent ) ; } public NamespaceFilter ( XMLReader parent , String namespace ) { this ( parent ) ; requiredNamespace = namespace ; } @ Override public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( ! uri.equals ( requiredNamespace ) ) { uri = requiredNamespace ; } super.startElement ( uri , localName , qName , atts ) ; } }"
"List < List > resultSet = new ArrayList < > ( ) ; // did n't declare List < List < Long > > to keep it generic for both Long , and String.List < Long > tmp = new ArrayList < > ( ) ; tmp.add ( 1L ) ; tmp.add ( 20L ) ; resultSet.add ( tmp ) ; tmp = new ArrayList < > ( ) ; tmp.add ( 1L ) ; tmp.add ( 30L ) ; resultSet.add ( tmp ) ; tmp = new ArrayList < > ( ) ; tmp.add ( 2L ) ; tmp.add ( 10L ) ; resultSet.add ( tmp ) ;"
"NEWS2 , NEWS , NEWSFX = ( DESCRIPTION_LIST= ... )"
import java.util.Scanner ; public class CompanyAddress { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; test testObject = new test ( ) ; System.out.println ( `` Enter name : `` ) ; String input = scan.nextLine ( ) ; testObject.getName ( input ) ; System.out.println ( testObject.getName ( CompanyName ) ) ; } } import java.util.Scanner ; public class test { String Name ; public String getName ( String CompanyName ) { Name = CompanyName ; return Name ; } }
@ Override public int hashCode ( ) { return id ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) ! = obj.getClass ( ) ) return false ; Task other = ( Task ) obj ; if ( id ! = other.id ) return false ; return true ; }
"static < T > void f ( T a , T b ) { } public static void main ( String [ ] args ) { f ( Integer.MIN_VALUE , `` ... '' ) ; }"
// thread 1List < Object > list = supplier.get ( ) ; System.out.print ( `` list : `` + list + `` @ '' + getAddress ( list ) ) ; // thread 2List < Object > list = supplier.get ( ) ; System.out.print ( `` list : `` + list + `` @ '' + getAddress ( list ) ) ;
"import java.io . * ; class WeirdJava { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; String input = br.readLine ( ) ; HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; System.out.println ( `` Weird Java '' ) ; } } import java.util.HashMap ;"
ListList < ? super T > var = new ArrayListList < > ( ) ; List < ? extends List < ? super T > > work = var ; // ( 1 ) List < List < ? super T > > notWork = var ; // ( 1.1 ) List < List < ? super T > > explicit = ( List < List < ? super T > > ) var ; // ( 2 ) List < List < ? super T > > raw = ( ListList ) var ; // ( 3 ) List < List < ? super T > > copy = new ArrayList < > ( ) ; // ( 4 ) copy.addAll ( var ) ; // ( 4 )
"package com.userservice.usermanagement.models ; import java.util.HashSet ; import java.util.Set ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.DBRef ; import org.springframework.data.mongodb.core.mapping.Document ; @ Document ( collection = `` user_data '' ) public class User { /** * User model */ @ Id private String id ; private String username ; private String email ; private String password ; private String customername ; private String customerid ; private String description ; public String getCustomerid ( ) { return customerid ; } public void setCustomerid ( String customerid ) { this.customerid = customerid ; } public String getDescription ( ) { return description ; } public void setDescription ( String description ) { this.description = description ; } public String getCustomername ( ) { return customername ; } public void setCustomername ( String customername ) { this.customername = customername ; } @ DBRef private Set < Role > roles = new HashSet < > ( ) ; public User ( ) { } public User ( String username , String email , String customername , String customerid , String description , String password ) { this.username = username ; this.email = email ; this.customername = customername ; this.customerid = customerid ; this.description = description ; this.password = password ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this.username = username ; } public String getEmail ( ) { return email ; } public void setEmail ( String email ) { this.email = email ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this.password = password ; } public Set < Role > getRoles ( ) { return roles ; } public void setRoles ( Set < Role > roles ) { this.roles = roles ; } } package com.userservice.usermanagement.models ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Document ; @ Document ( collection = `` roles '' ) public class Role { /** * Model for role with all the attributes */ @ Id private String id ; private URole name ; public Role ( ) { } public Role ( URole name ) { this.name = name ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public URole getName ( ) { return name ; } public void setName ( URole name ) { this.name = name ; } } package com.userservice.usermanagement.models ; public enum URole { ROLE_USER , ROLE_ADMIN } @ PostMapping ( `` /adduser '' ) // @ PreAuthorize ( `` hasRole ( 'ADMIN ' ) '' ) public ResponseEntity < ? > registerUser ( @ Valid @ RequestBody SignupRequest signUpRequest ) { /* * This controller Creates new user based on all the entities for the user * */ if ( userRepository.existsByUsername ( signUpRequest.getUsername ( ) ) ) { return ResponseEntity .badRequest ( ) .body ( new MessageResponse ( `` Error : Username is already taken ! `` ) ) ; } if ( userRepository.existsByEmail ( signUpRequest.getEmail ( ) ) ) { return ResponseEntity .badRequest ( ) .body ( new MessageResponse ( `` Error : Email is already in use ! `` ) ) ; } // Create new user 's account User user = new User ( signUpRequest.getUsername ( ) , signUpRequest.getEmail ( ) , signUpRequest.getCustomername ( ) , signUpRequest.getCustomerid ( ) , signUpRequest.getDescription ( ) , encoder.encode ( signUpRequest.getPassword ( ) ) ) ; Set < String > strRoles = signUpRequest.getRoles ( ) ; Set < Role > roles = new HashSet < > ( ) ; if ( strRoles == null ) { Role userRole = roleRepository.findByName ( URole.ROLE_USER ) .orElseThrow ( ( ) - > new RuntimeException ( `` Error : Role is not found . `` ) ) ; roles.add ( userRole ) ; } else { strRoles.forEach ( role - > { switch ( role ) { case `` admin '' : Role adminRole = roleRepository.findByName ( URole.ROLE_ADMIN ) .orElseThrow ( ( ) - > new RuntimeException ( `` Error : Role is not found . `` ) ) ; roles.add ( adminRole ) ; break ; default : Role userRole = roleRepository.findByName ( URole.ROLE_USER ) .orElseThrow ( ( ) - > new RuntimeException ( `` Error : Role is not found . `` ) ) ; roles.add ( userRole ) ; } } ) ; } user.setRoles ( roles ) ; userRepository.save ( user ) ; return ResponseEntity.ok ( new MessageResponse ( `` User Added successfully ! `` ) ) ; } `` `"
public class Test { public static interface SomeInterface { } public static interface OtherInterface { } public static class Concrete implements SomeInterface { public < T extends Concrete > T getConcrete ( ) { return null ; } } public static void doStuff ( ) { Concrete c = new Concrete ( ) ; OtherInterface iCompile = c.getConcrete ( ) ; } } public class Test { public static interface SomeInterface { } public static class UnrelatedClass { } public static class Concrete implements SomeInterface { public < T extends Concrete > T getConcrete ( ) { return null ; } } public static void doStuff ( ) { Concrete c = new Concrete ( ) ; UnrelatedClass iCompile = c.getConcrete ( ) ; } }
public boolean isImportant ( String token ) { for ( Pattern pattern : patterns ) { return pattern.matches ( token ) .find ( ) ; } } public boolean isImportant ( String token ) { if ( importantList.contains ( token ) ) return true ; for ( Pattern pattern : patterns ) { return pattern.matches ( token ) .find ( ) ; } }
"359 360 final Entry < K , V > getEntry ( Object key ) { 361 int hash = ( key == null ) ? 0 : hash ( key.hashCode ( ) ) ; 362 for ( Entry < K , V > e = table [ indexFor ( hash , table.length ) ] ; 363 e ! = null ; 364 e = e.next ) { 365 Object k ; 366 if ( e.hash == hash & & 367 ( ( k = e.key ) == key || ( key ! = null & & key.equals ( k ) ) ) ) 368 return e ; 369 } 370 return null ; 371 }"
"foo.addBar ( bar ) ; // adds it bidirectionallybarRepository.save ( bar ) ; // JpaRepository foo.removeBar ( bar ) ; // removes it bidirectionallybarRepository.save ( bar ) ; // JpaRepository public class Foo { private Collection < FooBar > fooBars = new HashSet < > ( ) ; // constructor omitted for brevity @ OneToMany ( cascade = CascadeType.ALL , mappedBy = `` foo '' , fetch = FetchType.EAGER ) public Collection < FooBar > getFooBars ( ) { return fooBars ; } public void setFooBars ( Collection < FooBar > fooBars ) { this.fooBars = fooBars ; } // use this to maintain bidirectional integrity public void addBar ( Bar bar ) { FooBar fooBar = new FooBar ( bar , this ) ; fooBars.add ( fooBar ) ; bar.getFooBars ( ) .add ( fooBar ) ; } // use this to maintain bidirectional integrity public void removeBar ( Bar bar ) { // I do not want to disclose the code for findFooBarFor ( ) . It works 100 % , and is not reloading data from DB FooBar fooBar = findFooBarFor ( bar , this ) ; fooBars.remove ( fooBar ) ; bar.getFooBars ( ) .remove ( fooBar ) ; } } public class Bar { private Collection < FooBar > fooBars = new HashSet < > ( ) ; // constructor omitted for brevity @ OneToMany ( fetch = FetchType.EAGER , mappedBy = `` bar '' , cascade = CascadeType.ALL ) public Collection < FooBar > getFooBars ( ) { return fooBars ; } public void setFooBars ( Collection < FooBar > fooBars ) { this.fooBars = fooBars ; } } public class FooBar { private FooBarId id ; // embeddable class with foo and bar ( only ids ) private Foo foo ; private Bar bar ; // this is why I had to use this helper class ( FooBar ) , // else I could have made a direct @ ManyToMany between Foo and Bar private Double additionalInformation ; public FooBar ( Foo foo , Bar bar ) { this.foo = foo ; this.bar = bar ; this.additionalInformation = ... . // not important this.id = new FooBarId ( foo.getId ( ) , bar.getId ( ) ) ; } @ EmbeddedId public FooBarId getId ( ) { return id ; } public void setId ( FooBarId id ) { this.id = id ; } @ ManyToOne @ MapsId ( `` foo '' ) @ JoinColumn ( name = `` fooid '' , referencedColumnName = `` id '' ) public Foo getFoo ( ) { return foo ; } public void setFoo ( Foo foo ) { this.foo = foo ; } @ ManyToOne @ MapsId ( `` bar '' ) @ JoinColumn ( name = `` barid '' , referencedColumnName = `` id '' ) public Bar getBar ( ) { return bar ; } public void setBar ( Bar bar ) { this.bar = bar ; } // getter , setter for additionalInformation omitted for brevity }"
"public static void main ( String [ ] args ) { Class < ? > cls = Area.class ; Area a1 = new Area ( new Rectangle2D.Double ( 1 , 2 , 3 , 4 ) ) ; Area a2 = new Area ( new Rectangle2D.Double ( 1 , 2 , 3 , 4 ) ) ; System.out.println ( `` Areas equal : `` + a1.equals ( a2 ) ) ; // true Object o1 = ( Object ) a1 ; Object o2 = ( Object ) a2 ; System.out.println ( `` Objects equal : `` + o1.equals ( o2 ) ) ; // false // Given only cls , o1 , and o2 , how can I get .equals ( ) to return true ? System.out.println ( `` cls.cast ( ) approach : `` + cls.cast ( o1 ) .equals ( cls.cast ( o2 ) ) ) ; // false try { Method equalsMethod = cls.getMethod ( `` equals '' , cls ) ; // Exception thrown in most cases System.out.println ( `` Reflection approach : `` + equalsMethod.invoke ( o1 , o2 ) ) ; // true ( when cls=Area.class ) } catch ( Exception e ) { e.printStackTrace ( ) ; } }"
@ Overridepublic Object clone ( ) { return super.clone ( ) ; } A original = new A ( ) ; A cloned1 = original.clone ( ) ; // Eclipse marks this as errorA cloned2 = ( A ) original.clone ( ) ; // This is OK
public class Main { public static void main ( String [ ] args ) { System.out.println ( ) ; rec ( ) ; } private static int rec ( ) { try { return rec ( ) ; } catch ( StackOverflowError e ) { System.out.println ( `` Boo . `` ) ; return 0 ; } } }
"String [ ] RACES = { `` human '' , `` elf '' , `` small folk '' , `` orc '' , `` goblin '' , `` aasimar '' , `` tiefling '' } ; String [ ] RACES = { `` aasimar '' , `` elf '' , `` goblin '' , `` human '' , `` orc '' , `` small folk '' , `` tiefling '' } ;"
public class Agent { public List files = new ArrayList ( ) ; public void deliver ( ) { if ( files ! = null & & files.iterator ( ) .hasNext ( ) ) { File file = ( File ) files.iterator ( ) .next ( ) ; } files = new ArrayList ( ) ; } } public void run ( ) { agent.files = null ; } public void deliver ( ) { if ( files ! = null ) { Thread.currentThread ( ) .sleep ( 0 ) ; if ( files.iterator ( ) .hasNext ( ) ) { File file = ( File ) files.iterator ( ) .next ( ) ; } } files = new ArrayList ( ) ; }
public void zero ( ) { int sum = 0 ; for ( int i = 0 ; i < mArray.length ; ++i ) { sum += mArray [ i ] .mSplat ; } } public void one ( ) { int sum = 0 ; Foo [ ] localArray = mArray ; int len = localArray.length ; for ( int i = 0 ; i < len ; ++i ) { sum += localArray [ i ] .mSplat ; } }
class B extends C { } class C < T extends D > { } class D { } class B extends C { T t ; } class C < T extends D > { } class D { } class B extends C < T extends D > { }
package staticclass ; final class Outer { final public static class Inner { static String s = `` Black '' ; } static Extra Inner = new Extra ( ) ; //The inner class name and the object name of the class Extra are same and it is responsible for shadowing/hiding Inner.s } final class Extra { String s = `` White '' ; } final public class Main { public static void main ( String [ ] args ) { System.out.println ( Outer.Inner.s ) ; } }
"package org.hamcrest.core ... public static < T > Matcher < T > allOf ( Matcher < ? super T > first , Matcher < ? super T > second ) { List < Matcher < ? super T > > matchers = new ArrayList < Matcher < ? super T > > ( 2 ) ; matchers.add ( first ) ; matchers.add ( second ) ; return allOf ( matchers ) ; }"
public class Dog { public String bark ( ) { return `` Wuff '' ; } public String play ( Dog d ) { return `` Wuff '' + d.bark ( ) ; } } public class Fox extends Dog { public String bark ( ) { return `` Ringding '' ; } public String play ( Fox f ) { return `` Ringding '' + f.bark ( ) ; } } Fox foxi = new Fox ( ) ; Dog hybrid = new Fox ( ) ; System.out.println ( hybrid.play ( foxi ) ) ; // Output number 1System.out.println ( foxi.play ( hybrid ) ) ; // Output number 2
01 : java-lava : ~ cafedude $ jshell02 : | Welcome to JShell -- Version 1103 : | For an introduction type : /help intro04 : 05 : jshell > Integer a ; 06 : a == > null07 : | created variable a : Integer08 : 09 : jshell > a instanceof Integer ; 10 : $ 2 == > false11 : | created scratch variable $ 2 : boolean12 : 13 : jshell > a = 1 ; 14 : a == > 115 : | assigned to a : Integer16 : 17 : jshell > a instanceof Integer ; 18 : $ 4 == > true19 : | created scratch variable $ 4 : boolean20 : 21 : jshell > a = null ; 22 : a == > null23 : | assigned to a : Integer24 : 25 : jshell > a instanceof Integer ; 26 : $ 6 == > false27 : | created scratch variable $ 6 : boolean28 : 29 : jshell > a = 1 ; 30 : a == > 131 : | assigned to a : Integer32 : 33 : jshell > Integer a ; 34 : a == > null35 : | modified variable a : Integer36 : | update overwrote variable a : Integer37 : 38 : jshell > a instanceof Integer ; 39 : $ 9 == > true40 : | created scratch variable $ 9 : boolean
"public Method getDeclaredMethod ( String name , Class ... parameterTypes ) throws NoSuchMethodException , SecurityException { throw new RuntimeException ( `` Stub ! `` ) ; }"
//Leaf.java//simple use of the `` this '' keywordpublic class Leaf { int i = 0 ; Leaf increment ( ) { i++ ; return this ; } void print ( ) { System.out.println ( `` i = `` + i ) ; } public static void main ( String [ ] args ) { Leaf x = new Leaf ( ) ; x.increment ( ) .increment ( ) .increment ( ) .print ( ) ; } }
"String date = jsonobject.getString ( `` needbydate '' ) ; DateFormat df = new SimpleDateFormat ( `` MMM/dd/yyyy '' ) ; DateFormat sdf = new SimpleDateFormat ( `` yyyy-MM-dd'T'hh : mm : ssZ '' ) ; Date startDate = sdf.parse ( date ) ; String needbydate = df.format ( startDate ) .toString ( ) + '' '' ; String date=jsonobject.getString ( `` needbydate '' ) ; DateFormat df = new SimpleDateFormat ( `` MMM/dd/yyyy '' , Locale.ENGLISH ) ; DateFormat sdf = new SimpleDateFormat ( `` yyyy-MM-dd'T'hh : mm : ss '' , Locale.ENGLISH ) ; sdf.setTimeZone ( TimeZone.getTimeZone ( `` UTC '' ) ) ; Date startDate ; startDate = sdf.parse ( date ) ; needbydate = df.format ( startDate ) .toString ( ) + '' '' ;"
public/private final int importantNumber = 3 ;
"mQuestions=DictionaryDbWrapper.getInstance ( ) .getQuestionsSequence ( this.getIntent ( ) .getStringExtra ( ApplicationUtilities.TEST_CATEGORY_PARAMETER ) , 50 ) ; mQuestionsCount=mQuestions.size ( ) ; Log.e ( `` count '' , String.valueOf ( mQuestionsCount ) ) ; if ( mQuestionsCount==0 ) { Log.e ( `` 1 '' , `` 111 '' ) ; Toast.makeText ( this , `` В данной категории нет слов '' , Toast.LENGTH_LONG ) .show ( ) ; this.finish ( ) ; } makeQuestion ( ) ;"
void task1 ( ) { init ( ) ; while ( someCondition ) { doSomething ( ) ; } shutdown ( ) ; } void task2 ( ) { while ( someCondition ) { init ( ) ; doSomething ( ) ; shutdown ( ) ; } } Function setup ( Function f ) { init ( ) ; f ( ) ; shutdown ( ) ; } Function loop ( Function f ) { while ( someCondition ) { f ( ) ; } } void task1 ( ) { setup ( loop ( doSomething ) ) ; } void task2 ( ) { loop ( setup ( doSomething ) ) ; }
String test1 = null ; Scanner scan = new Scanner ( System.in ) ; test1 = scan.nextLine ( ) ; String alphaExp = `` ^ [ a-zA-Z0-9- ] * $ '' ; Pattern r = Pattern.compile ( alphaExp ) ; Matcher m = r.matcher ( test1 ) ; boolean flag = m.lookingAt ( ) ; System.out.println ( flag ) ;
"fun getCurrentTime ( ) : Mono < LocalDateTime > = databaseClient .execute ( `` SELECT NOW ( ) '' ) .asType < LocalDateTime > ( ) .fetch ( ) .first ( ) } fun getCurrentTime ( ) : Mono < LocalDateTime > = databaseClient .sql ( `` SELECT NOW ( ) '' ) .map { row : Row - > row.get ( 0 , LocalDateTime : :class.java ) ! ! } .one ( )"
public interface Foo < T > { } class Bar < T > implements Foo < Iterable < T > > { } class Test { void test ( Foo < ? extends Iterable < ? extends String > > foo ) { Bar < ? > bar = ( Bar < ? > ) foo ; } } Foo.java:9 : error : inconvertible types Bar < ? > bar = ( Bar < ? > ) foo ; ^ required : Bar < ? > found : Foo < CAP # 1 > where CAP # 1 is a fresh type-variable : CAP # 1 extends Iterable < ? extends String > from capture of ? extends Iterable < ? extends String > void test ( Foo < Iterable < String > > foo ) { Bar < ? > bar = ( Bar < ? > ) foo ; } void test ( Foo < Iterable < ? extends String > > foo ) { Bar < ? > bar = ( Bar < ? > ) foo ; }
"private long getLongField ( Object target , String fieldName ) throws NoSuchFieldException , IllegalAccessException { Field field = target.getClass ( ) .getDeclaredField ( fieldName ) ; field.setAccessible ( true ) ; long value = field.getLong ( target ) ; field.setAccessible ( false ) ; return value ; }"
Collection list = new LinkedList ( ) ; // Good ? LinkedList list = new LinkedList ( ) ; // Bad ?
Input : `` bcabc '' Output : `` abc '' Input : `` cbacdcbc '' Output : `` acdb '' public String removeDuplicateLetters ( String s ) { char [ ] c = s.toCharArray ( ) ; List < Character > list = new ArrayList < > ( ) ; for ( char ch : c ) { list.add ( ch ) ; } List < Character > newVal = list.stream ( ) .distinct ( ) .collect ( Collectors.toList ( ) ) ; String newStr = `` '' ; for ( char ch : newVal ) { newStr += ch ; } return newStr ; }
private void aboveCaller ( ) { /* ... here ? ... */ } public void caller ( ) { aboveCaller ( ) ; belowCaller ( ) ; } private void belowCaller ( ) { /* ... or here ? ... */ }
"SELECT DBMS_METADATA.GET_DDL ( 'TABLE ' , 'CONTRACT_TABLE ' , 'SCHEMA_NAME ' ) FROM DUAL PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; String sql = `` SELECT DBMS_METADATA.GET_DDL ( 'TABLE ' , 'CONTRACT_TABLE ' , 'SCHEMA_NAME ' ) FROM DUAL '' ; preparedStatement = connection.prepareStatement ( sql ) ; resultSet = preparedStatement.executeQuery ( ) ; if ( resultSet.next ( ) ) { Clob clob = resultSet.getClob ( 1 ) ; String str = clob.getSubString ( 1 , ( int ) clob.length ( ) ) ; return str ; } else { throw new DBPlatformException ( `` Object not available [ Schema : `` + schema + `` ] . [ Name : `` + objectName + `` ] ! `` ) ; } CREATE TABLE `` SCHEMA_NAME '' . `` CONTRACT_TABLE '' ( `` CONTRACT_ID '' NUMBER , `` START_DATE '' DATE , `` END_DATE '' DATE ) PCTFREE 0 PCTUSED 0 INITRANS 1 MAXTRANS 255 COMPRESS FOR QUERY HIGH NOLOGGING STORAGE ( BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT ) TABLESPACE `` TMP_SPACE '' PARTITION BY HASH ( `` CONTRACT_ID '' ) ( PARTITION `` P01 '' SEGMENT CREATION DEFERRED TABLESPACE `` TMP_SPACE '' COMPRESS FOR QUERY HIGH , PARTITION `` P02 '' SEGMENT CREATION DEFERRED TABLESPACE `` TMP_SPACE '' COMPRESS FOR QUERY HIGH , PARTITION `` P03 '' SEGMENT CREATION DEFERRED TABLESPACE `` TMP_SPACE '' COMPRESS FOR QUERY HIGH , PARTITION `` P04 '' SEGMENT CREATION DEFERRED TABLESPACE `` TMP_SPACE '' COMPRESS FOR QUERY HIGH , PARTITION `` P05 '' SEGMENT CREATION DEFERRED TABLESPACE `` TMP_SPACE '' COMPRESS FOR QUERY HIGH ) PARALLEL 32 CREATE TABLE `` SCHEMA_NAME '' . `` CONTRACT_TABLE '' ( `` CONTRACT_ID '' NUMBER , `` START_DATE '' DATE , `` END_DATE '' DATE ) PARTITION BY HASH ( `` CONTRACT_ID '' ) ( PARTITION `` P01 '' , PARTITION `` P02 '' , PARTITION `` P03 '' , PARTITION `` P04 '' , PARTITION `` P05 '' )"
"@ SuppressWarnings ( `` Convert2MethodRef '' ) public Consumer < String > lambdaPrintStringConsumer ( ) { return x - > System.out.println ( x ) ; } public Consumer < String > methodRefPrintStringConsumer ( ) { return System.out : :println ; } @ Testpublic void shouldSameFromFactoryMethod_lambda ( ) { Consumer < String > consumerA = lambdaPrintStringConsumer ( ) ; Consumer < String > consumerB = lambdaPrintStringConsumer ( ) ; Assert.assertSame ( consumerA , consumerB ) ; //consumerA == consumerB -- > true } @ Testpublic void shouldNotSameFromFactoryMethod_methodRef ( ) { Consumer < String > consumerA = methodRefPrintStringConsumer ( ) ; Consumer < String > consumerB = methodRefPrintStringConsumer ( ) ; Assert.assertNotSame ( consumerA , consumerB ) ; //consumerA == consumerB -- > false } @ SuppressWarnings ( `` Convert2MethodRef '' ) @ Testpublic void shouldNotSameFromLambda ( ) { Consumer < String > consumerA = s - > System.out.println ( s ) ; Consumer < String > consumerB = s - > System.out.println ( s ) ; Assert.assertNotSame ( consumerA , consumerB ) ; //consumerA == consumerB -- > false } public class FunctionalInterfaceTest { public static Consumer < String > methodRefFromStaticMethodStringConsumer ( ) { return FunctionalInterfaceTest : :print ; } public static void print ( String string ) { System.out.println ( string ) ; } ... } @ Testpublic void shouldSameFromFactoryMethod_methodRef ( ) { Consumer < String > consumerA = methodRefFromStaticMethodStringConsumer ( ) ; Consumer < String > consumerB = methodRefFromStaticMethodStringConsumer ( ) ; Assert.assertSame ( consumerA , consumerB ) ; //consumerA == consumerB -- > true }"
import java.util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; System.out.println ( `` Please type a number '' ) ; long n = in.nextLong ( ) ; System.out.println ( `` Thanks . `` ) ; long count = 0 ; for ( long i=0 ; i < =n ; i++ ) { if ( ( n+i ) == ( n^i ) ) { count++ ; if ( count % 1000000 == 0 ) System.out.println ( count ) ; } } System.out.println ( count ) ; } }
"{ `` Sample '' : { `` name '' : `` some name '' , `` key '' : `` some key '' } , `` Offering '' : { `` offer '' : `` some offer '' , `` amount '' : 100 } } //mapper is ObjectMapper ; //data is the above json in String formatMap vo = mapper.readValue ( data , Map.class ) ; Data vo = mapper.readValue ( data , Data.class ) ; @ Getter @ Setterpublic class Data { private Sample sample ; private Offering offering ; } @ Getter @ Setterpublic class Offering { public String offer ; public int amount ; } @ Getter @ Setterpublic class Sample { private String name ; private String key ; }"
"List < Integer > list = new ArrayList < > ( ) ; // 2 , 4 , 6 , 5 , 5list.add ( 2 ) ; list.add ( 4 ) ; list.add ( 6 ) ; list.add ( 5 ) ; list.add ( 5 ) ; Iterator < Integer > iter = list.iterator ( ) ; while ( iter.hasNext ( ) ) { int elem = iter.next ( ) ; if ( elem % 2 == 0 ) { iter.remove ( ) ; } } list.removeIf ( x - > x % 2 == 0 ) ; |0 ... ( 60 more bits here ) ... 000|0 ... ( 60 more bits here ) ... 000| 1L < < 65 // this will `` jump '' the first 64 bits , so this will actually become 00000 ... 10 . |0 ... ( 60 more bits here ) ... 010|0 ... ( 60 more bits here ) ... 1000| w - > number of elements that have to remain in the list ( 2 ) es - > the array itself ( [ 5 , 5 , 6 , 5 , 5 ] ) end - > equal to size , never changed void getRidOfElementsFromWToEnd ( ) { for ( int i=w ; i < end ; ++i ) { es [ i ] = null ; } size = w ; } private void shiftTailOverGap ( Object [ ] es , int w , int end ) { System.arraycopy ( es , end , es , w , size - end ) ; for ( int to = size , i = ( size -= end - w ) ; i < to ; i++ ) es [ i ] = null ; } System.arraycopy ( es , end , es , w , size - end ) ;"
"function countBoysAndWomen ( ) { var womenCounter = 0 ; var boysCounter = 0 ; for ( var p of persons ) { if ( p.isAdult ( ) & & p.isFemale ( ) ) womenCounter++ ; else if ( p.isChild ( ) & & p.isMale ( ) ) boysCounter++ ; } return { amountOfWomen : womenCounter , amountOfBoys : boysCounter } ; } private Counter countBoysAndWomen ( ) { Counter counter = new Counter ( ) ; for ( Person p : persons ) { if ( p.isBoy ( ) ) counter.addBoy ( ) ; else if ( p.isWomen ( ) ) counter.addWoman ( ) ; } return counter ; }"
Long scheduledTime = 1602258300000L ; Date date = new Date ( scheduledTime ) ; System.out.println ( `` Date obj : '' + date ) ; Date obj : Fri Oct 09 11:45:00 EDT 2020 Date obj : Fri Oct 09 21:15:00 IST 2020
"int [ ] intArray1 = { 1 , 4 , 2 , 5 , 6 , 7 , 2 } ; int [ ] intArray2 = { 1 , 4 , 2 , 5 , 6 , 7 , 2 } ; intArray1.equals ( intArray2 ) ; int [ ] intArray1 = { 1 , 4 , 2 , 5 , 6 , 7 , 2 } ; //2 is duplicatedArrays.binarySearch ( intArray1,2 ) ; int [ ] intArray3 = { 1 , 4 , 2 , 5 , 6 , 7 } ; // nothing is duplicatedArrays.binarySearch ( intArray1,2 ) ;"
"public class Test { public static void main ( String [ ] args ) { Bus bus1 = new Bus ( ) ; Bicycle bike1 = new Bicycle ( ) ; bike1.changeGear ( true ) ; Bus bus2 = new Bus ( ) ; Vehicle [ ] myFleet = { bus1 , bike1 , bus2 } ; // Note that Vehicle is an abstract class for ( Bus v : myFleet ) { // Trying to access every bus in the Vehicle array . I already v.issueTicket ( 1.50 ) ; // tried to get the computer to treat myFleet as a Bus array - does n't System.out.println ( v ) ; // work , sadly . } } }"
public class Class1 { } public class Class2 { } public interface Interface1 { } public class Test { public static void main ( String [ ] args ) { Class1 class1 = getClass1 ( ) ; Interface1 interface1 = getInterface1 ( ) ; mandatory ( getClass1 ( ) ) ; // prints `` T is not class2 '' mandatory ( getInterface1 ( ) ) ; // prints `` T is class2 '' mandatory ( class1 ) ; // prints `` T is not class2 '' mandatory ( interface1 ) ; // prints `` T is not class2 '' } public static < T > void mandatory ( T o ) { System.out.println ( `` T is not class2 '' ) ; } public static < T extends Class2 > void mandatory ( T o ) { System.out.println ( `` T is class2 '' ) ; } public static < T extends Class1 > T getClass1 ( ) { return null ; } public static < T extends Interface1 > T getInterface1 ( ) { return null ; } } $ /usr/lib/jvm/java-8-openjdk-amd64/bin/javac -source 1.7 -target 1.7 *java ; /usr/lib/jvm/java-8-openjdk-amd64/bin/java Testwarning : [ options ] bootstrap class path not set in conjunction with -source 1.71 warningT is not class2T is not class2T is not class2T is not class2 $ /usr/lib/jvm/java-8-openjdk-amd64/bin/javac *java ; /usr/lib/jvm/java-8-openjdk-amd64/bin/java Test T is not class2T is class2T is not class2T is not class2
< xsd : element name= '' Calling1 '' type= '' xsd : dateTime '' > < xjc extension= '' true '' schema= '' $ { basedir } /message.xsd '' destdir= '' $ { basedir } /src '' package= '' org.test '' / > < Calling1 > NOT_A_DATETIME < /Calling1 >
"import java.lang.reflect.Method ; public class ReflectionTest { private static Method test ; public ReflectionTest ( ) throws Exception { test = this.getClass ( ) .getMethod ( `` testMethod '' , null ) ; } public void testMethod ( ) { //execute code here } public static void main ( String [ ] args ) throws Exception { ReflectionTest rt = new ReflectionTest ( ) ; for ( int i = 0 ; i < 1000 ; i++ ) { rt.test.invoke ( null , null ) ; } for ( int i = 0 ; i < 1000 ; i++ ) { rt.testMethod ( ) ; } } }"
"private boolean addObject ( Animal toAdd , Animal defVal , Set < ? extends Animal > vals ) private boolean addObject ( Animal toAdd , Animal defVal , Set < ? super Animal > vals ) private < T > boolean addObject ( T toAdd , T defVal , Set < ? super T > vals ) ( ( Animal ) toAdd ) .getAnimalType ( )"
"public class Book { private int id ; private String title ; private String author ; private Double price ; public Book ( int id , String title , String author , Double price ) { this.id = id ; this.title = title ; this.author = author ; this.price = price ; } } public class BookWithHash { private int id ; private String title ; private String author ; private Double price ; public BookWithHash ( int id , String title , String author , Double price ) { this.id = id ; this.title = title ; this.author = author ; this.price = price ; } @ Overridepublic boolean equals ( final Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) ! = o.getClass ( ) ) return false ; final BookWithHash that = ( BookWithHash ) o ; if ( id ! = that.id ) return false ; if ( title ! = null ? ! title.equals ( that.title ) : that.title ! = null ) return false ; if ( author ! = null ? ! author.equals ( that.author ) : that.author ! = null ) return false ; return price ! = null ? price.equals ( that.price ) : that.price == null ; } @ Overridepublic int hashCode ( ) { int result = id ; result = 31 * result + ( title ! = null ? title.hashCode ( ) : 0 ) ; result = 31 * result + ( author ! = null ? author.hashCode ( ) : 0 ) ; result = 31 * result + ( price ! = null ? price.hashCode ( ) : 0 ) ; return result ; } } public class Main { public static void main ( String [ ] args ) throws RunnerException { Options opt = new OptionsBuilder ( ) .include ( Main.class.getSimpleName ( ) ) .forks ( 1 ) .build ( ) ; new Runner ( opt ) .run ( ) ; } @ Benchmark @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.MILLISECONDS ) public long bookWithHashKey ( ) { long sum = 0L ; for ( int i = 0 ; i < 10_000 ; i++ ) { sum += ( new BookWithHash ( i , `` Jane Eyre '' , `` Charlotte Bronte '' , 14.99 ) ) .hashCode ( ) ; } return sum ; } @ Benchmark @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.MILLISECONDS ) public long bookKey ( ) { long sum = 0L ; for ( int i = 0 ; i < 10_000 ; i++ ) { sum += ( new Book ( i , `` Jane Eyre '' , `` Charlotte Bronte '' , 14.99 ) ) .hashCode ( ) ; } return sum ; } }"
"// returns true if both are equal ( independent of scale ) and also checks against nullpublic static boolean isEqual ( BigDecimal val1 , BigDecimal val2 ) { // 1. check : both will be null or both will be non-null . if ( val1 ! = null ^ val2 ! = null ) return false ; // 2. check : if not null , then compare if both are equal return ! ( val2 ! = null & & val1.compareTo ( val2 ) ! = 0 ) ; } public static boolean isEqual ( BigDecimal val1 , BigDecimal val2 ) { return ! ( val1 ! = null ^ val2 ! = null ) & & ! ( val2 ! = null & & val1.compareTo ( val2 ) ! = 0 ) ; } // returns true , if both are null or both are equal // ( independent of their numbers scales ) public static boolean isEqual ( BigDecimal val1 , BigDecimal val2 ) { return val1 == null ? val2 == null : val2 ! = null & & val1.compareTo ( val2 ) == 0 ; }"
public Set < String > getRich ( ) { return ImmutableSet < String > ... . ; } public ImmutableSet < String > getRich ( ) { return ImmutableSet < String > ... . ; }
"< T > T get ( Class < T > fetchType ) { ... } String x = get ( String.class ) ; < R > R otherFunction ( R base ) { return get ( base.getClass ( ) ) ; } reason : no instance ( s ) of type variable ( s ) exist so that capture of ? extends Object conforms to Rinference variable T has incompatible bounds : equality constraints : capture of ? extends Object upper bounds : Object , R Class < ? extends CharSequence > stringClass = String.class ; CharSequence x = get ( stringClass ) ;"
"HashMap < Integer , Integer > hashMap = new HashMap < Integer , Integer > ( ) ; List < String > name = new ArrayList < String > ( ) ; letter.add ( `` a '' ) ; letter.add ( `` b '' ) ; letter.add ( `` c '' ) ; letter.add ( `` b '' ) ; letter.add ( `` a '' ) ; for ( int i = 0 ; i < letter.size ( ) ; i++ ) { for ( int j = 1 ; j < letter.size ( ) ; j++ ) { if ( letters.get ( i ) .equals ( letters.get ( j ) ) & & i ! = j ) { hashMap.put ( i , j ) ; } } } System.out.println ( hashMap ) ; //o/p : { 0=4 , 1=3 , 3=1 } List < int [ ] > myList = new ArrayList < int [ ] > ( ) ; Iterator entries = hashMap.entrySet ( ) .iterator ( ) ; while ( entries.hasNext ( ) ) { Map.Entry entry = ( Map.Entry ) entries.next ( ) ; Integer key = ( Integer ) entry.getKey ( ) ; Integer value = ( Integer ) entry.getValue ( ) ; myList.add ( new int [ ] { key , hashMap.get ( key ) } ) ; } System.out.println ( myList.toString ( ) ) ; //O/P : [ [ I @ 380fb434 , [ I @ 668bc3d5 , [ I @ 3cda1055 ]"
"public TokenNamespace.ideas.mace.TokenResponse getToken ( TokenNamespace.ideas.mace.TokenRequest tokenRequest ) throws java.rmi.RemoteException { return null ; } public TokenNamespace.ideas.mace.TokenResponse getToken2 ( TokenNamespace.ideas.mace.TokenRequest tokenRequest , boolean stopOnAnyError , TokenNamespace.ideas.mace.EACommand [ ] command , TokenNamespace.ideas.mace.HttpHeader [ ] httpHeader ) throws java.rmi.RemoteException { return null ; }"
"public boolean possibleToAddTask ( LocalDate taskDate , final String username ) { List < Task > userTasklist = find ( username ) .getTaskList ( ) ; for ( Task task : userTasklist ) { if ( task.getDate ( ) .equals ( taskDate ) ) { return false ; } } return true ; } public boolean possibleToAddTask ( LocalDate taskDate , final String username ) { List < Task > userTasklist = find ( username ) .getTaskList ( ) ; try { userTasklist.stream ( ) .filter ( n - > n.getDate ( ) .equals ( taskDate ) ) .findFirst ( ) .get ( ) ; return true ; } catch ( NoSuchElementException e ) { return false ; } }"
"for ( int i = 0 ; i < max ; i++ ) { // do stuff with i } List < Integer > indices = IntStream.range ( 0 , max ) .boxed ( ) toCollection ( ( ) - > new ArrayList ( max ) ) ) ; Collections.shuffle ( indices ) ; for ( int i = 0 ; i < max ; i++ ) { int index = indices.get ( i ) ; // do stuff with index } IntStream.range ( 0 , max ) .shuffled ( ) // this method does n't exist .forEach ( IntConsumer : :accept ) ;"
public MakeQuery ( Callable < ArrayList < ? extends A > ) { ... } Callable < ArrayList < B > > callable = new Callable < ArrayList < B > > ( ) { ... } ; MakeQuery makeQuery = new MakeQuery ( callable ) ;
"10-A10-B11-C11-A 10 , [ A , B ] 11 , [ C , A ] Map < String , List < String > > seqCpcGroupMap = pendingCpcList.stream ( ) .map ( rec - > { String [ ] cpcRec = rec.split ( `` - '' ) ; return new Tuple2 < > ( cpcRec [ 0 ] , cpcRec [ 1 ] ) } ) .collect ( Collectors.groupingBy ( x- > x . ) ) Map < String , List < String > > seqCpcGroupMap = pendingCpcList.stream ( ) .map ( rec - > { String [ ] cpcRec = rec.split ( `` - '' ) ; return Arrays.asList ( cpcRec [ 0 ] , cpcRec [ 1 ] ) ; } ) .collect ( Collectors.groupingBy ( x- > ( ArrayList < String > ) x [ 0 ] ) ) ;"
"/** * Returns an < a href= '' Collection.html # unmodview '' > unmodifiable view < /a > of the * specified map . Query operations on the returned map `` read through '' * to the specified map , and attempts to modify the returned * map , whether direct or via its collection views , result in an * { @ code UnsupportedOperationException } . < p > * * The returned map will be serializable if the specified map * is serializable . * * @ param < K > the class of the map keys * @ param < V > the class of the map values * @ param m the map for which an unmodifiable view is to be returned . * @ return an unmodifiable view of the specified map . */ public static < K , V > Map < K , V > unmodifiableMap ( Map < ? extends K , ? extends V > m ) { return new UnmodifiableMap < > ( m ) ; } public static < K , V > Map < K , V > unmodifiableMap ( Map < ? extends K , ? extends V > m ) { if ( m instanceof UnmodifiableMap ) { return m ; } return new UnmodifiableMap < > ( m ) ; }"
"DatabaseMetaData dbmd=con.getMetaData ( ) ; ResultSet result = dbmd.getProcedures ( null , Ousername , null ) ;"
import java.util.Random ; import java.util.Vector ; public class Main { public static Vector < Integer > list1 = new Vector < Integer > ( ) ; public static void main ( String [ ] args ) throws InterruptedException { System.out.println ( `` Main started ! `` ) ; Thread t1 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { System.out.println ( `` writer started ! `` ) ; Random rand = new Random ( ) ; for ( int i=0 ; i < 10 ; i++ ) { int x = rand.nextInt ( 100 ) ; list1.add ( x ) ; System.out.println ( `` writer : `` + x ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } } } ) ; Thread t2 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { System.out.println ( `` reader started ! `` ) ; while ( ! list1.isEmpty ( ) ) { int x = list1.remove ( 0 ) ; System.out.println ( `` reader : `` +x ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } } } ) ; t2.start ( ) ; t1.start ( ) ; t1.join ( ) ; t2.join ( ) ; }
"public void Set ( double value , int row , int column ) { //assemble the long key , placing row and column in adjacent sets of bits long key = ( long ) row < < SIZE_BIT_MAX ; // ( SIZE_BIT_MAX is 32 ) key += column ; elements.put ( key , value ) ; } public void Set ( double value , int row , int column ) { //create a distinct but smaller key ( around 32 bits max ) long key = ( long ) ( row * matrixSize ) + column ; elements.put ( key , value ) ; }"
"public void recordSnapshot ( Context context ) { TinyDB settings = new TinyDB ( context ) ; int boot_id = settings.getInt ( AppPreferences.BOOT_ID ) ; PackageManager pm = context.getPackageManager ( ) ; for ( ApplicationInfo app : pm.getInstalledApplications ( 0 ) ) { String androidOS = Build.VERSION.RELEASE ; int currentapiVersion = android.os.Build.VERSION.SDK_INT ; long tx = 0 ; long rx = 0 ; int uid = app.uid ; if ( currentapiVersion < = Build.VERSION_CODES.JELLY_BEAN ) { File dir = new File ( `` /proc/uid_stat/ '' ) ; String [ ] children = dir.list ( ) ; List < Integer > uids = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < children.length ; i++ ) { uid = Integer.parseInt ( children [ i ] ) ; String uidString = String.valueOf ( uid ) ; File uidFileDir = new File ( `` /proc/uid_stat/ '' + uidString ) ; File uidActualFile = new File ( uidFileDir , `` tcp_rcv '' ) ; StringBuilder text = new StringBuilder ( ) ; try { BufferedReader br = new BufferedReader ( new FileReader ( uidActualFile ) ) ; String line ; while ( ( line = br.readLine ( ) ) ! = null ) { Log.d ( String.valueOf ( uid ) , line ) ; //this returns the amount of data received for the particular uid rx = Long.parseLong ( String.valueOf ( uid ) ) ; text.append ( line ) ; text.append ( '\n ' ) ; } } catch ( IOException e ) { //handle this } uids.add ( id ) ; } } else { tx = TrafficStats.getUidTxBytes ( uid ) ; rx = TrafficStats.getUidRxBytes ( uid ) ; } } public void recordSnapshot ( Context context ) { TinyDB settings = new TinyDB ( context ) ; int boot_id = settings.getInt ( AppPreferences.BOOT_ID ) ; ConnectivityManager cm = ( ConnectivityManager ) context.getSystemService ( Context.CONNECTIVITY_SERVICE ) ; NetworkInfo info = cm.getActiveNetworkInfo ( ) ; int networkType = NetworkState.GetNetworkState ( context , info , `` DataUsageRecorder '' ) ; // wifi , data , data roaming // Get all apps PackageManager pm = context.getPackageManager ( ) ; for ( ApplicationInfo app : pm.getInstalledApplications ( 0 ) ) { String androidOS = Build.VERSION.RELEASE ; int currentapiVersion = android.os.Build.VERSION.SDK_INT ; long tx = 0 ; long rx = 0 ; int uid = app.uid ; if ( currentapiVersion < = Build.VERSION_CODES.JELLY_BEAN_MR2 ) { File dir = new File ( `` /proc/uid_stat/ '' ) ; String [ ] children = dir.list ( ) ; List < Integer > uids = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < children.length ; i++ ) { uid = Integer.parseInt ( children [ i ] ) ; String uidString = String.valueOf ( uid ) ; File uidFileDir = new File ( `` /proc/uid_stat/ '' + uidString ) ; File uidActualFile = new File ( uidFileDir , `` tcp_rcv '' ) ; StringBuilder text = new StringBuilder ( ) ; try { BufferedReader br = new BufferedReader ( new FileReader ( uidActualFile ) ) ; String line ; while ( ( line = br.readLine ( ) ) ! = null ) { Log.d ( String.valueOf ( uid ) , line ) ; //this returns the amount of data received for the particular uid rx = Long.parseLong ( String.valueOf ( uid ) ) ; //text.append ( line ) ; //text.append ( '\n ' ) ; } } catch ( IOException e ) { //handle this } uids.add ( uid ) ; } } else { tx = TrafficStats.getUidTxBytes ( uid ) ; rx = TrafficStats.getUidRxBytes ( uid ) ; } if ( ( tx == 0 || rx == 0 ) ) { // Skip inactive items continue ; } else if ( Globals.DEBUG & & ( tx < DEBUG_5MB & & rx < DEBUG_5MB ) ) { // Let 's skip all the BS for quick testing continue ; } // Get package name String package_name ; try { CharSequence name = pm.getApplicationLabel ( app ) ; package_name = name ! = null ? name.toString ( ) : `` '' ; } catch ( Exception e ) { e.printStackTrace ( ) ; package_name = `` '' ; } AppUsage totals ; AppUsage appUsage ; // Get current data entry for app //appUsage = appUsageDao.queryBuilder ( ) .where ( AppUsageDao.Properties.App_uid.eq ( uid ) , AppUsageDao.Properties.Type.eq ( networkType ) , AppUsageDao.Properties.Boot_id.eq ( boot_id ) ) .limit ( 1 ) .unique ( ) ; // Get last recorded totals since device boot totals = appUsageDao.queryBuilder ( ) .where ( AppUsageDao.Properties.App_uid.eq ( uid ) , AppUsageDao.Properties.Type.eq ( NetworkState.ALL ) , AppUsageDao.Properties.Boot_id.eq ( boot_id ) ) .limit ( 1 ) .unique ( ) ; long tx_diff = tx ; long rx_diff = rx ; if ( totals ! = null ) { // Get difference , and update tx_diff -= totals.getTx ( ) ; rx_diff -= totals.getRx ( ) ; totals.setTx ( tx ) ; totals.setRx ( rx ) ; } else { // add new master totals = new AppUsage ( null , new Date ( ) , uid , package_name , NetworkState.ALL , tx_diff , rx_diff , 0 , 0 , boot_id ) ; } // add new app appUsage = new AppUsage ( null , new Date ( ) , uid , package_name , networkType , tx_diff , rx_diff , 0 , 0 , boot_id ) ; /*if ( appUsage == null ) { // Create new appUsage = new AppUsage ( null , new Date ( ) , uid , package_name , networkType , tx , rx , 0 , 0 , boot_id ) ; } else { // Update appUsage.setTx ( tx ) ; appUsage.setRx ( rx ) ; } */ try { // master appUsageDao.insertOrReplace ( totals ) ; } catch ( DaoException e ) { e.printStackTrace ( ) ; } try { appUsageDao.insertOrReplace ( appUsage ) ; } catch ( DaoException e ) { e.printStackTrace ( ) ; } //apps.put ( app.uid , new DataUsageItem ( app.uid , app.packageName , pm.getApplicationLabel ( app ) .toString ( ) ) ) ; } }"
"public void doSomething ( Object obj ) { //do something with obj } public void doSomething ( String str ) { //do something similar to str , but apply some custom //processing for String 's } Object o = new String ( `` s '' ) ; doSomething ( o ) ; // this will use the Object version ... class Dog { void makeSound ( ) { System.out.println ( `` woof '' ) ; } } class Chihuahua extends Dog { void makeSound ( ) { System.out.println ( `` yip '' ) ; } } Dog dog = new Chihuahua ( ) ; dog.makeSound ( ) ; //will print 'yip ' , the Chihuahua version ..."
public class Message { Message ( ) { } public Message ( String text ) { this.text = text ; }
"public List < Result > search ( Object a , Object b , boolean flag ) { //do some code logic here , common to the 3 controllers //at the middle there is : if ( flag ) { //code that affects 2 Controllers } else { //code affects only 1 } //some more common code //some more code with the flag if else }"
"DateTimeFormatter formatter = DateTimeFormatter.ofPattern ( `` EEE yyyy.MM.dd HH : mm : ss.SSS OOOO '' ) ; String timestamp = OffsetDateTime.ofInstant ( Instant.now ( ) , ZoneOffset.UTC ) .format ( formatter ) ; System.out.println ( timestamp ) ; Mon 2019.02.25 22:30:00.586 GMT Mon 2019.02.25 22:30:00.586 GMT+00:00"
[ myFunc [ XXXX ] ReturnType ] # ^ { : static true } [ myFunc [ ^ '' [ [ Ljava.lang.String ; '' ] clojure.lang.IFn ] java.lang.RuntimeException : Unmatched delimiter : ]
int x = 0 ; for ( int i = 0 ; i < n ; i++ ) for ( j = 0 ; j < n ; j++ ) { if ( j < i ) j = j + n ; else x = x + 1 ; }
"public class Eraser ( ) { public boolean matches ( Pencil p ) { //unimportant } } public class Pencil ( ) { } public boolean doMatch ( List < Eraser > erasers , List < Pencil > pencils ) { for ( Eraser e : erasers ) { boolean found = false ; Iterator it = pencils.iterator ( ) ; while ( it.hasNext ( ) ) { Pencil p = ( Pencil ) it.next ( ) ; if ( e.matches ( p ) ) { found = true ; it.remove ( ) ; break ; } } if ( ! found ) { return false ; } } return true ; }"
int i=123 ; byte b=i ; final int i=123 ; byte b=i ;
Stream < Object > stream = Stream.builder ( ) .build ( ) ; public class MyStream < T > implements Stream < T > { // implementation } Stream < Object > stream = new MyStream < > ( ) ;
"import javax.ws.rs.client . * ; import java.util.Timer ; import java.util.TimerTask ; ... boolean overThreshold = false ; int timeout = 60 ; // seconds TimerTask task = new TimerTask ( ) { @ Override public void run ( ) { overThreshold = true ; // return a message to user here saying their payment could not be processed } } ; new Timer ( true ) .schedule ( task , timeout * 1000 ) ; Client client = ClientBuilder.newClient ( ) ; WebTarget webTarget = client.target ( { url of payment processor } ) ; Invocation.Builder builder = webTarget.request ( ) .header ( HttpHeaders.CONTENT_TYPE , APPLICATION_JSON ) ; final Response response = builder.post ( Entity.json ( new Gson ( ) .toJson ( request ) ) ) ; if ( overThreshold ) { // send alert email here }"
Codebase : *Application-Library-Allowable-Codebase : *
public class SomeClass { String abc ; public boolean compare ( SomeClass otherClass ) { otherClass.getAbc ( ) .equals ( abc ) ; } } public class SomeClass { String abc ; public boolean compare ( SomeClass otherClass ) { otherClass.getAbc ( ) .equals ( getAbc ( ) ) ; } }
private static int chain ( int n ) { int count = 0 ; while ( n > 1 ) { if ( n % 2 == 0 ) { count++ ; //the value is not stored return chain ( n/2 ) ; } count++ ; //same thing return chain ( 3*n+1 ) ; } return count ; //prints the initial value ( 0 ) } }
"public class DataHolder < T > { private final T myValue ; public DataHolder ( T value ) { myValue = value ; } public T get ( ) { return myValue ; } // Wo n't compile public < R > DataHolder < R super T > firstNotNull ( DataHolder < ? extends R > other ) { return new DataHolder < R > ( myValue ! = null ? myValue : other.myValue ) ; } public static < R > DataHolder < R > selectFirstNotNull ( DataHolder < ? extends R > first , DataHolder < ? extends R > second ) { return new DataHolder < R > ( first.myValue ! = null ? first.myValue : second.myValue ) ; } } DataHolder < Number > r = new DataHolder < > ( 3 ) .firstNotNull ( new DataHolder < > ( 2.0 ) ) ; DataHolder < Object > r = new DataHolder < > ( `` foo '' ) .firstNotNull ( new DataHolder < > ( 42 ) ) ;"
"public class MyTextDisplay { public static void main ( String [ ] args ) { JFrame my_frame = new JFrame ( `` DisplaySomeText '' ) ; my_frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; JTextArea textArea = new JTextArea ( 5 , 20 ) ; textArea.setEditable ( false ) ; my_frame.add ( textArea ) ; my_frame.setVisible ( true ) ; //this would be in a separate method textArea.append ( `` Hello World '' ) ; } }"
"@ Componentclass MyClass < T , K > { public K doStuff ( T t ) { // some logic here } } @ AutowiredMyClass < Employee , Integer > myClass ; @ AutowiredMyClass < Manager , String > myClass ;"
"Consumer < T > start ( ) ; Consumer < T > performDailyAggregates ( ) ; Consumer < T > performLastNDaysAggregates ( ) ; Consumer < T > repopulateScores ( ) ; Consumer < T > updateDataStore ( ) ; private void performAllTasks ( T data ) { start ( ) .andThen ( performDailyAggregates ( ) ) .andThen ( performLastNDaysAggregates ( ) ) .andThen ( repopulateScores ( ) ) .andThen ( updateDataStore ( ) ) .accept ( data ) ; } // NOOP in the context further stands for 'anything - > { } 'private void performAllTasks ( Stream < Consumer < T > > consumerList , T data ) { consumerList.reduce ( NOOP , Consumer : :andThen ) .accept ( data ) ; } private void performAllTasks ( List < Consumer < T > > consumerList , T data ) { consumerList.stream ( ) .reduce ( NOOP , Consumer : :andThen ) .accept ( data ) ; }"
"@ Override public int onStartCommand ( Intent intent , int flags , int startId ) { final IntentFilter filter = new IntentFilter ( ) ; filter.addAction ( ACTION_OUT ) ; filter.addAction ( ACTION_IN ) ; if ( br_call == null ) { br_call = new CallBr ( ) ; registerReceiver ( br_call , filter ) ; } return super.onStartCommand ( intent , flags , startId ) ; } public void onReceive ( Context context , Intent intent ) { if ( intent.getAction ( ) .equals ( ACTION_IN ) ) { if ( ( bundle = intent.getExtras ( ) ) ! = null ) { state =bundle.getString ( TelephonyManager.EXTRA_STATE ) ; Log.d ( `` tag '' , `` state : : '' + state ) ; if ( ! wasRinging ) { if ( state.equals ( TelephonyManager.EXTRA_STATE_RINGING ) ) { inCall=bundle.getString ( TelephonyManager.EXTRA_INCOMING_NUMBER ) ; wasRinging = true ; Toast.makeText ( context , `` IN : `` + inCall , Toast.LENGTH_LONG ) .show ( ) ; } } if ( state.equals ( TelephonyManager.EXTRA_STATE_OFFHOOK ) ) { if ( wasRinging ) { Toast.makeText ( context , `` ANSWERED '' , Toast.LENGTH_LONG ) .show ( ) ; if ( recorder == null ) { File sampleDir = new File ( Environment.getExternalStorageDirectory ( ) , `` /RecordingDemo '' ) ; if ( ! sampleDir.exists ( ) ) { sampleDir.mkdirs ( ) ; } String file_name = inCall ; try { audiofile = File.createTempFile ( file_name , `` .amr '' , sampleDir ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } String path = Environment.getExternalStorageDirectory ( ) .getAbsolutePath ( ) ; recorder = new MediaRecorder ( ) ; recorder.setAudioSource ( MediaRecorder.AudioSource.VOICE_CALL ) ; recorder.setOutputFormat ( MediaRecorder.OutputFormat.AMR_NB ) ; recorder.setAudioEncoder ( MediaRecorder.AudioEncoder.AMR_NB ) ; recorder.setOutputFile ( audiofile.getAbsolutePath ( ) ) ; try { recorder.prepare ( ) ; recorder.start ( ) ; recordstarted = true ; } catch ( IllegalStateException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } } } if ( state.equals ( TelephonyManager.EXTRA_STATE_IDLE ) ) { wasRinging = false ; Toast.makeText ( context , `` REJECT || DISCONNECT '' , Toast.LENGTH_LONG ) .show ( ) ; if ( recordstarted ) { try { recorder.stop ( ) ; recordstarted = false ; } catch ( RuntimeException e ) { e.printStackTrace ( ) ; } } } } } if ( intent.getAction ( ) .equals ( ACTION_OUT ) ) { if ( ( bundle = intent.getExtras ( ) ) ! = null ) { outCall = intent.getStringExtra ( Intent.EXTRA_PHONE_NUMBER ) ; Toast.makeText ( context , `` OUT : `` + outCall , Toast.LENGTH_LONG ) .show ( ) ; } } } }"
byte x = 0 ; x = 128 ; x+= 999l ;
"private static final int n = 10000 ; public static void test0 ( ) { int m = 0 ; for ( int i = 0 ; i < n ; ++i ) { m = Math.max ( i , m ) ; } } public static void test1 ( ) { int m = 0 ; for ( int i = 0 ; i < n ; ++i ) { m = ( ( i > = m ) ? i : m ) ; } } | Test 0 | Test 1 | -- -- -- -- -- + -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -+-Average : | 51,77 ns | 13956,63 ns | Best : | 0,00 ns | 6514,00 ns | Worst : | 25,45 ms | 60,50 ms | Tries : | 16971233 | 16971233 |"
int succNodes = Arrays.stream ( children ) .mapToInt ( PRQuadNode : :count ) .sum ( ) ; if ( succNodes < = bucketingParam ) { /* do something */ }
"< ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : orientation= '' horizontal '' > < ImageView android : id= '' @ +id/it_image '' android : layout_width= '' wrap_content '' android : layout_height= '' match_parent '' android : src= '' @ drawable/home '' / > < TextView android : id= '' @ +id/it_text '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : paddingLeft= '' 20sp '' android : text= '' ABC '' android : textColor= '' @ color/black_overlay '' android : textSize= '' 20sp '' android : textStyle= '' bold '' / > < /LinearLayout > public class IconText { static LayoutInflater inflator ; public ImageView icon ; public TextView text ; public View view ; public IconText ( String title , int icon_id ) { Log.d ( `` IconText '' , `` Create '' ) ; view = inflator.inflate ( R.layout.icon_text , null ) ; text = ( TextView ) view.findViewById ( R.id.it_text ) ; icon = ( ImageView ) view.findViewById ( R.id.it_image ) ; text.setText ( title ) ; icon.setImageResource ( icon_id ) ; } public static void initInflator ( Context context ) { if ( inflator ! = null ) return ; Log.d ( `` IconText '' , `` Init inflator '' ) ; inflator = ( LayoutInflater ) context.getSystemService ( Context.LAYOUT_INFLATER_SERVICE ) ; } } public class IconTextAdapter extends BaseAdapter implements SpinnerAdapter { public ArrayList < IconText > items ; public IconTextAdapter ( ) { super ( ) ; items = new ArrayList < > ( ) ; } @ Override public int getCount ( ) { return items.size ( ) ; } @ Override public Object getItem ( int arg0 ) { return items.get ( arg0 ) ; } @ Override public long getItemId ( int position ) { return items.get ( position ) .view.getId ( ) ; } @ Override public View getView ( int position , View convertView , ViewGroup parent ) { return items.get ( position ) .view ; } } void initFilter ( ) { Log.d ( `` MainAction '' , `` Find Filter '' ) ; filter = ( Spinner ) findViewById ( R.id.filter ) ; Log.d ( `` MainAction '' , `` Create Adapter '' ) ; IconTextAdapter adapter = new IconTextAdapter ( ) ; Log.d ( `` MainAction '' , `` Create items '' ) ; for ( int i=0 ; i < ETypes.names.length ; i++ ) { IconText it = new IconText ( ETypes.names [ i ] , ETypes.icons [ i ] ) ; adapter.items.add ( it ) ; } Log.d ( `` MainAction '' , `` Setting adapter '' ) ; filter.setAdapter ( adapter ) ; } view = text"
String ever = `` ; ; '' ; for ( ever ) { ... }
"public class MyClass { public int number ; public string text ; } var newInstance = new MyClass { number = 1 , text = `` some text '' } ;"
"public V compute ( K key , BiFunction < ? super K , ? super V , ? extends V > remappingFunction ) public @ Nullable V compute ( K key , BiFunction < ? super K , ? super @ Nullable V , ? extends @ Nullable V > remappingFunction ) ; @ NonNull V value = map.compute ( key , ( k , v ) - > { if ( v == null ) { return new V ( ) ; } v.increment ( ) ; return v ; } ) ;"
"Stream < String > strings = Stream.of ( `` hello '' , `` world '' ) ; Stream < Function < String , String > > mappers = Stream.of ( t - > t+ '' ? `` , t - > t+ '' ! `` , t - > t+ '' ? `` ) ; strings.map ( mappers ) ; // not working for ( Function < String , String > mapper : mappers.collect ( Collectors.toList ( ) ) ) strings = strings.map ( mapper ) ; strings.forEach ( System.out : :println ) ;"
Integer [ ] result = IntStream.of ( intarray ) .boxed ( ) .toArray ( Integer [ ] : :new ) ;
"static int N = ( int ) 1e6 ; // succeeds @ N = ( int ) 1e8 with java -Xmx10m @ Testpublic void dropTest ( ) { assertThat ( drop ( N , naturals ( ) ) .head ( ) , is ( N+1 ) ) ; } // fails with OutOfMemoryError @ N = ( int ) 1e6 with java -Xmx10m @ Testpublic void nthTest ( ) { assertThat ( nth ( N , naturals ( ) ) , is ( N+1 ) ) ; } /** * a not-perfectly-lazy lazy sequence of ints . see LazierGarbageTest for a lazier one */static class LazyishSeq { final int head ; volatile Supplier < LazyishSeq > tailThunk ; LazyishSeq tailValue ; LazyishSeq ( final int head , final Supplier < LazyishSeq > tailThunk ) { this.head = head ; this.tailThunk = tailThunk ; tailValue = null ; } int head ( ) { return head ; } LazyishSeq tail ( ) { if ( null ! = tailThunk ) synchronized ( this ) { if ( null ! = tailThunk ) { tailValue = tailThunk.get ( ) ; tailThunk = null ; } } return tailValue ; } } static class Incrementing implements Supplier < LazyishSeq > { final int seed ; private Incrementing ( final int seed ) { this.seed = seed ; } public static LazyishSeq createSequence ( final int n ) { return new LazyishSeq ( n , new Incrementing ( n+1 ) ) ; } @ Override public LazyishSeq get ( ) { return createSequence ( seed ) ; } } static LazyishSeq naturals ( ) { return Incrementing.createSequence ( 1 ) ; } static LazyishSeq drop ( final int n , final LazyishSeq lazySeqArg ) { LazyishSeq lazySeq = lazySeqArg ; for ( int i = n ; i > 0 & & null ! = lazySeq ; i -= 1 ) { lazySeq = lazySeq.tail ( ) ; } return lazySeq ; } static int nth ( final int n , final LazyishSeq lazySeq ) { return drop ( n , lazySeq ) .head ( ) ; }"
for ( Object obj : Node.getIterable ( ) ) { //Do something to object here } Iterable < Object > iterable = new Iterable < Object > ( ) ; //populate iterable with objectsfor ( Object obj : iterable ) { //Do something }
"// public final class Gson { // ... // public < T > T fromJson ( JsonElement json , // Class < T > classOfT ) // throws JsonSyntaxException { // ... public sealed class Gson { public T FromJson < T > ( JsonElement json , System.Type Type ) { } } var gson = new Gson ( ) ; var customer = gson.FromJson < Customer > ( json , typeof ( Customer ) ) ; inline fun < reified T : Any > Gson.fromJson ( json ) : T = this.fromJson ( json , T : :class.java )"
class Outer { private class Inner { public int publicField ; protected int protectedField ; int packagePrivatefield ; private int privateField ; } void doSomethingWithFields ( ) { Inner inner = new Inner ( ) ; inner.publicField = 111 ; inner.protectedField = 111 ; inner.packagePrivatefield = 111 ; inner.privateField = 111 ; } }
public AbstractMailingDirections ( AbstractMailingDirections toCopy ) { this.message = toCopy.message ; this.defaultDirection = new DirectionLoad ( toCopy.defaultDirection ) ; for ( final DirectionLoad dls : toCopy.directionLoads ) { this.directionLoads.add ( new DirectionLoad ( dls ) ) ; } } public DirectionLoad ( DirectionLoad toCopy ) { this.direction = toCopy.direction ; this.transportationContract = toCopy.transportationContract ; this.pickUpTime = toCopy.pickUpTime ; this.acceptanceTime = toCopy.acceptanceTime ; this.acceptanceLocation = toCopy.acceptanceLocation ; this.information = toCopy.information ; }
"@ FunctionalInterfacepublic interface PersonFactory < P extends Person > { P create ( String firstname , String lastname ) ; // Return a person with no args default P create ( ) { // Is there a way I could make this work ? } } public class Person { public String firstname ; public String lastname ; public Person ( ) { } public Person ( String firstname , String lastname ) { this.firstname = firstname ; this.lastname = lastname ; } } PersonFactory < Person > personFactory = Person : :new ; Person p = personFactory.create ( ) ; // does not workPerson p = personFactory.create ( `` firstname '' , `` lastname '' ) ; // works"
"public static final Comparator < ServiceRequest > BY_ACTIVITY_DATE_DESC = Comparator.comparing ( ServiceRequest : :getActivityDate , Comparator.nullsLast ( Comparator.reverseOrder ( ) ) ) ; @ Testpublic void testComparator_BY_ACTIVITY_DATE_DESC ( ) { ServiceRequest olderRequest = new ServiceRequest ( ) ; olderRequest.setActivityDate ( DateUtil.yesterday ( ) ) ; ServiceRequest newerRequest = new ServiceRequest ( ) ; newerRequest.setActivityDate ( DateUtil.tomorrow ( ) ) ; ServiceRequest noActivityDateRequest = new ServiceRequest ( ) ; List < ServiceRequest > sortedRequests = Arrays.asList ( olderRequest , noActivityDateRequest , newerRequest ) .stream ( ) .sorted ( ServiceRequest.BY_ACTIVITY_DATE_DESC ) .collect ( Collectors.toList ( ) ) ; assertEquals ( sortedRequests.get ( 0 ) , newerRequest ) ; assertEquals ( sortedRequests.get ( 1 ) , olderRequest ) ; assertEquals ( sortedRequests.get ( 2 ) , noActivityDateRequest ) ; } private Map < Long , ServiceRequestViewBean > ServiceRequestsByUser ( List < ServiceRequest > serviceRequests ) { return serviceRequests.stream ( ) .sorted ( ServiceRequest.BY_ACTIVITY_DATE_DESC ) .collect ( Collectors.toMap ( serviceRequest - > serviceRequest.getRequester ( ) .getId ( ) , serviceRequest - > new ServiceRequestViewBean ( serviceRequest ) , ( firstServiceRequest , secondServiceRequest ) - > firstServiceRequest ) ) ; } ID ACTIVITY DATE365668 06-JUL-18 09:01:44365649 05-JUL-18 15:41:40365648 05-JUL-18 15:37:43365647 05-JUL-18 15:31:47 Before Sorting : 365647Before Sorting : 365648Before Sorting : 365649Before Sorting : 365668After Sorting : 365647After Sorting : 365648First request : 365647 , Second request : 365648After Sorting : 365649First request : 365647 , Second request : 365649After Sorting : 365668First request : 365647 , Second request : 365668 return serviceRequests.stream ( ) .sorted ( ServiceRequest.BY_ACTIVITY_DATE_DESC ) .collect ( Collectors.toMap ( serviceRequest - > serviceRequest.getRequester ( ) .getId ( ) , serviceRequest - > new ServiceRequestViewBean ( serviceRequest ) , ( serviceRequestA , serviceRequestB ) - > serviceRequestA , LinkedHashMap : :new ) ) ; return serviceRequests.stream ( ) .sorted ( ServiceRequest.BY_ACTIVITY_DATE_DESC ) .collect ( Collectors.toMap ( serviceRequest - > serviceRequest.getRequester ( ) .getId ( ) , serviceRequest - > new ServiceRequestViewBean ( serviceRequest ) , ( firstServiceRequest , secondServiceRequest ) - > { return Stream.of ( firstServiceRequest , secondServiceRequest ) .peek ( request - > System.out.println ( `` - Before Sort -\n\tRequester ID : `` + request.getRequester ( ) .getId ( ) + `` \n\tRequest ID : `` + request.getId ( ) ) ) .sorted ( ServiceRequest.BY_ACTIVITY_DATE_DESC ) .peek ( request - > System.out.println ( `` - After sort -\n\tRequester ID : `` + request.getRequester ( ) .getId ( ) + `` \n\tRequest ID : `` + request.getId ( ) ) ) .findFirst ( ) .get ( ) ; } ) ) ; - Before Sort - Requester ID : 67200307 Request ID : 365647- Before Sort - Requester ID : 67200307 Request ID : 365648- After sort - Requester ID : 67200307 Request ID : 365647- Before Sort - Requester ID : 67200307 Request ID : 365647- Before Sort - Requester ID : 67200307 Request ID : 365649- After sort - Requester ID : 67200307 Request ID : 365647- Before Sort - Requester ID : 67200307 Request ID : 365647- Before Sort - Requester ID : 67200307 Request ID : 365668- After sort - Requester ID : 67200307 Request ID : 365647"
< textFieldExpression class = `` java.lang.Integer '' > < ! [ CDATA [ $ F { quantity } ] ] > < /textFieldExpression > < textFieldExpression class = `` java.lang.String '' > < ! [ CDATA [ $ F { product } .getName ( ) ] ] > < /textFieldExpression >
return Arrays.stream ( sentence.split ( `` `` ) ) .filter ( /* do some filter to each value */ ) .map ( /* map this value*/ ) .collect ( Collectors.joining ( ) ) ;
void add ( Optional < T > element )
..stream ( ) .collect ( Collectors.summarizingInt ( Class : :someFunction ) )
"def someGenericAlgorithm ( param1 : String , param1 : String , param3 : String ) = { val triedResult1 = someFunction ( param1 ) triedResult1 match { case Success ( result1 ) = > val triedResult2 = someOtherFunction ( param2 ) triedResult2 match { case Success ( result2 ) = > val triedPolymorphicResult = someToBeReplacedAccordingToSpecificLogicFunction ( result1 , result2 , param3 ) triedPolymorphicResult match { case Success ( polymorphicResult ) = > doSomethingGeneric ( polymorphicResult ) ... . case Failure ( exception ) = > ... . } case Failure ( exception ) = > ... . } case Failure ( exception ) = > ... . } } def someToBeReplacedAccordingToSpecificLogicFunction ( result1 : Int , result2 : Int , param3 : String , unused1 : Option [ String ] = None , unused2 : Option [ String ] = None ) def aReplacementLogicFunction ( result1 : Int , result2 : Int , param3 : String , used1 : Option [ String ] , used2 : Option [ String ] ) def anotherReplacementLogicFunction ( result1 : Int , result2 : Int , param3 : String , used1 : MyClass , used2 : MyClass ) def refactoredOutCoreLogic ( param1 : String , param1 : String , param3 : String , polimorphicFunction : SignatureUnknown ) abstract class ResultKeeperRunnable implements Runnable { protected int param1 , param2 ; void setParam1 ( ... ) { ... } void setParam2 ( ... ) { ... } } class SomeToBeReplacedAccordingToSpecificLogicFunctionClass extends ResultKeeperRunnable { String param3 ; // ctor receiving all params omitted for brevity void run ( ) { // do specific Logic } } class AReplacementLogicFunctionClass extends ResultKeeperRunnable { String param3 , param4 , param5 ; // ctor receiving all params omitted for brevity void run ( ) { // do specific Logic } } class AnotherReplacementLogicFunctionClass extends ResultKeeperRunnable { String param3 ; MyClass param4 , param5 ; // ctor receiving all params omitted for brevity void run ( ) { // do specific Logic } } void refactoredOutCoreLogic ( String param1 , String param2 , String param3 , ResultKeeperRunnable polimorphicLogic ) { // error handling logic removed for brevity int result1 = someMethod ( param1 ) ; int result2 = someOtherMethod ( param2 ) ; polymorphicLogic.setParam1 ( result1 ) ; polymorphicLogic.setParam2 ( result2 ) ; polymorphicLogic.run ( ) ... }"
package oneClassTasks ; class Parent { static int age ; } class Child extends Parent { static { age = 5 ; System.out.println ( `` child 's static block '' ) ; } } public class XXX { public static void main ( String args [ ] ) { System.out.println ( `` Child age is : `` + Child.age ) ; } } Child age is : 0 ... [ Loaded java.security.BasicPermissionCollection from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ] [ Loaded oneClassTasks.XXX from file : /D : /temp/bin/ ] [ Loaded sun.launcher.LauncherHelper $ FXHelper from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ] [ Loaded java.lang.Class $ MethodArray from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ] [ Loaded java.lang.Void from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ] [ Loaded oneClassTasks.Parent from file : /D : /temp/bin/ ] [ Loaded oneClassTasks.Child from file : /D : /temp/bin/ ] Child age is : 0 [ Loaded java.lang.Shutdown from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ] [ Loaded java.lang.Shutdown $ Lock from C : \Program Files\Java\jre1.8.0_161\lib\rt.jar ]
"li.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { @ Overridepublic void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { TextView txtNummber = li.findViewById ( android.R.id.text2 ) } } ) ;"
"package com.fs ; /** * This interface is responsible for holding the closures when it comes to map . * It uses two generic types . One for the argument and one for the return type . * @ param < B > Generic type * @ param < A > Generic type */public interface Func < B , A > { /** * Function prototype m takes an argument of type A and returns a type B . * A map operation can produce a different type . * @ param x of type A * @ return type B */ B m ( A x ) ; } package com.fs ; /** * This interface is responsible for holding the closures when it comes to filter . * @ param < A > Generic type */public interface Pred < A > { /** * Function prototype m takes an argument of type A and returns a boolean . * A filter operation checks every element if it fits a predicate . * @ param x of type A * @ return boolean */ boolean m ( A x ) ; } package com.impl.list ; import com.fs . * ; public class CList < T > { T head ; CList < T > tail ; public CList ( T x , CList < T > xs ) { head = x ; tail = xs ; } static < A , B > CList < B > map ( Func < B , A > f , CList < A > xs ) { if ( xs==null ) { return null ; } return new CList < > ( f.m ( xs.head ) , map ( f , xs.tail ) ) ; } static < A , B > CList < B > maploop ( Func < B , A > f , CList < A > xs ) { // ? ? ? ? ? return null ; } static < A > CList < A > filter ( Pred < A > f , CList < A > xs ) { if ( xs == null ) { return null ; } if ( f.m ( xs.head ) ) { return new CList < > ( xs.head , filter ( f , xs.tail ) ) ; } return filter ( f , xs.tail ) ; } static < A > int length ( CList < A > xs ) { int ans =0 ; while ( xs ! = null ) { ++ans ; xs=xs.tail ; } return ans ; } } package com.impl.list ; import com.fs.Func ; import com.fs.Pred ; public class CListClient { public static CList < Integer > doubleAll ( CList < Integer > xs ) { Func < Integer , Integer > df = new Func < Integer , Integer > ( ) { @ Override public Integer m ( Integer x ) { return x * 2 ; } } ; return CList.map ( df , xs ) ; } public static int countNs ( CList < Integer > xs , final int n ) { Pred < Integer > pf = new Pred < Integer > ( ) { @ Override public boolean m ( Integer x ) { return x==n ; } } ; return CList.length ( CList.filter ( pf , xs ) ) ; } public static CList < Integer > doubleAllloop ( CList < Integer > xs ) { Func < Integer , Integer > df = new Func < Integer , Integer > ( ) { @ Override public Integer m ( Integer x ) { return x * 2 ; } } ; return CList.maploop ( df , xs ) ; } } package basic ; import com.impl.list.CList ; import com.impl.list.CListClient ; import org.junit.Test ; public class ListTester { CList < Integer > intlist_1 = new CList < > ( new Integer ( 1 ) , null ) ; CList < Integer > intlist_2 = new CList < > ( new Integer ( 2 ) , intlist_1 ) ; CList < Integer > intlist_3 = new CList < > ( new Integer ( 3 ) , intlist_2 ) ; CList < Integer > intlist_4 = new CList < > ( new Integer ( 4 ) , intlist_3 ) ; CList < Integer > intlist_5 = new CList < > ( new Integer ( 4 ) , intlist_4 ) ; CList < Integer > intlist = new CList < > ( new Integer ( 5 ) , intlist_5 ) ; @ Test public void test_doubleAll ( ) { CList < Integer > doubled = CListClient.doubleAll ( intlist ) ; CList < Integer > doubledloop = CListClient.doubleAllloop ( intlist ) ; } @ Test public void test_CountNs ( ) { int count3s = CListClient.countNs ( intlist , 3 ) ; } }"
< bean name= '' StudentRepositor '' class= '' com.sample.Repository.StudentRepositoryHibernate '' / > < bean name= '' StudentService '' class= '' com.sample.Service.StudentServiceQuery '' autowire= '' byName '' > < ! -- < property name= '' StudentRepositor '' ref= '' StudentRepositor '' / > -- > < /bean > public class StudentServiceQuery implements StudentService { private StudentRepository studentRepositor ; public void displayList ( ) { List < Student > studentList = studentRepositor.returnList ( ) ; System.out.println ( studentList.get ( 0 ) .toString ( ) ) ; } public void setStudentRepositor ( StudentRepository studentRepositor ) { System.out.println ( `` Dependency Injection - Setter '' ) ; this.studentRepositor = studentRepositor ; }
List < Cube > revised = cubes.filter ( p ) .map ( c - > f ( c ) ) .map ( c - > { if ( c.prop ( ) ) { c.addComment ( comment ) ; } return c ; } ) .collect ( Collectors.toList ( ) ) ; List < Cube > revised = cubes.filter ( p ) .map ( c - > f ( c ) ) ; revised .filter ( Cube : :prop ) .forEach ( c - > c.addComment ( comment ) ) ; // can also map still
public void run ( ) { myMethod ( ) ; } while ( true ) { System.out.println ( `` Thinking . `` ) ; for ( int i = 0 ; i < 100000 ; i++ ) { //wasting time } }
double number = Scanner.nextDouble ( ) ; DecimalFormat df = new DecimalFormat ( `` # . # '' ) ; System.out.print ( df.format ( number ) ) ;
private static Toolbar toolbar = new Toolbar ( ) ; Home.toolbar.setForeground ( Color.green ) ;
( defn collatz-length [ n ] ( loop [ x n acc 1 ] ( if ( = 1 x ) acc ( recur ( if ( even ? x ) ( / x 2 ) ( inc ( * 3 x ) ) ) ( inc acc ) ) ) ) ) public static int collatzLength ( long x ) { int count = 0 ; while ( x > 1 ) { if ( ( x % 2 ) == 0 ) { x = x / 2 ; } else { x = ( x * 3 ) + 1 ; } count++ ; } return count ; } ( time ( dorun ( map collatz-length ( range 1 1000000 ) ) ) ) long starttime = System.currentTimeMillis ( ) ; int [ ] nums = new int [ 1000000 ] ; for ( int i = 0 ; i < 1000000 ; i++ ) { nums [ i ] = collatzLength ( i+1 ) ; } System.out.println ( `` Total time ( ms ) : `` + ( System.currentTimeMillis ( ) - starttime ) ) ;
"import java.util.HashMap ; /** * Allocator demonstrates the dependency between number of live objects * and allocation speed , using various GC algorithms . * Call it using , e.g . : * java Allocator -Xmx12g -Xms12g -XX : +PrintGCApplicationStoppedTime -XX : +UseG1GC * java Allocator -Xmx12g -Xms12g -XX : +PrintGCApplicationStoppedTime * Deduct stopped times from execution time . */public class Allocator { public static void main ( String [ ] args ) { timer ( 2000000 , true ) ; for ( int i = 1000000 ; i < = 32000000 ; i*=2 ) { timer ( i , false ) ; } for ( int i = 32000000 ; i > = 1000000 ; i/=2 ) { timer ( i , false ) ; } } private static void timer ( int num , boolean warmup ) { long before = System.currentTimeMillis ( ) ; Allocator a = new Allocator ( ) ; int size = a.allocate ( num ) ; long after = System.currentTimeMillis ( ) ; if ( ! warmup ) { System.out.println ( `` Time needed for `` + num + `` allocations : `` + ( after - before ) + `` millis . Map size = `` + size ) ; } } private int allocate ( int numElements ) { HashMap < Integer , String > map = new HashMap < > ( 2*numElements ) ; for ( int i = 0 ; i < numElements ; i++ ) { map.put ( i , Integer.toString ( i ) ) ; } return map.size ( ) ; } }"
"< LogicalID > SupplyChain < /Logical > .* ( [ A-Za-z ] + ) > ( [ A-Za-z ] + ) < . * [ `` D '' , `` SupplyChain '' ] .* ( [ A-Za-z ] * ) > ( [ A-Za-z ] + ) < . *"
"int [ ] array = new int [ ] { 4,1,2,3,5,8,6 } ; int size = array.length ; int result = ( size + 1 ) * ( size + 2 ) /2 ; for ( int i : array ) { result -= i ; }"
"public String getData ( HttpEntity < Request > request , String endPoint ) { ResponseEntity < Reponse > response = template.exchange ( endPoint , HttpMethod.POST , request , Reponse.class ) ; List < Result > results = Optional.ofNullable ( response ) .map ( ResponseEntity : :getBody ) .map ( Response : :getQueryResult ) .map ( QueryResult : :getResults ) // getResults is an ArrayList of Result Objects . Could I get the Result Object at index 0 here ? // following that I plan to go .map ( Result : :getValue ) here . .orElse ( null ) ; if ( CollectionUtils.isNotEmpty ( results ) ) { return results.get ( 0 ) .getValue ( ) ; } return null ; }"
"package com.seroter.confluentboot.controller ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; import com.seroter.confluentboot.dto.Product ; import com.seroter.confluentboot.engine.Producer ; @ RestController @ RequestMapping ( value = `` /kafka '' ) public class KafkaController { private final Producer producer ; private final com.seroter.confluentboot.engine.Consumer consumer ; @ Autowired KafkaController ( Producer producer , com.seroter.confluentboot.engine.Consumer consumer ) { this.producer = producer ; this.consumer=consumer ; } @ PostMapping ( value = `` /publish '' ) public void sendMessageToKafkaTopic ( @ RequestParam ( `` message '' ) String message ) { this.producer.sendMessage ( message ) ; } @ PostMapping ( value= '' /publishJson '' ) public ResponseEntity < Product > publishJsonMessage ( @ RequestBody Product product ) { producer.sendJsonMessage ( product ) ; ResponseEntity < Product > responseEntity=new ResponseEntity < > ( product , HttpStatus.CREATED ) ; return responseEntity ; } } package com.seroter.confluentboot.dto ; import com.fasterxml.jackson.annotation.JsonProperty ; import com.fasterxml.jackson.annotation.JsonPropertyOrder ; import lombok.AllArgsConstructor ; import lombok.Data ; import lombok.NoArgsConstructor ; @ Data @ NoArgsConstructor @ AllArgsConstructor @ JsonPropertyOrder ( value = { `` product_id '' , '' product_name '' , '' quantity '' , '' price '' } ) public class Product { @ JsonProperty ( value = `` product_id '' ) private int productId ; @ JsonProperty ( value= '' product_name '' ) private String productName ; private int quantity ; private double price ; } package com.seroter.confluentboot.engine ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.cloud.stream.annotation.EnableBinding ; import org.springframework.cloud.stream.messaging.Source ; import org.springframework.messaging.support.GenericMessage ; import org.springframework.stereotype.Service ; import com.seroter.confluentboot.dto.Product ; @ Service @ EnableBinding ( Source.class ) public class Producer { private static final Logger logger = LoggerFactory.getLogger ( Producer.class ) ; private static final String TOPIC = `` users '' ; @ Autowired private Source source ; public void sendMessage ( String message ) { logger.info ( String.format ( `` # # # # - > Producing message - > % s '' , message ) ) ; this.source.output ( ) .send ( new GenericMessage < > ( message ) ) ; } public void sendJsonMessage ( Product product ) { logger.info ( String.format ( `` # # # # - > Producing message - > % s '' , product.toString ( ) ) ) ; this.source.output ( ) .send ( new GenericMessage < > ( product ) ) ; } } package com.seroter.confluentboot ; import org.apache.tomcat.util.net.WriteBuffer.Sink ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.stream.annotation.EnableBinding ; import org.springframework.cloud.stream.messaging.Source ; import org.springframework.http.ResponseEntity ; import org.springframework.messaging.support.GenericMessage ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.PostMapping ; import org.springframework.web.bind.annotation.RequestBody ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; import com.seroter.confluentboot.dto.Product ; @ SpringBootApplication @ EnableBinding ( Source.class ) @ RestController @ RequestMapping ( value = `` /confluent '' ) public class ConfluentBootApplication { @ Autowired private com.seroter.confluentboot.engine.Consumer consumer ; public static void main ( String [ ] args ) { SpringApplication.run ( ConfluentBootApplication.class , args ) ; } } spring.cloud.stream.kafka.binder.brokers=pkc-epwny.eastus.azure.confluent.cloud:9092spring.cloud.stream.bindings.output.destination=test spring.cloud.stream.kafka.binder.configuration.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username= '' user '' password= '' password '' ; spring.cloud.stream.kafka.binder.configuration.sasl.mechanism=PLAINspring.cloud.stream.kafka.binder.configuration.security.protocol=SASL_SSLserver.port=9000 package com.seroter.confluentboot.controller ; import org.springframework.cloud.stream.annotation.EnableBinding ; import org.springframework.cloud.stream.annotation.StreamListener ; import org.springframework.cloud.stream.messaging.Sink ; import com.seroter.confluentboot.dto.Product ; // @ RestController @ EnableBinding ( Sink.class ) public class ConfluentConsumer { @ StreamListener ( Sink.INPUT ) public void consumeMessage ( Product product ) { System.out.println ( `` ****************************** '' ) ; System.out.println ( `` ============= `` +product.getProductId ( ) + '' ================ '' ) ; System.out.println ( `` ****************************** '' ) ; } } package com.seroter.confluentboot.engine ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.context.annotation.PropertySource ; import org.springframework.stereotype.Service ; @ Service @ PropertySource ( `` classpath : application.properties '' ) public class Consumer { private final Logger logger = LoggerFactory.getLogger ( Producer.class ) ; }"
"private static int compareStrings ( final String str1 , final String str2 ) { if ( ( str1 == null ) & & ( str2 == null ) ) { return COMPARE_ABSENT ; } if ( ( str1 == null ) & & ( str2 ! = null ) ) { return COMPARE_DIFFERS ; } if ( ( str1 ! = null ) & & ( str2 == null ) ) { return COMPARE_DIFFERS ; } return str1.equals ( str2 ) ? COMPARE_EQUALS : COMPARE_DIFFERS ; }"
class S { int x=0 ; } class T extends S { int x=1 ; class C { int x=2 ; void print ( ) { System.out.println ( this.x ) ; System.out.println ( T.this.x ) ; System.out.println ( T.super.x ) ; } } public static void main ( String args [ ] ) { T t=new T ( ) ; C c=t.new C ( ) ; c.print ( ) ; } }
firstList [ 1 ] : 0 = { Object A } '' 1 = { Object B } '' 2 = { Object C } '' firstList [ 2 ] : 0 = { Object A } '' 1 = { Object B } '' 2 = { Object C } '' secondList [ 1 ] : 0 = { Object A } '' 1 = { Object A } '' secondList [ 2 ] : 0 = { Object B } '' 1 = { Object B } '' secondList [ 3 ] : 0 = { Object C } '' 1 = { Object C } '' for ( int i = 0 ; i < firstList.size ( ) ; i++ ) { List < Object > list = firstList.get ( i ) ; List < Object > rlPr = new ArrayList < > ( ) ; for ( int j = 0 ; j < list.size ( ) -1 ; j++ ) { rlPr.add ( list.get ( i ) ) ; } secondList.add ( rlPr ) ; }
try ( var foos = foos ( ) ) { return foos.flatMap ( Foo : :bars ) .toArray ( Bar [ ] : :new ) ; } try ( var foos = foos ( ) ) { return foos.flatMap ( foo - > { try ( var bars = foo.bars ( ) ) { return bars ; } } ) .toArray ( Bar [ ] : :new ) ; }
"public class GenericClass < T > { public < V > void put ( Class < V > key , V value ) { // put into map } public < V > V get ( Class < V > key ) { // get from map return null ; } public static class DoesntWork { public DoesntWork ( ) { GenericClass genericClass = new GenericClass ( ) ; String s = genericClass.get ( String.class ) ; } } public static class Works { public Works ( ) { GenericClass < Object > genericClass = new GenericClass < Object > ( ) ; String s = genericClass.get ( String.class ) ; } } }"
"Exception in thread `` main '' java.lang.IllegalArgumentException : Delay must be to 0 to 60,000ms at java.awt.Robot.checkDelayArgument ( Robot.java:544 ) at java.awt.Robot.delay ( Robot.java:534 ) at com.company.Main.main ( Main.java:10 ) /** * Sleeps for the specified time . * To catch any < code > InterruptedException < /code > s that occur , * < code > Thread.sleep ( ) < /code > may be used instead . * @ param ms time to sleep in milliseconds * @ throws IllegalArgumentException if < code > ms < /code > is not between 0 and 60,000 milliseconds inclusive * @ see java.lang.Thread # sleep */public synchronized void delay ( int ms ) { checkDelayArgument ( ms ) ; try { Thread.sleep ( ms ) ; } catch ( InterruptedException ite ) { ite.printStackTrace ( ) ; } } private static final int MAX_DELAY = 60000 ; private void checkDelayArgument ( int ms ) { if ( ms < 0 || ms > MAX_DELAY ) { throw new IllegalArgumentException ( `` Delay must be to 0 to 60,000ms '' ) ; } }"
Set < String > teacherId = batches.stream ( ) .filter ( b - > ! CollectionUtils.isEmpty ( b.getTeacherIds ( ) ) ) .map ( b - > b.getTeacherIds ( ) ) .collect ( Collectors.toSet ( ) ) ;
public Response create ( ) { try { ... } catch ( Exception e ) { codeA ; } finally { codeB ; } } public Response update ( ) { try { ... } catch ( Exception e ) { codeA ; } finally { codeB ; } } } catch ( Exception e ) { codeA ; } finally { codeB ; }
public class Combatant { ArtificialIntelligence ai = null ; public Combatant ( ) { // Set other fields here . this.ai = new ArtificialIntelligence ( this ) ; } }
public class GateBlocking { final class Sync extends AbstractQueuedSynchronizer { public Sync ( ) { setState ( 0 ) ; } @ Override protected int tryAcquireShared ( int ignored ) { return getState ( ) == 1 ? 1 : -1 ; } public void reset ( int newState ) { setState ( newState ) ; } } ; private Sync sync = new Sync ( ) ; public void open ( ) { sync.reset ( 1 ) ; } public void close ( ) { sync.reset ( 0 ) ; } public void pass ( ) throws InterruptedException { sync.acquireShared ( 1 ) ; } } ; public class GateBlockingTest { @ Test public void parallelPassClosedAndOpenGate ( ) throws Exception { final GateBlocking g = new GateBlocking ( ) ; Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { Thread.sleep ( 2000 ) ; g.open ( ) ; } catch ( InterruptedException e ) { } } } ) ; t.start ( ) ; g.pass ( ) ; } }
"public class MyCustomRunTimeException extends RuntimeException { public MyCustomRunTimeException ( ) { } public MyCustomRunTimeException ( Exception innerException ) { super ( innerException ) ; } } private void findAllSpecificTypeOfInnerExceptions ( Exception ex ) { Collection < MyCustomRunTimeException > MyCustomRunTimeExceptions = Stream.iterate ( ex , Throwable : :getCause ) .filter ( element - > element ! = null & & element instanceof MyCustomRunTimeException ) .map ( obj - > ( MyCustomRunTimeException ) obj ) .collect ( Collectors.toList ( ) ) ; } Exception exampleOne = new MyCustomRunTimeException ( ) ; Exception exampleTwo = new Exception ( new MyCustomRunTimeException ( ) ) ; Exception exampleThree =new Exception ( new Exception ( new MyCustomRunTimeException ( ) ) ) ; Exception exampleFour =new Exception ( new Exception ( new MyCustomRunTimeException ( new ArithmeticException ( ) ) ) ) ;"
class A { byte [ ] buf = new byte [ 150_000_000 ] ; protected void finalize ( ) { int i = 1 ; } } A a1 = new A ( ) ; a1 = null ; A a2 = new A ( ) ;
abstract class Plant { public abstract String getName ( ) ; } interface Eatable { } class Apple extends Plant implements Eatable { @ Override public String getName ( ) { return `` Apple '' ; } } class Rose extends Plant { @ Override public String getName ( ) { return `` Rose '' ; } } interface Animal { < T extends Plant & Eatable > void eat ( T plant ) ; } class Human implements Animal { @ Override public void eat ( Plant plant ) { } }
public class MessageType < T > { private final Class < T > clazz ; public MessageType ( final Class < T > clazz ) { this.clazz = clazz ; } public Class < T > getClazz ( ) { return clazz ; } } static final MessageType < String > TYPE_A = new MessageType < > ( String.class ) ; static final MessageType < Double > TYPE_B = new MessageType < > ( Double.class ) ; static final MessageType < List < String > > PROBLEM_TYPE = new MessageType ( List.class ) ; static final MessageType < List < String > > PROBLEM_TYPE = new MessageType < > ( List < String > .class ) ;
"final int CUTOFF = 5 ; final List < Path > foundList = new ArrayList < > ( ) ; Files.walkFileTree ( codeRoot , new SimpleFileVisitor < Path > ( ) { @ Override public FileVisitResult preVisitDirectory ( Path dir , BasicFileAttributes attrs ) throws IOException { String rPath = codeRoot.relativize ( dir ) .toString ( ) ; int level = rPath.length ( ) - rPath.replace ( `` / '' , `` '' ) .length ( ) ; if ( dir.getFileName ( ) .toString ( ) .equals ( `` target '' ) || level < CUTOFF ) { return FileVisitResult.CONTINUE ; } return FileVisitResult.SKIP_SUBTREE ; } @ Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { if ( file.getFileName ( ) .toString ( ) .endsWith ( `` .txt '' ) ) { foundList.add ( file ) ; } return FileVisitResult.CONTINUE ; } } ) ;"
class A { ... } class B extends A implements Comparable < A > { int compareTo ( A aobject ) { ... } }
import acm.program . * ; import acm.util . * ; public class MissionPlanes extends ConsoleProgram { public void run ( ) { int planes = 100 ; /* total number of planes */ int suvPlanes = 0 ; /* surviving planes */ int mission = 0 ; /* total number of missions */ int planeCounter = 0 ; /* keeps track of the planes flying over the anti plane gun */ while ( planes > 0 ) { while ( planeCounter < planes ) { planeCounter++ ; if ( rgen.nextBoolean ( ) ) { /* I 've tried rgen.nextBoolean ( ) with paramaters and with no paramaters */ suvPlanes += 1 ; } } planes = suvPlanes ; mission++ ; println ( `` The total number of surviving planes you have is `` + planes + `` after '' + missoin + `` missions '' ) ; } } private RandomGenerator rgen = RandomGenerator.getInstance ( ) ; }
boolean check ( String input ) { }
startDate : [ 2016-10-12T12:23:23Z:2016-10-12T12:23:23Z ] startDate : [ * ; 2016-10-12T12:23:23Z ] startDate : [ 2016-10-12T12:23:23Z ; * ] startDate : [ * ; * ] Pattern.compile ( `` ( [ [ a-zA-Z_0-9 ] * ) : ( \\ [ [ [ \\* ] | [ 0-9 ] { 4 } - [ 0-9 ] { 2 } - [ 0-9 ] { 2 } T [ 0-9 ] { 2 } : [ 0-9 ] { 2 } : [ 0-9 ] { 2 } [ Z ] ] ; [ [ \\* ] | [ 0-9 ] { 4 } - [ 0-9 ] { 2 } - [ 0-9 ] { 2 } T [ 0-9 ] { 2 } : [ 0-9 ] { 2 } : [ 0-9 ] { 2 } [ Z ] ] \\ ] ] ) '' ) ; ( startDate ) : ( [ *:2016-10-12T12:23:23Z ] ) group1 = `` startDate '' group2 = `` [ * ; 2016-10-12T12:23:23Z ] ''
"public ValidationResult isValid ( final Thing thing ) { return validators.stream ( ) .map ( v - > validator.isValid ( thing ) ) .filter ( ValidationResult : :isValid ) .findFirst ( ) .orElseGet ( ( ) - > new ValidationResult ( false , `` All validators failed ' ) ) ; } public ValidationResult isValid ( final Thing thing ) { final Set < ValidationResult > failedResults = new HashSet < > ( ) ; for ( Validator validator : validators ) { final ValidationResult result = validator.isValid ( thing ) ; if ( result.isValid ( ) ) { return result ; } failedResults.add ( result ) ; } return new ValidationResult ( false , `` No successful validator : `` + failedResults ) ; // ( assume failedResults stringifies nicely ) }"
"int test = 1 ; int [ ] testing= { 1,3 } ; System.out.println ( Arrays.asList ( testing ) .contains ( test ) ) ; //false ? ? ?"
import java.text.SimpleDateFormat ; public class Foo { public static void main ( String [ ] args ) { SimpleDateFormat formatter = new SimpleDateFormat ( `` mm hh dd MM yyyy '' ) ; String date1 = `` 1412293500 '' ; String date2 = `` 1412336700 '' ; String dateString1 = formatter.format ( Long.parseLong ( date1 + `` 000 '' ) ) ; String dateString2 = formatter.format ( Long.parseLong ( date2 + `` 000 '' ) ) ; System.out.println ( dateString1 + `` `` + dateString2 ) ; } }
"wdf = WikibaseDataFetcher.getWikidataDataFetcher ( ) ; eid = wdf.getEntityDocumentsByTitle ( `` enwiki '' , entitle ) ; Exception in thread `` main '' java.lang.NullPointerException at org.wikidata.wdtk.wikibaseapi.ApiConnection.fillCookies ( ApiConnection.java:544 ) at org.wikidata.wdtk.wikibaseapi.ApiConnection.sendRequest ( ApiConnection.java:346 ) at org.wikidata.wdtk.wikibaseapi.WbGetEntitiesAction.wbGetEntities ( WbGetEntitiesAction.java:187 )"
"Date d = new Date ( year , month , dayOfMonth ) ; //Old wayLocalDate d2 = LocalDate.of ( year , month , dayOfMonth ) ; //new way"
"import javax.swing . * ; import javax.swing.event.DocumentEvent ; import javax.swing.event.DocumentListener ; import javax.swing.text.BadLocationException ; import javax.swing.text.DefaultHighlighter ; import javax.swing.text.Highlighter ; import java.awt . * ; import java.util.logging.Level ; import java.util.logging.Logger ; import java.util.regex.Matcher ; import java.util.regex.Pattern ; class TextArea { public static void main ( String [ ] args ) { JFrame frame = new JFrame ( `` textArea '' ) ; frame.setSize ( 500,500 ) ; final JTextArea textArea = new JTextArea ( ) ; frame.add ( textArea ) ; frame.setVisible ( true ) ; textArea.getDocument ( ) .addDocumentListener ( new DocumentListener ( ) { @ Override public void changedUpdate ( DocumentEvent e ) { try { String keyWords = findKeyWord ( ) ; findOccurrences ( keyWords ) ; } catch ( BadLocationException ex ) { Logger.getLogger ( TextArea.class.getName ( ) ) .log ( Level.SEVERE , null , ex ) ; } } @ Override public void insertUpdate ( DocumentEvent e ) { try { String keyWords = findKeyWord ( ) ; findOccurrences ( keyWords ) ; } catch ( BadLocationException ex ) { Logger.getLogger ( TextArea.class.getName ( ) ) .log ( Level.SEVERE , null , ex ) ; } } @ Override public void removeUpdate ( DocumentEvent e ) { try { String keyWords = findKeyWord ( ) ; findOccurrences ( keyWords ) ; } catch ( BadLocationException ex ) { Logger.getLogger ( TextArea.class.getName ( ) ) .log ( Level.SEVERE , null , ex ) ; } } public String findKeyWord ( ) throws BadLocationException { String keyWord = `` '' ; for ( String line : textArea.getText ( ) .split ( `` \n '' ) ) { if ( line.trim ( ) .length ( ) > 0 ) { if ( ! line.startsWith ( `` # '' ) ) { int keywordEndPosition = line.indexOf ( `` # '' ) ; keyWord = line.substring ( 0 , keywordEndPosition == -1 ? line.length ( ) : keywordEndPosition ) ; keyWord = keyWord.trim ( ) ; break ; } } } return keyWord ; } public void findOccurrences ( String keyWords ) throws BadLocationException { Highlighter highlighter = textArea.getHighlighter ( ) ; DefaultHighlighter.DefaultHighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter ( Color.CYAN ) ; String [ ] keyArray ; highlighter.removeAllHighlights ( ) ; keyArray = keyWords.split ( `` [ ( , ) ] '' ) ; for ( int i=0 ; i < keyArray.length ; i++ ) { keyArray [ i ] = keyArray [ i ] .trim ( ) ; } for ( String keyWord : keyArray ) { if ( keyWord.isEmpty ( ) ) return ; Pattern pattern = Pattern.compile ( Pattern.quote ( keyWord ) ) ; Matcher matcher = pattern.matcher ( textArea.getText ( ) ) ; while ( matcher.find ( ) ) { highlighter.addHighlight ( matcher.start ( ) , matcher.end ( ) , painter ) ; } } } } ) ; } }"
"public class CextenderClass extends Class { public CextenderClass ( Class c ) throws Exception { if ( ! C.class.isAssignableFrom ( c ) ) //Check whether is ` C ` sub-class throw new Exception ( `` The given class is not extending C '' ) ; value = c ; } private Class value ; ... Here , methods delegation ... } public class CextenderClass { public CextenderClass ( Class c ) throws Exception { if ( ! C.class.isAssignableFrom ( c ) ) //Check whether is ` C ` sub-class throw new Exception ( `` The given class is not extending C '' ) ; value = c ; } public Class getValue ( ) { return value ; } private Class value ; }"
"ArrayList < Object > a = new ArrayList < Object > ( ) ; a.add ( new Socket ( ) ) ; a.add ( new Thread ( ) ) ; a.add ( `` three '' ) ; a.add ( a ) ; a.add ( new Object ( ) ) ; for ( Object output : a ) { System.out.println ( output ) ; } Socket [ unconnected ] Thread [ Thread-0,5 , main ] three [ Socket [ unconnected ] , Thread [ Thread-0,5 , main ] , three , ( this Collection ) ] java.lang.Object @ 615e7597"
"int compare ( T o1 , T o2 ) public int compareTo ( Double anotherDouble ) Optional < T > max ( Comparator < ? super T > comparator )"
public class Main { public static void main ( String [ ] args ) { Container < Integer > c = new Container < Integer > ( ) ; c.getArray ( ) ; //No Exception //c.getArray ( ) .getClass ( ) ; //Exception //int a = c.getArray ( ) .length ; //Exception } } class Container < T > { T [ ] array ; @ SuppressWarnings ( `` unchecked '' ) Container ( ) { array = ( T [ ] ) new Object [ 1 ] ; } void put ( T item ) { array [ 0 ] = item ; } T get ( ) { return array [ 0 ] ; } T [ ] getArray ( ) { return array ; } }
"public class Test { public static void main ( String [ ] args ) throws Exception { A a = new A ( ) ; B b = new B ( ) ; foo ( a ) ; foo ( b ) ; } private static void foo ( A a ) { System.out.println ( `` In A '' ) ; } private static void foo ( B b ) { System.out.println ( `` In B '' ) ; } private static class A { } private static class B extends A { } } public class Test { public static void main ( String [ ] args ) throws Exception { A < String > a = new A < > ( ) ; B b = new B ( ) ; foo ( a ) ; foo ( b ) ; } private static void foo ( A < String > a ) { System.out.println ( `` In A '' ) ; } private static void foo ( B b ) { System.out.println ( `` In B '' ) ; } private static class A < T > { } private static class B extends A { } } Test.java:8 : error : reference to foo is ambiguous , both method foo ( A < String > ) in Test and method foo ( B ) in Test match foo ( b ) ; ^ Note : Test.java uses unchecked or unsafe operations . Note : Recompile with -Xlint : unchecked for details . 1 error"
"public static void main ( String ... args ) { List < Person > people = Arrays.asList ( new Person ( 23 , `` Paul '' ) , new Person ( 24 , `` Robert '' ) , new Person ( 32 , `` Paul '' ) , new Person ( 10 , `` Robert '' ) , new Person ( 4 , `` Richard '' ) , new Person ( 60 , `` Richard '' ) , new Person ( 9 , `` Robert '' ) , new Person ( 26 , `` Robert '' ) ) ; Person dummy = new Person ( 0 , `` '' ) ; var mapping = people.stream ( ) .collect ( groupingBy ( Person : :getName , reducing ( dummy , ( p1 , p2 ) - > p1.getAge ( ) < p2.getAge ( ) ? p2 : p1 ) ) ) ; mapping.entrySet ( ) .forEach ( System.out : :println ) ; } var mapping = people.stream ( ) .collect ( groupingBy ( Person : :getName , mapping ( Person : :getAge , reducing ( 0 , ( p1 , p2 ) - > p1 < p2 ? p2 : p1 ) ) ) ) ; var mapping = people.stream ( ) .collect ( groupingBy ( Person : :getName , reducing ( dummy , ( p1 , p2 ) - > p1.getAge ( ) < p2.getAge ( ) ? p2 : p1 /* , have to write some other collector factory method here*/ ) ) ) ;"
"@ Testpublic void sax_parser_read_much_things_before_returning_events ( ) throws Exception { String xml = `` < a > '' + `` < b > .. < /b > '' + `` < c > .. < /c > '' // much more ... + `` < /a > '' ; // wrapper to show what is read InputStream is = new InputStream ( ) { InputStream is = new ByteArrayInputStream ( xml.getBytes ( ) ) ; @ Override public int read ( ) throws IOException { int val = is.read ( ) ; System.out.print ( ( char ) val ) ; return val ; } } ; SAXParser parser = SAXParserFactory.newInstance ( ) .newSAXParser ( ) ; parser.parse ( is , new DefaultHandler ( ) { @ Override public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { System.out.print ( `` \nHandler start : `` + qName ) ; } @ Override public void endElement ( String uri , String localName , String qName ) throws SAXException { System.out.print ( `` \nHandler end : `` + qName ) ; } } ) ; } < a > < - output from read ( ) Handler start : a < b > < - output from read ( ) Handler start : b < /b > < - output from read ( ) Handler end : b ... < a > < b > .. < /b > < c > .. < /c > < /a > < - output from read ( ) Handler start : aHandler start : bHandler end : bHandler start : cHandler end : cHandler end : a"
"interface Identifable < T extends Serializable > { T getID ( ) ; } public class Cat implements Identifable < Long > { public Long getID ( ) { ... } ; } public abstract GenericDAO < T extends Identifable < S > > { T getByID ( S id ) ; } public abstract GenericDAO < T extends Identifable , S > { T getById ( S id ) ; } public CatDAO extends GenericDAO < Cat , Long > { Cat getById ( Long id ) ; }"
"@ FunctionalInterfacepublic interface Streamable < T > extends Iterable < T > , Supplier < Stream < T > > static < T > Streamable < T > empty ( ) { return Collections : :emptyIterator ; }"
"public class SimpleCounter extends HttpServlet { int counter=0 ; @ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { response.setContentType ( `` text/plain '' ) ; PrintWriter writer = response.getWriter ( ) ; counter++ ; writer.println ( `` accessed `` + counter + `` times '' ) ; } }"
"array 1 - > [ 1 , 3 , -5 ] array 2 - > [ -2 , 4 , 1 ] output : 23 // ( 3 * 4 ) + ( 1 * 1 ) + ( -5 * -2 ) private static long maxSum ( int [ ] a , int [ ] b ) { long result = 0 ; Arrays.sort ( a ) ; Arrays.sort ( b ) ; for ( int i = a.length - 1 ; i > = 0 ; i -- ) { result += a [ i ] * b [ i ] ; } return result ; }"
"com.esotericsoftware.kryo.KryoException : com.sleepycat.je.EnvironmentFailureException : ( JE 5.0.73 ) IdentityHashMap.entrySet ( ) should not be used . See [ # 18167 ] . UNEXPECTED_STATE : Unexpected internal state , may have side effects.Serialization trace : highestFlushLevels ( com.sleepycat.je.recovery.DirtyINMap ) checkpointDirtyMap ( com.sleepycat.je.recovery.Checkpointer ) checkpointer ( com.sleepycat.je.dbi.EnvironmentImpl ) envImpl ( com.sleepycat.je.dbi.MemoryBudget ) budget ( com.sleepycat.je.cleaner.DbFileSummaryMap ) dbFileSummaries ( com.sleepycat.je.dbi.DatabaseImpl ) databaseImpl ( com.sleepycat.je.Database ) db ( com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEKeyValueStore ) store ( com.thinkaurelius.titan.diskstorage.keycolumnvalue.keyvalue.OrderedKeyValueStoreAdapter ) store ( com.thinkaurelius.titan.diskstorage.keycolumnvalue.cache.NoKCVSCache ) edgeStore ( com.thinkaurelius.titan.diskstorage.Backend ) backend ( com.thinkaurelius.titan.graphdb.database.StandardTitanGraph ) graph ( com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx ) tx ( com.thinkaurelius.titan.graphdb.types.vertices.PropertyKeyVertex ) key ( com.thinkaurelius.titan.graphdb.relations.SimpleTitanProperty ) properties ( main.java.com.bag.util.storage.RelationshipStorage ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:101 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeClassAndObject ( Kryo.java:651 ) at com.esotericsoftware.kryo.serializers.MapSerializer.write ( MapSerializer.java:113 ) at com.esotericsoftware.kryo.serializers.MapSerializer.write ( MapSerializer.java:39 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) at com.esotericsoftware.kryo.serializers.FieldSerializer.write ( FieldSerializer.java:505 ) at com.esotericsoftware.kryo.Kryo.writeClassAndObject ( Kryo.java:651 ) at com.esotericsoftware.kryo.serializers.CollectionSerializer.write ( CollectionSerializer.java:100 ) at com.esotericsoftware.kryo.serializers.CollectionSerializer.write ( CollectionSerializer.java:40 ) at com.esotericsoftware.kryo.Kryo.writeClassAndObject ( Kryo.java:651 ) at main.java.com.bag.server.TestServer.handleRelationshipRead ( TestServer.java:299 ) at main.java.com.bag.server.TestServer.appExecuteUnordered ( TestServer.java:219 ) at bftsmart.tom.server.defaultservices.DefaultRecoverable.executeUnordered ( DefaultRecoverable.java:417 ) at bftsmart.tom.ServiceReplica.receiveReadonlyMessage ( ServiceReplica.java:214 ) at bftsmart.tom.core.DeliveryThread.deliverUnordered ( DeliveryThread.java:289 ) at bftsmart.tom.core.TOMLayer.requestReceived ( TOMLayer.java:290 ) at bftsmart.communication.client.netty.NettyClientServerCommunicationSystemServerSide.channelRead0 ( NettyClientServerCommunicationSystemServerSide.java:184 ) at bftsmart.communication.client.netty.NettyClientServerCommunicationSystemServerSide.channelRead0 ( NettyClientServerCommunicationSystemServerSide.java:61 ) at io.netty.channel.SimpleChannelInboundHandler.channelRead ( SimpleChannelInboundHandler.java:105 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:292 ) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead ( AbstractChannelHandlerContext.java:278 ) at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead ( ByteToMessageDecoder.java:277 ) at io.netty.handler.codec.ByteToMessageDecoder.channelRead ( ByteToMessageDecoder.java:264 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:292 ) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead ( AbstractChannelHandlerContext.java:278 ) at io.netty.channel.DefaultChannelPipeline.fireChannelRead ( DefaultChannelPipeline.java:962 ) at io.netty.channel.nio.AbstractNioByteChannel $ NioByteUnsafe.read ( AbstractNioByteChannel.java:131 ) at io.netty.channel.nio.NioEventLoop.processSelectedKey ( NioEventLoop.java:528 ) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized ( NioEventLoop.java:485 ) at io.netty.channel.nio.NioEventLoop.processSelectedKeys ( NioEventLoop.java:399 ) at io.netty.channel.nio.NioEventLoop.run ( NioEventLoop.java:371 ) at io.netty.util.concurrent.SingleThreadEventExecutor $ 2.run ( SingleThreadEventExecutor.java:112 ) at io.netty.util.concurrent.DefaultThreadFactory $ DefaultRunnableDecorator.run ( DefaultThreadFactory.java:137 ) at java.lang.Thread.run ( Thread.java:745 ) Caused by : com.sleepycat.je.EnvironmentFailureException : ( JE 5.0.73 ) IdentityHashMap.entrySet ( ) should not be used . See [ # 18167 ] . UNEXPECTED_STATE : Unexpected internal state , may have side effects . at com.sleepycat.je.EnvironmentFailureException.unexpectedState ( EnvironmentFailureException.java:376 ) at com.sleepycat.je.utilint.IdentityHashMap.entrySet ( IdentityHashMap.java:31 ) at com.esotericsoftware.kryo.serializers.MapSerializer.write ( MapSerializer.java:98 ) at com.esotericsoftware.kryo.serializers.MapSerializer.write ( MapSerializer.java:39 ) at com.esotericsoftware.kryo.Kryo.writeObject ( Kryo.java:575 ) at com.esotericsoftware.kryo.serializers.ObjectField.write ( ObjectField.java:80 ) ... 77 more ArrayList < RelationshipStorage > relationshipStorage = new ArrayList < > ( ) ;"
"import java.util.Arrays ; import java.util.List ; import java.util.ArrayList ; public class ListTest { public static void main ( String [ ] args ) { String [ ] values = { `` yes '' , `` no '' } ; List < String > aa = Arrays.asList ( values ) ; System.out.println ( aa.getClass ( ) .getName ( ) ) ; aa.remove ( 0 ) ; } } $ java ListTest java.util.Arrays $ ArrayListException in thread `` main '' java.lang.UnsupportedOperationException at java.util.AbstractList.remove ( AbstractList.java:161 ) at ListTest.main ( ListTest.java:12 )"
// someTime is epoch in millis ( UTC ) final long timeNow = new Date ( ) .getTime ( ) ; final long midnight = timeNow - timeNow % ( 3600 * 24 * 1000L ) ; final long yesterdayMidnight = midnight - ( 3600 * 24 * 1000L ) ; // check if same day.if ( someTime > = midnight ) // do something// check if yesterdayif ( someTime > = yesterdayMidnight )
import java.util.concurrent.ExecutorService ; import java.util.concurrent.Executors ; /** * See memory consistency effects in a Java Executor . */public class PrivateFieldInEnclosing { private long value ; PrivateFieldInEnclosing ( ) { } void execute ( ) { value = initializeValue ( ) ; ExecutorService executor = Executors.newCachedThreadPool ( ) ; executor.submit ( new Y ( ) ) ; } class Y implements Runnable { @ Override public void run ( ) { System.out.println ( value ) ; } } private long initializeValue ( ) { return 20 ; } public static void main ( String [ ] args ) { new PrivateFieldInEnclosing ( ) .execute ( ) ; } }
"public int print ( Graphics g , PageFormat pf , int page , Check c ) { final double MILLIMETER_IN_PIXELS = 3.779527559 ; DecimalFormat df = new DecimalFormat ( `` $ # .00 '' ) ; if ( page > 0 ) { return NO_SUCH_PAGE ; } Graphics2D g2d = ( Graphics2D ) g ; int x = ( int ) pf.getImageableX ( ) ; int y = ( int ) pf.getImageableY ( ) ; g2d.translate ( x , y + .5 ) ; Font font = new Font ( `` Courier New '' , Font.PLAIN , 10 ) ; g2d.setFont ( font ) ; FontMetrics metrics = g.getFontMetrics ( font ) ; g.drawString ( `` CHECK # '' + c.getCheckNumber ( ) , ( ( int ) MILLIMETER_IN_PIXELS* 55 ) , ( ( int ) MILLIMETER_IN_PIXELS*15 ) ) ; int strWidth = SwingUtilities.computeStringWidth ( metrics , df.format ( c.getAppraisersAmount ( ) ) ) ; g.drawString ( df.format ( c.getAppraisersAmount ( ) ) , ( ( int ) ( ( MILLIMETER_IN_PIXELS*62 ) -strWidth ) ) , ( ( int ) MILLIMETER_IN_PIXELS*23 ) ) ; Date d = c.getJavaDate ( ) ; SimpleDateFormat sdf = new SimpleDateFormat ( `` MM/dd/yyyy '' ) ; g.drawString ( sdf.format ( d ) , ( ( int ) MILLIMETER_IN_PIXELS*90 ) , ( ( int ) MILLIMETER_IN_PIXELS*24 ) ) ; strWidth = SwingUtilities.computeStringWidth ( metrics , df.format ( c.getCostAmount ( ) ) ) ; g.drawString ( df.format ( c.getCostAmount ( ) ) , ( ( int ) ( ( MILLIMETER_IN_PIXELS*62 ) -strWidth ) ) , ( ( int ) ( MILLIMETER_IN_PIXELS*22 ) ) ) ; strWidth = SwingUtilities.computeStringWidth ( metrics , df.format ( c.getRefundsAmount ( ) ) ) ; g.drawString ( df.format ( c.getRefundsAmount ( ) ) , ( ( int ) ( ( MILLIMETER_IN_PIXELS*62 ) -strWidth ) ) , ( ( int ) ( MILLIMETER_IN_PIXELS*26 ) ) ) ; strWidth = SwingUtilities.computeStringWidth ( metrics , df.format ( c.getOfficersAmount ( ) ) ) ; g.drawString ( df.format ( c.getOfficersAmount ( ) ) , ( ( int ) ( ( MILLIMETER_IN_PIXELS*62 ) -strWidth ) ) , ( ( int ) ( MILLIMETER_IN_PIXELS*30 ) ) ) ; Double totalLeft = c.getAppraisersAmount ( ) + c.getCostAmount ( ) + c.getRefundsAmount ( ) + c.getOfficersAmount ( ) ; strWidth = SwingUtilities.computeStringWidth ( metrics , df.format ( totalLeft ) ) ; g.drawString ( df.format ( totalLeft ) , ( ( int ) ( ( MILLIMETER_IN_PIXELS*62 ) -strWidth ) ) , ( ( int ) ( MILLIMETER_IN_PIXELS*44 ) ) ) ; return PAGE_EXISTS ; }"
"public class jmx_console { // private static final Logger log = Logger.getLogger ( jmx_console.class ) ; // public static String startAndStopQueueManager ( String jnpUrl , String qmUrl , String action , String username , String password ) throws NamingException , MalformedObjectNameException , InstanceNotFoundException , MBeanException , ReflectionException , IOException , AttributeNotFoundException { // log.debug ( `` username : `` + username ) ; log.debug ( `` password : `` + password ) ; log.debug ( `` action : `` + action ) ; log.debug ( `` qmUrl : `` + qmUrl ) ; log.debug ( `` jnpUrl : `` + jnpUrl ) ; // System.setProperty ( `` java.security.policy '' , `` client.policy '' ) ; if ( System.getSecurityManager ( ) == null ) { System.setSecurityManager ( new RMISecurityManager ( ) ) ; } // Properties ht = new Properties ( ) ; ht.put ( Context.INITIAL_CONTEXT_FACTORY , `` org.jnp.interfaces.NamingContextFactory '' ) ; ht.put ( Context.URL_PKG_PREFIXES , `` org.jboss.naming : org.jnp.interfaces '' ) ; ht.put ( Context.PROVIDER_URL , jnpUrl ) ; ht.put ( Context.SECURITY_PRINCIPAL , username ) ; ht.put ( Context.SECURITY_CREDENTIALS , password ) ; Context ctx = new InitialContext ( ht ) ; MBeanServerConnection mbeanConn = ( MBeanServerConnection ) ctx.lookup ( `` jmx/invoker/RMIAdaptor '' ) ; ObjectName queueManagerObjectManager = new ObjectName ( qmUrl ) ; mbeanConn.invoke ( queueManagerObjectManager , action , null , null ) ; return ( String ) mbeanConn.getAttribute ( queueManagerObjectManager , `` StateString '' ) ; } public static void main ( String [ ] args ) { try { startAndStopQueueManager ( args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] ) ; } catch ( Exception e ) { log.debug ( ExceptionUtils.getStackTrace ( e ) ) ; } } } 14 12 2016 11:56:00,372 DEBUG it.m2sc.utility.jmx_console : 31 - username : admin14 12 2016 11:56:00,373 DEBUG it.m2sc.utility.jmx_console : 32 - password : admin14 12 2016 11:56:00,373 DEBUG it.m2sc.utility.jmx_console : 33 - action : start14 12 2016 11:56:00,373 DEBUG it.m2sc.utility.jmx_console : 34 - qmUrl : jboss.web.deployment : war=/QueueManager14 12 2016 11:56:00,373 DEBUG it.m2sc.utility.jmx_console : 35 - jnpUrl : LCES4DISP:109914 12 2016 11:56:00,411 DEBUG it.m2sc.utility.jmx_console : 59 - javax.naming.CommunicationException : Could not obtain connection to any of these urls : LCES4DISP:1099 and discovery failed with error : java.security.AccessControlException : access denied ( java.net.SocketPermission 230.0.0.4 connect , accept , resolve ) [ Root exception is javax.naming.CommunicationException : Failed to connect to server LCES4DISP:1099 [ Root exception is java.security.AccessControlException : access denied ( java.net.SocketPermission LCES4DISP resolve ) ] ] at org.jnp.interfaces.NamingContext.checkRef ( NamingContext.java:1727 ) at org.jnp.interfaces.NamingContext.lookup ( NamingContext.java:680 ) at org.jnp.interfaces.NamingContext.lookup ( NamingContext.java:673 ) at javax.naming.InitialContext.lookup ( InitialContext.java:392 ) at it.m2sc.utility.jmx_console.startAndStopQueueManager ( jmx_console.java:49 ) at it.m2sc.utility.jmx_console.main ( jmx_console.java:57 ) Caused by : javax.naming.CommunicationException : Failed to connect to server LCES4DISP:1099 [ Root exception is java.security.AccessControlException : access denied ( java.net.SocketPermission LCES4DISP resolve ) ] at org.jnp.interfaces.NamingContext.getServer ( NamingContext.java:311 ) at org.jnp.interfaces.NamingContext.checkRef ( NamingContext.java:1698 ) ... 5 moreCaused by : java.security.AccessControlException : access denied ( java.net.SocketPermission LCES4DISP resolve ) at java.security.AccessControlContext.checkPermission ( AccessControlContext.java:374 ) at java.security.AccessController.checkPermission ( AccessController.java:549 ) at java.lang.SecurityManager.checkPermission ( SecurityManager.java:532 ) at java.lang.SecurityManager.checkConnect ( SecurityManager.java:1031 ) at java.net.InetAddress.getAllByName0 ( InetAddress.java:1172 ) at java.net.InetAddress.getAllByName ( InetAddress.java:1110 ) at java.net.InetAddress.getAllByName ( InetAddress.java:1046 ) at java.net.InetAddress.getByName ( InetAddress.java:996 ) at org.jnp.interfaces.TimedSocketFactory.createSocket ( TimedSocketFactory.java:81 ) at org.jnp.interfaces.NamingContext.getServer ( NamingContext.java:277 ) ... 6 more"
"task compileMessageKeys ( type : JavaCompile ) { doFirst { println `` $ projectDir/precompile '' new File ( `` $ projectDir/precompile '' ) .mkdirs ( ) } source = sourceSets.main.java.srcDirs include 'mypackage.build.CreateMessageKeysTask.java ' classpath = sourceSets.main.compileClasspath destinationDir = sourceSets.main.output.classesDir } compileMessageKeys.options.compilerArgs = [ `` -sourcepath '' , `` builder/precompile-task/src/mypackage/build '' ] < target name= '' precompile '' description= '' builds the CreateMessageKeysTask to generates the MessageKeys interface '' > < mkdir dir= '' $ { precompile } '' / > < echo message= '' precompile.src : $ { precompile.src } '' / > < javac srcdir= '' $ { precompile.src } '' destdir= '' $ { precompile } '' includes= '' mypackage/build/** '' debug= '' true '' fork= '' true '' memoryMaximumSize= '' $ { javacCoreMaxMem } '' includeantruntime= '' false '' > < classpath > < fileset dir= '' $ { my.proj.base } /lib/ '' > < include name= '' apache-ant-1.7.0/ant.jar '' / > < /fileset > < /classpath > < /javac > < /target > import org.apache.tools.ant . *import java.io . * ; import java.util . * ; task compileMessageKeys ( type : JavaCompile ) { doFirst { println `` $ projectDir/precompile '' new File ( `` $ projectDir/precompile '' ) .mkdirs ( ) } dependencies { compile fileTree ( dir : 'lib/ ' , include : [ 'apache-ant-1.7.0/ant.jar ' ] ) } source = sourceSets.main.java.srcDirs include 'mypackage.build.CreateMessageKeysTask.java ' classpath = sourceSets.main.compileClasspath destinationDir = sourceSets.main.output.classesDir }"
"q1.find ( { success : function ( results ) { for ( var x in results ) { x.helper1 = 'foo ' ; } response.success ( results ) ; } , error : function ( error ) { } } ) ;"
"package com.myapp.SAM.model.datastructures ; import java.util.concurrent.atomic.AtomicBoolean ; import java.util.logging.Logger ; import javafx.application.Platform ; import javafx.beans.InvalidationListener ; import javafx.beans.binding.Binding ; import javafx.beans.value.ChangeListener ; import javafx.collections.ObservableList ; /** * Specialized binding that defers its invalidations to the JavaFX UI thread in a throttled manner . The idea being that , if invalidate ( ) is called many times , * it only basically happens once ( when the UI thread gets to it ) . */public class DeferredBinding < T > implements Binding < T > { private static final Logger logger = Logger.getLogger ( DeferredBinding.class.getName ( ) ) ; private final Binding < T > binding ; private final AtomicBoolean pendingInvalidation = new AtomicBoolean ( false ) ; public DeferredBinding ( Binding < T > binding ) { this.binding = binding ; } @ Override public void addListener ( ChangeListener < ? super T > listener ) { binding.addListener ( listener ) ; } @ Override public void removeListener ( ChangeListener < ? super T > listener ) { binding.removeListener ( listener ) ; } @ Override public T getValue ( ) { return binding.getValue ( ) ; } @ Override public void addListener ( InvalidationListener listener ) { binding.addListener ( listener ) ; } @ Override public void removeListener ( InvalidationListener listener ) { binding.removeListener ( listener ) ; } @ Override public boolean isValid ( ) { return binding.isValid ( ) ; } /** * Override logic for invalidate ( ) method to defer invalidation to runLater . Throttle the invalidations so as not to floor the JavaFX UI thread with * multiple calls */ @ Override public void invalidate ( ) { if ( pendingInvalidation.getAndSet ( true ) == false ) { Platform.runLater ( ( ) - > { // Signal that the UI is processing the pending invalidation , so any additional invalidations must schedule another update . pendingInvalidation.set ( false ) ; binding.invalidate ( ) ; } ) ; } } @ Override public ObservableList < ? > getDependencies ( ) { return binding.getDependencies ( ) ; } @ Override public void dispose ( ) { binding.dispose ( ) ; } }"
"public static < N , E > void doGenericStatic2 ( N number , E element ) { System.out.println ( number ) ; System.out.println ( element ) ; } public static void testInvokeGenericMethodLocally ( ) { doGenericStatic2 ( 100 , `` Text '' ) ; // < Integer , String > doGenericStatic2 ( 100 , `` Text '' ) ; //Syntax error , insert `` super ( ) ; '' to complete Statement MyClass.doGenericStatic2 ( 100 , `` Text '' ) ; MyClass. < Integer , String > doGenericStatic2 ( 100 , `` Text '' ) ; }"
"function getSanitizedHtml ( pagedown ) { var converter = new Markdown.getSanitizingConverter ( ) ; return converter.makeHtml ( pagedown ) ; } < ! DOCTYPE html > < html > < head > < script src= '' pageDown.js '' > < /script > < script > function convert ( ) { var html = getSanitizedHtml ( `` test ` test ` test '' ) ; console.log ( html ) ; document.getElementById ( `` content '' ) .innerHTML = html ; } < /script > < /head > < body onload= '' convert ( ) '' > < p id= '' content '' > < /p > < /body > < /html > import java.io.InputStreamReader ; import javax.script.Invocable ; import javax.script.ScriptEngine ; import javax.script.ScriptEngineManager ; public class PageDownTest { public static void main ( String ... args ) { try { ScriptEngineManager manager = new ScriptEngineManager ( ) ; ScriptEngine engine = manager.getEngineByName ( `` JavaScript '' ) ; engine.eval ( new InputStreamReader ( PageDownTest.class.getResourceAsStream ( `` pageDown.js '' ) ) ) ; Invocable inv = ( Invocable ) engine ; String s = String.valueOf ( inv.invokeFunction ( `` getSanitizedHtml '' , `` test ` test ` test '' ) ) ; System.out.println ( s ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } }"
"StringBuilder b1=new StringBuilder ( `` hello '' ) ; b1.append ( b1.append ( `` ! `` ) ) ; System.out.println ( `` b1 = `` +b1 ) ; b1 = hello ! hello ! StringBuilder s1=null ; StringBuilder s2=new StringBuilder ( `` world '' ) ; try { s1.append ( s1=s2.append ( `` ! `` ) ) ; } catch ( Exception e ) { System.out.println ( e ) ; } System.out.println ( `` s1 = `` +s1+ '' \ns2 = `` +s2+ '' \n '' ) ; java.lang.NullPointerException s1 = world ! s2 = world ! int [ ] y = { 0 , 0 , 0 } ; try { y [ y [ 0 ] = 2 ] = 4 ; } catch ( Exception e ) { System.out.println ( e ) ; } System.out.println ( `` y = `` +Arrays.toString ( y ) + '' \n '' ) ; y = [ 2 , 0 , 4 ] int [ ] x1 = null ; int [ ] x2 = { 1 , 2 , 3 } ; try { x1 [ ( x1=x2 ) [ 0 ] ] = 0 ; } catch ( Exception e ) { System.out.println ( e ) ; } System.out.println ( `` x1 = `` +Arrays.toString ( x1 ) + '' \nx2 = `` +Arrays.toString ( x2 ) ) ; java.lang.NullPointerException x1 = [ 1 , 2 , 3 ] x2 = [ 1 , 2 , 3 ]"
"< 1,3 > < 1,5 > < 3,1 > < 4,2 > < 4,7 > < 4,8 > < 1 , [ 3,5 ] > < 3 , [ 1 ] > < 4 , [ 2,7,8 ] >"
"//reference typespublic Object [ ] thismethodreturnsvalue ( ) { return new Object [ ] { new Object ( ) , new Object ( ) , new Object ( ) } ; } //primitive typespublic int thismethodreturnsint ( ) { return -1 ; } public static void main ( String a [ ] ) { thismethodreturnsvalue ( ) ; thismethodreturnsint ( ) ; }"
"public static List < View > getAllChildren ( View v ) { /* ... */ if ( v instanceof Button ) { resultList.add ( v ) ; } /* ... */ } public static List < View > getAllChildren ( View v , ? myClass ) { /* ... */ if ( v instanceof myClass ) { resultList.add ( v ) ; } /* ... */ }"
"package method_referencing ; import java.util.function.BiPredicate ; import method_referencing.Person ; //1 . static ... .//2 . instance ... //3 . arbitary object //4 . constructorpublic class Method_Ref1 { public static void main ( String [ ] args ) { System.out.println ( checkHere ( Person : :equals ) ) ; } static boolean checkHere ( BiPredicate < Person , Person > pc ) { Person p1 = new Person ( 11 , '' Tom '' , '' Male '' , '' coder '' ) ; Person p2 = new Person ( 21 , '' Tom '' , '' male '' , '' coder '' ) ; return pc.test ( p1 , p2 ) ; } } package method_referencing ; import java.io.Serializable ; public class Person implements Serializable { private static final long serialVersionUID = 5721690807993472050L ; int id ; String name ; String gender ; String note ; public Person ( ) { } public Person ( int id , String name , String gender , String note ) { this.id = id ; this.name = name ; this.gender = gender ; this.note = note ; } public int getId ( ) { return id ; } public void setId ( int id ) { this.id = id ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } public String getGender ( ) { return gender ; } public void setGender ( String gender ) { this.gender = gender ; } public String getNote ( ) { return note ; } public void setNote ( String note ) { this.note = note ; } @ Override public String toString ( ) { return `` id= '' + id + `` , name= '' + name + `` , gender= '' + gender + `` , note= '' + note + `` '' ; } @ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( gender == null ) ? 0 : gender.hashCode ( ) ) ; result = prime * result + id ; result = prime * result + ( ( name == null ) ? 0 : name.hashCode ( ) ) ; result = prime * result + ( ( note == null ) ? 0 : note.hashCode ( ) ) ; return result ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) ! = obj.getClass ( ) ) return false ; Person other = ( Person ) obj ; if ( name == null ) { if ( other.name ! = null ) return false ; } else if ( ! name.equals ( other.name ) ) return false ; return true ; } }"
EntityA { Long id ; //other fields EntityB entity ; } EntityB { //other fields }
"private static Future < Void > runInOtherThread ( final CountDownLatch ready , final Runnable operation ) { final CompletableFuture < Void > future = new CompletableFuture < Void > ( ) ; final Thread thread = new Thread ( ( ) - > { try { ready.await ( ) ; operation.run ( ) ; } catch ( Throwable e ) { future.completeExceptionally ( e ) ; return ; } future.complete ( null ) ; } ) ; thread.start ( ) ; return future ; }"
"package com.test ; public class UnixUtil { static { System.loadLibrary ( `` myfancylibrary '' ) ; } static native int openReadOnlyFd ( String path ) ; static native int closeFd ( int fd ) ; } public class Main { public static void main ( String [ ] args ) { int fd = UnixUtil.openReadOnlyFd ( `` /tmp/testc '' ) ; UnixUtil.closeFd ( fd ) ; } } /* DO NOT EDIT THIS FILE - it is machine generated */ # include < jni.h > /* Header for class com_test_UnixUtil */ # ifndef _Included_com_test_UnixUtil # define _Included_com_test_UnixUtil # ifdef __cplusplusextern `` C '' { # endif/* * Class : com_test_UnixUtil * Method : openReadOnlyFd * Signature : ( Ljava/lang/String ; ) I */JNIEXPORT jint JNICALL Java_com_test_UnixUtil_openReadOnlyFd ( JNIEnv * , jclass , jstring ) ; /* * Class : com_test_UnixUtil * Method : closeFd * Signature : ( I ) I */JNIEXPORT jint JNICALL Java_com_test_UnixUtil_closeFd ( JNIEnv * , jclass , jint ) ; # ifdef __cplusplus } # endif # endif # include `` test_jni.h '' # include `` fs.h '' JNIEXPORT jint JNICALL Java_com_test_UnixUtil_openReadOnlyFd ( JNIEnv *e , jclass jc , jstring path ) { const char *const native_path = ( ( *e ) - > GetStringUTFChars ) ( e , path , NULL ) ; int fd = read_only_open ( native_path ) ; ( ( *e ) - > ReleaseStringUTFChars ) ( e , path , native_path ) ; return fd ; } JNIEXPORT jint JNICALL Java_com_test_UnixUtil_closeFd ( JNIEnv *e , jclass jc , jint fd ) { printf ( `` Closing files descriptord % d ... \n '' , fd ) ; return close ( fd ) ; } # ifndef FS_H # define FS_Hint read_only_open ( const char *path ) ; int close ( int fd ) ; # endif //FS_H # include < unistd.h > # include < string.h > # include < errno.h > # include < stdio.h > # include < sys/fcntl.h > # include `` fs.h '' int read_only_open ( const char *path ) { printf ( `` Entering % s. % s : % d\n '' , __FILE__ , __func__ , __LINE__ ) ; int fd = open ( path , O_RDONLY ) ; return fd ; } int close ( int fd ) { //Java_com_test_UnixUtil_closeFd does not invoke this function printf ( `` Entering % s. % s : % d\n '' , __FILE__ , __func__ , __LINE__ ) ; int close_result = close ( fd ) ; return close_result ; } Thread 2 `` java '' hit Breakpoint 1 , Java_com_test_UnixUtil_closeFd ( e= < optimized out > , jc= < optimized out > , fd=4 ) at /home/rjlomov/test_jni/src/main/java/com/test/lib/test_jni.c:1717 return close ( fd ) ; ( gdb ) step18 } ( gdb ) 17 return close ( fd ) ; ( gdb ) __close ( fd=4 ) at ../sysdeps/unix/sysv/linux/close.c:2727 ../sysdeps/unix/sysv/linux/close.c : No such file or directory . ( gdb ) 26 in ../sysdeps/unix/sysv/linux/close.c JNIEXPORT jint JNICALL Java_com_test_UnixUtil_closeFd ( JNIEnv *e , jclass jc , jint fd ) { 7d0 : 53 push % rbx } // ... return close ( fd ) ; 7e9 : e9 62 fe ff ff jmpq 650 < close @ plt > // < -- - PLT section , // resolved by linker to stdlib : :close ? 7ee : 66 90 xchg % ax , % ax"
"personList : Item 0 -- -- - > AlirezapersonList : Item 1 -- -- - > TohidpersonList : Item 2 -- -- - > Alireza < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < TextView android : id= '' @ +id/tv_name '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' / > < EditText android : id= '' @ +id/et_name '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : hint= '' Name '' / > < Button android : id= '' @ +id/button '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' Add '' / > < /LinearLayout > public class TestAdapter extends RecyclerView.Adapter < RecyclerView.ViewHolder > { private ArrayList < Person > mList ; private View.OnClickListener listener ; public TestAdapter ( ArrayList < Person > mList , View.OnClickListener listener ) { this.mList = mList ; this.listener = listener ; } @ NonNull @ Overridepublic RecyclerView.ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View itemView = LayoutInflater.from ( parent.getContext ( ) ) .inflate ( R.layout.test_adapter_item , parent , false ) ; if ( viewType == Person.State.FIRST.getValue ( ) ) { return new FirstViewHolder ( itemView ) ; } else { // if ( viewType == Person.State.SECOND.getValue ( ) ) return new SecondViewHolder ( itemView ) ; } } @ Overridepublic void onBindViewHolder ( @ NonNull RecyclerView.ViewHolder holder , int position ) { final int pos = holder.getAdapterPosition ( ) ; final Person person = mList.get ( pos ) ; if ( holder instanceof FirstViewHolder ) { final FirstViewHolder h = ( FirstViewHolder ) holder ; h.tvName.setVisibility ( View.GONE ) ; h.etName.setVisibility ( View.VISIBLE ) ; h.etName.setText ( `` '' ) ; h.etName.addTextChangedListener ( new TextWatcher ( ) { @ Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { } @ Override public void onTextChanged ( CharSequence s , int start , int before , int count ) { person.setFirstName ( s.toString ( ) ) ; } @ Override public void afterTextChanged ( Editable s ) { } } ) ; h.btnAccept.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { person.setState ( Person.State.SECOND ) ; notifyItemChanged ( pos ) ; listener.onClick ( v ) ; } } ) ; } else { // if ( holder instanceof SecondViewHolder ) final SecondViewHolder h = ( SecondViewHolder ) holder ; h.tvName.setVisibility ( View.VISIBLE ) ; h.tvName.setText ( person.getFirstName ( ) ) ; h.etName.setVisibility ( View.GONE ) ; h.btnAccept.setVisibility ( View.GONE ) ; } } private static class FirstViewHolder extends RecyclerView.ViewHolder { private TextView tvName ; private EditText etName ; private Button btnAccept ; private FirstViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; tvName = itemView.findViewById ( R.id.tv_name ) ; etName = itemView.findViewById ( R.id.et_name ) ; btnAccept = itemView.findViewById ( R.id.button ) ; } } private static class SecondViewHolder extends RecyclerView.ViewHolder { private TextView tvName ; private EditText etName ; private Button btnAccept ; SecondViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; tvName = itemView.findViewById ( R.id.tv_name ) ; etName = itemView.findViewById ( R.id.et_name ) ; btnAccept = itemView.findViewById ( R.id.button ) ; } } @ Overridepublic int getItemCount ( ) { return mList.size ( ) ; } @ Overridepublic int getItemViewType ( int position ) { return mList.get ( position ) .getState ( ) .getValue ( ) ; } } ArrayList < Person > personList = new ArrayList < > ( ) ; personList.add ( new Person ( `` '' , Person.State.FIRST ) ) ; adapter = new TestAdapter ( personList , new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( personList.size ( ) < 3 ) { personList.add ( new Person ( `` '' , Person.State.FIRST ) ) ; adapter.notifyItemInserted ( personList.size ( ) ) ; } else { for ( int i = 0 ; i < personList.size ( ) ; i++ ) { Log.i ( `` personList '' , `` Item `` + i + `` -- -- - > `` + personList.get ( i ) .getName ( ) ) ; } } } } ) ; RecyclerView recyclerView = findViewById ( R.id.recycler_view ) ; recyclerView.setLayoutManager ( new LinearLayoutManager ( this ) ) ; recyclerView.setAdapter ( adapter ) ;"
java -- enable-preview
"public static < T > void print ( T a , T b ) { System.out.println ( a ) ; System.out.println ( b ) ; } public static void main ( String [ ] args ) { print ( new ArrayList < String > ( ) , 1 ) ; } public static < T > void print ( List < T > a , T b ) { System.out.println ( a ) ; System.out.println ( b ) ; } GenericTest.java:9 : error : method print in class GenericTest can not be applied to given types ; print ( new ArrayList < String > ( ) , 1 ) ; ^ required : List < T > , T found : ArrayList < String > , int reason : no instance ( s ) of type variable ( s ) T exist so that argument type int conforms to formal parameter type T where T is a type-variable : T extends Object declared in method < T > print ( List < T > , T ) 1 error"
public class Test { public static void main ( String [ ] args ) { String str = `` Hello '' ; System.out.println ( str.getClass ( ) ) ; } } public class Test { public static void main ( String [ ] args ) { int arr [ ] = new int [ 10 ] ; System.out.println ( arr.getClass ( ) ) ; } }
abstract class animal { public abstract void speak ( ) ; } class dog extends animal { @ Override public void speak ( ) { // Do something . } } abstract class abstract_dog extends dog { @ Override public abstract void speak ( ) ; }
VA-123456-124_VRG.tif Pattern mpattern = Pattern.compile ( `` - . * ? _ '' ) ;
"static View setupListView ( final Activity activity , View convertView , final ViewGroup parent , MediaBrowserCompat.MediaItem item ) { if ( sColorStateNotPlaying == null || sColorStatePlaying == null ) initializeColorStateLists ( activity ) ; MediaDescriptionCompat description = item.getDescription ( ) ; final MediaItemViewHolder holder ; Integer cachedState = STATE_INVALID ; holder = new MediaItemViewHolder ( ) ; if ( MediaIDHelper.ADVERTISEMENT.equals ( description.getMediaId ( ) ) ) { // Advert show convertView = LayoutInflater . from ( activity ) . inflate ( R.layout.fragment_list_ad , parent , false ) ; try { MobileAds.initialize ( activity , activity.getString ( R.string.admob_app_id ) ) ; holder.mAdView = convertView.findViewById ( R.id.itemAd ) ; adRequest = new AdRequest.Builder ( ) .build ( ) ; holder.mAdView.loadAd ( adRequest ) ; } catch ( Exception ex ) { Log.e ( TAG , ex.getMessage ( ) ) ; } return convertView ; } else if ( MediaIDHelper.isItemHeader ( description.getMediaId ( ) ) ) { convertView = LayoutInflater . from ( activity ) . inflate ( R.layout.fragment_list_header , parent , false ) ; } else if ( MediaIDHelper.isEBookHeader ( description.getMediaId ( ) ) ) { convertView = LayoutInflater . from ( activity ) . inflate ( R.layout.fragment_ebook_header , parent , false ) ; MobileAds.initialize ( activity , activity.getString ( R.string.admob_app_id ) ) ; AdRequest adIRequest = new AdRequest.Builder ( ) .build ( ) ; holder.interstitial = new InterstitialAd ( activity ) ; holder.interstitial.setAdUnitId ( activity.getString ( R.string.admob_interstitial_id ) ) ; // Interstitial Ad load Request holder.interstitial.loadAd ( adIRequest ) ; // Prepare an Interstitial Ad Listener holder.interstitial.setAdListener ( new AdListener ( ) { public void onAdLoaded ( ) { // Call displayInterstitial ( ) function when the Ad loads holder.displayInterstitial ( ) ; } } ) ; } else if ( MediaIDHelper.isBrowseable ( description.getMediaId ( ) ) & & ( MediaIDHelper.isEBook ( description.getMediaId ( ) ) ) || MediaIDHelper.MEDIA_ID_BY_QUEUE.equals ( description.getMediaId ( ) ) ) { convertView = LayoutInflater . from ( activity ) . inflate ( R.layout.fragment_ebook_item , parent , false ) ; } else { // Everything else convertView = LayoutInflater . from ( activity ) . inflate ( R.layout.fragment_list_item , parent , false ) ; } convertView.setTag ( holder ) ; holder.mImageView = ( ImageView ) convertView.findViewById ( R.id.play_eq ) ; holder.mTitleView = ( TextView ) convertView.findViewById ( R.id.title ) ; holder.mDescriptionView = ( TextView ) convertView.findViewById ( R.id.description ) ; if ( holder.mTitleView ! = null ) { holder.mTitleView.setText ( description.getTitle ( ) ) ; } if ( holder.mDescriptionView ! = null ) { holder.mDescriptionView.setText ( description.getSubtitle ( ) ) ; } if ( holder.mImageView ! = null ) { int state = getMediaItemState ( activity , item ) ; if ( cachedState == null || cachedState ! = state ) { if ( MediaIDHelper.isBrowseable ( description.getMediaId ( ) ) || MediaIDHelper.isEBookHeader ( description.getMediaId ( ) ) ) { Uri imageUri = item.getDescription ( ) .getIconUri ( ) ; GlideApp . with ( activity ) . load ( imageUri ) . override ( Target.SIZE_ORIGINAL ) . fallback ( R.drawable.default_book_cover ) . error ( R.drawable.default_book_cover ) . /*listener ( new RequestListener < Drawable > ( ) { @ Override public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Drawable > target , boolean isFirstResource ) { return false ; } @ Override public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { return false ; } } ) . */ into ( holder.mImageView ) ; public void displayInterstitial ( ) { // If Interstitial Ads are loaded then show else show nothing . if ( interstitial.isLoaded ( ) ) { interstitial.show ( ) ; } }"
"@ Dataclass TrainingRequest { @ Transient List < Feedack > feedback ; } @ Dataclass Feedback { String Q1 ; String Q2 ; } List < TrainingRequest > trainingList = Optional.ofNullable ( trainingRequestList ) .orElseGet ( Collections : :emptyList ) .stream ( ) .map ( m - > { List < Feedback > feedback = findByTrainingRequestId ( m.getId ( ) ) ; m.setFeedback ( feedback ) ; // assigning Feedack to TrainingRequest return m ; } ) .collect ( Collectors.toList ( ) ) ; List < Feedback > flatMap = trainingList.stream ( ) .flatMap ( f - > f.getFeedback ( ) .stream ( ) ) .collect ( Collectors.toList ( ) ) ; Map < String , Map < String , Long > > map = new TreeMap < > ( ) ; map.put ( `` Q1 '' , flatMap.stream ( ) .collect ( Collectors.groupingBy ( Feedback : :getQ1 , Collectors.counting ( ) ) ) ) ; map.put ( `` Q2 '' , flatMap.stream ( ) .collect ( Collectors.groupingBy ( Feedback : :getQ2 , Collectors.counting ( ) ) ) ) ; { `` Q1 '' : { `` unsatisfied '' : 2 , `` Satisfied '' : 1 , `` satisfied '' : 1 } , `` Q2 '' : { `` Yes '' : 4 } } { `` Q1 '' : { `` unsatisfied '' : 50 % , `` Satisfied '' : 25 % , `` satisfied '' : 25 % } , `` Q2 '' : { `` Yes '' : 100 % } }"
String str= '' ab '' ; String str1= '' c '' ; String str2 = `` ab '' + '' c '' ; // Line 3String str3 = `` abc '' ; String str4 = str+str1 ; // Line 5System.out.println ( str2==str3 ) ; // TrueSystem.out.println ( str2==str4 ) ; // False
class A { @ Transactional public void insert ( ) { //insert something } }
"package com.negano.Uploader ; import java.io.BufferedReader ; import java.io.File ; import java.io.InputStream ; import java.io.InputStreamReader ; import org.apache.http.HttpResponse ; import org.apache.http.HttpVersion ; import org.apache.http.client.methods.HttpPost ; import org.apache.http.entity.mime.HttpMultipartMode ; import org.apache.http.entity.mime.MultipartEntity ; import org.apache.http.entity.mime.content.FileBody ; import org.apache.http.entity.mime.content.StringBody ; import org.apache.http.impl.client.DefaultHttpClient ; import org.apache.http.params.BasicHttpParams ; import org.apache.http.params.CoreProtocolPNames ; import org.apache.http.params.HttpParams ; import android.app.Activity ; import android.os.Bundle ; import android.os.Environment ; import android.util.Log ; import android.view.View ; import android.view.View.OnClickListener ; public class ActivityMain extends Activity { private static DefaultHttpClient mHttpClient ; public static void ServerCommunication ( ) { HttpParams params = new BasicHttpParams ( ) ; params.setParameter ( CoreProtocolPNames.PROTOCOL_VERSION , HttpVersion.HTTP_1_1 ) ; mHttpClient = new DefaultHttpClient ( params ) ; } public void uploadUserPhoto ( File image ) { try { HttpPost httppost = new HttpPost ( `` http : //logcat.ir/uproid.php '' ) ; MultipartEntity multipartEntity = new MultipartEntity ( HttpMultipartMode.BROWSER_COMPATIBLE ) ; multipartEntity.addPart ( `` Title '' , new StringBody ( `` Title '' ) ) ; multipartEntity.addPart ( `` Nick '' , new StringBody ( `` Nick '' ) ) ; multipartEntity.addPart ( `` Email '' , new StringBody ( `` Email '' ) ) ; multipartEntity.addPart ( `` Image '' , new FileBody ( image ) ) ; httppost.setEntity ( multipartEntity ) ; HttpResponse result = mHttpClient.execute ( httppost ) ; InputStream stream ; stream = result.getEntity ( ) .getContent ( ) ; String response = inputstreamToString ( stream ) ; Log.i ( `` negano '' , `` response is `` + response ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } public static String inputstreamToString ( InputStream inputStream ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; StringBuilder builder = new StringBuilder ( ) ; try { String line ; while ( ( line = reader.readLine ( ) ) ! = null ) { builder.append ( line ) ; } return builder.toString ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } return null ; } @ Override public void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; final String path = Environment.getExternalStorageDirectory ( ) + `` /1.jpg '' ; findViewById ( R.id.upload ) .setOnClickListener ( new OnClickListener ( ) { @ Override public void onClick ( View v ) { ServerCommunication ( ) ; uploadUserPhoto ( new File ( path ) ) ; } } ) ; } }"
1 . This is a test message This is a test message String delimiter= '' . `` ; String [ ] parts = line.split ( delimiter ) ; int gg=parts.length ; for ( int k ; k < gg ; K++ ) parts [ k ] ;
public class Test { public static void main ( String [ ] args ) { Object o1 = new Object ( ) { String getSomething ( ) { return `` AAA '' ; } } ; // o1.getSomething ( ) ; // FAILS String methods1 = Arrays.toString ( o1.getClass ( ) .getMethods ( ) ) ; var o2 = new Object ( ) { String getSomething ( ) { return `` AAA '' ; } } ; o2.getSomething ( ) ; // OK String methods2 = Arrays.toString ( o2.getClass ( ) .getMethods ( ) ) ; System.out.println ( methods1.equals ( methods2 ) ) ; } }
"abstract class MyStream { public abstract Iterable < Integer > getIterable ( ) ; public MyStream append ( final int i ) { return new MyStream ( ) { @ Override public Iterable < Integer > getIterable ( ) { return cons ( /*outer class's*/getIterable ( ) , i ) ; } } ; } public static Iterable < Integer > cons ( Iterable < Integer > iter , int i ) { /* implementation */ } }"
"public class ParentModel { } public class ChildModel extends ParentModel { } public class Service < E extends ParentModel , T extends Collection < E > > { private Class < T > classOfT ; private Class < E > classOfE ; public Service ( Class < E > classOfE , Class < T > classOfT ) { this.classOfE = classOfE ; this.classOfT = classOfT ; } } public class BusinessLogic { public void someLogic ( ) { Service < ChildModel , ArrayList < ChildModel > > service = new Service < ChildModel , ArrayList < ChildModel > > ( ChildModel.class , ArrayList.class ) ; } }"
"class MyNumber extends Thread { private volatile boolean processing = true ; public void run ( ) { while ( processing ) { // Once I take this for loop out ( put // beside it like right now ) , the enter key to stop the program then does work . //for ( int i = 1 ; i < 27 ; i++ ) { System.out.println ( `` Letter `` + `` i '' ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } // } } } public void permSleep ( ) { processing = false ; } } public class LetterNumber { public static void main ( String [ ] args ) { MyNumber num1 = new MyNumber ( ) ; num1.start ( ) ; System.out.println ( `` Hit enter to stop the Numbers ! `` ) ; Scanner shutter1 = new Scanner ( System.in ) ; shutter1.nextLine ( ) ; num1.permSleep ( ) ; } }"
( ( ? =.*\d ) ( ? =.* [ a-z ] ) ( ? = . * [ A-Z ] ) )
< methodName > ( < any parameters > ) : < retunType > - < actual class the method will be invoked from >
"public void function ( object a , object b ) { synchronized ( a ) { synchronized ( b ) { a.performAction ( b ) ; b.performAction ( a ) ; } } }"
( proxy [ Some Java Interface ] [ ] ( some Java Method [ args ] ... Clojure code ... ) )
fun simple ( ) : Sequence < Int > = sequence { // sequence builder for ( i in 1..3 ) { Thread.sleep ( 100 ) // pretend we are computing it yield ( i ) // yield next value } } fun main ( ) { simple ( ) .forEach { value - > println ( value ) } }
class Hello { static { Abc abcObject=new Abc ( ) ; } // Other Code ... }
"String handle=parameters.getParameter ( `` handle '' , '' unknown '' ) ; DSpaceObject dso = HandleManager.resolveToObject ( context , handle ) ; if ( ! ( dso instanceof Item ) ) { return ; } Request request = ObjectModelHelper.getRequest ( objectModel ) ; boolean firstVisit=Boolean.valueOf ( request.getParameter ( `` firstVisit '' ) ) ; Item item = ( Item ) dso ; // Build the item viewer division . Division documentdelivery = body.addInteractiveDivision ( `` DocumentDelivery-form '' , contextPath+ '' /documentdelivery/ '' +parameters.getParameter ( `` handle '' , '' unknown '' ) , Division.METHOD_POST , '' primary '' ) ; String handle=parameters.getParameter ( `` handle '' , '' unknown '' ) ; DSpaceObject dso = handleService.resolveToObject ( context , handle ) ; if ( ! ( dso instanceof Item ) ) { return ; } Request request = ObjectModelHelper.getRequest ( objectModel ) ; Item item = ( Item ) dso ; // Build the item viewer division . Division documentdelivery = body.addInteractiveDivision ( `` DocumentDelivery-form '' , request.getRequestURI ( ) + `` /documentdelivery/ '' + item.getHandle ( ) , Division.METHOD_POST , '' primary '' ) ; Request request = ObjectModelHelper.getRequest ( objectModel ) ; String handle = request.getParameter ( `` handle '' ) ; DSpaceObject dso = handleService.resolveToObject ( context , handle ) ; if ( ! ( dso instanceof Item ) ) { return ; } boolean firstVisit=Boolean.valueOf ( request.getParameter ( `` firstVisit '' ) ) ; Item item = ( Item ) dso ; // Build the item viewer division . Division documentdelivery = body.addInteractiveDivision ( `` DocumentDelivery-form '' , contextPath+ '' /documentdelivery/ '' +parameters.getParameter ( `` handle '' , '' unknown '' ) , Division.METHOD_POST , '' primary '' ) ; Division documentdelivery = body.addInteractiveDivision ( `` DocumentDelivery-form '' , request.getRequestURI ( ) + `` /documentdelivery/ '' + item.getHandle ( ) , Division.METHOD_POST , '' primary '' ) ; Division documentdelivery = body.addInteractiveDivision ( `` DocumentDelivery-form '' , contextPath+ '' /documentdelivery/ '' +parameters.getParameter ( `` handle '' , '' unknown '' ) , Division.METHOD_POST , '' primary '' ) ;"
"public < T > Provider < T > scope ( Key < T > key , Provider < T > unscoped ) ;"
"MongoClient mongoClient = new MongoClient ( `` 10.4.0.121 '' ,6001 ) ; DB db = mongoClient.getDB ( `` qbClientDB '' ) ; DBCollection collection = db.getCollection ( `` clientInfo '' ) ;"
! metadata.isEmpty ( ) == metadata.notEmpty ( )
"public class Stock { private int stockCode ; private int stockQuantity ; private int stockValue ; public int getStockCode ( ) { return stockCode ; } public int getStockQuantity ( ) { return stockQuantity ; } public int getStockValue ( ) { return stockValue ; } public Stock ( int stockCode , int stockQuantity , int stockValue ) { this.stockCode = stockCode ; this.stockQuantity = stockQuantity ; this.stockValue = stockValue ; } public static void main ( String [ ] args ) { List < Stock > oldStock = new ArrayList < Stock > ( ) ; Stock s1 = new Stock ( 1 , 20 , 16000 ) ; Stock s2 = new Stock ( 2 , 10 , 5000 ) ; Stock s3 = new Stock ( 3 , 15 , 3000 ) ; oldStock.add ( s1 ) ; oldStock.add ( s2 ) ; oldStock.add ( s3 ) ; List < Stock > newStock = new ArrayList < Stock > ( ) ; Stock s4 = new Stock ( 5 , 5 , 2500 ) ; Stock s5 = new Stock ( 1 , 10 , 8000 ) ; Stock s6 = new Stock ( 3 , 10 , 2000 ) ; newStock.add ( s4 ) ; newStock.add ( s5 ) ; newStock.add ( s6 ) ; List < Stock > netStock = new ArrayList < Stock > ( ) ; Map < Integer , Stock > oldStockMap = new HashMap < Integer , Stock > ( ) ; for ( Stock os : oldStock ) { oldStockMap.put ( os.getStockCode ( ) , os ) ; } Map < Integer , Stock > newStockMap = new HashMap < Integer , Stock > ( ) ; for ( Stock ns : newStock ) { newStockMap.put ( ns.getStockCode ( ) , ns ) ; } Set < Integer > keySet = new HashSet < Integer > ( ) ; keySet.addAll ( oldStockMap.keySet ( ) ) ; keySet.addAll ( newStockMap.keySet ( ) ) ; for ( Integer ks : keySet ) { Integer netStockQ=0 ; Integer netStockV=0 ; if ( oldStockMap.get ( ks ) ! =null & & newStockMap.get ( ks ) ! =null ) { netStockQ =oldStockMap.get ( ks ) .getStockQuantity ( ) + newStockMap.get ( ks ) .getStockQuantity ( ) ; netStockV = oldStockMap.get ( ks ) .getStockValue ( ) + newStockMap.get ( ks ) .getStockValue ( ) ; } else if ( oldStockMap.get ( ks ) ==null & & newStockMap.get ( ks ) ! =null ) { netStockQ = newStockMap.get ( ks ) .getStockQuantity ( ) ; netStockV = newStockMap.get ( ks ) .getStockValue ( ) ; } else if ( oldStockMap.get ( ks ) ! =null & & newStockMap.get ( ks ) ==null ) { netStockQ =oldStockMap.get ( ks ) .getStockQuantity ( ) ; netStockV = oldStockMap.get ( ks ) .getStockValue ( ) ; } netStock.add ( new Stock ( ks , netStockQ , netStockV ) ) ; } for ( Stock ns : netStock ) { System.out.println ( ns.getStockCode ( ) + '' - Quantity - `` + ns.getStockQuantity ( ) + '' - Value - '' +ns.getStockValue ( ) ) ; } } } 1- Quantity - 30- Value -240002- Quantity - 10- Value -50003- Quantity - 25- Value -50005- Quantity - 5- Value -2500"
"void permutation ( String str ) { permutation ( str , `` '' ) ; } private void permutation ( String str , String prefix ) { if ( str.length ( ) == 0 ) { System.out.println ( prefix ) ; } else { for ( int i = 0 ; i < str.length ( ) ; i++ ) { String rem = str.substring ( 0 , i ) + str.substring ( i + 1 ) ; permutation ( rem , prefix + str.charAt ( i ) ) ; } } }"
public class Person { String name ; public Person ( String name ) { this.name = name ; } public void print ( ) { System.out.println ( `` xxx '' ) ; } } Person p1 = new Person ( `` a '' ) ; Person p2 = new Person ( `` b '' ) ; Person p3 = new Person ( `` c '' ) ; Person p4 = new Person ( `` d '' ) ; Person p5 = new Person ( `` e '' ) ; Person p6 = new Person ( `` f '' ) ; Person p7 = new Person ( `` g '' ) ; Person p8 = new Person ( `` h '' ) ;
( MyObject ) IObject ; i++ ;
public class Main { public static void main ( String [ ] args ) { obj1 obj1 = new obj1 ( ) ; obj1 obj12 = new obj1 ( ) ; obj2 obj2 = new obj2 ( ) ; obj2 obj22 = new obj2 ( ) ; obj1.id = 123L ; obj1.carId = 1234L ; obj12.id = 123L ; obj12.carId = 1234L ; obj2.carId = 1234L ; obj22.carId = 12345L ; ArrayList < obj1 > obj1Arr = new ArrayList < > ( ) ; ArrayList < obj2 > obj2Arr = new ArrayList < > ( ) ; obj1Arr.add ( obj1 ) ; obj1Arr.add ( obj12 ) ; obj2Arr.add ( obj2 ) ; obj2Arr.add ( obj22 ) ; List < obj2 > newCarList= obj2Arr.stream ( ) .filter ( anObjOf2 - > obj1Arr .stream ( ) .anyMatch ( carReg - > carReg.getCarId ( ) .equals ( anObjOf2.getCarId ( ) ) ) ) .collect ( Collectors.toList ( ) ) ; } } public class obj1 { Long id = null ; Long carId = null ; public Long getId ( ) { return id ; } public void setId ( Long id ) { this.id = id ; } public Long getCarId ( ) { return carId ; } public void setCarId ( Long carId ) { this.carId = carId ; } } public class obj2 { Long id = null ; Long carId = null ; public Long getId ( ) { return id ; } public void setId ( Long id ) { this.id = id ; } public Long getCarId ( ) { return carId ; } public void setCarId ( Long carId ) { this.carId = carId ; } }
var a = `` hello world '' .split ( `` `` ) ; var a ( : String [ ] ) = `` hello world '' .split ( `` `` ) ;
[ TEST ] [ 64894 ] HelloWorld [ KGMObilians ]
public class SumOfTwoDice { public static void main ( String [ ] args ) { int SIDES = 6 ; int a = 1 + ( int ) ( Math.random ( ) * SIDES ) ; int b = 1 + ( int ) ( Math.random ( ) * SIDES ) ; int sum = a + b ; System.out.println ( sum ) ; } }
public static void main ( String [ ] args ) { String s1 = `` abc '' ; String s2 = `` abcd '' ; String s3 = `` abc '' + '' d '' ; String s4 = s1 + `` d '' ; System.out.println ( s2 == s3 ) ; // OP : true System.out.println ( s2 == s4 ) ; // OP : false }
mntmOpenDatabase.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { //open the database //display tables as buttons tableButton.addActionListener ( new ActionListener ( ) { // select a table public void actionPerformed ( ActionEvent e ) { //display the columns of the table selected as buttons colButton.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { // add to the list of columns to be exported }
if ( word.endsWith ( `` . '' ) || word.endsWith ( `` ! '' ) || word.endsWith ( `` ? '' ) ) { sentenceCount++ } if ( word.endsWith ( delimitersStringorArray.contains ( ) ) { sentenceCount++ }
Long l ; Long l1 = 100L ; Long l2 = 100L ; System.out.println ( Long.valueOf ( 100L ) == Long.valueOf ( 100L ) ) ; System.out.println ( ( l = 100L ) == Long.valueOf ( 100L ) ) ; System.out.println ( l1 == l2 ) ; System.out.println ( Long.valueOf ( 128L ) == Long.valueOf ( 128L ) ) ; System.out.println ( Long.valueOf ( 129L ) == 129L ) ; System.out.println ( Long.valueOf ( 255L ) == new Long ( 255L ) ) ; Long l1 = 100L ; Long l2 = 100L ; System.out.println ( 100L == 100L ) ; System.out.println ( 100L == 100L ) ; System.out.println ( l1 == l2 ) ; System.out.println ( 128L == 128L ) ; System.out.println ( Long.valueOf ( 129L ) == 129L ) ; System.out.println ( 255L == new Long ( 255L ) ) ; truetruetruefalsetruefalse System.out.println ( System.identityHashCode ( Long.valueOf ( 129L ) ) ) ; System.out.println ( System.identityHashCode ( 129L ) ) ; System.out.println ( System.identityHashCode ( 129L ) ) ; 73126086017093662591335298403
public interface A { int get ( ) ; } public interface B { int get ( ) ; int somethingelse ( ) ; } public int foo ( ( A | B ) p ) { int ret = 0 ; if ( p instanceof B ) { ret = p.somthingelse ( ) ; } return ret + p.get ( ) ; }
public class Test { public static void main ( String [ ] args ) { int x = 150_000 ; long start = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < x ; i++ ) { f1 ( i ) ; } long end = System.currentTimeMillis ( ) ; System.out.println ( ( end - start ) / 1000.0 ) ; } private static long f1 ( int n ) { long x = 1 ; for ( int i = 0 ; i < n ; i++ ) { x = x + x ; } return x ; } }
int j = 0 ; LABEL1 : j++ ; LABEL2 : for ( int i = 0 ; i < 4 ; i++ ) { if ( i == 3 ) break LABEL2 ; }
@ ArtifactInfo ( release= '' 1.2 '' cr= '' cr123 '' )
"java version `` 1.8.0_144 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_144-b01 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.144-b01 , mixed mode ) public List < Integer > ints = new ArrayList < > ( ) ; Collector < Integer , ? , Long > counting = Collectors.counting ( ) ; Collector < Integer , ? , Long > summingLong = Collectors.summingLong ( x - > 1L ) ; @ Setuppublic void setup ( ) throws Exception { ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; ints.add ( new Random ( ) .nextInt ( 1000 ) ) ; } @ Benchmark @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) @ BenchmarkMode ( Mode.AverageTime ) public Long counting ( ) { return ints.stream ( ) .collect ( counting ) ; } @ Benchmark @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) @ BenchmarkMode ( Mode.AverageTime ) public Long summingLong ( ) { return ints.stream ( ) .collect ( summingLong ) ; } Benchmark Mode Cnt Score Error UnitsMyBenchmark.counting avgt 125 87.115 ± 3.787 ns/opMyBenchmark.counting : CPI avgt 25 0.310 ± 0.011 # /opMyBenchmark.counting : L1-dcache-load-misses avgt 25 1.963 ± 0.171 # /opMyBenchmark.counting : L1-dcache-loads avgt 25 258.716 ± 41.458 # /opMyBenchmark.counting : L1-dcache-store-misses avgt 25 1.890 ± 0.168 # /opMyBenchmark.counting : L1-dcache-stores avgt 25 131.344 ± 16.433 # /opMyBenchmark.counting : L1-icache-load-misses avgt 25 0.035 ± 0.007 # /opMyBenchmark.counting : LLC-loads avgt 25 0.411 ± 0.143 # /opMyBenchmark.counting : LLC-stores avgt 25 0.007 ± 0.001 # /opMyBenchmark.counting : branch-misses avgt 25 0.029 ± 0.017 # /opMyBenchmark.counting : branches avgt 25 139.669 ± 21.901 # /opMyBenchmark.counting : cycles avgt 25 261.967 ± 29.392 # /opMyBenchmark.counting : dTLB-load-misses avgt 25 0.036 ± 0.003 # /opMyBenchmark.counting : dTLB-loads avgt 25 258.111 ± 41.008 # /opMyBenchmark.counting : dTLB-store-misses avgt 25 0.001 ± 0.001 # /opMyBenchmark.counting : dTLB-stores avgt 25 131.394 ± 16.166 # /opMyBenchmark.counting : iTLB-load-misses avgt 25 0.001 ± 0.001 # /opMyBenchmark.counting : iTLB-loads avgt 25 0.001 ± 0.001 # /opMyBenchmark.counting : instructions avgt 25 850.262 ± 113.228 # /opMyBenchmark.counting : stalled-cycles-frontend avgt 25 48.493 ± 8.968 # /opMyBenchmark.summingLong avgt 125 37.238 ± 0.194 ns/opMyBenchmark.summingLong : CPI avgt 25 0.311 ± 0.002 # /opMyBenchmark.summingLong : L1-dcache-load-misses avgt 25 1.793 ± 0.013 # /opMyBenchmark.summingLong : L1-dcache-loads avgt 25 93.785 ± 0.640 # /opMyBenchmark.summingLong : L1-dcache-store-misses avgt 25 1.727 ± 0.013 # /opMyBenchmark.summingLong : L1-dcache-stores avgt 25 56.249 ± 0.408 # /opMyBenchmark.summingLong : L1-icache-load-misses avgt 25 0.020 ± 0.003 # /opMyBenchmark.summingLong : LLC-loads avgt 25 0.843 ± 0.117 # /opMyBenchmark.summingLong : LLC-stores avgt 25 0.004 ± 0.001 # /opMyBenchmark.summingLong : branch-misses avgt 25 0.008 ± 0.002 # /opMyBenchmark.summingLong : branches avgt 25 61.472 ± 0.260 # /opMyBenchmark.summingLong : cycles avgt 25 110.949 ± 0.784 # /opMyBenchmark.summingLong : dTLB-load-misses avgt 25 0.031 ± 0.001 # /opMyBenchmark.summingLong : dTLB-loads avgt 25 93.662 ± 0.616 # /opMyBenchmark.summingLong : dTLB-store-misses avgt 25 ≈ 10⁻³ # /opMyBenchmark.summingLong : dTLB-stores avgt 25 56.302 ± 0.351 # /opMyBenchmark.summingLong : iTLB-load-misses avgt 25 0.001 ± 0.001 # /opMyBenchmark.summingLong : iTLB-loads avgt 25 ≈ 10⁻³ # /opMyBenchmark.summingLong : instructions avgt 25 357.029 ± 1.712 # /opMyBenchmark.summingLong : stalled-cycles-frontend avgt 25 10.074 ± 1.096 # /op 0x00007f9abd226dfd : mov % edi , % ebp ; contains the iteration indexincl % ebp ; ... 0x00007f9abd226e27 : incl % edi0x00007f9abd226e29 : cmp % ebp , % edi0x00007f9abd226e2b : jnl 0x7f9abd226e34 ; exit after the first iteration 0x00007f9abd226ea6 : add $ 0x1 , % rsi ; ... 0x00007f9abd226ed0 : add $ 0x2 , % rsi ; ... 0x00007f9abd226efa : add $ 0x3 , % rsi ; ... 0x00007f9abd226f1c : add $ 0x4 , % rbx ; ... 0x00007f9abd226f20 : mov % rbx,0x10 ( % r14 ) 0x00007f80dd22dfb5 : mov $ 0x1 , % esi0x00007f80dd22dfba : nop0x00007f80dd22dfbb : callq 0x7f80dd046420 0x00007f80dd22dfec : mov $ 0x1 , % r10d0x00007f80dd22dff2 : add 0x10 ( % r11 ) , % r10 MyBenchmark.counting avgt 5 96.956 ± 4.412 ns/opMyBenchmark.counting : ·gc.alloc.rate avgt 5 734.538 ± 33.083 MB/secMyBenchmark.counting : ·gc.alloc.rate.norm avgt 5 112.000 ± 0.001 B/opMyBenchmark.counting : ·gc.churn.PS_Eden_Space avgt 5 731.423 ± 340.767 MB/secMyBenchmark.counting : ·gc.churn.PS_Eden_Space.norm avgt 5 111.451 ± 48.411 B/opMyBenchmark.counting : ·gc.churn.PS_Survivor_Space avgt 5 0.017 ± 0.067 MB/secMyBenchmark.counting : ·gc.churn.PS_Survivor_Space.norm avgt 5 0.003 ± 0.010 B/opMyBenchmark.counting : ·gc.count avgt 5 16.000 countsMyBenchmark.counting : ·gc.time avgt 5 12.000 msMyBenchmark.summingLong avgt 5 38.371 ± 1.733 ns/opMyBenchmark.summingLong : ·gc.alloc.rate avgt 5 1856.581 ± 81.706 MB/secMyBenchmark.summingLong : ·gc.alloc.rate.norm avgt 5 112.000 ± 0.001 B/opMyBenchmark.summingLong : ·gc.churn.PS_Eden_Space avgt 5 1876.736 ± 192.503 MB/secMyBenchmark.summingLong : ·gc.churn.PS_Eden_Space.norm avgt 5 113.213 ± 9.916 B/opMyBenchmark.summingLong : ·gc.churn.PS_Survivor_Space avgt 5 0.033 ± 0.072 MB/secMyBenchmark.summingLong : ·gc.churn.PS_Survivor_Space.norm avgt 5 0.002 ± 0.004 B/opMyBenchmark.summingLong : ·gc.count avgt 5 62.000 countsMyBenchmark.summingLong : ·gc.time avgt 5 48.000 ms"
"File searchFile ( File location , String fileName ) { if ( location.isDirectory ( ) ) { File [ ] arr = location.listFiles ( ) ; for ( File f : arr ) { File found = searchFile ( f , fileName ) ; if ( found ! = null ) return found ; } } else { if ( location.getName ( ) .equals ( fileName ) ) { return location ; } } return null ; }"
private int startTime = System.currentTimeMillis ( ) ; //At start of algorithmprivate int endTime = System.currentTimeMillis ( ) ; //At the end of algorithmint runningTime = endTime - startTime ;
public class MyClass { private int myAttr ; public void setAttr ( int a ) { myAttr = a ; Thread.dumpStack ( ) ; } }
"this.add ( new PaintSurface ( ) , BorderLayout.CENTER ) ; private class PaintSurface extends JComponent { Shape found = null ; public PaintSurface ( ) { JOptionPane.showMessageDialog ( null , `` Repainting '' ) ; Shape s ; msgbox ( `` LL : `` + intLivesLost ) ; switch ( intLivesLost ) { //draw the Hanged man case 10 : //Face + KILL case 9 : //2nd Arm case 8 : //1st Arm case 7 : //2nd Leg case 6 : //1st Leg case 5 : //Body case 4 : //Head shapes.add ( s ) ; case 3 : //Horizontal Bar s = new Line2D.Float ( 100 , 450 , 250 , 450 ) ; shapes.add ( s ) ; //Rope s = new Line2D.Float ( 250 , 450 , 250 , 500 ) ; shapes.add ( s ) ; case 2 : //Vertical Bar s = new Line2D.Float ( 100 , 450 , 100 , 670 ) ; shapes.add ( s ) ; case 1 : //Stand s = new Line2D.Float ( 40 , 670 , 460 , 670 ) ; shapes.add ( s ) ; break ; default : break ; } } public void paint ( Graphics g ) { Graphics2D g2 = ( Graphics2D ) g ; g2.setRenderingHint ( RenderingHints.KEY_ANTIALIASING , RenderingHints.VALUE_ANTIALIAS_ON ) ; g2.setStroke ( new BasicStroke ( 4 ) ) ; g2.setColor ( Color.BLACK ) ; for ( Shape count : shapes ) { g2.draw ( count ) ; } } } repaint ( ) ;"
public void method ( ) { if ( condition ) { Object x = ... . ; } System.out.println ( x ) ; // Error : x unavailable }
class A { private int foo ; public A ( int bar ) { this.foo = bar ; } public A setFoo ( int bar ) { this.foo = bar ; return this ; } public int getFoo ( ) { return this.foo ; } public void doSomething ( ) { this.foo++ ; } } A a = new A ( 0 ) ; a.setFoo ( 1 ) .doSomething ( ) ; class B extends A implements I { public B ( int bar ) { this.super ( bar ) ; } public void methodI ( ) { // whatever } } B b = new B ( 1 ) ; b.setFoo ( 2 ) .methodI ( ) ;
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < scr : component xmlns : scr= '' http : //www.osgi.org/xmlns/scr/v1.1.0 '' activate= '' init '' deactivate= '' dispose '' enabled= '' true '' name= '' redacted.redactedstore '' > < implementation class= '' redacted.RedactedStore '' / > < service > < provide interface= '' redacted.IRedactedStore '' / > < provide interface= '' redacted.IRedactedStoreControl '' / > < /service > < /scr : component > tracker = new ServiceTracker < > ( getBundle ( ) .getBundleContext ( ) , < serviceClass > .class , null ) ; tracker.open ( ) ; tracker.waitForService ( 1000l ) ;"
class Test { public static void main ( final String ... arguments ) { for ( String argument : arguments ) { System.out.println ( argument ) ; } } } $ java Test ! clearjava Test clearclear $ java Test ! pwdjava Test pwdpwd $ java Test ! lsjava Test lsls
void timerCountDown ( ) { while ( RaftNode.getTimeoutVar ( ) ) { long x = System.currentTimeMillis ( ) ; if ( x > = RaftNode.limit ) { System.out.println ( x ) ; System.out.println ( RaftNode.limit + `` THIS SHOULD BE LESS THAN '' ) ; System.out.println ( System.currentTimeMillis ( ) + `` THIS '' ) ; System.out.println ( `` TIMED OUT '' ) ; raft.RaftNode.setTimeoutVar ( false ) ; nextRandomTimeOut ( ) ; raft.RaftNode.onTimeOut ( ) ; } } } 14315328705421431532872508 THIS SHOULD BE LESS THAN1431532870542 THIS public static long limit ;
public class A { public synchronized int do1 ( ) { ... } public synchronized void do2 ( int i ) { ... } } A a = new A ( ) ; a.do2 ( a.do1 ( ) ) ;
RepositoryDTO repoDTO = ... List < TeamDTO > teamsLinkedToRepo = getTeamsLinkedTo ( repoDTO ) ; private List < TeamDTO > getTeamsLinkedTo ( final RepositoryDTO repository ) { final List < TeamDTO > teamsLinkedToRepository = new ArrayList < TeamDTO > ( ) ; for ( final ResourceDTO resourceDTO : repository.getResources ( ) ) { teamsLinkedToRepository.add ( resourceDTO.getTeam ( ) ) ; } return teamsLinkedToRepository ; }
package test ; import java.net.URL ; import java.net.URLConnection ; import java.util.ArrayList ; public class Main { public static void main ( String [ ] args ) { try { ArrayList < URLConnection > al = new ArrayList < URLConnection > ( ) ; URL url = new URL ( `` http : //www.example.com '' ) ; URLConnection conn = url.openConnection ( ) ; al.add ( conn ) ; System.out.println ( `` Result of removing = `` + al.remove ( conn ) ) ; } catch ( Exception ex ) { ex.printStackTrace ( System.err ) ; } } }
"public class Main { public static void main ( String [ ] args ) throws IllegalAccessException , NoSuchFieldException { Field value=Integer.class.getDeclaredField ( `` value '' ) ; value.setAccessible ( true ) ; value.set ( 42 , 43 ) ; System.out.printf ( `` six times seven % d % n '' ,6*7 ) ; System.out.printf ( `` six times seven % d % n '' ,42 ) ; System.out.println ( 42 ) ; } } six times seven 43six times seven 4342"
"private String userName ; private int userSalary ; List < UserDetail > userDetails = new ArrayList < > ( ) ; UserDetail user1 = new UserDetail ( `` Robert '' , 100 ) ; UserDetail user2 = new UserDetail ( `` John '' , 100 ) ; UserDetail user3 = new UserDetail ( `` Robert '' , 55 ) ; userdetails.add ( user1 ) ; userdetails.add ( user2 ) ; userdetails.add ( user3 ) ; userName userSalaryRobert 155John 100"
"public class HostExtractorFactory { private HostExtractorFactory ( ) { } public static HostExtractor getHostExtractor ( URL url ) throws URLNotSupportedException { String host = url.getHost ( ) ; switch ( host ) { case HostExtractorABC.HOST_NAME : return HostExtractorAbc.getInstance ( ) ; case HostExtractorDEF.HOST_NAME : return HostExtractorDef.getInstance ( ) ; case HostExtractorGHI.HOST_NAME : return HostExtractorGhi.getInstance ( ) ; default : throw new URLNotSupportedException ( `` The url provided does not have a corresponding HostExtractor : [ `` + host + `` ] '' ) ; } } public class HostExtractorFactory { private static final Map < String , HostExtractor > EXTRACTOR_MAPPING = new HashMap < > ( ) ; private HostExtractorFactory ( ) { } public static HostExtractor getHostExtractor ( URL url ) throws URLNotSupportedException { String host = url.getHost ( ) ; if ( EXTRACTOR_MAPPING.containsKey ( host ) ) { return EXTRACTOR_MAPPING.get ( host ) ; } else { throw new URLNotSupportedException ( `` The url provided does not have a corresponding HostExtractor : [ `` + host + `` ] '' ) ; } } public static void register ( String hostname , HostExtractor extractor ) { if ( StringUtils.isBlank ( hostname ) == false & & extractor ! = null ) { EXTRACTOR_MAPPING.put ( hostname , extractor ) ; } } public class HostExtractorABC extends HostExtractor { public final static String HOST_NAME = `` www.abc.com '' ; private static class HostPageExtractorLoader { private static final HostExtractorABC INSTANCE = new HostExtractorABC ( ) ; } private HostExtractorABC ( ) { if ( HostPageExtractorLoader.INSTANCE ! = null ) { throw new IllegalStateException ( `` Already instantiated '' ) ; } HostExtractorFactory.register ( HOST_NAME , this ) ; } public static HostExtractorABC getInstance ( ) { return HostPageExtractorLoader.INSTANCE ; } ..."
"import java.util . * ; import java.util.concurrent.ConcurrentHashMap ; import java.util.concurrent.ExecutorService ; import java.util.concurrent.Executors ; import java.util.concurrent.TimeUnit ; import java.util.stream.Collectors ; import static java.util.Arrays.stream ; import static java.util.stream.Collectors.toList ; public class TestClass3 { public static void main ( String [ ] args ) throws InterruptedException { // Setup data that we will be playing with concurrently List < String > keys = Arrays.asList ( `` a '' , `` b '' , `` c '' , `` d '' , `` e '' , `` f '' , `` g '' , `` h '' , `` i '' , `` j '' ) ; HashMap < String , List < Integer > > keyValueMap = new HashMap < > ( ) ; for ( String key : keys ) { int [ ] randomInts = new Random ( ) .ints ( 10000 , 0 , 10000 ) .toArray ( ) ; keyValueMap.put ( key , stream ( randomInts ) .boxed ( ) .collect ( toList ( ) ) ) ; } // Entering danger zone , concurrently transforming our data to another shape ExecutorService es = Executors.newFixedThreadPool ( 10 ) ; Map < Integer , Set < String > > valueKeyMap = new ConcurrentHashMap < > ( ) ; for ( String key : keys ) { es.submit ( ( ) - > { for ( Integer value : keyValueMap.get ( key ) ) { valueKeyMap.computeIfAbsent ( value , val - > new HashSet < > ( ) ) .add ( key ) ; } } ) ; } // Wait for all tasks in executorservice to finish es.shutdown ( ) ; es.awaitTermination ( 1 , TimeUnit.MINUTES ) ; // Danger zone ends.. // We should be in a single-thread environment now and safe StringBuilder stringBuilder = new StringBuilder ( ) ; for ( Integer integer : valueKeyMap.keySet ( ) ) { String collect = valueKeyMap .get ( integer ) .stream ( ) .sorted ( ) // This will blow randomly .collect ( Collectors.joining ( ) ) ; stringBuilder.append ( collect ) ; // just to print something.. } System.out.println ( stringBuilder.length ( ) ) ; } } Exception in thread `` main '' java.lang.ArrayIndexOutOfBoundsException : 6 at java.util.stream.SortedOps $ SizedRefSortingSink.accept ( SortedOps.java:369 ) at java.util.HashMap $ KeySpliterator.forEachRemaining ( HashMap.java:1556 ) at java.util.stream.AbstractPipeline.copyInto ( AbstractPipeline.java:482 ) at java.util.stream.AbstractPipeline.wrapAndCopyInto ( AbstractPipeline.java:472 ) at java.util.stream.ReduceOps $ ReduceOp.evaluateSequential ( ReduceOps.java:708 ) at java.util.stream.AbstractPipeline.evaluate ( AbstractPipeline.java:234 ) at java.util.stream.ReferencePipeline.collect ( ReferencePipeline.java:566 ) at biz.tugay.TestClass3.main ( TestClass3.java:40 ) valueKeyMap.computeIfAbsent ( value , val - > new HashSet < > ( ) ) .add ( key ) ; synchronized ( valueKeyMap ) { valueKeyMap.computeIfAbsent ( value , val - > new HashSet < > ( ) ) .add ( key ) ; }"
"public class ScreenShotDemo { /** * @ param args */ public static void main ( String [ ] args ) { final JPanel JMainPanel = new JPanel ( new BorderLayout ( ) ) ; JPanel jp = new JPanel ( ) ; jp.add ( new JComboBox < String > ( new String [ ] { `` Item1 '' , `` Item2 '' , `` Item3 '' } ) ) ; final JPanel jImage = new JPanel ( ) ; JMainPanel.add ( jp , BorderLayout.WEST ) ; JMainPanel.add ( jImage , BorderLayout.CENTER ) ; jp.getInputMap ( JComponent.WHEN_IN_FOCUSED_WINDOW ) .put ( KeyStroke.getKeyStroke ( KeyEvent.VK_P , InputEvent.ALT_DOWN_MASK ) , `` screenshot '' ) ; jp.getActionMap ( ) .put ( `` screenshot '' , new AbstractAction ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { BufferedImage bf = new BufferedImage ( 400 , 400 , BufferedImage.TYPE_INT_RGB ) ; JMainPanel.paint ( bf.getGraphics ( ) ) ; jImage.getGraphics ( ) .drawImage ( bf , 0,0 , jImage ) ; } } ) ; final JFrame jf = new JFrame ( ) ; jf.getContentPane ( ) .add ( JMainPanel ) ; jf.setSize ( 500 , 500 ) ; jf.setVisible ( true ) ; } }"
class A < T > { static class X { static class Q { public static void main ( ) { System.out.println ( `` A < T > .X.Q '' ) ; } } } } class B extends A < B.Y.Q > { static class Y extends X { } // X here is inherited from A } class X { static class Q { public static void main ( ) { System.out.println ( `` X.Q '' ) ; } } } public class Test { public static void main ( String [ ] args ) { B.Y.Q.main ( ) ; } }
"int [ ] myArr = new int [ ] { 1,2,3 } ; int [ ] myArr = { 1,2,3 } ;"
public abstract class SimpleGenericClass < T extends SimpleGenericClass < ? > > { }
public class Test { public static void main ( String [ ] args ) { for ( int i = 2 ; i > 0 ; i++ ) { int c = 0 ; } } } public class Test { public static void main ( String [ ] args ) { for ( int i = 2 ; i > 0 ; i++ ) { int c = 0 ; System.out.println ( c ) ; } } }
private void spawnBlock ( Type type ) { switch ( type ) { case I : currentBlock = new IBlock ( ) ; break ; case L : currentBlock = new LBlock ( ) ; break ; case J : currentBlock = new JBlock ( ) ; break ; case Z : currentBlock = new ZBlock ( ) ; break ; case S : currentBlock = new SBlock ( ) ; break ; case T : currentBlock = new TBlock ( ) ; break ; default : currentBlock = new OBlock ( ) ; } }
"@ Test void testUpdate ( ) { FooDto fooDto = getResource ( `` /json/foo.json '' , new TypeReference < FooDto > ( ) { } ) ; Foo foo = fooMapper.fromDTO ( fooDto ) ; foo = fooService.save ( foo ) ; log.info ( `` Saved foo : `` + foo ) ; foo.setState ( FooState.Bar ) ; foo = fooService.save ( foo ) ; log.info ( `` Updated foo : `` + foo ) ; } public interface FooRepository extends MongoRepository < Foo , String > @ Documentpublic class Foo { @ Id private String id ; private FooState state ; @ DBRef @ Cascade private Collection < Bar > bars = new ArrayList < > ( ) ; ... } //from https : //mflash.dev/blog/2019/07/08/persisting-documents-with-mongorepository/ # unit-tests-for-the-accountrepositorypublic class CascadeMongoEventListener extends AbstractMongoEventListener < Object > { private @ Autowired MongoOperations mongoOperations ; public @ Override void onBeforeConvert ( final BeforeConvertEvent < Object > event ) { final Object source = event.getSource ( ) ; ReflectionUtils .doWithFields ( source.getClass ( ) , new CascadeSaveCallback ( source , mongoOperations ) ) ; } private static class CascadeSaveCallback implements ReflectionUtils.FieldCallback { private final Object source ; private final MongoOperations mongoOperations ; public CascadeSaveCallback ( Object source , MongoOperations mongoOperations ) { this.source = source ; this.mongoOperations = mongoOperations ; } public @ Override void doWith ( final Field field ) throws IllegalArgumentException , IllegalAccessException { ReflectionUtils.makeAccessible ( field ) ; if ( field.isAnnotationPresent ( DBRef.class ) & & field.isAnnotationPresent ( Cascade.class ) ) { final Object fieldValue = field.get ( source ) ; if ( Objects.nonNull ( fieldValue ) ) { final var callback = new IdentifierCallback ( ) ; final CascadeType cascadeType = field.getAnnotation ( Cascade.class ) .value ( ) ; if ( cascadeType.equals ( CascadeType.PERSIST ) || cascadeType.equals ( CascadeType.ALL ) ) { if ( fieldValue instanceof Collection < ? > ) { ( ( Collection < ? > ) fieldValue ) .forEach ( mongoOperations : :save ) ; } else { ReflectionUtils.doWithFields ( fieldValue.getClass ( ) , callback ) ; mongoOperations.save ( fieldValue ) ; } } } } } } private static class IdentifierCallback implements ReflectionUtils.FieldCallback { private boolean idFound ; public @ Override void doWith ( final Field field ) throws IllegalArgumentException { ReflectionUtils.makeAccessible ( field ) ; if ( field.isAnnotationPresent ( Id.class ) ) { idFound = true ; } } public boolean isIdFound ( ) { return idFound ; } } } @ CompoundIndex ( unique = true , name = `` fooId_name '' , def = `` { 'fooId ' : 1 , 'name ' : 1 } '' ) public class MongoResultConversion { @ Component @ ReadingConverter public static class ToResultConverter implements Converter < Document , Bar > { private final ObjectMapper mapper ; @ Autowired public ToResultConverter ( ObjectMapper mapper ) { this.mapper = mapper ; } public MeasureResult convert ( Document source ) { String json = toJson ( source ) ; try { return mapper.readValue ( json , new TypeReference < Bar > ( ) { } ) ; } catch ( JsonProcessingException e ) { throw new RuntimeException ( e ) ; } } protected String toJson ( Document source ) { return source.toJson ( ) ; } } @ Component @ WritingConverter public static class ToDocumentConverter implements Converter < Bar , Document > { private final ObjectMapper mapper ; @ Autowired public ToDocumentConverter ( ObjectMapper mapper ) { this.mapper = mapper ; } public Document convert ( Bar source ) { String json = toJson ( source ) ; return Document.parse ( json ) ; } protected String toJson ( Bar source ) { try { return mapper.writeValueAsString ( source ) ; } catch ( JsonProcessingException e ) { throw new RuntimeException ( e ) ; } } } }"
"class METADATA ( Structure ) : _fields_ = [ ( `` classes '' , c_int ) , ( `` names '' , POINTER ( c_char_p ) ) ] public static class Metadata extends Struct { public Metadata ( jnr.ffi.Runtime rt ) { super ( rt ) ; } public final Struct.Unsigned32 classes = new Struct.Unsigned32 ( ) ; public final Struct.Pointer names = new Struct.Pointer ( ) ; }"
"> gradlew -q app : dependencies -- configuration debugCompileClasspath > app_dependencies_compile.txt \ -- - com.github.kolyall : utils:1.0.4 + -- - net.danlew : android.joda:2.8.2 | \ -- - joda-time : joda-time:2.8.2 + -- - com.android.support : appcompat-v7:28.0.0-alpha3 - > 28.0.0 ( * ) + -- - com.android.support : design:28.0.0-alpha3 | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | + -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-core-ui:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-core-utils:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-fragment:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : transition:28.0.0-alpha3 | | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | | \ -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : appcompat-v7:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : cardview-v7:28.0.0-alpha3 | | \ -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | \ -- - com.android.support : recyclerview-v7:28.0.0-alpha3 | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | + -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | \ -- - com.android.support : support-core-ui:28.0.0-alpha3 - > 28.0.0 ( * ) + -- - io.reactivex : rxjava:1.3.0 + -- - io.reactivex : rxandroid:1.2.1 \ -- - javax.annotation : jsr250-api:1.0 Executing tasks : [ dependencies , -- configuration , debugCompileClasspath ] : app : dependencies -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Project : app -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- debugCompileClasspath - Resolved configuration for compilation for variant : debug+ -- - com.android.support : appcompat-v7:28.0.0| + -- - com.android.support : support-annotations:28.0.0| + -- - com.android.support : support-compat:28.0.0| | + -- - com.android.support : support-annotations:28.0.0| | + -- - com.android.support : collections:28.0.0| | | \ -- - com.android.support : support-annotations:28.0.0| | + -- - android.arch.lifecycle : runtime:1.1.1| | | + -- - android.arch.lifecycle : common:1.1.1| | | | \ -- - com.android.support : support-annotations:26.1.0 - > 28.0.0| | | + -- - android.arch.core : common:1.1.1| | | | \ -- - com.android.support : support-annotations:26.1.0 - > 28.0.0| | | \ -- - com.android.support : support-annotations:26.1.0 - > 28.0.0| | \ -- - com.android.support : versionedparcelable:28.0.0| | + -- - com.android.support : support-annotations:28.0.0| | \ -- - com.android.support : collections:28.0.0 ( * ) | + -- - com.android.support : collections:28.0.0 ( * ) | + -- - com.android.support : cursoradapter:28.0.0| | \ -- - com.android.support : support-annotations:28.0.0| + -- - com.android.support : support-core-utils:28.0.0| | + -- - com.android.support : support-annotations:28.0.0| | + -- - com.android.support : support-compat:28.0.0 ( * ) | | + -- - com.android.support : documentfile:28.0.0| | | \ -- - com.android.support : support-annotations:28.0.0| | + -- - com.android.support : loader:28.0.0| | | + -- - com.android.support : support-annotations:28.0.0| | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | + -- - android.arch.lifecycle : livedata:1.1.1| | | | + -- - android.arch.core : runtime:1.1.1| | | | | + -- - com.android.support : support-annotations:26.1.0 - > 28.0.0| | | | | \ -- - android.arch.core : common:1.1.1 ( * ) | | | | + -- - android.arch.lifecycle : livedata-core:1.1.1| | | | | + -- - android.arch.lifecycle : common:1.1.1 ( * ) | | | | | + -- - android.arch.core : common:1.1.1 ( * ) | | | | | \ -- - android.arch.core : runtime:1.1.1 ( * ) | | | | \ -- - android.arch.core : common:1.1.1 ( * ) | | | \ -- - android.arch.lifecycle : viewmodel:1.1.1| | | \ -- - com.android.support : support-annotations:26.1.0 - > 28.0.0| | + -- - com.android.support : localbroadcastmanager:28.0.0| | | \ -- - com.android.support : support-annotations:28.0.0| | \ -- - com.android.support : print:28.0.0| | \ -- - com.android.support : support-annotations:28.0.0| + -- - com.android.support : support-fragment:28.0.0| | + -- - com.android.support : support-compat:28.0.0 ( * ) | | + -- - com.android.support : support-core-ui:28.0.0| | | + -- - com.android.support : support-annotations:28.0.0| | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | + -- - com.android.support : support-core-utils:28.0.0 ( * ) | | | + -- - com.android.support : customview:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | \ -- - com.android.support : support-compat:28.0.0 ( * ) | | | + -- - com.android.support : viewpager:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | | \ -- - com.android.support : customview:28.0.0 ( * ) | | | + -- - com.android.support : coordinatorlayout:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | | \ -- - com.android.support : customview:28.0.0 ( * ) | | | + -- - com.android.support : drawerlayout:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | | \ -- - com.android.support : customview:28.0.0 ( * ) | | | + -- - com.android.support : slidingpanelayout:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | | \ -- - com.android.support : customview:28.0.0 ( * ) | | | + -- - com.android.support : interpolator:28.0.0| | | | \ -- - com.android.support : support-annotations:28.0.0| | | + -- - com.android.support : swiperefreshlayout:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | + -- - com.android.support : support-compat:28.0.0 ( * ) | | | | \ -- - com.android.support : interpolator:28.0.0 ( * ) | | | + -- - com.android.support : asynclayoutinflater:28.0.0| | | | + -- - com.android.support : support-annotations:28.0.0| | | | \ -- - com.android.support : support-compat:28.0.0 ( * ) | | | \ -- - com.android.support : cursoradapter:28.0.0 ( * ) | | + -- - com.android.support : support-core-utils:28.0.0 ( * ) | | + -- - com.android.support : support-annotations:28.0.0| | + -- - com.android.support : loader:28.0.0 ( * ) | | \ -- - android.arch.lifecycle : viewmodel:1.1.1 ( * ) | + -- - com.android.support : support-vector-drawable:28.0.0| | + -- - com.android.support : support-annotations:28.0.0| | \ -- - com.android.support : support-compat:28.0.0 ( * ) | \ -- - com.android.support : animated-vector-drawable:28.0.0| + -- - com.android.support : support-vector-drawable:28.0.0 ( * ) | \ -- - com.android.support : support-core-ui:28.0.0 ( * ) + -- - com.android.support.constraint : constraint-layout:1.1.3| \ -- - com.android.support.constraint : constraint-layout-solver:1.1.3\ -- - com.github.kolyall : utils:1.0.4 + -- - net.danlew : android.joda:2.8.2 | \ -- - joda-time : joda-time:2.8.2 + -- - com.android.support : appcompat-v7:28.0.0-alpha3 - > 28.0.0 ( * ) + -- - com.android.support : design:28.0.0-alpha3 | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | + -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-core-ui:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-core-utils:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : support-fragment:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : transition:28.0.0-alpha3 | | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | | \ -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : appcompat-v7:28.0.0-alpha3 - > 28.0.0 ( * ) | + -- - com.android.support : cardview-v7:28.0.0-alpha3 | | \ -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | \ -- - com.android.support : recyclerview-v7:28.0.0-alpha3 | + -- - com.android.support : support-annotations:28.0.0-alpha3 - > 28.0.0 | + -- - com.android.support : support-compat:28.0.0-alpha3 - > 28.0.0 ( * ) | \ -- - com.android.support : support-core-ui:28.0.0-alpha3 - > 28.0.0 ( * ) + -- - io.reactivex : rxjava:1.3.0 + -- - io.reactivex : rxandroid:1.2.1 \ -- - javax.annotation : jsr250-api:1.0 ( * ) - dependencies omitted ( listed previously ) BUILD SUCCESSFUL in 0s1 actionable task : 1 executed apply plugin : 'com.android.application'android { compileSdkVersion 28 defaultConfig { applicationId `` com.example '' minSdkVersion 19 targetSdkVersion 28 versionCode 1 versionName `` 1.0 '' testInstrumentationRunner `` android.support.test.runner.AndroidJUnitRunner '' } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile ( 'proguard-android.txt ' ) , 'proguard-rules.pro ' } } } dependencies { implementation fileTree ( dir : 'libs ' , include : [ '*.jar ' ] ) implementation 'com.android.support : appcompat-v7:28.0.0-rc01 ' implementation 'com.github.kolyall : utils:1.0.4 ' } < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < project xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > com.github.kolyall < /groupId > < artifactId > utils < /artifactId > < version > 1.0.4 < /version > < packaging > aar < /packaging > < name > utils < /name > < description > A wrapper for utils on Android < /description > < url > https : //github.com/Kolyall/BaseUtils < /url > < licenses > < license > < name > The Apache Software License , Version 2.0 < /name > < url > http : //www.apache.org/licenses/LICENSE-2.0.txt < /url > < /license > < /licenses > < developers > < developer > < id > nickunuchek < /id > < name > Nick Unuchek < /name > < email > kolyall @ tut.by < /email > < /developer > < /developers > < scm > < connection > https : //github.com/Kolyall/BaseUtils.git < /connection > < developerConnection > https : //github.com/Kolyall/BaseUtils.git < /developerConnection > < url > https : //github.com/Kolyall/BaseUtils < /url > < /scm > < dependencies > < dependency > < groupId > net.danlew < /groupId > < artifactId > android.joda < /artifactId > < version > 2.8.2 < /version > < scope > compile < /scope > < /dependency > < dependency > < groupId > com.android.support < /groupId > < artifactId > appcompat-v7 < /artifactId > < version > 28.0.0-alpha3 < /version > < scope > runtime < /scope > < /dependency > < dependency > < groupId > com.android.support < /groupId > < artifactId > design < /artifactId > < version > 28.0.0-alpha3 < /version > < scope > runtime < /scope > < /dependency > < dependency > < groupId > io.reactivex < /groupId > < artifactId > rxjava < /artifactId > < version > 1.3.0 < /version > < scope > runtime < /scope > < /dependency > < dependency > < groupId > io.reactivex < /groupId > < artifactId > rxandroid < /artifactId > < version > 1.2.1 < /version > < scope > runtime < /scope > < exclusions > < exclusion > < artifactId > rxjava < /artifactId > < groupId > io.reactivex < /groupId > < /exclusion > < /exclusions > < /dependency > < dependency > < groupId > javax.annotation < /groupId > < artifactId > jsr250-api < /artifactId > < version > 1.0 < /version > < scope > runtime < /scope > < /dependency > < /dependencies > < /project >"
public void nеw ( ) { System.out.println ( `` ! ? `` ) ; }
"List < String > menus = new ArrayList < String > ( ) ; for ( Menu menu : resto1.getMenu ( ) ) { MainIngredient mainIngredient = MainIngredient.getMainIngredient ( menu.getName ( ) ) ; if ( mainIngredient.getIngredient ( ) .indexOf ( `` Vegan '' ) ! =-1 ) { menus.add ( menu.getName ( ) ) ; } } ExecutorService executorService = Executors.newCachedThreadPool ( ) ; List < CompletableFuture < MainIngredient > > priceFutureList = resto1.getMenu ( ) .stream ( ) .map ( menu - > CompletableFuture.supplyAsync ( ( ) - > MainIngredient.getMainIngredient ( menu.getName ( ) ) , executorService ) ) .collect ( Collectors.toList ( ) ) ; CompletableFuture < Void > allFuturesDone = CompletableFuture.allOf ( priceFutureList.toArray ( new CompletableFuture [ priceFutureList.size ( ) ] ) ) ; CompletableFuture < List < MainIngredient > > priceListFuture = allFuturesDone.thenApply ( v - > priceFutureList.stream ( ) .map ( CompletableFuture : :join ) .collect ( toList ( ) ) ) ;"
import java.util.Vector ; import java.lang . * ; public class MemoryEater1 { public static void main ( String [ ] args ) { try { long mb = Long.valueOf ( args [ 0 ] ) ; Vector v = new Vector ( ) ; Runtime rt = Runtime.getRuntime ( ) ; while ( true ) { if ( v.size ( ) > 0 ) { if ( ( ( long ) v.size ( ) ) *100 < mb ) { System.out.println ( `` total memory : `` + rt.totalMemory ( ) /1024/1024 ) ; System.out.println ( `` max memory : `` + rt.maxMemory ( ) /1024/1024 ) ; System.out.println ( `` free memory : `` + rt.freeMemory ( ) /1024/1024 ) ; System.out.println ( `` Trying to add 100 mb '' ) ; //100mb byte b [ ] = new byte [ 104857600 ] ; v.add ( b ) ; } } else { //100mb byte b [ ] = new byte [ 104857600 ] ; v.add ( b ) ; System.out.println ( `` Added 100 mb '' ) ; } } } catch ( Exception e ) { e.printStackTrace ( ) ; } } } java -Xmx4096m MemoryEater1 3000 total memory : 2867max memory : 3641free memory : 59Trying to add 100 mbException in thread `` main '' java.lang.OutOfMemoryError : Java heap space at MemoryEater1.main ( MemoryEater1.java:18 ) [ user @ machine ~ ] $ free -m total used free shared buffers cachedMem : 15950 3447 12502 0 210 2389-/+ buffers/cache : 847 15102Swap : 4031 1759218603 8941
"List < ListDataContent > list = new ArrayList < > ( ) ; for ( KonditionValue kondition : konditions ) { if ( kondition.getStatusKz ( ) .equals ( StatusKz.OLD ) ) continue ; for ( TermKondValue tilg : kondition.getTermimKonditions ( ) ) { if ( tilg.getStatusKz ( ) .equals ( StatusKz.OLD ) ) continue ; TerminKondListContent listContent = new TerminKondListContent ( tilg , kondition.getChangeDatum ( ) , funds ) ; list.add ( listContent ) ; } } SimpleListControl listCtrl = new SimpleListControl ( ) ; listCtrl.setDataModel ( new ListDataModel ( list ) ) ; List < ListDataContent > list = konditionen.stream ( ) .map ( kondition - > map ( tilg , kondition.getChangeDate ( ) , funds ) ) .sorted ( ) .collect ( Collectors.toList ( ) ) ; SimpleListControl listCtrl = new SimpleListControl ( ) ; listCtrl.setDataModel ( new ListDataModel ( list ) ) ; private TerminKondListContent map ( TermKondValue tilg , Date changeDate , BigDecimal funds ) { if ( kondition.getStatusKz ( ) .equals ( StatusKz.OLD ) ) return null ; for ( TermKondValue zins : kondition.getTerminkonditions ( ) ) { if ( zins.getStatusKz ( ) .equals ( StatusKz.OLD ) ) return null ; return new TerminKondListContent ( tilg , changeDate , funds ) ; } return null ; } list.stream ( ) .filter ( Objects : :nonNull )"
"public static long checkedAdd ( long a , long b ) { long result = a + b ; checkNoOverflow ( ( a ^ b ) < 0 | ( a ^ result ) > = 0 ) ; return result ; }"
"@ Testpublic void testContainement ( ) { Set < Integer > setOne = IntStream.of ( 0,1,4,3 ) .boxed ( ) .collect ( Collectors.toCollection ( HashSet : :new ) ) ; Set < Integer > setTwo = IntStream.of ( 0,1,4,5 ) .boxed ( ) .collect ( Collectors.toCollection ( HashSet : :new ) ) ; Assertions.assertEquals ( true , testSets ( setOne , setTwo ) ) ; } private boolean testSets ( Set < Integer > setOne , Set < Integer > setTwo ) { int counter=0 ; for ( int x : setOne ) { if ( setTwo.contains ( x ) ) counter++ ; } return counter > 2 ; }"
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < beans xmlns= '' http : //www.springframework.org/schema/beans '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : util= '' http : //www.springframework.org/schema/util '' xmlns : context= '' http : //www.springframework.org/schema/context '' xsi : schemaLocation= '' http : //www.springframework.org/schema/beans http : //www.springframework.org/schema/beans/spring-beans.xsd http : //www.springframework.org/schema/util http : //www.springframework.org/schema/util/spring-util.xsd http : //www.springframework.org/schema/context http : //www.springframework.org/schema/context/spring-context-2.5.xsd '' > < ! -- neo4j database -- > < util : map id= '' config '' > < entry key= '' enable_remote_shell '' value= '' false '' / > < /util : map > < bean id= '' graphDbFactory '' class= '' org.neo4j.graphdb.factory.GraphDatabaseFactory '' / > < bean id= '' graphDbBuilder '' factory-bean= '' graphDbFactory '' factory-method= '' newEmbeddedDatabaseBuilder '' > < constructor-arg value= '' /path/to/db '' / > < /bean > < bean id= '' graphDbBuilderFinal '' factory-bean= '' graphDbBuilder '' factory-method= '' setConfig '' > < constructor-arg ref= '' config '' / > < /bean > < bean id= '' graphDatabaseService '' factory-bean= '' graphDbBuilderFinal '' factory-method= '' newGraphDatabase '' destroy-method= '' shutdown '' class= '' org.neo4j.graphdb.GraphDatabaseService '' / > < context : component-scan base-package= '' com.app.components '' / > < /beans > package com.app.components ; @ Componentpublic class StartupTasks implements ApplicationListener < ContextRefreshedEvent > { private static final Logger LOG = LogManager.getLogger ( StartupTasks.class ) ; @ Autowired GraphDatabaseService db ; @ Override public void onApplicationEvent ( ContextRefreshedEvent event ) { executeTestSelect ( ) ; } private void executeTestSelect ( ) { LOG.info ( `` Warming up Neo4j ... '' ) ; Transaction tx = db.beginTx ( ) ; db.execute ( `` CALL apoc.warmup.run ( ) '' ) ; tx.close ( ) ; LOG.info ( `` Warmup complete . `` ) ; } } private void executeTestSelect ( ) { String textToSearch = `` a '' ; // returns almost all nodes , should make neo4j cache them all Transaction tx = db.beginTx ( ) ; Map < String , Object > params = new HashMap < String , Object > ( ) ; params.put ( `` textToSearch '' , textToSearch ) ; Result resultSet = db.execute ( `` MATCH ( n : PROD ) WHERE n.description CONTAINS { textToSearch } RETURN n '' , params ) ; Iterator < Node > results = resultSet.columnAs ( `` n '' ) ; int count = 0 ; while ( results.hasNext ( ) ) { results.next ( ) ; count++ : } tx.close ( ) ; LOG.info ( `` Neo4j cache done . Processed `` + count + `` nodes . `` ) ; }"
"public class Hangman { public static void ttt ( String inputWord ) { //setting up the game and declaring the secret word to be the input int wordLength = inputWord.length ( ) ; //making new integer variable for length of word String blanks = `` '' ; //creating blanks string for ( int i = 0 ; i < wordLength ; i++ ) { //making one blank for every letter of the word blanks = blanks.concat ( `` _ `` ) ; } System.out.println ( blanks ) ; //initially just to show user how many blanks/letters there are to guess int points = 0 ; //setting up points int , one is awarded for each correct letter int counter = 0 ; //setting up counter int , used to keep track of lives , reference lines 58+ ArrayList < String > usedChars = new ArrayList < String > ( ) ; //creating new array to store used letters ArrayList < String > allChars = new ArrayList < String > ( ) ; //creating new array to store all letters for ( int i = 0 ; i < wordLength ; i++ ) { //filling allChars with all the letters allChars.add ( inputWord.substring ( i , i + 1 ) ) ; } while ( points < wordLength ) { //the entire game is run off of the points system , user needs as many points as number of letters to exit the while loop Scanner reader = new Scanner ( System.in ) ; //making scanner thing System.out.println ( `` Guess : `` ) ; //asking user to guess a letter String guess = reader.nextLine ( ) ; //string guess is set to the input int checker = 0 ; //setting up checker int , used to check for duplicate answers for ( int k = 0 ; k < usedChars.size ( ) ; k++ ) { //for loop iterates through every item in usedChars and checks them against the user guess if ( ! usedChars.get ( k ) .equals ( guess ) ) { //if the guess is different from that used letter checker = checker + 1 ; //add one to the checker } else { } //or else nothing happens , this probably is n't necessary } if ( checker == usedChars.size ( ) ) { //if statement protects the for loop inside , only runs if the checker got a point for every used letter ( proving the guess was unique ) for ( int i = 0 ; i < wordLength ; i++ ) { //for loop iterates through every letter of the secret word , checking each against the guess if ( guess.equals ( inputWord.substring ( i , i + 1 ) ) ) { points = points + 1 ; //one point is added for every matching letter , refer back to line 20 System.out.println ( `` Correct ! `` ) ; //prints correct for every matching letter } else { } //again this probably is n't necessary } usedChars.add ( guess ) ; //after the guess is checked against the secret word , the guess is added to the used letters array ArrayList < String > tempList = new ArrayList < String > ( ) ; //a temporary list is created to store the letters that have n't yet been guessed for ( int i = 0 ; i < allChars.size ( ) ; i++ ) { //for loop iterates through every string in the all letters array for ( int k = 0 ; k < usedChars.size ( ) ; k++ ) { //nested for loop iterates through every string in the used letters array if ( ! allChars.get ( i ) .equals ( usedChars.get ( k ) ) ) { //every string in allChars is checked against every string in usedChars tempList.add ( allChars.get ( i ) ) ; //the temporary list is filled with the letters in allChars that were not found in usedChars } } } String inputWord2 = inputWord ; //inputWord is duplicated , the copy will be manipulated but the original is still used in the above code for ( int i = 0 ; i < tempList.size ( ) ; i++ ) { //for loop iterates through every string in tempList ( the list with the letters the user has n't guessed yet ) inputWord2 = inputWord2.replace ( tempList.get ( i ) , `` _ '' ) ; //the full word has every letter it shares with tempList replaced with _ for the user to guess } System.out.println ( inputWord2 ) ; //the word censored for any letters not guessed yet is printed System.out.println ( `` Used letters : `` + usedChars ) ; //the user is reminded which letters have already been used } else { System.out.print ( `` Sorry , that letter has already been used\n '' ) ; //if the checker did n't end up being equal to the number of items in usedChars then the guess was a repeat ( found in usedChars ) } counter = counter + 1 ; //tracking lives by adding one to counter after each guess if ( counter == 5 ) { //when the counter reaches x tries , user runs out of lives points = wordLength ; //this forcibly exits the while loop by satisfying the condition of points being equal to the number of letters } } System.out.println ( `` The word was `` + inputWord ) ; //prints the secret word System.out.println ( `` Game over '' ) ; //prints game over } public static void main ( String [ ] args ) { ttt ( `` barbarian '' ) ; } }"
LinkedList < Integer > intList = new LinkedList ( ) ; /*populate list ... */for ( int i : intList ) { //do stuff }
"public class foo < T ... > Foo < Object0 > Foo < Object0 , Object1 > Foo < Object0 , Object1 , Object2 >"
"public void doStuff1 ( object obj , String dataType ) { if ( `` Double '' .equalsIgnoreCase ( dataType ) ) { doStuff2 ( Double.valueOf ( obj.toString ( ) ) ) ; } else if ( `` Integer '' .equalsIgnoreCase ( dataType ) ) { doStuff2 ( Integer.valueOf ( obj.toString ( ) ) ) ; } } public void doStuff2 ( double d1 ) { //do some double related stuff here } public void doStuff2 ( int d1 ) { //do some int related stuff here } Class < ? > theClass = Class.forName ( dataType ) ;"
"public class MyFirebaseMessagingService extends com.google.firebase.messaging.FirebaseMessagingService { private static final String TAG = `` FirebaseMessagingServic '' ; public MyFirebaseMessagingService ( ) { } @ Override public void onMessageReceived ( RemoteMessage remoteMessage ) { if ( remoteMessage.getData ( ) .size ( ) > 0 ) { Log.d ( TAG , `` Message data payload : `` + remoteMessage.getData ( ) ) ; try { JSONObject data = new JSONObject ( remoteMessage.getData ( ) ) ; String jsonMessage = data.getString ( `` extra_information '' ) ; Log.d ( TAG , `` onMessageReceived : \n '' + `` Extra Information : `` + jsonMessage ) ; } catch ( JSONException e ) { e.printStackTrace ( ) ; } } if ( remoteMessage.getNotification ( ) ! = null ) { String title = remoteMessage.getNotification ( ) .getTitle ( ) ; String message = remoteMessage.getNotification ( ) .getBody ( ) ; String click_action = remoteMessage.getNotification ( ) .getClickAction ( ) ; Uri uri = remoteMessage.getNotification ( ) .getLink ( ) ; Log.d ( TAG , `` Message Notification Title : `` + title ) ; Log.d ( TAG , `` Message Notification Body : `` + message ) ; Log.d ( TAG , `` Message Notification click_action : `` + click_action ) ; Log.d ( TAG , `` Message Notification url : `` + uri ) ; } } @ Override public void onDeletedMessages ( ) { } private void sendNotification ( String title , String messageBody , String click_action , Uri uri ) { Intent intent ; if ( uri ! = null ) { intent = new Intent ( Intent.ACTION_VIEW ) ; intent.setData ( uri ) ) ; } else { intent = new Intent ( click_action ) ; } PendingIntent pendingIntent = PendingIntent.getActivity ( this , 0 /* Request code */ , intent , 0 ) ; Uri defaultSoundUri = RingtoneManager.getDefaultUri ( RingtoneManager.TYPE_NOTIFICATION ) ; NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder ( this ) .setSmallIcon ( R.drawable.app_logo_final ) .setContentTitle ( `` PushNotification '' ) .setContentText ( messageBody ) .setAutoCancel ( true ) .setSound ( defaultSoundUri ) .setContentIntent ( pendingIntent ) ; NotificationManager notificationManager = ( NotificationManager ) getSystemService ( Context.NOTIFICATION_SERVICE ) ; notificationManager.notify ( 0 /* ID of notification */ , notificationBuilder.build ( ) ) ; } } { `` to '' : `` /topics/NEWS '' , `` data '' : { `` extra_information '' : `` This is some extra information '' } , `` notification '' : { `` title '' : `` Test title : http : //www.google.com '' , `` body '' : `` Test body : http : //www.google.com '' , `` uri '' : `` http : //www.google.com '' , `` click_action '' : `` MAIN_PAGE '' } } < activity android : name = `` .MainScreen '' > < intent-filter > < action android : name = `` android.intent.action.MAIN '' / > < category android : name = `` android.intent.category.LAUNCHER '' / > < /intent-filter > < intent-filter > < action android : name = `` MAIN_PAGE '' / > < category android : name = `` android.intent.category.DEFAULT '' / > < /intent-filter > 01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.view.Window $ Callback.onPointerCaptureChanged , referenced from method android.support.v7.view.WindowCallbackWrapper.onPointerCaptureChanged01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve interface method 16186 : Landroid / view / Window $ Callback ; .onPointerCaptureChanged ( Z ) V01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x72 at 0x000201 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.view.Window $ Callback.onProvideKeyboardShortcuts , referenced from method android.support.v7.view.WindowCallbackWrapper.onProvideKeyboardShortcuts01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve interface method 16188 : Landroid / view / Window $ Callback ; .onProvideKeyboardShortcuts ( Ljava / util / List ; Landroid / view / Menu ; I ) V01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x72 at 0x000201 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to find class referenced in signature ( Landroid / view / SearchEvent ; ) 01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.view.Window $ Callback.onSearchRequested , referenced from method android.support.v7.view.WindowCallbackWrapper.onSearchRequested01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve interface method 16190 : Landroid / view / Window $ Callback ; .onSearchRequested ( Landroid / view / SearchEvent ; ) Z01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x72 at 0x000201 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.view.Window $ Callback.onWindowStartingActionMode , referenced from method android.support.v7.view.WindowCallbackWrapper.onWindowStartingActionMode01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve interface method 16194 : Landroid / view / Window $ Callback ; .onWindowStartingActionMode ( Landroid / view / ActionMode $ Callback ; I ) Landroid / view / ActionMode ; 01 - 26 16 : 51 : 28.668 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x72 at 0x000201 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.content.res.TypedArray.getChangingConfigurations , referenced from method android.support.v7.widget.TintTypedArray.getChangingConfigurations01 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 811 : Landroid / content / res / TypedArray ; .getChangingConfigurations ( ) I01 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x000201 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.content.res.TypedArray.getType , referenced from method android.support.v7.widget.TintTypedArray.getType01 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 833 : Landroid / content / res / TypedArray ; .getType ( I ) I01 - 26 16 : 51 : 28.678 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x000801 - 26 16 : 51 : 28.688 1395 - 1395 / com.tabian.firebasepushnotifications V / FA : onActivityCreated01 - 26 16 : 51 : 28.748 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.FrameLayout.startActionModeForChild , referenced from method android.support.v7.widget.ActionBarContainer.startActionModeForChild01 - 26 16 : 51 : 28.748 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16655 : Landroid / widget / FrameLayout ; .startActionModeForChild ( Landroid / view / View ; Landroid / view / ActionMode $ Callback ; I ) Landroid / view / ActionMode ; 01 - 26 16 : 51 : 28.748 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x000201 - 26 16 : 51 : 28.758 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.content.Context.getColorStateList , referenced from method android.support.v7.content.res.AppCompatResources.getColorStateList01 - 26 16 : 51 : 28.758 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 560 : Landroid / content / Context ; .getColorStateList ( I ) Landroid / content / res / ColorStateList ; 01 - 26 16 : 51 : 28.758 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x000601 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to find class referenced in signature ( Landroid / graphics / drawable / Icon ; ) 01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.ImageButton.setImageIcon , referenced from method android.support.v7.widget.AppCompatImageButton.setImageIcon01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16678 : Landroid / widget / ImageButton ; .setImageIcon ( Landroid / graphics / drawable / Icon ; ) V01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x000001 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.content.res.Resources.getDrawable , referenced from method android.support.v7.widget.ResourcesWrapper.getDrawable01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 774 : Landroid / content / res / Resources ; .getDrawable ( ILandroid / content / res / Resources $ Theme ; ) Landroid / graphics / drawable / Drawable ; 01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x000201 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.content.res.Resources.getDrawableForDensity , referenced from method android.support.v7.widget.ResourcesWrapper.getDrawableForDensity01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 776 : Landroid / content / res / Resources ; .getDrawableForDensity ( IILandroid / content / res / Resources $ Theme ; ) Landroid / graphics / drawable / Drawable ; 01 - 26 16 : 51 : 28.768 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x000201 - 26 16 : 51 : 28.778 1395 - 1395 / com.tabian.firebasepushnotifications E / dalvikvm : Could not find class 'android.graphics.drawable.RippleDrawable ' , referenced from method android.support.v7.widget.AppCompatImageHelper.hasOverlappingRendering01 - 26 16 : 51 : 28.778 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve instanceof 210 ( Landroid / graphics / drawable / RippleDrawable ; ) in Landroid / support / v7 / widget / AppCompatImageHelper ; 01 - 26 16 : 51 : 28.778 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x20 at 0x000c01 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeMaxTextSize , referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeMaxTextSize01 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16974 : Landroid / widget / TextView ; .getAutoSizeMaxTextSize ( ) I01 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x000601 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeMinTextSize , referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeMinTextSize01 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16975 : Landroid / widget / TextView ; .getAutoSizeMinTextSize ( ) I01 - 26 16 : 51 : 28.788 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x000601 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeStepGranularity , referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeStepGranularity01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16976 : Landroid / widget / TextView ; .getAutoSizeStepGranularity ( ) I01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x000601 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeTextAvailableSizes , referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeTextAvailableSizes01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16977 : Landroid / widget / TextView ; .getAutoSizeTextAvailableSizes ( ) [ I 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0006 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeTextType , referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeTextType 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16978 : Landroid / widget / TextView ; .getAutoSizeTextType ( ) I 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0008 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.setAutoSizeTextTypeUniformWithConfiguration , referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeUniformWithConfiguration 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 17021 : Landroid / widget / TextView ; .setAutoSizeTextTypeUniformWithConfiguration ( IIII ) V 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0006 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.setAutoSizeTextTypeUniformWithPresetSizes , referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeUniformWithPresetSizes 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 17022 : Landroid / widget / TextView ; .setAutoSizeTextTypeUniformWithPresetSizes ( [ II ) V 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0006 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.setAutoSizeTextTypeWithDefaults , referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeWithDefaults 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 17023 : Landroid / widget / TextView ; .setAutoSizeTextTypeWithDefaults ( I ) V 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0006 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.TextView.getAutoSizeStepGranularity , referenced from method android.support.v7.widget.AppCompatTextHelper.loadFromAttributes 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16976 : Landroid / widget / TextView ; .getAutoSizeStepGranularity ( ) I 01 - 26 16 : 51 : 28.798 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6e at 0x0197 01 - 26 16 : 51 : 28.808 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.text.StaticLayout $ Builder.obtain , referenced from method android.support.v7.widget.AppCompatTextViewAutoSizeHelper.createStaticLayoutForMeasuring 01 - 26 16 : 51 : 28.808 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve static method 15457 : Landroid / text / StaticLayout $ Builder ; .obtain ( Ljava / lang / CharSequence ; IILandroid / text / TextPaint ; I ) Landroid / text / StaticLayout $ Builder ; 01 - 26 16 : 51 : 28.808 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x71 at 0x0014 01 - 26 16 : 51 : 28.828 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Connecting to remote service 01 - 26 16 : 51 : 28.848 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Activity resumed , time : 242636715 01 - 26 16 : 51 : 28.848 1395 - 1409 / com.tabian.firebasepushnotifications I / FA : Tag Manager is not found and thus will not be used 01 - 26 16 : 51 : 28.848 1395 - 1409 / com.tabian.firebasepushnotifications D / FA : Logging event ( FE ) : screen_view ( _vs ) , Bundle [ { firebase_event_origin ( _o ) = auto , firebase_screen_class ( _sc ) = Main_Screen , firebase_screen_id ( _si ) = 6213183756703048966 } ] 01 - 26 16 : 51 : 28.858 1395 - 1395 / com.tabian.firebasepushnotifications I / Adreno - EGL : < qeglDrvAPI_eglInitialize : 381 > : EGL 1.4 QUALCOMM build : ( CL3869936 ) OpenGL ES Shader Compiler Version : 17.01 .12.SPL Build Date : 03 / 03 / 14 Mon Local Branch : default Remote Branch : Local Patches : Reconstruct Branch : 01 - 26 16 : 51 : 28.918 1395 - 1395 / com.tabian.firebasepushnotifications D / OpenGLRenderer : Enabling debug mode 0 01 - 26 16 : 51 : 28.948 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to find class referenced in signature ( Landroid / graphics / drawable / Icon ; ) 01 - 26 16 : 51 : 28.948 1395 - 1395 / com.tabian.firebasepushnotifications I / dalvikvm : Could not find method android.widget.ImageView.setImageIcon , referenced from method android.support.v7.widget.AppCompatImageView.setImageIcon 01 - 26 16 : 51 : 28.948 1395 - 1395 / com.tabian.firebasepushnotifications W / dalvikvm : VFY : unable to resolve virtual method 16713 : Landroid / widget / ImageView ; .setImageIcon ( Landroid / graphics / drawable / Icon ; ) V 01 - 26 16 : 51 : 28.948 1395 - 1395 / com.tabian.firebasepushnotifications D / dalvikvm : VFY : replacing opcode 0x6f at 0x0000 01 - 26 16 : 51 : 28.948 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Connection attempt already in progress 01 - 26 16 : 51 : 29.018 1395 - 1409 / com.tabian.firebasepushnotifications D / FA : Connected to remote service 01 - 26 16 : 51 : 29.018 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Processing queued up service tasks : 2 01 - 26 16 : 51 : 31.871 1395 - 1395 / com.tabian.firebasepushnotifications I / PersonaManager : getPersonaService ( ) name persona_policy 01 - 26 16 : 51 : 31.881 1395 - 1395 / com.tabian.firebasepushnotifications V / FA : onActivityCreated 01 - 26 16 : 51 : 31.911 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Recording user engagement , ms : 2928 01 - 26 16 : 51 : 31.911 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Activity paused , time : 242639638 01 - 26 16 : 51 : 31.931 1395 - 1409 / com.tabian.firebasepushnotifications D / FA : Logging event ( FE ) : user_engagement ( _e ) , Bundle [ { firebase_event_origin ( _o ) = auto , engagement_time_msec ( _et ) = 2928 , firebase_screen_class ( _sc ) = Main_Screen , firebase_screen_id ( _si ) = 6213183756703048966 } ] 01 - 26 16 : 51 : 31.941 1395 - 1395 / com.tabian.firebasepushnotifications E / ViewRootImpl : sendUserActionEvent ( ) mView == null 01 - 26 16 : 51 : 32.091 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Activity resumed , time : 242639824 01 - 26 16 : 51 : 37.097 1395 - 1409 / com.tabian.firebasepushnotifications V / FA : Inactivity , disconnecting from the service 01 - 26 16 : 53 : 29.096 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : Message data payload : { extra_information = This is some extra information } 01 - 26 16 : 53 : 29.096 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : onMessageReceived : Extra Information : This is some extra information01 - 26 16 : 53 : 29.096 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : Message Notification Title : Test title : http : //www.google.com 01 - 26 16 : 53 : 29.096 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : Message Notification Body : Test body : http : //www.google.com 01 - 26 16 : 53 : 29.096 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : Message Notification click_action : MAIN_PAGE01 - 26 16 : 53 : 29.106 1395 - 2149 / com.tabian.firebasepushnotifications D / FirebaseMessagingServic : Message Notification url : http : //www.google.com 01 - 26 16 : 53 : 35.293 1395 - 1395 / com.tabian.firebasepushnotifications I / PersonaManager : getPersonaService ( ) name persona_policy01 - 26 16 : 53 : 35.313 1395 - 1395 / com.tabian.firebasepushnotifications V / FA : onActivityCreated01 - 26 16 : 53 : 35.353 1395 - 1395 / com.tabian.firebasepushnotifications E / ViewRootImpl : sendUserActionEvent ( ) mView == null01 - 26 16 : 53 : 35.353 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Recording user engagement , ms : 1608601 - 26 16 : 53 : 35.353 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Connecting to remote service01 - 26 16 : 53 : 35.383 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Activity paused , time : 24276312601 - 26 16 : 53 : 35.383 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Connection attempt already in progress01 - 26 16 : 53 : 35.383 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Activity resumed , time : 24276324701 - 26 16 : 53 : 35.383 1395 - 1845 / com.tabian.firebasepushnotifications D / FA : Logging event ( FE ) : user_engagement ( _e ) , Bundle [ { firebase_event_origin ( _o ) = auto , engagement_time_msec ( _et ) = 16086 , firebase_screen_class ( _sc ) = Main_Screen , firebase_screen_id ( _si ) = 6213183756703048969 } ] 01 - 26 16 : 53 : 35.423 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Connection attempt already in progress01 - 26 16 : 53 : 35.493 1395 - 1845 / com.tabian.firebasepushnotifications D / FA : Connected to remote service01 - 26 16 : 53 : 35.493 1395 - 1845 / com.tabian.firebasepushnotifications V / FA : Processing queued up service tasks : 3"
"public Map < MyEnum , Optional < List < String > > > process ( Map < MyEnum , Optional < List < String > > > map ) { Map < MyEnum , Optional < List < String > > > resultMap = new HashMap < > ( ) ; // Getting NullPointerException here , since map.get ( MyEnum.ANIMAL ) is NULL resultMap.put ( MyEnum.ANIMAL , doSomething ( map.get ( MyEnum.ANIMAL ) .get ( ) ) ) ; // do something more here } private Optional < List < String > > doSomething ( List < String > list ) { // process and return a list of String return Optional.of ( resultList ) ; }"
"public < U > Optional < U > map ( Function < ? super T , ? extends U > mapper ) { Objects.requireNonNull ( mapper ) ; if ( ! isPresent ( ) ) { return empty ( ) ; } else { return Optional.ofNullable ( mapper.apply ( value ) ) ; } } Optional < String > os1 = Optional.of ( `` Optional String '' ) ; Optional < String > os2 = os1.map ( s - > s.toUpperCase ( ) ) ;"
public class Riddle { public static void main ( String [ ] args ) { hello ( null ) ; } public static void hello ( Object o ) { System.out.println ( `` Object '' ) ; } public static void hello ( String s ) { System.out.println ( `` String '' ) ; } } public class Riddle { public static void main ( String [ ] args ) { hello ( null ) ; } public static void hello ( Object o ) { System.out.println ( `` Object '' ) ; } public static void hello ( Integer o ) { System.out.println ( `` Integer '' ) ; } public static void hello ( String s ) { System.out.println ( `` String '' ) ; } }
"// itself uses parallel stream and calls parallel variant isPrime private static long calNumberOfPrimesPP ( long n ) { return LongStream .rangeClosed ( 2 , n ) .parallel ( ) .filter ( i - > isPrimeParallel ( i ) ) .count ( ) ; } // itself uses parallel stream and calls non-parallel variant isPrime private static long calNumberOfPrimesPNP ( long n ) { return LongStream .rangeClosed ( 2 , n ) .parallel ( ) .filter ( i - > isPrimeNonParallel ( i ) ) .count ( ) ; } // itself uses non-parallel stream and calls parallel variant isPrime private static long calNumberOfPrimesNPP ( long n ) { return LongStream .rangeClosed ( 2 , n ) .filter ( i - > isPrimeParallel ( i ) ) .count ( ) ; } // itself uses non-parallel stream and calls non-parallel variant isPrime private static long calNumberOfPrimesNPNP ( long n ) { return LongStream .rangeClosed ( 2 , n ) .filter ( i - > isPrimeNonParallel ( i ) ) .count ( ) ; } // uses parallel stream private static boolean isPrimeParallel ( long n ) { return LongStream .rangeClosed ( 2 , ( long ) Math.sqrt ( n ) ) .parallel ( ) .noneMatch ( i - > n % i == 0 ) ; } // uses non-parallel stream private static boolean isPrimeNonParallel ( long n ) { return LongStream .rangeClosed ( 2 , ( long ) Math.sqrt ( n ) ) .noneMatch ( i - > n % i == 0 ) ; } public static void main ( String [ ] args ) throws Exception { int iterations = 50 ; int n = 1000000 ; double pp , pnp , npp , npnp ; pp = pnp = npp = npnp = 0 ; for ( int i = 0 ; i < iterations ; i++ ) { Callable < Long > runner1 = ( ) - > calNumberOfPrimesPP ( n ) ; Callable < Long > runner2 = ( ) - > calNumberOfPrimesPNP ( n ) ; Callable < Long > runner3 = ( ) - > calNumberOfPrimesNPP ( n ) ; Callable < Long > runner4 = ( ) - > calNumberOfPrimesNPNP ( n ) ; pp += TimeIt.timeIt ( runner1 ) ; pnp += TimeIt.timeIt ( runner2 ) ; npp += TimeIt.timeIt ( runner3 ) ; npnp += TimeIt.timeIt ( runner4 ) ; } System.out.println ( `` ___________final results___________ '' ) ; System.out.println ( `` avg PP = `` + pp / iterations ) ; System.out.println ( `` avg PNP = `` + pnp / iterations ) ; System.out.println ( `` avg NPP = `` + npp / iterations ) ; System.out.println ( `` avg NPNP = `` + npnp / iterations ) ; } ___________final results___________avg PP = 2364.51336366avg PNP = 265.27284506avg NPP = 11424.194316620002avg NPNP = 1138.15516624 class TimeIt { private TimeIt ( ) { } /** * returns the time to execute the Callable in milliseconds */ public static < T > double timeIt ( Callable < T > callable ) throws Exception { long start = System.nanoTime ( ) ; System.out.println ( callable.call ( ) ) ; return ( System.nanoTime ( ) - start ) / 1.0e6 ; } }"
public final Pattern PATTERN = Pattern.compile ( `` < abc : c\\sabc : name=\ '' ( \\S+ ) \ '' \\sabc : type=\ '' ( \\S+ ) \ '' > '' ) ; try ( Stream < String > stream = Files.lines ( template.getPath ( ) ) ) { stream.filter ( s - > PATTERN.matcher ( s ) .find ( ) ) .forEach ( System.out : :println ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; }
"{ `` method '' : `` toasty '' , `` params '' : [ `` hello world '' , true ] } public abstract class ClientProcessor { public abstract void toasty ( String s , boolean bool ) ; public abstract void shutdown ( int timer ) ; private Method [ ] methods = getClass ( ) .getDeclaredMethods ( ) ; public void process ( String data ) { try { JSONObject json = new JSONObject ( data ) ; String methodName = ( String ) json.get ( `` method '' ) ; if ( methodName.equals ( `` process '' ) ) return ; for ( int i = 0 ; i < methods.length ; i++ ) if ( methods [ i ] .getName ( ) .equals ( methodName ) ) { JSONArray arr = json.getJSONArray ( `` params '' ) ; int length = arr.length ( ) ; Object [ ] args = new Object [ length ] ; for ( int i2 = 0 ; i2 < length ; i2++ ) args [ i2 ] = arr.get ( i2 ) ; methods [ i ] .invoke ( this , args ) ; return ; } } catch ( Exception e ) { } } } public class Client extends ClientProcessor { @ Override public void toasty ( String s , boolean bool ) { //make toast here } @ Override public void shutdown ( int timer ) { //shutdown system within timer } public void processJSON ( String json ) { process ( json ) ; } }"
private static class Wrapper < T > { public Wrapper ( T t ) { /**/ } } private static final List < Wrapper < Wrapper < ? extends Object > > > ls1 = new ArrayList < > ( ) ; public static < T > doit ( T t ) { Wrapper < Wrapper < T > > l1 = new Wrapper < > ( new Wrapper < > ( t ) ) ; ls1.add ( l1 ) ; // nok // add ( Wrapper < Wrapper < ? extends java.lang.Object > > ) in List // can not be applied to ( Wrapper < Wrapper < T > > } private static class C < T > extends Wrapper < Wrapper < T > > { public C ( T t ) { super ( new Wrapper < > ( t ) ) ; } } private static final List < C < ? extends Object > > ls2 = new ArrayList < > ( ) ; public static < T > doit ( T t ) { ls2.add ( new C < > ( t ) ) ; // ok }
LiveData.this.mActiveCount += mActive ? 1 : -1 ; int intToAdd = mActive ? 1 : -1 ; activeCount += intToAdd ;
int i = 0_10 ; System.out.println ( i ) ;
"if ( isOK ) Log.i ( TAG , stringVarContentOfMessage ) ; else Log.v ( TAG , stringVarContentOfMessage ) ; isOK ? Log.i ( TAG , stringVarContentOfMessage ) : Log.v ( TAG , stringVarContentOfMessage ) ;"
"# include `` stdafx.h '' # include < iostream > using namespace std ; class A { public : A ( ) { this- > Foo ( ) ; } virtual void Foo ( ) { cout < < `` A : :Foo ( ) '' < < endl ; } } ; class B : public A { public : B ( ) { this- > Foo ( ) ; } virtual void Foo ( ) { cout < < `` B : :Foo ( ) '' < < endl ; } } ; int main ( int , char** ) { B objB ; system ( `` pause '' ) ; return 0 ; } A : :Foo ( ) B : :Foo ( ) public class Testa { public Testa ( ) { this.Foo ( ) ; } public static void main ( String [ ] args ) { Testb b = new Testb ( ) ; } void Foo ( ) { System.out.println ( `` A '' ) ; } } class Testb extends Testa { public Testb ( ) { this.Foo ( ) ; } @ Override void Foo ( ) { System.out.println ( `` B '' ) ; } } BB"
"class Base { private Object a , b , < ... > ; // there 's like 10 of these attributes of different type public Object a ( ) { return a ; } public Object b ( ) { return b ; } // more getters like the ones above } class RootNode extends Base { } class BranchNode extends Base { private RootNode root ; // passed via constructor public Object a ( ) { Object value = super.a ( ) ; return value ! = null ? value : root.a ( ) ; } public Object b ( ) { Object value = super.b ( ) ; return value ! = null ? value : root.b ( ) ; } // below are more methods like the above one , all with same logic } private < T > T nvlGet ( Function < Base , T > accessor ) { T value = accessor.apply ( super ) ; // this is the problem line , because there is no way to pass a `` super-reference '' to anything return value ! = null ? value : accessor.apply ( root ) ; } // and then public accessors would look like this : public Object a ( ) { return nvlGet ( Base : :a ) ; } private < T > T nvlGet ( Supplier < T > first , Supplier < T > second ) { T value = first.get ( ) ; return value ! = null ? value : second.get ( ) ; } public Object a ( ) { return nvlGet ( super : :a , root : :a ) ; }"
( [ ' ] ) | ' ( [ ^ ' ] * ) '
"private static final LoadingCache < K , Semaphore > KEY_MUTEX = CacheBuilder.newBuilder ( ) .weakValues ( ) .build ( new CacheLoader < K , Semaphore > ( ) { @ Override public Semaphore load ( K key ) throws Exception { return new Semaphore ( 1 ) ; } } ) ;"
"String [ ] vegetablesSet = { `` Pepper '' , `` Cabbage '' , `` Tomato '' , `` Carrot '' , `` Beans '' , `` Cucumber '' , `` Peas '' } ; final int SALAD_COMBINATION_SIZE = 5 ; // Example : { `` Tomato '' , `` Cabbage '' , `` Cucumber '' , `` Pepper '' , `` Carrot '' } Set < Set < String > > allSaladCombinations = new HashSet < > ( ) ; for ( int i = 1 , max = 1 < < vegetablesSet.length ; i < max ; i++ ) { Set < String > set = new HashSet < > ( ) ; int count = 0 ; for ( int j = 0 , k = 1 ; j < vegetablesSet.length ; j++ , k < < = 1 ) { if ( ( k & i ) ! = 0 ) { set.add ( vegetablesSet [ j ] ) ; count++ ; } } if ( count == SALAD_COMBINATION_SIZE ) { allSaladCombinations.add ( set ) ; } } for ( Set < String > set : allSaladCombinations ) { for ( String vegatable : set ) { System.out.print ( vegatable + `` `` ) ; } System.out.println ( ) ; }"
"char c1 = 'S ' ; // S as a characterchar c2 = '\u0068 ' ; // h in Unicodechar c3 = 0x0065 ; // e in hexadecimalchar c4 = 0154 ; // l in octalchar c5 = ( char ) 131170 ; // b , casted ( 131170-131072=121 ) char c6 = ( char ) 131193 ; // y , casted ( 131193-131072=121 ) char c7 = '\ '' ; // ' apostrophe special characterchar c8 = 's ' ; // s as a characterchar [ ] autoDesignerArray = { c1 , c2 , c3 , c4 , c5 , c6 , c7 , c8 } ; System.out.println ( autoDesignerArray + `` Mustang '' ) ; System.out.println ( autoDesignerArray ) ;"
"ArrayList < Visible > visibles = new ArrayList < > ( ) ; ArrayList < Highlightable > highlightables = new ArrayList < > ( ) ; ArrayList < Selectable > selectables = new ArrayList < > ( ) ; // populate the lists// Visible is an interface , Highlightable is also interface ( extends Visible ) , // Selectable extends Highlightable// All interfaces have 3 concrete subclasses each , // to test situations when JVM is not able to optimize too much due to small number of classesfor ( Visible e : visibles ) { vsum += e.visibleValue ( ) ; } for ( Highlightable e : highlightables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; } for ( Selectable e : selectables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; ssum += e.selectableValue ( ) ; } ArrayList < Visible > visibles = new ArrayList < > ( ) ; // populate the listfor ( Visible e : visibles ) { if ( e instanceof Selectable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Selectable ) e ) .highlightableValue ( ) ; ssum += ( ( Selectable ) e ) .selectableValue ( ) ; } else if ( e instanceof Highlightable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Highlightable ) e ) .highlightableValue ( ) ; } else { vsum += e.visibleValue ( ) ; } } Main.separateLists thrpt 30 1546.898 ± 32.312 ops/sMain.singleListAndInstanceof thrpt 30 1673.733 ± 29.804 ops/s package test ; import org.openjdk.jmh.annotations.Benchmark ; import org.openjdk.jmh.annotations.Fork ; import org.openjdk.jmh.annotations.Measurement ; import org.openjdk.jmh.annotations.Warmup ; import java.util.ArrayList ; import java.util.Random ; public class Main { public static void main ( String [ ] args ) throws Exception { org.openjdk.jmh.Main.main ( args ) ; } @ Benchmark @ Warmup ( iterations = 5 , time = 1 ) @ Measurement ( iterations = 15 , time = 1 ) @ Fork ( value = 2 ) public static long separateLists ( ) { ArrayList < Visible > visibles = new ArrayList < > ( 3_500 ) ; ArrayList < Highlightable > highlightables = new ArrayList < > ( 3_500 ) ; ArrayList < Selectable > selectables = new ArrayList < > ( 3_500 ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 10_000 ; i++ ) { switch ( random.nextInt ( 9 ) ) { case 0 : visibles.add ( new Visible1 ( i ) ) ; break ; case 1 : highlightables.add ( new Highlightable1 ( i ) ) ; break ; case 2 : selectables.add ( new Selectable1 ( i ) ) ; break ; case 3 : visibles.add ( new Visible2 ( i ) ) ; break ; case 4 : highlightables.add ( new Highlightable2 ( i ) ) ; break ; case 5 : selectables.add ( new Selectable2 ( i ) ) ; break ; case 6 : visibles.add ( new Visible3 ( i ) ) ; break ; case 7 : highlightables.add ( new Highlightable3 ( i ) ) ; break ; case 8 : selectables.add ( new Selectable3 ( i ) ) ; break ; } } long listSize = visibles.size ( ) + highlightables.size ( ) + selectables.size ( ) ; long vsum = 0 ; long hsum = 0 ; long ssum = 0 ; for ( Visible e : visibles ) { vsum += e.visibleValue ( ) ; } for ( Highlightable e : highlightables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; } for ( Selectable e : selectables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; ssum += e.selectableValue ( ) ; } return listSize + vsum * hsum * ssum ; } @ Benchmark @ Warmup ( iterations = 5 , time = 1 ) @ Measurement ( iterations = 15 , time = 1 ) @ Fork ( value = 2 ) public static long singleListAndInstanceof ( ) { ArrayList < Visible > visibles = new ArrayList < > ( 10_000 ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 10_000 ; i++ ) { switch ( random.nextInt ( 9 ) ) { case 0 : visibles.add ( new Visible1 ( i ) ) ; break ; case 1 : visibles.add ( new Highlightable1 ( i ) ) ; break ; case 2 : visibles.add ( new Selectable1 ( i ) ) ; break ; case 3 : visibles.add ( new Visible2 ( i ) ) ; break ; case 4 : visibles.add ( new Highlightable2 ( i ) ) ; break ; case 5 : visibles.add ( new Selectable2 ( i ) ) ; break ; case 6 : visibles.add ( new Visible3 ( i ) ) ; break ; case 7 : visibles.add ( new Highlightable3 ( i ) ) ; break ; case 8 : visibles.add ( new Selectable3 ( i ) ) ; break ; } } long listSize = visibles.size ( ) ; long vsum = 0 ; long hsum = 0 ; long ssum = 0 ; for ( Visible e : visibles ) { if ( e instanceof Selectable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Selectable ) e ) .highlightableValue ( ) ; ssum += ( ( Selectable ) e ) .selectableValue ( ) ; } else if ( e instanceof Highlightable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Highlightable ) e ) .highlightableValue ( ) ; } else { vsum += e.visibleValue ( ) ; } } return listSize + vsum * hsum * ssum ; } } abstract class Visible { abstract int visibleValue ( ) ; } abstract class Highlightable extends Visible { abstract int highlightableValue ( ) ; } abstract class Selectable extends Highlightable { abstract int selectableValue ( ) ; } class Visible1 extends Visible { private int v ; Visible1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v ; } } class Highlightable1 extends Highlightable { private int v ; Highlightable1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*2 ; } @ Override int highlightableValue ( ) { return v*3 ; } } class Selectable1 extends Selectable { private int v ; Selectable1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*4 ; } @ Override int highlightableValue ( ) { return v*5 ; } @ Override int selectableValue ( ) { return v*6 ; } } class Visible2 extends Visible { private int v ; Visible2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*7 ; } } class Highlightable2 extends Highlightable { private int v ; Highlightable2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*8 ; } @ Override int highlightableValue ( ) { return v*9 ; } } class Selectable2 extends Selectable { private int v ; Selectable2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*10 ; } @ Override int highlightableValue ( ) { return v*11 ; } @ Override int selectableValue ( ) { return v*12 ; } } class Visible3 extends Visible { private int v ; Visible3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*13 ; } } class Highlightable3 extends Highlightable { private int v ; Highlightable3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*14 ; } @ Override int highlightableValue ( ) { return v*15 ; } } class Selectable3 extends Selectable { private int v ; Selectable3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*16 ; } @ Override int highlightableValue ( ) { return v*17 ; } @ Override int selectableValue ( ) { return v*18 ; } } Main.separateLists thrpt 600 1690.522 ± 6.570 ops/sMain.singleListAndInstanceof thrpt 600 1751.375 ± 4.368 ops/sMain.separateLists : L1-dcache-load-misses : u thrpt 2 2298.258 # /opMain.singleListAndInstanceof : L1-dcache-load-misses : u thrpt 2 627.451 # /opMain.separateLists : L1-dcache-loads : u thrpt 2 1217756.290 # /opMain.singleListAndInstanceof : L1-dcache-loads : u thrpt 2 1135982.650 # /opMain.separateLists : L1-icache-load-misses : u thrpt 2 113.599 # /opMain.singleListAndInstanceof : L1-icache-load-misses : u thrpt 2 99.896 # /opMain.separateLists : L1-icache-loads : u thrpt 2 656048.382 # /opMain.singleListAndInstanceof : L1-icache-loads : u thrpt 2 694074.004 # /opMain.separateLists : LLC-load-misses : u thrpt 2 872.681 # /opMain.singleListAndInstanceof : LLC-load-misses : u thrpt 2 355.666 # /opMain.separateLists : LLC-loads : u thrpt 2 12036.496 # /opMain.singleListAndInstanceof : LLC-loads : u thrpt 2 7445.434 # /opMain.separateLists : LLC-stores : u thrpt 2 15277.223 # /opMain.singleListAndInstanceof : LLC-stores : u thrpt 2 10649.517 # /opMain.separateLists : branch-misses : u thrpt 2 22463.763 # /opMain.singleListAndInstanceof : branch-misses : u thrpt 2 29940.958 # /opMain.separateLists : branches : u thrpt 2 254018.586 # /opMain.singleListAndInstanceof : branches : u thrpt 2 275450.951 # /opMain.separateLists : cycles : u thrpt 2 1988517.839 # /opMain.singleListAndInstanceof : cycles : u thrpt 2 1921584.057 # /opMain.separateLists : dTLB-load-misses : u thrpt 2 66.212 # /opMain.singleListAndInstanceof : dTLB-load-misses : u thrpt 2 64.442 # /opMain.separateLists : dTLB-loads : u thrpt 2 1217929.340 # /opMain.singleListAndInstanceof : dTLB-loads : u thrpt 2 1135799.981 # /opMain.separateLists : iTLB-load-misses : u thrpt 2 4.179 # /opMain.singleListAndInstanceof : iTLB-load-misses : u thrpt 2 3.876 # /opMain.separateLists : iTLB-loads : u thrpt 2 656595.175 # /opMain.singleListAndInstanceof : iTLB-loads : u thrpt 2 693913.010 # /opMain.separateLists : instructions : u thrpt 2 2273646.245 # /opMain.singleListAndInstanceof : instructions : u thrpt 2 2045332.939 # /opMain.separateLists : stalled-cycles-backend : u thrpt 2 773671.154 # /opMain.singleListAndInstanceof : stalled-cycles-backend : u thrpt 2 619477.824 # /opMain.separateLists : stalled-cycles-frontend : u thrpt 2 184604.485 # /opMain.singleListAndInstanceof : stalled-cycles-frontend : u thrpt 2 271938.450 # /opMain.separateLists : ·gc.alloc.rate thrpt 600 217.266 ± 0.846 MB/secMain.singleListAndInstanceof : ·gc.alloc.rate thrpt 600 222.747 ± 0.556 MB/secMain.separateLists : ·gc.alloc.rate.norm thrpt 600 202181.035 ± 2.986 B/opMain.singleListAndInstanceof : ·gc.alloc.rate.norm thrpt 600 200083.395 ± 4.720 B/opMain.separateLists : ·gc.churn.PS_Eden_Space thrpt 600 217.792 ± 3.841 MB/secMain.singleListAndInstanceof : ·gc.churn.PS_Eden_Space thrpt 600 223.528 ± 4.973 MB/secMain.separateLists : ·gc.churn.PS_Eden_Space.norm thrpt 600 202704.197 ± 3508.997 B/opMain.singleListAndInstanceof : ·gc.churn.PS_Eden_Space.norm thrpt 600 200804.794 ± 4414.457 B/opMain.separateLists : ·gc.churn.PS_Survivor_Space thrpt 600 0.095 ± 0.008 MB/secMain.singleListAndInstanceof : ·gc.churn.PS_Survivor_Space thrpt 600 0.091 ± 0.008 MB/secMain.separateLists : ·gc.churn.PS_Survivor_Space.norm thrpt 600 88.896 ± 7.778 B/opMain.singleListAndInstanceof : ·gc.churn.PS_Survivor_Space.norm thrpt 600 81.693 ± 7.269 B/opMain.separateLists : ·gc.count thrpt 600 2440.000 countsMain.singleListAndInstanceof : ·gc.count thrpt 600 2289.000 countsMain.separateLists : ·gc.time thrpt 600 4501.000 msMain.singleListAndInstanceof : ·gc.time thrpt 600 4236.000 ms package test ; import org.openjdk.jmh.annotations . * ; import java.util.ArrayList ; import java.util.Random ; public class Main { public static void main ( String [ ] args ) throws Exception { org.openjdk.jmh.Main.main ( args ) ; } @ State ( Scope.Thread ) public static class SeparateListsState { public ArrayList < Visible > visibles ; public ArrayList < Highlightable > highlightables ; public ArrayList < Selectable > selectables ; @ Setup ( Level.Invocation ) public void doSetup ( ) { visibles = new ArrayList < > ( ) ; highlightables = new ArrayList < > ( ) ; selectables = new ArrayList < > ( ) ; Random random = new Random ( 9698426994L + 8879 ) ; for ( int i = 0 ; i < 10_000 ; i++ ) { switch ( random.nextInt ( 9 ) ) { case 0 : visibles.add ( new Visible1 ( i ) ) ; break ; case 1 : highlightables.add ( new Highlightable1 ( i ) ) ; break ; case 2 : selectables.add ( new Selectable1 ( i ) ) ; break ; case 3 : visibles.add ( new Visible2 ( i ) ) ; break ; case 4 : highlightables.add ( new Highlightable2 ( i ) ) ; break ; case 5 : selectables.add ( new Selectable2 ( i ) ) ; break ; case 6 : visibles.add ( new Visible3 ( i ) ) ; break ; case 7 : highlightables.add ( new Highlightable3 ( i ) ) ; break ; case 8 : selectables.add ( new Selectable3 ( i ) ) ; break ; } } } } @ Benchmark @ BenchmarkMode ( Mode.Throughput ) @ Warmup ( iterations = 5 , time = 1 ) @ Measurement ( iterations = 150 , time = 1 ) @ Fork ( value = 2 ) public static long separateLists ( SeparateListsState state ) { long vsum = 0 ; long hsum = 0 ; long ssum = 0 ; for ( Visible e : state.visibles ) { vsum += e.visibleValue ( ) ; } for ( Highlightable e : state.highlightables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; } for ( Selectable e : state.selectables ) { vsum += e.visibleValue ( ) ; hsum += e.highlightableValue ( ) ; ssum += e.selectableValue ( ) ; } return vsum * hsum * ssum ; } @ State ( Scope.Thread ) public static class SingleListAndInstanceofState { public ArrayList < Visible > visibles ; @ Setup ( Level.Invocation ) public void doSetup ( ) { visibles = new ArrayList < > ( ) ; Random random = new Random ( 9698426994L + 8879 ) ; for ( int i = 0 ; i < 10_000 ; i++ ) { switch ( random.nextInt ( 9 ) ) { case 0 : visibles.add ( new Visible1 ( i ) ) ; break ; case 1 : visibles.add ( new Highlightable1 ( i ) ) ; break ; case 2 : visibles.add ( new Selectable1 ( i ) ) ; break ; case 3 : visibles.add ( new Visible2 ( i ) ) ; break ; case 4 : visibles.add ( new Highlightable2 ( i ) ) ; break ; case 5 : visibles.add ( new Selectable2 ( i ) ) ; break ; case 6 : visibles.add ( new Visible3 ( i ) ) ; break ; case 7 : visibles.add ( new Highlightable3 ( i ) ) ; break ; case 8 : visibles.add ( new Selectable3 ( i ) ) ; break ; } } } } @ Benchmark @ BenchmarkMode ( Mode.Throughput ) @ Warmup ( iterations = 5 , time = 1 ) @ Measurement ( iterations = 150 , time = 1 ) @ Fork ( value = 2 ) public static long singleListAndInstanceof ( SingleListAndInstanceofState state ) { long vsum = 0 ; long hsum = 0 ; long ssum = 0 ; for ( Visible e : state.visibles ) { if ( e instanceof Selectable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Selectable ) e ) .highlightableValue ( ) ; ssum += ( ( Selectable ) e ) .selectableValue ( ) ; } else if ( e instanceof Highlightable ) { vsum += e.visibleValue ( ) ; hsum += ( ( Highlightable ) e ) .highlightableValue ( ) ; } else { vsum += e.visibleValue ( ) ; } } return vsum * hsum * ssum ; } } abstract class Visible { abstract int visibleValue ( ) ; } abstract class Highlightable extends Visible { abstract int highlightableValue ( ) ; } abstract class Selectable extends Highlightable { abstract int selectableValue ( ) ; } class Visible1 extends Visible { private int v ; Visible1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v ; } } class Highlightable1 extends Highlightable { private int v ; Highlightable1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*2 ; } @ Override int highlightableValue ( ) { return v*3 ; } } class Selectable1 extends Selectable { private int v ; Selectable1 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*4 ; } @ Override int highlightableValue ( ) { return v*5 ; } @ Override int selectableValue ( ) { return v*6 ; } } class Visible2 extends Visible { private int v ; Visible2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*7 ; } } class Highlightable2 extends Highlightable { private int v ; Highlightable2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*8 ; } @ Override int highlightableValue ( ) { return v*9 ; } } class Selectable2 extends Selectable { private int v ; Selectable2 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*10 ; } @ Override int highlightableValue ( ) { return v*11 ; } @ Override int selectableValue ( ) { return v*12 ; } } class Visible3 extends Visible { private int v ; Visible3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*13 ; } } class Highlightable3 extends Highlightable { private int v ; Highlightable3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*14 ; } @ Override int highlightableValue ( ) { return v*15 ; } } class Selectable3 extends Selectable { private int v ; Selectable3 ( int v ) { this.v = v ; } @ Override int visibleValue ( ) { return v*16 ; } @ Override int highlightableValue ( ) { return v*17 ; } @ Override int selectableValue ( ) { return v*18 ; } } Main.separateLists thrpt 300 4211.552 ± 23.791 ops/sMain.singleListAndInstanceof thrpt 300 3920.251 ± 15.478 ops/sMain.separateLists : L1-dcache-load-misses : u thrpt 2 3046.033 # /opMain.singleListAndInstanceof : L1-dcache-load-misses : u thrpt 2 1089.122 # /opMain.separateLists : L1-dcache-loads : u thrpt 2 1090745.006 # /opMain.singleListAndInstanceof : L1-dcache-loads : u thrpt 2 1125243.609 # /opMain.separateLists : L1-icache-load-misses : u thrpt 2 150.542 # /opMain.singleListAndInstanceof : L1-icache-load-misses : u thrpt 2 143.304 # /opMain.separateLists : L1-icache-loads : u thrpt 2 600852.620 # /opMain.singleListAndInstanceof : L1-icache-loads : u thrpt 2 700771.042 # /opMain.separateLists : LLC-load-misses : u thrpt 2 1299.520 # /opMain.singleListAndInstanceof : LLC-load-misses : u thrpt 2 636.764 # /opMain.separateLists : LLC-loads : u thrpt 2 14408.815 # /opMain.singleListAndInstanceof : LLC-loads : u thrpt 2 10429.768 # /opMain.separateLists : LLC-stores : u thrpt 2 18999.178 # /opMain.singleListAndInstanceof : LLC-stores : u thrpt 2 15370.582 # /opMain.separateLists : branch-misses : u thrpt 2 22578.062 # /opMain.singleListAndInstanceof : branch-misses : u thrpt 2 29257.959 # /opMain.separateLists : branches : u thrpt 2 258026.890 # /opMain.singleListAndInstanceof : branches : u thrpt 2 284911.889 # /opMain.separateLists : cycles : u thrpt 2 1915774.770 # /opMain.singleListAndInstanceof : cycles : u thrpt 2 1974841.023 # /opMain.separateLists : dTLB-load-misses : u thrpt 2 101.573 # /opMain.singleListAndInstanceof : dTLB-load-misses : u thrpt 2 99.982 # /opMain.separateLists : dTLB-loads : u thrpt 2 1090174.103 # /opMain.singleListAndInstanceof : dTLB-loads : u thrpt 2 1129185.929 # /opMain.separateLists : iTLB-load-misses : u thrpt 2 4.432 # /opMain.singleListAndInstanceof : iTLB-load-misses : u thrpt 2 3.955 # /opMain.separateLists : iTLB-loads : u thrpt 2 600301.665 # /opMain.singleListAndInstanceof : iTLB-loads : u thrpt 2 703339.482 # /opMain.separateLists : instructions : u thrpt 2 1974603.052 # /opMain.singleListAndInstanceof : instructions : u thrpt 2 2040460.093 # /opMain.separateLists : stalled-cycles-backend : u thrpt 2 808914.974 # /opMain.singleListAndInstanceof : stalled-cycles-backend : u thrpt 2 685615.056 # /opMain.separateLists : stalled-cycles-frontend : u thrpt 2 186013.216 # /opMain.singleListAndInstanceof : stalled-cycles-frontend : u thrpt 2 272207.204 # /opMain.separateLists : ·gc.alloc.rate thrpt 300 346.891 ± 1.166 MB/secMain.singleListAndInstanceof : ·gc.alloc.rate thrpt 300 358.297 ± 0.614 MB/secMain.separateLists : ·gc.alloc.rate.norm thrpt 300 310744.294 ± 0.107 B/opMain.singleListAndInstanceof : ·gc.alloc.rate.norm thrpt 300 328992.302 ± 0.110 B/opMain.separateLists : ·gc.churn.PS_Eden_Space thrpt 300 349.387 ± 14.305 MB/secMain.singleListAndInstanceof : ·gc.churn.PS_Eden_Space thrpt 300 360.039 ± 9.075 MB/secMain.separateLists : ·gc.churn.PS_Eden_Space.norm thrpt 300 313154.953 ± 13018.012 B/opMain.singleListAndInstanceof : ·gc.churn.PS_Eden_Space.norm thrpt 300 330629.833 ± 8345.712 B/opMain.separateLists : ·gc.churn.PS_Survivor_Space thrpt 300 0.092 ± 0.012 MB/secMain.singleListAndInstanceof : ·gc.churn.PS_Survivor_Space thrpt 300 0.094 ± 0.011 MB/secMain.separateLists : ·gc.churn.PS_Survivor_Space.norm thrpt 300 82.348 ± 10.661 B/opMain.singleListAndInstanceof : ·gc.churn.PS_Survivor_Space.norm thrpt 300 86.465 ± 10.417 B/opMain.separateLists : ·gc.count thrpt 300 1196.000 countsMain.singleListAndInstanceof : ·gc.count thrpt 300 1235.000 countsMain.separateLists : ·gc.time thrpt 300 2178.000 msMain.singleListAndInstanceof : ·gc.time thrpt 300 2355.000 ms"
| start end || date1 date1| < -- -- -- -- -- -- -- - > | | start end | | || | date2 date2| | || < -- -- -- -- -- -- -- -- -- - > | || | start end || | date3 date3|| < -- -- -- -- -- -- -- -- -- - > | start end || date1 date1| < -- -- -- -- -- -- -- - > | | start end | | || | date2 date2| | || < -- -- -- -- -- -- -- -- -- - > | || | start end || | date3 date3|| < -- -- -- -- -- -- -- -- -- - > | | || | start end || | date4 date4|| < -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- >
[ ... ] JFrame f = new JFrame ( ) ; JPanel p = new JPanel ( ) ; { JLabel a = new JLabel ( `` Hello '' ) ; p.add ( a ) ; JLabel b = new JLabel ( `` World ! `` ) ; p.add ( b ) ; } f.add ( p ) ; [ ... ]
"< KEY > = > < VALUE > ... GET /lookup ? key= < KEY > MESSAGE : `` Add A '' A= < VALUE > //Not visible yetMESSAGE : `` Add B '' B= < VALUE > //Not visible yetMESSAGE : `` Commit '' //Updates are now visible to the end-usersA= < VALUE > B= < VALUE volatile Map passiveCopy = new HashMap ( ) ; volatile Map activeCopy = new HashMap ( ) ; Map < String , Object > pendingUpdates ; //Interactive requests ( REST API ) Object lookup ( String key ) { activeCopy.get ( key ) ; } //Background thread processing the incoming messages.//Messages are processed strictly sequentially//i.e . no other message will be processed , until//current handleMessage ( ) invocation is completed// ( that is guaranteed by the message processing framework itself ) void handleMessage ( Message msg ) { //New updates go to the pending updates temporary map if ( msg.type ( ) == ADD ) { pendingUpdates.put ( msg.getKey ( ) , msg.getValue ( ) ) ; } if ( msg.type ( ) == COMMIT ) { //Apply updates to the passive copy of the map passiveCopy.addAll ( pendingUpdates ) ; //Swap active and passive map copies Map old = activeCopy ; activeCopy = passiveCopy ; passiveCopy = old ; //Grace period , wait for on-the-air requests to complete //REST API has a hard timeout of 100ms , so no client //will wait for the response longer than that Thread.sleep ( 1000 ) ; //Re-apply updates to the now-passive ( ex-active ) copy of the map passiveCopy.addAll ( pendingUpdates ) ; //Reset the pendingUpdates map pendingUpdates.clear ( ) ; } }"
ClassA { private ClassB classB ; public methodA1 ( ) { classB.methodB1 ( ) ; } } ClassB { public methodB1 ( ) { // Some code } }
"interface EventConsumer < E extends Event > { void respondToEvent ( E event ) ; } class EventHub { private HashMap < Class < /*event type*/ > , HashSet < EventConsumer < /*event type*/ > > > subscriptions ; public < E extends Event > void fireEvent ( E event ) { /* For every consumer in the set corresponding to the event type { consumer.respondToEvent ( event ) ; } */ } public < E extends Event > void subscribeToEvent ( EventConsumer < E > consumer ) { /* Insert consumer into the set corresponding to E */ } } HashMap < Class < E extends Event > , HashSet < EventConsumer < E > > > // or < E extends Event > HashMap < Class < E > , HashSet < EventConsumer < E > > > HashMap < Class < ? extends Event > , HashSet < EventConsumer < ? extends Event > > > subscriptions.get ( E.class ) .put ( consumer )"
public class Person { } public class Student extends Person { } public static List < Student > findStudents ( List < Person > list ) { return list.stream ( ) .filter ( person - > person instanceof Student ) .collect ( Collectors.toList ( ) ) ; }
class Dog extends Animal { } class Cat extends Animal { } List < Cat > cats = FluentIterable.from ( animals ) .filter ( Cat.class ) .toList ( ) ; List < Cat > cats = animals.stream ( ) .filter ( c - > c instanceof Cat ) .map ( c - > ( Cat ) c ) .collect ( Collectors.toList ( ) ) ;
//Creates a list of List numbers List < List < Number > > num = new ArrayList < List < Number > > ( ) ; //Creates a list of List doubles List < List < Double > > doub = new ArrayList < List < Double > > ( ) ; //List of doubles List < Double > d = new ArrayList < Double > ( ) ; d.add ( 2.5 ) ; d.add ( 2.6 ) ; doub.add ( d ) ; num.add ( d ) ; //This code will not compile
"string GetJavaVersion ( string sJavaExePath ) { } ASSERT ( GetJavaVersion ( `` C : \Program Files ( x86 ) \Java\jdk1.7.0_17\bin\java.exe '' ) == `` 1.7.0_25 '' ) ; java version `` 1.7.0_25 '' Java ( TM ) SE Runtime Environment ( build 1.7.0_25-b17 ) Java HotSpot ( TM ) Client VM ( build 23.25-b01 , mixed mode , sharing )"
builder.something ( ) .somethingElse ( ) .somethingMore ( builder.getSomething ( ) ) ;
public class ThreadA { public static void main ( String [ ] args ) { ThreadB b = new ThreadB ( ) ; b.start ( ) ; synchronized ( b ) { try { System.out.println ( `` Waiting for b to complete ... '' ) ; b.wait ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } System.out.println ( `` Total is : `` + b.total ) ; } } } class ThreadB extends Thread { int total ; @ Override public void run ( ) { synchronized ( this ) { for ( int i=0 ; i < 100 ; i++ ) { total += i ; } notify ( ) ; } } }
class Dog { static String dogName ; Dog ( String name ) { dogName=name ; } public void setName ( String newName ) { dogName=newName ; } public String getName ( ) { return dogName ; } } class JavaIsPassByValue { public static void main ( String arr [ ] ) { Dog dog1=new Dog ( `` OldDog '' ) ; new JavaIsPassByValue ( ) .display ( dog1 ) ; System.out.println ( dog1.getName ( ) ) ; } public void display ( Dog d ) { System.out.println ( d.getName ( ) ) ; d = new Dog ( `` NewDog '' ) ; System.out.println ( d.getName ( ) ) ; } }
"nested = { `` one '' : { `` two '' : { `` 2a '' : `` x '' , `` 2b '' : `` y '' } } , `` side '' : `` value '' } // output : { `` one.two.2a '' : `` x '' , `` one.two.2b '' : `` y '' , `` side '' : `` value '' } public class Flat { public static void flatten ( Map < String , ? > target , Map < String , String > result , String path ) { for ( var entry : target.entrySet ( ) ) { var next = path.equals ( `` '' ) ? entry.getKey ( ) : path + `` . '' + entry.getKey ( ) ; if ( entry.getValue ( ) instanceof Map ) { flatten ( ( Map ) entry.getValue ( ) , result , next ) ; } else { result.put ( next , entry.getValue ( ) .toString ( ) ) ; } } } public static Map unflatten ( Map < String , String > target ) { var result = new HashMap < String , Object > ( ) ; for ( var entry : target.entrySet ( ) ) { if ( entry.getKey ( ) .split ( `` . `` ) .length == 1 ) { result.put ( entry.getKey ( ) , entry.getValue ( ) ) ; } else { var path = entry.getKey ( ) .split ( `` . `` ) ; Map < String , Object > current = new HashMap < > ( ) ; for ( var i = 0 ; i < path.length - 1 ; i++ ) { if ( result.containsKey ( path [ i ] ) ) { current = ( Map ) ( result.get ( path [ i ] ) ) ; } else { current = new HashMap < > ( ) ; result.put ( path [ i ] , current ) ; } } current.put ( path [ path.length - 1 ] , entry.getValue ( ) ) ; } } return result ; } }"
"@ RequestMapping ( method = RequestMethod.GET ) public String createForm ( final ModelMap modelMap ) { User user ; user = new User ( ) ; user.setGroup ( `` HelpDesk '' ) ; user.setName ( `` John '' ) ; ArrayList < String > groupList = new ArrayList < > ( ) ; groupList.add ( `` Admin '' ) ; groupList.add ( `` HelpDesk '' ) ; groupList.add ( `` GroupManager '' ) ; groupList.add ( `` Others '' ) ; modelMap.addAttribute ( `` user '' , user ) ; modelMap.addAttribute ( `` groupList '' , groupList ) ; return `` /user/user-add '' ; } @ RequestMapping ( method = RequestMethod.POST ) public String createUser ( @ ModelAttribute ( `` user '' ) final User user , BindingResult result ) { userValidator.validate ( user , result , groupList ) ; logger.info ( user.getGroup ( ) ) ; //Will print `` HelpDesk , Admin '' for instance return `` ... '' ; } < table > < form : form method= '' POST '' modelAttribute= '' user '' > < tr > < td > Name : < /td > < td > < form : input path= '' name '' / > < /td > < td > < form : errors path= '' name '' cssClass= '' error '' / > < /td > < /tr > < tr > < td > Group : < /td > < td > < form : select path= '' group '' items= '' $ { groupList } '' multiple= '' single '' / > < /td > < td > < form : errors path= '' group '' cssClass= '' error '' / > < /td > < /tr > < tr > < td colspan= '' 3 '' > < input type= '' submit '' / > < /td > < /tr > < /form : form > < /table >"
Dog dog1 = new Dog ( ) ; Dog dog2 = new Dog ( ) ; Class dog1Class = dog1.getClass ( ) ; Class dog2Class = dog2.getClass ( ) ; Class dogClass = Dog.class ;
"curl -- unix-socket /var/run/docker.sock http : /v1.40/containers/json return client.get ( ) .uri ( `` /containers/json '' ) .responseContent ( ) .asString ( ) .collectList ( ) .flatMapMany ( new Function < List < String > , Publisher < ? extends Container > > ( ) { @ Override public Publisher < ? extends Container > apply ( List < String > strings ) { return Flux.empty ( ) ; } } ) ; private HttpClient getOperationsClient ( OperationsProperties properties ) { return HttpClient.create ( ) .remoteAddress ( ( ) - > new DomainSocketAddress ( `` /var/run/docker.sock '' ) ) ; } io.netty.channel.AbstractChannel $ AnnotatedConnectException : connect ( .. ) failed : Invalid argument : /var/run/docker.sock res = connectDomainSocket ( fd , unixDomainSocketAddress.path ( ) .getBytes ( CharsetUtil.UTF_8 ) ) ;"
"List < SomeClass > list = stream.map ( new SomeClass ( ) : :method ) .collect ( Collectors.toList ( ) ) ; List < SomeClass > list = stream.map ( a - > { return new SomeClass ( ) .method ( a ) ; } ) .collect ( Collectors.toList ( ) ) ; Arrays.asList ( true , false , true , false ) .stream ( ) .map ( new SomeClass ( ) : :method ) .collect ( Collectors.toList ( ) ) ; System.out.println ( `` -- -- -- -- -- -- -- -- -- -- -- '' ) ; Arrays.asList ( true , false , true , false ) .stream ( ) .map ( a - > { return new SomeClass ( ) .method ( a ) ; } ) .collect ( Collectors.toList ( ) ) ; public class SomeClass { public SomeClass ( ) { System.out.println ( this ) ; } public SomeClass method ( Boolean b ) { return this ; } }"
public static boolean stringValidity ( String input ) { int specials = 0 ; Pattern p = Pattern.compile ( `` [ ^a-zA-Z0-9 ] '' ) ; Matcher m = p.matcher ( input ) ; boolean b = m.find ( ) ; if ( b ) { System.out.println ( `` \nstringValidity - There is a special character in my string '' ) ; for ( int i = 0 ; i < input.length ( ) ; ++i ) { char ch = input.charAt ( i ) ; //if ( ! Character.isDigit ( ch ) & & ! Character.isLetter ( ch ) & & ! Character.isSpace ( ch ) ) { ++specials ; System.out.println ( `` \nstringValidity - Latest number of special characters is : `` + specials ) ; if ( ( ch == '- ' ) | ( ch == ' . ' ) ) { specialCharValidity = true ; System.out.println ( `` \nstringValidity - CHAR is valid - specialCharValidity is : `` + specialCharValidity + `` as char is : `` + ch ) ; } else { specialCharValidity = false ; System.out.println ( `` \nstringValidity - CHAR is invalid - specialCharValidity is : `` + specialCharValidity + `` as char is : `` + ch ) ; break ; } // } } } else { System.out.println ( `` \nstringValidity - There is NO special character in my string '' ) ; specialCharValidity = true ; } return specialCharValidity ; } `` QWERTY '' ! £ $ '' £ $ '' '' sdfGSDFGSDFG % *^ ( % * & ( `` `` QWE12342134RTY '' '' LOREMIPSUM2354214 ''
"private String getTransactionTotals ( Refund [ ] refunds ) { BigDecimal total = new BigDecimal ( 0.00 ) ; /* * Itterates over all the refund objects and adds * their amount payables together to get a total */ for ( Refund refund : refunds ) { total.add ( refund.getAmountPayable ( ) ) ; } total = total.setScale ( 2 , RoundingMode.CEILING ) ; return total.toString ( ) ; }"
"class RowData { private String id ; private String name ; public RowData ( ) { } public RowData ( String id , String name ) { this.id = id ; this.name = name ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } class CodeToBrands { private String code ; private List < String > brands = new ArrayList < > ( ) ; public String getCode ( ) { return code ; } public void setCode ( String code ) { this.code = code ; } public List < String > getBrands ( ) { return brands ; } public void addBrands ( List < String > brands ) { this.brands.addAll ( brands ) ; } public void addBrand ( String brand ) { this.brands.add ( brand ) ; } } @ Testpublic void testMappingRows ( ) { List < RowData > rows = new ArrayList < > ( ) ; rows.add ( new RowData ( `` A '' , `` Foo '' ) ) ; rows.add ( new RowData ( `` B '' , `` Foo '' ) ) ; rows.add ( new RowData ( `` A '' , `` Bar '' ) ) ; rows.add ( new RowData ( `` B '' , `` Zoo '' ) ) ; rows.add ( new RowData ( `` C '' , `` Elf '' ) ) ; // Groups a list of elements to a Map < String , List < String > > System.out.println ( `` \nMapping the codes to a list of brands '' ) ; Map < String , List < String > > result = rows.stream ( ) .collect ( Collectors.groupingBy ( RowData : :getId , Collectors.mapping ( RowData : :getName , Collectors.toList ( ) ) ) ) ; // Show results are grouped nicely result.entrySet ( ) .forEach ( ( entry ) - > { System.out.println ( `` Key : `` + entry.getKey ( ) ) ; entry.getValue ( ) .forEach ( ( value ) - > System.out.println ( `` ..Value : `` + value ) ) ; } ) ; /**Prints : * Mapping the codes to a list of brands Key : A ..Value : Foo ..Value : Bar Key : B ..Value : Foo ..Value : Zoo Key : C ..Value : Elf*/ // How to get these as a List < CodeToBrand > objects where each CodeToBrand objects to avoid working with a Map < String , List < String > > ? List < CodeToBrands > resultsAsNewType ; }"
"public static Class < ? > forName ( String name , boolean initialize , ClassLoader loader )"
( ? s ) \\ { \\ { wotd\\| ( .+ ? ) \\| ( .+ ? ) \\| ( [ ^ # \\| ] + ) . * ? \\ } \\ }
"Map < String , Integer > voting = new ConcurrentHashMap < > ( ) ; for ( int i = 0 ; i < 16 ; i++ ) { new Thread ( ( ) - > { voting.put ( `` GERB '' , voting.getOrDefault ( `` GERB '' , 0 ) + 1 ) ; } ) .start ( ) ; } for ( int i = 0 ; i < 100 ; i++ ) { voting.put ( `` GERB '' , voting.getOrDefault ( `` GERB '' , 0 ) + 1 ) ; } Thread.sleep ( 5000 ) ; // Waits for the threads to finishfor ( String s : voting.keySet ( ) ) { System.out.println ( s + `` : `` + voting.get ( s ) ) ; }"
public Example ( String name ) { this.name = name ; } public Example ( SomeOther other ) { this.other = other ; }
"Map < Class < ? > , Object > myMap = new HashMap < Class < ? > , Object > ( ) ; Foo fooObject = New Foo ( ) ; myMap.put ( fooObject.getClass ( ) , fooObject )"
class A < V > { public V v ; public < V > A ( ) { } public static < V > A < V > create ( ) { return new A < V > ( ) ; } } public class FooMain { public static void main ( String args [ ] ) { A.create ( ) .v = 5 ; A.create ( ) .v = `` a string '' ; } } javac -Xlint : all src/FooMain.java
"class ModelA { private Long id ; private String name ; private Integer value ; public ModelA ( Long id , String name , Integer value ) { this.id = id ; this.name = name ; this.value = value ; } public Long getId ( ) { return id ; } public String getName ( ) { return name ; } public Integer getValue ( ) { return value ; } } class ModelB { private Long id ; private Map < String , Integer > valuesByName ; public ModelB ( Long id , Map < String , Integer > valuesByName ) { this.id = id ; this.valuesByName = valuesByName ; } public Long getId ( ) { return id ; } public Map < String , Integer > getValuesByName ( ) { return valuesByName ; } } public static List < ModelB > convert ( List < ModelA > models ) { List < ModelB > toReturn = new ArrayList < > ( ) ; Map < Long , Map < String , Integer > > helper = new HashMap < > ( ) ; models.forEach ( modelA - > { helper.computeIfAbsent ( modelA.getId ( ) , value - > new HashMap < > ( ) ) .computeIfAbsent ( modelA.getName ( ) , value - > modelA.getValue ( ) ) ; } ) ; helper.forEach ( ( id , valuesByName ) - > toReturn.add ( new ModelB ( id , valuesByName ) ) ) ; return toReturn ; }"
javac FooBar.java
"[ 2020-09-18T04:25:04,215 ] [ WARN ] [ o.e.a.b.TransportShardBulkAction ] [ search1 ] [ [ my_index_4 ] [ 0 ] ] failed to perform indices : data/write/bulk [ s ] on replica [ my_index_4 ] [ 0 ] , node [ cm_76wfGRFm9nbPR1mJxTQ ] , [ R ] , s [ STARTED ] , a [ id=BUpviwHxQK2qC3GrELC2Hw ] org.elasticsearch.transport.NodeDisconnectedException : [ search3 ] [ X.X.X.179:9300 ] [ indices : data/write/bulk [ s ] [ r ] ] disconnected [ 2020-09-18T04:25:04,215 ] [ WARN ] [ o.e.c.a.s.ShardStateAction ] [ search1 ] [ my_index_4 ] [ 0 ] received shard failed for shard id [ [ my_index_4 ] [ 0 ] ] , allocation id [ BUpviwHxQK2qC3GrELC2Hw ] , primary term [ 2 ] , message [ failed to perform indices : data/write/bulk [ s ] on replica [ my_index_4 ] [ 0 ] , node [ cm_76wfGRFm9nbPR1mJxTQ ] , [ R ] , s [ STARTED ] , a [ id=BUpviwHxQK2qC3GrELC2Hw ] ] , failure [ NodeDisconnectedException [ [ search3 ] [ X.X.X.179:9300 ] [ indices : data/write/bulk [ s ] [ r ] ] disconnected ] ] org.elasticsearch.transport.NodeDisconnectedException : [ search3 ] [ X.X.X.179:9300 ] [ indices : data/write/bulk [ s ] [ r ] ] disconnected [ 2020-09-18T04:25:04,215 ] [ DEBUG ] [ o.e.a.a.c.n.i.TransportNodesInfoAction ] [ search1 ] failed to execute on node [ cm_76wfGRFm9nbPR1mJxTQ ] org.elasticsearch.transport.NodeDisconnectedException : [ search3 ] [ X.X.X.179:9300 ] [ cluster : monitor/nodes/info [ n ] ] disconnected [ 2020-09-18T04:25:04,219 ] [ INFO ] [ o.e.c.r.a.AllocationService ] [ search1 ] Cluster health status changed from [ GREEN ] to [ YELLOW ] ( reason : [ shards failed [ [ my_index_4 ] [ 0 ] ] ... ] ) . [ 2020-09-18T04:25:05,450 ] [ INFO ] [ o.e.m.j.JvmGcMonitorService ] [ search1 ] [ gc ] [ 11099506 ] overhead , spent [ 605ms ] collecting in the last [ 1.4s ] [ 2020-09-18T04:25:05,453 ] [ ERROR ] [ o.e.b.ElasticsearchUncaughtExceptionHandler ] [ search1 ] fatal error in thread [ elasticsearch [ search1 ] [ search ] [ T # 5 ] ] , exitingjava.lang.OutOfMemoryError : Java heap spaceat org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSource $ GlobalOrdinalValuesSource. < init > ( CompositeValuesSource.java:137 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSource.wrapGlobalOrdinals ( CompositeValuesSource.java:123 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesComparator. < init > ( CompositeValuesComparator.java:50 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator. < init > ( CompositeAggregator.java:69 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregationFactory.createInternal ( CompositeAggregationFactory.java:52 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.AggregatorFactory.create ( AggregatorFactory.java:216 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.AggregatorFactories.createTopLevelAggregators ( AggregatorFactories.java:216 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.aggregations.AggregationPhase.preProcess ( AggregationPhase.java:55 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.query.QueryPhase.execute ( QueryPhase.java:105 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesService.lambda $ loadIntoContext $ 14 ( IndicesService.java:1133 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesService $ $ Lambda $ 2241/341562582.accept ( Unknown Source ) ~ [ ? : ? ] at org.elasticsearch.indices.IndicesService.lambda $ cacheShardLevelResult $ 15 ( IndicesService.java:1186 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesService $ $ Lambda $ 2242/1286052129.get ( Unknown Source ) ~ [ ? : ? ] at org.elasticsearch.indices.IndicesRequestCache $ Loader.load ( IndicesRequestCache.java:160 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesRequestCache $ Loader.load ( IndicesRequestCache.java:143 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.common.cache.Cache.computeIfAbsent ( Cache.java:412 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesRequestCache.getOrCompute ( IndicesRequestCache.java:116 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesService.cacheShardLevelResult ( IndicesService.java:1192 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.indices.IndicesService.loadIntoContext ( IndicesService.java:1132 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase ( SearchService.java:305 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.SearchService.executeQueryPhase ( SearchService.java:340 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.SearchService $ 2.onResponse ( SearchService.java:316 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.SearchService $ 2.onResponse ( SearchService.java:312 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.search.SearchService $ 3.doRun ( SearchService.java:1002 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.common.util.concurrent.ThreadContext $ ContextPreservingAbstractRunnable.doRun ( ThreadContext.java:672 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.common.util.concurrent.AbstractRunnable.run ( AbstractRunnable.java:37 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.common.util.concurrent.TimedRunnable.doRun ( TimedRunnable.java:41 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at org.elasticsearch.common.util.concurrent.AbstractRunnable.run ( AbstractRunnable.java:37 ) ~ [ elasticsearch-6.2.4.jar:6.2.4 ] at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1149 ) ~ [ ? :1.8.0_171 ] at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:624 ) ~ [ ? :1.8.0_171 ] at java.lang.Thread.run ( Thread.java:748 ) [ ? :1.8.0_171 ]"
"static public float [ ] test_arr_speeds_1 ( int a ) { return new float [ ] { a , a + 1 , a + 2 , a + 3 , a + 4 , a + 5 , a + 6 , a + 7 , a + 8 , a + 9 } ; } // or e.g . field = new float ... in methodstatic public float [ ] test_arr_speeds_2 ( int a ) { float [ ] ret = new float [ 10 ] ; ret [ 0 ] = a ; ret [ 1 ] = a + 1 ; ret [ 2 ] = a + 2 ; ret [ 3 ] = a + 3 ; ret [ 4 ] = a + 4 ; ret [ 5 ] = a + 5 ; ret [ 6 ] = a + 6 ; ret [ 7 ] = a + 7 ; ret [ 8 ] = a + 8 ; ret [ 9 ] = a + 9 ; return ret ; } // or e.g . field [ 0 ] = ... in method"
"public class BigInteger { private int [ ] bits ; private int sign ; // ... public byte [ ] ToByteArray ( ) { if ( sign == 0 ) { return new byte [ ] { 0 } ; } byte highByte ; int nonZeroDwordIndex = 0 ; int highDword ; if ( bits == null ) { highByte = ( byte ) ( ( sign < 0 ) ? 0xff : 0x00 ) ; highDword = sign ; } else if ( sign == -1 ) { highByte = ( byte ) 0xff ; assert bits.length > 0 ; assert bits [ bits.length - 1 ] ! = 0 ; while ( bits [ nonZeroDwordIndex ] == 0 ) { nonZeroDwordIndex++ ; } highDword = ~bits [ bits.length - 1 ] ; if ( bits.length - 1 == nonZeroDwordIndex ) { highDword += 1 ; } } else { assert sign == 1 ; highByte = 0x00 ; highDword = bits [ bits.length - 1 ] ; } byte msb ; int msbIndex ; if ( ( msb = ( byte ) ( highDword > > > 24 ) ) ! = highByte ) { msbIndex = 3 ; } else if ( ( msb = ( byte ) ( highDword > > > 16 ) ) ! = highByte ) { msbIndex = 2 ; } else if ( ( msb = ( byte ) ( highDword > > > 8 ) ) ! = highByte ) { msbIndex = 1 ; } else { msb = ( byte ) highDword ; msbIndex = 0 ; } boolean needExtraByte = ( msb & 0x80 ) ! = ( highByte & 0x80 ) ; byte [ ] bytes ; int curByte = 0 ; if ( bits == null ) { bytes = new byte [ msbIndex + 1 + ( needExtraByte ? 1 : 0 ) ] ; assert bytes.length < = 4 ; } else { bytes = new byte [ 4 * ( bits.length - 1 ) + msbIndex + 1 + ( needExtraByte ? 1 : 0 ) ] ; for ( int i = 0 ; i < bits.length - 1 ; i++ ) { int dword = bits [ i ] ; if ( sign == -1 ) { dword = ~dword ; if ( i < = nonZeroDwordIndex ) { dword = dword + 1 ; } } for ( int j = 0 ; j < 4 ; j++ ) { bytes [ curByte++ ] = ( byte ) dword ; dword > > > = 8 ; } } } for ( int j = 0 ; j < = msbIndex ; j++ ) { bytes [ curByte++ ] = ( byte ) highDword ; highDword > > > = 8 ; } if ( needExtraByte ) { bytes [ bytes.length - 1 ] = highByte ; } return bytes ; } } public byte [ ] ToByteArray ( ) ; Code : 0 : aload_0 1 : getfield # 3 // Field sign : I 4 : ifne 15 7 : iconst_1 8 : newarray byte 10 : dup 11 : iconst_0 12 : iconst_0 13 : bastore 14 : areturn 15 : iconst_0 16 : istore_2 17 : aload_0 18 : getfield # 2 // Field bits : [ I 21 : ifnonnull 48 24 : aload_0 25 : getfield # 3 // Field sign : I 28 : ifge 37 31 : sipush 255 34 : goto 38 37 : iconst_0 38 : i2b 39 : istore_1 40 : aload_0 41 : getfield # 3 // Field sign : I 44 : istore_3 45 : goto 193 48 : aload_0 49 : getfield # 3 // Field sign : I 52 : iconst_m1 53 : if_icmpne 156 56 : iconst_m1 57 : istore_1 58 : getstatic # 11 // Field $ assertionsDisabled : Z 61 : ifne 80 64 : aload_0 65 : getfield # 2 // Field bits : [ I 68 : arraylength 69 : ifgt 80 72 : new # 12 // class java/lang/AssertionError 75 : dup 76 : invokespecial # 13 // Method java/lang/AssertionError . `` `` : ( ) V 79 : athrow 80 : getstatic # 11 // Field $ assertionsDisabled : Z 83 : ifne 109 86 : aload_0 87 : getfield # 2 // Field bits : [ I 90 : aload_0 91 : getfield # 2 // Field bits : [ I 94 : arraylength 95 : iconst_1 96 : isub 97 : iaload 98 : ifne 109 101 : new # 12 // class java/lang/AssertionError 104 : dup 105 : invokespecial # 13 // Method java/lang/AssertionError . `` `` : ( ) V 108 : athrow 109 : aload_0 110 : getfield # 2 // Field bits : [ I 113 : iload_2 114 : iaload 115 : ifne 124 118 : iinc 2 , 1 121 : goto 109 124 : aload_0 125 : getfield # 2 // Field bits : [ I 128 : aload_0 129 : getfield # 2 // Field bits : [ I 132 : arraylength 133 : iconst_1 134 : isub 135 : iaload 136 : iconst_m1 137 : ixor 138 : istore_3 139 : aload_0 140 : getfield # 2 // Field bits : [ I 143 : arraylength 144 : iconst_1 145 : isub 146 : iload_2 147 : if_icmpne 193 150 : iinc 3 , 1 153 : goto 193 156 : getstatic # 11 // Field $ assertionsDisabled : Z 159 : ifne 178 162 : aload_0 163 : getfield # 3 // Field sign : I 166 : iconst_1 167 : if_icmpeq 178 170 : new # 12 // class java/lang/AssertionError 173 : dup 174 : invokespecial # 13 // Method java/lang/AssertionError . `` `` : ( ) V 177 : athrow 178 : iconst_0 179 : istore_1 180 : aload_0 181 : getfield # 2 // Field bits : [ I 184 : aload_0 185 : getfield # 2 // Field bits : [ I 188 : arraylength 189 : iconst_1 190 : isub 191 : iaload 192 : istore_3 193 : iload_3 194 : bipush 24 196 : iushr 197 : i2b 198 : dup 199 : istore 4 201 : iload_1 202 : if_icmpeq 211 205 : iconst_3 206 : istore 5 208 : goto 254 211 : iload_3 212 : bipush 16 214 : iushr 215 : i2b 216 : dup 217 : istore 4 219 : iload_1 220 : if_icmpeq 229 223 : iconst_2 224 : istore 5 226 : goto 254 229 : iload_3 230 : bipush 8 232 : iushr 233 : i2b 234 : dup 235 : istore 4 237 : iload_1 238 : if_icmpeq 247 241 : iconst_1 242 : istore 5 244 : goto 254 247 : iload_3 248 : i2b 249 : istore 4 251 : iconst_0 252 : istore 5 254 : iload 4 256 : sipush 128 259 : iand 260 : iload_1 261 : sipush 128 264 : iand 265 : if_icmpeq 272 268 : iconst_1 269 : goto 273 272 : iconst_0 273 : istore 6 275 : iconst_0 276 : istore 8 278 : aload_0 279 : getfield # 2 // Field bits : [ I 282 : ifnonnull 325 285 : iload 5 287 : iconst_1 288 : iadd 289 : iload 6 291 : ifeq 298 294 : iconst_1 295 : goto 299 298 : iconst_0 299 : iadd 300 : newarray byte 302 : astore 7 304 : getstatic # 11 // Field $ assertionsDisabled : Z 307 : ifne 443 310 : aload 7 312 : arraylength 313 : iconst_4 314 : if_icmple 443 317 : new # 12 // class java/lang/AssertionError 320 : dup 321 : invokespecial # 13 // Method java/lang/AssertionError . `` `` : ( ) V 324 : athrow 325 : iconst_4 326 : aload_0 327 : getfield # 2 // Field bits : [ I 330 : arraylength 331 : iconst_1 332 : isub 333 : imul 334 : iload 5 336 : iadd 337 : iconst_1 338 : iadd 339 : iload 6 341 : ifeq 348 344 : iconst_1 345 : goto 349 348 : iconst_0 349 : iadd 350 : newarray byte 352 : astore 7 354 : iconst_0 355 : istore 9 357 : iload 9 359 : aload_0 360 : getfield # 2 // Field bits : [ I 363 : arraylength 364 : iconst_1 365 : isub 366 : if_icmpge 443 369 : aload_0 370 : getfield # 2 // Field bits : [ I 373 : iload 9 375 : iaload 376 : istore 10 378 : aload_0 379 : getfield # 3 // Field sign : I 382 : iconst_m1 383 : if_icmpne 404 386 : iload 10 388 : iconst_m1 389 : ixor 390 : istore 10 392 : iload 9 394 : iload_2 395 : if_icmpgt 404 398 : iload 10 400 : iconst_1 401 : iadd 402 : istore 10 404 : iconst_0 405 : istore 11 407 : iload 11 409 : iconst_4 410 : if_icmpge 437 413 : aload 7 415 : iload 8 417 : iinc 8 , 1 420 : iload 10 422 : i2b 423 : bastore 424 : iload 10 426 : bipush 8 428 : iushr 429 : istore 10 431 : iinc 11 , 1 434 : goto 407 437 : iinc 9 , 1 440 : goto 357 443 : iconst_0 444 : istore 9 446 : iload 9 448 : iload 5 450 : if_icmpgt 474 453 : aload 7 455 : iload 8 457 : iinc 8 , 1 460 : iload_3 461 : i2b 462 : bastore 463 : iload_3 464 : bipush 8 466 : iushr 467 : istore_3 468 : iinc 9 , 1 471 : goto 446 474 : iload 6 476 : ifeq 488 479 : aload 7 481 : aload 7 483 : arraylength 484 : iconst_1 485 : isub 486 : iload_1 487 : bastore 488 : aload 7 490 : areturn"
"LayoutInflater li = LayoutInflater.from ( context ) ; View passView = li.inflate ( R.layout.authdialog , null ) ; AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder ( context ) ; // set prompts.xml to alertdialog builderalertDialogBuilder.setView ( passView ) ; final EditText passInput = ( EditText ) passView.findViewById ( R.id.editTextDialogUserInput ) ; final TextView txtv = ( TextView ) findViewById ( R.id.textv ) ; // set dialog messagealertDialogBuilder .setCancelable ( false ) .setPositiveButton ( `` OK '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { String data = `` '' ; try { FileInputStream fis = openFileInput ( `` authfile '' ) ; InputStreamReader in = new InputStreamReader ( fis ) ; BufferedReader br = new BufferedReader ( in ) ; data = br.readLine ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } if ( data.toString ( ) .equals ( passInput.getText ( ) .toString ( ) ) ) { txtv.setText ( `` You Have Logged in '' ) ; } else { LayoutInflater ln = LayoutInflater.from ( context ) ; View invalidView = ln.inflate ( R.layout.invdialog , null ) ; AlertDialog.Builder invalidDialogBuild = new AlertDialog.Builder ( context ) ; invalidDialogBuild.setView ( invalidView ) ; // set dialog message invalidDialogBuild .setCancelable ( false ) .setPositiveButton ( `` Retry '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { dialog.cancel ( ) ; } } ) .setNegativeButton ( `` Reset '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { dialog.cancel ( ) ; } } ) ; dialog.cancel ( ) ; AlertDialog invalidDialog = invalidDialogBuild .create ( ) ; // show it invalidDialog.show ( ) ; } } } ) .setNegativeButton ( `` Cancel '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { dialog.cancel ( ) ; } } ) ; // create alert dialogAlertDialog alertDialog = alertDialogBuilder.create ( ) ; // show italertDialog.show ( ) ;"
public abstract class Outer < T > { protected Outer ( Inner < ? > inner ) { // ... } public static abstract class Inner < U extends Outer > { // ... } }
"public class Main { public static void main ( String [ ] args ) { Item item1 = new Item ( ) ; item1.setName ( `` item1 '' ) ; Item item2 = new Item ( ) ; item2.setName ( `` item2 '' ) ; item2.setMoveToLast ( true ) ; Item item3 = new Item ( ) ; item3.setName ( `` item3 '' ) ; Item item4 = new Item ( ) ; item4.setName ( `` item4 '' ) ; List < Item > items = new ArrayList < > ( Arrays.asList ( item1 , item2 , item3 , item4 ) ) ; System.out.println ( `` Before moving ... '' ) ; items.forEach ( System.out : :println ) ; // only item2 has flag set to true thus only item2 will be sent to end of list . move ( items ) ; System.out.println ( `` After moving ... '' ) ; items.forEach ( System.out : :println ) ; } private static void move ( List < Item > items ) { for ( int i = 0 ; i < items.size ( ) ; i++ ) { Item item = items.get ( i ) ; if ( item.isMoveToLast ( ) ) { items.remove ( item ) ; items.add ( item ) ; } } } } @ Getter @ Setterclass Item { private int order ; private String name ; private boolean isMoveToLast ; @ Override public String toString ( ) { return `` Item { `` + `` name= ' '' + name + '\ '' + `` , isMoveToLast= '' + isMoveToLast + ' } ' ; } }"
"Map < Long , Map < String , String > > mapOfMaps List < List < String > > listOflists"
"int primitivI [ ] = { 1,1,1 } ; Integer wrapperI [ ] = { 2,22,2 } ; 1 . System.out.println ( primitivI instanceof Object ) ; //true2 . System.out.println ( primitivI instanceof Object [ ] ) ; //Compilation Error Why ? ? ? ? 3 . System.out.println ( wrapperI instanceof Object ) ; //true4 . System.out.println ( wrapperI instanceof Object [ ] ) ; //true"
"SCENARIO : SampleTestMETA-DATA : { `` description '' : '' Sample Test Scenario '' , '' groups '' : [ `` SMOKE '' ] , '' author '' : [ `` x '' ] } # TODO : call test stepsEND"
"@ PUT @ Path ( `` upload/ { id } '' ) @ Consumes ( MediaType.MULTIPART_FORM_DATA ) public void addBlob ( @ PathParam ( `` id '' ) Integer id , @ FormDataParam ( `` file '' ) InputStream uploadedInputStream ) throws IOException { TheTempClient entityToMerge = find ( id ) ; try { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; int read = 0 ; byte [ ] bytes = new byte [ 1024 ] ; while ( ( read = uploadedInputStream.read ( bytes ) ) ! = -1 ) { out.write ( bytes , 0 , read ) ; } entityToMerge.setTestBlob ( out.toByteArray ( ) ) ; super.edit ( entityToMerge ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } Severe : WebModule [ /MavenProjectTest ] StandardWrapper.Throwableorg.glassfish.jersey.server.model.ModelValidationException : Validation of the application resource model has failed during application initialization ."
public class B { public static void main ( String [ ] args ) { } } public class A { }
"static void add ( short num1 , short num2 ) { System.out.println ( `` add ( short , short ) '' ) ; } static void add ( byte num1 , long num2 ) { System.out.println ( `` add ( byte , long ) '' ) ; } public static void main ( String [ ] args ) { byte num1 = 10 ; byte num2 = 10 ; add ( num1 , num2 ) ; }"
"public class TestListGen { public static final int TEST = 100_000_000 ; public static void main ( String [ ] args ) { test ( false ) ; } private static void test ( boolean withInitCapacity ) { System.out.println ( `` Init with capacity ? `` + withInitCapacity ) ; for ( int i = 0 ; i < 5 ; i++ ) av += fillAndTest ( TEST , withInitCapacity ? new ArrayList < Integer > ( TEST ) : new ArrayList < Integer > ( ) ) ; System.out.println ( `` Average : `` + ( av / 5 ) ) ; } private static long fillAndTest ( int capacity , List < Integer > list ) { long time1 = System.nanoTime ( ) ; for ( int i = 0 ; i < capacity ; i++ ) list.add ( i ) ; long delta = System.nanoTime ( ) - time1 ; System.out.println ( delta ) ; return delta ; } } Init with capacity ? false175718824691217986832718460127904589488320213223941250Average : 13466140630 Init with capacity ? true37271627087163415459901997380176948880930082442179779Average : 16183449526"
public class Test { public static < T > T handle ( T val ) { System.out.println ( `` T '' ) ; return val ; } public static < T extends String > T handle ( T val ) { System.out.println ( `` T extends String '' ) ; return val ; } }
public class Program { public static void main ( String [ ] args ) { System.out.println ( `` Hello '' ) ; } }
"public static String uuid ( ) { UUID uuid = UUID.randomUUID ( ) ; long hi = uuid.getMostSignificantBits ( ) ; long lo = uuid.getLeastSignificantBits ( ) ; byte [ ] bytes = ByteBuffer.allocate ( 16 ) .putLong ( hi ) .putLong ( lo ) .array ( ) ; BigInteger big = new BigInteger ( bytes ) ; String numericUuid = big.toString ( ) .replace ( '- ' , ' 1 ' ) ; // just in case //System.out.println ( numericUuid ) ; return ( numericUuid ) ; }"
"public class Main { public static void main ( String [ ] args ) { int [ ] numbers = { 2 , 3 , 1 , 4 } ; int holder = 0 ; for ( int i = 0 ; i < numbers.length ; i++ ) { for ( int j = 1 ; j < numbers.length ; j++ ) { if ( numbers [ i ] < numbers [ j ] ) { holder = numbers [ i ] ; numbers [ i ] = numbers [ j ] ; numbers [ j ] = holder ; } } } // prints array for ( int i = 0 ; i < numbers.length ; i++ ) { System.out.println ( numbers [ i ] ) ; } } } 4123"
String alphabet= '' ABCD '' ; Random r = new Random ( ) ; for ( int i = 0 ; i < 500000 ; i++ ) { this.setCode ( ( this.getCode ( ) == null ? `` '' : this.getCode ( ) ) alphabet.charAt ( r.nextInt ( alphabet.length ( ) ) ) ) ; }
"@ Getter @ Setter @ AllArgsConstructor @ NoArgsConstructor @ Entity @ Table ( name = `` simple_entity '' ) public class SimpleEntity { @ Id private Long id ; @ Column ( name = `` text '' ) private String text ; } @ Getter @ Setter @ AllArgsConstructorpublic class Pair < First , Second > { private First first ; private Second second ; } @ Repositorypublic interface SimpleEntityRepository extends JpaRepository < SimpleEntity , Long > { @ Query ( `` SELECT new com.example.demo.Pair ( m , false ) FROM SimpleEntity m '' ) List < Pair < SimpleEntity , Boolean > > getRecords ( ) ; }"
public class Window extends JFrame { public Window ( ) { // Do things . } public void show ( ) { // < - Comes up with a warning as deprecated code . // Do other things . } }
"source.stream ( ) // some operations .ifAny ( food - > ! food.isEdible ( ) , new LinkedList < Food > ( ) ) // other operations if previous step not failed .peek ( food - > food.prepare ( ) ) .collect ( Collectors.toList ( ) ) ;"
"public class StratBand { private static volatile ImmutableList < StratBand > stratBands = importFromDb ( ) ; private final int minRange ; private final int maxRange ; private static ImmutableList < StratBand > importFromDb ( ) { //construct list from database here } //constructors , methods , etc } public class StratBand { private static volatile ImmutableList < StratBand > stratBands = importFromDb ( ) ; private static final boolean subscribed = subscribe ( ) ; private final int minRange ; private final int maxRange ; private static ImmutableList < StratBand > importFromDb ( ) { //construct list from database here } //constructors , methods , etc private static boolean subscribe ( ) { MyEventBus.get ( ) .register ( new Object ( ) { @ Subscribe public void refresh ( ParameterRefreshEvent e ) { stratBands = importFromDb ( ) ; } } ) ; return true ; } } public class StratBand { private static volatile ImmutableList < StratBand > stratBands = importFromDb ( ) ; static { MyEventBus.get ( ) .register ( new Object ( ) { @ Subscribe public void refresh ( ParameterRefreshEvent e ) { stratBands = importFromDb ( ) ; } } ) ; } private final int minRange ; private final int maxRange ; private static ImmutableList < StratBand > importFromDb ( ) { //construct list from database here } //constructors , methods , etc }"
( ) - > { } public class A { static void a ( ) { } static void main ( String [ ] args ) { ? ? ? ? a = A : :a } }
"// somewhere in the codeJSObject window = ( JSObject ) engine.executeScript ( `` window '' ) ; window.setMember ( `` foo '' , new Foo ( ) ) ; // < -- shareswindow.call ( `` testFoo '' ) ; // < -- uses// somewhere elseclass Foo { public void bar ( ) { System.out.println ( `` baz '' ) ; } } window.testFoo = function ( ) { window.foo.bar ( ) ; }"
Integer foo = // null or some valueInteger bar = // null or some valueInteger baz = // null or some valueboolean atLeastOnePositive = ( foo ! = null & & foo > 0 ) || ( bar ! = null & & bar > 0 ) || ( baz ! = null & & baz > 0 ) return atLeastOnePositive ;
"application.Role1.readapplication.Role1.writeapplication.Role2.readapplication.Role3.read import com.fasterxml.jackson.annotation.JsonInclude ; @ JsonInclude ( JsonInclude.Include.NON_NULL ) public class RolePermission { private String roleName ; private boolean readAllowed ; private boolean writeAllowed ; public String getRoleName ( ) { return roleName ; } public RolePermission setRoleName ( String roleName ) { this.roleName = roleName ; return this ; } public boolean isReadAllowed ( ) { return readAllowed ; } public RolePermission setReadAllowed ( boolean readAllowed ) { this.readAllowed = readAllowed ; return this ; } public boolean isWriteAllowed ( ) { return writeAllowed ; } public RolePermission setWriteAllowed ( boolean writeAllowed ) { this.writeAllowed = writeAllowed ; return this ; } } public static final String ROLE_PREFIX = `` application . `` ; public static final String ROLE_READ_PERMISSION = `` read '' ; public static final String ROLE_WRITE_PERMISSION = `` write '' ; @ Overridepublic List < RolePermission > getRoles ( Backend backend ) { List < String > allRoles = backend.getRoles ( ) .stream ( ) .map ( s - > s.replace ( ROLE_PREFIX , `` '' ) ) .sorted ( ) .collect ( Collectors.toList ( ) ) ; Map < String , RolePermission > roleMap = new HashMap < > ( ) ; for ( String role : allRoles ) { String [ ] tokens = role.split ( `` . `` ) ; String roleName = tokens [ 0 ] ; String permission = tokens [ 1 ] ; if ( ! roleMap.containsKey ( roleName ) ) roleMap.put ( roleName , new RolePermission ( ) .setRoleName ( roleName ) ) ; RolePermission permission = roleMap.get ( roleName ) ; if ( ROLE_READ_PERMISSION.equals ( permission ) ) permission.setReadAllowed ( true ) ; if ( ROLE_WRITE_PERMISSION.equals ( permission ) ) permission.setWriteAllowed ( true ) ; } return new LinkedList < > ( roleMap.values ( ) ) ; } public class Backend { public List < String > getRoles ( ) { return Arrays.asList ( `` application.Role1.read '' , `` application.Role1.write '' , `` application.Role2.read '' , `` application.Role3.read '' ) ; } }"
new Object ( ) { void hi ( String in ) { System.out.println ( in ) ; } } .hi ( `` strange '' ) ;
public class Stack < Item > implements Iterable < Item > { private class Node { Item item ; Node next ; } private Node first= null ; public Iterator < Item > iterator ( ) { return new StackIterator ( ) ; } private class StackIterator < Item > implements Iterator < Item > { private Node current = first ; public Item next ( ) { Item item = ( Item ) current.item ; current = current.next ; return item ; } } }
"static class A { } static class B extends A { } static class C extends B { } static class D extends C { } static < T > void copy ( List < ? super T > dst , List < ? extends T > src ) { for ( T t : src ) dst.add ( t ) ; } public static void main ( String [ ] args ) { List < A > dst = new ArrayList < > ( ) ; List < D > src = new ArrayList < > ( ) ; copy ( dst , src ) ; // Eclipse shows T is D }"
"for ( java.util.Map.Entry < Foo , Double > entry : foos.entrySet ( ) ) { foos.put ( entry.getKey ( ) , entry.getValue ( ) + amount ) ; }"
"public class Entity < T > { @ SuppressWarnings ( `` unchecked '' ) public < TX > Entity < TX > typed ( Class < TX > type ) { return ( Entity < TX > ) this ; } @ SuppressWarnings ( `` unchecked '' ) public static < TX > Entity < TX > typed ( Entity < ? > entity , Class < TX > type ) { return ( Entity < TX > ) entity ; } public static void main ( final String [ ] args ) { final Entity < ? > a = new Entity < Integer > ( ) ; final Entity b = ( Entity ) a ; final Entity < Integer > x = a.typed ( Integer.class ) ; final Entity < Integer > y = b.typed ( Integer.class ) ; final Entity < Integer > z = typed ( b , Integer.class ) ; } }"
private JButton myButton ; public MyCustomFrame ( ) { super ( ) ; myButton.addActionListener ( this ) ; // ... more stuff }
/** * Description of my method * < p > * < b > Example : < /b > * < /p > * < pre > * { @ code * /** * * Sample Javadoc * * & # 47 ; * public final void testMyMethod ( ) * & # 123 ; * // some logic * & # 125 ; } * < /pre > * @ return Description of my return value . */
import java.util.Scanner ; public class prog3 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System.in ) ; int size = input.nextInt ( ) ; String arr [ ] = new String [ size ] ; for ( int i=0 ; i < size ; i++ ) { arr [ i ] = input.nextLine ( ) ; } System.out.print ( arr [ 0 ] ) ; } }
"public void isSymmetricNow ( int [ ] [ ] matrix ) { for ( int i = 0 ; i < matrix.length ; i++ ) { for ( int j = 0 ; j < matrix.length ; j++ ) { if ( matrix [ i ] [ j ] ! = matrix [ j ] [ i ] ) { System.out.print ( `` matrix is not symmetric \n '' ) ; } } } System.out.print ( `` matrix is symmetric \n '' ) ; } matrix is not symmetric matrix is not symmetric matrix is symmetric int matrix3 [ ] [ ] = { { 1,4,7 } , { -4,6,6 } , { 7,6,9 } } ;"
/** * Method to check the horizontal winning possibilities for red * @ return true if red won or false if not */public boolean checkHorRed ( ) { for ( int line = 0 ; line < 6 ; line++ ) { for ( int column = 0 ; column < 4 ; column++ ) { //column++ is underlined and causes the `` dead Code '' warning if ( gw.buttons [ line ] [ column ] .getIcon ( ) .equals ( gw.red ) ) ; if ( gw.buttons [ line ] [ column+1 ] .getIcon ( ) .equals ( gw.red ) ) ; if ( gw.buttons [ line ] [ column+2 ] .getIcon ( ) .equals ( gw.red ) ) ; if ( gw.buttons [ line ] [ column+3 ] .getIcon ( ) .equals ( gw.red ) ) ; return true ; } } return false ; } /** * Method to check the vertical winning possibilities for yellow * @ return true or false */public boolean checkVertYel ( ) { for ( int line = 3 ; line < 6 ; line++ ) { for ( int column = 0 ; column < 7 ; column++ ) { if ( gw.buttons [ line ] [ column ] .getIcon ( ) .equals ( gw.yellow ) ) if ( gw.buttons [ line-1 ] [ column ] .getIcon ( ) .equals ( gw.yellow ) ) if ( gw.buttons [ line-2 ] [ column ] .getIcon ( ) .equals ( gw.yellow ) ) if ( gw.buttons [ line-3 ] [ column ] .getIcon ( ) .equals ( gw.yellow ) ) return true ; } } return false ; }
"assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( banana ) == 3 ) ; import static org.junit.Assert . * ; import org.junit.After ; import org.junit.Before ; import org.junit.Test ; /** * The test class GiftSelectorTest . The GiftSelector that you are * testing must have testMode enabled for this class to function . * This is done in the setUp ( ) method . */public class GiftSelectorTest { private GiftList giftList1 ; private GiftList giftList2 ; private GiftList giftList3 ; private Child jack ; private Child bob ; private Child dave ; private Child naughty1 ; private GiftSelector santasSelector ; private Present banana1 ; private Present orange ; private Present banana ; private Present apple ; private Present bike ; private Present doll ; private Present got ; private Present pearlHarbour ; private Present dog ; private Present cat ; private Present ball ; private Present heineken ; /** * Default constructor for test class GiftSelectorTest */ public GiftSelectorTest ( ) { //Nothing to do here ... } /** * Sets up the test fixture . * * Called before every test case method . */ @ Before public void setUp ( ) { santasSelector = new GiftSelector ( ) ; santasSelector.setTestMode ( true ) ; jack = new Child ( `` Jack '' , 20 , `` 1 A Place '' , true , true , true , false ) ; bob = new Child ( `` Bob '' , 10 , `` 2 A Place '' , true , true , true , true ) ; dave = new Child ( `` Dave '' , 10 , `` 3 A Place '' , true , true , true , true ) ; naughty1 = new Child ( `` John '' , 5 , `` 4 A Place '' , true , true , true , true ) ; giftList1 = new GiftList ( jack ) ; giftList2 = new GiftList ( bob ) ; giftList3 = new GiftList ( dave ) ; banana = new Present ( `` banana '' , `` fruit '' , 10 ) ; orange = new Present ( `` orange '' , `` fruit '' , 10 ) ; banana1 = new Present ( `` banana '' , `` fruit '' , 10 ) ; apple = new Present ( `` apple '' , `` fruit '' , 10 ) ; bike = new Present ( `` bike '' , `` toy '' , 200 ) ; doll = new Present ( `` doll '' , `` toy '' , 40 ) ; got = new Present ( `` game of thrones '' , `` dvd '' , 50 ) ; pearlHarbour = new Present ( `` pearl harbour '' , `` dvd '' , 20 ) ; dog = new Present ( `` dog '' , `` animal '' , 100 ) ; cat = new Present ( `` cat '' , `` animal '' , 80 ) ; ball = new Present ( `` ball '' , `` toy '' , 5 ) ; heineken = new Present ( `` heineken '' , `` beer '' , 1.60 ) ; } /** * Tears down the test fixture . * * Called after every test case method . */ @ After public void tearDown ( ) { //Nothing to do here ... } @ Test public void testGetCountForAllPresents ( ) { System.out.println ( santasSelector.getCountsForAllPresents ( ) ) ; //Test on empty GiftSelector assertNull ( santasSelector.getCountsForAllPresents ( ) ) ; //Test on a GiftSelector with one giftlist containing one present giftList1.addPresent ( banana ) ; santasSelector.addGiftList ( giftList1 ) ; System.out.println ( santasSelector.getCountsForAllPresents ( ) ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( banana ) == 1 ) ; //Test when GiftSelector contains 2 giftlists , each containing the same present object giftList2.addPresent ( banana ) ; santasSelector.addGiftList ( giftList2 ) ; System.out.println ( santasSelector.getCountsForAllPresents ( ) ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( banana ) == 2 ) ; //Test when GiftSelector contains 3 giftlists , 2 containing the same present object and another containing an identical present but with a different present instance giftList3.addPresent ( banana1 ) ; santasSelector.addGiftList ( giftList3 ) ; System.out.println ( santasSelector.getCountsForAllPresents ( ) ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( banana ) == 3 ) ; //This is the line I get the NPE //Test when GiftSelector contains 3 giftLists , the first with one with a banana , the second with a banana and apple , and the third with a banana1 and ball giftList2.addPresent ( apple ) ; giftList3.addPresent ( ball ) ; System.out.println ( santasSelector.getCountsForAllPresents ( ) ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( banana ) == 3 ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( apple ) == 1 ) ; assertEquals ( true , santasSelector.getCountsForAllPresents ( ) .get ( ball ) == 1 ) ; } @ Test public void testGetMostPopularPresent ( ) { //Test on empty GiftSelector assertNull ( santasSelector.getMostPopularPresent ( ) ) ; //Test on a GiftSelector with one giftList and one Present giftList1.addPresent ( heineken ) ; santasSelector.addGiftList ( giftList1 ) ; assertEquals ( true , santasSelector.getMostPopularPresent ( ) .comparePresent ( heineken ) ) ; //Tset on a GiftSelector with 1 giftList and 2 presents , one more expensive than the other giftList1.addPresent ( banana ) ; assertEquals ( true , santasSelector.getMostPopularPresent ( ) .comparePresent ( banana ) ) ; //Test on a GiftSelector with 1 giftList and 3 presents . Banana and Apple are equal in price , and are both in the top3 , //therefore it should return the present closest to the start of the list giftList1.addPresent ( apple ) ; assertEquals ( true , santasSelector.getMostPopularPresent ( ) .comparePresent ( banana ) || santasSelector.getMostPopularPresent ( ) .comparePresent ( apple ) ) ; //Test on a GiftSelector with 2 giftLists , the second list containing banana1 , an indentical present to banana giftList2.addPresent ( banana1 ) ; santasSelector.addGiftList ( giftList2 ) ; assertEquals ( true , santasSelector.getMostPopularPresent ( ) .comparePresent ( banana ) ) ; //Test on a GiftSelector with 2 giftLists , the first containing four presents and the second containing 2 presents . //This tests to see if top3 is working . giftList1.addPresent ( bike ) ; giftList2.addPresent ( bike ) ; assertEquals ( true , santasSelector.getMostPopularPresent ( ) .comparePresent ( bike ) ) ; } } /** * For each present , calculate the total number of children who have asked for that present . * * @ return - a Map where Present objects are the keys and Integers ( number of children requesting * a particular present ) are the values . Returns null if santaMap is empty . */public HashMap < Present , Integer > getCountsForAllPresents ( ) { if ( ! santaMap.isEmpty ( ) ) { //This HashMap contains a mapping from each unique real world present , represented by it 's toComparisonString ( ) , to a Present object representing it HashMap < String , Present > uniquePresents = new HashMap < String , Present > ( ) ; //This HashMap contains a mapping from each Present object in uniquePresents to the number of times it 's toComparisonString ( ) is equal to another in santaMap HashMap < Present , Integer > presentFrequency = new HashMap < Present , Integer > ( ) ; for ( GiftList wishlist : santaMap.values ( ) ) { for ( Present present : wishlist.getAllPresents ( ) ) { //Have we already seen this present ? if ( uniquePresents.containsKey ( present.toComparisonString ( ) ) ) { //If so , update the count in presentFrequency Integer tmp = presentFrequency.get ( uniquePresents.get ( present.toComparisonString ( ) ) ) ; tmp++ ; presentFrequency.put ( uniquePresents.get ( present.toComparisonString ( ) ) , tmp ) ; } else { //If not , add it to the maps uniquePresents and presentFrequency ( with a frequency of 1 ) uniquePresents.put ( present.toComparisonString ( ) , present ) ; presentFrequency.put ( present , 1 ) ; } } } //Return a map with unique presents as keys and their frequencies as values return presentFrequency ; } else { //If there are no mappings in Santa 's map , return null return null ; } }"
"ArrayList < String > allProd = new ArrayList < String > ; ArrayList < String > allProd_sort = new ArrayList < String > ; allProd = [ the table is brown , the cat is red , the dog is white ] ; String [ ] allProdString = allProd.toArray ( new String [ allProd.size ( ) ] ) ; ... //inputSearch is the EditText inputSearch.addTextChangeListener ( new TextWatcher ( ) { ... @ Override public void onTextChanged ( CharSequence charSequence , int i , int i2 , int i3 ) { int textLength = inputSearch.getText ( ) .length ( ) ; String text = inputSearch.getText ( ) .toString ( ) ; for ( int y = 0 ; y < allProdString.length ; y++ ) { //in my case i want that the search start when there are min 3 characters in inputSearch if ( textLength < = allProdString [ y ] .length ( ) & & textLength > =3 ) { if ( Pattern.compile ( Pattern.quote ( text ) , Pattern.CASE_INSENSITIVE ) .matcher ( allProdString [ y ] ) .find ( ) ) { allProd_sort.add ( allProdString [ y ] ) ; } } } } } ) ;"
"public static enum Types { A , B , C } Class < Enum > e = Types.class ; found : java.lang.Class < id.Types > required : java.lang.Class < java.lang.Enum > Class < Enum > e = Types.class ;"
public class Item { private Item prev ; private Item next ; ... }
"interface A < T > { } interface X extends A < String > { } interface Y extends A < Object > { } interface Z extends X , Y { } // COMPILE ERROR interface X < T > extends A < String > { } interface Y < T > extends A < Object > { } interface Z extends X , Y { } // OK according to javac , ERROR according to IntelliJ"
new TemplateProcessor ( inputStream ) .processTemplate ( `` output-path.xhtml '' ) ;
"public class Test { public static void main ( String [ ] args ) { BigDecimal hoursInADay = new BigDecimal ( `` 24 '' ) ; BigDecimal fraction = BigDecimal.ONE.divide ( hoursInADay , 3 , RoundingMode.HALF_UP ) ; BigDecimal count = BigDecimal.ZERO ; for ( int i = 1 ; i < = 24 ; i++ ) { count = count.add ( fraction ) ; } if ( BigDecimal.ONE.equals ( count ) ) { // accuracy level 100 % } } }"
"public class Data { String parametr1 ; //geters and setters ommited } public interface GitHubService { @ GET ( `` /repos/ { owner } / { repo } '' ) Call < Data > repoInfos ( @ Path ( `` user '' ) String owner , @ Path ( `` repo '' ) String repo ) ; Retrofit retrofit = new Retrofit.Builder ( ) .baseUrl ( `` https : //api.github.com/ '' ) .build ( ) ; } @ Servicepublic class GitHubServiceImpl implements GitHubService { final GitHubService gitHubService = GitHubService.retrofit.create ( GitHubService.class ) ; @ Override public Call < DetailDto > repoDetails ( String owner , String repo ) { return gitHubService.repoDetails ( owner , repo ) ; } } java.lang.IllegalArgumentException : Could not locate ResponseBody converter for class model.Data ."
"class MyViewPager extend android.support.v4.view.ViewPager { public ViewPager ( Context context ) { super ( context ) ; } public ViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; } } import android.support.v4.view.ViewPagertrait ViewPagerTrait extends ViewPager { // ... implement ViewPager non-constructor functions here ... } object MyViewPager { def apply ( context : Context ) = new ViewPager ( context ) with ViewPagerTrait def apply ( context : Context , attrs : AttributeSet ) = new ViewPager ( context , attrs ) with ViewPagerTrait }"
String string_final = `` '' ; String [ ] ultimate_array = new String [ 100 ] ; String sNrFact = `` '' ; string_final= '' Nrfact # $ idfact1 # $ valfact1 # $ idfact2 # $ valfact2 # $ idfact3 # $ valfact3 # $ idfact4 # $ valfact4 # $ idfact5 # $ valfact5 # $ idfact6 # $ valfact6 # $ idfact7 # $ valfact7 # $ idfact8 # $ valfact8 # $ idfact9 # $ valfact9 # $ idfact10 # $ valfact10 '' ; ultimate_array = string_final.split ( `` # $ '' ) ; sNrFact = ultimate_array [ 0 ] ;
"Map < RiskFactor , RiskFactorChannelData > updateMap = updates.stream ( ) .filter ( this : :updatedValueIsNotNull ) . // Remove null updated values collect ( Collectors.toMap ( u - > u.getUpdatedValue ( ) .getKey ( ) , // then merge into a map of key- > value . Update : :getUpdatedValue , ( a , b ) - > b ) ) ; // If two values have the same key then take the second value a1 , b1 , a2 a- > a2b- > b1 a- > a1b- > b1"
public interface Bar < T extends Foo < ? > > { // ... } public class MyFoo implements Foo < String > { private List < Bar < Foo < String > > barFoo = ... public < U extends Foo < String > > boolean addBar ( Bar < ? extends U > b ) { barFoo.add ( ( Bar < Foo < String > > ) b ) ; //safe cast ? } }
//code 1Object o1 [ ] = new Class [ ] { iface } ; //code 2Object o2 [ ] = new Class < ? > [ ] { iface } ;
"import java.util . * ; import java.util.stream.Collectors ; import java.util.stream.Stream ; public class Example { public static void main ( String [ ] args ) { SomeObject obj1 = new SomeObject ( 1 ) ; SomeObject obj2 = new SomeObject ( 2 ) ; SomeObject obj3 = new SomeObject ( 3 ) ; Set < SomeObject > set = Stream.of ( obj1 , obj2 , obj3 ) .collect ( Collectors.toSet ( ) ) ; SomeObject minObject= set.stream ( ) .min ( Comparator.comparingInt ( object- > object.getValue ( ) ) ) .get ( ) ; System.out.println ( minObject ) ; } } class SomeObject { private int value ; SomeObject ( int value ) { this.value=value ; } public int getValue ( ) { return value ; } @ Override public String toString ( ) { return this.value+ '' '' ; } }"
import java.util.List ; import java.util.ArrayList ; public class Sample { List < InnerSample > iSamples ; public Sample ( ) { iSamples = new ArrayList < InnerSample > ( ) ; iSamples.add ( new InnerSample ( `` foo '' ) ) ; iSamples.add ( new InnerSample ( `` bar '' ) ) ; } public static void main ( String [ ] args ) { System.out.println ( `` Testing ... '' ) ; Sample s = new Sample ( ) ; for ( InnerSample i : s.iSamples ) { System.out.println ( i.str ) ; } } public class InnerSample { String str ; public InnerSample ( String str ) { this.str = str ; } } }
public class Something < T extends Comparable < T > > { // } public class Something < T extends Comparable > { // }
"< TextView android : id= '' @ +id/speedtext '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_marginTop= '' 180dp '' android : gravity= '' center '' android : singleLine= '' true '' android : text= '' TEXT '' android : textColor= '' @ android : color/white '' android : textSize= '' 220sp '' / > public class Einstellungen extends AppCompatActivity { String [ ] names = { `` Weiß '' , `` Blau '' , `` Rot '' } ; String [ ] des = { `` Weiß '' , `` Blau '' , `` Rot '' } ; ArrayAdapter < String > adapter ; Spinner spinner ; TextView description ; public Button button ; public void init ( ) { button = ( Button ) findViewById ( R.id.button ) ; button.setOnClickListener ( new View.OnClickListener ( ) { public void onClick ( View v ) { Intent toy = new Intent ( Einstellungen.this , MainActivity.class ) ; startActivity ( toy ) ; } } ) ; } protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_einstellungen ) ; spinner = ( Spinner ) findViewById ( R.id.spinner ) ; description = ( TextView ) findViewById ( R.id.text ) ; adapter = new ArrayAdapter < String > ( getApplicationContext ( ) , android.R.layout.simple_list_item_1 , names ) ; spinner.setAdapter ( adapter ) ; spinner.setOnItemSelectedListener ( new AdapterView.OnItemSelectedListener ( ) { public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { switch ( i ) { case 0 : description.setText ( `` '' + des [ i ] ) ; MainActivity.speed.setTextColor ( Color.WHITE ) ; break ; case 1 : description.setText ( `` '' + des [ i ] ) ; MainActivity.speed.setTextColor ( Color.BLUE ) ; break ; case 2 : description.setText ( `` '' + des [ i ] ) ; MainActivity.speed.setTextColor ( Color.RED ) ; break ; } } public void onNothingSelected ( AdapterView < ? > adapterView ) { } } ) ; init ( ) ; } } public class MainActivity extends AppCompatActivity { LocationService myService ; static boolean status ; LocationManager locationManager ; static TextView dist , time , speed ; static long startTime , endTime ; ImageView image ; static ProgressDialog locate ; static int p = 0 ; private ServiceConnection sc = new ServiceConnection ( ) { public void onServiceConnected ( ComponentName name , IBinder service ) { LocationService.LocalBinder binder = ( LocationService.LocalBinder ) service ; myService = binder.getService ( ) ; status = true ; } public void onServiceDisconnected ( ComponentName name ) { status = false ; } } ; public Button button ; public void init ( ) { button = ( Button ) findViewById ( R.id.button ) ; button.setOnClickListener ( new View.OnClickListener ( ) { public void onClick ( View v ) { Intent toy = new Intent ( MainActivity.this , Einstellungen.class ) ; startActivity ( toy ) ; } } ) ; } void bindService ( ) { if ( status == true ) return ; Intent i = new Intent ( getApplicationContext ( ) , LocationService.class ) ; bindService ( i , sc , BIND_AUTO_CREATE ) ; status = true ; startTime = System.currentTimeMillis ( ) ; } void unbindService ( ) { if ( status == false ) return ; Intent i = new Intent ( getApplicationContext ( ) , LocationService.class ) ; unbindService ( sc ) ; status = false ; } protected void onResume ( ) { super.onResume ( ) ; } protected void onStart ( ) { super.onStart ( ) ; } protected void onDestroy ( ) { super.onDestroy ( ) ; if ( status == true ) unbindService ( ) ; } public void onBackPressed ( ) { if ( status == false ) super.onBackPressed ( ) ; else moveTaskToBack ( true ) ; } protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; speed = ( TextView ) findViewById ( R.id.speedtext ) ; image = ( ImageView ) findViewById ( R.id.image ) ; start ( ) ; init ( ) ; } public void start ( ) { checkGps ( ) ; locationManager = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ; if ( ! locationManager.isProviderEnabled ( LocationManager.GPS_PROVIDER ) ) { return ; } if ( status == false ) bindService ( ) ; locate = new ProgressDialog ( MainActivity.this ) ; locate.setIndeterminate ( true ) ; locate.setCancelable ( false ) ; locate.setMessage ( `` Suche GPS-Signal '' ) ; locate.show ( ) ; } void checkGps ( ) { locationManager = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ; if ( ! locationManager.isProviderEnabled ( LocationManager.GPS_PROVIDER ) ) { showGPSDisabledAlertToUser ( ) ; } } private void showGPSDisabledAlertToUser ( ) { AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder ( this ) ; alertDialogBuilder.setMessage ( `` Bitte GPS aktivieren '' ) .setCancelable ( false ) .setPositiveButton ( `` GPS aktivieren '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { Intent callGPSSettingIntent = new Intent ( android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS ) ; startActivity ( callGPSSettingIntent ) ; } } ) ; alertDialogBuilder.setNegativeButton ( `` Abbrechen '' , new DialogInterface.OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { dialog.cancel ( ) ; } } ) ; AlertDialog alert = alertDialogBuilder.create ( ) ; alert.show ( ) ; } }"
//simplified versionbyte [ ] data = Integer.toString ( myInt ) .getBytes ( US_ASCII ) ; sendPost ( data ) ; Integer.toString ( myInt ) .getBytes ( US_ASCII ) ;
public interface ExampleInterface { } public class Example implements ExampleInterface { private static void main ( String [ ] args ) { // This is not possible ExampleInterface objI = new ExampleInterface ( ) ; // However this is ExampleInterface [ ] arrI = new ExampleInterface [ 10 ] ; } }
"WebService Code : public boolean authenicateUser ( @ WebParam ( name= '' username '' ) String username , @ WebParam ( name= '' password '' ) String password ) { System.out.println ( `` Inside Authenticae USER+========== '' +name+ '' -- -- - '' +Password ) ; //This becomes null and null final String LOGIN_SQL= '' SELECT * FROM UserDetails WHERE UserName= ? and Password= ? `` ; Android Server Request : private static String NAMESPACE = `` http : //src.AndroidExample.Nagesh.com/ '' ; private static String URL = `` http : //192.168.56.1:8080/AndroidLoginWS/LoginWebService ? wsdl '' ; private static String SOAP_ACTION = `` http : //src.AndroidExample.Nagesh.com/ '' ; Systerequest=new SoapObject ( NAMESPACE , WebMethodName ) ; System.out.println ( `` Values before calling WS '' +user.UserName+ '' -- -- -- '' +user.Password ) ; request.addProperty ( `` username '' , user.UserName ) ; request.addProperty ( `` password '' , user.Password ) ; return request ; SoapSerializationEnvelope envelope = new SoapSerializationEnvelope ( SoapEnvelope.VER11 ) ; envelope.setOutputSoapObject ( request ) ; HttpTransportSE androidHttpTransport = new HttpTransportSE ( URL ) ; androidHttpTransport.call ( SOAP_ACTION + WebMethodName , envelope ) ; System.out.println ( `` INside InvokeLoginWS==========RETURNED ... ... ... ... ... .. '' ) ; SoapPrimitive response = ( SoapPrimitive ) envelope.getResponse ( ) ; loginStatus = Boolean.parseBoolean ( response.toString ( ) ) ; This XML file does not appear to have any style information associated with it . The document tree is shown below. < ! -- Published by JAX-WS RI ( http : //jax-ws.java.net ) . RI 's version is JAX-WS RI 2.2.10 svn-revision # 919b322c92f13ad085a933e8dd6dd35d4947364b . -- > < ! -- Generated by JAX-WS RI ( http : //jax-ws.java.net ) . RI 's version is JAX-WS RI 2.2.10 svn-revision # 919b322c92f13ad085a933e8dd6dd35d4947364b . -- > < definitions xmlns : wsu= '' http : //docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd '' xmlns : wsp= '' http : //www.w3.org/ns/ws-policy '' xmlns : wsp1_2= '' http : //schemas.xmlsoap.org/ws/2004/09/policy '' xmlns : wsam= '' http : //www.w3.org/2007/05/addressing/metadata '' xmlns : soap= '' http : //schemas.xmlsoap.org/wsdl/soap/ '' xmlns : tns= '' http : //src.AndroidExample.Nagesh.com/ '' xmlns : xsd= '' http : //www.w3.org/2001/XMLSchema '' xmlns= '' http : //schemas.xmlsoap.org/wsdl/ '' targetNamespace= '' http : //src.AndroidExample.Nagesh.com/ '' name= '' LoginService '' > < types > < xsd : schema > < xsd : import namespace= '' http : //src.AndroidExample.Nagesh.com/ '' schemaLocation= '' http : //192.168.56.1:8080/AndroidLoginWS/LoginWebService ? xsd=1 '' / > < /xsd : schema > < /types > < message name= '' register '' > < part name= '' parameters '' element= '' tns : register '' / > < /message > < message name= '' registerResponse '' > < part name= '' parameters '' element= '' tns : registerResponse '' / > < /message > < message name= '' authenicateUser '' > < part name= '' parameters '' element= '' tns : authenicateUser '' / > < /message > < message name= '' authenicateUserResponse '' > < part name= '' parameters '' element= '' tns : authenicateUserResponse '' / > < /message > < portType name= '' LoginMethods '' > < operation name= '' register '' > < input wsam : Action= '' http : //src.AndroidExample.Nagesh.com/LoginMethods/registerRequest '' message= '' tns : register '' / > < output wsam : Action= '' http : //src.AndroidExample.Nagesh.com/LoginMethods/registerResponse '' message= '' tns : registerResponse '' / > < /operation > < operation name= '' authenicateUser '' > < input wsam : Action= '' http : //src.AndroidExample.Nagesh.com/LoginMethods/authenicateUserRequest '' message= '' tns : authenicateUser '' / > < output wsam : Action= '' http : //src.AndroidExample.Nagesh.com/LoginMethods/authenicateUserResponse '' message= '' tns : authenicateUserResponse '' / > < /operation > < /portType > < binding name= '' LoginWSPortBinding '' type= '' tns : LoginMethods '' > < soap : binding transport= '' http : //schemas.xmlsoap.org/soap/http '' style= '' document '' / > < operation name= '' register '' > < soap : operation soapAction= '' '' / > < input > < soap : body use= '' literal '' / > < /input > < output > < soap : body use= '' literal '' / > < /output > < /operation > < operation name= '' authenicateUser '' > < soap : operation soapAction= '' '' / > < input > < soap : body use= '' literal '' / > < /input > < output > < soap : body use= '' literal '' / > < /output > < /operation > < /binding > < service name= '' LoginService '' > < port name= '' LoginWSPort '' binding= '' tns : LoginWSPortBinding '' > < soap : address location= '' http : //192.168.56.1:8080/AndroidLoginWS/LoginWebService '' / > < /port > < /service > < /definitions >"
"class A { private Set < String > sOne ; private Set < String > sTwo ; // Constructor , getters and setters }"
for ( int i = 0 ; o.getC ( ) < 10 ; i++ ) o.addC ( i ) ; int i = 0 ; while ( o.getC ( ) < 10 ) { i++ ; o.addC ( i ) ; } int i = 0 ; while ( o.getC ( ) < 10 ) o.addC ( ++i ) ;
public class Foo < N > { public static void main ( String [ ] args ) { Foo < Double > foo = new Foo < Double > ( ) ; Double [ ] d = foo.get ( ) ; // do stuff to d ... foo.set ( d ) ; } N [ ] data ; public Foo ( ) { data = ( N [ ] ) new Object [ 2 ] ; } public N [ ] get ( ) { return ( N [ ] ) data ; } public void set ( N [ ] data ) { this.data = data ; } }
"public static < K , V > HashMap < K , V > newHashMap ( ) { return new HashMap < K , V > ( ) ; } Map < String , List < String > > anagrams = newHashMap ( ) ; Map < String , List < String > > newHashMap ( ) ;"
"private void sendFileAsOctetStream ( File file ) { final RequestEntity < FileSystemResource > request = RequestEntity.post ( URI.create ( `` http : //localhost:8080/file '' ) ) .contentType ( MediaType.APPLICATION_OCTET_STREAM ) .body ( new FileSystemResource ( file ) ) ; restTemplate.exchange ( request , void.class ) ; } private void sendFileAsOctetStream ( File file ) { webClient.post ( ) .uri ( `` /file '' ) .body ( BodyInserters.fromResource ( new FileSystemResource ( file ) ) ) .exchange ( ) .block ( ) ; }"
- Class A : +f ( short x ) : int ; +f ( String x ) : int ; - Class B extends A : +f ( int x ) : int ; +f ( String x ) : int ; - Class C extends A : +f ( double x ) : int ; +f ( byte x ) : int ; - Class D extends C : +f ( byte x ) : int ; +f ( short x ) : int ; - Class E extends C : +f ( char x ) : int ; +f ( int x ) : int ; A a = new D ( ) ; B b = new B ( ) ; C c = new E ( ) ;
"< ! DOCTYPE web-app PUBLIC `` -//Sun Microsystems , Inc.//DTD Web Application 2.3//EN '' `` http : //java.sun.com/dtd/web-app_2_3.dtd '' > < web-app > < display-name > Archetype Created Web Application < /display-name > < /web-app > import javax.jws.WebMethod ; import javax.jws.WebService ; import javax.servlet.http.HttpSession ; import javax.xml.ws.WebServiceContext ; import javax.xml.ws.handler.MessageContext ; @ WebService ( serviceName= '' IberiaWS '' ) public class IberiaWS { @ Resource private WebServiceContext wsContext ; public IberiaWS ( ) { } private UserVO getSessionUserVO ( ) { MessageContext mc = wsContext.getMessageContext ( ) ; HttpSession session = ( ( javax.servlet.http.HttpServletRequest ) mc.get ( MessageContext.SERVLET_REQUEST ) ) .getSession ( ) ; return ( UserVO ) session.getAttribute ( `` uservo '' ) ; } private void setSessionUserVO ( UserVO uservo ) { MessageContext mc = wsContext.getMessageContext ( ) ; HttpSession session = ( ( javax.servlet.http.HttpServletRequest ) mc.get ( MessageContext.SERVLET_REQUEST ) ) .getSession ( ) ; session.setAttribute ( `` uservo '' , uservo ) ; } @ WebMethod public boolean login ( String loginName , String loginPwd ) throws Exception { this.setSessionUserVO ( new UserDAO ( ) .findUser ( `` _ '' +loginName , `` __ '' +loginPwd ) ) ; return isConnected ( ) ; } @ WebMethod public boolean isConnected ( ) { return ( this.getSessionUserVO ( ) ! =null ) ; } @ WebMethod public IberiaPerson getPerson ( String id ) { return new IberiaPerson ( ) ; } @ WebMethod public IberiaPerson findPerson ( String companyNr ) { UserVO uservo = this.getSessionUserVO ( ) ; IberiaPerson ret=null ; PersonVO p= new PersonDAO ( ) .findByCompanyNr ( uservo.getAdminCenterId ( ) , uservo.getUserId ( ) , `` Iberia '' , companyNr ) ; if ( p ! =null ) { ret = new IberiaPerson ( ) ; ret.setPersonId ( p.getPersonId ( ) ) ; ret.setCompanyName ( p.getVehicleOwnerName ( ) ) ; ret.setCategoryName ( p.getCategoryName ( ) ) ; ret.setCompanyNr ( p.getCompanyNr ( ) ) ; ret.setFirstName ( p.getFirstName ( ) ) ; ret.setLastName ( p.getLastName ( ) ) ; ret.setStatusId ( p.getStatusId ( ) ) ; ret.setGroupName ( p.getGroupList ( ) ) ; ret.setKeyCode ( p.getKeyString ( ) ) ; ret.setComments ( p.getLmComment ( ) ) ; } return ret ; } } [ # |2017-11-13T10:50:39.993+0100|INFO|glassfish 5.0|javax.enterprise.webservices.metroglue|_ThreadID=19 ; _ThreadName=RunLevelControllerThread-1510566633374 ; _TimeMillis=1510566639993 ; _LevelValue=800 ; _MessageID=AS-WSMETROGLUE-10010 ; | Web service endpoint deployment events listener registered successfully.| # ]"
"@ Retention ( RetentionPolicy.RUNTIME ) @ Target ( ElementType.METHOD ) public @ interface SampleAnnotation { } public class SampleInterceptor implements MethodInterceptor { private static final Logger logger = LoggerFactory.getLogger ( SampleInterceptor.class ) ; @ Inject SampleService sampleService ; // this is not working public Object invoke ( MethodInvocation invocation ) throws Throwable { logger.info ( `` SampleInterceptor : Interceptor Invoked '' ) ; Object result = invocation.proceed ( ) ; Observable < List < Sample > > observable = ( Observable < List < Sample > > ) result ; SampleSender sender = null ; List < Sample > sampleList = observable.toBlocking ( ) .first ( ) ; for ( Sample sample : sampleList ) { sender = new SampleSender ( ) ; sender.setBoolean ( sample.isBoolean ( ) ) ; logger.info ( `` Pushing Data into Sender '' ) ; sampleService.insert ( String.join ( `` _ '' , `` key '' , `` value '' ) , sender ) ; // here getting NullPointerException because sampleService is null } return result ; } } public class SampleModule extends AbstractModule { @ Override protected void configure ( ) { bindInterceptor ( Matchers.any ( ) , Matchers.annotatedWith ( SampleAnnotation.class ) , new SampleInterceptor ( ) ) ; } // This class also have so many method and this was already declared and using in another services , I created a sample class hereclass SampleClassForInterceptor { // this sampleMethod ( ) is not a new method , its already created , // now I am adding annotation to it , because after finishing this functionality , // I want something should be done , so created annotation and added here @ SampleAnnotation public Observable < List < Sample > > sampleMethod ( ) { Sample sample = new Device ( ) ; sample.setName ( `` *** 7777 '' ) ; sample.setBoolean ( true ) ; List < Sample > list = new ArrayList < > ( ) ; list.add ( sample ) ; Observable < List < Device > > observable = Observable.just ( list ) ; return observable ; } } public final class RestModule extends JerseyServletModule { // other classes binding bind ( SampleClassForInterceptor.class ) .in ( Scopes.SINGLETON ) ; // other classes binding install ( new SampleModule ( ) ) ; } public class Bootstrap extends ServerBootstrap { binder.install ( new RestModule ( ) ) ; } @ Path ( `` service/sample '' ) public class SampleRS { @ Inject SampleClassForInterceptor sampleClassForInterceptor ; public void someMethod ( ) { sampleClassForInterceptor.sampleMethod ( ) ; } }"
BufferedReader br = new BuffereReader ( file ) ; Scanner s = new Scanner ( br ) ; sys.out ( s.next ( ) ) ; sys.out ( buffReader.readLine ( ) ) ;
"QueueInfo info = admin.getQueue ( queueName ) ; public class EMSQueueInfo extends QueueInfo implements IQueueInfo { // ... } QueueInfo info = new QueueInfo ( queueName ) ; public class EMSQueueInfo extends QueueInfo implements IQueueInfo { public EMSQueueInfo ( String queueName ) { super ( queueName ) ; } } public class EMSQueueInfo extends QueueInfo implements IQueueInfo { public EMSQueueInfo ( String queueName , Admin admin ) { super = admin.getQueue ( queueName ) ; } } public class EMSQueueInfo extends QueueInfo implements IQueueInfo { private QueueInfo _queueInfo public EMSQueueInfo ( String queueName , Admin admin ) { _queueInfo = admin.getQueue ( queueName ) ; } public int getMessagesOnQueue ( ) { return _queueInfo.getMessagesOnQueue ( ) ; } }"
int intValue =Integer.parseInt ( null ) ; Double double1 = Double.parseDouble ( null ) ;
"TreeMap < Integer , Double > ratings = new TreeMap ( ) ; ArrayList < Establishment > establishments = new ArrayList < > ( ) ; double one = 0 ; double two = 0 ; double three = 0 ; double five = 0 ; for ( Establishment e : establishments ) { if ( e.getRating ( ) == 1 ) { one++ ; } if ( e.getRating ( ) == 2 ) { two++ ; } if ( e.getRating ( ) == 3 ) { three++ ; } if ( e.getRating ( ) == 5 ) { five++ ; } } ratings.put ( 1 , ( one / establishments.size ( ) ) * 100 ) ; ratings.put ( 2 , ( two / establishments.size ( ) ) * 100 ) ; ratings.put ( 3 , ( three / establishments.size ( ) ) * 100 ) ; ratings.put ( 5 , ( five / establishments.size ( ) ) * 100 ) ; listOfInts.stream ( ) .filter ( i - > i == 3 ) .count ( )"
Byte b1= ( byte ) 4 ; Byte b2= ( byte ) 4 ; System.out.println ( b1==b2 ) ; Byte b1=4 ;
"class Vendedor { void abreTeatro ( int codigoCamarote , int capacidadeCamarote , int precoCamarote , int codigoFrente , int capacidadeFrente , int precoFrente , int codigoMeio , int capacidadeMeio , int precoMeio , int codigoFundo , int capacidadeFundo , int precoFundo ) { Setor camarote = new Setor ( codigoCamarote , capacidadeCamarote , precoCamarote ) ; Setor frente = new Setor ( codigoFrente , capacidadeFrente , precoFrente ) ; Setor meio = new Setor ( codigoMeio , capacidadeMeio , precoMeio ) ; Setor fundo = new Setor ( codigoFundo , capacidadeFundo , precoFundo ) ; } ; } class Vendedor { Setor camarote ; Setor frente ; Setor meio ; Setor fundo ; void abreTeatro ( int codigoCamarote , int capacidadeCamarote , int precoCamarote , int codigoFrente , int capacidadeFrente , int precoFrente , int codigoMeio , int capacidadeMeio , int precoMeio , int codigoFundo , int capacidadeFundo , int precoFundo ) { camarote = new Setor ( codigoCamarote , capacidadeCamarote , precoCamarote ) ; frente = new Setor ( codigoFrente , capacidadeFrente , precoFrente ) ; meio = new Setor ( codigoMeio , capacidadeMeio , precoMeio ) ; fundo = new Setor ( codigoFundo , capacidadeFundo , precoFundo ) ; } ; } public class Setor { int _codigo ; int _capacidade ; int _preco ; public Setor ( int codigo , int capacidade , int preco ) { _codigo = codigo ; _capacidade = capacidade ; _preco = preco ; System.out.println ( _codigo + `` `` + _capacidade + `` `` + _preco ) ; } ; }"
"public class BaseWorld { /* ... code ... */ } public class BaseLevel { /* ... code ... */ } public class BaseTile { /* ... code ... */ } public class World extends BaseWorld { /* ... extended code ... */ } public class Level extends BaseLevel { /* ... extended code ... */ } public class Tile extends BaseTile { /* ... extended code ... */ } public class BaseLevel { BaseLevel getNextLevel ( ) { /* ... code ... */ } } public class Level extends BaseLevel { Level getNextLevel ( ) { return ( Level ) super.getNextLevel ( ) ; } } public class BaseLevel < Level extends BaseLevel < Level > > { Level getNextLevel ( ) { /* ... code ... */ } } public class Level extends BaseLevel < Level > { //All sorted ! getNextLevel ( ) already returns this subclass type . } public class BaseWorld < Tile extends BaseTile < Tile , Level , World > , Level extends BaseLevel < Tile , Level , World > , World extends BaseWorld < Tile , Level , World > > { /* ... code ... */ } public class BaseLevel < Tile extends BaseTile < Tile , Level , World > , Level extends BaseLevel < Tile , Level , World > , World extends BaseWorld < Tile , Level , World > > { /* ... code ... */ } public class BaseTile < Tile extends BaseTile < Tile , Level , World > , Level extends BaseLevel < Tile , Level , World > , World extends BaseWorld < Tile , Level , World > > { /* ... code ... */ } A stack overflow error has occurred.You are recommended to exit the workbench . [ ... ]"
System.out.println ( System.getProperty ( `` java.io.tmpdir '' ) ) ;
"import java.util.Scanner ; public class RPNCalc { public static void main ( String [ ] args ) { Scanner keyboard = new Scanner ( System.in ) ; double v1 , v2 ; String operator = keyboard.nextLine ( ) ; char symbol = operator.charAt ( 0 ) ; System.out.print ( `` Enter a value v1 : `` ) ; v1 = keyboard.nextDouble ( ) ; System.out.println ( ) ; System.out.print ( `` Enter a value v2 : `` ) ; v2 = keyboard.nextDouble ( ) ; System.out.println ( ) ; System.out.print ( `` Enter one of the valid operators + , - , * , / , nCr , : `` ) ; operator = keyboard.nextLine ( ) ; switch ( symbol ) { case'+ ' : sum.writeOutput ( ) ; break ; case'- ' : minus.writeOutput ( ) ; break ; case'* ' : times.writeOutput ( ) ; break ; case'/ ' : divide.writeOutput ( ) ; break ; case ' q ' : System.out.println ( `` Your last result was `` ) ; default : System.out.println ( `` You must choose an appropriate operator . `` ) ; } } double value1 , value2 ; int n ; public static double sum ( double value1 , double value2 ) { double newSum = value1 + value2 ; return newSum ; } public static double minus ( double value1 , double value2 ) { double newMinus = value1 - value2 ; return newMinus ; } public static double times ( double value1 , double value2 ) { double newTimes = value1 * value2 ; return newTimes ; } public static double divide ( double value1 , double value2 ) { double newDivide = value1 / value2 ; return newDivide ; } }"
userService.getClient ( ) .findUsersByMarkets ( marketIds ) .stream ( ) .filter ( us - > ! alreadyNotifiedUserIds.contains ( us.getId ( ) ) ) .forEach ( usersToBeNotified : :add ) ; userService.getClient ( ) .findUsersByMarkets ( marketIds ) .stream ( ) .filter ( us - > ! alreadyNotifiedUserIds.contains ( User : :getId ) ) .forEach ( usersToBeNotified : :add ) ;
class LambdaTesting { protected List < String > values ; protected LambdaTesting ( List < String > values ) { this.values = values ; } public List < String > modify ( ) { return this.values.stream ( ) .map ( x - > x.trim ( ) ) .collect ( Collectors.toList ( ) ) ; } public List < String > modifyLocal ( ) { List < String > localValue = new ArrayList < > ( ) ; localValue.add ( `` Local FOO `` ) ; localValue.add ( `` Local BAR `` ) ; return localValue.stream ( ) .map ( x - > x.trim ( ) ) .collect ( Collectors.toList ( ) ) ; } } public List < String > testMethods ( ) { List < String > test = new ArrayList < > ( ) ; test.add ( `` Global FOO `` ) ; test.add ( `` GLOBAL BAR '' ) ; LambdaTesting lambdaTesting = new LambdaTesting ( test ) ; lambdaTesting.modifyLocal ( ) ; lambdaTesting.modify ( ) ; }
"public static class Person { private final SimpleStringProperty firstName ; ... public String getFirstName ( ) { return firstName.get ( ) ; } emailCol.setCellValueFactory ( new PropertyValueFactory < Person , String > ( `` firstName '' ) ) ; firstNameCol.setCellValueFactory ( celldata - > celldata.getValue ( ) .firstNameProperty ( ) ) ;"
"var s = `` '' ; var lower = s.ToLower ( ) ; var upper = s.ToUpper ( ) ; if ( ! lower.Equals ( upper , StringComparison.OrdinalIgnoreCase ) ) { //How can this happen ? }"
"// old listList < Employee > oldList = new ArrayList < > ( ) ; Employee emp1 = new Employee ( ) ; emp1.setPersonalNumber ( `` 123 '' ) ; emp1.setName ( `` old_name1 '' ) ; emp1.setStatus ( Status.OLD ) ; Employee emp2 = new Employee ( ) ; emp2.setPersonalNumber ( `` 456 '' ) ; emp2.setName ( `` old_name2 '' ) ; emp2.setStatus ( Status.OLD ) ; oldList.add ( emp1 ) ; oldList.add ( emp2 ) ; // new listList < Employee > newList = new ArrayList < > ( ) ; Employee newEmp1 = new Employee ( ) ; newEmp1.setPersonalNumber ( `` 123 '' ) ; newEmp1.setName ( `` new_name1 '' ) ; newEmp1.setStatus ( Status.NEW ) ; Employee newEmp2 = new Employee ( ) ; newEmp2.setPersonalNumber ( `` 456 '' ) ; newEmp2.setName ( `` new_name2 '' ) ; newEmp2.setStatus ( Status.NEW ) ; newList.add ( newEmp1 ) ; newList.add ( newEmp2 ) ; [ { `` 123 '' , `` new_name1 '' , NEW } , { `` 123 '' , `` old_name1 '' , OLD } , { `` 456 '' , `` new_name2 '' , NEW } , { `` 456 '' , `` old_name1 '' , OLD } , ]"
public class Singleton { private static Singleton instance = new Singleton ( ) ; public static Singleton getInstance ( ) { return instance ; } private Singleton ( ) { } } public class Singleton { private Singleton ( ) { } public final static Singleton INSTANCE = new Singleton ( ) ; }
"Session dbSession = HibernateUtil.getSessionFactory ( ) .openSession ( ) ; Transaction dbTransaction = dbSession.beginTransaction ( ) ; Criteria criteria = dbSession.createCriteria ( Invite.class ) .add ( Restrictions.eq ( `` uuid '' , path ) .ignoreCase ( ) ) ; Invite invite = ( Invite ) criteria.uniqueResult ( ) ; if ( invite.isExpired ( ) ) { // Notify user the invite has expired . } else { Timer timer = new Timer ( ) ; timer.schedule ( new TimerTask ( ) { @ Override public void run ( ) { // ERROR : ` invite ` is not guaranteed to exist when this code runs invite.setExpired ( true ) ; } } , MAX_TIME ) ; }"
"java -Xms4144m -Xmx4144m -XX : +UseParNewGC -XX : +CMSClassUnloadingEnabled -XX : CMSFullGCsBeforeCompaction=1 -XX : +PrintGCDetails -Xloggc : gc.log -verbose : gc -XX : SurvivorRatio=4 -XX : +UseCompressedOop 198.341 : [ GC 198.341 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.7930435 secs ] 2653227K- > 1913561K ( 4007744K ) , 0.7931001 secs ] [ Times : user=1.36 sys=0.03 , real=0.79 secs ] 219.946 : [ GC 219.946 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.6662757 secs ] 2856601K- > 2095809K ( 4007744K ) , 0.6663335 secs ] [ Times : user=1.23 sys=0.03 , real=0.67 secs ] 230.170 : [ GC 230.170 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.7158400 secs ] 3038849K- > 2235472K ( 4007744K ) , 0.7158940 secs ] [ Times : user=1.39 sys=0.02 , real=0.72 secs ] 242.243 : [ GC 242.243 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.8650113 secs ] 3178512K- > 2538982K ( 4007744K ) , 0.8650603 secs ] [ Times : user=1.64 sys=0.06 , real=0.87 secs ] 257.200 : [ GC 257.200 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.6999034 secs ] 3482022K- > 2698292K ( 4007744K ) , 0.6999583 secs ] [ Times : user=1.30 sys=0.03 , real=0.70 secs ] 271.794 : [ GC 271.794 : [ ParNew : 1178752K- > 235712K ( 1178752K ) , 0.8674328 secs ] 3641332K- > 2929779K ( 4007744K ) , 0.8674890 secs ] [ Times : user=1.53 sys=0.08 , real=0.87 secs ] 285.540 : [ GC 285.540 : [ ParNew : 1178752K- > 1178752K ( 1178752K ) , 0.0000200 secs ] 285.541 : [ Tenured : 2694067K- > 2687296K ( 2828992K ) , 8.3795756 secs ] 3872819K- > 2687296K ( 4007744K ) , [ Perm : 75186K- > 75186K ( 75328K ) ] , 8.3796871 secs ] [ Times : user=8.36 sys=0.00 , real=8.38 secs ] 307.287 : [ GC 307.287 : [ ParNew : 943040K- > 943040K ( 1178752K ) , 0.0000216 secs ] 307.287 : [ Tenured : 2687296K- > 2828991K ( 2828992K ) , 8.8158385 secs ] 3630336K- > 2875360K ( 4007744K ) , [ Perm : 75195K- > 75195K ( 75328K ) ] , 8.8159306 secs ] [ Times : user=8.78 sys=0.03 , real=8.82 secs ] 331.624 : [ Full GC 331.624 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 9.6792290 secs ] 4007743K- > 2956484K ( 4007744K ) , [ Perm : 75197K- > 75193K ( 75328K ) ] , 9.6792896 secs ] [ Times : user=9.64 sys=0.03 , real=9.68 secs ] 355.683 : [ Full GC 355.683 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 8.6649544 secs ] 4007743K- > 3189624K ( 4007744K ) , [ Perm : 75195K- > 75195K ( 75328K ) ] , 8.6650138 secs ] [ Times : user=8.63 sys=0.00 , real=8.66 secs ] 375.500 : [ Full GC 375.500 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 9.0546364 secs ] 4007743K- > 3369414K ( 4007744K ) , [ Perm : 75195K- > 75195K ( 75328K ) ] , 9.0546949 secs ] [ Times : user=9.03 sys=0.02 , real=9.05 secs ] 394.217 : [ Full GC 394.217 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 9.3253515 secs ] 4007743K- > 3502795K ( 4007744K ) , [ Perm : 75197K- > 75197K ( 75328K ) ] , 9.3254103 secs ] [ Times : user=9.23 sys=0.05 , real=9.32 secs ] 411.511 : [ Full GC 411.511 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 11.2295533 secs ] 4007743K- > 3544789K ( 4007744K ) , [ Perm : 75199K- > 75199K ( 75328K ) ] , 11.2296119 secs ] [ Times : user=11.24 sys=0.02 , real=11.23 secs ] 429.802 : [ Full GC 429.802 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 9.7181375 secs ] 4007743K- > 3649219K ( 4007744K ) , [ Perm : 75199K- > 75199K ( 75328K ) ] , 9.7182127 secs ] [ Times : user=9.69 sys=0.02 , real=9.72 secs ] 445.271 : [ Full GC 445.271 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 9.8961275 secs ] 4007743K- > 3725989K ( 4007744K ) , [ Perm : 75200K- > 75200K ( 75328K ) ] , 9.8961886 secs ] [ Times : user=9.86 sys=0.02 , real=9.90 secs ] 459.824 : [ Full GC 459.824 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 9.9093299 secs ] 4007743K- > 3788320K ( 4007744K ) , [ Perm : 75200K- > 75200K ( 75264K ) ] , 9.9093896 secs ] [ Times : user=9.84 sys=0.03 , real=9.91 secs ] 472.905 : [ Full GC 472.905 : [ Tenured : 2828992K- > 2828991K ( 2828992K ) , 11.9256624 secs ] 4007743K- > 3820926K ( 4007744K ) , [ Perm : 75200K- > 75125K ( 75264K ) ] , 11.9257166 secs ] [ Times : user=11.91 sys=0.00 , real=11.93 secs ] 488.573 : [ Full GC 488.573 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.0481444 secs ] 4007743K- > 3858495K ( 4007744K ) , [ Perm : 75126K- > 75126K ( 75264K ) ] , 10.0482011 secs ] [ Times : user=10.03 sys=0.02 , real=10.05 secs ] 501.588 : [ Full GC 501.588 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.0523092 secs ] 4007743K- > 3894229K ( 4007744K ) , [ Perm : 75126K- > 75126K ( 75264K ) ] , 10.0523631 secs ] [ Times : user=10.02 sys=0.05 , real=10.05 secs ] 513.358 : [ Full GC 513.358 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.4441345 secs ] 4007743K- > 3922499K ( 4007744K ) , [ Perm : 75126K- > 75126K ( 75264K ) ] , 10.4441888 secs ] [ Times : user=10.41 sys=0.05 , real=10.44 secs ] 525.149 : [ Full GC 525.149 : [ Tenured : 2828991K- > 2828992K ( 2828992K ) , 12.3326697 secs ] 4007743K- > 3933477K ( 4007744K ) , [ Perm : 75127K- > 75123K ( 75264K ) ] , 12.3327241 secs ] [ Times : user=12.30 sys=0.02 , real=12.33 secs ] 538.518 : [ Full GC 538.518 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.1793883 secs ] 4007744K- > 3951837K ( 4007744K ) , [ Perm : 75124K- > 75124K ( 75264K ) ] , 10.1794431 secs ] [ Times : user=10.16 sys=0.00 , real=10.18 secs ] 549.421 : [ Full GC 549.421 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.2044623 secs ] 4007743K- > 3966013K ( 4007744K ) , [ Perm : 75124K- > 75124K ( 75264K ) ] , 10.2045185 secs ] [ Times : user=10.16 sys=0.03 , real=10.20 secs ] 560.138 : [ Full GC 560.138 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.2487167 secs ] 4007743K- > 3977058K ( 4007744K ) , [ Perm : 75125K- > 75125K ( 75264K ) ] , 10.2487719 secs ] [ Times : user=10.22 sys=0.03 , real=10.25 secs ] 570.809 : [ Full GC 570.809 : [ Tenured : 2828992K- > 2828991K ( 2828992K ) , 12.3747337 secs ] 4007743K- > 3982653K ( 4007744K ) , [ Perm : 75125K- > 75125K ( 75264K ) ] , 12.3747909 secs ] [ Times : user=12.34 sys=0.03 , real=12.37 secs ] 583.616 : [ Full GC 583.616 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2968728 secs ] 4007743K- > 3989103K ( 4007744K ) , [ Perm : 75125K- > 75125K ( 75264K ) ] , 10.2969323 secs ] [ Times : user=10.22 sys=0.05 , real=10.30 secs ] 594.116 : [ Full GC 594.116 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2502126 secs ] 4007743K- > 3994344K ( 4007744K ) , [ Perm : 75126K- > 75126K ( 75264K ) ] , 10.2502671 secs ] [ Times : user=10.24 sys=0.02 , real=10.25 secs ] 604.508 : [ Full GC 604.508 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.3733315 secs ] 4007743K- > 3998499K ( 4007744K ) , [ Perm : 75127K- > 75127K ( 75264K ) ] , 10.3733868 secs ] [ Times : user=10.30 sys=0.06 , real=10.37 secs ] 614.984 : [ Full GC 614.984 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 12.4043694 secs ] 4007743K- > 4000611K ( 4007744K ) , [ Perm : 75127K- > 75118K ( 75264K ) ] , 12.4044216 secs ] [ Times : user=12.36 sys=0.02 , real=12.40 secs ] 627.474 : [ Full GC 627.474 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.4267471 secs ] 4007743K- > 4002564K ( 4007744K ) , [ Perm : 75118K- > 75118K ( 75264K ) ] , 10.4268039 secs ] [ Times : user=10.31 sys=0.05 , real=10.43 secs ] 637.975 : [ Full GC 637.975 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2774899 secs ] 4007743K- > 4004685K ( 4007744K ) , [ Perm : 75118K- > 75118K ( 75264K ) ] , 10.2775510 secs ] [ Times : user=10.19 sys=0.05 , real=10.28 secs ] 648.284 : [ Full GC 648.284 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2766971 secs ] 4007736K- > 4005877K ( 4007744K ) , [ Perm : 75118K- > 75118K ( 75264K ) ] , 10.2767509 secs ] [ Times : user=10.22 sys=0.03 , real=10.28 secs ] 658.585 : [ Full GC 658.585 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 12.4831705 secs ] 4007743K- > 4005966K ( 4007744K ) , [ Perm : 75118K- > 75118K ( 75264K ) ] , 12.4832232 secs ] [ Times : user=12.42 sys=0.03 , real=12.48 secs ] 671.090 : [ Full GC 671.090 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.4432966 secs ] 4007743K- > 4006356K ( 4007744K ) , [ Perm : 75118K- > 75118K ( 75264K ) ] , 10.4433494 secs ] [ Times : user=10.31 sys=0.03 , real=10.44 secs ] 681.555 : [ Full GC 681.555 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.7448251 secs ] 4007743K- > 4006368K ( 4007744K ) , [ Perm : 75119K- > 75119K ( 75264K ) ] , 10.7448778 secs ] [ Times : user=10.72 sys=0.02 , real=10.74 secs ] 692.316 : [ Full GC 692.316 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2663540 secs ] 4007743K- > 4006774K ( 4007744K ) , [ Perm : 75136K- > 75136K ( 75264K ) ] , 10.2664250 secs ] [ Times : user=10.25 sys=0.00 , real=10.27 secs ] 702.608 : [ Full GC 702.608 : [ Tenured : 2828991K- > 2828992K ( 2828992K ) , 12.4610859 secs ] 4007743K- > 4006891K ( 4007744K ) , [ Perm : 75140K- > 75140K ( 75264K ) ] , 12.4611370 secs ] [ Times : user=12.42 sys=0.03 , real=12.46 secs ] 715.087 : [ Full GC 715.087 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.3067777 secs ] 4007743K- > 4007227K ( 4007744K ) , [ Perm : 75140K- > 75140K ( 75264K ) ] , 10.3068309 secs ] [ Times : user=10.22 sys=0.03 , real=10.31 secs ] 725.402 : [ Full GC 725.402 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.2705306 secs ] 4007743K- > 4007320K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.2706022 secs ] [ Times : user=10.20 sys=0.11 , real=10.27 secs ] 735.678 : [ Full GC 735.678 : [ Tenured : 2828992K- > 2828992K ( 2828992K ) , 10.3012637 secs ] 4007744K- > 4007310K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.3013231 secs ] [ Times : user=10.28 sys=0.00 , real=10.30 secs ] 745.986 : [ Full GC 745.986 : [ Tenured : 2828992K- > 2828991K ( 2828992K ) , 12.5238366 secs ] 4007744K- > 4007281K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 12.5238903 secs ] [ Times : user=12.45 sys=0.01 , real=12.52 secs ] 758.516 : [ Full GC 758.516 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2712146 secs ] 4007743K- > 4007484K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.2712660 secs ] [ Times : user=10.27 sys=0.02 , real=10.27 secs ] 768.792 : [ Full GC 768.792 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.2586840 secs ] 4007743K- > 4007470K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.2587353 secs ] [ Times : user=10.19 sys=0.03 , real=10.26 secs ] 779.064 : [ Full GC 779.064 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.4511437 secs ] 4007743K- > 4007399K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.4511969 secs ] [ Times : user=10.34 sys=0.02 , real=10.45 secs ] 789.525 : [ Full GC 789.525 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 12.4538596 secs ] 4007743K- > 4007551K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 12.4539062 secs ] [ Times : user=12.41 sys=0.03 , real=12.45 secs ] 801.997 : [ Full GC 801.997 : [ Tenured : 2828991K- > 2828991K ( 2828992K ) , 10.3025233 secs ] 4007743K- > 4007417K ( 4007744K ) , [ Perm : 75152K- > 75152K ( 75264K ) ] , 10.3025765 secs ] [ Times : user=10.27 sys=0.00 , real=10.30 secs ]"
"{ `` foo '' : `` v2 '' , `` bar '' : [ `` abc/bcf < object @ twenty > .xyz '' , `` abc/fgh < object @ thirtu > .xyz '' ] } Config.javaprivate static final ObjectMapper OBJECT_MAPPER ; static { OBJECT_MAPPER = new ObjectMapper ( ) ; OBJECT_MAPPER.configure ( DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES , false ) ; OBJECT_MAPPER.configure ( DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL , true ) ; OBJECT_MAPPER.enableDefaultTyping ( ) ; } @ JsonCreator public Config ( @ JsonProperty ( value = `` foo '' , required = true ) final String version , @ JsonProperty ( value = `` bar '' ) final List < String > barTypes ) { // rest of constructor } public static Config fromJson ( final Reader reader ) throws IOException { return OBJECT_MAPPER.readValue ( reader , Config.class ) ; } Failed to parse type 'abc/bcf < object @ twenty > .xyz ' ( remaining : ' < object @ twenty > .xyz ' ) : Can not locate class 'abc/bcf ' , problem : abc/bcf '' try ( BufferedReader reader = Files.newBufferedReader ( configFile.toPath ( ) , StandardCharsets.UTF_8 ) ) { config = Config.fromJson ( reader ) ; } `` Vehicles '' : [ `` java.util.ArrayList '' , [ { `` name '' : `` Car '' } , { `` name '' : `` Train '' } ] I currently use a MixIn for declaring the subtypes . However , this stops working if I remove DefaultTyping ."
"int a = 0x04A7D3B8 ; System.out.println ( `` a = `` + a ) ; // prints 78107576int b = Integer.parseInt ( `` 04A7D3B8 '' , 16 ) ; System.out.println ( `` b = `` + b ) ; // prints 78107784"
public static final int MY_GREAT_COLOR = ( 91 < < 16 ) + ( 155 < < 8 ) + 213 + ( 255 < < 32 ) ;
"public long convert ( long sourceDuration , TimeUnit sourceUnit ) { throw new AbstractMethodError ( ) ; } abstract int excessNanos ( long d , long m ) ;"
for ( int i = 1 ; i < n*n ; i *= 2 )
"List < Integer > list = IntStream.range ( 0 , 100 ) .boxed ( ) .collect ( toList ( ) ) ; System.out.println ( list.size ( ) ) ; System.out.println ( list.stream ( ) .count ( ) ) ;"
"package whatever ; public class A { public void method1 ( ) { System.out.println ( `` A method1 ( ) . `` ) ; } //using `` final '' here to emphasize that this is a hiding , not an override . private final void method2 ( ) { System.out.println ( `` A private method2 ( ) . `` ) ; } public static void main ( String [ ] args ) { A a = new A ( ) .new B ( ) ; a.method1 ( ) ; //calls B method 1 ( ( A.B ) a ) .method1 ( ) ; //calls B method 1 a.method2 ( ) ; //calls A private method 2 **I expected it to call B private method 2 ( ( A.B ) a ) .method2 ( ) ; //calls B private method 2 } public class B extends A { public void method1 ( ) { System.out.println ( `` B method1 ( ) . `` ) ; } private final void method2 ( ) { System.out.println ( `` B private method2 ( ) . `` ) ; } } }"
"public class MyObject { @ Inject public MyObject ( Foo foo , Bar bar ) { ... } } public interface MyObjectFactory { public MyObject build ( Bar bar ) ; } public class MyObjectFactoryImpl implements MyObjectFactory { @ Inject private Provider < Foo > foo ; @ Override public MyObject build ( Bar bar ) { return new MyObject ( foo.get ( ) , bar ) ; } } public class MyObjectFactoryImpl implements MyObjectFactory { @ Inject private Injector injector ; @ Override public MyObject build ( Bar bar ) { Injector child = injector.createChildInjector ( new AbstractModule ( ) { @ Override protected void configure ( ) { bind ( Bar.class ) .toInstance ( bar ) ; // Set up method interceptors for MyObject here ... } } ) ; return child.getInstance ( MyObject.class ) ; } }"
for ( int i = 0 ; i < 10 ; i++ ) { for ( int j = 0 ; j < 5 ; j++ ) { System.out.println ( i + j ) ; } // End of j loop } // End of i loop for ( int outerLoop = 0 ; outerLoop < 10 ; outerLoop++ ) { for ( int innerLoop = 0 ; innerLoop < 5 ; innerLoop++ ) { System.out.println ( outerLoop + innerLoop ) ; } // End of innerLoop } // End of outerLoop
"public static < T extends Comparable < T > > boolean isSame ( @ Nullable Collection < T > a , @ Nullable Collection < T > b ) { if ( a == null || b == null ) { return ( a == null & & b == null ) ; } if ( a.size ( ) ! = b.size ( ) ) { return false ; } Iterator < T > aIt = a.iterator ( ) ; Iterator < T > bIt = b.iterator ( ) ; while ( aIt.hasNext ( ) ) { T aValue = aIt.next ( ) ; T bValue = bIt.next ( ) ; if ( aValue == null || bValue == null ) { if ( aValue == null ^ bValue == null ) { return false ; } //both null , do n't compare , continue looping ... } else if ( aValue.compareTo ( bValue ) ! = 0 ) { return false ; } } return true ; } if ( aValue == null || bValue == null ) { if ( aValue == null ^ bValue == null ) { return false ; } }"
| Welcome to JShell -- Version 14.0.1| For an introduction type : /help introjshell > class X { } | created class Xjshell > class Z { } | created class Zjshell > var x = new X ( ) x == > X @ 26a1ab54| created variable x : Xjshell > var z = new Z ( ) | Error : | unexpected type| required : class| found : type parameter Z| var z = new Z ( ) ; | ^jshell > class A { } | created class Ajshell > var a = new A ( ) a == > A @ 2ef1e4fa| created variable a : A
"public class AnimalException extends Exception { public AnimalException ( String error ) { super ( error ) ; } } public class Zoo { private String animal ; private String food ; public Zoo ( String animal , String food ) throws AnimalException { this.animal = animal ; if ( findWord ( animal , `` wolf '' ) ) { throw new AnimalException ( `` This animal is a predator . `` ) ; //something ought to be done here , I reckon } else { this.food = food ; } } public static boolean findWord ( String word , String find ) { int total = 0 ; int idx = 0 ; while ( ( idx = word.indexOf ( find , idx ) ) ! = -1 ) { total++ ; idx++ ; } if ( total == 0 ) { return false ; } else { return true ; } }"
public interface ITest { String func ( ) ; } public static class Test implements ITest { void printFunc ( ) { System.out.println ( `` Inside Test Function '' ) ; } } public static void main ( String [ ] args ) { Test test = new Test ( ) ; test.printFunc ( ) ; }
"public Product getMostExpensiveProduct ( HashMap < Integer , Product > items ) { Product maxPriceProduct = items.entrySet ( ) .stream ( ) .reduce ( ( Product a , Product b ) - > a.getPrice ( ) < b.getPrice ( ) ? b : a ) ; return maxPriceProduct ; }"
"public interface TheClass < T > { public void theMethod ( T obj ) ; } public class A { private TheClass < ? > instance ; public A ( TheClass < ? > instance ) { this.instance = instance ; } public void doWork ( Object target ) { instance.theMethod ( target ) ; // Wo n't compile ! // However , I know that the target can be passed to the // method safely because its type matches . } } public class A { private TheClass < Object > instance ; // type enforced here public A ( TheClass < ? > instance ) { this.instance = ( TheClass < Object > ) instance ; // cast works fine } public void doWork ( Object target ) { instance.theMethod ( target ) ; } }"
Class klasa = Enum.class ; for ( Type t : klasa.getGenericInterfaces ( ) ) System.out.println ( t ) ; java.lang.Comparable < E > interface java.io.Serializable **interface** java.lang.Comparable < E > interface java.io.Serializable
"public class JavaClass { public static < T > T [ ] toArray ( Class < T > t , Collection < T > coll ) { return null ; // return null to make it simple } } object ScalaClass { def toArray [ T ] ( t : java.lang.Class [ T ] , coll : java.util.Collection [ T ] ) : Array [ T ] = { JavaClass.toArray [ T ] ( t , coll ) ; } } error : type mismatch ; [ ERROR ] ScalaScala.scala:4002 : error : type mismatch ; [ INFO ] found : Array [ T ] [ INFO ] required : Class [ T ] [ INFO ] JavaClass.toArray [ T ] ( t , coll ) ; [ INFO ] ^"
"buildscript { repositories { mavenCentral ( ) mavenLocal ( ) } dependencies { // App Engine Gradle plugin classpath 'com.google.cloud.tools : appengine-gradle-plugin:1.3.3 ' // Endpoints Frameworks Gradle plugin classpath 'com.google.cloud.tools : endpoints-framework-gradle-plugin:1.0.2 ' } } repositories { mavenCentral ( ) ; jcenter ( ) } apply plugin : 'java'apply plugin : 'war'// [ START apply_plugins ] apply plugin : 'com.google.cloud.tools.appengine'apply plugin : 'com.google.cloud.tools.endpoints-framework-server'// [ END apply_plugins ] dependencies { compile ( 'com.google.endpoints : endpoints-framework:2.0.8 ' ) { exclude group : 'com.google.guava ' , module : 'guava-jdk5 ' } compile 'javax.servlet : servlet-api:2.5 ' compile 'com.ganyo : gcm-server:1.0.2 ' compile 'javax.jdo : jdo-api:3.0.1 ' compile 'org.datanucleus : datanucleus-core:3.1.3 ' compile 'org.datanucleus : datanucleus-api-jdo:3.1.3 ' compile 'org.datanucleus : datanucleus-accessplatform-jdo-rdbms:4.1.1 ' compile 'com.google.appengine.orm : datanucleus-appengine:2.1.2 ' compile 'com.google.code.gson : gson:2.2.4 ' compile 'org.apache.commons : commons-lang3:3.5 ' } sourceCompatibility = JavaVersion.VERSION_1_7targetCompatibility = JavaVersion.VERSION_1_7appengine { // App Engine tasks configuration deploy { // deploy configuration version = findProperty ( `` appengine.deploy.version '' ) def promoteProp = findProperty ( `` appengine.deploy.promote '' ) if ( promoteProp ! = null ) { promote = new Boolean ( promoteProp ) } } } endpointsServer { // Endpoints Framework Plugin server-side configuration hostname = `` komilibro.appspot.com '' } task datanucleusEnhance { description `` Enhance JDO model classes using DataNucleus Enhancer '' dependsOn processResources doLast { // define the entity classes def entityFiles = fileTree ( sourceSets.main.output.classesDir ) .matching { include 'com/meanwhile/komi/head/**/*.class ' } println `` Enhancing with DataNucleus the following files '' entityFiles.getFiles ( ) .each { println it } // define Ant task for DataNucleus Enhancer ant.taskdef ( name : 'datanucleusenhancer ' , classpath : sourceSets.main.runtimeClasspath.asPath , classname : 'org.datanucleus.enhancer.EnhancerTask ' // the below is for DataNucleus Enhancer 3.1.1 //classname : 'org.datanucleus.enhancer.tools.EnhancerTask ' ) // run the DataNucleus Enhancer as an Ant task ant.datanucleusenhancer ( classpath : sourceSets.main.runtimeClasspath.asPath , verbose : true , api : `` JDO '' ) { entityFiles.addToAntBuilder ( ant , 'fileset ' , FileCollection.AntType.FileSet ) } } } classes.dependsOn ( datanucleusEnhance ) org.datanucleus.store.types.TypeManagerImpl loadJavaTypes : User-defined type mapping class `` org.datanucleus.store.types.sco.simple.Collection '' was not found . Please check the mapping file class specifications and your CLASSPATH . The class must be in the CLASSPATH . com.google.api.server.spi.SystemService invokeServiceMethod : exception occurred while calling backend method ( SystemService.java:375 ) java.lang.NoClassDefFoundError : Could not initialize class com.meanwhile.komi.head.PMF"
"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| partially transparent || || -- -- -- -- -- - || | fully | || | transp . | || -- -- -- -- -- - | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- public class Overlay extends JFrame implements MouseMotionListener , MouseListener { private Rectangle2D.Double selection ; private Point start ; private Point end ; public Overlay ( ) { addMouseMotionListener ( this ) ; addMouseListener ( this ) ; setSize ( Toolkit.getDefaultToolkit ( ) .getScreenSize ( ) ) ; setAlwaysOnTop ( true ) ; setUndecorated ( true ) ; setOpacity ( 0.2f ) ; setVisible ( true ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; } @ Override public void paint ( Graphics g ) { Graphics2D g2d = ( Graphics2D ) g ; g2d.clearRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; if ( selection ! = null ) { Area outside = new Area ( new Rectangle2D.Double ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ) ; outside.subtract ( new Area ( selection ) ) ; g2d.setClip ( outside ) ; g2d.setColor ( new Color ( 0.5f,0.5f,0.5f , 0.5f ) ) ; g2d.fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; } @ Override public void mousePressed ( MouseEvent e ) { start = e.getLocationOnScreen ( ) ; } @ Override public void mouseDragged ( MouseEvent e ) { end = e.getLocationOnScreen ( ) ; selection = new Rectangle2D.Double ( start.x , start.y , end.x - start.x , end.y - start.y ) ; repaint ( ) ; } }"
"import java.util.HashMap ; import java.util.Iterator ; import java.util.Map ; import java.util.Scanner ; import java.util.Set ; public class mainClass { static Scanner keyboard = new Scanner ( System.in ) ; static HashMap < Integer [ ] , String > hMap ; public static void createAHashMap ( ) { System.out.print ( `` Express the initial capacity : `` ) ; int initialCapacity = keyboard.nextInt ( ) ; System.out.print ( `` Express the load factor : `` ) ; float loadFactor = keyboard.nextFloat ( ) ; hMap = new HashMap < Integer [ ] , String > ( initialCapacity , loadFactor ) ; } public static void insertProductInformations ( ) { Integer values [ ] = new Integer [ 3 ] ; System.out.print ( `` \nEnter product 's barcode number : `` ) ; values [ 0 ] = keyboard.nextInt ( ) ; System.out.print ( `` Enter product 's name : `` ) ; String productName = keyboard.next ( ) ; System.out.print ( `` Enter product 's amount : `` ) ; values [ 1 ] = keyboard.nextInt ( ) ; System.out.print ( `` Enter product 's price : `` ) ; values [ 2 ] = keyboard.nextInt ( ) ; hMap.put ( values , productName ) ; } public static void displayList ( ) { Set set = hMap.entrySet ( ) ; Iterator iterator = set.iterator ( ) ; System.out.println ( `` \nBarcode Number\tProduct Amount\tProduct Price\tProduct Name '' ) ; while ( iterator.hasNext ( ) ) { Map.Entry mEntry = ( Map.Entry ) iterator.next ( ) ; System.out.print ( mEntry.getKey ( ) + `` \t\t '' + mEntry.getValue ( ) + `` \n '' ) ; } } public static void main ( String [ ] args ) { createAHashMap ( ) ; System.out.print ( `` \nEnter to add product ' 1'\n '' ) ; System.out.print ( `` Enter to display products ' 2'\n '' ) ; System.out.print ( `` Enter your choice : `` ) ; int entry = keyboard.nextInt ( ) ; while ( entry ! = -99 ) { if ( entry == 1 ) { insertProductInformations ( ) ; } if ( entry == 2 ) { displayList ( ) ; } System.out.print ( `` \nExpress your new choice ( Exit : -99 ) : `` ) ; entry = keyboard.nextInt ( ) ; } } }"
long t = System.currentTimeMillis ( ) ; int size = 3333333 ; int [ ] [ ] [ ] arr = new int [ size ] [ 6 ] [ 2 ] ; // int [ ] [ ] [ ] arr= new int [ 2 ] [ 6 ] [ size ] ; pr ( System.currentTimeMillis ( ) - t ) ; long t = System.currentTimeMillis ( ) ; int size = 3333333 ; // int [ ] [ ] [ ] arr = new int [ size ] [ 6 ] [ 2 ] ; int [ ] [ ] [ ] arr= new int [ 2 ] [ 6 ] [ size ] ; pr ( System.currentTimeMillis ( ) - t ) ;
while ( true ) { Socket s = serverSocket.accept ( ) ; // some code here ... we do n't assign anything to s again here ... }
int arr [ ] = new int [ 5 ] ; int index = 0 ; arr [ index ] = index = 3 ; System.out.println ( `` arr [ 0 ] = `` + arr [ 0 ] ) ; System.out.println ( `` arr [ 3 ] = `` + arr [ 3 ] ) ; arr [ 0 ] = 3arr [ 3 ] = 0
@ Testpublic void testBytes1 ( ) throws IOException { byte [ ] bytes = new byte [ 1_000_000_000 ] ; Random r = new Random ( ) ; for ( int i = 0 ; i < bytes.length ; i++ ) bytes [ i ] = ( byte ) r.nextInt ( ) ; do { System.out.println ( ) ; bytes [ r.nextInt ( 1_000_000_000 ) ] = ( byte ) r.nextInt ( ) ; testLoop ( bytes ) ; testDis ( bytes ) ; testMyDis ( bytes ) ; testViaMethod ( bytes ) ; } while ( true ) ; } private void testDis ( byte [ ] bytes ) throws IOException { long time1 = System.nanoTime ( ) ; long c = 0 ; try ( ByteArrayInputStream bais = new ByteArrayInputStream ( bytes ) ; DataInputStream dis = new DataInputStream ( bais ) ) { for ( int i = 0 ; i < bytes.length ; i++ ) { c += dis.readByte ( ) ; } } long time2 = System.nanoTime ( ) ; System.out.println ( `` Dis : \t\t\t\t '' + ( time2 - time1 ) + `` \t\t\t\t '' + c ) ; } private void testMyDis ( byte [ ] bytes ) throws IOException { long time1 = System.nanoTime ( ) ; long c = 0 ; try ( ByteArrayInputStream bais = new ByteArrayInputStream ( bytes ) ; MyDataInputStream dis = new MyDataInputStream ( bais ) ) { for ( int i = 0 ; i < bytes.length ; i++ ) { c += dis.readByte ( ) ; } } long time2 = System.nanoTime ( ) ; System.out.println ( `` My Dis : \t\t\t '' + ( time2 - time1 ) + `` \t\t\t\t '' + c ) ; } private void testViaMethod ( byte [ ] bytes ) throws IOException { long time1 = System.nanoTime ( ) ; long c = 0 ; try ( ByteArrayInputStream bais = new ByteArrayInputStream ( bytes ) ) { for ( int i = 0 ; i < bytes.length ; i++ ) { c += readByte ( bais ) ; } } long time2 = System.nanoTime ( ) ; System.out.println ( `` Via method : \t\t '' + ( time2 - time1 ) + `` \t\t\t\t '' + c ) ; } private void testLoop ( byte [ ] bytes ) { long time1 = System.nanoTime ( ) ; long c = 0 ; for ( int i = 0 ; i < bytes.length ; i++ ) { c += bytes [ i ] ; } long time2 = System.nanoTime ( ) ; System.out.println ( `` Loop : \t\t\t\t '' + ( time2 - time1 ) + `` \t\t\t\t '' + c ) ; } public final byte readByte ( InputStream in ) throws IOException { int ch = in.read ( ) ; if ( ch < 0 ) throw new EOFException ( ) ; return ( byte ) ( ch ) ; } static class MyDataInputStream implements Closeable { InputStream in ; MyDataInputStream ( InputStream in ) { this.in = in ; } public final byte readByte ( ) throws IOException { int ch = in.read ( ) ; if ( ch < 0 ) throw new EOFException ( ) ; return ( byte ) ( ch ) ; } @ Override public void close ( ) throws IOException { in.close ( ) ; } } 37 1 java.lang.String : :hashCode ( 55 bytes ) 41 2 java.lang.String : :charAt ( 29 bytes ) 43 3 java.lang.String : :indexOf ( 70 bytes ) 49 4 java.lang.AbstractStringBuilder : :ensureCapacityInternal ( 16 bytes ) 52 5 java.lang.AbstractStringBuilder : :append ( 29 bytes ) 237 6 java.util.Random : :nextInt ( 7 bytes ) 237 9 n sun.misc.Unsafe : :compareAndSwapLong ( native ) 238 7 java.util.concurrent.atomic.AtomicLong : :get ( 5 bytes ) 238 8 java.util.concurrent.atomic.AtomicLong : :compareAndSet ( 13 bytes ) 239 10 java.util.Random : :next ( 47 bytes ) 239 11 % fias.TestArrays : :testBytes1 @ 15 ( 77 bytes ) 9645 11 % fias.TestArrays : :testBytes1 @ -2 ( 77 bytes ) made not entrant 9646 12 % fias.TestArrays : :testLoop @ 10 ( 77 bytes ) 9964 12 % fias.TestArrays : :testLoop @ -2 ( 77 bytes ) made not entrantLoop : 318726397 -500090432 9965 13 java.io.DataInputStream : :readByte ( 23 bytes ) 9966 14 s java.io.ByteArrayInputStream : :read ( 36 bytes ) 9967 15 % ! fias.TestArrays : :testDis @ 37 ( 279 bytes ) Dis : 2684374258 -500090432 12651 16 fias.TestArrays $ MyDataInputStream : :readByte ( 23 bytes ) 12652 17 % ! fias.TestArrays : :testMyDis @ 37 ( 279 bytes ) My Dis : 2675570541 -500090432 15327 18 fias.TestArrays : :readByte ( 20 bytes ) 15328 19 % ! fias.TestArrays : :testViaMethod @ 23 ( 179 bytes ) Via method : 2367507141 -500090432 17694 20 fias.TestArrays : :testLoop ( 77 bytes ) 17699 21 % fias.TestArrays : :testLoop @ 10 ( 77 bytes ) Loop : 374525891 -500090567 18069 22 ! fias.TestArrays : :testDis ( 279 bytes ) Dis : 2674626125 -500090567 20745 23 ! fias.TestArrays : :testMyDis ( 279 bytes ) My Dis : 2671418683 -500090567 23417 24 ! fias.TestArrays : :testViaMethod ( 179 bytes ) Via method : 2359181776 -500090567Loop : 315081855 -500090663Dis : 2558738649 -500090663My Dis : 2627056034 -500090663Via method : 311692727 -500090663Loop : 317813286 -500090778Dis : 2565161726 -500090778My Dis : 2630665760 -500090778Via method : 314594434 -500090778Loop : 313695660 -500090797Dis : 2568251556 -500090797My Dis : 2635236578 -500090797Via method : 311882312 -500090797Loop : 316781686 -500090929Dis : 2563535623 -500090929My Dis : 2638487613 -500090929Via method : 313170789 -500090929
ArrayList < Integer > [ ] list = new ArrayList [ 1 ] ;
"public static void main ( String [ ] args ) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch ( 1 ) ; Phaser phaser = new Phaser ( 16 ) { @ Override protected boolean onAdvance ( int phase , int registeredParties ) { return phase ==1 || super.onAdvance ( phase , registeredParties ) ; } } ; System.out.println ( `` Available Processors : `` +Runtime.getRuntime ( ) .availableProcessors ( ) ) ; ExecutorService executorService = ForkJoinPool.commonPool ( ) ; // Runtime.getRuntime ( ) .availableProcessors ( ) -1 for ( int i = 0 ; i < 16 ; i++ ) { final int count = 0 ; executorService.submit ( ( ) - > { while ( ! phaser.isTerminated ( ) ) { try { Thread.sleep ( ThreadLocalRandom.current ( ) .nextInt ( 300 , 2000 ) ) ; System.out.println ( Thread.currentThread ( ) .getName ( ) + count + `` ... `` ) ; phaser.arriveAndAwaitAdvance ( ) ; System.out.println ( Thread.currentThread ( ) .getName ( ) + count + `` ... continues ... `` ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } countDownLatch.countDown ( ) ; } ) ; } countDownLatch.await ( ) ; } public static void main ( String [ ] args ) throws InterruptedException { AtomicInteger phases = new AtomicInteger ( ) ; CountDownLatch countDownLatch = new CountDownLatch ( 1 ) ; CyclicBarrier cyclicBarrier = new CyclicBarrier ( 16 , ( ) - > phases.incrementAndGet ( ) ) ; ExecutorService executorService = ForkJoinPool.commonPool ( ) ; for ( int i = 0 ; i < 16 ; i++ ) { executorService.submit ( ( ) - > { while ( phases.get ( ) < 1 ) { try { Thread.sleep ( ThreadLocalRandom.current ( ) .nextInt ( 300 , 2000 ) ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } try { System.out.println ( Thread.currentThread ( ) .getName ( ) + `` Ok , I am waiting `` ) ; cyclicBarrier.await ( ) ; System.out.println ( Thread.currentThread ( ) .getName ( ) + `` continued it 's way ... `` ) ; } catch ( BrokenBarrierException e ) { e.printStackTrace ( ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } countDownLatch.countDown ( ) ; } } ) ; } countDownLatch.await ( ) ; }"
"{ 21=0 , 22=2 , 11=0 , 12=0 } { 21=3 , 22=0 , 11=6 , 12=3 } { 21=6 , 22=0 , 11=7 , 12=0 } { 21=5 , 22=7 , 11=9 , 12=1 } for ( Chrom t : obj.getChroms ) { Map < Integer , Integer > result = t.getExecutionCount ( ) ; } 21 = 1422 = 911 = 2212 = 4"
for ( GlobalPricingRequest globalPricingRequest : globalPricingRequests ) { BigDecimal feePerTrans = globalPricingRequest.getFeePerTransact ( ) ; if ( feePerTrans ! = null & & feePerTrans.intValue ( ) < 0 ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } List < EventTypePricingMapping > eventTypePricingMappings = globalPricingRequest.getEventTypePricingList ( ) ; for ( EventTypePricingMapping eventTypePricingMapping : eventTypePricingMappings ) { BigDecimal feePerRevenue = eventTypePricingMapping.getFeePerRevenue ( ) ; if ( feePerRevenue ! = null & & feePerRevenue.intValue ( ) < 0 ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } if ( eventTypePricingMapping.getFeePerRevenue ( ) .intValue ( ) < 0 ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } } } globalPricingRequests.forEach ( ( globalPricingRequest ) - > { if ( checkIfValueLessThanZero ( globalPricingRequest.getFeePerTransact ( ) ) ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } List < EventTypePricingMapping > eventTypePricingMappings = globalPricingRequest.getEventTypePricingList ( ) ; eventTypePricingMappings.forEach ( ( eventTypePricingMapping ) - > { if ( checkIfValueLessThanZero ( eventTypePricingMapping.getFeePerRevenue ( ) ) ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } if ( checkIfValueLessThanZero ( eventTypePricingMapping.getFeePerReg ( ) ) ) { throw ExceptionHelper.badRequest ( `` Fee Per Transaction ca n't be less than zero '' ) ; } } ) ; } ) ; private boolean checkIfValueLessThanZero ( Object object ) { if ( object instanceof BigDecimal ) { if ( object ! = null & & ( ( BigDecimal ) object ) .intValue ( ) < 0 ) { return true ; } } return false ; }
~/.gradle/caches/jars-1~/.gradle/caches/jars-2~/.gradle/caches/jars-3~/.gradle/caches/modules-2~/.gradle/caches/modules-2/files-2.1~/.gradle/caches/transforms-1~/.gradle/caches/transforms-2
( ( rrd == null || ! rrd ) & & null ! = dam & & null ! = dam.getac ( ) & & null ! = dam.getac ( ) .getc ( ) & & null ! = sname & & sname.equalsIgnoreCase ( dam.getac ( ) .getc ( ) ) ) ( ( rrd ! = null ) & & ( rrd.booleanValue ( ) ) ) || ( ( ( ( null == dam ) || ( null == dam.getac ( ) ) || ( null == dam.getac ( ) .getc ( ) ) || ( null == sname ) || ( ! ( sname.equalsIgnoreCase ( dam.getac ( ) .getc ( ) ) ) ) ) ) )
"public class BuildableObject < R , S > { public static class OneParameter < R > { } public static class TwoParameters < R , S > { } interface TwoParamInterface < R , S > { } public static class Implementer < T > implements TwoParamInterface < T , T > { } private final OneParameter < R > first ; private final OneParameter < S > second ; private final TwoParameters < R , S > third ; private final TwoParamInterface < R , S > fourth ; private BuildableObject ( OneParameter < R > first , OneParameter < S > second , TwoParameters < R , S > third , TwoParamInterface < R , S > fourth ) { this.first = first ; this.second = second ; this.third = third ; this.fourth = fourth ; } public static class Builder < R , S > { private OneParameter < R > first = null ; private OneParameter < S > second = null ; private TwoParameters < R , S > third = null ; private TwoParamInterface < R , S > fourth = null ; public Builder ( ) { } public Builder < R , S > first ( OneParameter < R > first ) { this.first = first ; return this ; } public Builder < R , S > second ( OneParameter < S > second ) { this.second = second ; return this ; } public Builder < R , S > third ( TwoParameters < R , S > third ) { this.third = third ; return this ; } public Builder < R , S > fourth ( TwoParamInterface < R , S > fourth ) { this.fourth = fourth ; return this ; } public BuildableObject < R , S > build ( ) { return new BuildableObject < > ( first , second , third , fourth ) ; } } public static void main ( String ... args ) { new Builder < > ( ) .first ( new OneParameter < > ( ) ) .second ( new OneParameter < > ( ) ) .third ( new TwoParameters < > ( ) ) .fourth ( new Implementer < String > ( ) ) .build ( ) ; } }"
"abstract class Parent < V > { protected static < T extends Parent < V > , V > T newInstance ( final Class < T > type , final V value ) { // ... } } class Child extends Parent < XXX > { public static Child newInstance1 ( final XXX value ) { // ... } public static Parent < XXX > newInstance2 ( final XXX value ) { // ... } }"
"@ BenchmarkMode ( Mode.SingleShotTime ) @ Measurement ( iterations = 10 , batchSize = Integer.MAX_VALUE ) @ Warmup ( iterations = 5 , batchSize = Integer.MAX_VALUE ) @ State ( Scope.Thread ) public class Tests { private int value ; @ Setup ( Level.Iteration ) public void setUp ( ) { value = 1230 ; } @ Benchmark public boolean testConstModN ( ) { return 12345 % value == 0 ; } @ Benchmark public boolean testNModConst ( ) { return value % 12345 == 0 ; } } Benchmark Mode Cnt Score Error UnitsTests.testConstModN ss 10 10.789 ± 0.305 s/opTests.testNModConst ss 10 7.550 ± 0.067 s/op"
private class CalendarScheduleUpdatedEventListener extends ScheduleUpdatedEventListener.Stub { @ Override public void onScheduleUpdatedEvent ( ) throws RemoteException { updateCalendar ( ) ; } } private static class CalendarScheduleUpdatedEventListener extends ScheduleUpdatedEventListener.Stub { @ Override public void onScheduleUpdatedEvent ( ) throws RemoteException { updateCalendar ( ) ; - > Compiler error - trying to access a non-static ... } }
public class TestThread { public static Object Lock1 = new Object ( ) ; public static Object Lock2 = new Object ( ) ; public static void main ( String args [ ] ) { ThreadDemo1 T1 = new ThreadDemo1 ( ) ; ThreadDemo2 T2 = new ThreadDemo2 ( ) ; T1.start ( ) ; T2.start ( ) ; } private static class ThreadDemo1 extends Thread { public void run ( ) { synchronized ( Lock1 ) { System.out.println ( `` Thread 1 : Holding lock 1 ... '' ) ; try { Thread.sleep ( 10 ) ; } catch ( InterruptedException e ) { } System.out.println ( `` Thread 1 : Waiting for lock 2 ... '' ) ; synchronized ( Lock2 ) { System.out.println ( `` Thread 1 : Holding lock 1 & 2 ... '' ) ; } } } } private static class ThreadDemo2 extends Thread { public void run ( ) { synchronized ( Lock2 ) { System.out.println ( `` Thread 2 : Holding lock 2 ... '' ) ; try { Thread.sleep ( 10 ) ; } catch ( InterruptedException e ) { } System.out.println ( `` Thread 2 : Waiting for lock 1 ... '' ) ; synchronized ( Lock1 ) { System.out.println ( `` Thread 2 : Holding lock 1 & 2 ... '' ) ; } } } } } Thread 1 : Holding lock 1 ... Thread 2 : Holding lock 2 ... Thread 1 : Waiting for lock 2 ... Thread 2 : Waiting for lock 1 ... public class TestThread { public static Object Lock1 = new Object ( ) ; public static Object Lock2 = new Object ( ) ; public static void main ( String args [ ] ) { ThreadDemo1 T1 = new ThreadDemo1 ( ) ; ThreadDemo2 T2 = new ThreadDemo2 ( ) ; T1.start ( ) ; T2.start ( ) ; } private static class ThreadDemo1 extends Thread { public void run ( ) { synchronized ( Lock1 ) { System.out.println ( `` Thread 1 : Holding lock 1 ... '' ) ; try { Thread.sleep ( 10 ) ; } catch ( InterruptedException e ) { } System.out.println ( `` Thread 1 : Waiting for lock 2 ... '' ) ; synchronized ( Lock2 ) { System.out.println ( `` Thread 1 : Holding lock 1 & 2 ... '' ) ; } } } } private static class ThreadDemo2 extends Thread { public void run ( ) { synchronized ( Lock1 ) { System.out.println ( `` Thread 2 : Holding lock 1 ... '' ) ; try { Thread.sleep ( 10 ) ; } catch ( InterruptedException e ) { } System.out.println ( `` Thread 2 : Waiting for lock 2 ... '' ) ; synchronized ( Lock2 ) { System.out.println ( `` Thread 2 : Holding lock 1 & 2 ... '' ) ; } } } } } Thread 1 : Holding lock 1 ... Thread 1 : Waiting for lock 2 ... Thread 1 : Holding lock 1 & 2 ... Thread 2 : Holding lock 1 ... Thread 2 : Waiting for lock 2 ... Thread 2 : Holding lock 1 & 2 ...
"Hello , # how are you # today . Hello , # how are you # today . @ Overridepublic List < String > findHashTags ( String text ) { if ( text == null ) { return new ArrayList < > ( ) ; } String [ ] tagSet = text.split ( `` `` ) ; Set < String > sortedTags = new HashSet < > ( ) ; List < String > processedTags = new ArrayList < > ( ) ; for ( String tags : tagSet ) { if ( tags.startsWith ( `` # '' ) ) { sortedTags.add ( tags ) ; } } processedTags.addAll ( sortedTags ) ; return processedTags ; } @ Override public List < String > findHashTags ( String text ) { if ( text == null ) { return new ArrayList < > ( ) ; } Set < String > sortedTags = new HashSet < > ( ) ; List < String > processedTags = new ArrayList < > ( ) ; Pattern pattern = Pattern.compile ( `` # \\b . * ? \\b # |\\B # \\w+ '' ) ; Matcher matcher = pattern.matcher ( text ) ; while ( matcher.find ( ) ) { String outString = matcher.group ( ) ; outString = outString.replace ( `` # '' , '' '' ) ; outString = outString.replace ( `` , '' , '' '' ) ; sortedTags.add ( outString ) ; } processedTags.addAll ( sortedTags ) ; return processedTags ; }"
object Foo { def fooInt : List [ scala.Int ] = ? ? ? def fooInteger : List [ java.lang.Integer ] = ? ? ? } public scala.collection.immutable.List < java.lang.Object > fooInt ( ) ; public scala.collection.immutable.List < java.lang.Integer > fooInteger ( ) ;
public class Test16Jit { public static void main ( String [ ] s ) { int max = Integer.MAX_VALUE ; int i = 0 ; long li = 0 ; while ( i > = 0 ) { i++ ; li++ ; if ( i > max ) { System.out.println ( `` i is : `` + i ) ; System.out.println ( `` max is : `` + max ) ; System.out.println ( `` Woo ! ! something really went wrong '' ) ; } } System.out.println ( `` Value of i : `` + i ) ; System.out.println ( `` Total # of iterations : `` + li ) ; } } Value of i : -2147483648Total # of iterations : 2147483648 i is : 2147483636max is : 2147483647Woo ! ! something really went wrongValue of i : -2147483648Total # of iterations : 2147483648 int max = Integer.MAX_VALUE ; - > final int max = Integer.MAX_VALUE ;
"for ( int i = 0 , len = myArray.length ; i < len ; i++ ) { //some code } for ( int i = 0 ; i < myArray.length ; i++ ) { //some code }"
class A { public void a ( ) { System.out.println ( `` A.a '' ) ; } } class B extends A { public void a ( ) { super.a ( ) ; System.out.println ( `` B.a '' ) ; } public void a ( int x ) { } }
"class Student { String name ; int age ; } HashMap < String , Student > studentMap = getStudentMap ( ) ; eligibleStudents = studentMap .entrySet ( ) .stream ( ) .filter ( a - > a.getValue ( ) .getAge ( ) > 20 ) .collect ( Collectors.toList ( Entry : :getKey ) ) ;"
class test { public static void main ( String arg [ ] ) { short x=1 ; short x_square=x*x ; } } java:6 : possible loss of precisionfound : intrequired : short
"int [ ] [ ] arr = { { 11 , 12 , 13 , 14 , 15 , 16 } , { 21 , 22 , 23 , 24 , 25 , 26 } , { 31 , 32 , 33 , 34 , 35 , 36 } , { 41 , 42 , 43 , 44 , 45 , 46 } , { 51 , 52 , 53 , 54 , 55 , 56 } , { 61 , 62 , 63 , 64 , 65 , 66 } } ; int sum = 0 ; int rowsSum = 0 ; int rowIndex = 0 ; for ( int i = 0 ; i < arr.length * arr.length ; i++ ) { System.out.print ( arr [ i / arr.length ] [ i % arr.length ] + `` `` ) ; sum += arr [ i / arr.length ] [ i % arr.length ] ; if ( i % 6 == 0 ) { System.out.println ( ) ; System.out.println ( `` Sum of row `` + ( rowIndex + 1 ) + `` is : `` + sum ) ; rowsSum += sum ; sum = 0 ; rowIndex++ ; } } System.out.println ( ) ; System.out.println ( `` Sum of all rows is : `` + rowsSum ) ;"
class Parent { private void method1 ( ) { System.out.println ( `` Parent 's method1 ( ) '' ) ; } public void method2 ( ) { System.out.println ( `` Parent 's method2 ( ) '' ) ; method1 ( ) ; } } class Child extends Parent { public void method1 ( ) { System.out.println ( `` Child 's method1 ( ) '' ) ; } public static void main ( String args [ ] ) { Child p = new Child ( ) ; p.method2 ( ) ; } } Parent 's method2 ( ) Parent 's method1 ( )
( servlet IndexServlet ( service [ parmas ] ... . ) ( do-post [ params ] ... . ) ( do-get [ params ] ... . ) ) ( servlet-filter SecurityFilter ( do-filter [ params ] ... . ) )
< extension point= '' org.eclipse.ui.propertyPages '' > < page class= '' my.properties.page.class '' id= '' my.properties.page.id '' name= '' My Properties Page '' > < enabledWhen > < instanceof value= '' org.eclipse.core.resources.IFolder '' / > < /enabledWhen > < /page > < /extension >
"this.pdfFile = this.pdfService.read ( source=infile ) ; this.pdfReader = createObject ( `` java '' , '' com.lowagie.text.pdf.PdfReader '' ) .init ( tobinary ( this.pdffile ) ) ; this.pdfWriter = createObject ( `` java '' , `` java.io.FileOutputStream '' ) .init ( CreateObject ( `` java '' , `` java.io.File '' ) .init ( this.outfile ) ) ; this.pdfStamper = createObject ( `` java '' , `` com.lowagie.text.pdf.PdfStamper '' ) .init ( this.pdfReader , this.PdfWriter ) ; this.acroForm = this.pdfStamper.getAcroFields ( ) ; //this.misc.text = replace ( this.misc.text , `` ' '' , `` & # # 39 ; '' , `` all '' ) ; //this.misc.text = replace ( this.misc.text , `` ' '' , `` \u0027 ; '' , `` all '' ) ; //this.misc.text = replace ( this.misc.text , `` ' '' , `` ’ '' , `` all '' ) ; //this.misc.text = replace ( this.misc.text , `` ' '' , `` ' '' , `` all '' ) ; //this.misc.text = PreserveSingleQuotes ( this.misc.text ) ; this.acroForm.setField ( `` text '' , this.misc.text ) ;"
"class A { String code ; long timestamp ; long largestTimestamp ; } Map < String , Long > largestTimestampMap = list.stream ( ) .collect ( Collectors.toMap ( A : :getCode , A : :getTimestamp , Long : :max ) ) ; list.forEach ( a - > a.setLargestTimestamp ( largestTimestampMap.get ( a.getCode ( ) ) ) ) ;"
public static void main ( String [ ] args ) { try { NullPointerException n = new NullPointerException ( ) ; System.out.println ( Lists.newArrayList ( n.getStackTrace ( ) ) ) ; n.printStackTrace ( ) ; System.out.println ( Lists.newArrayList ( n.getStackTrace ( ) ) ) ; throw n ; } catch ( NullPointerException e ) { e.printStackTrace ( ) ; System.out.println ( Lists.newArrayList ( e.getStackTrace ( ) ) ) ; } } java.lang.NullPointerException at MyTest.main ( MyTest.java:231 ) java.lang.NullPointerException at MyTest.main ( MyTest.java:231 ) [ MyTest.main ( AbstractScannerTest.java:231 ) ] [ MyTest.main ( AbstractScannerTest.java:231 ) ] [ MyTest.main ( AbstractScannerTest.java:231 ) ]
"public static int indexOf ( byte [ ] value , int valueCount , byte [ ] str , int strCount , int fromIndex ) { byte first = str [ 0 ] ; int max = ( valueCount - strCount ) ; for ( int i = fromIndex ; i < = max ; i++ ) { [ ... ] } return -1 ; }"
class Taste { } class Cherry extends Taste { } abstract class Coke < T extends Taste > { } class CherryCoke extends Coke < Cherry > { } class x { void drink ( ) { List < Coke < ? > > xs = Arrays.asList ( new CherryCoke ( ) ) ; } }
classA a = new classA ; ... //classA does its stuffclassB b = new classB ( a.getFinalState ( ) ) ; ... // again class does its stuff based on outcome of AclassC c = new classC ( b.getFinalState ( ) ) ;
public abstract class Product { }
"< p class= '' wp-caption-text '' > android m marshmallow < / yourHtml = yourHtml.replaceAll ( `` Your_Regular_Expression '' , '' '' ) ; yourHtml = Html.fromHtml ( yourHtml ) .toString ( ) ;"
"void m ( ) { < selection > < caret > System.out.println ( `` '' ) ; < /selection > } // `` Use existing implementation of 'm ' '' `` true '' enum I { A ( `` a '' ) { void m ( ) { < selection > < caret > System.out.println ( `` '' ) ; < /selection > } } , B ( `` b '' ) { public void m ( ) { System.out.println ( `` '' ) ; } } ; abstract void m ( ) ; I ( String s ) { } }"
"/** * Returns a hash code for this string . The hash code for a * { @ code String } object is computed as * < blockquote > < pre > * s [ 0 ] *31^ ( n-1 ) + s [ 1 ] *31^ ( n-2 ) + ... + s [ n-1 ] * < /pre > < /blockquote > * using { @ code int } arithmetic , where { @ code s [ i ] } is the * < i > i < /i > th character of the string , { @ code n } is the length of * the string , and { @ code ^ } indicates exponentiation . * ( The hash value of the empty string is zero . ) * * @ return a hash code value for this object . */public int hashCode ( ) { int h = hash ; if ( h == 0 & & value.length > 0 ) { char val [ ] = value ; for ( int i = 0 ; i < value.length ; i++ ) { h = 31 * h + val [ i ] ; } hash = h ; } return h ; } s [ 0 ] *31^ ( n-1 ) + s [ 1 ] *31^ ( n-2 ) + ... + s [ n-1 ] for ( int i = 0 ; i < value.length ; i++ ) { h = 31 * h + val [ i ] ; }"
"public static class MyModel { private int left ; private int right ; private int state = 0 ; public MyModel ( int left , int right , int state ) { this.left = left ; this.right = right ; this.state = state ; } public int getLeft ( ) { return left ; } public void setLeft ( int left ) { this.left = left ; } public int getRight ( ) { return right ; } public void setRight ( int right ) { this.right = right ; } public int getState ( ) { return state ; } public void setState ( int state ) { this.state = state ; } } List < MyModel > models = new ArrayList < MyModel > ( ) ; models.add ( new MyModel ( 1 , 2 , 1 ) ) ; models.add ( new MyModel ( 3 , 4 , 2 ) ) ; models.add ( new MyModel ( 5 , 6 , 3 ) ) ; List < Integer > result = models.stream ( ) .map ( p - > { switch ( p.getState ( ) ) { case 1 : return p.getLeft ( ) ; case 2 : return p.getRight ( ) ; case 3 : //Problem here i need add left and right into result list default : return p.getLeft ( ) ; } } ) .collect ( Collectors.toList ( ) ) ;"
class WeighableAgent extends Agent implements Weighable class WeighableNode implements Weighable { private Node node ; public WeighableNode ( Node node ) { this.node = node ; } etc etc ... Node getNode ( ) ; presentationNode.getWeighableNode ( ) .getNode ( ) instanceof Agent instanceof WeighableAgent
count++ ; count++ ; count++ ; for ( int i = 0 ; i < n ; i++ ) { for ( int j = 0 ; j < i*i ; j++ ) { for ( int k = 0 ; k < j ; k++ ) { count++ ; sum++ ; } } } count++ ; return count ; }
`` hyst and hy ''
public void setValue ( int value ) { this.value = value ; } private static int value = 7 ; public static void setValue ( int value ) { value = value ; // compile fails ; ambiguous }
"public final class Object1 { private String a ; private String b ; // constructor getter and setter } public class Object2 { private BigDecimal value1 ; private BigDecimal value2 ; // constructor getter and setter } Object1 { a= '' 15 '' , b= '' XXX '' } , Object2 { value1=12.1 , value2=32.3 } Object1 { a= '' 15 '' , b= '' YYY '' } , Object2 { value1=21.1 , value2=24.3 } Object1 { a= '' 16 '' , b= '' AAA '' } , Object2 { value1=34.1 , value2=45.3 } Object1 { a= '' 15 '' , b= '' BBB '' } , Object2 { value1=23.1 , value2=65.3 } Object1 { a= '' 15 '' , b= '' DDD '' } , Object2 { value1=23.1 , value2=67.3 } Object1 { a= '' 17 '' , b= '' CCC '' } , Object2 { value1=78.1 , value2=2.3 } ... ... .. a= '' 15 '' , { { value1=12.1 , value2=32.3 } , { value1=21.1 , value2=24.3 } , { value1=23.1 , value2=65.3 } , { value1=23.1 , value2=67.3 } } , a= '' 16 '' , { { value1=34.1 , value2=45.3 } } ... Map < String , List < Object2 > > map1 = map.entrySet ( ) .stream ( ) .collect ( Collectors.toMap ( e - > e.getKey ( ) .getA ( ) , list of object with this key ) ;"
@ Testpublic void predicateTest ( ) { Predicate < Boolean > test1 = p - > 1 == 1 ; Predicate < Boolean > test2 = p - > p == ( 1==1 ) ; System.out.println ( `` test1 - true : `` +test1.test ( true ) ) ; System.out.println ( `` test1 - false : `` +test1.test ( false ) ) ; System.out.println ( `` test2 - true : `` +test2.test ( true ) ) ; System.out.println ( `` test2 - false : `` +test2.test ( false ) ) ; }
private final List < JsonScope > stack = new ArrayList < JsonScope > ( ) ; { push ( JsonScope.EMPTY_DOCUMENT ) ; }
"public void methodName ( String param1 , String param2 , String param3 , String param4 ) { //Only print parameters which are not null : if ( param1 ! =null ) out.print ( param1 ) ; if ( param2 ! =null ) out.print ( param2 ) ; if ( param3 ! =null ) out.print ( param3 ) ; if ( param4 ! =null ) out.print ( param4 ) ; }"
public static void main ( String [ ] args ) { System.out.print ( get ( ) ) ; } public static < T > T get ( ) { return ( T ) getObj ( ) ; } public static Object getObj ( ) { return Boolean.FALSE ; }
"if ( param1 ! = null ) user = getUserByParam1 ( param1 ) ; else if ( param2 ! = null ) user = getUserByParam2 ( param2 ) ; ... else if ( lastName ! = null || lastName ! = null ) user = getUserByName ( firstName , lastName ) ; else user = getUserById ( id ) ; if ( user == null ) throw costumException ; return user ;"
"public class TR1 { public static void main ( String [ ] args ) { int [ ] v = { 1 , 2 , 3 , 4 } ; print ( v ) ; x ( v , v [ 2 ] - 1 ) ; print ( v ) ; x ( v , v [ 3 ] - 1 ) ; print ( v ) ; } public static void x ( int array [ ] , int y ) { array [ y ] = array [ y - 1 ] * 2 ; } public static void print ( int array [ ] ) { System.out.print ( array [ 0 ] ) ; for ( int i = 1 ; i < array.length ; i++ ) System.out.print ( `` , `` + array [ i ] ) ; System.out.println ( ) ; } }"
"for ( int omega = 0 ; omega < 1080 ; omega++ ) { //loop for circle creation radius = ( int ) random ( 80 ) ; //random radius for each circle int color1= ( int ) random ( 100 ) ; //little variation of color for each circle int color2= ( int ) random ( 100 ) ; int locationY = ( int ) ( sin ( radians ( omega ) ) *random ( width/2+1 ) ) ; //location calcualtion int locationX = ( int ) ( cos ( radians ( omega ) ) *random ( width/2+1 ) ) ; fill ( 0 , color1+200 , color2+200,50 ) ; ellipse ( locationX , locationY , radius , radius ) ; //draw circles }"
String test = `` someString '' ; if ( someString.length ( ) > /*someValue*/ ) { // decrement Font size } private void setupButton ( ) { Button button = new Button ( ) ; button.setText ( getButtonText ( ) ) ; // getButtonText ( ) is a custom method which returns me a certain String Paint paint = button.getPaint ( ) ; float t = 0 ; if ( paint.measureText ( button.getText ( ) .toString ( ) ) > 323.0 ) { //323.0 is the max width fitting in the button t = getAppropriateTextSize ( button ) ; button.setTextSize ( t ) ; } } private float getAppropriateTextSize ( Button button ) { float textSize = 0 ; Paint paint = button.getPaint ( ) ; textSize = paint.getTextSize ( ) ; while ( paint.measureText ( button.getText ( ) .toString ( ) ) > 323.0 ) { textSize -= 0.25 ; button.setTextSize ( textSize ) ; } return textSize ; }
byte b1 = 3 ; byte b2 = 0 ; b2 = ( byte ) ( b2 + b1 ) ; // line 3System.out.println ( b2 ) ; b2 = 0 ; b2 += b1 ; // line 6System.out.println ( b2 ) ;
public class Foo { final private static Object foo = new Object ( ) ; public static void doSomething ( ) { synchronized ( Foo.foo ) { //code } } } public class Foo { public static void doSomething ( ) { synchronized ( Foo.class ) { //code } } } public class Foo { public synchronized static void doSomething ( ) { //code } }
"public ConwayPanel ( ) { super ( ) ; setBackground ( new Color ( 245 , 255 , 245 , 255 ) ) ; // BG slightly green - all ready paused = true ; // nothing to play ... in FUTURE put cool organism in startX = 0 ; // starting position of the left of the grid startY = 0 ; // starting position of the top of the grid zoom = 15 ; // the width of each cell ( EXCLUDING the lines that make up the boundaries ) cellNum = 1000 ; // The number of cells cells = new boolean [ cellNum ] [ cellNum ] ; // populate cells with false/dead currentX = 0 ; // current x cursor position currentY = 0 ; // current y cursor position flipBoundaries = new int [ 4 ] ; hideCurrentPos = false ; // do n't want to hide cursor position unless explicitly told to do so defineMaps ( ) ; // creates Key enums setKeyBindings ( ) ; // defines Key and KeyNoMask key bindings Timer timer = new Timer ( 100 , new KeyListener ( ) ) ; timer.start ( ) ; setupMouseListeners ( ) ; // creates MouseListener , MouseMotionListener and MouseWheelListener setFocusable ( true ) ; // make isFocusable ( ) true requestFocusInWindow ( ) ; // get focus for listeners } private void defineMaps ( ) { for ( KeyAltMask key : KeyAltMask.values ( ) ) { keyMap.put ( key , false ) ; // value true when key is pressed - all initiated to false } for ( KeyNoMask key : KeyNoMask.values ( ) ) { keyNoMaskMap.put ( key , false ) ; // value true when key is pressed - all initiated to false } } private void setKeyBindings ( ) { InputMap inMap = getInputMap ( JComponent.WHEN_FOCUSED/* or ... WHEN_IN_FOCUSED_WINDOW*/ ) ; ActionMap actMap = getActionMap ( ) ; for ( final KeyAltMask key : KeyAltMask.values ( ) ) { KeyStroke pressed = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , ActionEvent.ALT_MASK , false ) ; // just right ! ( not blocking shortcut key and preventing accidental keyboard mishaps ) KeyStroke released = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , ActionEvent.ALT_MASK , true ) ; // just right ! ( not blocking shortcut key and preventing accidental keyboard mishaps ) inMap.put ( pressed , key.toString ( ) + `` pressed '' ) ; inMap.put ( released , key.toString ( ) + `` released '' ) ; actMap.put ( key.toString ( ) + `` pressed '' , new AbstractAction ( ) { // adds each value of Key into a HashMap ( when the key is pressed ) and puts that HashMap action into ActionMap private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , true ) ; } } ) ; actMap.put ( key.toString ( ) + `` released '' , new AbstractAction ( ) { // adds each value of Key into a HashMap ( when the key is released ) and puts that HashMap action into ActionMap private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , false ) ; } } ) ; } for ( final KeyNoMask key : KeyNoMask.values ( ) ) { KeyStroke pressed = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , 0 , false ) ; KeyStroke released = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , 0 , true ) ; inMap.put ( pressed , key.toString ( ) + `` pressed '' ) ; inMap.put ( released , key.toString ( ) + `` released '' ) ; actMap.put ( key.toString ( ) + `` pressed '' , new AbstractAction ( ) { // adds each value of KeyNoMask into a HashMap ( when the key is pressed ) and puts that HashMap action into ActionMap private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyNoMaskMap.put ( key , true ) ; } } ) ; actMap.put ( key.toString ( ) + `` released '' , new AbstractAction ( ) { // adds each value of KeyNoMask into a HashMap ( when the key is released ) and puts that HashMap action into ActionMap private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyNoMaskMap.put ( key , false ) ; } } ) ; } } private class KeyListener implements ActionListener { // probably not great to have same name , but `` real '' KeyListener not imported @ Override public void actionPerformed ( ActionEvent e ) { for ( KeyAltMask key : KeyAltMask.values ( ) ) { // run through the ALL of the keys if ( keyMap.get ( key ) ) { // if key in HashMap is true ( i.e . the actionPerformed ( ) above set it true ) switch ( key.toString ( ) ) { case `` c '' : // clear all cells and pause if not paused for ( int y = 0 ; y < cellNum ; y++ ) { for ( int x = 0 ; x < cellNum ; x++ ) { cells [ x ] [ y ] = false ; } } if ( ! paused ) { paused = true ; } break ; case `` f '' : // fill all cells and pause if not paused for ( int y = 0 ; y < cellNum ; y++ ) { for ( int x = 0 ; x < cellNum ; x++ ) { cells [ x ] [ y ] = true ; } if ( ! paused ) { paused = true ; } } break ; case `` i '' : // invert all cells and pause if not paused for ( int y = 0 ; y < cellNum ; y++ ) { for ( int x = 0 ; x < cellNum ; x++ ) { cells [ x ] [ y ] = ! cells [ x ] [ y ] ; } if ( ! paused ) { paused = true ; } } break ; case `` l '' : // lock all cells that have a live/true cell for ( int y = 0 ; y < cellNum ; y++ ) { for ( int x = 0 ; x < cellNum ; x++ ) { if ( cells [ x ] [ y ] ) { //set Lock } } } break ; case `` p '' : // pause/play paused = ! paused ; break ; case `` s '' : // step once step = true ; break ; case `` h '' : // hide current cursor position hideCurrentPos = ! hideCurrentPos ; break ; // default : } } } for ( KeyNoMask key : KeyNoMask.values ( ) ) { // run through ALL of the keys ( this is the beauty of key bindings - you can move the cursor diagonally ) . I kinda like a pause after the first key press , though if ( keyNoMaskMap.get ( key ) ) { // if key in HashMap is true ( i.e . the actionPerformed ( ) above returned true ) switch ( key.toString ( ) ) { // move cursor position appropriately and pause if not paused case `` down '' : currentY += currentY == cellNum - 1 ? 0 : 1 ; if ( ! paused ) { paused = true ; } break ; case `` up '' : currentY -= currentY == 0 ? 0 : 1 ; if ( ! paused ) { paused = true ; } break ; case `` left '' : currentX -= currentX == 0 ? 0 : 1 ; if ( ! paused ) { paused = true ; } break ; case `` right '' : currentX += currentX == cellNum - 1 ? 0 : 1 ; if ( ! paused ) { paused = true ; } break ; case `` space '' : // flip pixel at current cursor position flipCell ( currentX , currentY ) ; if ( ! paused ) { paused = true ; } // default : } } } } } package bindingstest ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.KeyEvent ; import java.util.HashMap ; import java.util.Map ; import javax.swing.AbstractAction ; import javax.swing.ActionMap ; import javax.swing.InputMap ; import javax.swing.JComponent ; import javax.swing.JFrame ; import javax.swing.JPanel ; import javax.swing.KeyStroke ; import javax.swing.Timer ; /** * * @ author Dylan AND Hovercraft Full Of Eels */public class BindingsTest { static Map < Key , Boolean > keyMap = new HashMap < > ( ) ; enum Key { // possibly used in conjunction with mask in order to prevent keyboard mishaps - it will probably be ALT in FUTURE a ( KeyEvent.VK_A ) , b ( KeyEvent.VK_B ) , c ( KeyEvent.VK_C ) , d ( KeyEvent.VK_D ) , e ( KeyEvent.VK_E ) , f ( KeyEvent.VK_F ) ; private final int keyCode ; private Key ( int keyCode ) { this.keyCode = keyCode ; // KeyEvent.VK_ ... } public int getKeyCode ( ) { return keyCode ; } } /** * @ param args the command line arguments */ public static void main ( String [ ] args ) { JFrame frame = new JFrame ( ) ; frame.setVisible ( true ) ; frame.setBounds ( 50 , 50 , 1000 , 1000 ) ; JPanel panel = new JPanel ( ) ; panel.setFocusable ( true ) ; panel.requestFocusInWindow ( ) ; for ( Key key : Key.values ( ) ) { keyMap.put ( key , false ) ; } InputMap inMap = panel.getInputMap ( JComponent.WHEN_IN_FOCUSED_WINDOW ) ; ActionMap actMap = panel.getActionMap ( ) ; for ( final Key key : Key.values ( ) ) { KeyStroke pressed = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , ActionEvent.ALT_MASK , false ) ; KeyStroke released = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , ActionEvent.ALT_MASK , true ) ; inMap.put ( pressed , key.toString ( ) + `` pressed '' ) ; inMap.put ( released , key.toString ( ) + `` released '' ) ; actMap.put ( key.toString ( ) + `` pressed '' , new AbstractAction ( ) { private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , true ) ; } } ) ; actMap.put ( key.toString ( ) + `` released '' , new AbstractAction ( ) { private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , false ) ; } } ) ; } for ( final Key key : Key.values ( ) ) { KeyStroke pressed = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , 0 , false ) ; KeyStroke released = KeyStroke.getKeyStroke ( key.getKeyCode ( ) , 0 , true ) ; inMap.put ( pressed , key.toString ( ) + `` pressed '' ) ; inMap.put ( released , key.toString ( ) + `` released '' ) ; actMap.put ( key.toString ( ) + `` pressed '' , new AbstractAction ( ) { private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , true ) ; } } ) ; actMap.put ( key.toString ( ) + `` released '' , new AbstractAction ( ) { private static final long serialVersionUID = 1L ; @ Override public void actionPerformed ( ActionEvent e ) { keyMap.put ( key , false ) ; } } ) ; } Timer timer = new Timer ( 100 , new KeyListener ( ) ) ; timer.start ( ) ; frame.add ( panel ) ; } private static class KeyListener implements ActionListener { @ Override public void actionPerformed ( ActionEvent e ) { for ( Key key : Key.values ( ) ) { // run through the ALL of the keys if ( keyMap.get ( key ) ) { // if key in HashMap is true ( i.e . the actionPerformed ( ) above set it true ) switch ( key.toString ( ) ) { case `` a '' : System.out.println ( `` a '' ) ; break ; case `` b '' : System.out.println ( `` b '' ) ; break ; case `` c '' : System.out.println ( `` c '' ) ; break ; case `` d '' : System.out.println ( `` d '' ) ; break ; case `` e '' : System.out.println ( `` e '' ) ; break ; case `` f '' : System.out.println ( `` f '' ) ; } } } } } }"
"static String [ ] ipList = { `` 127.0.0.1 '' , `` 173.57.51.111 '' , `` 69.696.69.69 '' } ; @ Overridepublic void actionPerformed ( ActionEvent e ) { String newIpGet = textfield.getText ( ) ; try { for ( int i = 0 ; i < Main.ipList.length ; i++ ) { Main.ipList [ i+1 ] = newIpGet.toString ( ) ; // < -- -- ***** Main.write ( Main.ipList [ i ] ) ; } } catch ( IOException e1 ) { e1.printStackTrace ( ) ; } Main.amountOfIps = Main.amountOfIps + 1 ; System.out.println ( `` Text Entered ! `` ) ; System.out.println ( `` There are now `` +Main.ipList.length + `` Ips . `` ) ; textfield.setVisible ( false ) ; label.setVisible ( true ) ; ; }"
List < Integer > list = new ArrayList < > ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ;
"public enum MyEnum { FIRST { @ Override public void someMethod ( ) { ... } } , SECOND { @ Override public void someMethod ( ) { ... } public void someOtherMethod ( ) { ... } } ; public abstract void someMethod ( ) ; }"
"File root = new File ( `` c : /git/ '' ) ; String relative = `` .. /.. \\ '' ; File concatFile = new File ( root.getCanonicalPath ( ) , relative ) ; System.out.println ( `` ConcatFileAbsolute : ' '' + concatFile.getAbsolutePath ( ) + `` ' '' ) ; System.out.println ( `` ConcatFileCanonical : ' '' + concatFile.getCanonicalPath ( ) + `` ' '' ) ; File canonFile = new File ( concatFile.getCanonicalPath ( ) ) ; System.out.println ( `` \ncanonFileCanonical : ' '' + canonFile.getCanonicalPath ( ) + `` ' '' ) ; System.out.println ( `` canonFileAbsolute : ' '' + canonFile.getAbsolutePath ( ) + `` ' '' ) ; System.out.println ( `` canonFileName : ' '' + canonFile.getName ( ) + `` '\n '' ) ; for ( File file : canonFile.listFiles ( ) ) { System.out.println ( `` canon : ' '' + file.getCanonicalPath ( ) + `` ' - absolute : ' '' + file.getAbsolutePath ( ) + `` ' '' ) ; } ConcatFileAbsolute : ' C : \git\.. \.. 'ConcatFileCanonical : ' C : \git\.. \'canonFileCanonical : ' C : \git\'canonFileAbsolute : ' C : \git\.. 'canonFileName : '.. 'canon : ' C : \git\.. \ $ Recycle.Bin ' - absolute : ' C : \git\.. \ $ Recycle.Bin'canon : ' C : \git\.. \.m2 ' - absolute : ' C : \git\.. \.m2'canon : ' C : \git\.. \boot ' - absolute : ' C : \git\.. \boot ' ... other content of C : / ConcatFileAbsolute : ' C : \git.. \.. 'ConcatFileCanonical : ' C : \git\ ' - The following output then lists files under C : \git\"
"java \ -- patch-module com.stackoverflow.examplemodule=ModuleInfoTest : ModuleInfoExample \ -- module-path ModuleInfoExample \ -- add-opens com.stackoverflow.examplemodule/com.stackoverflow.examplepackage=com.stackoverflow.examplemodule \ -- add-opens com.stackoverflow.examplemodule/com.stackoverflow.examplepackage=ALL-UNNAMED \ -- module com.stackoverflow.examplemodule/com.stackoverflow.examplepackage.Main openjdk version `` 13.0.2 '' 2020-01-14OpenJDK Runtime Environment ( build 13.0.2+8 ) OpenJDK 64-Bit Server VM ( build 13.0.2+8 , mixed mode , sharing )"
String keyword=inputdata.nextLine ( ) ; int [ ] key = new int [ keyword.length ( ) ] ; for ( int k = 0 ; k < keyword.length ( ) ; ++k ) { if ( keyword.charAt ( k ) > = ' a ' & & keyword.charAt ( k ) < = ' z ' ) { key [ k ] = ( int ) keyword.charAt ( k ) - ( int ) ' a ' ; } }
"package com.test ; import java.util.ArrayList ; import java.util.LinkedList ; import java.util.List ; import java.util.stream.Collectors ; /** * The Class SimpleClass . */public class SimpleClass { /** * The main method . * * @ param args the arguments */ public static void main ( String [ ] args ) { Employee employee1 = new Employee ( `` 1 '' , `` Employee 1 '' ) ; Employee employee2 = new Employee ( `` 2 '' , `` Employee 2 '' ) ; Employee employee3 = new Employee ( `` 3 '' , `` Employee 3 '' ) ; Employee employee4 = new Employee ( `` 4 '' , `` Employee 4 '' ) ; Employee employee5 = new Employee ( `` 5 '' , `` Employee 5 '' ) ; List < Employee > employeesList = new LinkedList < > ( ) ; employeesList.add ( employee5 ) ; employeesList.add ( employee1 ) ; employeesList.add ( employee2 ) ; employeesList.add ( employee3 ) ; employeesList.add ( employee4 ) ; List < String > neededEmployees = new LinkedList < > ( ) ; neededEmployees.add ( `` 4 '' ) ; neededEmployees.add ( `` 1 '' ) ; neededEmployees.add ( `` 5 '' ) ; /* Nested For Loop */ List < Employee > requiredEmployeesList = new LinkedList < > ( ) ; for ( String employeeId : neededEmployees ) { for ( Employee employee : employeesList ) { if ( employee.getId ( ) .equals ( employeeId ) ) { requiredEmployeesList.add ( employee ) ; } } } printEmployeeDetails ( requiredEmployeesList ) ; /* Using Streams - Not returning the required order */ List < Employee > employeesListNew = employeesList.stream ( ) .filter ( employee - > neededEmployees.stream ( ) .anyMatch ( employeeId - > employeeId.equals ( employee.getId ( ) ) ) ) .collect ( Collectors.toList ( ) ) ; printEmployeeDetails ( employeesListNew ) ; /* Using Streams - adding to a different list based on condition - This provides the right order as required*/ List < Employee > sortedEmployeesList = new ArrayList < > ( ) ; neededEmployees.stream ( ) .filter ( employeeId - > employeesList.stream ( ) .anyMatch ( employee - > employee.getId ( ) .equals ( employeeId ) ? sortedEmployeesList.add ( employee ) : false ) ) .collect ( Collectors.toList ( ) ) ; printEmployeeDetails ( sortedEmployeesList ) ; } /** * Prints the employee details . * * @ param employeesList the employees list */ private static void printEmployeeDetails ( List < Employee > employeesList ) { System.out.println ( `` Printing Employees List '' ) ; for ( Employee employee : employeesList ) { System.out.println ( employee.getId ( ) ) ; System.out.println ( employee.getName ( ) ) ; } } } class Employee { String id ; String name ; // Setter , Getter and AllArgsConstructor }"
grep -- recursive -- extended-regexp ' [ \ ( ] ( List|Set|Map ) .of ' 'our_project '
"List < Integer > ordered = Arrays.asList ( 1 , 2 , 3 , 4 , 4 , 3 , 2 , 1 , 1 , 2 , 3 , 4 , 4 , 3 , 2 , 1 , 1 , 2 , 3 , 4 ) ; List < Integer > result = new CopyOnWriteArrayList < > ( ) ; ordered.parallelStream ( ) .forEach ( result : :add ) ; System.out.println ( ordered ) ; System.out.println ( result ) ; CopyOnWriteArrayList < Integer > result2 = ordered.parallelStream ( ) .unordered ( ) .collect ( Collectors.toCollection ( CopyOnWriteArrayList : :new ) ) ; System.out.println ( ordered ) ; System.out.println ( result2 ) ;"
"public List < Entry > getEntriesForUserId ( int userId ) { User u = DataBaseConnector .getAllUsers ( ) .stream ( ) .filter ( user - > user.getUserId ( ) == userId ) .findFirst ( ) .orElse ( new User ( -1 , `` Error '' ) ; return u.getEntries ( ) ; }"
if ( ++j == 9 ) return true ; if ( j += 1 ) ==9 : return True
"public final class ShapesIntersection implements Maybe < Shape > { public ShapesIntersection ( Shape a , Shape b ) { this.a = a ; this.b = b ; } @ Override public boolean isPresent ( ) { // find out if shapes intersect } @ Override public Shape get ( ) { // find the common piece of two shapes } } public inteface Maybe < T > { T get ( ) ; boolean isPresent ( ) ; default Optional < T > asOptional ( ) { return isPresent ( ) ? Optional.of ( get ( ) ) : Optional.empty ( ) ; } }"
import java.util.ArrayList ; import java.util.List ; public class TesterClass { public static void main ( String [ ] args ) { List < String > names = new ArrayList < > ( ) ; names.add ( `` Akira '' ) ; names.add ( `` Jacky '' ) ; names.add ( `` Sarah '' ) ; names.add ( `` Wolf '' ) ; names.forEach ( ( n ) - > { SayHello hello = ( message ) - > System.out.println ( `` Hello `` + message ) ; hello.speak ( n ) ; } ) ; } interface SayHello { void speak ( String message ) ; } }
import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.IOException ; public class PDF implements fileReader { @ Override public byte [ ] readFile ( File pdfDoc ) { if ( ! pdfDoc.exists ( ) ) { System.out.println ( `` Could not find '' + pdfDoc.getName ( ) + `` on the specified path '' ) ; return null ; } FileInputStream fin = null ; try { fin = new FileInputStream ( pdfDoc ) ; } catch ( FileNotFoundException e ) { System.out.println ( `` '' ) ; e.printStackTrace ( ) ; } byte fileContent [ ] = new byte [ ( int ) pdfDoc.length ( ) ] ; try { fin.read ( fileContent ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } return fileContent ; } } import java.io.File ; public interface fileReader { < T > T readFile ( File fileObject ) ; } public byte [ ] readFile1 ( File pdfDoc ) { if ( ! pdfDoc.exists ( ) ) { System.out.println ( `` Could not find '' + pdfDoc.getName ( ) + `` on the specified path '' ) ; return null ; } FileInputStream fin = null ; try { fin = new FileInputStream ( pdfDoc ) ; byte fileContent [ ] = new byte [ ( int ) pdfDoc.length ( ) ] ; try { fin.read ( fileContent ) ; } catch ( IOException e ) { System.out.println ( `` '' ) ; e.printStackTrace ( ) ; } } catch ( FileNotFoundException e ) { System.out.println ( `` '' ) ; e.printStackTrace ( ) ; } return fileContent ; }
public class Restaurant { private String id ; private String name ; private List < Food > lunches ; private List < Food > dinners ; public Optional < Food > findFoodByName ( String name ) { return Optional.of ( lunches.stream ( ) .filter ( food - > food.getName ( ) .equalsIgnoreCase ( name ) ) .findFirst ( ) ) .orElse ( dinners.stream ( ) .filter ( food - > food.getName ( ) .equalsIgnoreCase ( name ) ) .findFirst ( ) ) ; // .orElse ( null ) ; TODO : how to return empty optional if neither in 'lunches ' nor 'dinners ' ? } }
"protected void set ( String protocol , String host , int port , String file , String ref ) protected void set ( String protocol , String host , int port , String authority , String userInfo , String path , String query , String ref ) public static void setURLStreamHandlerFactory ( URLStreamHandlerFactory fac )"
while ( fileInputStream.available ( ) > 0 ) { fileOutputStream.write ( fileInputStream.read ( ) ) ; } while ( fileInputStream.available ( ) > 0 ) { int data = fileInputStream.read ( ) ; fileOutputStream.write ( data ) ; }
public interface CalledInterface < E > { public E get ( ) { ... } public set ( E e ) { ... } } public class Called implements CalledInterface < String > { ... } public class Caller { protected CalledInterface < ? > c ; public Caller ( CalledInterface < ? > arg ) { c = arg ; } public void run ( ) { // I can do this : c.set ( c.get ( ) ) ; // But I 'd want to be able to do something like : < ? > element = c.get ( ) ; c.set ( element ) ; } }
"List < Entry < Integer , String > > list = Arrays.asList ( Entry.newEntry ( 1 , `` a '' ) , Entry.newEntry ( 2 , `` b '' ) , Entry.newEntry ( 1 , `` c '' ) ) ; Map < Integer , List < String > > map = list.stream ( ) .collect ( Collectors.toMap ( e - > e.getKey ( ) , e - > e.getValue ( ) ) ) ;"
ArrayList < Integer > myList = new ArrayList < > ( ) ; for ( int i = 0 ; i < 100 ; i++ ) { myList.add ( i ) ; } ls = [ 1..100 ]
public static Condition byName ( String name ) throws NotFoundException { for ( Condition c : values ( ) ) { if ( c.name.equals ( name ) ) { return c ; } } throw new NotFoundException ( `` Condition with name [ `` + name + `` ] not found '' ) ; }
if ( MyObject ! = null ) { ... }
"public static < T > boolean equals ( T a , T b ) { if ( a == null ) return b == null ; else if ( b == null ) return false ; else return a.equals ( b ) ; }"
/** * @ return Is this character a full-width character or not . */fun Char.isFullWidth ( ) : Boolean { // What is the most efficient implementation here ? }
class Clidder { private final void flipper ( ) { System.out.println ( `` Clidder '' ) ; } } public class Clidlet extends Clidder { public final void flipper ( ) { System.out.println ( `` Clidlet '' ) ; } public static void main ( String args [ ] ) { new Clidlet ( ) .flipper ( ) ; } }
ArrayList < String > iName = new ArrayList < String > ( ) ; String [ ] array= iName.toArray ( new String [ iName.size ( ) ] ) ; //1 String [ ] array= iName.toArray ( new String [ 0 ] ) ; //2
"TreeSet < Character > characterSet = Sets.newTreeSet ( ) ; String myString = `` string '' ; Character [ ] characterArray = { 's ' , 't ' , ' r ' , ' i ' , ' n ' , ' g ' } ; Collections.addAll ( characterSet , characterArray ) ; // This works Collections.addAll ( characterSet , myString.toCharArray ( ) ) ; // This Does not Character [ ] characterArray = { 's ' , 't ' , ' r ' , ' i ' , ' n ' , ' g ' } ; // works Character [ ] characterArray2 = myString.toCharArray ( ) ; // does not work"
CallCost : Rs.13.04 Duration:00:00:02 Bal : Rs.14.67 2016 mein Promotion Pattern p = Pattern.compile ( `` \\d*\\.\\d+ '' ) ; Matcher m = p.matcher ( s ) ; while ( m.find ( ) ) { System.out.println ( `` > > `` + m.group ( ) ) ; }
int getHighestNumber ( ArrayList < Integer > list ) { if ( list ! = null & & list.size ( ) > 0 ) { if ( list.size ( ) == 1 ) return list.get ( 0 ) ; int maxNum = list.get ( 0 ) ; for ( int item : list ) { if ( item > maxNum ) maxNum = item ; } return maxNum ; } return null ; }
"byte [ ] b = new byte [ ] { 120 , 1 , -67 , -107 , -51 , 106 , 20 , 81 , 16 , -123 , 107 , 18 , -51 , -60 , 31 , -30 , 117 , -4 , -53 , -60 , -123 , 25 , 70 , 71 , 23 , -111 , 89 , 12 , 8 , -83 , 49 , 4 , -14 , -93 , -63 , 73 , 32 , 89 , -55 , -112 , -123 , 10 , -30 , 66 , 69 , -110 , 69 , -64 , -107 , -77 , 8 , -72 , 21 , 23 , -82 , 5 , -97 , -64 , 55 , -48 , -73 , -16 , 97 , 4 , -3 , 14 , -23 , -110 , 75 , 59 , 125 , 39 , 8 , -10 , -123 , 51 , -73 , -86 , -85 , -6 , 84 , -99 , -22 , -18 , 59 , 53 , 51 , 27 , 2 , 95 , 7 , 24 , 95 , -36 , 97 , 95 , 9 , 102 , -17 , 46 , -101 , -51 , -81 , 109 , -82 , -101 , -43 , 44 , -100 , 54 , -5 , -56 , -11 , 9 , -128 , 105 , -81 , -128 , -42 , -25 , -109 , 102 , -121 , -109 , 102 , 63 , 107 , 102 , 75 , 32 , 94 , 79 , -66 , -43 , 109 , -15 , -57 , 9 , 91 , -79 , 55 , -74 , 111 , -49 , -71 , 103 , -51 , 54 , 13 , 58 , -42 , 121 , 112 , 22 , 76 , 3 , -15 , 5 , -32 , -21 , 20 , 70 , 0 , -94 , 19 , -58 , -59 , -59 , 19 , -128 , -81 , 51 , 24 , 1 , -8 , -3 , 23 , -80 , -107 , 35 , -1 , 38 , -104 , -51 , 109 , 54 , 123 , -12 , -6 , -67 , 54 , -69 , 1 , 60 , -57 , 109 , 122 , 27 , -34 , -29 , -70 , 122 , -68 , 10 , 2 , 80 , 111 , -102 , -45 , 29 , 16 , -64 , 1 , 40 , -6 , 15 , -71 , -26 , -15 , 45 , -20 , 103 , 5 , -1 , 65 , -28 , 95 , -57 , 126 , 90 , -16 , -69 , -111 , -33 , -64 , 46 , -6 , 47 , -93 , -72 , -6 , -39 , 3 , -9 , -127 , -6 , 92 , -52 , -9 , 37 , -10 , 89 , -96 , -72 , -18 , -9 , 62 , 93 , 91 , 29 , 109 , 110 , 19 , 30 , -34 , -30 , -57 , -11 , 23 , 103 , -12 , -31 , -21 , 119 , -94 , -57 , -97 , 81 , 32 , -9 , 54 , 120 , 12 , -60 , -21 , -21 , 87 , -66 , 120 , 93 , -84 , 73 , 70 , -117 , -89 , -47 , -78 , -7 , 100 , 94 , 11 , 21 , 77 , 107 , 48 , -21 , 70 , 50 , -81 , 78 , -4 , 72 , 113 , -102 , 79 , 111 , 64 , -99 , -38 , 1 , -108 , -51 , 76 , -3 , -118 , -83 , 5 , -92 , -61 , -25 , -12 , 63 , 103 , -42 , -50 , -21 , -92 , 102 , -74 , 64 , 39 , 61 , -69 , 6 , -82 , 36 , 103 , -47 , 67 , -35 , 2 , 95 , 77 , 27 , -92 , -8 , -26 , -120 , 31 , 77 , 54 , -51 , -41 , -96 , -26 , 28 , -75 , -37 , -96 , 108 , 102 , -102 , -105 , -66 , -45 , 94 , -82 , -93 , -118 , -103 , 101 , -44 , -46 , -5 , -107 , -46 , -72 , 74 , 70 , -97 , 39 , -39 , -25 , 61 , 74 , -27 , -11 , -19 , -100 , -83 , -14 , 5 , 101 , 32 , -107 , -41 , 37 , -34 , 33 , -73 , 51 , -122 , -81 , 67 , -51 , 46 , -75 , 51 , 80 , 54 , -77 , 14 , -67 , 79 , -125 , 126 , -82 , -93 , -118 , -103 , 109 , 80 , 75 , 103 , 89 , 74 , -29 , 14 , 25 , 3 , -69 , 4 , 102 , -110 , 121 , 3 , -101 , -78 , 29 , -72 , -60 , -103 , -30 , 91 , 38 , -98 , -111 , -101 , -115 , -31 , -53 , -88 , -71 , 76 , -19 , 13 , 80 , 54 , 51 , 61 , 115 , -83 , 1 , -112 , -114 , 127 , -103 , 25 , -57 , -112 , 40 , -2 , -36 , 91 , -117 , 108 , -98 , -57 , 95 , 103 , 126 , -109 , -8 , 39 , -32 , 103 , -70 , -50 , -20 , -94 , -1 , 54 , -118 , 43 , 95 , 126 , -103 , 6 , -113 , 59 , 79 , 21 , 26 , -12 , 31 , 16 , -9 , 124 , 119 , -124 , 31 , 107 , 80 , 126 , 74 , -125 , -57 , -99 , -89 , 10 , 13 , -21 , -123 , -98 , -73 , 71 , -8 , -79 , 6 , -27 , -89 , 52 , 120 , -36 , 121 , -86 , -48 , -80 , 91 , -24 , -7 , -59 , 8 , 63 , -42 , -96 , -4 , -108 , 6 , -113 , 59 , -49 , 113 , 52 , -52 , -64 , 121 , 17 , 104 , 5 , 32 , -5 , 55 , -108 , 74 , -2 , -44 } ; InflaterInputStream iis = new InflaterInputStream ( new ByteArrayInputStream ( b ) ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; byte [ ] buf = new byte [ 4096 ] ; int length = 0 ; while ( ( length = iis.read ( buf ) ) > 0 ) { baos.write ( buf , 0 , length ) ; } [ 1 , 0 , 0 , 0 , -128 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 118 , 0 , 0 , 0 , -93 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 67 , 16 , 0 , 0 , 127 , 22 , 0 , 0 , 32 , 69 , 77 , 70 , 0 , 0 , 1 , 0 , 16 , 10 , 0 , 0 , -110 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 108 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -96 , 5 , 0 , 0 , -124 , 3 , 0 , 0 , -4 , 1 , 0 , 0 , 62 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , -64 , 7 , 0 , 60 , -40 , 4 , 0 , 67 , 0 , 111 , 0 , 114 , 0 , 101 , 0 , 108 , 0 , 69 , 0 , 77 , 0 , 70 , 0 , 0 , 0 , 0 , 0 , 17 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 11 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 19 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 75 , 109 , -121 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , -93 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 118 , 0 , 0 , 0 , -93 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 118 , 0 , 0 , 0 , 72 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 78 , 0 , 0 , 0 , 98 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 78 , 0 , 0 , 0 , 71 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 36 , 0 , 0 , 0 , 97 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 36 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 18 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 18 , 0 , 0 , 0 , 107 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 113 , 0 , 0 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , 118 , 0 , 0 , 0 , -93 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -112 , -79 , -63 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 45 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 25 , 0 , 45 , 0 , 33 , 0 , 39 , 0 , 33 , 0 , 32 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 33 , 0 , 24 , 0 , 25 , 0 , 18 , 0 , 16 , 0 , 18 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 7 , 0 , 18 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 32 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 0 , 0 , 39 , 0 , 7 , 0 , 45 , 0 , 16 , 0 , 45 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 18 , 0 , 0 , 0 , 33 , 0 , 0 , 0 , 45 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -112 , -79 , -63 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 35 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 44 , 0 , 37 , 0 , 51 , 0 , 31 , 0 , 51 , 0 , 23 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 51 , 0 , 16 , 0 , 44 , 0 , 10 , 0 , 35 , 0 , 10 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 26 , 0 , 10 , 0 , 18 , 0 , 16 , 0 , 18 , 0 , 23 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 18 , 0 , 31 , 0 , 26 , 0 , 37 , 0 , 35 , 0 , 37 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 18 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 51 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -112 , -79 , -63 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 57 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 68 , 0 , 40 , 0 , 76 , 0 , 33 , 0 , 76 , 0 , 24 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 76 , 0 , 15 , 0 , 68 , 0 , 8 , 0 , 57 , 0 , 8 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 47 , 0 , 8 , 0 , 38 , 0 , 15 , 0 , 38 , 0 , 24 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 38 , 0 , 33 , 0 , 47 , 0 , 40 , 0 , 57 , 0 , 40 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 38 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 76 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -112 , -79 , -63 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 73 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 82 , 0 , 27 , 0 , 90 , 0 , 21 , 0 , 90 , 0 , 14 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 90 , 0 , 6 , 0 , 82 , 0 , 0 , 0 , 73 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 64 , 0 , 0 , 0 , 57 , 0 , 6 , 0 , 57 , 0 , 14 , 0 , 88 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 3 , 0 , 0 , 0 , 57 , 0 , 21 , 0 , 64 , 0 , 27 , 0 , 73 , 0 , 27 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 57 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 90 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 25 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 36 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 36 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 25 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 25 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 36 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 58 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 58 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 47 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 58 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 70 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 81 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 81 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 70 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 70 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 81 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 39 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , -1 , -1 , -1 , 0 , 0 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 8 , 0 , 0 , -128 , 59 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 27 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 92 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 103 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 103 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 54 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 92 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 61 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 60 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 62 , 0 , 0 , 0 , 24 , 0 , 0 , 0 , 92 , 0 , 0 , 0 , 121 , 0 , 0 , 0 , 103 , 0 , 0 , 0 , -106 , 0 , 0 , 0 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 7 , 0 , 0 , -128 , 37 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , -128 , 40 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 14 , 0 , 0 , 0 , 20 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 20 , 0 , 0 , 0 ] ByteArrayOutputStream baos2 = new ByteArrayOutputStream ( ) ; //Deflater defalter = new Deflater ( 1 ) ; DeflaterOutputStream dos = new DeflaterOutputStream ( baos2 ) ; //deflater , false ) ; dos.write ( baos.toByteArray ( ) , 0 , baos.toByteArray ( ) .length ) ; dos.finish ( ) ; [ 120 , -100 , -67 , 84 , 77 , 47 , 3 , 81 , 20 , 61 , -29 , -85 , 45 , 13 , -29 , 91 , 89 , -48 , -108 , -78 , 32 , -77 , -112 , 72 , -22 , -93 , 105 , -126 , -46 , 40 , 9 , 43 , 105 , 44 , -112 , -120 , 5 , 34 , 44 , 36 , 86 , -70 , -112 , -40 , -118 , -123 , -75 , -60 , 47 , -16 , 15 , -8 , 23 , 126 , -116 , -124 , 51 , -45 , -5 , -30 , -103 , -52 , -68 , -63 , 98 , 94 , 114 , -46 , 119 , 122 , -49 , -36 , 123 , -49 , 25 , 106 , 1 , -88 , -29 , -5 , 92 , 17 , -49 , 26 , 95 , -74 , -127 , -101 , 1 , 96 , 108 , 117 , -77 , 12 , 88 , -80 , -37 , -127 , 7 , 126 , -33 , 68 , -16 , -118 , 83 , -47 , 61 , -75 , 2 , -73 , -51 , -64 , -121 , 5 , 20 , 45 , -4 , 56 , -5 , -81 , 9 , 44 , -66 , -73 , 96 , 25 , -25 , -72 , -60 , 17 , -97 , 89 , -59 , 38 , -54 , 94 , -83 , -101 , 72 , 19 , 73 , -23 , 103 , 107 , -49 , -91 , -124 , 91 , -126 , -88 , 122 , -38 , 87 , -17 , -16 , -43 , 123 , 69 , -29 , -34 , 39 , -119 , 33 , -71 , -69 , 103 , -29 , -20 , -50 , -5 , -100 , -48 , 52 , -22 , -50 , -35 , -22 , 11 , -78 , -29 , -120 , -12 , 76 , 73 , 78 , 115 , -62 , -81 , 2 , -8 , -70 , -58 , -73 , -120 , 67 , 31 , 95 , -45 , -8 , 56 , 113 , -32 , -29 , -114 , -58 , 123 , 2 , -8 , -119 , -58 , -35 , 125 , 46 , -120 , 37 , -39 , 115 , 81 , 62 , -117 , -30 , 51 , 37 , -49 , -85 , 61 , -107 , -73 , 4 , -67 , -87 , 59 , 79 , 125 , -54 , -112 , -47 , -3 , -53 , -37 , -97 , 50 , 114 , 49 , 67 , -20 , 18 , 83 , -38 , 123 , -7 , -108 , -61 , 63 , 23 , 100 , -88 , -56 , 114 , 82 , 22 , 99 , 70 , 93 , -106 , -101 , 100 , -24 , -38 , 38 , 76 , -70 , -124 , -105 , -116 , -69 , -75 , -71 , -97 , -21 , 46 , -63 , -39 , 54 , 17 , -106 , 25 , 36 , -25 , -84 , -8 , -120 , 35 , -77 , -100 , -44 , 77 , -69 , 79 , 83 , 49 , -117 , 81 , 98 , -48 , -88 , -101 , 101 , -57 , 105 , -2 , -41 , -28 , 8 , -109 , 110 , -104 , -11 , 70 , -78 , -26 , 126 , 61 , -100 , 57 , -52 , -39 , 57 , 34 , 44 , 51 , 55 , -81 , 118 , 111 , 118 , -61 , 71 , 28 , -103 , 21 , 100 , 103 , -45 , -18 , 43 , -84 , 84 , -7 , 38 , -85 , -100 , 100 , -46 , 85 , -47 , 69 , 109 , -110 , 61 , -109 , 70 , -99 , -61 , 122 , -98 , -38 , 124 , 68 , -65 , 60 , 103 , 58 , -84 , 22 , -120 , -80 , -52 , -14 , -62 , -85 , -46 , 39 , -114 , -52 , 42 , 114 , 55 , -19 , -66 , 67 , 69 , 13 , -3 , 68 , -89 , 81 , 87 , 67 , 27 , -75 , -115 , -98 , 38 , 93 , -55 , 123 , 87 , 109 , -124 , -71 , 95 , -127 , 51 , 75 , -100 , 93 , 33 , -62 , 50 , 43 , -56 , 115 , 53 , -15 , -15 , -97 , -52 , 56 , -18 , 79 , -103 , 101 , -120 , 71 , -4 , -4 , -115 , -10 , -13 , 107 , -115 , 103 , -124 , -121 , 121 , 80 , 117 , -43 , 39 , 14 , 15 , -114 , 111 , -25 , -7 , 0 , -82 , 123 , 112 , 34 , 60 , -88 , -70 , -22 , 19 , -121 , -121 , -78 , 111 , -25 , -19 , 0 , -82 , 123 , 40 , 71 , 120 , 80 , 117 , -43 , 39 , 14 , 15 , 123 , -66 , -99 , -113 , 3 , -72 , -18 , 97 , 47 , -62 , -125 , -86 , -85 , 62 , -65 , -15 , -48 , 73 , -12 , -55 , -2 , -74 , -36 , -65 , 0 , -108 , 74 , -2 , -44 ]"
"import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing . * ; public class Machine { static JLabel label ; static JComboBox typeList ; static JComboBox amountList ; public static void GUI ( ) { JFrame frame = new JFrame ( `` Recyclables Machine '' ) ; frame.setVisible ( true ) ; frame.setSize ( 300,125 ) ; frame.setLocationRelativeTo ( null ) ; frame.setResizable ( false ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; JPanel panel = new JPanel ( ) ; frame.add ( panel ) ; Integer [ ] amounts = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50 } ; amountList = new JComboBox ( amounts ) ; panel.add ( amountList ) ; String [ ] types = { `` Choose Recycable Type '' , '' Plastic Bottle '' , '' Can '' , '' 2 Liter '' , '' Glass Bottle '' } ; typeList = new JComboBox ( types ) ; panel.add ( typeList ) ; JButton button = new JButton ( `` Add '' ) ; panel.add ( button ) ; label = new JLabel ( `` Total Money : 0 cents '' ) ; panel.add ( label ) ; button.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { gettinItDone ( ) ; } } ) ; } public static void gettinItDone ( ) { String type = ( String ) typeList.getSelectedItem ( ) ; int amount = ( int ) amountList.getSelectedItem ( ) ; int money = 0 ; int temp = 0 ; if ( type.equals ( `` Plastic Bottle '' ) ) { temp = 5 * amount ; money = temp + money ; label.setText ( `` Total Money : `` + money + '' cents '' ) ; } else { if ( type.equals ( `` Can '' ) ) { temp = 5 * amount ; money = temp + money ; label.setText ( `` Total Money : `` + money + '' cents '' ) ; } else { if ( type.equals ( `` 2 Liter '' ) ) { temp = 10 * amount ; money = temp + money ; label.setText ( `` Total Money : `` + money + '' cents '' ) ; } else { if ( type.equals ( `` Glass Bottle '' ) ) { temp = 10 * amount ; money = temp + money ; label.setText ( `` Total Money : `` + money + '' cents '' ) ; } else { JOptionPane.showMessageDialog ( null , '' Invalid Recyclable Type '' , `` Error '' , JOptionPane.ERROR_MESSAGE ) ; } } } } } }"
public void drawItems ( ArrayList < T > data ) { data.forEach ( ( T item ) - > { item.draw ( ) ; } ) ; } public interface Drawable { public void draw ( ) ; } public class Item implements Drawable { @ Override public void draw ( GraphicsContext gc ) { // ... } } public void drawItems ( ArrayList < Drawable > data ) { data.forEach ( ( Drawable item ) - > { item.draw ( ) ; } ) ; }
"< ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 https : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < parent > < groupId > org.springframework.boot < /groupId > < artifactId > spring-boot-starter-parent < /artifactId > < version > 2.1.8.RELEASE < /version > < relativePath/ > < ! -- lookup parent from repository -- > < /parent > < groupId > org.grorg < /groupId > < artifactId > grointegration < /artifactId > < version > 0.0.1-SNAPSHOT < /version > < name > grointegration < /name > < description > Demo project for Spring Boot < /description > < properties > < java.version > 1.8 < /java.version > < /properties > < dependencies > < dependency > < groupId > org.springframework.boot < /groupId > < artifactId > spring-boot-starter-integration < /artifactId > < /dependency > < dependency > < groupId > org.springframework.integration < /groupId > < artifactId > spring-integration-ip < /artifactId > < /dependency > < dependency > < groupId > org.springframework.boot < /groupId > < artifactId > spring-boot-starter-test < /artifactId > < scope > test < /scope > < /dependency > < /dependencies > < build > < plugins > < plugin > < groupId > org.springframework.boot < /groupId > < artifactId > spring-boot-maven-plugin < /artifactId > < /plugin > < /plugins > < /build > < /project > package org.grorg.grointegration ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.Bean ; import org.springframework.core.convert.converter.Converter ; import org.springframework.integration.config.IntegrationConverter ; import org.springframework.integration.dsl.IntegrationFlow ; import org.springframework.integration.dsl.IntegrationFlows ; import org.springframework.integration.dsl.Transformers ; import org.springframework.integration.ip.dsl.Tcp ; import org.springframework.stereotype.Component ; class Test { @ Override public String toString ( ) { return `` test '' ; } } @ Component @ IntegrationConverterclass Convert implements Converter < String , Test > { @ Override public Test convert ( String s ) { return new Test ( ) ; } } @ SpringBootApplicationpublic class Main { public static void main ( String [ ] args ) { SpringApplication.run ( GrointegrationApplication.class , args ) ; } @ Bean public IntegrationFlow server ( ) { return IntegrationFlows .from ( Tcp.inboundGateway ( Tcp.netServer ( 1234 ) ) ) .transform ( Transformers.objectToString ( ) ) .transform ( Test.class , id - > id ) // in 2.1 I could use .convert ( Test.class ) but the problem is the same .log ( ) .handle ( ( p , h ) - > `` OK '' ) .get ( ) ; } } telnet localhost 1234 > test > OK [ ... ] org.springframework.integration.handler.ReplyRequiredException : No reply produced by handler 'server.org.springframework.integration.config.ConsumerEndpointFactoryBean # 1 ' , and its 'requiresReply ' property is set to true. [ ... ]"
public interface abc { public < T extends JPanel > T initalize ( ) ; } public class Startup_thePanel extends JPanel implements abc { public Startup_thePanel initalize ( ) { return this ; } }
"for ( String name : controllerToPartitionModels.keySet ( ) ) { List < PartitionModel > partitionsList = controllerToPartitionModels.get ( name ) ; refreshPartition ( partitionsList , false ) ; } private void refreshPartition ( List < PartitionModel > partitionModels , boolean isSyncAll ) { ITModule.getITService ( ) .refreshPartitionStatus ( new ArrayList < > ( partitionModels ) , isSyncAll ) .subscribeOn ( Schedulers.io ( ) ) .observeOn ( Schedulers.io ( ) ) .subscribe ( new Action ( ) { @ Override public void run ( ) throws Exception { Logger.get ( ) .d ( ATTActionManager.this , `` Refreshing request sent successfully for list of size : `` + partitionModels.size ( ) ) ; } } , ( @ NonNull Throwable throwable ) - > { Logger.get ( ) .d ( ATTActionManager.this , `` Error on Refresh request '' ) ; } ) ; }"
"//This code is executed recursively ( at the end , main ( args ) is called again ) //Create the threadpool for requests//Threads is an argument that is set to 750.ThreadPoolExecutor executor = ( ThreadPoolExecutor ) Executors.newFixedThreadPool ( threads ) ; Deque < String > proxies = DB.getProxiesToCheck ( ) ; while ( proxies.isEmpty ( ) == false ) { try { String [ ] split = proxies.pop ( ) .split ( `` : '' ) ; Runnable [ ] checks = new Runnable [ ] { //HTTP check new RunnableProxyRequest ( split [ 0 ] , split [ 1 ] , Proxy.Type.HTTP , false ) , //SSL check new RunnableProxyRequest ( split [ 0 ] , split [ 1 ] , Proxy.Type.HTTP , true ) , //SOCKS check new RunnableProxyRequest ( split [ 0 ] , split [ 1 ] , Proxy.Type.SOCKS , false ) //Add more checks to this list as time goes ... } ; for ( Runnable check : checks ) { executor.submit ( check ) ; } } catch ( IndexOutOfBoundsException e ) { continue ; } } //Proxy detailsprivate String proxyIp ; private int proxyPort ; private Proxy.Type testingType ; //Request detailsprivate boolean useSsl ; public ProxyRequest ( String proxyIp , String proxyPort , Proxy.Type testingType , boolean useSsl ) { this.proxyIp = proxyIp ; try { this.proxyPort = Integer.parseInt ( proxyPort ) ; } catch ( NumberFormatException e ) { this.proxyPort = -1 ; } this.testingType = testingType ; this.useSsl = useSsl ; } public boolean isWorkingProxy ( ) { //Case of an invalid proxy if ( proxyPort == -1 ) { return false ; } HttpURLConnection con = null ; //Perform checks on URL //IF any exception occurs here , the proxy is obviously bad . try { URL url = new URL ( this.getTestingUrl ( ) ) ; //Create proxy Proxy p = new Proxy ( this.testingType , new InetSocketAddress ( this.proxyIp , this.proxyPort ) ) ; //No redirect HttpURLConnection.setFollowRedirects ( false ) ; //Open connection with proxy con = ( HttpURLConnection ) url.openConnection ( p ) ; //Set the request method con.setRequestMethod ( `` GET '' ) ; //Set max timeout for a request . con.setConnectTimeout ( this.timeout ) ; } catch ( MalformedURLException e ) { System.out.println ( `` The testing URL is bad . Please fix this . `` ) ; return false ; } catch ( Exception e ) { return false ; } try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( con.getInputStream ( ) ) ) ; ) { String inputLine = null ; StringBuilder response = new StringBuilder ( ) ; while ( ( inputLine = in.readLine ( ) ) ! = null ) { response.append ( inputLine ) ; } //A valid proxy ! return con.getResponseCode ( ) > 0 ; } catch ( Exception e ) { return false ; } } public class RunnableProxyRequest extends ProxyRequest implements Runnable { public RunnableProxyRequest ( String proxyIp , String proxyPort , Proxy.Type testingType , boolean useSsl ) { super ( proxyIp , proxyPort , testingType , useSsl ) ; } @ Override public void run ( ) { String test = super.getTest ( ) ; if ( super.isWorkingProxy ( ) ) { System.out.println ( `` -- Working proxy : `` + super.getProxy ( ) + `` | Test : `` + test ) ; this.updateDB ( true , test ) ; } else { System.out.println ( `` -- Not working : `` + super.getProxy ( ) + `` | Test : `` + test ) ; this.updateDB ( false , test ) ; } } private void updateDB ( boolean success , String testingType ) { switch ( testingType ) { case `` SSL '' : DB.updateSsl ( super.getProxyIp ( ) , super.getProxyPort ( ) , success ) ; break ; case `` HTTP '' : DB.updateHttp ( super.getProxyIp ( ) , super.getProxyPort ( ) , success ) ; break ; case `` SOCKS '' : DB.updateSocks ( super.getProxyIp ( ) , super.getProxyPort ( ) , success ) ; break ; default : break ; } } } //Locker for async private static Object locker = new Object ( ) ; private static void executeUpdateQuery ( String query , String proxy , int port , boolean toSet ) { synchronized ( locker ) { //Some prepared statements here . } }"
"int week = 51 ; LocalDate wkstart = LocalDate.now ( ) .with ( IsoFields.WEEK_OF_WEEK_BASED_YEAR , week ) ; LocalDate mon = wks.plusDays ( 1 ) ; LocalDate tue = wks.plusDays ( 2 ) ; LocalDate wed = wks.plusDays ( 3 ) ; LocalDate thu = wks.plusDays ( 4 ) ; LocalDate fri = wks.plusDays ( 5 ) ; LocalDate sat = wks.plusDays ( 6 ) ; LocalDate wkend = wks.plusDays ( 7 ) ;"
"private static boolean moreThanOnce ( ArrayList < Integer > list , int number ) { if ( list.contains ( number ) ) { return true ; } return false ; }"
"import java.util.Spliterator ; import java.util.function.Function ; import java.util.stream.Collectors ; import java.util.stream.Stream ; import java.util.stream.StreamSupport ; /** * Created by dsmith on 7/21/15 . */public class SpliteratorTest { public static void main ( String [ ] args ) { System.out.println ( `` Test 1 '' ) ; test1 ( ) ; System.out.println ( `` Test 2 '' ) ; test2 ( ) ; } public static void test1 ( ) { final Spliterator < String > spliterator1 = Stream.of ( `` a '' , `` b '' , `` c '' , `` d '' , `` e '' , `` f '' ) .spliterator ( ) ; StreamSupport.stream ( spliterator1 , false ) . limit ( 3 ) . collect ( Collectors.toList ( ) ) ; System.out.println ( `` spliterator1.estimateSize ( ) = `` + spliterator1.estimateSize ( ) ) ; } public static void test2 ( ) { final Spliterator < String > spliterator1 = Stream.of ( `` a '' , `` b '' , `` c '' , `` d '' , `` e '' , `` f '' ) .spliterator ( ) ; final Spliterator < String > spliterator2 = Stream.of ( `` 1 '' , `` 2 '' , `` 3 '' , `` 4 '' , `` 5 '' , `` 6 '' ) .spliterator ( ) ; Stream.of ( StreamSupport.stream ( spliterator1 , false ) , StreamSupport.stream ( spliterator2 , false ) ) . flatMap ( Function.identity ( ) ) . limit ( 3 ) . collect ( Collectors.toList ( ) ) ; System.out.println ( `` spliterator1.estimateSize ( ) = `` + spliterator1.estimateSize ( ) ) ; System.out.println ( `` spliterator2.estimateSize ( ) = `` + spliterator2.estimateSize ( ) ) ; } } Test 1spliterator1.estimateSize ( ) = 3Test 2spliterator1.estimateSize ( ) = 0spliterator2.estimateSize ( ) = 6"
public class Handler { private Supplier < Foo > foo ; public void handle ( Bar bar ) { foo = ( ) - > bar.getFoo ( ) ; } } for ( Method method : Handler.class.getDeclaredMethods ( ) ) { if ( method.getParameterCount ( ) == 1 & & Bar.class.isAssignableFrom ( method.getParameterTypes ( ) [ 0 ] ) ) { // This is the method you are looking for } } java.lang.IllegalAccessException : class HandlerService can not access a member of class Handler with modifiers `` private static ''
What is the weather in 75042 ? public String getZipcode ( String inputLine ) { Pattern pattern = Pattern.compile ( `` .*weather.* ( [ 0-9 ] + ) . * '' ) ; Matcher matcher = pattern.matcher ( inputLine ) ; if ( matcher.find ( ) ) { return matcher.group ( 1 ) .toString ( ) ; } return `` Zipcode Not Found . `` ; }
public class Test { public static void main ( String [ ] args ) { System.out.println ( X.Y.Z ) ; } } class X { static class Y { static String Z = `` balck '' ; } static C Y = new C ( ) ; } class C { String Z = `` white '' ; }
"public Set < String > getSubset ( String s ) { result = new HashSet < String > ( ) ; getSubset ( root , s ) ; return result ; } private void getSubset ( TrieNode node , String s ) { TrieNode n = node ; for ( char ch : s.toCharArray ( ) ) { if ( n.children [ ch ] ! = null ) { n = n.children [ ch ] ; continue ; } return ; } getSubsetR ( n , s ) ; } private void getSubsetR ( TrieNode node , String s ) { for ( char ch = 0 ; ch < node.children.length ; ch++ ) { TrieNode child = node.children [ ch ] ; if ( child ! = null ) getSubsetR ( child , s + ch ) ; } if ( node.leaf ) { result.add ( s ) ; } }"
public class B < T > { public void test ( List < Integer > i ) { } } public class A extends B { // do n't compile @ Override public void test ( List < Integer > i ) { } } public class A extends B { // compile @ Override public void test ( List i ) { public class A extends B < String > { // compile @ Override public void test ( List < Integer > i ) {
6*x + 7 = 7*x + 2 - 3*x
"-- debug-jvm bootRun { jvmArgs= [ `` -agentlib : jdwp=transport=dt_socket , server=n , suspend=y , address=localhost:5005 '' ] } * What went wrong : Execution failed for task ' : bootRun'. > The value for property 'enabled ' is final and can not be changed any further . * Try : Run with -- info or -- debug option to get more log output . Run with -- scan to get full insights . * Exception is : org.gradle.api.tasks.TaskExecutionException : Execution failed for task ' : bootRun ' . at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.lambda $ executeIfValid $ 1 ( ExecuteActionsTaskExecuter.java:205 ) at org.gradle.internal.Try $ Failure.ifSuccessfulOrElse ( Try.java:263 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid ( ExecuteActionsTaskExecuter.java:203 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute ( ExecuteActionsTaskExecuter.java:184 ) at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute ( CleanupStaleOutputsExecuter.java:114 ) at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute ( FinalizePropertiesTaskExecuter.java:46 ) at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute ( ResolveTaskExecutionModeExecuter.java:62 ) at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute ( SkipTaskWithNoActionsExecuter.java:57 ) at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute ( SkipOnlyIfTaskExecuter.java:56 ) at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute ( CatchExceptionTaskExecuter.java:36 ) at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter $ 1.executeTask ( EventFiringTaskExecuter.java:77 ) at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter $ 1.call ( EventFiringTaskExecuter.java:55 ) at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter $ 1.call ( EventFiringTaskExecuter.java:52 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ CallableBuildOperationWorker.execute ( DefaultBuildOperationExecutor.java:416 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ CallableBuildOperationWorker.execute ( DefaultBuildOperationExecutor.java:406 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ 1.execute ( DefaultBuildOperationExecutor.java:165 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute ( DefaultBuildOperationExecutor.java:250 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute ( DefaultBuildOperationExecutor.java:158 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.call ( DefaultBuildOperationExecutor.java:102 ) at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call ( DelegatingBuildOperationExecutor.java:36 ) at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute ( EventFiringTaskExecuter.java:52 ) at org.gradle.execution.plan.LocalTaskNodeExecutor.execute ( LocalTaskNodeExecutor.java:41 ) at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph $ InvokeNodeExecutorsAction.execute ( DefaultTaskExecutionGraph.java:372 ) at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph $ InvokeNodeExecutorsAction.execute ( DefaultTaskExecutionGraph.java:359 ) at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph $ BuildOperationAwareExecutionAction.execute ( DefaultTaskExecutionGraph.java:352 ) at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph $ BuildOperationAwareExecutionAction.execute ( DefaultTaskExecutionGraph.java:338 ) at org.gradle.execution.plan.DefaultPlanExecutor $ ExecutorWorker.lambda $ run $ 0 ( DefaultPlanExecutor.java:127 ) at org.gradle.execution.plan.DefaultPlanExecutor $ ExecutorWorker.execute ( DefaultPlanExecutor.java:191 ) at org.gradle.execution.plan.DefaultPlanExecutor $ ExecutorWorker.executeNextNode ( DefaultPlanExecutor.java:182 ) at org.gradle.execution.plan.DefaultPlanExecutor $ ExecutorWorker.run ( DefaultPlanExecutor.java:124 ) at org.gradle.internal.concurrent.ExecutorPolicy $ CatchAndRecordFailures.onExecute ( ExecutorPolicy.java:64 ) at org.gradle.internal.concurrent.ManagedExecutorImpl $ 1.run ( ManagedExecutorImpl.java:48 ) at org.gradle.internal.concurrent.ThreadFactoryImpl $ ManagedThreadRunnable.run ( ThreadFactoryImpl.java:56 ) Caused by : java.lang.IllegalStateException : The value for property 'enabled ' is final and can not be changed any further . at org.gradle.api.internal.provider.AbstractProperty $ FinalizedValue.beforeMutate ( AbstractProperty.java:382 ) at org.gradle.api.internal.provider.AbstractProperty.assertCanMutate ( AbstractProperty.java:215 ) at org.gradle.api.internal.provider.AbstractProperty.setSupplier ( AbstractProperty.java:179 ) at org.gradle.api.internal.provider.DefaultProperty.set ( DefaultProperty.java:69 ) at org.gradle.process.internal.JvmOptions.jvmArgs ( JvmOptions.java:218 ) at org.gradle.process.internal.JvmOptions.setJvmArgs ( JvmOptions.java:178 ) at org.gradle.process.internal.DefaultJavaForkOptions.setJvmArgs ( DefaultJavaForkOptions.java:89 ) at org.gradle.process.internal.DefaultJavaForkOptions_Decorated.setJvmArgs ( Unknown Source ) at org.gradle.process.internal.JavaExecHandleBuilder.setJvmArgs ( JavaExecHandleBuilder.java:113 ) at org.gradle.api.tasks.JavaExec.setJvmArgs ( JavaExec.java:172 ) at org.springframework.boot.gradle.tasks.run.BootRun_Decorated.setJvmArgs ( Unknown Source ) at org.springframework.boot.gradle.tasks.run.BootRun.exec ( BootRun.java:73 ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at org.gradle.internal.reflect.JavaMethod.invoke ( JavaMethod.java:104 ) at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute ( StandardTaskAction.java:49 ) at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute ( StandardTaskAction.java:42 ) at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute ( StandardTaskAction.java:28 ) at org.gradle.api.internal.AbstractTask $ TaskActionWrapper.execute ( AbstractTask.java:727 ) at org.gradle.api.internal.AbstractTask $ TaskActionWrapper.execute ( AbstractTask.java:694 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter $ 3.run ( ExecuteActionsTaskExecuter.java:568 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ RunnableBuildOperationWorker.execute ( DefaultBuildOperationExecutor.java:402 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ RunnableBuildOperationWorker.execute ( DefaultBuildOperationExecutor.java:394 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor $ 1.execute ( DefaultBuildOperationExecutor.java:165 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute ( DefaultBuildOperationExecutor.java:250 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute ( DefaultBuildOperationExecutor.java:158 ) at org.gradle.internal.operations.DefaultBuildOperationExecutor.run ( DefaultBuildOperationExecutor.java:92 ) at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run ( DelegatingBuildOperationExecutor.java:31 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction ( ExecuteActionsTaskExecuter.java:553 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions ( ExecuteActionsTaskExecuter.java:536 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access $ 300 ( ExecuteActionsTaskExecuter.java:109 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter $ TaskExecution.executeWithPreviousOutputFiles ( ExecuteActionsTaskExecuter.java:276 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter $ TaskExecution.execute ( ExecuteActionsTaskExecuter.java:265 ) at org.gradle.internal.execution.steps.ExecuteStep.lambda $ execute $ 1 ( ExecuteStep.java:33 ) at org.gradle.internal.execution.steps.ExecuteStep.execute ( ExecuteStep.java:33 ) at org.gradle.internal.execution.steps.ExecuteStep.execute ( ExecuteStep.java:26 ) at org.gradle.internal.execution.steps.CleanupOutputsStep.execute ( CleanupOutputsStep.java:67 ) at org.gradle.internal.execution.steps.CleanupOutputsStep.execute ( CleanupOutputsStep.java:36 ) at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute ( ResolveInputChangesStep.java:49 ) at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute ( ResolveInputChangesStep.java:34 ) at org.gradle.internal.execution.steps.CancelExecutionStep.execute ( CancelExecutionStep.java:43 ) at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout ( TimeoutStep.java:73 ) at org.gradle.internal.execution.steps.TimeoutStep.execute ( TimeoutStep.java:54 ) at org.gradle.internal.execution.steps.CatchExceptionStep.execute ( CatchExceptionStep.java:34 ) at org.gradle.internal.execution.steps.CreateOutputsStep.execute ( CreateOutputsStep.java:44 ) at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute ( SnapshotOutputsStep.java:54 ) at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute ( SnapshotOutputsStep.java:38 ) at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute ( BroadcastChangingOutputsStep.java:49 ) at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache ( CacheStep.java:159 ) at org.gradle.internal.execution.steps.CacheStep.execute ( CacheStep.java:72 ) at org.gradle.internal.execution.steps.CacheStep.execute ( CacheStep.java:43 ) at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute ( StoreExecutionStateStep.java:44 ) at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute ( StoreExecutionStateStep.java:33 ) at org.gradle.internal.execution.steps.RecordOutputsStep.execute ( RecordOutputsStep.java:38 ) at org.gradle.internal.execution.steps.RecordOutputsStep.execute ( RecordOutputsStep.java:24 ) at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause ( SkipUpToDateStep.java:92 ) at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda $ execute $ 0 ( SkipUpToDateStep.java:85 ) at org.gradle.internal.execution.steps.SkipUpToDateStep.execute ( SkipUpToDateStep.java:55 ) at org.gradle.internal.execution.steps.SkipUpToDateStep.execute ( SkipUpToDateStep.java:39 ) at org.gradle.internal.execution.steps.ResolveChangesStep.execute ( ResolveChangesStep.java:76 ) at org.gradle.internal.execution.steps.ResolveChangesStep.execute ( ResolveChangesStep.java:37 ) at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute ( MarkSnapshottingInputsFinishedStep.java:36 ) at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute ( MarkSnapshottingInputsFinishedStep.java:26 ) at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute ( ResolveCachingStateStep.java:94 ) at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute ( ResolveCachingStateStep.java:49 ) at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute ( CaptureStateBeforeExecutionStep.java:79 ) at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute ( CaptureStateBeforeExecutionStep.java:53 ) at org.gradle.internal.execution.steps.ValidateStep.execute ( ValidateStep.java:74 ) at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda $ execute $ 2 ( SkipEmptyWorkStep.java:78 ) at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute ( SkipEmptyWorkStep.java:78 ) at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute ( SkipEmptyWorkStep.java:34 ) at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute ( MarkSnapshottingInputsStartedStep.java:39 ) at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute ( LoadExecutionStateStep.java:40 ) at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute ( LoadExecutionStateStep.java:28 ) at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute ( DefaultWorkExecutor.java:33 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid ( ExecuteActionsTaskExecuter.java:192 ) ... 30 more* Get more help at https : //help.gradle.org"
"./LinkedList.java:170 : deleteNode ( LinkedList < T > .Node < T > , LinkedList < T > .Node < T > , LinkedList < T > .Node < T > ) in LinkedList < T > can not be applied to ( LinkedList < T > .Node < T > , LinkedList < T > .Node < T > , LinkedList < T > .Node < T > ) deleteNode ( nodeToBeRemoved , next , prev ) ; import java.util.Iterator ; import java.util.NoSuchElementException ; import java.util.ConcurrentModificationException ; public class LinkedList < T > implements Iterable < T > { private Node < T > sentinel ; private long modCount ; //apparently no unsigned int 's in Java . public LinkedList ( ) { modCount = 0 ; sentinel = new Node < T > ( null ) ; sentinel.setNext ( sentinel ) ; sentinel.setPrev ( sentinel ) ; } public void append ( T t ) { /* APPEND : ... [ -- -- - ] | | [ -1st- ] | | inFront- > [ SENTL ] | | < -- [ newNode ] behind -- > [ -- -- - ] | | [ -- -- - ] ... */ Node < T > newNode = new Node < T > ( t ) ; Node < T > inFront = sentinel ; Node < T > behind = sentinel.prev ( ) ; //now actually insert : insertNode ( newNode , inFront , behind ) ; } public void prepend ( T t ) { /* PREPEND : ... [ -- -- - ] | | inFront- > [ -1st- ] | | < -- [ newNode ] behind -- > [ SENTL ] | | [ -- -- - ] | | [ -- -- - ] */ Node < T > newNode = new Node < T > ( t ) ; Node < T > behind = sentinel ; Node < T > inFront = sentinel.next ( ) ; //now actually insert : insertNode ( newNode , inFront , behind ) ; } public void removeHead ( ) { /* REMOVE-FIRST : ... inFront -- > [ -- -- - ] | | [ -1st- ] < -- *delete* | | behind -- - > [ SENTL ] | | [ -- -- - ] | | [ -- -- - ] ... */ Node < T > inFront = sentinel.next ( ) .next ( ) ; Node < T > behind = sentinel ; Node < T > toDelete = sentinel.next ( ) ; // now actually delete deleteNode ( toDelete , inFront , behind ) ; } private void insertNode ( Node < T > newNode , Node < T > inFront , Node < T > behind ) { newNode.setNext ( inFront ) ; newNode.setPrev ( behind ) ; inFront.setPrev ( newNode ) ; behind.setNext ( newNode ) ; modCount++ ; } private void deleteNode ( Node < T > toDelete , Node < T > inFront , Node < T > behind ) { inFront.setPrev ( behind ) ; behind.setNext ( inFront ) ; toDelete.setNext ( null ) ; toDelete.setPrev ( null ) ; modCount++ ; } @ Override public Iterator < T > iterator ( ) { return new LinkedListIterator < T > ( sentinel ) ; } /* .. : : MyIterator : :.. private inner class */ public class LinkedListIterator < T > implements Iterator < T > { private Node < T > cursor ; private Node < T > lastReturned ; private long iterModCountPerspective ; public LinkedListIterator ( Node < T > sentinel ) { cursor = sentinel.next ( ) ; lastReturned = null ; iterModCountPerspective = modCount ; } private boolean hasBodhi ( ) { // bodhi : in Buddhism , bodhi is the understanding of the `` true nature of things '' . return ( iterModCountPerspective == modCount ) ; } @ Override public boolean hasNext ( ) { if ( cursor == sentinel ) return false ; return true ; } @ Override public T next ( ) { if ( ! this.hasNext ( ) ) { throw new NoSuchElementException ( ) ; } else if ( ! hasBodhi ( ) ) { throw new ConcurrentModificationException ( ) ; } else { T aux = cursor.data ( ) ; lastReturned = cursor ; cursor = cursor.next ( ) ; return aux ; } } @ Override public void remove ( ) { //check we 're allowed to remove : if ( lastReturned == null ) { throw new IllegalStateException ( ) ; } if ( ! hasBodhi ( ) ) { throw new ConcurrentModificationException ( ) ; } //setup vars to perform deletion : Node < T > nodeToBeRemoved = lastReturned ; Node < T > next = nodeToBeRemoved.next ( ) ; Node < T > prev = nodeToBeRemoved.prev ( ) ; // now delete deleteNode ( nodeToBeRemoved , next , prev ) ; iterModCountPerspective++ ; //now setup vars for exit : cursor = next ; lastReturned = null ; // illegal to remove yet-again before first calling next ( ) } } /* .. : : Node : :.. private , compositional inner class Interface : void setNext ( Node n ) // change the Node in front of this Node void setPrev ( Node p ) // change the Node behind this Node Node next ( ) // returns the Node in front of this Node Node prev ( ) // returns the Node behind this Node T data ( ) // returns the data stored inside this Node */ private class Node < T > { private T data ; private Node < T > next ; private Node < T > prev ; public Node ( T d ) { data = d ; next = null ; prev = null ; } /* METHOD setNext ( Node < T > n ) This method takes the parameter Node passed-in and puts it in front of this Node . input - Node n output - none eg : node4.setNext ( node5 ) ; */ public void setNext ( Node < T > n ) { next = n ; } /* METHOD setPrev ( Node < T > n ) This method takes the parameter Node passed-in and puts it behind of this Node . input - Node p output - none eg : node5.setPrev ( node4 ) ; */ public void setPrev ( Node < T > p ) { prev = p ; } /* METHOD next ( ) This method returns the Node in front of this Node . input - none output - Node infront of this ( this.next ) eg : Node nodeInFrontOfNode4 = node4.next ( ) ; */ public Node < T > next ( ) { return next ; } /* METHOD prev ( ) This method returns the Node behind of this Node . input - none output - Node behind of this ( this.prev ) eg : Node nodeBehindOfNode4 = node4.prev ( ) ; */ public Node < T > prev ( ) { return prev ; } /* METHOD data ( ) This method returns the data inside of this Node . input - none output - Data inside of this Node eg : PlanarShape shape4 = node4.data ( ) ; */ public T data ( ) { return data ; } } }"
PersianCalendar jalali = new PersianCalendar ( ) ;
Error : Can not determine path to 'tools.jar ' library for 16 ( path/to/jdk-16 )
"class ParserArrayList { //some declaration and codes here private String [ ] imageCaptionId = { `` My First Medal '' , `` You ... '' , `` The ... '' , `` Gim me ... '' , `` A ... '' , `` Seven ... '' , `` ... ..City '' , `` ... . Madness '' , `` Loyal ... '' , `` ... .. '' , `` ... '' , `` Champion ... '' } ; } public class ImageAdapter extends BaseAdapter { //some declaration and variables here public View getView ( int position , View convertView , ViewGroup parent ) { View v ; ParserArrayList arrayImage = new ParserArrayList ( ) ; String [ ] imagetext = arrayImage.getImageCaptionId ( ) ; if ( convertView == null ) { //some stuff here } //some stuff herereturn v ; } class ParserArrayList { //added this codepublic SQLiteAdapter sqlAdapter ; //and this onepublic void showData ( ) { sqlAdapter = new SQLiteAdapter ( this ) ; String str = `` Select dTitle from achievement_tb where version =0 order by ID ASC ; '' ; sqlAdapter.openToRead ( ) ; Cursor c =sqlAdapter.read ( str ) ; sqlAdapter.close ( ) ; } } public String [ ] showImageCaption ( ) { String imageCaptionIds [ ] ; sqlAdapter = new SQLiteAdapter ( mContext ) ; String str = `` Select dTitle from achievement_tb where version =0 order by ID ASC ; '' ; sqlAdapter.openToRead ( ) ; Cursor c =sqlAdapter.read ( str ) ; imageCaptionIds [ c.getCount ( ) ] ; sqlAdapter.close ( ) ; return imageCaptionIds ; } public View getView ( int position , View convertView , ViewGroup parent ) { View v ; ParserArrayList arrayImage = new ParserArrayList ( mContext ) ; newArrayList2 = arrayImage.getArraylist ( ) ; **String [ ] imagetext = arrayImage.showImageCaption ( ) ; ** if ( convertView == null ) { // if it 's not recycled , initialize some attributes LayoutInflater li = getLayoutInflater ( ) ; v = li.inflate ( R.layout.medal_grid , null ) ; } else { v = convertView ; } TextView tv = ( TextView ) v.findViewById ( R.id.grid_item_label ) ; **tv.setText ( imagetext [ position ] ) ; ** ImageView iv = ( ImageView ) v.findViewById ( R.id.grid_item_image ) ; iv.setImageResource ( ( Integer ) newArrayList2.get ( position ) ) ; return v ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( `` MMM dd , YYYY , EEE '' , Locale.US ) ; System.out.println ( sdf.format ( new Date ( ) ) ) ; System.out.println ( sdf.format ( sdf.parse ( `` Apr 27 , 2018 , Fri '' ) ) ) ; Apr 27 , 2018 , FriJan 05 , 2018 , Fri // I can not understand why java parse the month of April as January"
"public interface I1 { public static interface I2 { public void doSomething ( ) ; } //some other methods public void myMethod ( I2 myObject ) ; } public abstract class SomeClass implements I2 { //mandatory method ... } public interface XClientSession { static public interface OnQueryResultSentListener { public void onQueryResultSent ( XQueryResult result ) ; } public void setOnQueryResultSentListener ( OnQueryResultSentListener listener ) ; } public abstract class XAppAgentBase extends IntentService implements XClient , OnQueryResultSentListener { }"
"Map < String , String > map = new TreeMap < > ( ) ; map.tailMap ( ) ; // can not resolve method tailMap ( ( TreeMap < String , String > ) map ) .tailMap ( `` a '' ) ; NavigableMap < String , String > map1 = new TreeMap < > ( ) ; map1.tailMap ( `` a '' ) ;"
List < String > myList = new ArrayList < > ( ) ; myList.add ( `` Test '' ) ; myList.add ( `` Example '' ) ; myList.add ( `` Sth '' ) ; String str = myList.stream ( ) .filter ( x - > x.equals ( `` eee '' ) ) .findFirst ( ) .orElseGet ( null ) ;
"Graphics Device initialization failed for : d3d , swError initializing QuantumRenderer : no suitable pipeline foundjava.lang.RuntimeException : java.lang.RuntimeException : Error initializing QuantumRenderer : no suitable pipeline found < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < project xmlns= '' http : //maven.apache.org/POM/4.0.0 '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xsi : schemaLocation= '' http : //maven.apache.org/POM/4.0.0 http : //maven.apache.org/xsd/maven-4.0.0.xsd '' > < modelVersion > 4.0.0 < /modelVersion > < groupId > com.mycompany < /groupId > < artifactId > mavenproject3 < /artifactId > < version > 1.0-SNAPSHOT < /version > < properties > < project.build.sourceEncoding > UTF-8 < /project.build.sourceEncoding > < maven.compiler.release > 11 < /maven.compiler.release > < javafx.version > 13 < /javafx.version > < /properties > < build > < plugins > < plugin > < groupId > org.apache.maven.plugins < /groupId > < artifactId > maven-compiler-plugin < /artifactId > < version > 3.8.1 < /version > < configuration > < release > $ { maven.compiler.release } < /release > < /configuration > < /plugin > < plugin > < groupId > org.openjfx < /groupId > < artifactId > javafx-maven-plugin < /artifactId > < version > 0.0.4 < /version > < configuration > < mainClass > com.mycompany.mavenproject3.MainApp < /mainClass > < executable > C : \Program Files\Java\jdk-12\bin\java < /executable > < /configuration > < /plugin > < /plugins > < /build > < dependencies > < dependency > < groupId > org.openjfx < /groupId > < artifactId > javafx-controls < /artifactId > < version > $ { javafx.version } < /version > < /dependency > < dependency > < groupId > org.openjfx < /groupId > < artifactId > javafx-fxml < /artifactId > < version > $ { javafx.version } < /version > < /dependency > < ! -- https : //mvnrepository.com/artifact/org.openjfx/javafx -- > < ! -- https : //mvnrepository.com/artifact/eu.hansolo/Medusa -- > < dependency > < groupId > eu.hansolo < /groupId > < artifactId > Medusa < /artifactId > < version > 11.2 < /version > < /dependency > < dependency > < groupId > eu.hansolo < /groupId > < artifactId > colors < /artifactId > < version > 1.4 < /version > < /dependency > < /dependencies >"
File file = new File ( `` bigfile.txt '' ) ; FileInputStream fis = new FileInputStream ( file ) ; BufferedInputStream bis = new BufferedInputStream ( fis ) ; int BUFFER_SIZE = 10 ; // can and should be biggerbyte [ ] bytes = new byte [ BUFFER_SIZE ] ; while ( ( bis.read ( bytes ) ) ! = -1 ) { // convert bytes to string // split bytes to String [ ] // save the last number if was cut in the middle and save it for the next round of reading and remove it from the current String [ ] // fix cut number if necessary and put it in the String [ ] // sort the String [ ] // write the String [ ] into a file // call Garbage collector to prevent memory leak ? } bis.close ( ) ;
"@ RestController @ RequestMapping ( `` v1/test '' ) public class TestRestController { ... ... 100 methods ( GET , POST , PATCH , etc ) }"
//Compiles Successfully : public class Script { public static Object tmp ; static { tmp = new Object ( ) ; System.out.println ( tmp ) ; } } //error only on the read but not the assignmentpublic class Script { static { tmp = new Object ( ) ; System.out.println ( tmp ) ; } public static Object tmp ; } public class Script { static { tmp = new Object ( ) ; } public static Object tmp ; }
"public < In , Out , A > BiFunction < In , Out , Out > weave ( Function < ? super In , A > getter , BiConsumer < ? super Out , ? super A > consumer ) { return ( in , out ) - > { consumer.accept ( out , getter.apply ( in ) ) ; return out ; } ; }"
String s= '' abcd '' ; String s1=new String ( `` efgh '' ) ; s.concat ( `` ijkl '' ) ; 1 : istore_1 2 : ldc # 2 // String abcd 4 : astore_2 5 : new # 3 // class java/lang/String 8 : dup 9 : ldc # 4 // String efgh 11 : invokespecial # 5 // Method java/lang/String . `` < init > '' : ( Ljava/lang/String ; ) V 14 : astore_3 15 : aload_2 16 : ldc # 6 // String ijkl 18 : invokevirtual # 7 // Method java/lang/String.concat : ( Ljava/lang/String ; ) Ljava/lang/String ; public static void main ( java.lang.String [ ] ) ; Code : 0 : ldc # 2 // String ObjectOneObjectTwo 2 : astore_1 3 : getstatic # 3 // Field java/lang/System.out : Ljava/io/PrintStream ; 6 : aload_1 7 : invokevirtual # 4 // Method java/io/PrintStream.println : ( Ljava/lang/String ; ) V 10 : return }
Vertex relationships ( edges ) Source vertex Destination vertex x1 26 y1 287 x2 154 y2 303 x1 22 y1 114 x2 115 y2 185 x1 26 y1 287 x2 375 y2 338 x1 26 y1 287 x2 260 y2 393 x1 115 y1 185 x2 121 y2 7 x1 200 y1 101 x2 392 y2 238 x1 99 y1 394 x2 375 y2 338 x1 99 y1 394 x2 121 y2 7 x1 274 y1 28 x2 22 y2 114 x1 296 y1 185 x2 200 y2 101 x1 115 y1 185 x2 154 y2 303 for ( int i=0 ; i < vertexnum ; i++ ) { adjLists.add ( new ArrayList < Integer > ( ) ) ; } for ( int j=0 ; j < vertexnum ; j++ ) { for ( Point p : nodes ) { for ( Edge e : edges ) { adjLists.get ( j ) .add ( e.p1.x ) ; adjLists.get ( j ) .add ( e.p1.y ) ; adjLists.get ( j ) .add ( 0 ) ; adjLists.get ( j ) .add ( e.p2.x ) ; adjLists.get ( j ) .add ( e.p2.y ) ; adjLists.get ( j ) .add ( 0 ) ; for ( Point p1 : nodes ) { for ( Edge e1 : edges ) { if ( e1.p1.x == e.p1.x & & e1.p1.y == e.p1.y & & ! adjLists.get ( j ) .contains ( e1.p2.x ) & & ! adjLists.get ( j ) .contains ( e1.p2.y ) ) { adjLists.get ( j ) .add ( e1.p2.x ) ; adjLists.get ( j ) .add ( e1.p2.y ) ; adjLists.get ( j ) .add ( 0 ) ; } else if ( e1.p2.x == e.p1.x & & e1.p2.y == e.p1.y & & ! adjLists.contains ( e1.p1.x ) & & ! adjLists.contains ( e1.p1.y ) ) { adjLists.get ( j ) .add ( e1.p1.x ) ; adjLists.get ( j ) .add ( e1.p1.y ) ; adjLists.get ( j ) .add ( 0 ) ; } } } } } }
$ java -jar someJar.jar arg1 arg2
public class Main { static class Animal { } static class Dog extends Animal { } static List < ? extends Animal > foo ( ) { List < Dog > dogs = new ArrayList < > ( ) ; return dogs ; } public static void main ( String [ ] args ) { List < Animal > dogs = Main.foo ( ) ; // compile error } }
class Parent { /** NOT final . */ private int answer ; public int getAnswer ( ) { return answer ; } public void setAnswer ( final int _answer ) { answer = _answer ; } } public class Child extends Parent { private final Object self ; public Child ( ) { super.setAnswer ( 42 ) ; self = this ; } @ Override public void setAnswer ( final int _answer ) { throw new UnsupportedOperationException ( ) ; } }
try { .. } catch ( ExceptionA | ExceptionB ex ) { .. } } catch ( ExceptionA exa ) { .. } catch ( ExceptionB exb ) { .. }
"System.out.print ( backupInput + `` : `` ) ; // Outputting the quarters if ( quarters > 0 ) { if ( quarters == 1 ) System.out.print ( `` one quarter , `` ) ; else System.out.print ( quarters + `` quarters , `` ) ; } // Outputting the dimes if ( dimes > 0 ) { if ( dimes == 1 ) System.out.print ( `` one dime , `` ) ; else System.out.print ( dimes + `` dimes , `` ) ; } // Outputting the nickels if ( nickels > 0 ) { if ( nickels == 1 ) System.out.print ( `` one nickel , `` ) ; else System.out.print ( nickels + `` nickels `` ) ; } // Outputting the cents if ( cents > 0 ) { if ( cents == 1 ) System.out.print ( `` one cent '' ) ; else System.out.print ( cents + `` cents `` ) ; } 7 : 1 dime , 2 cents 7 : 1 dime and 2 cents65 : 2 quarters , 1 dime and one nickel66 : 2 quarters , 1 dime , 1 nickel , and one cent"
private static class ValueHolder { private int value ; private Thread thread ; ValueHolder ( ) { this.value = 10 ; thread = new Thread ( new DoublingTask ( this ) ) ; // exposing `` this '' pointer ! ! ! thread.start ( ) ; // starting thread inside constructor ! ! ! } int getValue ( ) { return value ; } void awaitTermination ( ) { try { thread.join ( ) ; } catch ( InterruptedException ex ) { } } } private static class DoublingTask implements Runnable { private ValueHolder valueHolder ; DoublingTask ( ValueHolder valueHolder ) { this.valueHolder = valueHolder ; } public void run ( ) { System.out.println ( Thread.currentThread ( ) .getName ( ) ) ; System.out.println ( valueHolder.getValue ( ) * 2 ) ; // I expect to print out 20 ... } } public static void main ( String [ ] args ) { ValueHolder myValueHolder = new ValueHolder ( ) ; myValueHolder.awaitTermination ( ) ; }
"public abstract class Game < G extends GamePlayer > { private final List < G > players ; public Game ( ) { this.players = new LinkedList < > ( ) ; } public Collection < G > getPlayers ( ) { return players ; } } public class GiftTask implements Runnable { private final Game game ; private final Item [ ] items ; public GiftTask ( Game game , List < Item > itemList ) { this.game = game ; this.items = itemList.toArray ( new Item [ itemList.size ( ) ] ) ; } @ Override public void run ( ) { for ( GamePlayer player : game.getPlayers ( ) ) { // This line has the error player.getInventory ( ) .addItem ( items ) ; } } }"
"show status like 'con % ' ; + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -+| Variable_name | Value |+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -+| Connection_errors_accept | 0 || Connection_errors_internal | 0 || Connection_errors_max_connections | 0 || Connection_errors_peer_address | 0 || Connection_errors_select | 0 || Connection_errors_tcpwrap | 0 || Connections | 10535 |+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -+ import org.apache.log4j.Logger ; import org.hibernate.HibernateException ; import org.hibernate.Session ; import org.hibernate.SessionFactory ; import org.hibernate.Transaction ; import org.hibernate.cfg.Configuration ; public class HibernateUtil { private static final Logger log = Logger.getLogger ( HibernateUtil.class ) ; private static SessionFactory sessionFactory ; static { try { sessionFactory = new Configuration ( ) .configure ( `` hibernate.cfg.xml '' ) .buildSessionFactory ( ) ; } catch ( Throwable ex ) { // error handling } } public static final ThreadLocal session = new ThreadLocal ( ) ; public static Session currentSession ( ) throws HibernateException { Session s = null ; try { s = ( Session ) session.get ( ) ; } catch ( Exception e ) { // error handling } // Open a new Session , if this thread has none yet if ( s == null ) { try { s = sessionFactory.openSession ( ) ; } catch ( Exception e ) { // error handling } try { s.getTransaction ( ) ; } catch ( Exception e ) { // error handling } Transaction tx = null ; while ( tx==null ) { try { tx = s.beginTransaction ( ) ; // Store it in the ThreadLocal variable } catch ( Exception j ) { // error handling } } session.set ( s ) ; } return s ; } public static void closeSession ( ) throws HibernateException { Session s = ( Session ) session.get ( ) ; if ( s ! = null ) { try { s.getTransaction ( ) .commit ( ) ; s.close ( ) ; } catch ( Exception e ) { // error handling } } session.set ( null ) ; } public static void errorSession ( ) throws HibernateException { Session s = ( Session ) session.get ( ) ; try { s.getTransaction ( ) .rollback ( ) ; s.close ( ) ; } catch ( Exception e ) { // error handling } session.set ( null ) ; } } private MyTable getMyTable ( ) { try { Session session = currentSession ( ) ; // some prepared statement return myTable ; } catch ( HibernateException e ) { errorSession ( ) ; return null ; } finally { closeSession ( ) ; } }"
try { String line ; Process p = Runtime.getRuntime ( ) .exec ( System.getenv ( `` windir '' ) + '' \\system32\\ '' + '' tasklist.exe '' ) ; BufferedReader input = new BufferedReader ( new InputStreamReader ( p.getInputStream ( ) ) ) ; while ( ( line = input.readLine ( ) ) ! = null ) { System.out.println ( line ) ; } input.close ( ) ; } catch ( Exception err ) { err.printStackTrace ( ) ; }
private void sortAndPrint ( int numToPrint ) { Object [ ] quakeArray= quakeMarkers.toArray ( ) ; int indexMax ; for ( int i=0 ; i < quakeArray.length-1 ; i++ ) { indexMax = i ; float max = ( ( EarthquakeMarker ) ( quakeArray [ i ] ) ) .getMagnitude ( ) ; for ( int j =i+1 ; j < quakeArray.length ; j++ ) { if ( ( ( EarthquakeMarker ) ( quakeArray [ j ] ) ) .getMagnitude ( ) > max ) indexMax = j ; } //swap it Object temp = quakeArray [ i ] ; quakeArray [ i ] = quakeArray [ indexMax ] ; quakeArray [ indexMax ] = temp ; } //sort finished for ( int i =0 ; i < numToPrint ; i++ ) { System.out.println ( ( ( EarthquakeMarker ) quakeArray [ i ] ) .getProperty ( `` title '' ) .toString ( ) ) ; } }
"static { //something } public class A extends B { static { C.register ( new C ( A.class , ( byte ) D.x.getCode ( ) ) { public DataSerializable newInstance ( ) { return new A ( ) ; } } ) ; } }"
"public class AnagramGroups { public Set < Set < String > > group ( Set < String > words ) { Set < Set < String > > groups = new HashSet < > ( ) ; for ( String word : words ) { findAndAdd ( word , groups ) ; } return groups ; } private void findAndAdd ( String word , Set < Set < String > > groups ) { for ( Set < String > group : groups ) { boolean found = false ; for ( String str : group ) { if ( isAnagram ( str , word ) ) { found = true ; } break ; } if ( found ) { group.add ( word ) ; return ; } } Set < String > set = new HashSet < > ( ) ; set.add ( word ) ; groups.add ( set ) ; } private boolean isAnagram ( String str , String word ) { Set < Character > characters = new HashSet < > ( ) ; for ( char c : str.toCharArray ( ) ) { characters.add ( c ) ; } for ( char c : word.toCharArray ( ) ) { if ( ! characters.contains ( c ) ) { return false ; } characters.remove ( c ) ; } return characters.isEmpty ( ) ; } public static void main ( String [ ] args ) { Set < Set < String > > groups = new AnagramGroups ( ) .group ( new HashSet < > ( Arrays.asList ( `` cat '' , `` god '' , `` dog '' ) ) ) ; System.out.println ( groups ) ; Set set1 = new HashSet < > ( Arrays.asList ( `` cat '' ) ) ; Set set2 = new HashSet < > ( Arrays.asList ( `` god '' , `` dog '' ) ) ; System.out.println ( groups.contains ( set1 ) ) ; System.out.println ( groups.contains ( set2 ) ) ; groups.add ( new HashSet < > ( Arrays.asList ( `` god '' , `` dog '' ) ) ) ; System.out.println ( groups ) ; } }"
"import java.util.Scanner ; public class PostFixCalculator { public static void main ( String [ ] args ) { Scanner kbd = new Scanner ( System.in ) ; int result ; String expression ; System.out.println ( `` Student name , CS-304 , Fall 2014 , Asst 2c . `` ) ; System.out.println ( `` To quit this program , just hit 'return'.\n '' ) ; System.out.print ( `` Enter a postfix expression : `` ) ; expression = kbd.nextLine ( ) ; while ( ! expression.equals ( `` '' ) ) { try { } catch ( RuntimeException e ) { } System.out.print ( `` \nEnter a postfix expression : `` ) ; expression = kbd.nextLine ( ) ; } // end while ( ! expression.equals ( `` '' ) ) System.out.println ( `` \nBye ! `` ) ; } // end public static void main ( String [ ] args ) public static int postFixEvaluate ( String input ) { Scanner tokenizer ; int result , operand1 , operand2 , value ; String operator ; LinkedStack s = new LinkedStack ( ) ; tokenizer = new Scanner ( input ) ; while ( tokenizer.hasNext ( ) ) { if ( tokenizer.hasNextInt ( ) ) { value = tokenizer.nextInt ( ) ; s.push ( value ) ; } else // we have an operator { operator = tokenizer.next ( ) ; if ( s.isEmpty ( ) ) throw new RuntimeException ( `` Not Enough Operands '' ) ; operand2 = s.pop ( ) ; if ( s.isEmpty ( ) ) throw new RuntimeException ( `` Not Enough Operands '' ) ; operand1 = s.pop ( ) ; if ( operator.equals ( `` + '' ) ) result = operand1 + operand2 ; else if ( operator.equals ( `` - '' ) ) result = operand1 - operand2 ; else if ( operator.equals ( `` * '' ) ) result = operand1 * operand2 ; else if ( operator.equals ( `` / '' ) ) result = operand1 / operand2 ; else throw new RuntimeException ( `` Not Enough Operands '' ) ; s.push ( result ) ; } // end else // we have an operator } // end while ( tokenizer.hasNext ( ) ) if ( s.isEmpty ( ) ) throw new RuntimeException ( `` Not Enough Operands '' ) ; result = s.pop ( ) ; if ( ! s.isEmpty ( ) ) throw new RuntimeException ( `` Not Enough Operands '' ) ; return result ; } // end public static int postFixEvaluate ( String input ) } // end public class PostFixCalculator"
"public int calculateFlightDuration ( String departureDateTime , String depAirportCode , String arrivalDateTime , String arrAirportCode ) { try { LocalDateTime depLocalTime = LocalDateTime.parse ( departureDateTime , formatter ) ; LocalDateTime arrLocalTime = LocalDateTime.parse ( arrivalDateTime , formatter ) ; ZoneOffset depZoneOffset = getTimeZoneOffset ( depAirportCode ) ; ZoneOffset arrZoneOffset = getTimeZoneOffset ( arrAirportCode ) ; if ( depZoneOffset ! = null & & arrZoneOffset ! = null ) { OffsetDateTime offsetDepTime = OffsetDateTime.of ( depLocalTime , depZoneOffset ) ; OffsetDateTime offsetArrTime = OffsetDateTime.of ( arrLocalTime , arrZoneOffset ) ; Duration flightDuration = Duration.between ( offsetArrTime , offsetDepTime ) .abs ( ) ; return ( int ) flightDuration.toMinutes ( ) ; } } catch ( Exception e ) { LOG.warn ( `` : :calculateFlightDuration depTime : { } dep.code : { } arrTime : { } arr.code : { } '' , departureDateTime , depAirportCode , arrivalDateTime , arrAirportCode ) ; } return 0 ; } depLocalTime = 2017-11-06T14:50arrLocalTime = 2017-11-06T16:45depZoneOffset = +03:00arrZoneOffset = +02:00 flightDuration = PT2H55M flightDuration = PT3H55M public int calculateFlightDuration ( String departureDateTime , String depAirportCode , String arrivalDateTime , String arrAirportCode ) { try { LocalDateTime depLocalTime = LocalDateTime.parse ( departureDateTime , formatter ) ; LocalDateTime arrLocalTime = LocalDateTime.parse ( arrivalDateTime , formatter ) ; ZoneOffset depZoneOffset = getTimeZoneOffset ( depAirportCode ) ; ZoneOffset arrZoneOffset = getTimeZoneOffset ( arrAirportCode ) ; if ( depZoneOffset ! = null & & arrZoneOffset ! = null ) { ZonedDateTime zonedDepTime = ZonedDateTime.of ( depLocalTime , depZoneOffset ) ; ZonedDateTime zonedArrTime = ZonedDateTime.of ( arrLocalTime , arrZoneOffset ) ; // OffsetDateTime offsetDepTime = OffsetDateTime.of ( depLocalTime , depZoneOffset ) ; // OffsetDateTime offsetArrTime = OffsetDateTime.of ( arrLocalTime , arrZoneOffset ) ; Duration flightDuration = Duration.between ( zonedDepTime , zonedArrTime ) .abs ( ) ; return ( int ) flightDuration.toMinutes ( ) ; } } catch ( Exception e ) { LOG.warn ( `` : :calculateFlightDuration depTime : { } dep.code : { } arrTime : { } arr.code : { } '' , departureDateTime , depAirportCode , arrivalDateTime , arrAirportCode ) ; } return 0 ; } public int calculateFlightDuration ( String departureDateTime , String depAirportCode , String arrivalDateTime , String arrAirportCode ) { try { LocalDateTime depLocalTime = LocalDateTime.parse ( departureDateTime , formatter ) ; LocalDateTime arrLocalTime = LocalDateTime.parse ( arrivalDateTime , formatter ) ; ZoneId depZoneId = getTimeZoneId ( depAirportCode ) ; ZoneId arrZoneId = getTimeZoneId ( arrAirportCode ) ; if ( depZoneId ! = null & & arrZoneId ! = null ) { ZonedDateTime zonedDepTime = ZonedDateTime.of ( depLocalTime , depZoneId ) ; ZonedDateTime zonedArrTime = ZonedDateTime.of ( arrLocalTime , arrZoneId ) ; Duration flightDuration = Duration.between ( zonedDepTime , zonedArrTime ) .abs ( ) ; return ( int ) flightDuration.toMinutes ( ) ; } } catch ( Exception e ) { LOG.warn ( `` : :calculateFlightDuration depTime : { } dep.code : { } arrTime : { } arr.code : { } '' , departureDateTime , depAirportCode , arrivalDateTime , arrAirportCode ) ; } return 0 ; } depZoneId = Europe/IstanbularrZoneId = Europe/AmsterdamzonedDepTime = 2017-11-06T14:50+02:00 [ Europe/Istanbul ] //damn it 's really annoying ! zonedArrTime = 2017-11-06T16:45+01:00 [ Europe/Amsterdam ] flightDuration = PT2H55M"
class Bar { ... } class Foo extends Bar { ... } Optional < Foo > fooOption = ... fooOption.orElse ( aFoo ) // returns something of type Foo Optional < Foo > fooOption = ... fooOption.orElse ( aBar ) // returns something of type Bar public abstract class Option < T > { // this does n't compile public abstract < U super T > U orElse ( U other ) ; }
"`` round ( ( TOTAL_QTY * 100 ) / SUM ( ORDER_ITEMS- > TOTAL_QTY ) , 1 ) '' String [ ] tokens = function.split ( `` [ ) ( *+-/^ ! @ # % & ] '' ) ; `` round '' '' '' '' TOTAL_QTY '' '' '' '' '' '' 100 '' '' '' '' '' '' '' '' SUM '' '' ORDER_ITEMS '' '' - > TOTAL_QTY '' '' '' '' '' '' '' '' 1 '' `` round '' , '' TOTAL_QTY '' , '' 100 '' , '' SUM '' , '' ORDER_ITEMS- > TOTAL_QTY '' , '' 1 ''"
byte b=1 ; long l=1000 ; b += l ;
"public class App { private final A a ; private final Server server ; public App ( ) { a = new A ( this ) ; //Bad , this is escaping before it 's initialized . } @ Subscribe //This event fires some time after App is finished constructing . public void registerStuff ( RegisterEvent event ) { server = event.getServer ( ) ; //Not possible due to final field and this not being the constructor , is there such thing as a lazy final ? a.register ( ) ; } } public class A { private final App app ; private final BuilderSpec spec ; public A ( App app ) { this.app = app ; this.spec = app.getServer ( ) .builder ( this.app ) .build ( ) ; } public void register ( ) { app.getServer ( ) .doStuff ( this.app , this.spec ) ; } }"
-XX : MinHeapFreeRatio=40 -XX : MaxHeapFreeRatio=70 -Xms3670k -Xmx256m -Dsun.java2d.noddraw=true -XX : +UseParallelGC
"ArrayList < Student > al=new ArrayList < Student > ( ) ; al.add ( new Student ( 1 , '' dg '' ,58 ) ) ; al.add ( new Student ( 2 , '' dg '' ,48 ) ) ; al.add ( new Student ( 1 , '' dg '' ,98 ) ) ; al.add ( new Student ( 2 , '' dg '' ,68 ) ) ; al.add ( new Student ( 1 , '' dg '' ,38 ) ) ; al.add ( new Student ( 2 , '' dg '' ,28 ) ) ; al.add ( new Student ( 2 , '' dg '' ,90 ) ) ; 1 dg 98 1 dg 58 1 dg 38 2 dg 90 2 dg 68 2 dg 48 2 dg 28"
"class A { private List < String > keys ; private String otherData ; private int otherDate2 ; // getter and setters for each } // firstlistOfA.stream ( ) .collect ( Colletors.groupingBy ( a - > a.getKeys ( ) ) ) // produces a Map < String , List < A > > // secondlistOfA.stream ( ) .flatMap ( a - > a.getKeys ( ) .stream ( ) ) .collect ( Colletors.groupingBy ( string - > string ) ) // produces a Map < String , List < String > >"
Collection c = new ArrayList < String > ( ) ; c.add ( 123 ) ; Collection < String > ( ) c = new ArrayList ( ) ; c.add ( 123 ) ;
"interface Period { boolean overlaps ( Period other ) ; } List < Period > periods = new ArrayList < > ( ) ; periods.stream ( ) .reduce ( new BinaryOperator < Period > ( ) { @ Override public Period apply ( Period period , Period period2 ) { if ( period.overlaps ( period2 ) ) { // join period and period2 into period . } else { `` return both '' // do n't reduce and maintain period and period2 in the list . } return null ; } } ) ;"
"public class Question2 { //running time of function is N ! ! ! ! ! ! public static boolean isThere ( int [ ] array , int num , int index ) { boolean isItThere = false ; //running time of 1 for ( int i =0 ; i < = index ; i++ ) { //running time i if ( array [ i ] == num ) { //running time of 1 isItThere = true ; //running time of 1 } } return isItThere ; } public static int [ ] firstAlgo ( int N ) { Random random = new Random ( ) ; //running time of 1 ( initilizing ) k int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i++ ) { int temp = random.nextInt ( N+1 ) ; //running time of random is O ( 1 ) while ( isThere ( arr , temp , i ) ) { temp = random.nextInt ( N+1 ) ; } arr [ i ] = temp ; } return arr ; } }"
E remove ( int index )
class C { static Integer a = 127 ; static Integer b = 127 ; public static void main ( String args [ ] ) { if ( a==b ) { System.out.println ( `` @ @ @ '' ) ; } } } class C { static Integer a = 145 ; static Integer b = 145 ; public static void main ( String args [ ] ) { if ( a==b ) { System.out.println ( `` @ @ @ '' ) ; } } }
"package pkg.a ; @ FunctionalInterfacepublic interface A extends AA { } package pkg.a ; interface AA { default void defaultM ( ) { System.out.println ( m ( ) ) ; } String m ( ) ; } package pkg ; import java.util.Arrays ; import java.util.List ; import pkg.a.A ; public class Test { public static void main ( String [ ] args ) { List < A > list = Arrays.asList ( ( ) - > `` imp1 '' , ( ) - > `` imp2 '' ) ; list.stream ( ) .forEach ( a - > a.defaultM ( ) ) ; list.stream ( ) .forEach ( A : :defaultM ) ; } } imp1imp2Exception in thread `` main '' java.lang.BootstrapMethodError : call site initialization exception at java.lang.invoke.CallSite.makeSite ( CallSite.java:341 ) at java.lang.invoke.MethodHandleNatives.linkCallSiteImpl ( MethodHandleNatives.java:307 ) at java.lang.invoke.MethodHandleNatives.linkCallSite ( MethodHandleNatives.java:297 ) at pkg.Test.main ( Test.java:14 ) Caused by : java.lang.IllegalArgumentException : java.lang.IllegalAccessException : class is not public : pkg.a.AA.defaultM ( ) void/invokeInterface , from pkg.Test at java.lang.invoke.MethodHandles $ Lookup.revealDirect ( MethodHandles.java:1360 ) at java.lang.invoke.AbstractValidatingLambdaMetafactory. < init > ( AbstractValidatingLambdaMetafactory.java:131 ) at java.lang.invoke.InnerClassLambdaMetafactory. < init > ( InnerClassLambdaMetafactory.java:155 ) at java.lang.invoke.LambdaMetafactory.metafactory ( LambdaMetafactory.java:299 ) at java.lang.invoke.CallSite.makeSite ( CallSite.java:302 ) ... 3 moreCaused by : java.lang.IllegalAccessException : class is not public : pkg.a.AA.defaultM ( ) void/invokeInterface , from pkg.Test at java.lang.invoke.MemberName.makeAccessException ( MemberName.java:850 ) at java.lang.invoke.MethodHandles $ Lookup.checkAccess ( MethodHandles.java:1536 ) at java.lang.invoke.MethodHandles $ Lookup.revealDirect ( MethodHandles.java:1357 ) ... 7 more"
Optional < User > user = userRepository.findByName ( username ) ; user.orElseThrow ( ( ) - > new UsernameNotFoundException ( `` Ahhh Shuckkkks ! ! ! `` ) ; return user.map ( CustomUserDetails : :new ) .get ( ) ;
"main function { Thread t =new Thread ( ) { public void run ( ) { Process p= Runtime.getRuntime ( ) .exec ( my_CMD ) ; } } ; t.start ( ) ; //Now here , I want to kill ( or destroy ) the process p. main function { Process p ; Thread t =new Thread ( ) { public void run ( ) { p= Runtime.getRuntime ( ) .exec ( my_CMD ) ; } } ; t.start ( ) ; //Now here , I want to kill ( or destroy ) the process p ."
"for ( int i = 0 ; i < 64 ; i++ ) { double max = Long.MAX_VALUE > > > i ; double min = Long.MIN_VALUE > > > i ; double neg = -1L > > > i ; System.out.format ( `` Max : % -5d Min : % -5d -1 : % -5d % n '' , Math.getExponent ( dmax ) , Math.getExponent ( dmin ) , Math.getExponent ( dneg ) ) ; } ... Max : 55 Min : 55 -1 : 56 Max : 54 Min : 54 -1 : 55 Max : 52 Min : 53 -1 : 54 Max : 51 Min : 52 -1 : 52 Max : 50 Min : 51 -1 : 51 ..."
// copied from Instant # hashCode @ Overridepublic int hashCode ( ) { return ( ( int ) ( seconds ^ ( seconds > > > 32 ) ) ) + 51 * nanos ; }
public class TestClass { static String str = `` Hello World '' ; public static void changeIt ( String s ) { s = `` Good bye world '' ; } public static void main ( String [ ] args ) { changeIt ( str ) ; System.out.println ( str ) ; } }
"public class MapEditor implements GameScene { private GameContext context ; private SpriteBatch batch ; private OrthographicCamera camera ; public static GameTile [ ] [ ] tiles ; //GameTile.WIDTH = 64 & GameTile.HEIGHT =48 public static final int MAP_WIDTH = 20 ; public static final int MAP_HEIGHT = 36 ; public MapEditor ( GameContext context ) { this.context = context ; tiles = new GameTile [ MAP_WIDTH ] [ MAP_HEIGHT ] ; } @ Override public void create ( ) { renderer = new ShapeRenderer ( ) ; this.batch = new SpriteBatch ( ) ; camera = new OrthographicCamera ( Gdx.graphics.getWidth ( ) , Gdx.graphics.getHeight ( ) ) ; } public void createMap ( ) { // Create the sea tiles for ( int x = 0 ; x < MAP_WIDTH ; x++ ) { for ( int y = 0 ; y < MAP_HEIGHT ; y++ ) { if ( y < 3 || y > 32 ) { if ( tiles [ x ] [ y ] == null ) { tiles [ x ] [ y ] = safezone ; } } else { if ( tiles [ x ] [ y ] == null ) { tiles [ x ] [ y ] = cell ; } } } } } @ Override public void update ( ) { // update the camera camera.update ( ) ; } @ Override public void render ( ) { batch.setProjectionMatrix ( camera.combined ) ; batch.begin ( ) ; Gdx.gl.glViewport ( 0,0 , Gdx.graphics.getWidth ( ) , Gdx.graphics.getHeight ( ) ) ; renderMap ( ) ; batch.end ( ) ; } public int getTileX ( float x , float y ) { /* * getRegionWidth ( ) = TILE_WIDTH_HALF * getRegionHeight ( ) = TILE_HEIGHT_HALF * these are the ones being added to worldCoords.x/y */ Vector3 worldCoords = camera.unproject ( new Vector3 ( x , y , 0 ) ) ; return ( int ) ( ( TILE_WIDTH_HALF * ( ( -TILE_HEIGHT_HALF + ( worldCoords.y + TILE_HEIGHT_HALF ) ) / TILE_HEIGHT_HALF ) + ( worldCoords.x + TILE_WIDTH_HALF ) ) / TILE_WIDTH_HALF ) / 2 ; } public int getTileY ( float x , float y ) { /* * getRegionWidth ( ) = TILE_WIDTH_HALF * getRegionHeight ( ) = TILE_HEIGHT_HALF * these are the ones being added to worldCoords.x/y */ Vector3 worldCoords = camera.unproject ( new Vector3 ( x , y , 0 ) ) ; return ( int ) ( ( ( -TILE_HEIGHT_HALF * ( TILE_WIDTH_HALF + ( worldCoords.x + TILE_WIDTH_HALF ) ) / TILE_WIDTH_HALF ) + ( worldCoords.y + TILE_HEIGHT_HALF ) ) / TILE_HEIGHT_HALF ) / 2 ; } @ Override public boolean handleClick ( float x , float y , int button ) { int tileX = getTileX ( x , y ) ; int tileY = getTileY ( x , y ) ; System.out.println ( `` Tile : '' +tileX + `` , '' +tileY ) ; } private void renderMap ( ) { for ( int i = 0 ; i < tiles.length ; i++ ) { for ( int j = 0 ; j < tiles [ i ] .length ; j++ ) { TextureRegion region = tiles [ i ] [ j ] .getRegion ( ) ; int x = ( i * GameTile.TILE_WIDTH / 2 ) - ( j * GameTile.TILE_WIDTH / 2 ) - region.getRegionWidth ( ) / 2 ; int y = ( i * GameTile.TILE_HEIGHT / 2 ) + ( j * GameTile.TILE_HEIGHT / 2 ) - region.getRegionHeight ( ) / 2 ; if ( canDraw ( x , y , GameTile.TILE_WIDTH , GameTile.TILE_HEIGHT ) ) { batch.draw ( region , x , y ) ; } } } }"
"val formatter = new DateTimeFormatterBuilder ( ) .appendPattern ( `` [ yyyy-MM-dd'T'HH : mm : ss ] '' ) .appendPattern ( `` [ yyyy-MM-dd ] '' ) .appendPattern ( `` [ yyyy ] '' ) // add so many things here .parseDefaulting ( ChronoField.MONTH_OF_YEAR , 1 ) .parseDefaulting ( ChronoField.DAY_OF_MONTH , 1 ) .parseDefaulting ( ChronoField.HOUR_OF_DAY , 0 ) .parseDefaulting ( ChronoField.MINUTE_OF_HOUR , 0 ) .parseDefaulting ( ChronoField.SECOND_OF_MINUTE , 0 ) .parseDefaulting ( ChronoField.MICRO_OF_SECOND , 0 ) .toFormatter ( ) val temporalAccessor = formatter.parse ( `` 2018 '' ) val localDateTime = LocalDateTime.from ( temporalAccessor ) localDateTime.getHourval zonedDateTime = ZonedDateTime.of ( localDateTime , ZoneId.systemDefault ) val result = Instant.from ( zonedDateTime )"
public class Foo { private String bar = null ; public void bar123 ( ) { if ( bar == null ) { bar = `` bar '' ; } } } class Foo { private lateinit var bar : String fun bar123 ( ) { if ( ! : :bar.isInitialized ) { bar = `` bar '' } } }
"public class PhotosGridViewImageAdapter extends BaseAdapter { AsyncTaskLoadFiles myAsyncTaskLoadFiles ; public class AsyncTaskLoadFiles extends AsyncTask < Void , String , Void > { File targetDirector ; PhotosGridViewImageAdapter myTaskAdapter ; public AsyncTaskLoadFiles ( PhotosGridViewImageAdapter adapter ) { myTaskAdapter = adapter ; } @ Override protected void onPreExecute ( ) { String ExternalStorageDirectoryPath = Environment .getExternalStorageDirectory ( ) .getAbsolutePath ( ) ; String targetPath = ExternalStorageDirectoryPath + File.separator + AppConstant.PHOTO_ALBUM + File.separator ; targetDirector = new File ( targetPath ) ; myTaskAdapter.clear ( ) ; super.onPreExecute ( ) ; } @ Override protected Void doInBackground ( Void ... params ) { File [ ] files = targetDirector.listFiles ( ) ; Arrays.sort ( files ) ; for ( File file : files ) { publishProgress ( file.getAbsolutePath ( ) ) ; if ( isCancelled ( ) ) break ; } return null ; } @ Override protected void onProgressUpdate ( String ... values ) { myTaskAdapter.add ( values [ 0 ] ) ; super.onProgressUpdate ( values ) ; } @ Override protected void onPostExecute ( Void result ) { myTaskAdapter.notifyDataSetChanged ( ) ; super.onPostExecute ( result ) ; } } ArrayList < String > itemList = new ArrayList < String > ( ) ; void add ( String path ) { itemList.add ( path ) ; } void clear ( ) { itemList.clear ( ) ; } void remove ( int index ) { itemList.remove ( index ) ; } private Activity _activity ; private ArrayList < String > _filePaths = new ArrayList < String > ( ) ; private int imageWidth ; public PhotosGridViewImageAdapter ( Activity activity , ArrayList < String > filePaths , int imageWidth ) { this._activity = activity ; this._filePaths = filePaths ; this.imageWidth = imageWidth ; } @ Overridepublic int getCount ( ) { return this._filePaths.size ( ) ; } @ Overridepublic Object getItem ( int position ) { return this._filePaths.get ( position ) ; } @ Overridepublic long getItemId ( int position ) { return position ; } @ Overridepublic View getView ( final int position , View convertView , ViewGroup parent ) { ViewHolder holder ; final ImageView imageView ; if ( convertView == null ) { imageView = new ImageView ( _activity ) ; imageView.setScaleType ( ImageView.ScaleType.CENTER_CROP ) ; imageView.setLayoutParams ( new GridView.LayoutParams ( imageWidth , imageWidth ) ) ; convertView = imageView ; holder = new ViewHolder ( ) ; holder.image = imageView ; holder.position = position ; convertView.setTag ( holder ) ; } else { //imageView = ( ImageView ) convertView ; holder = ( ViewHolder ) convertView.getTag ( ) ; ( ( ImageView ) convertView ) .setImageBitmap ( null ) ; } new AsyncTask < ViewHolder , Void , Bitmap > ( ) { private ViewHolder v ; // get screen dimensions @ Override protected Bitmap doInBackground ( ViewHolder ... params ) { v = params [ 0 ] ; Bitmap image = decodeFile ( _filePaths.get ( position ) , imageWidth , imageWidth ) ; //imageView.setImageBitmap ( image ) ; return image ; } @ Override protected void onPostExecute ( Bitmap result ) { super.onPostExecute ( result ) ; v.image.setImageBitmap ( result ) ; } } .execute ( holder ) ; return convertView ; } /* * Resizing image size */public Bitmap decodeFile ( String filePath , int WIDTH , int HEIGHT ) { try { File f = new File ( filePath ) ; if ( filePath.contains ( `` .jpg '' ) ) { BitmapFactory.Options o = new BitmapFactory.Options ( ) ; o.inJustDecodeBounds = true ; BitmapFactory.decodeStream ( new FileInputStream ( f ) , null , o ) ; final int REQUIRED_WIDTH = WIDTH ; final int REQUIRED_HEIGHT = HEIGHT ; int scale = 1 ; while ( o.outWidth / scale / 2 > = REQUIRED_WIDTH & & o.outHeight / scale / 2 > = REQUIRED_HEIGHT ) scale *= 2 ; BitmapFactory.Options o2 = new BitmapFactory.Options ( ) ; o2.inSampleSize = scale ; return BitmapFactory.decodeStream ( new FileInputStream ( f ) , null , o2 ) ; } else if ( filePath.contains ( `` .mp4 '' ) ) { return ThumbnailUtils.createVideoThumbnail ( filePath , 0 ) ; } } catch ( FileNotFoundException e ) { e.printStackTrace ( ) ; } return null ; } class ViewHolder { ImageView image ; int position ; } } public class MultiChoiceModeListener implements GridView.MultiChoiceModeListener { public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode.getMenuInflater ( ) ; inflater.inflate ( R.menu.contextual_action_menu , menu ) ; //mode.setTitle ( `` Select Items '' ) ; mode.setTitle ( `` 1 item selected '' ) ; return true ; } public boolean onPrepareActionMode ( ActionMode mode , Menu menu ) { return true ; } public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { // Respond to clicks on the actions in the CAB switch ( item.getItemId ( ) ) { case R.id.delete : SparseBooleanArray checked = gridView.getCheckedItemPositions ( ) ; try { int len = checked.size ( ) ; for ( int i = 0 ; i < len ; i++ ) { if ( checked.valueAt ( i ) ) { Integer position = checked.keyAt ( i ) ; //deleteToMessageHistory ( position ) ; } } } catch ( Exception i ) { Toast.makeText ( PhotosGridViewActivity.this , `` Message was not deleted . Try again . `` , Toast.LENGTH_SHORT ) .show ( ) ; } mode.finish ( ) ; // Action picked , so close the CAB return true ; default : return false ; } } public void onDestroyActionMode ( ActionMode mode ) { } public void onItemCheckedStateChanged ( ActionMode mode , int position , long id , boolean checked ) { int selectCount = gridView.getCheckedItemCount ( ) ; switch ( selectCount ) { case 1 : mode.setTitle ( `` 1 item selected '' ) ; break ; default : mode.setTitle ( `` '' + selectCount + `` items selected '' ) ; break ; } } } public class PhotosGridViewActivity extends Activity { private PhotosUtils utils ; private ArrayList < String > imagePaths = new ArrayList < String > ( ) ; private PhotosGridViewImageAdapter adapter ; private GridView gridView ; private int columnWidth ; @ Overrideprotected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; // Initilizing Grid View InitilizeGridLayout ( ) ; } private void InitilizeGridLayout ( ) { setContentView ( R.layout.photos_grid_view ) ; utils = new PhotosUtils ( PhotosGridViewActivity.this ) ; gridView = ( GridView ) findViewById ( R.id.grid_view ) ; // loading all image paths from SD card imagePaths = utils.getFilePaths ( ) ; Resources r = getResources ( ) ; float padding = TypedValue.applyDimension ( TypedValue.COMPLEX_UNIT_DIP , AppConstant.GRID_PADDING , r.getDisplayMetrics ( ) ) ; columnWidth = ( int ) ( ( utils.getScreenWidth ( ) - ( ( AppConstant.NUM_OF_COLUMNS + 1 ) * padding ) ) / AppConstant.NUM_OF_COLUMNS ) ; gridView.setNumColumns ( AppConstant.NUM_OF_COLUMNS ) ; gridView.setColumnWidth ( columnWidth ) ; gridView.setStretchMode ( GridView.NO_STRETCH ) ; gridView.setPadding ( ( int ) padding , ( int ) padding , ( int ) padding , ( int ) padding ) ; gridView.setHorizontalSpacing ( ( int ) padding ) ; gridView.setVerticalSpacing ( ( int ) padding ) ; gridView.setChoiceMode ( GridView.CHOICE_MODE_MULTIPLE_MODAL ) ; gridView.setMultiChoiceModeListener ( new MultiChoiceModeListener ( ) ) ; // Gridview adapter adapter = new PhotosGridViewImageAdapter ( PhotosGridViewActivity.this , imagePaths , columnWidth ) ; // setting grid view adapter gridView.setAdapter ( adapter ) ; gridView.setOnItemClickListener ( new AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > parent , View v , int position , long id ) { gridView.getItemAtPosition ( position ) ; Intent i = new Intent ( PhotosGridViewActivity.this , PhotosScreenViewActivity.class ) ; i.putExtra ( `` position '' , position ) ; PhotosGridViewActivity.this.startActivity ( i ) ; } } ) ; } public class MultiChoiceModeListener implements GridView.MultiChoiceModeListener { public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode.getMenuInflater ( ) ; inflater.inflate ( R.menu.contextual_action_menu , menu ) ; //mode.setTitle ( `` Select Items '' ) ; mode.setTitle ( `` 1 item selected '' ) ; return true ; } public boolean onPrepareActionMode ( ActionMode mode , Menu menu ) { return true ; } public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { // Respond to clicks on the actions in the CAB switch ( item.getItemId ( ) ) { case R.id.delete : SparseBooleanArray checked = gridView.getCheckedItemPositions ( ) ; try { int len = checked.size ( ) ; for ( int i = 0 ; i < len ; i++ ) { if ( checked.valueAt ( i ) ) { Integer position = checked.keyAt ( i ) ; //deleteToMessageHistory ( position ) ; } } } catch ( Exception i ) { Toast.makeText ( PhotosGridViewActivity.this , `` Message was not deleted . Try again . `` , Toast.LENGTH_SHORT ) .show ( ) ; } mode.finish ( ) ; // Action picked , so close the CAB return true ; default : return false ; } } public void onDestroyActionMode ( ActionMode mode ) { } public void onItemCheckedStateChanged ( ActionMode mode , int position , long id , boolean checked ) { int selectCount = gridView.getCheckedItemCount ( ) ; switch ( selectCount ) { case 1 : mode.setTitle ( `` 1 item selected '' ) ; break ; default : mode.setTitle ( `` '' + selectCount + `` items selected '' ) ; break ; } } } @ Overridepublic boolean onCreateOptionsMenu ( Menu menu ) { // Inflate the menu ; this adds items to the action bar if it is present . getMenuInflater ( ) .inflate ( co.glurl.appoid.R.menu.photo_gallery , menu ) ; return true ; } @ Overridepublic boolean onOptionsItemSelected ( MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.add : /** Go to the user 's add photos . */ startActivity ( new Intent ( this , PhotoIntentActivity.class ) ) ; break ; //case R.id.settings : /** Go to the user 's settings photos . */ // startActivity ( new Intent ( this , PhotoGridSettings.class ) ) ; // break ; default : return super.onContextItemSelected ( item ) ; } return true ; } }"
double dd = 1.1 ; int ii = 2 ; ii += dd ; // this is a possible bug
for i in 1 3 8 2 5 9 ; do array [ i ] = < some_algorithm_based_value > done
"public < T > int numberOfValues ( Map < T , Set < ? > > map ) Map < String , Set < String > > map = new HashMap < > ( ) ; numberOfValues ( map ) ; numberOfValues ( java.util.Map < java.lang.String , java.util.Set < ? > > ) in class can not be applied to ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > ) public < T , V > int numberOfValues ( Map < T , Set < V > > map ) public < T , V > int numberOfValues ( Map < T , Set < V > > map ) { int n = 0 ; for ( T key : map.keySet ( ) ) { n += map.get ( key ) .size ( ) ; } return n ; } public < T > int numberOfValues ( Map < ? , Set < T > > map ) { int n = 0 ; for ( Set < T > value : map.values ( ) ) { n += value.size ( ) ; } return n ; } public < T > int numberOfValues ( Map < ? , Set < T > > map ) { int n = 0 ; for ( Object key : map.keySet ( ) ) { n += map.get ( key ) .size ( ) ; } return n ; } public int numberOfValues ( Map < ? , ? extends Set < ? > > map ) { int n = 0 ; for ( Set < ? > value : map.values ( ) ) { n += value.size ( ) ; } return n ; }"
Sample.java:11 : error : incompatible types for ( String string : s.getStringList ( ) ) { required : String found : Object import java.util.List ; public class Sample < T > { public List < String > stringList ; public static void main ( String [ ] args ) { Sample s = new Sample ( ) ; // Why this does n't work ? for ( String string : s.getStringList ( ) ) { } // Why does both of the following work ? List < String > newList = s.getStringList ( ) ; Sample < Object > s2 = new Sample < > ( ) ; for ( String string : s2.getStringList ( ) ) { } } public List < String > getStringList ( ) { return stringList ; } }
class Dish { List < Language > languages void addLanguage ( Language lg ) { ... } } class Language { getDescription ( ) { } } class French extends Language { } class Menu { List < Dish > dishes }
public class Foo < B > { public void doSomething ( B argument ) { Class < ? extends Object > type = argument.getClass ( ) ; } }
"@ GetMapping ( `` /romances '' ) public Map < Bookstore , List < Book > > get15RomanticBooks ( ) { return categorizedBookService.get15BooksFromRomanceCategory ( ) ; } @ GetMapping ( `` /biographies '' ) public Map < Bookstore , List < Book > > get15BiographiesBooks ( ) { return categorizedBookService.get15BooksFromBiographiesCategory ( ) ; } @ GetMapping ( `` /guides '' ) public Map < Bookstore , List < Book > > get15GuidesBooks ( ) { return categorizedBookService.get15BooksFromGuidesCategory ( ) ; } @ GetMapping ( `` /fantasy '' ) public Map < Bookstore , List < Book > > get15FantasyBooks ( ) { return categorizedBookService.get15BooksFromFantasyCategory ( ) ; } @ GetMapping ( `` / { category } '' ) public Map < ... ... > get 15BooksFromCategory ( @ PathVariable CategoryType category ) { ... } package bookstore.scraper.book.scrapingtypeservice ; import bookstore.scraper.enums.Bookstore ; import bookstore.scraper.book.Book ; import bookstore.scraper.fetcher.empik.EmpikFetchingBookService ; import bookstore.scraper.fetcher.merlin.MerlinFetchingBookService ; import bookstore.scraper.urlproperties.EmpikUrlProperties ; import bookstore.scraper.urlproperties.MerlinUrlProperties ; import bookstore.scraper.utilities.JSoupConnector ; import lombok.extern.slf4j.Slf4j ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.EnumMap ; import java.util.List ; import java.util.Map ; @ Service @ Slf4jpublic class CategorizedBookService { private final EmpikFetchingBookService empikBookService ; private final MerlinFetchingBookService merlinFetchingBookService ; private final EmpikUrlProperties empikUrlProperties ; private final MerlinUrlProperties merlinUrlProperties ; private final JSoupConnector jSoupConnector ; @ Autowired public CategorizedBookService ( EmpikFetchingBookService empikBookService , MerlinFetchingBookService merlinFetchingBookService , EmpikUrlProperties empikUrlProperties , MerlinUrlProperties merlinUrlProperties , JSoupConnector jSoupConnector ) { this.empikBookService = empikBookService ; this.merlinFetchingBookService = merlinFetchingBookService ; this.empikUrlProperties = empikUrlProperties ; this.merlinUrlProperties = merlinUrlProperties ; this.jSoupConnector = jSoupConnector ; } public Map < Bookstore , List < Book > > get15BooksFromRomanceCategory ( ) { return get15BooksFrom ( empikUrlProperties.getEmpik ( ) .getRomances ( ) , merlinUrlProperties.getMerlin ( ) .getRomances ( ) ) ; } public Map < Bookstore , List < Book > > get15BooksFromFantasyCategory ( ) { return get15BooksFrom ( empikUrlProperties.getEmpik ( ) .getFantasy ( ) , merlinUrlProperties.getMerlin ( ) .getFantasy ( ) ) ; } public Map < Bookstore , List < Book > > get15BooksFromCrimeCategory ( ) { return get15BooksFrom ( empikUrlProperties.getEmpik ( ) .getCrime ( ) , merlinUrlProperties.getMerlin ( ) .getCrime ( ) ) ; } public Map < Bookstore , List < Book > > get15BooksFromGuidesCategory ( ) { return get15BooksFrom ( empikUrlProperties.getEmpik ( ) .getGuides ( ) , merlinUrlProperties.getMerlin ( ) .getGuides ( ) ) ; } public Map < Bookstore , List < Book > > get15BooksFromBiographiesCategory ( ) { return get15BooksFrom ( empikUrlProperties.getEmpik ( ) .getBiographies ( ) , merlinUrlProperties.getMerlin ( ) .getBiographies ( ) ) ; } private Map < Bookstore , List < Book > > get15BooksFrom ( String bookStoreEmpikURL , String bookStoreMerlinURL ) { Map < Bookstore , List < Book > > bookstoreWith15CategorizedBooks = new EnumMap < > ( Bookstore.class ) ; bookstoreWith15CategorizedBooks.put ( Bookstore.EMPIK , empikBookService .get15BooksFromCategory ( jSoupConnector.connect ( bookStoreEmpikURL ) ) ) ; bookstoreWith15CategorizedBooks.put ( Bookstore.MERLIN , merlinFetchingBookService .get15BooksFromCategory ( jSoupConnector.connect ( bookStoreMerlinURL ) ) ) ; return bookstoreWith15CategorizedBooks ; } } package bookstore.scraper.fetcher.empik ; import bookstore.scraper.book.Book ; import bookstore.scraper.urlproperties.EmpikUrlProperties ; import org.jsoup.nodes.Document ; import org.jsoup.nodes.Element ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.List ; import java.util.stream.IntStream ; @ Servicepublic class EmpikFetchingBookService { private static final int FIRST_PART_PRICE = 0 ; private static final int SECOND_PART_PRICE = 1 ; private static final int BESTSELLERS_NUMBER_TO_FETCH = 5 ; private static final int CATEGORIZED_BOOKS_NUMBER_TO_FETCH = 15 ; private static final String DIV_PRODUCT_WRAPPER = `` div.productWrapper '' ; private static final String DATA_PRODUCT_ID = `` data-product-id '' ; private final EmpikUrlProperties empikUrlProperties ; @ Autowired public EmpikFetchingBookService ( EmpikUrlProperties empikUrlProperties ) { this.empikUrlProperties = empikUrlProperties ; } public Book getMostPreciseEmpikBook ( Document document ) { String author = document.select ( `` div.smartAuthorWrapper.ta-product-smartauthor '' ) .select ( `` a '' ) .first ( ) .text ( ) ; String price = convertEmpikPriceWithPossibleDiscountToActualPrice ( document.select ( `` div.price.ta-price-tile '' ) .first ( ) .text ( ) ) ; String title = document.select ( DIV_PRODUCT_WRAPPER ) .select ( `` strong '' ) .first ( ) .text ( ) ; String productID = document.select ( DIV_PRODUCT_WRAPPER ) .select ( `` a '' ) .first ( ) .attr ( DATA_PRODUCT_ID ) ; String bookUrl = createBookURL ( title , productID ) ; return Book.builder ( ) .author ( author ) .price ( price ) .title ( title ) .productID ( productID ) .bookURL ( bookUrl ) .build ( ) ; } public List < Book > get5BestSellersEmpik ( Document document ) { List < Element > siteElements = document.select ( DIV_PRODUCT_WRAPPER ) ; List < Book > empikBestSellers = new ArrayList < > ( ) ; IntStream.range ( 0 , BESTSELLERS_NUMBER_TO_FETCH ) .forEach ( iteratedElement - > { String author = siteElements.get ( iteratedElement ) .select ( `` div.smartAuthorWrapper.ta-product-smartauthor '' ) .select ( `` a '' ) .first ( ) .text ( ) ; String price = convertEmpikPriceWithPossibleDiscountToActualPrice ( siteElements.get ( iteratedElement ) .select ( `` div.price.ta-price-tile '' ) .first ( ) .text ( ) ) ; String title = siteElements.get ( iteratedElement ) .select ( `` strong '' ) .first ( ) .ownText ( ) ; String productID = siteElements.get ( iteratedElement ) .select ( DIV_PRODUCT_WRAPPER ) .select ( `` a '' ) .first ( ) .attr ( DATA_PRODUCT_ID ) ; String bookUrl = createBookURL ( title , productID ) ; empikBestSellers.add ( Book.builder ( ) .author ( author ) .price ( price ) .title ( title ) .productID ( productID ) .bookURL ( bookUrl ) .build ( ) ) ; } ) ; return empikBestSellers ; } public List < Book > get15BooksFromCategory ( Document document ) { List < Book > books = new ArrayList < > ( ) ; List < Element > siteElements = document.select ( `` div.productBox__info '' ) ; IntStream.range ( 0 , CATEGORIZED_BOOKS_NUMBER_TO_FETCH ) .forEach ( iteratedElement - > { String author = executeFetchingAuthorProcess ( siteElements , iteratedElement ) ; String price = convertEmpikPriceWithPossibleDiscountToActualPrice ( siteElements.get ( iteratedElement ) .select ( `` div.productBox__price '' ) .first ( ) .text ( ) ) ; String title = siteElements.get ( iteratedElement ) .select ( `` span '' ) .first ( ) .ownText ( ) ; String productID = siteElements.get ( iteratedElement ) .select ( `` a '' ) .first ( ) .attr ( DATA_PRODUCT_ID ) ; String bookUrl = createBookURL ( title , productID ) ; books.add ( Book.builder ( ) .author ( author ) .price ( price ) .title ( title ) .productID ( productID ) .bookURL ( bookUrl ) .build ( ) ) ; } ) ; return books ; } private String convertEmpikPriceWithPossibleDiscountToActualPrice ( String price ) { String [ ] splittedElements = price.split ( `` \\s+ '' ) ; return splittedElements [ FIRST_PART_PRICE ] + splittedElements [ SECOND_PART_PRICE ] ; } private String createBookURL ( String title , String productID ) { return String.format ( empikUrlProperties.getEmpik ( ) .getConcreteBook ( ) , title , productID ) ; } //method is required as on empik site , sometimes occurs null for author and we need to change code for fetching private static String executeFetchingAuthorProcess ( List < Element > siteElements , int i ) { String author ; Element authorElements = siteElements.get ( i ) .select ( `` span > a '' ) .first ( ) ; if ( authorElements ! = null ) author = authorElements.ownText ( ) ; else author = siteElements.get ( i ) .select ( `` > span > span '' ) .first ( ) .text ( ) ; return author ; } }"
"public void test ( ) { List < Integer > list = new ArrayList < > ( ) ; list.add ( 100 ) ; list.add ( 89 ) ; System.out.println ( list ) ; update1 ( list ) ; System.out.println ( list ) ; update2 ( list ) ; System.out.println ( list ) ; } public void update1 ( List < Integer > list ) { list.remove ( 0 ) ; } public void update2 ( List < Integer > list ) { list = null ; } [ 100,89 ] [ 89 ] [ 89 ]"
quarkus.datasource.usernamequarkus.datasource.passwordquarkus.datasource.jdbc.url
for ( int i=0 ; i < arr.size ( ) ; i++ ) { arr.remove ( i ) ; } for ( String myString : arr ) { arr.remove ( myString ) ; }
"f ( x ) = -e^- ( ( -log ( 7 ) /100 ) * ( 100-x ) ) +7 f=lambda x : -e**- ( ( -log ( 7 ) /100.0 ) * ( 100-x ) ) +7 public static double f ( float x ) { return ( Math.pow ( -Math.E , - ( ( -Math.log ( 7 ) /100 ) * ( 100-x ) ) ) +7 ) ; }"
public static < T extends Number > T sum ( List < T > list ) { Number tot = 0 ; for ( Number n : list ) { tot = tot.doubleValue ( ) + n.doubleValue ( ) ; } return ( T ) tot ; } public static void main ( String [ ] args ) { ArrayList < Integer > listInt = new ArrayList < > ( ) ; listInt.add ( 3 ) ; listInt.add ( 5 ) ; listInt.add ( 6 ) ; listInt.add ( 8 ) ; System.err.println ( `` Sum : `` + Calcolatrice.sum ( listInt ) ) }
int [ ] [ ] someArray = new int [ size ] [ ] ; for ( int i=0 ; i < size ; i++ ) someArray [ i ] = new int [ size ] ; int [ ] [ ] someArray = new int [ size ] [ size ] ;
public class Test { public static void main ( String [ ] args ) { hello : return ; } } public class Test { int i ; public static void main ( String [ ] args ) { Test t = new Test ( ) ; label : t.i = 2 ; } } public class Test { public static void main ( String [ ] args ) { oops : int k = 3 ; } } public class Test { public static void main ( String [ ] args ) { oops : { int k = 3 ; } } }
nd.preClose ( fd ) ; long th ; if ( ( th = readerThread ) ! = 0 ) NativeThread.signal ( th ) ; if ( ( th = writerThread ) ! = 0 ) NativeThread.signal ( th ) ; if ( ! isRegistered ( ) ) kill ( ) ;
"System.out.println ( `` Before Conversion : '' ) ; System.out.println ( `` R : `` + rAvg + `` \nG : '' + gAvg + `` \nB : '' + bAvg ) ; Color.RGBtoHSB ( rAvg , gAvg , bAvg , hsv ) ; hsv [ 2 ] = 100 ; //Set to max valueSystem.out.println ( `` H : `` + hsv [ 0 ] * 360 + `` \nS : `` + hsv [ 1 ] * 100 + `` \nV : '' + hsv [ 2 ] ) ; int rgb = Color.HSBtoRGB ( hsv [ 0 ] , hsv [ 1 ] , hsv [ 2 ] ) ; System.out.println ( `` After conversion '' ) ; Color color = new Color ( rgb ) ; System.out.println ( `` R : `` + color.getRed ( ) ) ; System.out.println ( `` G : `` + color.getGreen ( ) ) ; System.out.println ( `` B : `` + color.getBlue ( ) ) ; Before Conversion : R : 128G :39B :50H : 352.58426S : 69.53125V :100.0After conversionR : 158G : 126B : 233"
"static class Entity { } static class EntityCollection < E extends Entity > { private EntityCollection ( HashMap < ? , E > map ) { } public static < T extends HashMap < ? , M > , M extends Entity > EntityCollection < M > getInstance ( Class < T > mapType , Class < M > entityType ) throws ReflectiveOperationException { T map = mapType.getConstructor ( ) .newInstance ( ) ; return new EntityCollection < M > ( map ) ; } } public static void main ( String [ ] args ) throws Exception { // both compiler warnings are on the line below : EntityCollection < Entity > collection = EntityCollection.getInstance ( LinkedHashMap.class , Entity.class ) ; }"
"public enum Application { INSTANCE ; //methods , fields }"
"List < String > phnnumbers = new ArrayList < String > ( ) ; List < String > names = new ArrayList < String > ( ) ; public void AddAllContacts ( View view ) { try { Cursor phones = getContentResolver ( ) .query ( ContactsContract.CommonDataKinds.Phone.CONTENT_URI , null , null , null , null ) ; while ( phones.moveToNext ( ) ) { String linesp = System.getProperty ( `` line.separator '' ) ; TextView quantityTextView = ( TextView ) findViewById ( R.id.numbersview ) ; String name = phones.getString ( phones.getColumnIndex ( ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME ) ) ; String phoneNumber = phones.getString ( phones.getColumnIndex ( ContactsContract.CommonDataKinds.Phone.NUMBER ) ) ; duplicatecheck ( name , phoneNumber ) ; addthistothelist ( name , phoneNumber ) ; } phones.close ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } public void duplicatecheck ( String name , String phoneNumber ) { for ( int i=0 ; i < phnnumbers.size ( ) ; i++ ) { String thenumber = phnnumbers.get ( i ) ; String thename= names.get ( i ) ; if ( thenumber.equals ( phoneNumber ) ) { phnnumbers.remove ( i ) ; names.remove ( i ) ; TextView quantityTextView = ( TextView ) findViewById ( R.id.numbersview ) ; String textpost = quantityTextView.getText ( ) .toString ( ) ; String newtextpost = textpost.replaceAll ( thenumber , `` UNBELIEVABLEEE '' ) ; String secondtextpost = newtextpost.replaceAll ( thename , `` UNBELIEVABLE '' ) ; quantityTextView.setText ( secondtextpost ) ; NumberOfContactsAdded -- ; } } } public void addthistothelist ( String nameofperson , String NumberOfPerson ) { String linesp = System.getProperty ( `` line.separator '' ) ; TextView quantityTextView = ( TextView ) findViewById ( R.id.numbersview ) ; String textpost = quantityTextView.getText ( ) .toString ( ) ; NumberOfPerson = NumberOfPerson.replaceAll ( `` [ ^0-9 ] '' , `` '' ) ; if ( NumberOfPerson.contains ( `` +1 '' ) ) { phnnumbers.add ( NumberOfPerson ) ; names.add ( nameofperson ) ; NumberOfContactsAdded++ ; quantityTextView.append ( linesp+nameofperson+ '' `` +NumberOfPerson ) ; } else { NumberOfPerson= `` +1 '' +NumberOfPerson ; phnnumbers.add ( NumberOfPerson ) ; names.add ( nameofperson ) ; NumberOfContactsAdded++ ; quantityTextView.append ( linesp+nameofperson+ '' `` +NumberOfPerson ) ; } }"
"public class dummy { public static void main ( String [ ] args ) { Alpha a = new Alpha ( ) ; Beta b = new Beta ( ) ; Gamma g = new Gamma ( ) ; int x , y , z , j , k , l , o , p , q ; x = a.getGammaX ( ) ; y = b.getGammaX ( ) ; z = g.getX ( ) ; a.setGammaX ( 1 ) ; j = a.getGammaX ( ) ; k = b.getGammaX ( ) ; l = g.getX ( ) ; b.setGammaX ( 2 ) ; o = a.getGammaX ( ) ; p = b.getGammaX ( ) ; q = g.getX ( ) ; } } class Alpha { Gamma g = new Gamma ( ) ; public int getGammaX ( ) { return g.getX ( ) ; } public void setGammaX ( int x ) { g.setX ( x ) ; } } class Beta { Gamma g = new Gamma ( ) ; public int getGammaX ( ) { return g.getX ( ) ; } public void setGammaX ( int x ) { g.setX ( x ) ; } } class Gamma { int x = 10 ; public int getX ( ) { return x ; } public void setX ( int y ) { x = y ; } } Gamma g = new Gamma ( ) ; Alpha a = new Alpha ( g ) ; Beta b = new Beta ( g ) ;"
"public class PrdefinedCollectors { public static void main ( String [ ] args ) { Stream < Integer > stream = Stream.of ( 1 , 2 , 3 , 4 , 5 , 6 ) ; List < Integer > dataHolder = new ArrayList < Integer > ( ) ; List < Integer > numbers = stream.reduce ( dataHolder , ( List < Integer > dataStore , Integer data ) - > { System.out.println ( data + `` - > : `` + dataStore ) ; dataStore.add ( data ) ; return dataStore ; } , ( List < Integer > listOne , List < Integer > listTwo ) - > { System.out.println ( `` ListOne Data : '' + listOne + `` List Two data : '' + listTwo ) ; listOne.addAll ( listTwo ) ; return listOne ; } ) ; System.out.println ( numbers ) ; } } 1 - > : [ ] 2 - > : [ 1 ] 3 - > : [ 1 , 2 ] 4 - > : [ 1 , 2 , 3 ] 5 - > : [ 1 , 2 , 3 , 4 ] 6 - > : [ 1 , 2 , 3 , 4 , 5 ] [ 1 , 2 , 3 , 4 , 5 , 6 ] System.out.println ( `` List One Data : `` + listOne + `` List Two data : `` + listTwo ) ;"
"Object [ ] ab = new Object [ ] { `` a '' , `` b '' } ; Object [ ] cd = new Object [ ] { `` c '' , `` d '' } ; public static void m ( Object ... objects ) { System.out.println ( Arrays.asList ( objects ) ) ; } m ( ab , cd ) ; [ [ Ljava.lang.Object ; @ 3e25a5 , [ Ljava.lang.Object ; @ 19821f ] m ( ab ) ; [ a , b ] [ Ljava.lang.Object ; @ 3e25a5"
abstract class Account { ... /** * Attempts to add money to account . */ public void add ( double amount ) { balance += amount ; } } public class CappedAccount extends Account { ... @ Override public void add ( double amount ) { if ( balance + amount > cap ) { // New Precondition return ; } balance += amount ; } }
List < Path > filesList = Files.walk ( Paths.get ( path ) ) .filter ( Files : :isRegularFile ) .collect ( Collectors.toList ( ) ) ;
public class Problem12 { public static void main ( String [ ] args ) { int num ; for ( int i = 1 ; i < 15000 ; i++ ) { num = i * ( i + 1 ) / 2 ; int counter = 0 ; for ( int x = 1 ; x < = num ; x++ ) { if ( num % x == 0 ) { counter++ ; } } System.out.println ( `` [ `` + i + `` ] - `` + num + `` is divisible by `` + counter + `` numbers . `` ) ; } } } public class Problem12 { public static void main ( String [ ] args ) { int num ; outerloop : for ( int i = 1 ; i < 25000 ; i++ ) { num = i * ( i + 1 ) / 2 ; int counter = 0 ; double root = Math.sqrt ( num ) ; for ( int x = 1 ; x < root ; x++ ) { if ( num % x == 0 ) { counter += 2 ; if ( counter > = 500 ) { System.out.println ( `` [ `` + i + `` ] - `` + num + `` is divisible by `` + counter + `` numbers . `` ) ; break outerloop ; } } } } } }
MyWrapper < String > wrapper = new MyWrapper < String > ( ) ; MyWrapper < String > wrapper = new MyWrapper < > ( ) ;
"import java.util . * ; String c ( int y ) { String r= '' '' ; Calendar c=Calendar.getInstance ( ) ; c.set ( 1 , y ) ; c.set ( 2,0 ) ; for ( int i=0 ; i++ < 11 ; c.add ( 2,1 ) ) { c.set ( 5 , c.getActualMaximum ( 5 ) ) ; if ( c.get ( 7 ) ==2 ) r+=i+ '' `` ; } return r ; } import java.util . * ; class M { static String c ( int year ) { String r = `` '' ; Calendar calendar = Calendar.getInstance ( ) ; calendar.set ( Calendar.YEAR , year ) ; calendar.set ( Calendar.MONTH , 0 ) ; for ( int i = 0 ; i++ < 11 ; calendar.add ( Calendar.MONTH , 1 ) ) { calendar.set ( Calendar.DATE , calendar.getActualMaximum ( Calendar.DATE ) ) ; if ( calendar.get ( Calendar.DAY_OF_WEEK ) == 2 ) { r += i+ '' `` ; } } return r ; } public static void main ( String [ ] a ) { System.out.println ( c ( 1 ) ) ; System.out.println ( c ( 297 ) ) ; System.out.println ( c ( 1776 ) ) ; System.out.println ( c ( 2000 ) ) ; System.out.println ( c ( 2016 ) ) ; System.out.println ( c ( 3385 ) ) ; } } 1 2 10 **5 9 1 7 2 10 1 2 10"
"ArrayList < ArrayList < String > > al1=new ArrayList < ArrayList < String > > ( ) ; [ [ Total for all Journals , IOP , IOPscience , , , , , 86 , 16 , 70 , 17 , 8 , 14 , 6 , 17 , 19 , 5 ] , [ 2D Materials , IOP , IOPscience , 10.1088/issn.2053-1583 , 2053-1583 , , 2053-1583 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , [ Acta Physica Sinica ( Overseas Edition ) , IOP , IOPscience , 10.1088/issn.1004-423X , 1004-423X , 1004-423X , , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , [ Advances in Natural Sciences : Nanoscience and Nanotechnology , IOP , IOPscience , 10.1088/issn.2043-6262 , 2043-6262 , , 2043-6262 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , [ Applied Physics Express , IOP , IOPscience , , 1882-0786 , 1882-0778 , 1882-0786 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ] Collections.sort ( al1 , new Comparator < ArrayList < String > > ( ) { @ Override public int compare ( ArrayList < String > o1 , ArrayList < String > o2 ) { return o1.get ( 7 ) .compareTo ( o2.get ( 7 ) ) ; } } ) ;"
public class Main { public static void main ( String [ ] args ) { Test t ; //1 Integer i = new Integer ( 1 ) ; //2 t = new Test ( ) ; //3 System.out.println ( Test4.a ) ; //4 } } class Test { private int a = 10 ; private Test2 t2 ; //5 List < Test2 > list = new ArrayList < Test2 > ( ) { { for ( int i = 0 ; i < a ; i++ ) { add ( new Test2 ( ) ) ; //6 } } } ; } class Test2 extends Test3 { } class Test3 { } class Test4 { public static final int a = 4 ; }
"public class TwiceAsOld { public static void twiceAsOld ( int currentFathersAge , int currentSonsAge ) { int yearsAgo ; int yearsFromNow ; int pastFathersAge = currentFathersAge ; int pastSonsAge = currentSonsAge ; int futureFathersAge = currentFathersAge ; int futureSonsAge = currentSonsAge ; for ( yearsAgo = 0 ; pastFathersAge ! = 2 * pastSonsAge ; yearsAgo++ ) { pastFathersAge -- ; pastSonsAge -- ; } System.out.println ( `` The father was last twice as old as the son `` + yearsAgo + `` years ago . `` ) ; for ( yearsFromNow = 0 ; futureFathersAge ! = 2 * futureSonsAge ; yearsFromNow++ ) { futureFathersAge++ ; futureSonsAge++ ; } System.out.println ( `` The father will be twice as old as the son in `` + yearsFromNow + `` years from now . `` ) ; } public static void main ( String [ ] args ) { twiceAsOld ( 8 , 3 ) ; twiceAsOld ( 3 , 2 ) ; } }"
public Set < K > keySet ( ) { Set < K > ks = keySet ; if ( ks == null ) { ks = new KeySet ( ) ; keySet = ks ; } return ks ; } public Set < K > keySet ( ) { if ( keySet == null ) { keySet = new KeySet ( ) ; } return keySet ; }
"public class Test { private List < Object > obj = new ArrayList < Object > ( ) ; public void add ( Object o ) { obj.add ( o ) ; } public void doAction ( ) { for ( Object o : obj ) { System.out.println ( o.toString ( ) ) ; // maybe NPE , why ? } } }"
"public interface BaseService < T , ID > { T findOne ( ID id ) ; } public class BaseServiceImpl < T , ID extends Serializable > implements BaseService < T , ID > { @ Override public T findOne ( ID id ) { return null ; } }"
"public class MaxTemperatureMapper extends Mapper < LongWritable , Text , Text , IntWritable > public void map ( LongWritable key , Text value , Context context ) throws IOException , InterruptedException class MaxTemperatureMapperS extends Mapper [ LongWritable , Text , Text , IntWritable ] @ throws ( classOf [ IOException ] ) @ throws ( classOf [ InterruptedException ] ) override def map ( key : LongWritable , value : Text , context : Context ) : Unit = { ... } error : method map overrides nothing ."
import static java.lang.Integer.MAX_VALUE ; import static java.lang.Long.MAX_VALUE ; import static java.lang.Integer.MAX_VALUE ; import static java.lang.Long.MAX_VALUE ; public class StaticImportDemo2 { public static void main ( String [ ] args ) { //Error : : The field MAX_VALUE is ambiguous System.out.println ( `` Print without static import Integer.MAX_VALUE `` +MAX_VALUE ) ; } } import static java.lang.System.out ; import static java.lang.Integer . * ; import static java.lang.Long.MAX_VALUE ; public class StaticImportDemo2 { public static void main ( String [ ] args ) { System.out.println ( `` Print without static import Integer.MAX_VALUE `` + MAX_VALUE ) ; } }
Long minima = -9223372036854775808L ; Long anotherminima = -9223372036854775808L ; System.out.println ( minima==anotherminima ) ; //evaluates to false System.out.println ( Long.MIN_VALUE ) ; Long another= 1L ; Long one = 1L ; System.out.println ( another == one ) ; //evaluates to true
"data = new byte [ 8192 ] ; output = new FileOutputStream ( fileLoc ) ; connection = ( HttpURLConnection ) new URL ( currUrl ) .openConnection ( ) ; input = new BufferedInputStream ( connection.getInputStream ( ) ) ; while ( ( count = input.read ( data ) ) ! = -1 ) { output.write ( data , 0 , count ) ; }"
"public class ObjetTWS { String nom ; List < String > jobAmont ; List < String > jobAval ; String type ; public ObjetTWS ( String p_nom , String p_type , String p_jobAmont , String p_jobAval ) { ObjetTWS obj = new ObjetTWS ( ) ; obj.nom = p_nom ; obj.jobAmont.add ( p_jobAmont ) ; obj.jobAval.add ( p_jobAval ) ; obj.type = p_type ;"
"//import not shownpublic class Example extends JFrame implements Runnable { private static boolean print , started ; //print tells whether the thread should keep printing //things out , started tells whether the thread has been //started private JButton start ; //start button private JButton end ; //end button private static Thread thr ; //the thread that is going to do the printing //other fields not shown public Example ( String title ) { Container c = getContentPane ( ) ; //set up the JFrame // ... parts not shown start = new JButton ( `` Start '' ) ; end = new JButton ( `` End '' ) ; c.add ( start ) ; c.add ( end ) ; //add the actionListner for the buttons start.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( started == false ) { thr.start ( ) ; // if the thread has not been started , start the thread started = true ; } else { //otherwise waken the thread . This is to prevent IllegalThreadStateException . thr.notify ( ) ; } print = true ; //should print things out } } ) ; end.addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( started ) { //This action wo n't pause the thread if its not yet started try { thr.wait ( ) ; //pause the thread } catch ( InterruptedException e1 ) { // TODO Auto-generated catch block e1.printStackTrace ( ) ; } } print = false ; //should stop printing } } ) ; validate ( ) ; setVisible ( true ) ; } @ Override public void run ( ) { //override run ( ) method while ( print ) { System.out.println ( `` Printing '' ) ; //print out `` Printing '' } } public static void main ( String [ ] args ) { //main method Example ex = new Example ( `` My Frame '' ) ; //instantiate the frame thr = new Thread ( ex ) ; //make a new thread ; started = false ; //the thread has not been started , so set started to false ; } }"
if ( thing instanceof ObjectType ) { ( ( ObjectType ) thing ) .operation1 ( ) ; ( ( ObjectType ) thing ) .operation2 ( ) ; ( ( ObjectType ) thing ) .operation3 ( ) ; } OjectType differentThing = ( ObjectType ) thing ; if ( thing instanceof ObjectType ) { ( ObjectType ) thing ; //this would declare 'thing ' to be an instance of ObjectType thing.operation1 ( ) ; thing.operation2 ( ) ; thing.operation3 ( ) ; }
class Vehicle { public void drive ( ) throws Exception { System.out.println ( `` Vehicle running '' ) ; } } class Car extends Vehicle { public void drive ( ) { System.out.println ( `` Car Running '' ) ; } public static void main ( String [ ] args ) { Vehicle v = new Car ( ) ; Car c = new Car ( ) ; Vehicle c2 = ( Vehicle ) v ; c.drive ( ) ; try { v.drive ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } //try v.drive ( ) try { c2.drive ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } //try c2.drive ( ) } }
"( defclass color ( ) ( ) ) ( defclass red ( color ) ( ) ) ( defclass blue ( color ) ( ) ) ( defclass yellow ( color ) ( ) ) ( defmethod mix ( ( c1 color ) ( c2 color ) ) `` I do n't know what color that makes '' ) ( defmethod mix ( ( c1 blue ) ( c2 yellow ) ) `` you made green ! `` ) ( defmethod mix ( ( c1 yellow ) ( c2 red ) ) `` you made orange ! '' ) public class Main { public static void main ( String [ ] args ) { mix ( new Red ( ) , new Blue ( ) ) ; mix ( new Yellow ( ) , new Red ( ) ) ; } public static void mix ( Color c1 , Color c2 ) { System.out.println ( `` I do n't know what color that makes '' ) ; } public static void mix ( Blue c1 , Yellow c2 ) { System.out.println ( `` you made green ! `` ) ; } public static void mix ( Yellow c1 , Red c2 ) { System.out.println ( `` you made orange ! `` ) ; } } class Color { } class Red extends Color { } class Blue extends Color { } class Yellow extends Color { } I do n't know what color that makesyou made orange !"
"package stringFormat ; public class Main { public static void main ( String [ ] args ) { String test = String.format ( `` % , d '' , 1000000000 ) ; System.out.println ( test ) ; } }"
"Set < Integer > s = new HashSet < Integer > ( ) ; s.add ( 77 ) ; s.add ( 0 ) ; s.add ( 1 ) ; System.out.println ( s ) ; TreeSet < Integer > s1 = new TreeSet < Integer > ( ) ; s1.add ( 77 ) ; s1.add ( 0 ) ; s1.add ( 1 ) ; System.out.println ( s1 ) ; s = [ 0 , 1 , 77 ] s1= [ 0 , 1 , 77 ]"
"@ Testvoid testCorrectEmailValidator ( ) { List < String > correctEmails = Arrays.asList ( `` test @ test.com '' , `` test123 @ test123.com '' , `` test @ test.com.in '' , `` test.test2 @ test.com '' , `` test.test2.test3 @ test.com '' , `` TEST.2test @ test.com '' ) ; for ( String email : correctEmails ) { boolean isValid = UserCredentialsValidator.emailValidator ( email ) ; System.out.println ( `` Email is valid : `` + email + `` : `` + isValid ) ; assertTrue ( isValid ) ; } } @ Testvoid testCorrectUsernameValidator ( ) { List < String > correctUsernames = Arrays.asList ( `` username '' , `` 123username '' , `` username3 '' , `` user2name '' , `` USERNAME '' , `` USERNAME123 '' , `` 123USERNAME123 '' , `` 2uSERname33 '' ) ; for ( String username : correctUsernames ) { boolean isValid = UserCredentialsValidator.usernameValidation ( username , userList ) ; System.out.println ( `` Username is valid : `` + username + `` : `` + isValid ) ; assertTrue ( isValid ) ; } }"
var foo = function ( ) { return new moo ( ) ; } var moo = function ( ) { return this ; } new foo ( )
public class ShapeFactory { //use getShape method to get object of type shape public Shape getShape ( Class < ? extends Shape > shapeType ) { return shapeType.newInstance ( ) ; } }
"public static boolean isLessThanUnsigned ( long n1 , long n2 ) { return ( n1 < n2 ) ^ ( ( n1 < 0 ) ! = ( n2 < 0 ) ) ; } /** * A ( self-inverse ) bijection which converts the ordering on unsigned longs to the ordering on * longs , that is , { @ code a < = b } as unsigned longs if and only if { @ code flip ( a ) < = flip ( b ) } as * signed longs . */ private static long flip ( long a ) { return a ^ Long.MIN_VALUE ; } /** * Compares the two specified { @ code long } values , treating them as unsigned values between * { @ code 0 } and { @ code 2^64 - 1 } inclusive . * * @ param a the first unsigned { @ code long } to compare * @ param b the second unsigned { @ code long } to compare * @ return a negative value if { @ code a } is less than { @ code b } ; a positive value if { @ code a } is * greater than { @ code b } ; or zero if they are equal */ public static int compare ( long a , long b ) { return Longs.compare ( flip ( a ) , flip ( b ) ) ; }"
"class MappedObject { public void bind ( Integer integer ) { MegaMap.getInstance ( ) .remove ( fInteger , this ) ; fInteger = integer ; MegaMap.getInstance ( ) .add ( fInteger , this ) ; } ... private Integer fInteger ; }"
"class FileHashOutcome { private final String hash ; private final Throwable throwable ; FileHashOutcome ( String hash , Throwable throwable ) { // Usual assignments } } CompletionStage < FileHashOutcome > future = SomeExternalLibrary.calculateHash ( file ) // ... It 's a CompletionStage < String > at this stage ... .handle ( FileHashOutcome : :new ) ; // Then I pass ` future ` to a service that // will execute it and pass back the result asynchronously"
ArrayList < String > nodes = new ArrayList < String > ( ) { { add ( `` n1 '' ) ; add ( `` n2 '' ) ; } } ;
@ java.lang.FunctionalInterfaceinterface I { void test ( ) ; } class C { void imple ( ) { System.out.println ( this.getClass ( ) ) ; System.out.println ( `` Inside Implementation '' ) ; } } class Main { public static void main ( String [ ] args ) { I _interface = new C ( ) : :imple ; System.out.println ( _interface.getClass ( ) ) ; _interface.test ( ) ; } }
"private static class SingletonClass { static final SingletonClass INSTANCE = new SingletonClass ( 0 ) ; final int value ; static SingletonClass getInstance ( ) { return INSTANCE ; } SingletonClass ( int value ) { this.value = value ; } } public static void main ( String [ ] args ) throws NoSuchFieldException , IllegalAccessException { System.out.println ( SingletonClass.getInstance ( ) .value ) ; // 0 // Change the instance to a new one with value 1 setSingletonInstance ( new SingletonClass ( 1 ) ) ; System.out.println ( SingletonClass.getInstance ( ) .value ) ; // 1 // Call getInstance ( ) enough times to trigger JIT optimizations for ( int i=0 ; i < 100_000 ; ++i ) { SingletonClass.getInstance ( ) ; } System.out.println ( SingletonClass.getInstance ( ) .value ) ; // 1 setSingletonInstance ( new SingletonClass ( 2 ) ) ; System.out.println ( SingletonClass.INSTANCE.value ) ; // 2 System.out.println ( SingletonClass.getInstance ( ) .value ) ; // 1 ( 2 expected ) } private static void setSingletonInstance ( SingletonClass newInstance ) throws NoSuchFieldException , IllegalAccessException { // Get the INSTANCE field and make it accessible Field field = SingletonClass.class.getDeclaredField ( `` INSTANCE '' ) ; field.setAccessible ( true ) ; // Remove the final modifier Field modifiersField = Field.class.getDeclaredField ( `` modifiers '' ) ; modifiersField.setAccessible ( true ) ; modifiersField.setInt ( field , field.getModifiers ( ) & ~Modifier.FINAL ) ; // Set new value field.set ( null , newInstance ) ; }"
class Bob { private static final Object locke = new Object ( ) ; private static volatile int value ; public static void fun ( ) { synchronized ( locke ) { value++ ; } } }
"void compute ( Car c , Person p ) { return c.mileage + c.horsepower + c.maxSpeed + p.age ; } void compute ( int mileage , int horsepower , int maxSpeed , int age ) { return mileage + horsepower + maxSpeed + age . ; }"
"Combine < String > c = new Combine < > ( s ) ; List < String > numbers = c.combineFunctions ( splitByComma ) ; Integer max = c.combineFunctions ( splitByComma , convertToInt , findMax ) ; public < U > void combineFunctions ( Function < ? extends Object , ? extends Object > ... functions ) { }"
"String V , Line = '' Bar Foo Bar : Foo8:16 Foo Bar Bar foo barz '' ; V = Line.substring ( Line.indexOf ( `` ( [ 0-9 ] + : [ 0-9 ] + ) + '' ) +1 ) ; V = V.substring ( V.indexOf ( `` : '' ) +1 , V.indexOf ( `` `` ) ) ; System.out.println ( V ) ; Exception in thread `` main '' java.lang.StringIndexOutOfBoundsException : String index out of range : -9 at java.lang.String.substring ( String.java:1955 ) at Indexing.Index ( Indexing.java:94 ) at Indexing.main ( Indexing.java:24 )"
"10000000000Not10,000,000,000 public class Gra extends JFrame { private JTextField textField ; private JTextField textField_1 ; DecimalFormat d = new DecimalFormat ( `` '' ) ; public Gra ( ) { super ( `` Frame '' ) ; getContentPane ( ) .setLayout ( null ) ; textField = new JTextField ( ) ; textField.setBounds ( 163 , 206 , 122 , 28 ) ; getContentPane ( ) .add ( textField ) ; textField.setColumns ( 10 ) ; textField_1 = new JTextField ( ) ; textField_1.setBounds ( 163 , 106 , 122 , 28 ) ; getContentPane ( ) .add ( textField_1 ) ; textField_1.setColumns ( 10 ) ; JLabel lblEnterValue = new JLabel ( `` Enter Value '' ) ; lblEnterValue.setBounds ( 183 , 89 , 69 , 16 ) ; getContentPane ( ) .add ( lblEnterValue ) ; JLabel lblAnswer = new JLabel ( `` Answer '' ) ; lblAnswer.setBounds ( 195 , 187 , 55 , 16 ) ; getContentPane ( ) .add ( lblAnswer ) ; JButton btnClick = new JButton ( `` Click '' ) ; btnClick.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { double num , ans ; String w= textField_1.getText ( ) ; num = Double.parseDouble ( w ) ; ans=Math.pow ( num , 10 ) ; textField.setText ( `` '' +d.format ( ans ) ) ; } } ) ; btnClick.setBounds ( 183 , 249 , 90 , 28 ) ; getContentPane ( ) .add ( btnClick ) ; } } public class Main { public static void main ( String [ ] args ) { Gra obj=new Gra ( ) ; obj.setSize ( 450 , 400 ) ; obj.setResizable ( false ) ; obj.setDefaultCloseOperation ( obj.EXIT_ON_CLOSE ) ; obj.setLocationRelativeTo ( null ) ; obj.setVisible ( true ) ; } }"
List < E > [ ] x = ( List < E > [ ] ) new List [ 100 ] ; List < E > [ ] x = new List [ 100 ] ; List < E > [ ] x = ( List [ ] ) new List [ 100 ] ;
"private static final Map < Integer , String > singleDigitLookup = new HashMap < Integer , String > ( ) { { put ( 0 , '' Zero '' ) ; put ( 1 , '' One '' ) ; put ( 2 , '' Two '' ) ; put ( 3 , '' Three '' ) ; put ( 4 , '' Four '' ) ; put ( 5 , '' Five '' ) ; put ( 6 , '' Six '' ) ; put ( 7 , '' Seven '' ) ; put ( 8 , '' Eight '' ) ; put ( 9 , '' Nine '' ) ; } } ; @ Testpublic void whenWordIsOneThenReturn1 ( ) { assertEquals ( 1 , WordToIntegerConverter.toInteger ( `` One '' ) ) ; } @ Test public void whenWordIsZeroThroughNineReturnIntegerConversion ( ) { HashMap < Integer , String > lookup = new HashMap < Integer , String > ( ) { { put ( 0 , '' Zero '' ) ; put ( 1 , '' One '' ) ; put ( 2 , '' Two '' ) ; put ( 3 , '' Three '' ) ; put ( 4 , '' Four '' ) ; put ( 5 , '' Five '' ) ; put ( 6 , '' Six '' ) ; put ( 7 , '' Seven '' ) ; put ( 8 , '' Eight '' ) ; put ( 9 , '' Nine '' ) ; } } ; for ( int i = 0 ; i < 10 ; i++ ) { assertEquals ( i , WordToIntegerConverter.toInteger ( lookup.get ( i ) ) ) ; } }"
"/* @ implNote * The actual value for this field is injected by JVM . The static * initialization block is used to set the value here to communicate * that this static final field is not statically foldable , and to * avoid any possible circular dependency during vm initialization . */static final boolean COMPACT_STRINGS ; static { COMPACT_STRINGS = true ; }"
DELETE FROM records WHERE id not in ( SELECT id FROM records ORDER BY last_access_date DESC LIMIT 500 )
"class Name { int x ; boolean y ; Name ( ) { // no initialize } public static void main ( ) { Name n = new Name ( ) ; System.out.println ( n.x + `` , `` + n.y ) ; } }"
"static void collectByLambda ( Collection < String > list ) { Collection < Integer > collected = list.stream ( ) .collect ( Collectors.collectingAndThen ( Collectors.groupingBy ( String : :length ) , m - > m.keySet ( ) ) ) ; } static void collectByMethodReference ( Collection < String > list ) { Collection < Integer > collected = list.stream ( ) .collect ( Collectors.collectingAndThen ( Collectors.groupingBy ( String : :length ) , Map : :keySet ) ) ; }"
"@ Entity @ Table ( name = `` users '' , uniqueConstraints = { @ UniqueConstraint ( columnNames = `` username '' ) , @ UniqueConstraint ( columnNames = `` email '' ) } ) public class User { @ NotNull @ Pattern ( regexp = `` ( ? : [ a-z0-9 ! # $ % & '*+/= ? ^_ ` { | } ~- ] + ( ? : \\. [ a-z0-9 ! # $ % & '*+/= ? ^_ ` { | } ~- ] + ) *|\ '' ( ? : [ \\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f ] |\\\\ [ \\x01-\\x09\\x0b\\x0c\\x0e-\\x7f ] ) *\ '' ) @ ( ? : ( ? : [ a-z0-9 ] ( ? : [ a-z0-9- ] * [ a-z0-9 ] ) ? \\. ) + [ a-z0-9 ] ( ? : [ a-z0-9- ] * [ a-z0-9 ] ) ? |\\ [ ( ? : ( ? :25 [ 0-5 ] |2 [ 0-4 ] [ 0-9 ] | [ 01 ] ? [ 0-9 ] [ 0-9 ] ? ) \\. ) { 3 } ( ? :25 [ 0-5 ] |2 [ 0-4 ] [ 0-9 ] | [ 01 ] ? [ 0-9 ] [ 0-9 ] ? | [ a-z0-9- ] * [ a-z0-9 ] : ( ? : [ \\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f ] |\\\\ [ \\x01-\\x09\\x0b\\x0c\\x0e-\\x7f ] ) + ) \\ ] ) '' ) @ Column ( name = `` email '' ) private String email ; @ NotNull @ Size ( min = 6 , max = 15 ) @ Column ( name = `` username '' ) private String username ; @ NotNull @ Column ( name = `` role '' ) private String role ; ... } @ Test ( expected=javax.validation.ConstraintViolationException.class ) public void userEmailMustBeValid ( ) { User p = new User ( `` jdoemail.com '' , `` John '' , `` Doe '' , `` johndoe '' , `` johndoe '' , `` USER_ROLE '' ) ; userService.create ( p ) ; } @ Test ( expected=javax.validation.ConstraintViolationException.class ) public void userEmailCanNotBeNull ( ) { User p = new User ( null , `` John '' , `` Doe '' , `` johndoe '' , `` johndoe '' , `` USER_ROLE '' ) ; userService.create ( p ) ; } @ Test ( expected=javax.validation.ConstraintViolationException.class ) public void userUsernameShouldBeNotNull ( ) { User p = new User ( `` jroe @ mail.com '' , `` John '' , `` Roe '' , null , `` johnroe '' , `` USER_ROLE '' ) ; userService.create ( p ) ; } @ Test ( expected=javax.validation.ConstraintViolationException.class ) public void userRoleShouldBeNotNull ( ) { User p = new User ( `` jroe @ mail.com '' , `` John '' , `` Roe '' , `` johnroe '' , `` johnroe '' , null ) ; userService.create ( p ) ; } Unexpected exception , expected < javax.validation.ConstraintViolationException > but was < org.hibernate.exception.ConstraintViolationException > < jdbc : embedded-database id= '' dataSource '' type= '' HSQL '' > < jdbc : script location= '' classpath : /config/schema.sql '' / > < jdbc : script location= '' classpath : /config/test-data.sql '' / > < /jdbc : embedded-database > < ! -- Hibernate session factory -- > < beans : bean id= '' sessionFactory '' class= '' org.springframework.orm.hibernate4.LocalSessionFactoryBean '' > < beans : property name= '' dataSource '' ref= '' dataSource '' / > < ! -- Annotated hibernate clasess -- > < beans : property name= '' packagesToScan '' value= '' org.munaycoop.taskmanager.domains '' / > < beans : property name= '' hibernateProperties '' > < beans : props > < beans : prop key= '' hibernate.cache.provider_class '' > org.hibernate.cache.internal.NoCacheProvider < /beans : prop > < beans : prop key= '' hibernate.show_sql '' > true < /beans : prop > < beans : prop key= '' hibernate.hbm2ddl.auto '' > update < /beans : prop > < /beans : props > < /beans : property > < /beans : bean >"
"C [ ] arr = new C [ LARGE ] ; for ( int i = 0 ; i < populateThreadCount ; i++ ) { p1.submit ( new PopulateTask ( arr , start , end ) ) } for ( int i = 0 ; i < uploadThreadCount ; i++ ) { p2.submit ( new UploadTask ( arr , start , end ) ; } C [ ] arr = new C [ LARGE ] ; for ( int i = 0 ; i < populateThreadCount ; i++ ) { p1.submit ( new PopulateTask ( arr , start , end ) { void run ( ) { for ( int j = start ; j < = end ; j++ ) { ... do some heavy computation ... arr [ j ] = new C ( some_computed_data ) ; synchronized ( arr [ j ] ) { } } } } ) ; } for ( int i = 0 ; i < uploadThreadCount ; i++ ) { p2.submit ( new UploadTask ( arr , start , end ) { void run ( ) { for ( int j = start ; j < = end ; j++ ) { synchronized ( arr [ j ] ) { upload ( arr [ j ] ) ; } } } } ) ; }"
"public static Point match ( final BufferedImage subimage , final BufferedImage image )"
Optional.of ( s ) .map ( str - > str ) .orElse ( `` '' ) ; Optional.of ( s ) .map ( str - > str ) .orElse ( Optional.empty ( ) ) ; Optional.of ( s ) .map ( str - > Optional.of ( str ) ) .orElse ( `` hello '' ) ;
"Runnable r1 = new Runnable ( ) { @ Override public void run ( ) { try { List < String > commands = new ArrayList < String > ( ) ; commands.add ( `` ping '' ) ; commands.add ( `` -c '' ) ; commands.add ( `` 10 '' ) ; commands.add ( `` google.com '' ) ; System.out.println ( `` Before process '' ) ; ProcessBuilder builder = new ProcessBuilder ( commands ) ; Process process = builder.start ( ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( process.getInputStream ( ) ) ) ; String line = null ; while ( ( line=reader.readLine ( ) ) ! = null ) { System.out.println ( line ) ; } process.waitFor ( ) ; System.out.println ( `` After process '' ) ; } catch ( Exception ex ) { ex.printStackTrace ( ) ; } } } ; r1.run ( ) ; Before processPING google.com ( 173.194.32.33 ) : 56 data bytes64 bytes from 173.194.32.33 : icmp_seq=0 ttl=53 time=34.857 ms64 bytes from 173.194.32.33 : icmp_seq=1 ttl=53 time=39.550 ms64 bytes from 173.194.32.33 : icmp_seq=2 ttl=53 time=44.212 ms64 bytes from 173.194.32.33 : icmp_seq=3 ttl=53 time=38.111 ms64 bytes from 173.194.32.33 : icmp_seq=4 ttl=53 time=39.622 ms64 bytes from 173.194.32.33 : icmp_seq=5 ttl=53 time=41.391 ms64 bytes from 173.194.32.33 : icmp_seq=6 ttl=53 time=41.280 ms64 bytes from 173.194.32.33 : icmp_seq=7 ttl=53 time=39.645 ms64 bytes from 173.194.32.33 : icmp_seq=8 ttl=53 time=35.931 ms64 bytes from 173.194.32.33 : icmp_seq=9 ttl=53 time=38.245 ms -- - google.com ping statistics -- -10 packets transmitted , 10 packets received , 0.0 % packet lossround-trip min/avg/max/stddev = 34.857/39.284/44.212/2.575 msAfter process Thread thread = new Thread ( r1 ) ; thread.start ( ) ; Before process"
private Calendar maturityDate ; private int termOfCD ; public CDAccount ( Account cd ) { super ( cd ) ; } if ( accounts.get ( index ) .getType ( ) .equals ( `` CD '' ) ) { return new CDAccount ( accounts.get ( index ) ) ; }
public class Main { public static void main ( String [ ] args ) { final int NUM ; NUM = 22 ; NUM = 33 ; System.out.println ( NUM ) ; } }
colorPrimarycolorPrimaryDarkcolorAccentwindowActionBarwindowNoTitle style= '' @ style/AppTheme.EditText.PersonName ''
// Measure memory before matrix initialization - > 2MBSystem.out.println ( `` Meg used= '' + ( Runtime.getRuntime ( ) .totalMemory ( ) - Runtime.getRuntime ( ) .freeMemory ( ) ) / ( 1000*1000 ) + '' M '' ) ; byte [ ] [ ] test = new byte [ 4 ] [ 1000000 ] ; // init// Measuring memory after - > 6MB as expectedSystem.out.println ( `` Meg used= '' + ( Runtime.getRuntime ( ) .totalMemory ( ) - Runtime.getRuntime ( ) .freeMemory ( ) ) / ( 1000*1000 ) + '' M '' ) ; // Measure memory before matrix initialization - > 2MBSystem.out.println ( `` Meg used= '' + ( Runtime.getRuntime ( ) .totalMemory ( ) - Runtime.getRuntime ( ) .freeMemory ( ) ) / ( 1000*1000 ) + '' M '' ) ; byte [ ] [ ] test = new byte [ 1000000 ] [ 4 ] ; // init// Measuring memory after - > 30MBSystem.out.println ( `` Meg used= '' + ( Runtime.getRuntime ( ) .totalMemory ( ) - Runtime.getRuntime ( ) .freeMemory ( ) ) / ( 1000*1000 ) + '' M '' ) ;
long millisPerYear = 365*24*60*60*1000 ; System.out.println ( `` millis per year = `` + millisPerYear ) ;
Simulation simulation = getCurrentSimulation ( ) ; FunctionManager functionManager = simulation.getFunctionManager ( ) ; BetterFunctionManager betterFunctionManager = simulation.getFunctionManager ( ) ;
int [ ] [ ] array = new int [ 0 ] [ 1 ] ; System.out.println ( array [ ] [ 0 ] ) ; //wo n't compile.System.out.println ( array [ 0 ] [ 0 ] ) //triggers an out of bounds exception .
"interface Number < N > { N add ( N to ) ; } class Int implements Number < Int > { Int add ( Int to ) { ... } } interface Actor < U > { < E extends U > E act ( Iterable < ? extends E > items ) ; } class Sum implements Actor < Number > { < N extends Number < N > > N act ( Iterable < ? extends N > items ) { ... } } interface Actor < E > { E act ( Iterable < ? extends E > items ) ; } class Sum < N extends Number < N > > implements Actor < N > { N act ( Iterable < ? extends N > items ) { ... } } interface Folder < U > { < E extends U > E fold ( Iterable < ? extends E > items ) ; } class Sum implements Folder < Number > { < N extends Number < N > > N fold ( Iterable < ? extends N > items ) { Iterator < ? extends N > iter = items.iterator ( ) ; N item = iter.next ( ) ; while ( iter.hasNext ( ) ) item = item.add ( iter.next ( ) ) ; return item ; } } class Concat implements Folder < String > { < S extends String > fold ( Iterable < ? extends S > items ) { StringBuilder concatenation = new StringBuilder ( ) ; for ( S item : items ) concatenation.append ( item ) ; return concatenation.toString ( ) ; } } class FoldUtils { static < U , E extends U > E foldDeep ( Folder < U > folder , Iterable < ? extends Iterable < ? extends E > > itemses ) { Collection < E > partialResults = new ArrayList < E > ( ) ; for ( Iterable < ? extends E > items : itemses ) partialResults.add ( folder.fold ( items ) ) ; return folder.fold ( partialResults ) ; } }"
public void find ( Object id ) ; public void find ( Object ... ids ) ;
"System.out.println ( Arrays.toString ( `` test '' .split ( `` ( ? < ! ^ ) '' ) ) ) ; System.out.println ( Arrays.toString ( `` test '' .split ( `` ( ? ! ^ ) '' ) ) ) ; [ t , e , s , t ] [ , t , e , s , t ]"
public class Persian_Cat extends Cat { public Persian_Cat ( File file ) { try { super ( file ) ; } catch ( InvalidArgumentException e ) { } catch ( FileNotFoundException e ) { } } }
"@ Id @ Column ( length = 128 ) private String applikationUserId ; @ EmbeddedIdprivate ApplikationUserPopupMessageId applikationUserPopupMessageId ; @ ManyToOne ( fetch = FetchType.EAGER ) @ MapsId ( `` applikationUserId '' ) private ApplikationUser applikationUser ; @ ManyToOne ( fetch = FetchType.EAGER ) @ MapsId ( `` popupMessageId '' ) private PopupMessage popupMessage ; @ Column ( name = `` gelesen '' ) private boolean gelesen = false ; @ Embeddablepublic class ApplikationUserPopupMessageId implements Serializable { @ Column ( name = `` applikation_user_id '' ) private String applikationUserId ; @ Column ( name = `` popup_message_id '' ) private Long popupMessageId ; @ Entity @ Tablepublic class PopupMessage { @ Id @ GeneratedValue @ Column ( length = 128 ) private Long messageId ; private String title ; private String message ; @ OneToMany ( mappedBy = `` applikationUser '' , cascade = CascadeType.ALL , orphanRemoval = true ) private List < ApplikationUserPopupMessage > applikationUserPopupMessages = new ArrayList < > ( ) ; @ Entitypublic class ApplikationUser implements UserDetails { /** * */ private static final long serialVersionUID = -5517804528054972083L ; @ Id @ Column ( length = 128 ) private String applikationUserId ; @ Column private String password ; @ ManyToOne @ JoinColumn ( name = `` idRole '' ) private Role role ; private boolean enabled = true ; @ OneToMany ( mappedBy = `` popupMessage '' , cascade = CascadeType.ALL , orphanRemoval = true ) private List < ApplikationUserPopupMessage > applikationUserPopupMessages = new ArrayList < > ( ) ;"
Test test = new Test ( ) ;
# ! /bin/bashpath= '' C : /Users/ ... /Desktop/cf_through_sh/appName.jar '' spaceName= '' development '' appBlue= '' appName '' appGreen= '' $ { appName } -dev '' manifestFile= '' C : /Users/ ... /Desktop/cf_through_sh/manifest-dev.yml '' domains= ( `` domain1.com '' `` domain2.com '' ) appHosts= ( `` host-v1 '' `` host-v2 '' ) evaluate_return_code ( ) { ret= $ 1 if [ [ $ ret ! = 0 ] ] then exit $ ret fi } switch_to_target_space ( ) { space= '' development '' echo `` Change space to $ { space } '' cf t -s $ { space } evaluate_return_code $ ? } push_new_release ( ) { appGreen= $ 1 if [ ! -f `` $ { manifestFile } '' ] ; then echo `` Missing manifest : $ { manifestFile } '' ; exit 1 ; fi if [ ! -f `` $ { path } '' ] ; then echo `` Missing artifact : $ { path } '' ; exit 1 ; fi echo `` Deploying $ { path } as $ { appGreen } '' cf push $ { appGreen } -f $ { manifestFile } -p $ { path } -- no-route evaluate_return_code $ ? } map_routes ( ) { app= $ 1 domains= $ 2 shift appHosts= $ 3 for host in $ { appHosts [ * ] } ; do echo `` Mapping $ { host } to $ { app } '' for domain in $ { domains [ * ] } ; do cf map-route $ { app } $ { domain } -n $ { host } evaluate_return_code $ ? done done } unmap_routes ( ) { app= $ 1 domains= $ 2 shift appHosts= $ 3 for host in $ { appHosts [ * ] } ; do echo `` Unmapping $ { host } from $ { app } '' for domain in $ { domains [ * ] } ; do cf unmap-route $ { app } $ { domain } -n $ { host } evaluate_return_code $ ? done done } rename_app ( ) { oldName= $ 1 newName= $ 2 echo `` Renaming $ { oldName } to $ { newName } '' cf rename $ { oldName } $ { newName } evaluate_return_code $ ? } switch_names ( ) { appBlue= $ 1 appGreen= $ 2 appTemp= '' $ { appBlue } -old '' rename_app $ { appBlue } $ { appTemp } rename_app $ { appGreen } $ { appBlue } rename_app $ { appTemp } $ { appGreen } } stop_old_release ( ) { echo `` Stopping old $ { appGreen } app '' cf stop $ { appGreen } evaluate_return_code $ ? } switch_to_target_space $ { spaceName } push_new_release $ { appGreen } map_routes $ { appGreen } $ { domains [ * ] } $ { appHosts [ * ] } unmap_routes $ { appBlue } $ { domains [ * ] } $ { appHosts [ * ] } switch_names $ { appBlue } $ { appGreen } stop_old_releaseecho `` DONE '' exit 0 ; 1. host-v1.domain1.com 2. host-v2.domain1.com 3. host-v1.domain2.com 4. host-v2.domain2.com 5. manual-add.domain1.com //manually added route through admin UI 1. host-v1.domain1.com 2. host-v2.domain1.com 3. host-v1.domain2.com 4. host-v2.domain2.com
"Map < String , List < Integer > > someIntegerListLookup = new HashMap < > ( ) ; String key = `` key '' ; ... List < Integer > integerList = someIntegerListLookup.get ( key ) ; if ( integerList == null ) { integerList = new ArrayList < > ( ) ; someIntegerListLookup.put ( key , integerList ) ; } // getOrDefaultList < Integer > integerList = someIntegerListLookup.getOrDefault ( key , new ArrayList < > ( ) ) ; someIntegerListLookup.put ( key , integerList ) ; // putIfAbsentsomeIntegerListLookup.putIfAbsent ( key , new ArrayList < > ( ) ) ; List < Integer > integerList = someIntegerListLookup.get ( key ) ; List < Integer > integerList = Optional.ofNullable ( someIntegerListLookup.putIfAbsent ( key , new ArrayList < > ( ) ) ) .orElse ( someIntegerListLookup.get ( key ) ) ; List < Integer > integerList = Optional.ofNullable ( someIntegerListLookup.get ( key ) ) .orElseGet ( ( ) - > { // Only runs if the map contains no value for the key List < Integer > defaultIntegersList = new ArrayList < > ( ) ; someIntegerListLookup.put ( key , defaultIntegersList ) ; return defaultIntegersList ; } ) ;"
"class Super { static String greeting ( ) { return `` Goodnight '' ; } String name ( ) { return `` Richard '' ; } } class Sub extends Super { static String greeting ( ) { return `` Hello '' ; } String name ( ) { return `` Dick '' ; } } class Test { public static void main ( String [ ] args ) { Super s = new Sub ( ) ; System.out.println ( s.greeting ( ) + `` , `` + s.name ( ) ) ; } }"
"public static void main ( String o [ ] ) { Map < String , Integer > map = new HashMap < String , Integer > ( ) ; map.put ( `` a '' , 1 ) ; map.entrySet ( ) .stream ( ) .sorted ( Comparator.comparing ( Entry : :getValue ) ) .forEach ( System.out : :println ) ; }"
dates.forEach new Consumer < Period > ( ) { @ Override void accept ( Period period ) { println period } } dates.forEach println dates.forEach println date
< T extends java.util.Date > T a ( @ Nonnull T ... dates ) { return b ( dates ) ; // compile error } < T extends Comparable < T > > T b ( T ... comparables ) { return comparables [ 0 ] ; } < T extends java.util.Date > T a ( @ Nonnull T ... dates ) { return ( T ) b ( dates ) ; // warning about unsafe cast in IntelliJ } < T extends Comparable < T > > T b ( T ... comparables ) { return comparables [ 0 ] ; } java.util.Date a ( java.util.Date ... dates ) { return b ( dates ) ; } < T extends Comparable < T > > T b ( T ... comparables ) { return comparables [ 0 ] ; } fun < T : java.util.Date > a ( dates : Array < T > ) : T { return b ( dates ) ; } fun < T : Comparable < T > > b ( comparables : Array < T > ) : T { return comparables [ 0 ] ; }
"class A { } class B < T extends A , E extends T > { B < ? , A > b ; B < ? , ? extends A > b2 ; }"
"class ContractUtils { public static String getCode ( Contract contract ) throws MyException { try { return contract.getInfo ( ) .getCode ( ) ; //throws ContractException and LogicException } catch ( Exception e ) { throw new MyException ( `` error during code reading : '' +e.getMessage , e ) ; } } //other methods like above ... }"
public class Person { String name ; public Person ( String name ) { this.name = name ; } } public static void main ( String [ ] args ) { List < Person > l = new ArrayList < Person > ( ) ; l.add ( new Person ( `` a '' ) ) ; l.add ( new Person ( `` b '' ) ) ; l.add ( new Person ( `` c '' ) ) ; int i = 0 ; for ( Person s : l ) { if ( s.name.equals ( `` b '' ) ) l.remove ( i ) ; i++ ; } for ( Person s : l ) System.out.println ( s.name ) ; } ac
// sampleData.size ( ) may be greater than 10.000.000Set < String > sampleData = downloadFromWeb ( ) ; return sampleData.stream ( ) .filter ( predicate : :test ) .count ( ) > sampleData.size ( ) * coefficient ;
"PImage img ; PImage two ; PImage sorted ; int j = 0 ; int x = j ; int y = x ; int u = y ; int h = u ; int d = 1 ; void setup ( ) { size ( 736,1051 ) ; img = loadImage ( `` guy.png '' ) ; two = loadImage ( `` guy2.png '' ) ; background ( two ) ; } void draw ( ) { loadPixels ( ) ; for ( int y = 0 ; y < height ; y++ ) { for ( int x = 0 ; x < width ; x++ ) { int loc = x + y*width ; float r = red ( img.pixels [ loc ] ) ; float g = green ( img.pixels [ loc ] ) ; float b = blue ( img.pixels [ loc ] ) ; float av = ( ( r+g+b ) /3.0 ) ; pixels [ loc ] = color ( g , b , r , 17 ) ; //I know r , g , b are switched here } } updatePixels ( ) ; save ( `` guy_coloured.png '' ) ; } void keyPressed ( ) { sorted = loadImage ( `` guy_coloured.png '' ) ; sorted.loadPixels ( ) ; image ( sorted , 0 , 0 ) ; System.out.print ( `` doing it '' ) ; for ( int i = 0 ; i < sorted.pixels.length ; i++ ) { color colours = sorted.pixels [ i ] ; float b = brightness ( colours ) ; if ( b < 50 ) { sorted.pixels [ j ] = sorted.pixels [ i ] ; j++ ; } } for ( int f = 0 ; f < img.pixels.length ; f++ ) { color colours = sorted.pixels [ f ] ; float b = brightness ( colours ) ; if ( b < 100 & & b > 50 ) { sorted.pixels [ x ] = sorted.pixels [ f ] ; x++ ; } } for ( int k = 0 ; k < img.pixels.length ; k++ ) { color colours = sorted.pixels [ k ] ; float b = brightness ( colours ) ; if ( b < 150 & & b > 100 ) { sorted.pixels [ y ] = sorted.pixels [ k ] ; y++ ; } } for ( int t = 0 ; t < img.pixels.length ; t++ ) { color colours = sorted.pixels [ t ] ; float b = brightness ( colours ) ; if ( b < 200 & & b > 150 ) { sorted.pixels [ u ] = sorted.pixels [ t ] ; u++ ; } } for ( int o = 0 ; o < img.pixels.length ; o++ ) { color colours = sorted.pixels [ o ] ; float b = brightness ( colours ) ; if ( b > 200 ) { sorted.pixels [ h ] = sorted.pixels [ o ] ; h++ ; } } System.out.print ( `` done '' ) ; sorted.updatePixels ( ) ; image ( sorted , 0 , 0 ) ; save ( `` guy_sorted.png '' ) ; noLoop ( ) ; }"
Inter someMethod ( ) ; void someMethod2 ( Inter inter )
"private static final String LOGIN_SCOPES = `` https : //www.googleapis.com/auth/plus.login `` + `` https : //www.googleapis.com/auth/userinfo.email '' ; protected static final String SCOPES = `` oauth2 : server : client_id : '' + BuildConfig.GOOGLE_SERVER_CLIENT_ID + `` : api_scope : '' + LOGIN_SCOPES ; String token = GoogleAuthUtil.getToken ( getApplicationContext ( ) , Plus.AccountApi.getAccountName ( googleApiClient ) , SCOPES ) ;"
"class MyClass { String att1 ; String att2 ; } Map < String , MyClass > myMap = myClassStream ( ) .collect ( Collectors.groupingBy ( MyClass : :getAtt1 ) ) ; //Now I want to do Sorting after grouping to collect only the element which has the highest value of attr2 . Map < String , MyClass > postAnalyticsMap = new HashMap < > ( ) ; for ( MyClass post : myClassList ) { if ( post.get ( post.getAtt1 ( ) ) == null ) { post.put ( post.getAtt1 ( ) , post ) ; } else { MyClass existingClass = postAnalyticsMap.get ( post.getAtt1 ( ) ) ; if ( existingPostAnalytics.getAtt2 ( ) < post.getAtt2 ( ) ) { postAnalyticsMap.put ( post.getAtt1 ( ) , post ) ; } } }"
public class A1 { protected boolean foo ( ) { return true ; } } public class B1 extends A1 { } public class C1 { private static boolean secret = false ; public boolean foo ( ) { secret = ! secret ; return secret ; } public static void main ( String [ ] args ) { C1 c = new C1 ( ) ; for ( int i = 0 ; i < args.length ; i++ ) { c.foo ( ) ; } A1 a = new B1 ( ) ; if ( a.foo ( ) == c.foo ( ) ) { System.out.println ( `` success ! `` ) ; } } }
for ( int x=0 ; x < largeObjectCollection.size ( ) ; x++ ) { largeObjectCollection.get ( x ) .SomeValueOne = `` Sample Value 1 '' ; largeObjectCollection.get ( x ) .SomeValueTwo = `` Sample Value 2 '' ; largeObjectCollection.get ( x ) .SomeValueThree = `` Sample Value 3 '' ; //Continues on to over 30 properties ... } for ( int x=0 ; x < largeObjectCollection.size ( ) ; x++ ) { SampleObjectIns myObject = largeObjectCollection.get ( x ) ; myObject.SomeValueOne = `` Sample Value 1 '' ; myObject.SomeValueTwo = `` Sample Value 2 '' ; myObject.SomeValueThree = `` Sample Value 3 '' ; //Continues on to over 30 properties ... }
"package com.example.services ; import javax.transaction.Transactional ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import com.example.modal.User ; import com.example.repository.userRepository ; @ Service @ Transactionalpublic class UserService { @ Autowired private userRepository userRepository ; public UserService ( ) { super ( ) ; } public UserService ( userRepository userRepository ) { this.userRepository = userRepository ; } public void saveMyuser ( User user ) { userRepository.save ( user ) ; } } package com.example.repository ; import org.springframework.data.repository.CrudRepository ; import org.springframework.stereotype.Repository ; import com.example.modal.User ; public interface userRepository extends CrudRepository < User , Integer > { } package com.example.demo ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.autoconfigure.domain.EntityScan ; import org.springframework.context.annotation.ComponentScan ; import org.springframework.data.jpa.repository.config.EnableJpaRepositories ; @ SpringBootApplicationpublic class TutorialProjectApplication { public static void main ( String [ ] args ) { SpringApplication.run ( TutorialProjectApplication.class , args ) ; }"
"interface BlochsHeterogeneousContainer { < T > void put ( Class < T > clazz , T instance ) ; < T > T get ( Class < T > clazz ) ; } interface AlternativeHeterogeneousContainer { // Class < T > not needed because we can use instance.getClass ( ) < T > void put ( T instance ) ; < T > T get ( Class < T > clazz ) ; }"
private static Object myVar = new Object ( ) ; private static Object myVar2 ; static { myVar2 = new Object ( ) ; }
@ TransactionalA ( ) @ TransactionalB ( )
"public class Test { public static void main ( String [ ] args ) throws Exception { A aObject = new A ( ) ; ReferenceQueue < A > queue = new ReferenceQueue < > ( ) ; PhantomReference < A > weak = new PhantomReference < > ( aObject , queue ) ; aObject = null ; System.gc ( ) ; TimeUnit.SECONDS.sleep ( 1 ) ; System.out.println ( queue.poll ( ) ) ; } } class A { @ Override protected void finalize ( ) throws Throwable { // TODO Auto-generated method stub super.finalize ( ) ; System.out.println ( `` finalize '' ) ; } } finalizenull java.lang.ref.PhantomReference @ 5b2c9e5d"
package generarlista ; import java.util . * ; public class GenerarLista { /** * @ param args the command line arguments */ public static void main ( String [ ] args ) { int num ; Scanner read = new Scanner ( System.in ) ; List < Integer > lista = new ArrayList < > ( ) ; System.out.println ( `` A list of 5 integers is generated and printed equal values\n '' ) ; for ( int i=1 ; i < 6 ; i++ ) { System.out.println ( `` Enter the value `` + i + '' element to populate the list '' ) ; num = read.nextInt ( ) ; lista.add ( num ) ; } System.out.println ( `` Data were loaded \n '' ) ; System.out.println ( `` Values in the list are : `` ) ; Iterator < Integer > nameIterator = lista.iterator ( ) ; while ( nameIterator.hasNext ( ) ) { int item = nameIterator.next ( ) ; System.out.print ( item+ '' / `` ) ; } System.out.println ( `` \n '' ) ; System.out.println ( `` Equals are : `` ) ; } }
"Foo [ ] concatenation = streamOfFooArrays.collect ( Collector.of ( ArrayList < Foo > : :new , ( acc , els ) - > { acc.addAll ( Arrays.asList ( els ) ) ; } , ( acc1 , acc2 ) - > { acc1.addAll ( acc2 ) ; return acc1 ; } , acc - > acc.toArray ( new Foo [ x.size ( ) ] ) ) ) ;"
MyObject obj = new MyObject ( ) ; //MyObject.class will be loaded // ClassC.javapackage com.gogog22510.test ; public class ClassC { } // ClassB.javapackage com.gogog22510.test ; public class ClassB extends ClassC { } // ClassA.javapackage com.gogog22510.test ; public class ClassA { public ClassC test ( ) { return new ClassB ( ) ; } } // TestClassLoad.javapackage com.gogog22510.test ; public class TestClassLoad { public static void main ( String [ ] args ) { // initialize ClassA System.out.println ( `` start load ClassA '' ) ; new ClassA ( ) ; } } // ClassA.javapackage com.gogog22510.test ; public class ClassA { public ClassB test ( ) { return new ClassB ( ) ; } }
"public abstract interface Anchor { public abstract double x ( double x ) ; public abstract double y ( double y ) ; } public class Cycle implements Anchor { public Anchor anchor ; public double radius ; public double period ; public double phase = 4.0D ; public Cycle ( Anchor anchor , double radius , double period ) { this.anchor = anchor ; this.radius = radius ; this.period = period ; } public double angle ( double day ) { return this.phase * 3.141592653589793D * ( day / this.period ) / 2.0D ; } public double x ( double x ) { return this.anchor.x ( x ) + Math.cos ( angle ( x ) ) * this.radius ; } public double y ( double y ) { return this.anchor.y ( y ) + Math.sin ( angle ( x ) ) * this.radius ; } } public class Center implements Anchor { public double x ; public double y ; public Center ( double x , double y ) { this.x = x ; this.y = y ; } public double x ( double x ) { return this.x ; } public double y ( double y ) { return this.y ; } }"
"public class Context { private Strategy strategy ; public Context ( Strategy strategy ) { this.strategy = strategy ; } public int executeStrategy ( int num1 , int num2 ) { return strategy.doOperation ( num1 , num2 ) ; } } public interface Strategy { public int doOperation ( int num1 , int num2 ) ; } public class StrategyPatternDemo { public static void main ( String [ ] args ) { Context context = new Context ( new OperationAdd ( ) ) ; System.out.println ( `` 10 + 5 = `` + context.executeStrategy ( 10 , 5 ) ) ; context = new Context ( new OperationSubstract ( ) ) ; System.out.println ( `` 10 - 5 = `` + context.executeStrategy ( 10 , 5 ) ) ; context = new Context ( new OperationMultiply ( ) ) ; System.out.println ( `` 10 * 5 = `` + context.executeStrategy ( 10 , 5 ) ) ; } }"
"Collections.sort ( inputNumbers , ( o1 , o2 ) - > { if ( o1 ! = null & & o2 ! = null ) { return o1.compareTo ( o2 ) ; } else { throw new CannotBuildPyramidException ( `` Unable to build a pyramid '' ) ; } } ) ; @ Test ( expected = CannotBuildPyramidException.class ) public void buildPyramid8 ( ) { // given List < Integer > input = Collections.nCopies ( Integer.MAX_VALUE - 1 , 0 ) ; // run int [ ] [ ] pyramid = pyramidBuilder.buildPyramid ( input ) ; // assert ( exception ) } ArrayList < Integer > list = new ArrayList < > ( inputNumbers ) ;"
"String DATE_FORMAT = `` yyyyMMdd '' ; try { DateFormat dfyyyyMMdd = new SimpleDateFormat ( DATE_FORMAT ) ; dfyyyyMMdd.setLenient ( false ) ; Date formattedDate ; formattedDate = dfyyyyMMdd.parse ( aValue ) ; console.debug ( String.format ( `` % s = % s '' , '' formattedDate '' , formattedDate ) ) ; } catch ( ParseException e ) { // Not a date }"
"//Step 2 : For each point p : //find nearest clusters c//assign the point p to the closest cluster cfor ( Point p : points ) { double minDst = Double.MAX_VALUE ; int minClusterNr = 1 ; for ( Cluster c : clusters ) { double tmpDst = determineDistance ( p , c ) ; if ( tmpDst < minDst ) { minDst = tmpDst ; minClusterNr = c.clusterNumber ; } } clusters.get ( minClusterNr - 1 ) .points.add ( p ) ; } //Step 3 : For each cluster c//find the central point of all points p in c//set c to the center pointArrayList < Cluster > newClusters = new ArrayList < Cluster > ( ) ; for ( Cluster c : clusters ) { double newX = 0 ; double newY = 0 ; for ( Point p : c.points ) { newX += p.x ; newY += p.y ; } newX = newX / c.points.size ( ) ; newY = newY / c.points.size ( ) ; newClusters.add ( new Cluster ( newX , newY , c.clusterNumber ) ) ; } points.stream ( ) .forEach ( p - > { minDst = Double.MAX_VALUE ; // < - THESE ARE GLOBAL VARIABLES NOW minClusterNr = 1 ; // < - THESE ARE GLOBAL VARIABLES NOW clusters.stream ( ) .forEach ( c - > { double tmpDst = determineDistance ( p , c ) ; if ( tmpDst < minDst ) { minDst = tmpDst ; minClusterNr = c.clusterNumber ; } } ) ; clusters.get ( minClusterNr - 1 ) .points.add ( p ) ; } ) ; ArrayList < Cluster > newClusters = new ArrayList < Cluster > ( ) ; clusters.stream ( ) .forEach ( c - > { newX = 0 ; // < - THESE ARE GLOBAL VARIABLES NOW newY = 0 ; // < - THESE ARE GLOBAL VARIABLES NOW c.points.stream ( ) .forEach ( p - > { newX += p.x ; newY += p.y ; } ) ; newX = newX / c.points.size ( ) ; newY = newY / c.points.size ( ) ; newClusters.add ( new Cluster ( newX , newY , c.clusterNumber ) ) ; } ) ; package algo ; import java.awt.Color ; import java.awt.Graphics2D ; import java.awt.image.BufferedImage ; import java.util.ArrayList ; import java.util.Random ; import java.util.function.BiFunction ; import graphics.SimpleColorFun ; /** * An implementation of the k-means-algorithm . * < p > * Step 0 : Determine the max size of the canvas * < p > * Step 1 : Place clusters at random * < p > * Step 2 : For each point p : < br > * find nearest clusters c < br > * assign the point p to the closest cluster c * < p > * Step 3 : For each cluster c < br > * find the central point of all points p in c < br > * set c to the center point * < p > * Stop when none of the cluster x , y values change * @ author makt * */public class Clustering { private BiFunction < Integer , Integer , Color > colorFun = new SimpleColorFun ( ) ; // private BiFunction < Integer , Integer , Color > colorFun = new GrayScaleColorFun ( ) ; public Random rngGenerator = new Random ( ) ; public double max_x ; public double max_y ; public double max_xy ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - //TODO : IS IT GOOD TO HAVE THOUSE VALUES UP HERE ? double minDst = Double.MAX_VALUE ; int minClusterNr = 1 ; double newX = 0 ; double newY = 0 ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- public boolean workWithStreams = false ; public ArrayList < ArrayList < Cluster > > allGeneratedClusterLists = new ArrayList < ArrayList < Cluster > > ( ) ; public ArrayList < BufferedImage > allGeneratedImages = new ArrayList < BufferedImage > ( ) ; public Clustering ( int seed ) { rngGenerator.setSeed ( seed ) ; } public Clustering ( Random rng ) { rngGenerator = rng ; } public void setup ( int centroidCount , ArrayList < Point > points , int maxIterations ) { //Step 0 : Determine the max size of the canvas determineSize ( points ) ; ArrayList < Cluster > clusters = new ArrayList < Cluster > ( ) ; //Step 1 : Place clusters at random for ( int i = 0 ; i < centroidCount ; i++ ) { clusters.add ( new Cluster ( rngGenerator.nextInt ( ( int ) max_x ) , rngGenerator.nextInt ( ( int ) max_y ) , i + 1 ) ) ; } int iterations = 0 ; if ( workWithStreams ) { allGeneratedClusterLists.add ( doClusteringWithStreams ( points , clusters ) ) ; } else { allGeneratedClusterLists.add ( doClustering ( points , clusters ) ) ; } iterations += 1 ; //do until maxIterations is reached or until none of the cluster x and y values change anymore while ( iterations < maxIterations ) { //Step 2 : happens inside doClustering if ( workWithStreams ) { allGeneratedClusterLists.add ( doClusteringWithStreams ( points , allGeneratedClusterLists.get ( iterations - 1 ) ) ) ; } else { allGeneratedClusterLists.add ( doClustering ( points , allGeneratedClusterLists.get ( iterations - 1 ) ) ) ; } if ( ! didPointsChangeClusters ( allGeneratedClusterLists.get ( iterations - 1 ) , allGeneratedClusterLists.get ( iterations ) ) ) { break ; } iterations += 1 ; } System.out.println ( `` Finished with `` + iterations + `` out of `` + maxIterations + `` max iterations '' ) ; } /** * checks if the cluster x and y values changed compared to the previous x and y values * @ param previousCluster * @ param currentCluster * @ return true if any cluster x or y values changed , false if all of them they are the same */ private boolean didPointsChangeClusters ( ArrayList < Cluster > previousCluster , ArrayList < Cluster > currentCluster ) { for ( int i = 0 ; i < previousCluster.size ( ) ; i++ ) { if ( previousCluster.get ( i ) .x ! = currentCluster.get ( i ) .x || previousCluster.get ( i ) .y ! = currentCluster.get ( i ) .y ) { return true ; } } return false ; } /** * * @ param points - all given points * @ param clusters - its point list gets filled in this method * @ return a new Clusters Array which has an < b > empty < /b > point list . */ private ArrayList < Cluster > doClustering ( ArrayList < Point > points , ArrayList < Cluster > clusters ) { //Step 2 : For each point p : //find nearest clusters c //assign the point p to the closest cluster c for ( Point p : points ) { double minDst = Double.MAX_VALUE ; int minClusterNr = 1 ; for ( Cluster c : clusters ) { double tmpDst = determineDistance ( p , c ) ; if ( tmpDst < minDst ) { minDst = tmpDst ; minClusterNr = c.clusterNumber ; } } clusters.get ( minClusterNr - 1 ) .points.add ( p ) ; } //Step 3 : For each cluster c //find the central point of all points p in c //set c to the center point ArrayList < Cluster > newClusters = new ArrayList < Cluster > ( ) ; for ( Cluster c : clusters ) { double newX = 0 ; double newY = 0 ; for ( Point p : c.points ) { newX += p.x ; newY += p.y ; } newX = newX / c.points.size ( ) ; newY = newY / c.points.size ( ) ; newClusters.add ( new Cluster ( newX , newY , c.clusterNumber ) ) ; } allGeneratedImages.add ( createImage ( clusters ) ) ; return newClusters ; } /** * Does the same as doClustering but about twice as fast ! < br > * Uses Java8 streams to achieve this * @ param points * @ param clusters * @ return */ private ArrayList < Cluster > doClusteringWithStreams ( ArrayList < Point > points , ArrayList < Cluster > clusters ) { points.stream ( ) .forEach ( p - > { minDst = Double.MAX_VALUE ; minClusterNr = 1 ; clusters.stream ( ) .forEach ( c - > { double tmpDst = determineDistance ( p , c ) ; if ( tmpDst < minDst ) { minDst = tmpDst ; minClusterNr = c.clusterNumber ; } } ) ; clusters.get ( minClusterNr - 1 ) .points.add ( p ) ; } ) ; ArrayList < Cluster > newClusters = new ArrayList < Cluster > ( ) ; clusters.stream ( ) .forEach ( c - > { newX = 0 ; newY = 0 ; c.points.stream ( ) .forEach ( p - > { newX += p.x ; newY += p.y ; } ) ; newX = newX / c.points.size ( ) ; newY = newY / c.points.size ( ) ; newClusters.add ( new Cluster ( newX , newY , c.clusterNumber ) ) ; } ) ; allGeneratedImages.add ( createImage ( clusters ) ) ; return newClusters ; } //draw all centers from clusters //draw all points //color points according to cluster value private BufferedImage createImage ( ArrayList < Cluster > clusters ) { //add 10 % of the max size left and right to the image bounds //BufferedImage bi = new BufferedImage ( ( int ) ( max_xy * 1.05 ) , ( int ) ( max_xy * 1.05 ) , BufferedImage.TYPE_BYTE_INDEXED ) ; BufferedImage bi = new BufferedImage ( ( int ) ( max_xy * 1.05 ) , ( int ) ( max_xy * 1.05 ) , BufferedImage.TYPE_INT_ARGB ) ; // support 32-bit RGBA values Graphics2D g2d = bi.createGraphics ( ) ; int numClusters = clusters.size ( ) ; for ( Cluster c : clusters ) { //color points according to cluster value Color col = colorFun.apply ( c.clusterNumber , numClusters ) ; //draw all points g2d.setColor ( col ) ; for ( Point p : c.points ) { g2d.fillRect ( ( int ) p.x , ( int ) p.y , ( int ) ( max_xy * 0.02 ) , ( int ) ( max_xy * 0.02 ) ) ; } //draw all centers from clusters g2d.setColor ( new Color ( 160 , 80 , 80 , 200 ) ) ; // use RGBA : transparency=200 g2d.fillOval ( ( int ) c.x , ( int ) c.y , ( int ) ( max_xy * 0.03 ) , ( int ) ( max_xy * 0.03 ) ) ; } return bi ; } /** * Calculates the euclidean distance without square root * @ param p * @ param c * @ return */ private double determineDistance ( Point p , Cluster c ) { //math.sqrt not needed because the relative distance does not change by applying the square root // return Math.sqrt ( Math.pow ( ( p.x - c.x ) , 2 ) +Math.pow ( ( p.y - c.y ) ,2 ) ) ; return Math.pow ( ( p.x - c.x ) , 2 ) + Math.pow ( ( p.y - c.y ) , 2 ) ; } //TODO : What if coordinates can also be negative ? private void determineSize ( ArrayList < Point > points ) { for ( Point p : points ) { if ( p.x > max_x ) { max_x = p.x ; } if ( p.y > max_y ) { max_y = p.y ; } } if ( max_x > max_y ) { max_xy = max_x ; } else { max_xy = max_y ; } } } package algo ; public class Point { public double x ; public double y ; public Point ( int x , int y ) { this.x = x ; this.y = y ; } public Point ( double x , double y ) { this.x = x ; this.y = y ; } } package algo ; import java.util.ArrayList ; public class Cluster { public double x ; public double y ; public int clusterNumber ; public ArrayList < Point > points = new ArrayList < Point > ( ) ; public Cluster ( double x , double y , int clusterNumber ) { this.x = x ; this.y = y ; this.clusterNumber = clusterNumber ; } } package graphics ; import java.awt.Color ; import java.util.function.BiFunction ; /** * Simple function for selection a color for a specific cluster identified with an integer-ID . * * @ author makl , hese */public class SimpleColorFun implements BiFunction < Integer , Integer , Color > { /** * Selects a color value . * @ param n current index * @ param numCol number of color-values possible */ @ Override public Color apply ( Integer n , Integer numCol ) { Color col = Color.BLACK ; //color points according to cluster value switch ( n ) { case 1 : col = Color.RED ; break ; case 2 : col = Color.GREEN ; break ; case 3 : col = Color.BLUE ; break ; case 4 : col = Color.ORANGE ; break ; case 5 : col = Color.MAGENTA ; break ; case 6 : col = Color.YELLOW ; break ; case 7 : col = Color.CYAN ; break ; case 8 : col = Color.PINK ; break ; case 9 : col = Color.LIGHT_GRAY ; break ; default : break ; } return col ; } } package main ; import java.awt.image.BufferedImage ; import java.io.File ; import java.io.IOException ; import java.util.ArrayList ; import java.util.Random ; import java.util.concurrent.TimeUnit ; import javax.imageio.ImageIO ; import algo.Clustering ; import algo.Point ; import eu.lbase.common.util.Stopwatch ; // import persistence.DataHandler ; public class Main { private static final String OUTPUT_DIR = ( new File ( `` ./output/withoutStream '' ) ) .getAbsolutePath ( ) + File.separator ; private static final String OUTPUT_DIR_2 = ( new File ( `` ./output/withStream '' ) ) .getAbsolutePath ( ) + File.separator ; public static void main ( String [ ] args ) { Random rng = new Random ( ) ; int numPoints = 300 ; int seed = 2 ; ArrayList < Point > points = new ArrayList < Point > ( ) ; rng.setSeed ( rng.nextInt ( ) ) ; for ( int i = 0 ; i < numPoints ; i++ ) { points.add ( new Point ( rng.nextInt ( 1000 ) , rng.nextInt ( 1000 ) ) ) ; } Stopwatch stw = Stopwatch.create ( TimeUnit.MILLISECONDS ) ; { // Stopwatch start System.out.println ( `` -- - Started without streams -- - '' ) ; stw.start ( ) ; Clustering algo = new Clustering ( seed ) ; algo.setup ( 8 , points , 25 ) ; // Stopwatch stop stw.stop ( ) ; System.out.println ( `` -- - Finished without streams -- - '' ) ; System.out.printf ( `` Elapsed time : % d msec % n % n '' , stw.getElapsed ( ) ) ; System.out.printf ( `` Writing images to ' % s ' ... % n '' , OUTPUT_DIR ) ; deleteOldFiles ( new File ( OUTPUT_DIR ) ) ; makeImages ( OUTPUT_DIR , algo ) ; System.out.println ( `` Finished writing.\n '' ) ; } { System.out.println ( `` -- - Started with streams -- - '' ) ; stw.start ( ) ; Clustering algo = new Clustering ( seed ) ; algo.workWithStreams = true ; algo.setup ( 8 , points , 25 ) ; // Stopwatch stop stw.stop ( ) ; System.out.println ( `` -- - Finished with streams -- - '' ) ; System.out.printf ( `` Elapsed time : % d msec % n % n '' , stw.getElapsed ( ) ) ; System.out.printf ( `` Writing images to ' % s ' ... % n '' , OUTPUT_DIR_2 ) ; deleteOldFiles ( new File ( OUTPUT_DIR_2 ) ) ; makeImages ( OUTPUT_DIR_2 , algo ) ; System.out.println ( `` Finished writing.\n '' ) ; } } /** * creates one image for each iteration in the given directory * @ param algo */ private static void makeImages ( String dir , Clustering algo ) { int i = 1 ; for ( BufferedImage img : algo.allGeneratedImages ) { try { String filename = String.format ( `` % 03d.png '' , i ) ; ImageIO.write ( img , `` png '' , new File ( dir + filename ) ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } i++ ; } } /** * deletes old files from the target directory < br > * Does < b > not < /b > delete directories ! * @ param dir - directory to delete files from * @ return */ private static boolean deleteOldFiles ( File file ) { File [ ] allContents = file.listFiles ( ) ; if ( allContents ! = null ) { for ( File f : allContents ) { deleteOldFiles ( f ) ; } } if ( ! file.isDirectory ( ) ) { return file.delete ( ) ; } return false ; } }"
"public static String getAuthTicket ( ) { String authTicket = null ; HttpResponse httpResponse = getAuthResponse ( ) ; String body ; if ( httpResponse.getStatusLine ( ) .getStatusCode ( ) == 200 ) { try { body = IOUtils.toString ( httpResponse.getEntity ( ) .getContent ( ) ) ; Gson gson = new GsonBuilder ( ) .disableHtmlEscaping ( ) .create ( ) ; ResponseTicket responseTicket = gson.fromJson ( body , ResponseTicket.class ) ; authTicket = responseTicket.getTicket ( ) ; } catch ( UnsupportedOperationException e ) { LOGGER.error ( `` UnsupportedOperationException : `` , e ) ; } catch ( IOException e ) { LOGGER.error ( `` IO Exception : `` , e ) ; } } return authTicket ; }"
"public class Recording { public static void main ( String [ ] args ) { System.out.println ( `` Constructors : `` + MainRecord.class.getConstructors ( ) .length ) ; System.out.println ( `` Methods : `` + MainRecord.class.getDeclaredMethods ( ) .length ) ; } record MainRecord ( int i , String s ) { } } ❯ javac -- enable-preview -- release 15 Recording.javaNote : Recording.java uses preview language features.Note : Recompile with -Xlint : preview for details.❯ java -- enable-preview RecordingConstructors : 0Methods : 5 ❯ javap Recording\ $ MainRecordCompiled from `` Recording.java '' final class Recording $ MainRecord extends java.lang.Record { Recording $ MainRecord ( int , java.lang.String ) ; public final java.lang.String toString ( ) ; public final int hashCode ( ) ; public final boolean equals ( java.lang.Object ) ; public int i ( ) ; public java.lang.String s ( ) ; } ❯ jshell -- enable-preview| Welcome to JShell -- Version 15| For an introduction type : /help introjshell > record JShellRecord ( int i , String s ) { } | created record JShellRecordjshell > JShellRecord.class.getConstructors ( ) .length $ 2 == > 1 ❯ java -versionopenjdk version `` 15 '' 2020-09-15OpenJDK Runtime Environment AdoptOpenJDK ( build 15+36 ) OpenJDK 64-Bit Server VM AdoptOpenJDK ( build 15+36 , mixed mode , sharing ) ❯ java -versionopenjdk version `` 14.0.2 '' 2020-07-14OpenJDK Runtime Environment AdoptOpenJDK ( build 14.0.2+12 ) OpenJDK 64-Bit Server VM AdoptOpenJDK ( build 14.0.2+12 , mixed mode , sharing ) ❯ javac -- enable-preview -- release 14 Recording.javaNote : Recording.java uses preview language features.Note : Recompile with -Xlint : preview for details.❯ java -- enable-preview RecordingConstructors : 1Methods : 5"
< LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : background= '' @ null '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' / >
"String month ; BigDecimal salary ; String department ; String noOfEmp ; String monthBigDecimal salaryString noOfEmp Map < String , Integer > result= inputModels.parallelStream ( ) .collect ( Collectors.groupingBy ( InputModel : :getMonth , LinkedHashMap : :new , Collectors.summingInt ( InputModel : :getNoOfEmp ) ) ) ;"
"System.out.println ( `` Double : `` + Double.toHexString ( d ) ) ; //prints 0x1.8p1 System.out.println ( `` Float : `` + Float.toHexString ( f ) ) ; //prints 0x1.8p1 System.out.println ( `` Double : `` + new Double ( d ) .byteValue ( ) ) ; //prints 3 System.out.println ( `` Float : `` + new Float ( f ) .byteValue ( ) ) ; //prints 3 Long l = Double.doubleToLongBits ( d ) ; Integer i = Float.floatToIntBits ( f ) ; System.out.println ( `` Double ( long bits ) : `` + l ) ; //prints 4613937818241073152 System.out.println ( `` Float ( int bits ) : `` + i ) ; //prints 1077936128 System.out.println ( `` Long-toBinary : `` + Long.toBinaryString ( l ) ) ; //prints 100000000001000000000000000000000000000000000000000000000000000 System.out.println ( `` Integer-toBinary : `` + Integer.toBinaryString ( i ) ) ; //prints 1000000010000000000000000000000 97346822*3f , result is 2.9204048E8 , 97346822*3.0 gives me 2.92040466E8 ."
"List < String > fruits = new ArrayList < String > ( Arrays.asList ( `` Apple '' , `` Banana '' , `` Orange '' , `` Watermelon '' , `` Peach '' ) ) ; Orange , Watermelon , Apple , Banana , Peach"
"Outer.java , Inner.java , Test.java class Outer { private int data = 50 ; class Inner { void msg ( ) { System.out.println ( `` Data is : `` + data ) ; } } } class Test { public static void main ( String args [ ] ) { Outer obj = new Outer ( ) ; Outer.Inner in = obj.new Inner ( ) ; in.msg ( ) ; } }"
"spring : data : mongodb : port : 27017 uri : mongodb : //127.0.0.1/little-data repositories : enabled : true authentication-database : adminserver : port : 8090 spring : data : mongodb : host : 127.0.0.1 port : 27017 database : little-data repositories : enabled : true authentication-database : adminserver : port : 8090 import org.springframework.data.mongodb.core.index.Indexed ; import org.springframework.data.mongodb.core.mapping.Document ; import org.springframework.data.annotation.Id ; import org.springframework.data.mongodb.core.mapping.Field ; import lombok . * ; @ Data @ NoArgsConstructor @ Document ( collection = `` posts '' ) public class Post { @ Id @ Field ( `` id '' ) private int id ; @ Field ( `` gameName '' ) private String gameName ; @ Indexed ( unique=true ) @ Field ( `` gameGenre '' ) private String gameGenre ; public Post ( int id , String game , String genre ) { this.id = id ; this.gameName = game ; this.gameGenre = genre ; } }"
"PriceDB = { [ `` profileKeys '' ] = { [ `` Name - 回音山 '' ] = `` Name - 回音山 '' , } , [ `` char '' ] = { [ `` Name - 回音山 '' ] = { [ `` CurrentValue '' ] = `` 一口价：|cffffffff70,197|TInterface\\MoneyFrame\\UI-GoldIcon:0:0:2:0|t|r '' , } , } , } Scanner scanner ; if ( region.equals ( `` US '' ) ) { scanner = new Scanner ( new File ( `` C : \\Program Files\\World of Warcraft\\WTF\\Account\\313023286 # 1\\SavedVariables\\WoWTokenPrice.lua '' ) ) ; } else if ( region.equals ( `` EU '' ) ) { scanner = new Scanner ( new File ( `` C : \\Program Files\\World of Warcraft\\WTF\\Account\\313495228 # 1\\SavedVariables\\WoWTokenPrice.lua '' ) ) ; } else if ( region.equals ( `` China '' ) ) { File file = new File ( `` C : \\Program Files\\World of Warcraft\\WTF\\Account\\232241227 # 1\\SavedVariables\\WoWTokenPrice.lua '' ) ; System.out.println ( file.exists ( ) ) ; scanner = new Scanner ( file ) ; } else { System.exit ( 1 ) ; break ; }"
//take the input from usertext = br.readLine ( ) ; //convert to char arraychar ary [ ] = text.toCharArray ( ) ; System.out.println ( `` initial string is : '' + text.toCharArray ( ) ) ; System.out.println ( text.toCharArray ( ) ) ; initial string is : [ C @ 5603f377abcd
Set < Integer > set = new HashSet < Integer > ( ) ; set.add ( 2 ) ; set.add ( 7 ) ; set.add ( 3 ) ; set.add ( 9 ) ; set.add ( 6 ) ; for ( int i : set ) { System.out.println ( i ) ; } 23679
"public class Test { public static void main ( String [ ] args ) { int count1 = 0 , count2 = 0 ; Test [ ] test1 = new Test [ 5 ] ; Test [ ] test2 = new Test [ 5 ] ; if ( test1 == null || test2 == null ) System.out.println ( `` null '' ) ; for ( int j = 0 ; j < 3 ; j++ ) { for ( int i = 0 ; i < test1.length ; i++ ) { if ( test1 [ i ] == null ) { test1 [ i ] = new Test ( ) ; count1++ ; } } } for ( int j = 0 ; j < 3 ; j++ ) { for ( Test test : test2 ) { if ( test == null ) { test = new Test ( ) ; count2++ ; } } } System.out.println ( count1 + `` `` + count2 ) ; } }"
"public void method ( int x ) { // ... } public void method ( int x , String ... things ) { // ... } method ( 3 ) ;"
"Key|Vlaue2 -- - > 31 -- - > 05 -- - > 1 import java.util . * ; public class Example { public static void main ( String [ ] args ) { HashMap < Integer , Integer > map = new HashMap < > ( ) ; map.put ( 2,3 ) ; map.put ( 1,0 ) ; map.put ( 5,1 ) ; ///////// } }"
static { addItem ( ... ) ; }
} catch ( SomeException e ) { e.printStackTrace ( ) ; } } catch ( SomeException e ) { e.getMessage ( ) ; } } catch ( IOException E ) { System.out.println ( `` Error occured . Please try again . `` ) ; }
"public class ArrayTest { public static void main ( String [ ] args ) { ArrayTest arrayTest = new ArrayTest ( ) ; // Option one String [ ] data = { `` A '' , `` B '' , `` C '' } ; // Option two String data1 = `` A '' ; arrayTest.test ( data ) ; } public void test ( String [ ] ... data ) { System.out.println ( `` -- -From : String [ ] ... data -- - '' ) ; for ( String [ ] item : data ) { for ( String innerItem : item ) { System.out.println ( innerItem ) ; } } } public void test ( String ... data ) { System.out.println ( `` -- -From : String ... data -- - '' ) ; for ( String item : data ) { System.out.println ( item ) ; } } }"
public static void main ( String [ ] args ) { printType ( new ArrayList < Integer > ( ) { } ) ; printType ( new ArrayList < Integer > ( ) ) ; } public static void printType ( final List < ? > list ) { System.out.println ( ( ( ParameterizedType ) list.getClass ( ) .getGenericSuperclass ( ) ) .getActualTypeArguments ( ) [ 0 ] ) ; } class java.lang.IntegerE
"CREATE TABLE ` gps_coordinate ` ( ` ID ` BIGINT ( 50 ) NOT NULL AUTO_INCREMENT , ` user_id ` VARCHAR ( 255 ) NULL DEFAULT ' 0 ' , ` driver_id ` INT ( 20 ) NULL DEFAULT ' 0 ' , ` latitude ` VARCHAR ( 50 ) NULL DEFAULT ' 0.00000000 ' , ` longitude ` VARCHAR ( 50 ) NULL DEFAULT ' 0.00000000 ' , ` distance_in_miles ` VARCHAR ( 50 ) NULL DEFAULT ' 0.00 ' , ` distance_in_kms ` VARCHAR ( 50 ) NULL DEFAULT ' 0.00 ' , ` device_time ` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP , ` created_by ` VARCHAR ( 50 ) NULL DEFAULT 'Anonymous ' , ` created_date ` DATETIME NULL DEFAULT CURRENT_TIMESTAMP , ` updated_by ` VARCHAR ( 50 ) NULL DEFAULT 'Anonymous ' , ` updated_date ` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP , PRIMARY KEY ( ` ID_HUB ` ) , INDEX ` user_fk ` ( ` user_id ` ) , ) COLLATE='utf8_general_ci'ENGINE=InnoDBAUTO_INCREMENT=208445 ;"
"System.out.printf ( `` % 1 $ d + % b '' , 456 , false ) ; System.out.println ( ) ; System.out.printf ( `` % 1 $ d + % b '' , 456 ) ; 456 + true456 + true"
"public interface Cache { Object get ( Object key ) ; Object put ( Object key , Object value ) ; void clear ( ) ; }"
System.out.println ( 2e+5 ) ; 200000.0 System.out.println ( 2e-5 ) ; 2.0e-5 0.00002
"String str = `` test '' .replaceAll ( `` ( . * ) $ '' , '' $ 1s '' ) ; String str = `` test '' .replaceFirst ( `` ( . * ) $ '' , '' $ 1s '' ) ;"
"import java.nio.file.Files ; import java.nio.file.Path ; import java.nio.file.Paths ; import java.util.function.Function ; public class Main { public static void main ( String [ ] args ) { PermeableFunction < Path , Long > function = PermeableFunction.from ( Files : :size ) ; Path doesNotExist = Paths.get ( `` /does/not/exist '' ) ; // function.apply ( doesNotExist ) ; - > throws WrappedException function.applyChecked ( doesNotExist ) ; // throws NoSuchFileException without the need of a try/catch block ! } } interface PermeableFunction < T , R > extends CheckedFunction < T , R , RuntimeException > { static < T , R > PermeableFunction < T , R > from ( WrappedFunction < T , R > wrappedFunction ) { return CheckedFunction. < T , R , RuntimeException > from ( wrappedFunction ) : :applyChecked ; } } interface CheckedFunction < T , R , E extends Exception > extends WrappedFunction < T , R > { @ Override R applyChecked ( T t ) throws E ; static < T , R , E extends Exception > CheckedFunction < T , R , E > from ( WrappedFunction < T , R > wrappedFunction ) { return wrappedFunction : :applyChecked ; } } interface WrappedFunction < T , R > extends Function < T , R > { R applyChecked ( T t ) throws Exception ; @ Override default R apply ( T t ) { try { return applyChecked ( t ) ; } catch ( Exception e ) { throw new WrappedException ( e ) ; } } } class WrappedException extends RuntimeException { public WrappedException ( Throwable cause ) { super ( cause ) ; } }"
"@ State ( Scope.Benchmark ) public class FindMaxBenchmark { public static int SIZE = 1_000_000 ; @ Benchmark @ CompilerControl ( CompilerControl.Mode.DONT_INLINE ) public static void findMax_if ( Blackhole bh , Mock mock ) { int result = Integer.MIN_VALUE ; int [ ] data = mock.tab ; for ( int i = 0 ; i < data.length ; i++ ) { if ( data [ i ] > result ) { result = data [ i ] ; } } bh.consume ( result ) ; } @ Benchmark @ CompilerControl ( CompilerControl.Mode.DONT_INLINE ) public static void findMax_if_else ( Blackhole bh , Mock mock ) { int result = Integer.MIN_VALUE ; int [ ] data = mock.tab ; for ( int i = 0 ; i < data.length ; i++ ) { if ( data [ i ] > result ) { result = data [ i ] ; } else { result = result ; } } bh.consume ( result ) ; } @ Benchmark @ CompilerControl ( CompilerControl.Mode.DONT_INLINE ) public static void findMax_ternary ( Blackhole bh , Mock mock ) { int result = Integer.MIN_VALUE ; int [ ] data = mock.tab ; for ( int i = 0 ; i < data.length ; i++ ) { result = data [ i ] > result ? data [ i ] : result ; } bh.consume ( result ) ; } @ Benchmark @ CompilerControl ( CompilerControl.Mode.DONT_INLINE ) public static void findMax_intrinsicMax ( Blackhole bh , Mock mock ) { int result = Integer.MIN_VALUE ; int [ ] data = mock.tab ; for ( int i = 0 ; i < data.length ; i++ ) { result = Math.max ( data [ i ] , result ) ; } bh.consume ( result ) ; } @ State ( Scope.Thread ) public static class Mock { private int [ ] tab = new int [ SIZE ] ; public int [ ] getTab ( ) { return tab ; } @ Setup ( Level.Iteration ) public void setup ( ) { Random r = new Random ( ) ; this.tab = r.ints ( SIZE ) .toArray ( ) ; } } } c2 , level 4 , codes.dbg.FindMaxBenchmark : :findMax_if_else , version 493 ( 165 bytes ) 0x00007fc7a8671a6b : cmp r8d , ebp ╭ 0x00007fc7a8671a6e : jae 0x00007fc7a8671b3d │ 0x00007fc7a8671a74 : mov edx , DWORD PTR [ r9+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) │ 0x00007fc7a8671a78 : cmp edx,0x80000000 │╭ 0x00007fc7a8671a7e : jg 0x00007fc7a8671a85 ; *if_icmple { reexecute=0 rethrow=0 return_oop=0 } ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 23 ( line 34 ) ││ 0x00007fc7a8671a80 : mov edx,0x80000000 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) │↘ 0x00007fc7a8671a85 : mov ebx , ebp 0.02 % │ 0x00007fc7a8671a87 : add ebx,0xfffffffd │ 0x00007fc7a8671a8a : cmp r8d , ebx │ 0x00007fc7a8671a8d : cmovl ebx , r11d │ 0x00007fc7a8671a91 : mov r8d,0x1 0.00 % │ 0x00007fc7a8671a97 : cmp ebx,0x1 │ ╭ 0x00007fc7a8671a9a : jle 0x00007fc7a8671b00 │ │ 0x00007fc7a8671a9c : mov rdi , r9 ; *goto { reexecute=0 rethrow=0 return_oop=0 } │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 39 ( line 33 ) │ │╭ 0x00007fc7a8671a9f : jmp 0x00007fc7a8671ab9 0.01 % │ ││ ↗ 0x00007fc7a8671aa1 : mov edx , ecx │ ││ │ 0x00007fc7a8671aa3 : nop DWORD PTR [ rax+0x0 ] │ ││ │ 0x00007fc7a8671aaa : nop WORD PTR [ rax+rax*1+0x0 ] 8.06 % │ ││ ↗│ 0x00007fc7a8671ab0 : add r8d,0x4 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ ││ ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) 11.38 % │ ││ ││ 0x00007fc7a8671ab4 : cmp r8d , ebx 13.63 % │ ││╭ ││ 0x00007fc7a8671ab7 : jge 0x00007fc7a8671af1 ; *aload_3 { reexecute=0 rethrow=0 return_oop=0 } │ │││ ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 18 ( line 34 ) 3.02 % │ │↘│ ││ ↗ 0x00007fc7a8671ab9 : mov r11d , DWORD PTR [ r9+r8*4+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) 8.53 % │ │ │ ││ │ 0x00007fc7a8671abe : cmp r11d , edx 4.54 % │ │ │╭ ││ │ 0x00007fc7a8671ac1 : jg 0x00007fc7a8671ae2 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ ││ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) 4.96 % │ │ ││ ││↗ │ 0x00007fc7a8671ac3 : mov r11d , DWORD PTR [ r9+r8*4+0x14 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ ││ │││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) 3.73 % │ │ ││ │││ │ 0x00007fc7a8671ac8 : cmp r11d , edx 9.19 % │ │ ││╭ │││ │ 0x00007fc7a8671acb : jg 0x00007fc7a8671ae7 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ │││ │││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) 3.70 % │ │ │││ │││↗ │ 0x00007fc7a8671acd : mov r11d , DWORD PTR [ r9+r8*4+0x18 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │││ ││││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) 4.96 % │ │ │││ ││││ │ 0x00007fc7a8671ad2 : cmp r11d , edx 4.45 % │ │ │││╭││││ │ 0x00007fc7a8671ad5 : jg 0x00007fc7a8671aec ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││││││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) 8.55 % │ │ ││││││││↗│ 0x00007fc7a8671ad7 : mov ecx , DWORD PTR [ r9+r8*4+0x1c ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││││││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) 6.11 % │ │ ││││││││││ 0x00007fc7a8671adc : cmp ecx , edx 2.48 % │ │ ││││╰│││││ 0x00007fc7a8671ade : jle 0x00007fc7a8671ab0 ; *if_icmple { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││ │││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 23 ( line 34 ) │ │ ││││ ╰││││ 0x00007fc7a8671ae0 : jmp 0x00007fc7a8671aa1 │ │ │↘││ ││││ 0x00007fc7a8671ae2 : mov edx , r11d 0.00 % │ │ │ ││ ╰│││ 0x00007fc7a8671ae5 : jmp 0x00007fc7a8671ac3 0.00 % │ │ │ ↘│ │││ 0x00007fc7a8671ae7 : mov edx , r11d 0.00 % │ │ │ │ ╰││ 0x00007fc7a8671aea : jmp 0x00007fc7a8671acd 0.00 % │ │ │ ↘ ││ 0x00007fc7a8671aec : mov edx , r11d 0.00 % │ │ │ ╰│ 0x00007fc7a8671aef : jmp 0x00007fc7a8671ad7 │ │ ↘ │ 0x00007fc7a8671af1 : mov r11 , QWORD PTR [ r15+0x108 ] ; ImmutableOopMap { r10=Oop r9=NarrowOop rdi=Oop } │ │ │ ; *goto { reexecute=1 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 39 ( line 33 ) │ │ │ 0x00007fc7a8671af8 : test DWORD PTR [ r11 ] , eax ; *goto { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 39 ( line 33 ) │ │ │ ; { poll } │ │ │ 0x00007fc7a8671afb : cmp r8d , ebx 0.00 % │ │ ╰ 0x00007fc7a8671afe : jl 0x00007fc7a8671ab9 │ ↘ 0x00007fc7a8671b00 : cmp r8d , ebp 0.00 % │ ╭ 0x00007fc7a8671b03 : jge 0x00007fc7a8671b1a │ │ 0x00007fc7a8671b05 : data16 xchg ax , ax ; *aload_3 { reexecute=0 rethrow=0 return_oop=0 } │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 18 ( line 34 ) │ │ ↗ 0x00007fc7a8671b08 : mov r11d , DWORD PTR [ r9+r8*4+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 21 ( line 34 ) 0.01 % │ │ │ 0x00007fc7a8671b0d : cmp r11d , edx │ │╭│ 0x00007fc7a8671b10 : jg 0x00007fc7a8671b38 │ │││↗ 0x00007fc7a8671b12 : inc r8d ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ ││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 36 ( line 33 ) │ ││││ 0x00007fc7a8671b15 : cmp r8d , ebp │ ││╰│ 0x00007fc7a8671b18 : jl 0x00007fc7a8671b08 ; *if_icmpge { reexecute=0 rethrow=0 return_oop=0 } │ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 15 ( line 33 ) │ ↘│ │ 0x00007fc7a8671b1a : test r10 , r10 0.00 % │ │ │ 0x00007fc7a8671b1d : je 0x00007fc7a8671b52 │ │ │ 0x00007fc7a8671b1f : mov rsi , r10 │ │ │ 0x00007fc7a8671b22 : nop │ │ │ 0x00007fc7a8671b23 : call 0x00007fc7a8671ba0 ; ImmutableOopMap { } │ │ │ ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if_else @ 44 ( line 41 ) │ │ │ ; { optimized virtual_call } │ │ │ 0x00007fc7a8671b28 : add rsp,0x20 0.01 % │ │ │ 0x00007fc7a8671b2c : pop rbp │ │ │ 0x00007fc7a8671b2d : mov r10 , QWORD PTR [ r15+0x108 ] │ │ │ 0x00007fc7a8671b34 : test DWORD PTR [ r10 ] , eax ; { poll_return } │ │ │ 0x00007fc7a8671b37 : ret │ ↘ │ 0x00007fc7a8671b38 : mov edx , r11d │ ╰ 0x00007fc7a8671b3b : jmp 0x00007fc7a8671b12 ↘ 0x00007fc7a8671b3d : mov esi,0xffffff7e 0x00007fc7a8671b42 : mov QWORD PTR [ rsp ] , r10 0x00007fc7a8671b46 : mov DWORD PTR [ rsp+0x8 ] , r9d 0x00007fc7a8671b4b : call 0x00007fc7a0ba3d00 ; ImmutableOopMap { [ 0 ] =Oop [ 8 ] =NarrowOop } ; *if_icmpge { reexecute=1 rethrow=0 return_oop=0 } c2 , level 4 , codes.dbg.FindMaxBenchmark : :findMax_if , version 480 ( 165 bytes ) 0x00007f34cc66e7eb : cmp r8d , ebp ╭ 0x00007f34cc66e7ee : jae 0x00007f34cc66e8c4 │ 0x00007f34cc66e7f4 : mov edx , DWORD PTR [ r9+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) │ 0x00007f34cc66e7f8 : cmp edx,0x80000000 │╭ 0x00007f34cc66e7fe : jg 0x00007f34cc66e805 ; *if_icmple { reexecute=0 rethrow=0 return_oop=0 } ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 23 ( line 19 ) ││ 0x00007f34cc66e800 : mov edx,0x80000000 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) │↘ 0x00007f34cc66e805 : mov ebx , ebp 0.01 % │ 0x00007f34cc66e807 : add ebx,0xfffffffd │ 0x00007f34cc66e80a : cmp r8d , ebx │ 0x00007f34cc66e80d : cmovl ebx , r11d │ 0x00007f34cc66e811 : mov r8d,0x1 │ 0x00007f34cc66e817 : cmp ebx,0x1 │ ╭ 0x00007f34cc66e81a : jle 0x00007f34cc66e880 │ │ 0x00007f34cc66e81c : mov rdi , r9 ; *goto { reexecute=0 rethrow=0 return_oop=0 } │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 34 ( line 18 ) │ │╭ 0x00007f34cc66e81f : jmp 0x00007f34cc66e839 │ ││ ↗ 0x00007f34cc66e821 : mov edx , ecx 0.00 % │ ││ │ 0x00007f34cc66e823 : nop DWORD PTR [ rax+0x0 ] │ ││ │ 0x00007f34cc66e82a : nop WORD PTR [ rax+rax*1+0x0 ] 0.89 % │ ││ │↗ 0x00007f34cc66e830 : add r8d,0x4 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ ││ ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) 12.36 % │ ││ ││ 0x00007f34cc66e834 : cmp r8d , ebx 0.11 % │ ││╭ ││ 0x00007f34cc66e837 : jge 0x00007f34cc66e871 ; *aload_3 { reexecute=0 rethrow=0 return_oop=0 } │ │││ ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 18 ( line 19 ) 9.94 % │ │↘│ ││ ↗ 0x00007f34cc66e839 : mov r11d , DWORD PTR [ r9+r8*4+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) 0.11 % │ │ │ ││ │ 0x00007f34cc66e83e : cmp r11d , edx 10.05 % │ │ │╭ ││ │ 0x00007f34cc66e841 : jg 0x00007f34cc66e862 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ ││ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) 0.13 % │ │ ││ ││↗ │ 0x00007f34cc66e843 : mov r11d , DWORD PTR [ r9+r8*4+0x14 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ ││ │││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) 9.84 % │ │ ││ │││ │ 0x00007f34cc66e848 : cmp r11d , edx 0.11 % │ │ ││╭ │││ │ 0x00007f34cc66e84b : jg 0x00007f34cc66e867 ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ │││ │││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) 10.02 % │ │ │││ │││↗ │ 0x00007f34cc66e84d : mov r11d , DWORD PTR [ r9+r8*4+0x18 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │││ ││││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) 0.33 % │ │ │││ ││││ │ 0x00007f34cc66e852 : cmp r11d , edx 23.63 % │ │ │││╭││││ │ 0x00007f34cc66e855 : jg 0x00007f34cc66e86c ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││││││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) 0.13 % │ │ ││││││││↗│ 0x00007f34cc66e857 : mov ecx , DWORD PTR [ r9+r8*4+0x1c ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││││││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) 9.89 % │ │ ││││││││││ 0x00007f34cc66e85c : cmp ecx , edx 0.11 % │ │ ││││╰│││││ 0x00007f34cc66e85e : jg 0x00007f34cc66e821 ; *if_icmple { reexecute=0 rethrow=0 return_oop=0 } │ │ ││││ │││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 23 ( line 19 ) 9.71 % │ │ ││││ ╰││││ 0x00007f34cc66e860 : jmp 0x00007f34cc66e830 │ │ │↘││ ││││ 0x00007f34cc66e862 : mov edx , r11d 0.00 % │ │ │ ││ ╰│││ 0x00007f34cc66e865 : jmp 0x00007f34cc66e843 │ │ │ ↘│ │││ 0x00007f34cc66e867 : mov edx , r11d 0.00 % │ │ │ │ ╰││ 0x00007f34cc66e86a : jmp 0x00007f34cc66e84d │ │ │ ↘ ││ 0x00007f34cc66e86c : mov edx , r11d 0.00 % │ │ │ ╰│ 0x00007f34cc66e86f : jmp 0x00007f34cc66e857 │ │ ↘ │ 0x00007f34cc66e871 : mov r11 , QWORD PTR [ r15+0x108 ] ; ImmutableOopMap { r10=Oop r9=NarrowOop rdi=Oop } │ │ │ ; *goto { reexecute=1 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 34 ( line 18 ) 0.00 % │ │ │ 0x00007f34cc66e878 : test DWORD PTR [ r11 ] , eax ; *goto { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 34 ( line 18 ) │ │ │ ; { poll } │ │ │ 0x00007f34cc66e87b : cmp r8d , ebx │ │ ╰ 0x00007f34cc66e87e : jl 0x00007f34cc66e839 │ ↘ 0x00007f34cc66e880 : cmp r8d , ebp 0.00 % │ ╭ 0x00007f34cc66e883 : jge 0x00007f34cc66e89a │ │ 0x00007f34cc66e885 : data16 xchg ax , ax ; *aload_3 { reexecute=0 rethrow=0 return_oop=0 } │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 18 ( line 19 ) 0.00 % │ │ ↗ 0x00007f34cc66e888 : mov r11d , DWORD PTR [ r9+r8*4+0x10 ] ; *iaload { reexecute=0 rethrow=0 return_oop=0 } │ │ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 21 ( line 19 ) 0.01 % │ │ │ 0x00007f34cc66e88d : cmp r11d , edx │ │╭│ 0x00007f34cc66e890 : jg 0x00007f34cc66e8b8 │ │││↗ 0x00007f34cc66e892 : inc r8d ; *iinc { reexecute=0 rethrow=0 return_oop=0 } │ ││││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 31 ( line 18 ) │ ││││ 0x00007f34cc66e895 : cmp r8d , ebp │ ││╰│ 0x00007f34cc66e898 : jl 0x00007f34cc66e888 ; *if_icmpge { reexecute=0 rethrow=0 return_oop=0 } │ ││ │ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 15 ( line 18 ) │ ↘│ │↗ 0x00007f34cc66e89a : test r10 , r10 0.00 % │ │ ││ 0x00007f34cc66e89d : je 0x00007f34cc66e8da │ │ ││ 0x00007f34cc66e89f : mov rsi , r10 │ │ ││ 0x00007f34cc66e8a2 : nop │ │ ││ 0x00007f34cc66e8a3 : call 0x00007f34cc66e920 ; ImmutableOopMap { } │ │ ││ ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } │ │ ││ ; - codes.dbg.FindMaxBenchmark : :findMax_if @ 39 ( line 24 ) │ │ ││ ; { optimized virtual_call } 0.00 % │ │ ││ 0x00007f34cc66e8a8 : add rsp,0x20 0.01 % │ │ ││ 0x00007f34cc66e8ac : pop rbp │ │ ││ 0x00007f34cc66e8ad : mov r10 , QWORD PTR [ r15+0x108 ] │ │ ││ 0x00007f34cc66e8b4 : test DWORD PTR [ r10 ] , eax ; { poll_return } │ │ ││ 0x00007f34cc66e8b7 : ret │ ↘ ││ 0x00007f34cc66e8b8 : mov edx , r11d │ ╰│ 0x00007f34cc66e8bb : jmp 0x00007f34cc66e892 │ │ 0x00007f34cc66e8bd : mov edx,0x80000000 │ ╰ 0x00007f34cc66e8c2 : jmp 0x00007f34cc66e89a ↘ 0x00007f34cc66e8c4 : mov esi,0xffffff7e 0x00007f34cc66e8c9 : mov QWORD PTR [ rsp ] , r10 0x00007f34cc66e8cd : mov DWORD PTR [ rsp+0x8 ] , r9d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ."
"GivenString = `` ( 1,2,3,4 , @ ) ( a , s,3,4,5 ) ( 22,324 , # $ % ) ( 123,3def , f34rf,4fe ) ( 32 ) '' String [ ] array = GivenString.split ( `` '' ) ; array [ 0 ] = `` 1,2,3,4 , @ '' array [ 1 ] = `` a , s,3,4,5 '' array [ 2 ] = `` 22,324 , # $ % '' array [ 3 ] = `` 123,3def , f34rf,4fe '' array [ 4 ] = `` 32 ''"
public class ClassB { public synchronized void fooB ( Classs A ) throws InterruptedException { System.out.print ( `` Thread : `` + Thread.currentThread ( ) .getName ( ) + `` entered to fooB \n '' ) ; Thread.sleep ( 1000 ) ; System.out.print ( `` ClassB locked the fooA \n '' ) ; A.lastA ( ) ; } public synchronized void lastB ( ) { System.out.print ( `` I am lastB \n '' ) ; } } public class ClassA { public synchronized void fooA ( ClassB B ) throws InterruptedException { System.out.print ( `` Thread : `` + Thread.currentThread ( ) .getName ( ) + `` entered to fooA \n '' ) ; Thread.sleep ( 1000 ) ; System.out.print ( `` ClassA locked the fooB \n '' ) ; B.lastB ( ) ; } public synchronized void lastA ( ) { System.out.print ( `` I am lastA \n '' ) ; } } public class DeadLockTest implements Runnable { ClassA ca=new ClassA ( ) ; ClassB cb=new ClassB ( ) ; public DeadLockTest ( ) throws InterruptedException { new Thread ( this ) .start ( ) ; ca.fooA ( cb ) ; } public void run ( ) { try { cb.fooB ( ca ) ; } catch ( InterruptedException ex ) { ... . } } }
"List1 : { [ a:2 ] , [ b:3 ] } List2 : { [ b:4 ] , [ c:5 ] } ResultList : { [ a:2 ] , [ b:7 ] , [ c:5 ] } public class User { private String name ; private int comments ; } public List < User > addTwoList ( List < User > first , List < User > sec ) { List < User > result = new ArrayList < > ( ) ; for ( int i=0 ; i < first.size ( ) ; i++ ) { Boolean bsin = false ; Boolean isin = false ; for ( int j=0 ; j < sec.size ( ) ; j++ ) { isin = false ; if ( first.get ( i ) .getName ( ) .equals ( sec.get ( j ) .getName ( ) ) ) { int value= first.get ( i ) .getComments ( ) + sec.get ( j ) .getComments ( ) ; result.add ( new User ( first.get ( i ) .getName ( ) , value ) ) ; isin = true ; bsin = true ; } if ( ! isin ) { result.add ( sec.get ( j ) ) ; } } if ( ! bsin ) { result.add ( first.get ( i ) ) ; } } return result ; }"
public class Outer { public static final Object Inner = new Object ( ) ; public static class Inner { public static final Object Help = new Object ( ) ; } public static void main ( String [ ] args ) { System.out.println ( Outer.Inner.Help ) ; // ^^^^ Can not access Help } }
public abstract class Mother { public class Embryo { public void ecluse ( ) { bear ( this ) ; } } abstract void bear ( Embryo e ) ; } new Mother ( ) { ... } .new Embryo ( ) .ecluse ( ) ;
int i = 1_234_567_890 ; float f = i ; System.out.println ( i - ( int ) f ) ; //print -46System.out.println ( i - f ) ; //print 0.0
"public class Test { public static void main ( String args [ ] ) { Integer num = new Integer ( 3 ) ; Object obj = num ; Integer [ ] integerArr = { 1 , 2 , 3 , 4 } ; Object [ ] objArr = integerArr ; boolean contains = false ; for ( int i = 0 ; i < objArr.length ; i++ ) { if ( objArr [ i ] == obj ) { contains = true ; break ; } } System.out.println ( contains ) ; int num2 = 3 ; Object obj2 = num2 ; Integer [ ] integerArr2 = { 1 , 2 , 3 , 4 } ; Object [ ] objArr2 = integerArr2 ; boolean contains2 = false ; for ( int i = 0 ; i < objArr2.length ; i++ ) { if ( objArr2 [ i ] == obj2 ) { contains2 = true ; break ; } } System.out.println ( contains2 ) ; } }"
"ScriptEngine engine = new NashornScriptEngineFactory ( ) .getScriptEngine ( new String [ ] { `` -strict '' } ) ; try { engine.eval ( `` function Foo ( src ) { this.src = src } ; var e = { x : new Foo ( \ '' what\ '' ) } ; '' ) ; ScriptContext c = new SimpleScriptContext ( ) ; c.setBindings ( engine.createBindings ( ) , ScriptContext.ENGINE_SCOPE ) ; c.getBindings ( ScriptContext.ENGINE_SCOPE ) .putAll ( engine.getBindings ( ScriptContext.ENGINE_SCOPE ) ) ; System.out.println ( engine.eval ( `` var z = e.x ; z === e.x ; '' , c ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } System.out.println ( engine.eval ( `` e.x === e.x ; '' , c ) ) ;"
"List < Product > productsList = new ArrayList < Product > ( ) ; productsList.add ( new Product ( 1 , '' HP Laptop '' ,25000f ) ) ; productsList.add ( new Product ( 2 , '' Dell Laptop '' ,30000f ) ) ; productsList.add ( new Product ( 3 , '' Lenevo Laptop '' ,28000f ) ) ; productsList.add ( new Product ( 4 , '' Sony Laptop '' ,28000f ) ) ; productsList.add ( new Product ( 5 , '' Apple Laptop '' ,90000f ) ) ; Float totalPrice = productsList.stream ( ) .map ( product- > product.price ) .reduce ( 0.0f , ( sum , price ) - > sum+price ) ; System.out.println ( totalPrice ) ;"
"import com.google.api.core.ApiFuture ; import com.google.auth.oauth2.GoogleCredentials ; import com.google.cloud.firestore . * ; import com.google.firebase.FirebaseApp ; import com.google.firebase.FirebaseOptions ; requires com.google.api.apicommon ; requires com.google.auth.oauth2 ; requires firebase.admin ; requires google.cloud.firestore ; [ ERROR ] Failed to execute goal org.openjfx : javafx-maven-plugin:0.0.3 : run ( default-cli ) on project RathnapuraLabs : Error : Unable to execute mojo : Compilation failure : [ ERROR ] /C : /Users/Eshaka/IdeaProjects/RathnapuraLabs/src/main/java/back_end/TestManager.java : [ 14,35 ] can not access com.google.cloud.Service [ ERROR ] class file for com.google.cloud.Service not found [ ERROR ] /C : /Users/Eshaka/IdeaProjects/RathnapuraLabs/src/main/java/back_end/DBHandler.java : [ 69,33 ] can not access com.google.auth.Credentials [ ERROR ] class file for com.google.auth.Credentials not found [ ERROR ] /C : /Users/Eshaka/IdeaProjects/RathnapuraLabs/src/main/java/back_end/DBHandler.java : [ 100,85 ] can not access com.google.cloud.Timestamp [ ERROR ] class file for com.google.cloud.Timestamp not found"
public class SomeType < T > { public < E > void test ( Collection < E > collection ) { System.out.println ( `` 1st method '' ) ; for ( E e : collection ) { System.out.println ( e ) ; } } public void test ( List < Integer > integerList ) { System.out.println ( `` 2nd method '' ) ; for ( Integer integer : integerList ) { System.out.println ( integer ) ; } } } SomeType someType = new SomeType ( ) ; List < String > list = Arrays.asList ( `` value '' ) ; someType.test ( list ) ; SomeType < ? > someType = new SomeType < > ( ) ; List < String > list = Arrays.asList ( `` value '' ) ; someType.test ( list ) ;
"List < PropertyOwnerCommunityAddress > propertyOwnerCommunityAddresses = getPropertyOwnerAsList ( ) ; Map < Community , List < Address > > hashMap = new LinkedHashMap < > ( ) ; for ( PropertyOwnerCommunityAddress poco : propertyOwnerCommunityAddresses ) { if ( ! hashMap.containsKey ( poco.getCommunity ( ) ) ) { List < Address > list = new ArrayList < > ( ) ; list.add ( poco.getAddress ( ) ) ; hashMap.put ( poco.getCommunity ( ) , list ) ; } else { hashMap.get ( poco.getCommunity ( ) ) .add ( poco.getAddress ( ) ) ; } }"
public class PID { private static double Kp = 0.1 ; private static double Kd = 0.01 ; private static double Ki = 0.005 ; private static double targetValue = 100.0 ; private static double currentValue = 1.0 ; private static double integral = 0.0 ; private static double previousError = 0.0 ; private static double dt = 0.5 ; private static double max = 5 ; private static double min = -5 ; public static void main ( String [ ] args ) throws Exception { while ( true ) { Thread.sleep ( ( long ) ( 1000.0 * dt ) ) ; double error = targetValue - currentValue ; double derivative = 0.0 ; double output = 0.0 ; integral = integral + error * dt ; derivative = ( error - previousError ) / dt ; output = Kp * error + Ki * integral + Kd * derivative ; previousError = error ; if ( output > max ) output = max ; if ( output < min ) output = min ; // Apply the output to the current value : System.out.println ( currentValue + `` + `` + output + `` = `` + ( currentValue + output ) ) ; currentValue += output ; } } }
"class Thing { private MyException lastException = ... ; synchronized void doSomethingOrReportProblem ( ) { try { doSomething ( ) ; } catch ( MyException e ) { if ( seemsLikeADifferentProblem ( e , lastException ) ) { reportProblem ( e ) ; } lastException = e ; } } }"
class poly1 { int a ; public poly1 ( ) { a = 3 ; } public void print_a ( ) { System.out.print ( a ) ; } } public class poly2 extends poly1 { public poly2 ( ) { a = 4 ; } public void print_a ( ) { System.out.print ( a ) ; } public static void main ( String [ ] args ) { poly2 p = new poly2 ( ) ; p.print_a ( ) ; poly1 q = new poly2 ( ) ; q.print_a ( ) ; } }
"Transaction temp ; String message = `` '' ; for ( int i = 0 ; i < checkAccnt.gettransCount ( ) ; i++ ) { temp = checkAccnt.getTrans ( i ) ; message += String.format ( `` % -10d '' , temp.getTransNumber ( ) ) ; message += String.format ( `` % -10d '' , temp.getTransId ( ) ) ; message += String.format ( `` % 10.2f '' , temp.getTransAmount ( ) ) + '\n ' ; } JOptionPane.showMessageDialog ( null , message ) ;"
private static Pattern separatorPattern ( ) { Pattern sp = separatorPattern ; if ( sp == null ) separatorPattern = sp = Pattern.compile ( LINE_SEPARATOR_PATTERN ) ; return sp ; } private static Pattern linePattern ( ) { Pattern lp = linePattern ; if ( lp == null ) linePattern = lp = Pattern.compile ( LINE_PATTERN ) ; return lp ; } private static Pattern linePattern ( ) { if ( linePattern == null ) linePattern = Pattern.compile ( LINE_PATTERN ) ; return linePattern ; }
int VER_EQUAL = 1 ; int VER_GREATER = 2 ; int VER_GREATER_EQUAL = 3 ; ... etc ... byte VER_EQUAL = 1 ; byte VER_GREATER = 2 ; byte VER_GREATER_EQUAL = 3 ; ... etc ...
class A { void baz ( ) { int i = 0 ; class Bar { int j = i ; } } public static void main ( String [ ] args ) { } }
"|json | name| age |======================================== | `` { ' a ' : 'john ' , ' b ' : 23 } '' | null| null | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | `` { ' a ' : 'joe ' , ' b ' : 25 } '' | null| null | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | `` { ' a ' : 'zack ' } '' | null| null | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |json | name | age |======================================== | `` { ' a ' : 'john ' , ' b ' : 23 } '' | 'john'| 23 | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | `` { ' a ' : 'joe ' , ' b ' : 25 } '' | 'joe ' | 25 | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | `` { ' a ' : 'zack ' } '' | 'zack'|null| -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --"
"class IntArrayWrapper { private int [ ] data = new int [ 100000 ] ; public void setInteger ( int i , Integer x ) { data [ i ] = x ; } public void setInt ( int i , int x ) { data [ i ] = x ; } } @ Benchmarkpublic void bmarkSetIntConst ( ) { final IntArrayWrapper w = new IntArrayWrapper ( ) ; for ( int i = 0 ; i < 100000 ; i++ ) { w.setInt ( i , 100 ) ; } } @ Benchmarkpublic void bmarkSetIntStair ( ) { final IntArrayWrapper w = new IntArrayWrapper ( ) ; for ( int i = 0 ; i < 100000 ; i++ ) { w.setInt ( i , i ) ; } } // omitted : bmarkSetIntegerConst and bmarkSetIntStair that use .setInteger ( .. ) Benchmark Mode Cnt Score Error UnitsMyBenchmark.bmarkSetIntConst thrpt 20 15717.814 ± 362.137 ops/sMyBenchmark.bmarkSetIntegerConst thrpt 20 15814.296 ± 657.945 ops/sMyBenchmark.bmarkSetIntStair thrpt 20 11941.879 ± 200.335 ops/sMyBenchmark.bmarkSetIntegerStair thrpt 20 2981.398 ± 48.806 ops/sMyBenchmark.bmarkSetIntSawtooth thrpt 20 11072.882 ± 234.686 ops/sMyBenchmark.bmarkSetIntegerSawtooth thrpt 20 11105.272 ± 156.496 ops/s"
JVM64\bin\java -- add-modules java.xml.bind -cp lib ; lang -Xms150m -Xmx400m -jar lib/SongKong-5.7.jar % 1 % 2 % 3 % 4 % 5 % 6 % 7 % 8 % 9 vmarg.1= -- add-modules java.xml.bind vmarg.1= -- add-modulesvmarg.2=java.xml.bind
"Stream < CompletableFuture < BigDecimal > > lotOfWork ; CompletableFuture.supplyAsync ( ( ) - > lotOfWork.map ( CompletableFuture : :join ) .reduce ( BigDecimal.valueOf ( 0.0 ) , BigDecimal : :add ) ) ;"
"Pattern p = Pattern.compile ( `` ( < /machine > ) '' ) ; Matcher m = p.matcher ( text ) ; while ( m.find ( ) ) //if the text `` ( < /machine > ) '' was found , enter { Counter++ ; } return Counter ; Pattern tagsP = Pattern.compile ( `` ( < / '' ) ; Matcher tagsM = tagsP.matcher ( text ) ; while ( tagsM.find ( ) ) //if the text `` ( < / '' was found , enter { CounterTags++ ; } return CounterTags ;"
"public final class ImmutableWrapper < T extends Number > { private final T value ; public ImmutableWrapper ( T value ) { // a subclass of Number may be mutable // so , how to defensively copying the value ? this.value = value ; } public T getValue ( ) { // the same here : how to return a copy ? return value ; } }"
new ArrayList < String > ( ) { { add ( `` A '' ) ; } } ;
"import java.util . * ; class Scanner1 { public static void main ( String [ ] args ) { String name ; Scanner scanner = new Scanner ( System.in ) ; scanner.useDelimiter ( System.getProperty ( `` line.separator '' ) ) ; System.out.print ( `` Enter full name ( first , middle , last ) '' ) ; name = scanner.next ( ) ; System.out.println ( `` you entered `` + name + `` . `` ) ; } }"
public class Foo { private final boolean flag ; public Foo ( boolean flagValue ) { this.flag = flagValue ; } public void f ( ) { if ( flag ) { doSomething ( ) ; } else { doSomethingElse ( ) ; } } }
"public interface Stream < T > extends BaseStream < T , Stream < T > > { Stream < T > filter ( Predicate < ? super T > var1 ) ; Collection < String > result = Stream.of ( `` A '' , `` B '' , `` C '' ) .filter ( new Object ( ) : :equals ) .filter ( Integer.valueOf ( -1 ) : :equals ) .collect ( Collectors.toSet ( ) ) ; Predicate < ? super String > stringPredicate = ( Predicate < ? super String > ) Filters.is_tClass ( Integer.class , 4 ) ; Predicate < ? super Server > serverPredicate = ( Predicate < ? super Server > ) Filters.is_comparable ( 5 ) ; Collection < Integer > result = Stream.of ( 1 , 2 , 3 ) .filter ( ( Predicate < ? super Integer > ) stringPredicate ) .filter ( ( Predicate < ? super Integer > ) serverPredicate ) .filter ( Filters.is ( new Object ( ) ) ) .collect ( Collectors.toSet ( ) ) ; import java.util.Collection ; import java.util.function.Predicate ; import java.util.stream.Collectors ; import java.util.stream.Stream ; public class Main { public static void main ( String [ ] args ) { Collection < Integer > result = Stream.of ( 1 , 2 , 3 ) //.filter ( Filters.is_tClass ( Integer.class , 4 ) ) // enforce user to provide target class //.filter ( Filters.is_comparable ( 5 ) ) // use only Comparable .filter ( Filters.is ( new Server ( ) ) ) // fail runtime with custom exception .collect ( Collectors.toSet ( ) ) ; System.out.println ( result ) ; } private static class Server { } private static class Filters { private static < T > Predicate < ? super T > is ( T other ) { return t - > { // simple class equality check - error prone ! Class < ? > tClass = t.getClass ( ) ; Class < ? > otherClass = other.getClass ( ) ; if ( ! tClass.equals ( otherClass ) ) { throw new RuntimeException ( String.format ( `` Check equality for [ % s ? % s ] seems odd . Can not continue ... '' , tClass , otherClass ) ) ; } return t.equals ( other ) ; } ; } static < T > Predicate < ? super T > is_tClass ( Class < T > tClass , T other ) { return is ( other ) ; } static < T extends Comparable < T > > Predicate < ? super T > is_comparable ( T other ) { return is ( other ) ; } } } Predicate < ? super String > stringPredicate = ( Predicate < ? super String > ) Filters.is_tClass ( Integer.class , 4 ) ; Predicate < ? super Server > serverPredicate = ( Predicate < ? super Server > ) Filters.is_comparable ( 5 ) ; Collection < Integer > result = Stream.of ( 1 , 2 , 3 ) .filter ( ( Predicate < ? super Integer > ) stringPredicate ) .filter ( ( Predicate < ? super Integer > ) serverPredicate ) .filter ( Filters.is ( new Object ( ) ) ) .collect ( Collectors.toSet ( ) ) ;"
at com.some.Foo.method ( Foo.java:312 ) at com.some.Foo.method ( com.some.Foo:312 ) ^^^^^^^^^^^^ SourceFile : `` Foo.java '' SourceFile : `` com.some.Foo ''
"MyDialog dlg = new MyDialog ( parent , isFizz ) ; MyDialogResults results = dlg.getResults ( ) ; eventBus.fireEvent ( new MyDialogEvent ( results ) ) ; public class MyDialog extends JDialog { private boolean isFizz ; private MyDialogResults results ; // Getters and setters for all properties ... public MyDialog ( Frame parent , boolean isFizz ) { super ( parent , `` My Dialog '' , true ) ; setIsFizz ( isFizz ) ; setVisible ( true ) ; dispose ( ) ; } }"
"public static class Item { long id ; List < String > belongsToCategories ; public List < String > getBelongsToCategories ( ) { return belongsToCategories ; } public void setBelongsToCategories ( List < String > belongsToCategories ) { this.belongsToCategories = belongsToCategories ; } public Item ( long id , List < String > belongsToCategories ) { this.id = id ; this.belongsToCategories = belongsToCategories ; } @ Override public String toString ( ) { return `` Item { `` + `` id= '' + id + ' } ' ; } } public static void main ( String [ ] args ) { List < Item > myItemList = new ArrayList < > ( ) ; myItemList.add ( new Item ( 1 , Arrays.asList ( `` A '' , '' B '' ) ) ) ; myItemList.add ( new Item ( 2 , Arrays.asList ( `` A '' , '' C '' ) ) ) ; myItemList.add ( new Item ( 3 , Arrays.asList ( `` B '' , '' C '' ) ) ) ; myItemList.add ( new Item ( 4 , Arrays.asList ( `` D '' ) ) ) ; myItemList.add ( new Item ( 5 , Arrays.asList ( `` D '' , '' E '' ) ) ) ; myItemList.add ( new Item ( 6 , Arrays.asList ( `` A '' , '' F '' ) ) ) ; Map < String , List < Item > > myMap= new HashMap < > ( ) ; myItemList.stream ( ) .collect ( Collectors.groupingBy ( classifier ) ) ; myItemList.stream ( ) .collect ( Collectors.groupingBy ( Item : :getBelongsToCategories ) ) ; [ D , E ] = [ Item { id=5 } ] [ B , C ] = [ Item { id=3 } ] [ A , B ] = [ Item { id=1 } ] [ D ] = [ Item { id=4 } ] [ A , C ] = [ Item { id=2 } ] [ A , F ] = [ Item { id=6 } ] A= [ Item { id=1 } , Item { id=2 } , Item { id=6 } ] B= [ Item { id=1 } , Item { id=3 } ] C= [ Item { id=2 } , Item { id=3 } ] D= [ Item { id=4 } , Item { id=5 } ] E= [ Item { id=5 } ] F= [ Item { id=6 } ]"
public void generaProductos ( ) { int num ; for ( int i=0 ; i < 3 ; i++ ) { num = ( int ) Math.random ( ) * 3 ; String cliente = tipoProducto [ num ] + `` `` + deporte [ num ] + `` `` + destinatario [ num ] + `` `` + color [ num ] + `` `` + tallaRopaAdulto [ num ] + `` `` + preciosIVA [ num ] ; System.out.println ( cliente ) ; } return ; } switch ( opt ) { case 1 : generaProductos alm = new generaProductos ( ) ; alm.generaProductos ( ) ;
"public static final Comparator < String > CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator ( ) ; private static class CaseInsensitiveComparator implements Comparator < String > , java.io.Serializable { // use serialVersionUID from JDK 1.2.2 for interoperability private static final long serialVersionUID = 8575799808933029326L ; public int compare ( String s1 , String s2 ) { int n1 = s1.length ( ) ; int n2 = s2.length ( ) ; int min = Math.min ( n1 , n2 ) ; for ( int i = 0 ; i < min ; i++ ) { char c1 = s1.charAt ( i ) ; char c2 = s2.charAt ( i ) ; if ( c1 ! = c2 ) { c1 = Character.toUpperCase ( c1 ) ; c2 = Character.toUpperCase ( c2 ) ; if ( c1 ! = c2 ) { c1 = Character.toLowerCase ( c1 ) ; c2 = Character.toLowerCase ( c2 ) ; if ( c1 ! = c2 ) { // No overflow because of numeric promotion return c1 - c2 ; } } } } return n1 - n2 ; } }"
public class Test { private static final ConcurrentLinkedQueue < A > myAs = new ConcurrentLinkedQueue < > ( ) ; private static long timer = System.nanoTime ( ) + 3000000000L ; // 3 seconds into the future public static void main ( String ... args ) { B myB = new B ( `` thread # 1 '' ) ; // Set in thread 1 new Thread ( ( ) - > { myB.setString ( `` thread # 2 '' ) ; // Set in thread 2 myAs.add ( new A ( myB ) ) ; } ) .start ( ) ; for ( long i = 0 ; i < x ; i = System.nanoTime ( ) ) { } // Busy-wait for about 3 seconds System.out.println ( myAs.poll ( ) .getB ( ) .getString ( ) ) ; // Print out value } public static class A { private final B b ; public A ( B b ) { this.b = b ; } public B getB ( ) { return b ; } } public static class B { private String s = null ; public B ( String s ) { this.s = s ; } public String getString ( ) { return s ; } public void setString ( String s ) { this.s = s ; } } }
"import java.util.List ; public class MainClass { public void traverse ( ) { List < MyEntity > list = null /* ... */ ; for ( MyEntity myEntity : list ) { for ( String label : myEntity.getLabels ( ) ) { // < -- Offending Line /* ... */ } } } interface MyEntity < T > { T get ( ) ; List < String > getLabels ( ) ; } } Error : ( 9 , 51 ) java : incompatible types : java.lang.Object can not be converted to java.lang.String Iterator < String > iterator = myEntity.getLabels ( ) .iterator ( ) ; while ( iterator.hasNext ( ) ) { String label = iterator.next ( ) ; /* ... */ }"
class Test { static class Foo < T > { T t ; Foo ( T t ) { this.t = t ; } T get ( ) { return t ; } } static class Bar extends Foo < Long > { Bar ( Long t ) { super ( t ) ; } } static class Foobar < N extends Number > extends Bar { Foobar ( ) { super ( 5L ) ; } } public static void main ( String [ ] args ) { Bar bar = new Bar ( 0L ) ; Long b = bar.get ( ) ; // This works Foobar foobar = new Foobar ( ) ; Long fb = foobar.get ( ) ; // This generates a compile time error } } Test.java:26 : error : incompatible types : Object can not be converted to Long Long fb = foobar.get ( ) ; // This generates a compile time error
n.stream ( ) .sorted ( Comparator.comparingLong ( someObject : :timestamp ) ) .collect ( Collectors.toList ( ) ) ;
"HashMap < Man , Double > d = new HashMap < > ( ) ; d.put ( new Man ( `` John '' ) , 5 . ) ; Man man = new Man ( `` John '' ) ; System.out.println ( d.get ( man ) ) ;"
"public class ParametricEQView extends JPanel implements PluginView { private static final int BAND_WIDTH = 3 ; private static final int THROW_HEIGHT = 64 ; private static final int WIDTH = 128*BAND_WIDTH + 2*MARGIN ; private static final int HEIGHT = 2*THROW_HEIGHT + 2*MARGIN ; private static final int MID_HEIGHT = THROW_HEIGHT + MARGIN ; private final ParametricEQ _peq ; public ParametricEQView ( ParametricEQ peq ) { super ( ) ; _peq = peq ; SwingUtils.freezeSize ( this , WIDTH , HEIGHT ) ; setToolTipText ( `` Parametric Equalizer '' ) ; } @ Override public void paint ( Graphics g ) { final Graphics2D g2d = ( Graphics2D ) g ; final int max = findMax ( ) ; g.setColor ( BACKGROUND ) ; g.fillRect ( 0 , 0 , WIDTH , HEIGHT ) ; g.setColor ( DATA ) ; final double scalingFactor = - ( ( double ) THROW_HEIGHT ) / max ; final double [ ] fineLevels = _peq.getFineLevels ( ) ; int x = MARGIN ; int h ; final int [ ] xPoints = new int [ 128 ] ; final int [ ] yPoints = new int [ 128 ] ; for ( int i = 0 ; i < 128 ; ++i ) { h = ( int ) ( fineLevels [ i ] * scalingFactor ) ; xPoints [ i ] = x ; yPoints [ i ] = MID_HEIGHT + h ; x += BAND_WIDTH ; } g.drawPolyline ( xPoints , yPoints , 128 ) ; g.setColor ( AXES ) ; g.drawLine ( MARGIN , MARGIN , MARGIN , HEIGHT-MARGIN ) ; g.drawLine ( MARGIN , MID_HEIGHT , WIDTH-MARGIN , MID_HEIGHT ) ; g.setFont ( AXIS_FONT ) ; final FontMetrics metrics = g.getFontMetrics ( ) ; int width = ( int ) metrics.getStringBounds ( AXIS_LABEL_INPUT_MIDINUM , g ) .getWidth ( ) ; g.drawString ( AXIS_LABEL_INPUT_MIDINUM , WIDTH-MARGIN-width , HEIGHT-3 ) ; final AffineTransform atx = new AffineTransform ( ) ; atx.setToRotation ( -Math.PI/2 , 0 , HEIGHT ) ; g2d.setTransform ( atx ) ; final String topLabel = `` + '' + max ; width = ( int ) metrics.getStringBounds ( topLabel , g ) .getWidth ( ) ; g2d.drawString ( topLabel , HEIGHT-MARGIN-width , HEIGHT+10 ) ; width = ( int ) metrics.getStringBounds ( AXIS_LABEL_OUTPUT_VELOCITY , g ) .getWidth ( ) ; g2d.drawString ( AXIS_LABEL_OUTPUT_VELOCITY , MID_HEIGHT- ( width/2 ) , HEIGHT+10 ) ; g2d.drawString ( `` - '' + max , MARGIN , HEIGHT+10 ) ; } private int findMax ( ) { int max = 3 ; for ( int i = 0 ; i < 128 ; ++i ) max = Math.max ( max , ( int ) Math.ceil ( Math.abs ( _peq.getFineLevels ( ) [ i ] ) ) ) ; return max ; } }"
if ( q.trim ( ) ! = null || q.trim ( ) ! = `` '' ) { questionView.setText ( q ) ; r1.setChecked ( false ) ; r2.setChecked ( false ) ; r3.setChecked ( false ) ; r1.clearFocus ( ) ; r2.clearFocus ( ) ; r3.clearFocus ( ) ; r1.setText ( varNames.get ( `` ra0 '' ) ) ; r2.setText ( varNames.get ( `` ra1 '' ) ) ; r3.setText ( varNames.get ( `` ra2 '' ) ) ; } public void questionClicked ( View view ) { boolean checked = ( ( RadioButton ) view ) .isChecked ( ) ; switch ( view.getId ( ) ) { case R.id.firstQuestion : if ( ! checked ) { r1.setChecked ( true ) ; } getAnswer ( R.id.firstQuestion ) ; break ; case R.id.secondQuestion : if ( ! checked ) { r2.setChecked ( true ) ; } getAnswer ( R.id.secondQuestion ) ; break ; case R.id.thirdQuestion : if ( ! checked ) { r3.setChecked ( true ) ; } getAnswer ( R.id.thirdQuestion ) ; break ; } }
/** * *//** * @ author John Doe * */package name.of.pkg ;
class SuperTest { SuperTest ( ) { whoAmI ( ) ; } void whoAmI ( ) { System.out.println ( getClass ( ) .getName ( ) ) ; } } class Test extends SuperTest { Test ( ) { whoAmI ( ) ; } }
public class Stack { public int size ; public Stack ( int size ) { this.size = size ; } public int [ ] arr = new int [ size ] ; public int top = -1 ; // Methods public void push ( int value ) { top++ ; arr [ top ] = value ; } } new Stack ( 10 ) .push ( 123 ) ;
"import java.util . * ; import java.util.stream.LongStream ; import java.util.stream.Stream ; import java.util.stream.StreamSupport ; public class BreakStreams { // @ see https : //stackoverflow.com/questions/47842871/buffer-operator-on-java-8-streams /** * Batch a stream into chunks */ public static < T > Stream < List < T > > buffer ( Stream < T > stream , final long count ) { final Iterator < T > streamIterator = stream.iterator ( ) ; return StreamSupport.stream ( Spliterators.spliteratorUnknownSize ( new Iterator < List < T > > ( ) { @ Override public boolean hasNext ( ) { return streamIterator.hasNext ( ) ; } @ Override public List < T > next ( ) { List < T > intermediate = new ArrayList < > ( ) ; for ( long v = 0 ; v < count & & hasNext ( ) ; v++ ) { intermediate.add ( streamIterator.next ( ) ) ; } return intermediate ; } } , 0 ) , false ) ; } public static void main ( String [ ] args ) { //create streams from huge datasets Stream < Long > streams = Stream.of ( LongStream.range ( 0 , Integer.MAX_VALUE ) .boxed ( ) , LongStream.range ( 0 , Integer.MAX_VALUE ) .boxed ( ) ) //collapse into one stream .flatMap ( x - > x ) ; //iterating over the stream one item at a time is OK..// streams.forEach ( x - > { //buffering the stream is NOT ok , you will go OOM buffer ( streams , 25 ) .forEach ( x - > { try { Thread.sleep ( 2500 ) ; } catch ( InterruptedException ignore ) { } System.out.println ( x ) ; } ) ; } }"
public class Main { public static void main ( String [ ] args ) { System.out.println ( X.Y.Z ) ; } } class X { static class Y { static String Z = `` Result 1 '' ; } static C Y = new C ( ) ; } class C { String Z = `` Result 2 '' ; }
N = in.read ( ) ; List < List < Integer > > L ; L = new LinkedList < > ( ) ; for ( i = 0 ; i < N ; i++ ) L.add ( new LinkedList < > ( ) ) ; A.java:25 : error : can not infer type arguments for LinkedList L = new LinkedList < > ( ) ; ^ reason : can not use ' < > ' with non-generic class LinkedListA.java:26 : error : can not infer type arguments for LinkedList for ( i = 0 ; i < N ; i++ ) L.add ( new LinkedList < > ( ) ) ; ^ reason : can not use ' < > ' with non-generic class LinkedList import java.util . * ; class Dummy { public static void main ( String [ ] args ) { List < List < Integer > > L ; L = new LinkedList < > ( ) ; for ( int i = 0 ; i < 10 ; i++ ) L.add ( new LinkedList < > ( ) ) ; } } A.java:7 : error : can not infer type arguments for LinkedList L = new LinkedList < > ( ) ; ^ reason : can not use ' < > ' with non-generic class LinkedListA.java:8 : error : can not infer type arguments for LinkedList for ( int i = 0 ; i < 10 ; i++ ) L.add ( new LinkedList < > ( ) ) ; ^ reason : can not use ' < > ' with non-generic class LinkedList
"public class Test { public static void main ( String [ ] args ) { String [ ] arr = new String [ 0 ] ; MethodA ( arr ) ; } public static < E > void MethodA ( E [ ] array ) { Integer [ ] intArray = new Integer [ 0 ] ; MethodB ( array , intArray ) ; } public static < E > void MethodB ( E [ ] array , E [ ] secondArray ) { //Stuff } } public class Test { public static void main ( String [ ] args ) { String [ ] arr = new String [ 0 ] ; MethodA ( arr ) ; } public static < E > void MethodA ( E [ ] array ) { Integer [ ] intArray = new Integer [ 0 ] ; List < E > someList = new ArrayList < E > ( ) ; MethodB ( array , intArray , someList ) ; } public static < E > void MethodB ( E [ ] array , E [ ] secondArray , List < E > list ) { //Stuff } }"
"Map < E , R > map = new HashMap < E , R > ( ) ; public List < D > method ( String countryname ) { return map.values ( ) .stream ( ) .filter ( ( x ) - > { return x.getSet ( ) .stream ( ) .anyMatch ( ( t ) - > { return t.getCountry ( ) .equals ( countryname ) ; } ) ; } ) .map ( R : :getSet ) .flatMap ( List : :stream ) .collect ( Collectors.toList ( ) ) ; //does not compile } // the R classclass R { private Set < D > set = new TreeSet < D > ( ) ; //getters & setters & other attributes }"
Object object = myQueue.consume ( ) ; if ( object instanceof MessageA ) { processMessageA ( ( MessageA ) object ) } else if ( object instanceof MessageB ) { processMessageB ( ( MessageB ) object ) } ...
"select user_id from users where users.user_name = ' '' +username+ '' ' and ` users.user_role = ( select user_roles.role_id FROM user_roles where ` user_roles.role_name = ' '' +role+ '' ' ) '' Statement st = null ; ResultSet rs = null ; Integer userMovedTo = new Integer ( 0 ) ; Integer userMovedBy = new Integer ( 0 ) ; try { st = conn.createStatement ( ) ; rs = st.executeQuery ( query ) ; userMovedTo = rs.getInt ( `` USER_ID '' ) ; CREATE TABLE Users ( user_ID INT NOT NULL , user_name VARCHAR ( 20 ) NOT NULL , user_password VARCHAR ( 20 ) NOT NULL , user_role INT NOT NULL , PRIMARY KEY ( user_ID ) ) ; CREATE SEQUENCE seq_usersMINVALUE 1START WITH 1INCREMENT BY 1CACHE 10 ; java.sql.SQLException : ResultSet.next was not called at oracle.jdbc.driver.DatabaseError.throwSqlException ( DatabaseError.java:112 ) at oracle.jdbc.driver.DatabaseError.throwSqlException ( DatabaseError.java:146 ) at oracle.jdbc.driver.DatabaseError.throwSqlException ( DatabaseError.java:208 ) at oracle.jdbc.driver.OracleResultSetImpl.getInt ( OracleResultSetImpl.java:511 ) at oracle.jdbc.driver.OracleResultSet.getInt ( OracleResultSet.java:1563 ) at com.kpk.daoImpl.FileDataDao.insertFileMovement ( FileDataDao.java:64 ) at com.mvc.spring.FileMovementController.markFile ( FileMovementController.java:57 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( Unknown Source ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( Unknown Source ) at java.lang.reflect.Method.invoke ( Unknown Source ) at org.springframework.web.method.support.InvocableHandlerMethod.invoke ( InvocableHandlerMethod.java:213 ) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest ( InvocableHandlerMethod.java:126 ) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle ( ServletInvocableHandlerMethod.java:96 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod ( RequestMappingHandlerAdapter.java:617 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal ( RequestMappingHandlerAdapter.java:578 ) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle ( AbstractHandlerMethodAdapter.java:80 ) at org.springframework.web.servlet.DispatcherServlet.doDispatch ( DispatcherServlet.java:923 ) at org.springframework.web.servlet.DispatcherServlet.doService ( DispatcherServlet.java:852 ) at org.springframework.web.servlet.FrameworkServlet.processRequest ( FrameworkServlet.java:882 ) at org.springframework.web.servlet.FrameworkServlet.doPost ( FrameworkServlet.java:789 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:648 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:729 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:291 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:206 ) at org.apache.tomcat.websocket.server.WsFilter.doFilter ( WsFilter.java:52 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:239 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:206 ) at org.apache.catalina.core.StandardWrapperValve.invoke ( StandardWrapperValve.java:219 ) at org.apache.catalina.core.StandardContextValve.invoke ( StandardContextValve.java:106 ) at org.apache.catalina.authenticator.AuthenticatorBase.invoke ( AuthenticatorBase.java:502 ) at org.apache.catalina.core.StandardHostValve.invoke ( StandardHostValve.java:142 ) at org.apache.catalina.valves.ErrorReportValve.invoke ( ErrorReportValve.java:79 ) at org.apache.catalina.valves.AbstractAccessLogValve.invoke ( AbstractAccessLogValve.java:617 ) at org.apache.catalina.core.StandardEngineValve.invoke ( StandardEngineValve.java:88 ) at org.apache.catalina.connector.CoyoteAdapter.service ( CoyoteAdapter.java:518 ) at org.apache.coyote.http11.AbstractHttp11Processor.process ( AbstractHttp11Processor.java:1091 ) at org.apache.coyote.AbstractProtocol $ AbstractConnectionHandler.process ( AbstractProtocol.java:668 ) at org.apache.tomcat.util.net.NioEndpoint $ SocketProcessor.doRun ( NioEndpoint.java:1527 ) at org.apache.tomcat.util.net.NioEndpoint $ SocketProcessor.run ( NioEndpoint.java:1484 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( Unknown Source ) at org.apache.tomcat.util.threads.TaskThread $ WrappingRunnable.run ( TaskThread.java:61 ) at java.lang.Thread.run ( Unknown Source ) java.sql.SQLException : ORA-00917 : missing comma at oracle.jdbc.driver.DatabaseError.throwSqlException ( DatabaseError.java:112 ) at oracle.jdbc.driver.T4CTTIoer.processError ( T4CTTIoer.java:331 ) at oracle.jdbc.driver.T4CTTIoer.processError ( T4CTTIoer.java:288 ) at oracle.jdbc.driver.T4C8Oall.receive ( T4C8Oall.java:743 ) at oracle.jdbc.driver.T4CStatement.doOall8 ( T4CStatement.java:207 ) at oracle.jdbc.driver.T4CStatement.executeForRows ( T4CStatement.java:946 ) at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout ( OracleStatement.java:1160 ) at oracle.jdbc.driver.OracleStatement.executeQuery ( OracleStatement.java:1264 ) at com.kpk.daoImpl.FileDataDao.insertIntoFileMovement ( FileDataDao.java:93 ) at com.kpk.daoImpl.FileDataDao.insertFileMovement ( FileDataDao.java:75 ) at com.mvc.spring.FileMovementController.markFile ( FileMovementController.java:57 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( Unknown Source ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( Unknown Source ) at java.lang.reflect.Method.invoke ( Unknown Source ) at org.springframework.web.method.support.InvocableHandlerMethod.invoke ( InvocableHandlerMethod.java:213 ) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest ( InvocableHandlerMethod.java:126 ) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle ( ServletInvocableHandlerMethod.java:96 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod ( RequestMappingHandlerAdapter.java:617 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal ( RequestMappingHandlerAdapter.java:578 ) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle ( AbstractHandlerMethodAdapter.java:80 ) at org.springframework.web.servlet.DispatcherServlet.doDispatch ( DispatcherServlet.java:923 ) at org.springframework.web.servlet.DispatcherServlet.doService ( DispatcherServlet.java:852 ) at org.springframework.web.servlet.FrameworkServlet.processRequest ( FrameworkServlet.java:882 ) at org.springframework.web.servlet.FrameworkServlet.doPost ( FrameworkServlet.java:789 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:648 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:729 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:291 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:206 ) at org.apache.tomcat.websocket.server.WsFilter.doFilter ( WsFilter.java:52 ) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter ( ApplicationFilterChain.java:239 ) at org.apache.catalina.core.ApplicationFilterChain.doFilter ( ApplicationFilterChain.java:206 ) at org.apache.catalina.core.StandardWrapperValve.invoke ( StandardWrapperValve.java:219 ) at org.apache.catalina.core.StandardContextValve.invoke ( StandardContextValve.java:106 ) at org.apache.catalina.authenticator.AuthenticatorBase.invoke ( AuthenticatorBase.java:502 ) at org.apache.catalina.core.StandardHostValve.invoke ( StandardHostValve.java:142 ) at org.apache.catalina.valves.ErrorReportValve.invoke ( ErrorReportValve.java:79 ) at org.apache.catalina.valves.AbstractAccessLogValve.invoke ( AbstractAccessLogValve.java:617 ) at org.apache.catalina.core.StandardEngineValve.invoke ( StandardEngineValve.java:88 ) at org.apache.catalina.connector.CoyoteAdapter.service ( CoyoteAdapter.java:518 ) at org.apache.coyote.http11.AbstractHttp11Processor.process ( AbstractHttp11Processor.java:1091 ) at org.apache.coyote.AbstractProtocol $ AbstractConnectionHandler.process ( AbstractProtocol.java:668 ) at org.apache.tomcat.util.net.NioEndpoint $ SocketProcessor.doRun ( NioEndpoint.java:1527 ) at org.apache.tomcat.util.net.NioEndpoint $ SocketProcessor.run ( NioEndpoint.java:1484 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( Unknown Source ) at org.apache.tomcat.util.threads.TaskThread $ WrappingRunnable.run ( TaskThread.java:61 ) at java.lang.Thread.run ( Unknown Source )"
@ Testpublic void test ( ) { System.out.println ( `` A\u0305B '' ) ; }
public class Derived extends Base { public static void main ( String args [ ] ) { System.out.println ( `` Hello World '' ) ; Derived d = new Derived ( ) ; } protected Derived ( ) { System.out.println ( `` Inside Derived Const '' ) ; showAll ( ) ; } protected void showAll ( ) { System.out.println ( `` Inside Derived showAll '' ) ; System.out.println ( getClass ( ) .getName ( ) + '' : `` +height ) ; } double height = 106.0 ; } class Base { protected Base ( ) { System.out.println ( `` Inside Base Const '' ) ; showAll ( ) ; } protected void showAll ( ) { System.out.println ( `` Inside Base showAll '' ) ; System.out.println ( getClass ( ) .getName ( ) + '' : `` +height ) ; } double height = 196.0 ; } Hello worldDerived : 106Base : 196 Hello WorldInside Base ConstInside Derived showAllDerived : 0.0Inside Derived ConstInside Derived showAllDerived : 106.0
private Integer number ; private final Object numberLock = new Object ( ) ; public int get ( ) { synchronized ( number or numberLock ) { return Integer.valueOf ( number ) ; } } public void add ( int num ) { synchronized ( number ) number = number + num ; } public void add ( int num ) { synchronized ( numberLock ) number = number + num ; }
"Double [ ] a = new Double [ ] { 1.,2.,3 . } ; Double [ ] b = new Double [ ] { 10.,20.,30 . } ; System.out.println ( myCombinedMap ) ; { 1.0=10.0 , 2.0=20.0 , 3.0=30.0 }"
"public class Test3 { public static < K , V > Map < K , V > map ( ) { return new HashMap < K , V > ( ) ; } } class A { static void f ( Map < String , Integer > bcMap ) { } public static void main ( String [ ] args ) { f ( Test3.map ( ) ) //not valid Map < String , Integer > m = Test3.map ( ) ; //valid } }"
public class TestSubject { public TestSubject ( List < Integer > list ) { } } List < String > strings = new ArrayList < > ( ) ; strings.add ( `` foo '' ) ; Constructor < TestSubject > constructor = TestSubject.class.getConstructor ( List.class ) ; TestSubject test = constructor.newInstance ( strings ) ;
"public class Zoo { private List < Animal > animals ; private List < Building > buildings ; public Zoo ( ) { this.animals = new PersistencyController ( ) .giveAnimals ( ) ; this.gebouwen = new PersistencyController ( ) .giveBuildings ( ) ; } public List < Animal > giveAnimalsByKind ( String kindName ) { return animals.stream ( ) .filter ( animal - > animal.getKind ( ) .getName ( ) == kindName ) .sorted ( Comparator.comparing ( Animal : :getWeight ) ) .collect ( Collectors.toList ( ) ) ; } public double giveAvgWeightForAnimalsInBuilding ( String buildingName ) { return animals.stream ( ) .collect ( Collectors.averagingDouble ( Animal : :getWeight ) ) ; } } public class Animal implements Serializable { private int nr ; private String name ; private double weight ; private Kind kind ; public Animal ( int nr , String name , double weight , Kind kind ) { this.nr = nr ; this.name = name ; this.weight= weight ; this.kind= kind ; } public double getWeight ( ) { return weight ; } public void setWeight ( double weight ) { this.weight = weight ; } } public class Building { private String naam ; private int capaciteit ; private final List < Animal > animals = new ArrayList < > ( ) ; public Building ( String naam , int capaciteit ) { this.naam = naam ; this.capaciteit = capaciteit ; } }"
"class A { } class B extends A { } class C extends B { } public static < T > T testMe ( List < ? super T > list1 , List < ? extends T > list2 ) { return null ; } public static void main ( String [ ] args ) { List < B > listB = new ArrayList < > ( ) ; List < C > listC = new ArrayList < > ( ) ; // All three variants are possible : A a=testMe ( listB , listC ) ; B b=testMe ( listB , listC ) ; C c=testMe ( listB , listC ) ; }"
"try { // Recheck under lock Cell [ ] rs ; int m , j ; if ( ( rs = cells ) ! = null & & ( m = rs.length ) > 0 & & rs [ j = ( m - 1 ) & h ] == null ) { rs [ j ] = r ; created = true ; } } finally { busy = 0 ; } rs [ j = ( m - 1 ) & h ]"
class b { String s= '' sdnla '' ; }
"public interface Fuzzy { boolean isFuzzy ( ) ; } public class FuzzyWuzzy implements Fuzzy , Comparable < Fuzzy > { public boolean isFuzzy ( ) { return true ; } public int compare ( Fuzzy o ) { return 0 ; ) } public abstract class FuzzyContainer < T extends Fuzzy & Comparable < T > > { : } public class FuzzyWuzzyContainer extends Fuzzycontainer < FuzzyWuzzy > // Error is here { }"
public class TestNull { public void leftComparison ( String s ) { if ( s == null ) ; } public void rightComparison ( String s ) { if ( null == s ) ; } } public class TestNull { ... . public void leftComparison ( java.lang.String ) ; Code : 0 : aload_1 1 : ifnonnull 4 4 : return public void rightComparison ( java.lang.String ) ; Code : 0 : aconst_null 1 : aload_1 2 : if_acmpne 5 5 : return }
@ NoPackage ( `` javax.swing '' ) class Foo { private JFrame fram ; // NOT OK . }
"public class ThreadPool { private BlockingQueue taskQueue = null ; private List < PoolThread > threads = new ArrayList < PoolThread > ( ) ; private boolean isStopped = false ; public ThreadPool ( int noOfThreads , int maxNoOfTasks ) { taskQueue = new BlockingQueue ( maxNoOfTasks ) ; for ( int i=0 ; i < noOfThreads ; i++ ) { threads.add ( new PoolThread ( taskQueue ) ) ; } for ( PoolThread thread : threads ) { thread.start ( ) ; } } public synchronized void execute ( Runnable task ) throws Exception { if ( this.isStopped ) throw new IllegalStateException ( `` ThreadPool is stopped '' ) ; this.taskQueue.enqueue ( task ) ; } public synchronized void stop ( ) { this.isStopped = true ; for ( PoolThread thread : threads ) { thread.doStop ( ) ; } } } public class PoolThread extends Thread { private BlockingQueue taskQueue = null ; private boolean isStopped = false ; public PoolThread ( BlockingQueue queue ) { taskQueue = queue ; } public void run ( ) { while ( ! isStopped ( ) ) { try { Runnable runnable = ( Runnable ) taskQueue.dequeue ( ) ; runnable.run ( ) ; } catch ( Exception e ) { //log or otherwise report exception , //but keep pool thread alive . } } } public synchronized void doStop ( ) { isStopped = true ; this.interrupt ( ) ; //break pool thread out of dequeue ( ) call . } public synchronized boolean isStopped ( ) { return isStopped ; } }"
"< T extends ResponseCallBack > T sendData ( @ Nonnull final OrderIf checkoutOrder , @ Nullable final List < NameValueIf > ccParmList ) throws Exception ; ResponseCallBack sendData ( @ Nonnull final OrderIf checkoutOrder , @ Nullable final List < NameValueIf > ccParmList )"
int i ; // the regex should find this one.String example = `` int i '' ; // the regex should ignore this line.logger.i ( `` int '' ) ; // the regex should ignore this line . logger.i ( `` int '' ) + int.toString ( ) ; // the regex should find this one ( because of the second int )
"Arrays.sort ( people , ( n1 , n2 ) - > ( n2 [ 0 ] == n1 [ 0 ] ) ? n1 [ 1 ] - n2 [ 1 ] : n2 [ 0 ] - n1 [ 0 ] ) ; Arrays.sort ( people , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] n1 , int [ ] n2 ) { return ( n2 [ 0 ] == n1 [ 0 ] ) ? n1 [ 1 ] - n2 [ 1 ] : n2 [ 0 ] - n1 [ 0 ] ; } } ) ; PriorityQueue < Integer > pq = new PriorityQueue < > ( ( a , b ) - > b - a ) ;"
"if ( isJavaVirtualMachine ( ) ) { System.out.println ( `` You are running on a JVM '' ) ; } else if ( isDalvikVirtualMachine ( ) ) { Log.i ( `` env '' , '' You are running on an android . `` ) ; }"
"enum Colors { RED , GREEN , BLUE } switch ( colors ) { case RED : ... case GREEN : ... case BLUE : ... } enum Colors { RED , GREEN , BLUE , YELLOW }"
public class Foo { private Date date ; private String name ; private Long number ; } 01/01/2016 Name1 92856201/01/2016 Name2 91078501/01/2016 Name3 81129001/01/2016 Name4 81128901/01/2016 Name5 500000002/01/2016 Name3 87770202/01/2016 Name1 85296002/01/2016 Name2 74964002/01/2016 Name4 74950002/01/2016 Name5 5000000 01/01/2016 Name2 91078501/01/2016 Name1 92856201/01/2016 Name3 81129001/01/2016 Name4 81128901/01/2016 Name5 500000002/01/2016 Name2 74964002/01/2016 Name1 85296002/01/2016 Name3 87770202/01/2016 Name4 74950002/01/2016 Name5 5000000 Name2Name1Name3 01/01/2016 Name2 91078501/01/2016 Name1 92856201/01/2016 Name3 81129001/01/2016 Other 581128902/01/2016 Name2 74964002/01/2016 Name1 85296002/01/2016 Name3 87770202/01/2016 Other 5749500 List < String > sortedNames = data.stream ( ) .filter ( e - > e.getDate ( ) .equals ( getCurrentMonthDate ( ) ) ) .map ( e - > e.getName ( ) ) .collect ( Collectors.toCollection ( ArrayList < String > : :new ) ) ; Set < Date > uniqueDates = data.stream ( ) .map ( e - > e.getDate ( ) ) .collect ( Collectors.toCollection ( LinkedHashSet < Date > : :new ) ) ; List < Foo > sortedFoo= new ArrayList < Foo > ( ) ; for ( Date d : uniqueDates ) { for ( String name : sortedNames ) { for ( Foo fr : data ) { if ( fr.Date ( ) .equals ( d ) & & fr.getName ( ) .equals ( name ) ) { sortedFoo.add ( fr ) ; break ; } } } }
< html > < script > SCRIPT A < /script > < p > Hello World < /p > < /html > < html > < script > SCRIPT B < /script > < p > Hello World < /p > < /html >
private final void addCode ( String code ) { //codes here ... }
Vector v = new Vector ( ) ; v.add ( `` Some String '' ) ; v.add ( 10 ) ; Enumeration e = v.elements ( ) ; while ( e.hasMoreElements ( ) ) System.out.println ( e.nextElement ( ) ) ; Vector v = new Vector ( ) ; v.add ( `` Some String '' ) ; v.add ( 10 ) ; Enumeration < String > e = v.elements ( ) ; while ( e.hasMoreElements ( ) ) System.out.println ( e.nextElement ( ) ) ; Vector v = new Vector ( ) ; v.add ( `` Some String '' ) ; v.add ( 10 ) ; Enumeration < Integer > e = v.elements ( ) ; while ( e.hasMoreElements ( ) ) System.out.println ( e.nextElement ( ) ) ;
Process p = Runtime.getRuntime ( ) .exec ( pathToTheExeInstaller ) ;
"set srcDir = C : \Developpement\Workspaces\Eclipse\MyAuthenticationProvider\src java -DMJF=MyAuthentication.jar -Dfiles= % srcDir % weblogic.management.commo.WebLogicMBeanMaker The specified input files directory , `` % srcDir % '' , does not exist . java -DMJF=MyAuthentication.jar -Dfiles= $ srcDir weblogic.management.commo.WebLogicMBeanMaker The specified input files directory , `` $ srcDir '' , does not exist . C : \Developpement\Workspaces\Eclipse\WLAuthenticationProvider > set a=testC : \Developpement\Workspaces\Eclipse\WLAuthenticationProvider > echo $ a $ aC : \Developpement\Workspaces\Eclipse\WLAuthenticationProvider >"
1.234e-6 11.234e-6 1.000e-11000.000e-1
"fun main ( ) { val num = Random.nextInt ( ) val a = num * 30 val b = num * 31 val c = num * 32 println ( `` $ a , $ b , $ c '' ) } L1 LINENUMBER 5 L1 ILOAD 0 BIPUSH 30 IMUL ISTORE 1 L2 LINENUMBER 6 L2 ILOAD 0 BIPUSH 31 IMUL ISTORE 2 L3 LINENUMBER 7 L3 ILOAD 0 BIPUSH 32 IMUL ISTORE 3 int test ( int num ) { int n = rand ( ) ; int a= n*30 ; int b= n*31 ; int c= n*32 ; return a * b * c ; } test : push rbp mov rbp , rsp sub rsp , 32 mov DWORD PTR [ rbp-20 ] , edi call rand mov DWORD PTR [ rbp-4 ] , eax mov eax , DWORD PTR [ rbp-4 ] imul eax , eax , 30 mov DWORD PTR [ rbp-8 ] , eax mov edx , DWORD PTR [ rbp-4 ] mov eax , edx sal eax , 5 sub eax , edx mov DWORD PTR [ rbp-12 ] , eax mov eax , DWORD PTR [ rbp-4 ] sal eax , 5 mov DWORD PTR [ rbp-16 ] , eax mov eax , DWORD PTR [ rbp-8 ] imul eax , DWORD PTR [ rbp-12 ] imul eax , DWORD PTR [ rbp-16 ] leave ret num = randint ( ) a = num * 30b = num * 31c = num * 32 5 18 LOAD_NAME 2 ( num ) 20 LOAD_CONST 2 ( 30 ) 22 BINARY_MULTIPLY 24 STORE_NAME 3 ( a ) 6 26 LOAD_NAME 2 ( num ) 28 LOAD_CONST 3 ( 31 ) 30 BINARY_MULTIPLY 32 STORE_NAME 4 ( b ) 7 34 LOAD_NAME 2 ( num ) 36 LOAD_CONST 4 ( 32 ) 38 BINARY_MULTIPLY 40 STORE_NAME 5 ( c ) 42 LOAD_CONST 5 ( None ) 44 RETURN_VALUE"
"import java.lang.reflect.Array ; public class GenericsArrayCreation < T > { public static < T > void Test ( T [ ] A ) { @ SuppressWarnings ( `` unchecked '' ) T [ ] temp = ( T [ ] ) Array.newInstance ( A.getClass ( ) , A.length ) ; for ( int i = 0 ; i < temp.length ; i++ ) { temp [ i ] = A [ i ] ; System.out.println ( temp [ i ] .toString ( ) ) ; } } public static void main ( String [ ] args ) { String [ ] strs = { `` a '' , `` b '' , `` c '' } ; GenericsArrayCreation.Test ( strs ) ; } } T [ ] temp = ( T [ ] ) Array.newInstance ( A.getClass ( ) , A.length ) ;"
"@ Test public void testUtf16With4Bytes ( ) throws Exception { assertThat ( new String ( new byte [ ] { 0,1 , -10,45 } , StandardCharsets.UTF_16BE ) , is ( `` '' ) ) ; } ava.lang.AssertionError : Expected : is `` '' but : was ``  ''"
"private String [ ] aa = { `` 70 '' , '' 80 '' , '' 99 '' , '' 140 '' , '' 150 '' , '' 199 '' , '' 200 '' , '' 300 '' , `` 349 '' , '' 350 '' , '' 400 '' , '' 499 '' , '' 500 '' , '' 501 '' , '' 900 '' , '' 1000 '' , '' 1100 '' , '' 1200 '' } ;"
"int [ ] array = { 1 , 2 , 3 , 4 } ; for ( int number : array ) { number *= 2 ; } { 1 , 2 , 3 , 4 } Integer [ ] array = { 1 , 2 , 3 , 4 } ; for ( Integer number : array ) { number *= 2 ; } { 1 , 2 , 3 , 4 } int [ ] array = { 1 , 2 , 3 , 4 } ; for ( int i = 0 ; i < array.length ; i ++ ) { array [ i ] *= 2 ; } { 2 , 4 , 6 , 8 }"
12 of 128 [ \d\sof\s\d ]
"public class Deadlock { static class Friend { private final String name ; public Friend ( String name ) { this.name = name ; } public String getName ( ) { return this.name ; } public synchronized void bow ( Friend bower ) { System.out.format ( `` \n % S : % S has bowed to me ! '' , this.name , bower.getName ( ) ) ; bower.bowBack ( this ) ; } public synchronized void bowBack ( Friend bower ) { System.out.format ( `` \n % S : % S has bowed back to me ! `` , this.name , bower.getName ( ) ) ; } } public static void main ( String [ ] args ) { final Friend alf = new Friend ( `` Alf '' ) ; final Friend arian = new Friend ( `` Arian '' ) ; // Thread 1 new Thread ( new Runnable ( ) { public void run ( ) { alf.bow ( arian ) ; } } ) .start ( ) ; //Thread 2 new Thread ( new Runnable ( ) { public void run ( ) { arian.bow ( alf ) ; } } ) .start ( ) ; }"
List < Class < ? > > KEY_NAME_CLASSES = Collections.singletonList ( String.class ) ; incompatible types : java.util.List < java.lang.Class < java.lang.String > > can not be converted to java.util.List < java.lang.Class < ? > >
"[ 'name ' { d763e18f-1719-480b-bcd6-8fea7bad894e } Parameter , 'class ' { 8471633e-4a54-4c86-bd2b-56d58baf2fbb } Parameter , 'id ' { 23471633e-4a54-4c86-bd2b-56d58baf2fbb } Parameter ] [ 'name ' , 'class ' , 'id ' ]"
"/** * Returns a list of tasks for specific user * @ param userId * @ return Selected list of tasks */List < Task > getTasksForUser ( Integer userId ) ; /** * Returns a list of tasks in chosen month and year * @ param month * @ param year * @ return selected list of tasks */List < Task > getTasks ( Integer month , Integer year ) ; /** * Returns a list of tasks using params month , year * @ param month * @ param year * @ return a list of tasks */List < Task > getTasks ( Integer month , Integer year ) ;"
"final ClientRequest request = new ClientRequest ( ) ; request.setMethod ( new HttpString ( requestMethod ) ) ; request.getRequestHeaders ( ) .put ( Headers.TRANSFER_ENCODING , `` chunked '' ) ; connection.sendRequest ( request , new ClientCallback < ClientExchange > ( ) { @ Override public void completed ( ClientExchange clientExchange ) { } @ Override public void failed ( IOException e ) { } }"
{ s = `` Hello '' ; } String s ; { s = `` Hello '' ; String ss = s ; } String s ;
@ Test public void test ( ) { boolean bool = false ; Integer intVal = Integer.valueOf ( 5 ) ; Long longVal = null ; Long result = bool ? intVal : longVal ; System.out.println ( `` > `` + result ) ; } Long result = bool ? Long.valueOf ( intVal ) : longVal ; longVal = intVal ;
Class C extends B
public class Main { public static void main ( String [ ] args ) { int k = 4 ; System.out.println ( s ) ; } } javac Main.javaMain.java:3 : error : illegal character : '\udd1e ' int k = 4 ; ^1 error
"String hi = `` Hi '' ; list.add ( hi ) ; list.add ( `` Buy '' ) ; System.out.println ( `` list before : `` + list ) ; for ( Iterator < String > iterator = list.iterator ( ) ; iterator.hasNext ( ) ; ) { String string = iterator.next ( ) ; list.add ( `` Good '' ) ; } list before : [ Hi , Buy ] Exception in thread `` main '' java.util.ConcurrentModificationException at java.util.ArrayList $ Itr.checkForComodification ( ArrayList.java:859 ) at java.util.ArrayList $ Itr.next ( ArrayList.java:831 ) at thread.CollectionTest.main ( CollectionTest.java:19 ) List < String > list = new ArrayList < > ( ) ; String hi = `` Hi '' ; list.add ( hi ) ; list.add ( `` Buy '' ) ; System.out.println ( `` list before : `` + list ) ; for ( Iterator < String > iterator = list.iterator ( ) ; iterator.hasNext ( ) ; ) { String string = iterator.next ( ) ; list.remove ( hi ) ; } list before : [ Hi , Buy ] list after : [ Buy ]"
1/1 + 1/2 + 1/3 ... + 1/n public class RecursiveSum { public static double Sumto ( int n ) { if ( n == 0 ) { return 0.0 ; } else if ( n > 0 ) { return 1/n + 1/Sumto ( n - 1 ) ; } else { throw new IllegalArgumentException ( `` Please provide positive integers '' ) ; } } public static void main ( String [ ] args ) { System.out.println ( Sumto ( 5 ) ) ; } } Infinity
for ( i = i ; i < size ; i++ ) { encodedArr [ j ] = ( byte ) ( data [ i ] & 0x00FF ) ; j++ ; } // where data variable is a char [ ] and encodedArr is a byte [ ]
public DataVO { private String id ; private String value ; ... // getters / setters @ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( ( id == null ) ? 0 : id.hashCode ( ) ) ; return result ; } @ Override public boolean equals ( final Object obj ) { ... ... final DataVO other = ( DataVO ) obj ; if ( id == null ) { if ( other.id ! = null ) { return false ; } } else if ( ! id.equals ( other.id ) ) { return false ; } return true ; } }
import java.lang.reflect.Field ; public class SomeClass { public static void main ( final String [ ] args ) throws Throwable { final String s = `` Umesh '' ; changeString ( s ) ; } // We need a method so the compiler wo n't inline `` s '' : static void changeString ( final String s ) throws Throwable { System.out.println ( `` Original : `` + s ) ; final Field field = String.class.getDeclaredField ( `` value '' ) ; field.setAccessible ( true ) ; final char [ ] value = ( char [ ] ) field.get ( s ) ; value [ 0 ] = ' X ' ; System.out.println ( `` Changed : `` + s ) ; } } import java.lang.reflect.Field ; public class SomeClass { public static void main ( final String [ ] args ) throws Throwable { final String s = `` Umesh '' ; System.out.println ( `` Original : `` + s ) ; final Field field = String.class.getDeclaredField ( `` value '' ) ; field.setAccessible ( true ) ; final char [ ] value = ( char [ ] ) field.get ( s ) ; value [ 0 ] = ' X ' ; System.out.println ( `` Changed : `` + s ) ; } }
volatile int x ; ... int y = x ; final Object lock = new Object ( ) ; int x ; ... synchronized ( lock ) { int y = x ; }
public List < E > sort ( ArrayList < E > list ) { ... } public List < E > sort ( ArrayList < E > list ) { ... } public < E > SuperClass < E > sort ( SubClass < E > object ) { ... }
if ( A == A1 ) { //dosomething-A1 if ( B == B1 ) { //dosomething-B1 if ( C == C2 ) { //dosomething-C2 } } else if ( B == B2 ) { //dosomething-B2 } if ( C == C2 ) { //dosomething-C2 if ( D == D1 ) { //dosomething-D1 } else if ( D == D3 ) { //dosomething-D3 } } } else if ( A == A2 ) { //dosomething-A2 ... } else if ( A == A3 ) { //dosomething-A3 ... }
transient Collection < V > values ; public Collection < V > values ( ) { Collection < V > vs = values ; if ( vs == null ) { vs = new Values ( ) ; values = vs ; } return vs ; } transient Collection < V > values ; public Collection < V > values ( ) { if ( values == null ) { values = new Values ( ) ; } return values ; }
public class Test { private static < T extends Throwable > void doThrow ( Throwable ex ) throws T { throw ( T ) ex ; } public static void main ( String [ ] args ) { doThrow ( new Exception ( ) ) ; //it 's ok } } public class Test { private static < T extends Throwable > void doThrow ( Throwable ex ) throws Throwable { throw ( T ) ex ; } public static void main ( String [ ] args ) { doThrow ( new Exception ( ) ) ; //unhandled exception } }
public class Example { public static List < String > list = new ArrayList < String > ( ) ; public static void addElement ( String val ) { synchronized ( list ) { list.add ( val ) ; } } public static synchronized void printElement ( ) { Iterator < String > it = list.iterator ( ) ; while ( it.hasNext ( ) ) { //print element } } }
public class A < T extends String > { T field ; List < T > fields ; public T getField ( ) { return field ; } public List < T > getFields ( ) { return fields ; } public static void test ( ) { A a = new A ( ) ; String s = a.getField ( ) ; List < String > ss = a.getFields ( ) ; } }
int totalNo = 0 ; for ( ClassB classB : listOfClassB ) { totalNo+= classB.getAnotherObjList ( ) .size ( ) ; }
"List < String > listOne = Arrays.asList ( `` str1 '' , `` result1 '' , `` test '' , `` str4 '' , `` result2 '' , `` test '' , `` str7 '' , `` str8 '' ) ; for ( int i = 1 ; i < listOne.size ( ) ; i++ ) { if ( listOne.get ( i ) .equals ( `` test '' ) ) { listTwo.add ( listOne.get ( i - 1 ) ) ; } }"
"interface TimeSeries < T > { void add ( Instant when , T data ) ; } interface TimeStamped { Instant getTimeStamp ( ) ; } interface TimeSeries < T > { void add ( Instant when , T data ) ; default < X extends T & TimeStamped > void add ( X data ) { add ( data.getTimeStamp ( ) , data ) ; } } interface TimeSeries < T > { void add ( Instant when , T data ) ; default void add ( TimeStamped data ) { add ( data.getTimeStamp ( ) , ( T ) data ) ; } default void add ( TimeStamped t , T data ) { add ( t.getTimeStamp ( ) , data ) ; } }"
SELECT count ( * ) as ` present_days ` FROM tbl_intime_status WHERE employee_status = 'Out ' and present_status = 'Full Day ' and date LIKE ' % / '' +month2+ '' / '' +year1+ '' ' and employee_id= '' + EmpId+
"JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean ( ) ; sf.setResourceClasses ( HelloWorldResource.class ) ; sf.setResourceProvider ( HelloWorldResource.class , new SingletonResourceProvider ( new HelloWorldResource ( ) ) ) ; sf.setAddress ( `` http : //localhost:9000/ '' ) ; sf.create ( ) ;"
"@ RestController @ RequestMapping ( `` /api '' ) @ Slf4j @ RequiredArgsConstructor @ Componentpublic class GeocodingController { private final OkHttpClient httpClient = new OkHttpClient ( ) ; @ PostMapping ( value = `` /reversegeocoding '' ) public String getReverseGeocode ( @ RequestBody LatLng latlng ) throws IOException , ExecutionException , InterruptedException { String encodedLatLng = latlng.toString ( ) ; Request request = new Request.Builder ( ) .url ( `` https : //maps.googleapis.com/maps/api/geocode/json ? '' + `` language=en & result_type=street_address & latlng= '' + encodedLatLng + `` & key=MY_API_KEY '' ) .build ( ) ; CallbackFuture future = new CallbackFuture ( ) ; httpClient.newCall ( request ) .enqueue ( future ) ; Response response = future.get ( ) ; return response.body ( ) .string ( ) ; } } @ Data @ AllArgsConstructor @ NoArgsConstructorpublic class LatLng { double lat ; double lng ; public String toString ( ) { return lat + `` , '' + lng ; } } public class CallbackFuture extends CompletableFuture < Response > implements Callback { @ Override public void onFailure ( Call call , IOException e ) { super.completeExceptionally ( e ) ; } @ Override public void onResponse ( Call call , Response response ) { super.complete ( response ) ; } }"
class Test { static { var=2 ; //There is no error in this line System.out.println ( var ) ; //Why is there an error on this line if no error on the above line } static int var ; }
"-i target/Jaikoz/buildLinux -- main-class com.jthink.jaikoz.Jaikoz -- name Jaikoz -- main-jar lib/jaikoz.jar -- app-version 10.1.0 -- copyright `` Copyright 2020 JThink Ltd , United Kingdom '' -- arguments `` -l2 -m2 -f '' -- java-options `` -Dhttps.protocols=TLSv1.1 , TLSv1.2 '' -- java-options `` -- add-opens java.base/java.lang=ALL-UNNAMED '' -- vendor JThink -- icon `` Jaikoz64.png '' -- install-dir /opt -- linux-menu-group Jaikoz -- linux-shortcut"
String stringA = `` WHATSUP '' ; String stringB = `` HATS '' ; for ( int i = 0 ; i < stringA.length ( ) ; i++ ) { for ( int j = 0 ; j < stringB.length ( ) ; j++ ) { if ( stringA.charAt ( i ) == stringB.charAt ( j ) ) //do something } }
String data = StringUtils.capitalize ( `` abcd '' ) ; // instead of thisString data = `` abcd '' .capitalize ( ) // I would like to do this
public E remove ( int index ) { E value = ( E ) elementData [ index ] ; for ( int i=index ; i < size-1 ; i++ ) { elementData [ i ] =elementData [ i+1 ] ; } elementData [ size-1 ] =null ; return value ; } Box < Integer > list = new Box < > ( ) ; for ( int i=1 ; i < 5 ; i++ ) { list.add ( i ) ; } print ( list ) ; list.remove ( 1 ) ; print ( list ) ; 1 2 3 41 3 4 null 1234134
public abstract class CustomField < T > extends AbstractField < T > implements HasComponents { // some code @ Override public abstract Class < ? extends T > getType ( ) ; // some code } public class VerticalCheckBoxSelect < T > extends CustomField < Set < T > > { @ Override public Class < ? extends Set < T > > getType ( ) { return ? ? ? ; } }
"public class TestClass { public String field1 = `` Field1 '' ; public String field2 = `` Field2 '' ; public String field3 = `` Field3 '' ; } public class Serializer { public String toJson ( ) { return new Gson ( ) .toJson ( this ) ; } } public class TestClass extends Serializer { public String field1 = `` Field1 '' ; public String field2 = `` Field2 '' ; public String field3 = `` Field3 '' ; } TestClass test1 = new TestClass ( ) ; String json = test1.toJson ( ) ; public class TestClass extends Serializer { public String field1 = `` Field1 '' ; public String field2 = `` Field2 '' ; public String field3 = `` Field3 '' ; public static TestClass fromJson ( String json ) { return new Gson ( ) .fromJson ( json , new TypeToken < TestClass > ( ) { } .getType ( ) ) ; } } TestClass test2 = TestClass.fromJson ( json ) ;"
public static < E > Set < E > removeDups ( Collection < E > c ) { return new LinkedHashSet < E > ( c ) ; } < E > Set < E > and not just Set < E > ?
"public class Main { Integer x = new Integer ( 42 ) ; Integer y = new Integer ( 42 ) ; public static void main ( String [ ] args ) { Main main = new Main ( ) ; System.out.println ( `` x Before increment : `` + main.x ) ; // based on some logic , call increment either on x or y increment ( main.x ) ; System.out.println ( `` x after increment : `` + main.x ) ; } private static void increment ( Integer int_ref ) { ++int_ref ; } } x Before increment : 42x after increment : 42 private static class IntegerWrapper { private int value ; IntegerWrapper ( int value ) { this.value = value ; } void plusplus ( ) { ++value ; } int getValue ( ) { return value ; } }"
"static { System.out.println ( `` Static 1 , staticField ca n't be accessed ( compile error ) '' ) ; staticField = `` value '' ; // NO COMPILE ERROR ! //System.out.println ( staticField ) ; // compile error } public static String staticField ; static { System.out.println ( `` Static 2 , staticField= '' + staticField ) ; // prints `` value '' }"
public class Node < E > { private E data ; public Node ( E data ) { this.data=data ; } public E get ( ) { return this.data ; } public void set ( E data ) { this.data=data ; } }
private void m10 ( String [ ] arr ) { for ( String s : arr ) { Supplier < String > supplier = ( ) - > { System.out.println ( s ) ; return null ; } ; supplier.get ( ) ; } } private void m10 ( Object [ ] arr ) { for ( Object s : arr ) { Supplier < String > supplier = ( ) - > { System.out.println ( s ) ; return null ; } ; supplier.get ( ) ; } } private void m11 ( String [ ] arr ) { for ( int i = 0 ; i < arr.length ; i++ ) { Supplier < String > supplier = ( ) - > { System.out.println ( arr [ i ] ) ; return null ; } ; supplier.get ( ) ; } }
| symbol | translation | | 1 | 3 || 2 | 4 || 3 | 6 || 4 | 5 || 5 | 2 || 6 | 1 || 7 | 1 |
"import java.util.HashMap ; import java.util.Map ; public class PassBy { class CustomBean { public CustomBean ( ) { } private int id ; private String name ; public int getId ( ) { return id ; } public void setId ( int id ) { this.id = id ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } @ Override public String toString ( ) { return id + `` , `` + name ; } } public Map < Integer , String > changeObject2NULL ( Map < Integer , String > m ) { m = null ; return m ; } public Map < Integer , String > changeObject2CLEAR ( Map < Integer , String > m ) { m.clear ( ) ; return m ; } public CustomBean changeCustomObject ( CustomBean _e ) { _e.setId ( _e.getId ( ) + 1 ) ; return _e ; } public static void main ( String [ ] args ) { PassBy passby = new PassBy ( ) ; Map < Integer , String > map = new HashMap < Integer , String > ( ) ; map.put ( 1 , `` value '' ) ; CustomBean bean = passby.new CustomBean ( ) ; bean.setId ( 1 ) ; bean.setName ( `` arun '' ) ; // Initial Value System.out.println ( map.toString ( ) ) ; System.out.println ( bean.toString ( ) ) ; System.out.println ( `` -- -- -- -- -- -- -- -- -- -- -- -- - '' ) ; // Pass by value works fine passby.changeObject2NULL ( map ) ; passby.changeCustomObject ( bean ) ; // Custom object value changes since we pass as the object reference but Map remains with actual value System.out.println ( map.toString ( ) ) ; System.out.println ( bean.toString ( ) ) ; System.out.println ( `` -- -- -- -- -- -- -- -- -- -- -- -- - '' ) ; // Testing Pass by value - CANT UNDERSTAND why it changed the object since it has to be pass-by-value and not by ref in this case ? ? // Why setting to null not chainging the value but clear does ? passby.changeObject2CLEAR ( map ) ; System.out.println ( map.toString ( ) ) ; } }"
public class test { public static void test ( ) { ArrayList < Integer > bob = new ArrayList < Integer > ( ) ; bob.add ( 129 ) ; bob.add ( 129 ) ; System.out.println ( bob.get ( 0 ) == 129 ) ; System.out.println ( bob.get ( 1 ) == 129 ) ; System.out.println ( bob.get ( 0 ) == bob.get ( 1 ) ) ; } } public class test { public static void test ( ) { ArrayList < Integer > bob = new ArrayList < Integer > ( ) ; bob.add ( 129 ) ; bob.add ( 129 ) ; int a = bob.get ( 0 ) ; int b = bob.get ( 1 ) ; System.out.println ( a == 129 ) ; System.out.println ( b == 129 ) ; System.out.println ( a == b ) ; } }
"import java.util . * ; import java.util.concurrent.atomic.DoubleAdder ; import java.util.function.Function ; import java.util.stream.Collectors ; class Scratch { static enum Id { A , B , C } static class IdWrapper { private final Id id ; public IdWrapper ( Id id ) { this.id = id ; } Id getId ( ) { return id ; } } public static void main ( String [ ] args ) { Map < String , Object > v1 = new HashMap < > ( ) ; v1.put ( `` parents '' , new HashSet < > ( Arrays.asList ( new IdWrapper ( Id.A ) , new IdWrapper ( Id.B ) ) ) ) ; v1.put ( `` size '' , 1d ) ; Map < String , Object > v2 = new HashMap < > ( ) ; v2.put ( `` parents '' , new HashSet < > ( Arrays.asList ( new IdWrapper ( Id.B ) , new IdWrapper ( Id.C ) ) ) ) ; v2.put ( `` size '' , 2d ) ; Map < String , Map < String , Object > > allVs = new HashMap < > ( ) ; allVs.put ( `` v1 '' , v1 ) ; allVs.put ( `` v2 '' , v2 ) ; HashMap < Id , DoubleAdder > adders = new HashMap < > ( ) ; allVs.values ( ) .forEach ( m - > { double size = ( Double ) m.get ( `` size '' ) ; Set < IdWrapper > wrappedIds = ( Set < IdWrapper > ) m.get ( `` parents '' ) ; wrappedIds.forEach ( w - > adders.computeIfAbsent ( w.getId ( ) , a - > new DoubleAdder ( ) ) .add ( size ) ) ; } ) ; System.out.println ( adders.keySet ( ) .stream ( ) .collect ( Collectors.toMap ( Function.identity ( ) , key - > adders.get ( key ) .doubleValue ( ) ) ) ) ; collect ( Collectors.groupingBy ( ... ) , Collectors.summingDouble ( ... ) ;"
System.out.println ( Integer.parseInt ( e.getMessage ( ) ) ) ; System.out.println ( e.getMessage ( ) ) ; System.exit ( Integer.parseInt ( e.getMessage ( ) ) ) ; -2 -2 254
| | | | featureB > = 16104.33 : 18873.52 ( 1/0 ) | featureA > = 17980.32featureC = ABC BLAH BLAH blA ' H $ blah 4/ blah blah Pattern.compile ( `` ( ? : \\| ) * ( .* ? ) ( > ? =| < ) ( ( ? ! : ) . ) * ( ? : : ? ) ( .* ? ) ( ? : \\ ( .*\\ ) ) ? '' )
public class CustomComboBoxDemo { public static boolean test = true ; public static void main ( String [ ] args ) { Thread user =new Thread ( ) { @ Override public void run ( ) { try { sleep ( 2000 ) ; } catch ( InterruptedException e ) { } test=false ; } } ; user.start ( ) ; while ( test ) { System.out.println ( `` foo '' ) ; //Without this line the program does not terminate.. } } }
"abstract class Router < C extends Component , I extends Interactor > abstract class Interactor < R extends Router > abstract class Component < I extends Interactor >"
"private static < T > T get ( Class < T > clazz ) throws IllegalAccessException , InstantiationException { if ( clazz.equals ( String.class ) ) { return ( T ) new String ( `` abc '' ) ; //line x } else { return clazz.newInstance ( ) ; } }"
"new Thread ( ( ) - > { //do things } ) .start ( ) ; new Thread ( ( ) - > { //do same things } ) .start ( ) ; Function < Integer , Integer > add = x - > x + 1 ;"
public class Playground < T > { private int pos ; private final int size ; private T [ ] arrayOfItems ; public Playground ( int size ) { this.size = size ; pos = 0 ; arrayOfItems = ( T [ ] ) new Object [ size ] ; } public void addItem ( T item ) { arrayOfItems [ pos ] = item ; pos++ ; } public void displayItems ( ) { for ( int i = 0 ; i < pos ; i++ ) { System.out.println ( arrayOfItems [ i ] ) ; } } public T [ ] returnItems ( ) { return ( T [ ] ) arrayOfItems ; } } Object [ ] s = animals.returnItems ( ) ; for ( int i=0 ; i < s.length ; i++ ) { System.out.println ( s [ i ] ) ; } for ( int i=0 ; i < animals.returnItems ( ) .length ; i++ ) { System.out.println ( animals.returnItems ( ) [ i ] ) ; }
public static void main ( String [ ] args ) { byte [ ] byteArray = `` hello '' .getBytes ( Charset.forName ( `` UTF-16 '' ) ) ; CharBuffer buffer = ByteBuffer.wrap ( byteArray ) .asCharBuffer ( ) ; System.out.println ( buffer.length ( ) ) ; for ( int i = 0 ; i < buffer.length ( ) ; i++ ) { System.out.print ( buffer.get ( i ) ) ; } } 6 hello
"@ Nullable public Integer x , y , z ;"
class Graph { AdjacencyList ; public Graph ( Graph graph ) { this.list = graph.list ; // shallow copy OR this.list = ArrayCopy ( graph.list ) ; // deep copy } } class DFS implements GraphAlgo { Graph g DFS ( Graph g ) { this.g = g ; // shallow copy OR this.g = new Graph ( graph ) // deep copy } DFS ( Algo algo ) { this.g = algo.g ; // shallow copy OR this.g = new Graph ( algo.g ) ; // deep copy } } class Algo { GraphAlgo galgo Algo ( GraphAlgo dfsalgo ) { galgo = dfsalgo // shallow copy OR galgo = new DFSAlgo ( dfsalgo ) ; // deep copy } }
"java.time.format.DateTimeParseException : Text '20200203092315000000 ' could not be parsed at index 0 at java.time.format.DateTimeFormatter.parseResolved0 ( DateTimeFormatter.java:1949 ) at java.time.format.DateTimeFormatter.parse ( DateTimeFormatter.java:1851 ) at java.time.LocalDateTime.parse ( LocalDateTime.java:492 ) at de.x.struct.type.LocalDateTimeStructField.setBytesValue ( LocalDateTimeStructField.java:44 ) at de.x.struct.Struct.bytesToStruct ( Struct.java:110 ) at de.x.struct.StructTest.testStringToStruct ( StructTest.java:60 ) LocalDateTime ldt = LocalDateTime.parse ( `` 20200203092315000000 '' , DateTimeFormatter.ofPattern ( `` yyyyMMddHHmmssSSSSSS '' ) ) ;"
List < String > list = new ArrayList ( ) { { add ( `` apple '' ) ; add ( `` banana '' ) ; add ( `` orange '' ) ; } } ; Stream < String > stringStream = list.stream ( ) ; stringStream.forEach ( m- > { if ( m.equals ( `` banana '' ) ) { list.remove ( `` banana '' ) ; } } ) ; System.out.println ( stringStream.count ( ) ) ;
"Change the path where the preview Solr search indexes will be stored , e.g . /opt/crafter/data/preview-indexes : In INSTALL_DIR/apache-tomcat/solr-crafter/conf/solrconfig.xml , update the value of < dataDir > to the preview indexes folder path ( e.g . < dataDir > /opt/crafter/data/preview-indexes < /dataDir > ) ."
public class Test { private String name ; public void action ( ) { name = doSome ( ) ; // case 1 setName ( doSome ( ) ) ; // case2 this.name =doSome ( ) ; // case3 } public String doSome ( ) { return `` Hello '' ; } /** * @ return the name */ public String getName ( ) { return name ; } /** * @ param name the name to set */ public void setName ( String name ) { this.name = name ; } }
solveDb_userfileInconsistency solve = new solveDb_userfileInconsistency ( ) ; solve.setVisible ( true ) ; try { solve.solveIt ( ) ; } catch ( InstantiationException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( IllegalAccessException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( ClassNotFoundException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } catch ( SQLException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; }
public abstract class CommonClass { abstract void send ( < what should i put here ? ? ? > ) { } } public class ClassA extends CommonClass { void send ( List < Comments > commentsList ) { // do stuff } } public class ClassB extends CommonClass { void send ( List < Post > postList ) { // do stuff } }
"public interface Visitor { void visit ( VarStat vs ) ; void visit ( Ident i ) ; void visit ( IntLiteral a ) ; void visit ( Sum s ) ; } public interface Visitable { void accept ( Visitor v ) ; } public class VarStat implements Visitable { Ident i ; Exp e ; public VarStat ( Ident id , Exp ex ) { i = id ; e = ex ; } public Ident getIdent ( ) { return i ; } public Exp getExp ( ) { return e ; } @ Override public void accept ( Visitor v ) { v.visit ( this ) ; } } public interface Exp extends Visitable { } public class Ident implements Exp { @ Override public void accept ( Visitor v ) { v.visit ( this ) ; } } VarStat : :== var Ident = Exp ; Exp : :== Exp + Exp | IntLiteral | IdentIntLiteral : :== [ 0-9 ] { 0,8 } Ident : :== [ a-zA-Z ] + var x = x+y+4 ; . _____VarStat _____ . / / | \ \ . / / | \ \ . / / | \ \ . `` var '' Ident `` = '' Exp `` ; '' void visit ( VarStat vs ) { vs.getIdent ( ) .accept ( this ) ; vs.getExp ( ) .accept ( this ) ; // ... } void visit ( VarStat vs ) { visit ( vs.getIdent ( ) ) ; vs.getExp ( ) .accept ( this ) ; // ... }"
( ReferenceType { AdditionalBound } ) UnaryExpressionNotPlusMinus X x = ( I1 & I2 ) some_UnaryExpressionNotPlusMinus Object l1 = ( Collection & Iterable ) new ArrayList < > ( ) ; List l2 = ( ByteList & Iterable ) new ArrayList < > ( ) ; Collection l3 = ( List & Iterable ) new ArrayList < > ( ) ;
"Process p = Runtime.getRuntime ( ) .exec ( `` javaw -cp target/classes TestClassWait10Minutes '' ) ; p.waitFor ( 5 , TimeUnit.SECONDS ) ; System.out.println ( p.supportsNormalTermination ( ) ) ;"
"Thread [ AWT-EventQueue-0 ] ( Suspended ( exception NullPointerException ) ) owns : Object ( id=39 ) File. < init > ( String ) line : 251 LoadNativeBundleAction.run ( ) line : 79 AccessController.doPrivileged ( PrivilegedExceptionAction < T > ) line : not available [ native method ] MacOSXResourceBundle.getMacResourceBundle ( String , String ) line : 48 MacOSXResourceBundle.getMacResourceBundle ( String ) line : 43 AquaLookAndFeel.initResourceBundle ( UIDefaults ) line : 249 AquaLookAndFeel.initComponentDefaults ( UIDefaults ) line : 264 AquaLookAndFeel.getDefaults ( ) line : 231 UIManager.setLookAndFeel ( LookAndFeel ) line : 536 UIManager.setLookAndFeel ( String ) line : 580 UIManager.initializeDefaultLAF ( Properties ) line : 1345 UIManager.initialize ( ) line : 1455 UIManager.maybeInitialize ( ) line : 1422 UIManager.getUI ( JComponent ) line : 1003 JPanel.updateUI ( ) line : 126 JPanel. < init > ( LayoutManager , boolean ) line : 86 JPanel. < init > ( boolean ) line : 109 JPanel. < init > ( ) line : 117 JRootPane.createGlassPane ( ) line : 545 JRootPane. < init > ( ) line : 365 Login ( JFrame ) .createRootPane ( ) line : 277 Login ( JFrame ) .frameInit ( ) line : 258 Login ( JFrame ) . < init > ( ) line : 181 Login. < init > ( ) line : 28 Login $ 2.run ( ) line : 111 InvocationEvent.dispatch ( ) line : 251 EventQueue.dispatchEventImpl ( AWTEvent , Object ) line : 727 EventQueue.access $ 200 ( EventQueue , AWTEvent , Object ) line : 103 EventQueue $ 3.run ( ) line : 688 EventQueue $ 3.run ( ) line : 686 AccessController.doPrivileged ( PrivilegedAction < T > , AccessControlContext ) line : not available [ native method ] ProtectionDomain $ 1.doIntersectionPrivilege ( PrivilegedAction < T > , AccessControlContext , AccessControlContext ) line : 76 EventQueue.dispatchEvent ( AWTEvent ) line : 697 EventDispatchThread.pumpOneEventForFilters ( int ) line : 242 EventDispatchThread.pumpEventsForFilter ( int , Conditional , EventFilter ) line : 161 EventDispatchThread.pumpEventsForHierarchy ( int , Conditional , Component ) line : 150 EventDispatchThread.pumpEvents ( int , Conditional ) line : 146 EventDispatchThread.pumpEvents ( Conditional ) line : 138 EventDispatchThread.run ( ) line : 91 package tk.kaes3kuch3n.webchat ; import java.awt.EventQueue ; public class Login extends JFrame { private static final long serialVersionUID = 1L ; private JPanel contentPane ; private JTextField txtName ; private JTextField txtAddress ; private JLabel lblIp ; private JTextField txtPort ; private JLabel lblPort ; private JLabel lblBspIp ; private JLabel lblBspPort ; public Login ( ) { try { UIManager.setLookAndFeel ( UIManager.getSystemLookAndFeelClassName ( ) ) ; } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e ) { e.printStackTrace ( ) ; } setResizable ( false ) ; setTitle ( `` Chat Login '' ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; setSize ( 250 , 400 ) ; setLocationRelativeTo ( null ) ; contentPane = new JPanel ( ) ; contentPane.setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; setContentPane ( contentPane ) ; contentPane.setLayout ( null ) ; //Username JLabel lblUsername = new JLabel ( `` Username : '' ) ; lblUsername.setBounds ( 89 , 25 , 71 , 16 ) ; contentPane.add ( lblUsername ) ; txtName = new JTextField ( ) ; txtName.setBounds ( 25 , 45 , 200 , 28 ) ; contentPane.add ( txtName ) ; txtName.setColumns ( 10 ) ; //IP-Address lblIp = new JLabel ( `` IP-Adresse : '' ) ; lblIp.setBounds ( 84 , 100 , 81 , 16 ) ; contentPane.add ( lblIp ) ; txtAddress = new JTextField ( ) ; txtAddress.setBounds ( 25 , 120 , 200 , 28 ) ; contentPane.add ( txtAddress ) ; txtAddress.setColumns ( 10 ) ; lblBspIp = new JLabel ( `` ( z.B . 127.0.0.1 ) '' ) ; lblBspIp.setBounds ( 78 , 150 , 94 , 16 ) ; contentPane.add ( lblBspIp ) ; //Port lblPort = new JLabel ( `` Port : '' ) ; lblPort.setBounds ( 106 , 200 , 38 , 16 ) ; contentPane.add ( lblPort ) ; txtPort = new JTextField ( ) ; txtPort.setBounds ( 25 , 220 , 200 , 28 ) ; contentPane.add ( txtPort ) ; txtPort.setColumns ( 10 ) ; lblBspPort = new JLabel ( `` ( z.B . 55656 ) '' ) ; lblBspPort.setBounds ( 84 , 250 , 81 , 16 ) ; contentPane.add ( lblBspPort ) ; //Login-Button JButton btnLogin = new JButton ( `` Login '' ) ; btnLogin.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { String name = txtName.getText ( ) ; String address = txtAddress.getText ( ) ; int port = Integer.parseInt ( txtPort.getText ( ) ) ; login ( name , address , port ) ; } } ) ; btnLogin.setBounds ( 66 , 325 , 117 , 29 ) ; contentPane.add ( btnLogin ) ; this.getRootPane ( ) .setDefaultButton ( btnLogin ) ; } private void login ( String user , String address , int port ) { dispose ( ) ; System.out.println ( `` User : `` + user + `` \nIP-Adresse : `` + address + `` \nPort : `` + port ) ; new Client ( user , address , port ) ; } public static void main ( String [ ] args ) { EventQueue.invokeLater ( new Runnable ( ) { public void run ( ) { try { Login frame = new Login ( ) ; frame.setVisible ( true ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ) ; } }"
class Queue { private static ExecutorService executor = Executors.newFixedThreadPool ( 1 ) ; public void use ( Runnable r ) { Queue.executor.execute ( r ) ; } } @ Override public void interrupt ( ) { synchronized ( x ) { isInterrupted = true ; super.interrupt ( ) ; } }
Statement stmt = null ; ResultSet res = null ; try { stmt = ... res = stmt.executeQuery ( ... ) ; ... } finally { try { if ( res ! = null ) res.close ( ) ; // < -- can throw SQLException } finally { if ( stmt ! = null ) stmt.close ( ) ; } }
"public class AcoProblemSolver < C , E extends Environment , A extends AntColony < E , Ant < C , E > > > { public abstract class AntColony < E extends Environment , A extends Ant < ? , E > > { public abstract class Ant < C , E extends Environment > { public class FlowShopProblemSolver extends AcoProblemSolver < Integer , FlowShopEnvironment , FlowShopAntColony > { Bound mismatch : The type FlowShopAntColony is not a valid substitute for the bounded parameter < A extends AntColony < E , Ant < C , E > > > of the type AcoProblemSolver < C , E , A > public class FlowShopAntColony extends AntColony < FlowShopEnvironment , AntForFlowShop > { public class AntForFlowShop extends Ant < Integer , FlowShopEnvironment > {"
4 % -8 -4
"import java.lang.annotation . * ; @ Retention ( RetentionPolicy.RUNTIME ) @ Target ( { ElementType.TYPE_USE , ElementType.PARAMETER } ) @ interface Lel { } class Test { public static void a ( @ Lel String args ) { } public static void b ( @ Lel String [ ] args ) { } public static void main ( String [ ] args ) throws Exception { System.out.println ( Test.class.getDeclaredMethod ( `` a '' , String.class ) .getAnnotatedParameterTypes ( ) [ 0 ] .isAnnotationPresent ( Lel.class ) ) ; System.out.println ( Test.class.getDeclaredMethod ( `` b '' , String [ ] .class ) .getAnnotatedParameterTypes ( ) [ 0 ] .isAnnotationPresent ( Lel.class ) ) ; } }"
"import java.util.Set ; import javax.annotation.processing . * ; import javax.lang.model.element.TypeElement ; @ SupportedOptions ( { `` thing1 '' , `` thing2 '' , } ) public class fc extends AbstractProcessor { @ Override public boolean process ( Set < ? extends TypeElement > anns , RoundEnvironment re ) { return false ; } }"
"@ Beanclass BeanA { @ Transactional ( propagation = Propagation.REQUIRED , rollbackFor = EvilException.class ) public void methodA ( ) { /* ... some actions */ if ( condition ) { throw new EvilException ( ) ; } } } @ Beanclass BeanB { @ Autowired private BeanA beanA ; final int MAX_TRIES = 3 ; @ Transactional ( propagation = Propagation.NESTED ) public void methodB ( ) { // prepare to call Bean A try { beanA.methodA ( ) ; /* maybe do some more things */ } catch ( EvilException e ) { /* recover from evil */ } } } @ Beanclass MainWorkerBean { @ Autowired private BeanB beanB ; @ Autowired private OtherBean otherBean ; @ Transactional ( propagation = Propagation.REQUIRED ) public void doSomeWork ( ) { beanB.methodB ( ) ; otherBean.doSomeWork ( ) ; } }"
"public enum Rule implements Validatable , StringRepresentable { // ... } public inteface Filter extends Validatable , StringRepresentable { // ... } public inteface Validatable { public GenericValidator getValidator ( ) ; } public interface StringRepresentable { public String getStringRepresentation ( ) ; } public class ValidatorFactory { public Validator getRuleValidator ( Rule r ) { ... } public Validator getFilterValidator ( Filter f ) { ... } } public interface Validator { public ErrorCode validate ( ) ; } public abstract class GenericValidator implements Validator { // ... }"
public @ interface Anno { int m ( ) default x ; int x = 10 ; } public @ interface Anno { public int m ( ) default x ; public static final int x = 10 ; }
List < ? extends List < ? extends ObservationInteger > >
class FailsToCompile { int a = b ; //illegal forward reference int b = 10 ; } class Compiles { int a = this.b ; //that 's ok int b = 10 ; }
"`` hello '' .substring ( 0 , 3 ) mat = Pattern.compile ( `` test '' ) .matcher ( `` test '' ) ; mat.find ( ) ; System.out.println ( mat.end ( ) ) ;"
"try ( Stream < User > users = userService.getStream ( ) ) { users.forEach ( user - > { } ) ; java.lang.IllegalStateException : stream has already been operated upon or closed at java.util.stream.AbstractPipeline.sourceStageSpliterator ( AbstractPipeline.java:279 ) at java.util.stream.ReferencePipeline $ Head.forEach ( ReferencePipeline.java:647 ) at com.test.UserService.sendBulkNotification ( UserService.java:47 ) at com.test.UserServiceTest.sendNotificationTest ( UserServiceTest.java:64 ) List < User > users = new ArrayList < > ( ) ; for ( long i = 1 ; i < = 5 ; i++ ) { User user = new User ( ) ; user.setId ( i ) ; users.add ( user ) ; } when ( userService.getStream ( ) ) .thenReturn ( users.stream ( ) ) ; userService.sendNotification ( `` user '' , 1 , `` test.com '' ) ;"
"interface A { } interface B { } class C implements A , B { < T extends A > void foo ( T t ) { } ; < T extends B > void foo ( T t ) { } ; } class Main { public static void main ( String [ ] args ) { new C ( ) . < C > foo ( null ) ; } }"
public class A { protected int xy ( int x ) { return 0 ; } } class B extends A { protected long xy ( int x ) { return 0 ; } //this gives compilor error //protected long xy ( byte x ) { return 0 ; } // this works fine }
"public void throwTest ( ) throws SQLException , IOException { try { } catch ( SQLException e ) { } }"
< FrameLayout android : layout_weight= '' 1 '' android : layout_gravity= '' center '' android : layout_width= '' 80dp '' android : layout_height= '' 80dp '' android : id= '' @ +id/fl_bg '' > < ImageView android : layout_gravity= '' center '' android : id= '' @ +id/iv_avatar '' android : layout_width= '' 80dp '' android : layout_height= '' 80dp '' android : contentDescription= '' @ string/app_name '' android : src= '' @ drawable/jouer '' android : scaleType= '' fitCenter '' / > < LinearLayout android : gravity= '' center '' android : id= '' @ +id/ll_winner_label '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < TextView android : layout_marginTop= '' 20dp '' android : id= '' @ +id/tv_rank '' android : text= '' 1 '' android : layout_gravity= '' top '' android : rotation= '' 120 '' android : background= '' @ color/label_center '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' / > < TextView android : layout_marginTop= '' 20dp '' android : id= '' @ +id/tv_earned_amount '' android : text= '' 5 $ '' android : rotation= '' 120 '' android : background= '' @ color/label_center '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' / > < /LinearLayout > < /FrameLayout >
public class Euler014 { public static void main ( String [ ] args ) { int maxChainCount = 0 ; int answer = 0 ; int n ; int chainCount = 1 ; for ( int i = 0 ; i < 1000000 ; i++ ) { n = i ; while ( n > 1 ) { if ( n % 2 == 0 ) { //check if even n /= 2 ; } else { //else : odd n = 3*n + 1 ; } chainCount++ ; } if ( chainCount > maxChainCount ) { //check if it 's the longest chain so far maxChainCount = chainCount ; answer = i ; } chainCount = 1 ; } System.out.println ( `` \n\nLongest chain : i = `` + answer ) ; } }
"public class Penguin implements Animal { public boolean canWalk ( ) { return true ; } public boolean canSwim ( ) { return true ; } public boolean canFly ( ) { return false ; } // implementation ... } if ( animal.canFly ( ) ) { // Fly ! } public class Penguin implements Animal , Flyer , Swimmer { // implementation ... } if ( animal instanceof Flyer ) { // Fly ! }"
@ Overridepublic Collection < Sale > selectSales ( String map ) { HashSet < Sale > sales = new HashSet ( ) ; for ( Sale sale : salesList ) { if ( sale.getMap ( ) .equals ( map ) ) { sales.add ( sale ) ; } } return sales ; } list.removeIf ( c - > c.getCarColor ( ) == Color.BLUE ) ;
"tempString = bigBuffer.replaceAll ( `` \\n '' , `` '' ) ; tempString = tempString.replaceAll ( `` \\t '' , `` '' ) ; tempString = bigBuffer.replaceAll ( `` [ \\n\\t ] '' , `` '' ) ; tempString = bigBuffer.replaceAll ( `` \\n|\\t '' , `` '' ) ;"
"class Threadz { class runP implements Runnable { int num ; private volatile boolean exit = false ; Thread t ; public runP ( ) { t = new Thread ( this , `` T1 '' ) ; t.start ( ) ; } @ Override public void run ( ) { while ( ! exit ) { System.out.println ( t.currentThread ( ) .getName ( ) + '' : `` +num ) ; num++ ; try { t.sleep ( 200 ) ; } catch ( InterruptedException e ) { } } } public void stop ( ) { exit = true ; } } public static void main ( String [ ] a ) { runP rp = new Threadz ( ) .new runP ( ) ; if ( rp.num == 1 ) { rp.stop ( ) ; } } }"
"public void draw ( ) { Camera camera = viewport.getCamera ( ) ; camera.update ( ) ; if ( ! root.isVisible ( ) ) return ; Batch batch = this.batch ; if ( batch ! = null ) { batch.setProjectionMatrix ( camera.combined ) ; batch.begin ( ) ; root.draw ( batch , 1 ) ; batch.end ( ) ; } if ( debug ) drawDebug ( ) ; }"
public void loadCustomer ( int id ) { ( mCustomerModel.load ( id ) ) { mCustomerView.setId ( mCustomerModel.getId ( ) ) ; mCustomerView.setFirstName ( mCustomerModel.getFirstName ( ) ) ; mCustomerView.setLastName ( mCustomerModel.getLastName ( ) ) ; } }
public class AGenericClass < T > { T subject ; public void setSubject ( T subject ) { this.subject = subject ; } } AGenericClass < String > a = new AGenericClass < > ( ) ; AGenericClass < ? > b = new AGenericClass < String > ( ) ; AGenericClass c = new AGenericClass < String > ( ) ; a.setSubject ( `` L '' ) ; // OK.b.setSubject ( `` M '' ) ; // Error : setSubject ( capture < ? > ) can not be // applied to ( java.lang.String ) c.setSubject ( `` N '' ) ; // Warning : Unchecked call to 'setSubject ( T ) ' // as a member of raw type 'AGenericClass '
String regex = `` Windows ( ? =95|98|NT|2000 ) '' ; String str = `` Windows2000 '' ; Pattern p = Pattern.compile ( regex ) ; Matcher m = p.matcher ( str ) ; System.out.println ( m.matches ( ) ) ; // print false var value = `` Windows2000 '' ; var reg = /Windows ( ? =95|98|NT|2000 ) / ; console.info ( reg.test ( value ) ) ; // print true
type mismatch ; found : java.util.List [ Class [ T ] ] where type T < : Person.type required : java.util.List [ Class [ _ ] ] void registerClasses ( List < Class < ? > > var1 ) ; def registerEntities ( ) = registry.registerClasses ( List ( Person.getClass ) .asJava )
String a = `` abc '' ; String b = a.substring ( 1 ) ; b.intern ( ) ; String c = `` bc '' ; System.out.println ( b == c ) ; String b = a.substring ( 1 )
interface Test < T > { T getValue ( T n ) ; } class Impl implements Test < Integer > { public Integer getValue ( Integer n ) { return n ; } } interface Test { Object getValue ( Object n ) ; }
try { .. do stuff that might throw RuntimeException ... } finally { try { .. finally block stuff that might throw RuntimeException ... } catch { // what to do here ? ? ? } }
if ( true ) String str ;
"public class xx { public static void main ( String [ ] args ) throws Exception { Number x = false ? new Long ( 123 ) : new Integer ( 456 ) ; System.out.println ( x + `` isa `` + x.getClass ( ) .getName ( ) ) ; } } 456 isa java.lang.Long java version `` 1.8.0_60 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_60-b27 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.60-b23 , mixed mode )"
"class MyLibrary { public static < I , T extends I > I registerImplementation ( Class < T > classImpl ) { I interfaceImpl = ( I ) classImpl.newInstance ( ) ; return interfaceImpl ; } } interface UserInterface { void doSomethingDefined ( ) ; } class UserClass_v1_10_R2 implements UserInterface { @ Override public void doSomethingDefined ( ) { System.out.println ( `` What this does is well-defined '' ) ; } public void doVersionSpecificStuff ( ) { System.out.println ( `` This is not in the interface , so do n't really depend on this '' ) ; } } MyLibrary.registerImplementation ( UserClass_v1_10_R2.class ) .doVersionSpecificStuff ( ) ; UserInterface uiObj = MyLibrary.registerImplementation ( UserClass_v1_10_R2.class ) ; uiObj.doVersionSpecificStuff ( ) ; // This does not compile"
if ( GWT.getBrowserName ( ) .contains ( `` IE '' ) ) { // DOM.setElementPropertyBoolean ( ... Hack } else { // normal stuff }
"public class Main { public static void main ( String [ ] args ) { C c = new C ( `` Test '' , 10 ) ; D d = new D ( `` Test '' , 10 ) ; if ( c.equals ( d ) ) System.out.println ( `` Equal '' ) ; else System.out.println ( `` Unequal '' ) ; if ( d.equals ( c ) ) System.out.println ( `` Equal '' ) ; else System.out.println ( `` Unequal '' ) ; } } class C { C ( String cstr , int cnum ) { str = cstr ; num = cnum ; } @ Override public boolean equals ( Object otherObject ) { // A quick test to see if the objects are identical . if ( this == otherObject ) { return true ; } // Must return false if the explicit parameter is null if ( otherObject == null ) { return false ; } if ( ! ( otherObject instanceof C ) ) return false ; // Now we know otherObject is a non-null Employee C other = ( C ) otherObject ; // Test whether the fields have identical values return str.equals ( other.str ) & & num == other.num ; } private String str ; private int num ; } class D extends C { D ( String cstr , int cnum ) { super ( cstr , cnum ) ; } }"
byte a=10 ; byte b=20 ; b=a+b ; b= ( byte ) ( a+b ) ; short x=23 ; short y=24 ; int p=7788 ; int q=7668 ; p=p+q ;
"{ `` count '' :100 , '' sum '' :25640.13 , '' min '' :2.65 , '' max '' :483.91 , '' average '' :256.4013 } { `` sum '' : '' 25640.13 '' , '' avg '' : '' 256.40 '' , '' max '' : '' 483.91 '' , '' min '' : '' 2.65 '' , '' count '' :100 } @ Overridepublic DoubleSummaryStatistics getStatistic ( ) { logger.info ( `` Getting statistic '' ) ; Set < Entry < Long , Transaction > > endtrySet = statisticHistory.entrySet ( ) ; List < Double > amountList = new ArrayList < > ( ) ; for ( Entry < Long , Transaction > entry : endtrySet ) { if ( ( ( entry.getValue ( ) .getDate ( ) ) ) .isAfter ( Instant.now ( ) .minusSeconds ( windowInMs ) ) ) amountList.add ( ( entry.getValue ( ) .getAmount ( ) ) .doubleValue ( ) ) ; } return amountList.stream ( ) .mapToDouble ( ( x ) - > x ) .summaryStatistics ( ) ; } public DoubleSummaryStatistics getStatisdtic ( ) { logger.info ( `` Getting statistic '' ) ; Set < BigDecimal > endtrySet = null ; //= getting this from a other resource List < Double > amountList = new ArrayList < > ( ) ; for ( BigDecimal entry : endtrySet ) { amountList.add ( ( entry ) .doubleValue ( ) ) ; } return amountList.stream ( ) .mapToDouble ( ( x ) - > x ) .summaryStatistics ( ) ; }"
"int [ ] array = { 5 , 10 , 15 } ; for ( int i = 0 ; i < array.length ; i++ ) [ //do something with array [ i ] } int [ ] array = { 5 , 10 , 15 } ; int noOfElements = array.length ; for ( int i = 0 ; i < noOfElements ; i++ ) { //do something with array [ i ] }"
Thing thing = new Thing ( ) ; Thread t1 = new Thread ( new MyRunnable ( thing ) ) ; Thread t2 = new Thread ( new MyRunnable ( thing ) ) ; t1.start ( ) ; t1.join ( ) ; //Wait for t1 to finisht2.start ( ) ; class MyRunnable implements Runnable { //skipped constructor and field `` private final Thing thing '' public void run ( ) { thing.someUpdate ( ) ; } }
public void run ( ) { synchronized ( this.foo ) { } } public void conditionalSync ( Runnable r ) { if ( bar ) { r.run ( ) ; return ; } synchronized ( this.foo ) { r.run ( ) ; } } public void run ( ) { this.conditionalSync ( ( ) - > { } ) ; }
"@ ThreadSafepublic class SafePoint { @ GuardedBy ( `` this '' ) private int x , y ; private SafePoint ( int [ ] a ) { this ( a [ 0 ] , a [ 1 ] ) ; } public SafePoint ( SafePoint p ) { this ( p.get ( ) ) ; } public SafePoint ( int x , int y ) { this.x = x ; this.y = y ; } public synchronized int [ ] get ( ) { return new int [ ] { x , y } ; } public synchronized void set ( int x , int y ) { this.x = x ; this.y = y ; } }"
"list.stream ( ) .min ( new Comparator < > ( ) { @ Override public int compare ( E a , E b ) { return Double.compare ( f ( a ) , f ( b ) ) ; } } ) list.stream ( ) .mapToDouble ( f ) .min ( ) class WithF < E > { private final E e ; private final double fe ; WithF ( E e , double fe ) { this.e = e ; this.fe = fe ; } public E getE ( ) { return e ; } public double getFE ( ) { return fe ; } } list.stream ( ) .map ( e - > new WithF < > ( e , f ( e ) ) ) .min ( Comparator.comparingDouble ( WithF : :getFE ) )"
module a { exports unsafe to b } module b { requires a }
"public class SeparateChaining < Key , Value > { private int m ; private Node [ ] hmap ; private int n ; public SeparateChaining ( ) { m=5 ; n=0 ; //error here on removal of static keyword from the node class declaration hmap=new Node [ m ] ; } private ____ class Node //works fine with static . Otherwise shows error { private Object key ; private Object value ; private Node next ; public Node ( Object k , Object v ) { key=k ; value=v ; } }"
import java.text . * ; import java.util . * ; public class Dates { public static void main ( String [ ] args ) { Date d1 = new Date ( 1000000000000000L ) ; System.out.println ( `` d1 = `` + d1.toString ( ) ) ; DateFormat df = DateFormat.getDateInstance ( DateFormat.SHORT ) ; String s = df.format ( d1 ) ; System.out.println ( s ) ; try { Date d2= df.parse ( s ) ; System.out.println ( `` Parsed Date = `` + d2.toString ( ) ) ; } catch ( ParseException e ) { System.out.println ( `` Parse Exception '' ) ; } } } d1 = Fri Sep 27 02:46:40 BST 3365827/09/58Parsed Date = Sat Sep 27 00:00:00 BST 1958
"public class QuickTextViewer { private WebView webView ; ... ... public QuickTextViewer ( ) { webView = dialog.findViewById ( R.id.mywebview ) ; webView.setWebViewClient ( new WebViewClient ( ) { @ Override public void onPageFinished ( WebView view , String url ) { view.loadUrl ( `` javascript : MyApp.resize ( document.body.getBoundingClientRect ( ) .height ) '' ) ; super.onPageFinished ( view , url ) ; } } @ JavascriptInterface public void resize ( final float height ) { System.out.print ( height ) ; } -keepclassmembers class fqcn.of.javascript.interface.for.webview { public * ; }"
"@ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.MILLISECONDS ) @ Fork ( value = 1 , jvmArgs = { `` -Xms4G '' , `` -Xmx4G '' } ) @ State ( Scope.Benchmark ) @ Warmup ( iterations = 10 , time = 10 ) @ Measurement ( iterations = 10 , time = 10 ) public class ParallelStreamBenchmark { private static final long N = 10000000L ; @ Benchmark public long sequentialSum ( ) { return Stream.iterate ( 1L , i - > i + 1 ) .limit ( N ) .reduce ( 0L , Long : :sum ) ; } @ Benchmark public long parallelSum ( ) { return Stream.iterate ( 1L , i - > i + 1 ) .limit ( N ) .parallel ( ) .reduce ( 0L , Long : :sum ) ; } @ Benchmark public long rangedReduceSum ( ) { return LongStream.rangeClosed ( 1 , N ) .reduce ( 0 , Long : :sum ) ; } @ Benchmark public long rangedSum ( ) { return LongStream.rangeClosed ( 1 , N ) .sum ( ) ; } @ Benchmark public long parallelRangedReduceSum ( ) { return LongStream.rangeClosed ( 1 , N ) .parallel ( ) .reduce ( 0L , Long : :sum ) ; } @ Benchmark public long parallelRangedSum ( ) { return LongStream.rangeClosed ( 1 , N ) .parallel ( ) .sum ( ) ; } @ TearDown ( Level.Invocation ) public void tearDown ( ) { System.gc ( ) ; } Benchmark Mode Cnt Score Error UnitsParallelStreamBenchmark.parallelRangedReduceSum avgt 10 7.895 ± 0.450 ms/opParallelStreamBenchmark.parallelRangedSum avgt 10 1.124 ± 0.165 ms/opParallelStreamBenchmark.rangedReduceSum avgt 10 6.832 ± 0.165 ms/opParallelStreamBenchmark.rangedSum avgt 10 21.564 ± 0.831 ms/op"
"class Student { private int marks ; private String studentName ; public int getMarks ( ) { return marks ; } public void setMarks ( int marks ) { this.marks = marks ; } public String getStudentName ( ) { return studentName ; } public void setStudentName ( String studentName ) { this.studentName = studentName ; } public Student ( String studentName , int marks ) { this.marks = marks ; this.studentName = studentName ; } } List < Student > studentList = new ArrayList < > ( ) ; studentList.add ( new Student ( `` abc '' , 30 ) ) ; studentList.add ( new Student ( `` Abc '' , 32 ) ) ; studentList.add ( new Student ( `` ABC '' , 35 ) ) ; studentList.add ( new Student ( `` DEF '' , 40 ) ) ; Map < String , Integer > studentMap = studentList.stream ( ) .collect ( Collectors.toMap ( student- > student.getStudentName ( ) .toLowerCase ( ) , student - > student.getMarks ( ) , ( s1 , s2 ) - > s1 , LinkedHashMap : :new ) ) ;"
"Map < String , Map < SomeEnum , Long > > map = ... { `` Foo '' : { SomeEnum.BAR1 : 1 , SomeEnum.BAR2 : 2 , SomeEnum.BAR3 : 3 } , `` two '' : { ... } class SomeClass { String name ; long bar1Value ; long bar2Value ; long bar3Value ; } map.entrySet ( ) .stream ( ) .map ( e - > e.getValue ( ) .entrySet ( ) .stream ( ) .map ( innerEntry - > { long bar1 = 0 ; long bar2 = 0 ; long bar3 = 0 ; if ( innerEntry.getKey ( ) .equals ( SomeEnum.BAR1 ) ) bar1 = innerEntry.getValue ( ) ; if ( innerEntry.getKey ( ) .equals ( SomeEnum.BAR2 ) ) bar2 = innerEntry.getValue ( ) ; if ( innerEntry.getKey ( ) .equals ( SomeEnum.BAR3 ) ) bar3 = innerEntry.getValue ( ) ; return new SomeClass ( e.getKey ( ) , bar1 , bar2 , bar3 ) ; } ) .collect ( toList ( ) ) .collect ( toList ( ) ) ;"
interface ReportInterface { void execute ( ) ; } class Report implements ReportInterface { private final Repository rep ; Report ( Repository ref ) { this.rep = ref ; } public void execute ( ) { //do some logic } } class ReportWithSetter implements ReportInterface { private final Repository rep ; private String release ; ReportWithSetter ( Repository ref ) { rep = ref ; } public void execute ( ) { if ( release == null ) throw IlligalArgumentException ( `` release is not specified '' ) ; //do some logic } public void setRelease ( String release ) { this.release=release ; } } ReportWithSetter rep2 = new ReportWithSetter ( rep ) ; rep.setRelease ( `` R1.1 '' ) ; rep.execute ( ) ;
a > > 1 1st iteration k = 1 2nd iteration k = 0 3rd iteration k = 1
"public class ProduceAndConsume { public interface Producer < T > { T produce ( ) ; } public interface Consumer < V > { void consume ( V data ) ; } public < IntermediateType > ProduceAndConsume ( Producer < ? extends IntermediateType > producer , Consumer < IntermediateType > consumer ) { consumer.consume ( producer.produce ( ) ) ; } ... } public class ProduceAndConsume < IntermediateType > { public interface Producer < T > { T produce ( ) ; } public interface Consumer < V > { void consume ( V data ) ; } private Producer < ? extends IntermediateType > producer ; private Consumer < IntermediateType > consumer ; public ProduceAndConsume ( Producer < ? extends IntermediateType > producer , Consumer < IntermediateType > consumer ) { this.producer = producer ; this.consumer = consumer ; } ... private void doLater ( ) { consumer.consume ( producer.produce ( ) ) ; } }"
"{ `` timestamp '' : `` 2020-05-08T19:48:43.999+0000 '' , `` status '' : 403 , `` error '' : `` Forbidden '' , `` message '' : `` Forbidden '' , `` path '' : `` /admin/cooks '' } package com.tinychiefdelights.model ; import io.swagger.annotations.ApiModel ; import lombok.Data ; import org.springframework.security.core.GrantedAuthority ; import org.springframework.security.core.authority.SimpleGrantedAuthority ; import org.springframework.security.core.userdetails.UserDetails ; import javax.persistence . * ; import javax.validation.constraints.Size ; import java.util.Collection ; import java.util.Collections ; @ ApiModel @ Data @ Entity @ Table ( name = `` pg_user '' , schema = `` public '' ) public class User implements UserDetails { // Roles // public static final String ROLE_ADMIN = `` ADMIN '' ; public static final String ROLE_CUSTOMER = `` CUSTOMER '' ; public static final String ROLE_COOK = `` COOK '' ; // public User ( ) { // Пустой конструктор для Hibernate } // Поля private @ Id @ GeneratedValue Long id ; @ Column ( name = `` login '' ) private String login ; @ Size ( min = 5 , max = 30 ) @ Column ( name = `` password '' ) private String password ; @ Column ( name = `` role '' ) private String role ; @ Column ( name = `` name '' ) private String name ; @ Column ( name = `` last_name '' ) private String lastName ; // Методы // // GrantedAuthority @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return Collections.singletonList ( new SimpleGrantedAuthority ( `` ROLE_ '' + role ) ) ; } // userName == login ( одно и тоже ) @ Override public String getUsername ( ) { return login ; } // Во всех флагах стоит TRUE , так как они не используются @ Override public boolean isAccountNonExpired ( ) { return true ; } @ Override public boolean isAccountNonLocked ( ) { return true ; } @ Override public boolean isCredentialsNonExpired ( ) { return true ; } @ Override public boolean isEnabled ( ) { return true ; } // } package com.tinychiefdelights.model ; import io.swagger.annotations.ApiModel ; import io.swagger.annotations.ApiModelProperty ; import lombok.Data ; import javax.persistence . * ; @ ApiModel @ Data @ Entity @ Table ( name = `` pg_user '' , schema = `` public '' ) public class Admin { public Admin ( ) { // Пустой конструктор для Hibernate } // Поля // name , lastName , login , password берем от класса User через связи ; @ ApiModelProperty private @ Id @ GeneratedValue Long id ; // Relationships // @ ApiModelProperty @ OneToOne @ JoinColumn ( name = `` id '' ) // Join without Admin in User class private User user ; } @ Servicepublic class AdminService extends UserService { // Поля // // Injects in setters private AdminRepository adminRepository ; // Администратор private OrderRepository orderRepository ; // Заказ private CookRepository cookRepository ; // Повар private CustomerRepository customerRepository ; // Заказчик // Getters and Setters // // Делаем inject через сеттеры @ Autowired public void setAdminRepository ( AdminRepository adminRepository ) { this.adminRepository = adminRepository ; } @ Autowired public void setOrderRepository ( OrderRepository orderRepository ) { this.orderRepository = orderRepository ; } @ Autowired public void setCookRepository ( CookRepository cookRepository ) { this.cookRepository = cookRepository ; } @ Autowired public void setCustomerRepository ( CustomerRepository customerRepository ) { this.customerRepository = customerRepository ; } // Методы // // Вывод списка всех заказов public List < Order > getAllOrders ( ) { return orderRepository.findAll ( ) ; } // Вывод информации по конкретному заказу public Order getOrderInfo ( Long id ) { try { return orderRepository.getById ( id ) ; } catch ( NotFoundException e ) { throw new NotFoundException ( id ) ; } } // Вывод Повара по ID public Cook getCook ( Long id ) { try { return cookRepository.getByIdAndUserRole ( id , `` COOK '' ) ; } catch ( NotFoundException e ) { throw new NotFoundException ( id ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( ) ; } } // Изменить карту повара public void editCook ( Long id , User user , float rating , String aboutCook ) { Cook cook = cookRepository.getByIdAndUserRole ( id , `` COOK '' ) ; try { cook.setUser ( user ) ; cook.setRating ( rating ) ; cook.setAboutCook ( aboutCook ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( ) ; } catch ( NotFoundException e ) { throw new NotFoundException ( id ) ; } } // Вывод всех поваров public List < Cook > getAllCooks ( ) { return cookRepository.findByUserRole ( `` COOK '' ) ; } // Удалить Повара public void deleteCook ( Long id ) { Cook cook = cookRepository.getByIdAndUserRole ( id , `` COOK '' ) ; try { cookRepository.delete ( cook ) ; } catch ( Exception e ) { throw new NotFoundException ( id ) ; } } // Вывод всех Заказчиков public List < Customer > getAllCustomers ( ) { return customerRepository.findByUserRole ( `` CUSTOMER '' ) ; } // Вывод Заказчика по ID public Customer getCustomer ( Long id ) { try { return customerRepository.getByIdAndUserRole ( id , `` CUSTOMER '' ) ; } catch ( NotFoundException e ) { throw new NotFoundException ( id ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( ) ; } } } @ Api ( value = `` Работа с Админом '' , tags = { `` Администратор '' } ) @ RestController @ RequestMapping ( `` /admin '' ) @ RolesAllowed ( `` ADMIN '' ) public class AdminController { // Constructor // // Inject через конструктор @ Autowired public AdminController ( AdminRepository adminRepository , AdminService adminService , UserService userService ) { this.adminRepository = adminRepository ; this.adminService = adminService ; this.userService = userService ; } // Поля // All injects into constructor private final AdminRepository adminRepository ; private final AdminService adminService ; private final UserService userService ; // Методы // // GET MAPPING // // Вывод списка всех заказов @ GetMapping ( `` /orders '' ) List < Order > getAllOrders ( ) { return adminService.getAllOrders ( ) ; } // Вывод информации по конкретному заказу по ID @ GetMapping ( `` /order/ { id } '' ) Order getOrderInfo ( @ PathVariable Long id ) { return adminService.getOrderInfo ( id ) ; } // Вывод всех Поваров @ GetMapping ( `` /cooks '' ) List < Cook > getAllCooks ( ) { return adminService.getAllCooks ( ) ; } // Вывод Повара по ID @ GetMapping ( `` /cook/ { id } '' ) Cook getCook ( @ PathVariable Long id ) { return adminService.getCook ( id ) ; } // Вывод всех пользователей @ GetMapping ( `` /customers '' ) List < Customer > getAllCustomer ( ) { return adminService.getAllCustomers ( ) ; } // Вывод Заказчика по ID @ GetMapping ( `` /customer/ { id } '' ) Customer getCustomer ( @ PathVariable Long id ) { return adminService.getCustomer ( id ) ; } // POST MAPPING // // PUT MAPPING // // Изменяем Повара по ID @ PutMapping ( `` /edit/cook/ { id } '' ) void editCook ( @ PathVariable Long id , User user , @ PathVariable float rating , String aboutCook ) { adminService.editCook ( id , user , rating , aboutCook ) ; } // Поменять пароль @ PutMapping ( `` /change/password '' ) void changePassword ( @ RequestParam String login , @ RequestParam String newPass ) { userService.changePassword ( login , newPass ) ; } // DELETE MAPPING // // Удалить конкретного Повара по ID @ DeleteMapping ( `` /delete/cook/ { id } '' ) void removeCook ( @ PathVariable Long id ) { adminService.deleteCook ( id ) ; } } @ Configuration @ EnableWebSecurity @ EnableGlobalMethodSecurity ( jsr250Enabled = true ) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { // Поля // private UserService userService ; private PasswordEncoder passwordEncoder ; // Injects in SETTERS // @ Autowired public void setUserService ( UserService userService ) { this.userService = userService ; } @ Autowired public void setPasswordEncoder ( PasswordEncoder passwordEncoder ) { this.passwordEncoder = passwordEncoder ; } // Methods // // Тут мы переопределяем метод конфигураций @ Override protected void configure ( HttpSecurity http ) throws Exception { http .authorizeRequests ( ) .antMatchers ( `` / '' , `` /home '' ) .permitAll ( ) .anyRequest ( ) .authenticated ( ) .and ( ) .formLogin ( ) .loginPage ( `` /login '' ) .permitAll ( ) .and ( ) .logout ( ) .permitAll ( ) ; } // Тут мы переопределяем для работы с внешней БД @ Override protected void configure ( AuthenticationManagerBuilder auth ) throws Exception { auth.userDetailsService ( userService ) .passwordEncoder ( passwordEncoder ) ; } // Beans // @ Bean public DaoAuthenticationProvider authenticationProvider ( ) { DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider ( ) ; authenticationProvider.setUserDetailsService ( userService ) ; authenticationProvider.setPasswordEncoder ( passwordEncoder ) ; return authenticationProvider ; } @ Bean public static PasswordEncoder getPasswordEncoder ( ) { return new BCryptPasswordEncoder ( 8 ) ; } // Возвращаем сервис пользовател для userDetService @ Bean public UserDetailsService userDetailsService ( ) { return userService ; } }"
Set < String > set = new IgnoreLetterCaseSet ( ) ; set.add ( `` New York '' ) ; set.contains ( `` new york '' ) == true ; set.contains ( `` NEW YORK '' ) == true ; set.each ( it - > print it ) -- - > prints `` New York ''
"public boolean onMousePressed ( MousePressedEvent e ) { Point p = new Point ( Mouse.getX ( ) , Mouse.getY ( ) ) ; if ( ! this.getBounds ( ) .contains ( p ) ) return false ; boolean left = ( e.getButton ( ) == MouseEvent.BUTTON1 ) ; boolean right = ( e.getButton ( ) == MouseEvent.BUTTON3 ) ; boolean hasItems = ( items.size ( ) > 0 ) ; if ( this.getBounds ( ) .contains ( p ) ) { if ( right & & ! selected & & hasItems ) { select ( true ) ; s = new Slot ( new Vector2i ( Mouse.getX ( ) , Mouse.getY ( ) ) ) ; addComponent ( s ) ; s.add ( items.get ( 0 ) ) ; remove ( items.get ( items.size ( ) - 1 ) ) ; } else if ( right & & selected ) { s.add ( items.get ( 0 ) ) ; remove ( items.get ( items.size ( ) - 1 ) ) ; if ( items.size ( ) == 0 ) { setBackgroundImage ( ImageUtil.getImage ( `` /ui/panels/inventory/slot.png '' ) ) ; selected = false ; return true ; } return true ; } else if ( ( left || right ) & & s==null ) { return true ; } else if ( left & & s ! = null ) { //If left clicked , add to the slot from s regardless of if we are selected . add ( s.getItems ( ) .get ( 0 ) ) ; s.remove ( s.getItems ( ) .get ( s.getItems ( ) .size ( ) - 1 ) ) ; if ( s.getItems ( ) .size ( ) == 0 ) { s.setBackgroundImage ( ImageUtil.getImage ( `` /ui/panels/inventory/slot.png '' ) ) ; removeComponent ( s ) ; s = null ; selected = false ; return true ; } } } return false ; } If ( Mouse is clicked ) : if ( the mouse is n't the bounds of the slot ) return false ( alert we have n't handled the event ) if ( we contain the mouse cursor ) : if ( right is pressed and we are n't selected ) : select create a temporary slot at the mouse location remove item from this slot add it to the temporary slot return true else if ( right is pressed and we are selected ) : add item to temporary slot remove item from selected slot return true else if ( we press left or right while temporary slot is null ) : return true ( tell the dispatcher we have handled the event ) //This following else if statement is supposed to add an item to a clicked slot whether that slot is selected or not , but does n't work else if ( left is pressed and temporary slot is n't null ) : add the item to the clicked slot remove it from the temporary one return true return false if none of the above applies"
"{ token_id : “ tok_afgtryuo ” , ip_address : “ 128.123.45.1 “ , device_fingerprint : “ abcghift ” , card_hash : “ hgtyuigash ” , “ bin_number ” : “ 424242 ” , “ last4 ” : “ 4242 ” , “ name ” : “ Seu Jorge ” } public static void main ( String [ ] args ) throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment ( ) ; //This DataStream Would be Converting the Json to a Token Object DataStream < Token > baseStream = env.addSource ( new SocketTextStreamFunction ( `` localhost '' , 9999 , `` \n '' , 1 ) ) .map ( new MapTokens ( ) ) ; // 1- First rule Decline if number of tokens > 5 for this IP in last 10 seconds DataStreamSink < String > response1 = new RuleMaker ( ) .getStreamKeyCount ( baseStream , `` ip '' , Time.seconds ( 10 ) , 5 , `` seconds '' ) .print ( ) ; //2 -Decline if number of tokens > 15 for this IP in last minute DataStreamSink < String > response2 = new RuleMaker ( ) .getStreamKeyCount ( baseStream , `` ip '' , Time.minutes ( 1 ) , 62 , `` minutes '' ) .print ( ) ; //3- Decline if number of tokens > 60 for this IP in last hour DataStreamSink < String > response3 = new RuleMaker ( ) .getStreamKeyCount ( baseStream , `` ip '' , Time.hours ( 1 ) , 60 , `` Hours '' ) .print ( ) ; env.execute ( `` Job2 '' ) ; } public class RuleMaker { public DataStream < String > getStreamKeyCount ( DataStream < Token > stream , String tokenProp , Time time , Integer maxPetitions , String ruleType ) { return stream .flatMap ( new FlatMapFunction < Token , Tuple3 < String , Integer , String > > ( ) { @ Override public void flatMap ( Token token , Collector < Tuple3 < String , Integer , String > > collector ) throws Exception { String tokenSelection = `` '' ; switch ( tokenProp ) { case `` ip '' : tokenSelection = token.getIpAddress ( ) ; break ; case `` device '' : tokenSelection = token.getDeviceFingerprint ( ) ; break ; case `` cardHash '' : tokenSelection = token.getCardHash ( ) ; break ; } collector.collect ( new Tuple3 < > ( tokenSelection , 1 , token.get_tokenId ( ) ) ) ; } } ) .keyBy ( 0 ) .timeWindow ( time ) .process ( new MyProcessWindowFunction ( maxPetitions , ruleType ) ) ; } //Class to process the elements from the window private class MyProcessWindowFunction extends ProcessWindowFunction < Tuple3 < String , Integer , String > , String , Tuple , TimeWindow > { private Integer _maxPetitions ; private String _ruleType ; public MyProcessWindowFunction ( Integer maxPetitions , String ruleType ) { this._maxPetitions = maxPetitions ; this._ruleType = ruleType ; } @ Override public void process ( Tuple tuple , Context context , Iterable < Tuple3 < String , Integer , String > > iterable , Collector < String > out ) throws Exception { Integer counter = 0 ; for ( Tuple3 < String , Integer , String > element : iterable ) { counter += element.f1++ ; if ( counter > _maxPetitions ) { out.collect ( `` El elemeto ha sido declinado : `` + element.f2 + `` Num elements : `` + counter + `` rule type : `` + _ruleType + `` token : `` + element.f0 ) ; counter = 0 ; } } } } }"
"`` hi ? /hello/hi '' key.replaceAll ( `` \\ ? . */ '' , '' ? / '' ) ; `` hi ? /hi ''"
"public class Context { private final Class < ? > clazz ; private final String resource ; private final com.thirdparty.Context context ; public Context ( final String resource , final Class < ? > clazz ) { this.clazz = clazz ; this.resource = resource ; this.context = com.thirdparty.Context.newInstance ( this.clazz ) ; } public String marshall ( final Object element ) { return this.context.marshall ( element ) ; } public Object unmarshall ( final String element ) { return this.context.unmarshall ( element ) ; } } Context context = new Context ( `` request.xsd '' , Request.class ) ; // MarshallRequest request = new Request ( ) ; String xml = context.marshall ( request ) ; // UnmarshallRequest roundTrip = Request.cast ( context.unmarshall ( xml ) ) ; public class Context < T > { private final Class < T > clazz ; private final String resource ; private final com.thirdparty.Context context ; public Context ( final String resource ) { this.clazz = initHere ( ) ; // < == HOW ? ? this.resource = resource ; this.context = com.thirdparty.Context.newInstance ( this.clazz ) ; } public String marshall ( final T element ) { return this.context.marshall ( element ) ; } public T unmarshall ( final String element ) { return this.clazz.cast ( this.context.unmarshall ( element ) ) ; } } Context < Request > context = new Context < > ( `` request.xsd '' ) ; // MarshallRequest request = new Request ( ) ; String xml = context.marshall ( request ) ; // UnmarshallRequest roundTrip = context.unmarshall ( xml ) ; this.clazz = ( Class < T > ) ( ( ParameterizedType ) getClass ( ) .getGenericSuperclass ( ) ) .getActualTypeArguments ( ) [ 0 ] ;"
"public static void main ( String [ ] args ) { List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < 10000 ; i++ ) { int count = 0 ; Set < Integer > set = new HashSet < > ( ) ; while ( set.add ( ThreadLocalRandom.current ( ) .nextInt ( 0 , 365 ) ) ) { count++ ; } list.add ( count ) ; } double avg = list.stream ( ) .mapToInt ( Integer : :intValue ) .average ( ) .getAsDouble ( ) ; System.out.println ( avg ) ; }"
@ RunWith ( Suite.class ) @ SuiteClasses ( { com.example.test.MyTestCase.class } ) public class MyTestSuite extends BaseTestSuite { @ ClassRule public static FrameworkResource resource = new FrameworkResource ( ) ; @ BeforeClass public static void setup ( ) { loadProperties ( `` props/suite.properties '' ) } }
"post_badge_format = You 've earned the `` { 0 } '' badge for { 1 } . String messageContent = MessageFormat.format ( messageType , paramValues ) ; You 've earned the `` XXX '' badge for XXX . You 've earned the `` { 0 } '' badge for { 1 } ."
/** * The year being represented . */private final int year ;
private static boolean equals ( Object ... objects ) { Object obj = objects [ 0 ] ; boolean flag = false ; for ( Object object : objects ) { if ( object.equals ( obj ) ) { flag = true ; } else { flag = false ; break ; } } return flag ; }
"public class Generic { public static void main ( String [ ] args ) { Character [ ] arr3= { ' a ' , ' b ' , ' c ' , 'd ' , ' e ' , ' f ' , ' g ' } ; Integer a=97 ; System.out.println ( Non_genre.genMethod ( a , arr3 ) ) ; } } class Non_genre { static < T > boolean genMethod ( T x , T [ ] y ) { int flag=0 ; for ( T r : y ) { if ( r==x ) flag++ ; } if ( flag==0 ) return false ; return true ; } } public class Hello { public static void main ( String [ ] args ) { Character arr=65 ; Integer a= ' A ' ; if ( arr==a ) //Compilation Error , shows Incompatible types Integer and Character System.out.println ( `` True '' ) ; } }"
"public class FooService { private Client client ; public Foo get ( Long id ) { return client.get ( id , Foo.class ) ; } public List < Foo > query ( ) { return Arrays.asList ( client.get ( Foo [ ] .class ) ) ; } } public abstract class BaseService < T , I > { private Client client ; private Class < T > type ; public BaseService ( Class < T > type ) { this.type = type ; } public T get ( I id ) { return client.get ( id , type ) ; } public List < T > query ( ) { return Arrays.asList ( client.get ( /* What to pass here ? */ ) ) ; }"
public abstract class Orbital { Body host ; protected double avgOrbitalRadius ; protected double orbitalPeriod ; public double getOrbitalRadius ( ) { return this.avgOrbitalRadius ; } public double getOrbitalPeriod ( ) { return this.orbitalPeriod ; } } public abstract class Orbitable { List < Body > satellites = new ArrayList < > ( ) ; public void addSatellite ( Body sat ) { satellites.add ( sat ) ; } public boolean hasSatellite ( Body sat ) { for ( Body body : satellites ) { if ( sat.equals ( body ) ) return true ; } return false ; } public boolean hasSatellite ( String satName ) { for ( Body body : satellites ) { if ( satName.equals ( body.getName ( ) ) ) return true ; } return false ; } public Body getSatellite ( String satName ) { for ( Body body : satellites ) { if ( satName.equals ( body.getName ( ) ) ) return body ; } return null ; } }
"nCount = 0 , bEnd = false nCount = 100 , bEnd = true main thread done.thread Reader running ... thread Writer running ... SharedData nCount = 0 , bEnd = falsethread Writer bEnd = truethread Reader nCount = 0 , bEnd = truethread Reader nCount = 100 , bEnd = truethread Reader nCount = 100 , bEnd = truethread Reader done . public class HappensBeforeWithVolatile { public static void main ( String [ ] args ) { Thread threadWriter = new Thread ( new Writer ( ) ) ; Thread threadReader = new Thread ( new Reader ( ) ) ; threadWriter.start ( ) ; threadReader.start ( ) ; System.out.println ( `` main thread done . `` ) ; } } class Writer implements Runnable { @ Override public void run ( ) { System.out.println ( `` thread Writer running ... '' ) ; SharedData.nCount = 100 ; // System.out.println ( `` thread Writer nCount = 100 '' ) ; SharedData.bEnd = true ; System.out.println ( `` thread Writer bEnd = true '' ) ; } } class Reader implements Runnable { @ Override public void run ( ) { System.out.println ( `` thread Reader running ... '' ) ; System.out.println ( `` thread Reader nCount = `` + SharedData.nCount + `` , bEnd = `` + SharedData.bEnd ) ; System.out.println ( `` thread Reader nCount = `` + SharedData.nCount + `` , bEnd = `` + SharedData.bEnd ) ; if ( SharedData.nCount == 0 & & SharedData.bEnd ) { System.out.println ( `` thread Reader CODE REORDER ! ! ! `` ) ; } System.out.println ( `` thread Reader nCount = `` + SharedData.nCount + `` , bEnd = `` + SharedData.bEnd ) ; System.out.println ( `` thread Reader done . `` ) ; } } class SharedData { volatile public static boolean bEnd = false ; volatile public static int nCount = 0 ; static { System.out.println ( `` SharedData nCount = `` + nCount + `` , bEnd = `` + bEnd ) ; } }"
The tournament begins ! Write `` jump '' to jump ; otherwise you quit : jumpRound 1//do somethingWrite `` jump '' to jump ; otherwise you quit : jump ( continues ) String command = `` placeholder '' ; while ( ! command.equals ( `` quit '' ) ) { System.out.println ( `` Write \ '' jump\ '' to jump ; otherwise you quit : `` ) ; command = input.nextLine ( ) ; System.out.println ( `` \nRound 1 '' ) ; }
public static void main ( String [ ] args ) { List < Integer > integers = new ArrayList < Integer > ( ) ; integers.add ( 1 ) ; addToList ( integers ) ; System.out.println ( integers ) ; } public static void addToList ( List list0 ) { list0.add ( `` blabl '' ) ; }
public class Container { int a ; volatile boolean b ; public static void main ( String [ ] args ) { Container container = new Container ( ) ; Thread t1 = new Thread ( ) { @ Override public void run ( ) { for ( ; ; ) { container.a = 409 ; container.b ^= container.b ; } } } ; Thread t2 = new Thread ( ) { @ Override public void run ( ) { for ( ; ; ) { container.a = 102 ; container.b ^= container.b ; } } } ; Thread t3 = new Thread ( ) { @ Override public void run ( ) { try { Thread.sleep ( 100 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } for ( ; ; ) { if ( container.a ! = 409 & & container.a ! = 102 ) System.out.println ( container.a ) ; } } } ; t1.start ( ) ; t2.start ( ) ; t3.start ( ) ; } }
"public class TestFastThrow { public static void main ( String [ ] args ) { int count = 0 ; int exceptionStackTraceSize = 0 ; Exception exception = null ; do { try { throwsNPE ( 1 ) ; } catch ( Exception e ) { exception = e ; if ( exception.getStackTrace ( ) .length ! = 0 ) { exceptionStackTraceSize = exception.getStackTrace ( ) .length ; count++ ; } } } while ( exception.getStackTrace ( ) .length ! = 0 ) ; System.out.println ( `` Iterations to fastThrow : '' + count + `` , StackTraceSize : '' + exceptionStackTraceSize ) ; } static void throwsNPE ( int callStackLength ) { throwsNPE ( callStackLength , 0 ) ; } static void throwsNPE ( int callStackLength , int count ) { if ( count == callStackLength ) { ( ( Object ) null ) .getClass ( ) ; } else { throwsNPE ( callStackLength , count + 1 ) ; } } } Iterations to fastThrow :5517 , StackTraceSize :4Iterations to fastThrow :2825 , StackTraceSize :5Iterations to fastThrow :471033 , StackTraceSize :6Iterations to fastThrow :1731 , StackTraceSize :7Iterations to fastThrow :157094 , StackTraceSize :10 ... Iterations to fastThrow :64587 , StackTraceSize :20Iterations to fastThrow :578 , StackTraceSize :29 Java HotSpot ( TM ) 64-Bit Server VM ( 11.0.5+10-LTS ) for bsd-amd64 JRE ( 11.0.5+10-LTS ) -XX : +UnlockDiagnosticVMOptions -XX : +TraceClassLoading -XX : +LogCompilation -XX : +PrintAssembly | StackSize | 10 | 11 || -- -- -- -- -- -- -- -| -- -- -- -| -- -- -- -|| Queued for C1 | 1.099 | 1.012 || C1 | 1.318 | 1.162 || Queued for C2 | 1.446 | 1.192 || C2 | 1.495 | 1.325 |"
"public class Order { private String orderNumber ; private String customerNumber ; private String customerGroup ; private Date deliveryDate ; private double orderValue ; private double orderQty ; } public class OrderTotal { private String customerGroup ; private String customerNumber ; private double totalValue ; private double totalQty ; } public Collection < OrderTotal > getTotals ( List < Order > orders ) { ///map created for quick access to the order total for each order Map < OrderTotal , OrderTotal > map = new HashMap < > ( ) ; ///loop through all orders adding to the relevaent order total per iteration for ( Order order : orders ) { OrderTotal orderTotal = createFromOrder ( order ) ; { ///if the order total already exists in the map use that one , otherwise add it to the map . OrderTotal temp = map.get ( orderTotal ) ; if ( temp == null ) { map.put ( orderTotal , orderTotal ) ; } else { orderTotal = temp ; } } ///add the values to the total aggregate ( orderTotal , order ) ; } return map.values ( ) ; } private OrderTotal createFromOrder ( Order order ) { OrderTotal orderTotal = new OrderTotal ( ) ; orderTotal.setCustomerGroup ( order.getCustomerGroup ( ) ) ; orderTotal.setCustomerNumber ( order.getCustomerNumber ( ) ) ; return orderTotal ; } private void aggregate ( OrderTotal orderTotal , Order order ) { orderTotal.setTotalQty ( orderTotal.getTotalQty ( ) + order.getOrderQty ( ) ) ; orderTotal.setTotalValue ( orderTotal.getTotalValue ( ) + order.getOrderValue ( ) ) ; }"
public class Foo { private int n ; public Foo ( int n ) { this.n = n ; } public void check ( ) { if ( n ! = n ) throw new AssertionError ( `` huh ? `` ) ; } }
"java -versionPicked up _JAVA_OPTIONS : -Duser.country=US -Duser.language=en -Dfile.encoding=UTF-8openjdk version `` 11 '' 2018-09-25OpenJDK Runtime Environment 18.9 ( build 11+28 ) OpenJDK 64-Bit Server VM 18.9 ( build 11+28 , mixed mode ) public class PromotionTargetFileHandlerMain { public static final String uploadingDir = String.join ( File.separator , System.getProperty ( `` user.dir '' ) , `` targets_csv '' ) ; private static final File destDir = new File ( uploadingDir ) ; public static void main ( String [ ] args ) { createFileDestination ( `` target.csv '' ) ; } public static void createFileDestination ( String filename ) { if ( ! destDir.exists ( ) ) { try { Files.createDirectory ( Path.of ( uploadingDir ) ) ; } catch ( FileAlreadyExistsException e ) { log.trace ( `` File dir already exists : { } '' , uploadingDir ) ; } catch ( IOException e ) { log.error ( `` Can not create temp file dir { } '' , uploadingDir , e ) ; throw new RuntimeException ( e ) ; } } String saveLocation = String.join ( File.separator , uploadingDir , filename ) ; File saveFile = new File ( saveLocation ) ; if ( saveFile.exists ( ) ) saveFile.delete ( ) ; try { saveFile.createNewFile ( ) ; // < -- -- -- -- -- -- -- - here IOException } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }"
"# ! /bin/shrunsql ( ) { i= '' $ 1 '' end= $ ( ( SECONDS+360 ) ) SECONDS=0 while ( ( SECONDS < end ) ) ; do echo `` INSERT into table_ $ i ( col1 ) values ( CURRENT_TIMESTAMP ) ; '' | sqlplus username/password sleep 1 done } for i in $ ( seq 1 10 ) ; do echo `` DROP TABLE table_ $ i ; '' | sqlplus username/password echo `` CREATE TABLE table_ $ i ( col1 TIMESTAMP WITH TIME ZONE ) ; '' | sqlplus username/password runsql $ i & donewait sshconnection.execute ( `` nohup su - oracle -c './shortoracle.bash ' '' ,2000 ) ;"
System.out.print ( `` hello '' ) ; System.out.print ( name ) ; System.out.print ( `` \n '' ) ; System.out.print ( `` hello '' +name+ '' \n ) ;
"AssignedSelectMapper ( AssignedOpDtoMapper assignedOpDtoMapper , AssignedOrderDtoMapper assignedOrderDtoMapper// many more constructor parameters ) { this.assignedOptionCodeDtoMapper = assignedOptionCodeDtoMapper ; this.assignedOrderCriteriaDtoMapper = assignedOrderCriteriaDtoMapper ; // all settings } public List < AssignedSelect > assignSelectFrom ( SelectDto selectDto ) { Objects.requireNonNull ( selectionDto , `` selectionDto can not be NULL '' ) ; List < AssignedSelect > assignedSelects= new ArrayList < > ( ) ; assignedSelects.addAll ( this.mapOps ( selectionDto.getOps ( ) ) ) ; assignedSelects.addAll ( this.mapOra ( selectionDto.getOra ( ) ) ) ; assignedSelects.addAll ( this.mapOrs ( selectionDto.getOrs ( ) ) ) ; assignedSelects.addAll ( this.mapSs ( selectionDto.getSs ( ) ) ) ; assignedSelects.addAll ( this.mapDels ( selectionDto.getDels ( ) ) ) ; assignedSelects.addAll ( this.mapMs ( selectionDto.getMs ( ) ) ) ; assignedSelects.addAll ( this.mapBrs ( selectionDto.getBrs ( ) ) ) ; assignedSelects.addAll ( this.mapEqs ( selectionDto.getEqs ( ) ) ) ; assignedSelects.addAll ( this.mapPaints ( selectionDto.getPaints ( ) ) ) ; assignedSelects.addAll ( this.mapBas ( selectionDto.getBas ( ) ) ) ; // more ... // and more ... return assignedSelects ; } private List < AssignedSelectionCriteria > mapOps ( List < OptionCodeDto > optionCodeDtos ) { return this.assignedOpDtoMapper.mapCriterias ( opDtos ) ; } // this is my public function for mapping.public void assignSelectionTo ( SelectionDto selectionDto , List < AssignedSelectionCriteria > assignedSelectionCriterias ) { setOptionCodes ( selectionDto , copyCriterias ) ; setOrderCriteria ( selectionDto , copyCriterias ) ; // many more } private void setOptionCodes ( SelectionDto selectionDto , List < AssignedSelectionCriteria > assignedSelectionCriterias ) { // this is where I have trouble , each mapping returns different Dto 's List < OptionCodeDto > optionCodeDtos = this.assignedOptionCodeDtoMapper.mapAssignedCriterias ( assignedSelectionCriterias ; selectionDto.setOptionCodes ( optionCodeDtos ) ; }"
"package one ; public class A { protected int first ; protected static int second ; } package two ; import one.A ; public class B extends A { public void someMethod ( ) { this.first = 5 ; //works as expected B.second = 6 ; //works A a = new A ( ) ; // a.first = 7 ; does not compile //works just fine , but why ? a.second = 8 ; A.second = 9 ; } }"
private void deleteFromDir ( String filename ) { String path = `` ./test/pacientes/ '' + filename + `` .tds '' ; File f = new File ( path ) ; System.out.println ( `` Abs path `` + f.getAbsolutePath ( ) ) ; System.out.println ( `` Exist `` + f.exists ( ) ) ; System.out.println ( `` Filename `` + f.getName ( ) ) ; System.out.println ( `` Delete `` + f.delete ( ) ) ; }
"Widget getMatchingWidget ( WidgetCriteria c ) throws Throwable try { Widget w = getMatchingWidget ( criteria ) ; processWidget ( w ) ; } catch ( Throwable t ) { handleError ( t ) ; } CompletableFuture < Widget > getMatchingWidget ( WidgetCriteria c ) CompletableFuture < Widget > f = getMatchingWidget ( criteria ) ; f.thenAccept ( this : :processWidget ) f.exceptionally ( t - > { handleError ( t ) ; return null ; } ) getMatchingWidget ( criteria ) .whenComplete ( ( t , w ) - > { if ( t ! = null ) { handleError ( t ) ; } else { processWidget ( t ) ; } } ) ; Stream < Widget > getMatchingWidgets ( WidgetCriteria c ) CompletableFuture < Stream < Widget > > getMatchingWidgets ( WidgetCriteria c ) void forEachMatchingWidget ( WidgetCriteria c , Consumer < Widget > widgetProcessor )"
"@ Override public Spliterator < P_OUT > trySplit ( ) { if ( isParallel & & buffer == null & & ! finished ) { init ( ) ; Spliterator < P_IN > split = spliterator.trySplit ( ) ; return ( split == null ) ? null : wrap ( split ) ; } else return null ; } Arrays.asList ( 1,2,3,4,5 ) .stream ( ) .filter ( x - > x ! = 1 ) .spliterator ( ) ; Spliterator < T > sp = stream.spliterator ( ) ; Spliterator < T > prefixSplit = sp.trySplit ( ) ; Arrays.asList ( 1,2,3,4 ) .stream ( ) .sorted ( ) .spliterator ( ) .trySplit ( ) ;"
"test , asd,123 , testtest , test , test public static boolean stringHasOneValue ( String string ) { String value = null ; for ( split : string.split ( `` , '' ) ) { if ( value == null ) { value = split ; } else { if ( ! value.equals ( split ) ) return false ; } } return true ; }"
Object o =new Object ( ) ;
Files.list ( somePath ) .map ( Path : :toRealPath ) .forEach ( System.out : :println ) R apply ( T t ) ; path - > path.toRealPath ( )
private Foo createAnonymousFoo ( final Bar bar ) { return new Foo ( ) { private Bar bar = SomeUnknownScopeQualifier.bar ; public Bar getBar ( ) { return bar ; } public void doSomethingThatReassignsBar ( ) { bar = bar.createSomeDerivedInstanceOfBar ( ) ; } } ; }
"List < String > stringList = new ArrayList < > ( ) ; stringList.add ( `` 2 '' ) ; stringList.add ( `` 4 '' ) ; stringList.add ( `` 6 '' ) ; // String array ( `` 2 '' , '' 4 '' , `` 6 '' averageValue = stringList.stream ( ) .mapToInt ( s - > Integer.valueOf ( s ) ) .average ( ) .getAsDouble ( ) ; List < Integer > IntegerList = new ArrayList < > ( ) ; IntegerList.add ( 2 ) ; IntegerList.add ( 4 ) ; IntegerList.add ( 6 ) ; averageValue = IntegerList.stream ( ) .average ( ) .getAsDouble ( ) ;"
int x = 1 ; x = 2 ; x = 3 ;
public interface UserDao { public User getById ( int id ) ; public Collection < User > getAll ( ) ; public boolean delete ( int userId ) ; public boolean update ( User u ) ; }
"@ OpenApi ( summary = `` '' , description = `` Lists all customers '' , path = `` customers '' , queryParams = // ... ... ... .. // ... ... ... .. // etc ) override fun handle ( context : Context ) { // body of the REST handler } @ GetCustomersDocoverride fun handle ( context : Context ) { // body of the REST handler }"
"The sorted array is [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] import java.util.Scanner ; import java.util.Arrays ; public class SortArray { public static void main ( String [ ] args ) { Scanner kbd = new Scanner ( System.in ) ; int [ ] numbers = new int [ 8 ] ; for ( int i = 0 ; i < numbers.length ; i++ ) { System.out.println ( `` Enter the number for index `` + i ) ; int number = kbd.nextInt ( ) ; } for ( int i = 0 ; i < numbers.length ; i++ ) for ( int j = 1 ; j < numbers.length ; j++ ) { if ( numbers [ i ] > numbers [ j ] ) { int temp = numbers [ i ] ; numbers [ i ] = numbers [ j ] ; numbers [ j ] = temp ; } } System.out.println ( `` The sorted array is `` + Arrays.toString ( numbers ) ) ; } }"
Set < Integer > mySet = Arrays.stream ( arr1 ) .map ( ele - > new Integer ( ele - 2 ) ) .collect ( Collectors.toSet ( ) ) ;
class A { Date d = new Date ( ) ; public A ( ) { printDate ( ) ; } void printDate ( ) { System.out.println ( `` parent '' ) ; System.out.println ( d ) ; } } class B extends A { Date d = new Date ( ) ; public B ( ) { super ( ) ; } @ Override void printDate ( ) { System.out.println ( `` child '' ) ; System.out.println ( d ) ; } } public class Test { public static void main ( String [ ] args ) { new B ( ) ; } }
"TimeZone.setDefault ( TimeZone.getTimeZone ( `` BET '' ) ) ; Locale.setDefault ( Locale.ENGLISH ) ; SimpleDateFormat sdf1 = new SimpleDateFormat ( `` yyyy-MM-dd HH : mm : ss.SSS '' ) ; SimpleDateFormat sdf2 = new SimpleDateFormat ( `` yyyy-MM-dd HH : mm : ss.SSS zzzz '' ) ; Date d0 = sdf1.parse ( `` 2037-10-17 23:00:00.000 '' ) ; Date d1 = sdf1.parse ( `` 2037-10-17 23:00:00.001 '' ) ; Date d2 = sdf1.parse ( `` 2037-10-17 23:59:59.999 '' ) ; Date d3 = sdf1.parse ( `` 2037-10-18 00:00:00.000 '' ) ; Date d4 = sdf1.parse ( `` 2037-10-18 00:00:00.001 '' ) ; Date d5 = sdf1.parse ( `` 2037-10-18 00:59:59.999 '' ) ; Date d6 = sdf1.parse ( `` 2037-10-18 01:00:00.000 '' ) ; Date d7 = sdf1.parse ( `` 2037-10-18 01:00:00.001 '' ) ; Date d8 = sdf1.parse ( `` 2037-10-18 01:59:59.999 '' ) ; Date d9 = sdf1.parse ( `` 2037-10-18 02:00:00.000 '' ) ; System.out.println ( sdf2.format ( d0 ) + `` ( `` + d0.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d0 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d0.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d1 ) + `` ( `` + d1.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d1 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d1.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d2 ) + `` ( `` + d2.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d2 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d2.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d3 ) + `` ( `` + d3.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d3 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d3.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d4 ) + `` ( `` + d4.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d4 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d4.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d5 ) + `` ( `` + d5.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d5 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d5.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d6 ) + `` ( `` + d6.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d6 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d6.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d7 ) + `` ( `` + d7.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d7 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d7.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d8 ) + `` ( `` + d8.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d8 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d8.getTime ( ) ) ) ; System.out.println ( sdf2.format ( d9 ) + `` ( `` + d9.getTime ( ) + `` ) , dst : `` + TimeZone.getDefault ( ) .inDaylightTime ( d9 ) + `` , offset : `` + TimeZone.getDefault ( ) .getOffset ( d9.getTime ( ) ) ) ; 2037-10-17 23:00:00.000 Brasilia Time ( 2139444000000 ) , dst : false , offset : -108000002037-10-17 23:00:00.001 Brasilia Time ( 2139444000001 ) , dst : false , offset : -108000002037-10-17 23:59:59.999 Brasilia Time ( 2139447599999 ) , dst : false , offset : -108000002037-10-18 01:00:00.000 Brasilia Summer Time ( 2139447600000 ) , dst : true , offset : -72000002037-10-18 00:00:00.001 Brasilia Time ( 2139447600001 ) , dst : true , offset : -108000002037-10-18 00:59:59.999 Brasilia Time ( 2139451199999 ) , dst : true , offset : -108000002037-10-18 01:00:00.000 Brasilia Summer Time ( 2139447600000 ) , dst : true , offset : -72000002037-10-18 00:00:00.001 Brasilia Time ( 2139447600001 ) , dst : true , offset : -108000002037-10-18 00:59:59.999 Brasilia Time ( 2139451199999 ) , dst : true , offset : -108000002037-10-18 02:00:00.000 Brasilia Summer Time ( 2139451200000 ) , dst : true , offset : -7200000"
int [ ] array = new int [ ] [ ] { { 1 } } [ 0 ] ;
public static void main ( String [ ] args ) throws IOException { throw new IOException ( ) ; //OK }
public class WeirdCode { public static int fooField = 42 ; public WeirdCode getFoo ( ) { return null ; } public static void main ( String args [ ] ) { WeirdCode foo = new WeirdCode ( ) ; System.out.println ( foo.getFoo ( ) .fooField ) ; } }
private static Object bootstrapDone = new Object ( ) ; public static void signalEsBoostrapCompleted ( ) { synchronized ( bootstrapDone ) { bootstrapDone.notifyAll ( ) ; } } public static void waitEsBoostrapCompleted ( ) throws InterruptedException { synchronized ( bootstrapDone ) { bootstrapDone.wait ( 20000 ) ; } }
"< activity android : name= '' .ImageEditorActivity '' android : configChanges= '' keyboard|keyboardHidden|screenLayout|screenSize|orientation '' android : label= '' @ string/title_activity_image_editor '' android : parentActivityName= '' .MainActivity '' android : windowSoftInputMode= '' adjustResize|stateHidden '' android : theme= '' @ style/FullscreenTheme '' > < meta-data android : name= '' android.support.PARENT_ACTIVITY '' android : value= '' myApp.MainActivity '' / > < /activity > < FrameLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' # 0099cc '' tools : context= '' .ImageEditorActivity '' android : id= '' @ +id/fullscreen_content '' > < ScrollView android : layout_height= '' match_parent '' android : layout_width= '' match_parent '' android : layout_marginTop= '' 50dp '' android : isScrollContainer= '' true '' > < RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < ImageView android : id= '' @ +id/edit_image '' android : layout_width= '' fill_parent '' android : layout_height= '' fill_parent '' android : adjustViewBounds= '' true '' > < /ImageView > < EditText android : id= '' @ +id/image_comment '' android : layout_width= '' match_parent '' android : layout_height= '' 50dp '' android : layout_marginTop= '' 8dp '' android : paddingLeft= '' 8dp '' android : shadowDx= '' 0 '' android : shadowDy= '' 0 '' android : shadowRadius= '' 2 '' android : hint= '' notes '' android : text= '' '' android : textColor= '' @ android : color/black '' android : background= '' @ android : color/white '' android : layout_alignParentBottom= '' true '' android : visibility= '' invisible '' app : layout_constraintStart_toEndOf= '' parent '' app : layout_constraintTop_toBottomOf= '' parent '' / > < Button android : id= '' @ +id/image_comment_save_button '' android : layout_width= '' 100dp '' android : layout_height= '' 45dp '' android : layout_marginBottom= '' 2dp '' android : layout_alignParentBottom= '' true '' android : layout_alignParentRight= '' true '' android : text= '' Save '' android : visibility= '' invisible '' app : layout_constraintStart_toEndOf= '' parent '' app : layout_constraintTop_toBottomOf= '' parent '' / > < /RelativeLayout > < /ScrollView > < Button android : id= '' @ +id/note_button '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : text= '' @ string/add_note '' app : layout_constraintBottom_toTopOf= '' parent '' > < /Button > noteButton.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { writeNotes ( ) ; } } ) ; private void writeNotes ( ) { InputMethodManager methodMan = ( InputMethodManager ) getSystemService ( Context.INPUT_METHOD_SERVICE ) ; if ( noteBox.getVisibility ( ) == View.VISIBLE ) { String text = noteBox.getText ( ) .toString ( ) ; if ( 0 < text.trim ( ) .length ( ) ) { Bitmap image = ( ( BitmapDrawable ) imageView.getDrawable ( ) ) .getBitmap ( ) ; writeOnImage ( image , text ) ; imageView.setImageBitmap ( image ) ; saveImage ( image , lastTaken ) ; exifData.put ( ExifInterface.TAG_USER_COMMENT , text ) ; } noteBox.setVisibility ( View.INVISIBLE ) ; noteSaveButton.setVisibility ( View.INVISIBLE ) ; methodMan.hideSoftInputFromWindow ( noteBox.getWindowToken ( ) , 0 ) ; } else { noteBox.setText ( `` '' ) ; noteBox.setVisibility ( View.VISIBLE ) ; noteSaveButton.setVisibility ( View.VISIBLE ) ; noteBox.requestFocus ( ) ; methodMan.toggleSoftInput ( InputMethodManager.SHOW_FORCED , 0 ) ; } }"
"public class MyKeyListenerThread extends Thread implements MyKeyListener { /** * This is the overriden keyPressedEvent method , used * to respond to [ @ link MyKeyPressed ] events and pause or resume * [ @ link Player ] threads according to the source details . * * @ param evt The event the listener will respond to */ @ Overridepublic void keyPressedEvent ( MyKeyEvent evt ) { Object o = evt.getSource ( ) ; //checks source to see whether to pause or resume game if ( o.equals ( `` p '' ) ) { for ( Player player : CardGame.players ) { player.setPaused ( true ) ; Logger.addToOutput ( player.getPlayerName ( ) , `` The game has been paused\n '' ) ; } System.out.println ( `` The game has been paused '' ) ; } else if ( o.equals ( `` r '' ) ) { for ( Player player : CardGame.players ) { player.setPaused ( false ) ; Logger.addToOutput ( player.getPlayerName ( ) , `` The game has been resumed\n '' ) ; } System.out.println ( `` The game has been resumed '' ) ; } } /** * This is the overidden run method , which will * run infinitely in the background . */ @ Overridepublic void run ( ) { for ( ; ; ) { } } } System.out.println ( `` The game has been paused '' ) ; } else if ( o.equals ( `` r '' ) ) { for ( Player player : CardGame.players ) { player.setPaused ( false ) ; Logger.addToOutput ( player.getPlayerName ( ) , `` The game has been resumed\n '' ) ; } System.out.println ( `` The game has been resumed '' ) ; } } public class Player implements Runnable { LinkedList < Card > hand ; String playerName ; int strategyChosen ; int playerNumber ; private boolean running = true ; private boolean paused = false ; public void setPaused ( boolean paused ) { this.paused = paused ; } public synchronized void run ( ) { while ( running ) { if ( ! paused ) { playGame ( ) ; } } } MyKeyListenerThread elt = new MyKeyListenerThread ( ) ; CardGame.addMyKeyListener ( elt ) ; elt.start ( ) ; for ( int i = 0 ; i < players.length ; i++ ) { new Thread ( players [ i ] ) .start ( ) ; } while ( running ) { String input = reader.next ( ) ; CardGame.pressed = true ; fireMyKeyEvent ( new MyKeyEvent ( input ) ) ; } private static void addMyKeyListener ( MyKeyListener t ) { MyKeyListener [ ] tmp = new MyKeyListener [ listeners.length+1 ] ; for ( int i = 0 ; i < listeners.length ; i++ ) tmp [ i ] = listeners [ i ] ; tmp [ listeners.length ] = t ; listeners = tmp ; } private static void fireMyKeyEvent ( MyKeyEvent evt ) { for ( MyKeyListener keyListener : listeners ) { keyListener.keyPressedEvent ( evt ) ; } }"
"interface Foo { void testFoo ( ) ; } interface Bar { void testBar ( ) ; } interface Car < A > { A testCar ( ) ; } interface FooBar extends Foo , Bar { } interface FooCar < A > extends Foo , Car < A > { } public < T extends Foo & Bar > T implicitFooBar ( ) { return null ; } public < X , T extends Foo & Car < X > > T implicitFooCar ( ) { return null ; } // implicit composition of Foo and Bar , GOODFooBar implicitFooBar = implicitFooBar ( ) ; implicitFooBar.testFoo ( ) ; implicitFooBar.testBar ( ) ; // implicit composition of Foo and Car < X > , FAIL ! //Compiler says `` The method implicitFooCar ( ) in the type GenericsTest is not applicable for the arguments ( ) '' FooCar < Number > implicitFooCar = implicitFooCar ( ) ; //compile error on method callimplicitFooCar.testFoo ( ) ; Number n2 = implicitFooCar.testCar ( ) ; public < X > Car < X > justCar ( ) { return null ; } public < X , T extends Car < X > > T implicitCar ( ) { return null ; } //variant ... GOOD ... but why ? implicitFooCar = this. < Number , FooCar < Number > > implicitFooCar ( ) ; public class GenericsTest { public static interface Foo { void testFoo ( ) ; } public static interface Bar { void testBar ( ) ; } public static interface Car < A > { A testCar ( ) ; } public static interface FooBar extends Foo , Bar { } public static interface FooCar < A > extends Foo , Car < A > { } public < X > Car < X > justCar ( ) { return null ; } public FooBar explicitFooBar ( ) { return null ; } public < T extends Foo & Bar > T implicitFooBar ( ) { return null ; } public < X > FooCar < X > explicitFooCar ( ) { return null ; } public < X , T extends Foo & Car < X > > T implicitFooCar ( ) { return null ; } public < X , T extends Car < X > > T implicitCar ( ) { return null ; } public void test ( ) { justCar ( ) .testCar ( ) ; // explicit composition of Foo and Bar , GOOD FooBar explicitFooBar = explicitFooBar ( ) ; explicitFooBar.testFoo ( ) ; explicitFooBar.testBar ( ) ; // explicit composition of Foo and Car < X > , GOOD FooCar < Number > explicitFooCar = explicitFooCar ( ) ; explicitFooCar.testFoo ( ) ; Number n1 = explicitFooCar.testCar ( ) ; // implicit composition of Foo and Bar , GOOD FooBar implicitFooBar = implicitFooBar ( ) ; implicitFooBar.testFoo ( ) ; implicitFooBar.testBar ( ) ; // implicit composition of Foo and Car < X > , FAIL ! //Compiler says `` The method implicitFooCar ( ) in the type GenericsTest is not applicable for the arguments ( ) '' FooCar < Number > implicitFooCar = implicitFooCar ( ) ; //compile error on method call implicitFooCar.testFoo ( ) ; Number n2 = implicitFooCar.testCar ( ) ; //variant ... GOOD ... but why ? implicitFooCar = this. < Number , FooCar < Number > > implicitFooCar ( ) ; // implicit ( no composition ) Car < X > , GOOD Car < Number > implicitCar = implicitCar ( ) ; Number n3 = implicitCar.testCar ( ) ; } }"
"public class Block { List < Block > neighBours ; public Block ( List < Block > neighBours ) { this.neighBours = neighBours ; } public Map < Block , Integer > getStepsAway ( ) { Map < Block , Integer > path = new HashMap < Block , Integer > ( ) ; getPaths ( path , 0 , 100 ) ; return path ; } public void getPaths ( Map < Block , Integer > path , int pathNumber , int maxPathNumber ) { if ( pathNumber < = maxPathNumber ) { for ( Block block : neighBours ) { Integer thePathNumber = path.get ( block ) ; if ( thePathNumber ! = null ) { if ( pathNumber < thePathNumber ) { path.put ( block , pathNumber ) ; block.getPaths ( path , pathNumber + 1 , maxPathNumber ) ; } } else { path.put ( block , pathNumber ) ; block.getPaths ( path , pathNumber + 1 , maxPathNumber ) ; } } } } }"
public class Test { public void method ( String foo ) { // This compiles if the curly braces are uncommented if ( foo instanceof Object ) // { Object bar = ( Object ) foo ; // } } } javac -Xlint : all Test.javaTest.java:5 : error : not a statement Object bar = foo ; ^Test.java:5 : error : ' ; ' expected Object bar = foo ; ^2 errors
"public class Bar { static void foo ( int ... x ) { System.out.println ( x ) ; } static void foo2 ( float ... x ) { System.out.println ( x ) ; } public static void main ( String args [ ] ) { Bar.foo ( 3,3,3,0 ) ; Bar.foo2 ( 3,3,3,1 ) ; Bar.foo ( 0 ) ; } } [ I @ 7a67f797 [ F @ 3fb01949 [ I @ 424c2849"
"import java.io . * ; import java.nio.file . * ; public class FilePrepender // class name { public static void main ( String [ ] args ) { // make a giant dump file which we will append all read files into try { new File ( `` Output\\ '' ) .mkdirs ( ) ; File megaDumpFile = new File ( `` Output\\masterDump.txt '' ) ; if ( megaDumpFile.createNewFile ( ) ) { System.out.println ( `` File creation success '' ) ; } else { System.out.println ( `` File was not made . File already exists . Please delete '' ) ; } } catch ( IOException e ) { } //grab file names File folder = new File ( `` . `` ) ; File [ ] listOfFiles = folder.listFiles ( ) ; for ( int i = 0 ; i < listOfFiles.length ; i++ ) { if ( listOfFiles [ i ] .isFile ( ) ) { listOfFiles [ i ] .getName ( ) ; } else if ( listOfFiles [ i ] .isDirectory ( ) ) { //do nothing } } //open files + duplicate + prepend + and append product to end of master dump file // main for for ( int j = 0 ; j < listOfFiles.length ; j++ ) { //append file name for mega dump file String fileNameTemp = listOfFiles [ j ] .getName ( ) ; // get file name try { PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( `` Output//masterDump.txt '' , true ) ) ) ; out.println ( fileNameTemp ) ; out.flush ( ) ; out.close ( ) ; } catch ( IOException e ) { } // duplicate input files FileInputStream instream = null ; FileOutputStream outstream = null ; try { File infile =new File ( `` '' +listOfFiles [ j ] .getName ( ) ) ; File outfile =new File ( `` Output\\ '' +listOfFiles [ j ] .getName ( ) ) ; instream = new FileInputStream ( infile ) ; outstream = new FileOutputStream ( outfile ) ; byte [ ] buffer = new byte [ 1024 ] ; int length ; // apend file name into the new file // String fileNameTemp = listOfFiles [ j ] .getName ( ) ; // get file name try { PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( `` Output//masterDump.txt '' , true ) ) ) ; out.println ( `` > '' +fileNameTemp ) ; out.flush ( ) ; out.close ( ) ; } catch ( IOException e ) { } // now copy contents of previous file into the new file /*copying the contents from input stream to * output stream using read and write methods */ while ( ( length = instream.read ( buffer ) ) > 0 ) { outstream.write ( buffer , 0 , length ) ; } //Closing the input/output file streams instream.close ( ) ; outstream.close ( ) ; // file is copied } catch ( IOException ioe ) { } // copy newly copied file into mega dump try { File infile =new File ( `` Output\\ '' +listOfFiles [ j ] ) ; // newly copied File outfile =new File ( `` Output\\masterDump.txt '' ) ; instream = new FileInputStream ( infile ) ; outstream = new FileOutputStream ( outfile ) ; byte [ ] buffer = new byte [ 1024 ] ; int length ; /*copying the contents from input stream to * output stream using read and write methods */ while ( ( length = instream.read ( buffer ) ) > 0 ) { outstream.write ( buffer , 0 , length ) ; } //Closing the input/output file streams instream.close ( ) ; outstream.close ( ) ; // file is copied } catch ( IOException ioe ) { } } // end for loop } // end main } // end class"
"[ { `` USER_1 '' : { `` APP_1 '' : { `` total '' :1 , `` totalGenuine '' :1 , `` totalDevelopment '' :1 } } , `` USER_2 '' : { `` APP_1 '' : { `` total '' :1 , `` totalGenuine '' :1 , `` totalDevelopment '' :1 } , `` APP_2 '' : { `` total '' :2 , `` totalGenuine '' :2 , `` totalDevelopment '' :2 } } } , { `` USER_1 '' : { `` APP_1 '' : { `` total '' :1 , `` totalGenuine '' :1 , `` totalDevelopment '' :1 } } , `` USER_2 '' : { `` APP_1 '' : { `` total '' :1 , `` totalGenuine '' :1 , `` totalDevelopment '' :1 } , `` APP_2 '' : { `` total '' :2 , `` totalGenuine '' :2 , `` totalDevelopment '' :2 } } } ] final Map < String , Map < String , Genuineness > > map = taskHandles.stream ( ) .map ( this : :mapTaskHandle ) .flatMap ( m - > m.entrySet ( ) .stream ( ) ) .collect ( Collectors.toMap ( Map.Entry : :getKey , e - > e.getValue ( ) .entrySet ( ) .stream ( ) .collect ( Collectors.toMap ( Map.Entry : :getKey , g - > new Genuineness ( g.getValue ( ) .getTotal ( ) , g.getValue ( ) .getTotalGenuine ( ) , g.getValue ( ) .getTotalDevelopment ( ) ) , ( g1 , g2 ) - > new Genuineness ( g1.getTotal ( ) + g2.getTotal ( ) , g1.getTotalGenuine ( ) + g2.getTotalGenuine ( ) , g1.getTotalDevelopment ( ) + g2.getTotalGenuine ( ) ) ) ) ) ) ; java.lang.IllegalStateException : Duplicate key { TEST_33_33_APP_1=live.attach.billing.domain.model.billing.Genuineness @ 951b6fe } { `` USER_1 '' : { `` APP_1 '' : { `` total '' :2 , `` totalGenuine '' :2 , `` totalDevelopment '' :2 } } , `` USER_2 '' : { `` APP_1 '' : { `` total '' :2 , `` totalGenuine '' :2 , `` totalDevelopment '' :2 } , `` APP_2 '' : { `` total '' :4 , `` totalGenuine '' :4 , `` totalDevelopment '' :4 } } }"
"public static void add ( List l , Object o ) { l.add ( o ) ; } public static void main ( String [ ] args ) throws Exception { List < Integer > list = new ArrayList < Integer > ( ) ; add ( list , `` 1.23 '' ) ; add ( list , 1.23 ) ; System.out.println ( list ) ; }"
public class Course { private ArrayList < Student > students ; public Course ( ArrayList < Student > students ) { this.students = students ; } } public class Student { private Course course ; public Student ( Course course ) { this.course = course ; } } public class Student { private int courseId ; public Student ( int courseId ) { this.courseId = courseId ; } }
"public class TestThread extends Thread { AtomicInteger counter = new AtomicInteger ( 0 ) ; @ Override public void run ( ) { System.out.printf ( `` % d\n '' , counter.addAndGet ( 1 ) ) ; } public static void main ( String [ ] args ) throws InterruptedException { ExecutorService es = Executors.newCachedThreadPool ( ) ; TestThread t = new TestThread ( ) ; es.execute ( t ) ; es.execute ( t ) ; es.shutdown ( ) ; } } t.start ( ) ; t.start ( ) ; = > BAM !"
public class B { public B ( ) { } private void m0 ( ) { System.out.println ( `` BO '' ) ; } public void m1 ( ) { System.out.println ( `` B1 '' ) ; } public void test ( ) { this.m0 ( ) ; this.m1 ( ) ; } } public class D extends B { /** * */ public D ( ) { } public void m0 ( ) { System.out.println ( `` DO '' ) ; } public void m1 ( ) { System.out.println ( `` D1 '' ) ; } public void test ( ) { super.test ( ) ; } public static void main ( String [ ] args ) { B d=new D ( ) ; d.test ( ) ; } }
BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ;
"package strings ; import java.util.Scanner ; public class P58Targil7 { public static Scanner in = new Scanner ( System.in ) ; public static void main ( String [ ] args ) { // TODO Auto-generated method stub String st2 = in.next ( ) ; check ( st2 ) ; } public static void check ( String st1 ) { char sec , fir ; for ( int i = 0 ; i < st1.length ( ) - 1 ; i++ ) { sec = st1.charAt ( i + 1 ) ; fir = st1.charAt ( i ) ; sec -- ; if ( fir == sec ) System.out.print ( fir ) ; } } }"
public class TestBigIntArraySize { public static int arraySize = 1000_000_000 ; public static int [ ] firstArray = new int [ arraySize ] ; public static int [ ] secondArray = new int [ arraySize ] ; public static void main ( String [ ] args ) { System.out.println ( 1000_000_000 * Integer.SIZE ) ; } }
"int batchAmount = 10 ; for ( int i = 0 ; i < fullList.size ( ) ; i += batchAmount ) { List < List < object > > batchList = new ArrayList ( ) ; batchList.add ( fullList.subList ( i , Math.min ( i + batchAmount , fullList.size ( ) ) ) ; // Here I can do another for loop in batchList and do operations on each item }"
public class VisibilityTest { @ interface A { int f ( ) ; } @ A ( f = VisibilityTest.v ) //fails private static class C { int c = VisibilityTest.v ; //works } @ A ( f = v ) //works private static class D { int d = VisibilityTest.v ; //works } private final static int v = 5 ; }
"Locale locale = Locale.CANADA_FRENCH ; DayOfWeek firstDayOfWeek = WeekFields.of ( locale ) .getFirstDayOfWeek ( ) ; List < DayOfWeek > dows = new ArrayList < > ( 7 ) ; // Set initial capacity to 7 , for the seven days of the week.dows.add ( firstDayOfWeek ) ;"
"public static boolean execute ( String filename ) { // Perform some side effects ( e.g . write on DB ) return true ; // or false according to some criteria ; } public class Entrypoint { public static boolean myFunction ( String input ) { System.out.println ( `` executed ... '' + input ) ; return ! input.equals ( `` B '' ) ; } public static void main ( String [ ] args ) { List < String > lst = Arrays.asList ( `` A '' , `` B '' , `` C '' , `` D '' , `` E '' , `` F '' ) ; long callsOk = lst.stream ( ) .map ( Entrypoint : :myFunction ) // .filter ( x - > x.equals ( true ) ) .count ( ) ; .filter ( x - > x ) .count ( ) ; // Better , as suggested by Donat System.out.println ( `` OK= '' + callsOk ) ; } } executed ... Aexecuted ... Bexecuted ... Cexecuted ... Dexecuted ... Eexecuted ... FOK=5"
List < Employe > listEmploye = new ArrayList < > ( ) ; for ( int i=0 ; i < ids.size ( ) ; i++ ) { Long idLong = Long.valueOf ( ids.get ( i ) ) ; BigDecimal idBig= BigDecimal.valueOf ( idLong ) ; listEmploye.add ( findByIdPointage ( idBig ) ) ; }
//javapublic class A { public void f ( ) { System.out.println ( `` A - > f ( ) '' ) ; x = x + 4 ; if ( x < 15 ) this.f ( ) ; //the f-call } public int x = 5 ; } public class B extends A { @ Override public void f ( ) { System.out.println ( `` B - > f ( ) '' ) ; x = x + 3 ; super.f ( ) ; } } public class Main { public static void main ( String [ ] args ) { A a = new B ( ) ; System.out.println ( `` a.f ( ) '' ) ; a.f ( ) ; System.out.println ( a.x ) ; } }
Instant time = Instant.now ( ) ; OffsetDateTime utc = time.atOffset ( ZoneOffset.UTC ) ; int utcTime = ( int ) utc.toEpochSecond ( ) ; int localTime = ( int ) time.getEpochSecond ( ) ; System.out.println ( `` utc `` + utcTime + `` local `` + localTime ) ; utc 1593762925local 1593762925 OffsetDateTime utc = time.atOffset ( ZoneOffset.of ( ZoneOffset.systemDefault ( ) .getId ( ) ) ) ;
package com.acme ; public class InheritableFoo extends Foo { public InheritableFoo ( ) { super ( ) ; } }
"public static Boolean enumContains ( Enum en , String valueString ) { return toStringList ( en.values ( ) ) .contains ( valueString.toUpperCase ( ) ) ; }"
.map ( mc - > mc.getName ( ) .getDefaultName ( ) ) .map ( TeleBadalonaCampaignType : :getName : :getDefaultName )
private List < Entity > getPlanets ( ) { return entities.values ( ) .stream ( ) .filter ( x - > x instanceof Planet ) .collect ( Collectors.toList ( ) ) ; }
"@ Overridepublic void run ( ) { try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( client.getInputStream ( ) ) ) ; BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( client.getOutputStream ( ) ) ) ) { String input ; while ( true ) { input = readLine ( ) ; if ( input == null ) break ; out.write ( input ) ; out.newLine ( ) ; out.flush ( ) ; } } catch ( IOException e ) { System.err.println ( e , `` Error from socket IO . `` ) ; System.exit ( 1 ) ; } try { client.close ( ) ; } catch ( IOException e ) { System.err.println ( e , `` Error when closing socket . `` ) ; System.exit ( 1 ) ; } System.out.println ( `` Client `` + client.getInetAddress ( ) .getHostAddress ( ) + `` closed connection.\n '' ) ; } while ( true ) { Socket client = null ; try { client = listen.accept ( ) ; } catch ( IOException e ) { System.err.println ( e , `` Error when waiting for connection . `` ) ; System.exit ( 1 ) ; } System.out.println ( `` New connection from client : `` + client.getInetAddress ( ) .getHostAddress ( ) + `` \n '' ) ; threadPool.execute ( new ConnectionHandler ( client ) ) ; } New connection from client : 127.0.0.1Client 127.0.0.1 closed connection.New connection from client : 127.0.0.1Client 127.0.0.1 closed connection.New connection from client : 127.0.0.1Client 127.0.0.1 closed connection.New connection from client : 127.0.0.1"
1 ) In database2 ) On Webserver as different files for each user . We can encrypt data in those files using some key . 1 ) Where can we store those files on webserver2 ) How can we restrict access to those files ? 3 ) Is there something available in spring to achieve this ? 4 ) What kind of encryption library I can use to achieve this . And where I can store key for each user.5 ) How we can sync those files on multiple instances . Is there some standard library for this also ?
"`` m1 , m2 , m3 '' `` m1/build , m2/build , m3/build '' System.out.println ( `` m1 , m2 , m3 '' .replaceAll ( `` ( [ ^ , ] * ) '' , `` $ 1/build '' ) ) ; > > > m1/build/build , m2/build/build , m3/build/build echo 'm1 , m2 , m3 ' | sed -e 's % \ ( [ ^ , ] *\ ) % \1/build % g ' > > > m1/build , m2/build , m3/build"
public interface Foo < X extends TypeA > { public X hello ( ) ; } public class Bar implements Foo < TypeB > { @ Override public TypeB hello ( ) { ... } } Method method = Bar.class.getDeclaredMethod ( `` hello '' ) ; Class returnType = method.getReturnType ( ) ; Method [ ] methods = Bar.class.getDeclaredMethods ( ) ;
"public class Test { /** * @ param args */ public static void main ( String [ ] args ) { String s1 = new String ( `` myTestString '' ) ; String s3 = s1.intern ( ) ; System.out.println ( `` S1 : `` + System.identityHashCode ( s1 ) + `` S3 : '' + System.identityHashCode ( s3 ) ) ; } } public class Test { /** * @ param args */ public static void main ( String [ ] args ) { char [ ] c1 = { 'm ' , ' y ' , 'T ' , ' e ' , 's ' , 't ' , 'S ' , 't ' , ' r ' , ' i ' , ' n ' , ' g ' } ; String s5 = new String ( c1 ) ; String s6 = s5.intern ( ) ; System.out.println ( `` S5 : `` + System.identityHashCode ( s5 ) + `` S6 : '' + System.identityHashCode ( s6 ) ) ; } }"
"Here is my layout code < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' android : paddingBottom= '' 5dp '' android : paddingTop= '' 5dp '' android : paddingLeft= '' 10dp '' > < TextView android : id= '' @ +id/txtInfo '' android : layout_width= '' wrap_content '' android : layout_height= '' 30sp '' android : layout_gravity= '' left '' android : textSize= '' 12sp '' android : textColor= '' @ color/lightred '' android : textStyle= '' italic '' / > < TextView android : id= '' @ +id/txtMsg '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : textSize= '' 16dp '' android : layout_marginRight= '' 80dp '' android : background= '' @ color/grey '' android : textColor= '' @ color/white '' android : paddingLeft= '' 10dp '' android : paddingRight= '' 10dp '' android : paddingTop= '' 5dp '' android : paddingBottom= '' 5dp '' android : textStyle= '' italic|bold '' / > < /LinearLayout > public class MessagesListAdapter extends BaseAdapter { private Context context ; private List < ChatMessageObjects > messagesItems ; public MessagesListAdapter ( Context context , List < ChatMessageObjects > navDrawerItems ) { this.context = context ; this.messagesItems = navDrawerItems ; } @ Override public int getCount ( ) { return messagesItems.size ( ) ; } @ Override public Object getItem ( int position ) { return messagesItems.get ( position ) ; } @ Override public long getItemId ( int position ) { return position ; } @ Override public View getView ( int position , View convertView , ViewGroup parent ) { /** * The following list not implemented reusable list items as list items * are showing incorrect data Add the solution if you have one * */ ChatMessageObjects m = messagesItems.get ( position ) ; LayoutInflater mInflater = ( LayoutInflater ) context .getSystemService ( Activity.LAYOUT_INFLATER_SERVICE ) ; if ( messagesItems.get ( position ) .getMessage_type ( ) == Constants.IS_TYPE_CHAT_IMAGE ) { convertView = mInflater.inflate ( R.layout.chat_image , null ) ; ImageView imageView = ( ImageView ) convertView.findViewById ( R.id.imgView ) ; TextView imageLabel = ( TextView ) convertView.findViewById ( R.id.lblImage ) ; if ( messagesItems.get ( position ) .isSelf ( ) == 0 ) { Log.i ( Constants.TAG , `` the value is from others '' ) ; try { URL url = new URL ( messagesItems.get ( position ) .getMessage ( ) ) ; HttpURLConnection connection = ( HttpURLConnection ) url.openConnection ( ) ; connection.setDoInput ( true ) ; connection.connect ( ) ; InputStream input = connection.getInputStream ( ) ; imageView.setImageBitmap ( BitmapFactory.decodeStream ( input ) ) ; } catch ( IOException e ) { Log.i ( Constants.TAG , e.toString ( ) ) ; } } else if ( messagesItems.get ( position ) .isSelf ( ) == 1 ) { Log.i ( Constants.TAG , `` the value is itself '' ) ; imageView.setImageURI ( Uri.fromFile ( imgFile ) ) ; imageLabel.setText ( messagesItems.get ( position ) .getFromName ( ) ) ; } } else if ( messagesItems.get ( position ) .getMessage_type ( ) == Constants.MESSAGE_TYPE_MSG ) { if ( messagesItems.get ( position ) .isSelf ( ) == 1 ) { // message belongs to you , so load the right aligned layout convertView = mInflater.inflate ( R.layout.chat_message_right , null ) ; TextView txtMsg = ( TextView ) convertView.findViewById ( R.id.txtMsg ) ; //date and time added here TextView date = ( TextView ) convertView.findViewById ( R.id.txtInfo ) ; txtMsg.setText ( m.getMessage ( ) ) ; lblFrom.setText ( m.getFromName ( ) ) ; date.setText ( m.getDate ( ) ) ; } else if ( messagesItems.get ( position ) .isSelf ( ) == 0 ) { // message belongs to other person , load the left aligned layout convertView = mInflater.inflate ( R.layout.chat_message_left , null ) ; TextView txtMsg = ( TextView ) convertView.findViewById ( R.id.txtMsg ) ; //date and time added here TextView date = ( TextView ) convertView.findViewById ( R.id.txtInfo ) ; txtMsg.setText ( m.getMessage ( ) ) ; lblFrom.setText ( m.getFromName ( ) ) ; date.setText ( m.getDate ( ) ) ; } } return convertView ; }"
"List < Host > hosts = LoadBalancer.getHostList ( ) ; ExecutorService executor = Executors.newFixedThreadPool ( hosts.size ( ) ) ; executor.submit ( ( ) - > { for ( Host host : hosts ) { try { connect ( host , '' message '' ,1 ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ) ; public class Host { private String ip ; private int port ; private boolean isActive ; public Host ( String ip , int port ) { this.ip = ip ; this.port = port ; this.isActive = true ; } public synchronized boolean isActive ( ) { return isActive ; } public synchronized void setActive ( boolean active ) { isActive = active ; } public String getIp ( ) { return ip ; } public void setIp ( String ip ) { this.ip = ip ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { this.port = port ; } } public static void connect ( Host host , String message , int mode ) throws Exception { EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap clientBootstrap = new Bootstrap ( ) ; clientBootstrap.option ( ChannelOption.CONNECT_TIMEOUT_MILLIS , 500 ) ; clientBootstrap.group ( group ) ; clientBootstrap.channel ( NioSocketChannel.class ) ; clientBootstrap.remoteAddress ( new InetSocketAddress ( host.getIp ( ) , host.getPort ( ) ) ) ; clientBootstrap.handler ( new ChannelInitializer < SocketChannel > ( ) { protected void initChannel ( SocketChannel socketChannel ) { //TODO , TIMEOUT BILGISI ILE DOLDUR BURAYI //socketChannel.pipeline ( ) .addLast ( new ReadTimeoutHandler ( 1 ) ) ; //socketChannel.pipeline ( ) .addLast ( `` idleStateHandler '' , new IdleStateHandler ( 1 , 1 , 2 ) ) ; socketChannel.pipeline ( ) .addLast ( new ClientHandler ( host , message , mode ) ) ; } } ) ; ChannelFuture channelFuture = clientBootstrap.connect ( ) .sync ( ) ; channelFuture.channel ( ) .closeFuture ( ) .sync ( ) ; } catch ( Exception e ) { System.err.println ( `` Connection timed out -- > `` + e ) ; host.setActive ( false ) ; //connection kurulamadı demektir . Bir sonraki mesaj geldiğinde bu hostun açılıp açılmadığı denenecek . } finally { group.shutdownGracefully ( ) .sync ( ) ; }"
"// Code from java.lang.String class public boolean regionMatches ( boolean paramBoolean , int paramInt1 , String paramString , int paramInt2 , int paramInt3 ) { char [ ] arrayOfChar1 = this.value ; int i = paramInt1 ; char [ ] arrayOfChar2 = paramString.value ; int j = paramInt2 ; if ( paramInt2 < 0 || paramInt1 < 0 || paramInt1 > this.value.length - paramInt3 || paramInt2 > paramString.value.length - paramInt3 ) return false ; while ( paramInt3 -- > 0 ) { char c1 = arrayOfChar1 [ i++ ] ; char c2 = arrayOfChar2 [ j++ ] ; if ( c1 == c2 ) continue ; if ( paramBoolean ) { char c3 = Character.toUpperCase ( c1 ) ; char c4 = Character.toUpperCase ( c2 ) ; // Why is java comparing to Lower case here if ( c3 == c4 || Character.toLowerCase ( c3 ) == Character.toLowerCase ( c4 ) ) continue ; } return false ; } return true ; }"
public class Solution { private String name ; Solution ( String name ) { this.name = name ; } private String getName ( ) { return name ; } private void sout ( ) { new Solution ( `` sout '' ) { void printName ( ) { System.out.println ( getName ( ) ) ; } } .printName ( ) ; } public static void main ( String [ ] args ) { new Solution ( `` main '' ) .sout ( ) ; } }
interface I { void add ( I foo ) ; } C c = new C ( ) ; c.add ( new C ( ) ) ; c.add ( new D ( ) ) ; class C implements I { public void add ( I foo ) { if ( foo instanceof C ) { System.out.println ( `` instance of C '' ) ; } else { System.out.println ( `` another instance '' ) ; } } }
"int num = //somethingboolean val1 ; String val2 ; val1 , val2 = switch ( num ) { case 0 - > ( true , `` zero ! `` ) ; case 1 - > ( true , `` one ! `` ) ; default - > ( false , `` unknown : / '' ) ; }"
"public int [ ] union ( int [ ] array1 , int [ ] array2 ) { int count = 0 ; if ( isSet ( array1 ) & & isSet ( array2 ) ) { for ( int i = 0 ; i < array1.length ; i++ ) { for ( int j = 0 ; j < array2.length ; j++ ) { if ( array1 [ i ] == array2 [ j ] ) { System.out.println ( array2 [ j ] ) ; count ++ ; } } } } int [ ] array3 = new int [ array2.length - count ] ; int [ ] unionArray = new int [ array1.length + array3.length ] ; int elementOfUnion = 0 ; for ( int i = 0 ; i < array1.length ; i++ ) { unionArray [ i ] = array1 [ i ] ; elementOfUnion = i + 1 ; } int index = 0 ; for ( int i = elementOfUnion ; i < unionArray.length ; i++ ) { unionArray [ i ] = array3 [ index ] ; index++ ; } return unionArray ; } public boolean isSet ( int [ ] array ) { boolean duplicates = true ; for ( int i = 0 ; i < array.length ; i++ ) { for ( int n = i+1 ; n < array.length ; n++ ) { if ( array [ i ] == array [ n ] ) duplicates = false ; } } return duplicates ; }"
"class SOSModule { private Camera camera ; private Camera.Parameters params ; private boolean isFlashOn ; void blink ( final int delay , final int times ) { Thread t = new Thread ( ) { public void run ( ) { try { for ( int i=0 ; i < times*2 ; i++ ) { if ( isFlashOn ) { turnOffFlash ( ) ; } else { Camera.open ( ) ; turnOnFlash ( ) ; } sleep ( delay ) ; } } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ; t.start ( ) ; } void turnOnFlash ( ) { if ( ! isFlashOn ) { if ( camera == null || params == null ) { return ; } params = camera.getParameters ( ) ; params.setFlashMode ( Camera.Parameters.FLASH_MODE_TORCH ) ; camera.setParameters ( params ) ; camera.startPreview ( ) ; isFlashOn = true ; } } void turnOffFlash ( ) { if ( isFlashOn ) { if ( camera == null || params == null ) { return ; } params = camera.getParameters ( ) ; params.setFlashMode ( Camera.Parameters.FLASH_MODE_OFF ) ; camera.setParameters ( params ) ; camera.stopPreview ( ) ; isFlashOn = false ; } } public void flash_effect ( ) throws InterruptedException { cam = Camera.open ( ) ; final Camera.Parameters p = cam.getParameters ( ) ; p.setFlashMode ( Camera.Parameters.FLASH_MODE_TORCH ) ; Thread a = new Thread ( ) { public void run ( ) { for ( int i =0 ; i < 10 ; i++ ) { cam.setParameters ( p ) ; cam.startPreview ( ) ; try { Thread.sleep ( 50 ) ; } catch ( InterruptedException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } cam.stopPreview ( ) ; try { Thread.sleep ( 50 ) ; } catch ( InterruptedException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } } } } ; a.start ( ) ; } }"
double totalPrice = stream.mapToDouble ( product - > product.price ) .sum ( ) ; List < Product > products = stream.map ( this : :convert ) .collect ( Collectors.toList ( ) ) ;
@ Overridepublic void actionPerformed ( ActionEvent e ) { if ( e.getActionCommand ( ) .equals ( `` Button1Text '' ) { /* do stuff */ } else if ( e.getActionCommand ( ) .equals ( `` Button2Text '' ) { /* do stuff */ } else if ( e.getActionCommand ( ) .equals ( `` Button3Text '' ) { /* do stuff */ } else if ( e.getActionCommand ( ) .equals ( `` Button4Text '' ) { /* do stuff */ } }
public static void mystery ( int n ) { System.out.println ( `` mystery called with n = `` + n ) ; if ( n == 0 ) { System.out.println ( `` n is zero so no more recursive calls ! '' ) ; return ; } mystery ( n - 1 ) ; System.out.println ( `` We did it again with n = `` + n ) ; } public static void main ( String [ ] args ) { mystery ( 5 ) ; } mystery called with n = 5mystery called with n = 4mystery called with n = 3mystery called with n = 2mystery called with n = 1mystery called with n = 0n is zero so no more recursive calls ! We did it again with n = 1We did it again with n = 2We did it again with n = 3We did it again with n = 4We did it again with n = 5 mystery ( n - 1 ) ; n is zero so no more recursive calls ! We did it again with n = 0
ClassLoader c = new ClassLoader ( ) { @ Override public Class < ? > findClass ( String name ) { return Object.class ; } } ; Class < ? > cc = c.loadClass ( Object [ ] [ ] .class.getName ( ) ) ; System.out.println ( cc.getName ( ) ) ;
"public interface Animates < S extends Animator > { S createAnimator ( long animationTime ) ; } public interface AnimatesPaint extends Animates < PaintAnimator > { PaintAnimator createPaintAnimator ( long animationTime ) ; default PaintAnimator createAnimator ( long animationTime ) { return createPaintAnimator ( animationTime ) ; } } public interface AnimatesPosition extends Animates < PositionAnimator > { PositionAnimator createPositionAnimator ( long animationTime ) ; @ Override default PositionAnimator createAnimator ( long animationTime ) { return createPositionAnimator ( animationTime ) ; } } public class ScreenElement implements AnimatesPaint , AnimatesPosition { @ Override PositionAnimator createPositionAnimator ( long animationTime ) { return new PositionAnimator ( animationTime ) ; } @ Override PaintAnimator createPaintAnimator ( long animationTime ) { return new PaintAnimator ( animationTime ) ; } } public class AnimationStarter < S extends Animates , T > { public void startAnimation ( S animates , T start , T target , long animationTime ) { Animator animator = animates.createAnimator ( animationTime ) ; animator.init ( start , target ) ; animates.setAnimator ( animator ) ; animator.startAnimation ( ) ; } } public abstract class Animator < T > { } public class PositionAnimator extends Animator < Point > { }"
"@ Retention ( RetentionPolicy.RUNTIME ) public @ interface Initialize { int priority ( ) ; } public static void initMethods ( Initializable clazz ) { TreeMap < Integer , Method > methods = prioritizedMethods ( clazz.getClass ( ) .getDeclaredMethods ( ) ) ; methods.forEach ( ( priority , method ) - > { try { method.setAccessible ( true ) ; Logger.debug ( `` Invoking `` + method.getName ( ) + `` ... '' ) ; method.invoke ( clazz ) ; } catch ( IllegalAccessException | InvocationTargetException e ) { Logger.debug ( `` Failed to invoke `` + method.getName ( ) ) ; e.printStackTrace ( ) ; } } ) ; } private static TreeMap < Integer , Method > prioritizedMethods ( Method [ ] methods ) { HashMap < Integer , Method > taggedMethods = new HashMap < > ( ) ; for ( Method method : methods ) { if ( method.isAnnotationPresent ( Initialize.class ) ) { Initialize meta = method.getAnnotation ( Initialize.class ) ; taggedMethods.put ( meta.priority ( ) , method ) ; } } return new TreeMap < > ( taggedMethods ) ; }"
"public interface FindMinI { double function ( double x ) ; static double findMinOfFuncOnInterval ( int begin , int end , double step , FindMinI func ) { double min = Double.MAX_VALUE ; for ( int i = begin ; i < = end ; i += step ) { if ( func.function ( i ) < = min ) min = func.function ( i ) ; } return min ; } }"
"class Car { String name ; List < String > manufactures ; } object sedan - > { ford , gm , tesla } object sports - > { ferrari , tesla , bmw } object suv - > { ford , bmw , toyota } carList.stream ( ) .map ( c - > c.getManufacturers ( ) ) .collect ( Collectors.toSet ( ) ) ;"
"import javax.swing.JOptionPane ; public class Pingo { public static void main ( String [ ] args ) { final int MAXROOMS=50 ; int [ ] roomNumbers = new int [ MAXROOMS ] ; int [ ] patientQuantity = new int [ roomNumbers.length ] ; int numPatients=getNumberOfPatients ( roomNumbers , patientQuantity ) ; } public static int getNumberOfPatients ( int [ ] roomNumbers , int [ ] patientQuantity ) { int numPatients=0 ; for ( int i=0 ; i < patientQuantity.length ; i++ ) { numPatients=Integer.parseInt ( JOptionPane.showInputDialog ( `` Enter amount of Patients for room : '' + roomNumbers [ i ] ) ) ; patientQuantity [ i ] =numPatients ; } return numPatients ; } }"
"[ [ 765 , servus , burdnare ] , [ 764 , asinj , ferrantis ] , [ 764 , asinj , ferrantis ] , [ 764 , asinj , ferrantis ] , [ 762 , asinj , ferrantis ] , [ 756 , peciam terre , cisterne ] , [ 756 , peciam terre , cortile ] , [ 756 , peciam terre , domo ] , [ 756 , asinj , ferrantis ] ] 765 - [ servus ] 764 - [ asinj ] 762 - [ asinj ] 756 - [ peciam terre , asinj ]"
"public class A { public void testArgs ( A a ) { System.out.println ( `` A '' ) ; } public void test ( ) { System.out.println ( `` A '' ) ; } } public class B extends A { public void testArgs ( B a ) { System.out.println ( `` B '' ) ; } public void test ( ) { System.out.println ( `` B '' ) ; } } public class Main { public static void main ( String [ ] args ) { a ( new B ( ) ) .testArgs ( new B ( ) ) ; // prints A ( new B ( ) ) .testArgs ( new B ( ) ) ; // prints B a ( new B ( ) ) .test ( ) ; // prints B } public static A a ( B b ) { return b ; } } public class B extends A { public void testArgs ( A a ) { // Corrected overriding , thanks if ( a instanceof B ) // Check if it is an instance of B System.out.println ( `` B '' ) ; // Do whatever else // Otherwise super.testArgs ( a ) ; // Call superclass method } public void test ( ) { System.out.println ( `` B '' ) ; } }"
"public void downloadUpdate ( final String url ) { try { /* Which of these resources do I need to close ? */ final InputStream inputStream = new URL ( url ) .openStream ( ) ; final ReadableByteChannel readableByteChannel = Channels.newChannel ( inputStream ) ; final FileOutputStream fileOutputStream = new FileOutputStream ( Bukkit.getServer ( ) .getUpdateFolderFile ( ) ) ; final FileChannel fileChannel = fileOutputStream.getChannel ( ) ; /* Downloading the update ... */ fileChannel.transferFrom ( readableByteChannel , 0 , Long.MAX_VALUE ) ; } catch ( final IOException exception ) { exception.printStackTrace ( ) ; } }"
"public class MyClass implements java.io.Serializable { private static final long serialVersionUID = 1L ; ArrayList < Admin > admins ; ArrayList < Worker > workers ; ArrayList < Manager > managers ; ArrayList < Secretary > secretaries ; ArrayList < Category > categories ; HashMap < Issue , HashMap < Category , Manager > > ManagedIssues ; private static MyClass instance ; ... }"
"static String readFirstLineFromFileWithFinallyBlock ( String path ) throws IOException { BufferedReader br = new BufferedReader ( new FileReader ( path ) ) ; try { return br.readLine ( ) ; } finally { if ( br ! = null ) br.close ( ) ; } } static String readFirstLineFromFileWithFinallyBlock ( String path ) throws IOException { FileReader fr ; try { FileReader fr = new FileReader ( path ) ; BufferedReader br ; try { BufferedReader br = new BufferedReader ( fr ) ; return br.readLine ( ) ; } finally { if ( br ! = null ) br.close ( ) ; } finally { // Implements closeable , so it is ok if we call it twice . if ( fr ! = null ) fr.close ( ) ; } }"
"Set < String > set1 ; Set < String > set2 ; Set < String > s = Stream.of ( set1 , set2 ) .collect ( Collectors.toSet ( ) ) ;"
String [ ] data = new String [ 2 ] ; data [ 0 ] = `` OK '' ; data [ 1 ] = `` returning data '' ; data [ 2 ] = `` data out of bounds '' ;
"import java.util . * ; public class MyClass { public static void main ( String args [ ] ) throws Exception { java.util.Map < String , Integer > oops = new java.util.HashMap < > ( ) ; oops.put ( `` 1 '' , 1 ) ; oops.put ( `` 2 '' , 2 ) ; oops.put ( `` 3 '' , 3 ) ; Runnable read = ( ) - > { System.out.println ( `` Entered read thread '' ) ; /* * ConcurrentModificationException possibly occurs * for ( int i = 0 ; i < 100 ; i++ ) { List < Integer > numbers = new ArrayList < > ( ) ; numbers.addAll ( oops.values ( ) ) ; System.out.println ( `` Size `` + numbers.size ( ) ) ; } */ for ( int i = 0 ; i < 100 ; i++ ) { List < Integer > numbers = new ArrayList < > ( ) ; numbers.addAll ( oops.values ( ) .stream ( ) .collect ( java.util.stream.Collectors.toList ( ) ) ) ; System.out.println ( `` Size `` + numbers.size ( ) ) ; } } ; Runnable write = ( ) - > { System.out.println ( `` Entered write thread '' ) ; for ( int i = 0 ; i < 100 ; i++ ) { System.out.println ( `` Put `` + i ) ; oops.put ( Integer.toString ( i ) , i ) ; } } ; Thread writeThread = new Thread ( write , `` write-thread '' ) ; Thread readThread = new Thread ( read , `` read-thread '' ) ; readThread.start ( ) ; writeThread.start ( ) ; readThread.join ( ) ; writeThread.join ( ) ; } }"
interface Restaurant { public void dine ( Object dish ) ; } class ItalianRestaurant implements Restaurant { public void dine ( Object dish ) { // eat with spoon and forks } } class ChineseRestaurant implements Restaurant { public void dine ( Object dish ) { // eat with chopsticks } }
"class MyKey { String planYearMonth ; String carSeries ; String weekNo ; String factoryCode ; String lineClass ; String frameSortCode ; String ocfClassificationCode ; String locationIdentificationCode ; String carGroup ; //setters & getters //equals & hashcode } public class OCFIdentificationInfo { private String frameSortCode ; private String ocfClassificationCode ; private String locationIdentificationCode ; private String carGroup ; private String frameCode ; //getters //setters //hashCode //equals //toString } public class DailyOCF { private String planYearMonth ; private String carSeries ; private String weekNo ; private String day ; private String factoryCode ; private String lineClass ; private OCFIdentificationInfo ocfInfo private int maxQty = 0 ; private int actualQty = 0 ; //getters //setters //hashCode //equals //toString } DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=00 , ocfClassificationCode=MICRA , locationIdentificationCode=XXX , carGroup=YYY , frameCode=00 ] , maxQty=20 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=10 , ocfClassificationCode=SEDAN , locationIdentificationCode=XXX , carGroup=YYY , frameCode=10 ] , maxQty=20 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=90 , ocfClassificationCode=HDD navi , locationIdentificationCode=XXX , carGroup=YYY , frameCode=90 ] , maxQty=3 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=00 , ocfClassificationCode=MICRA , locationIdentificationCode=XXX , carGroup=YYY , frameCode=00 ] , maxQty=20 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=10 , ocfClassificationCode=SEDAN , locationIdentificationCode=XXX , carGroup=YYY , frameCode=10 ] , maxQty=20 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=60 , ocfClassificationCode=GGRADE , locationIdentificationCode=XXX , carGroup=YYY , frameCode=60 ] , maxQty=10 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=90 , ocfClassificationCode=HDD navi , locationIdentificationCode=XXX , carGroup=YYY , frameCode=90 ] , maxQty=3 , actualQty=0 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=90 , ocfClassificationCode=HDD navi , locationIdentificationCode=XXX , carGroup=YYY , frameCode=90 ] , maxQty=3 , actualQty=2 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=60 , ocfClassificationCode=GGRADE , locationIdentificationCode=XXX , carGroup=YYY , frameCode=60 ] , maxQty=10 , actualQty=1 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=10 , ocfClassificationCode=SEDAN , locationIdentificationCode=XXX , carGroup=YYY , frameCode=10 ] , maxQty=20 , actualQty=2 ] DailyOCF [ planYearMonth=201304 , carSeries=K01 , weekNo=17 , day= , factoryCode=BBB , lineClass=1 , ocfInfo=OCFIdentificationInfo [ frameSortCode=00 , ocfClassificationCode=MICRA , locationIdentificationCode=XXX , carGroup=YYY , frameCode=00 ] , maxQty=20 , actualQty=2 ] Map < MyKey , List < DailyOCF > > finalResult = dailyOCFList.stream ( ) .collect ( groupingBy ( ocf - > new MyKey ( ocf.planYearMonth , ocf.carSeries , ocf.weekNo , ocf.factoryCode , ocf.lineClass , ocf.ocfInfo.frameSortCode , ocf.ocfInfo.ocfClassificationCode , ocf.ocfInfo.locationIdentificationCode , ocf.ocfInfo.carGroup ) ) ) ; OCFIdentificationInfo info = new OCFIdentificationInfo ( ) ; info.setCarGroup ( `` YYY '' ) ; info.setFrameCode ( `` 00 '' ) ; info.setFrameSortCode ( `` 00 '' ) ; info.setLocationIdentificationCode ( `` XXX '' ) ; info.setOcfClassificationCode ( `` MICRA '' ) ; OCFIdentificationInfo info1 = new OCFIdentificationInfo ( ) ; info1.setCarGroup ( `` YYY '' ) ; info1.setFrameCode ( `` 10 '' ) ; info1.setFrameSortCode ( `` 10 '' ) ; info1.setLocationIdentificationCode ( `` XXX '' ) ; info1.setOcfClassificationCode ( `` SEDAN '' ) ; OCFIdentificationInfo info2 = new OCFIdentificationInfo ( ) ; info2.setCarGroup ( `` YYY '' ) ; info2.setFrameCode ( `` 90 '' ) ; info2.setFrameSortCode ( `` 90 '' ) ; info2.setLocationIdentificationCode ( `` XXX '' ) ; info2.setOcfClassificationCode ( `` HDD navi '' ) ; OCFIdentificationInfo info3 = new OCFIdentificationInfo ( ) ; info3.setCarGroup ( `` YYY '' ) ; info3.setFrameCode ( `` 00 '' ) ; info3.setFrameSortCode ( `` 00 '' ) ; info3.setLocationIdentificationCode ( `` XXX '' ) ; info3.setOcfClassificationCode ( `` MICRA '' ) ; OCFIdentificationInfo info4 = new OCFIdentificationInfo ( ) ; info4.setCarGroup ( `` YYY '' ) ; info4.setFrameCode ( `` 10 '' ) ; info4.setFrameSortCode ( `` 10 '' ) ; info4.setLocationIdentificationCode ( `` XXX '' ) ; info4.setOcfClassificationCode ( `` SEDAN '' ) ; OCFIdentificationInfo info5 = new OCFIdentificationInfo ( ) ; info5.setCarGroup ( `` YYY '' ) ; info5.setFrameCode ( `` 60 '' ) ; info5.setFrameSortCode ( `` 60 '' ) ; info5.setLocationIdentificationCode ( `` XXX '' ) ; info5.setOcfClassificationCode ( `` GGRADE '' ) ; OCFIdentificationInfo info6 = new OCFIdentificationInfo ( ) ; info6.setCarGroup ( `` YYY '' ) ; info6.setFrameCode ( `` 90 '' ) ; info6.setFrameSortCode ( `` 90 '' ) ; info6.setLocationIdentificationCode ( `` XXX '' ) ; info6.setOcfClassificationCode ( `` HDD navi '' ) ; DailyOCF dailyOCF = new DailyOCF ( ) ; dailyOCF.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF.setCarSeries ( `` K01 '' ) ; dailyOCF.setWeekNo ( `` 17 '' ) ; dailyOCF.setDay ( `` '' ) ; dailyOCF.setFactoryCode ( `` BBB '' ) ; dailyOCF.setLineClass ( `` 1 '' ) ; dailyOCF.setOcfInfo ( info ) ; DailyOCF dailyOCF1 = new DailyOCF ( ) ; dailyOCF1.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF1.setCarSeries ( `` K01 '' ) ; dailyOCF1.setWeekNo ( `` 17 '' ) ; dailyOCF1.setDay ( `` '' ) ; dailyOCF1.setFactoryCode ( `` BBB '' ) ; dailyOCF1.setLineClass ( `` 1 '' ) ; dailyOCF1.setOcfInfo ( info1 ) ; DailyOCF dailyOCF2 = new DailyOCF ( ) ; dailyOCF2.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF2.setCarSeries ( `` K01 '' ) ; dailyOCF2.setWeekNo ( `` 17 '' ) ; dailyOCF2.setDay ( `` '' ) ; dailyOCF2.setFactoryCode ( `` BBB '' ) ; dailyOCF2.setLineClass ( `` 1 '' ) ; dailyOCF2.setOcfInfo ( info2 ) ; DailyOCF dailyOCF3 = new DailyOCF ( ) ; dailyOCF3.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF3.setCarSeries ( `` K01 '' ) ; dailyOCF3.setWeekNo ( `` 17 '' ) ; dailyOCF3.setDay ( `` '' ) ; dailyOCF3.setFactoryCode ( `` BBB '' ) ; dailyOCF3.setLineClass ( `` 1 '' ) ; dailyOCF3.setOcfInfo ( info3 ) ; DailyOCF dailyOCF4 = new DailyOCF ( ) ; dailyOCF4.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF4.setCarSeries ( `` K01 '' ) ; dailyOCF4.setWeekNo ( `` 17 '' ) ; dailyOCF4.setDay ( `` '' ) ; dailyOCF4.setFactoryCode ( `` BBB '' ) ; dailyOCF4.setLineClass ( `` 1 '' ) ; dailyOCF4.setOcfInfo ( info4 ) ; DailyOCF dailyOCF5 = new DailyOCF ( ) ; dailyOCF5.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF5.setCarSeries ( `` K01 '' ) ; dailyOCF5.setWeekNo ( `` 17 '' ) ; dailyOCF5.setDay ( `` '' ) ; dailyOCF5.setFactoryCode ( `` BBB '' ) ; dailyOCF5.setLineClass ( `` 1 '' ) ; dailyOCF5.setOcfInfo ( info5 ) ; DailyOCF dailyOCF6 = new DailyOCF ( ) ; dailyOCF6.setPlanYearMonth ( `` 201304 '' ) ; dailyOCF6.setCarSeries ( `` K01 '' ) ; dailyOCF6.setWeekNo ( `` 17 '' ) ; dailyOCF6.setDay ( `` '' ) ; dailyOCF6.setFactoryCode ( `` BBB '' ) ; dailyOCF6.setLineClass ( `` 1 '' ) ; dailyOCF6.setOcfInfo ( info6 ) ; List < DailyOCF > dailyOCFList = new ArrayList < DailyOCF > ( ) ; dailyOCFList.add ( dailyOCF ) ; dailyOCFList.add ( dailyOCF1 ) ; dailyOCFList.add ( dailyOCF2 ) ; dailyOCFList.add ( dailyOCF3 ) ; dailyOCFList.add ( dailyOCF4 ) ; dailyOCFList.add ( dailyOCF5 ) ; dailyOCFList.add ( dailyOCF6 ) ;"
"public class ExampleLinkedList { private String data ; private ExampleLinkedList next ; public ExampleLinkedList ( String data , ExampleLinkedList next ) { this.data = data ; this.next = next ; } public void addToEnd ( String item ) { while ( next ! = null ) { data = item ; next.data = data ; next = next.next ; } } public boolean isEmpty ( ) { if ( next == null ) { return true ; } return false ; } public String toString ( ) { String result = data ; while ( next ! = null ) { result = result + `` `` + next.data ; next = next.next ; } return result ; } } public class Test { public static void main ( String [ ] args ) { ExampleLinkedList test1 = new ExampleLinkedList ( `` Hello '' , null ) ; ExampleLinkedList test2 = new ExampleLinkedList ( `` Thanks '' , test1 ) ; ExampleLinkedList test3 = new ExampleLinkedList ( `` Goodbye '' , test2 ) ; test3.addToEnd ( `` AddedItem '' ) ; System.out.println ( test3 ) ; } }"
final StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder.append ( getStrOne ( ) ) ; stringBuilder.append ( getStrTwo ( ) ) ; final String result1 = stringBuilder.toString ( ) ; final String result2 = getStrOne ( ) + getStrTwo ( ) ;
"let workQueue = dispatch_get_global_queue ( QOS_CLASS_BACKGROUND , 0 ) let latch = dispatch_group_create ( ) let startTime = NSDate ( ) var itemsProcessed = 0let countUpdateQueue = dispatch_queue_create ( `` countUpdateQueue '' , DISPATCH_QUEUE_SERIAL ) for item in fetchItems ( ) // generator returns too many items to store in memory { dispatch_group_enter ( latch ) dispatch_async ( workQueue ) { self.processItem ( item ) // method takes a non-trivial amount of time to run dispatch_async ( countUpdateQueue ) { itemsProcessed++ } dispatch_group_leave ( latch ) } } dispatch_group_wait ( latch , DISPATCH_TIME_FOREVER ) let endTime = NSDate ( ) let totalTime = endTime.timeIntervalSinceDate ( startTime ) print ( `` Processed \ ( itemsProcessed ) items in \ ( totalTime ) seconds . '' ) final Executor executor = new ThreadPoolExecutor ( 64 , 64 , 1l , MINUTES , new LinkedBlockingQueue < Runnable > ( 8 ) , new CallerRunsPolicy ( ) ) ; final Phaser latch = new Phaser ( 0 ) ; final long startTime = currentTimeMillis ( ) ; final AtomicInteger itemsProcessed = new AtomicInteger ( 0 ) ; for ( final String item : fetchItems ( ) ) // iterator returns too many items to store in memory { latch.register ( ) ; final Runnable task = new Runnable ( ) { public void run ( ) { processItem ( item ) ; // method takes a non-trivial amount of time to run itemsProcessed.incrementAndGet ( ) ; latch.arrive ( ) ; } } ; executor.execute ( task ) ; } latch.awaitAdvance ( 0 ) ; final long endTime = currentTimeMillis ( ) ; out.println ( `` Processed `` + itemsProcessed.get ( ) + `` items in `` + ( endTime - startTime ) / 1000.0 + `` seconds . '' ) ;"
class test { public static void main ( String [ ] args ) { test item = new test ( ) ; item.someOtherMethod ( ) ; } test item2 = new test ( ) ; void someOtherMethod ( ) { item2.someMethod ( ) ; } void someMethod ( ) { System.out.println ( `` print this '' ) ; } }
"import com.sun.jna . * ; public interface Kernel32 extends Library { Kernel32 INSTANCE = ( Kernel32 ) Native.loadLibrary ( ( Platform.isWindows ( ) ? `` kernel32 '' : `` c '' ) , Kernel32.class ) ; /** * Retrieves the number of milliseconds that have elapsed since the system was started . * * @ return number of milliseconds that have elapsed since the system was started . * @ see http : //msdn2.microsoft.com/en-us/library/ms724408.aspx */ Long GetTickCount ( ) ; } public interface Clib extends Library { Clib INSTANCE = ( Clib ) Native.loadLibrary ( ( Platform.isWindows ( ) ? `` kernel32 '' : `` c '' ) , Clib.class ) ; /** * Retrieves the number of milliseconds that have elapsed since the system was started . * * @ return number of milliseconds that have elapsed since the system was started . */ Long clock ( ) ; } // And laterNumber n = ( Platform.isWindows ( ) ? Kernel32.INSTANCE.GetTickCount ( ) : Clib.INSTANCE.clock ( ) ) .toString ( ) ) ;"
"package JavaCollections.list ; import java.util.Iterator ; import java.util.NoSuchElementException ; public class DblyLinkList < T > implements Iterable < T > { class DListNode < T > { private T item ; private DListNode < T > prev ; private DListNode < T > next ; DListNode ( T item , DListNode < T > p , DListNode < T > n ) { this.item = item ; this.prev = p ; this.next = n ; } } ... .. } package JavaCollections.list ; import JavaCollections.list.DblyLinkList.DListNode ; public class LockableList < T > extends DblyLinkList < T > { class LockableNode < T > extends DblyLinkList < T > .DListNode < T > { /** * lock the node during creation of a node . */ private boolean lock ; LockableNode ( T item , DblyLinkList < T > .DListNode < T > p , DblyLinkList < T > .DListNode < T > n ) { super ( item , p , n ) ; // this does not work this.lock = false ; } } LockableNode < T > newNode ( T item , DListNode < T > prev , DListNode < T > next ) { return new LockableNode ( item , prev , next ) ; } public LockableList ( ) { this.sentinel = this.newNode ( null , this.sentinel , this.sentinel ) ; } ... .. }"
interface Base < T : Any > { fun go ( field : T ) } abstract class Impl : Base < Int > { override fun go ( field : Int ) { } } public class JavaImpl extends Impl { }
interface A { String n ( ) ; } class B implements A { @ Override public String n ( ) { return `` asdf '' ; } } interface C < T extends A > { T m ( T t ) ; } class D implements C < B > { @ Override public B m ( B b ) { return b ; } } Class < C < ? extends A > > x = D.class ; Type mismatch : can not convert from Class < D > to Class < C < ? extends A > > B b = new B ( ) ; A y = x.newInstance ( ) .m ( b ) ; The method m ( capture # 1-of ? extends A ) in the type C < capture # 1-of ? extends A > is not applicable for the arguments ( B ) A z = D.class.newInstance ( ) .m ( b ) ; Class < ? extends C < ? extends A > > x = D.class ; The method m ( capture # 2-of ? extends A ) in the type Test.C < capture # 2-of ? extends A > is not applicable for the arguments ( B )
"private static String removeScientificNotation ( float value ) { return new BigDecimal ( Float.toString ( value ) ) .toPlainString ( ) ; } /** * Converts a hexadecimal value to its single precision floating point representation * * @ param hexadecimal The < code > hexadecimal < /code > to convert * @ return The converted value */public static String hexadecimalToFloatingPoint ( String hexadecimal ) { Long longBits = Long.parseLong ( hexadecimal , 16 ) ; Float floatValue = Float.intBitsToFloat ( longBits.intValue ( ) ) ; return removeScientificNotation ( floatValue ) ; } public class TestConversions { @ Test public void testConversions ( ) { String floatValue = Conversions.hexadecimalToFloatingPoint ( `` 40000000 '' ) ; Assert.assertEquals ( floatValue , `` 2.0 '' ) ; floatValue = Conversions.hexadecimalToFloatingPoint ( `` 50000000 '' ) ; Assert.assertEquals ( floatValue , `` 8589934592 '' ) ; floatValue = Conversions.hexadecimalToFloatingPoint ( `` C0000000 '' ) ; Assert.assertEquals ( floatValue , `` -2.0 '' ) ; } } org.junit.ComparisonFailure : Expected :8589934600Actual :8589934592"
"private SomeContainer getSomeContainerFromList ( SomeContainerList containerList , String containerId ) { return containerList.stream ( ) .filter ( specificContainer - > specificContainer.getId ( ) .equals ( containerId ) ) .findAny ( ) .orElseThrow ( ( ) - > { String message = `` some special failure message '' ; log.error ( message ) ; throw new CustomInternalException ( message ) } ) ; } private SomeContainer getSomeContainerFromList ( SomeContainerList containerList , String containerId ) { return containerList.stream ( ) .filter ( specificContainer - > specificContainer.getId ( ) .equals ( containerId ) ) .findAny ( ) .orElseThrow ( ( ) - > new CustomInternalException ( `` some special failure message '' ) ) ; }"
"public class Item { private String name ; private int qty ; public Item ( ) { } public Item ( String name , int qty ) { this.name = name ; this.qty = qty ; } public List < Item > unpack ( ) { List < Item > items = new ArrayList < > ( ) ; items.add ( new Item ( `` foo '' , 2 ) ) ; items.add ( new Item ( `` bar '' , 3 ) ) ; items.add ( new Item ( `` baz '' , 1 ) ) ; List < Item > unpackedItems = unpack ( items ) ; System.out.println ( unpackedItems.size ( ) ) ; // it should be == 6 return unpackedItems ; } private List < Item > unpack ( List < Item > items ) { // .. } }"
"0 1 2 3 4 hello 5 6 7 8 9 hello 10 11 12 13 14 hello 15 16 17 18 19 hello class Timer { private int count = 0 ; private int N ; private String msg ; private boolean printMsg = false ; public Timer ( String s , int N ) { msg = s ; this.N = N ; } public synchronized void printMsg ( ) throws InterruptedException { while ( count % N ! = 0 || ! printMsg ) wait ( ) ; System.out.print ( msg + `` `` ) ; printMsg = false ; } public synchronized void printTime ( ) { printMsg = true ; System.out.print ( count + `` `` ) ; count ++ ; notifyAll ( ) ; } public static void main ( String [ ] args ) { Timer t = new Timer ( `` hello '' , 5 ) ; new TimerThread ( t ) .start ( ) ; new MsgThread ( t ) .start ( ) ; } } class TimerThread extends Thread { private Timer t ; public TimerThread ( Timer s ) { t = s ; } public void run ( ) { try { for ( ; ; ) { t.printTime ( ) ; sleep ( 100 ) ; } } catch ( InterruptedException e ) { return ; } } } class MsgThread extends Thread { private Timer t ; public MsgThread ( Timer s ) { t = s ; } public void run ( ) { try { for ( ; ; ) { t.printMsg ( ) ; } } catch ( InterruptedException e ) { return ; } } }"
public class SimpleTest { @ Test public void testCompletableFuture ( ) throws Exception { Thread thread = new Thread ( SimpleTest : :longOperation ) ; thread.start ( ) ; bearSleep ( 1 ) ; thread.interrupt ( ) ; bearSleep ( 5 ) ; } public static void longOperation ( ) { System.out.println ( `` started '' ) ; try { boolean b = true ; while ( true ) { b = ! b ; } } catch ( Exception e ) { System.out.println ( `` exception happened hurray ! `` ) ; } System.out.println ( `` completed '' ) ; } private static void bearSleep ( long seconds ) { try { TimeUnit.SECONDS.sleep ( seconds ) ; } catch ( InterruptedException e ) { } } }
"class Snow { } class Powder extends Snow { } class Light extends Powder { } class Heavy extends Powder { } class Crusty extends Snow { } class Slush extends Snow { } public class AsListInference { public static void main ( String [ ] args ) { //The book says it wo n't compile , but actually it does . List < Snow > snow2 = Arrays.asList ( new Light ( ) , new Heavy ( ) ) ; } }"
char c1 = 123 ; //Compiles finechar c2 = 123456 ; //Error : can not convert from int to char float f1 = 0.3 ; //Error : can not convert from double to floatfloat f2 = 0.3f ; //Compiles fine
"public String myMethod ( String keyValue ) { Map < String , Integer > keyValueToRowIndex = ... Integer rowIndex = ( keyValue == null ) ? 0 : keyValueToRowIndex.get ( keyValue ) ; if ( rowIndex == null ) return null ; ... }"
interface Ranker < T > { public void rank ( List < T > item ) ; } RankerForTypeA RaknerForTypeB RankerForTypeC RankerForTypeD RankerForTypeE RankerForTypeF RankerForTypeG RankerForTypeH RankerForTypeI RankerForTypeJ RankerForTypeK ... interface RankerFactory { Ranker < A > getRankerForA ( paramsForA ) ; Ranker < B > getRankerForB ( paramsForB ) ; Ranker < C > getRankerForC ( paramsForC ) ; ... } public class DefaultRankerFactory implements RankerFactory { Ranker < A > getRankerForA ( paramsForA ) { getRankerForB ( paramsForB ) ... } Ranker < B > getRankerForB ( paramsForB ) { getRankerForC ( paramsForC ) ... } Ranker < C > getRankerForC ( paramsForC ) { ... } } RankerForTypeA CustomRankerForTypeB ... RankerForTypeF RankerForTypeG RankerForTypeH RankerForTypeI RankerForTypeJ RankerForTypeK ... public class CustomRankerFactory extends DefaultRankerFactory { Ranker < B > getRankerForB ( paramsForB ) { //Define instantiation logic for CustomRankerForTypeB ... } }
"import java.util . * ; public class RentalGeneric < T > { private List < T > rentalPool ; private int maxNum ; public RentalGeneric ( int maxNum , List < T > rentalPool ) { this.maxNum = maxNum ; this.rentalPool = rentalPool ; } public T getRental ( ) { return rentalPool.get ( 0 ) ; } public void returnRental ( T returnedThing ) { rentalPool.add ( returnedThing ) ; } }"
"boolean ready = target.hasReqArtifacts ( reqStones , reqPotions , reqWands , reqWeapons ) ; //checks to see if creature already has correct amount of each item . //If it does it should skip pool interaction until it dumps its used items //back into the pool . System.out.println ( `` Ready : `` + ready ) ; while ( ! ready ) { //begin pool interaction synchronized ( target.poolParty ) { System.out.println ( `` Ready : `` + ready ) ; System.out.println ( this ) ; while ( target.poolParty.busyPool ) { //busyPool is initialized false startJob.setEnabled ( false ) ; try { target.poolParty.wait ( ) ; } catch ( InterruptedException e ) { } } synchronized ( target.poolParty ) { target.poolParty.busyPool = true ; target.poolParty.notifyAll ( ) ; //notify all threads that they need to wait because this one will proceed } } target.releaseArtifacts ( ) ; // adds all artifacts held by creature to an arraylist in poolParty //then clears the creatures inventory target.pickUpArtifacts ( reqStones , reqPotions , reqWands , reqWeapons ) ; ready = target.hasReqArtifacts ( reqStones , reqPotions , reqWands , reqWeapons ) ; if ( ready ) { synchronized ( target.poolParty ) { System.out.println ( `` has required Items '' ) ; target.poolParty.busyPool = false ; target.poolParty.notify ( ) ; } } else { synchronized ( target.poolParty ) { System.out.println ( `` Does not has required Items '' ) ; target.poolParty.busyPool = false ; target.releaseArtifacts ( ) ; target.poolParty.notifyAll ( ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { } } } } //end pool interaction"
public class StatusCategory { @ JsonProperty ( `` key '' ) private final String m_key = null ; public String getKey ( ) { return ( m_key ) ; } } -keep class oracle.psr.ndr.jira.api.StatusCategory { < init > ; }
"public class BookOverallData { private Long idOfBook ; private String title ; private String authour ; private BigDecimal basePrice ; private Integer discountRate ; } public class TimeDiscount { private Long idOfBook ; private Integer discountRate ; } Set < BookOverallData > booksToReturnSet < TimeDiscount > actualPromotions booksToReturn.forEach ( p - > { final Optional < TimeDiscount > promotion = actualPromotions.stream ( ) .filter ( ap - > Objects.equals ( ap.getIdOfBook ( ) , p.getIdOfBook ( ) ) ) .findFirst ( ) ; promotion.ifPresent ( ap - > p.setDiscountRate ( ap.getDiscountRate ( ) + p.getDiscountRate ( ) ) ) ; } ) ;"
"package org.mypackage ; class Foo { public static void main ( String [ ] args ) { Bar casted = ( Bar ) args [ 0 ] ; // want to detect this casting action ! } } if ( isInstanceOfMyEntity ( someEntity ) ) { // formerly , this was sufficient : // MyEntity myEntity = ( MyEntity ) someEntity ; // now , this is required *everywhere* it is casted : MyEntity myEntity = ( MyEntity ) Hibernate.unproxy ( someEntity ) ; ... }"
plugins { id `` com.gradle.enterprise '' version `` 3.5 '' } gradleEnterprise { server = `` https : //gradle-enterprise.mycompany.com '' }
if ( animalData ! =null & & animalData.getBreedData ( ) ! =null & & dogx.getBreed ( ) ! = null & & dogx.getBreed ( ) .getBreedCode ( ) ! = null & & animalData.getBreedData ( ) .get ( dogx.getBreed ( ) .getBreedCode ( ) ) ! = null ) { dogx.getBreed ( ) .setBreedId ( animalData.getBreedData ( ) .get ( dogx.getBreed ( ) .getBreedCode ( ) ) ) ; } try { dogx.getBreed ( ) .setBreedId ( animalData.getBreedData ( ) .get ( dogx.getBreed ( ) .getBreedCode ( ) ) ) ; } catch ( Exception e ) { }
public void click ( By elementBy ) { By bounceExchange = By.className ( `` bx-slab '' ) ; By bounceExchangeClose = By.className ( `` bx-close '' ) ; //close bouncex if its open if ( elementExists ( bounceExchange ) ) { WebElement bounceX = driver.findElement ( bounceExchange ) ; if ( bounceX.isDisplayed ( ) ) { System.out.println ( `` Closing bounce exchange '' ) ; try { driver.findElement ( bounceExchangeClose ) .click ( ) ; } catch ( Exception e ) { //ignore } } } driver.findElement ( elementBy ) .click ( ) ; } Actions actions = new Actions ( driver ) ; actions.keyDown ( Keys.ESCAPE ) .build ( ) .perform ( ) ; actions.keyUp ( Keys.ESCAPE ) .build ( ) .perform ( ) ; driver.findElement ( By.tagName ( `` html '' ) ) .sendKeys ( Keys.Escape ) ; < div class= '' bx-slab '' > < div class= '' bx-align '' > < div class= '' bx-creative bx-creative-874700 '' id= '' bx-creative-874700 '' > < div class= '' bx-wrap '' > < a id= '' bx-close-inside-874700 '' class= '' bx-close bx-close-link bx-close-inside '' href= '' javascript : void ( 0 ) '' data-click= '' close '' > < svg class= '' bx-close-xsvg '' viewBox= '' 240 240 20 20 '' > .. < /svg > < /a > ... < /div >
public static void foo ( List < Bar > list ) { // ... } public static void foo ( ImmutableList < Bar > list ) { // ... }
'call ( ContainsMonitor ) ' can not invoke 'call ( ? extends webscout.Monitor ) ' in 'WebScoutCallable ' WebScoutCallable < ? extends Monitor > handler ; public setCallable ( WebScoutCallable < ? extends Monitor > callable ) { this.handler = callable ; } public interface WebScoutCallable < T extends Monitor > { public void call ( T caller ) ; } public class ContainsMonitor extends Monitor { public void handleDocument ( ) { handler.call ( this ) ; } }
"public class MyProgram { public void start ( ) { int a = 1 ; int [ ] b = { 1 , 2 , 3 } ; int [ ] c = { 1 , 2 , 3 } ; method1 ( a , b [ 0 ] , c ) ; System.out.println ( `` a = `` + a ) ; System.out.println ( `` b [ 0 ] = `` + b [ 0 ] ) ; System.out.println ( `` c [ 0 ] = `` + c [ 0 ] ) ; } private void method1 ( int x , int y , int [ ] z ) { x++ ; y = 10 ; if ( z.length > = 1 ) { z [ 0 ] = 100 ; } System.out.println ( x ) ; System.out.println ( y ) ; } } a = 1b [ 0 ] = 1c [ 0 ] = 100"
"Map < String , Set < String > > original = Maps.newHashMap ( ) ; original.put ( `` Scott '' , Sets.newHashSet ( `` Apple '' , `` Pear '' , `` Banana '' ) ; original.put ( `` Jack '' , Sets.newHashSet ( `` Banana '' , `` Apple '' , `` Orange '' ) ; `` Apple '' : [ `` Scott '' , `` Jack '' ] `` Pear '' : [ `` Scott '' ] `` Banana '' : [ `` Scott '' , `` Jack '' ] `` Orange '' : [ `` Jack '' ] Map < String , Set < String > > reversed = original.entrySet ( ) .stream ( ) .map ( x - > ? ? ? ? ) .collect ( ? ? )"
public class Threads2 implements Runnable { public void run ( ) { System.out.println ( `` run . `` ) ; throw new RuntimeException ( `` Problem '' ) ; } public static void main ( String [ ] args ) { Thread t = new Thread ( new Threads2 ( ) ) ; t.start ( ) ; System.out.println ( `` End of method . `` ) ; } }
class Sup { int a = 8 ; public void printA ( ) { System.out.println ( a ) ; } Sup ( ) { printA ( ) ; } } public class Sub extends Sup { int a = 9 ; @ Override public void printA ( ) { System.out.println ( a ) ; } Sub ( ) { printA ( ) ; } public static void main ( String [ ] args ) { Sub sub = new Sub ( ) ; } }
public class LogService { public void stop ( ) { synchronized ( this ) { isShutdown = true ; } loggerThread.interrupt ( ) ; /* Is it necesarry ? */ } public void log ( String msg ) throws InterruptedException { synchronized ( this ) { if ( isShutdown ) throw new IllegalStateException ( ... ) ; ++reservations ; } queue.put ( msg ) ; } private class LoggerThread extends Thread { public void run ( ) { try { while ( true ) { try { synchronized ( LogService.this ) { if ( isShutdown & & reservations == 0 ) break ; } String msg = queue.take ( ) ; synchronized ( LogService.this ) { -- reservations ; } writer.println ( msg ) ; } catch ( InterruptedException e ) { } /* Do nothing */ } } finally { writer.close ( ) ; } } } }
"https : //host.com/path ? sort= [ { `` attribute1 '' : `` ASC '' } , { `` attribute2 '' : `` DESC '' } ]"
public static void main ( String [ ] args ) { Integer a = 1 ; Integer b = 0 ; b=a ; System.out.println ( a ) ; System.out.println ( b ) ; ++a ; System.out.println ( a ) ; System.out.println ( b ) ; } public static void main ( String [ ] args ) { ArrayList < Integer > a = new ArrayList < Integer > ( ) ; ArrayList < Integer > b = new ArrayList < Integer > ( ) ; a.add ( 1 ) ; a.add ( 1 ) ; a.add ( 1 ) ; a.add ( 1 ) ; b=a ; System.out.println ( a.size ( ) ) ; System.out.println ( b.size ( ) ) ; b.add ( 2 ) ; System.out.println ( a.size ( ) ) ; System.out.println ( b.size ( ) ) ; }
str.matches ( `` 1*|2*|3*|4*|5*|6*|7*|8*|9*|0* '' )
"public class Play { public static void main ( String [ ] args ) throws Exception { outer ( Integer.class , inner ( `` abc '' ) ) ; } static < C > void outer ( Class < C > c , List < ? super C > s ) { } static < C > List < C > inner ( C c ) { return null ; } }"
public void run ( ) { [ computation 1 goes here here that takes a few seconds ] [ computation 2 goes here that takes a few seconds ] ... . [ computation 30 goes here that takes a few seconds ] } private boolean stop ; public void run ( ) { if ( ! stop ) [ computation 1 goes here here that takes a few seconds ] if ( ! stop ) [ computation 2 goes here that takes a few seconds ] ... . if ( ! stop ) [ computation 30 goes here that takes a few seconds ] } pirivate boolean stop ; public void run ( ) { for ( int i = 0 ; i < computationsN & & ! stop ; i++ ) { computuations.get ( i ) .compute ( ) ; }
public interface A { void myFirstMethod ( ) ; void mySecondMethod ( ) ; } public class MyClass { private List < ? extends A > elements ; public MyClass ( ) { A obj = new A ( ) { @ Override public void myFirstMethod ( ) { //SOME CODE } @ Override public void mySecondMethod ( ) { //SOME CODE } } ; elements.add ( obj ) ; } } public class MyClass { private List < A > elements ; public MyClass ( List < A > elements ) { this.elements = elements ; elements.add ( obj ) ; } } //A1 implements AList < A1 > list = new ArrayList < A1 > ( ) ; MyClass ( list ) ;
"INSERT INTO MYTABLE ( f1 , f2 , f3 , f4 ) VALUES ( 1,2,3,4 ) ON DUPLICATE KEY UPDATE f4=5 ; statement.execute ( query ) ;"
import java.nio.ByteBuffer ; …ByteBuffer byteBuffer = … ; //init somehowbyteBuffer.flip ( ) ; //what ends up in the ` .class ` file ? @ Overridepublic ByteBuffer flip ( ) { super.flip ( ) ; return this ; }
Random r = new Random ( ) ; int k = 1 + r.nextInt ( n ) ; for ( int i = 0 ; i < n ; i += k ) ;
"public class Test { public static void printValue ( int i , int j , int k ) { System.out.println ( `` int '' ) ; } public static void printValue ( byte ... b ) { System.out.println ( `` long '' ) ; } public static void main ( String ... args ) { byte b = 9 ; printValue ( b , b , b ) ; } }"
if ( stuff ) doThings ( ) ; else if ( something ) doOtherThings ( ) ; else if ( otherStuff ) doStuff ( ) ; else // .. this is n't supposed to be reached
"import org.openjdk.jmh.infra.Blackhole ; import org.openjdk.jmh.annotations . * ; import java.util.concurrent.TimeUnit ; import java.util.stream.IntStream ; import java.math.BigInteger ; @ Warmup ( iterations=5 ) @ Measurement ( iterations=10 ) @ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.MICROSECONDS ) @ State ( Scope.Benchmark ) @ Fork ( 2 ) public class Factorial { private static final BigInteger ONE = BigInteger.valueOf ( 1 ) ; @ Param ( { `` 10 '' , `` 100 '' , `` 1000 '' , `` 10000 '' , `` 50000 '' } ) private int n ; public static BigInteger naive ( int n ) { BigInteger r = ONE ; for ( int i = 2 ; i < = n ; ++i ) r = r.multiply ( BigInteger.valueOf ( i ) ) ; return r ; } public static BigInteger streamed ( int n ) { if ( n < 2 ) return ONE ; return IntStream.rangeClosed ( 2 , n ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger : :multiply ) .get ( ) ; } public static BigInteger streamedParallel ( int n ) { if ( n < 2 ) return ONE ; return IntStream.rangeClosed ( 2 , n ) .parallel ( ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger : :multiply ) .get ( ) ; } public static BigInteger fourBlocks ( int n ) { if ( n < 2 ) return ONE ; BigInteger r1 = ONE , r2 = ONE , r3 = ONE , r4 = ONE ; int i ; for ( i = n ; i > 4 ; i -= 4 ) { r1 = r1.multiply ( BigInteger.valueOf ( i ) ) ; r2 = r2.multiply ( BigInteger.valueOf ( i - 1 ) ) ; r3 = r3.multiply ( BigInteger.valueOf ( i - 2 ) ) ; r4 = r4.multiply ( BigInteger.valueOf ( i - 3 ) ) ; } int mult = i == 4 ? 24 : i == 3 ? 6 : i == 2 ? 2 : 1 ; return r1.multiply ( r2 ) .multiply ( r3.multiply ( r4 ) ) .multiply ( BigInteger.valueOf ( mult ) ) ; } public static BigInteger streamedShift ( int n ) { if ( n < 2 ) return ONE ; int p = 0 , c = 0 ; while ( ( n > > p ) > 1 ) { p++ ; c += n > > p ; } return IntStream.rangeClosed ( 2 , n ) .map ( i - > i > > Integer.numberOfTrailingZeros ( i ) ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger : :multiply ) .get ( ) .shiftLeft ( c ) ; } public static BigInteger streamedParallelShift ( int n ) { if ( n < 2 ) return ONE ; int p = 0 , c = 0 ; while ( ( n > > p ) > 1 ) { p++ ; c += n > > p ; } return IntStream.rangeClosed ( 2 , n ) .parallel ( ) .map ( i - > i > > Integer.numberOfTrailingZeros ( i ) ) .mapToObj ( BigInteger : :valueOf ) .reduce ( BigInteger : :multiply ) .get ( ) .shiftLeft ( c ) ; } @ Benchmark public void testNaive ( Blackhole bh ) { bh.consume ( naive ( n ) ) ; } @ Benchmark public void testStreamed ( Blackhole bh ) { bh.consume ( streamed ( n ) ) ; } @ Benchmark public void testStreamedParallel ( Blackhole bh ) { bh.consume ( streamedParallel ( n ) ) ; } @ Benchmark public void testFourBlocks ( Blackhole bh ) { bh.consume ( fourBlocks ( n ) ) ; } @ Benchmark public void testStreamedShift ( Blackhole bh ) { bh.consume ( streamedShift ( n ) ) ; } @ Benchmark public void testStreamedParallelShift ( Blackhole bh ) { bh.consume ( streamedParallelShift ( n ) ) ; } } Benchmark ( n ) Mode Cnt Score Error UnitsFactorial.testFourBlocks 10 avgt 20 0.409 ± 0.027 us/opFactorial.testFourBlocks 100 avgt 20 4.752 ± 0.147 us/opFactorial.testFourBlocks 1000 avgt 20 113.801 ± 7.159 us/opFactorial.testFourBlocks 10000 avgt 20 10626.187 ± 54.785 us/opFactorial.testFourBlocks 50000 avgt 20 281522.808 ± 13619.674 us/opFactorial.testNaive 10 avgt 20 0.297 ± 0.002 us/opFactorial.testNaive 100 avgt 20 5.060 ± 0.036 us/opFactorial.testNaive 1000 avgt 20 277.902 ± 1.311 us/opFactorial.testNaive 10000 avgt 20 32471.921 ± 1092.640 us/opFactorial.testNaive 50000 avgt 20 970355.227 ± 64386.653 us/opFactorial.testStreamed 10 avgt 20 0.326 ± 0.002 us/opFactorial.testStreamed 100 avgt 20 5.393 ± 0.190 us/opFactorial.testStreamed 1000 avgt 20 265.550 ± 1.772 us/opFactorial.testStreamed 10000 avgt 20 29871.366 ± 234.457 us/opFactorial.testStreamed 50000 avgt 20 894549.237 ± 5453.425 us/opFactorial.testStreamedParallel 10 avgt 20 6.114 ± 0.500 us/opFactorial.testStreamedParallel 100 avgt 20 10.719 ± 0.786 us/opFactorial.testStreamedParallel 1000 avgt 20 72.225 ± 0.509 us/opFactorial.testStreamedParallel 10000 avgt 20 2811.977 ± 14.599 us/opFactorial.testStreamedParallel 50000 avgt 20 49501.716 ± 729.646 us/opFactorial.testStreamedParallelShift 10 avgt 20 6.684 ± 0.549 us/opFactorial.testStreamedParallelShift 100 avgt 20 11.176 ± 0.779 us/opFactorial.testStreamedParallelShift 1000 avgt 20 71.056 ± 3.918 us/opFactorial.testStreamedParallelShift 10000 avgt 20 2641.108 ± 142.571 us/opFactorial.testStreamedParallelShift 50000 avgt 20 46480.544 ± 405.648 us/opFactorial.testStreamedShift 10 avgt 20 0.402 ± 0.006 us/opFactorial.testStreamedShift 100 avgt 20 5.086 ± 0.039 us/opFactorial.testStreamedShift 1000 avgt 20 237.279 ± 1.566 us/opFactorial.testStreamedShift 10000 avgt 20 27572.709 ± 135.489 us/opFactorial.testStreamedShift 50000 avgt 20 874699.213 ± 53645.087 us/o static BigInteger Streamed ( int n ) { return n < 2 ? 1 : Enumerable.Range ( 2 , n - 1 ) .Aggregate ( BigInteger.One , ( acc , elm ) = > acc*elm ) ; } static BigInteger StreamedParallel ( int n ) { return n < 2 ? 1 : Enumerable.Range ( 2 , n - 1 ) .AsParallel ( ) .Aggregate ( BigInteger.One , ( acc , elm ) = > acc * elm ) ; }"
final Pattern pattern = Pattern.compile ( Pattern.quote ( someString ) + `` \\b '' ) ; final String value = someString + `` `` ; System.out.println ( pattern.matcher ( value ) .find ( ) ) ;
"public static void createFile ( String directoryPath , String fileName ) for ( int i = 0 ; i < 5 ; i++ ) { Utils.createFile ( getDirectoryLocation ( ) , `` test.txt '' ) ; } IntStream.rangeClosed ( 1 , 5 ) .forEach ( Utils : :someMethod ) ;"
"String s1 = `` aardvark '' ; String s2 = `` zebra '' ; int c = s1.compareTo ( s2 ) ; // -25if ( c > 0 ) { c = 1 ; } else if ( c < 0 ) { c = -1 ; } String s1 = `` '' ; String s2 = `` m '' ; for ( int i = 0 ; i < 100 ; i++ ) { for ( char j = ' a ' ; j < ' z ' ; j++ ) { s2 = ( `` '' + j ) ; solution1 ( s1.compareTo ( s2 ) ) ; } } if ( c > 0 ) { c = 1 ; } else if ( c < 0 ) { c = -1 ; } c = ( int ) Math.signum ( c ) ; c = c > 0 ? 1 : c < 0 ? -1 : 0 ; c = Math.max ( -1 , Math.min ( 1 , c ) ) ; c = Integer.compare ( c , 0 ) ;"
"package messagesystem ; /** * * @ author Frank */public enum MessageType { ALL , GENERAL , SEND , RECEIVE , LOG , EXCEPTION , DEBUG , PM ; public final static MessageType FOCUSED = GENERAL ; private final String value ; MessageType ( ) { String firstLetter = name ( ) .substring ( 0 , 1 ) ; String otherLetters = name ( ) .substring ( 1 , name ( ) .length ( ) ) ; this.value = firstLetter.toUpperCase ( ) + otherLetters.toLowerCase ( ) ; } @ Override public String toString ( ) { return value ; } } this.focused = MessageType.FOCUSED.toString ( ) ; System.out.println ( focused ) ;"
for ( int i = 0 ; i < myJsonArray.length ( ) ; i++ ) { myJsonArray.getString ( i ) ; } for ( String s : myJsonArray ) ;
"public LinkedHashSet < WsQuestion > get ( String quizId , String companyId ) { LinkedHashSet < QuizQuestionWithQuestion > toReturn = quizQuestionRepository.findAllQuizQuestionWithQuestionByQuizId ( quizId ) ; return ( toReturn.stream ( ) .map ( this : :createWsQuestion ) .sorted ( comparing ( WsQuestion : :getTradPrefix.toString ( ) .length ( ) ) ) .collect ( Collectors.toCollection ( LinkedHashSet : :new ) ) ) ; }"
"public final static int primitiveOnly ( int dummy , int add1 , int add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int primitiveToWrapper ( int dummy , int add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int wrapperToPrimitive ( Integer dummy , Integer add1 , int add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static Integer wrapperToWrapper ( Integer dummy , Integer add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int primitiveOnly ( int dummy , int add1 , int add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int primitiveToWrapperIntDummy ( int dummy , int add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static Integer primitiveToWrapperIntegerDummy ( Integer dummy , int add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int wrapperToPrimitiveIntDummy ( int dummy , Integer add1 , int add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static Integer wrapperToPrimitiveIntegerDummy ( Integer dummy , Integer add1 , int add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static int wrapperToWrapperIntDummy ( int dummy , Integer add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; } public final static Integer wrapperToWrapperIntegerDummy ( Integer dummy , Integer add1 , Integer add2 ) { for ( int i = 0 ; i < 10 ; i++ ) { dummy += ( add1 + add2 ) ; } return dummy ; }"
"public void actionPerformed ( ActionEvent e ) { user.setCoin ( user.getCoin ( ) - 5 ) ; user.setMaxJump ( 5 ) ; EpixController.getInstance ( ) .coinsUpdate ( user , -5 ) ; SwingUtilities.updateComponentTreeUI ( epix ) ; epix.revalidate ( ) ; epix.repaint ( ) ; } public EpixView ( User user ) { this.setUser ( user ) ; JFrame epix = new JFrame ( ) ; System.out.println ( user.getMaxJump ( ) ) ; epix.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; epix.setResizable ( false ) ; epix.setBounds ( 100 , 100 , 801 , 523 ) ; epix.setLocationRelativeTo ( null ) ; epix.getContentPane ( ) .removeAll ( ) ; /* * menuCard */ menuCard.setLayout ( null ) ; //coin menuCardCoinImage.setBounds ( 0 , 10 , 64 , 64 ) ; menuCard.add ( menuCardCoinImage ) ; menuCardCoinImage.setIcon ( new ImageIcon ( coinSpinPath ) ) ; menuCardCoinLabel = new JLabel ( `` '' + getUser ( ) .getCoin ( ) ) ; menuCardCoinLabel.setFont ( new Font ( `` Modern No . 20 '' , Font.PLAIN , 26 ) ) ; menuCardCoinLabel.setBounds ( 67 , 10 , 56 , 64 ) ; menuCard.add ( menuCardCoinLabel ) ; //player menuCardPlayerLabel = new JLabel ( `` Willkommen zurück , `` + getUser ( ) .getUsername ( ) ) ; menuCardPlayerLabel.setBounds ( 598 , 18 , 239 , 36 ) ; menuCard.add ( menuCardPlayerLabel ) ; spielenButton.setBounds ( 485 , 319 , 89 , 23 ) ; menuCard.add ( spielenButton ) ; ranglisteButton.setBounds ( 485 , 353 , 89 , 23 ) ; menuCard.add ( ranglisteButton ) ; menuCardBackgroundImage.setIcon ( new ImageIcon ( backgroundPath ) ) ; menuCardBackgroundImage.setBounds ( 0 , 0 , 801 , 523 ) ; menuCard.add ( menuCardBackgroundImage ) ; cards.add ( menuCard , `` menuCard '' ) ; /* * upgradeCard */ upgradeCard.setLayout ( null ) ; //coin upgradeCardCoinImage.setBounds ( 0 , 10 , 64 , 64 ) ; upgradeCardCoinImage.setIcon ( new ImageIcon ( coinSpinPath ) ) ; upgradeCard.add ( upgradeCardCoinImage ) ; upgradeCardCoinLabel = new JLabel ( `` '' + getUser ( ) .getCoin ( ) ) ; upgradeCardCoinLabel.setBounds ( 67 , 10 , 56 , 64 ) ; upgradeCardCoinLabel.setFont ( new Font ( `` Modern No . 20 '' , Font.PLAIN , 26 ) ) ; upgradeCard.add ( upgradeCardCoinLabel ) ; //player upgradeCardPlayerLabel = new JLabel ( `` Willkommen zurück , `` + getUser ( ) .getUsername ( ) ) ; upgradeCardPlayerLabel.setBounds ( 598 , 18 , 239 , 36 ) ; upgradeCard.add ( upgradeCardPlayerLabel ) ; //maxHealthBar healthLabel.setHorizontalAlignment ( SwingConstants.RIGHT ) ; healthLabel.setBounds ( 191 , 127 , 110 , 36 ) ; upgradeCard.add ( healthLabel ) ; JProgressBar maxHealthBar = new JProgressBar ( ) ; maxHealthBar.setValue ( 0 ) ; maxHealthBar.setBounds ( 327 , 127 , 185 , 36 ) ; upgradeCard.add ( maxHealthBar ) ; plusHealthButton.setBounds ( 522 , 130 , 41 , 30 ) ; upgradeCard.add ( plusHealthButton ) ; //maxJumpBar jumpLabel.setHorizontalAlignment ( SwingConstants.RIGHT ) ; jumpLabel.setBounds ( 191 , 174 , 110 , 36 ) ; upgradeCard.add ( jumpLabel ) ; JProgressBar maxJumpBar = new JProgressBar ( ) ; maxJumpBar.setValue ( 0 ) ; maxJumpBar.setBounds ( 327 , 174 , 185 , 36 ) ; upgradeCard.add ( maxJumpBar ) ; plusJumpButton.setBounds ( 522 , 177 , 41 , 30 ) ; plusJumpButton.addActionListener ( new PlusJumpListener ( getUser ( ) , maxJumpBar , epix ) ) ; upgradeCard.add ( plusJumpButton ) ; //maxSpeed speedLabel.setHorizontalAlignment ( SwingConstants.RIGHT ) ; speedLabel.setBounds ( 191 , 221 , 110 , 36 ) ; upgradeCard.add ( speedLabel ) ; JProgressBar maxSpeedBar = new JProgressBar ( ) ; maxSpeedBar.setValue ( 0 ) ; maxSpeedBar.setBounds ( 327 , 221 , 185 , 36 ) ; upgradeCard.add ( maxSpeedBar ) ; plusSpeedButton.setBounds ( 522 , 224 , 41 , 30 ) ; upgradeCard.add ( plusSpeedButton ) ; //damageBar damageLabel.setHorizontalAlignment ( SwingConstants.RIGHT ) ; damageLabel.setBounds ( 191 , 268 , 110 , 36 ) ; upgradeCard.add ( damageLabel ) ; JProgressBar damageBar = new JProgressBar ( ) ; damageBar.setValue ( 0 ) ; damageBar.setBounds ( 327 , 268 , 185 , 36 ) ; upgradeCard.add ( damageBar ) ; plusDamageButton.setBounds ( 522 , 271 , 41 , 30 ) ; upgradeCard.add ( plusDamageButton ) ; levelAuswählenButton.setBounds ( 395 , 361 , 168 , 30 ) ; upgradeCard.add ( levelAuswählenButton ) ; upgradeZurückButton.setBounds ( 254 , 361 , 131 , 30 ) ; upgradeCard.add ( upgradeZurückButton ) ; upgradeCardBackgroundImage.setBounds ( 0 , 0 , 801 , 523 ) ; upgradeCardBackgroundImage.setIcon ( new ImageIcon ( backgroundPath ) ) ; upgradeCard.add ( upgradeCardBackgroundImage ) ; cards.add ( upgradeCard , `` upgradeCard '' ) ; /* * levelAuswahlCard */ levelAuswahlCard.setLayout ( null ) ; level1Button.setBounds ( 67 , 159 , 171 , 170 ) ; EpixController.getInstance ( ) .checkLevelSaved ( user , level1Button ) ; levelAuswahlCard.add ( level1Button ) ; level2Button.setBounds ( 308 , 159 , 171 , 170 ) ; EpixController.getInstance ( ) .checkLevelSaved ( user , level2Button ) ; levelAuswahlCard.add ( level2Button ) ; bossLevelButton.setBounds ( 550 , 159 , 171 , 170 ) ; EpixController.getInstance ( ) .checkLevelSaved ( user , bossLevelButton ) ; levelAuswahlCard.add ( bossLevelButton ) ; levelZurückBtton.setBounds ( 334 , 378 , 121 , 28 ) ; levelAuswahlCard.add ( levelZurückBtton ) ; levelAuswahlCardCoinImage.setBounds ( 0 , 10 , 64 , 64 ) ; levelAuswahlCardCoinImage.setIcon ( new ImageIcon ( coinSpinPath ) ) ; levelAuswahlCard.add ( levelAuswahlCardCoinImage ) ; levelAuswahlCardCoinLabel = new JLabel ( `` '' + getUser ( ) .getCoin ( ) ) ; levelAuswahlCardCoinLabel.setBounds ( 67 , 10 , 56 , 64 ) ; levelAuswahlCardCoinLabel.setFont ( new Font ( `` Modern No . 20 '' , Font.PLAIN , 26 ) ) ; levelAuswahlCard.add ( levelAuswahlCardCoinLabel ) ; levelAuswahlCardPlayerLabel = new JLabel ( `` Willkommen zurück , `` + getUser ( ) .getUsername ( ) ) ; levelAuswahlCardPlayerLabel.setBounds ( 598 , 18 , 239 , 36 ) ; levelAuswahlCard.add ( levelAuswahlCardPlayerLabel ) ; levelAuswahlCardBackgroundImage.setIcon ( new ImageIcon ( backgroundPath ) ) ; levelAuswahlCardBackgroundImage.setBounds ( 0 , 0 , 801 , 523 ) ; levelAuswahlCard.add ( levelAuswahlCardBackgroundImage ) ; cards.add ( levelAuswahlCard , `` levelAuswahlCard '' ) ; /* * Listener */ //menuCard spielenButton.addActionListener ( new MenuCardButtonListener ( cards ) ) ; //upgradeCard upgradeZurückButton.addActionListener ( new UpgradeCardButtonListener ( cards ) ) ; levelAuswählenButton.addActionListener ( new UpgradeCardButtonListener ( cards ) ) ; //levelAuswahlCard levelZurückBtton.addActionListener ( new LevelAuswahlCardButtonListener ( cards , getUser ( ) , epix ) ) ; level1Button.addActionListener ( new LevelAuswahlCardButtonListener ( cards , getUser ( ) , epix ) ) ; level2Button.addActionListener ( new LevelAuswahlCardButtonListener ( cards , getUser ( ) , epix ) ) ; bossLevelButton.addActionListener ( new LevelAuswahlCardButtonListener ( cards , getUser ( ) , epix ) ) ; epix.setContentPane ( cards ) ; epix.setVisible ( true ) ; }"
"Validation error : HierarchicalRequirement.parentArtifact should not be set if HierarchicalRequirement.Parent is set and vice versa JsonObject obj = new JsonObject ( ) ; jsonObject.addProperty ( `` Parent '' , `` < Parent User story ref > '' ) ; UpdateRequest updateRequest = new UpdateRequest ( `` < Child User story ref > '' , obj ) ; UpdateResponse updateResponse = rallyApi.update ( updateRequest ) ;"
"String regexStr = `` . * '' ; String replacementStr = `` REPLACEMENT '' String initialStr = `` hello '' ; String finalStr = initialStr.replaceAll ( regexStr , replacementStr ) ; // Expected Result : finalStr == `` REPLACEMENT '' // Actual Result : finalStr == `` REPLACEMENTREPLACEMENT ''"
"try { pi = context.getPackageManager ( ) .getPackageInfo ( PACKAGE_NAME , PackageManager.GET_PERMISSIONS ) ; for ( String perm : pi.requestedPermissions ) { Log.e ( `` Foo '' , perm ) ; } } catch ( Exception e ) { } class AppViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener { AppViewHolder ( View itemView , Context context , List < App > apps ) { super ( itemView ) ; txt_show_permission = itemView.findViewById ( R.id.txt_show_permission ) ; /*The String Buffer For Permissions*/ appNameAndPermissions = new StringBuffer ( ) ; PackageManager pm = context.getPackageManager ( ) ; List < ApplicationInfo > packages = pm.getInstalledApplications ( PackageManager.GET_META_DATA ) ; for ( ApplicationInfo applicationInfo : packages ) { Log.d ( TAG , `` App : `` + applicationInfo.name + `` Package : `` + applicationInfo.packageName ) ; PackageInfo packageInfo = null ; try { packageInfo = pm.getPackageInfo ( applicationInfo.packageName , PackageManager.GET_PERMISSIONS ) ; appNameAndPermissions.append ( packageInfo.packageName + `` ******* : \n '' ) ; //Get Permissions requestedPermissions = packageInfo.requestedPermissions ; if ( requestedPermissions ! = null ) { for ( int i = 0 ; i < requestedPermissions.length ; i++ ) { Log.d ( TAG , requestedPermissions [ i ] ) ; appNameAndPermissions.append ( requestedPermissions [ i ] + `` \n '' ) ; } appNameAndPermissions.append ( `` \n '' ) ; } } catch ( PackageManager.NameNotFoundException e ) { e.printStackTrace ( ) ; } } } holder.txt_show_permission.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { showDialog ( String.valueOf ( appNameAndPermissions ) ) ; } } ) ; public void showDialog ( String txtPermission ) { final Dialog dialog = new Dialog ( context ) ; dialog.requestWindowFeature ( Window.FEATURE_NO_TITLE ) ; dialog.setCancelable ( false ) ; dialog.setContentView ( R.layout.show_permission_dialog ) ; TextView txt_permission = dialog.findViewById ( R.id.txt_permission ) ; Button btn_ok = dialog.findViewById ( R.id.btn_ok ) ; txt_permission.setText ( txtPermission ) ; btn_ok.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { dialog.dismiss ( ) ; } } ) ; dialog.show ( ) ; }"
"val cal = Calendar.getInstance ( TimeZone.getTimeZone ( `` UTC '' ) ) cal.set ( 1980 , 0 , 1 , 0 , 0 , 0 ) val date = new Datedate.setTime ( cal.getTimeInMillis ( ) ) // < - 1980 Jan 01 0:0:0date.setTime ( cal.getTimeInMillis ( ) - 1 ) // < - 1980 Jan 01 0:0:0 too ! ! ! val cal = Calendar.getInstance ( TimeZone.getTimeZone ( `` UTC '' ) ) cal.setTimeInMillis ( 0 ) cal.set ( 1980 , 0 , 1 , 0 , 0 , 0 )"
"public class TicTacToeApp { public static void main ( String [ ] args ) { TicTacToeView view = new TicTacToeView ( ) ; TicTacToeModel model = new TicTacToeModel ( ) ; TicTacToeViewController controller = new TicTacToeViewController ( view , model ) ; view.setVisible ( true ) ; } } public class TicTacToeModel { double xpos , ypos , xr , yr ; char [ ] [ ] position = { { ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' } } ; public void computePos ( int row , int col , int h , int w ) { xpos= ( col+0.5 ) *w/3.0 ; ypos= ( row+0.5 ) *h/3.0 ; xr=w/8.0 ; yr=h/8.0 ; } public boolean isEmpty ( int xpos , int ypos ) { if ( position [ xpos ] [ ypos ] == ' ' ) return true ; return false ; } public void placeO ( int xpos , int ypos ) { position [ xpos ] [ ypos ] = ' O ' ; } public int putX ( ) { for ( int i=0 ; i < 3 ; i++ ) { for ( int j = 0 ; j < 3 ; j++ ) { if ( position [ i ] [ j ] == ' ' ) { position [ i ] [ j ] = ' X ' ; return 0 ; } } } return -1 ; //some error occurred . This is odd . No cells were free . } public void printBoard ( ) { for ( int i=0 ; i < 3 ; i++ ) System.out.println ( position [ i ] [ 0 ] + '' | '' +position [ i ] [ 1 ] + '' | '' +position [ i ] [ 2 ] ) ; } } import java.awt . * ; import javax.swing . * ; import java.awt.event . * ; import java.awt.geom . * ; import javax.swing . * ; import javax.swing.event . * ; import java.util.ArrayList ; public class TicTacToeView extends JFrame { private JButton oButton , xButton ; public JPanel board ; public ArrayList < Shape > shapes ; public TicTacToeView ( ) { shapes = new ArrayList < Shape > ( ) ; JPanel topPanel=new JPanel ( ) ; topPanel.setLayout ( new FlowLayout ( ) ) ; add ( topPanel , BorderLayout.NORTH ) ; add ( board=new Board ( ) , BorderLayout.CENTER ) ; setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; setSize ( 500 , 500 ) ; } private class Board extends JPanel { public void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; int w=getWidth ( ) ; int h=getHeight ( ) ; Graphics2D g2d = ( Graphics2D ) g ; // Draw the grid g2d.setPaint ( Color.WHITE ) ; g2d.fill ( new Rectangle2D.Double ( 0 , 0 , w , h ) ) ; g2d.setPaint ( Color.BLACK ) ; g2d.setStroke ( new BasicStroke ( 4 ) ) ; g2d.draw ( new Line2D.Double ( 0 , h/3 , w , h/3 ) ) ; g2d.draw ( new Line2D.Double ( 0 , h*2/3 , w , h*2/3 ) ) ; g2d.draw ( new Line2D.Double ( w/3 , 0 , w/3 , h ) ) ; g2d.draw ( new Line2D.Double ( w*2/3 , 0 , w*2/3 , h ) ) ; //draw circles and xs by visiting elements in the array List . for ( Shape shape : shapes ) { g2d.setPaint ( Color.BLUE ) ; g2d.draw ( shape ) ; } } } public void addMouseListener ( MouseListener ml ) { board.addMouseListener ( ml ) ; } public static void main ( String [ ] args ) { TicTacToeView ttv = new TicTacToeView ( ) ; ttv.setVisible ( true ) ; } } import java.awt.event . * ; import java.awt.geom . * ; import java.awt.Graphics2D ; import java.awt.Color ; import javax.swing.JOptionPane ; public class TicTacToeViewController implements MouseListener { TicTacToeView view ; TicTacToeModel model ; Color oColor=Color.BLUE , xColor=Color.RED ; public void mousePressed ( MouseEvent e ) { } public void mouseReleased ( MouseEvent e ) { } public void mouseEntered ( MouseEvent e ) { } public void mouseExited ( MouseEvent e ) { } public TicTacToeViewController ( TicTacToeView view , TicTacToeModel model ) { this.view = view ; this.model = model ; view.addMouseListener ( this ) ; } public void play ( int xpos , int ypos ) { if ( model.isEmpty ( xpos , ypos ) ) { model.placeO ( xpos , ypos ) ; drawBoard ( ) ; view.repaint ( ) ; model.putX ( ) ; if ( didWin ( `` X '' ) ) { JOptionPane.showMessageDialog ( null , '' X Wins '' , '' Winner '' , JOptionPane.INFORMATION_MESSAGE ) ; } if ( didWin ( `` O '' ) ) JOptionPane.showMessageDialog ( null , '' O Wins '' , '' Winner '' , JOptionPane.INFORMATION_MESSAGE ) ; } } public void drawBoard ( ) { Graphics2D g2d = ( Graphics2D ) view.board.getGraphics ( ) ; for ( int i=0 ; i < 3 ; i++ ) for ( int j=0 ; j < 3 ; j++ ) { model.computePos ( i , j , view.board.getHeight ( ) , view.board.getWidth ( ) ) ; double xpos = model.xpos ; double xr = model.xr ; double ypos = model.ypos ; double yr = model.yr ; if ( model.position [ i ] [ j ] == ' O ' ) { view.shapes.add ( new Ellipse2D.Double ( xpos-xr , ypos-yr , xr*2 , yr*2 ) ) ; } else if ( model.position [ i ] [ j ] == ' X ' ) { view.shapes.add ( new Line2D.Double ( xpos-xr , ypos-yr , xpos+xr , ypos+yr ) ) ; view.shapes.add ( new Line2D.Double ( xpos-xr , ypos+yr , xpos+xr , ypos-yr ) ) ; } System.out.println ( `` Coords : xpos : '' +xpos+ '' , ypos : '' +ypos+ '' , xr '' +xr+ '' , yr '' +yr ) ; } } public void mouseClicked ( MouseEvent e ) { int ypos=e.getX ( ) *3/view.getWidth ( ) ; int xpos=e.getY ( ) *3/view.getHeight ( ) ; //System.out.println ( `` Play `` +xpos+ '' , '' +ypos ) ; play ( xpos , ypos ) ; } public boolean didWin ( char player ) { int count = 0 ; int count2 = 0 ; for ( int i = 0 ; i < 3 ; i++ ) { for ( int j= 0 ; j < 3 ; j++ ) { if ( model.position [ i ] [ j ] ==player ) { count++ ; if ( count ==2 ) return true ; } } count=0 ; } for ( int k = 0 ; k < 3 ; k++ ) { for ( int l= 0 ; l < 3 ; l++ ) { if ( model.position [ l ] [ k ] ==player ) { count2++ ; if ( count2 ==2 ) return true ; } } count2=0 ; } if ( model.position [ 0 ] [ 0 ] ==player & & model.position [ 1 ] [ 1 ] ==player & & model.position [ 2 ] [ 2 ] ==player ) return true ; if ( model.position [ 0 ] [ 2 ] ==player & & model.position [ 1 ] [ 1 ] ==player & & model.position [ 2 ] [ 0 ] ==player ) return true ; return false ; } }"
"enum Entities { COOL_ENTITY { @ Override public < E extends BaseEntity , I extends EntityIndex < E > > Class < I > getIndexCls ( ) { return CoolIndex.class ; } @ Override public < E extends BaseEntity > Class < E > getEntityCls ( ) { return CoolEntity.class ; } } public abstract < E extends BaseEntity , I extends EntityIndex < E > > Class < I > getIndexCls ( ) ; public abstract < E extends BaseEntity > Class < E > getEntityCls ( ) ; } static < E extends BaseEntity , I extends EntityIndex < E > > boolean isSomeIndexViewable ( Class < I > cls )"
"public String readWidget ( Object widget , Object helper ) ; public String readWidget ( Object widget ) ; //removed unnecessary helper object version a : public static Object sharedFoo ; version b : static Object sharedFoo ; //moved to package private for version b"
class A { public static void main ( String [ ] args ) { try { //some exception } catch ( Exception e ) { //Again some exception } finally { System.out.println ( `` Finally executed '' ) ; } } }
"import asyncioimport timeDELAYS = ( 475 , 500 , 375 , 100 , 250 , 125 , 150 , 225 , 200 , 425 , 275 , 350 , 450 , 325 , 400 , 300 , 175 ) class Office : def __init__ ( self , delay , name , revenue ) : self.delay = delay self.name = name self.revenue = revenue async def compute ( self ) : await asyncio.sleep ( self.delay / 1000 ) print ( f ' { self.name } finished in { self.delay } ms ' ) return self.revenueasync def main ( offices , totest ) : computed = sum ( await asyncio.gather ( * [ o.compute ( ) for o in offices ] ) ) verdict = [ 'nok ' , 'ok ' ] [ computed == totest ] print ( f'Sum of revenues = { computed } { verdict } ' ) if __name__ == `` __main__ '' : offices = [ Office ( DELAYS [ i % len ( DELAYS ) ] , f'Office- { i } ' , 3 * i + 10 ) for i in range ( 500 ) ] totest = sum ( o.revenue for o in offices ) start = time.perf_counter ( ) asyncio.run ( main ( offices , totest ) ) end = time.perf_counter ( ) print ( f'Ends in { ( end-start ) *1000 : .3f } ms ' ) import java.util.concurrent.TimeUnit ; public class Office { private int sleepTime ; private String name ; private int revenue ; public Office ( int sleepTime , String name , int revenue ) { this.sleepTime = sleepTime ; this.name = name ; this.revenue = revenue ; } public int getRevenue ( ) { return revenue ; } public int compute ( ) { try { TimeUnit.MILLISECONDS.sleep ( this.sleepTime ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } System.out.printf ( `` % s finished in % dms on thread % d % n '' , this.name , this.sleepTime , Thread.currentThread ( ) .getId ( ) ) ; return this.revenue ; } } import io.reactivex.Flowable ; import io.reactivex.schedulers.Schedulers ; import java.time.Duration ; import java.time.Instant ; import java.util.ArrayList ; public class Tester { private static int [ ] DELAYS = { 475 , 500 , 375 , 100 , 250 , 125 , 150 , 225 , 200 , 425 , 275 , 350 , 450 , 325 , 400 , 300 , 175 } ; public static void main ( String [ ] args ) { final ArrayList < Office > offices = new ArrayList < > ( ) ; for ( int i = 0 ; i < 500 ; i++ ) { offices.add ( new Office ( DELAYS [ i % DELAYS.length ] , String.format ( `` Office- % d '' , i ) , 3 * i + 10 ) ) ; } int totest = offices.stream ( ) .mapToInt ( Office : :getRevenue ) .sum ( ) ; final Instant start = Instant.now ( ) ; final Flowable < Office > officeObservable = Flowable.fromIterable ( offices ) ; int computation = officeObservable.parallel ( 500 ) .runOn ( Schedulers.io ( ) ) .map ( Office : :compute ) .reduce ( Integer : :sum ) .blockingSingle ( ) ; boolean verdict = computation == totest ; System.out.println ( `` '' + computation + `` `` + ( verdict ? `` ok '' : `` nok '' ) ) ; final Instant end = Instant.now ( ) ; System.out.printf ( `` Ends in % dms % n '' , Duration.between ( start , end ) .toMillis ( ) ) ; } }"
"for ( int i = 0 ; i < temp.length ; i++ ) { if ( map.containsKey ( temp [ i ] ) ) map.put ( temp [ i ] , map.get ( temp [ i ] ) + 1 ) ; else map.put ( temp [ i ] , 1 ) ; for ( int i = 0 ; i < temp.length ; i++ ) { Integer value = map.get ( temp [ i ] ) ; if ( value ! = null ) map.put ( temp [ i ] , value + 1 ) ; else map.put ( temp [ i ] , 1 ) ; }"
List < BookDto > deskOfficer = delegationExtendedDto .stream ( ) .filter ( Objects : :nonNull ) .filter ( d - > d.getMembers ( ) ! =null & & ! d.getMembers ( ) .isEmpty ( ) ) .map ( d - > d.getMembers ( ) .stream ( ) .filter ( Objects : :nonNull ) .filter ( m - > RolesEnum.RESPONSIBLE_ADMIN.equals ( m.getRole ( ) ) ) ) .collect ( Collectors.toList ( ) ) ; Type mismatch : can not convert from List < Stream < BookDto > > to List < BookDto >
"String [ ] folder= { `` proc '' , '' root '' , '' sdcard '' , '' cache '' , '' system '' , '' config '' , '' dev '' , '' sys '' , '' acct '' , '' sbin '' , '' etc '' } ; if ( list [ i ] .getName ( ) .equals ( object ) )"
Class < ? > [ ] groups ( ) default { } ; Class < ? extends Payload > [ ] payload ( ) default { } ;
"import java.util.BitSet ; public class MyClass { private BitSet mask ; public MyClass ( ) { this ( new BitSet ( 4 ) ) ; // want to set all bits first // something like // this ( new BitSet ( 4 ) .set ( 0,3 ) ) ; } public MyClass ( BitSet mask ) { this.mask = mask ; } }"
"A B C D -- -- -- -1 0 0 01 1 0 01 1 1 01 1 1 1 @ Overridepublic boolean isInputInvalid ( Integer a , Integer b , Integer c , Integer d ) { if ( isNotSet ( a ) & & isNotSet ( b ) & & isNotSet ( c ) & & isNotSet ( d ) { return true ; } return ( firstParameterDoesNotExistAndSecondDoesExist ( a , b ) ) || ( firstParameterDoesNotExistAndSecondDoesExist ( b , c ) ) || ( firstParameterDoesNotExistAndSecondDoesExist ( c , d ) ) ; } private boolean firstParameterDoesNotExistAndSecondDoesExist ( Integer firstParameter , Integer secondParameter ) { return isNotSet ( firstParameter ) & & ! isNotSet ( secondParameter ) ; } private boolean isNotSet ( Integer parameter ) { return parameter == null ; } public boolean isInputValid ( Integer a , Integer b , Integer c , Integer d ) { if ( exists ( a ) & & ! exists ( b ) & & ! exists ( c ) & & ! exists ( d ) || // exists ( a ) & & exists ( b ) & & ! exists ( c ) & & ! exists ( d ) || // exists ( a ) & & exists ( b ) & & exists ( c ) & & ! exists ( d ) || // exists ( a ) & & exists ( b ) & & exists ( c ) & & exists ( d ) ) { return true ; } return false ; } private boolean exists ( Integer level ) { return level ! = null ; }"
"import sysfrom javafx.application import Applicationfrom javafx.stage import FileChooser , Stageclass fileBrowser ( Application ) : @ classmethod def main ( cls , args ) : fileBrowser.launch ( cls , args ) def start ( self , primaryStage ) : fc = FileChooser ( ) filter = FileChooser.ExtensionFilter ( `` All Images '' , '*.jpg ' ) fc.getExtensionFilters ( ) .add ( filter ) f = fc.showOpenDialog ( primaryStage ) if __name__ == '__main__ ' : fileBrowser.main ( sys.argv ) Exception in Application start methodTraceback ( most recent call last ) : File `` provaFileChooser.py '' , line 28 , in < module > fileBrowser.main ( sys.argv ) File `` provaFileChooser.py '' , line 15 , in main fileBrowser.launch ( cls , args ) at com.sun.javafx.application.LauncherImpl.launchApplication1 ( LauncherImpl.java:917 ) at com.sun.javafx.application.LauncherImpl.lambda $ launchApplication $ 1 ( LauncherImpl.java:182 ) at java.lang.Thread.run ( Unknown Source ) Caused by : Traceback ( most recent call last ) : File `` provaFileChooser.py '' , line 19 , in start filter = FileChooser.ExtensionFilter ( `` JPG Images '' , '*.jpg ' ) TypeError : javafx.stage.FileChooser $ ExtensionFilter ( ) : 2nd arg ca n't be coerced to java.util.List , String [ ] at org.python.core.Py.TypeError ( Py.java:236 ) at org.python.core.PyReflectedFunction.throwError ( PyReflectedFunction.java:213 ) at org.python.core.PyReflectedFunction.throwBadArgError ( PyReflectedFunction.java:316 ) at org.python.core.PyReflectedFunction.throwError ( PyReflectedFunction.java:325 ) java.lang.RuntimeException : java.lang.RuntimeException : Exception in Application start method"
"Spinner spinner ; private JSONArray result ; ArrayList < String > allNames = new ArrayList < String > ( ) ; spinner.setPrompt ( `` ... Select the Vehicle Number ... '' ) ; spinner.setOnItemSelectedListener ( new AdapterView.OnItemSelectedListener ( ) { @ Override public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { String vno = spinner.getSelectedItem ( ) .toString ( ) ; } JSONArray array = jsonObject.getJSONArray ( `` Spinner value '' ) ; for ( int i = 0 ; i < array.length ( ) ; i++ ) { JSONObject job = array.getJSONObject ( i ) ; String name = job.getString ( `` spinner_data '' ) ; allNames.add ( name ) ; } ArrayAdapter < String > dataAdapter = new ArrayAdapter < String > ( MainActivity.this , android.R.layout.simple_spinner_item , allNames ) ; spinner.setAdapter ( dataAdapter ) ;"
import java.io.IOException ; import java.nio.file.Files ; import java.nio.file.Paths ; import java.util.ArrayList ; import java.util.List ; import org.junit.Test ; public class OpenFilesTest { @ Test public void FileRemainOpen ( ) throws IOException { String path = `` /data/cache/hotels/from_ivector '' ; List < String > files = new ArrayList < String > ( ) ; Files.list ( Paths.get ( path ) ) .filter ( Files : :isRegularFile ) .forEach ( file - > { String name = file.getFileName ( ) .toString ( ) .toLowerCase ( ) ; if ( name.endsWith ( `` .csv '' ) || name.endsWith ( `` .txt '' ) ) { name = file.getFileName ( ) .toFile ( ) .getName ( ) ; files.add ( name ) ; } } ) ; } }
"1 , JOHN,19342 , TERENCE,19143 , JOHN,19644 , JOHN,19045 , JOHN,19246 , JOHN,19547 , JOHN,19448 , JOHN,19849 , JOHN,197410 , JOHN,1994 ArrayList < String [ ] > records = new ArrayList < > ( ) ; String fileLocation = System.getProperty ( `` user.dir '' ) ; String dataPath = fileLocation + File.separator + `` boys-names.txt '' ; try { try ( BufferedReader br = new BufferedReader ( new FileReader ( dataPath ) ) ) { String line ; while ( ( line = br.readLine ( ) ) ! = null ) { String [ ] values = line.split ( `` , '' ) ; records.add ( values ) ; } } } catch ( IOException e ) { e.printStackTrace ( ) ; } 4 , JOHN,19042 , TERENCE,19145 , JOHN,19241 , JOHN,19347 , JOHN,19446 , JOHN,19543 , JOHN,19649 , JOHN,19748 , JOHN,198410 , JOHN,1994"
"( ? < ! [ , = ] ) \\s+"
"public class ComponentBase extends ObjectContextDecorator { } public class ObjectContextDecorator extends ObjectContext { public void set ( String objectTypePath , String characteristicName , Object value ) { // ... } } public class ObjectContext { public void set ( String characteristicName , Object value , boolean forced ) { // ... } } ComponentBase base = new ComponentBase ( ) ; base.set ( `` '' OTM4E_EFFLEVEL '' '' , `` '' IE1 / STD '' '' , true ) ;"
public class CreateDevice extends Functionality { private static Simulator simulator ; ConnectionDB connect = ConnectionDB.getInstance ( ) ; public CreateDevice ( Simulator simulator ) { this.simulator = simulator ; } private static CreateDevice instance ; synchronized public static CreateDevice getInstance ( ) { if ( instance == null ) { instance = new CreateDevice ( simulator ) ; } return instance ; } }
"public class Student { private final String name ; private final int age ; private final Country country ; private final int score ; // getters and setters ( omitted for brevity ) } public enum Country { POLAND , UK , GERMANY } //Consider below code snippet public static void main ( String [ ] args ) { List < Student > students = Arrays.asList ( /* NAME AGE COUNTRY SCORE */ new Student ( `` Jan '' , 13 , Country.POLAND , 92 ) , new Student ( `` Anna '' , 15 , Country.POLAND , 95 ) , new Student ( `` Helga '' , 14 , Country.GERMANY , 93 ) , new Student ( `` Leon '' , 14 , Country.GERMANY , 97 ) , new Student ( `` Chris '' , 15 , Country.GERMANY , 97 ) , new Student ( `` Michael '' , 14 , Country.UK , 90 ) , new Student ( `` Tim '' , 15 , Country.UK , 91 ) , new Student ( `` George '' , 14 , Country.UK , 98 ) ) ; // Java 8 code to get all countries code but // How do I get the only country that has maximum students from ArrayList given above . Map < Country , Long > numberOfStudentsByCountry = students.stream ( ) .collect ( groupingBy ( Student : :getCountry , counting ( ) ) ) ; System.out.println ( numberOfStudentsByCountry ) ; } { GERMANY=3 , POLAND=2 , UK=3 } { GERMANY=3 }"
"List < Container < Dto > > list = Arrays.asList ( new Container < > ( new Dto ( `` A '' ) , 10L ) , new Container < > ( new Dto ( `` A '' ) , 30L ) , new Container < > ( new Dto ( `` B '' ) , 30L ) ) ; Map < String , Optional < Long > > mapWrong = list.stream ( ) .collect ( Collectors.groupingBy ( c - > c.getOutput ( ) .getType ( ) , Collectors.mapping ( Container : :getDifference , Collectors.maxBy ( Comparator.naturalOrder ( ) ) ) ) ) ; // DOES N'T WORK WITH THIS Map < String , Optional < Long > > mapCorrect = list.stream ( ) .collect ( Collectors.groupingBy ( c - > c.getOutput ( ) .getType ( ) , Collectors.mapping ( Container : :getDifference , Collectors.maxBy ( Comparator.comparingLong ( l - > l ) ) ) ) ) ; // A CHANGE TO FIX IT public class Container < T > { T output ; long difference ; } public class Dto { String type ; }"
"( hola , false ) ; comosoy12 , true ) ; caminare ) true , comoestas ( someName , true ) , ( anything , false ) , ( pepe12 , true ) ; ( hola , false ) ; comosoy12 , true ) ; ( batman , true ) , ( kittycat , false ) ; ( batman , true ) ; ( kittycat , false ) ;"
@ Overridepublic String parsePrice ( Document document ) { Elements metaElements = document.getElementsByTag ( `` meta '' ) ; for ( Element tag : metaElements ) { String content = tag.attr ( `` content '' ) ; String item = tag.attr ( `` itemprop '' ) ; if ( `` price '' .equals ( item ) ) { return content.equals ( `` 0 '' ) ? `` Free '' : content ; } } return `` Information not available '' ; } metaElements.stream ( ) .filter ( tag - > `` price '' .equals ( tag.attr ( `` itemprop '' ) ) ) .findFirst ( ) .orElse ( null ) ; metaElements.stream ( ) .filter ( tag - > { String content = tag.attr ( `` content '' ) ; String item = tag.attr ( `` itemprop '' ) ; if ( `` price '' .equals ( item ) ) { return content.equals ( `` 0 '' ) ? `` Free '' : content ; } } ) .findFirst ( ) .orElse ( null ) ;
< androidx.constraintlayout.widget.ConstraintLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < androidx.cardview.widget.CardView android : layout_width= '' 0dp '' android : layout_height= '' 0dp '' android : layout_marginStart= '' 8dp '' android : layout_marginTop= '' 8dp '' android : layout_marginBottom= '' 8dp '' app : layout_constraintBottom_toTopOf= '' @ +id/materialButton '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' > < androidx.constraintlayout.widget.ConstraintLayout android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < TextView android : layout_width= '' 0dp '' android : layout_height= '' 0dp '' android : layout_marginStart= '' 16dp '' android : layout_marginTop= '' 16dp '' android : layout_marginEnd= '' 16dp '' android : layout_marginBottom= '' 16dp '' android : text= '' Text View Test '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' app : layout_constraintTop_toTopOf= '' parent '' / > < /androidx.constraintlayout.widget.ConstraintLayout > < /androidx.cardview.widget.CardView > < Button android : id= '' @ +id/materialButton '' android : layout_width= '' 0dp '' android : layout_height= '' wrap_content '' android : layout_marginStart= '' 8dp '' android : layout_marginEnd= '' 8dp '' android : layout_marginBottom= '' 256dp '' app : layout_constraintBottom_toBottomOf= '' parent '' app : layout_constraintEnd_toEndOf= '' parent '' app : layout_constraintStart_toStartOf= '' parent '' / > < /androidx.constraintlayout.widget.ConstraintLayout >
"import java.io . * ; public class Main { int pieces , people ; int combinations = 0 ; public void calculate ( int person , int piecesLeft , int prev ) { if ( person == people ) { if ( piecesLeft == 0 ) combinations++ ; } else { for ( int x = prev ; ( x * ( people - person ) ) < = piecesLeft ; x++ ) { calculate ( person + 1 , piecesLeft - x , x ) ; } } } public static void main ( String [ ] args ) throws Exception { Main m = new Main ( ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System.in ) ) ; //m.pieces = Integer.parseInt ( in.readLine ( ) ) ; //m.people = Integer.parseInt ( in.readLine ( ) ) ; m.pieces=250 ; m.people=130 ; if ( m.people == m.pieces ) System.out.println ( 1 ) ; else if ( m.people == 1 ) System.out.println ( 1 ) ; else { m.calculate ( 0 , m.pieces , 1 ) ; System.out.println ( m.combinations ) ; } } } visited = [ ] def pi ( n , k , min ) : if visited [ n ] [ k ] [ min ] == 0 : if n == k : visited [ n ] [ k ] [ min ] = 1 elif k == 1 : visited [ n ] [ k ] [ min ] = 1 else : t = 0 for i in range ( min , ( n / k ) +1 ) : t = t + pi ( n-i , k-1 , i ) visited [ n ] [ k ] [ min ] = treturn visited [ n ] [ k ] [ min ] file = open ( `` j5.10.in '' , `` r '' ) n = int ( file.readline ( ) ) k = int ( file.readline ( ) ) for i in range ( n+1 ) : x = [ ] for j in range ( k+1 ) : t = [ ] for kk in range ( n+1 ) : t.append ( 0 ) x.append ( t ) visited.append ( x ) print pi ( n , k,1 )"
"[ `` sample_code '' , '' code '' , '' formal_code '' ] String id= '' 123456789_sample_code_xyz '' ; String id2= '' 91343486_code_zxy '' ; String codeTypes [ ] = { `` sample_code '' , '' code '' , '' formal_code '' } ; String id= `` 123456789_sample_code_xyz '' ; String codeType = Arrays.stream ( codeTypes ) .parallel ( ) .filter ( id : :contains ) .findAny ( ) .get ( ) ; System.out.println ( codeType ) ; for the 1st id the code type should be `` sample_code '' for the 2nd id the code type should be `` code ''"
"Exception in thread `` main '' java.lang.NumberFormatException : For input string : `` 11127 '' at java.lang.NumberFormatException.forInputString ( NumberFormatException.java:65 ) at java.lang.Integer.parseInt ( Integer.java:580 ) at java.lang.Integer.valueOf ( Integer.java:766 ) at sharingBike.ReadTxt.readRecord ( ReadTxt.java:91 ) at sharingBike.ReadTxt.main ( ReadTxt.java:17 ) File fileView = new File ( filePath ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileView ) , `` UTF-8 '' ) ) ; String line ; int count = 0 ; while ( ( line = in.readLine ( ) ) ! = null ) { String [ ] lins = line.split ( `` ; '' ) ; int value ; value = Integer.valueOf ( lins [ 0 ] ) ; }"
project.priv.logic.MyServiceImpl.javaproject.priv.service.MyServiceFactoryImpl.javaproject.pub.logic.MyServiceIF.javaproject.pub.service.MyServiceFactoryIF.javaproject.pub.service.MyServiceFactorySupplier.java MyServiceFactorySupplier.getMyServiceFactory ( ) .getMyService ( )
"public class StringValidationHelper { public static Validation < String > notNull = SimpleValidation.from ( s - > s ! = null , `` must not be null . `` ) ; public static Validation < String > moreThan ( int size ) { return SimpleValidation.from ( s - > s.length ( ) > = size , String.format ( `` must have more than % s chars . `` , size ) ) ; } ... // More methods ( lessThan , etc ) } public class NumberValidationHelper { public static Validation < Number > notNull = SimpleValidation.from ( n - > n ! = null , `` must not be null '' ) ; public static < N extends Number & Comparable < N > > Validation < N > lowerThan ( N max ) { return SimpleValidation.from ( n - > n.compareTo ( max ) == -1 , String.format ( `` must be lower than % s . `` , max ) ) ; } ... // More methods like ( greaterThan , etc ) } public class SimpleValidation < K > implements Validation < K > { private Predicate < K > predicate ; private String onErrorMessage ; private SimpleValidation ( Predicate < K > predicate , String onErrorMessage ) { this.predicate = predicate ; this.onErrorMessage = onErrorMessage ; } public static < K > SimpleValidation < K > from ( Predicate < K > predicate , String onErrorMessage ) { return new SimpleValidation < > ( predicate , onErrorMessage ) ; } ... // Omitted for simplicity } @ FunctionalInterface public interface Validation < K > { ... // Omitted for simplicity default Validation < K > and ( Validation < K > other ) { return param - > { ValidationResult firstResult = this.test ( param ) ; return ! firstResult.isValid ( ) ? firstResult : other.test ( param ) ; } ; } ... // Omitted for simplicity } public class MyValidate { void validate ( int toValidate ) { notNull.and ( lowerThan ( 100 ) ) .test ( toValidate ) .isValid ( ) ; } } public abstract class GenericHelper < K > { public static Validation < K > notNull = SimpleValidation.from ( o - > o ! = null , `` must not be null . `` ) ; } public abstract class GenericHelper { public static Validation < Object > notNull = SimpleValidation.from ( o - > o ! = null , `` must not be null . `` ) ; } notNull.and ( lowerThan ( 100 ) ) .test ( toValidate ) .isValid ( ) ; //Does not compile"
"private static final Map < Class < ? > , Comparator < ? > > comparators = new HashMap < > ( ) ; static { comparators.put ( Identifiable.class , new Comparator < Identifiable > ( ) { @ Override public int compare ( Identifiable o1 , Identifiable o2 ) { return o1.getId ( ) .compareTo ( o2.getId ( ) ) ; } } ) ; comparators.put ( MyClass.class , new Comparator < MyClass > ( ) { @ Override public int compare ( EIntersection o1 , EIntersection o2 ) { return o1.getRef ( ) .compareTo ( o2.getRef ( ) ) ; } } ) ; ... }"
class C { void foo ( ) { // ... use H to do the job more easy ... } class H { // very simple and contained stuff } }
"mail : pop3Host : $ { MAIL_HOSTNAME } inboxFolder : $ { MAIL_INBOX } hostName : $ { MAIL_HOSTNAME } port : $ { MAIL_PORT } userName : $ { MAIL_USERNAME } password : $ { MAIL_PASSWORD } export JPDA_OPTS= '' -agentlib : jdwp=transport=dt_socket , address=8090 , server=y , suspend=n '' export JAVA_OPTS= '' -DMAIL_HOSTNAME='smtp.provider.com ' -DMAIL_INBOX='MAIL_INBOX ' -DMAIL_PORT='587 ' -DMAIL_USERNAME='username ' -DMAIL_PASSWORD='XXXXXXXX ' '' export CATALINA_OPTS= '' -Xdebug -Xrunjdwp : transport=dt_socket , address=8090 , server=y , suspend=n '' ./catalina.sh jpda start"
"public static < E > ImmutableSet < E > of ( E e1 , E e2 ) ; public static < E > ImmutableSet < E > of ( E e1 , E e2 , E e3 ) ; public static < E > ImmutableSet < E > of ( E e1 , E e2 , E e3 , E e4 ) ; public static < E > ImmutableSet < E > of ( E e1 , E e2 , E e3 , E e4 , E e5 ) ; public static < E > ImmutableSet < E > of ( E ... elements ) ; private static < E > ImmutableSet < E > create ( E ... elements ) private static < E > ImmutableSet < E > create ( Iterable < ? extends E > iterable , int count ) ;"
String line = `` F01T8B02S00003H04Z05C0.12500 '' ; Pattern pattern = Pattern.compile ( `` ( [ BCFHSTZ ] ) '' ) ; String [ ] commands = pattern.split ( line ) ; for ( String command : commands ) { System.out.print ( command ) ; }
public class OOME_NotCatch { static List l = new ArrayList ( ) ; static Long i = new Long ( 1 ) ; public static void main ( String [ ] args ) { try { while ( true ) { l.add ( i ) ; i++ ; } } catch ( OutOfMemoryError e ) { e.printStackTrace ( ) ; System.out.println ( `` Encountered OutOfMemoryError '' ) ; } } } //Console : Exception in thread `` main '' public class Catch_OOME_Collection { static List l = new ArrayList ( ) ; public static void main ( String [ ] args ) { try { while ( true ) { l.add ( new byte [ 1000000 ] ) ; System.out.println ( `` size `` + l.size ( ) ) ; } } catch ( OutOfMemoryError e ) { System.out.println ( `` Encountered OutOfMemoryError '' ) ; e.printStackTrace ( ) ; System.out.println ( `` size of list is `` + l.size ( ) ) ; Iterator i = l.iterator ( ) ; while ( i.hasNext ( ) ) { System.out.println ( i.next ( ) .toString ( ) ) ; i.remove ( ) ; } while ( true ) { System.out.println ( `` keep printing '' ) ; } } } }
public class MyClass < T implements MyInterface > { public T getMy ( ) { return new T ( ) ; } }
1*1 + 1*-2 + 0*4+ 1*-8 + 0*16 +1*-32 + 1*64 = 23
"wrapper.doSmth ( wrapper.getCurrent ( ) ) ; public class App { Wrapper < ? > wrapper ; class Generic < T > { } class Wrapper < T > { Generic < T > current ; public void doSmth ( Generic < T > generic ) { } public Generic < T > getCurrent ( ) { return current ; } } public void operation ( ) { wrapper.doSmth ( wrapper.getCurrent ( ) ) ; } } Error : ( 25 , 24 ) java : method doSmth in class App.Wrapper < T > can not be applied to given types ; required : App.Generic < capture # 1 of ? > found : App.Generic < capture # 2 of ? > reason : actual argument App.Generic < capture # 2 of ? > can not be converted to conf.App.Generic < capture # 1 of ? > by method invocation conversion"
"double result = 4/3*Math.PI*Math.pow ( r,3 ) ; double result= Math.PI*Math.pow ( r,3 ) *4/3 ;"
"class MyList extends AbstractList < Integer > implements RandomAccess { private final int multiplier ; private final List < Integer > list ; public MyList ( int multiplier , List < Integer > list ) { this.multiplier = multiplier ; this.list = list ; } @ Override public Integer get ( int index ) { return list.get ( index ) * multiplier ; } @ Override public int size ( ) { return list.size ( ) ; } } public < E extends List < Integer > & RandomAccess > MyList ( int multiplier , E list ) public MyList ( int multiplier , List < Integer > list ) { if ( ! ( list instanceof RandomAccess ) ) { // Do something like log or throw exception } this.multiplier = multiplier ; this.list = list ; }"
public class Plant { int leaves ; int age ; int sumLeaves ; double average ; void averageLeaves ( ) { sumLeaves = leaves + leaves ; //here is where I need help average = ( double ) sumLeaves / 2 ; System.out.println ( `` The average number of leaves is : `` + average ) ; } public static void main ( String [ ] args ) { Plant plantA = new Plant ( ) ; plantA.leaves = 5 ; Plant plantB = new Plant ( ) ; plantB.leaves = 3 ; averageLeaves ( ) ; }
public void name ( ) { int value = 9 ; int o ; if ( value > 9 ) o = 5 ; if ( value < = 9 ) o = 8 ; System.out.println ( o ) ; }
class MyClass { private String str ; public MyClass ( String str ) { this.str = str ; } public int compare ( Object o ) { return str.compareTo ( ( ( MyClass ) o ) .str ) ; //line No.8 } } class Client { public static void main ( String [ ] args ) { MyClass m = new MyClass ( `` abc '' ) ; MyClass n = new MyClass ( `` bcd '' ) ; System.out.println ( m.compare ( n ) ) ; } } public int compare ( Object o ) { System.out.println ( o.getClass ( ) ) ; System.out.println ( ( ( MyClass ) o ) .getClass ( ) ) ; return str.compareTo ( ( ( MyClass ) o ) .str ) ; } class MyClassclass MyClass public int compare ( Object o ) { return str.compareTo ( o.str ) ; } str can not be resolved or is not a field
"void test ( List < ? extends Number > g1 , List < ? extends Number > g2 ) { g1 = g2 ; }"
public interface Listener { void onA ( ) ; void onB ( ) ; void onC ( ) ; } List < Listener > listeners = new ArrayList < Listener > ( ) ; void Notify ( const std : :function < void ( Listener *listener ) > & command ) { for ( auto & listener : listeners ) { command ( listener ) ; } } Notify ( [ ] ( Listener *listener ) { listener- > onA ( ) ; } ) ; Notify ( [ ] ( Listener *listener ) { listener- > onB ( ) ; } ) ; Notify ( [ ] ( Listener *listener ) { listener- > onC ( ) ; } ) ;
int i = 2 ; switch ( i ) { case 1 : String myString = `` foo '' ; break ; case 2 : myString = `` poo '' ; System.out.println ( myString ) ; }
"Font.loadFont ( getClass ( ) .getResourceAsStream ( `` path/to/font '' ) , 13.0 ) ;"
"for ( int j = 0 ; j < myArray.length ; System.out.println ( j ) , j++ ) { /* code */ }"
public class TestClass { public < T extends TestClass > T test ( ) { return this ; // error here } }
Comparable x = 45 ; Comparable y = 56 ; System.out.println ( x.compareTo ( y ) ) ;
"int a [ ] = { 2,3,7,9,8,1,4,5,10,6 } ; for ( int i=0 ; i < a.length ; i++ ) { for ( int j=0 ; j < a.length-i-1 ; j++ ) { if ( a [ j ] > a [ j+1 ] ) { int t=a [ j ] ; a [ j ] =a [ j+1 ] ; a [ j+1 ] =t ; } } } for ( int i=0 ; i < a.length ; i++ ) { System.out.print ( a [ i ] + '' \t '' ) ; } int b [ ] = { 2,3,7,9,8,1,4,5,10,6 } ; for ( int i=0 ; i < b.length-1 ; i++ ) { for ( int j=0 ; j < b.length-i-1 ; j++ ) { if ( b [ j ] > b [ j+1 ] ) { int t=b [ j ] ; b [ j ] =b [ j+1 ] ; b [ j+1 ] =t ; } } } for ( int i=0 ; i < b.length ; i++ ) { System.out.print ( b [ i ] + '' \t '' ) ; } 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10"
List < String > toReturn = new ArrayList < > ( ) ; for ( MyEnum field : fields ) { String value = null ; if ( ( value = map.get ( field ) ) ! = null ) { toReturn.add ( value ) ; } } return toReturn ; map.stream ( ) .map ( e- > ? ? ? ? ? )
"A 2B 0C 1D 2 A 0B 0C 0D 69 enter code here HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; ArrayList < Character > list1 = new ArrayList < Character > ( ) ; ArrayList < Character > list2 = new ArrayList < Character > ( ) ; Collections.addAll ( list1 , ' A ' , ' B ' , ' C ' , 'D ' ) ; Collections.addAll ( list2 , 'D ' , ' A ' , ' C ' , ' A ' , 'D ' ) ; for ( int i = 0 ; i < list1.size ( ) ; i++ ) { for ( int j = 0 ; j < list2.size ( ) ; j++ ) { if ( list1.get ( i ) == list2.get ( j ) ) { map.put ( list1.get ( i ) , 1 ) ; } if ( list1.get ( i ) == list2.get ( j ) & & ( map.containsKey ( list1.get ( i ) ) ) ) { map.replace ( list1.get ( i ) , list1.get ( i ) + 1 ) ; } if ( list1.get ( i ) ! = list2.get ( j ) ) { map.put ( list1.get ( i ) , 0 ) ; } } } System.out.println ( `` Map : `` ) ; for ( Map.Entry < Character , Integer > entry : map.entrySet ( ) ) { System.out.println ( entry.getKey ( ) + `` `` + entry.getValue ( ) ) ; }"
package apples ; class A { // package private public int foo ( ) { // public ( = > less restrictive than *package private* ) return 42 ; } } package apples ; import java.util.function.IntSupplier ; public class B { public IntSupplier getReferenceToAFoo ( ) { A aInstance = new A ( ) ; return aInstance : :foo ; } } package pizzas ; import apples.B ; import java.util.function.IntSupplier ; public class C { private int callAFooIndirectly ( ) { B bInstance = new B ( ) ; IntSupplier intsupplier = bInstance.getReferenceToAFoo ( ) ; return intsupplier.getAsInt ( ) ; } public static void main ( String [ ] args ) { C cInstance = new C ( ) ; int i = cInstance.callAFooIndirectly ( ) ; System.out.println ( i ) ; assert 42 == i ; } }
[ \w^\s < > . ! ? ] { 2 } [ \w|^\s < > . ! ? ] { 2 }
"import javax.persistence.Columnimport javax.validation.constraints.Sizeclass Foo ( ) { @ Column ( name= '' bar_ '' , nullable = false , length = 32 ) @ Size ( min = 32 , max = 32 ) String bar ; @ Column ( nullable = false , length = 32 ) @ Size ( min = 32 , max = 32 ) String bas ; @ Column ( nullable = false , length = 32 , unique=true ) @ Size ( min = 32 , max = 32 ) String baq ; } class Foo ( ) { @ MyColumn ( name= '' bar_ '' ) String bar ; @ MyColumn String bas ; @ MyColumn ( unique=true ) String baq ; }"
public static void main ( String [ ] args ) { 1 Object [ ] obj = { null } ; 2 System.out.println ( ( Integer ) obj [ 0 ] ) ; //Output null 3 Integer n = obj [ 0 ] == null ? ( Integer ) obj [ 0 ] : 1 ; //NullPointerException 4 System.out.println ( n ) ; }
"public static void main ( String [ ] args ) { AStar a = new AStar ( ) ; BStar b = new BStar ( ) ; someMethod ( a , b ) ; } public static void someMethod ( A a , BStar b ) { System.out.println ( `` first '' ) ; } public static void someMethod ( AStar a , B b ) { System.out.println ( `` second '' ) ; }"
"import java.util.Timer ; import java.util.TimerTask ; public class Test { private static boolean running ; public static void main ( String [ ] args ) { long time = 5 * 1000 ; // converts time to milliseconds long test = Long.MIN_VALUE ; running = true ; // Uses an anonymous class to set the running variable to false Timer timer = new Timer ( ) ; timer.schedule ( new TimerTask ( ) { @ Override public void run ( ) { running = false ; } } , time ) ; while ( running ) { test++ ; } timer.cancel ( ) ; System.out.println ( test ) ; } } while ( running ) { System.out.println ( ) ; test++ ; }"
"public class BankAccount { private final int customerId ; private int balance ; public BankAccount ( int customerId , int openingBalance ) { this.customerId = customerId ; this.balance = openingBalance ; } public void withdraw ( int amount ) throws OverdrawnException { if ( amount > balance ) { throw new OverdrawnException ( ) ; } balance -= amount ; } public void deposit ( int amount ) { balance += amount ; } public int getCustomerId ( ) { return customerId ; } public int getBalance ( ) { return balance ; } } class TransferOperation extends Thread { int threadNum ; TransferOperation ( int threadNum ) { this.threadNum = threadNum ; } private void transfer ( BankAccount fromAccount , BankAccount toAccount , int transferAmount ) throws OverdrawnException { synchronized ( fromAccount ) { synchronized ( toAccount ) { fromAccount.withdraw ( transferAmount ) ; toAccount.deposit ( transferAmount ) ; } } } // ... }"
public class Sub { void probe ( int ... x ) { System.out.println ( `` It is int '' ) ; } void probe ( long x ) { System.out.println ( `` In long '' ) ; } public static void main ( String [ ] args ) { int b = 4 ; new Sub ( ) .probe ( b ) ; } }
public boolean isLinkedToStart ( Node head ) { if ( head == null ) { return false ; } Node fast = head.next ; Node slow = head ; while ( fast ! = null & & fast.next ! = null ) { if ( fast.next.next == slow ) { return true ; } fast = fast.next.next ; slow = slow.next ; } return false ; }
Character x = ' B ' ; Object o = x ; System.out.println ( o == ' B ' ) ; Character x = ' Б ' ; Object o = x ; System.out.println ( o == ' Б ' ) ;
"class Foo { private int boo ; private int placeholder = 1 ; public Foo ( int boo ) { this.boo = boo ; } public int getBoo ( ) { return boo ; } } List < Foo > list1 = new ArrayList < Foo > ( ) ; list1.add ( new Foo ( 1 ) ) ; list1.add ( new Foo ( 2 ) ) ; list1.add ( new Foo ( 3 ) ) ; List < Foo > list2 = new ArrayList < Foo > ( ) ; list2.add ( new Foo ( 0 ) ) ; list2.add ( new Foo ( 1 ) ) ; list2.add ( new Foo ( 2 ) ) ; List < Foo > notInIntersectList = new ArrayList < Foo > ( ) ; list1.forEach ( li1foo - > { boolean inBothLists = false ; list2.forEach ( li2foo - > { if ( li1foo.getBoo ( ) == li2foo.getBoo ( ) ) { inBothLists = true ; } } ) ; if ( ! inBothLists ) { notInIntersectList.add ( li1foo ) ; } } ) ; //now I covered all items in list1 but not in list2 . Now do this again with lists swapped , so I can also cover those . // ..."
"class foo { String someString ; List < String > someList ; } arr1 : [ foo { someString : 'test1 ' , someList : [ ' a ' , ' b ' ] } , foo { someString : 'test2 ' , someList : [ ' b ' , ' c ' ] } ] arr2 : [ foo { someString : ' a ' , someList : [ 'test1 ' ] } , foo { someString : ' b ' , someList : [ 'test1 ' , 'test2 ' ] } , foo { someString : ' c ' , someList : [ 'test2 ' ] } , ] Map < String , Set < String > > myMap ; for ( foo f : arr1 ) { for ( String s : f.someList ) { Set < String > mySet = myMap.get ( s ) ; if ( mySet == null ) { myMap.put ( s , new HashSet < String > ( Arrays.asList ( f.someString ) ) ) ; } else { mySet.add ( f.someString ) ; } } } List < String > myNewList = myMap.entrySet ( ) .stream ( ) .map ( e - > new foo ( e.key , new ArrayList < String > ( e.value ) ) ) .collect ( Collectors.toList ( ) ) ;"
try { if ( check ) { while ( true ) ; } else { System.exit ( 1 ) ; } } finally { clear ( ) ; }
"typedef union RegIntStatus { u8 reg ; struct { u8 bit0_abc:1 ; u8 bit1_cde:1 ; u8 bit2_xyz:1 ; u8 bit3_7_rsvd:5 ; } bits ; } regABC ; regABC r ; r.reg=0r.bits.bit0_abc=1 ; call ( r.reg ) univerasl_reg < T > { // where T will be some `` enum '' public byte b ; public byte set ( T bit_mask , bool val ) { // here is compile error it does not know variable bit_mask.v if ( val ) { b |= bit_mask.v } else b & = bit_mask.v ^ 0xFF ; } } public static enum RegTst { b1_abc ( 0x01 ) , b2_xyz ( 0x02 ) , b3_klm ( 0x04 ) ; public byte v ; RegTst ( int val ) { v = ( byte ) val ; } } univerasl_reg < RegTst > rt1 ; rt1.set ( RegTst.b2_xyz,1 ) call ( rt1.b ) new univerasl_reg < RegTst > .set ( RegTst_OTHER.b2_xyz,1 )"
$ runcompss -m -- debug increment.Increment 5 1 2 3 $ /etc/init.d/compss-monitor start* Starting COMPSs Monitor* Checking JAVA Installation ... Success* Checking IT_HOME ... WARNING : IT_HOME not defined . Trying default location /opt/COMPSs/ Success* Checking IT_MONITOR ... IT_MONITOR=/root/.COMPSs/ Success* Checking COMPSs Monitor Port ... Warning : COMPSs_MONITOR_PORT not defined . Loading from configuration file . COMPSs_MONITOR_PORT=8080 Success* Checking COMPSs Monitor Timeout ... Warning : COMPSs_MONITOR_TIMEOUT not defined . Loading from configuration file . COMPSs_MONITOR_TIMEOUT=20000 Success* Configuring COMPSs Monitor service ... Successroot 's password : Using CATALINA_BASE : /opt/COMPSs/Tools/monitor/apache-tomcatUsing CATALINA_HOME : /opt/COMPSs/Tools/monitor/apache-tomcatUsing CATALINA_TMPDIR : /opt/COMPSs/Tools/monitor/apache-tomcat/tempUsing JRE_HOME : /usr/lib64/jvm/jdk1.7.0_71/jreUsing CLASSPATH : /opt/COMPSs/Tools/monitor/apache-tomcat/bin/bootstrap.jar : /opt/COMPSs/Tools/monitor/apache-tomcat/bin/tomcat-juli.jarTomcat started .
"public int function1 ( inputObject input ) { LeadMaster lead= input.getLeadMaster ( ) ; PropertyUtils.setProperty ( lead , input.getKey ( ) , input.getValue ( ) ) ; return 0 ; } public int function2 ( inputObject input ) { DealMaster deal= input.getDealMaster ( ) ; PropertyUtils.setProperty ( deal , input.getKey ( ) , input.getValue ( ) ) ; return 0 ; }"
int anInt = 1 ; double aDouble = 2.5 ; anInt = anInt + aDouble ; // Error - need to cast double to intanInt += aDouble ; // This is ok. Why ? anInt = aDouble ; // This is also an error.anInt = 1 + aDouble ; // This is also an error .
List < Message > successMessages = messageList.stream ( ) .filter ( message - > ! failedMessageIds.contains ( message.getId ( ) ) ) .collect ( Collectors.toList ( ) ) ; List < Message > failedMessages = messageList.stream ( ) .filter ( message - > failedMessageIds.contains ( message.getId ( ) ) ) .collect ( Collectors.toList ( ) ) ;
int ar [ ] [ ] = new int [ 10000001 ] [ 10 ] ; int ar [ ] [ ] = new int [ 10 ] [ 10000001 ] ;
public static void test ( Object o ) { System.out.println ( `` Hello Object ! `` ) ; } public static void test ( Integer i ) { System.out.println ( `` Hello Integer ! `` ) ; } public static < T > void test ( Collection < T > col ) { for ( T item : col ) { System.out.println ( item.getClass ( ) .getSimpleName ( ) ) ; test ( item ) ; } } public static void main ( String [ ] args ) throws java.lang.Exception { Collection < Integer > ints = new ArrayList < > ( ) ; ints.add ( 1 ) ; test ( ints ) ; } IntegerHello Object !
"public class A { public UUID id ( ) ; public Long version ( ) ; public String foo ( ) ; public String bar ( ) ; } public class B { public UUID id ( ) ; public Long version ( ) ; public String foo ( ) ; public String bar ( ) ; } public class C { public UUID id ( ) ; public Long version ( ) ; public String foo ( ) ; public String bar ( ) ; } // ... and more : D , E , F , etc . private static void myHelper ( UUID id , Long version , String foo , String bar ) { ... } myHelper ( whatever.id ( ) , whatever.version ( ) , whatever.foo ( ) , whatever.bar ( ) ) ; public class CommonABC { UUID id ; Long version ; String foo ; String bar ; } modelMapper.getConfiguration ( ) .setFieldMatchingEnabled ( true ) .setFieldAccessLevel ( Configuration.AccessLevel.PRIVATE ) ; private static void myHelper ( Object extLibEntity ) { if ( extLibEntity instanceof A ) { ... } else if ( extLibEntity instanceof B ) { ... } else if ( extLibEntity instanceof C ) { ... } else { throw new RuntimeException ( ... ) ; } }"
"@ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.NANOSECONDS ) @ Fork ( jvmArgsAppend = { `` -Xms2g '' , `` -Xmx2g '' } ) public class CharByCharIterationBenchmark { @ Benchmark public void toCharArray ( Data data , Blackhole b ) { char [ ] chars = data.string.toCharArray ( ) ; for ( char ch : chars ) { b.consume ( ch ) ; } } @ Benchmark public void charAt ( Data data , Blackhole b ) { String string = data.string ; int length = string.length ( ) ; for ( int i = 0 ; i < length ; i++ ) { b.consume ( string.charAt ( i ) ) ; } } @ State ( Scope.Thread ) public static class Data { String string ; @ Param ( { `` true '' , `` false '' } ) private boolean latin ; @ Param ( { `` 5 '' , `` 10 '' , `` 50 '' , `` 100 '' } ) private int length ; @ Setup public void setup ( ) { String alphabet = latin ? `` abcdefghijklmnopqrstuvwxyz '' // English : `` абвгдеёжзиклмнопрстуфхцчшщьыъэюя '' ; // Russian RandomStringGenerator generator = new RandomStringGenerator ( ) ; string = generator.randomString ( alphabet , length ) ; } } Java 8 ( latin ) ( length ) Mode Score Error UnitscharAt true 5 avgt 21.051 ± 0.796 ns/opcharAt true 10 avgt 44.002 ± 2.324 ns/opcharAt true 50 avgt 221.068 ± 7.422 ns/opcharAt true 100 avgt 410.162 ± 13.441 ns/optoCharArray true 5 avgt 16.819 ± 0.662 ns/optoCharArray true 10 avgt 28.364 ± 0.663 ns/optoCharArray true 50 avgt 110.910 ± 1.144 ns/optoCharArray true 100 avgt 205.694 ± 1.669 ns/opcharAt : ·gc.alloc.rate.norm true 5 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm true 10 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm true 50 avgt ≈ 10⁻⁴ B/opcharAt : ·gc.alloc.rate.norm true 100 avgt ≈ 10⁻⁴ B/optoCharArray : ·gc.alloc.rate.norm true 5 avgt 32.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 10 avgt 40.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 50 avgt 120.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 100 avgt 216.000 ± 0.001 B/opcharAt false 5 avgt 20.372 ± 0.406 ns/opcharAt false 10 avgt 39.962 ± 0.911 ns/opcharAt false 50 avgt 201.337 ± 3.752 ns/opcharAt false 100 avgt 410.530 ± 17.931 ns/optoCharArray false 5 avgt 15.767 ± 0.606 ns/optoCharArray false 10 avgt 26.258 ± 0.345 ns/optoCharArray false 50 avgt 109.631 ± 1.064 ns/optoCharArray false 100 avgt 205.815 ± 4.716 ns/opcharAt : ·gc.alloc.rate.norm false 5 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm false 10 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm false 50 avgt ≈ 10⁻⁴ B/opcharAt : ·gc.alloc.rate.norm false 100 avgt ≈ 10⁻⁴ B/optoCharArray : ·gc.alloc.rate.norm false 5 avgt 32.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 10 avgt 40.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 50 avgt 120.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 100 avgt 216.000 ± 0.001 B/opJava 11 ( latin ) ( length ) Mode Score Error UnitscharAt true 5 avgt 22.035 ± 1.557 ns/opcharAt true 10 avgt 41.800 ± 1.572 ns/opcharAt true 50 avgt 227.180 ± 18.655 ns/opcharAt true 100 avgt 474.719 ± 29.782 ns/optoCharArray true 5 avgt 17.091 ± 0.662 ns/optoCharArray true 10 avgt 26.167 ± 0.220 ns/optoCharArray true 50 avgt 127.876 ± 2.106 ns/optoCharArray true 100 avgt 244.449 ± 9.330 ns/opcharAt : ·gc.alloc.rate.norm true 5 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm true 10 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm true 50 avgt ≈ 10⁻⁴ B/opcharAt : ·gc.alloc.rate.norm true 100 avgt ≈ 10⁻⁴ B/optoCharArray : ·gc.alloc.rate.norm true 5 avgt 32.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 10 avgt 40.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 50 avgt 120.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm true 100 avgt 216.000 ± 0.001 B/opcharAt false 5 avgt 22.215 ± 2.064 ns/opcharAt false 10 avgt 45.606 ± 2.567 ns/opcharAt false 50 avgt 204.577 ± 18.302 ns/opcharAt false 100 avgt 404.056 ± 10.203 ns/optoCharArray false 5 avgt 17.055 ± 0.556 ns/optoCharArray false 10 avgt 29.254 ± 2.616 ns/optoCharArray false 50 avgt 123.610 ± 5.033 ns/optoCharArray false 100 avgt 226.174 ± 6.396 ns/opcharAt : ·gc.alloc.rate.norm false 5 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm false 10 avgt ≈ 10⁻⁵ B/opcharAt : ·gc.alloc.rate.norm false 50 avgt ≈ 10⁻⁴ B/opcharAt : ·gc.alloc.rate.norm false 100 avgt ≈ 10⁻⁴ B/optoCharArray : ·gc.alloc.rate.norm false 5 avgt 32.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 10 avgt 40.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 50 avgt 120.000 ± 0.001 B/optoCharArray : ·gc.alloc.rate.norm false 100 avgt 216.000 ± 0.001 B/op ╭│ 0x00007fa638407dd9 : jmp 0x00007fa638407e4c ││ 0x00007fa638407ddb : nopl 0x0 ( % rax , % rax,1 ) 4.96 % ││ ↗ 0x00007fa638407de0 : shl $ 0x3 , % r11 0.01 % ││ │ 0x00007fa638407de4 : movzwl 0x10 ( % r11 , % r13,2 ) , % edx ; *invokevirtual charAt { reexecute=0 rethrow=0 return_oop=0 } ││ │ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) ││ │ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 3.58 % ││ ↗│ 0x00007fa638407dea : mov % rsi,0x18 ( % rsp ) 1.87 % ││ ││ 0x00007fa638407def : mov % r8d,0x14 ( % rsp ) 4.18 % ││ ││ 0x00007fa638407df4 : mov % edi,0x10 ( % rsp ) 0.04 % ││ ││ 0x00007fa638407df8 : mov % rbx,0x8 ( % rsp ) 1.29 % ││ ││ 0x00007fa638407dfd : mov % r10 , ( % rsp ) 1.83 % ││ ││ 0x00007fa638407e01 : mov % r9,0x70 ( % rsp ) 4.32 % ││ ││ 0x00007fa638407e06 : mov % rax,0x60 ( % rsp ) 0.05 % ││ ││ 0x00007fa638407e0b : mov % r9 , % rsi 1.27 % ││ ││ 0x00007fa638407e0e : nop 1.88 % ││ ││ 0x00007fa638407e0f : callq 0x00007fa630926e00 ; ImmutableOopMap { [ 96 ] =Oop [ 104 ] =Oop [ 112 ] =Oop [ 120 ] =Oop [ 0 ] =Oop [ 16 ] =NarrowOop [ 24 ] =Oop } ││ ││ ; *invokevirtual consume { reexecute=0 rethrow=0 return_oop=0 } ││ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 28 ( line 35 ) ││ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) ││ ││ ; { optimized virtual_call } 5.71 % ││ ││ 0x00007fa638407e14 : inc % ebp ; *iinc { reexecute=0 rethrow=0 return_oop=0 } ││ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 31 ( line 34 ) ││ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 0.05 % ││ ││ 0x00007fa638407e16 : cmp 0x14 ( % rsp ) , % ebp 0.00 % │╰ ││ 0x00007fa638407e1a : jge 0x00007fa638407d87 ; *if_icmpge { reexecute=0 rethrow=0 return_oop=0 } │ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 18 ( line 34 ) │ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 3.05 % │ ││ 0x00007fa638407e20 : mov 0x10 ( % rsp ) , % edi 4.24 % │ ││ 0x00007fa638407e24 : movsbl 0x14 ( % r12 , % rdi,8 ) , % ecx ; *getfield coder { reexecute=0 rethrow=0 return_oop=0 } │ ││ ; - java.lang.String : :isLatin1 @ 7 ( line 3266 ) │ ││ ; - java.lang.String : :charAt @ 1 ( line 692 ) │ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) │ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 0.86 % │ ││ 0x00007fa638407e2a : mov 0xc ( % r12 , % rdi,8 ) , % r11d ; *getfield value { reexecute=0 rethrow=0 return_oop=0 } │ ││ ; - java.lang.String : :charAt @ 8 ( line 693 ) │ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) │ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 1.67 % │ ││ 0x00007fa638407e2f : mov 0x60 ( % rsp ) , % rax 1.71 % │ ││ 0x00007fa638407e34 : mov 0x70 ( % rsp ) , % r9 3.92 % │ ││ 0x00007fa638407e39 : mov ( % rsp ) , % r10 0.20 % │ ││ 0x00007fa638407e3d : mov 0x8 ( % rsp ) , % rbx 1.44 % │ ││ 0x00007fa638407e42 : mov 0x14 ( % rsp ) , % r8d 1.70 % │ ││ 0x00007fa638407e47 : mov 0x18 ( % rsp ) , % rsi ; *aload_2 { reexecute=0 rethrow=0 return_oop=0 } │ ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 21 ( line 35 ) │ ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 3.93 % ↘ ││ 0x00007fa638407e4c : movslq % ebp , % r13 ; *invokestatic getChar { reexecute=0 rethrow=0 return_oop=0 } ││ ; - java.lang.StringUTF16 : :charAt @ 7 ( line 1268 ) ││ ; - java.lang.String : :charAt @ 21 ( line 695 ) ││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) ││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 0.23 % ││ 0x00007fa638407e4f : test % ecx , % ecx 0.00 % ╭││ 0x00007fa638407e51 : jne 0x00007fa638407e6b ; *ifeq { reexecute=0 rethrow=0 return_oop=0 } │││ ; - java.lang.String : :charAt @ 4 ( line 692 ) │││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) │││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) │││ 0x00007fa638407e53 : mov 0xc ( % r12 , % r11,8 ) , % edx ; implicit exception : dispatches to 0x00007fa638407fbc │││ 0x00007fa638407e58 : cmp % edx , % ebp │││ 0x00007fa638407e5a : jae 0x00007fa638407eb0 │││ 0x00007fa638407e5c : shl $ 0x3 , % r11 │││ 0x00007fa638407e60 : movzbl 0x10 ( % r11 , % r13,1 ) , % edx ; *iand { reexecute=0 rethrow=0 return_oop=0 } │││ ; - java.lang.StringLatin1 : :charAt @ 25 ( line 49 ) │││ ; - java.lang.String : :charAt @ 12 ( line 693 ) │││ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) │││ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) │╰│ 0x00007fa638407e66 : jmpq 0x00007fa638407dea 1.52 % ↘ │ 0x00007fa638407e6b : mov 0xc ( % r12 , % r11,8 ) , % ecx ; implicit exception : dispatches to 0x00007fa638407fb0 5.99 % │ 0x00007fa638407e70 : sar % ecx ; *ishr { reexecute=0 rethrow=0 return_oop=0 } │ ; - java.lang.StringUTF16 : :length @ 3 ( line 74 ) │ ; - java.lang.StringUTF16 : :checkIndex @ 2 ( line 1470 ) │ ; - java.lang.StringUTF16 : :charAt @ 2 ( line 1267 ) │ ; - java.lang.String : :charAt @ 21 ( line 695 ) │ ; - tsypanov.strings.character.CharByCharIterationBenchmark : :charAt @ 25 ( line 35 ) │ ; - tsypanov.strings.character.generated.CharByCharIterationBenchmark_charAt_jmhTest : :charAt_avgt_jmhStub @ 19 ( line 191 ) 5.51 % │ 0x00007fa638407e72 : cmp % ecx , % ebp 0.01 % ╰ 0x00007fa638407e74 : jb 0x00007fa638407de0 ; *if_icmplt { reexecute=0 rethrow=0 return_oop=0 } Benchmark Mode Cnt Score Error UnitscharAt : L1-dcache-loads avgt 2104.816 # /opcharAt : L1-dcache-stores avgt 1200.878 # /opcharAt : branches avgt 603.754 # /opcharAt : cycles avgt 1461.282 # /opcharAt : dTLB-loads avgt 2105.253 # /opcharAt : dTLB-stores avgt 1200.909 # /opcharAt : instructions avgt 4716.775 # /optoCharArray : L1-dcache-loads avgt 1026.341 # /optoCharArray : L1-dcache-stores avgt 416.997 # /optoCharArray : branches avgt 419.265 # /optoCharArray : cycles avgt 820.521 # /optoCharArray : dTLB-loads avgt 1026.506 # /optoCharArray : dTLB-stores avgt 417.591 # /optoCharArray : instructions avgt 2409.806 # /op"
"public static < T > Class < T [ ] > getArrayClassOfType ( Class < T > componentType ) { return Array.newInstance ( componentType , 0 ) .getClass ( ) ; } public static < T > Class < T [ ] > getArrayClassOfType ( Class < T > componentType ) { Class c = Array.newInstance ( componentType , 0 ) .getClass ( ) ; return c ; } TypeUtils.java : [ 12,60 ] incompatible types : java.lang.Class < capture # 1 of ? extends java.lang.Object > can not be converted to java.lang.Class < T [ ] >"
class BumpTest { // ... static synchronized void classBump ( ) { classCount++ ; } } class BumpTest { // ... static void classBump ( ) { try { synchronized ( Class.forName ( `` BumpTest '' ) ) { classCount++ ; } } catch ( ClassNotFoundException e ) { } } }
static int getSumOfFirstThree ( int [ ] array ) { assert ( array.length > = 3 ) ; return array [ 0 ] + array [ 1 ] + array [ 2 ] ; }
"public class Page1 implements Page { public static Page1 goOn ( ) { return new Page1 ( ) ; } public Page1 action1 ( ) { return this ; } public Page2 gotoPage2 ( ) { return new Page2 ( ) ; } } public class Page2 implements Page { public Page2 action2 ( ) { return this ; } public Page2 gotoPage1 ( ) { return new Page2 ( ) ; } } Page1.goOn ( ) .action1 ( ) .gotoPage2 ( ) //it return a Page2 object which mean you cant use Page1 methods anymore .action2 ( ) // avoiding using the Page1 object which wouldnt be usable anymore if we stored it .goToPage1 ( ) //and poof we can only use Page1 methods again .action1 ( ) //etc ... public Page logIn ( User user ) { //do the login in the page //IF login worked : //return new Page2 ( ) ; //ELSE //return this ; // or new Page1 ( ) , } public < T extends Page > T assertPage ( Class < T > type ) { boolean isgood = ( this.getClass.equals ( type ) ) ; assertTrue ( isgood ) ; if ( isgood ) { return ( T ) this ; //this is the unsafe cast im trying to avoid } else { //throw an exception as this is not supposed to happen } }"
"private void synchronized ( collectionX ) doSomethingWithCollectionX ( ) { // do something with collection x here , method acquires and releases lock on // collectionX automatically before and after the method is called } private void doSomethingWithTheCollectionX ( List < ? > collectionX ) { synchronized ( collectionX ) { // do something with collection x here } }"
"< T , U extends Comparable < ? super U > > Comparator < T > method ( Map < String , Function < ? super T , ? extends U > > comparatorFunctionMap ) Map < String , Function < ? super Person , ? extends Comparable > > map1 = new HashMap < > ( ) ; map1.put ( `` name '' , Person : :getName ) ; method ( map1 ) ; Map < String , Function < ? super Person , ? extends Comparable < ? > > > map2 = new HashMap < > ( ) ; map2.put ( `` name '' , Person : :getName ) ; method ( map2 ) ;"
"@ BenchmarkMode ( Mode.AverageTime ) @ OutputTimeUnit ( TimeUnit.MILLISECONDS ) @ Warmup ( iterations = 10 ) @ Measurement ( iterations = 10 ) public class ComparationGet { static int val1 = 100_000 ; static int val2 = 500_000 ; static int val3 = 900_000 ; @ Benchmark public void testGet1LinkedListFromStart ( Blackhole blackhole , MyState state ) { MyDigit res1 = state.linkedList.get ( val1 ) ; blackhole.consume ( res1 ) ; } @ Benchmark public void testGet2LinkedListFromEnd ( Blackhole blackhole , MyState state ) { MyDigit res1 = state.linkedList.get ( val3 ) ; blackhole.consume ( res3 ) ; } } from start : ComparationGet.testGet1LinkedListFromStart avgt 10 0,457 ± 0,207 ms/opfrom end : ComparationGet.testGet2LinkedListFromEnd avgt 10 5,789 ± 3,094 ms/op @ State ( Scope.Thread ) public class MyState { public List < MyDigit > linkedList ; private int iterations = 1_000_000 ; @ Setup ( Level.Invocation ) public void setUp ( ) { linkedList = new LinkedList < > ( ) ; for ( int i = 0 ; i < iterations ; i++ ) { linkedList.add ( new MyDigit ( i ) ) ; } } } public class MyDigit { private int val ; public MyDigit ( int val ) { this.val = val ; } } public E get ( int index ) { checkElementIndex ( index ) ; return node ( index ) .item ; } Node < E > node ( int index ) { // assert isElementIndex ( index ) ; if ( index < ( size > > 1 ) ) { Node < E > x = first ; for ( int i = 0 ; i < index ; i++ ) x = x.next ; return x ; } else { Node < E > x = last ; for ( int i = size - 1 ; i > index ; i -- ) x = x.prev ; return x ; } }"
public static void main ( String [ ] args ) { Set < String > s = new HashSet < String > ( ) ; s.add ( `` A '' ) ; s.add ( `` B '' ) ; s.add ( `` C '' ) ; s.add ( `` D '' ) ; Iterator < String > itr1 = s.iterator ( ) ; while ( itr1.hasNext ( ) ) { Iterator < String > itr2 = itr1 ; String s1 = itr1.next ( ) ; while ( itr2.hasNext ( ) ) { String s2 = itr2.next ( ) ; System.out.println ( s1 + `` `` + s2 ) ; } } } A BA CA D A BA CA DB CB DC D
SomeObject a1 = new SomeObject ( ) ; a1 = someMethod ( a1 ) ; public SomeObject someMethod ( SomeObject a1 ) { a1.changeVariable ( ) ; return a1 ; }
1. v.removeElementAt ( 5 ) ; 2 . Scenario s= ( Scenario ) v.elementAt ( 5 ) ; v.removeElementAt ( 5 ) ; s=null ; 3 . Scenario s= ( Scenario ) v.elementAt ( 5 ) ; s.makeAllObjectsNull ( ) ; //explicitly assign null to 10 objects inside Scenario e.g . object1=null object2=null and so on v.removeElementAt ( 5 ) ; s=null ;
int sumRows ( int ArrayR [ ] [ ] ) { int row=3 ; int col=3 ; int sumR = ArrayR [ 0 ] [ 0 ] ; //int [ ] sumR = new int [ row ] ; for ( int i = 0 ; i < row ; i++ ) { for ( int j = 0 ; j < col ; j++ ) { sumR+=ArrayR [ i ] [ i ] ; } } return sumR ; }
public interface Foo { public void bar ( ) ; } public < T extends Foo > T callBarOnThird ( List < T > fooList ) { return fooList.get ( 2 ) .bar ( ) ; }
"public static String toString ( Object obj ) { return ReflectionToStringBuilder.toString ( obj , ToStringStyle.SHORT_PREFIX_STYLE ) ; } public static String toString ( Collection < Object > collection ) { return collection.stream ( ) .map ( SaLogUtils : :toString ) .collect ( Collectors.joining ( `` , `` , `` [ `` , `` ] '' ) ) ; } public static void main ( String [ ] args ) { List < Integer > list = List.of ( Integer.valueOf ( 1 ) ) ; System.out.println ( SaLogUtils.toString ( list ) ) ; System.out.println ( SaLogUtils.toString ( List.of ( Integer.valueOf ( 1 ) ) ) ) ; } // from toString ( Object ) ImmutableCollections.List12 [ e0=1 , e1= < null > ] // from toString ( Collection < Object > ) [ Integer [ value=1 ] ]"
"private volatile int count ; // initialised in constructorpublic synchronized void countDown ( ) { count -- ; if ( count < = 0 ) { notifyAll ( ) ; } } public synchronized void await ( ) throws InterruptedException { while ( count > 0 ) { wait ( ) ; } } private static final class Sync extends AbstractQueuedSynchronizer { Sync ( int count ) { setState ( count ) ; } int getCount ( ) { return getState ( ) ; } protected int tryAcquireShared ( int acquires ) { return ( getState ( ) == 0 ) ? 1 : -1 ; } protected boolean tryReleaseShared ( int releases ) { // Decrement count ; signal when transition to zero for ( ; ; ) { int c = getState ( ) ; if ( c == 0 ) return false ; int nextc = c-1 ; if ( compareAndSetState ( c , nextc ) ) return nextc == 0 ; } } }"
public StringBuffer ( ) { super ( 16 ) ; } AbstractStringBuilder ( int capacity ) { value = new char [ capacity ] ; } char [ ] value ; public class Holder { public final StringBuffer sb = new StringBuffer ( ) ; }
List < MyObject > updatedList ; List < MyObject > oldList ; updatedList.forEach ( MyObject - > { String id = MyObject.getId ( ) ; if ( oldList.stream ( ) .anyMatcher ( MyObject - > MyObject.getId ( ) .matches ( id ) ) { //Do the replacement here ? If so ... how ? } }
public class Test { // setup variables : public static final int i_max_byte = 127 ; public static final int i_max_byte_add1 = 128 ; public static final int i_max_short = 32767 ; public static final int i_max_short_add1 = 32768 ; public static final int i_max_char = 65535 ; public static final int i_max_char_add1 = 65536 ; public static final char c_max_byte = 127 ; public static final char c_max_byte_add1 = 128 ; public static final char c_max_short = 32767 ; public static final char c_max_short_add1 = 32768 ; public static final short s_min_char = 0 ; public static final short s_min_char_sub1 = -1 ; public static final short s_max_byte = 127 ; public static final short s_max_byte_add1 = 128 ; // all these are OK : public static final byte b1 = i_max_byte ; public static final byte b2 = s_max_byte ; public static final byte b3 = c_max_byte ; public static final byte b4 = ( short ) i_max_byte ; public static final byte b5 = ( char ) i_max_byte ; public static final char c1 = i_max_char ; public static final char c2 = s_min_char ; public static final short s1 = i_max_short ; public static final short s2 = c_max_short ; // pre-compiler complains `` type-mismatch '' : public static final byte _b1 = i_max_byte_add1 ; public static final byte _b2 = s_max_byte_add1 ; public static final byte _b3 = c_max_byte_add1 ; public static final byte _b4 = ( short ) i_max_byte_add1 ; public static final byte _b5 = ( char ) i_max_byte_add1 ; public static final char _c1 = i_max_char_add1 ; public static final char _c2 = s_min_char_min_us1 ; public static final short _s1 = i_max_short_add1 ; public static final short _s2 = c_max_short_add1 ; } public class Test2 { public static final long l_max_byte = 127 ; public static final long l_max_byte_add1 = 128 ; public static final long l_max_char = 32767 ; public static final long l_max_char_add1 = 32768 ; public static final long l_max_short = 65535 ; public static final long l_max_short_add1 = 65536 ; public static final long l_max_int = 2147483647 ; public static final long l_max_int_add1 = 2147483648L ; // `` type-mismatch '' for all : public static final byte b1 = l_max_byte ; public static final byte b2 = l_max_byte_add1 ; public static final char c1 = l_max_char ; public static final char c2 = l_max_char_add1 ; public static final short s1 = l_max_short ; public static final short s2 = l_max_short_add1 ; public static final int i1 = l_max_int ; public static final int i2 = l_max_int_add1 ; }
"HashMap < String , Integer > hm = new HashMap < String , Integer > ; hm.put ( `` a '' , 1 ) ; hm.put ( `` b '' , 12 ) ; hm.put ( `` c '' , 53 ) ; hm.put ( `` d '' , 2 ) ; hm.put ( `` e '' , 17 ) ; hm.put ( `` f '' , 8 ) ; hm.put ( `` g '' , 8 ) ; `` c '' , `` e '' , `` b ''"
"public class TransformString { public static void main ( String [ ] args ) { String str = `` AABSSSD '' ; StringBuilder newStr = new StringBuilder ( `` '' ) ; char temp = str.charAt ( 0 ) ; int count = 0 ; for ( int i = 0 ; i < str.length ( ) ; i++ ) { if ( temp == str.charAt ( i ) ) { count++ ; } else { newStr.append ( count ) ; newStr.append ( temp ) ; count = 0 ; } temp = str.charAt ( i ) ; if ( i == ( str.length ( ) - 1 ) ) { newStr.append ( str.charAt ( i ) ) ; } } String x = String.valueOf ( newStr ) ; x = x.replace ( `` 0 '' , `` '' ) ; System.out.print ( x ) ; } } 2AB2SD"
import java.lang.ref.WeakReference ; public class WeakRefTest { public static void main ( String [ ] args ) { Object obj = new Object ( ) ; WeakReference < Object > weakRef = new WeakReference < Object > ( obj ) ; int i = 0 ; while ( true ) { if ( weakRef.get ( ) ! = null ) { i++ ; System.out.println ( `` The object is alive for `` + i + `` loops - `` + weakRef ) ; } else { System.out.println ( `` The object has been collected . `` ) ; break ; } } } }
public class Body implements Serializable { static int bod = 5 ; int dis = -1 ; public void show ( ) { System.out.println ( `` Result : `` + bod + `` & `` + dis ) ; } } public class Testing { public static void main ( String [ ] args ) { Body theBody = new Body ( ) ; theBody.show ( ) ; try { ObjectOutputStream out = new ObjectOutputStream ( new FileOutputStream ( `` test.dat '' ) ) ; out.writeObject ( theBody ) ; out.close ( ) ; ObjectInputStream in = new ObjectInputStream ( new FileInputStream ( `` test.dat '' ) ) ; Body bodyDouble = ( Body ) in.readObject ( ) ; in.close ( ) ; bodyDouble.show ( ) ; } catch ( IOException e ) { } catch ( ClassNotFoundException e ) { } } } Result : 5 & -1Result : 5 & -1 Result : 5 & -1Result : 0 & -1
"class MyClass { public MyClass ( Map < String , String > m ) { System.out.println ( `` map '' ) ; } public MyClass ( SortedMap < String , String > m ) { System.out.println ( `` sortedmap '' ) ; } } public class Test { public < T extends Map < String , String > > Test ( T t ) { new MyClass ( t ) ; } public static void main ( String [ ] args ) { new Test ( new TreeMap < String , String > ( ) ) ; } }"
class A { } ... A a = new A ( ) ; List list = ( List ) a ; //passString s = ( String ) a ; //compile error
var qwerty = ( function ( ) { //some code return returnValue ; } int num = { public int method ( ) { //some code return val ; } }
private final Executor _executor = Executors.newCachedThreadPool ( ) ;
int highest = 0 ; for ( int b = 0 ; b < arrlst.size ( ) ; b++ ) { int p = arrlst.get ( b ) ; if ( highest < = p ) { highest = p ; highestindex.add ( b ) ; } }
"public class SeperateChainingST < Key , Value > { private int M =97 ; private Node [ ] st = new Node [ M ] ; private class Node { Object key ; Object val ; Node next ; } }"
"public class GuiTut extends JPanel { private GridBagConstraints c = new GridBagConstraints ( ) ; private JLabel deckLabel = new JLabel ( ) ; public GuiTut ( ) { setLayout ( new GridBagLayout ( ) ) ; try { deck = ImageIO.read ( new File ( `` resources/images/deck.jpg '' ) ) ; } catch ( Exception e ) { } c.gridx = 0 ; c.gridy = 0 ; JLabel deckPic = new JLabel ( new ImageIcon ( deck ) ) ; add ( deckPic , c ) ; deckLabel.setText ( `` Deck '' ) ; c.gridx = 0 ; c.gridy = 1 ; add ( deckLabel , c ) ; } public class GuiTut extends JPanel { private GridBagConstraints c = new GridBagConstraints ( ) ; private JLabel deckLabel = new JLabel ( ) ; private JPanel gridLayoutPanel = new JPanel ( new GridLayout ( 2 , 0 ) ) ; private JLabel [ ] label = new JLabel [ 14 ] ; public GuiTut ( ) { setLayout ( new GridBagLayout ( ) ) ; try { card = ImageIO.read ( new File ( `` resources/images/card.jpg '' ) ) ; } catch ( Exception e ) { } for ( int i = 0 ; i < 14 ; i++ ) { label [ i ] = new JLabel ( new ImageIcon ( card ) ; gridLayoutPanel.add ( label [ i ] ) ; } try { deck = ImageIO.read ( new File ( `` resources/images/deck.jpg '' ) ) ; } catch ( Exception e ) { } c.gridx = 0 ; c.gridy = 0 ; JLabel deckPic = new JLabel ( new ImageIcon ( deck ) ) ; add ( deckPic , c ) ; deckLabel.setText ( `` Deck '' ) ; c.gridx = 0 ; c.gridy = 1 ; add ( deckLabel , c ) ; c.gridx = 1 ; c.gridy = 0 ; add ( gridLayoutPanel , c ) ; }"
ThreadStuffCounter counter_1 = new ThreadStuffCounter ( 1 ) ; while ( counter_1.doProceed ) { Thread.sleep ( 500 ) ; Thread thread = new Thread ( counter_1 ) ; thread.start ( ) ; } package test ; public class ThreadStuffCounter implements Runnable { public volatile boolean doProceed = true ; private int id = -1 ; public volatile int i = -1 ; public ThreadStuffCounter ( int id ) { this.id = id ; } @ Override public void run ( ) { for ( i = 0 ; i < 10 ; i++ ) { System.out.println ( `` i = `` + i + `` in runnable id = `` + id ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } doProceed = false ; } } package test ; public class ThreadStuffCounter implements Runnable { public volatile boolean doProceed = true ; private int id = -1 ; volatile int i = -1 ; public ThreadStuffCounter ( int id ) { this.id = id ; } @ Overridepublic void run ( ) { i = 0 ; while ( i < 10 ) { System.out.println ( `` i = `` + i + `` in runnable id = `` + id + `` ; from thead id = `` + Thread.currentThread ( ) .getId ( ) ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } i++ ; } ThreadStuff.doProceed = false ; } package test ; public class ThreadStuff { public static volatile boolean doProceed = true ; public static void main ( String [ ] args ) throws InterruptedException { ThreadStuffCounter counter_1 = new ThreadStuffCounter ( 1 ) ; while ( doProceed ) { Thread.sleep ( 500 ) ; Thread thread = new Thread ( counter_1 ) ; thread.start ( ) ; } }
"import java.io . * ; import java.util . * ; import java.text . * ; import java.math . * ; import java.util.regex . * ; public class userRegex { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int testCases = Integer.parseInt ( in.nextLine ( ) ) ; while ( testCases > 0 ) { String username = in.nextLine ( ) ; String pattern = `` ( [ [ : alpha : ] ] ) [ a-zA-Z_ ] { 7,29 } '' ; Pattern r = Pattern.compile ( pattern ) ; Matcher m = r.matcher ( username ) ; if ( m.find ( ) ) { System.out.println ( `` Valid '' ) ; } else { System.out.println ( `` Invalid '' ) ; } testCases -- ; } } } 2dfhidbuffondfdidbuffon ValidValid ValidInvalid"
"BYTE* source = buffer ; BYTE* destination = convertBuffer3D ; void * memcpy ( void * destination , const void * source , size_t num ) ;"
public class Test { public static void main ( String [ ] args ) { new B ( ) ; } } interface a { } class A implements a { } class B extends A { }
"( pseudocode ) ArrayList < myObject > AArrayList < myObject > B ( pseudocode ) for ( each object in A ) { loop through all of B and find it } ( pseudocode ) convert B to HashMap < myObject.myValue , myObject > Cfor ( each object in A ) { look up the value in C } convert C back to an ArrayList"
"{ `` acquisitionDate '' : 1418849700000 , `` name '' : `` Funny Title '' , `` numberOfPages '' : 100 } @ Stateless @ Path ( `` /books '' ) public class BookService { @ Inject private BookRepo bookRepo ; @ Context UriInfo uriInfo ; @ Consumes ( MediaType.APPLICATION_JSON ) @ Path ( `` / '' ) @ POST @ Produces ( MediaType.APPLICATION_JSON ) public Response create ( @ Valid Book book ) { bookRepo.create ( book ) ; return Response.created ( getBookUri ( book ) ) .build ( ) ; } private URI getBookUri ( Book book ) { return uriInfo.getAbsolutePathBuilder ( ) .path ( book.getId ( ) .toString ( ) ) .build ( ) ; } } @ Entity @ Table ( name = `` books '' ) public class Book { @ Column ( nullable = false ) @ NotNull @ Temporal ( TemporalType.TIMESTAMP ) private Date acquisitionDate ; @ Column ( nullable = false , updatable = false ) @ GeneratedValue ( strategy = GenerationType.IDENTITY ) @ Id private Integer id ; @ Column ( nullable = false ) @ NotNull @ Size ( max = 255 , min = 1 ) private String name ; @ Column ( nullable = false ) @ Min ( value = 1 ) @ NotNull private Integer numberOfPages ; ( getters/setters/ ... ) } @ Statelesspublic class BookRepo { @ PersistenceContext ( unitName = `` book-repo '' ) protected EntityManager em ; public void create ( Book book ) { em.persist ( book ) ; } }"
private static int compute ( int v ) { return v == 0 ? null : v ; } private static int compute ( int v ) { if ( v == 0 ) return null ; else return v ; }
static byte [ ] byteArray = new byte [ 1 < < 11 ] ;
class A { private List < A > listA ; }
"if ( title.equals ( `` *** '' ) ) { String ids = driver.findElement ( By.name ( `` Idsession '' ) ) .getAttribute ( `` value '' ) ; } if ( title.equals ( `` *** '' ) ) { String ids = driver.findElement ( By.name ( `` Idsession '' ) ) .getAttribute ( `` value '' ) ; public String getID ( ) { return ids ; } } import java.awt.Color ; import java.awt.EventQueue ; import java.awt.Font ; import java.awt.Image ; import java.awt.Toolkit ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.image.BufferedImage ; import java.io.File ; import java.io.IOException ; import java.net.URL ; import java.util.concurrent.TimeUnit ; //import javax.swing.border.EmptyBorder ; import javax.imageio.ImageIO ; /*import java.io.IOException ; import javax.net.ssl.HttpsURLConnection ; import javax.net.ssl.SSLContext ; import javax.net.ssl.TrustManager ; import javax.net.ssl.X509TrustManager ; */import org.openqa.selenium.phantomjs.PhantomJSDriver ; import javax.swing.ImageIcon ; import javax.swing.JButton ; //import javax.swing.JEditorPane ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JOptionPane ; import javax.swing.JTextField ; //import javax.swing.plaf.metal.MetalBorders.TextFieldBorder ; import org.openqa.selenium.By ; import org.openqa.selenium.Dimension ; import org.openqa.selenium.WebDriver ; import org.openqa.selenium.WebElement ; import org.openqa.selenium.interactions.Actions ; //import java.awt.Point ; //import org.openqa.selenium.firefox.FirefoxDriver ; import org.apache.commons.io.FileUtils ; import org.omg.CORBA.portable.InputStream ; //import org.apache.log4j.PropertyConfigurator ; import org.openqa.selenium.OutputType ; import org.openqa.selenium.TakesScreenshot ; import javax.swing.JPanel ; import javax.swing.JPasswordField ; //import java.io.File ; //import java.io.IOException ; //import java.util.concurrent.TimeUnit ; //import org.apache.commons.io.FileUtils ; //import org.openqa.selenium.OutputType ; //import org.openqa.selenium.TakesScreenshot ; //import org.openqa.selenium.chrome.ChromeDriver ; public class Login extends JFrame { private JFrame frame ; private JTextField daten ; private JLabel background ; private JLabel cinlabel ; private JLabel title_1 ; private JLabel datalabel ; private JTextField code ; private JLabel codelabel ; private JPasswordField CIN ; private JLabel lblVersionBeta ; public WebDriver driver ; /** * Launch the application . */ public static void main ( String [ ] args ) { try { // body of main method goes here , including any other error handling } catch ( Throwable t ) { JOptionPane.showMessageDialog ( null , t.getClass ( ) .getSimpleName ( ) + `` : `` + t.getMessage ( ) ) ; throw t ; // do n't suppress Throwable } EventQueue.invokeLater ( new Runnable ( ) { public void run ( ) { try { Login window = new Login ( ) ; //window.frame.setUndecorated ( true ) ; window.frame.setVisible ( true ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } } ) ; //PropertyConfigurator.configure ( `` C : \\Users\\MJ\\eclipse-workspace\\FindMyResults\\src\\log4j.properties '' ) ; } /** * Create the application . * @ throws IOException */ public Login ( ) throws IOException { initialize ( ) ; } /** * Initialize the contents of the frame . * @ throws IOException */ private void initialize ( ) throws IOException { frame = new JFrame ( ) ; //java.awt.Dimension screenSize = Toolkit.getDefaultToolkit ( ) .getScreenSize ( ) ; //int w=screenSize.width ; //int h=screenSize.height ; //if ( w==1366 & & h==768 ) { frame.setBounds ( 100 , 100 , 1015 , 600 ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; frame.getContentPane ( ) .setLayout ( null ) ; // } else { // frame.setBounds ( 100 , 100 , 1024 , 768 ) ; // frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; // frame.getContentPane ( ) .setLayout ( null ) ; // } /*java.awt.Dimension screenSize = Toolkit.getDefaultToolkit ( ) .getScreenSize ( ) ; setBounds ( 0,0 , screenSize.width , screenSize.height ) ; setVisible ( true ) ; */ codelabel = new JLabel ( `` Code de s\u00E9curit\u00E9 \t '' ) ; codelabel.setFont ( new Font ( `` Dubai Medium '' , Font.PLAIN , 18 ) ) ; codelabel.setBounds ( 764 , 279 , 182 , 14 ) ; frame.getContentPane ( ) .add ( codelabel ) ; cinlabel = new JLabel ( `` CIN ou Identifiant DGCI `` ) ; cinlabel.setFont ( new Font ( `` Dubai Medium '' , Font.PLAIN , 18 ) ) ; cinlabel.setBounds ( 574 , 74 , 294 , 14 ) ; frame.getContentPane ( ) .add ( cinlabel ) ; datalabel = new JLabel ( `` Date de naissance ( jj/mm/aaaa ) \t '' ) ; datalabel.setFont ( new Font ( `` Dubai Medium '' , Font.PLAIN , 18 ) ) ; datalabel.setBounds ( 574 , 183 , 294 , 14 ) ; frame.getContentPane ( ) .add ( datalabel ) ; URL title =getClass ( ) .getResource ( `` /images/title.png '' ) ; CIN = new JPasswordField ( ) ; CIN.setBounds ( 574 , 99 , 396 , 50 ) ; frame.getContentPane ( ) .add ( CIN ) ; daten = new JTextField ( ) ; daten.setBackground ( new Color ( 248 , 248 , 255 ) ) ; daten.setBounds ( 574 , 208 , 396 , 50 ) ; daten.setForeground ( new Color ( 0 , 0 , 0 ) ) ; daten.setFont ( new Font ( `` Helvetica '' , Font.PLAIN , 18 ) ) ; daten.setColumns ( 10 ) ; frame.getContentPane ( ) .add ( daten ) ; /* // Create a trust manager that does not validate certificate chains TrustManager [ ] trustAllCerts = new TrustManager [ ] { new X509TrustManager ( ) { public java.security.cert.X509Certificate [ ] getAcceptedIssuers ( ) { return null ; } public void checkClientTrusted ( java.security.cert.X509Certificate [ ] certs , String authType ) { } public void checkServerTrusted ( java.security.cert.X509Certificate [ ] certs , String authType ) { } } } ; // Install the all-trusting trust manager try { SSLContext sc = SSLContext.getInstance ( `` SSL '' ) ; sc.init ( null , trustAllCerts , new java.security.SecureRandom ( ) ) ; HttpsURLConnection.setDefaultSSLSocketFactory ( sc.getSocketFactory ( ) ) ; } catch ( Exception e ) { } try { editorPane.setPage ( url ) ; //editorPane.scrollToReference ( reference ) ; } catch ( IOException e ) { System.err.println ( `` Attempted to read a bad URL : `` + url ) ; } */ //URL browser =getClass ( ) .getResource ( `` /browser/phantomjs.exe '' ) ; System.setProperty ( `` phantomjs.binary.path '' , `` phantomjs.exe '' ) ; WebDriver driver = new PhantomJSDriver ( ) ; //driver.manage ( ) .Window.Size = new Size ( 1920 , 1080 ) ; driver.get ( `` https : //www4.inscription.tn/ORegMx/servlet/AuthentificationEtud ? ident=cin '' ) ; String title1=driver.getTitle ( ) ; if ( ! ( title1.equals ( `` Site de l'inscription universitaire en ligne '' ) ) ) { JOptionPane.showMessageDialog ( null , '' Verifiez votre connexion internet '' ) ; driver.quit ( ) ; } WebElement ele = driver.findElement ( By.xpath ( `` //td [ @ rowspan= ' 2 ' ] '' ) ) ; driver.manage ( ) .timeouts ( ) .implicitlyWait ( 1 , TimeUnit.SECONDS ) ; // Get entire page screenshot File screenshot = ( ( TakesScreenshot ) driver ) .getScreenshotAs ( OutputType.FILE ) ; BufferedImage fullImg = ImageIO.read ( screenshot ) ; // Get the location of element on the page org.openqa.selenium.Point point = ele.getLocation ( ) ; // Get width and height of the element int eleWidth = ele.getSize ( ) .getWidth ( ) ; int eleHeight = ele.getSize ( ) .getHeight ( ) ; // Crop the entire page screenshot to get only element screenshot BufferedImage eleScreenshot= fullImg.getSubimage ( point.getX ( ) , point.getY ( ) , eleWidth , eleHeight ) ; ImageIO.write ( eleScreenshot , `` png '' , screenshot ) ; // Copy the element screenshot to disk File screenshotLocation = new File ( `` temp\\captcha.png '' ) ; FileUtils.copyFile ( screenshot , screenshotLocation ) ; JLabel captcha = new JLabel ( `` '' ) ; captcha.setIcon ( new ImageIcon ( `` temp\\captcha.png '' ) ) ; captcha.setBounds ( 574 , 304 , 182 , 50 ) ; frame.getContentPane ( ) .add ( captcha ) ; JButton valider = new JButton ( `` Valider '' ) ; valider.addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { WebElement c = driver.findElement ( By.name ( `` cin '' ) ) ; WebElement d = driver.findElement ( By.id ( `` dn '' ) ) ; WebElement cap = driver.findElement ( By.name ( `` cincap '' ) ) ; String myPass=String.valueOf ( CIN.getPassword ( ) ) ; String date = daten.getText ( ) ; String capp = code.getText ( ) ; // fill the fields c.sendKeys ( myPass ) ; d.sendKeys ( date ) ; cap.sendKeys ( capp ) ; // button valider cap.submit ( ) ; // check the title of the page String title=driver.getTitle ( ) ; if ( title.equals ( `` Dashboard - Inscription universitaire en ligne '' ) ) { WebElement msg = driver.findElement ( By.xpath ( `` /html [ 1 ] /body [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /table [ 2 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /div [ 1 ] /div [ 2 ] /div [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /div [ 1 ] /p [ 1 ] '' ) ) ; String name=msg.getAttribute ( `` innerText '' ) ; //System.out.println ( error ) ; String ids = driver.findElement ( By.name ( `` Idsession '' ) ) .getAttribute ( `` value '' ) ; private String getID ( ) { return ids ; } // String cookie=ids.getAttribute ( `` innerText '' ) ; //JOptionPane.showMessageDialog ( null , ids , '' Bienvenue '' , JOptionPane.INFORMATION_MESSAGE ) ; JOptionPane.showMessageDialog ( null , name , '' Bienvenue '' , JOptionPane.INFORMATION_MESSAGE ) ; //System.out.println ( `` Bienvenue '' ) ; //modify to new frame soon frame.dispose ( ) ; Accueil bien=new Accueil ( ) ; bien.setVisible ( true ) ; // driver.manage ( ) .timeouts ( ) .implicitlyWait ( 8 , TimeUnit.SECONDS ) ; } else { WebElement msg = driver.findElement ( By.xpath ( `` /html [ 1 ] /body [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /table [ 1 ] /tbody [ 1 ] /tr [ 1 ] /td [ 1 ] /div [ 1 ] /blockquote [ 1 ] /div [ 1 ] /font [ 1 ] '' ) ) ; String error=msg.getAttribute ( `` innerText '' ) ; //System.out.println ( error ) ; JOptionPane.showMessageDialog ( null , error ) ; WebElement ele = driver.findElement ( By.xpath ( `` //td [ @ rowspan= ' 2 ' ] '' ) ) ; driver.manage ( ) .timeouts ( ) .implicitlyWait ( 1 , TimeUnit.SECONDS ) ; // Get entire page screenshot File screenshot = ( ( TakesScreenshot ) driver ) .getScreenshotAs ( OutputType.FILE ) ; BufferedImage fullImg = null ; try { fullImg = ImageIO.read ( screenshot ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } // Get the location of element on the page org.openqa.selenium.Point point = ele.getLocation ( ) ; // Get width and height of the element int eleWidth = ele.getSize ( ) .getWidth ( ) ; int eleHeight = ele.getSize ( ) .getHeight ( ) ; // Crop the entire page screenshot to get only element screenshot BufferedImage eleScreenshot= fullImg.getSubimage ( point.getX ( ) , point.getY ( ) , eleWidth , eleHeight ) ; try { ImageIO.write ( eleScreenshot , `` png '' , screenshot ) ; } catch ( IOException e1 ) { // TODO Auto-generated catch block e1.printStackTrace ( ) ; } // Copy the element screenshot to disk File screenshotLocation = new File ( `` temp\\captcha.png '' ) ; try { FileUtils.copyFile ( screenshot , screenshotLocation ) ; } catch ( IOException e ) { // TODO Auto-generated catch block e.printStackTrace ( ) ; } ImageIcon img=new ImageIcon ( `` temp\\captcha.png '' ) ; img.getImage ( ) .flush ( ) ; captcha.setIcon ( img ) ; } } } ) ; valider.setFont ( new Font ( `` Tahoma '' , Font.BOLD , 13 ) ) ; valider.setBounds ( 686 , 462 , 162 , 32 ) ; frame.getContentPane ( ) .add ( valider ) ; code = new JTextField ( ) ; code.setBackground ( new Color ( 248 , 248 , 255 ) ) ; code.setForeground ( Color.BLACK ) ; code.setFont ( new Font ( `` Helvetica '' , Font.PLAIN , 18 ) ) ; code.setColumns ( 10 ) ; code.setBounds ( 764 , 304 , 206 , 50 ) ; frame.getContentPane ( ) .add ( code ) ; title_1 = new JLabel ( `` '' ) ; title_1.setIcon ( new ImageIcon ( title ) ) ; title_1.setBounds ( 45 , 138 , 440 , 90 ) ; frame.getContentPane ( ) .add ( title_1 ) ; lblVersionBeta = new JLabel ( `` Version Beta '' ) ; lblVersionBeta.setFont ( new Font ( `` Tahoma '' , Font.BOLD , 11 ) ) ; lblVersionBeta.setForeground ( Color.WHITE ) ; lblVersionBeta.setBounds ( 49 , 201 , 104 , 14 ) ; frame.getContentPane ( ) .add ( lblVersionBeta ) ; JPanel panel = new JPanel ( ) ; panel.setBackground ( new Color ( 0 , 0 , 0 , 90 ) ) ; panel.setBounds ( 0 , 0 , 511 , 735 ) ; frame.getContentPane ( ) .add ( panel ) ; background = new JLabel ( `` '' ) ; //BufferedImage bg = ImageIO.read ( new File ( `` ./resources/img/AnimationV.gif '' ) ) ; URL bg =getClass ( ) .getResource ( `` /images/AnimationV.gif '' ) ; // getClass ( ) .getResource ( `` resources/img/AnimationV.gif '' ) ; //Image image = Toolkit.getDefaultToolkit ( ) .getImage ( url ) ; //java.io.InputStream image = ClassLoader.getSystemResourceAsStream ( `` resources/img/AnimationV.gif '' ) ; background.setIcon ( new ImageIcon ( bg ) ) ; background.setBounds ( 0 , 0 , 1006 , 724 ) ; frame.getContentPane ( ) .add ( background ) ; } }"
public abstract AbstractController < T > { abstract protected Class < T > getType ( ) ; } public ParentController extends AbstractController < Parent > { @ Override protected Class < Parent > getType ( ) { return Parent.class ; } } public SonController extends ParentController { @ Override protected Class < Son > getType ( ) { return Son.class ; } }
"float_pat = r'\d\.\d* ( ? : E-\d+ ) ? ' list_of_floats_pat = r'\ [ ( ? : \d\.\d* ( ? : E-\d+ ) ? ) , ) +\ ] ' [ [ [ 0.6453525160688715 , 0.15620941152962334 , 0.1874313118193626 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 0.01050721017750691 , 9.991008092716556E-5 ] , [ 0.5904776610141782 , 0.18175460267577365 , 9.991008092716556E-5 , 0.22716827582448523 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 ] ] ] 0.6453525160688715 , 0.15620941152962334 , 0.1874313118193626 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 0.01050721017750691 , 9.991008092716556E-5 0.5904776610141782 , 0.18175460267577365 , 9.991008092716556E-5 , 0.22716827582448523 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5 , 9.991008092716556E-5"
"public class SomeClass { // does n't even need to be final , which is freaky Runnable memberRunnable = new Runnable ( ) { public void run ( ) { SomeOtherClass.someMethod ( memberRunnable ) ; // this works } } public void someMethod ( ) { final Runnable varRunnable = new Runnable ( ) { public void run ( ) { SomeOtherClass.someMethod ( varRunnable ) ; // compiler error - `` varRunnable '' might not have been initialized } } } }"
"public class ExampleClass < T , U > { [ ... ] public < E extends T & Comparable < T > > ExampleClass ( Function < U , E > function ) { this.function = function ; this.comparator = ( E a , E b ) - > a.compareTo ( b ) ; } public ExampleClass ( Function < U , T > function , Comparator < U > comparator ) { this.function = function ; this.comparator = comparator ; } }"
public interface Unit { ... } public enum ForceUnit implements Unit { ... } public enum MassUnit implements Unit { ... } public interface Property { public void setUnit ( Unit unit ) ; // for example } public class Force implements Property { ... } public class Mass implements Property { ... }
C c = GenericScreenDataBean fieldObjx = this.expenseLineItemList.stream ( ) .flatMap ( a - > a.getSectionModel ( ) .getControls ( ) .stream ( ) ) .filter ( b - > b.getData ( ) instanceof GenericScreenDataBean ) .map ( GenericScreenDataBean.class : :cast ) .filter ( c- > c.getFieldKey ( ) .equals ( `` IncurredAmount '' ) ) .findAny ( ) .orElse ( null ) ;
"private static Scanner in ; private static double s ; private static double a ; public static void main ( String [ ] args ) { in = new Scanner ( System.in ) ; DecimalFormat two = new DecimalFormat ( `` # . # # '' ) ; System.out.println ( `` Enter the length from center to vertex : `` ) ; double r = in.nextDouble ( ) ; s = getSide ( r ) ; a = getArea ( s ) ; System.out.println ( `` The area of a pentagon of radius `` +r+ '' is `` +two.format ( a ) ) ; } public static double getSide ( double radius ) { double side = 2 * radius * Math.sin ( ( Math.PI ) / 5 ) ; return side ; } public static double getArea ( double side ) { double area = ( 5 * Math.pow ( side , 2 ) ) / ( 4 * Math.tan ( ( Math.PI ) / 5 ) ) ; return area ; }"
"public class ReOrdering implements Runnable { int one , two , three , four , five , six ; volatile int volaTile ; @ Override public void run ( ) { one = 1 ; two = 2 ; three = 3 ; volaTile = 92 ; int x = four ; int y = five ; int z = six ; } } public class Reordering { private int x ; private volatile int y ; public void writer ( ) { x = 1 ; y = 2 ; } public void reader ( ) { if ( y == 2 ) { if ( x == 0 ) { // X assignment is happens-before for // volatile Y assignment // so X ca n't be 0 when Y equals 2 throw new RuntimeException ( ) ; } x = 0 ; y = 0 ; } } public static void main ( String [ ] args ) { Reordering reordering = new Reordering ( ) ; Thread thread = new Thread ( ( ) - > { while ( true ) { reordering.writer ( ) ; } } ) ; thread.setDaemon ( true ) ; thread.start ( ) ; while ( true ) { reordering.reader ( ) ; } } }"
"@ Testpublic void testProgramExecution ( ) { Program program = new Program ( ) ; program.executeStep1 ( ) ; program.executeStep2 ( ) ; program.executeStep3 ( ) ; // if execution reaches this point , that means the program ran successfully . // But what is the best practice ? // If I leave it like this , the test will `` pass '' , // but I am not sure if this is good practice . } assertEquals ( expectedString , actualString ) ;"
class ThreadTest { void threadTest ( ) { new Thread ( this : :threadTest ) .start ( ) ; System.out.println ( Thread.activeCount ( ) ) ; } public static void main ( String [ ] args ) { new ThreadTest ( ) .threadTest ( ) ; } } 444444444 class ThreadTest { void threadTest ( ) { new Thread ( this : :threadTest ) .start ( ) ; if ( Thread.activeCount ( ) > 4 ) { System.out.println ( Thread.activeCount ( ) ) ; } } public static void main ( String [ ] args ) { new ThreadTest ( ) .threadTest ( ) ; } }
* *** ***** *********** public static void main ( String [ ] args ) { for ( int i = 1 ; i < = 5 ; i++ ) { for ( int j = 0 ; j < i ; j++ ) { System.out.print ( `` * '' ) ; } System.out.println ( ) ; } for ( int i = 0 ; i < 6 ; i++ ) { for ( int j = 5 ; j > 0 ; j -- ) { if ( i < j ) System.out.print ( `` `` ) ; else System.out.print ( `` * '' ) ; } System.out.println ( ) ; } }
private Scanner scanner ; /** * Constructor for objects of class Scanner */public Ssss ( ) { // initialise instance variables scanner = new Scanner ( System.in ) ; } public void enterYourName ( ) { System.out.println ( `` Enter your Name '' ) ; String name = scanner.nextLine ( ) ; System.out.println ( `` Your name is : '' + name ) ; } public void enterYourAge ( ) { System.out.println ( `` Enter your Age '' ) ; int age = scanner.nextInt ( ) ; System.out.println ( `` Your age is : `` + age ) ; }
"public abstract class ObjValContainerMapper < E , P > { private ValueContainer < P > provider ; public ObjValContainerMapper ( ValueContainer < P > provider ) { this.provider = provider ; } public abstract P getValue ( E entity ) ; public abstract void setValue ( E entity , P value ) ; ... } public interface ValueContainer < T > { T getValue ( ) ; void setValue ( T value ) ; } public class AdvancedCheckBox extends JCheckBox implements ValueContainer < Boolean > AdvancedCheckBox chckbxBindToDrive = new AdvancedCheckBox ( `` Bind to Drive '' ) ; ObjValContainerMapper < IndexSpec , Boolean > bindToDriveMapper = new ObjValContainerMapper < IndexSpec , Boolean > ( chckbxBindToDrive ) { @ Override public Boolean getValue ( IndexSpec entity ) { if ( entity == null ) { return false ; } return entity.isBindToDrive ( ) ; } @ Override public void setValue ( IndexSpec entity , Boolean value ) { entity.setBindToDrive ( value ) ; } } ;"
package swain.test ; public class Test { public static void JavaTest ( Object obj ) { System.out.println ( `` Object '' ) ; } public static void JavaTest ( String arg ) { System.out.println ( `` String '' ) ; } public static void main ( String [ ] args ) { JavaTest ( null ) ; } } String
"@ SuppressWarnings ( { `` rawtypes '' , `` unchecked '' } ) public static void shuffle ( List < ? > list , Random rnd ) { int size = list.size ( ) ; if ( size < SHUFFLE_THRESHOLD || list instanceof RandomAccess ) { for ( int i=size ; i > 1 ; i -- ) swap ( list , i-1 , rnd.nextInt ( i ) ) ; } else { Object arr [ ] = list.toArray ( ) ; // Shuffle array for ( int i=size ; i > 1 ; i -- ) swap ( arr , i-1 , rnd.nextInt ( i ) ) ; // Dump array back into list // instead of using a raw type here , it 's possible to capture // the wildcard but it will require a call to a supplementary // private method ListIterator it = list.listIterator ( ) ; for ( int i=0 ; i < arr.length ; i++ ) { it.next ( ) ; it.set ( arr [ i ] ) ; } } }"
"private String changeFirstCharCase ( String word ) { return Character.toLowerCase ( word.charAt ( 0 ) ) + word.substring ( 1 ) ; } private static String changeFirstCharCase ( String word , boolean toUpperCase ) { return toUpperCase ? Character.toUpperCase ( word.charAt ( 0 ) ) + word.substring ( 1 ) : Character.toLowerCase ( word.charAt ( 0 ) ) + word.substring ( 1 ) ; } private static String changeFirstCharCase ( String word , String ... toUpperCase ) { return toUpperCase.length > 0 ? Character.toUpperCase ( word.charAt ( 0 ) ) + word.substring ( 1 ) : Character.toLowerCase ( word.charAt ( 0 ) ) + word.substring ( 1 ) ; } changeFirstCharCase ( facadeType ) ; changeFirstCharCase ( facadeType , `` toUpperCase '' )"
"private T getData < T > ( Context context , String url , PostModel postModel ) throws ApiException , IOException , ConnectionException { Response response = new CallApi < T > ( Connection.getApiUrl ( context ) ) .Post ( url , postModel ) ; if ( response.code ( ) ! = 200 ) throw new ApiException ( context , response ) ; Gson gson = new GsonBuilder ( ) .setLenient ( ) .create ( ) ; T obj = gson.fromJson ( response.body ( ) .charStream ( ) , new TypeToken < T > ( ) { } .getType ( ) ) ; return obj ; } EmployeeModel model = getData < EmployeeModel > ( context , url , null ) ; private < T > T getData ( Context context , String url , PostModel postModel ) { ... }"
"public static void timedRun ( final Runnable r , long timeout , TimeUnit unit ) throws InterruptedException { class RethrowableTask implements Runnable { private volatile Throwable t ; public void run ( ) { try { r.run ( ) ; } catch ( Throwable t ) { this.t = t ; } } void rethrow ( ) { if ( t ! = null ) throw launderThrowable ( t ) ; } } RethrowableTask task = new RethrowableTask ( ) ; final Thread taskThread = new Thread ( task ) ; taskThread.start ( ) ; cancelExec.schedule ( new Runnable ( ) { public void run ( ) { taskThread.interrupt ( ) ; } } , timeout , unit ) ; taskThread.join ( unit.toMillis ( timeout ) ) ; task.rethrow ( ) ; }"
"public void showInput ( ) { Set codes = new HashSet ( ) ; Stage inputWindow = new Stage ( ) ; GridPane pane = new GridPane ( ) ; Scene scene = new Scene ( pane ) ; Label label = new Label ( `` Here comes the pressed keys '' ) ; scene.setOnKeyPressed ( e - > { e.consume ( ) ; int code = e.getCode ( ) .ordinal ( ) ; if ( label.getText ( ) .equals ( `` Here comes the pressed keys '' ) ) { codes.add ( code ) ; label.setText ( String.valueOf ( e.getCode ( ) .getName ( ) ) ) ; } else if ( ! codes.contains ( code ) ) { codes.add ( code ) ; label.setText ( label.getText ( ) + `` + '' + e.getCode ( ) .getName ( ) ) ; } } ) ; scene.setOnKeyReleased ( e - > { e.consume ( ) ; inputWindow.close ( ) ; } ) ; pane.add ( label , 0 , 0 ) ; inputWindow.setScene ( scene ) ; inputWindow.show ( ) ; }"
public static int solution ( int [ ] A ) { ArrayList < Integer > a = new ArrayList < Integer > ( ) ; for ( int i=0 ; i < A.length ; i++ ) if ( A [ i ] > = 0 ) a.add ( A [ i ] ) ; if ( a.isEmpty ( ) ) { return 1 ; } a.sort ( null ) ; if ( a.get ( 0 ) > 1 ) { return 1 ; } for ( int i=0 ; i < a.size ( ) -1 ; i++ ) { if ( a.get ( i ) ! = a.get ( i+1 ) & & a.get ( i ) +1 ! = a.get ( i+1 ) ) { return a.get ( i ) +1 ; } } return a.get ( a.size ( ) -1 ) +1 ; } if ( a.get ( i ) ! = a.get ( i+1 ) & & a.get ( i ) +1 ! = a.get ( i+1 ) ) return a.get ( i ) +1 ; int a1 = a.get ( i ) ; int a2 = a.get ( i+1 ) ; if ( a1 ! = a2 & & a1 +1 ! = a2 ) return a.get ( i ) +1 ; int sub = a.get ( i+1 ) - a.get ( i ) ; if ( sub ! = 0 & & sub ! = 1 ) return a.get ( i ) +1 ;
List < String > stringList = new ArrayList < > ( ) ; Stream < String > stringStream = stringList.stream ( ) ; stringStream.close ( ) ;
"for ( i = 1 ; i < = 5 ; ++i , z = 0 ) { // first line for ( int space = 1 ; space < = segments - i ; ++space ) { System.out.print ( `` `` ) ; } while ( z ! = 2 * i - 1 ) { System.out.print ( `` * `` ) ; z++ ; } System.out.println ( ) ; } for ( i = 1 ; i < = 10 ; ++i , z = 0 ) { // second line for ( int space = 1 ; space < = segments - i ; ++space ) { System.out.print ( `` `` ) ; } while ( z ! = 2 * i - 1 ) { System.out.print ( `` * `` ) ; z++ ; } System.out.println ( ) ; }"
private final RedisServer redisServer ; public RedisTestConfiguration ( @ Value ( `` $ { cache.port } '' ) final int port ) { this.redisServer = new RedisServer ( port ) ; }
"import java.util.ArrayList ; import java.util.List ; import java.util.function.BiConsumer ; public class BiConsumerTest { public static void main ( String [ ] args ) { try { List < String > list1 = new ArrayList < String > ( ) ; list1.add ( `` A '' ) ; list1.add ( `` B '' ) ; list1.add ( `` V '' ) ; List < String > list2 = new ArrayList < String > ( ) ; list2.add ( `` J '' ) ; list2.add ( `` G '' ) ; list2.add ( `` P '' ) ; BiConsumer < List < String > , List < String > > bc = ( lista , listb ) - > { lista.stream ( ) .forEach ( System.out : :print ) ; } ; } catch ( Exception ex ) { ex.printStackTrace ( ) ; } } }"
"static < A , B > Class < ? extends A > getLeftClass ( Pair < A , B > tuple ) { A left = tuple.getLeft ( ) ; return left.getClass ( ) ; } static < A , B > Class < ? extends A > getLeftClass ( Pair < A , B > tuple ) { A left = tuple.getLeft ( ) ; return ( Class < ? extends A > ) left.getClass ( ) ; }"
"class User { String name ; } class UserMap { Map < String , List < User > userMapOfSchool ; public String toString ( ) { //return `` schoolName has noOfStudents '' for each key in the map } }"
double Value = Object.Object.Object.Object.DoubleValue ; double Value : Object.DoubleValue ;
"class C1 < T extends C1 < T > > { } class C2 < U > extends C1 < C2 < U > > { } C1 < C2 < ? > > a ; Test.java:3 : error : type argument C2 < ? > is not within bounds of type-variable T C1 < C2 < ? > > a ; ^ where T is a type-variable : T extends C1 < T > declared in class C11 error class C3 < T extends C3 < ? > > { } class C4 < Y , Z > extends C3 < C4 < Z , Y > > { } class C5 < X extends C3 < X > > { void accept ( X x ) ; } C5 < C6 < ? , ? > > b ; C1 < ? extends C2 < ? > > c ;"
"protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main4 ) ; spinnerFrom = ( Spinner ) findViewById ( R.id.spinner1 ) ; ArrayAdapter < CharSequence > adapterFrom = ArrayAdapter.createFromResource ( this , R.array.distance_array , android.R.layout.simple_spinner_item ) ; adapterFrom.setDropDownViewResource ( android.R.layout.simple_spinner_dropdown_item ) ; spinnerFrom.setAdapter ( adapterFrom ) ; spinnerFrom.setOnItemSelectedListener ( this ) ; spinnerTo = ( Spinner ) findViewById ( R.id.spinner2 ) ; ArrayAdapter < CharSequence > adapterTo = ArrayAdapter.createFromResource ( this , R.array.distance_array , android.R.layout.simple_spinner_item ) ; adapterTo.setDropDownViewResource ( android.R.layout.simple_spinner_dropdown_item ) ; spinnerTo.setAdapter ( adapterTo ) ; spinnerTo.setOnItemSelectedListener ( this ) ; } public void convert ( View view ) { double value = new Double ( distance.getText ( ) .toString ( ) ) ; from = spinnerFrom.getSelectedItemPosition ( ) ; to = spinnerTo.getSelectedItemPosition ( ) ; if ( from == 0 ) { if ( to == 1 ) value = UnitConverter.feetToMiles ( value ) ; else if ( to == 2 ) value = UnitConverter.feetToMeters ( value ) ; else if ( to == 3 ) value = UnitConverter.feetToYards ( value ) ; else value = value ; } else if ( from == 1 ) { if ( to == 0 ) value = UnitConverter.milesToFeet ( value ) ; else if ( to == 2 ) value = UnitConverter.milesToMeters ( value ) ; else if ( to == 3 ) value = UnitConverter.milesToYards ( value ) ; else value = value ; } else if ( from == 2 ) { if ( to == 0 ) value =UnitConverter.metersToFeet ( value ) ; else if ( to == 1 ) value = UnitConverter.metersToMiles ( value ) ; else if ( to == 3 ) value = UnitConverter.metersToYards ( value ) ; else value = value ; } else if ( from == 3 ) { if ( to == 0 ) value = UnitConverter.yardsToFeet ( value ) ; else if ( to == 1 ) value = UnitConverter.yardsToMiles ( value ) ; else if ( to == 2 ) value = UnitConverter.yardsToMeters ( value ) ; else value = value ; } distance.setText ( new Double ( value ) .toString ( ) ) ; } < RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : paddingLeft= '' @ dimen/activity_horizontal_margin '' android : paddingRight= '' @ dimen/activity_horizontal_margin '' android : paddingTop= '' @ dimen/activity_vertical_margin '' android : paddingBottom= '' @ dimen/activity_vertical_margin '' tools : context= '' com.example.jacob.myapplication.Main4Activity '' android : background= '' @ android : color/holo_blue_bright '' > < TextView android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : textAppearance= '' ? android : attr/textAppearanceLarge '' android : text= '' Distance Converter '' android : id= '' @ +id/textViewTitle '' android : layout_alignParentTop= '' true '' android : layout_alignParentLeft= '' true '' android : layout_alignParentStart= '' true '' android : layout_marginLeft= '' 92dp '' android : layout_marginStart= '' 92dp '' / > < EditText android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : inputType= '' numberDecimal '' android : ems= '' 10 '' android : id= '' @ +id/editText '' android : layout_below= '' @ +id/textViewTitle '' android : layout_centerHorizontal= '' true '' android : hint= '' Enter Distance '' / > < Spinner android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : id= '' @ +id/spinner1 '' android : spinnerMode= '' dialog '' android : clickable= '' true '' android : layout_below= '' @ +id/textViewFrom '' android : layout_alignParentLeft= '' true '' android : layout_alignParentStart= '' true '' / > < TextView android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : textAppearance= '' ? android : attr/textAppearanceLarge '' android : text= '' Convert To : '' android : id= '' @ +id/textViewTo '' android : layout_below= '' @ +id/spinner1 '' android : layout_alignParentLeft= '' true '' android : layout_alignParentStart= '' true '' / > < Spinner android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : id= '' @ +id/spinner2 '' android : spinnerMode= '' dialog '' android : layout_below= '' @ +id/textViewTo '' android : layout_alignParentLeft= '' true '' android : layout_alignParentStart= '' true '' / > < TextView android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : textAppearance= '' ? android : attr/textAppearanceLarge '' android : text= '' Convert From '' android : id= '' @ +id/textViewFrom '' android : layout_below= '' @ +id/editText '' android : layout_alignParentLeft= '' true '' android : layout_alignParentStart= '' true '' / > < Button android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' Convert '' android : id= '' @ +id/buttonConvert '' android : layout_below= '' @ +id/spinner2 '' android : layout_centerHorizontal= '' true '' android : onClick= '' convert '' / >"
public class ReverseGPA { GPpredictor gp_predictor = new GPpredictor ( ) ; //This is the line that causes error double CURRENT_CREDITS ; double FUTURE_CREDITS ; double CUM_GPA ; double DESIRED_GPA ; double NEW_GRADE_POINT ; int ROUNDED_GRADE_POINT ; double NEW_GPS ; } public class GPpredictor { ReverseGPA rev_gpa = new ReverseGPA ( ) ; //This is the line that causes error ArrayList < String > arrayCourseName = new ArrayList < > ( ) ; ArrayList < Integer > arrayCourseCredit = new ArrayList < > ( ) ; ArrayList < String > arrayCourseGrade = new ArrayList < > ( ) ; int COURSES ; int CREDIT ; String COURSENAME ; //For predicting purposesint GRADE ; }
public abstract class Index { public Index ( String indexPath ) { // Constructor using the information provided by the subclass } public void phraseSearch ( ... ) { // Do the operation } public void termSearch ( ... ) { // Do the operation } public void categorySearch ( ... ) { // Do the operation } } public class ReviewIndex extends Index { public ReviewIndex ( ) { super ( `` ./review_index/ '' ) ; } } public class TipIndex extends Index { public TipIndex ( ) { super ( `` ./tip_index/ '' ) ; } }
abstract class ControlGraphic { // ... } class PrecisionControlGraphic extends ControlGraphic { // ... } class AccuracyControlGraphic extends ControlGraphic { // ... } private < T extends ControlGraphic > List < T > getGraphics ( ) { List < T > graphics = new LinkedList < T > ( ) ; for ( ControlGraphic graphic : getGraphicsFromDB ( ) ) graphics.add ( ( T ) graphic ) ; return graphics ; } List < PrecisionControlGraphic > precisionGraphics = getGraphics ( ) ; for ( PrecisionControlGraphic graph : precisionGraphics ) { ... } for ( PrecisionControlGraphic graph : getGraphics ( ) ) { ... }
Set < A > setOfAs = new HashSet < > ( ) ; ( ( Set < B > ) setOfAs ) Set < ? extends A > setOfAs = new HashSet < > ( ) ; ( ( Set < B > ) setOfAs )
"HttpRequest currentRequest = httpRequest ; for ( Filter filter : filters ) { currentRequest = filter.doFilter ( currentRequest ) ; } HttpRequest filteredRequest1 = filters.get ( 0 ) .doFilter ( currentRequest ) ; HttpRequest filteredRequest2 = filters.get ( 1 ) .doFilter ( filteredRequest1 ) ; HttpRequest filteredRequest3 = filters.get ( 2 ) .doFilter ( filteredRequest2 ) ; ... Function < HttpRequest , HttpRequest > applyFilter = request - > filters.get ( 0 ) .doFilter ( request ) ;"
"public class Field extends LinearLayout { public void init ( ) { setOnFocusChangeListener ( new OnFocusChangeListener ( ) { @ Override public void onFocusChange ( View v , boolean hasFocus ) { // I want to access the main object 'Field ' here ( not the class , the object ) } } ) ; // to be clear the object referred as 'this ' from HERE should be accessed from where the above comment is . } }"
"public void fx ( I_AM_A_Widget_AND_IMPLEMENT_INTERFACE_HasText x ) { //do stuff with x , which is guaranteed to be a Widget AND implement HasText }"
class stringmute { public static void main ( String [ ] args ) { String s1= '' Hello `` ; //string one . System.out.println ( `` Str1 : '' +s1 ) ; String s2= s1+ '' world '' ; //New String . System.out.println ( `` Str2= '' +s2 ) ; s1=s1+ '' World ! ! `` ; //This should produce only Hello right ? System.out.println ( `` Str1 modified : '' +s1 ) ; } } Str1 : Hello Str2=Hello worldStr1 modified : Hello World ! !
"textview.setCompoundDrawablesWithIntrinsicBounds ( image , 0 , 0 , 0 ) ; < TextView android : id= '' @ +id/text '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_gravity= '' fill_vertical '' android : ellipsize= '' end '' android : layout_marginTop= '' 5dp '' android : layout_marginBottom= '' -10dp '' android : gravity= '' center '' android : layout_marginLeft= '' 15dp '' android : minHeight= '' 24dp '' android : paddingLeft= '' @ dimen/spacing_d2 '' android : paddingRight= '' @ dimen/spacing_d2 '' android : tag= '' @ string/tag_font_h_regular '' android : fontFamily= '' @ font/cachetbook '' android : textColor= '' @ color/white_new '' android : textSize= '' 12dp '' tools : text= '' Universal Orlando Resort '' / >"
foo ( new Bar ( ) { @ Override public String baz ( String qux ) { return modify ( qux ) + transmogrify ( qux ) ; } } final Bar bar = new Bar ( ) { @ Override public String baz ( String qux ) { return modify ( qux ) + transmogrify ( qux ) ; } } ; while ( ... ) { foo ( bar ) ; } while ( ... ) { foo ( qux - > modify ( qux ) + transmogrify ( qux ) ) ; }
// databaseRecordsLists is a List < List < DatabaseRecord > > List < DatabaseRecord > mostRecentRecords = new ArrayList < > ( ) ; for ( List < DatabaseRecord > databaseRecords : databaseRecordsLists ) { mostRecentRecords.add ( databaseRecords.stream ( ) .max ( Comparator.comparing ( DatabaseRecord : :getTimestamp ) ) .orElseThrow ( NoSuchElementException : :new ) ) ; }
@ Overrideprotected final void onDraw ( Canvas canvas ) { if ( conditions ) return ; // child classes should only draw if this class gives the ok subDraw ( canvas ) ; } protected abstract void subDraw ( Canvas canvas ) ;
java.lang.RuntimeException : ... Caused by : com.mypackage.SpecificException try { ts.init ( ) ; } catch ( RuntimeException e ) { if ( e.getCause ( ) instanceof SpecificException ) { //do something } else { throw e ; } }
public class A { } public class B extends A { } public class C extends B { } public class D extends C { } public static void main ( String [ ] args ) { List < A > a = Arrays.asList ( new A ( ) ) ; List < B > b = Arrays.asList ( new B ( ) ) ; List < C > c = Arrays.asList ( new C ( ) ) ; List < D > d = Arrays.asList ( new D ( ) ) ; extendsParam ( a ) ; // error as A is not assignable to B extendsParam ( b ) ; extendsParam ( c ) ; extendsParam ( d ) ; // 3 previous ok as they can produce B superParam ( a ) ; superParam ( b ) ; superParam ( c ) ; // 3 previous ok as they can consume C superParam ( d ) ; // error as C is not assignable to D extendsSuperParam ( a ) ; // error as A is not assignable to B extendsSuperParam ( b ) ; extendsSuperParam ( c ) ; // 2 previous ok as they can consume C and produce B extendsSuperParam ( d ) ; // error as C is not assignable to D } public static void extendsParam ( List < ? extends B > blist ) { B b = blist.get ( 0 ) ; blist.add ( new C ( ) ) ; // error } public static void superParam ( List < ? super C > clist ) { B b = clist.get ( 0 ) ; // error clist.add ( new C ( ) ) ; } public static void extendsSuperParam ( List < ? ? ? > bclist ) { B b = bclist.get ( 0 ) ; // ok bclist.add ( new C ( ) ) ; // ok }
"ZoneId zoneId = ZoneId.of ( `` America/Los_Angeles '' ) ; long currMillis = 2530778400000L ; Instant curr = Instant.ofEpochMilli ( currMillis ) ; LocalDateTime dt = LocalDateTime.ofInstant ( curr , zoneId ) ; //the local one just for completenessZonedDateTime zdt = ZonedDateTime.ofInstant ( curr , zoneId ) ; Calendar calendar = GregorianCalendar.from ( zdt ) ; System.out.println ( String.format ( `` % -30s % s '' , `` java-8 LocalDateTime hour : '' , dt.toLocalTime ( ) .getHour ( ) ) ) ; System.out.println ( String.format ( `` % -30s % s '' , `` java-8 ZonedDateTime hour : '' , zdt.toLocalTime ( ) .getHour ( ) ) ) ; System.out.println ( String.format ( `` % -30s % s '' , `` Calendar hour : '' , calendar.get ( Calendar.HOUR_OF_DAY ) ) ) ; java-8 LocalDateTime hour : 3java-8 ZonedDateTime hour : 3Calendar hour : 2"
"1. void m ( Object o , long x , long y ) 2. void m ( String s , int x , long y ) 3. void m ( Object o , int x , long y ) 4. void m ( String s , long x , int y ) Object o ; String v ; int a ; long b ; m ( v , a , b ) ; Calls 2 , because it is the most specific.m ( v , a , a ) ; Not legal , because 2 and 4 could both be called ( not specific enough ) .m ( v , b , a ) ; Calls 4 , because it is the most specific . m ( v , b , b ) ; Calls 1 , because it is the only one that will fit ( long can not shorten to int ) .m ( o , b , b ) ; Calls 1 , similar reasoning as above answer.m ( o , a , a ) ; Unsure . I 'm not sure of the precedence ."
tables.removeIf ( t - > ( ( t.getName ( ) == null ) || ( t.getCode ( ) == null ) ) ) ;
11313476Neutralwa 12312345123 public class Solution { public static void main ( String [ ] args ) throws IOException { Scanner scan = new Scanner ( System.in ) ; ArrayList < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i++ ) { list.add ( scan.nextLine ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < list.size ( ) ; i++ ) { if ( count+2 > list.size ( ) ) { break ; } if ( list.get ( i+1 ) .length ( ) < = list.get ( i ) .length ( ) ) { System.out.println ( list.indexOf ( list.get ( i+1 ) ) ) ; break ; } count = count + 1 ; } } }
int code = 0x92011202 ; int a = ( code & 0xF0000000 ) > > 28 ; int b = ( code & 0x0F000000 ) > > 24 ; // .. int n = ( code & 0x0000000F ) ;
if ( object.getClass ( ) == anotherObject.getClass ( ) ) { }
"import java.util.ArrayList ; import java.util.List ; public class TreeNode < E extends Comparable < E > > { private E data ; private List < TreeNode < E > > children ; public TreeNode ( E value ) { data = value ; children = new ArrayList < > ( ) ; } public E getData ( ) { return data ; } public void setData ( E data ) { this.data = data ; } public List < TreeNode < E > > getChildren ( ) { return children ; } public void setChildren ( List < TreeNode < E > > children ) { this.children = children ; } } public static boolean findIfPathExists ( TreeNode < ? extends Comparable < ? > > start , TreeNode < ? extends Comparable < ? > > end ) { Set < TreeNode < ? extends Comparable < ? > > > visitedNodes = new HashSet < TreeNode < ? extends Comparable < ? > > > ( ) ; return findIfPathExists ( start , end , visitedNodes ) ; } private static boolean findIfPathExists ( TreeNode < ? extends Comparable < ? > > start , TreeNode < ? extends Comparable < ? > > end , Set < TreeNode < ? extends Comparable < ? > > > visitedNodes ) { if ( start == end ) return true ; visitedNodes.add ( start ) ; List < TreeNode < ? extends Comparable < ? > > > children = start.getChildren ( ) ; for ( TreeNode < ? extends Comparable < ? > > child : children ) { if ( visitedNodes.contains ( child ) ) continue ; if ( findIfPathExists ( child , end , visitedNodes ) ) return true ; } return false ; } Type mismatch : can not convert from List < TreeNode < capture # 11 -of ? extends Comparable < ? > > > to List < TreeNode < ? extends Comparable < ? > > >"
public class Test { public static void main ( String ... args ) { double price= 11 ; String model ; if ( price > 10 ) { model = '' smartphone '' ; } else if ( price < =11 ) { model= '' not smart phone '' ; } System.out.println ( model ) ; } }
View view = getView ( ) ; foo ( error - > view.showError ( error ) ) ; foo ( error - > getView ( ) .showError ( error ) ) ; foo ( view : :showError ) foo ( getView ( ) : :showError )
"{ `` propertyOfA '' : `` razz '' , `` propertyOfA '' : `` jazz '' , `` propertyOfA '' : `` baz '' , `` propertyOfB '' : `` bar '' , `` propertyOfC '' : `` foo '' } { `` propertyOfC '' : `` foo '' , `` propertyOfB '' : `` bar '' , `` propertyOfA '' : `` razz '' , `` propertyOfA '' : `` jazz '' , `` propertyOfA '' : `` baz '' }"
//no code above to make it look like a switch case or loop abc : { // do some stuff break abc ; }
"Map < X , Map < Y , Z > - > Map < Y , Map < X , Z > originalMap.entrySet ( ) .stream ( ) .collect ( Collectors.toMap ( Map.Entry : :getValue , Map.Entry : :getKey ) ) ;"
class A { // common code private int field ; public void setField ( int field ) { this.field = field ; } //way 1 public A ( int field ) { this.field = field ; } //way 2 public A ( int field ) { setField ( field ) ; } }
public class Test < T > { public void method ( ) { B b = new B ( ) ; } public class B { } } //Some method in some class contains the following lines Test < Integer > t = null ; Test.B b = t.new B ( ) ; //warning Test.B is a raw type
public class Sample { private static boolean done ; public static void main ( String [ ] args ) throws InterruptedException { done = false ; new Thread ( ( ) - > { System.out.println ( `` Running ... '' ) ; int count = 0 ; while ( ! done ) { count++ ; try { Thread.sleep ( 0 ) ; // program only ends if I add this line . } catch ( InterruptedException e ) { e.printStackTrace ( ) ; } } } ) .start ( ) ; Thread.sleep ( 2000 ) ; done = true ; // this is set to true after 2 seconds so program should end . System.out.println ( `` Done ! `` ) ; // this gets printed after 2 seconds } }
if ( row > 0 & & col > 0 ) ray [ row - 1 ] [ col - 1 ] += 1 ; if ( row > 0 ) ray [ row - 1 ] [ col ] += 1 ; if ( row > 0 & & col < height - 1 ) ray [ row - 1 ] [ col + 1 ] += 1 ; if ( col > 0 ) ray [ row ] [ col - 1 ] += 1 ; if ( col < height - 1 ) ray [ row ] [ col + 1 ] += 1 ; if ( row < width - 1 & & col > 0 ) ray [ row + 1 ] [ col - 1 ] += 1 ; if ( row < width - 1 ) ray [ row + 1 ] [ col ] += 1 ; if ( row < width - 1 & & col < height - 1 ) ray [ row + 1 ] [ col + 1 ] += 1 ;
"if x = 0 : return ( q , r ) = ( 0,0 ) ( q , r ) = divide ( ⌊x/2⌋ , y ) q=2·q , r=2·rif x is odd : r=r+1 if r≥y : r=r−y , q=q+1 return ( q , r ) ( q , r ) = ( 0,0 ) ( q , r ) =divide ( ⌊x/2⌋ , y ) return ( q , r )"
"public class Board { private int [ ] [ ] board ; public Board ( ) { board = new int [ 9 ] [ 9 ] ; } public Board ( int [ ] [ ] layout ) { board = layout ; } public int [ ] [ ] getBoard ( ) { return board ; } public int getBoardValue ( int y , int x ) { return board [ y ] [ x ] ; } public void insertValue ( int v , int y , int x ) { board [ y ] [ x ] =v ; } } public Board copy ( Board b ) { Node node = new Node ( b ) ; int [ ] [ ] layout = node.getBoard ( ) .getBoard ( ) ; Board temp = new Board ( layout ) ; temp.insertValue ( 1,4,5 ) ; return temp ; }"
"public void ensureCapacity ( int minCapacity ) { modCount++ ; int oldCapacity = elementData.length ; if ( minCapacity > oldCapacity ) { Object oldData [ ] = elementData ; int newCapacity = ( oldCapacity * 3 ) /2 + 1 ; if ( newCapacity < minCapacity ) newCapacity = minCapacity ; // minCapacity is usually close to size , so this is a win : elementData = Arrays.copyOf ( elementData , newCapacity ) ; } } Object oldData [ ] = elementData ;"
compileOptions { sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7 } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 }
"public enum Weekdays { MON ( `` Monday '' , `` Mon '' ,1 ) , TUE ( `` Tuesday '' , '' Tue '' ,2 ) , WED ( `` Wednesday '' , '' Wed '' ,3 ) , THU ( `` Thursday '' , '' Thu '' ,4 ) , FRI ( `` Friday '' , `` Fri '' ,5 ) , SAT ( `` Saturday '' , '' Sat '' ,6 ) , SUN ( `` Sunday '' , '' Sun '' ,7 ) ; private String fullName ; private String shortName ; private int number ; Weekdays ( String fullName , String shortName , int number ) { this.fullName = fullName ; this.shortName = shortName ; this.number = number ; } public String getFullName ( ) { return fullName ; } public String getShortName ( ) { return shortName ; } public int getNumber ( ) { return number ; } } Thursday , Friday , Saturday , Sunday , Monday , Thuesday , Wednesday"
"roleList.sort ( Comparator.comparing ( Role : :getRoleName , Comparator.nullsLast ( Comparator.naturalOrder ( ) ) ) ) ; roleList.sort ( ( x , y ) - > x.getRole ( ) .trim ( ) .compareTo ( y.getRole ( ) .trim ( ) ) ) ;"
"public class FormPanel extends JPanel { private JLabel namelabel ; private JLabel occlabel ; private JTextField nametext ; private JTextField occtext ; private JButton okButton ; public FormPanel ( ) { Dimension dim = getPreferredSize ( ) ; dim.width = 250 ; setPreferredSize ( dim ) ; namelabel = new JLabel ( `` Name : `` ) ; occlabel = new JLabel ( `` Occupation : `` ) ; nametext = new JTextField ( ) ; nametext.setPreferredSize ( new Dimension ( 80,20 ) ) ; occtext = new JTextField ( ) ; occtext.setColumns ( 20 ) ; okButton = new JButton ( `` OK '' ) ; Border inner = BorderFactory.createTitledBorder ( `` Add Person : `` ) ; Border outer = BorderFactory.createEmptyBorder ( 5,5,5,5 ) ; setBorder ( BorderFactory.createCompoundBorder ( inner , outer ) ) ; setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints gc = new GridBagConstraints ( ) ; gc.gridx = 0 ; gc.gridy = 0 ; gc.weightx = 1 ; gc.weighty = 1 ; gc.fill = GridBagConstraints.NONE ; add ( namelabel , gc ) ; gc.gridx = 1 ; gc.gridy = 0 ; add ( nametext , gc ) ; gc.gridy = 1 ; gc.gridx = 0 ; add ( occlabel , gc ) ; gc.gridy = 1 ; gc.gridx = 1 ; add ( occtext , gc ) ; gc.gridy = 2 ; gc.gridx = 1 ; add ( okButton , gc ) ; } }"
public int methodOne ( ) { int total = local_int_one + local_int_two ; return total ; } public int methodTwo ( ) { return local_int_one + local_int_two ; }
"class Test implements Runnable { public static int varint = 0 ; public static void main ( String args [ ] ) { Thread x = new Thread ( new Test ( ) ) ; int i ; x.start ( ) ; while ( true ) { System.out.println ( `` Hello World '' ) ; //If this is n't included , //the exit statement is n't executed for ( i=0 ; i < varint ; i++ ) { System.out.println ( `` Exit '' ) ; System.exit ( 0 ) ; } } } public void run ( ) { try { Thread.sleep ( 5000 ) ; } catch ( Exception e ) { System.out.println ( `` Caught '' ) ; } varint = 1 ; } }"
class Subject { private String id ; private String name ; private List < Unit > units ; } class Unit { private String id ; private String name ; private List < Topic > topics ; } class Topic { private String id ; private String name ; private List < Content > contents ; } class Content { private String id ; private String contentType ; private SubTopic subtopic ; } int topicCount = subject.getUnits ( ) .stream ( ) .map ( Unit : :getTopics ) .filter ( topics - > topics ! = null ) .mapToInt ( List : :size ) .sum ( ) ;
"public class StartProcessing implements ITask { private final IProcessor dataProcessor ; public StartProcessing ( IProcessor dataProcessor ) { this.dataProcessor = dataProcessor ; } @ Override public void ProcessTask ( ) { this.dataProcessor.StartProcess ( ) ; } } public class StartQueueFiller implements ITask { private IQueueFiller queueFiller ; public StartQueueFiller ( IQueueFiller queueFiller ) { this.queueFiller = queueFiller ; } @ Override public void ProcessTask ( ) { this.queueFiller.Start ( ) ; } } interface ITask { public void ProcessTask ( ) ; } public class TaskFactory ( ) { private final IProcessor processor ; private final IQueueFiller queuefiller ; public TaskFactory ( IProcessor processor , IQueueFiller queuefiller ) { this.processor = processor ; this.queuefiller = queuefiller ; } public ITask Create ( String task ) { switch ( task ) { case `` startprocessor '' : return new StartProcessing ( this.processor ) ; case `` startqueuefiller '' : return new StartQueueFiller ( this.queuefiller ) ; } } }"
Can not complete the install because one or more required items could not be found.Software being installed : Feature 1.0.3 ( com.test.feature.feature.group 1.0.3 ) Missing requirement : Test 1.0.3 ( com.test 1.0.3 ) requires 'bundle org.eclipse.core.runtime 3.8.0 ' but it could not be foundCannot satisfy dependency : From : Feature 1.0.3 ( com.test.feature.feature.group 1.0.3 ) To : com.test 0.0.0
class Casting { public static void main ( String args [ ] ) { int i = 10 ; byte b = i ; System.out.println ( b ) ; } } java:5 : possible loss of precision class Casting1 { public static void main ( String args [ ] ) { final int i = 10 ; byte b = i ; System.out.println ( 10 ) ; } } 10 class A { void m ( int i ) { System.out.println ( `` int '' ) ; } void m ( byte b ) { System.out.println ( `` byte '' ) ; } public static void main ( String args [ ] ) { A a1 = new A ( ) ; final int i = 10 ; a1.m ( i ) ; } } class A { void m ( byte b ) { System.out.println ( `` byte '' ) ; } public static void main ( String args [ ] ) { A a1 = new A ( ) ; final int i = 10 ; a1.m ( i ) ; } } java:9 : m ( byte ) in A can not be applied to ( int )
Runtime runtime = Runtime.getRuntime ( ) ; ... if ( ( 1.0 * runtime.totalMemory ( ) / runtime.maxMemory ( ) ) > 0.9 ) { ... flush results to file ... runtime.gc ( ) ; }
"static Integer global = 30 ; public static synchronized void setVar ( int x , String from ) { System.out.println ( global + `` `` + x + `` - `` + from ) ; global = x ; } public static void main ( String [ ] args ) { Thread thr1 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { synchronized ( global ) { while ( true ) { setVar ( ( int ) ( Math.random ( ) * 30 ) , `` Thread 1 '' ) ; } } } } ) ; Thread thr2 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { synchronized ( global ) { setVar ( ( int ) ( Math.random ( ) * 30 ) , `` Thread 2 '' ) ; System.exit ( 0 ) ; } } } ) ; thr1.start ( ) ; thr2.start ( ) ; }"
"public class Model { private String key ; private String data1 ; private String data2 ; private String data3 ; // getters } List < Model > models = modelRepo.getAllModels ( ) ; Set < String > keys = models.stream ( ) .map ( Model : :getKey ) .collect ( Collectors.toSet ( ) ) ; Map < String , List < Model > > result = new HashMap < > ( ) ; keys.stream ( ) .forEach ( key - > { List < Model > modelList = new ArrayList < > ( ) ; models.stream ( ) .forEach ( model - > { if ( model.getKey ( ) .equals ( key ) ) { modelList.add ( model ) ; } } ) ; result.put ( key , modelList ) ; } ) ;"
"PUT /drives/ { drive-id } /items/ { item-id } /content UpdateDocumentResponseModel updatedDocument = fileGraphs.updateDocument ( token , DRIVELIBID , DOCUMENTID , INPUTPATH , DOCUPDATE ) ; public UpdateDocumentResponseModel updateDocument ( String accessToken , String driveLibId , String documentId , String inpuPath , String docName ) throws MalformedURLException { String fullPath = inpuPath + docName ; URL url = new URL ( `` https : //graph.microsoft.com/v1.0/drives/ '' + driveLibId + `` /items/ '' + documentId + `` /content '' ) ; return requestsBuilder.updateDocument ( accessToken , url , fullPath ) ; } public UpdateDocumentResponseModel updateDocument ( String accessToken , URL url , String fullPath ) { UpdateDocumentResponseModel returnValue = new UpdateDocumentResponseModel ( ) ; try { CloseableHttpClient client = HttpClients.createDefault ( ) ; HttpPut httpPut = new HttpPut ( String.valueOf ( url ) ) ; httpPut.setHeader ( `` Authorization '' , `` Bearer `` + accessToken ) ; httpPut.setHeader ( `` Accept '' , '' application/json '' ) ; httpPut.setHeader ( `` Content-Type '' , '' plain/text '' ) ; httpPut.setHeader ( `` Connection '' , `` Keep-Alive '' ) ; httpPut.setHeader ( `` Cache-Control '' , `` no-cache '' ) ; // read the file and convert to stream MultipartEntityBuilder builder = MultipartEntityBuilder.create ( ) ; builder.addBinaryBody ( `` file '' , new File ( fullPath ) , ContentType.APPLICATION_OCTET_STREAM , `` file.ext '' ) ; HttpEntity multipart = builder.build ( ) ; httpPut.setEntity ( multipart ) ; CloseableHttpResponse response = client.execute ( httpPut ) ; System.out.println ( `` \nSending 'UPDATE ' request to URL : `` + url ) ; System.out.println ( `` Response Code : `` + response.getStatusLine ( ) ) ; // set the response returnValue.setDocumentName ( fullPath ) ; returnValue.setUpdatedAt ( new Date ( ) ) ; returnValue.setUpdateStatus ( `` Success '' ) ; } catch ( IOException e ) { returnValue.setDocumentName ( fullPath ) ; returnValue.setUpdatedAt ( new Date ( ) ) ; returnValue.setUpdateStatus ( `` Failure '' + e.getCause ( ) ) ; e.printStackTrace ( ) ; } return returnValue ; } MultipartEntityBuilder builder = MultipartEntityBuilder.create ( ) ; builder.addBinaryBody ( `` file '' , new File ( fullPath ) , ContentType.APPLICATION_OCTET_STREAM , `` file.ext '' ) ; HttpEntity multipart = builder.build ( ) ; httpPut.setEntity ( multipart ) ; CloseableHttpResponse response = client.execute ( httpPut ) ;"
//ArrayDeque public E pollFirst ( ) { int h = head ; @ SuppressWarnings ( `` unchecked '' ) E result = ( E ) elements [ h ] ; // Element is null if deque empty if ( result == null ) return null ; elements [ h ] = null ; // Must null out slot head = ( h + 1 ) & ( elements.length - 1 ) ; return result ; }
for ( int m = 128 ; ; m++ ) { try { byte [ ] a = new byte [ m * 1024 * 1024 ] ; } catch ( OutOfMemoryError e ) { System.out.println ( m + `` M '' ) ; break ; } }
"@ FunctionalInterfacepublic interface ThrowingFunction < T , R , E extends Throwable > { R apply ( T t ) throws E ; static < T , R , E extends Throwable > Function < T , R > unchecked ( ThrowingFunction < T , R , E > function ) { return t - > { try { return function.apply ( t ) ; } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } } ; } } @ Componentpublic class CronJobDuplicationCheckStrategiesRegistry { private final Map < String , Set < CronJobDuplicationCheckStrategy > > duplicationStrategies ; CronJobDuplicationCheckStrategiesRegistry ( final CronJobsRegistry cronJobsRegistry ) { duplicationStrategies = cronJobsRegistry.get ( ) .stream ( ) .collect ( Collectors.toMap ( clazz - > clazz.getName ( ) , ThrowingFunction.unchecked ( clazz - > clazz.getDeclaredConstructor ( ) .newInstance ( ) .getDuplicationStrategies ( ) ) ) ) ; } public Set < CronJobDuplicationCheckStrategy > get ( String jobClass ) { return duplicationStrategies.get ( jobClass ) ; } } [ ERROR ] Failed to execute goal org.apache.maven.plugins : maven-compiler-plugin:3.3 : compile ( default-compile ) on project cron-api : Compilation failure : Compilation failure : [ ERROR ] /java/org/foo/src/main/java/org/foo/jobs/CronJobDuplicationCheckStrategiesRegistry.java : [ 26,120 ] unreported exception java.lang.NoSuchMethodException ; must be caught or declared to be thrown [ ERROR ] /java/org/foo/src/main/java/org/foo/src/main/java/org/foo/cron/jobs/CronJobDuplicationCheckStrategiesRegistry.java : [ 27,109 ] unreported exception java.lang.InstantiationException ; must be caught or declared to be thrown"
"20151230143623.947 [ Thread-3 ] INFO [ DataSourceManager:19 ] Opened connection identified by id : BlahBlahBlah120151230143623.947 [ Thread-3 ] INFO [ DataSourceManager:19 ] Closed connection identified by id : BlahBlahBlah1 Connection openConnection ( String JNDILookupName ) throws Exception { Connection connection = DataSourceManager.getConnection ( JNDILookupName ) ; logDBOperation ( `` Opened '' , connection.toString ( ) ) ; return connection ; } Connection closeConnection ( String JNDILookupName ) throws Exception { connection.close ( ) ; logDBOperation ( `` Closed '' , connection.toString ( ) ) ; } void logDBOperation ( String operation , String connecitonName ) { logger.info ( operation+ '' connection identified by id : `` +connectionName ) ; }"
"format = getFormatTemplate ( ) ; // ' [ prefix ] [ name ] [ suffix ] : [ msg ] 'format = format.replace ( `` [ prefix ] '' , prefix ) ; // prefix = `` Hello '' ; format = format.replace ( `` [ name ] '' , name ) ; // name = `` username '' ; format = format.replace ( `` [ suffix ] '' , suffix ) ; // suffix = `` World '' ; format = format.replace ( `` [ msg ] '' , msg ) ; // msg = `` Test message '' ;"
MyObj obj1 = new MyGenericObj < Integer > ( ) ; if ( obj1 instanceof MyGenericObj ) { //I was trying to check if it 's instance of MyGenericObj < Integer > //but my IDE saying this is wrong syntax ... . MyGenericObj < Integer > obj2 = ( MyGenericObj < Integer > ) obj1 ; //This line of code will cause a warning message when compiling }
MPI_CMD=mpirun -timestamp-output -n 1 -H s00r0/apps/COMPSs/1.3/Runtime/scripts/user/runcompss -- project=/tmp/1668183.tmpdir/project_1458303603.xml -- resources=/tmp/1668183.tmpdir/resources_1458303603.xml -- uuid=2ed20e6a-9f02-49ff-a71c-e071ce35dacc/apps/FILESPACE/pycompssfile arg1 arg2 : -n 1 -H s00r0/apps/COMPSs/1.3/Runtime/scripts/system/adaptors/nio/persistent_worker_starter.sh/apps/INTEL/mkl/lib/intel64 null/home/myhome/kmeans_python/src/ true/tmp/1668183.tmpdir 4 5 5 s00r0-ib0 43001 43000 true 1/apps/COMPSs/1.3/Runtime/scripts/system/2ed20e6a-9f02-49ff-a71c-e071ce35dacc : -n 1 -H s00r0/apps/COMPSs/1.3/Runtime/scripts/system/adaptors/nio/persistent_worker_starter.sh/apps/INTEL/mkl/lib/intel64 null/home/myhome/kmeans_python/src/ true/tmp/1668183.tmpdir 4 5 5 s00r0-ib0 43001 43000 true 2/apps/COMPSs/1.3/Runtime/scripts/system/2ed20e6a-9f02-49ff-a71c-e071ce35dacc -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- All nodes which are allocated for this job are already filled. -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
if ( o.maxX > minX & & o.maxY > minY & & o.minZ < maxZ ) public int compareTo ( IsoSprite o ) { if ( o.maxX > minX & & o.maxY > minY & & o.minZ < maxZ ) { return -1 ; } else if ( o.maxX < minX & & o.maxY < minY & & o.minZ > maxZ ) { return 1 ; } return 0 ; } public int compareTo ( IsoSprite o ) { if ( o.maxX > minX & & o.maxY > minY & & o.minZ < maxZ ) { return -1 ; } else if ( o.maxX > minX & & o.maxY > minY & & o.minZ > maxZ ) { return 1 ; } else if ( o.maxX < minX & & o.maxY > minY & & o.minZ > maxZ ) { return 1 ; } else if ( o.maxX < minX & & o.maxY < minY & & o.minZ > maxZ ) { return 1 ; } else if ( o.maxX < minX & & o.maxY > minY & & o.minZ < maxZ ) { return 1 ; } else if ( o.maxX > minX & & o.maxY < minY & & o.minZ > maxZ ) { return 1 ; } else if ( o.maxX < minX & & o.maxY < minY & & o.minZ > maxZ ) { return 1 ; } else if ( o.maxX > minX & & o.maxY < minY & & o.minZ < maxZ ) { return 1 ; } else if ( o.maxX < minX & & o.maxY > minY & & o.minZ < maxZ ) { return 1 ; } else if ( this ! = o ) { return 1 ; } return 0 ; }
firstDecimalChar = formattedValue.charAt ( dotPosition + 1 ) ;
"/** * If the ip address from the array passed ( data ) is valid , * makes a deep copy of the array passed in the instance variable parts . * For example , if data = { 192,168,0,1 } , parts should become { 192,168,0,1 } * by copying each item of data into corresponding item in parts . * If the ip address passed is invalid ( for example { 500,4,60,216 } * or { 192,16,01 } , or { 13,13,13,13,13 } , parts should become { 0,0,0,0 } * * remember to reset the instance array parts before you do anything else * @ param data */public void setParts ( int [ ] data ) { this.parts = new int [ 4 ] ; if ( data.length ! = 4 ) { parts = new int [ ] { 0,0,0,0 } ; } else for ( int i = 0 ; i < = data.length ; i++ ) if ( ( data [ i ] < 0 ) || ( data [ i ] > 255 ) ) parts = new int [ ] { 0,0,0,0 } ; else parts [ i ] = data [ i ] ; } for ( int i = 0 ; i < = data.length ; i++ ) for ( int i = 0 ; i < data.length ; i++ ) public void testSetPartsIntArray ( ) { correct1.setParts ( new int [ ] { 12 , 14 , 16 , 18 } ) ; int [ ] a = correct1.getParts ( ) ; assertEquals ( 4 , a.length ) ; assertEquals ( 12 , a [ 0 ] ) ; assertEquals ( 14 , a [ 1 ] ) ; assertEquals ( 16 , a [ 2 ] ) ; assertEquals ( 18 , a [ 3 ] ) ; correct1.setParts ( new int [ ] { -12 , 14 , 16 , 18 } ) ; a = correct1.getParts ( ) ; assertEquals ( 4 , a.length ) ; assertEquals ( 0 , a [ 0 ] ) ; assertEquals ( 0 , a [ 1 ] ) ; assertEquals ( 0 , a [ 2 ] ) ; assertEquals ( 0 , a [ 3 ] ) ; assertEquals ( 0 , a [ 1 ] ) ;"
"interface I < A > { } interface I < A , B > { }"
"import java.io . * ; import java.security . * ; public class ReturnDigest extends Thread { private String filename ; private byte [ ] digest ; public ReturnDigest ( String filename ) { this.filename = filename ; } @ Overridepublic void run ( ) { try { FileInputStream in = new FileInputStream ( filename ) ; MessageDigest sha = MessageDigest.getInstance ( `` SHA-256 '' ) ; DigestInputStream din = new DigestInputStream ( in , sha ) ; while ( din.read ( ) ! = -1 ) ; // read entire file din.close ( ) ; digest = sha.digest ( ) ; } catch ( IOException ex ) { System.err.println ( ex ) ; } catch ( NoSuchAlgorithmException ex ) { System.err.println ( ex ) ; } } public byte [ ] getDigest ( ) { return digest ; } } public static void main ( String [ ] args ) { ReturnDigest [ ] digests = new ReturnDigest [ args.length ] ; for ( int i = 0 ; i < args.length ; i++ ) { // Calculate the digest digests [ i ] = new ReturnDigest ( args [ i ] ) ; digests [ i ] .start ( ) ; } for ( int i = 0 ; i < args.length ; i++ ) { while ( true ) { // Now print the result byte [ ] digest = digests [ i ] .getDigest ( ) ; if ( digest ! = null ) { StringBuilder result = new StringBuilder ( args [ i ] ) ; result.append ( `` : `` ) ; result.append ( DatatypeConverter.printHexBinary ( digest ) ) ; System.out.println ( result ) ; break ; } } } } import java.io . * ; import java.security . * ; public class CallbackDigest implements Runnable { private String filename ; public CallbackDigest ( String filename ) { this.filename = filename ; } @ Override public void run ( ) { try { FileInputStream in = new FileInputStream ( filename ) ; MessageDigest sha = MessageDigest.getInstance ( `` SHA-256 '' ) ; DigestInputStream din = new DigestInputStream ( in , sha ) ; while ( din.read ( ) ! = -1 ) ; // read entire file din.close ( ) ; byte [ ] digest = sha.digest ( ) ; CallbackDigestUserInterface.receiveDigest ( digest , filename ) ; // this is the callback } catch ( IOException ex ) { System.err.println ( ex ) ; } catch ( NoSuchAlgorithmException ex ) { System.err.println ( ex ) ; } } } public class CallbackDigestUserInterface { public static void receiveDigest ( byte [ ] digest , String name ) { StringBuilder result = new StringBuilder ( name ) ; result.append ( `` : `` ) ; result.append ( DatatypeConverter.printHexBinary ( digest ) ) ; System.out.println ( result ) ; } public static void main ( String [ ] args ) { for ( String filename : args ) { // Calculate the digest CallbackDigest cb = new CallbackDigest ( filename ) ; Thread t = new Thread ( cb ) ; t.start ( ) ; } } }"
System.out.print ( `` Fit between `` + profile1.getTitle ( ) + `` and `` + profile2.getTitle ( ) + `` : \n `` + + '\t ' + profile1.fitValue ( profile2 ) + '\n ' ) ; System.out.print ( `` Fit between `` + profile1.getTitle ( ) + `` and `` + profile2.getTitle ( ) + `` : \n `` + '\t ' + profile1.fitValue ( profile2 ) + '\n ' ) ; System.out.print ( `` Fit between `` + profile1.getTitle ( ) + `` and `` + profile2.getTitle ( ) + `` : \n `` ++ '\t ' + profile1.fitValue ( profile2 ) + '\n ' ) ;
"List < String > someKeyList = getSomeList ( ) ; Map < String , Object > someMap = new HashMap < String , Object > ( someKeyList.size ( ) ) ; for ( String key : someKeyList ) { someMap.put ( key , null ) ; } new HashMap < String , Object > ( someKeyList )"
"public void close ( ) throws IOException { if ( ! closed ) { if ( usesDefaultInflater ) inf.end ( ) ; in.close ( ) ; closed = true ; } } public InflaterInputStream ( InputStream in ) { this ( in , new Inflater ( ) ) ; usesDefaultInflater = true ; } new InflaterInputStream ( decryptInputStream , new Inflater ( ) , 4096 ) ; /** * Closes the decompressor and discards any unprocessed input . * This method should be called when the decompressor is no longer * being used , but will also be called automatically by the finalize ( ) * method . Once this method is called , the behavior of the Inflater * object is undefined . */public void end ( ) { synchronized ( zsRef ) { long addr = zsRef.address ( ) ; zsRef.clear ( ) ; if ( addr ! = 0 ) { end ( addr ) ; buf = null ; } } } /** * Closes the decompressor when garbage is collected . */protected void finalize ( ) { end ( ) ; } new InflaterInputStream ( decryptInputStream , new Inflater ( ) , 4096 ) { @ Override public void close ( ) throws IOException { try { super.close ( ) ; } finally { inf.end ( ) ; } } }"
"Function < Class < T > , T > fun ; public class A { public < T > T get ( Class < T > clazz ) { ... } } public class B { < T > Function < Class < T > , T > fun ; public < T > T get ( Class < T > clazz ) { return fun.apply ( clazz ) ; } } public class B { Function < Class < ? > , ? > fun ; public < T > void setFun ( Function < Class < T > , T > fun ) { this.fun = fun ; } public < T > T get ( Class < T > clazz ) { return ( T ) fun.apply ( clazz ) ; } }"
"Map < List < MyGenericType > , Set < List < MyGenericType > > > x = new HashMap < > ( ) ; public class MyGenericType < X > { }"
class MyObject < IdType > { @ Setter @ Getter private IdType id ; } < T extends MyObject < ? super IdType > > void copyIdTo ( T object ) { object.setId ( getId ( ) ) ; } < T extends MyObject < ? extends IdType > > void copyIdFrom ( T object ) { object.copyIdTo ( this ) ; } void copyIdTo ( MyObject < ? super IdType > object ) { object.setId ( getId ( ) ) ; } void copyIdFrom ( MyObject < ? extends IdType > object ) { object.copyIdTo ( this ) ; }
"@ Entity @ Tablepublic class User { @ Id @ GeneratedValue ( generator= '' system-uuid '' ) @ GenericGenerator ( name= '' system-uuid '' , strategy = `` uuid '' ) private String id ; private String name ; private String email ; } @ Entity @ Tablepublic class Post { @ Id @ GeneratedValue ( generator= '' system-uuid '' ) @ GenericGenerator ( name= '' system-uuid '' , strategy = `` uuid '' ) private String id ; private String title ; @ ManyToOne @ JoinColumn ( name = `` id '' , insertable = false , updatable = false ) private User postedBy ; private String content ; } { `` title '' : '' The Graphql way of design '' , `` postedBy '' : '' 402880ee73aa45570173aa462ea00001 '' , `` content '' : '' The content of blog `` } Resolved [ org.springframework.http.converter.HttpMessageNotReadableException : JSON parse error : Can not construct instance of ` com.graphql.blog.model.User ` ( although at least one Creator exists ) : no String-argument constructor/factory method to deserialize from String value ( '402880ee73aa45570173aa462ea00001 ' ) ; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException : Can not construct instance of ` com.graphql.blog.model.User ` ( although at least one Creator exists ) : no String-argument constructor/factory method to deserialize from String value ( '402880ee73aa45570173aa462ea00001 ' ) at [ Source : ( PushbackInputStream ) ; line : 3 , column : 13 ] ( through reference chain : com.graphql.blog.model.Post [ `` postedBy '' ] ) ]"
"private static final boolean encodeFileName =PropUtil.getBooleanSystemProperty ( `` mail.mime.encodefilename '' , false ) ;"
"import java.util.Arrays ; import java.util.Scanner ; class Test { long times ; int n=1 ; public static void main ( String [ ] args ) { Test tm=new Test ( ) ; Scanner in=new Scanner ( System.in ) ; int t=Integer.parseInt ( in.nextLine ( ) ) ; while ( t ! =0 ) { String s=in.nextLine ( ) ; char ch [ ] =s.toCharArray ( ) ; Arrays.sort ( ch ) ; String sort=String.valueOf ( ch ) ; String ans ; long n=Long.parseLong ( in.nextLine ( ) ) ; tm.times=n ; tm.permu ( `` '' , sort ) ; t -- ; } } private void permu ( String prefix , String str ) { int len=str.length ( ) ; if ( len==0 ) { if ( n==times ) { System.out.println ( prefix ) ; } else { n++ ; } } else { for ( int i=0 ; i < len ; i++ ) { permu ( prefix + str.charAt ( i ) , str.substring ( 0 , i ) + str.substring ( i+1 , len ) ) ; } } } }"
double num1 = 0.3 ; double num2 = 0.1 + 0.2 ; System.out.println ( num1 ) ; System.out.println ( num2 ) ; 0.30.30000000000000004 0.300000000000000040.30000000000000004
"Class getFooClass ( ) Long getFooId ( ) public < T > T get ( Class < T > clazz , Serializable id ) ; get ( bar.getFooClass ( ) , bar.getFooId ( ) ) ; get ( bar.getFooClass ( ) , bar.hasLongId ( ) ? bar.getFooId ( ) : bar.getFooId ( ) .intValue ( ) ) ; get ( bar.getFooClass ( ) , bar.hasLongId ( ) ? bar.getFooId ( ) : new Integer ( bar.getFooId ( ) .intValue ( ) ) ) ; Integer intId = bar.getFooId ( ) .intValue ( ) ; get ( bar.getFooClass ( ) , bar.hasLongId ( ) ? bar.getFooId ( ) : intId ) ; // same error Serializable id = bar.hasLongId ( ) ? bar.getFooId ( ) : new Integer ( bar.getFooId ( ) .intValue ( ) ) ; get ( bar.getFooClass ( ) , id ) ; // same error Serializable id ; if ( bar.hasLongId ( ) ) { id = bar.getFooId ( ) ; } else { id = bar.getFooId ( ) .intValue ( ) ; } get ( bar.getFooClass ( ) , id ) ;"
public class Test { public static int a ( ) { int a = 10 ; while ( a > 9 ) ++a ; return a ; } public static void main ( String [ ] argc ) { Test t = new Test ( ) ; int k = t.a ( ) ; System.out.println ( `` k = `` + ( 1 * k ) ) ; } } k = -2147483648 System.out.println ( `` k = `` + ( 1 * k/2 ) ) ; k = -1073741824
"List < Integer > list = Arrays.asList ( 1 , 2 , -3 , 8 ) ; list.stream ( ) .filter ( x - > x > 0 ) .collect ( ArrayList : :new , ArrayList : :add , ArrayList : :addAll ) .stream ( ) // Stream < Object > .map ( x - > x * 2 ) .forEach ( System.out : :println ) ; .collect ( ArrayList : :new , ArrayList : :add , ArrayList : :addAll ) .collect ( Collectors.toList ( ) )"
"List < Integer > integers = Arrays.asList ( 1 , 2 , 3 ) ; List < Number > numbers = integers ; List < Integer > numbers1 = Arrays.asList ( 1 , 2 , 3 ) ; List < ? extends Number > numbers2 = Arrays.asList ( 1 , 2 , 3 ) ; List < Number > numbers3 = Arrays.asList ( 1 , 2 , 3 ) ;"
"@ FunctionalInterfacepublic interface MyFunctionalInterface { String getString ( String s ) ; } MyFunctionalInterface function = ( f ) - > { Date d = new Date ( ) ; return d.toString ( ) + `` `` + person.name + `` used fnc str '' ; } ; public SampleClass ( MyFunctionalInterface function ) { String tmp = `` The person info : % s '' ; this.result = String.format ( tmp , function.getString ( String.valueOf ( function ) ) ) ; }"
int @ a [ ] a ; int @ a [ ] @ b [ ] a ; void someMethod ( int @ a [ ] @ b ... y ) { }
"import java.awt . * ; import javax.swing . * ; public class Simple { JFrame simpleWindow = new JFrame ( `` Simple MCVE '' ) ; JPanel simplePanel = new JPanel ( ) ; JLabel lblSimple ; JTextField txtSimple ; public void numberConvertGUI ( ) { simpleWindow.setBounds ( 10 , 10 , 420 , 80 ) ; simpleWindow.setMinimumSize ( new Dimension ( 420 , 80 ) ) ; simpleWindow.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; simpleWindow.setLayout ( new GridLayout ( 1,1 ) ) ; createSimplePanel ( ) ; simpleWindow.getContentPane ( ) .add ( simplePanel ) ; simpleWindow.setVisible ( true ) ; } public void createSimplePanel ( ) { simplePanel.setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; lblSimple = new JLabel ( ) ; c.weightx = 0.0 ; c.weighty = 1.0 ; c.fill = GridBagConstraints.BOTH ; c.insets = new Insets ( 0,2,0,2 ) ; c.gridx = 0 ; c.gridy = 0 ; c.ipady = 0 ; lblSimple.setText ( `` Next to me is a JTextField : `` ) ; lblSimple.setHorizontalAlignment ( JLabel.RIGHT ) ; simplePanel.add ( lblSimple , c ) ; txtSimple = new JTextField ( ) ; c.weightx = 0.5 ; c.fill = GridBagConstraints.HORIZONTAL ; c.ipady = 5 ; c.gridx = 1 ; c.gridy = 0 ; c.insets = new Insets ( 0,2,0,2 ) ; simplePanel.add ( txtSimple , c ) ; } public static void main ( String [ ] args ) { Simple s = new Simple ( ) ; s.numberConvertGUI ( ) ; } }"
static.method ( arg ) ; static.finalAnonInnerClassInstance.apply ( arg ) ; static.modifiedNonFinalAnonInnerClassInstance.apply ( arg ) ;
"public interface Parent { } public class Child implements Parent { } public < T extends Parent > Class < T > getClass ( ) { return Child.class ; // compile error , add cast to Class < T > }"
public class Confusing { private Confusing ( Object o ) { System.out.println ( `` Object '' ) ; } private Confusing ( double [ ] dArray ) { System.out.println ( `` double array '' ) ; } public static void main ( String [ ] args ) { new Confusing ( null ) ; } }
public interface IFoobar < DATA extends IFoobar > { void bigFun ( ) ; } class FoobarImpl < DATA extends IFoobar > implements IFoobar < DATA > { public void bigFun ( ) { DATA d = null ; IFoobar < DATA > node = d ; // # 1 ok d = node ; // # 2 error } }
List < ? extends String > list = new Arraylist < String > ( ) ; list.add ( `` foo '' ) ;
public interface GenCarry < T extends Gen > { GenCarry < T > setGen ( T gen ) ; } public interface Gen < T extends GenCarry > { void applyOn ( T carry ) ; } GenCarry < T extends Gen < GenCarry < T > > > Gen < C extends GenCarry < Gen < C > > > - > error : not a valid substitute for the bounded parameter .
class TradingService { public class Trader { //This field stores the trader 's name private String traderName ; //This field stores the trader 's current balance private double currentBalance ; //A constructor to create a Trader public Trader ( String traderName ) { this.traderName = traderName ; } //This method gets returns the trader 's name public String getName ( ) { return traderName ; } //This method set 's the trader 's name public void setName ( String traderName ) { this.traderName = traderName ; } //This method decreases the trader 's balance public void withdraw ( double withdrawAmount ) { this.currentBalance = ( currentBalance - withdrawAmount ) ; } //This method increases the trader 's balance public void deposit ( double depositAmount ) { this.currentBalance = ( currentBalance + depositAmount ) ; } //This method returns the trader 's current balance public double getBalance ( ) { return currentBalance ; } } } > Trader t1 > t1 = new Trader ( `` Bill '' ) Trader @ 22e1cbe4 > t1.deposit ( 10.0 ) 10.0 > t1.getBalance ( ) 0.0
String a = `` R '' ++ ' a ' ; String a = `` R '' + + ' a ' ;
public class Node < T > { public T data ; public Node ( T data ) { this.data = data ; } public void setData ( T data ) { System.out.println ( `` Node.setData '' ) ; this.data = data ; } } public class MyNode extends Node < Integer > { public MyNode ( Integer data ) { super ( data ) ; } public void setData ( Integer data ) { System.out.println ( `` MyNode.setData '' ) ; super.setData ( data ) ; } } MyNode mn = new MyNode ( 5 ) ; Node n = mn ; // A raw type - compiler throws an unchecked warningn.setData ( `` Hello '' ) ; Integer x = mn.data ; // Causes a ClassCastException to be thrown . MyNode mn = new MyNode ( 5 ) ; Node n = ( MyNode ) mn ; // A raw type - compiler throws an unchecked warningn.setData ( `` Hello '' ) ; Integer x = ( String ) mn.data ; // Causes a ClassCastException to be thrown . MyNode mn = new MyNode ( 5 ) ; Node n = mn ; // A raw type - compiler throws an unchecked warningn.setData ( `` Hello '' ) ; // Causes a ClassCastException to be thrown.Integer x = mn.data ;
static class Node < E > { E item ; LinkedBlockingQueue.Node < E > next ; Node ( E var1 ) { this.item = var1 ; } } private void enqueue ( Node < E > node ) { // assert putLock.isHeldByCurrentThread ( ) ; // assert last.next == null ; last = last.next = node ; } private E dequeue ( ) { // assert takeLock.isHeldByCurrentThread ( ) ; // assert head.item == null ; Node < E > h = head ; Node < E > first = h.next ; h.next = h ; // help GC head = first ; E x = first.item ; first.item = null ; return x ; }
double result = someInt / someOtherInt ;
"public MessageType getOrgReversalTargetMti ( Map < MessageType , List < TVO > > map ) { MessageType targetMessageType = null ; if ( 1 == map.size ( ) ) { targetMessageType = map.keySet ( ) .iterator ( ) .next ( ) ; } else { long maxNumber = 0 ; for ( final MessageType messageType : map.keySet ( ) ) { List < TVO > list = map.get ( messageType ) ; long trace = list.get ( 0 ) .getTrace ( ) ; if ( trace > maxNumber ) { maxNumber = trace ; targetMessageType = messageType ; } } } return targetMessageType ; }"
"public String getBookByTitleOrAuthor ( String titleOrAuthor ) { books.stream ( ) .filter ( BookPredicate.matchTitleOrAuthor ( titleOrAuthor ) ) .filter ( returnedBook - > returnedBook.getBookStatus ( ) ! = Book.bookStatus.Damaged & & returnedBook.getBookStatus ( ) ! = Book.bookStatus.Deleted ) .forEach ( returnedBook - > returnedBook.toString ( ) ) ; } // My predicatepublic static Predicate < Book > matchTitleOrAuthor ( String titleOrAuthor ) { return b - > titleOrAuthor.equals ( b.getTitle ( ) ) || titleOrAuthor.equals ( b.getAuthor ( ) ) ; } public bookStatus getBookStatus ( ) { return this.bookStatus ; } public enum bookStatus { Available , Reserved , Borrowed , Damaged , Deleted }"
import temp.P2 ; public class P4 extends P2 { public void someMethod ( ) { P2 p2 = new P2 ( ) ; // p2.p2default ( ) ; // ERROR as expected p2.p2public ( ) ; p2.p2protected ( ) ; // ERROR as not expected } } package temp ; public class P2 { protected void p2protected ( ) { ... } public void p2public ( ) { ... } void p2default ( ) { ... } }
"public static String [ ] [ ] [ ] cleanUp ( String [ ] [ ] [ ] array ) { for ( int f = 0 ; f < array.length ; f++ ) { for ( int g = 0 ; g < array [ f ] .length ; g++ ) { int position = 0 ; //boolean flag = false ; int count = 0 ; for ( int h = 0 ; h < array [ f ] [ g ] .length ; h++ ) { if ( array [ f ] [ g ] [ h ] .equals ( array [ f ] [ g ] [ h+1 ] ) ) count++ ; else { ArrayList < String > temp = new ArrayList < String > ( Arrays.asList ( array [ f ] [ g ] ) ) ; for ( int i = count - 1 ; i > position ; i -- ) { temp.remove ( i ) ; position = i-1 ; } temp.set ( position , array [ f ] [ g ] [ h ] + `` ( `` + count + `` ) '' ) ; } } } } return array ; } [ go , go , go , go , go , go ] [ go , stop , stop , stop ] [ go ( 5 ) ] [ go ( 1 ) , stop ( 3 ) ]"
"@ Override public boolean onTouchEvent ( MotionEvent event ) { float eventX = event.getX ( ) ; float eventY = event.getY ( ) ; float lastdownx = 0 ; float lastdowny = 0 ; switch ( event.getAction ( ) ) { case MotionEvent.ACTION_DOWN : lastdownx = eventX ; lastdowny = eventY ; Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { byte [ ] response = null ; if ( connectedtoipsuccess == true ) { if ( is_start == true ) { uploadTimerBool = true ; timers.StartTimer ( timerValueRecord , `` Recording Time : `` ) ; response = Get ( iptouse + `` start '' ) ; is_start = false ; } else { timers.StopTimer ( timerValueRecord ) ; textforthespeacch = `` Recording stopped and preparing the file to be shared on youtube '' ; MainActivity.this.runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { status1.setText ( `` Preparing the file '' ) ; } } ) ; MainActivity.this.initTTS ( ) ; response = Get ( iptouse + `` stop '' ) ; is_start = true ; startuploadstatusthread = true ; servercheckCounter = 0 ; } if ( response ! = null ) { try { a = new String ( response , `` UTF-8 '' ) ; MainActivity.this.runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { if ( a.equals ( `` Recording started '' ) ) { status1.setText ( `` Recording '' ) ; } if ( a.equals ( `` Recording stopped and preparing the file to be shared on youtube '' ) ) { status1.setText ( `` Recording Stopped '' ) ; } } } ) ; textforthespeacch = a ; MainActivity.this.initTTS ( ) ; } catch ( UnsupportedEncodingException e ) { e.printStackTrace ( ) ; } Logger.getLogger ( `` MainActivity ( inside thread ) '' ) .info ( a ) ; } } } } ) ; t.start ( ) ; return true ; case MotionEvent.ACTION_MOVE : break ; case MotionEvent.ACTION_UP : break ; default : return false ; } return true ; } status1.setText ( `` Preparing the file '' ) ;"
"verify ( javaCompiler , times ( 1 ) ) .writeJavaAndCompile ( any ( ContractCompilationUnit.class ) , eq ( outputDirectory ) ) ; verify ( javaCompiler , times ( 1 ) ) .writeJavaAndCompile ( any ( ParamCompilationUnit.class ) , eq ( outputDirectory ) ) ; javaCompiler.writeJavaAndCompile ( new ContractCompilationUnit ( ) , outputDirectory ) ; javaCompiler.writeJavaAndCompile ( new ParamCompilationUnit ( ) , outputDirectory ) ;"
"DefaultHttpClient httpClient = new DefaultHttpClient ( ) ; int timeout = 5 ; // secondsHttpParams httpParams = httpClient.getParams ( ) ; httpParams.setParameter ( CoreConnectionPNames.CONNECTION_TIMEOUT , timeout * 1000 ) ; httpParams.setParameter ( CoreConnectionPNames.SO_TIMEOUT , timeout * 1000 ) ; HttpClient httpClient = HttpClient.newBuilder ( ) .connectTimeout ( Duration.ofSeconds ( 5 ) ) .build ( )"
VeryUnnecessarilyLongCumbersomeName.doThingFoo ( ) ; VeryUnnecessarilyLongCumbersomeName.doThingBar ( ) ; VeryUnnecessarilyLongCumbersomeName.doThingEgg ( ) ; VeryUnnecessarilyLongCumbersomeName.doThingSpam ( ) ; VeryUnnecessarilyLongCumbersomeName thing = new VeryUnnecessarilyLongCumbersomeName ( ) ; thing.doThingFoo ( ) ; thing.doThingBar ( ) ; thing.doThingEgg ( ) ; thing.doThingSpam ( ) ; `` the static method doThingFoo ( ) should be accessed in a static way . ''
try ( BasicDataSource ds = BasicDataSourceFactory.createDataSource ( dsProperties ) ) { // still necessary for Connection to close if inside // try-with-resources ? try ( Connection conn = ds.getConnection ( ) ) { String sql = `` SELECT * FROM users '' ; try ( PreparedStatement stmt = conn.prepareStatement ( sql ) ) { try ( ResultSet rs = stmt.executeQuery ( ) ) { while ( rs.next ( ) ) { System.out.println ( rs.getString ( `` email '' ) ) ; System.out.println ( rs.getString ( `` password '' ) ) ; } } } } } catch ( SQLException e ) { e.printStackTrace ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; }
"for ( HashMap.Entry < Object , Object > e : new TreeMap < > ( ) .entrySet ( ) ) System.out.println ( e ) ; for ( TreeMap.Entry < Object , Object > e : new HashMap < > ( ) .entrySet ( ) ) System.out.println ( e ) ;"
"if ( Objects.isNull ( user.getMartialStatus ( ) ) ) { user.setMartialStatus ( MartialStatus.MARRIED ) ; } public static < T > void processIfNull ( T o , Supplier < Void > s ) { if ( Objects.isNull ( o ) ) { s.get ( ) ; } } processIfNull ( user.getMartialStatus ( ) , ( ) - > user.setMartialStatus ( MartialStatus.MARRIED ) ) ;"
public class Foo { private int bar ; public int getBar ( ) { return this.bar ; } public void setBar ( int bar ) { this.bar = bar ; } } public class Baz { private volatile Foo foo ; }
public interface BWidgetObject < T > { } public interface BDataList < BWidgetObject > { } public interface BDataList < BWidgetObject < T > > { }
package webdriver_project ; import org.openqa.selenium.WebDriver ; public class webdriver_module_1 { public static void main ( String [ ] args ) { WebDriver driver = new firefoxDriver ( ) ; } }
"public void some ( Object a ) { Map < ? , ? > map = ** ( Map < ? , ? > ) a** ; //converting unknown object to map } public void some ( Object a ) { Map < Object , Object > map = ** ( Map < Object , Object > ) a** ; //converting unknown object to Map < Object , Object > } String str = ( String ) request.getAttribute ( `` asd '' ) //returns Object"
@ WebService ( serviceName= '' bla ( ) '' /* bla ( ) */ ) ; @ WebService ( ... ( ... ) ... ) ;
head : 1159190947 head : 1159190947 head : 1159190947 head : 1159190947 head : 1989972246 head : 1791930789 head : 1791930789 head : 1791930789 head : 1989972246 head : 1989972246 head : 1791930789 head : 1791930789 import java.lang.reflect.Field ; import java.util.concurrent.ConcurrentLinkedQueue ; public class ConcurrentLinkedQueueTest { public static void main ( String [ ] args ) { ConcurrentLinkedQueue < String > queue = new ConcurrentLinkedQueue < > ( ) ; print ( queue ) ; queue.offer ( `` aaa '' ) ; print ( queue ) ; queue.offer ( `` bbb '' ) ; print ( queue ) ; queue.offer ( `` ccc '' ) ; print ( queue ) ; } /** * 打印并发队列head属性的identityHashCode * @ param queue */ private static void print ( ConcurrentLinkedQueue queue ) { Field field = null ; boolean isAccessible = false ; try { field = ConcurrentLinkedQueue.class.getDeclaredField ( `` head '' ) ; isAccessible = field.isAccessible ( ) ; if ( ! isAccessible ) { field.setAccessible ( true ) ; } System.out.println ( `` head : `` + System.identityHashCode ( field.get ( queue ) ) ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } finally { field.setAccessible ( isAccessible ) ; } } }
"I want this : To become this : < choice1 > { < choice1 > } c < hoi > ce2 { c , < hoi > , ce2 } < ch > < oi > < ce > 3 { < ch > , < oi > , < ce > , 3 } choice4 { choice4 }"
public class LogService { private final BlockingQueue < String > queue ; private final LoggerThread loggerThread ; private final PrintWriter writer ; @ GuardedBy ( `` this '' ) private boolean isShutdown ; @ GuardedBy ( `` this '' ) private int reservations ; // < -- counter public void start ( ) { loggerThread.start ( ) ; } public void stop ( ) { synchronized ( this ) { isShutdown = true ; } loggerThread.interrupt ( ) ; } public void log ( String msg ) throws InterruptedException { synchronized ( this ) { if ( isShutdown ) throw new IllegalStateException ( ... ) ; ++reservations ; } queue.put ( msg ) ; } private class LoggerThread extends Thread { public void run ( ) { try { while ( true ) { try { synchronized ( LogService.this ) { if ( isShutdown & & reservations == 0 ) break ; } String msg = queue.take ( ) ; synchronized ( LogService.this ) { -- reservations ; } writer.println ( msg ) ; } catch ( InterruptedException e ) { /* retry */ } } } finally { writer.close ( ) ; } } } }
package com.soti84 ; import java.util.ArrayList ; public class InvokeMethod { public static void main ( String [ ] args ) { ArrayList < String > exams= new ArrayList < String > ( ) ; exams.add ( `` Java '' ) ; exams.add ( `` C # '' ) ; } } package com.soti84 ; import java.util.ArrayList ; public class InvokeMethod { ArrayList < String > exams= new ArrayList < String > ( ) ; exams.add ( `` Java '' ) ; exams.add ( `` C # '' ) ; public static void main ( String [ ] args ) { } }
$ ls -la /usr/lib/jvm/java-8-openjdk-amd64/bin/insgesamt 472drwxr-xr-x 2 root root 4096 Jan 31 08:03 .drwxr-xr-x 7 root root 144 Jan 31 08:03 ..-rwxr-xr-x 1 root root 14504 Jan 14 22:02 appletviewer-rwxr-xr-x 1 root root 14504 Jan 14 22:02 extcheck-rwxr-xr-x 1 root root 14504 Jan 14 22:02 idlj-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jar-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jarsignerlrwxrwxrwx 1 root root 15 Jan 14 22:02 java - > ../jre/bin/java-rwxr-xr-x 1 root root 14504 Jan 14 22:02 javac-rwxr-xr-x 1 root root 14504 Jan 14 22:02 javadoc-rwxr-xr-x 1 root root 14504 Jan 14 22:02 javah-rwxr-xr-x 1 root root 14504 Jan 14 22:02 javap-rwxr-xr-x 1 root root 2806 Jan 14 22:02 java-rmi.cgi-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jcmd-rwxr-xr-x 1 root root 14528 Jan 14 22:02 jconsole-rwxr-xr-x 1 root root 14520 Jan 14 22:02 jdb-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jdeps-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jhat-rwxr-xr-x 1 root root 14552 Jan 14 22:02 jinfolrwxrwxrwx 1 root root 14 Jan 14 22:02 jjs - > ../jre/bin/jjs-rwxr-xr-x 1 root root 14552 Jan 14 22:02 jmap-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jps-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jrunscript-rwxr-xr-x 1 root root 14520 Jan 14 22:02 jsadebugd-rwxr-xr-x 1 root root 14552 Jan 14 22:02 jstack-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jstat-rwxr-xr-x 1 root root 14504 Jan 14 22:02 jstatdlrwxrwxrwx 1 root root 18 Jan 14 22:02 keytool - > ../jre/bin/keytool-rwxr-xr-x 1 root root 14504 Jan 14 22:02 native2asciilrwxrwxrwx 1 root root 15 Jan 14 22:02 orbd - > ../jre/bin/orbdlrwxrwxrwx 1 root root 18 Jan 14 22:02 pack200 - > ../jre/bin/pack200lrwxrwxrwx 1 root root 21 Jan 14 22:02 policytool - > ../jre/bin/policytool-rwxr-xr-x 1 root root 14504 Jan 14 22:02 rmiclrwxrwxrwx 1 root root 15 Jan 14 22:02 rmid - > ../jre/bin/rmidlrwxrwxrwx 1 root root 22 Jan 14 22:02 rmiregistry - > ../jre/bin/rmiregistry-rwxr-xr-x 1 root root 14504 Jan 14 22:02 schemagen-rwxr-xr-x 1 root root 14504 Jan 14 22:02 serialverlrwxrwxrwx 1 root root 21 Jan 14 22:02 servertool - > ../jre/bin/servertoollrwxrwxrwx 1 root root 20 Jan 14 22:02 tnameserv - > ../jre/bin/tnameservlrwxrwxrwx 1 root root 20 Jan 14 22:02 unpack200 - > ../jre/bin/unpack200-rwxr-xr-x 1 root root 14504 Jan 14 22:02 wsgen-rwxr-xr-x 1 root root 14504 Jan 14 22:02 wsimport-rwxr-xr-x 1 root root 14504 Jan 14 22:02 xjc
"public class ActivityTest extends Activity { public EditText edtText ; @ Override public void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.test ) ; WebView webView = ( WebView ) findViewById ( R.id.webView ) ; webView.loadUrl ( `` file : ///android_res/raw/htmlimages.html '' ) ; webView.addJavascriptInterface ( new MyTest ( ) , `` Scripts '' ) ; webView.getSettings ( ) .setJavaScriptEnabled ( true ) ; webView.setWebChromeClient ( new WebChromeClient ( ) ) ; edtText = ( EditText ) findViewById ( R.id.edtText22 ) ;"
"private void solveCollision ( PoolBall b1 , PoolBall b2 ) { System.out.println ( b1.getMagnitude ( ) + b2.getMagnitude ( ) ) ; // vector tangent to collision point float vTangX = b2.getY ( ) - b1.getY ( ) ; float vTangY = - ( b2.getX ( ) - b1.getX ( ) ) ; // normalize tangent vector float mag = ( float ) ( Math.sqrt ( ( vTangX * vTangX ) + ( vTangY * vTangY ) ) ) ; vTangX /= mag ; vTangY /= mag ; // get new vector based on velocity of circle being collided with float NVX1 = b1.getVector ( ) .get ( 0 ) - b2.getVector ( ) .get ( 0 ) ; float NVY1 = b1.getVector ( ) .get ( 1 ) - b2.getVector ( ) .get ( 1 ) ; // dot product float dot = ( NVX1 * vTangX ) + ( NVY1 * vTangY ) ; // adjust length of tangent vector vTangX *= dot ; vTangY *= dot ; // velocity component perpendicular to tangent float vPerpX = NVX1 - vTangX ; float vPerpY = NVY1 - vTangY ; // apply vector to pool balls b1.setVector ( b1.getVector ( ) .get ( 0 ) - vPerpX , b1.getVector ( ) .get ( 1 ) - vPerpY ) ; b2.setVector ( b2.getVector ( ) .get ( 0 ) + vPerpX , b2.getVector ( ) .get ( 1 ) + vPerpY ) ; System.out.println ( b1.getMagnitude ( ) + b2.getMagnitude ( ) ) ; }"
"public class Sorter < T extends Enum < ? > > { public Sorter ( ) { T [ ] result = T.values ( ) ; // < - Compilation error } } enum TmpEnum { A , B } public class Tmp { void func ( ) { T [ ] result = TmpEnum.values ( ) ; // < - It works } }"
"private String readInputStream ( InputStream in ) { PushbackInputStream inputStream = ( PushbackInputStream ) in ; StringBuffer outputBuffer = null ; try { int size = inputStream.available ( ) ; outputBuffer = new StringBuffer ( size ) ; // append the data into the stringBuilder for ( int j = 0 ; j < size ; j++ ) { int ch = inputStream.read ( ) ; outputBuffer.append ( ( char ) ch ) ; } } catch ( IOException ioe ) { Log.e ( `` error '' , `` IOException : `` + ioe.getMessage ( ) ) ; } if ( outputBuffer ! = null ) { return outputBuffer.toString ( ) ; }"
class ABC { String a ; ABC ( ) { a = `` abc '' ; } } public class Main { static Object listABC ( ) { List < ABC > listOfABC = new ArrayList < > ( ) ; listOfABC.add ( new ABC ( ) ) ; return listOfABC ; } public static void main ( String [ ] args ) throws java.lang.Exception { List < Long > listLong = ( List ) Main.listABC ( ) ; System.out.println ( listLong.get ( 0 ) ) ; } }
"class CommandLineOperation { APIAccessor apiAccessor ; void create ( ) { apiAccessor = new APIAccessor ( email , password ) ; //do work for creation } void update ( ) { apiAccessor = new APIAccessor ( email , password ) ; //do work for update } } class APIAccessor { String email ; String password ; APIAccessor ( email , password ) { this.email = email ; this.password = password ; } } CommandLineOperation ( String email , String password ) { this.apiAccessor = new APIAccessor ( email , password ) ; }"
"interface Service < T > { < R > R process ( Function < ? super T , ? extends R > function ) ; T process ( UnaryOperator < T > operator ) ; } void process ( Service < CharSequence > service ) { service.process ( sequence - > sequence.subSequence ( 0 , 1 ) ) ; }"
The method testSuper ( Group < ? super BClass < ? > > ) in the type Group < BClass < String > > is not applicable for the arguments ( Group < AClass < String > > ) class AClass < T > { } class BClass < T > extends AClass < T > { } class Group < T > { T name ; public void testExtends ( Group < ? extends AClass < ? > > value ) { } public void testSuper ( Group < ? super BClass < ? > > value ) { } public T getName ( ) { return name ; } } public class GenericTest { public static void GenericTestMethod ( ) { Group < AClass < String > > instGrA = new Group < AClass < String > > ( ) ; Group < BClass < String > > instGrB = new Group < BClass < String > > ( ) ; //OK instGrA.testExtends ( instGrB ) ; //The method testSuper ( Group < ? super BClass < ? > > ) in the type Group < BClass < String > > //is not applicable for the arguments ( Group < AClass < String > > ) instGrB.testSuper ( instGrA ) ; } }
public class SO_Test { public static void main ( String [ ] args ) { int a = 1 ; a++ ; a += 1 ; ++a ; } } public class SO_Test { public static void main ( String [ ] args ) { int a = 1 ; a = a + 1 ; a++ ; a += 1 ; ++a ; } }
"Payment 1 CountyTaxAmount = 250.00 CityTaxAmount = 101.00 LienAmount = 0.00 HazardAmount = 0.00 PaymentDueDate = `` 2018-06-01 '' Payment 2 CountyTaxAmount = 10.00 CityTaxAmount = 20.00 LienAmount = 0.00 HazardAmount = 0.00 PaymentDueDate = `` 2018-05-01 '' private EscrowStatusEnum determineEscrowStatus ( Payment pcm , LocalDate currentDueDate ) { EscrowStatusEnum escrowStatus = null ; if ( currentDueDate ! = null & & pcm ! =null & & pcm.getPayment ( ) ! = null & & ! pcm.getPayment ( ) .isEmpty ( ) ) { Predicate < Payment > pcmRow = it- > it.getPaymentDueDate ( ) ! =null & & ! it.getPaymentDueDate ( ) .isAfter ( currentDueDate ) ; final Payment sortedRow = pcm.getPayment ( ) .stream ( ) .sorted ( ( el1 , el2 ) - > el1.getPaymentDueDate ( ) .compareTo ( el2.getPaymentDueDate ( ) ) ) . filter ( pcmRow ) .findFirst ( ) .orElse ( null ) ; if ( sortedRow ! = null ) { BigDecimal countyCityLienHazardSum = sortedRow.getCountyTaxAmount ( ) .add ( sortedRow.getCityTaxAmount ( ) ) .add ( sortedRow.getLienAmount ( ) ) .add ( sortedRow.getHazardAmount ( ) ) ; BigDecimal countyCityLienSum = sortedRow.getCountyTaxAmount ( ) .add ( sortedRow.getCityTaxAmount ( ) ) .add ( sortedRow.getLienAmount ( ) ) ; if ( countyCityLienHazardSum.compareTo ( BigDecimal.ZERO ) == 0 ) escrowStatus = EscrowStatusEnum.NONESCROWED ; else if ( countyCityLienSum.compareTo ( BigDecimal.ZERO ) > 0 & & sortedRow.getHazardAmount ( ) .compareTo ( BigDecimal.ZERO ) == 0 || countyCityLienSum.compareTo ( BigDecimal.ZERO ) > = 0 & & sortedRow.getHazardAmount ( ) .compareTo ( BigDecimal.ZERO ) > 0 ) escrowStatus = EscrowStatusEnum.ESCROWED ; } } return escrowStatus ; }"
repeat ( 1024 ) { doSomething ( ( ' a'.. ' z ' ) .random ( ) ) } val LOWERCASE_ALPHABETS = ' a'.. ' z'repeat ( 1024 ) { doSomething ( LOWERCASE_ALPHABETS.random ( ) ) }
"private Map < Organisation , Map < LocalDate , Status > > getSummaries ( final List < Status > summaries ) { return summaries .stream ( ) .collect ( groupingBy ( Status : :getOrganisation , toMap ( Status : :getProcessedDate , Function.identity ( ) ) ) ) ; } Summary ( ProcesseDate=2020-01-30 , Organisation=ABC , status=OK , statusCount=5 ) Summary ( ProcesseDate=2020-01-30 , Organisation=ABC , status=FAILED , statusCount=2 ) Summary ( ProcesseDate=2020-01-30 , Organisation=APPLE , status=OK , statusCount=5 ) Summary ( ProcesseDate=2020-01-30 , Organisation=APPLE , status=REJECTED , statusCount=5 ) key=ABC value { key=2020-01-30 , value= Summary ( ProcesseDate=2020-01-30 , Organisation=ABC , status=OK , statusCount=5 ) , Summary ( ProcesseDate=2020-01-30 , Organisation=ABC , status=FAILED , statusCount=2 ) }"
"import java.util.AbstractMap.SimpleEntry ; import java.util.Arrays ; import java.util.List ; import java.util.Map.Entry ; import java.util.Optional ; public class Test { public static void main ( String [ ] args ) { SimpleEntry < Integer , String > simpleEntry = new SimpleEntry < > ( 1 , `` 1 '' ) ; Optional < Entry < Integer , String > > optionalEntry = Optional.of ( simpleEntry ) ; Optional < SimpleEntry < Integer , String > > optionalSimpleEntry = Optional.of ( simpleEntry ) ; List < Entry < Integer , String > > list1 = Arrays.asList ( simpleEntry ) ; List < Optional < Entry < Integer , String > > > list2 = Arrays.asList ( optionalEntry ) ; List < Optional < SimpleEntry < Integer , String > > > list3 = Arrays.asList ( optionalSimpleEntry ) ; List < Optional < Entry < Integer , String > > > list4 = Arrays.asList ( optionalSimpleEntry ) ; } } Type mismatch : can not convert from List < Optional < AbstractMap.SimpleEntry < Integer , String > > > to List < Optional < Map.Entry < Integer , String > > > Test.java:16 : error : incompatible types : inference variable T has incompatible bounds List < Optional < Entry < Integer , String > > > list4 = Arrays.asList ( optionalSimpleEntry ) ; ^ equality constraints : Optional < Entry < Integer , String > > lower bounds : Optional < SimpleEntry < Integer , String > > where T is a type-variable : T extends Object declared in method < T > asList ( T ... )"
public class Kid { private Colour colour ; private Person person ; public Kid ( Person person ) { this.colour = person.getColour ( ) ; } public List < Kid > listOfKids ( ) { return people.stream ( ) .map ( e - > new Kid ( e ) ) ; } }
private void createGameLevelMenuItems ( JMenu menu ) { for ( int i = 0 ; i < 10 ; i++ ) { JMenuItem item = new JMenuItem ( new AbstractAction ( `` Level- '' + i ) { @ Override public void actionPerformed ( ActionEvent e ) { game.loadGame ( i ) ; board.refresh ( ) ; pack ( ) ; } } ) ; menu.add ( item ) ; } }
List < String > result = myArr .stream ( ) .filter ( line - > ! `` foo '' .equals ( line ) ) .collect ( Collectors.toList ( ) ) ;
Iterator < T > it = < insert your Iterator < T > here ... > ; Iterator < U > it2 = ( Iterator < U > ) ( Iterator < ? extends U > ) it ;
"public class Base < E > { static void main ( String [ ] args ) { Base < ? extends Base > compound = new Base < Base > ( ) ; compound.method ( new Base ( ) ) ; } // ^ error void method ( E e ) { } } Error : ( 4 , 17 ) java : method method in class Base < E > can not be applied to given types ; required : capture # 1 of ? extends Base found : Base reason : actual argument Base can not be converted to capture # 1 of ? extends Base by method invocation conversion"
"import org.testng.annotations.Test ; @ Testpublic void testException ( ) { try { Assert.assertEquals ( 1,2 ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } } catch ( AssertionError e ) { e.printStackTrace ( ) ; }"
public static void getFromJars ( String pathToAppJar ) throws IOException { FileInputStream jar = new FileInputStream ( pathToAppJar ) ; ZipInputStream zipSteam = new ZipInputStream ( jar ) ; ZipEntry ze ; while ( ( ze = zipSteam.getNextEntry ( ) ) ! = null ) { System.out.println ( ze.toString ( ) ) ; } zipSteam.close ( ) ; }
"String text = `` new SingleSizeProduct ( 422056 , 1265858 , 5430 , '3XL ' , 75 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265859 , 5341 , ' L ' , 55 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265860 , 5459 , 'M ' , 45 , 1 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265861 , 5446 , 'S ' , 35 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265862 , 5458 , 'XL ' , 60 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265863 , 5511 , 'XXL ' , 65 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) '' ; String regex = `` new SingleSizeProduct ( ( . * ) ) '' ; ( [ 0 ] = > new SingleSizeProduct ( 422056 , 1265858 , 5430 , '3XL ' , 75 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265859 , 5341 , ' L ' , 55 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265860 , 5459 , 'M ' , 45 , 1 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265861 , 5446 , 'S ' , 35 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265862 , 5458 , 'XL ' , 60 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265863 , 5511 , 'XXL ' , 65 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , [ 1 ] = > ( 422056 , 1265858 , 5430 , '3XL ' , 75 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265859 , 5341 , ' L ' , 55 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265860 , 5459 , 'M ' , 45 , 1 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265861 , 5446 , 'S ' , 35 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265862 , 5458 , 'XL ' , 60 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265863 , 5511 , 'XXL ' , 65 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , [ 2 ] = > ( 422056 , 1265858 , 5430 , '3XL ' , 75 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265859 , 5341 , ' L ' , 55 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265860 , 5459 , 'M ' , 45 , 1 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265861 , 5446 , 'S ' , 35 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265862 , 5458 , 'XL ' , 60 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , new SingleSizeProduct ( 422056 , 1265863 , 5511 , 'XXL ' , 65 , 0 , '14.90 ' , '16.50 ' , '29.90 ' , 'TL ' ) , )"
double ideltime=Double.parseDouble ( cpuIdle.trim ( ) ) ; **String idelTimeStr=formatter.format ( ideltime ) ; if ( idelTimeStr ! =null ) ** double usuage=temp - Double.parseDouble ( idelTimeStr ) ; cpuUsage = formatter.format ( usuage ) ; CPUUsage.java:29 : error : '.class ' expected double usuage=temp - Double.parseDouble ( idelTimeStr ) ; ^CPUUsage.java:29 : error : not a statement double usuage=temp - Double.parseDouble ( idelTimeStr ) ; ^CPUUsage.java:29 : error : illegal start of expression double usuage=temp - Double.parseDouble ( idelTimeStr ) ; ^CPUUsage.java:29 : error : ' ; ' expected double usuage=temp - Double.parseDouble ( idelTimeStr ) ;
$ 22 - > < value >
Foo < String > foo = new Foo < > ( ) ; Foo < String > .Bar fooBar = foo.new Bar ( ) ; fooBar.doSomething ( `` this works ! `` ) ; Foo < String > .Bar fooBar2 = new Foo < > ( ) .new Bar ( ) ; fooBar2.doSomething ( `` The above line gives : incompatible types . Required : Foo.Bar Found : Foo.Bar '' ) ; public class Foo < T > { public class Bar extends SomeOtherClass < T > { public void doSomething ( T t ) { } } } public class SomeOtherClass < T > { }
response.indexOf ( `` < /p : panelGrid > '' ) ; response.matches ( `` .* < /p : panelGrid > . * '' ) ;
int a = ' 1 ' ; switch ( a ) { case ' 1 ' : System.out.println ( `` Good '' ) ; break ; case ' 2 ' : case ' 3 ' : System.out.println ( `` great '' ) ; break ; default : System.out.println ( `` invalid '' ) ; } System.out.println ( `` value : `` + a ) ;
class Foo { int a=3 ; public void display ( ) { System.out.println ( `` in foo `` +a ) ; } } class Bar extends Foo { int a=8 ; public void display ( ) { System.out.println ( `` in boo `` +a ) ; } } public class Tester { public static void main ( String [ ] args ) { Foo f = new Bar ( ) ; f.display ( ) ; System.out.println ( f.a ) ; } }
public abstract class Validator implements Comparable < Validator > { public abstract boolean validate ( ) ; public abstract int getPriority ( ) ; @ Override public int compareTo ( Validator o ) { return getPriority ( ) > o.getPriority ( ) ? -1 : getPriority ( ) == o.getPriority ( ) ? 0 : 1 ; } } public class ValidatorChain { //Contains Collection < Validator > // and we can iterate over it with for-each loop in high-to-low priority order }
"@ GetMappingpublic List < String > getData ( Authentication auth ) { String username = auth.getName ( ) .replaceFirst ( `` . * ? \\\\ '' , `` '' ) ; // to remove windows domain name // the rest of these methods only use variable ` username ` , never ` auth ` }"
"// result is of type Map < Long , MyType > for ( final Map.Entry < Long , MyType > someMyTypeObject : result.entrySet ( ) { // Do a bunch of stuff Status status = someMyTypeObject.getStatus ( ) ; // Do some more stuff } public < T > doIterationWork ( Map < Long , T > result ) { // Do a bunch of stuff Status status = someMyTypeObject.getStatus ( ) ; // Do some more stuff } public void getStatus ( MyType obj ) { return obj.getStatus ( ) ; } public void getStatus ( MyNewType obj ) { return obj.getObjectStatus ( ) ; } public void getStatus ( Object obj ) { // throw exception }"
if ( someObject.equals ( anotherObject ) ) if ( someObject == anotherObject )
private static String doStuffFinal ( ) { final String a = `` A '' ; final String b = `` B '' ; final int n = 2 ; return a + b + n ; } private static String doStuffNotFinal ( ) { String a = `` A '' ; String b = `` B '' ; int n = 2 ; return a + b + n ; } private static String doStuffFinal ( ) { String a = `` A '' ; String b = `` B '' ; int n = 2 ; return `` AB2 '' ; } private static String doStuffNotFinal ( ) { String a = `` A '' ; String b = `` B '' ; int n = 2 ; return a + b + n ; }
public void disposeResultsTable ( ) { super.disposeResultsTable ( ) ; }
"public static < T > List < T > synchronizedList ( List < T > list ) { return ( list instanceof RandomAccess ? new SynchronizedRandomAccessList < T > ( list ) : new SynchronizedList < T > ( list ) ) ; } static class SynchronizedList < E > extends SynchronizedCollection < E > implements List < E > { private static final long serialVersionUID = -7754090372962971524L ; final List < E > list ; SynchronizedList ( List < E > list ) { super ( list ) ; this.list = list ; } SynchronizedList ( List < E > list , Object mutex ) { super ( list , mutex ) ; this.list = list ; } public boolean More ... equals ( Object o ) { synchronized ( mutex ) { return list.equals ( o ) ; } } //ommited public void add ( int index , E element ) { synchronized ( mutex ) { list.add ( index , element ) ; } } public E remove ( int index ) { synchronized ( mutex ) { return list.remove ( index ) ; } } //rest is ommited }"
public class Main { public static Scanner staticScanner = new Scanner ( System.in ) ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; A a = new A ( sc ) ; C c = new C ( ) ; c.cDoSomething ( sc ) ; sc.close ( ) ; } public class A { private Scanner sc ; public A ( Scanner sc ) { this.sc = sc ; } public void aDoSomething ( ) { B b = new B ( ) ; b.bDoSomething ( sc ) ; } public class B extends A { public void bDoSomething ( Scanner sc ) { } public class C { public void cDoSomething ( Scanner sc ) { }
package stochasticsearch ; import java.util.Random ; public class StochasticSearch { public static double f ( double x ) { return - ( x - 1 ) * ( x - 1 ) + 2 ; } public static void main ( String [ ] args ) { final Random random = new Random ( ) ; double startPointX = 0 ; double max = f ( startPointX ) ; long begin = System.currentTimeMillis ( ) ; for ( int i = 0 ; i < 1000000000 ; i++ ) { double index = 2 * random.nextDouble ( ) ; if ( f ( index ) > max ) { max = f ( index ) ; } } System.out.println ( `` Elapsed time : `` + ( System.currentTimeMillis ( ) - begin ) ) ; System.out.println ( `` Maximum value y=f ( x ) is `` + max ) ; } }
"public static Map < String , List < String > > agg ( ) { List < String > list = Arrays.asList ( `` Item A '' , `` Item B '' , `` Item C '' ) ; List < String > servers = Arrays.asList ( `` Server A '' , `` Server B '' , `` Server C '' , `` Server D '' ) ; Map < String , List < String > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < list.size ( ) ; i++ ) { ArrayList < String > temp = new ArrayList < > ( ) ; for ( int j = 0 ; j < servers.size ( ) ; j++ ) { temp.add ( servers.get ( j ) ) ; } map.put ( list.get ( i ) , temp ) ; } return map ; } Item C : : [ Server A , Server B , Server C , Server D ] Item B : : [ Server A , Server B , Server C , Server D ] Item A : : [ Server A , Server B , Server C , Server D ]"
"public List < Racer > createListOfRacers ( ) throws IOException { Stream < String > abbreviationsOfRacers = fileLoader.createStreamFromFile ( `` src/main/resources/abbreviations.txt '' ) ; Stream < Racer > racerList = abbreviationsOfRacers .map ( this : :createRacer ) ; return racerList.collect ( toList ( ) ) ; } .map ( this : :createRacer ) ; private Racer createRacer ( String line ) { return new Racer ( extractAbbreviationOfTheRacer ( line ) , extractNameOfTheRacer ( line ) , extractTeamOfTheRacer ( line ) ) ; } private String extractNameOfTheRacer ( String line ) { return line.substring ( line.indexOf ( ' _ ' ) + 1 , line.lastIndexOf ( ' _ ' ) ) ; } private String extractTeamOfTheRacer ( String line ) { return line.substring ( line.lastIndexOf ( ' _ ' ) + 1 ) ; } private String extractAbbreviationOfTheRacer ( String line ) { return line.substring ( 0 , line.indexOf ( ' _ ' ) ) ; } public class Racer { private String abbrevition ; private String name ; private String team ; private String result ; public Racer ( String abbrevition , String name , String team ) { this.abbrevition = abbrevition ; this.name = name ; this.team = team ; } public Racer ( ) { } DRR_Daniel Ricciardo_RED BULL RACING TAG HEUERSVF_Sebastian Vettel_FERRARILHM_Lewis Hamilton_MERCEDESKRF_Kimi Raikkonen_FERRARI ... public Stream < String > createStreamFromFile ( String file ) throws IOException { try ( Stream < String > streamFromFile = Files.lines ( Paths.get ( file ) ) ) { return streamFromFile ; } }"
public class Testcase { public static < E > List < List < E > > transform ( List < List < E > > list ) { return list ; } public static < E > List < List < ? extends E > > transform2 ( List < List < ? extends E > > list ) { return list ; } public static void main ( String [ ] args ) { List < List < Integer > > known = new ArrayList < > ( ) ; List < List < ? extends Number > > unknown = new ArrayList < > ( ) ; transform ( known ) ; // works transform ( unknown ) ; // fails transform2 ( known ) ; // fails transform2 ( unknown ) ; // works } } can not infer type-variable ( s ) E ( argument mismatch ; List < List < ? extends Number > > can not be converted to List < List < E > > ) where E is a type-variable : E extends Object declared in method < E > transform ( List < List < E > > )
"private void getPrice ( ) { DatabaseReference dbRequest = FirebaseDatabase.getInstance ( ) .getReference ( Common .request_tbl ) .child ( riderId ) .child ( `` details '' ) ; // `` Requests '' dbRequest.addValueEventListener ( new ValueEventListener ( ) { @ Override public void onDataChange ( DataSnapshot dataSnapshot ) { for ( DataSnapshot child : dataSnapshot.getChildren ( ) ) { if ( child.getKey ( ) .equals ( `` price '' ) ) { price = Double.valueOf ( child.getValue ( ) .toString ( ) ) ; Log.d ( TAG , `` getPrice : price = `` + price ) ; } } } @ Override public void onCancelled ( DatabaseError databaseError ) { } } ) ; } private void recordData ( String riderId ) { getPrice ( ) ; Log.d ( TAG , `` recordData : price = `` + price ) ; ... }"
"FileOutputStream out = new FileOutputStream ( file ) ; FileChannel channel = out.getChannel ( ) ; FileLock lock = channel.lock ( ) ; if ( lock.isValid ( ) & & ! lock.isShared ( ) ) { Path filePath = Paths.get ( file.getPath ( ) ) ; Files.delete ( filePath ) ; } FileOutputStream out = new FileOutputStream ( file ) ; FileChannel channel = out.getChannel ( ) ; FileLock lock = channel.lock ( ) ; if ( lock.isValid ( ) & & ! lock.isShared ( ) ) { lock.release ( ) ; Path filePath = Paths.get ( file.getPath ( ) ) ; Files.delete ( filePath ) ; } FileOutputStream out = new FileOutputStream ( file ) ; FileChannel channel = out.getChannel ( ) ; FileLock lock = channel.lock ( ) ; if ( lock.isValid ( ) & & ! lock.isShared ( ) ) { channel.close ( ) ; boolean deleted = file.delete ( ) ; logger.info ( `` { } @ { } File { } deleted : { } '' , id , type , file.getName ( ) , deleted ) ; }"
List < String > names = getAllNames ( ) ; names.stream ( ) .map ( n - > getElementFromName ( n ) ) .filter ( e - > e.someCondition ( ) ) .peek ( e - > e.doSomething ( ) ) .filter ( e - > e.otherCondition ( ) ) .peek ( e - > e.doSomethingElse ( ) ) .filter ( e - > e.lastCondition ( ) ) .forEach ( e - > e.doTheLastThing ( ) ) ;
"final long MAX = 5_000_000_000L ; LongStream.rangeClosed ( 0 , MAX ) .count ( ) ; // throughput : 1.7 bn values/secondLongStream.rangeClosed ( 0 , MAX ) .limit ( MAX ) .count ( ) ; // throughput : 780m values/secondLongStream.rangeClosed ( 0 , MAX ) .limit ( MAX ) .limit ( MAX ) .count ( ) ; // throughput : 130m values/secondLongStream.rangeClosed ( 0 , MAX ) .limit ( MAX ) .limit ( MAX ) .limit ( MAX ) .count ( ) ; // throughput : 65m values/second"
"someVector = Vector2d.add ( vec1 , vec2 ) ; someVector = ( new Vector2d ( vec1 ) ) .add ( vec2 ) ; // does the same thing although more convoluted.// similarly adding directly to a vector is simpler with a mutator method.someVector.add ( vec2 ) ; someVector = Vector2d.add ( someVector , vec2 ) ;"
List < Integer > b = new ArrayList < Integer > ( ) ; List a = b ; a.add ( `` test '' ) ; System.out.println ( b.get ( 0 ) ) ;
"public class User { private String name ; private String rg ; private String type ; public String getName ( ) { return name ; } public String getRg ( ) { return rg ; } public String getType ( ) { return type ; } public void setName ( String n ) { name = n ; } public void setRg ( String r ) { rg = r ; } public void setType ( String t ) { type = t ; } } a , b , cd , e , fas , d , cf public class test { public ArrayList < User > readUsers ( String path ) throws IOException //read all users from file and returns an ArrayList { ArrayList < User > list = new ArrayList < User > ( ) ; String [ ] str ; User u = new User ( ) ; BufferedReader buffRead = new BufferedReader ( new FileReader ( path ) ) ; String line = buffRead.readLine ( ) ; while ( line ! = null ) { str = line.split ( `` , '' ) ; u.setName ( str [ 0 ] ) ; //sets each field read to `` u '' u.setRg ( str [ 1 ] ) ; u.setType ( str [ 2 ] ) ; list.add ( u ) ; //adding user to the list to be returned line = buffRead.readLine ( ) ; //reading next register } buffRead.close ( ) ; return list ; } }"
"public Constructor ( TypeA a , TypeB b , TypeC c ) { if ( c.getData ( ) == null ) throw new IllegalArgumentException ( `` '' ) ; this ( a , b , c.getOtherData ( ) ) ; } public Constructor ( TypeA a , TypeB b , TypeD d ) { // stuff happens }"
"java.lang.IllegalStateException : Unable to find a @ SpringBootConfiguration , you need to use @ ContextConfiguration or @ SpringBootTest ( classes= ... ) with your test package com.Alex.demo ; import org.junit.jupiter.api.Test ; import org.springframework.boot.test.context.SpringBootTest ; @ SpringBootTestclass WebAppApplicationTests { @ Test void contextLoads ( ) { } }"
Class < ? extends MyClass > cls = ( Class < ? extends MyClass > ) Class.forName ( className ) ; someMethod ( cls ) ; // someMethod expects a Class < ? extends MyClass > Class < ? > cls0 = Class.forName ( className ) ; if ( cls0 instanceof Class < ? extends MyClass > ) { Class < ? extends MyClass > cls = ( Class < ? extends MyClass > ) cls0 ; someMethod ( cls ) ; } Class < ? > cls0 = Class.forName ( className ) ; if ( MyClass.class.isAssignableFrom ( cls0 ) ) { Class < ? extends MyClass > cls = ( Class < ? extends MyClass > ) cls0 ; someMethod ( cls ) ; }
"public void addCredits ( int additionalPoints ) { credits += additionalPoints ; } public void enrollStudent ( Student newStudent ) { if ( students.size ( ) == capacity ) { System.out.println ( `` The class is full , you can not enrol . `` ) ; } else { students.add ( newStudent ) ; } students.addCredits ( 50 ) ; }"
"import java.awt . * ; import java.awt.event . * ; import javax.swing . * ; public class RandomNumGame extends JFrame { private JLabel promptLabel , resultLabel , answerLabel ; private int tries=1 , randomNum , guessNum ; private JButton button ; private JTextField txt ; private boolean guessed ; public RandomNumGame ( ) { setLayout ( new FlowLayout ( ) ) ; promptLabel = new JLabel ( `` Guess a number ( 1-1000 ) : `` ) ; add ( promptLabel ) ; txt = new JTextField ( 7 ) ; add ( txt ) ; button = new JButton ( `` Guess ! `` ) ; add ( button ) ; resultLabel = new JLabel ( `` '' ) ; add ( resultLabel ) ; /*answerLabel = new JLabel ( `` '' ) ; add ( answerLabel ) ; */ Event e = new Event ( ) ; button.addActionListener ( e ) ; } private class Event implements ActionListener { public void actionPerformed ( ActionEvent e ) { randomNum = ( int ) ( Math.random ( ) * 1000 + 1 ) ; guessed=false ; do { try { guessNum = ( int ) ( Double.parseDouble ( txt.getText ( ) ) ) ; if ( guessNum > randomNum ) { resultLabel.setText ( `` Your number is higher . Try Again '' ) ; } else if ( guessNum < randomNum ) { resultLabel.setText ( `` Your number is lower . Try Again '' ) ; } else { resultLabel.setText ( `` Your number matched ! `` ) ; guessed=true ; } } catch ( Exception ee ) { resultLabel.setText ( `` Enter a legit number . What are you stupid ? `` ) ; } } while ( ! guessed ) ; } } public static void main ( String [ ] args ) { // TODO Auto-generated method stub RandomNumGame ran = new RandomNumGame ( ) ; ran.setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; ran.setSize ( 300 , 120 ) ; //ran.pack ( ) ; ran.setVisible ( true ) ; ran.setTitle ( `` Random Number Game '' ) ; } }"
"stream ( ) .collect ( k - > k.getValue ( ) .getMyKey ( ) , Entry : :getKey ) ;"
< filter > < filter-name > encodingFilter < /filter-name > < filter-class > org.springframework.web.filter.CharacterEncodingFilter < /filter-class > < init-param > < param-name > encoding < /param-name > < param-value > UTF-8 < /param-value > < /init-param > < init-param > < param-name > forceEncoding < /param-name > < param-value > true < /param-value > < /init-param > < /filter > < filter-mapping > < filter-name > encodingFilter < /filter-name > < url-pattern > /* < /url-pattern > < /filter-mapping > { `` hi '' : `` 您好 '' } { `` hi '' : `` ? ? '' }
"| ( \\w+ ) | public static void main ( String [ ] args ) { String toReplace= '' Hey I 'm a lovely String an I 'm giving my |value| worth ! `` ; // String replacement1= '' 2 cent '' ; // I planned to replace |value| with 2 cent String replacement1= '' @ '' ; // to produce a better Output String regex= '' | ( \\w+ ) | '' ; // I forgot to escape the | replacement1= '' @ '' ; result=toReplace.replaceAll ( regex , replacement1 ) ; System.out.println ( result ) ; } @ H @ e @ y @ @ I @ ' @ m @ @ a @ @ l @ o @ v @ e @ l @ y @ @ S @ t @ r @ i @ n @ g @ @ a @ n @ @ I @ ' @ m @ @ g @ i @ v @ i @ n @ g @ @ m @ y @ @ | @ v @ a @ l @ u @ e @ | @ @ w @ o @ r @ t @ h @ ! @"
class L { static void fr ( ) { a=1 ; b=3 ; a=b ; } static { a=3 ; b=1 ; a=b ; // here the problem : can not reference a field before it is defined } static int a ; static int b ; public static void main ( String args [ ] ) { } }
public class FooConfiguration { @ Bean @ Scope ( `` prototype '' ) public Foo foo ( @ Autowired Bar bar ) { return new Foo ( bar ) ; } } @ Componentpublic class TheDependent { @ Autowired private Foo foo ; } @ Componentpublic class AnotherOne { @ Autowired private Foo foo ; }
public class Main { private final int value = 3 ; public static Runnable buildRunner ( ) { return new Runnable ( ) { @ Override public void run ( ) { System.out.println ( Main.this.value ) ; } } ; } }
String [ ] sa = ( String [ ] ) arr ; Exception in thread `` main '' java.lang.ClassCastException : [ [ Ljava.lang.String ; can not be cast to [ Ljava.lang.String ;
if ( ur.contains ( `` wikipedia.org '' ) ) { //do something }
@ Overridepublic void select ( Object item ) { super.select ( item ) ; }
"public interface Aa { } public interface Bb { } public interface Cc { } public static < GenericAB extends Aa & Bb > void method ( GenericAB myABobject1 , GenericAB myABobject2 ) { } public static < GenericAB extends Aa & Bb , GenericCA extends Cc & Aa > void method ( GenericAB myAbobject , GenericCA myCAobject ) { } public interface Aa { } public interface Bb { } public interface Cc { } public static < GenericAB extends Aa & Bb > void method ( GenericAB myABobject1 , GenericAB myABobject2 ) { } public static < GenericAB extends Aa & Bb , GenericAC extends Aa & Cc > void method ( GenericAB myAbobject , GenericAC myACobject ) { }"
TimeZone tz1 = TimeZone.getTimeZone ( `` Etc/GMT-3 '' ) ; System.out.println ( tz1.getDisplayName ( ) ) ;
public Class ExampleClass { private static String field1 ; private String field2 ; public ExampleClass ( String field2 ) { this.field2 = field2 ; } public static staticMethodExample ( String field1 ) { this.field1 = field1 ; } }
"H < V > .Pair currPair = ( H < V > .Pair ) arr [ startPos ] ; if ( arr [ startPos ] == null ) { return null ; } if ( currPair.key.equals ( key ) ) { return currPair.value ; } else { return find ( gNL ( startPos , ++stepNum , key ) , key , stepNum ) ; } }"
"public static void ConcatArray ( int [ ] listA , int [ ] listB , int [ ] listC ) { int aLen = listA.length ; int bLen = listB.length ; int cLen = listC [ aLen + bLen ] ; }"
"private final int MAX_PACKET_SIZE = 1024 ; private byte [ ] data = new byte [ MAX_PACKET_SIZE ] ; private void receive ( ) { new Thread ( ( ) - > { while ( running ) { DatagramPacket packet = new DatagramPacket ( data , data.length ) ; try { socket.receive ( packet ) ; sPort = packet.getPort ( ) ; ip = packet.getAddress ( ) ; address = ip.toString ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } String messageToPrint = new String ( packet.getData ( ) ) ; System.out.println ( messageToPrint.trim ( ) + `` `` + address + `` | `` + sPort ) ; } } ) .start ( ) ; } Console : past messageConsole : ( imagine i typed hello ) hellomessage"
"public static int square ( int x ) { return x * x ; } coolNewFunction ( ( ) - > square ( ) , 100 )"
"DateFormat.getDateTimeInstance ( DateFormat.FULL , DateFormat.FULL ) .format ( new Date ( 199231200000L ) ) new org.joda.time.DateTime ( ) .withDate ( 1976 , 4 , 25 ) .withTime ( 0 , 0 , 0 , 0 ) .toDate ( ) .getTime ( )"
"List < String > list1 = Arrays.asList ( `` FOO1234 '' , `` FOO1111 '' , `` BAR1 '' , `` BARRRRR '' ) ; List < String > fooBarList = Array.asList ( `` FOO '' , `` BAR '' ) ; { FOO= [ `` FOO1234 '' , FOO1111 '' ] , BAR= [ `` BAR1 '' , `` BARRRRR '' ] }"
"AlphanumComparator comparator = new AlphanumComparator ( CaseHandling.CASE_INSENSITIVE ) ; Arrays.sort ( albumArray , ( Album a , Album b ) - > { return comparator.compare ( a.getAlbumArtist ( ) , b.getAlbumArtist ( ) ) ; } ) ;"
return segadors .stream ( ) .map ( c - > c.getSegadorMedium ( ) .stream ( ) .map ( cm - > Objects.nonNull ( cm.getPhoneSegador ( ) ) ) ) .findFirst ( ) .orElse ( null ) ;
interface I { boolean get ( Impl impl ) ; } static class Impl { public boolean get ( ) { return true ; } } I i = Impl : :get ; i.get ( null ) ; Exception in thread `` main '' java.lang.NullPointerException
"import java.util.concurrent.ThreadLocalRandom ; public class ParallelTest { public static long sum1 ( long [ ] num , int a , int b ) { long r = 0 ; while ( a < b ) { r += num [ a ] ; ++a ; } return r ; } public static class SumThread extends Thread { private long num [ ] ; private long r ; private int a , b ; public SumThread ( long [ ] num , int a , int b ) { super ( ) ; this.num = num ; this.a = a ; this.b = b ; } @ Override public void run ( ) { r = ParallelTest.sum1 ( num , a , b ) ; } public long getSum ( ) { return r ; } } public static long sum2 ( long [ ] num , int a , int b , int threadCnt ) throws InterruptedException { SumThread [ ] th = new SumThread [ threadCnt ] ; int i = 0 , c = ( b - a + threadCnt - 1 ) / threadCnt ; for ( ; ; ) { int a2 = a + c ; if ( a2 > b ) { a2 = b ; } th [ i ] = new SumThread ( num , a , a2 ) ; th [ i ] .start ( ) ; if ( a2 == b ) { break ; } a = a2 ; ++i ; } for ( i = 0 ; i < threadCnt ; ++i ) { th [ i ] .join ( ) ; } long r = 0 ; for ( i = 0 ; i < threadCnt ; ++i ) { r += th [ i ] .getSum ( ) ; } return r ; } public static void main ( String [ ] args ) throws InterruptedException { final int N = 230000000 ; long [ ] num = new long [ N ] ; for ( int i = 0 ; i < N ; ++i ) { num [ i ] = ThreadLocalRandom.current ( ) .nextLong ( 1 , 9999 ) ; } // System.out.println ( Runtime.getRuntime ( ) .availableProcessors ( ) ) ; long timestamp = System.nanoTime ( ) ; System.out.println ( sum1 ( num , 0 , num.length ) ) ; System.out.println ( System.nanoTime ( ) - timestamp ) ; for ( int n = 2 ; n < = 4 ; ++n ) { timestamp = System.nanoTime ( ) ; System.out.println ( sum2 ( num , 0 , num.length , n ) ) ; System.out.println ( System.nanoTime ( ) - timestamp ) ; } } } 1149914787860175689196114991478786014922408611499147878601477099881149914787860138243999"
class HeavyweightObjcet { public void operate ( ) { System.out.println ( `` Operating ... '' ) ; } } class LazyInitializer { HeavyweightObjcet objcet ; public void operate ( ) { if ( objcet == null ) objcet = new HeavyweightObjcet ( ) ; objcet.operate ( ) ; } } class HeavyweightObjcet { public void operate ( ) { System.out.println ( `` Operating ... '' ) ; } } class LazyInitializer { HeavyweightObjcet objcet ; State state = new UninitializedState ( this ) ; public void operate ( ) { state.operate ( ) ; } } abstract class State { LazyInitializer initializer ; public State ( LazyInitializer initializer ) { this.initializer = initializer ; } abstract void operate ( ) ; } class UninitializedState extends State { public UninitializedState ( LazyInitializer initializer ) { super ( initializer ) ; } @ Override public void operate ( ) { initializer.objcet = new HeavyweightObjcet ( ) ; initializer.state = new InitializedState ( initializer ) ; initializer.operate ( ) ; } } class InitializedState extends State { public InitializedState ( LazyInitializer initializer ) { super ( initializer ) ; } @ Override public void operate ( ) { initializer.objcet.operate ( ) ; } }
for ( int i = 0 ; i < n ; i++ ) { arr [ i ] = scanner.nextInt ( ) ; } String [ ] bin = new String [ n ] ; for ( int i = 0 ; i < n ; i++ ) { bin [ i ] = Integer.toBinaryString ( arr [ i ] ) ; }
public class Main { // case 1 : strictfp not present at top of call stack private static double bar1 ( double x ) { return Math.sin ( x ) ; } strictfp private static double foo1 ( double x ) { return bar1 ( x ) ; } // case 2 : strictfp present at top of call stack strictfp private static double bar2 ( double x ) { return Math.sin ( x ) ; } strictfp private static double foo2 ( double x ) { return bar2 ( x ) ; } public static void main ( String [ ] args ) { double x = 10.0 ; System.out.println ( foo1 ( x ) ) ; // -0.5440211108893698 System.out.println ( foo2 ( x ) ) ; // -0.5440211108893698 } }
interface Event { } @ FunctionalInterfaceinterface EventListener < T extends Event > { void onEvent ( T event ) ; } class Service { class ServiceEvent implements Event { } public void onServiceEvent ( ServiceEvent event ) { } } Service service = new Service ( ) ; EventListener < ServiceEvent > listener = service : :onServiceEvent ; Service service = new Service ( ) ; EventListener < ? extends Event > anotherListener = service : :onServiceEvent ;
@ Then ( `` ^my profile information is retrieved with success '' ) public void validateProfileInformation ( ) { assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; if ( this ) { x = y ; } } SOME HEADER TEXT assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; assertThat ( .. ) .isEqualTo ( .. ) ; **Optionally : ** if ( this ) { x = y ; }
"public class Model { public String mId , mTitle , mDesc ; public Model ( ) { } public Model ( String mId , String mTitle , String mDesc ) { this.mId = mId ; this.mTitle = mTitle ; this.mDesc = mDesc ; } public String getmId ( ) { return mId ; } public void setmId ( String mId ) { this.mId = mId ; } public String getmTitle ( ) { return mTitle ; } public void setmTitle ( String mTitle ) { this.mTitle = mTitle ; } public String getmDesc ( ) { return mDesc ; } public void setmDesc ( String mDesc ) { this.mDesc = mDesc ; } } data class model_for_single_row ( val mId : String , val mTitle : String , val mDesc : String ) { constructor ( ) : this ( ) }"
"class X { } Method defaultM = Object.class.getMethod ( `` equals '' , Object.class ) Method xMethod = X.class.getMethod ( `` equals '' , Object.class ) xMethod ! = defaultMxMethod.equals ( defaultM )"
"The numbers are 144 , 424 , and 345 . Not 45 . The numbers we are looking for : 234 & 992 Some examples : 234 , 244 and 12 ( ? < =numbers\b ) ( ? : .|\n ) * ? \b ( \d { 3 } ) \b"
Object foo = new Object ( `` foo '' ) ; Object bar = new Object ( `` bar '' ) ; Object baz = new Object ( `` baz '' ) ;
"String [ ] Category = { `` abc '' , `` abc '' , `` abc '' , `` abc '' , `` abc '' , `` abc '' , `` abc '' } ; Random random = new Random ( ) ; int index = random.nextInt ( Category.length ) ; System.out.println ( Category [ index ] ) ; driver.findElement ( By.xpath ( `` //* [ @ name='\ '' $ { Category [ index ] } \ '' ' ] '' ) ) .click ( ) ;"
public class GenericsTest { public static void main ( String [ ] args ) { TestBuilder tb = TestBuilder.create ( Test_Child : :new ) ; Product < Test_Child > p = tb.build ( ) ; Test tc = p.Construct ( `` Test '' ) ; } static class TestBuilder < T extends Test > { private final Factory < T > f ; public TestBuilder ( Factory < T > f ) { this.f = f ; } public static < T extends Test > TestBuilder < T > create ( Factory < T > f ) { return new TestBuilder < > ( f ) ; } public Product < T > build ( ) { return new Product < > ( f ) ; } } static class Test { public Test ( ) { } } static class Test_Child extends Test { public Test_Child ( String s ) { System.out.println ( `` Test_Child constructed with string ' '' +s+ '' ' '' ) ; } } interface Factory < T extends Test > { T create ( String s ) ; } static class Product < T extends Test > { private Factory < T > f ; public Product ( Factory < T > f ) { this.f = f ; } public T Construct ( String s ) { return f.create ( s ) ; } } }
"Map < String , String > map1 = new HashMap < > ( ) ; map1.put ( `` k1 '' , `` v1 '' ) ; map1.put ( `` k2 '' , `` v2 '' ) ; map1.put ( `` k3 '' , `` v3 '' ) ; Map < String , String > map2 = new HashMap < > ( ) ; map2.put ( `` v1 '' , `` val1 '' ) ; map2.put ( `` v2 '' , `` val2 '' ) ; map2.put ( `` v3 '' , `` vav3 '' ) ; for ( Map.Entry < String , String > entry : map1.entrySet ( ) ) { map1.put ( entry.getKey ( ) , map2.get ( entry.getValue ( ) ) ) ; }"
import java.util.Set ; import java.util.HashSet ; class Foo { private final Set < Object > bars = new HashSet < > ( ) ; public void addBar ( final Object bar ) { bars.remove ( bar ) ; // WHY ? ? ? ? bars.add ( bar ) ; } public Object [ ] getBars ( ) { return bars.toArray ( new Object [ 0 ] ) ; } }
Source.java:10 : error : unreachable statement System.out.println ( `` This code is not reachable '' ) ; // Case # 1if ( true ) { System.out.println ( `` This code is reachable '' ) ; } else { System.out.println ( `` This code is not reachable '' ) ; // Compiles OK } // Case # 2for ( i = 0 ; i < 5 ; i++ ) { if ( true ) continue ; System.out.println ( `` This code is not reachable '' ) ; // Compiles OK }
import java.util.List ; public class Sample { public static void main ( String [ ] args ) { test ( null ) ; } static void test ( List < Object > a ) { System.out.println ( `` List of Object '' ) ; } static void test ( Object a ) { System.out.println ( `` Object '' ) ; } } List of Object
"public void add ( Student s ) { lookup.put ( s.getId ( ) , s ) ; }"
"PdfPTable table = new PdfPTable ( new float [ ] { 100.0f } ) ; List < PdfPCell > cells = new ArrayList < > ( ) ; List < String > labels = Arrays.asList ( Labels.ITEM_NAME , Labels.QUANTITY , Labels.PRICE ) ; for ( String label : labels ) { PdfPCell cell = new PdfPCell ( new Phrase ( label ) ) ; cells.add ( cell ) ; } for ( PdfPCell cell : cells ) { table.addCell ( cell ) ; } let container = { items : [ ] } ; [ 1 , 2 , 3 ] .reduce ( ( container , item ) = > { container.items.push ( item ) ; return container ; } , container ) ; console.log ( container ) ; // { items : [ 1 , 2 , 3 ] } PdfPTable myTable = Stream.of ( Labels.ITEM_NAME , Labels.QUANTITY , Labels.PRICE ) .map ( s - > new PdfPCell ( new Phrase ( s ) ) ) .reduce ( new PdfPTable ( new float [ ] { 100.0f } ) , ( table , cell ) - > { table.addCell ( cell ) ; return table ; } ) ; T result = identity ; for ( T element : this stream ) result = accumulator.apply ( result , element ) return result ;"
"isDateValid ( `` 19/06/2012 5:00 , 21:00 '' , '' dd/MM/yyyy HH : mm '' ) public static boolean isDateValid ( String date , String dateFormat ) { try { DateFormat df = new SimpleDateFormat ( dateFormat ) ; df.setLenient ( false ) ; Date newDate = df.parse ( date ) ; System.out.println ( `` Date value after checking for validity : `` + newDate ) ; return true ; } catch ( ParseException e ) { return false ; } }"
"class PrintNumbers { synchronized public void display ( ) { System.out.println ( `` in display '' ) ; for ( int i = 0 ; i < 3 ; i++ ) { System.out.println ( `` Thread name : `` + Thread.currentThread ( ) .getName ( ) + `` i= `` + i ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { e.getMessage ( ) ; } } System.out.println ( `` out of display '' ) ; } } class MyThread implements Runnable { Thread t ; PrintNumbers printNumbers ; MyThread ( PrintNumbers printNumbers , String s ) { this.printNumbers = printNumbers ; t = new Thread ( this , s ) ; t.start ( ) ; } public void run ( ) { printNumbers.display ( ) ; } } class SyncExample { public static void main ( String [ ] args ) { PrintNumbers printNumbers = new PrintNumbers ( ) ; new MyThread ( printNumbers , `` My Thread 1 '' ) ; new MyThread ( printNumbers , `` My Thread 2 '' ) ; } } in display Thread name : My Thread 1 i= 0 Thread name : My Thread 1 i= 1 Thread name : My Thread 1 i= 2 out of displayin display Thread name : My Thread 2 i= 0 Thread name : My Thread 2 i= 1 Thread name : My Thread 2 i= 2 out of display class PrintNumbers { synchronized public void display ( ) { System.out.println ( `` in display '' ) ; for ( int i = 0 ; i < 3 ; i++ ) { System.out.println ( `` Thread name : `` + Thread.currentThread ( ) .getName ( ) + `` i= `` + i ) ; try { Thread.sleep ( 1000 ) ; } catch ( InterruptedException e ) { e.getMessage ( ) ; } } System.out.println ( `` out of display '' ) ; } } class MyThread implements Runnable { Thread t ; PrintNumbers printNumbers ; MyThread ( String s ) { this.printNumbers = new PrintNumbers ( ) ; t = new Thread ( this , s ) ; t.start ( ) ; } public void run ( ) { printNumbers.display ( ) ; } } class SyncExample { public static void main ( String [ ] args ) { new MyThread ( `` My Thread 1 '' ) ; new MyThread ( `` My Thread 2 '' ) ; } } in display Thread name : My Thread 1 i= 0 in display Thread name : My Thread 2 i= 0 Thread name : My Thread 1 i= 1 Thread name : My Thread 2 i= 1 Thread name : My Thread 2 i= 2 Thread name : My Thread 1 i= 2 out of display out of display"
"public static final boolean DEBUG = true ; // just created once in a `` Utility '' class if ( Utility.DEBUG ) Log.d ( `` TIMER '' , /*string message that is strictly related to context*/ ) ;"
int # '' strange variable name '' = 42 ; System.out.println ( # '' strange variable name '' ) ; // prints 42
Obtains an instance of Year from a text string such as 2007 . The string must represent a valid year . Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol . @ Testpublic void parse_year ( ) { for ( int i = 2000 ; i > = 0 ; i -- ) { System.out.println ( `` Parsing year : `` + i ) ; Year.parse ( String.valueOf ( i ) ) ; } } Parsing year : 1003Parsing year : 1002Parsing year : 1001Parsing year : 1000Parsing year : 999java.time.format.DateTimeParseException : Text '999 ' could not be parsed at index 0 at java.time.format.DateTimeFormatter.parseResolved0 ( DateTimeFormatter.java:1949 ) at java.time.format.DateTimeFormatter.parse ( DateTimeFormatter.java:1851 ) at java.time.Year.parse ( Year.java:292 ) at java.time.Year.parse ( Year.java:277 ) [ ... ]
"boolean existsByPurchaseStateInAndUserAccount_Id ( List < PurchaseState > purchaseState , long userAccountId ) ;"
"// simple interface to make it a MCVEstatic interface A < F , S > { public F getF ( ) ; public S getS ( ) ; } static < V , S > Comparator < A < V , S > > wrap ( Comparator < S > c ) { return ( L , R ) - > c.compare ( L.getS ( ) , R.getS ( ) ) ; } Comparator < A < String , Integer > > c = wrap ( ( L , R ) - > Integer.compare ( L , R ) ) .thenComparing ( wrap ( ( L , R ) - > Integer.compare ( L , R ) ) ) ; Comparator < A < String , Integer > > c = wrap ( ( L , R ) - > Integer.compare ( L , R ) ) ; c = c.thenComparing ( wrap ( ( L , R ) - > Integer.compare ( L , R ) ) ) ;"
"public class RecursiveCounter implements FactorialCounter , RangeFactorialCounter { @ Override public BigInteger count ( int number ) { return count ( 1 , number ) ; } @ Override public BigInteger count ( int from , int to ) { int middle = ( from + to ) > > 1 ; BigInteger left ; BigInteger right ; if ( middle - from > 1 ) left = count ( from , middle ) ; else left = new BigInteger ( String.valueOf ( from * middle ) ) ; if ( to - ( middle + 1 ) > 1 ) right = count ( middle + 1 , to ) ; else right = to == middle + 1 ? new BigInteger ( String.valueOf ( to ) ) : new BigInteger ( String.valueOf ( ( middle + 1 ) * to ) ) ; return left.multiply ( right ) ; } } public class LoopCounter implements FactorialCounter , RangeFactorialCounter { @ Override public BigInteger count ( final int number ) { return count ( 1 , number ) ; } @ Override public BigInteger count ( final int from , final int to ) { BigInteger result = new BigInteger ( `` 1 '' ) ; for ( int i = from ; i < to + 1 ; i++ ) { result = result.multiply ( new BigInteger ( String.valueOf ( i ) ) ) ; } return result ; } } public class FactorialTask extends RecursiveTask < BigInteger > { private static final int THRESHOLD = 1000 ; private RangeFactorialCounter iterativeCounter = new LoopCounter ( ) ; private Integer firstVal ; private Integer lastVal ; public FactorialTask ( Integer from , Integer to ) { super ( ) ; this.firstVal = from ; this.lastVal = to ; } @ Override protected BigInteger compute ( ) { return count ( firstVal , lastVal ) ; } private BigInteger count ( int from , int to ) { int middle = ( from + to ) > > 1 ; if ( to - from > THRESHOLD ) { List < FactorialTask > tasks = Arrays.asList ( new FactorialTask ( from , middle ) , new FactorialTask ( middle + 1 , to ) ) ; tasks.forEach ( RecursiveTask : :fork ) ; return tasks.stream ( ) .map ( RecursiveTask : :join ) .map ( BigInteger.class : :cast ) .reduce ( new BigInteger ( `` 1 '' ) , BigInteger : :multiply ) ; } else { return ( from ! = to ) ? countSequential ( from , to ) : new BigInteger ( String.valueOf ( from ) ) ; } } private BigInteger countSequential ( int from , int to ) { return iterativeCounter.count ( from , to ) ; } }"
"SeverityCount calculateSeveritiesCount ( List < ? > events ) { if ( null == events ) { return new SeverityCount ( ) ; } if ( events.get ( 1 ) instanceof EventDAO ) { events = ( List < EventDAO > ) events ; } else if ( events.get ( 1 ) instanceof EventsByAreaDAO ) { events = ( List < EventsByAreaDAO > ) events ; } Map < String , Long > severityCountMap = events.stream ( ) .collect ( Collectors.groupingBy ( EventDAO : :getSeverity , //It should be EventDAO or EventsByAreaDAO . both has severity field . Collectors.counting ( ) ) ) ; return mapper.convertValue ( severityCountMap , SeverityCount.class ) ; } @ Data @ NoArgsConstructor @ AllArgsConstructor @ Entity @ Table ( name = `` events '' ) public class EventDAO { @ Id @ Column ( name = `` uid '' ) private String uID ; private String date ; private String severity ; } @ Data @ NoArgsConstructor @ AllArgsConstructor @ Entity @ Table ( name = `` events '' ) public class EventsByRegionDAO { @ Id @ Column ( name = `` uid '' ) private String uID ; private String date ; private String type ; private String severity ; private String area ; private String server ; } SeverityCount severitiesCount = Utils.calculateSeveritiesCount ( eventsList ) ; //EventsList could be list of EventDAO or EventsByAreaDAO"
"{ [ DefaultDetailPane ] =DefaultDetailPane [ DefaultDetailPane , MyDetailPane ] =DefaultDetailPane }"
"question answer 1 x2 y3 z4 p1 x2 q3 r Map < Integer , List < String > > < 1 , [ x , x ] 2 , [ y , p ] 3 , [ z , r ] 4 , [ p ] > Map < Integer , List < Answer > > collect = answers .stream ( ) .collect ( Collectors.groupingBy ( Answer : :getQuestion ) ) ;"
f ( ) ; toString ( ) ;
"/** * Sends the data to the Arduino . * A new Thread is created for sending the data . * A transmission cool-down is started before send ( ) method can be used again . * @ param data the data to send to the Arduino */ public void send ( String data ) { if ( connected & & ! sending ) { // Set 'sending ' to true so only 1 Thread can be active at a time sending = true ; // Create a new thread for sending the data Thread thread = new Thread ( ( ) - > { // Send the data PrintWriter output = new PrintWriter ( chosenPort.getOutputStream ( ) ) ; output.print ( data ) ; System.out.println ( `` Data sended '' ) ; output.flush ( ) ; // Wait for the transmission cool-down and set 'sending ' to false to allow for another Thread to send data try { Thread.sleep ( transmissionCoolDown ) ; } catch ( InterruptedException interruptedException ) { interruptedException.printStackTrace ( ) ; } sending = false ; System.out.println ( `` cooldown is over '' ) ; } ) ; thread.start ( ) ; } } @ FXML private void sendClicked ( ) { // Only do something if a connection is active and an image is selected . // Should be unnecessary since the send button is only enables when both are true . if ( connected & & selectedIV.getImage ( ) ! = null ) { if ( ! sending ) { // Save the original text of the send button and disable the disconnect button String ogText = sendButton.getText ( ) ; System.out.println ( ogText ) ; connectButton.setDisable ( true ) ; // If the data has not been saved before , get the data by formatting the image if ( data == null ) { data = imgCon.toStringFormat ( true ) ; } ardComm.send ( data ) ; // While the ArduinoCommunicator is busy sending , change the text on the send button to indicate the data is being transmitted sendButton.setText ( `` busy '' ) ; while ( ardComm.isSending ( ) ) { } // Restore the text on the send button sendButton.setText ( ogText ) ; connectButton.setDisable ( false ) ; } } } sendButton.setText ( `` busy '' ) ; while ( ardComm.isSending ( ) ) { } // Restore the text on the send button sendButton.setText ( ogText ) ;"
"Set < String > stringSet = new HashSet < > ( ) ; stringSet.add ( `` aaaaaaaaaa '' ) ; //Serialize itbyte [ ] bytesA ; try ( ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ) { ObjectOutputStream out = new ObjectOutputStream ( bos ) ; out.writeObject ( stringSet ) ; out.flush ( ) ; bytesA = bos.toByteArray ( ) ; } // Deserialize itObject fromBytes ; try ( ByteArrayInputStream is = new ByteArrayInputStream ( bytesA ) ) { try ( ObjectInputStream ois = new ObjectInputStream ( is ) ) { fromBytes = ois.readObject ( ) ; } } //Serialize it.byte [ ] bytesB ; try ( ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ) { ObjectOutputStream out = new ObjectOutputStream ( bos ) ; out.writeObject ( fromBytes ) ; out.flush ( ) ; bytesB = bos.toByteArray ( ) ; } assert Arrays.equals ( bytesA , bytesB ) ; //array contents differ at index [ 43 ] , expected : < 16 > but was : < 2 > 00000000 : aced 0005 7372 0011 6a61 7661 2e75 7469 ... .sr..java.uti00000010 : 6c2e 4861 7368 5365 74ba 4485 9596 b8b7 l.HashSet.D ... ..00000020 : 3403 0000 7870 770c 0000 0010 3f40 0000 4 ... xpw ... .. ? @ ..00000030 : 0000 0001 7400 0a61 6161 6161 6161 6161 ... .t..aaaaaaaaa00000040 : 6178 ax 00000000 : aced 0005 7372 0011 6a61 7661 2e75 7469 ... .sr..java.uti00000010 : 6c2e 4861 7368 5365 74ba 4485 9596 b8b7 l.HashSet.D ... ..00000020 : 3403 0000 7870 770c 0000 0002 3f40 0000 4 ... xpw ... .. ? @ ..00000030 : 0000 0001 7400 0a61 6161 6161 6161 6161 ... .t..aaaaaaaaa00000040 : 6178 ax capacity = ( int ) Math.min ( ( float ) size * Math.min ( 1.0F / loadFactor , 4.0F ) , 1.07374182E9F ) ;"
Class c = v.getClass ( ) ; try { Method m = c.getMethod ( `` something '' ) ; if ( ! m.getReturnType ( ) .equals ( Boolean.TYPE ) ) { return false ; } } catch ( NoSuchMethodException e ) { return false ; } import java.lang . * ;
public interface Number { public int intValue ( ) ; public long longValue ( ) ; public float floatValue ( ) ; public double doubleValue ( ) ; default public byte byteValue ( ) { return ( byte ) intValue ( ) ; } default public short shortValue ( ) { return ( short ) intValue ( ) ; } }
"public class AudioPopup extends AppCompatActivity { SeekBar seek_bar ; ImageView play_button , pause_button ; MediaPlayer player ; ImageView exitPlayer ; Handler seekHandler = new Handler ( ) ; private int [ ] audioFiles ; @ Override public void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.audio_popup ) ; setFinishOnTouchOutside ( false ) ; audioFiles = new int [ ] { R.raw.lesson1-1 , R.raw.lesson1-2 , R.raw.lesson1-3 , R.raw.lesson1-4 } ; getInit ( ) ; seekUpdation ( ) ; exitPlayer = ( ImageView ) findViewById ( R.id.audio_exit_1 ) ; exitPlayer.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { finish ( ) ; player.stop ( ) ; } } ) ; } public void getInit ( ) { seek_bar = ( SeekBar ) findViewById ( R.id.seekbar_1 ) ; play_button = ( ImageView ) findViewById ( R.id.audio_play_1 ) ; pause_button = ( ImageView ) findViewById ( R.id.audio_stop_1 ) ; play_button.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { PlayAudio ( ) ; } } ) ; pause_button.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { player.stop ( ) ; releaseMediaPlayer ( ) ; player = MediaPlayer.create ( AudioPopup.this , lesson1-1 ) ; play_button.setImageResource ( R.drawable.ic_play_circle_filled_black_48dp ) ; } } ) ; player = MediaPlayer.create ( this , R.raw.l01_audiotraining_grammatik_01 ) ; seek_bar.setMax ( player.getDuration ( ) ) ; seek_bar.setOnTouchListener ( new View.OnTouchListener ( ) { @ Override public boolean onTouch ( View v , MotionEvent event ) { seekChange ( v ) ; return false ; } } ) ; } Runnable run = new Runnable ( ) { @ Override public void run ( ) { seekUpdate ( ) ; } } ; public void seekUpdate ( ) { seek_bar.setProgress ( player.getCurrentPosition ( ) ) ; seekHandler.postDelayed ( run , 1000 ) ; } //event handler for the progress of seek barprivate void seekChange ( View view ) { if ( player.isPlaying ( ) ) { SeekBar sb = ( SeekBar ) view ; player.seekTo ( sb.getProgress ( ) ) ; } } private void releaseMediaPlayer ( ) { // If the media player is not null , then it may be currently playing a sound . if ( player ! = null ) { // Regardless of the current state of the media player , release its resources // because we no longer need it . player.release ( ) ; // Set the media player back to null . For our code , we 've decided that // setting the media player to null is an easy way to tell that the media player // is not configured to play an audio file at the moment . player = null ; } } private void PlayAudio ( ) { if ( player == null ) { player = MediaPlayer.create ( AudioPopup.this , R.raw.lesson1-1 ) ; } if ( player.isPlaying ( ) ) { player.pause ( ) ; play_button.setImageResource ( R.drawable.ic_play_circle_filled_black_48dp ) ; try { player.prepare ( ) ; } catch ( IllegalStateException e ) { e.printStackTrace ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } else { play_button.setImageResource ( R.drawable.ic_pause_circle_filled_black_48dp ) ; player.start ( ) ; } } } audio1 = ( ImageView ) popupView.findViewById ( R.id.lesson1_audio_gramar_1 ) ; assert audio1 ! = null ; audio1.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { Intent audio_intent = new Intent ( getApplicationContext ( ) , AudioPopup.class ) ; startActivity ( audio_intent ) ; } } ) ;"
"String string= '' She is an attractive girl , is n't she ? `` ; StringTokenizer stringTokenizer=new StringTokenizer ( string , '' , '' ) ; for ( int i=0 ; i < stringTokenizer.countTokens ( ) ; i++ ) System.out.println ( stringTokenizer.nextToken ( ) ) ; while ( stringTokenizer.hasMoreElements ( ) ) System.out.println ( stringTokenizer.nextToken ( ) ) ;"
public class Employee { /* instance variables */ private String firstName ; private String employeeNumber ; public Employee ( String employNum ) { super ( ) ; this.employeeNumber = employNum ; } public String getFirstName ( ) { return this.firstName ; } public class Records { public Set < Employee > employeeSet = new HashSet < Employee > ( ) ; public Records ( ) { } } public void printEmployeeNames ( ) { for ( String employee : employeeSet ) { System.out.println ( this.employeeSet.getFirstName ( ) ) ; } } for ( String employee : employeeSet ) public void printEmployeeNames ( ) { System.out.println ( this.employeeSet.getFirstName ( ) ) ; } public void printEmployees ( ) { for ( Employee employee : employeeSet ) { System.out.println ( employee.getFirstName ( ) ) ; } }
short value = ( short ) 0b1111111111100000 ; System.out.println ( wordToString ( value ) ) ; value > > > = 5 ;
"Jon , Kim , Hem , David , Gary , Bryan , Otis , Neil , Blake , Greg , @ Team=Cowboys , Chargers , Panthersm , Royals , Kings , Warriors JonKimHemDavidGaryBryanOtisNeilBlakeGreg @ Team=Cowboys , Chargers , Panthersm , Royals , Kings , Warriors String data = `` Jon , Kim , Hem , David , Gary , Bryan , Otis , Neil , Blake , Greg , @ Team=Cowboys , Chargers , Panthersm , Royals , Kings , Warriors '' ; String arr [ ] = data.split ( `` ( ? < = ) ( ? = @ Team ) '' ) ; String temp [ ] = arr [ 0 ] .split ( `` , \\s '' ) ; String result [ ] = new String [ temp.length + 1 ] ; int i=0 ; for ( i=0 ; i < temp.length ; i++ ) result [ i ] = temp [ i ] ; result [ i ] = arr [ 1 ] ; for ( String s : result ) System.out.println ( s ) ;"
"public static void reverse ( List < ? > list ) { rev ( list ) ; } //capturing the wildcardprivate static < T > void rev ( List < T > list ) { List < T > tmp = new ArrayList < T > ( list ) ; for ( int i = 0 ; i < list.size ( ) ; i++ ) { list.set ( i , tmp.get ( list.size ( ) -i-1 ) ) ; } } private int compare ( Comparable < ? > upper , Comparable < ? > lower ) { return comp ( upper , lower ) ; //The method comp ( Comparable < T > , Comparable < T > ) is not applicable for the arguments ( Comparable < capture # 5-of ? > , Comparable < capture # 6-of ? > ) } private < T > int comp ( Comparable < T > upper , Comparable < T > lower ) { return upper.compareTo ( ( T ) lower ) ; }"
"int a = 5 ; System.out.println ( ( ( a < 5 ) ? 0 : 9 ) ) ; int a = 5 ; System.out.println ( ( ( a < 5 ) ? `` asd '' : 9 ) ) ; int a = 5 ; System.out.println ( ( ( ( a < 5 ) ? 0 : 9 ) + 4 ) ) ; `` The operator + is undefined for the argument type ( s ) Object & Serializable & Comparable < ? > , int '' ."
public interface IBaseEnum { String enumVal = null ; public static < T extends Enum < T > & IBaseEnum > Enum < T > fromString ( String strVal ) { if ( strVal == null ) return null ; // T.values ( ) has error because T is not recognised to have the method values ( ) for ( T myEnum : T.values ( ) ) { if ( myEnum.enumVal.equals ( strVal.toUpperCase ( ) ) ) { return myEnum ; } } return null ; } } public enum Colour implements IBaseEnum { Red ( `` red '' ) ; // ... }
"public boolean calculate ( float a , float b ) { float c = a / b ; return ( a == ( c * b ) ) ; }"
class Super { abstract void a_method ( < Sub > param ) ; } class Sub_A extends Super { void a_method ( Sub_A param ) { ... } class Sub_B extends Super { void a_method ( Sub_B param ) { ... } }
int asInt = ( valueAsBytes [ 3 ] & 0xFF ) | ( ( valueAsBytes [ 2 ] & 0xFF ) < < 8 ) | ( ( valueAsBytes [ 1 ] & 0xFF ) < < 16 ) | ( ( valueAsBytes [ 0 ] & 0xFF ) < < 24 ) ;
list.toArray ( new int [ list.size ( ) ] [ ] ) ; List < int [ ] > list = new ArrayList < > ( ) ; //some code//cast exceptionreturn ( int [ ] [ ] ) list.toArray ( ) ; //this way is okreturn list.toArray ( new int [ list.size ( ) ] [ ] ) ;
public class Container { private int value ; public Container ( int value ) { this.value=value ; } public int getValue ( ) { return this.value ; } public int sum ( Container c ) { return this.value+c.getValue ( ) ; } public void main ( ) { Container c1=new Container ( 1 ) ; Container c2=new Container ( 2 ) ; System.out.println ( `` sum : `` + c1.getValue ( ) +c2.getValue ( ) ) ; System.out.println ( `` sum : `` + c1.sum ( c2 ) ) ; } } sum : 12sum : 3 sum : 3sum : 3
Random rand = new Random ( ) ; for ( int k = 0 ; k < rand.nextInt ( 10 ) ; k++ ) { //Do stuff here }
public interface A { void X ( T t ) ; } public class B implements A { @ Override public < T extends foo > void X ( T type1 ) } public class C implements A { @ Override public < T extends bar > void X ( T type2 ) }
import java.util.List ; import java.util.ArrayList ; public static void main ( String [ ] args ) { List < Integer > possible = new ArrayList < Integer > ( ) ; for ( int i=0 ; i < 1000000 ; i++ ) { possible.add ( i ) ; } for ( int i : possible ) { System.out.println ( i ) ; } } 208850209850210850211 ... all the way to 999999
"class ClassLoaderHelper { private ClassLoaderHelper ( ) { } static File mapAlternativeName ( File lib ) { return null ; } /** * Returns an alternate path name for the given file * such that if the original pathname did not exist , then the * file may be located at the alternate location . * For most platforms , this behavior is not supported and returns null . */"
"Map < String , Long > map1 = ... Map < String , Long > map2 = ... Map < String , String > map3 = ... Map < String , Foo > fooMap = ... class Foo { long val1 ; long val2 ; String val3 ; }"
"package com.personal.carrot.core.models ; public interface AsyncResponse { } package com.personal.carrot.core.models ; import org.codehaus.jackson.annotate.JsonProperty ; public class APIResponse implements AsyncResponse { @ JsonProperty ( `` numberOfFeatures '' ) public Long numberOfFeatures ; } public interface APIRepository { @ POST ( `` MYURL '' ) Call < APIResponse > resolveCounts ( @ Body HashMap < String , String > body ) ; } Call < AsyncResponse > request = repository.resolveCounts ( payload ) ;"
"/html/body/div [ 5 ] /div [ 2 ] /div [ 9 ] /div [ 1 ] /div [ 2 ] /div/div [ 2 ] /div [ 2 ] /div/div/div [ 1 ] /div [ 2 ] /div [ 1 ] /a < a href= '' /url ? sa=t & amp ; rct=j & amp ; q= & amp ; esrc=s & amp ; source=web & amp ; cd= & amp ; cad=rja & amp ; uact=8 & amp ; ved=2ahUKEwiw7cbBv6LqAhVMAHIKHbbFCUYQFjAAegQIBxAB & amp ; url=https % 3A % 2F % 2Fwww.google.com % 2Fgmail % 2F & amp ; usg=AOvVaw3mZ_qbD_gQyp_sqkjrwStn '' onmousedown= '' return rwt ( this , '' , '' , '' , '' , 'AOvVaw3mZ_qbD_gQyp_sqkjrwStn ' , '' , '2ahUKEwiw7cbBv6LqAhVMAHIKHbbFCUYQFjAAegQIBxAB ' , '' , '' , event ) '' data-ctbtn= '' 2 '' data-cthref= '' /url ? sa=t & amp ; rct=j & amp ; q= & amp ; esrc=s & amp ; source=web & amp ; cd= & amp ; cad=rja & amp ; uact=8 & amp ; ved=2ahUKEwiw7cbBv6LqAhVMAHIKHbbFCUYQFjAAegQIBxAB & amp ; url=https % 3A % 2F % 2Fwww.google.com % 2Fgmail % 2F & amp ; usg=AOvVaw3mZ_qbD_gQyp_sqkjrwStn '' > < br > < h3 class= '' LC20lb DKV0Md '' > Gmail by Google < /h3 > < div class= '' TbwUpd NJjxre '' > < cite class= '' iUh30 bc tjvcx '' > www.google.com < span class= '' eipWBe '' > › gmail < /span > < /cite > < /div > < /a > driver.findElement ( By.xpath ( `` /html/body/div [ 5 ] /div [ 2 ] /div [ 9 ] /div [ 1 ] /div [ 2 ] /div/div [ 2 ] /div [ 2 ] /div/div/div [ 1 ] /div [ 2 ] /div [ 1 ] /a '' ) ) .click ( ) ; driver.findElement ( By.linkText ( `` Sign in '' ) ) .click ( ) ;"
< string name= '' string1 '' > something < /string > < string name= '' string2 '' > some other thisn < /string > < string name= '' string3 '' > asdfgh jkl < /string > < string name= '' string4 '' > qwerty uiop < /string > ... count = 0 ; public void onClick ( View v ) { count++ ; str= '' R.string.string '' + count ; textView.setText ( str ) ; }
LOW HIGH192.168.10.34 192.168.11.200200.50.1.1 200.50.2.2
private T metaData ; // type of T is lostpublic < R > R getMetaData ( Class < R > className ) { assert className.isInstance ( metaData ) ; return ( R ) metaData ; }
public class RunnableTest { public static void main ( String [ ] args ) { System.out.println ( `` === RunnableTest === '' ) ; // Anonymous Runnable Runnable r1 = new Runnable ( ) { @ Override public void run ( ) { System.out.println ( `` Hello world one ! `` ) ; } } ; // Lambda Runnable Runnable r2 = ( ) - > System.out.println ( `` Hello world two ! `` ) ; // Run em ! r1.run ( ) ; r2.run ( ) ; } }
public abstract Animal mateWith ( Animal mate ) ; mySnake.mateWith ( myArmadillo ) ; public abstract Animal_Of_My_Class mateWith ( Animal_Of_My_Class mate ) ;
byte b = 7 ; // why do n't I need to cast 7 to byte in this case ? byte b = ( byte ) 7 ; System.out.println ( b ) ; static void fun ( byte b ) { System.out.println ( b ) ; } public static void main ( String [ ] args ) { fun ( 7 ) ; // Compiler gives error because a cast is missing here . }
public class Message { public static final int MIN_BYTES = 5 ; } public class Ack extends Message { public static final int MIN_BYTES = 1 ; }
"import org.jnativehook.GlobalScreen ; import org.jnativehook.NativeHookException ; import org.jnativehook.keyboard.NativeKeyEvent ; import org.jnativehook.keyboard.NativeKeyListener ; import javax.swing . * ; import static java.util.logging.Level.OFF ; import static java.util.logging.Logger.getLogger ; import static javax.swing.SwingUtilities.invokeLater ; import static org.jnativehook.GlobalScreen . * ; import static org.jnativehook.keyboard.NativeKeyEvent.getKeyText ; public class Harness extends JFrame implements NativeKeyListener { private final JLabel mLabel = new JLabel ( `` Hello , world '' ) ; private int mCount ; public void init ( ) { getContentPane ( ) .add ( mLabel ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setLocationRelativeTo ( null ) ; setAlwaysOnTop ( true ) ; pack ( ) ; setVisible ( true ) ; } @ Override public void nativeKeyPressed ( final NativeKeyEvent e ) { final var s = getKeyText ( e.getKeyCode ( ) ) ; System.out.print ( s + `` `` + ( ++mCount % 10 == 0 ? `` \n '' : `` '' ) ) ; invokeLater ( ( ) - > mLabel.setText ( s ) ) ; } public static void main ( final String [ ] args ) throws NativeHookException { disableNativeHookLogger ( ) ; registerNativeHook ( ) ; final var harness = new Harness ( ) ; addNativeKeyListener ( harness ) ; invokeLater ( harness : :init ) ; } private static void disableNativeHookLogger ( ) { final var logger = getLogger ( GlobalScreen.class.getPackage ( ) .getName ( ) ) ; logger.setLevel ( OFF ) ; logger.setUseParentHandlers ( false ) ; } @ Override public void nativeKeyReleased ( final NativeKeyEvent e ) { } @ Override public void nativeKeyTyped ( final NativeKeyEvent e ) { } } Shift I Space A M Space I N S I D E Space T H E Space A P P L I C A T I O N Period Shift I Space A M Space O U T SI D E Space T H E Space A PP L I C A T I O N Period"
short a = 2 ; short b = 3 ; short s = a + b ; // error : incompatible types : possible lossy conversion from int to short final short a = 2 ; final short b = 3 ; short s = a + b ; // no error
"import java.io . * ; import java.util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; String s = scan.nextLine ( ) ; String [ ] ace = s.trim ( ) .split ( `` [ \\s+ ! , ? ._ ' @ ] '' ) ; scan.close ( ) ; System.out.println ( ace.length ) ; for ( String c : ace ) System.out.println ( c ) ; } }"
"` /* * To change this license header , choose License Headers in Project Properties . * To change this template file , choose Tools | Templates * and open the template in the editor . */package javaapplication5 ; import java.util.ArrayList ; import java.util.Scanner ; import javax.swing.JOptionPane ; public class Main { public static void main ( String [ ] args ) { String URLString = `` http : //www.systranet.com/dictionary/english-arabic/play '' ; ArrayList < String > wordList = new ArrayList < > ( ) ; String FlangMarker = `` < span class=\ '' dl_target_bullet\ '' > & diams ; < /span > < span class=\ '' dl_target_word\ '' > '' ; try { java.net.URL url = new java.net.URL ( URLString ) ; Scanner input = new Scanner ( url.openStream ( ) ) ; while ( input.hasNext ( ) ) { String line = input.nextLine ( ) ; // System.out.println ( line ) ; String word = `` '' ; if ( line.contains ( FlangMarker ) ) { for ( int i = FlangMarker.length ( ) ; line.charAt ( i ) ! = ' < ' ; i++ ) { word += line.charAt ( i ) ; } wordList.add ( word ) ; } } } catch ( java.net.MalformedURLException ex ) { System.out.println ( `` Invalid World '' ) ; } catch ( java.io.IOException ex ) { System.out.println ( `` I/O Errors : no such file '' ) ; } for ( int i = 0 ; i < wordList.size ( ) ; i++ ) { JOptionPane.showMessageDialog ( null , wordList.get ( i ) ) ; } } } `"
Collection < ? extends Number > c = new ArrayList < > ( ) ; c.add ( new Integer ( 1 ) ) ; // Compile time error List < List < ? extends Number > > history = new ArrayList < > ( ) ; List < Integer > integers = new ArrayList < > ( ) ; integers.add ( new Integer ( 1 ) ) ; List < Double > doubles = new ArrayList < > ( ) ; doubles.add ( new Double ( 2 ) ) ; history.add ( integers ) ; // This is allowedhistory.add ( doubles ) ; // This is allowed
"interface Main { public static void main ( String [ ] args ) { System.out.println ( `` Inside main '' ) ; int a = 4 , b = 6 ; System.out.println ( a+b ) ; } }"
public class MyClass { public enum enumA { .. } public enum enumB { .. } public enum enumC { .. } public enum enumD { .. } private OneOfTheEnumsAboveMember enumMember ; }
try { ... . } catch ( IOException | NumberFormatException e ) { //what 's the static type of e in here ? Is it Exception ? System.out.println ( e.getClass ( ) ) ; }
FileInputStream fin = new FileInputStream ( `` data.txt '' ) ; BufferedInputStream bin = new BufferedInputStream ( fin ) ; InputStream in = new FileInputStream ( `` data.txt '' ) ; in = new BufferedInputStream ( in ) ;
"libtool : link : ranlib .libs/libcbindings.alibtool : link : ( cd `` .libs '' & & rm -f `` libcbindings.la '' & & ln -s '' ../libcbindings.la '' `` libcbindings.la '' ) make [ 1 ] : Entering directory ` /home/xxx/repos/pycompss/COMPSs/Bindings/c/src/bindinglib ' /usr/bin/mkdir -p'/home/cramonco/svn/compss/framework/trunk/builders/specs/deb/compss-c-binding/tmp/opt/COMPSs/Bindings/c/lib'/usr/bin/mkdir : can not create directory ‘ /home/cramonco ’ : Permission deniedmake [ 1 ] : *** [ install-libLTLIBRARIES ] Error 1make [ 1 ] : Leaving directory ` /home/xxx/xxx/repos/pycompss/COMPSs/Bindings/c/src/bindinglib'make : *** [ install-am ] Error 2BindingLib Installation failed , please check errors above !"
public class Box < T > { private T t ; public void set ( T t ) { this.t = t ; } public T get ( ) { return t ; } public < U extends Number > void inspect ( U u ) { System.out.println ( `` T : `` + t.getClass ( ) .getName ( ) ) ; System.out.println ( `` U : `` + u.getClass ( ) .getName ( ) ) ; } public static void main ( String [ ] args ) { Box < Integer > integerBox = new Box < Integer > ( ) ; integerBox.set ( new Integer ( 10 ) ) ; integerBox.inspect ( `` some text '' ) ; // error : this is still String ! } } public void inspect ( Number u ) { System.out.println ( `` T : `` + t.getClass ( ) .getName ( ) ) ; System.out.println ( `` Second : `` + u.getClass ( ) .getName ( ) ) ; } class A { void foo ( ) { } } class B extends A { void bar ( ) { } } class Generic < T extends B > { void baz ( T obj ) { obj.foo ( ) ; obj.bar ( ) ; } } // vsclass NonGeneric { void baz ( B obj ) { obj.foo ( ) ; obj.bar ( ) ; } }
File [ ] hiddenFiles = new File ( `` . `` ) .listFiles ( File : :isHidden ) listFiles ( FileFilter filter ) listFiles ( FilenameFilter filter ) ( File file ) - > file.isHidden ( ) boolean accept ( File pathname ) File [ ] hiddenFiles = new File ( `` . `` ) .listFiles ( new FileFilter ( ) { public boolean accept ( File file ) { return file.isHidden ( ) ; } } ) ;
"List < ClassA > list1 = new ArrayList < > ( ) ; list1.add ( new ClassA ( 12 , '' John '' , '' 1111111111 '' ) ) List < ClassB > list2 = new ArrayList < > ( ) ;"
SimpleDateFormat dt1 = new SimpleDateFormat ( `` ddmmyyyyy '' ) ; List < MenuPrice > menuPrices = findAll ( restaurant ) ; menuPrices.parallelStream ( ) .collect ( Collectors.groupingBy ( dt1.format ( MenuPrice : :getUpdateDate ) ) ) ;
"{ `` objects '' : { `` object1 '' : { `` field1 '' : `` foo '' `` field2 '' : `` foo '' `` field3 '' : `` foo '' `` folderwithfileslocation '' : `` C : /ProgramFiles/myapp/foobar/ '' } , `` object2 '' : { `` field1 '' : `` foobar '' `` field2 '' : `` foobar '' `` field3 '' : `` foobar '' `` folderwithfileslocation '' : `` C : /ProgramFiles/myapp/barbar/ '' } , ... ... ... ... . }"
"import java.awt . * ; import java.awt.event . * ; import java.awt.geom . * ; import java.util.ArrayList ; import javax.swing.JButton ; import javax.swing.JComponent ; import javax.swing.JFrame ; public class LukeButton extends JComponent implements MouseListener { public static void main ( String [ ] args ) { JFrame frame = new JFrame ( ) ; frame.setTitle ( `` Luke '' ) ; frame.setSize ( 300 , 300 ) ; frame.setLocationRelativeTo ( null ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; LukeButton lb = new LukeButton ( ) ; lb.addActionListener ( e- > { System.out.println ( `` Success '' ) ; } ) ; frame.add ( lb , BorderLayout.CENTER ) ; frame.setVisible ( true ) ; } //ArrayList of listenersprivate final ArrayList < ActionListener > listeners = new ArrayList < ActionListener > ( ) ; public LukeButton ( ) { this.addMouseListener ( this ) ; } //Adds a listeners to the listpublic void addActionListener ( ActionListener e ) { listeners.add ( e ) ; } //Called when button is provokedpublic void fireActionListeners ( ) { if ( ! listeners.isEmpty ( ) ) { ActionEvent evt = new ActionEvent ( this , ActionEvent.ACTION_PERFORMED , `` LukeButton '' ) ; for ( ActionListener l : listeners ) { l.actionPerformed ( evt ) ; } } } //Listens for click on my componentpublic void mousePressed ( MouseEvent e ) { fireActionListeners ( ) ; } public Dimension getPreferredSize ( ) { return new Dimension ( 100 , 100 ) ; } //Draws my buttonpublic void paintComponent ( Graphics g ) { super.paintComponent ( g ) ; Graphics2D g2 = ( Graphics2D ) g ; Shape rec = new Rectangle2D.Float ( 10 , 10 , 60 , 80 ) ; g2.setColor ( Color.BLACK ) ; g2.setStroke ( new BasicStroke ( 5 ) ) ; g2.draw ( rec ) ; g2.setColor ( Color.BLUE ) ; g2.fill ( rec ) ; } //Methods that must be over written.public void mouseClicked ( MouseEvent e ) { } public void mouseEntered ( MouseEvent e ) { } public void mouseExited ( MouseEvent e ) { } public void mouseReleased ( MouseEvent e ) { } }"
"public interface PostSurveyFormApiInterface { @ Multipart @ POST ( `` Shared/InsertDirectSurveyAsync '' ) Call < ResponseBody > postDirectSurveyForm ( @ Header ( `` Authorization '' ) String auth , @ Header ( `` Content-Type '' ) String contentType , @ Part ( `` CompanyName '' ) RequestBody companyName , @ Part ( `` Address '' ) RequestBody address , @ Part MultipartBody.Part digitalStamp , @ Part MultipartBody.Part digitalSignature , @ Part MultipartBody.Part [ ] surveyImage ) ; } private void postDataToServer ( List < Uri > paths ) { RequestBody companyName = RequestBody.create ( MediaType.parse ( `` text/plain '' ) , edtCompanyName.getText ( ) .toString ( ) .trim ( ) ) ; RequestBody address = RequestBody.create ( MediaType.parse ( `` text/plain '' ) , edtCompanyAddress.getText ( ) .toString ( ) ) ; //for single stamp image File fileStamp = new File ( getRealPathFromURI ( stampUri ) ) ; RequestBody requestBodyStamp = RequestBody.create ( MediaType.parse ( `` image/* '' ) , fileStamp ) ; MultipartBody.Part stampImagePart = MultipartBody.Part.createFormData ( `` DigitalStamp '' , fileStamp.getName ( ) , requestBodyStamp ) ; //for single signature image File fileSignature = new File ( getRealPathFromURI ( signatureUri ) ) ; RequestBody requestBodySignature = RequestBody.create ( MediaType.parse ( `` image/* '' ) , fileSignature ) ; MultipartBody.Part signatureImagePart = MultipartBody.Part.createFormData ( `` DigitalSignature '' , fileSignature.getName ( ) , requestBodySignature ) ; //for multiple survey ( files ) images MultipartBody.Part [ ] surveyImagesParts = new MultipartBody.Part [ paths.size ( ) ] ; for ( int index = 0 ; index < paths.size ( ) ; index++ ) { Log.v ( TAG , '' survey image path \n '' +getRealPathFromURI ( paths.get ( index ) ) ) ; File file = new File ( getRealPathFromURI ( paths.get ( index ) ) ) ; RequestBody surveyBody = RequestBody.create ( MediaType.parse ( `` image/* '' ) , file ) ; surveyImagesParts [ index ] = MultipartBody.Part.createFormData ( `` Files '' , file.getName ( ) , surveyBody ) ; } PostSurveyFormApiInterface apiInterface = ApiClient.getApiClient ( ) .create ( PostSurveyFormApiInterface.class ) ; apiInterface.postDirectSurveyForm ( getToken ( ) , `` application/json '' , companyName , address , stampImagePart , signatureImagePart , surveyImagesParts ) .enqueue ( new Callback < ResponseBody > ( ) { @ Override public void onResponse ( Call < ResponseBody > call , Response < ResponseBody > response ) { progressDialog.dismiss ( ) ; if ( response.isSuccessful ( ) ) { Log.v ( TAG , '' response successful '' ) ; } else { Log.v ( TAG , '' failed to post data '' ) ; Log.v ( TAG , '' error : `` +response.toString ( ) ) ; } } @ Override public void onFailure ( Call < ResponseBody > call , Throwable t ) { t.printStackTrace ( ) ; progressDialog.dismiss ( ) ; Log.e ( TAG , '' error : `` +t.getMessage ( ) ) ; } } ) ; }"
"public class board { public static void addComponentsToPane ( Container pane ) { pane.setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; JPanel leftTop = new JPanel ( ) ; leftTop.setPreferredSize ( new Dimension ( 251,300 ) ) ; leftTop.setBackground ( Color.black ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 0 ; c.gridy = 0 ; pane.add ( leftTop , c ) ; JPanel middleTop = new JPanel ( ) ; middleTop.setPreferredSize ( new Dimension ( 251,200 ) ) ; middleTop.setBackground ( Color.green ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 1 ; c.gridy = 0 ; pane.add ( middleTop , c ) ; JPanel rightTop = new JPanel ( ) ; rightTop.setPreferredSize ( new Dimension ( 251,600 ) ) ; rightTop.setBackground ( Color.blue ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 2 ; c.gridy = 0 ; pane.add ( rightTop , c ) ; JPanel leftBottom = new JPanel ( ) ; leftBottom.setPreferredSize ( new Dimension ( 251,300 ) ) ; leftBottom.setBackground ( Color.red ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 0 ; c.gridy = 1 ; pane.add ( leftBottom , c ) ; JPanel middleBottom = new JPanel ( ) ; middleBottom.setPreferredSize ( new Dimension ( 251,400 ) ) ; middleBottom.setBackground ( Color.yellow ) ; c.fill = GridBagConstraints.HORIZONTAL ; c.gridx = 1 ; c.gridy = 1 ; pane.add ( middleBottom , c ) ; } private static void createAndShowGUI ( ) { JFrame frame = new JFrame ( `` GridBagLayoutDemo '' ) ; frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE ) ; addComponentsToPane ( frame.getContentPane ( ) ) ; frame.pack ( ) ; frame.setVisible ( true ) ; } public static void main ( String [ ] args ) { javax.swing.SwingUtilities.invokeLater ( new Runnable ( ) { public void run ( ) { createAndShowGUI ( ) ; } } ) ; } }"
"< Resource Name= '' 172.16.8.2 '' > < Capabilities > < Host > < TaskCount > 0 < /TaskCount > < Queue > short < /Queue > < Queue/ > < /Host > < Processor > < Architecture > x86_64 < /Architecture > < Speed > 3.0 < /Speed > < CoreCount > 4 < /CoreCount > < /Processor > < OS > < OSType > Linux < /OSType > < MaxProcessesPerUser > 32 < /MaxProcessesPerUser > < /OS > < StorageElement > < Size > 8 < /Size > < /StorageElement > < Memory > < PhysicalSize > 4 < /PhysicalSize > < VirtualSize > 8 < /VirtualSize > < /Memory > < ApplicationSoftware > < Software > Java < /Software > < /ApplicationSoftware > < Service/ > < VO/ > < Cluster/ > < FileSystem/ > < NetworkAdaptor/ > < JobPolicy/ > < AccessControlPolicy/ > < /Capabilities > < Requirements/ > < Adaptors > < Adaptor name= '' integratedtoolkit.gat.master.GATAdaptor '' > < BrokerAdaptor > sshtrilead < /BrokerAdaptor > < /Adaptor > < /Adaptors > < /Resource > < Worker Name= '' 172.16.8.2 '' > < InstallDir > /opt/COMPSs/Runtime/scripts/system/ < /InstallDir > < WorkingDir > /home/user/test/wdir/ < /WorkingDir > < AppDir > /home/user/test/java/matmul/jar/ < /AppDir > < User > user < /User > < /Worker > @ Method ( declaringClass = `` matmul.files.MatmulImpl '' ) void multiplyAccumulative ( @ Parameter ( direction = Direction.INOUT ) String file1 , @ Parameter ( ) String file2 , @ Parameter ( ) String file3 , @ Parameter ( ) int bsize ) ;"
"System.out.println ( Integer.parseInt ( `` 7FFFFFFF '' , 16 ) ) ; //this is ok.System.out.println ( Integer.parseInt ( `` FFFFFFFF '' , 16 ) ) ; //this throws ExceptionSystem.out.println ( Integer.valueOf ( `` FFFFFFFF '' , 16 ) ) ; //this throws Exception"
"public class Customer { private String name ; private String type ; private BigDecimal total ; private BigDecimal balance ; // Setter , getter } Customer custa = new Customer ( `` A '' , `` STANDARD '' , new BigDecimal ( `` 1000 '' ) , new BigDecimal ( `` 1500 '' ) ) ; Customer custa1 = new Customer ( `` A '' , `` VIP '' , new BigDecimal ( `` 2000 '' ) , new BigDecimal ( `` 2500 '' ) ) ; Customer custb = new Customer ( `` B '' , `` STANDARD '' , new BigDecimal ( `` 3000 '' ) , new BigDecimal ( `` 3500 '' ) ) ; Customer custc = new Customer ( `` C '' , `` STANDARD '' , new BigDecimal ( `` 4000 '' ) , new BigDecimal ( `` 4500 '' ) ) ; Customer custa2 = new Customer ( `` A '' , `` VIP '' , new BigDecimal ( `` 1500 '' ) , new BigDecimal ( `` 2500 '' ) ) ; List < Customer > listCust = new ArrayList < > ( ) ; listCust.add ( custa ) ; listCust.add ( custa1 ) ; listCust.add ( custb ) ; listCust.add ( custc ) ; listCust.add ( custa2 ) ; [ { `` A '' , `` STANDARD '' , new BigDecimal ( `` 1000 '' ) , new BigDecimal ( `` 1500 '' ) } , { `` A '' , `` VIP '' , new BigDecimal ( `` 3500 '' ) , new BigDecimal ( `` 5000 '' ) } , { `` B '' , `` STANDARD '' , new BigDecimal ( `` 3000 '' ) , new BigDecimal ( `` 3500 '' ) } , { `` C '' , `` STANDARD '' , new BigDecimal ( `` 4000 '' ) , new BigDecimal ( `` 4500 '' ) } ] listCust.stream ( ) .collect ( Collectors.groupingBy ( Customer : :getName , Collectors.groupingBy ( Customer : :getType , Collectors.reducing ( BigDecimal.ZERO , Customer : :getTotal , BigDecimal : :add ) ) ) ) .entrySet ( )"
class Demo { public static void a ( String s ) { System.out.println ( `` string called '' ) ; } public static void a ( Object a ) { System.out.println ( `` Object called '' ) ; } public static void main ( String ... asrgs ) { a ( null ) ; } } class Demo { public static void a ( String s ) { System.out.println ( `` string called '' ) ; } public static void a ( Integer n ) { System.out.println ( `` number called '' ) ; } public static void a ( Object a ) { System.out.println ( `` Object called '' ) ; } public static void main ( String ... asrgs ) { a ( null ) ; } }
"baz ( uint32 , ,bool )"
"DateTimeFormatter fmt = DateTimeFormatter.ofPattern ( `` yyyyMMddHHmmssSSS '' ) ; System.out.println ( LocalDateTime.parse ( LocalDateTime.now ( ) .format ( fmt ) , fmt ) ) ; Exception in thread `` main '' java.time.format.DateTimeParseException : Text '20200605102607066 ' could not be parsed at index 0 at java.time.format.DateTimeFormatter.parseResolved0 ( DateTimeFormatter.java:1949 ) at java.time.format.DateTimeFormatter.parse ( DateTimeFormatter.java:1851 ) at java.time.LocalDateTime.parse ( LocalDateTime.java:492 ) at Test.main ( AccountPasswordHistoryTypeHandler.java:102 )"
LongStream stream 1 = ... LongStream stream 2 = ... stream2 = stream2.filter ( e- > stream1.contains ( e ) ) ;
set element elemName subElem sumElemName set element `` aaa bbb '' subElem `` ccc '' set element `` aaa bbb '' subElem cccset element `` aaa '' subElem `` ccc '' String regex = `` ^\\s*set\\s+element\\s+\ '' ( .* ) \ '' \\s+subElem\\s+\ '' ( . * ) \ '' \\s* $ '' ; String regex = `` ^\\s*set\\s+element\\s+ ( ? < ! \ '' ) ( \\S+ ) \\s+subElem\\s+ ( ? < ! \ '' ) ( \\S+ ) \\s* $ '' ;
"public static int quotient ( int numerator , int denominator ) throws ArithmeticException { return numerator / denominator ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; try { int denominator = scanner.nextInt ( ) ; System.out.println ( quotient ( 10 , denominator ) ) ; } catch ( ArithmeticException e ) { System.out.println ( `` Aritmetic exception '' ) ; } catch ( InputMismatchException e ) { System.out.println ( `` InputMismatchException '' ) ; } }"
"final byte value = 1 ; final int shift = 1 ; byte result = value < < shift ; private void shiftAndCheck ( final byte value , final int shift ) { byte result = value < < shift ; } java : incompatible types : possible lossy conversion from int to byte"
public class ToBeCloned implements Cloneable { public int returnInt ( ) { return 1 ; } public void printTest ( ) { System.out.println ( `` returnInt ( ) : '' +returnInt ( ) + '' \nToBeCloned Original '' ) ; } @ Override public ToBeCloned clone ( ) throws CloneNotSupportedException { return ( ToBeCloned ) super.clone ( ) ; } }
public boolean containsAll ( Collection < ? > c ) { for ( Object e : c ) if ( ! contains ( e ) ) return false ; return true ; } public boolean contains ( Object o ) { return map.containsKey ( o ) ; } public boolean contains ( Object o ) { Iterator < E > it = iterator ( ) ; if ( o==null ) { while ( it.hasNext ( ) ) if ( it.next ( ) ==null ) return true ; } else { while ( it.hasNext ( ) ) if ( o.equals ( it.next ( ) ) ) return true ; } return false ; }
plugins { ` java-library ` jacoco checkstyle }
val top : Long = 1000000_1000000_1000000_1000000_1000000_1000000_1000000 long TOP = 1000000_1000000_1000000_1000000_1000000_1000000_1000000L ; The value is out of range
"public static Subarray findSmallestSubarrayCoveringSet ( List < String > paragraph , Set < String > keywords ) { Map < String , Integer > keywordsToCover = new HashMap < > ( ) ; for ( String keyword : keywords ) { keywordsToCover.put ( keyword , keywordsToCover.containsKey ( keyword ) ? keywordsToCover.get ( keyword ) + 1 : 1 ) ; }"
"class Student { private Integer studentId ; private Double scoreA ; private Integer scoreB ; private Long scoreC ; // ... getter/setter ... } public class SortHelper { public static < T > void Sort ( List < T > list , Function < T , Double > fn ) { // Double Collections.sort ( list , Comparator.comparing ( fn ) ) ; } } public static < T > void Sort ( List < T > list , Function < T , Number > fn ) { // ` Number ` Collections.sort ( list , Comparator.comparing ( fn ) ) ; // Error ! } // so that I can do : List < Student > students = loadStudents ( ) ; SortHelper.Sort ( students , Student : :getScoreA ) ; // DoubleSortHelper.Sort ( students , Student : :getScoreB ) ; // IntegerSortHelper.Sort ( students , Student : :getScoreC ) ; // Long"
"class MyClass implements MyInterface , Serializable { private static final serialVersionUID = 42 ; ... } interface MyInterface { void A ( ) ; void B ( ) ; } interface MyInterface { void A ( ) ; void B ( ) ; void C ( ) ; }"
ParseUser currentUser = ParseUser.getCurrentUser ( ) ; if ( currentUser.username == postedBy ) { }
"private void mergeMaps ( HashMap < String , FailureExample > current , HashMap < String , FailureExample > other ) { current.forEach ( ( k , v ) - > other.merge ( k , v , ( v1 , v2 ) - > { FailureExample answer = new FailureExample ( ) ; addFromListWithSizeLimit ( v1 , answer ) ; addFromListWithSizeLimit ( v2 , answer ) ; // answer.requests.addAll ( v1.requests ) ; // answer.requests.addAll ( v2.requests ) ; return answer ; } ) ) ; } map1 { } ; map2 { < a , < a1 > > } returns map3 { < a , < a1 > > } map1 { < a , < b1 > > } ; map2 { < a , < a1 > > } returns map3 { < a , < a1 , b1 > > }"
